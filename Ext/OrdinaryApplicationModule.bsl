Перем АдресРесурсовОбозревателя Экспорт; // В переменной содержится значение 
										 // адреса ресурса данной конфигурации
Перем глОбщиеЗначения Экспорт;

// Параметры внешних регламентированных отчетов.
Перем ПараметрыВнешнихРегламентированныхОтчетов Экспорт;
Перем КонтекстОнлайнСервисовРегламентированнойОтчетности Экспорт;
Перем КонтекстЭДО Экспорт;

// ПодключаемоеОборудование
Перем глПодключаемоеОборудование Экспорт; // для кэширования на клиенте
Перем глПоддерживаемыеТипыВО Экспорт;
// Конец ПодключаемоеОборудование

// СтандартныеПодсистемы
// СтандартныеПодсистемы.БазоваяФункциональность
// СписокЗначений для накапливания пакета сообщений в журнал регистрации, 
// формируемых в клиентской бизнес-логике.
Перем СообщенияДляЖурналаРегистрации Экспорт; 
// Признак того, что в данном сеансе не нужно повторно предлагать установку
Перем ПредлагатьУстановкуРасширенияРаботыСФайлами Экспорт;
// Признак того, что в данном сеансе не нужно запрашивать стандартное подтверждение при выходе
Перем ПропуститьПредупреждениеПередЗавершениемРаботыСистемы Экспорт;
// Структура параметров для клиентской логики по завершению работы в программе.
Перем ПараметрыРаботыКлиентаПриЗавершении Экспорт;
// Структура, содержащая в себе время начала и окончания обновления программы.
Перем ПараметрыРаботыКлиентаПриОбновлении Экспорт;

// Конец СтандартныеПодсистемы.БазоваяФункциональность

// Конец СтандартныеПодсистемы

Процедура ПередНачаломРаботыСистемы(Отказ)
	
	УправлениеПользователями.ПроверитьВозможностьРаботыПользователя(Отказ);
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ДействияПередНачаломРаботыСистемы(Отказ);
	// Конец СтандартныеПодсистемы
			
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы()
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ДействияПриНачалеРаботыСистемы(Истина);
	// Конец СтандартныеПодсистемы
	
	ЗаголовокСистемы = Константы.ЗаголовокСистемы.Получить();
	Если НЕ Пустаястрока(ЗаголовокСистемы) Тогда
		УстановитьЗаголовокСистемы(ЗаголовокСистемы);
	КонецЕсли;

	ПервыйЗапуск = (Константы.НомерВерсииКонфигурации.Получить()="");
	
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОткрыватьПриЗапускеРабочийСтол") Тогда
		ОбработкаРабочийСтол = РабочийСтолПереопределяемый.ПолучитьОбработкуРабочийСтол(глЗначениеПеременной("глТекущийПользователь"));
		ОбработкаРабочийСтол.ПолучитьФорму().Открыть();
	КонецЕсли;
	
	//vvv добавляем если
	Если РольДоступна("ПолныеПрава") Тогда
		ВыполнитьОбновлениеИнформационнойБазы();
	КонецЕсли;
	
	ЗавершениеРаботыПользователей.УстановитьКонтрольРежимаЗавершенияРаботыПользователей();
		
	Если ПравоДоступа("Использование", Метаданные.Обработки.МенеджерКонтактов)
		И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "АвтооткрытиеЭлектроннойПочтыПриЗапускеПрограммы") = Истина Тогда
		Обработки.МенеджерКонтактов.ПолучитьФорму().Открыть();
	КонецЕсли;
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.НаборПерсонала)
	   И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "АвтооткрытиеНабораПриЗапускеПрограммы") = Истина Тогда
		Обработки.НаборПерсонала.ПолучитьФорму().Открыть();
	КонецЕсли;
	
	ПроверятьПриЗапуске = ВосстановитьЗначение("ПроверкаНаличияОбновленияПроверятьПриЗапуске");
	ПроверятьПриЗапуске = ?(ТипЗнч(ПроверятьПриЗапуске) = Тип("Неопределено"), Ложь, ПроверятьПриЗапуске);

	Если ПроверятьПриЗапуске Тогда

		Обозреватель = Обработки.Обозреватель.Создать();
		Форма        = Обозреватель.ПолучитьФорму("ПроверкаНаличияОбновления");

		Если Обозреватель.Проверить(Форма.ЭлементыФормы) Тогда

			ПоказПриПоявленииНовойВерсии = ВосстановитьЗначение("ПроверкаНаличияОбновленияПоказПриПоявленииНовойВерсии");
			ПоказПриПоявленииНовойВерсии = ?(ТипЗнч(ПоказПриПоявленииНовойВерсии)=Тип("Неопределено"),Ложь,ПоказПриПоявленииНовойВерсии);

			ВерсияДистрибутива = ВосстановитьЗначение("ПроверкаНаличияОбновленияПоследняяВерсия");

			Если ПоказПриПоявленииНовойВерсии Тогда

				Если ВерсияДистрибутива <> Форма.ЭлементыФормы.ВерсияДистрибутива.Значение Тогда
					Форма.Открыть();
				КонецЕсли;

			Иначе
				Форма.Открыть();
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	ПроверитьПодключениеОбработчикаОжидания();
	
	ПолучитьВнешниеКомпонентыПриНеобходимости();
	
	// Подключение компоненты для склонения ФИО
	Попытка
		// Загружаем внешнюю компоненту
		ЗагрузитьВнешнююКомпоненту("NameDecl.dll");
		глКомпонентаСклоненияФИО = Новый("AddIn.NameDeclension");
		
	Исключение
		// Не удалось выполнить операции с внешней компонентой
		//ОбщегоНазначения.СообщитьОбОшибке("Ошибка загрузки внешней компоненты для склонения ФИО! Функции склонения будут недоступны!");
		
	КонецПопытки;
	
	//ОткрытьТекущиеЗадачиПользователя = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОткрыватьПриЗапускеСписокТекущихЗадачПользователя")
	//									И ПравоДоступа("Использование", Метаданные.Обработки.ТекущиеЗадачи);
	//
	//Если ОткрытьТекущиеЗадачиПользователя Тогда
	//	Обработки.ТекущиеЗадачи.ПолучитьФорму().Открыть();
	//КонецЕсли;
	//
		
	// Календарь бухгалтера. Регламентированная отчетность.
	ПроверитьНапоминанияКалендарьБухгалтераСобытия();

	// Начнем проверку динамического обновления конфигурации
	НачатьПроверкуДинамическогоОбновленияИБ();
	
	ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая();
		
	Если ЭтоФайловаяИБ Тогда
					
		ПользовательДляВыполненияРеглЗаданий = Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить();
		
		Если глЗначениеПеременной("глТекущийПользователь") = ПользовательДляВыполненияРеглЗаданий Тогда
			
			// с интервалом секунд вызываем процедуру работы с регламентными заданиями
			ПоддержкаРегламентныхЗаданиеДляФайловойВерсии();
			
			ИнтервалДляОпроса = Константы.ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте.Получить();
			
			Если ИнтервалДляОпроса = Неопределено
				ИЛИ ИнтервалДляОпроса = 0 Тогда
				
				ИнтервалДляОпроса = 30;	
				
			КонецЕсли;
			
			ПодключитьОбработчикОжидания("ПоддержкаРегламентныхЗаданиеДляФайловойВерсии", ИнтервалДляОпроса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// автообмен данными
	Если глЗначениеПеременной("глОбработкаАвтоОбменДанными") <> Неопределено Тогда
		
		// подключим обработчик обменов данными
		ПодключитьОбработчикОжидания("ПроверкаОбменаДанными", глЗначениеПеременной("глКоличествоСекундОпросаОбмена"));
			
	КонецЕсли;
	
		
	Если Не ПервыйЗапуск Тогда
 		// Открытие дополнительной информации
		Форма = Обработки.ДополнительнаяИнформация.ПолучитьФорму("ФормаРабочийСтол");
		//vvv
		//Форма.Открыть();
		//
		// Форма помощника обновления конфигурации выводится поверх остальных окон.
		Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
			ОбработкаОбновлениеКонфигурации = Обработки.ОбновлениеКонфигурации.Создать();
			ОбработкаОбновлениеКонфигурации.ПроверитьНаличиеОбновлений();
		КонецЕсли;
		
		Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОткрыватьПриЗапускеСписокТекущихЗадачПользователя") Тогда
			Задачи.ЗадачаИсполнителя.ПолучитьФормуСписка().Открыть();
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ПриНачалеРаботыСистемы()

// Процедура осуществляет проверку на необходимость обмена данными с заданным интервалом
Процедура ПроверкаОбменаДанными() Экспорт

	Если глЗначениеПеременной("глОбработкаАвтоОбменДанными") = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	ОтключитьОбработчикОжидания("ПроверкаОбменаДанными");
	
	// проводим обмен данными
	глЗначениеПеременной("глОбработкаАвтоОбменДанными").ПровестиОбменДанными(); 
		
	ПодключитьОбработчикОжидания("ПроверкаОбменаДанными", глЗначениеПеременной("глКоличествоСекундОпросаОбмена"));

КонецПроцедуры

// процедура служит для поддержки работы регламентных заданий в файловой версии
Процедура ПоддержкаРегламентныхЗаданиеДляФайловойВерсии() Экспорт
	
	ВыполнитьОбработкуЗаданий();
	
КонецПроцедуры

// Процедура проверяет и при необходимости подключает обработчик ожидания
// на запуск процедуры ПроверитьНапоминания()
//
// Параметры:
//  Нет.
//
Процедура ПроверитьПодключениеОбработчикаОжидания() Экспорт

	ИнтервалПроверкиНапоминанийВСекундах = Константы.ИнтервалПроверкиНапоминанийВСекундах.Получить();
	
	Если глЗначениеПеременной("глТекущийПользователь") <> Неопределено
		 И ТипЗнч(глЗначениеПеременной("глТекущийПользователь")) = Тип("СправочникСсылка.Пользователи")
		 И НЕ глЗначениеПеременной("глТекущийПользователь").Пустая()
		 И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ИспользоватьНапоминания")
		 И ИнтервалПроверкиНапоминанийВСекундах > 0 Тогда
		 
		ПодключитьОбработчикОжидания("ПроверитьНапоминания", ИнтервалПроверкиНапоминанийВСекундах);

		УправлениеКонтактами.ПроверитьНапоминанияПользователя(глЗначениеПеременной("глТекущийПользователь"));

	Иначе

		ОтключитьОбработчикОжидания("ПроверитьНапоминания");

	КонецЕсли; 

КонецПроцедуры

// ПроверитьНапоминанияПользователяКалендарьБухгалтераСобытия
//
Процедура ПроверитьНапоминанияКалендарьБухгалтераСобытия() Экспорт
	РегламентированнаяОтчетность.ПроверитьНапоминанияПользователяКалендарьБухгалтераСобытия(глЗначениеПеременной("глТекущийПользователь"));
КонецПроцедуры // ПроверитьНапоминанияПользователяКалендарьБухгалтераСобытия

// Процедура проверяет, есть ли необходимость выполнять обновление информационной базы.
// Если необходимо - выполняется обновление.
// Если обновление не удалось выполнить - предлагается завершить работу системы.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт

	// Проверка необходимости обновления информационной базы.
	Если НЕ ПустаяСтрока(Метаданные.Версия)
	   И Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия И НЕ ПустаяСтрока(Константы.НомерВерсииКонфигурации.Получить()) Тогда
		Предупреждение("Изменился номер версии конфигурации. Будет выполнено обновление информационной базы.");
	ИначеЕсли  ПустаяСтрока(Константы.НомерВерсииКонфигурации.Получить()) Тогда
		Предупреждение("Установлена новая база. Будет выполнено начальное заполнение информационной базы.");
	Иначе
		Возврат;
	КонецЕсли;

	// Проверка наличия прав для обновления информационной базы.
	Если НЕ ПравоДоступа("МонопольныйРежим", Метаданные) 
	 ИЛИ НЕ ПравоДоступа("Использование",    Метаданные.Обработки.ОбновлениеИнформационнойБазы) 
	 ИЛИ НЕ ПравоДоступа("Просмотр",         Метаданные.Обработки.ОбновлениеИнформационнойБазы) Тогда

		Предупреждение("Недостаточно прав для выполнения обновления. Работа системы будет завершена.");

		ЗавершитьРаботуСистемы();
		Возврат;
	КонецЕсли;

	// Установка монопольного режима для обновления информационной базы.
	Попытка
		УстановитьМонопольныйРежим(Истина);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		Предупреждение("Не удалось установить монопольный режим. Работа системы будет завершена.");

		ЗавершитьРаботуСистемы();
		Возврат;
	КонецПопытки;

	// Обновление информационной базы.
	Обработки.ОбновлениеИнформационнойБазы.Создать().ВыполнитьОбновление();

	// Откючение монопольного режима.
	УстановитьМонопольныйРежим(Ложь);

	// Проверка выполнения обновления информационной базы.
	Если Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия Тогда
		Текст = "Не выполнено обновление информационной базы! Завершить работу системы?";
		Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );

		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗавершитьРаботуСистемы();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура подключает внешние компоненты, которые поставляются с конфигурацией.
//
Процедура ПолучитьВнешниеКомпонентыПриНеобходимости()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВнешниеКомпоненты.ИмяФайла,
	|	ВнешниеКомпоненты.ДатаИзмененияФайла
	|ИЗ
	|	РегистрСведений.ВнешниеКомпоненты КАК ВнешниеКомпоненты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Файл = Новый Файл(КаталогПрограммы()+ Выборка.ИмяФайла);
		
		Если Не Файл.Существует() Или Не Файл.ПолучитьВремяИзменения() = Выборка.ДатаИзмененияФайла Тогда
			НаборЗаписей = РегистрыСведений.ВнешниеКомпоненты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИмяФайла.Установить(Выборка.ИмяФайла);
			НаборЗаписей.Прочитать();
			
			Попытка
				НаборЗаписей[0].ХранилищеФайла.Получить().Записать(КаталогПрограммы()+ Выборка.ИмяФайла);
				Файл = Новый Файл(КаталогПрограммы()+ Выборка.ИмяФайла);
				Файл.УстановитьВремяИзменения(Выборка.ДатаИзмененияФайла);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьВнешниеКомпонентыПриНеобходимости()

// Функция возвращает значение экспортных переменных модуля приложенийа
//
// Параметры
//  Имя - строка, содержит имя переменной целиком 
//
// Возвращаемое значение:
//   значение соответствующей экспортной переменной
Функция глЗначениеПеременной(Имя) Экспорт

	Возврат ОбщегоНазначения.ПолучитьЗначениеПеременной(Имя, глОбщиеЗначения);
	
КонецФункции

// Процедура установки значения экспортных переменных модуля приложения
//
// Параметры
//  Имя - строка, содержит имя переменной целиком
// 	Значение - значение переменной
//
Процедура глЗначениеПеременнойУстановить(Имя, Значение, ОбновлятьВоВсехКэшах = Ложь) Экспорт
	
	ОбщегоНазначения.УстановитьЗначениеПеременной(Имя, глОбщиеЗначения, Значение, ОбновлятьВоВсехКэшах);
	
КонецПроцедуры

// функция вызова формы редактирования настройки файла обновления конфигурации
Процедура ОткрытьФормуРедактированияНастройкиФайлаОбновления() Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Константы.НастройкаФайлаОбновленияКонфигурации) Тогда
		
		Предупреждение("Нет прав на чтение данных константы ""Настройка файла обновления конфигурации""", 30, "Настройка файла обновления конфигурации");		
		Возврат;
		
	КонецЕсли;

	ФормаРедактирования = ПолучитьОбщуюФорму("НастройкаФайлаОбновленияКонфигурации");
	ФормаРедактирования.СтруктураПараметров = ПроцедурыОбменаДанными.ПолучитьНастройкиДляФайлаОбновленияКонфигурации(); 
	ФормаРедактирования.Открыть();
	
КонецПроцедуры

Процедура ПередЗавершениемРаботыСистемы(Отказ)
	
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ЗапрашиватьПодтверждениеПриЗакрытии") Тогда
		Ответ = Вопрос("Завершить работу с программой?", РежимДиалогаВопрос.ДаНет);
		Отказ = (Ответ = КодВозвратаДиалога.Нет);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		// отдельно получаем настройки для которых нужно выполнить обмен при выходе из программы
		ПроцедурыОбменаДанными.ВыполнитьОбменПриЗавершенииРаботыПрограммы(глЗначениеПеременной("глОбработкаАвтоОбменДанными"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗавершенииРаботыСистемы(Отказ)
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ДействияПередЗавершениемРаботыСистемы(Отказ);
	// Конец СтандартныеПодсистемы
	
	// Показ финальной дополнительной информации
	Форма = Обработки.ДополнительнаяИнформация.Создать();
	Форма.ВыполнитьДействие();
	//

КонецПроцедуры

Процедура РасчетЗарплатыОрганизацийДействие() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

АдресРесурсовОбозревателя = "HRMBe"; // Не допускается изменять значение данной переменной

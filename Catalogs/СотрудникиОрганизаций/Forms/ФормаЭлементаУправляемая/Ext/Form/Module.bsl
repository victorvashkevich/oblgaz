
&НаСервере
Процедура ДобавитьОписаниеОбластиДанных(ИмяОбласти, ИмяСтраницы, СпособЧтения, ПроцедураЗаполнения, ПроцедураЧтения = "", ИмяСобытияОповещения = "", ПроцедураЗаписи = "", ПроцедураОбработкиОповещения = "")
	
	НоваяОбласть = ОбластиДанных.Добавить();
	
	НоваяОбласть.Имя							= ИмяОбласти;
	НоваяОбласть.СпособЧтения					= СпособЧтения;
	НоваяОбласть.ПроцедураЧтения				= ПроцедураЧтения;
	НоваяОбласть.ПроцедураЗаполнения			= ПроцедураЗаполнения;
	НоваяОбласть.ПроцедураЗаписи				= ПроцедураЗаписи;
	НоваяОбласть.ИмяСтраницы					= ИмяСтраницы;
	НоваяОбласть.ИмяСобытияОповещения			= ИмяСобытияОповещения;
	НоваяОбласть.ПроцедураОбработкиОповещения 	= ПроцедураОбработкиОповещения;
	
КонецПроцедуры // ДобавитьОписаниеОбластиДанных

&НаСервере
Процедура ЗаполнитьСведенияОДанныхФормы()
																				
	ДобавитьОписаниеОбластиДанных("КонтактнаяИнформация",					"Основное", 2, "ЗаполнитьКонтактнаяИнформация()", "ПрочитатьКонтактнаяИнформация()", "ИзмененаКонтактнаяИнформация", "ЗаписатьКонтактнаяИнформация(Отказ)", "ОбработкаОповещенияИзмененаКонтактнаяИнформация(ИмяСобытия, Параметр, Источник)");
	ДобавитьОписаниеОбластиДанных("ОкладОрганизации",						"Основное", 1, "ЗаполнитьОкладОрганизации(РезультатыЗапроса)", "ТекстЗапросаОкладОрганизации(ОчереднойНомерЗапроса, НомераРезультатов, ДоступностьПросмотр)", "ОбновитьСписокПлановыхНачислений");
	ДобавитьОписаниеОбластиДанных("ОкладКомпании",							"Основное", 1, "ЗаполнитьОкладКомпании(РезультатыЗапроса)", "ТекстЗапросаОкладКомпании(ОчереднойНомерЗапроса, НомераРезультатов, ДоступностьПросмотр)", "ОбновитьСписокПлановыхНачисленийУдержанийКомпании");
	ДобавитьОписаниеОбластиДанных("ДатаДействияМестоРаботыОрганизация",		"Основное", 1, "ЗаполнитьДатаДействияМестоРаботыОрганизации(РезультатыЗапроса)", "ТекстЗапросаДатаДействияМестоРаботыОрганизации(ОчереднойНомерЗапроса, НомераРезультатов, ДоступностьПросмотр)", "ПеречитатьСотрудников");
	ДобавитьОписаниеОбластиДанных("ДатаДействияМестоРаботыКомпания",		"Основное", 1, "ЗаполнитьДатаДействияМестоРаботыКомпании(РезультатыЗапроса)", "ТекстЗапросаДатаДействияМестоРаботыКомпании(ОчереднойНомерЗапроса, НомераРезультатов, ДоступностьПросмотр)", "ИзмененоМестоРаботыКомпании");
	ДобавитьОписаниеОбластиДанных("МестоРаботы",							"Основное", 0, "ЗаполнитьМестоРаботы()", , "ПеречитатьСотрудников");
	ДобавитьОписаниеОбластиДанных("ВидДоговораВидЗанятости",				"Основное", 0, "ЗаполнитьВидДоговораВидЗанятости()");
	ДобавитьОписаниеОбластиДанных("ДГПХ",									"Основное", 1, "ЗаполнитьДГПХ(РезультатыЗапроса)", "ТекстЗапросаДГПХ(ОчереднойНомерЗапроса, НомераРезультатов, ДоступностьПросмотр)", "ИзмененоДГПХ");
	ДобавитьОписаниеОбластиДанных("ТекущееСостояниеОрганизации",			"Основное", 1, "ЗаполнитьТекущееСостояниеОрганизации(РезультатыЗапроса)", "ТекстЗапросаТекущееСостояниеОрганизации(ОчереднойНомерЗапроса, НомераРезультатов, ДоступностьПросмотр)", ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок("ИзмененоСостояниеРаботниковОрганизации,ПеречитатьСотрудников"));
	ДобавитьОписаниеОбластиДанных("ТекущееСостояниеКомпании",				"Основное", 1, "ЗаполнитьТекущееСостояниеКомпании(РезультатыЗапроса)", "ТекстЗапросаТекущееСостояниеКомпании(ОчереднойНомерЗапроса, НомераРезультатов, ДоступностьПросмотр)", ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок("ИзмененоСостояниеРаботниковКомпании,ИзмененоМестоРаботыКомпании"));
	ДобавитьОписаниеОбластиДанных("Возраст",								"Основное", 0, "ЗаполнитьВозраст()");
	ДобавитьОписаниеОбластиДанных("МестоРождения",							"Основное", 0, "ЗаполнитьМестоРождения()");
	ДобавитьОписаниеОбластиДанных("Актуальность",							"Основное", 0, "ЗаполнитьАктуальность()");
	ДобавитьОписаниеОбластиДанных("Изображение",							"Основное", 0, "ЗаполнитьИзображение()");
	ДобавитьОписаниеОбластиДанных("РамкаМестаРаботыОрганизации",			"Основное", 0, "ЗаполнитьЗаголовокРамкиМестаРаботыОрганизации()", , "ПеречитатьСотрудников");
	ДобавитьОписаниеОбластиДанных("РамкаМестаРаботыКомпании",				"Основное", 0, "ЗаполнитьЗаголовокРамкиМестаРаботыКомпании()", , "ИзмененоМестоРаботыКомпании");
	
КонецПроцедуры // ЗаполнитьСведенияОДанныхФормы

&НаСервере
Процедура ИнициализироватьПостоянныеЗначенияФормы()
	
	// определение доступность данных
	СоответствиеДоступностьПросмотр		= Новый Соответствие;
	СоответствиеДоступностьИзменение	= Новый Соответствие;
	
	СотрудникиОрганизацийСервер.ОпределитьДоступностьДанных(СоответствиеДоступностьПросмотр, СоответствиеДоступностьИзменение, ПривилегированныйРежимЧтения, СотрудникОбъект.Ссылка);
	
	ДоступностьПросмотр		= Новый ФиксированноеСоответствие(СоответствиеДоступностьПросмотр);
	ДоступностьИзменение	= Новый ФиксированноеСоответствие(СоответствиеДоступностьИзменение);
	
	ДатаАктуальности = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
	
	ПоКомпании		= Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоЦентрамОтветственности;
	ПоОрганизации	= Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц;
	
	ЗаполнитьСведенияОДанныхФормы();
	
КонецПроцедуры // ИнициализироватьПостоянныеЗначенияФормы

// Процедура устанавливает значения по умолчанию создаваемому объекту
//
Процедура ИнициализироватьРеквизитыОбъекта()
	
	СотрудникОбъект.Актуальность = Истина;
	
КонецПроцедуры // ИнициализироватьРеквизитыОбъекта

&НаСервере
Процедура ПрочитатьОбщиеДанные()
	
	Если СотрудникОбъект.Физлицо.Пустая() Тогда 
		СотрудникОбъект.Физлицо = Справочники.ФизическиеЛица.ПолучитьСсылку();
		ФизлицоЭлемент = Справочники.ФизическиеЛица.СоздатьЭлемент();
		ФизлицоЭлемент.УстановитьСсылкуНового(СотрудникОбъект.Физлицо);
	Иначе
		ФизлицоЭлемент = СотрудникОбъект.Физлицо.ПолучитьОбъект();
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ФизлицоЭлемент, "ФизлицоОбъект");
	
КонецПроцедуры // ПрочитатьОбщиеДанные

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	// не показываем место работы, если сотрудник не принят
	Элементы.ГруппаМестоРаботыКомпании.Видимость	= ЗначениеЗаполнено(СотрудникОбъект.ДатаПриемаНаРаботуВКомпанию);
	Элементы.ГруппаМестоРаботыОрганизации.Видимость	= ЗначениеЗаполнено(СотрудникОбъект.ДатаПриемаНаРаботу);
	
КонецПроцедуры // УстановитьСвойстваЭлементовФормы

&НаСервере
Функция НаборЗаписейФИО()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(Период) КАК Период
	|ИЗ
	|	РегистрСведений.ФИОФизлиц
	|ГДЕ
	|	ФизЛицо = &Физлицо
	|	И Период <= &Период");
	
	Запрос.УстановитьПараметр("Период", ДатаАктуальности);
	Запрос.УстановитьПараметр("Физлицо", СотрудникОбъект.Физлицо);
	
	ФИОФизлиц = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ФИОФизлиц.Отбор.Физлицо.Установить(СотрудникОбъект.Физлицо);
		ФИОФизлиц.Отбор.Период.Установить(Выборка.Период);
		ФИОФизлиц.Прочитать();
	КонецЕсли;
	
	Возврат ФИОФизлиц;
	
КонецФункции // НаборЗаписейФИО

&НаСервере
Процедура ЗаписатьФИО()
	
	// считываем набор с отбором на крайнюю дату
	НаборФИОФизлиц = НаборЗаписейФИО();
	Если НаборФИОФизлиц.Количество() = 0 Тогда
		СтрокаНабора = НаборФИОФизлиц.Добавить();
		СтрокаНабора.Период		= ?(ЗначениеЗаполнено(ФизлицоОбъект.ДатаРождения), ФизлицоОбъект.ДатаРождения, Дата(1980, 1, 1));
		СтрокаНабора.Физлицо	= СотрудникОбъект.Физлицо;
	Иначе
		СтрокаНабора = НаборФИОФизлиц[0];
	КонецЕсли;
	
	МассивФИО = ОбщегоНазначенияЗК.ПолучитьМассивФИО(ФизлицоОбъект.Наименование);
	
	// меняем поля и записываем набор, только если что-то из ресурсов изменилось
	Если СтрокаНабора.Фамилия <> МассивФИО[0] ИЛИ СтрокаНабора.Имя <> МассивФИО[1] ИЛИ СтрокаНабора.Отчество <> МассивФИО[2] Тогда
	 
	 	СтрокаНабора.Фамилия  = МассивФИО[0];
		СтрокаНабора.Имя      = МассивФИО[1];
		СтрокаНабора.Отчество = МассивФИО[2];
	
		НаборФИОФизлиц.Отбор.Период.Установить(СтрокаНабора.Период);
		НаборФИОФизлиц.Отбор.Физлицо.Установить(СтрокаНабора.Физлицо);
		НаборФИОФизлиц.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ОБЛАСТЯМИ ДАННЫХ ФОРМЫ

&НаСервере
Процедура ПрочитатьДанныеФормы(ОбластиДанных, РезультатыЗапросаПоИменам, Перечитывать = Ложь)
	
	ЧастиЗапроса = Новый Массив;
	Для Каждого ОбластьДанных Из ОбластиДанных Цикл
		Если НЕ ОбластьДанных.Прочитана Или (Перечитывать И ОбластьДанных.СпособЧтения = 1)Тогда
			Если ОбластьДанных.СпособЧтения = 1 Тогда
				ЧастиЗапроса.Добавить(ОбластьДанных.ПроцедураЧтения);
			КонецЕсли;
			Если ОбластьДанных.СпособЧтения = 2 Тогда
				Выполнить(ОбластьДанных.ПроцедураЧтения);
			КонецЕсли;
			ОбластьДанных.Прочитана = Истина;
			ОбластьДанных.Заполнена = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// формируем запрос
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Физлицо",							СотрудникОбъект.Физлицо);
	ПараметрыЗапроса.Вставить("Ссылка",								СотрудникОбъект.Ссылка);
	ПараметрыЗапроса.Вставить("Организация", 						СотрудникОбъект.Организация);
	ПараметрыЗапроса.Вставить("ТекущееОбособленноеПодразделение",	СотрудникОбъект.ТекущееОбособленноеПодразделение);
	ПараметрыЗапроса.Вставить("ТекущаяДолжностьОрганизации",		СотрудникОбъект.ТекущаяДолжностьОрганизации);
	ПараметрыЗапроса.Вставить("ТекущееПодразделениеОрганизации",	СотрудникОбъект.ТекущееПодразделениеОрганизации);
	ПараметрыЗапроса.Вставить("ТекущаяДолжностьКомпании",			СотрудникОбъект.ТекущаяДолжностьКомпании);
	ПараметрыЗапроса.Вставить("ТекущееПодразделениеКомпании",		СотрудникОбъект.ТекущееПодразделениеКомпании);
	ПараметрыЗапроса.Вставить("Период", 							ДатаАктуальности);
	ПараметрыЗапроса.Вставить("ПериодРегистрации", 					ДобавитьМесяц(НачалоМесяца(ДатаАктуальности), -1));
	
	НомераРезультатов = Новый Соответствие;
	РезультатыЗапроса = СотрудникиОрганизацийСервер.СформироватьВыполнитьЗапрос(ЧастиЗапроса, ПривилегированныйРежимЧтения, НомераРезультатов, ДоступностьПросмотр, ПараметрыЗапроса);
	
	РезультатыЗапросаПоИменам = ЗаполнитьРезультатыЗапросаПоИменам(РезультатыЗапроса, НомераРезультатов);
	
КонецПроцедуры // ПрочитатьДанныеФормы

&НаСервере
Процедура ПрочитатьОсновное() Экспорт
	
	ПрочитатьКонтактнаяИнформация();

КонецПроцедуры // ПрочитатьОсновное

&НаСервере
Функция ЗаполнитьРезультатыЗапросаПоИменам(РезультатыЗапроса, НомераРезультатов)
	
	РезультатыЗапросаПоИменам = Новый Соответствие;
	Для Каждого КлючИЗначение Из НомераРезультатов Цикл
		РезультатыЗапросаПоИменам.Вставить(КлючИЗначение.Ключ, РезультатыЗапроса[КлючИЗначение.Значение]);
	КонецЦикла;
	
	Возврат РезультатыЗапросаПоИменам;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеФормы(ОбластиДанных, РезультатыЗапроса, Перезаполнять = Ложь)
	
	Для Каждого ОбластьДанных Из ОбластиДанных Цикл
		Если Не ОбластьДанных.Заполнена или Перезаполнять Тогда
			Выполнить(ОбластьДанных.ПроцедураЗаполнения);
			ОбластьДанных.Заполнена = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДанныеФормы

&НаСервере
Процедура ЗаполнитьТекущуюСтраницу()
	
	РезультатыЗапроса = Неопределено;
	
	ПрочитатьДанныеФормы(ОбластиДанных, РезультатыЗапроса);
	
	ЗаполнитьДанныеФормы(ОбластиДанных, РезультатыЗапроса);
	
КонецПроцедуры // ЗаполнитьТекущуюСтраницу

////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ФОРМЫ

&НаСервере
Процедура ЗаполнитьОсновное(РезультатыЗапроса) Экспорт
	
	ЗаполнитьАктуальность();
	ЗаполнитьВидДоговораВидЗанятости();
	ЗаполнитьВозраст();
	ЗаполнитьДатаДействияМестоРаботыКомпании(РезультатыЗапроса);
	ЗаполнитьДатаДействияМестоРаботыОрганизации(РезультатыЗапроса);
	ЗаполнитьДГПХ(РезультатыЗапроса);
	ЗаполнитьЗаголовокРамкиМестаРаботыКомпании();
	ЗаполнитьЗаголовокРамкиМестаРаботыОрганизации();
	ЗаполнитьИзображение();
	ЗаполнитьКонтактнаяИнформация();
	ЗаполнитьМестоРаботы();
	ЗаполнитьМестоРождения();
	ЗаполнитьОкладКомпании(РезультатыЗапроса);
	ЗаполнитьОкладОрганизации(РезультатыЗапроса);
	ЗаполнитьТекущееСостояниеКомпании(РезультатыЗапроса);
	ЗаполнитьТекущееСостояниеОрганизации(РезультатыЗапроса);

КонецПроцедуры // ЗаполнитьОсновное

&НаСервере
Процедура ЗаполнитьВозраст()
	
	ВозрастПредставление = ФизическиеЛицаКлиентСервер.ПредставлениеВозраста(ФизлицоОбъект.ДатаРождения, ДатаАктуальности);
	
КонецПроцедуры // ЗаполнитьВозраст

&НаСервере
Процедура ЗаполнитьМестоРождения()
	
	МестоРожденияПредставление = ФизическиеЛицаКлиентСервер.ПредставлениеМестаРождения(ФизлицоОбъект.МестоРождения);
	
	Если НЕ ЗначениеЗаполнено(МестоРожденияПредставление) тогда
		МестоРожденияПредставление = "Не указано";
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьМестоРождения

&НаСервере
Процедура ЗаполнитьАктуальность()
	
	СотрудникВАрхиве = Не СотрудникОбъект.Актуальность;
	
КонецПроцедуры // ЗаполнитьАктуальность

&НаСервере
Процедура ЗаполнитьКонтактнаяИнформация()
	
	ОсновныеКонтакты = УправлениеКонтактнойИнформацией.НайтиЗаписиКонтактнойИнформации(КонтактнаяИнформация, Новый Структура("ЗначениеПоУмолчанию", Истина));
	
	Для Каждого СтрокаНабора Из ОсновныеКонтакты Цикл
		Если СтрокаНабора.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			Адрес = СтрокаНабора.Представление;
		КонецЕсли;
		Если СтрокаНабора.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			АдресЭлектроннойПочты = СтрокаНабора.Представление;
		КонецЕсли;
	КонецЦикла;
	
	ТелефоныСтрокиНабора = УправлениеКонтактнойИнформацией.НайтиЗаписиКонтактнойИнформации(КонтактнаяИнформация, Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон));
	
	Телефоны = "";
	Для Каждого СтрокаТелефоны Из ТелефоныСтрокиНабора Цикл
		Если ЗначениеЗаполнено(СтрокаТелефоны.Представление) Тогда
			Телефоны = Телефоны + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2), ", СтрокаТелефоны.Представление, СтрокаТелефоны.Вид);
		КонецЕсли;
	КонецЦикла;
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Телефоны, 2);
	
	Если ПустаяСтрока(Адрес) Тогда
		Адрес = "Не указан";
	КонецЕсли;
	Если ПустаяСтрока(АдресЭлектроннойПочты) Тогда
		АдресЭлектроннойПочты = "Не указан";
	КонецЕсли;
	Если ПустаяСтрока(Телефоны) Тогда
		Телефоны = "Не указаны";
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКонтактнаяИнформация

&НаСервере
Процедура ЗаполнитьМестоРаботы()
	
	Если ЗначениеЗаполнено(СотрудникОбъект.ТекущееПодразделениеОрганизации) Тогда
		ПодразделениеОрганизацииНадпись = "Подразделение:";
		ТекущееПодразделениеОрганизацииПредставление = СотрудникОбъект.ТекущееПодразделениеОрганизации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СотрудникОбъект.ТекущаяДолжностьОрганизации) Тогда
		ДолжностьОрганизацииНадпись = "Должность:";
		ТекущаяДолжностьОрганизацииПредставление = СотрудникиОрганизацийСервер.ПредставлениеДолжности(СотрудникОбъект.ТекущаяДолжностьОрганизации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СотрудникОбъект.ТекущееПодразделениеКомпании) Тогда
		ТекущееПодразделениеКомпанииПредставление = СотрудникОбъект.ТекущееПодразделениеКомпании;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СотрудникОбъект.ТекущаяДолжностьКомпании) Тогда
		ТекущаяДолжностьКомпанииПредставление = СотрудникиОрганизацийСервер.ПредставлениеДолжности(СотрудникОбъект.ТекущаяДолжностьКомпании);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьМестоРаботы

&НаСервере
Процедура ЗаполнитьДГПХ(РезультатыЗапроса)
	
	РезультатЗапроса = РезультатыЗапроса["ДГПХ"];

	Если РезультатЗапроса <> Неопределено И НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ПодразделениеОрганизацииНадпись = "Подразделение:";
		ТекущееПодразделениеОрганизацииПредставление = ?(ЗначениеЗаполнено(Выборка.ПодразделениеОрганизации), Выборка.ПодразделениеОрганизации, "не указано");
		
		Если ЗначениеЗаполнено(Выборка.ВидАвторскогоДоговора) Тогда
			ДолжностьОрганизацииНадпись = "Вид договора:";
			ТекущаяДолжностьОрганизацииПредставление = Выборка.ВидАвторскогоДоговора;
		КонецЕсли;
		
		ОкладОрганизацииНадпись = "Сумма, " + ОбщегоНазначенияЗК.ПолучитьЗначениеПеременной("глВалютаРегламентированногоУчета") + ":";
		ОкладОрганизации = Формат(Выборка.СуммаЗаРаботу, "ЧДЦ=2; ЧРГ=' '") + " (" + Выборка.ХарактерОплаты +  ")";
		ДоговорГПХ = Выборка.ДоговорГПХ;
		ДатаДействияМестоРаботыОрганизации = "дог. № " + Выборка.НомерДоговора + " от " + Формат(Выборка.ДатаДоговора, "ДФ=dd.MM.yy");
		КомандаИзменитьМестоРаботыОрганизацииПредставление = "Изменить";
		
		СостояниеОрганизации = "Полный список договоров";
		
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьДГПХ

&НаСервере
Процедура ЗаполнитьВидДоговораВидЗанятости()
	
	Если СотрудникОбъект.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		ВидДоговораВидЗанятости = Строка(СотрудникОбъект.ВидЗанятости);
	ИначеЕсли СотрудникОбъект.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
		ВидДоговораВидЗанятости = "";
	Иначе
		ВидДоговораВидЗанятости = Строка(СотрудникОбъект.ВидДоговора);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВидДоговораВидЗанятости

&НаСервере
Процедура ЗаполнитьОклад(ИмяПоля, РезультатыЗапроса)
	
	ЗаголовокПоля	= "";
	ЗначениеПоля	= "";
	РезультатЗапроса = РезультатыЗапроса[ИмяПоля];
	Если РезультатЗапроса <> Неопределено И НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаголовокПоля	= "Оклад"; 
		ЗначениеПоля	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2", 
							Формат(Выборка.Оклад, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1; ЧРГ=' '", Выборка.Точность)),
							Выборка.Валюта);
	КонецЕсли;
	
	Элементы[ИмяПоля].Заголовок = ЗаголовокПоля;
	ЭтаФорма[ИмяПоля] = ЗначениеПоля;
	
КонецПроцедуры // ЗаполнитьОклад

&НаСервере
Процедура ЗаполнитьОкладОрганизации(РезультатыЗапроса)
	
	ЗаполнитьОклад("ОкладОрганизации", РезультатыЗапроса);
	        	
КонецПроцедуры // ЗаполнитьОкладОрганизации

&НаСервере
Процедура ЗаполнитьОкладКомпании(РезультатыЗапроса)
	
	ЗаполнитьОклад("ОкладКомпании", РезультатыЗапроса);
	
КонецПроцедуры // ЗаполнитьОкладКомпании

&НаСервере
Процедура ЗаполнитьДатуДействияМестаРаботы(ИмяПоля, РезультатыЗапроса)
	
	РезультатЗапроса = РезультатыЗапроса[ИмяПоля];
	Если РезультатЗапроса <> Неопределено И НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЭтаФорма[ИмяПоля] = Выборка.Период;
	Иначе
		ЭтаФорма[ИмяПоля] = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДатуДействияМестаРаботы

&НаСервере
Процедура ЗаполнитьДатаДействияМестоРаботыОрганизации(РезультатыЗапроса)
	
	ЗаполнитьДатуДействияМестаРаботы("ДатаДействияМестоРаботыОрганизации", РезультатыЗапроса);
	
КонецПроцедуры // ЗаполнитьДатаДействияМестоРаботыОрганизации

&НаСервере
Процедура ЗаполнитьДатаДействияМестоРаботыКомпании(РезультатыЗапроса)
	
	ЗаполнитьДатуДействияМестаРаботы("ДатаДействияМестоРаботыКомпании", РезультатыЗапроса);
	
КонецПроцедуры // ЗаполнитьДатаДействияМестоРаботыКомпании

&НаСервере
Процедура ЗаполнитьТекущееСостояние(ИмяПоля, РезультатыЗапроса)
	
	РезультатЗапроса = РезультатыЗапроса[ИмяПоля];
	
	Если РезультатЗапроса <> Неопределено И НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЭтаФорма[ИмяПоля] = Строка(Выборка.Состояние) + " с " + Формат(Выборка.Период, "ДФ=dd.MM.yy") + ?(ЗначениеЗаполнено(Выборка.ПериодЗавершения), " по " + Формат(Выборка.ПериодЗавершения, "ДФ=dd.MM.yy"), "");
	Иначе	
		ЭтаФорма[ИмяПоля] = "";
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТекущееСостояние

&НаСервере
Процедура ЗаполнитьТекущееСостояниеОрганизации(РезультатыЗапроса)
	
	ЗаполнитьТекущееСостояние("ТекущееСостояниеОрганизации", РезультатыЗапроса);
	
КонецПроцедуры // ЗаполнитьТекущееСостояниеОрганизации

&НаСервере
Процедура ЗаполнитьТекущееСостояниеКомпании(РезультатыЗапроса)
	
	ЗаполнитьТекущееСостояние("ТекущееСостояниеКомпании", РезультатыЗапроса);
	
КонецПроцедуры // ЗаполнитьТекущееСостояниеОрганизации

&НаСервере
Процедура ЗаполнитьЗаголовокРамкиМестаРаботыОрганизации()
	
	Если ЗначениеЗаполнено(СотрудникОбъект.Организация) Тогда
		ТекстЗаголовкаОрганизации = "В " + СотрудникОбъект.Организация + ?(ЗначениеЗаполнено(СотрудникОбъект.ДатаПриемаНаРаботу), " с " + Формат(СотрудникОбъект.ДатаПриемаНаРаботу, "ДФ=dd.MM.yy") + ?(ЗначениеЗаполнено(СотрудникОбъект.ДатаУвольнения), " по " + Формат(СотрудникОбъект.ДатаУвольнения, "ДФ=dd.MM.yy") + " (уволен)", ""), " не принят на работу");
	Иначе
		ТекстЗаголовкаОрганизации = "Не принят в организацию";
	КонецЕсли;
	
	Элементы.ГруппаМестоРаботыОрганизации.Заголовок = ТекстЗаголовкаОрганизации;
	
КонецПроцедуры // ЗаполнитьЗаголовокРамкиМестаРаботыОрганизации

&НаСервере
Процедура ЗаполнитьЗаголовокРамкиМестаРаботыКомпании()
	
	Элементы.ГруппаМестоРаботыКомпании.Заголовок = "В компании" + ?(ЗначениеЗаполнено(СотрудникОбъект.ДатаПриемаНаРаботуВКомпанию), " с " + Формат(СотрудникОбъект.ДатаПриемаНаРаботуВКомпанию, "ДФ=dd.MM.yy") + ?(ЗначениеЗаполнено(СотрудникОбъект.ДатаУвольненияИзКомпании), " по " + Формат(СотрудникОбъект.ДатаУвольненияИзКомпании, "ДФ=dd.MM.yy") + " (уволен)", ""), " не принят на работу");
	
КонецПроцедуры // ЗаполнитьЗаголовокРамкиМестаРаботыКомпании

&НаСервере
Процедура ЗаполнитьИзображение()
	
	Если НЕ ФизлицоОбъект.ОсновноеИзображение.Пустая() Тогда
		Изображение = ПолучитьНавигационнуюСсылку(ФизлицоОбъект.ОсновноеИзображение, "Хранилище");
	КонецЕсли;
	
	// если пустое изображение - рисуем рамку
	Элементы.Изображение.Рамка = Новый Рамка(ТипРамкиЭлементаУправления[?(Изображение = Неопределено, "Одинарная","БезРамки")]); 
	
КонецПроцедуры // ЗаполнитьИзображение

&НаСервере
Процедура ПрочитатьКонтактнаяИнформация()
	
	НаборКонтактнаяИнформация = РеквизитФормыВЗначение("КонтактнаяИнформация");
	УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнаяИнформация, СотрудникОбъект.Физлицо);
	ЗначениеВРеквизитФормы(НаборКонтактнаяИнформация, "КонтактнаяИнформация");
	
КонецПроцедуры // ПрочитатьКонтактнаяИнформация

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьПостоянныеЗначенияФормы();
	
	Если СотрудникОбъект.Ссылка.Пустая() Тогда
		ИнициализироватьРеквизитыОбъекта();
	КонецЕсли;
	
	УстановитьСвойстваЭлементовФормы();
	
	ПрочитатьОбщиеДанные();
	
	ЗаполнитьТекущуюСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ФизическоеЛицоОбъект = РеквизитФормыВЗначение("ФизлицоОбъект");
	Если ФизическоеЛицоОбъект.Ссылка.Пустая() Тогда
		ФизическоеЛицоОбъект.УстановитьСсылкуНового(СотрудникОбъект.Физлицо);
	Иначе
		Попытка
			ФизическоеЛицоОбъект.Заблокировать();
		Исключение
			ОбщегоНазначенияЗК.СообщитьОбОшибке("Сотрудник не записан. Возможно, личные данные сотрудника редактируются другим пользователем.", Отказ);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	ФизическоеЛицоОбъект.Записать();
	
	ЗаписатьФИО();
	
	СотрудникиОрганизацийСервер.ИзменитьНаименованияДругихСотрудниковКандидатов(ФизлицоОбъект.Ссылка, ФизлицоОбъект.Наименование, СотрудникОбъект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПрочитатьОбщиеДанные();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ИсторияИзмененийМестаРаботыКомпании(Команда)
	
	ПараметрыИстории = Новый Структура;
	ПараметрыИстории.Вставить("Сотрудник", СотрудникОбъект.Ссылка);
	ПараметрыИстории.Вставить("Физлицо", СотрудникОбъект.Физлицо);
	ПараметрыИстории.Вставить("ДатаАктуальности", ДатаАктуальности);
	ПараметрыИстории.Вставить("ВидОрганизационнойСтруктуры", ПоКомпании);
	ПараметрыИстории.Вставить("Заголовок", ФизлицоОбъект.Наименование + ": история изменения места работы в компании");
	
	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаИсторииИзмененияМестаРаботы", ПараметрыИстории, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИзмененийМестаРаботыОрганизации(Команда)
	
	ПараметрыИстории = Новый Структура;
	ПараметрыИстории.Вставить("Сотрудник", СотрудникОбъект.Ссылка);
	ПараметрыИстории.Вставить("Физлицо", СотрудникОбъект.Физлицо);
	ПараметрыИстории.Вставить("Организация", СотрудникОбъект.Организация);
	ПараметрыИстории.Вставить("ДатаАктуальности", ДатаАктуальности);
	ПараметрыИстории.Вставить("ВидОрганизационнойСтруктуры", ПоОрганизации);
	ПараметрыИстории.Вставить("Заголовок", ФизлицоОбъект.Наименование + ": история изменения места работы в " + СотрудникОбъект.Организация);
	
	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаИсторииИзмененияМестаРаботы", ПараметрыИстории, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура СотрудникВАрхивеПриИзменении(Элемент)
	
	СотрудникОбъект.Актуальность = Не СотрудникВАрхиве;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРожденияПриИзменении(Элемент)
	
	ЗаполнитьВозраст();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если СотрудникОбъект.Наименование <> СокрЛП(СокрЛП(ФизлицоОбъект.Наименование) + " " + СокрЛП(СотрудникОбъект.ПостфиксНаименования)) Тогда
		СотрудникОбъект.Наименование = СокрЛП(СокрЛП(ФизлицоОбъект.Наименование) + " " + СокрЛП(СотрудникОбъект.ПостфиксНаименования));
	КонецЕсли;
	
КонецПроцедуры

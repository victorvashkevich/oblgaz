Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;

#Если Клиент ИЛИ ВнешнееСоединение Тогда

Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	Возврат ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета);
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ВидыРасчетаПоИЛ = Новый СписокЗначений;
	ВидыРасчетаПоИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентом);
	ВидыРасчетаПоИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомБезБЛ);
	ВидыРасчетаПоИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПредела);
	ВидыРасчетаПоИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПределаБезБЛ);
	ВидыРасчетаПоИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммой);
	ВидыРасчетаПоИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммойДоПредела);
	ВидыРасчетаПоИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ПочтовыйСборПоИЛ);
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВидыРасчетаПоИЛ"));
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат;
	Иначе
		ЗначениеПараметра.Значение      = ВидыРасчетаПоИЛ;
		ЗначениеПараметра.Использование = истина;
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЕстьГруппировкаПоПериодуРегистрации"));
	ЗначениеПараметра.Значение = ПрисутствуетПолеПериодРегистрацииВГруппировке();
	ЗначениеПараметра.Использование = Истина;
	
КонецПроцедуры

// Возвращает значение истина, если в элементах структур отчета присутствует поле Период регистрации
//
Функция ПрисутствуетПолеПериодРегистрацииВГруппировке()
	
	ЕстьГруппировка = ложь;
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() <> 0 тогда
		
		Если Тип(КомпоновщикНастроек.Настройки.Структура[0]) = Тип("ТаблицаКомпоновкиДанных") тогда
			
			ЕстьГруппировка = НайтиПериодРегистрации(КомпоновщикНастроек.Настройки.Структура[0].Строки[0]);
			
		ИначеЕсли Тип(КомпоновщикНастроек.Настройки.Структура[0]) = Тип("ГруппировкаКомпоновкиДанных") тогда
			
			ЕстьГруппировка = НайтиПериодРегистрации(КомпоновщикНастроек.Настройки.Структура[0]);
			
		ИначеЕсли Тип(КомпоновщикНастроек.Настройки.Структура[0]) = Тип("ДиаграммаКомпоновкиДанных") тогда
			
			Если КомпоновщикНастроек.Настройки.Структура[0].Точки.Количество() <> 0 тогда
				
				ЕстьГруппировка = НайтиПериодРегистрации(КомпоновщикНастроек.Настройки.Структура[0].Точки[0]) ИЛИ НайтиПериодРегистрации(КомпоновщикНастроек.Настройки.Структура[0].Серии[0]);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// найти поле группировки в отборе
	Для каждого ОтборПоле из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных("ПериодРегистрации");
		
		Если ОтборПоле.Использование и (ОтборПоле.ЛевоеЗначение = ПолеПериодРегистрации или ОтборПоле.ПравоеЗначение = ПолеПериодРегистрации) тогда
			
			ЕстьГруппировка = истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьГруппировка;
	
КонецФункции //ПрисутствуетПолеПериодРегистрацииВГруппировке()

// Функция возвращает значение истина, если в группировках элементов структуры присутствует поле "Период регистрации"
//
Функция НайтиПериодРегистрации(Структура)
	
	ЕстьПоле = ложь;
	
	Если ТипЗнч(Структура) <> Тип("ГруппировкаКомпоновкиДанных") тогда
		
		Возврат ЕстьПоле;
		
	КонецЕсли;
	
	ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных("ПериодРегистрации");
	
	Для каждого ПолеГруппировки из Структура.ПоляГруппировки.Элементы Цикл
		
		Если ПолеГруппировки.Использование И ПолеГруппировки.Поле = ПолеПериодРегистрации тогда
			
			ЕстьПоле = истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьПоле И Структура.Структура.Количество() <> 0 тогда
		
		ЕстьПоле = НайтиПериодРегистрации(Структура.Структура[0]);
		
	КонецЕсли;
	
	Возврат ЕстьПоле;
	
КонецФункции //НайтиПериодРегистрации()

#КонецЕсли

#Если Клиент Тогда
	
// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	ТиповыеОтчеты.ИнициализацияТиповогоОтчета(ЭтотОбъект);
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	
	Если ЗначениеПараметра <> Неопределено и ЗначениеПараметра.Значение = '00010101' тогда
		
		ЗначениеПараметра.Значение = НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
		
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	Если ЗначениеПараметра <> Неопределено и ЗначениеПараметра.Значение = '00010101' тогда
		
		ЗначениеПараметра.Значение = КонецМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
		
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если ЗначениеПараметра <> Неопределено и ЗначениеПараметра.Значение = '00010101' тогда
		
		ЗначениеПараметра.Значение = КонецМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
		
	КонецЕсли;

КонецПроцедуры


Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
СхемаКомпоновкиДанных = Схема;
ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема);
КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;



#КонецЕсли
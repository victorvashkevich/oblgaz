Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем НастройкаШириныКолонокРасчетногоЛистка     Экспорт;
Перем НастройкаРазмТекстаКолонокРасчетногоЛистка Экспорт;

#Если Клиент ИЛИ ВнешнееСоединение Тогда

Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	
	СервисныеПроцедурыИФункции.ПроверитьЗначениеОтбора(КомпоновщикНастроек.Настройки.Отбор.Элементы,"Организация",УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"));
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	ТекущийПериод=ЗначениеПараметра.Значение;
	
	ИнициализироватьПараметры(ТекущийПериод);
	
	Результат.Очистить();
	Результат.АвтоМасштаб = Истина;
	
	Настройки = КомпоновщикНастроек.Настройки;
	// получим макет компоновки данных
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);	
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ,ДанныеРасшифровки,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.НачатьВывод();
	
	Счетчик = 0;
	
	Пока Истина Цикл
		
		
		// Получим следующий элемент результата компоновки
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
		
		// Получим следующий элемент результата компоновки
		Если ЭлементРезультата = Неопределено Тогда
			
			// Следующий элемент не получен - заканчиваем цикл вывода
			Прервать;
			
		Иначе
			
			// Элемент получен - выведем его при помощи процессора вывода
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
		
	КонецЦикла;
	
	ПроцессорВывода.ЗакончитьВывод();
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("РазбитьПоСтраницам"));
	РазбитьПоСтраницам=ЗначениеПараметра.Значение;
	ИспРазбитьПоСтраницам=ЗначениеПараметра.Использование;
	
	Если ИспРазбитьПоСтраницам и РазбитьПоСтраницам ТОгда
		РазбитьТабличныйДокументПоСтраницам(Результат);
	КонецЕсли;
	
	
	//Возврат ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета);
	
КонецФункции

Процедура РазбитьТабличныйДокументПоСтраницам(ТабличныйДокумент)
	
	Состояние(НСТР("ru='Разделение расчетных листков по страницам ...  (Если вы хотите прервать вывод отчета, нажмите Ctrl+Break)'"));
	
	ТабличныйДокументДляПроверки = Новый ТабличныйДокумент;
	ТабличныйДокументДляПроверки.Очистить();
	
	
	Для сч = 0 по НастройкаШириныКолонокРасчетногоЛистка.ВГраница() Цикл
		ОбластьКолонкиРЛ                  = ТабличныйДокумент.Область(, сч+1, , сч+1);
		ОбластьКолонкиРЛ.ШиринаКолонки    = НастройкаШириныКолонокРасчетногоЛистка[сч];
		//ОбластьКолонкиРЛ.РазмещениеТекста = ПолучитьТипРазмещенияТекста(НастройкаРазмТекстаКолонокРасчетногоЛистка[сч]);
	КонецЦикла;
	
  			
	Для сч = 0 по НастройкаШириныКолонокРасчетногоЛистка.ВГраница() Цикл
		ОбластьКолонкиРЛ                  = ТабличныйДокументДляПроверки.Область(, сч+1, , сч+1);
		ОбластьКолонкиРЛ.ШиринаКолонки    = НастройкаШириныКолонокРасчетногоЛистка[сч];
		//ОбластьКолонкиРЛ.РазмещениеТекста = ПолучитьТипРазмещенияТекста(НастройкаРазмТекстаКолонокРасчетногоЛистка[сч]);
	КонецЦикла;

	ТабличныйДокументДляПроверки.АвтоМасштаб = Истина;

	
	ОбластьПервойЯчейки = ТабличныйДокумент.НайтиТекст("Расчетный листок");
		
	НомерСтрокиНачалаРЛ = ОбластьПервойЯчейки.Верх;
	
	Пока ОбластьПервойЯчейки <> Неопределено Цикл
				
		НомерСтрокиНачалаРЛ    = ОбластьПервойЯчейки.Верх;
		
		ОбластьСлед = ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ+1, , НомерСтрокиНачалаРЛ+1, );
		ОбластьПоследнейЯчейки = ТабличныйДокумент.НайтиТекст("Сумма  ", ОбластьСлед);
		НомерСтрокиКонцаРЛ     = ОбластьПоследнейЯчейки.Верх;
		
		ОбластьРЛ = ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ, , НомерСтрокиКонцаРЛ, );
		ОбластьПриемник = ТабличныйДокументДляПроверки.Область(ТабличныйДокументДляПроверки.ВысотаТаблицы + 1, ,ТабличныйДокументДляПроверки.ВысотаТаблицы + (НомерСтрокиКонцаРЛ - НомерСтрокиНачалаРЛ) + 1, );
		ТабличныйДокументДляПроверки.ВставитьОбласть(ОбластьРЛ, ОбластьПриемник, , истина);
	
 		Если ТабличныйДокументДляПроверки.КоличествоСтраниц() > 1 тогда
			
			ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ, , НомерСтрокиНачалаРЛ,).НачалоСтраницы = истина;
			
			ТабличныйДокументДляПроверки.Очистить();
			
			Для сч = 0 по НастройкаШириныКолонокРасчетногоЛистка.ВГраница() Цикл
				ОбластьКолонкиРЛ                  = ТабличныйДокументДляПроверки.Область(, сч+1, , сч+1);
				ОбластьКолонкиРЛ.ШиринаКолонки    = НастройкаШириныКолонокРасчетногоЛистка[сч];
				//ОбластьКолонкиРЛ.РазмещениеТекста = ПолучитьТипРазмещенияТекста(НастройкаРазмТекстаКолонокРасчетногоЛистка[сч]);
			КонецЦикла;
			
			ОбластьПриемник = ТабличныйДокументДляПроверки.Область(ТабличныйДокументДляПроверки.ВысотаТаблицы + 1, ,ТабличныйДокументДляПроверки.ВысотаТаблицы + (НомерСтрокиКонцаРЛ - НомерСтрокиНачалаРЛ) + 1, );
			ТабличныйДокументДляПроверки.ВставитьОбласть(ОбластьРЛ, ОбластьПриемник, , истина);
			
		КонецЕсли;
		ОбластьСлед = ТабличныйДокумент.Область(НомерСтрокиКонцаРЛ, , НомерСтрокиКонцаРЛ, );
		ОбластьПервойЯчейки    = ТабличныйДокумент.НайтиТекст("Расчетный листок", ОбластьСлед); 
		
		ОбработкаПрерыванияПользователя();
		
	КонецЦикла;   
	
КонецПроцедуры

Функция ПолучитьТипРазмещенияТекста(ТипРазмещения)
	
	Если ТипРазмещения = ТипРазмещенияТекстаКомпоновкиДанных.Выступать тогда
		Возврат ТипРазмещенияТекстаТабличногоДокумента.Авто;
	ИначеЕсли ТипРазмещения = ТипРазмещенияТекстаКомпоновкиДанных.Забивать тогда
		Возврат ТипРазмещенияТекстаТабличногоДокумента.Забивать;
	ИначеЕсли ТипРазмещения = ТипРазмещенияТекстаКомпоновкиДанных.Обрезать тогда
		Возврат ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
	ИначеЕсли ТипРазмещения = ТипРазмещенияТекстаКомпоновкиДанных.Переносить тогда
		Возврат ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	КонецЕсли;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
    //Копируем настройки выбранных полей
	Группа = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	
	//Для каждого ВыбранноеПоле из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
	//	Если ВыбранноеПоле <> Группа тогда
	//		НовоеПолеВыбора = Группа.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	//		ЗаполнитьЗначенияСвойств(НовоеПолеВыбора, ВыбранноеПоле);
	//	КонецЕсли;
	//КонецЦикла;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеПараметра.Значение = '00010101' Тогда
		ЗначениеПараметра.Значение = КонецДня(ТекущаяДата());
		ЗначениеПараметра.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

#Если Клиент Тогда
	
// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

Процедура ИнициализироватьПараметры(ВыбДата) Экспорт
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	
	Если ЗначениеПараметра <> Неопределено тогда
		
		ЗначениеПараметра.Значение = НачалоМесяца(ВыбДата);
		
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	Если ЗначениеПараметра <> Неопределено тогда
		
		ЗначениеПараметра.Значение = КонецМесяца(ВыбДата);
		
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если ЗначениеПараметра <>  Неопределено тогда
		
		ЗначениеПараметра.Значение = НачалоМесяца(ВыбДата);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	ТиповыеОтчеты.ИнициализацияТиповогоОтчета(ЭтотОбъект);
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	
	Если ЗначениеПараметра <> Неопределено и ЗначениеПараметра.Значение = '00010101' тогда
		
		ЗначениеПараметра.Значение = НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
		
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	Если ЗначениеПараметра <> Неопределено и ЗначениеПараметра.Значение = '00010101' тогда
		
		ЗначениеПараметра.Значение = КонецМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
		
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если ЗначениеПараметра <> Неопределено и ЗначениеПараметра.Значение = '00010101' тогда
		
		ЗначениеПараметра.Значение = НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
		
	КонецЕсли;
	
	СервисныеПроцедурыИФункции.УстановитьЗначениеОтбора(КомпоновщикНастроек.Настройки.Отбор.Элементы,"Организация",УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"));
	
КонецПроцедуры

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;
НастройкаШириныКолонокРасчетногоЛистка     = Новый Массив();
НастройкаРазмТекстаКолонокРасчетногоЛистка = Новый Массив();
#Если Клиент тогда
Для каждого МакетГруппировки из СхемаКомпоновкиДанных.МакетыГруппировок Цикл
	Если МакетГруппировки.ИмяГруппировки = "Шапка" тогда
		ИмяМакетаШапкаРасчетногоЛистка = МакетГруппировки.Макет;
	КонецЕсли;
КонецЦикла;
МакетШапкаРасчетногоЛистка = СхемаКомпоновкиДанных.Макеты.Найти(ИмяМакетаШапкаРасчетногоЛистка);

// запомнить настройки макета
ЯчейкиМакета = МакетШапкаРасчетногоЛистка.Макет[0].Ячейки;

Для каждого Ячейка из ЯчейкиМакета Цикл
	НастройкаШириныКолонокРасчетногоЛистка.Вставить(ЯчейкиМакета.Индекс(Ячейка), Ячейка.Оформление.Элементы.Найти("MaximumWidth").Значение);
	НастройкаРазмТекстаКолонокРасчетногоЛистка.Вставить(ЯчейкиМакета.Индекс(Ячейка), Ячейка.Оформление.Элементы.Найти("Placement").Значение);
КонецЦикла;

НастройкаРазмТекстаКолонокРасчетногоЛистка[1] = ТипРазмещенияТекстаКомпоновкиДанных.Выступать;

МакетШапкаРасчетногоЛистка = Неопределено;
ЯчейкиМакета               = Неопределено;

#КонецЕсли

#КонецЕсли
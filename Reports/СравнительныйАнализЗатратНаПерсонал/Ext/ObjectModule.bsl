Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем ЭлементОтбора Экспорт;

#Если Клиент ИЛИ ВнешнееСоединение Тогда
	

Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
		
	ЭталоныйСценарий = "";
	НачалоПериода    = '00010101';
	КонецПериода     = '00010101';
	
	Если Сценарии.Количество() > 0 тогда
		ЭталоныйСценарий = Сценарии[0].Сценарий;
		НачалоПериода    = Сценарии[0].НачалоПериода;
		КонецПериода     = Сценарии[0].КонецПериода;
		
		ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаНачала"));
		ЗначениеПараметра.Значение = НачалоПериода;
		
		ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаКонца"));
		ЗначениеПараметра.Значение = КонецПериода;
		
		ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Сценарий"));
		ЗначениеПараметра.Значение = ЭталоныйСценарий;
		
		
		ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВалютаУпрУчета"));
		ЗначениеПараметра.Значение = Константы.ВалютаУправленческогоУчета.Получить();

		//ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВалютаРеглУчета"));
		//ЗначениеПараметра.Значение = Константы.ВалютаРегламентированногоУчета.Получить();
		
	КонецЕсли;
	
	
	// Создадим и инициализируем процессор компоновки
	
	Для каждого СтрокаТаблицыСценария из Сценарии Цикл
		
		СтрокаТаблицыСценария.ЭталонСценарий      = ЭталоныйСценарий;
		СтрокаТаблицыСценария.ЭталонНачалоПериода = НачалоПериода;
		СтрокаТаблицыСценария.ЭталонКонецПериода  = КонецПериода;
		
		СтруктураРесурсов = ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчета.Получить(), СтрокаТаблицыСценария.НачалоПериода);
		СтрокаТаблицыСценария.КурсВалютыРегУчета      = СтруктураРесурсов.Курс;
		СтрокаТаблицыСценария.КратностьВалютыРегУчета = СтруктураРесурсов.Кратность;
	
		СтруктураРесурсов = ОбщегоНазначения.ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчета.Получить(), СтрокаТаблицыСценария.НачалоПериода);
		СтрокаТаблицыСценария.КурсВалютыУпрУчета      = СтруктураРесурсов.Курс;
		СтрокаТаблицыСценария.КратностьВалютыУпрУчета = СтруктураРесурсов.Кратность;

		
		// перепишем заголовок во всех строках
		Номер        = СтрокаТаблицыСценария.НомерСтроки;
		СтрокаПериод = "Период : " + ПредставлениеПериода(СтрокаТаблицыСценария.НачалоПериода, СтрокаТаблицыСценария.КонецПериода);
		Если СтрокаТаблицыСценария.Сценарий = Справочники.СценарииПланирования.ПустаяСсылка() Тогда
			
			СтрокаТаблицыСценария.НазваниеКолонки = ?(Номер = 1,"Эталонный период.","Сравниваемый период " + Номер + ".")
			+ Символы.ПС + "Фактические данные." + " Нет периода." + Символы.ПС + СтрокаПериод;
			
		Иначе
			
			ПериодДанных = СтрокаТаблицыСценария.Сценарий.Периодичность;
			СтрокаТаблицыСценария.НазваниеКолонки = ?(Номер = 1,"Эталонный период.","Сравниваемый период " + Номер + ".")
			+ Символы.ПС + СтрокаТаблицыСценария.Сценарий + " " + ПериодДанных + "." + Символы.ПС+СтрокаПериод;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВнешниеНаборыДанных = Новый Структура("ТаблицаСценариев", Сценарии);
	
	Возврат ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
	
	
	//Возврат ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета);
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеПараметра.Значение = '00010101' Тогда
		ЗначениеПараметра.Значение = КонецДня(ТекущаяДата());
		ЗначениеПараметра.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

#Если Клиент Тогда
	
// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	
	Если ЗначениеПараметра <> Неопределено и ЗначениеПараметра.Значение = '00010101' тогда
		
		ЗначениеПараметра.Значение = НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
		
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	Если ЗначениеПараметра <> Неопределено и ЗначениеПараметра.Значение = '00010101' тогда
		
		ЗначениеПараметра.Значение = КонецМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
		
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если ЗначениеПараметра <> Неопределено и ЗначениеПараметра.Значение = '00010101' тогда
		
		ЗначениеПараметра.Значение = КонецМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
		
	КонецЕсли;
	
	Если Сценарии.Количество() = 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СценарииПланирования.Ссылка
		|ИЗ
		|	Справочник.СценарииПланирования КАК СценарииПланирования
		|
		|УПОРЯДОЧИТЬ ПО
		|	СценарииПланирования.Периодичность.Порядок УБЫВ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Сценарий = Выборка.Ссылка;
		
			НоваяСтрока                     = Сценарии.Добавить();
			НоваяСтрока.ВидДанных	        = Перечисления.ВидыДанныхДляПланФактногоАнализаЗатратНаПерсонал.Сценарий;
			НоваяСтрока.Сценарий	        = Сценарий;
			НоваяСтрока.НачалоПериода       = Бюджетирование.ДатаНачалаПериода(ОбщегоНазначения.ПолучитьРабочуюДату(), Сценарий.Периодичность);
			НоваяСтрока.КонецПериода        = КонецДня(Бюджетирование.ДатаКонцаПериода(ОбщегоНазначения.ПолучитьРабочуюДату(), Сценарий.Периодичность));
			НоваяСтрока.СтрокаНачалоПериода = Бюджетирование.ПолучитьПериодСтрокой(НоваяСтрока.НачалоПериода, ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Сценарий.Периодичность));
			НоваяСтрока.СтрокаКонецПериода  = Бюджетирование.ПолучитьПериодСтрокой(НоваяСтрока.КонецПериода, ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Сценарий.Периодичность));
			
			НоваяСтрока               = Сценарии.Добавить();
			НоваяСтрока.ВидДанных	  = Перечисления.ВидыДанныхДляПланФактногоАнализаЗатратНаПерсонал.ФактическиеДанные;
			НоваяСтрока.НачалоПериода = Бюджетирование.ДатаНачалаПериода(ОбщегоНазначения.ПолучитьРабочуюДату(), Сценарий.Периодичность);
			НоваяСтрока.КонецПериода  = КонецДня(Бюджетирование.ДатаКонцаПериода(ОбщегоНазначения.ПолучитьРабочуюДату(), Сценарий.Периодичность));
			НоваяСтрока.СтрокаНачалоПериода = Бюджетирование.ПолучитьПериодСтрокой(НоваяСтрока.НачалоПериода, ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Сценарий.Периодичность));
			НоваяСтрока.СтрокаКонецПериода  = Бюджетирование.ПолучитьПериодСтрокой(НоваяСтрока.КонецПериода, ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Сценарий.Периодичность));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементОтбораПодразделения = Неопределено;
	Для каждого ЭлементОтб из  КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтб) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтб.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Учет") тогда
			ЭлементОтбора = ЭлементОтб;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтб) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтб.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") тогда
			ЭлементОтбораПодразделения = ЭлементОтб;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено тогда
		ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить("ЭлементОтбораКомпоновкиДанных");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Учет");
	КонецЕсли;
	
	Если РежимФормированияОтчета = "ПоЦентрамОтветственности" тогда
		ЭлементОтбора.ПравоеЗначение = истина;
		Если ЭлементОтбораПодразделения <> Неопределено тогда
			ЭлементОтбораПодразделения.ПравоеЗначение = Справочники.Подразделения.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли РежимФормированияОтчета = "ПоОрганизационнойСтруктуреПредприятия" тогда
		ЭлементОтбора.ПравоеЗначение = ложь;
		Если ЭлементОтбораПодразделения <> Неопределено тогда
			ЭлементОтбораПодразделения.ПравоеЗначение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
	Иначе
		ЭлементОтбора.ПравоеЗначение = истина;
		РежимФормированияОтчета      = "ПоЦентрамОтветственности";
		Если ЭлементОтбораПодразделения <> Неопределено тогда
			ЭлементОтбораПодразделения.ПравоеЗначение = Справочники.Подразделения.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

#КонецЕсли
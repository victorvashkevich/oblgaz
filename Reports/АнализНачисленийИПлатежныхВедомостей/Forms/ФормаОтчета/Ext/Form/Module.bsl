Перем СписокДоступныхРасшифровок;

&НаСервере
Процедура Подключаемый_ПриСозданииНаСервереУниверсальныйОбработчик(Отказ, СтандартнаяОбработка)
	
	ФункцииОтчетов.ПриСозданииОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ПриЗагрузкеВариантаНаСервереУниверсальныйОбработчик(Настройки)
	
	ФункцииОтчетов.ПриЗагрузкеВариантаНаСервере(ЭтаФорма, Настройки);
	
	Если Параметры.Свойство("ОтчетПоВедомостям") И Параметры.ОтчетПоВедомостям Тогда
		
		Расшифровка = Параметры.Расшифровка;
		МассивЗначенийРасшифровки = ТиповыеОтчеты.ПолучитьМассивПолейРасшифровки(Расшифровка, ПолучитьИзВременногоХранилища(Параметры.ДанныеРасшифровки), Отчет.КомпоновщикНастроек);
		
		Для каждого ЗначениеРасшифровки из МассивЗначенийРасшифровки Цикл
			Если ТипЗнч(ЗначениеРасшифровки) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
				ФункцииОтчетовКлиентСервер.ДобавитьОтбор(Отчет.КомпоновщикНастроек, ЗначениеРасшифровки.Поле, ЗначениеРасшифровки.Значение);
			ИначеЕсли ТипЗнч(ЗначениеРасшифровки) = Тип("ЭлементОтбораКомпоновкиДанных") тогда
				ФункцииОтчетовКлиентСервер.ДобавитьОтбор(Отчет.КомпоновщикНастроек, ЗначениеРасшифровки.ЛевоеЗначение, ЗначениеРасшифровки.ПравоеЗначение);
			ИначеЕсли ТипЗнч(ЗначениеРасшифровки) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
				Группа = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				Группа.ТипГруппы = ЗначениеРасшифровки.ТипГруппы;
				ФункцииОтчетовКлиентСервер.СкопироватьЭлементы(Группа, ЗначениеРасшифровки);
			КонецЕсли;
		КонецЦикла;
		
		ПользовательскиеНастройки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		Для каждого ЭлементНастройки из ПользовательскиеНастройки.Элементы Цикл
			
			Если ТипЗнч(ЭлементНастройки) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") тогда	
				Продолжить;
			КонецЕсли;
			ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
			Если ЭлементНастройкиВарианта = Неопределено или ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(ЭлементНастройки.Значение) <> Тип("СтандартныйПериод") тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементНастройки.Значение.ДатаНачала = Параметры.НачалоПериода;
			ЭлементНастройки.Значение.ДатаОкончания  = Параметры.КонецПериода;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ПриЗагрузкеПользовательскихНастроекНаСервереУниверсальныйОбработчик(Настройки)
	ФункцииОтчетов.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриЗакрытииУниверсальныйОбработчик()
	ФункцииОтчетовКлиент.ПриЗакрытии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриОкончанииРедактированияУниверсальныйОбработчик(Элемент, НоваяСтрока, ОтменаРедактирования)
	ФункцииОтчетовКлиент.ПриОкончанииРедактирования(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриАктивизацииСтрокиУниверсальныйОбработчик(Элемент)
	ФункцииОтчетовКлиент.ПриАктивизацииСтроки(ЭтаФорма, Элемент);
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЯ

&НаКлиенте
Процедура Подключаемый_НачалоВыбораУниверсальныйОбработчик(Элемент, СтандартнаяОбработка)
	ФункцииОтчетовКлиент.НачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачалоВыбораИзСпискаУниверсальныйОбработчик(Элемент, СтандартнаяОбработка)
	ФункцииОтчетовКлиент.НачалоВыбораИзСписка(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОчисткаУниверсальныйОбработчик(Элемент, СтандартнаяОбработка)
	ФункцииОтчетовКлиент.Очистка(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РегулированиеУниверсальныйОбработчик(Элемент, Направление, СтандартнаяОбработка)
	ФункцииОтчетовКлиент.Регулирование(ЭтаФорма, Элемент, Направление, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодборУниверсальныйОбработчик(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ФункцииОтчетовКлиент.АвтоПодбор(ЭтаФорма, Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОкончаниеВводаТекстаУниверсальныйОбработчик(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ФункцииОтчетовКлиент.ОкончаниеВводаТекста(ЭтаФорма, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииУниверсальныйОбработчик(Элемент)
	ФункцииОтчетовКлиент.ПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФормаОбработкаВыбораУниверсальныйОбработчик(РезультатВыбора, ИсточникВыбора)
	ФункцииОтчетовКлиент.ФормаОбработкаВыбора(ЭтаФорма, РезультатВыбора, ИсточникВыбора);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораУниверсальныйОбработчик(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ФункцииОтчетовКлиент.ОбработкаВыбора(ЭтаФорма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры


&НаСервере
Процедура Подключаемый_ПриСохраненииВариантаНаСервереУниверсальныйОбработчик(Настройки)
	ФункцииОтчетов.ПриСохраненииВариантаНаСервере(ЭтаФорма, Настройки);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ПриСохраненииПользовательскихНастроекНаСервереУниверсальныйОбработчик(Настройки)
	ФункцииОтчетов.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УниверсальнаяПроцедураКомандыУниверсальныйОбработчик(Команда)
	ФункцииОтчетовКлиент.УниверсальнаяПроцедураКоманды(Команда, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеУниверсальныйОбработчик(Элемент)
	ФункцииОтчетовКлиент.Нажатие(ЭтаФорма, Элемент);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервереУниверсальныйОбработчик(СтруктураКоманды) Экспорт
	ФункцииОтчетов.ВыполнитьКомандуНаСервере(ЭтаФорма, СтруктураКоманды);
КонецПроцедуры

&НаСервере
Процедура РасчетнаяВедомость(Расшифровка)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ОтчетРасшифровки = Отчеты.РасчетныеВедомостиОрганизаций.Создать();
		
		КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
		НастрокаПоУмолчанию = КомпоновщикНастроек.ПолучитьНастройки();
		ТиповыеОтчеты.ПолучитьПримененуюНастройку(ОтчетРасшифровки);
		
		ПараметрыДанныхОтчета = ОтчетРасшифровки.КомпоновщикНастроек.Настройки.ПараметрыДанных;
		ТиповыеОтчеты.ЗаполнитьЭлементы(ПараметрыДанныхОтчета, КомпоновщикНастроек.Настройки.ПараметрыДанных);
		
		ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
		Для каждого ЭлементНастройки из ПользовательскиеНастройки.Элементы Цикл
			
			Если ТипЗнч(ЭлементНастройки) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") тогда	
				Продолжить;
			КонецЕсли;
			ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
			Если ЭлементНастройкиВарианта = Неопределено или ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(ЭлементНастройки.Значение) <> Тип("СтандартныйПериод") тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрНачалоПериода = ПараметрыДанныхОтчета.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
			ПараметрКонецПериода = ПараметрыДанныхОтчета.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
			ПараметрНачалоПериода.Значение = ЭлементНастройки.Значение.ДатаНачала;
			ПараметрКонецПериода.Значение = ЭлементНастройки.Значение.ДатаОкончания;
			
		КонецЦикла;
		
		КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
		
		//добавить отборы 
		
		МассивЗначенийРасшифровки = ТиповыеОтчеты.ПолучитьМассивПолейРасшифровки(Расшифровка, ПолучитьИзВременногоХранилища(ДанныеРасшифровки), ОтчетРасшифровки.КомпоновщикНастроек);
		
		Для каждого ЗначениеРасшифровки из МассивЗначенийРасшифровки Цикл
			Если Тип(ЗначениеРасшифровки) = ТипЗнч("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, ЗначениеРасшифровки.Поле, ЗначениеРасшифровки.Значение);
			ИначеЕсли Тип(ЗначениеРасшифровки) = ТипЗнч("ЭлементОтбораКомпоновкиДанных") тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, ЗначениеРасшифровки.ЛевоеЗначение, ЗначениеРасшифровки.ПравоеЗначение);
			ИначеЕсли Тип(ЗначениеРасшифровки) = ТипЗнч("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
				Группа = ОтчетРасшифровки.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				Группа.ТипГруппы = ЗначениеРасшифровки.ТипГруппы;
				ТиповыеОтчеты.СкопироватьЭлементы(Группа, ЗначениеРасшифровки);
			КонецЕсли;
		КонецЦикла;
		
		//открыть расшифровку
		ТиповыеОтчеты.ОткрытьФормуРасшифровки(ОтчетРасшифровки, "Расчетная ведомость");
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоля(Элементы, СписокПолей)
	
	Для каждого ДоступноеПоле из Элементы Цикл
		Если ДоступноеПоле.Папка тогда
			ДобавитьПоля(ДоступноеПоле.Элементы, СписокПолей);
		Иначе
			СписокПолей.Добавить(Строка(ДоступноеПоле.Поле));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПолей(Расшифровка, ДополнительныеРасшифровки = Неопределено)
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
		И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеРасшифровкиОтчета = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	ЭтоДетальнаяЗапись = Ложь;
	Элемент = ДанныеРасшифровкиОтчета.Элементы[Расшифровка];
	Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		ЭлементыРодителей = Элемент.ПолучитьРодителей();
		ПоляВРасшифровке  = Элемент.ПолучитьПоля();
		Если ЭлементыРодителей.Количество() = 1 Тогда
			Элемент = ЭлементыРодителей[0];
			Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
				ЭтоДетальнаяЗапись = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	МассивПолейРасшифровки = ТиповыеОтчеты.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровкиОтчета);
	МассивПолейРасшифровкиСРесурсами = ТиповыеОтчеты.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровкиОтчета, , Истина);
	
	ДотупноеПоле = Неопределено;
	Если МассивПолейРасшифровкиСРесурсами.Количество() > 0 тогда
		ДотупноеПоле = ТиповыеОтчеты.ПолучитьДоступноеПоле(Новый ПолеКомпоновкиДанных(МассивПолейРасшифровкиСРесурсами[0].Поле), Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Команда = Неопределено;
	
	Если ЭтоДетальнаяЗапись Тогда
		Команда = "ОткрытьЗначение";
	КонецЕсли;
	
	Значение = МассивПолейРасшифровкиСРесурсами[0].Значение;
	ПолеРасшифровки = ДотупноеПоле.Поле;
	ЭтоЧисловойРесурс = ДотупноеПоле <> Неопределено И ДотупноеПоле.Ресурс И (ДотупноеПоле.Тип.СодержитТип(Тип("Число")) или ТипЗнч(Значение) = Тип("Число") или Значение = NULL);
	
	Если ЭтоЧисловойРесурс И НЕ ЭтоДетальнаяЗапись тогда
		Команда = "РасшифроватьПоле";
	Иначе
		Команда = "ОткрытьЗначение";
	КонецЕсли;
	
	Если Команда = "ОткрытьЗначение" Тогда
		Если МассивПолейРасшифровкиСРесурсами[0].Значение <> NULL тогда
			Возврат Новый Структура("Открыть, Значение", Истина, МассивПолейРасшифровкиСРесурсами[0].Значение);
		КонецЕсли;
	ИначеЕсли Команда = "РасшифроватьПоле" Тогда
		
		СписокПолейРасшифровки = Новый СписокЗначений;
		ДобавитьПоля(Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы, СписокПолейРасшифровки);
		Для каждого ПолеРасшифровки из МассивПолейРасшифровки Цикл
			Поле = Неопределено;
			Если ТипЗНч(ПолеРасшифровки) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
				Поле = ПолеРасшифровки.Поле
			ИначеЕсли ТипЗнч(ПолеРасшифровки) = Тип("ЭлементОтбораКомпоновкиДанных") тогда
				Поле = ПолеРасшифровки.ЛевоеЗначение;
			КонецЕсли;
			ПолеСписка = СписокПолейРасшифровки.НайтиПоЗначению(Строка(Поле));
			Если ПолеСписка <> Неопределено тогда
				СписокПолейРасшифровки.Удалить(ПолеСписка);
			КонецЕсли;
		КонецЦикла;
		
		СписокДоступныхРасшифровок = Новый СписокЗначений;
		Для каждого ПолеСпискаРасшифровки из СписокПолейРасшифровки Цикл
			ДоступноеПоле = ТиповыеОтчеты.ПолучитьДоступноеПоле(Новый ПолеКомпоновкиДанных(ПолеСпискаРасшифровки.Значение), Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок);
			СписокДоступныхРасшифровок.Добавить(ПолеСпискаРасшифровки.Значение, ДоступноеПоле.Заголовок);
		КонецЦикла;
		
		Если ДополнительныеРасшифровки <> Неопределено тогда
			Для каждого ЭлементСписка из ДополнительныеРасшифровки Цикл
				СписокДоступныхРасшифровок.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			КонецЦИкла;
		КонецЕсли;
		
		Возврат СписокДоступныхРасшифровок;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДопСписок = Новый СписокЗначений;
	ДопСписок.Добавить("Отчет по ведомостям");
	ДопСписок.Добавить("Расчетная ведомость");
	
	СписокДоступныхРасшифровок = ПолучитьСписокПолей(Расшифровка, ДопСписок);
	Если ТипЗнч(СписокДоступныхРасшифровок) = Тип("Структура") И СписокДоступныхРасшифровок.Свойство("Открыть") И СписокДоступныхРасшифровок.Открыть Тогда
		ОткрытьЗначение(СписокДоступныхРасшифровок.Значение);
	КонецЕсли;
	
	Если СписокДоступныхРасшифровок.Количество() > 1 тогда
		Поле = ВыбратьИзМеню(СписокДоступныхРасшифровок);
		Если Поле <> Неопределено тогда
			Поле = Поле.Значение;
		Иначе 
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Поле = "Отчет по ведомостям" тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ОтчетПоВедомостям", Истина);
		ПараметрыОткрытия.Вставить("Расшифровка", Расшифровка);
		ПараметрыОткрытия.Вставить("ДанныеРасшифровки", ДанныеРасшифровки);
		ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
		
		ПользовательскиеНастройки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		Для каждого ЭлементНастройки из ПользовательскиеНастройки.Элементы Цикл
			
			Если ТипЗнч(ЭлементНастройки) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") тогда	
				Продолжить;
			КонецЕсли;
			ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
			Если ЭлементНастройкиВарианта = Неопределено или ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(ЭлементНастройки.Значение) <> Тип("СтандартныйПериод") тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыОткрытия.Вставить("НачалоПериода", ЭлементНастройки.Значение.ДатаНачала);
			ПараметрыОткрытия.Вставить("КонецПериода", ЭлементНастройки.Значение.ДатаОкончания);
			
		КонецЦикла;
		
		ФункцииОтчетовКлиент.ОткрытьОтчет("Отчет.АнализНачисленийИПлатежныхВедомостей", "ПоВедомостям", ПараметрыОткрытия);
		
	ИначеЕсли Поле = "Расчетная ведомость" тогда
		
		РасчетнаяВедомость(Расшифровка);
		
	КонецЕсли;
	
КонецПроцедуры


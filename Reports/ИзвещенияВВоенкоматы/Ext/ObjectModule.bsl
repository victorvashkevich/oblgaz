Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;

#Если Клиент ИЛИ ВнешнееСоединение Тогда

Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = истина) Экспорт
	
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета);

	РазбитьТабличныйДокументПоСтраницам(Результат);
	
	
КонецФункции

// Разбивает табличный документ по страницам
//
// Параметры:
//  ТабличныйДокумент - ссылка на табличный документ.
//
Процедура РазбитьТабличныйДокументПоСтраницам(ТабличныйДокумент)
	#Если Клиент Тогда
	Состояние(НСТР("ru='Разделение отчета по страницам ...  (Если вы хотите прервать вывод отчета, нажмите Ctrl+Break)'"));
	
	Для сч = 0 по 10 Цикл
		ОбластьКолонкиРЛ                  = ТабличныйДокумент.Область(, сч+1, , сч+1);
		ОбластьКолонкиРЛ.ШиринаКолонки    = 9;
		ОбластьКолонкиРЛ.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
	КонецЦикла;
	ОбластьКолонкиРЛ                  = ТабличныйДокумент.Область(, 4, , 4);
	ОбластьКолонкиРЛ.ШиринаКолонки    = 9;
	ОбластьКолонкиРЛ.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ОбластьКолонкиРЛ                  = ТабличныйДокумент.Область(, 2, , 2);
	ОбластьКолонкиРЛ.ШиринаКолонки    = 9.9;
	//ОбластьКолонкиРЛ.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ОбластьКолонкиРЛ                  = ТабличныйДокумент.Область(, 3, , 3);
	ОбластьКолонкиРЛ.ШиринаКолонки    = 9.9;
	//ОбластьКолонкиРЛ.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;

	//ТабличныйДокументДляПроверки.АвтоМасштаб = Истина;

	
	ОбластьПервойЯчейки = ТабличныйДокумент.НайтиТекст(" ИЗВЕЩЕНИЕ");
	
	Если ОбластьПервойЯчейки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	НомерСтрокиНачалаРЛ = ОбластьПервойЯчейки.Верх;
	
	НомерСтрокиКонцаРЛ     = НомерСтрокиНачалаРЛ + 62;
	
	ОбластьСлед = ТабличныйДокумент.Область(НомерСтрокиКонцаРЛ, , НомерСтрокиКонцаРЛ, );
	ОбластьПервойЯчейки = ТабличныйДокумент.НайтиТекст(" ИЗВЕЩЕНИЕ", ОбластьСлед);
	
	Пока ОбластьПервойЯчейки <> Неопределено Цикл
		НомерСтрокиНачалаРЛ = ОбластьПервойЯчейки.Верх;
		НомерСтрокиКонцаРЛ  = НомерСтрокиНачалаРЛ + 62;
		ОбластьРазделителя  = ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ - 5, , НомерСтрокиНачалаРЛ - 5, );
		ОбластьРазделителя.НачалоСтраницы = истина;
		ОбластьСлед         = ТабличныйДокумент.Область(НомерСтрокиКонцаРЛ, , НомерСтрокиКонцаРЛ, );
		ОбластьПервойЯчейки = ТабличныйДокумент.НайтиТекст(" ИЗВЕЩЕНИЕ", ОбластьСлед);
		
		ОбработкаПрерыванияПользователя();
		
	КонецЦикла;
	#КонецЕсли
КонецПроцедуры


// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТекстТекущейДаты"));
	
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметра.Значение = ОбщегоНазначения.ПолучитьРабочуюДату();
	
КонецПроцедуры

#КонецЕсли

#Если Клиент Тогда
	
// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	
	Если ЗначениеПараметра <> Неопределено и ЗначениеПараметра.Значение = '00010101' тогда
		
		ЗначениеПараметра.Значение = НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
		
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	Если ЗначениеПараметра <> Неопределено и ЗначениеПараметра.Значение = '00010101' тогда
		
		ЗначениеПараметра.Значение = КонецМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
		
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если ЗначениеПараметра <> Неопределено и ЗначениеПараметра.Значение = '00010101' тогда
		
		ЗначениеПараметра.Значение = КонецМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
		
	КонецЕсли;

КонецПроцедуры

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

#КонецЕсли
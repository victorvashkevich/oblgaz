
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Управление необходимостью выполнять любые 
//   вспомогательные расчеты при записи набора записей.	
Перем мВыполнятьВспомогательныеРасчеты Экспорт;

// Управление необходимостью делать движения по фактическим отпускам
Перем мВыполнятьСписаниеФактическогоОтпуска Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

///////////////////////////////////////////////////////////////////////////////////////
// Расчет периода начисления 
// Выполняется если установлен контроль периода начисления сотрудников
Процедура РасчетПериодаНачисления(Выборка, Регистратор)
	
    ТекущийСотрудник = НеОпределено;
    ТекущийПериодДействия = НеОпределено;
	ОрганизацияТекущегоСотрудника = НеОпределено;
    
    ПериодыНачисления = Новый ТаблицаЗначений;
    ПериодыНачисления.Колонки.Добавить("Регистратор");
    ПериодыНачисления.Колонки.Добавить("РегистраторПредставление");
    ПериодыНачисления.Колонки.Добавить("ВидРасчета");
    ПериодыНачисления.Колонки.Добавить("ДатаНачала");
    ПериодыНачисления.Колонки.Добавить("ДатаОкончания");
    
    Пока Выборка.Следующий() Цикл
        Если    Выборка.Сотрудник <> ТекущийСотрудник 
                или Выборка.ПериодДействия <> ТекущийПериодДействия 
                или Выборка.Организация <> ОрганизацияТекущегоСотрудника Тогда
            Если ТекущийСотрудник <> НеОпределено Тогда
                ПериодыНачисления.Очистить();
            КонецЕсли;
            ТекущийСотрудник = Выборка.Сотрудник;
			ОрганизацияТекущегоСотрудника = Выборка.Организация;
            ТекущийПериодДействия = Выборка.ПериодДействия;
        КонецЕсли;
        Если Выборка.ПериодДействияНачало <> null Тогда
            Если Выборка.Сторно Тогда
                УдалитьПериод(ПериодыНачисления, Выборка.ПериодДействияНачало, Выборка.ПериодДействияКонец);
            Иначе
                ДобавитьПериод(ПериодыНачисления, Выборка.ПериодДействияНачало, Выборка.ПериодДействияКонец, Выборка.Регистратор, Выборка.РегистраторПредставление, Выборка.ВидРасчета, Регистратор, Истина, Выборка.СотрудникНаименование + ": обнаружено повторное начисление за период ");
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    Если ТекущийСотрудник <> НеОпределено Тогда
        ПериодыНачисления.Очистить();
    КонецЕсли;
КонецПроцедуры

Процедура РасчетПериодаДоначисления(Выборка)
	
	ТекущийСотрудник = НеОпределено;
	ТекущийПериодДействия = НеОпределено;
	ОрганизацияТекущегоСотрудника = НеОпределено;
	ПериодыДействия = Новый ТаблицаЗначений;
	ПериодыДействия.Колонки.Добавить("ПериодРегистрации");
	ПериодыДействия.Колонки.Добавить("Погашение");
	ПериодыДействия.Колонки.Добавить("ДатаНачала");
	ПериодыДействия.Колонки.Добавить("ДатаОкончания");
	Пока Выборка.Следующий() Цикл
		Если Выборка.Сотрудник <> ТекущийСотрудник 
			или Выборка.ПериодДействия <> ТекущийПериодДействия 
			или Выборка.Организация <> ОрганизацияТекущегоСотрудника Тогда
			Если ТекущийСотрудник <> НеОпределено Тогда 
				ЗаписатьНаборЗаписей(ПериодыДействия, ТекущийСотрудник, ОрганизацияТекущегоСотрудника, ТекущийПериодДействия);
			КонецЕсли;
			ТекущийСотрудник = Выборка.Сотрудник;
			ТекущийПериодДействия = Выборка.ПериодДействия;
			ОрганизацияТекущегоСотрудника = Выборка.Организация;
		КонецЕсли;
		Период = ПериодыДействия.Добавить();
		Период.Погашение = Ложь;
		Период.ПериодРегистрации = Выборка.ПериодРегистрации;
		Период.ДатаНачала = Выборка.ДатаНачала;
		Период.ДатаОкончания = Выборка.ДатаОкончания;
		Если Выборка.ДатаНачалаПогашения <> null Тогда
			Период = ПериодыДействия.Добавить();
			Период.Погашение = Истина;
			Период.ПериодРегистрации = Выборка.ПериодРегистрацииПогашения;
			Период.ДатаНачала = Выборка.ДатаНачалаПогашения;
			Период.ДатаОкончания = Выборка.ДатаОкончанияПогашения;
		КонецЕсли;
	КонецЦикла;
	Если ТекущийСотрудник <> НеОпределено Тогда
		ЗаписатьНаборЗаписей(ПериодыДействия, ТекущийСотрудник, ОрганизацияТекущегоСотрудника, ТекущийПериодДействия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНаборЗаписей(ПериодыДействия, ТекущийСотрудник, ОрганизацияТекущегоСотрудника, ТекущийПериодДействия)
	
	ПериодыДоначисления = Новый ТаблицаЗначений;
    ПериодыДоначисления.Колонки.Добавить("Регистратор");
    ПериодыДоначисления.Колонки.Добавить("РегистраторПредставление");
    ПериодыДоначисления.Колонки.Добавить("ВидРасчета");
	ПериодыДоначисления.Колонки.Добавить("ДатаНачала");
	ПериодыДоначисления.Колонки.Добавить("ДатаОкончания");
	
	ПериодыДействия.Сортировать("ПериодРегистрации, Погашение");
	Для Каждого Период Из ПериодыДействия Цикл
		Если Период.Погашение Тогда
			УдалитьПериод(ПериодыДоначисления, Период.ДатаНачала, Период.ДатаОкончания);
		Иначе
			ДобавитьПериод(ПериодыДоначисления, Период.ДатаНачала, Период.ДатаОкончания);
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.ДоначисленияСотрудникам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сотрудник.Установить(ТекущийСотрудник);
	НаборЗаписей.Отбор.ПериодДействия.Установить(ТекущийПериодДействия);
	НаборЗаписей.Отбор.Организация.Установить(ОрганизацияТекущегоСотрудника);
	
	Для Каждого Период Из ПериодыДоначисления Цикл
		Строка = НаборЗаписей.Добавить();
		Строка.Сотрудник		= ТекущийСотрудник;
		Строка.ПериодДействия	= ТекущийПериодДействия;
		Строка.ДатаНачала		= Период.ДатаНачала;
		Строка.ДатаОкончания	= Период.ДатаОкончания;
		Строка.Организация		= ОрганизацияТекущегоСотрудника;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	ПериодыДействия.Очистить();
	
КонецПроцедуры

Процедура ДобавитьПериод(Периоды, Начало, Окончание, Регистратор = "", РегистраторПредставление = "", ВидРасчета = "", ЭтотРегистратор = "", СПроверкойПерекрытия = Ложь, ТекстИсключения = "")
    НоваяСтрока = Периоды.Добавить();
    НоваяСтрока.Регистратор = Регистратор;
    НоваяСтрока.РегистраторПредставление = РегистраторПредставление;
    НоваяСтрока.ВидРасчета = ВидРасчета;
    НоваяСтрока.ДатаНачала = Начало;
    НоваяСтрока.ДатаОкончания = Окончание;
    // обработаем полученные периоды
    Периоды.Сортировать("ДатаНачала");
    ПрошлаяДатаНачала = '0001-01-01';
    ПрошлаяДатаОкончания = '0001-01-01';
	ПрошлыйРегистратор = НеОпределено;
	ПрошлыйРегистраторПредставление = НеОпределено;
	ПрошлыйВидРасчета = НеОпределено;
    ПрошлаяСтрока = НеОпределено;
    СтрокиКУдалению = Новый Массив;
    Для Каждого СтрокаПериода Из Периоды Цикл
		Если СПроверкойПерекрытия И СтрокаПериода.ДатаНачала < ПрошлаяДатаОкончания Тогда
			ТекстИсключения = ТекстИсключения + "(" + Формат(СтрокаПериода.ДатаНачала, "ДФ='дд МММ гг ""г.""'") + " - " + Формат(ПрошлаяДатаОкончания, "ДФ='дд МММ гг ""г.""'") + ")";
			ТекстИсключения = ТекстИсключения + Символы.ВК + "Вид расчета """ + ПрошлыйВидРасчета + """ введен документом " + ПрошлыйРегистраторПредставление + ?(ПрошлыйРегистратор = ЭтотРегистратор, " (этот документ сейчас проводится)", "");
			ТекстИсключения = ТекстИсключения + Символы.ВК + "Вид расчета """ + СтрокаПериода.ВидРасчета + """ введен документом " + СтрокаПериода.РегистраторПредставление + ?(СтрокаПериода.Регистратор = ЭтотРегистратор, " (этот документ сейчас проводится)", "");
            ВызватьИсключение ТекстИсключения;
        КонецЕсли;
        Если СтрокаПериода.ДатаНачала <= ПрошлаяДатаОкончания + 1 Тогда
            //склеим периоды
            СтрокаПериода.ДатаНачала = Мин(СтрокаПериода.ДатаНачала, ПрошлаяДатаНачала);
            СтрокаПериода.ДатаОкончания = Макс(СтрокаПериода.ДатаОкончания, ПрошлаяДатаОкончания);
            СтрокиКУдалению.Добавить(ПрошлаяСтрока);
        КонецЕсли;
        ПрошлаяДатаНачала = СтрокаПериода.ДатаНачала;
        ПрошлаяДатаОкончания = СтрокаПериода.ДатаОкончания;
		ПрошлыйРегистраторПредставление = СтрокаПериода.РегистраторПредставление;
		ПрошлыйРегистратор = СтрокаПериода.Регистратор;
		ПрошлыйВидРасчета = СтрокаПериода.ВидРасчета;
        ПрошлаяСтрока = СтрокаПериода;
    КонецЦикла;
    Для Каждого Строка Из СтрокиКУдалению Цикл
        Периоды.Удалить(Строка);
    КонецЦикла;
КонецПроцедуры

Процедура УдалитьПериод(ПериодыДоначисления, ДатаНачала, ДатаОкончания)
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаПериода Из ПериодыДоначисления Цикл
		Если
			ДатаНачала <= СтрокаПериода.ДатаНачала 
			и ДатаОкончания > СтрокаПериода.ДатаНачала 
			и ДатаОкончания < СтрокаПериода.ДатаОкончания Тогда
			СтрокаПериода.ДатаНачала = ДатаОкончания + 1;
			
		ИначеЕсли
			ДатаНачала > СтрокаПериода.ДатаНачала 
			и ДатаНачала < СтрокаПериода.ДатаОкончания 
			и ДатаОкончания >= СтрокаПериода.ДатаОкончания Тогда 
			СтрокаПериода.ДатаОкончания = ДатаНачала - 1;
			
		ИначеЕсли
			ДатаНачала > СтрокаПериода.ДатаНачала
			и ДатаОкончания < СтрокаПериода.ДатаОкончания Тогда
			// добавим новый период
			НоваяСтрока = ПериодыДоначисления.Добавить();
			НоваяСтрока.ДатаНачала = ДатаОкончания + 1;
			НоваяСтрока.ДатаОкончания = СтрокаПериода.ДатаОкончания;
			// сокартим прежний            
			СтрокаПериода.ДатаОкончания = ДатаНачала - 1;
			
		ИначеЕсли
			ДатаНачала <= СтрокаПериода.ДатаНачала 
			и ДатаОкончания >= СтрокаПериода.ДатаОкончания Тогда
			СтрокиКУдалению.Добавить(СтрокаПериода);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		ПериодыДоначисления.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет необходимость расчета периодов начислений
//
// Параметры
//  ПроверкаПередЗаписью  – Булево – параметр определяет, что проверка осуществляется перед записью набора записей
//
// Возвращаемое значение:
//   Истина - не выполнять расчет периодов начислений
//
Функция НеВыполнятьРасчетПериодаНачисленияСотрудника(ПроверкаПередЗаписью = Истина)

	Если ПроверкаПередЗаписью Тогда
		// проверка для обработчика ПередЗаписью
		Запрос = Новый Запрос;

		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОсновныеНачисления.Организация
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|ГДЕ
		|	ОсновныеНачисления.Регистратор = &Регистратор";
		
		Регистратор = Отбор.Регистратор.Значение;
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
		Запрос.Текст = ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Организация =  Выборка.Организация;
		
	Иначе
		// проверка для обработчика ПриЗаписи
		Организация = ЭтотОбъект[0].Организация;
		
	КонецЕсли;

	Возврат Не ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ПроверкаПериодовНачисления");

КонецФункции // НеВыполнятьРасчетПериодаНачисленияСотрудника()

Процедура СписатьФактическиеОтпуска()
	
	Регистратор = Отбор.Регистратор.Значение;
			
	// Необходимо получить фактическое количество дней отпуска, используя таблицу ФПД
	// Необходимо собрать данные по кадровым отпускам за те же периоды и по тем сотрудникам
	// После чего сделать движения на положительную разницу количества дней отпуска между кадровыми и расчетными данными
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ПериодДействия КАК ПериодДействия,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.Регистратор
	|ПОМЕСТИТЬ ВТ_СотрудникиПериодыДействия
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|	И (НЕ Начисления.ВидРасчета.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия,
	|	ВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияФПД.Сотрудник КАК Сотрудник,
	|	НачисленияФПД.ПериодДействияНачало КАК ПериодДействияНачало,
	|	НачисленияФПД.ПериодДействияКонец КАК ПериодДействияКонец,
	|	НачисленияФПД.ВидРасчета.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	СУММА(ПроизводственныйКалендарь.КалендарныеДни * ВЫБОР
	|			КОГДА НачисленияФПД.Сторно
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДнейОтпуска,
	|	НачисленияФПД.Сторно КАК Сторно,
	|	НачисленияФПД.Регистратор.Дата КАК ДатаРегистрации,
	|	НачисленияФПД.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			(Сотрудник, ПериодДействия, ВидРасчета, Регистратор) В
	|				(ВЫБРАТЬ
	|					ОсновныеНачисления.Сотрудник,
	|					ОсновныеНачисления.ПериодДействия,
	|					ОсновныеНачисления.ВидРасчета,
	|					ОсновныеНачисления.Регистратор
	|				ИЗ
	|					ВТ_СотрудникиПериодыДействия КАК ОсновныеНачисления)) КАК НачисленияФПД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|		ПО (ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ НачисленияФПД.ПериодДействияНачало И НачисленияФПД.ПериодДействияКонец)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияФПД.Сотрудник,
	|	НачисленияФПД.ПериодДействияНачало,
	|	НачисленияФПД.ПериодДействияКонец,
	|	НачисленияФПД.Сторно,
	|	НачисленияФПД.ВидРасчета.ВидЕжегодногоОтпуска,
	|	НачисленияФПД.Регистратор.Дата,
	|	НачисленияФПД.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыНакопления.ФактическиеОтпускаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписей.Прочитать();
	Пока Выборка.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период					= Выборка.ПериодДействияНачало;

		// Измерения
		Движение.Сотрудник				= Выборка.Сотрудник;
		Движение.ВидЕжегодногоОтпуска	= Выборка.ВидЕжегодногоОтпуска;

		// Ресурсы
		Движение.Количество				= Выборка.ДнейОтпуска;

		// Реквизиты
		Движение.ДатаОкончания			= Выборка.ПериодДействияКонец;
		Движение.ДатаРегистрации		= Выборка.ДатаРегистрации;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, Замещение, ТолькоЗапись)
	
	Если ОбменДанными.Загрузка Тогда
        Возврат;
    КонецЕсли;
		
	Для Каждого СтрокаНабора Из ЭтотОбъект Цикл
		Если СтрокаНабора.ДатаНачалаСобытия = '00010101' Тогда
			СтрокаНабора.ДатаНачалаСобытия = СтрокаНабора.ПериодДействияНачало;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ мВыполнятьВспомогательныеРасчеты Тогда
        Возврат;
    КонецЕсли;
	
	ТаблицаДвижений = ЭтотОбъект.Выгрузить(,"Сотрудник, ПериодДействия");
	ТаблицаДвижений.Свернуть("Сотрудник, ПериодДействия");
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// сотрудники и периоды которые будут записаны
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДвижений.Сотрудник КАК Сотрудник,
	|	ТаблицаДвижений.ПериодДействия КАК ПериодДействия
	|ПОМЕСТИТЬ ВТ_СотрудникиПериодыТаблицаДвижений
	|ИЗ
	|	&ТаблицаДвижений КАК ТаблицаДвижений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия";
	Запрос.УстановитьПараметр("ТаблицаДвижений", ТаблицаДвижений);
	Запрос.Выполнить();
	
	// сотрудники и периоды из существующих движений по регистратору, которые будут очищены 
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	ОсновныеНачисления.ПериодДействия КАК ПериодДействия
	|ПОМЕСТИТЬ ВТ_СотрудникиПериодыРегистратор
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	ОсновныеНачисления.Регистратор = &Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия";
	Регистратор = Отбор.Регистратор.Значение;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Выполнить();
	
	// сотрудники и периоды которых нет в новых движениях, по ним необходимо зарегистрировать доначисления
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	ОсновныеНачисления.ПериодДействия КАК ПериодДействия
	|ПОМЕСТИТЬ ВТ_СотрудникиПериодыДействия
	|ИЗ
	|	ВТ_СотрудникиПериодыРегистратор КАК ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СотрудникиПериодыТаблицаДвижений КАК ВТСотрудникиПериоды
	|		ПО (ВТСотрудникиПериоды.Сотрудник = ОсновныеНачисления.Сотрудник)
	|			И (ВТСотрудникиПериоды.ПериодДействия = ОсновныеНачисления.ПериодДействия)
	|ГДЕ
	|	ВТСотрудникиПериоды.Сотрудник ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия";
	Запрос.Выполнить();
	
	// виды расчетов регистрирующие отработанное время
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
	|ПОМЕСТИТЬ ВТ_СписокВР
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.ЗачетНормыВремени
	|	И (НЕ ОсновныеНачисленияОрганизаций.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияФПД.Сотрудник КАК Сотрудник,
	|	НачисленияФПД.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	НачисленияФПД.ПериодДействия КАК ПериодДействия,
	|	НачисленияФПД.ПериодРегистрации КАК ПериодРегистрации,
	|	НачисленияФПД.ПериодДействияНачало КАК ПериодДействияНачало,
	|	НачисленияФПД.ПериодДействияКонец КАК ПериодДействияКонец,
	|	НачисленияФПД.Сторно,
	|	НачисленияФПД.ВидРасчета,
	|	НачисленияФПД.Регистратор
	|ПОМЕСТИТЬ ВТ_НачисленияФПД
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			Регистратор <> &Регистратор
	|				И ВидРасчета В
	|					(ВЫБРАТЬ
	|						СписокВР.ВидРасчета
	|					ИЗ
	|						ВТ_СписокВР КАК СписокВР)
	|				И (Сотрудник, ПериодДействия) В
	|					(ВЫБРАТЬ
	|						ОсновныеНачисления.Сотрудник,
	|						ОсновныеНачисления.ПериодДействия
	|					ИЗ
	|						ВТ_СотрудникиПериодыДействия КАК ОсновныеНачисления)) КАК НачисленияФПД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияСторно.Сотрудник КАК Сотрудник,
	|	НачисленияСторно.ОбособленноеПодразделение КАК Организация,
	|	НачисленияСторно.ПериодДействия КАК ПериодДействия,
	|	НачисленияСторно.ПериодРегистрации КАК ПериодРегистрации,
	|	НачисленияСторно.ПериодДействияНачало КАК ДатаНачала,
	|	НачисленияСторно.ПериодДействияКонец КАК ДатаОкончания,
	|	Начисления.ПериодРегистрации КАК ПериодРегистрацииПогашения,
	|	Начисления.ПериодДействияНачало КАК ДатаНачалаПогашения,
	|	Начисления.ПериодДействияКонец КАК ДатаОкончанияПогашения
	|ИЗ
	|	ВТ_НачисленияФПД КАК НачисленияСторно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СотрудникиПериодыРегистратор КАК СотрудникПериод
	|		ПО (СотрудникПериод.Сотрудник = НачисленияСторно.Сотрудник)
	|			И (СотрудникПериод.ПериодДействия = НачисленияСторно.ПериодДействия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НачисленияФПД КАК Начисления
	|		ПО НачисленияСторно.Сотрудник = Начисления.Сотрудник
	|			И ((НЕ Начисления.Сторно))
	|			И НачисленияСторно.ПериодРегистрации <= Начисления.ПериодРегистрации
	|			И НачисленияСторно.ПериодДействия = Начисления.ПериодДействия
	|			И НачисленияСторно.ПериодДействияНачало < Начисления.ПериодДействияКонец
	|			И НачисленияСторно.ПериодДействияКонец > Начисления.ПериодДействияНачало
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ПериодДействия";
	
	РасчетПериодаДоначисления(Запрос.Выполнить().Выбрать());
	
	Если НеВыполнятьРасчетПериодаНачисленияСотрудника() Тогда
		Возврат;
    КонецЕсли;

	Запрос.Текст =  
    "ВЫБРАТЬ
    |	ОсновныеНачисленияФПД.Регистратор КАК Регистратор,
    |	ПРЕДСТАВЛЕНИЕ(ОсновныеНачисленияФПД.Регистратор) КАК РегистраторПредставление,
    |	ОсновныеНачисленияФПД.Сотрудник КАК Сотрудник,
    |	ОсновныеНачисленияФПД.Сотрудник.Наименование КАК СотрудникНаименование,
    |	ЕСТЬNULL(СотрудникПериод.ОбособленноеПодразделение, ОсновныеНачисленияФПД.ОбособленноеПодразделение) КАК Организация,
    |	ОсновныеНачисленияФПД.ПериодДействия КАК ПериодДействия,
    |	ОсновныеНачисленияФПД.ВидРасчета.Наименование КАК ВидРасчета,
    |	ОсновныеНачисленияФПД.ПериодРегистрации КАК ПериодРегистрации,
    |	ОсновныеНачисленияФПД.Сторно КАК Сторно,
    |	ОсновныеНачисленияФПД.ПериодДействияНачало,
    |	ОсновныеНачисленияФПД.ПериодДействияКонец
    |ИЗ
    |	ВТ_НачисленияФПД КАК ОсновныеНачисленияФПД
    |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
    |			ОсновныеНачисления.Сотрудник КАК Сотрудник,
    |			ОсновныеНачисления.ПериодДействия КАК ПериодДействия,
    |			ОсновныеНачисления.ОбособленноеПодразделение КАК ОбособленноеПодразделение
    |		ИЗ
    |			РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
    |		ГДЕ
    |			ОсновныеНачисления.Регистратор = &Регистратор) КАК СотрудникПериод
    |		ПО (СотрудникПериод.Сотрудник = ОсновныеНачисленияФПД.Сотрудник)
    |			И (СотрудникПериод.ПериодДействия = ОсновныеНачисленияФПД.ПериодДействия)
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	СотрудникПериод.Регистратор,
    |	ПРЕДСТАВЛЕНИЕ(СотрудникПериод.Регистратор),
    |	СотрудникПериод.Сотрудник,
    |	СотрудникПериод.Сотрудник.Наименование,
    |	СотрудникПериод.ОбособленноеПодразделение,
    |	СотрудникПериод.ПериодДействия,
    |	СотрудникПериод.ВидРасчета.Наименование,
    |	NULL,
    |	NULL,
    |	NULL,
    |	NULL
    |ИЗ
    |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
    |		ОсновныеНачисления.Регистратор КАК Регистратор,
    |		ОсновныеНачисления.Сотрудник КАК Сотрудник,
    |		ОсновныеНачисления.ПериодДействия КАК ПериодДействия,
    |		ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
    |		ОсновныеНачисления.ОбособленноеПодразделение КАК ОбособленноеПодразделение
    |	ИЗ
    |		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
    |	ГДЕ
    |		ОсновныеНачисления.Регистратор = &Регистратор) КАК СотрудникПериод
    |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НачисленияФПД КАК ОсновныеНачисленияФПД
    |		ПО СотрудникПериод.Сотрудник = ОсновныеНачисленияФПД.Сотрудник
    |			И СотрудникПериод.ПериодДействия = ОсновныеНачисленияФПД.ПериодДействия
    |ГДЕ
    |	ОсновныеНачисленияФПД.Сотрудник ЕСТЬ NULL 
    |
    |УПОРЯДОЧИТЬ ПО
    |	Сотрудник,
    |	ПериодДействия,
    |	ПериодРегистрации,
    |	Сторно УБЫВ";
        
    РасчетПериодаНачисления(Запрос.Выполнить().Выбрать(), Регистратор);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение, ТолькоЗапись)
	
	Если ОбменДанными.Загрузка или НЕ мВыполнятьВспомогательныеРасчеты Тогда
        Возврат;
    КонецЕсли;
	
	Если ЭтотОбъект.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если мВыполнятьСписаниеФактическогоОтпуска Тогда
		//vvv
		//СписатьФактическиеОтпуска();
		ОстаткиОтпусков.СписатьФактическиеОтпускаОсновнымиНачислениями(Отбор.Регистратор.Значение, ЭтотОбъект[0].Организация);
		//
	КонецЕсли;

	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	ОсновныеНачисления.ПериодДействия КАК ПериодДействия
	|ПОМЕСТИТЬ ВТ_СотрудникиПериодыДействия
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	ОсновныеНачисления.Регистратор = &Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия";
	Регистратор = Отбор.Регистратор.Значение;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
	|ПОМЕСТИТЬ ВТ_СписокВР
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.ЗачетНормыВремени
	|	И (НЕ ОсновныеНачисленияОрганизаций.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияФПД.Сотрудник КАК Сотрудник,
	|	НачисленияФПД.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	НачисленияФПД.ПериодДействия КАК ПериодДействия,
	|	НачисленияФПД.ПериодРегистрации КАК ПериодРегистрации,
	|	НачисленияФПД.ПериодДействияНачало КАК ПериодДействияНачало,
	|	НачисленияФПД.ПериодДействияКонец КАК ПериодДействияКонец,
	|	НачисленияФПД.Сторно,
	|	НачисленияФПД.ВидРасчета,
	|	НачисленияФПД.Регистратор
	|ПОМЕСТИТЬ ВТ_НачисленияФПД
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			ВидРасчета В
	|					(ВЫБРАТЬ
	|						СписокВР.ВидРасчета
	|					ИЗ
	|						ВТ_СписокВР КАК СписокВР)
	|				И (Сотрудник, ПериодДействия) В
	|					(ВЫБРАТЬ
	|						ОсновныеНачисления.Сотрудник,
	|						ОсновныеНачисления.ПериодДействия
	|					ИЗ
	|						ВТ_СотрудникиПериодыДействия КАК ОсновныеНачисления)) КАК НачисленияФПД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияСторно.Сотрудник КАК Сотрудник,
	|	НачисленияСторно.Сотрудник.Организация КАК Организация,
	|	НачисленияСторно.ПериодДействия КАК ПериодДействия,
	|	НачисленияСторно.ПериодРегистрации КАК ПериодРегистрации,
	|	НачисленияСторно.ПериодДействияНачало КАК ДатаНачала,
	|	НачисленияСторно.ПериодДействияКонец КАК ДатаОкончания,
	|	Начисления.ПериодРегистрации КАК ПериодРегистрацииПогашения,
	|	Начисления.ПериодДействияНачало КАК ДатаНачалаПогашения,
	|	Начисления.ПериодДействияКонец КАК ДатаОкончанияПогашения
	|ИЗ
	|	ВТ_НачисленияФПД КАК НачисленияСторно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СотрудникиПериодыДействия КАК СотрудникПериод
	|		ПО (СотрудникПериод.Сотрудник = НачисленияСторно.Сотрудник)
	|			И (СотрудникПериод.ПериодДействия = НачисленияСторно.ПериодДействия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НачисленияФПД КАК Начисления
	|		ПО НачисленияСторно.Сотрудник = Начисления.Сотрудник
	|			И ((НЕ Начисления.Сторно))
	|			И НачисленияСторно.ПериодРегистрации <= Начисления.ПериодРегистрации
	|			И НачисленияСторно.ПериодДействия = Начисления.ПериодДействия
	|			И (Начисления.ПериодДействияНачало < НачисленияСторно.ПериодДействияКонец)
	|			И (Начисления.ПериодДействияКонец > НачисленияСторно.ПериодДействияНачало)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ПериодДействия";
	
	РасчетПериодаДоначисления(Запрос.Выполнить().Выбрать());

	Если НеВыполнятьРасчетПериодаНачисленияСотрудника(Ложь) Тогда
        Возврат;
    КонецЕсли;
        
    Запрос.Текст =  
    "ВЫБРАТЬ
    |	ОсновныеНачисленияФПД.Регистратор КАК Регистратор,
    |	ПРЕДСТАВЛЕНИЕ(ОсновныеНачисленияФПД.Регистратор) КАК РегистраторПредставление,
    |	ОсновныеНачисленияФПД.Сотрудник КАК Сотрудник,
    |	ОсновныеНачисленияФПД.Сотрудник.Наименование КАК СотрудникНаименование,
    |	ЕСТЬNULL(СотрудникПериод.ОбособленноеПодразделение, ОсновныеНачисленияФПД.ОбособленноеПодразделение) КАК Организация,
    |	ОсновныеНачисленияФПД.ПериодДействия КАК ПериодДействия,
    |	ОсновныеНачисленияФПД.ВидРасчета.Наименование КАК ВидРасчета,
    |	ОсновныеНачисленияФПД.ПериодРегистрации КАК ПериодРегистрации,
    |	ОсновныеНачисленияФПД.Сторно КАК Сторно,
    |	ОсновныеНачисленияФПД.ПериодДействияНачало,
    |	ОсновныеНачисленияФПД.ПериодДействияКонец
    |ИЗ
    |	ВТ_НачисленияФПД КАК ОсновныеНачисленияФПД
    |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
    |			ОсновныеНачисления.Сотрудник КАК Сотрудник,
    |			ОсновныеНачисления.ПериодДействия КАК ПериодДействия,
    |			ОсновныеНачисления.ОбособленноеПодразделение КАК ОбособленноеПодразделение
    |		ИЗ
    |			РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
    |		ГДЕ
    |			ОсновныеНачисления.Регистратор = &Регистратор) КАК СотрудникПериод
    |		ПО (СотрудникПериод.Сотрудник = ОсновныеНачисленияФПД.Сотрудник)
    |			И (СотрудникПериод.ПериодДействия = ОсновныеНачисленияФПД.ПериодДействия)
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	СотрудникПериод.Регистратор,
    |	ПРЕДСТАВЛЕНИЕ(СотрудникПериод.Регистратор),
    |	СотрудникПериод.Сотрудник,
    |	СотрудникПериод.Сотрудник.Наименование,
    |	СотрудникПериод.ОбособленноеПодразделение,
    |	СотрудникПериод.ПериодДействия,
    |	СотрудникПериод.ВидРасчета.Наименование,
    |	NULL,
    |	NULL,
    |	NULL,
    |	NULL
    |ИЗ
    |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
    |		ОсновныеНачисления.Регистратор КАК Регистратор,
    |		ОсновныеНачисления.Сотрудник КАК Сотрудник,
    |		ОсновныеНачисления.ПериодДействия КАК ПериодДействия,
    |		ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
    |		ОсновныеНачисления.ОбособленноеПодразделение КАК ОбособленноеПодразделение
    |	ИЗ
    |		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
    |	ГДЕ
    |		ОсновныеНачисления.Регистратор = &Регистратор) КАК СотрудникПериод
    |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НачисленияФПД КАК ОсновныеНачисленияФПД
    |		ПО СотрудникПериод.Сотрудник = ОсновныеНачисленияФПД.Сотрудник
    |			И СотрудникПериод.ПериодДействия = ОсновныеНачисленияФПД.ПериодДействия
    |ГДЕ
    |	ОсновныеНачисленияФПД.Сотрудник ЕСТЬ NULL 
    |
    |УПОРЯДОЧИТЬ ПО
    |	Сотрудник,
    |	ПериодДействия,
    |	ПериодРегистрации,
    |	Сторно УБЫВ";
            
    РасчетПериодаНачисления(Запрос.Выполнить().Выбрать(), Регистратор);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВыполнятьВспомогательныеРасчеты 			= Ложь;
мВыполнятьСписаниеФактическогоОтпуска		= Ложь;


Перем мМонопольныйРежимПередЗаписью;

Перем мТипУдалениеДанных;
Перем мЭтоНовыйЭлемент;
Перем мТаблицаОрганизацийДляВыгрузкиПередЗаписью;

Перем мИнформацияОНаличиеОрганизацииВРегистре;
Перем мИнформацияОБазовыхТипах;

Перем мКоличествоОрганизацийВУзле;


Перем мСтарыйТипОбъектаОтправки;
Перем мИмяСтарогоБазовогоТипа;

Перем мСоотвествиеОрганизацийИУзлов;

Перем пСправочникОбъектИсточникиИнформации;
Перем пСправочникОбъектВакансии;
Перем пСправочникСсылкаВакансии;
Перем пСправочникОбъектХранилищеДополнительнойИнформации;
Перем пСправочникСсылкаПодразделенияОрганизаций;
Перем пСправочникСсылкаЗаявкиКандидатов;
Перем пСправочникСсылкаКомпетенцииРаботников;
Перем пСправочникСсылкаГрафикиРаботы;
Перем пСправочникСсылкаФизическиеЛица;

Перем пСправочникСсылкаТерритории;

Перем мТипРегистрНакопленияФактическиеОтпускаОрганизаций;
//vvv
Перем мТипРегистрНакопленияОтпускаПоТрудовымДоговорам;
//
Перем мТипСправочникСсылкаСотрудникиОрганизаций;

Перем мТипСведеинйНаборЗаписейРегистрНакопленияЗанятыеШтатныеЕдиницыОрганизаций;
Перем мТипРегистрСведенийНаборЗаписейЗаписиОСтажеДляСЗВ4;
Перем мТипРегистрСведенийНаборЗаписейСуммыВзносовДляСЗВ4;
Перем мТипСведенийНаборЗаписейОтветственныеЛицаОрганизаций;
Перем мТипСведенийНаборЗаписейГрафикиРаботыПоВидамВремени;
Перем мТипРегистрСведенийНаборЗаписейОбъектыДоступаДокументов;
Перем мТипРегистрСведенийНаборЗаписейЗаполнениеПлановыхНачислений;
Перем мТипСведенийНаборЗаписейШтатноеРасписаниеОрганизаций;
Перем мТипРегистрСведенийНаборЗаписейПротоколыОбменаСБанком;
Перем мТипРегистрСведенийНаборЗаписейСводныеИндивидуальныеГрафики;
Перем мТипРегистрСведенийНаборЗаписейПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы;

Перем мТипСправочникСсылкаОрганизации;

Функция СообщитьИнформациюПользователюПослеСозданияНовогоУзла() Экспорт
	
	НужноПерезапуститьВсеПодключенияКИБ = Ложь;
	
	Если мЭтоНовыйЭлемент 
		И НЕ ПараметрыСеанса.ИспользованиеРИБ
		И НЕ мМонопольныйРежимПередЗаписью Тогда
		
		НужноПерезапуститьВсеПодключенияКИБ = Истина;
		
	КонецЕсли;	
	
	ЕстьОтличияВТабличнойЧасти = ОпределитьЕстьОтличияВТабличнойЧасти();
	Если ЕстьОтличияВТабличнойЧасти Тогда
		НужноПерезапуститьВсеПодключенияКИБ = Истина;
	КонецЕсли;
	
	Если НужноПерезапуститьВсеПодключенияКИБ Тогда
		
		Если мМонопольныйРежимПередЗаписью Тогда
			
			ПолныеПрава.ОпределитьФактИспользованияРИБ();
			Возврат "";
			
		Иначе	
			
			Возврат "Для корректной работы механизма обмена данными необходимо завершить работу всех пользователей и перезапустить текущий сеанс работы 1С:Предприятия.";	
			
		КонецЕсли;
		
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ОпределитьЕстьОтличияВТабличнойЧасти()
	
	Если мТаблицаОрганизацийДляВыгрузкиПередЗаписью = Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если Организации.Количество() <> мТаблицаОрганизацийДляВыгрузкиПередЗаписью.Количество() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Для Номер = 0 По Организации.Количество() - 1 Цикл
		
		Если Организации[Номер].Организация <> мТаблицаОрганизацийДляВыгрузкиПередЗаписью[Номер].Организация Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПередЗаписью(Отказ)
	
	мЭтоНовыйЭлемент = ЭтоНовый();
	
	мМонопольныйРежимПередЗаписью = ОбщегоНазначения.ОпределитьТекущийРежимРаботыМонопольный();
	
	Если Не мЭтоНовыйЭлемент Тогда
		
		мТаблицаОрганизацийДляВыгрузкиПередЗаписью = Ссылка.Организации.Выгрузить();
		
	Иначе
		
		мТаблицаОрганизацийДляВыгрузкиПередЗаписью = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	СтрокаСообщенияПользователю = СообщитьИнформациюПользователюПослеСозданияНовогоУзла();
	ОбщегоНазначения.СообщитьИнформациюПользователю(СтрокаСообщенияПользователю);
	
КонецПроцедуры

Процедура УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, ИмяРеквизита, 
	ТипРеквизита = Неопределено, ИмяБазовогоТипа = "Справочники")
	
	// режем по организации
	ТекущийРеквизит = Неопределено;
	ТекущееРешение = Ложь;
	
	Позиция = ЭлементДанных.Количество() - 1;
	
	Пока Позиция >= 0 Цикл
		
		СтрокаНабора = ЭлементДанных[Позиция];
		
		Если СтрокаНабора[ИмяРеквизита] <> ТекущийРеквизит Тогда
			
			ТекущийРеквизит = СтрокаНабора[ИмяРеквизита];
			
			Если ИмяБазовогоТипа = "Справочники" Тогда
				
				МассивУзловДляПереноса = ПроцедурыОбменаДаннымиПоОрганизации.ОпределениеУзловДляВыгрузкиСправочника(ТекущийРеквизит, 
				ТипРеквизита, , , мСоотвествиеОрганизацийИУзлов);
				
			ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
				
				МассивУзловДляПереноса = ПроцедурыОбменаДаннымиПоОрганизации.ОпределениеУзловДляВыгрузкиДокумента(ТекущийРеквизит, 
				ТипРеквизита, , , мСоотвествиеОрганизацийИУзлов);	
				
			КонецЕсли;
			
			ТекущееРешение = (МассивУзловДляПереноса.Найти(Ссылка) <> Неопределено); 
			
		КонецЕсли;
		
		Если НЕ ТекущееРешение Тогда
			ЭлементДанных.Удалить(Позиция);
		КонецЕсли;
		
		Позиция = Позиция - 1;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура УбратьИзРегистраДанныеНеНужныеДляПереносаПоОрганизации(ЭлементДанных)
	
	// режем по организации
	ТекущаяОрганизация = Неопределено;
	ТекущееРешение = Ложь;
	
	Позиция = ЭлементДанных.Количество() - 1;
	
	Пока Позиция >= 0 Цикл
		
		СтрокаНабора = ЭлементДанных[Позиция];
		Если СтрокаНабора.Организация <> ТекущаяОрганизация Тогда
			
			ТекущаяОрганизация = СтрокаНабора.Организация;
			Если НЕ ТекущаяОрганизация.ГоловнаяОрганизация.Пустая() Тогда
				ТекущаяОрганизация = ТекущаяОрганизация.ГоловнаяОрганизация;
			КонецЕсли;
			ТекущееРешение = (ЭтотОбъект.Организации.Найти(ТекущаяОрганизация, "Организация") <> Неопределено); 
			
		КонецЕсли;
		
		Если НЕ ТекущееРешение Тогда
			ЭлементДанных.Удалить(Позиция);
		КонецЕсли;
		
		Позиция = Позиция - 1;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьИмяБазовогоТипаПоТипуОбъекта(ТипОбъекта) Экспорт
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(ТипОбъекта);
	
	Если Метаданные.РегистрыСведений.Содержит(МетаданныеТипа) Тогда
		
		Возврат "РегистрыСведений";
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеТипа) Тогда
		
		Возврат "Документы";
		
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
		
		Возврат "Справочники";	
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(МетаданныеТипа) Тогда
		
		Возврат "РегистрыНакопления";	
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеТипа) Тогда
		
		Возврат "РегистрыБухгалтерии";	
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(МетаданныеТипа) Тогда
		
		Возврат "РегистрыРасчета";
		
	ИначеЕсли Метаданные.РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.Содержит(МетаданныеТипа)
		Или Метаданные.РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.Содержит(МетаданныеТипа)
		Или Метаданные.РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.Содержит(МетаданныеТипа) Тогда
		Возврат "Перерасчеты";
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента)
	
	ТипОбъекта = ТипЗнч(ЭлементДанных);
	
	Если ТипОбъекта = мТипУдалениеДанных Тогда
		// удаление объекта просто отсылаем как есть
		Возврат;
	КонецЕсли;
	
	Если мСоотвествиеОрганизацийИУзлов = Неопределено Тогда
		мСоотвествиеОрганизацийИУзлов = ПроцедурыОбменаДаннымиПоОрганизации.ПолучитьСоотвествиеУзловИОрганизаций();
	КонецЕсли;
	
	Если мСтарыйТипОбъектаОтправки = ТипОбъекта Тогда
		ИмяБазовогоТипа = мИмяСтарогоБазовогоТипа;
	Иначе	
		
		ИмяБазовогоТипа = мИнформацияОБазовыхТипах.Получить(ТипОбъекта);
		
		Если ИмяБазовогоТипа = Неопределено Тогда
			ИмяБазовогоТипа = ПолучитьИмяБазовогоТипаПоТипуОбъекта(ТипОбъекта);
			мИнформацияОБазовыхТипах.Вставить(ТипОбъекта, ИмяБазовогоТипа);
		КонецЕсли;
		
		мИмяСтарогоБазовогоТипа = ИмяБазовогоТипа;
		мСтарыйТипОбъектаОтправки = ТипОбъекта;
		
	КонецЕсли;
	
	Если ИмяБазовогоТипа = "Справочники"
		ИЛИ ИмяБазовогоТипа = "Документы" Тогда
		
		ВыгружатьДляВсехУзлов = Ложь;
		Если ИмяБазовогоТипа = "Справочники" 
			И (
			ТипОбъекта = пСправочникОбъектИсточникиИнформации 
			ИЛИ ТипОбъекта = пСправочникОбъектВакансии
			ИЛИ ПоОрганизацииПереопределяемый.ТипОбъектаСоответствуетДополнительномуТипу(ТипОбъекта))Тогда
			
			ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
			
		ИначеЕсли ТипОбъекта = пСправочникОбъектХранилищеДополнительнойИнформации Тогда
			ТипВладельца = ТипЗнч(ЭлементДанных.Объект);
			Если ТипВладельца = пСправочникСсылкаВакансии
				ИЛИ ТипВладельца = пСправочникСсылкаЗаявкиКандидатов
				ИЛИ ТипВладельца = пСправочникСсылкаКомпетенцииРаботников
				ИЛИ ПоОрганизацииПереопределяемый.ТипВладельцаСоответствуетДополнительномуТипу(ТипВладельца)
				Тогда
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
			КонецЕсли;
		Иначе
			
			Если ИмяБазовогоТипа = "Документы"
				И (ТипОбъекта = Тип("ДокументОбъект.АттестацияРаботника")
				ИЛИ ТипОбъекта = Тип("ДокументОбъект.ЗаявкаНаОбучение")
				ИЛИ ТипОбъекта = Тип("ДокументОбъект.Опрос")
				ИЛИ ТипОбъекта = Тип("ДокументОбъект.РассылкаАнкет")
				ИЛИ ПоОрганизацииПереопределяемый.ТипОбъектаСоответствуетДополнительномуТипу(ТипОбъекта)
				)Тогда
				
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
			КонецЕсли;
			МассивУзловДляПереноса = ПроцедурыОбменаДаннымиПоОрганизации.ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(ЭлементДанных, 
			ИмяБазовогоТипа, ТипОбъекта, , ВыгружатьДляВсехУзлов, Ложь, мСоотвествиеОрганизацийИУзлов);
			
			// если нужно для всех узлов выгружать - то ничего проверять не нужно
			Если ВыгружатьДляВсехУзлов Тогда
				Возврат;
			КонецЕсли;
			
			НомерВМассиве = МассивУзловДляПереноса.Найти(ЭтотОбъект.Ссылка);
			
			Если НомерВМассиве = Неопределено Тогда
				// передаем информацию об удалении
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;	
			КонецЕсли;		
			
		КонецЕсли;
		
	ИначеЕсли ИмяБазовогоТипа = "РегистрыСведений"
		ИЛИ ИмяБазовогоТипа = "Перерасчеты"
		ИЛИ ИмяБазовогоТипа = "РегистрыНакопления"
		ИЛИ ИмяБазовогоТипа = "РегистрыРасчета"
		ИЛИ ИмяБазовогоТипа = "РегистрыБухгалтерии" Тогда
		
		Если мКоличествоОрганизацийВУзле = Неопределено Тогда
			мКоличествоОрганизацийВУзле = ЭтотОбъект.Организации.Количество();
		КонецЕсли;
		
		Если мКоличествоОрганизацийВУзле = 0 Тогда
			мКоличествоОрганизацийВУзле = ПроцедурыУправленияПерсоналом.ПолучитьСписокГоловныхОрганизаций().Количество();
		КонецЕсли;
		
		Если мКоличествоОрганизацийВУзле = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// нужно вычистить те строки которые для которых нужная организация не переносится
		Если ИмяБазовогоТипа = "РегистрыСведений" Тогда
			
			Если ТипОбъекта = мТипРегистрСведенийНаборЗаписейЗаписиОСтажеДляСЗВ4
				ИЛИ ТипОбъекта = мТипРегистрСведенийНаборЗаписейСуммыВзносовДляСЗВ4 Тогда
				
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "ОбособленноеПодразделение", мТипСправочникСсылкаОрганизации);	
			ИначеЕсли ТипОбъекта = мТипРегистрСведенийНаборЗаписейПротоколыОбменаСБанком Тогда
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "Документ", , "Документы");			
			ИначеЕсли ТипОбъекта = мТипРегистрСведенийНаборЗаписейПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы Тогда
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "Регистратор", , "Документы");			
			ИначеЕсли ТипОбъекта = мТипСведенийНаборЗаписейОтветственныеЛицаОрганизаций Тогда
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "СтруктурнаяЕдиница", мТипСправочникСсылкаОрганизации);	
			ИначеЕсли ТипОбъекта = мТипСведенийНаборЗаписейШтатноеРасписаниеОрганизаций Тогда
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "ПодразделениеОрганизации", пСправочникСсылкаПодразделенияОрганизаций);	
			ИначеЕсли ТипОбъекта = мТипРегистрСведенийНаборЗаписейСводныеИндивидуальныеГрафики Тогда
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "Сотрудник", мТипСправочникСсылкаСотрудникиОрганизаций);	
			ИначеЕсли ТипОбъекта = мТипСведенийНаборЗаписейГрафикиРаботыПоВидамВремени Тогда		
				Если ТипЗнч(ЭлементДанных.Отбор.ГрафикРаботы.Значение) = мТипСправочникСсылкаСотрудникиОрганизаций Тогда
					УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "ГрафикРаботы", мТипСправочникСсылкаСотрудникиОрганизаций);	
				ИначеЕсли ТипЗнч(ЭлементДанных.Отбор.ГрафикРаботы.Значение) = пСправочникСсылкаФизическиеЛица Тогда	
					ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
				КонецЕсли;
				
			ИначеЕсли ПоОрганизацииПереопределяемый.ТипОбъектаСоответствуетДополнительномуТипу(ТипОбъекта) Тогда
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "Ведомость", , "Документы"); 
			ИначеЕсли ТипОбъекта = мТипРегистрСведенийНаборЗаписейОбъектыДоступаДокументов Тогда
				Если ТипЗнч(ЭлементДанных.Отбор.ОбъектДоступа.Значение) = мТипСправочникСсылкаСотрудникиОрганизаций Тогда
					УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "ОбъектДоступа", мТипСправочникСсылкаСотрудникиОрганизаций);
				ИначеЕсли ТипЗнч(ЭлементДанных.Отбор.ОбъектДоступа.Значение) = мТипСправочникСсылкаОрганизации Тогда
					УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "ОбъектДоступа", мТипСправочникСсылкаОрганизации);
				Иначе
					ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать
				КонецЕсли;
			ИначеЕсли ТипОбъекта = мТипРегистрСведенийНаборЗаписейЗаполнениеПлановыхНачислений Тогда
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "ОбъектЗаполнения", ,"Документы");	
				
			Иначе
				
				НаличиеОрганизации = мИнформацияОНаличиеОрганизацииВРегистре.Получить(ТипОбъекта);
				
				Если НаличиеОрганизации = Неопределено Тогда
					МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);					
					НаличиеОрганизации = (МетаданныеОбъекта.Измерения.Найти("Организация") <> Неопределено);
					мИнформацияОНаличиеОрганизацииВРегистре.Вставить(ТипОбъекта, НаличиеОрганизации);
				КонецЕсли;
				
				Если НаличиеОрганизации Тогда
					УбратьИзРегистраДанныеНеНужныеДляПереносаПоОрганизации(ЭлементДанных);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяБазовогоТипа = "РегистрыНакопления"
			ИЛИ ИмяБазовогоТипа = "Перерасчеты" 
			ИЛИ ИмяБазовогоТипа = "РегистрыРасчета" 
			ИЛИ ИмяБазовогоТипа = "РегистрыБухгалтерии" Тогда
			
			Если ТипОбъекта = мТипРегистрНакопленияФактическиеОтпускаОрганизаций Тогда
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "Сотрудник", мТипСправочникСсылкаСотрудникиОрганизаций);
			//vvv	
			ИначеЕсли ТипОбъекта = мТипРегистрНакопленияОтпускаПоТрудовымДоговорам Тогда
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "Сотрудник", мТипСправочникСсылкаСотрудникиОрганизаций);
			//	
				
			ИначеЕсли ТипОбъекта = мТипСведеинйНаборЗаписейРегистрНакопленияЗанятыеШтатныеЕдиницыОрганизаций Тогда
				
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "ПодразделениеОрганизации", пСправочникСсылкаПодразделенияОрганизаций, "Справочники"); 
			ИначеЕсли ИмяБазовогоТипа = "Перерасчеты" Тогда	
				//Сообщить(ЭлементДанных);
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоОрганизации(ЭлементДанных);
			Иначе
				//Сообщить(ЭлементДанных);
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоОрганизации(ЭлементДанных);
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры


мТипУдалениеДанных = Тип("УдалениеОбъекта");
мИнформацияОНаличиеОрганизацииВРегистре = Новый Соответствие;
мИнформацияОБазовыхТипах = Новый Соответствие;
мСтарыйТипОбъектаОтправки = Неопределено;
мСоотвествиеОрганизацийИУзлов = Неопределено;

мТипСправочникСсылкаСотрудникиОрганизаций = Тип("СправочникСсылка.СотрудникиОрганизаций");
пСправочникСсылкаПодразделенияОрганизаций = Тип("СправочникСсылка.ПодразделенияОрганизаций");
пСправочникОбъектИсточникиИнформации = Тип("СправочникОбъект.ИсточникиИнформации");
пСправочникОбъектВакансии = Тип("СправочникОбъект.Вакансии");
пСправочникСсылкаВакансии = Тип("СправочникСсылка.Вакансии");
пСправочникСсылкаЗаявкиКандидатов = Тип("СправочникСсылка.ЗаявкиКандидатов");
пСправочникСсылкаКомпетенцииРаботников = Тип("СправочникСсылка.КомпетенцииРаботников");

пСправочникСсылкаФизическиеЛица = Тип("СправочникСсылка.ФизическиеЛица");
пСправочникСсылкаГрафикиРаботы = Тип("СправочникСсылка.ГрафикиРаботы");

пСправочникОбъектХранилищеДополнительнойИнформации = Тип("СправочникОбъект.ХранилищеДополнительнойИнформации");
//vvv
мТипРегистрНакопленияОтпускаПоТрудовымДоговорам = Тип("РегистрНакопленияНаборЗаписей.ОтпускаПоТрудовымДоговорам");
//
мТипРегистрНакопленияФактическиеОтпускаОрганизаций = Тип("РегистрНакопленияНаборЗаписей.ФактическиеОтпускаОрганизаций");

мТипРегистрСведенийНаборЗаписейЗаписиОСтажеДляСЗВ4 = Тип("РегистрСведенийНаборЗаписей.ЗаписиОСтажеДляСЗВ4");
мТипРегистрСведенийНаборЗаписейСуммыВзносовДляСЗВ4 = Тип("РегистрСведенийНаборЗаписей.СуммыВзносовДляСЗВ4");
мТипСведеинйНаборЗаписейРегистрНакопленияЗанятыеШтатныеЕдиницыОрганизаций = Тип("РегистрНакопленияНаборЗаписей.ЗанятыеШтатныеЕдиницыОрганизаций");
мТипСведенийНаборЗаписейОтветственныеЛицаОрганизаций = Тип("РегистрСведенийНаборЗаписей.ОтветственныеЛицаОрганизаций");
мТипСведенийНаборЗаписейГрафикиРаботыПоВидамВремени = Тип("РегистрСведенийНаборЗаписей.ГрафикиРаботыПоВидамВремени");
мТипРегистрСведенийНаборЗаписейОбъектыДоступаДокументов = Тип("РегистрСведенийНаборЗаписей.ОбъектыДоступаДокументов");
мТипРегистрСведенийНаборЗаписейЗаполнениеПлановыхНачислений = Тип("РегистрСведенийНаборЗаписей.ЗаполнениеПлановыхНачислений");
мТипСведенийНаборЗаписейШтатноеРасписаниеОрганизаций = Тип("РегистрСведенийНаборЗаписей.ШтатноеРасписаниеОрганизаций");
мТипРегистрСведенийНаборЗаписейПротоколыОбменаСБанком = Тип("РегистрСведенийНаборЗаписей.ПротоколыОбменаСБанком");
мТипРегистрСведенийНаборЗаписейСводныеИндивидуальныеГрафики = Тип("РегистрСведенийНаборЗаписей.СводныеИндивидуальныеГрафики");
мТипРегистрСведенийНаборЗаписейПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы = Тип("РегистрСведенийНаборЗаписей.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы");

мТипСправочникСсылкаОрганизации = Тип("СправочникСсылка.Организации");



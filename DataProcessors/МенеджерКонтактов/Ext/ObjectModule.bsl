
// КАЛЕНДАРЬ

Перем мСписокКлючейСтруктурыСобытий Экспорт;

// Список представлений отборов
Перем мСтруктураПредставленийОтборов Экспорт;

// Список отборов
Перем мСписокОтборов Экспорт;

// ПОЧТА

Перем мПоследняяДатаОбновленияРассмотренностиПисем Экспорт;

// Переменная содержит список доступных учетных для создания писем
Перем мДоступныеУчетныеЗаписи Экспорт;

// Переменная содержит структуру с данными о доступе пользователя к ученым записям
// и о предопределенных папках учетных записей
Перем мСтруктураДоступныхУчетныхЗаписей Экспорт;

// Переменная содержит соответствие учетной записи и предопределенной
// группы писем "Входящие" для учетной записи
Перем мСоответствияГруппВходящие Экспорт;

// Переменная содержит соответствие учетной записи и предопределенной
// группы писем "Исходящие" для учетной записи
Перем мСоответствияГруппИсходящие Экспорт;

// Переменная содержит соответствие учетной записи и предопределенной
// группы писем "Удаленные" для учетной записи
Перем мСоответствияГруппУдаленные Экспорт;

// Переменная содержит соответствие учетной записи и предопределенной
// группы писем "Черновики" для учетной записи
Перем мСоответствияГруппЧерновики Экспорт;

// Переменная содержит соответствие учетной записи и предопределенной
// группы писем "Нежелательные" для учетной записи
Перем мСоответствияГруппНежелательные Экспорт;

// Переменная содержит соответствие группы писем электронной почты
// и количества нерассмотренных писем в этой группе
Перем мСтатистикаРассмотренностиПисем Экспорт;

// Переменная содержит соответствие группы писем электронной почты
// и количества нерассмотренных писем в этой группе
Перем мСтатистикаСохраненныхПисем Экспорт;

// Переменная содержит соответствие предмета классификации писем
// и количества нерассмотренных писем данного предмета
Перем мСтатистикаРассмотренностиПисемПоПредметам Экспорт;

// Признак отображения списка предметов электронных писем в форме
Перем мОтображатьСписокПредметов Экспорт;

// Признак отображение рассмотренности писем только по текущему пользователю
Перем мОтображатьРассмотренностиПисемТолькоПоТекущемуПользователю Экспорт;

// Переменные, используемые при создании физлица по переписке
Перем Фамилия;
Перем Имя;
Перем Отчество;
Перем ДатаРождения;
Перем ИНН;
Перем СерияДокумента;
Перем ВидДокументаУдостоверяющегоЛичность;
Перем НомерДокумента;
Перем ДатаВыдачиДокумента;
Перем КемВыданДокумент;
Перем КодПодразделенияДокумента;
Перем Гражданство;
Перем СемейноеПоложение;
Перем ОтношениеКВоинскойОбязанности;
Перем ОтношениеКВоинскомуУчету;
Перем Состав;
Перем НомерКомандыПартии;
Перем СоответствиеНачалоИОкончениеРабочегоДняПользователя;

// КАЛЕНДАРЬ

// Функция определяет начало и окончание рабочего дня пользователя, по его графику работы
//
// Параметры
//  Пользователь - СправочникСсылка.Пользователи, пользователь по которому определяются
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция мОпределитьНачалоИОкончениеРабочегоДняПользователя(Пользователь, РабочаяДата) Экспорт
	
	НайденнаяСтруктура = СоответствиеНачалоИОкончениеРабочегоДняПользователя.Получить(РабочаяДата);
	Если НайденнаяСтруктура <> Неопределено Тогда
		Возврат НайденнаяСтруктура;
	КонецЕсли;
	
	СтруктураВозврата = УправлениеКонтактами.ОпределитьНачалоИОкончениеРабочегоДняПользователя(Пользователь, РабочаяДата);
	СоответствиеНачалоИОкончениеРабочегоДняПользователя.Вставить(РабочаяДата,СтруктураВозврата);
	
	Возврат СтруктураВозврата;
	
КонецФункции // УправлениеКонтактами.ОпределитьНачалоИОкончениеРабочегоДняПользователя()

// Функция возвращает Строку Вида отбора для запроса
// 
// Параметры
// ВидОтбора - ВидОтбора
// ЗначениеОтбора - Значение отбора запроса
// 
// Возвращаемое значение 
//  Строка для запроса
Функция ВозвратитьСтрокуВидаОтбора(ВидОтбора, ЗначениеОтбора)
	
	СтрокаВозврата = "";
	Если ВидОтбора = ВидСравнения.Равно Тогда
		СтрокаВозврата = Строка("= "+ЗначениеОтбора);
	ИначеЕсли ВидОтбора = ВидСравнения.НеРавно Тогда
		СтрокаВозврата = Строка("<> "+ЗначениеОтбора);
	ИначеЕсли ВидОтбора = ВидСравнения.ВСписке Тогда
		СтрокаВозврата = Строка("В ("+ЗначениеОтбора+")");
	ИначеЕсли ВидОтбора = ВидСравнения.НеВСписке Тогда
		СтрокаВозврата = Строка("НЕ В ("+ЗначениеОтбора+")");
	КонецЕсли;
	
	Возврат СтрокаВозврата;
	
КонецФункции // ВозвратитьСтрокуВидаОтбора()

// Процедура заполняет табличную часть обработки ЗаказыСобытия.
// 
// Параметры
//  НЕТ
// 
// Возвращаемое значение 
//  НЕТ
Процедура ЗаполнитьСобытия(ОтображатьЗаказы, ОтображаемыеЗаказы) Экспорт
	
	Перем Отбор;
	
	МассивТекстовЗапросов = Новый Массив;
	
	# Если Клиент Тогда
	
	Состояние("Выполняется заполнение событий списка ...");
	
	# КонецЕсли
	
	ОтборКонтактноеЛицо = СтруктураОтборов.Получить("КонтактноеЛицо");
	ОтборПользователь   = СтруктураОтборов.Получить("Пользователь");
	
	СтруктураЗапроса = Новый Структура;
	СтруктураПараметров = Новый Структура;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	СобытияКалендаряПользователяОбобщенные.Событие           КАК Документ,
	|	СобытияКалендаряПользователяОбобщенные.ВидСобытия        КАК ВидОперации,
	|	0                                                        КАК Законченность,
	|	&ПустаяВалюта                                            КАК ВалютаДокумента,
	|	0                                                        КАК КурсВзаиморасчетов,
	|	0                                                        КАК КратностьВзаиморасчетов,
	|	0                                                        КАК СуммаДокумента,
	|	СобытияКалендаряПользователяОбобщенные.СостояниеСобытия  КАК СостояниеСобытия,
	|	СобытияКалендаряПользователяОбобщенные.Важность          КАК Важность,
	|	СобытияКалендаряПользователяОбобщенные.ТипСобытия        КАК ТипСобытия,
	|	СобытияКалендаряПользователяОбобщенные.ОписаниеСобытия   КАК ОписаниеСобытия,
	|	СобытияКалендаряПользователяОбобщенные.КонтактноеЛицо    КАК КонтактноеЛицо,
	|	СобытияКалендаряПользователяОбобщенные.Дата              КАК Дата,
	|	СобытияКалендаряПользователяОбобщенные.ДатаНачалаСобытия КАК НачалоСобытия,
	|	""Событие""                                              КАК ПредставлениеДокумента,
	|	СобытияКалендаряПользователяОбобщенные.Событие.Номер     КАК Номер,
	|	NULL                                                     КАК ДатаПоступленияОтгрузки,
	|	NULL                                                     КАК ДатаОплаты,
	|	NULL                                                     КАК Склад,
	|	NULL                                                     КАК СтруктурнаяЕдиница,
	|	0                                                        КАК ИтогКоличествоТЧ
	|ИЗ
	|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователяОбобщенные
	|	
	|ГДЕ
	|
	|	СобытияКалендаряПользователяОбобщенные.СостояниеСобытия = &СостояниеЗапланировано
	|";
	
	Если ОтборКонтактноеЛицо <> Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И
		|	СобытияКалендаряПользователяОбобщенные.КонтактноеЛицо " + ВозвратитьСтрокуВидаОтбора(ОтборКонтактноеЛицо[0],"&ВыбКонтактноеЛицо") + "
		|";
		
		СтруктураПараметров.Вставить("ВыбКонтактноеЛицо",ОтборКонтактноеЛицо[1]);
		
	КонецЕсли;
	
	
	ТекстЗапроса = ТекстЗапроса + "
	|	И
	|	СобытияКалендаряПользователяОбобщенные.Пользователь В (&ТекПользователь)
	|	И
	|	(СобытияКалендаряПользователяОбобщенные.Событие.Дата >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И СобытияКалендаряПользователяОбобщенные.Событие.Дата <= &ДатаКон","") + ")
	|";
	
	СтруктураЗапроса.Вставить("ТекстЗапроса", ТекстЗапроса);
	СтруктураЗапроса.Вставить("ПараметрыЗапроса", СтруктураПараметров);
	МассивТекстовЗапросов.Добавить(СтруктураЗапроса);
	
	// Теперь выполним все запросы и запишем информацию в ТЧ
	
	ЗаказыСобытия.Очистить();
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекПользователь"              , ПользовательКалендаря);
	Запрос.УстановитьПараметр("ДатаНач"                      , НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон"                      , ?(ДатаКон <> '00010101000000', КонецДня(ДатаКон), ДатаКон));
	Запрос.УстановитьПараметр("ТекущаяДата"                  , ТекущаяДата());
	Запрос.УстановитьПараметр("СостояниеЗапланировано"       , Перечисления.СостоянияСобытий.Запланировано);
	Запрос.УстановитьПараметр("ПустаяВалюта"                 , Справочники.Валюты.ПустаяСсылка());
	
	ТекЗапрос = 0;
	ВсегоЗапросов = МассивТекстовЗапросов.Количество();
	
	Для каждого ЭлементМассива Из МассивТекстовЗапросов Цикл
		
		ТекЗапрос = ТекЗапрос + 1;
		# Если Клиент Тогда
		Состояние("Выполняется заполнение событий списка ...");
		# КонецЕсли
		
		ТекстЗапроса     = Неопределено;
		ПараметрыЗапроса = Неопределено;
		
		ЭлементМассива.Свойство("ТекстЗапроса"    , ТекстЗапроса);
		ЭлементМассива.Свойство("ПараметрыЗапроса", ПараметрыЗапроса);
		
		Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
			Продолжить;
		КонецЕсли; 
		
		Запрос.Текст = ТекстЗапроса;
		Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
			Для каждого ЭлементСтруктуры Из ПараметрыЗапроса Цикл
				Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			КонецЦикла; 
		КонецЕсли; 
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТЧ = ЗаказыСобытия.Добавить();
			
			СтрокаТЧ.Документ                       = Выборка.Документ;
			СтрокаТЧ.ВидОперации                    = Выборка.ВидОперации;
			СтрокаТЧ.Законченность                  = Выборка.Законченность;
			СтрокаТЧ.ВалютаДокумента                = Выборка.ВалютаДокумента;
			СтрокаТЧ.КурсВзаиморасчетов             = Выборка.КурсВзаиморасчетов;
			СтрокаТЧ.КратностьВзаиморасчетов        = Выборка.КратностьВзаиморасчетов;
			СтрокаТЧ.СуммаДокумента                 = Выборка.СуммаДокумента;
			СтрокаТЧ.СостояниеСобытия               = Выборка.СостояниеСобытия;
			СтрокаТЧ.Важность                       = Выборка.Важность;
			СтрокаТЧ.ТипСобытия                     = Выборка.ТипСобытия;
			СтрокаТЧ.ОписаниеСобытия                = Выборка.ОписаниеСобытия;
			СтрокаТЧ.Дата                           = Выборка.Дата;
			СтрокаТЧ.НачалоСобытия                  = Выборка.НачалоСобытия;
			СтрокаТЧ.ПредставлениеДокумента         = Выборка.ПредставлениеДокумента;
			СтрокаТЧ.Номер                          = Выборка.Номер;
			СтрокаТЧ.ДатаПоступленияОтгрузки        = Выборка.ДатаПоступленияОтгрузки;
			СтрокаТЧ.ДатаОплаты                     = Выборка.ДатаОплаты;
			СтрокаТЧ.Склад                          = Выборка.Склад;
			СтрокаТЧ.СтруктурнаяЕдиница             = Выборка.СтруктурнаяЕдиница;
			СтрокаТЧ.ИтогКоличествоТЧ               = Выборка.ИтогКоличествоТЧ;
			
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура заполняет табличную часть обработки ДанныеМесяца.
// 
// Параметры
//  ОтображатьЗапланированныеСобытия  - булево, отображать запланированные события или все
//  ТипСобытияКалендаря - тип событий, которые надо отображать
// 
// Возвращаемое значение 
//  НЕТ
Процедура СобратьДокументыМесяца(ОтображатьЗапланированныеСобытия = Ложь, ТипСобытияКалендаря, ОтображатьЗаказы, ОтображаемыеЗаказы) Экспорт
	
	# Если Клиент Тогда
	Состояние("Выполняется заполнение документов месяца ...");
	# КонецЕсли
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "";
	
	Запрос.Текст = Запрос.Текст + "
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	СобытияКалендаряПользователяОбобщенные.Событие            КАК Документ,
	|	СобытияКалендаряПользователяОбобщенные.ДатаНачалаСобытия  КАК Дата,
	|	СобытияКалендаряПользователяОбобщенные.ДатаНачалаСобытия  КАК ДатаНачалаСобытия,
	|	СобытияКалендаряПользователяОбобщенные.ДатаКонцаСобытия   КАК ДатаКонцаСобытия,
	|	СобытияКалендаряПользователяОбобщенные.КонтактноеЛицо     КАК КонтактноеЛицо
	|ИЗ
	|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователяОбобщенные
	|	
	|ГДЕ
	|
	|	СобытияКалендаряПользователяОбобщенные.Пользователь в (&ТекПользователь)
	|	И
	|	СобытияКалендаряПользователяОбобщенные.ДатаНачалаСобытия <= &ДатаКон
	|	И
	|	СобытияКалендаряПользователяОбобщенные.ДатаНачалаСобытия >= &ДатаНач
	|";
	
	Если ОтображатьЗапланированныеСобытия Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И
		|	СобытияКалендаряПользователяОбобщенные.СостояниеСобытия = &ВыбСостояние
		|";
		
		Запрос.УстановитьПараметр("ВыбСостояние", Перечисления.СостоянияСобытий.Запланировано);
		
	КонецЕсли;
	
	Если НЕ ТипСобытияКалендаря.Пустая() Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И
		|	СобытияКалендаряПользователяОбобщенные.ТипСобытия = &ВыбТипСобытия
		|";
		
		Запрос.УстановитьПараметр("ВыбТипСобытия", ТипСобытияКалендаря);
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ТекущаяДата"               , ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяДата"                , '00010101000000');
	Запрос.УстановитьПараметр("ТекПользователь"           , ПользовательКалендаря);
	Запрос.УстановитьПараметр("ДатаКон"                   , КонецНедели(КонецМесяца(ДатаКалендаря)));
	Запрос.УстановитьПараметр("ДатаНач"                   , НачалоНедели(НачалоМесяца(ДатаКалендаря)));
	Запрос.УстановитьПараметр("ПустоеКонтактноеЛицо"      , Справочники.ФизическиеЛица.ПустаяСсылка());
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗапроса.Сортировать("Дата ВОЗР");
	
	ДанныеМесяца.Загрузить(ТаблицаЗапроса);
	
	ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
	
КонецПроцедуры

// Процедура заполняет табличную часть обработки ДанныеНеделиЗаказы и
//  .реквизиты объекта СобытияНедели_День[Х]
// 
// Параметры
//  ОтображатьЗапланированныеСобытия  - булево, отображать запланированные события или все
//  ТипСобытияКалендаря - тип событий, которые надо отображать
// 
// Возвращаемое значение 
//  НЕТ
Процедура СобратьДокументыНедели(ОтображатьЗапланированныеСобытия = Ложь, ТипСобытияКалендаря, ОтображатьЗаказы, ОтображаемыеЗаказы, ОтображатьЗанятостьПомещений) Экспорт
	
	# Если Клиент Тогда
	Состояние("Выполняется заполнение документов недели и дня ...");
	# КонецЕсли
		
	Для а = 1 По ?(ОтображатьЗаказы, 7, 8) Цикл
		
		ЭтотОбъект["СобытияНедели_День" + Строка(а)] = Неопределено;
		
		ДатаДняНедели = НачалоДня(НачалоНедели(ДатаКалендаря) + (60*60*24)*а - 1);
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СобытияКалендаряПользователя.Событие                           КАК Документ,
		|	СобытияКалендаряПользователя.НомерНачальнойСтроки              КАК НомерНачальнойСтроки,
		|	СобытияКалендаряПользователя.НомерКонечнойСтроки               КАК НомерКонечнойСтроки,
		|	СобытияКалендаряПользователя.ДатаНачалаСобытия                 КАК ДатаНачалаСобытия,
		|	СобытияКалендаряПользователя.ДатаКонцаСобытия                  КАК ДатаКонцаСобытия,
		|	СобытияКалендаряПользователя.КонтактноеЛицо                    КАК КонтактноеЛицо,
		|	СобытияКалендаряПользователя.ОписаниеСобытия                   КАК ОписаниеСобытия,
		|	СобытияКалендаряПользователя.Важность                          КАК Важность,
		|	СобытияКалендаряПользователя.СостояниеСобытия                  КАК СостояниеСобытия,
		|	СобытияКалендаряПользователя.ТипСобытия                        КАК ТипСобытия,
		|	СобытияКалендаряПользователя.ВидСобытия                        КАК ВидСобытия,
		|	СобытияКалендаряПользователя.КоличествоОдновременныхДокументов КАК КоличествоОдновременныхДокументов
		|
		|ИЗ
		|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователя
		|	
		|ГДЕ
		|
		|	СобытияКалендаряПользователя.Дата = &ДатаДняНедели
		|	И
		|	СобытияКалендаряПользователя.Событие <> &ПустоеСобытие
		|	И
		|	СобытияКалендаряПользователя.Пользователь в (&ТекущийПользователь)
		|	И
		|	СобытияКалендаряПользователя.ВидСобытия <> &ПустойВидСобытия
		|";
		
		Если ОтображатьЗапланированныеСобытия Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|	И
			|	СобытияКалендаряПользователя.Событие.СостояниеСобытия = &ВыбСостояние
			|";
			
			Запрос.УстановитьПараметр("ВыбСостояние", Перечисления.СостоянияСобытий.Запланировано);
			
		КонецЕсли;
		
		Если НЕ ТипСобытияКалендаря.Пустая() Тогда
			
			
			Запрос.Текст = Запрос.Текст + "
			|	И
			|	СобытияКалендаряПользователя.Событие.ТипСобытия = &ВыбТипСобытия
			|";
			
			Запрос.УстановитьПараметр("ВыбТипСобытия", ТипСобытияКалендаря);
			
			
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|
		|	СобытияКалендаряПользователя.Событие.НачалоСобытия
		|
		|";                                                                         
		
		Запрос.УстановитьПараметр("ПустоеСобытие", Документы.Событие.ПустаяСсылка());  
		Запрос.УстановитьПараметр("ПустойВидСобытия", Перечисления.ВидыСобытий.ПустаяСсылка());  
		Запрос.УстановитьПараметр("ДатаДняНедели", ДатаДняНедели);
		Запрос.УстановитьПараметр("ТекущийПользователь", ПользовательКалендаря);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаСобытий = РезультатЗапроса.Выгрузить();  
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Число"));
		ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивТипов);
		
		ТаблицаСобытий.Колонки.Добавить("НомерНачальнойКолонки", ОписаниеТиповЧисло);
		ТаблицаСобытий.Колонки.Добавить("НомерКонечнойКолонки", ОписаниеТиповЧисло);
		
		СписокДня = Новый СписокЗначений;
		Для я = 1 По 48 Цикл
			НовыйСписок = Новый СписокЗначений;
			СписокДня.Добавить(НовыйСписок);
		КонецЦикла; 
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СобытияКалендаряПользователя.НомерСтрокиТаблицы КАК НомерСтрокиТаблицы,
		|	СобытияКалендаряПользователя.ПорядковыйНомерВДне КАК ПорядковыйНомерВДне,
		|	ВЫБОР
		|	КОГДА
		|		СобытияКалендаряПользователя.Событие = &ПустоеСобытие
		|	ТОГДА
		|		Неопределено
		|	ИНАЧЕ
		|		СобытияКалендаряПользователя.Событие
		|	КОНЕЦ                     КАК Документ
		|
		|ИЗ
		|	РегистрСведений.СобытияКалендаряПользователя КАК СобытияКалендаряПользователя
		|	
		|ГДЕ
		|
		|	СобытияКалендаряПользователя.Дата = &ДатаДняНедели
		|	И
		|	СобытияКалендаряПользователя.Пользователь в (&ТекущийПользователь)
		|";
		
		Если ОтображатьЗапланированныеСобытия Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|	И
			|	СобытияКалендаряПользователя.Событие.СостояниеСобытия = &ВыбСостояние
			|";
			
			Запрос.УстановитьПараметр("ВыбСостояние", Перечисления.СостоянияСобытий.Запланировано);
			
		КонецЕсли;
		
		Если НЕ ТипСобытияКалендаря.Пустая() Тогда
			
			
			Запрос.Текст = Запрос.Текст + "
			|	И
			|	СобытияКалендаряПользователя.Событие.ТипСобытия = &ВыбТипСобытия
			|";
			
			Запрос.УстановитьПараметр("ВыбТипСобытия", ТипСобытияКалендаря);
			
			
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|
		|	НомерСтрокиТаблицы ВОЗР,
		|	ПорядковыйНомерВДне ВОЗР
		|
		|ИТОГИ ПО
		|
		|	НомерСтрокиТаблицы,
		|	ПорядковыйНомерВДне
		|
		|";
		
		Запрос.УстановитьПараметр("ПустоеСобытие", Документы.Событие.ПустаяСсылка());
		Запрос.УстановитьПараметр("ДатаДняНедели", ДатаДняНедели);
		Запрос.УстановитьПараметр("ТекущийПользователь", ПользовательКалендаря);
		
		РезультатЗапроса = Запрос.Выполнить();  
		
		СоответствиеПорядковогоНомераВДне = Новый Соответствие;
		ПоНесколькимПользователям         = ПользовательКалендаря.Количество() > 1;
		
		ВыборкаСтрокЗапроса = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НомерСтрокиТаблицы");
		Пока ВыборкаСтрокЗапроса.Следующий() Цикл
			СписокЗначенийСтроки = СписокДня[ВыборкаСтрокЗапроса.НомерСтрокиТаблицы - 1].Значение;
			
			// Вначале соберем документы
			ТаблицаДокументов = Новый ТаблицаЗначений;
			ТаблицаДокументов.Колонки.Добавить("Документ");
			ТаблицаДокументов.Колонки.Добавить("ПорядковыйНомерВДне");
			
			ВыборкаПолейЗапроса = ВыборкаСтрокЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ПорядковыйНомерВДне");
			Пока ВыборкаПолейЗапроса.Следующий() Цикл
				КонечнаяВыборка = ВыборкаПолейЗапроса.Выбрать();
				Пока КонечнаяВыборка.Следующий() Цикл
					Если КонечнаяВыборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
						
						ПорядковыйНомерВДне = СоответствиеПорядковогоНомераВДне.Получить(КонечнаяВыборка.Документ);
						
						СтрокаТаблицы = ТаблицаДокументов.Добавить();
						СтрокаТаблицы.Документ            = КонечнаяВыборка.Документ;
						СтрокаТаблицы.ПорядковыйНомерВДне = ?(ПорядковыйНомерВДне=Неопределено,?(ПоНесколькимПользователям,0,ВыборкаПолейЗапроса.ПорядковыйНомерВДне),ПорядковыйНомерВДне);
						
					КонецЕсли; 
				КонецЦикла; 
			КонецЦикла; 
			
			// если по нескольким пользователям - сортируем так, чтобы вначале документы уже с установленными номерами (документы были в пред. строках),
			// а потом уже с новыми 
			Если ПоНесколькимПользователям Тогда
				ТаблицаДокументов.Сортировать("ПорядковыйНомерВДне УБЫВ, Документ ВОЗР");
			КонецЕсли;
			
			Смещение = 0;
			
			Для каждого ДокументИзТаблицы из ТаблицаДокументов Цикл
				
				ПорядковыйНомерВДне = СоответствиеПорядковогоНомераВДне.Получить(ДокументИзТаблицы.Документ);
				Если ПорядковыйНомерВДне = Неопределено Тогда
					ПорядковыйНомерВДне = ?(ПоНесколькимПользователям,1,ДокументИзТаблицы.ПорядковыйНомерВДне);
				КонецЕсли;
				
				Если СписокЗначенийСтроки.Количество() < ПорядковыйНомерВДне Тогда
					Для б = СписокЗначенийСтроки.Количество() + 1 По ПорядковыйНомерВДне Цикл
						СписокЗначенийСтроки.Добавить(Неопределено);
					КонецЦикла; 
				КонецЕсли; 
				
				// если по нескольким пользователям - возможно нужно сдвинуть порядок
				Если ПоНесколькимПользователям Тогда
					Пока ЗначениеЗаполнено(СписокЗначенийСтроки[ПорядковыйНомерВДне - 1 + Смещение].Значение) Цикл
						Смещение = Смещение + 1;
						СписокЗначенийСтроки.Добавить(Неопределено);
					КонецЦикла;
				КонецЕсли;
				
				СоответствиеПорядковогоНомераВДне.Вставить(ДокументИзТаблицы.Документ,ПорядковыйНомерВДне+Смещение);
				
				СписокЗначенийСтроки[ПорядковыйНомерВДне - 1 + Смещение].Значение = ДокументИзТаблицы.Документ;
				
			КонецЦикла;
			
		КонецЦикла; 
		
		// если несколько пользователей календаря - пересчитаем параметр "Количество одновременных документов"
		Если ПоНесколькимПользователям Тогда
			Для каждого СтрокаТаблицы из ТаблицаСобытий Цикл
				
				НаборЗаписейРегистра = РегистрыСведений.СобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
				НаборЗаписейРегистра.Отбор.Дата.Значение              = ДатаДняНедели;
				НаборЗаписейРегистра.Отбор.Дата.Использование         = Истина;
				НаборЗаписейРегистра.Отбор.Событие.Значение           = СтрокаТаблицы.Документ;
				НаборЗаписейРегистра.Отбор.Событие.Использование      = Истина;
				НаборЗаписейРегистра.Прочитать();
				
				Для каждого ЗаписьРегистра Из НаборЗаписейРегистра Цикл
					КоличествоДокументов = СтрокаТаблицы.КоличествоОдновременныхДокументов;
					Для б = ЗаписьРегистра.НомерНачальнойСтроки - 1 По ЗаписьРегистра.НомерКонечнойСтроки - 1 Цикл
						ТекСписок = СписокДня[б].Значение;
						Если ТекСписок.Количество() > КоличествоДокументов Тогда
							КоличествоДокументов = ТекСписок.Количество();
						КонецЕсли; 
					КонецЦикла;
					СтрокаТаблицы.КоличествоОдновременныхДокументов = КоличествоДокументов;
				КонецЦикла;
				
			КонецЦикла;
        КонецЕсли;
		
		ТаблицаСобытийПоПомещениям = Новый ТаблицаЗначений;
		СписокДняПоПомещениям      = Новый СписокЗначений;
		
		Если ОтображатьЗанятостьПомещений Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СобытияКалендаряПользователя.Событие                           КАК Документ,
			|	СобытияКалендаряПользователя.НомерНачальнойСтроки              КАК НомерНачальнойСтроки,
			|	СобытияКалендаряПользователя.НомерКонечнойСтроки               КАК НомерКонечнойСтроки,
			|	СобытияКалендаряПользователя.ДатаНачалаСобытия                 КАК ДатаНачалаСобытия,
			|	СобытияКалендаряПользователя.ДатаКонцаСобытия                  КАК ДатаКонцаСобытия,
			|	СобытияКалендаряПользователя.КонтактноеЛицо                    КАК КонтактноеЛицо,
			|	СобытияКалендаряПользователя.ОписаниеСобытия                   КАК ОписаниеСобытия,
			|	СобытияКалендаряПользователя.Важность                          КАК Важность,
			|	СобытияКалендаряПользователя.СостояниеСобытия                  КАК СостояниеСобытия,
			|	СобытияКалендаряПользователя.ТипСобытия                        КАК ТипСобытия,
			|	СобытияКалендаряПользователя.ВидСобытия                        КАК ВидСобытия,
			|	СобытияКалендаряПользователя.КоличествоОдновременныхДокументов КАК КоличествоОдновременныхДокументов
			|
			|ИЗ
			|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователя
			|	
			|ГДЕ
			|
			|	СобытияКалендаряПользователя.Дата = &ДатаДняНедели
			|	И
			|	СобытияКалендаряПользователя.Событие <> &ПустоеСобытие
			|	И
			|	СобытияКалендаряПользователя.Пользователь = &ПустойПользователь
			|	И
			|	СобытияКалендаряПользователя.ВидСобытия = &ПустойВидСобытия
			|
			|УПОРЯДОЧИТЬ ПО
			|
			|	СобытияКалендаряПользователя.Событие.НачалоСобытия
			|
			|";
			
			Запрос.УстановитьПараметр("ПустоеСобытие", Документы.Событие.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка()); 
			Запрос.УстановитьПараметр("ПустойВидСобытия", Перечисления.ВидыСобытий.ПустаяСсылка());   
			Запрос.УстановитьПараметр("ДатаДняНедели", ДатаДняНедели);
			Запрос.УстановитьПараметр("ТекущийПользователь", ПользовательКалендаря);
			
			РезультатЗапроса = Запрос.Выполнить();  
			
			ТаблицаСобытийПоПомещениям = РезультатЗапроса.Выгрузить();
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Число"));
			ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивТипов);
			
			ТаблицаСобытийПоПомещениям.Колонки.Добавить("НомерНачальнойКолонки", ОписаниеТиповЧисло);
			ТаблицаСобытийПоПомещениям.Колонки.Добавить("НомерКонечнойКолонки", ОписаниеТиповЧисло);
			
			Для я = 1 По 48 Цикл
				НовыйСписок = Новый СписокЗначений;
				СписокДняПоПомещениям.Добавить(НовыйСписок);
			КонецЦикла; 
			
			Запрос = Новый Запрос;
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СобытияКалендаряПользователя.НомерСтрокиТаблицы КАК НомерСтрокиТаблицы,
			|	СобытияКалендаряПользователя.ПорядковыйНомерВДне КАК ПорядковыйНомерВДне,
			|	ВЫБОР
			|	КОГДА
			|		СобытияКалендаряПользователя.Событие = &ПустоеСобытие
			|	ТОГДА
			|		Неопределено
			|	ИНАЧЕ
			|		СобытияКалендаряПользователя.Событие
			|	КОНЕЦ                     КАК Документ
			|
			|ИЗ
			|	РегистрСведений.СобытияКалендаряПользователя КАК СобытияКалендаряПользователя
			|	
			|ГДЕ
			|
			|	СобытияКалендаряПользователя.Дата = &ДатаДняНедели
			|	И
			|	СобытияКалендаряПользователя.Пользователь = &ПустойПользователь
			|
			|УПОРЯДОЧИТЬ ПО
			|
			|	НомерСтрокиТаблицы ВОЗР,
			|	ПорядковыйНомерВДне ВОЗР
			|
			|ИТОГИ ПО
			|
			|	НомерСтрокиТаблицы,
			|	ПорядковыйНомерВДне
			|
			|";
			
			Запрос.УстановитьПараметр("ПустоеСобытие", Документы.Событие.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
			Запрос.УстановитьПараметр("ДатаДняНедели", ДатаДняНедели);
			Запрос.УстановитьПараметр("ТекущийПользователь", ПользовательКалендаря);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаСтрокЗапроса = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НомерСтрокиТаблицы");
			Пока ВыборкаСтрокЗапроса.Следующий() Цикл
				СписокЗначенийСтроки = СписокДняПоПомещениям[ВыборкаСтрокЗапроса.НомерСтрокиТаблицы - 1].Значение;
				
				ВыборкаПолейЗапроса = ВыборкаСтрокЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ПорядковыйНомерВДне");
				Пока ВыборкаПолейЗапроса.Следующий() Цикл
					КонечнаяВыборка = ВыборкаПолейЗапроса.Выбрать();
					Пока КонечнаяВыборка.Следующий() Цикл
						Если КонечнаяВыборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
							
							Если СписокЗначенийСтроки.Количество() < ВыборкаПолейЗапроса.ПорядковыйНомерВДне Тогда
								Для б = СписокЗначенийСтроки.Количество() + 1 По ВыборкаПолейЗапроса.ПорядковыйНомерВДне Цикл
									СписокЗначенийСтроки.Добавить(Неопределено);
								КонецЦикла; 
							КонецЕсли; 
							
							СписокЗначенийСтроки[ВыборкаПолейЗапроса.ПорядковыйНомерВДне - 1].Значение = КонечнаяВыборка.Документ;
							
							Прервать;
							
						КонецЕсли; 
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла; 
		КонецЕсли;
		
		СтруктураЗначенияРеквизита = Новый Структура;
		СтруктураЗначенияРеквизита.Вставить("ТаблицаСобытий", ТаблицаСобытий);
		СтруктураЗначенияРеквизита.Вставить("РасположениеСобытий", СписокДня);
		
		СтруктураЗначенияРеквизита.Вставить("ТаблицаСобытийПоПомещениям", ТаблицаСобытийПоПомещениям);
		СтруктураЗначенияРеквизита.Вставить("РасположениеСобытийПоПомещениям", СписокДняПоПомещениям);
		
		ЭтотОбъект["СобытияНедели_День" + Строка(а)] = СтруктураЗначенияРеквизита;
		
	КонецЦикла;
	
	ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
	
КонецПроцедуры

// ПОЧТА

// Процедура обновляет данные доступных учетных записей текущего пользователя
// а так же данные о предопределенных группах учетных записей.
//
Процедура ОбновитьДоступныеУчетныеЗаписи() Экспорт
	
	мСоответствияГруппИсходящие.Очистить();
	мСоответствияГруппВходящие.Очистить();
	мСоответствияГруппУдаленные.Очистить();
	мСоответствияГруппЧерновики.Очистить();
	мСоответствияГруппНежелательные.Очистить();
	
	мСтруктураДоступныхУчетныхЗаписей = УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписи(ПараметрыСеанса.ТекущийПользователь);
	
	мДоступныеУчетныеЗаписи = мСтруктураДоступныхУчетныхЗаписей.Чтение.Скопировать();
	
	мСоответствияГруппИсходящие     = мСтруктураДоступныхУчетныхЗаписей.ГруппыИсходящие;
	мСоответствияГруппВходящие      = мСтруктураДоступныхУчетныхЗаписей.ГруппыВходящие;
	мСоответствияГруппУдаленные     = мСтруктураДоступныхУчетныхЗаписей.ГруппыУдаленные;
	мСоответствияГруппЧерновики     = мСтруктураДоступныхУчетныхЗаписей.ГруппыЧерновики;
	мСоответствияГруппНежелательные = мСтруктураДоступныхУчетныхЗаписей.ГруппыНежелательные;
	
КонецПроцедуры

// Процедура определяет статистику рассмотренности писем электронной почты
// для быстрого отображения их количества в дереве групп писем электронной почты
// и в списке предметов писем.
//
Процедура СобратьСтатистикуРассмотренностиПисем() Экспорт
	
	мСтатистикаРассмотренностиПисем.Очистить();
	мСтатистикаСохраненныхПисем.Очистить();
	мСтатистикаРассмотренностиПисемПоПредметам.Очистить();
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("СписокУчетныхЗаписей", ?(ЗначениеЗаполнено(УчетнаяЗапись), УчетнаяЗапись, мДоступныеУчетныеЗаписи));
		Запрос.УстановитьПараметр("ТекущаяДата"         , ТекущаяДата());
		
		СписокПользователей = Новый СписокЗначений;
		СписокПользователей.Добавить(ПараметрыСеанса.ТекущийПользователь);
		СписокПользователей.Добавить(Справочники.Пользователи.ПустаяСсылка());
		
		Запрос.УстановитьПараметр("СписокПользователей" , СписокПользователей);
		Запрос.УстановитьПараметр("Сохраненное"         , Перечисления.СтатусыПисем.Сохраненное);
		
		мПоследняяДатаОбновленияРассмотренностиПисем = ТекущаяДата();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Группа                 КАК Группа,
		|	" + ?(мОтображатьСписокПредметов, "ВложенныйЗапрос.ПредметКонтакта        КАК ПредметКонтакта,", "") + "
		|	КОЛИЧЕСТВО(ВложенныйЗапрос.Количество) КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА (ЭлектронноеПисьмо.ПометкаУдаления И ЭлектронноеПисьмо.ГруппаУчетнойЗаписи.Владелец.ГруппаУдаленные <> ЗНАЧЕНИЕ(Справочник.ГруппыПисемЭлектроннойПочты.ПустаяСсылка))
		|				ТОГДА ГруппаУчетнойЗаписи.Владелец.ГруппаУдаленные
		|			КОГДА (ЭлектронноеПисьмо.СтатусПисьма = &Сохраненное И ЭлектронноеПисьмо.ГруппаУчетнойЗаписи.Владелец.ГруппаЧерновики <> ЗНАЧЕНИЕ(Справочник.ГруппыПисемЭлектроннойПочты.ПустаяСсылка))
		|				ТОГДА ГруппаУчетнойЗаписи.Владелец.ГруппаЧерновики
		|			ИНАЧЕ ЭлектронноеПисьмо.ГруппаУчетнойЗаписи
		|		КОНЕЦ КАК Группа,
		|		" + ?(мОтображатьСписокПредметов, "ЭлектронноеПисьмо.ПредметКонтакта КАК ПредметКонтакта,", "") + "
		|		ЭлектронноеПисьмо.Ссылка КАК Количество
		|	ИЗ
		|		Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		|	
		|	ГДЕ
		|		ЭлектронноеПисьмо.НеРассмотрено
		|		И
		|		ЭлектронноеПисьмо.ГруппаУчетнойЗаписи.Владелец В(&СписокУчетныхЗаписей)
		|		И
		|		ЭлектронноеПисьмо.РассмотретьПосле < &ТекущаяДата
		|	"+?(мОтображатьРассмотренностиПисемТолькоПоТекущемуПользователю,"		И ЭлектронноеПисьмо.Ответственный в (&СписокПользователей)","")+"
		|	) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	" + ?(мОтображатьСписокПредметов, "ВложенныйЗапрос.ПредметКонтакта,", "") + "
		|	ВложенныйЗапрос.Группа
		|
		|" + ?(мОтображатьСписокПредметов, "ИТОГИ СУММА(Количество) ПО Группа", "") + "
		|";
		
		Если мОтображатьСписокПредметов Тогда
			ВыборкаГрупп = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Группа");
			Пока ВыборкаГрупп.Следующий() Цикл
				мСтатистикаРассмотренностиПисем.Вставить(ВыборкаГрупп.Группа, ВыборкаГрупп.Количество);
				ВыборкаПредметов = ВыборкаГрупп.Выбрать();
				СоответствиеГруппаПредмет = Новый Соответствие;
				Пока ВыборкаПредметов.Следующий() Цикл
					СоответствиеГруппаПредмет.Вставить(ВыборкаПредметов.ПредметКонтакта, ВыборкаПредметов.Количество);
				КонецЦикла; 
				Если СоответствиеГруппаПредмет.Количество() > 0 Тогда
					мСтатистикаРассмотренностиПисемПоПредметам.Вставить(ВыборкаГрупп.Группа, СоответствиеГруппаПредмет);
				КонецЕсли; 
			КонецЦикла;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				мСтатистикаРассмотренностиПисем.Вставить(Выборка.Группа, Выборка.Количество);
			КонецЦикла;
		КонецЕсли;
		
		// Соберем статистику наличия писем в папках черновиков
		ВременнаяТаблица = Новый ТаблицаЗначений;
		ВременнаяТаблица.Колонки.Добавить("ГруппаПисем", Новый ОписаниеТипов("СправочникСсылка.ГруппыПисемЭлектроннойПочты"));
		Для каждого Элемент Из мСоответствияГруппЧерновики Цикл
			СтрокаТаблицы = ВременнаяТаблица.Добавить();
			СтрокаТаблицы.ГруппаПисем = Элемент.Значение;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ВременнаяТаблица ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
		Запрос.УстановитьПараметр("ВнешнийИсточник", ВременнаяТаблица);
		Запрос.УстановитьПараметр("Сохраненное", Перечисления.СтатусыПисем.Сохраненное);
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ.ГруппаПисем КАК ГруппаПисем
		|ИЗ
		|	ВременнаяТаблица КАК ВТ
		|ГДЕ
		|	1 В(ВЫБРАТЬ ПЕРВЫЕ 1
		|			1
		|		ИЗ
		|			Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		|		ГДЕ
		|			ЭлектронноеПисьмо.СтатусПисьма = &Сохраненное
		|		  И ЭлектронноеПисьмо.УчетнаяЗапись = ВТ.ГруппаПисем.Владелец
		|		  И НЕ (ЭлектронноеПисьмо.ПометкаУдаления И ВТ.ГруппаПисем.Владелец.ГруппаУдаленные <> ЗНАЧЕНИЕ(Справочник.ГруппыПисемЭлектроннойПочты.ПустаяСсылка)))
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			мСтатистикаСохраненныхПисем.Вставить(Выборка.ГруппаПисем, Истина);
		КонецЦикла; 
		
	Иначе
		
		Сообщить("У Вас закрыт доступ к таблицам, обслуживающим электронную почту.");
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

# Если Клиент Тогда
Процедура СоздатьОпрос(ТекущийПредмет) Экспорт
	
	ЗапросПоПредмету = Новый Запрос;
	ЗапросПоПредмету.УстановитьПараметр("ПредметКонтакта", ТекущийПредмет);
	ЗапросПоПредмету.УстановитьПараметр("Отправленное", Перечисления.СтатусыПисем.Отправленное);
	ЗапросПоПредмету.УстановитьПараметр("Полученное", Перечисления.СтатусыПисем.Полученное);
	ЗапросПоПредмету.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПредметыЭлектронныхПисем.Регистратор КАК ЭП,
	|	ВЫБОР КОГДА ВложенияЭлектронныхПисем.ИмяФайла ПОДОБНО ""%.xml"" ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЕстьРезультатОпроса,
	|	ВЫБОР КОГДА ВложенияЭлектронныхПисем.ИмяФайла ПОДОБНО ""%.xml"" ТОГДА ВложенияЭлектронныхПисем.Хранилище КОНЕЦ КАК Хранилище,
	|	ПредметыЭлектронныхПисем.Регистратор.КомуТЧ.(
	|		ВЫБОР КОГДА ПредметыЭлектронныхПисем.Регистратор.СтатусПисьма = &Отправленное ТОГДА ПредметыЭлектронныхПисем.Регистратор.КомуТЧ.АдресЭлектроннойПочты ИНАЧЕ """" КОНЕЦ КАК АдресКому
	|	) КАК Кому,
	|	ВЫБОР КОГДА ПредметыЭлектронныхПисем.Регистратор.СтатусПисьма = &Полученное ТОГДА ПредметыЭлектронныхПисем.Регистратор.ОтправительАдресЭлектроннойПочты ИНАЧЕ """" КОНЕЦ КАК АдресОтКого
	|ИЗ
	|	РегистрСведений.ПредметыЭлектронныхПисем КАК ПредметыЭлектронныхПисем
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
	|		ПО ПредметыЭлектронныхПисем.Регистратор = ВложенияЭлектронныхПисем.Объект
	|
	|ГДЕ
	|	ПредметыЭлектронныхПисем.Предмет = &ПредметКонтакта И
	|	(ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма = """") И
	|	(ВложенияЭлектронныхПисем.Объект.Ссылка ССЫЛКА Документ.ЭлектронноеПисьмо)";
	РезультатЗапроса = ЗапросПоПредмету.Выполнить();
	ВыборкаЗапроса 	 = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	ОбработкаРезультатовАнкетирования = Обработки.ЗагрузкаРезультатовАнкетирования.Создать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		Если ВыборкаЗапроса.ЕстьРезультатОпроса тогда
			ХранилищеИзЗапроса = ВыборкаЗапроса.Хранилище.Получить();
			//Попытка
			ИмяВрФайла = ПолучитьИмяВременногоФайла();
			ХранилищеИзЗапроса.Записать(ИмяВрФайла);
			Файл = Новый ЧтениеXML();
			Файл.ОткрытьФайл(ИмяВрФайла);
			ОбъектЗагрузки 	= ОбработкаРезультатовАнкетирования.НайтиОбъектДляЗагрузки(Файл);
			Анкета 			= ОбработкаРезультатовАнкетирования.ПолучитьАнкетуИзФайла(Файл);
			ДатаОпроса 		= ОбработкаРезультатовАнкетирования.ПолучитьДатуФормированияАнкеты(Файл);
			
			Если Анкета = Неопределено тогда
				Продолжить;
			КонецЕсли;
			Если ОбъектЗагрузки = Неопределено тогда
				// если объект загрузки найти по ИдОпрашиваемого найти не удалось, тогда пробуем его найти
				// по ФИО и дате рождения, если это физлицо(конт. лицо), либо по ИНН, если это контрагент
				Файл.ОткрытьФайл(ИмяВрФайла);
				ОбъектЗагрузки = ОбработкаРезультатовАнкетирования.НайтиОбъектПоАнкетнымДанным(Файл, Анкета);
			КонецЕсли;
			ДокОпрос = ОбработкаРезультатовАнкетирования.НайтиДокументОпрос(ДатаОпроса, Анкета);
			Если НЕ ЗначениеЗаполнено(ОбъектЗагрузки) тогда
				ОбъектЗагрузки = ОбработкаРезультатовАнкетирования.НайтиОбъектПоАнкетнымДанным(Файл, Анкета);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокОпрос) тогда
				
				# Если Клиент Тогда
				
				Ответ = Вопрос("Найден документ опрос по данной анкете. Возможно такой документ уже есть в ИБ. Продолжить зарузку данных?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
				Если Ответ = КодВозвратаДиалога.Нет тогда
					ФормаОЗ = ДокОпрос.ПолучитьФорму("ФормаДокумента");
					ФормаОЗ.Открыть();
					Сообщить("Найден документ опрос по данной анкете.");
					Возврат;
				ИначеЕсли Ответ = КодВозвратаДиалога.Отмена тогда
					Возврат;
				КонецЕсли;   
				
				# КонецЕсли 
				
			КонецЕсли;
			
			Файл.ОткрытьФайл(ИмяВрФайла);
			ДокРассылки 		= ОбработкаРезультатовАнкетирования.ПолучитьДокРассылкиИзФайла(Файл);
			Если НЕ ЗначениеЗаполнено(Анкета) тогда
				Продолжить;
			КонецЕсли;
			// загружаем в документ Опрос
			ДокОпроса = Документы.Опрос.СоздатьДокумент();
			
			Пока Файл.Прочитать() Цикл
				Если (Файл.ТипУзла  = ТипУзлаXML.НачалоЭлемента) и ((Файл.Имя = "Вопрос")) Тогда
					Значение 		= Файл.ПолучитьАтрибут("Ид");
					Если Значение 	= "" Тогда
						Файл.Прочитать();
						Продолжить; // Пустые вопросы пропускаем
					КонецЕсли;
					ОбработкаРезультатовАнкетирования.ПрочитатьВопрос(Файл, ДокОпроса);
				КонецЕсли;
			КонецЦикла;
			Файл.Закрыть();
			
			ДокОпроса.ОпрашиваемоеЛицо = ОбъектЗагрузки;
			ДокОпроса.Ответственный    = ПараметрыСеанса.ТекущийПользователь;
			ДокОпроса.ТиповаяАнкета	   = Анкета;
			ДокОпроса.Рассылка 		   = ДокРассылки;
			ДокОпроса.Дата			   = ДатаОпроса;
			ДокОпроса.ПолучитьФорму("ФормаДокумента").ОткрытьМодально();
			ОбработкаПрерыванияПользователя();
			
			//Исключение
			//	Сообщить("При загрузке файла " + ИмяВрФайла + " произошла ошибка");
			//КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
# КонецЕсли

// КАЛЕНДАРЬ

// Заполним реквизиты обработки по умолчанию
ДатаНач = Дата("000101010000");
ДатаКон = Дата("000101010000");

Отборы = Новый Соответствие;
МассивЗначенийОтбора = Новый Массив;
МассивЗначенийОтбора.Добавить(ВидСравнения.ВСписке);
МассивЗначенийОтбора.Добавить(ПользовательКалендаря);
Отборы.Вставить("Пользователь", МассивЗначенийОтбора);
СтруктураОтборов = Отборы;

мСписокКлючейСтруктурыСобытий = Новый СписокЗначений;
мСписокКлючейСтруктурыСобытий.Добавить("Документ");
мСписокКлючейСтруктурыСобытий.Добавить("ДатаНачалаСобытия");
мСписокКлючейСтруктурыСобытий.Добавить("ДатаКонцаСобытия");
мСписокКлючейСтруктурыСобытий.Добавить("ОписаниеСобытия");
мСписокКлючейСтруктурыСобытий.Добавить("Контрагент");
мСписокКлючейСтруктурыСобытий.Добавить("КонтактноеЛицо");
мСписокКлючейСтруктурыСобытий.Добавить("Важность");
мСписокКлючейСтруктурыСобытий.Добавить("СостояниеСобытия");
мСписокКлючейСтруктурыСобытий.Добавить("ТипСобытия");
мСписокКлючейСтруктурыСобытий.Добавить("ВидСобытия");

мСписокОтборов              = Новый СписокЗначений;
мСтруктураПредставленийОтборов = Новый Структура;

мСтруктураПредставленийОтборов.Вставить("Дата", "Дата документа");
мСтруктураПредставленийОтборов.Вставить("ДатаСобытия", "Дата события");
мСписокОтборов.Добавить("КонтактноеЛицо","СправочникСсылка.ФизическиеЛица");
мСтруктураПредставленийОтборов.Вставить("КонтактноеЛицо", "Физическое лицо");
мСписокОтборов.Добавить("Пользователь","СписокЗначений");
мСтруктураПредставленийОтборов.Вставить("Пользователь", "Ответственный");
мСписокОтборов.Добавить("Важность","ПеречислениеСсылка.Важность");
мСтруктураПредставленийОтборов.Вставить("Важность", "Важность события");
мСписокОтборов.Добавить("Тип","ПеречислениеСсылка.ВходящееИсходящееСобытие");
мСтруктураПредставленийОтборов.Вставить("Тип", "Тип события");
мСписокОтборов.Добавить("Номер","Строка");
мСтруктураПредставленийОтборов.Вставить("Номер", "Номер документа");
мСписокОтборов.Добавить("ВидОперации","");
мСтруктураПредставленийОтборов.Вставить("ВидОперации", "Вид операции");

// ПОЧТА

# Если Клиент Тогда

мОтображатьСписокПредметов = Истина;

// Воссатновим сохраненное значение отображения рассмотренности писем
СохраненноеЗначениеКнопки = ВосстановитьЗначение("ПометкаКнопкиРассмотренностиПоТекущемуПользователю");
Если ТипЗнч(СохраненноеЗначениеКнопки) = Тип("Булево") Тогда
	мОтображатьРассмотренностиПисемТолькоПоТекущемуПользователю = СохраненноеЗначениеКнопки;
Иначе
	мОтображатьРассмотренностиПисемТолькоПоТекущемуПользователю = Ложь;
КонецЕсли;

# КонецЕсли

// Инициализируем переменные объекта
мСоответствияГруппВходящие      = Новый Соответствие;
мСоответствияГруппИсходящие     = Новый Соответствие;
мСоответствияГруппУдаленные     = Новый Соответствие;
мСоответствияГруппЧерновики     = Новый Соответствие;
мСоответствияГруппНежелательные = Новый Соответствие;

мСтатистикаРассмотренностиПисем            = Новый Соответствие;
мСтатистикаСохраненныхПисем                = Новый Соответствие;
мСтатистикаРассмотренностиПисемПоПредметам = Новый Соответствие;

СоответствиеНачалоИОкончениеРабочегоДняПользователя = Новый Соответствие;
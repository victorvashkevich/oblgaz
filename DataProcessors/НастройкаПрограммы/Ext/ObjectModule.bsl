
#Если ТолстыйКлиентОбычноеПриложение Тогда
	
Процедура ПроверитьИЗаписатьСписокВидовЗадач(СписокВидовЗадач) 

	ТекущийСписокЗадач 	 = Новый СписокЗначений;
	
	//получим список задач из ИБ
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыЗадачПользователей.Ссылка,
	|	ВидыЗадачПользователей.Использование,
	|	ПРЕДСТАВЛЕНИЕ(ВидыЗадачПользователей.Ссылка) КАК СсылкаПредставление
	|ИЗ
	|	Справочник.ВидыЗадачПользователей КАК ВидыЗадачПользователей
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЗадачПользователей.Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущийСписокЗадач.Добавить(Выборка.Ссылка, , Выборка.Использование);	
	КонецЦикла;
	
	Для каждого ЭлементСписка Из СписокВидовЗадач Цикл
		НайденнаяЗадача = ТекущийСписокЗадач.НайтиПоЗначению(ЭлементСписка.Значение);
		Если НайденнаяЗадача <> Неопределено и НайденнаяЗадача.Пометка <> ЭлементСписка.Пометка Тогда
			СправочникОбъект = НайденнаяЗадача.Значение.ПолучитьОбъект();
			СправочникОбъект.Использование = ЭлементСписка.Пометка;
			СправочникОбъект.Записать();
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

// Функция записывает настройки в регистр сведений РолиИИсполнители
//
// Возвращаемое значение:
//   Булево   - Ложь, когда необходимо записать настройки и набор не удалось записать
//
Функция ЗаписатьНастройкиРолейИИсполнителей(ФормаОбработки) Экспорт
	
	// проверим необходимость записи настроек по задачам
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.СтраницаРаботаСЗадачами.Видимость Тогда
		
		ПроверитьИЗаписатьСписокВидовЗадач(ФормаОбработки.СписокВидовЗадач);
		
		Если Не ФормаОбработки.РазделятьЗадачиПоОрганизациям и НЕ ФормаОбработки.РазделятьЗадачиПоРолямИсполнителей Тогда
			// не используется разделение задач, не изменяем записи в регистре РолиИИсполнители
			Возврат Истина;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.РолиИИсполнители.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		ТаблицаРолиИИсполнители = НаборЗаписей.Выгрузить();
		
		МассивОрганизаций = Новый Массив;
		Если ФормаОбработки.РазделятьЗадачиПоОрганизациям Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации";
			МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
		
		НаборЗаписей.Отбор.Организация.Использование = Истина;
		НаборЗаписей.Отбор.Исполнитель.Использование = Истина;
		НаборЗаписей.Отбор.Роль.Использование = Истина;
		
		СтруктураПоиска = Новый Структура("Исполнитель, Организация");
		Для каждого СтрокаТаблицы Из РолиИИсполнители Цикл
			
			НаборЗаписей.Очистить();
			
			НаборЗаписей.Отбор.Организация.Значение = СтрокаТаблицы.Организация;
			НаборЗаписей.Отбор.Исполнитель.Значение = СтрокаТаблицы.Исполнитель;
			НаборЗаписей.Отбор.Роль.Значение = СтрокаТаблицы.Роль;
			
			СтруктураПоиска.Вставить("Исполнитель", СтрокаТаблицы.Исполнитель);
			СтруктураПоиска.Вставить("Организация", СтрокаТаблицы.Организация);
			СтруктураПоиска.Вставить("Роль", СтрокаТаблицы.Роль);
			
			НадоЗаписать = Ложь;
			
			Если СтрокаТаблицы.Использование И ТаблицаРолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаТаблицы);
				НадоЗаписать = Истина;
			ИначеЕсли Не СтрокаТаблицы.Использование И ТаблицаРолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
				// запишем пустой набор
				НадоЗаписать = Истина;
			КонецЕсли;	
			
			Если НадоЗаписать Тогда
				Если Не ОбщегоНазначения.ЗаписатьНабор(НаборЗаписей) Тогда
					Возврат Ложь
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ЗаписатьНастройкиРолейИИсполнителей()
	
// Функция записывает измененые константы, список констант
// получаетсяиз строковой переменной формы обработки мСтрокаКонстант
//
//  ФормаОбработки - форма обработки
//
// Возвращаемое значение:
//   Булево   - Ложь, когда есть изменные константы, и записать набор констант не удалось
//
Функция ЗаписатьКонстанты(ФормаОбработки) Экспорт
	
	Если ЗначениеЗаполнено(ФормаОбработки.мСтрокаКонстант) Тогда
		//есть константы, которые могли измениться
		
		// подготовим массив констант, значения которых необходимо записать
		КоллекцияКонстантДляПроверки = Новый Структура(ФормаОбработки.мСтрокаКонстант);
		ЗаполнитьЗначенияСвойств(КоллекцияКонстантДляПроверки, ФормаОбработки);
		МассивИзмененныхКонстант = ОбщегоНазначения.СоздатьМассивИзмененныхКонстант(КоллекцияКонстантДляПроверки);
		
		// изменение шаблонов телефонов проверим отдельно, т.к. тип данных ХранилищеЗначений
		Если ИзменилсяШаблонТелефонныхНомеров(ФормаОбработки) Тогда
			МассивИзмененныхКонстант.Добавить(Метаданные.Константы.ШаблоныТелефонныхНомеров);
		КонецЕсли;
		
		// запишем изменения
		Если МассивИзмененныхКонстант.Количество() > 0 Тогда
			
			// есть константы, значение которых изменилось, запишем их
			НаборКонстант = Константы.СоздатьНабор(МассивИзмененныхКонстант);
			СтрокаСвойств = "";
			Для каждого Константа Из МассивИзмененныхКонстант Цикл
				СтрокаСвойств = СтрокаСвойств + Константа.Имя + ",";
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(НаборКонстант, ФормаОбработки, СтрокаСвойств);
			
			Если Не ОбщегоНазначения.ЗаписатьНабор(НаборКонстант) Тогда
				Возврат Ложь
			КонецЕсли;
			
			Для каждого Константа Из МассивИзмененныхКонстант Цикл
				
				Если Константа.Имя = "ИспользоватьОграниченияПравДоступаНаУровнеЗаписей" Тогда
					ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей = ФормаОбработки.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей;
				ИначеЕсли Константа.Имя = "ПрефиксУзлаРаспределеннойИнформационнойБазы" Тогда
					ПараметрыСеанса.ПрефиксУзлаРаспределеннойИнформационнойБазы = ФормаОбработки.ПрефиксУзлаРаспределеннойИнформационнойБазы;	
				ИначеЕсли Константа.Имя = "ЗаголовокСистемы" Тогда
					Если ПустаяСтрока(ФормаОбработки.ЗаголовокСистемы) Тогда
						УстановитьЗаголовокСистемы(Метаданные.Синоним);
					Иначе
						УстановитьЗаголовокСистемы(ФормаОбработки.ЗаголовокСистемы);
					КонецЕсли;
				ИначеЕсли Найти(Константа.Имя, "РазделятьЗадачиПо") > 0 Тогда
					Оповестить("ИзменениеКонстантУправленияРолямиИИсполнителями");
				Иначе
					ОбщегоНазначения.УстановитьЗначениеПеременной("гл" + Константа.Имя, глОбщиеЗначения, Константы[Константа.Имя].Получить() , Истина);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаписатьНастройкиРегламентныхЗаданий(ФормаОбработки) Экспорт

	НастройкиЗаписаны = Истина;
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.СтраницаРегламентныеЗадания.Видимость Тогда
		НастройкиЗаписаны = ЗаписатьНастройкиРегламентногоЗадания(ФормаОбработки, "РасчетОстатковОтпусковОрганизаций");
		//Если НастройкиЗаписаны Тогда
		//	НастройкиЗаписаны = ЗаписатьНастройкиРегламентногоЗадания(ФормаОбработки, "УничтожениеПерсональныхДанных"); 
		//КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкиЗаписаны;

КонецФункции // ЗаписатьНастройкиРегламентныхЗаданий()

Функция ЗаписатьНастройкиРегламентногоЗадания(ФормаОбработки, ИмяЗадания) Экспорт

	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(ИмяЗадания);	
	Если ФормаОбработки[ИмяЗадания] <> РегламентноеЗадание.Использование Тогда
		РегламентноеЗадание.Использование = ФормаОбработки[ИмяЗадания];
		Попытка
			РегламентноеЗадание.Записать();
		Исключение
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;	
	
	Возврат Истина;

КонецФункции // ЗаписатьНастройкиРегламентногоЗадания()

//Функция ЗаписатьНастройкиЗащитыПерсональныхДанных(ФормаОбработки) Экспорт
//	
//	// выполним запись, если режим доступен
//	ПанельЗащитаПерсДанных = ФормаОбработки.ЭлементыФормы.ЗащитаПерсональныхДанных;
//	Если ПравоДоступа("Администрирование", Метаданные) И ПанельЗащитаПерсДанных.ТекущаяСтраница = ПанельЗащитаПерсДанных.Страницы.РежимДоступен Тогда
//		
//		// запись настроек журнала регистрации
//		ОписаниеОшибок = ЗаписатьНастройкиЖурналаРегистрации(ФормаОбработки);
//		Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
//			ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОписаниеОшибок);
//			Возврат Ложь;
//		КонецЕсли;
//		
//		НачатьТранзакцию();
//		
//		// запись настроек в регистр
//		Записывать = Ложь;
//		ЭлементыУправленияЗащитойПерсональныхДанных = Новый Массив;
//		ЭлементыУправленияЗащитойПерсональныхДанных.Добавить("КонтролироватьЛичныеДанные");
//		ЭлементыУправленияЗащитойПерсональныхДанных.Добавить("КонтролироватьДанныеОПрофессииИКомпетенциях");
//		ЭлементыУправленияЗащитойПерсональныхДанных.Добавить("КонтролироватьДанныеОбИмуществе");
//		ЭлементыУправленияЗащитойПерсональныхДанных.Добавить("КонтролироватьДанныеОДоходах");
//		ЭлементыУправленияЗащитойПерсональныхДанных.Добавить("НеРегистрироватьСведенияОСубъектеДляДанныхОДоходахИИмуществе");
//		ЭлементыУправленияЗащитойПерсональныхДанных.Добавить("ОграничитьКоличествоСотрудниковПриПечатиВедомости");
//		
//		НастройкиМенеджерЗаписи = РегистрыСведений.НастройкаЗащитыПерсональныхДанных.СоздатьМенеджерЗаписи();
//		НастройкиМенеджерЗаписи.Прочитать();
//		Для Каждого ЭлементУправленияЗащитойДанных Из ЭлементыУправленияЗащитойПерсональныхДанных Цикл
//			Если НастройкиМенеджерЗаписи[ЭлементУправленияЗащитойДанных] <> ФормаОбработки[ЭлементУправленияЗащитойДанных] Тогда
//				НастройкиМенеджерЗаписи[ЭлементУправленияЗащитойДанных] = ФормаОбработки[ЭлементУправленияЗащитойДанных];
//				Записывать = Истина;
//			КонецЕсли;
//		КонецЦикла;
//		
//		Если Не Записывать Тогда
//			Если ТранзакцияАктивна() Тогда
//				ОтменитьТранзакцию();
//			КонецЕсли;
//			Возврат Истина;
//		КонецЕсли;
//		
//		Попытка	
//			НастройкиМенеджерЗаписи.Записать();
//		Исключение
//			Если ТранзакцияАктивна() Тогда
//				ОтменитьТранзакцию();
//			КонецЕсли;
//			ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
//			Возврат Ложь;
//		КонецПопытки;
//		
//		Если Записывать Тогда
//			глЗначениеПеременнойУстановить("глОграничитьКоличествоСотрудниковПриПечатиВедомости", ФормаОбработки["ОграничитьКоличествоСотрудниковПриПечатиВедомости"]);
//		КонецЕсли;
//		
//		// применение защиты персональных данных
//		Попытка
//			НастройкаЗащитыПерсональныхДанных.УстановитьЗащитуПерсональныхДанных();	
//		Исключение
//			ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
//			Если ТранзакцияАктивна() Тогда
//				ОтменитьТранзакцию();
//			КонецЕсли;
//			Возврат Ложь;
//		КонецПопытки;
//		
//		ЗафиксироватьТранзакцию();
//		
//	КонецЕсли;
//	
//	Возврат Истина;

//КонецФункции // ЗаписатьНастройкиЗащитыПерсональныхДанных()

//Функция ЗаписатьНастройкиЖурналаРегистрации(ФормаОбработки)
//	
//	ТекущиеУровни = ПолучитьИспользованиеЖурналаРегистрации();
//	
//	Записывать = (ТекущиеУровни.Количество() = 0) = ФормаОбработки.РегистрацияСобытийВключена;
//	
//	Возврат ?(Записывать, НастройкаЗащитыПерсональныхДанных.УстановитьУровниИспользованияЖурналаРегистрации(ФормаОбработки.РегистрацияСобытийВключена), "");
//	
//КонецФункции


Функция ПолучитьШаблоныНомеров(Шаблоны)

	ТаблицаСоответствий = Новый Соответствие;

	Для каждого СтрокаШаблонов Из Шаблоны Цикл

		Если ПустаяСтрока(СтрокаШаблонов.ШаблоныТелефонныхНомеров) Тогда
			Продолжить;
		КонецЕсли;

		ТаблицаСоответствий.Вставить(СтрЧислоВхождений(СокрЛП(СтрокаШаблонов.ШаблоныТелефонныхНомеров),"9"),СокрЛП(СтрокаШаблонов.ШаблоныТелефонныхНомеров));

	КонецЦикла;

	Возврат Новый ХранилищеЗначения(ТаблицаСоответствий);

КонецФункции // ПолучитьШаблоныНомеров()

Функция ИзменилсяШаблонТелефонныхНомеров(ФормаОбработки) 

	// получим из ИБ текущее значение шаблона, и сохраним его в переменной
	ФормаОбработки.ШаблоныТелефонныхНомеров = Константы.ШаблоныТелефонныхНомеров.Получить();
	
	// преобразуем полученное значение в таблицу значений
	ТекущийШаблонТаблица = ПолучитьТаблицуШаблоновТелефонов(ФормаОбработки);
	
	// сравним две таблицы значений
	ШаблонИзменился = ФормаОбработки.ТаблицаШаблоныТелефонов.Количество() <> ТекущийШаблонТаблица.Количество();
	Если Не ШаблонИзменился Тогда
		ШаблонИзменился = Не ОбщегоНазначенияЗК.МассивыИдентичны(ФормаОбработки.ТаблицаШаблоныТелефонов.ВыгрузитьКолонку("ШаблоныТелефонныхНомеров"), ТекущийШаблонТаблица.ВыгрузитьКолонку("ШаблоныТелефонныхНомеров"));
	КонецЕсли;
	
	// преобразуем таблицу значений в хранилище значений
	ФормаОбработки.ШаблоныТелефонныхНомеров = ПолучитьШаблоныНомеров(ФормаОбработки.ТаблицаШаблоныТелефонов);
	
	Возврат ШаблонИзменился;

КонецФункции

// Процедура заполняет табличную часть РолиИИсполнители
Процедура ЗаполнитьТЧРолиИИсполнители(ФормаОбработки) Экспорт

	МассивОрганизаций = Новый Массив;
	Если ФормаОбработки.РазделятьЗадачиПоОрганизациям Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации";
		МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Если Не ФормаОбработки.РазделятьЗадачиПоОрганизациям и Не ФормаОбработки.РазделятьЗадачиПоРолямИсполнителей Тогда
		// нет разделения задач по ролям и организациям
		// не заполняем табличную часть РолиИИсполнители
		
	ИначеЕсли ФормаОбработки.РазделятьЗадачиПоОрганизациям и Не ФормаОбработки.РазделятьЗадачиПоРолямИсполнителей Тогда
		// задачи разделяются только по организациям
		СтруктураПоиска = Новый Структура("Исполнитель, Организация, Роль");
		СтруктураПоиска.Вставить("Роль", Справочники.РолиИсполнителей.ПустаяСсылка());
		Для Каждого ЭлементСоответствия Из ФормаОбработки.мСоответствиеПользователейИРолей Цикл
			Пользователь = ЭлементСоответствия.Ключ;
			СтруктураПоиска.Вставить("Исполнитель", Пользователь);
			Для Каждого Организация Из МассивОрганизаций Цикл
				СтруктураПоиска.Вставить("Организация", Организация);
				Если РолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
					НоваяСтрока = РолиИИсполнители.Добавить();
					НоваяСтрока.Исполнитель = Пользователь;
					НоваяСтрока.Организация = Организация;
					НоваяСтрока.Роль = Справочники.РолиИсполнителей.ПустаяСсылка();
					НоваяСтрока.Использование = ТаблицаРолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() > 0;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	Иначе // задачи разделяются по ролям
			
		СтруктураПоиска = Новый Структура("Исполнитель, Организация, Роль");
		
		Для Каждого ЭлементСоответствия Из ФормаОбработки.мСоответствиеПользователейИРолей Цикл
			
			Пользователь = ЭлементСоответствия.Ключ;
			МассивРолиИсполнителя = ЭлементСоответствия.Значение;
			СтруктураПоиска.Вставить("Исполнитель", Пользователь);
			
			Для каждого РольИсполнителя Из МассивРолиИсполнителя Цикл
				СтруктураПоиска.Вставить("Роль", РольИсполнителя);
				Если ФормаОбработки.РазделятьЗадачиПоОрганизациям Тогда
					Для Каждого Организация Из МассивОрганизаций Цикл
						СтруктураПоиска.Вставить("Организация", Организация);
						Если РолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
							НоваяСтрока = РолиИИсполнители.Добавить();
							НоваяСтрока.Исполнитель = Пользователь;
							НоваяСтрока.Роль = РольИсполнителя;
							НоваяСтрока.Организация = Организация;
							НоваяСтрока.Использование = ТаблицаРолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() > 0;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					СтруктураПоиска.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
					Если РолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
						НоваяСтрока = РолиИИсполнители.Добавить();
						НоваяСтрока.Исполнитель = Пользователь;
						НоваяСтрока.Роль = РольИсполнителя;
						НоваяСтрока.Организация = Справочники.Организации.ПустаяСсылка();
						НоваяСтрока.Использование = ТаблицаРолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() > 0;
					КонецЕсли;

				КонецЕсли;	
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РолиИИсполнители.Сортировать("Исполнитель, Организация, Роль");

КонецПроцедуры

Процедура ПроверитьИЗаписатьНаборЗаписейРегиста(НаборЗаписей, ТаблицаНаборЗаписей) Экспорт

	НаборЗаписей.Прочитать();
	Если Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(НаборЗаписей.Выгрузить(), ТаблицаНаборЗаписей) Тогда
		НаборЗаписей.Загрузить(ТаблицаНаборЗаписей);
		НаборЗаписей.Записать();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ

Процедура ИзменитьВидимостьКомандыПерейтиКНастройкеЗадач(ФормаОбработки) Экспорт

	ФормаОбработки.ЭлементыФормы.НадписьПерейтиКНастройкеЗадач.Видимость = ФормаОбработки.ЭлементыФормы.РазделятьЗадачиПоРолямИсполнителей.Доступность
		И (ФормаОбработки.РазделятьЗадачиПоРолямИсполнителей или ФормаОбработки.РазделятьЗадачиПоОрганизациям);	

КонецПроцедуры

Процедура ФормаОбработкиКаталогДополнительнойИнформацииНачалоВыбора(Элемент, СтандартнаяОбработка, ФормаОбработки) Экспорт

	СтандартнаяОбработка = Ложь;
	
	ТекущееЗначение = Элемент.Значение;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Каталог = Элемент.Значение;
	Результат = Диалог.Выбрать();

	Если Результат Тогда
		Элемент.Значение = Диалог.Каталог;
	КонецЕсли;
	
	Если Элемент.Значение <> ТекущееЗначение Тогда
		ФормаОбработки.Модифицированность = Истина;
	КонецЕсли;	

КонецПроцедуры

Процедура ФормаОбработкиКаталогДополнительнойИнформацииОткрытие(Элемент, СтандартнаяОбработка, ФормаОбработки) Экспорт
		
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ПустаяСтрока(Элемент.Значение) Тогда
		ЗапуститьПриложение("explorer " + Элемент.Значение);
	КонецЕсли;	

КонецПроцедуры

Процедура ОткрытьФормуНастройкиРолей(ФормаОбработки, КлючУникальности) Экспорт

	Форма = ПолучитьФорму("НастройкаРолейИсполнителей", ФормаОбработки, КлючУникальности);
	Форма.РазделятьЗадачиПоОрганизациям = ФормаОбработки.РазделятьЗадачиПоОрганизациям;    
	Форма.РазделятьЗадачиПоРолямИсполнителей = ФормаОбработки.РазделятьЗадачиПоРолямИсполнителей;
	Форма.Заголовок = "Настройка списка задач пользователей" ;
	Форма.ОткрытьМодально();

КонецПроцедуры

Процедура УстановитьЗначенияИДоступностьЗависимыхЭлементов(ФормаОбработки) Экспорт
	
	// не выполнять когда страница не видима
	Если Не ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.СтраницаЗащитаПерсональныхДанных.Видимость Тогда
		Возврат;
	КонецЕсли;

	ЗависимыеЭлементыУправления = Новый Массив;
	ЗависимыеЭлементыУправления.Добавить("КонтролироватьЛичныеДанные");
	ЗависимыеЭлементыУправления.Добавить("КонтролироватьДанныеОПрофессииИКомпетенциях");
	ЗависимыеЭлементыУправления.Добавить("КонтролироватьДанныеОбИмуществе");
	ЗависимыеЭлементыУправления.Добавить("КонтролироватьДанныеОДоходах");
	ЗависимыеЭлементыУправления.Добавить("НеРегистрироватьСведенияОСубъектеДляДанныхОДоходахИИмуществе");
	ЗависимыеЭлементыУправления.Добавить("ОграничитьКоличествоСотрудниковПриПечатиВедомости");
	
	РегистрацияСобытийВключена = ФормаОбработки.РегистрацияСобытийВключена;
	
	Для Каждого ЭлементУправления Из ЗависимыеЭлементыУправления Цикл
		Если НЕ РегистрацияСобытийВключена Тогда
			ФормаОбработки[ЭлементУправления] = Ложь;
		КонецЕсли;
		ФормаОбработки.ЭлементыФормы[ЭлементУправления].Доступность = РегистрацияСобытийВключена;
	КонецЦикла;
	
	Если НЕ ФормаОбработки.КонтролироватьДанныеОбИмуществе И НЕ ФормаОбработки.КонтролироватьДанныеОДоходах Тогда
		ФормаОбработки.НеРегистрироватьСведенияОСубъектеДляДанныхОДоходахИИмуществе = Ложь;
	КонецЕсли;
	
	ФормаОбработки.ЭлементыФормы.НеРегистрироватьСведенияОСубъектеДляДанныхОДоходахИИмуществе.Доступность = ФормаОбработки.КонтролироватьДанныеОбИмуществе ИЛИ ФормаОбработки.КонтролироватьДанныеОДоходах;
	
КонецПроцедуры

Процедура УстановитьИнформационнуюНадписьКлассаСистемы(ФормаОбработки, ОпределятьКласс = Ложь) Экспорт
	
	// не выполнять когда страница не видима
	Если Не ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.СтраницаЗащитаПерсональныхДанных.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Если ОпределятьКласс Тогда
		// определим параметры информационной базы, от которых зависит класс информационной системы
		// - количество физических лиц
		// - количество организаций
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ПОМЕСТИТЬ ФизическиеЛица
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	(НЕ ФизическиеЛица.ЭтоГруппа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ПОМЕСТИТЬ Организации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	(НЕ Организации.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Организации.Количество КАК КоличествоОрганизаций,
		|	ФизическиеЛица.Количество КАК КоличествоФизическихЛиц
		|ИЗ
		|	Организации КАК Организации,
		|	ФизическиеЛица КАК ФизическиеЛица";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		КоличествоОрганизаций 	= Выборка.КоличествоОрганизаций;
		КоличествоФизическихЛиц	= Выборка.КоличествоФизическихЛиц;
	
		ФормаОбработки.КоличествоОрганизаций 	= КоличествоОрганизаций;
		ФормаОбработки.КоличествоФизическихЛиц 	= КоличествоФизическихЛиц;
	Иначе
		КоличествоОрганизаций 	= ФормаОбработки.КоличествоОрганизаций;
		КоличествоФизическихЛиц	= ФормаОбработки.КоличествоФизическихЛиц;
	КонецЕсли;
	
	// определяем класс информационной системы
	КлассИнформационнойСистемы = ?(КоличествоОрганизаций > 1 И КоличествоФизическихЛиц > 1000, 2, 3);
	
	// определяем уровень действующей защиты
	Если ФормаОбработки.РегистрацияСобытийВключена Тогда
		Если ФормаОбработки.КонтролироватьЛичныеДанные
		 ИЛИ ФормаОбработки.КонтролироватьДанныеОПрофессииИКомпетенциях
		 ИЛИ ФормаОбработки.КонтролироватьДанныеОбИмуществе
		 ИЛИ ФормаОбработки.КонтролироватьДанныеОДоходах
		 Тогда
			УстановленаЗащитаПоКлассу = 2;
	 	Иначе	 
			УстановленаЗащитаПоКлассу = 3;	
		КонецЕсли;
	Иначе
		УстановленаЗащитаПоКлассу = 4;
	КонецЕсли;
	
	// формируем информационную панель
	ТекстНадписи = "В информационной базе организаций - " + КоличествоОрганизаций + ", физических лиц - " + Формат(КоличествоФизическихЛиц, "ЧГ=3");
	
	ПанельКлассИнформационнойСистемы = ФормаОбработки.ЭлементыФормы.ПанельКлассИнформационнойСистемы;
	Если УстановленаЗащитаПоКлассу <= КлассИнформационнойСистемы Тогда
		ПанельКлассИнформационнойСистемы.ТекущаяСтраница = ПанельКлассИнформационнойСистемы.Страницы.ЗащитаСоответствуетКлассу;
		ФормаОбработки.ЭлементыФормы.НадписьОСоответствии.Заголовок = ТекстНадписи + ". Информационная система относится к классу " + КлассИнформационнойСистемы;
	Иначе
		ПанельКлассИнформационнойСистемы.ТекущаяСтраница = ПанельКлассИнформационнойСистемы.Страницы.ЗащитаНеСоответствуетКлассу;
		ФормаОбработки.ЭлементыФормы.НадписьОНеСоответствии.Заголовок = ТекстНадписи + ". Требуется защита по классу " + КлассИнформационнойСистемы;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОЛУЧЕНИЯ ДАННЫХ И ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ФОРМЫ

// Функция получает из реквизита формы ШаблоныТелефонныхНомеров данные
// и преобразует их в таблицу значений
Функция ПолучитьТаблицуШаблоновТелефонов(ФормаОбработки) 
	
	// скопируем структуру таблицы
	ТаблицаШаблонов = ФормаОбработки.ТаблицаШаблоныТелефонов.Скопировать();
	ТаблицаШаблонов.Очистить();

	Если ТипЗнч(ФормаОбработки.ШаблоныТелефонныхНомеров) <> Тип("ХранилищеЗначения") Тогда
		Возврат ТаблицаШаблонов;
	КонецЕсли;
	
	Шаблоны = ФормаОбработки.ШаблоныТелефонныхНомеров.Получить();
	
	Если ТипЗнч(Шаблоны) = Тип("Соответствие") Тогда
		
		Для Индекс = 1 По 50 Цикл //предполагаем, что больше 50-ти значных номеров не может быть
			НайденныйШаблон = Шаблоны.Получить(Индекс);
			Если НайденныйШаблон <> Неопределено Тогда
				СтрокаШаблонов = ТаблицаШаблонов.Добавить();
				СтрокаШаблонов.ШаблоныТелефонныхНомеров = НайденныйШаблон;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаШаблонов;

КонецФункции

Процедура ПолучитьОбщиеДанныеИЗаполнитьФорму(ФормаОбработки) Экспорт

	// получим значения констант 
	Если ЗначениеЗаполнено(ФормаОбработки.мСтрокаКонстант) Тогда
		НаборКонстант = Константы.СоздатьНабор(ФормаОбработки.мСтрокаКонстант);
		НаборКонстант.Прочитать();
		ЗаполнитьЗначенияСвойств(ФормаОбработки, НаборКонстант);
		
		// отдельно заполним Шаблоны телефонных номеров
		ФормаОбработки.ТаблицаШаблоныТелефонов.Очистить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ПолучитьТаблицуШаблоновТелефонов(ФормаОбработки), ФормаОбработки.ТаблицаШаблоныТелефонов);
		
	КонецЕсли;
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.СтраницаРаботаСЗадачами.Видимость Тогда
		
		//получим список задач
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыЗадачПользователей.Ссылка,
		|	ВидыЗадачПользователей.Использование,
		|	ПРЕДСТАВЛЕНИЕ(ВидыЗадачПользователей.Ссылка) КАК СсылкаПредставление
		|ИЗ
		|	Справочник.ВидыЗадачПользователей КАК ВидыЗадачПользователей
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыЗадачПользователей.Наименование";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ФормаОбработки.СписокВидовЗадач.Добавить(Выборка.Ссылка, Выборка.СсылкаПредставление, Выборка.Использование);	
		КонецЦикла;	
		
		НаборЗаписей = РегистрыСведений.РолиИИсполнители.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		ТаблицаРолиИИсполнители = НаборЗаписей.Выгрузить();
		
		// заполним массив мМассивПользователей - пользователи для которых производится настройка работы
		// с задачами, и соответствие пользователей и пользователей ИБ
		ТаблицаПользователейИБ = Новый ТаблицаЗначений;
		ТаблицаПользователейИБ.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150)));
		ТаблицаПользователейИБ.Колонки.Добавить("РольИсполнителя", Новый ОписаниеТипов("СправочникСсылка.РолиИсполнителей"));
		
		МассивПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
		Для Каждого ПользовательИБ Из МассивПользователейИБ Цикл
			Для Каждого ЭлементСоответствия Из ФормаОбработки.мСоответствиеРолей Цикл
				ДоступнаяРоль = ЭлементСоответствия.Ключ;
				МассивРольИсполнителя = ЭлементСоответствия.Значение;
				Если ПользовательИБ.Роли.Содержит(ДоступнаяРоль) Тогда
					Для Каждого ЭлементМассива Из МассивРольИсполнителя Цикл
						Строка = ТаблицаПользователейИБ.Добавить();
						Строка.Имя				= ПользовательИБ.Имя;
						Строка.РольИсполнителя	= ЭлементМассива;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаПользователейИБ", ТаблицаПользователейИБ);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПользователиИБ.Имя КАК Имя,
		|	ПользователиИБ.РольИсполнителя
		|ПОМЕСТИТЬ ПользователиИБ
		|ИЗ
		|	&ТаблицаПользователейИБ КАК ПользователиИБ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Имя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пользователи.Ссылка,
		|	Пользователи.Код КАК Код,
		|	ПользователиИБ.РольИсполнителя
		|ИЗ
		|	ПользователиИБ КАК ПользователиИБ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ПользователиИБ.Имя = Пользователи.Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Код") Цикл
			// заполним соответствие пользователями, для которых доступна настройка задач
			МассивРолейИсполнителя = Новый Массив;
			Пока Выборка.Следующий() Цикл
				МассивРолейИсполнителя.Добавить(Выборка.РольИсполнителя);
			КонецЦикла;
			
			Если МассивРолейИсполнителя.Количество()>0 Тогда
				ФормаОбработки.мСоответствиеПользователейИРолей.Вставить(Выборка.Ссылка, МассивРолейИсполнителя);
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьТЧРолиИИсполнители(ФормаОбработки);
		
	КонецЕсли;
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.СтраницаРегламентныеЗадания.Видимость Тогда
		ПрочитатьНастройкиРегламентногоЗадания(ФормаОбработки, "РасчетОстатковОтпусковОрганизаций");
		Если ФормаОбработки.ЭлементыФормы.ПанельУничтожатьПерсональныеДанные.Видимость Тогда
			ПрочитатьНастройкиРегламентногоЗадания(ФормаОбработки, "УничтожениеПерсональныхДанных");
		КонецЕсли;
	КонецЕсли;
	
	//ПрочитатьНастройкиЗащитыПерсональныхДанных(ФормаОбработки);

КонецПроцедуры

Процедура ПрочитатьНастройкиРегламентногоЗадания(ФормаОбработки, ИмяЗадания)

	ФормаОбработки[ИмяЗадания] = РегламентныеЗадания.НайтиПредопределенное(ИмяЗадания).Использование;
	
КонецПроцедуры

Процедура ПрочитатьИспользованиеЖурналаРегистрации(ФормаОбработки)

	ФормаОбработки.РегистрацияСобытийВключена 	= ПолучитьИспользованиеЖурналаРегистрации().Количество();
	
КонецПроцедуры

//Процедура ПрочитатьНастройкиЗащитыПерсональныхДанных(ФормаОбработки) Экспорт
//	
//	// заполним реквизиты страницы "Защита персональных данных", если режим доступен
//	ПанельЗащитаПерсДанных = ФормаОбработки.ЭлементыФормы.ЗащитаПерсональныхДанных;
//	Если ПравоДоступа("Администрирование", Метаданные) И ПанельЗащитаПерсДанных.ТекущаяСтраница = ПанельЗащитаПерсДанных.Страницы.РежимДоступен Тогда
//		ПрочитатьИспользованиеЖурналаРегистрации(ФормаОбработки);
//		НастройкиЗащитыПерсональныхДанных = РегистрыСведений.НастройкаЗащитыПерсональныхДанных.Получить();
//		Для Каждого ПараметрНастройки Из НастройкиЗащитыПерсональныхДанных Цикл
//			ФормаОбработки[ПараметрНастройки.Ключ] = ПараметрНастройки.Значение;
//		КонецЦикла;
//	КонецЕсли;
//	
//КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ 

Процедура ФормаОбработкиПередОткрытием(ФормаОбработки, Отказ) Экспорт

	РаботаСДиалогами.СформироватьСтраницыФормы(ФормаОбработки.мСоответствиеОбъектыМетаданных, ФормаОбработки.мСоответствиеРеквизитыФормы);
	
	Отказ = Истина;
	Для каждого СтраницаФормы Из ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы Цикл
		Если СтраницаФормы.Видимость Тогда
			// на форме есть видимые страницы, можно открывать форму
			Если Отказ Тогда
				// это первая из видимых страниц, сделаем ее текущей
				ФормаОбработки.ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = СтраницаФормы;
			КонецЕсли;
			Отказ = Ложь;
			
			МассивОбъектовМетаданных = ФормаОбработки.мСоответствиеОбъектыМетаданных[СтраницаФормы];
			Для каждого ОбъектМетаданных Из МассивОбъектовМетаданных Цикл
				Если Найти(ОбъектМетаданных.ПолноеИмя(), "Константа") <> 0 Тогда
					ФормаОбработки.мСтрокаКонстант = ФормаОбработки.мСтрокаКонстант + ОбъектМетаданных.Имя + ",";
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Не Отказ Тогда
		ВидимостьНастроекНаДругихСтраницах = Ложь;
		//Если ПравоДоступа("Администрирование", Метаданные) Тогда
		//	ПанельЗащитаПерсДанных = ФормаОбработки.ЭлементыФормы.ЗащитаПерсональныхДанных;
		//	ПричинаНедоступностиРежима = НастройкаЗащитыПерсональныхДанных.РежимЗащитыПерсональныхДанныхДоступен();
		//	Если ЗначениеЗаполнено(ПричинаНедоступностиРежима) Тогда
		//		ПанельЗащитаПерсДанных.ТекущаяСтраница = ПанельЗащитаПерсДанных.Страницы.РежимНеДоступен;
		//		ФормаОбработки.ЭлементыФормы.НадписьРежимНедоступен.Заголовок = ПричинаНедоступностиРежима;
		//	Иначе
		//		ПанельЗащитаПерсДанных.ТекущаяСтраница = ПанельЗащитаПерсДанных.Страницы.РежимДоступен;
		//		ВидимостьНастроекНаДругихСтраницах = Истина;
		//	КонецЕсли;
		//	ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.СтраницаЗащитаПерсональныхДанных.Видимость = Истина;			
		//Иначе
		//	ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.СтраницаЗащитаПерсональныхДанных.Видимость = Ложь;
		//КонецЕсли;
		ФормаОбработки.ЭлементыФормы.ПанельУничтожатьПерсональныеДанные.Видимость = ВидимостьНастроекНаДругихСтраницах;
	КонецЕсли;
	
КонецПроцедуры


#КонецЕсли





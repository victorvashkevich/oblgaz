Процедура ВыборПутиКБазе(Элемент) Экспорт
	
	ДиалогФыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогФыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

Процедура Синхронизировать() Экспорт
	
	Сообщить("Начало синхронизации "+ТекущаяДата());
	Пользователь="1c8";
	Пароль="";
	МонопольныйРежимOLE = "";
	ЗапускБезЗаставки = 1;
	База = Новый COMОбъект("V1CEnterprise.Application");
	СтрокаПодключения = "/D"""+СокрЛП(ПутьКБазе)+""" /N"""+СокрЛП(Пользователь)+""" /P"""+СокрЛП(Пароль)+"""";
	
	Состояние("Подключаемся к базе...");
	
	РезультатПодключения=База.Initialize(База.RMTrade,СтрокаПодключения,?(ЗапускБезЗаставки = 1,"NO_SPLASH_SHOW",""));

	Если НЕ РезультатПодключения Тогда
		Сообщить("Не удалось произвести подключение к информационной базе!");
		Возврат;
	КонецЕсли;
	
	Сообщить("Подключились к базе "+ТекущаяДата());
	Состояние("Начинаем обработку сотрудников...");
	
	СпрСотрудники77=База.CreateObject("Справочник.Сотрудники");
	СпрДолжности77=База.CreateObject("Справочник.ШтатныеЕдиницы");
	СпрПодразделения77=База.CreateObject("Справочник.Подразделения");
	Периодический77=База.CreateObject("Периодический");
	Счет77=База.CreateObject("Счет");
		
	Запрос=Новый Запрос;
	
	Запрос.Текст=
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизаций.ОбособленноеПодразделение КАК Структура,
	|	РаботникиОрганизаций.ОбособленноеПодразделение.Код77 КАК КодСтруктуры,
	|	РаботникиОрганизаций.ТабельныйНомер КАК ТабельныйНомер,
	|	РаботникиОрганизаций.Сотрудник.Физлицо.Наименование КАК ФИО,
	|	РаботникиОрганизаций.Период КАК Период,
	|	РаботникиОрганизаций.ПодразделениеОрганизации.Наименование КАК НаименованиеПодразделения,
	|	РаботникиОрганизаций.ПодразделениеОрганизации.Код77 КАК КодПодразделения,
	|	РаботникиОрганизаций.Должность.Наименование КАК НаименованиеДолжности,
	|	РаботникиОрганизаций.Должность.Код77 КАК КодДолжности,
	|	УчетОсновногоЗаработкаРаботников.СпособОтраженияВБухучете.СчетДт.Код КАК СчетЗатрат,
	|	ЕСТЬNULL(КонтактнаяИнформация1.Представление, КонтактнаяИнформация.Представление) КАК АдресПроживания,
	|	ЛицевыеСчетаРаботниковОрганизации.НомерЛицевогоСчета КАК ЛицевойСчет,
	|	ПаспортныеДанныеФизЛиц.ДокументСерия КАК ДокументСерия,
	|	ПаспортныеДанныеФизЛиц.ДокументНомер КАК ДокументНомер,
	|	ПаспортныеДанныеФизЛиц.ДокументДатаВыдачи КАК ДокументДатаВыдачи,
	|	ПаспортныеДанныеФизЛиц.ДокументКемВыдан КАК ДокументКемВыдан,
	|	РаботникиОрганизаций.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО РаботникиОрганизаций.Сотрудник.Физлицо = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация1
	|		ПО РаботникиОрганизаций.Сотрудник.Физлицо = КонтактнаяИнформация1.Объект
	|			И (КонтактнаяИнформация1.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтактнаяИнформация1.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресФизЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛицевыеСчетаРаботниковОрганизации КАК ЛицевыеСчетаРаботниковОрганизации
	|		ПО РаботникиОрганизаций.Сотрудник.Физлицо = ЛицевыеСчетаРаботниковОрганизации.ФизЛицо
	|			И РаботникиОрганизаций.ОбособленноеПодразделение = ЛицевыеСчетаРаботниковОрганизации.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.СрезПоследних(, ) КАК УчетОсновногоЗаработкаРаботников
	|		ПО РаботникиОрганизаций.Сотрудник = УчетОсновногоЗаработкаРаботников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(, ) КАК ПаспортныеДанныеФизЛиц
	|		ПО РаботникиОрганизаций.Сотрудник.ФизЛицо = ПаспортныеДанныеФизЛиц.ФизЛицо
	|ГДЕ
	|	РаботникиОрганизаций.ОбособленноеПодразделение = &Организация
	|	И РаботникиОрганизаций.Период >= &ПериодВыгрузки
	|	И (&ПоВсем ИЛИ РаботникиОрганизаций.Сотрудник В (&СписокСотрудников))
	|	И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения,
	|	РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения.Код77,
	|	РаботникиОрганизаций.ТабельныйНомер,
	|	РаботникиОрганизаций.Сотрудник.Физлицо.Наименование,
	|	РаботникиОрганизаций.ПериодЗавершения,
	|	РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения.Наименование,
	|	РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения.Код77,
	|	РаботникиОрганизаций.ДолжностьЗавершения.Наименование,
	|	РаботникиОрганизаций.ДолжностьЗавершения.Код77,
	|	УчетОсновногоЗаработкаРаботников.СпособОтраженияВБухучете.СчетДт.Код,
	|	ЕСТЬNULL(КонтактнаяИнформация1.Представление, КонтактнаяИнформация.Представление),
	|	ЛицевыеСчетаРаботниковОрганизации.НомерЛицевогоСчета,
	|	ПаспортныеДанныеФизЛиц.ДокументСерия КАК ДокументСерия,
	|	ПаспортныеДанныеФизЛиц.ДокументНомер КАК ДокументНомер,
	|	ПаспортныеДанныеФизЛиц.ДокументДатаВыдачи КАК ДокументДатаВыдачи,
	|	ПаспортныеДанныеФизЛиц.ДокументКемВыдан КАК ДокументКемВыдан,
	|	РаботникиОрганизаций.Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО РаботникиОрганизаций.Сотрудник.Физлицо = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация1
	|		ПО РаботникиОрганизаций.Сотрудник.Физлицо = КонтактнаяИнформация1.Объект
	|			И (КонтактнаяИнформация1.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтактнаяИнформация1.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресФизЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛицевыеСчетаРаботниковОрганизации КАК ЛицевыеСчетаРаботниковОрганизации
	|		ПО РаботникиОрганизаций.Сотрудник.Физлицо = ЛицевыеСчетаРаботниковОрганизации.ФизЛицо
	|			И РаботникиОрганизаций.ОбособленноеПодразделение = ЛицевыеСчетаРаботниковОрганизации.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.СрезПоследних(, ) КАК УчетОсновногоЗаработкаРаботников
	|		ПО РаботникиОрганизаций.Сотрудник = УчетОсновногоЗаработкаРаботников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(, ) КАК ПаспортныеДанныеФизЛиц
	|		ПО РаботникиОрганизаций.Сотрудник.ФизЛицо = ПаспортныеДанныеФизЛиц.ФизЛицо
	|ГДЕ
	|	РаботникиОрганизаций.ОбособленноеПодразделение = &Организация
	|	И РаботникиОрганизаций.Период >= &ПериодВыгрузки
	|	И (&ПоВсем ИЛИ РаботникиОрганизаций.Сотрудник В (&СписокСотрудников))	
	|	И РаботникиОрганизаций.ДолжностьЗавершения <> ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)
	|	И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФИО,
	|	Период";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ПериодВыгрузки",ПериодВыгрузки);
	Запрос.УстановитьПараметр("ПоВсем",Не УказанныеСотрудники);
	Запрос.УстановитьПараметр("СписокСотрудников",РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник"));
	
	Выборка=Запрос.Выполнить().Выбрать();
	
	Попытка
		
		НачатьТранзакцию();
				
		Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			Нашли=Ложь;
			
			Состояние("Обрабатывается сотрудник "+СокрЛП(Выборка.ФИО));
			
			Если СпрСотрудники77.НайтиПоКоду(СокрЛП(Выборка.КодСтруктуры)+"-"+СервисныеПроцедурыИФункции.ДополнитьСтрокуЛ(СокрЛП(Выборка.ТабельныйНомер),"0",5),0)=1 Тогда
				
				Нашли=Истина;
				
			ИначеЕсли СпрСотрудники77.НайтиПоКоду(СокрЛП(Выборка.КодСтруктуры)+"-"+СокрЛП(Выборка.ТабельныйНомер),0)=1 Тогда
				
				Нашли=Истина;
				
			ИначеЕсли СпрСотрудники77.НайтиПоКоду(СокрЛП(Выборка.ТабельныйНомер))=1 Тогда
				
				Нашли=Истина;
								
			КонецЕсли;	
			
			Если Не Нашли ТОгда	
				
				СпрСотрудники77.Новый();
				СпрСотрудники77.Код=СокрЛП(Выборка.КодСтруктуры)+"-"+СервисныеПроцедурыИФункции.ДополнитьСтрокуЛ(СокрЛП(Выборка.ТабельныйНомер),"0",5);
				
				Сообщить("Создан сотрудник "+СокрЛП(Выборка.ФИО)+", код "+СпрСотрудники77.Код);						
				
				Если Не Тестирование Тогда
					СпрСотрудники77.Записать();
				КонецЕсли;
				
			КонецЕсли;
			
			СпрСотрудники77.Наименование=СокрЛП(Выборка.ФИО);			
			
			Пока Выборка.СледующийПоЗначениюПоля("Период") Цикл
				
				Если ЗначениеЗаполнено(Выборка.КодДолжности) ТОгда
					
					Периодический77.ИспользоватьОбъект("ДолжностьШЕ",СпрСотрудники77.ТекущийЭлемент());
					
					Если Периодический77.НайтиЗначение(Выборка.Период,0)=0 Тогда
						
						Периодический77.ДатаЗнач=Выборка.Период;
						
						Если СпрДолжности77.НайтиПоКоду(СокрЛП(Выборка.КодДолжности))=0 ТОгда
							СпрДолжности77.Новый();
							СпрДолжности77.Код=Выборка.КодДолжности;
							Сообщить("Создана должность "+СокрЛП(Выборка.НаименованиеДолжности));						
						КонецЕсли;	
				
						СпрДолжности77.Наименование=СокрЛП(Выборка.НаименованиеДолжности);
						
						Если Не Тестирование Тогда 
							СпрДолжности77.Записать();
						КонецЕсли;						
	
						Периодический77.Значение=СпрДолжности77.ТекущийЭлемент();
						
						Если НЕ Тестирование ТОгда
							Периодический77.Записать();
						КонецЕсли;						
						Сообщить("Для сотрудника "+СокрЛП(Выборка.ФИО)+" в историю добавлена должность "+СокрЛП(Выборка.НаименованиеДолжности));
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.КодПодразделения) ТОгда
					
					Периодический77.ИспользоватьОбъект("Подразделение",СпрСотрудники77.ТекущийЭлемент());
					
					Если Периодический77.НайтиЗначение(Выборка.Период,0)=0 Тогда
						
						Периодический77.ДатаЗнач=Выборка.Период;
						
						Если СпрПодразделения77.НайтиПоКоду(СокрЛП(Выборка.КодПодразделения))=0 ТОгда
							СпрПодразделения77.Новый();
							СпрПодразделения77.Код=Выборка.КодПодразделения;
							Сообщить("Создано подразделение "+СокрЛП(Выборка.НаименованиеПодразделения));						
						КонецЕсли;	
				
						СпрПодразделения77.Наименование=СокрЛП(Выборка.НаименованиеПодразделения);						
						
						Если НЕ Тестирование ТОгда
							//СпрПодразделения77.Записать();
						КонецЕсли;						
	
						Периодический77.Значение=СпрПодразделения77.ТекущийЭлемент();;
						
						Если Не Тестирование Тогда
							Периодический77.Записать();
						КонецЕсли;						
						Сообщить("Для сотрудника "+СокрЛП(Выборка.ФИО)+" в историю добавлено подразделение "+СокрЛП(Выборка.НаименованиеПодразделения));
					КонецЕсли;
					
				КонецЕсли;				
				
			КонецЦикла;
			
			Если СокрЛП(Выборка.АдресПроживания)<>"" Тогда
				СпрСотрудники77.Адрес=СокрЛП(Выборка.АдресПроживания);
			КонецЕсли;
			
			Если СокрЛП(Выборка.ДокументСерия)<>"" Тогда
				СпрСотрудники77.ДокументСерия=СокрЛП(Выборка.ДокументСерия);
			КонецЕсли;
			
			Если СокрЛП(Выборка.ДокументНомер)<>"" Тогда
				СпрСотрудники77.ДокументНомер=СокрЛП(Выборка.ДокументНомер);
			КонецЕсли;
			
			Если СокрЛП(Выборка.ДокументКемВыдан)<>"" Тогда
				СпрСотрудники77.ДокументКемВыдан=СокрЛП(Выборка.ДокументКемВыдан);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ДокументДатаВыдачи) Тогда
				СпрСотрудники77.ДокументДатаВыдачи=Выборка.ДокументДатаВыдачи;
			КонецЕсли;
			
			Если СокрЛП(Выборка.ЛицевойСчет)<>"" Тогда
				СпрСотрудники77.ЛицевойСчет=СокрЛП(Выборка.ЛицевойСчет);
			КонецЕсли;
			
			Если СокрЛП(Строка(Выборка.СчетЗатрат))<>"" Тогда
				Если ВыгружатьСчетаЗатрат ТОгда
					СпрСотрудники77.СчетЗатрат=База.EvalExpr("СчетПоКоду("""+СокрЛП(Строка(Выборка.СчетЗатрат))+""")");
				КонецЕсли;				
			КонецЕсли;
			
			Если Не Тестирование Тогда
				СпрСотрудники77.Записать();				
			КонецЕсли;			
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
	Сообщить("Окончание синхронизации "+ТекущаяДата());
	
КонецПроцедуры

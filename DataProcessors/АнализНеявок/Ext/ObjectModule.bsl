Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Формирует запрос по регистру СостояниеРаботниковОрганизаций
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапрос()

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	//vvv
	Запрос.УстановитьПараметр("ВыходнойЗаРанее",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоНаименованию("Выходной за ранее отработанное время"));
	Запрос.УстановитьПараметр("ВидРасчетаДетскийДень",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоРеквизиту("ОбозначениеВТабелеУчетаРабочегоВремени",Справочники.КлассификаторИспользованияРабочегоВремени.ДетскийДень));
	Запрос.УстановитьПараметр("ВидРасчетаКолДоговор",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоРеквизиту("ОбозначениеВТабелеУчетаРабочегоВремени",Справочники.КлассификаторИспользованияРабочегоВремени.ДопСвободныеДниКолДоговор));
	Запрос.УстановитьПараметр("ВидРасчетаДонорскиеДни",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоРеквизиту("ОбозначениеВТабелеУчетаРабочегоВремени",Справочники.КлассификаторИспользованияРабочегоВремени.Донорство));
	Запрос.УстановитьПараметр("ВидРасчетаДонорскиеДниССохранениемЗаработка",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоРеквизиту("ОбозначениеВТабелеУчетаРабочегоВремени",Справочники.КлассификаторИспользованияРабочегоВремени.ДонорствоССохранениемЗаработка));
	Запрос.УстановитьПараметр("ВидРасчетаОтстранение",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоРеквизиту("ОбозначениеВТабелеУчетаРабочегоВремени",Справочники.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыБезОплаты));
	//
	Если ОтбиратьСобытияПоДокументу Тогда
		ДатаН = КадровыйДокумент.Дата;
		Запрос.УстановитьПараметр("Регистратор",			КадровыйДокумент);
		Запрос.УстановитьПараметр("ДатаНачала",				НачалоДня(ДатаН));
		Запрос.УстановитьПараметр("ДатаОкончания",			КонецДня(ДатаН));
	Иначе
		Запрос.УстановитьПараметр("ДатаНачала",				ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания",			КонецДня(ДатаОкончания));
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ПодразделениеОрганизации",	ПодразделениеОрганизации);
	
	// Все возможные значения перечисления СостоянияРаботникаОрганизации
	ЗначенияПеречисления = Метаданные.Перечисления.СостоянияРаботникаОрганизации.ЗначенияПеречисления;
	Для Каждого ТекущееЗначение Из ЗначенияПеречисления Цикл
		Запрос.УстановитьПараметр(ТекущееЗначение.Имя, Перечисления.СостоянияРаботникаОрганизации[ТекущееЗначение.Имя]);
	КонецЦикла;

	// Все возможные значения перечисления СостоянияРаботникаОрганизации
	ЗначенияПеречисления = Метаданные.Перечисления.НамеченныеСобытияПоПерсоналу.ЗначенияПеречисления;
	Для Каждого ТекущееЗначение Из ЗначенияПеречисления Цикл
		Запрос.УстановитьПараметр(ТекущееЗначение.Имя + "Намеченный", Перечисления.НамеченныеСобытияПоПерсоналу[ТекущееЗначение.Имя]);
	КонецЦикла;
	
	// Элементы из классификатора использования рабочего времени
	МассивНеоплачиваемыеОтпуска = Новый Массив();
	МассивНеоплачиваемыеОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя);
	МассивНеоплачиваемыеОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству);
	МассивНеоплачиваемыеОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск);
	//vvv
	МассивНеоплачиваемыеОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоСемейноБытовым);
	//
	Запрос.УстановитьПараметр("УчетВремениНеоплачиваемыеОтпуска",					МассивНеоплачиваемыеОтпуска);
	
	МассивОплачиваемыеУчебныеОтпуска = Новый Массив();
	МассивОплачиваемыеУчебныеОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение);
	МассивОплачиваемыеУчебныеОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификации);
	МассивОплачиваемыеУчебныеОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификацииВДругойМестности);
	Запрос.УстановитьПараметр("УчетВремениОплачиваемыеУчебныеОтпуска", МассивОплачиваемыеУчебныеОтпуска);

	МассивРасчетыОтпуска = Новый Массив;
	МассивРасчетыОтпуска.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
	МассивРасчетыОтпуска.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
	Запрос.УстановитьПараметр("РасчетыОтпуска", МассивРасчетыОтпуска);
	
	// Определим периоды смены (реальные или намеченные) состояния работников за указанный пользователем интервал.
	// Выбираем намеченные события, зарегистрированные тем же регистратором.
	СостояниеРаботниковТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостояниеРаботников.Сотрудник,
	|	СостояниеРаботников.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	СостояниеРаботников.Период КАК ДатаНачала,
	//vvv
	//|	ЕСТЬNULL(МИНИМУМ(ДОБАВИТЬКДАТЕ(СостояниеБудущее.Период, ДЕНЬ, -1)), БудущиеНамеченныеСобытия.Период) КАК ДатаОкончания,
	|	ЕСТЬNULL(МИНИМУМ(ВЫБОР КОГДА СостояниеРаботников.Регистратор ССЫЛКА Документ.ОтсутствиеПериодомНаРаботеОрганизаций ТОГДА ОтсутствиеПериодомНаРаботеОрганизаций.ДатаОкончания ИНАЧЕ ДОБАВИТЬКДАТЕ(СостояниеБудущее.Период, ДЕНЬ, -1) КОНЕЦ ), БудущиеНамеченныеСобытия.Период) КАК ДатаОкончания,
	//
	|	СостояниеРаботников.Состояние КАК Состояние,
	|	СостояниеРаботников.Регистратор КАК КадровыйДокумент,
	//vvv
	|	ОтсутствиеПериодомНаРаботеОрганизаций.НомерВходящегоДокумента,
	|	ОтсутствиеПериодомНаРаботеОрганизаций.ДатаВходящегоДокумента,
	|	ОтсутствиеПериодомНаРаботеОрганизаций.СерияВходящегоДокумента,
	|	ОтсутствиеПериодомНаРаботеОрганизаций.ПричинаНетрудоспособности,
	|	ОтсутствиеПериодомНаРаботеОрганизаций.Диагноз,
	|	ОтсутствиеПериодомНаРаботеОрганизаций.ВнутрисменныхЧасов,
	//
	|	ОтпускаРаботниковОрганизации.ВидДополнительногоОтпуска,
	|	ОтпускаРаботниковОрганизации.ДатаНачалаДоп,
	|	ОтпускаРаботниковОрганизации.РабочийГодС,
	|	ОтпускаРаботниковОрганизации.РабочийГодПо
	|ПОМЕСТИТЬ ВТСостояниеРаботников
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаРаботниковОрганизации
	|		ПО СостояниеРаботников.Регистратор = ОтпускаРаботниковОрганизации.Ссылка
	|			И СостояниеРаботников.Период = ОтпускаРаботниковОрганизации.ДатаНачала
	|			И СостояниеРаботников.Сотрудник = ОтпускаРаботниковОрганизации.Сотрудник
	//vvv
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтсутствиеПериодомНаРаботеОрганизаций.РаботникиОрганизации КАК ОтсутствиеПериодомНаРаботеОрганизаций
	|		ПО СостояниеРаботников.Регистратор = ОтсутствиеПериодомНаРаботеОрганизаций.Ссылка
	|			И СостояниеРаботников.Период = ОтсутствиеПериодомНаРаботеОрганизаций.ДатаНачала
	|			И СостояниеРаботников.Сотрудник = ОтсутствиеПериодомНаРаботеОрганизаций.Сотрудник
	//
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СостояниеРаботников.Сотрудник КАК Сотрудник,
	|			СостояниеРаботников.Период КАК Период,
	|			СостояниеРаботников.Период КАК ДатаНачала
	|		ИЗ
	|			РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
	|		ГДЕ
	|			СостояниеРаботников.Организация = &ГоловнаяОрганизация
	//vvv
	|			И СостояниеРаботников.Регистратор.Организация = &Организация
	//
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СостояниеРаботников.Сотрудник,
	|			СостояниеРаботников.ПериодЗавершения,
	|			СостояниеРаботников.Период
	|		ИЗ
	|			РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковПроверка
	|				ПО СостояниеРаботниковПроверка.Период > СостояниеРаботников.Период
	|					И СостояниеРаботниковПроверка.Период <= СостояниеРаботников.ПериодЗавершения
	|					И СостояниеРаботников.Сотрудник = СостояниеРаботниковПроверка.Сотрудник
	|		ГДЕ
	|			СостояниеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			И СостояниеРаботниковПроверка.Сотрудник ЕСТЬ NULL
	//vvv
	|			И СостояниеРаботников.Регистратор.Организация = &Организация
	//
	|			И СостояниеРаботников.Организация = &ГоловнаяОрганизация) КАК СостояниеБудущее
	|		ПО СостояниеРаботников.Период < СостояниеБудущее.Период
	|			И СостояниеРаботников.Сотрудник = СостояниеБудущее.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МИНИМУМ(ДОБАВИТЬКДАТЕ(НамеченныеСобытия.ДатаИзменения, ДЕНЬ, -1)) КАК Период,
	|			СостояниеРаботников.Регистратор КАК Регистратор,
	|			СостояниеРаботников.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НамеченныеСобытияПоПерсоналу КАК НамеченныеСобытия
	|				ПО СостояниеРаботников.Регистратор = НамеченныеСобытия.Регистратор
	|					И СостояниеРаботников.Период <= НамеченныеСобытия.ДатаИзменения
	|					И (ВЫБОР
	|						КОГДА СостояниеРаботников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный)
	|								И НамеченныеСобытия.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.ОтпускЕжегодный)
	|							ТОГДА ИСТИНА
	|						КОГДА СостояниеРаботников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
	|								И НамеченныеСобытия.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.ОтпускУчебный)
	|							ТОГДА ИСТИНА
	|						КОГДА СостояниеРаботников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый)
	|								И НамеченныеСобытия.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.ОтпускУчебныйНеоплачиваемый)
	|							ТОГДА ИСТИНА
	|						КОГДА СостояниеРаботников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты)
	|								И НамеченныеСобытия.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.ОтпускУчебныйНеоплачиваемый)
	|							ТОГДА ИСТИНА
	|						КОГДА СостояниеРаботников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Командировка)
	|								И НамеченныеСобытия.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.Командировка)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ)
	|					И СостояниеРаботников.Сотрудник = НамеченныеСобытия.Сотрудник
	|		ГДЕ
	//vvv
	|			СостояниеРаботников.Регистратор.Организация = &Организация
	|			И СостояниеРаботников.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.СоциальныйОтпускОплачиваемый)
	//
	|			И СостояниеРаботников.Организация = &ГоловнаяОрганизация";
	Если ОтбиратьСобытияПоДокументу Тогда
		СостояниеРаботниковТекст = СостояниеРаботниковТекст + "
	|			И СостояниеРаботников.Регистратор = &Регистратор";
	Иначе
		СостояниеРаботниковТекст = СостояниеРаботниковТекст + "
	|			И СостояниеРаботников.Регистратор.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	КонецЕсли;	
	СостояниеРаботниковТекст = СостояниеРаботниковТекст + "
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СостояниеРаботников.Регистратор,
	|			СостояниеРаботников.НомерСтроки) КАК БудущиеНамеченныеСобытия
	|		ПО СостояниеРаботников.Регистратор = БудущиеНамеченныеСобытия.Регистратор
	|			И СостояниеРаботников.НомерСтроки = БудущиеНамеченныеСобытия.НомерСтроки
	|ГДЕ
	|	(НЕ СостояниеРаботников.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.НеРаботает), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком)))
	//vvv
	|	И СостояниеРаботников.Регистратор.Организация=&Организация
	|	И СостояниеРаботников.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.СоциальныйОтпускОплачиваемый)
	//
	|	И СостояниеРаботников.Организация = &ГоловнаяОрганизация";
	Если ОтбиратьСобытияПоДокументу Тогда
		СостояниеРаботниковТекст = СостояниеРаботниковТекст + "
	|	И СостояниеРаботников.Регистратор = &Регистратор";
	Иначе
		СостояниеРаботниковТекст = СостояниеРаботниковТекст + "
	|	И СостояниеРаботников.Регистратор.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	КонецЕсли;	
	СостояниеРаботниковТекст = СостояниеРаботниковТекст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	СостояниеРаботников.Организация,
	|	СостояниеРаботников.Регистратор,
	|	СостояниеРаботников.Состояние,
	|	СостояниеРаботников.Период,
	|	БудущиеНамеченныеСобытия.Период,
	//vvv
	|	ОтсутствиеПериодомНаРаботеОрганизаций.НомерВходящегоДокумента,
	|	ОтсутствиеПериодомНаРаботеОрганизаций.ДатаВходящегоДокумента,
	|	ОтсутствиеПериодомНаРаботеОрганизаций.СерияВходящегоДокумента,
	|	ОтсутствиеПериодомНаРаботеОрганизаций.ПричинаНетрудоспособности,
	|	ОтсутствиеПериодомНаРаботеОрганизаций.Диагноз,
	|	ОтсутствиеПериодомНаРаботеОрганизаций.ВнутрисменныхЧасов,
	//
	|	ОтпускаРаботниковОрганизации.ВидДополнительногоОтпуска,
	|	ОтпускаРаботниковОрганизации.ДатаНачалаДоп,
	|	ОтпускаРаботниковОрганизации.РабочийГодС,
	|	ОтпускаРаботниковОрганизации.РабочийГодПо,
	|	СостояниеРаботников.Сотрудник";
	Запрос.Текст = СостояниеРаботниковТекст;
	
	Запрос.Выполнить();
	
	// Составим список возможных расчетных документов за соответствующий период регистрации
	СписокРасчетныхДокументовТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.Сотрудник.Физлицо КАК Физлицо,
	|	БольничныйЛист.ДатаНачала,
	|	БольничныйЛист.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА БольничныйЛист.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Заболевание)
	|	КОНЕЦ КАК Состояние,
	|	БольничныйЛист.Ссылка КАК РасчетныйДокумент,
	|	NULL КАК ВидРасчета,
	|	NULL КАК ПорядокРасчетаОтпуска,
	|	NULL КАК ВидДополнительногоОтпуска,
	|	NULL КАК ДатаНачалаДоп,
	|	NULL КАК РабочийГодС,
	|	NULL КАК РабочийГодПо,
	|	БольничныйЛист.ПричинаНетрудоспособности,
	|	БольничныйЛист.ПроцентОплаты,
	|	БольничныйЛист.ПервичныйБольничныйЛист,
	|	БольничныйЛист.ОграничениеПособия,
	|	БольничныйЛист.НомерВходящегоДокумента,
	|	БольничныйЛист.СерияВходящегоДокумента,
	|	NULL КАК ВидПростоя
	|ПОМЕСТИТЬ ВТСписокРасчетныхДокументов
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ДатаОкончания, МЕСЯЦ)
	//vvv комментируем, изменяем условие
	//|	И ВЫБОР
	//|			КОГДА БольничныйЛист.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	//|				ТОГДА БольничныйЛист.Организация
	//|			ИНАЧЕ БольничныйЛист.Организация.ГоловнаяОрганизация
	//|		КОНЕЦ = &ГоловнаяОрганизация
	|	И БольничныйЛист.Организация = &Организация
	|	И (НЕ БольничныйЛист.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НевыходыНачисления.Сотрудник,
	|	НевыходыНачисления.Сотрудник.Физлицо,
	|	НевыходыНачисления.ДатаНачала,
	|	НевыходыНачисления.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА НевыходыНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&УчетВремениНеоплачиваемыеОтпуска)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты)
	|		КОГДА НевыходыНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый)
	|		КОГДА НевыходыНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы)
	|		КОГДА НевыходыНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботника)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой)
	//vvv
	|		КОГДА НевыходыНачисления.ВидРасчета = &ВыходнойЗаРанее
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ВыходнойЗаРанееОтработанноеВремя)
	|		КОГДА НевыходыНачисления.ВидРасчета = &ВидРасчетаДонорскиеДни
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДонорскиеДни)
	|		КОГДА НевыходыНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.БолезньБезОплаты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ЗаболеваниеБезОплаты)
	//
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине)
	|	КОНЕЦ,
	|	НевыходыНачисления.Ссылка,
	|	НевыходыНачисления.ВидРасчета,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.НевыходыВОрганизациях.Начисления КАК НевыходыНачисления
	|ГДЕ
	|	НевыходыНачисления.Ссылка.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ДатаОкончания, МЕСЯЦ)
	//vvv комментируем, изменяем условие
	//|	И ВЫБОР
	//|			КОГДА НевыходыНачисления.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	//|				ТОГДА НевыходыНачисления.Ссылка.Организация
	//|			ИНАЧЕ НевыходыНачисления.Ссылка.Организация.ГоловнаяОрганизация
	//|		КОНЕЦ = &ГоловнаяОрганизация
	|	И НевыходыНачисления.Ссылка.Организация=&Организация
	//
	|	И (НЕ НевыходыНачисления.Ссылка.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачислениеОтпуска.Сотрудник,
	|	НачислениеОтпуска.Сотрудник.Физлицо,
	|	ВЫБОР
	|		КОГДА НачислениеОтпуска.ДатаНачалаОсновногоОтпуска <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА НачислениеОтпуска.ДатаНачалаОсновногоОтпуска
	|		ИНАЧЕ НачислениеОтпуска.ДатаНачалаДополнительногоОтпуска
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НачислениеОтпуска.ДатаОкончанияОсновногоОтпуска <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА НачислениеОтпуска.ДатаОкончанияОсновногоОтпуска
	|		ИНАЧЕ НачислениеОтпуска.ДатаОкончанияДополнительногоОтпуска
	|	КОНЕЦ,
	|	ВЫБОР
	//vvv переписываем этот бред
	//|		КОГДА НачислениеОтпуска.ДатаНачалаОсновногоОтпуска <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный)
	//|		КОГДА НачислениеОтпуска.ВидРасчетаДополнительногоОтпуска.ОбозначениеВТабелеУчетаРабочегоВремени В (&УчетВремениОплачиваемыеУчебныеОтпуска)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
	//|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный)
	|		КОГДА НачислениеОтпуска.ВидРасчетаОсновногоОтпуска.ОбозначениеВТабелеУчетаРабочегоВремени В (&УчетВремениОплачиваемыеУчебныеОтпуска)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный)			
	//
	|	КОНЕЦ,
	|	НачислениеОтпуска.Ссылка,
	|	ВЫБОР	
	|		КОГДА НачислениеОтпуска.ДатаНачалаОсновногоОтпуска <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//vvv комментируем все, непонятно, зачем этот выбор, если все можно взять из основного вида отпуска
	//|			ТОГДА ВЫБОР
	//|					КОГДА НачислениеОтпуска.ПорядокРасчетаОсновногоОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	//|						ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни)
	//|					ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка)
	//|				КОНЕЦ
	|			ТОГДА НачислениеОтпуска.ВидРасчетаОсновногоОтпуска
	//
	|		ИНАЧЕ НачислениеОтпуска.ВидРасчетаДополнительногоОтпуска
	|	КОНЕЦ,
	|	НачислениеОтпуска.ПорядокРасчетаОсновногоОтпуска,
	|	НачислениеОтпуска.ВидРасчетаДополнительногоОтпуска,
	|	НачислениеОтпуска.ДатаНачалаДополнительногоОтпуска,
	|	НачислениеОтпуска.РабочийГодС,
	|	НачислениеОтпуска.РабочийГодПо,
	|	NULL,
	|	НачислениеОтпуска.ПроцентОплатыДополнительногоОтпуска,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК НачислениеОтпуска
	|ГДЕ
	|	НачислениеОтпуска.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ДатаОкончания, МЕСЯЦ)
	//vvv комментируем, изменяем условие
	//|	И ВЫБОР
	//|			КОГДА НачислениеОтпуска.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	//|				ТОГДА НачислениеОтпуска.Организация
	//|			ИНАЧЕ НачислениеОтпуска.Организация.ГоловнаяОрганизация
	//|		КОНЕЦ = &ГоловнаяОрганизация
	|	И НачислениеОтпуска.Организация = &Организация
	//
	|	И (НЕ НачислениеОтпуска.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОплатаПоСреднему.Сотрудник,
	|	ОплатаПоСреднему.Сотрудник.Физлицо,
	|	ОплатаПоСреднему.ДатаНачала,
	|	ОплатаПоСреднему.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднему.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Командировка)
	|		КОГДА ОплатаПоСреднему.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВынужденныйПрогул)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ВынужденныйПрогул)
	|		КОГДА ОплатаПоСреднему.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ГосударственныеОбязанности)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ГосударственныеОбязанности)
	|		КОГДА ОплатаПоСреднему.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ДополнительныеВыходныеДниОплачиваемые)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДополнительныеВыходныеДниОплачиваемые)
	//vvv
	|		КОГДА ОплатаПоСреднему.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ДопСвободныеДниКолДоговор)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДополнительныеВыходныеДниОплачиваемыеКолДоговор)
	|		КОГДА ОплатаПоСреднему.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
	|		КОГДА ОплатаПоСреднему.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВоенноУчебныеСборы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ВоенноУчебныеСборы)
	|		КОГДА ОплатаПоСреднему.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификации),ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификацииВДругойМестности))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебныйПК)
	|		КОГДА ОплатаПоСреднему.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ДетскийДень)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДетскиеДни)
	|		КОГДА ОплатаПоСреднему.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Медосмотр)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Медосмотр)
	|		КОГДА ОплатаПоСреднему.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ДонорствоССохранениемЗаработка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДонорскиеДниССохранениемЗаработка)
	//
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ОплатаПоСреднему.Ссылка,
	|	ОплатаПоСреднему.ВидРасчета,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ОплатаПоСреднему.ПроцентОплаты,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднему
	|ГДЕ
	|	ОплатаПоСреднему.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ДатаОкончания, МЕСЯЦ)
	//vvv комментируем, изменяем условие
	//|	И ВЫБОР
	//|			КОГДА ОплатаПоСреднему.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	//|				ТОГДА ОплатаПоСреднему.Организация
	//|			ИНАЧЕ ОплатаПоСреднему.Организация.ГоловнаяОрганизация
	//|		КОНЕЦ = &ГоловнаяОрганизация
	 | И ОплатаПоСреднему.Организация = &Организация
	//
	|	И (НЕ ОплатаПоСреднему.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрацияПростоев.Сотрудник,
	|	РегистрацияПростоев.Сотрудник.Физлицо,
	|	РегистрацияПростоев.ДатаНачала,
	|	РегистрацияПростоев.ДатаОкончания,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой),
	|	РегистрацияПростоев.Ссылка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РегистрацияПростоев.ВидПростоя
	|ИЗ
	|	Документ.РегистрацияПростоевРаботниковОрганизаций КАК РегистрацияПростоев
	|ГДЕ
	|	РегистрацияПростоев.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ДатаОкончания, МЕСЯЦ)
	|	И ВЫБОР
	|			КОГДА РегистрацияПростоев.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА РегистрацияПростоев.Организация
	|			ИНАЧЕ РегистрацияПростоев.Организация.ГоловнаяОрганизация
	|		КОНЕЦ = &ГоловнаяОрганизация
	|	И (НЕ РегистрацияПростоев.ПометкаУдаления)
	|	И (НЕ РегистрацияПростоев.НеЦелодневныйПростой)";
	
	Запрос.Текст = СписокРасчетныхДокументовТекст;
	
	Запрос.Выполнить();
	
	// Шаблон запроса для выбора подходящего вида расчета
	ТекстЗапросаВидРасчета = "
	|(ВЫБРАТЬ
	|	МИНИМУМ(ОсновныеНачисления.Ссылка) КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	ОсновныеНачисления.СпособРасчета <<СпособРасчета>> И
	|	ОсновныеНачисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное) И
	|	ОсновныеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени <<Обозначение>>)
	|";
	
	ТекстЗапросаВидРасчетаЧасовой = "
	|(ВЫБРАТЬ
	|	МИНИМУМ(ОсновныеНачисления.Ссылка) КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	ОсновныеНачисления.СпособРасчета <<СпособРасчета>> И
	|	ОсновныеНачисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное) И
	|	ОсновныеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени <<Обозначение>>)
	|";
	
	// Соединяем кадровые и расчетные документы
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасчетныеИКадровыеДанные.Отметка,
	|	РасчетныеИКадровыеДанные.Сотрудник КАК Сотрудник,
	|	РасчетныеИКадровыеДанные.Физлицо,
	|	РасчетныеИКадровыеДанные.ДатаНачала,
	|	РасчетныеИКадровыеДанные.ДатаОкончания,
	|	РасчетныеИКадровыеДанные.Неявка,
	|	РасчетныеИКадровыеДанные.КадровыйДокумент,
	|	ВЫБОР 
	|		КОГДА НЕ (РасчетныйДокумент ЕСТЬ NULL) ТОГДА РасчетныйДокумент
	|		КОГДА Неявка В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Заболевание),ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам)) ТОГДА ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	//vvv комментируем, отпуск учебный надо в оплату по среднему, если внесен Кадровым отсутствием на работе
	//|		КОГДА Неявка В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)) ТОГДА ЗНАЧЕНИЕ(Документ.НачислениеОтпускаРаботникамОрганизаций.ПустаяСсылка)
	|		КОГДА Неявка В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)) И РасчетныеИКадровыеДанные.КадровыйДокумент ССЫЛКА Документ.ОтпускаОрганизаций ТОГДА ЗНАЧЕНИЕ(Документ.НачислениеОтпускаРаботникамОрганизаций.ПустаяСсылка)
	|		КОГДА Неявка В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный)) ТОГДА ЗНАЧЕНИЕ(Документ.НачислениеОтпускаРаботникамОрганизаций.ПустаяСсылка)
	|		КОГДА Неявка В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный),ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебныйПК),ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ВоенноУчебныеСборы),ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Медосмотр)) ТОГДА ЗНАЧЕНИЕ(Документ.ОплатаПоСреднемуЗаработку.ПустаяСсылка)
	//
	//vvv комментируем
	//|		КОГДА Неявка В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Командировка), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ВынужденныйПрогул), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ГосударственныеОбязанности), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДополнительныеВыходныеДниОплачиваемые)) ТОГДА ЗНАЧЕНИЕ(Документ.ОплатаПоСреднемуЗаработку.ПустаяСсылка)
	//
	//vvv
	|		КОГДА Неявка В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДетскиеДни),ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДонорскиеДниССохранениемЗаработка),ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДополнительныеВыходныеДниОплачиваемыеКолДоговор),ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Командировка), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ВынужденныйПрогул), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ГосударственныеОбязанности), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДополнительныеВыходныеДниОплачиваемые)) ТОГДА ЗНАЧЕНИЕ(Документ.ОплатаПоСреднемуЗаработку.ПустаяСсылка)
	//
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой) ТОГДА ЗНАЧЕНИЕ(Документ.РегистрацияПростоевРаботниковОрганизаций.ПустаяСсылка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.НевыходыВОрганизациях.ПустаяСсылка)
	|	КОНЕЦ КАК РасчетныйДокумент,
	|	ВЫБОР 
	|		КОГДА НЕ (РасчетныйДокумент ЕСТЬ NULL) ТОГДА РасчетныеИКадровыеДанные.ВидРасчета
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Заболевание) ТОГДА NULL
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам) ТОГДА NULL
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Командировка) ТОГДА ПВРКомандировка.ВидРасчета
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный) ТОГДА NULL
	//vvv комментируем
	//|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный) ТОГДА ПВРОтпускУчебный.ВидРасчета
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный) И РасчетныеИКадровыеДанные.КадровыйДокумент ССЫЛКА Документ.ОтпускаОрганизаций ТОГДА ПВРОтпускУчебный.ВидРасчета
	|		КОГДА (Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)) И (ЕСТЬNULL(РасчетныеИКадровыеДанные.ВнутрисменныхЧасов,0)=0) ТОГДА ПВРОтпускУчебныйСреднийЗаработок.ВидРасчета
	|		КОГДА (Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)) И (ЕСТЬNULL(РасчетныеИКадровыеДанные.ВнутрисменныхЧасов,0)<>0) ТОГДА ПВРОтпускУчебныйБезОтрываСреднийЗаработок.ВидРасчета
	//
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый) ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыУчебный)
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты) ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет)
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком) ТОГДА NULL
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине) ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Невыход)
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ВынужденныйПрогул) ТОГДА ПВРВынужденныйПрогул.ВидРасчета
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ГосударственныеОбязанности) ТОГДА ПВРГосударственныеОбязанности.ВидРасчета
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы) ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул)
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДополнительныеВыходныеДниОплачиваемые) ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами)
	//vvv
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДетскиеДни) ТОГДА &ВидРасчетаДетскийДень
	|		КОГДА (Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебныйПК)) И (ЕСТЬNULL(РасчетныеИКадровыеДанные.ВнутрисменныхЧасов,0)=0) ТОГДА ПВРОтпускУчебныйПК.ВидРасчета
	|		КОГДА (Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебныйПК)) И (ЕСТЬNULL(РасчетныеИКадровыеДанные.ВнутрисменныхЧасов,0)<>0) ТОГДА ПВРОтпускУчебныйБезОтрываПК.ВидРасчета
	|		КОГДА (Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ВоенноУчебныеСборы)) И (ЕСТЬNULL(РасчетныеИКадровыеДанные.ВнутрисменныхЧасов,0)=0) ТОГДА ПВРВоенноУчебныеСборы.ВидРасчета
	|		КОГДА (Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ВоенноУчебныеСборы)) И (ЕСТЬNULL(РасчетныеИКадровыеДанные.ВнутрисменныхЧасов,0)<>0) ТОГДА ПВРВоенноУчебныеСборыВнутрисменные.ВидРасчета
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ВыходнойЗаРанееОтработанноеВремя) ТОГДА &ВыходнойЗаРанее
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДополнительныеВыходныеДниОплачиваемыеКолДоговор) ТОГДА &ВидРасчетаКолДоговор
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДонорскиеДни) ТОГДА &ВидРасчетаДонорскиеДни
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДонорскиеДниССохранениемЗаработка) ТОГДА &ВидРасчетаДонорскиеДниССохранениемЗаработка
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтстранениеОтРаботы) ТОГДА &ВидРасчетаОтстранение
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ЗаболеваниеБезОплаты) ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеВБыту)
	//|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Медосмотр) ТОГДА ПВРМедосмотр.ВидРасчета
	|		КОГДА (Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Медосмотр)) И (ЕСТЬNULL(РасчетныеИКадровыеДанные.ВнутрисменныхЧасов,0)=0) ТОГДА ПВРМедосмотр.ВидРасчета
	|		КОГДА (Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Медосмотр)) И (ЕСТЬNULL(РасчетныеИКадровыеДанные.ВнутрисменныхЧасов,0)<>0) ТОГДА ПВРМедосмотрВнутрисменный.ВидРасчета
	//
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой) ТОГДА NULL
	|	КОНЕЦ КАК ВидРасчета,
	|	РасчетныеИКадровыеДанные.ПорядокРасчетаОтпуска,
	|	РасчетныеИКадровыеДанные.ВидДополнительногоОтпуска,
	|	РасчетныеИКадровыеДанные.ДатаНачалаДоп,
	|	РасчетныеИКадровыеДанные.РабочийГодС,
	|	РасчетныеИКадровыеДанные.РабочийГодПо,
	|	РасчетныеИКадровыеДанные.ПричинаНетрудоспособности,
	//vvv
	//|	РасчетныеИКадровыеДанные.ПроцентОплаты,
	//
	//vvv
	|	ВЫБОР 
	|		КОГДА РасчетныеИКадровыеДанные.Неявка<>ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Заболевание) ТОГДА 100
	|		КОГДА РасчетныеИКадровыеДанные.ПричинаНетрудоспособности=ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве) ТОГДА 100
	|		КОГДА РасчетныеИКадровыеДанные.ПричинаНетрудоспособности=ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоУходу) ТОГДА 100
	|		КОГДА РасчетныеИКадровыеДанные.ПричинаНетрудоспособности=ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам) ТОГДА 100
	|		КОГДА РасчетныеИКадровыеДанные.ПричинаНетрудоспособности=ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПособиеУволенным) ТОГДА 70	
	|		КОГДА РасчетныеИКадровыеДанные.ПричинаНетрудоспособности ЕСТЬ NULL ТОГДА 100	
	|		ИНАЧЕ 80
	|	КОНЕЦ КАК ПроцентОплаты,
	//
	|	РасчетныеИКадровыеДанные.ПервичныйБольничныйЛист,
	|	РасчетныеИКадровыеДанные.ОграничениеПособия,
	|	РасчетныеИКадровыеДанные.НомерВходящегоДокумента,
	|	РасчетныеИКадровыеДанные.СерияВходящегоДокумента,
	//vvv
	|	РасчетныеИКадровыеДанные.ДатаВходящегоДокумента,
	|	РасчетныеИКадровыеДанные.Диагноз,
	|	РасчетныеИКадровыеДанные.ВнутрисменныхЧасов,
	//
	|	РасчетныеИКадровыеДанные.ВидПростоя
	|ИЗ
	|(
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА МАКСИМУМ(РасчетныйДокумент.Ссылка) ЕСТЬ НЕ NULL И МАКСИМУМ(РасчетныйДокумент.Проведен) = Истина ТОГДА ЛОЖЬ КОГДА МАКСИМУМ(КадровыйДокумент.Ссылка) ЕСТЬ НЕ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК Отметка,
	|	Сотрудник,
	|	ЕСТЬNULL(МАКСИМУМ(КадровыеДанныеФизлицо), МАКСИМУМ(РасчетныеДанныеФизлицо)) КАК Физлицо,
	|	ДатаНачала,
	|	ЕСТЬNULL(МАКСИМУМ(КадровыеДанныеДатаОкончания), МАКСИМУМ(РасчетныеДанныеДатаОкончания)) КАК ДатаОкончания,
	|	Неявка,
	|	МАКСИМУМ(КадровыйДокумент) КАК КадровыйДокумент,
	|	МАКСИМУМ(РасчетныйДокумент) КАК РасчетныйДокумент,
	|	МАКСИМУМ(ВидРасчета) КАК ВидРасчета,
	|	ВЫБОР КОГДА НЕ (МАКСИМУМ(ПорядокРасчетаОтпуска) ЕСТЬ NULL) ТОГДА МАКСИМУМ(ПорядокРасчетаОтпуска) КОГДА Неявка = &ОтпускЕжегодный ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням) ИНАЧЕ NULL КОНЕЦ КАК ПорядокРасчетаОтпуска,
	|	ЕСТЬNULL(МАКСИМУМ(РасчетныеДанныеВидДополнительногоОтпуска), МАКСИМУМ(КадровыеДанныеВидДополнительногоОтпуска)) КАК ВидДополнительногоОтпуска,
	|	ЕСТЬNULL(МАКСИМУМ(РасчетныеДанныеДатаНачалаДоп), МАКСИМУМ(КадровыеДанныеДатаНачалаДоп)) КАК ДатаНачалаДоп,
	|	ЕСТЬNULL(МАКСИМУМ(РасчетныеДанныеРабочийГодС), МАКСИМУМ(КадровыеДанныеРабочийГодС)) КАК РабочийГодС,
	|	ЕСТЬNULL(МАКСИМУМ(РасчетныеДанныеРабочийГодПо), МАКСИМУМ(КадровыеДанныеРабочийГодПо)) КАК РабочийГодПо,
	//vvv
	//|	ЕСТЬNULL(МАКСИМУМ(ПричинаНетрудоспособности),ВЫБОР КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам) ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам) КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Заболевание) ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ОбщееЗаболевание) ИНАЧЕ NULL КОНЕЦ) КАК ПричинаНетрудоспособности,
	|	МАКСИМУМ(ПричинаНетрудоспособности) КАК ПричинаНетрудоспособности,
	//
	|	ЕСТЬNULL(МАКСИМУМ(ПроцентОплаты), 100) КАК ПроцентОплаты,
	|	МАКСИМУМ(ПервичныйБольничныйЛист) КАК ПервичныйБольничныйЛист,
	|	ЕСТЬNULL(МАКСИМУМ(ОграничениеПособия), ВЫБОР КОГДА Неявка В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Заболевание), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам)) ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОграниченияПособия.ОбщееОграничение) ИНАЧЕ NULL КОНЕЦ) КАК ОграничениеПособия,
	|	МАКСИМУМ(НомерВходящегоДокумента) КАК НомерВходящегоДокумента,
	|	МАКСИМУМ(СерияВходящегоДокумента) КАК СерияВходящегоДокумента,
	//vvv
	|	МАКСИМУМ(ДатаВходящегоДокумента) КАК ДатаВходящегоДокумента,
	|	МАКСИМУМ(Диагноз) КАК Диагноз,
	|	МАКСИМУМ(ВнутрисменныхЧасов) КАК ВнутрисменныхЧасов,
	//
	|	ЕСТЬNULL(МАКСИМУМ(ВидПростоя), ВЫБОР КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой) ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПростояРаботника.ПоНезависящимПричинам) ИНАЧЕ NULL КОНЕЦ) КАК ВидПростоя
	|ИЗ
	|(
	|ВЫБРАТЬ
	|	КадровыеДанные.Сотрудник КАК Сотрудник,
	|	КадровыеДанные.Состояние КАК Неявка,
	|	КадровыеДанные.ДатаНачала КАК ДатаНачала,
	|	КадровыеДанные.ФизЛицо КАК КадровыеДанныеФизЛицо,
	|	КадровыеДанные.ДатаОкончания КАК КадровыеДанныеДатаОкончания,
	|	КадровыеДанные.КадровыйДокумент КАК КадровыйДокумент,
	|	КадровыеДанные.ВидДополнительногоОтпуска КАК КадровыеДанныеВидДополнительногоОтпуска,
	|	КадровыеДанные.ДатаНачалаДоп КАК КадровыеДанныеДатаНачалаДоп,
	|	КадровыеДанные.РабочийГодС КАК КадровыеДанныеРабочийГодС,
	|	КадровыеДанные.РабочийГодПо КАК КадровыеДанныеРабочийГодПо,
	|	NULL КАК РасчетныеДанныеФизЛицо,
	|	NULL КАК РасчетныеДанныеДатаОкончания,
	|	NULL КАК РасчетныйДокумент,
	|	NULL КАК ВидРасчета,
	|	NULL КАК ПорядокРасчетаОтпуска,
	|	NULL КАК РасчетныеДанныеВидДополнительногоОтпуска,
	|	NULL КАК РасчетныеДанныеДатаНачалаДоп,
	|	NULL КАК РасчетныеДанныеРабочийГодС,
	|	NULL КАК РасчетныеДанныеРабочийГодПо,
	//vvv
	//|	NULL КАК ПричинаНетрудоспособности,
	|	КадровыеДанные.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
	//
	|	NULL КАК ПроцентОплаты,
	|	NULL КАК ПервичныйБольничныйЛист,
	|	NULL КАК ОграничениеПособия,
	//vvv комментируем
	//|	NULL КАК НомерВходящегоДокумента,
	//|	NULL КАК СерияВходящегоДокумента,
	|	КадровыеДанные.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	КадровыеДанные.СерияВходящегоДокумента КАК СерияВходящегоДокумента,
	//
	//vvv
	|	КадровыеДанные.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	КадровыеДанные.Диагноз КАК Диагноз,
	|	КадровыеДанные.ВнутрисменныхЧасов КАК ВнутрисменныхЧасов,
	//
	|	NULL КАК ВидПростоя
	|ИЗ ВТСостояниеРаботников КАК КадровыеДанные
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ 
	|	РасчетныеДанные.Сотрудник КАК Сотрудник,
	|	РасчетныеДанные.Состояние,
	|	РасчетныеДанные.ДатаНачала,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РасчетныеДанные.ФизЛицо КАК РасчетныеДанныеФизЛицо,
	|	РасчетныеДанные.ДатаОкончания КАК РасчетныеДанныеДатаОкончания,
	|	РасчетныеДанные.РасчетныйДокумент,
	|	РасчетныеДанные.ВидРасчета,
	|	РасчетныеДанные.ПорядокРасчетаОтпуска,
	|	РасчетныеДанные.ВидДополнительногоОтпуска КАК РасчетныеДанныеВидДополнительногоОтпуска,
	|	РасчетныеДанные.ДатаНачалаДоп КАК РасчетныеДанныеДатаНачалаДоп,
	|	РасчетныеДанные.РабочийГодС КАК РасчетныеДанныеРабочийГодС,
	|	РасчетныеДанные.РабочийГодПо КАК РасчетныеДанныеРабочийГодПо,
	|	РасчетныеДанные.ПричинаНетрудоспособности,
	|	РасчетныеДанные.ПроцентОплаты,
	|	РасчетныеДанные.ПервичныйБольничныйЛист,
	|	РасчетныеДанные.ОграничениеПособия,
	|	РасчетныеДанные.НомерВходящегоДокумента,
	|	РасчетныеДанные.СерияВходящегоДокумента,
	//vvv
	|	NULL,
	|	NULL,
	|	NULL,
	//
	|	РасчетныеДанные.ВидПростоя
	|ИЗ ВТСписокРасчетныхДокументов КАК РасчетныеДанные
	|) КАК РасчетныеИКадровыеДанные
	|СГРУППИРОВАТЬ ПО Сотрудник,
	|			Неявка,
	|			ДатаНачала
	|) КАК РасчетныеИКадровыеДанные
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(СтрЗаменить(ТекстЗапросаВидРасчета, "<<СпособРасчета>>", "= ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)"), "<<Обозначение>>", " = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка)") + " КАК ПВРКомандировка
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(СтрЗаменить(ТекстЗапросаВидРасчета, "<<СпособРасчета>>", "В (&РасчетыОтпуска)"), "<<Обозначение>>", "В (&УчетВремениОплачиваемыеУчебныеОтпуска)") + " КАК ПВРОтпускУчебный
	|		ПО ИСТИНА
	//vvv
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(СтрЗаменить(ТекстЗапросаВидРасчета, "<<СпособРасчета>>", "= ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)"), "<<Обозначение>>", " = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение)") + " КАК ПВРОтпускУчебныйСреднийЗаработок
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(СтрЗаменить(ТекстЗапросаВидРасчета, "<<СпособРасчета>>", "= ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)"), "<<Обозначение>>", " = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификации)") + " КАК ПВРОтпускУчебныйПК
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(СтрЗаменить(ТекстЗапросаВидРасчета, "<<СпособРасчета>>", "= ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)"), "<<Обозначение>>", " = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВоенноУчебныеСборы)") + " КАК ПВРВоенноУчебныеСборы
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(СтрЗаменить(ТекстЗапросаВидРасчета, "<<СпособРасчета>>", "= ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)"), "<<Обозначение>>", " = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Медосмотр)") + " КАК ПВРМедосмотр
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(СтрЗаменить(ТекстЗапросаВидРасчетаЧасовой, "<<СпособРасчета>>", "= ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)"), "<<Обозначение>>", " = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение)") + " КАК ПВРОтпускУчебныйБезОтрываСреднийЗаработок
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(СтрЗаменить(ТекстЗапросаВидРасчетаЧасовой, "<<СпособРасчета>>", "= ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)"), "<<Обозначение>>", " = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификации)") + " КАК ПВРОтпускУчебныйБезОтрываПК
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(СтрЗаменить(ТекстЗапросаВидРасчетаЧасовой, "<<СпособРасчета>>", "= ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)"), "<<Обозначение>>", " = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Медосмотр)") + " КАК ПВРМедосмотрВнутрисменный
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(СтрЗаменить(ТекстЗапросаВидРасчетаЧасовой, "<<СпособРасчета>>", "= ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)"), "<<Обозначение>>", " = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВоенноУчебныеСборы)") + " КАК ПВРВоенноУчебныеСборыВнутрисменные
	|		ПО ИСТИНА
	//
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(СтрЗаменить(ТекстЗапросаВидРасчета, "<<СпособРасчета>>", "= ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)"), "<<Обозначение>>", " = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВынужденныйПрогул)") + " КАК ПВРВынужденныйПрогул
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(СтрЗаменить(ТекстЗапросаВидРасчета, "<<СпособРасчета>>", "= ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)"), "<<Обозначение>>", " = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ГосударственныеОбязанности)") + " КАК ПВРГосударственныеОбязанности
	|		ПО ИСТИНА
	|";
	
	// Условие на подразделение 
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаОкончания, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизации
		|		ПО РасчетныеИКадровыеДанные.Сотрудник = РаботникиОрганизации.Сотрудник
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	(НЕ (РасчетныеИКадровыеДанные.Неявка ЕСТЬ NULL))
		|";
		
	// Условие на подразделение 
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		ТекстЗапроса = ТекстЗапроса + " И
		|	ВЫБОР
		|		КОГДА  РаботникиОрганизации.ПериодЗавершения <= &ДатаОкончания
		|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
		|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
		|	КОНЕЦ В ИЕРАРХИИ (&ПодразделениеОрганизации)
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	РасчетныеИКадровыеДанные.Сотрудник.Наименование,
	|	РасчетныеИКадровыеДанные.Неявка,
	|	РасчетныеИКадровыеДанные.ДатаНачала,
	|	РасчетныеИКадровыеДанные.КадровыйДокумент,
	|	РасчетныеИКадровыеДанные.РасчетныйДокумент.Проведен УБЫВ // сначала проведенные документы
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапрос()	

Функция СформироватьЗапросПоДопОтпускам()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
    Если ОтбиратьСобытияПоДокументу Тогда
		ДатаН = КадровыйДокумент.Дата;
		Запрос.УстановитьПараметр("Регистратор",			КадровыйДокумент);
		Запрос.УстановитьПараметр("ДатаНачала",				НачалоДня(ДатаН));
		Запрос.УстановитьПараметр("ДатаОкончания",			КонецДня(ДатаН));
	Иначе
		Запрос.УстановитьПараметр("ДатаНачала",				ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания",			КонецДня(ДатаОкончания));
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ПодразделениеОрганизации",	ПодразделениеОрганизации);

	СостояниеРаботниковТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостояниеРаботников.Сотрудник,
	|	СостояниеРаботников.Сотрудник.ФизЛицо КАК ФизЛицо,
    |	ОтпускаДополнительныеОтпуска.ВидДополнительногоОтпуска,
	|	ОтпускаДополнительныеОтпуска.ДатаНачалаДоп,
	|ПОМЕСТИТЬ ВТСостояниеРаботников
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускаОрганизаций.ДополнительныеОтпуска КАК ОтпускаДополнительныеОтпуска
	|		ПО СостояниеРаботников.Регистратор = ОтпускаДополнительныеОтпуска.Ссылка
	|			И СостояниеРаботников.Период = ОтпускаДополнительныеОтпуска.ДатаНачала
	|			И СостояниеРаботников.Сотрудник = ОтпускаДополнительныеОтпуска.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СостояниеРаботников.Сотрудник КАК Сотрудник,
	|			СостояниеРаботников.Период КАК Период,
	|			СостояниеРаботников.Период КАК ДатаНачала
	|		ИЗ
	|			РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
	|		ГДЕ
	|			СостояниеРаботников.Организация = &ГоловнаяОрганизация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СостояниеРаботников.Сотрудник,
	|			СостояниеРаботников.ПериодЗавершения,
	|			СостояниеРаботников.Период
	|		ИЗ
	|			РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковПроверка
	|				ПО СостояниеРаботниковПроверка.Период > СостояниеРаботников.Период
	|					И СостояниеРаботниковПроверка.Период <= СостояниеРаботников.ПериодЗавершения
	|					И СостояниеРаботников.Сотрудник = СостояниеРаботниковПроверка.Сотрудник
	|		ГДЕ
	|			СостояниеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			И СостояниеРаботниковПроверка.Сотрудник ЕСТЬ NULL 
	|			И СостояниеРаботников.Организация = &ГоловнаяОрганизация) КАК СостояниеБудущее
	|		ПО СостояниеРаботников.Период < СостояниеБудущее.Период
	|			И СостояниеРаботников.Сотрудник = СостояниеБудущее.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МИНИМУМ(ДОБАВИТЬКДАТЕ(НамеченныеСобытия.ДатаИзменения, ДЕНЬ, -1)) КАК Период,
	|			СостояниеРаботников.Регистратор КАК Регистратор,
	|			СостояниеРаботников.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НамеченныеСобытияПоПерсоналу КАК НамеченныеСобытия
	|				ПО СостояниеРаботников.Регистратор = НамеченныеСобытия.Регистратор
	|					И СостояниеРаботников.Период <= НамеченныеСобытия.ДатаИзменения
	|					И (ВЫБОР
	|						КОГДА СостояниеРаботников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный)
	|								И НамеченныеСобытия.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.ОтпускЕжегодный)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ)
	|					И СостояниеРаботников.Сотрудник = НамеченныеСобытия.Сотрудник
	|		ГДЕ
	|			СостояниеРаботников.Организация = &ГоловнаяОрганизация";
	Если ОтбиратьСобытияПоДокументу Тогда
		СостояниеРаботниковТекст = СостояниеРаботниковТекст + "
	|			И СостояниеРаботников.Регистратор = &Регистратор";
	Иначе
		СостояниеРаботниковТекст = СостояниеРаботниковТекст + "
	|			И СостояниеРаботников.Регистратор.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	КонецЕсли;	
	СостояниеРаботниковТекст = СостояниеРаботниковТекст + "
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СостояниеРаботников.Регистратор,
	|			СостояниеРаботников.НомерСтроки) КАК БудущиеНамеченныеСобытия
	|		ПО СостояниеРаботников.Регистратор = БудущиеНамеченныеСобытия.Регистратор
	|			И СостояниеРаботников.НомерСтроки = БудущиеНамеченныеСобытия.НомерСтроки
	|ГДЕ
	|	(НЕ СостояниеРаботников.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.НеРаботает), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком)))
	|	И СостояниеРаботников.Организация = &ГоловнаяОрганизация";
	Если ОтбиратьСобытияПоДокументу Тогда
		СостояниеРаботниковТекст = СостояниеРаботниковТекст + "
	|	И СостояниеРаботников.Регистратор = &Регистратор";
	Иначе
		СостояниеРаботниковТекст = СостояниеРаботниковТекст + "
	|	И СостояниеРаботников.Регистратор.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	КонецЕсли;	
	СостояниеРаботниковТекст = СостояниеРаботниковТекст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	СостояниеРаботников.Организация,
	|	СостояниеРаботников.Регистратор,
	|	СостояниеРаботников.Состояние,
	|	СостояниеРаботников.Период,
	|	БудущиеНамеченныеСобытия.Период,
	|	ОтпускаРаботниковОрганизации.ВидДополнительногоОтпуска,
	|	ОтпускаРаботниковОрганизации.ДатаНачалаДоп,
	|	ОтпускаРаботниковОрганизации.РабочийГодС,
	|	ОтпускаРаботниковОрганизации.РабочийГодПо,
	|	СостояниеРаботников.Сотрудник";
	Запрос.Текст = СостояниеРаботниковТекст;
	Запрос.Выполнить();

	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ

// Заполняет т.ч. обработки кадровыми и расчетными документами
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Булево - Истина, если успешно выполнено заполнение, иначе Ложь
//
Функция Автозаполнение() Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо указать организацию!");
		Возврат Ложь;
	КонецЕсли;
	
	РезультатЗапроса = СформироватьЗапрос();
    
	Неявки.Загрузить(РезультатЗапроса.Выгрузить());
	
	// обработаем табличную часть, проверяя на дублирование документов
	ПредыдущийКадровыйДокумент	= Неопределено;
	ПредыдущийСотрудник			= Неопределено;
	ПредыдущаяНеявка			= Неопределено;
	ПредыдущаяДатаНачала		= Неопределено;
	
	Для Каждого СтрокаТаблицы Из Неявки Цикл
		Если ПредыдущийКадровыйДокумент = СтрокаТаблицы.КадровыйДокумент
			 И ПредыдущийСотрудник = СтрокаТаблицы.Сотрудник
			 И ПредыдущаяНеявка = СтрокаТаблицы.Неявка
			 И ПредыдущаяДатаНачала = СтрокаТаблицы.ДатаНачала Тогда
			
			// полностью повторились ключевые реквизиты - отметим как дубль
			СтрокаТаблицы.ДублирующаясяСтрока = Истина;
			СтрокаТаблицы.Отметка = Ложь;
		КонецЕсли;
					
		// Запоминаем текущие значения ключевых реквизитов
		ПредыдущийКадровыйДокумент	= СтрокаТаблицы.КадровыйДокумент;
		ПредыдущийСотрудник			= СтрокаТаблицы.Сотрудник;
		ПредыдущаяНеявка			= СтрокаТаблицы.Неявка;
		ПредыдущаяДатаНачала		= СтрокаТаблицы.ДатаНачала;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Процедура создает документы по пустым строкам табличной части
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
Процедура СоздатьДокументы() Экспорт

	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	РазмерПособияПоУходуДо1_5Лет = РегистрыСведений.ГосударственныеПособия.ПолучитьПоследнее(ДатаОкончания, Новый Структура("ВидПособия", Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3Лет)).Размер;
	РазмерПособияПоУходуДо3Лет = РегистрыСведений.ГосударственныеПособия.ПолучитьПоследнее(ДатаОкончания, Новый Структура("ВидПособия", Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет)).Размер;
	
	СписокРасчетовОтпуска = Новый СписокЗначений;
	СписокРасчетовОтпуска.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
	СписокРасчетовОтпуска.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);

	Для Каждого СтрокаТаблицы Из Неявки Цикл

		Если СтрокаТаблицы.Отметка 
			 И ЗначениеЗаполнено(СтрокаТаблицы.КадровыйДокумент) 
			 И НЕ ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) Тогда
			
			ТипРасчетногоДокумента 	= ТипЗнч(СтрокаТаблицы.РасчетныйДокумент);
			ВидНеявки 		= СтрокаТаблицы.Неявка;
			СтрокаСообщенияОбОшибке = СтрокаТаблицы.Сотрудник.Наименование + " " + СтрокаТаблицы.Неявка + " от " + Формат(СтрокаТаблицы.ДатаНачала,"ДФ=дд.ММ.гггг")+": ";
			
			Если ТипРасчетногоДокумента = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту") Тогда
				
				РасчетныйДокумент = Документы.НачислениеПоБольничномуЛисту.СоздатьДокумент();
				РасчетныйДокумент.ПериодРегистрации 		= ПериодРегистрации;
				РасчетныйДокумент.Сотрудник					= СтрокаТаблицы.Сотрудник;
				РасчетныйДокумент.Физлицо					= СтрокаТаблицы.Физлицо;
				РасчетныйДокумент.ПричинаНетрудоспособности	= СтрокаТаблицы.ПричинаНетрудоспособности;
				РасчетныйДокумент.ПроцентОплаты 			= СтрокаТаблицы.ПроцентОплаты;
				РасчетныйДокумент.ПервичныйБольничныйЛист 	= СтрокаТаблицы.ПервичныйБольничныйЛист;
				РасчетныйДокумент.ДатаНачала 				= СтрокаТаблицы.ДатаНачала;
				//vvv
				РасчетныйДокумент.ДатаНачалаБольничногоЛиста= СтрокаТаблицы.ДатаНачала;
				РасчетныйДокумент.ВидОграниченияЗаработка   = Перечисления.ВидыОграниченияЗаработка.ВРазмере4СреднихЗарплат;
				РасчетныйДокумент.ВидУчетаВремени           = Перечисления.ВидыУчетаВремени.ПоЧасам;
				РасчетныйДокумент.ВидРасчета                = РасчетныйДокумент.ПолучитьВидРасчетаОтПричиныНетрудоспособности(РасчетныйДокумент.ПричинаНетрудоспособности);  
				РасчетныйДокумент.ПериодРасчетаСреднегоЗаработкаОкончание = КонецМесяца(НачалоМесяца(РасчетныйДокумент.ДатаНачала) - 1);
				РасчетныйДокумент.ПериодРасчетаСреднегоЗаработкаНачало = НачалоМесяца(ДобавитьМесяц(РасчетныйДокумент.ДатаНачала,-РасчетныйДокумент.ВидРасчета.ПериодРасчетаСреднегоЗаработка));
				РасчетныйДокумент.ДнейОплаты = (СтрокаТаблицы.ДатаОкончания - СтрокаТаблицы.ДатаНачала) / 86400 + 1;
				РасчетныйДокумент.Диагноз                   = СтрокаТаблицы.Диагноз;
				РасчетныйДокумент.Дата                      = СтрокаТаблицы.ДатаВходящегоДокумента;
				РасчетныйДокумент.ДатаВыдачиБольничногоЛиста= СтрокаТаблицы.ДатаВходящегоДокумента;
				//
				РасчетныйДокумент.ДатаОкончания 			= СтрокаТаблицы.ДатаОкончания;
				РасчетныйДокумент.ОграничениеПособия 		= СтрокаТаблицы.ОграничениеПособия;
				РасчетныйДокумент.НомерВходящегоДокумента 	= СтрокаТаблицы.НомерВходящегоДокумента;
				РасчетныйДокумент.СерияВходящегоДокумента 	= СтрокаТаблицы.СерияВходящегоДокумента;
			
			ИначеЕсли ТипРасчетногоДокумента = Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку") Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчета) 	
					 Или СтрокаТаблицы.ВидРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщенияОбОшибке+"необходимо указать вид расчета по среднему заработку");
					Продолжить;
				КонецЕсли;
			
				РасчетныйДокумент = Документы.ОплатаПоСреднемуЗаработку.СоздатьДокумент();
				РасчетныйДокумент.ПериодРегистрации 		= ПериодРегистрации;
				РасчетныйДокумент.Сотрудник					= СтрокаТаблицы.Сотрудник;
				РасчетныйДокумент.Физлицо					= СтрокаТаблицы.Физлицо;
				РасчетныйДокумент.ВидРасчета 				= СтрокаТаблицы.ВидРасчета;
				РасчетныйДокумент.ПроцентОплаты 			= СтрокаТаблицы.ПроцентОплаты;
				РасчетныйДокумент.СпособРегистрацииВремени 	= Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
				//vvv
				Если СтрокаТаблицы.ВнутрисменныхЧасов<>0 Тогда
					РасчетныйДокумент.СпособРегистрацииВремени 	= Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены;
					РасчетныйДокумент.ОплачиватьЧасов=СтрокаТаблицы.ВнутрисменныхЧасов;
				КОнецЕсли;
				//
				РасчетныйДокумент.ДатаНачала				= СтрокаТаблицы.ДатаНачала;
				РасчетныйДокумент.ДатаОкончания				= СтрокаТаблицы.ДатаОкончания;
				//vvv
				РасчетныйДокумент.ВидУчетаВремени		    = Перечисления.ВидыУчетаВремени.ПоЧасам;
				//
			
			ИначеЕсли ТипРасчетногоДокумента = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций") Тогда
				
				//vvv комментируем, учебный отпуск считаем как обычный
				//Если СтрокаТаблицы.Неявка = Перечисления.СостоянияРаботникаОрганизации.ОтпускУчебный Тогда
				//	
				//	Если ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчета) 
				//		 И СписокРасчетовОтпуска.НайтиПоЗначению(СтрокаТаблицы.ВидРасчета.СпособРасчета) = Неопределено Тогда
				//		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщенияОбОшибке+"для учебного отпуска необходимо указать вид расчета по среднему заработку для отпуска");
				//		Продолжить;
				//	КонецЕсли;
				//	
				//	РасчетныйДокумент = Документы.НачислениеОтпускаРаботникамОрганизаций.СоздатьДокумент();
				//	РасчетныйДокумент.ПериодРегистрации						= ПериодРегистрации;
				//	РасчетныйДокумент.Физлицо								= СтрокаТаблицы.Физлицо;
				//	РасчетныйДокумент.Сотрудник								= СтрокаТаблицы.Сотрудник;
				//	//РасчетныйДокумент.ДатаНачалаДополнительногоОтпуска		= СтрокаТаблицы.ДатаНачала;
				//	//РасчетныйДокумент.ДатаОкончанияДополнительногоОтпуска	= СтрокаТаблицы.ДатаОкончания;
				//	//РасчетныйДокумент.ВидРасчетаДополнительногоОтпуска		= СтрокаТаблицы.ВидРасчета;
				//	//РасчетныйДокумент.ПроцентОплатыДополнительногоОтпуска	= СтрокаТаблицы.ПроцентОплаты;
				//	
				//Иначе
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	СУММА(РегламентированныйПроизводственныйКалендарь.КалендарныеДни) КАК КоличествоДнейОтпуска
					|ИЗ
					|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
					|ГДЕ
					|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачалаОтпуска И &ДатаОкончанияОтпуска";	

					Если ЗначениеЗаполнено(СтрокаТаблицы.ВидДополнительногоОтпуска) 
						 И СписокРасчетовОтпуска.НайтиПоЗначению(СтрокаТаблицы.ВидДополнительногоОтпуска.СпособРасчета) = Неопределено Тогда
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщенияОбОшибке+"для дополнительного отпуска необходимо указать вид расчета по среднему заработку для отпуска");
						Продолжить;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчетаОсновногоОтпуска) тогда
						ВидРасчетаОсновногоОтпуска = СтрокаТаблицы.ВидРасчетаОсновногоОтпуска;
					Иначе
						ВидРасчетаОсновногоОтпуск = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни;
					КонецЕсли;
					//vvv
					Если ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчета) ТОгда 
						Если СписокРасчетовОтпуска.НайтиПоЗначению(СтрокаТаблицы.ВидРасчета.СпособРасчета) = Неопределено Тогда
							ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщенияОбОшибке+"для учебного отпуска необходимо указать вид расчета по среднему заработку для отпуска");
							Продолжить;
						Иначе
							ВидРасчетаОсновногоОтпуск=СтрокаТаблицы.ВидРасчета;
							ВидРасчетаОсновногоОтпуска=ВидРасчетаОсновногоОтпуск;
						КонецЕсли;						
					КонецЕсли;
					//
					РасчетныйДокумент = Документы.НачислениеОтпускаРаботникамОрганизаций.СоздатьДокумент();
					РасчетныйДокумент.ПериодРегистрации					= ПериодРегистрации;
					РасчетныйДокумент.Сотрудник							= СтрокаТаблицы.Сотрудник;
					РасчетныйДокумент.Физлицо							= СтрокаТаблицы.Физлицо;
					РасчетныйДокумент.ВидРасчетаОсновногоОтпуска		= ВидРасчетаОсновногоОтпуск;
					РасчетныйДокумент.РабочийГодС						= СтрокаТаблицы.РабочийГодС;
					РасчетныйДокумент.РабочийГодПо						= СтрокаТаблицы.РабочийГодПо;
					
					ПериодРасчетаСреднегоЗаработкаОкончание = КонецМесяца(НачалоМесяца(СтрокаТаблицы.ДатаНачала) - 1);
					ГодНачала = ГОД(НачалоМесяца(СтрокаТаблицы.ДатаНачала))-1;
					МесяцНачала = Месяц(НачалоМесяца(СтрокаТаблицы.ДатаНачала));
					ДеньНачала = День(НачалоМесяца(СтрокаТаблицы.ДатаНачала)); 
					ПериодРасчетаСреднегоЗаработкаНачало = Дата(ГодНачала,МесяцНачала,ДеньНачала);


					Если  ЗначениеЗаполнено(СтрокаТаблицы.ПериодРасчетаСреднегоЗаработкаНачало) тогда
						РасчетныйДокумент.ПериодРасчетаСреднегоЗаработкаНачало = СтрокаТаблицы.ПериодРасчетаСреднегоЗаработкаНачало;	
					Иначе
						РасчетныйДокумент.ПериодРасчетаСреднегоЗаработкаНачало 	  =  ПериодРасчетаСреднегоЗаработкаНачало;	
					КонецЕсли;
					
					Если  ЗначениеЗаполнено(СтрокаТаблицы.ПериодРасчетаСреднегоЗаработкаОкончание) тогда
						РасчетныйДокумент.ПериодРасчетаСреднегоЗаработкаОкончание = СтрокаТаблицы.ПериодРасчетаСреднегоЗаработкаОкончание;
					Иначе
						РасчетныйДокумент.ПериодРасчетаСреднегоЗаработкаОкончание = ПериодРасчетаСреднегоЗаработкаОкончание;
					КонецЕсли;

					
					Если СтрокаТаблицы.ДатаНачала <> СтрокаТаблицы.ДатаНачалаДоп Тогда
						РасчетныйДокумент.ДатаНачалаОсновногоОтпуска = СтрокаТаблицы.ДатаНачала;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаНачалаДоп) Тогда
						РасчетныйДокумент.ДатаОкончанияОсновногоОтпуска 		= СтрокаТаблицы.ДатаОкончания;
						Запрос.УстановитьПараметр("ДатаНачалаОтпуска", СтрокаТаблицы.ДатаНачала);
						Запрос.УстановитьПараметр("ДатаОкончанияОтпуска", СтрокаТаблицы.ДатаОкончания);
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							РасчетныйДокумент.КоличествоДнейОсновногоОтпуска = Выборка.КоличествоДнейОтпуска;
						КонецЕсли;
						//vvv
						РасчетныйДокумент.ДатаОкончанияСУчетомДопОтпусков=СтрокаТаблицы.ДатаОкончания;						
						//
					Иначе
						Если СтрокаТаблицы.ДатаНачала <> СтрокаТаблицы.ДатаНачалаДоп Тогда
							РасчетныйДокумент.ДатаОкончанияОсновногоОтпуска 		= СтрокаТаблицы.ДатаНачалаДоп - мДлинаСуток;
							Запрос.УстановитьПараметр("ДатаНачалаОтпуска", СтрокаТаблицы.ДатаНачала);
							Запрос.УстановитьПараметр("ДатаОкончанияОтпуска", СтрокаТаблицы.ДатаНачалаДоп - мДлинаСуток);
							Выборка = Запрос.Выполнить().Выбрать();
							Если Выборка.Следующий() Тогда
								РасчетныйДокумент.КоличествоДнейОсновногоОтпуска = Выборка.КоличествоДнейОтпуска;
							КонецЕсли;

						КонецЕсли;
						Строка = РасчетныйДокумент.ДополнительныеОтпуска.Добавить();
						Строка.ДатаНачалаДополнительногоОтпуска 	= СтрокаТаблицы.ДатаНачалаДоп;
						Строка.ДатаОкончанияДополнительногоОтпуска 	= СтрокаТаблицы.ДатаОкончания;
						Запрос.УстановитьПараметр("ДатаНачалаОтпуска", СтрокаТаблицы.ДатаНачалаДоп);
						Запрос.УстановитьПараметр("ДатаОкончанияОтпуска", СтрокаТаблицы.ДатаОкончания);
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							Строка.КоличествоДнейДополнительногоОтпуска = Выборка.КоличествоДнейОтпуска;
						КонецЕсли;
						Строка.ВидРасчетаДополнительногоОтпуска 	= СтрокаТаблицы.ВидДополнительногоОтпуска;
						Строка.ПроцентОплатыДополнительногоОтпуска 	= СтрокаТаблицы.ПроцентОплаты;
					КонецЕсли;
					
				//КонецЕсли;
				
			ИначеЕсли ТипРасчетногоДокумента = Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда
				РасчетныйДокумент = Документы.ОтпускПоУходуЗаРебенком.СоздатьДокумент();
				РасчетныйДокумент.Сотрудник		= СтрокаТаблицы.Сотрудник;
				РасчетныйДокумент.Физлицо		= СтрокаТаблицы.Физлицо;
				РасчетныйДокумент.ДатаДействия	= СтрокаТаблицы.ДатаНачала;
				РасчетныйДокумент.ДатаНачала	= СтрокаТаблицы.ДатаНачала;
				РасчетныйДокумент.ДатаОкончания	= СтрокаТаблицы.ДатаОкончания;
			
			ИначеЕсли ВидНеявки = Перечисления.СостоянияРаботникаОрганизации.Простой 
					  И ЗначениеЗаполнено(СтрокаТаблицы.ВидПростоя) Тогда
				// оплачиваемый простой
				РасчетныйДокумент = Документы.РегистрацияПростоевРаботниковОрганизаций.СоздатьДокумент();
				РасчетныйДокумент.ПериодРегистрации		= ПериодРегистрации;
				РасчетныйДокумент.Сотрудник				= СтрокаТаблицы.Сотрудник;
				РасчетныйДокумент.Физлицо				= СтрокаТаблицы.Физлицо;
				РасчетныйДокумент.ВидПростоя			= СтрокаТаблицы.ВидПростоя;
				РасчетныйДокумент.ДатаНачала			= СтрокаТаблицы.ДатаНачала;
				РасчетныйДокумент.ДатаОкончания			= СтрокаТаблицы.ДатаОкончания;
				РасчетныйДокумент.СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
				
			Иначе // прочие невыходы
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчета)
					 И ВидНеявки = Перечисления.СостоянияРаботникаОрганизации.Простой Тогда
					// попробуем найти подходящий вид расчета для простоя
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("РасчетНулеваяСумма", Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
					
					Запрос.Текст = "
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ОсновныеНачисления.Ссылка КАК ВидРасчета
					|ИЗ
					|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
					|ГДЕ
					|	ОсновныеНачисления.СпособРасчета = &РасчетНулеваяСумма И
					|	ОсновныеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботника)
					|";
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						СтрокаТаблицы.ВидРасчета = Выборка.ВидРасчета;
					КонецЕсли;
				КонецЕсли;
			
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчета) 
					 Или СтрокаТаблицы.ВидРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщенияОбОшибке+"необходимо выбрать вид расчета по нулевой сумме");
					Продолжить;
				КонецЕсли;
			
				РасчетныйДокумент = Документы.НевыходыВОрганизациях.СоздатьДокумент();
				//РасчетныйДокумент.ПериодРегистрации = НачалоМесяца(ДатаНачала);
				//vvv
				РасчетныйДокумент.ПериодРегистрации = ПериодРегистрации;
				//
				РасчетныйДокумент.СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
				//vvv
				Если (СтрокаТаблицы.ВнутрисменныхЧасов<>0) И (СтрокаТаблицы.ДатаОкончания=СтрокаТаблицы.ДатаНачала) и (СтрокаТаблицы.ВидРасчета=ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет) Тогда
					РасчетныйДокумент.СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены;
					
					//подменим отпуск за свой счет внутрисменным отпуском за свой счет
					
					Запрос=Новый Запрос;
					Запрос.УстановитьПараметр("РасчетНулеваяСумма", Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
					
					Запрос.Текст = "
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ОсновныеНачисления.Ссылка КАК ВидРасчета
					|ИЗ
					|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
					|ГДЕ
					|	ОсновныеНачисления.СпособРасчета = &РасчетНулеваяСумма И
					|	ОсновныеНачисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное) И
					|	ОсновныеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоСемейноБытовым)
					|";
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						СтрокаТаблицы.ВидРасчета = Выборка.ВидРасчета;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчета)  Тогда
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщенияОбОшибке+"необходимо выбрать вид расчета для почасового отгула");
						Продолжить;
					КонецЕсли;
				
				КонецЕсли;
				//
				
				СтрокаНачисления = РасчетныйДокумент.Начисления.Добавить();
				СтрокаНачисления.Авторасчет			= Истина;
				СтрокаНачисления.Сотрудник			= СтрокаТаблицы.Сотрудник;
				СтрокаНачисления.Физлицо			= СтрокаТаблицы.Физлицо;
				СтрокаНачисления.ДатаНачала 		= СтрокаТаблицы.ДатаНачала;
				СтрокаНачисления.ДатаОкончания 		= СтрокаТаблицы.ДатаОкончания;
				СтрокаНачисления.ДатаНачалаСобытия 	= СтрокаТаблицы.ДатаНачала;
				//vvv
				СтрокаНачисления.ОплачиватьЧасов 	= СтрокаТаблицы.ВнутрисменныхЧасов;
				//
				
				// Определим подразделение работника на дату события
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Сотрудник",			СтрокаТаблицы.Сотрудник);
				Запрос.УстановитьПараметр("Организация",		ГоловнаяОрганизация);
				Запрос.УстановитьПараметр("ДатаАктуальности",	СтрокаТаблицы.ДатаНачала);
				
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				//vvv
				|	ВЫБОР
				|		КОГДА  РаботникиОрганизации.ПериодЗавершения <= &ДатаАктуальности
				|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|		ТОГДА РаботникиОрганизации.ДолжностьЗавершения
				|		ИНАЧЕ РаботникиОрганизации.Должность
				|	КОНЕЦ КАК Должность,
				//
				|	ВЫБОР
				|		КОГДА  РаботникиОрганизации.ПериодЗавершения <= &ДатаАктуальности
				|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|		ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
				|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
				|	КОНЕЦ КАК ПодразделениеОрганизации
				|ИЗ
				|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК РаботникиОрганизации
				|";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СтрокаНачисления.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
					//vvv
					СтрокаНачисления.Должность = Выборка.Должность;
					//
				КонецЕсли;
				
				СтрокаНачисления.ВидРасчета = СтрокаТаблицы.ВидРасчета;
				
				РазницаВМесяцах = (Год(СтрокаНачисления.ДатаОкончания)*12 + Месяц(СтрокаНачисления.ДатаОкончания)) - (Год(СтрокаНачисления.ДатаНачала)*12 + Месяц(СтрокаНачисления.ДатаНачала));
				Если РазницаВМесяцах > 0 Тогда
					ПроведениеРасчетов.РазбитьСтрокуНачисленийНаПомесячныеЗаписи(СтрокаНачисления, РасчетныйДокумент.Начисления);
				КонецЕсли;
			КонецЕсли;
			
			РасчетныйДокумент.Организация	= Организация;
			РасчетныйДокумент.Ответственный	= глЗначениеПеременной("глТекущийПользователь");
			//vvv добавим если
			Если Не ЗначениеЗаполнено(РасчетныйДокумент.Дата) Тогда
				РасчетныйДокумент.Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
			КонецЕсли;			
			РасчетныйДокумент.УстановитьНовыйНомер();
			РасчетныйДокумент.Записать();
			
			Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументОбъект.ОтпускПоУходуЗаРебенком") Тогда
				РасчетныйДокумент.ЗаполнитьПлановыйНачисленияУдержания(РазмерПособияПоУходуДо1_5Лет,РазмерПособияПоУходуДо3Лет);
				РасчетныйДокумент.Записать();
			КонецЕсли;
			
			СтрокаТаблицы.РасчетныйДокумент	= РасчетныйДокумент.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СоздатьДокументы()

// Процедура рассчитывает отмеченные документы
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
Процедура РассчитатьДокументы() Экспорт
	
	КоличествоСтрок =  Неявки.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;

	РассчитываемыеТаблицы = Новый Структура("Начисления,РасчетСреднего",Истина,Истина);
	НомерТекущейСтроки = 0;

	Для Каждого СтрокаТаблицы Из Неявки Цикл
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		Если СтрокаТаблицы.Отметка И ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) Тогда
			Если ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда
				Продолжить
			КонецЕсли;
			
			РасчетныйДокумент = СтрокаТаблицы.РасчетныйДокумент.ПолучитьОбъект();			
			Если РасчетныйДокумент.ПометкаУдаления Тогда
				РасчетныйДокумент.УстановитьПометкуУдаления(Ложь);
			ИначеЕсли РасчетныйДокумент.Проведен Тогда
				РасчетныйДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения)
			КонецЕсли;
			// авторасчет документа
			Попытка
				Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументОбъект.НевыходыВОрганизациях") Тогда
					РасчетныйДокумент.Рассчитать();
				Иначе
					РасчетныйДокумент.Рассчитать(РассчитываемыеТаблицы);
				КонецЕсли;
				РасчетныйДокумент.Записать(РежимЗаписиДокумента.Запись);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // РассчитатьДокументы()

// Процедура проводит отмеченные документы
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
Процедура ПровестиДокументы() Экспорт

	НомерТекущейСтроки = 0;
	Для Каждого СтрокаТаблицы Из Неявки Цикл
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		
		Если СтрокаТаблицы.Отметка и ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) Тогда
			РасчетныйДокумент = СтрокаТаблицы.РасчетныйДокумент.ПолучитьОбъект();
			Если РасчетныйДокумент.ПометкаУдаления Тогда
				РасчетныйДокумент.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			Попытка
				РасчетныйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Продолжить;
			КонецПопытки;
			СтрокаТаблицы.Отметка = Не СтрокаТаблицы.Отметка;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПровестиДокументы()

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ОБЪЕКТА 

мДлинаСуток = 86400; // в секундах

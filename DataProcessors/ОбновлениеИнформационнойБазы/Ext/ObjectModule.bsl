//////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьОбновление() Экспорт

	#Если Клиент Тогда
		
	// Подготовка к выводу формы описания обновлений.

	ФормаОписаниеОбновлений    = ПолучитьФорму("ОписаниеОбновлений");
	МакетОписаниеОбновлений    = ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений);
	ДокументОписаниеОбновлений = ФормаОписаниеОбновлений.ЭлементыФормы.ДокументОписаниеОбновлений;
	ДокументОписаниеОбновлений.Очистить();

	#КонецЕсли

	// Обновление информационной базы.
	// Последовательно вызываются функции для обновления с соответствующей версии.
	
	//Вызов функций заполнения данных для пустой информационной базы
	Если Константы.НомерВерсииКонфигурации.Получить() = "" Тогда

		СтрСообщения = "начальное заполнение информационной базы версии " + Метаданные.Версия;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		НачатьТранзакцию();
		
		#Если Клиент Тогда
			ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#Иначе
			ЗаполнитьПустуюИБ();
		#КонецЕсли
		
		Константы.НомерВерсииКонфигурации.Установить(Метаданные.Версия); // после заполнения пустой ИБ установим последний номер версии

		ЗафиксироватьТранзакцию();

		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		#Если Клиент Тогда
			
		Пока не флПоискВключен Цикл
			ТекстВопроса =
			"Обнаружено два соединения с информационной базой, отчего не удалось подключить средства полнотекстового поиска.
			|Закройте связанный с этой информационной базой Конфигуратор и повторите попытку подключения.
			|
			|Включить полнотекстовый поиск еще раз?";
			
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Попытка
					ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
					флПоискВключен = Истина;
				Исключение
				КонецПопытки;
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// Не обязательное заполнение ИБ
		ТекстВопроса = "Произвести первоначальное заполнение информационной базы?";
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда

			// Вывод строк описания обновлений.
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("ШапкаЗаполнениеПустойИБ"));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок("Заполнение пустой ИБ");
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("ЗаполнениеПустойИБ"));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();

		КонецЕсли;
			
		#КонецЕсли
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелизаИБ = ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	
	НоваяВерсияИБ = "2.5.1.18";
	
	Если ТекущаяВерсияИБ = "2.0.0.0" ИЛИ ТекущаяВерсияИБ = "2.5.1.15" ИЛИ ТекущаяВерсияИБ = "2.5.1.16" ИЛИ ТекущаяВерсияИБ = "2.5.1.17" тогда
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
	КонецЕсли;
	
	Если Лев(НомерРелизаИБ,3) = "1.0" Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//ОбновитьНаименованияСоставляющихСреднегоЗаработка();
		
		//ЗаполнитьРесурсУчетЗадолженностиУчетнойПолитики();
		
		//Заполнение табличной части в ПлатежноеПоручениеИсходящие, РасходныйКассовыйОрдер, ДепонированиеОрганизаций, СписаниеДепонентов.
		#Если Клиент Тогда
			Состояние("Заполняются реквизиты журнала кассовых документов");
		#КонецЕсли
		ДляЖурналаКассовыхДокументов();
		
		//Процедура переноса данных из реквизитов УдалитьПричинаИзмененияСостояния и УдалитьОбособленноеПодразделение в ресурсы ПричинаИзмененияСостояния и  ОбособленноеПодразделение
		ПеренестиДанныеЗавершенияВРегистреРаботникиОрганизаций();
		
		//обработка табличных реквизитов УдалитьПроизошедшееСобытие ->  НапомнитьПоЗавершении
		ПеренестиДанныеПроизошедшееСобытиеВДокументах();
		
		ИсправитьПериодЗавершения();
		
		ЗаполнитьРеквизитВедомостьВРегистреВзаиморасчетыСРаботникамиОрганизаций();
		
		//ЗаполнитьИзмерениеСтавкаВРегистреНДФЛКЗачету();

		//создание и сохранение настроек отчетов СтатистикаКадровОрганизации и ДвижениеРаботников  
		ДобавитьИСохранитьНастройкиОтчета();
		
		// Сначала необходимо выполнить создание сотрудников в регл учете
		ОбновитьСотрудниковОрганизаций();
		
		// перенесем данные из регистра сведений УдалитьПроцентДеятельностиЕНВД в ПроцентДеятельностиЕНВДСотрудников
		//ПереносДанныхПроцентДеятельностиЕНВД();
		
		// В упр учете создаются сотрудники только в том случае, если нет подходящего
		// сотрудника, созданного при обновлении регл учета
		ОбновитьСотрудников();
		
		ОбновитьДоговорников();
		
		СоздатьСотрудниковБезПриказовОПриеме();
		
		ОчиститьРегистрыОтФизлицаПриказа();
		
		// заполним организацию в перерасчетах
		#Если Клиент Тогда
			Состояние("Заполняется реквизит ""Организация"" в перерасчетах регистров расчетов");
		#КонецЕсли
		ЗаполнитьОрганизациюВПерерасчетах();
		
		// В регистре сведений Работники и РаботникиОрганизаций
		// установить значения реквизита Должность значением, которое было до увольнения
		#Если Клиент Тогда
			Состояние("Заполняется реквизит ""Должность"" регистра сведений ""Работники""");
		#КонецЕсли
		ЗаполнитьДолжностьВРегистреРаботники();
		#Если Клиент Тогда
			Состояние("Заполняется реквизит ""Должность"" регистра сведений ""Работники организаций""");
		#КонецЕсли
		ЗаполнитьДолжностьВРегистреРаботникиОрганизации();
		
		// Изменения по Учету рабочего времени
		ЗаполнитьРеквизитыПоУчетуРабочегоВремени();
		
		//ПереносРеквизитовВидовРасчета();
		
		// Начисления, имеющие "плановый" характер (например, РК и северная надбавка), переносим в ПВР основных начислений
		ПереносПлановыхДополнительныхНачислений();
		
		ПроставитьЗначенияДобавленныхРеквизитов();
		ОбработатьЗаписиРегистраОсновныеНачисленияРаботниковОрганизаций();
		
		// Обновить предопределенные вопросы подсистемы Анкетирование
		ЗаполнитьРеквизитыВопросов(Ложь);
		
		ВозможностьИзмененияНеУказана = Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка();
		Числовой = Перечисления.ТипыПоказателейСхемМотивации.Числовой;
		
		УстановитьРеквизитыПоказателяСхемМотивации(Справочники.ПоказателиСхемМотивации.Стаж.ПолучитьОбъект(), Числовой, ВозможностьИзмененияНеУказана);
		
		#Если Клиент Тогда
			Состояние("Преобразование предметов переписки в задачи");
		#КонецЕсли
		СозданиеЗадачПоСоискателям();
		
		#Если Клиент Тогда
			Состояние("Преобразование кандидатов в задачи");
		#КонецЕсли
		КонвертироватьКандидатовВЗадачи();
		
		#Если Клиент Тогда
			Состояние("Обрабатываются документы ""Результат испытательного срока""");
		#КонецЕсли
		КонвертироватьДокументРезультатИспытательногоСрока();
		
		#Если Клиент Тогда
			Состояние("Обрабатываются документы по работе с кандидатами");
		#КонецЕсли
		КонвертироватьДвиженияПоКандидатам();
		
		// Конвертация должностей
		ОбновитьДолжности();
		
		// Объединение намеченных событий по персоналу
		КонвертироватьНамеченныеСобытияПоПерсоналуОрганизаций();
		
		// Проставить Назначение учетных записей
		УстановитьНазначенияУчетныхЗаписей();
		
		// Дописать движения, необходимые для механизма контроля периодов
		ЗаполнитьРегистрыКонтроляПериодов();
		
		// Заполнить реквизиты у предопределенных элементов справочника
		НачальноеЗаполнениеСправочникаДокументыУдостоверяющиеЛичность();
		
		// Заменить ссылки на предопределенные элементы
		ЗаменитьСсылкиНаДокументыУдостоверяющиеЛичность();
		
		#Если Клиент Тогда
			Состояние("Преобразование настроек ограничения прав пользователей");
		#КонецЕсли
		КонвертироватьНастройкиОграниченияПравДоступа();
		#Если Клиент Тогда
			Состояние("Обновление элементов ПВХ.Назначения свойств категорий объектов");
		#КонецЕсли
		ОбновитьЭлементыПВХНазначенияСвойствКатегорийОбъектов();
		
		// заполнение списка внешних компонент, для склонения ФИО по падежам
		ЗаполнитьСписокВнешнихКомпонент();
		
		НачальноеЗаполнениеСправочникаКлассификаторСтранМира();
		
		// константа - префикс информационной базы
		СтарыйПрефикс = ПланыОбмена.Полный.ЭтотУзел().УдалитьПрефиксУзла;
		Если Не ПустаяСтрока(СтарыйПрефикс)
			И ПустаяСтрока(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить()) Тогда 
			
			Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить(СтарыйПрефикс);	
			
		КонецЕсли;
						
		//ИсправитьНалогообложениеПоЕСН();
		
		//ИсправитьУстаревшиеВР();
		
		ЗаполнитьВидОперацииВНачисленииЗарплатыРаботникам();
		
		//ИзменитьУчетПособийСоцСтрахованияАвгуст2007();
		
		ДозаполнитьРегистрыЗанятостиФизлиц();
		
		#Если Клиент Тогда
			
			СоздатьНастройкиДляОтчетовДвижениеРаботников();
			
			СоздатьНастройкиДляСписковИмениников();
			
		#КонецЕсли
		
		ОбновлениеДокументаСдельныйНаряд();
				
		ЗаполнениеРеквизитаДействие();
		
		ПереносРеквизитовВидовРасчета();
		
		СозданиеВидаРасчета();
		
		УстановкаГражданства();
		
		УстановкаПлановыхУдержаний();
		
		ИзменениеРегистраРасчета();
		
 		ЗаполнитьМесяц();
		
		ЗаполнитьКлассификаторИспользованияРабочегоВремени();
		//ЗаполнитьСписокРегламентированныхОтчетов(Ложь);
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		#Если Клиент Тогда
		
		ВывестиОписаниеИзменений("251", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;

        	
	КонецЕсли;
	
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.2.10";
	
	Если ТекущаяВерсияИБ = "2.5.1.18" тогда
		
		ЗаполнитьДатаНачалаСобыитияВДокументах();
		
		ЗаполнитьСотрудникВРегистреТарифныеСтавки();
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		
		#Если Клиент Тогда
		
		ВывестиОписаниеИзменений("252", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.3.14";
	
	Если ТекущаяВерсияИБ = "2.5.2.10" ИЛИ (НомерРелизаИБ = "2.5.3" И ТекущаяВерсияИБ <> НоваяВерсияИБ) тогда
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		#Если Клиент Тогда
		
		ВывестиОписаниеИзменений("253", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.4.8";
	
	Если ТекущаяВерсияИБ = "2.5.3.14" тогда
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		ОбновитьПодоходныйДля2009года();
		#Если Клиент Тогда
		
		ВывестиОписаниеИзменений("254", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.5.4";
	
	Если ТекущаяВерсияИБ = "2.5.4.8" тогда
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		#Если Клиент Тогда
		
		ВывестиОписаниеИзменений("255", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.6.19";
	
	Если ТекущаяВерсияИБ = "2.5.5.4" ИЛИ (НомерРелизаИБ = "2.5.6" И ТекущаяВерсияИБ <> НоваяВерсияИБ) тогда
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		ЗаполнитьПланыВидовРасчетаУправленческиеУдержания();

		ЗаполнитьПериодРегистрацииВДокументах();
		
		ЗаполнитьРеквизитыНовыхПоказателей(); 
		
		ПеревестиНаПроизвольныеФормулыРасчета();

		ОбновитьНастройкиРасчетов();

		ЗаполнитьНовыеВидыРасчетов();
		
		ИзменитьНочныеИВечерние();
		
		УнификацияДокументовДляМеханизмаИсправлений();
		
		#Если Клиент Тогда
		
		ВывестиОписаниеИзменений("256", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.7.5";
	
	Если ТекущаяВерсияИБ = "2.5.6.19" тогда
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		#Если Клиент Или ВнешнееСоединение тогда
			
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("НастройкаСписокРаботниковОрганизации", ложь);
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("НастройкаСписокРаботников", ложь);
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("ПаспортныеДанныеРаботниковОрганизации", ложь);
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("РодственникиСотрудниковОрганизации", ложь);
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("СтажиРаботниковОрганизации", ложь);
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("ПаспортныеДанные", ложь);
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("РодственникиСотрудников", ложь);
	
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("АнализПоказателейПлановыеПоказатели", ложь);
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("АнализПоказателейФактическиеПоказатели", ложь);
				
		#КонецЕсли

		ЗаполненитьСотрудниковВТрудовыхДоговорах();
		
		#Если Клиент Тогда
		
		ВывестиОписаниеИзменений("257", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.8.11";
	
	Если ТекущаяВерсияИБ = "2.5.7.5" тогда
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		ЗаполнитьТарифныеСтавкиПервогоРазряда();
		
		#Если Клиент Тогда
		
		ВывестиОписаниеИзменений("258", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.9.8";
	
	Если ТекущаяВерсияИБ = "2.5.8.11" тогда
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		СформироватьНачисления();
		
		#Если Клиент Или ВнешнееСоединение тогда

		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("РодственникиСотрудниковОрганизации", ложь);
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("СтажиРаботниковОрганизации", ложь);
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("ОтчетПоВозрастуРаботниковОрганизации", ложь);
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("СписокДекретниц", ложь);
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("СписокИменинниковОрганизаций", ложь);
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("СписокПринятыхИУволенных", ложь);
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("СписокПредставляемыхНаПенсию", ложь);
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("СотрудникиСЗаканчивающимисяТрудовымиДоговорами", ложь);
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("ОтчетПоВозрастуДля6Т", ложь);
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("ОтчетПоОбразованиюДля6Т", ложь);
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("ПрофессиональноеОбучениеРаботников6Т", ложь);
		ОбновлениеИнформационнойБазы.ДобавитьНастройкуОтчета("ПрофессиональноеОбучениеРаботниковЗаГраницей6Т", ложь);
		
		#КонецЕсли
		
		#Если Клиент Тогда
		
		ВывестиОписаниеИзменений("259", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.10.14";
	
	Если ТекущаяВерсияИБ = "2.5.9.8" ИЛИ ТекущаяВерсияИБ = "2.5.10.12" ИЛИ ТекущаяВерсияИБ = "2.5.10.13" тогда
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		ЗаполнитьНовыеВидыРасчетов2510();
		
		ЗаполнитьРегистрСведенийРасценки();
		
		ПерейтиНаСправочникКатегорииРасчетов();
		#Если Клиент Тогда
		
		ВывестиОписаниеИзменений("2510", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.11.8";
	
	Если ТекущаяВерсияИБ = "2.5.10.14"  ИЛИ (НомерРелизаИБ = "2.5.11" И ТекущаяВерсияИБ <> НоваяВерсияИБ) тогда
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		#Если Клиент Тогда
		
		ВывестиОписаниеИзменений("2511", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.12.7";
	
	Если ТекущаяВерсияИБ = "2.5.11.8" тогда
		
		ПроставитьКатегорию();
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		#Если Клиент Тогда
		
		ВывестиОписаниеИзменений("2512", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.13.10";
	
	Если ТекущаяВерсияИБ = "2.5.12.7"  тогда
		
		ЗаполнитьУдержания();
		ПроставитьСотрудников();
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		#Если Клиент Тогда
		
		ВывестиОписаниеИзменений("2513", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;

   	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.14.8";
	
	Если ТекущаяВерсияИБ = "2.5.13.10" тогда
		
		ЗаполнитьРасчетВзносовСФОТ();
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		#Если Клиент Тогда
		
		ВывестиОписаниеИзменений("2514", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.15.10";
	
	Если ТекущаяВерсияИБ = "2.5.14.8" тогда
		
		ЗаполнитьОтпускаОрганизаций();
		 
		ЗаполнитьШтатноеРасписание();
		
		ЗаполнитьВидыРасчета();
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		#Если Клиент Тогда
		
		ВывестиОписаниеИзменений("2515", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено одновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.16.9";
	
	Если ТекущаяВерсияИБ = "2.5.15.10" тогда
				
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		#Если Клиент Тогда
		
		ВывестиОписаниеИзменений("2516", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено одновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.17.12";
	
	Если ТекущаяВерсияИБ = "2.5.16.9" тогда
		
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
				
		#Если Клиент Тогда
		
		ВывестиОписаниеИзменений("2517", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено одновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;


	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.18.16";
	
	Если ТекущаяВерсияИБ = "2.5.17.12" тогда
		
		
		ОбновитьНастройкиОтчетов();
		ЗаполнитьНастройкиПользователей();	
	
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;
	
		ВывестиОписаниеИзменений("2518", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено одновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.19.6";
	
	Если ТекущаяВерсияИБ = "2.5.18.16"  ИЛИ ТекущаяВерсияИБ = "2.5.19.3" тогда
		
		
		ОбновитьНастройкиОтчетов();
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2519", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено одновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;

   	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.20.7";
	
	Если ТекущаяВерсияИБ = "2.5.19.6" тогда
		
		ЗаполнитьПорядокВПодразделенияхОрганизаций();
				
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2520", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено одновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.21.5";
	
	Если ТекущаяВерсияИБ = "2.5.20.7" ИЛИ ТекущаяВерсияИБ = "2.5.21.2" тогда
						
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2521", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено одновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.22.4";
	
	Если ТекущаяВерсияИБ = "2.5.21.5" тогда
						
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2522", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено одновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.23.3";
	
	Если ТекущаяВерсияИБ = "2.5.22.4" тогда
						
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2523", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено одновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.24.6";
	
	Если ТекущаяВерсияИБ = "2.5.23.3" ИЛИ (НомерРелизаИБ = "2.5.24" И ТекущаяВерсияИБ <> НоваяВерсияИБ) тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
        		
		ЗаполнитьДопНачисления();
		
		#Если Клиент Тогда
			
			ЗаполнитьДвиженияРегистраЗарплатаЗаМесяцОрганизаций(ЕстьСообщения, ОбработкаКомментариев);
					
		#Иначе
			
			ЗаполнитьДвиженияРегистраЗарплатаЗаМесяцОрганизаций();
					
		#КонецЕсли

		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2524", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено одновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
		
	КонецЕсли;

    ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.25.8";
	
	Если ТекущаяВерсияИБ = "2.5.24.6" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
		ОбновлениеСкидокКДоходам2011года();
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
		
		
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2525", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.26.13";
	
	Если ТекущаяВерсияИБ = "2.5.25.8" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
		
		ОбновитьНастройкиОтчетов();
		ОбновлениеРазмеровСреднегоЗаработка();
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2526", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;

    ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.27.5";
	
	Если ТекущаяВерсияИБ = "2.5.26.13" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
		
		
	 	ОбновлениеСкидокКДоходам2012года();
		ОбновлениеРазмеровСреднегоЗаработка2012();
		ЗаполнитьКодыВычетовНДФЛ();
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2527", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.28.3";
	
	Если ТекущаяВерсияИБ = "2.5.27.5" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
		ОбновлениеРазмеровСреднегоЗаработка2012();
		УстановитьПараметрыСчетовБУиНУ();
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2528", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.29.6";
	
	Если ТекущаяВерсияИБ = "2.5.28.3" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
		ОбновитьНастройкиОтчетов();
		ЗаполнениеДокументОснованиеВРасчетеВзносовсФОТ();

			
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2529", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.30.4";
	
	Если ТекущаяВерсияИБ = "2.5.29.6" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
	    ИзменитьКатегорииЗастрахованныхЛиц();
		ИзменитьКатегорииФизЛиц();
			
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2530", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.31.5";
	
	Если ТекущаяВерсияИБ = "2.5.30.4" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
	   	ЗаполнитьКодДоходовДоговорГПХ();
		ОбновитьНастройкиОтчетов();

		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2531", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.32.6";
	
	Если ТекущаяВерсияИБ = "2.5.31.5" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
		
	  
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2532", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.33.3";
	
	Если ТекущаяВерсияИБ = "2.5.32.6" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
		
		СозданиеВРИЛВПрожиточныхМинимумах();
		
	  
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2533", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;

    ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.34.7";
	
	Если ТекущаяВерсияИБ = "2.5.33.3"  тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
		
		ЗаполнитьПочтовыеСборы();
		ПерезаполнитьПособия();
	  
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2534", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.35.4";
	
	Если ТекущаяВерсияИБ = "2.5.34.7" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
	   ОбновлениеСкидокКДоходам2013года();
	   ЗаполнитьКодыВычетовНДФЛ();
	  
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2535", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.36.10";
	
	Если ТекущаяВерсияИБ = "2.5.35.4" ИЛИ ТекущаяВерсияИБ = "2.5.36.5" ИЛИ ТекущаяВерсияИБ = "2.5.36.8" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
		ЗаполнитьНовыйВидыПособий();
		ОбновлениеРазмеровСреднегоЗаработка2013();
		ЗаполнитьСведенияОРазмерахГосударственныхПособий2013();
	 	  
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2536", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.37.6";
	
	Если ТекущаяВерсияИБ = "2.5.36.10" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
		ОбновитьКодыСправочникаСмены();
		

		 	  
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2537", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.38.6";
	
	Если ТекущаяВерсияИБ = "2.5.37.6"  тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
		ОбновлениеРазмеровСреднегоЗаработка2013();
		ЗаполнитьСведенияОРазмерахГосударственныхПособий2013();
		// Обновить предопределенные вопросы подсистемы Анкетирование
		ЗаполнитьРеквизитыВопросов(Ложь);

		
		 	  
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2538", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.39.2";
	
	Если ТекущаяВерсияИБ = "2.5.38.6"  тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
		ОбновлениеРазмеровСреднегоЗаработка2013();
		ЗаполнитьНовыеОплатыБЛ();
					 	  
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2539", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;


	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.40.4";
	
	Если ТекущаяВерсияИБ = "2.5.39.2"  тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
		ЗаполнитьСведенияОРазмерахГосударственныхПособийАвгуст2013();
		ОбновлениеРазмеровПоказателейАвгуст2013();
		ЗаполнитьОплатыБЛДоговорникамИУволеным();
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2540", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.41.6";
	
	Если ТекущаяВерсияИБ = "2.5.40.4"  тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
	
		ЗаполнитьНовыеОплатыБЛ();
		ОбновитьНастройкиОтчетов();
        ИсправитьКодыДоходовНДФЛ();

		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2541", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;

    ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.42.4";
	
	Если ТекущаяВерсияИБ = "2.5.41.6"  тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
 		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2542", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	   ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.43.5";
	
	Если ТекущаяВерсияИБ = "2.5.42.4"  тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
		ЗаполнитьНовыеОплатыБЛ43();
			   		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2543", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;

 	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.44.3";
	
	Если ТекущаяВерсияИБ = "2.5.43.5"  тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
		ЗаполнитьКодыВычетовНДФЛ();
		ОбновлениеСкидокКДоходам2014года();
		ОбновлениеРазмеровПоказателей2014();
		ЗаполнитьСведенияОРазмерахГосударственныхПособийНоябрь2013();
		ЗаполнитьОплатаБЛПоТравмеНаПроизводстве();
		
		
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2544", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.45.6";
	
	Если ТекущаяВерсияИБ = "2.5.44.3"  тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
		ОбновитьНастройкиОтчетов();	
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2545", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.46.2";
	
	Если ТекущаяВерсияИБ = "2.5.45.6"  тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
						
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2546", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.47.4";
	
	Если ТекущаяВерсияИБ = "2.5.46.2"  тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
	
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2547", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;

    ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.48.2";
	
	Если ТекущаяВерсияИБ = "2.5.47.4"  тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
	
		ПроведениеДокументовРасчетЕСН();
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2548", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.49.3";
	
	Если ТекущаяВерсияИБ = "2.5.48.2"  тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
	
		ПроведениеДокументовРасчетЕСН();
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2549", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.50.4";
	
	Если ТекущаяВерсияИБ = "2.5.49.3"  тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
	
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2550", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.51.6";
	
	Если ТекущаяВерсияИБ = "2.5.50.4"  тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		ЗаполнитьКодыВычетовНДФЛ();
		ОбновлениеСкидокКДоходам2015года();
		ЗаполнитьСведенияШкалаПодоходногоНалога();
		ЗаполнитьСведенияОРазмерахГосударственныхПособий2015();
		ЗаполнитьНовыйВидыПособий2015года();
		ЗаполнитьВидыРасчета2015года();
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
	
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2551", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.51.9";
	
	Если ТекущаяВерсияИБ = "2.5.50.4" ИЛИ ТекущаяВерсияИБ = "2.5.51.6"  тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		ЗаполнитьКодыВычетовНДФЛ();
		ОбновлениеСкидокКДоходам2015года();
		ЗаполнитьСведенияШкалаПодоходногоНалога();
		ЗаполнитьСведенияОРазмерахГосударственныхПособий2015();
		ЗаполнитьНовыйВидыПособий2015года();
		ЗаполнитьВидыРасчета2015года();
		ЗаполнитьСведенияОРазмерахГосударственныхПособийФевраль2015();
		ОбновлениеРазмеровБМПФевраль2015();
		ИсправитьВидыОбразования();
			
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
	
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2551", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;

	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.52.5";
	
	Если ТекущаяВерсияИБ = "2.5.51.9" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		
							
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
	
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2552", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.53.8";
	
	Если ТекущаяВерсияИБ = "2.5.52.5" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
							
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
	
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2553", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.54.8";
	
	Если ТекущаяВерсияИБ = "2.5.53.8" ИЛИ ТекущаяВерсияИБ = "2.5.54.6"  тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		ОбновлениеРазмеровПоказателейМай2015();
		ЗаполнитьСведенияОРазмерахГосударственныхПособийМай2015();
	 	ЗаполнитьСведенияСчетаУчетаПоПодразделениямБПРБ20(); 
		ИзменитьГрафикиРаботы();
							
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
	
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2554", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.55.3";
	
	Если ТекущаяВерсияИБ = "2.5.54.8"  тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		ОбновлениеРазмеровПоказателейАвгуст2015();
		ЗаполнитьСведенияОРазмерахГосударственныхПособийАвгуст2015();
        ЗаполнитьФСЗНИнГрЕАЭС();

		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли
		
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2555", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.56.4";
	
	Если ТекущаяВерсияИБ = "2.5.55.3" ИЛИ ТекущаяВерсияИБ = "2.5.56.1"   тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		ОбновлениеРазмеровПоказателейИюльАвгуст();
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли    		
				
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2556", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.57.3";
	
	Если ТекущаяВерсияИБ = "2.5.56.4" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		 ОбновлениеРазмеровПоказателейЯнварь2016();
		 ЗаполнитьСведенияОРазмерахГосударственныхПособийЯнварь2016();      
		 ОбновлениеСкидокКДоходам2016года();
		 ЗаполнитьСведенияОРазмерахГосударственныхПособий2015Август();
		 ЗаполнитьКодыВычетовНДФЛ();
		 ОбновитьНастройкиОтчетов();
		 ЗаполнитьВидыРасчета2016года();
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли    		
				
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2557", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
	
	КонецЕсли; 
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.58.6";
	
	Если ТекущаяВерсияИБ = "2.5.57.3" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		 ЗаполнитьВидыРасчета2016года();
		 ОбновлениеРазмеровПоказателейФевраль2016();
		 ЗаполнитьСведенияОРазмерахГосударственныхПособий2016Февраль();
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли    		
				
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2558", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.59.5";
	
	Если ТекущаяВерсияИБ = "2.5.58.6" ИЛИ ТекущаяВерсияИБ = "2.5.59.3" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		ОбновлениеРазмеровПоказателейИюнь2016();
		ЗаполнитьСведенияОРазмерахГосударственныхПособий2016Июнь();
		ОбновлениеРазмеровПоказателейСреднейЗарплатыИюнь2016();
				
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли    		
				
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2559", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.59.6";
	
	Если ТекущаяВерсияИБ = "2.5.59.5" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		
						
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли    		
				
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2559", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.60.4";
	
	Если ТекущаяВерсияИБ = "2.5.59.6" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		ОбновлениеРазмеровПоказателейСреднейЗарплатыАвгуст2016();
		ЗаполнитьСведенияОРазмерахГосударственныхПособийАвгуст2016();	
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли    		
				
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2560", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.61.3";
	
	Если ТекущаяВерсияИБ = "2.5.60.4" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		ОбновлениеРазмеровПоказателейСреднейЗарплатыДекабрь2016();
		ЗаполнитьСведенияОРазмерахГосударственныхПособийДекабрь2016();
		ОбновлениеСкидокКДоходам2017года();
		ЗаполнитьСведенияНДФЛРазмерВычетов2017();
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли    		
				
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2561", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.62.5";
	
	Если ТекущаяВерсияИБ = "2.5.61.3" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		ОбновлениеРазмеровПоказателейСреднейЗарплатыМай2017();
		ЗаполнитьСведенияОРазмерахГосударственныхПособийМай2017();
		ОбновлениеСкидокКДоходам2017года();
        ЗаполнитьСведенияНДФЛРазмерВычетов2017();

		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли    		
				
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2562", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.5.63.16";
	
	Если ТекущаяВерсияИБ = "2.5.62.5" тогда
						
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#КонецЕсли
		
		//ОбновлениеРазмеровПоказателейСреднейЗарплатыИюль2017();
		СоздатьПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ();
		СоздатьПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ();
		//ЗаполнитьСведенияОРазмерахГосударственныхПособийИюль2017();
		
		
		#Если Клиент Тогда
			ЕстьСообщения = Ложь;
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		#КонецЕсли    		
				
		// Включить режим полнотекстового поиска
		флПоискВключен = Ложь;
		Попытка
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
			флПоискВключен = Истина;
		Исключение
		КонецПопытки;
			
		#Если Клиент Тогда
			
		ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
		Если Не ФормаРабочийСтол.Открыта() Тогда
			ФормаРабочийСтол.Открыть();
		КонецЕсли;

		ВывестиОписаниеИзменений("2563", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#КонецЕсли

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 "Выполнено обновление на версию " +НоваяВерсияИБ+ " " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			СтрСообщения = "";
			Сообщить( "Выполнено обновление на версию " +НоваяВерсияИБ+ " "  + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли; 


	
	#Если Клиент Тогда
	
	// Вывод формы дополнительной обработки.
	Если ДокументОписаниеОбновлений.ВысотаТаблицы > 0 Тогда
		ФормаОписаниеОбновлений.Открыть();
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры

#Если Клиент Тогда

// Функция получает макет описания обновлений и заполняет его параметры расшифровок.
//
// Параметры:
//  ФормаОписаниеОбновлений - форма обработки "ОписаниеОбновлений", 
//                            назначается владельцем открываемых из нее форм.
//
// Возвращаемое значение:
//  ТабличныйДокумент - макет "ОписаниеОбновлений" с заполненными параметрами расшифровок.
//
Функция ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений) Экспорт

	МакетОписаниеОбновлений = ПолучитьМакет("ЗарплатаИУправлениеПерсоналом");
	Параметры               = МакетОписаниеОбновлений.Параметры;

	// Заполнение параметров расшифровок макета описания обновлений,

	Параметры.ФормаСпискаПодразделенийКомпании	  = Справочники.Подразделения.ПолучитьФормуСписка();
	Параметры.ФормаДолжности					  = Справочники.Должности.ПолучитьФормуСписка();
	Параметры.ФормаГрафикиРаботы				  = Справочники.ГрафикиРаботы.ПолучитьФормуСписка();
  	Параметры.ФормаСпискаОрганизаций			  = Справочники.Организации.ПолучитьФормуСписка();
	Параметры.ФормаСпискаПодразделенийОрганизаций = Справочники.ПодразделенияОрганизаций.ПолучитьФормуСписка();
	Параметры.ФормаДолжностиОрганизаций			  = Справочники.ДолжностиОрганизаций.ПолучитьФормуСписка();
	Параметры.ФормаПодбораДокументовУдЛичность	  = Справочники.ДокументыУдостоверяющиеЛичность.ПолучитьФорму("ФормаПодбораИзКлассификатора");
	Параметры.ФормаСпискаДокументовУдЛичность	  = Справочники.ДокументыУдостоверяющиеЛичность.ПолучитьФормуСписка();
	Параметры.ФормаПодбораСтранМира				  = Справочники.КлассификаторСтранМира.ПолучитьФорму("ФормаПодбораИзКлассификатора");
	Параметры.ФормаСпискаСтранМира				  = Справочники.КлассификаторСтранМира.ПолучитьФормуСписка();
	Параметры.ФормаПодбораЯзыкиНародовМира		  = Справочники.ЯзыкиНародовМира.ПолучитьФорму("ФормаПодбораИзКлассификатора");
	Параметры.ФормаСпискаЯзыкиНародовМира		  = Справочники.ЯзыкиНародовМира.ПолучитьФормуСписка();
	Параметры.ФормаПодбораСтепениЗнанияЯзыка	  = Справочники.СтепениЗнанияЯзыка.ПолучитьФорму("ФормаПодбораИзКлассификатора");
	Параметры.ФормаСпискаСтепениЗнанияЯзыка		  = Справочники.СтепениЗнанияЯзыка.ПолучитьФормуСписка();
	Параметры.ФормаПодбораСемейноеПоложение		  = Справочники.СемейноеПоложениеФизЛиц.ПолучитьФорму("ФормаПодбораИзКлассификатора");
	Параметры.ФормаСпискаСемейноеПоложение		  = Справочники.СемейноеПоложениеФизЛиц.ПолучитьФормуСписка();
	Параметры.ФормаПодбораСтепениРодства		  = Справочники.СтепениРодстваФизЛиц.ПолучитьФорму("ФормаПодбораИзКлассификатора");
	Параметры.ФормаСпискаСтепениРодства			  = Справочники.СтепениРодстваФизЛиц.ПолучитьФормуСписка();
	Параметры.ФормаПодбораВидыОбразования		  = Справочники.ВидыОбразованияФизЛиц.ПолучитьФорму("ФормаПодбораИзКлассификатора");
	Параметры.ФормаСпискаВидыОбразования		  = Справочники.ВидыОбразованияФизЛиц.ПолучитьФормуСписка();
	Параметры.ФормаСпискаПользователей			  = Справочники.Пользователи.ПолучитьФормуСписка();
	Параметры.ФормаПользователя					  = глЗначениеПеременной("глТекущийПользователь");
	//Параметры.ФормаСпискаПВРСреднийЗаработок	  = ПланыВидовРасчета.СреднийЗаработок.ПолучитьФормуСписка();

	Возврат МакетОписаниеОбновлений;

КонецФункции

// Процедура выводит описания изменений в указанном релизе
//
// Параметры
//  НомерРелиза  – Строка - номер релиза, для которого выводится описание
//
Процедура ВывестиОписаниеИзменений(НомерРелиза, ДокументОписаниеОбновлений, МакетОписаниеОбновлений)

	Если МакетОписаниеОбновлений.Области.Найти("Шапка" + НомерРелиза) <> Неопределено Тогда
		ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Шапка" + НомерРелиза));
		ДокументОписаниеОбновлений.НачатьГруппуСтрок("Версия" + НомерРелиза);
		ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + НомерРелиза));
		ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
		ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
	КонецЕсли;
	
КонецПроцедуры // ВывестиОписаниеИзменений()

#КонецЕсли

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском) Экспорт

	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;

		// установим курс и кратность = 1 на 1 января 1980
		ОбщегоНазначения.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);

	КонецЕсли;

	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

// Процедура устанавливает указанное значение указанной константы и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  ИмяКонстанты      - имя константы, которую требуется установить.
//  ЗначениеКонстанты - значение константы.
//
Процедура УстановитьКонстанту(ИмяКонстанты, ЗначениеКонстанты) Экспорт

	Если Константы[ИмяКонстанты].Получить() = ЗначениеКонстанты Тогда
		Возврат;
	КонецЕсли;

	Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);

	СтрСообщения = "Константе """ + Метаданные.Константы[ИмяКонстанты].Синоним + """ "
	             + "назначено значение """ + ЗначениеКонстанты + """";
	Сообщить(СтрСообщения, СтатусСообщения.Обычное);

КонецПроцедуры

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		СтрСообщения1 = "Создан";
	Иначе
		СтрСообщения1 = "Обработан";
	КонецЕсли;

	Если СправочникОбъект.ЭтоГруппа Тогда
		СтрСообщения2 = "а группа";
	Иначе
		СтрСообщения2 = " элемент";
	КонецЕсли;

	СтрСообщения2 = СтрСообщения2 + " справочника """ + СправочникОбъект.Метаданные().Синоним + """: ";
	СтрСообщения3 = "наименование """ + СправочникОбъект.Наименование + """";

	Попытка
		СправочникОбъект.Записать();
		Сообщить(СтрСообщения1 + СтрСообщения2 + "код """ + СправочникОбъект.ПолныйКод() + """, " + СтрСообщения3, СтатусСообщения.Обычное);
	Исключение
		Сообщить("Не записан"  + СтрСообщения2 + СтрСообщения3 +
		         Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;

КонецПроцедуры

//Заполняет регистр сведений ДопустимыеСочетанияМеждуГруппамиСтажа
//
Процедура ЗаполнитьРегистрДопустимыхСочетанийМеждуГруппамиСтажа() 
	
	НаборЗаписей = РегистрыСведений.ДопустимыеСочетанияМеждуГруппамиСтажа.СоздатьНаборЗаписей();
	
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.10 ", "ЗП12А   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.10 ", "ЗП12А   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.11 ", "27-1    ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12М   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Л   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12К   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12И   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12З   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Ж   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Е   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Д   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Г   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12В   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Б   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12О   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12М   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Л   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12К   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12И   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12З   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Ж   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Е   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Д   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Г   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12В   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12Б   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.20 ", "ЗП12О   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "27-8    ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "27-7    ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "27-6    ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "27-9    ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "27-10   ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "28-ОС   ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "27-5    ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "27-4    ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "27-3    ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "27-2    ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "10.21 ", "28-ПЖ   ", "Любой    ", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "20.10 ", "ЗП12А   ", "=        ", "12100000-11465  ", "ВОДОЛАЗ", "_чм", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "20.11 ", "27-1    ", "=        ", "12100000-11465  ", "ВОДОЛАЗ", "_чм", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "30.10 ", "ЗП12А   ", "=        ", "1010100а        ", "       ", "___", "ЗП78ВП  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "30.10 ", "ЗП12А   ", "=        ", "1010100а        ", "       ", "ГМД", "ЗП78ВП  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "30.10 ", "ЗП12А   ", "=        ", "1010100а        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "30.10 ", "ЗП12А   ", "=        ", "1010100а        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "30.11 ", "27-1    ", "=        ", "1010100а        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "30.11 ", "27-1    ", "=        ", "1010100а        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "30.11 ", "27-1    ", "=        ", "1010100а        ", "       ", "_МД", "27-11ВП ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "30.11 ", "27-1    ", "=        ", "1010100а        ", "       ", "___", "27-11ВП ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12Б   ", "Первые Н ", "2010100а        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010600б        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010600а        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "=        ", "10104000        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010300б        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010300а        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010100д        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010100г        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "=        ", "1010100б        ", "       ", "ГМД", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12Б   ", "Первые Н ", "2010100а        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010600б        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010600а        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "=        ", "10104000        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010300б        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010300а        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010100д        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "Первые Н ", "1010100г        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.10 ", "ЗП12А   ", "=        ", "1010100б        ", "       ", "___", "ЗП78ГР  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010300а        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010100д        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010100г        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "=        ", "1010100б        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-2    ", "Первые Н ", "2010100а        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010600б        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010600а        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "=        ", "10104000        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010300б        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010300а        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010100д        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010100г        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "=        ", "1010100б        ", "       ", "___", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010300б        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "=        ", "10104000        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010600а        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-1    ", "Первые Н ", "1010600б        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "40.11 ", "27-2    ", "Первые Н ", "2010100а        ", "       ", "_МД", "27-11ГР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.10 ", "ЗП12А   ", "=        ", "1010100е        ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.10 ", "ЗП12А   ", "=        ", "1010100е        ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.10 ", "ЗП12А   ", "=        ", "1010100е        ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.10 ", "ЗП12А   ", "=        ", "1010100е        ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.10 ", "ЗП12А   ", "=        ", "1010100е        ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.10 ", "ЗП12А   ", "=        ", "1010100е        ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.10 ", "ЗП12А   ", "=        ", "1010100е        ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.10 ", "ЗП12А   ", "=        ", "1010100е        ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.11 ", "27-1    ", "=        ", "1010100е        ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.11 ", "27-1    ", "=        ", "1010100е        ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.11 ", "27-1    ", "=        ", "1010100е        ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.11 ", "27-1    ", "=        ", "1010100е        ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.11 ", "27-1    ", "=        ", "1010100е        ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.11 ", "27-1    ", "=        ", "1010100е        ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.11 ", "27-1    ", "=        ", "1010100е        ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "50.11 ", "27-1    ", "=        ", "1010100е        ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "60.10 ", "ЗП12А   ", "Первые Н ", "1200200а        ", "       ", "___", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "60.10 ", "ЗП12А   ", "Первые Н ", "1200200а        ", "       ", "ГМД", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "60.11 ", "27-1    ", "Первые Н ", "1200200а        ", "       ", "___", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "60.11 ", "27-1    ", "Первые Н ", "1200200а        ", "       ", "_МД", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.10 ", "ЗП12Б   ", "Первые Н ", "23003010        ", "       ", "ГМД", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.10 ", "ЗП12Б   ", "Первые Н ", "22417020        ", "       ", "ГМД", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.10 ", "ЗП12Б   ", "Первые Н ", "22417010        ", "       ", "ГМД", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.10 ", "ЗП12Б   ", "Первые Н ", "23003010        ", "       ", "___", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.10 ", "ЗП12Б   ", "Первые Н ", "22417020        ", "       ", "___", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.10 ", "ЗП12Б   ", "Первые Н ", "22417010        ", "       ", "___", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.11 ", "27-2    ", "Первые Н ", "22417010        ", "       ", "___", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.11 ", "27-2    ", "Первые Н ", "22417020        ", "       ", "___", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.11 ", "27-2    ", "Первые Н ", "23003010        ", "       ", "___", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.11 ", "27-2    ", "Первые Н ", "22417010        ", "       ", "_МД", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.11 ", "27-2    ", "Первые Н ", "22417020        ", "       ", "_МД", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "70.11 ", "27-2    ", "Первые Н ", "23003010        ", "       ", "_МД", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "80.10 ", "ЗП12И   ", "Не указан", "                ", "СЕЗОН  ", "___", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "80.11 ", "27-9    ", "Не указан", "                ", "СЕЗОН  ", "___", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "90.10 ", "ЗП12И   ", "Не указан", "                ", "       ", "ГМД", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "90.11 ", "27-9    ", "Не указан", "                ", "       ", "_МД", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "100.10", "ЗП12И   ", "Не указан", "                ", "       ", "___", "ЗП78ФЛ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "100.11", "27-9    ", "Не указан", "                ", "       ", "___", "27-12   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "110.10", "ЗП12А   ", "=        ", "12003000-17541  ", "       ", "___", "УВД     ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "110.10", "ЗП12А   ", "=        ", "12003000-17541  ", "       ", "ГМД", "УВД     ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "110.11", "27-1    ", "=        ", "12003000-17541  ", "       ", "___", "27-14   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "110.11", "27-1    ", "=        ", "12003000-17541  ", "       ", "_МД", "27-14   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000в        ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000а        ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "23200000-1754б  ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-14467  ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754г  ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754в  ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754б  ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000ж        ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000е        ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000д        ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000г        ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000в        ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000а        ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "23200000-1754б  ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-14467  ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754г  ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754в  ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754б  ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000ж        ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-14467  ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754г  ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754в  ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754б  ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000ж        ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000е        ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000д        ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000г        ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000в        ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000а        ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "23200000-1754б  ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-14467  ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754г  ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754в  ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754б  ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000ж        ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000е        ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000д        ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000г        ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754в  ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754б  ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000ж        ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000е        ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000д        ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000г        ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000в        ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000а        ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "23200000-1754б  ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-14467  ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754г  ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754в  ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754б  ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000ж        ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000е        ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000д        ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000г        ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000в        ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000а        ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000е        ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000д        ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000г        ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000в        ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000а        ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "23200000-1754б  ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-14467  ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754г  ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754в  ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754б  ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000ж        ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000е        ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000д        ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000г        ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000в        ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000а        ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "23200000-1754б  ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-14467  ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754г  ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "23200000-1754б  ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-14467  ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754г  ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754в  ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "22600000-1754б  ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000ж        ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000е        ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000д        ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000г        ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000в        ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "2260000а        ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.10", "ЗП12Б   ", "=        ", "23200000-1754б  ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754б  ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000ж        ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000е        ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000д        ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000г        ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000в        ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000а        ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "23200000-1754б  ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-14467  ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754г  ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754в  ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754б  ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000ж        ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000е        ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000д        ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000г        ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000в        ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000в        ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000а        ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "23200000-1754б  ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-14467  ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754г  ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754в  ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754б  ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000ж        ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000е        ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000д        ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000г        ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000в        ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000а        ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "23200000-1754б  ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-14467  ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754г  ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754в  ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000ж        ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000е        ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000д        ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000г        ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000в        ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000а        ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "23200000-1754б  ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-14467  ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754г  ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754в  ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754б  ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000ж        ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000е        ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000д        ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000г        ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000в        ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000а        ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000а        ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "23200000-1754б  ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-14467  ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754г  ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754в  ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754б  ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000ж        ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000е        ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000д        ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000г        ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000в        ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000а        ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "23200000-1754б  ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-14467  ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754г  ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754в  ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754б  ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000д        ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000г        ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "23200000-1754б  ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-14467  ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754г  ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754в  ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754б  ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000ж        ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000е        ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000д        ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000г        ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000в        ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000а        ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "23200000-1754б  ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-14467  ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754г  ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754в  ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "22600000-1754б  ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000ж        ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "120.11", "27-2    ", "=        ", "2260000е        ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "130.10", "ЗП12А   ", "Первые Н ", "12300000        ", "ЛЕПРО  ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "130.10", "ЗП12А   ", "Первые Н ", "12300000        ", "ЛЕПРО  ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "130.10", "ЗП12А   ", "Первые Н ", "12300000        ", "ЛЕПРО  ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "130.10", "ЗП12А   ", "Первые Н ", "12300000        ", "ЛЕПРО  ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "130.10", "ЗП12А   ", "Первые Н ", "12300000        ", "ЛЕПРО  ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "130.10", "ЗП12А   ", "Первые Н ", "12300000        ", "ЛЕПРО  ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "130.10", "ЗП12А   ", "Первые Н ", "12300000        ", "ЛЕПРО  ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "130.10", "ЗП12А   ", "Первые Н ", "12300000        ", "ЛЕПРО  ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "140.10", "        ", "Не указан", "                ", "ЛЕПРО  ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "140.10", "        ", "Не указан", "                ", "ЛЕПРО  ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "140.10", "        ", "Не указан", "                ", "ЛЕПРО  ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "140.10", "        ", "Не указан", "                ", "ЛЕПРО  ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "150.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "160.10", "        ", "Не указан", "                ", "ЛЕПРО  ", "___", "ЗП80ПД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "160.10", "        ", "Не указан", "                ", "ЛЕПРО  ", "___", "ЗП80РК  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "170.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "170.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "170.10", "ЗП12Б   ", "=        ", "22600000-1754а  ", "ЛЕПРО  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "170.10", "ЗП12Б   ", "=        ", "2260000б        ", "ЛЕПРО  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "180.10", "ЗП12Е   ", "Не указан", "                ", "СЕЗОН  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "180.11", "27-6    ", "Не указан", "                ", "СЕЗОН  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "190.10", "ЗП12Е   ", "Не указан", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "190.10", "ЗП12Е   ", "Не указан", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "190.11", "27-6    ", "Не указан", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "190.11", "27-6    ", "Не указан", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "200.10", "ЗП12Ж   ", "Любой    ", "                ", "СЕЗОН  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "200.11", "27-7    ", "Не указан", "                ", "СЕЗОН  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "200.20", "ЗП12И   ", "Не указан", "                ", "СЕЗОН  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "200.21", "27-9    ", "Не указан", "                ", "СЕЗОН  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "210.10", "ЗП12Ж   ", "Любой    ", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "210.10", "ЗП12Ж   ", "Любой    ", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "210.11", "27-7    ", "Не указан", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "210.11", "27-7    ", "Не указан", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "210.20", "ЗП12И   ", "Не указан", "                ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "210.20", "ЗП12И   ", "Не указан", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "210.21", "27-9    ", "Не указан", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "210.21", "27-9    ", "Не указан", "                ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "220.10", "ЗП12Л   ", "Не указан", "                ", "       ", "___", "ЗП78СС  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "220.10", "ЗП12Л   ", "Не указан", "                ", "       ", "ГМД", "ЗП78СС  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.10", "ЗП12М   ", "Любой    ", "                ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.10", "ЗП12М   ", "Любой    ", "                ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.10", "ЗП12М   ", "Любой    ", "                ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.10", "ЗП12М   ", "Любой    ", "                ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.10", "ЗП12М   ", "Любой    ", "                ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.10", "ЗП12М   ", "Любой    ", "                ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.10", "ЗП12М   ", "Любой    ", "                ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.10", "ЗП12М   ", "Любой    ", "                ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.11", "28-ОС   ", "Не указан", "                ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.11", "28-ОС   ", "Не указан", "                ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.11", "28-ОС   ", "Не указан", "                ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.11", "28-ОС   ", "Не указан", "                ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.11", "28-ОС   ", "Не указан", "                ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.11", "28-ОС   ", "Не указан", "                ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.11", "28-ОС   ", "Не указан", "                ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "230.11", "28-ОС   ", "Не указан", "                ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "240.10", "ЗП12М   ", "Любой    ", "                ", "       ", "_МД", "ЗП80РК  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "240.10", "ЗП12М   ", "Любой    ", "                ", "       ", "___", "ЗП80РК  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "240.10", "ЗП12М   ", "Любой    ", "                ", "       ", "_МД", "ЗП80ПД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "240.10", "ЗП12М   ", "Любой    ", "                ", "       ", "___", "ЗП80ПД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "240.11", "28-ОС   ", "Не указан", "                ", "       ", "___", "28-ПД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "240.11", "28-ОС   ", "Не указан", "                ", "       ", "_МД", "28-ПД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "240.11", "28-ОС   ", "Не указан", "                ", "       ", "___", "28-ПДРК ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "240.11", "28-ОС   ", "Не указан", "                ", "       ", "_МД", "28-ПДРК ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "250.10", "        ", "Не указан", "                ", "УИК104 ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.10", "ЗП12А   ", "Первые Н ", "12300000        ", "       ", "___", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.10", "ЗП12А   ", "Первые Н ", "12300000        ", "       ", "_МД", "ЗП81ГД  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.10", "ЗП12А   ", "Первые Н ", "12300000        ", "       ", "___", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.10", "ЗП12А   ", "Первые Н ", "12300000        ", "       ", "_МД", "ЗП81СМ  ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.10", "ЗП12А   ", "Первые Н ", "12300000        ", "       ", "___", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.10", "ЗП12А   ", "Первые Н ", "12300000        ", "       ", "_МД", "ХИРУРСМ ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.10", "ЗП12А   ", "Первые Н ", "12300000        ", "       ", "___", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.10", "ЗП12А   ", "Первые Н ", "12300000        ", "       ", "_МД", "ХИРУРГД ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.11", "27-1    ", "Первые Н ", "12300000        ", "       ", "_МД", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.11", "27-1    ", "Первые Н ", "12300000        ", "       ", "___", "28-ГДХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.11", "27-1    ", "Первые Н ", "12300000        ", "       ", "_МД", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.11", "27-1    ", "Первые Н ", "12300000        ", "       ", "___", "28-СМХР ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.11", "27-1    ", "Первые Н ", "12300000        ", "       ", "_МД", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.11", "27-1    ", "Первые Н ", "12300000        ", "       ", "___", "28-СМ   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.11", "27-1    ", "Первые Н ", "12300000        ", "       ", "_МД", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "260.11", "27-1    ", "Первые Н ", "12300000        ", "       ", "___", "28-ГД   ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "270.10", "ЗП12Б   ", "Первые Н ", "2200            ", "СЕЗОН  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "270.11", "27-2    ", "Первые Н ", "2200            ", "СЕЗОН  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "280.10", "ЗП12Б   ", "Первые Н ", "2200            ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "280.10", "ЗП12Б   ", "Первые Н ", "2200            ", "       ", "ГМД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "280.11", "27-2    ", "Первые Н ", "2200            ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "280.11", "27-2    ", "Первые Н ", "2200            ", "       ", "_МД", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "500.10", "        ", "Не указан", "                ", "СЕЗОН  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "500.20", "        ", "Не указан", "                ", "ЛЕПРО  ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "510.10", "СЕВ26   ", "Не указан", "                ", "       ", "___", "        ");
	ДопустимоеСочетаниеСтажа(НаборЗаписей, "510.11", "28-СЕВ  ", "Не указан", "                ", "       ", "___", "        ");
	
	НаборЗаписей.Записать();
	
КонецПроцедуры 

// Выполняет заполнение справочника "ДоходыНДФЛ" 
//
Процедура ЗаполнитьКодыДоходовНДФЛ() 
	
	//РФ
	//Ставка09 = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09;
	//Ставка13 = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
	//Ставка35 = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35;
	//РБ
	Ставка09 = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09;  //15%
	Ставка13 = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;  //прогрессивная шкала
	Ставка35 = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35;  //20%
	Ставка40 = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка40;  //40%
	Необлагается = Перечисления.НДФЛСтавкиНалогообложенияРезидента.НеОблагается; //не облагается

	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	
	//РБ
	ВычетыНДФЛ = Справочники.ВычетыНДФЛ;
	Пустойвычет = Справочники.ВычетыНДФЛ.ПустаяСсылка();
	// ОБНОВЛЕНИЕ СПРАВОЧНИКА ДоходыНДФЛ
	
	// Заполнение реквизитов предопределенных элементов
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1011прогр,			Ставка13, "1011",   ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1802ставка15,		Ставка09, "700",    ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1842, 				Ставка09, "171", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код174, 				Ставка13, "174", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1841, 				Ставка09, "701", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.КодДоходаПоУмолчанию,	Ставка13, "2000", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код301, 				Ставка13, "301", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код302, 				Ставка13, "302", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код303, 				Ставка13, "303", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код304, 				Ставка13, "304", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код305, 				Ставка13, "305", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код306, 				Ставка13, "306", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код307, 				Ставка13, "307", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код308, 				Ставка13, "308", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код309, 				Ставка13, "309", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код310, 				Ставка13, "310", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код311, 				Ставка13, "311", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код312, 				Ставка13, "312", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1217, 				НеОблагается, "", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код12117, 				Ставка13, "500", 	ВычетыНДФЛ.Код500);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код12124, 				Ставка13, "501", 	ВычетыНДФЛ.Код540);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код12119,           	Ставка13, "503", 	ВычетыНДФЛ.Код550);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1216,	            Ставка13, "",  	    ВычетыНДФЛ.Код520);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1218, 				НеОблагается, "", 	ПустойВычет);
	//УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1213вых, 			НеОблагается, "", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1211, 				НеОблагается, "", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1212, 				НеОблагается, "", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1213, 				НеОблагается, "", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1214, 				НеОблагается, "", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1215, 				НеОблагается, "", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код12181, 				НеОблагается, "", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1219, 				НеОблагается, "", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код12110, 				НеОблагается, "", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код12122, 				НеОблагается, "", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код12122а, 			НеОблагается, "", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код12125, 				НеОблагается, "", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код12126, 				НеОблагается, "", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код12127, 				НеОблагается, "", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код12128, 				НеОблагается, "", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код12130, 				НеОблагается, "", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код12139, 				НеОблагается, "", 	ПустойВычет);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код591, 				НеОблагается, "", 	ПустойВычет);
	// ОБНОВЛЕНИЕ РАЗМЕРОВ СКИДОК К ДОХОДАМ
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();

	
	ДатаСведений = '20100101';
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код12117, 150);
	
	// Запишем набор записей в режиме добавления
	НаборЗаписей.Записать(Истина);
	
	ОбновлениеСкидокКДоходам2011года();
    ОбновлениеСкидокКДоходам2012года();
	ОбновлениеСкидокКДоходам2013года();
КонецПроцедуры 

// Выполняет заполнение реквизитов справочника "ВычетыНДФЛ" 
//
Процедура ЗаполнитьКодыВычетовНДФЛ() Экспорт
	
		
	ВычетыНДФЛ = Справочники.ВычетыНДФЛ;
	
	//ДобавитьКодВычетаНДФЛ("620", "Иные суммы, уменьшающие налоговую базу");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВычетыНДФЛ.Ссылка
	                      |ИЗ
	                      |	Справочник.ВычетыНДФЛ КАК ВычетыНДФЛ
	                      |
	                      |ГДЕ
	                      |	(ВычетыНДФЛ.Предопределенный)");
	
	СписокПредопределенныхКодовВычетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	// Удалим ранее установленные значения на дату сведений по предопределенным элементам
	НаборЗаписей = РегистрыСведений.НДФЛРазмерВычетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Использование = Истина;
	НаборЗаписей.Отбор.КодВычета.Использование = Истина;

	НаборЗаписей.Отбор.Период.Значение = '20010101';
	// Удалим ранее установленные значения на дату сведений по предопределенным элементам
	Для Каждого КодВычета Из СписокПредопределенныхКодовВычетов Цикл
		НаборЗаписей.Отбор.КодВычета.Значение = КодВычета;
		НаборЗаписей.Записать();
	КонецЦикла;

	НаборЗаписей.Отбор.Период.Значение = '20090101';
	// Удалим ранее установленные значения на дату сведений по предопределенным элементам
	Для Каждого КодВычета Из СписокПредопределенныхКодовВычетов Цикл
		НаборЗаписей.Отбор.КодВычета.Значение = КодВычета;
		НаборЗаписей.Записать();
	КонецЦикла;

	НаборЗаписей.Отбор.Период.Значение = '20120101';
	// Удалим ранее установленные значения на дату сведений по предопределенным элементам
	Для Каждого КодВычета Из СписокПредопределенныхКодовВычетов Цикл
		НаборЗаписей.Отбор.КодВычета.Значение = КодВычета;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	НаборЗаписей.Отбор.Период.Значение = '20130101';
	// Удалим ранее установленные значения на дату сведений по предопределенным элементам
	Для Каждого КодВычета Из СписокПредопределенныхКодовВычетов Цикл
		НаборЗаписей.Отбор.КодВычета.Значение = КодВычета;
		НаборЗаписей.Записать();
	КонецЦикла;

	НаборЗаписей.Отбор.Период.Значение = '20140101';
	// Удалим ранее установленные значения на дату сведений по предопределенным элементам
	Для Каждого КодВычета Из СписокПредопределенныхКодовВычетов Цикл
		НаборЗаписей.Отбор.КодВычета.Значение = КодВычета;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	НаборЗаписей.Отбор.Период.Значение = '20150101';
	// Удалим ранее установленные значения на дату сведений по предопределенным элементам
	Для Каждого КодВычета Из СписокПредопределенныхКодовВычетов Цикл
		НаборЗаписей.Отбор.КодВычета.Значение = КодВычета;
		НаборЗаписей.Записать();
	КонецЦикла;	
	
	НаборЗаписей.Отбор.Период.Значение = '20160101';
	// Удалим ранее установленные значения на дату сведений по предопределенным элементам
	Для Каждого КодВычета Из СписокПредопределенныхКодовВычетов Цикл
		НаборЗаписей.Отбор.КодВычета.Значение = КодВычета;
		НаборЗаписей.Записать();
	КонецЦикла;	


	// Отменим фильтры	
	НаборЗаписей.Отбор.Период.Использование = Ложь;
	НаборЗаписей.Отбор.КодВычета.Использование = Ложь;
	НаборЗаписей.Прочитать();
	
	//РБ
	// Запишем набор записей в режиме добавления
	// УСТАНОВИМ РАЗМЕРЫ СТАНДАРТНЫХ ВЫЧЕТОВ
	ДатаСведений = Дата("20010101");
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код600,  1, 0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код610,  2, 0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код611,  4, 0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код620, 10, 0);
	
	ДатаСведений = Дата("20090101");
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код600,  25.00, 150.00);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код610,   7.00, 0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код611,  14.00, 0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код620,  35.00, 0);
	
	ДатаСведений = Дата("20120101");
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код600,  44.00, 268.00);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код610,  12.30, 0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код611,  24.60, 0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код620,  62.30, 0);
	
	ДатаСведений = Дата("20130101");
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код600,  55.00, 335.00);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код610,  15.50, 0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код611,  31.00, 0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код620,  78.00, 0);
	
	ДатаСведений = Дата("20140101");
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код600,  63.00, 383.00);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код610,  18.00, 0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код611,  35.50, 0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код620,  89.00, 0);
	
	ДатаСведений = Дата("20150101");
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код600,  73.00, 442.00);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код610,  21.00, 0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код611,  41.00, 0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код620,  103.00, 0);
	
	ДатаСведений = Дата("20160101");
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код600,  83.00 , 501.00);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код610,  24.00, 0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код611,  46.00, 0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код620,  117.00, 0);
	
	ДатаСведений = Дата("20170101");
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код600,  93.00 , 563.00);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код610,  27.00, 0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код611,  52.00, 0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код620,  131.00, 0);
	
   
	// Запишем набор записей в режиме добавления
	НаборЗаписей.Записать(Истина);

КонецПроцедуры  

// Выполняет заполнение справочника "ДоходыЕСН" 
//
Процедура ЗаполнитьКодыДоходовЕСН() 

		//РБ
    СпрКодыЕСН = Справочники.ДоходыЕСН;

	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.ОблагаетсяПолностью	, Истина, Истина,   Ложь);
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.НеОблагаетсяПолностью	, 	Ложь, 	Ложь,   Ложь);
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.ОблагаетсяФСЗНиЕП		, Истина, 	Ложь, Истина);

	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.ОблагаетсяСтрахиЕП	, 	Ложь, Истина, Истина);
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.ОблагаетсяЕП			, 	Ложь, 	Ложь, Истина);
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.ОблагаетсяСтрах		, 	Ложь, истина,	ложь);
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.ОблагаетсяФСЗН		, Истина, 	Ложь,	Ложь);
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.ОблагаетсяФСЗНиСТРАХ	, Истина, Истина,	Ложь);
 	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.БольничныйИзФСЗН		, 	Ложь, 	ложь,	Ложь);
    УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.ДоговорГПХ		    , Истина, Истина,	Ложь);

	// ---------------------------------------------------

КонецПроцедуры

// Выполняет заполнение справочника "КлассификаторИспользованияРабочегоВремени" 
//
Процедура ЗаполнитьКлассификаторИспользованияРабочегоВремени() 
	
	// Установка реквизитов предопределенных элементов
	ВремяОтработанноеВПределахНормы = Перечисления.ВидыВремени.ОтработанноеВПределахНормы;
	ВремяДополнительноОплачиваемоеВПределахНормы = Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы;
	ВремяОтработанноеСверхНормы = Перечисления.ВидыВремени.ОтработанноеСверхНормы;
	ВремяЦелодневноеНеотработанное = Перечисления.ВидыВремени.ЦелодневноеНеотработанное;
	ВремяЧасовоеНеотработанное = Перечисления.ВидыВремени.ЧасовоеНеотработанное;
	
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни.ПолучитьОбъект(),									истина,"В", "26", , "Выходные дни (еженедельный отпуск) и  нерабочие праздничные дни",Перечисления.ВидыВремени.ПустаяСсылка());
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Работа.ПолучитьОбъект(),										истина,"Я", "01", "Явка", "Продолжительность работы в дневное время", ВремяОтработанноеВПределахНормы,Истина);
	
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Командировка.ПолучитьОбъект(),									истина,"К", "06", "Командировка", "Служебная командировка",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификации.ПолучитьОбъект(),						истина,"ПК","07", "Повышение квалификации", "Повышение квалификации с отрывом от работы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификацииВДругойМестности.ПолучитьОбъект(),		истина,"ПМ","08", "Повышение квалификации в другой местности", "Повышение квалификации с отрывом от работы в другой местности",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск.ПолучитьОбъект(),								истина,"ОТ","09", "Отпуск", "Ежегодный основной оплачиваемый отпуск",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск.ПолучитьОбъект(),							истина,"ОД","10", "Дополнительный отпуск", "Ежегодный дополнительный оплачиваемый отпуск",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение.ПолучитьОбъект(),								истина,"У", "11", "Отпуск дополнительный (оплачиваемый учебный)", "Дополнительный отпуск в связи с обучением с сохранением среднего заработка работникам, совмещающим работу с обучением",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый.ПолучитьОбъект(),				ложь,"УД","13", "Отпуск дополнительный (неоплачиваемый учебный)", "Дополнительный отпуск в связи с обучением без сохранения заработной платы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам.ПолучитьОбъект(),					ложь,"Р", "14", "Отпуск по беременности и родам", "Отпуск по беременности и родам (отпуск в связи с усыновлением новорожденного ребенка)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком.ПолучитьОбъект(),						ложь,"ОЖ","15", , "Отпуск по уходу за ребенком до достижения им возраста трех лет",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя.ПолучитьОбъект(),	истина,"ДО","16", , "Отпуск без сохранения заработной платы, предоставляемый работнику по разрешению работодателя",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству.ПолучитьОбъект(),		ложь,"ОЗ","17", , "Отпуск без сохранения заработной платы в случаях, предусмотренных законодательством",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск.ПолучитьОбъект(),			ложь,"ДБ","18", , "Ежегодный дополнительный отпуск без сохранения заработной платы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь.ПолучитьОбъект(),										ложь,"Б ","19", "Больничный", "Временная нетрудоспособность с назначением пособия согласно законодательству",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.БолезньБезОплаты.ПолучитьОбъект(),								ложь,"Т", "20", "Больничный неоплачиваемый", "Временная нетрудоспособность без назначения пособия в случаях, предусмотренных законодательством",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ВынужденныйПрогул.ПолучитьОбъект(),							истина,"ПВ","22", , "Время вынужденного прогула в случае признания увольнения, перевода на другую работу или отстранения от работы незаконными с восстановлением на прежней работе",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ГосударственныеОбязанности.ПолучитьОбъект(),					истина,"Г", "23", , "Невыходы на время исполнения государственных или общественных обязанностей согласно законодательству",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Прогулы.ПолучитьОбъект(),										истина,"ПР","24", "Прогул", "Прогулы (отсутствие на рабочем месте без уважительных причин в течение времени, установленного законодательством)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныеВыходныеДниОплачиваемые.ПолучитьОбъект(),		истина,"ОВ","27", , "Дополнительные выходные дни (оплачиваемые)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныеВыходныеДниНеОплачиваемые.ПолучитьОбъект(),		истина,"НВ","28", , "Дополнительные выходные дни (без сохранения заработной платы)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Забастовка.ПолучитьОбъект(),									истина,"ЗБ","29", "Забастовка", "Забастовка (при условиях и в порядке, предусмотренных законом)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам.ПолучитьОбъект(),					истина,"НН","30", , "Неявки по невыясненным причинам (до выяснения обстоятельств)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботодателя.ПолучитьОбъект(),					истина,"РП","31", , "Время простоя по вине работодателя",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Простой.ПолучитьОбъект(),										истина,"НП","32", , "Время простоя по причинам, не зависящим от работодателя и работника",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботника.ПолучитьОбъект(),						истина,"ВП","33", "Простой", "Простои по вине работника",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыСОплатой.ПолучитьОбъект(),					истина,"НО","34", , "Отстранение от работы (недопущение к работе) с оплатой (пособием) в соответствии с законодательством",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыБезОплаты.ПолучитьОбъект(),					истина,"НБ","35", , "Отстранение от работы (недопущение к работе) по причинам, предусмотренным законодательством, без начисления заработной платы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ЗадержкаВыплатыЗаработнойПлаты.ПолучитьОбъект(),				истина,"НЗ","36", , "Время приостановки работы в случае задержки выплаты заработной платы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы.ПолучитьОбъект(),								ложь,"Н ","02", "Ночные часы", "Продолжительность работы в ночное время",ВремяДополнительноОплачиваемоеВПределахНормы,Истина);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы.ПолучитьОбъект(),							ложь,"ВЧ","41", "Вечерние часы", "Продолжительность работы в вечернее время",ВремяДополнительноОплачиваемоеВПределахНормы,Истина);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные.ПолучитьОбъект(),									ложь,"С ","04", "Сверхурочно", "Продолжительность сверхурочной работы",ВремяОтработанноеСверхНормы, Истина);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Праздники.ПолучитьОбъект(),									ложь,"РВ","03", "Праздники", "Продолжительность работы в выходные и нерабочие, праздничные дни", ВремяОтработанноеСверхНормы, Истина);

	// Создание остальных элементов классификатора
	ДобавитьКодИспользованияРабочегоВремени("ВМ","05", "Вахта", "Продолжительность работы вахтовым методом",ВремяОтработанноеВПределахНормы,Истина);
	ДобавитьКодИспользованияРабочегоВремени("УВ","12", , "Сокращенная продолжительность рабочего для обучающихся без отрыва от производства с частичным сохранением заработной платы",ВремяОтработанноеВПределахНормы,Истина);
	ДобавитьКодИспользованияРабочегоВремени("ЛЧ","21", , "Сокращенная продолжительность рабочего времени против нормальной продолжительности рабочего дня в случаях, предусмотренных законодательством",ВремяОтработанноеВПределахНормы,Истина);
	ДобавитьКодИспользованияРабочегоВремени("НС","25", , "Продолжительность работы в режиме неполного рабочего времени по инициативе работодателя в случаях, предусмотренных законодательством",ВремяОтработанноеВПределахНормы,Истина);

КонецПроцедуры

// Выполняет заполнение реквизитов планов видов расчета регламентированного учета
//
Процедура ЗаполнитьПланыВидовРасчетаОрганизации() 
	
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Справочники.КатегорииРасчетов;
	ЗависимоеВторогоУровня = НайтиСоздатьКатегорию("00002","Зависимое второго уровня");
	ЗависимоеТретьегоУровня = НайтиСоздатьКатегорию("00003","Зависимое третьего уровня");
	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	ЕСНСпособыОтражения      = Справочники.ДоходыЕСН;
	КодыДоходаПоСт255		 = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК;
	КодДоходаНДФЛПоУмолчанию = ДоходыНДФЛ.КодДоходаПоУмолчанию;
	КодДоходаЕСНПоУмолчанию  = ЕСНСпособыОтражения.ОблагаетсяПолностью;
	ПособияЗаСчетФСС		 = ЕСНСпособыОтражения.БольничныйИзФСЗН;
	
	НеОтражатьВБухУчете   = Справочники.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете;
	ПустойСпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();
	СпособОтраженияПоБазовымРасчетам = Справочники.СпособыОтраженияЗарплатыВРеглУчете.РаспределятьПоБазовымНачислениям;
	ПланСчетов = ПланыСчетов.Хозрасчетный;
	
	//заполним способ отражения по умолчанию
	СпособУчетПоУмолчанию = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию.ПолучитьОбъект();
	СпособУчетПоУмолчанию.СчетДт = ПланСчетов.ОбщехозяйственныеРасходы;
	СпособУчетПоУмолчанию.СубконтоДт1 = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	СпособУчетПоУмолчанию.СубконтоДт2 = Справочники.СтатьиЗатрат.ПустаяСсылка();
	СпособУчетПоУмолчанию.СчетКт = ПланСчетов.РасчетыСПерсоналомПоОплатеТруда;
	СпособУчетПоУмолчанию.СубконтоКт1 = Справочники.ФизическиеЛица.ПустаяСсылка();
	СпособУчетПоУмолчанию.СчетДтНУ = БухгалтерскийИНалоговыйУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПланСчетов.ОбщехозяйственныеРасходы));
	СпособУчетПоУмолчанию.СубконтоДтНУ1 = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	СпособУчетПоУмолчанию.СубконтоДтНУ2 = Справочники.СтатьиЗатрат.ПустаяСсылка();
	СпособУчетПоУмолчанию.СчетКтНУ = БухгалтерскийИНалоговыйУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПланСчетов.РасчетыСПерсоналомПоОплатеТруда));
	СпособУчетПоУмолчанию.СубконтоКтНУ1 = Справочники.ФизическиеЛица.ПустаяСсылка();
	СпособУчетПоУмолчанию.СубконтоКтНУ2 = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ПовременноПремиальная;
	СпособУчетПоУмолчанию.Записать();
	
	// Основные начисления организации  
	
	ПВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	УчетВремени = Справочники.КлассификаторИспользованияРабочегоВремени;
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОкладПоДням, 						СпРасчета.ПоМесячнойТарифнойСтавкеПоДням,				Перечисления.ВидыВремени.ОтработанноеВПределахНормы,	Категории.Первичное,			УчетВремени.Работа,				Истина, Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ПовременноПремиальная,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОкладПоЧасам, 					СпРасчета.ПоМесячнойТарифнойСтавкеПоЧасам,				Перечисления.ВидыВремени.ОтработанноеВПределахНормы,	Категории.Первичное,			УчетВремени.Работа,	 			Истина, Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ПовременноПремиальная,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ТарифЧасовой, 					СпРасчета.ПоЧасовойТарифнойСтавке,						Перечисления.ВидыВремени.ОтработанноеВПределахНормы,	Категории.Первичное,			УчетВремени.Работа,				Истина, Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ПовременноПремиальная,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ТарифДневной, 					СпРасчета.ПоДневнойТарифнойСтавке,						Перечисления.ВидыВремени.ОтработанноеВПределахНормы,	Категории.Первичное,			УчетВремени.Работа, 				Истина, Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ПовременноПремиальная,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.СдельнаяОплата, 					СпРасчета.СдельныйЗаработок,							Перечисления.ВидыВремени.ОтработанноеВПределахНормы,	Категории.Первичное,			УчетВремени.Работа,				Истина, Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ПовременноПремиальная,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаПоСреднему,   				СпРасчета.ПоСреднемуЗаработку,							Перечисления.ВидыВремени.ЦелодневноеНеотработанное,		Категории.Первичное,			,						Ложь,   Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ОплатыПоСреднему,2,,Ложь);
	
	// два отпуска
	                                                                                                                                                                                                                                           	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаПоСреднемуОтпШестидневка,	СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоШестидневке,	Перечисления.ВидыВремени.ЦелодневноеНеотработанное,		ЗависимоеТретьегоУровня, 		УчетВремени.ОсновнойОтпуск, 			Ложь,   Истина, КодДоходаНДФЛПоУмолчанию,	КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ОплатаОтпускаТек,12,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаПоСреднемуОтпКалендарныеДни,СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням,Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	ЗависимоеТретьегоУровня, 		УчетВремени.ОсновнойОтпуск, 			Ложь,   Истина, КодДоходаНДФЛПоУмолчанию,	КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ОплатаОтпускаТек,12,,Ложь);
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПростойОкладПоДням,				СпРасчета.ПоМесячнойТарифнойСтавкеПоДням,				Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.Простой, 				Ложь,   Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ОплатаПростоев,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПростойОкладПоЧасам,				СпРасчета.ПоМесячнойТарифнойСтавкеПоЧасам,				Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.Простой, 				Ложь,   Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ОплатаПростоев,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПочасовойПростойОкладПоЧасам,		СпРасчета.ПоМесячнойТарифнойСтавкеПоЧасам,				Перечисления.ВидыВремени.ЧасовоеНеотработанное, 		Категории.Первичное,	 		УчетВремени.Простой,				Ложь,   Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ОплатаПростоев,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПростойТарифДневной,				СпРасчета.ПоДневнойТарифнойСтавке,						Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.Простой, 				Ложь,   Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ОплатаПростоев,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПростойТарифЧасовой,				СпРасчета.ПоЧасовойТарифнойСтавке,						Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.Простой, 				Ложь,   Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ОплатаПростоев,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПочасовойПростойТарифЧасовой,		СпРасчета.ПоЧасовойТарифнойСтавке,						Перечисления.ВидыВремени.ЧасовоеНеотработанное, 		Категории.Первичное, 			УчетВремени.Простой,				Ложь,   Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ОплатаПростоев,,,Ложь);
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПростойПоВинеРаботодателя,		СпРасчета.ПоСреднемуЗаработку,							Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное,			УчетВремени.ПростойПоВинеРаботодателя,		Ложь,   Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ОплатаПростоев, 2,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПочасовойПростойПоВинеРаботодателя,СпРасчета.ПоСреднемуЗаработку,							Перечисления.ВидыВремени.ЧасовоеНеотработанное, 		Категории.Первичное,			УчетВремени.ПростойПоВинеРаботодателя,		Ложь,	Истина, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ОплатаПростоев, 2,,Ложь);
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаПраздничныхИВыходных,		СпРасчета.ФиксированнойСуммой,							Перечисления.ВидыВремени.ОтработанноеСверхНормы, 		Категории.Первичное, 			УчетВремени.Праздники, 				Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ДоплатаЗаСверхурочные,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДоплатаЗаПраздничныеИВыходные,	СпРасчета.ФиксированнойСуммой,							Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы,Категории.Первичное,		Неопределено, 					Ложь,   Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ДоплатаЗаСверхурочные,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаСверхурочных,				СпРасчета.ФиксированнойСуммой,							Перечисления.ВидыВремени.ОтработанноеСверхНормы, 		Категории.Первичное,			УчетВремени.Сверхурочные, 			Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ДоплатаЗаСверхурочные,,,Ложь);
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДоплатаЗаВечерниеЧасы,	 		СпРасчета.ДоплатаЗаВечерниеЧасы,						Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы,Категории.Первичное,		УчетВремени.РаботаВечерниеЧасы,			Ложь,   Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ДоплатаЗаВечерниеНочные,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДоплатаЗаНочныеЧасы, 				СпРасчета.ДоплатаЗаНочныеЧасы,							Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы,Категории.Первичное,		УчетВремени.РаботаНочныеЧасы, 			Ложь,   Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ДоплатаЗаВечерниеНочные,,,Ложь);
	
	// начисления по больничному листу	
		
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаПоСреднемуБЛ, 				СпРасчета.ПоСреднемуЗаработкуФСС,						Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	ЗависимоеТретьегоУровня, 		УчетВремени.Болезнь, 				Ложь,   Истина, КодДоходаНДФЛПоУмолчанию, ЕСНСпособыОтражения.БольничныйИзФСЗН, ,КодыДоходаПоСт255.ПособияПоВременнойНетрудоспособности,2,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтсутствиеПоБолезни, 				СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.Болезнь, 				Ложь,   Истина, 			  , ,НеОтражатьВБухУчете);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаБЛПоУходу, 					СпРасчета.ПоСреднемуЗаработкуФСС, 						Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.Болезнь, 				Ложь,   Истина, КодДоходаНДФЛПоУмолчанию, ЕСНСпособыОтражения.БольничныйИзФСЗН, , КодыДоходаПоСт255.ПособияПоВременнойНетрудоспособности,2,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаБЛЛиквидаторамЧАЭС,			СпРасчета.ПоСреднемуЗаработкуФСС, 						Перечисления.ВидыВремени.ЦелодневноеНеотработанное,		Категории.Первичное, 			УчетВремени.Болезнь, 				Ложь,   Истина, КодДоходаНДФЛПоУмолчанию, ЕСНСпособыОтражения.БольничныйИзФСЗН, , КодыДоходаПоСт255.ПособияПоВременнойНетрудоспособности,2,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами,СпРасчета.ПоСреднемуЗаработку,				Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.ДополнительныеВыходныеДниОплачиваемые,Ложь, Истина, КодДоходаНДФЛПоУмолчанию, ЕСНСпособыОтражения.БольничныйИзФСЗН, , КодыДоходаПоСт255.ПособияПоВременнойНетрудоспособности,2,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускПоБеременностиИРодам, 		СпРасчета.ПоСреднемуЗаработкуФСС,						Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	ЗависимоеТретьегоУровня, 		УчетВремени.ОтпускПоБеременностиИРодам, 	Ложь,   Истина, 			, ЕСНСпособыОтражения.БольничныйИзФСЗН, , КодыДоходаПоСт255.ВыплатыПоПроизводствТравмам,2,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтсутствиеПоБолезниПоБеременности,СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.ОтпускПоБеременностиИРодам, 	Ложь,   Истина, 			, ЕСНСпособыОтражения.БольничныйИзФСЗН , НеОтражатьВБухУчете);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаБЛПоТравмеВБыту,			СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное,		Категории.Первичное,			УчетВремени.БолезньБезОплаты,			Ложь,   Истина, 			, ЕСНСпособыОтражения.БольничныйИзФСЗН , НеОтражатьВБухУчете);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаБЛ2013,						СпРасчета.ПоСреднемуЗаработкуФСЗН,						Перечисления.ВидыВремени.ЦелодневноеНеотработанное,		ЗависимоеТретьегоУровня,		УчетВремени.Болезнь, 				Ложь,   Ложь, 				, ЕСНСпособыОтражения.БольничныйИзФСЗН,,, 6);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОпалатБЛПоУходу2013,				СпРасчета.ПоСреднемуЗаработкуФСЗН,						Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	ЗависимоеТретьегоУровня,		УчетВремени.Болезнь, 				Ложь,   Ложь, 				, ЕСНСпособыОтражения.БольничныйИзФСЗН,,, 6);
    УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаБЛВМинРазмере,				СпРасчета.ОтпускПоБеременностиОтБПМ,					Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	ЗависимоеТретьегоУровня,		УчетВремени.Болезнь, 				Ложь,   Ложь, 				, ЕСНСпособыОтражения.БольничныйИзФСЗН,,, 6);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаБЛПоТравмеНаПроизводстве,	СпРасчета.ПоСреднемуЗаработкуФСЗН,						Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	ЗависимоеТретьегоУровня,		УчетВремени.Болезнь, 			        Ложь,   Ложь,   ДоходыНДФЛ.Код1211	, ЕСНСпособыОтражения.БольничныйИзФСЗН,,, 6);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускПоБеременности,				СпРасчета.ПоСреднемуЗаработкуФСЗН,						Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	ЗависимоеТретьегоУровня,		УчетВремени.ОтпускПоБеременностиИРодам, 	Ложь,   Ложь,	ДоходыНДФЛ.Код1211 	, ЕСНСпособыОтражения.БольничныйИзФСЗН,,, 6);
    УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаБЛОтТарфинойСтавки,			СпРасчета.РасчетБЛотТарифнойСтавки,						Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	ЗависимоеТретьегоУровня,		УчетВремени.Болезнь,				Ложь,  	Ложь,	КодДоходаНДФЛПоУмолчанию, ЕСНСпособыОтражения.БольничныйИзФСЗН,,, 6);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускПоБеременостиОтБПМ,			СпРасчета.ОтпускПоБеременностиОтБПМ,					Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	ЗависимоеТретьегоУровня,		УчетВремени.ОтпускПоБеременностиИРодам,		Ложь,  	Ложь,	КодДоходаНДФЛПоУмолчанию, ЕСНСпособыОтражения.БольничныйИзФСЗН,,, 6);


	
	
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеНаРебенкаИнвалида,				СпРасчета.ПособиеНаРебенкаИнвалида,					Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено,	 					Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеНаРебенкаДо18ЛетНадб40,		СпРасчета.ПособиеНаРебенкаДо18ЛетНадб40,			Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 						Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеНаРебенкаСНадбавкой40До3Лет,	СпРасчета.ПособиеНаРебенкаСНадбавкой40До3Лет,		Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено,	 					Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеНаРебенкаДо3Лет,				СпРасчета.ПособиеНаРебенкаДо3Лет,					Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 						Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ,	СпРасчета.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ,		Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 						Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН); 
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ,	СпРасчета.ПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ,		Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 						Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН); 
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ,	СпРасчета.ПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ,		Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 						Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН); 

	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеНаРебенкаВИЧ,					СпРасчета.ПособиеНаРебенкаВИЧ,						Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено,	 					Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеМатериОдиночкедо1_5лет,		СпРасчета.ПособиеМатериОдиночкеДо1_5лет,			Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 						Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеМатериОдиночкеДо3Лет,			СпРасчета.ПособиеМатериОдиночкеДо3Лет,				Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено,	 					Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеНаРебенкаСтарше3Лет,			СпРасчета.ПособиеНаРебенкаСтарше3Лет,				Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 						Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
    УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеНеРаботающейМатериДо3Лет,		СпРасчета.ПособиеНеРаботающейМатериДо3Лет,			Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено,	 					Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеНеРабМатериНадб40До3Лет,		СпРасчета.ПособиеНеРабМатериНадб40До3Лет,			Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 						Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеНеРабМатериОдиночкеДо1_5Лет,	СпРасчета.ПособиеНеРабМатериОдиночкеДо1_5Лет,		Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено,	 					Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеНеРабМатериОдиночкеДо3Лет,		СпРасчета.ПособиеНеРабМатериОдиночкеДо3Лет,			Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 						Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	
    УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеНаРебенкаДо3Лет,						СпРасчета.ПособиеНаРебенкаДо3Лет,						Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 	Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
    УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ,			СпРасчета.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ,			Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 	Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеНаРебенкаДо3ЛетНаВторого,				СпРасчета.ПособиеНаРебенкаДо3ЛетНаВторого,				Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 	Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида,		СпРасчета.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида,		Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 	Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеНаРебенкаСтарше3Лет,					СпРасчета.ПособиеНаРебенкаСтарше3Лет,					Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 	Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
    УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида,	СпРасчета.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида,	Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 	Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
    УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускПоБеременности,							СпРасчета.ПоСреднемуЗаработкуОтпускаПоБеременности,		Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 		  Категории.НайтиПоКоду("00003"),	Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам, 	Ложь,   Ложь, ,		ЕСНСпособыОтражения.БольничныйИзФСЗН);
    
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускПоУходуЗаРебенкомБезОплаты,	СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное,			УчетВремени.ОтпускПоУходуЗаРебенком, 		Ложь,   Истина, ,ЕСНСпособыОтражения.НеОблагаетсяПолностью , НеОтражатьВБухУчете);
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.Невыход,							СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.НеявкиПоНевыясненнымПричинам, 	Ложь,   Истина, , , НеОтражатьВБухУчете);
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускБезОплатыПоТКРФ,			СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.НеоплачиваемыйОтпускПоЗаконодательству,Ложь,Истина, ,ЕСНСпособыОтражения.ПериодыНеуплаты , НеОтражатьВБухУчете);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускБезОплатыУчебный,			СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.ОтпускНаОбучениеНеоплачиваемый, 	Ложь,   Истина, ,ЕСНСпособыОтражения.ПериодыНеуплаты , НеОтражатьВБухУчете);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускЗаСвойСчет,					СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное,		УчетВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя,Ложь,	Истина, ,ЕСНСпособыОтражения.ПериодыНеуплаты , НеОтражатьВБухУчете);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.Прогул,							СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное, 			УчетВремени.Прогулы, 				Ложь,   Истина, ,ЕСНСпособыОтражения.ПериодыНеуплаты , НеОтражатьВБухУчете);
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДоплатаЗаПраздничныеИВыходныеПоГрафику,				СпРасчета.ФиксированнойСуммой,							Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, 		Категории.Первичное,			УчетВремени.Праздники, 			Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ДоплатаЗаСверхурочные,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДоплатаЗаСверхурочные,								СпРасчета.ФиксированнойСуммой,							Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, 		Категории.Первичное,			УчетВремени.Сверхурочные, 		Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ДоплатаЗаСверхурочные,,,Ложь);
		
	// Непредопределенные виды расчетов
	
	// доплата до среднего заработка
	ВидРасчетаДоплатаДоСреднегоЗаработка = СоздатьВидРасчета(ПВР, "00035", "Доплата до среднего заработка");
	КодДоходаЕСН    = КодДоходаЕСНПоУмолчанию;
	СпособОтражения = ПустойСпособОтражения;
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ВидРасчетаДоплатаДоСреднегоЗаработка, СпРасчета.ДоплатаДоСреднегоЗаработка, Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.ЗависимоеПервогоУровня, УчетВремени.Работа, Ложь, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСН, СпособОтражения, КодыДоходаПоСт255.ОплатыПоСреднему, 2, Истина);
	
	// Внутрисменный прогул
	ВидРасчетаВнутрисменныйПрогул = СоздатьВидРасчета(ПВР, "00036", "Внутрисменный прогул");
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ВидРасчетаВнутрисменныйПрогул, СпРасчета.НулеваяСумма, Перечисления.ВидыВремени.ЧасовоеНеотработанное, Категории.Первичное, УчетВремени.Прогулы, Ложь, Истина, , , НеОтражатьВБухУчете);
	
	// РБ
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаСверхурочныхПоНарядам,				   СпРасчета.ФиксированнойСуммой, Перечисления.ВидыВремени.ОтработанноеСверхНормы, 		            Категории.Первичное,			УчетВремени.Сверхурочные, 		Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию,НеОтражатьВБухУчете , КодыДоходаПоСт255.ДоплатаЗаСверхурочные,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДоплатаЗаСверхурочныеПоНарядам,			   СпРасчета.ФиксированнойСуммой, Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,			УчетВремени.Сверхурочные, 		Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию,НеОтражатьВБухУчете , КодыДоходаПоСт255.ДоплатаЗаСверхурочные,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаЗаРаботуВПраздникиИВыходныеПоНарядам,  СпРасчета.ФиксированнойСуммой, Перечисления.ВидыВремени.ОтработанноеСверхНормы, 		            Категории.Первичное,			УчетВремени.Праздники, 		Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию,НеОтражатьВБухУчете , КодыДоходаПоСт255.ДоплатаЗаСверхурочные,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДоплатаЗаРаботуВПраздникиИВыходныеПоНарядам, СпРасчета.ФиксированнойСуммой, Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,			УчетВремени.Праздники, 		Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию,НеОтражатьВБухУчете , КодыДоходаПоСт255.ДоплатаЗаСверхурочные,,,Ложь);
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.СдельнаяТарифнаяЧасть, СпРасчета.СделкаПоЧасовойТарифнойСтавке, Перечисления.ВидыВремени.ОтработанноеВПределахНормы, 		        Категории.Первичное,			УчетВремени.Работа, 		Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию,ПустойСпособОтражения , КодыДоходаПоСт255.СдельноПремиальная,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.СдельныйПриработок,	 СпРасчета.СдельныйПриработок, 			  Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,			, 		Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию,ПустойСпособОтражения , КодыДоходаПоСт255.СдельноПремиальная,,,Ложь);
	
	

	
	// Дополнительные начисления организации
	
	ПВР = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций;
	ВидыПремии = Перечисления.ВидыПремии;
	
	КодДоходаЕСН    = КодДоходаЕСНПоУмолчанию; 
	СпособОтражения = ПустойСпособОтражения;
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.Годовая, 		СпРасчета.Процентом, Категории.ЗависимоеПервогоУровня, ВидыПремии.ГодоваяПремия, 	12, 0, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСН, СпособОтражения, КодыДоходаПоСт255.выплатыЗаПроизводственныеРезультаты);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.Квартальная, 	СпРасчета.Процентом, Категории.ЗависимоеПервогоУровня, ВидыПремии.Премия, 		 	 3, 0, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСН, СпособОтражения, КодыДоходаПоСт255.выплатыЗаПроизводственныеРезультаты);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.Месячная, 		СпРасчета.Процентом, Категории.ЗависимоеПервогоУровня, ВидыПремии.Премия, 	   		 1, 0, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСН, СпособОтражения, КодыДоходаПоСт255.выплатыЗаПроизводственныеРезультаты);
	
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ДивидендыРаботников,						СпРасчета.ФиксированнойСуммой, 			Категории.Первичное				, ВидыПремии.НеПремия, 		 0, 0, ДоходыНДФЛ.Код1842	, 	КодДоходаЕСН, Неопределено, КодыДоходаПоСт255.ПрочиеВыплаты);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ДивидендыАкционеров,						СпРасчета.ФиксированнойСуммой, 			Категории.Первичное				, ВидыПремии.НеПремия, 		 0, 0, ДоходыНДФЛ.Код1842	, 	КодДоходаЕСН, Неопределено, КодыДоходаПоСт255.ПрочиеВыплаты);
	
	КодДоходаЕСН    = ЕСНСпособыОтражения.НеОблагаетсяПолностью; 
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ВыходноеПособие,							СпРасчета.ПоСреднемуЗаработку, 			Категории.Первичное 			, ВидыПремии.НеПремия,		12, 0, Неопределено, 	КодДоходаЕСН, СпособОтражения, КодыДоходаПоСт255.ПрочиеВыплаты);
	
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.СохраняемыйЗаработокНаВремяТрудоустройства,	СпРасчета.ПоСреднемуЗаработку, 			Категории.Первичное 			, ВидыПремии.НеПремия,		12, 0, Неопределено, 	КодДоходаЕСН, СпособОтражения, КодыДоходаПоСт255.ПрочиеВыплаты);
	
	// две компенсации отпуска (при увольнении)
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.КомпенсацияОтпускаКалендарныеДни,	СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням,	Категории.Первичное	, ВидыПремии.НеПремия,		12, 0, КодДоходаНДФЛПоУмолчанию,   ЕСНСпособыОтражения.ОблагаетсяПолностью,  СпособОтражения, КодыДоходаПоСт255.КомпенсацияОтпускаПриУвольнении);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.КомпенсацияОтпускаШестидневка,		СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоШестидневке,		Категории.Первичное	, ВидыПремии.НеПремия,		12, 0, КодДоходаНДФЛПоУмолчанию, 	ЕСНСпособыОтражения.ОблагаетсяПолностью,  СпособОтражения, КодыДоходаПоСт255.КомпенсацияОтпускаПриУвольнении);
	
	// две компенсации отпуска (при увольнении)
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.УдержаниеЗаНеотработанныйОтпускКалендарныеДни,СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням, Категории.Первичное, ВидыПремии.НеПремия, 12, 0, КодДоходаНДФЛПоУмолчанию, ЕСНСпособыОтражения.ОблагаетсяПолностью,  СпособОтражения, КодыДоходаПоСт255.КомпенсацияОтпускаПриУвольнении);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.УдержаниеЗаНеотработанныйОтпускШестидневка,	  СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоШестидневке,	    Категории.Первичное, ВидыПремии.НеПремия, 12, 0, КодДоходаНДФЛПоУмолчанию, ЕСНСпособыОтражения.ОблагаетсяПолностью,  СпособОтражения, КодыДоходаПоСт255.КомпенсацияОтпускаПриУвольнении);
			
	// и еще две компенсации отпуска (без увольнения)
	КодДоходаЕСН    = КодДоходаЕСНПоУмолчанию; 
	СпособОтражения = ПустойСпособОтражения;
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.КомпенсацияОтпускаКалендарныеДниБезУвольнения,СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням,	Категории.Первичное	, ВидыПремии.НеПремия,	12, 0, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСН, СпособОтражения, КодыДоходаПоСт255.КомепсацияОтпуска);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.КомпенсацияОтпускаШестидневкаБезУвольнения,	СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоШестидневке,		Категории.Первичное	, ВидыПремии.НеПремия,	12, 0, КодДоходаНДФЛПоУмолчанию, КодДоходаЕСН, СпособОтражения, КодыДоходаПоСт255.КомепсацияОтпуска);
	
	// пособия за счет ФСС
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ВСвязиСоСмертью,							СпРасчета.ФиксированнойСуммой, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, 0, ДоходыНДФЛ.Код1211	, 	ЕСНСпособыОтражения.ПособияИзФСЗН,	  Неопределено,КодыДоходаПоСт255.ПособияРазовыеФСЗН);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ПриПостановкеНаУчетВРанниеСрокиБеременности,СпРасчета.ФиксированнойСуммой, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, 0, ДоходыНДФЛ.Код1211	, 	ЕСНСпособыОтражения.ПособияИзФСЗН,	  Неопределено,КодыДоходаПоСт255.ПособияРазовыеФСЗН);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ПриРожденииРебенка,							СпРасчета.ФиксированнойСуммой, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, 0, ДоходыНДФЛ.Код1211	, 	ЕСНСпособыОтражения.ПособияИзФСЗН,	  Неопределено,КодыДоходаПоСт255.ПособияРазовыеФСЗН);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ПриРожденииВторогоИПоследующихДетей,		СпРасчета.ФиксированнойСуммой, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, 0, ДоходыНДФЛ.Код1211	, 	ЕСНСпособыОтражения.ПособияИзФСЗН,	  Неопределено,КодыДоходаПоСт255.ПособияРазовыеФСЗН);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ПриУсыновленииРебенка,						СпРасчета.ФиксированнойСуммой, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, 0, ДоходыНДФЛ.Код1211	, 	ЕСНСпособыОтражения.ПособияИзФСЗН,	  Неопределено,КодыДоходаПоСт255.ПособияРазовыеФСЗН);
    УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ОплатаБЛДоговорникам, 						СпРасчета.ПоСреднемуЗаработкуФСЗН,	ЗависимоеТретьегоУровня				, ВидыПремии.НеПремия,		 0, 6, КодДоходаНДФЛПоУмолчанию, 	ЕСНСпособыОтражения.БольничныйИзФСЗН, 	  Неопределено,КодыДоходаПоСт255.ПособияПоВременнойНетрудоспособности);
    УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ОплатаБЛУволеным, 							СпРасчета.ПоСреднемуЗаработкуФСЗН,	ЗависимоеТретьегоУровня				, ВидыПремии.НеПремия,		 0, 6, КодДоходаНДФЛПоУмолчанию, 	ЕСНСпособыОтражения.БольничныйИзФСЗН,     Неопределено,КодыДоходаПоСт255.ПособияПоВременнойНетрудоспособности);
	

	
	// договора ГПХ
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ДоговорПодряда, 							СпРасчета.ПоДоговоруФиксированнойСуммой,	Категории.Первичное			, ВидыПремии.НеПремия,		 0, 0, КодДоходаНДФЛПоУмолчанию, 	ЕСНСпособыОтражения.ОблагаетсяПолностью, Неопределено,	  КодыДоходаПоСт255.Договора);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.АвторскийДоговор, 							СпРасчета.ПоДоговоруФиксированнойСуммой,	Категории.Первичное			, ВидыПремии.НеПремия,		 0, 0, КодДоходаНДФЛПоУмолчанию, 	ЕСНСпособыОтражения.ОблагаетсяПолностью, Неопределено,	  КодыДоходаПоСт255.Договора);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ЛицензионныйДоговор, 						СпРасчета.ПоДоговоруФиксированнойСуммой,	Категории.Первичное			, ВидыПремии.НеПремия,		 0, 0, КодДоходаНДФЛПоУмолчанию, 	ЕСНСпособыОтражения.ОблагаетсяПолностью, Неопределено,	  КодыДоходаПоСт255.Договора);
	
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ОплатаБЛДоговорникам, 						СпРасчета.ПоСреднемуЗаработкуФСЗН,			ЗависимоеТретьегоУровня		, ВидыПремии.НеПремия,		 0, 6, КодДоходаНДФЛПоУмолчанию, 	ЕСНСпособыОтражения.БольничныйИзФСЗН, 	Неопределено,	  КодыДоходаПоСт255.ПособияПоВременнойНетрудоспособности);
    УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ОплатаБЛУволеным, 							СпРасчета.ПоСреднемуЗаработкуФСЗН,			ЗависимоеТретьегоУровня		, ВидыПремии.НеПремия,		 0, 6, КодДоходаНДФЛПоУмолчанию, 	ЕСНСпособыОтражения.БольничныйИзФСЗН, 	Неопределено,	  КодыДоходаПоСт255.ПособияПоВременнойНетрудоспособности);
	

	// ----------------------------------------------------------------------------------------------------
	// Установка базовых видов расчетов
	ПВРОсн  = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	ПВРДоп  = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций;
	ПВРУд   = ПланыВидовРасчета.УдержанияОрганизаций;
	ПВРСред = ПланыВидовРасчета.СреднийЗаработок;
	
	СпНачисленийЗаОтработанноеВремя = Новый СписокЗначений;
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОкладПоДням);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОкладПоЧасам);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ТарифДневной);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ТарифЧасовой);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ДоплатаЗаПраздничныеИВыходные);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОплатаПраздничныхИВыходных);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОплатаСверхурочных);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.СдельнаяОплата);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ДоплатаЗаВечерниеЧасы);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ДоплатаЗаНочныеЧасы);
	
	
	// доплата до среднего заработка имеет базу
	УстановитьБазовыеИВедущиеРасчеты(ВидРасчетаДоплатаДоСреднегоЗаработка, СпНачисленийЗаОтработанноеВремя, СпНачисленийЗаОтработанноеВремя);
	
   
	// База основных начислений организации
	//СпБазовыхРасчетов = СпНачисленийЗаОтработанноеВремя.Скопировать();
	//СпБазовыхРасчетов.Добавить(ПВРДоп.Годовая);
	//СпБазовыхРасчетов.Добавить(ПВРДоп.Месячная);
	//СпБазовыхРасчетов.Добавить(ПВРДоп.Квартальная);
	//УстановитьБазовыеИВедущиеРасчеты(ПВРОсн.РайонныйКоэффициент, СпБазовыхРасчетов, СпБазовыхРасчетов);
	//УстановитьБазовыеИВедущиеРасчеты(ПВРОсн.СевернаяНадбавка, СпБазовыхРасчетов, СпБазовыхРасчетов);
	
	
	
	// База дополнительных начислений организации
	
	// все виды премий
	СпБазовыхРасчетов = СпНачисленийЗаОтработанноеВремя.Скопировать();
	УстановитьБазовыеИВедущиеРасчеты(ПВРДоп.Годовая, СпБазовыхРасчетов, СпБазовыхРасчетов);
	УстановитьБазовыеИВедущиеРасчеты(ПВРДоп.Квартальная, СпБазовыхРасчетов, СпБазовыхРасчетов);
	УстановитьБазовыеИВедущиеРасчеты(ПВРДоп.Месячная, СпБазовыхРасчетов, СпБазовыхРасчетов);
	
	// Базы видов расчета плана "средний заработок" 
	
	// месячные и квартальные премии
	//СпБазовыхРасчетов = Новый СписокЗначений;
	//СпБазовыхРасчетов.Добавить(ПВРДоп.Годовая);
	//СпВедущихРасчетов = СпНачисленийЗаОтработанноеВремя.Скопировать(); // т.е. изменение оклада должно вызвать перерасчет не только премии, но и среднего заработка
	//СпВедущихРасчетов.Добавить(ПВРДоп.Годовая);
	//УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоГодовойПремии, СпБазовыхРасчетов, СпВедущихРасчетов);
	//УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоГодовойПремииБЛ, СпБазовыхРасчетов, СпВедущихРасчетов);
	//УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоГодовойПремииИндексируемые, СпБазовыхРасчетов, СпВедущихРасчетов);
	
	// месячные и квартальные премии
	//СпБазовыхРасчетов = Новый СписокЗначений;
	//СпБазовыхРасчетов.Добавить(ПВРДоп.Месячная);
	//СпБазовыхРасчетов.Добавить(ПВРДоп.Квартальная);
	//СпВедущихРасчетов = СпНачисленийЗаОтработанноеВремя.Скопировать(); // т.е. изменение оклада должно вызвать перерасчет не только премии, но и среднего заработка
	//СпВедущихРасчетов.Добавить(ПВРДоп.Месячная);
	//СпВедущихРасчетов.Добавить(ПВРДоп.Квартальная);
	//УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоПремиям, СпБазовыхРасчетов, СпВедущихРасчетов);
	//УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоПремиямБЛ, СпБазовыхРасчетов, СпВедущихРасчетов);
	//УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоПремиямПособий, СпБазовыхРасчетов, СпВедущихРасчетов);
	//УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоПремиямИндексируемые, СпБазовыхРасчетов, СпВедущихРасчетов);
	
	// месячные и квартальные премии
	СпБазовыхРасчетов = Новый СписокЗначений;
	СпБазовыхРасчетов.Добавить(ПВРДоп.Месячная);
	СпБазовыхРасчетов.Добавить(ПВРДоп.Квартальная);
	УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоПремиям, СпБазовыхРасчетов, Неопределено);

	// основной заработок
	СпБазовыхРасчетов = СпНачисленийЗаОтработанноеВремя.Скопировать();
	//СпБазовыхРасчетов.Добавить(ПВРОсн.РайонныйКоэффициент);
	//СпБазовыхРасчетов.Добавить(ПВРОсн.СевернаяНадбавка);
	УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоЗаработкуБЛ, СпБазовыхРасчетов, Неопределено);
	УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоЗаработку, СпБазовыхРасчетов, Неопределено);
	//УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоЗаработкуПособий, СпБазовыхРасчетов, СпВедущихРасчетов);
	//УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоЗаработкуИндексируемые, СпБазовыхРасчетов, СпВедущихРасчетов);
	
	// База удержаний организации
	
	// исполнительные листы
	СпБазовыхРасчетов = СпНачисленийЗаОтработанноеВремя.Скопировать();
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОплатаПоСреднему);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОплатаПоСреднемуОтпКалендарныеДни);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОплатаПоСреднемуОтпШестидневка);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами);
	СпБазовыхРасчетов.Добавить(ВидРасчетаДоплатаДоСреднегоЗаработка);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ПростойОкладПоДням);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ПростойОкладПоЧасам);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ПростойПоВинеРаботодателя);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ПростойТарифДневной);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ПростойТарифЧасовой);
	//СпБазовыхРасчетов.Добавить(ПВРОсн.РайонныйКоэффициент);
	//СпБазовыхРасчетов.Добавить(ПВРОсн.СевернаяНадбавка);
	СпБазовыхРасчетов.Добавить(ПВРДоп.Годовая);
	СпБазовыхРасчетов.Добавить(ПВРДоп.Квартальная);
	СпБазовыхРасчетов.Добавить(ПВРДоп.Месячная);
	СпБазовыхРасчетов.Добавить(ПВРДоп.КомпенсацияОтпускаКалендарныеДниБезУвольнения);
	СпБазовыхРасчетов.Добавить(ПВРДоп.КомпенсацияОтпускаКалендарныеДни);
	СпБазовыхРасчетов.Добавить(ПВРДоп.КомпенсацияОтпускаШестидневка);
	СпБазовыхРасчетов.Добавить(ПВРДоп.КомпенсацияОтпускаШестидневкаБезУвольнения);
	
	СпБазовыхРасчетов.Добавить(ПВРДоп.СохраняемыйЗаработокНаВремяТрудоустройства);
	СпБазовыхРасчетов.Добавить(ПВРДоп.АвторскийДоговор);
	СпБазовыхРасчетов.Добавить(ПВРДоп.ДоговорПодряда);
	СпБазовыхРасчетов.Добавить(ПВРДоп.ЛицензионныйДоговор);
	СпБазовыхРасчетов.Добавить(ПВРДоп.ДивидендыРаботников);
	СпБазовыхРасчетов.Добавить(ПВРДоп.ДивидендыАкционеров);
	
	// Удержания организаций 
	
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.УдержаниеЗаНеотработанныйОтпускКалендарныеДни, 	СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням,	Категории.Первичное, Неопределено, Неопределено, 12);
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.УдержаниеЗаНеотработанныйОтпускШестидневка, 	СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоШестидневке,		Категории.Первичное, Неопределено, Неопределено, 12);
	
	СпособУчетаИЛ = ДобавитьСпособУчетаРегЗарплаты("Удержания по исполнительным документам", ПланСчетов.РасчетыСПерсоналомПоОплатеТруда,Справочники.ФизическиеЛица.ПустаяСсылка(),,, 
	ПланСчетов.РасчетыПоИсполнительнымДокументамРаботников,Справочники.Контрагенты.ПустаяСсылка(),Документы.ИсполнительныйЛист.ПустаяСсылка(),,
	ПланыСчетов.Налоговый.ПустаяСсылка(), , , ,
	ПланыСчетов.Налоговый.ПустаяСсылка());	
	
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ИЛПроцентомБезБЛ			, СпРасчета.ИсполнительныйЛистПроцентом				, Категории.Первичное			, СпособУчетаИЛ,СпБазовыхРасчетов);
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ИЛПроцентомДоПределаБезБЛ	, СпРасчета.ИсполнительныйЛистПроцентомДоПредела	, Категории.Первичное			, СпособУчетаИЛ,СпБазовыхРасчетов);
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ИЛФиксированнойСуммой		, СпРасчета.УдержаниеФиксированнойСуммой			, Категории.Первичное			, СпособУчетаИЛ);
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ИЛФиксированнойСуммойДоПредела, СпРасчета.ИсполнительныйЛистФиксСуммойДоПредела	, Категории.Первичное			, СпособУчетаИЛ);
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ПочтовыйСборПоИЛ			, СпРасчета.ПочтовыйСбор							, Категории.ЗависимоеПервогоУровня,	СпособУчетаИЛ);
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.КомиссионныйСбор		, СпРасчета.КомиссионыйСбор							, Категории.ЗависимоеПервогоУровня,	СпособУчетаИЛ);
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ИЛПроцентомБезБЛСНДФЛ		, СпРасчета.ИсполнительныйЛистПроцентомСНДФЛ		, Категории.Первичное			, СпособУчетаИЛ,СпБазовыхРасчетов);
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ИЛПроцентомДоПределаБезБЛСНДФЛ	, СпРасчета.ИсполнительныйЛистПроцентомДоПределаСНДФЛ , Категории.Первичное			, СпособУчетаИЛ,СпБазовыхРасчетов);
		
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОплатаПоСреднемуБЛ);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОплатаБЛПоТравмеВБыту);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОплатаБЛПоТравмеНаПроизводстве);
	
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ИЛПроцентом					, СпРасчета.ИсполнительныйЛистПроцентом				, Категории.Первичное			, СпособУчетаИЛ,СпБазовыхРасчетов);
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ИЛПроцентомДоПредела		, СпРасчета.ИсполнительныйЛистПроцентомДоПредела	, Категории.Первичное			, СпособУчетаИЛ,СпБазовыхРасчетов);
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ИЛПроцентомСНДФЛ					, СпРасчета.ИсполнительныйЛистПроцентомСНДФЛ				, Категории.Первичное			, СпособУчетаИЛ,СпБазовыхРасчетов);
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ИЛПроцентомДоПределаСНДФЛ		, СпРасчета.ИсполнительныйЛистПроцентомДоПределаСНДФЛ	, Категории.Первичное			, СпособУчетаИЛ,СпБазовыхРасчетов);
	
	// Дополнить "ОтсутствиеПоБолезниПоБеременности" и "ОтсутствиеПоБолезни" в те ВР, в вытесняющих ВР
	// которых есть "ОплатаПоСреднемуБЛ" или "ОтпускПоБеременностиИРодам" соответственно.
	СписокВидовРасчета = Новый Массив;
	СписокВидовРасчета.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ);
	СписокВидовРасчета.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам);
	
	СписокНовыхВидовРасчета = Новый Массив;
	СписокНовыхВидовРасчета.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезни);
	СписокНовыхВидовРасчета.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезниПоБеременности);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.ВидРасчета = &ОплатаПоСреднемуБЛ
	|			ТОГДА ""ОплатаПоСреднемуБЛ""
	|		ИНАЧЕ ""ОтпускПоБеременностиИРодам""
	|	КОНЕЦ КАК ВидБЛ
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета
	|ГДЕ
	|	ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.ВидРасчета В(&СписокВидовРасчета)
	|	И (НЕ ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка КАК Ссылка
	|				ИЗ
	|					ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета
	|				ГДЕ
	|					ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.ВидРасчета В (&СписокНовыхВидовРасчета)))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("СписокВидовРасчета", СписокВидовРасчета);
	Запрос.УстановитьПараметр("СписокНовыхВидовРасчета", СписокНовыхВидовРасчета);
	Запрос.УстановитьПараметр("ОплатаПоСреднемуБЛ", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ВРОбъект = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			Если ВыборкаЗапроса.ВидБЛ = "ОплатаПоСреднемуБЛ" Тогда
				ВРОбъект.ВытесняющиеВидыРасчета.Добавить().ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезни;
			ИначеЕсли ВыборкаЗапроса.ВидБЛ = "ОтпускПоБеременностиИРодам" Тогда
				ВРОбъект.ВытесняющиеВидыРасчета.Добавить().ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезниПоБеременности;
			КонецЕсли; 
		КонецЦикла;
		
		Попытка
			ВРОбъект.Записать();
		Исключение
			Сообщить("Вид расчета " + ВРОбъект.Наименование + ": обнаружено дублирование вытесняющих видов расчета!", СтатусСообщения.Важное);
		КонецПопытки;
		
	КонецЦикла; 
	
	
	//Выберем виды расчета, которые составляют базу для отчислений в ФСЗН
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыРасчета.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновныеНачисленияОрганизаций.Ссылка КАК Ссылка
	|	ИЗ
	|		ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|	ГДЕ
	|		ОсновныеНачисленияОрганизаций.КодДоходаЕСН.ВходитВБазуФСЗН = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДополнительныеНачисленияОрганизаций.Ссылка
	|	ИЗ
	|		ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
	|	ГДЕ
	|		ДополнительныеНачисленияОрганизаций.КодДоходаЕСН.ВходитВБазуФСЗН = ИСТИНА) КАК ВидыРасчета";
	
	
	СписокБазовыхВидовРасчетаДляПенсионного = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл 
		 СписокБазовыхВидовРасчетаДляПенсионного.Добавить(Выборка.Ссылка);
	КонецЦикла;
	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ПенсионныйФонд, СпРасчета.Процентом, ЗависимоеТретьегоУровня, ,СписокБазовыхВидовРасчетаДляПенсионного);
КонецПроцедуры

Функция УстановитьРеквизитыПоказателяСхемМотивации(Показатель = Неопределено, ТипПоказателя, ВозможностьИзменения, Наименование = "", ВидПоказателя = Неопределено, Идентификатор = "", ТарифнаяСтавка = Ложь)
		
	Если Наименование <> "" Тогда 
		Ссылка = Справочники.ПоказателиСхемМотивации.НайтиПоНаименованию(Наименование);
		Если Ссылка.Пустая() Тогда
			ПоказательОбъект = Справочники.ПоказателиСхемМотивации.СоздатьЭлемент();
			ПоказательОбъект.Наименование = Наименование;	
		Иначе                      
			ПоказательОбъект = Ссылка.ПолучитьОбъект();
		КонецЕсли;
	Иначе
		ПоказательОбъект = Показатель;
	КонецЕсли;
	
	// по умолчанию показатель "индивидуальный"
	Если ВидПоказателя = Неопределено Тогда
		ПоказательОбъект.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Индивидуальный;
	Иначе
		ПоказательОбъект.ВидПоказателя = ВидПоказателя;
	КонецЕсли;
	
	ПоказательОбъект.ТипПоказателя = ТипПоказателя;
    ПоказательОбъект.ВозможностьИзменения = ВозможностьИзменения;
	ПоказательОбъект.Идентификатор = Идентификатор;
	ПоказательОбъект.ТарифнаяСтавка = ТарифнаяСтавка;
	ПоказательОбъект.Записать();

	Возврат ПоказательОбъект.Ссылка
	
КонецФункции //УстановитьРеквизитыПоказателяСхемМотивации


// Выполняет заполнение реквизитов управленческих планов видов расчета
//
Процедура ЗаполнитьСхемыМотивации() 
	
	
	Числовой = Перечисления.ТипыПоказателейСхемМотивации.Числовой;
	Денежный = Перечисления.ТипыПоказателейСхемМотивации.Денежный;
	Процентный = Перечисления.ТипыПоказателейСхемМотивации.Процентный;
	ВводитсяПриРасчете = Перечисления.ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете;
	ИзменяетсяПриРасчете = Перечисления.ИзменениеПоказателейСхемМотивации.ИзменяетсяПриРасчете;
	НеИзменяется = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется;	
    ВозможностьИзмененияНеУказана = Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка();
	
	ПоказателиСхемМотивации = Справочники.ПоказателиСхемМотивации;
	ВремяВДнях = ПоказателиСхемМотивации.ВремяВДнях.ПолучитьОбъект();
	ВремяВЧасах = ПоказателиСхемМотивации.ВремяВЧасах.ПолучитьОбъект();
	НормаВремениВДнях = ПоказателиСхемМотивации.НормаВремениВДнях.ПолучитьОбъект();
	НормаВремениВЧасах = ПоказателиСхемМотивации.НормаВремениВЧасах.ПолучитьОбъект();
	РасчетнаяБаза = ПоказателиСхемМотивации.РасчетнаяБаза.ПолучитьОбъект();
	СдельнаяВыработка = ПоказателиСхемМотивации.СдельнаяВыработка.ПолучитьОбъект();
	Стаж = ПоказателиСхемМотивации.Стаж.ПолучитьОбъект();
	
    // пустой вид показателя
    УстановитьРеквизитыПоказателяСхемМотивации(ВремяВДнях,				Числовой, ВозможностьИзмененияНеУказана,,,"ВремяВДнях");
	УстановитьРеквизитыПоказателяСхемМотивации(ВремяВЧасах,				Числовой, ВозможностьИзмененияНеУказана,,,"ВремяВЧасах");	
	УстановитьРеквизитыПоказателяСхемМотивации(НормаВремениВДнях,		Числовой, ВозможностьИзмененияНеУказана,,,"НормаВремениВДнях");
	УстановитьРеквизитыПоказателяСхемМотивации(НормаВремениВЧасах,		Числовой, ВозможностьИзмененияНеУказана,,,"НормаВремениВЧасах");
	УстановитьРеквизитыПоказателяСхемМотивации(РасчетнаяБаза,			Числовой, ВозможностьИзмененияНеУказана,,,"РасчетнаяБаза");
	УстановитьРеквизитыПоказателяСхемМотивации(СдельнаяВыработка,		Числовой, ВозможностьИзмененияНеУказана,,,"СдельнаяВыработка");	
	УстановитьРеквизитыПоказателяСхемМотивации(Стаж,					Числовой, ВозможностьИзмененияНеУказана,,,"Стаж");
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ТарифнаяСтавкаДневная.ПолучитьОбъект(),	Числовой, НеИзменяется,,,"ТарифнаяСтавкаДневная",Истина);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная.ПолучитьОбъект(),	Числовой, НеИзменяется,,,"ТарифнаяСтавкаМесячная",Истина);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.ПолучитьОбъект(),	Числовой, НеИзменяется,,,"ТарифнаяСтавкаЧасовая",Истина);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ВремяВКалендарныхДнях.ПолучитьОбъект(),	Числовой, НеИзменяется,,,"ВремяВКалендарныхДнях");
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ОтработаноВремениВДнях.ПолучитьОбъект(),	Числовой, ВозможностьИзмененияНеУказана,,,"ОтработаноВремениВДнях");
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ОтработаноВремениВЧасах.ПолучитьОбъект(),Числовой, ВозможностьИзмененияНеУказана,,,"ОтработаноВремениВЧасах");
		
	ОкладПоДням = УстановитьРеквизитыПоказателяСхемМотивации(,		Денежный,НеИзменяется,"Оклад по дням",,"ОкладПоДням",Истина);
	ОкладПоЧасам = УстановитьРеквизитыПоказателяСхемМотивации(,		Денежный,НеИзменяется,"Оклад по часам",,"ОкладПоЧасам",Истина);
	КомиссионнаяВыручка = УстановитьРеквизитыПоказателяСхемМотивации(,Денежный,ВводитсяПриРасчете,"Комиссионная выручка",,"КомиссионнаяВыручка");
	Процент = УстановитьРеквизитыПоказателяСхемМотивации(,			Процентный,НеИзменяется,"Процент",,"Процент");
	ТарифДневной = УстановитьРеквизитыПоказателяСхемМотивации(,		Денежный,НеИзменяется,"Тариф дневной",,"ТарифДневной",Истина);
	ТарифЧасовой = УстановитьРеквизитыПоказателяСхемМотивации(,		Денежный,НеИзменяется,"Тариф часовой",,"ТарифЧасовой",Истина);
	ПроцентПлана = УстановитьРеквизитыПоказателяСхемМотивации(,		Процентный,ИзменяетсяПриРасчете,"Процент плана",,"ПроцентПлана");
	РазмерПремии = УстановитьРеквизитыПоказателяСхемМотивации(,		Денежный,ИзменяетсяПриРасчете,"Размер премии",,"РазмерПремии");
	ФиксированнаяСумма = УстановитьРеквизитыПоказателяСхемМотивации(,Денежный,НеИзменяется,"Фиксированная сумма",,"ФиксированнаяСумма");

	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Справочники.КатегорииРасчетов;
    СпРасчетов = Новый СписокЗначений;
	
	// Управленческие начисления
	ПВР = ПланыВидовРасчета.УправленческиеНачисления;
	УстановитьРеквизитыУправленческогоНачисления(ПВР.НачисленоПоБухгалтерии,		СпРасчета.ФиксированнойСуммой, Категории.Первичное);
	УстановитьРеквизитыУправленческогоНачисления(ПВР.НачисленоПоБухгалтерииСдельно,	СпРасчета.ФиксированнойСуммой, Категории.Первичное);
	
	Оклад = СоздатьВидРасчета(ПВР, "00003", "Оклад");
	Невыход = СоздатьВидРасчета(ПВР, "00023", "Отсутствие по невыясненной причине");
	Отпуск = СоздатьВидРасчета(ПВР, "00021", "Отпуск");
	Больничный = СоздатьВидРасчета(ПВР, "00022", "Больничный");
	
	КомиссионнаяОплата = СоздатьВидРасчета(ПВР, "00024", "Комиссионная оплата");
	СдельнаяОплата = СоздатьВидРасчета(ПВР, "00025", "Сдельная оплата");
	ПочасоваяОплата = СоздатьВидРасчета(ПВР, "00026", "Почасовая оплата");

	СпРасчетов.Добавить(Невыход);
	СпРасчетов.Добавить(Отпуск);
	СпРасчетов.Добавить(Больничный);
	
		
	УстановитьРеквизитыУправленческогоНачисления(Невыход, 				СпРасчета.ПроизвольнаяФормула,	 Категории.Первичное,,,,					ФиксированнаяСумма,,,Справочники.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам,"ИсходныеДанные.Показатель1", Истина);
	УстановитьРеквизитыУправленческогоНачисления(Отпуск,				СпРасчета.ПроизвольнаяФормула,	 Категории.Первичное,,,,					ОкладПоДням,ПоказателиСхемМотивации.ВремяВДнях,ПоказателиСхемМотивации.НормаВремениВДнях, Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск,"ИсходныеДанные.Показатель1*ИсходныеДанные.Показатель2/ИсходныеДанные.Показатель3");
	УстановитьРеквизитыУправленческогоНачисления(Больничный,			СпРасчета.ПроизвольнаяФормула,	 Категории.Первичное,,,,					ФиксированнаяСумма,,, Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь,"ИсходныеДанные.Показатель1");
	УстановитьРеквизитыУправленческогоНачисления(Оклад, 				СпРасчета.ПроизвольнаяФормула,	 Категории.Первичное, Истина, СпРасчетов,,ОкладПоДням,ПоказателиСхемМотивации.ВремяВДнях,ПоказателиСхемМотивации.НормаВремениВДнях, Справочники.КлассификаторИспользованияРабочегоВремени.Работа,"ИсходныеДанные.Показатель1*ИсходныеДанные.Показатель2/ИсходныеДанные.Показатель3", Истина);
	
	УстановитьРеквизитыУправленческогоНачисления(КомиссионнаяОплата, 	СпРасчета.ПроизвольнаяФормула, 	Категории.Первичное, Истина, СпРасчетов,,КомиссионнаяВыручка,Процент,,,"ИсходныеДанные.Показатель1*ИсходныеДанные.Показатель2",,Истина);
	УстановитьРеквизитыУправленческогоНачисления(СдельнаяОплата, 		СпРасчета.ПроизвольнаяФормула, 	Категории.Первичное, Истина, СпРасчетов,,ПоказателиСхемМотивации.СдельнаяВыработка,,,"ИсходныеДанные.Показатель1");
	УстановитьРеквизитыУправленческогоНачисления(ПочасоваяОплата, 		СпРасчета.ПроизвольнаяФормула, 	Категории.Первичное, Истина, СпРасчетов,,ТарифЧасовой,ПоказателиСхемМотивации.ВремяВЧасах,,Справочники.КлассификаторИспользованияРабочегоВремени.Работа,"ИсходныеДанные.Показатель1*ИсходныеДанные.Показатель2", Истина);

КонецПроцедуры

// Выполняет заполнение регистра сведений "СведенияОСтавкахЕСНиПФР"
//
Процедура ЗаполнитьСведенияОСтавкахЕСНиПФР() 

	// проставим вид ставок у организаций, если его не было
	ВыборкаОрганизаций = Справочники.Организации.Выбрать();
	Пока ВыборкаОрганизаций.Следующий() Цикл
	    Если Не ЗначениеЗаполнено(ВыборкаОрганизаций.ВидСтавокЕСНиПФР) Тогда
			Объект = ВыборкаОрганизаций.ПолучитьОбъект();
			Объект.ВидСтавокЕСНиПФР = Перечисления.ВидыСтавокЕСНиПФР.ДляНеСельскохозяйственныхПроизводителей;
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	//заполним ставки
	НаборЗаписей = РегистрыСведений.СведенияОСтавкахЕСНиПФР.СоздатьНаборЗаписей();
	НаборЗаписей.ЗаполнитьСведенияОСтавкахЕСНиПФР();
	
КонецПроцедуры

// Выполняет заполнение регистра сведений "МинимальнаяОплатаТрудаРФ"
//
Процедура ЗаполнитьСведенияОМинимальномРазмереОплатыТруда() 
	//РБ
	//Шкала подоходного налога

	НаборЗаписей = РегистрыСведений.ШкалаПодоходногоНалога.СоздатьНаборЗаписей();
	
	ДатаСведений = Дата("20150101");
	
	НоваяЗапись 				= НаборЗаписей.Добавить();
	НоваяЗапись.Период 			= ДатаСведений;
	НоваяЗапись.НижнийПредел	= 0;
	НоваяЗапись.ВерхнийПредел	= 0;
	НоваяЗапись.Налог			= 13;
	НаборЗаписей.Записать(Истина);
		
	//Параметры для расчета зарплаты по РБ

	
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20050101");
		НоваяЗапись.ВидПараметра	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.МинимальнаяЗарплатаРБ;
		НоваяЗапись.Размер 			= 12.87;
		НаборЗаписей.Записать(Истина);
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20060101");
		НоваяЗапись.ВидПараметра	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.МинимальнаяЗарплатаРБ;
		НоваяЗапись.Размер 			= 15.69;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20070101");
		НоваяЗапись.ВидПараметра	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.МинимальнаяЗарплатаРБ;
		НоваяЗапись.Размер 			= 17.91;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20080101");
		НоваяЗапись.ВидПараметра	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.МинимальнаяЗарплатаРБ;
		НоваяЗапись.Размер 			= 20.88;
		НаборЗаписей.Записать(Истина);

		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20050101");
		НоваяЗапись.ВидПараметра	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяСтавка1разряда;
		НоваяЗапись.Размер 			= 4.80;
		НаборЗаписей.Записать(Истина);
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20050401");
		НоваяЗапись.ВидПараметра	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяСтавка1разряда;
		НоваяЗапись.Размер 			= 5.10;
		НаборЗаписей.Записать(Истина);
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20051001");
		НоваяЗапись.ВидПараметра	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяСтавка1разряда;
		НоваяЗапись.Размер 			= 5.80;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20060201");
		НоваяЗапись.ВидПараметра	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяСтавка1разряда;
		НоваяЗапись.Размер 			= 6.20;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20061101");
		НоваяЗапись.ВидПараметра	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяСтавка1разряда;
		НоваяЗапись.Размер 			= 6.50;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20071101");
		НоваяЗапись.ВидПараметра	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяСтавка1разряда;
		НоваяЗапись.Размер 			= 7.00;
		НаборЗаписей.Записать(Истина);

        НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20080401");
		НоваяЗапись.ВидПараметра	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяСтавка1разряда;
		НоваяЗапись.Размер 			= 7.30;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20050101");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
		НоваяЗапись.Размер 			= 13.52;
		НаборЗаписей.Записать(Истина);
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20050301");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
		НоваяЗапись.Размер 			= 13.92;
		НаборЗаписей.Записать(Истина);
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20050601");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
		НоваяЗапись.Размер 			= 14.62;
		НаборЗаписей.Записать(Истина);
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20050901");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
		НоваяЗапись.Размер 			= 15.02;
		НаборЗаписей.Записать(Истина);
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20060201");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
		НоваяЗапись.Размер 			= 15.81;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20060501");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
		НоваяЗапись.Размер 			= 16.25;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20060801");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
		НоваяЗапись.Размер 			= 16.96;
		НаборЗаписей.Записать(Истина);

        НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20061101");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
		НоваяЗапись.Размер 			= 16.58;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20070201");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
		НоваяЗапись.Размер 			= 17.05;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20070501");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
		НоваяЗапись.Размер 			= 17.91;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20070801");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
		НоваяЗапись.Размер 			= 18.54;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20071101");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
		НоваяЗапись.Размер 			= 18.56;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20080201");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
		НоваяЗапись.Размер 			= 20.01;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20080501");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
		НоваяЗапись.Размер 			= 20.99;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20050101");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяВеличина;
		НоваяЗапись.Размер 			= 2.40;
		НаборЗаписей.Записать(Истина);
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20050401");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяВеличина;
		НоваяЗапись.Размер 			= 2.55;
		НаборЗаписей.Записать(Истина);
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20051101");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяВеличина;
		НоваяЗапись.Размер 			= 2.90;
		НаборЗаписей.Записать(Истина);
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20060301");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяВеличина;
		НоваяЗапись.Размер 			= 3.10;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20071201");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяВеличина;
		НоваяЗапись.Размер 			= 3.50;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20050101");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.КоэффициентДляРасчетаОтпуска;
		НоваяЗапись.Размер 			= 29.7;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20080101");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаДней;
		НоваяЗапись.Размер 			= 21.2;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20080101");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаЧасов;
		НоваяЗапись.Размер 			= 168.7;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20080101");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячноеКалендДней;
		НоваяЗапись.Размер 			= 29.7;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20070101");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
		НоваяЗапись.Размер 			= 63.67;
		НаборЗаписей.Записать(Истина);

		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20070201");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
		НоваяЗапись.Размер 			= 63.38;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20070301");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
		НоваяЗапись.Размер 			= 67.88;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20070401");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
		НоваяЗапись.Размер 			= 67.97;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20070501");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
		НоваяЗапись.Размер 			= 70.52;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20070601");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
		НоваяЗапись.Размер 			= 72.80;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20070701");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
		НоваяЗапись.Размер 			= 74.73;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20070801");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
		НоваяЗапись.Размер 			= 75.25;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20070901");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
		НоваяЗапись.Размер 			= 72.99;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20071001");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
		НоваяЗапись.Размер 			= 75.65;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20071101");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
		НоваяЗапись.Размер 			= 75.60;
		НаборЗаписей.Записать(Истина);
						
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20071201");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
		НоваяЗапись.Размер 			= 81.85;
		НаборЗаписей.Записать(Истина);

		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20080101");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
		НоваяЗапись.Размер 			= 77.81;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20080201");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
		НоваяЗапись.Размер 			= 78.30;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Период 			= Дата("20080301");
		НоваяЗапись.ВидПараметра 	= Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
		НоваяЗапись.Размер 			= 82.93;
		НаборЗаписей.Записать(Истина);
		
		НаборЗаписей = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.СоздатьНаборЗаписей();
	
		НоваяЗапись 					= НаборЗаписей.Добавить();
		НоваяЗапись.Период				= Дата("20050101");
		НоваяЗапись.ВидОтчисления	 	= Перечисления.ВидыОтчисленийСФОТиЗП.ЕдиныйПлатеж;
		НоваяЗапись.Размер 				= 4;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 					= НаборЗаписей.Добавить();
		НоваяЗапись.Период				= Дата("20050101");
		НоваяЗапись.ВидОтчисления	 	= Перечисления.ВидыОтчисленийСФОТиЗП.ПенсионныйФонд;
		НоваяЗапись.Размер 				= 1;
		НаборЗаписей.Записать(Истина);
	
		НоваяЗапись 					= НаборЗаписей.Добавить();
		НоваяЗапись.Период				= Дата("20050101");
		НоваяЗапись.ВидОтчисления	 	= Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗН;
		НоваяЗапись.Размер 				= 35;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 					 = НаборЗаписей.Добавить();
		НоваяЗапись.Период				 = Дата("20090101");
		НоваяЗапись.ВидОтчисления	 	 = Перечисления.ВидыОтчисленийСФОТиЗП.ПенсионныйФонд;
		НоваяЗапись.Размер 				 = 1;
		НоваяЗапись.ОграничениеПоДоходам = 4;
		НаборЗаписей.Записать(Истина);
	
		НоваяЗапись 					 = НаборЗаписей.Добавить();
		НоваяЗапись.Период				 = Дата("20090101");
		НоваяЗапись.ВидОтчисления	 	 = Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗН;
		НоваяЗапись.Размер 				 = 34;
		НоваяЗапись.ОграничениеПоДоходам = 4;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 					 = НаборЗаписей.Добавить();
		НоваяЗапись.Период				 = Дата("20090101");
		НоваяЗапись.ВидОтчисления	 	 = Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗНИнвалиды;
		НоваяЗапись.Размер 				 = 6;
		НоваяЗапись.ОграничениеПоДоходам = 4;
		НаборЗаписей.Записать(Истина);
		
		
		НоваяЗапись 					= НаборЗаписей.Добавить();
		НоваяЗапись.Период				= Дата("20150101");
		НоваяЗапись.ВидОтчисления	 	= Перечисления.ВидыОтчисленийСФОТиЗП.ЕдиныйПлатеж;
		НоваяЗапись.Размер 				= 4;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 					 = НаборЗаписей.Добавить();
		НоваяЗапись.Период				 = Дата("20150101");
		НоваяЗапись.ВидОтчисления	 	 = Перечисления.ВидыОтчисленийСФОТиЗП.ПенсионныйФонд;
		НоваяЗапись.Размер 				 = 1;
		НоваяЗапись.ОграничениеПоДоходам = 5;
		НаборЗаписей.Записать(Истина);
	
		НоваяЗапись 					 = НаборЗаписей.Добавить();
		НоваяЗапись.Период				 = Дата("20150101");
		НоваяЗапись.ВидОтчисления	 	 = Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗН;
		НоваяЗапись.Размер 				 = 34;
		НоваяЗапись.ОграничениеПоДоходам = 5;
		НаборЗаписей.Записать(Истина);
		
		НоваяЗапись 					 = НаборЗаписей.Добавить();
		НоваяЗапись.Период				 = Дата("20150101");
		НоваяЗапись.ВидОтчисления	 	 = Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗНИнвалиды;
		НоваяЗапись.Размер 				 = 6;
		НоваяЗапись.ОграничениеПоДоходам = 5;
		НаборЗаписей.Записать(Истина);
		
		
		
		НоваяЗапись 					 = НаборЗаписей.Добавить();
		НоваяЗапись.Период				 = Дата("20150101");
		НоваяЗапись.ВидОтчисления	 	 = Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗНИнГрЕАЭС;
		НоваяЗапись.Размер 				 = 6;
		//НоваяЗапись.ОграничениеПоДоходам = 4;
		НаборЗаписей.Записать(Истина);
		

	//НаборЗаписей = РегистрыСведений.МинимальнаяОплатаТрудаРФ.СоздатьНаборЗаписей();

	//НоваяЗапись = НаборЗаписей.Добавить();
	//НоваяЗапись.Период = Дата(2000, 1, 1);
	//НоваяЗапись.Размер = 132;

	//НоваяЗапись = НаборЗаписей.Добавить();
	//НоваяЗапись.Период = Дата(2001, 1, 1);
	//НоваяЗапись.Размер = 200;

	//НоваяЗапись = НаборЗаписей.Добавить();
	//НоваяЗапись.Период = Дата(2001, 7, 1);
	//НоваяЗапись.Размер = 300;

	//НоваяЗапись = НаборЗаписей.Добавить();
	//НоваяЗапись.Период = Дата(2002, 5, 1);
	//НоваяЗапись.Размер = 450;

	//НоваяЗапись = НаборЗаписей.Добавить();
	//НоваяЗапись.Период = Дата(2003, 10, 1);
	//НоваяЗапись.Размер = 600;

	//НоваяЗапись = НаборЗаписей.Добавить();
	//НоваяЗапись.Период = Дата(2005, 1, 1);
	//НоваяЗапись.Размер = 720;

	//НоваяЗапись = НаборЗаписей.Добавить();
	//НоваяЗапись.Период = Дата(2005, 9, 1);
	//НоваяЗапись.Размер = 800;

	//НоваяЗапись = НаборЗаписей.Добавить();
	//НоваяЗапись.Период = Дата(2006, 5, 1);
	//НоваяЗапись.Размер = 1100;

	//НоваяЗапись = НаборЗаписей.Добавить();
	//НоваяЗапись.Период = Дата(2007, 9, 1);
	//НоваяЗапись.Размер = 2300;

	//НаборЗаписей.Записать();

КонецПроцедуры

// Выполняет заполнение регистра сведений "МинимальнаяОплатаТрудаРФ"
//
Процедура ЗаполнитьСведенияОСтавкеРефинансированияЦБ() 

 	СтавкаЦБ = РегистрыСведений.СтавкаРефинансированияЦБ.СоздатьНаборЗаписей();

	СтрокаНабора = СтавкаЦБ.Добавить();
	СтрокаНабора.Период = '20001104';
	СтрокаНабора.Размер = 25;
	СтрокаНабора = СтавкаЦБ.Добавить();
	СтрокаНабора.Период = '20020409';
	СтрокаНабора.Размер = 23;
	СтрокаНабора = СтавкаЦБ.Добавить();
	СтрокаНабора.Период = '20020807';
	СтрокаНабора.Размер = 21;
	СтрокаНабора = СтавкаЦБ.Добавить();
	СтрокаНабора.Период = '20030217';
	СтрокаНабора.Размер = 18;
	СтрокаНабора = СтавкаЦБ.Добавить();
	СтрокаНабора.Период = '20030621';
	СтрокаНабора.Размер = 16;
	СтрокаНабора = СтавкаЦБ.Добавить();
	СтрокаНабора.Период = '20040115';
	СтрокаНабора.Размер = 14;
 	СтрокаНабора = СтавкаЦБ.Добавить();
	СтрокаНабора.Период = '20040615';
	СтрокаНабора.Размер = 13;
	СтрокаНабора = СтавкаЦБ.Добавить();
	СтрокаНабора.Период = '20051226';
	СтрокаНабора.Размер = 12;
	СтрокаНабора = СтавкаЦБ.Добавить();
	СтрокаНабора.Период = '20060626';
	СтрокаНабора.Размер = 11.5;
	СтрокаНабора = СтавкаЦБ.Добавить();
	СтрокаНабора.Период = '20061023';
	СтрокаНабора.Размер = 11;
	СтрокаНабора = СтавкаЦБ.Добавить();
	СтрокаНабора.Период = '20070129';
	СтрокаНабора.Размер = 10.5;
	СтрокаНабора = СтавкаЦБ.Добавить();
	СтрокаНабора.Период = '20070619';
	СтрокаНабора.Размер = 10;
	СтавкаЦБ.Записать();

КонецПроцедуры

// Выполняет заполнение регистра сведений "МинимальнаяОплатаТрудаРФ"
Процедура ЗаполнитьСведенияОРазмерахГосударственныхПособий() 

	НаборЗаписей = РегистрыСведений.ГосударственныеПособия.СоздатьНаборЗаписей();

	/// На рождение ребёнка

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииРебенка;
	НоваяЗапись.Период = Дата(2010, 1, 1);
	НоваяЗапись.Размер = 125.035;

	// Постановка на учет в ранние сроки беременности 
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности;
	НоваяЗапись.Период = Дата(2010, 1, 1);
	НоваяЗапись.Размер = 25.01;

	
	// По уходу за ребёнком до 3 лет
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет;
	НоваяЗапись.Период = Дата(2010, 1, 1);
	НоваяЗапись.Размер = 25.01;

	НаборЗаписей.Записать();
    	
КонецПроцедуры

// Процедура заполняет по умолчанию необходимые данные
// для отправки сообщений в службу технической поддержки.
//
Процедура ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки()

	Перем СтруктураЗначения;

	Если ТипЗнч(Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить()) <> Тип("Структура") Тогда

		ОбщегоНазначения.ЗаполнитьСтруктуруДанныхНастройкиОбращенияВОтделТехподдержкиПоУмолчанию(СтруктураЗначения);

		СтрокаПараметровОтправки = СтруктураЗначения.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");

		Если СтрокаПараметровОтправки <> Неопределено Тогда

			СтрокаПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1] = "hline@1c.ru";

			Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Установить(Новый ХранилищеЗначения(СтруктураЗначения, Новый СжатиеДанных));

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура заполняет по умолчанию формы обучения
//
Процедура ЗаполнитьФормыОбучения()
	
	ФормыОбучения = Справочники.ФормыОбучения;
	СсылкаНаЭлемент = ФормыОбучения.НайтиПоНаименованию("Лекция");
	Если  СсылкаНаЭлемент.Пустая() Тогда
		ЭлементФормыОбучения = ФормыОбучения.СоздатьЭлемент();
		ЭлементФормыОбучения.Код = "00001";
		ЭлементФормыОбучения.Наименование = "Лекция";		
		ЭлементФормыОбучения.Записать();
	Иначе
		ЭлементФормыОбучения = СсылкаНаЭлемент.ПолучитьОбъект();
		ЭлементФормыОбучения.ПометкаУдаления = Ложь;
	КонецЕсли;	
	ЗаписатьСправочникОбъект(ЭлементФормыОбучения);		
	
	СсылкаНаЭлемент = ФормыОбучения.НайтиПоНаименованию("Тренинг");
	Если  СсылкаНаЭлемент.Пустая() Тогда
		ЭлементФормыОбучения = ФормыОбучения.СоздатьЭлемент();
		ЭлементФормыОбучения.Код = "00002";
		ЭлементФормыОбучения.Наименование = "Тренинг";		
	Иначе
		ЭлементФормыОбучения = СсылкаНаЭлемент.ПолучитьОбъект();
		ЭлементФормыОбучения.ПометкаУдаления = Ложь;
	КонецЕсли;
	ЗаписатьСправочникОбъект(ЭлементФормыОбучения);	
	
	СсылкаНаЭлемент = ФормыОбучения.НайтиПоНаименованию("Семинар");
	Если  СсылкаНаЭлемент.Пустая() Тогда
		ЭлементФормыОбучения = ФормыОбучения.СоздатьЭлемент();
		ЭлементФормыОбучения.Код = "00003";
		ЭлементФормыОбучения.Наименование = "Семинар";		
	Иначе
		ЭлементФормыОбучения = СсылкаНаЭлемент.ПолучитьОбъект();
		ЭлементФормыОбучения.ПометкаУдаления = Ложь;
	КонецЕсли;
	ЗаписатьСправочникОбъект(ЭлементФормыОбучения);	
	
	СсылкаНаЭлемент = ФормыОбучения.НайтиПоНаименованию("Деловая игра");
	Если  СсылкаНаЭлемент.Пустая() Тогда		
		ЭлементФормыОбучения = ФормыОбучения.СоздатьЭлемент();
		ЭлементФормыОбучения.Код = "00004";
		ЭлементФормыОбучения.Наименование = "Деловая игра";		
	Иначе
		ЭлементФормыОбучения = СсылкаНаЭлемент.ПолучитьОбъект();
		ЭлементФормыОбучения.ПометкаУдаления = Ложь;
	КонецЕсли;
	ЗаписатьСправочникОбъект(ЭлементФормыОбучения);	
	
	СсылкаНаЭлемент = ФормыОбучения.НайтиПоНаименованию("Решение кейсов");
	Если  СсылкаНаЭлемент.Пустая() Тогда		
		ЭлементФормыОбучения = ФормыОбучения.СоздатьЭлемент();
		ЭлементФормыОбучения.Код = "00005";
		ЭлементФормыОбучения.Наименование = "Решение кейсов";		
	Иначе
		ЭлементФормыОбучения = СсылкаНаЭлемент.ПолучитьОбъект();
		ЭлементФормыОбучения.ПометкаУдаления = Ложь;
	КонецЕсли;
	ЗаписатьСправочникОбъект(ЭлементФормыОбучения);	
	
	СсылкаНаЭлемент = ФормыОбучения.НайтиПоНаименованию("Экскурсия");
	Если  СсылкаНаЭлемент.Пустая() Тогда		
		ЭлементФормыОбучения = ФормыОбучения.СоздатьЭлемент();
		ЭлементФормыОбучения.Код = "00006";
		ЭлементФормыОбучения.Наименование = "Экскурсия";		
	Иначе
		ЭлементФормыОбучения = СсылкаНаЭлемент.ПолучитьОбъект();
		ЭлементФормыОбучения.ПометкаУдаления = Ложь;		
	КонецЕсли;
	ЗаписатьСправочникОбъект(ЭлементФормыОбучения);	
	
КонецПроцедуры  // ЗаполнитьФормыОбучения

//Процедура заполняет размеры пособий по временной нетрудоспособности

Процедура ЗаполнитьРазмерПособийПоНетрудоспособности()

	НаборЗаписей = РегистрыСведений.РазмерОграниченияПособияПоНетрудоспособности.СоздатьНаборЗаписей();

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Дата(2013, 1, 1);
	НоваяЗапись.Размер = 3;
	НоваяЗапись.РазмерПоБеременности = 3;

	НаборЗаписей.Записать();

КонецПроцедуры  //ИзменитьУчетПособийСоцСтрахованияИюнь2007


// Функция выполняет обновление информационной базы с версии на версию.
//
// Параметры:
//  ДокументОписаниеОбновлений - табличный документ, в который выводится описание обновлений.
//  МакетОписаниеОбновлений    - макет "ОписаниеОбновлений" с заполненными параметрами.
//
// Возвращаемое значение:
//  Функция возвращает тот номер версии, до которого выполнила обновление.
//
Процедура ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений = "", МакетОписаниеОбновлений = "") Экспорт

	// Обязательное начальное заполнение информационной базы.
	
	// Создадим в помощь пользователям одну организацию 
	Организация = Справочники.Организации.НайтиПоНаименованию("Наша организация");

	Если Организация = Справочники.Организации.ПустаяСсылка() Тогда

		Организация = Справочники.Организации.СоздатьЭлемент();
		Организация.Наименование	 = "Наша организация";
		//Организация.ВидСтавокЕСНиПФР = Перечисления.ВидыСтавокЕСНиПФР.ДляНеСельскохозяйственныхПроизводителей;
		Организация.ЮрФизЛицо		 = Перечисления.ЮрФизЛицо.ЮрЛицо;
		Организация.Записать();

	КонецЕсли;
	

	// Заполнение сведений бухгалтерского и налогового учета.
	ЗаполнитьСоответствиеСчетовБУиНУ();
	УстановитьПараметрыСчетовБУиНУ();
	
	// Заполнение сведений по заработной плате и учету персонала
	ЗаполнитьРегистрДопустимыхСочетанийМеждуГруппамиСтажа();
	ЗаполнитьКодыДоходовНДФЛ();
	ЗаполнитьКодыВычетовНДФЛ();
	ЗаполнитьКодыДоходовЕСН();
	ЗаполнитьКлассификаторИспользованияРабочегоВремени();
	ЗаполнитьПланыВидовРасчетаОрганизации();
	ЗаполнитьРеквизитыПВРДниНеоплачиваемыеСогласноТабелю();
	ЗаполнитьСхемыМотивации();
	ЗаполнитьСведенияОМинимальномРазмереОплатыТруда();
	ЗаполнитьРеквизитыВопросов();
	ЗаполнитьСправочникВоинскихЗваний();
	ЗаполнитьОснованияУвольнения();
	ЗаполнитьФормыОбучения();
	НачальноеЗаполнениеСправочникаКлассификаторСтранМира();
	ЗаполнитьКатегории();
	СозданиеВРИЛВПрожиточныхМинимумах();
	ЗаполнитьПочтовыеСборы();
	ОбновитьКодыСправочникаСмены();
	ЗаполнитьСведенияСчетаУчетаПоПодразделениямБПРБ20();
	ЗаполнитьСведенияОРазмерахГосударственныхПособий();	
	ЗаполнитьСведенияОРазмерахГосударственныхПособий2013();	
	ЗаполнитьСведенияОРазмерахГосударственныхПособийАвгуст2013();	
	ЗаполнитьСведенияОРазмерахГосударственныхПособий2015();
	ЗаполнитьСведенияОРазмерахГосударственныхПособийМай2015();
	ЗаполнитьСведенияОРазмерахГосударственныхПособийАвгуст2015();	
	ЗаполнитьСведенияОРазмерахГосударственныхПособийФевраль2015();	
	ОбновлениеРазмеровСреднегоЗаработка();	
	ОбновлениеРазмеровСреднегоЗаработка2012();	
	ОбновлениеРазмеровСреднегоЗаработка2013();
	ЗаполнитьСведенияШкалаПодоходногоНалога();
	ОбновлениеРазмеровБМПФевраль2015();	
	ОбновлениеСкидокКДоходам2014года();
	ОбновлениеРазмеровПоказателей2014();
	ОбновлениеРазмеровБМПФевраль2015();	
	ОбновлениеРазмеровПоказателейМай2015();
	ОбновлениеРазмеровПоказателейАвгуст2015();
	ЗаполнитьСведенияОРазмерахГосударственныхПособий2015Август();
    ОбновлениеСкидокКДоходам2015года();
    ОбновлениеРазмеровПоказателейЯнварь2016();	
    ЗаполнитьСведенияОРазмерахГосударственныхПособийЯнварь2016();	
    ОбновлениеСкидокКДоходам2016года();	
    ЗаполнитьРазмерПособийПоНетрудоспособности();
	ОбновлениеРазмеровПоказателейФевраль2016();
    ЗаполнитьСведенияОРазмерахГосударственныхПособий2016Февраль();	
	ЗаполнитьВидыРасчета2016года();
    ОбновлениеРазмеровПоказателейИюнь2016();	
    ЗаполнитьСведенияОРазмерахГосударственныхПособий2016Июнь();	
    ОбновлениеРазмеровПоказателейСреднейЗарплатыИюнь2016();	
    ОбновлениеРазмеровПоказателейСреднейЗарплатыАвгуст2016();	
    ЗаполнитьСведенияОРазмерахГосударственныхПособийАвгуст2016();	
    ОбновлениеРазмеровПоказателейСреднейЗарплатыДекабрь2016();
    ЗаполнитьСведенияОРазмерахГосударственныхПособийДекабрь2016();
    ОбновлениеСкидокКДоходам2017года();
    ОбновлениеРазмеровПоказателейСреднейЗарплатыМай2017();
    ЗаполнитьСведенияОРазмерахГосударственныхПособийМай2017();
    ЗаполнитьСведенияНДФЛРазмерВычетов2017();
    ОбновлениеРазмеровПоказателейСреднейЗарплатыИюль2017();
    ЗаполнитьСведенияОРазмерахГосударственныхПособийИюль2017();	

// Заполнение справочников "Шкалы оценок компетенций"
	ЗаполнитьСправочникШкалОценок();

	// Заполнение свойств
	НайтиСоздатьПВХ("0001","Помещение",Новый ОписаниеТипов("СправочникСсылка.Помещения"));
	
	// Заполнение данных для механизма контактной информации
	ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию();
	ЗаполнитьСправочникВидыКонтактнойИнформации();

	// Заполнение справочника Валюты.
	ВалютаРегламентированногоУчета = 
	НайтиСоздатьВалюту("933", "BYN", "Белорусский рубль", "белорусский рубль,белорусских рубля,белорусских рублей, м, копейка, копейки, копеек, ж, 2");
	ВалютаУправленческогоУчета = 
	НайтиСоздатьВалюту("840", "USD", "Доллар США",       "доллар, доллара, долларов, м, цент, цента, центов, м, 2");
	НайтиСоздатьВалюту("978", "EUR", "Евро"      ,       "евро, евро, евро, м, цент, цента, центов, м, 2");

	// Заполнение констант.
	УстановитьКонстанту("ВалютаРегламентированногоУчета"          , ВалютаРегламентированногоУчета);
	УстановитьКонстанту("ВалютаУправленческогоУчета"              , ВалютаУправленческогоУчета);
	УстановитьКонстанту("ИспользованиеВстроенногоПочтовогоКлиента", Истина);
	ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки();

	ЗаполнитьСписокВнешнихКомпонент();
	ОбновитьНастройкиОтчетов();
	ЗаполнитьНастройкиПользователей();	

КонецПроцедуры // ЗаполнитьПустуюИБ()

//Добавляет запись в набор записей регистра сведений ДопустимыеСочетанияМеждуГруппамиСтажа
//
Процедура ДопустимоеСочетаниеСтажа(НаборЗаписей, НомерПравила, КодУсловийТруда, ТипШаблонаКПС, КодПозицииСписка, КодОснованияИсчисляемогоСтажа, ФорматФОВ, КодОснованияВыслугиЛет)

	Запись = НаборЗаписей.Добавить();

	Запись.НомерПравила                  = СокрЛП(НомерПравила);
	Запись.КодУсловийТруда               = СокрЛП(КодУсловийТруда);
	Запись.ТипШаблонаКПС                 = СокрЛП(ТипШаблонаКПС);
	Запись.КодПозицииСписка              = СокрЛП(КодПозицииСписка);
	Запись.КодОснованияИсчисляемогоСтажа = СокрЛП(КодОснованияИсчисляемогоСтажа);
	Запись.ФорматФОВ                     = СокрЛП(ФорматФОВ);
	Запись.КодОснованияВыслугиЛет        = СокрЛП(КодОснованияВыслугиЛет);

КонецПроцедуры 

// Добавляет в справочник "СпособыОтраженияЗарплатыВРеглУчете" новый элемент
//
Функция ДобавитьСпособУчетаРегЗарплаты(Наименование, СчетДт, СубконтоДт1 = Неопределено, СубконтоДт2 = Неопределено, СубконтоДт3 = Неопределено, 
													СчетКт, СубконтоКт1 = Неопределено, СубконтоКт2 = Неопределено, СубконтоКт3 = Неопределено, 
													СчетДтНУ = Неопределено, СубконтоДтНУ1 = Неопределено, СубконтоДтНУ2 = Неопределено, СубконтоДтНУ3 = Неопределено, 
													СчетКтНУ = Неопределено, СубконтоКтНУ1 = Неопределено, СубконтоКтНУ2 = Неопределено, СубконтоКтНУ3 = Неопределено)

	Элемент = Справочники.СпособыОтраженияЗарплатыВРеглУчете.НайтиПоНаименованию(Наименование);
	Если Элемент.Пустая() Тогда
		Элемент     = Справочники.СпособыОтраженияЗарплатыВРеглУчете.СоздатьЭлемент();
		Элемент.Наименование     = Наименование;
	Иначе
		Элемент = Элемент.ПолучитьОбъект();	
	КонецЕсли;
	Элемент.СчетДт = СчетДт;
	Элемент.СубконтоДт1 = СубконтоДт1;
	Элемент.СубконтоДт2 = СубконтоДт2;
	Элемент.СубконтоДт3 = СубконтоДт3;
	Элемент.СчетКт = СчетКт;
	Элемент.СубконтоКт1 = СубконтоКт1;
	Элемент.СубконтоКт2 = СубконтоКт2;
	Элемент.СубконтоКт3 = СубконтоКт3;		
	Если СчетДтНУ = Неопределено Тогда
		Элемент.СчетДтНУ = БухгалтерскийИНалоговыйУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетДт));
	Иначе
		Элемент.СчетДтНУ = СчетДтНУ	
	КонецЕсли;
	Элемент.СубконтоДтНУ1 = СубконтоДтНУ1;
	Элемент.СубконтоДтНУ2 = СубконтоДтНУ2;
	Элемент.СубконтоДтНУ3 = СубконтоДтНУ3;
	Если СчетКтНУ = Неопределено Тогда
		Элемент.СчетКтНУ = БухгалтерскийИНалоговыйУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетКт));
	Иначе
		Элемент.СчетКтНУ =СчетКтНУ 	
	КонецЕсли;
	Элемент.СубконтоКтНУ1 = СубконтоКтНУ1;
	Элемент.СубконтоКтНУ2 = СубконтоКтНУ2;
	Элемент.СубконтоКтНУ3 = СубконтоКтНУ3;	
	
	Элемент.Записать();
	
	Возврат Элемент.Ссылка

КонецФункции

// Добавляет в справочник "ДоходыНДФЛ" новый элемент
//
Процедура ДобавитьКодДоходаНДФЛ(Код, Наименование, СтавкаНалогообложения)

	СсылкаНаЭлемент = Справочники.ДоходыНДФЛ.НайтиПоКоду(Код);

	Если  СсылкаНаЭлемент.Пустая() Тогда
		Элемент     = Справочники.ДоходыНДФЛ.СоздатьЭлемент();
		Элемент.Код = Код;

	Иначе
		Элемент = СсылкаНаЭлемент.ПолучитьОбъект();

	КонецЕсли;

	Элемент.Наименование     = Наименование;
	Элемент.КодДляОтчетности = Код;
	Элемент.СтавкаНалогообложенияРезидента = СтавкаНалогообложения;

	Элемент.Записать();

КонецПроцедуры

// Добавляет в справочник "ВычетыНДФЛ" новый элемент
//
Процедура ДобавитьКодВычетаНДФЛ(Код, Наименование)

	СсылкаНаЭлемент = Справочники.ВычетыНДФЛ.НайтиПоКоду(Код);

	Если  СсылкаНаЭлемент.Пустая() Тогда
		Элемент     = Справочники.ВычетыНДФЛ.СоздатьЭлемент();
		Элемент.Код = Код;

	Иначе
		Элемент = СсылкаНаЭлемент.ПолучитьОбъект();

	КонецЕсли;

	Элемент.Наименование     = Наименование;

	Элемент.Записать();

КонецПроцедуры

// Устанавливает реквизиты элемента справочника "ДоходыНДФЛ"
//
Процедура УстановитьРеквизитыКодаДоходаНДФЛ(КодДохода, СтавкаНалогообложенияРезидента, КодДляОтчетности, КодВычета)

	Объект = КодДохода.ПолучитьОбъект();

	Объект.СтавкаНалогообложенияРезидента = СтавкаНалогообложенияРезидента;
	Объект.КодДляОтчетности               = КодДляОтчетности;
    Объект.КодВычета                      = КодВычета;
	Объект.Записать();

КонецПроцедуры

// Добавляет запись в набор записей регистра "НДФЛВычетыПоДоходам"
//
Процедура ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, КодДохода, КратностьВычета)

	НоваяЗапись = НаборЗаписей.Добавить();

	НоваяЗапись.Период          = ДатаСведений;
	НоваяЗапись.КодДохода       = КодДохода;
	НоваяЗапись.КратностьВычета = КратностьВычета;
	

КонецПроцедуры

// Добавляет запись в набор записей регистра "НДФЛВычетыПоДоходам"
//
Процедура ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, ДатаСведений, КодДохода, ГодовойВычет)

	НоваяЗапись = НаборЗаписей.Добавить();

	НоваяЗапись.Период       = ДатаСведений;
	НоваяЗапись.КодДохода    = КодДохода;
	НоваяЗапись.ГодовойВычет = ГодовойВычет;
	

КонецПроцедуры


// Добавляет запись в набор записей регистра "НДФЛРазмерВычетов"
//
Процедура ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, КодВычета, Размер, ОграничениеПоДоходам)

	НоваяЗапись = НаборЗаписей.Добавить();

	НоваяЗапись.КодВычета            = КодВычета;
	НоваяЗапись.Период               = ДатаСведений;
	Если ГОД(ДатаСведений) < 2009 тогда
		НоваяЗапись.Размер               = Размер;
	Иначе
		НоваяЗапись.РазмерВРублях               = Размер;
	КонецЕсли;
	НоваяЗапись.ОграничениеПоДоходам = ОграничениеПоДоходам;

КонецПроцедуры

// Добавляет запись в набор записей регистра "ЕСНСкидкиКДоходам"
//
Процедура ДобавитьСкидкуКДодохамЕСН(НаборЗаписей, ДатаСведений, КодДохода, ГодоваяСкидка)

	НоваяЗапись = НаборЗаписей.Добавить();

	НоваяЗапись.Период         = ДатаСведений;
	НоваяЗапись.КодДоходаЕСН   = КодДохода;
	НоваяЗапись.ГодоваяСкидка  = ГодоваяСкидка;

КонецПроцедуры

// Устанавливает реквизиты элемента справочника "ДоходыЕСН"
//
Процедура УстановитьРеквизитыКодаЕСН(СпособОтражения, ВходитВБазуФСЗН, ВходитВБазуСтрах, ВходитВБазуЕдиныйПлатеж)

	Объект = СпособОтражения.ПолучитьОбъект();

	Объект.ВходитВБазуЕдиныйПлатеж = ВходитВБазуЕдиныйПлатеж;
	Объект.ВходитВБазуСтрах               = ВходитВБазуСтрах;
	Объект.ВходитВБазуФСЗН              = ВходитВБазуФСЗН;

	Объект.Записать();

КонецПроцедуры

// Добавляет в справочник "КлассификаторИспользованияРабочегоВремени" новый элемент
//
Процедура ДобавитьКодИспользованияРабочегоВремени(Знач БуквенныйКод, Знач  ЦифровойКод, Знач  Наименование = Неопределено, Знач  ПолноеНаименование, ВидВремени, РабочееВремя = Неопределено)

	ЦифровойКод    = СокрЛП(ЦифровойКод);
	СсылкаНаЭлемент = Справочники.КлассификаторИспользованияРабочегоВремени.НайтиПоРеквизиту("ЦифровойКод", ЦифровойКод);

	Если  СсылкаНаЭлемент.Пустая() Тогда
		Элемент              = Справочники.КлассификаторИспользованияРабочегоВремени.СоздатьЭлемент();
	 	Элемент.ЦифровойКод  = СокрЛП(ЦифровойКод);
	Иначе
		Элемент = СсылкаНаЭлемент.ПолучитьОбъект();
	КонецЕсли;

	Элемент.БуквенныйКод = СокрЛП(БуквенныйКод);
	Элемент.ПолноеНаименование = СокрЛП(ПолноеНаименование);
	Элемент.Наименование = СокрЛП(?(Наименование = Неопределено,ПолноеНаименование,Наименование));
	//Элемент.ВидВремени = ВидВремени;
	Если РабочееВремя <> Неопределено Тогда
		Элемент.РабочееВремя = РабочееВремя;
	КонецЕсли;
	Элемент.Записать();

КонецПроцедуры

// Добавляет в справочник "КлассификаторИспользованияРабочегоВремени" новый элемент
//
Процедура ОписатьКодИспользованияРабочегоВремени(КодИспользованияРабочегоВремени, Знач Списочн, Знач БуквенныйКод, Знач  ЦифровойКод, Знач  Наименование = Неопределено, Знач  ПолноеНаименование, ВидВремени, РабочееВремя = Неопределено)

	КодИспользованияРабочегоВремени.БуквенныйКод = СокрЛП(БуквенныйКод);
	КодИспользованияРабочегоВремени.ЦифровойКод  = СокрЛП(ЦифровойКод);
	КодИспользованияРабочегоВремени.ПолноеНаименование = СокрЛП(ПолноеНаименование);
	КодИспользованияРабочегоВремени.Наименование = СокрЛП(?(Наименование = Неопределено,ПолноеНаименование,Наименование));
	КодИспользованияРабочегоВремени.УдалитьВидВремени = ВидВремени;
	Если РабочееВремя <> Неопределено Тогда
		КодИспользованияРабочегоВремени.РабочееВремя = РабочееВремя;
	КонецЕсли;
	КодИспользованияРабочегоВремени.СреднесписочнаяЧисленность = Списочн;
	КодИспользованияРабочегоВремени.Записать();

КонецПроцедуры

// Устанавливает реквизиты элемента плана видов расчета "ОсновныеНачисленияОрганизаций" 
//
Процедура УстановитьРеквизитыОсновногоНачисленияОрганизации(ВидРасчета, СпособРасчета, ВидВремени, КатегорияНачисления, ОбозначениеВТабелеУчетаРабочегоВремени, ЗачетОтработанногоВремени, ЗачетНормыВремени, КодДоходаНДФЛ = Неопределено, КодДоходаЕСН = Неопределено, СпособОтраженияВБухучете = Неопределено, ВидНачисленияПоСт255НК = Неопределено, ПериодРасчетаСреднегоЗаработка = 0, ПериодДействияБазовый = Ложь, ПроверятьПравильностьУстановкиРеквизитов = Истина)

	Если ТипЗнч(ОбозначениеВТабелеУчетаРабочегоВремени) = Тип("Строка") Тогда
		КодУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.НайтиПоРеквизиту("БуквенныйКод", СокрЛП(ОбозначениеВТабелеУчетаРабочегоВремени));
	Иначе
		КодУчетаРабочегоВремени = ОбозначениеВТабелеУчетаРабочегоВремени
	КонецЕсли;

	ОбъектВР = ВидРасчета.ПолучитьОбъект();
	
	ОбъектВР.СпособРасчета							= СпособРасчета;
	ОбъектВР.ВидВремени								= ВидВремени;
	ОбъектВР.КатегорияНачисления					= КатегорияНачисления;
	ОбъектВР.ОбозначениеВТабелеУчетаРабочегоВремени = КодУчетаРабочегоВремени;
	ОбъектВР.ЗачетОтработанногоВремени              = ЗачетОтработанногоВремени;
	ОбъектВР.ЗачетНормыВремени                      = ЗачетНормыВремени;
	ОбъектВР.КодДоходаНДФЛ                          = КодДоходаНДФЛ;
	ОбъектВР.КодДоходаЕСН                           = КодДоходаЕСН;
	//ОбъектВР.КодДоходаФСС_НС				        = КодДоходаФСС_НС;
	ОбъектВР.СпособОтраженияВБухучете               = СпособОтраженияВБухучете;
	ОбъектВР.СтратегияОтраженияВУчете               = ?(СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.РаспределятьПоБазовымНачислениям, Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления,
														?(ЗначениеЗаполнено(СпособОтраженияВБухучете), Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоВидуРасчета,Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоНаНачалоСобытия));
	ОбъектВР.ВидНачисленияПоСт255НК                 = ВидНачисленияПоСт255НК;
	//ОбъектВР.ОтнесениеРасходовКДеятельностиЕНВД     = ?(КодДоходаЕСН = Справочники.ДоходыЕСН.ВыплатыЗаСчетПрибыли,Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД,Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются);
	//ОбъектВР.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка;
	ОбъектВР.ПериодРасчетаСреднегоЗаработка         = ПериодРасчетаСреднегоЗаработка;

	Если НЕ ОбъектВР.Предопределенный Тогда
		ОбъектВР.ПериодДействияБазовый = ПериодДействияБазовый;
	КонецЕсли;
	
	Если НЕ ПроверятьПравильностьУстановкиРеквизитов Тогда
		ОбъектВР.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	Попытка
		ОбъектВР.Записать();
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры // УстановитьРеквизитыОсновногоНачисленияОрганизации()

// Устанавливает реквизиты элемента плана видов расчета "УправленческиеНачисления" 
//
Процедура УстановитьРеквизитыУправленческогоНачисления(	ВидРасчета, 
														СпособРасчета, 
														КатегорияНачисления, 
														ЗачетОтработанногоВремени = Ложь, 
														ВытесняющиеРасчеты = Неопределено, 
														ПериодДействияБазовый = Ложь,														
														Показатель1 = Неопределено,
														Показатель2 = Неопределено,
														Показатель3 = Неопределено,
														ВидУчетаРабочегоВремени = Неопределено,
														ФормулаРасчета = "", ЗапрашиватьПриКадровыхПеремещениях1= Ложь, ЗапрашиватьПриКадровыхПеремещениях2= Ложь, ЗапрашиватьПриКадровыхПеремещениях3= Ложь)

	ОбъектВР = ВидРасчета.ПолучитьОбъект();
	ОбъектВР.ПроизвольнаяФормулаРасчета	= Истина;
	ОбъектВР.ФормулаРасчета				= ФормулаРасчета;
	ОбъектВР.СпособРасчета				= Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула;
	ОбъектВР.КатегорияНачисления			= КатегорияНачисления;
	ОбъектВР.ЗачетОтработанногоВремени	= ЗачетОтработанногоВремени;
    ОбъектВР.ВидУчетаРабочегоВремени	= ВидУчетаРабочегоВремени;
	Если НЕ ОбъектВР.Предопределенный Тогда
		ОбъектВР.ПериодДействияБазовый = ПериодДействияБазовый;
	КонецЕсли;

	// обходим с последней строки табличной части и удаляем не предопределенные строки
	Индекс = ОбъектВР.ВытесняющиеВидыРасчета.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Если ОбъектВР.ВытесняющиеВидыРасчета[Индекс].Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		ОбъектВР.ВытесняющиеВидыРасчета.Удалить(Индекс);
	КонецЦикла;
	Если ВытесняющиеРасчеты <> Неопределено Тогда
		Для каждого Элемент Из ВытесняющиеРасчеты Цикл
			НоваяСтрока            = ОбъектВР.ВытесняющиеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Показатель1) Тогда
		Показатели = ОбъектВР.Показатели.Добавить();
		Показатели.Показатель = Показатель1;
		Показатели.ЗапрашиватьПриКадровыхПеремещениях = ЗапрашиватьПриКадровыхПеремещениях1;
		Если ЗначениеЗаполнено(Показатель2) Тогда
			Показатели = ОбъектВР.Показатели.Добавить();
			Показатели.Показатель = Показатель2;
			Показатели.ЗапрашиватьПриКадровыхПеремещениях = ЗапрашиватьПриКадровыхПеремещениях2;
			Если ЗначениеЗаполнено(Показатель3) Тогда
				Показатели = ОбъектВР.Показатели.Добавить();
				Показатели.Показатель = Показатель3;
				Показатели.ЗапрашиватьПриКадровыхПеремещениях = ЗапрашиватьПриКадровыхПеремещениях3;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектВР.Записать();


КонецПроцедуры // УстановитьРеквизитыУправленческогоНачисления()

// Устанавливает реквизиты элемента плана видов расчета "ДополнительныеНачисленияОрганизаций" 
//
Процедура УстановитьРеквизитыДополнительногоНачисленияОрганизации(ВидРасчета, СпособРасчета, КатегорияНачисления, ВидПремии, ЧислоМесяцев, ПериодРасчетаСреднегоЗаработка = 0,КодДоходаНДФЛ, КодДоходаЕСН, СпособОтраженияВБухучете, ВидНачисленияПоСт255НК)

	ОбъектВР = ВидРасчета.ПолучитьОбъект();

	ОбъектВР.СпособРасчета            = СпособРасчета;
	ОбъектВР.КатегорияНачисления      = КатегорияНачисления;
	ОбъектВР.ВидПремии                = ВидПремии;
	ОбъектВР.ЧислоМесяцев             = ЧислоМесяцев;
	ОбъектВР.КодДоходаНДФЛ            = КодДоходаНДФЛ;
	ОбъектВР.КодДоходаЕСН             = КодДоходаЕСН;
	ОбъектВР.СпособОтраженияВБухучете = СпособОтраженияВБухучете;
	ОбъектВР.СтратегияОтраженияВУчете = ?(СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.РаспределятьПоБазовымНачислениям, Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления,
											?(ЗначениеЗаполнено(СпособОтраженияВБухучете), Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоВидуРасчета,Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоНаНачалоСобытия));
	ОбъектВР.ВидНачисленияПоСт255НК   = ВидНачисленияПоСт255НК;
	ОбъектВР.ПериодРасчетаСреднегоЗаработка =  ПериодРасчетаСреднегоЗаработка;

	ОбъектВР.Записать();

КонецПроцедуры // УстановитьРеквизитыДополнительногоНачисленияОрганизации()

// Создает новый вид расчета
//
// Параметры
//  ПВР  – менеджер плана видов расчетов
//  Код  – код создаваемого вида расчета
//  Наименование  – наименование создаваемого вида расчета
//  БазовыеВидыРасчетов - список базовых видов расчетов
//
// Возвращаемое значение:
//   ссылка на созданный вид расчета
//
Функция СоздатьВидРасчета(ПВР, Код, Наименование, БазовыеВидыРасчетов = Неопределено)

	ВР = ПВР.НайтиПоКоду(Код);
	Если ВР.Пустая() Тогда
		ВР = ПВР.СоздатьВидРасчета();
	Иначе
		ВР = ВР.ПолучитьОбъект();
		ВР.БазовыеВидыРасчета.Очистить();
	КонецЕсли;

	ВР.Код          = Код;
	ВР.Наименование = Наименование;

	Если БазовыеВидыРасчетов<>Неопределено Тогда
		Для каждого Элемент Из БазовыеВидыРасчетов Цикл
			НоваяСтрока            = ВР.БазовыеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;

	ВР.Записать();

	Возврат ВР.Ссылка;

КонецФункции

// Устанавливает реквизиты элемента плана видов расчета "УдержанияОрганизаций" 
//
Процедура УстановитьРеквизитыУдержанияОрганизации(ВидРасчета, СпособРасчета, КатегорияНачисления, СпособОтраженияВБухучете, БазовыеВидыРасчетов = Неопределено, ПериодРасчетаСреднегоЗаработка = 0)

	ОбъектВР = ВидРасчета.ПолучитьОбъект();

	ОбъектВР.СпособРасчета            = СпособРасчета;
	ОбъектВР.КатегорияНачисления         = КатегорияНачисления;
	ОбъектВР.СпособОтраженияВБухучете = СпособОтраженияВБухучете;
	ОбъектВР.ПериодРасчетаСреднегоЗаработка = ПериодРасчетаСреднегоЗаработка;

	Если БазовыеВидыРасчетов<>Неопределено Тогда
		ОбъектВР.БазовыеВидыРасчета.Очистить();
		Для каждого Элемент Из БазовыеВидыРасчетов Цикл
			НоваяСтрока            = ОбъектВР.БазовыеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;

	ОбъектВР.Записать();

КонецПроцедуры

// Устанавливает список базовых расчетов для элемента плана видов расчета
//
// Параметры
//  ВидРасчета  – вид расчетов (ссылка)
//  БазовыеВидыРасчетов - список базовых видов расчетов
Процедура УстановитьБазовыеИВедущиеРасчеты(ВидРасчета, БазовыеВидыРасчетов, ВедущиеВидыРасчета)

	ВР = ВидРасчета.ПолучитьОбъект();

	// обходим с последней строки табличной части и удаляем не предопределенные строки
	Индекс = ВР.БазовыеВидыРасчета.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Если ВР.БазовыеВидыРасчета[Индекс].Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		ВР.БазовыеВидыРасчета.Удалить(Индекс);
	КонецЦикла;
	Если БазовыеВидыРасчетов <> Неопределено Тогда
		Для каждого Элемент Из БазовыеВидыРасчетов Цикл
			НоваяСтрока            = ВР.БазовыеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;

	// обходим с последней строки табличной части и удаляем не предопределенные строки
	Индекс = ВР.ВедущиеВидыРасчета.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Если ВР.ВедущиеВидыРасчета[Индекс].Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		ВР.ВедущиеВидыРасчета.Удалить(Индекс);
	КонецЦикла;
	Если ВедущиеВидыРасчета <> Неопределено Тогда
		Для каждого Элемент Из ВедущиеВидыРасчета Цикл
			НоваяСтрока            = ВР.ВедущиеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;

	ВР.Записать();

КонецПроцедуры

// Устанавливает реквизиты элемента ПВХ "ВопросыДляАнкетирования"
//
Процедура УстановитьРеквизитыВопроса(Вопрос, ПолнаяФормулировка, ТипВопросаАнкеты, БолееОдногоОтвета = Ложь, КоличествоСтрок = 0, ТипВидКонтакнойИнформации = 0, ТипЗначения = Неопределено, Длина = 0)
	
	Объект = Вопрос.ПолучитьОбъект();
	
	Объект.ПолнаяФормулировка			= ПолнаяФормулировка;
	Объект.ТипОтветаНаВопрос					= ТипВопросаАнкеты;
	Объект.КоличествоСтрокТаблицы		= КоличествоСтрок;
	Объект.ВидКонтактнойИнформации	= ТипВидКонтакнойИнформации;
	
	Если ТипЗначения <> Неопределено Тогда
		Объект.ТипЗначения				= ТипЗначения;
	КонецЕсли;
	Объект.Длина						= Длина;
	
	Объект.Записать();
	
КонецПроцедуры

// Записываем реквизиты предопределенных вопросов
//
// Параметры
//  нет
//
Процедура ЗаполнитьРеквизитыВопросов(ЗаполнятьТабличныеВопросы = Истина)

	Менеджер		= ПланыВидовХарактеристик.ВопросыДляАнкетирования;
	ВВидеЧисла		= Перечисления.ТипыОтветаНаВопросАнкеты.Число;
	ВВидеСтроки		= Перечисления.ТипыОтветаНаВопросАнкеты.Строка;
	ВВидеДаты		= Перечисления.ТипыОтветаНаВопросАнкеты.Дата;
	ТабличныйВопрос	= Перечисления.ТипыОтветаНаВопросАнкеты.Табличный;
	ВВидеБулево		= Перечисления.ТипыОтветаНаВопросАнкеты.Булево;
	ВВидеКИ			= Перечисления.ТипыОтветаНаВопросАнкеты.КонтактнаяИнформация;
	ВВидеСсылки		= Перечисления.ТипыОтветаНаВопросАнкеты.Ссылка;

	
	// Описание типов
	КЧ = Новый КвалификаторыЧисла(15, 2);
	КС = Новый КвалификаторыСтроки(1000);
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	
	ОписаниеТиповЧисло	= Новый ОписаниеТипов("Число", КЧ);
	ОписаниеТиповСтрока	= Новый ОписаниеТипов("Строка", , КС);
	ОписаниеТиповДата	= Новый ОписаниеТипов("Дата", , , КД);
	ОписаниеТиповБулево	= Новый ОписаниеТипов("Булево");
	ОписаниеТиповВОТ	= Новый ОписаниеТипов("СправочникСсылка.ВариантыОтветовОпросов");
	
	УстановитьРеквизитыВопроса(Менеджер.Имя,			"Имя",			ВВидеСтроки,,,, ОписаниеТиповСтрока, 50);
	УстановитьРеквизитыВопроса(Менеджер.Отчество,		"Отчество",		ВВидеСтроки,,,, ОписаниеТиповСтрока, 50);
	УстановитьРеквизитыВопроса(Менеджер.Фамилия,		"Фамилия",		ВВидеСтроки,,,, ОписаниеТиповСтрока, 50);
	УстановитьРеквизитыВопроса(Менеджер.Пол,			"Пол",			ВВидеСсылки,,,, Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическихЛиц"));
	УстановитьРеквизитыВопроса(Менеджер.ДатаРождения,	"Дата рождения",ВВидеДаты,,,, ОписаниеТиповДата);
	
	УстановитьРеквизитыВопроса(Менеджер.ФизическоеЛицоАдресРегистрации,, ВВидеКИ,,, Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица, ОписаниеТиповСтрока, 1000);
	УстановитьРеквизитыВопроса(Менеджер.ФизическоеЛицоАдресФактический,, ВВидеКИ,,, Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица, ОписаниеТиповСтрока, 1000);
	УстановитьРеквизитыВопроса(Менеджер.ФизическоеЛицоТелефонДомашний,,ВВидеКИ,,, Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица, ОписаниеТиповСтрока, 1000);

	УстановитьРеквизитыВопроса(Менеджер.СтраховойНомерПФР,	"Страховой № в ПФР",	ВВидеСтроки,,,, ОписаниеТиповСтрока, 14);
	УстановитьРеквизитыВопроса(Менеджер.ИНН,				"ИНН",					ВВидеСтроки,,,, ОписаниеТиповСтрока, 12);
	УстановитьРеквизитыВопроса(Менеджер.КодИМНС,			"Код ИМНС",				ВВидеСтроки,,,, ОписаниеТиповСтрока, 4);
	УстановитьРеквизитыВопроса(Менеджер.Гражданство,		"Гражданство",			ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.КлассификаторСтранМира"));
	УстановитьРеквизитыВопроса(Менеджер.СемейноеПоложение,	"Семейное положение",	ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.СемейноеПоложениеФизЛиц"));
	
	// Состав семьи
	УстановитьРеквизитыВопроса(Менеджер.СоставСемьиСтепеньРодства,	"Степень родства",				ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.СтепениРодстваФизЛиц"));
	УстановитьРеквизитыВопроса(Менеджер.СоставСемьиРодственник,		"Имя родственника",				ВВидеСтроки,,,, ОписаниеТиповСтрока, 50);
	УстановитьРеквизитыВопроса(Менеджер.СоставСемьиДатаРождения,	"Год рождения родственника",	ВВидеДаты,,,, ОписаниеТиповДата);
	
	// Образование
	УстановитьРеквизитыВопроса(Менеджер.ВидОбразования,		"Образование",		ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.ВидыОбразованияФизЛиц"));
	УстановитьРеквизитыВопроса(Менеджер.УчебноеЗаведение,	"Учебное заведение",ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.УчебныеЗаведения"));
	УстановитьРеквизитыВопроса(Менеджер.Специальность,		"Специальность",	ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.КлассификаторСпециальностейПоОбразованию"));
	УстановитьРеквизитыВопроса(Менеджер.ДипломСерияНомер,	"Диплом",			ВВидеСтроки,,,, ОписаниеТиповСтрока, 50);
	УстановитьРеквизитыВопроса(Менеджер.ГодОкончания,		"Год окончания",	ВВидеЧисла,,,,  Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(4, 0)), 4);
	УстановитьРеквизитыВопроса(Менеджер.Квалификация,		"Квалификация",		ВВидеСтроки,,,, ОписаниеТиповСтрока, 100);
	
	// Трудовая деятельность
	УстановитьРеквизитыВопроса(Менеджер.ТрудоваяДеятельностьОрганизация,	"Наименование организации", ВВидеСтроки,,,, ОписаниеТиповСтрока, 100);
	УстановитьРеквизитыВопроса(Менеджер.ТрудоваяДеятельностьДолжность,		"Должность",				ВВидеСтроки,,,, ОписаниеТиповСтрока, 100);
	УстановитьРеквизитыВопроса(Менеджер.ТрудоваяДеятельностьНачалоРаботы,	"Начало работы",			ВВидеДаты,,,, ОписаниеТиповДата);
	УстановитьРеквизитыВопроса(Менеджер.ТрудоваяДеятельностьОкончаниеРаботы,"Окончание работы",			ВВидеДаты,,,, ОписаниеТиповДата);

	// Знание языков
	УстановитьРеквизитыВопроса(Менеджер.СтепеньЗнанияЯзыка,	"Знание языка",		ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.СтепениЗнанияЯзыка"));
	УстановитьРеквизитыВопроса(Менеджер.Язык,				"Язык",				ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.ЯзыкиНародовМира"));

	// ПаспортныеДанныеФизЛиц
	УстановитьРеквизитыВопроса(Менеджер.ВидДокументаУдостоверяющегоЛичность,"Вид документа",	ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.ДокументыУдостоверяющиеЛичность"));
	УстановитьРеквизитыВопроса(Менеджер.НомерДокумента,						"Номер",			ВВидеСтроки,,,, ОписаниеТиповСтрока, 14);
	УстановитьРеквизитыВопроса(Менеджер.СерияДокумента,						"Серия",			ВВидеСтроки,,,, ОписаниеТиповСтрока, 14);
	УстановитьРеквизитыВопроса(Менеджер.ДатаВыдачиДокумента,				"Дата выдачи",		ВВидеДаты,,,, ОписаниеТиповДата);
	УстановитьРеквизитыВопроса(Менеджер.КемВыданДокумент,					"Кем выдан",		ВВидеСтроки,,,, ОписаниеТиповСтрока);
	УстановитьРеквизитыВопроса(Менеджер.КодПодразделенияДокумента,			"Код подразделения",ВВидеСтроки,,,, ОписаниеТиповСтрока, 15);

	// ВоинскийУчет
	УстановитьРеквизитыВопроса(Менеджер.ОтношениеКВоинскойОбязанности,	"Воинская обязанность",		ВВидеСсылки,,,, Новый ОписаниеТипов("ПеречислениеСсылка.ОтношениеКВоинскойОбязанности"));
	УстановитьРеквизитыВопроса(Менеджер.ОтношениеКВоинскомуУчету,		"Воинский учет",			ВВидеСсылки,,,, Новый ОписаниеТипов("ПеречислениеСсылка.ОтношениеКВоинскомуУчету"));
	УстановитьРеквизитыВопроса(Менеджер.КатегорияЗапаса,				"Категория запаса",			ВВидеСсылки,,,, Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииЗапасаВоеннообязанных"));
	УстановитьРеквизитыВопроса(Менеджер.Звание,							"Звание",					ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.ВоинскиеЗвания"));
	УстановитьРеквизитыВопроса(Менеджер.Состав,							"Состав (профиль)",			ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.СоставыВоеннослужащих"));
	УстановитьРеквизитыВопроса(Менеджер.ВУС,							"ВУС",						ВВидеСтроки,,,, ОписаниеТиповСтрока, 10);
	УстановитьРеквизитыВопроса(Менеджер.Годность,						"Годность",					ВВидеСсылки,,,, Новый ОписаниеТипов("ПеречислениеСсылка.ГодностьКВоеннойСлужбе"));
	УстановитьРеквизитыВопроса(Менеджер.Военкомат,						"Наименование военкомата",	ВВидеСсылки,,,, Новый ОписаниеТипов("СправочникСсылка.Военкоматы"));
	УстановитьРеквизитыВопроса(Менеджер.НаличиеМобпредписания,			"Есть ли мобпредписание",	ВВидеБулево,,,, ОписаниеТиповБулево);
	УстановитьРеквизитыВопроса(Менеджер.НомерКомандыПартии,				"Номер команды, партии",	ВВидеСтроки,,,, ОписаниеТиповСтрока, 50);

	// табличные вопросы
	УстановитьРеквизитыВопроса(Менеджер.ТЗнаниеЯзыков,					"Знание языков",			ТабличныйВопрос,, 4,, ОписаниеТиповСтрока, 200);
	УстановитьРеквизитыВопроса(Менеджер.ТОбразование,					"Образование",				ТабличныйВопрос,, 4,, ОписаниеТиповСтрока, 200);
	УстановитьРеквизитыВопроса(Менеджер.ТСоставСемьи,					"Состав семьи",				ТабличныйВопрос,, 4,, ОписаниеТиповСтрока, 200);
	УстановитьРеквизитыВопроса(Менеджер.ТТрудоваяДеятельность,			"Трудовая деятельность",	ТабличныйВопрос,, 4,, ОписаниеТиповСтрока, 200);
	
	Если ЗаполнятьТабличныеВопросы Тогда
		// табличный вопрос образование
		ОбъектПВХВопросыДляАнкетирования = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТОбразование.ПолучитьОбъект();
		НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
		НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ВидОбразования;
		НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
		НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.УчебноеЗаведение;
		НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
		НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Специальность;
		НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
		НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ДипломСерияНомер;
		НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
		НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ГодОкончания;
		НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
		НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Квалификация;
		ОбъектПВХВопросыДляАнкетирования.КоличествоСтрокТаблицы = 4;
		ОбъектПВХВопросыДляАнкетирования.Записать();
		
		// табличный вопрос знание языков
		ОбъектПВХВопросыДляАнкетирования = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТЗнаниеЯзыков.ПолучитьОбъект();
		НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
		НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Язык;
		НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
		НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СтепеньЗнанияЯзыка;
		ОбъектПВХВопросыДляАнкетирования.КоличествоСтрокТаблицы = 4;
		ОбъектПВХВопросыДляАнкетирования.Записать();
		
		// табличный вопрос состав семьи
		ОбъектПВХВопросыДляАнкетирования = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТСоставСемьи.ПолучитьОбъект();
		НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
		НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СоставСемьиСтепеньРодства;
		НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
		НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СоставСемьиРодственник;
		НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
		НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СоставСемьиДатаРождения;
		ОбъектПВХВопросыДляАнкетирования.КоличествоСтрокТаблицы = 4;
		ОбъектПВХВопросыДляАнкетирования.Записать();
		
		// табличный вопрос трудовая деятельность
		ОбъектПВХВопросыДляАнкетирования = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТТрудоваяДеятельность.ПолучитьОбъект();
		НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
		НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТрудоваяДеятельностьОрганизация;
		НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
		НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТрудоваяДеятельностьНачалоРаботы;
		НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
		НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТрудоваяДеятельностьОкончаниеРаботы;
		НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
		НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТрудоваяДеятельностьДолжность;
		ОбъектПВХВопросыДляАнкетирования.КоличествоСтрокТаблицы = 4;
		ОбъектПВХВопросыДляАнкетирования.Записать();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыВопросов()

// Заполняет справочник воинских званий предопределенными реквизитами
//
Процедура ЗаполнитьСправочникВоинскихЗваний() 

	ВоинскиеЗвания = Справочники.ВоинскиеЗвания;

	ОбъектЗвание = ВоинскиеЗвания.ГенералАрмии.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.ГенералАрмии;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.ГенералЛейтенант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.ГенералЛейтенант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.ГенералМайор.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.ГенералМайор;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.ГенералПолковник.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.ГенералПолковник;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Ефрейтор.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Ефрейтор;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Капитан.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Капитан;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Лейтенант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Лейтенант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Майор.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Майор;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.МаршалРоссийскойФедерации.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.МаршалРоссийскойФедерации;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.МладшийЛейтенант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.МладшийЛейтенант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.МладшийСержант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.МладшийСержант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Подполковник.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Подполковник;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Полковник.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Полковник;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Прапорщик.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Прапорщик;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Рядовой.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Рядовой;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Сержант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Сержант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.СтаршийЛейтенант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.СтаршийЛейтенант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.СтаршийПрапорщик.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.СтаршийПрапорщик;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.СтаршийСержант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.СтаршийСержант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Старшина.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Старшина;
	ОбъектЗвание.Записать();

КонецПроцедуры

// Процедура заполняет константу шаблонов телефонов.
// 
Процедура ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию()

	ТаблицаСоответствий = Новый Соответствие;
	ТаблицаСоответствий.Вставить(7,"999-99-99");
	ТаблицаСоответствий.Вставить(6,"99-99-99");
	ТаблицаСоответствий.Вставить(5,"9-99-99");
	ТаблицаСоответствий.Вставить(4,"99-99");

	ХранилищеШаблоновТелефонов = Новый ХранилищеЗначения(ТаблицаСоответствий);

	Константы.ШаблоныТелефонныхНомеров.Установить(ХранилищеШаблоновТелефонов);

КонецПроцедуры // укЗаполнитьДанныеПоУмолчаниюДляКонтактнойИнформации()

// Заполнение реквизитов справочника "Виды контактной информации"
//
Процедура ЗаполнитьСправочникВидыКонтактнойИнформации()

	// Физ.лица
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.КонтактнТелефонКандидата.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();
	
	// Организации
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();

	// Пользователи
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи;
	ОбъектВидКонтактнойИнформации.Записать();

	// Контрагенты
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();
		

КонецПроцедуры

// Заполнение элементов и реквизитов справочников "Шкалы оценк"
//
Процедура ЗаполнитьСправочникШкалОценок()
	
	СправочникШкал = Справочники.ШкалыОценокКомпетенций;
	ШкальныйОценки = Справочники.СоставОценочныхШкалКомпетенций;
	
	// Двух Бальная шкала
	Если Справочники.ШкалыОценокКомпетенций.НайтиПоНаименованию("Двух бальная").Пустая() Тогда
		Справочник = СправочникШкал.СоздатьЭлемент();
		Справочник.Наименование = "Двух бальная";
		Справочник.Записать();
		
		// Заполнение шкал
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "НЕ зачет";
		Оценка.ПриоритетОценки = 1;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "Зачет";
		Оценка.ПриоритетОценки = 2;
		Оценка.Записать();
	КонецЕсли;

	// Трех Бальная шкала
	Если Справочники.ШкалыОценокКомпетенций.НайтиПоНаименованию("Трех бальная").Пустая()  Тогда

		Справочник = СправочникШкал.СоздатьЭлемент();
		Справочник.Наименование = "Трех бальная";
		Справочник.Записать();
		
		// Заполнение шкал
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "Ниже ожидаемого уровня";
		Оценка.ПриоритетОценки = 1;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "На ожидаемом уровне";
		Оценка.ПриоритетОценки = 2;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "Выше ожидаемого уровня";
		Оценка.ПриоритетОценки = 3;
		Оценка.Записать();
    КонецЕсли;
			
	// Четырех Бальная шкала
	Если Справочники.ШкалыОценокКомпетенций.НайтиПоНаименованию("Четырех бальная").Пустая() Тогда
	
		Справочник = СправочникШкал.СоздатьЭлемент();
		Справочник.Наименование = "Четырех бальная";
		Справочник.Записать();
		
		// Заполнение шкал
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "НЕ удовлетворительно";
		Оценка.ПриоритетОценки = 1;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "Удовлетворительно";
		Оценка.ПриоритетОценки = 2;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "Хорошо";
		Оценка.ПриоритетОценки = 3;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "Отлично";
		Оценка.ПриоритетОценки = 4;
		Оценка.Записать();
    КонецЕсли;

	// Пяти Бальная шкала
	Справочник = СправочникШкал.Пятибальная;
	
	Если ШкальныйОценки.НайтиПоНаименованию("E [-2]",Истина,,Справочник).Пустая() Тогда
		// Заполнение шкал
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник;
		Оценка.Наименование = "E [-2]";
		Оценка.ПриоритетОценки = 1;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник;
		Оценка.Наименование = "D [-1]";
		Оценка.ПриоритетОценки = 2;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник;
		Оценка.Наименование = "С [ 0]";
		Оценка.ПриоритетОценки = 3;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник;
		Оценка.Наименование = "В [+1]";
		Оценка.ПриоритетОценки = 4;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник;
		Оценка.Наименование = "А [+2]";
		Оценка.ПриоритетОценки = 5;
		Оценка.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает флаг "Запретить использовать в проводках"
// хозрасчетным счетам 
//
Процедура УстановитьПараметрыСчетовБУиНУ()

	НачатьТранзакцию();

	#Если Клиент Тогда
			
	Состояние("Установка запрета использования в проводках групп счетов...");

	#КонецЕсли

	ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл

		Если Не ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель) Тогда
			Продолжить;
		КонецЕсли;

		Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();
		Если Объект.ЗапретитьИспользоватьВПроводках Тогда
			Продолжить;
		КонецЕсли;

		Объект.ЗапретитьИспользоватьВПроводках = Истина;
		Объект.Записать();

	КонецЦикла;

	ВыборкаСчетов = ПланыСчетов.Налоговый.ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл

		Если Не ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель) Тогда
			Продолжить;
		КонецЕсли;

		Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();
		Если Объект.ЗапретитьИспользоватьВПроводках Тогда
			Продолжить;
		КонецЕсли;

		Объект.ЗапретитьИспользоватьВПроводках = Истина;
		Объект.Записать();

	КонецЦикла;
	
	//ВыборкаСчетов = ПланыСчетов.НалоговыйУСН.ВыбратьИерархически();
	//Пока ВыборкаСчетов.Следующий() Цикл

	//	Если Не ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель) Тогда
	//		Продолжить;
	//	КонецЕсли;

	//	Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();
	//	Если Объект.ЗапретитьИспользоватьВПроводках Тогда
	//		Продолжить;
	//	КонецЕсли;

	//	Объект.ЗапретитьИспользоватьВПроводках = Истина;
	//	Объект.Записать();

	//КонецЦикла;

	ЗафиксироватьТранзакцию();

КонецПроцедуры

// Заполняет регистр сведений СоответствиеСчетовБУиНУ 
//
Процедура ЗаполнитьСоответствиеСчетовБУиНУ() Экспорт

	#Если Клиент Тогда
			
	Состояние("Установка соответствий между счетами бухгалтерского и налогового учета...");

	#КонецЕсли

	Макет = ПолучитьМакет("СоответствияСчетовБУиНУ");
	Набор = РегистрыСведений.СоответствиеСчетовБУиНУ.СоздатьНаборЗаписей();

	Для Индекс = 3 По 430 Цикл

		ИмяСчетаБУ     = Макет.Область(Индекс, 1, Индекс, 1).Текст;
		ИмяСчетаКоррБУ = Макет.Область(Индекс, 5, Индекс, 5).Текст;
		ИмяСчетаНУ     = Макет.Область(Индекс, 3, Индекс, 3).Текст;
		ИмяВидЗатратНУ = Макет.Область(Индекс, 7, Индекс, 7).Текст;
		//УСН
		//ИмяСчетаУСН    = Макет.Область(Индекс, 8, Индекс, 8).Текст;

		Если Не ЗначениеЗаполнено(ИмяСчетаБУ) Тогда
			Продолжить; // Нет прямого соответствия.
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ИмяСчетаНУ) Тогда //И Не ЗначениеЗаполнено(ИмяСчетаУСН) Тогда
			Продолжить; // Нет прямого соответствия.
		КонецЕсли;

		Попытка
			СчетБУ = ПланыСчетов.Хозрасчетный[ИмяСчетаБУ];

			#Если Клиент Тогда
			
			Состояние("Установка соответствий для счета: " + Строка(СчетБУ));

			#КонецЕсли

		Исключение
			Продолжить; // Нет счета с таким именем
		КонецПопытки;

		Попытка
			СчетКоррБУ = ПланыСчетов.Хозрасчетный[ИмяСчетаКоррБУ];
		Исключение
			СчетКоррБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецПопытки;

		ЕстьСчетНУ = Истина;
		Попытка
			СчетНУ = ПланыСчетов.Налоговый[ИмяСчетаНУ];
		Исключение
			ЕстьСчетНУ = Ложь; // Нет счета с таким именем
		КонецПопытки;
		//ЕстьСчетУСН = Истина;
		//Попытка
		//	СчетУСН = ПланыСчетов.НалоговыйУСН[ИмяСчетаУСН];
		//Исключение
		//	ЕстьСчетУСН = Ложь; // Нет счета с таким именем
		//КонецПопытки;
		
		Если (НЕ ЕстьСчетНУ) Тогда //И (НЕ ЕстьСчетУСН)
            Продолжить;
		КонецЕсли;
		
		Попытка
			ВидЗатратНУ = Перечисления.ВидыРасходовНУ[ИмяВидЗатратНУ];
		Исключение
			ВидЗатратНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
		КонецПопытки;

		Если Не ЗначениеЗаполнено(ВидЗатратНУ) Тогда
			Попытка
				ВидЗатратНУ = Перечисления.ВидыПрочихДоходовИРасходов[ИмяВидЗатратНУ];
			Исключение
				ВидЗатратНУ = Перечисления.ВидыПрочихДоходовИРасходов.ПустаяСсылка();
			КонецПопытки;
		КонецЕсли;

		Если ЗначениеЗаполнено(СчетКоррБУ) Тогда
			Отбор = Новый Структура("СчетБУ, СчетКоррБУ");

			Отбор.СчетБУ     = СчетБУ;
			Отбор.СчетКоррБУ = СчетКоррБУ;

		ИначеЕсли ЗначениеЗаполнено(ВидЗатратНУ) Тогда
			Отбор = Новый Структура("СчетБУ, ВидЗатратНУ");

			Отбор.СчетБУ      = СчетБУ;
			Отбор.ВидЗатратНУ = ВидЗатратНУ;

		Иначе
			Отбор = Новый Структура("СчетБУ", СчетБУ);

		КонецЕсли;

		РезультатНУ = БухгалтерскийИНалоговыйУчет.ПреобразоватьСчетаБУвСчетНУ(Отбор, "НУ");
		//РезультатУСН = БухгалтерскийИНалоговыйУчет.ПреобразоватьСчетаБУвСчетНУ(Отбор, "УСН");
		
		Если ЗначениеЗаполнено(РезультатНУ) Тогда //ИЛИ ЗначениеЗаполнено(РезультатУСН) 
			Продолжить;
		КонецЕсли;
				
		Если Не ЗначениеЗаполнено(СчетБУ) и Не ЗначениеЗаполнено(СчетНУ) Тогда //и Не ЗначениеЗаполнено(СчетУСН) 
			Продолжить;
		КонецЕсли;

		Запись = Набор.Добавить();

		Запись.СчетБУ = СчетБУ;
		КолвоСубконто = СчетБУ.ВидыСубконто.Количество();
		Если КолвоСубконто > 0 Тогда
			Запись.СубконтоБУ1 = Новый(СчетБУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
		КонецЕсли;
		Если КолвоСубконто > 1 Тогда
			Запись.СубконтоБУ2 = Новый(СчетБУ.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]);
		КонецЕсли;
		Если КолвоСубконто > 2 Тогда
			Запись.СубконтоБУ3 = Новый(СчетБУ.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]);
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетКоррБУ) Тогда
			Запись.СчетКоррБУ = СчетКоррБУ;
		КонецЕсли;

		Если ЗначениеЗаполнено(СчетНУ) Тогда
			Запись.СчетНУ = СчетНУ;
			КолвоСубконто = СчетНУ.ВидыСубконто.Количество();
			Если КолвоСубконто > 0 Тогда
				Запись.СубконтоНУ1 = Новый(СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
			КонецЕсли;
			Если КолвоСубконто > 1 Тогда
				Запись.СубконтоНУ2 = Новый(СчетНУ.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0])
			КонецЕсли;
			Если КолвоСубконто > 2 Тогда
				Запись.СубконтоНУ3 = Новый(СчетНУ.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0])
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
			Запись.ВидЗатратНУ = ВидЗатратНУ;
		КонецЕсли;

		//Если ЗначениеЗаполнено(СчетУСН) Тогда
		//	Запись.СчетУСН = СчетУСН;
		//	КолвоСубконто = СчетУСН.ВидыСубконто.Количество();
		//	Если КолвоСубконто > 0 Тогда
		//		Запись.СубконтоУСН1 = Новый(СчетУСН.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
		//	КонецЕсли;
		//	Если КолвоСубконто > 1 Тогда
		//		Запись.СубконтоУСН2 = Новый(СчетУСН.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0])
		//	КонецЕсли;
		//	Если КолвоСубконто > 2 Тогда
		//		Запись.СубконтоУСН3 = Новый(СчетУСН.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0])
		//	КонецЕсли;
		//КонецЕсли;
	КонецЦикла;

	Набор.Записать(Ложь);

КонецПроцедуры // ЗаполнитьСоответствиеСчетовБУиНУ()

// Выполняет начальное заполнение справочника "ОснованияУвольнения"
// данными по умолчанию
Процедура ЗаполнитьОснованияУвольнения()
	
	//ОснованияУвольнения = Справочники.ОснованияУвольненияИзОрганизации;
	//ЭлементСпр = ОснованияУвольнения.НайтиПоНаименованию("п. 1 ст. 77 ТК. Соглашение сторон.");
	//Если ЭлементСпр.Пустая() Тогда
	//	ЭлементСпр = ОснованияУвольнения.СоздатьЭлемент();
	//	ЭлементСпр.Наименование = "п. 1 ст. 77 ТК. Соглашение сторон.";
	//	ЭлементСпр.Записать();
	//КонецЕсли;
	//ЭлементСпр = ОснованияУвольнения.НайтиПоНаименованию("п. 2 ст. 77 ТК. Истечение срока трудового договора.");
	//Если ЭлементСпр.Пустая() Тогда
	//	ЭлементСпр = ОснованияУвольнения.СоздатьЭлемент();
	//	ЭлементСпр.Наименование = "п. 2 ст. 77 ТК. Истечение срока трудового договора.";
	//	ЭлементСпр.Записать();
	//КонецЕсли;
	//ЭлементСпр = ОснованияУвольнения.НайтиПоНаименованию("п. 3 ст. 77 ТК. Расторжение трудового договора по инициативе работника.");
	//Если ЭлементСпр.Пустая() Тогда
	//	ЭлементСпр = ОснованияУвольнения.СоздатьЭлемент();
	//	ЭлементСпр.Наименование = "п. 3 ст. 77 ТК. Расторжение трудового договора по инициативе работника.";
	//	ЭлементСпр.Записать();
	//КонецЕсли;
	
	//РБ
	ОснованияУвольнения = Справочники.ОснованияУвольненияИзОрганизации;
	ЭлементСпр = ОснованияУвольнения.НайтиПоНаименованию("п. 1 ст. 35 ТК. Соглашение сторон.");
	Если ЭлементСпр.Пустая() Тогда
		ЭлементСпр = ОснованияУвольнения.СоздатьЭлемент();
		ЭлементСпр.Наименование = "п. 1 ст. 35 ТК. Соглашение сторон.";
		ЭлементСпр.Записать();
	КонецЕсли;
	ЭлементСпр = ОснованияУвольнения.НайтиПоНаименованию("п. 2 ст. 35 ТК. Истечение срока трудового договора.");
	Если ЭлементСпр.Пустая() Тогда
		ЭлементСпр = ОснованияУвольнения.СоздатьЭлемент();
		ЭлементСпр.Наименование = "п. 2 ст. 35 ТК. Истечение срока трудового договора.";
		ЭлементСпр.Записать();
	КонецЕсли;
	ЭлементСпр = ОснованияУвольнения.НайтиПоНаименованию("п. 3 ст. 35 ТК. Расторжение трудового договора по инициативе работника.");
	Если ЭлементСпр.Пустая() Тогда
		ЭлементСпр = ОснованияУвольнения.СоздатьЭлемент();
		ЭлементСпр.Наименование = "п. 3 ст. 35 ТК. Расторжение трудового договора по инициативе работника.";
		ЭлементСпр.Записать();
	КонецЕсли;
КонецПроцедуры

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьПВХ(Код, Наименование, ТипЗначения) Экспорт

	Ссылка = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		ПВХ = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
		Ссылка = ПВХ.Ссылка;
	Иначе 
		ПВХ = Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	ПВХ.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица;
	ПВХ.Наименование = Наименование;
	ПВХ.Код = Код;
	ПВХ.ТипЗначения = ТипЗначения;
	ПВХ.Записать();


	Возврат Ссылка;

КонецФункции // НайтиСоздатьПВХ()

// Процедура записывает переданный план видов характеристик и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки информационной базы.
//
// Параметры:
//  ПланВидовХарактеристикОбъект - объект, который требуется записать.
//
Процедура ЗаписатьПланВидовХарактеристикОбъект(ПланВидовХарактеристикОбъект) Экспорт

	Если НЕ ПланВидовХарактеристикОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если ПланВидовХарактеристикОбъект.ЭтоНовый() Тогда
		СтрСообщения1 = "Создан";
	Иначе
		СтрСообщения1 = "Обработан";
	КонецЕсли;

	Если ПланВидовХарактеристикОбъект.ЭтоГруппа Тогда
		СтрСообщения2 = "а группа";
	Иначе
		СтрСообщения2 = " элемент";
	КонецЕсли;

	СтрСообщения2 = СтрСообщения2 + " плана видов характеристик """ + ПланВидовХарактеристикОбъект.Метаданные().Синоним + """: ";
	СтрСообщения3 = "наименование """ + ПланВидовХарактеристикОбъект.Наименование + """";

	Попытка
		ПланВидовХарактеристикОбъект.Записать();
		Сообщить(СтрСообщения1 + СтрСообщения2 + "код """ + ПланВидовХарактеристикОбъект.Код + """, " + СтрСообщения3, СтатусСообщения.Обычное);
	Исключение
		Сообщить("Не записан"  + СтрСообщения2 + СтрСообщения3 +
		         Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;

КонецПроцедуры

// Выполняет первоначальное заполнение справочника РегламентированныеОтчеты
// списком регламентированных отчетов. 
//  Процедура должна вызываться при первоначальном заполнении пустой 
// информационной базы. Предполагается, что перед запуском процедуры справочник
// РегламентированныеОтчеты - пустой.
//
Процедура ЗаполнитьСписокРегламентированныхОтчетов(ПервоеЗаполнение = Истина, ИзменятьПризнакИспользованияВнешнегоОтчета = Истина)

	Перем ДеревоОтчетов;
	Перем ОбработкаОбновлениеОтчетов;

	Если ИзменятьПризнакИспользованияВнешнегоОтчета И НЕ ПервоеЗаполнение Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РегламентированныеОтчеты.Ссылка КАК Ссылка,
		|	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета
		|ИЗ
		|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		|ГДЕ
		|	РегламентированныеОтчеты.ВнешнийОтчетИспользовать";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Метаданные.Документы.Найти(Выборка.ИсточникОтчета) <> Неопределено ИЛИ	Метаданные.Отчеты.Найти(Выборка.ИсточникОтчета) <> Неопределено Тогда
				ОбъектРеглОтчет = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектРеглОтчет.ВнешнийОтчетИспользовать = Ложь;
				ОбъектРеглОтчет.Записать();
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	// Заполнением списка отчетов выполняется путем вызова экспортных процедур
	// основной формы обработки ОбновлениеРегламентированнойОтчетности.
	ОбработкаОбновлениеОтчетов = Обработки.ОбновлениеРегламентированнойОтчетности.Создать().ПолучитьФорму("ОсновнаяФорма");
	
	// Получаем список регламентированных отчетов в виде дерева.
	ДеревоОтчетов = ОбработкаОбновлениеОтчетов.ПолучитьСписокОтчетов();

	Если ДеревоОтчетов.Строки.Количество() = 0 Тогда
		// нет обновлений
		Возврат;
	КонецЕсли;
	
	// Заполняем списко отчетов.
	ОбработкаОбновлениеОтчетов.ЗаполнитьСписокОтчетов(ДеревоОтчетов, ПервоеЗаполнение);

КонецПроцедуры // ЗаполнитьСписокРегламентированныхОтчетов()

// Процедура изменяет ставшие неуникальными коды предопределенных элементов
//
Процедура УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов)
	
	МассивЭлементов = Новый Массив;
	
	Пока СписокПредопределенныхЭлементов.Количество()>0 Цикл
		
		МассивЭлементов.Очистить();
		КолвоЭлементовВСписке = СписокПредопределенныхЭлементов.Количество();
		ТекушийТипЗначения = ТипЗнч(СписокПредопределенныхЭлементов [КолвоЭлементовВСписке-1].Значение);
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекушийТипЗначения);		
		Если Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = Справочники[МетаданныеТипа.Имя];
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = ПланыВидовХарактеристик[МетаданныеТипа.Имя];
		ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = ПланыСчетов[МетаданныеТипа.Имя];	
		ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = ПланыВидовРасчета[МетаданныеТипа.Имя];
		Иначе
			МенеджерТекущегоТипа = Неопределено;
		КонецЕсли;
		
		Для ОбратныйИндекс = 1 По КолвоЭлементовВСписке Цикл
			ЭлементСписка = СписокПредопределенныхЭлементов [КолвоЭлементовВСписке - ОбратныйИндекс];
			
			Если ТипЗнч(ЭлементСписка.Значение) = ТекушийТипЗначения Тогда				
				ЕСли МетаданныеТипа.ДлинаКода <> 0 И МенеджерТекущегоТипа <> Неопределено Тогда
					МассивЭлементов.Добавить(ЭлементСписка.Значение);
				КонецЕсли;				
				СписокПредопределенныхЭлементов.Удалить(ЭлементСписка);				
			КонецЕсли;			
		КонецЦикла;
		
		Если МассивЭлементов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Предопределенные.Ссылка
		|ИЗ
		|	" + МетаданныеТипа.ПолноеИмя() + " КАК Предопределенные
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + МетаданныеТипа.ПолноеИмя() + " КАК Пользовательские
		|		ПО Предопределенные.Код = Пользовательские.Код
		|
		|ГДЕ
		|	Предопределенные.Ссылка В(&СписокЭлементов)
		|    И Пользовательские.Ссылка НЕ В(&СписокЭлементов)";
		
		Запрос.УстановитьПараметр("СписокЭлементов", МассивЭлементов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();			
			Объект.УстановитьНовыйКод();			
			Если МенеджерТекущегоТипа.НайтиПоКоду(Объект.Код).Пустая() Тогда
				
				// Поскольку меняем только код элемента, проверку корректности заполнения
				// дополнительных реквизитов объекта не выполняем.
				Объект.ОбменДанными.Загрузка = Истина;
				
				Объект.Записать();
			КонецЕсли;			
		КонецЦикла;	
		
	КонецЦикла;


КонецПроцедуры

Процедура ОбновитьНаименованияСоставляющихСреднегоЗаработка()

	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Годовые премии, полностью учитываемые в ср. заработке (начисленные пропорц. отраб. времени)";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Годовые премии, полностью учитываемые для б/л (начисленные пропорц. отраб. времени) до 1.1.2007";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Годовые премии, полностью учитываемые для б/л и пособий по уходу (начислено пропорц. отраб. времени)";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Годовые премии, частично учитываемые в ср. заработке (начисленные фиксированной суммой)";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Годовые премии, частично учитываемые для б/л (начисленные фиксированной суммой) до 1.1.2007";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Годовые премии, частично учитываемые для б/л и пособий по уходу (начисленные фиксированной суммой)";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Основной заработок";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Основной заработок для расчета б/л до 1.1.2007";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Основной заработок для расчета б/л и пособий по уходу";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Премии, полностью учитываемые в ср. заработке (начисленные пропорц. отраб. времени)";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Премии, полностью учитываемые для б/л (начисленные пропорц. отраб. времени) до 1.1.2007";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Премии, полностью учитываемые для б/л и пособий по уходу";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Премии, частично учитываемые в ср. заработке (начисленные фиксированной суммой)";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Премии, частично учитываемые для б/л (начисленные фиксированной суммой) до 1.1.2007";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Премии, частично учитываемые для б/л и пособий по уходу (начисленные фиксированной суммой)";
	ПВРОбъект.Записать();

КонецПроцедуры

// Начальное заполнение справочника "КлассификаторСтранМира".
//
Процедура НачальноеЗаполнениеСправочникаКлассификаторСтранМира()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КлассификаторСтранМира.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.БЕЛАРУСЬ)
	|			ТОГДА ""Республика Беларусь""
	|		КОГДА КлассификаторСтранМира.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ЛицоБезГражданства)
	|			ТОГДА ""Лицо без гражданства""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НаименованиеПолное,
	|	КлассификаторСтранМира.Ссылка
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	|ГДЕ
	|	КлассификаторСтранМира.Ссылка В (ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.БЕЛАРУСЬ), ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ЛицоБезГражданства))
	|	И КлассификаторСтранМира.НаименованиеПолное = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// Заполнение полного наименования предопределенного элемента.
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.НаименованиеПолное = Выборка.НаименованиеПолное;
		СправочникОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры // НачальноеЗаполнениеСправочникаКлассификаторСтранМира()

// Функция создает элемент справочника КатегорииРасчетов, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьКатегорию(Код, Наименование)

	Ссылка = Справочники.КатегорииРасчетов.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.КатегорииРасчетов.СоздатьЭлемент();

		СправочникОбъект.Код          = Код;
		СправочникОбъект.Наименование = Наименование;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;

	КонецЕсли;

	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

// Получает по ссылке объект данных и обновляет его свойства по переданной структуре данных
//
// Параметры
//  СтруктураПараметров - строка из выборки запроса, либо иная структура
//						обязательно содержит поле Ссылка, а также все
//                      новые значения реквизитов объекта (без табличных частей) 
//
Процедура ОбновитьОбъектПоСтруктуре(СтруктураПараметров)

	Объект = СтруктураПараметров.Ссылка.ПолучитьОбъект();	
	Объект.ОбменДанными.Загрузка = Истина;
	ЗаполнитьЗначенияСвойств(Объект,СтруктураПараметров);
	Попытка
		Объект.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать: " + Строка(СтруктураПараметров.Ссылка));
	КонецПопытки;

КонецПроцедуры // ОбновитьОбъектПоСтруктуре()

Процедура ЗаполнитьКатегориюЗастрахованногоЛица(Ссылка,КодИМНС,КодПФР)
	
	Объект = Ссылка.ПолучитьОбъект();
	Объект.КодИМНС = КодИМНС;
	Объект.КодПФР = КодПФР;
	Объект.Записать();
КонецПроцедуры

Процедура ЗаполнитьКатегории()
	
	ЗаполнитьКатегориюЗастрахованногоЛица(Справочники.КатегорииЗастрахованныхЛиц.ТрудовойДоговор,"5","01");
	ЗаполнитьКатегориюЗастрахованногоЛица(Справочники.КатегорииЗастрахованныхЛиц.ДоговорПодряда,"5","03");
	ЗаполнитьКатегориюЗастрахованногоЛица(Справочники.КатегорииЗастрахованныхЛиц.Уволенный,"5","06");

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.3

// Отбор по работнику в журнале документов по выплате зарплаты 
//  осуществляется при заполненной графе "Работники",
//  заполнение которой зависит от заполненности табличной части "Работники" документов
//  Процедура осуществляет ее заполнение у старых документов
//
// Параметры
//  нет
//
Процедура ДляЖурналаКассовыхДокументов()

	Запрос = Новый Запрос;
	
	// ДепонированиеОрганизаций
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыСДепонентамиОрганизаций.Регистратор КАК Регистратор,
	|	ВзаиморасчетыСДепонентамиОрганизаций.Физлицо КАК Физлицо,
	|	ВзаиморасчетыСДепонентамиОрганизаций.Сумма,
	|	ВзаиморасчетыСДепонентамиОрганизаций.Физлицо.Наименование КАК ФизлицоНаименование
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций КАК ВзаиморасчетыСДепонентамиОрганизаций
	|ГДЕ
	|	ВзаиморасчетыСДепонентамиОрганизаций.Регистратор ССЫЛКА Документ.ДепонированиеОрганизаций
	|	И ВзаиморасчетыСДепонентамиОрганизаций.Регистратор.КраткийСоставДокумента = """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	ФизлицоНаименование";
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("Регистратор") Цикл
		ДокументОбъект = ВыборкаРегистраторов.Регистратор.ПолучитьОбъект();
		Пока ВыборкаРегистраторов.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДокументОбъект.Работники.Добавить(),ВыборкаРегистраторов)
		КонецЦикла;
		ДокументОбъект.Записать();
	КонецЦикла;
		
	// ПлатежноеПоручениеИсходящее
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлатежноеПоручениеИсходящее.Ссылка КАК Регистратор,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо.Наименование КАК ФизлицоНаименование,
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|		ПО ПлатежноеПоручениеИсходящее.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Ссылка.Проведен
	|	И ПлатежноеПоручениеИсходящее.Ссылка.КраткийСоставДокумента = """"
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлатежноеПоручениеИсходящее.Ссылка,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	ФизлицоНаименование";
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("Регистратор") Цикл
		ДокументОбъект = ВыборкаРегистраторов.Регистратор.ПолучитьОбъект();
		Пока ВыборкаРегистраторов.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДокументОбъект.Работники.Добавить(),ВыборкаРегистраторов)
		КонецЦикла;
		ДокументОбъект.Записать();
	КонецЦикла;
	
	// ПлатежныйОрдерСписаниеДенежныхСредств
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлатежныйОрдерСписаниеДенежныхСредств.Ссылка
	|ИЗ
	|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств КАК ПлатежныйОрдерСписаниеДенежныхСредств
	|ГДЕ
	|	ПлатежныйОрдерСписаниеДенежныхСредств.КраткийСоставДокумента = """"";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Записать();
	КонецЦикла;
	
	// РасходныйКассовыйОрдер
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыСРаботниками.Регистратор КАК Регистратор,
	|	ВзаиморасчетыСРаботниками.Физлицо КАК Физлицо,
	|	ВзаиморасчетыСРаботниками.Физлицо.Наименование КАК ФизлицоНаименование,
	|	СУММА(ВзаиморасчетыСРаботниками.СуммаУпр) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботниками КАК ВзаиморасчетыСРаботниками
	|ГДЕ
	|	ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|	И ВзаиморасчетыСРаботниками.Регистратор.КраткийСоставДокумента = """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСРаботниками.Регистратор,
	|	ВзаиморасчетыСРаботниками.Физлицо,
	|	ВзаиморасчетыСРаботниками.Физлицо.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	ФизлицоНаименование";
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("Регистратор") Цикл
		ДокументОбъект = ВыборкаРегистраторов.Регистратор.ПолучитьОбъект();
		Пока ВыборкаРегистраторов.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДокументОбъект.Работники.Добавить(),ВыборкаРегистраторов)
		КонецЦикла;
		ДокументОбъект.Записать();
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыплатаЗаработнойПлаты.Ссылка КАК Регистратор,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо.Наименование КАК ФизлицоНаименование,
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК ВыплатаЗаработнойПлаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|		ПО ВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|			И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|			И РанееВыплаченныеСуммы.Регистратор <> ВыплатаЗаработнойПлаты.Ссылка
	|ГДЕ
	|	ВыплатаЗаработнойПлаты.Ссылка.Проведен
	|	И ВыплатаЗаработнойПлаты.Ссылка.ОтражатьВБухгалтерскомУчете
	|	И ВыплатаЗаработнойПлаты.Ссылка.ВидОперации = &ВыплатаЗаработнойПлатыПоВедомостям
	|	И ВыплатаЗаработнойПлаты.Ссылка.КраткийСоставДокумента = """"
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты <> 0
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Выплачено
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыплатаЗаработнойПлаты.Ссылка,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	ФизлицоНаименование";
	
	Запрос.УстановитьПараметр("Выплачено", Перечисления.ВыплаченностьЗарплаты.Выплачено);
	Запрос.УстановитьПараметр("ВыплатаЗаработнойПлатыПоВедомостям", Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям);
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("Регистратор") Цикл
		ДокументОбъект = ВыборкаРегистраторов.Регистратор.ПолучитьОбъект();
		Пока ВыборкаРегистраторов.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДокументОбъект.Работники.Добавить(),ВыборкаРегистраторов)
		КонецЦикла;
		ДокументОбъект.Записать();
	КонецЦикла;
	
	// СписаниеДепонентовВДоходыОрганизаций
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеДепонентовВДоходыОрганизаций.Ссылка
	|ИЗ
	|	Документ.СписаниеДепонентовВДоходыОрганизаций КАК СписаниеДепонентовВДоходыОрганизаций
	|ГДЕ
	|	СписаниеДепонентовВДоходыОрганизаций.КраткийСоставДокумента = """"";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Записать();
	КонецЦикла;

КонецПроцедуры // ДляЖурналаКассовыхДокументов()

// Процедура заносит в регистр сведений ВнешниеКомпоненты все компоненты,
// которые указаны в регистре как макеты
//
Процедура ЗаполнитьСписокВнешнихКомпонент()
	
	Для Каждого Макет Из Метаданные.РегистрыСведений.ВнешниеКомпоненты.Макеты Цикл
		
		ВнешняяКомпонента = РегистрыСведений.ВнешниеКомпоненты.ПолучитьМакет(Макет.Имя);
		
		ИмяФайла = КаталогВременныхФайлов() + Макет.Имя + ".dll";
		УниверсальныеМеханизмы.ДобавлениеВнешнейКомпоненты(ИмяФайла, ВнешняяКомпонента);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокВнешнихКомпонент()

// Процедура заполняет должность и табельный номер в регистре сведений "Работники"
// для всех записей, у которых ПричинаИзмененияСостояния = "Увольнение"
//
Процедура ЗаполнитьДолжностьВРегистреРаботники()

	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистр.Регистратор КАК Регистратор,
	|	Регистр.НомерСтроки КАК НомерСтроки,
	|	РегистрПрежниеДанные.Должность КАК Должность,
	|	Регистр.Период,
	|	Регистр.Активность,
	|	Регистр.ФизЛицо,
	|	Регистр.Подразделение,
	|	Регистр.ЗанимаемыхСтавок,
	|	Регистр.ГрафикРаботы,
	|	Регистр.УдалитьДолжность,
	|	Регистр.УдалитьТабельныйНомер,
	|	Регистр.ПричинаИзмененияСостояния,
	|	Регистр.ПричинаУвольнения
	|ИЗ
	|	РегистрСведений.Работники КАК Регистр
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Регистр.Регистратор КАК Регистратор,
	|			Регистр.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РегистрПрежниеДанные.Период) КАК ДатаДвижения
	|		ИЗ
	|			РегистрСведений.Работники КАК Регистр
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК РегистрПрежниеДанные
	|				ПО Регистр.ФизЛицо = РегистрПрежниеДанные.ФизЛицо
	|					И Регистр.Период > РегистрПрежниеДанные.Период
	|		ГДЕ
	|			Регистр.Регистратор ССЫЛКА Документ.Увольнение
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Регистр.Регистратор,
	|			Регистр.НомерСтроки) КАК ДатыПоследнихДвижений
	|		ПО Регистр.Регистратор = ДатыПоследнихДвижений.Регистратор
	|			И Регистр.НомерСтроки = ДатыПоследнихДвижений.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК РегистрПрежниеДанные
	|		ПО ДатыПоследнихДвижений.ДатаДвижения = РегистрПрежниеДанные.Период
	|			И Регистр.ФизЛицо = РегистрПрежниеДанные.ФизЛицо
	|ГДЕ
	|	Регистр.Регистратор ССЫЛКА Документ.Увольнение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	ВыборкаПоРегистратору = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.Работники.СоздатьНаборЗаписей();
	
	Пока ВыборкаПоРегистратору.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоРегистратору.Регистратор);
		
		Пока ВыборкаПоРегистратору.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоРегистратору);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДолжностьИТабельныйНомерВРегистреРаботники()

// Процедура заполняет должность и табельный номер в регистре сведений "Работники"
// для всех записей, у которых ПричинаИзмененияСостояния = "Увольнение"
//
Процедура ЗаполнитьДолжностьВРегистреРаботникиОрганизации()

	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистр.Регистратор КАК Регистратор,
	|	Регистр.НомерСтроки КАК НомерСтроки,
	|	РегистрПрежниеДанные.Должность КАК Должность,
	|	Регистр.Период,
	|	Регистр.Активность,
	|	Регистр.Сотрудник,
	|	Регистр.Организация,
	|	Регистр.УдалитьФизлицо,
	|	Регистр.УдалитьПриказ,
	|	Регистр.ЗанимаемыхСтавок,
	|	Регистр.ПодразделениеОрганизации,
	|	РегистрПрежниеДанные.ГрафикРаботы,
	|	Регистр.ПериодЗавершения,
	|	Регистр.ЗанимаемыхСтавокЗавершения,
	|	Регистр.ПодразделениеОрганизацииЗавершения,
	|	Регистр.ДолжностьЗавершения,
	|	Регистр.ГрафикРаботыЗавершения,
	|	Регистр.ПричинаИзмененияСостоянияЗавершения,
	|	Регистр.ОбособленноеПодразделениеЗавершения,
	|	Регистр.УдалитьТабельныйНомер,
	|	Регистр.ПричинаИзмененияСостояния,
	|	Регистр.ОбособленноеПодразделение
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК Регистр
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Регистр.Регистратор КАК Регистратор,
	|			Регистр.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РегистрПрежниеДанные.Период) КАК ДатаДвижения
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций КАК Регистр
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РегистрПрежниеДанные
	|				ПО Регистр.Сотрудник = РегистрПрежниеДанные.Сотрудник
	|					И Регистр.Период > РегистрПрежниеДанные.Период
	|		ГДЕ
	|			Регистр.Регистратор ССЫЛКА Документ.УвольнениеИзОрганизаций
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Регистр.Регистратор,
	|			Регистр.НомерСтроки) КАК ДатыПоследнихДвижений
	|		ПО Регистр.Регистратор = ДатыПоследнихДвижений.Регистратор
	|			И Регистр.НомерСтроки = ДатыПоследнихДвижений.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РегистрПрежниеДанные
	|		ПО ДатыПоследнихДвижений.ДатаДвижения = РегистрПрежниеДанные.Период
	|			И Регистр.Сотрудник = РегистрПрежниеДанные.Сотрудник
	|ГДЕ
	|	Регистр.Регистратор ССЫЛКА Документ.УвольнениеИзОрганизаций
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	
	НаборЗаписей = РегистрыСведений.РаботникиОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	ВыборкаПоРегистратору = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоРегистратору.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоРегистратору.Регистратор);
		
		Пока ВыборкаПоРегистратору.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоРегистратору);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДолжностьИТабельныйНомерВРегистреРаботникиОрганизации()

// Процедура заполняет графики работы, вид времени в планах ВР "Основные начисления
// Проставляет СпособРегистрацииВремени в документе РегистрацияРазовыхНачисленийРаботниковОрганизаций,
// НевыходыВОрганизациях.
// Устанавливаем реквизит СпособРегистрацииВремени для документа РегистрацияПростоевРаботниковОрганизаций,
// ОплатаПоСреднемуЗаработку.
// Заменяеn значения реквизита СпособыРасчетаОплатыТруда Планов видов расчета
// ОсновныеНачисленияОрганизаций и ДополнительныеНачисленияОрганизаций, на значение перечисления
// без приставки "Удалить...".
//
Процедура ЗаполнитьРеквизитыПоУчетуРабочегоВремени()
	
	
	// Заполняем реквизит "Вид рабочего времени"  в ПВР "Начисления предприятия"
	#Если Клиент Тогда
		Состояние("Заполняется ""Вид рабочего времени "" в плане видов расчета ""Начисления предприятия""");
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УправленческиеНачисления.Ссылка,
	|	ВЫБОР
	|		КОГДА УправленческиеНачисления.Наименование = ""Больничный""
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Болезнь)
	|		КОГДА УправленческиеНачисления.Наименование = ""Отпуск""
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск)
	|		КОГДА УправленческиеНачисления.Наименование = ""Отсутствие по невыясненной причине""
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам)
	|		КОГДА УправленческиеНачисления.Наименование В (""Сдельная оплата"", ""Почасовая оплата"", ""Оклад"", ""Оклад постоянный"")
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
	|	КОНЕЦ КАК ВидУчетаВремени
	|ИЗ
	|	ПланВидовРасчета.УправленческиеНачисления КАК УправленческиеНачисления
	|ГДЕ
	|	УправленческиеНачисления.Наименование В (""Больничный"", ""Отпуск"", ""Отсутствие по невыясненной причине"", ""Сдельная оплата"", ""Почасовая оплата"", ""Оклад"", ""Оклад постоянный"")
	|	И УправленческиеНачисления.ВидУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеПредприятияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеПредприятияОбъект.ВидУчетаРабочегоВремени = Выборка.ВидУчетаВремени;
		НачислениеПредприятияОбъект.Записать();
	КонецЦикла;
	
	// Заполняем ВидВремени в Плане видов расчета "ОсновныеНачисления".
	#Если Клиент Тогда
		Состояние("Заполняется ""Вид времени "" в плане видов расчета ""Основные начисления организации""");
	#КонецЕсли
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВидВремениПустаяСсылка",	Перечисления.ВидыВремени.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидВремениДополнительное",Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ЕСТЬNULL(ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени.УдалитьВидВремени, &ВидВремениДополнительное) КАК ВидВремени
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.ВидВремени = &ВидВремениПустаяСсылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОсновныеНачисленияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОсновныеНачисленияОбъект.ОбменДанными.Загрузка = Истина;
		ОсновныеНачисленияОбъект.ВидВремени = Выборка.ВидВремени;
		ОсновныеНачисленияОбъект.Записать();
	КонецЦикла;
	
	КлассификаторВЧ = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы.ОбозначениеВТабелеУчетаРабочегоВремени;
	Если КлассификаторВЧ.Предопределенный Тогда
		КлассификаторВЧ = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка()
	КонецЕсли;
	
	КлассификаторНЧ = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы.ОбозначениеВТабелеУчетаРабочегоВремени;
	Если КлассификаторНЧ.Предопределенный Тогда
		КлассификаторНЧ = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка()
	КонецЕсли;
	
	КлассификаторСВЧ = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаСверхурочных.ОбозначениеВТабелеУчетаРабочегоВремени;
	Если КлассификаторСВЧ.Предопределенный Тогда
		КлассификаторСВЧ = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();
	КонецЕсли;
	
	КлассификаторПраздничные = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаПраздничныеИВыходные.ОбозначениеВТабелеУчетаРабочегоВремени;
	Если КлассификаторПраздничные.Предопределенный Тогда
		КлассификаторПраздничные = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();
	КонецЕсли;
		
	НовыйКлассификаторНЧ = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы;
	НовыйКлассификаторВЧ = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы;
	НовыйКлассификаторСВЧ = Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные;
	НовыйКлассификаторПраздничные = Справочники.КлассификаторИспользованияРабочегоВремени.Праздники;
	
	ОписатьКодИспользованияРабочегоВремени(НовыйКлассификаторНЧ.ПолучитьОбъект(),"Н ","02", "Ночные часы", "Продолжительность работы в ночное время",Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Истина);
	ОписатьКодИспользованияРабочегоВремени(НовыйКлассификаторВЧ.ПолучитьОбъект(),"ВЧ","41", "Вечернее часы", "Продолжительность работы в вечернее время",Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Истина);
	ОписатьКодИспользованияРабочегоВремени(НовыйКлассификаторСВЧ.ПолучитьОбъект(),"С ","04", "Сверхурочно", "Продолжительность сверхурочной работы",Перечисления.ВидыВремени.ОтработанноеСверхНормы, Истина);
	ОписатьКодИспользованияРабочегоВремени(НовыйКлассификаторПраздничные.ПолучитьОбъект(), "РВ", "03", "Праздники", "Продолжительность работы в выходные и нерабочие, праздничные дни", Перечисления.ВидыВремени.ОтработанноеСверхНормы, Истина);
	
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы, Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы, Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Перечисления.КатегорииРасчетов.Первичное,НовыйКлассификаторВЧ,Ложь,Ложь,Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию,Справочники.ДоходыЕСН.ОблагаетсяПолностью, ,Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ДоплатаЗаВечерниеНочные,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы, Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы, Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Перечисления.КатегорииРасчетов.Первичное,НовыйКлассификаторНЧ,Ложь,Ложь,Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию,Справочники.ДоходыЕСН.ОблагаетсяПолностью, , Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ДоплатаЗаВечерниеНочные,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаСверхурочных, Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой, Перечисления.ВидыВремени.ОтработанноеСверхНормы, Перечисления.КатегорииРасчетов.Первичное, НовыйКлассификаторСВЧ,	Истина, Ложь,   Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию, Справочники.ДоходыЕСН.ОблагаетсяПолностью, , Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ДоплатаЗаСверхурочные,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПраздничныхИВыходных, Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой, Перечисления.ВидыВремени.ОтработанноеСверхНормы, Перечисления.КатегорииРасчетов.Первичное, НовыйКлассификаторПраздничные, Истина, Ложь, Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию, Справочники.ДоходыЕСН.ОблагаетсяПолностью, , Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ДоплатаЗаСверхурочные,,,Ложь);
	
	МассивЗаменяемыхЭлементов = Новый Массив;
	Если Не КлассификаторНЧ.Пустая() и Не КлассификаторНЧ.ПометкаУдаления Тогда
		МассивЗаменяемыхЭлементов.Добавить(КлассификаторНЧ);
	КонецЕсли;
	Если Не КлассификаторВЧ.Пустая() и Не КлассификаторВЧ.ПометкаУдаления Тогда
		МассивЗаменяемыхЭлементов.Добавить(КлассификаторВЧ);
	КонецЕсли;
	
	Если Не КлассификаторСВЧ.Пустая() И НЕ КлассификаторСВЧ.ПометкаУдаления Тогда
		МассивЗаменяемыхЭлементов.Добавить(КлассификаторСВЧ);
	КонецЕсли;
	
	Если Не КлассификаторПраздничные.Пустая() И НЕ КлассификаторПраздничные.ПометкаУдаления Тогда
		МассивЗаменяемыхЭлементов.Добавить(КлассификаторПраздничные);
	КонецЕсли;
	
	Если МассивЗаменяемыхЭлементов.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("ЗаменяемыеЭлементы",	МассивЗаменяемыхЭлементов);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизаций.Ссылка
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени В(&ЗаменяемыеЭлементы)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОсновныеНачисленияОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ОсновныеНачисленияОбъект.ОбозначениеВТабелеУчетаРабочегоВремени = КлассификаторНЧ Тогда
				ОсновныеНачисленияОбъект.ОбозначениеВТабелеУчетаРабочегоВремени = НовыйКлассификаторНЧ;
			ИначеЕсли ОсновныеНачисленияОбъект.ОбозначениеВТабелеУчетаРабочегоВремени = КлассификаторВЧ Тогда
				ОсновныеНачисленияОбъект.ОбозначениеВТабелеУчетаРабочегоВремени = НовыйКлассификаторВЧ;
			ИначеЕсли ОсновныеНачисленияОбъект.ОбозначениеВТабелеУчетаРабочегоВремени = КлассификаторСВЧ Тогда
				ОсновныеНачисленияОбъект.ОбозначениеВТабелеУчетаРабочегоВремени = НовыйКлассификаторСВЧ;
			ИначеЕсли ОсновныеНачисленияОбъект.ОбозначениеВТабелеУчетаРабочегоВремени = КлассификаторПраздничные Тогда
				ОсновныеНачисленияОбъект.ОбозначениеВТабелеУчетаРабочегоВремени = НовыйКлассификаторПраздничные;
			КонецЕсли;
			ОсновныеНачисленияОбъект.Записать();
		КонецЦикла;
		
		НаборЗаписей = РегистрыНакопления.РабочееВремяРаботниковОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		
		// Изменения в документе
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КорректировкаИспользованияРаботникамиРабочегоВремениОтработанноеВремя.Ссылка
		|ИЗ
		|	Документ.УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени.ОтработанноеВремя КАК КорректировкаИспользованияРаботникамиРабочегоВремениОтработанноеВремя
		|ГДЕ
		|	КорректировкаИспользованияРаботникамиРабочегоВремениОтработанноеВремя.ВидИспользованияРабочегоВремени В(&ЗаменяемыеЭлементы)
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаИспользованияРаботникамиРабочегоВремениОтработанноеВремя.Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокОбъект.ОбменДанными.Загрузка = Истина;
			
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
			НаборЗаписей.Прочитать();
			
			Для Каждого СтрокаОтработанногоВремени Из ДокОбъект.ОтработанноеВремя Цикл
				Если СтрокаОтработанногоВремени.ВидИспользованияРабочегоВремени = КлассификаторНЧ Тогда
					СтрокаОтработанногоВремени.ВидИспользованияРабочегоВремени = НовыйКлассификаторНЧ;
					ОбъектИзменен = Истина;
				ИначеЕсли СтрокаОтработанногоВремени.ВидИспользованияРабочегоВремени = КлассификаторВЧ Тогда
					СтрокаОтработанногоВремени.ВидИспользованияРабочегоВремени = НовыйКлассификаторВЧ;
					ОбъектИзменен = Истина;
				ИначеЕсли СтрокаОтработанногоВремени.ВидИспользованияРабочегоВремени = КлассификаторСВЧ Тогда
					СтрокаОтработанногоВремени.ВидИспользованияРабочегоВремени = НовыйКлассификаторСВЧ;
					ОбъектИзменен = Истина;
				ИначеЕсли СтрокаОтработанногоВремени.ВидИспользованияРабочегоВремени = КлассификаторПраздничные Тогда
					СтрокаОтработанногоВремени.ВидИспользованияРабочегоВремени = НовыйКлассификаторПраздничные;
					ОбъектИзменен = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Запись.ВидИспользованияРабочегоВремени = КлассификаторНЧ Тогда
					Запись.ВидИспользованияРабочегоВремени = НовыйКлассификаторНЧ;
				ИначеЕсли Запись.ВидИспользованияРабочегоВремени = КлассификаторВЧ Тогда
					Запись.ВидИспользованияРабочегоВремени = НовыйКлассификаторВЧ;
				ИначеЕсли Запись.ВидИспользованияРабочегоВремени = КлассификаторСВЧ Тогда
					Запись.ВидИспользованияРабочегоВремени = НовыйКлассификаторСВЧ;
				ИначеЕсли Запись.ВидИспользованияРабочегоВремени = КлассификаторПраздничные Тогда
					Запись.ВидИспользованияРабочегоВремени = НовыйКлассификаторПраздничные;
				КонецЕсли;
			КонецЦикла;
			
			ДокОбъект.Записать();
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		Для каждого Ссылка Из МассивЗаменяемыхЭлементов Цикл
			Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние("Заполняются графики работы");
	#КонецЕсли
	
	// Установка значения Реквизита План в Истина в регистре сведений ГрафикиРаботыПоВидамВремени.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Месяц КАК Месяц,
	|	ВЫРАЗИТЬ(ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК Справочник.ГрафикиРаботы).ДлительностьРабочейНедели / 5 КАК УсловнаяПродолжительностьДня
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы
	|	И (НЕ ГрафикиРаботыПоВидамВремени.План)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГрафикРаботы,
	|	Месяц";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	ОбщееКоличествоЗаписей = Выборка.Количество();
	ИндексЗаписи = 0;
	Пока Выборка.СледующийПоЗначениюПоля("ГрафикРаботы") Цикл
		НаборЗаписей.Отбор.ГрафикРаботы.Установить(Выборка.ГрафикРаботы);
		Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
			НаборЗаписей.Отбор.Месяц.Установить(Выборка.Месяц);
			
			ИндексЗаписи = ИндексЗаписи + 1;
			НаборЗаписей.Прочитать();
			
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.План = Истина;
				Запись.ПроизводственныйКалендарьПятидневкаЧасы = Запись.ПроизводственныйКалендарьПятидневка * Выборка.УсловнаяПродолжительностьДня
			КонецЦикла;
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		КонецЦикла;
		#Если Клиент Тогда
			Состояние("Заполняются графики работы " + Строка(Окр(ИндексЗаписи/ОбщееКоличествоЗаписей*100))+"%");
		#КонецЕсли
	КонецЦикла;
	НаборЗаписей = 0;

	// Заполняем табличную часть ПериодыСмены справочника "ГрафикиРаботы".
	Запрос.УстановитьПараметр("Сменный",			Перечисления.ВидыРабочихГрафиков.Сменный);
	Запрос.УстановитьПараметр("ПустойДеньНедели",	Перечисления.ДниНедели.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрафикиРаботы.Ссылка,
	|	ГрафикиРаботы.ПериодыСмены.(
	|		Ссылка,
	|		НомерСтроки,
	|		ВремяНачала,
	|		ВремяОкончания,
	|		ДеньНедели
	|	),
	|	ГрафикиРаботы.ВидГрафика,
	|	ГрафикиРаботы.ПервыйВыходной,
	|	ГрафикиРаботы.ВторойВыходной
	|ИЗ
	|	Справочник.ГрафикиРаботы КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.ВидГрафика <> &Сменный
	|	И ГрафикиРаботы.ПериодыСмены.ДеньНедели = &ПустойДеньНедели";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТаблицаГрафика = Выборка.ПериодыСмены.Выгрузить();
		
		Если Выборка.ВидГрафика = Перечисления.ВидыРабочихГрафиков.Пятидневка Тогда
			МаксимальноеЗначениеЦикла = 4;
		Иначе
			МаксимальноеЗначениеЦикла = 5;
		КонецЕсли;
		ГрафикиРаботыОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ГрафикиРаботыОбъект.ПериодыСмены.Очистить();
		Для ДеньНедели = 0 По МаксимальноеЗначениеЦикла Цикл
			Если(НЕ Выборка.ПервыйВыходной.Пустая() И (ДеньНедели = Перечисления.ДниНедели.Индекс(Выборка.ПервыйВыходной)))
			ИЛИ (НЕ Выборка.ВторойВыходной.Пустая() И (ДеньНедели = Перечисления.ДниНедели.Индекс(Выборка.ВторойВыходной))) Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого СтрокаТаблицыГрафика Из ТаблицаГрафика Цикл
				СтрокаПериодаСмены = ГрафикиРаботыОбъект.ПериодыСмены.Добавить();
				СтрокаПериодаСмены.ВремяНачала = СтрокаТаблицыГрафика.ВремяНачала;
				СтрокаПериодаСмены.ВремяОкончания = СтрокаТаблицыГрафика.ВремяОкончания;
				СтрокаПериодаСмены.ДеньНедели = Перечисления.ДниНедели[ДеньНедели];
			КонецЦикла;
		КонецЦикла;
		ГрафикиРаботыОбъект.ОбменДанными.Загрузка = Истина;
		ГрафикиРаботыОбъект.Записать();
	КонецЦикла;
	
	#Если Клиент Тогда
		Состояние("Устанавливается значение реквизита Способ регистрации времени");
	#КонецЕсли
	
	СпособРегистрацииВремениРегистрацияДляЦелойСмены = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
	СпособРегистрацииВремениРегистрацияДляЧастиСмены = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены;
	
	// Проставляем СпособРегистрацииВремени в документе РегистрацияРазовыхНачисленийРаботниковОрганизаций.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрацияРазовыхНачисленийРаботниковОрганизаций.Ссылка
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций КАК РегистрацияРазовыхНачисленийРаботниковОрганизаций
	|ГДЕ
	|	РегистрацияРазовыхНачисленийРаботниковОрганизаций.СпособРегистрацииВремени = ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.ПустаяСсылка)";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		РегистрацияРазовыхНачисленийОбъект = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
		РегистрацияРазовыхНачисленийОбъект.ОбменДанными.Загрузка = Истина;
		РегистрацияРазовыхНачисленийОбъект.СпособРегистрацииВремени = СпособРегистрацииВремениРегистрацияДляЦелойСмены;
		РегистрацияРазовыхНачисленийОбъект.Записать();
	КонецЦикла;
	
	// Проставляем СпособРегистрацииВремени в документе НевыходыВОрганизациях
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НевыходыВОрганизациях.Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НевыходыВОрганизацияхНачисления.ВнутрисменныхНевыходов, 0) <> 0
	|				И ЕСТЬNULL(НевыходыВОрганизацияхНачисления.ЦелосменныхНевыходов, 0) <> 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.ПустаяСсылка)
	|		КОГДА ЕСТЬNULL(НевыходыВОрганизацияхНачисления.ВнутрисменныхНевыходов, 0) = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены)
	|	КОНЕЦ КАК СпособРегистрацииВремени
	|ИЗ
	|	Документ.НевыходыВОрганизациях КАК НевыходыВОрганизациях
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			НевыходыВОрганизацияхНачисления.Ссылка КАК Ссылка,
	|			СУММА(ВЫБОР
	|					КОГДА НевыходыВОрганизацияхНачисления.ОплачиватьЧасов <> 0
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ВнутрисменныхНевыходов,
	|			СУММА(ВЫБОР
	|					КОГДА НевыходыВОрганизацияхНачисления.ОплачиватьЧасов = 0
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЦелосменныхНевыходов
	|		ИЗ
	|			Документ.НевыходыВОрганизациях.Начисления КАК НевыходыВОрганизацияхНачисления
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НевыходыВОрганизацияхНачисления.Ссылка) КАК НевыходыВОрганизацияхНачисления
	|		ПО НевыходыВОрганизациях.Ссылка = НевыходыВОрганизацияхНачисления.Ссылка
	|ГДЕ
	|	НевыходыВОрганизациях.СпособРегистрацииВремени = ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.ПустаяСсылка)";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НевыходыВОрганизацияхНачисления.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ ВТСписокРегистраторов
	|ИЗ
	|	Документ.НевыходыВОрганизациях.Начисления КАК НевыходыВОрганизацияхНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	НевыходыВОрганизацияхНачисления.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА НевыходыВОрганизацияхНачисления.ОплачиватьЧасов <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) <> 0 И
	|	СУММА(ВЫБОР
	|			КОГДА НевыходыВОрганизацияхНачисления.ОплачиватьЧасов = 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) <> 0";
	Запрос.Выполнить();
	РегистраторыТекст = "ВЫБРАТЬ Регистратор ИЗ ВТСписокРегистраторов";
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации,
	|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Регистратор,
	|	ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки КАК НомерСтроки,
	|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец,
	|	ОсновныеНачисленияРаботниковОрганизаций.БазовыйПериодНачало,
	|	ОсновныеНачисленияРаботниковОрганизаций.БазовыйПериодКонец,
	|	ОсновныеНачисленияРаботниковОрганизаций.Активность,
	|	ОсновныеНачисленияРаботниковОрганизаций.Сторно,
	|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник,
	|	ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо,
	|	ОсновныеНачисленияРаботниковОрганизаций.Организация,
	|	ОсновныеНачисленияРаботниковОрганизаций.УдалитьПриказ,
	|	ОсновныеНачисленияРаботниковОрганизаций.Результат,
	|	ОсновныеНачисленияРаботниковОрганизаций.ОтработаноДней,
	|	ОсновныеНачисленияРаботниковОрганизаций.ОтработаноЧасов,
	|	ОсновныеНачисленияРаботниковОрганизаций.ОтработаноДнейПоПятидневке,
	|	ОсновныеНачисленияРаботниковОрганизаций.НормаДней,
	|	ОсновныеНачисленияРаботниковОрганизаций.НормаЧасов,
	|	ОсновныеНачисленияРаботниковОрганизаций.НормаДнейПоПятидневке,
	|	ОсновныеНачисленияРаботниковОрганизаций.ОплаченоДнейЧасов,
	|	ОсновныеНачисленияРаботниковОрганизаций.ОтработаноЧасовПоПятидневке,
	|	ОсновныеНачисленияРаботниковОрганизаций.НормаЧасовПоПятидневке,
	|	ОсновныеНачисленияРаботниковОрганизаций.ГрафикРаботы,
	|	ОсновныеНачисленияРаботниковОрганизаций.ВидУчетаВремени,
	|	ОсновныеНачисленияРаботниковОрганизаций.Показатель1,
	|	ОсновныеНачисленияРаботниковОрганизаций.Показатель2,
	|	ОсновныеНачисленияРаботниковОрганизаций.Показатель3,
	|	ОсновныеНачисленияРаботниковОрганизаций.Показатель4,
	|	ОсновныеНачисленияРаботниковОрганизаций.ДополнительныеДанные,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия,
	|	ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение,
	|	ОсновныеНачисленияРаботниковОрганизаций.Авторасчет,
	|	ОсновныеНачисленияРаботниковОрганизаций.ВариантОбработкиЗаписиПриОтраженииВРеглУчете,
	|	ОсновныеНачисленияРаботниковОрганизаций.ВариантАлгоритмаРасчета,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены) КАК СпособРегистрацииВремени
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор В(" + РегистраторыТекст + ")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	СпособРегистрацииВремени,
	|	НомерСтроки";
	ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
	ТаблицаДвижений.Индексы.Добавить("Регистратор,СпособРегистрацииВремени");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РабочееВремяРаботниковОрганизаций.Период,
	|	РабочееВремяРаботниковОрганизаций.Регистратор КАК Регистратор,
	|	РабочееВремяРаботниковОрганизаций.НомерСтроки КАК НомерСтроки,
	|	РабочееВремяРаботниковОрганизаций.Активность,
	|	РабочееВремяРаботниковОрганизаций.Сотрудник,
	|	РабочееВремяРаботниковОрганизаций.Организация,
	|	РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени,
	|	РабочееВремяРаботниковОрганизаций.УдалитьФизлицо,
	|	РабочееВремяРаботниковОрганизаций.УдалитьПриказ,
	|	РабочееВремяРаботниковОрганизаций.Дней,
	|	РабочееВремяРаботниковОрганизаций.Часов,
	|	РабочееВремяРаботниковОрганизаций.ДнейПоНорме,
	|	РабочееВремяРаботниковОрганизаций.ЧасовПоНорме,
	|	РабочееВремяРаботниковОрганизаций.СводнаяЗапись,
	|	РабочееВремяРаботниковОрганизаций.ВЦеломЗаПериод
	|ИЗ
	|	РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
	|ГДЕ
	|	РабочееВремяРаботниковОрганизаций.Регистратор В(" + РегистраторыТекст + ")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";

	ТаблицаДвиженийВремени = Запрос.Выполнить().Выгрузить();
	ТаблицаДвиженийВремени.Индексы.Добавить("Регистратор");

	СтруктураПоискаДвижений = Новый Структура("Регистратор,СпособРегистрацииВремени");  
	СтруктураПоискаДвиженийВремени = Новый Структура("Регистратор");  
	СтруктураПоискаЦелосменныхСтрок = Новый Структура("ОплачиватьЧасов",0);
	НаборЗаписейВремени = РегистрыНакопления.РабочееВремяРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписейВремени.ОбменДанными.Загрузка = Истина;
	НаборЗаписей = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Пока ВыборкаЗапроса.Следующий() Цикл
		НевыходыВОрганизацияхОбъект = ВыборкаЗапроса.Регистратор.ПолучитьОбъект();
		НевыходыВОрганизацияхОбъект.ОбменДанными.Загрузка = Истина;
		Если ЗначениеЗаполнено(ВыборкаЗапроса.СпособРегистрацииВремени) Тогда
			НевыходыВОрганизацияхОбъект.СпособРегистрацииВремени = ВыборкаЗапроса.СпособРегистрацииВремени;
			НевыходыВОрганизацияхОбъект.Записать();
		Иначе  // потребуется создать новый документ и переписать в него внутрисменные невыходы, в старом оставим целосменные
			СтруктураПоискаДвижений.Регистратор = ВыборкаЗапроса.Регистратор;
			СтруктураПоискаДвиженийВремени.Регистратор = ВыборкаЗапроса.Регистратор;
			НевыходыВОрганизацияхОбъект.СпособРегистрацииВремени = СпособРегистрацииВремениРегистрацияДляЦелойСмены;
			НовыйДокумент = Документы.НевыходыВОрганизациях.СоздатьДокумент();
			НовыйДокумент.ОбменДанными.Загрузка = Истина;
			ЗаполнитьЗначенияСвойств(НовыйДокумент,НевыходыВОрганизацияхОбъект,,"Номер");
			НовыйДокумент.СпособРегистрацииВремени = СпособРегистрацииВремениРегистрацияДляЧастиСмены;
			ТаблицаЦелосменныхСтрок = НевыходыВОрганизацияхОбъект.Начисления.Выгрузить(СтруктураПоискаЦелосменныхСтрок);
			Для каждого СтрокаТЧ Из НевыходыВОрганизацияхОбъект.Начисления Цикл
				Если СтрокаТЧ.ОплачиватьЧасов <> 0 Тогда
					ЗаполнитьЗначенияСвойств(НовыйДокумент.Начисления.Добавить(),СтрокаТЧ);
				КонецЕсли;
			КонецЦикла;
			НевыходыВОрганизацияхОбъект.Начисления.Загрузить(ТаблицаЦелосменныхСтрок);
			НевыходыВОрганизацияхОбъект.Записать();
			НовыйДокумент.УстановитьНовыйНомер();
			НовыйДокумент.Записать();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаЗапроса.Регистратор);
			СтруктураПоискаДвижений.СпособРегистрацииВремени = СпособРегистрацииВремениРегистрацияДляЦелойСмены;
			НаборЗаписей.Загрузить(ТаблицаДвижений.Скопировать(СтруктураПоискаДвижений));
			НаборЗаписей.Записать();
			НаборЗаписейВремени.Отбор.Регистратор.Установить(ВыборкаЗапроса.Регистратор);
			НаборЗаписейВремени.Очистить();
			НаборЗаписейВремени.Записать();
			НаборЗаписей.Отбор.Регистратор.Установить(НовыйДокумент.Ссылка);
			СтруктураПоискаДвижений.СпособРегистрацииВремени = СпособРегистрацииВремениРегистрацияДляЧастиСмены;
			НаборЗаписей.Загрузить(ТаблицаДвижений.Скопировать(СтруктураПоискаДвижений));
			НаборЗаписей.Записать();
			НаборЗаписейВремени.Отбор.Регистратор.Установить(НовыйДокумент.Ссылка);
			НаборЗаписейВремени.Загрузить(ТаблицаДвиженийВремени.Скопировать(СтруктураПоискаДвиженийВремени));
			НаборЗаписейВремени.Записать();
		КонецЕсли;
	КонецЦикла;
	
	// Устанавливаем реквизит СпособРегистрацииВремени для документа РегистрацияПростоевРаботниковОрганизаций
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрацияПростоевРаботниковОрганизаций.Ссылка,
	|	ВЫБОР
	|		КОГДА РегистрацияПростоевРаботниковОрганизаций.НеЦелодневныйПростой
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены)
	|	КОНЕЦ КАК СпособРегистрацииВремени
	|ИЗ
	|	Документ.РегистрацияПростоевРаботниковОрганизаций КАК РегистрацияПростоевРаботниковОрганизаций
	|ГДЕ
	|	РегистрацияПростоевРаботниковОрганизаций.СпособРегистрацииВремени = ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.ПустаяСсылка)";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		ДокументОбъектПростойРаботников = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
		ДокументОбъектПростойРаботников.ОбменДанными.Загрузка = Истина;
		ДокументОбъектПростойРаботников.СпособРегистрацииВремени = ВыборкаЗапроса.СпособРегистрацииВремени;
		ДокументОбъектПростойРаботников.Записать();
	КонецЦикла;
	
	// Устанавливаем реквизит СпособРегистрацииВремени для документа ОплатаПоСреднемуЗаработку
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОплатаПоСреднемуЗаработку.Ссылка,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.УдалитьПоСреднемуЗаработкуДляПочасовогоОтклонения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены)
	|	КОНЕЦ КАК СпособРегистрацииВремени
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднемуЗаработку
	|ГДЕ
	|	ОплатаПоСреднемуЗаработку.СпособРегистрацииВремени = ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.ПустаяСсылка)";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		ДокументОбъектОплатаПоСреднему = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
		ДокументОбъектОплатаПоСреднему.ОбменДанными.Загрузка = Истина;
		ДокументОбъектОплатаПоСреднему.СпособРегистрацииВремени = ВыборкаЗапроса.СпособРегистрацииВремени;
		ДокументОбъектОплатаПоСреднему.Записать();
	КонецЦикла;
	
	// Устанавливаем новые реквизиты документа СдельныйНаряд
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СдельныйНаряд.Ссылка,
	|	ВЫБОР
	|		КОГДА СдельныйНаряд.ПериодРегистрации = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(СдельныйНаряд.Дата, МЕСЯЦ)
	|		ИНАЧЕ СдельныйНаряд.ПериодРегистрации
	|	КОНЕЦ КАК ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА СдельныйНаряд.ПериодРегистрации = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(СдельныйНаряд.Дата, МЕСЯЦ)
	|		ИНАЧЕ СдельныйНаряд.ДатаНачалаПериода
	|	КОНЕЦ КАК ДатаНачалаПериода
	|ИЗ
	|	Документ.СдельныйНаряд КАК СдельныйНаряд
	|ГДЕ
	|	СдельныйНаряд.СпособВводаДанных = ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПустаяСсылка)";
	
	#Если Клиент Тогда
		ТекстСообщения = "Обработка документов ""Сдельный наряд на выполненные работы"" (часть 1)";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	Выборка = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = Выборка.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
		ДокументОбъект.Записать();
		#Если Клиент Тогда
			Если Номер % 50 = 0 Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			КонецЕсли;
			Номер = Номер + 1;
		#КонецЕсли
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФактическаяВыработкаРаботниковОрганизаций.Регистратор КАК Регистратор,
	|	ФактическаяВыработкаРаботниковОрганизаций.Период,
	|	ФактическаяВыработкаРаботниковОрганизаций.Активность,
	|	ФактическаяВыработкаРаботниковОрганизаций.Сотрудник,
	|	ФактическаяВыработкаРаботниковОрганизаций.Организация,
	|	ФактическаяВыработкаРаботниковОрганизаций.УдалитьФизлицо,
	|	ФактическаяВыработкаРаботниковОрганизаций.УдалитьПриказ,
	|	ФактическаяВыработкаРаботниковОрганизаций.Выработка,
	|	ВЫБОР
	|		КОГДА ФактическаяВыработкаРаботниковОрганизаций.СпособВводаДанных = ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ЗаДень)
	|		ИНАЧЕ ФактическаяВыработкаРаботниковОрганизаций.СпособВводаДанных
	|	КОНЕЦ КАК СпособВводаДанных
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ФактическаяВыработкаРаботниковОрганизаций.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработкаРаботниковОрганизаций
	|	ГДЕ
	|		ФактическаяВыработкаРаботниковОрганизаций.СпособВводаДанных = ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПустаяСсылка)) КАК Регистраторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработкаРаботниковОрганизаций
	|		ПО Регистраторы.Регистратор = ФактическаяВыработкаРаботниковОрганизаций.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	ФактическаяВыработкаРаботниковОрганизаций.НомерСтроки";
	
	#Если Клиент Тогда
		ТекстСообщения = "Обработка документов ""Сдельный наряд на выполненные работы"" (часть 2)";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаРегистраторов.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	НаборЗаписей = РегистрыНакопления.ФактическаяВыработкаРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		Пока ВыборкаРегистраторов.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),ВыборкаРегистраторов);
			#Если Клиент Тогда
				Если Номер % 100 = 0 Тогда
					Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
				КонецЕсли;
				Номер = Номер + 1;
			#КонецЕсли
		КонецЦикла;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФактическаяВыработкаРаботников.Регистратор КАК Регистратор,
	|	ФактическаяВыработкаРаботников.Период,
	|	ФактическаяВыработкаРаботников.Активность,
	|	ФактическаяВыработкаРаботников.Физлицо,
	|	ФактическаяВыработкаРаботников.Выработка,
	|	ВЫБОР
	|		КОГДА ФактическаяВыработкаРаботников.СпособВводаДанных = ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ЗаДень)
	|		ИНАЧЕ ФактическаяВыработкаРаботников.СпособВводаДанных
	|	КОНЕЦ КАК СпособВводаДанных
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ФактическаяВыработкаРаботников.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.ФактическаяВыработкаРаботников КАК ФактическаяВыработкаРаботников
	|	ГДЕ
	|		ФактическаяВыработкаРаботников.СпособВводаДанных = ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПустаяСсылка)) КАК Регистраторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботников КАК ФактическаяВыработкаРаботников
	|		ПО Регистраторы.Регистратор = ФактическаяВыработкаРаботников.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	ФактическаяВыработкаРаботников.НомерСтроки";
	
	#Если Клиент Тогда
		ТекстСообщения = "Обработка документов ""Сдельный наряд на выполненные работы"" (часть 3)";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаРегистраторов.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	НаборЗаписей = РегистрыНакопления.ФактическаяВыработкаРаботников.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		Пока ВыборкаРегистраторов.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),ВыборкаРегистраторов);
			#Если Клиент Тогда
				Если Номер % 100 = 0 Тогда
					Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
				КонецЕсли;
				Номер = Номер + 1;
			#КонецЕсли
		КонецЦикла;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
	// Заменяем значения реквизита СпособыРасчетаОплатыТруда Планов видов расчета
	// ОсновныеНачисленияОрганизаций и ДополнительныеНачисленияОрганизаций, 
	// на "нормальное" значение перечисления.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияОрганизаций.СпособРасчета = &УдалитьПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения
	|			ТОГДА &ПоМесячнойТарифнойСтавкеПоЧасам
	|		КОГДА ОсновныеНачисленияОрганизаций.СпособРасчета = &УдалитьПоСреднемуЗаработкуДляПочасовогоОтклонения
	|			ТОГДА &ПоСреднемуЗаработку
	|		КОГДА ОсновныеНачисленияОрганизаций.СпособРасчета = &УдалитьПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения
	|			ТОГДА &ПоЧасовойТарифнойСтавке
	|		КОГДА ОсновныеНачисленияОрганизаций.СпособРасчета = &УдалитьФиксированнойСуммойДляПочасовогоОтклонения
	|			ТОГДА &ФиксированнойСуммой
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СпособРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.СпособРасчета В(&УдаляемыеСпособыРасчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеНачисленияОрганизаций.Ссылка,
	|	ВЫБОР
	|		КОГДА ДополнительныеНачисленияОрганизаций.СпособРасчета = &УдалитьПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения
	|			ТОГДА &ПоМесячнойТарифнойСтавкеПоЧасам
	|		КОГДА ДополнительныеНачисленияОрганизаций.СпособРасчета = &УдалитьПоСреднемуЗаработкуДляПочасовогоОтклонения
	|			ТОГДА &ПоСреднемуЗаработку
	|		КОГДА ДополнительныеНачисленияОрганизаций.СпособРасчета = &УдалитьПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения
	|			ТОГДА &ПоЧасовойТарифнойСтавке
	|		КОГДА ДополнительныеНачисленияОрганизаций.СпособРасчета = &УдалитьФиксированнойСуммойДляПочасовогоОтклонения
	|			ТОГДА &ФиксированнойСуммой
	|		ИНАЧЕ """"
	|	КОНЕЦ
	|ИЗ
	|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
	|ГДЕ
	|	ДополнительныеНачисленияОрганизаций.СпособРасчета В(&УдаляемыеСпособыРасчета)";
	
	СпособыРасчетаОплатыТруда = Перечисления.СпособыРасчетаОплатыТруда;
	МассивУстаревшихСпособов = Новый Массив;
	//МассивУстаревшихСпособов.Добавить(СпособыРасчетаОплатыТруда.УдалитьНулеваяСуммаДляПочасовогоОтклонения);
	МассивУстаревшихСпособов.Добавить(СпособыРасчетаОплатыТруда.УдалитьПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения);
	МассивУстаревшихСпособов.Добавить(СпособыРасчетаОплатыТруда.УдалитьПоСреднемуЗаработкуДляПочасовогоОтклонения);
	МассивУстаревшихСпособов.Добавить(СпособыРасчетаОплатыТруда.УдалитьПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения);
	МассивУстаревшихСпособов.Добавить(СпособыРасчетаОплатыТруда.УдалитьФиксированнойСуммойДляПочасовогоОтклонения);
	Запрос.УстановитьПараметр("УдаляемыеСпособыРасчета",МассивУстаревшихСпособов);
	//Запрос.УстановитьПараметр("УдалитьНулеваяСуммаДляПочасовогоОтклонения",СпособыРасчетаОплатыТруда.УдалитьНулеваяСуммаДляПочасовогоОтклонения);
	Запрос.УстановитьПараметр("УдалитьПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения",СпособыРасчетаОплатыТруда.УдалитьПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения);
	Запрос.УстановитьПараметр("УдалитьПоСреднемуЗаработкуДляПочасовогоОтклонения",СпособыРасчетаОплатыТруда.УдалитьПоСреднемуЗаработкуДляПочасовогоОтклонения);
	Запрос.УстановитьПараметр("УдалитьПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения",СпособыРасчетаОплатыТруда.УдалитьПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения);
	Запрос.УстановитьПараметр("УдалитьФиксированнойСуммойДляПочасовогоОтклонения",СпособыРасчетаОплатыТруда.УдалитьФиксированнойСуммойДляПочасовогоОтклонения);
	Запрос.УстановитьПараметр("НулеваяСумма",СпособыРасчетаОплатыТруда.НулеваяСумма);
	Запрос.УстановитьПараметр("ПоМесячнойТарифнойСтавкеПоЧасам",СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	Запрос.УстановитьПараметр("ПоСреднемуЗаработку",СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	Запрос.УстановитьПараметр("ПоЧасовойТарифнойСтавке",СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	Запрос.УстановитьПараметр("ФиксированнойСуммой",СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОсновныеНачисленияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОсновныеНачисленияОбъект.ОбменДанными.Загрузка = Истина;
		ОсновныеНачисленияОбъект.СпособРасчета = Выборка.СпособРасчета;
		ОсновныеНачисленияОбъект.Записать();
	КонецЦикла;
	
	// перенос внутрисменных движений в регистр ВнутрисменноеВремяРаботниковОрганизаций
	#Если Клиент Тогда
		Состояние("Переносятся движения в регистр внутрисменное время работников организаций");
	#КонецЕсли
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РабочееВремяРаботниковОрганизаций.Период,
	|	РабочееВремяРаботниковОрганизаций.Регистратор КАК Регистратор,
	|	РабочееВремяРаботниковОрганизаций.НомерСтроки,
	|	РабочееВремяРаботниковОрганизаций.Активность,
	|	РабочееВремяРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	|	РабочееВремяРаботниковОрганизаций.Организация,
	|	РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени,
	|	РабочееВремяРаботниковОрганизаций.Часов
	|ИЗ
	|	РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
	|ГДЕ
	|	(РабочееВремяРаботниковОрганизаций.Регистратор ССЫЛКА Документ.НачислениеЗарплатыРаботникамОрганизаций
	|			ИЛИ РабочееВремяРаботниковОрганизаций.Регистратор ССЫЛКА Документ.ОплатаПоСреднемуЗаработку
	|			ИЛИ РабочееВремяРаботниковОрганизаций.Регистратор ССЫЛКА Документ.РегистрацияПростоевРаботниковОрганизаций
	|			ИЛИ РабочееВремяРаботниковОрганизаций.Регистратор ССЫЛКА Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций
	|			ИЛИ РабочееВремяРаботниковОрганизаций.Регистратор ССЫЛКА Документ.НевыходыВОрганизациях
	|			ИЛИ РабочееВремяРаботниковОрганизаций.Регистратор ССЫЛКА Документ.УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени
	|			ИЛИ РабочееВремяРаботниковОрганизаций.Регистратор ССЫЛКА Документ.Сторнирование)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	Выборка = Запрос.Выполнить().Выбрать();
	НаборЗаписейСоздания = РегистрыНакопления.ВнутрисменноеВремяРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписейСоздания.ОбменДанными.Загрузка = Истина;
	НаборЗаписейУдаления = РегистрыНакопления.РабочееВремяРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписейУдаления.ОбменДанными.Загрузка = Истина;
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписейСоздания.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписейСоздания.Очистить();
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписейСоздания.Добавить(), Выборка);
		КонецЦикла;
		
		НаборЗаписейСоздания.Записать();
		
		НаборЗаписейУдаления.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписейУдаления.Записать();
	КонецЦикла;
	
		
	// Заполнение реквизита Рабочее время в справочнике Классификатор использования рабочего времени
	#Если Клиент Тогда
		Состояние("Обрабатывается классификатор использования рабочего времени");
	#КонецЕсли
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторИспользованияРабочегоВремени.Ссылка,
	|	ВЫБОР
	|		КОГДА КлассификаторИспользованияРабочегоВремени.УдалитьВидВремени В (&ЧасовоеНеотработанное, &ЦелодневноеНеотработанное, &ПустойВидВремени)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗначениеРабочееВремя
	|ИЗ
	|	Справочник.КлассификаторИспользованияРабочегоВремени КАК КлассификаторИспользованияРабочегоВремени
	|ГДЕ
	|	(КлассификаторИспользованияРабочегоВремени.УдалитьВидВремени В (&ЧасовоеНеотработанное, &ЦелодневноеНеотработанное, &ПустойВидВремени)
	|				И КлассификаторИспользованияРабочегоВремени.РабочееВремя
	|			ИЛИ (НЕ КлассификаторИспользованияРабочегоВремени.УдалитьВидВремени В (&ЧасовоеНеотработанное, &ЦелодневноеНеотработанное, &ПустойВидВремени))
	|				И (НЕ КлассификаторИспользованияРабочегоВремени.РабочееВремя)
	|			ИЛИ КлассификаторИспользованияРабочегоВремени.РабочееВремя = НЕОПРЕДЕЛЕНО)";
	Запрос.УстановитьПараметр("ЧасовоеНеотработанное", Перечисления.ВидыВремени.ЧасовоеНеотработанное);
	Запрос.УстановитьПараметр("ЦелодневноеНеотработанное", Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
	Запрос.УстановитьПараметр("ПустойВидВремени", Перечисления.ВидыВремени.ПустаяСсылка());
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		ОбъектКлассификатор = ВыборкаЗапроса.Ссылка.ПолучитьОБъект();
		ОбъектКлассификатор.РабочееВремя = ВыборкаЗапроса.ЗначениеРабочееВремя;
		ОбъектКлассификатор.Записать();
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////////
	// Замена удаленных элементов классификатора использования рабочего времени
	// на предопределенные.
	
	#Если Клиент Тогда
		Состояние("Изменение предопределенных элементов классификатора использования рабочего времени");
	#КонецЕсли

	
	// Заполняет временную таблицу соответствий между удаляемым и замещаемым значением
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КлассификаторИспользованияРабочегоВремени.Ссылка КАК УдаляемыйЭлемент,
	|	ПредопределенныйКлассификатор.Ссылка КАК ЗаменяющийЭлемент
	|ПОМЕСТИТЬ ВТСоответствияЭлементов
	|ИЗ
	|	Справочник.КлассификаторИспользованияРабочегоВремени КАК КлассификаторИспользованияРабочегоВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторИспользованияРабочегоВремени КАК ПредопределенныйКлассификатор
	|		ПО (ПредопределенныйКлассификатор.Предопределенный)
	|			И ПредопределенныйКлассификатор.БуквенныйКод = КлассификаторИспользованияРабочегоВремени.БуквенныйКод
	|ГДЕ
	|	(НЕ КлассификаторИспользованияРабочегоВремени.Предопределенный)";
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Заменяем значение в документе УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьКорректировкаИспользованияРаботникамиРабочегоВремениОтработанноеВремя.ВидИспользованияРабочегоВремени,
	|	УдалитьКорректировкаИспользованияРаботникамиРабочегоВремениОтработанноеВремя.НомерСтроки,
	|	УдалитьКорректировкаИспользованияРаботникамиРабочегоВремениОтработанноеВремя.Ссылка,
	|	СоответствияЭлементов.ЗаменяющийЭлемент
	|ИЗ
	|	Документ.УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени.ОтработанноеВремя КАК УдалитьКорректировкаИспользованияРаботникамиРабочегоВремениОтработанноеВремя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСоответствияЭлементов КАК СоответствияЭлементов
	|		ПО СоответствияЭлементов.УдаляемыйЭлемент = УдалитьКорректировкаИспользованияРаботникамиРабочегоВремениОтработанноеВремя.ВидИспользованияРабочегоВремени
	|УПОРЯДОЧИТЬ ПО
	|	УдалитьКорректировкаИспользованияРаботникамиРабочегоВремениОтработанноеВремя.Ссылка";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
		ОтработанноеВремя = ДокументОбъект.ОтработанноеВремя;
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			ОтработанноеВремя[ВыборкаЗапроса.НомерСтроки-1].ВидИспользованияРабочегоВремени = ВыборкаЗапроса.ЗаменяющийЭлемент;
		
		КонецЦикла;
		ДокументОбъект.Записать();
	КонецЦикла;
	
	// Заполняет соответствие удаляемого и замещающего значения из классификатора использования рабочего времени
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствияЭлементов.УдаляемыйЭлемент,
	|	СоответствияЭлементов.ЗаменяющийЭлемент
	|ИЗ
	|	ВТСоответствияЭлементов КАК СоответствияЭлементов";
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	СоответствияЭлементов = Новый Соответствие;
	Пока ВыборкаЗапроса.Следующий() Цикл
		СоответствияЭлементов.Вставить(ВыборкаЗапроса.УдаляемыйЭлемент, ВыборкаЗапроса.ЗаменяющийЭлемент);
	КонецЦикла;
	
	// Устанавливаем значение реквизита в регистре накопления ВнутрисменноеВремяРаботниковОрганизаий
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВнутрисменноеВремяРаботниковОрганизаций.Регистратор
	|ИЗ
	|	РегистрНакопления.ВнутрисменноеВремяРаботниковОрганизаций КАК ВнутрисменноеВремяРаботниковОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСоответствияЭлементов КАК СоответствияЭлементов
	|		ПО СоответствияЭлементов.УдаляемыйЭлемент = ВнутрисменноеВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	НаборЗаписей = РегистрыНакопления.ВнутрисменноеВремяРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НужноЗаписатьНабор = Ложь;
	Пока ВыборкаЗапроса.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаЗапроса.Регистратор);
		НаборЗаписей.Прочитать();
		НужноЗаписатьНабор = Ложь;
		Для Каждого СтрокаНабора Из НаборЗаписей Цикл
			ЗаменяющийЭлемент = СоответствияЭлементов.Получить(СтрокаНабора.ВидИспользованияРабочегоВремени);
			Если ЗаменяющийЭлемент <> Неопределено Тогда
				СтрокаНабора.ВидИспользованияРабочегоВремени = ЗаменяющийЭлемент;
				НужноЗаписатьНабор = Истина;
			КонецЕсли;
		КонецЦикла;
		Если НужноЗаписатьНабор Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
	
	// Устанавливает значение реквизита в регистре накопления РабочееВремяРаботниковОрганизаций
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РабочееВремяРаботниковОрганизаций.Регистратор
	|ИЗ
	|	РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСоответствияЭлементов КАК СоответствияЭлементов
	|		ПО СоответствияЭлементов.УдаляемыйЭлемент = РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени";
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	НаборЗаписей = РегистрыНакопления.РабочееВремяРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Пока ВыборкаЗапроса.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаЗапроса.Регистратор);
		НаборЗаписей.Прочитать();
		НужноЗаписатьНабор = Ложь;
		Для Каждого СтрокаНабора Из НаборЗаписей Цикл
			ЗаменяющийЭлемент = СоответствияЭлементов.Получить(СтрокаНабора.ВидИспользованияРабочегоВремени);
			Если ЗаменяющийЭлемент <> Неопределено Тогда
				СтрокаНабора.ВидИспользованияРабочегоВремени = ЗаменяющийЭлемент;
				НужноЗаписатьНабор = Истина;
			КонецЕсли;
		КонецЦикла;
		Если НужноЗаписатьНабор Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
	
	
	// Устанавливаем значение реквизита в ПВР ОсновныеНачисленияРаботниковОрганизаций
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	СоответствияЭлементов.ЗаменяющийЭлемент
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСоответствияЭлементов КАК СоответствияЭлементов
	|		ПО СоответствияЭлементов.УдаляемыйЭлемент = ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени";
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		ПВРОбъект = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
		ПВРОбъект.ОбозначениеВТабелеУчетаРабочегоВремени = ВыборкаЗапроса.ЗаменяющийЭлемент;
		ПВРОбъект.ОбменДанными.Загрузка = Истина;
		ПВРОбъект.Записать();
	КонецЦикла;
	
	// Устанавливаем значение реквизита в ПВР УправленческиеНачисления
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УправленческиеНачисления.Ссылка,
	|	СоответствияЭлементов.ЗаменяющийЭлемент
	|ИЗ
	|	ПланВидовРасчета.УправленческиеНачисления КАК УправленческиеНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСоответствияЭлементов КАК СоответствияЭлементов
	|		ПО СоответствияЭлементов.УдаляемыйЭлемент = УправленческиеНачисления.ВидУчетаРабочегоВремени";
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		ПВРОбъект = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
		ПВРОбъект.ВидУчетаРабочегоВремени = ВыборкаЗапроса.ЗаменяющийЭлемент;
		ПВРОбъект.Записать();
	КонецЦикла;
	
	// Удаление лищних элементов классификатора использования рабочего времени
	Если СоответствияЭлементов.Количество() > 0 Тогда
		МассивСсылок = Новый Массив(СоответствияЭлементов.Количество());
		ИндексМассива = 0;
		Для Каждого ЭлементСоответствия Из СоответствияЭлементов Цикл
			МассивСсылок[ИндексМассива] = ЭлементСоответствия.Ключ;
			ИндексМассива = ИндексМассива + 1;
		КонецЦикла;
		ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
		Для Каждого ЗначениеМассива Из МассивСсылок Цикл
			Если ТаблицаСсылок.Найти(ЗначениеМассива, "Ссылка") = Неопределено Тогда
				ЗначениеМассива.ПолучитьОбъект().Удалить();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПВРДниНеоплачиваемыеСогласноТабелю();
	
КонецПроцедуры // ЗаполнитьРеквизитыПоУчетуРабочегоВремени()

// Процедура заполняет значением по умолчанию ресурс УчетЗадолженностиПоМесяцам учетной политики по персоналу
//
Процедура ЗаполнитьРесурсУчетЗадолженностиУчетнойПолитики()
	// записываем текущее значение учетной политики по учету персоналу
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоПерсоналуОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Записывать = Ложь;
	Для каждого СтрокаНабора Из НаборЗаписей Цикл
		Если Не СтрокаНабора.УчетЗадолженностиПоМесяцам Тогда // при обновлении на новую редакцию этот ресурс еще не установлен
			СтрокаНабора.УчетЗадолженностиПоМесяцам = Истина;
			Записывать = Истина;
		КонецЕсли;
	КонецЦикла; 
	Если Записывать Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
	глЗначениеПеременнойУстановить("глУчетнаяПолитикаПоПерсоналуОрганизации", ОбщегоНазначенияЗК.ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации(), Истина);
		
КонецПроцедуры // ЗаполнитьРесурсУчетЗадолженностиУчетнойПолитики

Процедура РегистрацияСотрудниковОрганизацийПоРегистру()
	
	// создание сотрудников по приказам о приеме на работу
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиОрганизаций.Регистратор КАК Приказ
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|	И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу.Текст =
	"ВЫБРАТЬ
	|	РаботникиОрганизаций.НомерСтроки КАК НомерСтроки,
	|	РаботникиОрганизаций.УдалитьТабельныйНомер КАК Код,
	|	РаботникиОрганизаций.УдалитьФизлицо.Наименование КАК Наименование,
	|	РаботникиОрганизаций.УдалитьФизлицо КАК Физлицо,
	|	ИСТИНА КАК Актуальность,
	|	РаботникиОрганизаций.Организация КАК Организация,
	|	РаботникиОрганизаций.ОбособленноеПодразделение,
	|	РаботникиОрганизаций.Регистратор.УдалитьВидЗанятости КАК ВидЗанятости,
	|	ТрудовойДоговорДокумент.Номер КАК НомерДоговора,
	|	ТрудовойДоговорДокумент.Дата КАК ДатаДоговора,
	|	РаботникиОрганизаций.ГрафикРаботы,
	|	РаботникиОрганизаций.ПодразделениеОрганизации,
	|	РаботникиОрганизаций.Должность,
	|	РаботникиОрганизаций.ЗанимаемыхСтавок,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема КАК ДатаНачала,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения КАК ДатаОкончания,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ИспытательныйСрок,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.СпособРасчета,
	|	ТрудовойДоговорДокумент.ТарифнаяСтавка КАК ТарифнаяСтавка,
	|	ТрудовойДоговорДокумент.ВалютаТарифнойСтавки КАК ВалютаТарифнойСтавки,
	|	ТрудовойДоговорДокумент.ПерсональныеНадбавки.(
	|		Надбавка,
	|		Показатель1,
	|		Показатель2,
	|		Показатель3,
	|		Показатель4,
	|		Валюта1,
	|		Валюта2,
	|		Валюта3,
	|		Валюта4
	|	),
	|	РаботникиОрганизаций.Период,
	|	РаботникиОрганизаций.Регистратор,
	|	РаботникиОрганизаций.Активность,
	|	РаботникиОрганизаций.УдалитьФизлицо,
	|	РаботникиОрганизаций.УдалитьПриказ,
	|	РаботникиОрганизаций.ПериодЗавершения,
	|	РаботникиОрганизаций.ЗанимаемыхСтавокЗавершения,
	|	РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения,
	|	РаботникиОрганизаций.ДолжностьЗавершения,
	|	РаботникиОрганизаций.ГрафикРаботыЗавершения,
	|	РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения,
	|	РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения,
	|	РаботникиОрганизаций.УдалитьТабельныйНомер,
	|	РаботникиОрганизаций.ПричинаИзмененияСостояния,
	|	ТрудовойДоговорДокумент.РазрядЕТС,
	|	ТрудовойДоговорДокумент.КоэффициентЕТС,
	|	ТрудовойДоговорДокумент.ПроцентПовышения,
	|	ТрудовойДоговорДокумент.РасчетнаяТарифнаяСтавка,
	|	ТрудовойДоговорДокумент.ВидРасчета,
	|	РаботникиОрганизаций.Категория
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТрудовойДоговор КАК ТрудовойДоговорДокумент
	|			ПО ПриемНаРаботуВОрганизациюРаботникиОрганизации.ТрудовойДоговор = ТрудовойДоговорДокумент.Ссылка
	|		ПО (ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &Приказ)
	|			И РаботникиОрганизаций.УдалитьФизлицо = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
	|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|ГДЕ
	|	РаботникиОрганизаций.Регистратор = &Приказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Сотрудники организаций. Обрабатывается набор записей " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		НаборЗаписей = РегистрыСведений.РаботникиОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Приказ;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ", Выборка.Приказ);
	
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		НачатьТранзакцию();
		Пока ВыборкаПоДокументу.Следующий() Цикл
			Сотрудник = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Сотрудник, ВыборкаПоДокументу);
			Сотрудник.ВидДоговора	= Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;
			
			Если Сотрудник.ВидЗанятости  = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
				Сотрудник.Наименование = Сотрудник.Наименование + " (вн. совм.)";
				Сотрудник.ПостфиксНаименования = "(вн. совм.)"; 
			ИначеЕсли Сотрудник.ВидЗанятости  = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда
				Сотрудник.Наименование = Сотрудник.Наименование + " (осн.)";
				Сотрудник.ПостфиксНаименования = "(осн.)";
			Иначе
				Сотрудник.Наименование = Сотрудник.Наименование + " (совм.)";
				Сотрудник.ПостфиксНаименования = "(совм.)";
			КонецЕсли;
			
			Сотрудник.Записать();
			
			Строка = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ВыборкаПоДокументу);
			Строка.Сотрудник = Сотрудник.Ссылка;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры

Процедура РегистрацияСотрудниковОрганизацийПоДокументу()
	
	// создание сотрудников по приказам о приеме на работу
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК Документ
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|	И Док.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	И (НЕ Док.Ссылка.Проведен)";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу.Текст =
	"ВЫБРАТЬ
	|	Прием.НомерСтроки,
	|	Прием.УдалитьТабельныйНомер КАК Код,
	|	Прием.ФизЛицо.Наименование КАК Наименование,
	|	Прием.ФизЛицо КАК Физлицо,
	|	ИСТИНА КАК Актуальность,
	|	Прием.Ссылка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Прием.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Прием.Ссылка.Организация
	|		ИНАЧЕ Прием.Ссылка.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ОбособленноеПодразделение,
	|	Прием.Ссылка.УдалитьВидЗанятости КАК ВидЗанятости,
	|	ТД.Номер КАК НомерДоговора,
	|	ТД.Дата КАК ДатаДоговора,
	|	Прием.ГрафикРаботы,
	|	Прием.ПодразделениеОрганизации,
	|	Прием.Должность,
	|	Прием.ЗанимаемыхСтавок,
	|	Прием.ДатаПриема КАК ДатаНачала,
	|	Прием.ДатаУвольнения КАК ДатаОкончания,
	|	Прием.ИспытательныйСрок,
	|	Прием.СпособРасчета,
	|	ТД.ТарифнаяСтавка КАК ТарифнаяСтавка,
	|	ТД.ВалютаТарифнойСтавки КАК ВалютаТарифнойСтавки,
	|	ТД.ПерсональныеНадбавки.(
	|		Надбавка,
	|		Показатель1,
	|		Показатель2,
	|		Показатель3,
	|		Показатель4,
	|		Валюта1,
	|		Валюта2,
	|		Валюта3,
	|		Валюта4
	|	),
	|	ТД.РазрядЕТС,
	|	ТД.КоэффициентЕТС,
	|	ТД.ПроцентПовышения,
	|	ТД.РасчетнаяТарифнаяСтавка,
	|	ТД.ВидРасчета,
	|	Прием.Категория
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Прием
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТрудовойДоговор КАК ТД
	|		ПО Прием.ТрудовойДоговор = ТД.Ссылка
	|ГДЕ
	|	Прием.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|	И Прием.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	И Прием.Ссылка = &Приказ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Сотрудники организаций. Обрабатывается документ " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ", Выборка.Документ);
	
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		НачатьТранзакцию();
		Пока ВыборкаПоДокументу.Следующий() Цикл
			Сотрудник = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Сотрудник, ВыборкаПоДокументу);
			Сотрудник.ВидДоговора	= Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;
			
			Если Сотрудник.ВидЗанятости  = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
				Сотрудник.Наименование = Сотрудник.Наименование + " (вн. совм.)";
				Сотрудник.ПостфиксНаименования = "(вн. совм.)"; 
			ИначеЕсли Сотрудник.ВидЗанятости  = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда
				Сотрудник.Наименование = Сотрудник.Наименование + " (осн.)";
				Сотрудник.ПостфиксНаименования = "(осн.)";
			Иначе
				Сотрудник.Наименование = Сотрудник.Наименование + " (совм.)";
				Сотрудник.ПостфиксНаименования = "(совм.)";
			КонецЕсли;
			
			Сотрудник.Записать();
			Строка = ДокументОбъект.РаботникиОрганизации.Найти(ВыборкаПоДокументу.НомерСтроки, "НомерСтроки");
			Строка.Сотрудник = Сотрудник.Ссылка;
		КонецЦикла;
		
		ДокументОбъект.Записать();
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры

// заполнение поля Сотрудник в регистре
//
Процедура ЗаполнитьНаборЗаписейОрганизаций(ПолеДаты, МенеджерРегистров, ИмяРегистра, ДопУсловие = "", ПериодНаКонецМесяца = Ложь)
	
	ИмяРеквизитаФизлицо		= "УдалитьФизлицо";
	Если ТипЗнч(МенеджерРегистров) = Тип("РегистрыСведенийМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрСведений";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыНакопленияМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрНакопления";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыБухгалтерииМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрБухгалтерии";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыРасчетаМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрРасчета";
		ИмяРеквизитаФизлицо	= "Физлицо";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Организация КАК Организация,
	|	Регистр.Регистратор КАК Приказ,
	|	МИНИМУМ(Регистр." + ПолеДаты + ") КАК Период
	|ИЗ
	|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|ГДЕ
	|	" + ДопУсловие + " Регистр.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Регистр.Организация,
	|	Регистр.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументуВТ =
	"ВЫБРАТЬ
	|	РаботникиОрганизаций.*
	|ПОМЕСТИТЬ ВТРаботникиОрганизаций
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.Сотрудник.Физлицо В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Рег." + ИмяРеквизитаФизлицо + "
	|			ИЗ
	|				" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Рег
	|			ГДЕ
	|				Рег.Регистратор = &Приказ)";
	
	ЗапросПоДокументуТекст1 = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.НомерСтроки КАК НомерСтроки,
	|	Регистр.*
	|ИЗ
	|	(ВЫБРАТЬ
	|	Работники.Сотрудник КАК Сотрудник,
	|	Регистр.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
	|		ПО Регистр." + ИмяРеквизитаФизлицо + " = Работники.УдалитьФизлицо
	|			И Регистр.УдалитьПриказ = Работники.Регистратор
	|			И Регистр.Организация = Работники.Организация
	|			И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|			И Регистр.Регистратор = &Приказ
	|			//УСЛОВИЕ_НА_ВИДРАСЧЕТА
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		РаботникиОрганизаций.Сотрудник,
	|		Периоды.НомерСтроки
	|	ИЗ
	|		(ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК РаботникиОрганизаций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МИНИМУМ(ПериодыВсе.Период) КАК Период,
	|				ПериодыВсе.Физлицо КАК Физлицо,
	|				ПериодыВсе.Организация КАК Организация,
	|				ПериодыВсе.НомерСтроки КАК НомерСтроки
	|			ИЗ
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(Работники.Период) КАК Период,
	|					Регистр." + ИмяРеквизитаФизлицо + " КАК Физлицо,
	|					Регистр.Организация КАК Организация,
	|					Регистр.НомерСтроки КАК НомерСтроки
	|				ИЗ
	|					" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
	|						ПО Регистр." + ИмяРеквизитаФизлицо + " = Работники.УдалитьФизлицо
	|							И Регистр.Организация = Работники.Организация
	|							И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|							И (Регистр.Регистратор = &Приказ)
	|							И (Регистр.УдалитьПриказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка))
	|							И Работники.Период <= "+?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Регистр." + ПолеДаты + ", МЕСЯЦ)", "Регистр." + ПолеДаты)+"
	|							//УСЛОВИЕ_НА_ВИДРАСЧЕТА
	|				
	|				СГРУППИРОВАТЬ ПО
	|					Регистр." + ИмяРеквизитаФизлицо + ",
	|					Регистр.Организация,
	|					Регистр.НомерСтроки
	|				
	|				ОБЪЕДИНИТЬ
	|				
	|				ВЫБРАТЬ
	|					МИНИМУМ(Работники.Период),
	|					Регистр." + ИмяРеквизитаФизлицо + ",
	|					Регистр.Организация,
	|					Регистр.НомерСтроки
	|				ИЗ
	|					" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
	|						ПО Регистр." + ИмяРеквизитаФизлицо + " = Работники.УдалитьФизлицо
	|							И Регистр.Организация = Работники.Организация
	|							И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|							И Регистр.Регистратор = &Приказ
	|							И Регистр.УдалитьПриказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка)
	|							И Работники.Период > "+?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Регистр." + ПолеДаты + ", МЕСЯЦ)", "Регистр." + ПолеДаты)+"
	|							//УСЛОВИЕ_НА_ВИДРАСЧЕТА
	|				
	|				СГРУППИРОВАТЬ ПО
	|					Регистр." + ИмяРеквизитаФизлицо + ",
	|					Регистр.Организация,
	|					Регистр.НомерСтроки) КАК ПериодыВсе
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПериодыВсе.Физлицо,
	|				ПериодыВсе.Организация,
	|				ПериодыВсе.НомерСтроки) КАК Периоды
	|			ПО РаботникиОрганизаций.Организация = Периоды.Организация
	|				И РаботникиОрганизаций.УдалитьФизлицо = Периоды.Физлицо
	|				И РаботникиОрганизаций.Период = Периоды.Период	
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ПриказыДоДокумента.Сотрудник,
	|		ПриказыДоДокумента.НомерСтроки
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|			Периоды.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ)) КАК Период,
	|				Регистр." + ИмяРеквизитаФизлицо + " КАК Физлицо,
	|				Регистр.Организация КАК Организация,
	|				Регистр.НомерСтроки КАК НомерСтроки
	|			ИЗ
	|				" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|					ПО Регистр." + ИмяРеквизитаФизлицо + " = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
	|						И Регистр.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация
	|						И Регистр.Регистратор = &Приказ
	|						И Регистр.УдалитьПриказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка)
	|						И (НЕ ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Проведен)
	|						И (НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ) <= "+?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Регистр." + ПолеДаты + ", МЕСЯЦ)", "Регистр." + ПолеДаты)+")
	|						//УСЛОВИЕ_НА_ВИДРАСЧЕТА
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Регистр." + ИмяРеквизитаФизлицо + ",
	|				Регистр.Организация,
	|				Регистр.НомерСтроки) КАК Периоды
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|				ПО (Периоды.Период = НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ))
	|					И Периоды.Физлицо = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
	|					И (НЕ ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Проведен)
	|					И Периоды.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация) КАК ПриказыДоДокумента) КАК Сотрудники
	|		ПРАВОЕ СОЕДИНЕНИЕ " + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|		ПО Сотрудники.НомерСтроки = Регистр.НомерСтроки
	|ГДЕ
	|	Регистр.Регистратор = &Приказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ЗапросПоДокументуТекст2 = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.НомерСтроки КАК НомерСтроки,
	|	Регистр.*
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаботникиОрганизаций.Сотрудник,
	|		Периоды.НомерСтроки
	|	ИЗ
	|		(ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК РаботникиОрганизаций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МИНИМУМ(ПериодыВсе.Период) КАК Период,
	|				ПериодыВсе.Физлицо КАК Физлицо,
	|				ПериодыВсе.Организация КАК Организация,
	|				ПериодыВсе.НомерСтроки КАК НомерСтроки
	|			ИЗ
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(Работники.Период) КАК Период,
	|					Регистр." + ИмяРеквизитаФизлицо + " КАК Физлицо,
	|					Регистр.Организация КАК Организация,
	|					Регистр.НомерСтроки КАК НомерСтроки
	|				ИЗ
	|					" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
	|						ПО Регистр." + ИмяРеквизитаФизлицо + " = Работники.УдалитьФизлицо
	|							И Регистр.Организация = Работники.Организация
	|							И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|							И Регистр.Регистратор = &Приказ
	|							И Работники.Период <= "+?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Регистр." + ПолеДаты + ", МЕСЯЦ)", "Регистр." + ПолеДаты)+"
	|							//УСЛОВИЕ_НА_ВИДРАСЧЕТА
	|				
	|				СГРУППИРОВАТЬ ПО
	|					Регистр." + ИмяРеквизитаФизлицо + ",
	|					Регистр.Организация,
	|					Регистр.НомерСтроки
	|				
	|				ОБЪЕДИНИТЬ
	|				
	|				ВЫБРАТЬ
	|					МИНИМУМ(Работники.Период),
	|					Регистр." + ИмяРеквизитаФизлицо + ",
	|					Регистр.Организация,
	|					Регистр.НомерСтроки
	|				ИЗ
	|					" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
	|						ПО Регистр." + ИмяРеквизитаФизлицо + " = Работники.УдалитьФизлицо
	|							И Регистр.Организация = Работники.Организация
	|							И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|							И Регистр.Регистратор = &Приказ
	|							И Работники.Период > "+?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Регистр." + ПолеДаты + ", МЕСЯЦ)", "Регистр." + ПолеДаты)+"
	|							//УСЛОВИЕ_НА_ВИДРАСЧЕТА
	|				
	|				СГРУППИРОВАТЬ ПО
	|					Регистр." + ИмяРеквизитаФизлицо + ",
	|					Регистр.Организация,
	|					Регистр.НомерСтроки) КАК ПериодыВсе
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПериодыВсе.Физлицо,
	|				ПериодыВсе.Организация,
	|				ПериодыВсе.НомерСтроки) КАК Периоды
	|			ПО РаботникиОрганизаций.Организация = Периоды.Организация
	|				И РаботникиОрганизаций.УдалитьФизлицо = Периоды.Физлицо
	|				И РаботникиОрганизаций.Период = Периоды.Период	
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ПриказыДоДокумента.Сотрудник,
	|		ПриказыДоДокумента.НомерСтроки
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|			Периоды.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ)) КАК Период,
	|				Регистр." + ИмяРеквизитаФизлицо + " КАК Физлицо,
	|				Регистр.Организация КАК Организация,
	|				Регистр.НомерСтроки КАК НомерСтроки
	|			ИЗ
	|				" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|					ПО Регистр." + ИмяРеквизитаФизлицо + " = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
	|						И Регистр.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация
	|						И Регистр.Регистратор = &Приказ
	|						И (НЕ ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Проведен)
	|						И (НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ) <= "+?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Регистр." + ПолеДаты + ", МЕСЯЦ)", "Регистр." + ПолеДаты)+")
	|						//УСЛОВИЕ_НА_ВИДРАСЧЕТА
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Регистр." + ИмяРеквизитаФизлицо + ",
	|				Регистр.Организация,
	|				Регистр.НомерСтроки) КАК Периоды
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|				ПО (Периоды.Период = НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ))
	|					И Периоды.Физлицо = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
	|					И (НЕ ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Проведен)
	|					И Периоды.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация) КАК ПриказыДоДокумента) КАК Сотрудники
	|		ПРАВОЕ СОЕДИНЕНИЕ " + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|		ПО Сотрудники.НомерСтроки = Регистр.НомерСтроки
	|ГДЕ
	|	Регистр.Регистратор = &Приказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если	(ИмяРегистра = "БУДополнительныеНачисления") ИЛИ
			(ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций") ИЛИ
			(ИмяРегистра = "ЕСНДополнительныеНачисления") Тогда
		ЗапросПоДокументуТекст1 = СтрЗаменить(ЗапросПоДокументуТекст1, "//УСЛОВИЕ_НА_ВИДРАСЧЕТА", "И Регистр.ВидРасчета.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой)");
		ЗапросПоДокументуТекст2 = СтрЗаменить(ЗапросПоДокументуТекст2, "//УСЛОВИЕ_НА_ВИДРАСЧЕТА", "И Регистр.ВидРасчета.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой)");
	КонецЕсли;
	
	//ЗапросПоДокументуТекстУдалитьПроцентДеятельностиЕНВД = 
	//"ВЫБРАТЬ
	//|	Сотрудники.Сотрудник,
	//|	Сотрудники.НомерСтроки КАК НомерСтроки,
	//|	Сотрудники.РаботникТекущегоМесяца,
	//|	Регистр.Период,
	//|	Регистр.Регистратор,
	//|	Регистр.Активность,
	//|	Регистр.Организация,
	//|	Регистр.УдалитьФизлицо,
	//|	Регистр.УдалитьПриказ,
	//|	Регистр.ПодпадаетПодЕНВД,
	//|	Регистр.СтатьяЗатратЕНВД,
	//|	Регистр.СтатьяЗатратНеЕНВД
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		Работники.Сотрудник КАК Сотрудник,
	//|		Периоды.НомерСтроки КАК НомерСтроки,
	//|		ПриказыТекущегоМесяца.Сотрудник КАК РаботникТекущегоМесяца
	//|	ИЗ
	//|		(ВЫБРАТЬ
	//|			МАКСИМУМ(Работники.Период) КАК Период,
	//|			Регистр.УдалитьФизлицо КАК Физлицо,
	//|			Регистр.Организация КАК Организация,
	//|			Регистр.НомерСтроки КАК НомерСтроки
	//|		ИЗ
	//|			РегистрСведений.УдалитьПроцентДеятельностиЕНВД КАК Регистр
	//|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	//|				ПО Регистр.УдалитьФизлицо = Работники.УдалитьФизлицо
	//|					И Регистр.Организация = Работники.Организация
	//|					И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	//|					И Работники.Период <= КОНЕЦПЕРИОДА(Регистр.Период, МЕСЯЦ)
	//|					И Регистр.Регистратор = &Приказ
	//|		
	//|		СГРУППИРОВАТЬ ПО
	//|			Регистр.УдалитьФизлицо,
	//|			Регистр.Организация,
	//|			Регистр.НомерСтроки) КАК Периоды
	//|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	//|			ПО Периоды.Период = Работники.Период
	//|				И Периоды.Физлицо = Работники.УдалитьФизлицо
	//|				И Периоды.Организация = Работники.Организация
	//|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|				Работники.Сотрудник КАК Сотрудник,
	//|				Работники.УдалитьФизлицо КАК Физлицо
	//|			ИЗ
	//|				РегистрСведений.УдалитьПроцентДеятельностиЕНВД КАК Регистр
	//|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	//|					ПО Регистр.Период >= Работники.Период
	//|						И КОНЕЦПЕРИОДА(Регистр.Период, МЕСЯЦ) <= Работники.Период
	//|						И Регистр.УдалитьФизлицо = Работники.УдалитьФизлицо
	//|						И Регистр.Организация = Работники.Организация
	//|						И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)) КАК ПриказыТекущегоМесяца
	//|			ПО Периоды.Физлицо = ПриказыТекущегоМесяца.Физлицо) КАК Сотрудники
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьПроцентДеятельностиЕНВД КАК Регистр
	//|		ПО Сотрудники.НомерСтроки = Регистр.НомерСтроки
	//|			И (Регистр.Регистратор = &Приказ)
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		ПоддержкаВнутреннегоСовместительства = БылаПоддержкаВнутреннегоСовместительства(Выборка.Организация);
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ",	Выборка.Приказ);
		
		МТ = Новый МенеджерВременныхТаблиц;
		ЗапросПоДокументу.МенеджерВременныхТаблиц = МТ;
		
		ЗапросПоДокументу.Текст = ЗапросПоДокументуВТ;
		ЗапросПоДокументу.Выполнить();
		
		Если ПоддержкаВнутреннегоСовместительства Тогда
			ЗапросПоДокументу.Текст = ЗапросПоДокументуТекст1;
		Иначе
			//Если ИмяРегистра = "УдалитьПроцентДеятельностиЕНВД" Тогда
			//	ЗапросПоДокументу.Текст = ЗапросПоДокументуТекстУдалитьПроцентДеятельностиЕНВД;
			//Иначе
				ЗапросПоДокументу.Текст = ЗапросПоДокументуТекст2;
			//КонецЕсли;
		КонецЕсли;
		
		#Если Клиент Тогда
			Состояние(ПрефиксИмениТаблицы + "." + ИмяРегистра + ". Обрабатывается набор записей " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		НаборЗаписей = МенеджерРегистров[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Приказ;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		МТ.Закрыть();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			Строка = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ВыборкаПоДокументу);
			Строка.Сотрудник	= ВыборкаПоДокументу.Сотрудник;
			
			//Если Не ПоддержкаВнутреннегоСовместительства И (ИмяРегистра = "УдалитьПроцентДеятельностиЕНВД") Тогда
			//	// особым образом обрабатываем данные процента деятельности - нужно при необходимости 
			//	// "размножать" строки набора записей
			//	Если ВыборкаПоДокументу.РаботникТекущегоМесяца <> ВыборкаПоДокументу.Сотрудник И
			//		ВыборкаПоДокументу.РаботникТекущегоМесяца <> Null И 
			//		ВыборкаПоДокументу.Сотрудник <> Null Тогда
			//		НоваяСтрока = НаборЗаписей.Добавить();
			//		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			//		НоваяСтрока.Сотрудник	= ВыборкаПоДокументу.РаботникТекущегоМесяца;
			//	КонецЕсли;
			//КонецЕсли;
			
			Если ИмяРегистра = "БУОсновныеНачисления" Тогда
				Строка.ПериодДействияКонец  = КонецДня(Строка.ПериодДействияКонец);
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

// заполнение поля Сотрудник в документе
//
Процедура ЗаполнитьДокументОрганизаций(ПолеДаты, ИмяДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Организация КАК Организация,
	|	Документ.Ссылка КАК Документ
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК Документ
	|ГДЕ
	|	Документ.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ.Ссылка.Дата";
	
	ЗапросыПоДокументу			= Новый Массив(1);
	ЗапросыПоДокументуВТ		= Новый Массив(1);
	ЗапросыПоДокументуТекст1	= Новый Массив(1);
	ЗапросыПоДокументуТекст2	= Новый Массив(1);
	
	Индекс = 0;
	Пока Индекс < ЗапросыПоДокументу.Количество() Цикл
		ЗапросыПоДокументу[Индекс] = Новый Запрос;
		
		ЗапросыПоДокументуВТ[Индекс] =
		"ВЫБРАТЬ
		|	РаботникиОрганизаций.*
		|ПОМЕСТИТЬ ВТРаботникиОрганизаций
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Сотрудник.Физлицо В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				Док.Физлицо
		|			ИЗ
		|				Документ." + ИмяДокумента + " КАК Док
		|			ГДЕ
		|				Док.Ссылка = &Приказ)";
		
		ЗапросыПоДокументуТекст1[Индекс] = 
		"ВЫБРАТЬ
		|	Работники.Сотрудник
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
		|		ПО Документ.Физлицо = Работники.УдалитьФизлицо
		|			И Документ.УдалитьПриказ = Работники.Регистратор
		|			И Документ.УдалитьПриказ.Организация = Работники.ОбособленноеПодразделение
		|			И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|		ГДЕ 
		|			Документ.Ссылка = &Приказ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Работники.Сотрудник
		|ИЗ
		|		(ВЫБРАТЬ
		|			МАКСИМУМ(Работники.Период) КАК Период,
		|			Документ.Физлицо КАК Физлицо,
		|			Документ.Организация КАК Организация
		|		ИЗ
		|			Документ." + ИмяДокумента + " КАК Документ
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
		|				ПО Документ.Физлицо = Работники.УдалитьФизлицо
		|					И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
		|					И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|					И Работники.Период <= Документ." + ПолеДаты + "
		|		ГДЕ
		|			Документ.Ссылка = &Приказ
		|			И Документ.УдалитьПриказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка)
		|
		|		СГРУППИРОВАТЬ ПО
		|			Документ.Физлицо,
		|			Документ.Организация) КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
		|		ПО Периоды.Период = Работники.Период
		|			И Периоды.Физлицо = Работники.УдалитьФизлицо
		|			И Периоды.Организация = Работники.ОбособленноеПодразделение";
		
		ЗапросыПоДокументуТекст2[Индекс] = 
		"ВЫБРАТЬ
		|	Работники.Сотрудник
		|ИЗ
		|		(ВЫБРАТЬ
		|			МАКСИМУМ(Работники.Период) КАК Период,
		|			Документ.Физлицо КАК Физлицо,
		|			Документ.Организация КАК Организация
		|		ИЗ
		|			Документ." + ИмяДокумента + " КАК Документ
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
		|				ПО Документ.Физлицо = Работники.УдалитьФизлицо
		|					И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
		|					И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|					И Работники.Период <= Документ." + ПолеДаты + "
		|		ГДЕ
		|			Документ.Ссылка = &Приказ
		|
		|		СГРУППИРОВАТЬ ПО
		|			Документ.Физлицо,
		|			Документ.Организация) КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
		|		ПО Периоды.Период = Работники.Период
		|			И Периоды.Физлицо = Работники.УдалитьФизлицо
		|			И Периоды.Организация = Работники.ОбособленноеПодразделение";
			
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Документ." + ИмяДокумента + ". Обрабатывается документ " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Индекс = 0;
		Пока Индекс < ЗапросыПоДокументу.Количество() Цикл
			ЗапросыПоДокументу[Индекс].УстановитьПараметр("Приказ",	Выборка.Документ);
			
			МТ = Новый МенеджерВременныхТаблиц;
			ЗапросыПоДокументу[Индекс].МенеджерВременныхТаблиц = МТ;
			
			ЗапросыПоДокументу[Индекс].Текст = ЗапросыПоДокументуВТ[Индекс];
			ЗапросыПоДокументу[Индекс].Выполнить();
			
			//Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Выборка.Организация].ПоддержкаВнутреннегоСовместительства Тогда
				ЗапросыПоДокументу[Индекс].Текст = ЗапросыПоДокументуТекст1[Индекс];
			//Иначе
				ЗапросыПоДокументу[Индекс].Текст = ЗапросыПоДокументуТекст2[Индекс];
			//КонецЕсли;
			
			ВыборкаПоДокументу = ЗапросыПоДокументу[Индекс].Выполнить().Выбрать();
			
			МТ.Закрыть();
			
			Пока ВыборкаПоДокументу.Следующий() Цикл
				ДокументОбъект.Сотрудник = ВыборкаПоДокументу.Сотрудник;
			КонецЦикла;
			
			Индекс = Индекс + 1;
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры


// Функция возвращает значение учетной политики ПоддержкаВнутреннегоСовместительства
//
Функция БылаПоддержкаВнутреннегоСовместительства(Организация)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаПоПерсоналуОрганизаций.УдалитьПоддержкаВнутреннегоСовместительства КАК ПоддержкаВнутреннегоСовместительства
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПоддержкаВнутреннегоСовместительства;
	Иначе
		Возврат Ложь;
	КонецЕсли;	

КонецФункции // БылаПоддержкаВнутреннегоСовместительства()

// заполнение поля Сотрудник в табличной части документа
//
Процедура ЗаполнитьТабличнуюЧастьДокументаОрганизаций(ПолеФизлица, ТабличныеЧасти, ПолеДаты, ИмяДокумента, ПериодНаКонецМесяца = Ложь)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка.Организация КАК Организация,
	|	Документ.Ссылка КАК Документ
	|ИЗ
	|	Документ." + ИмяДокумента + "." + ТабличныеЧасти[0].Имя + " КАК Документ
	|ГДЕ
	|	Документ.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ.Ссылка.Дата";
	
	ЗапросыПоДокументу			= Новый Массив(ТабличныеЧасти.Количество());
	ЗапросыПоДокументуВТ		= Новый Массив(ТабличныеЧасти.Количество());
	ЗапросыПоДокументуТекст1	= Новый Массив(ТабличныеЧасти.Количество());
	ЗапросыПоДокументуТекст2	= Новый Массив(ТабличныеЧасти.Количество());
	
	ТипДополнительныеНачисленияОрганизаций = Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций");
	
	Индекс = 0;
	Пока Индекс < ЗапросыПоДокументу.Количество() Цикл
		ПроверятьСпособРасчета = Ложь;
		ЕстьВидРасчета = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ВидРасчета", Метаданные.Документы[ИмяДокумента], ТабличныеЧасти[Индекс].Имя);
		Если ЕстьВидРасчета Тогда
			ПроверятьСпособРасчета = Метаданные.Документы[ИмяДокумента].ТабличныеЧасти[ТабличныеЧасти[Индекс].Имя].Реквизиты.ВидРасчета.Тип = ТипДополнительныеНачисленияОрганизаций;
		КонецЕсли;
		
		ЗапросыПоДокументу[Индекс] = Новый Запрос;
		
		ЗапросыПоДокументуВТ[Индекс] =
		"ВЫБРАТЬ
		|	РаботникиОрганизаций.*
		|ПОМЕСТИТЬ ВТРаботникиОрганизаций
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Сотрудник.Физлицо В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				Док." + ПолеФизлица + "
		|			ИЗ
		|				Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Док
		|			ГДЕ
		|				Док.Ссылка = &Приказ)";
		
		Если ИмяДокумента = "ПриемНаРаботуВОрганизацию" Тогда
			ЗапросыПоДокументуТекст1[Индекс] = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(Работники.Сотрудник, Документ.Сотрудник) КАК Сотрудник,
			|	Документ.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	Документ.ПриемНаРаботуВОрганизацию." + ТабличныеЧасти[Индекс].Имя + " КАК Документ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
			|		ПО Документ.Физлицо = Работники.УдалитьФизлицо
			|			И Документ.Ссылка = Работники.Регистратор
			|			И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
			|			И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|		ГДЕ
			|			Документ.Ссылка = &Приказ
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
			ЗапросыПоДокументуТекст2[Индекс] = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(Работники.Сотрудник, Документ.Сотрудник) КАК Сотрудник,
			|	Документ.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	Документ.ПриемНаРаботуВОрганизацию." + ТабличныеЧасти[Индекс].Имя + " КАК Документ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
			|		ПО Документ.Физлицо = Работники.УдалитьФизлицо
			|			И Документ.Ссылка = Работники.Регистратор
			|			И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
			|			И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|		ГДЕ
			|			Документ.Ссылка = &Приказ
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		//ИначеЕсли ИмяДокумента = "ОтражениеЗарплатыВРеглУчете" или ИмяДокумента = "РасчетЕСН" Тогда
		//	ЗапросыПоДокументуТекст1[Индекс] = 
		//	"ВЫБРАТЬ
		//	|	Работники.Сотрудник КАК Сотрудник,
		//	|	Документ.НомерСтроки КАК НомерСтроки
		//	|ИЗ
		//	|	Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ
		//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
		//	|		ПО Документ." + ПолеФизлица + " = Работники.УдалитьФизлицо
		//	|			И Документ.Приказ = Работники.Регистратор
		//	|			И Документ.Приказ.Организация = Работники.ОбособленноеПодразделение
		//	|			И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		//	|ГДЕ
		//	|	Документ.Ссылка = &Приказ
		//	|	//УСЛОВИЕ_НА_ВИДРАСЧЕТА
		//	|	//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
		//	|
		//	|ОБЪЕДИНИТЬ
		//	|
		//	|ВЫБРАТЬ
		//	|	РаботникиОрганизаций.Сотрудник,
		//	|	Периоды.НомерСтроки
		//	|ИЗ
		//	|	(ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК РаботникиОрганизаций
		//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		//	|			МИНИМУМ(ПериодыВсе.Период) КАК Период,
		//	|			ПериодыВсе.Физлицо КАК Физлицо,
		//	|			ПериодыВсе.Организация КАК Организация,
		//	|			ПериодыВсе.НомерСтроки КАК НомерСтроки
		//	|		ИЗ
		//	|			(ВЫБРАТЬ
		//	|				МАКСИМУМ(Работники.Период) КАК Период,
		//	|				Документ." + ПолеФизлица + " КАК Физлицо,
		//	|				Документ.Ссылка.Организация КАК Организация,
		//	|				Документ.НомерСтроки КАК НомерСтроки
		//	|			ИЗ
		//	|				Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
		//	Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
		//	ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
		//	|					ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
		//	|					ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизлица + "
		//	|						И Документ.Приказ = Даты.Приказ
		//	|						И Документ.Ссылка = Даты.Ссылка";
		//	КонецЕсли;
		//	ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
		//	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
		//	|					ПО Документ." + ПолеФизлица + " = Работники.УдалитьФизлицо
		//	|						И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
		//	|						И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		//	|						И Документ.Ссылка = &Приказ
		//	|						И Документ.Приказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка)";
		//	Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
		//	ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
		//	|						И Работники.Период <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
		//	Иначе
		//	ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
		//	|						И Работники.Период <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
		//	КонецЕсли;
		//	ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
		//	|						//УСЛОВИЕ_НА_ВИДРАСЧЕТА
		//	|						//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
		//	|			
		//	|			СГРУППИРОВАТЬ ПО
		//	|				Документ." + ПолеФизлица + ",
		//	|				Документ.Ссылка.Организация,
		//	|				Документ.НомерСтроки
		//	|			
		//	|			ОБЪЕДИНИТЬ
		//	|			
		//	|			ВЫБРАТЬ
		//	|				МАКСИМУМ(Работники.Период),
		//	|				Документ." + ПолеФизлица + ",
		//	|				Документ.Ссылка.Организация,
		//	|				Документ.НомерСтроки
		//	|			ИЗ
		//	|				Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
		//	Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
		//	ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
		//	|					ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
		//	|					ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизлица + "
		//	|						И Документ.Приказ = Даты.Приказ
		//	|						И Документ.Ссылка = Даты.Ссылка";
		//	КонецЕсли;
		//	ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
		//	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
		//	|					ПО Документ." + ПолеФизлица + " = Работники.УдалитьФизлицо
		//	|						И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
		//	|						И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		//	|						И Документ.Ссылка = &Приказ
		//	|						И Документ.Приказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка)";
		//	Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
		//	ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
		//	|						И Работники.Период > " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
		//	Иначе
		//	ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
		//	|						И Работники.Период > " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
		//	КонецЕсли;
		//	ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
		//	|						//УСЛОВИЕ_НА_ВИДРАСЧЕТА
		//	|						//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
		//	|			
		//	|			СГРУППИРОВАТЬ ПО
		//	|				Документ." + ПолеФизлица + ",
		//	|				Документ.Ссылка.Организация,
		//	|				Документ.НомерСтроки) КАК ПериодыВсе
		//	|		
		//	|		СГРУППИРОВАТЬ ПО
		//	|			ПериодыВсе.Физлицо,
		//	|			ПериодыВсе.Организация,
		//	|			ПериодыВсе.НомерСтроки) КАК Периоды
		//	|		ПО РаботникиОрганизаций.УдалитьФизлицо = Периоды.Физлицо
		//	|			И РаботникиОрганизаций.ОбособленноеПодразделение = Периоды.Организация
		//	|			И РаботникиОрганизаций.Период = Периоды.Период
		//	|
		//	|ОБЪЕДИНИТЬ
		//	|
		//	|ВЫБРАТЬ
		//	|	ПриказыДоДокумента.Сотрудник,
		//	|	ПриказыДоДокумента.НомерСтроки
		//	|ИЗ
		//	|	(ВЫБРАТЬ
		//	|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник КАК Сотрудник,
		//	|		Периоды.НомерСтроки КАК НомерСтроки
		//	|	ИЗ
		//	|		(ВЫБРАТЬ
		//	|			МАКСИМУМ(НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ)) КАК Период,
		//	|			Документ." + ПолеФизлица + " КАК Физлицо,
		//	|			Документ.Ссылка.Организация КАК Организация,
		//	|			Документ.НомерСтроки КАК НомерСтроки
		//	|		ИЗ
		//	|			Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
		//	Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
		//	ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
		//	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
		//	|				ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизлица + "
		//	|					И Документ.Приказ = Даты.Приказ
		//	|					И Документ.Ссылка = Даты.Ссылка";
		//	КонецЕсли;
		//	ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
		//	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		//	|				ПО Документ." + ПолеФизлица + " = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
		//	|					И Документ.Ссылка.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация
		//	|					И Документ.Ссылка = &Приказ
		//	|					И Документ.Приказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка)";
		//	Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
		//	ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
		//	|					И НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ) <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
		//	Иначе
		//	ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
		//	|					И НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ) <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
		//	КонецЕсли;
		//	ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
		//	|					//УСЛОВИЕ_НА_ВИДРАСЧЕТА
		//	|					//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
		//	|		
		//	|		СГРУППИРОВАТЬ ПО
		//	|			Документ." + ПолеФизлица + ",
		//	|			Документ.Ссылка.Организация,
		//	|			Документ.НомерСтроки) КАК Периоды
		//	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		//	|			ПО (Периоды.Период = НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ))
		//	|				И Периоды.Физлицо = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
		//	|				И Периоды.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация) КАК ПриказыДоДокумента
		//	|
		//	|УПОРЯДОЧИТЬ ПО
		//	|	НомерСтроки";
		//	
		//	ЗапросыПоДокументуТекст2[Индекс] = 
		//	"ВЫБРАТЬ
		//	|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		//	|	Периоды.НомерСтроки КАК НомерСтроки
		//	|ИЗ
		//	|	(ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК РаботникиОрганизаций
		//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		//	|			МИНИМУМ(ПериодыВсе.Период) КАК Период,
		//	|			ПериодыВсе.Физлицо КАК Физлицо,
		//	|			ПериодыВсе.Организация КАК Организация,
		//	|			ПериодыВсе.НомерСтроки КАК НомерСтроки
		//	|		ИЗ
		//	|			(ВЫБРАТЬ
		//	|				МАКСИМУМ(Работники.Период) КАК Период,
		//	|				Документ." + ПолеФизлица + " КАК Физлицо,
		//	|				Документ.Ссылка.Организация КАК Организация,
		//	|				Документ.НомерСтроки КАК НомерСтроки
		//	|			ИЗ
		//	|				Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
		//	Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
		//	ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
		//	|					ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
		//	|					ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизлица + "
		//	|						И Документ.Приказ = Даты.Приказ
		//	|						И Документ.Ссылка = Даты.Ссылка";
		//	КонецЕсли;
		//	ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
		//	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
		//	|					ПО Документ." + ПолеФизлица + " = Работники.УдалитьФизлицо
		//	|						И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
		//	|						И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		//	|						И Документ.Ссылка = &Приказ
		//	|						И Документ.Приказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка)";
		//	Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
		//	ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
		//	|						И Работники.Период <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
		//	Иначе
		//	ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
		//	|						И Работники.Период <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
		//	КонецЕсли;
		//	ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
		//	|						//УСЛОВИЕ_НА_ВИДРАСЧЕТА
		//	|						//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
		//	|			
		//	|			СГРУППИРОВАТЬ ПО
		//	|				Документ." + ПолеФизлица + ",
		//	|				Документ.Ссылка.Организация,
		//	|				Документ.НомерСтроки
		//	|			
		//	|			ОБЪЕДИНИТЬ
		//	|			
		//	|			ВЫБРАТЬ
		//	|				МАКСИМУМ(Работники.Период),
		//	|				Документ." + ПолеФизлица + ",
		//	|				Документ.Ссылка.Организация,
		//	|				Документ.НомерСтроки
		//	|			ИЗ
		//	|				Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
		//	Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
		//	ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
		//	|					ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
		//	|					ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизлица + "
		//	|						И Документ.Приказ = Даты.Приказ
		//	|						И Документ.Ссылка = Даты.Ссылка";
		//	КонецЕсли;
		//	ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
		//	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
		//	|					ПО Документ." + ПолеФизлица + " = Работники.УдалитьФизлицо
		//	|						И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
		//	|						И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		//	|						И Документ.Ссылка = &Приказ";
		//	Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
		//	ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
		//	|						И Работники.Период > " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
		//	Иначе
		//	ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
		//	|						И Работники.Период > " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
		//	КонецЕсли;
		//	ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
		//	|						//УСЛОВИЕ_НА_ВИДРАСЧЕТА
		//	|						//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
		//	|			
		//	|			СГРУППИРОВАТЬ ПО
		//	|				Документ." + ПолеФизлица + ",
		//	|				Документ.Ссылка.Организация,
		//	|				Документ.НомерСтроки) КАК ПериодыВсе
		//	|		
		//	|		СГРУППИРОВАТЬ ПО
		//	|			ПериодыВсе.Физлицо,
		//	|			ПериодыВсе.Организация,
		//	|			ПериодыВсе.НомерСтроки) КАК Периоды
		//	|		ПО РаботникиОрганизаций.УдалитьФизлицо = Периоды.Физлицо
		//	|			И РаботникиОрганизаций.ОбособленноеПодразделение = Периоды.Организация
		//	|			И РаботникиОрганизаций.Период = Периоды.Период
		//	|
		//	|ОБЪЕДИНИТЬ
		//	|
		//	|ВЫБРАТЬ
		//	|	ПриказыДоДокумента.Сотрудник,
		//	|	ПриказыДоДокумента.НомерСтроки
		//	|ИЗ
		//	|	(ВЫБРАТЬ
		//	|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник КАК Сотрудник,
		//	|		Периоды.НомерСтроки КАК НомерСтроки
		//	|	ИЗ
		//	|		(ВЫБРАТЬ
		//	|			МАКСИМУМ(НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ)) КАК Период,
		//	|			Документ." + ПолеФизлица + " КАК Физлицо,
		//	|			Документ.Ссылка.Организация КАК Организация,
		//	|			Документ.НомерСтроки КАК НомерСтроки
		//	|		ИЗ
		//	|			Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
		//	Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
		//	ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
		//	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
		//	|				ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизлица + "
		//	|					И Документ.Приказ = Даты.Приказ
		//	|					И Документ.Ссылка = Даты.Ссылка";
		//	КонецЕсли;
		//	ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
		//	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		//	|				ПО Документ." + ПолеФизлица + " = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
		//	|					И Документ.Ссылка.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация
		//	|					И Документ.Ссылка = &Приказ";
		//	Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
		//	ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
		//	|					И НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ) <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
		//	Иначе
		//	ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
		//	|					И НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ) <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
		//	КонецЕсли;
		//	ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
		//	|					//УСЛОВИЕ_НА_ВИДРАСЧЕТА
		//	|					//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
		//	|		
		//	|		СГРУППИРОВАТЬ ПО
		//	|			Документ." + ПолеФизлица + ",
		//	|			Документ.Ссылка.Организация,
		//	|			Документ.НомерСтроки) КАК Периоды
		//	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		//	|			ПО (Периоды.Период = НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ))
		//	|				И Периоды.Физлицо = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
		//	|				И Периоды.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация) КАК ПриказыДоДокумента
		//	|
		//	|УПОРЯДОЧИТЬ ПО
		//	|	НомерСтроки";	
		//Оригинал	
		Иначе
			ЗапросыПоДокументуТекст1[Индекс] = 
			"ВЫБРАТЬ
			|	Работники.Сотрудник КАК Сотрудник,
			|	Документ.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
			|		ПО Документ." + ПолеФизлица + " = Работники.УдалитьФизлицо
			|			И Документ.УдалитьПриказ = Работники.Регистратор
			|			И Документ.УдалитьПриказ.Организация = Работники.ОбособленноеПодразделение
			|			И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|ГДЕ
			|	Документ.Ссылка = &Приказ
			|	//УСЛОВИЕ_НА_ВИДРАСЧЕТА
			|	//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	РаботникиОрганизаций.Сотрудник,
			|	Периоды.НомерСтроки
			|ИЗ
			|	(ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК РаботникиОрганизаций
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			МИНИМУМ(ПериодыВсе.Период) КАК Период,
			|			ПериодыВсе.Физлицо КАК Физлицо,
			|			ПериодыВсе.Организация КАК Организация,
			|			ПериодыВсе.НомерСтроки КАК НомерСтроки
			|		ИЗ
			|			(ВЫБРАТЬ
			|				МАКСИМУМ(Работники.Период) КАК Период,
			|				Документ." + ПолеФизлица + " КАК Физлицо,
			|				Документ.Ссылка.Организация КАК Организация,
			|				Документ.НомерСтроки КАК НомерСтроки
			|			ИЗ
			|				Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|					ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
			|					ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизлица + "
			|						И Документ.УдалитьПриказ = Даты.УдалитьПриказ
			|						И Документ.Ссылка = Даты.Ссылка";
			КонецЕсли;
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
			|					ПО Документ." + ПолеФизлица + " = Работники.УдалитьФизлицо
			|						И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
			|						И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|						И Документ.Ссылка = &Приказ
			|						И Документ.УдалитьПриказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка)";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|						И Работники.Период <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
			Иначе
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|						И Работники.Период <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
			КонецЕсли;
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|						//УСЛОВИЕ_НА_ВИДРАСЧЕТА
			|						//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
			|			
			|			СГРУППИРОВАТЬ ПО
			|				Документ." + ПолеФизлица + ",
			|				Документ.Ссылка.Организация,
			|				Документ.НомерСтроки
			|			
			|			ОБЪЕДИНИТЬ
			|			
			|			ВЫБРАТЬ
			|				МАКСИМУМ(Работники.Период),
			|				Документ." + ПолеФизлица + ",
			|				Документ.Ссылка.Организация,
			|				Документ.НомерСтроки
			|			ИЗ
			|				Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|					ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
			|					ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизлица + "
			|						И Документ.УдалитьПриказ = Даты.УдалитьПриказ
			|						И Документ.Ссылка = Даты.Ссылка";
			КонецЕсли;
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
			|					ПО Документ." + ПолеФизлица + " = Работники.УдалитьФизлицо
			|						И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
			|						И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|						И Документ.Ссылка = &Приказ
			|						И Документ.УдалитьПриказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка)";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|						И Работники.Период > " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
			Иначе
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|						И Работники.Период > " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
			КонецЕсли;
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|						//УСЛОВИЕ_НА_ВИДРАСЧЕТА
			|						//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
			|			
			|			СГРУППИРОВАТЬ ПО
			|				Документ." + ПолеФизлица + ",
			|				Документ.Ссылка.Организация,
			|				Документ.НомерСтроки) КАК ПериодыВсе
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ПериодыВсе.Физлицо,
			|			ПериодыВсе.Организация,
			|			ПериодыВсе.НомерСтроки) КАК Периоды
			|		ПО РаботникиОрганизаций.УдалитьФизлицо = Периоды.Физлицо
			|			И РаботникиОрганизаций.ОбособленноеПодразделение = Периоды.Организация
			|			И РаботникиОрганизаций.Период = Периоды.Период
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПриказыДоДокумента.Сотрудник,
			|	ПриказыДоДокумента.НомерСтроки
			|ИЗ
			|	(ВЫБРАТЬ
			|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник КАК Сотрудник,
			|		Периоды.НомерСтроки КАК НомерСтроки
			|	ИЗ
			|		(ВЫБРАТЬ
			|			МАКСИМУМ(НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ)) КАК Период,
			|			Документ." + ПолеФизлица + " КАК Физлицо,
			|			Документ.Ссылка.Организация КАК Организация,
			|			Документ.НомерСтроки КАК НомерСтроки
			|		ИЗ
			|			Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|				ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
			|				ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизлица + "
			|					И Документ.УдалитьПриказ = Даты.УдалитьПриказ
			|					И Документ.Ссылка = Даты.Ссылка";
			КонецЕсли;
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
			|				ПО Документ." + ПолеФизлица + " = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
			|					И Документ.Ссылка.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация
			|					И Документ.Ссылка = &Приказ
			|					И Документ.УдалитьПриказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка)";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|					И НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ) <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
			Иначе
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|					И НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ) <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
			КонецЕсли;
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|					//УСЛОВИЕ_НА_ВИДРАСЧЕТА
			|					//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
			|		
			|		СГРУППИРОВАТЬ ПО
			|			Документ." + ПолеФизлица + ",
			|			Документ.Ссылка.Организация,
			|			Документ.НомерСтроки) КАК Периоды
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
			|			ПО (Периоды.Период = НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ))
			|				И Периоды.Физлицо = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
			|				И Периоды.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация) КАК ПриказыДоДокумента
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
			ЗапросыПоДокументуТекст2[Индекс] = 
			"ВЫБРАТЬ
			|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
			|	Периоды.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	(ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК РаботникиОрганизаций
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			МИНИМУМ(ПериодыВсе.Период) КАК Период,
			|			ПериодыВсе.Физлицо КАК Физлицо,
			|			ПериодыВсе.Организация КАК Организация,
			|			ПериодыВсе.НомерСтроки КАК НомерСтроки
			|		ИЗ
			|			(ВЫБРАТЬ
			|				МАКСИМУМ(Работники.Период) КАК Период,
			|				Документ." + ПолеФизлица + " КАК Физлицо,
			|				Документ.Ссылка.Организация КАК Организация,
			|				Документ.НомерСтроки КАК НомерСтроки
			|			ИЗ
			|				Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
			|					ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизлица + "
			|						И Документ.УдалитьПриказ = Даты.УдалитьПриказ
			|						И Документ.Ссылка = Даты.Ссылка";
			КонецЕсли;
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
			|					ПО Документ." + ПолеФизлица + " = Работники.УдалитьФизлицо
			|						И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
			|						И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|						И Документ.Ссылка = &Приказ
			|						И Документ.УдалитьПриказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка)";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|						И Работники.Период <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
			Иначе
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|						И Работники.Период <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
			КонецЕсли;
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|						//УСЛОВИЕ_НА_ВИДРАСЧЕТА
			|						//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
			|			
			|			СГРУППИРОВАТЬ ПО
			|				Документ." + ПолеФизлица + ",
			|				Документ.Ссылка.Организация,
			|				Документ.НомерСтроки
			|			
			|			ОБЪЕДИНИТЬ
			|			
			|			ВЫБРАТЬ
			|				МАКСИМУМ(Работники.Период),
			|				Документ." + ПолеФизлица + ",
			|				Документ.Ссылка.Организация,
			|				Документ.НомерСтроки
			|			ИЗ
			|				Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
			|					ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизлица + "
			|						И Документ.УдалитьПриказ = Даты.УдалитьПриказ
			|						И Документ.Ссылка = Даты.Ссылка";
			КонецЕсли;
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
			|					ПО Документ." + ПолеФизлица + " = Работники.УдалитьФизлицо
			|						И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
			|						И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|						И Документ.Ссылка = &Приказ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|						И Работники.Период > " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
			Иначе
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|						И Работники.Период > " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
			КонецЕсли;
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|						//УСЛОВИЕ_НА_ВИДРАСЧЕТА
			|						//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
			|			
			|			СГРУППИРОВАТЬ ПО
			|				Документ." + ПолеФизлица + ",
			|				Документ.Ссылка.Организация,
			|				Документ.НомерСтроки) КАК ПериодыВсе
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ПериодыВсе.Физлицо,
			|			ПериодыВсе.Организация,
			|			ПериодыВсе.НомерСтроки) КАК Периоды
			|		ПО РаботникиОрганизаций.УдалитьФизлицо = Периоды.Физлицо
			|			И РаботникиОрганизаций.ОбособленноеПодразделение = Периоды.Организация
			|			И РаботникиОрганизаций.Период = Периоды.Период
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПриказыДоДокумента.Сотрудник,
			|	ПриказыДоДокумента.НомерСтроки
			|ИЗ
			|	(ВЫБРАТЬ
			|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник КАК Сотрудник,
			|		Периоды.НомерСтроки КАК НомерСтроки
			|	ИЗ
			|		(ВЫБРАТЬ
			|			МАКСИМУМ(НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ)) КАК Период,
			|			Документ." + ПолеФизлица + " КАК Физлицо,
			|			Документ.Ссылка.Организация КАК Организация,
			|			Документ.НомерСтроки КАК НомерСтроки
			|		ИЗ
			|			Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|				ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
			|				ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизлица + "
			|					И Документ.УдалитьПриказ = Даты.УдалитьПриказ
			|					И Документ.Ссылка = Даты.Ссылка";
			КонецЕсли;
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
			|				ПО Документ." + ПолеФизлица + " = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
			|					И Документ.Ссылка.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация
			|					И Документ.Ссылка = &Приказ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					И НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ) <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
			Иначе
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					И НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ) <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
			КонецЕсли;
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					//УСЛОВИЕ_НА_ВИДРАСЧЕТА
			|					//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
			|		
			|		СГРУППИРОВАТЬ ПО
			|			Документ." + ПолеФизлица + ",
			|			Документ.Ссылка.Организация,
			|			Документ.НомерСтроки) КАК Периоды
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
			|			ПО (Периоды.Период = НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ))
			|				И Периоды.Физлицо = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
			|				И Периоды.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация) КАК ПриказыДоДокумента
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
		КонецЕсли;
		
		Если ПроверятьСпособРасчета Тогда
			ЗапросыПоДокументуТекст1[Индекс] = СтрЗаменить(ЗапросыПоДокументуТекст1[Индекс], "//УСЛОВИЕ_НА_ВИДРАСЧЕТА", "И Документ.ВидРасчета.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой)");
			ЗапросыПоДокументуТекст2[Индекс] = СтрЗаменить(ЗапросыПоДокументуТекст2[Индекс], "//УСЛОВИЕ_НА_ВИДРАСЧЕТА", "И Документ.ВидРасчета.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой)");
		КонецЕсли;
		
		Если ИмяДокумента = "СдельныйНаряд" Тогда
			ЗапросыПоДокументуТекст1[Индекс] = СтрЗаменить(ЗапросыПоДокументуТекст1[Индекс], "//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД", "И Документ.Ссылка.ОтражатьВБухгалтерскомУчете");
			ЗапросыПоДокументуТекст2[Индекс] = СтрЗаменить(ЗапросыПоДокументуТекст2[Индекс], "//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД", "И Документ.Ссылка.ОтражатьВБухгалтерскомУчете");
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	ЗапросПоДокументуТекстВводПроцентаДеятельностиЕНВД = 
	"ВЫБРАТЬ
	|	Работники.Сотрудник,
	|	Периоды.НомерСтроки КАК НомерСтроки,
	|	ПриказыТекущегоМесяца.Сотрудник КАК РаботникТекущегоМесяца
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(Работники.Период) КАК Период,
	|		Документ.ФизЛицо КАК Физлицо,
	|		Документ.Ссылка.Организация КАК Организация,
	|		Документ.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		Документ.ВводПроцентаДеятельностиЕНВД.РаботникиОрганизации КАК Документ
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
	|			ПО Документ.ФизЛицо = Работники.УдалитьФизлицо
	|				И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
	|				И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|				И Работники.Период <= КОНЕЦПЕРИОДА(Документ.Ссылка.Период, МЕСЯЦ)
	|				И Документ.Ссылка = &Приказ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Документ.ФизЛицо,
	|		Документ.Ссылка.Организация,
	|		Документ.НомерСтроки) КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
	|		ПО Периоды.Период = Работники.Период
	|			И Периоды.Физлицо = Работники.УдалитьФизлицо
	|			И Периоды.Организация = Работники.ОбособленноеПодразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Работники.Сотрудник КАК Сотрудник,
	|			Работники.УдалитьФизлицо КАК Физлицо
	|		ИЗ
	|			Документ.ВводПроцентаДеятельностиЕНВД.РаботникиОрганизации КАК Документ
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ * ИЗ ВТРаботникиОрганизаций) КАК Работники
	|				ПО (НАЧАЛОПЕРИОДА(Документ.Ссылка.Период, МЕСЯЦ) >= Работники.Период)
	|					И КОНЕЦПЕРИОДА(Документ.Ссылка.Период, МЕСЯЦ) <= Работники.Период
	|					И Документ.ФизЛицо = Работники.УдалитьФизлицо
	|					И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
	|					И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)) КАК ПриказыТекущегоМесяца
	|		ПО Периоды.Физлицо = ПриказыТекущегоМесяца.Физлицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		ПоддержкаВнутреннегоСовместительства = БылаПоддержкаВнутреннегоСовместительства(Выборка.Организация);

		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		#Если Клиент Тогда
			Состояние("Документ." + ИмяДокумента + ".ТабличныеЧасти. Обрабатывается документ " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		Для Индекс = 0 По ЗапросыПоДокументу.Количество() - 1 Цикл
			ЗапросыПоДокументу[Индекс].УстановитьПараметр("Приказ",	Выборка.Документ);
			
			МТ = Новый МенеджерВременныхТаблиц;
			ЗапросыПоДокументу[Индекс].МенеджерВременныхТаблиц = МТ;
			
			ЗапросыПоДокументу[Индекс].Текст = ЗапросыПоДокументуВТ[Индекс];
			ЗапросыПоДокументу[Индекс].Выполнить();
			
			Если ПоддержкаВнутреннегоСовместительства Тогда
				ЗапросыПоДокументу[Индекс].Текст = ЗапросыПоДокументуТекст1[Индекс];
			Иначе
				Если ИмяДокумента = "ВводПроцентаДеятельностиЕНВД" Тогда
					ЗапросыПоДокументу[Индекс].Текст = ЗапросПоДокументуТекстВводПроцентаДеятельностиЕНВД;
				Иначе
					ЗапросыПоДокументу[Индекс].Текст = ЗапросыПоДокументуТекст2[Индекс];
				КонецЕсли;
			КонецЕсли;
		
			ВыборкаПоДокументу = ЗапросыПоДокументу[Индекс].Выполнить().Выбрать();
			
			МТ.Закрыть();
			
			Пока ВыборкаПоДокументу.Следующий() Цикл
				Строка = ДокументОбъект[ТабличныеЧасти[Индекс].Имя].Найти(ВыборкаПоДокументу.НомерСтроки, "НомерСтроки");
				Строка.Сотрудник = ВыборкаПоДокументу.Сотрудник;
				
				Если Не ПоддержкаВнутреннегоСовместительства И (ИмяДокумента = "ВводПроцентаДеятельностиЕНВД") Тогда
					// особым образом обрабатываем данные процента деятельности - нужно при необходимости 
					// "размножать" строки набора записей
					Если	ВыборкаПоДокументу.РаботникТекущегоМесяца <> ВыборкаПоДокументу.Сотрудник И
							ВыборкаПоДокументу.РаботникТекущегоМесяца <> Null И 
							ВыборкаПоДокументу.Сотрудник <> Null Тогда
							
						НоваяСтрока = ДокументОбъект.РаботникиОрганизации.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
						НоваяСтрока.Сотрудник = ВыборкаПоДокументу.РаботникТекущегоМесяца;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСотрудниковОрганизаций()
	
	// сначала регистрируем сотрудников
	РегистрацияСотрудниковОрганизацийПоРегистру();
	РегистрацияСотрудниковОрганизацийПоДокументу();
	
	//////////////////////////////////////////////////////////////
	// Регистры
	
	// заполним регистр сведений РаботникиОрганизаций для записей, которым еще не проставлен Сотрудник
	ЗаполнитьНаборЗаписейОрганизаций("Период", РегистрыСведений, "РаботникиОрганизаций", 
	"(НЕ Регистр.Регистратор ССЫЛКА Документ.ПриемНаРаботуВОрганизацию) И ");
	
	// ГрафикОтпусковОрганизаций
	ЗаполнитьНаборЗаписейОрганизаций("Период", РегистрыСведений, "ГрафикОтпусковОрганизаций");
	
	// КоэффициентИндексацииЗаработка
	//ЗаполнитьНаборЗаписейОрганизаций("Период", РегистрыСведений, "КоэффициентИндексацииЗаработка");
	
	// НамеченныеСобытияПоПерсоналуОрганизаций
	ЗаполнитьНаборЗаписейОрганизаций("ДатаИзменения", РегистрыСведений, "УдалитьНамеченныеСобытияПоПерсоналуОрганизаций");
	
	// ПлановыеНачисленияРаботниковОрганизаций
	ЗаполнитьНаборЗаписейОрганизаций("Период", РегистрыСведений, "ПлановыеНачисленияРаботниковОрганизаций");
	
	// УдалитьПроцентДеятельностиЕНВД
	//ЗаполнитьНаборЗаписейОрганизаций("Период", РегистрыСведений, "УдалитьПроцентДеятельностиЕНВД", , Истина);
	
	// РеглУчетПлановыхНачисленийРаботниковОрганизаций
	ЗаполнитьНаборЗаписейОрганизаций("Период", РегистрыСведений, "РеглУчетПлановыхНачисленийРаботниковОрганизаций");
	
	// СостояниеРаботниковОрганизаций
	ЗаполнитьНаборЗаписейОрганизаций("Период", РегистрыСведений, "СостояниеРаботниковОрганизаций");
	
	// УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете
	ЗаполнитьНаборЗаписейОрганизаций("Период", РегистрыСведений, "УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете");
	
	// РабочееВремяРаботниковОрганизаций
	ЗаполнитьНаборЗаписейОрганизаций("Период", РегистрыНакопления, "РабочееВремяРаботниковОрганизаций");
	
	// ФактическаяВыработкаРаботниковОрганизаций
	ЗаполнитьНаборЗаписейОрганизаций("Период", РегистрыНакопления, "ФактическаяВыработкаРаботниковОрганизаций");
	
	// БУДополнительныеНачисления
	ЗаполнитьНаборЗаписейОрганизаций("ПериодРегистрации", РегистрыРасчета, "БУДополнительныеНачисления", , Истина);
	
	// БУОсновныеНачисления
	ЗаполнитьНаборЗаписейОрганизаций("ПериодДействияНачало", РегистрыРасчета, "БУОсновныеНачисления");
	
	// ДополнительныеНачисленияРаботниковОрганизаций
	ЗаполнитьНаборЗаписейОрганизаций("ПериодРегистрации", РегистрыРасчета, "ДополнительныеНачисленияРаботниковОрганизаций", , Истина);
	
	// ЕСНДополнительныеНачисления
	ЗаполнитьНаборЗаписейОрганизаций("ПериодРегистрации", РегистрыРасчета, "ЕСНДополнительныеНачисления", , Истина);
	
	// ЕСНОсновныеНачисления
	ЗаполнитьНаборЗаписейОрганизаций("ПериодДействияНачало", РегистрыРасчета, "ЕСНОсновныеНачисления");
	
	// ОсновныеНачисленияРаботниковОрганизаций
	ЗаполнитьНаборЗаписейОрганизаций("ПериодДействияНачало", РегистрыРасчета, "ОсновныеНачисленияРаботниковОрганизаций");
	
	// РасчетСреднегоЗаработка
	ЗаполнитьНаборЗаписейОрганизаций("БазовыйПериодНачало", РегистрыРасчета, "РасчетСреднегоЗаработка");
	
	// УдержанияРаботниковОрганизаций
	ЗаполнитьНаборЗаписейОрганизаций("ПериодРегистрации", РегистрыРасчета, "УдержанияРаботниковОрганизаций", , Истина);
	
	//////////////////////////////////////////////////////////////
	// Документы
	
	// ВводКоэффициентовИндексацииЗаработка
	//МассивТЧ = Новый Массив;
	//МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	//ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "Ссылка.Дата", "ВводКоэффициентовИндексацииЗаработка");
	
	// ВводПроцентаДеятельностиЕНВД
	//МассивТЧ = Новый Массив;
	//МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	//ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "Ссылка.Период", "ВводПроцентаДеятельностиЕНВД");
	
	// ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "ОсновныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаДействия", "ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "УдалитьДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаДействия", "ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций");
	
	// ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "ОсновныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "УдалитьДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций");
	
	// ВозвратНаРаботуОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаВозврата", "ВозвратНаРаботуОрганизаций");
	
	// ГрафикОтпусковОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "ГрафикОтпусковОрганизаций");
	
	// ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком
	ЗаполнитьДокументОрганизаций("ДатаИзменения", "ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "ОсновныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Ссылка.Физлицо", МассивТЧ, "Ссылка.ДатаИзменения", "ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "УдалитьДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Ссылка.Физлицо", МассивТЧ, "Ссылка.ДатаИзменения", "ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком");
	
	// КадровоеПеремещениеОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "РаботникиОрганизации"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "КадровоеПеремещениеОрганизаций");
	
	// КомандировкиОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "КомандировкиОрганизаций");
	
	// УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОтработанноеВремя", "ОтработанноеВремя"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени");
	
	// НачислениеЗарплатыРаботникамОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "НачислениеЗарплатыРаботникамОрганизаций");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ДополнительныеНачисления", "ДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "НачислениеЗарплатыРаботникамОрганизаций");
	
	// НачислениеОтпускаРаботникамОрганизаций
	ЗаполнитьДокументОрганизаций("ПериодРегистрации", "НачислениеОтпускаРаботникамОрганизаций");
	
	// НачислениеПоБольничномуЛисту
	ЗаполнитьДокументОрганизаций("ДатаНачала", "НачислениеПоБольничномуЛисту");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Ссылка.Физлицо", МассивТЧ, "Ссылка.ДатаНачала", "НачислениеПоБольничномуЛисту");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РасчетСреднего", "РасчетСреднего"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Ссылка.Физлицо", МассивТЧ, "Ссылка.ДатаНачала", "НачислениеПоБольничномуЛисту");
	
	// НевыходыВОрганизациях
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "НевыходыВОрганизациях");
	
	// ОплатаПоСреднемуЗаработку
	ЗаполнитьДокументОрганизаций("ДатаНачала", "ОплатаПоСреднемуЗаработку");
	
	// ОплатаПраздничныхИВыходныхДнейОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаВыхода", "ОплатаПраздничныхИВыходныхДнейОрганизаций");
	
	// ОплатаСверхурочныхЧасов
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаВыхода", "ОплатаСверхурочныхЧасов");
	
	// ОтпускаОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "ОтпускаОрганизаций");
	
	// ОтпускПоУходуЗаРебенком
	ЗаполнитьДокументОрганизаций("ДатаДействия", "ОтпускПоУходуЗаРебенком");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "ОсновныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Ссылка.Физлицо", МассивТЧ, "Ссылка.ДатаДействия", "ОтпускПоУходуЗаРебенком");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "УдалитьДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Ссылка.Физлицо", МассивТЧ, "Ссылка.ДатаДействия", "ОтпускПоУходуЗаРебенком");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РасчетСреднего", "РасчетСреднего"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Ссылка.Физлицо", МассивТЧ, "Ссылка.ДатаДействия", "ОтпускПоУходуЗаРебенком");
	
	// ОтражениеЗарплатыВРеглУчете
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "ОсновныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ПериодДействияНачало", "ОтражениеЗарплатыВРеглУчете");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ДополнительныеНачисления", "ДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "Ссылка.ПериодРегистрации", "ОтражениеЗарплатыВРеглУчете", Истина);
	
	// ОтсутствиеНаРаботеОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "ОтсутствиеНаРаботеОрганизаций");
	
	// ПремииРаботниковОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "Ссылка.ПериодРегистрации", "ПремииРаботниковОрганизаций", Истина);
	
	// ПриемНаРаботуВОрганизацию
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "РаботникиОрганизации"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаПриема", "ПриемНаРаботуВОрганизацию");
	
	// РасчетЕСН
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "ОсновныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ПериодДействияНачало", "РасчетЕСН");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ДополнительныеНачисления", "ДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "Ссылка.ПериодРегистрации", "РасчетЕСН", Истина);
	
	// РасчетПриУвольненииРаботникаОрганизаций
	ЗаполнитьДокументОрганизаций("ДатаУвольнения", "РасчетПриУвольненииРаботникаОрганизаций");
	
	// РегистрацияПростоевРаботниковОрганизаций
	ЗаполнитьДокументОрганизаций("ДатаНачала", "РегистрацияПростоевРаботниковОрганизаций");
	
	// РегистрацияРазовыхНачисленийРаботниковОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "ОсновныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "РегистрацияРазовыхНачисленийРаботниковОрганизаций");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ДополнительныеНачисления", "ДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "РегистрацияРазовыхНачисленийРаботниковОрганизаций");
	
	// СдельныйНаряд
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Исполнители", "Исполнители"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "УдалитьДатаНачала", "СдельныйНаряд");
	
	// УвольнениеИзОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаУвольнения", "УвольнениеИзОрганизаций");
	
	// УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаИзменения", "УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете");
	
КонецПроцедуры

Процедура ОбработатьЗаписиРегистраОсновныеНачисленияРаботниковОрганизаций()

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисленияОрганизаций.Ссылка
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок)";
	
	МассивНачислений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	МассивНачислений.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ);
	МассивНачислений.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам);
	МассивНачислений.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве);
	//МассивНачислений.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет);
	Запрос.УстановитьПараметр("ВидыРасчета", МассивНачислений);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистраторы.Регистратор КАК Регистратор,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации,
	|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец,
	|	ОсновныеНачисленияРаботниковОрганизаций.БазовыйПериодНачало,
	|	ОсновныеНачисленияРаботниковОрганизаций.БазовыйПериодКонец,
	|	ОсновныеНачисленияРаботниковОрганизаций.Активность,
	|	ОсновныеНачисленияРаботниковОрганизаций.Сторно,
	|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник,
	|	ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо,
	|	ОсновныеНачисленияРаботниковОрганизаций.Организация,
	|	ОсновныеНачисленияРаботниковОрганизаций.Результат,
	|	ОсновныеНачисленияРаботниковОрганизаций.ОтработаноДней,
	|	ОсновныеНачисленияРаботниковОрганизаций.ОтработаноЧасов,
	|	ОсновныеНачисленияРаботниковОрганизаций.ОтработаноДнейПоПятидневке,
	|	ОсновныеНачисленияРаботниковОрганизаций.НормаДней,
	|	ОсновныеНачисленияРаботниковОрганизаций.НормаЧасов,
	|	ОсновныеНачисленияРаботниковОрганизаций.НормаДнейПоПятидневке,
	|	ОсновныеНачисленияРаботниковОрганизаций.ОплаченоДнейЧасов,
	|	ОсновныеНачисленияРаботниковОрганизаций.ГрафикРаботы,
	|	ОсновныеНачисленияРаботниковОрганизаций.ВидУчетаВремени,
	|	ОсновныеНачисленияРаботниковОрганизаций.Показатель1,
	|	ОсновныеНачисленияРаботниковОрганизаций.Показатель2,
	|	ОсновныеНачисленияРаботниковОрганизаций.Показатель3,
	|	ОсновныеНачисленияРаботниковОрганизаций.Показатель4,
	|	ОсновныеНачисленияРаботниковОрганизаций.ДополнительныеДанные,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия,
	|	ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение,
	|	ОсновныеНачисленияРаботниковОрганизаций.Авторасчет,
	|	ВЫБОР
	|		КОГДА (НЕ ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета В (&ВидыРасчета))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ПустаяСсылка)
	//|		КОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенком)
	|		КОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.НеОбрабатывать)
	|		КОГДА (НЕ Регистраторы.ПервичныйДокумент ССЫЛКА Документ.НачислениеПоБольничномуЛисту)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ПустаяСсылка)
	|		КОГДА ВЫРАЗИТЬ(Регистраторы.ПервичныйДокумент КАК Документ.НачислениеПоБольничномуЛисту).ПособиеОтражаетсяВРеглУчетеТекущимДокументом
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.НеОбрабатывать)
	|		КОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенком)
	|		КОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйТравмаНаПроизводстве)
	|		КОГДА ВЫРАЗИТЬ(Регистраторы.ПервичныйДокумент КАК Документ.НачислениеПоБольничномуЛисту).ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ОбщееЗаболевание)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйОбщееЗаболевание)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйПрочий)
	|	КОНЕЦ КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете,
	|	ОсновныеНачисленияРаботниковОрганизаций.ВариантАлгоритмаРасчета
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Начисления.Регистратор КАК Регистратор,
	|		ВЫБОР
	|			КОГДА Начисления.Регистратор ССЫЛКА Документ.Сторнирование
	|				ТОГДА Начисления.Регистратор.СторнируемыйДокумент
	|			ИНАЧЕ Начисления.Регистратор
	|		КОНЕЦ КАК ПервичныйДокумент
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|	ГДЕ
	|		Начисления.ВидРасчета В(&ВидыРасчета)
	|		И Начисления.ВариантОбработкиЗаписиПриОтраженииВРеглУчете = ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ПустаяСсылка)) КАК Регистраторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|		ПО Регистраторы.Регистратор = ОсновныеНачисленияРаботниковОрганизаций.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки";
	
	НаборЗаписей = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Использование = Истина;
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	ТекстСообщения = "Обработка данных особым образом, отражающихся в учете";
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	Выборка = Запрос.Выполнить().Выбрать();
	ВсегоДоков = Выборка.Количество();
	Номер = 1;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),Выборка);
			Если Номер % 500 = 0 Тогда
				#Если Клиент Тогда
					Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
				#КонецЕсли
			КонецЕсли;
			Номер = Номер + 1;
		КонецЦикла; 
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
КонецПроцедуры

Процедура РегистрацияСотрудников()
	
	// создание сотрудников по приказам о приеме на работу
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТрудовойДоговор",		Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	Запрос.УстановитьПараметр("ДоговорУправленческий",	Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
	Запрос.УстановитьПараметр("ОсновноеМестоРаботы",	Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	Запрос.УстановитьПараметр("Совместительство",		Перечисления.ВидыЗанятостиВОрганизации.Совместительство);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Работники.Регистратор КАК Приказ,
	|	Работники.УдалитьТабельныйНомер КАК Код,
	|	Работники.ФизЛицо.Наименование КАК Наименование,
	|	Работники.ФизЛицо КАК Физлицо,
	|	ИСТИНА КАК Актуальность
	|ИЗ
	|	РегистрСведений.Работники КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Работники КАК ПриемНаРаботуРаботники
	|		ПО Работники.НомерСтроки = ПриемНаРаботуРаботники.НомерСтроки
	|			И Работники.Регистратор = ПриемНаРаботуРаботники.Ссылка
	|			И (Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА (НЕ РаботникиОсновноеМесто.Сотрудник ЕСТЬ NULL )
	|					ТОГДА РаботникиОсновноеМесто.Сотрудник
	|				КОГДА (НЕ РаботникиСовместительство.Сотрудник ЕСТЬ NULL )
	|					ТОГДА РаботникиСовместительство.Сотрудник
	|				КОГДА (НЕ СотрудникиДУ.Сотрудник ЕСТЬ NULL )
	|					ТОГДА СотрудникиДУ.Сотрудник
	|				ИНАЧЕ NULL
	|			КОНЕЦ КАК Сотрудник,
	|			ВЫБОР
	|				КОГДА (НЕ РаботникиОсновноеМесто.Физлицо ЕСТЬ NULL )
	|					ТОГДА РаботникиОсновноеМесто.Физлицо
	|				КОГДА (НЕ РаботникиСовместительство.Физлицо ЕСТЬ NULL )
	|					ТОГДА РаботникиСовместительство.Физлицо
	|				КОГДА (НЕ СотрудникиДУ.Физлицо ЕСТЬ NULL )
	|					ТОГДА СотрудникиДУ.Физлицо
	|				ИНАЧЕ NULL
	|			КОНЕЦ КАК Физлицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(СотрудникиДУ.Ссылка) КАК Сотрудник,
	|				СотрудникиДУ.Физлицо КАК Физлицо
	|			ИЗ
	|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
	|			ГДЕ
	|				СотрудникиДУ.ВидДоговора = &ДоговорУправленческий
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СотрудникиДУ.Физлицо) КАК СотрудникиДУ
	|				ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
	|					РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо
	|				ИЗ
	|					РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|						,
	|						Сотрудник.ВидДоговора = &ТрудовойДоговор
	|							И Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы) КАК РаботникиОсновноеМесто
	|				ГДЕ
	|					РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					РаботникиОсновноеМесто.Сотрудник.Физлицо) КАК РаботникиОсновноеМесто
	|					ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|						МАКСИМУМ(РаботникиСовместительство.Сотрудник) КАК Сотрудник,
	|						РаботникиСовместительство.Сотрудник.Физлицо КАК Физлицо
	|					ИЗ
	|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|							,
	|							Сотрудник.ВидДоговора = &ТрудовойДоговор
	|								И Сотрудник.ВидЗанятости = &Совместительство) КАК РаботникиСовместительство
	|					ГДЕ
	|						РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					
	|					СГРУППИРОВАТЬ ПО
	|						РаботникиСовместительство.Сотрудник.Физлицо) КАК РаботникиСовместительство
	|					ПО РаботникиОсновноеМесто.Физлицо = РаботникиСовместительство.Физлицо
	|				ПО СотрудникиДУ.Физлицо = РаботникиОсновноеМесто.Физлицо) КАК Сотрудники
	|		ПО Работники.ФизЛицо = Сотрудники.Физлицо
	|ГДЕ
	|	Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|	И ВЫБОР
	|			КОГДА ПриемНаРаботуРаботники.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|				ТОГДА Сотрудники.Сотрудник
	|			ИНАЧЕ ПриемНаРаботуРаботники.Сотрудник
	|		КОНЕЦ ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приказ,
	|	Работники.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Приказ") Цикл
		#Если Клиент Тогда
			Состояние("Сотрудники компании: " + Выборка.Приказ);
		#КонецЕсли
		
		Пока Выборка.Следующий() Цикл
			Сотрудник = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Сотрудник, Выборка);
			Сотрудник.ВидДоговора	= Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий;
			Сотрудник.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СозданиеСотрудниковДляОшибочныхДанных()
	
	// создание сотрудников по приказам о приеме на работу
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТрудовойДоговор",		Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	Запрос.УстановитьПараметр("ДоговорУправленческий",	Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
	Запрос.УстановитьПараметр("ОсновноеМестоРаботы",	Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	Запрос.УстановитьПараметр("Совместительство",		Перечисления.ВидыЗанятостиВОрганизации.Совместительство);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СобытиеРаботникиОрганизации.Ссылка КАК Приказ,
	|	СобытиеРаботникиОрганизации.ФизЛицо.Наименование КАК Наименование,
	|	СобытиеРаботникиОрганизации.ФизЛицо КАК Физлицо,
	|	ИСТИНА КАК Актуальность
	|ИЗ
	|	Документ.Событие.РаботникиОрганизации КАК СобытиеРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА (НЕ РаботникиОсновноеМесто.Сотрудник ЕСТЬ NULL )
	|					ТОГДА РаботникиОсновноеМесто.Сотрудник
	|				КОГДА (НЕ РаботникиСовместительство.Сотрудник ЕСТЬ NULL )
	|					ТОГДА РаботникиСовместительство.Сотрудник
	|				КОГДА (НЕ СотрудникиДУ.Сотрудник ЕСТЬ NULL )
	|					ТОГДА СотрудникиДУ.Сотрудник
	|				ИНАЧЕ NULL
	|			КОНЕЦ КАК Сотрудник,
	|			ВЫБОР
	|				КОГДА (НЕ РаботникиОсновноеМесто.Физлицо ЕСТЬ NULL )
	|					ТОГДА РаботникиОсновноеМесто.Физлицо
	|				КОГДА (НЕ РаботникиСовместительство.Физлицо ЕСТЬ NULL )
	|					ТОГДА РаботникиСовместительство.Физлицо
	|				КОГДА (НЕ СотрудникиДУ.Физлицо ЕСТЬ NULL )
	|					ТОГДА СотрудникиДУ.Физлицо
	|				ИНАЧЕ NULL
	|			КОНЕЦ КАК Физлицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(СотрудникиДУ.Ссылка) КАК Сотрудник,
	|				СотрудникиДУ.Физлицо КАК Физлицо
	|			ИЗ
	|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
	|			ГДЕ
	|				СотрудникиДУ.ВидДоговора = &ДоговорУправленческий
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СотрудникиДУ.Физлицо) КАК СотрудникиДУ
	|				ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
	|					РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо
	|				ИЗ
	|					РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|						,
	|						Сотрудник.ВидДоговора = &ТрудовойДоговор
	|							И Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы) КАК РаботникиОсновноеМесто
	|				ГДЕ
	|					РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					РаботникиОсновноеМесто.Сотрудник.Физлицо) КАК РаботникиОсновноеМесто
	|					ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|						МАКСИМУМ(РаботникиСовместительство.Сотрудник) КАК Сотрудник,
	|						РаботникиСовместительство.Сотрудник.Физлицо КАК Физлицо
	|					ИЗ
	|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|							,
	|							Сотрудник.ВидДоговора = &ТрудовойДоговор
	|								И Сотрудник.ВидЗанятости = &Совместительство) КАК РаботникиСовместительство
	|					ГДЕ
	|						РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					
	|					СГРУППИРОВАТЬ ПО
	|						РаботникиСовместительство.Сотрудник.Физлицо) КАК РаботникиСовместительство
	|					ПО РаботникиОсновноеМесто.Физлицо = РаботникиСовместительство.Физлицо
	|				ПО СотрудникиДУ.Физлицо = РаботникиОсновноеМесто.Физлицо) КАК Сотрудники
	|		ПО СобытиеРаботникиОрганизации.ФизЛицо = Сотрудники.Физлицо
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СобытиеРаботникиОрганизации.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|				ТОГДА Сотрудники.Сотрудник
	|			ИНАЧЕ СобытиеРаботникиОрганизации.Сотрудник
	|		КОНЕЦ ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	СобытиеРаботникиОрганизации.Ссылка.Дата,
	|	СобытиеРаботникиОрганизации.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Приказ") Цикл
		#Если Клиент Тогда
			Состояние("Сотрудники компании: " + Выборка.Приказ);
		#КонецЕсли
		
		Пока Выборка.Следующий() Цикл
			Сотрудник = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Сотрудник, Выборка);
			Сотрудник.ВидДоговора	= Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий;
			Сотрудник.Код			= "0000000000";
			Сотрудник.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// заполнение поля Сотрудник в документе
//
Процедура ЗаполнитьДокумент(ПолеДаты, ИмяДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка КАК Документ
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК Документ
	|ГДЕ
	|	Документ.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ.Ссылка.Дата";
	
	ЗапросыПоДокументу = Новый Массив(1);
	ЗапросыПоДокументуТекст1 = Новый Массив(1);
	ЗапросыПоДокументуТекст2 = Новый Массив(1);
	
	Индекс = 0;
	Пока Индекс < ЗапросыПоДокументу.Количество() Цикл
		ЗапросыПоДокументу[Индекс] = Новый Запрос;
		
		ЗапросыПоДокументу[Индекс].Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(Работники.Период) КАК Период,
		|		Документ.Физлицо КАК Физлицо
		|	ИЗ
		|		Документ." + ИмяДокумента + " КАК Документ
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
		|			ПО Документ.Физлицо = Работники.ФизЛицо
		|				И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
		|				И Работники.Период <= Документ." + ПолеДаты + "
		|	ГДЕ
		|		Документ.Ссылка = &Приказ
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Документ.Физлицо) КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
		|		ПО Периоды.Период = Работники.Период
		|			И Периоды.Физлицо = Работники.ФизЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокСотрудников.Сотрудник КАК Сотрудник,
		|			СписокСотрудников.Физлицо КАК Физлицо
		|		ИЗ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
		|				РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
		|				1 КАК Приоритет
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|						,
		|						Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|							И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|							И Сотрудник.Физлицо В
		|								(ВЫБРАТЬ
		|									Док.Физлицо
		|								ИЗ
		|									Документ." + ИмяДокумента + " КАК Док
		|								ГДЕ
		|									Док.Ссылка = &Приказ)) КАК РаботникиОсновноеМесто
		|			ГДЕ
		|				РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиОсновноеМесто.Сотрудник.Физлицо
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				МАКСИМУМ(РаботникиСовместительство.Сотрудник),
		|				РаботникиСовместительство.Сотрудник.Физлицо,
		|				2
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|						,
		|						Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|							И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
		|							И Сотрудник.Физлицо В
		|								(ВЫБРАТЬ
		|									Док.Физлицо
		|								ИЗ
		|									Документ." + ИмяДокумента + " КАК Док
		|								ГДЕ
		|									Док.Ссылка = &Приказ)) КАК РаботникиСовместительство
		|			ГДЕ
		|				РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиСовместительство.Сотрудник.Физлицо
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				МАКСИМУМ(СотрудникиДУ.Ссылка),
		|				СотрудникиДУ.Физлицо,
		|				3
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
		|			ГДЕ
		|				(СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|						ИЛИ СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор))
		|				И СотрудникиДУ.Физлицо В
		|						(ВЫБРАТЬ
		|							Док.Физлицо
		|						ИЗ
		|							Документ." + ИмяДокумента + " КАК Док
		|						ГДЕ
		|							Док.Ссылка = &Приказ)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СотрудникиДУ.Физлицо) КАК СписокСотрудников
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СписокФизическихЛиц.Физлицо КАК Физлицо,
		|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
		|				ИЗ
		|					(ВЫБРАТЬ
		|						РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
		|						1 КАК Приоритет
		|					ИЗ
		|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|								,
		|								Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|									И Сотрудник.Физлицо В
		|										(ВЫБРАТЬ
		|											Док.Физлицо
		|										ИЗ
		|											Документ." + ИмяДокумента + " КАК Док
		|										ГДЕ
		|											Док.Ссылка = &Приказ)) КАК РаботникиОсновноеМесто
		|					ГДЕ
		|						РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						РаботникиСовместительство.Сотрудник.Физлицо,
		|						2
		|					ИЗ
		|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|								,
		|								Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
		|									И Сотрудник.Физлицо В
		|										(ВЫБРАТЬ
		|											Док.Физлицо
		|										ИЗ
		|											Документ." + ИмяДокумента + " КАК Док
		|										ГДЕ
		|											Док.Ссылка = &Приказ)) КАК РаботникиСовместительство
		|					ГДЕ
		|						РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						СотрудникиДУ.Физлицо,
		|						3
		|					ИЗ
		|						Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
		|					ГДЕ
		|						(СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|								ИЛИ СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор))
		|						И СотрудникиДУ.Физлицо В
		|								(ВЫБРАТЬ
		|									Док.Физлицо
		|								ИЗ
		|									Документ." + ИмяДокумента + " КАК Док
		|								ГДЕ
		|									Док.Ссылка = &Приказ)) КАК СписокФизическихЛиц
		|				
		|				СГРУППИРОВАТЬ ПО
		|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
		|				ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
		|					И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет) КАК Сотрудники
		|		ПО Периоды.Физлицо = Сотрудники.Физлицо";
			
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Документ." + ИмяДокумента + ". Обрабатывается документ " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Индекс = 0;
		Пока Индекс < ЗапросыПоДокументу.Количество() Цикл
			ЗапросыПоДокументу[Индекс].УстановитьПараметр("Приказ",	Выборка.Документ);
			
			ВыборкаПоДокументу = ЗапросыПоДокументу[Индекс].Выполнить().Выбрать();
			
			Пока ВыборкаПоДокументу.Следующий() Цикл
				ДокументОбъект.Сотрудник = ВыборкаПоДокументу.Сотрудник;
			КонецЦикла;
			
			Индекс = Индекс + 1;
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// заполнение поля Сотрудник в табличной части документа
//
Процедура ЗаполнитьТабличнуюЧастьДокумента(ТабличныеЧасти, ИмяДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка КАК Документ
	|ИЗ
	|	Документ." + ИмяДокумента + "." + ТабличныеЧасти[0].Имя + " КАК Документ
	|ГДЕ
	|	Документ.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ.Ссылка.Дата";
	
	ЗапросыПоДокументу = Новый Массив(ТабличныеЧасти.Количество());
	ЗапросыПоДокументуТекст = Новый Массив(ТабличныеЧасти.Количество());
	
	Индекс = 0;
	Пока Индекс < ЗапросыПоДокументу.Количество() Цикл
		ЗапросыПоДокументу[Индекс] = Новый Запрос;
		
		ЗапросыПоДокументу[Индекс].УстановитьПараметр("ТрудовойДоговор",		Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
		ЗапросыПоДокументу[Индекс].УстановитьПараметр("ДоговорУправленческий",	Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
		ЗапросыПоДокументу[Индекс].УстановитьПараметр("ОсновноеМестоРаботы",	Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
		ЗапросыПоДокументу[Индекс].УстановитьПараметр("Совместительство",		Перечисления.ВидыЗанятостиВОрганизации.Совместительство);
		
		ЗапросыПоДокументу[Индекс].Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник,
		|	Док.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Док
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВЫБОР
		|				КОГДА (НЕ РаботникиОсновноеМесто.Сотрудник ЕСТЬ NULL )
		|					ТОГДА РаботникиОсновноеМесто.Сотрудник
		|				КОГДА (НЕ РаботникиСовместительство.Сотрудник ЕСТЬ NULL )
		|					ТОГДА РаботникиСовместительство.Сотрудник
		|				КОГДА (НЕ СотрудникиДУ.Сотрудник ЕСТЬ NULL )
		|					ТОГДА СотрудникиДУ.Сотрудник
		|				ИНАЧЕ NULL
		|			КОНЕЦ КАК Сотрудник,
		|			ВЫБОР
		|				КОГДА (НЕ РаботникиОсновноеМесто.Физлицо ЕСТЬ NULL )
		|					ТОГДА РаботникиОсновноеМесто.Физлицо
		|				КОГДА (НЕ РаботникиСовместительство.Физлицо ЕСТЬ NULL )
		|					ТОГДА РаботникиСовместительство.Физлицо
		|				КОГДА (НЕ СотрудникиДУ.Физлицо ЕСТЬ NULL )
		|					ТОГДА СотрудникиДУ.Физлицо
		|				ИНАЧЕ NULL
		|			КОНЕЦ КАК Физлицо
		|		ИЗ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(СотрудникиДУ.Ссылка) КАК Сотрудник,
		|				СотрудникиДУ.Физлицо КАК Физлицо
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
		|			ГДЕ
		|				СотрудникиДУ.ВидДоговора = &ДоговорУправленческий
		|				И СотрудникиДУ.Физлицо В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Док.ФизЛицо
		|						ИЗ
		|							Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Док
		|						ГДЕ
		|							Док.Ссылка = &Приказ)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СотрудникиДУ.Физлицо) КАК СотрудникиДУ
		|				ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
		|					РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо
		|				ИЗ
		|					РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|						,
		|						Сотрудник.ВидДоговора = &ТрудовойДоговор
		|							И Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы
		|							И Сотрудник.Физлицо В
		|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|									Док.ФизЛицо
		|								ИЗ
		|									Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Док
		|								ГДЕ
		|									Док.Ссылка = &Приказ)) КАК РаботникиОсновноеМесто
		|				ГДЕ
		|					РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|				
		|				СГРУППИРОВАТЬ ПО
		|					РаботникиОсновноеМесто.Сотрудник.Физлицо) КАК РаботникиОсновноеМесто
		|					ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|						МАКСИМУМ(РаботникиСовместительство.Сотрудник) КАК Сотрудник,
		|						РаботникиСовместительство.Сотрудник.Физлицо КАК Физлицо
		|					ИЗ
		|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|							,
		|							Сотрудник.ВидДоговора = &ТрудовойДоговор
		|								И Сотрудник.ВидЗанятости = &Совместительство
		|								И Сотрудник.Физлицо В
		|									(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|										Док.ФизЛицо
		|									ИЗ
		|										Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Док
		|									ГДЕ
		|										Док.Ссылка = &Приказ)) КАК РаботникиСовместительство
		|					ГДЕ
		|						РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					
		|					СГРУППИРОВАТЬ ПО
		|						РаботникиСовместительство.Сотрудник.Физлицо) КАК РаботникиСовместительство
		|					ПО РаботникиОсновноеМесто.Физлицо = РаботникиСовместительство.Физлицо
		|				ПО СотрудникиДУ.Физлицо = РаботникиОсновноеМесто.Физлицо) КАК Сотрудники
		|		ПО Док.ФизЛицо = Сотрудники.Физлицо
		|ГДЕ
		|	Док.Ссылка = &Приказ";
		Если ИмяДокумента = "СдельныйНаряд" Тогда
		ЗапросыПоДокументу[Индекс].Текст = ЗапросыПоДокументу[Индекс].Текст + "
		|	И Док.Ссылка.ОтражатьВБухгалтерскомУчете = ЛОЖЬ";
		КонецЕсли;
		ЗапросыПоДокументу[Индекс].Текст = ЗапросыПоДокументу[Индекс].Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Документ." + ИмяДокумента + ".ТабличныеЧасти. Обрабатывается документ " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Для Индекс = 0 По ЗапросыПоДокументу.Количество() - 1 Цикл
			ЗапросыПоДокументу[Индекс].УстановитьПараметр("Приказ",	Выборка.Документ);
			
			ВыборкаПоДокументу = ЗапросыПоДокументу[Индекс].Выполнить().Выбрать();
			
			Пока ВыборкаПоДокументу.Следующий() Цикл
				Строка = ДокументОбъект[ТабличныеЧасти[Индекс].Имя].Найти(ВыборкаПоДокументу.НомерСтроки, "НомерСтроки");
				Строка.Сотрудник = ВыборкаПоДокументу.Сотрудник;
			КонецЦикла;
			
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСотрудников()
	
	// сначала регистрируем сотрудников
	РегистрацияСотрудников();
	
	// создание сотрудников для ошибочных данных
	СозданиеСотрудниковДляОшибочныхДанных();

	//////////////////////////////////////////////////////////////
	// Документы
	
	//АттестацияРаботника
	ЗаполнитьДокумент("Дата", "АттестацияРаботника");
	
	//ВводСведенийОПлановыхНачисленияхУдержанияхРаботников
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "ВводСведенийОПлановыхНачисленияхУдержанияхРаботников");
	
	//ВозвратНаРаботу
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Работники", "Работники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "ВозвратНаРаботу");
	
	//ЗаявкаНаОбучение
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОбучающиесяРаботники", "ОбучающиесяРаботники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "ЗаявкаНаОбучение");
	
	//КадровоеПеремещение
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Работники", "Работники"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Работники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "КадровоеПеремещение");
	
	//НачислениеЗарплатыРаботникам
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "НачислениеЗарплатыРаботникам");
	
	//ОтсутствиеНаРаботе
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Работники", "Работники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "ОтсутствиеНаРаботе");
	
	//ПрохождениеКурсаОбучения
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОбучающиесяРаботники", "ОбучающиесяРаботники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "ПрохождениеКурсаОбучения");
	
	//РезультатИспытательногоСрока
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьРаботники", "УдалитьРаботники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "РезультатИспытательногоСрока");
	
	//ПланированиеОтпуска
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Работники", "Работники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "ПланированиеОтпуска");
	
	//ПриемНаРаботу
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Работники", "Работники"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Работники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "ПриемНаРаботу");
	
	//СдельныйНаряд
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Исполнители", "Исполнители"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "СдельныйНаряд");
	
	//Событие
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "Событие");
	
	//Увольнение
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Работники", "Работники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "Увольнение");
	
	//УчастиеВМероприятиях
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Работники", "Работники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "УчастиеВМероприятиях");
	
	//УчетЗаработкаРаботников
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Работники", "Работники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "УчетЗаработкаРаботников");
	
КонецПроцедуры

// Процедура переносит данные из регистра сведений УдалитьПроцентДеятельностиЕНВД в ПроцентДеятельностиЕНВДСотрудников
Процедура ПереносДанныхПроцентДеятельностиЕНВД()
	//переносим данные из регистра сведений УдалитьПроцентДеятельностиЕНВД в ПроцентДеятельностиЕНВДСотрудников
	
	//получим периоды окончания ввода % деятельности ЕНВД по организациям
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СписокПериодов.Период) КАК Период,
	|	СписокПериодов.Организация
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ПроцентДеятельностиЕНВД.Период) КАК Период,
	|		ПроцентДеятельностиЕНВД.Организация КАК Организация
	|	ИЗ
	|		РегистрСведений.УдалитьПроцентДеятельностиЕНВД КАК ПроцентДеятельностиЕНВД
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПроцентДеятельностиЕНВД.Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МАКСИМУМ(ЕСНСведенияОДоходах.Период),
	|		ЕСНСведенияОДоходах.Организация
	|	ИЗ
	|		РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЕСНСведенияОДоходах.Организация) КАК СписокПериодов
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокПериодов.Организация";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ТаблицаПериодов = Запрос.Выполнить().Выгрузить();

	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СписокСотрудникПериод.Период, &ДатаОкончания) КАК Период,
	|	ПроцентДеятельностиЕНВД.Сотрудник КАК Сотрудник,
	|	ПроцентДеятельностиЕНВД.ПодпадаетПодЕНВД КАК ПодпадаетПодЕНВД,
	|	ПроцентДеятельностиЕНВД.СтатьяЗатратЕНВД КАК СтатьяЗатратЕНВД,
	|	ПроцентДеятельностиЕНВД.СтатьяЗатратНеЕНВД КАК СтатьяЗатратНеЕНВД
	|ИЗ
	|	РегистрСведений.УдалитьПроцентДеятельностиЕНВД КАК ПроцентДеятельностиЕНВД
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МИНИМУМ(ПроцентДеятельностиЕНВД.Период) КАК Период,
	|			ПроцентДеятельностиЕНВД.Сотрудник КАК Сотрудник
	|		ИЗ
	|			РегистрСведений.УдалитьПроцентДеятельностиЕНВД КАК ПроцентДеятельностиЕНВД
	|		ГДЕ
	|			ПроцентДеятельностиЕНВД.Регистратор <> &парамРегистратор
	|			И ПроцентДеятельностиЕНВД.Сотрудник В
	|					(ВЫБРАТЬ
	|						ВводПроцентаДеятельностиЕНВДРаботникиОрганизации.Сотрудник КАК Сотрудник
	|					ИЗ
	|						Документ.ВводПроцентаДеятельностиЕНВД.РаботникиОрганизации КАК ВводПроцентаДеятельностиЕНВДРаботникиОрганизации
	|					ГДЕ
	|						ВводПроцентаДеятельностиЕНВДРаботникиОрганизации.Ссылка = &парамРегистратор)
	|			И ПроцентДеятельностиЕНВД.Организация = &парамОрганизация
	|			И ПроцентДеятельностиЕНВД.Период > &парамДата
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПроцентДеятельностиЕНВД.Сотрудник) КАК СписокСотрудникПериод
	|		ПО ПроцентДеятельностиЕНВД.Сотрудник = СписокСотрудникПериод.Сотрудник
	|ГДЕ
	|	ПроцентДеятельностиЕНВД.Регистратор = &парамРегистратор";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВводПроцентаДеятельностиЕНВД.Ссылка,
	|	ВводПроцентаДеятельностиЕНВД.Организация,
	|	ВводПроцентаДеятельностиЕНВД.Период,
	|	ВводПроцентаДеятельностиЕНВД.Проведен
	|ИЗ
	|	Документ.ВводПроцентаДеятельностиЕНВД КАК ВводПроцентаДеятельностиЕНВД";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	КоличествоДокументов = ВыборкаДокументов.Количество();
	Если КоличествоДокументов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексЗаписи = 1;
	НачатьТранзакцию();
	Пока ВыборкаДокументов.Следующий() Цикл
		
		#Если Клиент Тогда
			Состояние("РегистрСведений.ВводПроцентаДеятельностиЕНВДСотрудников. Обрабатывается набор записей " + ИндексЗаписи + " из " + КоличествоДокументов);
		#КонецЕсли
		
		СтрокаТаблицы = ТаблицаПериодов.Найти(ВыборкаДокументов.Организация, "Организация");
		Если СтрокаТаблицы = Неопределено Тогда
			ДатаОкончания = ДобавитьМесяц(ВыборкаДокументов.Период, 1);
		Иначе
			ДатаОкончания = ДобавитьМесяц(СтрокаТаблицы.Период, 1);
		КонецЕсли;
		
		ЗапросПоДокументу.УстановитьПараметр("парамРегистратор", ВыборкаДокументов.Ссылка);
		ЗапросПоДокументу.УстановитьПараметр("парамОрганизация", ВыборкаДокументов.Организация);
		ЗапросПоДокументу.УстановитьПараметр("парамДата", ВыборкаДокументов.Период);
		ЗапросПоДокументу.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокументОбъект.РаботникиОрганизации.Очистить();
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			ТекущийПериод = ВыборкаДокументов.Период;
			Пока ТекущийПериод < ВыборкаПоДокументу.Период Цикл
				НоваяСтрока = ДокументОбъект.РаботникиОрганизации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаПоДокументу);
				НоваяСтрока.МесяцРегистрации = ТекущийПериод;
				ТекущийПериод = ДобавитьМесяц(ТекущийПериод, 1);
			КонецЦикла;
		КонецЦикла;
		
		ДокументОбъект.ВводДанныхПоПериодам = Истина;
		
		МожноПроводить = Ложь;
		Если ВыборкаДокументов.Проведен Тогда
			//проверим учетную политику организации по налоговому учете
			БухгалтерскийИНалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("глУчетнаяПолитикаПоНалоговомуУчету"), КонецМесяца(ВыборкаДокументов.Период), ВыборкаДокументов.Организация);
			МожноПроводить = глЗначениеПеременной("глУчетнаяПолитикаПоНалоговомуУчету")[КонецМесяца(ВыборкаДокументов.Период)][ВыборкаДокументов.Организация].ОрганизацияЯвляетсяПлательщикомЕНВД;
		КонецЕсли;	
		
		ДокументОбъект.Записать(?(МожноПроводить, РежимЗаписиДокумента.Проведение, ?(ВыборкаДокументов.Проведен,РежимЗаписиДокумента.ОтменаПроведения,РежимЗаписиДокумента.Запись)));
		
		ИндексЗаписи = ИндексЗаписи + 1;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура РегистрацияДоговорников()
	
	ВалютаРегламентированногоУчета	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	// создание сотрудников по приказам о приеме на работу
	Запрос = Новый Запрос;
	
	ВидыДоговоров = Новый Массив;
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
	
	Запрос.УстановитьПараметр("ВидыДоговоров", ВидыДоговоров);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Ссылка КАК Документ
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ВидДоговора В(&ВидыДоговоров)";
	
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу.Текст =
	"ВЫБРАТЬ
	|	ДоговорНаВыполнениеРаботСФизЛицом.ВидДоговора,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо КАК Физлицо,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ДоговорНаВыполнениеРаботСФизЛицом.Организация
	|		ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	ДоговорНаВыполнениеРаботСФизЛицом.Организация КАК ОбособленноеПодразделение,
	|	ИСТИНА КАК Актуальность,
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо = СотрудникиОрганизаций.Физлицо
	|			И ДоговорНаВыполнениеРаботСФизЛицом.Организация = СотрудникиОрганизаций.Организация
	|			И ДоговорНаВыполнениеРаботСФизЛицом.ВидДоговора = СотрудникиОрганизаций.ВидДоговора
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Ссылка = &Приказ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Работающие по договору подряда. Обрабатывается документ " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		НачатьТранзакцию();
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Если ДокументОбъект.Проведен Тогда
			НаборЗаписейПлановыеНачисления = РегистрыСведений.ПлановыеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
			НаборЗаписейПлановыеНачисления.Отбор.Регистратор.Значение	= Выборка.Документ;
			НаборЗаписейПлановыеНачисления.ОбменДанными.Загрузка		= Истина;
			
			НаборЗаписейРеглУчет = РегистрыСведений.ПлановыеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
			НаборЗаписейРеглУчет.Отбор.Регистратор.Значение	= Выборка.Документ;
			НаборЗаписейРеглУчет.ОбменДанными.Загрузка		= Истина;
		КонецЕсли;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ", Выборка.Документ);
	
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Следующий() Тогда
			ИспользуютсяНачисленияВВалюте	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоДокументу.Организация, "ИспользуютсяНачисленияВВалюте");
			
			Если ВыборкаПоДокументу.Сотрудник = NULL Тогда
				Сотрудник = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(Сотрудник, ВыборкаПоДокументу);
				
				Если Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
					Сотрудник.Наименование = Сотрудник.Наименование + " (дог. подр.)";
					Сотрудник.ПостфиксНаименования = "(дог. подр.)"; 
				Иначе
					Сотрудник.Наименование = Сотрудник.Наименование + " (дог. авт.)";
					Сотрудник.ПостфиксНаименования = "(дог. авт.)";
				КонецЕсли;
				
				Сотрудник.Код = Сотрудник.ПолучитьОчереднойТабельныйНомер();
				Сотрудник.Записать();
				СотрудникСсылка = Сотрудник.Ссылка;
			Иначе
				СотрудникСсылка = ВыборкаПоДокументу.Сотрудник;
			КонецЕсли;
			
			ДокументОбъект.Сотрудник = СотрудникСсылка;
			
			Если ДокументОбъект.Проведен Тогда
				Движение = НаборЗаписейПлановыеНачисления.Добавить();
				Если ДокументОбъект.ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.Ежемесячно Тогда
					Движение.Период				= ДокументОбъект.ДатаНачала;
				Иначе
					Движение.Период				= НачалоМесяца(ДокументОбъект.ДатаОкончания);
				КонецЕсли;
				
				// Измерения
				Движение.Сотрудник				= ДокументОбъект.Сотрудник;
				Движение.Организация			= ВыборкаПоДокументу.Организация;
				Движение.ДокументОснование		= Выборка.Документ;
				Движение.ВидРасчетаИзмерение	= ДокументОбъект.ВидРасчета;
				
				// Ресурсы
				Движение.ВидРасчета				= ДокументОбъект.ВидРасчета;
				Движение.Действие				= Перечисления.ВидыДействияСНачислением.Начать;
				Движение.Показатель1			= ДокументОбъект.СуммаЗаРаботу;
				Если Не ИспользуютсяНачисленияВВалюте Тогда
					Движение.Валюта1			= ВалютаРегламентированногоУчета;
				Иначе
					Движение.Валюта1			= ДокументОбъект.ВалютаДокумента;
				КонецЕсли;
				// Реквизиты
				
				Движение.ПериодЗавершения		= ДокументОбъект.ДатаОкончания;
				Движение.ДействиеЗавершения		= Перечисления.ВидыДействияСНачислением.Прекратить;
				
				НаборЗаписейПлановыеНачисления.Записать();
				НаборЗаписейПлановыеНачисления.Очистить();
				
				Если Не ДокументОбъект.СпособОтраженияВБухучете.Пустая() И Не ДокументОбъект.ОтнесениеРасходовКДеятельностиЕНВД.Пустая() Тогда
					Движение = НаборЗаписейРеглУчет.Добавить();
					
					Если ДокументОбъект.ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.Ежемесячно Тогда
						Движение.Период							= ДокументОбъект.ДатаНачала;
					Иначе
						Движение.Период							= НачалоМесяца(ДокументОбъект.ДатаОкончания);
					КонецЕсли;
					
					// Измерения
					Движение.Сотрудник							= ДокументОбъект.Сотрудник;
					Движение.Организация						= ВыборкаПоДокументу.Организация;
					Движение.ВидРасчета							= ДокументОбъект.ВидРасчета;
					Движение.ДокументОснование					= Выборка.Документ;
					
					// Ресурсы
					Движение.СпособОтраженияВБухучете			= ДокументОбъект.СпособОтраженияВБухучете;
					Если ДокументОбъект.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
						Движение.КодДоходаЕСН					= Справочники.ДоходыЕСН.ДоговораАвторские;
					ИначеЕсли ДокументОбъект.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
						Движение.КодДоходаЕСН					= Справочники.ДоходыЕСН.ДоговораГПХ;
					КонецЕсли;
					
					Движение.ОтнесениеРасходовКДеятельностиЕНВД	= ДокументОбъект.ОтнесениеРасходовКДеятельностиЕНВД;
					
					НаборЗаписейРеглУчет.Записать();
					НаборЗаписейРеглУчет.Очистить();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ДокументОбъект.Записать();
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры

Процедура СозданиеДоговорниковДляОшибочныхДанных()
	
	#Если Клиент Тогда
		Состояние("Работающие по договору подряда");
	#КонецЕсли
	
	// создание сотрудников по приказам о приеме на работу
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Регистратор КАК Приказ
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|		ПО НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ФизЛицо = ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо
	|			И НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Организация = ДоговорНаВыполнениеРаботСФизЛицом.Организация
	|ГДЕ
	|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Ссылка ЕСТЬ NULL 
	|	И НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой)";
	
	
	ЗапросПоДокументу = Новый Запрос;
	
	// Все виды авторских 2201-2209
	СписокАвторскихВознаграждений = Новый Массив;
	//РФ
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2201);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2202);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2203);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2204);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2205);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2206);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2207);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2208);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2209);
	//РБ
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код301);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код302);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код303);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код304);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код305);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код306);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код307);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код308);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код309);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код310);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код311);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код312);
	
	ЗапросПоДокументу.УстановитьПараметр("АвторскиеВознаграждения",	СписокАвторскихВознаграждений);
	
	ЗапросПоДокументу.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеНачисленияРаботниковОрганизаций.ФизЛицо КАК ФизЛицо,
	|	ДополнительныеНачисленияРаботниковОрганизаций.Организация КАК Организация,
	|	ДополнительныеНачисленияРаботниковОрганизаций.Размер КАК СуммаЗаРаботу,
	|	ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета КАК ВидРасчета,
	|	ВЫБОР
	|		КОГДА ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаНДФЛ В (&АвторскиеВознаграждения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Авторский)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)
	|	КОНЕЦ КАК ВидДоговора,
	|	ДополнительныеНачисленияРаботниковОрганизаций.БазовыйПериодНачало КАК ДатаНачала,
	|	ДополнительныеНачисленияРаботниковОрганизаций.БазовыйПериодКонец КАК ДатаОкончания,
	|	ДополнительныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации,
	|	ИСТИНА КАК Актуальность,
	|	ДополнительныеНачисленияРаботниковОрганизаций.ФизЛицо.Наименование КАК Наименование,
	|	ДополнительныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
	|ГДЕ
	|	ДополнительныеНачисленияРаботниковОрганизаций.Регистратор = &Приказ
	|	И ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой)
	|	И ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	Организация,
	|	ВидДоговора,
	|	ВидРасчета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Работающие по договору подряда. Обрабатывается набор записей " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ", Выборка.Приказ);
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Пока ВыборкаПоДокументу.СледующийПоЗначениюПоля("Физлицо") Цикл
			Пока ВыборкаПоДокументу.СледующийПоЗначениюПоля("Организация") Цикл
				Пока ВыборкаПоДокументу.СледующийПоЗначениюПоля("ВидДоговора") Цикл
					
					Сотрудник = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
					ЗаполнитьЗначенияСвойств(Сотрудник, ВыборкаПоДокументу, , "ПодразделениеОрганизации");
					
					Если Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
						Сотрудник.Наименование = Сотрудник.Наименование + " (дог. подр.)";
						Сотрудник.ПостфиксНаименования = "(дог. подр.)"; 
					Иначе
						Сотрудник.Наименование = Сотрудник.Наименование + " (дог. авт.)";
						Сотрудник.ПостфиксНаименования = "(дог. авт.)";
					КонецЕсли;
					
					Сотрудник.Код = Сотрудник.ПолучитьОчереднойТабельныйНомер();
					Сотрудник.Записать();
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// заполнение поля Сотрудник в регистре
//
Процедура ЗаполнитьНаборЗаписейДоговорников(ПолеДаты, МенеджерРегистров, ИмяРегистра)
	
	Если ТипЗнч(МенеджерРегистров) = Тип("РегистрыСведенийМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрСведений";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыНакопленияМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрНакопления";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыБухгалтерииМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрБухгалтерии";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыРасчетаМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрРасчета";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Приказ,
	|	МИНИМУМ(Регистр." + ПолеДаты + ") КАК Период
	|ИЗ
	|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|ГДЕ
	|	Регистр.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Регистр.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	ЗапросПоДокументу = Новый Запрос;
	
	// Все виды авторских 2201-2209
	СписокАвторскихВознаграждений = Новый Массив;
	//РФ
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2201);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2202);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2203);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2204);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2205);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2206);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2207);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2208);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2209);
	//РБ
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код301);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код302);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код303);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код304);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код305);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код306);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код307);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код308);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код309);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код310);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код311);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код312);
		
	ЗапросПоДокументу.УстановитьПараметр("АвторскиеВознаграждения",	СписокАвторскихВознаграждений);
	
	Если ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" Тогда
		ЗапросПоДокументу.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Регистр.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой)
		|			ТОГДА ЕСТЬNULL(Договорники.Сотрудник, СотрудникиОрганизаций.Ссылка)
		|		ИНАЧЕ Регистр.Сотрудник
		|	КОНЕЦ КАК Сотрудник,
		|	Регистр.НомерСтроки КАК НомерСтроки,
		|	Договорники.Ссылка КАК ДокументОснование,
		|	Регистр.*
		|ИЗ
		|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Регистр
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК Договорники
		|		ПО Регистр.ФизЛицо = Договорники.ФизЛицо
		|			И Регистр.ВидРасчета = Договорники.ВидРасчета
		|			И Регистр.Размер = Договорники.СуммаЗаРаботу
		|			И Договорники.Проведен
		|			И (ВЫБОР
		|				КОГДА Договорники.ХарактерОплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыПоДоговору.ОднократноВКонцеСрока)
		|					ТОГДА НАЧАЛОПЕРИОДА(Регистр.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Договорники.ДатаОкончания, МЕСЯЦ)
		|				ИНАЧЕ НАЧАЛОПЕРИОДА(Регистр.ПериодРегистрации, МЕСЯЦ) МЕЖДУ НАЧАЛОПЕРИОДА(Договорники.ДатаНачала, МЕСЯЦ) И КОНЕЦПЕРИОДА(Договорники.ДатаОкончания, МЕСЯЦ)
		|			КОНЕЦ)
		|			И (Регистр.Организация = ВЫБОР
		|				КОГДА Договорники.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Договорники.Организация
		|				ИНАЧЕ Договорники.Организация.ГоловнаяОрганизация
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО Регистр.ФизЛицо = СотрудникиОрганизаций.Физлицо
		|			И Регистр.Организация = СотрудникиОрганизаций.Организация
		|			И (ВЫБОР
		|				КОГДА Регистр.ВидРасчета.КодДоходаНДФЛ В (&АвторскиеВознаграждения)
		|					ТОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Авторский)
		|				ИНАЧЕ СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)
		|			КОНЕЦ)
		|ГДЕ
		|	Регистр.Регистратор = &Приказ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	Иначе
		ЗапросПоДокументу.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Регистр.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой)
		|			ТОГДА СотрудникиОрганизаций.Ссылка
		|		ИНАЧЕ Регистр.Сотрудник
		|	КОНЕЦ КАК Сотрудник,
		|	Регистр.НомерСтроки КАК НомерСтроки,
		|	Регистр.*
		|ИЗ
		|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО Регистр.ФизЛицо = СотрудникиОрганизаций.Физлицо
		|			И Регистр.Организация = СотрудникиОрганизаций.Организация
		|			И (ВЫБОР
		|				КОГДА Регистр.ВидРасчета.КодДоходаНДФЛ В (&АвторскиеВознаграждения)
		|					ТОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Авторский)
		|				ИНАЧЕ СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)
		|			КОНЕЦ)
		|ГДЕ
		|	Регистр.Регистратор = &Приказ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние(ПрефиксИмениТаблицы + "." + ИмяРегистра + ". Обрабатывается набор записей " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ",	Выборка.Приказ);
		
		НаборЗаписей = МенеджерРегистров[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Приказ;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоДокументу);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

// заполнение поля Сотрудник в табличной части документа
//
Процедура ЗаполнитьТабличнуюЧастьДокументаДоговорников(ИмяДокумента, ИмяТабличнойЧасти)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК Документ
	|ИЗ
	|	Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + " КАК Док
	|ГДЕ
	|	Док.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Ссылка.Дата";
	
	ЗапросПоДокументу = Новый Запрос;
	
	// Все виды авторских 2201-2209
	СписокАвторскихВознаграждений = Новый Массив;
	//РФ
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2201);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2202);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2203);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2204);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2205);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2206);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2207);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2208);
	//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2209);
	//РБ
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код301);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код302);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код303);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код304);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код305);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код306);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код307);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код308);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код309);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код310);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код311);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код312);
		
	ЗапросПоДокументу.УстановитьПараметр("АвторскиеВознаграждения",	СписокАвторскихВознаграждений);
		
	Если ИмяДокумента = "НачислениеЗарплатыРаботникамОрганизаций" Тогда
		
		ЗапросПоДокументу.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(Договорники.Сотрудник, СотрудникиОрганизаций.Ссылка) КАК Сотрудник,
		|	Док.НомерСтроки КАК НомерСтроки,
		|	Договорники.Ссылка КАК ДокументОснование,
		|	Док.ДатаНачала,
		|	Док.ДатаОкончания,
		|	Договорники.ДатаНачала,
		|	Договорники.ДатаОкончания
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК Договорники
		|		ПО Док.Физлицо = Договорники.ФизЛицо
		|			И Док.ВидРасчета = Договорники.ВидРасчета
		|			И Док.Размер = Договорники.СуммаЗаРаботу
		|			И (Договорники.Проведен)
		|			И (ВЫБОР
		|				КОГДА Договорники.ХарактерОплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыПоДоговору.ОднократноВКонцеСрока)
		|						ИЛИ КОНЕЦПЕРИОДА(Док.Ссылка.ПериодРегистрации, МЕСЯЦ) = КОНЕЦПЕРИОДА(Договорники.ДатаОкончания, МЕСЯЦ)
		|					ТОГДА Док.ДатаОкончания = Договорники.ДатаОкончания
		|				ИНАЧЕ Док.ДатаОкончания МЕЖДУ Договорники.ДатаНачала И Договорники.ДатаОкончания
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА Док.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Док.Ссылка.Организация
		|				ИНАЧЕ Док.Ссылка.Организация.ГоловнаяОрганизация
		|			КОНЕЦ = ВЫБОР
		|				КОГДА Договорники.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Договорники.Организация
		|				ИНАЧЕ Договорники.Организация.ГоловнаяОрганизация
		|			КОНЕЦ)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО Док.Физлицо = СотрудникиОрганизаций.Физлицо
		|			И (ВЫБОР
		|				КОГДА Док.ВидРасчета.КодДоходаНДФЛ В (&АвторскиеВознаграждения)
		|					ТОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Авторский)
		|				ИНАЧЕ СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА Док.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Док.Ссылка.Организация
		|				ИНАЧЕ Док.Ссылка.Организация.ГоловнаяОрганизация
		|			КОНЕЦ = СотрудникиОрганизаций.Организация)
		|ГДЕ
		|	Док.Ссылка = &Приказ
		|	И Док.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки УБЫВ";
		
	Иначе
		ЗапросПоДокументу.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	Док.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + " КАК Док
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО Док.ФизЛицо = СотрудникиОрганизаций.Физлицо
		|			И (ВЫБОР
		|				КОГДА Док.ВидРасчета.КодДоходаНДФЛ В (&АвторскиеВознаграждения)
		|					ТОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Авторский)
		|				ИНАЧЕ СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА Док.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Док.Ссылка.Организация
		|				ИНАЧЕ Док.Ссылка.Организация.ГоловнаяОрганизация
		|			КОНЕЦ = СотрудникиОрганизаций.Организация)
		|ГДЕ
		|	Док.Ссылка = &Приказ
		|	И Док.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + ". Обрабатывается документ " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ",	Выборка.Документ);
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			Если ИмяДокумента = "НачислениеЗарплатыРаботникамОрганизаций" Тогда
				Строка = ДокументОбъект.ДоговорыНаВыполнениеРабот.Вставить(0);
				СтрокаДокумента = ДокументОбъект[ИмяТабличнойЧасти].Найти(ВыборкаПоДокументу.НомерСтроки, "НомерСтроки");
				ЗаполнитьЗначенияСвойств(Строка, СтрокаДокумента, , "НомерСтроки");
				ДокументОбъект[ИмяТабличнойЧасти].Удалить(СтрокаДокумента);
				Строка.ДокументОснование	= ВыборкаПоДокументу.ДокументОснование;
				
			Иначе
				Строка = ДокументОбъект[ИмяТабличнойЧасти].Найти(ВыборкаПоДокументу.НомерСтроки, "НомерСтроки");
				
			КонецЕсли;
			
			Строка.Сотрудник	= ВыборкаПоДокументу.Сотрудник;
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДоговорников()
	
	// сначала регистрируем договорников
	РегистрацияДоговорников();
	
	// в ИБ могут быть случаи, когда есть выплаты договорнику, но нет договора
	СозданиеДоговорниковДляОшибочныхДанных();
	
	//////////////////////////////////////////////////////////////
	// Регистры
	
	// БУДополнительныеНачисления
	ЗаполнитьНаборЗаписейДоговорников("ПериодРегистрации", РегистрыРасчета, "БУДополнительныеНачисления");
	
	// ДополнительныеНачисленияРаботниковОрганизаций
	ЗаполнитьНаборЗаписейДоговорников("ПериодРегистрации", РегистрыРасчета, "ДополнительныеНачисленияРаботниковОрганизаций");
	
	// ЕСНДополнительныеНачисления
	ЗаполнитьНаборЗаписейДоговорников("ПериодРегистрации", РегистрыРасчета, "ЕСНДополнительныеНачисления");
	
	//////////////////////////////////////////////////////////////
	// Документы
	
	// НачислениеЗарплатыРаботникамОрганизаций
	ЗаполнитьТабличнуюЧастьДокументаДоговорников("НачислениеЗарплатыРаботникамОрганизаций", "ДополнительныеНачисления");
	
	// ОтражениеЗарплатыВРеглУчете
	ЗаполнитьТабличнуюЧастьДокументаДоговорников("ОтражениеЗарплатыВРеглУчете", "ДополнительныеНачисления");
	
	// РасчетЕСН
	ЗаполнитьТабличнуюЧастьДокументаДоговорников("РасчетЕСН", "ДополнительныеНачисления");
	
КонецПроцедуры

Процедура ОчиститьРегистрОтФизлицаПриказа(МенеджерРегистров, ИмяРегистра)
	
	ОчищатьФизлицо			= Истина;
	Если ТипЗнч(МенеджерРегистров) = Тип("РегистрыСведенийМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрСведений";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыНакопленияМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрНакопления";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыБухгалтерииМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрБухгалтерии";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыРасчетаМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрРасчета";
		ИмяРеквизитаФизлицо	= "Физлицо";
		ОчищатьФизлицо		= Ложь;
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние("Очищается регистр: " + ПрефиксИмениТаблицы + "." + ИмяРегистра);
	#КонецЕсли
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ФизлицоПустаяСсылка",	Справочники.ФизическиеЛица.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПриказПустаяСсылка",		Документы.ПриемНаРаботуВОрганизацию.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Организация КАК Организация,
	|	Регистр.Регистратор КАК Приказ
	|ИЗ
	|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|ГДЕ
	|	Регистр.Сотрудник <> ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|	И " + ?(ОчищатьФизлицо, "(Регистр.УдалитьФизлицо <> &ФизлицоПустаяСсылка ИЛИ Регистр.УдалитьПриказ <> &ПриказПустаяСсылка)", "Регистр.УдалитьПриказ <> &ПриказПустаяСсылка") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистр.Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = МенеджерРегистров[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Приказ;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		НаборЗаписей.Прочитать();
		
		Для Номер = 0 По НаборЗаписей.Количество() - 1 Цикл
			Строка = НаборЗаписей[Номер];
			Строка.УдалитьПриказ		= 0;
			Если ОчищатьФизлицо Тогда
				Строка.УдалитьФизлицо	= 0;
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры // ОчиститьРегистрОтФизлицаПриказа()

Процедура ОчиститьРегистрыОтФизлицаПриказа()
	
	// ГрафикОтпусковОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "ГрафикОтпусковОрганизаций");
	
	// КоэффициентИндексацииЗаработка
	ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "КоэффициентИндексацииЗаработка");
	
	// НамеченныеСобытияПоПерсоналуОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "УдалитьНамеченныеСобытияПоПерсоналуОрганизаций");
	
	// ПлановыеНачисленияРаботниковОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "ПлановыеНачисленияРаботниковОрганизаций");
	
	// УдалитьПроцентДеятельностиЕНВД
	ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "УдалитьПроцентДеятельностиЕНВД");
	
	// РаботникиОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "РаботникиОрганизаций");
	
	// РеглУчетПлановыхНачисленийРаботниковОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "РеглУчетПлановыхНачисленийРаботниковОрганизаций");
	
	// СостояниеРаботниковОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "СостояниеРаботниковОрганизаций");
	
	// УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете
	ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете");
	
	// РабочееВремяРаботниковОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыНакопления, "РабочееВремяРаботниковОрганизаций");
	
	// ФактическаяВыработкаРаботниковОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыНакопления, "ФактическаяВыработкаРаботниковОрганизаций");
	
	// БУДополнительныеНачисления
	ОчиститьРегистрОтФизлицаПриказа(РегистрыРасчета, "БУДополнительныеНачисления");
	
	// БУОсновныеНачисления
	ОчиститьРегистрОтФизлицаПриказа(РегистрыРасчета, "БУОсновныеНачисления");
	
	// ДополнительныеНачисленияРаботниковОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыРасчета, "ДополнительныеНачисленияРаботниковОрганизаций");
	
	// ЕСНДополнительныеНачисления
	ОчиститьРегистрОтФизлицаПриказа(РегистрыРасчета, "ЕСНДополнительныеНачисления");
	
	// ЕСНОсновныеНачисления
	ОчиститьРегистрОтФизлицаПриказа(РегистрыРасчета, "ЕСНОсновныеНачисления");
	
	// ОсновныеНачисленияРаботниковОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыРасчета, "ОсновныеНачисленияРаботниковОрганизаций");
	
	// РасчетСреднегоЗаработка
	ОчиститьРегистрОтФизлицаПриказа(РегистрыРасчета, "РасчетСреднегоЗаработка");
	
	// УдержанияРаботниковОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыРасчета, "УдержанияРаботниковОрганизаций");
	
КонецПроцедуры

Процедура ПроставитьЗначенияДобавленныхРеквизитов()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка КАК ДокументСсылка,
	|	НачислениеЗарплатыРаботникамОрганизаций.ПериодРегистрации КАК ПериодНачисленияДатаНачала,
	|	КОНЕЦПЕРИОДА(НачислениеЗарплатыРаботникамОрганизаций.ПериодРегистрации, МЕСЯЦ) КАК ПериодНачисленияДатаОкончания,
	|	ЗНАЧЕНИЕ(Перечисление.ПериодНачисленияЗарплаты.ТекущийМесяц) КАК ПериодНачисления
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций КАК НачислениеЗарплатыРаботникамОрганизаций
	|ГДЕ
	|	НачислениеЗарплатыРаботникамОрганизаций.ПериодНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодНачисленияЗарплаты.ПустаяСсылка)";
	
	#Если Клиент Тогда
		ТекстСообщения = "Обработка документов ""Начисление зарплаты работникам организаций""";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	Выборка = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = Выборка.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.ДокументСсылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
		ДокументОбъект.Записать();
		#Если Клиент Тогда
			Если Номер % 50 = 0 Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			КонецЕсли;
			Номер = Номер + 1;
		#КонецЕсли
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сторнирование.Ссылка КАК ДокументСсылка,
	|	НАЧАЛОПЕРИОДА(Сторнирование.Дата, МЕСЯЦ) КАК ПериодРегистрации
	|ИЗ
	|	Документ.Сторнирование КАК Сторнирование
	|ГДЕ
	|	Сторнирование.ПериодРегистрации = ДАТАВРЕМЯ(1, 1, 1)";
	
	ТекстСообщения = "Обработка документов ""Сторнирование""";
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	Выборка = Запрос.Выполнить().Выбрать();
	ВсегоДоков = Выборка.Количество();
	Номер = 1;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.ДокументСсылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
	    ДокументОбъект.Записать();
		Если Номер % 50 = 0 Тогда
			#Если Клиент Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			#КонецЕсли
		КонецЕсли;
		Номер = Номер + 1;
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	НачислениеПоБольничномуЛисту.Ссылка КАК ДокументСсылка,
	//|	ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления) КАК СтратегияОтраженияВУчете
	//|ИЗ
	//|	Документ.НачислениеПоБольничномуЛисту КАК НачислениеПоБольничномуЛисту
	//|ГДЕ
	//|	НачислениеПоБольничномуЛисту.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВРеглУчетеНачислений.ПустаяСсылка)";
	//
	//ТекстСообщения = "Обработка документов ""Начисление по больничному листу""";
	//#Если Клиент Тогда
	//	Состояние(ТекстСообщения + ": подготовка данных ...");
	//#КонецЕсли
	//Выборка = Запрос.Выполнить().Выбрать();
	//ВсегоДоков = Выборка.Количество();
	//Номер = 1;
	//#Если Клиент Тогда
	//	Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	//#КонецЕсли
	//Пока Выборка.Следующий() Цикл
	//	ДокументОбъект = Выборка.ДокументСсылка.ПолучитьОбъект();
	//	ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
	//	ДокументОбъект.Записать();
	//	Если Номер % 50 = 0 Тогда
	//		#Если Клиент Тогда
	//			Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
	//		#КонецЕсли
	//	КонецЕсли;
	//	Номер = Номер + 1;
	//КонецЦикла;
	//#Если Клиент Тогда
	//	Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	//#КонецЕсли
	
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ОсновныеНачисленияОрганизаций.Ссылка КАК Ссылка,
	//|	ОсновныеНачисленияОрганизаций.Наименование КАК ВидРасчета,
	//|	ВЫБОР
	//|		КОГДА ОсновныеНачисленияОрганизаций.Предопределенный
	//|			ТОГДА ЛОЖЬ
	//|		КОГДА ОсновныеНачисленияОрганизаций.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.РаспределятьПоБазовымНачислениям)
	//|			ТОГДА ВЫБОР
	//|					КОГДА ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	//|						ТОГДА ИСТИНА
	//|					КОГДА ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|							И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|							И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|							И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|							И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.ОтражениеВУСН = ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.ПустаяСсылка)
	//|							И (НЕ ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.Предопределенный)
	//|						ТОГДА ЛОЖЬ
	//|					ИНАЧЕ ИСТИНА
	//|				КОНЕЦ
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК ОшибкаВКодеЕСН,
	//|	ВЫБОР
	//|		КОГДА ОсновныеНачисленияОрганизаций.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ), ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет))
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются)
	//|		КОГДА ОсновныеНачисленияОрганизаций.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ВыплатыЗаСчетПрибыли)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКНеЕНВД)
	//|		КОГДА ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются)
	//|		КОГДА ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|				И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|				И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.ОтражениеВУСН = ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.ПустаяСсылка)
	//|				И (НЕ ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.Предопределенный)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются)
	//|		КОГДА ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	//|			ТОГДА ВЫБОР
	//|					КОГДА ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СубконтоДт1.ОтнесениеРасходовКДеятельностиЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД)
	//|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД)
	//|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются)
	//|				КОНЕЦ
	//|		КОГДА ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	//|			ТОГДА ВЫБОР
	//|					КОГДА ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СубконтоДт2.ОтнесениеРасходовКДеятельностиЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД)
	//|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД)
	//|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются)
	//|				КОНЕЦ
	//|		КОГДА ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	//|			ТОГДА ВЫБОР
	//|					КОГДА ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СубконтоДт3.ОтнесениеРасходовКДеятельностиЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД)
	//|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД)
	//|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются)
	//|				КОНЕЦ
	//|		КОГДА ОсновныеНачисленияОрганизаций.ЧастичноПодпадаетПодЕНВД
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются)
	//|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД)
	//|	КОНЕЦ КАК ОтнесениеРасходовКДеятельностиЕНВД,
	//|	ВЫБОР
	//|		КОГДА ОсновныеНачисленияОрганизаций.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ), ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет))
	//|			ТОГДА ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.РаспределятьПоБазовымНачислениям)
	//|		КОГДА ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	//|			ТОГДА ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете
	//|		КОГДА ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|				И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|				И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.ОтражениеВУСН = ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.ПустаяСсылка)
	//|				И (НЕ ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.Предопределенный)
	//|			ТОГДА ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.РаспределятьПоБазовымНачислениям)
	//|		ИНАЧЕ ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете
	//|	КОНЕЦ КАК СпособОтраженияВБухучете,
	//|	ВЫБОР
	//|		КОГДА ОсновныеНачисленияОрганизаций.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ), ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет))
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления)
	//|		КОГДА ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоНаНачалоСобытия)
	//|		КОГДА ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|				И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|				И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.ОтражениеВУСН = ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.ПустаяСсылка)
	//|				И (НЕ ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.Предопределенный)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления)
	//|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоВидуРасчета)
	//|	КОНЕЦ КАК СтратегияОтраженияВУчете,
	//|	ВЫБОР
	//|		КОГДА (НЕ ОсновныеНачисленияОрганизаций.Предопределенный)
	//|			ТОГДА ОсновныеНачисленияОрганизаций.КодДоходаЕСН
	//|		КОГДА ОсновныеНачисленияОрганизаций.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ), ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет), ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами), ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам))
	//|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияЗаСчетФСС)
	//|		КОГДА ОсновныеНачисленияОрганизаций.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве), ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет))
	//|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.НеОблагаетсяЦеликом)
	//|		КОГДА ОсновныеНачисленияОрганизаций.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.НулеваяСумма)
	//|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПустаяСсылка)
	//|		КОГДА ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	//|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ОблагаетсяЦеликом)
	//|		КОГДА ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|				И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|				И ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.ОтражениеВУСН = ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.ПустаяСсылка)
	//|				И (НЕ ОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.Предопределенный)
	//|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.РаспределятьПоБазовымНачислениям)
	//|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ОблагаетсяЦеликом)
	//|	КОНЕЦ КАК КодДоходаЕСН
	//|ИЗ
	//|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	//|ГДЕ
	//|	ОсновныеНачисленияОрганизаций.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВРеглУчетеНачислений.ПустаяСсылка)
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ДополнительныеНачисленияОрганизаций.Ссылка,
	//|	ДополнительныеНачисленияОрганизаций.Наименование,
	//|	ВЫБОР
	//|		КОГДА ДополнительныеНачисленияОрганизаций.Предопределенный
	//|			ТОГДА ЛОЖЬ
	//|		КОГДА ДополнительныеНачисленияОрганизаций.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.РаспределятьПоБазовымНачислениям)
	//|			ТОГДА ВЫБОР
	//|					КОГДА ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	//|						ТОГДА ИСТИНА
	//|					КОГДА ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|							И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|							И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|							И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|							И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.ОтражениеВУСН = ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.ПустаяСсылка)
	//|							И (НЕ ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.Предопределенный)
	//|						ТОГДА ЛОЖЬ
	//|					ИНАЧЕ ИСТИНА
	//|				КОНЕЦ
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА ДополнительныеНачисленияОрганизаций.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ВыплатыЗаСчетПрибыли)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКНеЕНВД)
	//|		КОГДА ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются)
	//|		КОГДА ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|				И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|				И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.ОтражениеВУСН = ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.ПустаяСсылка)
	//|				И (НЕ ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.Предопределенный)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются)
	//|		КОГДА ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	//|			ТОГДА ВЫБОР
	//|					КОГДА ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СубконтоДт1.ОтнесениеРасходовКДеятельностиЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД)
	//|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД)
	//|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются)
	//|				КОНЕЦ
	//|		КОГДА ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	//|			ТОГДА ВЫБОР
	//|					КОГДА ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СубконтоДт2.ОтнесениеРасходовКДеятельностиЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД)
	//|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД)
	//|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются)
	//|				КОНЕЦ
	//|		КОГДА ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	//|			ТОГДА ВЫБОР
	//|					КОГДА ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СубконтоДт3.ОтнесениеРасходовКДеятельностиЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД)
	//|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД)
	//|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются)
	//|				КОНЕЦ
	//|		КОГДА ДополнительныеНачисленияОрганизаций.ЧастичноПодпадаетПодЕНВД
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются)
	//|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД)
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	//|			ТОГДА ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете
	//|		КОГДА ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|				И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|				И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.ОтражениеВУСН = ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.ПустаяСсылка)
	//|				И (НЕ ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.Предопределенный)
	//|			ТОГДА ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.РаспределятьПоБазовымНачислениям)
	//|		ИНАЧЕ ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоНаНачалоСобытия)
	//|		КОГДА ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|				И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|				И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.ОтражениеВУСН = ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.ПустаяСсылка)
	//|				И (НЕ ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.Предопределенный)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления)
	//|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоВидуРасчета)
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА (НЕ ДополнительныеНачисленияОрганизаций.Предопределенный)
	//|			ТОГДА ДополнительныеНачисленияОрганизаций.КодДоходаЕСН
	//|		КОГДА ДополнительныеНачисленияОрганизаций.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ДивидендыАкционеров), ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ДивидендыРаботников))
	//|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ВыплатыЗаСчетПрибыли)
	//|		КОГДА ДополнительныеНачисленияОрганизаций.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие), ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневка), ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДни), ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.СохраняемыйЗаработокНаВремяТрудоустройства))
	//|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.НеОблагаетсяЦеликом)
	//|		КОГДА ДополнительныеНачисленияОрганизаций.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ДоговорПодряда)
	//|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговораГПХ)
	//|		КОГДА ДополнительныеНачисленияОрганизаций.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.АвторскийДоговор)
	//|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговораАвторские)
	//|		КОГДА ДополнительныеНачисленияОрганизаций.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ЛицензионныйДоговор)
	//|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.НеЯвляетсяОбъектом)
	//|		КОГДА ДополнительныеНачисленияОрганизаций.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ВСвязиСоСмертью), ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриУсыновленииРебенка), ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриРожденииРебенка), ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриПостановкеНаУчетВРанниеСрокиБеременности))
	//|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияЗаСчетФСС)
	//|		КОГДА ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	//|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ОблагаетсяЦеликом)
	//|		КОГДА ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|				И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|				И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетКтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	//|				И ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.ОтражениеВУСН = ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.ПустаяСсылка)
	//|				И (НЕ ДополнительныеНачисленияОрганизаций.СпособОтраженияВБухучете.Предопределенный)
	//|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.РаспределятьПоБазовымНачислениям)
	//|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ОблагаетсяЦеликом)
	//|	КОНЕЦ
	//|ИЗ
	//|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
	//|ГДЕ
	//|	ДополнительныеНачисленияОрганизаций.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВРеглУчетеНачислений.ПустаяСсылка)";
	//
	//#Если Клиент Тогда
	//	ТекстСообщения = "Обработка видов расчета - основных и дополнительных начислений";
	//	Состояние(ТекстСообщения + ": подготовка данных ...");
	//#КонецЕсли
	//Выборка = Запрос.Выполнить().Выбрать();
	//#Если Клиент Тогда
	//	ВсегоДоков = Выборка.Количество();
	//	Номер = 1;
	//	Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	//	КомментарийОшибкаВКодеЕСН = Неопределено;
	//	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	//#КонецЕсли
	//Пока Выборка.Следующий() Цикл
	//	#Если Клиент Тогда
	//		Если Выборка.ОшибкаВКодеЕСН Тогда
	//			
	//			//необходимо оповестить пользователя, что код ЕСН не соответствует заданному способу отражения
	//			Если КомментарийОшибкаВКодеЕСН = Неопределено Тогда 
	//				
	//				Расшифровки = Новый Массив;
	//				// расшифровка сообщений представляет собой массив структур "Представление+Расшифровка"
	//				РасшифровкаКомментария = Новый Массив;
	//				РасшифровкаКомментария.Добавить("ПоказатьСправку");
	//				РасшифровкаКомментария.Добавить(Метаданные.ПланыВидовРасчета.ОсновныеНачисленияОрганизаций);
	//				Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", "справке.", РасшифровкаКомментария));
	//				
	//				//Добавим родительскую строку
	//				ТекстСообщения = "Внимание! В информационной базе обнаружены начисления, порядок налогообложения единым социальным налогом (ЕСН) которых противоречит отражению в бухучете.
	//				|Это может привести к ошибкам в расчете ЕСН и/или взносов в ПФР.
	//				|Для указанных ниже начислений необходимо согласовать отражение в бухучете и порядок налогообложения ЕСН. Подробнее см. в ";
	//				КомментарийОшибкаВКодеЕСН = ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения,Перечисления.ВидыСообщений.ВажнаяИнформация, Расшифровки);
	//			КонецЕсли;
	//			
	//			Расшифровки = Новый Массив;
	//			// расшифровка сообщений представляет собой массив структур "Представление+Расшифровка"
	//			Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", Выборка.ВидРасчета, Выборка.Ссылка));
	//			ОбработкаКомментариев.ДобавитьСообщение("", Перечисления.ВидыСообщений.Информация, Расшифровки, КомментарийОшибкаВКодеЕСН);
	//			
	//		КонецЕсли;
	//		
	//	#КонецЕсли	
	//	ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
	//	ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
	//	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	//	ДокументОбъект.Записать();
	//	#Если Клиент Тогда
	//		Если Номер % 50 = 0 Тогда
	//			Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
	//		КонецЕсли;
	//		Номер = Номер + 1;
	//	#КонецЕсли
	//КонецЦикла;
	//#Если Клиент Тогда
	//	Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	//	Если КомментарийОшибкаВКодеЕСН <> Неопределено Тогда
	//		ОбработкаКомментариев.ПоказатьСообщения();
	//	КонецЕсли;
	//#КонецЕсли
	//
	//
КонецПроцедуры

Процедура ЗаполнитьОрганизациюВПерерасчетах()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизацийПерерасчетОсновныхНачислений.ОбъектПерерасчета КАК ОбъектПерерасчета,
	|	ОсновныеНачисленияРаботниковОрганизацийПерерасчетОсновныхНачислений.ВидРасчета,
	|	ОсновныеНачисленияРаботниковОрганизацийПерерасчетОсновныхНачислений.ФизЛицо,
	|	ОсновныеНачисленияРаботниковОрганизацийПерерасчетОсновныхНачислений.ОбъектПерерасчета.Организация КАК Организация
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК ОсновныеНачисленияРаботниковОрганизацийПерерасчетОсновныхНачислений
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектПерерасчета";
	
	НаборЗаписей = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	ВыборкаПоРегистратору = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоРегистратору.СледующийПоЗначениюПоля("ОбъектПерерасчета") Цикл
		НаборЗаписей.Отбор.ОбъектПерерасчета.Установить(ВыборкаПоРегистратору.ОбъектПерерасчета);
		НаборЗаписей.Прочитать();
		
		Номер = 0;
		Пока ВыборкаПоРегистратору.Следующий() Цикл
			Строка = НаборЗаписей[Номер];
			Строка.Организация = ВыборкаПоРегистратору.Организация;
			Номер = Номер + 1;
		КонецЦикла;
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеНачисленияРаботниковОрганизацийПерерасчетДополнительныхНачислений.ОбъектПерерасчета КАК ОбъектПерерасчета,
	|	ДополнительныеНачисленияРаботниковОрганизацийПерерасчетДополнительныхНачислений.ВидРасчета,
	|	ДополнительныеНачисленияРаботниковОрганизацийПерерасчетДополнительныхНачислений.ФизЛицо,
	|	ДополнительныеНачисленияРаботниковОрганизацийПерерасчетДополнительныхНачислений.ОбъектПерерасчета.Организация КАК Организация
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК ДополнительныеНачисленияРаботниковОрганизацийПерерасчетДополнительныхНачислений
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектПерерасчета";
	
	НаборЗаписей = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	ВыборкаПоРегистратору = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоРегистратору.СледующийПоЗначениюПоля("ОбъектПерерасчета") Цикл
		НаборЗаписей.Отбор.ОбъектПерерасчета.Установить(ВыборкаПоРегистратору.ОбъектПерерасчета);
		НаборЗаписей.Прочитать();
		
		Номер = 0;
		Пока ВыборкаПоРегистратору.Следующий() Цикл
			Строка = НаборЗаписей[Номер];
			Строка.Организация = ВыборкаПоРегистратору.Организация;
			Номер = Номер + 1;
		КонецЦикла;
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетСреднегоЗаработкаПерерасчетСреднегоЗаработка.ОбъектПерерасчета КАК ОбъектПерерасчета,
	|	РасчетСреднегоЗаработкаПерерасчетСреднегоЗаработка.ВидРасчета,
	|	РасчетСреднегоЗаработкаПерерасчетСреднегоЗаработка.Физлицо,
	|	РасчетСреднегоЗаработкаПерерасчетСреднегоЗаработка.ОбъектПерерасчета.Организация КАК Организация
	|ИЗ
	|	РегистрРасчета.РасчетСреднегоЗаработка.ПерерасчетСреднегоЗаработка КАК РасчетСреднегоЗаработкаПерерасчетСреднегоЗаработка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектПерерасчета";
	
	НаборЗаписей = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	ВыборкаПоРегистратору = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоРегистратору.СледующийПоЗначениюПоля("ОбъектПерерасчета") Цикл
		НаборЗаписей.Отбор.ОбъектПерерасчета.Установить(ВыборкаПоРегистратору.ОбъектПерерасчета);
		НаборЗаписей.Прочитать();
		
		Номер = 0;
		Пока ВыборкаПоРегистратору.Следующий() Цикл
			Строка = НаборЗаписей[Номер];
			Строка.Организация = ВыборкаПоРегистратору.Организация;
			Номер = Номер + 1;
		КонецЦикла;
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура СозданиеЗадачПоСоискателям()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыЭлектронныхПисем.Предмет КАК Наименование,
	|	ЕСТЬNULL(ОбъектыЭлектронныхПисемИСобытий.Объект, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК Физлицо
	|ИЗ
	|	РегистрСведений.ПредметыЭлектронныхПисем КАК ПредметыЭлектронныхПисем
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьОбъектыЭлектронныхПисемИСобытий КАК ОбъектыЭлектронныхПисемИСобытий
	|		ПО ПредметыЭлектронныхПисем.Предмет = ОбъектыЭлектронныхПисемИСобытий.Предмет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаявкиКандидатов КАК ЗаявкиКандидатов
	|		ПО ПредметыЭлектронныхПисем.Предмет = ЗаявкиКандидатов.Наименование
	|ГДЕ
	|	(НЕ ПредметыЭлектронныхПисем.Предмет ПОДОБНО """")
	|	И ЗаявкиКандидатов.Ссылка ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Справочники.ЗаявкиКандидатов.СоздатьЭлемент();
		
		ЗаполнитьЗначенияСвойств(СправочникОбъект, Выборка);
		
		СправочникОбъект.Важность	= Перечисления.Важность.Средняя;
		
		СправочникОбъект.Записать();
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПредметыЭлектронныхПисем.Регистратор,
	|	ЗаявкиКандидатов.Ссылка КАК ЗаявкаКандидата
	|ИЗ
	|	РегистрСведений.ПредметыЭлектронныхПисем КАК ПредметыЭлектронныхПисем
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаявкиКандидатов КАК ЗаявкиКандидатов
	|		ПО ПредметыЭлектронныхПисем.Предмет = ЗаявкиКандидатов.Наименование
	|			И (ПредметыЭлектронныхПисем.Регистратор.ЗаявкаКандидата = ЗНАЧЕНИЕ(Справочник.ЗаявкиКандидатов.ПустаяСсылка))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.ЗаявкаКандидата	= Выборка.ЗаявкаКандидата;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура КонвертироватьКандидатовВЗадачи()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьКандидатыНаРаботуСрезПоследних.ФизЛицо.Наименование КАК Наименование,
	|	УдалитьКандидатыНаРаботуСрезПоследних.ФизЛицо,
	|	УдалитьКандидатыНаРаботуСрезПоследних.Статус КАК СостояниеСтарое,
	|	ЗНАЧЕНИЕ(Перечисление.Важность.Средняя) КАК Важность,
	|	ВЫБОР
	|		КОГДА УдалитьКандидатыНаРаботуСрезПоследних.Статус В (ЗНАЧЕНИЕ(Перечисление.УдалитьСостоянияКандидатаНаРаботу.Отклонен), ЗНАЧЕНИЕ(Перечисление.УдалитьСостоянияКандидатаНаРаботу.НеПрошелИспытательныйСрок), ЗНАЧЕНИЕ(Перечисление.УдалитьСостоянияКандидатаНаРаботу.ПринятНаРаботу))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Закрыта,
	|	РегистрацииКандидатов.ДатаОткрытия КАК ДатаОткрытия,
	|	РегистрацииКандидатов.ИсточникИнформации КАК ИсточникИнформации,
	|	УдалитьКандидатыНаРаботуСрезПоследних.Подразделение,
	|	УдалитьКандидатыНаРаботуСрезПоследних.Должность,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОрганизационнойСтруктурыПредприятия.ПоЦентрамОтветственности) КАК РежимНабораПерсонала
	|ИЗ
	|	(ВЫБРАТЬ
	|		УдалитьРегистрацияКандидата.ФизЛицо КАК ФизЛицо,
	|		НАЧАЛОПЕРИОДА(УдалитьРегистрацияКандидата.Дата, ДЕНЬ) КАК ДатаОткрытия,
	|		УдалитьРегистрацияКандидата.ИсточникКандидата КАК ИсточникИнформации
	|	ИЗ
	|		Документ.УдалитьРегистрацияКандидата КАК УдалитьРегистрацияКандидата
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		УдалитьРегистрацияКандидата.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(УдалитьРегистрацияКандидата.ДатаПоступленияРезюме, ДЕНЬ),
	|		УдалитьРегистрацияКандидата.ИсточникКандидата
	|	ИЗ
	|		Документ.УдалитьРегистрацияКандидата.УдалитьКандидаты КАК УдалитьРегистрацияКандидата) КАК РегистрацииКандидатов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьКандидатыНаРаботу.СрезПоследних(
	|		,
	|		(НЕ ФизЛицо В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ЗаявкиКандидатов.ФизЛицо
	|				ИЗ
	|					Справочник.ЗаявкиКандидатов КАК ЗаявкиКандидатов))) КАК УдалитьКандидатыНаРаботуСрезПоследних
	|		ПО РегистрацииКандидатов.ФизЛицо = УдалитьКандидатыНаРаботуСрезПоследних.ФизЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Справочники.ЗаявкиКандидатов.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СправочникОбъект, Выборка);
		Состояние = Справочники.СостоянияЗаявокКандидатов.НайтиПоНаименованию(Выборка.СостояниеСтарое);
		Если Состояние.Пустая() Тогда
			Объект = Справочники.СостоянияЗаявокКандидатов.СоздатьЭлемент();
			Объект.Наименование = Выборка.СостояниеСтарое;
			Объект.Записать();
			Состояние = Объект.Ссылка;
		КонецЕсли;
		СправочникОбъект.Состояние = Состояние;
		СправочникОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура КонвертироватьДокументРезультатИспытательногоСрока()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РезультатИспытательногоСрокаУдалитьРаботники.Ссылка КАК Ссылка,
	|	РезультатИспытательногоСрокаУдалитьРаботники.ДатаПринятияРешения КАК Дата,
	|	РезультатИспытательногоСрокаУдалитьРаботники.НомерСтроки КАК НомерСтроки,
	|	РезультатИспытательногоСрокаУдалитьРаботники.Сотрудник,
	|	РезультатИспытательногоСрокаУдалитьРаботники.Сотрудник.Физлицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА РезультатИспытательногоСрокаУдалитьРаботники.Решение
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатыИспытательногоСрока.Положительный)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РезультатыИспытательногоСрока.Отрицательный)
	|	КОНЕЦ КАК Результат,
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РезультатИспытательногоСрокаУдалитьРаботники.ДатаПринятияРешения, ДЕНЬ), ДЕНЬ, 1) КАК ДатаИзменения
	|ИЗ
	|	Документ.РезультатИспытательногоСрока.УдалитьРаботники КАК РезультатИспытательногоСрокаУдалитьРаботники
	|ГДЕ
	|	РезультатИспытательногоСрокаУдалитьРаботники.Ссылка.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		НачатьТранзакцию();
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			Если Выборка.НомерСтроки = 1 Тогда
				ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				Если ДокументОбъект.Проведен И Выборка.Результат = Перечисления.РезультатыИспытательногоСрока.Отрицательный Тогда
					НаборЗаписей = РегистрыСведений.НамеченныеСобытияПоПерсоналу.СоздатьНаборЗаписей();
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
					НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
					Запись = НаборЗаписей.Добавить();
					Запись.ДатаИзменения		= Выборка.ДатаИзменения;
					Запись.Физлицо				= Выборка.Физлицо;
					Запись.ПланируемоеСобытие	= Перечисления.НамеченныеСобытияПоПерсоналу.УвольнениеПослеИспытательногоСрока;
					НаборЗаписей.Записать();
				КонецЕсли;
				
			Иначе
				ДокументНовый = Документы.РезультатИспытательногоСрока.СоздатьДокумент();
				ДокументНовый.Ответственный	= ДокументОбъект.Ответственный;
				ДокументНовый.Комментарий	= ДокументОбъект.Комментарий;
				ЗаполнитьЗначенияСвойств(ДокументНовый, Выборка);
				ОбщегоНазначения.УстановитьНомерДокумента(ДокументНовый);
				ДокументНовый.Проведен		= ДокументОбъект.Проведен;
				
				ДокументНовый.ОбменДанными.Загрузка = Истина;
				ДокументНовый.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КонвертироватьДвиженияПоКандидатам()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РезультатИспытательногоСрока.Ссылка,
	|	РезультатИспытательногоСрока.Дата КАК Период,
	|	РезультатИспытательногоСрока.Сотрудник.Физлицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА РезультатИспытательногоСрока.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыИспытательногоСрока.Положительный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаНаИспытательномСроке.ПринятНаРаботу)
	|		КОГДА РезультатИспытательногоСрока.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыИспытательногоСрока.Отрицательный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаНаИспытательномСроке.НеПрошелИспытательныйСрок)
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Состояние
	|ИЗ
	|	Документ.РезультатИспытательногоСрока КАК РезультатИспытательногоСрока
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковНаИспытательномСроке КАК СостояниеРаботниковНаИспытательномСроке
	|		ПО РезультатИспытательногоСрока.Ссылка = СостояниеРаботниковНаИспытательномСроке.Регистратор
	|ГДЕ
	|	РезультатИспытательногоСрока.Результат <> ЗНАЧЕНИЕ(Перечисление.РезультатыИспытательногоСрока.Продлен)
	|	И РезультатИспытательногоСрока.Проведен
	|	И СостояниеРаботниковНаИспытательномСроке.Состояние ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.СостояниеРаботниковНаИспытательномСроке.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриемНаРаботуРаботники.Ссылка,
	|	ПриемНаРаботуРаботники.Ссылка.Дата КАК Период,
	|	ПриемНаРаботуРаботники.Сотрудник.Физлицо КАК Физлицо,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаНаИспытательномСроке.НеПрошелИспытательныйСрок) КАК Состояние
	|ИЗ
	|	Документ.ПриемНаРаботу.Работники КАК ПриемНаРаботуРаботники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковНаИспытательномСроке КАК СостояниеРаботниковНаИспытательномСроке
	|		ПО ПриемНаРаботуРаботники.Ссылка = СостояниеРаботниковНаИспытательномСроке.Регистратор
	|ГДЕ
	|	ПриемНаРаботуРаботники.ИспытательныйСрок = ЗНАЧЕНИЕ(Перечисление.ИспытательныйСрок.СИспытательнымСроком)
	|	И ПриемНаРаботуРаботники.УдалитьПроизошедшееСобытие
	|	И ПриемНаРаботуРаботники.Ссылка.Проведен
	|	И СостояниеРаботниковНаИспытательномСроке.Состояние ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.СостояниеРаботниковНаИспытательномСроке.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереносПлановыхДополнительныхНачислений()
           
	#Если Клиент Тогда
		Состояние("Обработка плановых дополнительных начислений (0)");
	#КонецЕсли
	ПВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Перечисления.КатегорииРасчетов;
	
	//сформируем значения реквизитов отражения в учете 
	//Запрос = Новый Запрос;
	//ТекстЗапроса = 
	//"ВЫБРАТЬ
	//|	ДополнительныеНачисления.Ссылка,
	//|	ВЫБОР
	//|		КОГДА ДополнительныеНачисления.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.РаспределятьПоБазовымНачислениям)
	//|			ТОГДА ВЫБОР
	//|					КОГДА ДополнительныеНачисления.СпособОтраженияВБухучете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|							И ДополнительныеНачисления.СпособОтраженияВБухучете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|						ТОГДА ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.РаспределятьПоБазовымНачислениям)
	//|					ИНАЧЕ ДополнительныеНачисления.СпособОтраженияВБухучете
	//|				КОНЕЦ
	//|		ИНАЧЕ ДополнительныеНачисления.СпособОтраженияВБухучете
	//|	КОНЕЦ КАК СпособОтраженияВБухучете,
	//|	ВЫБОР
	//|		КОГДА ДополнительныеНачисления.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	//|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ОблагаетсяЦеликом)
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА ДополнительныеНачисления.СпособОтраженияВБухучете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|						И ДополнительныеНачисления.СпособОтраженияВБухучете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	//|					ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.РаспределятьПоБазовымНачислениям)
	//|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ОблагаетсяЦеликом)
	//|			КОНЕЦ
	//|	КОНЕЦ КАК КодДоходаЕСН
	//|ИЗ
	//|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисления
	//|ГДЕ
	//|	ДополнительныеНачисления.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.РайонныйКоэффициент), ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.СевернаяНадбавка))";
	//
	//Запрос.Текст = ТекстЗапроса;
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Если Не ЗначениеЗаполнено(ПВР.РайонныйКоэффициент.СпособРасчета) Тогда
	//	
	//	СтарыйРВ = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.РайонныйКоэффициент;
	//	
	//	ВР = ПВР.РайонныйКоэффициент.ПолучитьОбъект();
	//	ВР.ОбменДанными.Загрузка = Истина;
	//	
	//	// копируем настройки пользователей
	//	ЗаполнитьЗначенияСвойств(ВР,СтарыйРВ, "СпособРасчета, ВидНачисленияПоСт255НК,КодДоходаНДФЛ,КодДоходаФСС_НС");
	//	ВР.БазовыеВидыРасчета.Загрузить(СтарыйРВ.БазовыеВидыРасчета.Выгрузить());
	//	ВР.ВедущиеВидыРасчета.Загрузить(СтарыйРВ.ВедущиеВидыРасчета.Выгрузить());
	//	
	//	// Заполняем новые свойства в.р.
	//	ВР.ВидВремени = Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы;
	//	ВР.ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
	//	
	//	ВР.КатегорияРасчета = Категории.ЗависимоеТретьегоУровня;
	//	
	//	// Кооректируем получившееся отражение в учете
	//	Выборка.НайтиСледующий(СтарыйРВ,"Ссылка");
	//	ВР.СпособОтраженияВБухучете = Выборка.СпособОтраженияВБухучете;
	//	ВР.КодДоходаЕСН = Выборка.КодДоходаЕСН;
	//	Вр.СтратегияОтраженияВУчете = ?(Выборка.СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.РаспределятьПоБазовымНачислениям, Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления,
	//														?(ЗначениеЗаполнено(Выборка.СпособОтраженияВБухучете), Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоВидуРасчета,Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоНаНачалоСобытия));
	//	Вр.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются;
	//	
	//	ВР.Записать();
	//	
	//КонецЕсли;
	//
	//Если Не ЗначениеЗаполнено(ПВР.СевернаяНадбавка.СпособРасчета) Тогда
	//	
	//	СтарыйРВ = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.СевернаяНадбавка;
	//	
	//	ВР = ПВР.СевернаяНадбавка.ПолучитьОбъект();
	//	ВР.ОбменДанными.Загрузка = Истина;
	//	
	//	// копируем настройки пользователей
	//	ЗаполнитьЗначенияСвойств(ВР,СтарыйРВ, "СпособРасчета, ВидНачисленияПоСт255НК,КодДоходаНДФЛ,КодДоходаФСС_НС");
	//	ВР.БазовыеВидыРасчета.Загрузить(СтарыйРВ.БазовыеВидыРасчета.Выгрузить());
	//	ВР.ВедущиеВидыРасчета.Загрузить(СтарыйРВ.ВедущиеВидыРасчета.Выгрузить());
	//	
	//	// Заполняем новые свойства в.р.
	//	ВР.ВидВремени = Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы;
	//	ВР.ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
	//	
	//	ВР.КатегорияРасчета = Категории.ЗависимоеТретьегоУровня;
	//	
	//	// Кооректируем получившееся отражение в учете
	//	Выборка.НайтиСледующий(СтарыйРВ,"Ссылка");
	//	ВР.СпособОтраженияВБухучете = Выборка.СпособОтраженияВБухучете;
	//	ВР.КодДоходаЕСН = Выборка.КодДоходаЕСН;
	//	Вр.СтратегияОтраженияВУчете = ?(Выборка.СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.РаспределятьПоБазовымНачислениям, Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления,
	//														?(ЗначениеЗаполнено(Выборка.СпособОтраженияВБухучете), Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоВидуРасчета,Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоНаНачалоСобытия));
	//	Вр.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются;

	//	ВР.Записать();
	//	
	//КонецЕсли;
	
	СоответствиеВидовРасчета = Новый Соответствие;
	СоответствиеВидовРасчета.Вставить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.РайонныйКоэффициент,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.РайонныйКоэффициент);
	СоответствиеВидовРасчета.Вставить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.СевернаяНадбавка,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СевернаяНадбавка);
	
	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение КАК ВидРасчета
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|ГДЕ
	|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение ССЫЛКА ПланВидовРасчета.ДополнительныеНачисленияОрганизаций
	|	И ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета
	|ИЗ
	|	РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
	|ГДЕ
	|	РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета ССЫЛКА ПланВидовРасчета.ДополнительныеНачисленияОрганизаций
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводСведенийОПлановыхНачисленияхРаботниковОрганизацийДополнительныеНачисления.ВидРасчета
	|ИЗ
	|	Документ.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.УдалитьДополнительныеНачисления КАК ВводСведенийОПлановыхНачисленияхРаботниковОрганизацийДополнительныеНачисления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизацийДополнительныеНачисления.ВидРасчета
	|ИЗ
	|	Документ.ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.УдалитьДополнительныеНачисления КАК ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизацийДополнительныеНачисления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадровоеПеремещениеОрганизацийДополнительныеНачисления.ВидРасчета
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций.УдалитьДополнительныеНачисления КАК КадровоеПеремещениеОрганизацийДополнительныеНачисления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомДополнительныеНачисления.ВидРасчета
	|ИЗ
	|	Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.УдалитьДополнительныеНачисления КАК ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомДополнительныеНачисления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтпускПоУходуЗаРебенкомДополнительныеНачисления.ВидРасчета
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком.УдалитьДополнительныеНачисления КАК ОтпускПоУходуЗаРебенкомДополнительныеНачисления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриемНаРаботуВОрганизациюДополнительныеНачисления.ВидРасчета
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.УдалитьДополнительныеНачисления КАК ПриемНаРаботуВОрганизациюДополнительныеНачисления";
	
	Результат =  Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СоответствиеВидовРасчета.Получить(Выборка.ВидРасчета) = Неопределено Тогда
			ВР = ПВР.СоздатьВидРасчета();
	        ЗаполнитьЗначенияСвойств(ВР,Выборка.ВидРасчета);
			ВР.ВидВремени = Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы;
	        ВР.БазовыеВидыРасчета.Загрузить(Выборка.ВидРасчета.БазовыеВидыРасчета.Выгрузить());
	        ВР.ВедущиеВидыРасчета.Загрузить(Выборка.ВидРасчета.ВедущиеВидыРасчета.Выгрузить());
	        ВР.ОбменДанными.Загрузка = Истина;
			ВР.Записать();
			СоответствиеВидовРасчета.Вставить(Выборка.ВидРасчета,ВР.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ЗаменяемыеВР", Результат.Выгрузить().ВыгрузитьКолонку("ВидРасчета"));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисленияОрганизацийБазовыеВидыРасчета.Ссылка
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.БазовыеВидыРасчета КАК ОсновныеНачисленияОрганизацийБазовыеВидыРасчета
	|ГДЕ
	|	ОсновныеНачисленияОрганизацийБазовыеВидыРасчета.ВидРасчета В(&ЗаменяемыеВР)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеНачисленияОрганизацийБазовыеВидыРасчета.Ссылка
	|ИЗ
	|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.БазовыеВидыРасчета КАК ДополнительныеНачисленияОрганизацийБазовыеВидыРасчета
	|ГДЕ
	|	ДополнительныеНачисленияОрганизацийБазовыеВидыРасчета.ВидРасчета В(&ЗаменяемыеВР)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВР = Выборка.Ссылка.ПолучитьОбъект();
		Для каждого СтрокаТЧ Из ВР.БазовыеВидыРасчета Цикл
			НовыйВР = СоответствиеВидовРасчета.Получить(СтрокаТЧ.ВидРасчета);
		    Если ЗначениеЗаполнено(НовыйВР) Тогда
				СтрокаТЧ.ВидРасчета = НовыйВР
			КонецЕсли;
		КонецЦикла;
        ВР.ОбменДанными.Загрузка = Истина;
		ВР.Записать();
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисленияОрганизацийБазовыеВидыРасчета.Ссылка
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВедущиеВидыРасчета КАК ОсновныеНачисленияОрганизацийБазовыеВидыРасчета
	|ГДЕ
	|	ОсновныеНачисленияОрганизацийБазовыеВидыРасчета.ВидРасчета В(&ЗаменяемыеВР)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеНачисленияОрганизацийБазовыеВидыРасчета.Ссылка
	|ИЗ
	|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ВедущиеВидыРасчета КАК ДополнительныеНачисленияОрганизацийБазовыеВидыРасчета
	|ГДЕ
	|	ДополнительныеНачисленияОрганизацийБазовыеВидыРасчета.ВидРасчета В(&ЗаменяемыеВР)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВР = Выборка.Ссылка.ПолучитьОбъект();
		Для каждого СтрокаТЧ Из ВР.ВедущиеВидыРасчета Цикл
			НовыйВР = СоответствиеВидовРасчета.Получить(СтрокаТЧ.ВидРасчета);
		    Если ЗначениеЗаполнено(НовыйВР) Тогда
				СтрокаТЧ.ВидРасчета = НовыйВР
			КонецЕсли;
		КонецЦикла;
        ВР.ОбменДанными.Загрузка = Истина;
		ВР.Записать();
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводСведенийОПлановыхНачисленияхРаботниковОрганизацийДополнительныеНачисления.Ссылка
	|ИЗ
	|	Документ.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.УдалитьДополнительныеНачисления КАК ВводСведенийОПлановыхНачисленияхРаботниковОрганизацийДополнительныеНачисления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка
	|ИЗ
	|	Документ.ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.УдалитьДополнительныеНачисления КАК ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизацийДополнительныеНачисления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадровоеПеремещениеОрганизацийДополнительныеНачисления.Ссылка
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций.УдалитьДополнительныеНачисления КАК КадровоеПеремещениеОрганизацийДополнительныеНачисления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомДополнительныеНачисления.Ссылка
	|ИЗ
	|	Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.УдалитьДополнительныеНачисления КАК ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомДополнительныеНачисления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтпускПоУходуЗаРебенкомДополнительныеНачисления.Ссылка
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком.УдалитьДополнительныеНачисления КАК ОтпускПоУходуЗаРебенкомДополнительныеНачисления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриемНаРаботуВОрганизациюДополнительныеНачисления.Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.УдалитьДополнительныеНачисления КАК ПриемНаРаботуВОрганизациюДополнительныеНачисления";
	
	#Если Клиент Тогда
		ТекстСообщения = "Обработка документов с плановыми дополнительными начислениями";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаРегистраторов.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	Пока ВыборкаРегистраторов.Следующий() Цикл
		ДокументОбъект = ВыборкаРегистраторов.Ссылка.ПолучитьОбъект();
		Для каждого СтрокаТЧ Из ДокументОбъект.УдалитьДополнительныеНачисления Цикл
			НоваяСтрока = ДокументОбъект.ОсновныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
		    НоваяСтрока.ВидРасчета = СоответствиеВидовРасчета.Получить(СтрокаТЧ.ВидРасчета);
		КонецЦикла; 
		ДокументОбъект.УдалитьДополнительныеНачисления.Очистить();
		
		ДокументОбъект.Записать();
		#Если Клиент Тогда
			Если Номер % 100 = 0 Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			КонецЕсли;
			Номер = Номер + 1;
		#КонецЕсли
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлановыеНачисленияРаботниковОрганизаций.Регистратор
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|ГДЕ
	|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение ССЫЛКА ПланВидовРасчета.ДополнительныеНачисленияОрганизаций
	|	И ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой)";
	
	ТекстСообщения = "Обработка плановых дополнительных начислений (1)";
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	ВсегоДоков = ВыборкаРегистраторов.Количество();
	Номер = 1;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	
	НаборЗаписей = РегистрыСведений.ПлановыеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Использование = Истина;
	ТипДопНачислений = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций");
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Значение = ВыборкаРегистраторов.Регистратор;
		НаборЗаписей.Прочитать();
		Для каждого СтрокаТЧ Из НаборЗаписей Цикл
			Если ТипЗнч(СтрокаТЧ.ВидРасчетаИзмерение) = ТипДопНачислений Тогда
				НовыйВР = СоответствиеВидовРасчета.Получить(СтрокаТЧ.ВидРасчетаИзмерение);
				Если ЗначениеЗаполнено(НовыйВР) Тогда
					СтрокаТЧ.ВидРасчета = НовыйВР;
					СтрокаТЧ.ВидРасчетаИзмерение = НовыйВР;
					СтрокаТЧ.ВидРасчетаЗавершения = СоответствиеВидовРасчета.Получить(СтрокаТЧ.ВидРасчетаЗавершения);
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла; 
		НаборЗаписей.Записать();
		
		Если Номер % 100 = 0 Тогда
			#Если Клиент Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			#КонецЕсли
		КонецЕсли;
		Номер = Номер + 1;
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеглУчетПлановыхНачисленийРаботниковОрганизаций.Регистратор
	|ИЗ
	|	РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
	|ГДЕ
	|	РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета ССЫЛКА ПланВидовРасчета.ДополнительныеНачисленияОрганизаций";
	
	ТекстСообщения = "Обработка плановых дополнительных начислений (2)";
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	ВсегоДоков = ВыборкаРегистраторов.Количество();
	Номер = 1;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	
	НаборЗаписей = РегистрыСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Использование = Истина;
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Значение = ВыборкаРегистраторов.Регистратор;
		НаборЗаписей.Прочитать();
		Для каждого СтрокаТЧ Из НаборЗаписей Цикл
			Если ТипЗнч(СтрокаТЧ.ВидРасчета) = ТипДопНачислений Тогда
				НовыйВР = СоответствиеВидовРасчета.Получить(СтрокаТЧ.ВидРасчета);
				Если ЗначениеЗаполнено(НовыйВР) Тогда
					СтрокаТЧ.ВидРасчета = НовыйВР;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла; 
		НаборЗаписей.Записать();
		
		Если Номер % 100 = 0 Тогда
			#Если Клиент Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			#КонецЕсли
		КонецЕсли;
		Номер = Номер + 1;
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
КонецПроцедуры

Процедура ОбновитьДолжности()
	
	// сначала создадим должности организаций и пропишем в них ссылки на должности
	СоздатьДолжностиОрганизаций();
	
	//////////////////////////////////////////////////////////////
	// Регистры
	
	// НамеченныеСобытияПоПерсоналу
	ЗаполнитьНаборЗаписейДолжностей("ДатаИзменения", РегистрыСведений, "НамеченныеСобытияПоПерсоналу");
	
	// Работники
	ЗаполнитьНаборЗаписейДолжностей("Период", РегистрыСведений, "Работники");
	
	// СхемыМотивацииРаботников
	ЗаполнитьНезависимыйНаборЗаписейДолжностей(РегистрыСведений, "СхемыМотивацииРаботников");
	
	// ЗанятыеРабочиеМеста
	ЗаполнитьНаборЗаписейДолжностей("Период", РегистрыНакопления, "ЗанятыеРабочиеМеста");
	
	//////////////////////////////////////////////////////////////
	// Документы
	
	// КадровоеПеремещение
	ЗаполнитьТабличнуюЧастьДокументовДолжностей("КадровоеПеремещение", "Работники", "НоваяДолжность");
	
	// ПриемНаРаботу
	ЗаполнитьТабличнуюЧастьДокументовДолжностей("ПриемНаРаботу", "Работники", "Должность");
	
КонецПроцедуры

Процедура СоздатьДолжностиОрганизаций()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Должности.Ссылка КАК Должность,
	|	Должности.Наименование,
	|	ВЫБОР
	|		КОГДА ДолжностиОрганизаций.Ссылка ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СоздаватьДолжностьОрганизации,
	|	ДолжностиОрганизаций.Ссылка КАК ДолжностьОрганизации
	|ИЗ
	|	Справочник.Должности КАК Должности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
	|		ПО Должности.Наименование = ДолжностиОрганизаций.Наименование
	|			И (ДолжностиОрганизаций.Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка))
	|ГДЕ
	|	(НЕ Должности.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ДолжностиОрганизаций.Должность
	|				ИЗ
	|					Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.СоздаватьДолжностьОрганизации Тогда
			СправочникОбъект = Справочники.ДолжностиОрганизаций.СоздатьЭлемент();
		Иначе
			СправочникОбъект = Выборка.ДолжностьОрганизации.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СправочникОбъект, Выборка);
		СправочникОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНаборЗаписейДолжностей(ПолеДаты, МенеджерРегистров, ИмяРегистра)
	
	Если ТипЗнч(МенеджерРегистров) = Тип("РегистрыСведенийМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрСведений";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыНакопленияМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрНакопления";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыБухгалтерииМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрБухгалтерии";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыРасчетаМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрРасчета";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Приказ,
	|	МИНИМУМ(Регистр." + ПолеДаты + ") КАК Период
	|ИЗ
	|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|ГДЕ
	|	Регистр.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)
	|	И Регистр.УдалитьДолжность <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Регистр.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу.Текст =
	"ВЫБРАТЬ
	|	Должности.ДолжностьОрганизации КАК Должность,
	|	Регистр.НомерСтроки КАК НомерСтроки,
	|	Регистр.*
	|ИЗ
	|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ДолжностиОрганизаций.Ссылка) КАК ДолжностьОрганизации,
	|			ДолжностиОрганизаций.Должность КАК Должность
	|		ИЗ
	|			Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДолжностиОрганизаций.Должность) КАК Должности
	|		ПО Регистр.УдалитьДолжность = Должности.Должность
	|ГДЕ
	|	Регистр.Регистратор = &Приказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние(ПрефиксИмениТаблицы + "." + ИмяРегистра + ". Обрабатывается набор записей " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ",	Выборка.Приказ);
		
		НаборЗаписей = МенеджерРегистров[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Приказ;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоДокументу);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНезависимыйНаборЗаписейДолжностей(МенеджерРегистров, ИмяРегистра)
	
	Если ТипЗнч(МенеджерРегистров) = Тип("РегистрыСведенийМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрСведений";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыНакопленияМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрНакопления";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыБухгалтерииМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрБухгалтерии";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыРасчетаМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрРасчета";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.УдалитьДолжность КАК УдалитьДолжность
	|ИЗ
	|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|ГДЕ
	|	Регистр.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)
	|	И Регистр.УдалитьДолжность <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	УдалитьДолжность";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу.Текст =
	"ВЫБРАТЬ
	|	Должности.ДолжностьОрганизации КАК Должность,
	|	Регистр.*
	|ИЗ
	|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ДолжностиОрганизаций.Ссылка) КАК ДолжностьОрганизации,
	|			ДолжностиОрганизаций.Должность КАК Должность
	|		ИЗ
	|			Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДолжностиОрганизаций.Должность) КАК Должности
	|		ПО Регистр.УдалитьДолжность = Должности.Должность
	|ГДЕ
	|	Регистр.УдалитьДолжность = &УдалитьДолжность";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние(ПрефиксИмениТаблицы + "." + ИмяРегистра + ". Обрабатывается набор записей " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ЗапросПоДокументу.УстановитьПараметр("УдалитьДолжность",	Выборка.УдалитьДолжность);
		
		НаборЗаписей = МенеджерРегистров[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УдалитьДолжность.Установить(Выборка.УдалитьДолжность);
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоДокументу);
		КонецЦикла;
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// заполнение поля Сотрудник в табличной части документа
//
Процедура ЗаполнитьТабличнуюЧастьДокументовДолжностей(ИмяДокумента, ИмяТабличнойЧасти, ИмяРеквизитаДолжность)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК Документ
	|ИЗ
	|	Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + " КАК Док
	|ГДЕ
	|	Док."+ИмяРеквизитаДолжность+" = ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)
	|	И Док.Удалить"+ИмяРеквизитаДолжность+" <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Ссылка.Дата";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу.Текст =
	"ВЫБРАТЬ
	|	ДолжностиОрганизаций.Ссылка КАК "+ИмяРеквизитаДолжность+",
	|	Док.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + " КАК Док
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
	|		ПО Док.Удалить"+ИмяРеквизитаДолжность+" = ДолжностиОрганизаций.Должность
	|ГДЕ
	|	Док.Ссылка = &Приказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + ". Обрабатывается документ " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ",	Выборка.Документ);
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			Строка = ДокументОбъект[ИмяТабличнойЧасти].Найти(ВыборкаПоДокументу.НомерСтроки, "НомерСтроки");
			ЗаполнитьЗначенияСвойств(Строка, ВыборкаПоДокументу);
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме(ПолеДаты, МенеджерРегистров, ИмяРегистра)
	
	ИмяРеквизитаФизлицо = "УдалитьФизлицо";
	Если ТипЗнч(МенеджерРегистров) = Тип("РегистрыСведенийМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрСведений";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыНакопленияМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрНакопления";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыБухгалтерииМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрБухгалтерии";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыРасчетаМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрРасчета";
		ИмяРеквизитаФизлицо = "Физлицо";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Организация КАК Организация,
	|	Регистр.Регистратор КАК Приказ,
	|	Регистр." + ПолеДаты+"
	|ИЗ
	|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|ГДЕ
	|	Регистр.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистр." + ПолеДаты;
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу.Текст =
	"ВЫБРАТЬ
	|	Регистр.Организация КАК Организация,
	|	Регистр."+ИмяРеквизитаФизлицо+" КАК Физлицо,
	|	Регистр."+ИмяРеквизитаФизлицо+".Наименование КАК ФизлицоНаименование,
	|	Регистр.НомерСтроки КАК НомерСтроки,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Регистр.*
	|ИЗ
	|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокСотрудников.Сотрудник КАК Сотрудник,
	|			СписокСотрудников.Физлицо КАК Физлицо,
	|			СписокСотрудников.Сотрудник.Организация КАК Организация
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(СотрудникиОсновноеМесто.Ссылка) КАК Сотрудник,
	|				СотрудникиОсновноеМесто.Физлицо КАК Физлицо,
	|				1 КАК Приоритет
	|			ИЗ
	|				Справочник.СотрудникиОрганизаций КАК СотрудникиОсновноеМесто
	|			ГДЕ
	|				СотрудникиОсновноеМесто.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|				И СотрудникиОсновноеМесто.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СотрудникиОсновноеМесто.Физлицо
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				СотрудникиСовместительство.Ссылка,
	|				СотрудникиСовместительство.Физлицо,
	|				2
	|			ИЗ
	|				Справочник.СотрудникиОрганизаций КАК СотрудникиСовместительство
	|			ГДЕ
	|				СотрудникиСовместительство.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|				И СотрудникиСовместительство.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				СотрудникиДУ.Ссылка,
	|				СотрудникиДУ.Физлицо,
	|				3
	|			ИЗ
	|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
	|			ГДЕ
	|				СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)) КАК СписокСотрудников
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					СписокФизическихЛиц.Физлицо КАК Физлицо,
	|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
	|				ИЗ
	|					(ВЫБРАТЬ
	|						СотрудникиОсновноеМесто.Физлицо КАК Физлицо,
	|						1 КАК Приоритет
	|					ИЗ
	|						Справочник.СотрудникиОрганизаций КАК СотрудникиОсновноеМесто
	|					ГДЕ
	|						СотрудникиОсновноеМесто.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|						И СотрудникиОсновноеМесто.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						СотрудникиСовместительство.Физлицо,
	|						2
	|					ИЗ
	|						Справочник.СотрудникиОрганизаций КАК СотрудникиСовместительство
	|					ГДЕ
	|						СотрудникиСовместительство.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|						И СотрудникиСовместительство.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						СотрудникиДУ.Физлицо,
	|						3
	|					ИЗ
	|						Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
	|					ГДЕ
	|						СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)) КАК СписокФизическихЛиц
	|				
	|				СГРУППИРОВАТЬ ПО
	|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
	|				ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
	|					И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет) КАК Сотрудники
	|		ПО Регистр."+ИмяРеквизитаФизлицо+" = Сотрудники.Физлицо
	|			И Регистр.Организация = Сотрудники.Организация
	|ГДЕ
	|	Регистр.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|	И Регистр."+ИмяРеквизитаФизлицо+" <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	И Регистр.Регистратор = &Приказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	// Вновь созданных сотрудников будем помещать в ТЗ, чтобы избежать многократного создания
	// сотрудников с одинаковыми физлицом и организацией
	СписокСозданныхСотрудников = Новый ТаблицаЗначений;
	СписокСозданныхСотрудников.Колонки.Добавить("Сотрудник");
	СписокСозданныхСотрудников.Колонки.Добавить("Физлицо");
	СписокСозданныхСотрудников.Колонки.Добавить("Организация");
	
	СтруктураПоиска = Новый Структура;
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние(ПрефиксИмениТаблицы + "." + ИмяРегистра + ". Обрабатывается набор записей " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ",	Выборка.Приказ);
		
		НаборЗаписей = МенеджерРегистров[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Приказ;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СписокСозданныхСотрудников.Очистить();
		Пока ВыборкаПоДокументу.Следующий() Цикл
			Строка = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ВыборкаПоДокументу);
			Если ВыборкаПоДокументу.Сотрудник = NULL Тогда
				СтруктураПоиска.Вставить("Физлицо",		ВыборкаПоДокументу.Физлицо);
				СтруктураПоиска.Вставить("Организация",	ВыборкаПоДокументу.Организация);
				
				МассивСотрудников = СписокСозданныхСотрудников.НайтиСтроки(СтруктураПоиска);
				
				Если МассивСотрудников.Количество() > 0 Тогда
					Строка.Сотрудник	= МассивСотрудников[0].Сотрудник;
				Иначе
					СотрудникОбъект = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
					СотрудникОбъект.Наименование	= ВыборкаПоДокументу.ФизлицоНаименование;
					СотрудникОбъект.Физлицо			= ВыборкаПоДокументу.Физлицо;
					СотрудникОбъект.Организация		= ВыборкаПоДокументу.Организация;
					СотрудникОбъект.Записать();
					Строка.Сотрудник	= СотрудникОбъект.Ссылка;
					
					СтрокаТаблицы = СписокСозданныхСотрудников.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Строка, "Сотрудник");
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаПоДокументу, "Физлицо,Организация");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

// заполнение поля Сотрудник в документе
//
Процедура ЗаполнитьДокументСотрудникамиБезПриказовОПриеме(ИмяДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Организация КАК Организация,
	|	Документ.Ссылка КАК Документ
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК Документ
	|ГДЕ
	|	Документ.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|	И Документ.Физлицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ";
	
	ЗапросыПоДокументу = Новый Массив(1);
	
	Индекс = 0;
	Пока Индекс < ЗапросыПоДокументу.Количество() Цикл
		ЗапросыПоДокументу[Индекс] = Новый Запрос;
		
		ЗапросыПоДокументу[Индекс].Текст =
		"ВЫБРАТЬ
		|	Док.Организация КАК Организация,
		|	Док.Физлицо КАК Физлицо,
		|	Док.Физлицо.Наименование КАК ФизлицоНаименование,
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокСотрудников.Сотрудник КАК Сотрудник,
		|			СписокСотрудников.Физлицо КАК Физлицо,
		|			СписокСотрудников.Сотрудник.Организация КАК Организация
		|		ИЗ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(СотрудникиОсновноеМесто.Ссылка) КАК Сотрудник,
		|				СотрудникиОсновноеМесто.Физлицо КАК Физлицо,
		|				1 КАК Приоритет
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиОсновноеМесто
		|			ГДЕ
		|				СотрудникиОсновноеМесто.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|				И СотрудникиОсновноеМесто.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СотрудникиОсновноеМесто.Физлицо
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				СотрудникиСовместительство.Ссылка,
		|				СотрудникиСовместительство.Физлицо,
		|				2
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиСовместительство
		|			ГДЕ
		|				СотрудникиСовместительство.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|				И СотрудникиСовместительство.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				СотрудникиДУ.Ссылка,
		|				СотрудникиДУ.Физлицо,
		|				3
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
		|			ГДЕ
		|				СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)) КАК СписокСотрудников
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СписокФизическихЛиц.Физлицо КАК Физлицо,
		|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
		|				ИЗ
		|					(ВЫБРАТЬ
		|						СотрудникиОсновноеМесто.Физлицо КАК Физлицо,
		|						1 КАК Приоритет
		|					ИЗ
		|						Справочник.СотрудникиОрганизаций КАК СотрудникиОсновноеМесто
		|					ГДЕ
		|						СотрудникиОсновноеМесто.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|						И СотрудникиОсновноеМесто.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						СотрудникиСовместительство.Физлицо,
		|						2
		|					ИЗ
		|						Справочник.СотрудникиОрганизаций КАК СотрудникиСовместительство
		|					ГДЕ
		|						СотрудникиСовместительство.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|						И СотрудникиСовместительство.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						СотрудникиДУ.Физлицо,
		|						3
		|					ИЗ
		|						Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
		|					ГДЕ
		|						СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)) КАК СписокФизическихЛиц
		|				
		|				СГРУППИРОВАТЬ ПО
		|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
		|				ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
		|					И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет) КАК Сотрудники
		|		ПО Док.Физлицо = Сотрудники.Физлицо
		|			И Док.Организация = Сотрудники.Организация
		|ГДЕ
		|	Док.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
		|	И Док.Физлицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|	И Док.Ссылка = &Приказ";
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	// Вновь созданных сотрудников будем помещать в ТЗ, чтобы избежать многократного создания
	// сотрудников с одинаковыми физлицом и организацией
	СписокСозданныхСотрудников = Новый ТаблицаЗначений;
	СписокСозданныхСотрудников.Колонки.Добавить("Сотрудник");
	СписокСозданныхСотрудников.Колонки.Добавить("Физлицо");
	СписокСозданныхСотрудников.Колонки.Добавить("Организация");
	
	СтруктураПоиска = Новый Структура;
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Документ." + ИмяДокумента + ". Обрабатывается документ " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Индекс = 0;
		Пока Индекс < ЗапросыПоДокументу.Количество() Цикл
			ЗапросыПоДокументу[Индекс].УстановитьПараметр("Приказ",	Выборка.Документ);
			
			СписокСозданныхСотрудников.Очистить();
			ВыборкаПоДокументу = ЗапросыПоДокументу[Индекс].Выполнить().Выбрать();
			
			Пока ВыборкаПоДокументу.Следующий() Цикл
				Если ВыборкаПоДокументу.Сотрудник = NULL Тогда
					СтруктураПоиска.Вставить("Физлицо",		ВыборкаПоДокументу.Физлицо);
					СтруктураПоиска.Вставить("Организация",	ВыборкаПоДокументу.Организация);
					
					МассивСотрудников = СписокСозданныхСотрудников.НайтиСтроки(СтруктураПоиска);
					
					Если МассивСотрудников.Количество() > 0 Тогда
						ДокументОбъект.Сотрудник	= МассивСотрудников[0].Сотрудник;
					Иначе
						СотрудникОбъект = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
						СотрудникОбъект.Наименование	= ВыборкаПоДокументу.ФизлицоНаименование;
						СотрудникОбъект.Физлицо			= ВыборкаПоДокументу.Физлицо;
						СотрудникОбъект.Организация		= ВыборкаПоДокументу.Организация;
						СотрудникОбъект.Записать();
						ДокументОбъект.Сотрудник	= СотрудникОбъект.Ссылка;
						
						СтрокаТаблицы = СписокСозданныхСотрудников.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДокументОбъект, "Сотрудник");
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаПоДокументу, "Физлицо,Организация");
					КонецЕсли;
				Иначе
					ДокументОбъект.Сотрудник	= ВыборкаПоДокументу.Сотрудник;
				КонецЕсли;
			КонецЦикла;
			
			Индекс = Индекс + 1;
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// заполнение поля Сотрудник в табличной части документа
//
Процедура ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(ТабличныеЧасти, ИмяДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка.Организация КАК Организация,
	|	Документ.Ссылка КАК Документ
	|ИЗ
	|	Документ." + ИмяДокумента + "." + ТабличныеЧасти[0].Имя + " КАК Документ
	|ГДЕ
	|	Документ.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ.Ссылка.Дата";
	
	ЗапросыПоДокументу = Новый Массив(ТабличныеЧасти.Количество());
	
	Индекс = 0;
	Пока Индекс < ЗапросыПоДокументу.Количество() Цикл
		ЗапросыПоДокументу[Индекс] = Новый Запрос;
		
		Если (ИмяДокумента = "НачислениеПоБольничномуЛисту") ИЛИ (ИмяДокумента = "ОтпускПоУходуЗаРебенком") Тогда
			ЗапросыПоДокументу[Индекс].Текст =
			"ВЫБРАТЬ
			|	Док.Ссылка.Организация КАК Организация,
			|	Док.Ссылка.Физлицо КАК Физлицо,
			|	Док.Ссылка.Физлицо.Наименование КАК ФизлицоНаименование,
			|	Док.НомерСтроки КАК НомерСтроки,
			|	Сотрудники.Сотрудник КАК Сотрудник
			|ИЗ
			|	Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Док
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СписокСотрудников.Сотрудник КАК Сотрудник,
			|			СписокСотрудников.Физлицо КАК Физлицо,
			|			СписокСотрудников.Сотрудник.Организация КАК Организация
			|		ИЗ
			|			(ВЫБРАТЬ
			|				МАКСИМУМ(СотрудникиОсновноеМесто.Ссылка) КАК Сотрудник,
			|				СотрудникиОсновноеМесто.Физлицо КАК Физлицо,
			|				1 КАК Приоритет
			|			ИЗ
			|				Справочник.СотрудникиОрганизаций КАК СотрудникиОсновноеМесто
			|			ГДЕ
			|				СотрудникиОсновноеМесто.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
			|				И СотрудникиОсновноеМесто.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
			|			
			|			СГРУППИРОВАТЬ ПО
			|				СотрудникиОсновноеМесто.Физлицо
			|			
			|			ОБЪЕДИНИТЬ
			|			
			|			ВЫБРАТЬ
			|				СотрудникиСовместительство.Ссылка,
			|				СотрудникиСовместительство.Физлицо,
			|				2
			|			ИЗ
			|				Справочник.СотрудникиОрганизаций КАК СотрудникиСовместительство
			|			ГДЕ
			|				СотрудникиСовместительство.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
			|				И СотрудникиСовместительство.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
			|			
			|			ОБЪЕДИНИТЬ
			|			
			|			ВЫБРАТЬ
			|				СотрудникиДУ.Ссылка,
			|				СотрудникиДУ.Физлицо,
			|				3
			|			ИЗ
			|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
			|			ГДЕ
			|				СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)) КАК СписокСотрудников
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|					СписокФизическихЛиц.Физлицо КАК Физлицо,
			|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
			|				ИЗ
			|					(ВЫБРАТЬ
			|						СотрудникиОсновноеМесто.Физлицо КАК Физлицо,
			|						1 КАК Приоритет
			|					ИЗ
			|						Справочник.СотрудникиОрганизаций КАК СотрудникиОсновноеМесто
			|					ГДЕ
			|						СотрудникиОсновноеМесто.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
			|						И СотрудникиОсновноеМесто.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
			|					
			|					ОБЪЕДИНИТЬ
			|					
			|					ВЫБРАТЬ
			|						СотрудникиСовместительство.Физлицо,
			|						2
			|					ИЗ
			|						Справочник.СотрудникиОрганизаций КАК СотрудникиСовместительство
			|					ГДЕ
			|						СотрудникиСовместительство.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
			|						И СотрудникиСовместительство.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
			|					
			|					ОБЪЕДИНИТЬ
			|					
			|					ВЫБРАТЬ
			|						СотрудникиДУ.Физлицо,
			|						3
			|					ИЗ
			|						Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
			|					ГДЕ
			|						СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)) КАК СписокФизическихЛиц
			|				
			|				СГРУППИРОВАТЬ ПО
			|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
			|				ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
			|					И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет) КАК Сотрудники
			|		ПО Док.Ссылка.Физлицо = Сотрудники.Физлицо
			|			И Док.Ссылка.Организация = Сотрудники.Организация
			|ГДЕ
			|	Док.Ссылка = &Приказ
			|	И Док.Ссылка.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
			|	И Док.Ссылка.Физлицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
			
		Иначе
			ЗапросыПоДокументу[Индекс].Текст =
			"ВЫБРАТЬ
			|	Док.Ссылка.Организация КАК Организация,
			|	Док.Физлицо КАК Физлицо,
			|	Док.Физлицо.Наименование КАК ФизлицоНаименование,
			|	Док.НомерСтроки КАК НомерСтроки,
			|	Сотрудники.Сотрудник КАК Сотрудник
			|ИЗ
			|	Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Док
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СписокСотрудников.Сотрудник КАК Сотрудник,
			|			СписокСотрудников.Физлицо КАК Физлицо,
			|			СписокСотрудников.Сотрудник.Организация КАК Организация
			|		ИЗ
			|			(ВЫБРАТЬ
			|				МАКСИМУМ(СотрудникиОсновноеМесто.Ссылка) КАК Сотрудник,
			|				СотрудникиОсновноеМесто.Физлицо КАК Физлицо,
			|				1 КАК Приоритет
			|			ИЗ
			|				Справочник.СотрудникиОрганизаций КАК СотрудникиОсновноеМесто
			|			ГДЕ
			|				СотрудникиОсновноеМесто.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
			|				И СотрудникиОсновноеМесто.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
			|			
			|			СГРУППИРОВАТЬ ПО
			|				СотрудникиОсновноеМесто.Физлицо
			|			
			|			ОБЪЕДИНИТЬ
			|			
			|			ВЫБРАТЬ
			|				СотрудникиСовместительство.Ссылка,
			|				СотрудникиСовместительство.Физлицо,
			|				2
			|			ИЗ
			|				Справочник.СотрудникиОрганизаций КАК СотрудникиСовместительство
			|			ГДЕ
			|				СотрудникиСовместительство.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
			|				И СотрудникиСовместительство.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
			|			
			|			ОБЪЕДИНИТЬ
			|			
			|			ВЫБРАТЬ
			|				СотрудникиДУ.Ссылка,
			|				СотрудникиДУ.Физлицо,
			|				3
			|			ИЗ
			|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
			|			ГДЕ
			|				СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)) КАК СписокСотрудников
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|					СписокФизическихЛиц.Физлицо КАК Физлицо,
			|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
			|				ИЗ
			|					(ВЫБРАТЬ
			|						СотрудникиОсновноеМесто.Физлицо КАК Физлицо,
			|						1 КАК Приоритет
			|					ИЗ
			|						Справочник.СотрудникиОрганизаций КАК СотрудникиОсновноеМесто
			|					ГДЕ
			|						СотрудникиОсновноеМесто.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
			|						И СотрудникиОсновноеМесто.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
			|					
			|					ОБЪЕДИНИТЬ
			|					
			|					ВЫБРАТЬ
			|						СотрудникиСовместительство.Физлицо,
			|						2
			|					ИЗ
			|						Справочник.СотрудникиОрганизаций КАК СотрудникиСовместительство
			|					ГДЕ
			|						СотрудникиСовместительство.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
			|						И СотрудникиСовместительство.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
			|					
			|					ОБЪЕДИНИТЬ
			|					
			|					ВЫБРАТЬ
			|						СотрудникиДУ.Физлицо,
			|						3
			|					ИЗ
			|						Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
			|					ГДЕ
			|						СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)) КАК СписокФизическихЛиц
			|				
			|				СГРУППИРОВАТЬ ПО
			|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
			|				ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
			|					И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет) КАК Сотрудники
			|		ПО Док.Физлицо = Сотрудники.Физлицо
			|			И Док.Ссылка.Организация = Сотрудники.Организация
			|ГДЕ
			|	Док.Ссылка = &Приказ
			|	И Док.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
			|	И Док.Физлицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
			
		КонецЕсли;
			
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	// Вновь созданных сотрудников будем помещать в ТЗ, чтобы избежать многократного создания
	// сотрудников с одинаковыми физлицом и организацией
	СписокСозданныхСотрудников = Новый ТаблицаЗначений;
	СписокСозданныхСотрудников.Колонки.Добавить("Сотрудник");
	СписокСозданныхСотрудников.Колонки.Добавить("Физлицо");
	СписокСозданныхСотрудников.Колонки.Добавить("Организация");
	
	СтруктураПоиска = Новый Структура;
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Документ." + ИмяДокумента + ".ТабличныеЧасти. Обрабатывается документ " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Для Индекс = 0 По ЗапросыПоДокументу.Количество() - 1 Цикл
			ЗапросыПоДокументу[Индекс].УстановитьПараметр("Приказ",	Выборка.Документ);
			
			СписокСозданныхСотрудников.Очистить();
			ВыборкаПоДокументу = ЗапросыПоДокументу[Индекс].Выполнить().Выбрать();
			
			Пока ВыборкаПоДокументу.Следующий() Цикл
				Строка = ДокументОбъект[ТабличныеЧасти[Индекс].Имя].Найти(ВыборкаПоДокументу.НомерСтроки, "НомерСтроки");
				
				Если ВыборкаПоДокументу.Сотрудник = NULL Тогда
					СтруктураПоиска.Вставить("Физлицо",		ВыборкаПоДокументу.Физлицо);
					СтруктураПоиска.Вставить("Организация",	ВыборкаПоДокументу.Организация);
					
					МассивСотрудников = СписокСозданныхСотрудников.НайтиСтроки(СтруктураПоиска);
					
					Если МассивСотрудников.Количество() > 0 Тогда
						Строка.Сотрудник	= МассивСотрудников[0].Сотрудник;
					Иначе
						СотрудникОбъект = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
						СотрудникОбъект.Наименование	= ВыборкаПоДокументу.ФизлицоНаименование;
						СотрудникОбъект.Физлицо			= ВыборкаПоДокументу.Физлицо;
						СотрудникОбъект.Организация		= ВыборкаПоДокументу.Организация;
						СотрудникОбъект.Записать();
						Строка.Сотрудник	= СотрудникОбъект.Ссылка;
						
						СтрокаТаблицы = СписокСозданныхСотрудников.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Строка, "Сотрудник");
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаПоДокументу, "Физлицо,Организация");
					КонецЕсли;
				Иначе
					Строка.Сотрудник	= ВыборкаПоДокументу.Сотрудник;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьСотрудниковБезПриказовОПриеме()
	
	//////////////////////////////////////////////////////////////
	// Регистры
	
	// ГрафикОтпусковОрганизаций
	ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме("Период", РегистрыСведений, "ГрафикОтпусковОрганизаций");
	
	// КоэффициентИндексацииЗаработка
	ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме("Период", РегистрыСведений, "КоэффициентИндексацииЗаработка");
	
	// НамеченныеСобытияПоПерсоналуОрганизаций
	ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме("ДатаИзменения", РегистрыСведений, "УдалитьНамеченныеСобытияПоПерсоналуОрганизаций");
	
	// ПлановыеНачисленияРаботниковОрганизаций
	ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме("Период", РегистрыСведений, "ПлановыеНачисленияРаботниковОрганизаций");
	
	// РаботникиОрганизаций
	ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме("Период", РегистрыСведений, "РаботникиОрганизаций");
	
	// УдалитьПроцентДеятельностиЕНВД
	ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме("Период", РегистрыСведений, "УдалитьПроцентДеятельностиЕНВД");
	
	// РеглУчетПлановыхНачисленийРаботниковОрганизаций
	ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме("Период", РегистрыСведений, "РеглУчетПлановыхНачисленийРаботниковОрганизаций");
	
	// СостояниеРаботниковОрганизаций
	ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме("Период", РегистрыСведений, "СостояниеРаботниковОрганизаций");
	
	// УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете
	ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме("Период", РегистрыСведений, "УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете");
	
	// РабочееВремяРаботниковОрганизаций
	ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме("Период", РегистрыНакопления, "РабочееВремяРаботниковОрганизаций");
	
	// ФактическаяВыработкаРаботниковОрганизаций
	ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме("Период", РегистрыНакопления, "ФактическаяВыработкаРаботниковОрганизаций");
	
	// БУДополнительныеНачисления
	ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме("ПериодРегистрации", РегистрыРасчета, "БУДополнительныеНачисления");
	
	// БУОсновныеНачисления
	ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме("ПериодДействияНачало", РегистрыРасчета, "БУОсновныеНачисления");
	
	// ДополнительныеНачисленияРаботниковОрганизаций
	ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме("ПериодРегистрации", РегистрыРасчета, "ДополнительныеНачисленияРаботниковОрганизаций");
	
	// ЕСНДополнительныеНачисления
	ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме("ПериодРегистрации", РегистрыРасчета, "ЕСНДополнительныеНачисления");
	
	// ЕСНОсновныеНачисления
	ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме("ПериодДействияНачало", РегистрыРасчета, "ЕСНОсновныеНачисления");
	
	// ОсновныеНачисленияРаботниковОрганизаций
	ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме("ПериодДействияНачало", РегистрыРасчета, "ОсновныеНачисленияРаботниковОрганизаций");
	
	// РасчетСреднегоЗаработка
	ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме("БазовыйПериодНачало", РегистрыРасчета, "РасчетСреднегоЗаработка");
	
	// УдержанияРаботниковОрганизаций
	ЗаполнитьНаборЗаписейСотрудникамиБезПриказовОПриеме("ПериодРегистрации", РегистрыРасчета, "УдержанияРаботниковОрганизаций");
	
	//////////////////////////////////////////////////////////////
	// Документы
	
	// ВводКоэффициентовИндексацииЗаработка
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "ВводКоэффициентовИндексацииЗаработка");
	
	// ВводПроцентаДеятельностиЕНВД
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "ВводПроцентаДеятельностиЕНВД");
	
	// ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций
	МассивТЧ = Новый Массив;

	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "ОсновныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "УдалитьДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций");
	
	// ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "ОсновныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "УдалитьДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций");
	
	//•	ВозвратНаРаботуОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "ВозвратНаРаботуОрганизаций");
	
	//•	ГрафикОтпусковОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "ГрафикОтпусковОрганизаций");
	
	// КадровоеПеремещениеОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "РаботникиОрганизации"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "КадровоеПеремещениеОрганизаций");
	
	//•	КомандировкиОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "КомандировкиОрганизаций");
	
	//•	УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОтработанноеВремя", "ОтработанноеВремя"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени");
	
	// НачислениеЗарплатыРаботникамОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "НачислениеЗарплатыРаботникамОрганизаций");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ДополнительныеНачисления", "ДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "НачислениеЗарплатыРаботникамОрганизаций");
	
	//•	НачислениеОтпускаРаботникамОрганизаций
	ЗаполнитьДокументСотрудникамиБезПриказовОПриеме("НачислениеОтпускаРаботникамОрганизаций");
	
	//•	НачислениеПоБольничномуЛисту
	ЗаполнитьДокументСотрудникамиБезПриказовОПриеме("НачислениеПоБольничномуЛисту");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "НачислениеПоБольничномуЛисту");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РасчетСреднего", "РасчетСреднего"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "НачислениеПоБольничномуЛисту");
	
	//•	НевыходыВОрганизациях
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "НевыходыВОрганизациях");
	
	//•	ОплатаПоСреднемуЗаработку
	ЗаполнитьДокументСотрудникамиБезПриказовОПриеме("ОплатаПоСреднемуЗаработку");
	
	//•	ОплатаПраздничныхИВыходныхДнейОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "ОплатаПраздничныхИВыходныхДнейОрганизаций");
	
	//•	ОплатаСверхурочныхЧасов
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "ОплатаСверхурочныхЧасов");
	
	//•	ОтпускаОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "ОтпускаОрганизаций");
	
	//•	ОтпускПоУходуЗаРебенком
	ЗаполнитьДокументСотрудникамиБезПриказовОПриеме("ОтпускПоУходуЗаРебенком");
	
	// ОтражениеЗарплатыВРеглУчете
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "ОсновныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "ОтражениеЗарплатыВРеглУчете");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ДополнительныеНачисления", "ДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "ОтражениеЗарплатыВРеглУчете");
	
	//•	ОтсутствиеНаРаботеОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "ОтсутствиеНаРаботеОрганизаций");
	
	// ПремииРаботниковОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "ПремииРаботниковОрганизаций");
	
	// ПриемНаРаботуВОрганизацию
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "РаботникиОрганизации"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "ПриемНаРаботуВОрганизацию");
	
	// РасчетЕСН
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "ОсновныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "РасчетЕСН");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ДополнительныеНачисления", "ДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "РасчетЕСН");
	
	//•	РасчетПриУвольненииРаботникаОрганизаций
	ЗаполнитьДокументСотрудникамиБезПриказовОПриеме("РасчетПриУвольненииРаботникаОрганизаций");
	
	//•	РегистрацияПростоевРаботниковОрганизаций
	ЗаполнитьДокументСотрудникамиБезПриказовОПриеме("РегистрацияПростоевРаботниковОрганизаций");
	
	// РегистрацияРазовыхНачисленийРаботниковОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "ОсновныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "РегистрацияРазовыхНачисленийРаботниковОрганизаций");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ДополнительныеНачисления", "ДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "РегистрацияРазовыхНачисленийРаботниковОрганизаций");
	
	//•	СдельныйНаряд
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Исполнители", "Исполнители"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "СдельныйНаряд");
	
	//•	УвольнениеИзОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "УвольнениеИзОрганизаций");
	
	//•	УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаСотрудникамиБезПриказовОПриеме(МассивТЧ, "УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете");
	
КонецПроцедуры

Процедура КонвертироватьНамеченныеСобытияПоПерсоналуОрганизаций()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.Регистратор КАК Регистратор,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.НомерСтроки КАК НомерСтроки,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.Сотрудник,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.Организация,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.ДатаИзменения,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.ПланируемоеСобытие,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.ЗанимаемыхСтавок,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.ЗаниматьСтавку,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.Должность,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.ПодразделениеОрганизации,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.ГрафикРаботы,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.Активность
	|ИЗ
	|	РегистрСведений.УдалитьНамеченныеСобытияПоПерсоналуОрганизаций КАК УдалитьНамеченныеСобытияПоПерсоналуОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НамеченныеСобытияПоПерсоналу КАК НамеченныеСобытияПоПерсоналу
	|		ПО УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.Регистратор = НамеченныеСобытияПоПерсоналу.Регистратор
	|			И УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.Сотрудник = НамеченныеСобытияПоПерсоналу.Сотрудник
	|			И УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.Организация = НамеченныеСобытияПоПерсоналу.Организация
	|			И УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.ДатаИзменения = НамеченныеСобытияПоПерсоналу.ДатаИзменения
	|			И УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.ПланируемоеСобытие = НамеченныеСобытияПоПерсоналу.ПланируемоеСобытие
	|ГДЕ
	|	НамеченныеСобытияПоПерсоналу.Регистратор ЕСТЬ NULL 
	|	И (НЕ УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.Регистратор ССЫЛКА Документ.ОтпускПоУходуЗаРебенком)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	НаборЗаписей = РегистрыСведений.НамеченныеСобытияПоПерсоналу.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка		= Истина;
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		#Если Клиент Тогда
			Состояние("Регистр сведений. Намеченные события по персоналу организаций. Обрабатывается набор записей " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Регистратор;
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет реквизиты ВР (в т.ч. вытесняемые и вытесняющие начисления)
//
Процедура ЗаполнитьРеквизитыПВРДниНеоплачиваемыеСогласноТабелю()
	
	// Заполнение реквизитов для Вида расчета ДниНеоплачиваемыеСогласноТабелю
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Справочники.КатегорииРасчетов;
	НеОтражатьВБухУчете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете;
	УчетВремени = Справочники.КлассификаторИспользованияРабочегоВремени;
	АнализируемоеНачисление = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю;
	УстановитьРеквизитыОсновногоНачисленияОрганизации(АнализируемоеНачисление, СпРасчета.НулеваяСумма, Перечисления.ВидыВремени.ЦелодневноеНеотработанное, Категории.Первичное, УчетВремени.НеявкиПоНевыясненнымПричинам, Ложь,   Истина, , , НеОтражатьВБухУчете,,,,Ложь);
	
	СписокПредопределенныхВытесняющихПВР = Новый Массив;
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеВБыту);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыУчебный);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднему);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойОкладПоДням);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойОкладПоЧасам);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойТарифДневной);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойТарифЧасовой);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыПоТКРФ);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезни);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезниПоБеременности);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойПоВинеРаботодателя);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Невыход);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОпалатБЛПоУходу2013);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛ2013);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛВМинРазмере);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоУходу);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременности);
	СписокПредопределенныхВытесняющихПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременостиОтБПМ);

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокПВР", СписокПредопределенныхВытесняющихПВР);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыбранныеВР.ВидРасчета,
	|	ВЫБОР
	|		КОГДА ВыбранныеВР.ВидРасчета В (&СписокПВР)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.ВидРасчета КАК ВидРасчета
	|	ИЗ
	|		ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета
	|	ГДЕ
	|		ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка В(&СписокПВР)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ОсновныеНачисленияОрганизаций.Ссылка
	|	ИЗ
	|		ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|	ГДЕ
	|		ОсновныеНачисленияОрганизаций.Ссылка В(&СписокПВР)) КАК ВыбранныеВР
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета
	|		ПО ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.ВидРасчета = ВыбранныеВР.ВидРасчета
	|			И (ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю))
	|ГДЕ
	|	ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
				   
	АнализируемоеНачислениеОбъект = АнализируемоеНачисление.ПолучитьОбъект();			   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		АнализируемоеНачислениеОбъект.ВытесняющиеВидыРасчета.Добавить().ВидРасчета = Выборка.ВидРасчета;
	КонецЦикла;
	АнализируемоеНачислениеОбъект.ОбменДанными.Загрузка = Истина;
	АнализируемоеНачислениеОбъект.Записать();
	
	СписокПредопределенныхВытесняемыхПВР = Новый Массив;
	СписокПредопределенныхВытесняемыхПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы);
	СписокПредопределенныхВытесняемыхПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы);
	СписокПредопределенныхВытесняемыхПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням);
	СписокПредопределенныхВытесняемыхПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоЧасам);
	СписокПредопределенныхВытесняемыхПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифДневной);
	СписокПредопределенныхВытесняемыхПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовой);
	СписокПредопределенныхВытесняемыхПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата);
	СписокПредопределенныхВытесняемыхПВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяТарифнаяЧасть);
	Запрос.УстановитьПараметр("СписокПВР", СписокПредопределенныхВытесняемыхПВР);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыбранныеВР.ВидРасчета,
	|	ВЫБОР
	|		КОГДА ВыбранныеВР.ВидРасчета В (&СписокПВР)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка КАК ВидРасчета
	|	ИЗ
	|		ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета
	|	ГДЕ
	|		ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.ВидРасчета В(&СписокПВР)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ОсновныеНачисленияОрганизаций.Ссылка
	|	ИЗ
	|		ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|	ГДЕ
	|		ОсновныеНачисленияОрганизаций.Ссылка В(&СписокПВР)) КАК ВыбранныеВР
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета
	|		ПО ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка = ВыбранныеВР.ВидРасчета
	|			И (ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю))
	|ГДЕ
	|	ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписываемоеНачислениеОбъект = Выборка.ВидРасчета.ПолучитьОбъект();
		ЗаписываемоеНачислениеОбъект.ВытесняющиеВидыРасчета.Добавить().ВидРасчета = АнализируемоеНачисление;
		ЗаписываемоеНачислениеОбъект.ОбменДанными.Загрузка = Истина;
		ЗаписываемоеНачислениеОбъект.Записать();
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка Как ВидРасчета
	               |ИЗ
	               |	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета
	               |ГДЕ
	               |	ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка <> &ПВРТабель
	               |	И ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.ВидРасчета = &ПВРНеявка
	               |	И (НЕ ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка
	               |				ИЗ
	               |					ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета
	               |				ГДЕ
	               |					ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.ВидРасчета = &ПВРТабель))";
	Запрос.УстановитьПараметр("ПВРТабель", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю);
	Запрос.УстановитьПараметр("ПВРНеявка", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Невыход);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписываемоеНачислениеОбъект = Выборка.ВидРасчета.ПолучитьОбъект();
		ЗаписываемоеНачислениеОбъект.ВытесняющиеВидыРасчета.Добавить().ВидРасчета = АнализируемоеНачисление;
		ЗаписываемоеНачислениеОбъект.ОбменДанными.Загрузка = Истина;
		ЗаписываемоеНачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры


Процедура УстановитьРолиБезОграниченияПравДоступаНаУровнеЗаписей()
	
	Если Константы.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Получить() Тогда
		Возврат;
	КонецЕсли;
		
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	МассивРолейСОграничениемПравДоступа = Новый Массив;
	МассивРолейСОграничениемПравДоступа.Добавить("КадровикРегламентированныхДанных");
	МассивРолейСОграничениемПравДоступа.Добавить("КадровикУправленческихДанных");
	МассивРолейСОграничениемПравДоступа.Добавить("МенеджерПоНаборуПерсонала");
	МассивРолейСОграничениемПравДоступа.Добавить("РасчетчикРегламентированнойЗарплаты");
	МассивРолейСОграничениемПравДоступа.Добавить("РасчетчикУправленческойЗарплаты");
	МассивРолейСОграничениемПравДоступа.Добавить("РасчетчикУправленческойЗарплаты");		
	
	Для Каждого ПользовательИБ ИЗ ПользователиИБ Цикл
		Для Каждого РольСОграничением ИЗ МассивРолейСОграничениемПравДоступа Цикл
			Если ПользовательИБ.Роли.Содержит(Метаданные.Роли[РольСОграничением]) Тогда										
				ПользовательИБ.Роли.Добавить(Метаданные.Роли[РольСОграничением + "БезОграниченияПрав"]);
				ПользовательИБ.Роли.Удалить(Метаданные.Роли[РольСОграничением]);
				ПользовательИБ.Записать();					
			КонецЕсли;
		КонецЦикла;			
	КонецЦикла;
	
КонецПроцедуры

// Процедура переноса настроек прав доступа пользователей
//
Процедура КонвертироватьНастройкиОграниченияПравДоступа()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.ЗначенияДополнительныхПравПользователя";
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		// перенос настроек прав доступа был уже выполнен ранее
		Возврат;
	КонецЕсли;
	
	ОбновитьКодыСправочникаГруппыПользователей();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Код, Ссылка КАК Пользователь ИЗ Справочник.Пользователи ГДЕ НЕ ЭтоГруппа И Не ПометкаУдаления";
	ТаблицаПользователей = Запрос.Выполнить().Выгрузить();	
	ТаблицаПользователей.Колонки.Добавить("ПользовательИБ");
	ТаблицаПользователей.Колонки.Добавить("ГруппаПользователя");
	ТаблицаПользователей.Индексы.Добавить("Пользователь");	
	
	ПометитьНаУдалениеСуществующиеГруппыПользователей();
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого СтрокаПользователя ИЗ ТаблицаПользователей Цикл
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СокрЛП(СтрокаПользователя.Код));
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПользователя.ПользовательИБ = ПользовательИБ;		
		ОбработатьРолиПользователя(СтрокаПользователя);
		
	КонецЦикла;
	
	СоздатьГруппыФизЛиц();
	
	ПереносЗначенийПравДоступаПользователей(ТаблицаПользователей);
	
	ОбновитьСоставРолейПользователей();	
	
	УстановитьКонстантуИспользоватьОграниченияПравДоступаНаУровнеЗаписей();
		
КонецПроцедуры // КонвертироватьНастройкиОграниченияПравДоступа()

// Процедура обновляет коды справочника ГруппыПользователей,
// если в нем присутствуют элементы со старым форматом кода
//
Процедура ОбновитьКодыСправочникаГруппыПользователей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ МАКСИМУМ(Код) КАК МаксимумКод ИЗ Справочник.ГруппыПользователей ИМЕЮЩИЕ НЕ МАКСИМУМ(Код) ЕСТЬ NULL";
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ДлинаКодаСправочникаГруппыПользователей = Метаданные.Справочники.ГруппыПользователей.ДлинаКода;
	
	Если СтрДлина(СокрЛП(Выборка.МаксимумКод)) = ДлинаКодаСправочникаГруппыПользователей Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ ЕСТЬNULL(МАКСИМУМ(ГруппыПользователей.Код), 0) КАК МаксимумКод ИЗ Справочник.ГруппыПользователей КАК ГруппыПользователей ГДЕ Код ПОДОБНО ""0%""";
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ТекущийКод = Число(Выборка.МаксимумКод) + 1;
	Исключение
		ТекущийКод = 1;
	КонецПопытки;
	
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Справочник.ГруппыПользователей";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Код = Формат(ТекущийКод, "ЧЦ=" + ДлинаКодаСправочникаГруппыПользователей + "; ЧВН=; ЧГ=");
		Попытка
			Объект.Записать();		
		Исключение
			ВызватьИсключение "Обновление кодов справочника ""Группы пользователей"" завершилось неудачно. Выполните перенумерацю вручную.";
		КонецПопытки;
		ТекущийКод = ТекущийКод + 1;			
	КонецЦикла;
	
	
КонецПроцедуры // ОбновитьКодыСправочникаГруппыПользователей()


// Процедура выполняет установку пометки удаления для всех старых групп пользователей
//
Процедура ПометитьНаУдалениеСуществующиеГруппыПользователей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Справочник.ГруппыПользователей ГДЕ НЕ Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Группа = Выборка.Ссылка.ПолучитьОбъект();
		Группа.УдалятьНастройкиПравБезПредупреждений = Истина;
		Группа.УстановитьПометкуУдаления(Истина);
	КонецЦикла;	
	
КонецПроцедуры // ПометитьНаУдалениеСуществующиеГруппыПользователей()

// Для каждой пары "Пользователь-Роль" создается группа пользователей, переносятся старые настройки механизма
// дополнительнных прав пользователей.
// Параметры:
//  СтрокаПользователя - обрабатываемая строка "таблицы пользователей"
//
Процедура ОбработатьРолиПользователя(СтрокаПользователя)
	
	РолиПользователя = СтрокаПользователя.ПользовательИБ.Роли;
	
	Если РолиПользователя.Содержит(Метаданные.Роли.ПолныеПрава) Тогда		
		ПереносСтарыхНастроекДополнительныхПрав(СтрокаПользователя.Пользователь, Метаданные.Роли.ПолныеПрава);
		Возврат;		
	КонецЕсли;
	
	Для Каждого Роль ИЗ РолиПользователя Цикл
		
		ГруппаПользователя = СоздатьНовуюГруппуПользователейПоРолиИПользователю(СтрокаПользователя, Роль);
		Если НЕ ЗначениеЗаполнено(ГруппаПользователя) Тогда
			Продолжить;
		КонецЕсли;		
		СтрокаПользователя.ГруппаПользователя = ГруппаПользователя;
	
		ПереносСтарыхНастроекДополнительныхПрав(СтрокаПользователя.ГруппаПользователя, Роль);
		
		УстановитьВидыОбъектаДоступаДляГруппы(ГруппаПользователя, Роль);
		
	КонецЦикла;
	
КонецПроцедуры // ОбработатьРолиПользователя()

// Функция создает новую группу пользователей для пары "Пользователь-Роль"
// Параметры:
//  СтрокаПользователя - обрабатываемя строка таблицы пользователей
//	Роль - роль, для которой создается группа пользователей
//
// Возвращаемое значение:
//  Ссылка на созданную группу, или пустая ссылка, если создание группы не выполнялось
//
Функция СоздатьНовуюГруппуПользователейПоРолиИПользователю(СтрокаПользователя, Роль);

	НовоеИмяГруппы = ПолучитьНаименованиеГруппыДляРоли(Роль.Имя, СокрЛП(СтрокаПользователя.Код));
	Если ПустаяСтрока(НовоеИмяГруппы) Тогда
		Возврат Справочники.ГруппыПользователей.ПустаяСсылка();
	КонецЕсли;
	
	НоваяГруппа = Справочники.ГруппыПользователей.СоздатьЭлемент();
	НоваяГруппа.Наименование = НовоеИмяГруппы;
	НоваяГруппа.УстановитьНовыйКод();
	СтрокаПользователяВГруппе = НоваяГруппа.ПользователиГруппы.Добавить();
	СтрокаПользователяВГруппе.Пользователь = СтрокаПользователя.Пользователь;
	НоваяГруппа.Записать();	
	Возврат НоваяГруппа.Ссылка;	
	
КонецФункции // СоздатьНовуюГруппуПользователейПоРолиИПользователю()

// Функция формирует новое имя для создаваемой группы пользователей
// Параметры:
//  СтрокаПользователя - обрабатываемя строка таблицы пользователей
//	Роль - роль, для которой создается группа пользователей
//
// Возвращаемое значение:
//  Ссылка на созданную группу, или пустая ссылка, если создание группы не выполнялось
Функция ПолучитьНаименованиеГруппыДляРоли(ИмяРоли, ИмяПользователя)
	
	Если ИмяРоли = "КадровикРегламентированныхДанных" Тогда
		Возврат "Кадровик регл. данных (" + ИмяПользователя + ")";
	ИначеЕсли ИмяРоли = "КадровикУправленческихДанных" Тогда
		Возврат "Кадровик упр. данных (" + ИмяПользователя + ")";
	ИначеЕсли ИмяРоли = "МенеджерПоНаборуПерсонала" Тогда
		Возврат "Менеджер по набору (" + ИмяПользователя + ")";
	ИначеЕсли ИмяРоли = "РасчетчикРегламентированнойЗарплаты" Тогда
		Возврат "Расчетчик регл. зарпл. (" + ИмяПользователя + ")";
	ИначеЕсли ИмяРоли = "РасчетчикУправленческойЗарплаты" Тогда
		Возврат "Расчетчик упр. зарпл. (" + ИмяПользователя + ")";
	ИначеЕсли ИмяРоли = "УдалитьКадровикРегламентированныхДанныхСОграничениемПравДоступа" Тогда
		Возврат "Кадровик регл. данных с огр. доступа (" + ИмяПользователя + ")";
	ИначеЕсли ИмяРоли = "УдалитьМенеджерПоНаборуПерсоналаСОграничениемПравДоступа" Тогда
		Возврат "Менеджер по набору с огр. доступа (" + ИмяПользователя + ")";
	ИначеЕсли ИмяРоли = "УдалитьРасчетчикРегламентированнойЗарплатыСОграничениемПравДоступа" Тогда
		Возврат "Расчетчик регл. зарпл. с огр. доступа (" + ИмяПользователя + ")";
	Иначе
		Возврат "";
	КонецЕсли;
		
КонецФункции // ПолучитьНаименованиеГруппыДляРоли()

// Для созданной группы пользователей переносятся настройки механихма дополнительных прав
// Параметры:
//  ГруппаПользователя - группа пользователей
//  Роль - роль, соответствующая группе пользователей
//
Процедура ПереносСтарыхНастроекДополнительныхПрав(ГруппаПользователя, Роль)
	
	Если Роль = Метаданные.Роли.ПолныеПрава Тогда
		ЗначениеНабораПрав  = Перечисления.УдалитьНаборПравПользователей.ПолныеПрава;
	Иначе
		ИмяРоли = Роль.Имя;
		Если Лев(ИмяРоли, 7) = "Удалить" Тогда
			ИмяРоли = Сред(ИмяРоли, 8);
		КонецЕсли;
		ЗначениеНабораПрав = Перечисления.УдалитьНаборПравПользователей[СтрЗаменить(ИмяРоли, "СОграничениемПравДоступа", "")];
	КонецЕсли;
	
	СтарыйНабор = РегистрыСведений.УдалитьЗначенияПравПользователя.СоздатьНаборЗаписей();
	СтарыйНабор.Отбор.НаборПрав.Установить(ЗначениеНабораПрав);
	СтарыйНабор.Прочитать();
	
	НовыйНабор = РегистрыСведений.ЗначенияДополнительныхПравПользователя.СоздатьНаборЗаписей();
	НовыйНабор.Отбор.Пользователь.Установить(ГруппаПользователя);
	ТаблицаСтарогоНабора = СтарыйНабор.Выгрузить();
	ТаблицаСтарогоНабора.Колонки.Добавить("Пользователь");
	ТаблицаСтарогоНабора.ЗаполнитьЗначения(ГруппаПользователя, "Пользователь");
	НовыйНабор.Загрузить(ТаблицаСтарогоНабора);
	НовыйНабор.Записать();	

	
КонецПроцедуры // ПереносСтарыхНастроекДополнительныхПрав()

// Процедура установки ограничений по виду объектов доступа для группы пользователей
// Параметры:
//  ГруппаПользователя - группа пользователей
//  Роль - роль, соответствующая группе пользователей
//
Процедура УстановитьВидыОбъектаДоступаДляГруппы(ГруппаПользователей, Роль)
	
	Перем ВидОбъектаДоступа;
	
	МетаданныеРоли = Метаданные.Роли;
	Если Роль = МетаданныеРоли.УдалитьКадровикРегламентированныхДанныхСОграничениемПравДоступа
		 ИЛИ Роль =  МетаданныеРоли.УдалитьРасчетчикРегламентированнойЗарплатыСОграничениемПравДоступа Тогда		 
		ВидОбъектаДоступа = Перечисления.ВидыОбъектовДоступа.Организации;		
	ИначеЕсли Роль = МетаданныеРоли.УдалитьМенеджерПоНаборуПерсоналаСОграничениемПравДоступа Тогда		
		ВидОбъектаДоступа = Перечисления.ВидыОбъектовДоступа.ФизическиеЛица;
	Иначе
		Возврат;
	КонецЕсли;	
	
	Набор = РегистрыСведений.НазначениеВидовОбъектовДоступа.СоздатьНаборЗаписей();
	Набор.Отбор.ГруппаПользователей.Установить(ГруппаПользователей);
	
	Запись = Набор.Добавить();
	Запись.ГруппаПользователей = ГруппаПользователей;
	Запись.ВидОбъектаДоступа = ВидОбъектаДоступа;
	Набор.Записать();	
	
КонецПроцедуры // УстановитьВидыОбъектаДоступаДляГруппы()

// Процедура переноса настроек ограничения прав доступа 
// Параметры:
//  ГруппаПользователя - группа пользователей
//  Роль - роль, соответствующая группе пользователей
//
Процедура ПереносЗначенийПравДоступаПользователей(ТаблицаПользователей)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ФизическиеЛица.ГруппаФизическихЛиц, УдалитьПраваДоступаПользователей.ОбъектДоступа) КАК ОбъектДоступа,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ФизическиеЛица.ГруппаФизическихЛиц, УдалитьПраваДоступаПользователей.ОбъектДоступа) ССЫЛКА Справочник.Организации
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Организации)
	               |		КОГДА ЕСТЬNULL(ФизическиеЛица.ГруппаФизическихЛиц, УдалитьПраваДоступаПользователей.ОбъектДоступа) ССЫЛКА Справочник.ГруппыФизическихЛиц
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.ФизическиеЛица)
	               |		КОГДА ЕСТЬNULL(ФизическиеЛица.ГруппаФизическихЛиц, УдалитьПраваДоступаПользователей.ОбъектДоступа) ССЫЛКА Справочник.ВнешниеОбработки
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.ВнешниеОбработки)
	               |	КОНЕЦ КАК ВидОбъектаДоступа,
	               |	ОбластиДанныхОбъектовДоступа.Ссылка КАК ОбластьДанных,
	               |	ЕСТЬNULL(ПользователиГруппы.Пользователь, УдалитьПраваДоступаПользователей.Пользователь) КАК Пользователь,
	               |	ЕСТЬNULL(ФизическиеЛица.ГруппаФизическихЛиц, УдалитьПраваДоступаПользователей.ОбъектДоступа) КАК ВладелецПравДоступа,
	               |	МАКСИМУМ(УдалитьПраваДоступаПользователей.Запись) КАК Запись,
	               |	ЗНАЧЕНИЕ(Перечисление.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава) КАК ВидНаследованияПравДоступаИерархическихСправочников
	               |ИЗ
	               |	РегистрСведений.УдалитьПраваДоступаПользователей КАК УдалитьПраваДоступаПользователей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ПользователиГруппы
	               |		ПО ПользователиГруппы.Ссылка = УдалитьПраваДоступаПользователей.Пользователь
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |		ПО ФизическиеЛица.Ссылка = УдалитьПраваДоступаПользователей.ОбъектДоступа
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ОбластиДанныхОбъектовДоступа КАК ОбластиДанныхОбъектовДоступа
	               |		ПО (ЕСТЬNULL(ФизическиеЛица.ГруппаФизическихЛиц, УдалитьПраваДоступаПользователей.ОбъектДоступа) ССЫЛКА Справочник.ГруппыФизическихЛиц)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЕСТЬNULL(ФизическиеЛица.ГруппаФизическихЛиц, УдалитьПраваДоступаПользователей.ОбъектДоступа),
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ФизическиеЛица.ГруппаФизическихЛиц, УдалитьПраваДоступаПользователей.ОбъектДоступа) ССЫЛКА Справочник.Организации
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Организации)
	               |		КОГДА ЕСТЬNULL(ФизическиеЛица.ГруппаФизическихЛиц, УдалитьПраваДоступаПользователей.ОбъектДоступа) ССЫЛКА Справочник.ГруппыФизическихЛиц
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.ФизическиеЛица)
	               |		КОГДА ЕСТЬNULL(ФизическиеЛица.ГруппаФизическихЛиц, УдалитьПраваДоступаПользователей.ОбъектДоступа) ССЫЛКА Справочник.ВнешниеОбработки
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.ВнешниеОбработки)
	               |	КОНЕЦ,
	               |	ОбластиДанныхОбъектовДоступа.Ссылка,
	               |	ЕСТЬNULL(ПользователиГруппы.Пользователь, УдалитьПраваДоступаПользователей.Пользователь),
	               |	ЕСТЬNULL(ФизическиеЛица.ГруппаФизическихЛиц, УдалитьПраваДоступаПользователей.ОбъектДоступа)
	               |ИТОГИ ПО
	               |	ОбъектДоступа";
	
	ВыборкаПоОбъектамДоступа = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОбъектамДоступа.Следующий() Цикл
		Набор = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
		Набор.Отбор.ОбъектДоступа.Установить(ВыборкаПоОбъектамДоступа.ОбъектДоступа);
		Выборка = ВыборкаПоОбъектамДоступа.Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивСтрокПользователя = ТаблицаПользователей.НайтиСтроки(Новый Структура("Пользователь", Выборка.Пользователь));
			Для Каждого СтрокаГруппыПользователя ИЗ МассивСтрокПользователя Цикл
				Если ЗначениеЗаполнено(СтрокаГруппыПользователя.ГруппаПользователя) Тогда
					НоваяЗапись = Набор.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка, , "Пользователь");
					НоваяЗапись.Пользователь = СтрокаГруппыПользователя.ГруппаПользователя;
				КонецЕсли;
			КонецЦикла;			
		КонецЦикла;	
		Если Набор.Количество() > 0 Тогда
			Набор.Записать(Истина);
		КонецЕсли;
	КонецЦикла;	
	
	
	
КонецПроцедуры

// Процедура создания для групп доступа для всех физ. лица, для которых
// было настроено ограничения прав доступа
//
Процедура СоздатьГруппыФизЛиц()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	УдалитьПраваДоступаПользователей.ОбъектДоступа
	               |ИЗ
	               |	РегистрСведений.УдалитьПраваДоступаПользователей КАК УдалитьПраваДоступаПользователей
	               |ГДЕ
	               |	УдалитьПраваДоступаПользователей.ОбъектДоступа ССЫЛКА Справочник.ФизическиеЛица
	               |	И (НЕ ВЫРАЗИТЬ(УдалитьПраваДоступаПользователей.ОбъектДоступа КАК Справочник.ФизическиеЛица).ЭтоГруппа)
	               |	И ВЫРАЗИТЬ(УдалитьПраваДоступаПользователей.ОбъектДоступа КАК Справочник.ФизическиеЛица).ГруппаФизическихЛиц <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ФизЛицо = Выборка.ОбъектДоступа.ПолучитьОбъект();
		
		ГруппаФизЛиц = Справочники.ГруппыФизическихЛиц.СоздатьЭлемент();
		ГруппаФизЛиц.Наименование = ФизЛицо.Наименование;
		ГруппаФизЛиц.Записать();
		
		ФизЛицо.ГруппаФизическихЛиц = ГруппаФизЛиц.Ссылка;
		ФизЛицо.ОбменДанными.Загрузка = Истина;
		ФизЛицо.Записать();
		
	КонецЦикла;
	
КонецПроцедуры // СоздатьГруппыФизЛиц();

// Процедура снятия у пользователей устаревших ролей
Процедура ОбновитьСоставРолейПользователей()
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого ПользовательИБ ИЗ ПользователиИБ Цикл
		
		Роли = ПользовательИБ.Роли;
		ДобавляемыеРоли = Новый Массив;
		УдаляемыеРоли = Новый Массив;
		
		Для Каждого Роль ИЗ Роли Цикл
			Если Роль.Имя = "КадровикРегламентированныхДанных" Тогда
				ДобавляемыеРоли.Добавить("КадровикРегламентированныхДанныхБезОграниченияПрав");
				УдаляемыеРоли.Добавить("КадровикРегламентированныхДанных");
			ИначеЕсли Роль.Имя = "КадровикУправленческихДанных" Тогда
				ДобавляемыеРоли.Добавить("КадровикУправленческихДанныхБезОграниченияПрав");
				УдаляемыеРоли.Добавить("КадровикУправленческихДанных");
			ИначеЕсли Роль.Имя = "МенеджерПоНаборуПерсонала" Тогда
				ДобавляемыеРоли.Добавить("МенеджерПоНаборуПерсоналаБезОграниченияПрав");
				УдаляемыеРоли.Добавить("МенеджерПоНаборуПерсонала");
			ИначеЕсли Роль.Имя = "РасчетчикРегламентированнойЗарплаты" Тогда
				ДобавляемыеРоли.Добавить("РасчетчикРегламентированнойЗарплатыБезОграниченияПрав");
				УдаляемыеРоли.Добавить("РасчетчикРегламентированнойЗарплаты");
			ИначеЕсли Роль.Имя = "РасчетчикУправленческойЗарплаты" Тогда
				ДобавляемыеРоли.Добавить("РасчетчикУправленческойЗарплатыБезОграниченияПрав");
				УдаляемыеРоли.Добавить("РасчетчикУправленческойЗарплаты");
			ИначеЕсли Роль.Имя = "УдалитьКадровикРегламентированныхДанныхСОграничениемПравДоступа" Тогда
				ДобавляемыеРоли.Добавить("КадровикРегламентированныхДанных");
				УдаляемыеРоли.Добавить("УдалитьКадровикРегламентированныхДанныхСОграничениемПравДоступа");
			ИначеЕсли Роль.Имя = "УдалитьМенеджерПоНаборуПерсоналаСОграничениемПравДоступа" Тогда
				ДобавляемыеРоли.Добавить("МенеджерПоНаборуПерсонала");
				УдаляемыеРоли.Добавить("УдалитьМенеджерПоНаборуПерсоналаСОграничениемПравДоступа");
			ИначеЕсли Роль.Имя = "УдалитьРасчетчикРегламентированнойЗарплатыСОграничениемПравДоступа" Тогда
				ДобавляемыеРоли.Добавить("РасчетчикРегламентированнойЗарплаты");
				УдаляемыеРоли.Добавить("УдалитьРасчетчикРегламентированнойЗарплатыСОграничениемПравДоступа");
			КонецЕсли;
		КонецЦикла;
		
		ЗаписыватьПользователя = Ложь;
		
		Для Каждого УдаляемаяРоль ИЗ УдаляемыеРоли Цикл
			Роли.Удалить(Метаданные.Роли[УдаляемаяРоль]);
			ЗаписыватьПользователя = Истина;
		КонецЦикла;
		Для Каждого ДобавлемаяРоль ИЗ ДобавляемыеРоли Цикл
			Если НЕ Роли.Содержит(Метаданные.Роли[ДобавлемаяРоль]) Тогда
				Роли.Добавить(Метаданные.Роли[ДобавлемаяРоль]);
			КонецЕсли;			
			ЗаписыватьПользователя = Истина;
		КонецЦикла;
		
		Если Не Роли.Содержит(Метаданные.Роли.ПолныеПрава)
			И НЕ Роли.Содержит(Метаданные.Роли.КадровикРегламентированныхДанныхБезОграниченияПрав)
			И НЕ Роли.Содержит(Метаданные.Роли.КадровикУправленческихДанныхБезОграниченияПрав)
			И НЕ Роли.Содержит(Метаданные.Роли.МенеджерПоНаборуПерсоналаБезОграниченияПрав)
			И НЕ Роли.Содержит(Метаданные.Роли.РасчетчикРегламентированнойЗарплатыБезОграниченияПрав)
			И НЕ Роли.Содержит(Метаданные.Роли.РасчетчикУправленческойЗарплатыБезОграниченияПрав)
			Тогда
			Роли.Добавить(Метаданные.Роли.Пользователь);
			ЗаписыватьПользователя = Истина;
		КонецЕсли;
		
		Если ЗаписыватьПользователя Тогда
			ПользовательИБ.Записать();
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСоставРолейПользователей()

// Процедура устанавливает значение константы ИспользоватьОграниченияПравДоступаНаУровнеЗаписей
// в зависимости от заполненности регистра сведений НазначениеВидовОбъектовДоступа.
// Если данный регистр пуст, можно считать что ограничение доступа на уровне записей не используется.
//
Процедура УстановитьКонстантуИспользоватьОграниченияПравДоступаНаУровнеЗаписей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.НазначениеВидовОбъектовДоступа";
	Результат = Запрос.Выполнить();
	Константы.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Установить(НЕ Результат.Пустой());
	
КонецПроцедуры

// Процедура переноса данных из реквизитов УдалитьПричинаИзмененияСостояния и УдалитьОбособленноеПодразделение в ресурсы ПричинаИзмененияСостояния и  ОбособленноеПодразделение  
Процедура ПеренестиДанныеЗавершенияВРегистреРаботникиОрганизаций()
	
	// перенос данных из УдалитьПричинаИзмененияСостояния и из УдалитьОбособленноеПодразделение
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиОрганизаций.Регистратор КАК Приказ
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПустаяСсылка)";

	ЗапросПоРегистру = Новый Запрос;
	ЗапросПоРегистру.Текст = 
	"ВЫБРАТЬ
	|	РаботникиОрганизаций.НомерСтроки КАК НомерСтроки,
	|	РаботникиОрганизаций.Период,
	|	РаботникиОрганизаций.Регистратор,
	|	РаботникиОрганизаций.Активность,
	|	РаботникиОрганизаций.Сотрудник,
	|	РаботникиОрганизаций.Организация,
	|	РаботникиОрганизаций.УдалитьФизлицо,
	|	РаботникиОрганизаций.УдалитьПриказ,
	|	РаботникиОрганизаций.ЗанимаемыхСтавок,
	|	РаботникиОрганизаций.ПодразделениеОрганизации,
	|	РаботникиОрганизаций.Должность,
	|	РаботникиОрганизаций.ГрафикРаботы,
	|	РаботникиОрганизаций.ПериодЗавершения,
	|	РаботникиОрганизаций.ЗанимаемыхСтавокЗавершения,
	|	РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения,
	|	РаботникиОрганизаций.ДолжностьЗавершения,
	|	РаботникиОрганизаций.ГрафикРаботыЗавершения,
	|	РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения,
	|	РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения,
	|	РаботникиОрганизаций.УдалитьТабельныйНомер,
	|	РаботникиОрганизаций.УдалитьПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	РаботникиОрганизаций.ОбособленноеПодразделениеРБ КАК ОбособленноеПодразделение,
	|	РаботникиОрганизаций.Категория
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.Регистратор = &Приказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	НаборЗаписей = РегистрыСведений.РаботникиОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Сотрудники организаций. Обрабатывается набор записей " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Приказ);
		
		ЗапросПоРегистру.УстановитьПараметр("Приказ", Выборка.Приказ);
		ВыборкаПоРегистру = ЗапросПоРегистру.Выполнить().Выбрать();
		
		Пока ВыборкаПоРегистру.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоРегистру);
		КонецЦикла;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры	

// Процедура переноса инвертированных данных из табличных реквизитов УдалитьПроизошедшееСобытие в  НапомнитьПоЗавершении
// в документах 
//	КадровоеПеремещениеОрганизаций	
//	ПриемНаРаботуВОрганизацию	
//	КомандировкиОрганизаций	
//	ОтпускаОрганизаций	
//	ОтсутствиеНаРаботе	
//
Процедура ПеренестиДанныеПроизошедшееСобытиеВДокументах()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ПриказКадровоеПеремещениеОрганизаций.Ссылка,
	|	ПриказКадровоеПеремещениеОрганизаций.НомерСтроки
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ПриказКадровоеПеремещениеОрганизаций
	|ГДЕ
	|	ПриказКадровоеПеремещениеОрганизаций.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И (НЕ ПриказКадровоеПеремещениеОрганизаций.УдалитьПроизошедшееСобытие)
	|	И (НЕ ПриказКадровоеПеремещениеОрганизаций.НапомнитьПоЗавершении)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПриказКомандировкиОрганизаций.Ссылка,
	|	ПриказКомандировкиОрганизаций.НомерСтроки
	|ИЗ
	|	Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК ПриказКомандировкиОрганизаций
	|ГДЕ
	|	ПриказКомандировкиОрганизаций.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И (НЕ ПриказКомандировкиОрганизаций.УдалитьПроизошедшееСобытие)
	|	И (НЕ ПриказКомандировкиОрганизаций.НапомнитьПоЗавершении)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПриказОтпускаОрганизаций.Ссылка,
	|	ПриказОтпускаОрганизаций.НомерСтроки
	|ИЗ
	|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ПриказОтпускаОрганизаций
	|ГДЕ
	|	ПриказОтпускаОрганизаций.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И (НЕ ПриказОтпускаОрганизаций.УдалитьПроизошедшееСобытие)
	|	И (НЕ ПриказОтпускаОрганизаций.НапомнитьПоЗавершении)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПриказПриемНаРаботуВОрганизацию.Ссылка,
	|	ПриказПриемНаРаботуВОрганизацию.НомерСтроки
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриказПриемНаРаботуВОрганизацию
	|ГДЕ
	|	ПриказПриемНаРаботуВОрганизацию.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И (НЕ ПриказПриемНаРаботуВОрганизацию.УдалитьПроизошедшееСобытие)
	|	И (НЕ ПриказПриемНаРаботуВОрганизацию.НапомнитьПоЗавершении)";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВсегоДоков = Выборка.Количество();
	Номер = 1;
	#Если Клиент Тогда
		Состояние("Обработка кадровых документов организаций : обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект.РаботникиОрганизации.Найти(Выборка.НомерСтроки,"НомерСтроки").НапомнитьПоЗавершении = Истина;
			Если Номер % 100 = 0 Тогда
				#Если Клиент Тогда
					Состояние("Обработка кадровых документов организаций : обработано " + Номер + " из " + ВсегоДоков);
				#КонецЕсли
			КонецЕсли;
			Номер = Номер + 1;
		КонецЦикла;
		ДокументОбъект.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние("Обработка кадровых документов организаций : обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ПриказОтсутствиеНаРаботе.Ссылка,
	|	ПриказОтсутствиеНаРаботе.НомерСтроки
	|ИЗ
	|	Документ.ОтсутствиеНаРаботе.Работники КАК ПриказОтсутствиеНаРаботе
	|ГДЕ
	|	ПриказОтсутствиеНаРаботе.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И (НЕ ПриказОтсутствиеНаРаботе.УдалитьПроизошедшееСобытие)
	|	И (НЕ ПриказОтсутствиеНаРаботе.НапомнитьПоЗавершении)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриемНаРаботуРаботники.Ссылка,
	|	ПриемНаРаботуРаботники.НомерСтроки
	|ИЗ
	|	Документ.ПриемНаРаботу.Работники КАК ПриемНаРаботуРаботники
	|ГДЕ
	|	ПриемНаРаботуРаботники.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И (НЕ ПриемНаРаботуРаботники.УдалитьПроизошедшееСобытие)
	|	И (НЕ ПриемНаРаботуРаботники.НапомнитьПоЗавершении)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КадровоеПеремещениеРаботники.Ссылка,
	|	КадровоеПеремещениеРаботники.НомерСтроки
	|ИЗ
	|	Документ.КадровоеПеремещение.Работники КАК КадровоеПеремещениеРаботники
	|ГДЕ
	|	КадровоеПеремещениеРаботники.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И (НЕ КадровоеПеремещениеРаботники.УдалитьПроизошедшееСобытие)
	|	И (НЕ КадровоеПеремещениеРаботники.НапомнитьПоЗавершении)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВсегоДоков = Выборка.Количество();
	Номер = 1;
	#Если Клиент Тогда
		Состояние("Обработка кадровых документов компании: обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект.Работники.Найти(Выборка.НомерСтроки,"НомерСтроки").НапомнитьПоЗавершении = Истина;
			Если Номер % 100 = 0 Тогда
				#Если Клиент Тогда
					Состояние("Обработка кадровых документов компании " + Номер + " из " + ВсегоДоков);
				#КонецЕсли
			КонецЕсли;
			Номер = Номер + 1;
		КонецЦикла;
		ДокументОбъект.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние("Обработка кадровых документов компании: обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
КонецПроцедуры

Процедура ИсправитьПериодЗавершения()
	
	Запрос = Новый Запрос;
	ДлинаСуток = 86400;
	
	СписокРегистраторовТекст = 
	"ВЫБРАТЬ
	|	СписокРегистраторов.Регистратор КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(СостояниеРаботников.ПериодЗавершения) КАК ПериодЗавершения,
	|		СостояниеРаботников.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	|	ГДЕ
	|		СостояниеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|		И СостояниеРаботников.Регистратор ССЫЛКА Документ.ОтсутствиеНаРаботе
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СостояниеРаботников.Регистратор) КАК СписокРегистраторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ОтсутствиеНаРаботеРаботники.ДатаОкончания) КАК ДатаОкончания,
	|			ОтсутствиеНаРаботеРаботники.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ОтсутствиеНаРаботе.Работники КАК ОтсутствиеНаРаботеРаботники
	|		ГДЕ
	|			ОтсутствиеНаРаботеРаботники.УдалитьПроизошедшееСобытие
	|			И ОтсутствиеНаРаботеРаботники.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОтсутствиеНаРаботеРаботники.Ссылка) КАК ДокументыКОбработке
	|		ПО СписокРегистраторов.Регистратор = ДокументыКОбработке.Ссылка
	|			И СписокРегистраторов.ПериодЗавершения = ДокументыКОбработке.ДатаОкончания";
	
	ТекстСообщения = "Обработка документов ""Отсутствие на работе""";
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	
	Запрос.Текст = СписокРегистраторовТекст;
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать(); 
	ВсегоДоков = ВыборкаРегистраторов.Количество();
	Номер = 1;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	НаборЗаписей = РегистрыСведений.СостояниеРаботников.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборЗаписей.Прочитать();
		Для каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(ЗаписьНабора.ПериодЗавершения) Тогда
				ЗаписьНабора.ПериодЗавершения = ЗаписьНабора.ПериодЗавершения + ДлинаСуток
			КонецЕсли;
		КонецЦикла;
		Если Номер % 10 = 0 Тогда
			#Если Клиент Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			#КонецЕсли
		КонецЕсли;
		Номер = Номер + 1;
		НаборЗаписей.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
	СписокРегистраторовТекст = 
	"ВЫБРАТЬ
	|	СписокРегистраторов.Регистратор КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(СостояниеРаботниковОрганизаций.ПериодЗавершения) КАК ПериодЗавершения,
	|		СостояниеРаботниковОрганизаций.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|	ГДЕ
	|		СостояниеРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СостояниеРаботниковОрганизаций.Регистратор) КАК СписокРегистраторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ОтпускаОрганизацийРаботникиОрганизации.ДатаОкончания) КАК ДатаОкончания,
	|			ОтпускаОрганизацийРаботникиОрганизации.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
	|		ГДЕ
	|			ОтпускаОрганизацийРаботникиОрганизации.УдалитьПроизошедшееСобытие
	|			И ОтпускаОрганизацийРаботникиОрганизации.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОтпускаОрганизацийРаботникиОрганизации.Ссылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			МАКСИМУМ(КомандировкиОрганизацийРаботникиОрганизации.ДатаОкончания),
	|			КомандировкиОрганизацийРаботникиОрганизации.Ссылка
	|		ИЗ
	|			Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК КомандировкиОрганизацийРаботникиОрганизации
	|		ГДЕ
	|			КомандировкиОрганизацийРаботникиОрганизации.УдалитьПроизошедшееСобытие
	|			И КомандировкиОрганизацийРаботникиОрганизации.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			КомандировкиОрганизацийРаботникиОрганизации.Ссылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ОтпускПоУходуЗаРебенком.ДатаОкончания,
	|			ОтпускПоУходуЗаРебенком.Ссылка
	|		ИЗ
	|			Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|		ГДЕ
	|			ОтпускПоУходуЗаРебенком.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)) КАК ДокументыКОбработке
	|		ПО СписокРегистраторов.Регистратор = ДокументыКОбработке.Ссылка
	|			И СписокРегистраторов.ПериодЗавершения = ДокументыКОбработке.ДатаОкончания";
	
	ТекстСообщения = "Обработка кадровых документов регистрации отклонений";
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	Запрос.Текст = СписокРегистраторовТекст;
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	ВсегоДоков = ВыборкаРегистраторов.Количество();
	Номер = 1;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	НаборЗаписей = РегистрыСведений.СостояниеРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборЗаписей.Прочитать();
		Для каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(ЗаписьНабора.ПериодЗавершения) Тогда
				ЗаписьНабора.ПериодЗавершения = ЗаписьНабора.ПериодЗавершения + ДлинаСуток
			КонецЕсли;
		КонецЦикла;
		Если Номер % 10 = 0 Тогда
			#Если Клиент Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			#КонецЕсли
		КонецЕсли;
		Номер = Номер + 1;
		НаборЗаписей.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
	СписокРегистраторовТекст = 
	"ВЫБРАТЬ
	|	СписокРегистраторов.Регистратор КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ПлановыеНачисленияРаботников.ПериодЗавершения) КАК ПериодЗавершения,
	|		ПлановыеНачисленияРаботников.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрСведений.ПлановыеНачисленияРаботников КАК ПлановыеНачисленияРаботников
	|	ГДЕ
	|		ПлановыеНачисленияРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПлановыеНачисленияРаботников.Регистратор) КАК СписокРегистраторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ВводСведенийОПлановыхНачисленияхУдержаниях.ДатаДействияКонец) КАК ДатаОкончания,
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ВводСведенийОПлановыхНачисленияхУдержанияхРаботников.Начисления КАК ВводСведенийОПлановыхНачисленияхУдержаниях
	|		ГДЕ
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.ДатаДействияКонец <> ДАТАВРЕМЯ(1, 1, 1)
	|			И ВводСведенийОПлановыхНачисленияхУдержаниях.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			МАКСИМУМ(ПриемНаРаботуРаботники.ДатаУвольнения),
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		ИЗ
	|			Документ.ПриемНаРаботу.Начисления КАК ВводСведенийОПлановыхНачисленияхУдержаниях
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Работники КАК ПриемНаРаботуРаботники
	|				ПО ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка = ПриемНаРаботуРаботники.Ссылка
	|					И ВводСведенийОПлановыхНачисленияхУдержаниях.Сотрудник = ПриемНаРаботуРаботники.Сотрудник
	|		ГДЕ
	|			ПриемНаРаботуРаботники.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			МАКСИМУМ(КадровоеПеремещениеРаботники.ДатаОкончания),
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		ИЗ
	|			Документ.КадровоеПеремещение.Начисления КАК ВводСведенийОПлановыхНачисленияхУдержаниях
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещение.Работники КАК КадровоеПеремещениеРаботники
	|				ПО ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка = КадровоеПеремещениеРаботники.Ссылка
	|					И ВводСведенийОПлановыхНачисленияхУдержаниях.Сотрудник = КадровоеПеремещениеРаботники.Сотрудник
	|		ГДЕ
	|			КадровоеПеремещениеРаботники.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|			И ВводСведенийОПлановыхНачисленияхУдержаниях.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка) КАК ДокументыКОбработке
	|		ПО СписокРегистраторов.Регистратор = ДокументыКОбработке.Ссылка
	|			И СписокРегистраторов.ПериодЗавершения = ДокументыКОбработке.ДатаОкончания";
	
	ТекстСообщения = "Обработка документов регистрации плановых начислений - часть 1";
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	Запрос.Текст = СписокРегистраторовТекст;
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	ВсегоДоков = ВыборкаРегистраторов.Количество();
	Номер = 1;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	НаборЗаписей = РегистрыСведений.ПлановыеНачисленияРаботников.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборЗаписей.Прочитать();
		Для каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(ЗаписьНабора.ПериодЗавершения) Тогда
				ЗаписьНабора.ПериодЗавершения = ЗаписьНабора.ПериодЗавершения + ДлинаСуток
			КонецЕсли;
		КонецЦикла;
		Если Номер % 10 = 0 Тогда
			#Если Клиент Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			#КонецЕсли
		КонецЕсли;
		Номер = Номер + 1;
		НаборЗаписей.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
	СписокРегистраторовТекст = 
	"ВЫБРАТЬ
	|	СписокРегистраторов.Регистратор КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ПлановыеДанныеРаботников.ПериодЗавершения) КАК ПериодЗавершения,
	|		ПлановыеДанныеРаботников.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрСведений.ПлановыеУдержанияРаботников КАК ПлановыеДанныеРаботников
	|	ГДЕ
	|		ПлановыеДанныеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПлановыеДанныеРаботников.Регистратор) КАК СписокРегистраторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ВводСведенийОПлановыхНачисленияхУдержаниях.ДатаДействияКонец) КАК ДатаОкончания,
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ВводСведенийОПлановыхНачисленияхУдержанияхРаботников.Удержания КАК ВводСведенийОПлановыхНачисленияхУдержаниях
	|		ГДЕ
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.ДатаДействияКонец <> ДАТАВРЕМЯ(1, 1, 1)
	|			И ВводСведенийОПлановыхНачисленияхУдержаниях.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			МАКСИМУМ(ПриемНаРаботуРаботники.ДатаУвольнения),
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		ИЗ
	|			Документ.ПриемНаРаботу.Взыскания КАК ВводСведенийОПлановыхНачисленияхУдержаниях
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Работники КАК ПриемНаРаботуРаботники
	|				ПО ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка = ПриемНаРаботуРаботники.Ссылка
	|					И ВводСведенийОПлановыхНачисленияхУдержаниях.Физлицо = ПриемНаРаботуРаботники.Сотрудник.Физлицо
	|		ГДЕ
	|			ПриемНаРаботуРаботники.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			МАКСИМУМ(КадровоеПеремещениеРаботники.ДатаОкончания),
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		ИЗ
	|			Документ.КадровоеПеремещение.Взыскания КАК ВводСведенийОПлановыхНачисленияхУдержаниях
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещение.Работники КАК КадровоеПеремещениеРаботники
	|				ПО ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка = КадровоеПеремещениеРаботники.Ссылка
	|					И ВводСведенийОПлановыхНачисленияхУдержаниях.Физлицо = КадровоеПеремещениеРаботники.Сотрудник.Физлицо
	|		ГДЕ
	|			КадровоеПеремещениеРаботники.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|			И ВводСведенийОПлановыхНачисленияхУдержаниях.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка) КАК ДокументыКОбработке
	|		ПО СписокРегистраторов.Регистратор = ДокументыКОбработке.Ссылка
	|			И СписокРегистраторов.ПериодЗавершения = ДокументыКОбработке.ДатаОкончания";
	
	ТекстСообщения = "Обработка документов регистрации плановых удержаний - часть 1";
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	Запрос.Текст = СписокРегистраторовТекст;
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	ВсегоДоков = ВыборкаРегистраторов.Количество();
	Номер = 1;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	НаборЗаписей = РегистрыСведений.ПлановыеУдержанияРаботников.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборЗаписей.Прочитать();
		Для каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(ЗаписьНабора.ПериодЗавершения) Тогда
				ЗаписьНабора.ПериодЗавершения = ЗаписьНабора.ПериодЗавершения + ДлинаСуток
			КонецЕсли;
		КонецЦикла;
		Если Номер % 10 = 0 Тогда
			#Если Клиент Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			#КонецЕсли
		КонецЕсли;
		Номер = Номер + 1;
		НаборЗаписей.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
	СписокРегистраторовТекст = 
	"ВЫБРАТЬ
	|	СписокРегистраторов.Регистратор КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ПлановыеНачисленияРаботников.ПериодЗавершения) КАК ПериодЗавершения,
	|		ПлановыеНачисленияРаботников.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботников
	|	ГДЕ
	|		ПлановыеНачисленияРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПлановыеНачисленияРаботников.Регистратор) КАК СписокРегистраторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ВводСведенийОПлановыхНачисленияхУдержаниях.ДатаДействияКонец) КАК ДатаОкончания,
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.ОсновныеНачисления КАК ВводСведенийОПлановыхНачисленияхУдержаниях
	|		ГДЕ
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.ДатаДействияКонец <> ДАТАВРЕМЯ(1, 1, 1)
	|			И ВводСведенийОПлановыхНачисленияхУдержаниях.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			МАКСИМУМ(ПриемНаРаботуРаботники.ДатаУвольнения),
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		ИЗ
	|			Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ВводСведенийОПлановыхНачисленияхУдержаниях
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуРаботники
	|				ПО ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка = ПриемНаРаботуРаботники.Ссылка
	|					И ВводСведенийОПлановыхНачисленияхУдержаниях.Сотрудник = ПриемНаРаботуРаботники.Сотрудник
	|		ГДЕ
	|			ПриемНаРаботуРаботники.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			МАКСИМУМ(КадровоеПеремещениеРаботники.ДатаОкончания),
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		ИЗ
	|			Документ.КадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК ВводСведенийОПлановыхНачисленияхУдержаниях
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеРаботники
	|				ПО ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка = КадровоеПеремещениеРаботники.Ссылка
	|					И ВводСведенийОПлановыхНачисленияхУдержаниях.Сотрудник = КадровоеПеремещениеРаботники.Сотрудник
	|		ГДЕ
	|			КадровоеПеремещениеРаботники.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|			И ВводСведенийОПлановыхНачисленияхУдержаниях.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания,
	|			ДоговорНаВыполнениеРаботСФизЛицом.Ссылка
	|		ИЗ
	|			Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ОтпускПоУходуЗаРебенком.ДатаОкончания,
	|			ОтпускПоУходуЗаРебенком.Ссылка
	|		ИЗ
	|			Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА (НЕ ВЫБОР
	|								КОГДА ОтпускПоУходуЗаРебенком.ДокументОснование.ВыплачиватьПособиеДоПолутораЛет
	|									ТОГДА ВЫБОР
	|											КОГДА ОтпускПоУходуЗаРебенком.ВыплачиватьПособиеДоПолутораЛет
	|												ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|											ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|										КОНЕЦ
	|								КОГДА ОтпускПоУходуЗаРебенком.ВыплачиватьПособиеДоПолутораЛет
	|									ТОГДА ВЫБОР
	|											КОГДА ОтпускПоУходуЗаРебенком.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|												ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
	|											ИНАЧЕ ОтпускПоУходуЗаРебенком.Действие
	|										КОНЕЦ
	|								ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять)
	|							КОНЕЦ В (ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять), ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)))
	|						И (НЕ ВЫБОР
	|								КОГДА ОтпускПоУходуЗаРебенком.ДокументОснование.ВыплачиватьПособиеДоТрехЛет
	|									ТОГДА ВЫБОР
	|											КОГДА ОтпускПоУходуЗаРебенком.ВыплачиватьПособиеДоТрехЛет
	|												ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|											ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|										КОНЕЦ
	|								КОГДА ОтпускПоУходуЗаРебенком.ВыплачиватьПособиеДоТрехЛет
	|									ТОГДА ВЫБОР
	|											КОГДА ОтпускПоУходуЗаРебенком.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|												ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
	|											ИНАЧЕ ОтпускПоУходуЗаРебенком.Действие
	|										КОНЕЦ
	|								ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять)
	|							КОНЕЦ В (ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять), ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)))
	|					ТОГДА ВЫБОР
	|							КОГДА ОтпускПоУходуЗаРебенком.ДокументОснование.ДатаОкончания < ВЫБОР
	|									КОГДА ОтпускПоУходуЗаРебенком.ДатаОкончанияПособияДоПолутораЛет < ОтпускПоУходуЗаРебенком.ДатаОкончанияПособияДоТрехЛет
	|										ТОГДА ОтпускПоУходуЗаРебенком.ДатаОкончанияПособияДоТрехЛет
	|									ИНАЧЕ ОтпускПоУходуЗаРебенком.ДатаОкончанияПособияДоПолутораЛет
	|								КОНЕЦ
	|								ТОГДА ОтпускПоУходуЗаРебенком.ДокументОснование.ДатаОкончания
	|							ИНАЧЕ ВЫБОР
	|									КОГДА ОтпускПоУходуЗаРебенком.ДатаОкончанияПособияДоПолутораЛет < ОтпускПоУходуЗаРебенком.ДатаОкончанияПособияДоТрехЛет
	|										ТОГДА ОтпускПоУходуЗаРебенком.ДатаОкончанияПособияДоТрехЛет
	|									ИНАЧЕ ОтпускПоУходуЗаРебенком.ДатаОкончанияПособияДоПолутораЛет
	|								КОНЕЦ
	|						КОНЕЦ
	|				КОГДА (НЕ ВЫБОР
	|							КОГДА ОтпускПоУходуЗаРебенком.ДокументОснование.ВыплачиватьПособиеДоПолутораЛет
	|								ТОГДА ВЫБОР
	|										КОГДА ОтпускПоУходуЗаРебенком.ВыплачиватьПособиеДоПолутораЛет
	|											ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|										ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|									КОНЕЦ
	|							КОГДА ОтпускПоУходуЗаРебенком.ВыплачиватьПособиеДоПолутораЛет
	|								ТОГДА ВЫБОР
	|										КОГДА ОтпускПоУходуЗаРебенком.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|											ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
	|										ИНАЧЕ ОтпускПоУходуЗаРебенком.Действие
	|									КОНЕЦ
	|							ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять)
	|						КОНЕЦ В (ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять), ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)))
	|					ТОГДА ВЫБОР
	|							КОГДА ОтпускПоУходуЗаРебенком.ДокументОснование.ДатаОкончания < ОтпускПоУходуЗаРебенком.ДатаОкончанияПособияДоПолутораЛет
	|								ТОГДА ОтпускПоУходуЗаРебенком.ДокументОснование.ДатаОкончания
	|							ИНАЧЕ ОтпускПоУходуЗаРебенком.ДатаОкончанияПособияДоПолутораЛет
	|						КОНЕЦ
	|				КОГДА (НЕ ВЫБОР
	|							КОГДА ОтпускПоУходуЗаРебенком.ДокументОснование.ВыплачиватьПособиеДоТрехЛет
	|								ТОГДА ВЫБОР
	|										КОГДА ОтпускПоУходуЗаРебенком.ВыплачиватьПособиеДоТрехЛет
	|											ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|										ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|									КОНЕЦ
	|							КОГДА ОтпускПоУходуЗаРебенком.ВыплачиватьПособиеДоТрехЛет
	|								ТОГДА ВЫБОР
	|										КОГДА ОтпускПоУходуЗаРебенком.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|											ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
	|										ИНАЧЕ ОтпускПоУходуЗаРебенком.Действие
	|									КОНЕЦ
	|							ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять)
	|						КОНЕЦ В (ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять), ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)))
	|					ТОГДА ВЫБОР
	|							КОГДА ОтпускПоУходуЗаРебенком.ДокументОснование.ДатаОкончания < ОтпускПоУходуЗаРебенком.ДатаОкончанияПособияДоТрехЛет
	|								ТОГДА ОтпускПоУходуЗаРебенком.ДокументОснование.ДатаОкончания
	|							ИНАЧЕ ОтпускПоУходуЗаРебенком.ДатаОкончанияПособияДоТрехЛет
	|						КОНЕЦ
	|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|			КОНЕЦ,
	|			ОтпускПоУходуЗаРебенком.Ссылка
	|		ИЗ
	|			Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком) КАК ДокументыКОбработке
	|		ПО СписокРегистраторов.Регистратор = ДокументыКОбработке.Ссылка
	|			И СписокРегистраторов.ПериодЗавершения = ДокументыКОбработке.ДатаОкончания";
	
	ТекстСообщения = "Обработка документов регистрации плановых начислений - часть 2";
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	Запрос.Текст = СписокРегистраторовТекст;
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	ВсегоДоков = ВыборкаРегистраторов.Количество();
	Номер = 1;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	НаборЗаписей = РегистрыСведений.ПлановыеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборЗаписей.Прочитать();
		Для каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(ЗаписьНабора.ПериодЗавершения) Тогда
				ЗаписьНабора.ПериодЗавершения = ЗаписьНабора.ПериодЗавершения + ДлинаСуток
			КонецЕсли;
		КонецЦикла;
		Если Номер % 10 = 0 Тогда
			#Если Клиент Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			#КонецЕсли
		КонецЕсли;
		Номер = Номер + 1;
		НаборЗаписей.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
	СписокРегистраторовТекст = 
	"ВЫБРАТЬ
	|	СписокРегистраторов.Регистратор КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ПлановыеДанныеРаботников.ПериодЗавершения) КАК ПериодЗавершения,
	|		ПлановыеДанныеРаботников.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеДанныеРаботников
	|	ГДЕ
	|		ПлановыеДанныеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПлановыеДанныеРаботников.Регистратор) КАК СписокРегистраторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ВводСведенийОПлановыхНачисленияхУдержаниях.ДатаДействияКонец) КАК ДатаОкончания,
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций.Удержания КАК ВводСведенийОПлановыхНачисленияхУдержаниях
	|		ГДЕ
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.ДатаДействияКонец <> ДАТАВРЕМЯ(1, 1, 1)
	|			И ВводСведенийОПлановыхНачисленияхУдержаниях.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ИсполнительныйЛист.ДатаОкончания,
	|			ИсполнительныйЛист.Ссылка
	|		ИЗ
	|			Документ.ИсполнительныйЛист КАК ИсполнительныйЛист) КАК ДокументыКОбработке
	|		ПО СписокРегистраторов.Регистратор = ДокументыКОбработке.Ссылка
	|			И СписокРегистраторов.ПериодЗавершения = ДокументыКОбработке.ДатаОкончания";
	
	ТекстСообщения = "Обработка документов регистрации плановых удержаний - часть 2";
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	Запрос.Текст = СписокРегистраторовТекст;
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	ВсегоДоков = ВыборкаРегистраторов.Количество();
	Номер = 1;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	НаборЗаписей = РегистрыСведений.ПлановыеУдержанияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборЗаписей.Прочитать();
		Для каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(ЗаписьНабора.ПериодЗавершения) Тогда
				ЗаписьНабора.ПериодЗавершения = ЗаписьНабора.ПериодЗавершения + ДлинаСуток
			КонецЕсли;
		КонецЦикла;
		Если Номер % 10 = 0 Тогда
			#Если Клиент Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			#КонецЕсли
		КонецЕсли;
		Номер = Номер + 1;
		НаборЗаписей.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
КонецПроцедуры

// Процедура создания настроек для отчета СтатистикаКадровОрганизации
//
Процедура ДобавитьИСохранитьНастройкиОтчета()
	
#Если Клиент Тогда
		
	Пользователи = Новый Массив;
	Пользователи.Добавить(ПараметрыСеанса.ТекущийПользователь);
	Пользователи.Добавить(Справочники.ГруппыПользователей.ВсеПользователи);
	// Отчет СтатистикаКадровОрганизации 
	ОбъектОтчета = Отчеты.СтатистикаКадровОрганизации.Создать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СохраненныеНастройки.Ссылка КАК СохраненнаяНастройка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.Владелец В(&Пользователи)
	|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
	|   И (НЕ СохраненныеНастройки.ПометкаУдаления) ";
	
	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", "ОтчетОбъект." + ОбъектОтчета.Метаданные().Имя);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультата.Количество() = 0 Тогда
 		Состояние("Формирование настроек отчета ""Статистика кадров организации"" ");
		
		СхемаКомпоновкиДанных = ОбъектОтчета.ПолучитьМакет("РаботающиеЖенщины");

		КомпоновщикНастроекНовый = ОбъектОтчета.КомпоновщикНастроек;
		КомпоновщикНастроекНовый.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
		НаименованиеОтчета = "Работающие женщины имеющие детей в возрасте до 14 лет";
    	ЗаписатьНастройкиДляОтчета(КомпоновщикНастроекНовый,ОбъектОтчета,НаименованиеОтчета);
	
		СхемаКомпоновкиДанных = ОбъектОтчета.ПолучитьМакет("СотрудникиСтарше50Лет");

		КомпоновщикНастроекНовый = ОбъектОтчета.КомпоновщикНастроек;
		КомпоновщикНастроекНовый.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
		НаименованиеОтчета = "Сотрудники (старше 50 лет) по интервалам (возраст сотрудников)";
    	ЗаписатьНастройкиДляОтчета(КомпоновщикНастроекНовый,ОбъектОтчета,НаименованиеОтчета);
	
		СхемаКомпоновкиДанных = ОбъектОтчета.ПолучитьМакет("ДвижениеКадров");

		КомпоновщикНастроекНовый = ОбъектОтчета.КомпоновщикНастроек;
		КомпоновщикНастроекНовый.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
		НаименованиеОтчета = "Движение кадров в разрезе организаций и должностей)";
    	ЗаписатьНастройкиДляОтчета(КомпоновщикНастроекНовый,ОбъектОтчета,НаименованиеОтчета);
	КонецЕсли;
	// Отчет ДвиженияРаботников 
	ОбъектОтчета = Отчеты.ДвижениеРаботников.Создать();
 	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", "ОтчетОбъект." + ОбъектОтчета.Метаданные().Имя);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРезультата.Количество() = 0 Тогда
 		Состояние("Формирование настроек отчета ""Движения работников (расширенные настройки)"" ");
		СхемаКомпоновкиДанных = ОбъектОтчета.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");

		КомпоновщикНастроекНовый = ОбъектОтчета.КомпоновщикНастроек;
		КомпоновщикНастроекНовый.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
		НаименованиеОтчета = "Движения работников (расширенные настройки)";
    	ЗаписатьНастройкиДляОтчета(КомпоновщикНастроекНовый,ОбъектОтчета,НаименованиеОтчета);
		
	КонецЕсли;
		
#КонецЕсли
	
КонецПроцедуры

#Если Клиент Тогда

// Процедура сохранения настроек для отчета СтатистикаКадровОрганизации
//
Процедура ЗаписатьНастройкиДляОтчета(КомпоновщикНастроекДляЗаписи,ОбъектОтчета,НаименованиеОтчета)
	
	ЭлементСправочника = Справочники.СохраненныеНастройки.СоздатьЭлемент();
	ЭлементСправочника.НастраиваемыйОбъект = "ОтчетОбъект." + ОбъектОтчета.Метаданные().Имя;
	ЭлементСправочника.ТипНастройки = Перечисления.ТипыНастроек.НастройкиОтчета;
	ЭлементСправочника.Владелец = Справочники.ГруппыПользователей.ВсеПользователи; 
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ОбъектОтчета);
	ЭлементСправочника.ХранилищеНастроек = Новый ХранилищеЗначения(СтруктураНастроек);
	ЭлементСправочника.Наименование = НаименованиеОтчета;
	ЭлементСправочника.Записать();
	
КонецПроцедуры

#КонецЕсли

Процедура УстановитьНазначенияУчетныхЗаписей()
	
	УчетнаяЗаписьНаборПерсонала = Константы.УдалитьУчетнаяЗаписьНаборПерсонала.Получить();
	Если Не УчетнаяЗаписьНаборПерсонала.Пустая() Тогда
		УчетнаяЗаписьОбъект = УчетнаяЗаписьНаборПерсонала.ПолучитьОбъект();
		УчетнаяЗаписьОбъект.НазначениеУчетнойЗаписи = Перечисления.НазначенияУчетнойЗаписи.ПерепискаСКандидатами;
		УчетнаяЗаписьОбъект.Записать();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьНаборПерсонала",	УчетнаяЗаписьНаборПерсонала);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.НазначениеУчетнойЗаписи = ЗНАЧЕНИЕ(Перечисление.НазначенияУчетнойЗаписи.ПустаяСсылка)
	|	И УчетныеЗаписиЭлектроннойПочты.НазначениеУчетнойЗаписи <> &УчетнаяЗаписьНаборПерсонала";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		УчетнаяЗаписьОбъект = Выборка.Ссылка.ПолучитьОбъект();
		УчетнаяЗаписьОбъект.НазначениеУчетнойЗаписи = Перечисления.НазначенияУчетнойЗаписи.Прочее;
		УчетнаяЗаписьОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитВедомостьВРегистреВзаиморасчетыСРаботникамиОрганизаций()
	
	ТЗ = "ВЫБРАТЬ
	     |	ВзаиморасчетыСРаботникамиОрганизаций.Ведомость
	     |ИЗ
	     |	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизаций
	     |ГДЕ
	     |	ВзаиморасчетыСРаботникамиОрганизаций.Ведомость <> &ПустаяСсылкаВедомость
	     |	И (ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.ДепонированиеОрганизаций
	     |			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее
	     |			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	     |			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.ПлатежныйОрдерСписаниеДенежныхСредств)";
		 
	Запрос = Новый Запрос(ТЗ);
	
	Запрос.УстановитьПараметр("ПустаяСсылкаВедомость", Документы.ЗарплатаКВыплатеОрганизаций.ПустаяСсылка());
	
	Если НЕ Запрос.Выполнить().Пустой() тогда
		Возврат;
	КонецЕсли;
	
	// Депонирование организаций
	
	Запрос.УстановитьПараметр("Задепонировано", Перечисления.ВыплаченностьЗарплаты.Задепонировано);
	Запрос.УстановитьПараметр("НеВыплачено", Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
	Запрос.УстановитьПараметр("Выплачено", Перечисления.ВыплаченностьЗарплаты.Выплачено);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка.Дата КАК Дата,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.ПериодРегистрации КАК ПериодРегистрации,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.СпособВыплаты КАК СпособВыплатыВедомости,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК Физлицо,
	|	ЕСТЬNULL(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты, 0) КАК СуммаКДепонированию,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ХарактерВыплаты,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка КАК Ссылка,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка.Организация
	|ИЗ
	|	Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ДепонированиеОрганизацийДепонированиеЗаработнойПлаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
	|			И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|			И ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка <> РанееВыплаченныеСуммы.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.НомерСтроки КАК НомерСтроки,
	|			СУММА(ВЫБОР
	|					КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &НеВыплачено
	|						ТОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК НеПомеченнаяСумма,
	|			СУММА(ВЫБОР
	|					КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Задепонировано
	|						ТОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК Задепонировано
	|		ИЗ
	|			Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ДепонированиеОрганизацийДепонированиеЗаработнойПлаты
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|				ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|				ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
	|					И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|		ГДЕ
	|			РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.НомерСтроки) КАК ОбщиеСуммыПоВедомости
	|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.НомерСтроки = ОбщиеСуммыПоВедомости.НомерСтроки
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Задепонировано
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|	И ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка.Дата,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.ПериодРегистрации,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.СпособВыплаты,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
	|	ЕСТЬNULL(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма, 0),
	|	ЕСТЬNULL(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты, 0),
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ХарактерВыплаты,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка.Организация
	|ИТОГИ ПО
	|	Ссылка";
	
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ВсегоДоков = ВыборкаПоДокументам.Количество();
	Номер      = 1;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.ВзаиморасчетыСРаботникамиОрганизаций.СоздатьНаборЗаписей();
		
		#Если Клиент тогда
			Состояние("Обработка документа депонирование организаций : обработано " + Номер + " из " + ВсегоДоков);
		#КонецЕсли
        Номер = Номер + 1;
		
		НаборЗаписей.Отбор.Регистратор.Значение      = ВыборкаПоДокументам.Ссылка;
		НаборЗаписей.Отбор.Регистратор.Использование = истина;
		
		ВыборкаПоТЧ = ВыборкаПоДокументам.Выбрать();
		
		Пока ВыборкаПоТЧ.Следующий() Цикл
			
			Если ВыборкаПоТЧ.СуммаКДепонированию <> 0 Тогда
				УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоТЧ.Организация, "УчетЗадолженностиПоМесяцам");

				Движение = НаборЗаписей.Добавить();
				// Свойства
				Движение.Период           				= ВыборкаПоТЧ.Дата;
				Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
				// Измерения
				Движение.Организация					= ВыборкаПоТЧ.Организация;
				Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
				Если УчетЗадолженностиПоМесяцам Тогда
					Движение.ПериодВзаиморасчетов           = ВыборкаПоТЧ.ПериодРегистрации;
				КонецЕсли;
				
				// Ресурсы
				Движение.СуммаВзаиморасчетов			= ВыборкаПоТЧ.Сумма; 
				// Реквизиты
				Движение.ХарактерВыплаты				= ВыборкаПоТЧ.ХарактерВыплаты; 
				Движение.СпособВыплаты					= Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу; 
				Движение.Ведомость  					= ВыборкаПоТЧ.Ведомость; 
			КонецЕсли;
			
		КонецЦикла;
		НаборЗаписей.Записать(истина);
	КонецЦикла;
	
	// Расходный кассовый ордер 
	// Вид  - выплата заработной платы по ведомостям
	Запрос.УстановитьПараметр("Выплачено",						Перечисления.ВыплаченностьЗарплаты.Выплачено);
	Запрос.УстановитьПараметр("ВидОперации",				    Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка КАК Ведомость,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ХарактерВыплаты,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация КАК Организация,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Дата КАК Дата,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК ФизЛицо,
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК СуммаВзаиморасчетов,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|			И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|			И (РанееВыплаченныеСуммы.Регистратор <> РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка)
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &Выплачено
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ВидОперации = &ВидОперации
	|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ХарактерВыплаты,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) <> 0
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ВсегоДоков = ВыборкаПоДокументам.Количество();
	Номер      = 1;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.ВзаиморасчетыСРаботникамиОрганизаций.СоздатьНаборЗаписей();
		
		#Если Клиент тогда
			Состояние("Обработка документа расходный кассовый ордер : обработано " + Номер + " из " + ВсегоДоков);
		#КонецЕсли
		
        Номер = Номер + 1;
		
		НаборЗаписей.Отбор.Регистратор.Значение      = ВыборкаПоДокументам.Ссылка;
		НаборЗаписей.Отбор.Регистратор.Использование = истина;
		
		ВыборкаПоТЧ = ВыборкаПоДокументам.Выбрать();
		
		Пока ВыборкаПоТЧ.Следующий() Цикл
			
			Если ВыборкаПоТЧ.СуммаВзаиморасчетов <> 0 Тогда
				УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоТЧ.Организация, "УчетЗадолженностиПоМесяцам");
				СтрокаДвижения = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения,ВыборкаПоТЧ);
				СтрокаДвижения.Период        = ВыборкаПоТЧ.Дата;
				СтрокаДвижения.ВидДвижения   = ВидДвиженияНакопления.Расход;
				Если УчетЗадолженностиПоМесяцам Тогда
					СтрокаДвижения.ПериодВзаиморасчетов = ВыборкаПоТЧ.ПериодРегистрации;
				КонецЕсли;
				СтрокаДвижения.Ведомость     = ВыборкаПоТЧ.Ведомость;
				СтрокаДвижения.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу; 
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать(истина);
	КонецЦикла;
	
	
	// Расходный кассовый ордер 
	// Вид  - Выплата заработной платы работнику
	Запрос.УстановитьПараметр("парамВыплаченностьЗарплаты",		Перечисления.ВыплаченностьЗарплаты.Выплачено);
	Запрос.УстановитьПараметр("ВидОперации",				    Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ХарактерВыплаты,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка КАК ВедомостьНаВыплату,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК СуммаВзаиморасчетов,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация,
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдер.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ПО РасходныйКассовыйОрдер.ПлатежнаяВедомость = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
	|			И РасходныйКассовыйОрдер.Контрагент = ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &парамВыплаченностьЗарплаты
	|	И РасходныйКассовыйОрдер.Проведен
	|	И РасходныйКассовыйОрдер.ВидОперации = &ВидОперации
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ХарактерВыплаты,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация,
	|	РасходныйКассовыйОрдер.Ссылка,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации,
	|	РасходныйКассовыйОрдер.Ссылка.Дата
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ВсегоДоков = ВыборкаПоДокументам.Количество();
	Номер      = 1;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.ВзаиморасчетыСРаботникамиОрганизаций.СоздатьНаборЗаписей();
		
		#Если Клиент тогда
			Состояние("Обработка документа расходный кассовый ордер : обработано " + Номер + " из " + ВсегоДоков);
        #КонецЕсли
		Номер = Номер + 1;
		
		НаборЗаписей.Отбор.Регистратор.Значение      = ВыборкаПоДокументам.Ссылка;
		НаборЗаписей.Отбор.Регистратор.Использование = истина;
		
		ВыборкаПоТЧ = ВыборкаПоДокументам.Выбрать();
		ВыборкаПоТЧ.Следующий();
		Если ВыборкаПоТЧ.СуммаВзаиморасчетов <> 0 Тогда
			УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоТЧ.Организация, "УчетЗадолженностиПоМесяцам");
			СтрокаДвижения = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения, ВыборкаПоТЧ);
			СтрокаДвижения.Период        = ВыборкаПоТЧ.Дата;
			СтрокаДвижения.ВидДвижения   = ВидДвиженияНакопления.Расход;
			СтрокаДвижения.Ведомость     = ВыборкаПоТЧ.ВедомостьНаВыплату;
			СтрокаДвижения.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу; 
			
			Если УчетЗадолженностиПоМесяцам Тогда
				СтрокаДвижения.ПериодВзаиморасчетов = ВыборкаПоТЧ.ПериодРегистрации;
			КонецЕсли;
			
		КонецЕсли;
		НаборЗаписей.Записать(истина);
	КонецЦикла;
	
	// Платежное поручение исходящее
	Запрос.УстановитьПараметр("СпособВыплаты",	Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументПеречислениеЗаработнойПлаты.Ссылка.Дата КАК Период,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК ФизЛицо,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ХарактерВыплаты,
	|	&СпособВыплаты КАК СпособВыплаты,
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК СуммаВзаиморасчетов,
	|	ДокументПеречислениеЗаработнойПлаты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ДокументПеречислениеЗаработнойПлаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|			ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|				И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = ДокументПеречислениеЗаработнойПлаты.Ведомость
	|ГДЕ
	|	РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|	И (РанееВыплаченныеСуммы.Регистратор <> ДокументПеречислениеЗаработнойПлаты.Ссылка ИЛИ РанееВыплаченныеСуммы.Регистратор ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументПеречислениеЗаработнойПлаты.Ссылка.Дата,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодРегистрации,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ХарактерВыплаты,
	|	ДокументПеречислениеЗаработнойПлаты.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) <> 0
	|ИТОГИ ПО
	|	Ссылка";

	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ВсегоДоков = ВыборкаПоДокументам.Количество();
	Номер      = 1;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.ВзаиморасчетыСРаботникамиОрганизаций.СоздатьНаборЗаписей();
		
		#Если Клиент тогда
			Состояние("Обработка документа платежное поручение исходящее : обработано " + Номер + " из " + ВсегоДоков);
        #КонецЕсли
		
		Номер = Номер + 1;
		
		НаборЗаписей.Отбор.Регистратор.Значение      = ВыборкаПоДокументам.Ссылка;
		НаборЗаписей.Отбор.Регистратор.Использование = истина;
		
		ВыборкаПоТЧ = ВыборкаПоДокументам.Выбрать();
		
		Пока ВыборкаПоТЧ.Следующий() Цикл
			УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоТЧ.Организация, "УчетЗадолженностиПоМесяцам");
			СтрокаДвижения = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения, ВыборкаПоТЧ);
			Если УчетЗадолженностиПоМесяцам Тогда
				СтрокаДвижения.ПериодВзаиморасчетов = ВыборкаПоТЧ.ПериодРегистрации;
			КонецЕсли;
			СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Расход;
		КонецЦикла;
		НаборЗаписей.Записать(истина);
	КонецЦикла;
	
	
	// Платежный ордер списание денежных средств
	Запрос.УстановитьПараметр("СпособВыплаты",	Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ссылка.Дата КАК Период,
	|	ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ссылка.Организация,
	|	ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Физлицо,
	|	&СпособВыплаты КАК СпособВыплаты,
	|	ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ведомость.ПериодРегистрации КАК ПериодРегистрации,
	|	ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ведомость.ХарактерВыплаты КАК ХарактерВыплаты,
	|	СУММА(ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.СуммаПлатежа) КАК СуммаВзаиморасчетов,
	|	ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ведомость,
	|	ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств.ПеречислениеЗаработнойПлаты КАК ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ссылка.Дата,
	|	ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ссылка.Организация,
	|	ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Физлицо,
	|	ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ведомость.ПериодРегистрации,
	|	ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ведомость.ХарактерВыплаты,
	|	ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ведомость,
	|	ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.СуммаПлатежа) <> 0
	|ИТОГИ ПО
	|	Ссылка";
		
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ВсегоДоков = ВыборкаПоДокументам.Количество();
	Номер      = 1;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.ВзаиморасчетыСРаботникамиОрганизаций.СоздатьНаборЗаписей();
		
		#Если Клиент тогда
			Состояние("Обработка документа платежный ордер списание денежных средств : обработано " + Номер + " из " + ВсегоДоков);
        #КонецЕсли
		Номер = Номер + 1;
		
		НаборЗаписей.Отбор.Регистратор.Значение      = ВыборкаПоДокументам.Ссылка;
		НаборЗаписей.Отбор.Регистратор.Использование = истина;
		
		ВыборкаПоТЧ = ВыборкаПоДокументам.Выбрать();
		
		Пока ВыборкаПоТЧ.Следующий() Цикл
			УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоТЧ.Организация, "УчетЗадолженностиПоМесяцам");
			СтрокаДвижения = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения, ВыборкаПоТЧ);
			СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Расход;
			Если УчетЗадолженностиПоМесяцам Тогда
				СтрокаДвижения.ПериодВзаиморасчетов = ВыборкаПоТЧ.ПериодРегистрации;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать(истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИзмерениеСтавкаВРегистреНДФЛКЗачету()
	
	// проверка
	ТЗ = "ВЫБРАТЬ
	     |	НДФЛКЗачету.Регистратор
	     |ИЗ
	     |	РегистрНакопления.НДФЛКЗачету КАК НДФЛКЗачету
	     |ГДЕ
	     |	НДФЛКЗачету.СтавкаНалогообложенияРезидента <> &ПустаяСтавкаНалогообложенияРезидента";
		 
	Запрос = Новый Запрос(ТЗ);
	Запрос.УстановитьПараметр("ПустаяСтавкаНалогообложенияРезидента", Перечисления.НДФЛСтавкиНалогообложенияРезидента.ПустаяСсылка());
	
	Если НЕ Запрос.Выполнить().Пустой() тогда
		Возврат;
	КонецЕсли;
	
	// заполним регистр нужной ставкой
	ТЗ = "ВЫБРАТЬ
	|	НДФЛКЗачету.Регистратор
	|ИЗ
	|	РегистрНакопления.НДФЛКЗачету КАК НДФЛКЗачету";
	
	Запрос = Новый Запрос(ТЗ);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписейНДФЛКЗачету = РегистрыНакопления.НДФЛКЗачету.СоздатьНаборЗаписей();
		НаборЗаписейНДФЛКЗачету.Отбор.Регистратор.Значение      = Выборка.Регистратор;
		НаборЗаписейНДФЛКЗачету.Отбор.Регистратор.Использование = истина;
		НаборЗаписейНДФЛКЗачету.Прочитать();
		Для каждого ЗаписьНабора из НаборЗаписейНДФЛКЗачету Цикл
			ЗаписьНабора.СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
		КонецЦикла;
		
		НаборЗаписейНДФЛКЗачету.Записать(истина);
		
	КонецЦикла;
	
	//сформируем наборы записей для документов возврат налога и пересчет
	
	// перерасчет налога и возврат налога
	
	Запрос = Новый Запрос;
	

	Запрос.Текст = "ВЫБРАТЬ
	|	НДФЛПерерасчетРаботникиОрганизации.НалогПоСтавке09,
	|	НДФЛПерерасчетРаботникиОрганизации.НалогПоСтавке35,
	|	НДФЛПерерасчетРаботникиОрганизации.ФизЛицо,
	|	НДФЛПерерасчетРаботникиОрганизации.Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА НДФЛПерерасчетРаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация <> &ПустаяОрганизация
	|			ТОГДА НДФЛПерерасчетРаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ НДФЛПерерасчетРаботникиОрганизации.Ссылка.Организация
	|	КОНЕЦ КАК Организация,
	|	НДФЛПерерасчетРаботникиОрганизации.Ссылка.Дата
	|ИЗ
	|	Документ.НДФЛПерерасчет.РаботникиОрганизации КАК НДФЛПерерасчетРаботникиОрганизации
	|ГДЕ
	|	(НДФЛПерерасчетРаботникиОрганизации.Ссылка.Проведен
	|				И НДФЛПерерасчетРаботникиОрганизации.НалогПоСтавке09 <> 0
	|			ИЛИ НДФЛПерерасчетРаботникиОрганизации.НалогПоСтавке35 <> 0)
	|
	|ИТОГИ ПО
	|	Регистратор";
				   
				   
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);			   
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.НДФЛКЗачету.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение      = Выборка.Регистратор;
		НаборЗаписей.Отбор.Регистратор.Использование = Истина;
		НаборЗаписей.Прочитать();
		ВыборкаПоСтрокам = Выборка.Выбрать();
		Пока ВыборкаПоСтрокам.Следующий() Цикл
			Если ВыборкаПоСтрокам.НалогПоСтавке09 <> 0 тогда
				Запись = НаборЗаписей.Добавить();
				Запись.ВидДвижения                    = ВидДвиженияНакопления.Приход;
				Запись.Организация                    = ВыборкаПоСтрокам.Организация;
				Запись.Период                         = ВыборкаПоСтрокам.Дата;
				Запись.СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09;
				Запись.СуммаНДФЛКЗачету               = ?(ВыборкаПоСтрокам.НалогПоСтавке09 > 0, ВыборкаПоСтрокам.НалогПоСтавке09, -ВыборкаПоСтрокам.НалогПоСтавке09);;
				Запись.ФизЛицо                        = ВыборкаПоСтрокам.ФизЛицо;
			КонецЕсли;
			
			Если ВыборкаПоСтрокам.НалогПоСтавке35 <> 0 тогда
				Запись = НаборЗаписей.Добавить();
				Запись.ВидДвижения                    = ВидДвиженияНакопления.Приход;
				Запись.Организация                    = ВыборкаПоСтрокам.Организация;
				Запись.Период                         = ВыборкаПоСтрокам.Дата;
				Запись.СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35;
				Запись.СуммаНДФЛКЗачету               = ?(ВыборкаПоСтрокам.НалогПоСтавке35 > 0, ВыборкаПоСтрокам.НалогПоСтавке35, -ВыборкаПоСтрокам.НалогПоСтавке35);;
				Запись.ФизЛицо                        = ВыборкаПоСтрокам.ФизЛицо;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать(истина);
	КонецЦикла;
	
		            
	Запрос.Текст = "ВЫБРАТЬ
	|	НДФЛВозвратНалогаРаботникиОрганизации.СуммаВозвратаПоСтавке09 КАК НалогПоСтавке09,
	|	НДФЛВозвратНалогаРаботникиОрганизации.СуммаВозвратаПоСтавке35 КАК НалогПоСтавке35,
	|	НДФЛВозвратНалогаРаботникиОрганизации.ФизЛицо,
	|	НДФЛВозвратНалогаРаботникиОрганизации.Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА НДФЛВозвратНалогаРаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация <> &ПустаяОрганизация
	|			ТОГДА НДФЛВозвратНалогаРаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ НДФЛВозвратНалогаРаботникиОрганизации.Ссылка.Организация
	|	КОНЕЦ КАК Организация,
	|	НДФЛВозвратНалогаРаботникиОрганизации.Ссылка.Дата
	|ИЗ
	|	Документ.НДФЛВозвратНалога.РаботникиОрганизации КАК НДФЛВозвратНалогаРаботникиОрганизации
	|ГДЕ
	|	(НДФЛВозвратНалогаРаботникиОрганизации.Ссылка.Проведен
	|				И НДФЛВозвратНалогаРаботникиОрганизации.СуммаВозвратаПоСтавке09 <> 0
	|			ИЛИ НДФЛВозвратНалогаРаботникиОрганизации.СуммаВозвратаПоСтавке35 <> 0)
	|ИТОГИ ПО
	|	Регистратор";
				   
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);			   
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.НДФЛКЗачету.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение      = Выборка.Регистратор;
		НаборЗаписей.Отбор.Регистратор.Использование = Истина;
		НаборЗаписей.Прочитать();
		ВыборкаПоСтрокам = Выборка.Выбрать();
		Пока ВыборкаПоСтрокам.Следующий() Цикл
			Если ВыборкаПоСтрокам.НалогПоСтавке09 <> 0 тогда
				Запись = НаборЗаписей.Добавить();
				Запись.ВидДвижения                    = ВидДвиженияНакопления.Расход;
				Запись.Организация                    = ВыборкаПоСтрокам.Организация;
				Запись.Период                         = ВыборкаПоСтрокам.Дата;
				Запись.СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09;
				Запись.СуммаНДФЛКЗачету               = ?(ВыборкаПоСтрокам.НалогПоСтавке09 > 0, ВыборкаПоСтрокам.НалогПоСтавке09, -ВыборкаПоСтрокам.НалогПоСтавке09);;
				Запись.ФизЛицо                        = ВыборкаПоСтрокам.ФизЛицо;
			КонецЕсли;
			
			Если ВыборкаПоСтрокам.НалогПоСтавке35 <> 0 тогда
				Запись = НаборЗаписей.Добавить();
				Запись.ВидДвижения                    = ВидДвиженияНакопления.Расход;
				Запись.Организация                    = ВыборкаПоСтрокам.Организация;
				Запись.Период                         = ВыборкаПоСтрокам.Дата;
				Запись.СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35;
				Запись.СуммаНДФЛКЗачету               = ?(ВыборкаПоСтрокам.НалогПоСтавке35 > 0, ВыборкаПоСтрокам.НалогПоСтавке35, -ВыборкаПоСтрокам.НалогПоСтавке35);;
				Запись.ФизЛицо                        = ВыборкаПоСтрокам.ФизЛицо;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать(истина);
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьЭлементыПВХНазначенияСвойствКатегорийОбъектов()
	спсЭлементов = Новый СписокЗначений;
	спсЭлементов.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.ГруппаДокументов);
	УстановитьЗначениеКодаПредопределенныхЭлементов(спсЭлементов);
КонецПроцедуры

Процедура ЗаполнитьРегистрПериодыРаботыРаботников()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ПриемНаРаботу.Работники КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыРаботыРаботников КАК Периоды
	|		ПО Док.Сотрудник.ФизЛицо = Периоды.Физлицо
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаПриема = Периоды.ДатаНачала
	|			И Док.ДатаУвольнения = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.Увольнение.Работники КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыРаботыРаботников КАК Периоды
	|		ПО Док.Сотрудник.ФизЛицо = Периоды.Физлицо
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаУвольнения = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу1Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник.Физлицо КАК Физлицо,
	|	Док.ДатаПриема КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Док.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИЛИ Док.НапомнитьПоЗавершении
	|			ТОГДА Док.ДатаУвольнения
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаУвольнения, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ПриемНаРаботу.Работники КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	ЗапроспоДокументу2Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник.ФизЛицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА Док.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Док.ДатаУвольнения
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаУвольнения, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.Увольнение.Работники КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Работа в компании. Обрабатывается документ " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
			ЗапросПоДокументу.Текст = ЗапросПоДокументу1Текст;
		Иначе
			ЗапросПоДокументу.Текст = ЗапросПоДокументу2Текст;
		КонецЕсли;
		
		ЗапросПоДокументу.УстановитьПараметр("Ссылка",	Выборка.Регистратор);
		
		НаборЗаписей = РегистрыСведений.ПериодыРаботыРаботников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Регистратор;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоДокументу);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы КАК Периоды
	|		ПО Док.Сотрудник.Физлицо = Периоды.Физлицо
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаПриема = Периоды.ДатаНачала
	|			И Док.ДатаУвольнения = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|	И Док.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы КАК Периоды
	|		ПО Док.Сотрудник.Физлицо = Периоды.Физлицо
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаУвольнения = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|	И Док.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу1Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник.Физлицо КАК Физлицо,
	|	Док.ДатаПриема КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Док.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИЛИ Док.НапомнитьПоЗавершении
	|			ТОГДА Док.ДатаУвольнения
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаУвольнения, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)";
	
	ЗапроспоДокументу2Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник.Физлицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА Док.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Док.ДатаУвольнения
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаУвольнения, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Работа в организации по основному месту работы. Обрабатывается документ " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПриемНаРаботуВОрганизацию") Тогда
			ЗапросПоДокументу.Текст = ЗапросПоДокументу1Текст;
		Иначе
			ЗапросПоДокументу.Текст = ЗапросПоДокументу2Текст;
		КонецЕсли;
		
		ЗапросПоДокументу.УстановитьПараметр("Ссылка",	Выборка.Регистратор);
		
		НаборЗаписей = РегистрыСведений.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Регистратор;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоДокументу);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрПериодыРаботыРаботниковОрганизацийПоСовместительству()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыРаботыРаботниковОрганизацийПоСовместительству КАК Периоды
	|		ПО Док.Сотрудник.Физлицо = Периоды.Физлицо
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаПриема = Периоды.ДатаНачала
	|			И Док.ДатаУвольнения = Периоды.ДатаОкончания
	|			И Док.Ссылка.Организация = Периоды.Организация
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|	И Док.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыРаботыРаботниковОрганизацийПоСовместительству КАК Периоды
	|		ПО Док.Сотрудник.Физлицо = Периоды.Физлицо
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаУвольнения = Периоды.ДатаОкончания
	|			И Док.Ссылка.Организация = Периоды.Организация
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|	И Док.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу1Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник.Физлицо КАК Физлицо,
	|	Док.Ссылка.Организация,
	|	Док.ДатаПриема КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Док.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИЛИ Док.НапомнитьПоЗавершении
	|			ТОГДА Док.ДатаУвольнения
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаУвольнения, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)";
	
	ЗапроспоДокументу2Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник.Физлицо КАК Физлицо,
	|	Док.Ссылка.Организация,
	|	ВЫБОР
	|		КОГДА Док.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Док.ДатаУвольнения
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаУвольнения, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Работа в организации по внешнему совместительству. Обрабатывается документ " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПриемНаРаботуВОрганизацию") Тогда
			ЗапросПоДокументу.Текст = ЗапросПоДокументу1Текст;
		Иначе
			ЗапросПоДокументу.Текст = ЗапросПоДокументу2Текст;
		КонецЕсли;
		
		ЗапросПоДокументу.УстановитьПараметр("Ссылка",	Выборка.Регистратор);
		
		НаборЗаписей = РегистрыСведений.ПериодыРаботыРаботниковОрганизацийПоСовместительству.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Регистратор;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоДокументу);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрПериодыСостоянийРаботников()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ОтсутствиеНаРаботе.Работники КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыСостоянийРаботников КАК Периоды
	|		ПО Док.Сотрудник.Физлицо = Периоды.Физлицо
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаНачала = Периоды.ДатаНачала
	|			И Док.ДатаОкончания = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.ВозвратНаРаботу.Работники КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыСостоянийРаботников КАК Периоды
	|		ПО Док.Сотрудник.Физлицо = Периоды.Физлицо
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаВозврата = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу1Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник.Физлицо КАК Физлицо,
	|	Док.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Док.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИЛИ Док.НапомнитьПоЗавершении
	|			ТОГДА Док.ДатаОкончания
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаОкончания, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ОтсутствиеНаРаботе.Работники КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	ЗапроспоДокументу2Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник.Физлицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА Док.ДатаВозврата = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Док.ДатаВозврата
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаВозврата, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ВозвратНаРаботу.Работники КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Отсутствие на работе в управленческом учете. Обрабатывается документ " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОтсутствиеНаРаботе") Тогда
			ЗапросПоДокументу.Текст = ЗапросПоДокументу1Текст;
		Иначе
			ЗапросПоДокументу.Текст = ЗапросПоДокументу2Текст;
		КонецЕсли;
		
		ЗапросПоДокументу.УстановитьПараметр("Ссылка",	Выборка.Регистратор);
		
		НаборЗаписей = РегистрыСведений.ПериодыСостоянийРаботников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Регистратор;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоДокументу);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрПериодыСостоянийРаботниковОрганизаций()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыСостоянийРаботниковОрганизаций КАК Периоды
	|		ПО Док.Сотрудник = Периоды.Сотрудник
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаНачала = Периоды.ДатаНачала
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|	И Док.ПричинаОтсутствия <> ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыСостоянийРаботниковОрганизаций КАК Периоды
	|		ПО Док.Сотрудник = Периоды.Сотрудник
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаНачала = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|	И Док.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыСостоянийРаботниковОрганизаций КАК Периоды
	|		ПО Док.Сотрудник = Периоды.Сотрудник
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаНачала = Периоды.ДатаНачала
	|			И Док.ДатаОкончания = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыСостоянийРаботниковОрганизаций КАК Периоды
	|		ПО Док.Сотрудник = Периоды.Сотрудник
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаНачала = Периоды.ДатаНачала
	|			И Док.ДатаОкончания = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.ВозвратНаРаботуОрганизаций.РаботникиОрганизации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыСостоянийРаботниковОрганизаций КАК Периоды
	|		ПО Док.Сотрудник = Периоды.Сотрудник
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаВозврата = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу1Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА Док.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ Док.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Док.ПричинаОтсутствия <> ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаНачала, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	ЗапроспоДокументу2Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник КАК Сотрудник,
	|	Док.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Док.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИЛИ Док.НапомнитьПоЗавершении
	|			ТОГДА Док.ДатаОкончания
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаОкончания, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	ЗапроспоДокументу3Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник КАК Сотрудник,
	|	Док.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Док.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИЛИ Док.НапомнитьПоЗавершении
	|			ТОГДА Док.ДатаОкончания
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаОкончания, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	ЗапроспоДокументу4Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА Док.ДатаВозврата = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Док.ДатаВозврата
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаВозврата, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ВозвратНаРаботуОрганизаций.РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Отсутствие на работе в регламентированном учете. Обрабатывается документ " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОтсутствиеНаРаботеОрганизаций") Тогда
			ЗапросПоДокументу.Текст = ЗапросПоДокументу1Текст;
			
		ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОтпускаОрганизаций") Тогда
			ЗапросПоДокументу.Текст = ЗапросПоДокументу2Текст;
			
		ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.КомандировкиОрганизаций") Тогда
			ЗапросПоДокументу.Текст = ЗапросПоДокументу3Текст;
			
		Иначе
			ЗапросПоДокументу.Текст = ЗапросПоДокументу4Текст;
			
		КонецЕсли;
		
		ЗапросПоДокументу.УстановитьПараметр("Ссылка",	Выборка.Регистратор);
		
		НаборЗаписей = РегистрыСведений.ПериодыСостоянийРаботниковОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Регистратор;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоДокументу);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрыКонтроляПериодов()
	
	ЗаполнитьРегистрПериодыРаботыРаботников();
	ЗаполнитьРегистрПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы();
	ЗаполнитьРегистрПериодыРаботыРаботниковОрганизацийПоСовместительству();
	ЗаполнитьРегистрПериодыСостоянийРаботников();
	ЗаполнитьРегистрПериодыСостоянийРаботниковОрганизаций();
	
КонецПроцедуры

Процедура НачальноеЗаполнениеСправочникаДокументыУдостоверяющиеЛичность()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыУдостоверяющиеЛичность.Ссылка
	|ИЗ
	|	Справочник.ДокументыУдостоверяющиеЛичность КАК ДокументыУдостоверяющиеЛичность
	|ГДЕ
	|	ДокументыУдостоверяющиеЛичность.Предопределенный
	|	И ДокументыУдостоверяющиеЛичность.КодИМНС ПОДОБНО """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Макет = Справочники.ДокументыУдостоверяющиеЛичность.ПолучитьМакет("КлассификаторИМНС");
	
	Пока Выборка.Следующий() Цикл
		ИмяЭлемента = Справочники.ДокументыУдостоверяющиеЛичность.ПолучитьИмяПредопределенного(Выборка.Ссылка);
		Область = Макет.НайтиТекст(Прав(ИмяЭлемента, 2),, Макет.Область("C4"));
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.КодИМНС	= СокрЛП(Макет.Область(Область.Низ, 2, Область.Низ, 2).Текст);
		СпрОбъект.КодПФР	= СокрЛП(Макет.Область(Область.Низ, 3, Область.Низ, 3).Текст);
		СпрОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьСсылкиНаДокументыУдостоверяющиеЛичность()
	
	Запрос = Новый Запрос;
	ЗапросПоРегистру = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПаспортныеДанныеФизЛиц.ФизЛицо
	|ИЗ
	|	РегистрСведений.ПаспортныеДанныеФизЛиц КАК ПаспортныеДанныеФизЛиц
	|ГДЕ
	|	(НЕ ПаспортныеДанныеФизЛиц.ДокументВид.Предопределенный)";
	
	ЗапросПоРегистру.Текст =
	"ВЫБРАТЬ
	|	ПаспортныеДанныеФизЛиц.Период,
	|	ПаспортныеДанныеФизЛиц.ФизЛицо,
	|	ДокументыУдостоверяющиеЛичность.Ссылка КАК ДокументВид,
	|	ПаспортныеДанныеФизЛиц.ДокументСерия,
	|	ПаспортныеДанныеФизЛиц.ДокументНомер,
	|	ПаспортныеДанныеФизЛиц.ДокументДатаВыдачи,
	|	ВЫРАЗИТЬ(ПаспортныеДанныеФизЛиц.ДокументКемВыдан КАК СТРОКА(300)) КАК ДокументКемВыдан,
	|	ПаспортныеДанныеФизЛиц.ДокументКодПодразделения,
	|	ПаспортныеДанныеФизЛиц.ДатаРегистрацииПоМестуЖительства,
	|	ПаспортныеДанныеФизЛиц.ЛичныйНомер
	|ИЗ
	|	РегистрСведений.ПаспортныеДанныеФизЛиц КАК ПаспортныеДанныеФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДокументыУдостоверяющиеЛичность КАК ДокументыУдостоверяющиеЛичность
	|		ПО ПаспортныеДанныеФизЛиц.ДокументВид.КодИМНС = ДокументыУдостоверяющиеЛичность.КодИМНС
	|			И ((НЕ ПаспортныеДанныеФизЛиц.ДокументВид.Предопределенный))
	|			И (ДокументыУдостоверяющиеЛичность.Предопределенный)
	|ГДЕ
	|	(НЕ ПаспортныеДанныеФизЛиц.ДокументВид.Предопределенный)
	|	И ПаспортныеДанныеФизЛиц.ФизЛицо = &ФизЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Паспортные данные физических лиц. Обрабатывается набор записей " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ЗапросПоРегистру.УстановитьПараметр("Физлицо",	Выборка.Физлицо);
		
		НаборЗаписей = РегистрыСведений.ПаспортныеДанныеФизЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Физлицо.Установить(Выборка.Физлицо);
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоРегистру = ЗапросПоРегистру.Выполнить().Выбрать();
		
		Если ВыборкаПоРегистру.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоРегистру.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоРегистру);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОпросВопросы.Ссылка
	|ИЗ
	|	Документ.Опрос.Вопросы КАК ОпросВопросы
	|ГДЕ
	|	ОпросВопросы.ТиповойОтвет ССЫЛКА Справочник.ДокументыУдостоверяющиеЛичность
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОпросВопросы.Ссылка.Дата";
	
	ЗапросПоРегистру.Текст =
	"ВЫБРАТЬ
	|	ОпросВопросы.НомерСтроки КАК НомерСтроки,
	|	ДокументыУдостоверяющиеЛичность.Ссылка КАК ТиповойОтвет
	|ИЗ
	|	Документ.Опрос.Вопросы КАК ОпросВопросы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДокументыУдостоверяющиеЛичность КАК ДокументыУдостоверяющиеЛичность
	|		ПО ОпросВопросы.ТиповойОтвет.КодИМНС = ДокументыУдостоверяющиеЛичность.КодИМНС
	|			И (ОпросВопросы.ТиповойОтвет ССЫЛКА Справочник.ДокументыУдостоверяющиеЛичность)
	|			И ((НЕ ОпросВопросы.ТиповойОтвет.Предопределенный))
	|			И (ДокументыУдостоверяющиеЛичность.Предопределенный)
	|ГДЕ
	|	ОпросВопросы.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Документы ""Опрос"". Обрабатывается документ " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ЗапросПоРегистру.УстановитьПараметр("Ссылка",	Выборка.Ссылка);
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ВыборкаПоРегистру = ЗапросПоРегистру.Выполнить().Выбрать();
		
		Если ВыборкаПоРегистру.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоРегистру.Следующий() Цикл
			Строка = ДокументОбъект.Вопросы.Найти(ВыборкаПоРегистру.НомерСтроки, "НомерСтроки");
			
			ЗаполнитьЗначенияСвойств(Строка, ВыборкаПоРегистру);
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыУдостоверяющиеЛичность.Ссылка
	|ИЗ
	|	Справочник.ДокументыУдостоверяющиеЛичность КАК ДокументыУдостоверяющиеЛичность
	|ГДЕ
	|	(НЕ ДокументыУдостоверяющиеЛичность.Предопределенный)
	|	И (НЕ ДокументыУдостоверяющиеЛичность.ПометкаУдаления)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.4

Процедура ИзменитьУчетПособийСоцСтрахованияАвгуст2007()

	НаборЗаписей = РегистрыСведений.РазмерОграниченияПособияПоНетрудоспособности.СоздатьНаборЗаписей();

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Дата(2002, 1, 1);
	НоваяЗапись.Размер = 11700;
	НоваяЗапись.РазмерПоБеременности = 11700;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Дата(2005, 1, 1);
	НоваяЗапись.Размер = 12480;
	НоваяЗапись.РазмерПоБеременности = 12480;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Дата(2006, 1, 1);
	НоваяЗапись.Размер = 15000;
	НоваяЗапись.РазмерПоБеременности = 15000;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Дата(2007, 1, 1);
	НоваяЗапись.Размер = 16125;
	НоваяЗапись.РазмерПоБеременности = 16125;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Дата(2007, 9, 1);
	НоваяЗапись.Размер = 16125;
	НоваяЗапись.РазмерПоБеременности = 23400;

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Дата(2008, 1, 1);
	НоваяЗапись.Размер = 17250;
	НоваяЗапись.РазмерПоБеременности = 23400;

	НаборЗаписей.Записать();

КонецПроцедуры  //ИзменитьУчетПособийСоцСтрахованияИюнь2007

Процедура ЗаполнитьВидОперацииВНачисленииЗарплатыРаботникам()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникам.Ссылка
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникам КАК НачислениеЗарплатыРаботникам
	|ГДЕ
	|	НачислениеЗарплатыРаботникам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПустаяСсылка)";
	
	#Если Клиент Тогда
		ТекстСообщения = "Обработка документов Начисление зарплаты работникам (упр)";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаРегистраторов.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	Пока ВыборкаРегистраторов.Следующий() Цикл
		ДокументОбъект = ВыборкаРегистраторов.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет;
		ДокументОбъект.Записать();
		#Если Клиент Тогда
			Если Номер % 100 = 0 Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			КонецЕсли;
			Номер = Номер + 1;
		#КонецЕсли
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
КонецПроцедуры

Процедура ДозаполнитьРегистрыЗанятостиФизлиц()
	
	Запрос = Новый Запрос;
	ЗапросПоРегистру = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Рег.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК Рег
	|ГДЕ
	|	Рег.СостояниеЗавершения = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ПустаяСсылка)
	|	И Рег.Состояние <> ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Свободен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	ЗапросПоРегистру.Текст =
	"ВЫБРАТЬ
	|	Рег.УдалитьДатаОкончания КАК ПериодЗавершения,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Свободен) КАК СостояниеЗавершения,
	|	Рег.*
	|ИЗ
	|	РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК Рег
	|ГДЕ
	|	Рег.СостояниеЗавершения = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ПустаяСсылка)
	|	И Рег.Состояние <> ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Свободен)
	|	И Рег.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗапросПоРегистру.УстановитьПараметр("Регистратор", Выборка.Регистратор);
		
		НаборЗаписей = РегистрыСведений.СборДанныхДляПланированияЗанятостиФизлиц.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		ВыборкаПоРегистру = ЗапросПоРегистру.Выполнить().Выбрать();
		Пока ВыборкаПоРегистру.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоРегистру);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Рег.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК Рег
	|ГДЕ
	|	Рег.СостояниеЗавершения = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ПустаяСсылка)
	|	И Рег.Состояние <> ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Свободен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	ЗапросПоРегистру.Текст =
	"ВЫБРАТЬ
	|	Рег.УдалитьДатаОкончания КАК ПериодЗавершения,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Свободен) КАК СостояниеЗавершения,
	|	Рег.*
	|ИЗ
	|	РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК Рег
	|ГДЕ
	|	Рег.СостояниеЗавершения = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ПустаяСсылка)
	|	И Рег.Состояние <> ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Свободен)
	|	И Рег.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗапросПоРегистру.УстановитьПараметр("Регистратор", Выборка.Регистратор);
		
		НаборЗаписей = РегистрыСведений.СобытийныйПланЗанятостиФизлиц.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		ВыборкаПоРегистру = ЗапросПоРегистру.Выполнить().Выбрать();
		Пока ВыборкаПоРегистру.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоРегистру);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьНалогообложениеПоЕСН()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПустаяСсылка) КАК КодДоходаЕСН
	|ПОМЕСТИТЬ ВТПравилаНалогообложенияЕСНом
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.НулеваяСумма)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ),
	|	ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияЗаСчетФСС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет),
	|	ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияЗаСчетФСС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами),
	|	ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияЗаСчетФСС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам),
	|	ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияЗаСчетФСС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве),
	|	ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.НеОблагаетсяЦеликом)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ДивидендыАкционеров),
	|	ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ВыплатыЗаСчетПрибыли)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ДивидендыРаботников),
	|	ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ВыплатыЗаСчетПрибыли)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие),
	|	ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.НеОблагаетсяЦеликом)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневка),
	|	ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.НеОблагаетсяЦеликом)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДни),
	|	ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.НеОблагаетсяЦеликом)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.СохраняемыйЗаработокНаВремяТрудоустройства),
	|	ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.НеОблагаетсяЦеликом)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ДоговорПодряда),
	|	ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговораГПХ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.АвторскийДоговор),
	|	ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговораАвторские)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ЛицензионныйДоговор),
	|	ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.НеЯвляетсяОбъектом)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ВСвязиСоСмертью),
	|	ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияЗаСчетФСС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриУсыновленииРебенка),
	|	ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияЗаСчетФСС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриРожденииРебенка),
	|	ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияЗаСчетФСС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриПостановкеНаУчетВРанниеСрокиБеременности),
	|	ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияЗаСчетФСС)";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ПравилаНалогообложенияЕСНом.КодДоходаЕСН
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПравилаНалогообложенияЕСНом КАК ПравилаНалогообложенияЕСНом
	|		ПО ОсновныеНачисленияОрганизаций.Ссылка = ПравилаНалогообложенияЕСНом.Ссылка
	|			И ОсновныеНачисленияОрганизаций.КодДоходаЕСН <> ПравилаНалогообложенияЕСНом.КодДоходаЕСН
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ПравилаНалогообложенияЕСНом.КодДоходаЕСН
	|ИЗ
	|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПравилаНалогообложенияЕСНом КАК ПравилаНалогообложенияЕСНом
	|		ПО ОсновныеНачисленияОрганизаций.Ссылка = ПравилаНалогообложенияЕСНом.Ссылка
	|			И ОсновныеНачисленияОрганизаций.КодДоходаЕСН <> ПравилаНалогообложенияЕСНом.КодДоходаЕСН";
	
	#Если Клиент Тогда
		ТекстСообщения = "Обработка видов расчета - основных и дополнительных начислений";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработаны коды ЕСН");
	#КонецЕсли
	
КонецПроцедуры

Процедура ИсправитьУстаревшиеВР()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДополнительныеНачисленияОрганизаций.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.СевернаяНадбавка)
	|			ТОГДА ""Районный коэффициент""
	|		КОГДА ДополнительныеНачисленияОрганизаций.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.РайонныйКоэффициент)
	|			ТОГДА ""Северная надбавка""
	|		ИНАЧЕ ДополнительныеНачисленияОрганизаций.Наименование
	|	КОНЕЦ КАК Наименование,
	|	ДополнительныеНачисленияОрганизаций.Ссылка
	|ИЗ
	|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
	|ГДЕ
	|	ДополнительныеНачисленияОрганизаций.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.СевернаяНадбавка), ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.РайонныйКоэффициент))
	|	И ДополнительныеНачисленияОрганизаций.Наименование = ""-не используется-""";
	
	// сделаем виды расчетов "не используемыми"
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры // ИсправитьУстаревшиеВР

Процедура ОбновлениеДокументаСдельныйНаряд()
	
	// Документы со способом ввода данных "по дням" или "за день"
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ Различные
	|	СдельныйНарядИсполнители.Ссылка
	|ИЗ
	|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	|ГДЕ
	|	СдельныйНарядИсполнители.Ссылка.СпособВводаДанных <> ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод)
	|	И СдельныйНарядИсполнители.Ссылка.УчитыватьОтработанноеВремя
	|	И (
	|	СдельныйНарядИсполнители.ПервыйЧасов1 > 0 И СдельныйНарядИсполнители.ПервыйВидВремени1 = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)";
	
	Для ИндексДня = 2 По 31 Цикл
		
		СтрИндексДня = Строка(ИндексДня);
		Запрос.Текст = Запрос.Текст + "
		|ИЛИ СдельныйНарядИсполнители.ПервыйЧасов" + СтрИндексДня + " > 0 И СдельныйНарядИсполнители.ПервыйВидВремени" + СтрИндексДня + " = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)"
		
	КонецЦикла;

	Запрос.Текст = Запрос.Текст + ")";
	
	#Если Клиент Тогда
		ТекстСообщения = "Обработка документов ""Сдельный наряд на выполненные работы"" (часть 1)";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	
	КлассификаторЯвка = Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаЗапроса.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		ДокументОбъект = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
		Для каждого СтрокаТЧИсполнители из ДокументОбъект.Исполнители Цикл
			
			Для ИндексДня = 1 По 31 Цикл
				
				Если СтрокаТЧИсполнители["ПервыйЧасов" + ИндексДня] > 0 И СтрокаТЧИсполнители["ПервыйВидВремени" + ИндексДня].Пустая() Тогда
					СтрокаТЧИсполнители["ПервыйВидВремени" + ИндексДня] = КлассификаторЯвка
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЦикла;
		
		ДокументОбъект.Записать();
		
		#Если Клиент Тогда
			Если Номер % 50 = 0 Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			КонецЕсли;
			Номер = Номер + 1;
		#КонецЕсли
		
	КонецЦикла; 
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
	// Документы со способом ввода данных "Сводно"
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СдельныйНарядИсполнители.Ссылка
	|ИЗ
	|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	|ГДЕ
	|	СдельныйНарядИсполнители.Ссылка.СпособВводаДанных = ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод)
	|	И СдельныйНарядИсполнители.Ссылка.УчитыватьОтработанноеВремя
	|	И СдельныйНарядИсполнители.ВидВремени1 = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)";
	
	#Если Клиент Тогда
		ТекстСообщения = "Обработка документов ""Сдельный наряд на выполненные работы"" (часть 2)";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаЗапроса.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		ДокументОбъект = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
		Для каждого СтрокаТЧИсполнители из ДокументОбъект.Исполнители Цикл
			
			Если СтрокаТЧИсполнители.ВидВремени1.Пустая() Тогда
				
				СтрокаТЧИсполнители.ВидВремени1	= КлассификаторЯвка;
				СтрокаТЧИсполнители.Часов1		= СтрокаТЧИсполнители.ОтработаноЧасов;
				СтрокаТЧИсполнители.Дней1		= СтрокаТЧИсполнители.ОтработаноДней;
				
			КонецЕсли; 
			
		КонецЦикла;
		
		ДокументОбъект.Записать();
		
		#Если Клиент Тогда
			Если Номер % 50 = 0 Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			КонецЕсли;
			Номер = Номер + 1;
		#КонецЕсли
		
	КонецЦикла;
	
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
КонецПроцедуры

#Если Клиент Тогда

// Процедура создает две настройки отчетов движения работников организации
//
Процедура СоздатьНастройкиДляОтчетовДвижениеРаботников()
	
	НастройкаДвиженияРаботников = Справочники.СохраненныеНастройки.НайтиПоНаименованию("Список кадровых изменений работников", истина,, Справочники.ГруппыПользователей.ВсеПользователи);
	
	Если НастройкаДвиженияРаботников.Пустая()  тогда
		ЭлементНастройки = Справочники.СохраненныеНастройки.СоздатьЭлемент();
	Иначе
		ЭлементНастройки = НастройкаДвиженияРаботников.ПолучитьОбъект();
	КонецЕсли;
	ЭлементНастройки.Владелец = Справочники.ГруппыПользователей.ВсеПользователи;
	ЭлементНастройки.Наименование        = "Список кадровых изменений работников";
	ЭлементНастройки.НастраиваемыйОбъект = "ОтчетОбъект.ДвижениеРаботников";
	ЭлементНастройки.ТипНастройки    = Перечисления.ТипыНастроек.НастройкиОтчета;
	ЭлементНастройки.СохранятьПериод = ложь;
	ЭлементНастройки.Записать();
	
	Отчет = Отчеты.ДвижениеРаботников.Создать();
	МакетНовыхНастроек = Отчет.ПолучитьМакет("СписокПеремещений");
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(МакетНовыхНастроек.НастройкиПоУмолчанию);
	
	СтруктураПараметров = Новый Структура;
	Для каждого Реквизит Из Отчет.Метаданные().Реквизиты Цикл
		СтруктураПараметров.Вставить(Реквизит.Имя, Отчет[Реквизит.Имя])
	КонецЦикла;
	СтруктураПараметров.Вставить("НастройкиКомпоновщика", Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	
	ОбъектСохраненнаяНастройка = ЭлементНастройки;
	
	ОбъектСохраненнаяНастройка.ХранилищеНастроек = Новый ХранилищеЗначения(СтруктураПараметров);
	
	Попытка
		ОбъектСохраненнаяНастройка.Записать();
	Исключение
		Сообщить("Настройка формы не записана:" + Символы.ПС + "- " + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
		
	
	НастройкаДвиженияРаботников = Справочники.СохраненныеНастройки.НайтиПоНаименованию("Список кадровых изменений работников организации",истина,, Справочники.ГруппыПользователей.ВсеПользователи);
	
	Если НастройкаДвиженияРаботников.Пустая() тогда
		ЭлементНастройки          = Справочники.СохраненныеНастройки.СоздатьЭлемент();
	Иначе
		ЭлементНастройки = НастройкаДвиженияРаботников.ПолучитьОбъект();
	КонецЕсли;
	ЭлементНастройки.Владелец = Справочники.ГруппыПользователей.ВсеПользователи;
	ЭлементНастройки.Наименование        = "Список кадровых изменений работников организации";
	ЭлементНастройки.НастраиваемыйОбъект = "ОтчетОбъект.ДвижениеРаботниковОрганизаций";
	ЭлементНастройки.ТипНастройки 		 = Перечисления.ТипыНастроек.НастройкиОтчета;
	ЭлементНастройки.СохранятьПериод 	 = ложь;
	ЭлементНастройки.Записать();
	
	Отчет = Отчеты.ДвижениеРаботниковОрганизаций.Создать();
	МакетНовыхНастроек = Отчет.ПолучитьМакет("СписокПеремещений");
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(МакетНовыхНастроек.НастройкиПоУмолчанию);
	
	СтруктураПараметров = Новый Структура;
	Для каждого Реквизит Из Отчет.Метаданные().Реквизиты Цикл
		СтруктураПараметров.Вставить(Реквизит.Имя, Отчет[Реквизит.Имя])
	КонецЦикла;
	СтруктураПараметров.Вставить("НастройкиКомпоновщика", Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	
	ОбъектСохраненнаяНастройка = ЭлементНастройки;
	
	ОбъектСохраненнаяНастройка.ХранилищеНастроек = Новый ХранилищеЗначения(СтруктураПараметров);
	
	Попытка
		ОбъектСохраненнаяНастройка.Записать();
	Исключение
		Сообщить("Настройка формы не записана:" + Символы.ПС + "- " + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;

	
КонецПроцедуры //СоздатьНастройкиДляОтчетовДвижениеРаботников()

Процедура СоздатьНастройкиДляСписковИмениников()
	
	НастройкаДвиженияРаботников = Справочники.СохраненныеНастройки.НайтиПоНаименованию("Список именинников организаций...", истина,, Справочники.ГруппыПользователей.ВсеПользователи);
	
	Если НастройкаДвиженияРаботников.Пустая() тогда
		ЭлементНастройки = Справочники.СохраненныеНастройки.СоздатьЭлемент();
	Иначе 
		ЭлементНастройки = НастройкаДвиженияРаботников.ПолучитьОбъект();
	КонецЕсли;
	ЭлементНастройки.Владелец = Справочники.ГруппыПользователей.ВсеПользователи;
	ЭлементНастройки.Наименование        = "Список именинников организаций...";
	ЭлементНастройки.НастраиваемыйОбъект = "ОтчетОбъект.СпискиРаботниковОрганизаций";
	ЭлементНастройки.ТипНастройки 		 = Перечисления.ТипыНастроек.НастройкиОтчета;
	ЭлементНастройки.СохранятьПериод 	 = ложь;
	ЭлементНастройки.Записать();
	
	Отчет = Отчеты.СпискиРаботниковОрганизаций.Создать();
	
	Настройка = Отчет.КомпоновщикНастроек.Настройки;
	
	// создадим программно структуру отчета и добавим выбранные поля
	
	Настройка.Выбор.Элементы.Очистить();
	
	ЭлементВыбранногоПоля      = Настройка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")); 
	ЭлементВыбранногоПоля.Поле = Новый ПолеКомпоновкиДанных("ДанныеОФизЛице.ДеньРождения");
	ЭлементВыбранногоПоля.Использование = Истина;
	
	ЭлементВыбранногоПоля      = Настройка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")); 
	ЭлементВыбранногоПоля.Поле = Новый ПолеКомпоновкиДанных("Сотрудник");
	ЭлементВыбранногоПоля.Использование = Истина;
	
	ЭлементВыбранногоПоля      = Настройка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")); 
	ЭлементВыбранногоПоля.Поле = Новый ПолеКомпоновкиДанных("ДанныеОФизЛице.ФизЛицоВозраст");
	ЭлементВыбранногоПоля.Использование = Истина;
	
	ЭлементВыбранногоПоля      = Настройка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")); 
	ЭлементВыбранногоПоля.Поле = Новый ПолеКомпоновкиДанных("ДанныеОФизЛице.ОписаниеСтажа");
	ЭлементВыбранногоПоля.Использование = Истина;
	
	ЭлементВыбранногоПоля      = Настройка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")); 
	ЭлементВыбранногоПоля.Поле = Новый ПолеКомпоновкиДанных("ДанныеОРаботнике.Должность");
	ЭлементВыбранногоПоля.Использование = Истина;
	
	ЭлементВыбранногоПоля      = Настройка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")); 
	ЭлементВыбранногоПоля.Поле = Новый ПолеКомпоновкиДанных("ДанныеОРаботнике.ПодразделениеОрганизации");
	ЭлементВыбранногоПоля.Использование = Истина;
	
	ГруппаОтбора = Настройка.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	//ГруппаОтбора.Представление = "Выводить сотрудников с общим стажем";
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	
	ЭлементОтбора                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДанныеОФизЛице.Стаж.ВидСтажа");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВидыТрудовогоСтажа.ОбщийТрудовойСтаж;
	
	ЭлементОтбора                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДанныеОФизЛице.Стаж.ВидСтажа");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	СтруктураПараметров = Новый Структура;
	Для каждого Реквизит Из Отчет.Метаданные().Реквизиты Цикл
		СтруктураПараметров.Вставить(Реквизит.Имя, Отчет[Реквизит.Имя])
	КонецЦикла;
	СтруктураПараметров.Вставить("НастройкиКомпоновщика", Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	
	ОбъектСохраненнаяНастройка = ЭлементНастройки;
	
	ОбъектСохраненнаяНастройка.ХранилищеНастроек = Новый ХранилищеЗначения(СтруктураПараметров);
	
	Попытка
		ОбъектСохраненнаяНастройка.Записать();
	Исключение
		Сообщить("Настройка формы не записана:" + Символы.ПС + "- " + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
	
	НастройкаДвиженияРаботников = Справочники.СохраненныеНастройки.НайтиПоНаименованию("Список именинников...", истина,, Справочники.ГруппыПользователей.ВсеПользователи);
	
	Если НастройкаДвиженияРаботников.Пустая() тогда
		ЭлементНастройки = Справочники.СохраненныеНастройки.СоздатьЭлемент();
	Иначе 
		ЭлементНастройки = НастройкаДвиженияРаботников.ПолучитьОбъект();
	КонецЕсли;
	ЭлементНастройки.Владелец = Справочники.ГруппыПользователей.ВсеПользователи;
	ЭлементНастройки.Наименование        = "Список именинников...";
	ЭлементНастройки.НастраиваемыйОбъект = "ОтчетОбъект.СпискиРаботников";
	ЭлементНастройки.ТипНастройки 		 = Перечисления.ТипыНастроек.НастройкиОтчета;
	ЭлементНастройки.СохранятьПериод 	 = ложь;
	ЭлементНастройки.Записать();
	
	Отчет = Отчеты.СпискиРаботников.Создать();
	
	Настройка = Отчет.КомпоновщикНастроек.Настройки;
	
	// создадим программно структуру отчета и добавим выбранные поля
	
	Настройка.Выбор.Элементы.Очистить();                                           
	
	ЭлементВыбранногоПоля      = Настройка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")); 
	ЭлементВыбранногоПоля.Поле = Новый ПолеКомпоновкиДанных("ДанныеФизлица.ДеньРождения");
	ЭлементВыбранногоПоля.Использование = Истина;
	
	ЭлементВыбранногоПоля      = Настройка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")); 
	ЭлементВыбранногоПоля.Поле = Новый ПолеКомпоновкиДанных("Сотрудник");
	ЭлементВыбранногоПоля.Использование = Истина;
	
	ЭлементВыбранногоПоля      = Настройка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")); 
	ЭлементВыбранногоПоля.Поле = Новый ПолеКомпоновкиДанных("ДанныеФизлица.ФизЛицоВозраст");
	ЭлементВыбранногоПоля.Использование = Истина;
	
	ЭлементВыбранногоПоля      = Настройка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")); 
	ЭлементВыбранногоПоля.Поле = Новый ПолеКомпоновкиДанных("ДанныеОРаботе.ДатаПриема");
	ЭлементВыбранногоПоля.Использование = Истина;
	
	ЭлементВыбранногоПоля      = Настройка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")); 
	ЭлементВыбранногоПоля.Поле = Новый ПолеКомпоновкиДанных("ДанныеОРаботе.Должность");
	ЭлементВыбранногоПоля.Использование = Истина;
	
	ЭлементВыбранногоПоля      = Настройка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")); 
	ЭлементВыбранногоПоля.Поле = Новый ПолеКомпоновкиДанных("ДанныеОРаботе.Подразделение");
	ЭлементВыбранногоПоля.Использование = Истина;
	
	
	СтруктураПараметров = Новый Структура;
	Для каждого Реквизит Из Отчет.Метаданные().Реквизиты Цикл
		СтруктураПараметров.Вставить(Реквизит.Имя, Отчет[Реквизит.Имя])
	КонецЦикла;
	СтруктураПараметров.Вставить("НастройкиКомпоновщика", Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	
	ОбъектСохраненнаяНастройка = ЭлементНастройки;
	
	ОбъектСохраненнаяНастройка.ХранилищеНастроек = Новый ХранилищеЗначения(СтруктураПараметров);
	
	Попытка
		ОбъектСохраненнаяНастройка.Записать();
	Исключение
		Сообщить("Настройка формы не записана:" + Символы.ПС + "- " + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.5

Процедура КорректировкаДвиженийДокументовНачисленияПоБольничным()

   	Запрос = Новый Запрос;
   	Запрос.Текст = 
   	"ВЫБРАТЬ РАЗЛИЧНЫЕ
   	|	ВзаиморасчетыСРаботникамиОрганизаций.Регистратор,
   	|	ВЫРАЗИТЬ(ВзаиморасчетыСРаботникамиОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).Организация КАК Организация
   	|ИЗ
   	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизаций
   	|ГДЕ
   	|	ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.НачислениеПоБольничномуЛисту
   	|	И ВзаиморасчетыСРаботникамиОрганизаций.Организация <> ВЫРАЗИТЬ(ВзаиморасчетыСРаботникамиОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).Организация";
	#Если Клиент Тогда
		ТекстСообщения = "Обработка документов Начисление по больничным листам, часть I";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаРегистраторов.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	НаборЗаписей = РегистрыНакопления.ВзаиморасчетыСРаботникамиОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Отбор.Регистратор.Использование = Истина;
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Значение = ВыборкаРегистраторов.Регистратор;
		НаборЗаписей.Прочитать();
		Для каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаполнитьЗначенияСвойств(ЗаписьНабора,ВыборкаРегистраторов,"Организация");
		КонецЦикла; 
		НаборЗаписей.Записать();
		#Если Клиент Тогда
			Если Номер % 10 = 0 Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			КонецЕсли;
			Номер = Номер + 1;
		#КонецЕсли
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
   
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.6

Процедура ВосстановитьУникальностьПерерасчетов()

	Запрос = Новый Запрос;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Перерасчеты.ОбъектПерерасчета
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	Перерасчеты.ОбъектПерерасчета,
	|	Перерасчеты.ВидРасчета,
	|	Перерасчеты.ФизЛицо,
	|	Перерасчеты.Организация
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) > 1";
	
	Запрос.Выполнить();
	#Если Клиент Тогда
		ТекстСообщения = "Обработка перерасчетов, часть I";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	Выборка = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = Выборка.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	НаборЗаписейПерерасчета = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = Выборка.ОбъектПерерасчета;
		НаборЗаписейПерерасчета.Прочитать();
	    ВременнаяТЗ = НаборЗаписейПерерасчета.Выгрузить();
		ВременнаяТЗ.Свернуть("ОбъектПерерасчета,ВидРасчета,ФизЛицо,Организация");
		НаборЗаписейПерерасчета.Очистить();
		Для каждого СтрокаТЗ Из ВременнаяТЗ Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписейПерерасчета.Добавить(),СтрокаТЗ)
		КонецЦикла;
		НаборЗаписейПерерасчета.Записать();
		#Если Клиент Тогда
			Если Номер % 10 = 0 Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			КонецЕсли;
			Номер = Номер + 1;
		#КонецЕсли
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Перерасчеты.ОбъектПерерасчета
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	Перерасчеты.ОбъектПерерасчета,
	|	Перерасчеты.ВидРасчета,
	|	Перерасчеты.ФизЛицо,
	|	Перерасчеты.Организация
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) > 1";
	
	Запрос.Выполнить();
	#Если Клиент Тогда
		ТекстСообщения = "Обработка перерасчетов, часть II";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	Выборка = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = Выборка.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	НаборЗаписейПерерасчета = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = Выборка.ОбъектПерерасчета;
		НаборЗаписейПерерасчета.Прочитать();
	    ВременнаяТЗ = НаборЗаписейПерерасчета.Выгрузить();
		ВременнаяТЗ.Свернуть("ОбъектПерерасчета,ВидРасчета,ФизЛицо,Организация");
		НаборЗаписейПерерасчета.Очистить();
		Для каждого СтрокаТЗ Из ВременнаяТЗ Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписейПерерасчета.Добавить(),СтрокаТЗ)
		КонецЦикла;
		НаборЗаписейПерерасчета.Записать();
		#Если Клиент Тогда
			Если Номер % 10 = 0 Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			КонецЕсли;
			Номер = Номер + 1;
		#КонецЕсли
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Перерасчеты.ОбъектПерерасчета
	|ИЗ
	|	РегистрРасчета.РасчетСреднегоЗаработка.ПерерасчетСреднегоЗаработка КАК Перерасчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	Перерасчеты.ОбъектПерерасчета,
	|	Перерасчеты.ВидРасчета,
	|	Перерасчеты.ФизЛицо,
	|	Перерасчеты.Организация
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) > 1";
	
	Запрос.Выполнить();
	#Если Клиент Тогда
		ТекстСообщения = "Обработка перерасчетов, часть III";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	Выборка = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = Выборка.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	НаборЗаписейПерерасчета = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = Выборка.ОбъектПерерасчета;
		НаборЗаписейПерерасчета.Прочитать();
	    ВременнаяТЗ = НаборЗаписейПерерасчета.Выгрузить();
		ВременнаяТЗ.Свернуть("ОбъектПерерасчета,ВидРасчета,ФизЛицо,Организация");
		НаборЗаписейПерерасчета.Очистить();
		Для каждого СтрокаТЗ Из ВременнаяТЗ Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписейПерерасчета.Добавить(),СтрокаТЗ)
		КонецЦикла;
		НаборЗаписейПерерасчета.Записать();
		#Если Клиент Тогда
			Если Номер % 10 = 0 Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			КонецЕсли;
			Номер = Номер + 1;
		#КонецЕсли
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.7

Процедура ИзменитьРасчетОтпусков2008()

	// обработка ПВР СреднийЗаработок
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Годовые премии, полностью учитываемые (до 6.1.2008)";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Годовые премии, полностью учитываемые (до 1.1.2007)";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Годовые премии, полностью учитываемые (начислено пропорц. отраб. времени)";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Годовые премии, частично учитываемые (до 6.1.2008)";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Годовые премии, частично учитываемые (до 1.1.2007)";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Годовые премии, частично учитываемые (начисленные фиксированной суммой)";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Основной заработок (до 6.1.2008)";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Основной заработок (до 1.1.2007)";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Основной заработок";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Премии, полностью учитываемые (до 6.1.2008)";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Премии, полностью учитываемые (до 1.1.2007)";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Премии";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Премии, частично учитываемые (до 6.1.2008)";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Премии, частично учитываемые (до 1.1.2007)";
	ПВРОбъект.Записать();
	ПВРОбъект = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий.ПолучитьОбъект();
	ПВРОбъект.ОбменДанными.Загрузка = Истина;
	ПВРОбъект.Наименование = "Премии, частично учитываемые (начисленные фиксированной суммой)";
	ПВРОбъект.Записать();
	
	Запрос = Новый Запрос;
	ВидыРасчета = Новый Массив;
	ВидыРасчета.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии);
	ВидыРасчета.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
	ВидыРасчета.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
	ВидыРасчета.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии);
	ВидыРасчета.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	Запрос.УстановитьПараметр("СтарыеВидыРасчета", ВидыРасчета);
	
	ВидыРасчета = Новый Массив;
	ВидыРасчета.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые);
	ВидыРасчета.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые);
	ВидыРасчета.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые);
	ВидыРасчета.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые);
	ВидыРасчета.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые);
	Запрос.УстановитьПараметр("НовыеВидыРасчета", ВидыРасчета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""БазовыеВидыРасчета"" КАК ИмяТаблицы,
	|	СреднийЗаработокБазовыеВидыРасчета.ВидРасчета,
	|	ВЫБОР
	|		КОГДА СреднийЗаработокБазовыеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые)
	|		КОГДА СреднийЗаработокБазовыеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиям)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые)
	|		КОГДА СреднийЗаработокБазовыеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработку)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые)
	|		КОГДА СреднийЗаработокБазовыеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые)
	|		КОГДА СреднийЗаработокБазовыеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиям)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые)
	|		ИНАЧЕ СреднийЗаработокБазовыеВидыРасчета.Ссылка
	|	КОНЕЦ КАК ПВР
	|ИЗ
	|	ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК НовыеБазовыеВидыРасчета
	|		ПО (НовыеБазовыеВидыРасчета.Ссылка В (&НовыеВидыРасчета))
	|			И (ВЫБОР
	|				КОГДА СреднийЗаработокБазовыеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые)
	|				КОГДА СреднийЗаработокБазовыеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиям)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые)
	|				КОГДА СреднийЗаработокБазовыеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработку)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые)
	|				КОГДА СреднийЗаработокБазовыеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые)
	|				КОГДА СреднийЗаработокБазовыеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиям)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые)
	|				ИНАЧЕ СреднийЗаработокБазовыеВидыРасчета.Ссылка
	|			КОНЕЦ = НовыеБазовыеВидыРасчета.Ссылка)
	|ГДЕ
	|	СреднийЗаработокБазовыеВидыРасчета.Ссылка В(&СтарыеВидыРасчета)
	|	И НовыеБазовыеВидыРасчета.Ссылка ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ВедущиеВидыРасчета"",
	|	СреднийЗаработокВедущиеВидыРасчета.ВидРасчета,
	|	ВЫБОР
	|		КОГДА СреднийЗаработокВедущиеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые)
	|		КОГДА СреднийЗаработокВедущиеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиям)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые)
	|		КОГДА СреднийЗаработокВедущиеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработку)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые)
	|		КОГДА СреднийЗаработокВедущиеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые)
	|		КОГДА СреднийЗаработокВедущиеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиям)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые)
	|		ИНАЧЕ СреднийЗаработокВедущиеВидыРасчета.Ссылка
	|	КОНЕЦ
	|ИЗ
	|	ПланВидовРасчета.СреднийЗаработок.ВедущиеВидыРасчета КАК СреднийЗаработокВедущиеВидыРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.ВедущиеВидыРасчета КАК НовыеВедущиеВидыРасчета
	|		ПО (НовыеВедущиеВидыРасчета.Ссылка В (&НовыеВидыРасчета))
	|			И (ВЫБОР
	|				КОГДА СреднийЗаработокВедущиеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые)
	|				КОГДА СреднийЗаработокВедущиеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиям)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые)
	|				КОГДА СреднийЗаработокВедущиеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработку)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые)
	|				КОГДА СреднийЗаработокВедущиеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые)
	|				КОГДА СреднийЗаработокВедущиеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиям)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые)
	|				ИНАЧЕ СреднийЗаработокВедущиеВидыРасчета.Ссылка
	|			КОНЕЦ = НовыеВедущиеВидыРасчета.Ссылка)
	|ГДЕ
	|	СреднийЗаработокВедущиеВидыРасчета.Ссылка В(&СтарыеВидыРасчета)
	|	И НовыеВедущиеВидыРасчета.Ссылка ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПВР,
	|	ИмяТаблицы";
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("ПВР") Цикл
		ПВРОбъект = ВыборкаРегистраторов.ПВР.ПолучитьОбъект();
		ПВРОбъект.ОбменДанными.Загрузка = Истина;
		Пока ВыборкаРегистраторов.Следующий() Цикл
			Если ВыборкаРегистраторов.ИмяТаблицы = "БазовыеВидыРасчета" Тогда
				ЗаполнитьЗначенияСвойств(ПВРОбъект.БазовыеВидыРасчета.Добавить(),ВыборкаРегистраторов)	
			Иначе
				ЗаполнитьЗначенияСвойств(ПВРОбъект.ВедущиеВидыРасчета.Добавить(),ВыборкаРегистраторов)	
			КонецЕсли;
		КонецЦикла;
		ПВРОбъект.Записать();
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетСреднегоЗаработка.Регистратор КАК Регистратор,
	|	РасчетСреднегоЗаработка.ВидРасчета КАК ВидРасчета
	|ПОМЕСТИТЬ ВТИсправляемыеДокументы
	|ИЗ
	|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеСреднего.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.НачислениеОтпускаРаботникамОрганизаций.РасчетСреднегоПоКалендарным КАК ДанныеСреднего
	|		ГДЕ
	|			ДанныеСреднего.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии))
	|			И ДанныеСреднего.Результат <> 0
	|			И ГОД(ДанныеСреднего.БазовыйПериодНачало) = ГОД(ДанныеСреднего.БазовыйПериодКонец)
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеСреднего.Ссылка
	|		ИЗ
	|			Документ.НачислениеОтпускаРаботникамОрганизаций.РасчетСреднегоПоШестидневке КАК ДанныеСреднего
	|		ГДЕ
	|			ДанныеСреднего.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии))
	|			И ДанныеСреднего.Результат <> 0
	|			И ГОД(ДанныеСреднего.БазовыйПериодНачало) = ГОД(ДанныеСреднего.БазовыйПериодКонец)
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеСреднего.Ссылка
	|		ИЗ
	|			Документ.РасчетПриУвольненииРаботникаОрганизаций.РасчетСреднего КАК ДанныеСреднего
	|		ГДЕ
	|			ДанныеСреднего.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии))
	|			И ДанныеСреднего.Результат <> 0
	|			И ГОД(ДанныеСреднего.БазовыйПериодНачало) = ГОД(ДанныеСреднего.БазовыйПериодКонец)
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеСреднего.Ссылка
	|		ИЗ
	|			Документ.РасчетПриУвольненииРаботникаОрганизаций.РасчетСреднегоДляОтпуска КАК ДанныеСреднего
	|		ГДЕ
	|			ДанныеСреднего.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии))
	|			И ДанныеСреднего.Результат <> 0
	|			И ГОД(ДанныеСреднего.БазовыйПериодНачало) = ГОД(ДанныеСреднего.БазовыйПериодКонец)) КАК ДанныеДокументов
	|		ПО РасчетСреднегоЗаработка.Регистратор = ДанныеДокументов.Ссылка
	|ГДЕ
	|	РасчетСреднегоЗаработка.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии))
	|	И РасчетСреднегоЗаработка.Результат <> 0
	|	И (РасчетСреднегоЗаработка.Регистратор ССЫЛКА Документ.НачислениеОтпускаРаботникамОрганизаций
	|			ИЛИ РасчетСреднегоЗаработка.Регистратор ССЫЛКА Документ.РасчетПриУвольненииРаботникаОрганизаций)
	|	И ДанныеДокументов.Ссылка ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетСреднегоЗаработка.Регистратор,
	|	РасчетСреднегоЗаработка.ВидРасчета
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка) = 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ВидРасчета";
	Результат = Запрос.Выполнить().Выгрузить(); 
	КоличествоДокументов = Результат[0].Количество;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Регистратор,
	|	ДанныеДокументов.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
	|	ДанныеДокументов.НомерСтроки,
	|	ДанныеРегистра.ДатаНачалаРасчетногоПериода КАК БазовыйПериодНачало,
	|	ДанныеРегистра.ДатаОкончанияРасчетногоПериода КАК БазовыйПериодКонец
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеСреднего.НомерСтроки КАК НомерСтроки,
	|		ДанныеСреднего.ВидРасчета КАК ВидРасчета,
	|		ДанныеСреднего.Ссылка КАК Ссылка,
	|		""РасчетСреднегоПоКалендарным"" КАК ИмяТабличнойЧасти,
	|		ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням) КАК СпособРасчета
	|	ИЗ
	|		Документ.НачислениеОтпускаРаботникамОрганизаций.РасчетСреднегоПоКалендарным КАК ДанныеСреднего
	|	ГДЕ
	|		(ДанныеСреднего.ВидРасчета, ДанныеСреднего.Ссылка) В (ВЫБРАТЬ ВидРасчета,Регистратор ИЗ ВТИсправляемыеДокументы КАК Документы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеСреднего.НомерСтроки,
	|		ДанныеСреднего.ВидРасчета,
	|		ДанныеСреднего.Ссылка,
	|		""РасчетСреднегоПоШестидневке"",
	|		ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)
	|	ИЗ
	|		Документ.НачислениеОтпускаРаботникамОрганизаций.РасчетСреднегоПоШестидневке КАК ДанныеСреднего
	|	ГДЕ
	|		(ДанныеСреднего.ВидРасчета, ДанныеСреднего.Ссылка) В (ВЫБРАТЬ ВидРасчета,Регистратор ИЗ ВТИсправляемыеДокументы КАК Документы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеСреднего.НомерСтроки,
	|		ДанныеСреднего.ВидРасчета,
	|		ДанныеСреднего.Ссылка,
	|		""РасчетСреднего"",
	|		ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)
	|	ИЗ
	|		Документ.РасчетПриУвольненииРаботникаОрганизаций.РасчетСреднего КАК ДанныеСреднего
	|	ГДЕ
	|		(ДанныеСреднего.ВидРасчета, ДанныеСреднего.Ссылка) В (ВЫБРАТЬ ВидРасчета,Регистратор ИЗ ВТИсправляемыеДокументы КАК Документы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеСреднего.НомерСтроки,
	|		ДанныеСреднего.ВидРасчета,
	|		ДанныеСреднего.Ссылка,
	|		""РасчетСреднегоДляОтпуска"",
	|		ВЫБОР
	|			КОГДА ДанныеСреднего.Ссылка.ПорядокРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)
	|		КОНЕЦ
	|	ИЗ
	|		Документ.РасчетПриУвольненииРаботникаОрганизаций.РасчетСреднегоДляОтпуска КАК ДанныеСреднего
	|	ГДЕ
	|		(ДанныеСреднего.ВидРасчета, ДанныеСреднего.Ссылка) В (ВЫБРАТЬ ВидРасчета,Регистратор ИЗ ВТИсправляемыеДокументы КАК Документы)) КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			РасчетСреднегоЗаработка.Регистратор КАК Регистратор,
	|			РасчетСреднегоЗаработка.ВидРасчета КАК ВидРасчета,
	|			РасчетСреднегоЗаработка.СпособРасчета КАК СпособРасчета,
	|			РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода КАК ДатаНачалаРасчетногоПериода,
	|			РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода КАК ДатаОкончанияРасчетногоПериода
	|		ИЗ
	|			РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|		ГДЕ
	|			(РасчетСреднегоЗаработка.ВидРасчета,РасчетСреднегоЗаработка.Регистратор) В (ВЫБРАТЬ ВидРасчета,Регистратор ИЗ ВТИсправляемыеДокументы КАК Документы)
	|			И РасчетСреднегоЗаработка.Результат <> 0) КАК ДанныеРегистра
	|		ПО ДанныеДокументов.Ссылка = ДанныеРегистра.Регистратор
	|			И ДанныеДокументов.СпособРасчета = ДанныеРегистра.СпособРасчета
	|			И ДанныеДокументов.ВидРасчета = ДанныеРегистра.ВидРасчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	ИмяТабличнойЧасти";
	
	Если КоличествоДокументов <> 0 Тогда
		#Если Клиент Тогда
			ТекстСообщения = "Обработка документов выплаты отпускных, часть I";
			Состояние(ТекстСообщения + ": подготовка данных ...");
		#КонецЕсли
		ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
		#Если Клиент Тогда
			ВсегоДоков = ВыборкаРегистраторов.Количество();
			Номер = 1;
			Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
		#КонецЕсли
		Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("Регистратор") Цикл
			ДокументОбъект = ВыборкаРегистраторов.Регистратор.ПолучитьОбъект();
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("ИмяТабличнойЧасти") Цикл
				ТабличнаяЧасть = ДокументОбъект[ВыборкаРегистраторов.ИмяТабличнойЧасти];
				Пока ВыборкаРегистраторов.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ТабличнаяЧасть.Найти(ВыборкаРегистраторов.НомерСтроки, "НомерСтроки"),ВыборкаРегистраторов);
					#Если Клиент Тогда
						Если Номер % 50 = 0 Тогда
							Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
						КонецЕсли;
						Номер = Номер + 1;
					#КонецЕсли
				КонецЦикла;
			КонецЦикла;
			ДокументОбъект.Записать();
		КонецЦикла;
		#Если Клиент Тогда
			Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
		#КонецЕсли
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетСреднегоЗаработка.Регистратор КАК Регистратор,
	|	РасчетСреднегоЗаработка.ВидРасчета КАК ВидРасчета
	|ПОМЕСТИТЬ ВТИсправляемыеДокументы
	|ИЗ
	|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеСреднего.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.НачислениеОтпускаРаботникамОрганизаций.РасчетСреднегоПоКалендарным КАК ДанныеСреднего
	|		ГДЕ
	|			ДанныеСреднего.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии))
	|			И ДанныеСреднего.Результат <> 0
	|			И ГОД(ДанныеСреднего.БазовыйПериодНачало) = ГОД(ДанныеСреднего.БазовыйПериодКонец)
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеСреднего.Ссылка
	|		ИЗ
	|			Документ.НачислениеОтпускаРаботникамОрганизаций.РасчетСреднегоПоШестидневке КАК ДанныеСреднего
	|		ГДЕ
	|			ДанныеСреднего.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии))
	|			И ДанныеСреднего.Результат <> 0
	|			И ГОД(ДанныеСреднего.БазовыйПериодНачало) = ГОД(ДанныеСреднего.БазовыйПериодКонец)
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеСреднего.Ссылка
	|		ИЗ
	|			Документ.РасчетПриУвольненииРаботникаОрганизаций.РасчетСреднего КАК ДанныеСреднего
	|		ГДЕ
	|			ДанныеСреднего.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии))
	|			И ДанныеСреднего.Результат <> 0
	|			И ГОД(ДанныеСреднего.БазовыйПериодНачало) = ГОД(ДанныеСреднего.БазовыйПериодКонец)
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеСреднего.Ссылка
	|		ИЗ
	|			Документ.РасчетПриУвольненииРаботникаОрганизаций.РасчетСреднегоДляОтпуска КАК ДанныеСреднего
	|		ГДЕ
	|			ДанныеСреднего.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии))
	|			И ДанныеСреднего.Результат <> 0
	|			И ГОД(ДанныеСреднего.БазовыйПериодНачало) = ГОД(ДанныеСреднего.БазовыйПериодКонец)) КАК ДанныеДокументов
	|		ПО РасчетСреднегоЗаработка.Регистратор = ДанныеДокументов.Ссылка
	|ГДЕ
	|	РасчетСреднегоЗаработка.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии))
	|	И РасчетСреднегоЗаработка.Результат <> 0
	|	И ДанныеДокументов.Ссылка ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетСреднегоЗаработка.Регистратор,
	|	РасчетСреднегоЗаработка.ВидРасчета
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка) > 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ВидРасчета";
	Результат = Запрос.Выполнить().Выгрузить(); 
	КоличествоДокументов = Результат[0].Количество;
	
	ДанныеРегистраТекст = 
	"ВЫБРАТЬ
	|	РасчетСреднегоЗаработка.Регистратор КАК Регистратор,
	|	РасчетСреднегоЗаработка.ВидРасчета КАК ВидРасчета,
	|	РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода,
	|	РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода,
	|	РасчетСреднегоЗаработка.СпособРасчета КАК СпособРасчета
	|ИЗ
	|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|ГДЕ
	|	(РасчетСреднегоЗаработка.ВидРасчета,РасчетСреднегоЗаработка.Регистратор) В(ВЫБРАТЬ ВидРасчета, Регистратор ИЗ ВТИсправляемыеДокументы КАК Документы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	СпособРасчета,
	|	ВидРасчета,
	|	РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка";
	
	ДанныеДокументовТекст = 
	"ВЫБРАТЬ
	|	ДанныеСреднего.НомерСтроки КАК НомерСтроки,
	|	ДанныеСреднего.ВидРасчета КАК ВидРасчета,
	|	ДанныеСреднего.Ссылка КАК Регистратор,
	|	""РасчетСреднегоПоКалендарным"" КАК ИмяТабличнойЧасти,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням) КАК СпособРасчета,
	|	ДанныеСреднего.НормаПоПятидневке КАК НормаПоПятидневке
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций.РасчетСреднегоПоКалендарным КАК ДанныеСреднего
	|ГДЕ
	|	(ДанныеСреднего.ВидРасчета, ДанныеСреднего.Ссылка) В (ВЫБРАТЬ ВидРасчета, Регистратор ИЗ ВТИсправляемыеДокументы КАК Документы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеСреднего.НомерСтроки,
	|	ДанныеСреднего.ВидРасчета,
	|	ДанныеСреднего.Ссылка,
	|	""РасчетСреднегоПоШестидневке"",
	|	ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке),
	|	ДанныеСреднего.НормаПоПятидневке
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций.РасчетСреднегоПоШестидневке КАК ДанныеСреднего
	|ГДЕ
	|	(ДанныеСреднего.ВидРасчета, ДанныеСреднего.Ссылка) В(ВЫБРАТЬ ВидРасчета, Регистратор ИЗ ВТИсправляемыеДокументы КАК Документы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеСреднего.НомерСтроки,
	|	ДанныеСреднего.ВидРасчета,
	|	ДанныеСреднего.Ссылка,
	|	""РасчетСреднего"",
	|	ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку),
	|	ДанныеСреднего.НормаПоПятидневке
	|ИЗ
	|	Документ.РасчетПриУвольненииРаботникаОрганизаций.РасчетСреднего КАК ДанныеСреднего
	|ГДЕ
	|	(ДанныеСреднего.ВидРасчета, ДанныеСреднего.Ссылка) В(ВЫБРАТЬ ВидРасчета, Регистратор ИЗ ВТИсправляемыеДокументы КАК Документы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеСреднего.НомерСтроки,
	|	ДанныеСреднего.ВидРасчета,
	|	ДанныеСреднего.Ссылка,
	|	""РасчетСреднегоДляОтпуска"",
	|	ВЫБОР
	|		КОГДА ДанныеСреднего.Ссылка.ПорядокРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)
	|	КОНЕЦ,
	|	ДанныеСреднего.НормаПоПятидневке
	|ИЗ
	|	Документ.РасчетПриУвольненииРаботникаОрганизаций.РасчетСреднегоДляОтпуска КАК ДанныеСреднего
	|ГДЕ
	|	(ДанныеСреднего.ВидРасчета, ДанныеСреднего.Ссылка) В(ВЫБРАТЬ ВидРасчета, Регистратор ИЗ ВТИсправляемыеДокументы КАК Документы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	СпособРасчета,
	|	ВидРасчета,
	|	НормаПоПятидневке";
	
	Если КоличествоДокументов <> 0 Тогда
		Запрос.Текст = ДанныеРегистраТекст;
		ВыборкаДанныхРегистра = Запрос.Выполнить().Выбрать();
		#Если Клиент Тогда
			ТекстСообщения = "Обработка документов выплаты отпускных, часть II";
			Состояние(ТекстСообщения + ": подготовка данных ...");
		#КонецЕсли
		Запрос.Текст = ДанныеДокументовТекст;
		ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
		СтруктураПоиска = Новый Структура("Регистратор,СпособРасчета,ВидРасчета");
		ДанныеРегистра = Новый ТаблицаЗначений;
		ДанныеРегистра.Колонки.Добавить("БазовыйПериодНачало");
		ДанныеРегистра.Колонки.Добавить("БазовыйПериодКонец");
		#Если Клиент Тогда
			ВсегоДоков = ВыборкаРегистраторов.Количество();
			Номер = 1;
			Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
		#КонецЕсли
		Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("Регистратор") Цикл
			ДокументОбъект = ВыборкаРегистраторов.Регистратор.ПолучитьОбъект();
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("СпособРасчета") Цикл
				ТабличнаяЧасть = ДокументОбъект[ВыборкаРегистраторов.ИмяТабличнойЧасти];
				Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("ВидРасчета") Цикл
					ЗаполнитьЗначенияСвойств(СтруктураПоиска,ВыборкаРегистраторов);
					Если ВыборкаДанныхРегистра.НайтиСледующий(СтруктураПоиска) Тогда
						ДанныеРегистра.Очистить();
						ЗаполнитьЗначенияСвойств(ДанныеРегистра.Добавить(),ВыборкаДанныхРегистра);
						Пока ВыборкаДанныхРегистра.Следующий() Цикл
							Если ВыборкаДанныхРегистра.ВидРасчета <> СтруктураПоиска.ВидРасчета Тогда
								Прервать;
							КонецЕсли;
							ЗаполнитьЗначенияСвойств(ДанныеРегистра.Добавить(),ВыборкаДанныхРегистра);
						КонецЦикла;
						ВсегоСтрокРегистра = ДанныеРегистра.Количество();
						Индекс = 1;
						Пока ВыборкаРегистраторов.Следующий() Цикл
							ЗаполнитьЗначенияСвойств(ТабличнаяЧасть.Найти(ВыборкаРегистраторов.НомерСтроки, "НомерСтроки"),ДанныеРегистра[Индекс - 1]);
							Индекс = Мин(Индекс + 1,ВсегоСтрокРегистра);
							#Если Клиент Тогда
								Если Номер % 50 = 0 Тогда
									Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
								КонецЕсли;
								Номер = Номер + 1;
							#КонецЕсли
						КонецЦикла;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			ДокументОбъект.Записать();
		КонецЦикла;
		#Если Клиент Тогда
			Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
		#КонецЕсли
	КонецЕсли;
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РБ

Процедура ПереносРеквизитовВидовРасчета()
	
	Запрос = Новый Запрос;
	
	#Если Клиент Тогда
		ТекстСообщения = "Обработка видов расчета - основных начислений";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли

	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ОсновныеНачисленияОрганизаций.ДоходыОтчислений КАК КодДоходаЕСН
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ВидРасчетаОбъект,Выборка);
		Попытка
			ВидРасчетаОбъект.Записать();
		Исключение
			Сообщить("Вид расчета " + ВидРасчетаОбъект.Наименование + ": не записан!", СтатусСообщения.Важное);
		КонецПопытки;

	КонецЦикла;
	
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработаны коды доходов для отсчислений с ФОТ");
	#КонецЕсли

	
	#Если Клиент Тогда
		ТекстСообщения = "Обработка видов расчета - дополнительных начислений";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеНачисленияОрганизаций.Ссылка,
	|	ДополнительныеНачисленияОрганизаций.ДоходыОтчислений КАК КодДоходаЕСН
	|ИЗ
	|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ВидРасчетаОбъект,Выборка);
		Попытка
			ВидРасчетаОбъект.Записать();
		Исключение
			Сообщить("Вид расчета " + ВидРасчетаОбъект.Наименование + ": не записан!", СтатусСообщения.Важное);
		КонецПопытки;
	КонецЦикла;
	
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработаны коды доходов для отсчислений с ФОТ");
	#КонецЕсли

КонецПроцедуры

Процедура ИзменениеРегистраРасчета()
	
	ЗапросПериоды = Новый Запрос;
	
	#Если Клиент Тогда
		ТекстСообщения = "Перенос удержания Пенисонный фонд";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли

	ЗапросПериоды.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетЕСН.Ссылка,
	|	РасчетЕСН.ПериодРегистрации,
	|	РасчетЕСН.Организация
	|ИЗ
	|	Документ.РасчетЕСН КАК РасчетЕСН
	|ГДЕ
	|	РасчетЕСН.Проведен";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетЕСНИсчисленныйЕСН.ФизЛицо,
	|	РасчетЕСНИсчисленныйЕСН.ПенсионныйФонд КАК Результат,
	|	НАЧАЛОПЕРИОДА(РасчетЕСНИсчисленныйЕСН.ПериодВзаиморасчетов, МЕСЯЦ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(РасчетЕСНИсчисленныйЕСН.ПериодВзаиморасчетов, МЕСЯЦ) КАК ДатаОкончания,
	|	&ПенсионныйФонд КАК ВидРасчета,
	|	ЛОЖЬ КАК Сотрно,
	|	1 КАК Размер,
	|	ИСТИНА КАК Авторасчет
	|ИЗ
	|	Документ.РасчетЕСН.ИсчисленныйЕСН КАК РасчетЕСНИсчисленныйЕСН
	|ГДЕ
	|	РасчетЕСНИсчисленныйЕСН.Ссылка = &Ссылка";
	
	
	
	НаборЗаписей = РегистрыРасчета.УдержанияРаботниковОрганизаций.СоздатьНаборЗаписей();
	ВыборкаПериоды = ЗапросПериоды.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоЗаписей = ВыборкаПериоды.Количество();
		ТекстСообщения = "Перенос удержания Пенисонный фонд";
		Состояние(ТекстСообщения + ": Обработано 0 из "+ВсегоЗаписей);
		НомерЗаписи = 0;
	#КонецЕсли
	Пока ВыборкаПериоды.Следующий() цикл
		
		Запрос.УстановитьПараметр("ПенсионныйФонд", ПланыВидовРасчета.УдержанияОрганизаций.ПенсионныйФонд);
		Запрос.УстановитьПараметр("Ссылка", ВыборкаПериоды.Ссылка);
	    Выборка = Запрос.Выполнить().Выбрать();
		Документ = Документы.РегистрацияРазовыхУдержанийРаботниковОрганизаций.СоздатьДокумент();
		Документ.ПериодРегистрации = ВыборкаПериоды.ПериодРегистрации;
		Документ.Дата = ВыборкаПериоды.ПериодРегистрации;
        Документ.Организация = ВыборкаПериоды.Организация;
		Документ.Комментарий = "Документ создан автоматически, при обновление ИБ. Не удалять!!!";
		ТЧДокумента = Документ.Удержания;
		Пока Выборка.Следующий() цикл
			Строка = ТЧДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(Строка,Выборка);
		КонецЦикла;
		Документ.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
		#Если Клиент Тогда
			НомерЗаписи = НомерЗаписи + 1;
			ТекстСообщения = "Обработка записей регистра расчета удрежнаие с физ. лиц организаций";
			Состояние(ТекстСообщения + ": Обработано "+НомерЗаписи+" из "+ВсегоЗаписей);
			
		#КонецЕсли

	КонецЦикла;
	#Если Клиент Тогда
		ТекстСообщения = "Обработка записей регистра расчета удрежнаие с физ. лиц организаций";
		Состояние(ТекстСообщения + ": Обработка завершина");
			
	#КонецЕсли
КонецПроцедуры

Процедура ЗаполнениеРеквизитаДействие()
	
	#Если Клиент Тогда
		ТекстСообщения = "Заполнение реквизита Действие в Плановых начислениях";
		Состояние(ТекстСообщения );
	#КонецЕсли

	
	
	Запрос =  Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлановыеНачисленияРаботниковОрганизаций.Регистратор
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций";
	
    ЗапросПоДокументу = Новый Запрос;
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	НаборЗаписей = РегистрыСведений.ПлановыеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
		
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
			
		Для каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПриемНаРаботуВОрганизацию") ИЛИ ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ДоговорНаВыполнениеРаботСФизЛицом") тогда
				ЗаписьНабора.Действие = Перечисления.ВидыДействияСНачислением.Начать;
			ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.УвольнениеИзОрганизаций") тогда
				ЗаписьНабора.Действие = Перечисления.ВидыДействияСНачислением.Прекратить;
			Иначе
				Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций") тогда
					Документ = "ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций";
				ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.КадровоеПеремещениеОрганизаций") тогда
					Документ = "КадровоеПеремещениеОрганизаций";
				ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") тогда
					Документ = "ОтпускПоУходуЗаРебенком";
				ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком") тогда
					Документ = "ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком";
				КонецЕсли;
				ЗапросПоДокументу.Текст =
					"ВЫБРАТЬ
					|	Док.Действие
					|ИЗ
					|	Документ."+Документ+".ОсновныеНачисления КАК Док
					|ГДЕ
					|	Док.Ссылка = &Ссылка
					|	И Док.ВидРасчета = &ВидРасчета
					|	И Док.Сотрудник = &ФизЛицо";
				ЗапросПоДокументу.УстановитьПараметр("Ссылка", Выборка.Регистратор);
				ЗапросПоДокументу.УстановитьПараметр("ВидРасчета", ЗаписьНабора.ВидРасчета);
				ЗапросПоДокументу.УстановитьПараметр("ФизЛицо", ЗаписьНабора.Сотрудник);
				ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
				Пока ВыборкаПоДокументу.Следующий() Цикл
					ЗаписьНабора.Действие = ВыборкаПоДокументу.Действие;
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;
		НаборЗаписей.Записать();
		
	КонецЦикла;



КонецПроцедуры

Процедура УстановкаГражданства()
	
	
	#Если Клиент Тогда
		ТекстСообщения = "Изменение гражданства физических лиц...";
		Состояние(ТекстСообщения );
	#КонецЕсли

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГражданствоФизЛиц.Страна,
	|	ГражданствоФизЛиц.ФизЛицо
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|ГДЕ
	|	ГражданствоФизЛиц.Страна.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоЗаписей = Выборка.Количество();
	#Если Клиент Тогда
		ТекстСообщения = "Ищменение гражданства физических лиц ";
		Состояние(ТекстСообщения + "обработанно: 0 из "+КоличествоЗаписей);
		НомерЗаписи = 0;
	#КонецЕсли

	НаборЗаписей = РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.ФизЛицо.Установить(Выборка.ФизЛицо);;
		НаборЗаписей.Прочитать();
		Для каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьНабора.Страна = Справочники.КлассификаторСтранМира.БЕЛАРУСЬ;
			
			#Если Клиент Тогда
				НомерЗаписи = НомерЗаписи +1;
				ТекстСообщения = "Изменение гражданства физических лиц ";
				Состояние(ТекстСообщения + "обработанно: " +НомерЗаписи+" из "+КоличествоЗаписей);
			#КонецЕсли
		КонецЦикла; 
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМесяц()
	#Если Клиент Тогда
		Состояние("Заполняются графики работы");
	#КонецЕсли
	
	// Установка значения Реквизита План в Истина в регистре сведений ГрафикиРаботыПоВидамВремени.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Месяц КАК Месяц,
	|	ГрафикиРаботыПоВидамВремени.Дата
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГрафикРаботы,
	|	Месяц";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	ОбщееКоличествоЗаписей = Выборка.Количество();
	ИндексЗаписи = 0;
	Пока Выборка.СледующийПоЗначениюПоля("ГрафикРаботы") Цикл
		НаборЗаписей.Отбор.ГрафикРаботы.Установить(Выборка.ГрафикРаботы);
		
			
			
			ИндексЗаписи = ИндексЗаписи + 1;
			НаборЗаписей.Прочитать();
			
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.Месяц = НачалоМесяца(Запись.Дата);
			КонецЦикла;
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		
		#Если Клиент Тогда
			Состояние("Заполняются графики работы " + Строка(Окр(ИндексЗаписи/ОбщееКоличествоЗаписей*100))+"%");
		#КонецЕсли
	КонецЦикла;	
КонецПроцедуры

Процедура СозданиеВидаРасчета()
	//Выберем виды расчета, которые составляют базу для отчислений в ФСЗН
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыРасчета.Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОсновныеНачисленияОрганизаций.Ссылка КАК Ссылка
		|	ИЗ
		|		ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|	ГДЕ
		|		ОсновныеНачисленияОрганизаций.КодДоходаЕСН.ВходитВБазуФСЗН = ИСТИНА
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДополнительныеНачисленияОрганизаций.Ссылка
		|	ИЗ
		|		ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
		|	ГДЕ
		|		ДополнительныеНачисленияОрганизаций.КодДоходаЕСН.ВходитВБазуФСЗН = ИСТИНА) КАК ВидыРасчета";
		
		
		СписокБазовыхВидовРасчетаДляПенсионного = Новый СписокЗначений;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() цикл 
			 СписокБазовыхВидовРасчетаДляПенсионного.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
		ПВРУд   = ПланыВидовРасчета.УдержанияОрганизаций;
		СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
		Категории  = Перечисления.КатегорииРасчетов;
		УстановитьРеквизитыУдержанияОрганизации(ПВРУд.ПенсионныйФонд, СпРасчета.Процентом, Категории.ЗависимоеТретьегоУровня, ,СписокБазовыхВидовРасчетаДляПенсионного);
КонецПроцедуры

Процедура УстановкаПлановыхУдержаний()
	
	ЗапросПриказы = Новый Запрос;
	ЗапросПриказы.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиОрганизаций.Регистратор КАК Приказ
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|	И РаботникиОрганизаций.Регистратор.УдалитьВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПенсионныйФонд КАК ВидРасчета,
	|	1 КАК Размер,
	|	&BYR КАК Валюта,
	|	&Начать КАК Действие,
	|	РаботникиОрганизаций.Сотрудник.Физлицо как ФизЛицо,
	|	РаботникиОрганизаций.Организация,
	|	РаботникиОрганизаций.Период
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО РаботникиОрганизаций.Сотрудник.Физлицо = ГражданствоФизЛиц.ФизЛицо
	|ГДЕ
	|	РаботникиОрганизаций.Регистратор = &Приказ
	|	И (НЕ ГражданствоФизЛиц.НеИмеетПравоНаПенсию)";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ПенсионныйФонд", ПланыВидовРасчета.УдержанияОрганизаций.ПенсионныйФонд);
	Запрос.УстановитьПараметр("BYR", Справочники.Валюты.НайтиПоКоду("974"));
	Запрос.УстановитьПараметр("Начать", Перечисления.ВидыДействияСНачислением.Начать);
	
	ВыборкаПриказов = ЗапросПриказы.Выполнить().Выбрать();
	
	Пока ВыборкаПриказов.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ПлановыеУдержанияРаботниковОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = ВыборкаПриказов.Приказ;
			
		Запрос.УстановитьПараметр("Приказ", ВыборкаПриказов.Приказ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НачатьТранзакцию();
		Пока Выборка.Следующий() Цикл 
			//НаборЗаписей.Прочитать();
			Строка = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры 

Процедура ЗаполнитьДатаНачалаСобыитияВДокументах()
	
	// Заполнение реквизита "ДатаНачалаСобытия" в ТЧ документов.
		ЗапросПоДокументам = Новый Запрос;
		ЗапросПоДокументам.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеОтпускаРаботникамОрганизацийНачисления.Ссылка,
		|	НачислениеОтпускаРаботникамОрганизацийНачисления.НомерСтроки
		|ИЗ
		|	Документ.НачислениеОтпускаРаботникамОрганизаций.Начисления КАК НачислениеОтпускаРаботникамОрганизацийНачисления
		|ГДЕ
		|	НачислениеОтпускаРаботникамОрганизацийНачисления.ДатаНачалаСобытия = &ПустаяДата
		|	И НачислениеОтпускаРаботникамОрганизацийНачисления.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеПоБольничномуЛисту.Ссылка,
		|	НачислениеПоБольничномуЛисту.НомерСтроки
		|ИЗ
		|	Документ.НачислениеПоБольничномуЛисту.Начисления КАК НачислениеПоБольничномуЛисту
		|ГДЕ
		|	НачислениеПоБольничномуЛисту.ДатаНачалаСобытия = &ПустаяДата
		|   И НачислениеПоБольничномуЛисту.Ссылка.Проведен
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки";
		
		ПустаяДата = Дата(1,1,1);
		ЗапросПоДокументам.УстановитьПараметр("ПустаяДата",ПустаяДата);
		ТипНачислениеОтпускаРаботникамОрганизаций = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций");
		ТипНачислениеПоБольничномуЛисту = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту");
		ВыборкаПоДокументам = ЗапросПоДокументам.Выполнить().Выбрать();
		Пока ВыборкаПоДокументам.СледующийПоЗначениюПоля("Ссылка") Цикл
			
			ДокументОбъект = ВыборкаПоДокументам.Ссылка.ПолучитьОбъект();
			
			ТипДокумента = ТипЗнч(ВыборкаПоДокументам.Ссылка);
			ЭтоНачислениеОтпускаРаботникамОрганизаций = ТипДокумента = ТипНачислениеОтпускаРаботникамОрганизаций;
			ЭтоНачислениеПоБольничномуЛисту = ТипДокумента = ТипНачислениеПоБольничномуЛисту;
			
			ТЧдокумента = ДокументОбъект.Начисления;
			
			
			Пока ВыборкаПоДокументам.Следующий() Цикл
				СтрокаТЧ = ТЧдокумента.Найти(ВыборкаПоДокументам.НомерСтроки,"НомерСтроки");
				Если СтрокаТЧ <> Неопределено Тогда
					Если ЭтоНачислениеОтпускаРаботникамОрганизаций И Не СтрокаТЧ.Сторно Тогда
						ДатаНачалаСобытия = ?(ДокументОбъект.ДатаНачалаОсновногоОтпуска = ПустаяДата, ?(ДокументОбъект.ДатаНачалаДополнительногоОтпуска = ПустаяДата,ДокументОбъект.Дата,ДокументОбъект.ДатаНачалаДополнительногоОтпуска), ДокументОбъект.ДатаНачалаОсновногоОтпуска);
						СтрокаТЧ.ДатаНачалаСобытия = ДатаНачалаСобытия;
					ИначеЕсли ЭтоНачислениеПоБольничномуЛисту И Не СтрокаТЧ.Сторно Тогда
						ДатаНачалаСобытия = ?(Не ЗначениеЗаполнено(ДокументОбъект.ПервичныйБольничныйЛист), ДокументОбъект.ДатаНачала, ДокументОбъект.ПервичныйБольничныйЛист.ДатаНачала);
						СтрокаТЧ.ДатаНачалаСобытия = ДатаНачалаСобытия;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ДокументОбъект.Модифицированность() Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
			
		КонецЦикла;
	КонецПроцедуры
	
Процедура ЗаполнитьСотрудникВРегистреТарифныеСтавки()
	
			
	Запрос = Новый Запрос;
	
	Текст = 
	"ВЫБРАТЬ
	|	ТарифныеСтавкиРаботниковОрганизации.Период,
	|	ТарифныеСтавкиРаботниковОрганизации.Регистратор,
	|	ТарифныеСтавкиРаботниковОрганизации.НомерСтроки,
	|	ТарифныеСтавкиРаботниковОрганизации.Активность,
	|	ТарифныеСтавкиРаботниковОрганизации.Организация,
	|	ТарифныеСтавкиРаботниковОрганизации.УдалитьФизЛицо,
	|	ТарифныеСтавкиРаботниковОрганизации.УдалитьПриказ,
	|	ТарифныеСтавкиРаботниковОрганизации.Ставка,
	|	ТарифныеСтавкиРаботниковОрганизации.ПроцентПоКонтракту,
	|	РаботникиОрганизаций.Сотрудник
	|ИЗ
	|	РегистрСведений.ТарифныеСтавкиРаботниковОрганизации КАК ТарифныеСтавкиРаботниковОрганизации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ  РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|    ПО ТарифныеСтавкиРаботниковОрганизации.УдалитьФизЛицо = РаботникиОрганизаций.Сотрудник.ФизЛицо
	|		И ТарифныеСтавкиРаботниковОрганизации.Регистратор =  РаботникиОрганизаций.Регистратор
	| ГДЕ
	| 	ТарифныеСтавкиРаботниковОрганизации.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)";
			
	Запрос.Текст = Текст;
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл	
		
		НаборЗаписей = РегистрыСведений.ТарифныеСтавкиРаботниковОрганизации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Регистратор;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		Строка = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Выборка);
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ОбновитьПодоходныйДля2009года()

	ВычетыНДФЛ = Справочники.ВычетыНДФЛ;
	СписокПредопределенныхКодовВычетов = Новый Массив;
	СписокПредопределенныхКодовВычетов.Добавить(ВычетыНДФЛ.Код600);
	СписокПредопределенныхКодовВычетов.Добавить(ВычетыНДФЛ.Код610);
	СписокПредопределенныхКодовВычетов.Добавить(ВычетыНДФЛ.Код611);
	СписокПредопределенныхКодовВычетов.Добавить(ВычетыНДФЛ.Код620);
	
	// Удалим ранее установленные значения на дату сведений по предопределенным элементам
	НаборЗаписей = РегистрыСведений.НДФЛРазмерВычетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Использование = Истина;
	НаборЗаписей.Отбор.КодВычета.Использование = Истина;

	ДатаСведений = Дата("20090101");
	НаборЗаписей.Отбор.Период.Значение = ДатаСведений;
	
	Для Каждого КодВычета Из СписокПредопределенныхКодовВычетов Цикл
		НаборЗаписей.Отбор.КодВычета.Значение = КодВычета;
		НаборЗаписей.Записать();
	КонецЦикла;

	// Отменим фильтры	
	НаборЗаписей.Отбор.КодВычета.Использование = Ложь;
	НаборЗаписей.Прочитать();
	
	
	ДатаСведений = Дата("20090101");

	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код600,  250000, 1500000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код610,  70000,  0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код611,  140000, 0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код620,  350000, 0);
	
	// Запишем набор записей в режиме добавления
	НаборЗаписей.Записать(Истина);
	
	НаборЗаписей = РегистрыСведений.ШкалаПодоходногоНалога.СоздатьНаборЗаписей();
	
	ДатаСведений = Дата("20090101");
	
	НоваяЗапись 				= НаборЗаписей.Добавить();
	НоваяЗапись.Период 			= ДатаСведений;
	НоваяЗапись.НижнийПредел	= 0;
	НоваяЗапись.ВерхнийПредел	= 0;
	НоваяЗапись.Налог			= 12;
	НаборЗаписей.Записать(Истина);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.6 РБ

// процедура заполняет реквизиты упр. удержания УдержаноПоБухгалтерии
Процедура ЗаполнитьПланыВидовРасчетаУправленческиеУдержания()

	ОбъектВР = ПланыВидовРасчета.УправленческиеУдержания.УдержаноПоБухгалтерии.ПолучитьОбъект();
	ОбъектВР.ПроизвольнаяФормулаРасчета	= Истина;
	ОбъектВР.СпособРасчета				= Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой;
	ОбъектВР.КатегорияНачисления			= Справочники.КатегорииРасчетов.Первичное;
	ОбъектВР.ФормулаРасчета				= "";
	ОбъектВР.Записать();

КонецПроцедуры

// Заменяет в формуле нулевой показатель на 0
Процедура ЗаменитьНулевойПоказатель(Выборка, ВР, НомерПоказателя)
	
	Если Выборка.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2ДП3ВП4_0 
		Или Выборка.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1ВП2_0 Тогда
		
		ВР.ФормулаРасчета = СтрЗаменить(ВР.ФормулаРасчета, "ИсходныеДанные.Показатель" + НомерПоказателя, "0");
		Для Сч = НомерПоказателя По 5 Цикл
			ВР.ФормулаРасчета = СтрЗаменить(ВР.ФормулаРасчета, "ИсходныеДанные.Показатель" + Строка(Сч), "ИсходныеДанные.Показатель" + Строка(Сч - 1));
		КонецЦикла;
		
		ВР["УдалитьПоказатель" + НомерПоказателя] = Справочники.ПоказателиСхемМотивации.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Переносит реквизит в табличную часть
Процедура ДобавитьПоказатель(ВР, Выборка, НомерПоказателя)
	
	НоваяСтрокаПоказателей = ВР.Показатели.Добавить();
	
	НоваяСтрокаПоказателей.Показатель							= Выборка["УдалитьПоказатель" + НомерПоказателя];
	Если Выборка["УдалитьПоказатель" + НомерПоказателя].ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная И
		 Выборка["УдалитьПоказатель" + НомерПоказателя].ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая И
		Выборка["УдалитьПоказатель" + НомерПоказателя].ВозможностьИзменения <> Перечисления.ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете И
		Выборка["УдалитьПоказатель" + НомерПоказателя].ВозможностьИзменения <> Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно Тогда
			НоваяСтрокаПоказателей.ЗапрашиватьПриКадровыхПеремещениях	= Истина;
	КонецЕсли;
	ВР["УдалитьПоказатель" + НомерПоказателя]					= Справочники.ПоказателиСхемМотивации.ПустаяСсылка();
	
КонецПроцедуры				

// Заменяет шкалу оценки на конструкцию условия ?(,,)
Функция ЗаменитьШкалуНаУсловие(НачальныйТекст, КонечныйТекст, ОцениваемоеВыражение, Показатель)
	
	ФормулаРасчета = НачальныйТекст;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Показатель",Показатель);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоставШкалОценкиПоказателейРасчета.НомерСтрокиШкалы КАК НомерСтрокиШкалы,
	|	ЕСТЬNULL(СоставШкалОценкиПоказателейРасчета.ЗначениеС,0) КАК ЗначениеС,
	|	ЕСТЬNULL(СоставШкалОценкиПоказателейРасчета.ЗначениеПо,0) КАК ЗначениеПо,
	|	ЕСТЬNULL(СоставШкалОценкиПоказателейРасчета.Размер,0) КАК Размер
	|ИЗ
	|	РегистрСведений.СоставШкалОценкиПоказателейРасчета КАК СоставШкалОценкиПоказателейРасчета
	|ГДЕ
	|	СоставШкалОценкиПоказателейРасчета.ШкалаОценкиПоказателя = &Показатель
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиШкалы";
	Выборка = Запрос.Выполнить().Выбрать();
	ВсегоСтрокШкалы = Выборка.Количество();
	
	Если ВсегоСтрокШкалы > 0 Тогда
		Пока Выборка.Следующий() Цикл
			
			ЗначениеС	= СтрЗаменить(Формат(Выборка.ЗначениеС,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")," ","");
			ЗначениеС	= ?(ЗначениеЗаполнено(ЗначениеС),ЗначениеС,"0");
			ЗначениеПо	= СтрЗаменить(Формат(Выборка.ЗначениеПо,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")," ","");
			ЗначениеПо	= ?(ЗначениеЗаполнено(ЗначениеПо), ЗначениеПо, "0");
			Размер		= СтрЗаменить(Формат(Выборка.Размер,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")," ","");
			Размер		= ?(ЗначениеЗаполнено(Размер),Размер,"0");
			
			ФормулаРасчета = ФормулаРасчета + "?(" + ОцениваемоеВыражение +">=" + ЗначениеС + " И " + ОцениваемоеВыражение + "<= " + ЗначениеПо + "," + Размер + ",";
			
		КонецЦикла;
		ФормулаРасчета = ФормулаРасчета + "0";
		Для Сч = 1 По ВсегоСтрокШкалы Цикл
			ФормулаРасчета = ФормулаРасчета + ")";
		КонецЦикла;
	КонецЕсли;
	
	ФормулаРасчета = ФормулаРасчета + КонечныйТекст;
	
	Возврат ФормулаРасчета;
	
КонецФункции //ЗаменитьШкалуНаУсловие

// Процедура заменяет перечисления типа П1*П2 на формулы расчета и заполняет таблицу показателей 
Процедура ПеревестиНаПроизвольныеФормулыРасчета()
	
	// заполним идентификаторы у показателей СМ
	СпрПоказатели = Справочники.ПоказателиСхемМотивации.Выбрать();
	Пока СпрПоказатели.Следующий() Цикл
		Показатель = СпрПоказатели.ПолучитьОбъект();
		Идентификатор = "";
		БылПробел = Ложь;
		Наименование = Показатель.Наименование;
		Для НомСимвола = 1 По СтрДлина(Наименование) Цикл
			Символ = Сред(Наименование,НомСимвола,1);		
			Если Символ = " " Тогда
				БылПробел = Истина;
			ИначеЕсли БылПробел Тогда
				БылПробел = Ложь;
				Идентификатор = Идентификатор + ВРег(Символ);
			Иначе
				Идентификатор = Идентификатор + Символ;		
			КонецЕсли;
		КонецЦикла;
		Показатель.Идентификатор = Идентификатор;
		Показатель.Записать();
	КонецЦикла;
	
	МассивФормульныхСпособовРасчета = Новый Массив;
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ДП2ОП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ДП2УП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2ДП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2УП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2ДП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2ОП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2УП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП3ДП1ОП2);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2УП3ДП4);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМинП1_П2УП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3ОП4);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМинП1_П2УП3ОП4);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2_П5ДП3УП4);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2ДП3ВП4_0);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1ВП2_0);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3УП4ДП5);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2_П3УП4ДП5);
	
	
	ФормульныеСпособыРасчета = Новый Соответствие;
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1,						"ИсходныеДанные.Показатель1");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ДП2УП3,				"ИсходныеДанные.Показатель1 / (ИсходныеДанные.Показатель2 * ИсходныеДанные.Показатель3)");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2,					"ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2ДП3,				"ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2 / ИсходныеДанные.Показатель3");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2УП3,				"ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2 * ИсходныеДанные.Показатель3");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2УП3ДП4,			"ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2 * ИсходныеДанные.Показатель3 / ИсходныеДанные.Показатель4");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3,			"Макс(ИсходныеДанные.Показатель1,  ИсходныеДанные.Показатель2 * ИсходныеДанные.Показатель3)");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМинП1_П2УП3,			"Мин(ИсходныеДанные.Показатель1,  ИсходныеДанные.Показатель2 * ИсходныеДанные.Показатель3)");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2_П5ДП3УП4,		"Макс(ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2, ИсходныеДанные.Показатель5 / ИсходныеДанные.Показатель3 * ИсходныеДанные.Показатель4)");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2ДП3ВП4_0,		"Макс(ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2 / ИсходныеДанные.Показатель3 - ИсходныеДанные.Показатель4, 0)");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1ВП2_0,			"Макс(ИсходныеДанные.Показатель1 - ИсходныеДанные.Показатель2, 0)");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3УП4ДП5,		"Макс(ИсходныеДанные.Показатель1, ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель3) * ИсходныеДанные.Показатель4 / ИсходныеДанные.Показатель5");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2_П3УП4ДП5,		"Макс(ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2, ИсходныеДанные.Показатель3 *  ИсходныеДанные.Показатель4 / ИсходныеДанные.Показатель5)");
	
	МассивФормульныеСпособыРасчетаСоШкалой = Новый Массив;
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ДП2ОП3);
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2);
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2ДП3);
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2УП3);
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2ОП3);	
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП3ДП1ОП2);	
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3ОП4);
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМинП1_П2УП3ОП4);	
	


	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель1,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель2,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель3,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель4,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель5,
	|	ОсновныеНачисленияОрганизаций.СпособРасчета,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияОрганизаций.СпособРасчета В (&ШкальныеСпособыРасчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоШкала,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель1.ТипПоказателя КАК ТипПоказателя1,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель2.ТипПоказателя КАК ТипПоказателя2,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель3.ТипПоказателя КАК ТипПоказателя3,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель4.ТипПоказателя КАК ТипПоказателя4,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель5.ТипПоказателя КАК ТипПоказателя5
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.СпособРасчета В(&СпособРасчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправленческиеНачисления.Ссылка,
	|	УправленческиеНачисления.УдалитьПоказатель1,
	|	УправленческиеНачисления.УдалитьПоказатель2,
	|	УправленческиеНачисления.УдалитьПоказатель3,
	|	УправленческиеНачисления.УдалитьПоказатель4,
	|	УправленческиеНачисления.УдалитьПоказатель5,
	|	УправленческиеНачисления.СпособРасчета,
	|	ВЫБОР
	|		КОГДА УправленческиеНачисления.СпособРасчета В (&ШкальныеСпособыРасчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	УправленческиеНачисления.УдалитьПоказатель1.ТипПоказателя,
	|	УправленческиеНачисления.УдалитьПоказатель2.ТипПоказателя,
	|	УправленческиеНачисления.УдалитьПоказатель3.ТипПоказателя,
	|	УправленческиеНачисления.УдалитьПоказатель4.ТипПоказателя,
	|	УправленческиеНачисления.УдалитьПоказатель5.ТипПоказателя
	|ИЗ
	|	ПланВидовРасчета.УправленческиеНачисления КАК УправленческиеНачисления
	|ГДЕ
	|	УправленческиеНачисления.СпособРасчета В(&СпособРасчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправленческиеУдержания.Ссылка,
	|	УправленческиеУдержания.УдалитьПоказатель1,
	|	УправленческиеУдержания.УдалитьПоказатель2,
	|	УправленческиеУдержания.УдалитьПоказатель3,
	|	УправленческиеУдержания.УдалитьПоказатель4,
	|	УправленческиеУдержания.УдалитьПоказатель5,
	|	УправленческиеУдержания.СпособРасчета,
	|	ВЫБОР
	|		КОГДА УправленческиеУдержания.СпособРасчета В (&ШкальныеСпособыРасчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	УправленческиеУдержания.УдалитьПоказатель1.ТипПоказателя,
	|	УправленческиеУдержания.УдалитьПоказатель2.ТипПоказателя,
	|	УправленческиеУдержания.УдалитьПоказатель3.ТипПоказателя,
	|	УправленческиеУдержания.УдалитьПоказатель4.ТипПоказателя,
	|	УправленческиеУдержания.УдалитьПоказатель5.ТипПоказателя
	|ИЗ
	|	ПланВидовРасчета.УправленческиеУдержания КАК УправленческиеУдержания
	|ГДЕ
	|	УправленческиеУдержания.СпособРасчета В(&СпособРасчета)";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СпособРасчета",МассивФормульныхСпособовРасчета);
	Запрос.УстановитьПараметр("ШкальныеСпособыРасчета",МассивФормульныеСпособыРасчетаСоШкалой);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВР = Выборка.Ссылка.ПолучитьОбъект();
		
		ВР.ПроизвольнаяФормулаРасчета	= Истина;
		ВР.СпособРасчета 				= Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула;
				
		// заполним формулу расчета
		Если Выборка.ЭтоШкала Тогда
			Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ДП2ОП3 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("", "", "ИсходныеДанные.Показатель1 / ИсходныеДанные.Показатель2", Выборка.УдалитьПоказатель3);
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("", "", "ИсходныеДанные.Показатель1", Выборка.УдалитьПоказатель2);
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2ДП3 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("", " / ИсходныеДанные.Показатель2", "ИсходныеДанные.Показатель1", Выборка.УдалитьПоказатель2);
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2УП3 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("", " * ИсходныеДанные.Показатель2", "ИсходныеДанные.Показатель1", Выборка.УдалитьПоказатель2);
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2ОП3 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("","", "ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель1", Выборка.УдалитьПоказатель3);
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП3ДП1ОП2 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("ИсходныеДанные.Показатель2","", "ИсходныеДанные.Показатель1", Выборка.УдалитьПоказатель2);
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3ОП4 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("Макс(ИсходныеДанные.Показатель1, ИсходныеДанные.Показатель2 * (","))", "ИсходныеДанные.Показатель3", Выборка.УдалитьПоказатель4);
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьМинП1_П2УП3ОП4 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("Мин(ИсходныеДанные.Показатель1, ИсходныеДанные.Показатель2 * (","))", "ИсходныеДанные.Показатель3", Выборка.УдалитьПоказатель4);
			КонецЕсли;
		Иначе
			ВР.ФормулаРасчета = ФормульныеСпособыРасчета[Выборка.СпособРасчета];
		КонецЕсли;
				
		// Заполним таблицу показателей и нулевые показатели заменем 0
		Для НомПоказателя = 1 По 5 Цикл
			
			Если Выборка["ТипПоказателя" + НомПоказателя] = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная 
			Или Выборка["ТипПоказателя" + НомПоказателя] = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка["УдалитьПоказатель" + НомПоказателя]) Тогда
				Если Выборка["УдалитьПоказатель" + НомПоказателя] = Справочники.ПоказателиСхемМотивации.УдалитьНуль Тогда
					ЗаменитьНулевойПоказатель(Выборка, ВР, НомПоказателя);
				Иначе
					ДобавитьПоказатель(ВР, Выборка, НомПоказателя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ВР.Записать();
	КонецЦикла;
	
КонецПроцедуры //ПеревестиНаПроизвольныеФормулыРасчета

// Процедура заполняет реквизиты предопределенных показателей ТарифнаяСтавка и ВремяВКалендарныхДнях
//
Процедура ЗаполнитьРеквизитыНовыхПоказателей()
	
	Числовой = Перечисления.ТипыПоказателейСхемМотивации.Числовой;
	Денежный = Перечисления.ТипыПоказателейСхемМотивации.Денежный;
	Процентный = Перечисления.ТипыПоказателейСхемМотивации.Процентный;
	ВводитсяПриРасчете = Перечисления.ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете;
	ИзменяетсяПриРасчете = Перечисления.ИзменениеПоказателейСхемМотивации.ИзменяетсяПриРасчете;
	НеИзменяется = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется;	
    ВозможностьИзмененияНеУказана = Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка();
	
	ПоказателиСхемМотивации = Справочники.ПоказателиСхемМотивации;
	ВремяВДнях = ПоказателиСхемМотивации.ВремяВДнях.ПолучитьОбъект();
	ВремяВЧасах = ПоказателиСхемМотивации.ВремяВЧасах.ПолучитьОбъект();
	НормаВремениВДнях = ПоказателиСхемМотивации.НормаВремениВДнях.ПолучитьОбъект();
	НормаВремениВЧасах = ПоказателиСхемМотивации.НормаВремениВЧасах.ПолучитьОбъект();
	РасчетнаяБаза = ПоказателиСхемМотивации.РасчетнаяБаза.ПолучитьОбъект();
	СдельнаяВыработка = ПоказателиСхемМотивации.СдельнаяВыработка.ПолучитьОбъект();
	Стаж = ПоказателиСхемМотивации.Стаж.ПолучитьОбъект();
	
    // пустой вид показателя
    УстановитьРеквизитыПоказателяСхемМотивации(ВремяВДнях,				Числовой, ВозможностьИзмененияНеУказана,,,"ВремяВДнях");
	УстановитьРеквизитыПоказателяСхемМотивации(ВремяВЧасах,				Числовой, ВозможностьИзмененияНеУказана,,,"ВремяВЧасах");	
	УстановитьРеквизитыПоказателяСхемМотивации(НормаВремениВДнях,		Числовой, ВозможностьИзмененияНеУказана,,,"НормаВремениВДнях");
	УстановитьРеквизитыПоказателяСхемМотивации(НормаВремениВЧасах,		Числовой, ВозможностьИзмененияНеУказана,,,"НормаВремениВЧасах");
	УстановитьРеквизитыПоказателяСхемМотивации(РасчетнаяБаза,			Числовой, ВозможностьИзмененияНеУказана,,,"РасчетнаяБаза");
	УстановитьРеквизитыПоказателяСхемМотивации(СдельнаяВыработка,		Числовой, ВозможностьИзмененияНеУказана,,,"СдельнаяВыработка");	
	УстановитьРеквизитыПоказателяСхемМотивации(Стаж,					Числовой, ВозможностьИзмененияНеУказана,,,"Стаж");
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ТарифнаяСтавкаДневная.ПолучитьОбъект(),	Числовой, НеИзменяется,,,"ТарифнаяСтавкаДневная",Истина);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная.ПолучитьОбъект(),	Числовой, НеИзменяется,,,"ТарифнаяСтавкаМесячная",Истина);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.ПолучитьОбъект(),	Числовой, НеИзменяется,,,"ТарифнаяСтавкаЧасовая",Истина);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ВремяВКалендарныхДнях.ПолучитьОбъект(),	Числовой, НеИзменяется,,,"ВремяВКалендарныхДнях");
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ОтработаноВремениВДнях.ПолучитьОбъект(),	Числовой, ВозможностьИзмененияНеУказана,,,"ОтработаноВремениВДнях");
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ОтработаноВремениВЧасах.ПолучитьОбъект(),Числовой, ВозможностьИзмененияНеУказана,,,"ОтработаноВремениВЧасах");
		
	ОкладПоДням = УстановитьРеквизитыПоказателяСхемМотивации(,		Денежный,НеИзменяется,"Оклад по дням",,"ОкладПоДням",Истина);
	ОкладПоЧасам = УстановитьРеквизитыПоказателяСхемМотивации(,		Денежный,НеИзменяется,"Оклад по часам",,"ОкладПоЧасам",Истина);
	КомиссионнаяВыручка = УстановитьРеквизитыПоказателяСхемМотивации(,Денежный,ВводитсяПриРасчете,"Комиссионная выручка",,"КомиссионнаяВыручка");
	Процент = УстановитьРеквизитыПоказателяСхемМотивации(,			Процентный,НеИзменяется,"Процент",,"Процент");
	ТарифДневной = УстановитьРеквизитыПоказателяСхемМотивации(,		Денежный,НеИзменяется,"Тариф дневной",,"ТарифДневной",Истина);
	ТарифЧасовой = УстановитьРеквизитыПоказателяСхемМотивации(,		Денежный,НеИзменяется,"Тариф часовой",,"ТарифЧасовой",Истина);
	ПроцентПлана = УстановитьРеквизитыПоказателяСхемМотивации(,		Процентный,ИзменяетсяПриРасчете,"Процент плана",,"ПроцентПлана");
	РазмерПремии = УстановитьРеквизитыПоказателяСхемМотивации(,		Денежный,ИзменяетсяПриРасчете,"Размер премии",,"РазмерПремии");
	ФиксированнаяСумма = УстановитьРеквизитыПоказателяСхемМотивации(,Денежный,НеИзменяется,"Фиксированная сумма",,"ФиксированнаяСумма");
	
КонецПроцедуры //ЗаполнитьРеквизитыНовыхПоказателей

// Заполняем реквизит ПериодРегистрации в документах НачислениеДивидендовОрганизаций и НачислениеЕдиновременныхПособийЗаСчетФСС
Процедура ЗаполнитьПериодРегистрацииВДокументах()

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачислениеДивидендовОрганизаций.Ссылка,
	|	НАЧАЛОПЕРИОДА(НачислениеДивидендовОрганизаций.Дата, МЕСЯЦ) КАК ПериодРегистрации
	|ИЗ
	|	Документ.НачислениеДивидендовОрганизаций КАК НачислениеДивидендовОрганизаций
	|ГДЕ
	|	НачислениеДивидендовОрганизаций.ПериодРегистрации = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачислениеЕдиновременныхПособийЗаСчетФСС.Ссылка,
	|	НАЧАЛОПЕРИОДА(НачислениеЕдиновременныхПособийЗаСчетФСС.Дата, МЕСЯЦ)
	|ИЗ
	|	Документ.НачислениеЕдиновременныхПособийЗаСчетФСС КАК НачислениеЕдиновременныхПособийЗаСчетФСС
	|ГДЕ
	|	НачислениеЕдиновременныхПособийЗаСчетФСС.ПериодРегистрации = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	Запрос.Текст = ТекстЗапроса;
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПериодРегистрации = ВыборкаДокументов.ПериодРегистрации;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьПериодРегистрацииВДокументах()

Процедура ЗаполнитьНовыеВидыРасчетов()
	
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Перечисления.КатегорииРасчетов;
	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	КодыДоходаПоСт255		 = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК;
	КодДоходаНДФЛПоУмолчанию = ДоходыНДФЛ.КодДоходаПоУмолчанию;
	КодДоходаЕСНПоУмолчанию	 = Справочники.ДоходыЕСН.ОблагаетсяФСЗНиСТРАХ;
	ВидыПремии = Перечисления.ВидыПремии;

    ПВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	УчетВремени = Справочники.КлассификаторИспользованияРабочегоВремени;

	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДоплатаЗаПраздничныеИВыходныеПоГрафику,				СпРасчета.ФиксированнойСуммой,							Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, 		Категории.Первичное,			УчетВремени.Праздники, 			Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ДоплатаЗаСверхурочные,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДоплатаЗаСверхурочные,								СпРасчета.ФиксированнойСуммой,							Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, 		Категории.Первичное,			УчетВремени.Сверхурочные, 		Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию, , КодыДоходаПоСт255.ДоплатаЗаСверхурочные,,,Ложь);
	ПВР = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций;
    УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ПриРожденииВторогоИПоследующихДетей,СпРасчета.ФиксированнойСуммой,Категории.Первичное,ВидыПремии.НеПремия, 0, 0, ДоходыНДФЛ.Код1211 ,Справочники.ДоходыЕСН.БольничныйИзФСЗН,Неопределено,КодыДоходаПоСт255.ПособияРазовыеФСЗН);


	
	
КонецПроцедуры

Процедура ОбновитьНастройкиРасчетов()

	НаборЗаписей = РегистрыСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.СоздатьНаборЗаписей();
	НаборЗаписей.Добавить().ПорядокПересчетаМесячнойСтавкиВЧасовую = Перечисления.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце;
	НаборЗаписей.Записать();
	

КонецПроцедуры

Процедура ИзменитьНочныеИВечерние()
	
	ЗапросДокументов = Новый Запрос;
	
	НочныеИВечерние = Новый СписокЗначений;
	НочныеИВечерние.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы);
	НочныеИВечерние.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы);
	ЗапросДокументов.УстановитьПараметр("ВидыРасчета" ,НочныеИВечерние);
	ЗапросДокументов.УстановитьПараметр("Прекратить" ,Перечисления.ВидыДействияСНачислением.Прекратить);
	
	ЗапросДокументов.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлановыеНачисленияРаботниковОрганизаций.Регистратор,
	|	ПлановыеНачисленияРаботниковОрганизаций.Организация
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|ГДЕ
	|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение В(&ВидыРасчета)
	|	И ПлановыеНачисленияРаботниковОрганизаций.Действие <> &Прекратить";
	
	ВыборкаДокументов = ЗапросДокументов.Выполнить().Выбрать();
	
	//Запрос = Новый Запрос;
	//НочныеИВечерние.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы);
	//НочныеИВечерние.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы);
	//Запрос.УстановитьПараметр("ВидыРасчета" ,НочныеИВечерние);
	//Запрос.УстановитьПараметр("Прекратить" ,Перечисления.ВидыДействияСНачислением.Прекратить);
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ПлановыеНачисленияОсновныеНачисления.НомерСтроки
	//|ИЗ
	//|	Документ."+ДокументИмя+".ОсновныеНачисления КАК ПлановыеНачисленияОсновныеНачисления
	//|ГДЕ
	//|	ПлановыеНачисленияОсновныеНачисления.Ссылка = &Регистратор
	//|	И ПлановыеНачисленияОсновныеНачисления.ВидРасчета В(&ВидРасчета)
	//|	И ПлановыеНачисленияОсновныеНачисления.Показатель1 <> 0";
	
	Пока ВыборкаДокументов.Следующий() цикл
		
		//Запрос.УстановитьПараметр("Регистратор" ,ВыборкаДокументов.Регистратор);
		//Если ТипЗнч(ВыборкаДокументов.Регистратор) = Тип("ДокументСсылка.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций") тогда
		//	ДокументИмя = "ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций";
		//ИначеЕсли ТипЗнч(ВыборкаДокументов.Регистратор) = Тип("ДокументСсылка.ПриемНаРаботуВОрганизацию") тогда
		//	ДокументИмя = "ПриемНаРаботуВОрганизацию";
		//ИначеЕсли ТипЗнч(ВыборкаДокументов.Регистратор) = Тип("ДокументСсылка.КадровоеПеремещениеОрганизаций") тогда
		//	ДокументИмя = "КадровоеПеремещениеОрганизаций";
		//ИначеЕсли ТипЗнч(ВыборкаДокументов.Регистратор) = Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") тогда
		//	ДокументИмя = "ОтпускПоУходуЗаРебенком";
		//КонецЕсли;
			
		//Запрос.Текст =
		//"ВЫБРАТЬ
		//|	ПлановыеНачисленияОсновныеНачисления.НомерСтроки
		//|ИЗ
		//|	Документ."+ДокументИмя+".ОсновныеНачисления КАК ПлановыеНачисленияОсновныеНачисления
		//|ГДЕ
		//|	ПлановыеНачисленияОсновныеНачисления.Ссылка = &Регистратор
		//|	И ПлановыеНачисленияОсновныеНачисления.ВидРасчета В(&ВидыРасчета)
		//|	И ПлановыеНачисленияОсновныеНачисления.Показатель1 <> 0";	
		//Выборка = Запрос.Выполнить().Выбрать();
		
		#Если Клиент Тогда
			Состояние("Обрабатывается документ " + ВыборкаДокументов.Регистратор);
		#КонецЕсли

		УчетнаяПолитика = РегистрыСведений.УчетнаяПолитикаПоПерсоналуОрганизаций.Получить(Новый Структура("Организация", ВыборкаДокументов.Организация));
		Если УчетнаяПолитика = Неопределено тогда
			ПроцентНочных = 40;
			ПроцентВечерних = 20;
		Иначе
			ПроцентНочных = УчетнаяПолитика.ПроцентОплатыНочных;
			ПроцентВечерних = УчетнаяПолитика.ПроцентОплатыВечерних;
		КонецЕсли;
		
		ДокументОбъект = ВыборкаДокументов.Регистратор.ПолучитьОбъект();
        Строки = ДокументОбъект.ОсновныеНачисления.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы));
		Для Каждого Строка Из Строки цикл
			Если Строка.Показатель1 <> 0 тогда
				Строка.Показатель1 = ПроцентНочных;
			КонецЕсли;
		КонецЦикла;
		 Строки = ДокументОбъект.ОсновныеНачисления.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы));
		 Для Каждого Строка Из Строки цикл
			 Если Строка.Показатель1 <> 0 тогда
                Строка.Показатель1 = ПроцентВечерних;
			КонецЕсли;
		КонецЦикла;

		Если ДокументОбъект.Модифицированность()  тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

Процедура УнификацияДокументовДляМеханизмаИсправлений()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеНачисленияРаботниковОрганизаций.Регистратор КАК Регистратор,
	|	ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета,
	|	ДополнительныеНачисленияРаботниковОрганизаций.БазовыйПериодНачало КАК ДатаНачала,
	|	ДополнительныеНачисленияРаботниковОрганизаций.БазовыйПериодКонец КАК ДатаОкончания,
	|	ДополнительныеНачисленияРаботниковОрганизаций.Сторно,
	|	ДополнительныеНачисленияРаботниковОрганизаций.Результат,
	|	ДополнительныеНачисленияРаботниковОрганизаций.ОплаченоДнейЧасов,
	|	ДополнительныеНачисленияРаботниковОрганизаций.Показатель1,
	|	ДополнительныеНачисленияРаботниковОрганизаций.Показатель2,
	|	ДополнительныеНачисленияРаботниковОрганизаций.Показатель3,
	|	ДополнительныеНачисленияРаботниковОрганизаций.Показатель4,
	|	ДополнительныеНачисленияРаботниковОрганизаций.Показатель5,
	|	ДополнительныеНачисленияРаботниковОрганизаций.Показатель6,
	|	ДополнительныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации,
	|	ДополнительныеНачисленияРаботниковОрганизаций.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ДополнительныеНачисленияРаботниковОрганизаций.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ДополнительныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия,
	|	ДополнительныеНачисленияРаботниковОрганизаций.Авторасчет,
	|	ДополнительныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеОтпускаРаботникамОрганизаций.Начисления КАК ОбработанныеДокументы
	|		ПО ДополнительныеНачисленияРаботниковОрганизаций.Регистратор = ОбработанныеДокументы.Ссылка
	|			И ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета = ОбработанныеДокументы.ВидРасчета
	|ГДЕ
	|	ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения), ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения))
	|	И ОбработанныеДокументы.Ссылка ЕСТЬ NULL 
	|	И ДополнительныеНачисленияРаботниковОрганизаций.Регистратор ССЫЛКА Документ.НачислениеОтпускаРаботникамОрганизаций
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	#Если Клиент Тогда
		ТекстСообщения = "Обработка документов Начисление отпуска работникам организаций, часть I";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаРегистраторов.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("Регистратор") Цикл
		Объект = ВыборкаРегистраторов.Регистратор.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = Истина;
		Пока ВыборкаРегистраторов.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(Объект.Начисления.Добавить(),ВыборкаРегистраторов);
			#Если Клиент Тогда
				Если Номер % 30 = 0 Тогда
					Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
				КонецЕсли;
				Номер = Номер + 1;
			#КонецЕсли
		КонецЦикла;
		Объект.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаИзмененийТК2006",ПроведениеРасчетов.ПолучитьДатуВступленияВСилуИзмененийТрудовогоКодекса2006());
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеОтпускаРаботникамОрганизаций.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НачислениеОтпускаРаботникамОрганизаций.ДатаНачалаОсновногоОтпуска = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВЫБОР
	|					КОГДА НачислениеОтпускаРаботникамОрганизаций.ДатаНачалаДополнительногоОтпуска = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА НачислениеОтпускаРаботникамОрганизаций.Дата
	|					ИНАЧЕ НачислениеОтпускаРаботникамОрганизаций.ДатаНачалаДополнительногоОтпуска
	|				КОНЕЦ
	|		ИНАЧЕ НачислениеОтпускаРаботникамОрганизаций.ДатаНачалаОсновногоОтпуска
	|	КОНЕЦ КАК ДатаНачалаСобытия,
	|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаКадровогоДвижения
	|ПОМЕСТИТЬ ВТДокументыКОбработке
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК НачислениеОтпускаРаботникамОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеОтпускаРаботникамОрганизаций.Начисления КАК НачислениеОтпускаРаботникамОрганизацийНачисления
	|		ПО НачислениеОтпускаРаботникамОрганизаций.Ссылка = НачислениеОтпускаРаботникамОрганизацийНачисления.Ссылка
	|			И (ВЫБОР
	|				КОГДА НачислениеОтпускаРаботникамОрганизаций.ПорядокРасчетаКомпенсацииОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения)
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения)
	|			КОНЕЦ = НачислениеОтпускаРаботникамОрганизацийНачисления.ВидРасчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО НачислениеОтпускаРаботникамОрганизаций.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И (ВЫБОР
	|				КОГДА НачислениеОтпускаРаботникамОрганизаций.ДатаНачалаОсновногоОтпуска = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ВЫБОР
	|							КОГДА НачислениеОтпускаРаботникамОрганизаций.ДатаНачалаДополнительногоОтпуска = ДАТАВРЕМЯ(1, 1, 1)
	|								ТОГДА НачислениеОтпускаРаботникамОрганизаций.Дата
	|							ИНАЧЕ НачислениеОтпускаРаботникамОрганизаций.ДатаНачалаДополнительногоОтпуска
	|						КОНЕЦ
	|				ИНАЧЕ НачислениеОтпускаРаботникамОрганизаций.ДатаНачалаОсновногоОтпуска
	|			КОНЕЦ >= РаботникиОрганизаций.Период)
	|ГДЕ
	|	(НачислениеОтпускаРаботникамОрганизаций.РезультатКомпенсацииОтпуска <> 0
	|			ИЛИ НачислениеОтпускаРаботникамОрганизаций.СторноРезультатКомпенсацииОтпуска <> 0)
	|	И (НЕ НачислениеОтпускаРаботникамОрганизаций.Проведен)
	|	И НачислениеОтпускаРаботникамОрганизацийНачисления.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеОтпускаРаботникамОрганизаций.Ссылка,
	|	ВЫБОР
	|		КОГДА НачислениеОтпускаРаботникамОрганизаций.ДатаНачалаОсновногоОтпуска = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВЫБОР
	|					КОГДА НачислениеОтпускаРаботникамОрганизаций.ДатаНачалаДополнительногоОтпуска = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА НачислениеОтпускаРаботникамОрганизаций.Дата
	|					ИНАЧЕ НачислениеОтпускаРаботникамОрганизаций.ДатаНачалаДополнительногоОтпуска
	|				КОНЕЦ
	|		ИНАЧЕ НачислениеОтпускаРаботникамОрганизаций.ДатаНачалаОсновногоОтпуска
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	#Если Клиент Тогда
		ТекстСообщения = "Обработка документов Начисление отпуска работникам организаций, часть II";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	
	Если Запрос.Выполнить().Выгрузить()[0].Количество <> 0 Тогда // обрабатывать нечего - остальные запросы исполнять не будем
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеОтпускаРаботникамОрганизаций.Ссылка,
		|	ВЫБОР
		|		КОГДА НачислениеОтпускаРаботникамОрганизаций.ПериодРегистрации > НачислениеОтпускаРаботникамОрганизаций.Дата
		|			ТОГДА НачислениеОтпускаРаботникамОрганизаций.ПериодРегистрации
		|		КОГДА КОНЕЦПЕРИОДА(НачислениеОтпускаРаботникамОрганизаций.ПериодРегистрации, МЕСЯЦ) < НачислениеОтпускаРаботникамОрганизаций.Дата
		|			ТОГДА КОНЕЦПЕРИОДА(НачислениеОтпускаРаботникамОрганизаций.ПериодРегистрации, МЕСЯЦ)
		|		ИНАЧЕ НачислениеОтпускаРаботникамОрганизаций.Дата
		|	КОНЕЦ КАК ПериодРегистрации,
		|	ВЫБОР
		|		КОГДА НачислениеОтпускаРаботникамОрганизаций.ПорядокРасчетаКомпенсацииОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
		|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения)
		|	КОНЕЦ КАК ВидРасчета,
		|	НачислениеОтпускаРаботникамОрганизаций.Сотрудник,
		|	НачислениеОтпускаРаботникамОрганизаций.Физлицо,
		|	ВЫБОР
		|		КОГДА НачислениеОтпускаРаботникамОрганизаций.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА НачислениеОтпускаРаботникамОрганизаций.Организация
		|		ИНАЧЕ НачислениеОтпускаРаботникамОрганизаций.Организация.ГоловнаяОрганизация
		|	КОНЕЦ КАК Организация,
		|	НачислениеОтпускаРаботникамОрганизаций.РезультатКомпенсацииОтпуска,
		|	НачислениеОтпускаРаботникамОрганизаций.СторноРезультатКомпенсацииОтпуска,
		|	НачислениеОтпускаРаботникамОрганизаций.ДнейЧасовКомпенсацииОтпуска,
		|	НачислениеОтпускаРаботникамОрганизаций.ДнейЧасовКомпенсацииОтпуска КАК Показатель1,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= ДокументыКОбработке.ДатаНачалаСобытия
		|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
		|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
		|	КОНЕЦ КАК ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА НачислениеОтпускаРаботникамОрганизаций.ИспользоватьСреднеЧасовойЗаработок
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|	КОНЕЦ КАК ВидУчетаВремени,
		|	ДокументыКОбработке.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= ДокументыКОбработке.ДатаНачалаСобытия
		|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
		|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	НачислениеОтпускаРаботникамОрганизаций.Организация КАК ОбособленноеПодразделение,
		|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДокументыКОбработке.ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, -ПараметрыВидаРасчетаКомпенсация.ЧислоМесяцев )КАК ПериодРасчетаСреднегоЗаработкаНачало,
		|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДокументыКОбработке.ДатаНачалаСобытия, МЕСЯЦ), СЕКУНДА, -1) КАК ПериодРасчетаСреднегоЗаработкаОкончание,
		|	НачислениеОтпускаРаботникамОрганизаций.ПерерассчитываемыйДокумент
		|ИЗ
		|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК НачислениеОтпускаРаботникамОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
		|		ПО НачислениеОтпускаРаботникамОрганизаций.Ссылка = ДокументыКОбработке.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацииСрезПоследних
		|		ПО НачислениеОтпускаРаботникамОрганизаций.Сотрудник = РаботникиОрганизацииСрезПоследних.Сотрудник
		|			И (ДокументыКОбработке.ДатаКадровогоДвижения = РаботникиОрганизацииСрезПоследних.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ПараметрыВидаРасчетаКомпенсация
		|		ПО (ПараметрыВидаРасчетаКомпенсация.Ссылка = ВЫБОР
		|				КОГДА НачислениеОтпускаРаботникамОрганизаций.ПорядокРасчетаКомпенсацииОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
		|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения)
		|				ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения)
		|			КОНЕЦ)
		|ГДЕ
		|	НачислениеОтпускаРаботникамОрганизаций.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДокументыКОбработке КАК Документы)"; 
		
		ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
		#Если Клиент Тогда
			ВсегоДоков = ВыборкаРегистраторов.Количество();
			Номер = 1;
			Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
		#КонецЕсли
		Пока ВыборкаРегистраторов.Следующий() Цикл
			Объект = ВыборкаРегистраторов.Ссылка.ПолучитьОбъект();
			Объект.ОбменДанными.Загрузка = Истина;
			Если ВыборкаРегистраторов.РезультатКомпенсацииОтпуска <> 0 Тогда
				НоваяСтрока = Объект.Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаРегистраторов);
				НоваяСтрока.Авторасчет			= Истина;
				НоваяСтрока.Результат			= ВыборкаРегистраторов.РезультатКомпенсацииОтпуска;
				НоваяСтрока.ОплаченоДнейЧасов	= ВыборкаРегистраторов.ДнейЧасовКомпенсацииОтпуска;
			КонецЕсли;
			Если ВыборкаРегистраторов.СторноРезультатКомпенсацииОтпуска <> 0 Тогда
				НоваяСтрока = Объект.Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаРегистраторов);
				НоваяСтрока.Сторно				= Истина;
				НоваяСтрока.СторнируемыйДокумент= ВыборкаРегистраторов.ПерерассчитываемыйДокумент;
				НоваяСтрока.Результат			= ВыборкаРегистраторов.СторноРезультатКомпенсацииОтпуска;
				НоваяСтрока.ОплаченоДнейЧасов	= -ВыборкаРегистраторов.ДнейЧасовКомпенсацииОтпуска;
			КонецЕсли;
			#Если Клиент Тогда
				Если Номер % 30 = 0 Тогда
					Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
				КонецЕсли;
				Номер = Номер + 1;
			#КонецЕсли
			Объект.Записать();
		КонецЦикла;
		
	КонецЕсли;

	#Если Клиент Тогда
		ТекстСообщения = "Обработка документов Невыходы в организациях";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисления.Ссылка КАК ВидРасчета
	|ПОМЕСТИТЬ ВТНеоплачиваемыеНевыходы
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	(НЕ ОсновныеНачисления.Предопределенный)
	|	И ОсновныеНачисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.НулеваяСумма)
	|	И ОсновныеНачисления.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Невыход)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыУчебный)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыПоТКРФ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НевыходыВОрганизацияхНачисления.Ссылка КАК Ссылка,
	|	НевыходыВОрганизацияхНачисления.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.НевыходыВОрганизациях.Начисления КАК НевыходыВОрганизацияхНачисления
	|ГДЕ
	|	(НЕ НевыходыВОрганизацияхНачисления.ВидРасчета В
	|				(ВЫБРАТЬ
	|					Невыходы.ВидРасчета
	|				ИЗ
	|					ВТНеоплачиваемыеНевыходы КАК Невыходы))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаРегистраторов.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("Ссылка") Цикл
		Объект = ВыборкаРегистраторов.Ссылка.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = Истина;
		Пока ВыборкаРегистраторов.Следующий() Цикл
			СтрокаДокумента = Объект.Начисления.Найти(ВыборкаРегистраторов.НомерСтроки,"НомерСтроки");
			Если СтрокаДокумента <> Неопределено Тогда
				СтрокаДокумента.ЗависимаяЗапись = Истина
			КонецЕсли;
			#Если Клиент Тогда
				Если Номер % 30 = 0 Тогда
					Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
				КонецЕсли;
				Номер = Номер + 1;
			#КонецЕсли
		КонецЦикла;
		Объект.Записать();
	КонецЦикла;
	
	#Если Клиент Тогда
		ТекстСообщения = "Обработка документов Расчет при увольнении работника организаций";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетПриУвольненииРаботникаОрганизацийНачисления.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДокументыКОбработке
	|ИЗ
	|	Документ.РасчетПриУвольненииРаботникаОрганизаций.Начисления КАК РасчетПриУвольненииРаботникаОрганизацийНачисления
	|ГДЕ
	|	РасчетПриУвольненииРаботникаОрганизацийНачисления.ПериодРасчетаСреднегоЗаработкаНачало = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Если Запрос.Выполнить().Выгрузить()[0].Количество <> 0 Тогда // обрабатывать нечего - остальные запросы исполнять не будем

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетПриУвольнении.Ссылка КАК Ссылка,
		|	РасчетПриУвольнении.НомерСтроки КАК НомерСтроки,
		|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РасчетПриУвольнении.Ссылка.ДатаУвольнения, МЕСЯЦ), МЕСЯЦ, -ВЫБОР
		|			КОГДА РасчетПриУвольнении.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)
		|				ТОГДА ПараметрыВидаРасчетаНачисление.ЧислоМесяцев
		|			КОГДА  ПараметрыВидаРасчетаНачисление.Ссылка ЕСТЬ НЕ NULL 
		|					ТОГДА ПараметрыВидаРасчетаНачисление.ЧислоМесяцев
		|			ИНАЧЕ ПараметрыВидаРасчетаУдержание.ПериодРасчетаСреднегоЗаработка
		|		КОНЕЦ) КАК ПериодРасчетаСреднегоЗаработкаНачало,
		|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РасчетПриУвольнении.Ссылка.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, -1) КАК ПериодРасчетаСреднегоЗаработкаОкончание
		|ИЗ
		|	Документ.РасчетПриУвольненииРаботникаОрганизаций.Начисления КАК РасчетПриУвольнении
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций КАК ПараметрыВидаРасчетаУдержание
		|		ПО РасчетПриУвольнении.ВидРасчета = ПараметрыВидаРасчетаУдержание.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ПараметрыВидаРасчетаНачисление
		|		ПО РасчетПриУвольнении.ВидРасчета = ПараметрыВидаРасчетаНачисление.Ссылка
		|ГДЕ
		|	РасчетПриУвольнении.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДокументыКОбработке КАК Документы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки";
	
		ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
		#Если Клиент Тогда
			ВсегоДоков = ВыборкаРегистраторов.Количество();
			Номер = 1;
			Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
		#КонецЕсли
		Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("Ссылка") Цикл
			Объект = ВыборкаРегистраторов.Ссылка.ПолучитьОбъект();
			Объект.ОбменДанными.Загрузка = Истина;
			Пока ВыборкаРегистраторов.Следующий() Цикл
				СтрокаДокумента = Объект.Начисления.Найти(ВыборкаРегистраторов.НомерСтроки,"НомерСтроки");
				Если СтрокаДокумента <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДокумента,ВыборкаРегистраторов);
				КонецЕсли;
				#Если Клиент Тогда
					Если Номер % 30 = 0 Тогда
						Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
					КонецЕсли;
					Номер = Номер + 1;
				#КонецЕсли
			КонецЦикла;
			Объект.Записать();
		КонецЦикла;
		
		#Если Клиент Тогда
			Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.7 РБ

Процедура ЗаполненитьСотрудниковВТрудовыхДоговорах() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТрудовойДоговор.Ссылка,
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	ТрудовойДоговор.ФизЛицо КАК ТДФизЛицо,
	|	СотрудникиОрганизаций.Физлицо КАК СотрудникФизЛицо
	|ИЗ
	|	Документ.ТрудовойДоговор КАК ТрудовойДоговор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО ТрудовойДоговор.ФизЛицо = СотрудникиОрганизаций.Физлицо
	|			И ТрудовойДоговор.ВидЗанятости = СотрудникиОрганизаций.ВидЗанятости";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Если ЗначениеЗаполнено(Выборка.Сотрудник) тогда
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Сотрудник = Выборка.Сотрудник;
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Исключение
				Сообщить("Трудовой договор: " + Выборка.Ссылка + ": не записан!", СтатусСообщения.Важное);
            КонецПопытки;
			
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.8 РБ

Процедура ЗаполнитьТарифныеСтавкиПервогоРазряда()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТарифнаяСтавка", Перечисления.ВидыПараметровДляРасчетаЗарплаты.Ставка1разрядаОрганизации);
	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РазмерыПараметровДляРасчетаОрганизаций.Период,
	|	РазмерыПараметровДляРасчетаОрганизаций.Организация,
	|	РазмерыПараметровДляРасчетаОрганизаций.Категория,
	|	РазмерыПараметровДляРасчетаОрганизаций.Размер
	|ИЗ
	|	РегистрСведений.РазмерыПараметровДляРасчетаОрганизаций КАК РазмерыПараметровДляРасчетаОрганизаций
	|ГДЕ
	|	РазмерыПараметровДляРасчетаОрганизаций.ВидПараметра = &ТарифнаяСтавка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		Если СокрЛП(Выборка.Категория) = "" тогда
			Наименование = "Основная";
		Иначе
			Наименование = СокрЛП(Выборка.Категория);
		КонецЕсли;
		ТарифнаяСтавкаСсылка = Справочники.ТарифныеСтавкиПервогоРазряда.НайтиПоНаименованию(Наименование);
		Если ТарифнаяСтавкаСсылка.Пустая() тогда
			ТарифнаяСтавкаОбъект = Справочники.ТарифныеСтавкиПервогоРазряда.СоздатьЭлемент();
			ТарифнаяСтавкаОбъект.Наименование = Наименование;
			ТарифнаяСтавкаОбъект.Записать();
			ТарифнаяСтавкаСсылка = ТарифнаяСтавкаОбъект.Ссылка;
		КонецЕсли;
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период = Выборка.Период;
		Запись.Организация = Выборка.Организация;
		Запись.ТарифнаяСтавка = ТарифнаяСтавкаСсылка;
		Запись.Размер = Выборка.Размер;
	
	КонецЦикла;
	
	НаборЗаписей.Записать();	
	
	ЗапросПриказы = Новый Запрос;
	
	ЗапросПриказы.Текст =
	"ВЫБРАТЬ
	|	ПриемНаРаботуВОрганизацию.Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
	|ГДЕ
	|	ПриемНаРаботуВОрганизацию.Проведен = ИСТИНА";
	
	ВыборкаПриказы = ЗапросПриказы.Выполнить().Выбрать();
	
	КоличествоЗаписей = ВыборкаПриказы.Количество();

	ЗапросТабличнаяЧастьПриказов = Новый Запрос;
	ЗапросТабличнаяЧастьПриказов.Текст =
	"ВЫБРАТЬ
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.НомерСтроки,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Должность.Категория.Наименование КАК Категория
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|ГДЕ
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &Ссылка";
	
	ИндексЗаписи = 1;
	Пока ВыборкаПриказы.Следующий() цикл
		
		#Если Клиент Тогда
			Состояние("Обрабатывается документ " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли

		
		ИндексЗаписи = ИндексЗаписи + 1;

		ЗапросТабличнаяЧастьПриказов.УстановитьПараметр("Ссылка", ВыборкаПриказы.Ссылка);
		ДокументОбъект = ВыборкаПриказы.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		Выборка = ЗапросТабличнаяЧастьПриказов.Выполнить().Выбрать();
		НачатьТранзакцию();
		Пока Выборка.Следующий() цикл
			ТарифнаяСтавка = Справочники.ТарифныеСтавкиПервогоРазряда.НайтиПоНаименованию(Выборка.Категория);
			Если Не ЗначениеЗаполнено(ТарифнаяСтавка) тогда
				 ТарифнаяСтавка = Справочники.ТарифныеСтавкиПервогоРазряда.НайтиПоНаименованию("Основная");
			КонецЕсли;
			
			Строка = ДокументОбъект.РаботникиОрганизации.Найти(Выборка.НомерСтроки, "НомерСтроки");
			Строка.ТарифнаяСтавкаПервогоРазряда = ТарифнаяСтавка;
			
			
		КонецЦикла;
		ДокументОбъект.Записать();
		ЗафиксироватьТранзакцию();

	КонецЦикла;
		
	ЗапросКадровыеПеремещения = Новый Запрос;
	
	ЗапросКадровыеПеремещения.Текст =
	"ВЫБРАТЬ
	|	КадровоеПеремещениеОрганизаций.Ссылка
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
	|ГДЕ
	|	КадровоеПеремещениеОрганизаций.Проведен = ИСТИНА";
	
	ВыборкаКадровыеПеремещения = ЗапросКадровыеПеремещения.Выполнить().Выбрать();
	
	КоличествоЗаписей = ВыборкаКадровыеПеремещения.Количество();

	ЗапросТабличнаяЧастьКадровыхПеремещений = Новый Запрос;
	ЗапросТабличнаяЧастьКадровыхПеремещений.Текст =
	"ВЫБРАТЬ
	|	КадровоеПеремещениеОрганизаций.НомерСтроки,
	|	КадровоеПеремещениеОрганизаций.Должность.Категория.Наименование КАК Категория
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизаций
	|ГДЕ
	|	КадровоеПеремещениеОрганизаций.Ссылка = &Ссылка";

	
		ИндексЗаписи = 1;
	Пока ВыборкаКадровыеПеремещения.Следующий() цикл
		
		#Если Клиент Тогда
			Состояние("Обрабатывается документ " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли

		
		ИндексЗаписи = ИндексЗаписи + 1;

		ЗапросТабличнаяЧастьКадровыхПеремещений.УстановитьПараметр("Ссылка", ВыборкаКадровыеПеремещения.Ссылка);
		ДокументОбъект = ВыборкаКадровыеПеремещения.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		Выборка = ЗапросТабличнаяЧастьКадровыхПеремещений.Выполнить().Выбрать();
		НачатьТранзакцию();
		Пока Выборка.Следующий() цикл
			ТарифнаяСтавка = Справочники.ТарифныеСтавкиПервогоРазряда.НайтиПоНаименованию(Выборка.Категория);
			Если Не ЗначениеЗаполнено(ТарифнаяСтавка) тогда
				 ТарифнаяСтавка = Справочники.ТарифныеСтавкиПервогоРазряда.НайтиПоНаименованию("Основная");
			КонецЕсли;
			
			Строка = ДокументОбъект.РаботникиОрганизации.Найти(Выборка.НомерСтроки, "НомерСтроки");
			Строка.ТарифнаяСтавкаПервогоРазряда = ТарифнаяСтавка;
			
			
		КонецЦикла;
		ДокументОбъект.Записать();
		ЗафиксироватьТранзакцию();

	КонецЦикла;
	
	ЗапросТрудовыеДоговора = Новый Запрос;
	
	ЗапросТрудовыеДоговора.Текст =
	"ВЫБРАТЬ
	|	ТрудовойДоговор.Ссылка,
	|	ТрудовойДоговор.Должность.Категория КАК Категория
	|ИЗ
	|	Документ.ТрудовойДоговор КАК ТрудовойДоговор
	|ГДЕ
	|	ТрудовойДоговор.Проведен = ИСТИНА";
	
	ВыборкаТрудовыеДоговора = ЗапросТрудовыеДоговора.Выполнить().Выбрать();
	
	КоличествоЗаписей = ВыборкаТрудовыеДоговора.Количество();

	ИндексЗаписи = 1;
	Пока ВыборкаТрудовыеДоговора.Следующий() цикл
		
		#Если Клиент Тогда
			Состояние("Обрабатывается документ " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли

		
		ИндексЗаписи = ИндексЗаписи + 1;

	
		ДокументОбъект = ВыборкаТрудовыеДоговора.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		НачатьТранзакцию();
		ТарифнаяСтавка = Справочники.ТарифныеСтавкиПервогоРазряда.НайтиПоНаименованию(ВыборкаТрудовыеДоговора.Категория);
		Если Не ЗначениеЗаполнено(ТарифнаяСтавка) тогда
			 ТарифнаяСтавка = Справочники.ТарифныеСтавкиПервогоРазряда.НайтиПоНаименованию("Основная");
		КонецЕсли;
			
		ДокументОбъект.ТарифнаяСтавкаПервогоРазряда = ТарифнаяСтавка;
		
			
		ДокументОбъект.Записать();
		ЗафиксироватьТранзакцию();

	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.9 РБ

Процедура СформироватьНачисления() 
	
	ТекРабочаяДата = ОбщегоНазначения.ПолучитьРабочуюДату();

	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОрганизации.Следующий() Цикл
	
		ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(ВыборкаОрганизации.Организация);
		//ЗапросСотрудники = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("парамПериод",ТекРабочаяДата); 
		Запрос.УстановитьПараметр("парамГоловнаяОрганизация",ГоловнаяОрганизация);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
		|	РаботникиОрганизации.Должность,
		|	РаботникиОрганизации.ПодразделениеОрганизации,
		|	РаботникиОрганизации.УсловияТрудаИзмерение,
		|	РаботникиОрганизации.ВидДеятельностиИзмерение,
		|	РаботникиОрганизации.Период
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамПериод, Организация = &парамГоловнаяОрганизация) КАК РаботникиОрганизации
		|ГДЕ
		|	РаботникиОрганизации.ПричинаИзмененияСостоянияЗавершения <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)";
		
		Запрос.Выполнить();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
		|	РаботникиОрганизации.Должность,
		|	РаботникиОрганизации.ПодразделениеОрганизации,
		|	РаботникиОрганизации.УсловияТрудаИзмерение,
		|	РаботникиОрганизации.ВидДеятельностиИзмерение,
		|	РаботникиОрганизации.Период
		|ПОМЕСТИТЬ ВТСписокРаботников
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамПериод, Организация = &парамГоловнаяОрганизация) КАК РаботникиОрганизации
		|ГДЕ
		|	РаботникиОрганизации.ПричинаИзмененияСостоянияЗавершения <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
		
		Запрос.Выполнить();
		
		//ЗапросНадбавки =Новый Запрос;
		//ЗапросНадбавки.УстановитьПараметр("парамПериод",ТекРабочаяДата);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Работники.Сотрудник,
		|	ВЫБОР
		|		КОГДА Работники.Период >= НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Период
		|				ИЛИ НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Период ЕСТЬ NULL 
		|			ТОГДА Работники.Период
		|		ИНАЧЕ НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Период
		|	КОНЕЦ КАК ДатаДействия,
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.ВидНадбавки КАК ВидРасчета,
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель1 КАК Показатель1,
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель2 КАК Показатель2,
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель3 КАК Показатель3,
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель4 КАК Показатель4,
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель5 КАК Показатель5,
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель6 КАК Показатель6,
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта1 КАК Валюта1,
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта2 КАК Валюта2,
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта3 КАК Валюта3,
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта4 КАК Валюта4,
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта5 КАК Валюта5,
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта6 КАК Валюта6,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать) КАК Действие
		|ИЗ
		|	ВТСписокРаботников КАК Работники
		|	ЛЕВОЕ СОЕДИНЕНИЕ 	РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(&парамПериод) КАК НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних
		|		ПО Работники.ПодразделениеОрганизации = НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.ПодразделениеОрганизации
		|			И Работники.Должность = НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Должность
		|			И Работники.УсловияТрудаИзмерение = НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.УсловияТрудаИзмерение
		|			И Работники.ВидДеятельностиИзмерение = НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.ВидДеятельностиИзмерение
		|	ГДЕ
		|	(НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель1 > 0
		|	ИЛИ НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель2 > 0
		|	ИЛИ НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель3 > 0
		|	ИЛИ НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель4 > 0
		|	ИЛИ НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель5 > 0
		|	ИЛИ НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель6 > 0)";
		ТаблицаНадбавок = Запрос.Выполнить().Выгрузить();
		Если  ТаблицаНадбавок.Количество() > 0 тогда
			ДокументОбъект = Документы.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.СоздатьДокумент();
			ДокументОбъект.Дата = ТекРабочаяДата;
			ДокументОбъект.Организация = ВыборкаОрганизации.Организация;
			ДокументОбъект.Комментарий = "Документ создан автоматически, перенос надбавок по штатному расписанию в плановые начисления";
			ДокументОбъект.ОсновныеНачисления.Загрузить(ТаблицаНадбавок);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.10 РБ

Процедура ЗаполнитьНовыеВидыРасчетов2510()
	
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Справочники.КатегорииРасчетов;
	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	ЕСНСпособыОтражения      = Справочники.ДоходыЕСН;
	КодыДоходаПоСт255		 = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК;
	КодДоходаНДФЛПоУмолчанию = ДоходыНДФЛ.КодДоходаПоУмолчанию;
	КодДоходаЕСНПоУмолчанию  = ЕСНСпособыОтражения.ОблагаетсяПолностью;
	ПособияЗаСчетФСС		 = ЕСНСпособыОтражения.БольничныйИзФСЗН;
	
	НеОтражатьВБухУчете   = Справочники.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете;
	ПустойСпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();
	СпособОтраженияПоБазовымРасчетам = Справочники.СпособыОтраженияЗарплатыВРеглУчете.РаспределятьПоБазовымНачислениям;
	ПланСчетов = ПланыСчетов.Хозрасчетный;
	СпособУчетПоУмолчанию = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию;
    ПВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	УчетВремени = Справочники.КлассификаторИспользованияРабочегоВремени;

	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаСверхурочныхПоНарядам,				   СпРасчета.ФиксированнойСуммой, Перечисления.ВидыВремени.ОтработанноеСверхНормы, 		            Категории.Первичное,			УчетВремени.Сверхурочные, 		Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию,НеОтражатьВБухУчете , КодыДоходаПоСт255.ДоплатаЗаСверхурочные,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДоплатаЗаСверхурочныеПоНарядам,			   СпРасчета.ФиксированнойСуммой, Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,			УчетВремени.Сверхурочные, 		Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию,НеОтражатьВБухУчете , КодыДоходаПоСт255.ДоплатаЗаСверхурочные,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаЗаРаботуВПраздникиИВыходныеПоНарядам,  СпРасчета.ФиксированнойСуммой, Перечисления.ВидыВремени.ОтработанноеСверхНормы, 		            Категории.Первичное,			УчетВремени.Праздники, 		Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию,НеОтражатьВБухУчете , КодыДоходаПоСт255.ДоплатаЗаСверхурочные,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДоплатаЗаРаботуВПраздникиИВыходныеПоНарядам, СпРасчета.ФиксированнойСуммой, Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,			УчетВремени.Праздники, 		Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию,НеОтражатьВБухУчете , КодыДоходаПоСт255.ДоплатаЗаСверхурочные,,,Ложь);
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.СдельнаяТарифнаяЧасть, СпРасчета.СделкаПоЧасовойТарифнойСтавке, Перечисления.ВидыВремени.ОтработанноеВПределахНормы, 		        Категории.Первичное,			УчетВремени.Работа, 		Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию,ПустойСпособОтражения , КодыДоходаПоСт255.СдельноПремиальная,,,Ложь);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.СдельныйПриработок,	 СпРасчета.СдельныйПриработок, 			  Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,			, 		Истина, Ложь,   КодДоходаНДФЛПоУмолчанию, КодДоходаЕСНПоУмолчанию,ПустойСпособОтражения , КодыДоходаПоСт255.СдельноПремиальная,,,Ложь);
	
	
	
КонецПроцедуры

Процедура ЗаполнитьРегистрСведенийРасценки()
	
	ЗапросОрганизации = Новый Запрос;
	
	ЗапросОрганизации.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	ВыборкаОрганизации = ЗапросОрганизации.Выполнить().Выбрать();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТехнологическиеОперации.Ссылка,
	|	ТехнологическиеОперации.Расценка,
	|	ТехнологическиеОперации.Валюта
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации";
	
	Набор = РегистрыСведений.Расценки.СоздатьНаборЗаписей();
	Период = Дата("19000101");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОрганизации.Следующий() Цикл
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			Запись = Набор.Добавить();
			Запись.Период = Период;
			Запись.Организация = ВыборкаОрганизации.Ссылка;
			Запись.ТехнологическаяОперация = Выборка.Ссылка;
			Запись.Валюта = Выборка.Валюта;
			Запись.Расценка = Выборка.Расценка;
		КонецЦикла;
	КонецЦикла;
	
	Набор.Записать();

КонецПроцедуры

Процедура ПерейтиНаСправочникКатегорииРасчетов()

	ЗависимоеВторогоУровня = НайтиСоздатьКатегорию("00002","Зависимое второго уровня");
	ЗависимоеТретьегоУровня = НайтиСоздатьКатегорию("00003","Зависимое третьего уровня");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗависимоеВторогоУровня", ЗависимоеВторогоУровня); 
	Запрос.УстановитьПараметр("ЗависимоеТретьегоУровня", ЗависимоеТретьегоУровня); 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеНачисленияОрганизаций.Ссылка,
	|	ВЫБОР
	|		КОГДА ДополнительныеНачисленияОрганизаций.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.Первичное)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.Первичное)
	|		КОГДА ДополнительныеНачисленияОрганизаций.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ЗависимоеПервогоУровня)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.ЗависимоеПервогоУровня)
	|		КОГДА ДополнительныеНачисленияОрганизаций.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ЗависимоеВторогоУровня)
	|			ТОГДА &ЗависимоеВторогоУровня
	|		КОГДА ДополнительныеНачисленияОрганизаций.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ЗависимоеТретьегоУровня)
	|			ТОГДА &ЗависимоеТретьегоУровня
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.ПустаяСсылка)
	|	КОНЕЦ КАК КатегорияНачисления
	|ИЗ
	|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
	|ГДЕ
	|	ДополнительныеНачисленияОрганизаций.КатегорияНачисления = ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.ПустаяСсылка)
	|	И ДополнительныеНачисленияОрганизаций.УдалитьКатегорияРасчета <> ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияОрганизаций.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.Первичное)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.Первичное)
	|		КОГДА ОсновныеНачисленияОрганизаций.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ЗависимоеПервогоУровня)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.ЗависимоеПервогоУровня)
	|		КОГДА ОсновныеНачисленияОрганизаций.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ЗависимоеВторогоУровня)
	|			ТОГДА &ЗависимоеВторогоУровня
	|		КОГДА ОсновныеНачисленияОрганизаций.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ЗависимоеТретьегоУровня)
	|			ТОГДА &ЗависимоеТретьегоУровня
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.ПустаяСсылка)
	|	КОНЕЦ
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.КатегорияНачисления= ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.ПустаяСсылка)
	|	И ОсновныеНачисленияОрганизаций.УдалитьКатегорияРасчета <> ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдержанияОрганизаций.Ссылка,
	|	ВЫБОР
	|		КОГДА УдержанияОрганизаций.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.Первичное)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.Первичное)
	|		КОГДА УдержанияОрганизаций.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ЗависимоеПервогоУровня)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.ЗависимоеПервогоУровня)
	|		КОГДА УдержанияОрганизаций.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ЗависимоеВторогоУровня)
	|			ТОГДА &ЗависимоеВторогоУровня
	|		КОГДА УдержанияОрганизаций.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ЗависимоеТретьегоУровня)
	|			ТОГДА &ЗависимоеТретьегоУровня
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.ПустаяСсылка)
	|	КОНЕЦ
	|ИЗ
	|	ПланВидовРасчета.УдержанияОрганизаций КАК УдержанияОрганизаций
	|ГДЕ
	|	УдержанияОрганизаций.КатегорияНачисления = ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.ПустаяСсылка)
	|	И УдержанияОрганизаций.УдалитьКатегорияРасчета <> ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправленческиеНачисления.Ссылка,
	|	ВЫБОР
	|		КОГДА УправленческиеНачисления.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.Первичное)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.Первичное)
	|		КОГДА УправленческиеНачисления.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ЗависимоеПервогоУровня)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.ЗависимоеПервогоУровня)
	|		КОГДА УправленческиеНачисления.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ЗависимоеВторогоУровня)
	|			ТОГДА &ЗависимоеВторогоУровня
	|		КОГДА УправленческиеНачисления.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ЗависимоеТретьегоУровня)
	|			ТОГДА &ЗависимоеТретьегоУровня
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.ПустаяСсылка)
	|	КОНЕЦ
	|ИЗ
	|	ПланВидовРасчета.УправленческиеНачисления КАК УправленческиеНачисления
	|ГДЕ
	|	УправленческиеНачисления.КатегорияНачисления = ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.ПустаяСсылка)
	|	И УправленческиеНачисления.УдалитьКатегорияРасчета <> ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправленческиеУдержания.Ссылка,
	|	ВЫБОР
	|		КОГДА УправленческиеУдержания.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.Первичное)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.Первичное)
	|		КОГДА УправленческиеУдержания.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ЗависимоеПервогоУровня)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.ЗависимоеПервогоУровня)
	|		КОГДА УправленческиеУдержания.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ЗависимоеВторогоУровня)
	|			ТОГДА &ЗависимоеВторогоУровня
	|		КОГДА УправленческиеУдержания.УдалитьКатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ЗависимоеТретьегоУровня)
	|			ТОГДА &ЗависимоеТретьегоУровня
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.ПустаяСсылка)
	|	КОНЕЦ
	|ИЗ
	|	ПланВидовРасчета.УправленческиеУдержания КАК УправленческиеУдержания
	|ГДЕ
	|	УправленческиеУдержания.КатегорияНачисления = ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.ПустаяСсылка)
	|	И УправленческиеУдержания.УдалитьКатегорияРасчета <> ЗНАЧЕНИЕ(Перечисление.УдалитьКатегорииРасчетов.ПустаяСсылка)";
	
	#Если Клиент Тогда
		ТекстСообщения = "Обработка видов расчета";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаРегистраторов.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	Пока ВыборкаРегистраторов.Следующий() Цикл
		ОбновитьОбъектПоСтруктуре(ВыборкаРегистраторов);
		#Если Клиент Тогда
			Если Номер % 30 = 0 Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			КонецЕсли;
			Номер = Номер + 1;
		#КонецЕсли
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
КонецПроцедуры // ПерейтиНаСправочникКатегорииРасчетов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.11 РБ

Процедура  ИзменитьУчетнуюПолитикиПоПерсоналуОрганизаций()
	
	// записываем текущее значение учетной политики по учету персоналу
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоПерсоналуОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Записывать = Ложь;
	Для каждого СтрокаНабора Из НаборЗаписей Цикл
		Если СтрокаНабора.ПроверкаШтатногоРасписания Тогда // при обновлении на новую редакцию этот ресурс еще не установлен
			СтрокаНабора.ПроверкаШтатногоРасписания = Ложь;
			Записывать = Истина;
		КонецЕсли;
	КонецЦикла; 
	Если Записывать Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
	глЗначениеПеременнойУстановить("глУчетнаяПолитикаПоПерсоналуОрганизации", ОбщегоНазначенияЗК.ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации(), Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.12 РБ

Процедура ПроставитьКатегорию()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка,
	|	СотрудникиОрганизаций.Физлицо.СтатусКатегория КАК СтатусКатегория
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	(НЕ СотрудникиОрганизаций.ЭтоГруппа)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.СтатусКатегория = Выборка.СтатусКатегория;
		Объект.Записать();
	КонецЦикла;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.13 РБ

Процедура ЗаполнитьУдержания()
	ПВРУд   = ПланыВидовРасчета.УдержанияОрганизаций;
    СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Справочники.КатегорииРасчетов;

	УстановитьРеквизитыУдержанияОрганизации(ПВРУд.КомиссионныйСбор			, СпРасчета.КомиссионыйСбор							, Категории.ЗависимоеПервогоУровня,);


КонецПроцедуры

Процедура ПроставитьСотрудников() 	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций КАК НачислениеЗарплатыРаботникамОрганизаций
	|ГДЕ
	|	НачислениеЗарплатыРаботникамОрганизаций.Проведен";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.Ссылка,
	|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.НомерСтроки,
	|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.ФизЛицо,
	|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.Налог,
	|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.МесяцНалоговогоПериода,
	|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.ПроцентФСЗН,
	|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.ВидДеятельности,
	|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.ПроцентППС,
	|	ЕСТЬNULL(РаботникиОрганизаций.Сотрудник, СотрудникиОрганизаций.Ссылка) КАК Сотрудник
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ПенсионныйФонд КАК НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.ФизЛицо = РаботникиОрганизаций.Сотрудник.ФизЛицо
	|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
	|			И (РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.ФизЛицо = СотрудникиОрганизаций.Физлицо
	|			И (СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда))
	|ГДЕ
	|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.Ссылка = &Ссылка";
	
	КоличествоЗаписей = ВыборкаДокументов.Количество();
	ИндексЗаписи = 1;
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Запрос.УстановитьПараметр("Ссылка",ВыборкаДокументов.Ссылка);
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		#Если Клиент Тогда
			Состояние("Обрабатывается документы Начисление зарплаты работникам организации " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
 		ДокументОбъект.ПенсионныйФонд.Загрузить(Запрос.Выполнить().Выгрузить());
		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        ИндексЗаписи = ИндексЗаписи + 1;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетЕСН.Ссылка
	|ИЗ
	|	Документ.РасчетЕСН КАК РасчетЕСН
	|ГДЕ
	|	РасчетЕСН.Проведен";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
    Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетЕСНИсчисленныйЕСН.Ссылка,
	|	РасчетЕСНИсчисленныйЕСН.НомерСтроки,
	|	РасчетЕСНИсчисленныйЕСН.ФизЛицо,
	|	РасчетЕСНИсчисленныйЕСН.ПенсионныйФонд,
	|	РасчетЕСНИсчисленныйЕСН.ФСЗН,
	|	РасчетЕСНИсчисленныйЕСН.ЕдиныйПлатеж,
	|	РасчетЕСНИсчисленныйЕСН.ОбязательноеСтрахование,
	|	РасчетЕСНИсчисленныйЕСН.ПериодВзаиморасчетов,
	|	РасчетЕСНИсчисленныйЕСН.ПроцентФСЗН,
	|	РасчетЕСНИсчисленныйЕСН.ФондФСЗН,
	|	РасчетЕСНИсчисленныйЕСН.ФондЕдиный,
	|	РасчетЕСНИсчисленныйЕСН.ФондСтрахование,
	|	РасчетЕСНИсчисленныйЕСН.ПроцентППС,
	|	РасчетЕСНИсчисленныйЕСН.ФондППС,
	|	РасчетЕСНИсчисленныйЕСН.ППС,
	|	РасчетЕСНИсчисленныйЕСН.ВидДеятельности,
	|	ЕСТЬNULL(РаботникиОрганизаций.Сотрудник, СотрудникиОрганизаций.Ссылка) КАК Сотрудник
	|ИЗ
	|	Документ.РасчетЕСН.ИсчисленныйЕСН КАК РасчетЕСНИсчисленныйЕСН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО  РасчетЕСНИсчисленныйЕСН.ФизЛицо = РаботникиОрганизаций.Сотрудник.ФизЛицо
	|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
	|			И (РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО  РасчетЕСНИсчисленныйЕСН.ФизЛицо = СотрудникиОрганизаций.Физлицо
	|			И (СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда))
	|ГДЕ
	|	 РасчетЕСНИсчисленныйЕСН.Ссылка = &Ссылка";
	
	КоличествоЗаписей = ВыборкаДокументов.Количество();
	ИндексЗаписи = 1;
	Пока ВыборкаДокументов.Следующий() Цикл
		Запрос.УстановитьПараметр("Ссылка",ВыборкаДокументов.Ссылка);
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
        #Если Клиент Тогда
			Состояние("Обрабатывается документы Расчет отчислений с ФОТ" + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли

		ДокументОбъект.ИсчисленныйЕСН.Загрузить(Запрос.Выполнить().Выгрузить());
		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        ИндексЗаписи = ИндексЗаписи + 1;
	КонецЦикла;

	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.14 РБ

Процедура ЗаполнитьРасчетВзносовСФОТ()
	
	ЗапросДокументы = Новый Запрос;
	ЗапросДокументы.Текст = 
	"ВЫБРАТЬ
	|	РасчетЕСН.Ссылка
	|ИЗ
	|	Документ.РасчетЕСН КАК РасчетЕСН
	|ГДЕ
	|	РасчетЕСН.Проведен";
	
	ВыборкаДокументов = ЗапросДокументы.Выполнить().Выбрать();
	
	ЗапросОсновныеНачисления = Новый Запрос;
	ЗапросОсновныеНачисления.Текст = 
	"ВЫБРАТЬ
	|	РасчетЕСНОсновныеНачисления.Ссылка,
	|	РасчетЕСНОсновныеНачисления.НомерСтроки,
	|	РасчетЕСНОсновныеНачисления.ВидРасчета,
	|	РасчетЕСНОсновныеНачисления.Сотрудник,
	|	РасчетЕСНОсновныеНачисления.ФизЛицо,
	|	РасчетЕСНОсновныеНачисления.УдалитьПриказ,
	|	РасчетЕСНОсновныеНачисления.ДоходФСЗН,
	|	РасчетЕСНОсновныеНачисления.ДоходЕдиныйПлатеж,
	|	РасчетЕСНОсновныеНачисления.Результат,
	|	РасчетЕСНОсновныеНачисления.ПериодДействияНачало,
	|	РасчетЕСНОсновныеНачисления.ПериодДействияКонец,
	|	РасчетЕСНОсновныеНачисления.ДоходСтрах,
	|	РасчетЕСНОсновныеНачисления.КодДоходаЕСН,
	|	РасчетЕСНОсновныеНачисления.ДокументОснование,
	|	РасчетЕСНОсновныеНачисления.ДоходППС,
	|	РасчетЕСНОсновныеНачисления.ВидДеятельности,
	|	РасчетЕСНОсновныеНачисления.Результат КАК БазаФСЗН,
	|	РасчетЕСНОсновныеНачисления.Результат КАК БазаППС
	|ИЗ
	|	Документ.РасчетЕСН.ОсновныеНачисления КАК РасчетЕСНОсновныеНачисления
	|ГДЕ
	|	РасчетЕСНОсновныеНачисления.Ссылка = &Ссылка";
	
	
	ЗапросДополнительныеНачисления = Новый Запрос;
	ЗапросДополнительныеНачисления.Текст = 
	"ВЫБРАТЬ
	|	РасчетЕСНДополнительныеНачисления.Ссылка,
	|	РасчетЕСНДополнительныеНачисления.НомерСтроки,
	|	РасчетЕСНДополнительныеНачисления.ВидРасчета,
	|	РасчетЕСНДополнительныеНачисления.Сотрудник,
	|	РасчетЕСНДополнительныеНачисления.ФизЛицо,
	|	РасчетЕСНДополнительныеНачисления.УдалитьПриказ,
	|	РасчетЕСНДополнительныеНачисления.ДоходФСЗН,
	|	РасчетЕСНДополнительныеНачисления.ДоходЕдиныйПлатеж,
	|	РасчетЕСНДополнительныеНачисления.Результат,
	|	РасчетЕСНДополнительныеНачисления.БазовыйПериодНачало,
	|	РасчетЕСНДополнительныеНачисления.БазовыйПериодКонец,
	|	РасчетЕСНДополнительныеНачисления.ДоходСтрах,
	|	РасчетЕСНДополнительныеНачисления.КодДоходаЕСН,
	|	РасчетЕСНДополнительныеНачисления.ДокументОснование,
	|	РасчетЕСНДополнительныеНачисления.ДоходППС,
	|	РасчетЕСНДополнительныеНачисления.ВидДеятельности,
	|	РасчетЕСНДополнительныеНачисления.Результат КАК БазаФСЗН,
	|	РасчетЕСНДополнительныеНачисления.Результат КАК БазаППС
	|ИЗ
	|	Документ.РасчетЕСН.ДополнительныеНачисления КАК РасчетЕСНДополнительныеНачисления
	|ГДЕ
	|	РасчетЕСНДополнительныеНачисления.Ссылка = &Ссылка";

	
	КоличествоЗаписей = ВыборкаДокументов.Количество();
	ИндексЗаписи = 1;

	
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ЗапросОсновныеНачисления.УстановитьПараметр("Ссылка",ВыборкаДокументов.Ссылка);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
        #Если Клиент Тогда
			Состояние("Обрабатывается документы Расчет отчислений с ФОТ, табличная чать Основные начисления " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
        ДокументОбъект.ОсновныеНачисления.Загрузить(ЗапросОсновныеНачисления.Выполнить().Выгрузить());
		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	    ЗапросДополнительныеНачисления.УстановитьПараметр("Ссылка",ВыборкаДокументов.Ссылка);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
        #Если Клиент Тогда
			Состояние("Обрабатывается документы Расчет отчислений с ФОТ, табличная чать Дополнительные начисления " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
        ДокументОбъект.ДополнительныеНачисления.Загрузить(ЗапросДополнительныеНачисления.Выполнить().Выгрузить());
		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);

		 ИндексЗаписи = ИндексЗаписи + 1;
	
	КонецЦикла;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.15 РБ

Процедура ЗаполнитьОтпускаОрганизаций() 
	
	ЗапросДокументы = Новый Запрос;
	ЗапросДокументы.Текст = 
	"ВЫБРАТЬ
	|	НачислениеОтпускаРаботникамОрганизаций.Ссылка
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК НачислениеОтпускаРаботникамОрганизаций
	|ГДЕ
	|	НачислениеОтпускаРаботникамОрганизаций.Проведен = ИСТИНА";
	
	ВыборкаДокументов = ЗапросДокументы.Выполнить().Выбрать();
	
	ЗапросОтпуска = Новый Запрос;
	ЗапросОтпуска.Текст = 
	"ВЫБРАТЬ
	|	НачислениеОтпускаРаботникамОрганизаций.РучнойРасчетСреднегоЗаработка,
	|	НачислениеОтпускаРаботникамОрганизаций.РазмерСреднегоЗаработка,
	|	НачислениеОтпускаРаботникамОрганизаций.ВидРасчетаКомпенсацииОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ВидРасчетаОсновногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.КоличествоДнейДополнительногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.КоличествоДнейОсновногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.УдалитьПриказ,
	|	НачислениеОтпускаРаботникамОрганизаций.ИспользоватьСреднеЧасовойЗаработок,
	|	НачислениеОтпускаРаботникамОрганизаций.РабочийГодПо КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	НачислениеОтпускаРаботникамОрганизаций.РабочийГодС КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	НачислениеОтпускаРаботникамОрганизаций.СторноРезультатКомпенсацииОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ПерерассчитываемыйДокумент,
	|	НачислениеОтпускаРаботникамОрганизаций.РезультатКомпенсацииОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ДнейЧасовКомпенсацииОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ПорядокРасчетаКомпенсацииОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ПроцентОплатыДополнительногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ВидРасчетаДополнительногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ДатаОкончанияДополнительногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ДатаНачалаДополнительногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ПорядокРасчетаОсновногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ДатаОкончанияОсновногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ДатаНачалаОсновногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.Физлицо,
	|	НачислениеОтпускаРаботникамОрганизаций.Сотрудник,
	|	НачислениеОтпускаРаботникамОрганизаций.Ответственный,
	|	НачислениеОтпускаРаботникамОрганизаций.Комментарий,
	|	НачислениеОтпускаРаботникамОрганизаций.Организация,
	|	НачислениеОтпускаРаботникамОрганизаций.ПериодРегистрации,
	|	НачислениеОтпускаРаботникамОрганизаций.Дата,
	|	НачислениеОтпускаРаботникамОрганизаций.Номер,
	|	НачислениеОтпускаРаботникамОрганизаций.Ссылка
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК НачислениеОтпускаРаботникамОрганизаций
	|ГДЕ
	|	НачислениеОтпускаРаботникамОрганизаций.Ссылка = &Ссылка";
	
	
	
	
	КоличествоЗаписей = ВыборкаДокументов.Количество();
	ИндексЗаписи = 1;

	
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ЗапросОтпуска.УстановитьПараметр("Ссылка",ВыборкаДокументов.Ссылка);
		//ДокументОбъект.ОбменДанными.Загрузка = Истина;
        #Если Клиент Тогда
			Состояние("Обрабатывается документыНачисление отпуска работникам организаций " + ИндексЗаписи + " из " + КоличествоЗаписей);
		#КонецЕсли
		Выборка = ЗапросОтпуска.Выполнить().Выбрать();
		Если  Выборка.Следующий() тогда
        	ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
			
			Если ЗначениеЗаполнено(Выборка.ДатаНачалаДополнительногоОтпуска) Тогда
				
				Строка = ДокументОбъект.ДополнительныеОтпуска.Добавить();	
				ЗаполнитьЗначенияСвойств(Строка,Выборка);

			КонецЕсли;
			//ДокументОбъект.ОбменДанными.Загрузка = Ложь;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	 
		 ИндексЗаписи = ИндексЗаписи + 1;
	
	КонецЦикла;

	
КонецПроцедуры

Процедура ЗаполнитьШтатноеРасписание() 
	
	Набор = РегистрыСведений.ШтатноеРасписаниеОрганизаций.СоздатьНаборЗаписей();
	Набор.Прочитать();
	Если Набор.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ШтатноеРасписаниеОрганизаций.Период,
		|	ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации,
		|	ШтатноеРасписаниеОрганизаций.Должность,
		|	ШтатноеРасписаниеОрганизаций.УсловияТрудаИзмерение,
		|	ШтатноеРасписаниеОрганизаций.ВидДеятельностиИзмерение,
		|	ШтатноеРасписаниеОрганизаций.КоличествоСтавок,
		|	ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка,
		|	ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка,
		|	ШтатноеРасписаниеОрганизаций.ВидТарифнойСтавки,
		|	ШтатноеРасписаниеОрганизаций.ГрафикРаботы,
		|	ШтатноеРасписаниеОрганизаций.ВалютаТарифнойСтавки,
		|	ШтатноеРасписаниеОрганизаций.ОсобыеУсловияТруда,
		|	ШтатноеРасписаниеОрганизаций.РазрядЕТС,
		|	ШтатноеРасписаниеОрганизаций.КоэффициентЕТС,
		|	ШтатноеРасписаниеОрганизаций.ПроцентПоКонтракту,
		|	ШтатноеРасписаниеОрганизаций.ТарифнаяСтавка,
		|	ШтатноеРасписаниеОрганизаций.РасчетнаяТарифнаяСтавка,
		|	ШтатноеРасписаниеОрганизаций.ТарифныйСПовышениемПоИнструкции,
		|	ШтатноеРасписаниеОрганизаций.РазмерСтавкиПервогоРазряда,
		|	ШтатноеРасписаниеОрганизаций.ПовышенныйКоэффициентЕТС,
		|	ШтатноеРасписаниеОрганизаций.ИтоговоеПовышениеПоИнструкции,
		|	ШтатноеРасписаниеОрганизаций.ТарифнаяСтавкаПервогоРазряда,
		|	ШтатноеРасписаниеОрганизаций.Примечание,
		|	ШтатноеРасписаниеОрганизаций.КоличествоСтавок КАК КоличествоСтавокДляРасчетаМФЗП
		|ИЗ
		|	РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций"; 
		
		
		Набор.Загрузить(Запрос.Выполнить().Выгрузить());
		//Выборка = Запрос.Выполнить().Выбрать();
		//Пока Выборка.Следующий() Цикл
		//	ЗаполнитьЗначенияСвойств(Набор.Добавить(),Выборка)
		//КонецЦикла;
		Набор.Записать(Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьВидыРасчета()
	
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Справочники.КатегорииРасчетов;
	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	ЕСНСпособыОтражения      = Справочники.ДоходыЕСН;
	КодыДоходаПоСт255		 = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК;
	ПВР = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций;
	ВидыПремии = Перечисления.ВидыПремии;

	
	
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ВСвязиСоСмертью,							СпРасчета.ФиксированнойСуммой, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, 0, ДоходыНДФЛ.Код1211	, 	ЕСНСпособыОтражения.БольничныйИзФСЗН,	  Неопределено,КодыДоходаПоСт255.ПособияРазовыеФСЗН);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ПриПостановкеНаУчетВРанниеСрокиБеременности,СпРасчета.ФиксированнойСуммой, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, 0, ДоходыНДФЛ.Код1211	, 	ЕСНСпособыОтражения.БольничныйИзФСЗН,	  Неопределено,КодыДоходаПоСт255.ПособияРазовыеФСЗН);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ПриРожденииРебенка,							СпРасчета.ФиксированнойСуммой, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, 0, ДоходыНДФЛ.Код1211	, 	ЕСНСпособыОтражения.БольничныйИзФСЗН,	  Неопределено,КодыДоходаПоСт255.ПособияРазовыеФСЗН);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ПриРожденииВторогоИПоследующихДетей,		СпРасчета.ФиксированнойСуммой, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, 0, ДоходыНДФЛ.Код1211	, 	ЕСНСпособыОтражения.БольничныйИзФСЗН,	  Неопределено,КодыДоходаПоСт255.ПособияРазовыеФСЗН);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ПриУсыновленииРебенка,						СпРасчета.ФиксированнойСуммой, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, 0, ДоходыНДФЛ.Код1211	, 	ЕСНСпособыОтражения.БольничныйИзФСЗН,	  Неопределено,КодыДоходаПоСт255.ПособияРазовыеФСЗН);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.18 РБ

Процедура ПеренестиНастройкуУчетнойПолитикиПоРасчетуЗарплаты() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитика.Организация,
	|	УчетнаяПолитика.УдалитьРасчетЗарплатыОрганизацииПоОтветственным КАК РасчетЗарплатыОрганизацииПоОтветственным,
	|	УчетнаяПолитика.УдалитьУпрощенныйУчетНДФЛ КАК УпрощенныйУчетНДФЛ,
	|	УчетнаяПолитика.УдалитьИспользуютсяНачисленияВВалюте КАК ИспользуютсяНачисленияВВалюте,
	|	УчетнаяПолитика.УдалитьУчетЗадолженностиПоМесяцам КАК УчетЗадолженностиПоМесяцам,
	|	УчетнаяПолитика.УУдалитьВыплатаАвансаПроцентом КАК ВыплатаАвансаПроцентом
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций КАК УчетнаяПолитикаПоРасчетуЗарплаты
	|		ПО УчетнаяПолитика.Организация = УчетнаяПолитикаПоРасчетуЗарплаты.Организация
	|ГДЕ
	|	УчетнаяПолитикаПоРасчетуЗарплаты.РасчетЗарплатыОрганизацииПоОтветственным ЕСТЬ NULL ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Использование = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.Отбор.Организация.Значение = Выборка.Организация;
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;	

КонецПроцедуры

Процедура ОбновитьНастройкиОтчетов()
	#Если Клиент тогда
	ТаблицаНастроек = ТиповыеОтчеты.ПолучитьТаблицуПредопределенныхНастроек();
				
	Для каждого СтрокаНастройки из ТаблицаНастроек Цикл
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента(СтрокаНастройки.Макет, СтрокаНастройки.Отчет);
	КонецЦикла
	#КонецЕсли
КонецПроцедуры

// Заполним новые настройки пользователей
Процедура ЗаполнитьНастройкиПользователей() Экспорт

	// необходимо установить использование Помощника приема на работу и Рабочего стола
	// в зависимости от доступных ролей пользователя
	// ПолныеПрава
	
	// для пользователей рабочего стола с "управленческими" ролями 
	// установим настройку режима рабочего стола
	
	МассивПользователейПомощник = Новый Массив;
	МассивПользователейРабочийСтол = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка,
	|	Пользователи.Код
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи";
	ВыборкаПользователей = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПользователей.Следующий() Цикл
		ИмяПользователяИБ	= СокрЛП(ВыборкаПользователей.Код);
		ПользовательИБ		= УправлениеПользователями.НайтиПользователяИБ(ИмяПользователяИБ);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			МассивПользователейПомощник.Добавить(ВыборкаПользователей.Ссылка);
			МассивПользователейРабочийСтол.Добавить(ВыборкаПользователей.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.КадровикРегламентированныхДанныхБезОграниченияПрав)
			или ПользовательИБ.Роли.Содержит(Метаданные.Роли.КадровикРегламентированныхДанных)
			или ПользовательИБ.Роли.Содержит(Метаданные.Роли.РасчетчикРегламентированнойЗарплатыБезОграниченияПрав)
			или ПользовательИБ.Роли.Содержит(Метаданные.Роли.РасчетчикРегламентированнойЗарплаты) Тогда
			
			МассивПользователейПомощник.Добавить(ВыборкаПользователей.Ссылка);
			МассивПользователейРабочийСтол.Добавить(ВыборкаПользователей.Ссылка);
			
		КонецЕсли;
		
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.КадровикУправленческихДанныхБезОграниченияПрав)
			или ПользовательИБ.Роли.Содержит(Метаданные.Роли.КадровикУправленческихДанных)
			или ПользовательИБ.Роли.Содержит(Метаданные.Роли.РасчетчикУправленческойЗарплатыБезОграниченияПрав)
			или ПользовательИБ.Роли.Содержит(Метаданные.Роли.РасчетчикУправленческойЗарплаты) Тогда
			
			МассивПользователейПомощник.Добавить(ВыборкаПользователей.Ссылка);
			МассивПользователейРабочийСтол.Добавить(ВыборкаПользователей.Ссылка);
			
		КонецЕсли;
		
		
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.МенеджерПоНаборуПерсоналаБезОграниченияПрав)
			или ПользовательИБ.Роли.Содержит(Метаданные.Роли.МенеджерПоНаборуПерсонала) Тогда
			
			МассивПользователейПомощник.Добавить(ВыборкаПользователей.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|		ПО Пользователи.Ссылка = НастройкиПользователей.Пользователь
	|			И (НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ИспользоватьПомощникаПриемаНаРаботу))
	|			И (НастройкиПользователей.Значение = ИСТИНА)
	|ГДЕ
	|	Пользователи.Ссылка В(&МассивПользователейПомощник)
	|	И НастройкиПользователей.Значение ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("МассивПользователейПомощник", МассивПользователейПомощник);
	ВыборкаПользователей = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПользователей.Следующий() Цикл

		НаборЗаписей.Отбор.Пользователь.Установить(ВыборкаПользователей.Ссылка);
		НаборЗаписей.Отбор.Настройка.Установить(ПланыВидовХарактеристик.НастройкиПользователей.ИспользоватьПомощникаПриемаНаРаботу);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Пользователь = ВыборкаПользователей.Ссылка;
		НоваяЗапись.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ИспользоватьПомощникаПриемаНаРаботу;
		НоваяЗапись.Значение = Истина;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|		ПО Пользователи.Ссылка = НастройкиПользователей.Пользователь
	|			И (НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОткрыватьПриЗапускеРабочийСтол))
	|			И (НастройкиПользователей.Значение = ИСТИНА)
	|ГДЕ
	|	Пользователи.Ссылка В(&МассивПользователейРабочийСтол)
	|	И НастройкиПользователей.Значение ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("МассивПользователейРабочийСтол", МассивПользователейРабочийСтол);
	ВыборкаПользователей = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПользователей.Следующий() Цикл

		НаборЗаписей.Отбор.Пользователь.Установить(ВыборкаПользователей.Ссылка);
		НаборЗаписей.Отбор.Настройка.Установить(ПланыВидовХарактеристик.НастройкиПользователей.ОткрыватьПриЗапускеРабочийСтол);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Пользователь = ВыборкаПользователей.Ссылка;
		НоваяЗапись.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОткрыватьПриЗапускеРабочийСтол;
		НоваяЗапись.Значение = Истина;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет порядок в подразделениях организаций
//
Процедура ЗаполнитьПорядокВПодразделенияхОрганизаций() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Владелец КАК Владелец,
	|	ПодразделенияОрганизаций.Родитель КАК Родитель,
	|	ПодразделенияОрганизаций.Ссылка,
	|	ПодразделенияОрганизаций.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|
	|УПОРЯДОЧИТЬ ПО
	|	Владелец,
	|	Родитель,
	|	Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Пока Выборка.СледующийПоЗначениюПоля("Владелец") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Родитель") Цикл
			Порядок = 0;
			
			Пока Выборка.Следующий() Цикл
				Порядок = Порядок + 1;
				
				Подразделение = Выборка.Ссылка.ПолучитьОбъект();
				Подразделение.ОбменДанными.Загрузка = Истина;
				Подразделение.Порядок = Порядок;
				Подразделение.Записать();
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

 ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.24 РБ

Процедура ЗаполнитьДопНачисления()
	Категории  = Справочники.КатегорииРасчетов;
	ПВР = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций;
	ВидыПремии = Перечисления.ВидыПремии;
	ЕСНСпособыОтражения      = Справочники.ДоходыЕСН;
	СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();
	КодДоходаНДФЛПоУмолчанию = Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию;
	КодыДоходаПоСт255		 = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК;
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.УдержаниеЗаНеотработанныйОтпускКалендарныеДни,СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням, Категории.Первичное, ВидыПремии.НеПремия, 12, 0, КодДоходаНДФЛПоУмолчанию, ЕСНСпособыОтражения.ОблагаетсяПолностью,  СпособОтражения, КодыДоходаПоСт255.КомпенсацияОтпускаПриУвольнении);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.УдержаниеЗаНеотработанныйОтпускШестидневка,	  СпРасчета.ПоСреднемуЗаработкуДляОтпускаПоШестидневке,  	Категории.Первичное, ВидыПремии.НеПремия, 12, 0, КодДоходаНДФЛПоУмолчанию, ЕСНСпособыОтражения.ОблагаетсяПолностью,  СпособОтражения, КодыДоходаПоСт255.КомпенсацияОтпускаПриУвольнении);
КонецПроцедуры				

Процедура ЗаполнитьДвиженияРегистраЗарплатаЗаМесяцОрганизаций(ЕстьСообщения = Неопределено,ОбработкаКомментариев = Неопределено) Экспорт
	
	/// Заполняем движения по начислению зарплаты
	/// в регистре накопления ЗарплатаЗаМесяцОрганизаций
	
	// из регистра накопления «Взаиморасчеты с работниками организаций» отбираем регистраторы, 
	// начислявшие зарплату;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВзаиморасчетыСРаботникамиОрганизаций.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.НачислениеДивидендовОрганизаций
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Дивиденды)
	|		КОГДА ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.НачислениеЕдиновременныхПособийЗаСчетФСС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПособияФСС)
	|		КОГДА ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.НачислениеЗарплатыРаботникамОрганизаций
	|			ТОГДА ВЫБОР
	|					КОГДА ВзаиморасчетыСРаботникамиОрганизаций.Регистратор.ПериодНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.АвансЗаПервуюПоловинуМесяца)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)
	|				КОНЕЦ
	|		КОГДА ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.НачислениеОтпускаРаботникамОрганизаций
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Отпускные)
	|		КОГДА ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.НачислениеПоБольничномуЛисту
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПоБольничнымЛистам)
	|		КОГДА ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.НДФЛВозвратНалога
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ВозвратНДФЛ)
	|		КОГДА ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.ОплатаПоСреднемуЗаработку
	|			ТОГДА ВЫБОР
	|					КОГДА ВзаиморасчетыСРаботникамиОрганизаций.Регистратор.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Командировочные)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)
	|				КОНЕЦ
	|		КОГДА ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.ПремииРаботниковОрганизаций
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Премии)
	|		КОГДА ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.РасчетПриУвольненииРаботникаОрганизаций
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.РасчетПриУвольнении)
	|		КОГДА ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПрочиеРазовыеНачисления)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)
	|	КОНЕЦ КАК ХарактерВыплаты
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗарплатаЗаМесяцОрганизаций КАК ЗарплатаЗаМесяц
	|		ПО (ЗарплатаЗаМесяц.Регистратор = ВзаиморасчетыСРаботникамиОрганизаций.Регистратор)
	|ГДЕ
	|	ЗарплатаЗаМесяц.Регистратор ЕСТЬ NULL 
	|	И (ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.НачислениеДивидендовОрганизаций
	|			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.НачислениеЕдиновременныхПособийЗаСчетФСС
	|			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.НачислениеЗарплатыРаботникамОрганизаций
	|			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.НачислениеОтпускаРаботникамОрганизаций
	|			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.НачислениеПоБольничномуЛисту
	|			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.НДФЛВозвратНалога
	|			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.ОплатаПоСреднемуЗаработку
	|			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.ПремииРаботниковОрганизаций
	|			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.РасчетПриУвольненииРаботникаОрганизаций
	|			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций
	|			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.НДФЛПерерасчет
	|			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.НевыходыВОрганизациях
	|			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.ОплатаПраздничныхИВыходныхДнейОрганизаций
	|			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.ОплатаСверхурочныхЧасов
	|			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.ПереносЗадолженностиРаботниковОрганизаций
	|			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.ПереносОстатоковПоРасчетамСРаботниками
	|			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.РегистрацияПростоевРаботниковОрганизаций
	|			ИЛИ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	#Если Клиент Тогда
		ТекстСообщения = "Обработка документов начисления заработной платы";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	
	// Обрабатываем регистраторы
	
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаРегистраторов.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	
	НаборЗаписейВзаиморасчетов = РегистрыНакопления.ВзаиморасчетыСРаботникамиОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписейЗарплатаЗаМесяц = РегистрыНакопления.ЗарплатаЗаМесяцОрганизаций.СоздатьНаборЗаписей();
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		НаборЗаписейВзаиморасчетов.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборЗаписейВзаиморасчетов.Прочитать();
		
		НаборЗаписейЗарплатаЗаМесяц.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		
		НаборЗаписейЗарплатаЗаМесяц.Загрузить(НаборЗаписейВзаиморасчетов.Выгрузить());
		Для Каждого Запись Из НаборЗаписейЗарплатаЗаМесяц Цикл
			Запись.ХарактерВыплаты = ВыборкаРегистраторов.ХарактерВыплаты;
		КонецЦикла;	
		НаборЗаписейЗарплатаЗаМесяц.Записать();
		НаборЗаписейЗарплатаЗаМесяц.Очистить();
		
		#Если Клиент Тогда
			Если Номер % 30 = 0 Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			КонецЕсли;
			Номер = Номер + 1;
		#КонецЕсли
		
	КонецЦикла;	
	
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
	/// Заполняем движения по выплате зарплаты
	/// в регистре накопления ЗарплатаЗаМесяцОрганизаций
	
	// определяем оплаченные документы ЗарплатаКВыплате 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Оплаченные.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Ошибочные.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибки
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость КАК Ссылка
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
	|	ГДЕ
	|		(НЕ ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.ПометкаУдаления)
	|		И (НЕ ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость.ПометкаУдаления)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ведомость
	|	ИЗ
	|		Документ.ПлатежныйОрдерСписаниеДенежныхСредств.ПеречислениеЗаработнойПлаты КАК ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты
	|	ГДЕ
	|		(НЕ ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ссылка.ПометкаУдаления)
	|		И (НЕ ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ведомость.ПометкаУдаления)
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ссылка
	|	ИЗ
	|		Документ.ЗарплатаКВыплатеОрганизаций КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
	|	ГДЕ
	|		(НЕ СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ссылка.ПометкаУдаления)) КАК Оплаченные
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ГДЕ
	|			(ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|					ИЛИ ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты < 0)) КАК Ошибочные
	|		ПО (Ошибочные.Ссылка = Оплаченные.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	#Если Клиент Тогда
		ТекстСообщения = "Проведение документов Зарплата к выплате организаций";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	
	ВыборкаВедомостей = Запрос.Выполнить().Выбрать();
	
	// Обрабатываем ведомости
	
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаВедомостей.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	
	ВедомостиСОшибками = Новый Массив();
	
	Пока ВыборкаВедомостей.Следующий() Цикл
		
		Если ВыборкаВедомостей.ЕстьОшибки Тогда
			ВедомостиСОшибками.Добавить(ВыборкаВедомостей.Ссылка);
		Иначе
			// Получаем документ ЗарплатаКВыплате
			ДокументОбъект = ВыборкаВедомостей.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
			// Создаем движения по документу
			Если ДокументОбъект.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.АвансЗаПервуюПоловинуМесяца Тогда
				Для Каждого СтрокаЗарплаты Из ДокументОбъект.Зарплата Цикл
					Движение =  ДокументОбъект.Движения.ЗарплатаЗаПервуюПоловинуМесяца.Добавить();
					Движение.Период					= КонецМесяца(ДокументОбъект.ПериодРегистрации);
					Движение.Физлицо				= СтрокаЗарплаты.Физлицо;
					Движение.Организация			= ДокументОбъект.Организация;
					Движение.СуммаВзаиморасчетов	= - СтрокаЗарплаты.Сумма;
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого СтрокаЗарплаты Из ДокументОбъект.Зарплата Цикл
					Движение =  ДокументОбъект.Движения.ЗарплатаЗаМесяцОрганизаций.ДобавитьРасход();
					
					Движение.Период					= КонецМесяца(ДокументОбъект.ПериодРегистрации);
					Движение.Физлицо				= СтрокаЗарплаты.Физлицо;
					Движение.Организация			= ДокументОбъект.Организация;
					Движение.ПериодВзаиморасчетов	= ДокументОбъект.ПериодРегистрации;
					Движение.СуммаВзаиморасчетов	= СтрокаЗарплаты.Сумма;
					Движение.ХарактерВыплаты		= ДокументОбъект.ХарактерВыплаты;
			КонецЦикла;
			
			ДокументОбъект.Проведен = Истина;
			ДокументОбъект.Записать();
		КонецЕсли;
		
		#Если Клиент Тогда
			Если Номер % 30 = 0 Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			КонецЕсли;
			Номер = Номер + 1;
			
		#КонецЕсли
		
	КонецЦикла;	
	
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
		Если ВедомостиСОшибками.Количество() > 0 Тогда
			
			ЕстьСообщения = Истина;
			
			//Добавим родительскую строку
			ТекстСообщения = 
			"Внимание! В информационной базе обнаружены документы «Зарплата к выплате организаций», содержащие строки без указания работника или отрицательные суммы к выплате.
			|Это может привести к ошибкам во взаиморасчетах и выплате заработной платы. 
			|В указанных ниже документах необходимо проверить суммы к выплате, а затем провести документ:";
			Заголовок = ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения,Перечисления.ВидыСообщений.ВажнаяИнформация);
			
			Для Каждого Ведомость Из ВедомостиСОшибками Цикл
				Расшифровка = Новый Массив;
				Расшифровка.Добавить(Новый Структура("Представление,Расшифровка", Ведомость, Ведомость));
				ОбработкаКомментариев.ДобавитьСообщение("", Перечисления.ВидыСообщений.Информация, Расшифровка, Заголовок);
            КонецЦикла;
			
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры	

 ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.25 РБ

Процедура ОбновлениеСкидокКДоходам2011года() Экспорт

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код12117);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20110101', Справочники.ДоходыНДФЛ.Код12117, 150);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код163119иныеорг);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20110101', Справочники.ДоходыНДФЛ.Код163119иныеорг, 10);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код163121помощь);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20110101', Справочники.ДоходыНДФЛ.Код163121помощь, 1000);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код12124);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20110101', Справочники.ДоходыНДФЛ.Код12124, 30);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код1216);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20110101', Справочники.ДоходыНДФЛ.Код1216, 500);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код16313выхпенс);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20110101', Справочники.ДоходыНДФЛ.Код16313выхпенс, 0);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код301);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20110101', Справочники.ДоходыНДФЛ.Код301, 0);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код302);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20110101', Справочники.ДоходыНДФЛ.Код302, 0);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код303);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20110101', Справочники.ДоходыНДФЛ.Код303, 0);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код304);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20110101', Справочники.ДоходыНДФЛ.Код304, 0);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код305);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20110101', Справочники.ДоходыНДФЛ.Код305, 0);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код306);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20110101', Справочники.ДоходыНДФЛ.Код306, 0);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код307);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20110101', Справочники.ДоходыНДФЛ.Код307, 0);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код308);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20110101', Справочники.ДоходыНДФЛ.Код308, 0);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код309);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20110101', Справочники.ДоходыНДФЛ.Код309, 0);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код310);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20110101', Справочники.ДоходыНДФЛ.Код310, 0);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код311);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20110101', Справочники.ДоходыНДФЛ.Код311, 0);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код312);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20110101', Справочники.ДоходыНДФЛ.Код312, 0);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код313);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20110101', Справочники.ДоходыНДФЛ.Код313, 0);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();

КонецПроцедуры

 ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.26 РБ

Процедура ОбновлениеРазмеровСреднегоЗаработка() Экспорт
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20110901');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
   	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20110901', Параметр, 228.13);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20111001');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20111001', Параметр, 231.80);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20110901');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20110901', Параметр, 226.01);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20111001');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
 	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20111001', Параметр, 233.72);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

КонецПроцедуры

Процедура УстановтьРазмерПарметраДляРасчето(НаборЗаписей, ДатаСведений, Параметр, Размер)
	
	НоваяЗапись = НаборЗаписей.Добавить();

	НоваяЗапись.Период       = ДатаСведений;
	НоваяЗапись.ВидПараметра = Параметр;
	НоваяЗапись.Размер       = Размер;

КонецПроцедуры

 ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.27 РБ

Процедура ОбновлениеСкидокКДоходам2012года() Экспорт

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код1216);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20120101', Справочники.ДоходыНДФЛ.Код1216, 2650.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код12117);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20120101', Справочники.ДоходыНДФЛ.Код12117, 800.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код163119иныеорг);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20120101', Справочники.ДоходыНДФЛ.Код163119иныеорг, 53.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код163121помощь);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20120101', Справочники.ДоходыНДФЛ.Код163121помощь, 5300.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код12124);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20120101', Справочники.ДоходыНДФЛ.Код12124, 160.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код1219);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20120101', Справочники.ДоходыНДФЛ.Код1219, 175.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();


	
КонецПроцедуры

Процедура ОбновлениеРазмеровСреднегоЗаработка2012() Экспорт
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20111101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
   	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20111101', Параметр, 243.97);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();


	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20111101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20111101', Параметр, 246.16);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();


КонецПроцедуры

 ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.29 РБ

Процедура ЗаполнениеДокументОснованиеВРасчетеВзносовсФОТ() Экспорт

	Запрос = Новый Запрос;
	
	ЕСНДополнительныеНачисленияДокументТекст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСНДополнительныеНачисления.НомерСтроки КАК НомерСтроки,
	|	ЕСНДополнительныеНачисления.ВидРасчета,
	|	ЕСНДополнительныеНачисления.Сотрудник,
	|	ЕСНДополнительныеНачисления.ФизЛицо,
	|	ЕСНДополнительныеНачисления.КодДоходаЕСН,
	|	ЕСНДополнительныеНачисления.Результат,
	|	ЕСНДополнительныеНачисления.Скидка,
	|	ДополнительныеНачисления.ДокументОснование КАК ДокументОснование,
	|	ЕСНДополнительныеНачисления.ДоходФСЗН,
	|	ЕСНДополнительныеНачисления.ДоходЕдиныйПлатеж,
	|	ЕСНДополнительныеНачисления.ДоходСтрах,
	|	ЕСНДополнительныеНачисления.БазовыйПериодНачало,
	|	ЕСНДополнительныеНачисления.БазовыйПериодКонец,
	|	ЕСНДополнительныеНачисления.ДоходППС,
	|	ЕСНДополнительныеНачисления.ВидДеятельности,
	|	ЕСНДополнительныеНачисления.БазаФСЗН,
	|	ЕСНДополнительныеНачисления.БазаППС
	|ИЗ
	|	Документ.РасчетЕСН.ДополнительныеНачисления КАК ЕСНДополнительныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисления
	|		ПО ЕСНДополнительныеНачисления.Сотрудник = ДополнительныеНачисления.Сотрудник
	|			И ЕСНДополнительныеНачисления.ВидРасчета = ДополнительныеНачисления.ВидРасчета
	|			И (ЕСНДополнительныеНачисления.Ссылка.ПериодРегистрации = НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ))
	|ГДЕ
	|	ЕСНДополнительныеНачисления.Ссылка = &Ссылка 
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	
	СписокРегистраторовТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетЕСНДополнительныеНачисления.Ссылка
	|ИЗ
	|	Документ.РасчетЕСН.ДополнительныеНачисления КАК РасчетЕСНДополнительныеНачисления
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетЕСНДополнительныеНачисления.Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	
	
	Запрос.Текст = СписокРегистраторовТекст;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ТекстСообщения = "Обработка документов Расчет отчислений с ФОТ";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	
	//получим список регистраторов, которые необходимо обработать
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаРегистраторов.Количество() > 0 Тогда
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ВсегоДоков = ВыборкаРегистраторов.Количество();
			Номер = 1;
			Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
		#КонецЕсли
		Пока ВыборкаРегистраторов.Следующий() Цикл
			Объект = ВыборкаРегистраторов.Ссылка.ПолучитьОбъект();
			Запрос.УстановитьПараметр("Ссылка", ВыборкаРегистраторов.Ссылка);
			
			Запрос.Текст = ЕСНДополнительныеНачисленияДокументТекст;
			ВыборкаСтрок = Запрос.Выполнить().Выбрать();
			Если ВыборкаСтрок.Количество() <> 0 Тогда
				Объект.ДополнительныеНачисления.Очистить();
				Пока ВыборкаСтрок.Следующий() Цикл
					//Строка = Объект.ДополнительныеНачисления.Найти(ВыборкаСтрок.НомерСтроки,"НомерСтроки");
					ЗаполнитьЗначенияСвойств(Объект.ДополнительныеНачисления.Добавить(),ВыборкаСтрок);
				КонецЦикла;
			КонецЕсли;
			
			//Объект.ОбменДанными.Загрузка = Истина;
			Если Объект.Проведен Тогда
				Объект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Объект.Записать(РежимЗаписиДокумента.Запись);	
			КонецЕсли;
			
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
				Номер = Номер + 1;
			#КонецЕсли
			
			
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецПроцедуры

 ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.30 РБ

Процедура ИзменитьКатегорииЗастрахованныхЛиц() Экспорт
	
	Запрос = Новый Запрос;
	КодыКатегорий = Новый Массив;
	КодыКатегорий.Добавить("01");
	КодыКатегорий.Добавить("03");
	КодыКатегорий.Добавить("06");
	Запрос.УстановитьПараметр("КодыКатегорий",КодыКатегорий);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КатегорииЗастрахованныхЛиц.Ссылка
	|ИЗ
	|	Справочник.КатегорииЗастрахованныхЛиц КАК КатегорииЗастрахованныхЛиц
	|ГДЕ
	|	КатегорииЗастрахованныхЛиц.КодПФР В(&КодыКатегорий)
	|	И НЕ КатегорииЗастрахованныхЛиц.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ПометкаУдаления = Истина;
		Объект.Записать();
	КонецЦикла;
	
	ЗаполнитьКатегориюЗастрахованногоЛица(Справочники.КатегорииЗастрахованныхЛиц.ТрудовойДоговор,"5","01");
	ЗаполнитьКатегориюЗастрахованногоЛица(Справочники.КатегорииЗастрахованныхЛиц.ДоговорПодряда,"5","03");
	ЗаполнитьКатегориюЗастрахованногоЛица(Справочники.КатегорииЗастрахованныхЛиц.Уволенный,"5","06");
	
КонецПроцедуры

Процедура ИзменитьКатегорииФизЛиц() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Ссылка,
	|	ФизическиеЛица.СтатусКатегория.КодПФР КАК Код
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	НЕ ФизическиеЛица.ЭтоГруппа
	|	И ФизическиеЛица.СтатусКатегория.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Код = "01" ИЛИ НЕ ЗначениеЗаполнено(Выборка.Код) Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.СтатусКатегория = Справочники.КатегорииЗастрахованныхЛиц.ТрудовойДоговор;
			Объект.Записать();
		ИначеЕсли  Выборка.Код = "02" Тогда
			Объект = Выборка.Сслыка.ПолучитьОбъект();
			Объект.СтатусКатегория = Справочники.КатегорииЗастрахованныхЛиц.ДоговорПодряда;
			Объект.Записать();
		ИначеЕсли  Выборка.Код = "06" Тогда
			Объект = Выборка.Сслыка.ПолучитьОбъект();
			Объект.СтатусКатегория = Справочники.КатегорииЗастрахованныхЛиц.Уволенный;
			Объект.Записать();
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры


 ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.31 РБ

// Выполняет заполнение справочника "ДоходыЕСН" 
//
Процедура ЗаполнитьКодДоходовДоговорГПХ()
			//РБ
    СпрКодыЕСН = Справочники.ДоходыЕСН;

    УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.ДоговорГПХ		    , Истина, Истина,	Ложь);

	// ---------------------------------------------------

КонецПроцедуры

Процедура СозданиеВРИЛВПрожиточныхМинимумах() Экспорт
	
	ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ИЛВПрожиточныхМинимумах;
			
	ВРОбъект = ВидРасчета.ПолучитьОбъект();
	
	ВРОбъект.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистВПрожиточныхМинимумах;
	ВРОбъект.КатегорияНачисления = Справочники.КатегорииРасчетов.Первичное;
	
	ВРОбъект.ОбменДанными.Загрузка = Истина;
	ВРОбъект.Записать();
	
КонецПроцедуры


 ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.34 РБ
 
Процедура ЗаполнитьПочтовыеСборы() Экспорт
	
	НовыйТарифОбъект = Справочники.ТарифыПочтовогоСбора.ПочтаРБ.ПолучитьОбъект();
	НовыйТарифОбъект.РасчетПоШкалеСПолнойСуммы = Истина;
	НовыйТарифОбъект.Записать();
	НовыйТариф = НовыйТарифОбъект.Ссылка;
	
	НаборЗаписейПочтовогоТарифа = РегистрыСведений.РазмерыТарифовПочтовогоСбора.СоздатьНаборЗаписей();
	
	НаборЗаписейПочтовогоТарифа.Отбор.Тариф.Использование = Истина;
	НаборЗаписейПочтовогоТарифа.Отбор.Тариф.ВидСравнения = ВидСравнения.Равно;
	НаборЗаписейПочтовогоТарифа.Отбор.Тариф.Значение = НовыйТариф;

	ЗаписатьСтрокуШкалыПочтовыхТарифов(НаборЗаписейПочтовогоТарифа, НовыйТариф, 1, 0, 100, 3, 0);
	ЗаписатьСтрокуШкалыПочтовыхТарифов(НаборЗаписейПочтовогоТарифа, НовыйТариф, 2, 100.01, 300, 2, 0);
	ЗаписатьСтрокуШкалыПочтовыхТарифов(НаборЗаписейПочтовогоТарифа, НовыйТариф, 3, 300.01, 500, 1, 0);
    ЗаписатьСтрокуШкалыПочтовыхТарифов(НаборЗаписейПочтовогоТарифа, НовыйТариф, 4, 500.01, , 0.5, 0);

	
	НаборЗаписейПочтовогоТарифа.Записать(Истина);
		

КонецПроцедуры //ЗаполнитьПочтовыеСборы

Процедура ЗаписатьСтрокуШкалыПочтовыхТарифов(НаборЗаписейПочтовогоТарифа, НовыйТариф,НомерСтрокиШкалы, ЗначениеС, ЗначениеПо, Процент, Сумма)
	
	НоваяЗапись = НаборЗаписейПочтовогоТарифа.Добавить();

	НоваяЗапись.НомерСтрокиШкалы	= НомерСтрокиШкалы;
	НоваяЗапись.Тариф				= НовыйТариф;
	НоваяЗапись.ЗначениеС			= ЗначениеС;
	НоваяЗапись.ЗначениеПо			= ЗначениеПо;
	НоваяЗапись.Процент				= Процент;
	НоваяЗапись.Сумма				= Сумма;
	
КонецПроцедуры

Процедура ПерезаполнитьПособия() Экспорт
	
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Справочники.КатегорииРасчетов;
	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	КодыДоходаПоСт255		 = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК;
	КодДоходаНДФЛПоУмолчанию = ДоходыНДФЛ.КодДоходаПоУмолчанию;
	ЕСНСпособыОтражения	 = Справочники.ДоходыЕСН;
	ВидыПремии = Перечисления.ВидыПремии;
	ПВРОсн = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	ПВРДоп = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций;

	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеНаРебенкаИнвалида,				СпРасчета.ПособиеНаРебенкаИнвалида,					Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено,	 					Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеНаРебенкаДо18ЛетНадб40,		    СпРасчета.ПособиеНаРебенкаДо18ЛетНадб40,			Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 						Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеНаРебенкаСНадбавкой40До3Лет,	СпРасчета.ПособиеНаРебенкаСНадбавкой40До3Лет,		Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено,	 					Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеНаРебенкаДо3Лет,				СпРасчета.ПособиеНаРебенкаДо3Лет,					Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 						Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеНаРебенкаВИЧ,					СпРасчета.ПособиеНаРебенкаВИЧ,						Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено,	 					Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеМатериОдиночкедо1_5лет,		    СпРасчета.ПособиеМатериОдиночкеДо1_5лет,			Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 						Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеМатериОдиночкеДо3Лет,			СпРасчета.ПособиеМатериОдиночкеДо3Лет,				Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено,	 					Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеНаРебенкаСтарше3Лет,			СпРасчета.ПособиеНаРебенкаСтарше3Лет,				Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 						Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
    УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеНеРаботающейМатериДо3Лет,		СпРасчета.ПособиеНеРаботающейМатериДо3Лет,			Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено,	 					Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеНеРабМатериНадб40До3Лет,		СпРасчета.ПособиеНеРабМатериНадб40До3Лет,			Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 						Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеНеРабМатериОдиночкеДо1_5Лет,	СпРасчета.ПособиеНеРабМатериОдиночкеДо1_5Лет,		Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено,	 					Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеНеРабМатериОдиночкеДо3Лет,		СпРасчета.ПособиеНеРабМатериОдиночкеДо3Лет,			Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 						Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	
    УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВРДоп.ВСвязиСоСмертью,								СпРасчета.ФиксированнойСуммой, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, 0, ДоходыНДФЛ.Код1211	, 	ЕСНСпособыОтражения.ПособияИзФСЗН,	  Неопределено,КодыДоходаПоСт255.ПособияРазовыеФСЗН);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВРДоп.ПриПостановкеНаУчетВРанниеСрокиБеременности, СпРасчета.ФиксированнойСуммой, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, 0, ДоходыНДФЛ.Код1211	, 	ЕСНСпособыОтражения.ПособияИзФСЗН,	  Неопределено,КодыДоходаПоСт255.ПособияРазовыеФСЗН);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВРДоп.ПриРожденииРебенка,							СпРасчета.ФиксированнойСуммой, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, 0, ДоходыНДФЛ.Код1211	, 	ЕСНСпособыОтражения.ПособияИзФСЗН,	  Неопределено,КодыДоходаПоСт255.ПособияРазовыеФСЗН);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВРДоп.ПриРожденииВторогоИПоследующихДетей,			СпРасчета.ФиксированнойСуммой, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, 0, ДоходыНДФЛ.Код1211	, 	ЕСНСпособыОтражения.ПособияИзФСЗН,	  Неопределено,КодыДоходаПоСт255.ПособияРазовыеФСЗН);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВРДоп.ПриУсыновленииРебенка,						СпРасчета.ФиксированнойСуммой, 			Категории.Первичное 			, ВидыПремии.НеПремия,		 0, 0, ДоходыНДФЛ.Код1211	, 	ЕСНСпособыОтражения.ПособияИзФСЗН,	  Неопределено,КодыДоходаПоСт255.ПособияРазовыеФСЗН);

КонецПроцедуры

 ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.35 РБ

Процедура ОбновлениеСкидокКДоходам2013года() Экспорт

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код1216);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20130101', Справочники.ДоходыНДФЛ.Код1216, 33100000);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код12117);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20130101', Справочники.ДоходыНДФЛ.Код12117, 10000000);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код163119иныеорг);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20130101', Справочники.ДоходыНДФЛ.Код163119иныеорг, 660000);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код163121помощь);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20130101', Справочники.ДоходыНДФЛ.Код163121помощь, 66150000);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код12124);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20130101', Справочники.ДоходыНДФЛ.Код12124, 2000000);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код1219);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20130101', Справочники.ДоходыНДФЛ.Код1219, 2185000);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
	УстановитьРеквизитыКодаДоходаНДФЛ(Справочники.ДоходыНДФЛ.Код1631191, Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13, "", Справочники.ВычетыНДФЛ.Код1631191);
   	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код1631191);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20130101', Справочники.ДоходыНДФЛ.Код1631191, 6000000);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
 	
КонецПроцедуры

 ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.36 РБ

Процедура ЗаполнитьНовыйВидыПособий()
	
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Справочники.КатегорииРасчетов;
	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	КодыДоходаПоСт255		 = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК;
	КодДоходаНДФЛПоУмолчанию = ДоходыНДФЛ.КодДоходаПоУмолчанию;
	ЕСНСпособыОтражения	 = Справочники.ДоходыЕСН;
	ВидыПремии = Перечисления.ВидыПремии;
	ПВРОсн = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	
  	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеНаРебенкаДо3Лет,						СпРасчета.ПособиеНаРебенкаДо3Лет,						Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 	Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеНаРебенкаДо3ЛетНаВторого,				СпРасчета.ПособиеНаРебенкаДо3ЛетНаВторого,				Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 	Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида,		СпРасчета.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида,		Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 	Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеНаРебенкаСтарше3Лет,					СпРасчета.ПособиеНаРебенкаСтарше3Лет,					Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 	Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
    УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида,	СпРасчета.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида,	Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 	Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);
    УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ОтпускПоБеременности,							СпРасчета.ПоСреднемуЗаработкуОтпускаПоБеременности,						Перечисления.ВидыВремени.ЦелодневноеНеотработанное, Категории.НайтиПоКоду("00003"),	Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам, 	Ложь,   Ложь, ,		ЕСНСпособыОтражения.БольничныйИзФСЗН,,, 6);

КонецПроцедуры

Процедура ОбновлениеРазмеровСреднегоЗаработка2013() Экспорт
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20121201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
   	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20121201', Параметр, 477.94);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20130301');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
   	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20130301', Параметр, 472.94);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить(); 
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20130501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
   	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20130501', Параметр, 500.88);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20121201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20121201', Параметр, 474.13);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20130301');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20130301', Параметр, 469.28);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20130501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20130501', Параметр, 498.83);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20130501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20130501', Параметр, 97.41);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();



КонецПроцедуры

Процедура ЗаполнитьСведенияОРазмерахГосударственныхПособий2013() 
	
	НаборЗаписей = РегистрыСведений.ГосударственныеПособия.СоздатьНаборЗаписей();

	/// На рождение ребёнка
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 1, 1);
	НоваяЗапись.Размер = 880.03;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	/// На рождение ребёнка
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 2, 1);
	НоваяЗапись.Размер = 924.15;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	/// На рождение ребёнка
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 5, 1);
	НоваяЗапись.Размер = 974.11;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();


	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииВторогоИПоследующихДетей;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 1, 1);
	НоваяЗапись.Размер = 1232.04;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииВторогоИПоследующихДетей;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 2, 1);
	НоваяЗапись.Размер = 1293.81;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииВторогоИПоследующихДетей;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 5, 1);
	НоваяЗапись.Размер = 1363.75;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();



    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 1, 1);
	НоваяЗапись.Размер = 88.00;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 2, 1);
	НоваяЗапись.Размер = 92.42;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 5, 1);
	НоваяЗапись.Размер = 97.41;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 1, 1);
	НоваяЗапись.Размер = 141.32;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 2, 1);
	НоваяЗапись.Размер = 154.21;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 5, 1);
	НоваяЗапись.Размер = 158.59;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаВторого;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 1, 1);
	НоваяЗапись.Размер = 161.51;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаВторого;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 2, 1);
	НоваяЗапись.Размер = 176.25;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить(); 
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаВторого;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 5, 1);
	НоваяЗапись.Размер = 181.24;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 1, 1);
	НоваяЗапись.Размер = 181.70;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 2, 1);
	НоваяЗапись.Размер = 198.28;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 5, 1);
	НоваяЗапись.Размер = 203.90;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить(); 
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 1, 1);
	НоваяЗапись.Размер = 88.00;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 2, 1);
	НоваяЗапись.Размер = 92.42;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 5, 1);
	НоваяЗапись.Размер = 68.19;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 1, 1);
	НоваяЗапись.Размер = 44.00;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 2, 1);
	НоваяЗапись.Размер = 46.20;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 5, 1);
	НоваяЗапись.Размер = 48.71;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 1, 1);
	НоваяЗапись.Размер = 61.60;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 2, 1);
	НоваяЗапись.Размер = 64.69;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 5, 1);
	НоваяЗапись.Размер = 97.41;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаВичИнфицРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 1, 1);
	НоваяЗапись.Размер = 61.60;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаВичИнфицРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 2, 1);
	НоваяЗапись.Размер = 64.69;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаВичИнфицРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 5, 1);
	НоваяЗапись.Размер = 68.20;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	
	
	
КонецПроцедуры

 ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.37 РБ


// Процедура заполняет предопределенную смену
//
Процедура ЗаполнитьПредопределенныеСмены() Экспорт
	
	Смена = Справочники.Смены.Смена24Часа.ПолучитьОбъект();
	Смена.ПериодыСмены.Очистить();
	ПериодСмены = Смена.ПериодыСмены.Добавить();
	ПериодСмены.ВремяНачала = Дата(1,1,1, 0, 0, 1);
	ПериодСмены.ВремяОкончания = Дата(1,1,1, 23, 59, 59);
	Смена.Записать();
	
КонецПроцедуры // ЗаполнитьПредопределенныеСмены()

//Обновляет коды элементов справочника "Смены" в случае, если код предопределенного и 
//пользовательского элемента совпадают
Процедура ОбновитьКодыСправочникаСмены() Экспорт
	
	СписокСмен = Новый СписокЗначений;
	Выборка = Справочники.Смены.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка.Предопределенный Тогда
			СписокСмен.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;	
	УстановитьЗначениеКодаПредопределенныхЭлементов(СписокСмен);
	ЗаполнитьПредопределенныеСмены();
	
КонецПроцедуры


 ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.39 РБ

Процедура ЗаполнитьНовыеОплатыБЛ()
			
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Справочники.КатегорииРасчетов;
	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	КодыДоходаПоСт255		 = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК;
	КодДоходаНДФЛПоУмолчанию = ДоходыНДФЛ.КодДоходаПоУмолчанию;
	ЕСНСпособыОтражения	 = Справочники.ДоходыЕСН;
	ВидыПремии = Перечисления.ВидыПремии;
	ПВРОсн = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ОплатаБЛ2013,					СпРасчета.ПоСреднемуЗаработкуФСЗН,						Перечисления.ВидыВремени.ЦелодневноеНеотработанное, Категории.НайтиПоКоду("00003"),	Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь, 	Ложь,   Ложь,ДоходыНДФЛ.КодДоходаПоУмолчанию ,		ЕСНСпособыОтражения.БольничныйИзФСЗН,,, 6);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ОпалатБЛПоУходу2013,			СпРасчета.ПоСреднемуЗаработкуФСЗН,						Перечисления.ВидыВремени.ЦелодневноеНеотработанное, Категории.НайтиПоКоду("00003"),	Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь, 	Ложь,   Ложь,ДоходыНДФЛ.КодДоходаПоУмолчанию ,		ЕСНСпособыОтражения.БольничныйИзФСЗН,,, 6);
    УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ОплатаБЛВМинРазмере,			СпРасчета.ОтпускПоБеременностиОтБПМ,					Перечисления.ВидыВремени.ЦелодневноеНеотработанное, Категории.НайтиПоКоду("00003"),	Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь, 	Ложь,   Ложь,ДоходыНДФЛ.КодДоходаПоУмолчанию ,		ЕСНСпособыОтражения.БольничныйИзФСЗН,,, 6);
 	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.40 РБ

Процедура ЗаполнитьСведенияОРазмерахГосударственныхПособийАвгуст2013() 
	
	НаборЗаписей = РегистрыСведений.ГосударственныеПособия.СоздатьНаборЗаписей();

	/// На рождение ребёнка
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 8, 1);
	НоваяЗапись.Размер = 1026.29;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

 	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииВторогоИПоследующихДетей;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 8, 1);
	НоваяЗапись.Размер = 1436.81;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

 	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 8, 1);
	НоваяЗапись.Размер = 102.63;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 8, 1);
	НоваяЗапись.Размер = 175.37;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаВторого;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 8, 1);
	НоваяЗапись.Размер =  200.43;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 8, 1);
	НоваяЗапись.Размер = 225.48;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить(); 
	
		
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 8, 1);
	НоваяЗапись.Размер = 51.31;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 8, 1);
	НоваяЗапись.Размер = 71.84;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
		
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаВичИнфицРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 8, 1);
	НоваяЗапись.Размер = 71.84;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20130801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 8, 1);
	НоваяЗапись.Размер = 102.63;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	
	
	
	
КонецПроцедуры

Процедура ОбновлениеРазмеровПоказателейАвгуст2013()
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20130801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20130801', Параметр, 102.63);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20130701');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20130701', Параметр, 518.54);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20130701');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20130701', Параметр, 515.99);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();


	
КонецПроцедуры

Процедура ЗаполнитьОплатыБЛДоговорникамИУволеным()
	
		
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Справочники.КатегорииРасчетов;
	ЗависимоеВторогоУровня = НайтиСоздатьКатегорию("00002","Зависимое второго уровня");
	ЗависимоеТретьегоУровня = НайтиСоздатьКатегорию("00003","Зависимое третьего уровня");
	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	ЕСНСпособыОтражения      = Справочники.ДоходыЕСН;
	КодыДоходаПоСт255		 = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК;
	КодДоходаНДФЛПоУмолчанию = ДоходыНДФЛ.КодДоходаПоУмолчанию;
	КодДоходаЕСНПоУмолчанию  = ЕСНСпособыОтражения.ОблагаетсяПолностью;
	ПособияЗаСчетФСС		 = ЕСНСпособыОтражения.БольничныйИзФСЗН;
	ПВР = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций;
	ВидыПремии = Перечисления.ВидыПремии;
	
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ОплатаБЛДоговорникам, 	СпРасчета.ПоСреднемуЗаработкуФСЗН,	ЗависимоеТретьегоУровня			, ВидыПремии.НеПремия,		 0, 6, КодДоходаНДФЛПоУмолчанию, 	ЕСНСпособыОтражения.БольничныйИзФСЗН, Неопределено,	  КодыДоходаПоСт255.ПособияПоВременнойНетрудоспособности);
    УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ОплатаБЛУволеным, 		СпРасчета.ПоСреднемуЗаработкуФСЗН,	ЗависимоеТретьегоУровня			, ВидыПремии.НеПремия,		 0, 6, КодДоходаНДФЛПоУмолчанию, 	ЕСНСпособыОтражения.БольничныйИзФСЗН, Неопределено,	  КодыДоходаПоСт255.ПособияПоВременнойНетрудоспособности);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.41 РБ
 
Процедура ИсправитьКодыДоходовНДФЛ()
	
	Ставка13 = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;  //прогрессивная шкала
	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	ВычетыНДФЛ = Справочники.ВычетыНДФЛ;
   	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код12117, 				Ставка13, "500", 	ВычетыНДФЛ.Код500);


	
	
КонецПроцедуры

 ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.43 РБ

Процедура ЗаполнитьНовыеОплатыБЛ43()
			
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Справочники.КатегорииРасчетов;
	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	КодыДоходаПоСт255		 = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК;
	КодДоходаНДФЛПоУмолчанию = ДоходыНДФЛ.КодДоходаПоУмолчанию;
	ЕСНСпособыОтражения	 = Справочники.ДоходыЕСН;
	ВидыПремии = Перечисления.ВидыПремии;
	ПВРОсн = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	
	
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ОтпускПоБеременности,			СпРасчета.ПоСреднемуЗаработкуФСЗН,					Перечисления.ВидыВремени.ЦелодневноеНеотработанное, Категории.НайтиПоКоду("00003"),	Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам, 			  Ложь,   		   Ложь,		ДоходыНДФЛ.Код1211 , ЕСНСпособыОтражения.БольничныйИзФСЗН,,, 6);
    УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ОплатаБЛОтТарфинойСтавки,		СпРасчета.РасчетБЛотТарифнойСтавки,					Перечисления.ВидыВремени.ЦелодневноеНеотработанное, Категории.НайтиПоКоду("00003"),	Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь, Ложь,  		   Ложь,		ДоходыНДФЛ.КодДоходаПоУмолчанию ,		  ЕСНСпособыОтражения.БольничныйИзФСЗН,,, 6);
 КонецПроцедуры                                                                                                                                                                                                                                                                                                              

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.44 РБ

Процедура ОбновлениеСкидокКДоходам2014года() Экспорт

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код1219);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20140101', Справочники.ДоходыНДФЛ.Код1219, 480.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код1216);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20140101', Справочники.ДоходыНДФЛ.Код1216, 3783.50);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код1631191);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20140101', Справочники.ДоходыНДФЛ.Код1631191, 1200.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код12117);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20140101', Справочники.ДоходыНДФЛ.Код12117, 1143.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код163119иныеорг);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20140101', Справочники.ДоходыНДФЛ.Код163119иныеорг, 75.50);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код163121помощь);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20140101', Справочники.ДоходыНДФЛ.Код163121помощь, 7561.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код12124);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20140101', Справочники.ДоходыНДФЛ.Код12124, 228.50);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
		
 	
КонецПроцедуры

Процедура ОбновлениеРазмеровПоказателей2014()
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20131101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20131101', Параметр, 104.75);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20131101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20131101', Параметр,  538.22);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20131101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20131101', Параметр, 534.88);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаЧасов;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20140101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20140101', Параметр, 167.9);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяВеличина;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20131001');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20131001', Параметр, 13.00);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.МинимальнаяЗарплатаРБ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20140101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20140101', Параметр, 166.00);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.ЧасоваяМинимальнаяЗарплата;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20140101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20140101', Параметр, 0.9890);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();



	
КонецПроцедуры

Процедура ЗаполнитьСведенияОРазмерахГосударственныхПособийНоябрь2013() 
	
	НаборЗаписей = РегистрыСведений.ГосударственныеПособия.СоздатьНаборЗаписей();

	/// На рождение ребёнка
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20131101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 11, 1);
	НоваяЗапись.Размер = 1047.53;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

 	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииВторогоИПоследующихДетей;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20131101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 11, 1);
	НоваяЗапись.Размер = 1466.54;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

 	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20131101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 11, 1);
	НоваяЗапись.Размер = 104.75;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20131101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 11, 1);
	НоваяЗапись.Размер = 191.11;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаВторого;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20131101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 11, 1);
	НоваяЗапись.Размер =  218.41;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20131101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 11, 1);
	НоваяЗапись.Размер = 245.72;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить(); 
	
		
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20131101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 11, 1);
	НоваяЗапись.Размер = 52.38;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20131101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 11, 1);
	НоваяЗапись.Размер = 73.33;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
		
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаВичИнфицРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20131101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 11, 1);
	НоваяЗапись.Размер = 73.33;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20131101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 11, 1);
	НоваяЗапись.Размер = 73.33;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20131101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2013, 11, 1);
	НоваяЗапись.Размер = 104.75;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	
	
	
КонецПроцедуры

Процедура ЗаполнитьОплатаБЛПоТравмеНаПроизводстве()
			
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Справочники.КатегорииРасчетов;
	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	КодыДоходаПоСт255		 = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК;
	КодДоходаНДФЛПоУмолчанию = ДоходыНДФЛ.КодДоходаПоУмолчанию;
	ЕСНСпособыОтражения	 = Справочники.ДоходыЕСН;
	ВидыПремии = Перечисления.ВидыПремии;
	ПВРОсн = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	
	
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ОплатаБЛПоТравмеНаПроизводстве,			СпРасчета.ПоСреднемуЗаработкуФСЗН,					Перечисления.ВидыВремени.ЦелодневноеНеотработанное, Категории.НайтиПоКоду("00003"),	Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам, 			  Ложь,   		   Ложь,		ДоходыНДФЛ.Код1211 , ЕСНСпособыОтражения.БольничныйИзФСЗН,,, 6);
    
 КонецПроцедуры                                                                                                                                                                                                                                                                                                              
 
 /////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ 2.5.48 РБ
 
Процедура ПроведениеДокументовРасчетЕСН()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",Дата('20140701'));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетЕСН.Ссылка
	|ИЗ
	|	Документ.РасчетЕСН КАК РасчетЕСН
	|ГДЕ
	|	РасчетЕСН.Проведен
	|	И РасчетЕСН.ПериодРегистрации >= &Период";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВсегоДокументов = Выборка.Количество();
	НомерДокумента = 1;
	Пока Выборка.Следующий() Цикл
		
		#Если Клиент Тогда
        Состояние("Обрабатывается документы Расчет отчислений с ФОТ "+НомерДокумента+" из "+ ВсегоДокументов);
		#КонецЕсли
		Попытка
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
		Исключение 
			Сообщить("Не удалось провести документ "+Выборка.Ссылка,СтатусСообщения.Важное);
		КонецПопытки
	КонецЦикла;

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры 2.5.51.6 РБ 

Процедура ОбновлениеСкидокКДоходам2015года() Экспорт

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код1219);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20150101', Справочники.ДоходыНДФЛ.Код1219, 554.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код1216);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20150101', Справочники.ДоходыНДФЛ.Код1216, 4366.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код1631191);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20150101', Справочники.ДоходыНДФЛ.Код1631191, 1600.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код12117);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20150101', Справочники.ДоходыНДФЛ.Код12117, 1319.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код163119иныеорг);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20150101', Справочники.ДоходыНДФЛ.Код163119иныеорг, 87.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код163121помощь);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20150101', Справочники.ДоходыНДФЛ.Код163121помощь, 8725.50);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код12124);
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20150101', Справочники.ДоходыНДФЛ.Код12124, 263.50);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
		
 	
КонецПроцедуры

Процедура ЗаполнитьСведенияШкалаПодоходногоНалога() 
	//РБ
	//Шкала подоходного налога

	НаборЗаписей = РегистрыСведений.ШкалаПодоходногоНалога.СоздатьНаборЗаписей();
		
	ДатаСведений = Дата("20090101");
	
	НоваяЗапись 				= НаборЗаписей.Добавить();
	НоваяЗапись.Период 			= ДатаСведений;
	НоваяЗапись.НижнийПредел	= 0;
	НоваяЗапись.ВерхнийПредел	= 0;
	НоваяЗапись.Налог			= 12;
	НаборЗаписей.Записать(Истина);
	
	
	ДатаСведений = Дата("20150101");
	
	НоваяЗапись 				= НаборЗаписей.Добавить();
	НоваяЗапись.Период 			= ДатаСведений;
	НоваяЗапись.НижнийПредел	= 0;
	НоваяЗапись.ВерхнийПредел	= 0;
	НоваяЗапись.Налог			= 13;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОРазмерахГосударственныхПособий2015() 
	
	НаборЗаписей = РегистрыСведений.ГосударственныеПособия.СоздатьНаборЗаписей();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 1, 1);
	НоваяЗапись.Размер = 1396.02;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 1, 1);
	НоваяЗапись.Размер = 139.60;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииВторогоИПоследующихДетей;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 1, 1);
	НоваяЗапись.Размер = 1954.43;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 1, 1);
	НоваяЗапись.Размер = 223.40;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	

    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 1, 1);
	НоваяЗапись.Размер = 69.80;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаВторого;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 1, 1);
	НоваяЗапись.Размер = 255.31;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 1, 1);
	НоваяЗапись.Размер = 287.22;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 1, 1);
	НоваяЗапись.Размер = 69.80;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 1, 1);
	НоваяЗапись.Размер = 97.72;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаВичИнфицРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 1, 1);
	НоваяЗапись.Размер = 97.72;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 1, 1);
	НоваяЗапись.Размер = 13.960;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
КонецПроцедуры

Процедура ЗаполнитьНовыйВидыПособий2015года()
	
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Справочники.КатегорииРасчетов;
	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	КодыДоходаПоСт255		 = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК;
	КодДоходаНДФЛПоУмолчанию = ДоходыНДФЛ.КодДоходаПоУмолчанию;
	ЕСНСпособыОтражения	 = Справочники.ДоходыЕСН;
	ВидыПремии = Перечисления.ВидыПремии;
	ПВРОсн = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	
  	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ,			СпРасчета.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ,			Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 	Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);

КонецПроцедуры

Процедура ЗаполнитьВидыРасчета2015года()
	
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Справочники.КатегорииРасчетов;
	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	КодыДоходаПоСт255		 = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК;
	КодДоходаНДФЛПоУмолчанию = ДоходыНДФЛ.КодДоходаПоУмолчанию;
	ЕСНСпособыОтражения	 = Справочники.ДоходыЕСН;
	ВидыПремии = Перечисления.ВидыПремии;
	УчетВремени = Справочники.КлассификаторИспользованияРабочегоВремени;
	ПВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	НеОтражатьВБухУчете   = Справочники.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете;

  	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускБезОплатыПоТКРФ,  СпРасчета.НулеваяСумма, Перечисления.ВидыВремени.ЦелодневноеНеотработанное, Категории.Первичное, УчетВремени.НеоплачиваемыйОтпускПоЗаконодательству      , Ложь, Истина, , ЕСНСпособыОтражения.ПериодыНеуплаты, НеОтражатьВБухУчете);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускБезОплатыУчебный, СпРасчета.НулеваяСумма, Перечисления.ВидыВремени.ЦелодневноеНеотработанное, Категории.Первичное, УчетВремени.ОтпускНаОбучениеНеоплачиваемый	           , Ложь, Истина, , ЕСНСпособыОтражения.ПериодыНеуплаты, НеОтражатьВБухУчете);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускЗаСвойСчет,		  СпРасчета.НулеваяСумма, Перечисления.ВидыВремени.ЦелодневноеНеотработанное, Категории.Первичное, УчетВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя, Ложь, Истина, , ЕСНСпособыОтражения.ПериодыНеуплаты, НеОтражатьВБухУчете);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.Прогул,				  СпРасчета.НулеваяСумма, Перечисления.ВидыВремени.ЦелодневноеНеотработанное, Категории.Первичное, УчетВремени.Прогулы                                     , Ложь, Истина, , ЕСНСпособыОтражения.ПериодыНеуплаты, НеОтражатьВБухУчете);


КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры 2.5.51.9 РБ 

Процедура ЗаполнитьСведенияОРазмерахГосударственныхПособийФевраль2015() 
	
	НаборЗаписей = РегистрыСведений.ГосударственныеПособия.СоздатьНаборЗаписей();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 2, 1);
	НоваяЗапись.Размер = 1428.10;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 2, 1);
	НоваяЗапись.Размер = 142.81;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииВторогоИПоследующихДетей;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 2, 1);
	НоваяЗапись.Размер = 1999.34;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 2, 1);
	НоваяЗапись.Размер = 226.12;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	

    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 2, 1);
	НоваяЗапись.Размер = 71.40;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаВторого;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 2, 1);
	НоваяЗапись.Размер = 258.43;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 2, 1);
	НоваяЗапись.Размер = 290.73;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 2, 1);
	НоваяЗапись.Размер = 71.41;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 2, 1);
	НоваяЗапись.Размер = 99.97;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаВичИнфицРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 2, 1);
	НоваяЗапись.Размер = 99.97;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 2, 1);
	НоваяЗапись.Размер = 142.81;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
		
КонецПроцедуры

Процедура ОбновлениеРазмеровБМПФевраль2015() Экспорт
		
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150201', Параметр, 142.81);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
 
КонецПроцедуры

Процедура ИсправитьВидыОбразования()
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыОбразованияФизЛиц.Ссылка
	|ИЗ
	|	Справочник.ВидыОбразованияФизЛиц КАК ВидыОбразованияФизЛиц
	|ГДЕ
	|	ВидыОбразованияФизЛиц.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ПометкаУдаления = Ложь;
		Попытка 
			СправочникОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры
	
///////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры 2.5.54.6 РБ 

Процедура ОбновлениеРазмеровПоказателейМай2015() Экспорт	
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150101', Параметр,  602.32);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150201', Параметр,  612.91);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150301');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150301', Параметр,  648.37);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150401');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150401', Параметр,  653.61);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150501', Параметр,  668.75);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

		
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150101', Параметр, 606.10);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
		
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150201', Параметр, 617.13);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150301');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150301', Параметр, 652.58);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150401');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150401', Параметр, 657.49);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150401');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150401', Параметр, 657.49);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150501', Параметр, 672.40);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяСтавка1разряда;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150201', Параметр, 27.70);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяСтавка1разряда;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150301');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150301', Параметр, 29.20);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150201', Параметр, 142.81);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150501', Параметр, 147.49);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяВеличина;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150101', Параметр, 18.00);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();


    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.МинимальнаяЗарплатаРБ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150101', Параметр, 210.01);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

КонецПроцедуры

Процедура ЗаполнитьСведенияОРазмерахГосударственныхПособийМай2015() Экспорт
	
	НаборЗаписей = РегистрыСведений.ГосударственныеПособия.СоздатьНаборЗаписей();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 5, 1);
	НоваяЗапись.Размер = 1474.87;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 5, 1);
	НоваяЗапись.Размер = 147.49;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	

    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 5, 1);
	НоваяЗапись.Размер = 73.74;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 5, 1);
	НоваяЗапись.Размер = 73.74;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 5, 1);
	НоваяЗапись.Размер = 103.24;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаВичИнфицРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 5, 1);
	НоваяЗапись.Размер = 103.24;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 5, 1);
	НоваяЗапись.Размер = 147.49;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииВторогоИПоследующихДетей;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 5, 1);
	НоваяЗапись.Размер = 2064.82;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();		
	
КонецПроцедуры

Процедура ЗаполнитьСведенияСчетаУчетаПоПодразделениямБПРБ20()  Экспорт
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство); 
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);

	Набор = РегистрыСведений.СчетаУчетаПоПодразделениям.СоздатьНаборЗаписей();
	Набор.Отбор.ПрограммаБухгалтерскогоУчета.Значение = Перечисления.ПрограммыБухгалтерскогоУчета.БухгалтерияПредприятияРБ20;
	Набор.Отбор.ПрограммаБухгалтерскогоУчета.Использование = Истина;
	
	Для Каждого СчетБУ из МассивСчетов Цикл
				
		Если ЗначениеЗаполнено(СчетБУ) Тогда
			Запись = Набор.Добавить();
			Запись.Счет = СчетБУ;
			Запись.ПрограммаБухгалтерскогоУчета = Перечисления.ПрограммыБухгалтерскогоУчета.БухгалтерияПредприятияРБ20;	
		КонецЕсли;
		
	КонецЦикла;
	
	Набор.Записать(Истина);
		
КонецПроцедуры

Процедура ИзменитьГрафикиРаботы()   
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикиРаботы.Ссылка КАК ГрафикРаботы
	|ИЗ
	|	Справочник.ГрафикиРаботы КАК ГрафикиРаботы";
	
	Выборка = Запрос.Выполнить().Выбрать();
			
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписейЗаДеньПоВремени = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
		НаборЗаписейЗаДеньПоВремени.Отбор.ГрафикРаботы.Значение       = Выборка.ГрафикРаботы;
		НаборЗаписейЗаДеньПоВремени.Отбор.ГрафикРаботы.Использование  = Истина;
		НаборЗаписейЗаДеньПоВремени.Отбор.План.Значение				  = Истина;
		НаборЗаписейЗаДеньПоВремени.Отбор.План.Использование		  = Истина;
		НаборЗаписейЗаДеньПоВремени.Прочитать();
		НаборЗаписейЗаДеньПоВремени.Записать(Истина); 
		
	КонецЦикла;
	              	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводИндивидуальныхГрафиковРаботыОрганизации.Ссылка
	|ИЗ
	|	Документ.ВводИндивидуальныхГрафиковРаботыОрганизации КАК ВводИндивидуальныхГрафиковРаботыОрганизации
	|ГДЕ
	|	ВводИндивидуальныхГрафиковРаботыОрганизации.Проведен";
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ТекстСообщения = "Обработка документов Ввод индивидуальных графиков работы организации";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ВсегоДоков = Выборка.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли

	Пока Выборка.Следующий() Цикл
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			Номер = Номер + 1;
		#КонецЕсли

		
		Попытка
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
		Исключение
		КонецПопытки 		
		
	КонецЦикла;   	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениОрганизации.Ссылка
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениОрганизации КАК ТабельУчетаРабочегоВремениОрганизации
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизации.Проведен";
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ТекстСообщения = "Обработка документов Табель учета рабочего времени";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ВсегоДоков = Выборка.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли

	Пока Выборка.Следующий() Цикл
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			Номер = Номер + 1;
		#КонецЕсли 
		
		Попытка
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
		Исключение
		КонецПопытки
		
		
	КонецЦикла;	

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры 2.5.55 РБ    


Процедура ОбновлениеРазмеровПоказателейАвгуст2015() Экспорт 	
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150601');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150601', Параметр,  688.37);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

		
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150601');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150601', Параметр, 691.97);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150801', Параметр, 156.91);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаДней;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150101', Параметр, 21.3);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаЧасов;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150101', Параметр, 169.3);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.ЧасоваяМинимальнаяЗарплата;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150101', Параметр, 1.2402);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОРазмерахГосударственныхПособийАвгуст2015() Экспорт
	
	НаборЗаписей = РегистрыСведений.ГосударственныеПособия.СоздатьНаборЗаписей();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 1569.13;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 156.91;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	

    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 78.46;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 78.46;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 109.84;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаВичИнфицРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 109.84;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 156.91;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииВторогоИПоследующихДетей;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 2196.78;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 234.40;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаВторого;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 267.89;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 301.38;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
КонецПроцедуры

Процедура ЗаполнитьФСЗНИнГрЕАЭС() 
	
	НаборЗаписей = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.СоздатьНаборЗаписей();	
	
	НоваяЗапись 					 = НаборЗаписей.Добавить();
	НоваяЗапись.Период				 = Дата("20150101");
	НоваяЗапись.ВидОтчисления	 	 = Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗНИнГрЕАЭС;
	НоваяЗапись.Размер 				 = 6;
	//НоваяЗапись.ОграничениеПоДоходам = 4;
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры	

///////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры 2.5.56 РБ    


Процедура ОбновлениеРазмеровПоказателейИюльАвгуст() Экспорт 	
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150701');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150701', Параметр,  700.86);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150701');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150701', Параметр, 704.08);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150801', Параметр,  697.05);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150801', Параметр, 698.82);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150901');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150901', Параметр,  686.30);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20150901');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20150901', Параметр, 689.88);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры 2.5.57 РБ   


Процедура ОбновлениеРазмеровПоказателейЯнварь2016() Экспорт 	
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20151001');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20151001', Параметр,  683.76);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20151001');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20151001', Параметр, 687.44);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20151101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20151101', Параметр,  674.88);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20151101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20151101', Параметр, 679.12);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.МинимальнаяЗарплатаРБ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160101', Параметр, 230.00);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.МинимальнаяЗарплатаРБ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20151001');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20151001', Параметр, 218.01);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
		
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяВеличина;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160101', Параметр, 21.00);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20151101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20151101', Параметр, 156.78);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20151101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20151101', Параметр, 156.78);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаДней;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160101', Параметр, 21.3);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаЧасов;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160101', Параметр, 169.8);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОРазмерахГосударственныхПособийЯнварь2016() Экспорт
	
	НаборЗаписей = РегистрыСведений.ГосударственныеПособия.СоздатьНаборЗаписей();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20151101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 11, 1);
	НоваяЗапись.Размер = 243.37;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаВторого;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20151101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 11, 1);
	НоваяЗапись.Размер = 278.14;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20151101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 11, 1);
	НоваяЗапись.Размер = 312.91;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
КонецПроцедуры

Процедура ОбновлениеСкидокКДоходам2016года() Экспорт

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код1219);
	НаборЗаписей.Отбор.Период.Установить('20160101');
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20160101', Справочники.ДоходыНДФЛ.Код1219, 628.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код1216);
	НаборЗаписей.Отбор.Период.Установить('20160101');	
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20160101', Справочники.ДоходыНДФЛ.Код1216, 4947.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код1631191);
	НаборЗаписей.Отбор.Период.Установить('20160101');	
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20160101', Справочники.ДоходыНДФЛ.Код1631191, 1813.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код12117);
	НаборЗаписей.Отбор.Период.Установить('20160101');	
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20160101', Справочники.ДоходыНДФЛ.Код12117, 1494.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код163119иныеорг);
	НаборЗаписей.Отбор.Период.Установить('20160101');	
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20160101', Справочники.ДоходыНДФЛ.Код163119иныеорг, 99.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код163121помощь);
	НаборЗаписей.Отбор.Период.Установить('20160101');	
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20160101', Справочники.ДоходыНДФЛ.Код163121помощь, 9886.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код12124);
	НаборЗаписей.Отбор.Период.Установить('20160101');	
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20160101', Справочники.ДоходыНДФЛ.Код12124, 299.00);
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
		
 	
КонецПроцедуры

Процедура ЗаполнитьСведенияОРазмерахГосударственныхПособий2015Август() Экспорт
	
	НаборЗаписей = РегистрыСведений.ГосударственныеПособия.СоздатьНаборЗаписей();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 1569.13;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 156.91;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	

    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 78.46;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 78.46;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 109.84;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаВичИнфицРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 109.84;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 156.91;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииВторогоИПоследующихДетей;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 2196.78;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 234.40;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаВторого;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 267.89;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20150801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2015, 8, 1);
	НоваяЗапись.Размер = 301.38;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
КонецПроцедуры

Процедура ЗаполнитьВидыРасчета2016года()
	
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Справочники.КатегорииРасчетов;
	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	КодыДоходаПоСт255		 = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК;
	КодДоходаНДФЛПоУмолчанию = ДоходыНДФЛ.КодДоходаПоУмолчанию;
	ЕСНСпособыОтражения	 = Справочники.ДоходыЕСН;
	ВидыПремии = Перечисления.ВидыПремии;
	УчетВремени = Справочники.КлассификаторИспользованияРабочегоВремени;
	ПВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	НеОтражатьВБухУчете   = Справочники.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете;
     	 
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускПоУходуЗаРебенкомБезОплаты,	СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное,			УчетВремени.ОтпускПоУходуЗаРебенком, 		Ложь,   Истина, ,ЕСНСпособыОтражения.НеОблагаетсяПолностью , НеОтражатьВБухУчете);
	//УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДниНеоплачиваемыеСогласноТабелю,	СпРасчета.НулеваяСумма,									Перечисления.ВидыВремени.ЦелодневноеНеотработанное, 	Категории.Первичное,			УчетВремени.НеявкиПоНевыясненнымПричинам, 	Ложь,   Истина, ,ЕСНСпособыОтражения.НеОблагаетсяПолностью , НеОтражатьВБухУчете);

	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры 2.5.58 РБ //////

Процедура ОбновлениеРазмеровПоказателейФевраль2016() Экспорт 	
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20151201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20151201', Параметр,  742.41);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20151201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20151201', Параметр, 746.61);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160101', Параметр,  655.16);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160101', Параметр, 658.75);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160201', Параметр, 159.13);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяСтавка1разряда;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160101', Параметр, 29.50);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
		
КонецПроцедуры

Процедура ЗаполнитьСведенияОРазмерахГосударственныхПособий2016Февраль() Экспорт
	
	НаборЗаписей = РегистрыСведений.ГосударственныеПособия.СоздатьНаборЗаписей();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 2, 1);
	НоваяЗапись.Размер = 1591.31;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 2, 1);
	НоваяЗапись.Размер = 159.13;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	

    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 2, 1);
	НоваяЗапись.Размер = 79.57;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 2, 1);
	НоваяЗапись.Размер = 79.57;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 2, 1);
	НоваяЗапись.Размер = 111.39;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаВичИнфицРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 2, 1);
	НоваяЗапись.Размер = 111.39;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 2, 1);
	НоваяЗапись.Размер = 159.13;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииВторогоИПоследующихДетей;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 2, 1);
	НоваяЗапись.Размер = 2227.83;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 2, 1);
	НоваяЗапись.Размер = 245.05;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаВторого;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 2, 1);
	НоваяЗапись.Размер = 280.05;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 2, 1);
	НоваяЗапись.Размер = 315.06;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры 2.5.59 РБ //////

Процедура ОбновлениеРазмеровПоказателейИюнь2016() Экспорт 	
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160201', Параметр,  661.57);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160201', Параметр, 665.26);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160301');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160301', Параметр,  709.45);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160301');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160301', Параметр, 713.64);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160401');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160401', Параметр,  708.60);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160401');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160401', Параметр, 711.81);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160501', Параметр, 169.94);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяСтавка1разряда;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160401');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160401', Параметр, 29.80);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
		
КонецПроцедуры

Процедура ЗаполнитьСведенияОРазмерахГосударственныхПособий2016Июнь() Экспорт
	
	НаборЗаписей = РегистрыСведений.ГосударственныеПособия.СоздатьНаборЗаписей();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 5, 1);
	НоваяЗапись.Размер = 1699.43;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 5, 1);
	НоваяЗапись.Размер = 169.94;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	

    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 5, 1);
	НоваяЗапись.Размер = 84.97;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 5, 1);
	НоваяЗапись.Размер = 84.97;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 5, 1);
	НоваяЗапись.Размер = 118.96;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаВичИнфицРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 5, 1);
	НоваяЗапись.Размер = 118.96;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 5, 1);
	НоваяЗапись.Размер = 169.94;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииВторогоИПоследующихДетей;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 5, 1);
	НоваяЗапись.Размер = 2379.20;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
		
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры 2.5.59 РБ //////Финальный

Процедура ОбновлениеРазмеровПоказателейСреднейЗарплатыИюнь2016() Экспорт 	
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160501', Параметр,  718.29);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160501', Параметр, 721.19);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
		
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры 2.5.60 РБ ///// 

Процедура ОбновлениеРазмеровПоказателейСреднейЗарплатыАвгуст2016() Экспорт 	
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160601');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160601', Параметр,  738.74);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160601');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160601', Параметр, 741.66);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160801', Параметр, 175.50);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяСтавка1разряда;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160701');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160701', Параметр, 29.80);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
		
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.МинимальнаяЗарплатаРБ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160701');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160701', Параметр, 239.48);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяВеличина;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160701');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160701', Параметр, 21.00);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	

КонецПроцедуры

Процедура ЗаполнитьСведенияОРазмерахГосударственныхПособийАвгуст2016() Экспорт
	
	НаборЗаписей = РегистрыСведений.ГосударственныеПособия.СоздатьНаборЗаписей();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 8, 1);
	НоваяЗапись.Размер = 1755.00;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();		
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииВторогоИПоследующихДетей;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 8, 1);
	НоваяЗапись.Размер = 2457.00;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();			
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 8, 1);
	НоваяЗапись.Размер = 175.50;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	

    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 8, 1);
	НоваяЗапись.Размер = 87.75;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 8, 1);
	НоваяЗапись.Размер = 87.75;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 8, 1);
	НоваяЗапись.Размер = 122.85;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаВичИнфицРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 8, 1);
	НоваяЗапись.Размер = 122.85;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 8, 1);
	НоваяЗапись.Размер = 175.50;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();		
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 8, 1);
	НоваяЗапись.Размер = 252.39;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаВторого;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 8, 1);
	НоваяЗапись.Размер = 288.44;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20160801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 8, 1);
	НоваяЗапись.Размер = 324.50;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры 2.5.61 РБ ///// 

Процедура ОбновлениеРазмеровПоказателейСреднейЗарплатыДекабрь2016() Экспорт 	
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160701');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160701', Параметр,  745.8);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160801', Параметр,  750.3);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160901');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160901', Параметр,  732.9);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20161001');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20161001', Параметр,  722.9);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160701');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160701', Параметр, 748.1);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160801', Параметр, 751.8);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20160901');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20160901', Параметр, 734.8);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	

	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20161001');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20161001', Параметр, 724.7);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20161101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20161101', Параметр, 174.52);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.МинимальнаяЗарплатаРБ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20161001');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20161001', Параметр, 239.42);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();			
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяВеличина;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170101', Параметр, 23.00);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаЧасов;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170101', Параметр, 168.3);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаДней;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170101', Параметр, 21.1);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	

КонецПроцедуры

Процедура ЗаполнитьСведенияОРазмерахГосударственныхПособийДекабрь2016() Экспорт
	
	НаборЗаписей = РегистрыСведений.ГосударственныеПособия.СоздатьНаборЗаписей();
		
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20161101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 11, 1);
	НоваяЗапись.Размер = 260.26;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаВторого;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20161101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 11, 1);
	НоваяЗапись.Размер = 297.44;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20161101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2016, 11, 1);
	НоваяЗапись.Размер = 334.62;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
КонецПроцедуры

Процедура ОбновлениеСкидокКДоходам2017года() Экспорт

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код1219);
	НаборЗаписей.Отбор.Период.Установить('20170101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();	
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20170101', Справочники.ДоходыНДФЛ.Код1219, 705.00);
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код1216);
	НаборЗаписей.Отбор.Период.Установить('20170101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();		
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20170101', Справочники.ДоходыНДФЛ.Код1216, 5555.00);       
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код1631191);
	НаборЗаписей.Отбор.Период.Установить('20170101');	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();		
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20170101', Справочники.ДоходыНДФЛ.Код1631191, 2874.00);
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код12117);
	НаборЗаписей.Отбор.Период.Установить('20170101');	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();		
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20170101', Справочники.ДоходыНДФЛ.Код12117, 1678.00);
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код163119иныеорг);
	НаборЗаписей.Отбор.Период.Установить('20170101');	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();		
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20170101', Справочники.ДоходыНДФЛ.Код163119иныеорг, 111.00);
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код163121помощь);
	НаборЗаписей.Отбор.Период.Установить('20170101');	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();		
	ДобавитьСкидкуКДодохамНДФЛ2012(НаборЗаписей, '20170101', Справочники.ДоходыНДФЛ.Код163121помощь, 11102.00);
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

		
 	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры 2.5.62 РБ ///// 

Процедура ОбновлениеРазмеровПоказателейСреднейЗарплатыМай2017() Экспорт 	
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20161101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20161101', Параметр,  717.60);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20161201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20161201', Параметр,  801.60);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170101', Параметр,  720.70);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170201', Параметр,  716.50);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170301');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170301', Параметр, 770.60);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170401');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170401', Параметр, 776.70);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
	//Средняя зп 
	
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20161101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20161101', Параметр,  718.90);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20161201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20161201', Параметр,  802.00);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170101', Параметр,  721.10);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170201', Параметр,  717.00);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170301');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170301', Параметр, 771.10);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170401');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170401', Параметр, 777.00);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
	//БПМ
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170201', Параметр, 180.10);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170501', Параметр, 183.82);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.МинимальнаяЗарплатаРБ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170101', Параметр, 265.00);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();			
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяСтавка1разряда;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170101');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170101', Параметр, 31.00);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	

КонецПроцедуры

Процедура ЗаполнитьСведенияОРазмерахГосударственныхПособийМай2017() Экспорт
	
	
	НаборЗаписей = РегистрыСведений.ГосударственныеПособия.СоздатьНаборЗаписей();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 2, 1);
	НоваяЗапись.Размер = 1801.00;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 5, 1);
	НоваяЗапись.Размер = 1838.20;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();		
	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииВторогоИПоследующихДетей;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 2, 1);
	НоваяЗапись.Размер = 2521.40;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();			
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииВторогоИПоследующихДетей;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 5, 1);
	НоваяЗапись.Размер = 2573.48;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();			
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 2, 1);
	НоваяЗапись.Размер = 180.10;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 5, 1);
	НоваяЗапись.Размер = 183.82;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	

    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 2, 1);
	НоваяЗапись.Размер = 90.05;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 5, 1);
	НоваяЗапись.Размер = 91.91;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 2, 1);
	НоваяЗапись.Размер = 90.05;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 5, 1);
	НоваяЗапись.Размер = 91.91;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 2, 1);
	НоваяЗапись.Размер = 126.07;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 5, 1);
	НоваяЗапись.Размер = 128.67;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
		
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаВичИнфицРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 2, 1);
	НоваяЗапись.Размер = 126.07;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаВичИнфицРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 5, 1);
	НоваяЗапись.Размер = 128.67;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 2, 1);
	НоваяЗапись.Размер = 180.10;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();		
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 5, 1);
	НоваяЗапись.Размер = 183.82;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();		
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 2, 1);
	НоваяЗапись.Размер = 261.38;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаВторого;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 2, 1);
	НоваяЗапись.Размер = 298.72;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170201');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 2, 1);
	НоваяЗапись.Размер = 336.06;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	
КонецПроцедуры

Процедура ЗаполнитьСведенияНДФЛРазмерВычетов2017() Экспорт
	
	ВычетыНДФЛ = Справочники.ВычетыНДФЛ;
	
	
	ДатаСведений = Дата("20170101");
	
	НаборЗаписей = РегистрыСведений.НДФЛРазмерВычетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодВычета.Установить(ВычетыНДФЛ.Код600);
	НаборЗаписей.Отбор.Период.Установить(ДатаСведений);	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();		
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код600,  93.00 , 563.00);
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛРазмерВычетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодВычета.Установить(ВычетыНДФЛ.Код610);
	НаборЗаписей.Отбор.Период.Установить(ДатаСведений);	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();		
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код610,  27.00, 0);
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛРазмерВычетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодВычета.Установить(ВычетыНДФЛ.Код611);
	НаборЗаписей.Отбор.Период.Установить(ДатаСведений);	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();		
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код611,  52.00, 0);
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	НаборЗаписей = РегистрыСведений.НДФЛРазмерВычетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодВычета.Установить(ВычетыНДФЛ.Код620);
	НаборЗаписей.Отбор.Период.Установить(ДатаСведений);	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();		
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код620,  131.00, 0);
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры 2.5.63 РБ ///// 

Процедура ОбновлениеРазмеровПоказателейСреднейЗарплатыИюль2017() Экспорт 	
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170501', Параметр,  795.20);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170601');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170601', Параметр,  819.30);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
	//Средняя зп 		
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170501');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170501', Параметр,  795.20);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170601');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170601', Параметр,  819.30);	
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
	//БПМ
	
    Параметр = Перечисления.ВидыПараметровДляРасчетаЗарплаты.БПМ;
	НаборЗаписей = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидПараметра.Установить(Параметр);
	НаборЗаписей.Отбор.Период.Установить('20170801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    НаборЗаписей.Записать();
	УстановтьРазмерПарметраДляРасчето(НаборЗаписей, '20170801', Параметр, 197.57);
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

КонецПроцедуры

Процедура СоздатьПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ() Экспорт 
	
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Справочники.КатегорииРасчетов;
	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	КодыДоходаПоСт255		 = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК;
	КодДоходаНДФЛПоУмолчанию = ДоходыНДФЛ.КодДоходаПоУмолчанию;
	ЕСНСпособыОтражения	 = Справочники.ДоходыЕСН;
	ВидыПремии = Перечисления.ВидыПремии;
	ПВРОсн = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	
  	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ,			СпРасчета.ПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ,			Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 	Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);

КонецПроцедуры

Процедура СоздатьПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ() Экспорт 
	
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Справочники.КатегорииРасчетов;
	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	КодыДоходаПоСт255		 = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК;
	КодДоходаНДФЛПоУмолчанию = ДоходыНДФЛ.КодДоходаПоУмолчанию;
	ЕСНСпособыОтражения	 = Справочники.ДоходыЕСН;
	ВидыПремии = Перечисления.ВидыПремии;
	ПВРОсн = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	
  	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВРОсн.ПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ,			СпРасчета.ПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ,			Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы, Категории.Первичное,	Неопределено, 	Ложь,   Ложь, ,		ЕСНСпособыОтражения.ПособияИзФСЗН);

КонецПроцедуры

Процедура ЗаполнитьСведенияОРазмерахГосударственныхПособийИюль2017() Экспорт
		
	НаборЗаписей = РегистрыСведений.ГосударственныеПособия.СоздатьНаборЗаписей();
		
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 8, 1);
	НоваяЗапись.Размер = 1975.70;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();			
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриРожденииВторогоИПоследующихДетей;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 8, 1);
	НоваяЗапись.Размер = 2765.98;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();				
 	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 8, 1);
	НоваяЗапись.Размер = 197.57;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 8, 1);
	НоваяЗапись.Размер = 98.79;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 8, 1);
	НоваяЗапись.Размер = 98.79;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();		
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 8, 1);
	НоваяЗапись.Размер = 138.3;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();		
		
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаВичИнфицРебенка;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 8, 1);
	НоваяЗапись.Размер = 138.3;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 8, 1);
	НоваяЗапись.Размер = 197.57;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();		
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 8, 1);
	НоваяЗапись.Размер = 197.57;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();		
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 8, 1);
	НоваяЗапись.Размер = 237.08;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();		
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 8, 1);
	НоваяЗапись.Размер = 278.88;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаВторого;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 8, 1);
	НоваяЗапись.Размер = 318.72;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();	
	
    ВидПособия = Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида;
	НаборЗаписей.Отбор.ВидПособия.Установить(ВидПособия);
	НаборЗаписей.Отбор.Период.Установить('20170801');
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидПособия =  ВидПособия;
	НоваяЗапись.Период = Дата(2017, 8, 1);
	НоваяЗапись.Размер = 358.56;
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей.Очистить();

	
КонецПроцедуры


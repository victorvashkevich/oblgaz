#Если Клиент Тогда
Перем мСведенияОВидахРасчетаОснНачислений;
//Перем ТаблицаВзаиморасчеты;
//Перем ТаблицаЗарплатаЗаМесяц;

Процедура ПереносДанныхФСЗН(Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("Организация",Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСНСведенияОДоходах.Период,
	|	ЕСНСведенияОДоходах.Организация,
	|	ЕСНСведенияОДоходах.ФизЛицо,
	|	ЕСНСведенияОДоходах.ПериодВзаиморасчетов,
	|	ЕСНСведенияОДоходах.Сотрудник,
	|	ЕСНСведенияОДоходах.Результат,
	|	ЕСНСведенияОДоходах.Скидка,
	|	ЕСНСведенияОДоходах.БазаФСЗН,
	|	ЕСНСведенияОДоходах.БазаППС,
	|	ЕСНСведенияОДоходах.ДоплатаДоМЗП,
	|	ЕСНСведенияОДоходах.доходЕдиныйПлатеж,
	|	ЕСНСведенияОДоходах.ОбособленноеПодразделение,
	|	ЕСНСведенияОДоходах.КодДоходаЕСН,
	|	ЕСНСведенияОДоходах.ДоходФСЗН,
	|	ЕСНСведенияОДоходах.ДоходСтрах,
	|	ЕСНСведенияОДоходах.ДоходППС,
	|	ЕСНСведенияОДоходах.ВидДеятельности,
	|	ЕСНСведенияОДоходах.ДокументОснование
	|ИЗ
	|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|ГДЕ
	|	ЕСНСведенияОДоходах.Организация = &Организация
	|	И ЕСНСведенияОДоходах.ПериодВзаиморасчетов < &Период";
	
	СведенияОДоходах = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСНИсчисленный.Период,
	|	ЕСНИсчисленный.Активность,
	|	ЕСНИсчисленный.ФизЛицо,
	|	ЕСНИсчисленный.Организация,
	|	ЕСНИсчисленный.ПериодВзаиморасчетов,
	|	ЕСНИсчисленный.ПроцентФСЗН,
	|	ЕСНИсчисленный.ВидДеятельности,
	|	ЕСНИсчисленный.Сотрудник,
	|	ЕСНИсчисленный.ПенсионныйФонд,
	|	ЕСНИсчисленный.ФСЗН,
	|	ЕСНИсчисленный.ЕдиныйПлатеж,
	|	ЕСНИсчисленный.ОбязательноеСтрахование,
	|	ЕСНИсчисленный.ППС,
	|	ЕСНИсчисленный.ОбособленноеПодразделение,
	|	ЕСНИсчисленный.ПроцентППС
	|ИЗ
	|	РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленный
	|ГДЕ
	|	ЕСНИсчисленный.Организация = &Организация
	|	И ЕСНИсчисленный.ПериодВзаиморасчетов < &Период";
	
	Исчисленный = Запрос.Выполнить().Выгрузить();

	
	Объект = Документы.КорректировкаЗаписейРегистровНакопления.СоздатьДокумент();
	Объект.Дата = Период;
	ТЧТаблицаРегистровНакопления =  Объект.ТаблицаРегистровНакопления;
	НовыйСтрока = ТЧТаблицаРегистровНакопления.Добавить();
	НовыйСтрока.Имя = "ЕСНИсчисленныйДоДеноминации"; 
	НовыйСтрока.Представление = "Взносы с ФОТ Исчисленные до деноминации"; 
	НовыйСтрока = ТЧТаблицаРегистровНакопления.Добавить();
	НовыйСтрока.Имя = "ЕСНСведенияОДоходахДоДеноминации"; 
	НовыйСтрока.Представление = "Фонды Сведения о доходах до деноминации";
    Объект.Движения.ЕСНИсчисленныйДоДеноминации.Загрузить(Исчисленный);
	Объект.Движения.ЕСНСведенияОДоходахДоДеноминации.Загрузить(СведенияОДоходах);	
	
	
	Попытка 
		
		Если ЗаписатьДеноминированныеОбъект("Перенос данных ФСЗН " + Организация) Тогда 
			Объект.Записать();
		КонецЕсли; 
		
	Исключение
	
		НаборЗаписей = РегистрыСведений.ДеноминированныеОбъекты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить("Перенос данных ФСЗН " + Организация);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	
	
	КонецПопытки;


	
КонецПроцедуры

Процедура ПереносДанныхПоВзаиморасчетам(Период) Экспорт
	
	УчетнаяПолитикаПоПерсоналу = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
	УчетЗадолженностиПоМесяцам =  ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналу, Организация, "УчетЗадолженностиПоМесяцам");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("УчетЗадолженностиПоМесяцам",УчетЗадолженностиПоМесяцам);
	Запрос.УстановитьПараметр("ПустаДата",Дата("00010101"));


	
	ТекстВзаиморасчеты = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &УчетЗадолженностиПоМесяцам
	|			ТОГДА ВзаиморасчетыСРаботникамиОрганизацийОстатки.ПериодВзаиморасчетов
	|		ИНАЧЕ &ПустаДата
	|	КОНЕЦ КАК ПериодВзаиморасчетов,
	|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Физлицо,
	|	&Период КАК Период,
	|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки КАК ВзаиморасчетыСРаботникамиОрганизацийОстатки
	|ГДЕ
	|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Организация = &Организация";
	
    ТекстЗарплатаЗаМесяц = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &УчетЗадолженностиПоМесяцам
	|			ТОГДА ЗарплатаЗаМесяцОрганизацийОстатки.ПериодВзаиморасчетов
	|		ИНАЧЕ &ПустаДата
	|	КОНЕЦ КАК ПериодВзаиморасчетов,
	|	ЗарплатаЗаМесяцОрганизацийОстатки.Физлицо,
	|	&Период КАК Период,
	|	ЗарплатаЗаМесяцОрганизацийОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ЗарплатаЗаМесяцОрганизацийОстатки.Организация
	|ИЗ
	|	РегистрНакопления.ЗарплатаЗаМесяцОрганизаций.Остатки КАК ЗарплатаЗаМесяцОрганизацийОстатки
	|ГДЕ
	|	ЗарплатаЗаМесяцОрганизацийОстатки.Организация = &Организация";
	
		
	Объект = Документы.КорректировкаЗаписейРегистровНакопления.СоздатьДокумент();
	Объект.Дата = Период;
	ТЧТаблицаРегистровНакопления =  Объект.ТаблицаРегистровНакопления;
	НовыйСтрока = ТЧТаблицаРегистровНакопления.Добавить();
	НовыйСтрока.Имя = "КорректировкаВзаиморасчетыСРаботникамиОрганизаций"; 
	НовыйСтрока.Представление = "Корректировка взаиморасчеты с работниками организаций"; 
	НовыйСтрока = ТЧТаблицаРегистровНакопления.Добавить();
	НовыйСтрока.Имя = "КорректировкаЗарплатаЗаМесяцОрганизаций"; 
	НовыйСтрока.Представление = "Корректировка зарплата за месяц организаций";
	Запрос.Текст = ТекстВзаиморасчеты;
	ТаблицаВзаиморасчеты =  Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из ТаблицаВзаиморасчеты Цикл
		НоваяСтрока = Объект.Движения.КорректировкаВзаиморасчетыСРаботникамиОрганизаций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока.СуммаВзаиморасчетовДеноминированная = Деноминировать(Строка.СуммаВзаиморасчетов);
	КонецЦикла;
		
	Запрос.Текст = ТекстЗарплатаЗаМесяц;
	ТаблицаЗарплатаЗаМесяц =  Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из ТаблицаЗарплатаЗаМесяц Цикл
		НоваяСтрока = Объект.Движения.КорректировкаЗарплатаЗаМесяцОрганизаций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока.СуммаВзаиморасчетовДеноминированная = Деноминировать(Строка.СуммаВзаиморасчетов);
	КонецЦикла;    
	
	Попытка 
		
		Если ЗаписатьДеноминированныеОбъект("Перенос данных по взаиморасчетам"+ Организация) Тогда 
			Объект.Записать();
		КонецЕсли; 
		
	Исключение
	
		НаборЗаписей = РегистрыСведений.ДеноминированныеОбъекты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить("Перенос данных по взаиморасчетам"+ Организация);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	
	
	КонецПопытки;
		
	
	Если УчетЗадолженностиПоМесяцам Тогда
		ТекстВзаиморасчеты = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Физлицо,
		|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Организация,
		|	СУММА(ВзаиморасчетыСРаботникамиОрганизацийОстатки.СуммаВзаиморасчетовДеноминированная) КАК СуммаВзаиморасчетовДеноминированная,
		|	СУММА(ВзаиморасчетыСРаботникамиОрганизацийОстатки.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовДоДеноминации,
		|	МАКСИМУМ(ВзаиморасчетыСРаботникамиОрганизацийОстатки.ПериодВзаиморасчетов) КАК ПериодВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.КорректировкаВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизацийОстатки
		|ГДЕ
		|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Физлицо,
		|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Организация";
		
		ТекстЗарплатаЗаМесяц = 
		"ВЫБРАТЬ
		|	ЗарплатаЗаМесяцОрганизацийОстатки.Физлицо,
		|	ЗарплатаЗаМесяцОрганизацийОстатки.Организация,
		|	СУММА(ЗарплатаЗаМесяцОрганизацийОстатки.СуммаВзаиморасчетовДеноминированная) КАК СуммаВзаиморасчетовДеноминированная,
		|	СУММА(ЗарплатаЗаМесяцОрганизацийОстатки.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовДоДеноминации,
		|	МАКСИМУМ(ЗарплатаЗаМесяцОрганизацийОстатки.ПериодВзаиморасчетов) КАК ПериодВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.КорректировкаЗарплатаЗаМесяцОрганизаций КАК ЗарплатаЗаМесяцОрганизацийОстатки
		|ГДЕ
		|	ЗарплатаЗаМесяцОрганизацийОстатки.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаЗаМесяцОрганизацийОстатки.Физлицо,
		|	ЗарплатаЗаМесяцОрганизацийОстатки.Организация";
		
		Запрос.Текст = ТекстВзаиморасчеты;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СуммаКорректировки =  Деноминировать(Выборка.СуммаВзаиморасчетовДоДеноминации) - Выборка.СуммаВзаиморасчетовДеноминированная;
			Если СуммаКорректировки <> 0 Тогда
				
				НоваяСтрока = Объект.Движения.КорректировкаВзаиморасчетыСРаботникамиОрганизаций.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка); 
				НоваяСтрока.Период = Выборка.ПериодВзаиморасчетов; 
				//НоваяСтрока.ПериодВзаиморасчетов = НачалоМесяца(Период -1);
				НоваяСтрока.СуммаВзаиморасчетовДеноминированная = СуммаКорректировки;

			КонецЕсли; 
		КонецЦикла;
		
		Запрос.Текст = ТекстЗарплатаЗаМесяц;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СуммаКорректировки =  Деноминировать(Выборка.СуммаВзаиморасчетовДоДеноминации) - Выборка.СуммаВзаиморасчетовДеноминированная;
			Если СуммаКорректировки <> 0 Тогда
				НоваяСтрока = Объект.Движения.КорректировкаЗарплатаЗаМесяцОрганизаций.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка); 
				НоваяСтрока.Период = Выборка.ПериодВзаиморасчетов;
				//НоваяСтрока.ПериодВзаиморасчетов = НачалоМесяца(Период -1);
				НоваяСтрока.СуммаВзаиморасчетовДеноминированная = СуммаКорректировки;

			КонецЕсли; 
		КонецЦикла;
		
		Объект.Записать();

		
	КонецЕсли;
	
КонецПроцедуры

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(КодПоиска ,Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском) Экспорт

	Ссылка = Справочники.Валюты.НайтиПоКоду(КодПоиска);

	Если Не Ссылка.Пустая() Тогда
		СправочникОбъект = Ссылка.ПолучитьОбъект();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;
		СправочникОбъект.ЧислоЗнаковДрЧасти        = 2;

		Попытка 
		
			Если ЗаписатьДеноминированныеОбъект("Изменить валюты BYR на BYN") Тогда 
				ЗаписатьСправочникОбъект(СправочникОбъект);
      		КонецЕсли; 
		
		Исключение
	
			НаборЗаписей = РегистрыСведений.ДеноминированныеОбъекты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить("Изменить валюты BYR на BYN");
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
	
	
		КонецПопытки;


		
		Ссылка = СправочникОбъект.Ссылка;

		// установим курс и кратность = 1 на 1 января 1980
		ОбщегоНазначения.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);

	КонецЕсли;

	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

Функция УбратьКонтрольШтатного() Экспорт
	
	УчетнаяПолитикаПоПерсоналу = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
	ПроверкаШтатногоРасписания =  ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналу, Организация, "ПроверкаШтатногоРасписания");
	Если ПроверкаШтатногоРасписания Тогда
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоПерсоналуОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Прочитать();
		НаборЗаписей[0].ПроверкаШтатногоРасписания = Ложь;
		НаборЗаписей.Записать();
		глЗначениеПеременнойУстановить("глУчетнаяПолитикаПоПерсоналуОрганизации", ОбщегоНазначенияЗК.ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации(), Истина);

		Возврат Истина
	Иначе
		Возврат Ложь
	КонецЕсли;

	


КонецФункции

Функция ИзменениеУП() Экспорт
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоПерсоналуОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	НаборЗаписей[0].ПроверкаШтатногоРасписания = Истина;
	НаборЗаписей.Записать();

	
КонецФункции

Процедура ЗаполнитьПериодВзаиморасчетов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ПустаяДата",	'00010101');
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВзаиморасчетыСРаботникамиОрганизаций.Регистратор,
	|	ВзаиморасчетыСРаботникамиОрганизаций.Период
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизаций
	|ГДЕ
	|	ВзаиморасчетыСРаботникамиОрганизаций.ПериодВзаиморасчетов = &ПустаяДата
	|	И ВзаиморасчетыСРаботникамиОрганизаций.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВзаиморасчетыСРаботникамиОрганизаций.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Регистратор.ПолучитьОбъект();
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту") Тогда
			Если ЗначениеЗаполнено(Объект.ПервичныйБольничныйЛист) Тогда
				ПервичныйОбъект =  Объект.ПервичныйБольничныйЛист.ПолучитьОбъект();
				Если НЕ ЗначениеЗаполнено(ПервичныйОбъект.ДатаНачалаБольничногоЛиста) Тогда
					ПервичныйОбъект.ДатаНачалаБольничногоЛиста = ПервичныйОбъект.ДатаНачала;	
					ПервичныйОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			Иначе
				Если НЕ ЗначениеЗаполнено(Объект.ДатаНачалаБольничногоЛиста) Тогда
					Объект.ДатаНачалаБольничногоЛиста = Объект.ДатаНачала;	 
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка 
			Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.КорректировкаЗаписейРегистровНакопления") ИЛИ ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.Сторнирование") Тогда
				Объект.Записать();
			Иначе
			
			   Объект.Записать(РежимЗаписиДокумента.Проведение);
		   КонецЕсли;
	    Исключение
		КонецПопытки   
	КонецЦикла;  	
	
КонецПроцедуры

Процедура ЗаписатьСправочникОбъект(СправочникОбъект) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		СтрСообщения1 = "Создан";
	Иначе
		СтрСообщения1 = "Обработан";
	КонецЕсли;

	Если СправочникОбъект.ЭтоГруппа Тогда
		СтрСообщения2 = "а группа";
	Иначе
		СтрСообщения2 = " элемент";
	КонецЕсли;

	СтрСообщения2 = СтрСообщения2 + " справочника """ + СправочникОбъект.Метаданные().Синоним + """: ";
	СтрСообщения3 = "наименование """ + СправочникОбъект.Наименование + """";

	Попытка
		СправочникОбъект.Записать();
		Сообщить(СтрСообщения1 + СтрСообщения2 + "код """ + СправочникОбъект.ПолныйКод() + """, " + СтрСообщения3, СтатусСообщения.Обычное);
	Исключение
		Сообщить("Не записан"  + СтрСообщения2 + СтрСообщения3 +
		         Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;

КонецПроцедуры
  
Процедура ДеноминацияПериодическогоРегистраСведений(Период,ИмяРегистраСведений,ИмяРесурса,ИмяИзмерения = Неопределено, ЗначенияИзмерения = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",Период);
	Если ЗначенияИзмерения <> Неопределено Тогда
		Запрос.УстановитьПараметр("ЗначенияИзмерения",ЗначенияИзмерения);
   	КонецЕсли; 
	Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрСведений.Период КАК Период";
	Если ЗначенияИзмерения <> Неопределено Тогда
		Текст = Текст + ",РегистрСведений."+ИмяИзмерения+" КАК Измерение";	
    КонецЕсли;
	Текст = Текст + "
	|ИЗ
	|	РегистрСведений."+ИмяРегистраСведений+" КАК РегистрСведений
	|ГДЕ
	|	РегистрСведений.Период < &Период";
	Если ЗначенияИзмерения <> Неопределено Тогда
		Текст = Текст + " И РегистрСведений."+ИмяИзмерения+" В (&ЗначенияИзмерения)";	
    КонецЕсли; 
	
	Запрос.Текст = Текст;
	Выборка = Запрос.Выполнить().Выбрать();
	НомерДокумента =1;
	ВсегоДокументов = Выборка.Количество();

   	НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();	
	НаборЗаписей.Отбор.Период.Использование = Истина;

	Пока Выборка.Следующий() Цикл
		Состояние("Обрабатывается параметры расчета "+НомерДокумента+" из "+ВсегоДокументов);
        НомерДокумента = НомерДокумента + 1;
		
		НаборЗаписей.Отбор.Период.Значение = Выборка.Период;
		
		Если ЗначенияИзмерения <> Неопределено Тогда
			НаборЗаписей.Отбор[ИмяИзмерения].Использование = Истина;
			НаборЗаписей.Отбор[ИмяИзмерения].Значение = Выборка.Измерение; 
		КонецЕсли;
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл 
			Если Запись[ИмяРесурса] <> 0 Тогда
				Запись[ИмяРесурса] = Деноминировать(Запись[ИмяРесурса]);	
			КонецЕсли;
		КонецЦикла;
		Если ЗначенияИзмерения <> Неопределено Тогда 		
			ОбъектДляЗаписи = ""+Метаданные.РегистрыСведений[ИмяРегистраСведений]+" "+Выборка.Измерение +" "+ ИмяРесурса + " " +Выборка.Период;
		Иначе
			ОбъектДляЗаписи = ""+Метаданные.РегистрыСведений[ИмяРегистраСведений]+ " "+ ИмяРесурса + " " +Выборка.Период; 	
		КонецЕсли;	
		Если ЗаписатьДеноминированныеОбъект(ОбъектДляЗаписи) Тогда 
			НаборЗаписей.Записать(); 
		КонецЕсли;
		
	КонецЦикла;



КонецПроцедуры

Процедура ДеноминацияШтатногоРасписания(Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НомерДокумента =1;
	ВсегоДокументов = Выборка.Количество();

	
	
	НаборЗаписей = РегистрыСведений.ШтатноеРасписаниеОрганизаций.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.ПодразделениеОрганизации.Установить(Выборка.Ссылка);
		НаборЗаписей.Прочитать();
		Состояние("Обрабатывается Шатаное расписание по подразделению "+Выборка.Ссылка+" "+НомерДокумента+" из "+ВсегоДокументов);
        НомерДокумента = НомерДокумента + 1;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.БезЕТС Тогда
				Если Запись.ТарифнаяСтавка <> 0 Тогда 
					Запись.ТарифнаяСтавка = Деноминировать(Запись.ТарифнаяСтавка);
					Запись.РасчетнаяТарифнаяСтавка = Окр(Запись.ТарифнаяСтавка + Запись.ТарифнаяСтавка *Запись.ИтоговоеПовышениеПоИнструкции/100,2);
				Иначе
					Запись.РасчетнаяТарифнаяСтавка = Деноминировать(Запись.РасчетнаяТарифнаяСтавка);
				КонецЕсли;
			Иначе
				Запись.РазмерСтавкиПервогоРазряда = Деноминировать(Запись.РазмерСтавкиПервогоРазряда);
				Запись.ТарифнаяСтавка = Окр(Запись.РазмерСтавкиПервогоРазряда * Запись.КоэффициентЕТС * Запись.ПовышенныйКоэффициентЕТС,2);
				Запись.ТарифныйСПовышениемПоИнструкции = Окр(Запись.ТарифнаяСтавка + Запись.ТарифнаяСтавка *Запись.ИтоговоеПовышениеПоИнструкции/100,2);
				Запись.РасчетнаяТарифнаяСтавка = Окр(Запись.ТарифнаяСтавка + Запись.ТарифнаяСтавка *Запись.ИтоговоеПовышениеПоИнструкции/100,2);
			КонецЕсли;
				
		КонецЦикла;
		
		ОбъектДляЗаписи = "Штатное расписание подразделения: "+Выборка.Ссылка+" "+Выборка.Ссылка.Код;
		Если ЗаписатьДеноминированныеОбъект(ОбъектДляЗаписи) Тогда 
			НаборЗаписей.Записать(); 
		КонецЕсли
		
	КонецЦикла;	
	
	
КонецПроцедуры

Процедура ДеноминацияТрудовыхДоговоров(Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("Организация",Организация);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТрудовойДоговор.Ссылка
	|ИЗ
	|	Документ.ТрудовойДоговор КАК ТрудовойДоговор
	|ГДЕ
	|	ТрудовойДоговор.ДатаПриема < &Период
	|	И ТрудовойДоговор.Проведен
	|	И ТрудовойДоговор.Организация = &Организация";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	НомерДокумента =1;
	ВсегоДокументов = Выборка.Количество();

	Пока Выборка.Следующий() Цикл
		Состояние("Обрабатывается документы Трудовые договора "+НомерДокумента+" из "+ВсегоДокументов);
		НомерДокумента = НомерДокумента + 1;

		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если Объект.БезЕТС Тогда
			Если Объект.ТарифнаяСтавка <> 0 Тогда 
				Объект.ТарифнаяСтавка = Деноминировать(Объект.ТарифнаяСтавка);
			    Объект.РасчетнаяТарифнаяСтавка = Окр(Объект.ТарифнаяСтавка + Объект.ТарифнаяСтавка *Объект.ИтоговоеПовышениеПоИнструкции/100,2);
			Иначе
				Объект.РасчетнаяТарифнаяСтавка = Деноминировать(Объект.РасчетнаяТарифнаяСтавка);
			КонецЕсли; 			
		Иначе
			Объект.РазмерСтавки1Разряда = Деноминировать(Объект.РазмерСтавки1Разряда);
			Объект.ТарифнаяСтавка = Окр(Объект.РазмерСтавки1Разряда * Объект.КоэффициентЕТС * Объект.ПовышенныйКоэффициентЕТС,2);
			Объект.ТарифныйСПовышениемПоИнструкции = Окр(Объект.ТарифнаяСтавка + Объект.ТарифнаяСтавка *Объект.ИтоговоеПовышениеПоИнструкции/100,2);
			Объект.РасчетнаяТарифнаяСтавка = Окр(Объект.ТарифнаяСтавка + Объект.ТарифнаяСтавка *Объект.ИтоговоеПовышениеПоИнструкции/100,2); 	
		КонецЕсли;
	
		Если ЗаписатьДеноминированныеОбъект(Выборка.Ссылка) Тогда 
			Объект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли

		
		          		
	КонецЦикла;   	
	
КонецПроцедуры

Процедура ДеноминацияТЧКадровыхДокументов(Период,ИмяДокумента,ИмяТЧ) Экспорт 
	
	УчетнаяПолитикаПоПерсоналу = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
	ВыплатаАвансаПроцентом =  ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналу, Организация, "ВыплатаАвансаПроцентом");

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =
    "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧДок.Ссылка
	|ИЗ
	|	Документ."+ИмяДокумента +"."+ИмяТЧ+" КАК ТЧДок
	|ГДЕ
	|	ТЧДок.Ссылка.Дата < &Период
	|	И ТЧДок.Ссылка.Проведен
	|	И ТЧДок.Ссылка.Организация = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НомерДокумента =1;
	ВсегоДокументов = Выборка.Количество();

	Пока Выборка.Следующий() Цикл
		Состояние("Обрабатывается документы "+ИмяДокумента +"."+ИмяТЧ+" "+НомерДокумента+" из "+ВсегоДокументов);
       	НомерДокумента = НомерДокумента + 1;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		ТЧДокумента = Объект[ИмяТЧ];
		Если ИмяТЧ = "РаботникиОрганизации" Тогда
			Для Каждого Строка ИЗ ТЧДокумента Цикл
													
				Если Строка.БезЕТС Тогда
					Если Строка.ТарифнаяСтавка <> 0 Тогда 
						Строка.ТарифнаяСтавка = Деноминировать(Строка.ТарифнаяСтавка);
						Строка.МесячнаяТарифнаяСтавка = Окр(Строка.ТарифнаяСтавка + Строка.ТарифнаяСтавка *Строка.ИтоговоеПовышениеПоИнструкции/100,2);
					Иначе
						Строка.МесячнаяТарифнаяСтавка = Деноминировать(Строка.МесячнаяТарифнаяСтавка);
					КонецЕсли; 			
				Иначе
					Строка.РазмерСтавки1Разряда = Деноминировать(Строка.РазмерСтавки1Разряда);
					Строка.ТарифнаяСтавка = Окр(Строка.РазмерСтавки1Разряда * Строка.КоэффициентЕТС * Строка.ПовышенныйКоэффициентЕТС,2);
					Строка.ТарифныйСПовышениемПоИнструкции = Окр(Строка.ТарифнаяСтавка + Строка.ТарифнаяСтавка *Строка.ИтоговоеПовышениеПоИнструкции/100,2);
					Строка.МесячнаяТарифнаяСтавка = Окр(Строка.ТарифнаяСтавка + Строка.ТарифнаяСтавка *Строка.ИтоговоеПовышениеПоИнструкции/100,2); 	
				КонецЕсли;
				Если  ИмяДокумента = "ПриемНаРаботуВОрганизацию"  Тогда
					Если Не ВыплатаАвансаПроцентом Тогда
						Строка.Аванс = Деноминировать(Строка.Аванс);	
					КонецЕсли;
					Если  ЗначениеЗаполнено(Строка.ДатаУвольнения) И Не Строка.НапомнитьПоЗавершении Тогда
						Строка.НапомнитьПоЗавершении = Истина;	
					КонецЕсли;
				ИначеЕсли   ИмяДокумента = "КадровоеПеремещениеОрганизаций"  Тогда
                 	Если  ЗначениеЗаполнено(Строка.ДатаОкончания) И Не Строка.НапомнитьПоЗавершении Тогда
						Строка.НапомнитьПоЗавершении = Истина;	
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		
		Иначе //Если ИмяТЧ = "ОсновныеНачисления" Тогда
			Для Каждого Строка ИЗ ТЧДокумента Цикл
				Если ИмяДокумента = "ВводПостоянногоНачисленияИлиУдержанияСотрудникамОрганизации" Тогда  
					ВидРасчета = Объект.ВидРасчета;	
				Иначе
					ВидРасчета = Строка.ВидРасчета;
				КонецЕсли;
				СведенияОВидеРасчета = РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчетаОснНачислений, ВидРасчета);
				Для СчПоказателей = 1 По Мин(СведенияОВидеРасчета["КоличествоПоказателей"],6) Цикл
					Если ВидРасчета.ПроизвольнаяФормулаРасчета Тогда
						Показатель = СведенияОВидеРасчета["Показатель"+СчПоказателей];
					Иначе
						Показатель = СведенияОВидеРасчета["Показатель"+СчПоказателей+"Наименование"];
					КонецЕсли;
					Если ТипЗнч(Показатель) = Тип("СправочникСсылка.ПоказателиСхемМотивации") Тогда
						Если Показатель.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный  Тогда
							Строка["Показатель"+СчПоказателей] = Деноминировать(Строка["Показатель"+СчПоказателей]);	
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
               	
			КонецЦикла; 
		КонецЕсли;	
		
		Попытка
			Если ЗаписатьДеноминированныеОбъект(Выборка.Ссылка,ИмяТЧ) Тогда 
				Объект.Записать(РежимЗаписиДокумента.Проведение); 
			КонецЕсли;  
		Исключение
			НаборЗаписей = РегистрыСведений.ДеноминированныеОбъекты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
			НаборЗаписей.Отбор.ТабличнаяЧасть.Установить(ИмяТЧ);
            НаборЗаписей.Прочитать();
	        НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
	
		КонецПопытки

		
	КонецЦикла;
	
	
	
	
КонецПроцедуры

Процедура ДеноминацияИсполнительныхЛистов(Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсполнительныйЛист.Ссылка
	|ИЗ
	|	Документ.ИсполнительныйЛист КАК ИсполнительныйЛист
	|ГДЕ
	|	ИсполнительныйЛист.Проведен
	|	И ИсполнительныйЛист.Организация = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НомерДокумента =1;
	ВсегоДокументов = Выборка.Количество();

	Пока Выборка.Следующий() Цикл
		Состояние("Обрабатывается документы Исполнительный лист "+НомерДокумента+" из "+ВсегоДокументов);
	    НомерДокумента = НомерДокумента + 1;	
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если Объект.СпособРасчетаИЛ = 2 Тогда
			Объект.Размер = Деноминировать(Объект.Размер);		
		КонецЕсли;
		Если Объект.Предел <> 0 Тогда
			Объект.Предел = Деноминировать(Объект.Предел);		
		КонецЕсли;
		
	Попытка
		Если ЗаписатьДеноминированныеОбъект(Выборка.Ссылка) Тогда 
			Объект.Записать(РежимЗаписиДокумента.Проведение); 
		КонецЕсли; 
	Исключение
		НаборЗаписей = РегистрыСведений.ДеноминированныеОбъекты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
	    НаборЗаписей.Прочитать();
	    НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	
	КонецПопытки

	КонецЦикла;

	
	
КонецПроцедуры

Процедура ДеноминацияДоговоровПодряда(Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =
    "ВЫБРАТЬ
    |	ДоговорНаВыполнениеРаботСФизЛицом.Ссылка
    |ИЗ
    |	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
    |ГДЕ
    |	ДоговорНаВыполнениеРаботСФизЛицом.Организация = &Организация
    |	И ДоговорНаВыполнениеРаботСФизЛицом.Дата < &Период
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НомерДокумента =1;
	ВсегоДокументов = Выборка.Количество();

	Пока Выборка.Следующий() Цикл
		Состояние("Обрабатывается документы Договора подряда "+НомерДокумента+" из "+ВсегоДокументов);
        НомерДокумента = НомерДокумента + 1;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.СуммаЗаРаботу = Деноминировать(Объект.СуммаЗаРаботу);
		Если ЗаписатьДеноминированныеОбъект(Выборка.Ссылка) Тогда 
			Объект.Записать(РежимЗаписиДокумента.Проведение); 
		КонецЕсли; 
	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДеноминацияДоговоровЗайма(Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =
    "ВЫБРАТЬ
    |	ДоговорЗаймаСРаботником.Ссылка
    |ИЗ
    |	Документ.ДоговорЗаймаСРаботником КАК ДоговорЗаймаСРаботником
    |ГДЕ
    |	ДоговорЗаймаСРаботником.Организация = &Организация
    |	И ДоговорЗаймаСРаботником.Дата < &Период
	|	И ДоговорЗаймаСРаботником.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НомерДокумента =1;
	ВсегоДокументов = Выборка.Количество();

	Пока Выборка.Следующий() Цикл
		Состояние("Обрабатывается документы Договора займов "+НомерДокумента+" из "+ВсегоДокументов);
		НомерДокумента = НомерДокумента + 1;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.СуммаЗайма = Деноминировать(Объект.СуммаЗайма);
		Если ЗаписатьДеноминированныеОбъект(Выборка.Ссылка) Тогда 
			Объект.Записать(РежимЗаписиДокумента.Проведение); 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДеноминацияСдельногоНаряда(Период) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СдельныйНаряд.Ссылка
	|ИЗ
	|	Документ.СдельныйНаряд КАК СдельныйНаряд
	|ГДЕ
	|	СдельныйНаряд.ПериодРегистрации < &Период
	|	И СдельныйНаряд.Проведен
	|	И СдельныйНаряд.Организация = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НомерДокумента =1;
	ВсегоДокументов = Выборка.Количество();

	Пока Выборка.Следующий() Цикл
		Состояние("Обрабатывается документы Сдельные наряды "+НомерДокумента+" из "+ВсегоДокументов);
        НомерДокумента = НомерДокумента + 1;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
	    Выработка = Объект.Выработка;
		Для Каждого Строка Из Выработка Цикл
			
			Строка.Расценка = Деноминировать(Строка.Расценка); 
			Строка.СуммаЗаРаботуВВалютеРасценки = Деноминировать(Строка.СуммаЗаРаботуВВалютеРасценки);
			Строка.Сумма = Деноминировать(Строка.Сумма);
			Строка.СуммаРегл = Деноминировать(Строка.СуммаРегл);
			
		КонецЦикла;
		ИтогоЗаРаботу = Выработка.Итог("СуммаРегл");
		Исполнители  = Объект.Исполнители; 
		Для Каждого Строка Из Исполнители Цикл
			
			Строка.СуммаКНачислению = Деноминировать(Строка.СуммаКНачислению); 
			Строка.СуммаКНачислениюРегл = Деноминировать(Строка.СуммаКНачислениюРегл);
			Строка.Тариф = Деноминировать(Строка.Тариф);
				
		КонецЦикла;
		ИтогоПоИсполнителям = Исполнители.Итог("СуммаКНачислениюРегл");
		Разница = ИтогоПоИсполнителям - ИтогоЗаРаботу;
		Если Разница <> 0 Тогда
			Выработка[0].СуммаРегл = Выработка[0].СуммаРегл + Разница;
	    КонецЕсли;
		Попытка
			Если ЗаписатьДеноминированныеОбъект(Выборка.Ссылка) Тогда 
				Объект.Записать(РежимЗаписиДокумента.Проведение); 
			КонецЕсли;
		Исключение
			НаборЗаписей = РегистрыСведений.ДеноминированныеОбъекты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
	        НаборЗаписей.Прочитать();
	        НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецПопытки

	КонецЦикла;

	
КонецПроцедуры

Процедура ДеноминацияНДФЛПерерасчет(Период) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДФЛПерерасчет.Ссылка
	|ИЗ
	|	Документ.НДФЛПерерасчет КАК НДФЛПерерасчет
	|ГДЕ
	|	НДФЛПерерасчет.Дата < &Период
	|	И НДФЛПерерасчет.Проведен
	|	И НДФЛПерерасчет.Организация = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НаборЗаписайРасчетыСБюджетом			  = РегистрыНакопления.НДФЛРасчетыСБюджетом.СоздатьНаборЗаписей();
	НаборЗаписайИмущественныеВычетыФизлиц 	  = РегистрыНакопления.НДФЛИмущественныеВычетыФизлиц.СоздатьНаборЗаписей();
	НаборКЗачету 							  = РегистрыНакопления.НДФЛКЗачету.СоздатьНаборЗаписей();
	НаборВзаиморасчетыСРаботникамиОрганизаций = РегистрыНакопления.ВзаиморасчетыСРаботникамиОрганизаций.СоздатьНаборЗаписей();
	НаборЗарплатаЗаМесяцОрганизаций	          = РегистрыНакопления.ЗарплатаЗаМесяцОрганизаций.СоздатьНаборЗаписей();
	
	НомерДокумента =1;
	ВсегоДокументов = Выборка.Количество();

	Пока Выборка.Следующий() Цикл
		Состояние("Обрабатывается документы Перерасчет подоходного налога "+НомерДокумента+" из "+ВсегоДокументов);
		НомерДокумента = НомерДокумента + 1;
		
		НаборЗаписайРасчетыСБюджетом.Отбор.Регистратор.Установить(Выборка.Ссылка);
		НаборЗаписайРасчетыСБюджетом.Прочитать();
		Для Каждого Запись из НаборЗаписайРасчетыСБюджетом Цикл
			Запись.Налог 							= Деноминировать(Запись.Налог);
			Запись.ПримененныйВычетЛичный           = Деноминировать(Запись.ПримененныйВычетЛичный);
			Запись.ПримененныйВычетНаДетей          = Деноминировать(Запись.ПримененныйВычетНаДетей);
			Запись.ПримененныйВычетНаДетейИнвалидов = Деноминировать(Запись.ПримененныйВычетНаДетейИнвалидов);
			Запись.ПримененныйВычетНаДетейЛьгота    = Деноминировать(Запись.ПримененныйВычетНаДетейЛьгота);
			Запись.ПримененныйДополнительныйВычет   = Деноминировать(Запись.ПримененныйДополнительныйВычет);
		КонецЦикла;
		НаборЗаписайРасчетыСБюджетом.Записать();
		
		НаборЗаписайИмущественныеВычетыФизлиц.Отбор.Регистратор.Установить(Выборка.Ссылка);
		НаборЗаписайИмущественныеВычетыФизлиц.Прочитать();
		Для Каждого Запись из НаборЗаписайИмущественныеВычетыФизлиц Цикл
			Запись.Размер = Деноминировать(Запись.Размер);	
		КонецЦикла;
		НаборЗаписайИмущественныеВычетыФизлиц.Записать();
		
		НаборКЗачету.Отбор.Регистратор.Установить(Выборка.Ссылка);
		НаборКЗачету.Прочитать();
		Для Каждого Запись из НаборКЗачету Цикл
			Запись.СуммаНДФЛКЗачету = Деноминировать(Запись.СуммаНДФЛКЗачету);	
		КонецЦикла;
		НаборКЗачету.Записать();
		
		НаборВзаиморасчетыСРаботникамиОрганизаций.Отбор.Регистратор.Установить(Выборка.Ссылка);
		НаборВзаиморасчетыСРаботникамиОрганизаций.Прочитать();
		Для Каждого Запись из НаборВзаиморасчетыСРаботникамиОрганизаций Цикл
			Запись.СуммаВзаиморасчетов = Деноминировать(Запись.СуммаВзаиморасчетов);	
		КонецЦикла;
		НаборВзаиморасчетыСРаботникамиОрганизаций.Записать();
		
		НаборЗарплатаЗаМесяцОрганизаций.Отбор.Регистратор.Установить(Выборка.Ссылка);
		НаборЗарплатаЗаМесяцОрганизаций.Прочитать();
		Для Каждого Запись из НаборЗарплатаЗаМесяцОрганизаций Цикл
			Запись.СуммаВзаиморасчетов = Деноминировать(Запись.СуммаВзаиморасчетов);	
		КонецЦикла;
		НаборЗарплатаЗаМесяцОрганизаций.Записать();
		 		
	КонецЦикла;

	
КонецПроцедуры

Процедура ДеноминироватьКорректировкаЗаписейРегистровНакопления(Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаЗаписейРегистровНакопления.Ссылка
	|ИЗ
	|	Документ.КорректировкаЗаписейРегистровНакопления КАК КорректировкаЗаписейРегистровНакопления
	|ГДЕ
	|	КорректировкаЗаписейРегистровНакопления.Дата < &Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	КорректировкаЗаписейРегистровНакопления.Дата";
	
	
	НаборВзаиморасчетыСРаботникамиОрганизаций = РегистрыНакопления.ВзаиморасчетыСРаботникамиОрганизаций.СоздатьНаборЗаписей();
	НаборЗарплатаЗаМесяцОрганизаций	          = РегистрыНакопления.ЗарплатаЗаМесяцОрганизаций.СоздатьНаборЗаписей();
	НаборНДФЛРасчетыСБюджетом                 = РегистрыНакопления.НДФЛРасчетыСБюджетом.СоздатьНаборЗаписей();
    НаборНДФЛКЗачету               			  = РегистрыНакопления.НДФЛКЗачету.СоздатьНаборЗаписей();
	
	
	Выборка =Запрос.Выполнить().Выбрать();
	НомерДокумента =1;
	ВсегоДокументов = Выборка.Количество();

	Пока Выборка.Следующий() Цикл
		Состояние("Обрабатывается документы Корректировка регистров накопления "+НомерДокумента+" из "+ВсегоДокументов);
        НомерДокумента = НомерДокумента + 1;
		
		НаборВзаиморасчетыСРаботникамиОрганизаций.Отбор.Регистратор.Установить(Выборка.Ссылка);
		НаборВзаиморасчетыСРаботникамиОрганизаций.Прочитать();
		Для Каждого Запись из НаборВзаиморасчетыСРаботникамиОрганизаций Цикл
			Запись.СуммаВзаиморасчетов = Деноминировать(Запись.СуммаВзаиморасчетов);	
		КонецЦикла;
		НаборВзаиморасчетыСРаботникамиОрганизаций.Записать();
		
		НаборЗарплатаЗаМесяцОрганизаций.Отбор.Регистратор.Установить(Выборка.Ссылка);
		НаборЗарплатаЗаМесяцОрганизаций.Прочитать();
		Для Каждого Запись из НаборЗарплатаЗаМесяцОрганизаций Цикл
			Запись.СуммаВзаиморасчетов = Деноминировать(Запись.СуммаВзаиморасчетов);	
		КонецЦикла;
		НаборЗарплатаЗаМесяцОрганизаций.Записать();
		
		НаборНДФЛРасчетыСБюджетом.Отбор.Регистратор.Установить(Выборка.Ссылка);
		НаборНДФЛРасчетыСБюджетом.Прочитать();
		Для Каждого Запись из НаборНДФЛРасчетыСБюджетом Цикл
			Запись.Налог = Деноминировать(Запись.Налог);
			Запись.ПримененныйВычетЛичный           = Деноминировать(Запись.ПримененныйВычетЛичный);
			Запись.ПримененныйВычетНаДетей          = Деноминировать(Запись.ПримененныйВычетНаДетей);
			Запись.ПримененныйВычетНаДетейИнвалидов = Деноминировать(Запись.ПримененныйВычетНаДетейИнвалидов);
			Запись.ПримененныйВычетНаДетейЛьгота    = Деноминировать(Запись.ПримененныйВычетНаДетейЛьгота);
			Запись.ПримененныйДополнительныйВычет   = Деноминировать(Запись.ПримененныйДополнительныйВычет);
		КонецЦикла;
		НаборНДФЛРасчетыСБюджетом.Записать();
		
		НаборНДФЛКЗачету.Отбор.Регистратор.Установить(Выборка.Ссылка);
		НаборНДФЛКЗачету.Прочитать();
		Для Каждого Запись из НаборНДФЛКЗачету Цикл
			Запись.СуммаНДФЛКЗачету = Деноминировать(Запись.СуммаНДФЛКЗачету);
		КонецЦикла;
		НаборНДФЛКЗачету.Записать();



		
	КонецЦикла;
 
	
КонецПроцедуры

Процедура КорректировкаВзаиморасчетов(Период) Экспорт
	
	
	УчетнаяПолитикаПоПерсоналу = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
	УчетЗадолженностиПоМесяцам =  ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналу, Организация, "УчетЗадолженностиПоМесяцам");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("УчетЗадолженностиПоМесяцам",УчетЗадолженностиПоМесяцам);
	Запрос.УстановитьПараметр("ПустаДата",Дата("00010101"));

	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &УчетЗадолженностиПоМесяцам
	|			ТОГДА ВзаиморасчетыСРаботникамиОрганизацийОстатки.ПериодВзаиморасчетов
	|		ИНАЧЕ &ПустаДата
	|	КОНЕЦ КАК ПериодВзаиморасчетов,
	|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Физлицо,
	|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Организация КАК Организация,
	|	СУММА(ВзаиморасчетыСРаботникамиОрганизацийОстатки.СуммаВзаиморасчетовДеноминированная) КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВТВзаиморасчеты
	|ИЗ
	|	РегистрНакопления.КорректировкаВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизацийОстатки
	|ГДЕ
	|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &УчетЗадолженностиПоМесяцам
	|			ТОГДА ВзаиморасчетыСРаботникамиОрганизацийОстатки.ПериодВзаиморасчетов
	|		ИНАЧЕ &ПустаДата
	|	КОНЕЦ,
	|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Физлицо,
	|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &УчетЗадолженностиПоМесяцам
	|			ТОГДА ЗарплатаЗаМесяцОрганизацийОстатки.ПериодВзаиморасчетов
	|		ИНАЧЕ &ПустаДата
	|	КОНЕЦ КАК ПериодВзаиморасчетов,
	|	ЗарплатаЗаМесяцОрганизацийОстатки.Физлицо,
	|	СУММА(ЗарплатаЗаМесяцОрганизацийОстатки.СуммаВзаиморасчетовДеноминированная) КАК СуммаВзаиморасчетов,
	|	ЗарплатаЗаМесяцОрганизацийОстатки.Организация
	|ПОМЕСТИТЬ ВТЗарплатаЗаМесяц
	|ИЗ
	|	РегистрНакопления.КорректировкаЗарплатаЗаМесяцОрганизаций КАК ЗарплатаЗаМесяцОрганизацийОстатки
	|ГДЕ
	|	ЗарплатаЗаМесяцОрганизацийОстатки.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &УчетЗадолженностиПоМесяцам
	|			ТОГДА ЗарплатаЗаМесяцОрганизацийОстатки.ПериодВзаиморасчетов
	|		ИНАЧЕ &ПустаДата
	|	КОНЕЦ,
	|	ЗарплатаЗаМесяцОрганизацийОстатки.Физлицо,
	|	ЗарплатаЗаМесяцОрганизацийОстатки.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &УчетЗадолженностиПоМесяцам
	|			ТОГДА ВзаиморасчетыСРаботникамиОрганизацийОстатки.ПериодВзаиморасчетов
	|		ИНАЧЕ &ПустаДата
	|	КОНЕЦ КАК ПериодВзаиморасчетов,
	|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Физлицо,
	|	&Период КАК Период,
	|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Организация КАК Организация,
	|	СУММА(ВзаиморасчетыСРаботникамиОрганизацийОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВТВзаиморасчетыПослеДеноминации
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки КАК ВзаиморасчетыСРаботникамиОрганизацийОстатки
	|ГДЕ
	|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &УчетЗадолженностиПоМесяцам
	|			ТОГДА ВзаиморасчетыСРаботникамиОрганизацийОстатки.ПериодВзаиморасчетов
	|		ИНАЧЕ &ПустаДата
	|	КОНЕЦ,
	|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Физлицо,
	|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &УчетЗадолженностиПоМесяцам
	|			ТОГДА ЗарплатаЗаМесяцОрганизацийОстатки.ПериодВзаиморасчетов
	|		ИНАЧЕ &ПустаДата
	|	КОНЕЦ КАК ПериодВзаиморасчетов,
	|	ЗарплатаЗаМесяцОрганизацийОстатки.Физлицо,
	|	&Период КАК Период,
	|	ЗарплатаЗаМесяцОрганизацийОстатки.Организация КАК Организация,
	|	СУММА(ЗарплатаЗаМесяцОрганизацийОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВТЗарплатаЗаМесяцПослеДеноминации
	|ИЗ
	|	РегистрНакопления.ЗарплатаЗаМесяцОрганизаций.Остатки КАК ЗарплатаЗаМесяцОрганизацийОстатки
	|ГДЕ
	|	ЗарплатаЗаМесяцОрганизацийОстатки.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &УчетЗадолженностиПоМесяцам
	|			ТОГДА ЗарплатаЗаМесяцОрганизацийОстатки.ПериодВзаиморасчетов
	|		ИНАЧЕ &ПустаДата
	|	КОНЕЦ,
	|	ЗарплатаЗаМесяцОрганизацийОстатки.Физлицо,
	|	ЗарплатаЗаМесяцОрганизацийОстатки.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТВзаиморасчетыПослеДеноминации.ПериодВзаиморасчетов, ВТВзаиморасчеты.ПериодВзаиморасчетов) КАК ПериодВзаиморасчетов,
	|	ЕСТЬNULL(ВТВзаиморасчетыПослеДеноминации.Физлицо, ВТВзаиморасчеты.Физлицо) КАК Физлицо,
	|	ЕСТЬNULL(ВТВзаиморасчетыПослеДеноминации.Организация, ВТВзаиморасчеты.Организация) КАК Организация,
	|	ЕСТЬNULL(ВТВзаиморасчетыПослеДеноминации.СуммаВзаиморасчетов, 0) - ЕСТЬNULL(ВТВзаиморасчеты.СуммаВзаиморасчетов, 0) КАК СуммаВзаиморасчетов,
	|	""Взаиморасчеты"" КАК Регистр,
	|	ВТВзаиморасчетыПослеДеноминации.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовПосле,
	|	ВТВзаиморасчеты.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовДо
	|ИЗ
	|	ВТВзаиморасчетыПослеДеноминации КАК ВТВзаиморасчетыПослеДеноминации
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТВзаиморасчеты КАК ВТВзаиморасчеты
	|		ПО ВТВзаиморасчетыПослеДеноминации.Физлицо = ВТВзаиморасчеты.Физлицо
	|			И ВТВзаиморасчетыПослеДеноминации.ПериодВзаиморасчетов = ВТВзаиморасчеты.ПериодВзаиморасчетов
	|			И ВТВзаиморасчетыПослеДеноминации.Организация = ВТВзаиморасчеты.Организация
	|ГДЕ
	|	ЕСТЬNULL(ВТВзаиморасчетыПослеДеноминации.СуммаВзаиморасчетов, 0) - ЕСТЬNULL(ВТВзаиморасчеты.СуммаВзаиморасчетов, 0) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТЗарплатаЗаМесяцПослеДеноминации.ПериодВзаиморасчетов, ВТЗарплатаЗаМесяц.ПериодВзаиморасчетов),
	|	ЕСТЬNULL(ВТЗарплатаЗаМесяцПослеДеноминации.Физлицо, ВТЗарплатаЗаМесяц.Физлицо),
	|	ЕСТЬNULL(ВТЗарплатаЗаМесяцПослеДеноминации.Организация, ВТЗарплатаЗаМесяц.Организация),
	|	ЕСТЬNULL(ВТЗарплатаЗаМесяцПослеДеноминации.СуммаВзаиморасчетов, 0) - ЕСТЬNULL(ВТЗарплатаЗаМесяц.СуммаВзаиморасчетов, 0),
	|	""ЗарплатаЗаМесяц"",
	|	ВТЗарплатаЗаМесяцПослеДеноминации.СуммаВзаиморасчетов,
	|	ВТЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|ИЗ
	|	ВТЗарплатаЗаМесяцПослеДеноминации КАК ВТЗарплатаЗаМесяцПослеДеноминации
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТВзаиморасчеты КАК ВТЗарплатаЗаМесяц
	|		ПО ВТЗарплатаЗаМесяцПослеДеноминации.Физлицо = ВТЗарплатаЗаМесяц.Физлицо
	|			И ВТЗарплатаЗаМесяцПослеДеноминации.ПериодВзаиморасчетов = ВТЗарплатаЗаМесяц.ПериодВзаиморасчетов
	|			И ВТЗарплатаЗаМесяцПослеДеноминации.Организация = ВТЗарплатаЗаМесяц.Организация
	|ГДЕ
	|	ЕСТЬNULL(ВТЗарплатаЗаМесяцПослеДеноминации.СуммаВзаиморасчетов, 0) - ЕСТЬNULL(ВТЗарплатаЗаМесяц.СуммаВзаиморасчетов, 0) <> 0";
	
	РезултатЗапроса = Запрос.Выполнить();
	ВыборкаПоПериодам = РезултатЗапроса.Выбрать();
	Объект = Документы.КорректировкаЗаписейРегистровНакопления.СоздатьДокумент();
	Объект.Дата = Период;
	ТЧТаблицаРегистровНакопления =  Объект.ТаблицаРегистровНакопления;
	НовыйСтрока = ТЧТаблицаРегистровНакопления.Добавить();
	НовыйСтрока.Имя = "ВзаиморасчетыСРаботникамиОрганизаций"; 
	НовыйСтрока.Представление = "Взаиморасчеты с работниками организаций"; 
	НовыйСтрока = ТЧТаблицаРегистровНакопления.Добавить();
	НовыйСтрока.Имя = "ЗарплатаЗаМесяцОрганизаций"; 
	НовыйСтрока.Представление = "Зарплата за месяц организаций";
	
	
	
	Пока ВыборкаПоПериодам.Следующий() Цикл
		Если ВыборкаПоПериодам.Регистр = "Взаиморасчеты" Тогда 
			НоваяЗапись = Объект.Движения.ВзаиморасчетыСРаботникамиОрганизаций.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(НоваяЗапись,ВыборкаПоПериодам);
			Если УчетЗадолженностиПоМесяцам Тогда
				НоваяЗапись.Период = ВыборкаПоПериодам.ПериодВзаиморасчетов;
			Иначе
				НоваяЗапись.Период = Период - 1;
			КонецЕсли;
		КонецЕсли;
		Если ВыборкаПоПериодам.Регистр = "ЗарплатаЗаМесяц" Тогда
			НоваяЗапись = Объект.Движения.ЗарплатаЗаМесяцОрганизаций.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(НоваяЗапись,ВыборкаПоПериодам);
			Если УчетЗадолженностиПоМесяцам Тогда
				НоваяЗапись.Период = ВыборкаПоПериодам.ПериодВзаиморасчетов;
			Иначе
				НоваяЗапись.Период = Период - 1;
			КонецЕсли;
		КонецЕсли; 		
	КонецЦикла;
	
	Попытка 
		
		Если ЗаписатьДеноминированныеОбъект("Корректировка взаиморасчетов " + Организация) Тогда 
			Объект.Записать();
		КонецЕсли; 
		
	Исключение
	
		НаборЗаписей = РегистрыСведений.ДеноминированныеОбъекты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить("Корректировка взаиморасчетов " + Организация);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	
	
	КонецПопытки;                      	
	
	
	
КонецПроцедуры
 
Процедура ДеноминироватьПКО(Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =
    "ВЫБРАТЬ
    |	ПриходныйКассовыйОрдер.Ссылка
    |ИЗ
    |	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
    |ГДЕ
    |	ПриходныйКассовыйОрдер.Организация = &Организация
    |	И ПриходныйКассовыйОрдер.Дата < &Период
    |	И ПриходныйКассовыйОрдер.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НомерДокумента =1;
	ВсегоДокументов = Выборка.Количество();

	Пока Выборка.Следующий() Цикл
		Состояние("Обрабатывается документы ПКО "+НомерДокумента+" из "+ВсегоДокументов);
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.СуммаДокумента = Деноминировать(Объект.СуммаДокумента);
		Объект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Сторнирование(Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =
    "ВЫБРАТЬ
    |	Сторнирование.Ссылка
    |ИЗ
    |	Документ.Сторнирование КАК Сторнирование
    |ГДЕ
    |	Сторнирование.СторнируемыйДокумент.Организация = &Организация
    |	И Сторнирование.Дата < &Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НомерДокумента =1;
	ВсегоДокументов = Выборка.Количество();

	Пока Выборка.Следующий() Цикл
		Состояние("Обрабатывается Сорнирование "+НомерДокумента+" из "+ВсегоДокументов);
        НомерДокумента = НомерДокумента + 1;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		МетаданныеДокумент = Объект.СторнируемыйДокумент.Метаданные();
        	
		Для Каждого МетаданныеРегистр Из МетаданныеДокумент.Движения Цикл

			// если документ-сторно не может иметь таких движений - это не сторнируемый регистр
			Если не Объект.Метаданные().Движения.Содержит(МетаданныеРегистр) Тогда
				Продолжить;
			КонецЕсли;

			НазваниеДвижений = МетаданныеРегистр.Представление();
			ИмяДвижений      = МетаданныеРегистр.Имя;		
		

		
			Объект.Движения[ИмяДвижений].Очистить();
			ЗаполнитьНаборЗаписей(Объект.Движения[ИмяДвижений], МетаданныеРегистр,Объект);
				

		КонецЦикла;		
		
		Объект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановкаАктуальныхТДСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	ТрудовойДоговор.Ссылка КАК ТрудовойДоговор,
	|	СотрудникиОрганизаций.НомерДоговора,
	|	СотрудникиОрганизаций.ДатаДоговора
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТрудовойДоговор КАК ТрудовойДоговор
	|		ПО СотрудникиОрганизаций.НомерДоговора = ТрудовойДоговор.Номер
	|			И (НАЧАЛОПЕРИОДА(СотрудникиОрганизаций.ДатаДоговора, ДЕНЬ) = НАЧАЛОПЕРИОДА(ТрудовойДоговор.Дата, ДЕНЬ))
	|			И СотрудникиОрганизаций.Ссылка = ТрудовойДоговор.Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НомерДокумента =1;
	ВсегоДокументов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		Состояние("Обрабатывается сорудник "+НомерДокумента+" из "+ВсегоДокументов);
		НомерДокумента = НомерДокумента + 1;
		Если ЗначениеЗаполнено(Выборка.ТрудовойДоговор) Тогда
			СотрудникОбъект = Выборка.Сотрудник.ПолучитьОбъект();
			СотрудникОбъект.НомерДоговора             		= Выборка.ТрудовойДоговор.Номер;
			СотрудникОбъект.ДатаДоговора              		= Выборка.ТрудовойДоговор.Дата;
			СотрудникОбъект.ДатаНачала   			  		= Выборка.ТрудовойДоговор.ДатаПриема;
			СотрудникОбъект.ДатаОкончания 		      		= Выборка.ТрудовойДоговор.ДатаУвольнения;
			СотрудникОбъект.ИспытательныйСрок 		  		= Выборка.ТрудовойДоговор.ИспытательныйСрок;
			СотрудникОбъект.ОбособленноеПодразделение 		= Выборка.ТрудовойДоговор.Организация;
			СотрудникОбъект.ПодразделениеОрганизации  		= Выборка.ТрудовойДоговор.ПодразделениеОрганизации;
			СотрудникОбъект.Должность                 		= Выборка.ТрудовойДоговор.Должность;
			СотрудникОбъект.РазрядЕТС                 		= Выборка.ТрудовойДоговор.РазрядЕТС;
			СотрудникОбъект.КоэффициентЕТС            		= Выборка.ТрудовойДоговор.КоэффициентЕТС;
			СотрудникОбъект.ГрафикРаботы              		= Выборка.ТрудовойДоговор.ГрафикРаботы;
			СотрудникОбъект.ТарифнаяСтавка            		= Выборка.ТрудовойДоговор.ТарифнаяСтавка;
			СотрудникОбъект.ЗанимаемыхСтавок          		= Выборка.ТрудовойДоговор.ЗанимаемыхСтавок;
			СотрудникОбъект.ПроцентПовышения          		= Выборка.ТрудовойДоговор.ПроцентПовышения;
			СотрудникОбъект.РасчетнаяТарифнаяСтавка  		= Выборка.ТрудовойДоговор.РасчетнаяТарифнаяСтавка;
			СотрудникОбъект.ВалютаТарифнойСтавки      		= Выборка.ТрудовойДоговор.ВалютаТарифнойСтавки;
			СотрудникОбъект.ВидРасчета               		= Выборка.ТрудовойДоговор.ВидРасчета;
			СотрудникОбъект.ТарифныйСПовышениемПоИнструкции = Выборка.ТрудовойДоговор.ТарифныйСПовышениемПоИнструкции;
			СотрудникОбъект.ПроцентПовышения				= Выборка.ТрудовойДоговор.ПроцентПовышения;
			СотрудникОбъект.ИтоговоеПовышениеПоИнструкции  	= Выборка.ТрудовойДоговор.ИтоговоеПовышениеПоИнструкции;
			СотрудникОбъект. ВидТД                          = Выборка.ТрудовойДоговор.ВидТД;
			СотрудникОбъект.РазмерСтавки1Разряда            = Выборка.ТрудовойДоговор.РазмерСтавки1Разряда;
			СотрудникОбъект.ПовышенныйКоэффициентЕТС        = Выборка.ТрудовойДоговор.ПовышенныйКоэффициентЕТС;
			СотрудникОбъект.ТарифнаяСтавкаПервогоРазряда    = Выборка.ТрудовойДоговор.ТарифнаяСтавкаПервогоРазряда;
			СотрудникОбъект.ВидДеятельностиИзмерение        = Выборка.ТрудовойДоговор.ВидДеятельностиИзмерение;
			СотрудникОбъект.УсловияТрудаИзмерение           = Выборка.ТрудовойДоговор.УсловияТрудаИзмерение;
			СотрудникОбъект.БезЕТС          				= Выборка.ТрудовойДоговор.БезЕТС;
			
			СотрудникОбъект.ПерсональныеНадбавки.Загрузить(Выборка.ТрудовойДоговор.ПерсональныеНадбавки.Выгрузить());
			СотрудникОбъект.КоэфПовышенияТО.Загрузить(Выборка.ТрудовойДоговор.КоэфПовышенияТО.Выгрузить());
			СотрудникОбъект.ПовышенияПоИнструкции.Загрузить(Выборка.ТрудовойДоговор.ПовышенияПоИнструкции.Выгрузить());
			
			СотрудникОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Копирует значения движения в строку сторно нового движения
// для измерений и реквизитов. Ресурсы инвертируются
//
Процедура ЗаполнитьДвижениеСторно(Движение, Строка, МетаданныеОбъект)

	// измерения
	Для Каждого МДОбъект из МетаданныеОбъект.Измерения Цикл
		Движение[МДОбъект.Имя] = Строка[МДОбъект.Имя];
	КонецЦикла;

	// ресурсы
	Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл
		Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
	КонецЦикла;

	// реквизиты
	Для Каждого МДОбъект из МетаданныеОбъект.Реквизиты Цикл
		Движение[МДОбъект.Имя] = Строка[МДОбъект.Имя];
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДвижениеСторно

// Заполняет набор записей по указанному регистру сторнирующими движениями
//
Процедура ЗаполнитьНаборЗаписей(ЗаполняемыйНаборЗаписей, МетаданныеРегистр,Объект) Экспорт

	ЭтоРегистрРасчета     = Ложь;
	ЭтоРегистрБухгалтерии = Ложь;
	ЭтоРегистрНакопления  = Ложь;

	Если ОбщегоНазначения.ПринадлежностьКлассуМетаданных("РегистрыРасчета", МетаданныеРегистр) Тогда
		ЭтоРегистрРасчета     = Истина;
		НаборЗаписей          = РегистрыРасчета[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
		Если МетаданныеРегистр.Имя = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
			//НаборЗаписей.мВыполнятьРасчетПериодаНачисленияСотрудника = 
			//	ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), СторнируемыйДокумент.Организация, "ПроверкаПериодовНачисления")
		КонецЕсли;
	ИначеЕсли ОбщегоНазначения.ПринадлежностьКлассуМетаданных("РегистрыНакопления", МетаданныеРегистр) Тогда
		ЭтоРегистрНакопления  = Истина;
		НаборЗаписей          = РегистрыНакопления[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
	КонецЕсли;

	НаборЗаписей.Отбор.Регистратор.Значение = Объект.СторнируемыйДокумент;
	НаборЗаписей.Прочитать();

	Для Каждого ДвижениеСторнируемое Из НаборЗаписей Цикл

		// реквизиты
		Если ЭтоРегистрРасчета Тогда

			ДвижениеСторно = ЗаполняемыйНаборЗаписей.Добавить();

			ЗаполнитьДвижениеСторно(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);

			ДвижениеСторно.ПериодРегистрации = Объект.ПериодРегистрации;
			ДвижениеСторно.ВидРасчета        = ДвижениеСторнируемое.ВидРасчета;
			ДвижениеСторно.Сторно            = НЕ ДвижениеСторнируемое.Сторно;

			Если МетаданныеРегистр.ПериодДействия Тогда
				ДвижениеСторно.ПериодДействияНачало = ДвижениеСторнируемое.ПериодДействияНачало;
				ДвижениеСторно.ПериодДействияКонец  = ДвижениеСторнируемое.ПериодДействияКонец;
			КонецЕсли;

			Если МетаданныеРегистр.БазовыйПериод Тогда
				ДвижениеСторно.БазовыйПериодНачало = ДвижениеСторнируемое.БазовыйПериодНачало;
				ДвижениеСторно.БазовыйПериодКонец  = ДвижениеСторнируемое.БазовыйПериодКонец;
			КонецЕсли;

		ИначеЕсли ЭтоРегистрНакопления Тогда

			ДвижениеСторно = ЗаполняемыйНаборЗаписей.Добавить();

			ЗаполнитьДвижениеСторно(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
			
			Если МетаданныеРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				ДвижениеСторно.ВидДвижения = ДвижениеСторнируемое.ВидДвижения
			КонецЕсли;
			
			Если МетаданныеРегистр.Имя = "НДФЛСведенияОДоходах" Тогда
				ДвижениеСторно.Период = ДвижениеСторнируемое.Период;
				ДвижениеСторно.ПериодРегистрации = Объект.ПериодРегистрации;
			ИначеЕсли МетаданныеРегистр.Имя = "ВнутрисменноеВремяРаботниковОрганизаций"   Тогда
				ДвижениеСторно.Период = ДвижениеСторнируемое.Период;
			Иначе
				ДвижениеСторно.Период = Объект.Дата;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьНаборЗаписей()

Процедура ОтменитьПроведениеДокументов(Период,ИмяДокумента,ИмяДаты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =
    "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка
	|ИЗ
	|	Документ."+ИмяДокумента +" КАК Док
	|ГДЕ
	|	Док."+ИмяДаты+" < &Период
	|	И Док.Проведен
	|	И Док.Организация = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка 
			Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		Исключение
			
		КонецПопытки;

	КонецЦикла;

	
КонецПроцедуры

Процедура ДеноминацияТЧРасчетногоДокумента(Период, ИмяДокумента, ИмяТЧ, ИмяДаты, Реквизиты, Показатели = Истина, ВидРасчетаВШапке = Ложь, ТолькоЗапись = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =
    "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧДок.Ссылка
	|ИЗ
	|	Документ."+ИмяДокумента +"."+ИмяТЧ+" КАК ТЧДок
	|ГДЕ
	|	ТЧДок.Ссылка."+ИмяДаты+" < &Период
	|	И ТЧДок.Ссылка.Проведен
	|	И ТЧДок.Ссылка.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТЧДок.Ссылка."+ИмяДаты+"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НомерДокумента =1;
	ВсегоДокументов = Выборка.Количество();

	Пока Выборка.Следующий() Цикл
		Состояние("Обрабатывается "+ИмяДокумента +"."+ИмяТЧ+" "+НомерДокумента+" из "+ВсегоДокументов);
        НомерДокумента = НомерДокумента + 1;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если ИмяДокумента = "НачислениеПоБольничномуЛисту" Тогда
			Если ЗначениеЗаполнено(Объект.ПервичныйБольничныйЛист) Тогда
				ПервичныйОбъект =  Объект.ПервичныйБольничныйЛист.ПолучитьОбъект();
				Если НЕ ЗначениеЗаполнено(ПервичныйОбъект.ДатаНачалаБольничногоЛиста) Тогда
					ПервичныйОбъект.ДатаНачалаБольничногоЛиста = ПервичныйОбъект.ДатаНачала;	
					ПервичныйОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			Иначе
				Если НЕ ЗначениеЗаполнено(Объект.ДатаНачалаБольничногоЛиста) Тогда
					Объект.ДатаНачалаБольничногоЛиста = Объект.ДатаНачала;	 
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		ТЧДокумента = Объект[ИмяТЧ];
		Для Каждого Строка ИЗ ТЧДокумента Цикл
					
			Если Реквизиты <> Неопределено Тогда
				Для Каждого Реквизит Из Реквизиты Цикл
					Строка[Реквизит] = Деноминировать(Строка[Реквизит]); 	
				КонецЦикла;
			КонецЕсли;

			Если Показатели Тогда 
				Если ВидРасчетаВШапке Тогда
					ВидРасчета = Объект.ВидРасчета;
				Иначе
					ВидРасчета = Строка.ВидРасчета;
				КонецЕсли;
				
				СведенияОВидеРасчета = РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчетаОснНачислений, ВидРасчета);
				Для СчПоказателей = 1 По Мин(СведенияОВидеРасчета["КоличествоПоказателей"],6) Цикл
					Если ВидРасчета.ПроизвольнаяФормулаРасчета Тогда
						Показатель = СведенияОВидеРасчета["Показатель"+СчПоказателей];
					Иначе
						Показатель = СведенияОВидеРасчета["Показатель"+СчПоказателей+"Наименование"];
					КонецЕсли;
					Если ТипЗнч(Показатель) = Тип("СправочникСсылка.ПоказателиСхемМотивации") Тогда
						Если Показатель.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный  Тогда
							Строка["Показатель"+СчПоказателей] = Деноминировать(Строка["Показатель"+СчПоказателей]);	
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
							
		КонецЦикла; 
		Попытка 
			Если ТолькоЗапись Тогда
				Если ЗаписатьДеноминированныеОбъект(Выборка.Ссылка,ИмяТЧ) Тогда 
					Объект.Записать(); 
				КонецЕсли; 
				 
			Иначе
				
				Если ЗаписатьДеноминированныеОбъект(Выборка.Ссылка,ИмяТЧ) Тогда 
					Объект.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли; 

			КонецЕсли;
		Исключение
			
			НаборЗаписей = РегистрыСведений.ДеноминированныеОбъекты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
	        НаборЗаписей.Прочитать();
	        НаборЗаписей.Очистить();
			НаборЗаписей.Записать();

			
		КонецПопытки;
	КонецЦикла;	

КонецПроцедуры

Процедура ДеноминацияТЧРасчетногоДокументаБезКонтроля(Период, ИмяДокумента, ИмяТЧ, ИмяДаты, Реквизиты, Показатели = Истина, ВидРасчетаВШапке = Ложь, ТолькоЗапись = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =
    "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧДок.Ссылка
	|ИЗ
	|	Документ."+ИмяДокумента +"."+ИмяТЧ+" КАК ТЧДок
	|ГДЕ
	|	ТЧДок.Ссылка."+ИмяДаты+" < &Период
	|	И ТЧДок.Ссылка.Проведен
	|	И ТЧДок.Ссылка.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТЧДок.Ссылка."+ИмяДаты+"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НомерДокумента =1;
	ВсегоДокументов = Выборка.Количество();

	Пока Выборка.Следующий() Цикл
		Состояние("Обрабатывается "+ИмяДокумента +"."+ИмяТЧ+" "+НомерДокумента+" из "+ВсегоДокументов);
        НомерДокумента = НомерДокумента + 1;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если ИмяДокумента = "НачислениеПоБольничномуЛисту" Тогда
			Если ЗначениеЗаполнено(Объект.ПервичныйБольничныйЛист) Тогда
				ПервичныйОбъект =  Объект.ПервичныйБольничныйЛист.ПолучитьОбъект();
				Если НЕ ЗначениеЗаполнено(ПервичныйОбъект.ДатаНачалаБольничногоЛиста) Тогда
					ПервичныйОбъект.ДатаНачалаБольничногоЛиста = ПервичныйОбъект.ДатаНачала;	
					ПервичныйОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			Иначе
				Если НЕ ЗначениеЗаполнено(Объект.ДатаНачалаБольничногоЛиста) Тогда
					Объект.ДатаНачалаБольничногоЛиста = Объект.ДатаНачала;	 
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		ТЧДокумента = Объект[ИмяТЧ];
		Для Каждого Строка ИЗ ТЧДокумента Цикл
					
			Если Реквизиты <> Неопределено Тогда
				Для Каждого Реквизит Из Реквизиты Цикл
					Строка[Реквизит] = Деноминировать(Строка[Реквизит]); 	
				КонецЦикла;
			КонецЕсли;

			Если Показатели Тогда 
				Если ВидРасчетаВШапке Тогда
					ВидРасчета = Объект.ВидРасчета;
				Иначе
					ВидРасчета = Строка.ВидРасчета;
				КонецЕсли;
				
				СведенияОВидеРасчета = РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчетаОснНачислений, ВидРасчета);
				Для СчПоказателей = 1 По Мин(СведенияОВидеРасчета["КоличествоПоказателей"],6) Цикл
					Если ВидРасчета.ПроизвольнаяФормулаРасчета Тогда
						Показатель = СведенияОВидеРасчета["Показатель"+СчПоказателей];
					Иначе
						Показатель = СведенияОВидеРасчета["Показатель"+СчПоказателей+"Наименование"];
					КонецЕсли;
					Если ТипЗнч(Показатель) = Тип("СправочникСсылка.ПоказателиСхемМотивации") Тогда
						Если Показатель.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный  Тогда
							Строка["Показатель"+СчПоказателей] = Деноминировать(Строка["Показатель"+СчПоказателей]);	
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
							
		КонецЦикла; 
		Попытка 
			Если ТолькоЗапись Тогда
				//Если ЗаписатьДеноминированныеОбъект(Выборка.Ссылка,ИмяТЧ) Тогда 
					Объект.Записать(); 
				//КонецЕсли; 
				 
			Иначе
				
				//Если ЗаписатьДеноминированныеОбъект(Выборка.Ссылка,ИмяТЧ) Тогда 
					Объект.Записать(РежимЗаписиДокумента.Проведение);
				//КонецЕсли; 

			КонецЕсли;
		Исключение
			
			//НаборЗаписей = РегистрыСведений.ДеноминированныеОбъекты.СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
			//НаборЗаписей.Прочитать();
			//НаборЗаписей.Очистить();
			//НаборЗаписей.Записать();

			
		КонецПопытки;
	КонецЦикла;	

КонецПроцедуры

 
Функция УстановитьРеквизитыПоказателяСхемМотивации(Показатель = Неопределено, ТипПоказателя, ВозможностьИзменения, Наименование = "", ВидПоказателя = Неопределено, Идентификатор = "", ТарифнаяСтавка = Ложь)
		
	Если Наименование <> "" Тогда 
		Ссылка = Справочники.ПоказателиСхемМотивации.НайтиПоНаименованию(Наименование);
		Если Ссылка.Пустая() Тогда
			ПоказательОбъект = Справочники.ПоказателиСхемМотивации.СоздатьЭлемент();
			ПоказательОбъект.Наименование = Наименование;	
		Иначе                      
			ПоказательОбъект = Ссылка.ПолучитьОбъект();
		КонецЕсли;
	Иначе
		ПоказательОбъект = Показатель;
	КонецЕсли;
	
	// по умолчанию показатель "индивидуальный"
	Если ВидПоказателя = Неопределено Тогда
		ПоказательОбъект.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Индивидуальный;
	Иначе
		ПоказательОбъект.ВидПоказателя = ВидПоказателя;
	КонецЕсли;
	
	ПоказательОбъект.ТипПоказателя = ТипПоказателя;
    ПоказательОбъект.ВозможностьИзменения = ВозможностьИзменения;
	ПоказательОбъект.Идентификатор = Идентификатор;
	ПоказательОбъект.ТарифнаяСтавка = ТарифнаяСтавка;
	ПоказательОбъект.Записать();

	Возврат ПоказательОбъект.Ссылка
	
КонецФункции //УстановитьРеквизитыПоказателяСхемМотивации


// Выполняет заполнение реквизитов управленческих планов видов расчета
//
Процедура ЗаполнитьСхемыМотивации() Экспорт 
	
	Денежный = Перечисления.ТипыПоказателейСхемМотивации.Денежный;
	НеИзменяется = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется;	
	
	ПоказателиСхемМотивации = Справочники.ПоказателиСхемМотивации;
	
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ТарифнаяСтавкаДневная.ПолучитьОбъект(),	Денежный, НеИзменяется,,,"ТарифнаяСтавкаДневная",Истина);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная.ПолучитьОбъект(),	Денежный, НеИзменяется,,,"ТарифнаяСтавкаМесячная",Истина);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.ПолучитьОбъект(),	Денежный, НеИзменяется,,,"ТарифнаяСтавкаЧасовая",Истина);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.Сумма.ПолучитьОбъект(),	Денежный, НеИзменяется,,,"Сумма",Истина);

			
КонецПроцедуры

Функция ЗаписатьДеноминированныеОбъект(Объект,ТЧ = "")
	
	НаборЗаписей = РегистрыСведений.ДеноминированныеОбъекты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Отбор.ТабличнаяЧасть.Установить(ТЧ);

	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		Сообщить(""+ Объект + " был деноминирован ранее.");
		Возврат Ложь
	Иначе
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ДатаДеноминации = ТекущаяДата();
		НоваяЗапись.Объект = Объект;
		НоваяЗапись.ТабличнаяЧасть = ТЧ;
		НаборЗаписей.Записать();
		Возврат Истина
	КонецЕсли;
	
	
	
КонецФункции
  
Функция Деноминировать(Сумма) 
	
	Если Сумма < 100 И Сумма > 0 Тогда
		Возврат 0.01
	ИначеЕсли Сумма > -100 И Сумма < 0 Тогда 
		Возврат -0.01
	Иначе
		Возврат Окр(Сумма/10000,2)
	КонецЕсли;

	
КонецФункции

 #КонецЕсли

мСведенияОВидахРасчетаОснНачислений = Новый Соответствие;

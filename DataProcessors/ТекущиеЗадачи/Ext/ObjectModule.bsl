////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мЗакрытыеДниРождения Экспорт;

Перем мСпособОтображенияЗадач;

Перем мСкрытыеГруппыЗадач Экспорт;

Перем мКоличествоЗадачВГруппе;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура Автозаполнение(Организация, ЗакрытыеДниРождения, СкрытыеГруппыЗадач, ГруппаЗадач = Неопределено) Экспорт
	
	ТекущаяДата = ОбщегоНазначения.ПолучитьРабочуюДату();
	
	Если ГруппаЗадач = Неопределено Тогда
		ЗадачиПользователя.Очистить();
		
	Иначе
		ОтборПоЗадачам = Новый Структура("ПриоритетГруппыЗадач", Перечисления.ГруппыЗадачПользователя.Индекс(ГруппаЗадач));
		НайденныеСтроки = ЗадачиПользователя.НайтиСтроки(ОтборПоЗадачам);
		Для Номер = 0 По НайденныеСтроки.Количество()-1 Цикл
			ЗадачиПользователя.Удалить(НайденныеСтроки.Получить(Номер));
		КонецЦикла;
		
	КонецЕсли;
	
	Если ГруппаЗадач <> Неопределено И СкрытыеГруппыЗадач.Получить(ГруппаЗадач) = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// Для того, чтобы обработка корректно отбирала данные при RLS по организациям,
	// будем ограничивать список доступных пользователю организаций
	СписокОрганизаций = Неопределено;
	СписокГоловныхОрганизаций = Неопределено;
	Если Не Организация.Пустая() Тогда
		СписокОрганизаций = Новый Массив;
		СписокГоловныхОрганизаций = Новый Массив;
		СписокОрганизаций.Добавить(Организация);
		СписокГоловныхОрганизаций.Добавить(ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка,
		|	ВЫБОР
		|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА Организации.Ссылка
		|		ИНАЧЕ Организации.ГоловнаяОрганизация
		|	КОНЕЦ КАК ГоловнаяОрганизация
		|ИЗ
		|	Справочник.Организации КАК Организации";
		СписокОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		СписокГоловныхОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ГоловнаяОрганизация");
	КонецЕсли;
	
	// Дни рождения
	ДатаОтсчетаДнейРождения = ТекущаяДата - (5*24*60*60);
	
	УстаревшиеСтроки = Новый Массив;
	ЗакрытыеФизлица = Новый Массив;
	
	// Дни рождения
	Для Каждого ДеньРождения Из ЗакрытыеДниРождения Цикл
		Если ДеньРождения.ДеньРождения < ДатаОтсчетаДнейРождения Тогда
			// устаревшие строки
			УстаревшиеСтроки.Добавить(ДеньРождения);
		Иначе
			ЗакрытыеФизлица.Добавить(ДеньРождения.Физлицо);
		КонецЕсли;
	КонецЦикла;
	// удалить "устаревшие" строки
	Для Каждого Элемент Из УстаревшиеСтроки Цикл
		Для Индекс = 0 По ЗакрытыеДниРождения.Количество()-1 Цикл
			ДеньРождения = ЗакрытыеДниРождения.Получить(Индекс);
			Если ДеньРождения = Элемент Тогда
				ЗакрытыеДниРождения.Удалить(Индекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если День(ТекущаяДата) < 20 Тогда
		АктуальныйПериодРегистрации = НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -1));
	Иначе
		АктуальныйПериодРегистрации = НачалоМесяца(ТекущаяДата);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокОрганизаций",				СписокОрганизаций);
	Запрос.УстановитьПараметр("СписокГоловныхОрганизаций",		СписокГоловныхОрганизаций);
	Запрос.УстановитьПараметр("АктуальныйПериодРегистрации",	АктуальныйПериодРегистрации);
	
	НеОграничиватьСписокЗадач = мСпособОтображенияЗадач.Получить(Перечисления.ГруппыЗадачПользователя.ДеньРождения);
	
	Запрос.УстановитьПараметр("ЗакрытыеФизлица",			ЗакрытыеФизлица);
	Запрос.УстановитьПараметр("ТекущаяДата",				ТекущаяДата);
	Запрос.УстановитьПараметр("ДатаОтсчетаДнейРождения",	ДатаОтсчетаДнейРождения);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ФизЛица.Ссылка КАК Физлицо,
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоТрудовойДоговор
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФизическиеЛица.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.ФизическиеЛица КАК ФизическиеЛица
	|	ГДЕ
	|		ДОБАВИТЬКДАТЕ(ФизическиеЛица.ДатаРождения, ГОД, ГОД(&ТекущаяДата) - ГОД(ФизическиеЛица.ДатаРождения)) >= &ДатаОтсчетаДнейРождения
	|		И ДОБАВИТЬКДАТЕ(ФизическиеЛица.ДатаРождения, ГОД, ГОД(&ТекущаяДата) - ГОД(ФизическиеЛица.ДатаРождения)) <= ДОБАВИТЬКДАТЕ(&ДатаОтсчетаДнейРождения, ДЕНЬ, 10)
	|		И (НЕ ФизическиеЛица.Ссылка В (&ЗакрытыеФизлица))) КАК ФизЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО ФизЛица.Ссылка = СотрудникиОрганизаций.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтоТрудовойДоговор";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ" + ?(НеОграничиватьСписокЗадач = Истина, "", " ПЕРВЫЕ "+мКоличествоЗадачВГруппе) + "
	|	ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, ГОД, ГОД(&ТекущаяДата) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения)) КАК Период,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Наименование КАК Наименование,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Ссылка,
	|	ВЫБОР
	|		КОГДА (ГОД(&ТекущаяДата) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения)) / 5 = (ВЫРАЗИТЬ((ГОД(&ТекущаяДата) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения)) / 5 КАК ЧИСЛО(4, 0)))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДополнительныеДанные
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		,
	|		Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТ_Сотрудники ГДЕ ЭтоТрудовойДоговор)";
	Если Не (СписокОрганизаций = Неопределено) Тогда
	Запрос.Текст = Запрос.Текст + "
	|			И Организация В (&СписокГоловныхОрганизаций)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|			) КАК РаботникиОрганизацийСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния 
	|	КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение 
	|	КОНЕЦ В (&СписокОрганизаций)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ" + ?(НеОграничиватьСписокЗадач = Истина, "", " ПЕРВЫЕ "+мКоличествоЗадачВГруппе) + "
	|	ДОБАВИТЬКДАТЕ(РаботникиСрезПоследних.ФизЛицо.ДатаРождения, ГОД, ГОД(&ТекущаяДата) - ГОД(РаботникиСрезПоследних.ФизЛицо.ДатаРождения)),
	|	РаботникиСрезПоследних.ФизЛицо.Наименование,
	|	РаботникиСрезПоследних.ФизЛицо,
	|	ВЫБОР
	|		КОГДА (ГОД(&ТекущаяДата) - ГОД(РаботникиСрезПоследних.Физлицо.ДатаРождения)) / 5 = (ВЫРАЗИТЬ((ГОД(&ТекущаяДата) - ГОД(РаботникиСрезПоследних.Физлицо.ДатаРождения)) / 5 КАК ЧИСЛО(4, 0)))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.Работники.СрезПоследних(
	|		,
	|		ФизЛицо В (ВЫБРАТЬ Физлицо ИЗ ВТ_Сотрудники)) КАК РаботникиСрезПоследних
	|ГДЕ
	|	РаботникиСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Наименование";
	
	Если ((ГруппаЗадач = Неопределено) ИЛИ (ГруппаЗадач = Перечисления.ГруппыЗадачПользователя.ДеньРождения)) Тогда
		КоличествоЗадач = 1;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ФИОСотрудника = СокрЛП(Выборка.Наименование);
			ПроцедурыУправленияПерсоналом.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ФИОСотрудника, 4, ФИОСотрудника);
			
			ФИОСотрудника2 = СокрЛП(Выборка.Наименование);
			ПроцедурыУправленияПерсоналом.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ФИОСотрудника2, 2, ФИОСотрудника2);
			
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ГруппаЗадач				= ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Перечисления.ГруппыЗадачПользователя.ДеньРождения);
			НоваяЗадача.БольшеНеНапоминать		= Истина;
			Если Выборка.ДополнительныеДанные Тогда
				НоваяЗадача.ТекстСписка				= "Поздравить " + Формат(Выборка.Период, "ДФ=""д ММММ""") + " с юбилеем " + ФИОСотрудника;
				НоваяЗадача.ТекстДерева				= "Поздравить " + Формат(Выборка.Период, "ДФ=""д ММММ""") + " с юбилеем " + ФИОСотрудника;
			Иначе
				НоваяЗадача.ТекстСписка				= "Поздравить " + Формат(Выборка.Период, "ДФ=""д ММММ""") + " с днем рождения " + ФИОСотрудника;
				НоваяЗадача.ТекстДерева				= "Поздравить " + Формат(Выборка.Период, "ДФ=""д ММММ""") + " " + ФИОСотрудника;
			КонецЕсли;
			НоваяЗадача.Действие1				= "Открыть форму " + ФИОСотрудника2;
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.ДеньРождения);
			ЗаполнитьЗначенияСвойств(НоваяЗадача, Выборка);
			
			КоличествоЗадач = КоличествоЗадач + 1;
			Если (НеОграничиватьСписокЗадач <> Истина) И (КоличествоЗадач > мКоличествоЗадачВГруппе-1) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если (НеОграничиватьСписокЗадач <> Истина) И (Выборка.Количество() > мКоличествоЗадачВГруппе-1) Тогда
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ГруппаЗадач				= "ПоказатьГруппуДеньРождения";
			НоваяЗадача.ТекстСписка				= "Показать все дни рождения...";
			НоваяЗадача.ТекстДерева				= "Показать все дни рождения...";
			НоваяЗадача.Действие1				= "Показать все дни рождения";
			НоваяЗадача.Гиперссылка				= Истина;
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.ДеньРождения);
			НоваяЗадача.Период					= ТекущаяДата;
		КонецЕсли;
	КонецЕсли;
	
	Организации = Новый Соответствие;
	
	// Начисления зарплаты
	НеОграничиватьСписокЗадач = мСпособОтображенияЗадач.Получить(Перечисления.ГруппыЗадачПользователя.РасчетЗарплаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОНЕЦПЕРИОДА(&АктуальныйПериодРегистрации, МЕСЯЦ) КАК Период,
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(НачислениеЗарплатыРаботникамОрганизаций.Ссылка) КАК Ссылка,
	|			НачислениеЗарплатыРаботникамОрганизаций.Организация КАК Организация
	|		ИЗ
	|			Документ.НачислениеЗарплатыРаботникамОрганизаций КАК НачислениеЗарплатыРаботникамОрганизаций
	|		ГДЕ
	|			НачислениеЗарплатыРаботникамОрганизаций.ПериодРегистрации = &АктуальныйПериодРегистрации";
	Если Не (СписокОрганизаций = Неопределено) Тогда
	Запрос.Текст = Запрос.Текст + "
	|			И НачислениеЗарплатыРаботникамОрганизаций.Организация В (&СписокОрганизаций)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|			И (НЕ НачислениеЗарплатыРаботникамОрганизаций.ПометкаУдаления)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НачислениеЗарплатыРаботникамОрганизаций.Организация) КАК НачислениеЗарплатыРаботникамОрганизаций
	|		ПО Организации.Ссылка = НачислениеЗарплатыРаботникамОрганизаций.Организация
	|ГДЕ
	|	(НЕ 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					Документ.НачислениеЗарплатыРаботникамОрганизаций КАК Док
	|				ГДЕ
	|					Док.Организация = Организации.Ссылка
	|					И Док.Проведен
	|					И Док.ПериодРегистрации = &АктуальныйПериодРегистрации))";
	Если Не (СписокОрганизаций = Неопределено) Тогда
	Запрос.Текст = Запрос.Текст + "
	|	И Организации.Ссылка В(&СписокОрганизаций)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	НаименованиеОрганизации";
	
	Если	((ГруппаЗадач = Неопределено) ИЛИ (ГруппаЗадач = Перечисления.ГруппыЗадачПользователя.РасчетЗарплаты)) И
			ПравоДоступа("Проведение", Метаданные.Документы.НачислениеЗарплатыРаботникамОрганизаций) Тогда
		КоличествоЗадач = 1;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Организации[Выборка.Организация] = 0;
			
			Если (НеОграничиватьСписокЗадач <> Истина) И (КоличествоЗадач > мКоличествоЗадачВГруппе-1) Тогда
				Продолжить;
			КонецЕсли;
			
			НаименованиеОрганизации = "";
			Если Организация.Пустая() И Не ПустаяСтрока(Выборка.НаименованиеОрганизации) Тогда
				НаименованиеОрганизации = СокрЛП(Выборка.НаименованиеОрганизации) + ". ";
			КонецЕсли;
			
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ГруппаЗадач				= ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Перечисления.ГруппыЗадачПользователя.РасчетЗарплаты);
			НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + "Начислить зарплату за " + Формат(Выборка.Период, "ДФ='ММММ'");
			НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + "За " + Формат(Выборка.Период, "ДФ='ММММ'");
			НоваяЗадача.Действие1				= "Начислить зарплату";
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.РасчетЗарплаты);
			ЗаполнитьЗначенияСвойств(НоваяЗадача, Выборка);
			
			КоличествоЗадач = КоличествоЗадач + 1;
		КонецЦикла;
		
		Если (НеОграничиватьСписокЗадач <> Истина) И (Выборка.Количество() > мКоличествоЗадачВГруппе-1) Тогда
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ГруппаЗадач				= "ПоказатьГруппуРасчетЗарплаты";
			НоваяЗадача.ТекстСписка				= "Показать все начисления зарплаты...";
			НоваяЗадача.ТекстДерева				= "Показать все начисления зарплаты...";
			НоваяЗадача.Действие1				= "Показать все начисления зарплаты";
			НоваяЗадача.Гиперссылка				= Истина;
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.РасчетЗарплаты);
			НоваяЗадача.Период					= ТекущаяДата;
		КонецЕсли;
	КонецЕсли;
	
	// Начисления ЕСН
	НеОграничиватьСписокЗадач = мСпособОтображенияЗадач.Получить(Перечисления.ГруппыЗадачПользователя.РасчетЕСН);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОНЕЦПЕРИОДА(&АктуальныйПериодРегистрации, МЕСЯЦ) КАК Период,
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	РасчетЕСН.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(РасчетЕСН.Ссылка) КАК Ссылка,
	|			РасчетЕСН.Организация КАК Организация
	|		ИЗ
	|			Документ.РасчетЕСН КАК РасчетЕСН
	|		ГДЕ
	|			(НЕ РасчетЕСН.Организация В (&Организации))
	|			И РасчетЕСН.ПериодРегистрации = &АктуальныйПериодРегистрации";
	Если Не (СписокОрганизаций = Неопределено) Тогда
	Запрос.Текст = Запрос.Текст + "
	|			И РасчетЕСН.Организация В(&СписокОрганизаций)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|			И (НЕ РасчетЕСН.ПометкаУдаления)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РасчетЕСН.Организация) КАК РасчетЕСН
	|		ПО Организации.Ссылка = РасчетЕСН.Организация
	|ГДЕ
	|	(НЕ Организации.Ссылка В (&Организации))
	|	И (НЕ 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					Документ.РасчетЕСН КАК Док
	|				ГДЕ
	|					Док.Организация = Организации.Ссылка
	|					И Док.Проведен
	|					И Док.ПериодРегистрации = &АктуальныйПериодРегистрации))";
	Если Не (СписокОрганизаций = Неопределено) Тогда
	Запрос.Текст = Запрос.Текст + "
	|	И Организации.Ссылка В(&СписокОрганизаций)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	НаименованиеОрганизации";
	
	ОрганизацииМассив = Новый Массив;
	Для Каждого Элемент Из Организации Цикл
		ОрганизацииМассив.Добавить(Элемент.Ключ);
	КонецЦикла;
	Запрос.УстановитьПараметр("Организации",	ОрганизацииМассив);
	
	Если	((ГруппаЗадач = Неопределено) ИЛИ (ГруппаЗадач = Перечисления.ГруппыЗадачПользователя.РасчетЕСН)) И
			ПравоДоступа("Проведение", Метаданные.Документы.РасчетЕСН) Тогда
		КоличествоЗадач = 1;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Организации[Выборка.Организация] = 0;
			
			Если (НеОграничиватьСписокЗадач <> Истина) И (КоличествоЗадач > мКоличествоЗадачВГруппе-1) Тогда
				Продолжить;
			КонецЕсли;
			
			НаименованиеОрганизации = "";
			Если Организация.Пустая() И Не ПустаяСтрока(Выборка.НаименованиеОрганизации) Тогда
				НаименованиеОрганизации = СокрЛП(Выборка.НаименованиеОрганизации) + ". ";
			КонецЕсли;
			
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ГруппаЗадач				= ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Перечисления.ГруппыЗадачПользователя.РасчетЕСН);
			НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + "Рассчитать отчисления с ФОТ и ЗП за " + Формат(Выборка.Период, "ДФ='ММММ'");
			НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + "За " + Формат(Выборка.Период, "ДФ='ММММ'");
			НоваяЗадача.Действие1				= "Рассчитать отчисления с ФОТ и ЗП";
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.РасчетЕСН);
			ЗаполнитьЗначенияСвойств(НоваяЗадача, Выборка);
			
			КоличествоЗадач = КоличествоЗадач + 1;
		КонецЦикла;
		
		Если (НеОграничиватьСписокЗадач <> Истина) И (Выборка.Количество() > мКоличествоЗадачВГруппе-1) Тогда
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ГруппаЗадач				= "ПоказатьГруппуРасчетЕСН";
			НоваяЗадача.ТекстСписка				= "Показать все расчеты отчислений с ФОТ и ЗП...";
			НоваяЗадача.ТекстДерева				= "Показать все расчеты отчислений с ФОТ и ЗП...";
			НоваяЗадача.Действие1				= "Показать все расчеты отчислений с ФОТ и ЗП";
			НоваяЗадача.Гиперссылка				= Истина;
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.РасчетЕСН);
			НоваяЗадача.Период					= ТекущаяДата;
		КонецЕсли;
	КонецЕсли;
	
	// Отражение зарплаты в учете
	НеОграничиватьСписокЗадач = мСпособОтображенияЗадач.Получить(Перечисления.ГруппыЗадачПользователя.ОтражениеЗарплатыВУчете);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОНЕЦПЕРИОДА(&АктуальныйПериодРегистрации, МЕСЯЦ) КАК Период,
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	ОтражениеЗарплатыВРеглУчете.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ОтражениеЗарплатыВРеглУчете.Ссылка) КАК Ссылка,
	|			ОтражениеЗарплатыВРеглУчете.Организация КАК Организация
	|		ИЗ
	|			Документ.ОтражениеЗарплатыВРеглУчете КАК ОтражениеЗарплатыВРеглУчете
	|		ГДЕ
	|			(НЕ ОтражениеЗарплатыВРеглУчете.Организация В (&Организации))
	|			И ОтражениеЗарплатыВРеглУчете.ПериодРегистрации = &АктуальныйПериодРегистрации";
	Если Не (СписокОрганизаций = Неопределено) Тогда
	Запрос.Текст = Запрос.Текст + "
	|			И ОтражениеЗарплатыВРеглУчете.Организация В (&СписокОрганизаций)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|			И (НЕ ОтражениеЗарплатыВРеглУчете.ПометкаУдаления)
	|			
	|		СГРУППИРОВАТЬ ПО
	|			ОтражениеЗарплатыВРеглУчете.Организация) КАК ОтражениеЗарплатыВРеглУчете
	|		ПО Организации.Ссылка = ОтражениеЗарплатыВРеглУчете.Организация
	|ГДЕ
	|	(НЕ Организации.Ссылка В (&Организации))
	|	И (НЕ 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					Документ.ОтражениеЗарплатыВРеглУчете КАК Док
	|				ГДЕ
	|					Док.Организация = Организации.Ссылка
	|					И Док.Проведен
	|					И Док.ПериодРегистрации = &АктуальныйПериодРегистрации))";
	Если Не (СписокОрганизаций = Неопределено) Тогда
	Запрос.Текст = Запрос.Текст + "
	|	И Организации.Ссылка В (&СписокОрганизаций)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	НаименованиеОрганизации";
	
	ОрганизацииМассив = Новый Массив;
	Для Каждого Элемент Из Организации Цикл
		ОрганизацииМассив.Добавить(Элемент.Ключ);
	КонецЦикла;
	Запрос.УстановитьПараметр("Организации",	ОрганизацииМассив);
	
	Если	((ГруппаЗадач = Неопределено) ИЛИ (ГруппаЗадач = Перечисления.ГруппыЗадачПользователя.ОтражениеЗарплатыВУчете)) И
			ПравоДоступа("Проведение", Метаданные.Документы.ОтражениеЗарплатыВРеглУчете) Тогда
		КоличествоЗадач = 1;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Организации[Выборка.Организация] = 0;
			
			Если (НеОграничиватьСписокЗадач <> Истина) И (КоличествоЗадач > мКоличествоЗадачВГруппе-1) Тогда
				Продолжить;
			КонецЕсли;
			
			НаименованиеОрганизации = "";
			Если Организация.Пустая() И Не ПустаяСтрока(Выборка.НаименованиеОрганизации) Тогда
				НаименованиеОрганизации = СокрЛП(Выборка.НаименованиеОрганизации) + ". ";
			КонецЕсли;
			
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ГруппаЗадач				= ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Перечисления.ГруппыЗадачПользователя.ОтражениеЗарплатыВУчете);
			НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + "Отразить зарплату в регл. учете за " + Формат(Выборка.Период, "ДФ='ММММ'");
			НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + "За " + Формат(Выборка.Период, "ДФ='ММММ'");
			НоваяЗадача.Действие1				= "Отразить зарплату в регл. учете";
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.ОтражениеЗарплатыВУчете);
			ЗаполнитьЗначенияСвойств(НоваяЗадача, Выборка);
			
			КоличествоЗадач = КоличествоЗадач + 1;
		КонецЦикла;
		
		Если (НеОграничиватьСписокЗадач <> Истина) И (Выборка.Количество() > мКоличествоЗадачВГруппе-1) Тогда
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ГруппаЗадач				= "ПоказатьГруппуОтражениеЗарплатыВУчете";
			НоваяЗадача.ТекстСписка				= "Показать все отражения зарплаты...";
			НоваяЗадача.ТекстДерева				= "Показать все отражения зарплаты...";
			НоваяЗадача.Действие1				= "Показать все отражения зарплаты";
			НоваяЗадача.Гиперссылка				= Истина;
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.ОтражениеЗарплатыВУчете);
			НоваяЗадача.Период					= ТекущаяДата;
		КонецЕсли;
	КонецЕсли;
	
	// перерасчеты
	НеОграничиватьСписокЗадач = мСпособОтображенияЗадач.Получить(Перечисления.ГруппыЗадачПользователя.Перерасчет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ" + ?(НеОграничиватьСписокЗадач = Истина, "", " ПЕРВЫЕ "+мКоличествоЗадачВГруппе) + "
	|	ВложенныйЗапрос.Период КАК Период,
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Наименование КАК Наименование,
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.Организация.Наименование КАК НаименованиеОрганизации
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ" + ?(НеОграничиватьСписокЗадач = Истина, "", " ПЕРВЫЕ "+мКоличествоЗадачВГруппе) + "
	|		ЗаписиРегистровРасчета.Ссылка КАК Ссылка,
	|		ЗаписиРегистровРасчета.Ссылка.Представление КАК Наименование,
	|		ЗаписиРегистровРасчета.Ссылка.ПериодРегистрации КАК Период,
	|		ЗаписиРегистровРасчета.Ссылка.Организация КАК Организация
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПерерасчетОсновныхНачислений.ОбъектПерерасчета КАК Ссылка,
	|			ПерерасчетОсновныхНачислений.Организация КАК Организация
	|		ИЗ
	|			РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК ПерерасчетОсновныхНачислений";
	Если Не (СписокОрганизаций = Неопределено) Тогда
	Запрос.Текст = Запрос.Текст + "
	|		ГДЕ
	|			ПерерасчетОсновныхНачислений.Организация В(&СписокГоловныхОрганизаций)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	
	|		ОБЪЕДИНИТЬ
	|	
	|		ВЫБРАТЬ
	|			ПерерасчетДополнительныхНачислений.ОбъектПерерасчета,
	|			ПерерасчетДополнительныхНачислений.Организация
	|		ИЗ
	|			РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК ПерерасчетДополнительныхНачислений";
	Если Не (СписокОрганизаций = Неопределено) Тогда
	Запрос.Текст = Запрос.Текст + "
	|		ГДЕ
	|			ПерерасчетДополнительныхНачислений.Организация В(&СписокГоловныхОрганизаций)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	
	|		ОБЪЕДИНИТЬ
	|	
	|		ВЫБРАТЬ
	|			ПерерасчетСреднегоЗаработка.ОбъектПерерасчета,
	|			ПерерасчетСреднегоЗаработка.Организация
	|		ИЗ
	|			РегистрРасчета.РасчетСреднегоЗаработка.ПерерасчетСреднегоЗаработка КАК ПерерасчетСреднегоЗаработка";
	Если Не (СписокОрганизаций = Неопределено) Тогда
	Запрос.Текст = Запрос.Текст + "
	|		ГДЕ
	|			ПерерасчетСреднегоЗаработка.Организация В(&СписокГоловныхОрганизаций)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|		) КАК ЗаписиРегистровРасчета
	|	ГДЕ
	|		ЗаписиРегистровРасчета.Ссылка.ПериодРегистрации ЕСТЬ НЕ NULL"; 
	Если Не (СписокОрганизаций = Неопределено) Тогда
	Запрос.Текст = Запрос.Текст + "
	|			И ЗаписиРегистровРасчета.Ссылка.Организация В(&СписокОрганизаций)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ" + ?(НеОграничиватьСписокЗадач = Истина, "", " ПЕРВЫЕ "+мКоличествоЗадачВГруппе) + "
	|		ЗаполнениеПлановыхНачислений.ОбъектЗаполнения,
	|		ЗаполнениеПлановыхНачислений.ОбъектЗаполнения.Представление,
	|		ЗаполнениеПлановыхНачислений.ПериодРегистрации,
	|		ЗаполнениеПлановыхНачислений.ОбособленноеПодразделение
	|	ИЗ
	|		РегистрСведений.ЗаполнениеПлановыхНачислений КАК ЗаполнениеПлановыхНачислений
	|	ГДЕ
	|		ЗаполнениеПлановыхНачислений.ПериодРегистрации < &АктуальныйПериодРегистрации";
	Если Не (СписокОрганизаций = Неопределено) Тогда
	Запрос.Текст = Запрос.Текст + "
	|		И ЗаполнениеПлановыхНачислений.ОбособленноеПодразделение В(&СписокОрганизаций)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период ВОЗР";
	
	Если	((ГруппаЗадач = Неопределено) ИЛИ (ГруппаЗадач = Перечисления.ГруппыЗадачПользователя.Перерасчет)) И
			ПравоДоступа("Изменение", Метаданные.РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций) И
			ПравоДоступа("Изменение", Метаданные.РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций) И
			ПравоДоступа("Изменение", Метаданные.РегистрыРасчета.РасчетСреднегоЗаработка) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		КоличествоЗадач = 1;
		Пока Выборка.Следующий() Цикл
			НаименованиеОрганизации = "";
			Если Организация.Пустая() И Не ПустаяСтрока(Выборка.НаименованиеОрганизации) Тогда
				НаименованиеОрганизации = СокрЛП(Выборка.НаименованиеОрганизации) + ". ";
			КонецЕсли;
			
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ГруппаЗадач				= ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Перечисления.ГруппыЗадачПользователя.Перерасчет);
			НоваяЗадача.БольшеНеНапоминать		= Истина;
			НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + "Перерассчитать " + СокрЛП(Выборка.Наименование);
			НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + "" + СокрЛП(Выборка.Наименование);
			НоваяЗадача.Действие3				= "Открыть";
			НоваяЗадача.Действие4				= "Обработать все перерасчеты организации " + СокрЛП(Выборка.НаименованиеОрганизации);
			Если НачалоМесяца(АктуальныйПериодРегистрации) <= Выборка.Период Тогда
				Месяц = Формат(Выборка.Период, "ДФ=MMMM");
				ПроцедурыУправленияПерсоналом.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 5, Месяц);
				НоваяЗадача.Действие1 = "Перерассчитать документ " + Месяц + Формат(Выборка.Период, "ДФ=' yyyy ""г.""'");
			Иначе
				МесяцПрошлый	= Формат(Выборка.Период, "ДФ=MMMM");
				ПроцедурыУправленияПерсоналом.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), МесяцПрошлый, 5, МесяцПрошлый);
				НоваяЗадача.Действие1 = "Перерассчитать документ прошлым периодом (" + МесяцПрошлый + Формат(Выборка.Период, "ДФ=' yyyy ""г.""'") + ")";
				Если ТипЗнч(Выборка.Ссылка) <> Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда
					МесяцТекущий = Формат(АктуальныйПериодРегистрации, "ДФ=MMMM");
					ПроцедурыУправленияПерсоналом.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), МесяцТекущий, 5, МесяцТекущий);
					НоваяЗадача.Действие2 = "Перерассчитать документ текущим периодом (" + МесяцТекущий + Формат(АктуальныйПериодРегистрации, "ДФ=' yyyy ""г.""'") + ")";
				КонецЕсли;
			КонецЕсли;
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.Перерасчет);
			ЗаполнитьЗначенияСвойств(НоваяЗадача, Выборка);
			
			КоличествоЗадач = КоличествоЗадач + 1;
			Если (НеОграничиватьСписокЗадач <> Истина) И (КоличествоЗадач > мКоличествоЗадачВГруппе-1) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если (НеОграничиватьСписокЗадач <> Истина) И (Выборка.Количество() > мКоличествоЗадачВГруппе-1) Тогда
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ГруппаЗадач				= "ПоказатьГруппуПерерасчет";
			НоваяЗадача.ТекстСписка				= "Показать все перерасчеты...";
			НоваяЗадача.ТекстДерева				= "Показать все перерасчеты...";
			НоваяЗадача.Действие1				= "Показать все перерасчеты";
			НоваяЗадача.Гиперссылка				= Истина;
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.Перерасчет);
			НоваяЗадача.Период					= ТекущаяДата;
		КонецЕсли;
	КонецЕсли;
	
	// доначисления
	НеОграничиватьСписокЗадач = мСпособОтображенияЗадач.Получить(Перечисления.ГруппыЗадачПользователя.Доначисление);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ" + ?(НеОграничиватьСписокЗадач = Истина, "", " ПЕРВЫЕ "+мКоличествоЗадачВГруппе) + "
	|	Доначисления.Сотрудник КАК Ссылка,
	|	Доначисления.Сотрудник.Организация.Наименование КАК НаименованиеОрганизации,
	|	Доначисления.Сотрудник.Организация КАК Организация,
	|	Доначисления.Сотрудник.Наименование КАК Наименование,
	|	Доначисления.ПериодДействия КАК Период,
	|	Доначисления.ДатаНачала КАК ДатаНачала,
	|	Доначисления.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.ДоначисленияСотрудникам КАК Доначисления";
	Если Не (СписокОрганизаций = Неопределено) Тогда
	Запрос.Текст = Запрос.Текст + "
	|ГДЕ
	|	Доначисления.Сотрудник.Организация В(&СписокГоловныхОрганизаций)";
	КонецЕсли;

	Если	((ГруппаЗадач = Неопределено) ИЛИ (ГруппаЗадач = Перечисления.ГруппыЗадачПользователя.Доначисление)) И
			ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ДоначисленияСотрудникам) Тогда
		КоличествоЗадач = 1;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаименованиеОрганизации = "";
			Если Организация.Пустая() И Не ПустаяСтрока(Выборка.НаименованиеОрганизации) Тогда
				НаименованиеОрганизации = СокрЛП(Выборка.НаименованиеОрганизации) + ". ";
			КонецЕсли;
			
			ФИОСотрудника = СокрЛП(Выборка.Наименование);
			ПроцедурыУправленияПерсоналом.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ФИОСотрудника, 2, ФИОСотрудника);
			
			ДополнительныеДанные = Новый Структура;
			ДополнительныеДанные.Вставить("ДатаНачала",		Выборка.ДатаНачала);
			ДополнительныеДанные.Вставить("ДатаОкончания",	Выборка.ДатаОкончания);
			
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ГруппаЗадач				= ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Перечисления.ГруппыЗадачПользователя.Доначисление);
			НоваяЗадача.БольшеНеНапоминать		= Истина;
			НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + СокрЛП(Выборка.Наименование) + ". Доначислить зарплату за " + ОбщегоНазначения.ОписаниеПериода(Выборка.ДатаНачала, Выборка.ДатаОкончания, Ложь);
			НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + СокрЛП(Выборка.Наименование) + ". Зарплату за " + ОбщегоНазначения.ОписаниеПериода(Выборка.ДатаНачала, Выборка.ДатаОкончания, Ложь);
			НоваяЗадача.Действие1				= "Доначислить зарплату";
			НоваяЗадача.Действие2				= "Открыть форму " + ФИОСотрудника;
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.Доначисление);
			НоваяЗадача.ДополнительныеДанные	= ЗначениеВСтрокуВнутр(ДополнительныеДанные);
			ЗаполнитьЗначенияСвойств(НоваяЗадача, Выборка);
			
			КоличествоЗадач = КоличествоЗадач + 1;
			Если (НеОграничиватьСписокЗадач <> Истина) И (КоличествоЗадач > мКоличествоЗадачВГруппе-1) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если (НеОграничиватьСписокЗадач <> Истина) И (Выборка.Количество() > мКоличествоЗадачВГруппе-1) Тогда
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ГруппаЗадач				= "ПоказатьГруппуДоначисление";
			НоваяЗадача.ТекстСписка				= "Показать все доначисления...";
			НоваяЗадача.ТекстДерева				= "Показать все доначисления...";
			НоваяЗадача.Действие1				= "Показать все доначисления";
			НоваяЗадача.Гиперссылка				= Истина;
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.Доначисление);
			НоваяЗадача.Период					= ТекущаяДата;
		КонецЕсли;
	КонецЕсли;
	
	// Перезаполнения
	НеОграничиватьСписокЗадач = мСпособОтображенияЗадач.Получить(Перечисления.ГруппыЗадачПользователя.Перезаполнение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ" + ?(НеОграничиватьСписокЗадач = Истина, "", " ПЕРВЫЕ "+мКоличествоЗадачВГруппе) + "
	|	ЗаполнениеПлановыхНачислений.ОбъектЗаполнения КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ЗаполнениеПлановыхНачислений.ОбъектЗаполнения) КАК Наименование,
	|	ЗаполнениеПлановыхНачислений.ОбособленноеПодразделение.Наименование КАК НаименованиеОрганизации,
	|	ЗаполнениеПлановыхНачислений.ПериодРегистрации КАК Период
	|ИЗ
	|	РегистрСведений.ЗаполнениеПлановыхНачислений КАК ЗаполнениеПлановыхНачислений
	|
	|ГДЕ
	|	ЗаполнениеПлановыхНачислений.ПериодРегистрации >= &АктуальныйПериодРегистрации";
	Если Не (СписокОрганизаций = Неопределено) Тогда
	Запрос.Текст = Запрос.Текст + "
	|	И ЗаполнениеПлановыхНачислений.ОбособленноеПодразделение В(&СписокОрганизаций)";
	КонецЕсли;
	
	Если	((ГруппаЗадач = Неопределено) ИЛИ (ГруппаЗадач = Перечисления.ГруппыЗадачПользователя.Перезаполнение)) И
			ПравоДоступа("Изменение", Метаданные.Документы.НачислениеЗарплатыРаботникамОрганизаций) Тогда
		КоличествоЗадач = 1;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаименованиеОрганизации = "";
			Если Организация.Пустая() И Не ПустаяСтрока(Выборка.НаименованиеОрганизации) Тогда
				НаименованиеОрганизации = СокрЛП(Выборка.НаименованиеОрганизации) + ". ";
			КонецЕсли;
			
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ГруппаЗадач				= ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Перечисления.ГруппыЗадачПользователя.Перезаполнение);
			НоваяЗадача.БольшеНеНапоминать		= Истина;
			НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + "Перезаполнить " +СокрЛП(Выборка.Наименование);
			НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + "" +СокрЛП(Выборка.Наименование);
			НоваяЗадача.Действие2				= "Открыть документ";
			НоваяЗадача.Действие1				= "Перезаполнить документ";
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.Перезаполнение);
			ЗаполнитьЗначенияСвойств(НоваяЗадача, Выборка);
			
			КоличествоЗадач = КоличествоЗадач + 1;
			Если (НеОграничиватьСписокЗадач <> Истина) И (КоличествоЗадач > мКоличествоЗадачВГруппе-1) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если (НеОграничиватьСписокЗадач <> Истина) И (Выборка.Количество() > мКоличествоЗадачВГруппе-1) Тогда
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ГруппаЗадач				= "ПоказатьГруппуПерезаполнение";
			НоваяЗадача.ТекстСписка				= "Показать все перезаполнения...";
			НоваяЗадача.ТекстДерева				= "Показать все перезаполнения...";
			НоваяЗадача.Действие1				= "Показать все перезаполнения";
			НоваяЗадача.Гиперссылка				= Истина;
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.Перезаполнение);
			НоваяЗадача.Период					= ТекущаяДата;
		КонецЕсли;
	КонецЕсли;
	
	// Намеченные события по персоналу
	НеОграничиватьСписокЗадач = мСпособОтображенияЗадач.Получить(Перечисления.ГруппыЗадачПользователя.НамеченныеСобытияПоПерсоналу);
	
	КоличествоЗадач = 1;
	Если	((ГруппаЗадач = Неопределено) ИЛИ (ГруппаЗадач = Перечисления.ГруппыЗадачПользователя.НамеченныеСобытияПоПерсоналу)) И
			ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СостояниеРаботниковОрганизаций) Тогда
			
		ДатаНачала				= Бюджетирование.ДобавитьИнтервал(ТекущаяДата,Перечисления.Периодичность.Месяц, -1);
		ДатаОкончания			= Бюджетирование.ДобавитьИнтервал(ТекущаяДата,Перечисления.Периодичность.Неделя, 1);
		КоличествоЗадачВГруппе	= ?(НеОграничиватьСписокЗадач = Истина, 0, мКоличествоЗадачВГруппе);
			
		Результат = Обработки.ПоказНамеченныхСобытийПоПерсоналу.Создать().СформироватьЗапрос(СписокОрганизаций, ДатаНачала, ДатаОкончания, КоличествоЗадачВГруппе);
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаименованиеОрганизации = "";
			Если Организация.Пустая() И Не ПустаяСтрока(Выборка.ОрганизацияНаименование) Тогда
				НаименованиеОрганизации = СокрЛП(Выборка.ОрганизацияНаименование) + ". ";
			КонецЕсли;
			ФИОСотрудника = СокрЛП(Выборка.СотрудникНаименование);
			ПроцедурыУправленияПерсоналом.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ФИОСотрудника, 4, ФИОСотрудника);
			
			ДополнительныеДанные = Новый Структура;
			ДополнительныеДанные.Вставить("ПланируемоеСобытие",	Выборка.ПланируемоеСобытие);
			ДополнительныеДанные.Вставить("Подразделение",		Выборка.Подразделение);
			ДополнительныеДанные.Вставить("Должность",			Выборка.Должность);
			ДополнительныеДанные.Вставить("ЗанимаемыхСтавок",	Выборка.ЗанимаемыхСтавок);
			ДополнительныеДанные.Вставить("ГрафикРаботы",		Выборка.ГрафикРаботы);
			
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.НамеченныеСобытияПоПерсоналу);
			НоваяЗадача.Период					= Выборка.ДатаИзменения;
			НоваяЗадача.ДополнительныеДанные	= ЗначениеВСтрокуВнутр(ДополнительныеДанные);
			НоваяЗадача.Организация				= Выборка.Организация;
			НоваяЗадача.НаименованиеОрганизации	= Выборка.ОрганизацияНаименование;
			НоваяЗадача.Ссылка					= Выборка.Сотрудник;
			Если Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.Заболевание Тогда
				НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + "Выздоровление " + ФИОСотрудника;
				НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + "Выздоровление " + ФИОСотрудника;
			ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.Командировка Тогда
				НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + "Возврат из командировки " + ФИОСотрудника;
				НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + "Возврат из командировки " + ФИОСотрудника;
			ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.ОтгулВСчетЕжегодногоОтпуска Тогда
				НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + "Возврат из отгула " + ФИОСотрудника;
				НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + "Возврат из отгула " + ФИОСотрудника;
			ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.ОтпускБезСохраненияЗарплаты Тогда
				НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + "Возврат из отпуска за свой счет " + ФИОСотрудника;
				НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + "Возврат из отпуска за свой счет " + ФИОСотрудника;
			ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.ОтпускЕжегодный Тогда
				НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + "Возврат из ежегодного отпуска " + ФИОСотрудника;
				НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + "Возврат из ежегодного отпуска " + ФИОСотрудника;
			ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.ОтпускПоУходуЗаРебенком Тогда
				НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + "Возврат из отпуска по уходу за ребенком " + ФИОСотрудника;
				НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + "Возврат из отпуска по уходу за ребенком " + ФИОСотрудника;
			ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.ОтпускПрочий Тогда
				НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + "Возврат из прочего отпуска " + ФИОСотрудника;
				НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + "Возврат из прочего отпуска " + ФИОСотрудника;
			ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.ОтпускУчебный Тогда
				НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + "Возврат из учебного отпуска " + ФИОСотрудника;
				НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + "Возврат из учебного отпуска " + ФИОСотрудника;
			ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.ОтпускУчебныйНеоплачиваемый Тогда
				НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + "Возврат из учебного неоплачиваемого отпуска " + ФИОСотрудника;
				НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + "Возврат из учебного неоплачиваемого отпуска " + ФИОСотрудника;
			ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.ОтсутствуетПоНевыясненнойПричине Тогда
				НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + "Возврат после прогула " + ФИОСотрудника;
				НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + "Возврат после прогула " + ФИОСотрудника;
			ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.Перемещение Тогда
				НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + "Переместить " + ФИОСотрудника + " в подразделение " + Выборка.Подразделение + " на должность " + Выборка.Должность;
				НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + "Переместить " + ФИОСотрудника + " в подразделение " + Выборка.Подразделение + " на должность " + Выборка.Должность;
			ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.РезультатИспытательногоСрока Тогда
				НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + "Оценить испытательный срок " + ФИОСотрудника;
				НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + "Оценить испытательный срок " + ФИОСотрудника;
			ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.Увольнение Тогда
				НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + "Уволить " + ФИОСотрудника;
				НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + "Уволить " + ФИОСотрудника;
			ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.УвольнениеПослеИспытательногоСрока Тогда
				НоваяЗадача.ТекстСписка				= НаименованиеОрганизации + "Уволить после испытательного срока " + ФИОСотрудника;
				НоваяЗадача.ТекстДерева				= НаименованиеОрганизации + "Уволить после испытательного срока " + ФИОСотрудника;
			КонецЕсли;
			
			Если Выборка.УправленческийУчет Тогда
				НоваяЗадача.ГруппаЗадач				= ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Перечисления.ГруппыЗадачПользователя.НамеченныеСобытияПоПерсоналу);
				НоваяЗадача.Действие1				= "Зарегистрировать " + Выборка.ПланируемоеСобытие;
				НоваяЗадача.Действие2				= "Обработать все предстоящие кадровые события по компании";
				
			Иначе
				НоваяЗадача.ГруппаЗадач				= "НамеченныеСобытияПоПерсоналуОрганизаций";
				НоваяЗадача.Действие1				= "Зарегистрировать " + Выборка.ПланируемоеСобытие;
				НоваяЗадача.Действие2				= "Обработать все предстоящие кадровые события по организации " + СокрЛП(Выборка.ОрганизацияНаименование);
				
			КонецЕсли;
		
			КоличествоЗадач = КоличествоЗадач + 1;
			Если (НеОграничиватьСписокЗадач <> Истина) И (КоличествоЗадач > мКоличествоЗадачВГруппе-1) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	Если (НеОграничиватьСписокЗадач <> Истина) И (КоличествоЗадач > мКоличествоЗадачВГруппе-1) Тогда
		НоваяЗадача = ЗадачиПользователя.Добавить();
		НоваяЗадача.ГруппаЗадач				= "ПоказатьГруппуНамеченныеСобытияПоПерсоналу";
		НоваяЗадача.ТекстСписка				= "Показать все предстоящие кадровые события...";
		НоваяЗадача.ТекстДерева				= "Показать все предстоящие кадровые события...";
		НоваяЗадача.Действие1				= "Показать все предстоящие кадровые события";
		НоваяЗадача.Гиперссылка				= Истина;
		НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.НамеченныеСобытияПоПерсоналу);
		НоваяЗадача.Период					= ТекущаяДата;
	КонецЕсли;
	
	// Напоминания
	НеОграничиватьСписокЗадач = мСпособОтображенияЗадач.Получить(Перечисления.ГруппыЗадачПользователя.Напоминания);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ?(НеОграничиватьСписокЗадач = Истина, "", " ПЕРВЫЕ "+мКоличествоЗадачВГруппе) + "
	|	ВЫБОР
	|		КОГДА Событие.ВремяНапоминания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА &текущаяДата
	|		ИНАЧЕ Событие.ВремяНапоминания
	|	КОНЕЦ КАК Период,
	|	Событие.Ссылка КАК Ссылка,
	|	Событие.ОписаниеСобытия,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(ВЫБОР
	|					КОГДА Событие.ВремяНапоминания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА &текущаяДата
	|					ИНАЧЕ Событие.ВремяНапоминания
	|				КОНЕЦ, &текущаяДата, ДЕНЬ) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДополнительныеДанные,
	|	Событие.ЗаявкаКандидата.Наименование КАК ЗаявкаКандидата
	|ИЗ
	|	Документ.Событие КАК Событие
	|ГДЕ
	|	Событие.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовСобытия.ЗаявкаКандидата)
	|	И (НЕ Событие.ЗаявкаКандидата = ЗНАЧЕНИЕ(Справочник.ЗаявкиКандидатов.ПустаяСсылка))
	|	И Событие.НапомнитьОСобытии
	|	И Событие.Проведен
	|	И Событие.СостояниеСобытия = ЗНАЧЕНИЕ(Перечисление.СостоянияСобытий.Запланировано)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Если	(ГруппаЗадач = Неопределено) ИЛИ (ГруппаЗадач = Перечисления.ГруппыЗадачПользователя.Напоминания) Тогда
		КоличествоЗадач = 1;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ГруппаЗадач				= ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Перечисления.ГруппыЗадачПользователя.Напоминания);
			НоваяЗадача.БольшеНеНапоминать		= Истина;
			НоваяЗадача.ТекстСписка				= Выборка.ЗаявкаКандидата + " - " + Формат(Выборка.Период, "ДФ='дд.ММ.гггг ЧЧ:мм'") + " " + Выборка.ОписаниеСобытия;
			НоваяЗадача.ТекстДерева				= Выборка.ЗаявкаКандидата + " - " + Формат(Выборка.Период, "ДФ='дд.ММ.гггг ЧЧ:мм'") + " " + Выборка.ОписаниеСобытия;
			НоваяЗадача.Действие1				= "Открыть напоминание";
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.Напоминания);
			ЗаполнитьЗначенияСвойств(НоваяЗадача, Выборка);
			
			КоличествоЗадач = КоличествоЗадач + 1;
			Если (НеОграничиватьСписокЗадач <> Истина) И (КоличествоЗадач > мКоличествоЗадачВГруппе-1) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если (НеОграничиватьСписокЗадач <> Истина) И (Выборка.Количество() > мКоличествоЗадачВГруппе-1) Тогда
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ГруппаЗадач				= "ПоказатьГруппуНапоминания";
			НоваяЗадача.ТекстСписка				= "Показать все напоминания...";
			НоваяЗадача.ТекстДерева				= "Показать все напоминания...";
			НоваяЗадача.Действие1				= "Показать все напоминания";
			НоваяЗадача.Гиперссылка				= Истина;
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.Напоминания);
			НоваяЗадача.Период					= ТекущаяДата;
		КонецЕсли;
	КонецЕсли;
	
	// Ошибки кадровых перемещений
	НеОграничиватьСписокЗадач = мСпособОтображенияЗадач.Получить(Перечисления.ГруппыЗадачПользователя.ОшибкиКадровыхПеремещений);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ?(НеОграничиватьСписокЗадач = Истина, "", " ПЕРВЫЕ "+мКоличествоЗадачВГруппе) + "
	|	ПериодыЗанятостиПомещенийОшибки.Помещение КАК Ссылка,
	|	ПериодыЗанятостиПомещенийОшибки.Помещение.Наименование КАК Наименование,
	|	NULL КАК Организация,
	|	NULL КАК НаименованиеОрганизации,
	|	""ПериодыЗанятостиПомещенийОшибки"" КАК ДополнительныеДанные,
	|	&текущаяДата КАК Период
	|ИЗ
	|	РегистрСведений.ПериодыЗанятостиПомещенийОшибки КАК ПериодыЗанятостиПомещенийОшибки
	|ГДЕ
	|	(НЕ ПериодыЗанятостиПомещенийОшибки.Помещение.Наименование ЕСТЬ NULL )";
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботыОшибки) Тогда
	Запрос.Текст = Запрос.Текст + "
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ" + ?(НеОграничиватьСписокЗадач = Истина, "", " ПЕРВЫЕ "+мКоличествоЗадачВГруппе) + "
	|	ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботыОшибки.Физлицо КАК Ссылка,
	|	ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботыОшибки.Физлицо.Наименование КАК Наименование,
	|	NULL КАК Организация,
	|	NULL КАК НаименованиеОрганизации,
	|	""ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботыОшибки"" КАК ДополнительныеДанные,
	|	&текущаяДата КАК Период
	|ИЗ
	|	РегистрСведений.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботыОшибки КАК ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботыОшибки
	|ГДЕ
	|	(НЕ ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботыОшибки.Физлицо.Наименование ЕСТЬ NULL )";
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыРаботыРаботниковОрганизацийПоСовместительствуОшибки) Тогда
	Запрос.Текст = Запрос.Текст + "
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ" + ?(НеОграничиватьСписокЗадач = Истина, "", " ПЕРВЫЕ "+мКоличествоЗадачВГруппе) + "
	|	ПериодыРаботыРаботниковОрганизацийПоСовместительствуОшибки.Физлицо,
	|	ПериодыРаботыРаботниковОрганизацийПоСовместительствуОшибки.Физлицо.Наименование,
	|	ПериодыРаботыРаботниковОрганизацийПоСовместительствуОшибки.Организация,
	|	ПериодыРаботыРаботниковОрганизацийПоСовместительствуОшибки.Организация.Наименование,
	|	""ПериодыРаботыРаботниковОрганизацийПоСовместительствуОшибки"",
	|	&текущаяДата
	|ИЗ
	|	РегистрСведений.ПериодыРаботыРаботниковОрганизацийПоСовместительствуОшибки КАК ПериодыРаботыРаботниковОрганизацийПоСовместительствуОшибки
	|ГДЕ
	|	(НЕ ПериодыРаботыРаботниковОрганизацийПоСовместительствуОшибки.Физлицо.Наименование ЕСТЬ NULL )";
		Если Не (СписокОрганизаций = Неопределено) Тогда
			Запрос.Текст = Запрос.Текст + "
	|	И ПериодыРаботыРаботниковОрганизацийПоСовместительствуОшибки.Организация В(&СписокОрганизаций)";
		КонецЕсли;
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыРаботыРаботниковОшибки) Тогда
	Запрос.Текст = Запрос.Текст + "
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ" + ?(НеОграничиватьСписокЗадач = Истина, "", " ПЕРВЫЕ "+мКоличествоЗадачВГруппе) + "
	|	ПериодыРаботыРаботниковОшибки.Физлицо,
	|	ПериодыРаботыРаботниковОшибки.Физлицо.Наименование,
	|	NULL,
	|	NULL,
	|	""ПериодыРаботыРаботниковОшибки"",
	|	&текущаяДата
	|ИЗ
	|	РегистрСведений.ПериодыРаботыРаботниковОшибки КАК ПериодыРаботыРаботниковОшибки
	|ГДЕ
	|	(НЕ ПериодыРаботыРаботниковОшибки.Физлицо.Наименование ЕСТЬ NULL )";
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыСостоянийРаботниковОрганизацийОшибки) Тогда
	Запрос.Текст = Запрос.Текст + "
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ" + ?(НеОграничиватьСписокЗадач = Истина, "", " ПЕРВЫЕ "+мКоличествоЗадачВГруппе) + "
	|	ПериодыСостоянийРаботниковОрганизацийОшибки.Сотрудник,
	|	ПериодыСостоянийРаботниковОрганизацийОшибки.Сотрудник.Наименование,
	|	NULL,
	|	NULL,
	|	""ПериодыСостоянийРаботниковОрганизацийОшибки"",
	|	&текущаяДата
	|ИЗ
	|	РегистрСведений.ПериодыСостоянийРаботниковОрганизацийОшибки КАК ПериодыСостоянийРаботниковОрганизацийОшибки";
		Если Не (СписокОрганизаций = Неопределено) Тогда
			Запрос.Текст = Запрос.Текст + "
	|ГДЕ
	|	ПериодыСостоянийРаботниковОрганизацийОшибки.Сотрудник.Организация В(&СписокГоловныхОрганизаций)";
		КонецЕсли;
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыСостоянийРаботниковОшибки) Тогда
	Запрос.Текст = Запрос.Текст + "
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ" + ?(НеОграничиватьСписокЗадач = Истина, "", " ПЕРВЫЕ "+мКоличествоЗадачВГруппе) + "
	|	ПериодыСостоянийРаботниковОшибки.Физлицо,
	|	ПериодыСостоянийРаботниковОшибки.Физлицо.Наименование,
	|	NULL,
	|	NULL,
	|	""ПериодыСостоянийРаботниковОшибки"",
	|	&текущаяДата
	|ИЗ
	|	РегистрСведений.ПериодыСостоянийРаботниковОшибки КАК ПериодыСостоянийРаботниковОшибки
	|ГДЕ
	|	(НЕ ПериодыСостоянийРаботниковОшибки.Физлицо.Наименование ЕСТЬ NULL )";
	КонецЕсли;
	
	Если	(ГруппаЗадач = Неопределено) ИЛИ (ГруппаЗадач = Перечисления.ГруппыЗадачПользователя.ОшибкиКадровыхПеремещений) Тогда
		КоличествоЗадач = 1;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ФИОСотрудника = СокрЛП(Выборка.Наименование);
			ПроцедурыУправленияПерсоналом.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ФИОСотрудника, 2, ФИОСотрудника);
			
			Если Выборка.ДополнительныеДанные = "ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботыОшибки" Тогда
				Текст = "Ошибки в документах приема на основное место работы";
				
			ИначеЕсли Выборка.ДополнительныеДанные = "ПериодыРаботыРаботниковОрганизацийПоСовместительствуОшибки" Тогда
				Текст = "Ошибки в документах приема по внешнему совместительству";
				
			ИначеЕсли Выборка.ДополнительныеДанные = "ПериодыРаботыРаботниковОшибки" Тогда
				Текст = "Ошибки в документах приема без договора";
				
			ИначеЕсли Выборка.ДополнительныеДанные = "ПериодыСостоянийРаботниковОрганизацийОшибки" Тогда
				Текст = "Ошибки в документах-отклонениях";
				
			ИначеЕсли Выборка.ДополнительныеДанные = "ПериодыСостоянийРаботниковОшибки" Тогда
				Текст = "Ошибки в документах-отклонениях";
				
			ИначеЕсли Выборка.ДополнительныеДанные = "ПериодыЗанятостиПомещенийОшибки" Тогда
				Текст = "Ошибки в документах резервирования помещений";
				
			Иначе
				Текст = "";
				
			КонецЕсли;
			
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ГруппаЗадач				= ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Перечисления.ГруппыЗадачПользователя.ОшибкиКадровыхПеремещений);
			НоваяЗадача.БольшеНеНапоминать		= Истина;
			НоваяЗадача.ТекстСписка				= Текст + " у " + ФИОСотрудника;
			НоваяЗадача.ТекстДерева				= Текст + " у " + ФИОСотрудника;
			НоваяЗадача.Действие1				= "Открыть список конфликтующих документов";
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.ОшибкиКадровыхПеремещений);
			ЗаполнитьЗначенияСвойств(НоваяЗадача, Выборка);
			
			КоличествоЗадач = КоличествоЗадач + 1;
			Если (НеОграничиватьСписокЗадач <> Истина) И (КоличествоЗадач > мКоличествоЗадачВГруппе-1) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если (НеОграничиватьСписокЗадач <> Истина) И (Выборка.Количество() > мКоличествоЗадачВГруппе-1) Тогда
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ГруппаЗадач				= "ПоказатьГруппуОшибкиКадровыхПеремещений";
			НоваяЗадача.ТекстСписка				= "Показать все ошибки кадровых перемещений...";
			НоваяЗадача.ТекстДерева				= "Показать все ошибки кадровых перемещений...";
			НоваяЗадача.Действие1				= "Показать все ошибки кадровых перемещений";
			НоваяЗадача.Гиперссылка				= Истина;
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.ОшибкиКадровыхПеремещений);
			НоваяЗадача.Период					= ТекущаяДата;
		КонецЕсли;
	КонецЕсли;
	
	// Производственный календарь
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегламентированныйПроизводственныйКалендарь.Год КАК Период
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.Год = ГОД(&АктуальныйПериодРегистрации)";
	
	Если	((ГруппаЗадач = Неопределено) ИЛИ (ГруппаЗадач = Перечисления.ГруппыЗадачПользователя.ПроизводственныйКалендарь)) 
			И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.РегламентированныйПроизводственныйКалендарь) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 0 Тогда
			НоваяЗадача = ЗадачиПользователя.Добавить();
			НоваяЗадача.ГруппаЗадач				= ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Перечисления.ГруппыЗадачПользователя.ПроизводственныйКалендарь);
			НоваяЗадача.ТекстСписка				= "Заполнить производственный календарь за " + Формат(Год(АктуальныйПериодРегистрации),"ЧЦ=4; ЧГ=0") + " год";
			НоваяЗадача.ТекстДерева				= "Заполнить за " + Формат(Год(АктуальныйПериодРегистрации),"ЧЦ=4; ЧГ=0") + " год";
			НоваяЗадача.Действие1				= "Заполнить";
			НоваяЗадача.ПриоритетГруппыЗадач	= Перечисления.ГруппыЗадачПользователя.Индекс(Перечисления.ГруппыЗадачПользователя.ПроизводственныйКалендарь);
			НоваяЗадача.Период					= НачалоГода(АктуальныйПериодРегистрации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // Автозаполнение()


Функция ПерезаполнениеДействие1(ДанныеСтроки) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОбъектЗаполнения", ДанныеСтроки.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаполнениеПлановыхНачислений.Сотрудник Как Сотрудник,
	|	ЗаполнениеПлановыхНачислений.Сотрудник.Физлицо Как Физлицо
	|ИЗ
	|	РегистрСведений.ЗаполнениеПлановыхНачислений КАК ЗаполнениеПлановыхНачислений
	|ГДЕ
	|	ЗаполнениеПлановыхНачислений.ОбъектЗаполнения = &ОбъектЗаполнения";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	//СписокСотрудников = Новый СписокЗначений;
	//СписокСотрудников.ЗагрузитьЗначения(ТаблицаЗапроса.ВыгрузитьКолонку("Сотрудник"));
	//
	//СписокФизЛиц = Новый СписокЗначений;
	//СписокФизЛиц.ЗагрузитьЗначения(ТаблицаЗапроса.ВыгрузитьКолонку("Физлицо"));
	
	Объект = ДанныеСтроки.Ссылка.ПолучитьОбъект();
	Объект.ВыполнитьПерезаполнениеПоВыбраннымСотрудникам(ТаблицаЗапроса.ВыгрузитьКолонку("Сотрудник"), ТаблицаЗапроса.ВыгрузитьКолонку("Физлицо"));
	
	Форма = Объект.ПолучитьФорму();
	Форма.Открыть();
	
	Возврат Перечисления.ГруппыЗадачПользователя.Перезаполнение;
	
КонецФункции // ПерезаполнениеДействие1()

Функция ПерезаполнениеДействие2(ДанныеСтроки) Экспорт
	
	Форма = ДанныеСтроки.Ссылка.ПолучитьФорму();
	Форма.Открыть();
	
	Возврат Неопределено;
	
КонецФункции // ПерезаполнениеДействие1()

Функция ПерезаполнениеБольшеНеНапоминать(ДанныеСтроки) Экспорт
	
	НаборЗаписей = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектЗаполнения.Установить(ДанныеСтроки.Ссылка);
	НаборЗаписей.Записать();
	
	Возврат Перечисления.ГруппыЗадачПользователя.Перезаполнение;
	
КонецФункции


Функция ДоначислениеДействие1(ДанныеСтроки) Экспорт
	
	ДополнительныеДанные = ЗначениеИзСтрокиВнутр(ДанныеСтроки.ДополнительныеДанные);
	
	Если ТипЗнч(ДополнительныеДанные) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаНачала		= ДополнительныеДанные.ДатаНачала;
	ДатаОкончания	= ДополнительныеДанные.ДатаОкончания;
	
	Сотрудник = ДанныеСтроки.Ссылка;
	СписокСотрудников = Новый Массив;
	СписокСотрудников.Добавить(Сотрудник);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудник",		Сотрудник);
	Запрос.УстановитьПараметр("ДатаНачала",		ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	ДатаОкончания);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Доначисления.Сотрудник КАК Ссылка,
	|	Доначисления.ПериодДействия КАК Период,
	|	Доначисления.ДатаНачала КАК ДатаНачала,
	|	Доначисления.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.ДоначисленияСотрудникам КАК Доначисления
	|ГДЕ
	|	Доначисления.Сотрудник = &Сотрудник
	|	И Доначисления.ДатаНачала = &ДатаНачала
	|	И Доначисления.ДатаОкончания = &ДатаОкончания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументДоначисление = Документы.НачислениеЗарплатыРаботникамОрганизаций.СоздатьДокумент();
	ДокументДоначисление.Организация					= Сотрудник.Организация;
	
	ОбщегоНазначения.ЗаполнитьШапкуДокумента(ДокументДоначисление, глЗначениеПеременной("глТекущийПользователь"));
	
	ДокументДоначисление.ПериодНачисления				= Перечисления.ПериодНачисленияЗарплаты.ПрошлыйПериод;
	ДокументДоначисление.ПериодНачисленияДатаНачала		= Выборка.ДатаНачала;
	ДокументДоначисление.ПериодНачисленияДатаОкончания	= Выборка.ДатаОкончания;
	ДокументДоначисление.ВыполнитьАвтозаполнение(
	ДокументДоначисление.ПериодНачисленияДатаНачала, 
	ДокументДоначисление.ПериодНачисленияДатаОкончания,,,,
	СписокСотрудников);
	
	ФормаДокумента = ДокументДоначисление.ПолучитьФорму();
	ФормаДокумента.Открыть();

	Возврат Неопределено;
	
КонецФункции // ДоначислениеДействие1(Ссылка)

Функция ДоначислениеДействие2(ДанныеСтроки) Экспорт
	
	Форма = ДанныеСтроки.Ссылка.ПолучитьФорму();
	Форма.Открыть();
	
	Возврат Неопределено;
	
КонецФункции // ПерезаполнениеДействие1()

Функция ДоначислениеБольшеНеНапоминать(ДанныеСтроки) Экспорт
	
	ДополнительныеДанные = ЗначениеИзСтрокиВнутр(ДанныеСтроки.ДополнительныеДанные);
	
	Если ТипЗнч(ДополнительныеДанные) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ДоначисленияСотрудникам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сотрудник.Установить(ДанныеСтроки.Ссылка);
	НаборЗаписей.Отбор.ДатаНачала.Установить(ДополнительныеДанные.ДатаНачала);
	НаборЗаписей.Отбор.ДатаОкончания.Установить(ДополнительныеДанные.ДатаОкончания);
	Если НаборЗаписей.Отбор.Сотрудник.Значение <> Неопределено Тогда
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	Возврат Перечисления.ГруппыЗадачПользователя.Доначисление;
	
КонецФункции // ДоначислениеБольшеНеНапоминать()


Функция ПерерасчетДействие1(ДанныеСтроки) Экспорт
	
	ДокументОбъект = ДанныеСтроки.Ссылка.ПолучитьОбъект();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументПерерасчета",	ДанныеСтроки.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 4
	|	ПерерассчитываемыеДокументы.Ссылка КАК Документ
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 4
	|		РасчетЕСНОсновныеНачисления.Ссылка КАК Ссылка
	|	ИЗ
	|		(ВЫБРАТЬ
	|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник.Физлицо КАК ФизЛицо,
	|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник КАК Сотрудник,
	|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация КАК Организация
	|		ИЗ
	|			Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
	|		ГДЕ
	|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка = &ДокументПерерасчета) КАК УсловияДокумента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетЕСН.ОсновныеНачисления КАК РасчетЕСНОсновныеНачисления
	|			ПО УсловияДокумента.Сотрудник = РасчетЕСНОсновныеНачисления.Сотрудник
	|				И УсловияДокумента.ПериодРегистрации = РасчетЕСНОсновныеНачисления.Ссылка.ПериодРегистрации
	|				И УсловияДокумента.Организация = РасчетЕСНОсновныеНачисления.Ссылка.Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 4
	|		ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
	|	ИЗ
	|		(ВЫБРАТЬ
	|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник.Физлицо КАК ФизЛицо,
	|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник КАК Сотрудник,
	|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация КАК Организация
	|		ИЗ
	|			Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
	|		ГДЕ
	|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка = &ДокументПерерасчета) КАК УсловияДокумента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|			ПО УсловияДокумента.Организация = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация
	|				И УсловияДокумента.ФизЛицо = ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
	|				И УсловияДокумента.ПериодРегистрации = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 4
	|		ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Ссылка
	|	ИЗ
	|		(ВЫБРАТЬ
	|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник.Физлицо КАК ФизЛицо,
	|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник КАК Сотрудник,
	|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация КАК Организация
	|		ИЗ
	|			Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
	|		ГДЕ
	|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка = &ДокументПерерасчета) КАК УсловияДокумента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтражениеЗарплатыВРеглУчете.ОсновныеНачисления КАК ОтражениеЗарплатыВРеглУчетеОсновныеНачисления
	|			ПО УсловияДокумента.Сотрудник = ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Сотрудник
	|				И УсловияДокумента.ПериодРегистрации = ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Ссылка.ПериодРегистрации
	|				И УсловияДокумента.Организация = ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Ссылка.Организация
	|	ГДЕ
	|		ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Ссылка <> NULL) КАК ПерерассчитываемыеДокументы
	|ГДЕ
	|	ПерерассчитываемыеДокументы.Ссылка ЕСТЬ НЕ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ДокументыТекст = "";
	НомерЗначенияЗапроса = 1;
	Пока Выборка.Следующий() Цикл
		Если НомерЗначенияЗапроса < 4 Тогда
			ДокументыТекст = ДокументыТекст + Символы.ПС + Строка(Выборка.Документ);
			НомерЗначенияЗапроса = НомерЗначенияЗапроса + 1;
		ИначеЕсли НомерЗначенияЗапроса = 4 Тогда
			ДокументыТекст = ДокументыТекст + " и другие..."
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	#Если Клиент Тогда
		Если НачалоМесяца(ДанныеСтроки.Период) = НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
			ТекстСообщения = "Вы уверены в том, что хотите перерассчитать документ " + Строка(ДокументОбъект) + "?";
		Иначе
			ТекстСообщения = "Вы уверены в том, что хотите перерассчитать документ " + Строка(ДокументОбъект) + " прошлым периодом?";
		КонецЕсли;
		ТекстСообщения = ТекстСообщения +
		?(ПустаяСтрока(ДокументыТекст),"", символы.ПС + "Выполнение этой операции приведет к необходимости пересмотреть документы:" + ДокументыТекст);
		Ответ = Вопрос(ТекстСообщения, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, "Предупреждение");
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Попытка
				ТекстСообщения = ПолучитьСообщениеОПерерасчетеСотрудников(ДанныеСтроки.Ссылка);
				ДокументОбъект.Перерассчитать();
				Если ТекстСообщения <> "" Тогда
					Предупреждение(ТекстСообщения,,"Перерасчет документа");
				КонецЕсли;
				Возврат Перечисления.ГруппыЗадачПользователя.Перерасчет;
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Документ " + Строка(ДокументОбъект) + " не может быть перерассчитан!
				|" + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	
	#Иначе
		Попытка
			ДокументОбъект.Перерассчитать();
			Возврат Перечисления.ГруппыЗадачПользователя.Перерасчет;
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Документ " + Строка(ДокументОбъект) + " не может быть перерассчитан!
			|" + ОписаниеОшибки());
		КонецПопытки;
		
	#КонецЕсли
	
	Возврат Неопределено;
	
КонецФункции

// Процедура выполняет ввод нового документа в текущем периоде на основании документа перерасчета
//
Функция ПерерасчетДействие2(ДанныеСтроки) Экспорт
	
	ТекущаяДата = ОбщегоНазначения.ПолучитьРабочуюДату();
	
	Если День(ТекущаяДата) < 20 Тогда
		ПериодРегистрации = НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -1));
	Иначе
		ПериодРегистрации = НачалоМесяца(ТекущаяДата);
	КонецЕсли;
	
	ФормаДокумента = Документы[Метаданные.НайтиПоТипу(ТипЗнч(ДанныеСтроки.Ссылка)).Имя].ПолучитьФормуНовогоДокумента(, , ДанныеСтроки.Организация);
	ФормаДокумента.Организация	= ДанныеСтроки.Организация;
	
	ОбщегоНазначения.ЗаполнитьШапкуДокумента(ФормаДокумента, глЗначениеПеременной("глТекущийПользователь"));
	
	ФормаДокумента.ПериодРегистрации				= ПериодРегистрации;
	ФормаДокумента.ПерерассчитываемыйДокумент		= ДанныеСтроки.Ссылка;
	Если ТипЗнч(ДанныеСтроки.Ссылка) = Тип("ДокументСсылка.НачислениеЗарплатыРаботникамОрганизаций") Тогда
		ФормаДокумента.ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПрошлыйПериод;
		ФормаДокумента.ПериодНачисленияДатаНачала = ДанныеСтроки.Ссылка.ПериодНачисленияДатаНачала;
		ФормаДокумента.ПериодНачисленияДатаОкончания = ДанныеСтроки.Ссылка.ПериодНачисленияДатаОкончания;
	КонецЕсли;
	ФормаДокумента.ЗаполнитьПоПерерассчитываемомуДокументу();
	ТекстСообщения = ПолучитьСообщениеОПерерасчетеСотрудников(ДанныеСтроки.Ссылка);
	
	ФормаДокумента.Открыть();
	
	#Если Клиент Тогда
	Если Не ПустаяСтрока(ТекстСообщения)  Тогда
		Предупреждение(ТекстСообщения,,"Перерасчет документа");
	КонецЕсли;
	#КонецЕсли
	
	Возврат Неопределено;
	
КонецФункции // ПерерасчетДействие2()

Функция ПерерасчетДействие3(ДанныеСтроки) Экспорт
	
	Форма = ДанныеСтроки.Ссылка.ПолучитьФорму();
	Форма.Открыть();
	
	Возврат Неопределено;
	
КонецФункции // ПерезаполнениеДействие1()

Функция ПерерасчетДействие4(ДанныеСтроки) Экспорт
	
	Форма = Обработки.ПерерасчетЗарплатыОрганизаций.ПолучитьФорму();
	
	Форма.Организация	= ДанныеСтроки.Организация;
	
	Форма.ЗаполнитьДанныеПоОрганизации();
	
	Форма.Открыть();
	
	Возврат Неопределено;
	
КонецФункции // ПерерасчетЗарплатыОрганизацийДействие1()

Функция ПерерасчетБольшеНеНапоминать(ДанныеСтроки) Экспорт
	
	ТипРегистратора = ТипЗнч(ДанныеСтроки.Ссылка);
	
	// Удаление записи из таблицы перерасчета расчета основных начислений
	НаборПерерасчета = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	Если НаборПерерасчета.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора) Тогда
		НаборПерерасчета.Отбор.ОбъектПерерасчета.Установить(ДанныеСтроки.Ссылка);
		НаборПерерасчета.Записать(Истина);
	КонецЕсли;
	
	// Удалиение записи из таблицы перерасчета расчета дополнительный начислений
	НаборПерерасчета = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
	Если НаборПерерасчета.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора) Тогда
		НаборПерерасчета.Отбор.ОбъектПерерасчета.Установить(ДанныеСтроки.Ссылка);
		НаборПерерасчета.Записать(Истина);
	КонецЕсли;
	
	// Удаление записи из таблицы перерасчета расчета среднего заработка
	НаборПерерасчета = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	Если НаборПерерасчета.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора) Тогда
		НаборПерерасчета.Отбор.ОбъектПерерасчета.Установить(ДанныеСтроки.Ссылка);
		НаборПерерасчета.Записать(Истина);
	КонецЕсли;
	
	НаборПерерасчета = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
	Если НаборПерерасчета.Отбор.ОбъектЗаполнения.ТипЗначения.СодержитТип(ТипРегистратора) Тогда
		НаборПерерасчета.Отбор.ОбъектЗаполнения.Установить(ДанныеСтроки.Ссылка);
		НаборПерерасчета.Записать(Истина);
	КонецЕсли;
	
	Возврат Перечисления.ГруппыЗадачПользователя.Перерасчет;
	
КонецФункции


Функция РасчетЗарплатыДействие1(ДанныеСтроки) Экспорт
	
	ТекущаяДата = ОбщегоНазначения.ПолучитьРабочуюДату();
	
	Если День(ТекущаяДата) < 20 Тогда
		ПериодРегистрации	= ДобавитьМесяц(НачалоМесяца(ТекущаяДата), -1);
	Иначе
		ПериодРегистрации	= НачалоМесяца(ТекущаяДата);
	КонецЕсли;
	
	Если ДанныеСтроки.Ссылка = Неопределено Тогда
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("АктуальныйПериодРегистрации",	ПериодРегистрации);
		Запрос.УстановитьПараметр("Организация",					ДанныеСтроки.Организация);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(НачислениеЗарплатыРаботникамОрганизаций.Ссылка) КАК Ссылка,
		|	НачислениеЗарплатыРаботникамОрганизаций.Организация КАК Организация
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций КАК НачислениеЗарплатыРаботникамОрганизаций
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизаций.ПериодРегистрации = &АктуальныйПериодРегистрации
		|	И НачислениеЗарплатыРаботникамОрганизаций.Организация = &Организация
		|	И (НЕ НачислениеЗарплатыРаботникамОрганизаций.ПометкаУдаления)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыРаботникамОрганизаций.Организация";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ФормаДокумента = Выборка.Ссылка.ПолучитьФорму();
			
		Иначе
			ФормаДокумента = Документы.НачислениеЗарплатыРаботникамОрганизаций.ПолучитьФормуНовогоДокумента(, , ДанныеСтроки.Организация);
			ФормаДокумента.Организация	= ДанныеСтроки.Организация;
			ФормаДокумента.Дата			= КонецМесяца(ПериодРегистрации) + 3600*12;
			
			ОбщегоНазначения.ЗаполнитьШапкуДокумента(ФормаДокумента, глЗначениеПеременной("глТекущийПользователь"));
			
			ФормаДокумента.ПериодРегистрации				= ПериодРегистрации;
			ФормаДокумента.ВидОперации						= Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет;
			ФормаДокумента.ПериодНачисления					= Перечисления.ПериодНачисленияЗарплаты.ТекущийМесяц;
			ФормаДокумента.ПериодНачисленияДатаНачала		= НачалоМесяца(ФормаДокумента.ПериодРегистрации);
			ФормаДокумента.ПериодНачисленияДатаОкончания	= КонецМесяца(ФормаДокумента.ПериодРегистрации);
			
		КонецЕсли;
		
	Иначе
		ФормаДокумента = ДанныеСтроки.Ссылка.ПолучитьФорму();
		
	КонецЕсли;
	
	ФормаДокумента.Открыть();
	
	Возврат Неопределено;
	
КонецФункции


Функция ДеньРожденияДействие1(ДанныеСтроки) Экспорт
	
	ФормаЭлемента = ДанныеСтроки.Ссылка.ПолучитьФорму();
	ФормаЭлемента.Открыть();
	
	Возврат Неопределено;
	
КонецФункции

Функция ДеньРожденияБольшеНеНапоминать(ДанныеСтроки) Экспорт
	
	мЗакрытыеДниРождения.Добавить(Новый Структура("Физлицо,ДеньРождения", ДанныеСтроки.Ссылка, ДанныеСтроки.Период));
	
	Возврат Перечисления.ГруппыЗадачПользователя.ДеньРождения;
	
КонецФункции


Функция РасчетЕСНДействие1(ДанныеСтроки) Экспорт
	
	ТекущаяДата = ОбщегоНазначения.ПолучитьРабочуюДату();
	
	Если День(ТекущаяДата) < 20 Тогда
		ПериодРегистрации = НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -1));
	Иначе
		ПериодРегистрации = НачалоМесяца(ТекущаяДата);
	КонецЕсли;
	
	Если ДанныеСтроки.Ссылка = Неопределено Тогда
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("АктуальныйПериодРегистрации",	ПериодРегистрации);
		Запрос.УстановитьПараметр("Организация",					ДанныеСтроки.Организация);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(РасчетЕСН.Ссылка) КАК Ссылка,
		|	РасчетЕСН.Организация КАК Организация
		|ИЗ
		|	Документ.РасчетЕСН КАК РасчетЕСН
		|ГДЕ
		|	РасчетЕСН.ПериодРегистрации = &АктуальныйПериодРегистрации
		|	И РасчетЕСН.Организация = &Организация
		|	И (НЕ РасчетЕСН.ПометкаУдаления)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетЕСН.Организация";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ФормаДокумента = Выборка.Ссылка.ПолучитьФорму();
			
		Иначе
			ФормаДокумента = Документы.РасчетЕСН.ПолучитьФормуНовогоДокумента(, , ДанныеСтроки.Организация);
			ФормаДокумента.Организация	= ДанныеСтроки.Организация;
			ФормаДокумента.Дата			= КонецМесяца(ПериодРегистрации) + 3600*12;
			
			ОбщегоНазначения.ЗаполнитьШапкуДокумента(ФормаДокумента, глЗначениеПеременной("глТекущийПользователь"));
			
			ФормаДокумента.ПериодРегистрации	= ПериодРегистрации;
			
		КонецЕсли;
		
	Иначе
		ФормаДокумента = ДанныеСтроки.Ссылка.ПолучитьФорму();
		
	КонецЕсли;
	
	ФормаДокумента.Открыть();
	
	Возврат Неопределено;
	
КонецФункции


Функция ОтражениеЗарплатыВУчетеДействие1(ДанныеСтроки) Экспорт
	
	ТекущаяДата = ОбщегоНазначения.ПолучитьРабочуюДату();
	
	Если День(ТекущаяДата) < 20 Тогда
		ПериодРегистрации = НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -1));
	Иначе
		ПериодРегистрации = НачалоМесяца(ТекущаяДата);
	КонецЕсли;
	
	Если ДанныеСтроки.Ссылка = Неопределено Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("АктуальныйПериодРегистрации",	ПериодРегистрации);
		Запрос.УстановитьПараметр("Организация",					ДанныеСтроки.Организация);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ОтражениеЗарплатыВРеглУчете.Ссылка) КАК Ссылка,
		|	ОтражениеЗарплатыВРеглУчете.Организация КАК Организация
		|ИЗ
		|	Документ.ОтражениеЗарплатыВРеглУчете КАК ОтражениеЗарплатыВРеглУчете
		|ГДЕ
		|	ОтражениеЗарплатыВРеглУчете.ПериодРегистрации = &АктуальныйПериодРегистрации
		|	И ОтражениеЗарплатыВРеглУчете.Организация = &Организация
		|	И (НЕ ОтражениеЗарплатыВРеглУчете.ПометкаУдаления)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтражениеЗарплатыВРеглУчете.Организация";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ФормаДокумента = Выборка.Ссылка.ПолучитьФорму();
			
		Иначе
			ФормаДокумента = Документы.ОтражениеЗарплатыВРеглУчете.ПолучитьФормуНовогоДокумента(, , ДанныеСтроки.Организация);
			ФормаДокумента.Организация	= ДанныеСтроки.Организация;
			ФормаДокумента.Дата			= КонецМесяца(ПериодРегистрации) + 3600*12;
			
			ОбщегоНазначения.ЗаполнитьШапкуДокумента(ФормаДокумента, глЗначениеПеременной("глТекущийПользователь"));
			
			ФормаДокумента.ПериодРегистрации	= ПериодРегистрации;
			
		КонецЕсли;
		
	Иначе
		ФормаДокумента = ДанныеСтроки.Ссылка.ПолучитьФорму();
		
	КонецЕсли;
	
	ФормаДокумента.Открыть();
	
	Возврат Неопределено;
	
КонецФункции


Функция НамеченныеСобытияПоПерсоналуОрганизацийДействие1(ДанныеСтроки) Экспорт
	
	ДополнительныеДанные = ЗначениеИзСтрокиВнутр(ДанныеСтроки.ДополнительныеДанные);
	
	Если ДополнительныеДанные.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.Увольнение 
	 ИЛИ ДополнительныеДанные.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.УвольнениеПослеИспытательногоСрока Тогда
		ФормаДокумента = Документы.УвольнениеИзОрганизаций.ПолучитьФормуНовогоДокумента(, , ДанныеСтроки.Организация);
		ФормаДокумента.Организация	= ДанныеСтроки.Организация;
		
		НоваяСтрока = ФормаДокумента.РаботникиОрганизации.Добавить();
		НоваяСтрока.Сотрудник		= ДанныеСтроки.Ссылка;
		НоваяСтрока.Физлицо			= ДанныеСтроки.Ссылка.Физлицо;
		НоваяСтрока.ДатаУвольнения	= ДанныеСтроки.Период;
		НоваяСтрока.СтатьяТКРФ		= Справочники.ОснованияУвольненияИзОрганизации.НайтиПоНаименованию("п. 2 ст. 77 ТК");
		
		ФормаДокумента.Открыть();
		
	ИначеЕсли ДополнительныеДанные.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.Перемещение Тогда
		ФормаДокумента = Документы.КадровоеПеремещениеОрганизаций.ПолучитьФормуНовогоДокумента(, , ДанныеСтроки.Организация);
		ФормаДокумента.Организация	= ДанныеСтроки.Организация;
		
		НоваяСтрока = ФормаДокумента.РаботникиОрганизации.Добавить();
		НоваяСтрока.Сотрудник					= ДанныеСтроки.Ссылка;
		НоваяСтрока.Физлицо			= ДанныеСтроки.Ссылка.Физлицо;
		НоваяСтрока.ДатаНачала					= ДанныеСтроки.Период;
		НоваяСтрока.ПодразделениеОрганизации	= ДополнительныеДанные.Подразделение;
		НоваяСтрока.Должность					= ДополнительныеДанные.Должность;
		НоваяСтрока.ЗанимаемыхСтавок			= ДополнительныеДанные.ЗанимаемыхСтавок;
		НоваяСтрока.ГрафикРаботы				= ДополнительныеДанные.ГрафикРаботы;
		
		Сотрудники = ФормаДокумента.РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
		ФормаДокумента.ДобавитьСтрокиНачисленийПоРаботнику(Сотрудники);
		
		ФормаДокумента.Открыть();
		
	ИначеЕсли ДополнительныеДанные.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.РезультатИспытательногоСрока Тогда
		ФормаДокумента = Документы.РезультатИспытательногоСрока.ПолучитьФормуНовогоДокумента(, , ДанныеСтроки.Организация);
		
		ФормаДокумента.Сотрудник		= ДанныеСтроки.Ссылка;
		ФормаДокумента.Физлицо			= ДанныеСтроки.Ссылка.Физлицо;
		ФормаДокумента.Результат		= Перечисления.РезультатыИспытательногоСрока.Положительный;
		ФормаДокумента.ДатаИзменения	= ДанныеСтроки.Период;
		
		ФормаДокумента.Открыть();
		
	Иначе
		ФормаДокумента = Документы.ВозвратНаРаботуОрганизаций.ПолучитьФормуНовогоДокумента(, , ДанныеСтроки.Организация);
		ФормаДокумента.Организация	= ДанныеСтроки.Организация;
		
		НоваяСтрока = ФормаДокумента.РаботникиОрганизации.Добавить();
		НоваяСтрока.Сотрудник		= ДанныеСтроки.Ссылка;
		НоваяСтрока.Физлицо			= ДанныеСтроки.Ссылка.Физлицо;
		НоваяСтрока.ДатаВозврата	= ДанныеСтроки.Период;
		
		ФормаДокумента.Открыть();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // НамеченныеСобытияПоПерсоналуОрганизацийДействие1()

Функция НамеченныеСобытияПоПерсоналуОрганизацийДействие2(ДанныеСтроки) Экспорт
	
	Форма = Обработки.ПоказНамеченныхСобытийПоПерсоналу.ПолучитьФорму();
	
	Форма.Организация	= ДанныеСтроки.Организация;
	Форма.ДатаНачала	= Бюджетирование.ДобавитьИнтервал(ОбщегоНазначения.ПолучитьРабочуюДату(), Перечисления.Периодичность.Неделя, -1);
	Форма.ДатаОкончания	= Бюджетирование.ДобавитьИнтервал(ОбщегоНазначения.ПолучитьРабочуюДату(), Перечисления.Периодичность.Месяц, 1);
	
	Форма.Результаты.Очистить();
	Форма.Автозаполнение();
	
	Форма.Открыть();
	
	Возврат Неопределено;
	
КонецФункции // ПоказНамеченныхСобытийПоПерсоналуДействие1()


Функция НамеченныеСобытияПоПерсоналуДействие1(ДанныеСтроки) Экспорт
	
	ДополнительныеДанные = ЗначениеИзСтрокиВнутр(ДанныеСтроки.ДополнительныеДанные);
	
	Если ДополнительныеДанные.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.Перемещение Тогда
		ФормаДокумента = Документы.КадровоеПеремещение.ПолучитьФормуНовогоДокумента(, , ДанныеСтроки.Организация);
		
		НоваяСтрока = ФормаДокумента.Работники.Добавить();
		НоваяСтрока.Сотрудник				= ДанныеСтроки.Ссылка;
		НоваяСтрока.Физлицо					= ДанныеСтроки.Ссылка.Физлицо;
		НоваяСтрока.ДатаНачала				= ДанныеСтроки.Период;
		НоваяСтрока.НовоеПодразделение		= ДополнительныеДанные.Подразделение;
		НоваяСтрока.НоваяДолжность			= ДополнительныеДанные.Должность;
		НоваяСтрока.ЗанимаемыхСтавок		= ДополнительныеДанные.ЗанимаемыхСтавок;
		НоваяСтрока.ГрафикРаботы			= ДополнительныеДанные.ГрафикРаботы;
		
		ФормаДокумента.Открыть();
		
	ИначеЕсли ДополнительныеДанные.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.РезультатИспытательногоСрока Тогда
		ФормаДокумента = Документы.РезультатИспытательногоСрока.ПолучитьФормуНовогоДокумента(, , ДанныеСтроки.Организация);
		
		ФормаДокумента.Сотрудник		= ДанныеСтроки.Ссылка;
		ФормаДокумента.Физлицо			= ДанныеСтроки.Ссылка.Физлицо;
		ФормаДокумента.Результат		= Перечисления.РезультатыИспытательногоСрока.Положительный;
		ФормаДокумента.ДатаИзменения	= ДанныеСтроки.Период;
		
		ФормаДокумента.Открыть();
		
	ИначеЕсли ДополнительныеДанные.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.Увольнение Тогда
		ФормаДокумента = Документы.Увольнение.ПолучитьФормуНовогоДокумента(, , ДанныеСтроки.Организация);
		
		НоваяСтрока = ФормаДокумента.Работники.Добавить();
		НоваяСтрока.Сотрудник			= ДанныеСтроки.Ссылка;
		НоваяСтрока.Физлицо				= ДанныеСтроки.Ссылка.Физлицо;
		НоваяСтрока.ДатаУвольнения		= ДанныеСтроки.Период;
		НоваяСтрока.ПричинаУвольнения	= Справочники.ОснованияУвольнения.ПоСобственномуЖеланию;
		
		ФормаДокумента.Открыть();
		
	ИначеЕсли ДополнительныеДанные.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.УвольнениеПослеИспытательногоСрока Тогда
		ФормаДокумента = Документы.Увольнение.ПолучитьФормуНовогоДокумента(, , ДанныеСтроки.Организация);
		
		НоваяСтрока = ФормаДокумента.Работники.Добавить();
		НоваяСтрока.Сотрудник			= ДанныеСтроки.Ссылка;
		НоваяСтрока.Физлицо				= ДанныеСтроки.Ссылка.Физлицо;
		НоваяСтрока.ДатаУвольнения		= ДанныеСтроки.Период;
		НоваяСтрока.ПричинаУвольнения	= Справочники.ОснованияУвольнения.НеПрошелИспытательныйСрок;
		
		ФормаДокумента.Открыть();
		
	Иначе
		ФормаДокумента = Документы.ВозвратНаРаботу.ПолучитьФормуНовогоДокумента(, , ДанныеСтроки.Организация);
		
		НоваяСтрока = ФормаДокумента.Работники.Добавить();
		НоваяСтрока.Сотрудник		= ДанныеСтроки.Ссылка;
		НоваяСтрока.Физлицо			= ДанныеСтроки.Ссылка.Физлицо;
		НоваяСтрока.ДатаВозврата	= ДанныеСтроки.Период;
		
		ФормаДокумента.Открыть();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // НамеченныеСобытияПоПерсоналуДействие1()

Функция НамеченныеСобытияПоПерсоналуДействие2(ДанныеСтроки) Экспорт
	
	Форма = Обработки.ПоказНамеченныхСобытийПоПерсоналу.ПолучитьФорму();
	
	Форма.ДатаНачала	= Бюджетирование.ДобавитьИнтервал(ОбщегоНазначения.ПолучитьРабочуюДату(), Перечисления.Периодичность.Неделя, -1);
	Форма.ДатаОкончания	= Бюджетирование.ДобавитьИнтервал(ОбщегоНазначения.ПолучитьРабочуюДату(), Перечисления.Периодичность.Месяц, 1);
	
	Форма.Результаты.Загрузить(Форма.ВыбратьНамеченныеИзменения(Форма.ДатаНачала, Форма.ДатаОкончания));
	
	Форма.Открыть();
	
	Возврат Неопределено;
	
КонецФункции // ПоказНамеченныхСобытийПоПерсоналуДействие1()

Функция ПоказНамеченныхСобытийПоПерсоналуДействие1(ДанныеСтроки) Экспорт
	
	мСпособОтображенияЗадач.Вставить(Перечисления.ГруппыЗадачПользователя.НамеченныеСобытияПоПерсоналу, Истина);
	
	Возврат Перечисления.ГруппыЗадачПользователя.НамеченныеСобытияПоПерсоналу;
	
КонецФункции // ПоказНамеченныхСобытийПоПерсоналуДействие1()


Функция НапоминанияДействие1(ДанныеСтроки) Экспорт
	
	ФормаДокумента = ДанныеСтроки.Ссылка.ПолучитьФорму();
	ФормаДокумента.Открыть();
	
	Возврат Неопределено;
	
КонецФункции

Функция НапоминанияБольшеНеНапоминать(ДанныеСтроки) Экспорт
	
	Док = ДанныеСтроки.Ссылка.ПолучитьОбъект();
	Док.НапомнитьОСобытии = Ложь;
	Док.Записать();
	
	Возврат Перечисления.ГруппыЗадачПользователя.Напоминания;
	
КонецФункции


Функция ОшибкиКадровыхПеремещенийДействие1(ДанныеСтроки) Экспорт
	
	Запрос = Новый Запрос;
	
	Форма = ПолучитьОбщуюФорму("ФормаОшибокКадровыхПеремещений", , ЭтотОбъект);
	Форма.Ошибки.Очистить();
	
	Если ДанныеСтроки.ДополнительныеДанные = "ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботыОшибки" Тогда
		МассивСотрудники = Новый Массив;
		МассивСотрудники.Добавить(ДанныеСтроки.Ссылка);
		
		СообщенияОбОшибках = Новый Массив;
		
		ОбщегоНазначения.ПолучитьОшибкиПериодовРаботыСотрудникаПоОсновномуМестуРаботы(НеОпределено, Истина, МассивСотрудники, СообщенияОбОшибках, НеОпределено);
		Регистраторы = Новый Соответствие();
		Для Каждого Сообщение Из СообщенияОбОшибках Цикл
			Если Сообщение.Регистратор1Ссылка <> null И Регистраторы[Сообщение.Регистратор1Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.Регистратор1Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.Регистратор1Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаНачала;
			КонецЕсли;
			Если Сообщение.Регистратор2Ссылка <> null И Регистраторы[Сообщение.Регистратор2Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.Регистратор2Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.Регистратор2Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаОкончания;
			КонецЕсли;
			Если Сообщение.ПослРегистратор1Ссылка <> null И Регистраторы[Сообщение.ПослРегистратор1Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.ПослРегистратор1Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.ПослРегистратор1Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаОкончания;
			КонецЕсли;
			Если Сообщение.ПослРегистратор2Ссылка <> null И Регистраторы[Сообщение.ПослРегистратор2Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.ПослРегистратор2Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.ПослРегистратор2Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаОкончания;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ДанныеСтроки.ДополнительныеДанные = "ПериодыРаботыРаботниковОрганизацийПоСовместительствуОшибки" Тогда
		МассивСотрудники = Новый Массив;
		МассивСотрудники.Добавить(ДанныеСтроки.Ссылка);
		
		СообщенияОбОшибках = Новый Массив;
		
		ОбщегоНазначения.ПолучитьОшибкиПериодовРаботыСотрудникаПоСовместительству(НеОпределено, Истина, МассивСотрудники, ДанныеСтроки.Организация, СообщенияОбОшибках, НеОпределено);
		Регистраторы = Новый Соответствие();
		Для Каждого Сообщение Из СообщенияОбОшибках Цикл
			Если Сообщение.Регистратор1Ссылка <> null И Регистраторы[Сообщение.Регистратор1Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.Регистратор1Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.Регистратор1Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаНачала;
			КонецЕсли;
			Если Сообщение.Регистратор2Ссылка <> null И Регистраторы[Сообщение.Регистратор2Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.Регистратор2Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.Регистратор2Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаОкончания;
			КонецЕсли;
			Если Сообщение.ПослРегистратор1Ссылка <> null И Регистраторы[Сообщение.ПослРегистратор1Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.ПослРегистратор1Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.ПослРегистратор1Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаОкончания;
			КонецЕсли;
			Если Сообщение.ПослРегистратор2Ссылка <> null И Регистраторы[Сообщение.ПослРегистратор2Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.ПослРегистратор2Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.ПослРегистратор2Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаОкончания;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ДанныеСтроки.ДополнительныеДанные = "ПериодыРаботыРаботниковОшибки" Тогда
		МассивСотрудники = Новый Массив;
		МассивСотрудники.Добавить(ДанныеСтроки.Ссылка);
		
		СообщенияОбОшибках = Новый Массив;
		
		ОбщегоНазначения.ПолучитьОшибкиПериодовРаботыСотрудникаБезДоговора(НеОпределено, Истина, МассивСотрудники, СообщенияОбОшибках, НеОпределено);
		Регистраторы = Новый Соответствие();
		Для Каждого Сообщение Из СообщенияОбОшибках Цикл
			Если Сообщение.Регистратор1Ссылка <> null И Регистраторы[Сообщение.Регистратор1Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.Регистратор1Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.Регистратор1Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаНачала;
			КонецЕсли;
			Если Сообщение.Регистратор2Ссылка <> null И Регистраторы[Сообщение.Регистратор2Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.Регистратор2Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.Регистратор2Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаОкончания;
			КонецЕсли;
			Если Сообщение.ПослРегистратор1Ссылка <> null И Регистраторы[Сообщение.ПослРегистратор1Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.ПослРегистратор1Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.ПослРегистратор1Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаОкончания;
			КонецЕсли;
			Если Сообщение.ПослРегистратор2Ссылка <> null И Регистраторы[Сообщение.ПослРегистратор2Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.ПослРегистратор2Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.ПослРегистратор2Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаОкончания;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ДанныеСтроки.ДополнительныеДанные = "ПериодыСостоянийРаботниковОрганизацийОшибки" Тогда
		МассивСотрудники = Новый Массив;
		МассивСотрудники.Добавить(ДанныеСтроки.Ссылка);
		
		СообщенияОбОшибках = Новый Массив;
		
		ОбщегоНазначения.ПолучитьОшибкиПериодовСостоянияСотрудника(НеОпределено, Истина, МассивСотрудники, СообщенияОбОшибках, НеОпределено);
		Регистраторы = Новый Соответствие();
		Для Каждого Сообщение Из СообщенияОбОшибках Цикл
			Если Сообщение.Регистратор1Ссылка <> null И Регистраторы[Сообщение.Регистратор1Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.Регистратор1Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.Регистратор1Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаНачала;
			КонецЕсли;
			Если Сообщение.Регистратор2Ссылка <> null И Регистраторы[Сообщение.Регистратор2Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.Регистратор2Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.Регистратор2Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаОкончания;
			КонецЕсли;
			Если Сообщение.ПослРегистратор1Ссылка <> null И Регистраторы[Сообщение.ПослРегистратор1Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.ПослРегистратор1Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.ПослРегистратор1Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаОкончания;
			КонецЕсли;
			Если Сообщение.ПослРегистратор2Ссылка <> null И Регистраторы[Сообщение.ПослРегистратор2Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.ПослРегистратор2Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.ПослРегистратор2Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаОкончания;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ДанныеСтроки.ДополнительныеДанные = "ПериодыСостоянийРаботниковОшибки" Тогда
		МассивСотрудники = Новый Массив;
		МассивСотрудники.Добавить(ДанныеСтроки.Ссылка);
		
		СообщенияОбОшибках = Новый Массив;
		
		ОбщегоНазначения.ПолучитьОшибкиПериодовСостоянияСотрудникаБезДоговора(НеОпределено, Истина, МассивСотрудники, СообщенияОбОшибках, НеОпределено);
		Регистраторы = Новый Соответствие();
		Для Каждого Сообщение Из СообщенияОбОшибках Цикл
			Если Сообщение.Регистратор1Ссылка <> null И Регистраторы[Сообщение.Регистратор1Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.Регистратор1Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.Регистратор1Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаНачала;
			КонецЕсли;
			Если Сообщение.Регистратор2Ссылка <> null И Регистраторы[Сообщение.Регистратор2Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.Регистратор2Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.Регистратор2Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаОкончания;
			КонецЕсли;
			Если Сообщение.ПослРегистратор1Ссылка <> null И Регистраторы[Сообщение.ПослРегистратор1Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.ПослРегистратор1Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.ПослРегистратор1Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаОкончания;
			КонецЕсли;
			Если Сообщение.ПослРегистратор2Ссылка <> null И Регистраторы[Сообщение.ПослРегистратор2Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.ПослРегистратор2Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.ПослРегистратор2Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаОкончания;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ДанныеСтроки.ДополнительныеДанные = "ПериодыЗанятостиПомещенийОшибки" Тогда
		МассивСотрудники = Новый Массив;
		МассивСотрудники.Добавить(ДанныеСтроки.Ссылка);
		
		СообщенияОбОшибках = Новый Массив;
		
		ОбщегоНазначения.ПолучитьОшибкиПериодовЗанятостиПомещения(НеОпределено, Истина, МассивСотрудники, СообщенияОбОшибках, НеОпределено);
		Регистраторы = Новый Соответствие();
		Для Каждого Сообщение Из СообщенияОбОшибках Цикл
			Если Сообщение.Регистратор1Ссылка <> null И Регистраторы[Сообщение.Регистратор1Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.Регистратор1Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.Регистратор1Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаНачала;
			КонецЕсли;
			Если Сообщение.Регистратор2Ссылка <> null И Регистраторы[Сообщение.Регистратор2Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.Регистратор2Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.Регистратор2Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаОкончания;
			КонецЕсли;
			Если Сообщение.ПослРегистратор1Ссылка <> null И Регистраторы[Сообщение.ПослРегистратор1Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.ПослРегистратор1Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.ПослРегистратор1Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаОкончания;
			КонецЕсли;
			Если Сообщение.ПослРегистратор2Ссылка <> null И Регистраторы[Сообщение.ПослРегистратор2Ссылка] = НеОпределено Тогда
				Регистраторы[Сообщение.ПослРегистратор2Ссылка] = 0;
				Строка = Форма.Ошибки.Добавить();
				Строка.Документ = Сообщение.ПослРегистратор2Ссылка;
				Строка.ДатаСобытия = Сообщение.ДатаОкончания;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
	Форма.Открыть();
	
	Возврат Неопределено;
	
КонецФункции

Функция ОшибкиКадровыхПеремещенийБольшеНеНапоминать(ДанныеСтроки) Экспорт
	
	Если ДанныеСтроки.ДополнительныеДанные = "ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботыОшибки" Тогда
		НаборОшибокПериодов = РегистрыСведений.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботыОшибки.СоздатьНаборЗаписей();
		НаборОшибокПериодов.Отбор.Физлицо.Установить(ДанныеСтроки.Ссылка);
		НаборОшибокПериодов.Записать(Истина);
	
	ИначеЕсли ДанныеСтроки.ДополнительныеДанные = "ПериодыРаботыРаботниковОрганизацийПоСовместительствуОшибки" Тогда
		НаборОшибокПериодов = РегистрыСведений.ПериодыРаботыРаботниковОрганизацийПоСовместительствуОшибки.СоздатьНаборЗаписей();
		НаборОшибокПериодов.Отбор.Физлицо.Установить(ДанныеСтроки.Ссылка);
		НаборОшибокПериодов.Отбор.Организация.Установить(ДанныеСтроки.Организация);
		НаборОшибокПериодов.Записать(Истина);
	
	ИначеЕсли ДанныеСтроки.ДополнительныеДанные = "ПериодыРаботыРаботниковОшибки" Тогда
		НаборОшибокПериодов = РегистрыСведений.ПериодыРаботыРаботниковОшибки.СоздатьНаборЗаписей();
		НаборОшибокПериодов.Отбор.Физлицо.Установить(ДанныеСтроки.Ссылка);
		НаборОшибокПериодов.Записать(Истина);
	
	ИначеЕсли ДанныеСтроки.ДополнительныеДанные = "ПериодыСостоянийРаботниковОрганизацийОшибки" Тогда
		НаборОшибокПериодов = РегистрыСведений.ПериодыСостоянийРаботниковОрганизацийОшибки.СоздатьНаборЗаписей();
		НаборОшибокПериодов.Отбор.Сотрудник.Установить(ДанныеСтроки.Ссылка);
		НаборОшибокПериодов.Записать(Истина);
	
	ИначеЕсли ДанныеСтроки.ДополнительныеДанные = "ПериодыСостоянийРаботниковОшибки" Тогда
		НаборОшибокПериодов = РегистрыСведений.ПериодыСостоянийРаботниковОшибки.СоздатьНаборЗаписей();
		НаборОшибокПериодов.Отбор.Физлицо.Установить(ДанныеСтроки.Ссылка);
		НаборОшибокПериодов.Записать(Истина);
		
	КонецЕсли;
	
	Возврат Перечисления.ГруппыЗадачПользователя.ОшибкиКадровыхПеремещений;
	
КонецФункции


Функция ПроизводственныйКалендарьДействие1(ДанныеСтроки) Экспорт
	
	Форма = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.ПолучитьФормуСписка();
	
	Форма.Открыть();
	
	Возврат Неопределено;
	
КонецФункции // ПоказНамеченныхСобытийПоПерсоналуДействие1()

Функция ПроизводственныйКалендарьБольшеНеНапоминать(ДанныеСтроки) Экспорт
	
	мСпособОтображенияЗадач.Вставить(Перечисления.ГруппыЗадачПользователя.ПроизводственныйКалендарь, Истина);
	
	Возврат Перечисления.ГруппыЗадачПользователя.ПроизводственныйКалендарь;
	
КонецФункции


Функция ПоказатьГруппу(ДанныеСтроки) Экспорт
	
	ГруппаЗадач = Перечисления.ГруппыЗадачПользователя[ДанныеСтроки.ПриоритетГруппыЗадач];
	
	мСпособОтображенияЗадач.Вставить(ГруппаЗадач, Истина);
	
	Возврат ГруппаЗадач;
	
КонецФункции // ПерерасчетЗарплатыОрганизацийДействие1()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// функция формирует сообщение с именами сотрудников, по которым произведен 
// перерасчет
Функция ПолучитьСообщениеОПерерасчетеСотрудников(ДокументПерерасчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументПерерасчета);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 4
	|	ПРЕДСТАВЛЕНИЕ(СотрудникиПерерасчета.ФизЛицо) КАК ПредставлениеФизЛица
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОсновныеНачисленияРаботниковОрганизацийПерерасчетОсновныхНачислений.ФизЛицо КАК ФизЛицо
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК ОсновныеНачисленияРаботниковОрганизацийПерерасчетОсновныхНачислений
	|	ГДЕ
	|		ОсновныеНачисленияРаботниковОрганизацийПерерасчетОсновныхНачислений.ОбъектПерерасчета = &ДокументСсылка
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДополнительныеНачисленияРаботниковОрганизацийПерерасчетДополнительныхНачислений.ФизЛицо
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК ДополнительныеНачисленияРаботниковОрганизацийПерерасчетДополнительныхНачислений
	|	ГДЕ
	|		ДополнительныеНачисленияРаботниковОрганизацийПерерасчетДополнительныхНачислений.ОбъектПерерасчета = &ДокументСсылка
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетСреднегоЗаработкаПерерасчетСреднегоЗаработка.Физлицо
	|	ИЗ
	|		РегистрРасчета.РасчетСреднегоЗаработка.ПерерасчетСреднегоЗаработка КАК РасчетСреднегоЗаработкаПерерасчетСреднегоЗаработка
	|	ГДЕ
	|		РасчетСреднегоЗаработкаПерерасчетСреднегоЗаработка.ОбъектПерерасчета = &ДокументСсылка) КАК СотрудникиПерерасчета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоСотрудников = 0;
	ТекстСообщения = "Документ перерассчитан. Изменились результаты расчета сотрудников:";
	Пока Выборка.Следующий() И КоличествоСотрудников < 4 Цикл
		ТекстСообщения = ТекстСообщения + " " + Выборка.ПредставлениеФизЛица + ",";
		КоличествоСотрудников = КоличествоСотрудников + 1;
	КонецЦикла;
	ТекстСообщения = Лев(ТекстСообщения, СтрДлина(ТекстСообщения) - 1);
	Если Выборка.Количество() > 3 Тогда
		ТекстСообщения = ТекстСообщения + " и других...";
	КонецЕсли;
	Если Выборка.Количество() > 0 Тогда
		Возврат ТекстСообщения;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции // ПолучитьСообщениеОПерерасчетеСотрудников()


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСпособОтображенияЗадач = Новый Соответствие;

мКоличествоЗадачВГруппе = 8;
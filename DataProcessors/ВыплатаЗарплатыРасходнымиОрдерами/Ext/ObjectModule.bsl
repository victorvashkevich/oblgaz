////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Производит автозаполнение табличной части РКО
//
Процедура Автозаполнение() Экспорт
		
	ТекстЗапрос = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплатеОрганизаций.Физлицо,
	|	ЕСТЬNULL(ЕСТЬNULL(РасходныйКассовыйОрдер.Ссылка, РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка), &ПустойРКО) КАК РКО,
	|	(НЕ ЕСТЬNULL(ЕСТЬNULL(РасходныйКассовыйОрдер.Проведен, РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Проведен), ЛОЖЬ)) КАК Отметка,
	|	СУММА(ЗарплатаКВыплатеОрганизаций.Сумма + ЗарплатаКВыплатеОрганизаций.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ПО ЗарплатаКВыплатеОрганизаций.Ссылка = РасходныйКассовыйОрдер.ПлатежнаяВедомость
	|			И ЗарплатаКВыплатеОрганизаций.Физлицо = РасходныйКассовыйОрдер.Контрагент
	|			И (РасходныйКассовыйОрдер.ВидОперации = &ВыплатаЗаработнойПлатыРаботнику)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	|		ПО ЗарплатаКВыплатеОрганизаций.Ссылка = РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость
	|			И (РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ВидОперации = &ВыплатаЗаработнойПлатыПоВедомостям)
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизаций.ВыплаченностьЗарплаты = &Выплачено
	|	И ЗарплатаКВыплатеОрганизаций.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизаций.Физлицо,
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка";	
	
	Запрос = Новый Запрос(ТекстЗапрос);
	Запрос.УстановитьПараметр("Ссылка",ПлатежнаяВедомость);
	Запрос.УстановитьПараметр("ПустойРКО",Документы.РасходныйКассовыйОрдер.ПустаяСсылка());
	Запрос.УстановитьПараметр("Выплачено",Перечисления.ВыплаченностьЗарплаты.Выплачено);
	Запрос.УстановитьПараметр("ВыплатаЗаработнойПлатыРаботнику",Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику);
	Запрос.УстановитьПараметр("ВыплатаЗаработнойПлатыПоВедомостям",Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям);
	         
	РКО.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // Автозаполнение()

// Создает документы РКО по отмеченным строкам
//
// Параметры
//  нет
//
Процедура СоздатьРКО() Экспорт

	НетДаты = Ложь;
	Если Не ЗначениеЗаполнено(ДатаРКО) Тогда
		НетДаты = Истина
	КонецЕсли;
	
	НетНомера = Ложь;
	Если Не ЗначениеЗаполнено(НомерПервогоРКО) Тогда
		НетНомера = Истина;
	КонецЕсли;
	
	Если НетДаты Или НетНомера Тогда
		ТекстСообщения = "";
		Если НетНомера Тогда
			ТекстСообщения = ТекстСообщения + "Не указан номер, начиная с которого следует нумеровать РКО!";
		КонецЕсли;
		Если НетДаты Тогда
			ТекстСообщения = ТекстСообщения + ?(НетНомера,Символы.ПС,"") + "Не указана дата, которой регистрируются РКО!";
		КонецЕсли;
		Возврат
	КонецЕсли;
			
	ЭтоПервыйДокумент = Истина;
	
	Для Каждого СтрокаТаблицы Из РКО Цикл
		
		Если СтрокаТаблицы.Отметка И НЕ ЗначениеЗаполнено(СтрокаТаблицы.РКО) Тогда
			
			ДокументРКО = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокументРКО.Дата		 		= ДатаРКО;
			ДокументРКО.ВидОперации			= Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику;
			ДокументРКО.Контрагент			= СтрокаТаблицы.ФизЛицо;
			ДокументРКО.ЗаполнитьПоляВыдатьПоДокументу(СтрокаТаблицы.ФизЛицо);
			ДокументРКО.ПлатежнаяВедомость	= ПлатежнаяВедомость;
			ДокументРКО.Основание			= Основание;
			ДокументРКО.Приложение			= Приложение;
			ДокументРКО.Организация			= Организация;
			ОбщегоНазначения.ЗаполнитьШапкуДокумента(ДокументРКО,глЗначениеПеременной("глТекущийПользователь"));
			Если ЭтоПервыйДокумент Тогда
				ЭтоПервыйДокумент = Ложь;
				ТекущийНомерРКО = НомерПервогоРКО;
			Иначе
				ТекущийНомерРКО = ПроцедурыУправленияПерсоналом.ПолучитьСледующийНомер(ТекущийНомерРКО);
			КонецЕсли;
			ДокументРКО.Номер = ТекущийНомерРКО;
			
			ДокументРКО.Записать();
			
			СтрокаТаблицы.РКО = ДокументРКО.Ссылка;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // СоздатьРКО()

// Проводит РКО по отмеченным строкам
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   булево - удачно ли произведено действие
//
Функция ПровестиРКО() Экспорт

	Отказ = Ложь;

	Для Каждого СтрокаТаблицы Из РКО Цикл
		Если СтрокаТаблицы.Отметка и ЗначениеЗаполнено(СтрокаТаблицы.РКО) Тогда
			ДокументРКО = СтрокаТаблицы.РКО.ПолучитьОбъект();
			Если ДокументРКО.ПометкаУдаления Тогда
				ДокументРКО.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			Попытка
				ДокументРКО.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось провести документ: " + Строка(ДокументРКО),Отказ);
			КонецПопытки;
			СтрокаТаблицы.Отметка = Не СтрокаТаблицы.Отметка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Не Отказ
	
КонецФункции // ПровестиРКО()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	|	Организация, 
	|	ВЫБОР КОГДА Организация.ГоловнаяОрганизация = &ПустаяОрганизация ТОГДА Организация ИНАЧЕ Организация.ГоловнаяОрганизация КОНЕЦ КАК ГоловнаяОрганизация,
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличным частям документам
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоТабличнымЧастям(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("СтавкаНалогообложения13" , Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""НДФЛСведенияОДоходах"" КАК ВидСтрокиЗапроса,
	|	НДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.НомерСтроки,
	|	НДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.ФизЛицо,
	|	НДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.МесяцНалоговогоПериода,
	|	НДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.ПериодРегистрации,
	|	НДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.КодДохода,
	|	НДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.СуммаДохода,
	|	НДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.КодВычета,
	|	НДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.СуммаВычета,
	|	НДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.СуммаНалогаИсчисленная КАК СуммаНалога,
	|	НДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	//|	НДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.КПП КАК КПП,
	//|	НДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.КодПоОКАТО КАК КодПоОКАТО,
	|	NULL КАК ПримененныйВычетЛичный,
	|	NULL КАК ПримененныйВычетНаДетей,
	|	NULL КАК ПримененныйВычетНаДетейЛьгота,
	|	NULL КАК ПримененныйВычетДополнительный,
	|	NULL КАК ПримененныйВычетИмущественныйРасход,
	|	NULL КАК ПримененныйВычетСоциальный,
	|	NULL КАК ПримененныйВычетСтраховойРасход
	|ИЗ
	|	Документ.НДФЛиЕСНДоходыИНалоги.НДФЛСведенияОДоходах КАК НДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах
	|ГДЕ
	|	НДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""НДФЛИсчисленный13"",
	|	НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.НомерСтроки,
	|	НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.ФизЛицо,
	|	НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.МесяцНалоговогоПериода,
	|	НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.ПериодРегистрации,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.Налог,
	|	&СтавкаНалогообложения13,
	//|	НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.КПП,
	//|	НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.КодПоОКАТО,
	|	НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.ПримененныйВычетЛичный,
	|	НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.ПримененныйВычетНаДетей,
	|	НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.ПримененныйВычетНаДетейЛьгота,
	|	НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.ПримененныйВычетДополнительный,
	|	НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.ПримененныйВычетИмущественныйРасход,
	|	НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.ПримененныйВычетСоциальный,
	|	НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.ПримененныйВычетСтраховойРасход
	|ИЗ
	|	Документ.НДФЛиЕСНДоходыИНалоги.НДФЛИсчисленный13 КАК НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13
	|ГДЕ
	|	НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""НДФЛУдержанный"",
	|	НДФЛиЕСНДоходыИНалогиНДФЛУдержанный.НомерСтроки,
	|	НДФЛиЕСНДоходыИНалогиНДФЛУдержанный.ФизЛицо,
	|	НДФЛиЕСНДоходыИНалогиНДФЛУдержанный.МесяцНалоговогоПериода,
	|	НДФЛиЕСНДоходыИНалогиНДФЛУдержанный.ПериодРегистрации,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	НДФЛиЕСНДоходыИНалогиНДФЛУдержанный.Налог,
	|	НДФЛиЕСНДоходыИНалогиНДФЛУдержанный.СтавкаНалогообложения,
	//|	НДФЛиЕСНДоходыИНалогиНДФЛУдержанный.КПП,
	//|	НДФЛиЕСНДоходыИНалогиНДФЛУдержанный.КодПоОКАТО,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.НДФЛиЕСНДоходыИНалоги.НДФЛУдержанный КАК НДФЛиЕСНДоходыИНалогиНДФЛУдержанный
	|ГДЕ
	|	НДФЛиЕСНДоходыИНалогиНДФЛУдержанный.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 		 - флаг отказа в проведении,
//	Заголовок	 - Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строки документа.
Процедура ПроверитьЗаполнениеСтрокиТЧ(ВыборкаПоТЧ, Отказ, Заголовок)

	Если ВыборкаПоТЧ.ВидСтрокиЗапроса = "НДФЛСведенияОДоходах" Тогда
		
		НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоТЧ.НомерСтроки) +
									""" табл. части ""Доходы и налоги"": ";
									
		Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.ФизЛицо) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указано физическое лицо!", Отказ, Заголовок);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.МесяцНалоговогоПериода) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указана дата получения дохода!", Отказ, Заголовок);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ВыборкаПоТЧ.ПериодРегистрации) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указан период регистрации дохода!", Отказ, Заголовок);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.КодДохода) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указан код дохода!", Отказ, Заголовок);
		КонецЕсли;
	
	ИначеЕсли ВыборкаПоТЧ.ВидСтрокиЗапроса = "НДФЛИсчисленный13" Тогда
		
		НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоТЧ.НомерСтроки) +
									""" табл. части ""Налог по прогресс.шкале"": ";
									
		Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.ФизЛицо) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указано физическое лицо!", Отказ, Заголовок);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.МесяцНалоговогоПериода) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указан месяц налогового периода!", Отказ, Заголовок);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.ПериодРегистрации) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указан период регистрации!", Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоТЧ.ВидСтрокиЗапроса = "НДФЛУдержанный" Тогда
		
		НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоТЧ.НомерСтроки) +
									""" табл. части ""Налог удержанный"": ";
									
		Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.ФизЛицо) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указано физическое лицо!", Отказ, Заголовок);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.МесяцНалоговогоПериода) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указан месяц налогового периода!", Отказ, Заголовок);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.ПериодРегистрации) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указан период регистрации!", Отказ, Заголовок);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.СтавкаНалогообложенияРезидента) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указана ставка налога!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи.
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                 накопления по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(СтруктураПроведенияПоРегистрамНакопления)

	СтруктураПроведенияПоРегистрамНакопления = Новый Структура();
	СтруктураПроведенияПоРегистрамНакопления.Вставить("НДФЛСведенияОДоходах");
	СтруктураПроведенияПоРегистрамНакопления.Вставить("НДФЛРасчетыСБюджетом");
	СтруктураПроведенияПоРегистрамНакопления.Вставить("НДФЛИмущественныеВычетыФизлиц");
	//vvv
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ВзаиморасчетыСРаботникамиОрганизаций");
	//
КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                             сведений по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
// Минск
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, 
		  СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")


	СписокКодовДохода = Новый СписокЗначений;
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код301);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код302);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код303);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код304);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код305);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код306);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код307);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код308);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код309);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код310);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код311);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код312);
	
	Если ВыборкаПоТЧ.ВидСтрокиЗапроса = "НДФЛСведенияОДоходах" Тогда
		  
		ИмяРегистра = "НДФЛДоходыПредыдущегоМестаРаботы";
		//Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			// Свойства
			Движение.Период                     = ВыборкаПоТЧ.ПериодРегистрации;
			
			// Измерения
			Движение.ФизЛицо                    = ВыборкаПоТЧ.ФизЛицо;
			Движение.Организация   		    	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.МесяцНалоговогоПериода		= ВыборкаПоТЧ.МесяцНалоговогоПериода;
 			Движение.КодДохода          		= ВыборкаПоТЧ.КодДохода;

			// Ресурсы
			Если СписокКодовДохода.НайтиПоЗначению(ВыборкаПоТЧ.КодДохода)= Неопределено тогда
				Движение.Размер 					= ВыборкаПоТЧ.СуммаДохода;
				Движение.АвторскоеВознаграждение 	= 0;
			Иначе
				Движение.Размер 					= ВыборкаПоТЧ.СуммаДохода;
				Движение.АвторскоеВознаграждение 	= ВыборкаПоТЧ.СуммаДохода;
			КонецЕсли;
			
		//КонецЕсли; 

		ИмяРегистра = "НДФЛЛьготыПредыдущегоМестаРаботы";
		//Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Если ВыборкаПоТЧ.СуммаВычета <> 0 тогда
		
				Движение = Движения[ИмяРегистра].Добавить();
				
				// Свойства
				Движение.Период                 = ВыборкаПоТЧ.ПериодРегистрации;
				
				// Измерения
				Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
				Движение.КодДохода						= ВыборкаПоТЧ.КодДохода;
				Движение.МесяцНалоговогоПериода			= ВыборкаПоТЧ.МесяцНалоговогоПериода;
				
				// Ресурсы
				Движение.Размер					= ВыборкаПоТЧ.СуммаДохода; 
				Движение.Прольготировано		= ВыборкаПоТЧ.СуммаВычета; 
				
				// Реквизиты
				Движение.КодВычета  = ВыборкаПоТЧ.КодВычета;
			//КонецЕсли;	
				
		КонецЕсли; 

	ИначеЕсли ВыборкаПоТЧ.ВидСтрокиЗапроса = "НДФЛИсчисленный13" Тогда

		ИмяРегистра = "НДФЛВычетыПредыдущегоМестаРаботы";
		//Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Если ВыборкаПоТЧ.ПримененныйВычетЛичный <> 0 тогда

				Движение = Движения[ИмяРегистра].Добавить();

				// Свойства
				Движение.Период                 = ВыборкаПоТЧ.ПериодРегистрации;

				// Измерения
				Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
				Движение.КодВычета						= Справочники.ВычетыНДФЛ.Код600;
				Движение.МесяцНалоговогоПериода    		= ВыборкаПоТЧ.МесяцНалоговогоПериода;

				// Ресурсы
				Движение.Размер			= ВыборкаПоТЧ.ПримененныйВычетЛичный; 
			КонецЕсли;
			
			Если ВыборкаПоТЧ.ПримененныйВычетНаДетей <> 0 тогда

				Движение = Движения[ИмяРегистра].Добавить();

				// Свойства
				Движение.Период                 = ВыборкаПоТЧ.ПериодРегистрации;

				// Измерения
				Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
				Движение.КодВычета						= Справочники.ВычетыНДФЛ.Код610;
				Движение.МесяцНалоговогоПериода    		= ВыборкаПоТЧ.МесяцНалоговогоПериода;

				// Ресурсы
				Движение.Размер			= ВыборкаПоТЧ.ПримененныйВычетНаДетей; 
			КонецЕсли;
			
			Если ВыборкаПоТЧ.ПримененныйВычетНаДетейЛьгота <> 0 тогда

				Движение = Движения[ИмяРегистра].Добавить();

				// Свойства
				Движение.Период                 = ВыборкаПоТЧ.ПериодРегистрации;

				// Измерения
				Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
				Движение.КодВычета						= Справочники.ВычетыНДФЛ.Код611;
				Движение.МесяцНалоговогоПериода    		= ВыборкаПоТЧ.МесяцНалоговогоПериода;

				// Ресурсы
				Движение.Размер			= ВыборкаПоТЧ.ПримененныйВычетНаДетейЛьгота; 
			КонецЕсли;
			
			Если ВыборкаПоТЧ.ПримененныйВычетДополнительный <> 0 тогда

				Движение = Движения[ИмяРегистра].Добавить();

				// Свойства
				Движение.Период                 = ВыборкаПоТЧ.ПериодРегистрации;

				// Измерения
				Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
				Движение.КодВычета						= Справочники.ВычетыНДФЛ.Код620;
				Движение.МесяцНалоговогоПериода    		= ВыборкаПоТЧ.МесяцНалоговогоПериода;

				// Ресурсы
				Движение.Размер			= ВыборкаПоТЧ.ПримененныйВычетДополнительный; 
			КонецЕсли;
			
			Если ВыборкаПоТЧ.ПримененныйВычетИмущественныйРасход <> 0 тогда

				Движение = Движения[ИмяРегистра].Добавить();

				// Свойства
				Движение.Период                 = ВыборкаПоТЧ.ПериодРегистрации;

				// Измерения
				Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
				Движение.КодВычета						= Справочники.ВычетыНДФЛ.Код650;
				Движение.МесяцНалоговогоПериода    		= ВыборкаПоТЧ.МесяцНалоговогоПериода;

				// Ресурсы
				Движение.Размер			= ВыборкаПоТЧ.ПримененныйВычетИмущественныйРасход; 
			КонецЕсли;
			
			Если ВыборкаПоТЧ.ПримененныйВычетСоциальный <> 0 тогда

				Движение = Движения[ИмяРегистра].Добавить();

				// Свойства
				Движение.Период                 = ВыборкаПоТЧ.ПериодРегистрации;

				// Измерения
				Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
				Движение.КодВычета						= Справочники.ВычетыНДФЛ.Код640;
				Движение.МесяцНалоговогоПериода    		= ВыборкаПоТЧ.МесяцНалоговогоПериода;

				// Ресурсы
				Движение.Размер			= ВыборкаПоТЧ.ПримененныйВычетСоциальный; 
			КонецЕсли;
			
		//КонецЕсли; 

	КонецЕсли;		  

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, 
		  СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров = "")


	Если ВыборкаПоТЧ.ВидСтрокиЗапроса = "НДФЛСведенияОДоходах" Тогда
		  
		ИмяРегистра = "НДФЛСведенияОДоходах";
		Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда

			Движение = Движения[ИмяРегистра].Добавить();

			// Свойства
			Движение.Период             = ВыборкаПоТЧ.МесяцНалоговогоПериода;

			// Измерения
			Движение.Организация		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ФизЛицо            = ВыборкаПоТЧ.ФизЛицо;
			Движение.КодДохода          = ВыборкаПоТЧ.КодДохода;
			Движение.ПериодРегистрации	= НачалоМесяца(ВыборкаПоТЧ.ПериодРегистрации);

			// Ресурсы
			Движение.СуммаДохода		= ВыборкаПоТЧ.СуммаДохода; 
			Движение.СуммаВычета		= ВыборкаПоТЧ.СуммаВычета; 

			// Реквизиты
			Движение.КодВычета			= ВыборкаПоТЧ.КодВычета; 
			Движение.ОбособленноеПодразделение  = ВыборкаПоШапкеДокумента.Организация;
			//Движение.КодПоОКАТО			= ВыборкаПоТЧ.КодПоОКАТО; 
			//Движение.КПП				= ВыборкаПоТЧ.КПП; 
			
		КонецЕсли; 

		ИмяРегистра = "НДФЛРасчетыСБюджетом";
		Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда
            Если ВыборкаПоТЧ.СуммаНалога <>0 Тогда
			
				Движение = Движения[ИмяРегистра].Добавить();
				
				// Свойства
				Движение.Период                 = ВыборкаПоТЧ.ПериодРегистрации;
				Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
				
				// Измерения
				Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
				Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоТЧ.СтавкаНалогообложенияРезидента;
				Движение.МесяцНалоговогоПериода			= ВыборкаПоТЧ.МесяцНалоговогоПериода;
				
				// Ресурсы
				Движение.Налог					= ВыборкаПоТЧ.СуммаНалога; 
				
				// Реквизиты
				Движение.ОбособленноеПодразделение  = ВыборкаПоШапкеДокумента.Организация;
				Движение.ВидСтроки				= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
				//Движение.КодПоОКАТО			= ВыборкаПоТЧ.КодПоОКАТО; 
				//Движение.КПП				= ВыборкаПоТЧ.КПП; 
			
			КонецЕсли; 
		КонецЕсли; 

	ИначеЕсли ВыборкаПоТЧ.ВидСтрокиЗапроса = "НДФЛИсчисленный13" Тогда

		ИмяРегистра = "НДФЛРасчетыСБюджетом";
		Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда

			Движение = Движения[ИмяРегистра].Добавить();

			// Свойства
			Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
			// Налог с оплаты труда рассчитывается последним днём месяца
			Движение.Период                 = КонецМесяца(ВыборкаПоТЧ.ПериодРегистрации);

			// Измерения
			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
			Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоТЧ.СтавкаНалогообложенияРезидента;
			Движение.МесяцНалоговогоПериода    		= ВыборкаПоТЧ.МесяцНалоговогоПериода;

			// Ресурсы
			Движение.Налог					 = ВыборкаПоТЧ.СуммаНалога; 
			Движение.ПримененныйВычетЛичный	 = ВыборкаПоТЧ.ПримененныйВычетЛичный; 
			Движение.ПримененныйВычетНаДетей = ВыборкаПоТЧ.ПримененныйВычетНаДетей; 
			Движение.ПримененныйВычетНаДетейЛьгота = ВыборкаПоТЧ.ПримененныйВычетНаДетейЛьгота;
			Движение.ПримененныйДополнительныйВычет = ВыборкаПоТЧ.ПримененныйВычетДополнительный;
			
			// Реквизиты
			Движение.ОбособленноеПодразделение  = ВыборкаПоШапкеДокумента.Организация;
			Движение.ВидСтроки				= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;			
			//Движение.КодПоОКАТО			= ВыборкаПоТЧ.КодПоОКАТО; 
			//Движение.КПП				= ВыборкаПоТЧ.КПП; 
		КонецЕсли; 

		ИмяРегистра = "НДФЛИмущественныеВычетыФизлиц";
		Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда

			Если (ВыборкаПоТЧ.ПримененныйВычетИмущественныйРасход <> 0) Тогда 
				Движение = Движения[ИмяРегистра].Добавить();
				
				// Свойства
				Движение.Период						= КонецМесяца(ВыборкаПоТЧ.ПериодРегистрации);
				Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
				
				// Измерения
				Движение.ФизЛицо                    = ВыборкаПоТЧ.ФизЛицо;
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.Год			    		= Год(ВыборкаПоТЧ.МесяцНалоговогоПериода);
				//vvv
				Движение.ПериодРегистрации          = КонецМесяца(ВыборкаПоТЧ.ПериодРегистрации);
				Движение.Период						= КонецМесяца(ВыборкаПоТЧ.МесяцНалоговогоПериода);
				Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
				//
				Движение.КодВычетаИмущественный     = Справочники.ВычетыНДФЛ.Код650;
				
				// Ресурсы
				Движение.Размер						= ВыборкаПоТЧ.ПримененныйВычетИмущественныйРасход; 
				
				// Реквизиты
				//Движение.КодПоОКАТО			= ВыборкаПоТЧ.КодПоОКАТО; 
				//Движение.КПП				= ВыборкаПоТЧ.КПП; 
			КонецЕсли;
			
			Если (ВыборкаПоТЧ.ПримененныйВычетСоциальный <> 0) Тогда
				
				Движение = Движения[ИмяРегистра].Добавить();
				
				// Свойства
				Движение.Период						= КонецМесяца(ВыборкаПоТЧ.ПериодРегистрации);
				Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
				
				// Измерения
				Движение.ФизЛицо                    = ВыборкаПоТЧ.ФизЛицо;
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.Год			    		= Год(ВыборкаПоТЧ.МесяцНалоговогоПериода);
				Движение.КодВычетаИмущественный     = Справочники.ВычетыНДФЛ.Код640;
				
				// Ресурсы
				Движение.Размер						= ВыборкаПоТЧ.ПримененныйВычетСоциальный; 
				
				// Реквизиты
				//Движение.КодПоОКАТО			= ВыборкаПоТЧ.КодПоОКАТО; 
				//Движение.КПП				= ВыборкаПоТЧ.КПП; 
			КонецЕсли;
			
			Если (ВыборкаПоТЧ.ПримененныйВычетСтраховойРасход <> 0) Тогда
				
				Движение = Движения[ИмяРегистра].Добавить();
				
				// Свойства
				Движение.Период						= КонецМесяца(ВыборкаПоТЧ.ПериодРегистрации);
				Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
				
				// Измерения
				Движение.ФизЛицо                    = ВыборкаПоТЧ.ФизЛицо;
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.Год			    		= Год(ВыборкаПоТЧ.МесяцНалоговогоПериода);
				Движение.КодВычетаИмущественный     = Справочники.ВычетыНДФЛ.Код640Страх;
				
				// Ресурсы
				Движение.Размер						= ВыборкаПоТЧ.ПримененныйВычетСтраховойРасход; 
				
				// Реквизиты
				//Движение.КодПоОКАТО			= ВыборкаПоТЧ.КодПоОКАТО; 
				//Движение.КПП				= ВыборкаПоТЧ.КПП; 
			КонецЕсли;
			
		КонецЕсли; 
		
		//vvv
		ИмяРегистра = "ВзаиморасчетыСРаботникамиОрганизаций";
		Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда

			Движение = Движения[ИмяРегистра].Добавить();

			// Свойства
			Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
			// Налог с оплаты труда рассчитывается последним днём месяца
			Движение.Период                 = КонецМесяца(ВыборкаПоТЧ.ПериодРегистрации);

			// Измерения
			Движение.Организация					= ВыборкаПоШапкеДокумента.Организация;
			Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
			
			УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация, "УчетЗадолженностиПоМесяцам");
						
			Движение.ПериодВзаиморасчетов           = ВыборкаПоТЧ.ПериодРегистрации;			
			
			// Ресурсы
			Движение.СуммаВзаиморасчетов			= -ВыборкаПоТЧ.СуммаНалога; 
		КонецЕсли;
		//

	ИначеЕсли ВыборкаПоТЧ.ВидСтрокиЗапроса = "НДФЛУдержанный" Тогда

		ИмяРегистра = "НДФЛРасчетыСБюджетом";
		Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда

			Движение = Движения[ИмяРегистра].Добавить();

			// Свойства
			Движение.Период                 = ВыборкаПоТЧ.ПериодРегистрации;
			Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;


			// Измерения
			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
			Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоТЧ.СтавкаНалогообложенияРезидента;
			Движение.МесяцНалоговогоПериода    		= ВыборкаПоТЧ.МесяцНалоговогоПериода;

			// Ресурсы
			Движение.Налог					= ВыборкаПоТЧ.СуммаНалога; 
			
			// Реквизиты
			Движение.ОбособленноеПодразделение  = ВыборкаПоШапкеДокумента.Организация;
			Движение.ВидСтроки				= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;			
			//Движение.КодПоОКАТО			= ВыборкаПоТЧ.КодПоОКАТО; 
			//Движение.КПП				= ВыборкаПоТЧ.КПП; 
		КонецЕсли; 

	КонецЕсли;		  

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(СтруктураПроведенияПоРегистрамНакопления);

			// получим реквизиты табличной части
			ВыборкаПоТабличнымЧастям = СформироватьЗапросПоТабличнымЧастям(Режим).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоТабличнымЧастям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиТЧ(ВыборкаПоТабличнымЧастям, Отказ, Заголовок);
				
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТабличнымЧастям, СтруктураПроведенияПоРегистрамНакопления);

				// Заполнить записи в регитсрах сведений // Минск
				ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоТабличнымЧастям, СтруктураПроведенияПоРегистрамСведений);

			КонецЦикла;
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//vvv
	//КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(НДФЛСведенияОДоходах,, "Физлицо");
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(НДФЛСведенияОДоходах);
	МассивТЧ.Добавить(НДФЛИсчисленный13);
	МассивТЧ.Добавить(НДФЛУдержанный);
	КраткийСоставДокумента = СервисныеПроцедурыИФункции.ЗаполнитьКраткийСоставДокумента(МассивТЧ,"Физлицо");
	//
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати()

	Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Ссылка",				Ссылка);
    Запрос.УстановитьПараметр("Адрес",				Перечисления.ТипыКонтактнойИнформации.Адрес);
    Запрос.УстановитьПараметр("АдресЮридический",	Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
    Запрос.УстановитьПараметр("ФизЛицо",			Сотрудник.ФизЛицо);
    Запрос.УстановитьПараметр("Дата",				Дата);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Номер,
	|	ДоговорНаВыполнениеРаботСФизЛицом.Дата,
	|	ВЫРАЗИТЬ(ДоговорНаВыполнениеРаботСФизЛицом.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ХарактерОплаты КАК ЧастотаВыплат,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Наименование) КАК РаботникНаименование,
	|	ДоговорНаВыполнениеРаботСФизЛицом.СуммаЗаРаботу,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДоговорНаВыполнениеРаботСФизЛицом.ВалютаДокумента.Код, ""810"") = ""810""
	|			ТОГДА ""руб.""
	|		ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.ВалютаДокумента.Наименование
	|	КОНЕЦ КАК ВалютаДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.Наименование КАК ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	КонтактнаяИнформация.Представление КАК АдресОрганизации,
	|	ЕСТЬNULL(ДоговорНаВыполнениеРаботСФизЛицом.Организация.ОсновнойБанковскийСчет.НомерСчета, ""__________________"") КАК НомерСчета,
	|	ЕСТЬNULL(ДоговорНаВыполнениеРаботСФизЛицом.Организация.ОсновнойБанковскийСчет.Банк.Наименование, ""_______________________________________________________________________________________"") КАК Банк
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ДоговорНаВыполнениеРаботСФизЛицом.Организация = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Тип = &Адрес)
	|			И (КонтактнаяИнформация.Вид = &АдресЮридический)
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Ссылка = &Ссылка";
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	Если ИмяМакета = "Договор" Тогда
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДоговорНаВыполнениеРаботСФизЛицом_Договор";
		
		// получаем макет
		Макет = ПолучитьМакет(ИмяМакета);
		
		// получаем данные для печати
		Выборка = СформироватьЗапросДляПечати().Выбрать();
		Если Выборка.Следующий() Тогда
			Макет.Параметры.Заполнить(Выборка);
		КонецЕсли;
		Макет.Параметры.ЧастотаВыплат = Нрег(Макет.Параметры.ЧастотаВыплат);
		Макет.Параметры.НазваниеОрганизации = СокрЛП(Макет.Параметры.НазваниеОрганизации);
		
		ТабДокумент.Вывести(Макет);
		
	КонецЕсли;
	
	Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,"Договор "));
	
КонецФункции // Печать

#КонецЕсли


// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Договор","Договор");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	//  Организация
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан сотрудник, с которым заключается договор!", Отказ, Заголовок);
	Иначе 
		Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Указан сотрудник другой организации!", Отказ, Заголовок);
		КонецЕсли;
		
		Если ВыборкаПоШапкеДокумента.ОшибкаСотрудникНеДоговорник Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Указан сотрудник, не являющийся договорником!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
		
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указано начисление!", Отказ, Заголовок);
	КонецЕсли;
	
	//vvv
	Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указано подразделение!", Отказ, Заголовок);
	КонецЕсли;
	//
	
	// ДатаНачала
	Если Не ЗначениеЗаполнено(ДатаНачала) или НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указаны даты договора!", Отказ, Заголовок);
	ИначеЕсли ДатаНачала > ДатаОкончания Тогда	
		ОбщегоНазначения.СообщитьОбОшибке("Неверно указаны даты договора!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ДвиженияРегистров()
	
	Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
	
	Если ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.Ежемесячно Тогда
		Движение.Период			= ДатаНачала;
	Иначе
		Движение.Период			= НачалоМесяца(ДатаОкончания);
	КонецЕсли;
	
	// Измерения
	Движение.Сотрудник		= Сотрудник;
	Движение.Организация	= ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	Движение.ДокументОснование = Ссылка;
	Движение.ВидРасчетаИзмерение = ВидРасчета;
	
	// Ресурсы
	Движение.ВидРасчета		= ВидРасчета;
	Движение.Действие		= Перечисления.ВидыДействияСНачислением.Начать;
	Движение.Показатель1	= СуммаЗаРаботу;
	Если Не ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте") Тогда
		Движение.Валюта1			= Константы.ВалютаРегламентированногоУчета.Получить();
	Иначе
		Движение.Валюта1			= ВалютаДокумента;
	КонецЕсли;
	// Реквизиты
	
	Движение.ПериодЗавершения 	= ДатаОкончания + 86400;
	Движение.ДействиеЗавершения	= Перечисления.ВидыДействияСНачислением.Прекратить;
	
	 //регистрируем способы отражения в учете
	Если НЕ ЗначениеЗаполнено(СпособОтраженияВБухучете) Тогда
		//не задан способ отражения, не регистрируем в регистре сведений
		Возврат;
	КонецЕсли;
	
	//Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
	//	КодДоходаЕСНПоДоговору = Справочники.ДоходыЕСН.ДоговораАвторские;	
	//ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
	//	КодДоходаЕСНПоДоговору = Справочники.ДоходыЕСН.ДоговораГПХ;
	//КонецЕсли;
	
	//РБ
	//30.10.2014 КодДоходаЕСНПоДоговору = Справочники.ДоходыЕСН.ОблагаетсяФСЗНиСТРАХ;
	КодДоходаЕСНПоДоговору = Справочники.ДоходыЕСН.ДоговорГПХ;

	
	//Движения по регистру "РеглУчетПлановыхНачисленийРаботниковОрганизаций"
	Движение = Движения.РеглУчетПлановыхНачисленийРаботниковОрганизаций.Добавить();
	
	Если ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.Ежемесячно Тогда
		Движение.Период	= ДатаНачала;
	Иначе
		Движение.Период	= НачалоМесяца(ДатаОкончания);
	КонецЕсли;
	
	// Измерения
	Движение.Сотрудник			= Сотрудник;
	Движение.Организация		= ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	Движение.ВидРасчета			= ВидРасчета;
	Движение.ДокументОснование 	= Ссылка;
	
	// Ресурсы
	Движение.СпособОтраженияВБухучете			= СпособОтраженияВБухучете;
	Движение.КодДоходаЕСН						= КодДоходаЕСНПоДоговору;
	//Движение.ОтнесениеРасходовКДеятельностиЕНВД = ОтнесениеРасходовКДеятельностиЕНВД;
	
КонецПроцедуры


// Формирует запрос по шапке документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
Функция СформироватьЗапросПоШапке()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("парамСсылка",	Ссылка);
	
	СписокДоговоров = Новый Массив;
	СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
	СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
	Запрос.УстановитьПараметр("парамСписокДоговоров",	СписокДоговоров);
	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Договор.Сотрудник.Организация = &парамГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА Договор.Сотрудник.ВидДоговора В (&парамСписокДоговоров)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаСотрудникНеДоговорник
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК Договор
	|ГДЕ
	|	Договор.Ссылка = &парамСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			ДвиженияРегистров()
			
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);	
	Если ТипОснования = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, "Организация, ВидДоговора, ФизЛицо");
		
		Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			
			Организация = ""; ВидДоговора = ""; ФизЛицо = "";
			
			Возврат
		Иначе
			
			Сотрудник = Основание;
			
			Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
				ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ДоговорПодряда;
			ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
				ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.АвторскийДоговор;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;
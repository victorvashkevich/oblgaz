////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет перерасчет налога для указанного списка физлиц 
Процедура Рассчитать() Экспорт

	// Используем временную таблицу для исбежания моргания в форме документа
	ВременнаяТаблицаНДФЛ = РаботникиОрганизации.Выгрузить();
	ВременнаяТаблицаНДФЛ.Индексы.Добавить("ФизЛицо");
	
	// Очистим имеющиеся данные
	ВременнаяТаблицаНДФЛ.ЗаполнитьЗначения(0,"НалогПоСтавке09,НалогПоСтавке13,НалогПоСтавке35,НалогПоСтавке9,НалогПоСтавке40,ПримененныйВычетЛичный,ПримененныйВычетНаДетей,ПримененныйВычетНаДетейЛьгота,ПримененныйВычетДополнительный,ПримененныйВычетИмущественныйРасход,ПримененныйВычетСоциальныйСПроцентами,ПримененныйВычетСтраховойРасход");
	ВременнаяТаблицаНДФЛ.ЗаполнитьЗначения(Справочники.ПодразделенияОрганизаций.ПустаяСсылка(),"ПодразделениеОрганизации");
	
	// определим месяц налогового периода, по который будем рассчитывать налог с начала года 						 
	Если Год(Дата) = НалоговыйПериод Тогда
		МесяцНалоговогоПериода = НачалоМесяца(Дата);
	Иначе	
		// последний месяц налогового периода
		МесяцНалоговогоПериода = Дата(НалоговыйПериод, 12, 31);
	КонецЕсли; 		
	
	// дата, по которую будем учитывать зарегистрированные доходы и начисленные налоги 
	ПериодРегистрации = Дата;
	
	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	//------------------------------------------------------------------------------------------------------
	// Расчет налога по ставке 13% (30% для нерезидентов)
	
	// Составим текст запроса для выбора списка физлиц, по которым надо считать НДФЛ
	СписокФизЛицТекст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрганизации.ФизЛицо
	|ИЗ
	|	Документ.НДФЛПерерасчет.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &парамРегистратор";
	
	// получение результата НДФЛ по ставке 13 процентов
	// для него передается Организация, период и ссылка на регистратор
	
	ВыборкаПодразделений = "";
	ДанныеНДФЛ = ПроведениеРасчетов.ПолучитьДанныеНДФЛПоРегистратору(НачалоГода(МесяцНалоговогоПериода), МесяцНалоговогоПериода, МесяцНалоговогоПериода, Организация, ГоловнаяОрганизация, Ссылка, СписокФизлицТекст,,Истина,,ВыборкаПодразделений);
	
	СтруктураПоиска = Новый Структура("Физлицо,Период");
	УжеИсчислили = 0;
	УжеПрименилиЛичный = 0;
	УжеПрименилиДетский = 0;
	УжеПрименилиДетскийИнвалидов = 0;
	ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	ТекущийГод = 0;
	

	// Перепишем данные расчета в табличную часть документа
	// Учитывая, что в выборке данные расчета отсортированы по месяцам налогового периода и все значения 
	// хранятся нарастающим итогом, то для каждого физлица просто возьмем данные за последний рассчитанный месяц  
	Если ДанныеНДФЛ <> НеОпределено Тогда
		
		//Пока ДанныеНДФЛ.Следующий() Цикл
		//	
		//	СтрокаТЗ = ВременнаяТаблицаНДФЛ.Найти(ДанныеНДФЛ.ФизЛицо, "ФизЛицо");
		//	Если СтрокаТЗ = Неопределено Тогда
		//		Продолжить;
		//	КонецЕсли;	

		//	ЗаполнитьЗначенияСвойств(СтруктураПоиска,ДанныеНДФЛ);
		//	
		//	ВыборкаПодразделений.Сбросить();
		//	Если ВыборкаПодразделений.НайтиСледующий(СтруктураПоиска) Тогда
		//		СтрокаТЗ.ПодразделениеОрганизации	= ВыборкаПодразделений.ПодразделениеОрганизации;
		//	КонецЕсли;
		//	
		//	Если ТекущееФизлицо <> ДанныеНДФЛ.ФизЛицо ИЛИ ТекущийГод <> Год(ДанныеНДФЛ.Период) Тогда
		//		УжеИсчислили = 0;
		//		// уже примененные вычеты
		//		УжеПрименилиЛичный = 0;
		//		УжеПрименилиДетский = 0;
		//		УжеПрименилиДетскийЛьгота = 0;
		//		УжеПрименилиДополнительный = 0;
		//		ВычетыПримененные312ЗаМесяц = 0;
		//		ВычетыПримененные311ЗаМесяц = 0;
		//		ВычетыПримененные640СтрахЗаМесяц = 0;
		//		УжеПрименили312 = 0;
		//		УжеПрименили311 = 0;
		//		УжеПрименили640Страх = 0;
		//		// текущие физлицо и год периода
		//		ТекущееФизлицо = ДанныеНДФЛ.ФизЛицо;
		//		ТекущийГод = Год(ДанныеНДФЛ.Период);
		//	КонецЕсли;
		//
		//				//
		//	// первый проход
		//	ВычетыПримененныеЛичный = ДанныеНДФЛ.ПримененныеВычетыЛичные - ДанныеНДФЛ.РанееПримененныеВычетыЛичные - УжеПрименилиЛичный;
		//	ВычетыПримененныеДетский = ДанныеНДФЛ.ПримененныеВычетыДетские - ДанныеНДФЛ.РанееПримененныеВычетыДетские - УжеПрименилиДетский;
		//	ВычетыПримененныеДетскийЛьгота = ДанныеНДФЛ.ПримененныеВычетыДетскиеЛьгота  - ДанныеНДФЛ.РанееПримененныеВычетыДетскиеЛьгота  - УжеПрименилиДетскийЛьгота;
		//	ВычетыПримененныеДополнительный =  ДанныеНДФЛ.ПримененныеВычетыДополнительные - ДанныеНДФЛ.РанееПримененныеВычетыДополнительные - УжеПрименилиДополнительный;
		//	ДоходЗаПериодДляВычета = ДанныеНДФЛ.ДоходЗаПериод - (ДанныеНДФЛ.ПримененныеВычетыЛичныеЗаПериод + ДанныеНДФЛ.ПримененныеВычетыДетскиеЗаПериод  + ДанныеНДФЛ.ПримененныеВычетыДетскиеЛьготаЗаПериод + ДанныеНДФЛ.ПримененныеВычетыДополнительныеЗаПериод);
		//	БазоваяВеличина = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(КонецМесяца(ДанныеНДФЛ.Период),Новый Структура("ВидПараметра",Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяВеличина)).Размер;
		//	Если БазоваяВеличина = 0 тогда 
		//		Сообщить("Не заданна базовая величина");
		//	Иначе

		//		Вычеты640СтрахОстаток = ДанныеНДФЛ.Вычет640СтрахОстаток - УжеПрименили640Страх;
		//		Если ДоходЗаПериодДляВычета > 0 тогда
		//			Если  Вычеты640СтрахОстаток > ДоходЗаПериодДляВычета тогда
		//				Если ДоходЗаПериодДляВычета > 2* БазоваяВеличина тогда
		//					ВычетыПримененные640СтрахЗаМесяц = 2* БазоваяВеличина;
		//				Иначе
		//					ВычетыПримененные640СтрахЗаМесяц = ДоходЗаПериодДляВычета;
		//				КонецЕсли;
		//			Иначе
		//				Если Вычеты640СтрахОстаток > 2* БазоваяВеличина тогда
		//					ВычетыПримененные640СтрахЗаМесяц = 2* БазоваяВеличина;
		//				Иначе
		//					ВычетыПримененные640СтрахЗаМесяц = Вычеты640СтрахОстаток;
		//				КонецЕсли;
		//			КонецЕсли;
		//		КонецЕсли;
		//	КонецЕсли;
		//	

		//	Вычеты312Остаток = ДанныеНДФЛ.Вычет312Остаток - УжеПрименили312;
		//	Если ДоходЗаПериодДляВычета > 0 тогда
		//		Если  Вычеты312Остаток > ДоходЗаПериодДляВычета - ВычетыПримененные640СтрахЗаМесяц тогда
		//			ВычетыПримененные312ЗаМесяц = ДоходЗаПериодДляВычета - ВычетыПримененные640СтрахЗаМесяц;
		//		Иначе
		//			ВычетыПримененные312ЗаМесяц = Вычеты312Остаток;
		//		КонецЕсли;
		//	КонецЕсли;
		//	
		//	Вычеты311Остаток = ДанныеНДФЛ.Вычет311Остаток - УжеПрименили311;
		//	Если ДоходЗаПериодДляВычета > 0 тогда
		//		Если  Вычеты311Остаток > ДоходЗаПериодДляВычета - ВычетыПримененные312ЗаМесяц - ВычетыПримененные640СтрахЗаМесяц тогда 
		//			ВычетыПримененные311ЗаМесяц = ДоходЗаПериодДляВычета - ВычетыПримененные312ЗаМесяц - ВычетыПримененные640СтрахЗаМесяц;
		//		Иначе
		//			ВычетыПримененные311ЗаМесяц = Вычеты311Остаток;
		//		КонецЕсли;
		//	КонецЕсли;
		//	
		//	Если ДанныеНДФЛ.Резидент Тогда
		//		НалогИсчисленный = ((ДанныеНДФЛ.ДоходЗаГод - ДанныеНДФЛ.ПримененныеВычетыЛичные - ДанныеНДФЛ.ПримененныеВычетыДетские - ДанныеНДФЛ.ПримененныеВычетыДетскиеЛьгота - ДанныеНДФЛ.ПримененныеВычетыДополнительные - (ВычетыПримененные640СтрахЗаМесяц + УжеПрименили640Страх) - (ВычетыПримененные312ЗаМесяц + УжеПрименили312) - (ВычетыПримененные311ЗаМесяц + УжеПрименили311))*ОКР(Шкала[0].Налог/100,2,0) - ДанныеНДФЛ.НалогРанееИсчисленный) - УжеИсчислили;
		//		НалогИсчисленный = ОбщегоНазначения.ОкруглитьПоВалюте(НалогИсчисленный,Константы.ВалютаРегламентированногоУчета.Получить());
		//		НалогИсчисленный = ?(НалогИсчисленный < 0,0,НалогИсчисленный);
		//	Иначе
		//		НалогИсчисленный = ДанныеНДФЛ.НалогИсчисленный;
		//	КонецЕсли;
		//	
		//	ВычетыПримененные640Страх = ВычетыПримененные640СтрахЗаМесяц - ДанныеНДФЛ.РанееПримененныеВычеты640СтрахЗаМесяц;
		//	ВычетыПримененные312 = ВычетыПримененные312ЗаМесяц - ДанныеНДФЛ.РанееПримененныеВычеты312ЗаМесяц;
		//	ВычетыПримененные311 = ВычетыПримененные311ЗаМесяц - ДанныеНДФЛ.РанееПримененныеВычеты311ЗаМесяц;
		//		
		//		// Запомним суммы для следующей итерации
		//	УжеИсчислили = УжеИсчислили + НалогИсчисленный;
		//	УжеПрименилиЛичный = УжеПрименилиЛичный + ВычетыПримененныеЛичный;
		//	УжеПрименилиДетский = УжеПрименилиДетский + ВычетыПримененныеДетский;
		//	УжеПрименилиДетскийЛьгота = УжеПрименилиДетскийЛьгота + ВычетыПримененныеДетскийЛьгота;
		//	УжеПрименилиДополнительный = УжеПрименилиДополнительный + ВычетыПримененныеДополнительный;
		//	УжеПрименили312 = УжеПрименили312 + ВычетыПримененные312ЗаМесяц;
		//	УжеПрименили311 = УжеПрименили311 + ВычетыПримененные311ЗаМесяц;
		//	УжеПрименили640Страх = УжеПрименили640Страх + ВычетыПримененные640СтрахЗаМесяц;

		//	 Если	НалогИсчисленный = 0 и 
		//			ВычетыПримененныеЛичный = 0 и 
		//			ВычетыПримененныеДетский = 0 и 
		//			ВычетыПримененныеДетскийЛьгота = 0 и
		//			ВычетыПримененныеДополнительный = 0 и
		//			ВычетыПримененные640Страх = 0 и
		//			ВычетыПримененные312 = 0 и 
		//			ВычетыПримененные311 = 0 Тогда
		//		Продолжить;
		//	КонецЕсли;

		//	
		//	СтрокаТЗ.НалогПоСтавке13   				= ОбщегоНазначения.ОкруглитьПоВалюте(НалогИсчисленный,Константы.ВалютаРегламентированногоУчета.Получить());
		//	СтрокаТЗ.ПримененныйВычетЛичный			= ВычетыПримененныеЛичный;
		//	СтрокаТЗ.ПримененныйВычетНаДетей		= ВычетыПримененныеДетский;
		// 	СтрокаТЗ.ПримененныйВычетНаДетейЛьгота	= ВычетыПримененныеДетскийЛьгота;
		//	СтрокаТЗ.ПримененныйВычетДополнительный	= ВычетыПримененныеДополнительный;

		//			
		//КонецЦикла;	
		
		Пока ДанныеНДФЛ.Следующий() Цикл
			
			Если ТекущееФизлицо <> ДанныеНДФЛ.ФизЛицо ИЛИ ТекущийГод <> Год(ДанныеНДФЛ.Период) Тогда
				УжеИсчислили = 0;
				// уже примененные вычеты
				УжеПрименилиЛичный = 0;
				УжеПрименилиДетский = 0;
				УжеПрименилиДетскийЛьгота = 0;
				УжеПрименилиДополнительный = 0;
				ВычетыПримененные312ЗаМесяц = 0;
				ВычетыПримененные311ЗаМесяц = 0;
				ВычетыПримененные640СтрахЗаМесяц = 0;
				УжеПрименили312 = 0;
				УжеПрименили311 = 0;
				УжеПрименили640Страх = 0;
				// текущие физлицо и год периода
				ТекущееФизлицо = ДанныеНДФЛ.ФизЛицо;
				ТекущийГод = Год(ДанныеНДФЛ.Период);
			КонецЕсли;
			
			ЗапросШкала = Новый Запрос;
			ЗапросШкала.Текст =
			"ВЫБРАТЬ
			|	ШкалаПодоходногоНалогаСрезПоследних.Налог
			|ИЗ
			|	РегистрСведений.ШкалаПодоходногоНалога.СрезПоследних(&КонецПериода, ) КАК ШкалаПодоходногоНалогаСрезПоследних
			|
			|УПОРЯДОЧИТЬ ПО
			|	ШкалаПодоходногоНалогаСрезПоследних.Период,
			|	ШкалаПодоходногоНалогаСрезПоследних.НижнийПредел";
			ЗапросШкала.УстановитьПараметр("КонецПериода", ДанныеНДФЛ.Период);
			Шкала = ЗапросШкала.Выполнить().Выгрузить();

		
			
			// первый проход
			ВычетыПримененныеЛичный =  ДанныеНДФЛ.ПримененныеВычетыЛичныеЗаПериод - ДанныеНДФЛ.РанееПримененныеВычетыЛичныеЗаМесяц;
			ВычетыПримененныеДетский = ДанныеНДФЛ.ПримененныеВычетыДетскиеЗаПериод  - ДанныеНДФЛ.РанееПримененныеВычетыДетскиеЗаМесяц;
			ВычетыПримененныеДетскийЛьгота =  ДанныеНДФЛ.ПримененныеВычетыДетскиеЛьготаЗаПериод  - ДанныеНДФЛ.РанееПримененныеВычетыДетскиеЛьготаЗаМесяц;
			ВычетыПримененныеДополнительный =   ДанныеНДФЛ.ПримененныеВычетыДополнительныеЗаПериод - ДанныеНДФЛ.РанееПримененныеВычетыДополнительныеЗаМесяц;
			ДоходЗаПериодДляВычета = ДанныеНДФЛ.ДоходЗаПериод - (ДанныеНДФЛ.ПримененныеВычетыЛичныеЗаПериод + ДанныеНДФЛ.ПримененныеВычетыДетскиеЗаПериод  + ДанныеНДФЛ.ПримененныеВычетыДетскиеЛьготаЗаПериод + ДанныеНДФЛ.ПримененныеВычетыДополнительныеЗаПериод);
			
			БазоваяВеличина = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(КонецМесяца(ДанныеНДФЛ.Период),Новый Структура("ВидПараметра",Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяВеличина)).Размер;
							
			Вычеты640СтрахОстаток = ДанныеНДФЛ.Вычет640СтрахОстаток - УжеПрименили640Страх;
			
			Если Год(ДанныеНДФЛ.Период) =  2013 Тогда 
				РазмерСтраховогоВычета = 10000000;
			ИначеЕсли Год(ДанныеНДФЛ.Период) >=  2014 Тогда
				РазмерСтраховогоВычета = 12000000;
			КонецЕсли;
	              			
			Если УжеПрименили640Страх < РазмерСтраховогоВычета Тогда
				Если ДоходЗаПериодДляВычета > 0 тогда
					Вычеты640СтрахОстаток = Мин(РазмерСтраховогоВычета - УжеПрименили640Страх,Вычеты640СтрахОстаток);
					ВычетыПримененные640СтрахЗаМесяц = Мин(ДоходЗаПериодДляВычета, Вычеты640СтрахОстаток);
				Иначе
					ВычетыПримененные640СтрахЗаМесяц = 0;
				КонецЕсли;
			Иначе
				ВычетыПримененные640СтрахЗаМесяц = 0;	
			КонецЕсли;
			
			Вычеты312Остаток = ДанныеНДФЛ.Вычет312Остаток - УжеПрименили312;
			Если ДоходЗаПериодДляВычета > 0 тогда
				Если  Вычеты312Остаток > ДоходЗаПериодДляВычета - ВычетыПримененные640СтрахЗаМесяц тогда
					ВычетыПримененные312ЗаМесяц = ДоходЗаПериодДляВычета - ВычетыПримененные640СтрахЗаМесяц;
				Иначе
					ВычетыПримененные312ЗаМесяц = Вычеты312Остаток;
				КонецЕсли;
			Иначе
				ВычетыПримененные312ЗаМесяц = 0;	
			КонецЕсли;
			
			Вычеты311Остаток = ДанныеНДФЛ.Вычет311Остаток - УжеПрименили311;
			Если ДоходЗаПериодДляВычета > 0 тогда
				Если  Вычеты311Остаток > ДоходЗаПериодДляВычета - ВычетыПримененные312ЗаМесяц - ВычетыПримененные640СтрахЗаМесяц тогда 
					ВычетыПримененные311ЗаМесяц = ДоходЗаПериодДляВычета - ВычетыПримененные312ЗаМесяц - ВычетыПримененные640СтрахЗаМесяц;
				Иначе
					ВычетыПримененные311ЗаМесяц = Вычеты311Остаток;
				КонецЕсли;
			Иначе
				ВычетыПримененные311ЗаМесяц = 0;	
			КонецЕсли;
			
			//Если ДанныеНДФЛ.Резидент Тогда
				НалогИсчисленный = ((ДанныеНДФЛ.ДоходЗаПериод - ДанныеНДФЛ.ПримененныеВычетыЛичныеЗаПериод - ДанныеНДФЛ.ПримененныеВычетыДетскиеЗаПериод - ДанныеНДФЛ.ПримененныеВычетыДетскиеЛьготаЗаПериод - ДанныеНДФЛ.ПримененныеВычетыДополнительныеЗаПериод - (ВычетыПримененные640СтрахЗаМесяц) - (ВычетыПримененные312ЗаМесяц) - (ВычетыПримененные311ЗаМесяц))*ОКР(Шкала[0].Налог/100,2,0) - ДанныеНДФЛ.НалогРанееИсчисленный);
				НалогИсчисленный = ОбщегоНазначения.ОкруглитьПоВалюте(НалогИсчисленный,Константы.ВалютаРегламентированногоУчета.Получить());
			//Иначе
			//	НалогИсчисленный = ДанныеНДФЛ.НалогИсчисленный;
			//КонецЕсли;
			
			ВычетыПримененные640Страх = ВычетыПримененные640СтрахЗаМесяц - ДанныеНДФЛ.РанееПримененныеВычеты640СтрахЗаМесяц;
			ВычетыПримененные312 = ВычетыПримененные312ЗаМесяц - ДанныеНДФЛ.РанееПримененныеВычеты312ЗаМесяц;
			ВычетыПримененные311 = ВычетыПримененные311ЗаМесяц - ДанныеНДФЛ.РанееПримененныеВычеты311ЗаМесяц;
			
			// Запомним суммы для следующей итерации
			УжеПрименили312 = УжеПрименили312 + ВычетыПримененные312ЗаМесяц;
	        УжеПрименили311 = УжеПрименили311 + ВычетыПримененные311ЗаМесяц;
			УжеПрименили640Страх = УжеПрименили640Страх + ВычетыПримененные640СтрахЗаМесяц;
			
			Если	НалогИсчисленный = 0 и 
					ВычетыПримененныеЛичный = 0 и 
					ВычетыПримененныеДетский = 0 и 
					ВычетыПримененныеДетскийЛьгота = 0 и
					ВычетыПримененныеДополнительный = 0 и
					ВычетыПримененные640Страх = 0 и
					ВычетыПримененные312 = 0 и 
					ВычетыПримененные311 = 0 Тогда
				Продолжить;
			КонецЕсли;
			
				
						
			// Ниже - заполняем табличную часть документа
			СтрокаТЗ = ВременнаяТаблицаНДФЛ.Найти(ДанныеНДФЛ.ФизЛицо, "ФизЛицо");
			Если СтрокаТЗ = Неопределено Тогда
				Продолжить;
			КонецЕсли;	

			ЗаполнитьЗначенияСвойств(СтруктураПоиска,ДанныеНДФЛ);
			
			ВыборкаПодразделений.Сбросить();
			Если ВыборкаПодразделений.НайтиСледующий(СтруктураПоиска) Тогда
				СтрокаТЗ.ПодразделениеОрганизации	= ВыборкаПодразделений.ПодразделениеОрганизации;
			КонецЕсли;
			

			//Если Перерасчет Тогда
			//	СтруктураПоиска.Физлицо = ДанныеНДФЛ.ФизЛицо;
			//	СтруктураПоиска.МесяцНалоговогоПериода = ДанныеНДФЛ.Период;
			//	Строки = НДФЛ.НайтиСтроки(СтруктураПоиска);
			//	Если Строки.Количество() > 0 Тогда
			//		Строка = Строки[0];
			//	Иначе
			//		Строка = НДФЛ.Добавить();
			//	КонецЕсли;
			//Иначе
			//	Если РасчетПоФизлицу Тогда
			//		Строка = НДФЛ.Вставить(ИндексСтрокиТаблицыНДФЛ);
			//		ИндексСтрокиТаблицыНДФЛ = ИндексСтрокиТаблицыНДФЛ+1;
			//	Иначе
			//		Строка = НДФЛ.Добавить();
			//	КонецЕсли;
			//КонецЕсли;
			//РаботникиДляРасчетаНДФЛ.Удалить(ДанныеНДФЛ.ФизЛицо);
			//	
			//ЗаполнитьЗначенияСвойств(СтруктураПоискаПодразделения,ДанныеНДФЛ);
			//ВыборкаПодразделений.Сбросить();
			//Если ВыборкаПодразделений.НайтиСледующий(СтруктураПоискаПодразделения) Тогда
			//	Строка.ПодразделениеОрганизации	= ВыборкаПодразделений.ПодразделениеОрганизации;
			//КонецЕсли;
			
			СтрокаТЗ.ФизЛицо 					           = ДанныеНДФЛ.ФизЛицо;
			СтрокаТЗ.НалогПоСтавке13   			           = СтрокаТЗ.НалогПоСтавке13  + ОбщегоНазначения.ОкруглитьПоВалюте(НалогИсчисленный,Константы.ВалютаРегламентированногоУчета.Получить());
			СтрокаТЗ.ПримененныйВычетЛичный	               = СтрокаТЗ.ПримененныйВычетЛичный + ВычетыПримененныеЛичный;
			СтрокаТЗ.ПримененныйВычетНаДетей		       = СтрокаТЗ.ПримененныйВычетНаДетей + ВычетыПримененныеДетский;
			СтрокаТЗ.ПримененныйВычетНаДетейЛьгота	       = СтрокаТЗ.ПримененныйВычетНаДетейЛьгота + ВычетыПримененныеДетскийЛьгота;
			СтрокаТЗ.ПримененныйВычетДополнительный        = СтрокаТЗ.ПримененныйВычетДополнительный + ВычетыПримененныеДополнительный;
			СтрокаТЗ.ПримененныйВычетИмущественныйРасход   = СтрокаТЗ.ПримененныйВычетИмущественныйРасход + ВычетыПримененные311;
			СтрокаТЗ.ПримененныйВычетСоциальныйСПроцентами = СтрокаТЗ.ПримененныйВычетСоциальныйСПроцентами + ВычетыПримененные312;
			СтрокаТЗ.ПримененныйВычетСтраховойРасход	   = СтрокаТЗ.ПримененныйВычетСтраховойРасход + ВычетыПримененные640Страх;
			//СтрокаТЗ.МесяцНалоговогоПериода 		= ДанныеНДФЛ.Период;
		КонецЦикла;

		
	КонецЕсли;

	//------------------------------------------------------------------------------------------------------
	// Расчет налогов по ставке 15, 20 и 40 %
	
	
	// Ранее расчитанные налоги
	РанееНачисленныеНалогиТекст = 
	"ВЫБРАТЬ
	|	РасчетыСБюджетом.ФизЛицо,
	|	Сумма(ВЫБОР КОГДА РасчетыСБюджетом.СтавкаНалогообложенияРезидента = &парамСтавка9 ТОГДА РасчетыСБюджетом.Налог ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке9,
	|	Сумма(ВЫБОР КОГДА РасчетыСБюджетом.СтавкаНалогообложенияРезидента = &парамСтавка09 ТОГДА РасчетыСБюджетом.Налог ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке09,
	|	Сумма(ВЫБОР КОГДА РасчетыСБюджетом.СтавкаНалогообложенияРезидента = &парамСтавка35 ТОГДА РасчетыСБюджетом.Налог ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке35,
	|	Сумма(ВЫБОР КОГДА РасчетыСБюджетом.СтавкаНалогообложенияРезидента = &парамСтавка40 ТОГДА РасчетыСБюджетом.Налог ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке40
	|ИЗ
	|	РегистрНакопления.НДФЛРасчетыСБюджетом КАК РасчетыСБюджетом
	|
	|ГДЕ
	|	РасчетыСБюджетом.Организация = &парамГоловнаяОрганизация И
	|	РасчетыСБюджетом.Период <= &парамПериодРегистрации И
	|	(РасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &парамНачалоГода И &парамКонецМесяцаНалоговогоПериода ИЛИ РасчетыСБюджетом.МесяцНалоговогоПериода = &парамКонецМесяцаНалоговогоПериода) И
	|	РасчетыСБюджетом.Регистратор <> &парамРегистратор И
	|	РасчетыСБюджетом.ВидДвижения = &парамВидДвиженияПриход И
	|	РасчетыСБюджетом.ФизЛицо В(" + СписокФизЛицТекст + ") И
	|	РасчетыСБюджетом.ВидСтроки = &парамВидСтрокиНачисление
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСБюджетом.ФизЛицо";
	 
	// Составим текст запроса для выбора списка физлиц, по которым надо считать НДФЛ (исключим нерезидентов)
	СписокФизлицРезидентовТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрганизации.ФизЛицо
	|ИЗ
	|	Документ.НДФЛПерерасчет.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонецГода) КАК НеРезиденты
	|		ПО НеРезиденты.ФизЛицо = ТЧРаботникиОрганизации.ФизЛицо
	|
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &парамРегистратор И
	|	(((НеРезиденты.ФизЛицо) ЕСТЬ NULL ) ИЛИ ((НеРезиденты.Страна)=&Беларусь))";
	
	// НачислениеНалоговТекст
	НачислениеНалоговТекст = 
	"ВЫБРАТЬ
	|	НДФЛОбороты.ФизЛицо КАК ФизЛицо,
	|	Сумма(ВЫБОР КОГДА КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка9 ТОГДА (НДФЛОбороты.СуммаДоходаОборот-НДФЛОбороты.СуммаВычетаОборот)*&парамСтавкаРезидента9/100 ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке9,
	|	Сумма(ВЫБОР КОГДА КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка09 ТОГДА (НДФЛОбороты.СуммаДоходаОборот-НДФЛОбороты.СуммаВычетаОборот)*&парамСтавкаРезидента09/100 ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке09,
	|	Сумма(ВЫБОР КОГДА КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка35 ТОГДА (НДФЛОбороты.СуммаДоходаОборот-НДФЛОбороты.СуммаВычетаОборот)*&парамСтавкаРезидента35/100 ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке35,
	|	Сумма(ВЫБОР КОГДА КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка40 ТОГДА (НДФЛОбороты.СуммаДоходаОборот-НДФЛОбороты.СуммаВычетаОборот)*&парамСтавкаРезидента40/100 ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке40
	|ИЗ
	|	РегистрНакопления.НДФЛСведенияОДоходах.Обороты(&парамНачалоГода, &парамКонецМесяцаНалоговогоПериода, Месяц, ПериодРегистрации <= &парамПериодРегистрации И Организация = &парамГоловнаяОрганизация И ВЫБОР КОГДА Физлицо В (" + СписокФизлицРезидентовТекст + ") ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК НДФЛОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛОбороты.ФизЛицо";
	
	// Объединение запросов
	НалогиТекст = 
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА НЕ НачисленныеНалоги.ФизЛицо ЕСТЬ NULL ТОГДА НачисленныеНалоги.ФизЛицо ИНАЧЕ РанееНачислено.ФизЛицо КОНЕЦ КАК ФизЛицо,
	|	ВЫБОР КОГДА НЕ НачисленныеНалоги.ФизЛицо ЕСТЬ NULL ТОГДА НачисленныеНалоги.НалогПоСтавке9 ИНАЧЕ 0 КОНЕЦ - ВЫБОР КОГДА НЕ РанееНачислено.ФизЛицо ЕСТЬ NULL ТОГДА РанееНачислено.НалогПоСтавке9 ИНАЧЕ 0 КОНЕЦ КАК НалогПоСтавке9,
	|	ВЫБОР КОГДА НЕ НачисленныеНалоги.ФизЛицо ЕСТЬ NULL ТОГДА НачисленныеНалоги.НалогПоСтавке09 ИНАЧЕ 0 КОНЕЦ - ВЫБОР КОГДА НЕ РанееНачислено.ФизЛицо ЕСТЬ NULL ТОГДА РанееНачислено.НалогПоСтавке09 ИНАЧЕ 0 КОНЕЦ КАК НалогПоСтавке09,
	|	ВЫБОР КОГДА НЕ НачисленныеНалоги.ФизЛицо ЕСТЬ NULL ТОГДА НачисленныеНалоги.НалогПоСтавке35 ИНАЧЕ 0 КОНЕЦ - ВЫБОР КОГДА НЕ РанееНачислено.ФизЛицо ЕСТЬ NULL ТОГДА РанееНачислено.НалогПоСтавке35 ИНАЧЕ 0 КОНЕЦ КАК НалогПоСтавке35,
	|	ВЫБОР КОГДА НЕ НачисленныеНалоги.ФизЛицо ЕСТЬ NULL ТОГДА НачисленныеНалоги.НалогПоСтавке40 ИНАЧЕ 0 КОНЕЦ - ВЫБОР КОГДА НЕ РанееНачислено.ФизЛицо ЕСТЬ NULL ТОГДА РанееНачислено.НалогПоСтавке35 ИНАЧЕ 0 КОНЕЦ КАК НалогПоСтавке40
	| ИЗ (" + НачислениеНалоговТекст + ") КАК НачисленныеНалоги
	|   ПОЛНОЕ СОЕДИНЕНИЕ (" +РанееНачисленныеНалогиТекст + ") КАК РанееНачислено
	|	ПО РанееНачислено.ФизЛицо = НачисленныеНалоги.ФизЛицо
	|";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Беларусь", Справочники.КлассификаторСтранМира.БЕЛАРУСЬ);
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамСтавка9", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка9);
	Запрос.УстановитьПараметр("парамСтавка09", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09);
	Запрос.УстановитьПараметр("парамСтавка35", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35);
	Запрос.УстановитьПараметр("парамСтавка40", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка40);
	Запрос.УстановитьПараметр("парамСтавкаРезидента9", ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка9));
	Запрос.УстановитьПараметр("парамСтавкаРезидента09", ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09));
	Запрос.УстановитьПараметр("парамСтавкаРезидента35", ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35));
	Запрос.УстановитьПараметр("парамСтавкаРезидента40", ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка40));

	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамКонецМесяцаНалоговогоПериода", КонецМесяца(МесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамНачалоГода", НачалоГода(МесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецГода", КонецГода(МесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамВидСтрокиНачисление", Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление);
	Запрос.УстановитьПараметр("парамВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	
	Запрос.Текст = НалогиТекст;
	
	ДанныеНДФЛ = Запрос.Выполнить().Выбрать();
	
	Пока ДанныеНДФЛ.Следующий() Цикл
		
		Строка = ВременнаяТаблицаНДФЛ.Найти(ДанныеНДФЛ.ФизЛицо, "ФизЛицо");
		
		Если Строка = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Строка.НалогПоСтавке9   			= ДанныеНДФЛ.НалогПоСтавке9;
		Строка.НалогПоСтавке09   			= ДанныеНДФЛ.НалогПоСтавке09;
		Строка.НалогПоСтавке35				= ДанныеНДФЛ.НалогПоСтавке35;
		Строка.НалогПоСтавке40				= ДанныеНДФЛ.НалогПоСтавке40;
		
	КонецЦикла;	
	
	// Загружаем результаты расчета
	РаботникиОрганизации.Загрузить(ВременнаяТаблицаНДФЛ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = "ВЫБРАТЬ
	               |	НДФЛПерерасчет.Дата,
	               |	НДФЛПерерасчет.Ссылка,
	               |	НДФЛПерерасчет.НалоговыйПериод,
	               |	НДФЛПерерасчет.ПериодВзаиморасчетов,
	               |	НДФЛПерерасчет.Организация,
	               |	НДФЛПерерасчет.Ответственный,
	               |	ВЫБОР КОГДА НДФЛПерерасчет.Организация.ГоловнаяОрганизация = &ПустаяОрганизация ТОГДА НДФЛПерерасчет.Организация ИНАЧЕ НДФЛПерерасчет.Организация.ГоловнаяОрганизация КОНЕЦ КАК ГоловнаяОрганизация
	               |ИЗ
	               |	Документ.НДФЛПерерасчет КАК НДФЛПерерасчет
	               |
	               |ГДЕ
	               |	НДФЛПерерасчет.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части документам
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ТЧРаботникиОрганизации.ФизЛицо,
	|	ТЧРаботникиОрганизации.НалогПоСтавке09,
	|	ТЧРаботникиОрганизации.НалогПоСтавке13,
	|	ТЧРаботникиОрганизации.НалогПоСтавке35,
	|	ТЧРаботникиОрганизации.НалогПоСтавке9,
	|	ТЧРаботникиОрганизации.НалогПоСтавке40,
	|	ТЧРаботникиОрганизации.ПримененныйВычетЛичный,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаДетей,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаДетейЛьгота,
	|	ТЧРаботникиОрганизации.ПримененныйВычетИмущественныйРасход,
	|	ТЧРаботникиОрганизации.ПримененныйВычетСоциальныйСПроцентами,
	|	ТЧРаботникиОрганизации.ПримененныйВычетДополнительный,
	|	ТЧРаботникиОрганизации.ПримененныйВычетСтраховойРасход
	|ИЗ
	|	Документ.НДФЛПерерасчет.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос для расчета сумм НДФЛ к зачету
//
// Параметры: 
//	нет
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНДФЛКЗачету()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодВзаиморасчетов);
	Запрос.УстановитьПараметр("Ставка13", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);
	Запрос.УстановитьПараметр("Ставка09", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09);
	Запрос.УстановитьПараметр("Ставка35", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(СтрокиНДФЛ.НалогПоСтавке13) КАК Налог,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) > ВЫБОР
	|				КОГДА СУММА(СтрокиНДФЛ.НалогПоСтавке13) > 0
	|					ТОГДА СУММА(СтрокиНДФЛ.НалогПоСтавке13)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|			ТОГДА СУММА(СтрокиНДФЛ.НалогПоСтавке13)
	|		ИНАЧЕ ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0)
	|	КОНЕЦ КАК НДФЛКЗачетуУчтено,
	|	СтрокиНДФЛ.ФизЛицо,
	|	&Ставка13 КАК Ставка
	|ИЗ
	|	Документ.НДФЛПерерасчет.РаботникиОрганизации КАК СтрокиНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛКЗачету.Остатки(
	|				&ПериодРегистрации,
	|				Физлицо В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							НДФЛПерерасчетРаботникиОрганизации.ФизЛицо
	|						ИЗ
	|							Документ.НДФЛПерерасчет.РаботникиОрганизации КАК НДФЛПерерасчетРаботникиОрганизации
	|						ГДЕ
	|							НДФЛПерерасчетРаботникиОрганизации.Ссылка = &ДокументСсылка)
	|					И Организация = &Организация) КАК НДФЛКЗачету
	|		ПО (НДФЛКЗачету.ФизЛицо = СтрокиНДФЛ.ФизЛицо)
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиНДФЛ.ФизЛицо,
	|	НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток
	|
	|ИМЕЮЩИЕ
	|	(СУММА(СтрокиНДФЛ.НалогПоСтавке13) < 0
	|		ИЛИ ВЫБОР
	|			КОГДА ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) > ВЫБОР
	|					КОГДА СУММА(СтрокиНДФЛ.НалогПоСтавке13) > 0
	|						ТОГДА СУММА(СтрокиНДФЛ.НалогПоСтавке13)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|				ТОГДА СУММА(СтрокиНДФЛ.НалогПоСтавке13)
	|			ИНАЧЕ ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0)
	|		КОНЕЦ <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(СтрокиНДФЛ.НалогПоСтавке09),
	|	0,
	|	СтрокиНДФЛ.ФизЛицо,
	|	&Ставка09
	|ИЗ
	|	Документ.НДФЛПерерасчет.РаботникиОрганизации КАК СтрокиНДФЛ
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиНДФЛ.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(СтрокиНДФЛ.НалогПоСтавке9),
	|	0,
	|	СтрокиНДФЛ.ФизЛицо,
	|	&Ставка09
	|ИЗ
	|	Документ.НДФЛПерерасчет.РаботникиОрганизации КАК СтрокиНДФЛ
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиНДФЛ.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(СтрокиНДФЛ.НалогПоСтавке40),
	|	0,
	|	СтрокиНДФЛ.ФизЛицо,
	|	&Ставка09
	|ИЗ
	|	Документ.НДФЛПерерасчет.РаботникиОрганизации КАК СтрокиНДФЛ
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиНДФЛ.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(СтрокиНДФЛ.НалогПоСтавке35),
	|	0,
	|	СтрокиНДФЛ.ФизЛицо,
	|	&Ставка35
	|ИЗ
	|	Документ.НДФЛПерерасчет.РаботникиОрганизации КАК СтрокиНДФЛ
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиНДФЛ.ФизЛицо";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНДФЛКЗачету

Функция СформироватьЗапросПоНДФЛудержанный()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодВзаиморасчетов);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(СтрокиНДФЛ.НалогПоСтавке13) КАК Налог,
	|	СтрокиНДФЛ.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	Документ.НДФЛПерерасчет.РаботникиОрганизации КАК СтрокиНДФЛ
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиНДФЛ.ФизЛицо
	|
	|ИМЕЮЩИЕ
	|	СУММА(СтрокиНДФЛ.НалогПоСтавке13) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНДФЛудержанный()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 		 - флаг отказа в проведении,
//	Заголовок	 - Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НалоговыйПериод) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан налоговый период, за который выполняется перерасчет налога!", Отказ, Заголовок);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодВзаиморасчетов) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан месяц, в котором следует отразить расчеты с работниками!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строки документа.
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоРаботникиОрганизации, Отказ, Заголовок)

		НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоРаботникиОрганизации.НомерСтроки) +
									""" табл. части ""РаботникиОрганизации"": ";
									
		Если НЕ ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ФизЛицо) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указано физическое лицо!", Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.НалогПоСтавке09 + ВыборкаПоРаботникиОрганизации.НалогПоСтавке13 + ВыборкаПоРаботникиОрганизации.НалогПоСтавке35 
			+ ВыборкаПоРаботникиОрганизации.ПримененныйВычетЛичный + ВыборкаПоРаботникиОрганизации.ПримененныйВычетНаДетей + ВыборкаПоРаботникиОрганизации.ПримененныйВычетНаДетейЛьгота
			+ ВыборкаПоРаботникиОрганизации.ПримененныйВычетИмущественныйРасход + ВыборкаПоРаботникиОрганизации.ПримененныйВычетСоциальныйСПроцентами + ВыборкаПоРаботникиОрганизации.ПримененныйВычетСтраховойРасход) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указаны суммы перерасчета налога!", Отказ, Заголовок);
		КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи.
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                 накопления по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, УпрощенныйУчетНДФЛ, УчетЗадолженностиПоМесяцам) 
	
		// Перерасчет - начисление налога
		
		Если Год(ВыборкаПоШапкеДокумента.Дата) > ВыборкаПоШапкеДокумента.НалоговыйПериод Тогда
			МесяцНалоговогоПериода = Дата(ВыборкаПоШапкеДокумента.НалоговыйПериод, 12, 1);
		Иначе	
			МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоШапкеДокумента.Дата);
		КонецЕсли; 
		
		Если ВыборкаПоТЧ.НалогПоСтавке09 <> 0 Тогда
			Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
			// Свойства
			Движение.Период                 		= ПериодВзаиморасчетов;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			// Измерения
			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
			Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09;
			Движение.МесяцНалоговогоПериода 		= МесяцНалоговогоПериода;
			// Ресурсы
			Движение.Налог							= ВыборкаПоТЧ.НалогПоСтавке09; 
			// Реквизиты
			Движение.ОбособленноеПодразделение  	= ВыборкаПоШапкеДокумента.Организация;
			Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
			Движение.ИсчисленоИзЗарплаты			= Истина;
		КонецЕсли;
		
		Если (ВыборкаПоТЧ.НалогПоСтавке13 <> 0) Или (ВыборкаПоТЧ.ПримененныйВычетЛичный <> 0) Или (ВыборкаПоТЧ.ПримененныйВычетНаДетей <> 0) Или (ВыборкаПоТЧ.ПримененныйВычетНаДетейЛьгота <> 0) Или (ВыборкаПоТЧ.ПримененныйВычетДополнительный <> 0) Тогда
			Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
			// Свойства
			Движение.Период                 		= ПериодВзаиморасчетов;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			// Измерения
			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
			Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
			Движение.МесяцНалоговогоПериода      	= ПериодВзаиморасчетов;
			// Ресурсы
			Движение.Налог							= ВыборкаПоТЧ.НалогПоСтавке13; 
			Движение.ПримененныйВычетЛичный			= ВыборкаПоТЧ.ПримененныйВычетЛичный; 
			Движение.ПримененныйВычетНаДетей		= ВыборкаПоТЧ.ПримененныйВычетНаДетей; 
			Движение.ПримененныйВычетНаДетейЛьгота= ВыборкаПоТЧ.ПримененныйВычетНаДетейЛьгота; 
			Движение.ПримененныйДополнительныйВычет= ВыборкаПоТЧ.ПримененныйВычетДополнительный; 
			// Реквизиты
			Движение.ОбособленноеПодразделение  	= ВыборкаПоШапкеДокумента.Организация;
			Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
			Движение.ИсчисленоИзЗарплаты			= Истина;
		КонецЕсли;
		
		Если ВыборкаПоТЧ.НалогПоСтавке35 <> 0 Тогда
			Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
			// Свойства
			Движение.Период                 		= ПериодВзаиморасчетов;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			// Измерения
			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
			Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35;
			Движение.МесяцНалоговогоПериода 		= МесяцНалоговогоПериода;
			// Ресурсы
			Движение.Налог							= ВыборкаПоТЧ.НалогПоСтавке35; 
			// Реквизиты
			Движение.ОбособленноеПодразделение  	= ВыборкаПоШапкеДокумента.Организация;
			Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
			Движение.ИсчисленоИзЗарплаты			= Истина;
		КонецЕсли;
		
		Если ВыборкаПоТЧ.НалогПоСтавке9 <> 0 Тогда
			Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
			// Свойства
			Движение.Период                 		= ПериодВзаиморасчетов;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			// Измерения
			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
			Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка9;
			Движение.МесяцНалоговогоПериода 		= МесяцНалоговогоПериода;
			// Ресурсы
			Движение.Налог							= ВыборкаПоТЧ.НалогПоСтавке9; 
			// Реквизиты
			Движение.ОбособленноеПодразделение  	= ВыборкаПоШапкеДокумента.Организация;
			Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
			Движение.ИсчисленоИзЗарплаты			= Истина;
		КонецЕсли;
		
		Если ВыборкаПоТЧ.НалогПоСтавке40 <> 0 Тогда
			Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
			// Свойства
			Движение.Период                 		= ПериодВзаиморасчетов;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			// Измерения
			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
			Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка40;
			Движение.МесяцНалоговогоПериода 		= МесяцНалоговогоПериода;
			// Ресурсы
			Движение.Налог							= ВыборкаПоТЧ.НалогПоСтавке40; 
			// Реквизиты
			Движение.ОбособленноеПодразделение  	= ВыборкаПоШапкеДокумента.Организация;
			Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
			Движение.ИсчисленоИзЗарплаты			= Истина;
		КонецЕсли;
		
		// имущественные вычеты
		Если ВыборкаПоТЧ.ПримененныйВычетИмущественныйРасход <> 0 Тогда 
			Движение = Движения.НДФЛИмущественныеВычетыФизлиц.Добавить();
			
			// Свойства
			Движение.Период							= МесяцНалоговогоПериода;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.ФизЛицо	 	 	 			= ВыборкаПоТЧ.ФизЛицо;
			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.Год							= ВыборкаПоШапкеДокумента.НалоговыйПериод;
			Движение.КодВычетаИмущественный			= Справочники.ВычетыНДФЛ.Код650;
			
			// Ресурсы
			Движение.Размер							= ВыборкаПоТЧ.ПримененныйВычетИмущественныйРасход; 
			
		КонецЕсли;
	
		Если ВыборкаПоТЧ.ПримененныйВычетСоциальныйСПроцентами <> 0 Тогда
			
			Движение = Движения.НДФЛИмущественныеВычетыФизлиц.Добавить();
			
			// Свойства
			Движение.Период							= МесяцНалоговогоПериода;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.ФизЛицо	 	 	 			= ВыборкаПоТЧ.ФизЛицо;
			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.Год							= ВыборкаПоШапкеДокумента.НалоговыйПериод;
			Движение.КодВычетаИмущественный			= Справочники.ВычетыНДФЛ.Код640;
			
			// Ресурсы
			Движение.Размер							= ВыборкаПоТЧ.ПримененныйВычетСоциальныйСПроцентами; 
			
		КонецЕсли;
		
		Если ВыборкаПоТЧ.ПримененныйВычетСтраховойРасход <> 0 Тогда
			
			Движение = Движения.НДФЛИмущественныеВычетыФизлиц.Добавить();
			
			// Свойства
			Движение.Период							= МесяцНалоговогоПериода;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.ФизЛицо	 	 	 			= ВыборкаПоТЧ.ФизЛицо;
			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.Год							= ВыборкаПоШапкеДокумента.НалоговыйПериод;
			Движение.КодВычетаИмущественный			= Справочники.ВычетыНДФЛ.Код640страх;
			
			// Ресурсы
			Движение.Размер							= ВыборкаПоТЧ.ПримененныйВычетСтраховойРасход; 
			
		КонецЕсли;

	
		// сразу же, не дожидаясь выплаты, регистрируем факт удержания налога по ставкам 9 и 35%
		Если УпрощенныйУчетНДФЛ Тогда 

			Если ВыборкаПоТЧ.НалогПоСтавке09 <> 0 Тогда
				Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
				// Свойства
				Движение.Период                 		= ВыборкаПоШапкеДокумента.Дата;
				Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
				// Измерения
				Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
				Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09;
				Движение.МесяцНалоговогоПериода 		= МесяцНалоговогоПериода;
				// Ресурсы
				Движение.Налог							= ВыборкаПоТЧ.НалогПоСтавке09; 
				// Реквизиты
				Движение.ОбособленноеПодразделение  	= ВыборкаПоШапкеДокумента.Организация;
				Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
			КонецЕсли;
			
			Если ВыборкаПоТЧ.НалогПоСтавке9 <> 0 Тогда
				Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
				// Свойства
				Движение.Период                 		= ВыборкаПоШапкеДокумента.Дата;
				Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
				// Измерения
				Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
				Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка9;
				Движение.МесяцНалоговогоПериода 		= МесяцНалоговогоПериода;
				// Ресурсы
				Движение.Налог							= ВыборкаПоТЧ.НалогПоСтавке9; 
				// Реквизиты
				Движение.ОбособленноеПодразделение  	= ВыборкаПоШапкеДокумента.Организация;
				Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
			КонецЕсли;
			
			Если ВыборкаПоТЧ.НалогПоСтавке40 <> 0 Тогда
				Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
				// Свойства
				Движение.Период                 		= ВыборкаПоШапкеДокумента.Дата;
				Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
				// Измерения
				Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
				Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка40;
				Движение.МесяцНалоговогоПериода 		= МесяцНалоговогоПериода;
				// Ресурсы
				Движение.Налог							= ВыборкаПоТЧ.НалогПоСтавке40; 
				// Реквизиты
				Движение.ОбособленноеПодразделение  	= ВыборкаПоШапкеДокумента.Организация;
				Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
			КонецЕсли;
			
			Если ВыборкаПоТЧ.НалогПоСтавке35 <> 0 Тогда
				Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
				// Свойства
				Движение.Период                 		= ВыборкаПоШапкеДокумента.Дата;
				Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
				// Измерения
				Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
				Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35;
				Движение.МесяцНалоговогоПериода 		= МесяцНалоговогоПериода;
				// Ресурсы
				Движение.Налог							= ВыборкаПоТЧ.НалогПоСтавке35; 
				// Реквизиты
				Движение.ОбособленноеПодразделение  	= ВыборкаПоШапкеДокумента.Организация;
				Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
			КонецЕсли;
			
		КонецЕсли;

		// регистрация перерасчета во взаиморасчетах с работниками
		
		Если ВыборкаПоТЧ.НалогПоСтавке09 > 0 Тогда
			Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
			// Свойства
			Движение.Период           				= ВыборкаПоШапкеДокумента.Дата;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			// Измерения
			Движение.Организация					= ВыборкаПоШапкеДокумента.Организация;
			Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
			//vvv комментируем
			//Если УчетЗадолженностиПоМесяцам Тогда
			//	Движение.ПериодВзаиморасчетов           = ВыборкаПоШапкеДокумента.ПериодВзаиморасчетов;
			//КонецЕсли;
			Движение.ПериодВзаиморасчетов           = НачалоМесяца(ВыборкаПоШапкеДокумента.Дата);
			//
			
			// Ресурсы
			Движение.СуммаВзаиморасчетов			= - ВыборкаПоТЧ.НалогПоСтавке09; 
		КонецЕсли;
		
		Если ВыборкаПоТЧ.НалогПоСтавке13 > 0 Тогда
			Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
			// Свойства
			Движение.Период           				= ПериодВзаиморасчетов;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			// Измерения
			Движение.Организация					= ВыборкаПоШапкеДокумента.Организация;
			Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
			//vvv комментируем
			//Если УчетЗадолженностиПоМесяцам Тогда
			//	Движение.ПериодВзаиморасчетов           = ВыборкаПоШапкеДокумента.ПериодВзаиморасчетов;
			//КонецЕсли;
			Движение.ПериодВзаиморасчетов           = НачалоМесяца(ВыборкаПоШапкеДокумента.Дата);
			//
			
			// Ресурсы
			Движение.СуммаВзаиморасчетов			= - ВыборкаПоТЧ.НалогПоСтавке13; 
		КонецЕсли;
		
		Если ВыборкаПоТЧ.НалогПоСтавке35 > 0 Тогда
			Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
			// Свойства
			Движение.Период           				= ВыборкаПоШапкеДокумента.Дата;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			// Измерения
			Движение.Организация					= ВыборкаПоШапкеДокумента.Организация;
			Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
			//vvv комментируем
			//Если УчетЗадолженностиПоМесяцам Тогда
			//	Движение.ПериодВзаиморасчетов           = ВыборкаПоШапкеДокумента.ПериодВзаиморасчетов;
			//КонецЕсли;
			Движение.ПериодВзаиморасчетов           = НачалоМесяца(ВыборкаПоШапкеДокумента.Дата);
			//
			
			// Ресурсы
			Движение.СуммаВзаиморасчетов			= - ВыборкаПоТЧ.НалогПоСтавке35; 
		КонецЕсли;
		
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ВыборкаПоШапкеДокумента		- выборка по данным шапки документа
//	НаборЗаписей				- набор записей для НДФЛРасчетыСБюджетом
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуНДФЛКЗачету(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента)

    // НДФЛ к зачету
    Если ВыборкаПоСтрокамДокумента.Налог < 0 Тогда
    	Движение = Движения.НДФЛКЗачету.Добавить();

    	// Свойства
    	Движение.Период						= ПериодВзаиморасчетов;
		Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

    	// Измерения
    	Движение.ФизЛицо                        = ВыборкаПоСтрокамДокумента.ФизЛицо;
    	Движение.Организация				    = ВыборкаПоШапкеДокумента.Организация;
    	Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоСтрокамДокумента.Ставка;

    	// Ресурсы
    	Движение.СуммаНДФЛКЗачету			= - ВыборкаПоСтрокамДокумента.Налог;
        
    ИначеЕсли ВыборкаПоСтрокамДокумента.НДФЛКЗачетуУчтено <> 0 Тогда
		
		Движение = Движения.НДФЛКЗачету.Добавить();

		// Свойства
		Движение.Период		 = ПериодВзаиморасчетов;
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		
		// Измерения
		Движение.ФизЛицо                        = ВыборкаПоСтрокамДокумента.ФизЛицо;
		Движение.Организация				    = ВыборкаПоШапкеДокумента.Организация;
    	Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоСтрокамДокумента.Ставка;
		
		// Ресурсы
		Движение.СуммаНДФЛКЗачету			= ВыборкаПоСтрокамДокумента.НДФЛКЗачетуУчтено;
	        
    КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛКЗачету

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ВыборкаПоШапкеДокумента		- выборка по данным шапки документа
//	НаборЗаписей				- набор записей для НДФЛРасчетыСБюджетом
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуНДФЛудержанный(ВыборкаСуммКУдержанию, ВыборкаПоНДФЛКЗачету, ВыборкаПоШапкеДокумента)
	
	НалогКУдержанию = ВыборкаСуммКУдержанию.Налог; // положительная сумма исчисленного налога
	
	// учтем возможный зачет образовавшейся ранее переплаты налога
	ВыборкаПоНДФЛКЗачету.Сбросить();
	Если ВыборкаПоНДФЛКЗачету.НайтиСледующий(ВыборкаСуммКУдержанию.ФизЛицо,"ФизЛицо") Тогда
		НалогКУдержанию = НалогКУдержанию - ВыборкаПоНДФЛКЗачету.НДФЛКЗачетуУчтено;
	КонецЕсли;
	
	Если Год(ВыборкаПоШапкеДокумента.Дата) > ВыборкаПоШапкеДокумента.НалоговыйПериод Тогда
		МесяцНалоговогоПериода = Дата(ВыборкаПоШапкеДокумента.НалоговыйПериод, 12, 1);
	Иначе	
		МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоШапкеДокумента.Дата);
	КонецЕсли; 
	
	Если НалогКУдержанию > 0 Тогда
		Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
		// Свойства
		Движение.Период                 		= ВыборкаПоШапкеДокумента.Дата;
		Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
		// Измерения
		Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ФизЛицо                		= ВыборкаСуммКУдержанию.ФизЛицо;
		Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
		Движение.МесяцНалоговогоПериода      	= МесяцНалоговогоПериода;
		// Ресурсы
		Движение.Налог							= НалогКУдержанию; 
		// Реквизиты
		Движение.ОбособленноеПодразделение  	= ВыборкаПоШапкеДокумента.Организация;
		Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛудержанный

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// получим учетную политику
			УпрощенныйУчетНДФЛ = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетНДФЛ");
			
			// ведется ли учет задолженности в разрезе периодов возникновения задолженности
			УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");

			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(Режим);
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);
				
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, УпрощенныйУчетНДФЛ, УчетЗадолженностиПоМесяцам);

			КонецЦикла;
				
            // НДФЛ к зачету
			// получим реквизиты табличной части
			Если НЕ Отказ Тогда
				
				ВыборкаПоНДФЛКЗачету = СформироватьЗапросПоНДФЛКЗачету().Выбрать();
				Пока ВыборкаПоНДФЛКЗачету.Следующий() Цикл 
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуНДФЛКЗачету(ВыборкаПоНДФЛКЗачету, ВыборкаПоШапкеДокумента);
	            КонецЦикла;
				
				Если УпрощенныйУчетНДФЛ Тогда
					
					ВыборкаПоНДФЛуд = СформироватьЗапросПоНДФЛудержанный().Выбрать();
					Пока ВыборкаПоНДФЛуд.Следующий() Цикл 

						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуНДФЛудержанный(ВыборкаПоНДФЛуд, ВыборкаПоНДФЛКЗачету, ВыборкаПоШапкеДокумента);
						
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
				
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации,, "Физлицо");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "КарточкаДепонента" тогда
		
		ТабДокумент = ПечатьКарточкиДепонента();
		Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,"Карточки депонентов"));
		
	КонецЕсли;

КонецФункции // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КарточкаДепонента","Карточка депонента");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Определяет сумму неполученной заработной платы по платежной ведомости
//
// Параметры
//  Ведомость - ДокументСсылка.ЗарплатаКВыплатеОрганизации - обрабатываемая платежная ведомость
//
// Возвращаемое значение:
//   число - сумма к депонированию
//
Функция ПолучитьДанныеПлатежнойВедомостиДляДепонирования(Ведомости) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("ВыплаченностьЗарплаты", Перечисления.ВыплаченностьЗарплаты.Задепонировано);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеЗарплата.Ссылка,
	|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма + ЗарплатаКВыплатеЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|			И ЗарплатаКВыплатеЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|			И (РанееВыплаченныеСуммы.Регистратор <> &Регистратор)
	|ГДЕ
	|	ЗарплатаКВыплатеЗарплата.Ссылка В(&Ведомости)
	|	И ЗарплатаКВыплатеЗарплата.ВыплаченностьЗарплаты = &ВыплаченностьЗарплаты
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеЗарплата.Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеПлатежнойВедомостиДляДепонирования()

// Выполняет автоматическое заполнение документа 
// 
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  нет
//
Процедура Автозаполнение() Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|			И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|			И (РанееВыплаченныеСуммы.Регистратор <> &Регистратор)
	|ГДЕ
	|	(НЕ ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|				ИЗ
	|					Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|				ГДЕ
	|					ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособВыплаты = &ЧерезКассу
	|					И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &НеВыплачено
	|					И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация = &Организация))
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация = &Организация
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособВыплаты = &ЧерезКассу
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Задепонировано
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата <= &Дата
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка";
	
	Запрос.УстановитьПараметр("ЧерезКассу",Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу);
	Запрос.УстановитьПараметр("НеВыплачено",Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
	Запрос.УстановитьПараметр("Задепонировано",Перечисления.ВыплаченностьЗарплаты.Задепонировано);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Дата",?(ЭтоНовый(),КонецДня(Дата),Дата));
	ДепонированиеЗаработнойПлаты.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры //  Автозаполнение

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",   Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",	  Дата);

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.УстановитьПараметр("Кассир", Перечисления.ОтветственныеЛицаОрганизаций.Кассир);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДепонированиеОрганизаций.Дата КАК ДатаДок,
		|	ВЫРАЗИТЬ(ДепонированиеОрганизаций.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации
		|ИЗ
		|	Документ.ДепонированиеОрганизаций КАК ДепонированиеОрганизаций
		|ГДЕ
		|	ДепонированиеОрганизаций.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда
		
		Запрос.УстановитьПараметр("Задепонировано",				Перечисления.ВыплаченностьЗарплаты.Задепонировано);
		Запрос.УстановитьПараметр("ВнутреннееСовместительство",	Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
		Запрос.УстановитьПараметр("Организация",				ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		Запрос.УстановитьПараметр("Уволен",						Перечисления.ПричиныИзмененияСостояния.Увольнение);
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.НомерСтроки КАК НомерСтроки,
		|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Дата КАК ДатаВедомости,
		|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Номер КАК НомерВедомости,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ, ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо.Наименование) КАК ФИОРаботника,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты КАК Сумма
		|ИЗ
		|	Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ДепонированиеОрганизацийДепонированиеЗаработнойПлаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|		&ДатаДокумента,
		|		Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство
		|			И Организация = &Организация) КАК РаботникиОрганизаций
		|			ПО (РаботникиОрганизаций.ПричинаИзмененияСостояния <> &Уволен)
		|				И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо
		|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
		|			И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
		|			И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
		|ГДЕ
		|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка = &ДокументСсылка
		|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Задепонировано
		|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL ";
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()
 
#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой карточки.
//
// Возвращаемое значение:
//   Табличный документ - печатная форма
//
Функция ПечатьКарточкиДепонента()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДепонированиеОрганизаций_КарточкиДепонента";
	
	Макет 		= ПолучитьМакет("КарточкаДепонента");
	
	// получаем данные для печати
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();
	
	ОбластьМакета = Макет.ПолучитьОбласть("Карточка");
	
	// выводим общие данные
	Если ВыборкаДляШапки.Следующий() Тогда 
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
	КонецЕсли;
	
	ВыведеноСтрок = 0;
	ВалютаРасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	// выводим данные по строкам документа.
	Пока ВыборкаРаботники.Следующий() Цикл
	
		ВыведеноСтрок = ВыведеноСтрок + 1;
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакета.Параметры.НомерКарточки = "" + Номер + "/" + ВыведеноСтрок;
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСДиалогами.СформироватьСуммуПрописью(ВыборкаРаботники.Сумма, ВалютаРасчетов);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// разбиение на страницы
		Если ВыведеноСтрок % 2 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьКарточкиДепонента()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Задепонировано", Перечисления.ВыплаченностьЗарплаты.Задепонировано);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДепонированиеОрганизаций.Дата,
	|	ДепонированиеОрганизаций.Ссылка,
	|	ДепонированиеОрганизаций.Организация,
	|	ВЫБОР
	|		КОГДА ДепонированиеОрганизаций.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	|			ТОГДА ДепонированиеОрганизаций.Организация
	|		ИНАЧЕ ДепонированиеОрганизаций.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация
	|ИЗ
	|	Документ.ДепонированиеОрганизаций КАК ДепонированиеОрганизаций
	|ГДЕ
	|	ДепонированиеОрганизаций.Ссылка = &ДокументСсылка";

	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоДепонированиеЗаработнойПлаты()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("Дата" , Дата);
	Запрос.УстановитьПараметр("Задепонировано", Перечисления.ВыплаченностьЗарплаты.Задепонировано);
	Запрос.УстановитьПараметр("НеВыплачено", Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
	Запрос.УстановитьПараметр("Выплачено", Перечисления.ВыплаченностьЗарплаты.Выплачено);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.НомерСтроки КАК НомерСтроки,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость КАК Ведомость,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Номер КАК Номер,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Дата КАК Дата,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.ПериодРегистрации КАК ПериодРегистрацииВедомости,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.СпособВыплаты КАК СпособВыплатыВедомости,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Представление КАК ПредставлениеВедомости,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.НомерСтроки КАК НомерСтрокиВедомости,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК Физлицо,
	|	ЕСТЬNULL(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты, 0) КАК СуммаКДепонированию,
	|	ЕСТЬNULL(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты, 0) КАК КомпенсацияЗаЗадержкуЗарплаты,
	|	ОбщиеСуммыПоВедомости.НеПомеченнаяСумма,
	|	ВЫБОР
	|		КОГДА ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Сумма <> ЕСТЬNULL(ОбщиеСуммыПоВедомости.Задепонировано, 0)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СуммыСоответствуютВедомостям,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ХарактерВыплаты,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата КАК ДатаВедомости
	|ИЗ
	|	Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ДепонированиеОрганизацийДепонированиеЗаработнойПлаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
	|			И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|			И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.НомерСтроки КАК НомерСтроки,
	|			СУММА(ВЫБОР
	|					КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &НеВыплачено
	|						ТОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК НеПомеченнаяСумма,
	|			СУММА(ВЫБОР
	|					КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Задепонировано
	|						ТОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК Задепонировано
	|		ИЗ
	|			Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ДепонированиеОрганизацийДепонированиеЗаработнойПлаты
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|				ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|				ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
	|					И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|					И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
	|		ГДЕ
	|			ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка = &ДокументСсылка
	|			И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.НомерСтроки) КАК ОбщиеСуммыПоВедомости
	|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.НомерСтроки = ОбщиеСуммыПоВедомости.НомерСтроки
	|ГДЕ
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка = &ДокументСсылка
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Задепонировано
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ведомость,
	|	Физлицо";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоДепонированиеЗаработнойПлаты()

Функция СформироватьЗапросПоНДФЛ(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("Дата" , Дата);
	Запрос.УстановитьПараметр("Задепонировано", Перечисления.ВыплаченностьЗарплаты.Задепонировано);
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПлДок.Ссылка.Дата > КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
	|			ТОГДА ПлДок.Ссылка.Дата
	|		ИНАЧЕ КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
	|	КОНЕЦ КАК ДатаНДФЛ
	|ИЗ
	|	Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ПлДок
	|ГДЕ
	|	ПлДок.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлДок.Ссылка.Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Запрос.УстановитьПараметр("ДатаНДФЛ", Выборка.ДатаНДФЛ);
	Запрос.УстановитьПараметр("Ставка13", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК Физлицо,
	|	ЕСТЬNULL(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцам.СальдоПоНалогу, 0) КАК СальдоПоНалогуЗаМесяц,
	|	НДФЛРасчетыСБюджетомПоМесяцам.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	НДФЛРасчетыСБюджетомПоМесяцам.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоГодам.СальдоПоНалогу, 0) КАК СальдоПоНалогуЗаНалоговыйПериод,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.КодПоОКАТО, """") КАК КодПоОКАТО,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.КПП, """") КАК КПП,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ПодразделениеОрганизации,
	|	НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.Период КАК ДатаРегистрацииКодаОКАТО,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.СальдоПоНалогу, 0) КАК СальдоПоОКАТО,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего.СальдоПоНалогу, 0) КАК ВсегоЗаМесяцПоОКАТО
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК Физлицо,
	|		СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма
	|	ИЗ
	|		Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ДепонированиеОрганизацийДепонированиеЗаработнойПлаты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|			ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|			ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
	|				И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|				И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
	|	ГДЕ
	|		ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка = &ДокументСсылка
	|		И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Задепонировано
	|		И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо) КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|			НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|			НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|			СУММА(НДФЛРасчетыСБюджетом.СальдоПоНалогу) КАК СальдоПоНалогу
	|		ИЗ
	|			(ВЫБРАТЬ
	|				НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|				НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|				НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|				ВЫБОР
	|					КОГДА НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ТОГДА НДФЛРасчетыСБюджетом.Налог
	|					ИНАЧЕ -НДФЛРасчетыСБюджетом.Налог
	|				КОНЕЦ КАК СальдоПоНалогу
	|			ИЗ
	|				РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|			ГДЕ
	|				НДФЛРасчетыСБюджетом.Регистратор <> &ДокументСсылка
	|				И НДФЛРасчетыСБюджетом.Организация = &ГоловнаяОрганизация
	|				И НДФЛРасчетыСБюджетом.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				И НДФЛРасчетыСБюджетом.Период <= &ДатаНДФЛ
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				НДФЛКЗачету.ФизЛицо,
	|				НАЧАЛОПЕРИОДА(НДФЛКЗачету.Период, МЕСЯЦ),
	|				&Ставка13,
	|				ВЫБОР
	|					КОГДА НДФЛКЗачету.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ТОГДА НДФЛКЗачету.СуммаНДФЛКЗачету
	|					ИНАЧЕ -НДФЛКЗачету.СуммаНДФЛКЗачету
	|				КОНЕЦ
	|			ИЗ
	|				РегистрНакопления.НДФЛКЗачету КАК НДФЛКЗачету
	|			ГДЕ
	|				НДФЛКЗачету.Регистратор <> &ДокументСсылка
	|				И НДФЛКЗачету.Организация = &ГоловнаяОрганизация
	|				И НДФЛКЗачету.Период <= &ДатаНДФЛ) КАК НДФЛРасчетыСБюджетом
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НДФЛРасчетыСБюджетом.ФизЛицо,
	|			НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|			НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ)) КАК НДФЛРасчетыСБюджетомПоМесяцам
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|				НДФЛРасчетыСБюджетом.НалоговыйПериод КАК НалоговыйПериод,
	|				НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|				СУММА(НДФЛРасчетыСБюджетом.СальдоПоНалогу) КАК СальдоПоНалогу
	|			ИЗ
	|				(ВЫБРАТЬ
	|					НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|					НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, ГОД) КАК НалоговыйПериод,
	|					НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|					ВЫБОР
	|						КОГДА НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА НДФЛРасчетыСБюджетом.Налог
	|						ИНАЧЕ -НДФЛРасчетыСБюджетом.Налог
	|					КОНЕЦ КАК СальдоПоНалогу
	|				ИЗ
	|					РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|				ГДЕ
	|					НДФЛРасчетыСБюджетом.Регистратор <> &ДокументСсылка
	|					И НДФЛРасчетыСБюджетом.Организация = &ГоловнаяОрганизация
	|					И НДФЛРасчетыСБюджетом.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|					И НДФЛРасчетыСБюджетом.Период <= &ДатаНДФЛ
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ
	|					НДФЛКЗачету.ФизЛицо,
	|					НАЧАЛОПЕРИОДА(НДФЛКЗачету.Период, ГОД),
	|					&Ставка13,
	|					ВЫБОР
	|						КОГДА НДФЛКЗачету.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА НДФЛКЗачету.СуммаНДФЛКЗачету
	|						ИНАЧЕ -НДФЛКЗачету.СуммаНДФЛКЗачету
	|					КОНЕЦ
	|				ИЗ
	|					РегистрНакопления.НДФЛКЗачету КАК НДФЛКЗачету
	|				ГДЕ
	|					НДФЛКЗачету.Регистратор <> &ДокументСсылка
	|					И НДФЛКЗачету.Организация = &ГоловнаяОрганизация
	|					И НДФЛКЗачету.Период <= &ДатаНДФЛ) КАК НДФЛРасчетыСБюджетом
	|			
	|			СГРУППИРОВАТЬ ПО
	|				НДФЛРасчетыСБюджетом.ФизЛицо,
	|				НДФЛРасчетыСБюджетом.НалоговыйПериод,
	|				НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента) КАК НДФЛРасчетыСБюджетомПоГодам
	|			ПО НДФЛРасчетыСБюджетомПоМесяцам.ФизЛицо = НДФЛРасчетыСБюджетомПоГодам.ФизЛицо
	|				И НДФЛРасчетыСБюджетомПоМесяцам.СтавкаНалогообложенияРезидента = НДФЛРасчетыСБюджетомПоГодам.СтавкаНалогообложенияРезидента
	|				И (НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетомПоМесяцам.МесяцНалоговогоПериода, ГОД) = НДФЛРасчетыСБюджетомПоГодам.НалоговыйПериод)
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|				НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|				НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|				СУММА(ВЫБОР
	|						КОГДА НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА НДФЛРасчетыСБюджетом.Налог
	|						ИНАЧЕ -НДФЛРасчетыСБюджетом.Налог
	|					КОНЕЦ) КАК СальдоПоНалогу,
	|				НДФЛРасчетыСБюджетом.КодПоОКАТО КАК КодПоОКАТО,
	|				НДФЛРасчетыСБюджетом.КПП КАК КПП,
	|				МАКСИМУМ(НДФЛРасчетыСБюджетом.Период) КАК Период,
	|				НДФЛРасчетыСБюджетом.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|			ИЗ
	|				РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|			ГДЕ
	|				НДФЛРасчетыСБюджетом.Регистратор <> &ДокументСсылка
	|				И НДФЛРасчетыСБюджетом.Организация = &ГоловнаяОрганизация
	|				И НДФЛРасчетыСБюджетом.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				И НДФЛРасчетыСБюджетом.Период <= &ДатаНДФЛ
	|			
	|			СГРУППИРОВАТЬ ПО
	|				НДФЛРасчетыСБюджетом.ФизЛицо,
	|				НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|				НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|				НДФЛРасчетыСБюджетом.КодПоОКАТО,
	|				НДФЛРасчетыСБюджетом.КПП,
	|				НДФЛРасчетыСБюджетом.ПодразделениеОрганизации) КАК НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО
	|			ПО НДФЛРасчетыСБюджетомПоМесяцам.ФизЛицо = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.ФизЛицо
	|				И НДФЛРасчетыСБюджетомПоМесяцам.СтавкаНалогообложенияРезидента = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.СтавкаНалогообложенияРезидента
	|				И НДФЛРасчетыСБюджетомПоМесяцам.МесяцНалоговогоПериода = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.МесяцНалоговогоПериода
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|				НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|				НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|				СУММА(ВЫБОР
	|						КОГДА НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА НДФЛРасчетыСБюджетом.Налог
	|						ИНАЧЕ -НДФЛРасчетыСБюджетом.Налог
	|					КОНЕЦ) КАК СальдоПоНалогу
	|			ИЗ
	|				РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|			ГДЕ
	|				НДФЛРасчетыСБюджетом.Регистратор <> &ДокументСсылка
	|				И НДФЛРасчетыСБюджетом.Организация = &ГоловнаяОрганизация
	|				И НДФЛРасчетыСБюджетом.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				И НДФЛРасчетыСБюджетом.Период <= &ДатаНДФЛ
	|			
	|			СГРУППИРОВАТЬ ПО
	|				НДФЛРасчетыСБюджетом.ФизЛицо,
	|				НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|				НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента) КАК НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего
	|			ПО НДФЛРасчетыСБюджетомПоМесяцам.ФизЛицо = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего.ФизЛицо
	|				И НДФЛРасчетыСБюджетомПоМесяцам.СтавкаНалогообложенияРезидента = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего.СтавкаНалогообложенияРезидента
	|				И НДФЛРасчетыСБюджетомПоМесяцам.МесяцНалоговогоПериода = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего.МесяцНалоговогоПериода
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = НДФЛРасчетыСБюджетомПоМесяцам.ФизЛицо
	|ГДЕ
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцам.СальдоПоНалогу, 0) > 0
	|	И ЕСТЬNULL(НДФЛРасчетыСБюджетомПоГодам.СальдоПоНалогу, 0) > 0
	|	И ЕСТЬNULL(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	СтавкаНалогообложенияРезидента,
	|	МесяцНалоговогоПериода,
	|	ДатаРегистрацииКодаОКАТО";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНДФЛ()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 		 - флаг отказа в проведении,
//	Заголовок	 - Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строки документа.
Процедура ПроверитьЗаполнениеСтрокиДепонированиеЗаработнойПлаты(ВыборкаПоДепонированиеЗаработнойПлаты, Отказ, Заголовок)

	НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоДепонированиеЗаработнойПлаты.НомерСтроки) +
					  """ табл. части: ";
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоДепонированиеЗаработнойПлаты.Ведомость) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указана платежная ведомость!", Отказ, Заголовок);
	Иначе
		Если ВыборкаПоДепонированиеЗаработнойПлаты.СпособВыплатыВедомости <> Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "указан документ, не предназначенный для оплаты через кассу!", Отказ, Заголовок);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаПоДепонированиеЗаработнойПлаты.ПериодРегистрацииВедомости) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "указана платежная ведомость (" + ВыборкаПоДепонированиеЗаработнойПлаты.ПредставлениеВедомости + "), в которой не указан месяц начисления выплачиваемой зарплаты!", Отказ, Заголовок);
		Иначе
			Если Дата < ВыборкаПоДепонированиеЗаработнойПлаты.ПериодРегистрацииВедомости Тогда
				ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "указана платежная ведомость (" + ВыборкаПоДепонированиеЗаработнойПлаты.ПредставлениеВедомости + "), месяц начисления которой больше даты депонирования!",Отказ,Заголовок);
			КонецЕсли;
			Если Дата < ВыборкаПоДепонированиеЗаработнойПлаты.ДатаВедомости Тогда
				ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "указана платежная ведомость (" + ВыборкаПоДепонированиеЗаработнойПлаты.ПредставлениеВедомости + "), которая оформлена позже этого депонирования!",Отказ,Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоДепонированиеЗаработнойПлаты.НеПомеченнаяСумма) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "указана платежная ведомость (" + ВыборкаПоДепонированиеЗаработнойПлаты.ПредставлениеВедомости + "), в которой есть строки с невыплаченной зарплатой!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ВыборкаПоДепонированиеЗаработнойПлаты.СуммыСоответствуютВедомостям Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "сумма по строке документа не совпадает с суммой к депонированию по платежной ведомость!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиДепонированиеЗаработнойПлаты()

// Проверяет правильность заполнения строки Платежной ведомости.
Процедура ПроверитьЗаполнениеСтрокиПлатежнойВедомости(ВыборкаПоДепонированиеЗаработнойПлаты, Отказ, Заголовок)

	НачалоСообщения = "В документе " + СокрЛП(ВыборкаПоДепонированиеЗаработнойПлаты.ПредставлениеВедомости) +": ";
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоДепонированиеЗаработнойПлаты.ФизЛицо) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "в строке № """ + ВыборкаПоДепонированиеЗаработнойПлаты.НомерСтрокиВедомости + " не указано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиПлатежнойВедомости()

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи.
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                 накопления по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(СтруктураПроведенияПоРегистрамНакопления)

	СтруктураПроведенияПоРегистрамНакопления = Новый Структура();
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ВзаиморасчетыСРаботникамиОрганизаций");
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ВзаиморасчетыСДепонентамиОрганизаций");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, 
	СтруктураПроведенияПоРегистрамНакопления, УчетЗадолженностиПоМесяцам, СтруктураПараметров = "")
	
	ИмяРегистра = "ВзаиморасчетыСРаботникамиОрганизаций";
	Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда
		
		Если ВыборкаПоТЧ.СуммаКДепонированию <> 0 Тогда
			Движение = Движения[ИмяРегистра].Добавить();
			// Свойства
			Движение.Период           				= ВыборкаПоШапкеДокумента.Дата;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
			// Измерения
			Движение.Организация					= ВыборкаПоШапкеДокумента.Организация;
			Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
			//vvv комментируем
			//Если УчетЗадолженностиПоМесяцам Тогда
				Движение.ПериодВзаиморасчетов           = ВыборкаПоТЧ.ПериодРегистрацииВедомости;
			//КонецЕсли;
			
			// Ресурсы
			Движение.СуммаВзаиморасчетов			= ВыборкаПоТЧ.Сумма; 
			// Реквизиты
			Движение.ХарактерВыплаты				= ВыборкаПоТЧ.ХарактерВыплаты; 
			Движение.СпособВыплаты					= Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу; 
			Движение.Ведомость  					= ВыборкаПоТЧ.Ведомость; 
		КонецЕсли;
		
	КонецЕсли; 
	
	ИмяРегистра = "ВзаиморасчетыСДепонентамиОрганизаций";
	Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда
		
		Если ВыборкаПоТЧ.СуммаКДепонированию <> 0 Тогда
			Движение = Движения[ИмяРегистра].Добавить();
			// Свойства
			Движение.Период      = ВыборкаПоШапкеДокумента.Дата;
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			// Измерения
			Движение.Организация = ВыборкаПоШапкеДокумента.Организация;
			Движение.ФизЛицо     = ВыборкаПоТЧ.ФизЛицо;
			Движение.Ведомость   = ВыборкаПоТЧ.Ведомость;
			
			// Ресурсы
			Движение.Сумма		 = ВыборкаПоТЧ.СуммаКДепонированию; 
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоТЧ)
	
	Движение = Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Добавить();
	
	// Измерения
	Движение.ФизЛицо   = ВыборкаПоТЧ.ФизЛицо;
	Движение.Ведомость = ВыборкаПоТЧ.Ведомость;
	
	// Ресурсы
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРасчетамПоНДФЛ(ВыборкаПоШапкеДокумента, Выборка)
	
	ВременнаяТаблица = Новый ТаблицаЗначений;
	ВременнаяТаблица.Колонки.Добавить("КодПоОКАТО");
	ВременнаяТаблица.Колонки.Добавить("КПП");
	ВременнаяТаблица.Колонки.Добавить("ПодразделениеОрганизации");
	ВременнаяТаблица.Колонки.Добавить("СальдоПоОКАТО");
	
	СуммаКВыплате = Выборка.Сумма;
	
	Пока Выборка.СледующийПоЗначениюПоля("СтавкаНалогообложенияРезидента") Цикл
		// детальные записи по физлицу
		ОсталосьРаспределить = Мин(СуммаКВыплате,Выборка.СальдоПоНалогуЗаНалоговыйПериод);
		СуммаКВыплате = Макс(0,СуммаКВыплате - Выборка.СальдоПоНалогуЗаНалоговыйПериод);
		
		Пока Выборка.СледующийПоЗначениюПоля("МесяцНалоговогоПериода") И ОсталосьРаспределить > 0 Цикл
			
			// расчет суммы удерживаемого налога
			ПогашаемаяСумма = Мин(Выборка.СальдоПоНалогуЗаМесяц, ОсталосьРаспределить);
			ОсталосьРаспределить = ОсталосьРаспределить - ПогашаемаяСумма;
			
			Если Выборка.ВсегоЗаМесяцПоОКАТО = Выборка.СальдоПоОКАТО Или Выборка.ВсегоЗаМесяцПоОКАТО = 0 Тогда
				
				// запись удержания
				Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
				
				ЗаполнитьЗначенияСвойств(Движение,Выборка); // ФизЛицо, СтавкаНалогообложенияРезидента, МесяцНалоговогоПериода 
															// КодПоОКАТО, КПП, ПодразделениеОрганизации
				
				//свойства
				Движение.Период      = ВыборкаПоШапкеДокумента.Дата;
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				//измерения
				Движение.Организация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				// ресурсы
				Движение.Налог       = ПогашаемаяСумма;
				// реквизиты
				Движение.ВидСтроки	 = Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
				Движение.ОбособленноеПодразделение = ВыборкаПоШапкеДокумента.Организация;
				
			Иначе
				
				ФизЛицо = Выборка.ФизЛицо;
				СтавкаНалогообложенияРезидента = Выборка.СтавкаНалогообложенияРезидента;
				МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
				
				ВременнаяТаблица.Очистить();
				Пока Выборка.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ВременнаяТаблица.Добавить(),Выборка);
				КонецЦикла;
				
				Результат = ОбщегоНазначения.РаспределитьПропорционально(ПогашаемаяСумма,ВременнаяТаблица.ВыгрузитьКолонку("СальдоПоОКАТО"));
				
				Для каждого СтрокаОКАТО Из ВременнаяТаблица Цикл
					
					// запись удержания
					Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
					//свойства
					Движение.Период      = ВыборкаПоШапкеДокумента.Дата;
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					//измерения
					Движение.Физлицо     = ФизЛицо;
					Движение.Организация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
					Движение.СтавкаНалогообложенияРезидента = СтавкаНалогообложенияРезидента;
					Движение.МесяцНалоговогоПериода = МесяцНалоговогоПериода;
					// ресурсы
					Движение.Налог       = Результат[ВременнаяТаблица.Индекс(СтрокаОКАТО)];
					// реквизиты
					Движение.ВидСтроки	 = Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
					Движение.ОбособленноеПодразделение = ВыборкаПоШапкеДокумента.Организация;
					Движение.КодПоОКАТО	 = СтрокаОКАТО.КодПоОКАТО; 
					Движение.КПП		 = СтрокаОКАТО.КПП; 
					Движение.ПодразделениеОрганизации = СтрокаОКАТО.ПодразделениеОрганизации; 
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРасчетамПоНДФЛ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура осуществляет заполнение на основании документа 
//	ЗарплатаКВыплатеОрганизаций
//
// Параметры:
//  Основание - документ основание, из которого брать данные.
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		// Определим сумму неполученной заработной платы
		РезультатЗапроса = ПолучитьДанныеПлатежнойВедомостиДляДепонирования(Основание);

		Если РезультатЗапроса.Количество() = 1 Тогда

			СтрокаВедомость = ДепонированиеЗаработнойПлаты.Добавить();
			
			СтрокаВедомость.Ведомость = Основание;
			СтрокаВедомость.Сумма = РезультатЗапроса[0].Сумма;

			СуммаДокумента = СтрокаВедомость.Сумма;
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("По текущей ведомости нет сумм к депонированию!")
		КонецЕсли;
	 		
		ЗапросДляЗаполнения	=	Новый	Запрос;
		ЗапросДляЗаполнения.УстановитьПараметр("ДокументСсылка",		Основание);
		ЗапросДляЗаполнения.УстановитьПараметр("Задепонировано",		Перечисления.ВыплаченностьЗарплаты.Задепонировано);
		
		ЗапросДляЗаполнения.Текст =
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Физлицо,
		|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Сумма
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &Задепонировано
		|	И ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &ДокументСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо.Наименование";
		
		
		Работники.Загрузить(ЗапросДляЗаполнения.Выполнить().Выгрузить());
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Запрос = Новый Запрос;

		// Установим параметры запроса
		Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
		Запрос.УстановитьПараметр("Задепонировано", Перечисления.ВыплаченностьЗарплаты.Задепонировано);
		Запрос.УстановитьПараметр("Ведомости", ДепонированиеЗаработнойПлаты.ВыгрузитьКолонку("Ведомость"));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо.Наименование КАК ФизлицоНаименование,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|			И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
		|			И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка В(&Ведомости)
		|	И ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты <> 0
		|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Задепонировано
		|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизлицоНаименование";

		Работники.Загрузить(Запрос.Выполнить().Выгрузить());
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Работники.Очистить();
		
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ДепонированиеЗаработнойПлаты.Итог("Сумма");
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Работники,, "Физлицо");

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда
			
			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(СтруктураПроведенияПоРегистрамНакопления);
			
			// ведется ли учет задолженности в разрезе периодов возникновения задолженности
			УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");

			// получим реквизиты табличной части
			РезультатЗапроса = СформироватьЗапросПоДепонированиеЗаработнойПлаты();
			
			Если РезультатЗапроса.Пустой() Тогда
				ОбщегоНазначения.СообщитьОбОшибке("По указанным документам на выплату зарплаты не обнаружено не получивших деньги работников, на которых ещё не оформлен документ ""Депонирование""!", Отказ, Заголовок);
			Иначе
				
				ВыборкаПоДепонированиеЗаработнойПлаты = РезультатЗапроса.Выбрать();
				Пока ВыборкаПоДепонированиеЗаработнойПлаты.СледующийПоЗначениюПоля("Ведомость") Цикл 
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиДепонированиеЗаработнойПлаты(ВыборкаПоДепонированиеЗаработнойПлаты, Отказ, Заголовок);
					
					Пока ВыборкаПоДепонированиеЗаработнойПлаты.СледующийПоЗначениюПоля("Физлицо") Цикл 
						
						ПроверитьЗаполнениеСтрокиПлатежнойВедомости(ВыборкаПоДепонированиеЗаработнойПлаты, Отказ, Заголовок);
						
						Если Не Отказ Тогда
							
							// Заполним записи в наборах записей регистров
							ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоДепонированиеЗаработнойПлаты);
							Если ВыборкаПоДепонированиеЗаработнойПлаты.СуммаКДепонированию > 0 Тогда
								ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоДепонированиеЗаработнойПлаты, СтруктураПроведенияПоРегистрамНакопления, УчетЗадолженностиПоМесяцам);
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			Если Не Отказ Тогда
				
				ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ(ВыборкаПоШапкеДокумента).Выбрать();
				Пока ВыборкаПоНДФЛ.СледующийПоЗначениюПоля("Физлицо") Цикл 
					ДобавитьСтрокуВДвиженияПоРасчетамПоНДФЛ(ВыборкаПоШапкеДокумента, ВыборкаПоНДФЛ);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

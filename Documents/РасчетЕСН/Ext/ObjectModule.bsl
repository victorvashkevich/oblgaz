////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

//Налоговый режим организации
Перем мУСН;
Перем мЕНВД;
Перем мФСС_БЛ;
Перем мГоловнаяОрганизация;

//Дополнительные условия для запросов
Перем мДополнительноеУсловие;
Перем мДополнительноеУсловиеВнешнееОсновные;
Перем мДополнительноеУсловиеВнешнееДополнительные;
Перем мСписокПодразделений;

Перем мДлинаСуток;
Перем мДатаИзменения;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА ЕСН

// получение первичных данных для расчета ЕСН
// первичные в данном случае, это те, для которых учет ЕСН <> РаспределятьПоБазовымНачислениям,
// или те которые определяют свой ЕСН-учет по базовым начисленияи и при этом базируются на прошлом периоде, 
// или те у которых категория начисления = "Первичное"
// 
// Параметры:
//	Основные	- булево, если Истина, то получаем данные по основным начислениям иначе - по доп.
//
// Возвращаемое значение:
//	Результат запроса
//
Функция ПолучитьДанныеУчета(СписокНачислений, ЭтоОсновныеНачисления, ЭтоПервичныеНачисления, ГоловнаяОрганизация)
	
	Запрос = Новый Запрос;
    МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Измерения = Новый Массив(1);
	Измерения[0] = "Сотрудник";
	
	Разрезы = Новый Массив(4);
	Разрезы[0] = "ДоходФСЗН";
	Разрезы[1] = "ДоходСтрах";
	Разрезы[2] = "ДоходЕдиногоПлатежа";
	Разрезы[3] = "КодДоходаЕСН";

	Запрос.УстановитьПараметр("парамИзмерения",		Измерения);
	Запрос.УстановитьПараметр("парамРазрезыЕСН",	Разрезы);
	
	Запрос.УстановитьПараметр("парамСписокНачислений", СписокНачислений);
	Запрос.УстановитьПараметр("парамПериодРегистрации",			ПериодРегистрации);
	Запрос.УстановитьПараметр("парамПериодРегистрацииНачало",	ДобавитьМесяц(ПериодРегистрации,-6));
	Запрос.УстановитьПараметр("парамОрганизация",				Организация);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация",		ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамСписокПодразделений", мСписокПодразделений);
	Запрос.УстановитьПараметр("парамПодразделениеОрганизации", ПодразделениеОрганизации);

	Запрос.УстановитьПараметр("парамКатегорияПервичная", Справочники.КатегорииРасчетов.Первичное);
	Запрос.УстановитьПараметр("парамПустойСпособЕСНУ", Перечисления.ДоходыФСС_НС.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамСпособПоУмолчаниюКодДоходаЕСН", Перечисления.ДоходыФСС_НС.Облагается);
	Запрос.УстановитьПараметр("парамСпособНеОблагаетсяКодДоходаЕСН", Перечисления.ДоходыФСС_НС.НеОблагается);
	Запрос.УстановитьПараметр("парамПустойКодЕСНУ", Справочники.ДоходыЕСН.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамСпособПоУмолчаниюКодЕСН", Справочники.ДоходыЕСН.ОблагаетсяПолностью);
	Запрос.УстановитьПараметр("парамПустойВидДеятельности", Справочники.ОсобыеУсловияТруда.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамОтветственный",				Ответственный);
	Запрос.УстановитьПараметр("парамРасчетОтпуска",				Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
	Запрос.УстановитьПараметр("парамУчетОтпусковДляФСЗНвМесяцеНачисления",глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].УчетОтпусковДляФСЗНвМесяцеНачисления);
	//vvv
	Запрос.УстановитьПараметр("ДатаДеноминации",ОбщегоНазначения.ПолучитьДатуДеноминации());
	//
	Запрос.УстановитьПараметр("парамПустойВидПособия",Перечисления.ВидыПособий.ПустаяСсылка());
  	
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	
	Если ПодразделениеОрганизации.Пустая() И Ответственный.Пустая() Тогда
		ДополнительноеУсловие = "";
		ДополнительноеУсловиеВнешнее = "";
	ИначеЕсли ПодразделениеОрганизации.Пустая() Тогда
		Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].РасчетЗарплатыОрганизацииПоОтветственным Тогда
			ДополнительноеУсловие = " И ПодразделениеОрганизации В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.ПодразделениеОрганизации ИЗ РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамПериодРегистрации) Расчетчики ГДЕ Расчетчики.Пользователь = &парамОтветственный)";
			Если ЭтоОсновныеНачисления Тогда
				ДополнительноеУсловиеВнешнее = " И ОсновныеНачисления.ПодразделениеОрганизации В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.ПодразделениеОрганизации ИЗ РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамПериодРегистрации) Расчетчики ГДЕ Расчетчики.Пользователь = &парамОтветственный)";
			Иначе
				ДополнительноеУсловиеВнешнее = " И ДополнительныеНачисления.ПодразделениеОрганизации В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.ПодразделениеОрганизации ИЗ РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамПериодРегистрации) Расчетчики ГДЕ Расчетчики.Пользователь = &парамОтветственный)";
			КонецЕсли;	
		КонецЕсли;
	Иначе
		ДополнительноеУсловие = " И ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделениеОрганизации)";
		Если ЭтоОсновныеНачисления Тогда
			ДополнительноеУсловиеВнешнее = " И ОсновныеНачисления.ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделениеОрганизации)";
		Иначе
			ДополнительноеУсловиеВнешнее = " И ДополнительныеНачисления.ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделениеОрганизации)";
		КонецЕсли;	
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеУчета.ФизЛицо КАК ФизЛицо,
	|	ДанныеУчета.Сотрудник КАК Сотрудник,
	|	ДанныеУчета.НомерСтроки КАК НомерСтроки,
	|	ДанныеУчета.Регистратор КАК Регистратор,
	|	ДанныеУчета.КодДоходаЕСН.ВходитВБазуФСЗН КАК ВходитВБазуФСЗН,
	|	ДанныеУчета.ДоходППС КАК ДоходППС,
	|	ДанныеУчета.Результат КАК СуммаДохода,
	|	ДанныеУчета.ПериодДействия КАК ПериодДействия,
	|	ДанныеУчета.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ДанныеУчета.ПериодДействияКонец
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновныеНачисления.Регистратор КАК Регистратор,
	|		ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|		ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|		ОсновныеНачисления.Сотрудник.Физлицо КАК ФизЛицо,
	|		ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
	|		ВЫБОР
	|			КОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН <> &парамПустойКодЕСНУ
	|				ТОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН
	|			КОГДА ОсновныеНачисления.ВидРасчета.КодДоходаЕСН <> &парамПустойКодЕСНУ
	|				ТОГДА ОсновныеНачисления.ВидРасчета.КодДоходаЕСН
	|			ИНАЧЕ &парамСпособПоУмолчаниюКодЕСН
	|		КОНЕЦ КАК КодДоходаЕСН,
	|		ВЫБОР
	//vvv комментируем, ,облагать или не облагать отчислениями на ППС будем выяснять из регистра расчета
	//|			КОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.ОтчисленияНаППС <> &парамПустойСпособЕСНУ
	//|				ТОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.ОтчисленияНаППС
	//|			КОГДА ОсновныеНачисления.ВидРасчета.ОтчисленияНаППС <> &парамПустойСпособЕСНУ
	//|				ТОГДА ОсновныеНачисления.ВидРасчета.ОтчисленияНаППС
	//|			ИНАЧЕ &парамСпособПоУмолчаниюКодДоходаЕСН
	|			КОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.ОтчисленияНаППС <> &парамПустойСпособЕСНУ
	|				ТОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.ОтчисленияНаППС
	|			КОГДА ОсновныеНачисления.ОтчисленияНаППС <> &парамПустойСпособЕСНУ
	|				ТОГДА ОсновныеНачисления.ОтчисленияНаППС
	|			ИНАЧЕ &парамСпособНеОблагаетсяКодДоходаЕСН
	//
	|		КОНЕЦ КАК ДоходППС,
	|		ОсновныеНачисления.Организация КАК Организация,
	|		ОсновныеНачисления.Результат КАК Результат,
	|		НАЧАЛОПЕРИОДА(ОсновныеНачисления.ПериодДействияНачало, МЕСЯЦ) КАК ПериодДействия,
	|		ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|		ОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|		ОсновныеНачисления.Сторно КАК Сторно
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|					ОсновныеНачисления.Сотрудник.Физлицо КАК ФизЛицо,
	|					ОсновныеНачисления.Организация КАК Организация,
	|					ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
	|					МАКСИМУМ(РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период) КАК Период
	|				ИЗ
	|					РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
	|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
	|						ПО ОсновныеНачисления.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник
	|							И ОсновныеНачисления.Организация = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация
	|							И ОсновныеНачисления.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета
	|							И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период <= ОсновныеНачисления.ПериодДействияНачало)
	|				ГДЕ
	|					ВЫБОР
	|							КОГДА ОсновныеНачисления.ПодразделениеОрганизации.Владелец ЕСТЬ NULL 
	|								ТОГДА ОсновныеНачисления.Организация
	|							ИНАЧЕ ОсновныеНачисления.ПодразделениеОрганизации.Владелец
	|						КОНЕЦ = &парамОрганизация
	|					И ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
	|					И ОсновныеНачисления.ВидРасчета.СпособРасчета <> &парамРасчетОтпуска
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ОсновныеНачисления.Сотрудник,
	|					ОсновныеНачисления.Сотрудник.Физлицо,
	|					ОсновныеНачисления.Организация,
	|					ОсновныеНачисления.ВидРасчета) КАК СведенияОНачисленияхСрез
	|				ПО (СведенияОНачисленияхСрез.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник)
	|					И (СведенияОНачисленияхСрез.Организация = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация)
	|					И (СведенияОНачисленияхСрез.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета)
	|					И (СведенияОНачисленияхСрез.Период = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период)
	|			ПО (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник = ОсновныеНачисления.Сотрудник)
	|				И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация = ОсновныеНачисления.Организация)
	|				И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета = ОсновныеНачисления.ВидРасчета)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ЕСНОсновныеНачисления КАК ЕСНОсновныеНачисления
	|			ПО (ЕСНОсновныеНачисления.Регистратор <> &парамРегистратор)
	|				И (ЕСНОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация)
	|				И (ЕСНОсновныеНачисления.Сотрудник = ОсновныеНачисления.Сотрудник)
	|				И (ЕСНОсновныеНачисления.Организация = ОсновныеНачисления.Организация)
	|				И (ЕСНОсновныеНачисления.ВидРасчета = ОсновныеНачисления.ВидРасчета)
	|				И (ЕСНОсновныеНачисления.ПериодДействияНачало = ОсновныеНачисления.ПериодДействияНачало)
	|				И (ЕСНОсновныеНачисления.ПериодДействияКонец = ОсновныеНачисления.ПериодДействияКонец)
	|				И (ЕСНОсновныеНачисления.ПериодРегистрации = ОсновныеНачисления.ПериодРегистрации)
	|	ГДЕ
	|		ЕСНОсновныеНачисления.Сотрудник ЕСТЬ NULL 
	|		И ВЫБОР
	|				КОГДА ОсновныеНачисления.ПодразделениеОрганизации.Владелец ЕСТЬ NULL 
	|					ТОГДА ОсновныеНачисления.Организация
	|				ИНАЧЕ ОсновныеНачисления.ПодразделениеОрганизации.Владелец
	|			КОНЕЦ = &парамОрганизация
	|		И ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
	|		И ОсновныеНачисления.ВидРасчета.СпособРасчета <> &парамРасчетОтпуска
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОсновныеНачисления.Регистратор,
	|		ОсновныеНачисления.НомерСтроки,
	|		ОсновныеНачисления.Сотрудник,
	|		ОсновныеНачисления.Сотрудник.Физлицо,
	|		ОсновныеНачисления.ВидРасчета,
	|		ВЫБОР
	|			КОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН <> &парамПустойКодЕСНУ
	|				ТОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН
	|			КОГДА ОсновныеНачисления.ВидРасчета.КодДоходаЕСН <> &парамПустойКодЕСНУ
	|				ТОГДА ОсновныеНачисления.ВидРасчета.КодДоходаЕСН
	|			ИНАЧЕ &парамСпособПоУмолчаниюКодЕСН
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.ОтчисленияНаППС <> &парамПустойСпособЕСНУ
	|				ТОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.ОтчисленияНаППС
	//vvv
	//|			КОГДА ОсновныеНачисления.ВидРасчета.ОтчисленияНаППС <> &парамПустойСпособЕСНУ
	//|				ТОГДА ОсновныеНачисления.ВидРасчета.ОтчисленияНаППС
	//|			ИНАЧЕ &парамСпособПоУмолчаниюКодДоходаЕСН
	|			КОГДА ОсновныеНачисления.ОтчисленияНаППС <> &парамПустойСпособЕСНУ
	|				ТОГДА ОсновныеНачисления.ОтчисленияНаППС
	|			ИНАЧЕ &парамСпособНеОблагаетсяКодДоходаЕСН
	//
	|		КОНЕЦ,
	|		ОсновныеНачисления.Организация,
	|		ОсновныеНачисления.Результат,
	|		НАЧАЛОПЕРИОДА(ОсновныеНачисления.ПериодДействияНачало, МЕСЯЦ),
	|		ОсновныеНачисления.ПериодДействияНачало,
	|		ОсновныеНачисления.ПериодДействияКонец,
	|		ОсновныеНачисления.Сторно
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|					ОсновныеНачисления.Сотрудник.Физлицо КАК ФизЛицо,
	|					ОсновныеНачисления.Организация КАК Организация,
	|					ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
	|					МАКСИМУМ(РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период) КАК Период
	|				ИЗ
	|					РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
	|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
	|						ПО ОсновныеНачисления.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник
	|							И ОсновныеНачисления.Организация = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация
	|							И ОсновныеНачисления.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета
	|							И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период <= ОсновныеНачисления.ПериодДействияНачало)
	|				ГДЕ
	|					ВЫБОР
	|							КОГДА ОсновныеНачисления.ПодразделениеОрганизации.Владелец ЕСТЬ NULL 
	|								ТОГДА ОсновныеНачисления.Организация
	|							ИНАЧЕ ОсновныеНачисления.ПодразделениеОрганизации.Владелец
	|						КОНЕЦ = &парамОрганизация
	|					И ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамРасчетОтпуска
	|					И ВЫБОР
	|							КОГДА &парамУчетОтпусковДляФСЗНвМесяцеНачисления
	|								ТОГДА ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
	|							ИНАЧЕ НАЧАЛОПЕРИОДА(ОсновныеНачисления.ПериодДействияНачало, МЕСЯЦ) = &парамПериодРегистрации
	|						КОНЕЦ
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ОсновныеНачисления.Сотрудник,
	|					ОсновныеНачисления.Сотрудник.Физлицо,
	|					ОсновныеНачисления.Организация,
	|					ОсновныеНачисления.ВидРасчета) КАК СведенияОНачисленияхСрез
	|				ПО (СведенияОНачисленияхСрез.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник)
	|					И (СведенияОНачисленияхСрез.Организация = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация)
	|					И (СведенияОНачисленияхСрез.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета)
	|					И (СведенияОНачисленияхСрез.Период = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период)
	|			ПО (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник = ОсновныеНачисления.Сотрудник)
	|				И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация = ОсновныеНачисления.Организация)
	|				И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета = ОсновныеНачисления.ВидРасчета)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ЕСНОсновныеНачисления КАК ЕСНОсновныеНачисления
	|			ПО (ЕСНОсновныеНачисления.Регистратор <> &парамРегистратор)
	|				И (ЕСНОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация)
	|				И (ЕСНОсновныеНачисления.Сотрудник = ОсновныеНачисления.Сотрудник)
	|				И (ЕСНОсновныеНачисления.Организация = ОсновныеНачисления.Организация)
	|				И (ЕСНОсновныеНачисления.ВидРасчета = ОсновныеНачисления.ВидРасчета)
	|				И (ЕСНОсновныеНачисления.ПериодДействияНачало = ОсновныеНачисления.ПериодДействияНачало)
	|				И (ЕСНОсновныеНачисления.ПериодДействияКонец = ОсновныеНачисления.ПериодДействияКонец)
	|				И (ЕСНОсновныеНачисления.ПериодРегистрации = ОсновныеНачисления.ПериодРегистрации)
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА ОсновныеНачисления.ПодразделениеОрганизации.Владелец ЕСТЬ NULL 
	|					ТОГДА ОсновныеНачисления.Организация
	|				ИНАЧЕ ОсновныеНачисления.ПодразделениеОрганизации.Владелец
	|			КОНЕЦ = &парамОрганизация
	|		И ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамРасчетОтпуска
	|		И ВЫБОР
	|				КОГДА &парамУчетОтпусковДляФСЗНвМесяцеНачисления
	|					ТОГДА ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
	|				ИНАЧЕ НАЧАЛОПЕРИОДА(ОсновныеНачисления.ПериодДействияНачало, МЕСЯЦ) = &парамПериодРегистрации
	|			КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДополнительныеНачисления.Регистратор,
	|		ДополнительныеНачисления.НомерСтроки,
	|		ДополнительныеНачисления.Сотрудник,
	|		ДополнительныеНачисления.Сотрудник.Физлицо,
	|		ДополнительныеНачисления.ВидРасчета,
	|		ВЫБОР
	|			КОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН <> &парамПустойКодЕСНУ
	|				ТОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН
	|			КОГДА ДополнительныеНачисления.ВидРасчета.КодДоходаЕСН <> &парамПустойКодЕСНУ
	|				ТОГДА ДополнительныеНачисления.ВидРасчета.КодДоходаЕСН
	|			ИНАЧЕ &парамСпособПоУмолчаниюКодЕСН
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.ОтчисленияНаППС <> &парамПустойСпособЕСНУ
	|				ТОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.ОтчисленияНаППС
	//vvv
	//|			КОГДА ДополнительныеНачисления.ВидРасчета.ОтчисленияНаППС <> &парамПустойСпособЕСНУ
	//|				ТОГДА ДополнительныеНачисления.ВидРасчета.ОтчисленияНаППС
	//|			ИНАЧЕ &парамСпособПоУмолчаниюКодДоходаЕСН
	|			КОГДА ДополнительныеНачисления.ОтчисленияНаППС <> &парамПустойСпособЕСНУ
	|				ТОГДА ДополнительныеНачисления.ОтчисленияНаППС
	|			ИНАЧЕ &парамСпособНеОблагаетсяКодДоходаЕСН
    //
	|		КОНЕЦ,
	|		ДополнительныеНачисления.Организация,
	|		ДополнительныеНачисления.Результат,
	//vvv
	//|		НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ),
	//|		НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ),
	//|		КОНЕЦПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ),
	|		ВЫБОР
	|			КОГДА ДополнительныеНачисления.ВидРасчета=ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Годовая) ТОГДА НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ)
	|			ИНАЧЕ ВЫБОР КОГДА ДополнительныеНачисления.БазовыйПериодНачало<>ДАТАВРЕМЯ(1,1,1,0,0,0) ТОГДА НАЧАЛОПЕРИОДА(ДополнительныеНачисления.БазовыйПериодНачало, МЕСЯЦ) ИНАЧЕ НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ) КОНЕЦ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДополнительныеНачисления.ВидРасчета=ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Годовая) ТОГДА НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ)
	|			ИНАЧЕ ВЫБОР КОГДА ДополнительныеНачисления.БазовыйПериодНачало<>ДАТАВРЕМЯ(1,1,1,0,0,0) ТОГДА НАЧАЛОПЕРИОДА(ДополнительныеНачисления.БазовыйПериодНачало, МЕСЯЦ) ИНАЧЕ НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ) КОНЕЦ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДополнительныеНачисления.ВидРасчета=ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Годовая) ТОГДА НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ)
	|			ИНАЧЕ ВЫБОР КОГДА ДополнительныеНачисления.БазовыйПериодНачало<>ДАТАВРЕМЯ(1,1,1,0,0,0) ТОГДА КОНЕЦПЕРИОДА(ДополнительныеНачисления.БазовыйПериодНачало, МЕСЯЦ) ИНАЧЕ КОНЕЦПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ) КОНЕЦ
	|		КОНЕЦ,
	//
	|		ДополнительныеНачисления.Сторно
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ДополнительныеНачисления.Сотрудник КАК Сотрудник,
	|					ДополнительныеНачисления.Сотрудник.Физлицо КАК ФизЛицо,
	|					ДополнительныеНачисления.Организация КАК Организация,
	|					ДополнительныеНачисления.ВидРасчета КАК ВидРасчета,
	|					МАКСИМУМ(РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период) КАК Период
	|				ИЗ
	|					РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисления
	|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
	|						ПО ДополнительныеНачисления.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник
	|							И ДополнительныеНачисления.Организация = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация
	|							И ДополнительныеНачисления.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета
	|							И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период <= ДополнительныеНачисления.ПериодРегистрации)
	|				ГДЕ
	|					ВЫБОР
	|							КОГДА ДополнительныеНачисления.ПодразделениеОрганизации.Владелец ЕСТЬ NULL 
	|								ТОГДА ДополнительныеНачисления.Организация
	|							ИНАЧЕ ДополнительныеНачисления.ПодразделениеОрганизации.Владелец
	|						КОНЕЦ = &парамОрганизация
	|					И НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ДополнительныеНачисления.Сотрудник,
	|					ДополнительныеНачисления.Сотрудник.Физлицо,
	|					ДополнительныеНачисления.Организация,
	|					ДополнительныеНачисления.ВидРасчета) КАК СведенияОНачисленияхСрез
	|				ПО (СведенияОНачисленияхСрез.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник)
	|					И (СведенияОНачисленияхСрез.Организация = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация)
	|					И (СведенияОНачисленияхСрез.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета)
	|					И (СведенияОНачисленияхСрез.Период = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период)
	|			ПО (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник = ДополнительныеНачисления.Сотрудник)
	|				И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация = ДополнительныеНачисления.Организация)
	|				И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета = ДополнительныеНачисления.ВидРасчета)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ЕСНДополнительныеНачисления КАК ЕСНДополнительныеНачисления
	|			ПО (ЕСНДополнительныеНачисления.Регистратор <> &парамРегистратор)
	|				И (ЕСНДополнительныеНачисления.ОбособленноеПодразделение = &парамОрганизация)
	|				И (ЕСНДополнительныеНачисления.ФизЛицо = ДополнительныеНачисления.ФизЛицо)
	|				И (ЕСНДополнительныеНачисления.Организация = ДополнительныеНачисления.Организация)
	|				И (ЕСНДополнительныеНачисления.ВидРасчета = ДополнительныеНачисления.ВидРасчета)
	|				И (НАЧАЛОПЕРИОДА(ЕСНДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ))
	|	ГДЕ
	|		ЕСНДополнительныеНачисления.ФизЛицо ЕСТЬ NULL 
	|		И ВЫБОР
	|				КОГДА ДополнительныеНачисления.ПодразделениеОрганизации.Владелец ЕСТЬ NULL 
	|					ТОГДА ДополнительныеНачисления.Организация
	|				ИНАЧЕ ДополнительныеНачисления.ПодразделениеОрганизации.Владелец
	|			КОНЕЦ = &парамОрганизация
	|		И НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации
	|	{УПОРЯДОЧИТЬ ПО
	|		ФизЛицо.*,
	|		Регистратор.*}) КАК ДанныеУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	ПериодДействия";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОРаботникеСрез.Сотрудник КАК Сотрудник,
	|	СведенияОРаботникеСрез.ФизЛицо КАК ФизЛицо,
	|	СведенияОРаботникеСрез.НомерСтроки КАК НомерСтроки,
	|	СведенияОРаботникеСрез.Регистратор КАК Регистратор,
	|	СведенияОРаботникеСрез.ВходитВБазуФСЗН КАК ВходитВБазуФСЗН,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ВидДеятельностиИзмерение <> &парамПустойВидДеятельности
	|			ТОГДА СведенияОРаботникеСрез.ДоходППС
	|		ИНАЧЕ &парамСпособНеОблагаетсяКодДоходаЕСН
	|	КОНЕЦ КАК ДоходППС,
	|	СведенияОРаботникеСрез.ПериодДействия КАК ПериодДействия,
	//vvv вид деятельности будем брать из должности сотрудника
	|	РаботникиОрганизаций.ВидДеятельностиИзмерение КАК ВидДеятельности,
	//|	РаботникиОрганизаций.Должность.ВидДеятельности КАК ВидДеятельности,
	//
	|	СведенияОРаботникеСрез.СуммаДохода КАК СуммаДохода
	|ПОМЕСТИТЬ ВТОблогаемыеДоходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеУчета.Сотрудник КАК Сотрудник,
	|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
	|		ДанныеУчета.НомерСтроки КАК НомерСтроки,
	|		ДанныеУчета.ФизЛицо КАК ФизЛицо,
	|		ДанныеУчета.Регистратор КАК Регистратор,
	|		ДанныеУчета.ВходитВБазуФСЗН КАК ВходитВБазуФСЗН,
	|		ДанныеУчета.ДоходППС КАК ДоходППС,
	|		ДанныеУчета.ПериодДействия КАК ПериодДействия,
	|		ДанныеУчета.СуммаДохода КАК СуммаДохода
	|	ИЗ
	|		ВТДоходы КАК ДанныеУчета
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО ДанныеУчета.Сотрудник = РаботникиОрганизаций.Сотрудник
	|				И (РаботникиОрганизаций.Период <= ДанныеУчета.ПериодДействияНачало)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеУчета.Сотрудник,
	|		ДанныеУчета.НомерСтроки,
	|		ДанныеУчета.Регистратор,
	|		ДанныеУчета.ФизЛицо,
	|		ДанныеУчета.ВходитВБазуФСЗН,
	|		ДанныеУчета.ДоходППС,
	|		ДанныеУчета.ПериодДействия,
	|		ДанныеУчета.СуммаДохода) КАК СведенияОРаботникеСрез
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифыВзносовНаППС.СрезПоследних(&парамПериодРегистрации, ) КАК ТарифыВзносовНаППССрезПоследних
	//vvv
	|			ПО РаботникиОрганизаций.ВидДеятельностиИзмерение = ТарифыВзносовНаППССрезПоследних.ВидДеятельности
	//|			ПО РаботникиОрганизаций.Должность.ВидДеятельности = ТарифыВзносовНаППССрезПоследних.ВидДеятельности
	//
	|		ПО (РаботникиОрганизаций.Сотрудник = СведенияОРаботникеСрез.Сотрудник)
	|			И (РаботникиОрганизаций.Период = СведенияОРаботникеСрез.Период)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ФизЛицо,
	|	НомерСтроки,
	|	Регистратор,
	|	ВходитВБазуФСЗН,
	|	ПериодДействия,
	|	ВидДеятельности,
	|	СуммаДохода,
	|	ДоходППС";
	
    Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОблогаемыеДоходы.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОблогаемыеДоходы.ПериодДействия, МЕСЯЦ) КАК ПериодДействия,
	|	СУММА(ВЫБОР
	|			КОГДА ОблогаемыеДоходы.ВходитВБазуФСЗН
	|				ТОГДА ОблогаемыеДоходы.СуммаДохода
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходаФСЗН
	
	|ПОМЕСТИТЬ ВТДоходыФСЗН
	|ИЗ
	|	ВТОблогаемыеДоходы КАК ОблогаемыеДоходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ОблогаемыеДоходы.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОблогаемыеДоходы.ПериодДействия, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	ПериодДействия";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОблогаемыеДоходы.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОблогаемыеДоходы.ПериодДействия, МЕСЯЦ) КАК ПериодДействия,
	|	СУММА(ВЫБОР
	|			КОГДА ОблогаемыеДоходы.ДоходППС = &парамСпособПоУмолчаниюКодДоходаЕСН
	|				ТОГДА ОблогаемыеДоходы.СуммаДохода
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходаППС,
	|	ОблогаемыеДоходы.ВидДеятельности КАК ВидДеятельности
	|ПОМЕСТИТЬ ВТДоходыППС
	|ИЗ
	|	ВТОблогаемыеДоходы КАК ОблогаемыеДоходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ОблогаемыеДоходы.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОблогаемыеДоходы.ПериодДействия, МЕСЯЦ),
	|	ОблогаемыеДоходы.ВидДеятельности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	ПериодДействия,
	|	ВидДеятельности";
	
	Запрос.Выполнить();
	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	//vvv
	//|	СУММА(ЕСНСведенияОДоходах.БазаФСЗН) КАК БазаФСЗН,
	//|	СУММА(ЕСНСведенияОДоходах.БазаППС) КАК БазаППС,
	|	СУММА(ЕСНСведенияОДоходах.БазаФСЗН / ВЫБОР КОГДА ЕСНСведенияОДоходах.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ) КАК БазаФСЗН,
	|	СУММА(ЕСНСведенияОДоходах.БазаППС / ВЫБОР КОГДА ЕСНСведенияОДоходах.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ) КАК БазаППС,
	//
	|	ДоходыФСЗН.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ДоходыФСЗН.ПериодДействия, МЕСЯЦ) КАК ПериодВзаиморасчетов
	|ПОМЕСТИТЬ ВТДоходыПрошлыхПериодов
	|ИЗ
	|	ВТДоходыФСЗН КАК ДоходыФСЗН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|		ПО (ЕСНСведенияОДоходах.ФизЛицо = ДоходыФСЗН.ФизЛицо)
	|			И (НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.ПериодВзаиморасчетов, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ДоходыФСЗН.ПериодДействия, МЕСЯЦ))
	|			И (НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.Период, МЕСЯЦ) < &парамПериодРегистрации)
  	|СГРУППИРОВАТЬ ПО
	|	ДоходыФСЗН.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ДоходыФСЗН.ПериодДействия, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Выполнить();
 
	Если ЭтоОсновныеНачисления Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеУчета.Регистратор КАК Регистратор,
		|	ДанныеУчета.НомерСтроки КАК НомерСтроки,
		|	ДанныеУчета.Сотрудник,
		|	ДанныеУчета.ФизЛицо,
		|	ДанныеУчета.КодДоходаЕСН,
		|	ВЫБОР
		|		КОГДА ДанныеУчета.КодДоходаЕСН.ВходитВБазуФСЗН
		|			ТОГДА &парамСпособПоУмолчаниюКодДоходаЕСН
		|		ИНАЧЕ &парамСпособНеОблагаетсяКодДоходаЕСН
		|	КОНЕЦ КАК ДоходФСЗН,
		|	ВЫБОР
		|		КОГДА ДанныеУчета.КодДоходаЕСН.ВходитВБазуСтрах
		|			ТОГДА &парамСпособПоУмолчаниюКодДоходаЕСН
		|		ИНАЧЕ &парамСпособНеОблагаетсяКодДоходаЕСН
		|	КОНЕЦ КАК ДоходСтрах,
		|	ВЫБОР
		|		КОГДА ДанныеУчета.КодДоходаЕСН.ВходитВБазуЕдиныйПлатеж
		|			ТОГДА &парамСпособПоУмолчаниюКодДоходаЕСН
		|		ИНАЧЕ &парамСпособНеОблагаетсяКодДоходаЕСН
		|	КОНЕЦ КАК ДоходЕдиныйПлатеж,
		|	ДанныеУчета.ДоходППС,
		|	ДанныеУчета.СпособРасчета,
		|	ДанныеУчета.ВидРасчета,
		|	ДанныеУчета.ГрафикРаботы,
		|	ДанныеУчета.Результат,
		|	ДанныеУчета.ПериодДействияНачало,
		|	ДанныеУчета.ПериодДействияКонец,
		|	ДанныеУчета.Сторно,
		|	ДанныеУчета.ВидУчетаВремени,
		|	ДанныеУчета.Пособие_булево,
		|	ДанныеУчета.ОплаченоДнейЧасов,
		|	ДанныеУчета.ВидПособия,
		|	ДанныеУчета.ДатаНачалаСобытия,
		|	ДанныеУчета.Показатель1
		|ПОМЕСТИТЬ ВТДанныеУчета
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОсновныеНачисления.Регистратор КАК Регистратор,
		|		ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|		ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|		ОсновныеНачисления.Сотрудник.Физлицо КАК ФизЛицо,
		|		ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
		|		ВЫБОР
		|			КОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН <> &парамПустойКодЕСНУ
		|				ТОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН
		|			КОГДА ОсновныеНачисления.ВидРасчета.КодДоходаЕСН <> &парамПустойКодЕСНУ
		|				ТОГДА ОсновныеНачисления.ВидРасчета.КодДоходаЕСН
		|			ИНАЧЕ &парамСпособПоУмолчаниюКодЕСН
		|		КОНЕЦ КАК КодДоходаЕСН,
		|		ВЫБОР
		|			КОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.ОтчисленияНаППС <> &парамПустойСпособЕСНУ
		|				ТОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.ОтчисленияНаППС
		//vvv
		//|			КОГДА ОсновныеНачисления.ВидРасчета.ОтчисленияНаППС <> &парамПустойСпособЕСНУ
		//|				ТОГДА ОсновныеНачисления.ВидРасчета.ОтчисленияНаППС
		//|			ИНАЧЕ &парамСпособПоУмолчаниюКодДоходаЕСН
		|			КОГДА ОсновныеНачисления.ОтчисленияНаППС <> &парамПустойСпособЕСНУ
		|				ТОГДА ОсновныеНачисления.ОтчисленияНаППС
		|			ИНАЧЕ &парамСпособНеОблагаетсяКодДоходаЕСН
		//
		|		КОНЕЦ КАК ДоходППС,
		|		ОсновныеНачисления.Организация КАК Организация,
		|		ОсновныеНачисления.Результат КАК Результат,
		|		ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|		ОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|		ОсновныеНачисления.ГрафикРаботы КАК ГрафикРаботы,
		|		ОсновныеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
		|		ОсновныеНачисления.Сторно КАК Сторно,
		|		ОсновныеНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
		|		ОсновныеНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
		|		ОсновныеНачисления.ВидРасчета.ВидПособия КАК ВидПособия,
		|       ОсновныеНачисления.ДатаНачалаСобытия,
		|       ОсновныеНачисления.Показатель1,
		|		ВЫБОР
		|			КОГДА ОсновныеНачисления.ВидРасчета.ВидПособия = &парамПустойВидПособия
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК Пособие_булево
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|					ОсновныеНачисления.Сотрудник.Физлицо КАК ФизЛицо,
		|					ОсновныеНачисления.Организация КАК Организация,
		|					ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
		|					МАКСИМУМ(РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период) КАК Период
		|				ИЗ
		|					РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
		|						ПО ОсновныеНачисления.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник
		|							И ОсновныеНачисления.Организация = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация
		|							И ОсновныеНачисления.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета
		|							И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период <= ОсновныеНачисления.ПериодДействияНачало)
		|				ГДЕ
		|					ВЫБОР
		|							КОГДА ОсновныеНачисления.ПодразделениеОрганизации.Владелец ЕСТЬ NULL 
		|								ТОГДА ОсновныеНачисления.Организация
		|							ИНАЧЕ ОсновныеНачисления.ПодразделениеОрганизации.Владелец
		|						КОНЕЦ = &парамОрганизация
		|					И ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
		|					И ОсновныеНачисления.ВидРасчета.СпособРасчета <> &парамРасчетОтпуска" + ДополнительноеУсловиеВнешнее+"
        |
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ОсновныеНачисления.Сотрудник,
		|					ОсновныеНачисления.Сотрудник.Физлицо,
		|					ОсновныеНачисления.Организация,
		|					ОсновныеНачисления.ВидРасчета) КАК СведенияОНачисленияхСрез
		|				ПО (СведенияОНачисленияхСрез.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник)
		|					И (СведенияОНачисленияхСрез.Организация = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация)
		|					И (СведенияОНачисленияхСрез.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета)
		|					И (СведенияОНачисленияхСрез.Период = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период)
		|			ПО (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник = ОсновныеНачисления.Сотрудник)
		|				И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация = ОсновныеНачисления.Организация)
		|				И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета = ОсновныеНачисления.ВидРасчета)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ЕСНОсновныеНачисления КАК ЕСНОсновныеНачисления
		|			ПО (ЕСНОсновныеНачисления.Регистратор <> &парамРегистратор)
		|				И (ЕСНОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация)
		|				И (ЕСНОсновныеНачисления.Сотрудник = ОсновныеНачисления.Сотрудник)
		|				И (ЕСНОсновныеНачисления.Организация = ОсновныеНачисления.Организация)
		|				И (ЕСНОсновныеНачисления.ВидРасчета = ОсновныеНачисления.ВидРасчета)
		|				И (ЕСНОсновныеНачисления.ПериодДействияНачало = ОсновныеНачисления.ПериодДействияНачало)
		|				И (ЕСНОсновныеНачисления.ПериодДействияКонец = ОсновныеНачисления.ПериодДействияКонец)
		|				И (ЕСНОсновныеНачисления.ПериодРегистрации = ОсновныеНачисления.ПериодРегистрации)
		|	ГДЕ
		|		ЕСНОсновныеНачисления.Сотрудник ЕСТЬ NULL 
		|		И ВЫБОР
		|				КОГДА ОсновныеНачисления.ПодразделениеОрганизации.Владелец ЕСТЬ NULL 
		|					ТОГДА ОсновныеНачисления.Организация
		|				ИНАЧЕ ОсновныеНачисления.ПодразделениеОрганизации.Владелец
		|			КОНЕЦ = &парамОрганизация
		|		И ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
		|		И ОсновныеНачисления.ВидРасчета.СпособРасчета <> &парамРасчетОтпуска " + ДополнительноеУсловиеВнешнее+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		ОсновныеНачисления.Регистратор КАК Регистратор,
		|		ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|		ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|		ОсновныеНачисления.Сотрудник.Физлицо КАК ФизЛицо,
		|		ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
		|		ВЫБОР
		|			КОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН <> &парамПустойКодЕСНУ
		|				ТОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН
		|			КОГДА ОсновныеНачисления.ВидРасчета.КодДоходаЕСН <> &парамПустойКодЕСНУ
		|				ТОГДА ОсновныеНачисления.ВидРасчета.КодДоходаЕСН
		|			ИНАЧЕ &парамСпособПоУмолчаниюКодЕСН
		|		КОНЕЦ КАК КодДоходаЕСН,
		|		ВЫБОР
		|			КОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.ОтчисленияНаППС <> &парамПустойСпособЕСНУ
		|				ТОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.ОтчисленияНаППС
		//vvv
		//|			КОГДА ОсновныеНачисления.ВидРасчета.ОтчисленияНаППС <> &парамПустойСпособЕСНУ
		//|				ТОГДА ОсновныеНачисления.ВидРасчета.ОтчисленияНаППС
		//|			ИНАЧЕ &парамСпособПоУмолчаниюКодДоходаЕСН
		|			КОГДА ОсновныеНачисления.ОтчисленияНаППС <> &парамПустойСпособЕСНУ
		|				ТОГДА ОсновныеНачисления.ОтчисленияНаППС
		|			ИНАЧЕ &парамСпособНеОблагаетсяКодДоходаЕСН
		//
		|		КОНЕЦ КАК ДоходППС,
		|		ОсновныеНачисления.Организация КАК Организация,
		|		ОсновныеНачисления.Результат КАК Результат,
		|		ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|		ОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|		ОсновныеНачисления.ГрафикРаботы КАК ГрафикРаботы,
		|		ОсновныеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
		|		ОсновныеНачисления.Сторно КАК Сторно,
		|		ОсновныеНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
		|		ОсновныеНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
		|		ОсновныеНачисления.ВидРасчета.ВидПособия КАК ВидПособия,
		|       ОсновныеНачисления.ДатаНачалаСобытия,
		|       ОсновныеНачисления.Показатель1,
		|		ВЫБОР
		|			КОГДА ОсновныеНачисления.ВидРасчета.ВидПособия = &парамПустойВидПособия
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК Пособие_булево
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|					ОсновныеНачисления.Сотрудник.Физлицо КАК ФизЛицо,
		|					ОсновныеНачисления.Организация КАК Организация,
		|					ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
		|					МАКСИМУМ(РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период) КАК Период
		|				ИЗ
		|					РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
		|						ПО ОсновныеНачисления.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник
		|							И ОсновныеНачисления.Организация = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация
		|							И ОсновныеНачисления.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета
		|							И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период <= ОсновныеНачисления.ПериодДействияНачало)
		|				ГДЕ
		|					ВЫБОР
		|							КОГДА ОсновныеНачисления.ПодразделениеОрганизации.Владелец ЕСТЬ NULL 
		|								ТОГДА ОсновныеНачисления.Организация
		|							ИНАЧЕ ОсновныеНачисления.ПодразделениеОрганизации.Владелец
		|						КОНЕЦ = &парамОрганизация
		|						И ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамРасчетОтпуска
		|						И ВЫБОР
		|								КОГДА &парамУчетОтпусковДляФСЗНвМесяцеНачисления
		|									ТОГДА ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
		|								ИНАЧЕ НАЧАЛОПЕРИОДА(ОсновныеНачисления.ПериодДействияНачало, МЕСЯЦ) = &парамПериодРегистрации
		|						КОНЕЦ" + ДополнительноеУсловиеВнешнее+"
        |
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ОсновныеНачисления.Сотрудник,
		|					ОсновныеНачисления.Сотрудник.Физлицо,
		|					ОсновныеНачисления.Организация,
		|					ОсновныеНачисления.ВидРасчета) КАК СведенияОНачисленияхСрез
		|				ПО (СведенияОНачисленияхСрез.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник)
		|					И (СведенияОНачисленияхСрез.Организация = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация)
		|					И (СведенияОНачисленияхСрез.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета)
		|					И (СведенияОНачисленияхСрез.Период = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период)
		|			ПО (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник = ОсновныеНачисления.Сотрудник)
		|				И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация = ОсновныеНачисления.Организация)
		|				И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета = ОсновныеНачисления.ВидРасчета)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ЕСНОсновныеНачисления КАК ЕСНОсновныеНачисления
		|			ПО (ЕСНОсновныеНачисления.Регистратор <> &парамРегистратор)
		|				И (ЕСНОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация)
		|				И (ЕСНОсновныеНачисления.Сотрудник = ОсновныеНачисления.Сотрудник)
		|				И (ЕСНОсновныеНачисления.Организация = ОсновныеНачисления.Организация)
		|				И (ЕСНОсновныеНачисления.ВидРасчета = ОсновныеНачисления.ВидРасчета)
		|				И (ЕСНОсновныеНачисления.ПериодДействияНачало = ОсновныеНачисления.ПериодДействияНачало)
		|				И (ЕСНОсновныеНачисления.ПериодДействияКонец = ОсновныеНачисления.ПериодДействияКонец)
		|				И (ЕСНОсновныеНачисления.ПериодРегистрации = ОсновныеНачисления.ПериодРегистрации)
		|	ГДЕ
		|		ЕСНОсновныеНачисления.Сотрудник ЕСТЬ NULL 
		|		И ВЫБОР
		|				КОГДА ОсновныеНачисления.ПодразделениеОрганизации.Владелец ЕСТЬ NULL 
		|					ТОГДА ОсновныеНачисления.Организация
		|				ИНАЧЕ ОсновныеНачисления.ПодразделениеОрганизации.Владелец
		|			КОНЕЦ = &парамОрганизация
		|		И ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамРасчетОтпуска
		|		И ВЫБОР
		|				КОГДА &парамУчетОтпусковДляФСЗНвМесяцеНачисления
		|					ТОГДА ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
		|				ИНАЧЕ  НАЧАЛОПЕРИОДА(ОсновныеНачисления.ПериодДействияНачало, МЕСЯЦ) = &парамПериодРегистрации 
		|			КОНЕЦ" + ДополнительноеУсловиеВнешнее+") КАК ДанныеУчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДанныеУчета.Сотрудник,
		|	ДанныеУчета.КодДоходаЕСН,
		|	ДоходФСЗН,
		|	ДоходСтрах,
		|	ДоходЕдиныйПлатеж,
		|	ДанныеУчета.ДоходППС,
		|	ДанныеУчета.СпособРасчета,
		|	ДанныеУчета.ВидРасчета,
		|	ДанныеУчета.ПериодДействияНачало,
		|	ДанныеУчета.ПериодДействияКонец,
		|	ДанныеУчета.ГрафикРаботы,
		|	ДанныеУчета.Сторно,
		|	ДанныеУчета.ВидУчетаВремени"
		;
		
		Запрос.Выполнить();
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СведенияОРаботникеСрез.Сотрудник КАК Сотрудник,
		|	СведенияОРаботникеСрез.НомерСтроки КАК НомерСтроки,
		|	СведенияОРаботникеСрез.ФизЛицо КАК ФизЛицо,
		|	СведенияОРаботникеСрез.КодДоходаЕСН,
		|	СведенияОРаботникеСрез.ДоходФСЗН,
		|	СведенияОРаботникеСрез.ДоходСтрах,
		|	ВЫБОР
		|		КОГДА ТарифыВзносовНаППССрезПоследних.ВидДеятельности <> &парамПустойВидДеятельности
		|			ТОГДА СведенияОРаботникеСрез.ДоходППС
		|		ИНАЧЕ &парамСпособНеОблагаетсяКодДоходаЕСН
		|	КОНЕЦ КАК ДоходППС,
		|	СведенияОРаботникеСрез.СпособРасчета,
		|	СведенияОРаботникеСрез.ВидРасчета,
		|	СведенияОРаботникеСрез.ГрафикРаботы,
		|	СведенияОРаботникеСрез.Результат,
		|	СведенияОРаботникеСрез.ПериодДействияНачало,
		|	СведенияОРаботникеСрез.ПериодДействияКонец,
		|	СведенияОРаботникеСрез.Сторно,
		|	СведенияОРаботникеСрез.ВидУчетаВремени,
		|	ТарифыВзносовНаППССрезПоследних.ВидДеятельности КАК ВидДеятельности,
		|	ДоходыФСЗН.СуммаДоходаФСЗН КАК СуммаДоходФСЗН,
		//vvv
		//|	ДоходыППС.СуммаДоходаППС КАК СуммаДоходаППС,
		|	ЕСТЬNULL(ДоходыППС.СуммаДоходаППС,0) КАК СуммаДоходаППС,
		//
		|	ЕСТЬNULL(ДоходыПрошлыхПериодов.БазаФСЗН, 0) КАК ДоходыПрошлыхФСЗН,
		|	ЕСТЬNULL(ДоходыПрошлыхПериодов.БазаППС, 0) КАК ДоходыПрошлыхППС,
		|	СведенияОРаботникеСрез.ВидПособия,
		|	СведенияОРаботникеСрез.ОплаченоДнейЧасов,
		|	СведенияОРаботникеСрез.Пособие_булево,
		|	СведенияОРаботникеСрез.Регистратор КАК Регистратор,
		|	СведенияОРаботникеСрез.Показатель1,
		|	СведенияОРаботникеСрез.ДатаНачалаСобытия КАК ДатаНачалаСобытия
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеУчета.Сотрудник КАК Сотрудник,
		|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
		|		ДанныеУчета.НомерСтроки КАК НомерСтроки,
		|		ДанныеУчета.Сотрудник КАК Сотрудник1,
		|		ДанныеУчета.ФизЛицо КАК ФизЛицо,
		|		ДанныеУчета.КодДоходаЕСН КАК КодДоходаЕСН,
		|		ДанныеУчета.ДоходФСЗН КАК ДоходФСЗН,
		|		ДанныеУчета.ДоходСтрах КАК ДоходСтрах,
		|		ДанныеУчета.ДоходППС КАК ДоходППС,
		|		ДанныеУчета.СпособРасчета КАК СпособРасчета,
		|		ДанныеУчета.ВидРасчета КАК ВидРасчета,
		|		ДанныеУчета.ГрафикРаботы КАК ГрафикРаботы,
		|		ДанныеУчета.Результат КАК Результат,
		|		ДанныеУчета.ПериодДействияНачало КАК ПериодДействияНачало,
		|		ДанныеУчета.ПериодДействияКонец КАК ПериодДействияКонец,
		|		ДанныеУчета.Сторно КАК Сторно,
		|		ДанныеУчета.ВидУчетаВремени КАК ВидУчетаВремени,
		|		ДанныеУчета.ВидПособия КАК ВидПособия,
		|		ДанныеУчета.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
		|		ДанныеУчета.Пособие_булево КАК Пособие_булево,
		|		ДанныеУчета.Регистратор КАК Регистратор,
		|		ДанныеУчета.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|		ДанныеУчета.Показатель1 КАК Показатель1
		|	ИЗ
		|		ВТДанныеУчета КАК ДанныеУчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|			ПО ДанныеУчета.Сотрудник = РаботникиОрганизаций.Сотрудник
		|				И (РаботникиОрганизаций.Период <= ДанныеУчета.ПериодДействияНачало)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДанныеУчета.Сотрудник,
		|		ДанныеУчета.НомерСтроки,
		|		ДанныеУчета.ФизЛицо,
		|		ДанныеУчета.КодДоходаЕСН,
		|		ДанныеУчета.ДоходФСЗН,
		|		ДанныеУчета.ДоходСтрах,
		|		ДанныеУчета.ДоходППС,
		|		ДанныеУчета.СпособРасчета,
		|		ДанныеУчета.ВидРасчета,
		|		ДанныеУчета.ГрафикРаботы,
		|		ДанныеУчета.Результат,
		|		ДанныеУчета.ПериодДействияНачало,
		|		ДанныеУчета.ПериодДействияКонец,
		|		ДанныеУчета.Сторно,
		|		ДанныеУчета.ВидУчетаВремени,
		|		ДанныеУчета.ВидПособия,
		|		ДанныеУчета.ОплаченоДнейЧасов,
		|		ДанныеУчета.Пособие_булево,
		|		ДанныеУчета.Регистратор,
		|		ДанныеУчета.ДатаНачалаСобытия,
		|		ДанныеУчета.Показатель1,
		|		ДанныеУчета.Сотрудник) КАК СведенияОРаботникеСрез
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифыВзносовНаППС.СрезПоследних(&парамПериодРегистрации, ) КАК ТарифыВзносовНаППССрезПоследних
		//vvv
		|			ПО РаботникиОрганизаций.ВидДеятельностиИзмерение = ТарифыВзносовНаППССрезПоследних.ВидДеятельности
		//|			ПО РаботникиОрганизаций.Должность.ВидДеятельности = ТарифыВзносовНаППССрезПоследних.ВидДеятельности
		//
		|		ПО (РаботникиОрганизаций.Сотрудник = СведенияОРаботникеСрез.Сотрудник)
		|			И (РаботникиОрганизаций.Период = СведенияОРаботникеСрез.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыФСЗН КАК ДоходыФСЗН
		|		ПО (ДоходыФСЗН.ФизЛицо = СведенияОРаботникеСрез.ФизЛицо)
		|			И (НАЧАЛОПЕРИОДА(ДоходыФСЗН.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОРаботникеСрез.ПериодДействияНачало, МЕСЯЦ))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыППС КАК ДоходыППС
		|		ПО (ДоходыППС.ФизЛицо = СведенияОРаботникеСрез.ФизЛицо)
		|			И (НАЧАЛОПЕРИОДА(ДоходыППС.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОРаботникеСрез.ПериодДействияНачало, МЕСЯЦ))
		|			И (ДоходыППС.ВидДеятельности = ТарифыВзносовНаППССрезПоследних.ВидДеятельности)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыПрошлыхПериодов КАК ДоходыПрошлыхПериодов
		|		ПО (ДоходыПрошлыхПериодов.ФизЛицо = СведенияОРаботникеСрез.ФизЛицо)
		|			И (НАЧАЛОПЕРИОДА(ДоходыПрошлыхПериодов.ПериодВзаиморасчетов, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОРаботникеСрез.ПериодДействияНачало, МЕСЯЦ))
		|
		//vvv
		|	ГДЕ СведенияОРаботникеСрез.Результат<>0
		//
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	ФизЛицо,
		|	ДатаНачалаСобытия";
		
	Иначе

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеУчета.Регистратор КАК Регистратор,
		|	ДанныеУчета.НомерСтроки КАК НомерСтроки,
		|	ДанныеУчета.Сотрудник,
		|	ДанныеУчета.ФизЛицо,
		|	ДанныеУчета.КодДоходаЕСН,
		|	ВЫБОР КОГДА ДанныеУчета.КодДоходаЕСН.ВходитВБазуФСЗН ТОГДА &парамСпособПоУмолчаниюКодДоходаЕСН ИНАЧЕ &парамСпособНеОблагаетсяКодДоходаЕСН КОНЕЦ КАК ДоходФСЗН, //ДанныеУчета.ДоходФСЗН,
		|	ВЫБОР КОГДА ДанныеУчета.КодДоходаЕСН.ВходитВБазуСтрах ТОГДА &парамСпособПоУмолчаниюКодДоходаЕСН ИНАЧЕ &парамСпособНеОблагаетсяКодДоходаЕСН КОНЕЦ КАК ДоходСтрах, //ДанныеУчета.ДоходСтрах,
		|	ВЫБОР КОГДА ДанныеУчета.КодДоходаЕСН.ВходитВБазуЕдиныйПлатеж ТОГДА &парамСпособПоУмолчаниюКодДоходаЕСН ИНАЧЕ &парамСпособНеОблагаетсяКодДоходаЕСН КОНЕЦ КАК ДоходЕдиныйПлатеж, //ДанныеУчета.ДоходЕдиныйПлатеж,
		|	ДанныеУчета.ДоходППС,
		|	ДанныеУчета.ВидРасчета,
		|	ДанныеУчета.СпособРасчета,
		|	ДанныеУчета.Результат,
		|	НАЧАЛОПЕРИОДА(ДанныеУчета.КонецБазовогоПериода, МЕСЯЦ) КАК БазовыйПериодНачало,
		|	КОНЕЦПЕРИОДА(ДанныеУчета.КонецБазовогоПериода, МЕСЯЦ) КАК БазовыйПериодКонец,
		|	ДанныеУчета.ПериодРегистрации,
		|	ДанныеУчета.ДокументОснование,
		|   ДанныеУчета.ВидПособия,
		|   ДанныеУчета.Пособие_булево,
		|   ДанныеУчета.ОплаченоДнейЧасов,
		|   ДанныеУчета.БазовыйПериодНачало,
		|   ДанныеУчета.БазовыйПериодКонец,
		|   ДанныеУчета.Сторно,
		|	ДанныеУчета.Показатель1,
		|	ДанныеУчета.ДатаНачалаСобытия
		|ПОМЕСТИТЬ ВТДанныеУчета
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДополнительныеНачисления.Регистратор КАК Регистратор,
		|		ДополнительныеНачисления.НомерСтроки КАК НомерСтроки,
		|		ДополнительныеНачисления.Сотрудник КАК Сотрудник,
		|		ДополнительныеНачисления.Сотрудник.ФизЛицо КАК ФизЛицо,
		//vvv
		//|		ДополнительныеНачисления.ПериодРегистрации КАК КонецБазовогоПериода,
		|		ВЫБОР
		|			КОГДА ДополнительныеНачисления.ВидРасчета=ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Годовая) ТОГДА НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ)
		|			ИНАЧЕ 
		|				ВЫБОР КОГДА ДополнительныеНачисления.БазовыйПериодНачало<>ДАТАВРЕМЯ(1,1,1,0,0,0) ТОГДА ДополнительныеНачисления.БазовыйПериодНачало ИНАЧЕ ДополнительныеНачисления.ПериодРегистрации КОНЕЦ
		|		КОНЕЦ КАК КонецБазовогоПериода,
		//
		|		ДополнительныеНачисления.ВидРасчета КАК ВидРасчета,
		|		ВЫБОР КОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН <> &парамПустойКодЕСНУ ТОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН КОГДА ДополнительныеНачисления.ВидРасчета.КодДоходаЕСН <> &парамПустойКодЕСНУ ТОГДА ДополнительныеНачисления.ВидРасчета.КодДоходаЕСН ИНАЧЕ &парамСпособПоУмолчаниюКодЕСН КОНЕЦ КАК КодДоходаЕСН,
		|		ВЫБОР
		|			КОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.ОтчисленияНаППС <> &парамПустойСпособЕСНУ
		|				ТОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.ОтчисленияНаППС
		//vvv
		//|			КОГДА ДополнительныеНачисления.ВидРасчета.ОтчисленияНаППС <> &парамПустойСпособЕСНУ
		//|				ТОГДА ДополнительныеНачисления.ВидРасчета.ОтчисленияНаППС
		//|			ИНАЧЕ &парамСпособПоУмолчаниюКодДоходаЕСН
		|			КОГДА ДополнительныеНачисления.ОтчисленияНаППС <> &парамПустойСпособЕСНУ
		|				ТОГДА ДополнительныеНачисления.ОтчисленияНаППС
		|			ИНАЧЕ &парамСпособНеОблагаетсяКодДоходаЕСН
		//
		|		КОНЕЦ КАК ДоходППС,
        |		ДополнительныеНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
		|		ДополнительныеНачисления.Организация КАК Организация,
		|		ДополнительныеНачисления.Результат КАК Результат,
		|		ДополнительныеНачисления.ПериодРегистрации КАК ПериодРегистрации,
		|		ДополнительныеНачисления.ДокументОснование КАК  ДокументОснование,
		|		ДополнительныеНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
		|		ДополнительныеНачисления.ВидРасчета.ВидПособия КАК ВидПособия,
		|       ДополнительныеНачисления.БазовыйПериодНачало,
		|       ДополнительныеНачисления.БазовыйПериодКонец,
		|		ДополнительныеНачисления.Сторно,
		|		ДополнительныеНачисления.ДатаНачалаСобытия,
		|		ДополнительныеНачисления.Показатель1,
		|		ВЫБОР
		|			КОГДА ДополнительныеНачисления.ВидРасчета.ВидПособия = &парамПустойВидПособия
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК Пособие_булево
		|	ИЗ
		|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисления
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ДополнительныеНачисления.Сотрудник КАК Сотрудник,
		|					ДополнительныеНачисления.Сотрудник.ФизЛицо КАК ФизЛицо,
		|					ДополнительныеНачисления.Организация КАК Организация,
		|					ДополнительныеНачисления.ВидРасчета КАК ВидРасчета,
		|					МАКСИМУМ(РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период) КАК Период
		|				ИЗ
		|					РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисления
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
		|						ПО ДополнительныеНачисления.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник И ДополнительныеНачисления.Организация = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация И ДополнительныеНачисления.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета И РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период <= ДополнительныеНачисления.ПериодРегистрации
		|				
		|				ГДЕ
		|					ВЫБОР КОГДА ДополнительныеНачисления.ПодразделениеОрганизации.Владелец ЕСТЬ NULL ТОГДА ДополнительныеНачисления.Организация ИНАЧЕ ДополнительныеНачисления.ПодразделениеОрганизации.Владелец КОНЕЦ = &парамОрганизация И
		|					НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации"+ДополнительноеУсловиеВнешнее+"
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ДополнительныеНачисления.Сотрудник,
		|					ДополнительныеНачисления.Сотрудник.ФизЛицо,
		|					ДополнительныеНачисления.Организация,
		|					ДополнительныеНачисления.ВидРасчета) КАК СведенияОНачисленияхСрез
		|				ПО СведенияОНачисленияхСрез.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник И СведенияОНачисленияхСрез.Организация = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация И СведенияОНачисленияхСрез.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета И СведенияОНачисленияхСрез.Период = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период
		|			ПО РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник = ДополнительныеНачисления.Сотрудник И РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация = ДополнительныеНачисления.Организация И РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета = ДополнительныеНачисления.ВидРасчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ЕСНДополнительныеНачисления КАК ЕСНДополнительныеНачисления
		|			ПО ЕСНДополнительныеНачисления.Регистратор <> &парамРегистратор И ЕСНДополнительныеНачисления.ОбособленноеПодразделение = &парамОрганизация И ЕСНДополнительныеНачисления.Физлицо = ДополнительныеНачисления.ФизЛицо И ЕСНДополнительныеНачисления.Организация = ДополнительныеНачисления.Организация И ЕСНДополнительныеНачисления.ВидРасчета = ДополнительныеНачисления.ВидРасчета И НАЧАЛОПЕРИОДА(ЕСНДополнительныеНачисления.ПериодРегистрации,МЕСЯЦ) = НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации,МЕСЯЦ)
		|	
		|	ГДЕ
		|		ЕСНДополнительныеНачисления.Физлицо Есть NULL И 
		|		ВЫБОР КОГДА ДополнительныеНачисления.ПодразделениеОрганизации.Владелец ЕСТЬ NULL ТОГДА ДополнительныеНачисления.Организация ИНАЧЕ ДополнительныеНачисления.ПодразделениеОрганизации.Владелец КОНЕЦ = &парамОрганизация И
		|		НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации" + ДополнительноеУсловиеВнешнее+") КАК ДанныеУчета
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки,
		|	Сотрудник,
		|	КодДоходаЕСН,
		|	ДоходФСЗН,
		|	ДоходСтрах,
		|	ДоходППС,
		|	ВидРасчета,
		|	СпособРасчета,
		|	БазовыйПериодНачало,
		|	БазовыйПериодКонец,
		|	ДанныеУчета.ПериодРегистрации";
		
		Запрос.Выполнить();
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТарифыВзносовНаППССрезПоследних.ВидДеятельности КАК ВидДеятельности,
		|	СведенияОРаботникеСрез.НомерСтроки КАК НомерСтроки,
		|	СведенияОРаботникеСрез.Сотрудник,
		|	СведенияОРаботникеСрез.ФизЛицо КАК ФизЛицо,
		|	СведенияОРаботникеСрез.КодДоходаЕСН,
		|	СведенияОРаботникеСрез.ДоходФСЗН,
		|	СведенияОРаботникеСрез.ДоходСтрах,
		|	ВЫБОР
		|		КОГДА ТарифыВзносовНаППССрезПоследних.ВидДеятельности <> &парамПустойВидДеятельности
		|			ТОГДА СведенияОРаботникеСрез.ДоходППС
		|		ИНАЧЕ &парамСпособНеОблагаетсяКодДоходаЕСН
		|	КОНЕЦ КАК ДоходППС,
		|	СведенияОРаботникеСрез.ВидРасчета,
		|	СведенияОРаботникеСрез.СпособРасчета,
		|	СведенияОРаботникеСрез.Результат,
		|	СведенияОРаботникеСрез.БазовыйПериодНачало,
		|	СведенияОРаботникеСрез.БазовыйПериодКонец,
		|	СведенияОРаботникеСрез.ПериодРегистрации,
		|	ДоходыФСЗН.СуммаДоходаФСЗН КАК СуммаДоходФСЗН,
		//vvv
		//|	ДоходыППС.СуммаДоходаППС КАК СуммаДоходаППС,
		|	ЕСТЬNULL(ДоходыППС.СуммаДоходаППС,0) КАК СуммаДоходаППС,
		//
		|	ЕСТЬNULL(ДоходыПрошлыхПериодов.БазаФСЗН, 0) КАК ДоходыПрошлыхФСЗН,
		|	ЕСТЬNULL(ДоходыПрошлыхПериодов.БазаППС, 0) КАК ДоходыПрошлыхППС,
		|	СведенияОРаботникеСрез.ДокументОснование,
		|	СведенияОРаботникеСрез.ВидПособия,
		|	СведенияОРаботникеСрез.ОплаченоДнейЧасов,
		|	СведенияОРаботникеСрез.Пособие_булево,
		|	СведенияОРаботникеСрез.Регистратор КАК Регистратор,
		|	СведенияОРаботникеСрез.Сторно,
		|	СведенияОРаботникеСрез.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|	СведенияОРаботникеСрез.Показатель1
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеУчета.Сотрудник КАК Сотрудник,
		|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
		|		ДанныеУчета.НомерСтроки КАК НомерСтроки,
		|		ДанныеУчета.ФизЛицо КАК ФизЛицо,
		|		ДанныеУчета.КодДоходаЕСН КАК КодДоходаЕСН,
		|		ДанныеУчета.ДоходФСЗН КАК ДоходФСЗН,
		|		ДанныеУчета.ДоходСтрах КАК ДоходСтрах,
		|		ДанныеУчета.ДоходППС КАК ДоходППС,
		|		ДанныеУчета.ВидРасчета КАК ВидРасчета,
		|		ДанныеУчета.СпособРасчета КАК СпособРасчета,
		|		ДанныеУчета.Результат КАК Результат,
		|		ДанныеУчета.БазовыйПериодНачало КАК БазовыйПериодНачало,
		|		ДанныеУчета.БазовыйПериодКонец КАК БазовыйПериодКонец,
		|		ДанныеУчета.ПериодРегистрации КАК ПериодРегистрации,
		|		ДанныеУчета.ДокументОснование КАК ДокументОснование,
		|		ДанныеУчета.ВидПособия КАК ВидПособия,
		|		ДанныеУчета.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
		|		ДанныеУчета.Пособие_булево КАК Пособие_булево,
		|		ДанныеУчета.Регистратор КАК Регистратор,
		|		ДанныеУчета.Сторно КАК Сторно,
		|		ДанныеУчета.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|		ДанныеУчета.Показатель1 КАК Показатель1
		|	ИЗ
		|		ВТДанныеУчета КАК ДанныеУчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|			ПО ДанныеУчета.Сотрудник = РаботникиОрганизаций.Сотрудник
		|				И (НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Период, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ДанныеУчета.БазовыйПериодНачало, МЕСЯЦ))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДанныеУчета.Сотрудник,
		|		ДанныеУчета.НомерСтроки,
		|		ДанныеУчета.ФизЛицо,
		|		ДанныеУчета.КодДоходаЕСН,
		|		ДанныеУчета.ДоходФСЗН,
		|		ДанныеУчета.ДоходСтрах,
		|		ДанныеУчета.ДоходППС,
		|		ДанныеУчета.ВидРасчета,
		|		ДанныеУчета.СпособРасчета,
		|		ДанныеУчета.Результат,
		|		ДанныеУчета.БазовыйПериодНачало,
		|		ДанныеУчета.БазовыйПериодКонец,
		|		ДанныеУчета.ПериодРегистрации,
		|		ДанныеУчета.ВидПособия,
		|		ДанныеУчета.ОплаченоДнейЧасов,
		|		ДанныеУчета.Пособие_булево,
		|		ДанныеУчета.Регистратор,
		|		ДанныеУчета.Сторно,
		|		ДанныеУчета.ДатаНачалаСобытия,
		|		ДанныеУчета.Показатель1,
		|		ДанныеУчета.ДокументОснование) КАК СведенияОРаботникеСрез
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифыВзносовНаППС.СрезПоследних(&парамПериодРегистрации, ) КАК ТарифыВзносовНаППССрезПоследних
		|			ПО РаботникиОрганизаций.ВидДеятельностиИзмерение = ТарифыВзносовНаППССрезПоследних.ВидДеятельности
		|		ПО (РаботникиОрганизаций.Сотрудник = СведенияОРаботникеСрез.Сотрудник)
		|			И (РаботникиОрганизаций.Период = СведенияОРаботникеСрез.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыФСЗН КАК ДоходыФСЗН
		|		ПО (ДоходыФСЗН.ФизЛицо = СведенияОРаботникеСрез.ФизЛицо)
		|			И (НАЧАЛОПЕРИОДА(ДоходыФСЗН.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОРаботникеСрез.БазовыйПериодНачало, МЕСЯЦ))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыППС КАК ДоходыППС
		|		ПО (ДоходыППС.ФизЛицо = СведенияОРаботникеСрез.ФизЛицо)
		|			И (НАЧАЛОПЕРИОДА(ДоходыППС.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОРаботникеСрез.БазовыйПериодНачало, МЕСЯЦ))
		|			И (ДоходыППС.ВидДеятельности = ТарифыВзносовНаППССрезПоследних.ВидДеятельности)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыПрошлыхПериодов КАК ДоходыПрошлыхПериодов
		|		ПО (ДоходыПрошлыхПериодов.ФизЛицо = СведенияОРаботникеСрез.ФизЛицо)
		|			И (НАЧАЛОПЕРИОДА(ДоходыПрошлыхПериодов.ПериодВзаиморасчетов, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОРаботникеСрез.БазовыйПериодНачало, МЕСЯЦ))
		|
		//vvv
		|	ГДЕ СведенияОРаботникеСрез.Результат<>0
		//
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	ФизЛицо,
		|	ДатаНачалаСобытия" ;



	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗафиксироватьТранзакцию();
	
	Возврат РезультатЗапроса;
 КонецФункции // ПолучитьДанныеУчета()

// создает строку движений ЕСНОсновныеНачисления или ЕСНДополнительныеНачисления
// вызывается из ОбработатьДанныеУчета
// Параметры:
//	ДанныеУчета - спозиционированная выборка по результату запроса
//	НаборЗаписей
//
Функция СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	СтрокаДанных = НаборЗаписей.Добавить();
	
	// регистратор
	
	// вид расчета
	СтрокаДанных.ВидРасчета					= ДанныеУчета.ВидРасчета;
	// период регистрации
	СтрокаДанных.ПериодРегистрации			= ПериодРегистрации;
	
	// только для ЕСНОсновныеНачисления
	Если ТипЗнч(НаборЗаписей) = Тип("РегистрРасчетаНаборЗаписей.ЕСНОсновныеНачисления") Тогда
		СтрокаДанных.ПериодДействияНачало	= ДанныеУчета.ПериодДействияНачало;
		МесяцУчета = ДанныеУчета.ПериодДействияНачало;
		СтрокаДанных.ПериодДействияКонец	= ДанныеУчета.ПериодДействияКонец;
		СтрокаДанных.ГрафикРаботы			= ДанныеУчета.ГрафикРаботы;
		СтрокаДанных.ВидУчетаВремени		= ДанныеУчета.ВидУчетаВремени;
	иначе
		СтрокаДанных.БазовыйПериодНачало = ДанныеУчета.БазовыйПериодНачало;
		МесяцУчета = ДанныеУчета.БазовыйПериодНачало;
		СтрокаДанных.БазовыйПериодКонец = ДанныеУчета.БазовыйПериодКонец;
		СтрокаДанных.ДокументОснование = ДанныеУчета.ДокументОснование;
	КонецЕсли;

	// измерения
	СтрокаДанных.Сотрудник					= ДанныеУчета.Сотрудник;
	СтрокаДанных.Физлицо					= ДанныеУчета.Физлицо;
	СтрокаДанных.Организация				= мГоловнаяОрганизация;

	// ресурсы
	СтрокаДанных.Результат					= ДанныеУчета.Результат;

	// реквизиты
	СтрокаДанных.КодДоходаЕСН				= ДанныеУчета.КодДоходаЕСН;
	СтрокаДанных.ДоходФСЗН 					= ДанныеУчета.ДоходФСЗН;
	СтрокаДанных.ДоходСтрах 				= ДанныеУчета.ДоходСтрах;
	СтрокаДанных.ДоходППС 					= ДанныеУчета.ДоходППС;
	СтрокаДанных.ВидДеятельности			= ДанныеУчета.ВидДеятельности;
	СтрокаДанных.ОбособленноеПодразделение	= Организация;	
	
	РазмерСреднейЗарплаты = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(НачалоМесяца(МесяцУчета)-1,Новый Структура("ВидПараметра",Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников)).Размер;
    СтруктураФСЗН = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРегистрации),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗН));
	РазмерОграничения = (РазмерСреднейЗарплаты* СтруктураФСЗН.ОграничениеПоДоходам) - ДанныеУчета.ДоходыПрошлыхФСЗН;
	Если ДанныеУчета.ДоходФСЗН = Перечисления.ДоходыФСС_НС.Облагается тогда
		Если  ДанныеУчета.СуммаДоходФСЗН > РазмерОграничения тогда
			СтрокаДанных.БазаФСЗН = ДанныеУчета.Результат/ДанныеУчета.СуммаДоходФСЗН * РазмерОграничения;
		Иначе
			СтрокаДанных.БазаФСЗН = ДанныеУчета.Результат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураППС = РегистрыСведений.ТарифыВзносовНаППС.ПолучитьПоследнее(КонецМесяца(МесяцУчета), Новый Структура("ВидДеятельности",ДанныеУчета.ВидДеятельности));  
    РазмерОграничения = (РазмерСреднейЗарплаты* СтруктураППС.ОграничениеПоДоходам) -  ДанныеУчета.ДоходыПрошлыхППС;
    Если ДанныеУчета.ДоходППС = Перечисления.ДоходыФСС_НС.Облагается тогда
		Если  ДанныеУчета.СуммаДоходаППС > РазмерОграничения тогда
			СтрокаДанных.БазаППС = ДанныеУчета.Результат/ДанныеУчета.СуммаДоходаППС * РазмерОграничения;
		Иначе
			СтрокаДанных.БазаППС = ДанныеУчета.Результат;
		КонецЕсли;
	КонецЕсли;

	Возврат СтрокаДанных;
	
КонецФункции // СоздатьСтрокуДвижений()

// Функция формирует набор записей по данным из запроса
// и в том случае, если проводится обработка первичных данных
// возвращает список категорий непервичных начислений для 
// которых необходимо выполнить формирование данных ЕСН
//
// Параметры:
//	РезультатДанныеУчета		- выборка по резултату запроса, возвращенная функцией 
//								  ПолучитьПервичныеДанныеУчета или ПолучитьВторичныеДанныеУчета
//	ОбработкаПервичныхДанных	- проводится ли обработка первичных данных (или вторичных)
//	Успешно						- в этот параметр возвращается значение Ложь, если обработка не выполнена
//								  (например, если не окзалось базовых данных)
//	НаборЗаписей
//
// Возвращаемое значение:
//	массив категорий начислений, которые необходимо рассчитать на основе вторичных данных
//
Функция ОбработатьДанныеУчета(РезультатДанныеУчета, Успешно, НаборЗаписей)

 	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
    // основная выборка - по ней ведем обход и вводим записи движений
	ДанныеУчета = РезультатДанныеУчета.Выбрать();
	
	Пока ДанныеУчета.Следующий() Цикл
		
		СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей, УчетнаяПолитикаПоПерсоналуОрганизации);
		
		//заполняем табличную часть документа по социальным пособиям	
		
		
		Если ДанныеУчета.Пособие_булево = Истина Тогда	
			
			Строка = СоциальныеПособияИзФСЗН.Добавить();
			
			МассивЗначений = Новый Массив;	
			Если ДанныеУчета.ВидПособия = Перечисления.ВидыПособий.ПособиеПоБеременостиИРодам ИЛИ ДанныеУчета.ВидПособия = Перечисления.ВидыПособий.ПособиеПоВременнойНетрудоспособности ИЛИ ДанныеУчета.ВидПособия = Перечисления.ВидыПособий.ПособиеПоУходуЗаБольнымЧленомСемьи Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ДокументОснование", ДанныеУчета.Регистратор);	
				МассивЗначений = СоциальныеПособияИзФСЗН.НайтиСтроки(ПараметрыОтбора);
				Если МассивЗначений.Количество() = 0 Тогда
					Строка.Новый = Истина;
				Иначе
					Строка.Новый = Ложь;
				КонецЕсли;	
			Иначе
				Строка.Новый = Истина;
		
			КонецЕсли;
			
			Строка.Сотрудник = ДанныеУчета.Сотрудник;
			Строка.ФизЛицо =  ДанныеУчета.ФизЛицо;
			Строка.ВидРасчета = ДанныеУчета.ВидРасчета;
			Строка.ВидПособия = ДанныеУчета.ВидПособия;
			Строка.Сторно  =  ДанныеУчета.Сторно;
			Строка.ДоходФСЗН  =  ДанныеУчета.ДоходФСЗН;
			Строка.Размер =  ДанныеУчета.Показатель1;
			Строка.ДатаНачалаСобытия = ДанныеУчета.ДатаНачалаСобытия;
			Строка.ОплаченныеДни  = ДанныеУчета.ОплаченоДнейЧасов;
			Строка.Сумма  =  ДанныеУчета.Результат;
			Строка.ДокументОснование  = ДанныеУчета.Регистратор;
			
			Если ТипЗнч(ДанныеУчета.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций")  Тогда
				
				Строка.ПериодДействияНачало = ДанныеУчета.ПериодДействияНачало;
				Строка.ПериодДействияКонец  =  ДанныеУчета.ПериодДействияКонец;
				
			Иначе
				
				Строка.ПериодДействияНачало =  ДанныеУчета.БазовыйПериодНачало;
				Строка.ПериодДействияКонец =  ДанныеУчета.БазовыйПериодКонец;
				
			КонецЕсли; 
			
			
		КонецЕсли; 
			
	КонецЦикла;
	
 	НаборЗаписей.Записать(Ложь);// выполняем дозапись (набор записей чистится автоматически)

	Возврат 1;

КонецФункции  //ОбработатьДанныеУчета

// Функция формирует таблицу начислений и последовательность их обработки
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьТаблицуНачислений()

	 Запрос = Новый Запрос;
	 
	 ТекстЗапроса = 
	 "ВЫБРАТЬ
	 | ""Основные"" КАК ВидНачисления,
	 | ВЫБОР
	 |  КОГДА ОсновныеНачисления.ВидРасчета.КатегорияНачисления = ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.Первичное)
	 |    ИЛИ ОсновныеНачисления.ВидРасчета.СтратегияОтраженияВУчете <> ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления)
	 |   ТОГДА 0
	 |  ИНАЧЕ ОсновныеНачисления.ВидРасчета.КатегорияНачисления.Код
	 | КОНЕЦ КАК ПорядокРасчета,
	 | ОсновныеНачисления.ВидРасчета
	 |ИЗ
	 | (ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |  ОсновныеНачисления.ВидРасчета КАК ВидРасчета
	 | ИЗ
	 |  РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
	 | ГДЕ
	 |  НАЧАЛОПЕРИОДА(ОсновныеНачисления.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации 
	 |  И ОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация
	 |  И ОсновныеНачисления.ВидРасчета.СпособРасчета <> &парамРасчетОтпуска " + мДополнительноеУсловиеВнешнееОсновные +"
	 |
	 | ОБЪЕДИНИТЬ ВСЕ
	 |
	 | ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |  ОсновныеНачисления.ВидРасчета КАК ВидРасчета
	 | ИЗ
	 |  РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
	 | ГДЕ
	 |  ОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация
	 |  И ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамРасчетОтпуска
	 |     И ВЫБОР
	 |       КОГДА &парамУчетОтпусковДляФСЗНвМесяцеНачисления
	 |        ТОГДА ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
	 |       ИНАЧЕ НАЧАЛОПЕРИОДА(ОсновныеНачисления.ПериодДействияНачало, МЕСЯЦ) = &парамПериодРегистрации
	 |      КОНЕЦ " + мДополнительноеУсловиеВнешнееОсновные +") КАК ОсновныеНачисления
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 | ""Дополнительные"",
	 | ВЫБОР
	 |  КОГДА ДополнительныеНачисления.ВидРасчета.КатегорияНачисления = ЗНАЧЕНИЕ(Справочник.КатегорииРасчетов.Первичное)
	 |    ИЛИ ДополнительныеНачисления.ВидРасчета.СтратегияОтраженияВУчете <> ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления)
	 |   ТОГДА 0
	 |  ИНАЧЕ ДополнительныеНачисления.ВидРасчета.КатегорияНачисления.Код
	 | КОНЕЦ,
	 | ДополнительныеНачисления.ВидРасчета
	 |ИЗ
	 | (ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |  ДополнительныеНачисления.ВидРасчета КАК ВидРасчета
	 | ИЗ
	 |  РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисления
	 | ГДЕ
	 |  НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации" + мДополнительноеУсловиеВнешнееДополнительные +"
	 |  И ДополнительныеНачисления.ОбособленноеПодразделение = &парамОрганизация) КАК ДополнительныеНачисления
	 |
	 |УПОРЯДОЧИТЬ ПО
	 | ПорядокРасчета";
	 
	 Запрос.Текст = ТекстЗапроса;
	 Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	 Запрос.УстановитьПараметр("парамОрганизация", Организация); 
	 Запрос.УстановитьПараметр("парамСписокПодразделений", мСписокПодразделений); 
	 Запрос.УстановитьПараметр("парамРасчетОтпуска",    Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
	 Запрос.УстановитьПараметр("парамУчетОтпусковДляФСЗНвМесяцеНачисления",глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].УчетОтпусковДляФСЗНвМесяцеНачисления);


	 
	 ТаблицаНачислений = Запрос.Выполнить().Выгрузить(); 
	 
	 Возврат ТаблицаНачислений;

КонецФункции // ПолучитьТаблицуНачислений()

// Выполняет автоматическое заполнение наборов записей о доходах ЕСН
// Параметры: 
//  НаборЗаписейОсновной, НаборЗаписейДополнительный
//
// Возвращаемое значение:
//  Истина, если автозаполнение полностью выполнено 
//	Ложь, если некоторые строки движений остались недозаполненными
//
Функция АвтозаполнениеНаборовЗаписейОДоходах(НаборЗаписейОсновной, НаборЗаписейДополнительный)

	Успешно = Истина;
	
	// сформируем список всех структурных подразделений организации
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// определим налоговый режим
	БухгалтерскийИНалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("глУчетнаяПолитикаПоНалоговомуУчету"), КонецМесяца(ПериодРегистрации), Организация);
	УчетнаяПолитика = глЗначениеПеременной("глУчетнаяПолитикаПоНалоговомуУчету")[КонецМесяца(ПериодРегистрации)][Организация];
	мУСН = УчетнаяПолитика.УСН;
	мЕНВД = УчетнаяПолитика.ОрганизацияЯвляетсяПлательщикомЕНВД;
	мФСС_БЛ = УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС;
	
	// определим дополнительные условия для запросов
	Если Не ЗначениеЗаполнено(Ответственный) и Не ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		// нет условий по подразделению	
	ИначеЕсли Не ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		//применяем условие на подразделение по ответственному
		Если ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "РасчетЗарплатыОрганизацииПоОтветственным") Тогда
			//расчет зарплаты по ответственным включен, получим список подразделений
			СписокПодразделенийТекст = 
			"ВЫБРАТЬ 
			|	ПодразделенияОрганизаций.Ссылка
			|ИЗ
			|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			|ГДЕ
			|	ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ
			|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|				Расчетчики.ПодразделениеОрганизации
			|			ИЗ
			|				РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамПериодРегистрации, ) КАК Расчетчики
			|			ГДЕ
			|				Расчетчики.Пользователь = &парамОтветственный)
			|	И ПодразделенияОрганизаций.Владелец = &парамОрганизация";
	
		КонецЕсли;
		
	Иначе // отбор по подразделению заданному в форме документа	
		
		СписокПодразделенийТекст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ(&парамПодразделениеОрганизации)
		|	И ПодразделенияОрганизаций.Владелец = &парамОрганизация";
		
	КонецЕсли;

	
	Если ПустаяСтрока(СписокПодразделенийТекст) Тогда
		мДополнительноеУсловие = "";
		мДополнительноеУсловиеВнешнееОсновные = "";
		мДополнительноеУсловиеВнешнееДополнительные = "";
		мСписокПодразделений = Новый СписокЗначений;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("парамОрганизация",				Организация);
		Запрос.УстановитьПараметр("парамПодразделениеОрганизации",	ПодразделениеОрганизации);
		Запрос.УстановитьПараметр("парамПериодРегистрации",			ПериодРегистрации);
		Запрос.УстановитьПараметр("парамОтветственный",				Ответственный);
		Запрос.Текст = СписокПодразделенийТекст;
		мСписокПодразделений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		мДополнительноеУсловие = " И ПодразделениеОрганизации В (&парамСписокПодразделений)";
		мДополнительноеУсловиеВнешнееОсновные = " И ОсновныеНачисления.ПодразделениеОрганизации В (&парамСписокПодразделений)";
		мДополнительноеУсловиеВнешнееДополнительные = " И ДополнительныеНачисления.ПодразделениеОрганизации В (&парамСписокПодразделений)";
		
	КонецЕсли;	
	
	//очистили табличную часть по социальным пособиям
	СоциальныеПособияИзФСЗН.Очистить();
	
	ТаблицаНачислений = ПолучитьТаблицуНачислений();

	СтруктураПоиска = Новый Структура;
	СписокНачисленийДляОтбора = Новый СписокЗначений;
	
	СтруктураПоиска.Вставить("ВидНачисления", "Основные");
	СтрокиТаблицы = ТаблицаНачислений.НайтиСтроки(СтруктураПоиска);
	Для каждого Строка Из СтрокиТаблицы Цикл
		СписокНачисленийДляОтбора.Добавить(Строка.ВидРасчета);
	КонецЦикла;

	Если СписокНачисленийДляОтбора.Количество() > 0 Тогда
		//получим и обработаем данные учета
		ДанныеУчета = ПолучитьДанныеУчета(СписокНачисленийДляОтбора, Истина, Истина, мГоловнаяОрганизация);
		ОбработатьДанныеУчета(ДанныеУчета, Успешно, НаборЗаписейОсновной);
	КонецЕсли;             
		
	//дополнительные начисления
	СписокНачисленийДляОтбора.Очистить();
	СтруктураПоиска.Вставить("ВидНачисления", "Дополнительные");
	
	СтрокиТаблицы = ТаблицаНачислений.НайтиСтроки(СтруктураПоиска);
	Для каждого Строка Из СтрокиТаблицы Цикл
		СписокНачисленийДляОтбора.Добавить(Строка.ВидРасчета);
	КонецЦикла;
	
	Если СписокНачисленийДляОтбора.Количество() > 0 Тогда
		//получим и обработаем данные учета
		ДанныеУчета = ПолучитьДанныеУчета(СписокНачисленийДляОтбора, Ложь, Истина, мГоловнаяОрганизация);
		
		ОбработатьДанныеУчета(ДанныеУчета, Успешно, НаборЗаписейДополнительный);
	КонецЕсли;
	
	Успешно = Истина;
    		
	Возврат Не Успешно;
	
КонецФункции

Функция ПолучитьДанныеРасчетаБелгосстрах(ГоловнаяОрганизация)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамКонецМесяцаПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамНачалоМесяцаПериодаРегистрации", НачалоГода(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамОбособленноеПодразделение", Организация);
	//vvv
	Запрос.УстановитьПараметр("ДатаДеноминации",ОбщегоНазначения.ПолучитьДатуДеноминации());
	//
	Запрос.УстановитьПараметр("парамПодлежитОбложению", Перечисления.ДоходыФСС_НС.Облагается);

	Запрос.УстановитьПараметр("парамНачалоГода", НачалоГода(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамГодРасчета", Год(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата",Дата('00010101'));
	
	//vvv
	ДатаКонтроля=НачалоГода(ПериодРегистрации); //по умолчанию с начала года
	ЗапросПн=Новый Запрос;
	ЗапросПн.УстановитьПараметр("Организация",Организация);
	ЗапросПн.Текст=
	"ВЫБРАТЬ
	|	ДатыПересчетаПенсионного.ДатаПересчета
	|ИЗ
	|	РегистрСведений.ДатыПересчетаПенсионного КАК ДатыПересчетаПенсионного
	|ГДЕ
	|	ДатыПересчетаПенсионного.Организация = &Организация";
	
	ВыборкаПН=ЗапросПн.Выполнить().Выбрать();
	Если ВыборкаПН.Следующий() Тогда
		Если ВыборкаПН.ДатаПересчета<>Дата(1,1,1) ТОгда
			ДатаКонтроля=?(ДатаКонтроля<ВыборкаПН.ДатаПересчета,ВыборкаПН.ДатаПересчета,ДатаКонтроля);
		КонецЕсли;		
	КонецЕсли;		
	Запрос.УстановитьПараметр("парамНачалоМесяцаПериодаРегистрации",ДатаКонтроля);
	//
	
	ЛьготаИнвалидов = "100000";
	
	СписокВсехПодразделенийОрганизации = ПроцедурыУправленияПерсоналом.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокВсехПодразделенийОрганизации.Добавить(ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СписокВсехПодразделенийОрганизации", СписокВсехПодразделенийОрганизации);
	// ---------------------------------------------------------------------------
	// тексты запросов
	//
	
	// Периоды
	// Таблица список периодов
	// Поля:
	//		Период
	// Описание:
	//  список периодов - первые даты месяцеы с начала года по "текущий" для запроса период
	//
	
	МесяцыДляРасчетаТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МАКСИМУМ(БелгосстрахСведенияОДоходах.ПериодВзаиморасчетов) КАК ПериодВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.БелгосстрахСведенияОДоходах КАК БелгосстрахСведенияОДоходах
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(БелгосстрахСведенияОДоходах.Период, МЕСЯЦ) = &парамПериодРегистрации
	|	И БелгосстрахСведенияОДоходах.Организация = &парамОбособленноеПодразделение";
	Запрос.Текст = МесяцыДляРасчетаТекст;
	ВыборкаПоследнегоМесяца  = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаПоследнегоМесяца.Следующий() Тогда
		Если ЗначениеЗаполнено(ВыборкаПоследнегоМесяца.ПериодВзаиморасчетов) Тогда
			ПоследнийМесяц = ВыборкаПоследнегоМесяца.ПериодВзаиморасчетов;
		Иначе
			ПоследнийМесяц = ПериодРегистрации;
		КонецЕсли;
	Иначе
		ПоследнийМесяц = ПериодРегистрации;
	КонецЕсли;
	// конец месяца налогового периода
	КонецМесяца = КонецМесяца(НачалоГода(ПериодРегистрации));
	// первый месяц
	ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериоды";
	// прибавим остальные месяцы
	Пока  КонецМесяца <= КонецМесяца(ПоследнийМесяц) Цикл
		КонецМесяца = КонецМесяца(КонецМесяца+1);
		ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	
	
	// ФизлицаДляРасчета
	//
	ФизлицаДляРасчетаТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	БелгосстрахСведенияОДоходах.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТФизЛица
	|ИЗ
	|	РегистрНакопления.БелгосстрахСведенияОДоходах КАК БелгосстрахСведенияОДоходах
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(БелгосстрахСведенияОДоходах.Период, МЕСЯЦ) = &парамПериодРегистрации
	//vvv
	//|	И БелгосстрахСведенияОДоходах.Организация = &парамОбособленноеПодразделение
	|	И БелгосстрахСведенияОДоходах.ОбособленноеПодразделение = &парамОбособленноеПодразделение
	//
	|
	|СГРУППИРОВАТЬ ПО
	|	БелгосстрахСведенияОДоходах.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	БелгосстрахСведенияОДоходах.Сотрудник";
	Запрос.Текст = ФизлицаДляРасчетаТекст;
	Запрос.Выполнить();
	
			
	
	ДанныеОМЗПТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК Месяц,
	//vvv
	//|	ЕСТЬNULL(РазмерыПараметровДляРасчетаРБ.Размер, 0) КАК Размер
	|	ЕСТЬNULL(РазмерыПараметровДляРасчетаРБ.Размер / ВЫБОР КОГДА РазмерыПараметровДляРасчетаРБ.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ , 0) КАК Размер
	//
	|ПОМЕСТИТЬ ВТДанныеОМЗП
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		МАКСИМУМ(РазмерыПараметровДляРасчетаРБ.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПериоды КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|			ПО НАЧАЛОПЕРИОДА(Периоды.Период,МЕСЯЦ) > РазмерыПараметровДляРасчетаРБ.Период
	|				И (РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (РазмерыПараметровДляРасчетаРБ.Период = Периоды.ПериодРегистра)
	|			И (РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц";
	
	Запрос.Текст = ДанныеОМЗПТекст;
	Запрос.Выполнить();
	
	
	ИсчисленныйБелгосстрахТекст = 
	"ВЫБРАТЬ
	|	БелгосстрахИсчисленный.Сотрудник КАК Сотрудник,
	//vvv
	//|	БелгосстрахИсчисленный.Белгосстрах КАК Белгосстрах,
	|	БелгосстрахИсчисленный.Белгосстрах / ВЫБОР КОГДА БелгосстрахИсчисленный.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК Белгосстрах,
	//
	|	БелгосстрахИсчисленный.ПериодВзаиморасчетов КАК Месяц,
	|	БелгосстрахИсчисленный.Сотрудник.Физлицо как ФизЛицо
	|ПОМЕСТИТЬ ВТБелгосстрахИсчисленный
	|ИЗ
	|	РегистрНакопления.БелгосстрахИсчисленный КАК БелгосстрахИсчисленный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК Физлица
	|		ПО БелгосстрахИсчисленный.Сотрудник = Физлица.Сотрудник
	|ГДЕ
	|	БелгосстрахИсчисленный.Организация = &парамГоловнаяОрганизация
	|	И (БелгосстрахИсчисленный.Период МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации
	|			ИЛИ НАЧАЛОПЕРИОДА(БелгосстрахИсчисленный.ПериодВзаиморасчетов,МЕСЯЦ) МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	
	Запрос.Текст = ИсчисленныйБелгосстрахТекст;
	Запрос.Выполнить();
	
	
	
	// ДоходыПоФизлицамМесяцамКодамТекст
	// Таблица ЕСН-доходы по ФЛ и Периодам:
	// Поля:
	// Описание:
	// Выбираем из ЕСНОсновныеНачисления ,ЕСНДополнительныеНачисления и ЕСНСведенияОДоходах и суммируем результат
	// с начала года по текущий период
	
	СведенияОДоходах = 
	"ВЫБРАТЬ
	//vvv
	//|	СУММА(БелгосстрахСведенияОДоходах.БазаБелгосстрах) КАК БазаБелгосстрах,
	|	СУММА(БелгосстрахСведенияОДоходах.БазаБелгосстрах / ВЫБОР КОГДА БелгосстрахСведенияОДоходах.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ) КАК БазаБелгосстрах,
	//
	|	БелгосстрахСведенияОДоходах.Сотрудник КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(БелгосстрахСведенияОДоходах.ПериодВзаиморасчетов, МЕСЯЦ) КАК Месяц,
	|	БелгосстрахСведенияОДоходах.КодДоходаЕСН,
	|	БелгосстрахСведенияОДоходах.ДоходБелгосстрах,
	|	БелгосстрахСведенияОДоходах.Сотрудник.Физлицо как ФизЛицо
	|ПОМЕСТИТЬ ВТСведенияОДоходах
	|ИЗ
	|	РегистрНакопления.БелгосстрахСведенияОДоходах КАК БелгосстрахСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК Физлица
	|		ПО БелгосстрахСведенияОДоходах.Сотрудник = Физлица.Сотрудник
	|ГДЕ
	|	(БелгосстрахСведенияОДоходах.Период МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации
	|			ИЛИ НАЧАЛОПЕРИОДА(БелгосстрахСведенияОДоходах.ПериодВзаиморасчетов,МЕСЯЦ) МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации)
	|
	|СГРУППИРОВАТЬ ПО
	|	БелгосстрахСведенияОДоходах.ПериодВзаиморасчетов,
	|	БелгосстрахСведенияОДоходах.Сотрудник,
	|	БелгосстрахСведенияОДоходах.КодДоходаЕСН,
	|	БелгосстрахСведенияОДоходах.ДоходБелгосстрах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц,
	|	Сотрудник";	
	Запрос.Текст = СведенияОДоходах;
	Запрос.Выполнить();
	
	
	ОблагаемаяБазаПоМесяцам = 
	"ВЫБРАТЬ
	|	Основная.Сотрудник КАК Сотрудник,
	|	Основная.Месяц КАК Месяц,
	|	ВЫБОР
	|		КОГДА Основная.ДоходБелгосстрах = &парамПодлежитОбложению
	|				И Основная.КодДоходаЕСН <> ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговорГПХ)
	|			ТОГДА Основная.БазаБелгосстрах
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаДоходСтрахБезГПХ,
	|	ВЫБОР
	|		КОГДА Основная.ДоходБелгосстрах = &парамПодлежитОбложению
	|				И Основная.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговорГПХ)
	|			ТОГДА Основная.БазаБелгосстрах
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаДоходСтрахПоГПХ,
	|	Основная.ФизЛицо
	|ПОМЕСТИТЬ ВТОблагаемаяБаза
	|ИЗ
	|	ВТСведенияОДоходах КАК Основная
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Месяц";
	
	Запрос.Текст = ОблагаемаяБазаПоМесяцам;
	Запрос.Выполнить();


	
	ДатыПриемаИУвольненияТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Физлица.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(РаботникиПрием.Период) КАК ДатаПриема,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА РаботникиУвольнение.Период < РаботникиПрием.Период
	|				ТОГДА &ПустаяДата
	|			ИНАЧЕ РаботникиУвольнение.Период
	|		КОНЕЦ) КАК ДатаУвольнения
	|ПОМЕСТИТЬ ВТДатыПриемаИУвольнения
	|ИЗ
	|	ВТФизЛица КАК Физлица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамКонецМесяцаПериодаРегистрации, ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиУвольнение
	|		ПО Физлица.Сотрудник = РаботникиУвольнение.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамКонецМесяцаПериодаРегистрации, ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)) КАК РаботникиПрием
	|		ПО Физлица.Сотрудник = РаботникиПрием.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	Физлица.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	
	Запрос.Текст = ДатыПриемаИУвольненияТекст;
	Запрос.Выполнить();
	
	
	
	ГрафикиРаботыТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Основной.Сотрудник КАК Сотрудник,
	|	Основной.ПериодДействия,
	|	Основной.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТГрафикиРаботы
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК Физлица
	|		ПО Основной.Сотрудник = Физлица.Сотрудник
	|ГДЕ
	|	Основной.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|	И Основной.ПериодРегистрации МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.Сотрудник,
	|	Основной.ПериодДействия,
	|	Основной.ГрафикРаботы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ГрафикРаботы";
	
	Запрос.Текст = ГрафикиРаботыТекст;
	Запрос.Выполнить();
	
	//vvv даже если введен индивидуальный график, норму времени будем брать из основного графика
	ГрафикиРаботыСотрудниковТекст = 
	"ВЫБРАТЬ
	|	Таб1.Сотрудник КАК Сотрудник,
	|	Таб1.ПериодДействия КАК ПериодДействия,
	|	Таб1.ГрафикРаботы КАК ГрафикРаботы,
	|	РаботникиОрганизаций.ГрафикРаботы КАК ГрафикСотрудника
	|ПОМЕСТИТЬ ВТГрафикиРаботыСГрафикомСотрудника
	|ИЗ
	|	(ВЫБРАТЬ
	|		ГрафикиРаботы.Сотрудник КАК Сотрудник,
	|		ГрафикиРаботы.ПериодДействия КАК ПериодДействия,
	|		ГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы,
	|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ПериодГрафика
	|	ИЗ
	|		ВТГрафикиРаботы КАК ГрафикиРаботы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО ГрафикиРаботы.Сотрудник = РаботникиОрганизаций.Сотрудник
	|				И (РаботникиОрганизаций.Период <= КОНЕЦПЕРИОДА(ГрафикиРаботы.ПериодДействия, МЕСЯЦ))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ГрафикиРаботы.Сотрудник,
	|		ГрафикиРаботы.ПериодДействия,
	|		ГрафикиРаботы.ГрафикРаботы) КАК Таб1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО Таб1.ПериодГрафика = РаботникиОрганизаций.Период
	|			И Таб1.Сотрудник = РаботникиОрганизаций.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ГрафикРаботы,
	|	ГрафикСотрудника";
	
	Запрос.Текст = ГрафикиРаботыСотрудниковТекст;
	Запрос.Выполнить();
    //
	
	
	НормаВремениПоОбщемуГрафикуТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК НормаДней,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма) КАК НормаЧасов,
	|	ГрафикиРаботы.Сотрудник КАК Сотрудник,
	|	ГрафикиРаботы.ПериодДействия КАК ПериодДействия
	|ПОМЕСТИТЬ ВТНормаЗаМесяц
	|ИЗ
	//vvv комментируем
	//|	ВТГрафикиРаботы КАК ГрафикиРаботы
	|	ВТГрафикиРаботыСГрафикомСотрудника КАК ГрафикиРаботы
	//
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	//vvv комментируем
	//|		ПО ГрафикиРаботы.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|		ПО ГрафикиРаботы.ГрафикСотрудника = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	//
	|			И ГрафикиРаботы.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
	//vvv
	//|			И (ГрафикиРаботыПоВидамВремени.План)
	|			И ((ГрафикиРаботыПоВидамВремени.План И ГрафикиРаботыПоВидамВремени.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы) ИЛИ (НЕ ГрафикиРаботыПоВидамВремени.План И ГрафикиРаботыПоВидамВремени.ГрафикРаботы ССЫЛКА Справочник.СотрудникиОрганизаций))
	//	
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиРаботы.Сотрудник,
	|	ГрафикиРаботы.ПериодДействия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия";
	
	
	Запрос.Текст = НормаВремениПоОбщемуГрафикуТекст;
	Запрос.Выполнить();
	
	ОтработанноеВремя =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
	|				ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ОтработаноЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтработаноЧасов,
	|	ВЫБОР
	|		КОГДА ДатыПриемаИУвольнения.ДатаПриема >= НАЧАЛОПЕРИОДА(НормаЗаМесяц.ПериодДействия, МЕСЯЦ)
	|				ИЛИ ДатыПриемаИУвольнения.ДатаУвольнения <= КОНЕЦПЕРИОДА(НормаЗаМесяц.ПериодДействия, МЕСЯЦ)
	|			ТОГДА НормаЗаМесяц.НормаЧасов
	//vvv комментируем. Норму времени будем брать из общего графика. 
	//|		ИНАЧЕ СУММА(ОсновныеНачисленияРаботниковОрганизаций.НормаЧасов)
	|		ИНАЧЕ НормаЗаМесяц.НормаЧасов
	//
	|	КОНЕЦ КАК НормаЧасов,
	|	НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, МЕСЯЦ) КАК Месяц
	|ПОМЕСТИТЬ ВТОтработанноеВремя
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПриемаИУвольнения КАК ДатыПриемаИУвольнения
	|		ПО ОсновныеНачисленияРаботниковОрганизаций.Сотрудник = ДатыПриемаИУвольнения.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаЗаМесяц КАК НормаЗаМесяц
	|		ПО ОсновныеНачисленияРаботниковОрганизаций.Сотрудник = НормаЗаМесяц.Сотрудник
	|			И (НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, МЕСЯЦ) = НАЧАЛОПЕРИОДА(НормаЗаМесяц.ПериодДействия, МЕСЯЦ))
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации
	|	И ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение В(&СписокВсехПодразделенийОрганизации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник,
	|	ДатыПриемаИУвольнения.ДатаПриема,
	|	ДатыПриемаИУвольнения.ДатаУвольнения,
	|	НормаЗаМесяц.НормаЧасов,
	|	НормаЗаМесяц.ПериодДействия,
	|	НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Месяц";
	
	Запрос.Текст = ОтработанноеВремя;
	Запрос.Выполнить();
	
	ДанныеОПравеНаПенсиюТекст = 
	//vvv
	//"ВЫБРАТЬ
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//
	|	НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК Месяц,
	|	ГражданствоФизЛиц.ФизЛицо КАК Физлицо,
	|	ГражданствоФизЛиц.ВидЗастрахованногоЛица
	|ПОМЕСТИТЬ ВТДанныеОПравеНаПенсию
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Месяц КАК Период,
	|		ГражданствоФизЛиц.ФизЛицо КАК Физлицо,
	|		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТСведенияОДоходах КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|			ПО Периоды.Месяц >= ГражданствоФизЛиц.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ГражданствоФизЛиц.ФизЛицо,
	|		Периоды.Месяц) КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО (ГражданствоФизЛиц.Период = Периоды.ПериодРегистра)
	|			И (ГражданствоФизЛиц.ФизЛицо = Периоды.Физлицо)
	//|			И (ГражданствоФизЛиц.НеИмеетПравоНаПенсию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Месяц";
	
	Запрос.Текст = ДанныеОПравеНаПенсиюТекст;
	Запрос.Выполнить();
	
	
	ДляИсчисленияЕСНТекст = 
	"ВЫБРАТЬ
	|	ДанныеФСЗН.Сотрудник,
	|	ДанныеФСЗН.Месяц,
	|	ЕСТЬNULL(ДанныеОМЗП.Размер, 0) КАК РазмерСреднейЗП,
	|	ЕСТЬNULL(ОтработанноеВремя.ОтработаноЧасов, 0) КАК ОтработаноЧасов,
	|	ЕСТЬNULL(ОтработанноеВремя.НормаЧасов, 0) КАК НормаЧасов,
	|	СУММА(ДанныеФСЗН.БазаДоходСтрахБезГПХ) КАК БазаДоходСтрахБезГПХ,
	|	СУММА(ДанныеФСЗН.БазаДоходСтрахПоГПХ) КАК БазаДоходСтрахПоГПХ,
	|	СУММА(ДанныеФСЗН.НачисленныйСтрах) КАК НачисленныйСтрах,
	|	ДанныеФСЗН.ФизЛицо
	|ПОМЕСТИТЬ ВТ_БегосстрахДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		БазаДляНачислений.Сотрудник КАК Сотрудник,
	|		БазаДляНачислений.Месяц КАК Месяц,
	|		БазаДляНачислений.БазаДоходСтрахБезГПХ КАК БазаДоходСтрахБезГПХ,
	|		БазаДляНачислений.БазаДоходСтрахПоГПХ КАК БазаДоходСтрахПоГПХ,
	|		0 КАК НачисленныйСтрах,
	|		БазаДляНачислений.ФизЛицо КАК ФизЛицо
	|	ИЗ
	|		ВТОблагаемаяБаза КАК БазаДляНачислений
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Отчсиления.Сотрудник,
	|		Отчсиления.Месяц,
	|		0,
	|		0,
	|		Отчсиления.Белгосстрах,
	|		Отчсиления.ФизЛицо
	|	ИЗ
	|		ВТБелгосстрахИсчисленный КАК Отчсиления) КАК ДанныеФСЗН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОМЗП КАК ДанныеОМЗП
	|		ПО ДанныеФСЗН.Месяц = ДанныеОМЗП.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработанноеВремя КАК ОтработанноеВремя
	|		ПО ДанныеФСЗН.Сотрудник = ОтработанноеВремя.Сотрудник
	|			И ДанныеФСЗН.Месяц = ОтработанноеВремя.Месяц
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеФСЗН.Сотрудник,
	|	ДанныеФСЗН.Месяц,
	|	ДанныеОМЗП.Размер,
	|	ОтработанноеВремя.ОтработаноЧасов,
	|	ОтработанноеВремя.НормаЧасов,
	|	ДанныеФСЗН.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Бегосстрах.Сотрудник,
	|	ВТ_Бегосстрах.Месяц,
	|	ВТ_Бегосстрах.РазмерСреднейЗП,
	|	ВТ_Бегосстрах.ОтработаноЧасов,
	|	ВТ_Бегосстрах.НормаЧасов,
	|	ВЫБОР
	|		КОГДА ВТДанныеОПравеНаПенсию.ВидЗастрахованногоЛица = ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ИностранцыНеУплачивающие)
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_Бегосстрах.БазаДоходСтрахБезГПХ
	|	КОНЕЦ КАК БазаДоходСтрахБезГПХ,
	|	ВЫБОР
	|		КОГДА ВТДанныеОПравеНаПенсию.ВидЗастрахованногоЛица = ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ИностранцыНеУплачивающие)
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_Бегосстрах.БазаДоходСтрахПоГПХ
	|	КОНЕЦ КАК БазаДоходСтрахПоГПХ,
	|	ВЫБОР
	|		КОГДА ВТДанныеОПравеНаПенсию.ВидЗастрахованногоЛица = ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ИностранцыНеУплачивающие)
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_Бегосстрах.НачисленныйСтрах
	|	КОНЕЦ КАК НачисленныйСтрах,
	|	ВТ_Бегосстрах.ФизЛицо
	|ИЗ
	|	ВТ_БегосстрахДанные КАК ВТ_Бегосстрах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПравеНаПенсию КАК ВТДанныеОПравеНаПенсию
	|		ПО ВТ_Бегосстрах.ФизЛицо = ВТДанныеОПравеНаПенсию.ФизЛицо
	|			И ВТ_Бегосстрах.Месяц = ВТДанныеОПравеНаПенсию.Месяц";
	
	Запрос.Текст = ДляИсчисленияЕСНТекст;
	
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции  // ПолучитьДанныеРасчетаБелгосстрах

// Предназначена для получения выборки из запроса с данными расчета ЕСН
// По текущему регистратору получает 
//    	данные о начисленной зарплате в разрезе кодов дохода ЕСН
// 		данные об инвалидности физлиц помесячно
//		присоединяет данные о скидках к доходам
//
// Параметры:
//  нет
// Возвращаемое значение:
//  Выборка результата запроса
//
Функция ПолучитьДанныеРасчетаЕСН(ГоловнаяОрганизация)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

    Запрос.УстановитьПараметр("парамКонецМесяцаПериодаРегистрации", КонецМесяца(ПериодРегистрации));
    Запрос.УстановитьПараметр("парамНачалоМесяцаПериодаРегистрации", НачалоГода(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамОбособленноеПодразделение", Организация);
	Запрос.УстановитьПараметр("парамПодлежитОбложению", Перечисления.ДоходыФСС_НС.Облагается);
	//vvv
	//Запрос.УстановитьПараметр("парамВидСтавокЕСНиПФР", ГоловнаяОрганизация.ВидСтавокЕСНиПФР);
	Запрос.УстановитьПараметр("парамВидСтавокЕСНиПФР", Перечисления.ВидыСтавокЕСНиПФР.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаДеноминации",ОбщегоНазначения.ПолучитьДатуДеноминации());
	//
    Запрос.УстановитьПараметр("парамНачалоГода", НачалоГода(ПериодРегистрации));
    Запрос.УстановитьПараметр("парамГруппа1", "I");
    Запрос.УстановитьПараметр("парамГруппа2", "II");
    Запрос.УстановитьПараметр("парамГодРасчета", Год(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
    Запрос.УстановитьПараметр("парамМуж", Перечисления.ПолФизическихЛиц.Мужской);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата",Дата('00010101'));

	
	ЛьготаИнвалидов = "100000";
	
	СписокВсехПодразделенийОрганизации = ПроцедурыУправленияПерсоналом.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокВсехПодразделенийОрганизации.Добавить(ГоловнаяОрганизация);
    Запрос.УстановитьПараметр("СписокВсехПодразделенийОрганизации", СписокВсехПодразделенийОрганизации);
	// ---------------------------------------------------------------------------
	// тексты запросов
	//

	// Периоды
	// Таблица список периодов
	// Поля:
	//		Период
	// Описание:
	//  список периодов - первые даты месяцеы с начала года по "текущий" для запроса период
	//
	
	МесяцыДляРасчетаТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МАКСИМУМ(ЕСНСведенияОДоходах.ПериодВзаиморасчетов) КАК ПериодВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|ГДЕ
	|	ЕСНСведенияОДоходах.Период = &парамПериодРегистрации
	|	И ЕСНСведенияОДоходах.ОбособленноеПодразделение = &парамОбособленноеПодразделение";
	Запрос.Текст = МесяцыДляРасчетаТекст;
	ВыборкаПоследнегоМесяца  = Запрос.Выполнить().Выбрать();

	Если ВыборкаПоследнегоМесяца.Следующий() Тогда
		Если ЗначениеЗаполнено(ВыборкаПоследнегоМесяца.ПериодВзаиморасчетов) Тогда
			ПоследнийМесяц = ВыборкаПоследнегоМесяца.ПериодВзаиморасчетов;
		Иначе
			ПоследнийМесяц = ПериодРегистрации;
		КонецЕсли;
	Иначе
		ПоследнийМесяц = ПериодРегистрации;
	КонецЕсли;
	// конец месяца налогового периода
	КонецМесяца = КонецМесяца(НачалоГода(ПериодРегистрации));
	// первый месяц
	ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериоды";
	// прибавим остальные месяцы
	Пока  КонецМесяца <= КонецМесяца(ПоследнийМесяц) Цикл
		КонецМесяца = КонецМесяца(КонецМесяца+1);
    	ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();

	
	// ФизлицаДляРасчета
	//
	ФизлицаДляРасчетаТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСНСведенияОДоходах.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТФизЛица
	|ИЗ
	|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|ГДЕ
	|	ЕСНСведенияОДоходах.Период = &парамПериодРегистрации
	|	И ЕСНСведенияОДоходах.ОбособленноеПодразделение = &парамОбособленноеПодразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	Запрос.Текст = ФизлицаДляРасчетаТекст;
	Запрос.Выполнить();
	
    	
	// ДанныеОбИнвалидности
	// Таблица Данных об Инвалидности: - таблица это список инвалидов и периодов инвалидности
	// поля:
	//		Физлицо, 
	//		Месяц - месяц налогового периода
	// Описание:	
	//	Выбираем Из Список периодов (таблица - список периодов с начала года по текущий период
	//	Внутреннее соединение с СведенияОбИнвалидностиФизлиц.СрезПоследних
	//	по равенству периодов
	//  условие: что физлицо - Инвалид
	// 
			
	ДанныеОбИнвалидностиТекст = 
	//vvv
	//"ВЫБРАТЬ 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности = &парамГруппа1
	|				ИЛИ СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности = &парамГруппа2
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Группа,
	|	СведенияОбИнвалидностиФизлиц.Физлицо КАК Физлицо,
	|	НАЧАЛОПЕРИОДА(Периоды.Период,МЕСЯЦ) КАК Месяц
	|ПОМЕСТИТЬ ВТДанныеИбИнвалидности
	|ИЗ
	|	(ВЫБРАТЬ
	|		СведенияОбИнвалидностиФизлиц.Физлицо КАК Физлицо,
	|		Периоды.Период КАК Период,
	|		МАКСИМУМ(СведенияОбИнвалидностиФизлиц.Период) КАК ПериодРегистра
    |	ИЗ
	|		ВТПериоды КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|			ПО Периоды.Период >= СведенияОбИнвалидностиФизлиц.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СведенияОбИнвалидностиФизлиц.Физлицо,	
	|		Периоды.Период) КАК Периоды
   	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|		ПО (СведенияОбИнвалидностиФизлиц.Период = Периоды.ПериодРегистра)
	|			И (СведенияОбИнвалидностиФизлиц.Физлицо = Периоды.Физлицо)
	|			И (СведенияОбИнвалидностиФизлиц.Инвалидность)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо";
	
	Запрос.Текст = ДанныеОбИнвалидностиТекст;
	Запрос.Выполнить();
	
		
	ДанныеОМЗПТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК Месяц,
	//vvv
	//|	ЕСТЬNULL(РазмерыПараметровДляРасчетаРБ.Размер, 0) КАК Размер
	|	ЕСТЬNULL(РазмерыПараметровДляРасчетаРБ.Размер / ВЫБОР КОГДА РазмерыПараметровДляРасчетаРБ.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ , 0) КАК Размер
	//
	|ПОМЕСТИТЬ ВТДанныеОМЗП
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		МАКСИМУМ(РазмерыПараметровДляРасчетаРБ.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПериоды КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|			ПО Периоды.Период >= РазмерыПараметровДляРасчетаРБ.Период
	|				И (РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.МинимальнаяЗарплатаРБ))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (РазмерыПараметровДляРасчетаРБ.Период = Периоды.ПериодРегистра)
	|			И (РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.МинимальнаяЗарплатаРБ))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц";
	
	Запрос.Текст = ДанныеОМЗПТекст;
	Запрос.Выполнить();
	
	
	ИсчисленныйЕСНТекст = 
	"ВЫБРАТЬ
	|	ЕСНИсчисленный.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ЕСНИсчисленный.ПроцентФСЗН ЕСТЬ NULL 
	|			ТОГДА 34
	|		ИНАЧЕ ЕСНИсчисленный.ПроцентФСЗН
	|	КОНЕЦ КАК ПроцентФСЗН,
	|	НАЧАЛОПЕРИОДА(ЕСНИсчисленный.ПериодВзаиморасчетов, МЕСЯЦ) КАК Месяц,
	//vvv
	//|	ЕСНИсчисленный.ПенсионныйФонд КАК ПенсионныйФонд,
	//|	ЕСНИсчисленный.ФСЗН КАК ФСЗН,
	//|	ЕСНИсчисленный.ЕдиныйПлатеж КАК ЕдиныйПлатеж,
	//|	ЕСНИсчисленный.ОбязательноеСтрахование КАК ОбязательноеСтрахование,
	|	ЕСНИсчисленный.ПенсионныйФонд / ВЫБОР КОГДА ЕСНИсчисленный.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК ПенсионныйФонд,
	|	ЕСНИсчисленный.ФСЗН / ВЫБОР КОГДА ЕСНИсчисленный.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК ФСЗН,
	|	ЕСНИсчисленный.ЕдиныйПлатеж / ВЫБОР КОГДА ЕСНИсчисленный.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ  КАК ЕдиныйПлатеж,
	|	ЕСНИсчисленный.ОбязательноеСтрахование / ВЫБОР КОГДА ЕСНИсчисленный.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ  КАК ОбязательноеСтрахование,
	//
	|	ВЫБОР
	|		КОГДА (НЕ Инвалид.Физлицо ЕСТЬ NULL )
	|			ТОГДА Инвалид.Группа
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Группа
	|ПОМЕСТИТЬ ВТЕСНИсчисленный
	|ИЗ
	|	РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК Физлица
	|		ПО ЕСНИсчисленный.ФизЛицо = Физлица.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеИбИнвалидности КАК Инвалид
	|		ПО (Инвалид.Физлицо = ЕСНИсчисленный.ФизЛицо)
	| 			И Инвалид.Месяц = НАЧАЛОПЕРИОДА(ЕСНИсчисленный.ПериодВзаиморасчетов, МЕСЯЦ)		
	|ГДЕ
	|	ЕСНИсчисленный.Организация = &парамГоловнаяОрганизация
	|	И (ЕСНИсчисленный.Период МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации
	|			ИЛИ ЕСНИсчисленный.ПериодВзаиморасчетов МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц,
	|	ФизЛицо";
	
	Запрос.Текст = ИсчисленныйЕСНТекст;
	Запрос.Выполнить();



    // ДоходыПоФизлицамМесяцамКодамТекст
	// Таблица ЕСН-доходы по ФЛ и Периодам:
    // Поля:
	// Описание:
	// Выбираем из ЕСНОсновныеНачисления ,ЕСНДополнительныеНачисления и ЕСНСведенияОДоходах и суммируем результат
	// с начала года по текущий период
	
	ДоходыПоФизлицамМесяцамКодамТекст = 
	"ВЫБРАТЬ
	|	ЕСНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.ПериодВзаиморасчетов, МЕСЯЦ) КАК Месяц,
	|	НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	ЕСНСведенияОДоходах.ДоходФСЗН,
	|	ЕСНСведенияОДоходах.ДоходСтрах,
	|	ЕСНСведенияОДоходах.доходЕдиныйПлатеж,
	//vvv
	//|	ЕСНСведенияОДоходах.Результат КАК ОблагаемыйДоход,
	//|	ЕСНСведенияОДоходах.БазаФСЗН,
	|	ЕСНСведенияОДоходах.Результат / ВЫБОР КОГДА ЕСНСведенияОДоходах.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК ОблагаемыйДоход,
	|	ЕСНСведенияОДоходах.БазаФСЗН / ВЫБОР КОГДА ЕСНСведенияОДоходах.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК БазаФСЗН,
	//
	|	ЕСНСведенияОДоходах.КодДоходаЕСН
	|ПОМЕСТИТЬ ВТСведенияОДоходах
	|ИЗ
	|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК Физлица
	|		ПО ЕСНСведенияОДоходах.ФизЛицо = Физлица.ФизЛицо
	|ГДЕ
	//vvv убираем условие на обособленное подразделение, т.к. если человек работал в двух подразделениях, не виден был доход с другого подразделения
	//|	ЕСНСведенияОДоходах.ОбособленноеПодразделение В(&СписокВсехПодразделенийОрганизации)
	//|	И (ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации
	|	(ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации
	//
	|			ИЛИ ЕСНСведенияОДоходах.ПериодВзаиморасчетов МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Месяц";
	
	Запрос.Текст = ДоходыПоФизлицамМесяцамКодамТекст;
	Запрос.Выполнить();
	
	// ДанныеОПравеНаПенсию
	// Таблица Таблица Данные о праве на пенсию: - таблица это список иностранцев и периодов
	// Поля:
	//		Физлицо, 
	//		Месяц - месяц налогового периода
	// 
	// Описание:
	//	Выбираем Из Списка периодов
	//	Внутреннее соединение с ГражданствоФизЛиц.СрезПоследних
	//  по равенству периодов
	//  условие: что физлицо - не имеет права на пенсию
		
	ДанныеОПравеНаПенсиюТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК Месяц,
	|	ГражданствоФизЛиц.ФизЛицо КАК Физлицо,
	|	ГражданствоФизЛиц.ВидЗастрахованногоЛица,
	|	ВЫБОР
	|		КОГДА ГражданствоФизЛиц.ВидЗастрахованногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ИностранцыНеУплачивающие)
	|				ИЛИ ГражданствоФизЛиц.ВидЗастрахованногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРб)
	|				ИЛИ ГражданствоФизЛиц.ВидЗастрахованногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ИностраныеГражданеСтранЕАЭС)
	|				ИЛИ ГражданствоФизЛиц.ВидЗастрахованногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ИностранцыУплачивающиеСтраховыеВзносы)
	|				ИЛИ ГражданствоФизЛиц.ВидЗастрахованногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ИностранцыУплачивающиеБелгосстрах)
	|			ТОГДА ГражданствоФизЛиц.НеИмеетПравоНаПенсию
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЕмеетПравоНаПенсию
	|ПОМЕСТИТЬ ВТДанныеОПравеНаПенсию
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Месяц КАК Период,
	|		ГражданствоФизЛиц.ФизЛицо КАК Физлицо,
	|		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТСведенияОДоходах КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|			ПО Периоды.Месяц >= ГражданствоФизЛиц.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ГражданствоФизЛиц.ФизЛицо,
	|		Периоды.Месяц) КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО (ГражданствоФизЛиц.Период = Периоды.ПериодРегистра)
	|			И (ГражданствоФизЛиц.ФизЛицо = Периоды.Физлицо)
	|			И (ГражданствоФизЛиц.НеИмеетПравоНаПенсию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Месяц";
	
	Запрос.Текст = ДанныеОПравеНаПенсиюТекст;
	Запрос.Выполнить();



			
	// ОблагаемаяБазаПоМесяцам
	// Таблица Баз для исчисления ЕСН по месяцам налогового периода:
	// Поля:
	//		ФизЛицо
	//		Месяц - месяц налогового периода
	//		БазаФедеральныйБюджет         - база для налогообложения ЕСН в части налога в федеральный бюджет
	//		ЛьготаИнвалидуФБ   			  - сумма льготы инвалиду по ЕСН в части налога в федеральный бюджет
	//		БазаФСС                       - база для налогообложения ЕСН в части налога в ФСС
	//		ЛьготаИнвалидуФСС  			  - сумма льготы инвалиду по ЕСН в части налога в ФСС
	//		БазаФОМС					  - база для налогообложения ЕСН в части налогов в ФОМС
	//		ЛьготаИнвалидуФОМС 			  - сумма льготы инвалиду по ЕСН в части налога в ФОМС
	//		БазаПФР			   			  - база для взносов в ПФР (включая доходы, облагаемые ЕНВД)
	//		БазаПФР_ЕНВД			   	  - сумма облагаемых ПФР доходов, подподающих под ЕНВД
	//
	// Описание:
	//	
	// 	1) выбираем из ДоходыПоФизлицамМесяцамКодамТекст
	// 		и суммируем ОблагаемыйДоход для всех составных частей ЕСН. При этом учитывается входимость в базу
	// 		по флажку в справочнике - это База.
	//		Доход, облагаемый ЕНВД, не включаем в базу ЕСН. 
	//		Доход иностранца не включаем в базу ПФР.
	//		Для инвалидов считается база отдельно, но из неё исключаем договора подряда.
	//  2) суммировать ОблагаемыйДоход для всех составных частей ЕСН при входимости в базу и признака инвалидности - это ЛьготаИнвалиду по всем частям ЕСН
    	
	ОблагаемаяБазаПоМесяцам = 
	"ВЫБРАТЬ
	|	Основная.ФизЛицо КАК ФизЛицо,
	|	Основная.Месяц КАК Месяц,
	|	Основная.ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА НЕ Инвалид.Физлицо ЕСТЬ NULL
	|			ТОГДА Инвалид.Группа
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Группа,
	|	ВЫБОР
	|		КОГДА ДанныеОПравеНаПенсию.НеЕмеетПравоНаПенсию ЕСТЬ NULL 
	|				И Основная.ДоходФСЗН = &парамПодлежитОбложению
	|				И Основная.КодДоходаЕСН <> ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговорГПХ)
	|			ТОГДА Основная.БазаФСЗН
	|		КОГДА Основная.ДоходФСЗН = &парамПодлежитОбложению
	|				И Основная.КодДоходаЕСН <> ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговорГПХ)
	|				И НЕ ДанныеОПравеНаПенсию.НеЕмеетПравоНаПенсию 
	|			ТОГДА Основная.БазаФСЗН
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаДоходФСЗНБезГПХ,
	|	ВЫБОР
	|		КОГДА Основная.ДоходФСЗН = &парамПодлежитОбложению
	|				И Основная.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговорГПХ)
	|				И НЕ ДанныеОПравеНаПенсию.НеЕмеетПравоНаПенсию
	|			ТОГДА Основная.БазаФСЗН
	|		КОГДА Основная.ДоходФСЗН = &парамПодлежитОбложению
	|				И Основная.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговорГПХ)
	|				И ДанныеОПравеНаПенсию.НеЕмеетПравоНаПенсию ЕСТЬ NULL 
	|			ТОГДА Основная.БазаФСЗН
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаДоходФСЗНПоГПХ,
	|	ВЫБОР
	|		КОГДА Основная.ДоходСтрах = &парамПодлежитОбложению
	|				И Основная.КодДоходаЕСН <> ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговорГПХ)
	|			ТОГДА Основная.ОблагаемыйДоход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаДоходСтрахБезГПХ,
	|	ВЫБОР
	|		КОГДА Основная.ДоходСтрах = &парамПодлежитОбложению
	|				И Основная.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговорГПХ)
	|			ТОГДА Основная.ОблагаемыйДоход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаДоходСтрахПоГПХ,
	|	ВЫБОР
	|		КОГДА Основная.ДоходЕдиныйПлатеж = &парамПодлежитОбложению
	|				И НЕ ДанныеОПравеНаПенсию.НеЕмеетПравоНаПенсию
	|			ТОГДА Основная.ОблагаемыйДоход
	|		КОГДА Основная.ДоходЕдиныйПлатеж = &парамПодлежитОбложению
	|				И ДанныеОПравеНаПенсию.НеЕмеетПравоНаПенсию ЕСТЬ NULL 
	|			ТОГДА Основная.ОблагаемыйДоход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаДоходЕдиныйПлатеж,
	|	ДанныеОПравеНаПенсию.ВидЗастрахованногоЛица
	|ПОМЕСТИТЬ ВТОблагаемаяБаза
	|ИЗ
	|	ВТСведенияОДоходах КАК Основная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеИбИнвалидности КАК Инвалид
	|		ПО (Инвалид.Физлицо = Основная.ФизЛицо)
	|			 И (Инвалид.Месяц = Основная.Месяц)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПравеНаПенсию КАК ДанныеОПравеНаПенсию
	|		ПО Основная.Месяц = ДанныеОПравеНаПенсию.Месяц
	|			И Основная.ФизЛицо = ДанныеОПравеНаПенсию.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Месяц";
	
	Запрос.Текст = ОблагаемаяБазаПоМесяцам;
	Запрос.Выполнить();
	
	
	ДатыПриемаИУвольненияТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Физлица.ФизЛицо КАК ФизЛицо,
	|	МАКСИМУМ(РаботникиПрием.Период) КАК ДатаПриема,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА РаботникиУвольнение.Период < РаботникиПрием.Период
	|				ТОГДА &ПустаяДата
	|			ИНАЧЕ РаботникиУвольнение.Период
	|		КОНЕЦ) КАК ДатаУвольнения
	|ПОМЕСТИТЬ ВТДатыПриемаИУвольнения
	|ИЗ
	|	ВТФизЛица КАК Физлица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамКонецМесяцаПериодаРегистрации, ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиУвольнение
	|		ПО Физлица.ФизЛицо = РаботникиУвольнение.Сотрудник.Физлицо
	|			И (РаботникиУвольнение.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамКонецМесяцаПериодаРегистрации, ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)) КАК РаботникиПрием
	|		ПО Физлица.ФизЛицо = РаботникиПрием.Сотрудник.Физлицо
	|			И (РаботникиПрием.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|
	|СГРУППИРОВАТЬ ПО
	|	Физлица.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";

	Запрос.Текст = ДатыПриемаИУвольненияТекст;
	Запрос.Выполнить();


	
	ГрафикиРаботыТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Основной.ФизЛицо КАК ФизЛицо,
	|	Основной.ПериодДействия,
	|	Основной.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТГрафикиРаботы
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК Физлица
	|		ПО Основной.ФизЛицо = Физлица.ФизЛицо
	|ГДЕ
	|	Основной.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|	И Основной.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И Основной.ПериодРегистрации МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.ФизЛицо,
	|	Основной.ПериодДействия,
	|	Основной.ГрафикРаботы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	ГрафикРаботы";
	
	Запрос.Текст = ГрафикиРаботыТекст;
	Запрос.Выполнить();

    	
	НормаВремениПоОбщемуГрафикуТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК НормаДней,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма) КАК НормаЧасов,
	|	ГрафикиРаботы.ФизЛицо КАК ФизЛицо,
	|	ГрафикиРаботы.ПериодДействия КАК ПериодДействия
	|ПОМЕСТИТЬ ВТНормаЗаМесяц
	|ИЗ
	|	ВТГрафикиРаботы КАК ГрафикиРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ГрафикиРаботы.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И ГрафикиРаботы.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
	|			И (ГрафикиРаботыПоВидамВремени.План)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиРаботы.ФизЛицо,
	|	ГрафикиРаботы.ПериодДействия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	ПериодДействия";
	
	
	Запрос.Текст = НормаВремениПоОбщемуГрафикуТекст;
	Запрос.Выполнить();

	ОтработанноеВремя =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо КАК ФизЛицо,
	|	СУММА(ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
	|				ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ОтработаноЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтработаноЧасов,
	|	ВЫБОР
	|		КОГДА ДатыПриемаИУвольнения.ДатаПриема > НАЧАЛОПЕРИОДА(НормаЗаМесяц.ПериодДействия, МЕСЯЦ)
	|				ИЛИ ДатыПриемаИУвольнения.ДатаУвольнения < КОНЕЦПЕРИОДА(НормаЗаМесяц.ПериодДействия, МЕСЯЦ)
	|			ТОГДА НормаЗаМесяц.НормаЧасов
	|		ИНАЧЕ СУММА(ОсновныеНачисленияРаботниковОрганизаций.НормаЧасов)
	|	КОНЕЦ КАК НормаЧасов,
	|	НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, МЕСЯЦ) КАК Месяц
	|ПОМЕСТИТЬ ВТОтработанноеВремя
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПриемаИУвольнения КАК ДатыПриемаИУвольнения
	|		ПО ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо = ДатыПриемаИУвольнения.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаЗаМесяц КАК НормаЗаМесяц
	|		ПО ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо = НормаЗаМесяц.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, МЕСЯЦ) = НАЧАЛОПЕРИОДА(НормаЗаМесяц.ПериодДействия, МЕСЯЦ))
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации
	|	И ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение В(&СписокВсехПодразделенийОрганизации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо,
	|	ДатыПриемаИУвольнения.ДатаПриема,
	|	ДатыПриемаИУвольнения.ДатаУвольнения,
	|	НормаЗаМесяц.НормаЧасов,
	|	НормаЗаМесяц.ПериодДействия,
	|	НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Месяц";
	
	Запрос.Текст = ОтработанноеВремя;
	Запрос.Выполнить();

	
	ДляИсчисленияЕСНТекст = 
	"ВЫБРАТЬ
	|	ДанныеФСЗН.ФизЛицо КАК ФизЛицо,
	|	ДанныеФСЗН.Месяц КАК Месяц,
	|	ДанныеФСЗН.Группа,
	|	ЕСТЬNULL(ДанныеОМЗП.Размер,0) КАК РазмерМЗП,
	|	ЕСТЬNULL(ОтработанноеВремя.ОтработаноЧасов,0) КАК ОтработаноЧасов,
	|	ЕСТЬNULL(ОтработанноеВремя.НормаЧасов,0) КАК НормаЧасов,
	|	СУММА(ДанныеФСЗН.БазаДоходФСЗНБезГПХ) КАК БазаДоходФСЗНБезГПХ,
	|	СУММА(ДанныеФСЗН.БазаДоходФСЗНПоГПХ) КАК БазаДоходФСЗНПоГПХ,
	|	СУММА(ДанныеФСЗН.БазаДоходСтрахБезГПХ) КАК БазаДоходСтрахБезГПХ,
	|	СУММА(ДанныеФСЗН.БазаДоходСтрахПоГПХ) КАК БазаДоходСтрахПоГПХ,
	|	СУММА(ДанныеФСЗН.БазаДоходЕдиныйПлатеж) КАК БазаДоходЕдиныйПлатеж,
	|	СУММА(ДанныеФСЗН.ПенсионныйФонд) КАК ПенсионныйФонд,
	|	СУММА(ДанныеФСЗН.НачисленныйФСЗН) КАК НачисленныйФСЗН,
	|	СУММА(ДанныеФСЗН.НачисленныйСтрах) КАК НачисленныйСтрах,
	|	СУММА(ДанныеФСЗН.НачисленныйЕдиныйПлатеж) КАК НачисленныйЕдиныйПлатеж,
	|	ВТДанныеОПравеНаПенсию.ВидЗастрахованногоЛица
	|ИЗ
	|	(ВЫБРАТЬ
	|		БазаДляНачислений.ФизЛицо КАК ФизЛицо,
	|		БазаДляНачислений.Месяц КАК Месяц,
	|		БазаДляНачислений.Группа КАК Группа,
	|		БазаДляНачислений.БазаДоходФСЗНБезГПХ КАК БазаДоходФСЗНБезГПХ,
	|		БазаДляНачислений.БазаДоходФСЗНПоГПХ КАК БазаДоходФСЗНПоГПХ,
	|		БазаДляНачислений.БазаДоходСтрахБезГПХ КАК БазаДоходСтрахБезГПХ,
	|		БазаДляНачислений.БазаДоходСтрахПоГПХ КАК БазаДоходСтрахПоГПХ,
	|		БазаДляНачислений.БазаДоходЕдиныйПлатеж КАК БазаДоходЕдиныйПлатеж,
	|		0 КАК ПенсионныйФонд,
	|		0 КАК НачисленныйФСЗН,
	|		0 КАК НачисленныйСтрах,
	|		0 КАК НачисленныйЕдиныйПлатеж
	|	ИЗ
	|		ВТОблагаемаяБаза КАК БазаДляНачислений
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Отчсиления.ФизЛицо,
	|		Отчсиления.Месяц,
	|		Отчсиления.Группа,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		Отчсиления.ПенсионныйФонд,
	|		Отчсиления.ФСЗН,
	|		Отчсиления.ОбязательноеСтрахование,
	|		Отчсиления.ЕдиныйПлатеж
	|	ИЗ
	|		ВТЕСНИсчисленный КАК Отчсиления) КАК ДанныеФСЗН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОМЗП КАК ДанныеОМЗП
	|		ПО ДанныеФСЗН.Месяц = ДанныеОМЗП.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработанноеВремя КАК ОтработанноеВремя
	|		ПО ДанныеФСЗН.ФизЛицо = ОтработанноеВремя.ФизЛицо
	|			И ДанныеФСЗН.Месяц = ОтработанноеВремя.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПравеНаПенсию КАК ВТДанныеОПравеНаПенсию
	|		ПО ДанныеФСЗН.ФизЛицо = ВТДанныеОПравеНаПенсию.ФизЛицо
	|			И ДанныеФСЗН.Месяц = ВТДанныеОПравеНаПенсию.Месяц
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеФСЗН.ФизЛицо,
	|	ДанныеФСЗН.Месяц,
	|	ДанныеФСЗН.Группа,
	|	ДанныеОМЗП.Размер,
	|	ОтработанноеВремя.ОтработаноЧасов,
	|	ОтработанноеВремя.НормаЧасов,
	|	ВТДанныеОПравеНаПенсию.ВидЗастрахованногоЛица
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	Месяц";
	
	Запрос.Текст = ДляИсчисленияЕСНТекст;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции  // ПолучитьДанныеРасчетаЕСН

// Предназначена для получения выборки из запроса с данными расчета ЕСН
// По текущему регистратору получает 
//    	данные о начисленной зарплате в разрезе кодов дохода ЕСН
// 		данные об инвалидности физлиц помесячно
//		присоединяет данные о скидках к доходам
//
// Параметры:
//  нет
// Возвращаемое значение:
//  Выборка результата запроса
//
Функция ПолучитьДанныеРасчетаППС(ГоловнаяОрганизация)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

    Запрос.УстановитьПараметр("парамКонецМесяцаПериодаРегистрации", КонецМесяца(ПериодРегистрации));
    Запрос.УстановитьПараметр("парамНачалоМесяцаПериодаРегистрации", НачалоГода(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамОбособленноеПодразделение", Организация);
	Запрос.УстановитьПараметр("парамПодлежитОбложению", Перечисления.ДоходыФСС_НС.Облагается);
	//vvv
	//Запрос.УстановитьПараметр("парамВидСтавокЕСНиПФР", ГоловнаяОрганизация.ВидСтавокЕСНиПФР);
	Запрос.УстановитьПараметр("парамВидСтавокЕСНиПФР", Перечисления.ВидыСтавокЕСНиПФР.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаДеноминации",ОбщегоНазначения.ПолучитьДатуДеноминации());
	//
    Запрос.УстановитьПараметр("парамНачалоГода", НачалоГода(ПериодРегистрации));
    Запрос.УстановитьПараметр("парамГруппа1", "I");
    Запрос.УстановитьПараметр("парамГруппа2", "II");
    Запрос.УстановитьПараметр("парамГодРасчета", Год(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
    Запрос.УстановитьПараметр("парамМуж", Перечисления.ПолФизическихЛиц.Мужской);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	ЛьготаИнвалидов = "100000";
	
	СписокВсехПодразделенийОрганизации = ПроцедурыУправленияПерсоналом.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокВсехПодразделенийОрганизации.Добавить(ГоловнаяОрганизация);
    Запрос.УстановитьПараметр("СписокВсехПодразделенийОрганизации", СписокВсехПодразделенийОрганизации);
	// ---------------------------------------------------------------------------
	// тексты запросов
	//

	// Периоды
	// Таблица список периодов
	// Поля:
	//		Период
	// Описание:
	//  список периодов - первые даты месяцеы с начала года по "текущий" для запроса период
	//
	
	// конец месяца налогового периода
	КонецМесяца = КонецМесяца(НачалоГода(ПериодРегистрации));
	// первый месяц
	ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериоды";
	// прибавим остальные месяцы
	Для Сч = 2 По Месяц(ПериодРегистрации) Цикл
		КонецМесяца = КонецМесяца(КонецМесяца+1);
    	ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();

	
	// ФизлицаДляРасчета
	//
	ФизлицаДляРасчетаТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСНСведенияОДоходах.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТФизЛица
	|ИЗ
	|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|ГДЕ
	|	ЕСНСведенияОДоходах.Период = &парамПериодРегистрации
	|	И ЕСНСведенияОДоходах.ОбособленноеПодразделение = &парамОбособленноеПодразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	Запрос.Текст = ФизлицаДляРасчетаТекст;
	Запрос.Выполнить();
	
    	
	// ДанныеОбИнвалидности
	// Таблица Данных об Инвалидности: - таблица это список инвалидов и периодов инвалидности
	// поля:
	//		Физлицо, 
	//		Месяц - месяц налогового периода
	// Описание:	
	//	Выбираем Из Список периодов (таблица - список периодов с начала года по текущий период
	//	Внутреннее соединение с СведенияОбИнвалидностиФизлиц.СрезПоследних
	//	по равенству периодов
	//  условие: что физлицо - Инвалид
	// 
	
	ДанныеОбИнвалидностиТекст = 
	//vvv
	//"ВЫБРАТЬ
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности = &парамГруппа1
	|				ИЛИ СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности = &парамГруппа2
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Группа,
	|	СведенияОбИнвалидностиФизлиц.Физлицо КАК Физлицо,
	|	НАЧАЛОПЕРИОДА(Периоды.Период,МЕСЯЦ) КАК Месяц
	|ИЗ
	|	(ВЫБРАТЬ
	|		СведенияОбИнвалидностиФизлиц.Физлицо КАК Физлицо,
	|		Периоды.Период КАК Период,
	|		МАКСИМУМ(СведенияОбИнвалидностиФизлиц.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПериоды КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|			ПО Периоды.Период >= СведенияОбИнвалидностиФизлиц.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СведенияОбИнвалидностиФизлиц.Физлицо,
	|		Периоды.Период) КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|		ПО (СведенияОбИнвалидностиФизлиц.Период = Периоды.ПериодРегистра)
	|			И (СведенияОбИнвалидностиФизлиц.Физлицо = Периоды.Физлицо)
	|			И (СведенияОбИнвалидностиФизлиц.Инвалидность)";
	
	Запрос.Текст = ДанныеОбИнвалидностиТекст;
	Запрос.Выполнить();
	
	ДанныеОбИнвалидностиТекст = 
	//vvv
	//"ВЫБРАТЬ
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности = &парамГруппа1
	|				ИЛИ СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности = &парамГруппа2
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Группа,
	|	СведенияОбИнвалидностиФизлиц.Физлицо КАК Физлицо,
	|	НАЧАЛОПЕРИОДА(Периоды.Период,МЕСЯЦ) КАК Месяц
	|ПОМЕСТИТЬ ВТДанныеИбИнвалидности
	|ИЗ
	|	(ВЫБРАТЬ
	|		СведенияОбИнвалидностиФизлиц.Физлицо КАК Физлицо,
	|		Периоды.Период КАК Период,
	|		МАКСИМУМ(СведенияОбИнвалидностиФизлиц.Период) КАК ПериодРегистра
    |	ИЗ
	|		ВТПериоды КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|			ПО Периоды.Период >= СведенияОбИнвалидностиФизлиц.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СведенияОбИнвалидностиФизлиц.Физлицо,	
	|		Периоды.Период) КАК Периоды
   	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|		ПО (СведенияОбИнвалидностиФизлиц.Период = Периоды.ПериодРегистра)
	|			И (СведенияОбИнвалидностиФизлиц.Физлицо = Периоды.Физлицо)
	|			И (СведенияОбИнвалидностиФизлиц.Инвалидность)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо";
	
	Запрос.Текст = ДанныеОбИнвалидностиТекст;
	Запрос.Выполнить();
	
	// ДанныеОПравеНаПенсию
	// Таблица Таблица Данные о праве на пенсию: - таблица это список иностранцев и периодов
	// Поля:
	//		Физлицо, 
	//		Месяц - месяц налогового периода
	// 
	// Описание:
	//	Выбираем Из Списка периодов
	//	Внутреннее соединение с ГражданствоФизЛиц.СрезПоследних
	//  по равенству периодов
	//  условие: что физлицо - не имеет права на пенсию
		
	ДанныеОПравеНаПенсиюТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Периоды.Период,МЕСЯЦ) КАК Месяц,
	|	ГражданствоФизЛиц.ФизЛицо КАК Физлицо
	|ПОМЕСТИТЬ ВТДанныеОПравеНаПенсию
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		ГражданствоФизЛиц.ФизЛицо КАК Физлицо,
	|		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПериоды КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|			ПО Периоды.Период >= ГражданствоФизЛиц.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ГражданствоФизЛиц.ФизЛицо,
	|		Периоды.Период) КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО (ГражданствоФизЛиц.Период = Периоды.ПериодРегистра)
	|			И (ГражданствоФизЛиц.ФизЛицо = Периоды.Физлицо)
	|			И (ГражданствоФизЛиц.НеИмеетПравоНаПенсию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Месяц";
	
	Запрос.Текст = ДанныеОПравеНаПенсиюТекст;
	Запрос.Выполнить();

	
	ДанныеОМЗПТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК Месяц,
	//vvv
	//|	ЕСТЬNULL(РазмерыПараметровДляРасчетаРБ.Размер, 0) КАК Размер
	|	ЕСТЬNULL(РазмерыПараметровДляРасчетаРБ.Размер / ВЫБОР КОГДА РазмерыПараметровДляРасчетаРБ.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ, 0) КАК Размер
	//
	|ПОМЕСТИТЬ ВТДанныеОМЗП
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		МАКСИМУМ(РазмерыПараметровДляРасчетаРБ.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПериоды КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|			ПО Периоды.Период >= РазмерыПараметровДляРасчетаРБ.Период
	|				И (РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.МинимальнаяЗарплатаРБ))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (РазмерыПараметровДляРасчетаРБ.Период = Периоды.ПериодРегистра)
	|			И (РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.МинимальнаяЗарплатаРБ))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц";
	
	Запрос.Текст = ДанныеОМЗПТекст;
	Запрос.Выполнить();
	
	
	ИсчисленныйЕСНТекст = 
	"ВЫБРАТЬ
	|	ЕСНИсчисленный.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ЕСНИсчисленный.ПроцентФСЗН ЕСТЬ NULL 
	|			ТОГДА 34
	|		ИНАЧЕ ЕСНИсчисленный.ПроцентФСЗН
	|	КОНЕЦ КАК ПроцентФСЗН,
	|	НАЧАЛОПЕРИОДА(ЕСНИсчисленный.ПериодВзаиморасчетов, МЕСЯЦ) КАК Месяц,
	|	ЕСНИсчисленный.ВидДеятельности,
	//vvv
	//|	ЕСНИсчисленный.ППС КАК ППС,
	//|	ЕСНИсчисленный.ПенсионныйФонд КАК ПенсионныйФонд,
	//|	ЕСНИсчисленный.ФСЗН КАК ФСЗН,
	//|	ЕСНИсчисленный.ЕдиныйПлатеж КАК ЕдиныйПлатеж,
	//|	ЕСНИсчисленный.ОбязательноеСтрахование КАК ОбязательноеСтрахование,
	|	ЕСНИсчисленный.ППС / ВЫБОР КОГДА ЕСНИсчисленный.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК ППС,
	|	ЕСНИсчисленный.ПенсионныйФонд / ВЫБОР КОГДА ЕСНИсчисленный.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК ПенсионныйФонд,
	|	ЕСНИсчисленный.ФСЗН / ВЫБОР КОГДА ЕСНИсчисленный.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК ФСЗН,
	|	ЕСНИсчисленный.ЕдиныйПлатеж / ВЫБОР КОГДА ЕСНИсчисленный.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК ЕдиныйПлатеж,
	|	ЕСНИсчисленный.ОбязательноеСтрахование / ВЫБОР КОГДА ЕСНИсчисленный.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК ОбязательноеСтрахование,
	//
	|	ВЫБОР
	|		КОГДА (НЕ Инвалид.Физлицо ЕСТЬ NULL )
	|			ТОГДА Инвалид.Группа
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Группа
	|ПОМЕСТИТЬ ВТЕСНИсчисленный
	|ИЗ
	|	РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК Физлица
	|		ПО ЕСНИсчисленный.ФизЛицо = Физлица.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеИбИнвалидности КАК Инвалид
	|		ПО (Инвалид.Физлицо = ЕСНИсчисленный.ФизЛицо)
	| 			И Инвалид.Месяц = НАЧАЛОПЕРИОДА(ЕСНИсчисленный.ПериодВзаиморасчетов, МЕСЯЦ)		
	|ГДЕ
	|	ЕСНИсчисленный.Организация = &парамГоловнаяОрганизация
	|	И (ЕСНИсчисленный.Период МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации
	|			ИЛИ ЕСНИсчисленный.ПериодВзаиморасчетов МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц,
	|	ФизЛицо";
	
	Запрос.Текст = ИсчисленныйЕСНТекст;
	Запрос.Выполнить();



    // ДоходыПоФизлицамМесяцамКодамТекст
	// Таблица ЕСН-доходы по ФЛ и Периодам:
    // Поля:
	// Описание:
	// Выбираем из ЕСНОсновныеНачисления ,ЕСНДополнительныеНачисления и ЕСНСведенияОДоходах и суммируем результат
	// с начала года по текущий период
	
	ДоходыПоФизлицамМесяцамКодамТекст = 
	"ВЫБРАТЬ
	|	ЕСНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.ПериодВзаиморасчетов, МЕСЯЦ) КАК Месяц,
	|	НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	ЕСНСведенияОДоходах.ДоходППС,
	|	ЕСНСведенияОДоходах.ВидДеятельности,
	|	ЕСНСведенияОДоходах.ДоходФСЗН,
	|	ЕСНСведенияОДоходах.ДоходСтрах,
	|	ЕСНСведенияОДоходах.доходЕдиныйПлатеж,
	//vvv
	//|	ЕСНСведенияОДоходах.Результат КАК ОблагаемыйДоход,
	//|	ЕСНСведенияОДоходах.БазаФСЗН,
	//|	ЕСНСведенияОДоходах.БазаППС,
	|	ЕСНСведенияОДоходах.Результат / ВЫБОР КОГДА ЕСНСведенияОДоходах.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК ОблагаемыйДоход,
	|	ЕСНСведенияОДоходах.БазаФСЗН / ВЫБОР КОГДА ЕСНСведенияОДоходах.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК БазаФСЗН,
	|	ЕСНСведенияОДоходах.БазаППС / ВЫБОР КОГДА ЕСНСведенияОДоходах.Период<&ДатаДеноминации И &парамПериодРегистрации>=&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК БазаППС,
	//
	|	ЕСНСведенияОДоходах.КодДоходаЕСН
	|ПОМЕСТИТЬ ВТСведенияОДоходах
	|ИЗ
	|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК Физлица
	|		ПО ЕСНСведенияОДоходах.ФизЛицо = Физлица.ФизЛицо
	|ГДЕ
	//vvv  убираем условие на обособленное подразделение, т.к. если человек работал в двух подразделениях, не виден был доход с другого подразделения
	//|	ЕСНСведенияОДоходах.ОбособленноеПодразделение В(&СписокВсехПодразделенийОрганизации)
	//|	И (ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации
	|	(ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации
	//
	|			ИЛИ ЕСНСведенияОДоходах.ПериодВзаиморасчетов МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Месяц";
	
	Запрос.Текст = ДоходыПоФизлицамМесяцамКодамТекст;
	Запрос.Выполнить();
			
	// ОблагаемаяБазаПоМесяцам
	// Таблица Баз для исчисления ЕСН по месяцам налогового периода:
	// Поля:
	//		ФизЛицо
	//		Месяц - месяц налогового периода
	//		БазаФедеральныйБюджет         - база для налогообложения ЕСН в части налога в федеральный бюджет
	//		ЛьготаИнвалидуФБ   			  - сумма льготы инвалиду по ЕСН в части налога в федеральный бюджет
	//		БазаФСС                       - база для налогообложения ЕСН в части налога в ФСС
	//		ЛьготаИнвалидуФСС  			  - сумма льготы инвалиду по ЕСН в части налога в ФСС
	//		БазаФОМС					  - база для налогообложения ЕСН в части налогов в ФОМС
	//		ЛьготаИнвалидуФОМС 			  - сумма льготы инвалиду по ЕСН в части налога в ФОМС
	//		БазаПФР			   			  - база для взносов в ПФР (включая доходы, облагаемые ЕНВД)
	//		БазаПФР_ЕНВД			   	  - сумма облагаемых ПФР доходов, подподающих под ЕНВД
	//
	// Описание:
	//	
	// 	1) выбираем из ДоходыПоФизлицамМесяцамКодамТекст
	// 		и суммируем ОблагаемыйДоход для всех составных частей ЕСН. При этом учитывается входимость в базу
	// 		по флажку в справочнике - это База.
	//		Доход, облагаемый ЕНВД, не включаем в базу ЕСН. 
	//		Доход иностранца не включаем в базу ПФР.
	//		Для инвалидов считается база отдельно, но из неё исключаем договора подряда.
	//  2) суммировать ОблагаемыйДоход для всех составных частей ЕСН при входимости в базу и признака инвалидности - это ЛьготаИнвалиду по всем частям ЕСН
    	
	ОблагаемаяБазаПоМесяцам = 
	"ВЫБРАТЬ
	|	Основная.ФизЛицо КАК ФизЛицо,
	|	Основная.Месяц КАК Месяц,
	|	Основная.ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА (НЕ Инвалид.Физлицо ЕСТЬ NULL )
	|			ТОГДА Инвалид.Группа
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Группа,
	|	ВЫБОР
	|		КОГДА Основная.ДоходФСЗН = &парамПодлежитОбложению И Основная.КодДоходаЕСН <> ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговорГПХ)
	|				И ДанныеОПравеНаПенсию.Физлицо ЕСТЬ NULL 
	|			ТОГДА Основная.БазаФСЗН
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаДоходФСЗНБезГПХ,
	|	ВЫБОР
	|		КОГДА Основная.ДоходФСЗН = &парамПодлежитОбложению И Основная.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговорГПХ)
	|				И ДанныеОПравеНаПенсию.Физлицо ЕСТЬ NULL 
	|			ТОГДА Основная.БазаФСЗН
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаДоходФСЗНПоГПХ,
	|	ВЫБОР
	|		КОГДА Основная.ДоходСтрах = &парамПодлежитОбложению И Основная.КодДоходаЕСН <> ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговорГПХ)
	|			ТОГДА Основная.ОблагаемыйДоход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаДоходСтрахБезГПХ,
	|	ВЫБОР
	|		КОГДА Основная.ДоходСтрах = &парамПодлежитОбложению И Основная.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговорГПХ)
	|			ТОГДА Основная.ОблагаемыйДоход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаДоходСтрахПоГПХ,
	|	ВЫБОР
	|		КОГДА Основная.ДоходЕдиныйПлатеж = &парамПодлежитОбложению
	|				И ДанныеОПравеНаПенсию.Физлицо ЕСТЬ NULL 
	|			ТОГДА Основная.ОблагаемыйДоход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаДоходЕдиныйПлатеж,
	|	ВЫБОР
	|		КОГДА Основная.ДоходППС = &парамПодлежитОбложению
	|				И ДанныеОПравеНаПенсию.Физлицо ЕСТЬ NULL 
	|			ТОГДА Основная.БазаППС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаДоходППС,
	|	Основная.ВидДеятельности
	|ПОМЕСТИТЬ ВТОблагаемаяБаза
	|ИЗ
	|	ВТСведенияОДоходах КАК Основная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеИбИнвалидности КАК Инвалид
	|		ПО (Инвалид.Физлицо = Основная.ФизЛицо)
	|			 И Инвалид.Месяц = Основная.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПравеНаПенсию КАК ДанныеОПравеНаПенсию
	|		ПО Основная.ФизЛицо = ДанныеОПравеНаПенсию.Физлицо
	|			И Основная.Месяц = ДанныеОПравеНаПенсию.Месяц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Месяц";
	
	Запрос.Текст = ОблагаемаяБазаПоМесяцам;
	Запрос.Выполнить();
	
	ОтработанноеВремя =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо,
	|	СУММА(ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
	|				ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ОтработаноЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтработаноЧасов,
	|	СУММА(ОсновныеНачисленияРаботниковОрганизаций.НормаЧасов) КАК НормаЧасов,
	|	НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, МЕСЯЦ) КАК Месяц
	|ПОМЕСТИТЬ ВТОтработанноеВремя
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК Физлица
	|		ПО ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо = Физлица.ФизЛицо
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации
	|	И ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение В(&СписокВсехПодразделенийОрганизации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, МЕСЯЦ)";
	
	Запрос.Текст = ОтработанноеВремя;
	Запрос.Выполнить();

	
	ДляИсчисленияЕСНТекст = 
	"ВЫБРАТЬ
	|	ДанныеФСЗН.ФизЛицо,
	|	ДанныеФСЗН.Месяц,
	|	ДанныеФСЗН.Группа,
	|	ДанныеФСЗН.ВидДеятельности,
	|	ДанныеОМЗП.Размер КАК РазмерМЗП,
	|	ОтработанноеВремя.ОтработаноЧасов,
	|	ОтработанноеВремя.НормаЧасов,
	|	СУММА(ДанныеФСЗН.БазаДоходФСЗНБезГПХ) КАК БазаДоходФСЗНБезГПХ,
	|	СУММА(ДанныеФСЗН.БазаДоходФСЗНПоГПХ) КАК БазаДоходФСЗНПоГПХ,
	|	СУММА(ДанныеФСЗН.БазаДоходСтрахБезГПХ) КАК БазаДоходСтрахБезГПХ,
	|	СУММА(ДанныеФСЗН.БазаДоходСтрахПоГПХ) КАК БазаДоходСтрахПоГПХ,
	|	СУММА(ДанныеФСЗН.БазаДоходЕдиныйПлатеж) КАК БазаДоходЕдиныйПлатеж,
	|	СУММА(ДанныеФСЗН.БазаДоходППС) КАК БазаДоходППС,
	|	СУММА(ДанныеФСЗН.ПенсионныйФонд) КАК ПенсионныйФонд,
	|	СУММА(ДанныеФСЗН.НачисленныйФСЗН) КАК НачисленныйФСЗН,
	|	СУММА(ДанныеФСЗН.НачисленныйСтрах) КАК НачисленныйСтрах,
	|	СУММА(ДанныеФСЗН.НачисленныйЕдиныйПлатеж) КАК НачисленныйЕдиныйПлатеж,
	|	СУММА(ДанныеФСЗН.НачисленныйППС) КАК НачисленныйППС
	|ИЗ
	|	(ВЫБРАТЬ
	|		БазаДляНачислений.ФизЛицо КАК ФизЛицо,
	|		БазаДляНачислений.Месяц КАК Месяц,
	|		БазаДляНачислений.Группа КАК Группа,
	|		БазаДляНачислений.ВидДеятельности КАК ВидДеятельности,
	|		БазаДляНачислений.БазаДоходФСЗНБезГПХ КАК БазаДоходФСЗНБезГПХ,
	|		БазаДляНачислений.БазаДоходФСЗНПоГПХ КАК БазаДоходФСЗНПоГПХ,
	|		БазаДляНачислений.БазаДоходСтрахБезГПХ КАК БазаДоходСтрахБезГПХ,
	|		БазаДляНачислений.БазаДоходСтрахПоГПХ КАК БазаДоходСтрахПоГПХ,
	|		БазаДляНачислений.БазаДоходЕдиныйПлатеж КАК БазаДоходЕдиныйПлатеж,
	|		БазаДляНачислений.БазаДоходППС КАК БазаДоходППС,
	|		0 КАК ПенсионныйФонд,
	|		0 КАК НачисленныйФСЗН,
	|		0 КАК НачисленныйСтрах,
	|		0 КАК НачисленныйЕдиныйПлатеж,
	|		0 КАК НачисленныйППС
	|	ИЗ
	|		ВТОблагаемаяБаза КАК БазаДляНачислений
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Отчсиления.ФизЛицо,
	|		Отчсиления.Месяц,
	|		Отчсиления.Группа,
	|		Отчсиления.ВидДеятельности,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		Отчсиления.ПенсионныйФонд,
	|		Отчсиления.ФСЗН,
	|		Отчсиления.ОбязательноеСтрахование,
	|		Отчсиления.ЕдиныйПлатеж,
	|		Отчсиления.ППС
	|	ИЗ
	|		ВТЕСНИсчисленный КАК Отчсиления) КАК ДанныеФСЗН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОМЗП КАК ДанныеОМЗП
	|		ПО ДанныеФСЗН.Месяц = ДанныеОМЗП.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработанноеВремя КАК ОтработанноеВремя
	|		ПО ДанныеФСЗН.ФизЛицо = ОтработанноеВремя.ФизЛицо
	|			И ДанныеФСЗН.Месяц = ОтработанноеВремя.Месяц
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеФСЗН.ФизЛицо,
	|	ДанныеФСЗН.Месяц,
	|	ДанныеФСЗН.Группа,
	|	ДанныеФСЗН.ВидДеятельности,
	|	ДанныеОМЗП.Размер,
	|	ОтработанноеВремя.ОтработаноЧасов,
	|	ОтработанноеВремя.НормаЧасов";
	
	Запрос.Текст = ДляИсчисленияЕСНТекст;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции  // ПолучитьДанныеРасчетаЕСН


// Процедура рассчитывает ЕСН по введенным доходам
//
Процедура РасчетЕСН(ГоловнаяОрганизация)
	
	РегламентированнаяВалюта = Константы.ВалютаРегламентированногоУчета.Получить();
	// получаем ЕСН по периоду регистрации
	ДанныеДляРасчетаЕСН = ПолучитьДанныеРасчетаЕСН(ГоловнаяОрганизация);
	
	// очищаем табличную часть
	ИсчисленныйЕСН.Очистить();
	
	
	СтруктураЕдиныйПлатеж = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРегистрации),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ЕдиныйПлатеж));
	СтруктураСтрах = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.ПолучитьПоследнее(КонецМесяца(ПериодРегистрации),Новый Структура("Организация",ГоловнаяОрганизация));
	
			
	Если СтруктураСтрах.Количество()<>0 тогда
		СтавкаОбязательноеСтрахование = СтруктураСтрах.Ставка;
	Иначе
		Сообщить("Не заполнена ставка обязательного страхования");
		СтавкаОбязательноеСтрахование = 0;
	КонецЕсли;
	
	КонтрДата = Дата(2006,8,1);
	ВременнаяТаблица = ИсчисленныйЕСН.Выгрузить();
   
	// заполняем движения по регистру исчисленного ЕСН-ПФР
	Пока ДанныеДляРасчетаЕСН.Следующий() Цикл
		
		// Пропустим нулевые строки
		Если ДанныеДляРасчетаЕСН.ПенсионныйФонд = 0 И ДанныеДляРасчетаЕСН.НачисленныйФСЗН = 0 
			И ДанныеДляРасчетаЕСН.начисленныйСтрах = 0 И ДанныеДляРасчетаЕСН.НачисленныйЕдиныйПлатеж = 0 
			И ДанныеДляРасчетаЕСН.БазаДоходФСЗНБезГПХ = 0 И  ДанныеДляРасчетаЕСН.БазаДоходФСЗНПоГПХ = 0
			И ДанныеДляРасчетаЕСН.БазаДоходСтрахБезГПХ = 0 И ДанныеДляРасчетаЕСН.БазаДоходСтрахПоГПХ = 0  Тогда			
			Продолжить;
		КонецЕсли; 
		
		// табличная часть
		НоваяСтрока =ВременнаяТаблица.Добавить();
		
		НоваяСтрока.Физлицо = ДанныеДляРасчетаЕСН.ФизЛицо;
		
		ПериодРасчета = ?(не ЗначениеЗаполнено(ДанныеДляРасчетаЕСН.Месяц), ПериодРегистрации, ДанныеДляРасчетаЕСН.Месяц);
	     		  		
		РазмерСреднейЗарплаты = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(НачалоМесяца(ПериодРасчета)-1,Новый Структура("ВидПараметра",Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников)).Размер;
		
		Если  не ЗначениеЗаполнено(ДанныеДляРасчетаЕСН.ВидЗастрахованногоЛица) Тогда
			
			СтруктураПенс = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРасчета),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ПенсионныйФонд));
			СтруктураФСЗН = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРасчета),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗН));
			СтруктураФСЗНИнвалиды = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРасчета),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗНИнвалиды)); 
			
		Иначе	
			
			СтруктураПенс = Новый Структура;
			СтруктураПенс.Вставить("Размер",0);
			
			СтруктураФСЗН = Новый Структура;
			СтруктураФСЗН.Вставить("Размер",0);
			
			СтруктураФСЗНИнвалиды = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРасчета),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗНИнвалиды)); 
			
			Если ДанныеДляРасчетаЕСН.ВидЗастрахованногоЛица = Перечисления.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРБ или не ЗначениеЗаполнено(ДанныеДляРасчетаЕСН.ВидЗастрахованногоЛица) Тогда
				СтруктураФСЗН = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРегистрации),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗН));
				СтруктураПенс = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРегистрации),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ПенсионныйФонд));
				
			ИначеЕсли ДанныеДляРасчетаЕСН.ВидЗастрахованногоЛица = Перечисления.ВидыЗастрахованныхЛицОбязательногоСтрахования.ИностраныеГражданеСтранЕАЭС Тогда
				СтруктураФСЗН = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРегистрации),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗНИнГрЕАЭС));
				
			ИначеЕсли ДанныеДляРасчетаЕСН.ВидЗастрахованногоЛица = Перечисления.ВидыЗастрахованныхЛицОбязательногоСтрахования.ИностранцыУплачивающиеСтраховыеВзносы Тогда
				СтруктураФСЗН = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРегистрации),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗН));
				СтруктураПенс = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРегистрации),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ПенсионныйФонд));
				
			КонецЕсли;
		КонецЕсли;	
		
			
		Если СтруктураПенс.Количество()<>0 тогда
			СтавкаПенсионныйФонд = СтруктураПенс.Размер;
		Иначе
			Сообщить("Не заполнена ставка пенсионного фонда");
			СтавкаПенсионныйФонд = 0;
		КонецЕсли;
		
		Если СтруктураФСЗН.Количество()<>0 тогда
			СтавкаФСЗН = СтруктураФСЗН.Размер;
		Иначе
			Сообщить("Не заполнена ставка отчислений в ФСЗН");
			СтавкаФСЗН = 0;
		КонецЕсли;
		
		Если СтруктураФСЗНИнвалиды.Количество()<>0 тогда
			СтавкаФСЗНИнвалиды = СтруктураФСЗНИнвалиды.Размер;
		Иначе
			Сообщить("Не заполнена ставка отчислений в ФСЗН по инвалидам");
			СтавкаФСЗНИнвалиды = 0;
		КонецЕсли;
		
		
		
		
		НоваяСтрока.периодВзаиморасчетов = ПериодРасчета;
		НоваяСтрока.ПроцентФСЗН = ?(ПериодРасчета >= КонтрДата, 
		?(ДанныеДляРасчетаЕСН.Группа = 0, СтавкаФСЗН, СтавкаФСЗНИнвалиды),
		СтавкаФСЗН);  
				
				
		Если  ДанныеДляРасчетаЕСН.Месяц <= ПериодРегистрации И ДанныеДляРасчетаЕСН.ОтработаноЧасов <> 0 И ДанныеДляРасчетаЕСН.НормаЧасов <> 0 И ДанныеДляРасчетаЕСН.БазаДоходФСЗНБезГПХ <> 0 И расчетФСЗНотБПМ  Тогда
			РазмерМЗП = ОбщегоНазначения.ОкруглитьПоВалюте(ДанныеДляРасчетаЕСН.РазмерМЗП *ДанныеДляРасчетаЕСН.ОтработаноЧасов/ДанныеДляРасчетаЕСН.НормаЧасов	,РегламентированнаяВалюта);
			
			БазаДоходФСЗН = ?(ДанныеДляРасчетаЕСН.БазаДоходФСЗНБезГПХ <> 0,Макс(ДанныеДляРасчетаЕСН.БазаДоходФСЗНБезГПХ, РазмерМЗП), ДанныеДляРасчетаЕСН.БазаДоходФСЗНБезГПХ) + ДанныеДляРасчетаЕСН.БазаДоходФСЗНПоГПХ;
			НоваяСтрока.ДоплатаДоМЗП = Макс(РазмерМЗП  - ДанныеДляРасчетаЕСН.БазаДоходФСЗНБезГПХ,0);
			Если  ДанныеДляРасчетаЕСН.Месяц < мДатаИзменения Тогда
				БазаДоходСтрах = ?(ДанныеДляРасчетаЕСН.БазаДоходСтрахБезГПХ <> 0,Макс(ДанныеДляРасчетаЕСН.БазаДоходСтрахБезГПХ, РазмерМЗП), ДанныеДляРасчетаЕСН.БазаДоходСтрахБезГПХ) + ДанныеДляРасчетаЕСН.БазаДоходСтрахПоГПХ;
			КонецЕсли;
		Иначе
			БазаДоходФСЗН = ДанныеДляРасчетаЕСН.БазаДоходФСЗНБезГПХ + ДанныеДляРасчетаЕСН.БазаДоходФСЗНПоГПХ;
			Если  ДанныеДляРасчетаЕСН.Месяц < мДатаИзменения Тогда
				БазаДоходСтрах = ДанныеДляРасчетаЕСН.БазаДоходСтрахБезГПХ + ДанныеДляРасчетаЕСН.БазаДоходСтрахПоГПХ;
			КонецЕсли;
		КонецЕсли; 
		
			
		НоваяСтрока.ФСЗН = ОбщегоНазначения.ОкруглитьПоВалюте(БазаДоходФСЗН * НоваяСтрока.ПроцентФСЗН/100, константы.ВалютаРегламентированногоУчета.Получить()) - данныеДляРасчетаЕСН.НачисленныйФСЗН;
		//vvv комментируем, вставляем костыль, т.к. при расчете за 2013 год налоги не считались
		//НоваяСтрока.ПенсионныйФонд = ОбщегоНазначения.ОкруглитьПоВалюте(БазаДоходФСЗН * СтавкаПенсионныйФонд/100, Константы.ВалютаРегламентированногоУчета.Получить()) - данныеДляРасчетаЕСН.ПенсионныйФонд;
		НоваяСтрока.ПенсионныйФонд=0;
		//
		НоваяСтрока.РанееИсчисленныйФСЗН = ДанныеДляРасчетаЕСН.НачисленныйФСЗН;
		НоваяСтрока.ФондФСЗН = ОбщегоНазначения.ОкруглитьПоВалюте(БазаДоходФСЗН, Константы.ВалютаРегламентированногоУчета.Получить());
		
		Если не ДанныеДляРасчетаЕСН.ВидЗастрахованногоЛица = Перечисления.ВидыЗастрахованныхЛицОбязательногоСтрахования.ИностранцыНеУплачивающие Тогда
			
			Если  ДанныеДляРасчетаЕСН.Месяц < мДатаИзменения Тогда
				НоваяСтрока.ОбязательноеСтрахование = ОбщегоНазначения.ОкруглитьПоВалюте(БазаДоходСтрах* СтавкаОбязательноеСтрахование/100 - данныеДляРасчетаЕСН.НачисленныйСтрах, Константы.ВалютаРегламентированногоУчета.Получить());
				НоваяСтрока.ФондСтрахование = БазаДоходСтрах;			
				//vvv
				НоваяСтрока.РанееИсчисленныйСтрах=данныеДляРасчетаЕСН.НачисленныйСтрах;
				//				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//vvv
	//ВременнаяТаблица.Свернуть("ФизЛицо, ПериодВзаиморасчетов, ПроцентФСЗН", "ФондФСЗН, ФондЕдиный, ФондСтрахование, ПенсионныйФонд, ФСЗН, ЕдиныйПлатеж, ОбязательноеСтрахование, РанееИсчисленныйФСЗН,ДоплатаДоМЗП");
	ВременнаяТаблица.Свернуть("ФизЛицо, ПериодВзаиморасчетов, ПроцентФСЗН", "ФондФСЗН, ФондЕдиный, ФондСтрахование, ПенсионныйФонд, ФСЗН, ЕдиныйПлатеж, ОбязательноеСтрахование, РанееИсчисленныйФСЗН,РанееИсчисленныйСтрах,ДоплатаДоМЗП");
	//
	Для Каждого Строка из ВременнаяТаблица цикл
		Если Строка.ПенсионныйФонд <> 0 ИЛИ Строка.ФСЗН <> 0 
			ИЛИ Строка.ОбязательноеСтрахование > 1 ИЛИ Строка.ОбязательноеСтрахование < -1  Тогда		
			СтрокаИсчисленный = ИсчисленныйЕСН.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИсчисленный,Строка);
		КонецЕсли;
	КонецЦикла;
	
	
	ДанныеДляРасчетаППС = ПолучитьДанныеРасчетаППС(ГоловнаяОрганизация);
	
	// очищаем табличную часть
	ИсчисленыйППС.Очистить();
	ВременнаяТаблица = ИсчисленыйППС.Выгрузить();
	
	Пока ДанныеДляРасчетаППС.Следующий() Цикл
		
		// Пропустим нулевые строки
		Если ДанныеДляРасчетаППС. БазаДоходППС = 0 И ДанныеДляРасчетаППС.НачисленныйППС = 0  Тогда			
			Продолжить;
		КонецЕсли; 
		
		// табличная часть
		НоваяСтрока =ВременнаяТаблица.Добавить();
		
		НоваяСтрока.Физлицо = ДанныеДляРасчетаППС.ФизЛицо;
		ПериодРасчета = ?(не ЗначениеЗаполнено(ДанныеДляРасчетаППС.Месяц), ПериодРегистрации, ДанныеДляРасчетаППС.Месяц);

		НоваяСтрока.периодВзаиморасчетов = ПериодРасчета;

	  		  		
		РазмерСреднейЗарплаты = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(НачалоМесяца(ДанныеДляРасчетаППС.Месяц)-1,Новый Структура("ВидПараметра",Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников)).Размер;
		
		Если ЗначениеЗаполнено(ДанныеДляРасчетаППС.ВидДеятельности) тогда
			СтруктураППС = РегистрыСведений.ТарифыВзносовНаППС.ПолучитьПоследнее(КонецМесяца(ДанныеДляРасчетаППС.Месяц), Новый Структура("ВидДеятельности",ДанныеДляРасчетаППС.ВидДеятельности));  
			Если  СтруктураППС.ОграничениеПоДоходам = 0 ИЛИ РазмерСреднейЗарплаты = 0 тогда
				БазаДоходППС = ДанныеДляРасчетаППС.БазаДоходППС;
			Иначе
				БазаДоходППС = ?(ДанныеДляРасчетаППС.БазаДоходППС > СтруктураППС.ОграничениеПоДоходам*РазмерСреднейЗарплаты, СтруктураППС.ОграничениеПоДоходам*РазмерСреднейЗарплаты, ДанныеДляРасчетаППС.БазаДоходППС);
			КонецЕсли;
			НоваяСтрока.ВидДеятельности = ДанныеДляРасчетаППС.ВидДеятельности;
			НоваяСтрока.ПроцентППС = СтруктураППС.Процент;
			НоваяСтрока.ППС = ОбщегоНазначения.ОкруглитьПоВалюте(БазаДоходППС * НоваяСтрока.ПроцентППС/100, константы.ВалютаРегламентированногоУчета.Получить()) - ДанныеДляРасчетаППС.НачисленныйППС;
			//vvv
			НоваяСтрока.РанееИсчисленныйППС=ДанныеДляРасчетаППС.НачисленныйППС;
			//
			НоваяСтрока.ФондППС = БазаДоходППС;
		КонецЕсли;
		
	КонецЦикла;
	
	//vvv комментируем	
	//ВременнаяТаблица.Свернуть("ФизЛицо, ПериодВзаиморасчетов, ВидДеятельности, ПроцентППС", "ФондППС, ППС");
	ВременнаяТаблица.Свернуть("ФизЛицо, ПериодВзаиморасчетов, ВидДеятельности, ПроцентППС", "ФондППС, ППС, РанееИсчисленныйППС");
	//
	Для Каждого Строка из ВременнаяТаблица цикл
		Если  Строка.ППС <> 0  Тогда		
			СтрокаИсчисленный = ИсчисленыйППС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИсчисленный,Строка);
		КонецЕсли;
	КонецЦикла; 
	
	
	
	ДанныеРасчетаБелгосстрах = ПолучитьДанныеРасчетаБелгосстрах(ГоловнаяОрганизация);
	
	
	// очищаем табличную часть
	ИсчисленныйБелгосстрах.Очистить();
	ВременнаяТаблица = ИсчисленныйБелгосстрах.Выгрузить();
	ДатаИзменения = Дата("20150801");
	
	Пока ДанныеРасчетаБелгосстрах.Следующий() Цикл
		
		
		
		// Пропустим нулевые строки
		Если (ДанныеРасчетаБелгосстрах.БазаДоходСтрахБезГПХ = 0 И ДанныеРасчетаБелгосстрах.БазаДоходСтрахПоГПХ  = 0 И ДанныеРасчетаБелгосстрах.НачисленныйСтрах = 0)  ИЛИ ДанныеРасчетаБелгосстрах.Месяц < мДатаИзменения  Тогда			
			Продолжить;
		КонецЕсли; 
		
		// табличная часть
		НоваяСтрока = ВременнаяТаблица.Добавить();
		
		НоваяСтрока.Сотрудник = ДанныеРасчетаБелгосстрах.Сотрудник;
		ПериодРасчета = ?(не ЗначениеЗаполнено(ДанныеРасчетаБелгосстрах.Месяц), ПериодРегистрации, ДанныеРасчетаБелгосстрах.Месяц);
		
		//Отбор = Новый Структура;
		//Отбор.Вставить("ВидПараметра", Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП);
		
		
		НоваяСтрока.периодВзаиморасчетов = ПериодРасчета;
		
			Если ДанныеРасчетаБелгосстрах.НормаЧасов = 0 или ДанныеРасчетаБелгосстрах.ОтработаноЧасов = 0 тогда 				
				//vvv
				//РазмерСреднейЗП = ОбщегоНазначения.ОкруглитьПоВалюте(ДанныеРасчетаБелгосстрах.РазмерСреднейЗП,РегламентированнаяВалюта);				
				РазмерСреднейЗП = 0;
				//
			Иначе
				Если ДанныеРасчетаБелгосстрах.ОтработаноЧасов/ДанныеРасчетаБелгосстрах.НормаЧасов > 1 Тогда
					РазмерСреднейЗП = ОбщегоНазначения.ОкруглитьПоВалюте(ДанныеРасчетаБелгосстрах.РазмерСреднейЗП,РегламентированнаяВалюта);
				Иначе	
					РазмерСреднейЗП = ОбщегоНазначения.ОкруглитьПоВалюте(ДанныеРасчетаБелгосстрах.РазмерСреднейЗП *ДанныеРасчетаБелгосстрах.ОтработаноЧасов/ДанныеРасчетаБелгосстрах.НормаЧасов	,РегламентированнаяВалюта);
				КонецЕсли;
			КонецЕсли;
			
			
			Если ПериодРасчета >= ДатаИзменения Тогда 
				БазаДоходБелгос = ДанныеРасчетаБелгосстрах.БазаДоходСтрахБезГПХ + ДанныеРасчетаБелгосстрах.БазаДоходСтрахПоГПХ;
				ДоплатаДоСредней = 0;
	
			ИначеЕсли ПериодРасчета > ПериодРегистрации Тогда
            	БазаДоходБелгос =   ДанныеРасчетаБелгосстрах.БазаДоходСтрахБезГПХ; 	
			    ДоплатаДоСредней = 0;
			ИначеЕсли ДанныеРасчетаБелгосстрах.ОтработаноЧасов = 0 Тогда
				БазаДоходБелгос = ОбщегоНазначения.ОкруглитьПоВалюте(ДанныеРасчетаБелгосстрах.БазаДоходСтрахБезГПХ + ДанныеРасчетаБелгосстрах.БазаДоходСтрахПоГПХ,константы.ВалютаРегламентированногоУчета.Получить());
				ДоплатаДоСредней = 0;
			Иначе
				БазаДоходБелгос = ОбщегоНазначения.ОкруглитьПоВалюте(?(ДанныеРасчетаБелгосстрах.БазаДоходСтрахБезГПХ < (РазмерСреднейЗП*60/100) И ДанныеРасчетаБелгосстрах.БазаДоходСтрахБезГПХ <> 0, (РазмерСреднейЗП*60/100), ДанныеРасчетаБелгосстрах.БазаДоходСтрахБезГПХ),константы.ВалютаРегламентированногоУчета.Получить());
				БазаДоходБелгос =  БазаДоходБелгос + ДанныеРасчетаБелгосстрах.БазаДоходСтрахПоГПХ;  
				ДоплатаДоСредней = ОбщегоНазначения.ОкруглитьПоВалюте(?(ДанныеРасчетаБелгосстрах.БазаДоходСтрахБезГПХ < (РазмерСреднейЗП*60/100) И ДанныеРасчетаБелгосстрах.БазаДоходСтрахБезГПХ <> 0, (РазмерСреднейЗП*60/100) - ДанныеРасчетаБелгосстрах.БазаДоходСтрахБезГПХ , 0),константы.ВалютаРегламентированногоУчета.Получить());
			КонецЕсли;
			
			НоваяСтрока.БазаБелгосстрах = БазаДоходБелгос;
			НоваяСтрока.ДоплатаДоСредней = ДоплатаДоСредней;
			НоваяСтрока.Белгосстрах = ОбщегоНазначения.ОкруглитьПоВалюте(БазаДоходБелГос * СтруктураСтрах.Ставка/100, константы.ВалютаРегламентированногоУчета.Получить())- ДанныеРасчетаБелгосстрах.НачисленныйСтрах;
				
	КонецЦикла;
	
	ВременнаяТаблица.Свернуть("Сотрудник, ПериодВзаиморасчетов", "БазаБелгосстрах, Белгосстрах,ДоплатаДоСредней");
	
	Для Каждого Строка из ВременнаяТаблица цикл
		Если  Строка.Белгосстрах <> 0  Тогда		
			СтрокаИсчисленный = ИсчисленныйБелгосстрах.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИсчисленный,Строка);
			//vvv
			СтрокаИсчисленный.ФизЛицо=СтрокаИсчисленный.Сотрудник.Физлицо;
			//
		КонецЕсли;
	КонецЦикла; 
	
	
КонецПроцедуры // РасчетЕСН()

// Процедура рассчитывает скидки по зарегистрированным доходам и записывает их в реквизит "Скидка" набора записей регистра "ЕСНДополнительныеНачисления"
// При расчете учитываются ранее предоставленные скидки в прошлых периодах и в текущем. 
// Если скидки были не предоставлены или неверно рассчитаны, то происходит их корректировка.
//
Процедура РасчетСкидокКДоходам(ГоловнаяОрганизация, НаборЗаписейДополнительный)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамРегистратор",					Ссылка);
	Запрос.УстановитьПараметр("парамКонецМесяцаПериодаРегистрации",	КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация",			ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамАвторскиеВознаграждения",		Справочники.ДоходыЕСН.ДоговораАвторские);
	Запрос.УстановитьПараметр("парамНачалоГода",					НачалоГода(ПериодРегистрации));
	
	// ---------------------------------------------------------------------------------------
	// Тексты запросов
	
	// ДоходыПоФизлицамКодам
	// Сведения о ранее предоставленных скидках и доходах налогового периода
	// Предполагается, что доходы, по которым могут быть предоставлены скидки, не регистрируются 
	// в регистре "ЕСНОсновныеНачисления".
	
	ДоходыПоФизлицамКодам = 
	"ВЫБРАТЬ
	|		ЕСНДополнительныеНачисления.Физлицо,
	|		ЕСНДополнительныеНачисления.КодДоходаЕСН КАК КодДоходаЕСН,
	|		ЕСНДополнительныеНачисления.Результат КАК Результат,
	|		ЕСНДополнительныеНачисления.Скидка КАК Скидка
	|	ИЗ
	|		РегистрРасчета.ЕСНДополнительныеНачисления КАК ЕСНДополнительныеНачисления
	|	ГДЕ
	|		ЕСНДополнительныеНачисления.ПериодРегистрации МЕЖДУ &парамНачалоГода И &парамКонецМесяцаПериодаРегистрации
	|		И ЕСНДополнительныеНачисления.Регистратор = &парамРегистратор
	|		И ЕСНДополнительныеНачисления.Организация = &парамГоловнаяОрганизация
	|		И ЕСНДополнительныеНачисления.КодДоходаЕСН <> &парамАвторскиеВознаграждения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЕСНСведенияОДоходах.Физлицо,
	|		ЕСНСведенияОДоходах.КодДоходаЕСН,
	|		ЕСНСведенияОДоходах.Результат,
	|		ЕСНСведенияОДоходах.Скидка
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЕСНДополнительныеНачисления.Физлицо
	|		ИЗ
	|			РегистрРасчета.ЕСНДополнительныеНачисления КАК ЕСНДополнительныеНачисления
	|		ГДЕ
	|			ЕСНДополнительныеНачисления.Регистратор = &парамРегистратор) КАК СписокФизЛиц
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|			ПО ЕСНСведенияОДоходах.Физлицо = СписокФизЛиц.Физлицо
	|	ГДЕ
	|		ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И &парамКонецМесяцаПериодаРегистрации
	|		И ЕСНСведенияОДоходах.КодДоходаЕСН <> &парамАвторскиеВознаграждения
	|		И ЕСНСведенияОДоходах.Организация = &парамГоловнаяОрганизация";
	
	// Добавим сведения о нормативных размерах скидок ЕСН по кодам доходов
	// ДанныеОДоходахИСкидках
	
	ДанныеОСкидках = 
	"ВЫБРАТЬ
	|	ДоходыПоМесяцам.Физлицо,
	|	ДоходыПоМесяцам.КодДоходаЕСН КАК КодДоходаЕСН,
	|	СУММА(ДоходыПоМесяцам.Результат) КАК РезультатЗаГод,
	|	СУММА(ДоходыПоМесяцам.Скидка) КАК ПредоставленнаяСкидкаЗаГод,
	|	ЕСНСкидкиКДоходам.ГодоваяСкидка КАК ПравоНаСкидку
	|ИЗ
	|	( " + ДоходыПоФизлицамКодам +  ") КАК ДоходыПоМесяцам 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЕСНСкидкиКДоходам.СрезПоследних(&парамНачалоГода, ) КАК ЕСНСкидкиКДоходам
	|		ПО ЕСНСкидкиКДоходам.КодДоходаЕСН = ДоходыПоМесяцам.КодДоходаЕСН
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыПоМесяцам.Физлицо,
	|	ДоходыПоМесяцам.КодДоходаЕСН,
	|	ЕСНСкидкиКДоходам.ГодоваяСкидка";
	
	
	Запрос.Текст = ДанныеОСкидках;
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("Физлицо, КодДоходаЕСН");
	
	// Выгрузим набор для модификации скидки
	МодифицируемаяТаблица = НаборЗаписейДополнительный.Выгрузить();
	
	Пока Выборка.Следующий() Цикл
		
		// В общем случае предоставляемая скидка есть
		Скидка = Мин(Выборка.РезультатЗаГод, Выборка.ПравоНаСкидку) - Выборка.ПредоставленнаяСкидкаЗаГод;
		
		Если Скидка = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		// Распределим скидку между строками о доходах
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,Выборка); // Физлицо, КодДоходаЕСН
		
		НайдСтроки = МодифицируемаяТаблица.НайтиСтроки(СтруктураПоиска);
		Если НайдСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		ОсталосьРаспределить = Скидка;
		Для Каждого НайденнаяСтрока из НайдСтроки Цикл
			НайденнаяСтрока.Скидка = Мин(ОсталосьРаспределить, НайденнаяСтрока.Результат);
			ОсталосьРаспределить = ОсталосьРаспределить - НайденнаяСтрока.Скидка; 
		КонецЦикла; 
		// Остаток распределения сложим в первую строку
		НайдСтроки[0].Скидка = НайдСтроки[0].Скидка + ОсталосьРаспределить;
		
	КонецЦикла; 
	
	// Загрузим модифицированный набор
	НаборЗаписейДополнительный.Загрузить(МодифицируемаяТаблица);

КонецПроцедуры // РасчетСкидокКДоходам()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// расчет документа
//
Процедура РассчитатьЕСН() Экспорт
	
	Отказ = Ложь;
	
	//vvv
	НачалоРасчета = ТекущаяДата();
	ЗаписьЖурналаРегистрации("РасчетНалогов.Расчет",УровеньЖурналаРегистрации.Информация,Метаданные.Документы.РасчетЕСН,Ссылка,"Начало расчета "+НачалоРасчета);
	//
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	ВыборкаПоШапкеДокумента.Следующий();
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	
	Если Отказ Тогда
		//vvv
		ЗаписьЖурналаРегистрации("РасчетНалогов.Расчет",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.РасчетЕСН,Ссылка,"Окончание расчета "+Строка(ТекущаяДата())+". Затраченное время "+СервисныеПроцедурыИФункции.РазностьВремени(ТекущаяДата(),НачалоРасчета));
		//
		Возврат;
	КонецЕсли;
	
	// Запишем данные о доходах из табличных частей в регистры расчетов
	НаборЗаписейОДоходах = РегистрыНакопления.ЕСНСведенияОДоходах.СоздатьНаборЗаписей();
	НаборЗаписейОДоходах.Отбор.Регистратор.Значение = Ссылка;
	
	НаборЗаписейОДоходахБелГос = РегистрыНакопления.БелгосстрахСведенияОДоходах.СоздатьНаборЗаписей();
	НаборЗаписейОДоходахБелГос.Отбор.Регистратор.Значение = Ссылка;
	
	
	
	ВыборкаПоДоходам = СформироватьЗапросПоДоходам(ВыборкаПоШапкеДокумента).Выбрать();
	
	Пока ВыборкаПоДоходам.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиДохода(ВыборкаПоДоходам, Отказ, ВыборкаПоДоходам.ТипСтроки);
		Если Не Отказ Тогда
			СтрокаНабора = НаборЗаписейОДоходах.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора,ВыборкаПоДоходам);
			ЗаполнитьЗначенияСвойств(СтрокаНабора,ВыборкаПоШапкеДокумента);
			Если ВыборкаПоДоходам.ПериодВзаиморасчетов >= мДатаИзменения Тогда
       			СтрокаНабораБелГос = НаборЗаписейОДоходахБелГос.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНабораБелГос,ВыборкаПоДоходам);
				ЗаполнитьЗначенияСвойств(СтрокаНабораБелГос,ВыборкаПоШапкеДокумента);
				СтрокаНабораБелГос.БазаБелгосстрах = ВыборкаПоДоходам.Результат;
				СтрокаНабораБелГос.ДоходБелгосстрах  = ВыборкаПоДоходам.Доходстрах;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		//vvv
		ЗаписьЖурналаРегистрации("РасчетНалогов.Расчет",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.РасчетЕСН,Ссылка,"Окончание расчета "+Строка(ТекущаяДата())+". Затраченное время "+СервисныеПроцедурыИФункции.РазностьВремени(ТекущаяДата(),НачалоРасчета));
		//
		Возврат;
	КонецЕсли;
	
	НаборЗаписейОДоходах.Записать();
	НаборЗаписейОДоходахБелгос.Записать();
	
	// Вызовем функцию расчета ЕСН (результат расчета помещается в табличную часть  "ИсчисленныйЕСН")
	РасчетЕСН(ВыборкаПоШапкеДокумента.Организация);
	
	// Очистим ранее записанные в регистр сведения о доходах
	НаборЗаписейОДоходах.Очистить();
	НаборЗаписейОДоходах.Записать();
	НаборЗаписейОДоходахБелгос.Очистить();
	НаборЗаписейОДоходахБелгос.Записать();
	
	//vvv
	ЗаписьЖурналаРегистрации("РасчетНалогов.Расчет",УровеньЖурналаРегистрации.Информация,Метаданные.Документы.РасчетЕСН,Ссылка,"Окончание расчета "+Строка(ТекущаяДата())+".Затраченное время "+СервисныеПроцедурыИФункции.РазностьВремени(ТекущаяДата(),НачалоРасчета));
	//
	
КонецПроцедуры // РассчитатьЕСН()

// заполнение доходов и расчет документа
//
Функция Автозаполнение() Экспорт
	
	//vvv
	НачалоАвтозаполнения = ТекущаяДата();
	ЗаписьЖурналаРегистрации("РасчетНалогов.Автозаполнение",УровеньЖурналаРегистрации.Информация,Метаданные.Документы.РасчетЕСН,Ссылка,"Начало автозаполнения "+НачалоАвтозаполнения);
	//
	Отказ = Ложь;
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);

	Если Отказ Тогда
		//vvv
		ЗаписьЖурналаРегистрации("РасчетНалогов.Автозаполнение",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.РасчетЕСН,Ссылка,"Окончание автозаполнения "+Строка(ТекущаяДата())+". Затраченное время "+СервисныеПроцедурыИФункции.РазностьВремени(ТекущаяДата(),НачалоАвтозаполнения));
		//
		Возврат Не Отказ;
	КонецЕсли;
	
	// Удалим рассчитанный ранее исчисленный налог
	НаборЗаписейЕСНИсчисленный = РегистрыНакопления.ЕСНИсчисленный.СоздатьНаборЗаписей();
	НаборЗаписейЕСНИсчисленный.Отбор.Регистратор.Значение = Ссылка;
	
	// Создадим ссылки на наборы записей о доходах
	НаборЗаписейОсновной = РегистрыРасчета.ЕСНОсновныеНачисления.СоздатьНаборЗаписей();
	НаборЗаписейОсновной.Отбор.Регистратор.Значение = Ссылка;
	
	НаборЗаписейДополнительный = РегистрыРасчета.ЕСНДополнительныеНачисления.СоздатьНаборЗаписей();
	НаборЗаписейДополнительный.Отбор.Регистратор.Значение = Ссылка;
	// Автозаполним наборы записей о доходах
	Отказ = АвтозаполнениеНаборовЗаписейОДоходах(НаборЗаписейОсновной, НаборЗаписейДополнительный);	
	// Расчет скидок к доходам
	НаборЗаписейДополнительный.Прочитать();                           
	НаборЗаписейДополнительный.Записать();
	
	
	
	
	//РасчетСкидокКДоходам(ВыборкаПоШапкеДокумента.Организация, НаборЗаписейДополнительный);
		
	// Считаем наборы записей о доходах и выгрузим их в табличные части документа
	НаборЗаписейОсновной.Прочитать();
	ВременнаяТаблица = НаборЗаписейОсновной.Выгрузить();
    ВременнаяТаблица.Свернуть("ВидРасчета,Сотрудник,ФизЛицо,КодДоходаЕСН,ПериодДействияНачало,ПериодДействияКонец,ДоходФСЗН,ДоходСтрах,ДоходЕдиныйПлатеж,ДоходППС,ВидДеятельности","Результат,БазаФСЗН,БазаППС");
	ОсновныеНачисления.Загрузить(ВременнаяТаблица);	
	

		
	// НаборЗаписейДополнительный уже считан
	ВременнаяТаблица = НаборЗаписейДополнительный.Выгрузить();
    ВременнаяТаблица.Свернуть("ВидРасчета,Сотрудник,ФизЛицо,КодДоходаЕСН,БазовыйПериодНачало,БазовыйПериодКонец,ДоходФСЗН,ДоходСтрах,ДоходЕдиныйПлатеж,ДоходППС,ВидДеятельности,ДокументОснование","Результат,Скидка,БазаФСЗН,БазаППС");
	ДополнительныеНачисления.Загрузить(ВременнаяТаблица);  
	
			                                            	
	Для Каждого Набор Из Движения Цикл
		Если ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ЕСНОсновныеНачисления") 
			или ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ЕСНДополнительныеНачисления") Тогда
			
			// Удаляем движения
			Набор.Очистить();
			Набор.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Сообщить("Не выполнено автоматическое заполнение данных о доходах. Расчет не произведен!");
	КонецЕсли;
	
	//vvv
	ЗаписьЖурналаРегистрации("РасчетНалогов.Автозаполнение",УровеньЖурналаРегистрации.Информация,Метаданные.Документы.РасчетЕСН,Ссылка,"Окончание автозаполнения "+Строка(ТекущаяДата())+". Затраченное время "+СервисныеПроцедурыИФункции.РазностьВремени(ТекущаяДата(),НачалоАвтозаполнения));
	//
	Возврат Не Отказ;
	
	
	
КонецФункции // Автозаполнение()

// автозаполнения колонки "Скидка" табличной части "ДополнительныеНачисления"
//
Процедура РассчитатьСкидки() Экспорт
	
	Отказ = Ложь;
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Запишем данные о доходах из табличной части в регистр расчета
	НаборЗаписейДополнительный = РегистрыРасчета.ЕСНДополнительныеНачисления.СоздатьНаборЗаписей();
	НаборЗаписейДополнительный.Отбор.Регистратор.Значение = Ссылка;
	
	ВыборкаПоДоходам = СформироватьЗапросПоДоходам(ВыборкаПоШапкеДокумента).Выбрать();
	
	Пока ВыборкаПоДоходам.Следующий() Цикл
		Если ВыборкаПоДоходам.ТипСтроки = "Дополнительные" Тогда
			ПроверитьЗаполнениеСтрокиДохода(ВыборкаПоДоходам, Отказ, ВыборкаПоДоходам.ТипСтроки);
			Если Не Отказ Тогда
				СтрокаНабора = НаборЗаписейДополнительный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНабора,ВыборкаПоДоходам,,"Скидка");
				ЗаполнитьЗначенияСвойств(СтрокаНабора,ВыборкаПоШапкеДокумента);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// запишем движения
	НаборЗаписейДополнительный.Записать();

	// Вызовем функцию расчета скидок по набору записей регистра о дополнительных доходах 
	//РасчетСкидокКДоходам(ВыборкаПоШапкеДокумента.Организация, НаборЗаписейДополнительный);
	ДополнительныеНачисления.Загрузить(НаборЗаписейДополнительный.Выгрузить());
	
	// Очистим ранее записанные в регистры расчетов сведения о доходах
	НаборЗаписейДополнительный.Очистить();
	НаборЗаписейДополнительный.Записать();
	
КонецПроцедуры // РассчитатьСкидки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//	нет
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетЕСН.Дата,
	|	РасчетЕСН.Организация КАК ОбособленноеПодразделение,
	|	РасчетЕСН.Ответственный,
	|	РасчетЕСН.ПериодРегистрации КАК ПериодРегистрации,
	|	РасчетЕСН.ПериодРегистрации КАК Период,
	|	ВЫБОР
	|		КОГДА РасчетЕСН.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	|			ТОГДА РасчетЕСН.Организация
	|		ИНАЧЕ РасчетЕСН.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	РасчетЕСН.Ссылка
	|ИЗ
	|	Документ.РасчетЕСН КАК РасчетЕСН
	|ГДЕ
	|	РасчетЕСН.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОбособленноеПодразделение) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Период) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период регистрации!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Формирует запрос по табличным частям документа "ОсновныеНачисление" и "ДополнительныеНачисления"
//
Функция СформироватьЗапросПоДоходам(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамРегистратор",		Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаАктуальности",		ПериодРегистрации);

	Запрос.УстановитьПараметр("ПустаяДата",				 Дата('00010101'));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	""Основные"" КАК ТипСтроки,
	|	Основные.НомерСтроки,
	|	Основные.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	Основные.ВидРасчета.ВидВремени КАК ВидВремени,
	|	ВЫБОР
	|		КОГДА Основные.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйПриработок)
	|			ТОГДА ЕСТЬNULL(ВЫБОР
	|						КОГДА ПлановыеНачисления.ПериодЗавершения <= &ДатаАктуальности
	|								И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА ПлановыеНачисления.ВидРасчетаЗавершения
	|						ИНАЧЕ ПлановыеНачисления.ВидРасчета
	|					КОНЕЦ, ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата))
	|		ИНАЧЕ Основные.ВидРасчета
	|	КОНЕЦ КАК ВидРасчета,
	|	Основные.Сотрудник.Физлицо КАК Физлицо,
	|	Основные.КодДоходаЕСН,
	|	Основные.ДоходФСЗН,
	|	Основные.ДоходЕдиныйПлатеж,
	|	Основные.ДоходСтрах,
	|	Основные.ДоходППС,
	|	Основные.ВидДеятельности,
	|	Основные.Результат,
	|	Основные.ПериодДействияНачало КАК ПериодВзаиморасчетов,
	|	Основные.ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА Основные.ПериодДействияКонец <> &ПустаяДата
	|			ТОГДА КОНЕЦПЕРИОДА(Основные.ПериодДействияКонец, ДЕНЬ)
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрез.ПериодЗавершения <= Основные.ПериодДействияНачало
	|				И РаботникиОрганизацииСрез.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрез.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрез.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА РаботникиОрганизацииСрез.ПериодЗавершения <= Основные.ПериодДействияНачало
	|					И РаботникиОрганизацииСрез.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрез.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|			ИНАЧЕ РаботникиОрганизацииСрез.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|		КОНЕЦ, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	0 КАК Скидка,
	|	ВЫБОР
	|		КОГДА Основные.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	Основные.БазаФСЗН,
	|	Основные.БазаППС,
	|	NULL КАК ДокументОснование,
	|	Основные.Сотрудник,
	|	ВЫБОР
	|		КОГДА Основные.ДоходСтрах = ЗНАЧЕНИЕ(Перечисление.ДоходыФСС_НС.Облагается)
	|			ТОГДА ВЫБОР
	|					КОГДА Основные.Результат > 0
	|						ТОГДА Основные.Результат * РасчетЕСНИсчисленныйБелгосстрах.БазаБелгосстрах / (РасчетЕСНИсчисленныйБелгосстрах.БазаБелгосстрах - РасчетЕСНИсчисленныйБелгосстрах.ДоплатаДоСредней)
	|					ИНАЧЕ Основные.Результат
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаБелгосстрах
	|ИЗ
	|	Документ.РасчетЕСН.ОсновныеНачисления КАК Основные
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаботникиОрганизацииСрез.Сотрудник КАК Сотрудник,
	|			РаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
	|			РаботникиОрганизации.ГрафикРаботыЗавершения КАК ГрафикРаботыЗавершения,
	|			РаботникиОрганизации.ПериодЗавершения КАК ПериодЗавершения
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиОрганизации.Период) КАК ПериодСреза,
	|				Основные.Сотрудник КАК Сотрудник
	|			ИЗ
	|				Документ.РасчетЕСН.ОсновныеНачисления КАК Основные
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|					ПО (РаботникиОрганизации.Период <= Основные.ПериодДействияНачало)
	|						И Основные.Сотрудник = РаботникиОрганизации.Сотрудник
	|			ГДЕ
	|				Основные.Ссылка = &парамРегистратор
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Основные.Сотрудник) КАК РаботникиОрганизацииСрез
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО РаботникиОрганизацииСрез.ПериодСреза = РаботникиОрганизации.Период
	|					И РаботникиОрганизацииСрез.Сотрудник = РаботникиОрганизации.Сотрудник) КАК РаботникиОрганизацииСрез
	|		ПО Основные.Сотрудник = РаботникиОрганизацииСрез.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&ДатаАктуальности, ) КАК ПлановыеНачисления
	|		ПО (ВЫБОР
	|				КОГДА ПлановыеНачисления.ПериодЗавершения <= &ДатаАктуальности
	|						И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ПлановыеНачисления.ВидРасчетаЗавершения.СпособРасчета
	|				ИНАЧЕ ПлановыеНачисления.ВидРасчета.СпособРасчета
	|			КОНЕЦ В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке)))
	|			И Основные.Сотрудник = ПлановыеНачисления.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетЕСН.ИсчисленныйБелгосстрах КАК РасчетЕСНИсчисленныйБелгосстрах
	|		ПО Основные.Сотрудник = РасчетЕСНИсчисленныйБелгосстрах.Сотрудник
	|			И (НАЧАЛОПЕРИОДА(Основные.ПериодДействияНачало, МЕСЯЦ) = РасчетЕСНИсчисленныйБелгосстрах.ПериодВзаиморасчетов)
	|			И Основные.Ссылка = РасчетЕСНИсчисленныйБелгосстрах.Ссылка
	|ГДЕ
	|	Основные.Ссылка = &парамРегистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Дополнительные"",
	|	Дополнительные.НомерСтроки,
	|	Дополнительные.ВидРасчета.СпособРасчета,
	|	NULL,
	|	Дополнительные.ВидРасчета,
	|	Дополнительные.Сотрудник.Физлицо,
	|	Дополнительные.КодДоходаЕСН,
	|	Дополнительные.ДоходФСЗН,
	|	Дополнительные.ДоходЕдиныйПлатеж,
	|	Дополнительные.ДоходСтрах,
	|	Дополнительные.ДоходППС,
	|	Дополнительные.ВидДеятельности,
	|	Дополнительные.Результат,
	|	Дополнительные.БазовыйПериодНачало,
	|	Дополнительные.БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА Дополнительные.БазовыйПериодКонец <> &ПустаяДата
	|			ТОГДА КОНЕЦПЕРИОДА(Дополнительные.БазовыйПериодКонец, ДЕНЬ)
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	Дополнительные.Скидка,
	|	ВЫБОР
	|		КОГДА Дополнительные.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	Дополнительные.БазаФСЗН,
	|	Дополнительные.БазаППС,
	|	Дополнительные.ДокументОснование,
	|	Дополнительные.Сотрудник,
	|	ВЫБОР
	|		КОГДА Дополнительные.ДоходСтрах = ЗНАЧЕНИЕ(Перечисление.ДоходыФСС_НС.Облагается)
	|			ТОГДА ВЫБОР
	|					КОГДА Дополнительные.Результат > 0
	|						ТОГДА Дополнительные.Результат * РасчетЕСНИсчисленныйБелгосстрах.БазаБелгосстрах / (РасчетЕСНИсчисленныйБелгосстрах.БазаБелгосстрах - РасчетЕСНИсчисленныйБелгосстрах.ДоплатаДоСредней)
	|					ИНАЧЕ Дополнительные.Результат
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.РасчетЕСН.ДополнительныеНачисления КАК Дополнительные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетЕСН.ИсчисленныйБелгосстрах КАК РасчетЕСНИсчисленныйБелгосстрах
	|		ПО Дополнительные.Сотрудник = РасчетЕСНИсчисленныйБелгосстрах.Сотрудник
	|			И (НАЧАЛОПЕРИОДА(Дополнительные.БазовыйПериодНачало, МЕСЯЦ) = РасчетЕСНИсчисленныйБелгосстрах.ПериодВзаиморасчетов)
	|			И Дополнительные.Ссылка = РасчетЕСНИсчисленныйБелгосстрах.Ссылка
	|ГДЕ
	|	Дополнительные.Ссылка = &парамРегистратор";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоДоходам()

// Формирует запрос по табличным частям документа "ОсновныеНачисление" и "ДополнительныеНачисления"
//
Функция СформироватьЗапросПоДоходамДляРегистровНакопления(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамРегистратор",		Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.Организация);
	Запрос.УстановитьПараметр("ПустаяДата",				 Дата('00010101'));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""Основные"" КАК ТипСтроки,
	|	Основные.НомерСтроки,
	|	Основные.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	Основные.ВидРасчета.ВидВремени КАК ВидВремени,
	|	Основные.ВидРасчета,
	|	Основные.Сотрудник.Физлицо КАК Физлицо,
	|	Основные.КодДоходаЕСН,
	|	Основные.ДоходФСЗН,
	|	Основные.ДоходЕдиныйПлатеж,
	|	Основные.ДоходСтрах,
	|	Основные.ДоходППС,
	|	Основные.ВидДеятельности,
	|	Основные.Результат,
	|	Основные.ПериодДействияНачало КАК ПериодВзаиморасчетов,
	|	Основные.ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА Основные.ПериодДействияКонец <> &ПустаяДата
	|			ТОГДА КОНЕЦПЕРИОДА(Основные.ПериодДействияКонец, ДЕНЬ)
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	0 КАК Скидка,
	|	ВЫБОР
	|		КОГДА Основные.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	Основные.БазаФСЗН,
	|	Основные.БазаППС,
	|	NULL КАК ДокументОснование,
	|	РасчетЕСНИсчисленныйЕСН.ДоплатаДоМЗП,
	|	Основные.Сотрудник,
	|	ВЫБОР
	|		КОГДА Основные.ДоходСтрах = ЗНАЧЕНИЕ(Перечисление.ДоходыФСС_НС.Облагается)
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетЕСНИсчисленныйБелгосстрах.БазаБелгосстрах - РасчетЕСНИсчисленныйБелгосстрах.ДоплатаДоСредней > 0
	|						ТОГДА Основные.Результат * РасчетЕСНИсчисленныйБелгосстрах.БазаБелгосстрах / (РасчетЕСНИсчисленныйБелгосстрах.БазаБелгосстрах - РасчетЕСНИсчисленныйБелгосстрах.ДоплатаДоСредней)
	|					ИНАЧЕ Основные.Результат
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаБелгосстрах
	|ИЗ
	|	Документ.РасчетЕСН.ОсновныеНачисления КАК Основные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетЕСН.ИсчисленныйЕСН КАК РасчетЕСНИсчисленныйЕСН
	|		ПО Основные.Сотрудник.Физлицо = РасчетЕСНИсчисленныйЕСН.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(Основные.ПериодДействияНачало, МЕСЯЦ) = РасчетЕСНИсчисленныйЕСН.ПериодВзаиморасчетов)
	|			И Основные.Ссылка = РасчетЕСНИсчисленныйЕСН.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетЕСН.ИсчисленныйБелгосстрах КАК РасчетЕСНИсчисленныйБелгосстрах
	|		ПО Основные.Сотрудник = РасчетЕСНИсчисленныйБелгосстрах.Сотрудник
	|			И (НАЧАЛОПЕРИОДА(Основные.ПериодДействияНачало, МЕСЯЦ) = РасчетЕСНИсчисленныйБелгосстрах.ПериодВзаиморасчетов)
	|			И Основные.Ссылка = РасчетЕСНИсчисленныйБелгосстрах.Ссылка 
    |ГДЕ
	|	Основные.Ссылка = &парамРегистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Дополнительные"",
	|	Дополнительные.НомерСтроки,
	|	Дополнительные.ВидРасчета.СпособРасчета,
	|	NULL,
	|	Дополнительные.ВидРасчета,
	|	Дополнительные.Сотрудник.Физлицо,
	|	Дополнительные.КодДоходаЕСН,
	|	Дополнительные.ДоходФСЗН,
	|	Дополнительные.ДоходЕдиныйПлатеж,
	|	Дополнительные.ДоходСтрах,
	|	Дополнительные.ДоходППС,
	|	Дополнительные.ВидДеятельности,
	|	Дополнительные.Результат,
	|	Дополнительные.БазовыйПериодНачало,
	|	Дополнительные.БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА Дополнительные.БазовыйПериодКонец <> &ПустаяДата
	|			ТОГДА КОНЕЦПЕРИОДА(Дополнительные.БазовыйПериодКонец, ДЕНЬ)
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ,
	|	Дополнительные.Скидка,
	|	ВЫБОР
	|		КОГДА Дополнительные.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	Дополнительные.БазаФСЗН,
	|	Дополнительные.БазаППС,
	|	Дополнительные.ДокументОснование,
	|	РасчетЕСНИсчисленныйЕСН.ДоплатаДоМЗП,
	|	Дополнительные.Сотрудник,
	|	ВЫБОР
	|		КОГДА Дополнительные.ДоходСтрах = ЗНАЧЕНИЕ(Перечисление.ДоходыФСС_НС.Облагается)
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетЕСНИсчисленныйБелгосстрах.БазаБелгосстрах - РасчетЕСНИсчисленныйБелгосстрах.ДоплатаДоСредней > 0
	|						ТОГДА Дополнительные.Результат * РасчетЕСНИсчисленныйБелгосстрах.БазаБелгосстрах / (РасчетЕСНИсчисленныйБелгосстрах.БазаБелгосстрах - РасчетЕСНИсчисленныйБелгосстрах.ДоплатаДоСредней)
	|					ИНАЧЕ Дополнительные.Результат
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.РасчетЕСН.ДополнительныеНачисления КАК Дополнительные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетЕСН.ИсчисленныйЕСН КАК РасчетЕСНИсчисленныйЕСН
	|		ПО Дополнительные.Сотрудник.Физлицо = РасчетЕСНИсчисленныйЕСН.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(Дополнительные.БазовыйПериодНачало, МЕСЯЦ) = РасчетЕСНИсчисленныйЕСН.ПериодВзаиморасчетов)
	|			И Дополнительные.Ссылка = РасчетЕСНИсчисленныйЕСН.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетЕСН.ИсчисленныйБелгосстрах КАК РасчетЕСНИсчисленныйБелгосстрах
	|		ПО Дополнительные.Сотрудник = РасчетЕСНИсчисленныйБелгосстрах.Сотрудник
	|			И (НАЧАЛОПЕРИОДА(Дополнительные.БазовыйПериодНачало, МЕСЯЦ) = РасчетЕСНИсчисленныйБелгосстрах.ПериодВзаиморасчетов)
	|			И Дополнительные.Ссылка = РасчетЕСНИсчисленныйБелгосстрах.Ссылка 
	|ГДЕ
	|	Дополнительные.Ссылка = &парамРегистратор";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоДоходам()

// Выполняет проверку правильности заполнения строки табличной части о доходах
Процедура ПроверитьЗаполнениеСтрокиДохода(ВыборкаПоДоходам, Отказ, ТипСтроки, Заголовок = "")
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоДоходам.НомерСтроки) +
	""" табл. части "+ТипСтроки+": ";

	Если ВыборкаПоДоходам.ВидРасчета.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоДоходам.Физлицо.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не указан сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоДоходам.КодДоходаЕСН.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не указан код дохода ЕСН!", Отказ, Заголовок);
	КонецЕсли;
	
	//Если ВыборкаПоДоходам.ДоходППС.Пустая() Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не указано отношение к ППС!", Отказ, Заголовок);
	//КонецЕсли;

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоДоходам.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ТипСтроки = "Основные" Тогда
		
		// Дата начала
		Если Не ЗначениеЗаполнено(ВыборкаПоДоходам.ПериодДействияНачало) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
		Иначе
			// Дата окончания
			Если Не ЗначениеЗаполнено(ВыборкаПоДоходам.ПериодДействияКонец) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
			Иначе
				Если ВыборкаПоДоходам.ПериодДействияКонец < ВыборкаПоДоходам.ПериодДействияНачало Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ, Заголовок);
				Иначе
					Если НачалоМесяца(ВыборкаПоДоходам.ПериодДействияКонец) <> НачалоМесяца(ВыборкаПоДоходам.ПериодДействияНачало) Тогда
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ, Заголовок);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
Конецпроцедуры // ПроверитьЗаполнениеСтрокиДохода()

// Добавляет запись в движения по регистру учета доходов 
//
Процедура ДобавитьСтрокуВДвиженияПоДоходам(ВыборкаПоДоходам, ГоловнаяОрганизация)
	
	Если ВыборкаПоДоходам.ТипСтроки = "Основные" Тогда
		Строка = Движения.ЕСНОсновныеНачисления.Добавить();
		
		ВидУчетаВремени = ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоДоходам.СпособРасчета, ВыборкаПоДоходам.ВидВремени, ВыборкаПоДоходам.СуммированныйУчетРабочегоВремени,ВыборкаПоДоходам.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени,ВыборкаПоДоходам.ВидРасчета.Показатели);
		
		// свойства
		Строка.ПериодДействияНачало		= ВыборкаПоДоходам.ПериодДействияНачало;
		Строка.ПериодДействияКонец		= ВыборкаПоДоходам.ПериодДействияКонец;
		
		// реквизиты
		Строка.ГрафикРаботы				= ВыборкаПоДоходам.ГрафикРаботы;
		Строка.ВидУчетаВремени			= ВидУчетаВремени;
		
	Иначе
		Строка = Движения.ЕСНДополнительныеНачисления.Добавить();
		
		// ресурсы
		Строка.БазовыйПериодНачало = ВыборкаПоДоходам.ПериодДействияНачало;
		Строка.БазовыйПериодКонец  = ВыборкаПоДоходам.ПериодДействияКонец;
		Строка.ДокументОснование   = ВыборкаПоДоходам.ДокументОснование;
		//Строка.Скидка = ВыборкаПоДоходам.Скидка;
		
	КонецЕсли;
	
	// свойства
	Строка.ВидРасчета = ВыборкаПоДоходам.ВидРасчета;
	Строка.ПериодРегистрации = ПериодРегистрации;
	
	//Измерения
	Строка.Сотрудник					= ВыборкаПоДоходам.Сотрудник;
	Строка.Физлицо						= ВыборкаПоДоходам.Физлицо;
	Строка.Организация					= ГоловнаяОрганизация;
	
	// ресурсы
	Строка.Результат					= ВыборкаПоДоходам.Результат;
	
	// реквизиты
	Строка.КодДоходаЕСН					= ВыборкаПоДоходам.КодДоходаЕСН;
	Строка.ДоходФСЗН = ?(ВыборкаПоДоходам.КодДоходаЕСН.ВходитВБазуФСЗН, Перечисления.ДоходыФСС_НС.Облагается,Перечисления.ДоходыФСС_НС.НеОблагается);
	Строка.ДоходСтрах = ?(ВыборкаПоДоходам.КодДоходаЕСН.ВходитВБазуСтрах, Перечисления.ДоходыФСС_НС.Облагается,Перечисления.ДоходыФСС_НС.НеОблагается);
	Строка.ДоходЕдиныйПлатеж = ?(ВыборкаПоДоходам.КодДоходаЕСН.ВходитВБазуЕдиныйПлатеж, Перечисления.ДоходыФСС_НС.Облагается,Перечисления.ДоходыФСС_НС.НеОблагается);
	Строка.ОбособленноеПодразделение	= Организация;
	Строка.ДоходППС						= ВыборкаПоДоходам.ДоходППС;
	Строка.ВидДеятельности				= ВыборкаПоДоходам.ВидДеятельности;
	Строка.БазаФСЗН                     = ВыборкаПоДоходам.БазаФСЗН;
	Строка.БазаППС                      = ВыборкаПоДоходам.БазаППС;
	Строка.БазаБелгосстрах              =  ВыборкаПоДоходам.БазаБелгосстрах;

	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоДоходам()

Процедура ДобавитьСтрокуВДвиженияПоДоходамФСЗН(ВыборкаПоДоходам, ГоловнаяОрганизация)
	
		
	// продублируем сведения о доходах в рег-ре налогового учета
	Строка = Движения.ЕСНСведенияОДоходах.Добавить();
	
	// свойства
	Строка.Период						= ПериодРегистрации;
	
	// Измерения
	Строка.Физлицо						= ВыборкаПоДоходам.Физлицо;
	Строка.Организация					= ГоловнаяОрганизация;
	Строка.периодВзаиморасчетов = ВыборкаПоДоходам.ПериодДействияНачало;
	
	// ресурсы
	Строка.Результат					= ВыборкаПоДоходам.Результат;
	Строка.БазаФСЗН						= ВыборкаПоДоходам.БазаФСЗН;
	Строка.БазаППС						= ВыборкаПоДоходам.БазаППС;
	Строка.ДоплатаДоМЗП                 = ВыборкаПоДоходам.ДоплатаДоМЗП;
		
	// реквизиты
	Строка.КодДоходаЕСН					= ВыборкаПоДоходам.КодДоходаЕСН;
	Строка.ДоходФСЗН 					= ВыборкаПоДоходам.ДоходФСЗН;
	Строка.ДоходСтрах					= ВыборкаПоДоходам.ДоходСтрах;
	Строка.ДоходЕдиныйПлатеж			= ВыборкаПоДоходам.ДоходЕдиныйПлатеж;
	Строка.ДоходППС						= ВыборкаПоДоходам.ДоходППС;
	Строка.ВидДеятельности				= ВыборкаПоДоходам.ВидДеятельности;
	Строка.ОбособленноеПодразделение	= Организация;
	Строка.ДокументОснование   			= ВыборкаПоДоходам.ДокументОснование;
	
	Если  ВыборкаПоДоходам.ПериодДействияНачало >= мДатаИзменения Тогда
		
		Строка = Движения.БелгосстрахСведенияОДоходах.Добавить();
			// свойства
		Строка.Период						= ПериодРегистрации;
		
		// Измерения
		Строка.Сотрудник					= ВыборкаПоДоходам.Сотрудник;
		Строка.Организация					= ГоловнаяОрганизация;
		Строка.периодВзаиморасчетов			= ВыборкаПоДоходам.ПериодДействияНачало;
		
		// ресурсы
		Строка.БазаБелгосстрах				= ВыборкаПоДоходам.БазаБелгосстрах;
	    Строка.Результат					= ВыборкаПоДоходам.Результат;

		
		// реквизиты
		Строка.КодДоходаЕСН					= ВыборкаПоДоходам.КодДоходаЕСН;
		//vvv
		Строка.ОбособленноеПодразделение	= Организация;
		//
		Строка.ДоходБелгосстрах				= ВыборкаПоДоходам.ДоходСтрах;


	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоДоходам()

Процедура ДобавитьСтрокуПособий(ВыборкаПоДоходам, ГоловнаяОрганизация)
	
	
	Движение = Движения.РасчетыПоСтраховымВзносам.ДобавитьРасход();
	// Свойства
	Движение.Период						= КонецМесяца(ПериодРегистрации);
	// Измерения
	Движение.ФизЛицо                    	= ВыборкаПоДоходам.ФизЛицо;
	Движение.Организация					= ГоловнаяОрганизация;
	Движение.МесяцРасчетногоПериода    		= НачалоМесяца(ВыборкаПоДоходам.ПериодВзаиморасчетов);
	
	Если ВыборкаПоДоходам.КодДоходаЕСН = Справочники.ДоходыЕСН.БольничныйИзФСЗН Тогда
		Движение.ВидПлатежа                     = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
	Иначе
		Движение.ВидПлатежа                     = Перечисления.ВидыПлатежейВГосБюджет.ПособияНаРебенка;
	КонецЕсли;
	// Ресурсы
	Движение.ФСЗН							= ВыборкаПоДоходам.Результат;
	
	
КонецПроцедуры

// Формирует запрос по табличной части документа "ИсчисленныйЕСН" 
//
Функция СформироватьЗапросПоНалогам()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Налог.НомерСтроки,
	|	ВЫБОР
	|		КОГДА Налог.ПроцентФСЗН ЕСТЬ NULL 
	|			ТОГДА 34
	|		ИНАЧЕ Налог.ПроцентФСЗН
	|	КОНЕЦ КАК ПроцентФСЗН,
	|	Налог.ФизЛицо,
	|	Налог.ФСЗН,
	|	Налог.ОбязательноеСтрахование,
	|	Налог.ЕдиныйПлатеж,
	|	Налог.ПериодВзаиморасчетов,
	|	Налог.ПенсионныйФонд,
	|	Налог.ППС,
	|	Налог.ПроцентППС,
	|	Налог.ВидДеятельности,
	|	Налог.Сотрудник
	|ИЗ
	|	Документ.РасчетЕСН.ИсчисленныйЕСН КАК Налог
	|ГДЕ
	|	Налог.Ссылка = &парамРегистратор";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоНалогам()

// Формирует запрос по табличной части документа "ИсчисленныйЕСН" 
//
Функция СформироватьЗапросПоБелгосстрах()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетЕСНИсчисленныйБелгосстрах.НомерСтроки,
	|	РасчетЕСНИсчисленныйБелгосстрах.Сотрудник,
	|	РасчетЕСНИсчисленныйБелгосстрах.ПериодВзаиморасчетов,
	|	РасчетЕСНИсчисленныйБелгосстрах.Белгосстрах,
	|	РасчетЕСНИсчисленныйБелгосстрах.Сотрудник.Физлицо КАК Физлицо,
	|	РасчетЕСНИсчисленныйБелгосстрах.ДоплатаДоСредней
    |ИЗ
	|	Документ.РасчетЕСН.ИсчисленныйБелгосстрах КАК РасчетЕСНИсчисленныйБелгосстрах
	|ГДЕ
	|	РасчетЕСНИсчисленныйБелгосстрах.Ссылка = &парамРегистратор";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоНалогам()

// Формирует запрос по табличной части документа "ИсчисленныйППС" 
//
Функция СформироватьЗапросПоППС()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетЕСНИсчисленыйППС.НомерСтроки,
	|	РасчетЕСНИсчисленыйППС.ФизЛицо,
	|	РасчетЕСНИсчисленыйППС.ПроцентППС,
	|	РасчетЕСНИсчисленыйППС.ФондППС,
	|	РасчетЕСНИсчисленыйППС.ППС,
	|	РасчетЕСНИсчисленыйППС.ВидДеятельности,
	|	РасчетЕСНИсчисленыйППС.ПериодВзаиморасчетов,
	|	34 КАК ПроцентФСЗН
	|ИЗ
	|	Документ.РасчетЕСН.ИсчисленыйППС КАК РасчетЕСНИсчисленыйППС
	|ГДЕ
	|	РасчетЕСНИсчисленыйППС.Ссылка = &парамРегистратор";

	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоНалогам()
Функция СформироватьЗапросПоПособиямИзФСЗН()
 	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РасчетЕСНСоциальныеПособияИзФСЗН.ФизЛицо,
	|	РасчетЕСНСоциальныеПособияИзФСЗН.ВидПособия,
	|	РасчетЕСН.Организация,
	|	РасчетЕСНСоциальныеПособияИзФСЗН.Сумма,
	|	РасчетЕСНСоциальныеПособияИзФСЗН.Новый,
	|	РасчетЕСНСоциальныеПособияИзФСЗН.ПериодДействияНачало,
	|	РасчетЕСНСоциальныеПособияИзФСЗН.ПериодДействияКонец,
	|	РасчетЕСНСоциальныеПособияИзФСЗН.Сторно,
	|	РасчетЕСНСоциальныеПособияИзФСЗН.Размер,
	|	РасчетЕСНСоциальныеПособияИзФСЗН.ДатаНачалаСобытия,
	|	РасчетЕСНСоциальныеПособияИзФСЗН.ДокументОснование,
	|	РасчетЕСН.ПериодРегистрации,
	|	РасчетЕСНСоциальныеПособияИзФСЗН.ОплаченныеДни
	|ИЗ
	|	Документ.РасчетЕСН.СоциальныеПособияИзФСЗН КАК РасчетЕСНСоциальныеПособияИзФСЗН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетЕСН КАК РасчетЕСН
	|		ПО РасчетЕСНСоциальныеПособияИзФСЗН.Ссылка = РасчетЕСН.Ссылка
	|ГДЕ
	|	РасчетЕСН.Ссылка = &парамРегистратор";
		
	Возврат Запрос.Выполнить();
	

	

КонецФункции // СформироватьЗапрос()
 

// Выполняет проверку правильности заполнения строки табличной части налогов
Процедура ПроверитьЗаполнениеСтрокиНалога(ВыборкаПоНалогам, Отказ, Заголовок = "")
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоНалогам.НомерСтроки) +
	""" табл. части Расчет взносов: ";
	Если ВыборкаПоНалогам.ФизЛицо.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке  + "Не указан работник!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНалога()

// Выполняет проверку правильности заполнения строки табличной части налогов
Процедура ПроверитьЗаполнениеСтрокиПоБелгосстрах(ВыборкаПоНалогам, Отказ, Заголовок = "")
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоНалогам.НомерСтроки) +
	""" табл. части Расчет взносов: ";
	Если ВыборкаПоНалогам.Сотрудник.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке  + "Не указан работник!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНалога()


// Добавляет запись в движения по регистру учета налогов
Процедура ДобавитьСтрокуВДвиженияПоНалогам(ВыборкаПоНалогам, ВыборкаПоШапкеДокумента)
	
	СтрокаНабора = Движения.ЕСНИсчисленный.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаНабора,ВыборкаПоШапкеДокумента);
	ЗаполнитьЗначенияСвойств(СтрокаНабора,ВыборкаПоНалогам);
	
	Движение = Движения.РасчетыПоСтраховымВзносам.ДобавитьПриход();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента);
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоНалогам);
	Движение.Период  =  КонецМесяца(ВыборкаПоШапкеДокумента.Период);
    Движение.ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	Движение.МесяцРасчетногоПериода = НачалоМесяца(ВыборкаПоНалогам.ПериодВзаиморасчетов);
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоНалогам()

// Добавляет запись в движения по регистру учета налогов
Процедура ДобавитьСтрокуВДвиженияПоБелгосстрах(ВыборкаПоНалогам, ВыборкаПоШапкеДокумента)
	
	СтрокаНабора = Движения.БелгосстрахИсчисленный.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаНабора,ВыборкаПоШапкеДокумента);
	ЗаполнитьЗначенияСвойств(СтрокаНабора,ВыборкаПоНалогам);
	
КонецПроцедуры


Процедура ДобавитьСтрокуВДвиженияПоПособиям(ВыборкаПоПособиямИзФСЗН, ВыборкаПоШапкеДокумента)

	СтрокаНабораПособий = Движения.ПособияИзФСЗН.Добавить();
	
	СтрокаНабораПособий.ФизЛицо = ВыборкаПоПособиямИзФСЗН.ФизЛицо;
	СтрокаНабораПособий.ВидПособия = ВыборкаПоПособиямИзФСЗН.ВидПособия;
	СтрокаНабораПособий.Организация = ВыборкаПоПособиямИзФСЗН.Организация;
	
	СтрокаНабораПособий.Сумма = ВыборкаПоПособиямИзФСЗН.Сумма;
	СтрокаНабораПособий.КоличествоПособий = ВыборкаПоПособиямИзФСЗН.Новый;
	
	Если ВыборкаПоПособиямИзФСЗН.Сторно = Истина И ВыборкаПоПособиямИзФСЗН.Новый = Истина Тогда
			
		СтрокаНабораПособий.КоличествоПособий = -1;
	ИначеЕсли ВыборкаПоПособиямИзФСЗН.Сторно = Ложь И ВыборкаПоПособиямИзФСЗН.Новый = Истина Тогда
	    СтрокаНабораПособий.КоличествоПособий = 1;
	Иначе
		СтрокаНабораПособий.КоличествоПособий = 0;
	
	КонецЕсли;
	
	
	СтрокаНабораПособий.Размер = ВыборкаПоПособиямИзФСЗН.Размер;
	СтрокаНабораПособий.Сторно = ВыборкаПоПособиямИзФСЗН.Сторно;
	СтрокаНабораПособий.ПериодДействияНачало = ВыборкаПоПособиямИзФСЗН.ПериодДействияНачало;
	СтрокаНабораПособий.ПериодДействияКонец = ВыборкаПоПособиямИзФСЗН.ПериодДействияКонец;
	СтрокаНабораПособий.ДокументОснование = ВыборкаПоПособиямИзФСЗН.ДокументОснование;
	СтрокаНабораПособий.ДатаНачалаСобытия = ВыборкаПоПособиямИзФСЗН.ДатаНачалаСобытия;
	СтрокаНабораПособий.Период = ВыборкаПоПособиямИзФСЗН.ПериодРегистрации;
	СтрокаНабораПособий.ОплаченныеДни = ВыборкаПоПособиямИзФСЗН.ОплаченныеДни;

КонецПроцедуры
 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Для Каждого Набор Из Движения Цикл
		Набор.Очистить();
	КонецЦикла;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	ВыборкаПоДоходам = СформироватьЗапросПоДоходам(ВыборкаПоШапкеДокумента).Выбрать();
	
	Пока ВыборкаПоДоходам.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиДохода(ВыборкаПоДоходам, Отказ, ВыборкаПоДоходам.ТипСтроки, Заголовок);
		Если Не Отказ Тогда
			ДобавитьСтрокуВДвиженияПоДоходам(ВыборкаПоДоходам,ВыборкаПоШапкеДокумента.Организация);
			Если ВыборкаПоДоходам.КодДоходаЕСН = Справочники.ДоходыЕСН.БольничныйИзФСЗН ИЛИ ВыборкаПоДоходам.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияИзФСЗН Тогда
				ДобавитьСтрокуПособий(ВыборкаПоДоходам,ВыборкаПоШапкеДокумента.Организация);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаПоДоходам = СформироватьЗапросПоДоходамДляРегистровНакопления(ВыборкаПоШапкеДокумента).Выбрать();
	
	Пока ВыборкаПоДоходам.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиДохода(ВыборкаПоДоходам, Отказ, ВыборкаПоДоходам.ТипСтроки, Заголовок);
		Если Не Отказ Тогда
			ДобавитьСтрокуВДвиженияПоДоходамФСЗН(ВыборкаПоДоходам,ВыборкаПоШапкеДокумента.Организация);
		КонецЕсли;
	КонецЦикла;

	
	ВыборкаПоНалогам = СформироватьЗапросПоНалогам().Выбрать();
	Пока ВыборкаПоНалогам.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНалога(ВыборкаПоНалогам, Отказ);
		Если Не Отказ Тогда
			ДобавитьСтрокуВДвиженияПоНалогам(ВыборкаПоНалогам, ВыборкаПоШапкеДокумента);
		КонецЕсли;
	КонецЦикла;
	
	
	
	
	ВыборкаПоБелгосстрах = СформироватьЗапросПоБелгосстрах().Выбрать();
	Пока ВыборкаПоБелгосстрах.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиПоБелгосстрах(ВыборкаПоБелгосстрах, Отказ);
		Если Не Отказ И ВыборкаПоБелгосстрах.Белгосстрах <> 0 Тогда
			ДобавитьСтрокуВДвиженияПоБелгосстрах(ВыборкаПоБелгосстрах, ВыборкаПоШапкеДокумента);
		КонецЕсли;
	КонецЦикла;
	
	
	ВыборкаПоППС = СформироватьЗапросПоППС().Выбрать();
	Пока ВыборкаПоППС.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНалога(ВыборкаПоППС, Отказ);
		Если Не Отказ Тогда
			ДобавитьСтрокуВДвиженияПоНалогам(ВыборкаПоППС, ВыборкаПоШапкеДокумента);
		КонецЕсли;
	КонецЦикла;

	
	
	
	
	ВыборкаПоПособиямИзФСЗН = СформироватьЗапросПоПособиямИзФСЗН().Выбрать();
	Пока ВыборкаПоПособиямИзФСЗН.Следующий() Цикл
	    Если Не Отказ Тогда
		
		    ДобавитьСтрокуВДвиженияПоПособиям(ВыборкаПоПособиямИзФСЗН, ВыборкаПоШапкеДокумента);	
		
		КонецЕсли; 
		
	
	КонецЦикла; 
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ИсчисленныйЕСН,, "Физлицо");
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Для Каждого Набор Из Движения Цикл
		Набор.Очистить();
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;// в секундах
мДатаИзменения =  Дата(2014,7,1);


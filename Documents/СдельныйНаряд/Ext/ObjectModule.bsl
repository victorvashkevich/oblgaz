////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Предопределенные значения справочника "КлассификаторИспользованияРабочегоВремени"
Перем КлассификаторНочноеВремя, КлассификаторВечернееВремя;

// Значения справочника Классификатор использования рабочего времени. 
Перем КлассификаторЯвка;
Перем КлассификаторНочныеЧасы;
Перем КлассификаторВечерниеЧасы;
Перем КлассификаторПустаяСсылка;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУпрУчета Экспорт;
Перем мПрежнееОтражатьВУправленческомУчете;
Перем мУдалятьДвижения;

Перем мУчетнаяПолитикаУСН;

// Значение  "ПоДням" перечисления ВидыУчетаВремени
Перем ВидУчетаВремениПоДням;
// Значение  "ПоЧасам" перечисления ВидыУчетаВремени
Перем ВидУчетаВремениПоЧасам;
Перем ВидУчетаВремениПоВечернимЧасам;
Перем ВидУчетаВремениПоНочнымЧасам;

// Индекс записи в наборе записей регистра сведений Графика
Перем ИндексЗаписиЯвка;
// Дата на которую происходит получение записи регистра.
Перем ДатаИндексаЗаписиЯвка;
// Количество часов работы которое проставляется для вида времени ПоДням
Перем ВремяЯвки;
// Массив строк "Первый", "Второй", "Третий" - приставки элементов табличной части документа.

Перем МассивПриставок;

//Перем ПериодРегистрации;
Перем СтруктураПоиска;

Перем РабочееВремяЗаполнено;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА



Процедура ОчиститьТабель() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.Текст =
	"";

	
КонецПроцедуры
#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Наряд"  Тогда
		ТабДокумент = ПечатьНаряда(ИмяМакета);
	ИначеЕсли ИмяМакета = "Табель"  Тогда
		ТабДокумент = ПечатьТабеля(ИмяМакета);	
	КонецЕсли;

	Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,"Наряд "));

КонецФункции // Печать()

Функция ПечатьНаряда(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СдельныйНаряд_Наряд";

	ВыборкаДляШапки = СформироватьЗапросПоШапкеДляПечати().Выбрать();
	ВыборкаДляВыработки = СформироватьЗапросПоВыработкеДляПечати().Выбрать();
	
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		Если ВыборкаДляШапки.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням тогда
			ОбластьШапка.Параметры.Период = Формат(ВыборкаДляШапки.Период,"ДФ='ММMM yyyy'");	
		КонецЕсли;
	КонецЕсли;
	
	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьШапка); // Шапка документа.

	СуммаИтого = 0;
	Пока ВыборкаДляВыработки.Следующий() Цикл
		ОбластьСтрока.Параметры.Заполнить(ВыборкаДляВыработки);	
		СуммаИтого = СуммаИтого + ВыборкаДляВыработки.Сумма;
		ТабДокумент.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ОбластьПодвал.Параметры.СуммаИтого = СуммаИтого;
	
	ТабДокумент.Вывести(ОбластьПодвал);	
	Возврат ТабДокумент;
КонецФункции

Функция ПечатьТабеля(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СдельныйНаряд_Таблеь";
    ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.АвтоМасштаб = Истина;	
	
	ВыборкаДляШапки = СформироватьЗапросПоШапкеДляПечати().Выбрать();
	ВыборкаДляИсполнителей = СформироватьЗапросПоИсполнителямДляПечати().Выбрать();
	
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		
	КонецЕсли;
	
	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьШапка); // Шапка документа.

	СуммаИтого = 0;
	ВсегоЧасов = 0;
	Пока ВыборкаДляИсполнителей.Следующий() Цикл
		ОбластьСтрока.Параметры.Заполнить(ВыборкаДляИсполнителей);	
		СуммаИтого = СуммаИтого + ВыборкаДляИсполнителей.Сумма;
		ВсегоЧасов = ВсегоЧасов + ВыборкаДляИсполнителей.ИтогоЧасов;
		ТабДокумент.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ОбластьПодвал.Параметры.ИтогоСумма = СуммаИтого;
	ОбластьПодвал.Параметры.ВсегоЧасов = ВсегоЧасов;
	
	ТабДокумент.Вывести(ОбластьПодвал);	
	Возврат ТабДокумент;
КонецФункции


#КонецЕсли

Функция СформироватьЗапросПоШапкеДляПечати()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СдельныйНаряд.ПодразделениеОрганизации КАК Подразделение,
	|	ВЫБОР
	|		КОГДА СдельныйНаряд.СпособВводаДанных = ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ЗаДень)
	|			ТОГДА СдельныйНаряд.ДатаНачалаПериода
	|		ИНАЧЕ СдельныйНаряд.ПериодРегистрации
	|	КОНЕЦ КАК Период,
	|	СдельныйНаряд.ВидНаряда КАК ТипНаряда,
	|	СдельныйНаряд.Коэффициент КАК КоэффициентОплаты,
	|	СдельныйНаряд.Номер,
	|	СдельныйНаряд.Дата,
	|	СдельныйНаряд.СпособВводаДанных
	|ИЗ
	|	Документ.СдельныйНаряд КАК СдельныйНаряд
	|ГДЕ
	|	СдельныйНаряд.Ссылка = &Ссылка";

	Возврат Запрос.Выполнить()
КонецФункции

Функция СформироватьЗапросПоВыработкеДляПечати()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СдельныйНарядВыработка.НомерСтроки КАК Номер,
	|	СдельныйНарядВыработка.Количество,
	|	СдельныйНарядВыработка.Расценка,
	|	СдельныйНарядВыработка.СуммаРегл КАК Сумма,
	|	СдельныйНарядВыработка.СчетЗатрат КАК Счет,
	|	СдельныйНарядВыработка.ОбъектСтроительства,
	|	СдельныйНарядВыработка.Продукция,
	|	СдельныйНарядВыработка.НоменклатурнаяГруппа,
	|	СдельныйНарядВыработка.СтатьяЗатрат,
	|	СдельныйНарядВыработка.ТехнологическаяОперация КАК Операция,
	|	СдельныйНарядВыработка.ЕденицаИзмерения
	|ИЗ
	|	Документ.СдельныйНаряд.Выработка КАК СдельныйНарядВыработка
	|ГДЕ
	|	СдельныйНарядВыработка.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";
	
	Возврат Запрос.Выполнить()

КонецФункции

Функция СформироватьЗапросПоИсполнителямДляПечати()
	
		// Сформируем структуру реквизитов шапки документа
	ВыборкаПоШапкеДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ДокументВведенЗаПериод", ВыборкаПоШапкеДокумента.СпособВводаДанных <> Перечисления.СпособыВводаДанныхОВремени.ЗаДень);
	Запрос.УстановитьПараметр("ДатаАктуальности",		?(СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень,ДатаНачалаПериода,ПериодРегистрации));
	Запрос.УстановитьПараметр("Месяц",					ВыборкаПоШапкеДокумента.ПериодРегистрации);


	
	
	Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда

	 	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СдельныйНарядИсполнители.НомерСтроки КАК Номер,
		|	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество КАК ФИО,
		|	СдельныйНарядИсполнители.СуммаКНачислениюРегл КАК Сумма,
		|	СдельныйНарядИсполнители.ОтработаноЧасов КАК ИтогоЧасов,
		|	ВЫБОР
		|		КОГДА СдельныйНарядИсполнители.Ссылка.УчитыватьКТУ
		|			ТОГДА СдельныйНарядИсполнители.КТУ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КТУ,
		|	ВЫБОР
		|		КОГДА СдельныйНарядИсполнители.Ссылка.УчитыватьТариф
		|			ТОГДА СдельныйНарядИсполнители.Тариф
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Тариф,
		|	СдельныйНарядИсполнители.Сотрудник.Код КАК ТабНом
		|ИЗ
		|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Месяц, ) КАК ФИОФизЛицСрезПоследних
		|		ПО СдельныйНарядИсполнители.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|ГДЕ
		|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка";

	Иначе
		
		ТекстЗапросаЧасы = "";
		ТекстЗапросаТаблица = "";
		
		Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
			
			ИндексНачальногоДня	= День(НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
			ИндексКонечногоДня	= День(КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
			
		Иначе
			
			ИндексНачальногоДня	= День(ВыборкаПоШапкеДокумента.ДатаНачалаПериода);
			ИндексКонечногоДня	= День(ВыборкаПоШапкеДокумента.ДатаНачалаПериода);
			
		КонецЕсли; 
		
		Для ИндексДня = ИндексНачальногоДня По ИндексКонечногоДня Цикл
			
			СтрИндексДня = Строка(ИндексДня);
			
			Запрос.Текст = 
			"ВЫБРАТЬ 
			|	СдельныйНарядИсполнители.НомерСтроки,
			|	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество КАК ФИО,
       		|	СдельныйНарядИсполнители.СуммаКНачислениюРегл КАК Сумма,
			|	СдельныйНарядИсполнители.ОтработаноЧасов КАК ИтогоЧасов,
     		|	СдельныйНарядИсполнители.ПервыйЧасов"+СтрИндексДня+" КАК Часов"+СтрИндексДня+",
			|	ВЫБОР
			|		КОГДА СдельныйНарядИсполнители.Ссылка.УчитыватьКТУ
			|			ТОГДА СдельныйНарядИсполнители.КТУ
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК КТУ,
			|	ВЫБОР
			|		КОГДА СдельныйНарядИсполнители.Ссылка.УчитыватьТариф
			|			ТОГДА СдельныйНарядИсполнители.Тариф
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Тариф
           	|ПОМЕСТИТЬ ВТДанныеНарядаПоДням" + СтрИндексДня + "
			|
			|ИЗ
			|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Месяц, ) КАК ФИОФизЛицСрезПоследних
			|		ПО СдельныйНарядИсполнители.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
           	|ГДЕ
			|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ФИО";
			Запрос.Выполнить();
			
			ТекстЗапросаЧасы = ТекстЗапросаЧасы +
			"ДанныеНарядаПоДням" + СтрИндексДня + ".Часов"+СтрИндексДня+" КАК Часов"+СтрИндексДня+",";
			ТекстЗапросаТаблица  = ТекстЗапросаТаблица +
			" ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеНарядаПоДням" + СтрИндексДня + "  КАК ДанныеНарядаПоДням" + СтрИндексДня + " ПО СдельныйНарядИсполнители.НомерСтроки = ДанныеНарядаПоДням" + СтрИндексДня + ".НомерСтроки"

		КонецЦикла;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СдельныйНарядИсполнители.НомерСтроки КАК Номер,
		|	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество КАК ФИО,
        |	СдельныйНарядИсполнители.СуммаКНачислениюРегл КАК Сумма,
		|	СдельныйНарядИсполнители.ОтработаноЧасов КАК ИтогоЧасов,
		|	" + ТекстЗапросаЧасы + "
		|	ВЫБОР
		|		КОГДА СдельныйНарядИсполнители.Ссылка.УчитыватьКТУ
		|			ТОГДА СдельныйНарядИсполнители.КТУ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КТУ,
		|	ВЫБОР
		|		КОГДА СдельныйНарядИсполнители.Ссылка.УчитыватьТариф
		|			ТОГДА СдельныйНарядИсполнители.Тариф
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Тариф,
		|	СдельныйНарядИсполнители.Сотрудник.Код КАК ТабНом
		|ИЗ
		|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Месяц, ) КАК ФИОФизЛицСрезПоследних
		|		ПО СдельныйНарядИсполнители.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|	" + ТекстЗапросаТаблица + "
       	|ГДЕ
		|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка";
	КонецЕсли; 
	
		
	Запрос.Текст = ТекстЗапроса;
		
	Возврат Запрос.Выполнить();

	
		
	Возврат Запрос.Выполнить()
КонецФункции
// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("Наряд",	"Печатная форма наряда");
	СтруктураПечатныхФорм.Вставить("Табель",	"Печатная форма табеля к наряду");

		
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Процедура предназначена для автозаполнения документа
// Если заполнен параметр сотрудники, то в табличную часть будут добавлены 
// строки по указаным сотрудникам.
Процедура Автозаполнение(Запрос = Неопределено, Сотрудник = Неопределено, ТекущаяСтрокаТабличнойЧасти = Неопределено) Экспорт
	
	Если Запрос = Неопределено Тогда 
		
		ЗапросАвтоЗаполнения = Новый Запрос;
	
		Если Сотрудник = Неопределено Тогда
			ЗапросАвтоЗаполнения.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РаботникиОрганизаций.Сотрудник КАК Ссылка,
			|	РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо
			|ПОМЕСТИТЬ ВТСписокРаботников
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоМесяца, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизаций
			|ГДЕ
			|	ВЫБОР
			|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
			|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
			|			ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
			|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|	И ВЫБОР
			|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
			|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ТОГДА РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения
			|			ИНАЧЕ РаботникиОрганизаций.ОбособленноеПодразделение
			|		КОНЕЦ = &ОбособленноеПодразделение
			|	И (ВЫБОР
			|				КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
			|						И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|					ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
			|				ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
			|			КОНЕЦ = &Подразделение
			|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РаботникиОрганизаций.Сотрудник,
			|	РаботникиОрганизаций.Сотрудник.Физлицо
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|ГДЕ
			|	РаботникиОрганизаций.Период > &НачалоМесяца
			|	И РаботникиОрганизаций.Период <= &КонецМесяца
			|	И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|	И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
			|	И РаботникиОрганизаций.ОбособленноеПодразделение = &ОбособленноеПодразделение
			|	И (РаботникиОрганизаций.ПодразделениеОрганизации = &Подразделение
			|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Работники.Сотрудник,
			|	Работники.Сотрудник.Физлицо
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК Работники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
			|		ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
			|			И (ПериодыПерекрытия.Период > Работники.Период)
			|			И (ПериодыПерекрытия.Сотрудник.Физлицо = Работники.Сотрудник.Физлицо)
			|			И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
			|ГДЕ
			|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|	И Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|	И Работники.ПериодЗавершения > &НачалоМесяца
			|	И Работники.ПериодЗавершения <= &КонецМесяца
			|	И Работники.Организация = &ГоловнаяОрганизация
			|	И Работники.ОбособленноеПодразделениеЗавершения = &ОбособленноеПодразделение
			|	И (Работники.ПодразделениеОрганизацииЗавершения = &Подразделение
			|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
			|	И ПериодыПерекрытия.Период ЕСТЬ NULL "; 
			
			ЗапросАвтоЗаполнения.УстановитьПараметр("ОбособленноеПодразделение", Организация);
			ЗапросАвтоЗаполнения.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", ?(УчитыватьОтработанноеВремя,Ложь, Истина));
		Иначе
			ЗапросАвтоЗаполнения.Текст = 
			"ВЫБРАТЬ
			|	СотрудникиОрганизаций.Ссылка,
			|	СотрудникиОрганизаций.Физлицо
			|ПОМЕСТИТЬ ВТСписокРаботников
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
			ЗапросАвтоЗаполнения.УстановитьПараметр("Сотрудник", Сотрудник);
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Истина);
		КонецЕсли;
	Иначе
		
		ЗапросАвтоЗаполнения = Запрос;
		Если ОтражатьВБухгалтерскомУчете Тогда
			ЗапросАвтоЗаполненияТекст = СтрЗаменить(ЗапросАвтоЗаполнения.Текст,"РаботникиОрганизации.Сотрудник КАК Сотрудник","РаботникиОрганизации.Сотрудник КАК Ссылка");
		Иначе
			ЗапросАвтоЗаполненияТекст = СтрЗаменить(ЗапросАвтоЗаполнения.Текст,"Сотрудники.Сотрудник КАК Сотрудник","Сотрудники.Сотрудник КАК Ссылка");
		КонецЕсли;
		ПозицияИндексирования = Найти(ЗапросАвтоЗаполненияТекст,"ИНДЕКСИРОВАТЬ");
		ЗапросАвтоЗаполнения.Текст = Лев(ЗапросАвтоЗаполненияТекст,ПозицияИндексирования - 1) + "
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка";
		ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Ложь);
		
	КонецЕсли;

	
	ЗапросАвтоЗаполнения.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	ЗапросАвтоЗаполнения.УстановитьПараметр("НачалоМесяца", ПериодРегистрации);
	ЗапросАвтоЗаполнения.УстановитьПараметр("КонецМесяца", КонецМесяца(ПериодРегистрации));
	
	ЗапросАвтоЗаполнения.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросАвтоЗаполнения.Выполнить();
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("ДокументСсылка", Ссылка);
	
		
	ЗапросАвтоЗаполнения.Текст = "ВЫБРАТЬ
		                             |	СписокРаботников.Ссылка КАК Сотрудник,
		                             |	СписокРаботников.ФизЛицо
		                             |ИЗ
		                             |	ВТСписокРаботников КАК СписокРаботников";
	//vvv								 
	ЗапросАвтоЗаполнения.Текст = "ВЫБРАТЬ
	                             |	СписокРаботников.Ссылка КАК Сотрудник,
	                             |	СписокРаботников.ФизЛицо,
								 |  ГрафикиРаботыПоВидамВремени.Часов,
								 |  ГрафикиРаботыПоВидамВремени.Дней
	                             |ИЗ
	                             |	ВТСписокРаботников КАК СписокРаботников
	                             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                             |			РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
	                             |			ГрафикиРаботыПоВидамВремени.Часов КАК Часов,
	                             |			ГрафикиРаботыПоВидамВремени.Дней КАК Дней
	                             |		ИЗ
	                             |			РегистрСведений.РаботникиОрганизаций.СрезПоследних(&КонецМесяца,) КАК РаботникиОрганизацийСрезПоследних
	                             |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                             |					ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	                             |					СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК Часов,
	                             |					СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК Дней
	                             |				ИЗ
	                             |					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	                             |				ГДЕ
	                             |					ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	                             |					И ГрафикиРаботыПоВидамВремени.Месяц = &НачалоМесяца
	                             |				
	                             |				СГРУППИРОВАТЬ ПО
	                             |					ГрафикиРаботыПоВидамВремени.ГрафикРаботы) КАК ГрафикиРаботыПоВидамВремени
	                             |				ПО РаботникиОрганизацийСрезПоследних.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы) КАК ГрафикиРаботыПоВидамВремени
	                             |		ПО СписокРаботников.Ссылка = ГрафикиРаботыПоВидамВремени.Сотрудник";
	//							 
	Выборка = ЗапросАвтоЗаполнения.Выполнить().Выбрать();
		
	Если Сотрудник = Неопределено Тогда
			Исполнители.Очистить();
	КонецЕсли;
	

	Пока Выборка.Следующий() Цикл
				
		Если ТекущаяСтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = Исполнители.Добавить();
		Иначе
			СтрокаТабличнойЧасти = ТекущаяСтрокаТабличнойЧасти;
		КонецЕсли;
		СтрокаТабличнойЧасти.Сотрудник = Выборка.Сотрудник;
		СтрокаТабличнойЧасти.ФизЛицо = Выборка.ФизЛицо;
		СтрокаТабличнойЧасти.КТУ = 1;
				
		Если УчитыватьТариф Тогда
			СтрокаТабличнойЧасти.Тариф = РасчетТарифнойСтавкиСотрудника(Выборка.Сотрудник, Дата, ПериодРегистрации);
		КонецЕсли;
		//vvv
		СтрокаТабличнойЧасти.ВиДВремени1=Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
		СтрокаТабличнойЧасти.Дней1=Выборка.Дней;
		СтрокаТабличнойЧасти.Часов1=Выборка.Часов;		
		//
	КонецЦикла;


	
КонецПроцедуры // Автозаполнение()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Функция возвращает часовую тарифную ставку работника.
//
// Параметры
//  Сотрудник  – СправочникСсылка.СотрудникиОрганизаций – расчитываемый работник
//  ДатаДок  – Дата – дата актуальности
//  ПериодРегистрации  – Дата – дата для валютного учета
//
// Возвращаемое значение:
//   Число   – часовая ставка работника организации
//
Функция РасчетТарифнойСтавкиСотрудника(Сотрудник, ДатаДок, ПериодРегистрации)Экспорт
	
	//Возврат ПроцедурыУправленияПерсоналом.ЧасоваяТарифнаяСтавкаРаботникаОрг(Сотрудник, ДатаДок, ПериодРегистрации, мВалютаРегламентированногоУчета);
	//vvv
	Если СервисныеПроцедурыИФункции.ОсновноеНачислениеЧасовойТариф(ДатаДок,Сотрудник) ТОгда
		Возврат ПроцедурыУправленияПерсоналом.ЧасоваяТарифнаяСтавкаРаботникаОрг(Сотрудник, ДатаДок, ПериодРегистрации, мВалютаРегламентированногоУчета);
	Иначе
		Возврат СервисныеПроцедурыИФункции.МесячнаяТарифнаяСтавкаРаботникаОрг(Сотрудник, ДатаДок, ПериодРегистрации, мВалютаРегламентированногоУчета);
	КонецЕсли;
	
КонецФункции // РасчетТарифнойСтавкиСотрудника()
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура определяет дату первого и последнего дня, в котром у работника
// было введено начисление.
//
Процедура ВычислитьДатуНачалаИОкончания(ПериодДействияНачало, ПериодДействияКонец, ВыборкаПоНачислениям, Сотрудник)
	
	ВыборкаПоНачислениям.Сбросить();
	Если ВыборкаПоНачислениям.НайтиСледующий(Сотрудник,"Сотрудник") Тогда
		ПериодДействияНачало = ВыборкаПоНачислениям.ПериодДействияНачало;
		ПериодДействияКонец = ВыборкаПоНачислениям.ПериодДействияКонец;
	КонецЕсли;
	
КонецПроцедуры //ВычислитьДатуНачалаИОкончания()

// Функция возвращает значение перечислеиня ВидыУчетаВремени, соответствующее 
// справочнику КлассификаторИспользованияРабочегоВремени.
Функция ПолучитьВидУчетаВремениПоКлассификатору(ВидВремени)
	
	Если ВидВремени.Пустая() Тогда
		Возврат ВидУчетаВремениПоЧасам;
	ИначеЕсли ВидВремени = КлассификаторВечернееВремя Тогда
		Возврат Перечисления.ВидыУчетаВремени.ПоВечернимЧасам;
	ИначеЕсли ВидВремени = КлассификаторНочноеВремя Тогда
		Возврат Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;
	Иначе
		Возврат ВидУчетаВремениПоЧасам;
	КонецЕсли;
	
КонецФункции

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ВычислитьКоличествоЧасовЗаДень(ВыборкаПоРаботники)
	
	ВсегоЧасовЗаДень	= 0;
	
	Пока ВыборкаПоРаботники.Следующий() Цикл
		
		Если ВыборкаПоРаботники.Часов <> 0 Тогда
			ВсегоЧасовЗаДень	= ВсегоЧасовЗаДень + ВыборкаПоРаботники["Часов"];
		КонецЕсли;	
		
	КонецЦикла; 
	
	Возврат ВсегоЧасовЗаДень
	
КонецФункции // ВычислитьКоличествоЧасовЗаДень()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Выработка.Сумма, Исполнители.СуммаКНачислению";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "Выработка.СчетУчетаБУ, Выработка.СчетУчетаНУ, Выработка.СуммаРегл, Исполнители.СуммаКНачислениюРегл";
	
	мСтрокаРеквизитыНалУчета = "";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

//vvv
Процедура ЗаполнитьПоВыполнениюЗаданий() Экспорт
	
	Если Исполнители.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Исполнители.Очистить();
	
	Запрос=Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Подразделение",ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("НачалоПериода",НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода",КонецДня(КонецМесяца(ПериодРегистрации)));
	Запрос.УстановитьПараметр("НормативЗарплаты",РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Получить(Новый Структура("Организация", ОбщегоНазначения.ГоловнаяОрганизация(Организация))).НормативЗарплаты);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
	|	РаботникиОрганизаций.Сотрудник.Физлицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= &КонецПериода
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения
	|		ИНАЧЕ РаботникиОрганизаций.ОбособленноеПодразделение
	|	КОНЕЦ КАК Организация
	|ПОМЕСТИТЬ ВТДатыПоследнихДвижений
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И РаботникиОрганизаций.Период <= &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизаций.Сотрудник.Физлицо,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= &КонецПериода
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения
	|		ИНАЧЕ РаботникиОрганизаций.ОбособленноеПодразделение
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатыПоследнихДвижений.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДатыПоследнихДвижений.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ДатыПоследнихДвижений.Организация
	|		ИНАЧЕ ДатыПоследнихДвижений.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТДатыПоследнихДвижений КАК ДатыПоследнихДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийСрезПоследних
	|		ПО ДатыПоследнихДвижений.Период = РаботникиОрганизацийСрезПоследних.Период
	|			И ДатыПоследнихДвижений.ФизЛицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &КонецПериода
	|					И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения
	|			ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|		КОНЕЦ = &Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыполнениеЗаданияРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ВыполнениеЗаданияРаботникиОрганизации.Сотрудник.Наименование КАК ФИО,
	|	ВыполнениеЗаданияРаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
	|	СУММА(ВЫБОР
	|			КОГДА ВыполнениеЗаданияРаботникиОрганизации.ВариантПриемаДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемаДенежныхСредств.БезвозмезднаяУслуга)
	|					И ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.СтоимостьПоПрейскуранту, 0) <> 0
	|				ТОГДА ВЫРАЗИТЬ(ВыполнениеЗаданияРаботникиОрганизации.Сумма * ВЫБОР
	|							КОГДА ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.НормативЗарплаты, 0) = 0
	|								ТОГДА &НормативЗарплаты
	|							ИНАЧЕ ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.НормативЗарплаты, 0)
	|						КОНЕЦ КАК ЧИСЛО(16, 2))
	|			КОГДА ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.СтоимостьПоПрейскуранту, 0) = 0
	|				ТОГДА ВЫРАЗИТЬ(СведенияОВидахРаботСрезПоследних.ЗаработнаяПлатаОсновная * ВыполнениеЗаданияРаботникиОрганизации.Количество КАК ЧИСЛО(16, 2)) //исправил округление до 2 знаков, Гончарова 02.05.19
	|			ИНАЧЕ ВЫРАЗИТЬ(ВыполнениеЗаданияРаботникиОрганизации.Сумма * ВЫБОР
	|						КОГДА ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.НормативЗарплаты, 0) = 0
	|							ТОГДА &НормативЗарплаты
	|						ИНАЧЕ ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.НормативЗарплаты, 0)
	|					КОНЕЦ КАК ЧИСЛО(16, 2))
	|		КОНЕЦ) КАК СуммаКНачислениюРегл,
	|	СУММА(ВЫБОР
	|			КОГДА (ВыполнениеЗаданияРаботникиОрганизации.ВариантПриемаДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемаДенежныхСредств.БезвозмезднаяУслуга)) И (ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.СтоимостьПоПрейскуранту, 0) <> 0)
	|				ТОГДА ВыполнениеЗаданияРаботникиОрганизации.Сумма
	|			КОГДА ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.СтоимостьПоПрейскуранту, 0) = 0
	|				ТОГДА ВЫРАЗИТЬ(СведенияОВидахРаботСрезПоследних.ЗаработнаяПлатаОсновная * ВыполнениеЗаданияРаботникиОрганизации.Количество КАК ЧИСЛО(16, 2)) //исправил округление до 2 знаков, Гончарова 02.05.19
	|			ИНАЧЕ ВыполнениеЗаданияРаботникиОрганизации.Сумма
	|		КОНЕЦ) КАК ОбъемРабот,
	|	ВЫБОР
	|		КОГДА (ВыполнениеЗаданияРаботникиОрганизации.ВариантПриемаДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемаДенежныхСредств.БезвозмезднаяУслуга)) И (ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.СтоимостьПоПрейскуранту, 0) <> 0)	
	|			ТОГДА ВЫБОР КОГДА ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.НормативЗарплаты, 0) = 0 ТОГДА &НормативЗарплаты ИНАЧЕ ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.НормативЗарплаты, 0) КОНЕЦ
	|		КОГДА ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.СтоимостьПоПрейскуранту, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР КОГДА ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.НормативЗарплаты, 0) = 0 ТОГДА &НормативЗарплаты ИНАЧЕ ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.НормативЗарплаты, 0) КОНЕЦ
	|	КОНЕЦ КАК НормативЗарплаты,
	|	ВЫБОР
	|		КОГДА (ВыполнениеЗаданияРаботникиОрганизации.ВариантПриемаДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемаДенежныхСредств.БезвозмезднаяУслуга)) И (ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.СтоимостьПоПрейскуранту, 0) <> 0)
	|			ТОГДА ""Работы, выполненные на безвозмездной основе (при наличии цены по прейскуранту)""
	|		КОГДА ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.СтоимостьПоПрейскуранту, 0) = 0
	|			ТОГДА ""Работы, выполненные на безвозмездной основе (при наличии сдельной расценки)""
	|		ИНАЧЕ ""Работы, выполненные на платной основе""
	|	КОНЕЦ КАК ВыполненныеРаботы
	|ИЗ
	|	Документ.ВыполнениеЗадания.РаботникиОрганизации КАК ВыполнениеЗаданияРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВидахРабот.СрезПоследних(&КонецПериода, ) КАК СведенияОВидахРаботСрезПоследних
	|		ПО ВыполнениеЗаданияРаботникиОрганизации.ВидРаботы = СведенияОВидахРаботСрезПоследних.ВидРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
	|		ПО ВыполнениеЗаданияРаботникиОрганизации.Сотрудник = Сотрудники.Сотрудник
	|ГДЕ
	|	ВыполнениеЗаданияРаботникиОрганизации.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВыполнениеЗаданияРаботникиОрганизации.Ссылка.Организация = &Организация
	|	И ВыполнениеЗаданияРаботникиОрганизации.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыполнениеЗаданияРаботникиОрганизации.Сотрудник,
	|	ВЫБОР
	|		КОГДА (ВыполнениеЗаданияРаботникиОрганизации.ВариантПриемаДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемаДенежныхСредств.БезвозмезднаяУслуга)) И (ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.СтоимостьПоПрейскуранту, 0) <> 0)	
	|			ТОГДА ВЫБОР КОГДА ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.НормативЗарплаты, 0) = 0 ТОГДА &НормативЗарплаты ИНАЧЕ ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.НормативЗарплаты, 0) КОНЕЦ
	|		КОГДА ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.СтоимостьПоПрейскуранту, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР КОГДА ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.НормативЗарплаты, 0) = 0 ТОГДА &НормативЗарплаты ИНАЧЕ ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.НормативЗарплаты, 0) КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (ВыполнениеЗаданияРаботникиОрганизации.ВариантПриемаДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемаДенежныхСредств.БезвозмезднаяУслуга)) И (ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.СтоимостьПоПрейскуранту, 0) <> 0)
	|			ТОГДА ""Работы, выполненные на безвозмездной основе (при наличии цены по прейскуранту)""
	|		КОГДА ЕСТЬNULL(СведенияОВидахРаботСрезПоследних.СтоимостьПоПрейскуранту, 0) = 0
	|			ТОГДА ""Работы, выполненные на безвозмездной основе (при наличии сдельной расценки)""
	|		ИНАЧЕ ""Работы, выполненные на платной основе""
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФИО";
	
	//Исполнители.Загрузить(Запрос.Выполнить().Выгрузить()); делаем по другому, чтобы совпадали суммы с нарядом на сдельные работы
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из ТЗ Цикл
		
		Если Стр.НормативЗарплаты<>0 ТОгда		
			
			Стр.СуммаКНачислениюРегл = Окр(Стр.ОбъемРабот*Стр.НормативЗарплаты,2);				
			
		КонецЕсли;		
		
	КонецЦикла;
	
	
	ТЗ.Свернуть("Сотрудник,ФИО,ФизЛицо","СуммаКНачислениюРегл");
	Исполнители.Загрузить(ТЗ);
	
	
КонецПроцедуры

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыШапкиУпр(Реквизиты)
	
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") + "Подразделение";
	
КонецПроцедуры // ДополнитьРеквизитыШапкиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты)
	
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") + "Организация, ПодразделениеОрганизации";
	
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Формирует запрос по таблице "Исполнители" документа
//
// Параметры:
//	Режим	- режим проведения
//
// Возвращаемое значение:
//	Результат запроса. В запросе данные документа дополняются значениями
//	проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоИсполнители(Режим, ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод 
		Или Не ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СдельныйНарядИсполнители.НомерСтроки,
		|	СдельныйНарядИсполнители.Сотрудник,
		|	СдельныйНарядИсполнители.Сотрудник.Физлицо КАК Физлицо,
		|	СдельныйНарядИсполнители.СуммаКНачислению,
		|	СдельныйНарядИсполнители.ОтработаноЧасов,
		|	СдельныйНарядИсполнители.ОтработаноДней,
		|	0 КАК Часов,
		|	"""" КАК ВидВремени,
		|	0 КАК ИндексДня,
		|	СдельныйНарядИсполнители.ВидВремени1 КАК ВидВремени1Сводно,
		|	СдельныйНарядИсполнители.ВидВремени2 КАК ВидВремени2Сводно,
		|	СдельныйНарядИсполнители.ВидВремени3 КАК ВидВремени3Сводно,
		|	СдельныйНарядИсполнители.ВидВремени4 КАК ВидВремени4Сводно,
		|	СдельныйНарядИсполнители.ВидВремени5 КАК ВидВремени5Сводно,
		|	СдельныйНарядИсполнители.Дней1 КАК Дней1Сводно,
		|	СдельныйНарядИсполнители.Дней2 КАК Дней2Сводно,
		|	СдельныйНарядИсполнители.Дней3 КАК Дней3Сводно,
		|	СдельныйНарядИсполнители.Дней4 КАК Дней4Сводно,
		|	СдельныйНарядИсполнители.Дней5 КАК Дней5Сводно,
		|	СдельныйНарядИсполнители.Часов1 КАК Часов1Сводно,
		|	СдельныйНарядИсполнители.Часов2 КАК Часов2Сводно,
		|	СдельныйНарядИсполнители.Часов3 КАК Часов3Сводно,
		|	СдельныйНарядИсполнители.Часов4 КАК Часов4Сводно,
		|	СдельныйНарядИсполнители.Часов5 КАК Часов5Сводно
		|ИЗ
		|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
		|ГДЕ
		|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
		|";
	Иначе
		
		Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
			
			ИндексНачальногоДня	= День(НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
			ИндексКонечногоДня	= День(КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
			
		Иначе
			
			ИндексНачальногоДня	= День(ВыборкаПоШапкеДокумента.ДатаНачалаПериода);
			ИндексКонечногоДня	= День(ВыборкаПоШапкеДокумента.ДатаНачалаПериода);
			
		КонецЕсли; 
		
		Для ИндексДня = ИндексНачальногоДня По ИндексКонечногоДня Цикл
			
			СтрИндексДня = Строка(ИндексДня);
			
			Запрос.Текст = 
			"ВЫБРАТЬ 
			|	СдельныйНарядИсполнители.НомерСтроки,
			|	СдельныйНарядИсполнители.Сотрудник,
			|	СдельныйНарядИсполнители.Сотрудник.Физлицо КАК Физлицо,
			|	СдельныйНарядИсполнители.СуммаКНачислению,
			|	СдельныйНарядИсполнители.ОтработаноЧасов,
			|	СдельныйНарядИсполнители.ОтработаноДней,
			|	СдельныйНарядИсполнители.ПервыйЧасов"+СтрИндексДня+" КАК Часов,
			|	СдельныйНарядИсполнители.ПервыйВидВремени"+СтрИндексДня+" КАК ВидВремени,
			|	"+СтрИндексДня+" КАК ИндексДня,
			|	СдельныйНарядИсполнители.ВидВремени1 КАК ВидВремени1Сводно,
			|	СдельныйНарядИсполнители.ВидВремени2 КАК ВидВремени2Сводно,
			|	СдельныйНарядИсполнители.ВидВремени3 КАК ВидВремени3Сводно,
			|	СдельныйНарядИсполнители.ВидВремени4 КАК ВидВремени4Сводно,
			|	СдельныйНарядИсполнители.ВидВремени5 КАК ВидВремени5Сводно,
			|	СдельныйНарядИсполнители.Дней1 КАК Дней1Сводно,
			|	СдельныйНарядИсполнители.Дней2 КАК Дней2Сводно,
			|	СдельныйНарядИсполнители.Дней3 КАК Дней3Сводно,
			|	СдельныйНарядИсполнители.Дней4 КАК Дней4Сводно,
			|	СдельныйНарядИсполнители.Дней5 КАК Дней5Сводно,
			|	СдельныйНарядИсполнители.Часов1 КАК Часов1Сводно,
			|	СдельныйНарядИсполнители.Часов2 КАК Часов2Сводно,
			|	СдельныйНарядИсполнители.Часов3 КАК Часов3Сводно,
			|	СдельныйНарядИсполнители.Часов4 КАК Часов4Сводно,
			|	СдельныйНарядИсполнители.Часов5 КАК Часов5Сводно
			|ПОМЕСТИТЬ ВТДанныеНарядаПоДням" + СтрИндексДня + "
			|ИЗ
			|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
			|ГДЕ
			|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
			|	И СдельныйНарядИсполнители.ПервыйВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ 
			|	СдельныйНарядИсполнители.НомерСтроки,
			|	СдельныйНарядИсполнители.Сотрудник,
			|	СдельныйНарядИсполнители.Сотрудник.Физлицо,
			|	СдельныйНарядИсполнители.СуммаКНачислению,
			|	СдельныйНарядИсполнители.ОтработаноЧасов,
			|	СдельныйНарядИсполнители.ОтработаноДней,
			|	СдельныйНарядИсполнители.ВторойЧасов"+СтрИндексДня+",
			|	СдельныйНарядИсполнители.ВторойВидВремени"+СтрИндексДня+",
			|	"+СтрИндексДня+",
			|	СдельныйНарядИсполнители.ВидВремени1,
			|	СдельныйНарядИсполнители.ВидВремени2,
			|	СдельныйНарядИсполнители.ВидВремени3,
			|	СдельныйНарядИсполнители.ВидВремени4,
			|	СдельныйНарядИсполнители.ВидВремени5,
			|	СдельныйНарядИсполнители.Дней1,
			|	СдельныйНарядИсполнители.Дней2,
			|	СдельныйНарядИсполнители.Дней3,
			|	СдельныйНарядИсполнители.Дней4,
			|	СдельныйНарядИсполнители.Дней5,
			|	СдельныйНарядИсполнители.Часов1,
			|	СдельныйНарядИсполнители.Часов2,
			|	СдельныйНарядИсполнители.Часов3,
			|	СдельныйНарядИсполнители.Часов4,
			|	СдельныйНарядИсполнители.Часов5
			|ИЗ
			|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
			|ГДЕ
			|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
			|	И СдельныйНарядИсполнители.ВторойВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ 
			|	СдельныйНарядИсполнители.НомерСтроки,
			|	СдельныйНарядИсполнители.Сотрудник,
			|	СдельныйНарядИсполнители.Сотрудник.Физлицо,
			|	СдельныйНарядИсполнители.СуммаКНачислению,
			|	СдельныйНарядИсполнители.ОтработаноЧасов,
			|	СдельныйНарядИсполнители.ОтработаноДней,
			|	СдельныйНарядИсполнители.ТретийЧасов"+СтрИндексДня+",
			|	СдельныйНарядИсполнители.ТретийВидВремени"+СтрИндексДня+",
			|	"+СтрИндексДня+",
			|	СдельныйНарядИсполнители.ВидВремени1,
			|	СдельныйНарядИсполнители.ВидВремени2,
			|	СдельныйНарядИсполнители.ВидВремени3,
			|	СдельныйНарядИсполнители.ВидВремени4,
			|	СдельныйНарядИсполнители.ВидВремени5,
			|	СдельныйНарядИсполнители.Дней1,
			|	СдельныйНарядИсполнители.Дней2,
			|	СдельныйНарядИсполнители.Дней3,
			|	СдельныйНарядИсполнители.Дней4,
			|	СдельныйНарядИсполнители.Дней5,
			|	СдельныйНарядИсполнители.Часов1,
			|	СдельныйНарядИсполнители.Часов2,
			|	СдельныйНарядИсполнители.Часов3,
			|	СдельныйНарядИсполнители.Часов4,
			|	СдельныйНарядИсполнители.Часов5
			|ИЗ
			|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
			|ГДЕ
			|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
			|	И СдельныйНарядИсполнители.ТретийВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|	
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	ИндексДня";
			Запрос.Выполнить();
			
			Если ИндексДня = ИндексНачальногоДня Тогда
				ТекстЗапроса = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДанныеНарядаПоДням.НомерСтроки,
				|	ДанныеНарядаПоДням.Сотрудник,
				|	ДанныеНарядаПоДням.Физлицо,
				|	ДанныеНарядаПоДням.СуммаКНачислению,
				|	ДанныеНарядаПоДням.ОтработаноЧасов,
				|	ДанныеНарядаПоДням.ОтработаноДней,
				|	ДанныеНарядаПоДням.Часов,
				|	ДанныеНарядаПоДням.ВидВремени,
				|	ДанныеНарядаПоДням.ИндексДня,
				|	ДанныеНарядаПоДням.ВидВремени1Сводно,
				|	ДанныеНарядаПоДням.ВидВремени2Сводно,
				|	ДанныеНарядаПоДням.ВидВремени3Сводно,
				|	ДанныеНарядаПоДням.ВидВремени4Сводно,
				|	ДанныеНарядаПоДням.ВидВремени5Сводно,
				|	ДанныеНарядаПоДням.Дней1Сводно,
				|	ДанныеНарядаПоДням.Дней2Сводно,
				|	ДанныеНарядаПоДням.Дней3Сводно,
				|	ДанныеНарядаПоДням.Дней4Сводно,
				|	ДанныеНарядаПоДням.Дней5Сводно,
				|	ДанныеНарядаПоДням.Часов1Сводно,
				|	ДанныеНарядаПоДням.Часов2Сводно,
				|	ДанныеНарядаПоДням.Часов3Сводно,
				|	ДанныеНарядаПоДням.Часов4Сводно,
				|	ДанныеНарядаПоДням.Часов5Сводно
				|ИЗ
				|	ВТДанныеНарядаПоДням"+СтрИндексДня+" КАК ДанныеНарядаПоДням
				|";
			Иначе 	
				ТекстЗапроса = ТекстЗапроса + 
				"ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДанныеНарядаПоДням.НомерСтроки,
				|	ДанныеНарядаПоДням.Сотрудник,
				|	ДанныеНарядаПоДням.Физлицо,
				|	ДанныеНарядаПоДням.СуммаКНачислению,
				|	ДанныеНарядаПоДням.ОтработаноЧасов,
				|	ДанныеНарядаПоДням.ОтработаноДней,
				|	ДанныеНарядаПоДням.Часов,
				|	ДанныеНарядаПоДням.ВидВремени,
				|	ДанныеНарядаПоДням.ИндексДня,
				|	ДанныеНарядаПоДням.ВидВремени1Сводно,
				|	ДанныеНарядаПоДням.ВидВремени2Сводно,
				|	ДанныеНарядаПоДням.ВидВремени3Сводно,
				|	ДанныеНарядаПоДням.ВидВремени4Сводно,
				|	ДанныеНарядаПоДням.ВидВремени5Сводно,
				|	ДанныеНарядаПоДням.Дней1Сводно,
				|	ДанныеНарядаПоДням.Дней2Сводно,
				|	ДанныеНарядаПоДням.Дней3Сводно,
				|	ДанныеНарядаПоДням.Дней4Сводно,
				|	ДанныеНарядаПоДням.Дней5Сводно,
				|	ДанныеНарядаПоДням.Часов1Сводно,
				|	ДанныеНарядаПоДням.Часов2Сводно,
				|	ДанныеНарядаПоДням.Часов3Сводно,
				|	ДанныеНарядаПоДням.Часов4Сводно,
				|	ДанныеНарядаПоДням.Часов5Сводно
				|ИЗ
				|	ВТДанныеНарядаПоДням"+СтрИндексДня+" КАК ДанныеНарядаПоДням
				|";
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса + 
	"УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ИндексДня";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоИсполнители()

// Формирует запрос по таблице "Исполнители" документа
//
// Параметры: 
//	Режим	- режим проведения
//
// Возвращаемое значение:
//	Результат запроса. В запросе данные документа дополняются значениями
//	проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоИсполнителиРегл(ВыборкаПоШапкеДокумента, ВыборкаДанныхПоГрафику)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ДокументВведенЗаПериод", ВыборкаПоШапкеДокумента.СпособВводаДанных <> Перечисления.СпособыВводаДанныхОВремени.ЗаДень);
	Запрос.УстановитьПараметр("ДатаАктуальности",		?(СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень,ДатаНачалаПериода,ПериодРегистрации));
	Запрос.УстановитьПараметр("Месяц",					ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("ПредыдущаяДата",			НачалоДня(НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации) - 1));
	
	Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод
		Или Не ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СдельныйНарядИсполнители.Ссылка,
		|	СдельныйНарядИсполнители.НомерСтроки,
		|	СдельныйНарядИсполнители.Сотрудник КАК Сотрудник,
		//vvv
		|	СдельныйНарядИсполнители.КоэффициентСтажа КАК КоэффициентСтажа,
		|	СдельныйНарядИсполнители.КТУ КАК КТУ,
		|	СдельныйНарядИсполнители.Тариф КАК Тариф,
		|	СдельныйНарядИсполнители.Автомобиль КАК Автомобиль,
		//
		|	СдельныйНарядИсполнители.Сотрудник.Наименование,
		|	СдельныйНарядИсполнители.Сотрудник.Физлицо КАК Физлицо,
		|	СдельныйНарядИсполнители.СуммаКНачислениюРегл КАК СуммаКНачислению,
		|	СдельныйНарядИсполнители.ОтработаноЧасов,
		|	СдельныйНарядИсполнители.ОтработаноДней,
		|	0 КАК Часов,
		|	"""" КАК ВидВремени,
		|	0 КАК ИндексДня,
		|	&ДатаАктуальности КАК ДатаДня,
		|	СдельныйНарядИсполнители.ВидВремени1 КАК ВидВремени1Сводно,
		|	СдельныйНарядИсполнители.ВидВремени2 КАК ВидВремени2Сводно,
		|	СдельныйНарядИсполнители.ВидВремени3 КАК ВидВремени3Сводно,
		|	СдельныйНарядИсполнители.ВидВремени4 КАК ВидВремени4Сводно,
		|	СдельныйНарядИсполнители.ВидВремени5 КАК ВидВремени5Сводно,
		|	СдельныйНарядИсполнители.Дней1 КАК Дней1Сводно,
		|	СдельныйНарядИсполнители.Дней2 КАК Дней2Сводно,
		|	СдельныйНарядИсполнители.Дней3 КАК Дней3Сводно,
		|	СдельныйНарядИсполнители.Дней4 КАК Дней4Сводно,
		|	СдельныйНарядИсполнители.Дней5 КАК Дней5Сводно,
		|	СдельныйНарядИсполнители.Часов1 КАК Часов1Сводно,
		|	СдельныйНарядИсполнители.Часов2 КАК Часов2Сводно,
		|	СдельныйНарядИсполнители.Часов3 КАК Часов3Сводно,
		|	СдельныйНарядИсполнители.Часов4 КАК Часов4Сводно,
		|	СдельныйНарядИсполнители.Часов5 КАК Часов5Сводно
		|ПОМЕСТИТЬ ВТДанныеНарядаПоДням
		|ИЗ
		|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
		|ГДЕ
		|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
		|";
		
	Иначе
		
		
		Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
			
			ИндексНачальногоДня	= День(НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
			ИндексКонечногоДня	= День(КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
			
		Иначе
			
			ИндексНачальногоДня	= День(ВыборкаПоШапкеДокумента.ДатаНачалаПериода);
			ИндексКонечногоДня	= День(ВыборкаПоШапкеДокумента.ДатаНачалаПериода);
			
		КонецЕсли; 
		
		Для ИндексДня = ИндексНачальногоДня По ИндексКонечногоДня Цикл
			
			СтрИндексДня = Строка(ИндексДня);
			
			Запрос.Текст = 
			"ВЫБРАТЬ 
			|	СдельныйНарядИсполнители.Ссылка,
			|	СдельныйНарядИсполнители.НомерСтроки,
			|	СдельныйНарядИсполнители.Сотрудник КАК Сотрудник,
			//vvv
			|	СдельныйНарядИсполнители.КоэффициентСтажа КАК КоэффициентСтажа,
			|	СдельныйНарядИсполнители.КТУ КАК КТУ,
			|	СдельныйНарядИсполнители.Тариф КАК Тариф,
			|	СдельныйНарядИсполнители.Автомобиль КАК Автомобиль,
			//
			|	СдельныйНарядИсполнители.Сотрудник.Наименование,
			|	СдельныйНарядИсполнители.Сотрудник.Физлицо КАК Физлицо,
			|	СдельныйНарядИсполнители.СуммаКНачислениюРегл КАК СуммаКНачислению,
			|	СдельныйНарядИсполнители.ОтработаноЧасов,
			|	СдельныйНарядИсполнители.ОтработаноДней,
			|	СдельныйНарядИсполнители.ПервыйЧасов"+СтрИндексДня+" КАК Часов,
			|	СдельныйНарядИсполнители.ПервыйВидВремени"+СтрИндексДня+" КАК ВидВремени,
			|	"+СтрИндексДня+" КАК ИндексДня,
			|	ДОБАВИТЬКДАТЕ(&ПредыдущаяДата, ДЕНЬ, "+СтрИндексДня+") КАК ДатаДня,
			|	СдельныйНарядИсполнители.ВидВремени1 КАК ВидВремени1Сводно,
			|	СдельныйНарядИсполнители.ВидВремени2 КАК ВидВремени2Сводно,
			|	СдельныйНарядИсполнители.ВидВремени3 КАК ВидВремени3Сводно,
			|	СдельныйНарядИсполнители.ВидВремени4 КАК ВидВремени4Сводно,
			|	СдельныйНарядИсполнители.ВидВремени5 КАК ВидВремени5Сводно,
			|	СдельныйНарядИсполнители.Дней1 КАК Дней1Сводно,
			|	СдельныйНарядИсполнители.Дней2 КАК Дней2Сводно,
			|	СдельныйНарядИсполнители.Дней3 КАК Дней3Сводно,
			|	СдельныйНарядИсполнители.Дней4 КАК Дней4Сводно,
			|	СдельныйНарядИсполнители.Дней5 КАК Дней5Сводно,
			|	СдельныйНарядИсполнители.Часов1 КАК Часов1Сводно,
			|	СдельныйНарядИсполнители.Часов2 КАК Часов2Сводно,
			|	СдельныйНарядИсполнители.Часов3 КАК Часов3Сводно,
			|	СдельныйНарядИсполнители.Часов4 КАК Часов4Сводно,
			|	СдельныйНарядИсполнители.Часов5 КАК Часов5Сводно
			|ПОМЕСТИТЬ ВТДанныеНарядаПоДням" + СтрИндексДня + "
			|ИЗ
			|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
			|ГДЕ
			|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
			|	И СдельныйНарядИсполнители.ПервыйВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ 
			|	СдельныйНарядИсполнители.Ссылка,
			|	СдельныйНарядИсполнители.НомерСтроки,
			|	СдельныйНарядИсполнители.Сотрудник,
			//vvv
			|	СдельныйНарядИсполнители.КоэффициентСтажа КАК КоэффициентСтажа,
			|	СдельныйНарядИсполнители.КТУ КАК КТУ,
			|	СдельныйНарядИсполнители.Тариф КАК Тариф,
			|	СдельныйНарядИсполнители.Автомобиль КАК Автомобиль,
			//
			|	СдельныйНарядИсполнители.Сотрудник.Наименование,
			|	СдельныйНарядИсполнители.Сотрудник.Физлицо,
			|	СдельныйНарядИсполнители.СуммаКНачислениюРегл,
			|	СдельныйНарядИсполнители.ОтработаноЧасов,
			|	СдельныйНарядИсполнители.ОтработаноДней,
			|	СдельныйНарядИсполнители.ВторойЧасов"+СтрИндексДня+",
			|	СдельныйНарядИсполнители.ВторойВидВремени"+СтрИндексДня+",
			|	"+СтрИндексДня+",
			|	ДОБАВИТЬКДАТЕ(&ПредыдущаяДата, ДЕНЬ, "+СтрИндексДня+"),
			|	СдельныйНарядИсполнители.ВидВремени1,
			|	СдельныйНарядИсполнители.ВидВремени2,
			|	СдельныйНарядИсполнители.ВидВремени3,
			|	СдельныйНарядИсполнители.ВидВремени4,
			|	СдельныйНарядИсполнители.ВидВремени5,
			|	СдельныйНарядИсполнители.Дней1,
			|	СдельныйНарядИсполнители.Дней2,
			|	СдельныйНарядИсполнители.Дней3,
			|	СдельныйНарядИсполнители.Дней4,
			|	СдельныйНарядИсполнители.Дней5,
			|	СдельныйНарядИсполнители.Часов1,
			|	СдельныйНарядИсполнители.Часов2,
			|	СдельныйНарядИсполнители.Часов3,
			|	СдельныйНарядИсполнители.Часов4,
			|	СдельныйНарядИсполнители.Часов5
			|ИЗ
			|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
			|ГДЕ
			|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
			|	И СдельныйНарядИсполнители.ВторойВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ 
			|	СдельныйНарядИсполнители.Ссылка,
			|	СдельныйНарядИсполнители.НомерСтроки,
			|	СдельныйНарядИсполнители.Сотрудник,
			//vvv
			|	СдельныйНарядИсполнители.КоэффициентСтажа КАК КоэффициентСтажа,
			|	СдельныйНарядИсполнители.КТУ КАК КТУ,
			|	СдельныйНарядИсполнители.Тариф КАК Тариф,
			|	СдельныйНарядИсполнители.Автомобиль КАК Автомобиль,
			//
			|	СдельныйНарядИсполнители.Сотрудник.Наименование,
			|	СдельныйНарядИсполнители.Сотрудник.Физлицо,
			|	СдельныйНарядИсполнители.СуммаКНачислениюРегл,
			|	СдельныйНарядИсполнители.ОтработаноЧасов,
			|	СдельныйНарядИсполнители.ОтработаноДней,
			|	СдельныйНарядИсполнители.ТретийЧасов"+СтрИндексДня+",
			|	СдельныйНарядИсполнители.ТретийВидВремени"+СтрИндексДня+",
			|	"+СтрИндексДня+",
			|	ДОБАВИТЬКДАТЕ(&ПредыдущаяДата, ДЕНЬ, "+СтрИндексДня+"),
			|	СдельныйНарядИсполнители.ВидВремени1,
			|	СдельныйНарядИсполнители.ВидВремени2,
			|	СдельныйНарядИсполнители.ВидВремени3,
			|	СдельныйНарядИсполнители.ВидВремени4,
			|	СдельныйНарядИсполнители.ВидВремени5,
			|	СдельныйНарядИсполнители.Дней1,
			|	СдельныйНарядИсполнители.Дней2,
			|	СдельныйНарядИсполнители.Дней3,
			|	СдельныйНарядИсполнители.Дней4,
			|	СдельныйНарядИсполнители.Дней5,
			|	СдельныйНарядИсполнители.Часов1,
			|	СдельныйНарядИсполнители.Часов2,
			|	СдельныйНарядИсполнители.Часов3,
			|	СдельныйНарядИсполнители.Часов4,
			|	СдельныйНарядИсполнители.Часов5
			|ИЗ
			|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
			|ГДЕ
			|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
			|	И СдельныйНарядИсполнители.ТретийВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|	
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ 
			|	СдельныйНарядИсполнители.Ссылка,
			|	СдельныйНарядИсполнители.НомерСтроки,
			|	СдельныйНарядИсполнители.Сотрудник,
			//vvv
			|	СдельныйНарядИсполнители.КоэффициентСтажа КАК КоэффициентСтажа,
			|	СдельныйНарядИсполнители.КТУ КАК КТУ,
			|	СдельныйНарядИсполнители.Тариф КАК Тариф,
			|	СдельныйНарядИсполнители.Автомобиль КАК Автомобиль,
			//
			|	СдельныйНарядИсполнители.Сотрудник.Наименование,
			|	СдельныйНарядИсполнители.Сотрудник.Физлицо,
			|	СдельныйНарядИсполнители.СуммаКНачислениюРегл,
			|	СдельныйНарядИсполнители.ОтработаноЧасов,
			|	СдельныйНарядИсполнители.ОтработаноДней,
			|	0,
			|	ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка),
			|	"+СтрИндексДня+",
			|	ДОБАВИТЬКДАТЕ(&ПредыдущаяДата, ДЕНЬ, "+СтрИндексДня+"),
			|	СдельныйНарядИсполнители.ВидВремени1,
			|	СдельныйНарядИсполнители.ВидВремени2,
			|	СдельныйНарядИсполнители.ВидВремени3,
			|	СдельныйНарядИсполнители.ВидВремени4,
			|	СдельныйНарядИсполнители.ВидВремени5,
			|	СдельныйНарядИсполнители.Дней1,
			|	СдельныйНарядИсполнители.Дней2,
			|	СдельныйНарядИсполнители.Дней3,
			|	СдельныйНарядИсполнители.Дней4,
			|	СдельныйНарядИсполнители.Дней5,
			|	СдельныйНарядИсполнители.Часов1,
			|	СдельныйНарядИсполнители.Часов2,
			|	СдельныйНарядИсполнители.Часов3,
			|	СдельныйНарядИсполнители.Часов4,
			|	СдельныйНарядИсполнители.Часов5
			|ИЗ
			|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
			|ГДЕ
			|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка  
			|	И СдельныйНарядИсполнители.ПервыйВидВремени"+СтрИндексДня+" = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|	И СдельныйНарядИсполнители.ВторойВидВремени"+СтрИндексДня+" = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|	И СдельныйНарядИсполнители.ТретийВидВремени"+СтрИндексДня+" = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|	
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник";
			Запрос.Выполнить();
			
			Если ИндексДня = ИндексНачальногоДня Тогда
				ТекстЗапроса = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДанныеНарядаПоДням.Ссылка,
				|	ДанныеНарядаПоДням.НомерСтроки,
				|	ДанныеНарядаПоДням.Сотрудник,
				//vvv
				|	ДанныеНарядаПоДням.КоэффициентСтажа КАК КоэффициентСтажа,
				|	ДанныеНарядаПоДням.КТУ КАК КТУ,
				|	ДанныеНарядаПоДням.Тариф КАК Тариф,
				|	ДанныеНарядаПоДням.Автомобиль КАК Автомобиль,
				//
				|	ДанныеНарядаПоДням.СотрудникНаименование,
				|	ДанныеНарядаПоДням.Физлицо,
				|	ДанныеНарядаПоДням.СуммаКНачислению,
				|	ДанныеНарядаПоДням.ОтработаноЧасов,
				|	ДанныеНарядаПоДням.ОтработаноДней,
				|	ДанныеНарядаПоДням.Часов,
				|	ДанныеНарядаПоДням.ВидВремени,
				|	ДанныеНарядаПоДням.ИндексДня,
				|	ДанныеНарядаПоДням.ДатаДня,
				|	ДанныеНарядаПоДням.ВидВремени1Сводно,
				|	ДанныеНарядаПоДням.ВидВремени2Сводно,
				|	ДанныеНарядаПоДням.ВидВремени3Сводно,
				|	ДанныеНарядаПоДням.ВидВремени4Сводно,
				|	ДанныеНарядаПоДням.ВидВремени5Сводно,
				|	ДанныеНарядаПоДням.Дней1Сводно,
				|	ДанныеНарядаПоДням.Дней2Сводно,
				|	ДанныеНарядаПоДням.Дней3Сводно,
				|	ДанныеНарядаПоДням.Дней4Сводно,
				|	ДанныеНарядаПоДням.Дней5Сводно,
				|	ДанныеНарядаПоДням.Часов1Сводно,
				|	ДанныеНарядаПоДням.Часов2Сводно,
				|	ДанныеНарядаПоДням.Часов3Сводно,
				|	ДанныеНарядаПоДням.Часов4Сводно,
				|	ДанныеНарядаПоДням.Часов5Сводно
				|ПОМЕСТИТЬ ВТДанныеНарядаПоДням
				|ИЗ
				|	ВТДанныеНарядаПоДням"+СтрИндексДня+" КАК ДанныеНарядаПоДням
				|";
			Иначе 	
				ТекстЗапроса = ТекстЗапроса + 
				"ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДанныеНарядаПоДням.Ссылка,
				|	ДанныеНарядаПоДням.НомерСтроки,
				|	ДанныеНарядаПоДням.Сотрудник,
				//vvv
				|	ДанныеНарядаПоДням.КоэффициентСтажа КАК КоэффициентСтажа,
				|	ДанныеНарядаПоДням.КТУ КАК КТУ,
				|	ДанныеНарядаПоДням.Тариф КАК Тариф,
				|	ДанныеНарядаПоДням.Автомобиль КАК Автомобиль,
				//
				|	ДанныеНарядаПоДням.СотрудникНаименование,
				|	ДанныеНарядаПоДням.Физлицо,
				|	ДанныеНарядаПоДням.СуммаКНачислению,
				|	ДанныеНарядаПоДням.ОтработаноЧасов,
				|	ДанныеНарядаПоДням.ОтработаноДней,
				|	ДанныеНарядаПоДням.Часов,
				|	ДанныеНарядаПоДням.ВидВремени,
				|	ДанныеНарядаПоДням.ИндексДня,
				|	ДанныеНарядаПоДням.ДатаДня,
				|	ДанныеНарядаПоДням.ВидВремени1Сводно,
				|	ДанныеНарядаПоДням.ВидВремени2Сводно,
				|	ДанныеНарядаПоДням.ВидВремени3Сводно,
				|	ДанныеНарядаПоДням.ВидВремени4Сводно,
				|	ДанныеНарядаПоДням.ВидВремени5Сводно,
				|	ДанныеНарядаПоДням.Дней1Сводно,
				|	ДанныеНарядаПоДням.Дней2Сводно,
				|	ДанныеНарядаПоДням.Дней3Сводно,
				|	ДанныеНарядаПоДням.Дней4Сводно,
				|	ДанныеНарядаПоДням.Дней5Сводно,
				|	ДанныеНарядаПоДням.Часов1Сводно,
				|	ДанныеНарядаПоДням.Часов2Сводно,
				|	ДанныеНарядаПоДням.Часов3Сводно,
				|	ДанныеНарядаПоДням.Часов4Сводно,
				|	ДанныеНарядаПоДням.Часов5Сводно
				|ИЗ
				|	ВТДанныеНарядаПоДням"+СтрИндексДня+" КАК ДанныеНарядаПоДням
				|";
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса + 
	"ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СдельныйНарядИсполнители.Ссылка,
	|	СдельныйНарядИсполнители.НомерСтроки,
	|	СдельныйНарядИсполнители.Сотрудник КАК Сотрудник,
	|	СдельныйНарядИсполнители.СотрудникНаименование,
	//vvv
	|	СдельныйНарядИсполнители.КоэффициентСтажа,
	|	СдельныйНарядИсполнители.КТУ,
	|	СдельныйНарядИсполнители.Тариф КАК Тариф,
	|	СдельныйНарядИсполнители.Автомобиль КАК Автомобиль,
	//
	|	СдельныйНарядИсполнители.Физлицо,
	|	СдельныйНарядИсполнители.СуммаКНачислению,
	|	СдельныйНарядИсполнители.ОтработаноЧасов,
	|	СдельныйНарядИсполнители.ОтработаноДней,
	|	СдельныйНарядИсполнители.Часов,
	|	СдельныйНарядИсполнители.ВидВремени,
	|	СдельныйНарядИсполнители.ИндексДня КАК ИндексДня,
	|	СдельныйНарядИсполнители.ДатаДня,
	|	СдельныйНарядИсполнители.ВидВремени1Сводно,
	|	СдельныйНарядИсполнители.ВидВремени2Сводно,
	|	СдельныйНарядИсполнители.ВидВремени3Сводно,
	|	СдельныйНарядИсполнители.ВидВремени4Сводно,
	|	СдельныйНарядИсполнители.ВидВремени5Сводно,
	|	СдельныйНарядИсполнители.Дней1Сводно,
	|	СдельныйНарядИсполнители.Дней2Сводно,
	|	СдельныйНарядИсполнители.Дней3Сводно,
	|	СдельныйНарядИсполнители.Дней4Сводно,
	|	СдельныйНарядИсполнители.Дней5Сводно,
	|	СдельныйНарядИсполнители.Часов1Сводно,
	|	СдельныйНарядИсполнители.Часов2Сводно,
	|	СдельныйНарядИсполнители.Часов3Сводно,
	|	СдельныйНарядИсполнители.Часов4Сводно,
	|	СдельныйНарядИсполнители.Часов5Сводно,
	|	ВЫБОР
	|		КОГДА Работники.ПериодЗавершения <= &ДатаАктуальности
	|				И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Работники.ГрафикРаботыЗавершения
	|		ИНАЧЕ Работники.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ПлановыеНачисления.ПериодЗавершения <= &ДатаАктуальности
	|					И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ПлановыеНачисления.ВидРасчетаЗавершения
	|			ИНАЧЕ ПлановыеНачисления.ВидРасчета
	|		КОНЕЦ, ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата)) КАК ВидРасчета,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ПлановыеНачисления.ПериодЗавершения <= &ДатаАктуальности
	|					И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ПлановыеНачисления.ВидРасчетаЗавершения.ВидНачисленияПоСт255НК
	|			ИНАЧЕ ПлановыеНачисления.ВидРасчета.ВидНачисленияПоСт255НК
	|		КОНЕЦ, ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаПоСт255НК.СдельноПремиальная)) КАК ВидНачисленияНУ,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ПлановыеНачисления.ПериодЗавершения <= &ДатаАктуальности
	|					И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ПлановыеНачисления.ВидРасчетаЗавершения.КодДоходаЕСН
	|			ИНАЧЕ ПлановыеНачисления.ВидРасчета.КодДоходаЕСН
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ОблагаетсяПолностью)) КАК КодПоЕСН,
	|	ВЫБОР
	|		КОГДА СостояниеСотрудников.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СотрудникЧислитсяВОрганизации,
	|	ВЫБОР
	|		КОГДА СдельныйНарядИсполнители.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ЛОЖЬ КАК ЗаписатьПустоеЗначение
	|ПОМЕСТИТЬ ВТИсполнителиРегл
	|ИЗ
	|	ВТДанныеНарядаПоДням КАК СдельныйНарядИсполнители
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ДатаАктуальности,
	|				Сотрудник В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СдельныйНарядИсполнители.Сотрудник
	|					ИЗ
	|						ВТДанныеНарядаПоДням КАК СдельныйНарядИсполнители)) КАК Работники
	|		ПО СдельныйНарядИсполнители.Сотрудник = Работники.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|				&ДатаАктуальности,
	|				Сотрудник В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СдельныйНарядИсполнители.Сотрудник КАК Сотрудник
	|					ИЗ
	|						ВТДанныеНарядаПоДням КАК СдельныйНарядИсполнители)) КАК ПлановыеНачисления
	|		ПО (ВЫБОР
	|				КОГДА ПлановыеНачисления.ПериодЗавершения <= &ДатаАктуальности
	|						И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ПлановыеНачисления.ВидРасчетаЗавершения.СпособРасчета
	|				ИНАЧЕ ПлановыеНачисления.ВидРасчета.СпособРасчета
	|			КОНЕЦ В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке)))
	|			И СдельныйНарядИсполнители.Сотрудник = ПлановыеНачисления.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СостоянияСотрудников.Сотрудник КАК Сотрудник
	|		ИЗ
	|			(ВЫБРАТЬ
	|				РаботникиОрганизаций.Сотрудник КАК Сотрудник
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ГДЕ
	|				РаботникиОрганизаций.Период > &ДатаАктуальности
	|				И РаботникиОрганизаций.Период <= КОНЕЦПЕРИОДА(&ДатаАктуальности, МЕСЯЦ)
	|				И РаботникиОрганизаций.Сотрудник В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СдельныйНарядИсполнители.Сотрудник
	|						ИЗ
	|							ВТДанныеНарядаПоДням КАК СдельныйНарядИсполнители)
	|				И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				И &ДокументВведенЗаПериод
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				РаботникиОрганизаций.Сотрудник
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|						&ДатаАктуальности,
	|						Сотрудник В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								СдельныйНарядИсполнители.Сотрудник
	|							ИЗ
	|								ВТДанныеНарядаПоДням КАК СдельныйНарядИсполнители)) КАК РаботникиОрганизаций
	|			ГДЕ
	|				РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК СостоянияСотрудников
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СостоянияСотрудников.Сотрудник) КАК СостояниеСотрудников
	|		ПО СдельныйНарядИсполнители.Сотрудник = СостояниеСотрудников.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ИндексДня";

	
	Запрос.Выполнить();
	
	Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод
		Или Не ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя 
		Или ВыборкаПоШапкеДокумента.УчитыватьВремяТолькоПриРасчете Тогда
		ВыборкаДанныхПоГрафику = Неопределено
	Иначе 
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДатыРегистра.Сотрудник,
		|	ДатыРегистра.ДатаДня
		|ПОМЕСТИТЬ ВТДниОплатыПоСдельномуЗаработку
		|ИЗ
		|	(ВЫБРАТЬ
		|		СдельныйНарядИсполнители.Сотрудник КАК Сотрудник,
		|		СдельныйНарядИсполнители.ДатаДня КАК ДатаДня,
		|		МАКСИМУМ(Регистр.Период) КАК Период,
		|		Регистр.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение
		|	ИЗ
		|		ВТДанныеНарядаПоДням КАК СдельныйНарядИсполнители
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Регистр
		|			ПО СдельныйНарядИсполнители.Сотрудник = Регистр.Сотрудник
		|				И СдельныйНарядИсполнители.ДатаДня >= Регистр.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СдельныйНарядИсполнители.Сотрудник,
		|		СдельныйНарядИсполнители.ДатаДня,
		|		Регистр.ВидРасчетаИзмерение) КАК ДатыРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Начисления
		|		ПО ДатыРегистра.Сотрудник = Начисления.Сотрудник
		|			И ДатыРегистра.Период = Начисления.Период
		|			И ДатыРегистра.ВидРасчетаИзмерение = Начисления.ВидРасчетаИзмерение
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Начисления.ПериодЗавершения <= ДатыРегистра.ДатаДня
		|					И Начисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА Начисления.ВидРасчетаЗавершения.СпособРасчета
		|			ИНАЧЕ Начисления.ВидРасчета.СпособРасчета
		|		КОНЕЦ В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СдельныйНарядИсполнители.Сотрудник КАК Сотрудник,
		|	СдельныйНарядИсполнители.ДатаДня,
		|	СдельныйНарядИсполнители.ГрафикРаботы
		|ПОМЕСТИТЬ ВТДниПовременнойОплаты
		|ИЗ
		|	ВТИсполнителиРегл КАК СдельныйНарядИсполнители
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниОплатыПоСдельномуЗаработку КАК ДниОплатыПоСдельномуЗаработку
		|		ПО СдельныйНарядИсполнители.Сотрудник = ДниОплатыПоСдельномуЗаработку.Сотрудник
		|			И СдельныйНарядИсполнители.ДатаДня = ДниОплатыПоСдельномуЗаработку.ДатаДня
		|ГДЕ
		|	СдельныйНарядИсполнители.СотрудникЧислитсяВОрганизации
		|	И (НЕ СдельныйНарядИсполнители.ОшибкаНеСоответствиеСотрудникаИОрганизации)
		|	И СдельныйНарядИсполнители.ГрафикРаботы ЕСТЬ НЕ NULL 
		|	И ВЫБОР
		|			КОГДА ДниОплатыПоСдельномуЗаработку.Сотрудник ЕСТЬ NULL 
		|					И СдельныйНарядИсполнители.ИндексДня <> 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсполнителиРегл.Сотрудник КАК ГрафикРаботы,
		|	ЛОЖЬ КАК План,
		|	&Месяц КАК Месяц,
		|	ЕСТЬNULL(ИндивидуальныйГрафик.ВидУчетаВремени, ГрафикиРаботы.ВидУчетаВремени) КАК ВидУчетаВремени,
		|	ЕСТЬNULL(ИндивидуальныйГрафик.Дата, ГрафикиРаботы.Дата) КАК Дата,
		|	ЕСТЬNULL(ИндивидуальныйГрафик.ОсновноеЗначение, ГрафикиРаботы.ОсновноеЗначение) КАК ОсновноеЗначениеПолное,
		|	ЕСТЬNULL(ИндивидуальныйГрафик.ДополнительноеЗначение, ГрафикиРаботы.ДополнительноеЗначение) КАК ДополнительноеЗначениеПолное,
		|	ЗНАЧЕНИЕ(Документ.СдельныйНаряд.ПустаяСсылка) КАК Документ
		|ИЗ
		|	ВТДниПовременнойОплаты КАК ИсполнителиРегл
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ИндивидуальныйГрафик
		|		ПО (ИндивидуальныйГрафик.Месяц = &Месяц)
		|			И ИсполнителиРегл.ДатаДня = ИндивидуальныйГрафик.Дата
		|			И ИсполнителиРегл.Сотрудник = ИндивидуальныйГрафик.ГрафикРаботы
		|			И (ИндивидуальныйГрафик.План)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|		ПО (ГрафикиРаботы.Месяц = &Месяц)
		|			И ИсполнителиРегл.ДатаДня = ГрафикиРаботы.Дата
		|			И ИсполнителиРегл.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы
		|			И (ГрафикиРаботы.План)
		|ГДЕ
		|	ЕСТЬNULL(ИндивидуальныйГрафик.ВидУчетаВремени, ГрафикиРаботы.ВидУчетаВремени) ЕСТЬ НЕ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГрафикРаботы";
		
		ВыборкаДанныхПоГрафику =  Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсполнителиРегл.Ссылка,
	|	ИсполнителиРегл.НомерСтроки КАК НомерСтроки,
	|	ИсполнителиРегл.Сотрудник КАК Сотрудник,
	|	ИсполнителиРегл.СотрудникНаименование,
	//vvv
	|	ИсполнителиРегл.КоэффициентСтажа,
	|	ИсполнителиРегл.КТУ,
	|	ИсполнителиРегл.Тариф КАК Тариф,
	|	ИсполнителиРегл.Автомобиль КАК Автомобиль,
	//
	|	ИсполнителиРегл.ФизЛицо,
	|	ИсполнителиРегл.СуммаКНачислению,
	|	ИсполнителиРегл.ОтработаноЧасов,
	|	ИсполнителиРегл.ОтработаноДней,
	|	ИсполнителиРегл.Часов,
	|	ИсполнителиРегл.ВидВремени,
	|	ИсполнителиРегл.ИндексДня КАК ИндексДня,
	|	ИсполнителиРегл.ВидВремени1Сводно,
	|	ИсполнителиРегл.ВидВремени2Сводно,
	|	ИсполнителиРегл.ВидВремени3Сводно,
	|	ИсполнителиРегл.ВидВремени4Сводно,
	|	ИсполнителиРегл.ВидВремени5Сводно,
	|	ИсполнителиРегл.Дней1Сводно,
	|	ИсполнителиРегл.Дней2Сводно,
	|	ИсполнителиРегл.Дней3Сводно,
	|	ИсполнителиРегл.Дней4Сводно,
	|	ИсполнителиРегл.Дней5Сводно,
	|	ИсполнителиРегл.Часов1Сводно,
	|	ИсполнителиРегл.Часов2Сводно,
	|	ИсполнителиРегл.Часов3Сводно,
	|	ИсполнителиРегл.Часов4Сводно,
	|	ИсполнителиРегл.Часов5Сводно,
	|	ИсполнителиРегл.ВидРасчета,
	|	ИсполнителиРегл.ВидНачисленияНУ,
	|	ИсполнителиРегл.СотрудникЧислитсяВОрганизации,
	|	ИсполнителиРегл.ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ИсполнителиРегл.ЗаписатьПустоеЗначение
	|ИЗ
	|	ВТИсполнителиРегл КАК ИсполнителиРегл
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Сотрудник,
	|	ИндексДня";
	
	Возврат Запрос.Выполнить();

	
КонецФункции // СформироватьЗапросПоИсполнителиРегл()

Функция СформироватьЗапросПоВыработка(Режим)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	// Описание текста запроса:
	// 
	// 1. Выборка "СдельныйНарядВыработка": 
	//		Выбираются строки документа.  
	//
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СдельныйНарядВыработка.НомерСтроки КАК НомерСтроки,
	|	СдельныйНарядВыработка.ТехнологическаяОперация,
	|	СдельныйНарядВыработка.НоменклатурнаяГруппа,
	|	СдельныйНарядВыработка.СтатьяЗатрат,
	|	СдельныйНарядВыработка.ПодразделениеОрганизации
	|ИЗ
	|	Документ.СдельныйНаряд.Выработка КАК СдельныйНарядВыработка
	|ГДЕ
	|	СдельныйНарядВыработка.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоВыработка()

// Формирует запрос по таблице "Выработка" документа
//
// Параметры: 
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса. В запросе данные документа дополняются значениями
//	проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоВыработкаРегл(Режим)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ЭтоЕНВД",		Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД);
	
	// Описание текста запроса:
	// 
	// 1. Выборка "СдельныйНарядВыработка": 
	//		Выбираются строки документа.  
	// 2. Выборки "ВидСубконтоДт i": 
	//		По плану счетов Хозрасчетный определяем тип 
	//      значения субконто, требуемых счету бух. учета 
	//
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СдельныйНарядВыработка.НомерСтроки КАК НомерСтроки,
	|	СдельныйНарядВыработка.ТехнологическаяОперация,
	|	СдельныйНарядВыработка.НоменклатурнаяГруппа,
	|	СдельныйНарядВыработка.СтатьяЗатрат,
	|	СдельныйНарядВыработка.СуммаРегл КАК СуммаЗаРаботу,
	|	СдельныйНарядВыработка.СчетЗатрат,
	|	СдельныйНарядВыработка.СчетЗатратНУ,
	|	СдельныйНарядВыработка.ОбъектСтроительства,
	|	СдельныйНарядВыработка.Продукция,
	|	ВидСубконтоДт1.ВидСубконто КАК ВидСубконто1,
	|	ВидСубконтоДт2.ВидСубконто КАК ВидСубконто2,
	|	ВидСубконтоДт3.ВидСубконто КАК ВидСубконто3,
	|	ВидСубконтоДтНУ1.ВидСубконто КАК ВидСубконтоНУ1,
	|	ВидСубконтоДтНУ2.ВидСубконто КАК ВидСубконтоНУ2,
	|	ВидСубконтоДтНУ3.ВидСубконто КАК ВидСубконтоНУ3,
	//vvv
	|	ВидСубконтоДт4.ВидСубконто КАК ВидСубконто4,
	|	СдельныйНарядВыработка.СубконтоДт1,
	|	СдельныйНарядВыработка.СубконтоДт2,
	|	СдельныйНарядВыработка.СубконтоДт3,
	|	СдельныйНарядВыработка.СубконтоДт4,
	//
	|	ВЫБОР
	|		КОГДА СдельныйНарядВыработка.СтатьяЗатрат.ОтнесениеРасходовКДеятельностиЕНВД = &ЭтоЕНВД
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОблагаетсяЕНВД,
	|	СдельныйНарядВыработка.ОтражениеВУСН,
	|	СдельныйНарядВыработка.ПодразделениеОрганизации
	|ИЗ
	|	Документ.СдельныйНаряд.Выработка КАК СдельныйНарядВыработка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт1
	|		ПО СдельныйНарядВыработка.СчетЗатрат = ВидСубконтоДт1.Ссылка
	|			И (ВидСубконтоДт1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт2
	|		ПО СдельныйНарядВыработка.СчетЗатрат = ВидСубконтоДт2.Ссылка
	|			И (ВидСубконтоДт2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт3
	|		ПО СдельныйНарядВыработка.СчетЗатрат = ВидСубконтоДт3.Ссылка
	|			И (ВидСубконтоДт3.НомерСтроки = 3)
	//vvv
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт4
	|		ПО СдельныйНарядВыработка.СчетЗатрат = ВидСубконтоДт4.Ссылка
	|			И (ВидСубконтоДт4.НомерСтроки = 4)
	//
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидСубконтоДтНУ1
	|		ПО СдельныйНарядВыработка.СчетЗатратНУ = ВидСубконтоДтНУ1.Ссылка
	|			И (ВидСубконтоДтНУ1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидСубконтоДтНУ2
	|		ПО СдельныйНарядВыработка.СчетЗатратНУ = ВидСубконтоДтНУ2.Ссылка
	|			И (ВидСубконтоДтНУ2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидСубконтоДтНУ3
	|		ПО СдельныйНарядВыработка.СчетЗатратНУ = ВидСубконтоДтНУ3.Ссылка
	|			И (ВидСубконтоДтНУ3.НомерСтроки = 3)
	|ГДЕ
	|	СдельныйНарядВыработка.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоВыработкаРегл()

Функция СформироватьЗапросПоНачислениям()

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачалаСобытия", ?(СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень,ДатаНачалаПериода,ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаОкончанияСобытия", ?(СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень,ДатаНачалаПериода,КонецМесяца(ПериодРегистрации)));
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	//Составим список сотрудников документа
	Запрос.Текст = "ВЫБРАТЬ
	|	СдельныйНарядИсполнители.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ Сотрудники
	|ИЗ
	|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	|ГДЕ
	|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	
	Запрос.Выполнить();
	
	// Выподним запрос по начислениям
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачалоПериода.Сотрудник,
	|	НачалоПериода.ВидРасчета,
	|	НачалоПериода.ПериодДействияНачало,
	|	ЕСТЬNULL(КонецПериода.ПериодДействияКонец, &ДатаОкончанияСобытия) КАК ПериодДействияКонец
	|ИЗ
	|	(ВЫБРАТЬ
	|		СрезПервых.Сотрудник КАК Сотрудник,
	|		СрезПервых.Период КАК ПериодДействияНачало,
	|		СрезПервых.ВидРасчета КАК ВидРасчета
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПлановыеНачисления.Сотрудник КАК Сотрудник,
	|			ПлановыеНачисления.Период КАК Период,
	|			ПлановыеНачисления.ВидРасчета КАК ВидРасчета,
	|			ПлановыеНачисления.ПериодЗавершения КАК ПериодЗавершения,
	|			ПлановыеНачисления.ВидРасчетаЗавершения КАК ВидРасчетаЗавершения
	|		ИЗ
	|			РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПервых(
	|					&ДатаНачалаСобытия,
	|					Сотрудник В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СдельныйНарядИсполнители.Сотрудник
	|						ИЗ
	|							Сотрудники КАК СдельныйНарядИсполнители)) КАК ПлановыеНачисления
	|		ГДЕ
	|			ПлановыеНачисления.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке))
	|			И ПлановыеНачисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)) КАК СрезПервых
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ПлановыеНачисления.Сотрудник КАК Сотрудник
	|			ИЗ
	|				РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|						&ДатаНачалаСобытия,
	|						Сотрудник В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								СдельныйНарядИсполнители.Сотрудник
	|							ИЗ
	|								Сотрудники КАК СдельныйНарядИсполнители)) КАК ПлановыеНачисления
	|			ГДЕ
	|				ПлановыеНачисления.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке))
	|				И ПлановыеНачисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)) КАК СрезПоследних
	|			ПО СрезПервых.Сотрудник = СрезПоследних.Сотрудник
	|	ГДЕ
	|		СрезПоследних.Сотрудник ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПлановыеНачисления.Сотрудник,
	|		ВЫБОР
	|			КОГДА ПлановыеНачисления.Период >= &ДатаНачалаСобытия
	|				ТОГДА ПлановыеНачисления.Период
	|			ИНАЧЕ &ДатаНачалаСобытия
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					И ПлановыеНачисления.ПериодЗавершения < &ДатаОкончанияСобытия
	|				ТОГДА ПлановыеНачисления.ВидРасчетаЗавершения
	|			ИНАЧЕ ПлановыеНачисления.ВидРасчета
	|		КОНЕЦ
	|	ИЗ
	|		РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|				&ДатаНачалаСобытия,
	|				Сотрудник В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СдельныйНарядИсполнители.Сотрудник
	|					ИЗ
	|						Сотрудники КАК СдельныйНарядИсполнители)) КАК ПлановыеНачисления
	|	ГДЕ
	|		ПлановыеНачисления.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке))) КАК НачалоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПлановыеНачисления.Сотрудник КАК Сотрудник,
	|			ВЫБОР
	|				КОГДА ПлановыеНачисления.Период < &ДатаНачалаСобытия
	|						ИЛИ ПлановыеНачисления.Период > &ДатаОкончанияСобытия
	|					ТОГДА &ДатаОкончанияСобытия
	|				ИНАЧЕ ПлановыеНачисления.Период
	|			КОНЕЦ КАК ПериодДействияКонец
	|		ИЗ
	|			РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|					&ДатаОкончанияСобытия,
	|					Сотрудник В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СдельныйНарядИсполнители.Сотрудник
	|						ИЗ
	|							Сотрудники КАК СдельныйНарядИсполнители)) КАК ПлановыеНачисления
	|		ГДЕ
	|			ПлановыеНачисления.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке))
	|			И ПлановыеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)) КАК КонецПериода
	|		ПО НачалоПериода.Сотрудник = КонецПериода.Сотрудник";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // СформироватьЗапросПоНачислениям()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Исполнители" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса по работникам
//	Отказ						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиИсполнители(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ВыборкаПоРаботникиРегл, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Исполнители"": ";
	
	// Сотрудник
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя Тогда
		Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
			
			Для Сч = 1 По 5 Цикл
			
				Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["ВидВремени"+Сч+"Сводно"]) Тогда
					
					Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["Часов"+Сч+"Сводно"]) Тогда
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано значение отработанных часов!", Отказ, Заголовок);
					КонецЕсли; 
					
				ИначеЕсли ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["Часов"+Сч+"Сводно"]) 
					Или ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["Дней"+Сч+"Сводно"])Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано значение вида времени!", Отказ, Заголовок);
					
				КонецЕсли; 
			
			КонецЦикла;
			
		ИначеЕсли ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
			
			Если ВыборкаПоСтрокамДокумента.Часов = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано значение отработанных часов для вводимого дня!", Отказ, Заголовок);
			КонецЕсли;
			
		ИначеЕсли ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням 
			И Не РабочееВремяЗаполнено И ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидВремени) Тогда
			
			РабочееВремяЗаполнено = Истина;
			
		КонецЕсли; 
	КонецЕсли;
	
	ПроверитьЗаполнениеСтрокиИсполнителиРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиРегл, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации);
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиИсполнители()

Процедура ПроверитьЗаполнениеСтрокиИсполнителиРегл(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	Если ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если ВыборкаПоСтрокамДокумента.ЗаписатьПустоеЗначение Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
		""" табл. части ""Исполнители"": ";
		
		// Организация сотрудника должна совпадать с организацией документа
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
		КонецЕсли;
		
		// Проверка: ранее работник должен быть принят на работу
		Если НЕ ВыборкаПоСтрокамДокумента.СотрудникЧислитсяВОрганизации Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник не принят в организацию в данном периоде!", Отказ, Заголовок);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиИсполнителиРегл()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Выработка" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса по работникам
//	Отказ						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиВыработка(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	//vvv
	Если ВыборкаПоШапкеДокумента.НеОтражатьВБухгалтерскомУчете ТОгда
		Возврат;
	КонецЕсли;
	//
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Выработка"": ";
	
	// ТехнологическаяОперация
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ТехнологическаяОперация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрана технологическая операция!", Отказ, Заголовок);
	КонецЕсли;
	
	 //СтатьяЗатрат
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СтатьяЗатрат) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана статья затрат!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиВыработка()

Процедура ПроверитьЗаполнениеСтрокиВыработкаРегл(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	//vvv
	Если ВыборкаПоШапкеДокумента.НеОтражатьВБухгалтерскомУчете ТОгда
		Возврат;
	КонецЕсли;
	//
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Выработка"": ";
	
	// счета учета
	Если ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетЗатрат) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан счет бухгалтерского учета!", Отказ, Заголовок);
		КонецЕсли;
		
		//vvv комментируем
		//Если Не ВыборкаПоСтрокамДокумента.ОблагаетсяЕНВД И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетЗатратНУ) Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан счет налогового учета!", Отказ, Заголовок);
		//КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение организации!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиВыработкаРегл()

// Процедура формирования движения регистров
//
Процедура ДвиженияРегистров(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиУпр, ВыборкаПоРаботникиРегл, ТаблицаРаботРегл)
	
	// фактическая выработка работников
	ДвиженияФактическойВыработкиУпр(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиУпр);
	ДвиженияФактическойВыработкиРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиРегл);
	ДвиженияРегистровБУиНУРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиРегл, ТаблицаРаботРегл);
	
КонецПроцедуры // ДвиженияРегистров()

Процедура ДвиженияФактическойВыработкиУпр(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники)
	
	Если ВыборкаПоШапкеДокумента.ОтражатьВУправленческомУчете Тогда
		
		КоличествоДнейВПериодеРегистрации = День(КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
		МассивКоэффициентов = Новый Массив(КоличествоДнейВПериодеРегистрации);
		МассивРаспределенияНачисленнойСуммыПоДням = Новый Массив(КоличествоДнейВПериодеРегистрации);
		НаборДвижений = Движения.ФактическаяВыработкаРаботников;
		
		Пока ВыборкаПоРаботники.СледующийПоЗначениюПоля("Сотрудник") Цикл 
			
			Если ВыборкаПоРаботники.СуммаКНачислению <> 0 Тогда
				
				Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням 
					И ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя Тогда
					
					Для Сч = 0 По КоличествоДнейВПериодеРегистрации - 1 Цикл
					    МассивКоэффициентов[Сч] = 0
					КонецЦикла;
					Пока ВыборкаПоРаботники.СледующийПоЗначениюПоля("ИндексДня") Цикл
						МассивКоэффициентов[ВыборкаПоРаботники.ИндексДня - 1] = ВычислитьКоличествоЧасовЗаДень(ВыборкаПоРаботники);
					КонецЦикла;
					
					МассивРаспределенияНачисленнойСуммыПоДням = ОбщегоНазначения.РаспределитьПропорционально(ВыборкаПоРаботники.СуммаКНачислению, МассивКоэффициентов);
					
					Для ИндексДня = 1 По КоличествоДнейВПериодеРегистрации Цикл
						Если МассивРаспределенияНачисленнойСуммыПоДням[ИндексДня-1] <> 0 Тогда
							НоваяСтрока = НаборДвижений.Добавить();
							НоваяСтрока.ФизЛицо				= ВыборкаПоРаботники.ФизЛицо;
							
							НоваяСтрока.СпособВводаДанных	= ВыборкаПоШапкеДокумента.СпособВводаДанных;
							НоваяСтрока.Период				= Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ИндексДня);
							НоваяСтрока.Выработка			= МассивРаспределенияНачисленнойСуммыПоДням[ИндексДня-1];
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					
					НоваяСтрока = НаборДвижений.Добавить();
					НоваяСтрока.ФизЛицо				= ВыборкаПоРаботники.ФизЛицо;
					НоваяСтрока.Выработка			= ВыборкаПоРаботники.СуммаКНачислению;
					
					Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
						НоваяСтрока.Период			= ВыборкаПоШапкеДокумента.ДатаНачалаПериода;
					Иначе
						НоваяСтрока.Период			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
					КонецЕсли;
					
					Если НЕ ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя 
							И ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
						НоваяСтрока.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод	
					Иначе
						НоваяСтрока.СпособВводаДанных	= ВыборкаПоШапкеДокумента.СпособВводаДанных;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияФактическойВыработкиУпр()

Процедура ДвиженияФактическойВыработкиРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники)
	
	Если ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если ВидНаряда = Перечисления.ВидыНарядов.НарядПоГрафику тогда
		
			КоличествоДнейВПериодеРегистрации = День(КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
			МассивКоэффициентов = Новый Массив(КоличествоДнейВПериодеРегистрации);
			МассивРаспределенияНачисленнойСуммыПоДням = Новый Массив(КоличествоДнейВПериодеРегистрации);
			НаборДвижений = Движения.ФактическаяВыработкаРаботниковОрганизаций;
			
			Пока ВыборкаПоРаботники.СледующийПоЗначениюПоля("Сотрудник") Цикл 
				//vvv может быть несколько строк с разной выработкой по разным ставкам
				Пока ВыборкаПоРаботники.СледующийПоЗначениюПоля("НомерСтроки") Цикл
				//
				Если ВыборкаПоРаботники.СуммаКНачислению <> 0 Тогда
					//vvv
					//Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням
					//	И ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя Тогда
					//vvv
					Если (ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням
						И ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя)
						или ВыборкаПоШапкеДокумента.РаспределятьВыработкуПоДням  Тогда
					//	
						
						Для Сч = 0 По КоличествоДнейВПериодеРегистрации - 1 Цикл
						    МассивКоэффициентов[Сч] = 0
						КонецЦикла;
						Пока ВыборкаПоРаботники.СледующийПоЗначениюПоля("ИндексДня") Цикл
							МассивКоэффициентов[ВыборкаПоРаботники.ИндексДня - 1] = ВычислитьКоличествоЧасовЗаДень(ВыборкаПоРаботники);
						КонецЦикла; 
						
						МассивРаспределенияНачисленнойСуммыПоДням = ОбщегоНазначения.РаспределитьПропорционально(ВыборкаПоРаботники.СуммаКНачислению, МассивКоэффициентов);
						
						Для ИндексДня = 1 По КоличествоДнейВПериодеРегистрации Цикл
							Если МассивРаспределенияНачисленнойСуммыПоДням[ИндексДня-1] <> 0 Тогда
								НоваяСтрока = НаборДвижений.Добавить();
								НоваяСтрока.Сотрудник			= ВыборкаПоРаботники.Сотрудник;
								НоваяСтрока.Организация			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
								НоваяСтрока.СпособВводаДанных	= ВыборкаПоШапкеДокумента.СпособВводаДанных;
								//vvv комментируем
								//НоваяСтрока.Период				= Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ИндексДня);
								НоваяСтрока.СпособВводаДанных	= ?(ВыборкаПоШапкеДокумента.РаспределятьВыработкуПоДням,Перечисления.СпособыВводаДанныхОВремени.ПоДням,ВыборкаПоШапкеДокумента.СпособВводаДанных);
								НоваяСтрока.Период				= НачалоМесяца(ВыборкаПоШапкеДокумента.Дата);
								//
								НоваяСтрока.Выработка			= МассивРаспределенияНачисленнойСуммыПоДням[ИндексДня-1];
								//vvv
								НоваяСтрока.ПроцентПремии		= ВыборкаПоШапкеДокумента.РазмерПремии;
								НоваяСтрока.КоэффициентСтажа	= ВыборкаПоРаботники.КоэффициентСтажа;
								НоваяСтрока.КТУ	                = ВыборкаПоРаботники.КТУ;
								НоваяСтрока.Автомобиль = ВыборкаПоРаботники.Автомобиль;
								НоваяСтрока.Тариф = ВыборкаПоРаботники.Тариф;
								//нужен для сторно, т.к. при сторнировании меняется период начисления
								НоваяСтрока.Месяц				= Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ИндексДня);								
								//
							КонецЕсли;
						КонецЦикла;
						
					Иначе
						
						НоваяСтрока = НаборДвижений.Добавить();
						НоваяСтрока.Сотрудник			= ВыборкаПоРаботники.Сотрудник;
						НоваяСтрока.Организация			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
						НоваяСтрока.Выработка			= ВыборкаПоРаботники.СуммаКНачислению;
						//vvv
						НоваяСтрока.ПроцентПремии		= ВыборкаПоШапкеДокумента.РазмерПремии;
						НоваяСтрока.КоэффициентСтажа	= ВыборкаПоРаботники.КоэффициентСтажа;
						НоваяСтрока.КТУ	                = ВыборкаПоРаботники.КТУ;
						НоваяСтрока.Автомобиль = ВыборкаПоРаботники.Автомобиль;
						НоваяСтрока.Тариф = ВыборкаПоРаботники.Тариф;
						//нужен для сторно, т.к. при сторнировании меняется период начисления
						Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
							НоваяСтрока.Месяц			= НачалоМесяца(ВыборкаПоШапкеДокумента.ДатаНачалаПериода);
						Иначе
							НоваяСтрока.Месяц			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
						КонецЕсли;
						//
						//vvv комментируем
						//Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
						//	НоваяСтрока.Период			= ВыборкаПоШапкеДокумента.ДатаНачалаПериода;
						//Иначе
						//	НоваяСтрока.Период			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
						//КонецЕсли;
						НоваяСтрока.Период				= НачалоМесяца(ВыборкаПоШапкеДокумента.Дата);
						//
						
						Если НЕ ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя 
								И ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
							НоваяСтрока.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод	
						Иначе
							НоваяСтрока.СпособВводаДанных	= ВыборкаПоШапкеДокумента.СпособВводаДанных;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
			//vvv
			КонецЦикла;
			//
			КонецЦикла;
			
		Иначе
			
			НаборДвижений = Движения.ФактическаяВыработкаРаботниковОрганизацийСверхурочно;
			Пока ВыборкаПоРаботники.СледующийПоЗначениюПоля("Сотрудник") Цикл 
				Если ВыборкаПоРаботники.СуммаКНачислению <> 0 Тогда
					
                    НоваяСтрока = НаборДвижений.Добавить();
					НоваяСтрока.Сотрудник			= ВыборкаПоРаботники.Сотрудник;
					НоваяСтрока.Организация			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
					НоваяСтрока.Выработка			= ВыборкаПоРаботники.СуммаКНачислению;
					НоваяСтрока.Период				= ВыборкаПоШапкеДокумента.ДатаНачалаПериода;
					НоваяСтрока.ВидНаряда     	    = ВыборкаПоШапкеДокумента.ВидНаряда;
					НоваяСтрока.Коэффициент     	= ВыборкаПоШапкеДокумента.Коэффициент;
					НоваяСтрока.ОтработаноЧасов     = ВыборкаПоРаботники.ОтработаноЧасов;

				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияФактическойВыработкиРегл()

Процедура ДвиженияРегистровБУиНУРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, ТаблицаРабот)
	
	//vvv
	Если ВыборкаПоШапкеДокумента.НеОтражатьВБухгалтерскомУчете ТОгда
		Возврат;
	КонецЕсли;
	//
	Если ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям();
		
		СчетУчетаРасчетовСРаботниками = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		СчетУчетаРасчетовСРаботникамиНУ = ПланыСчетов.Налоговый.РасчетыСПерсоналомПоОплатеТруда;
		МассивСуммЗаРаботы = ТаблицаРабот.ВыгрузитьКолонку("СуммаЗаРаботу");
		ОстатокСуммЗаРаботы = ТаблицаРабот.ВыгрузитьКолонку("СуммаЗаРаботу");
		
		ВыборкаПоРаботники.Сбросить();
		Работников = ВыборкаПоРаботники.Количество();
		
		Сч = 0;
		//vvv
		//Пока ВыборкаПоРаботники.СледующийПоЗначениюПоля("Сотрудник") Цикл
		Пока ВыборкаПоРаботники.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		//
			Сч = Сч + 1;
			Если ВыборкаПоРаботники.СуммаКНачислению <> 0 Тогда
				
				МассивСуммКНачислению = ОбщегоНазначения.РаспределитьПропорционально(ВыборкаПоРаботники.СуммаКНачислению,МассивСуммЗаРаботы);
				
				Для каждого СтрокаТЗ Из ТаблицаРабот Цикл
					
					НомерУчета = ТаблицаРабот.Индекс(СтрокаТЗ);
					Если Сч = Работников Тогда
						Результат = ОстатокСуммЗаРаботы[НомерУчета];
					Иначе
						Результат = Мин(МассивСуммКНачислению[НомерУчета],ОстатокСуммЗаРаботы[НомерУчета]);
						ОстатокСуммЗаРаботы[НомерУчета] = ОстатокСуммЗаРаботы[НомерУчета] - Результат;
					КонецЕсли;
					
					СтрокаНабора = Движения.БУОсновныеНачисления.Добавить();
					
					// свойства
					СтрокаНабора.ПериодРегистрации			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
					Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
						СтрокаНабора.ПериодДействияНачало	= ВыборкаПоШапкеДокумента.ДатаНачалаПериода;
						СтрокаНабора.ПериодДействияКонец	= КонецДня(ВыборкаПоШапкеДокумента.ДатаНачалаПериода);
					Иначе //За весь месяц - ВЦелом и ПоДням и без регистрации времени 
						ПериодДействияНачало = ВыборкаПоШапкеДокумента.ПериодРегистрации;
						ПериодДействияКонец  = КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
						ВычислитьДатуНачалаИОкончания(ПериодДействияНачало, ПериодДействияКонец, ВыборкаПоНачислениям, ВыборкаПоРаботники.Сотрудник);
						СтрокаНабора.ПериодДействияНачало	= ПериодДействияНачало;
						СтрокаНабора.ПериодДействияКонец	= ПериодДействияКонец;
					КонецЕсли;
					СтрокаНабора.ВидРасчета					= ВыборкаПоРаботники.ВидРасчета;
					
					// Измерения
					СтрокаНабора.Сотрудник					= ВыборкаПоРаботники.Сотрудник;
					СтрокаНабора.Физлицо					= ВыборкаПоРаботники.Физлицо;
					СтрокаНабора.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
					
					// ресурсы
					СтрокаНабора.Результат					= Результат;
					
					// реквизиты
					СтрокаНабора.ГрафикРаботы				= ПолучитьГрафикСотрудникаНаДату(ВыборкаПоРаботники.Сотрудник, СтрокаНабора.ПериодДействияНачало);
					СтрокаНабора.ВидУчетаВремени			= Перечисления.ВидыУчетаВремени.ПоЧасам;
					СтрокаНабора.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
					//СтрокаНабора.ДокументОснование			= ВыборкаПоШапкеДокумента.Ссылка;
					
					// данные бухучета
					СтрокаНабора.СчетДт						= СтрокаТЗ.СчетЗатрат;
					СтрокаНабора.СчетКт						= СчетУчетаРасчетовСРаботниками;
					
					// субконто
					//vvv
					//Для СчСк = 1 По 3 Цикл
					Для СчСк = 1 По 4 Цикл
					//	
						
						ВидыСубконтоСк = СтрокаТЗ["ВидСубконто" + СчСк];
						
						Если ВидыСубконтоСк = NULL Тогда
							
						ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
							СтрокаНабора["СубконтоДт" + СчСк] = СтрокаТЗ.Продукция;
						ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
							СтрокаНабора["СубконтоДт" + СчСк] = СтрокаТЗ.СтатьяЗатрат;
						ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
							СтрокаНабора["СубконтоДт" + СчСк] = СтрокаТЗ.НоменклатурнаяГруппа;
						ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения Тогда
							СтрокаНабора["СубконтоДт" + СчСк] = СтрокаТЗ.ПодразделениеОрганизации;
						ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
							СтрокаНабора["СубконтоДт" + СчСк] = СтрокаТЗ.ОбъектСтроительства;
							СтрокаНабора["СубконтоДт" + (СчСк + 1)] = Перечисления.СпособыСтроительства.Хозспособ;
						КонецЕсли;
						
					КонецЦикла;
					//vvv
					Для СчСк = 1 По 4 Цикл										
						
						СтрокаНабора["СубконтоДт" + СчСк] = СтрокаТЗ["СубконтоДт" + СчСк];
						
					КонецЦикла;
					//
					
					СтрокаНабора.СубконтоКт1 = ВыборкаПоРаботники.Физлицо;
					
					// данные налоговых учетов (Налог на прибыль, УСН)
					//Если мУчетнаяПолитикаУСН Тогда
					//	СтрокаНабора.ОтражениеВУСН = СтрокаТЗ.ОтражениеВУСН;
					//ИначеЕсли Не СтрокаТЗ.ОблагаетсяЕНВД Тогда
						
						СтрокаНабора.СчетДтНУ = СтрокаТЗ.СчетЗатратНУ;
						СтрокаНабора.СчетКтНУ = СчетУчетаРасчетовСРаботникамиНУ;
						
						// субконто
						Для СчСк = 1 По 3 Цикл
							
							ВидыСубконтоСк = СтрокаТЗ["ВидСубконтоНУ" + СчСк];
							
							Если ВидыСубконтоСк = NULL Тогда
								
							ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
								СтрокаНабора["СубконтоДтНУ" + СчСк] = СтрокаТЗ.Продукция;
							ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
								СтрокаНабора["СубконтоДтНУ" + СчСк] = СтрокаТЗ.СтатьяЗатрат;
							ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
								СтрокаНабора["СубконтоДтНУ" + СчСк] = СтрокаТЗ.НоменклатурнаяГруппа;
							ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения Тогда
								СтрокаНабора["СубконтоДтНУ" + СчСк] = СтрокаТЗ.ПодразделениеОрганизации;
							ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
								СтрокаНабора["СубконтоДтНУ" + СчСк] = СтрокаТЗ.ОбъектСтроительства;
								СтрокаНабора["СубконтоДтНУ" + (СчСк + 1)] = Перечисления.СпособыСтроительства.Хозспособ;
							КонецЕсли;
							
						КонецЦикла;
						
						СтрокаНабора.СубконтоКтНУ1 = ВыборкаПоРаботники.Физлицо;
						СтрокаНабора.СубконтоКтНУ2 = ВыборкаПоРаботники.ВидНачисленияНУ;
					//	
					//КонецЕсли;
					
					// данные учета для целей исчисления ЕСН
					
					//СтрокаНабора = Движения.ЕСНОсновныеНачисления.Добавить(); // будут использоваться при учете зависимых начислений
					//
					//// свойства
					//СтрокаНабора.ПериодРегистрации		= ВыборкаПоШапкеДокумента.ПериодРегистрации;
					//Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
					//	СтрокаНабора.ПериодДействияНачало	= ВыборкаПоШапкеДокумента.ДатаНачалаПериода;
					//	СтрокаНабора.ПериодДействияКонец	= КонецДня(ВыборкаПоШапкеДокумента.ДатаНачалаПериода);
					//Иначе //За весь месяц - ВЦелом и ПоДням и без регистрации времени 
					//	ПериодДействияНачало = ВыборкаПоШапкеДокумента.ПериодРегистрации;
					//	ПериодДействияКонец  = КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
					//	ВычислитьДатуНачалаИОкончания(ПериодДействияНачало, ПериодДействияКонец, ВыборкаПоНачислениям, ВыборкаПоРаботники.Сотрудник);
					//	СтрокаНабора.ПериодДействияНачало	= ПериодДействияНачало;
					//	СтрокаНабора.ПериодДействияКонец	= ПериодДействияКонец;
					//КонецЕсли;
					//СтрокаНабора.ВидРасчета					= ВыборкаПоРаботники.ВидРасчета;
					//
					//// Измерения
					//СтрокаНабора.Сотрудник					= ВыборкаПоРаботники.Сотрудник;
					//СтрокаНабора.Физлицо					= ВыборкаПоРаботники.Физлицо;
					//СтрокаНабора.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
					//
					//// ресурсы
					//СтрокаНабора.Результат					= Результат;
					//
					//// реквизиты
					//СтрокаНабора.ГрафикРаботы				= ПолучитьГрафикСотрудникаНаДату(ВыборкаПоРаботники.Сотрудник, СтрокаНабора.ПериодДействияНачало);
					//СтрокаНабора.ВидУчетаВремени			= Перечисления.ВидыУчетаВремени.ПоЧасам;
					//СтрокаНабора.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
					//СтрокаНабора.КодДоходаЕСН				= ВыборкаПоРаботники.КодПоЕСН;
					////СтрокаНабора.ОблагаетсяЕНВД				= СтрокаТЗ.ОблагаетсяЕНВД;
					////СтрокаНабора.ДокументОснование			= ВыборкаПоШапкеДокумента.Ссылка;
					//
					//// сведения о доходах для целей исчисления ЕСН
					//СтрокаНабора = Движения.ЕСНСведенияОДоходах.Добавить();
					//
					//// свойства
					//СтрокаНабора.Период						= ВыборкаПоШапкеДокумента.ПериодРегистрации;
					//
					//// Измерения
					//СтрокаНабора.Физлицо					= ВыборкаПоРаботники.Физлицо;
					//СтрокаНабора.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
					//
					//// ресурсы
					//СтрокаНабора.Результат					= Результат;
					//
					//// реквизиты
					//СтрокаНабора.КодДоходаЕСН				= ВыборкаПоРаботники.КодПоЕСН;
					////СтрокаНабора.ОблагаетсяЕНВД				= СтрокаТЗ.ОблагаетсяЕНВД;
					//СтрокаНабора.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровБУиНУРегл()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням(ВыборкаПоШапкеДокумента, ВыборкаПоОтработанноеВремя, НаборЗаписей)
	
	ОбрабатываемаяДата = Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ВыборкаПоОтработанноеВремя.ИндексДня);
	СуммаВремениЗаВесьДень = ВыборкаПоОтработанноеВремя.Часов;
	
	Если СуммаВремениЗаВесьДень > 0 Тогда
		
		Движение = НаборЗаписей.Добавить();
		// Свойства
		Движение.Период								= ОбрабатываемаяДата;
		
		// Измерения
		Движение.Сотрудник							= ВыборкаПоОтработанноеВремя.Сотрудник;
		Если ОтражатьВБухгалтерскомУчете Тогда
			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		КонецЕсли;
		Движение.ВидИспользованияРабочегоВремени	= ВыборкаПоОтработанноеВремя.ВидВремени;
		
		// Ресурсы
		Движение.Дней								= ?(СуммаВремениЗаВесьДень = 0, 0, 1);
		Движение.Часов								= СуммаВремениЗаВесьДень;
		
		// Реквизиты
		Движение.ВЦеломЗаПериод						= Ложь;
	
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуГрафикиРаботыПоВидамВремениЧасы(ВыборкаПоОтработанноеВремя, НаборЗаписей)
	
	ОбрабатываемаяДата = Дата(Год(ПериодРегистрации), Месяц(ПериодРегистрации), ВыборкаПоОтработанноеВремя.ИндексДня);
	ВидУчетаВремени = ПолучитьВидУчетаВремениПоКлассификатору(ВыборкаПоОтработанноеВремя.ВидВремени);
	
	Если ВыборкаПоОтработанноеВремя.ВидВремени = КлассификаторВечерниеЧасы Тогда
		СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоВечернимЧасам);
	ИначеЕсли ВыборкаПоОтработанноеВремя.ВидВремени = КлассификаторНочныеЧасы Тогда
		СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоНочнымЧасам);
	Иначе
		СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоЧасам);
	КонецЕсли;
	СтруктураПоиска.Вставить("Дата", ОбрабатываемаяДата);
	
	МассивСтрок = НаборЗаписей.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		Движение = МассивСтрок[0];
		Если Движение.Документ <> Документы.СдельныйНаряд.ПустаяСсылка() Тогда
			Возврат;
		КонецЕсли;
	Иначе
		
		Движение = НаборЗаписей.Добавить();
		Движение.ГрафикРаботы = ?(ОтражатьВБухгалтерскомУчете,ВыборкаПоОтработанноеВремя.Сотрудник,ВыборкаПоОтработанноеВремя.Физлицо);
		Движение.ВидУчетаВремени = ВидУчетаВремени;
		Движение.Дата = ОбрабатываемаяДата;
		Движение.План = Ложь;
		Движение.Месяц = ПериодРегистрации;
		
	КонецЕсли;
	
	// Ресурсы
	Если ВыборкаПоОтработанноеВремя.ВидВремени.РабочееВремя = Ложь Тогда
		Движение.ОсновноеЗначениеПолное = 0;
		Движение.ДополнительноеЗначениеПолное = 0;
	Иначе
		Движение.ОсновноеЗначениеПолное = Движение.ОсновноеЗначениеПолное + ВыборкаПоОтработанноеВремя.Часов;
		Движение.ДополнительноеЗначениеПолное = ?((Движение.ДополнительноеЗначениеПолное > 0) ИЛИ (ВыборкаПоОтработанноеВремя.Часов > 0), 1, 0);
	КонецЕсли;
	
	 //Реквизиты
	Если ВыборкаПоОтработанноеВремя.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка() Тогда
		Движение.Документ = Документы.СдельныйНаряд.ПустаяСсылка();
	Иначе
		Движение.Документ = Ссылка;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуГрафикиРаботыПоВидамВремениЧасы()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуГрафикиРаботыПоВидамВремениДни(ВыборкаПоОтработанноеВремя, НаборЗаписей)
	
	ОбрабатываемаяДата = Дата(Год(ПериодРегистрации), Месяц(ПериодРегистрации), ВыборкаПоОтработанноеВремя.ИндексДня);
	
	СтруктураПоиска.Вставить("ВидУчетаВремени", Перечисления.ВидыУчетаВремени.ПоДням);
	СтруктураПоиска.Вставить("Дата", ОбрабатываемаяДата);
	
	МассивСтрок = НаборЗаписей.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		Движение = МассивСтрок[0];
		Если Движение.Документ <> Документы.СдельныйНаряд.ПустаяСсылка() Тогда
			Возврат;
		КонецЕсли;
	Иначе
		
		Движение = НаборЗаписей.Добавить();
		Движение.ГрафикРаботы = ?(ОтражатьВБухгалтерскомУчете,ВыборкаПоОтработанноеВремя.Сотрудник,ВыборкаПоОтработанноеВремя.Физлицо);
		Движение.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		Движение.Дата = ОбрабатываемаяДата;
		Движение.План = Ложь;
		Движение.Месяц = ПериодРегистрации;
		
	КонецЕсли;
	
	
	Если ВремяЯвки > 0 Тогда
		// Ресурсы
		Движение.ОсновноеЗначениеПолное = ?(ВремяЯвки = 0, 0, 1);
		Движение.ДополнительноеЗначениеПолное = ВремяЯвки;
		// Реквизиты
		Движение.Документ = Ссылка;
	Иначе
		// Ресурсы
		Движение.ОсновноеЗначениеПолное = ?(ВыборкаПоОтработанноеВремя.Часов = 0, 0, 1);
		Движение.ДополнительноеЗначениеПолное = ВыборкаПоОтработанноеВремя.Часов;
		// Реквизиты
		Движение.Документ = Документы.СдельныйНаряд.ПустаяСсылка();
	КонецЕсли;
	
	
	
КонецПроцедуры // ДобавитьСтрокуГрафикиРаботыПоВидамВремениДни()

// Функция возвращает график работы  сотрудника, на указанную дату, 
// если сотрудник еще не работал на указанную дату, тогда возвращается ближайший график (срез первых)
Функция ПолучитьГрафикСотрудникаНаДату(Сотрудник, ДатаПолученияГрафика)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Месяц", ДатаПолученияГрафика);
	Запрос.Текст = "ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Месяц, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних
	|ГДЕ
	|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПервых.ГрафикРаботы
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПервых(&Месяц, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПервых
	|ГДЕ
	|	РаботникиОрганизацийСрезПервых.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ГрафикРаботы;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // ПолучитьГрафикСотрудникаНаДату(Сотрудник, ДатаПолученияГрафика()
	
// Процедура создает пустые записи в регистре за ПериодРегистрации, в разрезе сотрудников
// если это первый (единственный) документ за этот период, в разрезе сотрудников
Функция ПолучитьМассивСотрудниковДляСозданияПустыхЗаписей(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	Если ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете Тогда
		УсловиеСотрудника = "";
	Иначе
		УсловиеСотрудника = ".ФизЛицо";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СдельныйНарядИсполнители.Сотрудник" + УсловиеСотрудника + " КАК Сотрудник
	|ИЗ
	|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ГрафикиРаботыПоВидамВремени.ГрафикРаботы = СдельныйНарядИсполнители.Сотрудник" + УсловиеСотрудника + "
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
	|			И ((НЕ ГрафикиРаботыПоВидамВремени.План))
	|ГДЕ
	|	СдельныйНарядИсполнители.Ссылка = &Документ
	|	И ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("Месяц", ПериодРегистрации);
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник")
	
КонецФункции // ПолучитьМассивСотрудниковДляСозданияПустыхЗаписей()

// Процедура удаляет все записи из регистра за ПериодРегистрации,
// если документ последний в этом периоде, в разрезе сотрудников
Процедура УдалитьЗаписиЗаПериодДокумента()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если ОтражатьВБухгалтерскомУчете Тогда
		УсловиеСотрудника = "";
	Иначе
		УсловиеСотрудника = ".ФизЛицо";
	КонецЕсли;
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботы.Сотрудник" + УсловиеСотрудника + " КАК ГрафикРаботы,
	|	ГрафикиРаботы.Ссылка.ПериодРегистрации КАК Месяц,
	|	ГрафикиРаботы.Ссылка.СпособВводаДанных КАК СпособВводаДанных
	|ПОМЕСТИТЬ ВТСотрудникоМесяц
	|ИЗ
	|	Документ.СдельныйНаряд.Исполнители КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.Ссылка = &Документ
	|	И ГрафикиРаботы.Ссылка.УчитыватьОтработанноеВремя
	|	И НЕ ГрафикиРаботы.Ссылка.УчитыватьВремяТолькоПриРасчете";
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|СотрудникоМесяц.ГрафикРаботы КАК Сотрудник,
	|СотрудникоМесяц.Месяц КАК Месяц,
	|СотрудникоМесяц.СпособВводаДанных,
	|ВЫБОР 
	|	КОГДА ВведенныеДокументы.ГрафикРаботы ЕСТЬ NULL 
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|КОНЕЦ КАК УдалятьЗаписиЗаПериод
	|
	|ИЗ
	|	ВТСотрудникоМесяц КАК СотрудникоМесяц
	|ЛЕВОЕ СОЕДИНЕНИЕ	
	|	(ВЫБРАТЬ
	|	СотрудникоМесяц.ГрафикРаботы,
	|	СотрудникоМесяц.Месяц
	|	ИЗ
	|		ВТСотрудникоМесяц КАК СотрудникоМесяц
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ПО
	|		ГрафикиРаботы.ГрафикРаботы = СотрудникоМесяц.ГрафикРаботы
	|		И НЕ ГрафикиРаботы.План
	|		И ГрафикиРаботы.Месяц = СотрудникоМесяц.Месяц
	|		И ГрафикиРаботы.Документ <> &Документ
	|		И ГрафикиРаботы.Документ <> ЗНАЧЕНИЕ(Документ.СдельныйНаряд.ПустаяСсылка)
	|		И ГрафикиРаботы.Документ <> ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка)
	|		И ГрафикиРаботы.Документ <> НЕОПРЕДЕЛЕНО
	|	)КАК ВведенныеДокументы
	|ПО
	|	ВведенныеДокументы.ГрафикРаботы = СотрудникоМесяц.ГрафикРаботы
	|	И ВведенныеДокументы.Месяц = СотрудникоМесяц.Месяц";
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	СпособВводаДанныхЗаДень = Перечисления.СпособыВводаДанныхОВремени.ЗаДень; 
	НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		НаборЗаписей.Отбор.План.Установить(Ложь);
		НаборЗаписей.Отбор.ГрафикРаботы.Установить(ВыборкаЗапроса.Сотрудник);
		НаборЗаписей.Отбор.Месяц.Установить(ВыборкаЗапроса.Месяц);
		
		Если ВыборкаЗапроса.УдалятьЗаписиЗаПериод Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		Иначе
			
			НаборЗаписей.Прочитать();
			Если ВыборкаЗапроса.СпособВводаДанных = СпособВводаДанныхЗаДень Тогда
				Для Каждого Запись Из НаборЗаписей Цикл
					Если (Запись.Документ = Ссылка) Тогда
						НаборЗаписей.Удалить(Запись);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для Каждого Запись Из НаборЗаписей Цикл
					Если (Запись.Документ = Ссылка) Тогда
						Запись.ОсновноеЗначениеПолное = 0;
						Запись.ДополнительноеЗначениеПолное = 0;
						Запись.Документ = Документы.СдельныйНаряд.ПустаяСсылка();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УдалитьЗаписиЗаПериодДокумента()

Процедура СкорректироватьПериодПовременнойОплаты(ТаблицаНабораЗаписей, ТаблицаДанныхКорректировки)

	СтруктураПоиска = Новый Структура("ВидУчетаВремени,Дата,ГрафикРаботы");
	Для каждого СтрокаКорректировки Из ТаблицаДанныхКорректировки Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаКорректировки);
	    СтрокиНабора = ТаблицаНабораЗаписей.НайтиСтроки(СтруктураПоиска);
		Если СтрокиНабора.Количество() = 0 Тогда
			СтрокаНабора = ТаблицаНабораЗаписей.Добавить()
		Иначе
			СтрокаНабора = СтрокиНабора[0]
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаНабора,СтрокаКорректировки);
	КонецЦикла;

КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// удаление движений - документ не удаляет движения автоматически
Процедура УдалитьДвижения()
	
	Если НЕ мУдалятьДвижения Тогда
		Возврат;
	КонецЕсли;
	
	Если мПрежнееОтражатьВУправленческомУчете Тогда
		Движения.ФактическаяВыработкаРаботников.Очистить();
		Движения.ФактическаяВыработкаРаботников.Записать();
		
	Иначе
		Движения.ФактическаяВыработкаРаботниковОрганизаций.Очистить();
		Движения.ФактическаяВыработкаРаботниковОрганизаций.Записать();
		Движения.ФактическаяВыработкаРаботниковОрганизацийСверхурочно.Очистить();
		Движения.ФактическаяВыработкаРаботниковОрганизацийСверхурочно.Записать();
		//Движения.ЕСНОсновныеНачисления.Очистить();
		//Движения.ЕСНОсновныеНачисления.Записать();
		//Движения.ЕСНСведенияОДоходах.Очистить();
		//Движения.ЕСНСведенияОДоходах.Записать();
		Движения.БУОсновныеНачисления.Очистить();
		Движения.БУОсновныеНачисления.Записать();
		
	КонецЕсли;
	
	Движения.РабочееВремяРаботниковОрганизаций.Очистить();
	Движения.РабочееВремяРаботниковОрганизаций.Записать();
	
КонецПроцедуры // УдалитьДвижения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение И СпособВводаДанных.Пустая();
	Если Отказ Тогда
		Сообщить("Документ был проведен в редакции 2.1 и перепроведению не подлежит!");
		Возврат
	КонецЕсли;
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Исполнители);
	// Установим прежнее состояние ОтражатьВУправленческомУчете
	мПрежнееОтражатьВУправленческомУчете = Ссылка.ОтражатьВУправленческомУчете;
	
	УдалитьЗаписиЗаПериодДокумента(); 
	
	мУдалятьДвижения = Не ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// удалим движения
	УдалитьДвижения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверка заполнения шапки документа
	РеквизитыШапки = "СпособВводаДанных";
	Если ОтражатьВУправленческомУчете Тогда
		ДополнитьРеквизитыШапкиУпр(РеквизитыШапки);
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете Тогда
		ДополнитьРеквизитыШапкиРегл(РеквизитыШапки);
	КонецЕсли;
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(РеквизитыШапки,"Не указан способ учета времени и выработки по наряду!"), Отказ, Заголовок);
	
	// проверка совпадения сумм по т.ч. 
	Если ОтражатьВУправленческомУчете Тогда
		Если Выработка.Итог("Сумма") <> Исполнители.Итог("СуммаКНачислению") Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не совпадают итоговые суммы к начислению по управленческому учету по табличным частям!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете Тогда
		Если Выработка.Итог("СуммаРегл") <> Исполнители.Итог("СуммаКНачислениюРегл") Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не совпадают итоговые суммы к начислению по регламентированному учету по табличным частям!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// получим реквизиты табличной части
	ВыборкаПоРаботники = СформироватьЗапросПоИсполнители(Режим,СтруктураШапкиДокумента).Выбрать();
	ВыборкаПоРаботникиРегл = Неопределено;
	ВыборкаДанныхПоГрафику = Неопределено;
   	Если ОтражатьВБухгалтерскомУчете Тогда
		ВыборкаПоРаботникиРегл = СформироватьЗапросПоИсполнителиРегл(СтруктураШапкиДокумента, ВыборкаДанныхПоГрафику).Выбрать();
	КонецЕсли;
	
	Пока ВыборкаПоРаботники.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		РабочееВремяЗаполнено = Ложь;
		
		Пока ВыборкаПоРаботники.Следующий() Цикл
			Если ОтражатьВБухгалтерскомУчете Тогда
				ВыборкаПоРаботникиРегл.Следующий();
			КонецЕсли;
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиИсполнители(СтруктураШапкиДокумента, ВыборкаПоРаботники, ВыборкаПоРаботникиРегл, Отказ, Заголовок, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"));
			
		КонецЦикла;
		
		// Дополнительная проверка на заполненость по отработаному времени при вводе за каждый день
		Если СтруктураШапкиДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням 
			И СтруктураШапкиДокумента.УчитыватьОтработанноеВремя
			И НЕ РабочееВремяЗаполнено Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+ СокрЛП(ВыборкаПоРаботники.НомерСтроки) +
			""" табл. части ""Исполнители"": " + "не указано значение отработанных часов!", Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЦикла; 
	
	// проверим общие реквизиты
	ВыборкаПоРаботы = СформироватьЗапросПоВыработка(Режим).Выбрать();
	Пока ВыборкаПоРаботы.Следующий() Цикл 
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиВыработка(СтруктураШапкиДокумента, ВыборкаПоРаботы, Отказ, Заголовок);
	КонецЦикла;
	
	// проверим реквизиты регл учета
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// определим налоговый режим
		//БухгалтерскийИНалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), КонецМесяца(СтруктураШапкиДокумента.Дата), СтруктураШапкиДокумента.Организация);
		//мУчетнаяПолитикаУСН = глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете")[КонецМесяца(СтруктураШапкиДокумента.Дата)][СтруктураШапкиДокумента.Организация].УСН;
				
		РезультатЗапросаПоРаботыРегл = СформироватьЗапросПоВыработкаРегл(Режим);
		ТаблицаРаботРегл = РезультатЗапросаПоРаботыРегл.Выгрузить();
		ВыборкаПоРаботыРегл = РезультатЗапросаПоРаботыРегл.Выбрать();
		Пока ВыборкаПоРаботыРегл.Следующий() Цикл 
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиВыработкаРегл(СтруктураШапкиДокумента, ВыборкаПоРаботыРегл, Отказ, Заголовок);
		КонецЦикла;
		
	КонецЕсли;
	
		
	// Фактически отработанное время
	УдалитьЗаписиЗаПериодДокумента();
	
	Если ОтражатьВБухгалтерскомУчете И УчитыватьОтработанноеВремя И Не УчитыватьВремяТолькоПриРасчете Тогда
		
		ПроверитьУникальностьЗаписи(Отказ, Заголовок);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			ВыборкаПоРаботникиРегл.Сбросить();
			ВыборкаПоОтработанноеВремя = ВыборкаПоРаботникиРегл;
			
			НаборДвижений = Движения.РабочееВремяРаботниковОрганизаций;
			
			Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
				// Данные введены в целом за период.
				
				Пока ВыборкаПоОтработанноеВремя.Следующий() Цикл
					
					Для Сч = 1 По 5 Цикл
						
						Если ЗначениеЗаполнено(ВыборкаПоОтработанноеВремя["ВидВремени" + Сч + "Сводно"]) Тогда
							
							Запись = НаборДвижений.Добавить();
							// Свойства
							Запись.Период							= ПериодРегистрации;
							
							// Измерения
							Запись.Сотрудник					= ВыборкаПоОтработанноеВремя.Сотрудник;
							Запись.Организация					= СтруктураШапкиДокумента.ГоловнаяОрганизация;
							
							Запись.ВидИспользованияРабочеговремени	= ВыборкаПоОтработанноеВремя["ВидВремени" + Сч + "Сводно"];
							
							// Ресурсы
							Запись.Дней								= ВыборкаПоОтработанноеВремя["Дней" + Сч + "Сводно"];
							Запись.Часов							= ВыборкаПоОтработанноеВремя["Часов" + Сч + "Сводно"];
							
							// Реквизиты
							Запись.ВЦеломЗаПериод					= Истина;
							
						КонецЕсли; 
						
					КонецЦикла; 
					
				КонецЦикла;
				
			ИначеЕсли СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
				
				// Данные введены с разбивкой по дням.
				
				ДанныеКорректировкиГрафика = ВыборкаДанныхПоГрафику.Выгрузить();
				ДанныеКорректировкиГрафика.Индексы.Добавить("ГрафикРаботы");
				НаборГрафикиРаботыПоВидамВремени = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
				НаборГрафикиРаботыПоВидамВремени.Отбор.Месяц.Установить(ПериодРегистрации);
				НаборГрафикиРаботыПоВидамВремени.Отбор.План.Установить(Ложь);
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("План", Ложь);
				СтруктураПоиска.Вставить("Месяц", ПериодРегистрации);
				
				КоличествоДней = День(КонецМесяца(ПериодРегистрации));
				
				Пока ВыборкаПоОтработанноеВремя.СледующийПоЗначениюПоля("Сотрудник") Цикл
					
					НаборГрафикиРаботыПоВидамВремени.Отбор.ГрафикРаботы.Установить(ВыборкаПоОтработанноеВремя.Сотрудник);
					СтруктураПоиска.Вставить("ГрафикРаботы", ВыборкаПоОтработанноеВремя.Сотрудник);
					
					НаборГрафикиРаботыПоВидамВремени.Прочитать();
					ТаблицаНабора = НаборГрафикиРаботыПоВидамВремени.Выгрузить();
					
					Пока ВыборкаПоОтработанноеВремя.СледующийПоЗначениюПоля("ИндексДня") Цикл
						
						ВремяЯвки = 0;
						Пока ВыборкаПоОтработанноеВремя.Следующий() Цикл
							
							// По регистру сведений "ГрафикиРаботыПоВидамВремени" по часам
							ДобавитьСтрокуГрафикиРаботыПоВидамВремениЧасы(ВыборкаПоОтработанноеВремя, ТаблицаНабора);
							
							Если ВыборкаПоОтработанноеВремя.ВидВремени = КлассификаторЯвка Тогда
								ВремяЯвки = ВыборкаПоОтработанноеВремя.Часов;
							КонецЕсли;
							
							// По регистру накоплений "РабочееВремяРаботниковОрганизаций"
							ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням(СтруктураШапкиДокумента, ВыборкаПоОтработанноеВремя, НаборДвижений);
							
						КонецЦикла;
						
						// По регистру сведений "ГрафикиРаботыПоВидамВремени" по дням
						ДобавитьСтрокуГрафикиРаботыПоВидамВремениДни(ВыборкаПоОтработанноеВремя, ТаблицаНабора);
						
					КонецЦикла;
					
					СкорректироватьПериодПовременнойОплаты(ТаблицаНабора, ДанныеКорректировкиГрафика.Скопировать(ДанныеКорректировкиГрафика.НайтиСтроки(Новый Структура("ГрафикРаботы",ВыборкаПоОтработанноеВремя.Сотрудник))));
					НаборГрафикиРаботыПоВидамВремени.Загрузить(ТаблицаНабора);
					НаборГрафикиРаботыПоВидамВремени.Записать();
					
				КонецЦикла;
				
			Иначе
				
				// Данные введены за день.
				////////////////////////////////////////////////////////////////////////
				// Отработанное время
				
				МассивСотрудниковДляСозданияПустыхЗаписей = ПолучитьМассивСотрудниковДляСозданияПустыхЗаписей(СтруктураШапкиДокумента);
				
				ДанныеКорректировкиГрафика = ВыборкаДанныхПоГрафику.Выгрузить();
				ДанныеКорректировкиГрафика.Индексы.Добавить("ГрафикРаботы");
				
				НаборГрафикиРаботыПоВидамВремени = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
				НаборГрафикиРаботыПоВидамВремени.Отбор.Месяц.Установить(ПериодРегистрации);
				НаборГрафикиРаботыПоВидамВремени.Отбор.План.Установить(Ложь);
				
				ДеньОкончанияМесяца = День(КонецМесяца(ПериодРегистрации));
				ПустойДокумент = Документы.СдельныйНаряд.ПустаяСсылка();
				
				СтруктураПоиска = Новый Структура;
				НомерДня = День(ДатаНачалаПериода);
				
				Пока ВыборкаПоОтработанноеВремя.СледующийПоЗначениюПоля("Сотрудник") Цикл
					
					СотрудникДляПоиска = ВыборкаПоОтработанноеВремя.Сотрудник;
					
					НаборГрафикиРаботыПоВидамВремени.Отбор.ГрафикРаботы.Установить(СотрудникДляПоиска);
					НаборГрафикиРаботыПоВидамВремени.Прочитать();
					НаборЗаписей = НаборГрафикиРаботыПоВидамВремени.Выгрузить();
					
					Пока ВыборкаПоОтработанноеВремя.СледующийПоЗначениюПоля("ИндексДня") Цикл
						
						ОбрабатываемаяДата = Дата(Год(ПериодРегистрации), Месяц(ПериодРегистрации), ВыборкаПоОтработанноеВремя.ИндексДня);
						
						Если МассивСотрудниковДляСозданияПустыхЗаписей.Найти(СотрудникДляПоиска) = Неопределено Тогда
							
							Пока ВыборкаПоОтработанноеВремя.Следующий() Цикл
								
								// по часам
								ВидУчетаВремени = ПолучитьВидУчетаВремениПоКлассификатору(ВыборкаПоОтработанноеВремя.ВидВремени);
								
								Если ВыборкаПоОтработанноеВремя.ВидВремени = КлассификаторВечерниеЧасы Тогда
									СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоВечернимЧасам);
								ИначеЕсли ВыборкаПоОтработанноеВремя.ВидВремени = КлассификаторНочныеЧасы Тогда
									СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоНочнымЧасам);
								Иначе
									СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоЧасам);
								КонецЕсли;
								СтруктураПоиска.Вставить("Дата", ОбрабатываемаяДата);
								
								МассивСтрок = НаборЗаписей.НайтиСтроки(СтруктураПоиска);
								Если МассивСтрок.Количество() > 0 Тогда
									
									Движение = МассивСтрок[0];
									
								Иначе
									
									Движение = НаборГрафикиРаботыПоВидамВремени.Добавить();
									Движение.ГрафикРаботы = ВыборкаПоОтработанноеВремя.Сотрудник;
									Движение.ВидУчетаВремени = ВидУчетаВремени;
									Движение.Дата = ОбрабатываемаяДата;
									Движение.План = Ложь;
									Движение.Месяц = ПериодРегистрации;	
									
								КонецЕсли;
								
								Движение.ОсновноеЗначениеПолное = Движение.ОсновноеЗначениеПолное + ВыборкаПоОтработанноеВремя.Часов;
								Движение.ДополнительноеЗначениеПолное = ?((Движение.ДополнительноеЗначениеПолное > 0) ИЛИ (ВыборкаПоОтработанноеВремя.Часов > 0), 1, 0);
								Движение.Документ				= Ссылка;
								
								// По регистру накоплений "РабочееВремяРаботниковОрганизаций"
								ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням(СтруктураШапкиДокумента, ВыборкаПоОтработанноеВремя, НаборДвижений);
								
							КонецЦикла;
							
							// по дням
							СтруктураПоиска.Вставить("ВидУчетаВремени", Перечисления.ВидыУчетаВремени.ПоДням);
							СтруктураПоиска.Вставить("Дата", ОбрабатываемаяДата);
							
							МассивСтрок = НаборЗаписей.НайтиСтроки(СтруктураПоиска);
							Если МассивСтрок.Количество() > 0 Тогда
								Движение = МассивСтрок[0];
							Иначе
								
								Движение = НаборГрафикиРаботыПоВидамВремени.Добавить();
								Движение.ГрафикРаботы = ВыборкаПоОтработанноеВремя.Сотрудник;
								Движение.ВидУчетаВремени = ВидУчетаВремениПоДням;
								Движение.Дата = ОбрабатываемаяДата;
								Движение.План = Ложь;
								Движение.Месяц = ПериодРегистрации;
								
							КонецЕсли;
							
							Движение.ОсновноеЗначениеПолное = ?(ВыборкаПоОтработанноеВремя.Часов = 0, 0, 1);
							Движение.ДополнительноеЗначениеПолное = ВыборкаПоОтработанноеВремя.Часов;
							Движение.Документ 				= Ссылка;
							
							
						Иначе
							
							//НаборГрафикиРаботыПоВидамВремени.Отбор.План.Установить(Ложь);
							//НаборГрафикиРаботыПоВидамВремени.Отбор.Месяц.Установить(ПериодРегистрации);
							////НаборГрафикиРаботыПоВидамВремени.Отбор.Дата.Использование = Ложь;
							//НаборГрафикиРаботыПоВидамВремени.Отбор.Дата.Установить(ОбрабатываемаяДата);
							
							//НаборГрафикиРаботыПоВидамВремени.Очистить();
							
							Пока ВыборкаПоОтработанноеВремя.Следующий() Цикл
								
								Если ОбрабатываемаяДата = ДатаНачалаПериода
									И ВыборкаПоОтработанноеВремя.ЗаписатьПустоеЗначение Тогда
									Продолжить;
								КонецЕсли;
								// по часам
								ДвижениеПоЧасам = НаборГрафикиРаботыПоВидамВремени.Добавить();
								СуммаВремениЗаВесьДень = ВыборкаПоОтработанноеВремя.Часов;
								Если ОбрабатываемаяДата = ДатаНачалаПериода Тогда
									
									ДвижениеПоЧасам.ОсновноеЗначениеПолное = ДвижениеПоЧасам.ОсновноеЗначениеПолное + СуммаВремениЗаВесьДень;
									ДвижениеПоЧасам.ДополнительноеЗначениеПолное = ?((ДвижениеПоЧасам.ДополнительноеЗначениеПолное > 0) ИЛИ (СуммаВремениЗаВесьДень > 0), 1, 0);
									ДвижениеПоЧасам.Документ = Ссылка;
									
								Иначе
									ДвижениеПоЧасам.Документ = ПустойДокумент;
								КонецЕсли;
								
								ДвижениеПоЧасам.ГрафикРаботы = СотрудникДляПоиска;
								Если ВыборкаПоОтработанноеВремя.ВидВремени = КлассификаторВечерниеЧасы Тогда
									ДвижениеПоЧасам.ВидУчетаВремени = ВидУчетаВремениПоВечернимЧасам;
								ИначеЕсли ВыборкаПоОтработанноеВремя.ВидВремени = КлассификаторНочныеЧасы Тогда
									ДвижениеПоЧасам.ВидУчетаВремени = ВидУчетаВремениПоНочнымЧасам;
								Иначе
									ДвижениеПоЧасам.ВидУчетаВремени = ВидУчетаВремениПоЧасам;
								КонецЕсли;
								ДвижениеПоЧасам.Дата = ОбрабатываемаяДата;
								ДвижениеПоЧасам.Месяц = ПериодРегистрации;
								ДвижениеПоЧасам.План = Ложь;
								
								// По регистру накоплений "РабочееВремяРаботниковОрганизаций"
								ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням(СтруктураШапкиДокумента, ВыборкаПоОтработанноеВремя, НаборДвижений);
								
							КонецЦикла;
							
							// по дням
							ДвижениеПоДням = НаборГрафикиРаботыПоВидамВремени.Добавить();
							Если ОбрабатываемаяДата = ДатаНачалаПериода Тогда
								
								ДвижениеПоДням.ОсновноеЗначениеПолное = ?(ВыборкаПоОтработанноеВремя.Часов = 0, 0, 1);
								ДвижениеПоДням.ДополнительноеЗначениеПолное = ВыборкаПоОтработанноеВремя.Часов;
								ДвижениеПоДням.Документ = Ссылка;
								
							Иначе
								ДвижениеПоДням.Документ = ПустойДокумент;
							КонецЕсли;	
							ДвижениеПоДням.ГрафикРаботы = СотрудникДляПоиска;
							ДвижениеПоДням.ВидУчетаВремени = ВидУчетаВремениПоДням;
							ДвижениеПоДням.Дата = ОбрабатываемаяДата;
							ДвижениеПоДням.Месяц = ПериодРегистрации;
							ДвижениеПоДням.План = Ложь;
							
						КонецЕсли;
						
					КонецЦикла;
				
					ТаблицаНабора = НаборГрафикиРаботыПоВидамВремени.Выгрузить();
					СкорректироватьПериодПовременнойОплаты(ТаблицаНабора, ДанныеКорректировкиГрафика.Скопировать(ДанныеКорректировкиГрафика.НайтиСтроки(Новый Структура("ГрафикРаботы",ВыборкаПоОтработанноеВремя.Сотрудник))));
					НаборГрафикиРаботыПоВидамВремени.Загрузить(ТаблицаНабора);
					НаборГрафикиРаботыПоВидамВремени.Записать();
					
				КонецЦикла;
				
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	//vvv
	//Если СтруктураШапкиДокумента.РаспределятьВыработкуПоДням ТОгда
	//	
	//	Запрос=Новый Запрос;
	//
	//	МассивДопустимыхВидовВремени = Новый Массив(5);
	//	МассивДопустимыхВидовВремени[0] = Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
	//
	//	Запрос.УстановитьПараметр("ДокументСсылка",Ссылка);
	//	Запрос.УстановитьПараметр("МассивДопустимыхВидовВремени",МассивДопустимыхВидовВремени);
	//	Запрос.УстановитьПараметр("ПериодРегистрации",СтруктураШапкиДокумента.ПериодРегистрации);

	//
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	СдельныйНарядИсполнители.Ссылка,
	//	|	СдельныйНарядИсполнители.НомерСтроки КАК НомерСтроки,
	//	|	СдельныйНарядИсполнители.Сотрудник КАК Сотрудник,
	//	|	СдельныйНарядИсполнители.КоэффициентСтажа КАК КоэффициентСтажа,
	//	|	СдельныйНарядИсполнители.КТУ КАК КТУ,
	//	|	СдельныйНарядИсполнители.Сотрудник.Наименование,
	//	|	СдельныйНарядИсполнители.Сотрудник.Физлицо КАК Физлицо,
	//	|	СдельныйНарядИсполнители.СуммаКНачислениюРегл КАК СуммаКНачислению,
	//	|	ДЕНЬ(РабочееВремяРаботниковОрганизаций.Период) КАК ИндексДня,
	//	|	РабочееВремяРаботниковОрганизаций.Часов КАК Часов,
	//	|	РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени КАК ВидВремени,
	//	|	ЕСТЬNULL(ОтработанноеВремя.Часов, 0) КАК ВсегоЧасов
	//	|ИЗ
	//	|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
	//	|		ПО СдельныйНарядИсполнители.Сотрудник = РабочееВремяРаботниковОрганизаций.Сотрудник
	//	|			И (НАЧАЛОПЕРИОДА(СдельныйНарядИсполнители.Ссылка.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РабочееВремяРаботниковОрганизаций.Период, МЕСЯЦ))
	//	|			И (РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени В (&МассивДопустимыхВидовВремени))
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//	|			РабочееВремяРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	//	|			СУММА(РабочееВремяРаботниковОрганизаций.Часов) КАК Часов
	//	|		ИЗ
	//	|			РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
	//	|		ГДЕ
	//	|			РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени В(&МассивДопустимыхВидовВремени)
	//	|			И НАЧАЛОПЕРИОДА(РабочееВремяРаботниковОрганизаций.Период, МЕСЯЦ) = &ПериодРегистрации
	//	|		
	//	|		СГРУППИРОВАТЬ ПО
	//	|			РабочееВремяРаботниковОрганизаций.Сотрудник) КАК ОтработанноеВремя
	//	|		ПО СдельныйНарядИсполнители.Сотрудник = ОтработанноеВремя.Сотрудник
	//	|ГДЕ
	//	|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	НомерСтроки,
	//	|	Сотрудник,
	//	|	ИндексДня";
	//	
	//	ВыборкаПоРаботникиРегл=Запрос.Выполнить().Выбрать();
	//	СтрокаСотрудников="";
	//	Пока ВыборкаПоРаботникиРегл.СледующийПоЗначениюПоля("Сотрудник") Цикл
	//		Если ВыборкаПоРаботникиРегл.ВсегоЧасов=0 Тогда
	//			СтрокаСотрудников = СтрокаСотрудников + Символы.ПС + ВыборкаПоРаботникиРегл.СотрудникНаименование;
	//		КонецЕсли;
	//	КонецЦикла;
	//	Если СтрокаСотрудников<>"" ТОгда
	//		ОбщегоНазначения.СообщитьОбОшибке("На следующих сотрудников не введены документы учета отработанного времени в этом периоде" + СтрокаСотрудников,Отказ, Заголовок);
	//	КонецЕсли;
	//КонецЕсли;
	//
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если Отказ Тогда
		Возврат
	КонецЕсли;
			
	// Фактическая выработка
	Если ОтражатьВБухгалтерскомУчете Тогда
		ВыборкаПоРаботникиРегл.Сбросить();
	КонецЕсли;
	Если ОтражатьВУправленческомУчете Тогда
		ВыборкаПоРаботники.Сбросить();
	КонецЕсли;
	
	ДвиженияРегистров(СтруктураШапкиДокумента, ВыборкаПоРаботники, ВыборкаПоРаботникиРегл, ТаблицаРаботРегл);
	
КонецПроцедуры // ОбработкаПроведения()

// процедура проверяет, нет ли уже аналогичных записей с ключевыми полями в регистре сведений
// ГрафикиРаботыПоВидамВремени.
// Возвращает Истина если проведение возможно, иначе Ложь.
Процедура ПроверитьУникальностьЗаписи(Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Месяц", ПериодРегистрации);
	Запрос.УстановитьПараметр("НачалоМесяца",	?(СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень, ДатаНачалаПериода, ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецМесяца",	?(СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень, ДатаНачалаПериода, КонецМесяца(ПериодРегистрации)));
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		УсловиеСотрудника = "";
	Иначе
		УсловиеСотрудника = ".ФизЛицо";
	КонецЕсли;
	
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(РабочееВремяРаботниковОрганизаций.Регистратор, ГрафикиРаботыПоВидамВремени.Документ)) КАК ДокументПредставление,
		|	ЕСТЬNULL(СотрудникиНаряда.Сотрудник.Наименование, ГрафикиРаботыПоВидамВремени.ГрафикРаботы.Наименование) КАК СотрудникНаименование
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаВЦеломЗаПериод.Сотрудник" + УсловиеСотрудника +" КАК Сотрудник
		|	ИЗ
		|		Документ.СдельныйНаряд.Исполнители КАК ТаблицаВЦеломЗаПериод
		|	ГДЕ
		|		ТаблицаВЦеломЗаПериод.Ссылка = &ДокументСсылка) КАК СотрудникиНаряда
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
		|		ПО СотрудникиНаряда.Сотрудник = РабочееВремяРаботниковОрганизаций.Сотрудник
		|			И (РабочееВремяРаботниковОрганизаций.Регистратор <> &ДокументСсылка)
		|			И (РабочееВремяРаботниковОрганизаций.ВЦеломЗаПериод
		|					И РабочееВремяРаботниковОрганизаций.Период = &Месяц
		|				ИЛИ (НЕ РабочееВремяРаботниковОрганизаций.ВЦеломЗаПериод)
		|					И (РабочееВремяРаботниковОрганизаций.Период МЕЖДУ &НачалоМесяца И &КонецМесяца))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО СотрудникиНаряда.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|			И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
		|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца)
		|			И (ГрафикиРаботыПоВидамВремени.Документ <> &ДокументСсылка)
		|			И (НЕ ГрафикиРаботыПоВидамВремени.План)
		|			И (НЕ ГрафикиРаботыПоВидамВремени.Документ В (ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.СдельныйНаряд.ПустаяСсылка)))
		|ГДЕ
		|	((РабочееВремяРаботниковОрганизаций.НомерСтроки ЕСТЬ НЕ NULL )
		|			ИЛИ (ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL ))
		|	И ((РабочееВремяРаботниковОрганизаций.Регистратор ЕСТЬ НЕ NULL) ИЛИ (ГрафикиРаботыПоВидамВремени.Документ ЕСТЬ НЕ NULL))";
		
	Иначе
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ИндексНачальногоДня = День(ДатаНачалаПериода);
		ИндексКонечногоДня = День(?(СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень, ДатаНачалаПериода, КонецМесяца(ПериодРегистрации)));
		Для ИндексДня = ИндексНачальногоДня По ИндексКонечногоДня Цикл
			СтрИндексДня = Строка(ИндексДня);
			Запрос.Текст = 
			"ВЫБРАТЬ 
			|		СдельныйНарядИсполнители.Сотрудник"+ УсловиеСотрудника + " КАК Сотрудник,
			|		"+СтрИндексДня+" КАК ИндексДня
			|ПОМЕСТИТЬ ВТДанныеНарядаПоДням"+СтрИндексДня+"
			|	ИЗ
			|		Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
			|	ГДЕ
			|		СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
			|		И СдельныйНарядИсполнители.ПервыйВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		СдельныйНарядИсполнители.Сотрудник"+ УсловиеСотрудника + ",
			|		"+СтрИндексДня+"
			|	ИЗ
			|		Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
			|	ГДЕ
			|		СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
			|		И СдельныйНарядИсполнители.ВторойВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		СдельныйНарядИсполнители.Сотрудник"+ УсловиеСотрудника + ",
			|		"+СтрИндексДня+"
			|	ИЗ
			|		Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
			|	ГДЕ
			|		СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
			|		И СдельныйНарядИсполнители.ТретийВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|	
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник";
			Запрос.Выполнить();
		
			Если ИндексДня = ИндексНачальногоДня Тогда
				ТекстЗапроса = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДанныеНарядаПоДням.Сотрудник,
				|	ДанныеНарядаПоДням.ИндексДня
				|ПОМЕСТИТЬ ВТДанныеНарядаПоДням
				|ИЗ
				|	ВТДанныеНарядаПоДням"+СтрИндексДня+" КАК ДанныеНарядаПоДням
				|";
			Иначе 	
				ТекстЗапроса = ТекстЗапроса + 
				"ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДанныеНарядаПоДням.Сотрудник,
				|	ДанныеНарядаПоДням.ИндексДня
				|ИЗ
				|	ВТДанныеНарядаПоДням"+СтрИндексДня+" КАК ДанныеНарядаПоДням
				|";
			КонецЕсли;
		КонецЦикла;
		
		Запрос.Текст = ТекстЗапроса + 
		"ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
		Запрос.Выполнить();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(РабочееВремяРаботниковОрганизаций.Регистратор, ГрафикиРаботыПоВидамВремени.Документ)) КАК ДокументПредставление,
		|	ЕСТЬNULL(СотрудникиНаряда.Сотрудник.Наименование, ГрафикиРаботыПоВидамВремени.ГрафикРаботы.Наименование) КАК СотрудникНаименование
		|ИЗ
		|	ВТДанныеНарядаПоДням КАК СотрудникиНаряда
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
		|		ПО СотрудникиНаряда.Сотрудник = РабочееВремяРаботниковОрганизаций.Сотрудник
		|			И (РабочееВремяРаботниковОрганизаций.Регистратор <> &ДокументСсылка)
		|			И (РабочееВремяРаботниковОрганизаций.ВЦеломЗаПериод
		|					И РабочееВремяРаботниковОрганизаций.Период = &Месяц
		|				ИЛИ (НЕ РабочееВремяРаботниковОрганизаций.ВЦеломЗаПериод)
		|					И СотрудникиНаряда.ИндексДня = ДЕНЬ(РабочееВремяРаботниковОрганизаций.Период)
		|					И (РабочееВремяРаботниковОрганизаций.Период МЕЖДУ &НачалоМесяца И &КонецМесяца))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО СотрудникиНаряда.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|			И (СотрудникиНаряда.ИндексДня = ДЕНЬ(ГрафикиРаботыПоВидамВремени.Дата))
		|			И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
		|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца)
		|			И (ГрафикиРаботыПоВидамВремени.Документ <> &ДокументСсылка)
		|			И ((НЕ ГрафикиРаботыПоВидамВремени.План))
		|			И ((НЕ ГрафикиРаботыПоВидамВремени.Документ В (ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.СдельныйНаряд.ПустаяСсылка))))
		|ГДЕ
		|	(РабочееВремяРаботниковОрганизаций.НомерСтроки ЕСТЬ НЕ NULL 
		|			ИЛИ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL )
		|	И (РабочееВремяРаботниковОрганизаций.Регистратор ЕСТЬ НЕ NULL 
		|			ИЛИ ГрафикиРаботыПоВидамВремени.Документ ЕСТЬ НЕ NULL )";
		
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультата.Количество() > 0 Тогда
		СтрокаСотрудников = "";
		
		Пока ВыборкаРезультата.Следующий() Цикл
			СтрокаСотрудников = СтрокаСотрудников + Символы.ПС + ВыборкаРезультата.СотрудникНаименование+ " ("+ВыборкаРезультата.ДокументПредставление+")";
		КонецЦикла;
		
		ОбщегоНазначения.СообщитьОбОшибке("На следующих сотрудников уже введены документы учета отработанного времени в этом периоде" + СтрокаСотрудников,Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьУникальностьЗаписи()	

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// удалим движения
	УдалитьДвижения();
	
	УдалитьЗаписиЗаПериодДокумента();
	
	Если Не ЗначениеЗаполнено(СпособВводаДанных) Тогда
		СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();

ВидУчетаВремениПоДням			= Перечисления.ВидыУчетаВремени.ПоДням;
ВидУчетаВремениПоЧасам			= Перечисления.ВидыУчетаВремени.ПоЧасам;
ВидУчетаВремениПоВечернимЧасам	= Перечисления.ВидыУчетаВремени.ПоВечернимЧасам;
ВидУчетаВремениПоНочнымЧасам	= Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;

МассивПриставок = Новый Массив(3);
МассивПриставок[0] = "Первый";
МассивПриставок[1] = "Второй";
МассивПриставок[2] = "Третий";

КлассификаторНочноеВремя = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы;
КлассификаторВечернееВремя = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы;

КлассификаторЯвка = Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
КлассификаторВечерниеЧасы = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы;
КлассификаторНочныеЧасы = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы;
КлассификаторПустаяСсылка = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();

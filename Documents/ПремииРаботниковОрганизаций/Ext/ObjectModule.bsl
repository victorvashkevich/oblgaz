////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Заполняет показатели
//
Функция ЗаполнитьПоказатели(ТекущийСотрудник) Экспорт 
	
	Если ТекущийСотрудник = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФормаВводаПоказателей = РегистрыСведений.ЗначенияПоказателейСхемМотивации.ПолучитьФорму("ФормаВводаЗначенийПоказателей");
	ФормаВводаПоказателей.Организация		= Справочники.Организации.ПустаяСсылка();
	ФормаВводаПоказателей.ПериодДействия	= НачалоМесяца(ПериодРегистрации);
	
	ТЗНачисления	= Начисления.Выгрузить(,"Сотрудник");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Начисления",ТЗНачисления);
	Запрос.УстановитьПараметр("ПарамДата",НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ВидРасчета",ВидРасчета);
	
	// получим временную таблицу с сотрудниками и видами расчетов
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&Начисления КАК Начисления";
	
	Запрос.Выполнить();
	
	ВТНачисления = "ВТНачисления";
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Показатели.Показатель.ВидПоказателя КАК ВидПоказателя,
	|	Показатели.Показатель,
	|	Начисления.Сотрудник
	|ИЗ
	|	ВТНачисления КАК Начисления
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели
	|		ПО Показатели.Ссылка = &ВидРасчета
	|		И Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется)
	|		И Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)
	|		И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
	|		И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная)
	|		И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|		И Не Показатели.Показатель.Предопределенный
	|ГДЕ
	|	НЕ (Показатели.Показатель ЕСТЬ NULL)
	|	И НЕ (Начисления.Сотрудник ЕСТЬ NULL)";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Свернуть("ВидПоказателя,Показатель,Сотрудник");
	Показатели = ТаблицаЗапроса.ВыгрузитьКолонку("Показатель");
	Сотрудники = ТаблицаЗапроса.ВыгрузитьКолонку("Сотрудник");
	
	Если ЗначениеЗаполнено(ТаблицаЗапроса) Тогда

		ФормаВводаПоказателей.Организация = Организация;
		ФормаВводаПоказателей.ФормаАвтозаполнение(ТаблицаЗапроса, Сотрудники, Показатели, , Ложь);
		ФормаВводаПоказателей.мСотрудникДляОткрытия = ТекущийСотрудник;
		ФормаВводаПоказателей.Открыть();
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции //ЗаполнитьПоказатели

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//	Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если Не Проведен Тогда
		РаботаСДиалогами.ВывестиПредупреждение("Документ можно распечатать только после его проведения!");
		Возврат Неопределено;
	КонецЕсли;

	// Получить экземпляр документа на печать
	ИмяФормы = "";
	Если      ИмяМакета = "Т11а" Тогда
		ИмяФормы = " (форма Т-11а)";
		ТабДокумент = ПечатьТ11а();
		
	ИначеЕсли ИмяМакета = "Т11" Тогда
		ИмяФормы = " (форма Т-11)";
		ТабДокумент = ПечатьТ11();
	//vvv
	ИначеЕсли ИмяМакета = "Расчет" Тогда
		ИмяФормы = " (Расчет)";
		ТабДокумент = Печать13();
	//	
	КонецЕсли;

	Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним + ИмяФормы));

КонецФункции // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//	Структура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("Т11а",	"Форма Т-11а");
	СтруктураМакетов.Вставить("Т11",	"Форма Т-11");
	//vvv
	СтруктураМакетов.Вставить("Расчет",	"Печать расчета");
	//
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура Автозаполнение(ВременнаяТаблица = Неопределено, Реквизиты = Неопределено, ОсновноеНачисление = Истина) Экспорт
	
	Если ВременнаяТаблица = НеОпределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ВременнаяТаблица", ВременнаяТаблица);
	Запрос.УстановитьПараметр("ПарамВидРасчета",ВидРасчета);
	Запрос.УстановитьПараметр("ПарамПериодРегистрации",ПериодРегистрации);
	Запрос.УстановитьПараметр("ПарамСотрудники",ВременнаяТаблица.ВыгрузитьКолонку("Сотрудник"));
	Запрос.УстановитьПараметр("ПарамОрганизация",Организация);
	Запрос.УстановитьПараметр("ПарамДатаНачала",ДатаНачалаБП);
	Запрос.УстановитьПараметр("ПарамДатаОкончания",ДатаОкончанияБП);
	Запрос.УстановитьПараметр("парамВалютаРегламентУчета" , Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВременнаяТаблица.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблица.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&ВременнаяТаблица КАК ВременнаяТаблица
	|ИНДЕКСИРОВАТЬ ПО Сотрудник";	
	
	Запрос.Выполнить();

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВременнаяТаблица.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблица.Подразделение КАК Подразделение,	
	|	НачисленияОрганизацийПоказатели.Показатель,
	|	НачисленияОрганизацийПоказатели.НомерСтроки
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК НачисленияОрганизацийПоказатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК ВременнаяТаблица
	|		ПО Истина	
	|ГДЕ
	|	НачисленияОрганизацийПоказатели.Ссылка = &ПарамВидРасчета";
	
	Запрос.Выполнить();

	// таблица ВТЗначенияПоказателей
	// 
	// Поля:
	//   Сотрудник
	//   Показатель - введенный пользователем показатель
	//   Значение - значение показателя
	//
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияПоказателейСхемМотивации.Сотрудник КАК Сотрудник,
	|	Работники.ПодразделениеОрганизации КАК Подразделение,
	|	ЗначенияПоказателейСхемМотивации.Показатель КАК Показатель,
	|	ВЫБОР
	|		КОГДА ЗначенияПоказателейСхемМотивации.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
	|			ТОГДА ВЫБОР
	|					КОГДА ЗначенияПоказателейСхемМотивации.Валюта В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|						ТОГДА
	|							ЗначенияПоказателейСхемМотивации.Значение
	|					ИНАЧЕ ЗначенияПоказателейСхемМотивации.Значение * ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
	|				КОНЕЦ
	|	ИНАЧЕ 
	|			ЗначенияПоказателейСхемМотивации.Значение
	|	КОНЕЦ 
	|			КАК Значение
	|ПОМЕСТИТЬ ВТЗначенияПоказателей
	
	|ИЗ
	|		(ВЫБРАТЬ
	|			Ежемесячно.Организация,
	|			Ежемесячно.Подразделение КАК Подразделение,
	|			Ежемесячно.Показатель КАК Показатель,
	|			Ежемесячно.Валюта КАК Валюта,
	|			Ежемесячно.Значение КАК Значение,
	|			Ежемесячно.Сотрудник КАК Сотрудник
	|		ИЗ
	|			РегистрСведений.ЗначенияПоказателейСхемМотивации КАК Ежемесячно
	|		ГДЕ
	|			Ежемесячно.Значение ЕСТЬ НЕ NULL 
	|			И Ежемесячно.Организация = &парамОрганизация
	|			И Ежемесячно.ПериодДействия >= &ПарамДатаНачала
	|			И Ежемесячно.ПериодДействия <= &ПарамДатаОкончания
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Организация,
	|			ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Подразделение,
	|			ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Показатель,
	|			ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Валюта,
	|			ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Значение,
	|			NULL
	|		ИЗ
	|			РегистрСведений.ПериодическиеЗначенияПоказателейСхемМотивации.СрезПоследних(&ПарамДатаОкончания, Организация = &парамОрганизация) КАК ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних) КАК ЗначенияПоказателейСхемМотивации
	
		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ПарамДатаОкончания,
	|				Организация = &парамОрганизация
	|					И Сотрудник В (&ПарамСотрудники)) КАК Работники
	|		ПО (ВЫБОР
	|				КОГДА ЗначенияПоказателейСхемМотивации.Показатель.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателейСхемМотивации.Индивидуальный)
	|						ИЛИ ЗначенияПоказателейСхемМотивации.Показатель.ВидПоказателя ЕСТЬ NULL 
	|					ТОГДА Работники.Сотрудник = ЗначенияПоказателейСхемМотивации.Сотрудник
	|				КОГДА ЗначенияПоказателейСхемМотивации.Показатель.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателейСхемМотивации.ПоПодразделению)
	|					ТОГДА Работники.ПодразделениеОрганизации = ЗначенияПоказателейСхемМотивации.Подразделение
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|		ПО (Валюты.Период = &ПарамДатаОкончания)
	|			И ЗначенияПоказателейСхемМотивации.Валюта = Валюты.Валюта
	|ГДЕ
	|	ЗначенияПоказателейСхемМотивации.Показатель В(ВЫБРАТЬ Показатель Из ВТПоказатели)
	|	И ЗначенияПоказателейСхемМотивации.Организация = &парамОрганизация
	|	И ЗначенияПоказателейСхемМотивации.Значение ЕСТЬ НЕ NULL 
	|	И ВЫБОР
	|			КОГДА ЗначенияПоказателейСхемМотивации.Показатель.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателейСхемМотивации.Индивидуальный)
	|					ИЛИ ЗначенияПоказателейСхемМотивации.Показатель.ВидПоказателя ЕСТЬ NULL 
	|				ТОГДА ЗначенияПоказателейСхемМотивации.Сотрудник В (&ПарамСотрудники)
	|			КОГДА ЗначенияПоказателейСхемМотивации.Показатель.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателейСхемМотивации.ПоПодразделению)
	|				ТОГДА Работники.ПодразделениеОрганизации = ЗначенияПоказателейСхемМотивации.Подразделение
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Показатель
	|";
	Запрос.Выполнить();		
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизацийПоказатели.Показатель,
	|	ОсновныеНачисленияОрганизацийПоказатели.Ссылка.ЗачетОтработанногоВремени,
	|	ОсновныеНачисленияОрганизацийПоказатели.Ссылка,
	|	ОсновныеНачисленияОрганизацийПоказатели.НомерСтроки,
	|	ОсновныеНачисленияОрганизацийПоказатели.Ссылка.СпособРасчета
	|ПОМЕСТИТЬ ВТПоказателиИзПВР
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияОрганизацийПоказатели
	|ГДЕ
	|	ОсновныеНачисленияОрганизацийПоказатели.Показатель В (ВЫБРАТЬ Показатель Из ВТПоказатели)
	|				И (ОсновныеНачисленияОрганизацийПоказатели.Показатель.ВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ИзменяетсяПриРасчете)
	|					ИЛИ ОсновныеНачисленияОрганизацийПоказатели.Показатель.ВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	ИСТИНА,
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	NULL,
	|	ОсновныеНачисленияОрганизаций.СпособРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.Ссылка.ЗачетОтработанногоВремени 
	|	ИЛИ ОсновныеНачисленияОрганизаций.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам))
	|	ИЛИ ОсновныеНачисленияОрганизаций.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
	|	
	|";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Работники.ПодразделениеОрганизации КАК Подразделение,
	|	Начисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	Начисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	Показатели1.Показатель КАК ППоказатель1,
	|	Показатели2.Показатель КАК ППоказатель2,
	|	Показатели3.Показатель КАК ППоказатель3,
	|	Показатели4.Показатель КАК ППоказатель4,
	|	Показатели5.Показатель КАК ППоказатель5,
	|	Показатели6.Показатель КАК ППоказатель6,
	|	ВЫБОР
	|		КОГДА Показатели1.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
	|			ТОГДА ВЫБОР
	|					КОГДА Начисления.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|						ТОГДА Начисления.Показатель1
	|					ИНАЧЕ Начисления.Показатель1 * ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0)
	|				КОНЕЦ
	|		КОГДА Показатели1.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|			ТОГДА ТарифныеРазряды1.Размер
	|		ИНАЧЕ Начисления.Показатель1
	|	КОНЕЦ КАК Показатель1,
	|	ВЫБОР КОГДА Показатели2.Показатель ЕСТЬ НЕ NULL ТОГДА
	|		ВЫБОР
	|			КОГДА Показатели2.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
	|				ТОГДА ВЫБОР
	|						КОГДА Начисления.Валюта2 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|							ТОГДА Начисления.Показатель2
	|						ИНАЧЕ Начисления.Показатель2 * ЕСТЬNULL(Валюты2.Курс / Валюты2.Кратность, 0)
	|					КОНЕЦ
	|			КОГДА Показатели2.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|				ТОГДА ТарифныеРазряды2.Размер
	|			ИНАЧЕ Начисления.Показатель2
	|		КОНЕЦ
	|	КОНЕЦ КАК Показатель2,
	|	ВЫБОР КОГДА Показатели3.Показатель ЕСТЬ НЕ NULL ТОГДА
	|		ВЫБОР
	|			КОГДА Показатели3.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
	|				ТОГДА ВЫБОР
	|						КОГДА Начисления.Валюта3 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|							ТОГДА Начисления.Показатель3
	|						ИНАЧЕ Начисления.Показатель3 * ЕСТЬNULL(Валюты2.Курс / Валюты2.Кратность, 0)
	|					КОНЕЦ
	|			КОГДА Показатели3.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|				ТОГДА ТарифныеРазряды3.Размер
	|			ИНАЧЕ Начисления.Показатель3
	|		КОНЕЦ
	|	КОНЕЦ КАК Показатель3,
	|	ВЫБОР КОГДА Показатели4.Показатель ЕСТЬ НЕ NULL ТОГДА
	|		ВЫБОР
	|			КОГДА Показатели4.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
	|				ТОГДА ВЫБОР
	|						КОГДА Начисления.Валюта4 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|							ТОГДА Начисления.Показатель4
	|						ИНАЧЕ Начисления.Показатель4 * ЕСТЬNULL(Валюты4.Курс / Валюты4.Кратность, 0)
	|					КОНЕЦ
	|			КОГДА Показатели4.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|				ТОГДА ТарифныеРазряды4.Размер
	|			ИНАЧЕ Начисления.Показатель4
	|		КОНЕЦ
	|	КОНЕЦ КАК Показатель4,
	|	ВЫБОР КОГДА Показатели5.Показатель ЕСТЬ НЕ NULL ТОГДА
	|		ВЫБОР
	|			КОГДА Показатели5.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
	|				ТОГДА ВЫБОР
	|						КОГДА Начисления.Валюта5 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|							ТОГДА Начисления.Показатель5
	|						ИНАЧЕ Начисления.Показатель5 * ЕСТЬNULL(Валюты5.Курс / Валюты5.Кратность, 0)
	|					КОНЕЦ
	|			КОГДА Показатели5.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|				ТОГДА ТарифныеРазряды5.Размер
	|			ИНАЧЕ Начисления.Показатель5
	|		КОНЕЦ
	|	КОНЕЦ КАК Показатель5,
	|	ВЫБОР КОГДА Показатели6.Показатель ЕСТЬ НЕ NULL ТОГДА
	|		ВЫБОР
	|			КОГДА Показатели6.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
	|				ТОГДА ВЫБОР
	|						КОГДА Начисления.Валюта6 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|							ТОГДА Начисления.Показатель6
	|						ИНАЧЕ Начисления.Показатель6 * ЕСТЬNULL(Валюты6.Курс / Валюты6.Кратность, 0)
	|					КОНЕЦ
	|			КОГДА Показатели6.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|				ТОГДА ТарифныеРазряды6.Размер
	|			ИНАЧЕ Начисления.Показатель6
	|		КОНЕЦ
	|	КОНЕЦ КАК Показатель6
	|ПОМЕСТИТЬ ВТПлановыеНачисления
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|				&ПарамПериодРегистрации,
	|				Организация = &ПарамОрганизация
	|					И Сотрудник В (&ПарамСотрудники) И (ВидРасчета В (ВЫБРАТЬ Ссылка Из ВТПоказателиИзПВР))) КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ПарамДатаОкончания,
	|				Организация = &парамОрганизация
	|					И Сотрудник В (&ПарамСотрудники)) КАК Работники
	|		ПО (Работники.Сотрудник = Начисления.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты1
	|		ПО (Валюты1.Период = &ПарамДатаОкончания)
	|			И Начисления.Валюта1 = Валюты1.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты2
	|		ПО (Валюты2.Период = &ПарамДатаОкончания)
	|			И Начисления.Валюта2 = Валюты2.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты3
	|		ПО (Валюты3.Период = &ПарамДатаОкончания)
	|			И Начисления.Валюта3 = Валюты3.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты4
	|		ПО (Валюты4.Период = &ПарамДатаОкончания)
	|			И Начисления.Валюта4 = Валюты4.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты5
	|		ПО (Валюты5.Период = &ПарамДатаОкончания)
	|			И Начисления.Валюта5 = Валюты5.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты6
	|		ПО (Валюты6.Период = &ПарамДатаОкончания)
	|			И Начисления.Валюта6 = Валюты6.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ПарамДатаОкончания, ) КАК ТарифныеРазряды1
	|		ПО Начисления.ТарифныйРазряд1 = ТарифныеРазряды1.ТарифныйРазряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ПарамДатаОкончания, ) КАК ТарифныеРазряды2
	|		ПО Начисления.ТарифныйРазряд2 = ТарифныеРазряды2.ТарифныйРазряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ПарамДатаОкончания, ) КАК ТарифныеРазряды3
	|		ПО Начисления.ТарифныйРазряд3 = ТарифныеРазряды3.ТарифныйРазряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ПарамДатаОкончания, ) КАК ТарифныеРазряды4
	|		ПО Начисления.ТарифныйРазряд4 = ТарифныеРазряды4.ТарифныйРазряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ПарамДатаОкончания, ) КАК ТарифныеРазряды5
	|		ПО Начисления.ТарифныйРазряд5 = ТарифныеРазряды5.ТарифныйРазряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ПарамДатаОкончания, ) КАК ТарифныеРазряды6
	|		ПО Начисления.ТарифныйРазряд6 = ТарифныеРазряды6.ТарифныйРазряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиИзПВР КАК Показатели1
	|			ПО Показатели1.Ссылка = Начисления.ВидРасчета
	|			И Показатели1.НомерСтроки = 1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиИзПВР КАК Показатели2
	|			ПО Показатели2.Ссылка = Начисления.ВидРасчета
	|			И Показатели2.НомерСтроки = 2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиИзПВР КАК Показатели3
	|			ПО Показатели3.Ссылка = Начисления.ВидРасчета
	|			И Показатели3.НомерСтроки = 3
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиИзПВР КАК Показатели4
	|			ПО Показатели4.Ссылка = Начисления.ВидРасчета
	|			И Показатели4.НомерСтроки = 4
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиИзПВР КАК Показатели5
	|			ПО Показатели5.Ссылка = Начисления.ВидРасчета
	|			И Показатели5.НомерСтроки = 5
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиИзПВР КАК Показатели6
	|			ПО Показатели6.Ссылка = Начисления.ВидРасчета
	|			И Показатели6.НомерСтроки = 6
	|ГДЕ
	|	Начисления.Показатель1 <> 0 ИЛИ Начисления.Показатель2 <> 0 ИЛИ Начисления.Показатель3 <> 0 ИЛИ Начисления.Показатель4 <> 0 ИЛИ Начисления.Показатель5 <> 0 ИЛИ Начисления.Показатель6 <> 0 ";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ПарамВидРасчета КАК ВидРасчета,
	|	&ПарамДатаНачала КАК ДатаНачала,
	|	&ПарамДатаОкончания КАК ДатаОкончания,
	|	ИСТИНА КАК Авторасчет,
	|	Показатели.Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА Показатели.НомерСтроки = 1
	|				ТОГДА ЗначенияПлановыхИФактическихПоказателей.ЗначениеПоказателя
	|		КОНЕЦ) КАК Показатель1,
	|	СУММА(ВЫБОР
	|			КОГДА Показатели.НомерСтроки = 2
	|				ТОГДА ЗначенияПлановыхИФактическихПоказателей.ЗначениеПоказателя
	|		КОНЕЦ) КАК Показатель2,
	|	СУММА(ВЫБОР
	|			КОГДА Показатели.НомерСтроки = 3
	|				ТОГДА ЗначенияПлановыхИФактическихПоказателей.ЗначениеПоказателя
	|		КОНЕЦ) КАК Показатель3,
	|	СУММА(ВЫБОР
	|			КОГДА Показатели.НомерСтроки = 4
	|				ТОГДА ЗначенияПлановыхИФактическихПоказателей.ЗначениеПоказателя
	|		КОНЕЦ) КАК Показатель4,
	|	СУММА(ВЫБОР
	|			КОГДА Показатели.НомерСтроки = 5
	|				ТОГДА ЗначенияПлановыхИФактическихПоказателей.ЗначениеПоказателя
	|		КОНЕЦ) КАК Показатель5,
	|	СУММА(ВЫБОР
	|			КОГДА Показатели.НомерСтроки = 6
	|				ТОГДА ЗначенияПлановыхИФактическихПоказателей.ЗначениеПоказателя
	|		КОНЕЦ) КАК Показатель6
	|ИЗ
	|	ВТПоказатели КАК Показатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПлановыеНачисления.Сотрудник КАК Сотрудник,
	|			ПлановыеНачисления.Подразделение КАК Подразделение,
	|			ПлановыеНачисления.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|			ПлановыеНачисления.СпособРасчета КАК СпособРасчета,
	|			ПлановыеНачисления.ППоказатель1 КАК Показатель,
	|			ПлановыеНачисления.Показатель1 КАК ЗначениеПоказателя
	|		ИЗ
	|			ВТПлановыеНачисления КАК ПлановыеНачисления
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ПлановыеНачисления.Сотрудник,
	|			ПлановыеНачисления.Подразделение КАК Подразделение,	
	|			ЛОЖЬ,
	|			NULL,
	|			ПлановыеНачисления.ППоказатель2,
	|			ПлановыеНачисления.Показатель2
	|		ИЗ
	|			ВТПлановыеНачисления КАК ПлановыеНачисления
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ПлановыеНачисления.Сотрудник,
	|			ПлановыеНачисления.Подразделение КАК Подразделение,	
	|			ЛОЖЬ,
	|			NULL,
	|			ПлановыеНачисления.ППоказатель3,
	|			ПлановыеНачисления.Показатель3
	|		ИЗ
	|			ВТПлановыеНачисления КАК ПлановыеНачисления
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ПлановыеНачисления.Сотрудник,
	|			ПлановыеНачисления.Подразделение КАК Подразделение,
	|			ЛОЖЬ,
	|			NULL,
	|			ПлановыеНачисления.ППоказатель4,
	|			ПлановыеНачисления.Показатель4
	|		ИЗ
	|			ВТПлановыеНачисления КАК ПлановыеНачисления
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ПлановыеНачисления.Сотрудник,
	|			ПлановыеНачисления.Подразделение КАК Подразделение,	
	|			ЛОЖЬ,
	|			NULL,
	|			ПлановыеНачисления.ППоказатель5,
	|			ПлановыеНачисления.Показатель5
	|		ИЗ
	|			ВТПлановыеНачисления КАК ПлановыеНачисления
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ПлановыеНачисления.Сотрудник,
	|			ПлановыеНачисления.Подразделение КАК Подразделение,
	|			ЛОЖЬ,
	|			NULL,
	|			ПлановыеНачисления.ППоказатель6,
	|			ПлановыеНачисления.Показатель6
	|		ИЗ
	|			ВТПлановыеНачисления КАК ПлановыеНачисления
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ЗначенияПоказателей.Сотрудник,
	|			ЗначенияПоказателей.Подразделение КАК Подразделение,
	|			ЛОЖЬ,
	|			NULL,
	|			ЗначенияПоказателей.Показатель,
	|			ЗначенияПоказателей.Значение
	|		ИЗ
	|			ВТЗначенияПоказателей КАК ЗначенияПоказателей) КАК ЗначенияПлановыхИФактическихПоказателей
	|		ПО (ЗначенияПлановыхИФактическихПоказателей.Показатель = Показатели.Показатель И ЗначенияПлановыхИФактическихПоказателей.ЗначениеПоказателя <> 0
	|				ИЛИ Показатели.Показатель.ТарифнаяСтавка
	|					И ЗначенияПлановыхИФактическихПоказателей.ЗачетОтработанногоВремени
	|				ИЛИ Показатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	|					И ЗначенияПлановыхИФактическихПоказателей.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам))
	|				ИЛИ Показатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
	|					И ЗначенияПлановыхИФактическихПоказателей.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|				ИЛИ Показатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
	|					И ЗначенияПлановыхИФактическихПоказателей.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок)))	
	|			И (Показатели.Показатель.ВидПоказателя = Значение(Перечисление.ВидыПоказателейСхемМотивации.Индивидуальный) И Показатели.Сотрудник = ЗначенияПлановыхИФактическихПоказателей.Сотрудник
	|			ИЛИ Показатели.Показатель.ВидПоказателя = Значение(Перечисление.ВидыПоказателейСхемМотивации.ПоПодразделению) И Показатели.Подразделение = ЗначенияПлановыхИФактическихПоказателей.Подразделение
	|			ИЛИ Показатели.Показатель.ВидПоказателя = Значение(Перечисление.ВидыПоказателейСхемМотивации.Общий))

	|ГДЕ
	|	Показатели.Сотрудник ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	Показатели.Сотрудник";
		
	
	Начисления.Загрузить(Запрос.Выполнить().Выгрузить());


КонецПроцедуры
	
// Заполняет документ по перерассчитываемому документу
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Знач Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	
	Если Сотрудники = "ПоДаннымПерерасчета" Тогда
		Исправления = ПроведениеРасчетов.ПолучитьДокументИсправление(ПерерассчитываемыйДокумент, "КритерийОтбора"); 
		Запрос.УстановитьПараметр("Исправления", Исправления);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Сотрудник
		|ИЗ
		|	Документ.ПремииРаботниковОрганизаций.Начисления КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ СотрудникиОрганизаций.Сотрудник В
		|				(ВЫБРАТЬ
		|					Начисления.Сотрудник
		|				ИЗ
		|					Документ.ПремииРаботниковОрганизаций.Начисления КАК Начисления
		|				ГДЕ
		|					Начисления.Ссылка В (&Исправления)
		|					И Начисления.Сторно))
		|	И СотрудникиОрганизаций.Физлицо В
		|			(ВЫБРАТЬ
		|				Перерасчет.ФизЛицо
		|			ИЗ
		|				РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
		|			ГДЕ
		|				Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент)";
		Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам", Сотрудники = Неопределено);
	
	// выполним запрос к Начисления
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.Физлицо КАК Физлицо,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	-Начисления.Результат КАК Результат,
	|	-Начисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
	|	ИСТИНА КАК Сторно,
	|	ЛОЖЬ КАК Авторасчет,
	|	Начисления.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПремииРаботниковОрганизаций.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Начисления.Сторно)
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Начисления.Сотрудник В (&Сотрудники))
	|	И Начисления.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.Физлицо,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	0,
	|	0,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	Начисления.НомерСтроки
	|ИЗ
	|	Документ.ПремииРаботниковОрганизаций.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Начисления.Сторно)
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Начисления.Сотрудник В (&Сотрудники))
	|	И Начисления.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сторно УБЫВ,
	|	НомерСтроки";
	
	Начисления.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

// Выполняет перерасчет по заданному списку физлиц
// Если передан пустой список физлиц - перерасчет не проводится
// Если в качестве списка физлиц передан не массив, а Неопределено - перерасчет по всем физлицам 
// регистратора по которым требуется перерасчет
//
// Параметры
//	Физлица	- список значений - ссылки на физлиц
// Возвращаемое значение
//	Нет
//
Процедура Перерассчитать(Физлица = Неопределено) Экспорт
	
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	Если Не ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// получим список перерассчитываемых физлиц
	ФизлицаСписок = Новый СписокЗначений;
	Если Физлица = Неопределено Тогда
		// таблица ФизлицаДляПерерасчета
		// Список физлиц по которым необходимо выполнить перерасчет
		// Поля:
		//		ФизЛицо
		// Описание:
		// Получает список неповторяющихся физлиц по которым есть записи
		// перерасчета в одной из таблиц перерасчета - по основным или дополнительным начислениям
		//
		ФизлицаДляПерерасчетаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Перерасчет.ФизЛицо
		|	ИЗ
		|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
		|	
		|	ГДЕ
		|		Перерасчет.ОбъектПерерасчета = &парамРегистратор";
		
		Запрос = Новый Запрос(ФизлицаДляПерерасчетаТекст);
		Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
		ФизлицаСписок.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
		
	Иначе
		ФизлицаСписок = Физлица;
		
	КонецЕсли;

	// если не перерассчитываем никого - возврат
	Если ФизлицаСписок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	// Прочитаем все данные в одной транзакции
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке("").Выбрать();
	Движения.ДополнительныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.НДФЛСведенияОДоходах.Прочитать();
	ЗафиксироватьТранзакцию();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	////////////////////////////////////////////////////////////////////////
	// Дополнительные начисления и сведения о доходах НДФЛ
	
	// сначала удалим сведения о доходах НДФЛ по перерассчитываемым физлицам
	НДФЛСведенияОДоходах = Движения.НДФЛСведенияОДоходах;
	ПоследнееДвижение = НДФЛСведенияОДоходах.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		// удалим записи по всем физлицам полученного списка
		// обходим в обратном порядке
		Если ФизлицаСписок.НайтиПоЗначению(НДФЛСведенияОДоходах[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
			НДФЛСведенияОДоходах.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	
	// перерассчитываем записи начислений
	// при этом передаем не только набор записей регистра расчета, но и набор записей регистра 
	// накопления со сведениями об отработанном времени
	// а также таблицу значений в которую будет заполнять движения для НДФЛСведенияОДоходах
	ДвиженияНДФЛСведенияОДоходах = 	Движения.НДФЛСведенияОДоходах.Выгрузить();// фактически - создаем структуру таблицы значений
	ПроведениеРасчетов.ПереРассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", Движения.ДополнительныеНачисленияРаботниковОрганизаций, Физлица, ДвиженияНДФЛСведенияОДоходах,, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, Начисления);
	// запишем набор
	Движения.ДополнительныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	
	// запишем движения по доходам НДФЛ, которые формируются при ПереРассчитатьЗаписиРегистраРасчета
	ПроведениеРасчетов.СвернутьДвиженияНДФЛСведенияОДоходах(ДвиженияНДФЛСведенияОДоходах);
	Движения.НДФЛСведенияОДоходах.Загрузить(ДвиженияНДФЛСведенияОДоходах);
	Движения.НДФЛСведенияОДоходах.Записать();
	
	// записываем документ перед вызовом формирование взаиморасчетов с работниками
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// взаиморасчеты с работниками

	// ведется ли учет задолженности в разрезе периодов возникновения задолженности
	УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");

	// сначала удалим сведения о взаиморасчетах с работниками
	ВзаиморасчетыСРаботникамиОрганизаций = Движения.ВзаиморасчетыСРаботникамиОрганизаций;
	ВзаиморасчетыСРаботникамиОрганизаций.Записать();
	
	ВыборкаПоНачислениям = СформироватьЗапросПоВзаиморасчетам().Выбрать();

	Пока ВыборкаПоНачислениям.Следующий() Цикл
		// Заполним записи в наборах записей регистров
		ДобавитьСтрокуВДвиженияПоВзаиморасчетам(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетЗадолженностиПоМесяцам);
	КонецЦикла;
	
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Удалим записи перерасчета по которым выполнен перерасчет
	ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка);
	
КонецПроцедуры // Перерассчитать()

Процедура РассчитатьПремию(Сотрудник = Неопределено) Экспорт
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке("ПоРеквизитамДокумента").Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоДопНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Сотрудник).Выбрать();
	ЗафиксироватьТранзакцию();

	//массивы для хранения индексов строк табличных частей,
	//используются для расчета по одному сотруднику
	Если Сотрудник = Неопределено Тогда
		МассивИндексыСтрокНачисления = Неопределено;
		
	Иначе
		МассивИндексыСтрокНачисления = Новый Массив();
		
	КонецЕсли;
	
	Отказ = Ложь;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ,Заголовок);
	
	// создадим наборы записей для выполнения движений
	НаборДопНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборДопНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоДопНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоДопНачислениям, Отказ,Заголовок);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВДвиженияПоРегистрамРасчета(ВыборкаПоШапкеДокумента, ВыборкаПоДопНачислениям, НаборДопНачисления);
			
			Если НЕ (Сотрудник = Неопределено) Тогда
				МассивИндексыСтрокНачисления.Добавить(ВыборкаПоДопНачислениям.НомерСтроки-1);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДопНачисления,,,ВыборкаПоШапкеДокумента.ГоловнаяОрганизация,,Начисления,,,,,, МассивИндексыСтрокНачисления, Сотрудник);
	
	//vvv
	Если ВидРасчета.СпособРасчета=Перечисления.СпособыРасчетаОплатыТруда.ПроцентомСКТУ ТОгда		
		
		ПоТарифу   = 0;
		СуммаВесов = 0;

		Для Каждого Стр из Начисления Цикл
			
			Вес = Стр.Результат * Стр.Показатель2;
			СуммаВесов = СуммаВесов + Вес;
			ПоТарифу = ПоТарифу + Стр.Результат;
			
		КонецЦикла;	
		
		СуммаДляРаспределения = ПоТарифу * ПроцентПремии / 100;
		
		Коэффициент=СуммаДляРаспределения / СуммаВесов;
		
		Для Каждого Стр Из Начисления Цикл
			
			Стр.Результат=Стр.Результат*Стр.Показатель2*Коэффициент;
			
		КонецЦикла;		
		
	КонецЕсли;	
	//
	// Удаляем движения
	НаборДопНачисления.Очистить();
	НаборДопНачисления.Записать();
	
КонецПроцедуры // РассчитатьПремию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует запрос по документу и связанным регистрам сведений
//
// Параметры: 
//	Режим	- строка, может принимать значения:
//				"ПоРеквизитамДокумента"
//				"ПоТабличнойЧастиДокумента"
//
// Возвращаемое значение:
//	Результат запроса с данными об организации или о работниках из табличной части
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата);

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница",Организация);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо.Наименование КАК ФизическоеЛицоНаименование,
		|	ОтветственныеЛицаСрезПоследних.Должность.Наименование КАК ДолжностьНаименование,
		|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо,
		|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо.Комментарий
		|ПОМЕСТИТЬ ВТДанныеОбОтветственномЛице
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
		|			&ДатаДокумента,
		|			СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|				И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаСрезПоследних";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПремииРаботниковОрганизации.Дата КАК ДатаДок,
		|	ПремииРаботниковОрганизации.Номер КАК НомерДок,
		|	ВЫРАЗИТЬ(ПремииРаботниковОрганизации.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
		|	ПремииРаботниковОрганизации.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ДолжностьНаименование КАК ДолжностьРуководителя,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицоНаименование) КАК ФИОРуководителя,
		|	ПремииРаботниковОрганизации.ВидРасчета.Наименование КАК РасчетСтрокой,
		|	ПремииРаботниковОрганизации.Организация.Префикс
		|ИЗ
		|	Документ.ПремииРаботниковОрганизаций КАК ПремииРаботниковОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОбОтветственномЛице КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				ФизЛицо В
		|					(ВЫБРАТЬ
		|						ДанныеОбОтветственномЛице.ФизическоеЛицо
		|					ИЗ
		|						ВТДанныеОбОтветственномЛице КАК ДанныеОбОтветственномЛице)) КАК ФИОФизЛицСрезПоследних
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ПремииРаботниковОрганизации.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ПремииРаботниковОрганизацииНачисления.Сотрудник.Наименование) КАК Работник,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаДокумента
		|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения.Наименование
		|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.Наименование
		|	КОНЕЦ КАК ПодразделениеРаботника,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаДокумента
		|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения.Наименование
		|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность.Наименование
		|	КОНЕЦ КАК Должность,
		|	ПремииРаботниковОрганизацииНачисления.Показатель1,
		|	ПремииРаботниковОрганизацииНачисления.Показатель2,
		|	ПремииРаботниковОрганизацииНачисления.Показатель3,
		|	ПремииРаботниковОрганизацииНачисления.Показатель4,
		|	ПремииРаботниковОрганизацииНачисления.Показатель5,
		|	ПремииРаботниковОрганизацииНачисления.Показатель6,
		|	ПремииРаботниковОрганизацииНачисления.Результат КАК Величина,
		|	ПремииРаботниковОрганизацииНачисления.Сотрудник.Код КАК ТабельныйНомер
		|ИЗ
		|	Документ.ПремииРаботниковОрганизаций.Начисления КАК ПремииРаботниковОрганизацииНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&ДатаДокумента,
		|				Сотрудник В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПремииРаботниковОрганизацииНачисления.Сотрудник
		|					ИЗ
		|						Документ.ПремииРаботниковОрганизаций.Начисления КАК ПремииРаботниковОрганизацииНачисления
		|					ГДЕ
		|						ПремииРаботниковОрганизацииНачисления.Ссылка = &ДокументСсылка)) КАК РаботникиОрганизацииСрезПоследних
		|		ПО ПремииРаботниковОрганизацииНачисления.Сотрудник = РаботникиОрганизацииСрезПоследних.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				Физлицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПремииРаботниковОрганизацииНачисления.Сотрудник.Физлицо
		|					ИЗ
		|						Документ.ПремииРаботниковОрганизаций.Начисления КАК ПремииРаботниковОрганизацииНачисления
		|					ГДЕ
		|						ПремииРаботниковОрганизацииНачисления.Ссылка = &ДокументСсылка)) КАК ФИОФизЛиц
		|		ПО ПремииРаботниковОрганизацииНачисления.Сотрудник.Физлицо = ФИОФизЛиц.ФизЛицо
		|ГДЕ
		|	ПремииРаботниковОрганизацииНачисления.Ссылка = &ДокументСсылка
		|	И (НЕ ПремииРаботниковОрганизацииНачисления.Сторно)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПремииРаботниковОрганизацииНачисления.НомерСтроки";

	Иначе
		Возврат Неопределено;
		
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой "Т-11а",
//
// Возвращаемое значение:
//	Табличный документ - печатная форма
//
Функция ПечатьТ11а()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПремииРаботниковОрганизации_Т11а";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;

	// получаем данные для печати
	ВыборкаДляШапкиИПодвала = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	// запоминаем области макета
	Макет = ПолучитьМакет("Т11а");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Строка"); // строка работника

	ВыводитьИтоги = Ложь;
	
	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапкиИПодвала.Следующий() Тогда 
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Для подвала
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.

	ВыведеноСтрок = 0;
	ПодИтогСтраницы = 0;
	ИтогДокумента = 0;
	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		ПодИтогСтраницы = ПодИтогСтраницы + ВыборкаРаботники.Величина;
		ИтогДокумента = ИтогДокумента + ВыборкаРаботники.Величина;
		
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;

		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ПодИтогСтраницы = 0;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьМакета.Параметры.Количество() Цикл
		ОбластьМакета.Параметры.Установить(Сч - 1,""); 
	КонецЦикла;
	ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
	Пока ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, Ложь) Цикл
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТ11а()

// Функция формирует табличный документ с печатной формой "Т-11",
//
// Возвращаемое значение:
//	Табличный документ - печатная форма
//
Функция ПечатьТ11()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПремииРаботниковОрганизации_Т11";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет("Т11");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника

	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // название вида расчета
	КонецЕсли;

	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	СтрокаЧисла = РаботаСДиалогами.СформироватьСуммуПрописью(1,Валюта);
	Если СтрДлина(СтрокаЧисла) = 4 Тогда
		НазваниеЦелыхЕдиниц = " руб.) ";	
		НазваниеДробныхЕдиниц = " коп.";	
	Иначе
		НазваниеЦелыхЕдиниц = " " + Сред(СтрокаЧисла,6,3) + ".)";	
		НазваниеДробныхЕдиниц = " " + Сред(СтрокаЧисла,Найти(СтрокаЧисла,"00") + 3,3) + ".)";
	КонецЕсли;
	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		// Шапка документа.
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;
		
		Результат = ВыборкаРаботники.Величина;
		ОбластьМакета.Параметры.ПредставлениеВеличины =РаботаСДиалогами.СформироватьСуммуПрописью(Результат,Валюта);
		Если Результат = 0 Тогда
			ОбластьМакета.Параметры.ПредставлениеВеличиныкр = "(________ руб.)";
		Иначе
			ОбластьМакета.Параметры.ПредставлениеВеличиныкр = "( " + СтрЗаменить(Формат(Результат,"ЧЦ=15; ЧДЦ=0; ЧРД=,; ЧН=' '"),",",НазваниеЦелыхЕдиниц);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции // ПечатьТ11()

//vvv
Функция Печать13()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПремииРаботниковОрганизации_Расчет";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Макет = ПолучитьМакет("Расчет");
	
	ОбластьШапка=Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока=Макет.ПолучитьОбласть("Строка");
	ОбластьШапкаПодразделение=Макет.ПолучитьОбласть("Подразд");
	ОбластьИтогоПодразделение=Макет.ПолучитьОбласть("ИтПодразд");
	ОбластьПодвал=Макет.ПолучитьОбласть("Подвал");

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("парамРегистратор",Ссылка);
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник.Код КАК ТабНомер,
	|	ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник.Наименование КАК Сотрудник,
	|	ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник КАК СотрудникСсылка,
	|	ЕСТЬNULL(ДополнительныеНачисленияРаботниковОрганизаций.Показатель1, 0) КАК КТУ,
	|	ЕСТЬNULL(ДополнительныеНачисленияРаботниковОрганизаций.База13, 0) КАК База,
	|	ЕСТЬNULL(ДополнительныеНачисленияРаботниковОрганизаций.Результат, 0) КАК Сумма13,
	|	ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник.ТекущееПодразделениеОрганизации КАК ПодразделениеОрганизации
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
	|ГДЕ
	|	ДополнительныеНачисленияРаботниковОрганизаций.Регистратор = &парамРегистратор
	|	И ДополнительныеНачисленияРаботниковОрганизаций.Результат <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПодразделениеОрганизации,
	|	Сотрудник";
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОбластьШапка.Параметры.Организация=Организация;
	ОбластьШапка.Параметры.Год=Год(НачалоГода(ПериодРегистрации)-86400);
	ТабДокумент.Вывести(ОбластьШапка);
	
	ИтБаза=0;
	ИтПриведенный=0;
	ИтСумма13=0;
		
	Пока Выборка.СледующийПоЗначениюПоля("ПодразделениеОрганизации") Цикл
		
		ОбластьШапкаПодразделение.Параметры.Заполнить(Выборка);
		
		ТабДокумент.Вывести(ОбластьШапкаПодразделение);
		
		ИтБазаПодр=0;
		ИтПриведенныйПодр=0;
		ИтСумма13Подр=0;
		
		Пока Выборка.СледующийПоЗначениюПоля("СотрудникСсылка") Цикл
			
			ОбластьСтрока.Параметры.Заполнить(Выборка);
			ОбластьСтрока.Параметры.Сотрудник=СокрЛП(Выборка.Сотрудник);
			ОбластьСтрока.Параметры.ТабНомер=СокрЛП(Выборка.ТабНомер);
			ОбластьСтрока.Параметры.КТУ=Выборка.КТУ/100;
			Приведенный=ОбщегоНазначения.ОкруглитьПоВалюте(Выборка.База*Выборка.КТУ/100,Константы.ВалютаРегламентированногоУчета.Получить());
			ОбластьСтрока.Параметры.Приведенный=Приведенный;
			
			ТабДокумент.Вывести(ОбластьСтрока);
			
			ИтБазаПодр=ИтБазаПодр+Выборка.База;
			ИтПриведенныйПодр=ИтПриведенныйПодр+Приведенный;
			ИтСумма13Подр=ИтСумма13Подр+Выборка.Сумма13;
			
			ИтБаза=ИтБаза+Выборка.База;
			ИтПриведенный=ИтПриведенный+Приведенный;
			ИтСумма13=ИтСумма13+Выборка.Сумма13;
	
		КонецЦикла;
		
		ОбластьИтогоПодразделение.Параметры.ИтБазаПодр=ИтБазаПодр;
		ОбластьИтогоПодразделение.Параметры.ИтПриведенныйПодр=ИтПриведенныйПодр;
		ОбластьИтогоПодразделение.Параметры.ИтСумма13Подр=ИтСумма13Подр;
		
		ТабДокумент.Вывести(ОбластьИтогоПодразделение);
		
	КонецЦикла;
	
	ОбластьПодвал.Параметры.ИтБаза=ИтБаза;
	ОбластьПодвал.Параметры.ИтПриведенный=ИтПриведенный;
	ОбластьПодвал.Параметры.ИтСумма13=ИтСумма13;
	
	ТабДокумент.Вывести(ОбластьПодвал);
	
	Возврат ТабДокумент;

КонецФункции // Печать13()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПремииРаботниковОрганизации.Дата,
	|	ПремииРаботниковОрганизации.ПериодРегистрации,
	|	ПремииРаботниковОрганизации.Организация,
	|	ВЫБОР
	|		КОГДА ПремииРаботниковОрганизации.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА ПремииРаботниковОрганизации.Организация
	|		ИНАЧЕ ПремииРаботниковОрганизации.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ПремииРаботниковОрганизации.Организация КАК ОбособленноеПодразделение,
	|	ПремииРаботниковОрганизации.ВидРасчета,
	|	ПремииРаботниковОрганизации.ЧислоМесяцев,
	//vvv
	|	ПремииРаботниковОрганизации.КоэффициентРаспределения,
	//
	|	ПремииРаботниковОрганизации.ДатаНачалаБП КАК БазовыйПериодНачало,
	|	ПремииРаботниковОрганизации.ДатаОкончанияБП КАК БазовыйПериодКонец,
	|	ПремииРаботниковОрганизации.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	ПремииРаботниковОрганизации.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	ПремииРаботниковОрганизации.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ПремииРаботниковОрганизации.Ссылка,
	|	ПремииРаботниковОрганизации.ВидРасчета.ВидПремии КАК ВидПремии,
	|	ПремииРаботниковОрганизации.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ПремииРаботниковОрганизации.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	(НЕ ПремииРаботниковОрганизации.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме) КАК РегистрироватьСуммыКВыплате
	|ИЗ
	|	Документ.ПремииРаботниковОрганизаций КАК ПремииРаботниковОрганизации
	|ГДЕ
	|	ПремииРаботниковОрганизации.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//	Режим	- режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Сотрудник = Неопределено)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",				Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("НачалоПериодаРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериодаРегистрации",	КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаРегистрации",			?(Дата > КонецМесяца(ПериодРегистрации),КонецМесяца(ПериодРегистрации),?(Дата < ПериодРегистрации,ПериодРегистрации,Дата)));
	Запрос.УстановитьПараметр("Принят",						Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	
	Если НЕ (Сотрудник = Неопределено) Тогда
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		
		УсловиеНаСотрудникТекст			= " И СтрокиНачисления.Сотрудник = &Сотрудник ";	
		УсловиеНаСотрудникТекстПремии	= " И ПремииРаботниковОрганизацииНачисления.Сотрудник = &Сотрудник ";
		
	Иначе
		УсловиеНаСотрудникТекст			= "";
		УсловиеНаСотрудникТекстПремии	= "";
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуПослеРегистрации.ПричинаИзмененияСостояния = &Принят
	|			ТОГДА ДанныеПоРаботникуПослеРегистрации.ПодразделениеОрганизации
	|		ИНАЧЕ ВЫБОР
	|				КОГДА  ДанныеПоРаботникуДоРегистрации.ПериодЗавершения <= &ДатаРегистрации
	|					И ДанныеПоРаботникуДоРегистрации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ДанныеПоРаботникуДоРегистрации.ПодразделениеОрганизацииЗавершения
	|				ИНАЧЕ ДанныеПоРаботникуДоРегистрации.ПодразделениеОрганизации
	|			КОНЕЦ
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	//vvv
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуПослеРегистрации.ПричинаИзмененияСостояния = &Принят
	|			ТОГДА ДанныеПоРаботникуПослеРегистрации.Должность
	|		ИНАЧЕ ВЫБОР
	|				КОГДА  ДанныеПоРаботникуДоРегистрации.ПериодЗавершения <= &ДатаРегистрации
	|					И ДанныеПоРаботникуДоРегистрации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ДанныеПоРаботникуДоРегистрации.ДолжностьЗавершения
	|				ИНАЧЕ ДанныеПоРаботникуДоРегистрации.Должность
	|			КОНЕЦ
	|	КОНЕЦ КАК Должность,
	//
	|	СтрокиНачисления.Результат,
	//vvv
	|	СтрокиНачисления.База13,
	|	СтрокиНачисления.ППС,
	//
	|	СтрокиНачисления.Авторасчет,
	|	СтрокиНачисления.Сторно,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.Ссылка.ПерерассчитываемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоРегистрации.ПериодЗавершения <= &ДатаРегистрации
	|						И ДанныеПоРаботникуДоРегистрации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) И ДанныеПоРаботникуДоРегистрации.ПричинаИзмененияСостоянияЗавершения = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ВЫБОР
	|					КОГДА ДОБАВИТЬКДАТЕ(ДанныеПоРаботникуДоРегистрации.ПериодЗавершения, ДЕНЬ, -1) < &НачалоПериодаРегистрации
	|						ТОГДА &ДатаРегистрации
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ДанныеПоРаботникуДоРегистрации.ПериодЗавершения, ДЕНЬ, -1)
	|				КОНЕЦ
	|		КОГДА ДанныеПоРаботникуДоРегистрации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ВЫБОР
	|					КОГДА ДОБАВИТЬКДАТЕ(ДанныеПоРаботникуДоРегистрации.Период, ДЕНЬ, -1) < &НачалоПериодаРегистрации
	|						ТОГДА &ДатаРегистрации
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ДанныеПоРаботникуДоРегистрации.Период, ДЕНЬ, -1)
	|				КОНЕЦ
	|		КОГДА ДанныеПоРаботникуПослеРегистрации.ПричинаИзмененияСостояния = &Принят
	|			ТОГДА 
	|				  ВЫБОР
	|					КОГДА ДанныеПоРаботникуПослеРегистрации.Период > &КонецПериодаРегистрации
	|					ТОГДА &ДатаРегистрации
	|					ИНАЧЕ 
	|						ВЫБОР 
	|							КОГДА ДанныеПоРаботникуПослеРегистрации.ПериодЗавершения <= &ДатаРегистрации
	|									И ДанныеПоРаботникуДоРегистрации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА ДанныеПоРаботникуПослеРегистрации.ПериодЗавершения
	|							ИНАЧЕ ДанныеПоРаботникуПослеРегистрации.Период
	|						КОНЕЦ	
	|				  КОНЕЦ
	|		ИНАЧЕ &ДатаРегистрации
	|	КОНЕЦ КАК ДатаРегистрации,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ
	|	Документ.ПремииРаботниковОрганизаций.Начисления КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		&ДатаРегистрации,
	|		Сотрудник В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ПремииРаботниковОрганизацииНачисления.Сотрудник
	|			ИЗ
	|				Документ.ПремииРаботниковОрганизаций.Начисления КАК ПремииРаботниковОрганизацииНачисления
	|			ГДЕ
	|				ПремииРаботниковОрганизацииНачисления.Ссылка = &ДокументСсылка" + УсловиеНаСотрудникТекстПремии + ")) КАК ДанныеПоРаботникуДоРегистрации
	|		ПО ДанныеПоРаботникуДоРегистрации.Сотрудник = СтрокиНачисления.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПервых(
	|		&ДатаРегистрации,
	|		Сотрудник В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ПремииРаботниковОрганизацииНачисления.Сотрудник
	|			ИЗ
	|				Документ.ПремииРаботниковОрганизаций.Начисления КАК ПремииРаботниковОрганизацииНачисления
	|			ГДЕ
	|				ПремииРаботниковОрганизацииНачисления.Ссылка = &ДокументСсылка" + УсловиеНаСотрудникТекстПремии + ")) КАК ДанныеПоРаботникуПослеРегистрации
	|		ПО ДанныеПоРаботникуПослеРегистрации.Сотрудник = СтрокиНачисления.Сотрудник
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка" + УсловиеНаСотрудникТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//	Режим	- режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоДоходам()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("Регистратор" , Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Доходы.ФизЛицо,
	|	СУММА(Доходы.Результат) КАК Результат,
	//vvv
	|	Доходы.Должность,
	//
	|	Доходы.ПодразделениеОрганизации
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Доходы
	|ГДЕ
	|	Доходы.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ФизЛицо,
	//vvv
	|	Доходы.Должность,
	//
	|	Доходы.ПодразделениеОрганизации";
				

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоДоходам()

Функция СформироватьЗапросПоВзаиморасчетам()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("Ссылка" , Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиНачисления.Сотрудник.Физлицо КАК ФизЛицо,
	|	СУММА(СтрокиНачисления.Результат) КАК Результат
	|ИЗ
	|	Документ.ПремииРаботниковОрганизаций.Начисления КАК СтрокиНачисления
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиНачисления.Сотрудник.Физлицо";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоВзаиморасчетам()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, по которой выполняются начисления!", Отказ, Заголовок);
	КонецЕсли;

	//  ВидРасчета
	ЕстьВидРасчета = ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидРасчета);
	Если Не ЕстьВидРасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан вид премии!", Отказ, Заголовок);
	КонецЕсли;

	//  Число месяцев
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ЧислоМесяцев) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указано число месяцев за которые начисляется премия!", Отказ, Заголовок);
	КонецЕсли;

	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;

	Если ЕстьВидРасчета Тогда
		
		Если ВыборкаПоШапкеДокумента.ВидПремии = Перечисления.ВидыПремии.НеПремия Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В качестве премии указан вид расчета, не описанный как премия!", Отказ, Заголовок);
			
		Иначе
			ЕстьДатаНачалаБП	= ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.БазовыйПериодНачало);
			ЕстьДатаОкончанияБП	= ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.БазовыйПериодКонец);
			
			Если ВыборкаПоШапкеДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
				
				Если Не ЕстьДатаНачалаБП Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указана дата начала базового периода!", Отказ, Заголовок);
				КонецЕсли;
				
				Если Не ЕстьДатаОкончанияБП Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указана дата окончания базового периода!", Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыборкаПоШапкеДокумента.ВидПремии = Перечисления.ВидыПремии.ГодоваяПремия Тогда
			
			Если ВыборкаПоШапкеДокумента.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
				
				Если Не ЕстьДатаНачалаБП Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указана дата начала базового периода!", Отказ, Заголовок);
				КонецЕсли;
				
				Если Не ЕстьДатаОкончанияБП Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указана дата окончания базового периода!", Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
			
			Если ЕстьДатаНачалаБП И ЕстьДатаОкончанияБП Тогда
				
				Если Год(ВыборкаПоШапкеДокумента.БазовыйПериодНачало) <> Год(ВыборкаПоШапкеДокумента.БазовыйПериодКонец) Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке("Для годовой премии дата начала и окончания базового периода должны быть в пределах одного года!", Отказ, Заголовок)
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры:
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента					- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	СтруктураПроведенияПоРегистрамРасчета	- структура, содержащая имена регистров 
//											  расчета по которым надо проводить документ,
//	СтруктураПараметров						- структура параметров проведения,
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамРасчета(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, 
		  НаборЗаписей, СтруктураПараметров = Неопределено)

	Движение = НаборЗаписей.Добавить();
	
	// Свойства
	Движение.ПериодРегистрации			= ВыборкаПоСтрокамДокумента.ДатаРегистрации;
	Движение.ВидРасчета					= ВыборкаПоШапкеДокумента.ВидРасчета;
	Движение.БазовыйПериодНачало		= ВыборкаПоШапкеДокумента.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец			= КонецДня(ВыборкаПоШапкеДокумента.БазовыйПериодКонец);
	Движение.Сторно						= ВыборкаПоСтрокамДокумента.Сторно;
	
	// Измерения
	Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.Физлицо					= ВыборкаПоСтрокамДокумента.Физлицо;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;
	
	// Реквизиты
	Если ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Тогда
		Движение.Показатель1			= ВыборкаПоСтрокамДокумента.Результат;
	Иначе
		Движение.Показатель1			= ВыборкаПоСтрокамДокумента.Показатель1;
		Движение.Показатель2			= ВыборкаПоСтрокамДокумента.Показатель2;
		Движение.Показатель3			= ВыборкаПоСтрокамДокумента.Показатель3;
		Движение.Показатель4			= ВыборкаПоСтрокамДокумента.Показатель4;
		Движение.Показатель5			= ВыборкаПоСтрокамДокумента.Показатель5;
		Движение.Показатель6			= ВыборкаПоСтрокамДокумента.Показатель6;		
	КонецЕсли;
	Движение.ЧислоМесяцев				= ВыборкаПоШапкеДокумента.ЧислоМесяцев;
	//vvv
	Движение.КоэффициентРаспределения   = ВыборкаПоШапкеДокумента.КоэффициентРаспределения;
	Движение.База13   					= ВыборкаПоСтрокамДокумента.База13;
	Движение.Должность					= ВыборкаПоСтрокамДокумента.Должность;
	Движение.ОтчисленияНаППС            = ?(ВыборкаПоСтрокамДокумента.ППС,Перечисления.ДоходыФСС_НС.Облагается,Перечисления.ДоходыФСС_НС.НеОблагается);
	//
	Движение.Авторасчет					= ВыборкаПоСтрокамДокумента.Авторасчет;
	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.СторнируемыйДокумент		= ВыборкаПоСтрокамДокумента.СторнируемыйДокумент;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамРасчета()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//	ВыборкаПоШапкеДокумента						- выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоНДФЛ(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ)
	
	Движение = Движения.НДФЛСведенияОДоходах.Добавить();
	
	// Свойства
	Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	
	// Измерения
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ФизЛицо					= ВыборкаПоТЧ.ФизЛицо;
	Движение.КодДохода					= ВыборкаПоШапкеДокумента.КодДоходаНДФЛ;
	Движение.ПериодРегистрации			= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	
	// Ресурсы
	Движение.СуммаДохода				= ВыборкаПоТЧ.Результат; 
	
	// Реквизиты
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.ИсчисленоИзЗарплаты		= Истина;
	Движение.ПодразделениеОрганизации   = ВыборкаПоТЧ.ПодразделениеОрганизации;
	Движение.ВидРасчета =	ВыборкаПоШапкеДокумента.ВидРасчета; 
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

Процедура ДобавитьСтрокуВДвиженияПоВзаиморасчетам(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, УчетЗадолженностиПоМесяцам)
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
	
	// Свойства
	Движение.Период					= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	// Измерения
	Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
	Движение.ФизЛицо				= ВыборкаПоТЧ.ФизЛицо;
	//vvv комментируем
	//Если УчетЗадолженностиПоМесяцам Тогда
		Движение.ПериодВзаиморасчетов	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	//КонецЕсли;
	
	// Ресурсы
	Движение.СуммаВзаиморасчетов	= ВыборкаПоТЧ.Результат;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	ПерерассчитываемыйДокумент = Неопределено
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структуры, содержащие имена регистров, по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамРасчета;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			// ведется ли учет задолженности в разрезе периодов возникновения задолженности
			УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
			
			// получим реквизиты табличной части
			ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента).Выбрать();

			Пока ВыборкаПоНачислениям.Следующий() Цикл

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамРасчета(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ДополнительныеНачисленияРаботниковОрганизаций);

				КонецЕсли;

			КонецЦикла;

			Если НЕ Отказ Тогда

				Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КодДоходаНДФЛ) Тогда
					
					// перед тем как начать расчет, сформированные движения надо записать - 
					// по ним чуть позже будем получать дополнительные данные для расчетов
					Движения.ДополнительныеНачисленияРаботниковОрганизаций.Записать();
					
					Доходы = СформироватьЗапросПоДоходам().Выбрать();
					Пока Доходы.Следующий() Цикл
						ДобавитьСтрокуВДвиженияПоНДФЛ(ВыборкаПоШапкеДокумента, Доходы);
					КонецЦикла;
					
				КонецЕсли;
				
				Если ВыборкаПоШапкеДокумента.РегистрироватьСуммыКВыплате Тогда
					Доходы = СформироватьЗапросПоВзаиморасчетам().Выбрать();
					Пока Доходы.Следующий() Цикл
						ДобавитьСтрокуВДвиженияПоВзаиморасчетам(ВыборкаПоШапкеДокумента, Доходы, УчетЗадолженностиПоМесяцам);
					КонецЦикла;
				КонецЕсли;
				
				// выполним удаление перерасчетов исправленного документа
				Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
					ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка, Истина); // Только по исправленным документам
				КонецЕсли;
			
			КонецЕсли;
			//vvv
			Если НЕ Отказ Тогда
				ПроведениеРасчетов.ДобавитьДвиженияПериодическихВыплат(Движения, Ссылка);
			КонецЕсли;
			//
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Начисления);
	
КонецПроцедуры // ПередЗаписью()

//vvv
Функция ПолучитьТаблицуКТУ(СписокСотрудников) Экспорт
	
	Запрос=Новый Запрос;
	
	Запрос.УстановитьПараметр("Период",ПериодРегистрации);
	Запрос.УстановитьПараметр("СписокСотрудников",СписокСотрудников);
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	КТУСотрудников.Сотрудник КАК Сотрудник,
	|	СУММА(КТУСотрудников.КТУ) КАК КТУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		КТУРаботниковОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
	|		1 КАК КТУ
	|	ИЗ
	|		РегистрСведений.КТУРаботниковОрганизаций.СрезПоследних(&Период, Сотрудник В (&СписокСотрудников)) КАК КТУРаботниковОрганизацийСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтклоненияОтБазовогоКТУРаботниковОрганизацийСрезПоследних.Сотрудник,
	|		ВЫБОР
	|			КОГДА ОтклоненияОтБазовогоКТУРаботниковОрганизацийСрезПоследних.ПоказательКТУ.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателейКТУ.Снижение)
	|				ТОГДА -ОтклоненияОтБазовогоКТУРаботниковОрганизацийСрезПоследних.Размер
	|			ИНАЧЕ ОтклоненияОтБазовогоКТУРаботниковОрганизацийСрезПоследних.Размер
	|		КОНЕЦ
	|	ИЗ
	|		РегистрСведений.ОтклоненияОтБазовогоКТУРаботниковОрганизаций.СрезПоследних(&Период, Сотрудник В (&СписокСотрудников)) КАК ОтклоненияОтБазовогоКТУРаботниковОрганизацийСрезПоследних) КАК КТУСотрудников
	|
	|СГРУППИРОВАТЬ ПО
	|	КТУСотрудников.Сотрудник";	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ


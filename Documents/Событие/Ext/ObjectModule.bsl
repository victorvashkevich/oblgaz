////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мУдалятьДвижения;

Перем мСписокСтарыхПользователей;

Перем мСтараяДатаНачалаСобытия;

Перем мСтараяДатаОкончанияСобытия;

Перем мСписокПользователей;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПолучитьСписокПользователейДляКалендаря() Экспорт
	
	ТаблицаПользователей = Новый ТаблицаЗначений;
	ТаблицаПользователей.Колонки.Добавить("Пользователь");
	
	Если ЗначениеЗаполнено(Ответственный) Тогда
		НоваяСтрокаТаблицыПользователей = ТаблицаПользователей.Добавить();
		НоваяСтрокаТаблицыПользователей.Пользователь = Ответственный;
	КонецЕсли;
	
	Для каждого СтрокаТаблицыРаботников Из РаботникиОрганизации Цикл
		
		Если СтрокаТаблицыРаботников.Сотрудник.Пустая() Тогда
			Продолжить;
		КонецЕсли; 
		
		НайденныйПользователь = Справочники.Пользователи.НайтиПоРеквизиту("ФизЛицо", СтрокаТаблицыРаботников.Сотрудник.Физлицо);
		
		Если НЕ НайденныйПользователь.Пустая() Тогда
			НоваяСтрокаТаблицыПользователей = ТаблицаПользователей.Добавить();
			НоваяСтрокаТаблицыПользователей.Пользователь = НайденныйПользователь;
		КонецЕсли; 
		
	КонецЦикла;
	
	ТаблицаПользователей.Свернуть("Пользователь");
	
	СписокПользователей = Новый СписокЗначений;
	
	СписокПользователей.ЗагрузитьЗначения(ТаблицаПользователей.ВыгрузитьКолонку("Пользователь"));
	
	Возврат СписокПользователей;
	
КонецФункции // ПолучитьСписокПользователейДляКалендаря()

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если Не Проведен Тогда
		Предупреждение("Перед печатью необходимо провести документ");
		Возврат Неопределено;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если      ИмяМакета = "Диаграмма" Тогда
		Отчет = Отчеты.ДиаграммаГанта.Создать();
		Отчет.ВидОтчета = "Планируемая занятость работников (не утвержденная)";
		Отчет.Периодичность = 0;
		Отчет.ЗаполнитьНачальныеНастройки();
		Если (ОкончаниеСобытия - НачалоСобытия) < 60*60*24 Тогда
			Отчет.ДатаНач = НачалоДня(НачалоСобытия);
			Отчет.ДатаКон = КонецДня(ОкончаниеСобытия);
		Иначе
			Отчет.ДатаНач = НачалоНедели(НачалоСобытия);
			Отчет.ДатаКон = КонецНедели(ОкончаниеСобытия);
		КонецЕсли;
		Возврат Отчет.Печать(Ссылка);
	КонецЕсли;
	
КонецФункции // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Диаграмма", "Диаграмма");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ВвестиЗаписьВРегистр(Дата, НомерНачальнойСтроки, НомерКонечнойСтроки, НаборЗаписейРегистра, ПоПомещению = Ложь)
	
	Если ПоПомещению Тогда
		
		Если НЕ ЗначениеЗаполнено(Помещение) Тогда
			Возврат;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписейРегистра.Добавить();
		
		НоваяЗапись.Событие              = Ссылка;
		НоваяЗапись.Дата                 = Дата;
		НоваяЗапись.НомерНачальнойСтроки = НомерНачальнойСтроки;
		НоваяЗапись.НомерКонечнойСтроки  = НомерКонечнойСтроки;
		НоваяЗапись.Пользователь         = Справочники.Пользователи.ПустаяСсылка();
		
		НоваяЗапись.ДатаНачалаСобытия    = НачалоСобытия;
		НоваяЗапись.ДатаКонцаСобытия     = ОкончаниеСобытия;
		
	Иначе
		Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
			
			НоваяЗапись = НаборЗаписейРегистра.Добавить();
			
			НоваяЗапись.Событие              = Ссылка;
			НоваяЗапись.Дата                 = Дата;
			НоваяЗапись.НомерНачальнойСтроки = НомерНачальнойСтроки;
			НоваяЗапись.НомерКонечнойСтроки  = НомерКонечнойСтроки;
			НоваяЗапись.Пользователь         = ЭлементСпискаПользователей.Значение;
			
			НоваяЗапись.ДатаНачалаСобытия    = НачалоСобытия;
			НоваяЗапись.ДатаКонцаСобытия     = ОкончаниеСобытия;
			НоваяЗапись.КонтактноеЛицо       = КонтактноеЛицо;
			НоваяЗапись.ОписаниеСобытия      = ОписаниеСобытия;
			НоваяЗапись.Важность             = Важность;
			НоваяЗапись.СостояниеСобытия     = СостояниеСобытия;
			НоваяЗапись.ТипСобытия           = ТипСобытия;
			НоваяЗапись.ВидСобытия           = ВидСобытия;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапомнитьСтарыеЗначения()
	
	мСписокСтарыхПользователей = Новый СписокЗначений;
	мСтараяДатаНачалаСобытия = НачалоСобытия;
	мСтараяДатаОкончанияСобытия = ОкончаниеСобытия;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущееСобытие", Ссылка);
	
	Запрос.Текст = "
	|
	|ВЫБРАТЬ
	|	СобытияКалендаряПользователяОбобщенные.Пользователь КАК Пользователь,
	|	СобытияКалендаряПользователяОбобщенные.Дата КАК ДатаСобытия
	|ИЗ
	|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователяОбобщенные
	|
	|ГДЕ
	|	СобытияКалендаряПользователяОбобщенные.Событие = &ТекущееСобытие
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	СобытияКалендаряПользователяОбобщенные.Пользователь,
	|	СобытияКалендаряПользователяОбобщенные.Дата
	|";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		
		ТаблицаПользователей = ТаблицаЗапроса.Скопировать();
		ТаблицаПользователей.Свернуть("Пользователь");
		мСписокСтарыхПользователей.ЗагрузитьЗначения(ТаблицаПользователей.ВыгрузитьКолонку("Пользователь"));
		
		ТаблицаЗапроса.Свернуть("ДатаСобытия");
		ТаблицаЗапроса.Сортировать("ДатаСобытия ВОЗР");
		
		мСтараяДатаНачалаСобытия = ТаблицаЗапроса[0].ДатаСобытия;
		мСтараяДатаОкончанияСобытия = ТаблицаЗапроса[ТаблицаЗапроса.Количество() - 1].ДатаСобытия;
		
	КонецЕсли; 
	
КонецПроцедуры

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ДатаПо",			ОкончаниеСобытия - 1);
	Запрос.УстановитьПараметр("Помещение",		Помещение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланируемыеВстречи.НачалоСобытия,
	|	ПланируемыеВстречи.Помещение,
	|	ПланируемыеВстречи.ОкончаниеСобытия,
	|	ПланируемыеВстречи.Ссылка,
	|	ПланируемыеВстречи.Ответственный.ФизЛицо КАК ФизЛицо,
	|	ПланируемыеВстречи.Ответственный,
	|	ИмеющаясяЗанятость.Занятость КАК КонфликтнаяЗанятость,
	|	ИмеющаясяЗанятость.Регистратор.Представление КАК КонфликтныйДокумент
	|ИЗ
	|	Документ.Событие КАК ПланируемыеВстречи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемаяЗанятостьПомещений КАК ИмеющаясяЗанятость
	|		ПО ПланируемыеВстречи.НачалоСобытия = ИмеющаясяЗанятость.Период
	|			И ПланируемыеВстречи.Ссылка <> ИмеющаясяЗанятость.Регистратор
	|			И ПланируемыеВстречи.Помещение = ИмеющаясяЗанятость.Помещение
	|ГДЕ
	|	ПланируемыеВстречи.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части "СписокРаботников" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса к табличной части документа.
//
Функция СформироватьЗапросПоСписокРаботников(Режим)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала",		НачалоСобытия);
	Запрос.УстановитьПараметр("ДатаОкончания",	ОкончаниеСобытия);
	
	// Описание текста запроса:
	// 1. Выборка "ПерваяТаблица": 
	//		Выбираются строки т.ч. СписокРаботников документа
	// 2. Выборка "СобытийныйПланЗанятостиФизлицСрезПоследних": 
	//		Из таблицы среза последних регистра выбираем планируемое состояние для проверки
	//      В качестве условия на измерение задается список физлиц, упомянутых в документе.
	// 3. Выборка "ВтораяТаблица": 
	//		Среди строк документа ищем строки с пересекающимися периодами отпусков 
	//      для одного работника
	//
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПерваяТаблица.НомерСтроки КАК НомерСтроки,
	|	ПерваяТаблица.Ссылка,
	|	ПерваяТаблица.Сотрудник,
	|	ПерваяТаблица.Сотрудник.Физлицо КАК Физлицо,
	|	МИНИМУМ(ВтораяТаблица.НомерСтроки) КАК КонфликтнаяСтрока,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|					КОГДА СобытийныйПланЗанятостиФизлицСрезПоследних.ПериодЗавершения <= &ДатаНачала
	|							И СобытийныйПланЗанятостиФизлицСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА СобытийныйПланЗанятостиФизлицСрезПоследних.СостояниеЗавершения
	|					ИНАЧЕ СобытийныйПланЗанятостиФизлицСрезПоследних.Состояние
	|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Свободен)
	|				ИЛИ СобытийныйПланЗанятостиФизлицСрезПоследних.Период >= &ДатаНачала
	|			ТОГДА ""Нельзя""
	|		ИНАЧЕ ""Можно""
	|	КОНЕЦ КАК ПроверяемоеЗначение
	|ИЗ
	|	Документ.Событие.РаботникиОрганизации КАК ПерваяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Событие.РаботникиОрганизации КАК ВтораяТаблица
	|		ПО ПерваяТаблица.Ссылка = ВтораяТаблица.Ссылка
	|			И ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки
	|			И ПерваяТаблица.Сотрудник = ВтораяТаблица.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытийныйПланЗанятостиФизлиц.СрезПоследних(
	|				&ДатаОкончания,
	|				ФизЛицо В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ПланируемыеВстречиСписокРаботников.Сотрудник.Физлицо
	|					ИЗ
	|						Документ.Событие.РаботникиОрганизации КАК ПланируемыеВстречиСписокРаботников
	|					ГДЕ
	|						ПланируемыеВстречиСписокРаботников.Ссылка = &ДокументСсылка)) КАК СобытийныйПланЗанятостиФизлицСрезПоследних
	|		ПО ПерваяТаблица.Сотрудник.Физлицо = СобытийныйПланЗанятостиФизлицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ПерваяТаблица.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПерваяТаблица.НомерСтроки,
	|	СобытийныйПланЗанятостиФизлицСрезПоследних.Период,
	|	ПерваяТаблица.Ссылка,
	|	СобытийныйПланЗанятостиФизлицСрезПоследних.Состояние,
	|	ПерваяТаблица.Сотрудник,
	|	ПерваяТаблица.Сотрудник.Физлицо,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|					КОГДА СобытийныйПланЗанятостиФизлицСрезПоследних.ПериодЗавершения <= &ДатаНачала
	|							И СобытийныйПланЗанятостиФизлицСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА СобытийныйПланЗанятостиФизлицСрезПоследних.СостояниеЗавершения
	|					ИНАЧЕ СобытийныйПланЗанятостиФизлицСрезПоследних.Состояние
	|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Свободен)
	|				ИЛИ СобытийныйПланЗанятостиФизлицСрезПоследних.Период >= &ДатаНачала
	|			ТОГДА ""Нельзя""
	|		ИНАЧЕ ""Можно""
	|	КОНЕЦ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
	
КонецФункции // СформироватьЗапросПоСписокРаботников()

// Процедура проверяет дублирование контактных лиц в табличной части
// "СторонниеЛица" документа.
Процедура ПроверкаДублированиеКонтактныхЛиц(Отказ)
	
	Если СторонниеЛица.Найти(КонтактноеЛицо) <> Неопределено Тогда
		Отказ = Истина;
		# Если Клиент Тогда
		Сообщить("В табл. части ""Другие кандидаты"" продублировано лицо, указанное также в шапке документа.");
		# КонецЕсли
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ПерваяТаблица.НомерСтроки КАК НомерСтроки,
	|	ПерваяТаблица.Ссылка,
	|	ПерваяТаблица.Лицо,
	|	ВтораяТаблица.НомерСтроки КАК КонфликтнаяСтрока
	|ИЗ
	|	Документ.Событие.СторонниеЛица КАК ПерваяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Событие.СторонниеЛица КАК ВтораяТаблица
	|		ПО ПерваяТаблица.Ссылка = ВтораяТаблица.Ссылка И ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки И ПерваяТаблица.Лицо = ВтораяТаблица.Лицо
	|
	|ГДЕ
	|	ПерваяТаблица.Ссылка = &ДокументСсылка";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Отказ = Истина;
		# Если Клиент Тогда
		Сообщить("Повторяющие записи в строке номер """+Выборка.НомерСтроки+""" и в строке """+Выборка.КонфликтнаяСтрока+" табл. части ""Другие кандидаты""");
		# КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)
	
	// ПродолжительностьЧасов
	Если ВыборкаПоШапкеДокумента.НачалоСобытия = ВыборкаПоШапкеДокумента.ОкончаниеСобытия или НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НачалоСобытия) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задана продолжительность встречи!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоШапкеДокумента.НачалоСобытия > ВыборкаПоШапкеДокумента.ОкончаниеСобытия Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Начало встречи не может быть позже её окончания!", Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка: в регистре уже есть такое движение
	Если ВыборкаПоШапкеДокумента.КонфликтнаяЗанятость <> NULL Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Помещение уже занято документом " + ВыборкаПоШапкеДокумента.КонфликтныйДокумент + "!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "СписокРаботников" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиСписокРаботников(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Занятость работника
	Если ВыборкаПоСтрокамДокумента.ПроверяемоеЗначение <> "Можно" Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " сотрудник в указанный период времени уже занят!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока <> NULL Тогда
		СтрокаПродолжениеСообщенияОбОшибке = " найдена повторяющаяся строка №" + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиСписокРаботников()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(СтруктураПроведенияПоРегистрамСведений)
	
	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	СтруктураПроведенияПоРегистрамСведений.Вставить("СборДанныхДляПланированияЗанятостиФизлиц");
	Если НЕ Помещение.Пустая() Тогда
		СтруктураПроведенияПоРегистрамСведений.Вставить("ПериодыЗанятостиПомещений");
		СтруктураПроведенияПоРегистрамСведений.Вставить("ПланируемаяЗанятостьПомещений");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  ВыборкаПоСписокРаботников             - выборка из результата запроса по строкам документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоСписокРаботников(ВыборкаПоШапкеДокумента, ВыборкаПоСписокРаботников, 
	СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")
	
	// Уже добавили физлицо из ответственнго за документ
	Если ВыборкаПоСписокРаботников.Физлицо = ВыборкаПоШапкеДокумента.ФизЛицо Тогда
		Возврат;
	КонецЕсли;
	
	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "СборДанныхДляПланированияЗанятостиФизлиц";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
		
		Движение = Движения[ИмяРегистра].Добавить();
		// Свойства
		Движение.Период					= ВыборкаПоШапкеДокумента.НачалоСобытия;
		// Измерения
		Движение.Физлицо				= ВыборкаПоСписокРаботников.Физлицо;
		Движение.Документ				= Ссылка;
		// Ресурсы
		Движение.Состояние				= Перечисления.ТипыПериодическихЗадачРаботника.Встреча;
		Движение.ПериодЗавершения		= ВыборкаПоШапкеДокумента.ОкончаниеСобытия;
		Движение.СостояниеЗавершения	= Перечисления.ТипыПериодическихЗадачРаботника.Свободен;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоСписокРаботников

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоШапке(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")
	
	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "ПланируемаяЗанятостьПомещений";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) И НЕ Помещение.Пустая() Тогда
		
		Движение = Движения[ИмяРегистра].Добавить();
		// Свойства
		Движение.Период					= ВыборкаПоШапкеДокумента.НачалоСобытия;
		// Измерения
		Движение.Помещение				= ВыборкаПоШапкеДокумента.Помещение;
		// Ресурсы
		Движение.Занятость				= Перечисления.Занятость.Занято;
		Движение.ПериодЗавершения		= ВыборкаПоШапкеДокумента.ОкончаниеСобытия - 1;
		Движение.ЗанятостьЗавершения	= Перечисления.Занятость.Свободно;
		
	КонецЕсли;
	
	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "ПериодыЗанятостиПомещений";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) И НЕ Помещение.Пустая() Тогда
		
		Движение = Движения[ИмяРегистра].Добавить();
		// Измерения
		Движение.Помещение				= ВыборкаПоШапкеДокумента.Помещение;
		Движение.ДатаНачала				= ВыборкаПоШапкеДокумента.НачалоСобытия;
		Если ВыборкаПоШапкеДокумента.ОкончаниеСобытия <> '0001-01-01' Тогда
			Движение = Движения[ИмяРегистра].Добавить();
			// Измерения
			Движение.Помещение				= ВыборкаПоШапкеДокумента.Помещение;
			Движение.ДатаОкончания		= ВыборкаПоШапкеДокумента.ОкончаниеСобытия - 1;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "СборДанныхДляПланированияЗанятостиФизлиц";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) И ЗначениеЗаполнено(Ответственный.ФизЛицо) Тогда
		
		Движение = Движения[ИмяРегистра].Добавить();
		// Свойства
		Движение.Период					= ВыборкаПоШапкеДокумента.НачалоСобытия;
		// Измерения
		Движение.Физлицо				= ВыборкаПоШапкеДокумента.ФизЛицо;
		Движение.Документ				= Ссылка;
		// Ресурсы
		Движение.Состояние				= Перечисления.ТипыПериодическихЗадачРаботника.Встреча;
		Движение.ПериодЗавершения		= ВыборкаПоШапкеДокумента.ОкончаниеСобытия - 1;
		Движение.СостояниеЗавершения	= Перечисления.ТипыПериодическихЗадачРаботника.Свободен;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоШапке

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мУдалятьДвижения = Не ЭтоНовый();
	
	Движения.ПериодыЗанятостиПомещений.РежимЗаписиРегистратора = РежимЗаписи;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДокОснование)
	
		
	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.Событие") Тогда
		
		КонтактноеЛицо = ДокОснование.КонтактноеЛицо;
		ВидСобытия     = ДокОснование.ВидСобытия;
		ТипСобытия     = ДокОснование.ТипСобытия;
		Основание        = ДокОснование;
		СостояниеСобытия = Перечисления.СостоянияСобытий.Запланировано;
		Ответственный    = глЗначениеПеременной("глТекущийПользователь");

		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
		
		
		
		Запрос = Новый Запрос;
		
		Если ДокОснование.СтатусПисьма <> Перечисления.СтатусыПисем.Полученное Тогда
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактнаяИнформация.Объект
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|
			|	ПРАВОЕ СОЕДИНЕНИЕ
			|		(
			|		ВЫБРАТЬ
			|			ЭлектронноеПисьмоКомуТЧ.АдресЭлектроннойПочты
			|		ИЗ
			|			Документ.ЭлектронноеПисьмо.КомуТЧ КАК ЭлектронноеПисьмоКомуТЧ
			|		ГДЕ
			|			ЭлектронноеПисьмоКомуТЧ.Ссылка = &ТекДокумент
			|		) КАК Адреса
			|	ПО
			|		ВЫРАЗИТЬ(Адреса.АдресЭлектроннойПочты КАК СТРОКА(128)) = ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(128))
			|
			|ГДЕ
			|	КонтактнаяИнформация.Объект ССЫЛКА Справочник.ФизическиеЛица
			|	И
			|	КонтактнаяИнформация.Тип = &Тип
			|";
			
			Запрос.УстановитьПараметр("ТекДокумент", ДокОснование);
			
		Иначе
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактнаяИнформация.Объект
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|
			|ГДЕ
			|	КонтактнаяИнформация.Объект ССЫЛКА Справочник.ФизическиеЛица
			|	И
			|	КонтактнаяИнформация.Тип = &Тип
			|	И
			|	КонтактнаяИнформация.Представление ПОДОБНО &Представление
			|";
			
			Запрос.УстановитьПараметр("Представление", ДокОснование.ОтправительАдресЭлектроннойПочты);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				ВыбОбъект = Выборка.Объект;
			Иначе
				СписокВыбора = Новый СписокЗначений;
				Пока Выборка.Следующий() Цикл
					СписокВыбора.Добавить(Выборка.Объект);
				КонецЦикла;
				
				ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент("Выберите объект события");
				
				Если ВыбранныйЭлемент = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				ВыбОбъект = ВыбранныйЭлемент.Значение;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		КонтактноеЛицо = ВыбОбъект;
		
		Основание       = ДокОснование;
		ПредметКонтакта = ДокОснование.ПредметКонтакта;
		ОписаниеСобытия = ДокОснование.Тема;
		Если ДокОснование.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ ДокОснование.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			НовыйHTMLДокумент = Новый COMОбъект("HtmlFile");
			НовыйHTMLДокумент.open("text/html");
			НовыйHTMLДокумент.write(ДокОснование.ТекстПисьма);
			НовыйHTMLДокумент.close();
			СодержаниеСобытия = СтрЗаменить(НовыйHTMLДокумент.all.item(0).innerText, Символ(13), "");
		Иначе
			СодержаниеСобытия = ДокОснование.ТекстПисьма;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события объекта "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров сведений по которым надо проводить документ для управления персоналом
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Формируем движения для нужд календаря пользователя
	
	ЗапомнитьСтарыеЗначения();
	
	мСписокПользователей = ПолучитьСписокПользователейДляКалендаря();
	
	НаборЗаписей = РегистрыСведений.СобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Событие.Значение = Ссылка;
	НаборЗаписей.Отбор.Событие.Использование = Истина;
	НаборЗаписей.Очистить();
	
	НачальнаяСтрока = УправлениеКонтактами.ВозвратитьНомерСтроки(Формат(НачалоСобытия,"ДФ=Ч"), Формат(НачалоСобытия,"ДФ=м"), НачалоСобытия, Истина, НачалоСобытия);
	Если Формат(НачалоСобытия,"ДФ=Ч") = Формат(ОкончаниеСобытия,"ДФ=Ч") И Формат(НачалоСобытия,"ДФ=м") = Формат(ОкончаниеСобытия,"ДФ=м") Тогда
		КонечнаяСтрока  = НачальнаяСтрока;
	Иначе
		КонечнаяСтрока  = УправлениеКонтактами.ВозвратитьНомерСтроки(Формат(ОкончаниеСобытия,"ДФ=Ч"), Формат(ОкончаниеСобытия,"ДФ=м"), ОкончаниеСобытия, Ложь, ОкончаниеСобытия);
	КонецЕсли; 
	
	Если НачалоДня(НачалоСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
		
		КоличествоИнтерваловМеждуДнями = Цел((НачалоДня(ОкончаниеСобытия) - КонецДня(НачалоСобытия) + 1)/(60*60*24));
		
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			
			ДатаИнтервала = НачалоДня(НачалоСобытия) + (60*60*24)*а;
			
			ВвестиЗаписьВРегистр(ДатаИнтервала, 1, 48, НаборЗаписей);
			
		КонецЦикла;
		
		ВвестиЗаписьВРегистр(НачалоДня(НачалоСобытия), НачальнаяСтрока, 48, НаборЗаписей);
		ВвестиЗаписьВРегистр(НачалоДня(ОкончаниеСобытия), 1, КонечнаяСтрока, НаборЗаписей);
		
	Иначе
		
		ВвестиЗаписьВРегистр(НачалоДня(НачалоСобытия), НачальнаяСтрока, КонечнаяСтрока, НаборЗаписей);
		
	КонецЕсли;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
	СписокПерераспределенныхДат = Новый СписокЗначений;
	
	Если НачалоДня(мСтараяДатаНачалаСобытия) <> НачалоДня(НачалоСобытия) ИЛИ НачалоДня(мСтараяДатаОкончанияСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
		КоличествоИнтерваловМеждуДнями = Цел((КонецДня(мСтараяДатаОкончанияСобытия) + 1 - НачалоДня(мСтараяДатаНачалаСобытия))/(60*60*24));
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			
			ДатаИнтервала = НачалоДня(НачалоДня(мСтараяДатаНачалаСобытия) + (60*60*24)*а - 1);
			СписокПерераспределенныхДат.Добавить(ДатаИнтервала);
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
		КонецЦикла; 
	КонецЕсли; 
	
	Если НачалоДня(НачалоСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
		
		КоличествоИнтерваловМеждуДнями = Цел((НачалоДня(ОкончаниеСобытия) - КонецДня(НачалоСобытия) + 1)/(60*60*24));
		
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			
			ДатаИнтервала = НачалоДня(НачалоСобытия) + (60*60*24)*а;
			Если СписокПерераспределенныхДат.НайтиПоЗначению(ДатаИнтервала) = Неопределено Тогда
				
				Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
					СтарыйПользователь = ЭлементСпискаПользователей.Значение;
					Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
						УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, СтарыйПользователь);
					КонецЕсли; 
				КонецЦикла; 
				
				Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
					УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, ЭлементСпискаПользователей.Значение);
				КонецЦикла; 
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(НачалоСобытия)) = Неопределено Тогда
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
		КонецЕсли; 
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(ОкончаниеСобытия)) = Неопределено Тогда
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
		КонецЕсли; 
		
	Иначе
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(НачалоСобытия)) = Неопределено Тогда
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
	// Формируем движения для нужд управления персоналом, занятость помещений и физ.лиц
	Если ЗначениеЗаполнено(Помещение) Тогда
		УправлениеКонтактами.ОтразитьЗанятостьПомещений(Ссылка,НачалоСобытия,ОкончаниеСобытия,мСтараяДатаНачалаСобытия,мСтараяДатаОкончанияСобытия);
	КонецЕсли;
	
	Если ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
		
		// Заголовок для сообщений об ошибках проведения.
		Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
		
		// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
		// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
		// то проводить по нему не надо.
		ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(СтруктураПроведенияПоРегистрамСведений);
		
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке(Режим).Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
		
		//Надо проверить реквизиты шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда 
			
			ДобавитьСтрокуВДвиженияПоШапке(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);
			
			// получим реквизиты табличной части
			ВыборкаПоСписокРаботников = СформироватьЗапросПоСписокРаботников(Режим).Выбрать();
			
			Пока ВыборкаПоСписокРаботников.Следующий() Цикл 
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиСписокРаботников(ВыборкаПоШапкеДокумента, ВыборкаПоСписокРаботников, Отказ, Заголовок);
				
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоСписокРаботников(ВыборкаПоШапкеДокумента, ВыборкаПоСписокРаботников, СтруктураПроведенияПоРегистрамСведений);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверкаДублированиеКонтактныхЛиц(Отказ);
	
КонецПроцедуры

// Процедура - обработчик события объекта "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ЗапомнитьСтарыеЗначения();
	
	мСписокПользователей = ПолучитьСписокПользователейДляКалендаря();
	
	НаборЗаписей = РегистрыСведений.СобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Событие.Значение = Ссылка;
	НаборЗаписей.Отбор.Событие.Использование = Истина;
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();

	Если НачалоДня(НачалоСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
		
		КоличествоИнтерваловМеждуДнями = Цел((НачалоДня(ОкончаниеСобытия) - КонецДня(НачалоСобытия) + 1)/(60*60*24));
		
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			ДатаИнтервала = НачалоДня(НачалоСобытия) + (60*60*24)*а;
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
		
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
		КонецЦикла;
			
		Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
			СтарыйПользователь = ЭлементСпискаПользователей.Значение;
			Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), СтарыйПользователь);
			КонецЕсли; 
		КонецЦикла; 
	
		Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
			УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
			УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), ЭлементСпискаПользователей.Значение);
		КонецЦикла; 
		
	Иначе
			
		Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
			СтарыйПользователь = ЭлементСпискаПользователей.Значение;
			Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
			КонецЕсли; 
		КонецЦикла; 
	
		Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
			УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры




/////////////////////////////////////
// XML TREE
/////////////////////////////////////

// ИМПОРТ / ЭКСПОРТ ДЕРЕВА

Процедура ЗаписатьУзелДереваXMLВXML(СтрокаДерева, ПотокXML, ПрефиксПространстваИмен = "xsi", URIПространстваИмен = "http://www.w3.org/2001/XMLSchema") Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		
		Если НЕ ПустаяСтрока(СтрокаДерева.Имя) Тогда
			
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Имя);
			ПотокXML.ЗаписатьСоответствиеПространстваИмен(ПрефиксПространстваИмен, URIПространстваИмен);
			СписокАтрибутов = ПроцедурыПерсонифицированогоУчета.НайтиАтрибуты(СтрокаДерева);
			
			Если СписокАтрибутов <> Неопределено Тогда
				Для каждого СтрокаСАтрибутом Из СписокАтрибутов.Строки Цикл
					ПотокXML.ЗаписатьАтрибут(СтрокаСАтрибутом.Имя, СтрокаСАтрибутом.Значение);
				КонецЦикла;
			КонецЕсли;
			
			ПотокXML.ЗаписатьТекст(СтрокаДерева.Значение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Лист из СтрокаДерева.Строки Цикл
		Если ПроцедурыПерсонифицированогоУчета.СтрокаСАтрибутами(Лист) Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьУзелДереваXMLВXML(Лист, ПотокXML, ПрефиксПространстваИмен, URIПространстваИмен);
	КонецЦикла;
	
	Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		Если НЕ ПустаяСтрока(СтрокаДерева.Имя) Тогда
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Возвращает формат записи файла сведений в виде таблицы с именами и типами полей
Функция ПолучитьФорматЗаписи2НДФЛ(Знач МакетФормата, Знач ИмяЗаписи) 
	
	ТаблицаФормаЗаписи = Новый ТаблицаЗначений;
	ТаблицаФормаЗаписи.Колонки.Добавить("ИмяПоля",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипДанных",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
	ТаблицаФормаЗаписи.Колонки.Добавить("Размер",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("РазрядностьДробнойЧасти",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("ЭлементНеОбязателен");
	
	ОбластьФорматЗаписи = МакетФормата.ПолучитьОбласть(ИмяЗаписи);
	
	Для НСтр = 1 По ОбластьФорматЗаписи.ВысотаТаблицы Цикл
		
		//имя поля хранится в 4-ой колонке
		ИмяПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 4).Текст);
		Если ИмяПоля <> "" тогда
			
			НовоеПоле = ТаблицаФормаЗаписи.Добавить();
			НовоеПоле.ИмяПоля = СокрЛП(ИмяПоля);
			//тип данных хранится во 2-ой колонке	
			НовоеПоле.ТипДанных = ВРЕГ(СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 2).Текст));
			//размер поля хранится в 3-ей колонке	
			СтрРазмерПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 3).Текст);
			//Если указан размер поля, сохраним его
			Если СтрРазмерПоля<>"" тогда
				ПозицияТочки = Найти(СтрРазмерПоля,".");
				Если ПозицияТочки<>0 тогда
					НовоеПоле.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
					НовоеПоле.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
				Иначе	
					НовоеПоле.Размер = Число(СтрРазмерПоля);
					НовоеПоле.РазрядностьДробнойЧасти = 0;
				КонецЕсли;	 
			КонецЕсли;	 
			//Признак обязательности элемента хранится в 5-й колонке	
			НовоеПоле.ЭлементНеОбязателен = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 5).Текст) = "Не обязательно";
			
		КонецЕсли;	 
		
	КонецЦикла;
	
	Возврат ТаблицаФормаЗаписи;
КонецФункции	 

// Выполняет вывод данных набора записей в файл сведений
Процедура ЗаписатьНаборЗаписейВФайл(НаборЗаписей, Файл)
	
	СтрНули = "0000000000";
	
	// Для каждой записи набора
	Для каждого Запись Из НаборЗаписей Цикл
		
		ИмяЗаписи = Запись.Ключ;
		ДанныеЗаписи = Запись.Значение;
		
		ПредставлениеЗаписи = "";
		Если ДанныеЗаписи.ТипДанных = "СТРУКТУРА" Тогда
			
			// Перечислим значения структуры через запятую
			ЗначенияСтруктуры = "";
			СтруктураПустая = Истина;// Признак пустого значения структуры
			Для Каждого Поле из ДанныеЗаписи.Поля Цикл
				
				ЗначениеПоля = ДанныеЗаписи.Значение[Поле.ИмяПоля];
				
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					
					//Формируем представление нуля
					РазрядностьДробнойЧасти = Поле.РазрядностьДробнойЧасти;
					Если РазрядностьДробнойЧасти = 0 тогда
						ПредставлениеНуля = "0";
					Иначе	
						ПредставлениеНуля = "0." + Лев(СтрНули, РазрядностьДробнойЧасти);
					КонецЕсли;	 
					//Форматируем значение
					ЗначенияСтруктуры  = ЗначенияСтруктуры + "," +  Формат(ЗначениеПоля ,"ЧГ=0; ЧРД =.; ЧЦ=" + Поле.Размер + "; ЧДЦ=" + РазрядностьДробнойЧасти+"; ЧН=" + ПредставлениеНуля);
					
					Если ЗначениеПоля <> 0 Тогда
						СтруктураПустая = Ложь;
					КонецЕсли; 
					
				Иначе// Строка (других типов не бывает)
					
					ЗначенияСтруктуры  = ЗначенияСтруктуры + "," + ВРег(СокрЛП(ЗначениеПоля));	
					
					Если СокрЛП(ЗначениеПоля) <> "" Тогда
						СтруктураПустая = Ложь;
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЦикла;	
			
			Если НЕ СтруктураПустая Тогда
				// Убрали первую запятую
				ПредставлениеЗаписи  = ПредставлениеЗаписи + Сред(ЗначенияСтруктуры, 2);	
			Иначе	
				ПредставлениеЗаписи = ""; // не будем выводить запись
			КонецЕсли; 
			
		ИначеЕсли ДанныеЗаписи.ТипДанных = "ТАБЛИЦА" Тогда
			
			// Перечислим значения строк таблицы через ";"
			ПредставлениеТаблицы = "";
			
			Для Каждого Строка из ДанныеЗаписи.Значение Цикл
				ЗначенияСтроки = "";
				Для Каждого Поле из ДанныеЗаписи.Поля Цикл
					
					//Формируем представление нуля
					РазрядностьДробнойЧасти = Поле.РазрядностьДробнойЧасти;
					Если РазрядностьДробнойЧасти = 0 тогда
						ПредставлениеНуля = "0";
					Иначе	
						ПредставлениеНуля = "0." + Лев(СтрНули, РазрядностьДробнойЧасти);
					КонецЕсли;	 
					//Форматируем значение
					ЗначениеПоля = Формат(Строка[Поле.ИмяПоля],"ЧГ=0; ЧРД =.; ЧЦ=" + Поле.Размер + "; ЧДЦ=" + РазрядностьДробнойЧасти+"; ЧН=" + ПредставлениеНуля);
					
					ЗначенияСтроки  = ЗначенияСтроки + "," + ЗначениеПоля;	
					
				КонецЦикла;
				ПредставлениеТаблицы = ПредставлениеТаблицы + ";" + Сред(ЗначенияСтроки,2);
			КонецЦикла; 
			
			// Убрали первую ";"
			ПредставлениеЗаписи  = ПредставлениеЗаписи + Сред(ПредставлениеТаблицы, 2);	
			
		ИначеЕсли ДанныеЗаписи.ТипДанных = "ЧИСЛО" ТОГДА
			
			//Формируем представление нуля
			РазрядностьДробнойЧасти = ДанныеЗаписи.РазрядностьДробнойЧасти;
			Если РазрядностьДробнойЧасти = 0 тогда
				ПредставлениеНуля = "0";
			Иначе	
				ПредставлениеНуля = "0." + Лев(СтрНули, РазрядностьДробнойЧасти);
			КонецЕсли;	 
			
			Если ДанныеЗаписи.Значение <> 0 Тогда
				//Форматируем значение
				ПредставлениеЗаписи = ПредставлениеЗаписи + Формат(ДанныеЗаписи.Значение,"ЧГ=0; ЧРД =.; ЧЦ=" + ДанныеЗаписи.Размер + "; ЧДЦ=" + РазрядностьДробнойЧасти+"; ЧН=" + ПредставлениеНуля);
			Иначе
				// Эти строки должны выводиться даже при нулевом значении
				Если ИмяЗаписи = "ОблСумм" ИЛИ ИмяЗаписи = "КолДок" ИЛИ ИмяЗаписи = "КонтрСумма" ИЛИ
					ИмяЗаписи = "НИОблСумм" ИЛИ ИмяЗаписи = "НУОблСумм" ИЛИ 
					ИмяЗаписи = "НИОбщСумм" ИЛИ ИмяЗаписи = "НУОбщСумм" Тогда
					ПредставлениеЗаписи = ПредставлениеЗаписи + Формат(ДанныеЗаписи.Значение,"ЧГ=0; ЧРД =.; ЧЦ=" + ДанныеЗаписи.Размер + "; ЧДЦ=" + РазрядностьДробнойЧасти+"; ЧН=" + ПредставлениеНуля);
				Иначе
					ПредставлениеЗаписи = "";// не будем выводить запись	
				КонецЕсли;
				
			КонецЕсли; 
			
		ИначеЕсли ДанныеЗаписи.ТипДанных = "КОНСТАНТА" ТОГДА	
			
			ПредставлениеЗаписи = ПредставлениеЗаписи + ВРег(ДанныеЗаписи.Значение);		
			
		ИначеЕсли ДанныеЗаписи.ТипДанных = "ДАТА" ТОГДА	
			
			ПредставлениеЗаписи = ПредставлениеЗаписи + Формат(ДанныеЗаписи.Значение, "ДФ=дд.ММ.гггг");		
			
		Иначе// Строка
			
			ПредставлениеЗаписи = ПредставлениеЗаписи + ВРег(ДанныеЗаписи.Значение);		
			
		КонецЕсли; 
		
		// Добавляем строку-запись в файл, если запись содержит данные
		Если ПредставлениеЗаписи <> "" Тогда
			Если ИмяЗаписи <> "РАЗДЕЛИТЕЛЬ" Тогда // для разделителя не выводим имя записи
				ПредставлениеЗаписи = ИмяЗаписи + ":" + ПредставлениеЗаписи;
			КонецЕсли; 
			Файл.ДобавитьСтроку(ПредставлениеЗаписи);
		КонецЕсли; 
	КонецЦикла; 
	
	
КонецПроцедуры

// Загружает формат набора записей файла сведений о доходах физлиц из заданного табличного документа
Функция ЗагрузитьФорматНабораЗаписей(Знач МакетФормата, Знач ИмяНабораЗаписей, ЭтоФизЛицо = Ложь)
	
	ФорматНабора = Новый Структура();
	
	ОбластьНабораЗаписей = МакетФормата.ПолучитьОбласть(ИмяНабораЗаписей);
	
	Для НСтр = 1 По ОбластьНабораЗаписей.ВысотаТаблицы Цикл
		
		ФорматЗаписи = Новый Структура("ТипДанных, Размер, РазрядностьДробнойЧасти, Поля, Значение");
		
		// имя записи хранится в 4 колонке
		ИмяЗаписи =  СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 4).Текст);
		
		// тип данных хранится во 2 колонке
		ТипДанных = Врег(СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 2).Текст));
		
		Если ТипДанных = "" Тогда// Если тип данных не задан, то встретили строку - группировку
			Продолжить;
		КонецЕсли; 
		
		ПозицияРазделителя = Найти(ТипДанных,"/");
		Если ПозицияРазделителя <> 0 Тогда
			Если ЭтоФизЛицо Тогда
				ТипДанных = Сред(ТипДанных, ПозицияРазделителя + 1)
			Иначе
				ТипДанных = Лев(ТипДанных, ПозицияРазделителя - 1)
			КонецЕсли;	
		КонецЕсли;
		
		ФорматЗаписи.ТипДанных =  ТипДанных;
		
		// размер хранится в 3 колонке
		СтрРазмерПоля =  СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 3).Текст);
		
		Если ФорматЗаписи.ТипДанных = "КОНСТАНТА" тогда
			
			// в колонке "размер" должно указываться значение константы
			ФорматЗаписи.Значение = СтрРазмерПоля;
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ЧИСЛО" тогда
			
			ПозицияТочки = Найти(СтрРазмерПоля,".");
			Если ПозицияТочки<>0 тогда
				ФорматЗаписи.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
				ФорматЗаписи.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
			Иначе	
				ФорматЗаписи.Размер = Число(СтрРазмерПоля);
				ФорматЗаписи.РазрядностьДробнойЧасти = 0;
			КонецЕсли;	 
			
			ФорматЗаписи.Значение = 0;
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРОКА" тогда
			
			ФорматЗаписи.Размер = Число(СтрРазмерПоля);
			
			ФорматЗаписи.Значение = "";
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ДАТА" тогда
			
			ФорматЗаписи.Значение = Дата('00010101');
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ТАБЛИЦА" тогда	
			
			// имя области-описания формата полей таблицы или структуры хранится в колонке размер
			ФорматЗаписи.Поля = ПолучитьФорматЗаписи2НДФЛ(МакетФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый ТаблицаЗначений;
			
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					ОписаниеТиповПоля = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(Поле.Размер, Поле.РазрядностьДробнойЧасти);
				ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
					ОписаниеТиповПоля = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(Поле.Размер);
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					ОписаниеТиповПоля = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
				КонецЕсли; 
				ФорматЗаписи.Значение.Колонки.Добавить(Поле.ИмяПоля, ОписаниеТиповПоля );
				
			КонецЦикла; 
			
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРУКТУРА" тогда	
			
			ПозицияРазделителя = Найти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				Если ЭтоФизЛицо Тогда
					ИмяЗаписи = Сред(ИмяЗаписи, ПозицияРазделителя + 1)
				Иначе
					ИмяЗаписи = Лев(ИмяЗаписи, ПозицияРазделителя - 1)
				КонецЕсли;	
			КонецЕсли;
			ПозицияРазделителя = Найти(СтрРазмерПоля,"/");
			Если ПозицияРазделителя <> 0 Тогда
				Если ЭтоФизЛицо Тогда
					СтрРазмерПоля = Сред(СтрРазмерПоля, ПозицияРазделителя + 1)
				Иначе
					СтрРазмерПоля = Лев(СтрРазмерПоля, ПозицияРазделителя - 1)
				КонецЕсли;	
			КонецЕсли;
			
			// имя области-описания формата полей таблицы или структуры хранится в колонке размер
			ФорматЗаписи.Поля = ПолучитьФорматЗаписи2НДФЛ(МакетФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый Структура;
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				
				ПустоеЗначениеПоля = Неопределено;
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					ПустоеЗначениеПоля = 0;
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					ПустоеЗначениеПоля = Дата('00010101');
				Иначе
					ПустоеЗначениеПоля = "";
				КонецЕсли; 
				
				ФорматЗаписи.Значение.Вставить(Поле.ИмяПоля, ПустоеЗначениеПоля);
				
			КонецЦикла; 
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			// Имя набора записей хранится в третьей колонке
			ИмяНабора = СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 3).Текст);
			ПозицияРазделителя = Найти(ИмяНабора,"/");
			Если ПозицияРазделителя <> 0 Тогда
				Если ЭтоФизЛицо Тогда
					ИмяНабора = Сред(ИмяНабора, ПозицияРазделителя + 1)
				Иначе
					ИмяНабора = Лев(ИмяНабора, ПозицияРазделителя - 1)
				КонецЕсли;	
			КонецЕсли;
			ПозицияРазделителя = Найти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				Если ЭтоФизЛицо Тогда
					ИмяЗаписи = Сред(ИмяЗаписи, ПозицияРазделителя + 1)
				Иначе
					ИмяЗаписи = Лев(ИмяЗаписи, ПозицияРазделителя - 1)
				КонецЕсли;	
			КонецЕсли;
			ФорматЗаписи.Значение = ЗагрузитьФорматНабораЗаписей(МакетФормата, ИмяНабора, ЭтоФизЛицо);
			
		КонецЕсли;	
		
		ФорматНабора.Вставить(ИмяЗаписи, ФорматЗаписи);
		
	КонецЦикла;	
	
	Возврат ФорматНабора;
	
КонецФункции // ()

// Загружает форматы наборов записей файла сведений о доходах физлиц из заданного табличного документа
Функция ЗагрузитьФорматФайлаСведений(Знач МакетФормата)
	
	ФорматФайла = Новый Структура("НаборыЗаписей");
	
	ФорматФайла.НаборыЗаписей = Новый Структура;
	
	ОбластьФорматФайла = МакетФормата.ПолучитьОбласть("ФорматФайла");
	
	Для НСтр = 1 По ОбластьФорматФайла.ВысотаТаблицы Цикл
		
		// тип данных хранится во 2 колонке
		ТипДанных =  СокрЛП(ОбластьФорматФайла.Область(НСтр, 2).Текст);
		
		Если ТипДанных = "НаборЗаписей" Тогда
			// Имя набора записей хранится в третьей колонке
			ИмяНабора = СокрЛП(ОбластьФорматФайла.Область(НСтр, 3).Текст);
			ФорматНабораЗаписей = ЗагрузитьФорматНабораЗаписей(МакетФормата, ИмяНабора);
			ФорматФайла.НаборыЗаписей.Вставить(ИмяНабора, ФорматНабораЗаписей);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ФорматФайла;
	
КонецФункции // ()

// Возвращает форматированное значение числа-суммы для представления в печатных формах
Функция СуммаВОтчет(Число)
	Возврат Формат(Число, "ЧЦ=11; ЧДЦ=2; ЧРД=.; ЧН=' '; ЧГ=");
КонецФункции 

Функция ИзвлечьФИО(СтрокаДерева,Имя, Режим = "Полное")
	СтрокаДанных = СтрокаДерева.Строки.Найти(Имя,"Имя",Истина);
	Если СтрокаДанных = Неопределено Тогда
		Возврат "";
	Иначе
		Если Режим = "Полное" Тогда
			Возврат ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДанных,"Фамилия") + " " + ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДанных,"Имя") + " " + ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДанных,"Отчество");
		Иначе
			Возврат ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДанных,"Фамилия") + " " + Лев(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДанных,"Имя"),1) + ". " + Лев(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДанных,"Отчество"),1) + ".";
		КонецЕсли;
	КонецЕсли;
КонецФункции

// Очищает значения параметров области табличного документа
Процедура ОчиститьПараметрыОбластиТабличногоДокумента(Область)
	Для Параметр = 0 По Область.Параметры.Количество() -1 Цикл
		Область.Параметры[Параметр] = Неопределено;
	КонецЦикла; 
КонецПроцедуры

Процедура ВыделитьОдинарныеДанные(СтрокаДерева,Справка)
	
	Если СтрокаДерева.Строки.Количество() = 0 Тогда
		Справка.Параметры[СтрокаДерева.Имя] = ?(СтрокаДерева.Значение = "0.00" Или СтрокаДерева.Значение = "0", "",СтрокаДерева.Значение)
	Иначе
		Для каждого ВложеннаяСтрока Из СтрокаДерева.Строки Цикл
			ВыделитьОдинарныеДанные(ВложеннаяСтрока,Справка)
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВывестиТабличныеДанные(МассивСтрок,ДокументРезультат, ОбластиМакета, Знач МинимумСтрок, КоличествоКолонок = 2)
	
	ВсегоСтрок = МассивСтрок.Количество();
	
	Для СчКолонок = 1 По КоличествоКолонок Цикл
		ОчиститьПараметрыОбластиТабличногоДокумента(ОбластиМакета.Получить(СчКолонок - 1));
	КонецЦикла; 
	ЛеваяЧастьМакета = ОбластиМакета.Получить(0);
	
	// Вычислим высоту таблицы
	ВысотаТаблицы = ?(ВсегоСтрок < МинимумСтрок, ВсегоСтрок,?(ВсегоСтрок > МинимумСтрок * КоличествоКолонок, ОбщегоНазначения.ЦелМаксимальное(ВсегоСтрок / КоличествоКолонок), МинимумСтрок));
	Для Сч = 1 По ВысотаТаблицы Цикл
		ЛеваяСтрока = МассивСтрок.Получить(Сч - 1);
		ВыделитьОдинарныеДанные(ЛеваяСтрока,ЛеваяЧастьМакета);
		
		Если ВсегоСтрок > МинимумСтрок Тогда  // правая часть
			Для СчКолонок = 2 По КоличествоКолонок Цикл
				Если ВысотаТаблицы*(СчКолонок-1) + Сч <= ВсегоСтрок Тогда
					ПраваяСтрока = МассивСтрок.Получить(ВысотаТаблицы*(СчКолонок-1) + Сч - 1);
					ВыделитьОдинарныеДанные(ПраваяСтрока,ОбластиМакета.Получить(СчКолонок - 1));
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		ДокументРезультат.Вывести(ЛеваяЧастьМакета);	
		Для СчКолонок = 2 По КоличествоКолонок Цикл
			ДокументРезультат.Присоединить(ОбластиМакета.Получить(СчКолонок - 1));	
		КонецЦикла; 
		Для СчКолонок = 1 По КоличествоКолонок Цикл
			ОчиститьПараметрыОбластиТабличногоДокумента(ОбластиМакета.Получить(СчКолонок - 1));
		КонецЦикла; 
	КонецЦикла;
	
	// довыведем пустые строки раздела
	Если ВысотаТаблицы < МинимумСтрок Тогда
		Для Сч = ВысотаТаблицы + 1 По МинимумСтрок Цикл
			ДокументРезультат.Вывести(ЛеваяЧастьМакета);	
			Для СчКолонок = 2 По КоличествоКолонок Цикл
				ДокументРезультат.Присоединить(ОбластиМакета.Получить(СчКолонок - 1));	
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ВывестиТабличныеДанные()

// Проверяет, написана ли строка только русскими и латинскими буквами 
//
// Параметры:
//  СтрокаПараметр - строка, проверяемая строка.
//
// Возвращаемое значение:
//		Истина - строка состоит из допустимых символов
//		Ложь - в строке встречаются недопустимые символы
// 
// Описание:
//		Строка проверяется на наличие только русских и латинских букв;
//		кроме того,	допускаются дефис, "Ё", "ё".
//
Функция СтрокаНаписанаРусскимиИлиЛатинскими(Знач СтрокаПараметр)
	
	СтрокаПараметр = СокрЛП(СтрокаПараметр);	
	
	КоличествоСимволов = СтрДлина(СтрокаПараметр);
	
	Если  КоличествоСимволов > 0 Тогда
		
		ПервыйСимвол = КодСимвола(Лев(СтрокаПараметр,1)); 
		Русские = (ПервыйСимвол >= 192) или (ПервыйСимвол = 184) или (ПервыйСимвол = 168);
		
		СписокДопустимыхЗначений = Новый Соответствие;
		СписокДопустимыхЗначений.Вставить(184,Истина);   // ё
		СписокДопустимыхЗначений.Вставить(168,Истина);   // Ё
		СписокДопустимыхЗначений.Вставить(45,Истина);   //  "-"
		
		Для Сч = 1 По КоличествоСимволов Цикл
			
			Код = КодСимвола(Сред(СтрокаПараметр,Сч));   
			
			// Большие латинские буквы: 65 - 90
			// Маленькие латинские буквы: 97 - 122
			// Русские буквы: 192 и больше
			
			//русские:
			Если Русские Тогда
				
				Если (СписокДопустимыхЗначений[Код] = Неопределено) и (Код < 192)  Тогда
					Возврат Ложь;
				КонецЕсли;
				
				// латинские:	
			ИначеЕсли (Код <> 45) и ((Код < 65) или	(Код > 90) и (Код < 97) или (Код > 122))  Тогда    
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе 	
		Возврат Истина;
	КонецЕсли;
КонецФункции // СтрокаНаписанаРусскимиИлиЛатинскими()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ФАЙЛА СВЕДЕНИЙ О ДОХОДАХ ФИЗЛИЦ ЗА 2003 ГОД

// Выполняет чтение набора записей из файл сведений
// Процедура выполняет последовательное чтение строк файла, инкрементируя счетчик прочитанных строк ТекущаяСтрокаФайла.
// Каждая строка файла - запись данных.
Функция ПрочитатьНаборЗаписейИзФайла(НаборЗаписей, Файл, ТекущаяСтрокаФайла)
	
	// Каждая запись может быть записана в файле сведений максимум 1 раз, но может быть и не записана.
	// В любом случае записи в файле должны быть записаны последовательно.
	
	// Построим из структуры-набора массив имен записей для индексного обращения 
	МассивИменЗаписейНабора = Новый Массив;
	Для Каждого Запись Из НаборЗаписей Цикл
		МассивИменЗаписейНабора.Добавить(Запись.Ключ);
	КонецЦикла; 
	
	ПоследнийИндексЗаписиНабора = НаборЗаписей.Количество()-1;
	ИндексТекущейЗаписиНабора = 0;
	
	Пока 1=1 Цикл
		
		// Прочитаем очередную запись файла
		ТекущаяСтрокаФайла = ТекущаяСтрокаФайла + 1; 
		СтрокаФайла = Файл.ПолучитьСтроку(ТекущаяСтрокаФайла);
		
		Если СтрокаФайла = "@@@" Тогда// разделитель - признак окончания набора записей
			Возврат истина;
		КонецЕсли;  
		
		// Выделим из строки файла имя записи и сами данные
		ПозицияРазделителя = Найти(СтрокаФайла,":");
		ИмяЗаписиФайла = Лев(СтрокаФайла, ПозицияРазделителя - 1);
		СтрДанные = Сред(СтрокаФайла, ПозицияРазделителя + 1);
		
		// Попытаемся найти для имени записи файла соответствие в наборе записей
		Нашли = Ложь;
		Пока Не Нашли Цикл
			Если (ИмяЗаписиФайла = МассивИменЗаписейНабора[ИндексТекущейЗаписиНабора])	тогда
				Нашли = Истина;
			КонецЕсли;	
			Если ИндексТекущейЗаписиНабора = ПоследнийИндексЗаписиНабора Тогда
				Прервать;
			Иначе	
				ИндексТекущейЗаписиНабора = ИндексТекущейЗаписиНабора  + 1;
			КонецЕсли; 
		КонецЦикла; 
		
		Если (НЕ Нашли) Тогда
			Сообщить("Неверный формат файла. В строке № " + ТекущаяСтрокаФайла +" указано неверное имя записи """ + ИмяЗаписиФайла + """!");
			Возврат Ложь;	
		КонецЕсли; 
		
		ДанныеЗаписи = НаборЗаписей[ИмяЗаписиФайла];
		
		Если ДанныеЗаписи.ТипДанных = "СТРУКТУРА" Тогда
			
			// В файле значения структуры перечисляются через запятую
			ВсегоПолей =  ДанныеЗаписи.Поля.Количество();
			НомерПоля = 0;
			Для Каждого Поле из ДанныеЗаписи.Поля Цикл
				
				НомерПоля = НомерПоля + 1;
				
				// выделим из строки данных строковое представление очередного поля
				Если НомерПоля < ВсегоПолей Тогда
					ПозицияРазделителя = Найти(СтрДанные, ",");
					СтрЗначениеПоля = Лев(СтрДанные, ПозицияРазделителя - 1);
					СтрДанные = Сред(СтрДанные, ПозицияРазделителя + 1);
				Иначе
					СтрЗначениеПоля = СтрДанные;
				КонецЕсли; 
				
				// Преобразуем значение 
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					Попытка
						ЗначениеПоля = Число(СтрЗначениеПоля);
					Исключение
						Сообщить("Неверный формат файла. В строке № " + ТекущаяСтрокаФайла + " для поля '" + Поле.ИмяПоля +"' записи '" + ИмяЗаписиФайла + "' ожидается числовое значение!");
						Возврат Ложь;
					КонецПопытки;	
				Иначе// Строка (других типов не бывает)
					ЗначениеПоля  = СтрЗначениеПоля;	
				КонецЕсли; 
				
				ДанныеЗаписи.Значение[Поле.ИмяПоля] = ЗначениеПоля;
			КонецЦикла;	
			
		ИначеЕсли ДанныеЗаписи.ТипДанных = "ТАБЛИЦА" Тогда
			
			// Строки таблицы отделены символом ";"
			КонецТаблицы = Ложь;
			Пока НЕ КонецТаблицы Цикл
				
				// Добавим новую строку в таблицу значений для хранения считанных данных
				СтрокаТаблицы = ДанныеЗаписи.Значение.Добавить();
				
				// Выделим представление строки данных
				ПозицияРазделителя = Найти(СтрДанные, ";");
				Если ПозицияРазделителя <> 0 Тогда
					СтрДанныеСтроки = Лев(СтрДанные, ПозицияРазделителя - 1);
					СтрДанные = Сред(СтрДанные, ПозицияРазделителя + 1);
				Иначе
					СтрДанныеСтроки = СтрДанные;
					КонецТаблицы = Истина;
				КонецЕсли; 
				
				// В файле значения колонок строки таблицы перечисляются через запятую
				ВсегоПолей =  ДанныеЗаписи.Поля.Количество();
				НомерПоля = 0;
				Для Каждого Поле из ДанныеЗаписи.Поля Цикл
					
					НомерПоля = НомерПоля + 1;
					
					// выделим из строки данных строковое представление очередного поля
					Если НомерПоля < ВсегоПолей Тогда
						ПозицияРазделителя = Найти(СтрДанныеСтроки, ",");
						СтрЗначениеПоля = Лев(СтрДанныеСтроки, ПозицияРазделителя - 1);
						СтрДанныеСтроки = Сред(СтрДанныеСтроки, ПозицияРазделителя + 1);
					Иначе
						СтрЗначениеПоля = СтрДанныеСтроки;
					КонецЕсли; 
					
					// все значения типа "Число"
					Попытка
						ЗначениеПоля = Число(СтрЗначениеПоля);
					Исключение
						Сообщить("Неверный формат файла. В строке № " + ТекущаяСтрокаФайла + " для поля '" + Поле.ИмяПоля +"' записи '" + ИмяЗаписиФайла + "' ожидается числовое значение!");
						Возврат Ложь;
					КонецПопытки;	
					
					СтрокаТаблицы[Поле.ИмяПоля] =  ЗначениеПоля
				КонецЦикла;
			КонецЦикла; 
			
		ИначеЕсли ДанныеЗаписи.ТипДанных = "ЧИСЛО" ТОГДА
			
			Попытка
				ДанныеЗаписи.Значение = Число(СтрДанные);
			Исключение
				Сообщить("Неверный формат файла. В строке № " + ТекущаяСтрокаФайла + " ожидается числовое значение!");
				Возврат Ложь;
			КонецПопытки;	
			
		ИначеЕсли ДанныеЗаписи.ТипДанных = "КОНСТАНТА" ТОГДА	
			
			ДанныеЗаписи.Значение = СтрДанные;		
			
		ИначеЕсли ДанныеЗаписи.ТипДанных = "ДАТА" ТОГДА	
			
			Попытка
				// в файле дата представляется в формате дд.ММ.гггг
				ДанныеЗаписи.Значение = Дата(Сред(СтрДанные,7,4), Сред(СтрДанные,4,2), Лев(СтрДанные,2));
			Исключение
				Сообщить("Неверный формат файла. В строке № " + ТекущаяСтрокаФайла + " ожидается представление даты в формате 'дд.ММ.гггг'!");
				Возврат Ложь;
			КонецПопытки;	
			
		Иначе// Строка
			
			ДанныеЗаписи.Значение = СтрДанные;		
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат Истина;
КонецФункции

// Выполняет очистку данных набора записей
Процедура ОчиститьДанныеНабораЗаписей(НаборЗаписей)
	
	// Для каждой записи набора
	Для каждого Запись Из НаборЗаписей Цикл
		
		ИмяЗаписи = Запись.Ключ;
		ДанныеЗаписи = Запись.Значение;
		
		Если ДанныеЗаписи.ТипДанных = "СТРУКТУРА" Тогда
			// Перечислим значения структуры через запятую
			Для Каждого Поле из ДанныеЗаписи.Поля Цикл
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					ДанныеЗаписи.Значение[Поле.ИмяПоля] = 0; 	
				Иначе// Строка (других типов не бывает)
					ДанныеЗаписи.Значение[Поле.ИмяПоля] = ""; 	
				КонецЕсли; 
			КонецЦикла;	
		ИначеЕсли ДанныеЗаписи.ТипДанных = "ТАБЛИЦА" Тогда
			ДанныеЗаписи.Значение.Очистить(); 	
		ИначеЕсли ДанныеЗаписи.ТипДанных = "ЧИСЛО" ТОГДА
			ДанныеЗаписи.Значение = 0; 	
		ИначеЕсли ДанныеЗаписи.ТипДанных = "КОНСТАНТА" ТОГДА	
			// ничего не делаем
		ИначеЕсли ДанныеЗаписи.ТипДанных = "ДАТА" ТОГДА	
			ДанныеЗаписи.Значение = Дата('00010101'); 	
		Иначе// Строка
			ДанныеЗаписи.Значение = ""; 	
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда
	
	// Формирует файл, который можно будет записать на дискетку
	//
	// Параметры: 
	//  Нет
	//
	// Возвращаемое значение:
	//  Строка - содержимое файла
	//
	Функция СформироватьВыходнойФайл(Отказ) Экспорт
		
		// Расчитаем номер первой справки о доходах
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаДокумента",Дата);
		//vvv
		//Запрос.Текст =  "ВЫБРАТЬ
		Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//
		|	Сумма(1) КАК КоличествоСформированныхСправок
		|ИЗ
		|	Документ.СведенияОДоходахФизлиц.РаботникиОрганизации КАК СведенияОДоходахФизлицРаботникиОрганизации
		|
		|ГДЕ
		|	СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Дата < &ДатаДокумента И
		|	СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Проведен = Истина";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() тогда
			НомерПервойСправки = ?(Выборка.КоличествоСформированныхСправок = NULL, 0, Выборка.КоличествоСформированныхСправок)  + 1;
		Иначе	
			НомерПервойСправки = 1;
		КонецЕсли;  
		
		// Вызовем процедуру формирования файла сведений
		СтруктураПераметров = Новый Структура();
		СтруктураПераметров.Вставить("Организация", Организация);
		СтруктураПераметров.Вставить("НалоговыйПериод", НалоговыйПериод);
		СтруктураПераметров.Вставить("ДатаПодачиСведений", Дата);
		СтруктураПераметров.Вставить("Ответственный", Ответственный);
		СтруктураПераметров.Вставить("КонтактныйТелефонОтветственного", КонтактныйТелефонОтветственного);
		СтруктураПераметров.Вставить("НомерПервойСправки", НомерПервойСправки);
		СтруктураПераметров.Вставить("СведенияФормируютсяПоОрганизацииВЦелом", НЕ (НазначениеСправки = Перечисления.ПорядокФормированияСправкиОДоходахФизлица.ДляПередачиВИФНС));
		// Параметры, специфические для вызова из документа
		
		// Выборка списка физлиц, для которых надо получать доходы
		СписокФизлицТекст = "ВЫБРАТЬ 
		|	ТЧРаботникиОрганизации.ФизЛицо
		|ИЗ
		|	Документ.СведенияОДоходахФизлиц.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка";
		
		// Выборка физлиц и номеров строк, для возможности упорядочивания по номерам строк						
		СписокФизлицДляУпорядочиванияТекст = "ВЫБРАТЬ 
		|	ТЧРаботникиОрганизации.ФизЛицо,
		|	ТЧРаботникиОрганизации.НомерСтроки
		|ИЗ
		|	Документ.СведенияОДоходахФизлиц.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка";
		
		СтруктураПераметров.Вставить("СписокФизлицТекст", СписокФизлицТекст);
		СтруктураПераметров.Вставить("СписокФизлицДляУпорядочиванияТекст", СписокФизлицДляУпорядочиванияТекст);
		СтруктураПераметров.Вставить("УпорядочиваниеФизЛицТекст", "Упорядочить по РаботникиОрганизации.НомерСтроки");
		СтруктураПераметров.Вставить("ДокументСсылка", Ссылка);
		
		Возврат СформироватьФайлСведений(СтруктураПераметров, Отказ);
		
	КонецФункции 
	
	// формирует файл сведений о доходах физлиц для предоставления в ИФНС
	// Параметры:
	//		СтруктураПараметров - структура, содержащая параметры: 
	//			Организация, НалоговыйПериод (год сведений), Ответственный, МассивФизЛиц, ДатаПодачиСведений
	//
	//
	Функция СформироватьФайлСведений(СтруктураПараметров, Отказ)
		
		// Проверка параметров
		
		Если Не ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указана организация - работодатель!", Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтруктураПараметров.Организация.КодПоОКАТО) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан Код адреса организации", Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтруктураПараметров.Организация.КодИМНС) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан Код ИМНС", Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтруктураПараметров.НалоговыйПериод) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан налоговый период!", Отказ);
		КонецЕсли; 
		Если Не ЗначениеЗаполнено(СтруктураПараметров.ДатаПодачиСведений) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указана дата подачи сведений!", Отказ);
		КонецЕсли; 
		Если Не ЗначениеЗаполнено(СтруктураПараметров.Ответственный) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указано ответственное лицо!", Отказ);
		КонецЕсли; 
		Если Не ЗначениеЗаполнено(СтруктураПараметров.КонтактныйТелефонОтветственного) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан контактный телефон ответственного лица!", Отказ);
		КонецЕсли; 
		Если Не ЗначениеЗаполнено(СтруктураПараметров.НомерПервойСправки) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан номер первой справки о доходах!", Отказ);
		КонецЕсли; 
		Если РаботникиОрганизации.Количество() =0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не задан список физических лиц!", Отказ);
		КонецЕсли; 
		Если Отказ Тогда
			Возврат "";
		КонецЕсли; 	
		
		// Расчет вспомогательных параметров
		ГодНП = Формат(СтруктураПараметров.НалоговыйПериод, "ЧГ=0");
		ДатаНачалаНП = НачалоГода(Дата(ГодНП,1,1));
		ДатаКонцаНП = КонецГода(Дата(ГодНП,1,1));
		ДатаПодачиСведений = СтруктураПараметров.ДатаПодачиСведений;
		Если не ЗначениеЗаполнено (СтруктураПараметров.Организация.ГоловнаяОрганизация) тогда
			ГоловнаяОрганизация = СтруктураПараметров.Организация;
		Иначе	
			ГоловнаяОрганизация = СтруктураПараметров.Организация.ГоловнаяОрганизация;
		КонецЕсли;
		
		// Список всех структурных подразделений организации
		СписокВсехПодразделенийОрганизации = ПроцедурыУправленияПерсоналом.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
		СписокВсехПодразделенийОрганизации.Добавить(ГоловнаяОрганизация);
		
		// Массив кодов доходов, отражаемых в разделе 7: Доходы от продажи имущества
		МассивКодовДоходовРаздела7 = Новый Массив;
		МассивКодовДоходовРаздела7.Добавить(Справочники.ДоходыНДФЛ.Код591);
		МассивКодовДоходовРаздела7.Добавить(Справочники.ДоходыНДФЛ.Код592);
		МассивКодовДоходовРаздела7.Добавить(Справочники.ДоходыНДФЛ.Код593);
		МассивКодовДоходовРаздела7.Добавить(Справочники.ДоходыНДФЛ.Код594);
		МассивКодовДоходовРаздела7.Добавить(Справочники.ДоходыНДФЛ.Код595);
		МассивКодовДоходовРаздела7.Добавить(Справочники.ДоходыНДФЛ.Код596);
		МассивКодовДоходовРаздела7.Добавить(Справочники.ДоходыНДФЛ.Код597);
		МассивКодовДоходовРаздела7.Добавить(Справочники.ДоходыНДФЛ.Код598);
		
		// Массив кодов доходов, относящихся к авторским
		МассивКодовДоходовАвторские = Новый Массив;
		МассивКодовДоходовАвторские.Добавить(Справочники.ДоходыНДФЛ.Код301);
		МассивКодовДоходовАвторские.Добавить(Справочники.ДоходыНДФЛ.Код302);
		МассивКодовДоходовАвторские.Добавить(Справочники.ДоходыНДФЛ.Код303);
		МассивКодовДоходовАвторские.Добавить(Справочники.ДоходыНДФЛ.Код304);
		МассивКодовДоходовАвторские.Добавить(Справочники.ДоходыНДФЛ.Код305);
		МассивКодовДоходовАвторские.Добавить(Справочники.ДоходыНДФЛ.Код306);
		МассивКодовДоходовАвторские.Добавить(Справочники.ДоходыНДФЛ.Код307);
		МассивКодовДоходовАвторские.Добавить(Справочники.ДоходыНДФЛ.Код308);
		МассивКодовДоходовАвторские.Добавить(Справочники.ДоходыНДФЛ.Код309);
		МассивКодовДоходовАвторские.Добавить(Справочники.ДоходыНДФЛ.Код310);
		МассивКодовДоходовАвторские.Добавить(Справочники.ДоходыНДФЛ.Код311);
		МассивКодовДоходовАвторские.Добавить(Справочники.ДоходыНДФЛ.Код312);
		МассивКодовДоходовАвторские.Добавить(Справочники.ДоходыНДФЛ.Код313);
		МассивКодовДоходовАвторские.Добавить(Справочники.ДоходыНДФЛ.Код314);
		МассивКодовДоходовАвторские.Добавить(Справочники.ДоходыНДФЛ.Код315);
		
		// Массив кодов льгот
		МассивКодовДоходовЛьготы = Новый Массив;
		//МассивКодовДоходовЛьготы.Добавить(Справочники.ДоходыНДФЛ.Код3114юр);  //?
		МассивКодовДоходовЛьготы.Добавить(Справочники.ДоходыНДФЛ.Код1213);    //503
		МассивКодовДоходовЛьготы.Добавить(Справочники.ДоходыНДФЛ.Код16313вых); //503
		МассивКодовДоходовЛьготы.Добавить(Справочники.ДоходыНДФЛ.Код12117);   //500 
		МассивКодовДоходовЛьготы.Добавить(Справочники.ДоходыНДФЛ.Код12124);   //541 
		МассивКодовДоходовЛьготы.Добавить(Справочники.ДоходыНДФЛ.Код12119);   //550 
		МассивКодовДоходовЛьготы.Добавить(Справочники.ДоходыНДФЛ.Код3147);    //500
		МассивКодовДоходовЛьготы.Добавить(Справочники.ДоходыНДФЛ.Код3131);    //500
		МассивКодовДоходовЛьготы.Добавить(Справочники.ДоходыНДФЛ.Код12128);    //529
		МассивКодовДоходовЛьготы.Добавить(Справочники.ДоходыНДФЛ.Код1631191);
		МассивКодовДоходовЛьготы.Добавить(Справочники.ДоходыНДФЛ.Код163119иныеорг);
		
		МассивКодовДоходовНеобл = Новый Массив;
		МассивКодовДоходовНеобл.Добавить(Справочники.ДоходыНДФЛ.Код1211);     //501
		МассивКодовДоходовНеобл.Добавить(Справочники.ДоходыНДФЛ.Код1212);     //502
		МассивКодовДоходовНеобл.Добавить(Справочники.ДоходыНДФЛ.Код1214);     //504
		МассивКодовДоходовНеобл.Добавить(Справочники.ДоходыНДФЛ.Код1215);     //505
		МассивКодовДоходовНеобл.Добавить(Справочники.ДоходыНДФЛ.Код1217);     //507
		МассивКодовДоходовНеобл.Добавить(Справочники.ДоходыНДФЛ.Код12181);     //508
		МассивКодовДоходовНеобл.Добавить(Справочники.ДоходыНДФЛ.Код1218);     //508
		МассивКодовДоходовНеобл.Добавить(Справочники.ДоходыНДФЛ.Код1219);     //509
		МассивКодовДоходовНеобл.Добавить(Справочники.ДоходыНДФЛ.Код12110);     //510
		МассивКодовДоходовНеобл.Добавить(Справочники.ДоходыНДФЛ.Код12122);     //520
		МассивКодовДоходовНеобл.Добавить(Справочники.ДоходыНДФЛ.Код12122а);     //521
		МассивКодовДоходовНеобл.Добавить(Справочники.ДоходыНДФЛ.Код12125);     //526
		МассивКодовДоходовНеобл.Добавить(Справочники.ДоходыНДФЛ.Код12126);     //527
		МассивКодовДоходовНеобл.Добавить(Справочники.ДоходыНДФЛ.Код12127);     //528
		МассивКодовДоходовНеобл.Добавить(Справочники.ДоходыНДФЛ.Код12139);     //538
		
		// Массив кодов стандартных вычетов
		МассивКодовДоходовСтандартные = Новый Массив;
		МассивКодовДоходовСтандартные.Добавить(Справочники.ВычетыНДФЛ.Код600);
		МассивКодовДоходовСтандартные.Добавить(Справочники.ВычетыНДФЛ.Код610);
		МассивКодовДоходовСтандартные.Добавить(Справочники.ВычетыНДФЛ.Код611);
		МассивКодовДоходовСтандартные.Добавить(Справочники.ВычетыНДФЛ.Код620);
		//	МассивКодовДоходовСтандартные.Добавить(Справочники.ВычетыНДФЛ.Код630);
		//МассивКодовДоходовСтандартные.Добавить(Справочники.ВычетыНДФЛ.Код640);
		//МассивКодовДоходовСтандартные.Добавить(Справочники.ВычетыНДФЛ.Код650);
		
		// Создание запроса и установка всех необходимых параметров
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
		Запрос.УстановитьПараметр("НалоговыйПериод", НалоговыйПериод);
		Запрос.УстановитьПараметр("НачалоНП", ДатаНачалаНП);
		Запрос.УстановитьПараметр("КонецНП", ДатаКонцаНП);// последний месяц налогового периода, за который подаём сведения
		Запрос.УстановитьПараметр("НачалоСледующегоНП", ДатаКонцаНП + 1);
		Запрос.УстановитьПараметр("ДатаПодачиСведений", КонецМесяца(ДатаПодачиСведений));// дата акуальности сведений о доходах и налогах
		Запрос.УстановитьПараметр("Ставка09", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09);
		Запрос.УстановитьПараметр("Ставка13", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);
		Запрос.УстановитьПараметр("СтавкаНеОблагается", Перечисления.НДФЛСтавкиНалогообложенияРезидента.НеОблагается);
		Запрос.УстановитьПараметр("МассивКодовДоходовРаздела7", МассивКодовДоходовРаздела7);
		Запрос.УстановитьПараметр("МассивКодовДоходовАвторские", МассивКодовДоходовАвторские);
		Запрос.УстановитьПараметр("МассивКодовДоходовЛьготы", МассивКодовДоходовЛьготы);
		Запрос.УстановитьПараметр("МассивКодовДоходовНеОбл", МассивКодовДоходовНеОбл);
		Запрос.УстановитьПараметр("ВидАдресаРегистрации" , Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица);
		Запрос.УстановитьПараметр("ВидАдресаИнострАдрес" , Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица);
		Запрос.УстановитьПараметр("ВнутреннееСовместительство" , Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
		Запрос.УстановитьПараметр("Увольнение" , Перечисления.ПричиныИзмененияСостояния.Увольнение);
		Запрос.УстановитьПараметр("ПустаяСтрана" , Справочники.КлассификаторСтранМира.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойКодВычета" , Справочники.ВычетыНДФЛ.ПустаяСсылка());
		Запрос.УстановитьПараметр("РасчетыСБюджетомНачисление" , Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление);
		Запрос.УстановитьПараметр("РасчетыСБюджетомУдержание" , Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание);
		Запрос.УстановитьПараметр("РасчетыСБюджетомВозвратНалога" , Перечисления.НДФЛРасчетыСБюджетомВидСтроки.ВозвратНалога);
		Запрос.УстановитьПараметр("РасчетыСБюджетомПереданоНаВзыскание" , Перечисления.НДФЛРасчетыСБюджетомВидСтроки.ПереданоНаВзыскание);
		Запрос.УстановитьПараметр("СписокВсехПодразделенийОрганизации" , СписокВсехПодразделенийОрганизации);
		Запрос.УстановитьПараметр("ДокументСсылка", СтруктураПараметров.ДокументСсылка);
		
		// Текст выборки списка физлиц, по доходам которых формируются сведения
		СписокФизлицТекст  = СтруктураПараметров.СписокФизлицТекст;
		СписокФизлицДляУпорядочиванияТекст = СтруктураПараметров.СписокФизлицДляУпорядочиванияТекст;
		УпорядочиваниеФизЛицТекст  = СтруктураПараметров.УпорядочиваниеФизЛицТекст;
		
		// Признак формирования сведений по всей организации (иначе - по обособленному подразделению)
		СведенияФормируютсяПоОрганизацииВЦелом = СтруктураПараметров.СведенияФормируютсяПоОрганизацииВЦелом;
		
		Если СведенияФормируютсяПоОрганизацииВЦелом Тогда
			// Для выдачи справки работнику доходы и налоги будем собирать по организации в целом (по всем структурным подразделениям организации)
			Запрос.УстановитьПараметр("СписокОтчитывающихсяПодразделений", СписокВсехПодразделенийОрганизации);
		Иначе
			// Для передачи сведений в ИФНС доходы и налоги будем собирать по выбранному обособленому подразделению
			Запрос.УстановитьПараметр("СписокОтчитывающихсяПодразделений", СтруктураПараметров.Организация);
		КонецЕсли; 
		
		// Сформируем текст запроса с датами месяцев налогового периода
		// первый месяц
		КонецМесяца = КонецМесяца(ДатаНачалаНП);
		ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период";
		// прибавим остальные месяцы
		Для Сч = 2 По 12 Цикл
			КонецМесяца = КонецМесяца(КонецМесяца+1);
			ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
		КонецЦикла;
		
		//-----------------------------------------------------------------------------
		// ВЫБОРКА ДОХОДОВ ПО ВИДАМ ЗА ГОД ДЛЯ ВСЕХ РАЗДЕЛОВ СПРАВКИ
		
		ДоходыПоВидамЗаГод =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = &Ставка13
		|			ТОГДА ВЫБОР
		|					КОГДА НДФЛСведенияОДоходах.КодДохода В (&МассивКодовДоходовРаздела7)
		|						ТОГДА ""ДоходыРаздела7""
		|					ИНАЧЕ ВЫБОР
		|							КОГДА НДФЛСведенияОДоходах.КодДохода В (&МассивКодовДоходовАвторские)
		|								ТОГДА ""ДоходыРазделаАвторские""
		|							ИНАЧЕ ВЫБОР
		|									КОГДА НДФЛСведенияОДоходах.КодДохода В (&МассивКодовДоходовЛьготы)
		|										ТОГДА ""ДоходыРазделаЛьготы""
		|									ИНАЧЕ ВЫБОР
		|											КОГДА НДФЛСведенияОДоходах.КодДохода В (&МассивКодовДоходовНеОбл)
		|												ТОГДА ""ДоходыРазделаНеобл""
		|											ИНАЧЕ ""ДоходыРаздела3""
		|										КОНЕЦ
		|								КОНЕЦ
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента <> &СтавкаНеОблагается
		|					ТОГДА ""НеДоход""
		|			КОНЕЦ
		|	КОНЕЦ КАК ВидСтрокиЗапроса,
		|	НДФЛСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|	НДФЛСведенияОДоходах.КодДохода.КодДляОтчетности КАК КодДохода,
		|	НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента КАК Ставка,
		|	НДФЛСведенияОДоходах.КодВычета.Код КАК КодВычета,
		|	СУММА(НДФЛСведенияОДоходах.СуммаДохода) КАК СуммаДохода,
		|	СУММА(НДФЛСведенияОДоходах.СуммаВычета) КАК СуммаВычета,
		|	СУММА(НДФЛСведенияОДоходах.СуммаНалогаИсчисленная) КАК СуммаНалога,
		|	НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ) КАК Период 
		
		|ИЗ
		|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
		|ГДЕ
		|	НДФЛСведенияОДоходах.Период МЕЖДУ &НачалоНП И &КонецНП
		|	И НДФЛСведенияОДоходах.ПериодРегистрации <= &ДатаПодачиСведений
		|	И НДФЛСведенияОДоходах.ОбособленноеПодразделение В(&СписокОтчитывающихсяПодразделений)
		|	И НДФЛСведенияОДоходах.ФизЛицо в (" + СписокФизлицТекст + ")
		|
		|СГРУППИРОВАТЬ ПО
		|	НДФЛСведенияОДоходах.ФизЛицо,
		|	НДФЛСведенияОДоходах.КодДохода,
		|	НДФЛСведенияОДоходах.КодВычета,
		|	НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ),
		|	НДФЛСведенияОДоходах.КодДохода.КодДляОтчетности,
		|	НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента,
		|	НДФЛСведенияОДоходах.КодВычета.Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизЛицо,
		|	Период,
		|	КодВычета";
		
		//-----------------------------------------------------------------------------
		// ВЫБОРКА ДОХОДОВ ПОМЕСЯЧНО ПО СТАВКЕ 13 % 
		
		ОблагаемыеДоходыПоМесяцамПоСтавке13 = 
		"ВЫБРАТЬ
		|	НДФЛСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|	СУММА(НДФЛСведенияОДоходах.СуммаДохода) КАК ОблагаемыйДоход,
		|	СУММА(НДФЛСведенияОДоходах.СуммаВычета) КАК ПредоставленныйВычет,
		|	НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ) КАК Период
		|ИЗ
		|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
		|
		|ГДЕ
		|	НДФЛСведенияОДоходах.Период МЕЖДУ &НачалоНП И &КонецНП И
		|	НДФЛСведенияОДоходах.ПериодРегистрации <= &ДатаПодачиСведений И
		|	НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = &Ставка13 И
		|	НДФЛСведенияОДоходах.ОбособленноеПодразделение В (<CписокСтруктурныхПодразделений>) И
		|	НДФЛСведенияОДоходах.ФизЛицо В (" + СписокФизлицТекст + ") И
		|	(НЕ(НДФЛСведенияОДоходах.КодДохода В (&МассивКодовДоходовРаздела7)))
		|
		|СГРУППИРОВАТЬ ПО
		|	НДФЛСведенияОДоходах.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ)";
		
		
		
		
		// Для раздела 3.2 возьмём только доходы заработанные: для отчета -  во всех подразделениях, для документа -  в выбранном подразделении
		ДоходыПоМесяцамПоСтавке13ДляРаздела3_2 = СтрЗаменить(ОблагаемыеДоходыПоМесяцамПоСтавке13, "<CписокСтруктурныхПодразделений>", "&СписокОтчитывающихсяПодразделений"); 	
		
		// Для расчета ограничения по стандартных вычетам надо брать доходы, заработанные во всех струкnурных подразделениях организации
		ЗаработанныеДоходыПоМесяцамДляОграниченияСтандартныхВычетовТекст = СтрЗаменить(ОблагаемыеДоходыПоМесяцамПоСтавке13, "<CписокСтруктурныхПодразделений>", "&СписокВсехПодразделенийОрганизации"); 	
		
		
		//-----------------------------------------------------------------------------
		// НАЧИСЛЕННЫЙ И УДЕРЖАННЫЙ НАЛОГ ПО СТАВКАМ
		
		НачисленныйУдержанныйНалогЗаГодПоСтавкамТекст = "
		|ВЫБРАТЬ
		|	ФизЛицо,
		|	СтавкаНалогообложенияРезидента КАК Ставка,
		|	МесяцНалоговогоПериода КАК Период,
		// Начисленный налог за месяцы текущего налогового периода
		|	Сумма(ВЫБОР КОГДА ВидСтроки = &РасчетыСБюджетомНачисление И (МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП) ТОГДА ВЫБОР КОГДА ПримененныйвычетЛичный ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ПримененныйВычетЛичный КОНЕЦ ИНАЧЕ 0 КОНЕЦ) КАК ВычетЛичныйГод,
		|	Сумма(ВЫБОР КОГДА ВидСтроки = &РасчетыСБюджетомНачисление И (МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП) ТОГДА ВЫБОР КОГДА ПримененныйвычетНаДетей ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ПримененныйВычетНадетей КОНЕЦ ИНАЧЕ 0 КОНЕЦ) КАК ВычетНаДетейГод,
		|	Сумма(ВЫБОР КОГДА ВидСтроки = &РасчетыСБюджетомНачисление И (МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП) ТОГДА ВЫБОР КОГДА ПримененныйвычетНаДетейЛьгота ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ПримененныйВычетНадетейЛьгота КОНЕЦ ИНАЧЕ 0 КОНЕЦ) КАК ВычетНаДетейЛьгота,
		|	Сумма(ВЫБОР КОГДА ВидСтроки = &РасчетыСБюджетомНачисление И (МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП) ТОГДА ВЫБОР КОГДА ПримененныйДополнительныйвычет ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ПримененныйДополнительныйВычет КОНЕЦ ИНАЧЕ 0 КОНЕЦ) КАК ВычетДополнительныйГод,
		|	Сумма(ВЫБОР КОГДА ВидСтроки = &РасчетыСБюджетомНачисление И (МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП) ТОГДА Налог ИНАЧЕ 0 КОНЕЦ) КАК НачисленоЗаТекущийГод,
		// Начисленный налог за всю историю по текущий НП (для расчета сальдо)
		|	Сумма(ВЫБОР КОГДА ВидСтроки = &РасчетыСБюджетомНачисление И (МесяцНалоговогоПериода < &НачалоСледующегоНП) ТОГДА Налог ИНАЧЕ 0 КОНЕЦ) КАК НачисленоЗаВсеГоды,
		// Удержанный налог за месяцы текущего налогового периода
		|	Сумма(ВЫБОР КОГДА ВидСтроки = &РасчетыСБюджетомУдержание И (МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП)  ТОГДА Налог ИНАЧЕ 0 КОНЕЦ) КАК УдержаноЗаТекущийГод,									  
		// Удержанный налог за всю историю по текущий НП (для расчета сальдо)
		|	Сумма(ВЫБОР КОГДА ВидСтроки = &РасчетыСБюджетомУдержание И (МесяцНалоговогоПериода < &НачалоСледующегоНП)  ТОГДА Налог ИНАЧЕ 0 КОНЕЦ) КАК УдержаноЗаВсеГоды,									  
		// Возврат налога за месяцы текущего налогового периода
		|	Сумма(ВЫБОР КОГДА ВидСтроки = &РасчетыСБюджетомВозвратНалога И (МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП) ТОГДА -(Налог) ИНАЧЕ 0 КОНЕЦ) КАК ВозвращеноЗаТекущийГод,
		// Возврат налога за всю историю по текущий НП (для расчета сальдо)
		|	Сумма(ВЫБОР КОГДА ВидСтроки = &РасчетыСБюджетомВозвратНалога И (МесяцНалоговогоПериода < &НачалоСледующегоНП) ТОГДА -(Налог) ИНАЧЕ 0 КОНЕЦ) КАК ВозвращеноЗаВсеГоды,
		// Возврат налога за прошлые налоговые периоды, зарегистрированный в текущем налоговом периоде
		|	Сумма(ВЫБОР КОГДА ВидСтроки = &РасчетыСБюджетомВозвратНалога И МесяцНалоговогоПериода < &НачалоНП И (Период МЕЖДУ &НачалоНП И &КонецНП)  ТОГДА -(Налог) ИНАЧЕ 0 КОНЕЦ) КАК ВозвращеноВТекущемГодуЗаПрошлыеГоды,
		// Передано на взыскание за текущий налоговый период в текущем налоговом периоде
		|	Сумма(ВЫБОР КОГДА ВидСтроки = &РасчетыСБюджетомПереданоНаВзыскание И (Период МЕЖДУ &НачалоНП И &КонецНП) И (МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП) ТОГДА Налог ИНАЧЕ 0 КОНЕЦ) КАК ПереданоНаВзысканиеВТекущемГодуЗаТекущий,
		// Передано на взыскание за все налоговые периоды периоды в текущем налоговом периоде
		|	Сумма(ВЫБОР КОГДА ВидСтроки = &РасчетыСБюджетомПереданоНаВзыскание И (Период МЕЖДУ &НачалоНП И &КонецНП) ТОГДА Налог ИНАЧЕ 0 КОНЕЦ) КАК ПереданоНаВзысканиеВТекущемГодуЗаВсеГоды,
		// Передано на взыскание за всю историю по текущий НП (для расчета сальдо) !!! условие по "Период"
		|	Сумма(ВЫБОР КОГДА ВидСтроки = &РасчетыСБюджетомПереданоНаВзыскание И (Период  < &НачалоСледующегоНП) ТОГДА Налог ИНАЧЕ 0 КОНЕЦ) КАК ПереданоНаВзысканиеЗаВсеГоды									  
		|ИЗ
		|	РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
		|
		|ГДЕ
		|	Период <= &ДатаПодачиСведений И
		|   Период >= &НачалоНП И
		//|	ВидСтроки = &РасчетыСБюджетомНачисление И
		|	ОбособленноеПодразделение В (&СписокОтчитывающихсяПодразделений)
		//|	ФизЛицо в (" + СписокФизлицТекст + ")
		|СГРУППИРОВАТЬ ПО 
		|	ФизЛицо, МесяцНалоговогоПериода, СтавкаНалогообложенияРезидента
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		
		Запрос.Текст = НачисленныйУдержанныйНалогЗаГодПоСтавкамТекст; 	
		
		//-----------------------------------------------------------------------------
		// СВЕДЕНИЯ О НАЛОГОВОМ АГЕНТЕ
		
		ДанныеОНалоговомАгентеТекст = 
		"ВЫБРАТЬ
		|	Организации.КодИМНС КАК КодИМНС,
		|	Организации.КПП,
		|	Организации.КодПоОКАТО,
		|	Организации.ЮрФизЛицо,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество,
		|	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество КАК ФИО,
		|	ВЫБОР
		|		КОГДА Организации.Ссылка = &ГоловнаяОрганизация
		|			ТОГДА Организации.ИНН
		|		ИНАЧЕ Организации.ГоловнаяОрганизация.ИНН
		|	КОНЕЦ КАК ИНН,
		|	Организации.ИНН КАК ИНН1,
		|	Организации.НаименованиеПолное КАК НаименованиеОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаПодачиСведений, ФизЛицо = &Организация) КАК ФИОФизЛицСрезПоследних
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Организации.Ссылка = &Организация";
		
		
		ПраваНаИмущественныеВычетыТекст = 
		"ВЫБРАТЬ
		|	СправкиОДоходах.ФизЛицо КАК ФизЛицо,
		|	СправкиОДоходах.НомерСтроки КАК НомерСтроки,
		|	НДФЛИмущественныеВычетыФизлиц.КодВычетаИмущественный КАК КодВычет,
		|	НДФЛИмущественныеВычетыФизлиц.РазмерРасход КАК СумВычет,
		|	НДФЛИмущественныеВычетыФизлиц.РазмерПриход КАК СумЛьгот,
		|	КОНЕЦПЕРИОДА(НДФЛИмущественныеВычетыФизлиц.Период, МЕСЯЦ) КАК Месяц
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТЧРаботникиОрганизации.ФизЛицо КАК ФизЛицо,
		|		ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки
		|	ИЗ
		|		Документ.СведенияОДоходахФизлиц.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|	ГДЕ
		|		ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка) КАК СправкиОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.Обороты(
		|				&НачалоНП,
		|				&ДатаПодачиСведений,
		|				Месяц,
		|				Организация = &ГоловнаяОрганизация
		|					И Год = &НалоговыйПериод
		|					И ФизЛицо В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							ТЧРаботникиОрганизации.ФизЛицо КАК ФизЛицо
		|						ИЗ
		|							Документ.СведенияОДоходахФизлиц.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|						ГДЕ
		|							ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка)) КАК НДФЛИмущественныеВычетыФизлиц
		|		ПО (НДФЛИмущественныеВычетыФизлиц.ФизЛицо = СправкиОДоходах.ФизЛицо)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизЛицо";
		
		
		//-----------------------------------------------------------------------------
		// СВЕДЕНИЯ О ФИЗЛИЦАХ
		
		СведенияОФизЛицахТекст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка КАК ФизЛицо,
		|	ФизическиеЛица.ИНН,
		|	ФизическиеЛица.СтраховойНомерПФР,
		|	ВЫБОР КОГДА ПаспортныеДанные.ДокументВид.КодИМНС ЕСТЬ NULL ТОГДА """" ИНАЧЕ ПаспортныеДанные.ДокументВид.КодИМНС КОНЕЦ КАК КодДокументаУдЛичн,
		|	ВЫБОР КОГДА ПаспортныеДанные.ДокументСерия ЕСТЬ NULL ТОГДА """" ИНАЧЕ ПаспортныеДанные.ДокументСерия КОНЕЦ КАК СерияДокументаУдЛичн,
		|	ВЫБОР КОГДА ПаспортныеДанные.ДокументНомер ЕСТЬ NULL ТОГДА """" ИНАЧЕ ПаспортныеДанные.ДокументНомер КОНЕЦ КАК НомерДокументаУдЛичн,
		|	ВЫБОР КОГДА (Гражданство.ФизЛицо) ЕСТЬ NULL  ИЛИ НЕ(Гражданство.НеЯвляетсяНалоговымРезидентомРФ) ТОГДА 1 ИНАЧЕ 2 КОНЕЦ КАК Статус,
		|	ФизическиеЛица.Наименование КАК ФизЛицоНаименование,
		|	ФИОФизЛиц.Фамилия,
		|	ФИОФизЛиц.Имя,
		|	ФИОФизЛиц.Отчество,
		|	ФизическиеЛица.ДатаРождения КАК ДатаРождения,
		|	""112"" КАК КодСтраны,
		|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ (Гражданство.Страна  = &ПустаяСтрана) ИЛИ Гражданство.Страна = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.БЕЛАРУСЬ) ТОГДА """" ИНАЧЕ Гражданство.Страна.Код КОНЕЦ КАК АдресКодСтраны,	
		|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ (Гражданство.Страна  = &ПустаяСтрана) ИЛИ Гражданство.Страна = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.БЕЛАРУСЬ) ТОГДА """" ИНАЧЕ АдресаИностранцев.Поле2  КОНЕЦ КАК АдресОбласть,	
		|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ (Гражданство.Страна  = &ПустаяСтрана) ИЛИ Гражданство.Страна = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.БЕЛАРУСЬ) ТОГДА """" ИНАЧЕ АдресаИностранцев.Поле3  КОНЕЦ КАК АдресРайон,	
		|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ (Гражданство.Страна  = &ПустаяСтрана) ИЛИ Гражданство.Страна = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.БЕЛАРУСЬ) ТОГДА """" ИНАЧЕ АдресаИностранцев.Поле4  КОНЕЦ КАК АдресГород,	
		|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ (Гражданство.Страна  = &ПустаяСтрана) ИЛИ Гражданство.Страна = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.БЕЛАРУСЬ) ТОГДА """" ИНАЧЕ АдресаИностранцев.Поле5  КОНЕЦ КАК АдресНаселенныйПункт,
		|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ (Гражданство.Страна  = &ПустаяСтрана) ИЛИ Гражданство.Страна = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.БЕЛАРУСЬ) ТОГДА """" ИНАЧЕ АдресаИностранцев.Поле11 КОНЕЦ КАК АдресТипУлицы,
		|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ (Гражданство.Страна  = &ПустаяСтрана) ИЛИ Гражданство.Страна = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.БЕЛАРУСЬ) ТОГДА """" ИНАЧЕ АдресаИностранцев.Поле6  КОНЕЦ КАК АдресУлица,	
		|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ (Гражданство.Страна  = &ПустаяСтрана) ИЛИ Гражданство.Страна = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.БЕЛАРУСЬ) ТОГДА """" ИНАЧЕ АдресаИностранцев.Поле7  КОНЕЦ КАК АдресДом,	
		|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ (Гражданство.Страна  = &ПустаяСтрана) ИЛИ Гражданство.Страна = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.БЕЛАРУСЬ) ТОГДА """" ИНАЧЕ АдресаИностранцев.Поле8  КОНЕЦ КАК АдресКорпус,	
		|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ (Гражданство.Страна  = &ПустаяСтрана) ИЛИ Гражданство.Страна = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.БЕЛАРУСЬ) ТОГДА """" ИНАЧЕ АдресаИностранцев.Поле9  КОНЕЦ КАК АдресКвартира,
		|	ВЫБОР КОГДА СрезРаботниковОрганизацииНаКонецГода.Сотрудник.ФизЛицо ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК РаботникНаКонецГодаРаботаетВПодразделении
		|ИЗ
		|	(" + СписокФизлицДляУпорядочиванияТекст + ") КАК РаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО ФизическиеЛица.Ссылка = РаботникиОрганизации.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&ДатаПодачиСведений, ФизЛицо в (" + СписокФизлицТекст + ")) КАК ПаспортныеДанные
		|		ПО ПаспортныеДанные.ФизЛицо = РаботникиОрганизации.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&КонецНП, ФизЛицо в (" + СписокФизлицТекст + ")) КАК Гражданство
		|		ПО Гражданство.ФизЛицо = РаботникиОрганизации.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаПодачиСведений, ФизЛицо в (" + СписокФизлицТекст + ")) КАК ФИОФизЛиц
		|		ПО ФИОФизЛиц.ФизЛицо = РаботникиОрганизации.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаРегистрации
		|		ПО РаботникиОрганизации.ФизЛицо = АдресаРегистрации.Объект И АдресаРегистрации.Вид = &ВидАдресаРегистрации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК РегионыПоРегистрации
		|		ПО РегионыПоРегистрации.ТипАдресногоЭлемента = 1 И (РегионыПоРегистрации.Наименование + "" "" +РегионыПоРегистрации.Сокращение) = АдресаРегистрации.Поле2
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаИностранцев
		|		ПО РаботникиОрганизации.ФизЛицо = АдресаИностранцев.Объект И АдресаИностранцев.Вид = &ВидАдресаИнострАдрес
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК Страны
		|		ПО Страны.Наименование = АдресаИностранцев.Поле1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&КонецНП, Организация = &ГоловнаяОрганизация И (Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство или Сотрудник.ВидЗанятости ЕСТЬ NULL) И Сотрудник.ФизЛицо в (" + СписокФизлицТекст + ")) КАК СрезРаботниковОрганизацииНаКонецГода
		|		ПО СрезРаботниковОрганизацииНаКонецГода.Сотрудник.ФизЛицо = РаботникиОрганизации.ФизЛицо И СрезРаботниковОрганизацииНаКонецГода.ПодразделениеОрганизации.Владелец = &Организация И СрезРаботниковОрганизацииНаКонецГода.ПричинаИзмененияСостояния <> &Увольнение
		|" + УпорядочиваниеФизЛицТекст;
		
		//-----------------------------------------------------------------------------
		// ВЫБОРКА ДАННЫХ 
		
		Запрос.Текст = ДанныеОНалоговомАгентеТекст; 	
		ВыборкаСведенийОбНА = Запрос.Выполнить().Выбрать();
		
		Запрос.Текст = СведенияОФизЛицахТекст; 	
		ВыборкаФизЛиц = Запрос.Выполнить().Выгрузить();
		
		Запрос.Текст = ДоходыПоВидамЗаГод; 	
		ВыборкаДоходовПоВидамЗаГод = Запрос.Выполнить().Выбрать();
		
		Запрос.Текст = ДоходыПоМесяцамПоСтавке13ДляРаздела3_2; 	
		ВыборкаДоходыПоМесяцамПоСтавке13ДляРаздела3_2 = Запрос.Выполнить().Выбрать();
		
		Запрос.Текст = НачисленныйУдержанныйНалогЗаГодПоСтавкамТекст; 	
		ВыборкаНачУдНалогЗаГодПоСтавкам = Запрос.Выполнить().Выбрать();
		
		Запрос.Текст = ПраваНаИмущественныеВычетыТекст; 	
		ВыборкаИмущественныеВычеты = Запрос.Выполнить().Выбрать();
		
		//Запрос.Текст = СальдоПоРасчетамСБюджетомТекст; 	
		//ВыборкаСальдоПоРасчетамСБюджетом = Запрос.Выполнить().Выбрать();
		
		// Выборка стандартных вычетов 
		ПараметрыДляВычетов = Новый Структура();
		ПараметрыДляВычетов.Вставить("ГодНП", ГодНП);
		ПараметрыДляВычетов.Вставить("Организация", Организация);
		ПараметрыДляВычетов.Вставить("ГоловнаяОрганизация", ГоловнаяОрганизация);
		ПараметрыДляВычетов.Вставить("МассивКодовДоходовРаздела7", МассивКодовДоходовРаздела7);
		ПараметрыДляВычетов.Вставить("СписокВсехПодразделенийОрганизации", СписокВсехПодразделенийОрганизации);
		ПараметрыДляВычетов.Вставить("СведенияФормируютсяПоОрганизацииВЦелом", СведенияФормируютсяПоОрганизацииВЦелом);
		ПараметрыДляВычетов.Вставить("ДатаПодачиСведений", ДатаПодачиСведений);
		ПараметрыДляВычетов.Вставить("ВычетыПолучитьПоМесяцам", Ложь);
		
		// текст выборки списка физлиц
		ПараметрыДляВычетов.Вставить("СписокФизлицТекст", СписокФизлицТекст);
		ДополнительныеПараметрыЗапроса = Новый Структура; 
		ДополнительныеПараметрыЗапроса.Вставить("ДокументСсылка", СтруктураПараметров.ДокументСсылка);
		
		ПараметрыДляВычетов.Вставить("ДополнительныеПараметрыЗапроса", ДополнительныеПараметрыЗапроса);
		
		РезультатЗапросаСтандартныхВычетов = ПроцедурыУправленияПерсоналом.ПолучитьРезультатЗапросаСтандартныхВычетовНДФЛ(ПараметрыДляВычетов);
		ВыборкаСтандартныеВычетыЗаГод = РезультатЗапросаСтандартныхВычетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		
		
		//-----------------------------------------------------------------------------
		// ФОРМИРОВАНИЕ ФАЙЛА СВЕДЕНИЙ
		
		ТекстФайла = Новый ТекстовыйДокумент;
		ТекстФайлаДоп = Новый ТекстовыйДокумент;
		
		// Загружаем формат файла сведений
		
		ФорматФайлаСведений = ЗагрузитьФорматФайлаСведений(ПолучитьМакет("ФорматНДФЛ2003"));
		
		
		// Заполнение данных о налоговом агенте
		
		Если НЕ ВыборкаСведенийОбНА.Следующий() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось получения сведения о налоговом агенте!", Отказ);
			Возврат "";
		КонецЕсли; 
		
		// Идентификатор отправителя
		
		Если ВыборкаСведенийОбНА.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			
			// Для предпринимателя 12 символов ИНН + 9 звездочек
			Если НЕ РегламентированнаяОтчетность.ИННсоответствуетТребованиям(ВыборкаСведенийОбНА.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для физического лица-работодателя не верно введен УНП!", Отказ);
			КонецЕсли; 
			
			Фамилия 	= ВыборкаСведенийОбНА.Фамилия;
			Имя 		= ВыборкаСведенийОбНА.Имя;
			Отчество 	= ВыборкаСведенийОбНА.Отчество;
			
			Если ВыборкаСведенийОбНА.ФИО = Null Тогда
				ПроцедурыУправленияПерсоналом.ФамилияИнициалыФизЛица(ВыборкаСведенийОбНА.НаименованиеОрганизации,Фамилия,Имя,Отчество);
			КонецЕсли;
			
			НаименованиеОрганизации = Фамилия + "," + Имя + "," + Отчество;
			
			Если РегламентированнаяОтчетность.СтрокаНаписанаПоРусски(Фамилия + Имя + Отчество)=0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для физического лица-работодателя Фамилия, Имя, Отчество должно быть введены русскими буквами!", Отказ);
			КонецЕсли;
			Если (ПустаяСтрока(Фамилия)=1) или (ПустаяСтрока(Имя)=1) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для физического лица-работодателя должны быть указаны, как минимум, фамилия и имя!", Отказ);
			КонецЕсли;
			
			ИдентификаторОтправителя = "" + СокрЛП(ВыборкаСведенийОбНА.ИНН) + "*********";
			
		Иначе	
			
			// Для юрлица 10 символов ИНН + 2 звездочки + 9 символов КПП
			//Если НЕ ИННсоответствуетТребованиям(ВыборкаСведенийОбНА.ИНН, Перечисления.ЮрФизЛицо.ЮрЛицо ) Тогда
			//	ОшибкаПриПроведении("Для организации неверно введен ИНН!", Отказ);
			//КонецЕсли; 
			//
			//Если СтрДлина(ВыборкаСведенийОбНА.КПП)<>9 Тогда
			//	ОшибкаПриПроведении("Для организации не верно введен КПП!", Отказ);
			//КонецЕсли;
			
			Если СокрЛП(ВыборкаСведенийОбНА.НаименованиеОрганизации) = "" Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для организации должно быть указано сокращенное наименование организации!", Отказ);
			КонецЕсли;
			
			ИдентификаторОтправителя = "" + ВыборкаСведенийОбНА.ИНН;// + "**" + ВыборкаСведенийОбНА.КПП;
			НаименованиеОрганизации = ВыборкаСведенийОбНА.НаименованиеОрганизации;
			
		КонецЕсли; 
		
		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, ТекущаяДата(),);			
		Инфо = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата,);
		
		// Идентификатор файла
		ИдентификаторФайла = ИдентификаторОтправителя + Формат(ДатаПодачиСведений, "ДФ=ггггММддЧЧммсс");
		
		ДатаФормирования = ТекущаяДата();
		ДеньШапки       = ?(День(ДатаПодачиСведений)<10,"0","")+День(ДатаПодачиСведений);
		МесяцШапки       = ?(Месяц(ДатаПодачиСведений)<10,"0","")+Месяц(ДатаПодачиСведений);
		
		ДатаДляШапки     = ?(ОтчетныйКвартал = 1, "03", ?(ОтчетныйКвартал = 2, "06", ?(ОтчетныйКвартал = 3, "09", "12")));
		ДатаКонца = КонецКвартала(Дата(ГодНП,Число(ДатаДляШапки),1));
		
		НаборЗаписейНА = ФорматФайлаСведений.НаборыЗаписей.НА;
		НаборЗаписейНА.ИдФайл.Значение   	=  ИдентификаторФайла;
		НаборЗаписейНА.ТипИНФ.Значение   	=  "ДОХОД2003";
		НаборЗаписейНА.ИМНС.Значение 	 	=  ВыборкаСведенийОбНА.КодИМНС;
		НаборЗаписейНА.УНП.Значение		 	=  ВыборкаСведенийОбНА.ИНН;
		НаборЗаписейНА.НаимОтпр.Значение 	=  НаименованиеОрганизации;
		Если Инфо.ЮридическийАдрес = "" тогда
			Сообщить("Не указан юридический адрес организации");
			Возврат "";
		КонецЕсли;
		НаборЗаписейНА.АдресНА.Значение 	=  Инфо.ЮридическийАдрес;
		НаборЗаписейНА.СОАТО.Значение 		=  ВыборкаСведенийОбНА.КодПоОКАТО;
		НаборЗаписейНА.ГодНП.Значение 	 	=  ГодНП;
		НаборЗаписейНА.МесВып.Значение 	 	=  ДатаДляШапки;
		НаборЗаписейНА.ТелОтпр.Значение 	=  СтруктураПараметров.КонтактныйТелефонОтветственного;
		НаборЗаписейНА.ФиоОтпр.Значение 	=  СтруктураПараметров.Ответственный.Наименование;
		НаборЗаписейНА.КолДок.Значение 		=  0;// Количество справок пока не известно (откорректируем позднее)
		НаборЗаписейНА.КонтрСумма.Значение 	=  0;
		НаборЗаписейНА.СлужИнф.Значение 	=  "1С_ЗУПРБ 2.5";
		
		ЗаписатьНаборЗаписейВФайл(НаборЗаписейНА, ТекстФайлаДоп);
		
		//ТекстФайлаДоп.ДобавитьСтроку("@@@");
		ПустойНаборЗаписейСправка = ФорматФайлаСведений.НаборыЗаписей.СправкаОДоходах;
		
		Справка = ПустойНаборЗаписейСправка;
		
		// Цикл по физлицам
		ОбработаноФизЛиц = 0;
		ПроцентОбработанныхДанных = 0;
		ВсегоФизлиц =  РаботникиОрганизации.Количество();
		НомерСправки = СтруктураПараметров.НомерПервойСправки;
		
		итогСГДСумм = 0;
		
		//Пока ВыборкаФизЛиц.Следующий() Цикл
		Для каждого СтрокаТЧ из РаботникиОрганизации цикл
			
			ОбработаноФизЛиц = ОбработаноФизЛиц + 1;
			ДанныеФизЛица = ВыборкаФизЛиц.Найти(СтрокаТЧ.ФизЛицо,"ФизЛицо");
			
			НовыйПроцент = Окр(ОбработаноФизЛиц / ВсегоФизлиц * 100);
			Если ПроцентОбработанныхДанных < НовыйПроцент Тогда
				Состояние("Выводится Справка о доходах ("+НовыйПроцент+"%): "+СтрокаТЧ.ФизЛицо);
				ПроцентОбработанныхДанных = НовыйПроцент;
			КонецЕсли;
			
			// РАЗДЕЛ 2: Данные о физлице
			
			Справка.ИдДок.Значение 		= "" + ИдентификаторОтправителя + ГодНП + Прав("00000000" + Формат(НомерСправки, "ЧГ=0"), 8);
			Справка.ДатаДок.Значение 	= ДатаПодачиСведений;
			Справка.ИННФЛ.Значение 		= СокрЛП(СтрокаТЧ.УНП);
			//Если СокрЛП(СтрЗаменить(ВыборкаФизЛиц.СтраховойНомерПФР,"-","")) <> "" Тогда
			Справка.НомСтрСвид.Значение = СтрокаТЧ.ЛичныйНомер;
			Справка.КодМестаРаботы.Значение = СтрокаТЧ.КодМестаРаботы;
			//КонецЕсли; 
			Справка.СтатусФЛ.Значение 	= СтрокаТЧ.Статус; // 1 - резидент, 2 - нерезидент
			Резидент = (СтрокаТЧ.Статус =1);// признак резидента
			
			// ФИО физлица
			Если (не ПустаяСтрока(СтрокаТЧ.Фамилия)) и (СтрокаТЧ.Фамилия <> NULL) Тогда
				Справка.ФИО.Значение.Фамилия 	= СтрокаТЧ.Фамилия;
				Справка.ФИО.Значение.Имя 		= СтрокаТЧ.Имя;
				Справка.ФИО.Значение.Отчество 	= СтрокаТЧ.Отчество;
			Иначе
				ПроцедурыУправленияПерсоналом.ФамилияИнициалыФизЛица(СтрокаТЧ.ФизЛицо, Справка.ФИО.Значение.Фамилия,Справка.ФИО.Значение.Имя,Справка.ФИО.Значение.Отчество);
			КонецЕсли; 
			
			Справка.Гражд.Значение = СтрокаТЧ.КодСтраны;
			
			// Если не заполнен ИНН, то надо указать паспортные данные, дату рождения, адрес места жительства
			//Если СокрЛП(СтрокаТЧ.УНП) = "" Тогда
			
			Справка.УдЛичн.Значение.КодДокумента = СтрокаТЧ.КодДокумента;		
			Справка.УдЛичн.Значение.Серия = СтрокаТЧ.СерияДокумента;
			Справка.УдЛичн.Значение.Номер = СтрокаТЧ.НомерДокумента;
			Справка.УдЛичн.Значение.ДатаВыдачи = СтрокаТЧ.ДатаВыдачи;
			Справка.УдЛичн.Значение.НаименованиеОргана = СтрокаТЧ.НаименованиеОргана;
			
			//Справка.ДатаРожд.Значение = ВыборкаФизЛиц.ДатаРождения;
			
			//Адрес места жительства
			Справка.АдрМЖ.Значение.Страна = СтрокаТЧ.КодСтраны;
			Справка.АдрМЖ.Значение.АдресКодСтраны = СтрокаТЧ.АдресКодСтраны;
			Справка.АдрМЖ.Значение.Индекс = СтрокаТЧ.Индекс;
			Справка.АдрМЖ.Значение.КодМеста = СтрокаТЧ.КодМеста;
			Справка.АдрМЖ.Значение.Область = СтрокаТЧ.Область;
			Справка.АдрМЖ.Значение.Район = СтрокаТЧ.Район;
			Справка.АдрМЖ.Значение.Сельсовет = СтрокаТЧ.Сельсовет;
			Справка.АдрМЖ.Значение.ТипНаселенногоПункта = СтрокаТЧ.типНаселенногоПункта;
			Справка.АдрМЖ.Значение.НаселенныйПункт = СтрокаТЧ.НазваниеНаселенногоПункта;
			Справка.АдрМЖ.Значение.ТипУлицы = СтрокаТЧ.типУлицы;
			Справка.АдрМЖ.Значение.Улица = СтрокаТЧ.НазваниеУлицы;
			Справка.АдрМЖ.Значение.Дом = СтрокаТЧ.НомерДома;
			Справка.АдрМЖ.Значение.Корпус = СтрокаТЧ.Корпус;
			Справка.АдрМЖ.Значение.Квартира = СтрокаТЧ.НомерКвартиры;
			Справка.АдрМЖ.Значение.КодИМНС = СтрокаТЧ.КодИМНС;
			Если ДанныеФизЛица <> Неопределено Тогда
				
				Справка.АдрМЖ.Значение.ОбластьМЖ 		 = ДанныеФизЛица.АдресОбласть;
				Справка.АдрМЖ.Значение.РайонМЖ 			 = ДанныеФизЛица.АдресРайон;
				Справка.АдрМЖ.Значение.НаселенныйПунктМЖ = ДанныеФизЛица.АдресГород;
				Справка.АдрМЖ.Значение.ТипУлицыМЖ 		 = ДанныеФизЛица.АдрестипУлицы;
				Справка.АдрМЖ.Значение.УлицаМЖ 			 = ДанныеФизЛица.АдресУлица;
				Справка.АдрМЖ.Значение.ДомМЖ 			 = ДанныеФизЛица.АдресДом;
				Справка.АдрМЖ.Значение.КорпусМЖ 		 = ДанныеФизЛица.АдресКорпус;
				Справка.АдрМЖ.Значение.КвартираМЖ 		 = ДанныеФизЛица.АдресКвартира;
				
			КонецЕсли;
			//КонецЕсли; 
			
			СтруктураПоискаФизЛица = Новый Структура("ФизЛицо");
			СтруктураПоискаФизЛица.ФизЛицо = СтрокаТЧ.ФизЛицо;
			
			// ДОХОДЫ ПО ВИДАМ ДЛЯ ВСЕХ РАЗДЕЛОВ СПРАВКИ
			ВыборкаДоходовПоВидамЗаГод.Сбросить();
			Пока ВыборкаДоходовПоВидамЗаГод.НайтиСледующий(СтруктураПоискаФизЛица) Цикл
				
				// В третьем разделе:для резидентов отражаются только 13%-ые доходы, кроме имущественных (раздел 7), 
				//	а для нерезидентов отражаются все доходы
				Если ВыборкаДоходовПоВидамЗаГод.ВидСтрокиЗапроса = "ДоходыРаздела3" тогда //ИЛИ (НЕ Резидент) Тогда
					// Налоги по ставке 13% (30 %) Раздел 3.1
					НоваяСтрока = Справка.ДоходВид.Значение.Добавить();			
					НоваяСтрока.КодДохода 	= ВыборкаДоходовПоВидамЗаГод.КодДохода; 
					НоваяСтрока.СуммаДохода = ВыборкаДоходовПоВидамЗаГод.СуммаДохода; 
					Если ВыборкаДоходовПоВидамЗаГод.СуммаВычета <> 0 Тогда
						НоваяСтрока.КодВычета 	= ВыборкаДоходовПоВидамЗаГод.КодВычета; 
						НоваяСтрока.СуммаВычета = ВыборкаДоходовПоВидамЗаГод.СуммаВычета; 
					КонецЕсли;    	
					
				ИначеЕсли ВыборкаДоходовПоВидамЗаГод.ВидСтрокиЗапроса = "ДоходыРазделаАвторские" Тогда
					//раздел 3.1.1
					//Справка.ДоходыАвторские.Значение["Доход" + ВыборкаДоходовПоВидамЗаГод.КодДохода] = ВыборкаДоходовПоВидамЗаГод.СуммаДохода;
					//Справка.ДоходыАвторские.Значение["КодДохода" + ВыборкаДоходовПоВидамЗаГод.КодДохода] = ВыборкаДоходовПоВидамЗаГод.КодДохода;
					НоваяСтрока = Справка.ДоходыАвторские.Значение.Добавить();			
					НоваяСтрока.КодДохода 	= ВыборкаДоходовПоВидамЗаГод.КодДохода; 
					НоваяСтрока.МесДохода = Месяц(ВыборкаДоходовПоВидамЗаГод.Период); 
					НоваяСтрока.СуммаДохода = ВыборкаДоходовПоВидамЗаГод.СуммаДохода; 
					
					//	//МаксимНачало
					//ИначеЕсли ВыборкаДоходовПоВидамЗаГод.ВидСтрокиЗапроса = "ВычетыРазделаАвторские" Тогда
					//	 //раздел 4.5
					НоваяСтрока = Справка.ВычетыАвторские.Значение.Добавить();			
					НоваяСтрока.МесВычета = Месяц(ВыборкаДоходовПоВидамЗаГод.Период); 
					НоваяСтрока.СуммаВычета = ВыборкаДоходовПоВидамЗаГод.СуммаВычета; 
					//	//МаксимКонец
					
				ИначеЕсли ВыборкаДоходовПоВидамЗаГод.ВидСтрокиЗапроса = "ДоходыРазделаЛьготы" Тогда 
					//раздел 4.2
					НоваяСтрока = Справка.ДоходВидДр.Значение.Добавить();			
					НоваяСтрока.КодДохода 	= ВыборкаДоходовПоВидамЗаГод.КодДохода; 
					НоваяСтрока.МесДохода = Месяц(ВыборкаДоходовПоВидамЗаГод.Период); 
					НоваяСтрока.СуммаДохода = ВыборкаДоходовПоВидамЗаГод.СуммаДохода; 
					Если ВыборкаДоходовПоВидамЗаГод.СуммаВычета <> 0 Тогда
						НоваяСтрока.КодВычета 	= ВыборкаДоходовПоВидамЗаГод.КодВычета; 
						НоваяСтрока.СуммаВычета = ВыборкаДоходовПоВидамЗаГод.СуммаВычета; 
					КонецЕсли;    	
					
				ИначеЕсли ВыборкаДоходовПоВидамЗаГод.ВидСтрокиЗапроса = "ДоходыРазделаНеОбл" Тогда 
					//раздел 4.1
					НоваяСтрока = Справка.ДоходВидНеОбл.Значение.Добавить();			
					НоваяСтрока.КодДохода 	= ВыборкаДоходовПоВидамЗаГод.КодДохода; 
					НоваяСтрока.МесДохода = Месяц(ВыборкаДоходовПоВидамЗаГод.Период); 
					НоваяСтрока.СуммаДохода = ВыборкаДоходовПоВидамЗаГод.СуммаДохода; 
					
				ИначеЕсли ВыборкаДоходовПоВидамЗаГод.ВидСтрокиЗапроса = "НеДоход" Тогда 
					//раздел 6.1
					НоваяСтрока = Справка.ДоходВидПр.Значение.Добавить();			
					НоваяСтрока.КодДохода 	= ВыборкаДоходовПоВидамЗаГод.КодДохода; 
					НоваяСтрока.МесДохода = Месяц(ВыборкаДоходовПоВидамЗаГод.Период); 
					НоваяСтрока.Ставка	 = ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(ВыборкаДоходовПоВидамЗаГод.Ставка); 
					НоваяСтрока.СуммаДохода = ВыборкаДоходовПоВидамЗаГод.СуммаДохода; 
					НоваяСтрока.СуммаНалога = ВыборкаДоходовПоВидамЗаГод.СуммаНалога; 
					
				КонецЕсли;
			КонецЦикла; 
			
			
			//	Если Справка.СтатусФЛ.Значение = 1 Тогда// только для резидентов
			
			// РАЗДЕЛ 3.1: Доходы по месяцам 
			СГДСумма = 0;
			ВыборкаДоходыПоМесяцамПоСтавке13ДляРаздела3_2.Сбросить();
			Пока ВыборкаДоходыПоМесяцамПоСтавке13ДляРаздела3_2.НайтиСледующий(СтруктураПоискаФизЛица) Цикл
				Справка.ДоходМес.Значение["Доход" + Месяц(ВыборкаДоходыПоМесяцамПоСтавке13ДляРаздела3_2.Период)] = ВыборкаДоходыПоМесяцамПоСтавке13ДляРаздела3_2.ОблагаемыйДоход;	
				СГДСумма = СГДСумма + ВыборкаДоходыПоМесяцамПоСтавке13ДляРаздела3_2.ОблагаемыйДоход;	
			КонецЦикла;
			
			//разделы 4.1, 4.2 Имущественные и социальные вычеты
			
			ВыборкаИмущественныеВычеты.Сбросить();
			Пока ВыборкаИмущественныеВычеты.НайтиСледующий(СтруктураПоискаФизЛица) Цикл
				НоваяСтрока = Справка.ВычетыИмущ.Значение.Добавить();			
				НоваяСтрока.КодВычета = Число(ВыборкаИмущественныеВычеты.КодВычет.Код);	
				НоваяСтрока.МесяцВычета = Месяц(ВыборкаИмущественныеВычеты.Месяц);	
				НоваяСтрока.СуммаВычета = ВыборкаИмущественныеВычеты.СумВычет;	
			КонецЦикла;
			
			// 4.3: Стандартные вычеты 
			//ВыборкаСтандартныеВычетыЗаГод.Сбросить();
			//Пока ВыборкаСтандартныеВычетыЗаГод.НайтиСледующий(СтруктураПоискаФизЛица) Цикл
			//	Если ВыборкаСтандартныеВычетыЗаГод.СуммаВычета = 0 Тогда
			//		Продолжить;
			//	КонецЕсли; 
			//	Справка.Вычет.Значение["СуммаВычета" + СокрЛП(ВыборкаСтандартныеВычетыЗаГод.КодВычета)] = ВыборкаСтандартныеВычетыЗаГод.СуммаВычета;
			//КонецЦикла;
			ВыборкаНачУдНалогЗаГодПоСтавкам.Сбросить();
			СуммаЛичный = 0;
			СуммаДети   = 0;
			СуммаДетиЛьгота   = 0;
			СуммаДополн = 0;
			
			Пока ВыборкаНачУдНалогЗаГодПоСтавкам.НайтиСледующий(СтруктураПоискаФизЛица) Цикл
				Если ВыборкаНачУдНалогЗаГодПоСтавкам.ВычетЛичныйГод <> 0 тогда
					НоваяСтрока = Справка.Вычет.Значение.Добавить();
					НоваяСтрока.МесяцВычета = Месяц(ВыборкаНачУдНалогЗаГодПоСтавкам.Период);
					НоваяСтрока.СуммаВычета = ВыборкаНачУдНалогЗаГодПоСтавкам.ВычетЛичныйГод;
					НоваяСтрока.КодВычета = 600;
				КонецЕсли;
				Если ВыборкаНачУдНалогЗаГодПоСтавкам.ВычетНаДетейГод <> 0 тогда
					НоваяСтрока = Справка.Вычет.Значение.Добавить();
					НоваяСтрока.МесяцВычета = Месяц(ВыборкаНачУдНалогЗаГодПоСтавкам.Период);
					НоваяСтрока.СуммаВычета = ВыборкаНачУдНалогЗаГодПоСтавкам.ВычетНаДетейГод;
					НоваяСтрока.КодВычета = 610;
				КонецЕсли;
				Если ВыборкаНачУдНалогЗаГодПоСтавкам.ВычетНаДетейЛьгота <> 0 тогда
					НоваяСтрока = Справка.Вычет.Значение.Добавить();
					НоваяСтрока.МесяцВычета = Месяц(ВыборкаНачУдНалогЗаГодПоСтавкам.Период);
					НоваяСтрока.СуммаВычета = ВыборкаНачУдНалогЗаГодПоСтавкам.ВычетНаДетейЛьгота;
					НоваяСтрока.КодВычета = 611;
				КонецЕсли;
				Если ВыборкаНачУдНалогЗаГодПоСтавкам.ВычетДополнительныйГод <> 0 тогда
					НоваяСтрока = Справка.Вычет.Значение.Добавить();
					НоваяСтрока.МесяцВычета = Месяц(ВыборкаНачУдНалогЗаГодПоСтавкам.Период);
					НоваяСтрока.СуммаВычета = ВыборкаНачУдНалогЗаГодПоСтавкам.ВычетДополнительныйГод;
					НоваяСтрока.КодВычета = 620;
				КонецЕсли;
				//НоваяСтрока.СуммаВычета610ЗаМесяц = ВыборкаНачУдНалогЗаГодПоСтавкам.ВычетНаДетейГод;
				//НоваяСтрока.СуммаВычета611ЗаМесяц = ВыборкаНачУдНалогЗаГодПоСтавкам.ВычетНаДетейЛьгота;
				//НоваяСтрока.СуммаВычета620ЗаМесяц = ВыборкаНачУдНалогЗаГодПоСтавкам.ВычетДополнительныйГод;
				//НоваяСтрока.СуммаВычета600 = НоваяСтрока.СуммаВычета600 +  ВыборкаНачУдНалогЗаГодПоСтавкам.ВычетЛичныйГод;
				//НоваяСтрока.СуммаВычета610 = НоваяСтрока.СуммаВычета610 +  ВыборкаНачУдНалогЗаГодПоСтавкам.ВычетНаДетейГод;
				//НоваяСтрока.СуммаВычета611 = НоваяСтрока.СуммаВычета611 +  ВыборкаНачУдНалогЗаГодПоСтавкам.ВычетНаДетейЛьгота;
				//НоваяСтрока.СуммаВычета620 = НоваяСтрока.СуммаВычета620 +  ВыборкаНачУдНалогЗаГодПоСтавкам.ВычетДополнительныйГод;
				
				//СуммаЛичный = СуммаЛичный + ВыборкаНачУдНалогЗаГодПоСтавкам.ВычетЛичныйГод;
				//Суммадети =  Суммадети + ВыборкаНачУдНалогЗаГодПоСтавкам.ВычетНаДетейГод;
				//СуммадетиЛьгота = СуммадетиЛьгота + ВыборкаНачУдНалогЗаГодПоСтавкам.ВычетНаДетейЛьгота;
				//СуммаДополн = СуммаДополн + ВыборкаНачУдНалогЗаГодПоСтавкам.ВычетДополнительныйГод;
				
			КонецЦикла;
			
			//Если СуммаЛичный <> 0 тогда
			//	Справка.Вычет.Значение["СуммаВычета600"] = СуммаЛичный;
			//КонецЕсли;
			//
			//Если СуммаДети <> 0 тогда
			//	Справка.Вычет.Значение["СуммаВычета610"] = СуммаДети;
			//КонецЕсли;
			//
			//Если СуммаДетиЛьгота <> 0 тогда
			//	Справка.Вычет.Значение["СуммаВычета611"] = СуммаДетиЛьгота;
			//КонецЕсли;
			//
			//Если СуммаДополн <> 0 тогда
			//	Справка.Вычет.Значение["СуммаВычета620"] = СуммаДополн;
			//КонецЕсли;
			
			//	КонецЕсли; 
			
			// 3.4: Общая сумма дохода по ставке 13 (30) %
			Справка.СГДСумм.Значение = СГДСумма;//Справка.ДоходВид.Значение.Итог("СуммаДохода");
			// 3.5: Облагаемая сумма дохода по ставке 13 (30) %
			//		Справка.ОблСумм.Значение = Макс(Справка.СГДСумм.Значение - Справка.ДоходВид.Значение.Итог("СуммаВычета") - Справка.Вычет.Значение.Итог("СуммаВычета"),0);
			
			
			
			// 5.2: Общая сумма дохода по ставке 35 % 
			Справка.ДохСуммДр.Значение = Справка.ДоходВидДр.Значение.Итог("СуммаДохода");
			Справка.СуммПр.Значение = Справка.ДоходВидПр.Значение.Итог("СуммаДохода");
			// 5.3: Облагаемая сумма дохода по ставке 35 %
			Справка.ОблДохДр.Значение = Макс(Справка.ДохСуммДр.Значение - Справка.ДоходВидДр.Значение.Итог("СуммаВычета"),0);
			
			
			// РАЗДЕЛЫ 3.6; 3.7; 4.3; 4.4; 5.4; 5.5 - Сумма начисленных и удержанных налогов за год по ставкам
			НИОбщСумм = 0;
			НУОбщСумм = 0;
			ВозвращеноВТекущемГодуЗаПрошлыеГоды = 0;
			ПереданоНаВзысканиеВТекущемГодуЗаВсеГоды = 0;
			ПереданоНаВзысканиеВТекущемГодуЗаТекущий = 0;
			ОбщееСальдоПоНалогу = 0;
			
			
			ВыборкаНачУдНалогЗаГодПоСтавкам.Сбросить();
			Пока ВыборкаНачУдНалогЗаГодПоСтавкам.НайтиСледующий(СтруктураПоискаФизЛица) Цикл
				
				// Начисленный налог
				НачисленоПоСтавке = ВыборкаНачУдНалогЗаГодПоСтавкам.НачисленоЗаТекущийГод - ВыборкаНачУдНалогЗаГодПоСтавкам.ВозвращеноЗаТекущийГод;
				// Удержанный налог = удержано за год - возврат за год в этом же году
				УдержаноПоСтавке = ВыборкаНачУдНалогЗаГодПоСтавкам.УдержаноЗаТекущийГод - ВыборкаНачУдНалогЗаГодПоСтавкам.ВозвращеноЗаТекущийГод;
				
				НоваяСтрокаУд = Справка.УдержаноНалогаПоМесяцам.Значение.Добавить();
				НоваяСтрокаУд.МесНалога = Месяц(ВыборкаНачУдНалогЗаГодПоСтавкам.Период);
				НоваяСтрокаУд.СуммаНалога = НачисленоПоСтавке;
				
				ВидЗастрахованногоЛица = РегламентированнаяОтчетность.ПолучитьГражданствоВидЗастрахованногоЛица(ВыборкаНачУдНалогЗаГодПоСтавкам.ФизЛицо, ВыборкаНачУдНалогЗаГодПоСтавкам.Период);
				
				Если ВидЗастрахованногоЛица <> Неопределено Тогда
					НоваяСтрокаУд.ВидЗастрахованногоЛица = ?(ВидЗастрахованногоЛица = Перечисления.ВидыЗастрахованныхЛицОбязательногоСтрахования.ИностраныеГражданеСтранЕАЭС, 1,0);				
				Иначе
					НоваяСтрокаУд.ВидЗастрахованногоЛица = 0;
				КонецЕсли;
			
			
				// Разложим суммы налога по ставкам
				// Для нерезидента все налоги приравниваются к 13-%
				Если ВыборкаНачУдНалогЗаГодПоСтавкам.Ставка = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13 тогда //ИЛИ (Не Резидент) Тогда
					Справка.НИОблСумм.Значение = Справка.НИОблСумм.Значение + НачисленоПоСтавке;
					Справка.НУОблСумм.Значение = Справка.НУОблСумм.Значение + УдержаноПоСтавке;
				ИначеЕсли ВыборкаНачУдНалогЗаГодПоСтавкам.Ставка = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка9 Тогда
					НоваяСтрока = Справка.ДоходВидПр.Значение.Добавить();			
					НоваяСтрока.МесДохода = Месяц(ВыборкаНачУдНалогЗаГодПоСтавкам.Период); 
					НоваяСтрока.Ставка	 = ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(ВыборкаНачУдНалогЗаГодПоСтавкам.Ставка); 
					НоваяСтрока.СуммаНалога = НачисленоПоСтавке; 
				ИначеЕсли ВыборкаНачУдНалогЗаГодПоСтавкам.Ставка = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09 Тогда
					НоваяСтрока = Справка.ДоходВидПр.Значение.Добавить();			
					НоваяСтрока.МесДохода = Месяц(ВыборкаНачУдНалогЗаГодПоСтавкам.Период); 
					НоваяСтрока.Ставка	 = ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(ВыборкаНачУдНалогЗаГодПоСтавкам.Ставка); 
					НоваяСтрока.СуммаНалога = НачисленоПоСтавке; 
				ИначеЕсли ВыборкаНачУдНалогЗаГодПоСтавкам.Ставка = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35 Тогда
					НоваяСтрока = Справка.ДоходВидПр.Значение.Добавить();			
					НоваяСтрока.МесДохода = Месяц(ВыборкаНачУдНалогЗаГодПоСтавкам.Период); 
					НоваяСтрока.Ставка	 = ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(ВыборкаНачУдНалогЗаГодПоСтавкам.Ставка); 
					НоваяСтрока.СуммаНалога = НачисленоПоСтавке; 
				ИначеЕсли ВыборкаНачУдНалогЗаГодПоСтавкам.Ставка = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка40 Тогда
					НоваяСтрока = Справка.ДоходВидПр.Значение.Добавить();			
					НоваяСтрока.МесДохода = Месяц(ВыборкаНачУдНалогЗаГодПоСтавкам.Период); 
					НоваяСтрока.Ставка	 = ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(ВыборкаНачУдНалогЗаГодПоСтавкам.Ставка); 
					НоваяСтрока.СуммаНалога = НачисленоПоСтавке; 
				Иначе
					Продолжить;//других ставок быть не должно
				КонецЕсли;
				
				// Расчет общих сумм налога (без учета ставок)
				НИОбщСумм = НИОбщСумм + НачисленоПоСтавке;
				НУОбщСумм = НУОбщСумм + УдержаноПоСтавке;
				ВозвращеноВТекущемГодуЗаПрошлыеГоды = ВозвращеноВТекущемГодуЗаПрошлыеГоды + ВыборкаНачУдНалогЗаГодПоСтавкам.ВозвращеноВТекущемГодуЗаПрошлыеГоды;
				ПереданоНаВзысканиеВТекущемГодуЗаВсеГоды = ПереданоНаВзысканиеВТекущемГодуЗаВсеГоды + ВыборкаНачУдНалогЗаГодПоСтавкам.ПереданоНаВзысканиеВТекущемГодуЗаВсеГоды;
				ПереданоНаВзысканиеВТекущемГодуЗаТекущий = ПереданоНаВзысканиеВТекущемГодуЗаТекущий + ВыборкаНачУдНалогЗаГодПоСтавкам.ПереданоНаВзысканиеВТекущемГодуЗаТекущий;
				// сальдо по налогу с начала истории: Начисленный - Удержанный + Возвращенный - Переданный на взыскание
				ОбщееСальдоПоНалогу = ОбщееСальдоПоНалогу + ВыборкаНачУдНалогЗаГодПоСтавкам.НачисленоЗаВсеГоды  - ВыборкаНачУдНалогЗаГодПоСтавкам.УдержаноЗаВсеГоды + ВыборкаНачУдНалогЗаГодПоСтавкам.ВозвращеноЗаВсеГоды - ВыборкаНачУдНалогЗаГодПоСтавкам.ПереданоНаВзысканиеЗаВсеГоды;
			КонецЦикла;
			
			// Разделы 6.1 и 6.2: Обшая сумма налога исчисленная и удержанная
			Справка.НИОбщСумм.Значение = НИОбщСумм;		
			Справка.НУОбщСумм.Значение = НУОбщСумм;		
			
			//Раздел 6.3, 6.7: Сумма возврата налога по перерасчету с доходов прошлых лет и сумма переданная на взыскание в текущем году за все годы
			Справка.ВозврИМНС.Значение = ВозвращеноВТекущемГодуЗаПрошлыеГоды;
			Справка.ВзыскИМНС.Значение = ПереданоНаВзысканиеВТекущемГодуЗаВсеГоды;
			
			//Для случая сбора сведений по обособленному подразделению Разделы 6.5,6.6 и 6.4 
			//будем заполнять только в том случае, когда работник на конец года работает в данном подразделении (или уволился из организации в целом)
			//		Если ВыборкаФизЛиц.РаботникНаКонецГодаРаботаетВПодразделении ИЛИ СведенияФормируютсяПоОрганизацииВЦелом Тогда
			
			//Разделы 6.5 и 6.6: Долг за налогоплательщиком и налоговым агентом
			
			//ВыборкаСальдоПоРасчетамСБюджетом.Сбросить();
			//ОбщееСальдоПоНалогу = 0;
			//Если ВыборкаСальдоПоРасчетамСБюджетом.НайтиСледующий(СтруктураПоискаФизЛица) Тогда
			//	ОбщееСальдоПоНалогу = ВыборкаСальдоПоРасчетамСБюджетом.Сальдо;
			//КонецЕсли;		
			
			Если ОбщееСальдоПоНалогу > 0 Тогда
				Справка.ДолгНП.Значение =  ОбщееСальдоПоНалогу;
			Иначе	
				Справка.ДолгНА.Значение = - ОбщееСальдоПоНалогу;
			КонецЕсли; 
			
			// Раздел 6.4: Сумма зачтенная при уплате налога по перерасчету с доходов прошлых лет
			КУплатеЗаГод = НИОбщСумм - НУОбщСумм - ПереданоНаВзысканиеВТекущемГодуЗаТекущий; 
			Справка.ЗачСумм.Значение = Макс(КУплатеЗаГод - ОбщееСальдоПоНалогу,0); //!!!
			
			//		КонецЕсли; 
			
			ИтогСГДСумм = ИтогСГДСумм + Справка.СГДСумм.Значение + Справка.СуммПр.Значение;
			
			// Следует проверять и записывать справку только если есть какие-либо доходы
			Если (Справка.СГДСумм.Значение <> 0) ИЛИ (Справка.ДивСумм.Значение <> 0) 
				ИЛИ (Справка.ДохСуммДр.Значение <> 0) ИЛИ (Справка.СуммПр.Значение <> 0) Тогда
				
				//ПроверитьСправкуОДоходах(Справка, Отказ);
				//
				// Запись справки в файл
				ЗаписатьНаборЗаписейВФайл(Справка, ТекстФайлаДоп);
				
				// Подготовка к следующей итерации
				НомерСправки = НомерСправки + 1;
			КонецЕсли; 
			
			// Подготовка к следующей итерации
			ОчиститьДанныеНабораЗаписей(Справка);
		КонецЦикла; 
		
		КоличествоДокументов = НомерСправки - СтруктураПараметров.НомерПервойСправки;
		Если КоличествоДокументов = 0 тогда
			ОбщегоНазначения.СообщитьОбОшибке("По указанному списку физических лиц доходы за "+ ГодНП + " год не обнаружены!"  , Отказ);
			Возврат "";
		КонецЕсли;	
		
		// Откорректируем количество предоставленных документов - 8 строка файла
		ТекстФайлаДоп.ЗаменитьСтроку(12, "КолДок:" + КоличествоДокументов);
		ТекстФайлаДоп.ЗаменитьСтроку(13, "КонтрСумма:" + Формат(ИтогСГДСумм,"ЧГ=0"));
		
		// Запишем конец файла
		ТекстФайладоп.ДобавитьСтроку("===");
		// Возвращаем значение типа строка
		Возврат ТекстФайладоп.ПолучитьТекст();
		
	КонецФункции
	
	//Процедура вывода файла сведений на печать
	Процедура ПечатьФайла(РежимПечати = 0, МестоВызова = "") Экспорт
		
		ЕстьОшибки = Ложь;
		ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ЭтотОбъект,ЕстьОшибки);
		Если ЕстьОшибки тогда
			Возврат;
		КонецЕсли;	 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	АдресныеСокращения.Наименование,
		|	АдресныеСокращения.Код,
		|	АдресныеСокращения.Сокращение,
		|	АдресныеСокращения.Уровень
		|ИЗ
		|	Справочник.АдресныеСокращения КАК АдресныеСокращения";
		
		Результат = Запрос.Выполнить();
		АдресныеСокр = Результат.Выгрузить();
		
		ПоискСокращ = Новый Структура("Уровень,Сокращение");
		ПоискУл = Новый Структура("Код,Уровень");
		СпрИМНС = Справочники.КодыИМНС;
		// текст файла оформим как текстовый документ 
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТекстФайла);
		
		ТекстДляИМНС = Новый ТекстовыйДокумент;
		
		ТекущаяСтрокаФайла = 0;
		
		// Табличные документы и макеты
		Документ2НДФЛ = Новый ТабличныйДокумент;
		ДокументРеестр = Новый ТабличныйДокумент;
		Документ2НДФЛ.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОДоходахФизлиц_Форма2НДФЛ";
		ДокументРеестр.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОДоходахФизлиц_Реестр";
		Макет2НДФЛ = ?(НалоговыйПериод>2006,?(НалоговыйПериод=2007,ПолучитьМакет("Приложение72007"),ПолучитьМакет("Приложение72008")),ПолучитьМакет("Приложение7"));
		Макет2НДФЛ = ?(НалоговыйПериод>=2009,ПолучитьМакет("Приложение72009"),Макет2НДФЛ); 
		Макет2НДФЛ = ?(Дата>=Дата(2010,5,22),ПолучитьМакет("Приложение22052010"),Макет2НДФЛ);	
		МакетРеестр = ПолучитьМакет("Реестр");
		
		// Области справки о доходах
		ОбластьШапкаСправки = Макет2НДФЛ.ПолучитьОбласть("Шапка");
		ОбластьПодвалСправки = Макет2НДФЛ.ПолучитьОбласть("Подвал");
		ОбластьР3ДоходыПоМесяцам = Макет2НДФЛ.ПолучитьОбласть("Р3ДоходыПоМесяцам");
		ОбластьР3АвторскиеШ = Макет2НДФЛ.ПолучитьОбласть("Р3АвторскиеШапка");
		ОбластьР3АвторскиеП = Макет2НДФЛ.ПолучитьОбласть("Р3АвторскиеПодвал");
		
		ОбластьР3АвторскиеВычетыШ = Макет2НДФЛ.ПолучитьОбласть("РЗШапкаАвторскиеВычеты");	
		ОбластьСтрАвторскиеВычеты = Макет2НДФЛ.ПолучитьОбласть("РЗСтрокаАвторскиеВычеты");
		
		ОбластьР3ШапкаНеОбл = Макет2НДФЛ.ПолучитьОбласть("Р3ШапкаНеОбл");
		Если НалоговыйПериод>2006 тогда
			ОбластьР3ШапкаНеОбл1 = Макет2НДФЛ.ПолучитьОбласть("Р3ШапкаНеОбл1");
			ОбластьСтрНеОбл1	=  Макет2НДФЛ.ПолучитьОбласть("СтрокаНеОбл1");
		КонецЕсли;
		ОбластьР3ШапкаЛьготы = Макет2НДФЛ.ПолучитьОбласть("Р3ШапкаЛьготы");
		Если НалоговыйПериод>2008 тогда
			ОбластьР3ВычетыШапка = Макет2НДФЛ.ПолучитьОбласть("Р3ВычетыШапка");
			ОбластьР3ВычетыСтрока = Макет2НДФЛ.ПолучитьОбласть("Р3ВычетыСтрока");
		Иначе
			ОбластьР3Вычеты = Макет2НДФЛ.ПолучитьОбласть("Р3Вычеты");
		КонецЕсли;
		ОбластьР3Прочее = Макет2НДФЛ.ПолучитьОбласть("Р3Прочее");
		ОбластьР3Подвал = Макет2НДФЛ.ПолучитьОбласть("Р3Подвал");
		
		ОбластьСтрАвторские = Макет2НДФЛ.ПолучитьОбласть("СтрокаАвторские");
		
		
		ОбластьСтрНеОбл = Макет2НДФЛ.ПолучитьОбласть("СтрокаНеОбл");
		ОбластьСтрЛьготы = Макет2НДФЛ.ПолучитьОбласть("СтрокаЛьгот");
		Если Дата<=Дата(2010,5,22) тогда
			ОбластьСтрПрочие = Макет2НДФЛ.ПолучитьОбласть("СтрокаПрочие");
		КонецЕсли;
		Если Дата >= Дата(2010,5,22) Тогда
			ОбластьШапкаУдержано = Макет2НДФЛ.ПолучитьОбласть("ШапкаУдержано");
			ОбластьСтрокаУдержано = Макет2НДФЛ.ПолучитьОбласть("СтрокаУдержано");
			ОбластьШапкаУдержаноЕАС = Макет2НДФЛ.ПолучитьОбласть("ШапкаУдержаноЕАС");
			ОбластьСтрокаУдержаноЕАС = Макет2НДФЛ.ПолучитьОбласть("СтрокаУдержаноЕАС");
			
		КонецЕсли;
		
		// Области реестра
		ОбластьРеестрШапка  = МакетРеестр.ПолучитьОбласть("Шапка");
		ОбластьРеестрСтрока = МакетРеестр.ПолучитьОбласть("Строка");
		ОбластьРеестрПодвал = МакетРеестр.ПолучитьОбласть("Подвал");
		
		// Загружаем формат файла сведений
		ФорматФайлаСведений = ЗагрузитьФорматФайлаСведений(ПолучитьМакет("ФорматНДФЛ2003"));
		
		// Читаем сведения о налоговом агенте
		НаборЗаписейНА = ФорматФайлаСведений.НаборыЗаписей.НА;
		Если НЕ ПрочитатьНаборЗаписейИзФайла(НаборЗаписейНА, ТекстовыйДокумент, ТекущаяСтрокаФайла) Тогда
			Возврат;
		КонецЕсли;
		
		// Данные о налоговом агенте
		ИдФайла = НаборЗаписейНА.ИдФайл.Значение;
		ИНН_КПП_НА = НаборЗаписейНА.УНП.Значение;// + ?(КПП<>"",  "/" + КПП, "");
		ПервыйСимволДаты = СтрДлина(СокрЛП(НаборЗаписейНА.УНП.Значение))+1;
		ДатаСоставления = Дата(Сред(ИдФайла, ПервыйСимволДаты,4), Сред(ИдФайла, ПервыйСимволДаты+4,2), Сред(ИдФайла, ПервыйСимволДаты+6,2));
		ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, ДатаСоставления, Ответственный);
		ФИОГлавногоБухгалтера = ОтветственныеЛица.ГлавныйБухгалтер;
		Руководитель = ОтветственныеЛица.Руководитель;
		//ИНН = СтрЗаменить(Лев(НаборЗаписейНА.ИдФайл.Значение,12), "*","");
		//КПП = СтрЗаменить(Сред(НаборЗаписейНА.ИдФайл.Значение,13,9), "*","");
		ИМНС = Формат(НаборЗаписейНА.ИМНС.Значение,"ЧН=' '; ЧГ=");
		НалоговыйПериодГод = Формат(НалоговыйПериод,"ЧН=' '; ЧГ=");
		НомерРеестра = ПроцедурыПерсонифицированогоУчета.НомерПачкиДокумента(Номер);// № документа
		
		
		// Вывод подвала реестра
		Инфо = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Датасоставления,);
		ОбластьРеестрШапка.Параметры.Год 			= НалоговыйПериодГод;
		ОбластьРеестрШапка.Параметры.Квартал		= ОтчетныйКвартал;
		//ОбластьРеестрШапка.Параметры.ДатаСоставления = Формат(ДатаСоставления,"ДФ=dd.MM.yyyy");
		//ОбластьРеестрШапка.Параметры.ГлБух = ФИОГлавногоБухгалтера;
		ОбластьРеестрШапка.Параметры.КодИМНС = ИМНС;
		ОбластьРеестрШапка.Параметры.ОргНазв = НаборЗаписейНА.НаимОтпр.Значение;
		ОбластьРеестрШапка.Параметры.УНП 	= ИНН_КПП_НА;
		ОбластьРеестрШапка.Параметры.ОргНазв2 = НаборЗаписейНА.АдресНА.Значение;
		ОбластьРеестрШапка.Параметры.ОргНазв4 = НаборЗаписейНА.ТелОтпр.Значение;
		//ОбластьРеестрШапка.Параметры.КоличествоСправок 	= НаборЗаписейНА.КолДок.Значение;
		ДокументРеестр.Вывести(ОбластьРеестрШапка);
		
		СведенияОНА12 = НаборЗаписейНА.НаимОтпр.Значение + ", "+НаборЗаписейНА.АдресНА.Значение+", "+НаборЗаписейНА.ТелОтпр.Значение; 
		
		
		ТекстДляИМНС.ДобавитьСтроку("0.1:"+ИНН_КПП_НА);
		ТекстДляИМНС.ДобавитьСтроку("0.2:"+Формат(ИМНС, "ЧГ=0"));
		ТекстДляИМНС.ДобавитьСтроку("0.3:"+Формат(ДатаСоставления,"ДФ=dd.MM.yyyy"));
		ТекстДляИМНС.ДобавитьСтроку("0.4:"+Формат(НаборЗаписейНА.ГодНП.Значение, "ЧГ=0"));
		ТекстДляИМНС.ДобавитьСтроку("0.5:"+НаборЗаписейНА.ТелОтпр.Значение);
		ТекстДляИМНС.ДобавитьСтроку("0.6:"+Формат(НаборЗаписейНА.КолДок.Значение, "ЧГ=0"));
		ТекстДляИМНС.ДобавитьСтроку("0.7:"+Формат(НаборЗаписейНА.КонтрСумма.Значение, "ЧГ=0"));
		ТекстДляИМНС.ДобавитьСтроку("@@@");
		
		// Итоговые счетчики реестра
		ИтогоДоход = 0;
		ИтогоИсчНалог = 0;
		ИтогоУдНалог = 0;
		
		// Получим структуру набора записей, представляющих данные справки о доходах
		Справка =  ФорматФайлаСведений.НаборыЗаписей.СправкаОДоходах;
		
		// Последовательно читаем справки о доходах
		Для НомерДокумента = 1 По НаборЗаписейНА.КолДок.Значение Цикл
			
			Если НЕ ПрочитатьНаборЗаписейИзФайла(Справка, ТекстовыйДокумент, ТекущаяСтрокаФайла) Тогда
				Возврат;
			КонецЕсли;
			
			// Раздел 1 - Сведения о наловом агенте
			Попытка
				НомерСправки = Число(Сред(Справка.ИдДок.Значение,ПервыйСимволДаты+4,8));
			Исключение	
				НомерСправки = 0;
			КонецПопытки;	
			ОбластьШапкаСправки.Параметры.Год 			= НалоговыйПериодГод;
			//		ОбластьШапкаСправки.Параметры.НомерСправки 	= НомерСправки;
			//ОбластьШапкаСправки.Параметры.КодИМНС 			= ИМНС;
			ОбластьШапкаСправки.Параметры.ИНН_КПП_НА 	= ИНН_КПП_НА;
			ОбластьШапкаСправки.Параметры.ТелОтпр 		= НаборЗаписейНА.ТелОтпр.Значение;
			//		ОбластьШапкаСправки.Параметры.КодОкато 		= Формат(НаборЗаписейНА.ОКАТО.Значение,"ЧН=' '; ЧГ=");
			ОбластьШапкаСправки.Параметры.НазваниеОрганизации = НаборЗаписейНА.НаимОтпр.Значение;
			ОбластьШапкаСправки.Параметры.ЮрАдрес	 	= НаборЗаписейНА.АдресНА.Значение;
			
			// Раздел 2 - Сведения о налогоплательщике
			
			ФИО  = Справка.ФИО.Значение.Фамилия + " " + Справка.ФИО.Значение.Имя + " " + Справка.ФИО.Значение.Отчество;
			ОбластьШапкаСправки.Параметры.ИННФизЛица 	= Формат(Справка.ИННФЛ.Значение,"ЧН=' '; ЧГ=");
			ОбластьШапкаСправки.Параметры.ФИО 			= Справка.ФИО.Значение.Фамилия;
			ОбластьШапкаСправки.Параметры.Имя 			= Справка.ФИО.Значение.Имя;
			ОбластьШапкаСправки.Параметры.Отчество 		= Справка.ФИО.Значение.Отчество;
			ОбластьШапкаСправки.Параметры.ЛичныйНомер	= Справка.НомСтрСвид.Значение;
			ОбластьШапкаСправки.Параметры.КодДокумента	= Справка.УдЛичн.Значение.КодДокумента;
			ОбластьШапкаСправки.Параметры.ПаспортныеДанные	= Справка.УдЛичн.Значение.Серия;
			ОбластьШапкаСправки.Параметры.номерДокумента	= Справка.УдЛичн.Значение.номер;
			
			ДеньШапки        = ?(День(Справка.УдЛичн.Значение.датавыдачи)<10,"0","")+День(Справка.УдЛичн.Значение.датавыдачи);
			МесяцШапки       = ?(Месяц(Справка.УдЛичн.Значение.датавыдачи)<10,"0","")+Месяц(Справка.УдЛичн.Значение.датавыдачи);
			ГодШапки		 = Строка(Формат(Год(Справка.УдЛичн.Значение.датавыдачи), "ЧГ=0"));
			
			ОбластьШапкаСправки.Параметры.датаВыдачи	= ?(Дата(Справка.УдЛичн.Значение.датавыдачи)=Дата(1,1,1),"",СокрЛП(деньШапки)+"."+СокрЛП(МесяцШапки)+"."+СокрЛП(ГодШапки));//Формат(Справка.УдЛичн.Значение.датавыдачи,"ДФ=dd.MM.yyyy");
			//		ОбластьШапкаСправки.Параметры.ДатаРождения	= Формат(Справка.ДатаРожд.Значение,"ДФ=dd.MM.yyyy");
			//		ОбластьШапкаСправки.Параметры.Гражданство   = Справка.Гражд.Значение;
			ОбластьШапкаСправки.Параметры.Индекс 		= Справка.АдрМЖ.Значение.Индекс;
			
			КодИМНС = Справка.АдрМЖ.Значение.КодИМНС;
			ТекИМНС = СпрИМНС.НайтиПоКоду(КодИМНС);
			КодСОАТО = Справка.АдрМЖ.Значение.КодМеста;
			Если  ЗначениеЗаполнено(ТекИМНС) тогда
				Если ЗначениеЗаполнено(ТекИМНС.КодСОАТОрайона) тогда
					КодСОАТО = ТекИМНС.КодСОАТОрайона;
				КонецЕсли;
			КонецЕсли;
			ОбластьШапкаСправки.Параметры.Область 		= Справка.АдрМЖ.Значение.Область;
			ОбластьШапкаСправки.Параметры.Район 		= Справка.АдрМЖ.Значение.Район;
			ОбластьШапкаСправки.Параметры.Сельсовет 	= Справка.АдрМЖ.Значение.Сельсовет;
			ОбластьШапкаСправки.Параметры.Дом 			= Справка.АдрМЖ.Значение.Дом;
			ОбластьШапкаСправки.Параметры.Корпус 		= Справка.АдрМЖ.Значение.Корпус;
			ОбластьШапкаСправки.Параметры.Квартира 		= Справка.АдрМЖ.Значение.Квартира;
			
			
			
			Если НалоговыйПериод=2007 тогда
				ОбластьШапкаСправки.Параметры.НаселенныйПункт = Справка.АдрМЖ.Значение.НаселенныйПункт;
				ОбластьШапкаСправки.Параметры.Улица 		= Справка.АдрМЖ.Значение.Улица;
			Иначе
				ОбластьШапкаСправки.Параметры.НаселенныйПункт = Справка.АдрМЖ.Значение.НаселенныйПункт;
				ОбластьШапкаСправки.Параметры.Улица 		= Справка.АдрМЖ.Значение.Улица;
				ОбластьШапкаСправки.Параметры.СтатусФЛ		= Справка.СтатусФЛ .Значение;
				ОбластьШапкаСправки.Параметры.КодСтраны 	= Справка.АдрМЖ.Значение.Страна; 
				ОбластьШапкаСправки.Параметры.СОАТО 		= КодСОАТО;
				
				ПоискСокращ.Уровень = 4;
				ПоискСокращ.Сокращение = Лев(НРег(СокрЛП(Справка.АдрМЖ.Значение.типНаселенногоПункта))+"          ",10);
				
				МассивСокращ = АдресныеСокр.НайтиСтроки(ПоискСокращ);
				Если МассивСокращ.Количество()>0 тогда
					ТипНП = МассивСокращ[0].Наименование;
				Иначе
					ТипНП = Справка.АдрМЖ.Значение.типНаселенногоПункта;
				КонецЕсли;
				ОбластьШапкаСправки.Параметры.Город			 = ТипНП;
				Если ЗначениеЗаполнено(СокрЛП(Справка.АдрМЖ.Значение.ТипУлицы)) тогда
					ПоискУл.Код = Число(СокрЛП(Справка.АдрМЖ.Значение.ТипУлицы));
					ПоискУл.Уровень = 5;
					
					МассивСокращ = АдресныеСокр.НайтиСтроки(ПоискУл);
					Если МассивСокращ.Количество()>0 тогда
						ТипУл = МассивСокращ[0].Наименование;
					Иначе
						ТипУл = Справка.АдрМЖ.Значение.ТипУлицы;
					КонецЕсли;
				Иначе ТипУл = "";
				КонецЕсли;
				
				ОбластьШапкаСправки.Параметры.ТипУлицы 		= ТипУл;
				ОбластьШапкаСправки.Параметры.КодМестаРаботы = Справка.КодМестаРаботы.Значение;
			КонецЕсли;
			
			ОбластьШапкаСправки.Параметры.АдресКодСтраны    = Справка.АдрМЖ.Значение.АдресКодСтраны;
			ОбластьШапкаСправки.Параметры.ОбластьМЖ 		= Справка.АдрМЖ.Значение.ОбластьМЖ;
			ОбластьШапкаСправки.Параметры.РайонМЖ 		    = Справка.АдрМЖ.Значение.РайонМЖ;
			ОбластьШапкаСправки.Параметры.НаселенныйПунктМЖ = Справка.АдрМЖ.Значение.НаселенныйПунктМЖ;
			ОбластьШапкаСправки.Параметры.УлицаМЖ 	        = Справка.АдрМЖ.Значение.УлицаМЖ;
			ОбластьШапкаСправки.Параметры.ДомМЖ 			= Справка.АдрМЖ.Значение.ДомМЖ;
			ОбластьШапкаСправки.Параметры.КорпусМЖ 		    = Справка.АдрМЖ.Значение.КорпусМЖ;
			ОбластьШапкаСправки.Параметры.КвартираМЖ 		= Справка.АдрМЖ.Значение.КвартираМЖ;
			
			ТипУл = "";
			Если ЗначениеЗаполнено(СокрЛП(Справка.АдрМЖ.Значение.ТипУлицыМЖ)) тогда
				ПоискУл.Код = Число(СокрЛП(Справка.АдрМЖ.Значение.ТипУлицыМЖ));
				ПоискУл.Уровень = 5;
				
				МассивСокращ = АдресныеСокр.НайтиСтроки(ПоискУл);
				Если МассивСокращ.Количество()>0 тогда
					ТипУл = МассивСокращ[0].Наименование;
				Иначе
					ТипУл = Справка.АдрМЖ.Значение.ТипУлицыМЖ;
				КонецЕсли;
			КонецЕсли;
			ОбластьШапкаСправки.Параметры.ТипУлицыМЖ 	        = ТипУл;
			
			
			Документ2НДФЛ.Вывести(ОбластьШапкаСправки);
			
			ТекстДляИМНС.ДобавитьСтроку("1.0:"+Формат(НомерДокумента, "ЧГ=0"));
			//ТекстДляИМНС.ДобавитьСтроку("1.1:"+ИНН_КПП_НА);
			//ТекстДляИМНС.ДобавитьСтроку("1.2:"+СведенияОНА12);
			Если Справка.ИННФЛ.Значение <> 0 тогда
				ТекстДляИМНС.ДобавитьСтроку("2.1:"+СокрЛП(Формат(Справка.ИННФЛ.Значение, "ЧГ=0")));
			КонецЕсли;
			
			ИННФиз = Справка.ИННФЛ.Значение;
			
			ТекстДляИМНС.ДобавитьСтроку("2.2.1:"+СокрЛП(Справка.ФИО.Значение.Фамилия));
			ТекстДляИМНС.ДобавитьСтроку("2.2.2:"+СокрЛП(Справка.ФИО.Значение.Имя));
			
			Если не ПустаяСтрока(Справка.ФИО.Значение.Отчество) тогда
				ТекстДляИМНС.ДобавитьСтроку("2.2.3:"+СокрЛП(Справка.ФИО.Значение.отчество));
			КонецЕсли;
			
			ТекстДляИМНС.ДобавитьСтроку("2.3:"+СокрЛП(Справка.УдЛичн.Значение.КодДокумента));
			Если Не (СокрЛП(Справка.УдЛичн.Значение.КодДокумента) = "01") тогда
				ТекстДляИМНС.ДобавитьСтроку("2.4.1:"+СокрЛП(Формат(Справка.УдЛичн.Значение.Серия, "ЧГ=0")));
			КонецЕсли;
			
			ТекстДляИМНС.ДобавитьСтроку("2.4.2:"+СокрЛП(Справка.УдЛичн.Значение.Номер));
			
			//ДеньШапки        = ?(День(Справка.УдЛичн.Значение.датавыдачи)<10,"0","")+День(Справка.УдЛичн.Значение.датавыдачи);
			//МесяцШапки       = ?(Месяц(Справка.УдЛичн.Значение.датавыдачи)<10,"0","")+Месяц(Справка.УдЛичн.Значение.датавыдачи);
			//ГодШапки		 = Строка(Формат(Год(Справка.УдЛичн.Значение.датавыдачи), "ЧГ=0"));
			
			ТекстДляИМНС.ДобавитьСтроку("2.4.3:"+СокрЛП(деньШапки)+"."+СокрЛП(МесяцШапки)+"."+СокрЛП(ГодШапки));
			ТекстДляИМНС.ДобавитьСтроку("2.5:"+СокрЛП(Справка.НомСтрСвид.Значение));
			//ТекстФайла.ДобавитьСтроку("2.5.1:"+СокрЛП(СтрокаТЧ.НаименованиеОргана));
			Если ЗначениеЗаполнено(КодСОАТО) тогда
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.Страна) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.1:"+СокрЛП(Справка.АдрМЖ.Значение.Страна));
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.Индекс) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.2:"+СокрЛП(Справка.АдрМЖ.Значение.Индекс));
				КонецЕсли;
				Если не  ПустаяСтрока(КодСОАТО) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.3:"+(Формат(Число(КодСОАТО),"ЧГ=0")));
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.Область) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.4:"+СокрЛП(Справка.АдрМЖ.Значение.Область));
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.Район) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.5:"+СокрЛП(Справка.АдрМЖ.Значение.Район));
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.Сельсовет) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.6:"+СокрЛП(Справка.АдрМЖ.Значение.Сельсовет));
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.ТипНаселенногоПункта) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.7:"+СокрЛП(Справка.АдрМЖ.Значение.ТипНаселенногоПункта));
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.НаселенныйПункт) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.8:"+СокрЛП(Справка.АдрМЖ.Значение.НаселенныйПункт));
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.типУлицы) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.9:"+СокрЛП(Справка.АдрМЖ.Значение.типУлицы));
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.Улица) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.10:"+СокрЛП(Справка.АдрМЖ.Значение.Улица));
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.Дом) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.11:"+СокрЛП(Справка.АдрМЖ.Значение.Дом));
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.Корпус) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.12:"+СокрЛП(Справка.АдрМЖ.Значение.Корпус));
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.Квартира) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.13:"+СокрЛП(Справка.АдрМЖ.Значение.Квартира));
				КонецЕсли;
			Иначе
				СтрокаСообщения = "";
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.Страна) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.1:"+СокрЛП(Справка.АдрМЖ.Значение.Страна));
					СтрокаСообщения = СтрокаСообщения + " код страны";
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.Индекс) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.2:"+СокрЛП(Справка.АдрМЖ.Значение.Индекс));
					СтрокаСообщения = СтрокаСообщения + " код страны";
				КонецЕсли;
				Если не  ПустаяСтрока(КодСОАТО) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.3:"+(Формат(Число(КодСОАТО),"ЧГ=0")));
					СтрокаСообщения = СтрокаСообщения + ", код СОАТО";
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.Область) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.4:"+СокрЛП(Справка.АдрМЖ.Значение.Область));
					СтрокаСообщения = СтрокаСообщения + ", область";
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.Район) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.5:"+СокрЛП(Справка.АдрМЖ.Значение.Район));
					СтрокаСообщения = СтрокаСообщения + ", район";
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.Сельсовет) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.6:"+СокрЛП(Справка.АдрМЖ.Значение.Сельсовет));
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.ТипНаселенногоПункта) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.7:"+СокрЛП(Справка.АдрМЖ.Значение.ТипНаселенногоПункта));
					СтрокаСообщения = СтрокаСообщения + ", тип нас. пункта";
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.НаселенныйПункт) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.8:"+СокрЛП(Справка.АдрМЖ.Значение.НаселенныйПункт));
					СтрокаСообщения = СтрокаСообщения + ", название нас. пункта";
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.типУлицы) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.9:"+СокрЛП(Справка.АдрМЖ.Значение.типУлицы));
					СтрокаСообщения = СтрокаСообщения + ", тип улицы";
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.Улица) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.10:"+СокрЛП(Справка.АдрМЖ.Значение.Улица));
					СтрокаСообщения = СтрокаСообщения + ", название улицы";
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.Дом) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.11:"+СокрЛП(Справка.АдрМЖ.Значение.Дом));
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.Корпус) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.12:"+СокрЛП(Справка.АдрМЖ.Значение.Корпус));
				КонецЕсли;
				Если не  ПустаяСтрока(Справка.АдрМЖ.Значение.Квартира) тогда
					ТекстДляИМНС.ДобавитьСтроку("2.6.13:"+СокрЛП(Справка.АдрМЖ.Значение.Квартира));
				КонецЕсли;
				
				Если СтрокаСообщения <> "" тогда
					Сообщить("Для "+ФИО+" не заполнены "+СтрокаСообщения);
				КонецЕсли;
			КонецЕсли;
			
			
			ТекстДляИМНС.ДобавитьСтроку("2.7:"+СокрЛП(Справка.СтатусФЛ.Значение));
			
			ТекстДляИМНС.ДобавитьСтроку("2.8:"+СокрЛП(Справка.КодМестаРаботы.Значение));
			Если СокрЛП(Справка.СтатусФЛ.Значение) = "F" Тогда
				ТекстДляИМНС.ДобавитьСтроку("2.9.1:"+СокрЛП(Справка.Гражд.Значение));
			КонецЕсли;
			
			
			// Доходы по месяцам
			СовокупныйДоход = 0;
			Для М =1 По 12 Цикл
				ОбластьР3ДоходыПоМесяцам.Параметры["зн" + М] = СокрЛП(Строка(Формат((Справка.ДоходМес.Значение["Доход" + М]), "ЧГ=0,ЧРГ=' '")));
				МесяцДохода = ?(М<10,"0","")+СокрЛП(Строка(М));
				Если  Справка.ДоходМес.Значение["Доход" + М] <> 0 тогда
					ТекстДляИМНС.ДобавитьСтроку("3.1:"+МесяцДохода+";"+СокрЛП(Строка(Формат(Справка.ДоходМес.Значение["Доход" + М], "ЧГ=0"))));	
				КонецЕсли;
				СовокупныйДоход = Совокупныйдоход + Справка.ДоходМес.Значение["Доход" + М]; 
			КонецЦикла; 
			Документ2НДФЛ.Вывести(ОбластьР3ДоходыПоМесяцам);
			
			
			ОбщаяСуммаЛьгот = 0;
			ОбщаяСуммаВычетов = 0;
			Строка41 = Ложь;
			Строка42 = Ложь;
			
			
			Если НалоговыйПериод>=2009 тогда
				
				// Авторские
				Документ2НДФЛ.Вывести(ОбластьР3АвторскиеШ);
				ИндексВСтроке = 1;
				Индекс = 1;
				Пока Индекс<4 цикл
					ОбластьСтрАвторские.Параметры["Месяц"+Строка(Индекс)] = "";
					ОбластьСтрАвторские.Параметры["Код"+Строка(Индекс)] = "";
					ОбластьСтрАвторские.Параметры["Сумма"+Строка(Индекс)] = "";
					Индекс = Индекс +1;
				КонецЦикла;
				
				Для каждого СтрокаАвторские из Справка.ДоходыАвторские.Значение цикл
					Если ИндексВСтроке = 4 тогда
						Документ2НДФЛ.Вывести(ОбластьСтрАвторские);
						Индекс = 1;
						Пока Индекс<4 цикл
							ОбластьСтрАвторские.Параметры["Месяц"+Строка(Индекс)] = "";
							ОбластьСтрАвторские.Параметры["Код"+Строка(Индекс)] = "";
							ОбластьСтрАвторские.Параметры["Сумма"+Строка(Индекс)] = "";
							
							Индекс = Индекс +1;
						КонецЦикла;
						
						ИндексВСтроке=1;
					КонецЕсли;
					
					
					МесяцДохода = ?(СтрДлина(СокрЛП(СтрокаАвторские.МесДохода))=2,"","0")+СокрЛП(СтрокаАвторские.МесДохода);
					ТекстДляИМНС.ДобавитьСтроку("3.1.1:"+СокрЛП(Строка(СтрокаАвторские.КодДохода))+";"+МесяцДохода+";"+СокрЛП(Строка(Формат(СтрокаАвторские.СуммаДохода,"ЧГ=0"))));
					
					ОбластьСтрАвторские.Параметры["Код"+Строка(ИндексВСтроке)] = СтрокаАвторские.КодДохода;
					ОбластьСтрАвторские.Параметры["Месяц"+Строка(ИндексВСтроке)] = МесяцДохода;
					ОбластьСтрАвторские.Параметры["Сумма"+Строка(ИндексВСтроке)] = СтрокаАвторские.СуммаДохода;
					
					ИндексВСтроке = ИндексВСтроке + 1;
					
				Конеццикла; 
				
				Документ2НДФЛ.Вывести(ОбластьСтрАвторские);
				Документ2НДФЛ.Вывести(ОбластьР3авторскиеП);
				
				ТекстДляИМНС.ДобавитьСтроку("5.1:"+СокрЛП(Строка(Формат(СовокупныйДоход,"ЧГ=0"))));
				
				ОбластьР3ШапкаЛьготы.Параметры.СГДСумм = Справка.СГДСумм.Значение;

				Документ2НДФЛ.Вывести(ОбластьР3ШапкаЛьготы);
				ИндексВСтроке = 1;
				Индекс = 1;
				Пока Индекс<4 цикл
					ОбластьСтрЛьготы.Параметры["Месяц"+Строка(Индекс)] = "";
					ОбластьСтрЛьготы.Параметры["Код"+Строка(Индекс)] = "";
					ОбластьСтрЛьготы.Параметры["Сумма"+Строка(Индекс)] = "";
					ОбластьСтрЛьготы.Параметры["Льгота"+Строка(Индекс)] = "";
					
					Индекс = Индекс +1;
				КонецЦикла;
				Для каждого строкаЛьгот из Справка.ДоходВидДр.Значение цикл
					Если ИндексВСтроке = 4 тогда
						Документ2НДФЛ.Вывести(ОбластьСтрЛьготы);
						Индекс = 1;
						Пока Индекс<4 цикл
							ОбластьСтрЛьготы.Параметры["Месяц"+Строка(Индекс)] = "";
							ОбластьСтрЛьготы.Параметры["Код"+Строка(Индекс)] = "";
							ОбластьСтрЛьготы.Параметры["Сумма"+Строка(Индекс)] = "";
							ОбластьСтрЛьготы.Параметры["Льгота"+Строка(Индекс)] = "";
							
							Индекс = Индекс +1;
						КонецЦикла;
						
						ИндексВСтроке=1;
					КонецЕсли;
					
					Строка42 = Истина;
					
					МесяцДохода = ?(СтрДлина(СокрЛП(СтрокаЛьгот.МесДохода))=2,"","0")+СокрЛП(СтрокаЛьгот.МесДохода);
					ТекстДляИМНС.ДобавитьСтроку("4.3:"+СокрЛП(Строка(СтрокаЛьгот.КодДохода))+";"+МесяцДохода+";"+СокрЛП(Строка(Формат(СтрокаЛьгот.СуммаДохода,"ЧГ=0")))+";"+СокрЛП(Строка(Формат(СтрокаЛьгот.СуммаВычета,"ЧГ=0"))));
					
					ОбластьСтрЛьготы.Параметры["Код"+Строка(ИндексВСтроке)] = СтрокаЛьгот.КодДохода;
					ОбластьСтрЛьготы.Параметры["Месяц"+Строка(ИндексВСтроке)] = ?(СтрДлина(СокрЛП(СтрокаЛьгот.МесДохода))=2,"","0")+СокрЛП(СтрокаЛьгот.МесДохода);
					ОбластьСтрЛьготы.Параметры["Сумма"+Строка(ИндексВСтроке)] = СтрокаЛьгот.СуммаДохода;
					ОбластьСтрЛьготы.Параметры["Льгота"+Строка(ИндексВСтроке)] = СтрокаЛьгот.СуммаВычета;
					
					ОбщаяСуммаЛьгот = ОбщаяСуммаЛьгот + СтрокаЛьгот.СуммаВычета;
					
					ИндексВСтроке = ИндексВСтроке + 1;
					
				Конеццикла;
				
				Документ2НДФЛ.Вывести(ОбластьСтрЛьготы);
				
				Строка43 = Ложь;
				
				Документ2НДФЛ.Вывести(ОбластьР3ВычетыШапка);
				//// Стандартные вычеты
				ИндексВСтроке = 1;
				Для Каждого СтрокаВычеты из Справка.Вычет.Значение Цикл
					Строка43 = Истина;	
					Если ИндексВСтроке = 5 тогда
						Документ2НДФЛ.Вывести(ОбластьР3ВычетыСтрока);
						Индекс = 1;
						Пока Индекс<5 цикл
							ОбластьР3ВычетыСтрока.Параметры["Месяц"+Строка(Индекс)] = "";
							ОбластьР3ВычетыСтрока.Параметры["Код"+Строка(Индекс)] = "";
							ОбластьР3ВычетыСтрока.Параметры["Вычет"+Строка(Индекс)] = "";
							Индекс = Индекс +1;
						КонецЦикла;
						
						ИндексВСтроке=1;
					КонецЕсли;
					МесяцВычета= ?(СтрДлина(СокрЛП(СтрокаВычеты.МесяцВычета))=2,"","0")+СокрЛП(СтрокаВычеты.МесяцВычета);
					
					ТекстДляИМНС.ДобавитьСтроку("4.4:"+СокрЛП(Строка(СтрокаВычеты.КодВычета))+";"+МесяцВычета+";"+СокрЛП(Строка(Формат(СтрокаВычеты.СуммаВычета,"ЧГ=0"))));
					ОбластьР3ВычетыСтрока.Параметры["Код"+Строка(ИндексВСтроке)] = СтрокаВычеты.КодВычета;
					ОбластьР3ВычетыСтрока.Параметры["Месяц"+Строка(ИндексВСтроке)] = МесяцВычета;
					ОбластьР3ВычетыСтрока.Параметры["Вычет"+Строка(ИндексВСтроке)] = СтрокаВычеты.СуммаВычета;
					
					ОбщаяСуммаВычетов =  ОбщаяСуммаВычетов + СтрокаВычеты.СуммаВычета;
					ИндексВСтроке = ИндексВСтроке + 1
				КонецЦикла;
				
				Документ2НДФЛ.Вывести(ОбластьР3ВычетыСтрока);	
				
				Индекс = 1;
				Пока Индекс<5 цикл
					ОбластьР3ВычетыСтрока.Параметры["Месяц"+Строка(Индекс)] = "";
					ОбластьР3ВычетыСтрока.Параметры["Код"+Строка(Индекс)] = "";
					ОбластьР3ВычетыСтрока.Параметры["Вычет"+Строка(Индекс)] = "";
					Индекс = Индекс +1;
				КонецЦикла;
				
				Документ2НДФЛ.Вывести(ОбластьР3ШапкаНеОбл1);
				
				ИндексВСтроке = 1;
				Для каждого строкаЛьгот из Справка.вычетыИмущ.Значение цикл
					Если СтрокаЛьгот.КодВычета = 640 ИЛИ  СтрокаЛьгот.КодВычета = 630 тогда
						Если ИндексВСтроке = 5 тогда
							Документ2НДФЛ.Вывести(ОбластьСтрНеОбл1);
							Индекс = 1;
							Пока Индекс<5 цикл
								ОбластьСтрНеОбл1.Параметры["Месяц"+Строка(Индекс)] = "";
								ОбластьСтрНеОбл1.Параметры["Код"+Строка(Индекс)] = "";
								ОбластьСтрНеОбл1.Параметры["Сумма"+Строка(Индекс)] = "";
								Индекс = Индекс +1;
							КонецЦикла;
							
							ИндексВСтроке=1;
							
						КонецЕсли;
						
						Строка41 = Истина;
						
						МесяцДохода = ?(СтрДлина(СокрЛП(СтрокаЛьгот.МесяцВычета))=2,"","0")+СокрЛП(СтрокаЛьгот.МесяцВычета);
						ТекстДляИМНС.ДобавитьСтроку("4.3:"+СокрЛП(Строка(СтрокаЛьгот.КодВычета))+";"+МесяцДохода+";"+СокрЛП(Строка(Формат(СтрокаЛьгот.СуммаВычета,"ЧГ=0"))));
						
						//ОбластьСтрНеОбл1.Параметры["Код"+Строка(ИндексВСтроке)] = СтрокаЛьгот.КодДохода;
						ОбластьСтрНеОбл1.Параметры["Месяц"+Строка(ИндексВСтроке)] = ?(СтрДлина(СокрЛП(СтрокаЛьгот.МесяцВычета))=2,"","0")+СокрЛП(СтрокаЛьгот.МесяцВычета);
						ОбластьСтрНеОбл1.Параметры["Код"+Строка(ИндексВСтроке)] = СокрЛП(СтрокаЛьгот.КодВычета);
						ОбластьСтрНеОбл1.Параметры["Сумма"+Строка(ИндексВСтроке)] = СтрокаЛьгот.СуммаВычета;
						
						ОбщаяСуммаВычетов = ОбщаяСуммаВычетов + СтрокаЛьгот.СуммаВычета;
						
						ИндексВСтроке = ИндексВСтроке + 1;
					КонецЕсли;	
				Конеццикла;
				
				Документ2НДФЛ.Вывести(ОбластьСтрНеОбл1);
				Индекс = 1;
				Пока Индекс<5 цикл
					ОбластьСтрНеОбл1.Параметры["Месяц"+Строка(Индекс)] = "";
					ОбластьСтрНеОбл1.Параметры["Код"+Строка(Индекс)] = "";
					ОбластьСтрНеОбл1.Параметры["Сумма"+Строка(Индекс)] = "";
					Индекс = Индекс +1;
				КонецЦикла;
				
				Документ2НДФЛ.Вывести(ОбластьР3ШапкаНеОбл);
				
				ИндексВСтроке = 1;
				Для каждого строкаЛьгот из Справка.вычетыИмущ.Значение цикл
					Если СтрокаЛьгот.КодВычета = 650 тогда
						Если ИндексВСтроке = 5 тогда
							Документ2НДФЛ.Вывести(ОбластьСтрНеОбл);
							Индекс = 1;
							Пока Индекс<5 цикл
								ОбластьСтрНеОбл.Параметры["Месяц"+Строка(Индекс)] = "";
								ОбластьСтрНеОбл.Параметры["Код"+Строка(Индекс)] = "";
								ОбластьСтрНеОбл.Параметры["Сумма"+Строка(Индекс)] = "";
								Индекс = Индекс +1;
							КонецЦикла;
							
							ИндексВСтроке=1;
						КонецЕсли;
						
						Строка41 = Истина;
						
						МесяцДохода = ?(СтрДлина(СокрЛП(СтрокаЛьгот.МесяцВычета))=2,"","0")+СокрЛП(СтрокаЛьгот.МесяцВычета);
						ТекстДляИМНС.ДобавитьСтроку("4.2:"+СокрЛП(Строка(СтрокаЛьгот.КодВычета))+";"+МесяцДохода+";"+СокрЛП(Строка(Формат(СтрокаЛьгот.СуммаВычета,"ЧГ=0"))));
						
						
						ОбластьСтрНеОбл.Параметры["Код"+Строка(ИндексВСтроке)] = СтрокаЛьгот.КодВычета;
						ОбластьСтрНеОбл.Параметры["Месяц"+Строка(ИндексВСтроке)] = ?(СтрДлина(СокрЛП(СтрокаЛьгот.МесяцВычета))=2,"","0")+СокрЛП(СтрокаЛьгот.МесяцВычета);
						ОбластьСтрНеОбл.Параметры["Сумма"+Строка(ИндексВСтроке)] = СтрокаЛьгот.СуммаВычета;
						
						ОбщаяСуммаВычетов = ОбщаяСуммаВычетов + СтрокаЛьгот.СуммаВычета;
						
						ИндексВСтроке = ИндексВСтроке + 1;
					КонецЕсли;	
				Конеццикла;
				
				Документ2НДФЛ.Вывести(ОбластьСтрНеОбл);
				Индекс = 1;
				Пока Индекс<5 цикл
					ОбластьСтрНеОбл1.Параметры["Месяц"+Строка(Индекс)] = "";
					ОбластьСтрНеОбл1.Параметры["Код"+Строка(Индекс)] = "";
					ОбластьСтрНеОбл1.Параметры["Сумма"+Строка(Индекс)] = "";
					Индекс = Индекс +1;
				КонецЦикла;
				
			Иначе
				Если НалоговыйПериод>2006 тогда
					
					Документ2НДФЛ.Вывести(ОбластьР3ШапкаНеОбл1);
					
					ИндексВСтроке = 1;
					Для каждого строкаЛьгот из Справка.вычетыИмущ.Значение цикл
						Если СтрокаЛьгот.КодВычета = 640 ИЛИ СтрокаЛьгот.КодВычета = 630 тогда
							Если ИндексВСтроке = 5 тогда
								Документ2НДФЛ.Вывести(ОбластьСтрНеОбл1);
								Индекс = 1;
								Пока Индекс<5 цикл
									ОбластьСтрНеОбл1.Параметры["Месяц"+Строка(Индекс)] = "";
									ОбластьСтрНеОбл1.Параметры["Код"+Строка(Индекс)] = "";
									ОбластьСтрНеОбл1.Параметры["Сумма"+Строка(Индекс)] = "";
									Индекс = Индекс +1;
								КонецЦикла;
								
								ИндексВСтроке=1;
							КонецЕсли;
							
							Строка41 = Истина;
							
							//МесяцДохода = ?(СтрДлина(СокрЛП(СтрокаЛьгот.МесяцДохода))=2,"","0")+СокрЛП(СтрокаЛьгот.МесяцДохода);
							//ТекстДляИМНС.ДобавитьСтроку("4.1:"+СокрЛП(Строка(СтрокаЛьгот.КодДохода))+";"+МесяцДохода+";"+СокрЛП(Строка(Формат(СтрокаЛьгот.СуммаДохода,"ЧГ=0"))));
							
							//ОбластьСтрНеОбл1.Параметры["Код"+Строка(ИндексВСтроке)] = СтрокаЛьгот.КодДохода;
							ОбластьСтрНеОбл1.Параметры["Месяц"+Строка(ИндексВСтроке)] = ?(СтрДлина(СокрЛП(СтрокаЛьгот.МесяцВычета))=2,"","0")+СокрЛП(СтрокаЛьгот.МесяцВычета);
							ОбластьСтрНеОбл1.Параметры["Код"+Строка(ИндексВСтроке)] = СокрЛП(СтрокаЛьгот.КодВычета);
							ОбластьСтрНеОбл1.Параметры["Сумма"+Строка(ИндексВСтроке)] = СтрокаЛьгот.СуммаВычета;
							
							ОбщаяСуммаВычетов = ОбщаяСуммаВычетов + СтрокаЛьгот.СуммаВычета;
							
							ИндексВСтроке = ИндексВСтроке + 1;
						КонецЕсли;	
					Конеццикла;
					
					Документ2НДФЛ.Вывести(ОбластьСтрНеОбл1);
					
					Документ2НДФЛ.Вывести(ОбластьР3ШапкаНеОбл);
					
					ИндексВСтроке = 1;
					Для каждого строкаЛьгот из Справка.вычетыИмущ.Значение цикл
						Если СтрокаЛьгот.КодВычета = 650 тогда
							Если ИндексВСтроке = 5 тогда
								Документ2НДФЛ.Вывести(ОбластьСтрНеОбл);
								Индекс = 1;
								Пока Индекс<5 цикл
									ОбластьСтрНеОбл.Параметры["Месяц"+Строка(Индекс)] = "";
									ОбластьСтрНеОбл.Параметры["Код"+Строка(Индекс)] = "";
									ОбластьСтрНеОбл.Параметры["Сумма"+Строка(Индекс)] = "";
									Индекс = Индекс +1;
								КонецЦикла;
								
								ИндексВСтроке=1;
							КонецЕсли;
							
							Строка41 = Истина;
							
							//МесяцДохода = ?(СтрДлина(СокрЛП(СтрокаЛьгот.МесяцДохода))=2,"","0")+СокрЛП(СтрокаЛьгот.МесяцДохода);
							//ТекстДляИМНС.ДобавитьСтроку("4.1:"+СокрЛП(Строка(СтрокаЛьгот.КодДохода))+";"+МесяцДохода+";"+СокрЛП(Строка(Формат(СтрокаЛьгот.СуммаДохода,"ЧГ=0"))));
							
							ОбластьСтрНеОбл.Параметры["Код"+Строка(ИндексВСтроке)] = СтрокаЛьгот.КодВычета;
							ОбластьСтрНеОбл.Параметры["Месяц"+Строка(ИндексВСтроке)] = ?(СтрДлина(СокрЛП(СтрокаЛьгот.МесяцВычета))=2,"","0")+СокрЛП(СтрокаЛьгот.МесяцВычета);
							ОбластьСтрНеОбл.Параметры["Сумма"+Строка(ИндексВСтроке)] = СтрокаЛьгот.СуммаВычета;
							
							ОбщаяСуммаВычетов = ОбщаяСуммаВычетов + СтрокаЛьгот.СуммаВычета;
							
							ИндексВСтроке = ИндексВСтроке + 1;
						КонецЕсли;	
					Конеццикла;
					
					Документ2НДФЛ.Вывести(ОбластьСтрНеОбл);
				Иначе
					Документ2НДФЛ.Вывести(ОбластьР3ШапкаНеОбл);
					
					//Льготы
					ИндексВСтроке = 1;
					Строка41 = Ложь;
					Для каждого строкаЛьгот из Справка.ДоходВидНеОбл.Значение цикл
						Если ИндексВСтроке = 5 тогда
							Документ2НДФЛ.Вывести(ОбластьСтрНеОбл);
							ИндексВСтроке=1;
						КонецЕсли;
						
						Строка41 = Истина;
						
						МесяцДохода = ?(СтрДлина(СокрЛП(СтрокаЛьгот.МесДохода))=2,"","0")+СокрЛП(СтрокаЛьгот.МесДохода);
						ТекстДляИМНС.ДобавитьСтроку("4.1:"+СокрЛП(Строка(СтрокаЛьгот.КодДохода))+";"+МесяцДохода+";"+СокрЛП(Строка(Формат(СтрокаЛьгот.СуммаДохода,"ЧГ=0"))));
						
						ОбластьСтрНеОбл.Параметры["Код"+Строка(ИндексВСтроке)] = СтрокаЛьгот.КодДохода;
						ОбластьСтрНеОбл.Параметры["Месяц"+Строка(ИндексВСтроке)] = ?(СтрДлина(СокрЛП(СтрокаЛьгот.МесДохода))=2,"","0")+СокрЛП(СтрокаЛьгот.МесДохода);
						ОбластьСтрНеОбл.Параметры["Сумма"+Строка(ИндексВСтроке)] = СтрокаЛьгот.СуммаДохода;
						
						ОбщаяСуммаЛьгот = ОбщаяСуммаЛьгот + СтрокаЛьгот.СуммаДохода;
						
						ИндексВСтроке = ИндексВСтроке + 1;
						
					Конеццикла;
					
					Документ2НДФЛ.Вывести(ОбластьСтрНеОбл);
				КонецЕсли;
				
				Документ2НДФЛ.Вывести(ОбластьР3ШапкаЛьготы);
				ИндексВСтроке = 1;
				Для каждого строкаЛьгот из Справка.ДоходВидДр.Значение цикл
					Если ИндексВСтроке = 4 тогда
						Документ2НДФЛ.Вывести(ОбластьСтрЛьготы);
						Индекс = 1;
						Пока Индекс<4 цикл
							ОбластьСтрНеОбл1.Параметры["Месяц"+Строка(Индекс)] = "";
							ОбластьСтрНеОбл1.Параметры["Код"+Строка(Индекс)] = "";
							ОбластьСтрНеОбл1.Параметры["Сумма"+Строка(Индекс)] = "";
							Индекс = Индекс +1;
						КонецЦикла;
						
						ИндексВСтроке=1;
					КонецЕсли;
					
					Строка42 = Истина;
					
					МесяцДохода = ?(СтрДлина(СокрЛП(СтрокаЛьгот.МесДохода))=2,"","0")+СокрЛП(СтрокаЛьгот.МесДохода);
					ТекстДляИМНС.ДобавитьСтроку("4.2:"+СокрЛП(Строка(СтрокаЛьгот.КодДохода))+";"+МесяцДохода+";"+СокрЛП(Строка(Формат(СтрокаЛьгот.СуммаДохода,"ЧГ=0")))+";"+СокрЛП(Строка(Формат(СтрокаЛьгот.СуммаВычета,"ЧГ=0"))));
					
					ОбластьСтрЛьготы.Параметры["Код"+Строка(ИндексВСтроке)] = СтрокаЛьгот.КодДохода;
					ОбластьСтрЛьготы.Параметры["Месяц"+Строка(ИндексВСтроке)] = ?(СтрДлина(СокрЛП(СтрокаЛьгот.МесДохода))=2,"","0")+СокрЛП(СтрокаЛьгот.МесДохода);
					ОбластьСтрЛьготы.Параметры["Сумма"+Строка(ИндексВСтроке)] = СтрокаЛьгот.СуммаДохода;
					ОбластьСтрЛьготы.Параметры["Льгота"+Строка(ИндексВСтроке)] = СтрокаЛьгот.СуммаВычета;
					
					ОбщаяСуммаЛьгот = ОбщаяСуммаЛьгот + СтрокаЛьгот.СуммаВычета;
					
					ИндексВСтроке = ИндексВСтроке + 1;
					
				Конеццикла;
				
				Документ2НДФЛ.Вывести(ОбластьСтрЛьготы);
				
				Строка43 = Ложь;
				
				//// Стандартные вычеты
				ОбластьР3Вычеты.Параметры["СтандартныйВычет600"] = Справка.Вычет.Значение.СуммаВычета600;
				ОбластьР3Вычеты.Параметры["СтандартныйВычет610"] = Справка.Вычет.Значение.СуммаВычета610;
				ОбластьР3Вычеты.Параметры["СтандартныйВычет611"] = Справка.Вычет.Значение.СуммаВычета611;
				ОбластьР3Вычеты.Параметры["СтандартныйВычет620"] = Справка.Вычет.Значение.СуммаВычета620;
				//ОбщаяСуммаВычетов = 0;
				
				Если Справка.Вычет.Значение.СуммаВычета600 <> 0 тогда
					ОбщаяСуммаВычетов = ОбщаяСуммаВычетов + Справка.Вычет.Значение.СуммаВычета600;
					ТекстДляИМНС.ДобавитьСтроку("4.4:600"+";"+СокрЛП(Строка(Формат(Справка.Вычет.Значение.СуммаВычета600,"ЧГ=0"))));
					Строка43 = Истина;
				КонецЕсли;
				
				Если Справка.Вычет.Значение.СуммаВычета610 <> 0 тогда
					ОбщаяСуммаВычетов = ОбщаяСуммаВычетов + Справка.Вычет.Значение.СуммаВычета610;
					ТекстДляИМНС.ДобавитьСтроку("4.4:610"+";"+СокрЛП(Строка(Формат(Справка.Вычет.Значение.СуммаВычета610,"ЧГ=0"))));
					Строка43 = Истина;
				КонецЕсли;
				
				Если Справка.Вычет.Значение.СуммаВычета611 <> 0 тогда
					ОбщаяСуммаВычетов = ОбщаяСуммаВычетов + Справка.Вычет.Значение.СуммаВычета611;
					ТекстДляИМНС.ДобавитьСтроку("4.4:611"+";"+СокрЛП(Строка(Формат(Справка.Вычет.Значение.СуммаВычета611,"ЧГ=0"))));
					Строка43 = Истина;
				КонецЕсли;
				
				Если Справка.Вычет.Значение.СуммаВычета620 <> 0 тогда
					ОбщаяСуммаВычетов = ОбщаяСуммаВычетов + Справка.Вычет.Значение.СуммаВычета620;
					ТекстДляИМНС.ДобавитьСтроку("4.4:620"+";"+СокрЛП(Строка(Формат(Справка.Вычет.Значение.СуммаВычета620,"ЧГ=0"))));
					Строка43 = Истина;
				КонецЕсли;
				
				//ОбластьР3Вычеты.Параметры["СтандартныйВычет630"] = Справка.Вычет.Значение.СуммаВычета630;
				//ОбластьР3Вычеты.Параметры["СтандартныйВычет640"] = Справка.Вычет.Значение.СуммаВычета640;
				//ОбластьР3Вычеты.Параметры["СтандартныйВычет650"] = Справка.Вычет.Значение.СуммаВычета650;
				
				Документ2НДФЛ.Вывести(ОбластьР3Вычеты);
			КонецЕсли;
			
			
			// Авторские
			Документ2НДФЛ.Вывести(ОбластьР3АвторскиеВычетыШ);
			ИндексВСтроке = 1;
			Индекс = 1;
			Пока Индекс<4 цикл
				ОбластьСтрАвторскиеВычеты.Параметры["Месяц"+Строка(Индекс)] = "";
				ОбластьСтрАвторскиеВычеты.Параметры["Сумма"+Строка(Индекс)] = "";
				Индекс = Индекс +1;
			КонецЦикла;
			
			Для каждого СтрокаАвторскиеВычеты из Справка.ВычетыАвторские.Значение цикл
				Если ИндексВСтроке = 4 тогда
					Документ2НДФЛ.Вывести(ОбластьСтрАвторские);
					Индекс = 1;
					Пока Индекс<4 цикл
						ОбластьСтрАвторскиеВычеты.Параметры["Месяц"+Строка(Индекс)] = "";
						ОбластьСтрАвторскиеВычеты.Параметры["Сумма"+Строка(Индекс)] = "";
						
						Индекс = Индекс +1;
					КонецЦикла;
					
					ИндексВСтроке=1;
				КонецЕсли;
				
				
				МесяцВычета = ?(СтрДлина(СокрЛП(СтрокаАвторскиеВычеты.МесВычета))=2,"","0")+СокрЛП(СтрокаАвторскиеВычеты.МесВычета);
				ТекстДляИМНС.ДобавитьСтроку("4.7:"+МесяцВычета+";"+СокрЛП(Строка(Формат(СтрокаАвторскиеВычеты.СуммаВычета,"ЧГ=0"))));
				
				ОбластьСтрАвторскиеВычеты.Параметры["Месяц"+Строка(ИндексВСтроке)] = СтрокаАвторскиеВычеты.МесВычета;
				ОбластьСтрАвторскиеВычеты.Параметры["Сумма"+Строка(ИндексВСтроке)] = СтрокаАвторскиеВычеты.СуммаВычета;
				
				ИндексВСтроке = ИндексВСтроке + 1;
				
			Конеццикла; 
			Документ2НДФЛ.Вывести(ОбластьСтрАвторскиеВычеты);
			
			// Итоги раздела 3	
			
			ОбластьР3Подвал.Параметры.ИтогоСГДСумм = (СовокупныйДоход);
			
			МатПомЛьгота = Справка.ДоходыЛьготы.Значение.ДоходВычет510 + Справка.ДоходыЛьготы.Значение.ДоходВычет520 + Справка.ДоходыЛьготы.Значение.ДоходВычет530 +
			Справка.ДоходыЛьготы.Значение.ДоходВычет540 + Справка.ДоходыЛьготы.Значение.ДоходВычет550 + Справка.ДоходыЛьготы.Значение.ДоходВычет560 +
			Справка.ДоходыЛьготы.Значение.ДоходВычет570 + Справка.ДоходыЛьготы.Значение.ДоходВычет580;

			
			Если Дата>=Дата(2010,5,22) Тогда
				Документ2НДФЛ.Вывести(ОбластьШапкаУдержано);
				ИндексВСтроке = 1;
				Для Каждого строкаУдержано из Справка.УдержаноНалогаПоМесяцам.Значение цикл
					Если ИндексВСтроке = 5 тогда
						Документ2НДФЛ.Вывести(ОбластьСтрокаУдержано);
						ОбластьСтрокаУдержано = Макет2НДФЛ.ПолучитьОбласть("СтрокаУдержано");
						ИндексВСтроке=1;
					КонецЕсли;
					
					МесяцДохода =?(СтрДлина(СокрЛП(строкаУдержано.МесНалога))=2,"","0")+СокрЛП(строкаУдержано.МесНалога);
					
					
					ТекстДляИМНС.ДобавитьСтроку("5.2.1:"+МесяцДохода+";"+СокрЛП(Строка(Формат(строкаУдержано.СуммаНалога,"ЧГ=0"))));
					
					ОбластьСтрокаУдержано.Параметры["Месяц"+Строка(ИндексВСтроке)] = МесяцДохода;
					ОбластьСтрокаУдержано.Параметры["Сумма"+Строка(ИндексВСтроке)] = строкаУдержано.СуммаНалога;
					ИндексВСтроке = ИндексВСтроке + 1;
				Конеццикла;
			КонецЕсли;
			
			Если  Дата>=Дата(2010,5,22) ТОгда
				Документ2НДФЛ.Вывести(ОбластьСтрокаУдержано);
			КонецЕсли;
			
			//удержано ЕАЭС
			Если Дата>=Дата(2010,5,22) Тогда
				Документ2НДФЛ.Вывести(ОбластьШапкаУдержаноЕАС);
				ИндексВСтроке = 1;
				Для Каждого строкаУдержано из Справка.УдержаноНалогаПоМесяцам.Значение цикл
					Если ИндексВСтроке = 5 тогда
						Документ2НДФЛ.Вывести(ОбластьСтрокаУдержаноЕАС);
						ОбластьСтрокаУдержаноЕАС = Макет2НДФЛ.ПолучитьОбласть("СтрокаУдержаноЕАС");
						ИндексВСтроке=1;
					КонецЕсли;
					
					МесяцДохода =?(СтрДлина(СокрЛП(строкаУдержано.МесНалога))=2,"","0")+СокрЛП(строкаУдержано.МесНалога);
					
					
					//ТекстДляИМНС.ДобавитьСтроку("5.2.1:"+МесяцДохода+";"+СокрЛП(Строка(Формат(строкаУдержано.СуммаНалога,"ЧГ=0"))));
					
					ОбластьСтрокаУдержаноЕАС.Параметры["Месяц"+Строка(ИндексВСтроке)] = МесяцДохода;
					ОбластьСтрокаУдержаноЕАС.Параметры["Сумма"+Строка(ИндексВСтроке)] = ?(строкаУдержано.ВидЗастрахованногоЛица = 1, строкаУдержано.СуммаНалога,0);
					ИндексВСтроке = ИндексВСтроке + 1;
				Конеццикла;
			КонецЕсли;
			
			Если  Дата>=Дата(2010,5,22) ТОгда
				Документ2НДФЛ.Вывести(ОбластьСтрокаУдержаноЕАС);
			КонецЕсли;
					
			
			ОблСумм = СовокупныйДоход - ОбщаяСуммаЛьгот - ОбщаяСуммавычетов;
			ОбластьР3Прочее.Параметры.НИОблСумм = (Справка.НИОблСумм.Значение);
			Документ2НДФЛ.Вывести(ОбластьР3Прочее);
			
			// Подвал справки
			ОбластьПодвалСправки.Параметры.ДатаПодачиСведений = Формат(Дата,"ДФ=dd.MM.yyyy");
			
			
			ТекстДляИМНС.ДобавитьСтроку("5.3:"+СокрЛП(Строка(Формат(Справка.НИОблСумм.Значение,"ЧГ=0"))));
			
			
			Если Дата<=Дата(2010,5,22) тогда
				
				ОбщийДоходПрочее = 0;
				ОбщийНалогПрочее = 0;
				ИндексВСтроке = 1;
				Строка61 = Ложь;
				ТаблицаНалога = Новый ТаблицаЗначений;
				ТаблицаНалога = Справка.ДоходВидПр.Значение.Скопировать();
				Для каждого строкаЛьгот из Справка.ДоходВидПр.Значение цикл
					Если ИндексВСтроке = 4 тогда
						Документ2НДФЛ.Вывести(ОбластьСтрПрочие);
						Индекс = 1;
						Пока Индекс<4 цикл
							ОбластьСтрНеОбл1.Параметры["Месяц"+Строка(Индекс)] = "";
							ОбластьСтрНеОбл1.Параметры["Код"+Строка(Индекс)] = "";
							ОбластьСтрНеОбл1.Параметры["Сумма"+Строка(Индекс)] = "";
							Индекс = Индекс +1;
						КонецЦикла;
						
						ИндексВСтроке=1;
					КонецЕсли;
					
					Если СтрокаЛьгот.СуммаДохода<>0 тогда // или СтрокаЛьгот.СуммаНалога<>0 тогда
						Строка61 = Истина;
						
						МесяцДохода = ?(СтрДлина(СокрЛП(СтрокаЛьгот.МесДохода))=2,"","0")+СокрЛП(СтрокаЛьгот.МесДохода);
						ОбластьСтрПрочие.Параметры["Код"+Строка(ИндексВСтроке)] = СокрЛП(Строка(Формат(СтрокаЛьгот.КодДохода,"ЧГ=0")));
						ОбластьСтрПрочие.Параметры["Месяц"+Строка(ИндексВСтроке)] = ?(СтрДлина(СокрЛП(СтрокаЛьгот.МесДохода))=2,"","0")+СокрЛП(СтрокаЛьгот.МесДохода);
						ОбластьСтрПрочие.Параметры["Сумма"+Строка(ИндексВСтроке)] = СтрокаЛьгот.СуммаДохода;
						
						Если СтрокаЛьгот.СуммаНалога = 0 тогда
							СтрокаНалога = ТаблицаНалога.НайтиСтроки(Новый Структура("МесДохода,Ставка",СтрокаЛьгот.МесДохода,СтрокаЛьгот.Ставка));
							Если СтрокаНалога.Количество() = 0 тогда
							Иначе
								Для каждого ссс из СтрокаНалога цикл
									СуммаН = ссс.СуммаНалога;
									Если СуммаН <> 0 тогда
										ОбластьСтрПрочие.Параметры["Налог"+Строка(ИндексВСтроке)] = СуммаН;
										ТаблицаНалога[ТаблицаНалога.Индекс(СтрокаНалога[0])].СуммаНалога = 0;
									КонецЕсли;
								Конеццикла;
							КонецЕсли;
						Иначе
							СуммаН = 0;
							ОбластьСтрПрочие.Параметры["Налог"+Строка(ИндексВСтроке)] = СтрокаЛьгот.СуммаНалога;
						КонецЕсли;
						
						ТекстДляИМНС.ДобавитьСтроку("6.1:"+СокрЛП(Строка(Формат(СтрокаЛьгот.КодДохода,"ЧГ=0")))+";"+МесяцДохода+";"+СокрЛП(Строка(Формат(СтрокаЛьгот.СуммаДохода,"ЧГ=0")))+";"+СокрЛП(Строка(Формат(СуммаН,"ЧГ=0"))));
						
						ОбщийДоходПрочее = ОбщийДоходПрочее + СтрокаЛьгот.СуммаДохода;
						ОбщийНалогПрочее = ОбщийНалогПрочее + СуммаН;
						
						ИндексВСтроке = ИндексВСтроке + 1;
					КонецЕсли;
				Конеццикла;
				//Если Строка61 тогда
				Документ2НДФЛ.Вывести(ОбластьСтрПрочие);
				//КонецЕсли;
			КонецЕсли;
			
			ОбластьР3Подвал.Параметры.СуммаДоходаПроч 	= (ОбщийДоходПрочее);
			ОбластьР3Подвал.Параметры.СуммаНалогаПроч 	= (ОбщийНалогПрочее);
			ОбластьР3Подвал.Параметры.ИтогоСГДСумм = (СовокупныйДоход);
			ОбластьР3Подвал.Параметры.ИтогоНИОблСумм = (Справка.НИОблСумм.Значение);
			
			Документ2НДФЛ.Вывести(ОбластьР3Подвал);
			
			//ОбластьПодвалСправки.Параметры.ГлБух = ФИОГлавногоБухгалтера;
			ОбластьПодвалСправки.Параметры.Руководитель = Руководитель;
			Документ2НДФЛ.Вывести(ОбластьПодвалСправки);
			Документ2НДФЛ.ВывестиГоризонтальныйРазделительСтраниц();
			//
			//Если Строка61 тогда
			//	ТекстДляИМНС.ДобавитьСтроку("6.2:"+СокрЛП(Строка(Формат(ОбщийДоходПрочее,"ЧГ=0"))));
			//	ТекстДляИМНС.ДобавитьСтроку("6.3:"+СокрЛП(Строка(Формат(ОбщийНалогПрочее,"ЧГ=0"))));
			//КонецЕсли;
			
			ТекстДляИМНС.ДобавитьСтроку("7.1:"+СокрЛП(Строка(Формат(СовокупныйДоход,"ЧГ=0"))));
			ТекстДляИМНС.ДобавитьСтроку("7.2:"+СокрЛП(Строка(Формат(Справка.НИОблСумм.Значение,"ЧГ=0"))));
			
			ТекстДляИМНС.ДобавитьСтроку("@@@");
			
			// Строка реестра
			
			ОбщийДоходФизЛица = Справка.СГДСумм.Значение + Справка.ДивСумм.Значение + Справка.ДохСуммДр.Значение + Справка.СуммПр.Значение;// + Справка.ДохИмущ.Значение.Итог("СуммаДохода");
			ОбластьРеестрСтрока.Параметры.НомерСправки = НомерДокумента;
			ОбластьРеестрСтрока.Параметры.ФИО = ФИО;
			ОбластьРеестрСтрока.Параметры.ОбщДоход	= (ОбщийДоходФизЛица);
			ОбластьРеестрСтрока.Параметры.Период	= НалоговыйПериод;
			//ОбластьРеестрСтрока.Параметры.НИОбщСумм 	= (Справка.НИОбщСумм.Значение);
			//ОбластьРеестрСтрока.Параметры.НУОбщСумм	 	= (Справка.НУОбщСумм.Значение);
			ОбластьРеестрСтрока.Параметры.Адрес		= Справка.АдрМЖ.Значение.Индекс+", "+
			Справка.АдрМЖ.Значение.Область+", "+Справка.АдрМЖ.Значение.Район+", "+Справка.АдрМЖ.Значение.Сельсовет+", "+
			Справка.АдрМЖ.Значение.НаселенныйПункт+", "+Справка.АдрМЖ.Значение.Улица+", "+Справка.АдрМЖ.Значение.Дом+", "+
			Справка.АдрМЖ.Значение.Корпус+", "+Справка.АдрМЖ.Значение.Квартира;
			ДокументРеестр.Вывести(ОбластьРеестрСтрока);
			
			// Итоговые счетчики реестра
			ИтогоДоход 		= ИтогоДоход + ОбщийДоходФизЛица;
			ИтогоИсчНалог 	= ИтогоИсчНалог + Справка.НИОбщСумм.Значение;
			ИтогоУдНалог 	= ИтогоУдНалог + Справка.НУОбщСумм.Значение;
			
			// Подготовка к следующей итерации
			ОчиститьДанныеНабораЗаписей(Справка);
		КонецЦикла; 
		
		ТекстДляИМНС.ДобавитьСтроку("===");
		// Вывод подвала реестра
		ОбластьРеестрПодвал.Параметры.ОбщДоход 	= (ИтогоДоход);
		ОбластьРеестрПодвал.Параметры.ГлБух = ФИОГлавногоБухгалтера;
		ОбластьРеестрПодвал.Параметры.КоличествоСправок 	= НаборЗаписейНА.КолДок.Значение;
		ДокументРеестр.Вывести(ОбластьРеестрПодвал);
		
		Документ2НДФЛ.АвтоМасштаб = Истина;
		РаботаСДиалогами.НапечататьДокумент(Документ2НДФЛ, 1 , Ложь, "Сведения о доходах физических лиц");
		ТекстДляИМНС.Показать("Сведения о доходах физических лиц", "Файл сведений");
		// Реестр нужен только для ИФНС 
		//Если НазначениеСправки = Перечисления.ПорядокФормированияСправкиОДоходахФизлица.ДляПередачиВИФНС Тогда
		//	РаботаСДиалогами.НапечататьДокумент(ДокументРеестр, 2 , Ложь, "Реестр сведений о доходах");
		//	ТекстДляИМНС.Показать("Сведения о доходах физических лиц", "Файл сведений");
		//КонецЕсли; 
		
	КонецПроцедуры
	
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПечатьФайла","2-НДФЛ");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет табличную часть документа физлицами, получавшими доходы
//
// Параметры
//   нет
//
Процедура Автозаполнение(ФизЛицо = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ГодНП",НалоговыйПериод);
	Запрос.УстановитьПараметр("ДатаПодачиСведений",Дата);
	Если ФизЛицо <> Неопределено тогда
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	КонецЕсли;
	
	СписокФизЛицТекст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДФЛСведенияОДоходах.ФизЛицо
	|ИЗ
	|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
	|
	|ГДЕ
	|	НДФЛСведенияОДоходах.ОбособленноеПодразделение = &Организация И
	|	(ГОД(НДФЛСведенияОДоходах.Период) = &ГодНП) И
	|	НДФЛСведенияОДоходах.ПериодРегистрации <= &ДатаПодачиСведений";
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	НДФЛСведенияОДоходах.ФизЛицо.Наименование";
	Если ФизЛицо <> Неопределено тогда
		СписокФизЛицТекст = СписокФизЛицТекст + " И НДФЛСведенияОДоходах.ФизЛицо = &ФизЛицо";
	КонецЕсли;
	
	//-----------------------------------------------------------------------------
	// СВЕДЕНИЯ О ФИЗЛИЦАХ
	
	СведенияОФизЛицахТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка КАК ФизЛицо,
	|	ФизическиеЛица.ИНН КАК УНП,
	|	ФИОФизЛиц.Фамилия,
	|	ФИОФизЛиц.Имя,
	|	ФИОФизЛиц.Отчество,
	|	ВЫБОР КОГДА ПаспортныеДанные.ДокументВид.КодИМНС ЕСТЬ NULL ТОГДА """" ИНАЧЕ ПаспортныеДанные.ДокументВид.КодИМНС КОНЕЦ КАК КодДокумента,
	|	ВЫБОР КОГДА ПаспортныеДанные.ДокументСерия ЕСТЬ NULL ТОГДА """" ИНАЧЕ ПаспортныеДанные.ДокументСерия КОНЕЦ КАК СерияДокумента,
	|	ВЫБОР КОГДА ПаспортныеДанные.ДокументНомер ЕСТЬ NULL ТОГДА """" ИНАЧЕ ПаспортныеДанные.ДокументНомер КОНЕЦ КАК НомерДокумента,
	|	ВЫБОР КОГДА ПаспортныеДанные.ДокументДатаВыдачи ЕСТЬ NULL ТОГДА """" ИНАЧЕ ПаспортныеДанные.ДокументдатаВыдачи КОНЕЦ КАК ДатаВыдачи,
	|	ВЫБОР КОГДА ПаспортныеДанные.ДокументКемВыдан ЕСТЬ NULL ТОГДА """" ИНАЧЕ ВЫРАЗИТЬ(ПаспортныеДанные.ДокументКемВыдан КАК СТРОКА(96)) КОНЕЦ КАК НаименованиеОргана,
	|	ВЫБОР КОГДА ПаспортныеДанные.ЛичныйНомер ЕСТЬ NULL ТОГДА """" ИНАЧЕ ПаспортныеДанные.ЛичныйНомер КОНЕЦ КАК ЛичныйНомер,
	|	""112"" КАК КодСтраны,
	|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ (Гражданство.Страна  = &ПустаяСтрана) ИЛИ Гражданство.Страна = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.БЕЛАРУСЬ)  ТОГДА """" ИНАЧЕ Гражданство.Страна.Код КОНЕЦ КАК АдресКодСтраны,
	|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ НЕ(Гражданство.НеЯвляетсяНалоговымРезидентомРФ) ТОГДА АдресаРегистрации.Поле1 ИНАЧЕ """" КОНЕЦ КАК Индекс,	
	|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ НЕ(Гражданство.НеЯвляетсяНалоговымРезидентомРФ) ТОГДА АдресаРегистрации.Поле13 ИНАЧЕ """" КОНЕЦ КАК КодМеста,	
	|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ НЕ(Гражданство.НеЯвляетсяНалоговымРезидентомРФ) ТОГДА АдресаРегистрации.Поле2 ИНАЧЕ """" КОНЕЦ КАК Область,	
	|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ НЕ(Гражданство.НеЯвляетсяНалоговымРезидентомРФ) ТОГДА АдресаРегистрации.Поле3 ИНАЧЕ """" КОНЕЦ КАК Район,	
	|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ НЕ(Гражданство.НеЯвляетсяНалоговымРезидентомРФ) ТОГДА АдресаРегистрации.Поле5 ИНАЧЕ """" КОНЕЦ КАК Сельсовет,	
	|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ НЕ(Гражданство.НеЯвляетсяНалоговымРезидентомРФ) ТОГДА АдресаРегистрации.Поле10 ИНАЧЕ """" КОНЕЦ КАК типНаселенногоПункта,	
	|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ НЕ(Гражданство.НеЯвляетсяНалоговымРезидентомРФ) ТОГДА ВЫБОР КОГДА АдресаРегистрации.Поле4 ЕСТЬ NULL ТОГДА АдресаРегистрации.Поле5 ИНАЧЕ АдресаРегистрации.Поле4 КОНЕЦ ИНАЧЕ АдресаИностранцев.Представление КОНЕЦ КАК НазваниеНаселенногоПункта,	
	|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ НЕ(Гражданство.НеЯвляетсяНалоговымРезидентомРФ) ТОГДА АдресаРегистрации.Поле11 ИНАЧЕ """" КОНЕЦ КАК ТипУлицы,	
	|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ НЕ(Гражданство.НеЯвляетсяНалоговымРезидентомРФ) ТОГДА АдресаРегистрации.Поле6 ИНАЧЕ """" КОНЕЦ КАК НазваниеУлицы,	
	|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ НЕ(Гражданство.НеЯвляетсяНалоговымРезидентомРФ) ТОГДА АдресаРегистрации.Поле7 ИНАЧЕ """" КОНЕЦ КАК НомерДома,	
	|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ НЕ(Гражданство.НеЯвляетсяНалоговымРезидентомРФ) ТОГДА АдресаРегистрации.Поле8 ИНАЧЕ """" КОНЕЦ КАК Корпус,	
	|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ НЕ(Гражданство.НеЯвляетсяНалоговымРезидентомРФ) ТОГДА АдресаРегистрации.Поле9 ИНАЧЕ """" КОНЕЦ КАК НомерКвартиры,
	|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ (Гражданство.Страна  = &ПустаяСтрана) ИЛИ Гражданство.Страна.Код = ""112"" ТОГДА ""5"" ИНАЧЕ ""F"" КОНЕЦ КАК Статус,
	|	ВЫБОР КОГДА (СрезРаботниковОрганизацииНаКонецГода.Сотрудник.ВидЗанятости = &ОсновноеМесто) ТОГДА ""01"" ИНАЧЕ ""02"" КОНЕЦ КАК КодМестаРаботы,
	|	ВЫБОР КОГДА (Гражданство.ФизЛицо ЕСТЬ NULL) ИЛИ НЕ(Гражданство.НеЯвляетсяНалоговымРезидентомРФ) ТОГДА АдресаРегистрации.Поле12 ИНАЧЕ """" КОНЕЦ КАК КодИМНС
	|ИЗ
	|	(" + СписокФизлицТекст + ") КАК РаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО ФизическиеЛица.Ссылка = РаботникиОрганизации.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&ДатаПодачиСведений, ФизЛицо в (" + СписокФизлицТекст + ")) КАК ПаспортныеДанные
	|		ПО ПаспортныеДанные.ФизЛицо = РаботникиОрганизации.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&КонецНП, ФизЛицо в (" + СписокФизлицТекст + ")) КАК Гражданство
	|		ПО Гражданство.ФизЛицо = РаботникиОрганизации.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаПодачиСведений, ФизЛицо в (" + СписокФизлицТекст + ")) КАК ФИОФизЛиц
	|		ПО ФИОФизЛиц.ФизЛицо = РаботникиОрганизации.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаРегистрации
	|		ПО РаботникиОрганизации.ФизЛицо = АдресаРегистрации.Объект И АдресаРегистрации.Вид = &ВидАдресаРегистрации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК РегионыПоРегистрации
	|		ПО РегионыПоРегистрации.ТипАдресногоЭлемента = 1 И (РегионыПоРегистрации.Наименование + "" "" +РегионыПоРегистрации.Сокращение) = АдресаРегистрации.Поле2
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаИностранцев
	|		ПО РаботникиОрганизации.ФизЛицо = АдресаИностранцев.Объект И АдресаИностранцев.Вид = &ВидАдресаИнострАдрес
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК Страны
	|		ПО Страны.Наименование = АдресаИностранцев.Поле1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&КонецНП, Организация = &ГоловнаяОрганизация И (Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство или Сотрудник.ВидЗанятости ЕСТЬ NULL) И ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) И Сотрудник.ФизЛицо в (" + СписокФизлицТекст + ")) КАК СрезРаботниковОрганизацииНаКонецГода
	|		ПО СрезРаботниковОрганизацииНаКонецГода.Сотрудник.ФизЛицо = РаботникиОрганизации.ФизЛицо И СрезРаботниковОрганизацииНаКонецГода.ПодразделениеОрганизации.Владелец = &Организация И СрезРаботниковОрганизацииНаКонецГода.ПричинаИзмененияСостояния <> &Увольнение";
	//	|" + УпорядочиваниеФизЛицТекст;
	
	Запрос.Текст = СведенияОФизЛицахТекст; 	
	Запрос.УстановитьПараметр("Организация", Организация);
	Если не ЗначениеЗаполнено (Организация.ГоловнаяОрганизация) тогда
		ГоловнаяОрганизация = Организация;
	Иначе	
		ГоловнаяОрганизация = Организация.ГоловнаяОрганизация;
	КонецЕсли;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	ДатаНачалаНП = НачалоГода(Дата(НалоговыйПериод,1,1));
	датаКонцаНП  = Конецгода(Дата(НалоговыйПериод,1,1));
	Запрос.УстановитьПараметр("НачалоНП", ДатаНачалаНП);
	Запрос.УстановитьПараметр("КонецНП", ДатаКонцаНП);// последний месяц налогового периода, за который подаём сведения
	Запрос.УстановитьПараметр("НачалоСледующегоНП", ДатаКонцаНП + 1);
	Запрос.УстановитьПараметр("ВидАдресаРегистрации" , Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица);
	Запрос.УстановитьПараметр("ВидАдресаИнострАдрес" , Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица);
	Запрос.УстановитьПараметр("ВнутреннееСовместительство" , Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("ОсновноеМесто" , Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	Запрос.УстановитьПараметр("Увольнение" , Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("ПустаяСтрана" , Справочники.КлассификаторСтранМира.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСтатус" , Справочники.КатегорииЗастрахованныхЛиц.ПустаяСсылка());
	ВыборкаФизЛиц = Запрос.Выполнить().Выбрать();
	
	//РКО.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Если ФизЛицо = Неопределено тогда
		
		РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
	Иначе
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НайденнаяСтрока = РаботникиОрганизации.Найти(Выборка.ФизЛицо,"ФизЛицо");
			Если НайденнаяСтрока = Неопределено Тогда
				НоваяСтрока = РаботникиОрганизации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
			Иначе
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока,Выборка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // Автозаполнение()

// Пронумеровывает справки о доходах с учетом уже зафиксированных в ИБ
//
// Параметры
//   нет
//
Процедура ПронумероватьСправки() Экспорт 
	
	// Рассчитаем номер первой справки о доходах
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента",Дата);
	Запрос.УстановитьПараметр("НалоговыйПериод",НалоговыйПериод);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки) КАК КоличествоСформированныхСправок
	|ИЗ
	|	Документ.СведенияОДоходахФизлиц.РаботникиОрганизации КАК СведенияОДоходахФизлицРаботникиОрганизации
	|ГДЕ
	|	СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Дата < &ДатаДокумента
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Проведен
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Организация = &Организация
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.НалоговыйПериод = &НалоговыйПериод";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		НомерПервойСправки = ?(Выборка.КоличествоСформированныхСправок = NULL, 0, Выборка.КоличествоСформированныхСправок) + 1;
	Иначе	
		НомерПервойСправки = 1;
	КонецЕсли;  
	
	Для каждого СтрокаТЧ Из РаботникиОрганизации Цикл
		СтрокаТЧ.НомерСправки = НомерПервойСправки;
		НомерПервойСправки = НомерПервойСправки + 1;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ФизлицуСводно",Перечисления.ПорядокФормированияСправкиОДоходахФизлица.ФизлицуСводно);
	Запрос.УстановитьПараметр("ФизЛицо",Перечисления.ЮрФизЛицо.ФизЛицо);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОДоходахФизлиц.Дата,
	|	СведенияОДоходахФизлиц.Ссылка,
	|	СведенияОДоходахФизлиц.Организация,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахФизлиц.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА СведенияОДоходахФизлиц.Организация
	|		ИНАЧЕ СведенияОДоходахФизлиц.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	СведенияОДоходахФизлиц.Ответственный,
	|	СведенияОДоходахФизлиц.НалоговыйПериод,
	|	СведенияОДоходахФизлиц.ДолжностьОтветственного,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахФизлиц.НазначениеСправки = &ФизлицуСводно
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПроверятьСтавку,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахФизлиц.НазначениеСправки = &ФизлицуСводно
	|			ТОГДА ЛОЖЬ
	|		КОГДА СведенияОДоходахФизлиц.Организация.ЮрФизЛицо = &ФизЛицо
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПроверятьКоды
	|ИЗ
	|	Документ.СведенияОДоходахФизлиц КАК СведенияОДоходахФизлиц
	|ГДЕ
	|	СведенияОДоходахФизлиц.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части документам
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("СтавкаПо13",Перечисления.НДФЛСтавки.Ставка13);
	Запрос.УстановитьПараметр("СтавкаПо9",Перечисления.НДФЛСтавки.Ставка09);
	Запрос.УстановитьПараметр("СтавкаПо35",Перечисления.НДФЛСтавки.Ставка35);
	Запрос.УстановитьПараметр("СтавкаПо30",Перечисления.НДФЛСтавки.Ставка30);
	
	Если ВыборкаПоШапкеДокумента.ПроверятьКоды Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки,
		|	СведенияОДоходахФизлицРаботникиОрганизации.НомерСправки,
		|	СведенияОДоходахФизлицРаботникиОрганизации.ФизЛицо,
		|	ВЫБОР
		|		КОГДА СведенияОДоходахФизлицРаботникиОрганизации.Ставка = &СтавкаПо13
		|			ТОГДА СведенияОДоходахФизлицРаботникиОрганизации.ПереданоНаВзыскание
		|		КОГДА СведенияОДоходахФизлицРаботникиОрганизации.Ставка = &СтавкаПо30
		|			ТОГДА СведенияОДоходахФизлицРаботникиОрганизации.ПереданоНаВзыскание
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПереданоНаВзысканиеПоСтавке13,
		|	ВЫБОР
		|		КОГДА СведенияОДоходахФизлицРаботникиОрганизации.Ставка = &СтавкаПо9
		|			ТОГДА СведенияОДоходахФизлицРаботникиОрганизации.ПереданоНаВзыскание
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПереданоНаВзысканиеПоСтавке09,
		|	ВЫБОР
		|		КОГДА СведенияОДоходахФизлицРаботникиОрганизации.Ставка = &СтавкаПо35
		|			ТОГДА СведенияОДоходахФизлицРаботникиОрганизации.ПереданоНаВзыскание
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПереданоНаВзысканиеПоСтавке35,
		|	СведенияОДоходахФизлицРаботникиОрганизации.Ставка,
		|	СведенияОДоходахФизлицРаботникиОрганизации.КодМеста КАК КодМеста,
		|	СведенияОДоходахФизлицРаботникиОрганизации.КПП,
		|	МИНИМУМ(ПовторяющиесяНомераСправок.НомерСтроки) КАК НомерСтрокиПовторяющегосяНомераСправки,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(ПовторяющиесяНомераСправок.НомерСтроки) ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьПовторяющиесяНомераСправок,
		|	МИНИМУМ(ПовторяющиесяСправки.НомерСтроки) КАК НомерСтрокиПовторяющейсяСправки,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(ПовторяющиесяСправки.НомерСтроки) ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьПовторяющиесяСправки
		|ИЗ
		|	Документ.СведенияОДоходахФизлиц.РаботникиОрганизации КАК СведенияОДоходахФизлицРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			СведенияОДоходахФизлицРаботникиОрганизации.НомерСправки КАК НомерСправки
		|		ИЗ
		|			Документ.СведенияОДоходахФизлиц.РаботникиОрганизации КАК СведенияОДоходахФизлицРаботникиОрганизации
		|		ГДЕ
		|			СведенияОДоходахФизлицРаботникиОрганизации.Ссылка = &ДокументСсылка) КАК ПовторяющиесяНомераСправок
		|		ПО СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки < ПовторяющиесяНомераСправок.НомерСтроки
		|			И СведенияОДоходахФизлицРаботникиОрганизации.НомерСправки = ПовторяющиесяНомераСправок.НомерСправки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			СведенияОДоходахФизлицРаботникиОрганизации.ФизЛицо КАК ФизЛицо,
		|			СведенияОДоходахФизлицРаботникиОрганизации.Ставка КАК Ставка,
		|			СведенияОДоходахФизлицРаботникиОрганизации.КодПоОКАТО КАК КодПоОКАТО,
		|			СведенияОДоходахФизлицРаботникиОрганизации.КПП КАК КПП
		|		ИЗ
		|			Документ.СведенияОДоходахФизлиц.РаботникиОрганизации КАК СведенияОДоходахФизлицРаботникиОрганизации
		|		ГДЕ
		|			СведенияОДоходахФизлицРаботникиОрганизации.Ссылка = &ДокументСсылка) КАК ПовторяющиесяСправки
		|		ПО СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки < ПовторяющиесяСправки.НомерСтроки
		|			И СведенияОДоходахФизлицРаботникиОрганизации.ФизЛицо = ПовторяющиесяСправки.ФизЛицо
		|			И СведенияОДоходахФизлицРаботникиОрганизации.Ставка = ПовторяющиесяСправки.Ставка
		|			И СведенияОДоходахФизлицРаботникиОрганизации.КодПоОКАТО = ПовторяющиесяСправки.КодПоОКАТО
		|			И СведенияОДоходахФизлицРаботникиОрганизации.КПП = ПовторяющиесяСправки.КПП
		|ГДЕ
		|	СведенияОДоходахФизлицРаботникиОрганизации.Ссылка = &ДокументСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки,
		|	СведенияОДоходахФизлицРаботникиОрганизации.ФизЛицо,
		|	СведенияОДоходахФизлицРаботникиОрганизации.Ставка,
		|	СведенияОДоходахФизлицРаботникиОрганизации.КодМеста,
		|	СведенияОДоходахФизлицРаботникиОрганизации.КПП,
		|	ВЫБОР
		|		КОГДА СведенияОДоходахФизлицРаботникиОрганизации.Ставка = &СтавкаПо13
		|			ТОГДА СведенияОДоходахФизлицРаботникиОрганизации.ПереданоНаВзыскание
		|		КОГДА СведенияОДоходахФизлицРаботникиОрганизации.Ставка = &СтавкаПо30
		|			ТОГДА СведенияОДоходахФизлицРаботникиОрганизации.ПереданоНаВзыскание
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СведенияОДоходахФизлицРаботникиОрганизации.Ставка = &СтавкаПо9
		|			ТОГДА СведенияОДоходахФизлицРаботникиОрганизации.ПереданоНаВзыскание
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СведенияОДоходахФизлицРаботникиОрганизации.Ставка = &СтавкаПо35
		|			ТОГДА СведенияОДоходахФизлицРаботникиОрганизации.ПереданоНаВзыскание
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	СведенияОДоходахФизлицРаботникиОрганизации.НомерСправки";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки,
		|	СведенияОДоходахФизлицРаботникиОрганизации.НомерСправки,
		|	СведенияОДоходахФизлицРаботникиОрганизации.ФизЛицо,
		|	ВЫБОР
		|		КОГДА СведенияОДоходахФизлицРаботникиОрганизации.Ставка = &СтавкаПо13
		|			ТОГДА СведенияОДоходахФизлицРаботникиОрганизации.ПереданоНаВзыскание
		|		КОГДА СведенияОДоходахФизлицРаботникиОрганизации.Ставка = &СтавкаПо30
		|			ТОГДА СведенияОДоходахФизлицРаботникиОрганизации.ПереданоНаВзыскание
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПереданоНаВзысканиеПоСтавке13,
		|	ВЫБОР
		|		КОГДА СведенияОДоходахФизлицРаботникиОрганизации.Ставка = &СтавкаПо9
		|			ТОГДА СведенияОДоходахФизлицРаботникиОрганизации.ПереданоНаВзыскание
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПереданоНаВзысканиеПоСтавке09,
		|	ВЫБОР
		|		КОГДА СведенияОДоходахФизлицРаботникиОрганизации.Ставка = &СтавкаПо35
		|			ТОГДА СведенияОДоходахФизлицРаботникиОрганизации.ПереданоНаВзыскание
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПереданоНаВзысканиеПоСтавке35,
		|	СведенияОДоходахФизлицРаботникиОрганизации.Ставка,
		|	МИНИМУМ(ПовторяющиесяНомераСправок.НомерСтроки) КАК НомерСтрокиПовторяющегосяНомераСправки,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(ПовторяющиесяНомераСправок.НомерСтроки) ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьПовторяющиесяНомераСправок,
		|	МИНИМУМ(ПовторяющиесяСправки.НомерСтроки) КАК НомерСтрокиПовторяющейсяСправки,
		|	"""" КАК КодПоОКАТО,
		|	"""" КАК КПП,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(ПовторяющиесяСправки.НомерСтроки) ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьПовторяющиесяСправки
		|ИЗ
		|	Документ.СведенияОДоходахФизлиц.РаботникиОрганизации КАК СведенияОДоходахФизлицРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			СведенияОДоходахФизлицРаботникиОрганизации.НомерСправки КАК НомерСправки
		|		ИЗ
		|			Документ.СведенияОДоходахФизлиц.РаботникиОрганизации КАК СведенияОДоходахФизлицРаботникиОрганизации
		|		ГДЕ
		|			СведенияОДоходахФизлицРаботникиОрганизации.Ссылка = &ДокументСсылка) КАК ПовторяющиесяНомераСправок
		|		ПО СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки < ПовторяющиесяНомераСправок.НомерСтроки
		|			И СведенияОДоходахФизлицРаботникиОрганизации.НомерСправки = ПовторяющиесяНомераСправок.НомерСправки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			СведенияОДоходахФизлицРаботникиОрганизации.ФизЛицо КАК ФизЛицо,
		|			СведенияОДоходахФизлицРаботникиОрганизации.Ставка КАК Ставка
		|		ИЗ
		|			Документ.СведенияОДоходахФизлиц.РаботникиОрганизации КАК СведенияОДоходахФизлицРаботникиОрганизации
		|		ГДЕ
		|			СведенияОДоходахФизлицРаботникиОрганизации.Ссылка = &ДокументСсылка) КАК ПовторяющиесяСправки
		|		ПО СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки < ПовторяющиесяСправки.НомерСтроки
		|			И СведенияОДоходахФизлицРаботникиОрганизации.ФизЛицо = ПовторяющиесяСправки.ФизЛицо
		|			И СведенияОДоходахФизлицРаботникиОрганизации.Ставка = ПовторяющиесяСправки.Ставка
		|ГДЕ
		|	СведенияОДоходахФизлицРаботникиОрганизации.Ссылка = &ДокументСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки,
		|	СведенияОДоходахФизлицРаботникиОрганизации.ФизЛицо,
		|	СведенияОДоходахФизлицРаботникиОрганизации.Ставка,
		|	ВЫБОР
		|		КОГДА СведенияОДоходахФизлицРаботникиОрганизации.Ставка = &СтавкаПо13
		|			ТОГДА СведенияОДоходахФизлицРаботникиОрганизации.ПереданоНаВзыскание
		|		КОГДА СведенияОДоходахФизлицРаботникиОрганизации.Ставка = &СтавкаПо30
		|			ТОГДА СведенияОДоходахФизлицРаботникиОрганизации.ПереданоНаВзыскание
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СведенияОДоходахФизлицРаботникиОрганизации.Ставка = &СтавкаПо9
		|			ТОГДА СведенияОДоходахФизлицРаботникиОрганизации.ПереданоНаВзыскание
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СведенияОДоходахФизлицРаботникиОрганизации.Ставка = &СтавкаПо35
		|			ТОГДА СведенияОДоходахФизлицРаботникиОрганизации.ПереданоНаВзыскание
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	СведенияОДоходахФизлицРаботникиОрганизации.НомерСправки";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 		 - флаг отказа в проведении,
//	Заголовок	 - Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НалоговыйПериод) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан налоговый период, за который подаются сведения!", Отказ, Заголовок);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Ответственный) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указано лицо, ответственное за подачу сведений!", Отказ, Заголовок);
	КонецЕсли;
	
	
	//Если НазначениеСправки = Перечисления.ПорядокФормированияСправкиОДоходахФизлица.ДляПередачиВИФНС И СтрДлина(СокрЛП(ИдентификаторФайла)) < 36 Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Неверно указан идентификатор файла!", Отказ, Заголовок);
	//КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строки документа.
Процедура ПроверитьЗаполнениеСтрокиРаботникиОрганизации(ВыборкаПоШапкеДокумента,ВыборкаПоРаботникиОрганизации, Отказ, Заголовок)
	
	НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоРаботникиОрганизации.НомерСтроки) +
	""" табл. части ""Работники организации"": ";
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ФизЛицо) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указано физическое лицо!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоРаботникиОрганизации.ЕстьПовторяющиесяСправки Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "справка повторяется в другой строке документа (" + ВыборкаПоРаботникиОрганизации.НомерСтрокиПовторяющейсяСправки + ")!", Отказ, Заголовок);
	КонецЕсли;
	
	
	//Если НЕ ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.НомерСправки) Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указан номер справки!", Отказ, Заголовок);
	//ИначеЕсли ВыборкаПоРаботникиОрганизации.ЕстьПовторяющиесяНомераСправок Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "номер справки повторяется в другой строке документа (" + ВыборкаПоРаботникиОрганизации.НомерСтрокиПовторяющегосяНомераСправки + ")!", Отказ, Заголовок);
	//КонецЕсли;
	
	//Если ВыборкаПоШапкеДокумента.ПроверятьСтавку Тогда
	//	Если НЕ ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.Ставка) Тогда
	//		ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указана ставка налогообложения дохода!", Отказ, Заголовок);
	//	КонецЕсли;
	//КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ПроверятьКоды Тогда
		Если НЕ ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.КодМеста) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указан код по СОАТО!", Отказ, Заголовок);
			//ИначеЕсли СтрДлина(СокрЛП(ВыборкаПоРаботникиОрганизации.КодПоОКАТО)) <> 11 Тогда
			//	ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "неверно указан код по ОКАТО!", Отказ, Заголовок);
		КонецЕсли;
		//Если НЕ ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.КПП) Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указан КПП!", Отказ, Заголовок);
		//ИначеЕсли СтрДлина(СокрЛП(ВыборкаПоРаботникиОрганизации.КПП)) <> 9 Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "неверно указан КПП!", Отказ, Заголовок);
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ)
	
	// Вычислим дату для заполнения измерения "МесяцНалоговогоПериода"
	КонецНП = Дата(ВыборкаПоШапкеДокумента.НалоговыйПериод, 12 , 31);
	Если Дата < КонецНП Тогда
		МесяцНалоговогоПериода = Дата;
	Иначе	
		МесяцНалоговогоПериода = КонецНП;
	КонецЕсли; 
	
	Если ВыборкаПоТЧ.ПереданоНаВзысканиеПоСтавке13 <> 0 Тогда
		Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
		// Свойства
		Движение.Период                 		= Дата;
		Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
		// Измерения
		Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
		Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
		Движение.МесяцНалоговогоПериода      	= МесяцНалоговогоПериода;
		// Ресурсы
		Движение.Налог							= ВыборкаПоТЧ.ПереданоНаВзысканиеПоСтавке13; 
		// Реквизиты
		Движение.ОбособленноеПодразделение  	= ВыборкаПоШапкеДокумента.Организация;
		Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.ПереданоНаВзыскание;
		
		Движение.КодПоОКАТО = ВыборкаПоТЧ.КодПоОКАТО;
		Движение.КПП = ВыборкаПоТЧ.КПП;
	КонецЕсли;
	
	Если ВыборкаПоТЧ.ПереданоНаВзысканиеПоСтавке09 <> 0 Тогда
		Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
		// Свойства
		Движение.Период                 		= Дата;
		Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
		// Измерения
		Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
		Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09;
		Движение.МесяцНалоговогоПериода      	= МесяцНалоговогоПериода;
		// Ресурсы
		Движение.Налог							= ВыборкаПоТЧ.ПереданоНаВзысканиеПоСтавке09; 
		// Реквизиты
		Движение.ОбособленноеПодразделение  	= ВыборкаПоШапкеДокумента.Организация;
		Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.ПереданоНаВзыскание;
		
		Движение.КодПоОКАТО = ВыборкаПоТЧ.КодПоОКАТО;
		Движение.КПП = ВыборкаПоТЧ.КПП;
	КонецЕсли;
	
	Если ВыборкаПоТЧ.ПереданоНаВзысканиеПоСтавке35 <> 0 Тогда
		Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
		// Свойства
		Движение.Период                 		= Дата;
		Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
		// Измерения
		Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
		Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35;
		Движение.МесяцНалоговогоПериода      	= МесяцНалоговогоПериода;
		// Ресурсы
		Движение.Налог							= ВыборкаПоТЧ.ПереданоНаВзысканиеПоСтавке35; 
		// Реквизиты
		Движение.ОбособленноеПодразделение 		= ВыборкаПоШапкеДокумента.Организация;
		Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.ПереданоНаВзыскание;
		
		Движение.КодПоОКАТО = ВыборкаПоТЧ.КодПоОКАТО;
		Движение.КПП = ВыборкаПоТЧ.КПП;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда
			
			// получим реквизиты табличной части
			ВыборкаПоРаботникиОрганизации = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникиОрганизации(ВыборкаПоШапкеДокумента,ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);
				
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации);
				
			КонецЦикла;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если Отказ тогда
		Возврат;
	КонецЕсли;	 
	
	// ФОРМИРОВАНИЕ ФАЙЛА СВЕДЕНИЙ
	
	// Зафиксируем суммы передаваемые на взыскание
	Движения.НДФЛРасчетыСБюджетом.Записать();
	
	#Если Клиент Тогда
		//При проведении файл формируем заново 
		ТекстФайла = СформироватьВыходнойФайл(Отказ);
	#Иначе
		// На сервере и во внешнем соединении документ проводить нельзя
		ТекстФайла = "";
		Отказ = Истина;
	#КонецЕсли
	
	Если Отказ тогда
		Возврат;
	КонецЕсли;	 
	
	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения.АрхивДанныхРегламентированнойОтчетности.Добавить();
	
	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Файл-пачка сведений о доходах физических лиц (формы 2-НДФЛ)";
	Запись.Данные = ТекстФайла; 
	
КонецПроцедуры	

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации,, "Физлицо");
	
	Если Не ОбменДанными.Загрузка Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение  Тогда
			ДляПередачиВИФНС = НазначениеСправки = Перечисления.ПорядокФормированияСправкиОДоходахФизлица.ДляПередачиВИФНС;
			ЭтоПодробныеСправки = НазначениеСправки <> Перечисления.ПорядокФормированияСправкиОДоходахФизлица.ФизлицуСводно;
			ЭтоЮрЛицо = Организация.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо;
			Для каждого СтрокаТЧ Из РаботникиОрганизации Цикл
				Если Не ДляПередачиВИФНС Тогда
					СтрокаТЧ.ПереданоНаВзыскание = 0;
				КонецЕсли;
				Если Не ЭтоПодробныеСправки Тогда
					СтрокаТЧ.Ставка = "";
					СтрокаТЧ.КодПоОКАТО = "";
					СтрокаТЧ.КПП = "";
				ИначеЕсли Не ЭтоЮрЛицо Тогда
					СтрокаТЧ.КодПоОКАТО = "";
					СтрокаТЧ.КПП = "";
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись	Тогда
			Если НалоговыйПериод = 0 Тогда // документ без налогового периода неконсистентен
				НалоговыйПериод = Макс(Год(Дата),2005);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


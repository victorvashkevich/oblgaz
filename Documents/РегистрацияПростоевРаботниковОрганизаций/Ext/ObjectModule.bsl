////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если Не Проведен Тогда
		РаботаСДиалогами.ВывестиПредупреждение("Документ можно распечатать только после расчета и проведения!");
		Возврат Неопределено;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "РасчетСреднегоЗаработка" Тогда
		Если ВидПростоя <> Перечисления.ВидыПростояРаботника.ПоВинеРаботодателя Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По документу не рассчитывался средний заработок!");
			Возврат Неопределено;
		КонецЕсли;
		
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
		ТабДокумент = ФормированиеПечатныхФорм.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаНачала, ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка, "с " + Формат(ДатаНачала,"ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания,"ДФ=dd.MM.yyyy"), Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (расчет среднего заработка)");
	КонецЕсли;
	
КонецФункции // Печать()

#КонецЕсли

// Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
// Параметры:
//	РассчитываемыеТаблицы	- структура из элементов, соответствующих табличным частям документа. 
//								Значение Истина для каждого из элементов структуры означает необходимость расчета 
//								соответствующей табличной части документа
//	РежимПерерасчета		- булево - признак вызов расчета при перерасчете документа
//
Процедура Рассчитать(РассчитываемыеТаблицы, РежимПерерасчета = Ложь, ВыборкаПоШапкеДокумента = Неопределено) Экспорт
	
	//Перед вызовом процедуры документ должнен быть записан, движения должны быть удалены 
	
	Отказ = Ложь;
	
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке("Расчет").Выбрать();
		// позиционируем выборку
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Если почасовой простой, то записываем движения в регистр ВнутрисменноеВремяРаботниковОрганизаций
	НаборЗаписейРабочееВремя = Движения.ВнутрисменноеВремяРаботниковОрганизаций;
	Если ВыборкаПоШапкеДокумента.ЯвляетсяПочасовымОтклонением И ВыборкаПоШапкеДокумента.ОплачиватьЧасов <> 0 Тогда
		Движение = НаборЗаписейРабочееВремя.Добавить();
		
		// Свойства
		Движение.Период								= ВыборкаПоШапкеДокумента.ДатаНачала;
		
		// Измерения
		Движение.Сотрудник							= ВыборкаПоШапкеДокумента.Сотрудник;
		Движение.Организация						= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ВидИспользованияРабочегоВремени	= ВыборкаПоШапкеДокумента.ВидИспользованияРабочегоВремени;
		
		// Ресурсы
		Движение.Часов								= ВыборкаПоШапкеДокумента.ОплачиватьЧасов;
		НаборЗаписейРабочееВремя.Записать();
	КонецЕсли;
	
	Отказ = Не ПроведениеРасчетов.РассчитатьДокументСреднегоЗаработка(ЭтотОбъект, РассчитываемыеТаблицы, ВыборкаПоШапкеДокумента, РежимПерерасчета);
	
	// Удаляем движения для режима интерактивного расчета
	Если Не РежимПерерасчета Тогда
		НаборЗаписейРабочееВремя.Очистить();
		НаборЗаписейРабочееВремя.Записать();
	КонецЕсли;
	
КонецПроцедуры // Рассчитать()

// Выполняет перерасчет по заданному списку физлиц
//
// Параметры:
//	Физлица - массив - ссылки на физлиц
//
// Возвращаемое значение
//	Нет.
//
Процедура Перерассчитать(Физлица = Неопределено) Экспорт

	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке("Расчет").Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	// Выполним полный перерасчет документа
	Рассчитать(Новый Структура("Начисления,РасчетСреднего",Истина,Истина), Истина, ВыборкаПоШапкеДокумента);
	
	// Зафиксируем данные табличных частей после расчета
	Записать();

	Движения.НДФЛСведенияОДоходах.Очистить();
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Очистить();
	Движения.ВнутрисменноеВремяРаботниковОрганизаций.Очистить();
	
	// Получение учетной политики по персоналу организации
	// ведется ли учет задолженности в разрезе периодов возникновения задолженности
	УчетЗадолженностиПоМесяцам = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
		
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетЗадолженностиПоМесяцам);
		Если ВыборкаПоНачислениям.ЯвляетсяПочасовымОтклонением Тогда
			ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ВнутрисменноеВремяРаботниковОрганизаций);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Набор Из Движения Цикл
		ТипНабораЗаписей = ТипЗнч(Набор);
		Если ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.НДФЛСведенияОДоходах") 
			Или ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.ВзаиморасчетыСРаботникамиОрганизаций") 
			Или ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.ВнутрисменноеВремяРаботниковОрганизаций") Тогда
			Набор.Записать();
		КонецЕсли;
	КонецЦикла;

	// Удалим записи перерасчета по которым выполнен перерасчет
	ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка);
	
КонецПроцедуры // Перерассчитать()

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.РегистрацияПростоевРаботниковОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//	Структура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("РасчетСреднегоЗаработка", "Расчет среднего заработка");
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Формирует записи регистра "ОсновныеНачисленияРаботниковОрганизаций" по данным шапки документа
//
Процедура СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборОсновныеНачисления) Экспорт 
	
	// Определяем вид учета времени (по дням/часам) для записи в рег-р основных начислений
	ВидУчетаВремени = ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоШапкеДокумента.СпособРасчета,ВыборкаПоШапкеДокумента.ВидВремени,ВыборкаПоШапкеДокумента.СуммированныйУчетРабочегоВремени);
	
	// таблица значений с колонками:  Месяц, ГрафикРаботы, ГрафикРаботыНорма
	ГрафикиСотрудникаПоМесяцам = ПолучитьГрафикРаботыСотрудника(ВыборкаПоШапкеДокумента); 
		
	ТекущаяДатаНачала = ДатаНачала;
	ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания);
	
	Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
		// строка движений
		Движение = НаборОсновныеНачисления.Добавить();
		
		// Свойства
		Движение.ПериодРегистрации			= ПериодРегистрации;
		Движение.ПериодДействияНачало		= НачалоДня(ТекущаяДатаНачала);
		Движение.ПериодДействияКонец		= КонецДня(ТекущаяДатаОкончания);
		Движение.ВидРасчета					= ВыборкаПоШапкеДокумента.ВидРасчета;
		
		// Измерения
		Движение.Сотрудник					= ВыборкаПоШапкеДокумента.Сотрудник;
		Движение.Физлицо					= ВыборкаПоШапкеДокумента.Физлицо;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

		// Реквизиты
		Движение.Показатель1				= ВыборкаПоШапкеДокумента.Показатель1;
		Движение.ПодразделениеОрганизации	= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		
		ДанныеОГрафиках = ГрафикиСотрудникаПоМесяцам.Найти(НачалоМесяца(ТекущаяДатаНачала),"Месяц");
		ЗаполнитьЗначенияСвойств(Движение,ДанныеОГрафиках); // ГрафикРаботы, ГрафикРаботыНорма 
		
		Движение.ВидУчетаВремени			= ВидУчетаВремени;
		Движение.Авторасчет					= Истина;
		Движение.ДатаНачалаСобытия			= ДатаНачала;
		
		Если ВыборкаПоШапкеДокумента.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойПоВинеРаботодателя 
			 Или ВыборкаПоШапкеДокумента.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПочасовойПростойПоВинеРаботодателя Тогда
			Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
			Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
		КонецЕсли;
		
		ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
		ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания);
		
	КонецЦикла;

КонецПроцедуры // СформироватьДвиженияПоНачислениям()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Выполняет проверку непрерывности интервалов начислений
Процедура ПроверитьНепрерывностьЗаписейНачислений(Отказ, Заголовок)
	
	ДлинаСуток = 86400; // в секундах
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ТНачислений = Начисления.Выгрузить();
	ТНачислений.Сортировать("ДатаНачала");
	
	ПредыдущаяДатаОкончания = '00010101';
	СтрокаНеПервая = Ложь;
	Для Каждого Строка ИЗ ТНачислений Цикл
		
		// Пропустим сторно записи
		Если Строка.Сторно ИЛИ 
			 Строка.ВидРасчета <> ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойПоВинеРаботодателя ИЛИ 
			 Строка.ВидРасчета <> ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПочасовойПростойПоВинеРаботодателя Тогда
			Продолжить;
		КонецЕсли;
		
		// если встретили не первую строку начислений
		Если СтрокаНеПервая Тогда
			// строка не первая
			Если Строка.ДатаНачала <> ПредыдущаяДатаОкончания + ДлинаСуток Тогда
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
				""" табл. части ""Начисления"": ";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "нарушено требование непрерывности записей начислений!", Отказ, Заголовок);
			КонецЕсли;
			
		Иначе
			СтрокаНеПервая = Истина;
			
		КонецЕсли;
		
		ПредыдущаяДатаОкончания = Строка.ДатаОкончания;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьНепрерывностьЗаписейНачислений()

// Формирует соответствие в котором находятся действующие графики сотрудника 
// на указанные даты
Функция ПолучитьГрафикРаботыСотрудника(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудник", ВыборкаПоШапкеДокумента.Сотрудник);
	Запрос.УстановитьПараметр("ГрафикРаботы", ВыборкаПоШапкеДокумента.ГрафикРаботы);
	Запрос.УстановитьПараметр("ГрафикПолногоРабочегоВремени", ВыборкаПоШапкеДокумента.ГрафикПолногоРабочегоВремени);
	
	НачМесяца = НачалоМесяца(ДатаНачала);
	ДатыПоМесяцамТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период
	|ПОМЕСТИТЬ ВТДатыПоМесяцам";
	Пока НачМесяца < НачалоМесяца(ДатаОкончания) Цикл
		НачМесяца = НачалоМесяца(КонецМесяца(НачМесяца) + 1);
		ДатыПоМесяцамТекст = ДатыПоМесяцамТекст +"
		|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	ДатыПоМесяцамТекст = ДатыПоМесяцамТекст + "
	|ИНДЕКСИРОВАТЬ ПО Период";
	
	Запрос.Текст = ДатыПоМесяцамТекст;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыДействия.Период КАК Период,
	|	ГрафикиРаботыПоВидамВремени.План
	|ПОМЕСТИТЬ ВТДанныеИндивидуальныхГрафиковИТабелей
	|ИЗ
	|	ВТДатыПоМесяцам КАК ПериодыДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &Сотрудник)
	|			И ПериодыДействия.Период = ГрафикиРаботыПоВидамВремени.Месяц
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.План ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыДействия.Период КАК Период
	|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафикиРаботы
	|ИЗ
	|	ВТДатыПоМесяцам КАК ПериодыДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО (СводныеИндивидуальныеГрафики.Сотрудник = &Сотрудник)
	|			И ПериодыДействия.Период = СводныеИндивидуальныеГрафики.Месяц
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыДействия.Период КАК Месяц,
	|	ВЫБОР
	|		КОГДА ИндивидуальныеГрафикиРаботы.Период ЕСТЬ NULL 
	|				И ТабелиУчетаВремениПоСотруднику.Период ЕСТЬ NULL 
	|			ТОГДА &ГрафикРаботы
	|		ИНАЧЕ &Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА ИндивидуальныеГрафикиРаботы.Период ЕСТЬ NULL 
	|				И СводныеИндивидуальныеГрафикиРаботы.Период ЕСТЬ NULL 
	|				И ТабелиУчетаВремениПоСотруднику.Период ЕСТЬ НЕ NULL 
	|			ТОГДА &ГрафикРаботы
	|		КОГДА &ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|				И (ИндивидуальныеГрафикиРаботы.Период ЕСТЬ НЕ NULL 
	|					ИЛИ СводныеИндивидуальныеГрафикиРаботы.Период ЕСТЬ НЕ NULL )
	|			ТОГДА &ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|	КОНЕЦ КАК ГрафикРаботыНорма
	|ИЗ
	|	ВТДатыПоМесяцам КАК ПериодыДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеИндивидуальныеГрафикиРаботы КАК СводныеИндивидуальныеГрафикиРаботы
	|		ПО ПериодыДействия.Период = СводныеИндивидуальныеГрафикиРаботы.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеИндивидуальныхГрафиковИТабелей КАК ИндивидуальныеГрафикиРаботы
	|		ПО ПериодыДействия.Период = ИндивидуальныеГрафикиРаботы.Период
	|			И (ИндивидуальныеГрафикиРаботы.План)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеИндивидуальныхГрафиковИТабелей КАК ТабелиУчетаВремениПоСотруднику
	|		ПО ПериодыДействия.Период = ТабелиУчетаВремениПоСотруднику.Период
	|			И ((НЕ ТабелиУчетаВремениПоСотруднику.План))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьГрафикРаботыСотрудника()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры:
//	Режим - строка, определяет, какие поля выборки используются в дальнейшем  
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим = "")

	Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала",				ДатаНачала);
	Запрос.УстановитьПараметр("Сотрудник",				Сотрудник);
	Запрос.УстановитьПараметр("СпособРегистрацииВремени",СпособРегистрацииВремени);
	Запрос.УстановитьПараметр("ДатаВалютногоУчета",		НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("РегламентВалюта",		Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачала
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачала
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачала
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|	КОНЕЦ КАК СуммированныйУчетРабочегоВремени,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачала
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ДлительностьРабочейНедели
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ДлительностьРабочейНедели
	|	КОНЕЦ КАК ДлительностьРабочейНедели,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачала
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ВидГрафика
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ВидГрафика
	|	КОНЕЦ КАК ВидГрафика,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачала
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикПолногоРабочегоВремени
	|ПОМЕСТИТЬ ВТДанныеОСотруднике
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачала, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних";
	Запрос.Выполнить();
	
	// подготовим данные о плановых начислениях
	Если Режим = "Расчет" И ВидПростоя <> Перечисления.ВидыПростояРаботника.ПоВинеРаботодателя Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаНачала
		|				И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ВЫБОР
		|					КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
		|						ТОГДА РазмерТарифныхСтавокСрезПоследних.Размер
		|					ИНАЧЕ ОсновноеНачисление.Показатель1Завершения
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
		|					ТОГДА РазмерТарифныхСтавокСрезПоследних.Размер
		|				ИНАЧЕ ОсновноеНачисление.Показатель1
		|			КОНЕЦ
		|	КОНЕЦ * ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаНачала
		|						И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА ВЫБОР
		|							КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
		|								ТОГДА РазмерТарифныхСтавокСрезПоследних.Валюта
		|							ИНАЧЕ ОсновноеНачисление.Валюта1Завершения
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
		|							ТОГДА РазмерТарифныхСтавокСрезПоследних.Валюта
		|						ИНАЧЕ ОсновноеНачисление.Валюта1
		|					КОНЕЦ
		|			КОНЕЦ В (&РегламентВалюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
		|	КОНЕЦ * ВЫБОР
		|		КОГДА ВЫБОР
		|					КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаНачала
		|							И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ОсновноеНачисление.ВидРасчетаЗавершения.СпособРасчета
		|					ИНАЧЕ ОсновноеНачисление.ВидРасчета.СпособРасчета
		|				КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
		|				И &СпособРегистрацииВремени = ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены)
		|			ТОГДА ВЫБОР
		|					КОГДА РаботникиОрганизацииСрезПоследних.ДлительностьРабочейНедели = 0
		|						ТОГДА 0
		|					ИНАЧЕ 1 / РаботникиОрганизацииСрезПоследних.ДлительностьРабочейНедели * ВЫБОР
		|							КОГДА РаботникиОрганизацииСрезПоследних.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Шестидневка)
		|								ТОГДА 6
		|							ИНАЧЕ 5
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ТарифнаяСтавка,
		|	ВЫБОР
		|		КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаНачала
		|				И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ОсновноеНачисление.ВидРасчетаЗавершения.СпособРасчета
		|		ИНАЧЕ ОсновноеНачисление.ВидРасчета.СпособРасчета
		|	КОНЕЦ КАК СпособРасчета
		|ПОМЕСТИТЬ ВТДанныеПлановыхНачислений
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
		|			&ДатаНачала,
		|			Сотрудник = &Сотрудник
		|				И ВидРасчетаИзмерение.Код ЕСТЬ NULL ) КАК ОсновноеНачисление
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОСотруднике КАК РаботникиОрганизацииСрезПоследних
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ДатаНачала, ) КАК РазмерТарифныхСтавокСрезПоследних
		|		ПО (ВЫБОР
		|				КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаНачала
		|						И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА ОсновноеНачисление.ТарифныйРазряд1Завершения
		|				ИНАЧЕ ОсновноеНачисление.ТарифныйРазряд1
		|			КОНЕЦ = РазмерТарифныхСтавокСрезПоследних.ТарифныйРазряд)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
		|		ПО (Валюты.Валюта = ВЫБОР
		|				КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаНачала
		|						И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА ВЫБОР
		|							КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
		|								ТОГДА РазмерТарифныхСтавокСрезПоследних.Валюта
		|							ИНАЧЕ ОсновноеНачисление.Валюта1Завершения
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
		|							ТОГДА РазмерТарифныхСтавокСрезПоследних.Валюта
		|						ИНАЧЕ ОсновноеНачисление.Валюта1
		|					КОНЕЦ
		|			КОНЕЦ)
		|			И (Валюты.Период = &ДатаВалютногоУчета)";
	Иначе  // тарифная ставка не требуется 
		Запрос.Текст =
		"ВЫБРАТЬ
		|	0 КАК ТарифнаяСтавка,
		|	ВЫБОР
		|		КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаНачала
		|				И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ОсновноеНачисление.ВидРасчетаЗавершения.СпособРасчета
		|		ИНАЧЕ ОсновноеНачисление.ВидРасчета.СпособРасчета
		|	КОНЕЦ КАК СпособРасчета
		|ПОМЕСТИТЬ ВТДанныеПлановыхНачислений
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
		|			&ДатаНачала,
		|			Сотрудник = &Сотрудник
		|				И ВидРасчетаИзмерение.Код ЕСТЬ NULL ) КАК ОсновноеНачисление";
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрацияПростоевВОрганизации.Дата,
	|	РегистрацияПростоевВОрганизации.ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА РегистрацияПростоевВОрганизации.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РегистрацияПростоевВОрганизации.Организация
	|		ИНАЧЕ РегистрацияПростоевВОрганизации.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА РегистрацияПростоевВОрганизации.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РегистрацияПростоевВОрганизации.Организация
	|		ИНАЧЕ РегистрацияПростоевВОрганизации.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	РегистрацияПростоевВОрганизации.Организация КАК ОбособленноеПодразделение,
	|	РегистрацияПростоевВОрганизации.Ссылка,
	|	РегистрацияПростоевВОрганизации.Сотрудник,
	|	РегистрацияПростоевВОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	РегистрацияПростоевВОрганизации.ВидПростоя,
	|	РегистрацияПростоевВОрганизации.ДатаНачала,
	|	РегистрацияПростоевВОрганизации.ДатаНачала КАК ДатаНачалаСобытия,
	|	РегистрацияПростоевВОрганизации.ДатаОкончания,
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации,
	|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикПолногоРабочегоВремени,
	|	ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	ПараметрыВидаРасчета.Ссылка КАК ВидРасчета,
	|	ПараметрыВидаРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|	ПараметрыВидаРасчета.ВидВремени КАК ВидВремени,
	|	ПараметрыВидаРасчета.СпособРасчета КАК СпособРасчета,
	|	ВЫБОР
	|		КОГДА РегистрацияПростоевВОрганизации.СпособРегистрацииВремени = ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяПочасовымОтклонением,
	|	ВЫБОР
	|		КОГДА РегистрацияПростоевВОрганизации.ВидПростоя = ЗНАЧЕНИЕ(Перечисление.ВидыПростояРаботника.ПоВинеРаботодателя)
	|			ТОГДА 100 * 2 / 3
	|		ИНАЧЕ ВЫРАЗИТЬ(ОсновноеНачисление.ТарифнаяСтавка * 2 / 3 КАК ЧИСЛО(15,2))
	|	КОНЕЦ  КАК Показатель1,
	|	ВЫБОР
	|		КОГДА ПараметрыВидаРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору)
	|			ТОГДА ПараметрыВидаРасчета.ПериодРасчетаСреднегоЗаработка
	|		ИНАЧЕ 12
	|	КОНЕЦ КАК ПериодРасчетаСреднегоЗаработка,
	|	ВЫБОР
	|		КОГДА РегистрацияПростоевВОрганизации.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РегистрацияПростоевВОрганизации.ДатаНачала, МЕСЯЦ), МЕСЯЦ, -ВЫБОР
	|					КОГДА ПараметрыВидаРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору)
	|						ТОГДА ПараметрыВидаРасчета.ПериодРасчетаСреднегоЗаработка
	|					ИНАЧЕ 12
	|				КОНЕЦ)
	|	КОНЕЦ КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	ВЫБОР
	|		КОГДА РегистрацияПростоевВОрганизации.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РегистрацияПростоевВОрганизации.ДатаНачала, МЕСЯЦ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ВЫБОР
	|		КОГДА РегистрацияПростоевВОрганизации.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РегистрацияПростоевВОрганизации.ДатаНачала, МЕСЯЦ), МЕСЯЦ, -ВЫБОР
	|					КОГДА ПараметрыВидаРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору)
	|						ТОГДА ПараметрыВидаРасчета.ПериодРасчетаСреднегоЗаработка
	|					ИНАЧЕ 12
	|				КОНЕЦ)
	|	КОНЕЦ КАК ДатаНачалаРасчетногоПериода,
	|	ВЫБОР
	|		КОГДА РегистрацияПростоевВОрганизации.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РегистрацияПростоевВОрганизации.ДатаНачала, МЕСЯЦ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ДатаОкончанияРасчетногоПериода,
	|	РегистрацияПростоевВОрганизации.ОплачиватьЧасов КАК ОплачиватьЧасов,
	|	РегистрацияПростоевВОрганизации.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	РегистрацияПростоевВОрганизации.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	РегистрацияПростоевВОрганизации.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ВЫБОР
	|		КОГДА РегистрацияПростоевВОрганизации.Сотрудник.Организация = ВЫБОР
	|				КОГДА РегистрацияПростоевВОрганизации.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА РегистрацияПростоевВОрганизации.Организация
	|				ИНАЧЕ РегистрацияПростоевВОрганизации.Организация.ГоловнаяОрганизация
	|			КОНЕЦ
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА РегистрацияПростоевВОрганизации.Дата < РегистрацияПростоевВОрганизации.ПериодРегистрации
	|			ТОГДА РегистрацияПростоевВОрганизации.ПериодРегистрации
	|		КОГДА РегистрацияПростоевВОрганизации.Дата > КОНЕЦПЕРИОДА(РегистрацияПростоевВОрганизации.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА КОНЕЦПЕРИОДА(РегистрацияПростоевВОрганизации.ПериодРегистрации, МЕСЯЦ)
	|		ИНАЧЕ РегистрацияПростоевВОрганизации.Дата
	|	КОНЕЦ КАК ПериодРегистрацииДополнительныхНачислений
	|ИЗ
	|	Документ.РегистрацияПростоевРаботниковОрганизаций КАК РегистрацияПростоевВОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОСотруднике КАК РаботникиОрганизацииСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПлановыхНачислений КАК ОсновноеНачисление
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ПараметрыВидаРасчета
	|		ПО (ПараметрыВидаРасчета.Ссылка = ВЫБОР
	|				КОГДА РегистрацияПростоевВОрганизации.СпособРегистрацииВремени = ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены)
	|					ТОГДА ВЫБОР
	|							КОГДА РегистрацияПростоевВОрганизации.ВидПростоя = ЗНАЧЕНИЕ(Перечисление.ВидыПростояРаботника.ПоВинеРаботодателя)
	|								ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПочасовойПростойПоВинеРаботодателя)
	|							КОГДА ОсновноеНачисление.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке))
	|								ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПочасовойПростойТарифЧасовой)
	|							КОГДА ОсновноеНачисление.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням))
	|								ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПочасовойПростойОкладПоЧасам)
	|							ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА РегистрацияПростоевВОрганизации.ВидПростоя = ЗНАЧЕНИЕ(Перечисление.ВидыПростояРаботника.ПоВинеРаботодателя)
	|							ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойПоВинеРаботодателя)
	|						КОГДА ОсновноеНачисление.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке))
	|							ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойТарифЧасовой)
	|						КОГДА ОсновноеНачисление.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|							ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойТарифДневной)
	|						КОГДА ОсновноеНачисление.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
	|							ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойОкладПоЧасам)
	|						КОГДА ОсновноеНачисление.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням)
	|							ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойОкладПоДням)
	|						ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|					КОНЕЦ
	|			КОНЕЦ)
	|ГДЕ
	|	РегистрацияПростоевВОрганизации.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части Начисления
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	СписокСтруктурныхПодразделений = ПроцедурыУправленияПерсоналом.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",	СписокСтруктурныхПодразделений);
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала",			ДатаНачала);
	Запрос.УстановитьПараметр("Сотрудник",			Сотрудник);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ГоловнаяОрганизация);
	КодОплатыТрудаПоНДФЛ = Новый Массив;
	КодОплатыТрудаПоНДФЛ.Добавить(Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию);
	//КодОплатыТрудаПоНДФЛ.Добавить(Справочники.ДоходыНДФЛ.Код2012);
	Запрос.УстановитьПараметр("КодОплатыТрудаПоНДФЛ", КодОплатыТрудаПоНДФЛ);
	
	ВидУчетаВремени = ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоШапкеДокумента.СпособРасчета,ВыборкаПоШапкеДокумента.ВидВремени,ВыборкаПоШапкеДокумента.СуммированныйУчетРабочегоВремени);
	Запрос.УстановитьПараметр("ВидУчетаВремени", ВидУчетаВремени);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиДокумента.Ссылка,
	|	СтрокиДокумента.НомерСтроки,
	|	НАЧАЛОПЕРИОДА(СтрокиДокумента.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
	|	СтрокиДокумента.ДатаНачала,
	|	СтрокиДокумента.ДатаОкончания,
	|	СтрокиДокумента.ВидРасчета,
	|	СтрокиДокумента.Показатель1,
	|	СтрокиДокумента.Показатель2,
	|	СтрокиДокумента.Показатель3,
	|	СтрокиДокумента.Показатель4,
	|	СтрокиДокумента.Показатель5,
	|	СтрокиДокумента.Показатель6,
	|	СтрокиДокумента.Результат,
	|	СтрокиДокумента.ПодразделениеОрганизации,
	|	СтрокиДокумента.НормаДней,
	|	СтрокиДокумента.НормаЧасов,
	|	СтрокиДокумента.НормаДнейПоПятидневке,
	|	СтрокиДокумента.ОтработаноДней,
	|	СтрокиДокумента.ОтработаноЧасов,
	|	СтрокиДокумента.ОтработаноДнейПоПятидневке,
	|	СтрокиДокумента.ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиДокумента.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	СтрокиДокумента.ДополнительныеДанные,
	|	СтрокиДокумента.ДатаНачалаСобытия,
	|	СтрокиДокумента.Сторно,
	|	СтрокиДокумента.Авторасчет,
	|	СтрокиДокумента.ОплаченоДнейЧасов,
	|	СтрокиДокумента.ОтработаноЧасовПоПятидневке,
	|	СтрокиДокумента.НормаЧасовПоПятидневке,
	|	СтрокиДокумента.СторнируемыйДокумент,
	|	СтрокиДокумента.ЧислоМесяцев
	|ПОМЕСТИТЬ ВТСтрокиНачислений
	|ИЗ
	|	Документ.РегистрацияПростоевРаботниковОрганизаций.Начисления КАК СтрокиДокумента
	|ГДЕ
	|	СтрокиДокумента.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодДействия";
	Запрос.Выполнить();
	
	// ВТГрафикиСотрудников
	//		таблица содержит номера строк документа с данными о графике указанного
	//		в этой строке сотрудника из рег-ра сведений РаботникиОрганизации
	// 
	//	Поля:
	//		НомерСтроки
	//      ГрафикРаботы
	//      ГрафикПолногоРабочегоВремени
	//      СуммированныйУчетРабочегоВремени
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоследниеДаты.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикПолногоРабочегоВремени,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|	КОНЕЦ КАК СуммированныйУчетРабочегоВремени
	|ПОМЕСТИТЬ ВТГрафикиСотрудников
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|		СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|		СтрокиНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия
	|	ИЗ
	|		ВТСтрокиНачислений КАК СтрокиНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ПО СтрокиНачисления.ДатаНачалаСобытия >= РаботникиОрганизации.Период
	|				И &Сотрудник = РаботникиОрганизации.Сотрудник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СтрокиНачисления.НомерСтроки,
	|		СтрокиНачисления.ДатаНачалаСобытия) КАК ПоследниеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ПоследниеДаты.МаксПериод = РаботникиОрганизации.Период
	|			И &Сотрудник = РаботникиОрганизации.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	// ВТДанныеИндивидуальныхГрафиковИТабелей
	//		таблица содержит номера строк документа с сотрудниками, для которых введены 
	//		подробные документы использования времени: инд.графики и табели
	// 
	//	Поля:
	//		НомерСтроки
	//      План
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	ГрафикиРаботыПоВидамВремени.План КАК План
	|ПОМЕСТИТЬ ВТДанныеИндивидуальныхГрафиковИТабелей
	|ИЗ
	|	ВТСтрокиНачислений КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО &Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И СтрокиНачисления.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	План";
	Запрос.Выполнить();
	
	// СводныеИндивидуальныеГрафикиРаботы
	//		таблица содержит номера строк документа с сотрудниками, для которых введены сводные 
	//		данные об их графике
	// 
	//	Поля:
	//		НомерСтроки
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокРаботников.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафикиРаботы
	|ИЗ
	|	ВТСтрокиНачислений КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО &Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И СписокРаботников.ПериодДействия = СводныеИндивидуальныеГрафики.Месяц
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	СтрокиНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	СтрокиНачисления.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.КодДоходаНДФЛ В (&КодОплатыТрудаПоНДФЛ)
	|			ТОГДА СтрокиНачисления.ДатаНачала
	|		ИНАЧЕ СтрокиНачисления.Ссылка.ПериодРегистрации
	|	КОНЕЦ КАК МесяцНалоговогоПериода,
	|	СтрокиНачисления.ДатаНачала,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ДатаОкончания,
	|	СтрокиНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	СтрокиНачисления.ДатаНачала КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	&ВидУчетаВремени КАК ВидУчетаВремени,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ДополнительныеДанные,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.ОтработаноДнейПоПятидневке,
	|	СтрокиНачисления.ОтработаноЧасовПоПятидневке,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.НормаДнейПоПятидневке,
	|	СтрокиНачисления.НормаЧасовПоПятидневке,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ВЫБОР
	|		КОГДА ГрафикРаботыПоСотруднику.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА РаботникиОрганизации.ГрафикРаботы
	|		ИНАЧЕ СтрокиНачисления.Ссылка.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА ТабелиУчетаВремениПоСотруднику.НомерСтроки ЕСТЬ НЕ NULL 
	|				И ИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ NULL 
	|				И СводныеИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА РаботникиОрганизации.ГрафикРаботы
	|		КОГДА РаботникиОрганизации.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|				И (ИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ НЕ NULL 
	|					ИЛИ СводныеИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ НЕ NULL )
	|			ТОГДА РаботникиОрганизации.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикРаботыНорма,
	|	ЕСТЬNULL(РаботникиОрганизации.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.ДатаНачалаСобытия,
	|	СтрокиНачисления.Сторно,
	|	ВЫБОР
	|		КОГДА (НЕ СтрокиНачисления.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	СтрокиНачисления.Авторасчет,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяПочасовымОтклонением,
	|	СтрокиНачисления.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления,
	|	СтрокиНачисления.ЧислоМесяцев,
	|	СтрокиНачисления.Ссылка.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТСтрокиНачислений КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСотрудников КАК РаботникиОрганизации
	|		ПО СтрокиНачисления.НомерСтроки = РаботникиОрганизации.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК СтрокиНачисления) КАК ГрафикРаботыПоСотруднику
	|		ПО СтрокиНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК СтрокиНачисления
	|		ГДЕ
	|			(НЕ СтрокиНачисления.План)) КАК ТабелиУчетаВремениПоСотруднику
	|		ПО СтрокиНачисления.НомерСтроки = ТабелиУчетаВремениПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК СтрокиНачисления
	|		ГДЕ
	|			СтрокиНачисления.План) КАК ИндивидуальныеГрафикиРаботы
	|		ПО СтрокиНачисления.НомерСтроки = ИндивидуальныеГрафикиРаботы.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеИндивидуальныеГрафикиРаботы КАК СводныеИндивидуальныеГрафикиРаботы
	|		ПО СтрокиНачисления.НомерСтроки = СводныеИндивидуальныеГрафикиРаботы.НомерСтроки
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

// Формирует запрос по таблице "РасчетСреднего" документа
//
// Параметры:
//	Режим	- режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоРасчетСреднего()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокаРасчетСреднего.НомерСтроки,
	|	СтрокаРасчетСреднего.ВидРасчета,
	|	СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокаРасчетСреднего.КоэффициентИндексации,
	|	СтрокаРасчетСреднего.Результат,
	|	СтрокаРасчетСреднего.ОтработаноПоПятидневке,
	|	СтрокаРасчетСреднего.НормаПоПятидневке,
	|	СтрокаРасчетСреднего.ОтработаноДней,
	|	СтрокаРасчетСреднего.ОтработаноЧасов,
	|	СтрокаРасчетСреднего.ЧислоМесяцев
	|ИЗ
	|	Документ.РегистрацияПростоевРаботниковОрганизаций.РасчетСреднего КАК СтрокаРасчетСреднего
	|ГДЕ
	|	СтрокаРасчетСреднего.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРасчетСреднего()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период регистрации!", Отказ, Заголовок);
	КонецЕсли;

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОбособленноеПодразделение) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, по которой выполняется начисление!", Отказ, Заголовок);
	КонецЕсли;

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ВидПростоя
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидПростоя) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан вид простоя!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаНачала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата начала оплачиваемого события!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ЯвляетсяПочасовымОтклонением Тогда
		// ОплачиватьЧасов
		Если ВыборкаПоШапкеДокумента.ОплачиватьЧасов = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указано количество часов простоя!", Отказ, Заголовок);
		ИначеЕсли ВыборкаПоШапкеДокумента.ОплачиватьЧасов > 24 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Регистрируемое в один день количество часов простоя не может превышать 24!", Отказ, Заголовок);
		КонецЕсли;
	Иначе
		// ДатаОкончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указана дата окончания оплачиваемого события!", Отказ, Заголовок);
		ИначеЕсли ВыборкаПоШапкеДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачала Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Дата окончания оплачиваемого события не должна быть меньше даты начала!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) И ВыборкаПоСтрокамДокумента.ОсновныеНачисления Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
		
	Иначе
		// Дата окончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
			
		Иначе
			Если ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоСтрокамДокумента.ДатаНачала Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ, Заголовок);
				
			ИначеЕсли ВыборкаПоСтрокамДокумента.ОсновныеНачисления Тогда
				Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаОкончания) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	// Дата начала события
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия) И ВыборкаПоСтрокамДокумента.ОсновныеНачисления Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала события!", Отказ, Заголовок);
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение организации!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ВыборкаПоСтрокамДокумента.Сторно И ВыборкаПоСтрокамДокумента.ОсновныеНачисления И (ВыборкаПоСтрокамДокумента.ДатаНачала < ВыборкаПоШапкеДокумента.ДатаНачала ИЛИ ВыборкаПоСтрокамДокумента.ДатаНачала > КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания) 
		ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачала ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания > КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания)) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "период начисления выходит за временные границы оплачиваемого события!", Ложь, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры:
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Расчет среднего"": ";
	
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала базового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ, Заголовок);
		
	// Дата окончания базового периода
	ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ, Заголовок);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры:
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборОсновныеНачисления)
	
	СуммаРесурсов = ВыборкаПоСтрокамДокумента.Результат 
			+ ВыборкаПоСтрокамДокумента.ОтработаноДней + ВыборкаПоСтрокамДокумента.ОтработаноЧасов 
			+ ВыборкаПоСтрокамДокумента.ОтработаноПоПятидневке + ВыборкаПоСтрокамДокумента.НормаПоПятидневке;
		
	Если СуммаРесурсов <> 0 Тогда
		
		Движение = НаборОсновныеНачисления.Добавить();
		
		СтрокаСвойствИзДокумента = "ПериодРегистрации,Сотрудник,ФизЛицо,Организация,ДатаНачалаСобытия,СпособРасчета,"
										+ "ДатаНачалаРасчетногоПериода,ДатаОкончанияРасчетногоПериода,ПериодРасчетаСреднегоЗаработка";
		СтрокаСвойствИзСтрокиДокумента = "БазовыйПериодНачало,БазовыйПериодКонец,ВидРасчета,Результат," 
										+ "ОтработаноПоПятидневке,НормаПоПятидневке,ОтработаноДней,ОтработаноЧасов,"
										+ "КоэффициентИндексации,ЧислоМесяцев";
		
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);

	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРасчетаСреднего()

// По выборке из результатов запроса по шапке документу формируем движения по регистру
//
// Параметры:
//	ВыборкаПоШапкеДокумента		- спозиционированная на определеной строке выборка 
//								  из результата запроса к шапке документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Если ВыборкаПоШапкеДокумента.ЯвляетсяПочасовымОтклонением И ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов <> 0 Тогда
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период								= ВыборкаПоСтрокамДокумента.ДатаНачала;
		
		// Измерения
		Движение.Сотрудник							= ВыборкаПоШапкеДокумента.Сотрудник;
		Движение.Организация						= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ВидИспользованияРабочегоВремени	= ВыборкаПоШапкеДокумента.ВидИспользованияРабочегоВремени;
		
		// Ресурсы
		Движение.Часов								= ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРабочегоВремени()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//	ВыборкаПоШапкеДокумента			- выборка из результата запроса по шапке документа
//	ВыборкаПоТЧ						- выборка из результата запроса по т.ч. документа
//	УчетЗадолженностиПоМесяцам		- булево, учетная политика ведения расчетов с работниками 
//										в разрезе периодов образования задолженности
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, УчетЗадолженностиПоМесяцам)
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.КодДоходаНДФЛ) Тогда
		
		Движение = Движения.НДФЛСведенияОДоходах.Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоТЧ.МесяцНалоговогоПериода;
		
		// Измерения
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ФизЛицо					= ВыборкаПоШапкеДокумента.ФизЛицо;
		Движение.КодДохода					= ВыборкаПоТЧ.КодДоходаНДФЛ;
		Движение.ПериодРегистрации			= НачалоМесяца(ПериодРегистрации);
		
		// Ресурсы
		Движение.СуммаДохода				= ВыборкаПоТЧ.Результат; 
		
		// Реквизиты
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.ИсчисленоИзЗарплаты		= Истина;
		Движение.ПодразделениеОрганизации	= ВыборкаПоТЧ.ПодразделениеОрганизации;
		Движение.ВидРасчета = ВыборкаПоТЧ.ВидРасчета; 
		
	КонецЕсли;
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
	
	// Свойства
	Движение.Период					= КонецМесяца(ПериодРегистрации);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	// Измерения
	Движение.Организация			= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.ФизЛицо				= ВыборкаПоШапкеДокумента.ФизЛицо;
	//vvv комментируем
	//Если УчетЗадолженностиПоМесяцам Тогда
		Движение.ПериодВзаиморасчетов	= ПериодРегистрации;
	//КонецЕсли;
	
	// Ресурсы
	Движение.СуммаВзаиморасчетов	= ВыборкаПоТЧ.Результат;
	
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	ПерерассчитываемыйДокумент = Неопределено
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверим непрерывночть следования записей начислений
	ПроверитьНепрерывностьЗаписейНачислений(Отказ, Заголовок);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			// Получение учетной политики по персоналу организации
			// ведется ли учет задолженности в разрезе периодов возникновения задолженности
			УчетЗадолженностиПоМесяцам = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
		
			// получим реквизиты табличной части Начисления
			РезультатЗапросаНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента);
			ВыборкаПоНачислениям = РезультатЗапросаНачислениям.Выбрать();
			
			Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
			Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьСписаниеФактическогоОтпуска = Истина;

			Пока ВыборкаПоНачислениям.Следующий() Цикл

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ);

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					Если ВыборкаПоНачислениям.ОсновныеНачисления Тогда
						ПроведениеРасчетов.ДобавитьСтрокуОсновныхНачислений(Движения.ОсновныеНачисленияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
					Иначе
						ПроведениеРасчетов.ДобавитьСтрокуДополнительныхНачислений(Движения.ДополнительныеНачисленияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
					КонецЕсли;
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетЗадолженностиПоМесяцам);
					// Движения по регистру ВнутрисменноеВремяРаботниковОрганизаций
					Если ВыборкаПоНачислениям.ЯвляетсяПочасовымОтклонением Тогда
						ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ВнутрисменноеВремяРаботниковОрганизаций);
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

			// получим реквизиты табличной части РасчетСреднего 
			РезультатЗапросаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего();
			ВыборкаПоРасчетСреднего = РезультатЗапросаПоРасчетСреднего.Выбрать();
			
			Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ, Заголовок);
				
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Движения.РасчетСреднегоЗаработка);
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ Отказ Тогда
				
				// выполним удаление перерасчетов исправленного документа
				Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
					ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка, Истина); // Только по исправленным документам
				КонецЕсли;
			
				Для Каждого Набор Из Движения Цикл
					ТипНабораЗаписей = ТипЗнч(Набор);
					Если ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") 
						Или ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда
						Набор.Записать();
					КонецЕсли;
				КонецЦикла;
				ПроведениеРасчетов.ОбработатьТаблицуПерерасчетов(Ссылка);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
    Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены Тогда
		ДатаОкончания = ДатаНачала;
	Иначе 
		ОплачиватьЧасов = 0;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ



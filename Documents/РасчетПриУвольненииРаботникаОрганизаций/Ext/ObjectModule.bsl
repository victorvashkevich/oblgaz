////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;
Перем мУдержаниеЗаОтпускУменьшаетНалоги;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой "Т-61",
//
// Возвращаемое значение:
//	Табличный документ	- печатная форма
//
Функция ПечатьТ61() Экспорт
	
	// тексты запросов 
	
	РасчетСреднегоЗаработкаТекст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА 1
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ПорядокЗаписей,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|				ТОГДА РасчетСреднегоЗаработка.ОтработаноДней
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоДнейРасчетногоПериода,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|				ТОГДА РасчетСреднегоЗаработка.ОтработаноЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоЧасовРасчетногоПериода,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|				ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|						КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|							ТОГДА 1
	|						ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|					КОНЕЦ
	|			КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоПремиям)
	|						ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|								КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|									ТОГДА 1
	|								ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|							КОНЕЦ
	|					КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоФиксПремиям)
	|						ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|								КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|									ТОГДА 1
	|								ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|							КОНЕЦ
	|					ИНАЧЕ РасчетСреднегоЗаработка.Результат
	|				КОНЕЦ * ВЫБОР
	|					КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев > РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка
	|						ТОГДА РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка / РасчетСреднегоЗаработка.ЧислоМесяцев
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ВсегоУчтено,
	|	НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.МесяцВыборки, МЕСЯЦ) КАК МесяцРасчетногоПериода,
	|	НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодКонец, МЕСЯЦ) КАК БазовыйПериодКонец,
	|	СУММА(РасчетСреднегоЗаработка.Результат) КАК Результат,
	|	РасчетСреднегоЗаработка.ЧислоМесяцев КАК МесяцевПремии,
	|	РасчетСреднегоЗаработка.КоэффициентИндексации КАК КоэффициентИндексации,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА 0
	|		ИНАЧЕ РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка
	|	КОНЕЦ КАК ПериодРасчетаСреднегоЗаработка
	|ИЗ
	|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|ГДЕ
	|	РасчетСреднегоЗаработка.Регистратор = &Регистратор
	|	И РасчетСреднегоЗаработка.СпособРасчета = &СпособРасчета
	|	И (РасчетСреднегоЗаработка.Результат <> 0
	|			ИЛИ РасчетСреднегоЗаработка.ОтработаноДней <> 0
	|			ИЛИ РасчетСреднегоЗаработка.ОтработаноЧасов <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодКонец, МЕСЯЦ),
	|	РасчетСреднегоЗаработка.ЧислоМесяцев,
	|	РасчетСреднегоЗаработка.КоэффициентИндексации,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА 0
	|		ИНАЧЕ РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.МесяцВыборки, МЕСЯЦ),
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА 1
	|		ИНАЧЕ 3
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	МесяцРасчетногоПериода,
	|	ПорядокЗаписей,
	|	МесяцевПремии,
	|	КоэффициентИндексации
	|ИТОГИ
	|	СУММА(ВсегоДнейРасчетногоПериода),
	|	СУММА(ВсегоЧасовРасчетногоПериода),
	|	СУММА(ВсегоУчтено),
	|	СУММА(Результат)
	|ПО
	|	ОБЩИЕ,
	|	МесяцРасчетногоПериода";
	
	НачисленияТекст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Начисления.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДни), ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневка))
	|					ТОГДА Начисления.Результат
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК НачисленоКомпенсации,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Начисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие)
	|					ТОГДА Начисления.Результат
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК НачисленоВыходноеПособие,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Начисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.СохраняемыйЗаработокНаВремяТрудоустройства)
	|					ТОГДА Начисления.Результат
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК НачисленСохраняемыйЗаработок,
	|	ЕСТЬNULL(СУММА(Начисления.Результат), 0) КАК ВсегоВыплат
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Начисления
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|	И (НЕ Начисления.Сторно)";
	//|	И (НЕ Начисления.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни), ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка)))";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетПриУвольненииРаботникаОрганизаций_Т61";
	
	Макет = ПолучитьМакет("Т_61");
	СекцияРасчетСреднего = Макет.ПолучитьОбласть("РасчетСреднего");
	РасчетСреднегоСтрока = Макет.ПолучитьОбласть("РасчетСреднегоСтрока");
	РасчетСреднегоШапка = Макет.ПолучитьОбласть("РасчетСреднегоШапка");

	//СекцияДополнительнаяСтрокаЗаработка = Макет.ПолучитьОбласть("ДополнительнаяСтрокаЗаработка");
	СекцияЛицеваяСторона = Макет.ПолучитьОбласть("ЛицеваяСторона");
	СекцияРасчетСреднегоИтого = Макет.ПолучитьОбласть("РасчетСреднегоИтого");
	СекцияПодвал = Макет.ПолучитьОбласть("Подвал");

	Запрос = Новый Запрос;
	
	ФиксированныеПремии = Новый Массив(4);
	ФиксированныеПремии[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
		
	ПоПремиям = Новый Массив(3);
	ПоПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
		
	ПоФиксПремиямНеИндексируемые = Новый Массив(3);
	
	ОсновнойЗаработок = Новый Массив(2);
	ОсновнойЗаработок[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
	ОсновнойЗаработок[1] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск;


	
	Индексируемые = Новый Массив(7);
	Индексируемые[3] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
	Индексируемые[4] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
	Индексируемые[5] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
	Индексируемые[6] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
	
	Запрос.УстановитьПараметр("Регистратор",			Ссылка);
	Запрос.УстановитьПараметр("СпособРасчета",			?(ПорядокРасчетаОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке));
	Запрос.УстановитьПараметр("Индексируемые",			Индексируемые);
	Запрос.УстановитьПараметр("ОсновнойЗаработок",		ОсновнойЗаработок);
	Запрос.УстановитьПараметр("ПоФиксПремиям",			ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	Запрос.УстановитьПараметр("ПоПремиям",				ПоПремиям);
	Запрос.УстановитьПараметр("ФиксированныеПремии",	ФиксированныеПремии);
	Запрос.УстановитьПараметр("ПоФиксПремиямНеИндексируемые", ФиксированныеПремии);
	
	// ВЫВОД ДАННЫХ В ОТЧЕТ
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапкеДляПечати().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	// вывод лицевой стороны
	СекцияЛицеваяСторона.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
	
	ТабДокумент.Вывести(СекцияЛицеваяСторона);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Выборка начисленных сумм 
	
	СекцияРасчетСреднего.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
	
	НачисленоКомпенсации = 0;
	ВсегоВыплат = 0;
	Запрос.Текст = НачисленияТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НачисленоКомпенсации = Выборка.НачисленоКомпенсации;
		ВсегоВыплат = Выборка.ВсегоВыплат;
		СекцияПодвал.Параметры.Заполнить(Выборка);
		СекцияРасчетСреднего.Параметры.Заполнить(Выборка);
	КонецЕсли;
	
	// удержания за неиспользованный отпуск
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Удержания.Результат), 0) КАК Результат
	|ИЗ
	|	(ВЫБРАТЬ
	|		Удержания.Результат КАК Результат
	|	ИЗ
	|		РегистрРасчета.УдержанияРаботниковОрганизаций КАК Удержания
	|	ГДЕ
	|		Удержания.Регистратор = &Регистратор
	|		И (НЕ Удержания.Сторно)) КАК Удержания";
	
	УдержаниеЗаНеиспользованныйОтпуск = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	    УдержаниеЗаНеиспользованныйОтпуск = Выборка.Результат;
	КонецЕсли;
	Если УдержаниеЗаНеиспользованныйОтпуск <> 0 Тогда
		СекцияРасчетСреднего.Параметры.НачисленоКомпенсации = УдержаниеЗаНеиспользованныйОтпуск;
	КонецЕсли;
	
	// Вывод сведений о порядке расчета среднего заработка
	
	// по окончательным данным проведенного документа
	// собираем итоговые данные и рассчитываем средний заработок
	
	Запрос.Текст = РасчетСреднегоЗаработкаТекст;
	ВыборкаСреднегоЗаработка = Запрос.Выполнить().Выбрать();
	РезультатСреднегоЗаработка = Запрос.Выполнить().Выгрузить();

	ТабДокумент.Вывести(РасчетСреднегоШапка);
	
	ВсегоУчтено = 0;
	ВсегоСумма = 0;
	
	Пока ВыборкаСреднегоЗаработка.СледующийПоЗначениюПоля("МесяцРасчетногоПериода") Цикл
		Если ВыборкаСреднегоЗаработка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
			
			СекцияРасчетСреднего.Параметры.Заполнить(ВыборкаСреднегоЗаработка);
			
			Если ВыборкаПоШапкеДокумента.ИспользоватьСреднеЧасовойЗаработок Тогда
				СекцияРасчетСреднего.Параметры.ЗаработокЗаЕдиницуВремени = Окр(?(ВыборкаСреднегоЗаработка.ВсегоЧасовРасчетногоПериода = 0,0, ВыборкаСреднегоЗаработка.ВсегоУчтено / ВыборкаСреднегоЗаработка.ВсегоЧасовРасчетногоПериода),2);
			Иначе
				СекцияРасчетСреднего.Параметры.ЗаработокЗаЕдиницуВремени = Окр(?(ВыборкаСреднегоЗаработка.ВсегоДнейРасчетногоПериода = 0,0, ВыборкаСреднегоЗаработка.ВсегоУчтено / ВыборкаСреднегоЗаработка.ВсегоДнейРасчетногоПериода),2);
			КонецЕсли;
		Иначе	
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("МесяцРасчетногоПериода", ВыборкаСреднегоЗаработка.МесяцРасчетногоПериода);
			КоэффициентИндексации = РезультатСреднегоЗаработка.НайтиСтроки(СтруктураПоиска)[1].КоэффициентИндексации;
			
			РасчетСреднегоСтрока.Параметры.Год = Год(ВыборкаСреднегоЗаработка.МесяцРасчетногоПериода);
			РасчетСреднегоСтрока.Параметры.Месяц = Формат(ВыборкаСреднегоЗаработка.МесяцРасчетногоПериода,"ДФ='ММММ'");
			РасчетСреднегоСтрока.Параметры.СуммаКоэффициент = Окр(ВыборкаСреднегоЗаработка.ВсегоУчтено,2);
			РасчетСреднегоСтрока.Параметры.Коэффициент = КоэффициентИндексации;
			РасчетСреднегоСтрока.Параметры.Сумма = ВыборкаСреднегоЗаработка.Результат;
			
			ТабДокумент.Присоединить(РасчетСреднегоСтрока);
			
			ВсегоУчтено = ВсегоУчтено + Окр(ВыборкаСреднегоЗаработка.ВсегоУчтено,2);	
			ВсегоСумма = ВсегоСумма + ВыборкаСреднегоЗаработка.Результат;		
			
		КонецЕсли;

	КонецЦикла;
		
	СекцияРасчетСреднегоИтого.Параметры.ВсегоУчтено = ВсегоУчтено;
	СекцияРасчетСреднегоИтого.Параметры.ВсегоСумма = ВсегоСумма;
	
	ТабДокумент.Вывести(СекцияРасчетСреднегоИтого);	
	ТабДокумент.Вывести(СекцияРасчетСреднего);

	ВсегоУдержано = УдержаниеЗаНеиспользованныйОтпуск;
	
	// расчет конечного сальдо
	Запрос.УстановитьПараметр("Период",			ДатаУвольнения);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Физлицо",		Сотрудник.Физлицо);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВзаиморасчетыСРаботникамиОрганизацииОстатки.СуммаВзаиморасчетовОстаток КАК НачальноеСальдо
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&Период, Физлицо  = &Физлицо И Организация  = &Организация) КАК ВзаиморасчетыСРаботникамиОрганизацииОстатки";
	
	КонечноеСальдо 	   = 0;
	КВыплате = Макс(0, ВсегоВыплат - ВсегоУдержано);
	Выборка  = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		КонечноеСальдо = ?(Выборка.НачальноеСальдо = Null,0,Выборка.НачальноеСальдо) + ВсегоВыплат - ВсегоУдержано - КВыплате;
		Если КонечноеСальдо > 0 Тогда
			СекцияПодвал.Параметры.ДолгЗаОрганизацией = КонечноеСальдо;
			
		Иначе
			СекцияПодвал.Параметры.ДолгЗаРаботником = 0 - КонечноеСальдо;
			
		КонецЕсли;
	
	КонецЕсли;
	
	СекцияПодвал.Параметры.УдержаниеЗаНеиспользованныйОтпуск = УдержаниеЗаНеиспользованныйОтпуск;
	СекцияПодвал.Параметры.КВыплате							 = КВыплате;
	СекцияПодвал.Параметры.КВыплатеПрописью					 = РаботаСДиалогами.СформироватьСуммуПрописью(КВыплате, Константы.ВалютаРегламентированногоУчета.Получить());
	
	Если КВыплате > 0 Тогда
		
	Если КВыплате = ЦЕЛ(КВыплате) Тогда
		СуммаПрописьюКоп = "00";
	Иначе
		СуммаПрописьюКоп = (КВыплате - ЦЕЛ(КВыплате)) * 100;
	КонецЕсли;
		
		
		СекцияПодвал.Параметры.КВыплатеРублиКопейки = "(" + Цел(КВыплате)+ " руб. " +СуммаПрописьюКоп + " коп." +")";
	Иначе
		СекцияПодвал.Параметры.КВыплатеРублиКопейки = "(_____________руб.__коп."
	КонецЕсли;
	
	ТабДокумент.Вывести(СекцияПодвал);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТ61()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета	- строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если Не Проведен Тогда
		РаботаСДиалогами.ВывестиПредупреждение("Документ можно распечатать только после его проведения!");
		Возврат Неопределено;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если      ИмяМакета = "Т61" Тогда
		ТабДокумент = ПечатьТ61();
		Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (Форма Т-61)");
		
	ИначеЕсли ИмяМакета = "РасчетСреднегоЗаработка" Тогда
		Если ДнейЧасовВыходногоПособия = 0 И ДнейЧасовСохраненияСреднегоЗаработка = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По документу не выплачивается сохраняемый средний заработок!");
			Возврат Неопределено;
		КонецЕсли;
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
		ТабДокумент = ФормированиеПечатныхФорм.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаУвольнения, ?(ДнейЧасовВыходногоПособия = 0, ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаСохраняемыйЗаработокНаВремяТрудоустройства, ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаВыходноеПособие), "за дни(часы) компенсаций при увольнении" , Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
		Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (расчет среднего заработка)");
		
	ИначеЕсли ИмяМакета = "РасчетКомпенсацииОтпуска" Тогда
		Если ДнейЧасовКомпенсацииУдержанияОтпуска = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По документу не выплачивается компенсация отпуска!");	
			Возврат Неопределено;
		КонецЕсли;
		
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
		ТабДокумент = ФормированиеПечатныхФорм.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаУвольнения, ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОтпуск, "за " + ДнейЧасовКомпенсацииУдержанияОтпуска + " дней(часов) " + ?(ПризнакКомпенсацииОтпуска,"компенсации отпуска","удержания за отпуск"), ?(ПорядокРасчетаОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке), ИспользоватьСреднеЧасовойЗаработок);
		Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (расчет среднего заработка " + ?(ПризнакКомпенсацииОтпуска,"компенсации отпуска","удержания за отпуск") + ")");
		
	КонецЕсли;
	
КонецФункции // Печать()

#КонецЕсли

//Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
//
// Параметры:
//	РассчитываемыеТаблицы	- структура из элементов, соответствующих табличным частям документа. 
//								Значение Истина для каждого из элементов структуры означает необходимость расчета 
//								соответствующей табличной части документа
//	РежимПерерасчета		- булево - признак вызов расчета при перерасчете документа
//
Процедура Рассчитать(РассчитываемыеТаблицы, РежимПерерасчета = Ложь) Экспорт
	
	//Перед вызовом процедуры документ должнен быть записан, движения должны быть удалены 
	
	Отказ = Ложь;
	
	Заголовок = СтрЗаменить(ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка),"Проведение документа: ","Расчет документа: ");
	
	// Дата увольнения должна быть указана
	Если Не ЗначениеЗаполнено(ДатаУвольнения) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата увольнения работника!", Отказ, Заголовок);
	КонецЕсли;
	
		
	КоэффициентОтпуска = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(ПериодРегистрации, Новый Структура("ВидПараметра", Перечисления.ВидыПараметровДляРасчетаЗарплаты.КоэффициентДляРасчетаОтпуска)).Размер;
	Если КоэффициентОтпуска = 0 или КоэффициентОтпуска = Неопределено тогда
		Сообщить(Заголовок + ". Не заполнен параметр Коэффициент для расчета отпуска. Расчет не возможен.");
		Отказ = Истина;
	КонецЕсли;

	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Очистим ТЧ Начисления
	//Начисления.Очистить();
	
	// Создадим наборы записей используемых регистров 
	НаборДополнительныеНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборДополнительныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	НаборУдержания = РегистрыРасчета.УдержанияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборУдержания.Отбор.Регистратор.Значение = Ссылка;
	
	НаборРасчетСреднего = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборРасчетСреднего.Отбор.Регистратор.Значение = Ссылка;

	Если НЕ РассчитываемыеТаблицы.РасчетСреднего Тогда
		
		СтрокиЗаработка = РасчетСреднегоДляОтпуска.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск));
		КоличствоМесяцевСреднегоЗаработка = СтрокиЗаработка.Количество();

		СтрокиГодовойПремии = РасчетСреднегоДляОтпуска.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии));
		Если СтрокиГодовойПремии.Количество()<> 0 тогда			
			
			Для каждого СтрокаПремии из СтрокиГодовойПремии цикл
				Если СтрокаПремии.ЧислоМесяцев = 12 Тогда
					КоличествоМесяцевВыборкиСреднего = (ГОД(СтрокаПремии.БазовыйПериодКонец)-ГОД(СтрокаПремии.БазовыйПериодНачало)) *12 + 1 - Месяц(СтрокаПремии.БазовыйПериодНачало) + Месяц(СтрокаПремии.БазовыйПериодКонец);   

					СтрокаПремии.Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаПремии.НачисленнаяСумма/КоличествоМесяцевВыборкиСреднего*КоличствоМесяцевСреднегоЗаработка,Константы.ВалютаРегламентированногоУчета.Получить()); 	
				КонецЕсли;
			КонецЦикла;
			
			
			
		КонецЕсли;		
		// запишем движения по среднему заработку для расчета начислений
		// получим реквизиты табличной части РасчетСреднего 
		РезультатЗапросаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего(ВыборкаПоШапкеДокумента);
		ВыборкаПоРасчетСреднего = РезультатЗапросаПоРасчетСреднего.Выбрать();
		
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ);
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, НаборРасчетСреднего);
			КонецЕсли;
		КонецЦикла;
		
		НаборРасчетСреднего.Записать();
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Если это документ-исправление, добавим сторно-записи из исправляемого документа.
	ПроведениеРасчетов.СформироватьСторноЗаписиПоПерерассчитываемомуДокументу(ПерерассчитываемыйДокумент,ВыборкаПоШапкеДокумента, Неопределено, НаборДополнительныеНачисления, НаборУдержания);
	
	// Начисления (удержания) документа.
	СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборДополнительныеНачисления, НаборУдержания);
	
	Начисления.Очистить();
		
	
	// рассчитываем записи начислений и если надо, записи расчета среднего заработка
	Если РассчитываемыеТаблицы.Начисления Тогда
		Если РассчитываемыеТаблицы.РасчетСреднего Тогда
			ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДополнительныеНачисления, , НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
		 	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("УдержанияРаботниковОрганизаций", НаборУдержания, , НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
		Иначе
			ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДополнительныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
			ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("УдержанияРаботниковОрганизаций", НаборУдержания, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
		КонецЕсли;
		
		// перепишем записи начислений в документ
		ПереписатьНачисленияВТабличнуюЧастьДокумента(НаборДополнительныеНачисления);
		ПереписатьНачисленияВТабличнуюЧастьДокумента(НаборУдержания);
		
		ТаблицаЗаписей = НаборРасчетСреднего.Выгрузить();
		
	ИначеЕсли РассчитываемыеТаблицы.РасчетСреднего Тогда

		НаборДополнительныеНачисления.Записать();
		НаборУдержания.Записать();
		ПроведениеРасчетов.СформироватьИЗаписатьДанныеРасчетаСреднего("ДополнительныеНачисленияРаботниковОрганизаций", Ссылка, НаборРасчетСреднего);
		ТаблицаЗаписей = НаборРасчетСреднего.Выгрузить();
		Если НаборУдержания.Количество() > 0 Тогда
			НаборРасчетСреднего.Очистить();
			ПроведениеРасчетов.СформироватьИЗаписатьДанныеРасчетаСреднего("УдержанияРаботниковОрганизаций", Ссылка, НаборРасчетСреднего);
			
			Для Каждого СтрокаНабора Из НаборРасчетСреднего Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаЗаписей.Добавить(),СтрокаНабора)
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если РассчитываемыеТаблицы.РасчетСреднего Тогда
		РасчетСреднего.Очистить();
		РасчетСреднегоДляОтпуска.Очистить();
		ТаблицаЗаписей.Свернуть("СпособРасчета,БазовыйПериодКонец,БазовыйПериодНачало,ВидРасчета,КоэффициентИндексации,НормаПоПятидневке,ОтработаноДней,ОтработаноПоПятидневке,ОтработаноЧасов,ЧислоМесяцев,МесяцВыборки,ТекущаяТарифнаяСтавка,ТарифнаяСтавкаПериода,НормаДней,НормаЧасов","Результат,НачисленнаяСумма");
		// перепишем записи расчета среднего заработка в документ
		Для каждого СтрокаНабора Из ТаблицаЗаписей Цикл
			Если СтрокаНабора.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку Тогда
				СтрокаТЧ = РасчетСреднего.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтрокаНабора);

			Иначе
				СтрокаТЧ = РасчетСреднегоДляОтпуска.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтрокаНабора);
                СтрокаТЧ.ОтработаноДней = КоэффициентОтпуска;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если РежимПерерасчета тогда
		// Для режима перерасчета запишем движения (набор записей расчета среднего уже записан)
		НаборДополнительныеНачисления.Записать();
		НаборУдержания.Записать();
		
	Иначе
		// Удаляем движения для режима интерактивного расчета 
		НаборДополнительныеНачисления.Очистить();
		НаборДополнительныеНачисления.Записать();
		
		НаборУдержания.Очистить();
		НаборУдержания.Записать();
		
		НаборРасчетСреднего.Очистить();
		НаборРасчетСреднего.Записать();
		
	КонецЕсли;
		
КонецПроцедуры // Рассчитать()

//Выполняет перерасчет по заданному списку физлиц
//
// Параметры:
//	Физлица	- массив - ссылки на физлиц
//
// Возвращаемое значение
//	Нет.
//
Процедура Перерассчитать(Физлица = Неопределено) Экспорт

	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	// Выполним полный перерасчет документа
	Рассчитать(Новый Структура("Начисления,РасчетСреднего",Истина,Истина), Истина);	
	// Зафиксируем данные табличных частей после расчета
	Записать();
	
	УчетнаяПолитикаПоПерсоналуОрганизации  = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");	
	// ведется ли учет задолженности в разрезе периодов возникновения задолженности
	УчетЗадолженностиПоМесяцам				= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналуОрганизации, Организация, "УчетЗадолженностиПоМесяцам");
	
	Движения.НДФЛСведенияОДоходах.Очистить();
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Очистить();
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий(); 
	
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетЗадолженностиПоМесяцам);
	КонецЦикла;
	
	Движения.НДФЛСведенияОДоходах.Записать();
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Записать();
	
	// Удалим записи перерасчета по которым выполнен перерасчет
	ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка);
	
КонецПроцедуры // Перерассчитать()

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.РасчетПриУвольненииРаботникаОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных
	
КонецПроцедуры  // ЗаполнитьПоПерерассчитываемомуДокументу()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//	Структура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("Т61",						"Форма Т-61");
	СтруктураМакетов.Вставить("РасчетСреднегоЗаработка",	"Расчет среднего заработка");	
	СтруктураМакетов.Вставить("РасчетКомпенсацииОтпуска",	"Расчет ср. заработка " + ?(ПризнакКомпенсацииОтпуска,"компенсации отпуска","удержания за отпуск"));	
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует записи регистра "ОсновныеНачисленияРаботниковОрганизаций" по данным шапки документа
//
Процедура СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборДополнительныеНачисления, НаборУдержания)
	
	СтрокаОбщихПараметров = "ПодразделениеОрганизации,ОбособленноеПодразделение,ПериодРегистрации,Сотрудник,Физлицо,ГрафикРаботы,ДатаНачалаСобытия,ПериодРасчетаСреднегоЗаработкаОкончание,Авторасчет";
	
	Если ВыборкаПоШапкеДокумента.СуммированныйУчетРабочегоВремени Тогда
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
	Иначе
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ДнейЧасовВыходногоПособия > 0 Тогда
		Движение = НаборДополнительныеНачисления.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаОбщихПараметров);
		
		Движение.Организация	 = ВыборкаПоШапкеДокумента.Организация;
		Движение.ВидРасчета		 = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие;
		Движение.Показатель1	 = ВыборкаПоШапкеДокумента.ДнейЧасовВыходногоПособия;
		Движение.ВидУчетаВремени = ВидУчетаВремени;
		Движение.ПериодРасчетаСреднегоЗаработкаНачало = ДобавитьМесяц(НачалоМесяца(ВыборкаПоШапкеДокумента.ДатаНачалаСобытия), - ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаВыходноеПособие);
		Движение.РучнойРасчетСреднегоЗаработка = РучнойРасчетСреднегоЗаработка;
		Движение.РазмерСреднегоЗаработка = РазмерСреднегоЗаработка;
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ДнейЧасовСохраненияСреднегоЗаработка > 0 Тогда
		Движение = НаборДополнительныеНачисления.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаОбщихПараметров);
		
		Движение.Организация	 = ВыборкаПоШапкеДокумента.Организация;
		Движение.ВидРасчета		 = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.СохраняемыйЗаработокНаВремяТрудоустройства;
		Движение.Показатель1	 = ВыборкаПоШапкеДокумента.ДнейЧасовСохраненияСреднегоЗаработка;
		Движение.ВидУчетаВремени = ВидУчетаВремени;
		Движение.ПериодРасчетаСреднегоЗаработкаНачало = ДобавитьМесяц(НачалоМесяца(ВыборкаПоШапкеДокумента.ДатаНачалаСобытия), - ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаСохраняемыйЗаработокНаВремяТрудоустройства);
		Движение.РучнойРасчетСреднегоЗаработка = РучнойРасчетСреднегоЗаработка;
		Движение.РазмерСреднегоЗаработка = РазмерСреднегоЗаработка;
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ДнейЧасовКомпенсацииУдержанияОтпуска > 0 Тогда
		Если ВыборкаПоШапкеДокумента.ИспользоватьСреднеЧасовойЗаработок Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		Иначе
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		КонецЕсли;
		Если ВыборкаПоШапкеДокумента.ПризнакКомпенсацииОтпуска Тогда
			Движение = НаборДополнительныеНачисления.Добавить();
			
		Иначе
			СтрокаОбщихПараметров = СтрЗаменить(СтрокаОбщихПараметров, "ПодразделениеОрганизации,", "");
			Движение = НаборУдержания.Добавить();
			
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаОбщихПараметров);
		Движение.Организация	 = ВыборкаПоШапкеДокумента.Организация;
		Движение.ВидРасчета		 = ВыборкаПоШапкеДокумента.ВидРасчетаСреднегоЗаработкаОтпуск;
		Движение.Показатель1	 = ВыборкаПоШапкеДокумента.ДнейЧасовКомпенсацииУдержанияОтпуска;
		Движение.ВидУчетаВремени = ВидУчетаВремени;
		Движение.ПериодРасчетаСреднегоЗаработкаНачало = ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
		Движение.РучнойРасчетСреднегоЗаработка = РучнойРасчетСреднегоЗаработкаОтпуска;
		Движение.РазмерСреднегоЗаработка = РазмерСреднегоЗаработкаОтпуска;
	КонецЕсли;
		
КонецПроцедуры // СформироватьДвиженияПоНачислениям()

// На основе сформированных движений по регистру расчета заполняет ТЧ "Начисления"
//
Процедура ПереписатьНачисленияВТабличнуюЧастьДокумента(НаборДополнительныеНачисления)
	
	Для Каждого СтрокаНачислений Из НаборДополнительныеНачисления Цикл
		НоваяСтрока = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНачислений);
		НоваяСтрока.Размер = СтрокаНачислений.Показатель1;
	КонецЦикла;
	
КонецПроцедуры // ПереписатьНачисленияВТабличнуюЧастьДокумента()

// Формирует запрос по шапке документа для целей вывода документа на печать
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапкеДляПечати()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("Ссылка",					Ссылка);
	Запрос.УстановитьПараметр("ДатаУвольнения",			ДатаУвольнения);
	Запрос.УстановитьПараметр("Сотрудник",				Сотрудник);
	Запрос.УстановитьПараметр("Физлицо",				Сотрудник.Физлицо);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетПриУвольненииРаботникаОрганизации.Номер КАК НомерДокумента,
	|	РасчетПриУвольненииРаботникаОрганизации.Дата КАК ДатаДокумента,
	|	РасчетПриУвольненииРаботникаОрганизации.Организация.КодПоОКПО КАК КодПоОКПО,
	|	ВЫРАЗИТЬ(РасчетПриУвольненииРаботникаОрганизации.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
	|	РасчетПриУвольненииРаботникаОрганизации.Сотрудник,
	|	РасчетПриУвольненииРаботникаОрганизации.ДатаУвольнения,
	|	РасчетПриУвольненииРаботникаОрганизации.ДнейЧасовВыходногоПособия,
	|	РасчетПриУвольненииРаботникаОрганизации.ДнейЧасовСохраненияСреднегоЗаработка,
	|	РасчетПриУвольненииРаботникаОрганизации.ДнейЧасовКомпенсацииУдержанияОтпуска,
	|	ВЫБОР
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.ПризнакКомпенсацииОтпуска
	|			ТОГДА РасчетПриУвольненииРаботникаОрганизации.ДнейЧасовКомпенсацииУдержанияОтпуска
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДнейКомпенсации,
	|	ВЫБОР
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.ПризнакКомпенсацииОтпуска
	|			ТОГДА 0
	|		ИНАЧЕ РасчетПриУвольненииРаботникаОрганизации.ДнейЧасовКомпенсацииУдержанияОтпуска
	|	КОНЕЦ КАК ДнейУдержания,
	|	РасчетПриУвольненииРаботникаОрганизации.ПризнакКомпенсацииОтпуска,
	|	РасчетПриУвольненииРаботникаОрганизации.РабочийГодС,
	|	РасчетПриУвольненииРаботникаОрганизации.РабочийГодПо,
	|	РасчетПриУвольненииРаботникаОрганизации.ПорядокРасчетаОтпуска,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, РасчетПриУвольненииРаботникаОрганизации.Сотрудник.Наименование) КАК ФИО,
	|	ВЫБОР
	|		КОГДА  РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаУвольнения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаУвольнения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность 
	|	КОНЕЦ КАК Должность,
	|	РасчетПриУвольненииРаботникаОрганизации.ИспользоватьСреднеЧасовойЗаработок КАК ИспользоватьСреднеЧасовойЗаработок,
	|	РасчетПриУвольненииРаботникаОрганизации.Сотрудник.НомерДоговора КАК НомерДоговора,
	|	РасчетПриУвольненииРаботникаОрганизации.Сотрудник.ДатаДоговора КАК ДатаДоговора,
	|	УвольнениеИзОрганизацииРаботникиОрганизации.СтатьяТКРФ.Наименование КАК ОснованиеУвольнения,
	|	""№ "" + ЕСТЬNULL(РасчетПриУвольненииРаботникаОрганизации.ДокументОснование.Номер, ""_____________"") КАК ДокументОснованиеНомер,
	|	ЕСТЬNULL(РасчетПриУвольненииРаботникаОрганизации.ДокументОснование.Дата, ""____   __________20___ года"") КАК ДокументОснованиеДата,
	|	ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРФ, ЛОЖЬ) КАК НеЯвляетсяНалоговымРезидентомРФ,
	|	РасчетПриУвольненииРаботникаОрганизации.Организация.Префикс,
	|	РасчетПриУвольненииРаботникаОрганизации.Сотрудник.Код КАК ТабельныйНомер
	|ИЗ
	|	Документ.РасчетПриУвольненииРаботникаОрганизаций КАК РасчетПриУвольненииРаботникаОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаУвольнения, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&ДатаУвольнения, ФизЛицо = &ФизЛицо) КАК ГражданствоФизЛицСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаУвольнения, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацииРаботникиОрганизации
	|		ПО РасчетПриУвольненииРаботникаОрганизации.Сотрудник = УвольнениеИзОрганизацииРаботникиОрганизации.Сотрудник
	|ГДЕ
	|	РасчетПриУвольненииРаботникаОрганизации.Ссылка = &Ссылка";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ДатаАктуальности",	ДатаУвольнения);
	Запрос.УстановитьПараметр("Сотрудник",			Сотрудник);
	Запрос.УстановитьПараметр("ДатаИзмененийТК2006",ПроведениеРасчетов.ПолучитьДатуВступленияВСилуИзмененийТрудовогоКодекса2006());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетПриУвольненииРаботникаОрганизации.Дата,
	|	РасчетПриУвольненииРаботникаОрганизации.ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.Дата < РасчетПриУвольненииРаботникаОрганизации.ПериодРегистрации
	|			ТОГДА РасчетПриУвольненииРаботникаОрганизации.ПериодРегистрации
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.Дата > КОНЕЦПЕРИОДА(РасчетПриУвольненииРаботникаОрганизации.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА КОНЕЦПЕРИОДА(РасчетПриУвольненииРаботникаОрганизации.ПериодРегистрации, МЕСЯЦ)
	|		ИНАЧЕ РасчетПриУвольненииРаботникаОрганизации.Дата
	|	КОНЕЦ КАК ПериодРегистрацииДополнительныхНачислений,
	|	ВЫБОР
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасчетПриУвольненииРаботникаОрганизации.Организация
	|		ИНАЧЕ РасчетПриУвольненииРаботникаОрганизации.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасчетПриУвольненииРаботникаОрганизации.Организация
	|		ИНАЧЕ РасчетПриУвольненииРаботникаОрганизации.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	РасчетПриУвольненииРаботникаОрганизации.Организация КАК ОбособленноеПодразделение,
	|	РасчетПриУвольненииРаботникаОрганизации.Ссылка,
	|	РасчетПриУвольненииРаботникаОрганизации.Сотрудник,
	|	РасчетПриУвольненииРаботникаОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	РасчетПриУвольненииРаботникаОрганизации.ДатаУвольнения,
	|	РасчетПриУвольненииРаботникаОрганизации.ДатаУвольнения КАК ДатаНачалаСобытия,
	|	РасчетПриУвольненииРаботникаОрганизации.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	РасчетПриУвольненииРаботникаОрганизации.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	ВЫБОР
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.ПризнакКомпенсацииОтпуска
	|			ТОГДА ИСТИНА
	|		КОГДА ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.УдержаниеЗаОтпускУменьшаетНалоги
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакКомпенсацииОтпуска,
	|	РасчетПриУвольненииРаботникаОрганизации.ДокументОснование,
	|	РасчетПриУвольненииРаботникаОрганизации.ПорядокРасчетаОтпуска,
	|	РасчетПриУвольненииРаботникаОрганизации.ИспользоватьСреднеЧасовойЗаработок,
	|	РасчетПриУвольненииРаботникаОрганизации.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	РасчетПриУвольненииРаботникаОрганизации.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	РасчетПриУвольненииРаботникаОрганизации.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ИСТИНА КАК Авторасчет,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|		КОНЕЦ, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	ПараметрыВидаРасчетаВыходноеПособие.ЧислоМесяцев КАК ПериодРасчетаСреднегоЗаработкаВыходноеПособие,
	|	ПараметрыВидаРасчетаСохраняемыйЗаработокНаВремяТрудоустройства.ЧислоМесяцев КАК ПериодРасчетаСреднегоЗаработкаСохраняемыйЗаработокНаВремяТрудоустройства,
	|	ПараметрыВидаРасчетаКомпенсация.ЧислоМесяцев КАК ПериодРасчетаСреднегоЗаработкаОтпуск,
	|	ВЫБОР
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.ПризнакКомпенсацииОтпуска
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетПриУвольненииРаботникаОрганизации.ПорядокРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|						ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДни)
	|					ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневка)
	|				КОНЕЦ
	|		КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.УдержаниеЗаОтпускУменьшаетНалоги, ЛОЖЬ)
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетПриУвольненииРаботникаОрганизации.ПорядокРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|						ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни)
	|					ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетПриУвольненииРаботникаОрганизации.ПорядокРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни)
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка)
	|			КОНЕЦ
	|	КОНЕЦ КАК ВидРасчетаСреднегоЗаработкаОтпуск,
	|	ВЫБОР
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.ПорядокРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)
	|	КОНЕЦ КАК СпособРасчетаПоСреднемуДляОтпуска,
	|	ВЫБОР
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.Сотрудник.Организация = ВЫБОР
	|				КОГДА РасчетПриУвольненииРаботникаОрганизации.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА РасчетПриУвольненииРаботникаОрганизации.Организация
	|				ИНАЧЕ РасчетПриУвольненииРаботникаОрганизации.Организация.ГоловнаяОрганизация
	|			КОНЕЦ
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	РасчетПриУвольненииРаботникаОрганизации.ДнейЧасовКомпенсацииУдержанияОтпуска КАК ДнейЧасовКомпенсацииУдержанияОтпуска,
	|	РасчетПриУвольненииРаботникаОрганизации.ДнейЧасовСохраненияСреднегоЗаработка КАК ДнейЧасовСохраненияСреднегоЗаработка,
	|	РасчетПриУвольненииРаботникаОрганизации.ДнейЧасовВыходногоПособия КАК ДнейЧасовВыходногоПособия,
	|	ПараметрыВидаРасчетаКомпенсация.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	РасчетПриУвольненииРаботникаОрганизации.РазмерСреднегоЗаработка,
	|	РасчетПриУвольненииРаботникаОрганизации.РучнойРасчетСреднегоЗаработка,
	|	РасчетПриУвольненииРаботникаОрганизации.РучнойРасчетСреднегоЗаработкаОтпуска,
	|	РасчетПриУвольненииРаботникаОрганизации.РазмерСреднегоЗаработкаОтпуска
	|ИЗ
	|	Документ.РасчетПриУвольненииРаботникаОрганизаций КАК РасчетПриУвольненииРаботникаОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты КАК ВариантыВстроенныхАлгоритмовРасчетаЗарплаты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|		ПО (РаботникиОрганизацииСрезПоследних.Организация = ВЫБОР
	|				КОГДА РасчетПриУвольненииРаботникаОрганизации.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА РасчетПриУвольненииРаботникаОрганизации.Организация
	|				ИНАЧЕ РасчетПриУвольненииРаботникаОрганизации.Организация.ГоловнаяОрганизация
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ПараметрыВидаРасчетаКомпенсация
	|		ПО (ПараметрыВидаРасчетаКомпенсация.Ссылка = ВЫБОР
	|				КОГДА РасчетПриУвольненииРаботникаОрганизации.ПорядокРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДни)
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневка)
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций КАК ПараметрыВидаРасчетаУдержание
	|		ПО (ПараметрыВидаРасчетаУдержание.Ссылка = ВЫБОР
	|				КОГДА РасчетПриУвольненииРаботникаОрганизации.ПорядокРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни)
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка)
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ПараметрыВидаРасчетаВыходноеПособие
	|		ПО (ПараметрыВидаРасчетаВыходноеПособие.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ПараметрыВидаРасчетаСохраняемыйЗаработокНаВремяТрудоустройства
	|		ПО (ПараметрыВидаРасчетаСохраняемыйЗаработокНаВремяТрудоустройства.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.СохраняемыйЗаработокНаВремяТрудоустройства))
	|ГДЕ
	|	РасчетПриУвольненииРаботникаОрганизации.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части Начисления
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	СпособыРасчетаОтпуска = Новый Массив;
	СпособыРасчетаОтпуска.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
	СпособыРасчетаОтпуска.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
	Запрос.УстановитьПараметр("СпособыРасчетаОтпуска", СпособыРасчетаОтпуска);

	Запрос.УстановитьПараметр("ГрафикРаботы", ВыборкаПоШапкеДокумента.ГрафикРаботы);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ВыборкаПоШапкеДокумента.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("СуммированныйУчетРабочегоВремени", ВыборкаПоШапкеДокумента.СуммированныйУчетРабочегоВремени);
	
	Запрос.УстановитьПараметр("ДатаИзмененийТК2006", ПроведениеРасчетов.ПолучитьДатуВступленияВСилуИзмененийТрудовогоКодекса2006());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисление.НомерСтроки,
	|	Начисление.ВидРасчета,
	|	ВЫБОР
	|		КОГДА Начисление.ВидРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору)
	|			ТОГДА ВЫБОР
	|					КОГДА Начисление.ВидРасчета ССЫЛКА ПланВидовРасчета.УдержанияОрганизаций
	|						ТОГДА Начисление.ВидРасчета.ПериодРасчетаСреднегоЗаработка
	|					ИНАЧЕ Начисление.ВидРасчета.ЧислоМесяцев
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Начисление.ВидРасчета.СпособРасчета В (&СпособыРасчетаОтпуска)
	|					ТОГДА ВЫБОР
	|							КОГДА Начисление.Ссылка.ДатаУвольнения < &ДатаИзмененийТК2006
	|								ТОГДА 3
	|							ИНАЧЕ 12
	|						КОНЕЦ
	|				ИНАЧЕ 12
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоМесяцевРасчета,
	|	ВЫБОР
	|		КОГДА Начисление.ВидРасчета.СпособРасчета В (&СпособыРасчетаОтпуска)
	|			ТОГДА ВЫБОР
	|					КОГДА Начисление.Ссылка.ИспользоватьСреднеЧасовойЗаработок
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|				КОНЕЦ
	|		КОГДА &СуммированныйУчетРабочегоВремени
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	КОНЕЦ КАК ВидУчетаВремени,
	|	Начисление.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	Начисление.ВидРасчета ССЫЛКА ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК Начисления,
	|	Начисление.Размер КАК Показатель1,
	|	НЕОПРЕДЕЛЕНО КАК Показатель2,
	|	НЕОПРЕДЕЛЕНО КАК Показатель3,
	|	НЕОПРЕДЕЛЕНО КАК Показатель4,
	|	НЕОПРЕДЕЛЕНО КАК Показатель5,
	|	НЕОПРЕДЕЛЕНО КАК Показатель6,
	|	НЕОПРЕДЕЛЕНО КАК БазовыйПериодНачало,
	|	НЕОПРЕДЕЛЕНО КАК БазовыйПериодКонец,
	|	НЕОПРЕДЕЛЕНО КАК ЧислоМесяцев,
	|	Начисление.Результат,
	|	Начисление.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	Начисление.Сторно,
	|	Начисление.Авторасчет,
	|	Начисление.ОплаченоДнейЧасов,
	|	ВЫБОР
	|		КОГДА Начисление.Сторно
	|			ТОГДА Начисление.Ссылка.ПерерассчитываемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент,
	|	&ГрафикРаботы КАК ГрафикРаботы,
	|	&ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Начисление.Ссылка.Сотрудник,
	|	Начисление.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Начисление.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ВЫБОР
	|		КОГДА Начисление.ВидРасчета ССЫЛКА ПланВидовРасчета.УдержанияОрганизаций
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Удержание,
	|	Начисление.РучнойРасчетСреднегоЗаработка,
	|	Начисление.РазмерСреднегоЗаработка,
	|	Начисление.КоэффициентИндексации
	|ИЗ
	|	Документ.РасчетПриУвольненииРаботникаОрганизаций.Начисления КАК Начисление
	|ГДЕ
	|	Начисление.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

// Формирует запрос по таблице "РасчетСреднего" документа
//
// Параметры: 
//	Режим	- режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоРасчетСреднего(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",							Ссылка);
	Запрос.УстановитьПараметр("РасчетСреднегоДляОтпуска",							РасчетСреднегоДляОтпуска);
	Запрос.УстановитьПараметр("МесяцевВыходноеПособие",					ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаВыходноеПособие);
	Запрос.УстановитьПараметр("МесяцевСохраняемыйЗаработокНаВремяТрудоустройства", ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаСохраняемыйЗаработокНаВремяТрудоустройства);
	Запрос.УстановитьПараметр("МесяцевСреднегоДляОтпуска",				ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОтпуск);
	Запрос.УстановитьПараметр("ПоСреднемуДляОтпуска",					ВыборкаПоШапкеДокумента.СпособРасчетаПоСреднемуДляОтпуска);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",						НачалоМесяца(ВыборкаПоШапкеДокумента.ДатаНачалаСобытия));        
	Запрос.УстановитьПараметр("ОкончаниеРасчетногоПериода",				НачалоМесяца(ВыборкаПоШапкеДокумента.ДатаНачалаСобытия) - 1);
	Запрос.УстановитьПараметр("НачалоРасчетногоПериодаВыходноеПособие",	ДобавитьМесяц(НачалоМесяца(ВыборкаПоШапкеДокумента.ДатаНачалаСобытия), - ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаВыходноеПособие));
	Запрос.УстановитьПараметр("НачалоРасчетногоПериодаДляОтпуска",		ДобавитьМесяц(НачалоМесяца(ВыборкаПоШапкеДокумента.ДатаНачалаСобытия), - ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОтпуск));
	Запрос.УстановитьПараметр("НачалоРасчетногоПериодаСохраняемыйЗаработокНаВремяТрудоустройства", ДобавитьМесяц(НачалоМесяца(ВыборкаПоШапкеДокумента.ДатаНачалаСобытия), - ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаСохраняемыйЗаработокНаВремяТрудоустройства));
	//vvv
	Запрос.УстановитьПараметр("ОкончаниеРасчетногоПериода",ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание);
	Запрос.УстановитьПараметр("НачалоРасчетногоПериодаДляОтпуска",ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало);
	//
	
	ГодовыеПремии = Новый Массив(4);
	ГодовыеПремии[0] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
	//ГодовыеПремии[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии;
	//ГодовыеПремии[2] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые;
	//ГодовыеПремии[3] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые;
	Запрос.УстановитьПараметр("ГодовыеПремии", ГодовыеПремии);

	Запрос.Текст ="ВЫБРАТЬ
	|	СтрокаГодоваяПремия.НомерСтроки КАК НомерСтроки,
	|	СтрокаГодоваяПремия.ВидРасчета КАК ВидРасчета,
	|	СтрокаГодоваяПремия.Результат КАК Результат,
	|	СтрокаГодоваяПремия.МесяцВыборки КАК МесяцВыборки
	|ПОМЕСТИТЬ ВТ_ГодоваяПремия
	|ИЗ
	|	&РасчетСреднегоДляОтпуска КАК СтрокаГодоваяПремия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОЗаработке.НомерСтроки КАК НомерСтроки,
	|	ДанныеОЗаработке.ВидРасчета,
	|	ДанныеОЗаработке.БазовыйПериодНачало,
	|	ДанныеОЗаработке.БазовыйПериодКонец,
	|	ДанныеОЗаработке.ОтработаноПоПятидневке,
	|	ДанныеОЗаработке.НормаПоПятидневке,
	|	ДанныеОЗаработке.ОтработаноДней,
	|	ДанныеОЗаработке.ОтработаноЧасов,
	|	ДанныеОЗаработке.ЧислоМесяцев,
	|	ДанныеОЗаработке.КоэффициентИндексации,
	|	ДанныеОЗаработке.Результат,
	|	ДанныеОЗаработке.КалендарныеДни,
	|	&ОкончаниеРасчетногоПериода КАК ДатаОкончанияРасчетногоПериода,
	|	&НачалоРасчетногоПериодаДляОтпуска КАК ДатаНачалаРасчетногоПериода,
	|	&МесяцевСреднегоДляОтпуска КАК ЧислоМесяцевРасчета,
	|	&ПоСреднемуДляОтпуска КАК СпособРасчета,
	|	ДанныеОЗаработке.МесяцВыборки КАК МесяцВыборки
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтрокаРасчетСреднегоДляОтпуска.НомерСтроки КАК НомерСтроки,
	|		СтрокаРасчетСреднегоДляОтпуска.ВидРасчета КАК ВидРасчета,
	|		СтрокаРасчетСреднегоДляОтпуска.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|		ВЫБОР
	|			КОГДА СтрокаРасчетСреднегоДляОтпуска.БазовыйПериодКонец <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднегоДляОтпуска.БазовыйПериодКонец, ДЕНЬ)
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОНЕЦ КАК БазовыйПериодКонец,
	|		СтрокаРасчетСреднегоДляОтпуска.ОтработаноПоПятидневке КАК ОтработаноПоПятидневке,
	|		СтрокаРасчетСреднегоДляОтпуска.НормаПоПятидневке КАК НормаПоПятидневке,
	|		СтрокаРасчетСреднегоДляОтпуска.ОтработаноДней КАК ОтработаноДней,
	|		СтрокаРасчетСреднегоДляОтпуска.ОтработаноЧасов КАК ОтработаноЧасов,
	|		СтрокаРасчетСреднегоДляОтпуска.ЧислоМесяцев КАК ЧислоМесяцев,
	|		СтрокаРасчетСреднегоДляОтпуска.КоэффициентИндексации КАК КоэффициентИндексации,
	|		ВЫБОР
	|			КОГДА СтрокаРасчетСреднегоДляОтпуска.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии)
	|				ТОГДА ВТ_ГодоваяПремия.Результат
	|			ИНАЧЕ СтрокаРасчетСреднегоДляОтпуска.Результат
	|		КОНЕЦ КАК Результат,
	|		СтрокаРасчетСреднегоДляОтпуска.МесяцВыборки КАК МесяцВыборки,
	|		СтрокаРасчетСреднегоДляОтпуска.КалендарныеДни КАК КалендарныеДни
	|	ИЗ
	|		Документ.РасчетПриУвольненииРаботникаОрганизаций.РасчетСреднегоДляОтпуска КАК СтрокаРасчетСреднегоДляОтпуска
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГодоваяПремия КАК ВТ_ГодоваяПремия
	|			ПО СтрокаРасчетСреднегоДляОтпуска.ВидРасчета = ВТ_ГодоваяПремия.ВидРасчета
	|				И СтрокаРасчетСреднегоДляОтпуска.МесяцВыборки = ВТ_ГодоваяПремия.МесяцВыборки
	|	ГДЕ
	|		СтрокаРасчетСреднегоДляОтпуска.Ссылка = &ДокументСсылка
	|		И СтрокаРасчетСреднегоДляОтпуска.Ссылка.ДнейЧасовКомпенсацииУдержанияОтпуска > 0) КАК ДанныеОЗаработке
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеОЗаработке.НомерСтроки,
	|	ДанныеОЗаработке.ВидРасчета,
	|	ДанныеОЗаработке.БазовыйПериодНачало,
	|	ДанныеОЗаработке.БазовыйПериодКонец,
	|	ДанныеОЗаработке.ОтработаноПоПятидневке,
	|	ДанныеОЗаработке.НормаПоПятидневке,
	|	ДанныеОЗаработке.ОтработаноДней,
	|	ДанныеОЗаработке.ОтработаноЧасов,
	|	ДанныеОЗаработке.ЧислоМесяцев,
	|	ДанныеОЗаработке.КоэффициентИндексации,
	|	ДанныеОЗаработке.Результат,
	|	ДанныеОЗаработке.КалендарныеДни,
	|	&ОкончаниеРасчетногоПериода,
	|	Начисления.ДатаНачалаРасчетногоПериода,
	|	Начисления.ЧислоМесяцевРасчета,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку),
	|	ДанныеОЗаработке.МесяцВыборки
	|ИЗ
	|	(ВЫБРАТЬ
	|		&МесяцевВыходноеПособие КАК ЧислоМесяцевРасчета,
	|		&НачалоРасчетногоПериодаВыходноеПособие КАК ДатаНачалаРасчетногоПериода
	|	ИЗ
	|		Документ.РасчетПриУвольненииРаботникаОрганизаций КАК РасчетПриУвольненииРаботникаОрганизаций
	|	ГДЕ
	|		РасчетПриУвольненииРаботникаОрганизаций.Ссылка = &ДокументСсылка
	|		И РасчетПриУвольненииРаботникаОрганизаций.ДнейЧасовВыходногоПособия > 0
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		&МесяцевСохраняемыйЗаработокНаВремяТрудоустройства,
	|		&НачалоРасчетногоПериодаСохраняемыйЗаработокНаВремяТрудоустройства
	|	ИЗ
	|		Документ.РасчетПриУвольненииРаботникаОрганизаций КАК РасчетПриУвольненииРаботникаОрганизаций
	|	ГДЕ
	|		РасчетПриУвольненииРаботникаОрганизаций.Ссылка = &ДокументСсылка
	|		И РасчетПриУвольненииРаботникаОрганизаций.ДнейЧасовСохраненияСреднегоЗаработка > 0) КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СтрокаРасчетСреднего.НомерСтроки КАК НомерСтроки,
	|			СтрокаРасчетСреднего.ВидРасчета КАК ВидРасчета,
	|			СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|			ВЫБОР
	|				КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ)
	|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			КОНЕЦ КАК БазовыйПериодКонец,
	|			СтрокаРасчетСреднего.ОтработаноПоПятидневке КАК ОтработаноПоПятидневке,
	|			СтрокаРасчетСреднего.НормаПоПятидневке КАК НормаПоПятидневке,
	|			СтрокаРасчетСреднего.ОтработаноДней КАК ОтработаноДней,
	|			СтрокаРасчетСреднего.ОтработаноЧасов КАК ОтработаноЧасов,
	|			СтрокаРасчетСреднего.ЧислоМесяцев КАК ЧислоМесяцев,
	|			СтрокаРасчетСреднего.КоэффициентИндексации КАК КоэффициентИндексации,
	|			СтрокаРасчетСреднего.Результат КАК Результат,
	|			ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку) КАК СпособРасчета,
	|			СтрокаРасчетСреднего.МесяцВыборки КАК МесяцВыборки,
	|			СтрокаРасчетСреднего.КалендарныеДни КАК КалендарныеДни
	|		ИЗ
	|			Документ.РасчетПриУвольненииРаботникаОрганизаций.РасчетСреднего КАК СтрокаРасчетСреднего
	|		ГДЕ
	|			СтрокаРасчетСреднего.Ссылка = &ДокументСсылка) КАК ДанныеОЗаработке
	|		ПО (&МесяцевВыходноеПособие = &НачалоРасчетногоПериодаВыходноеПособие
	|				ИЛИ НЕ ДанныеОЗаработке.ВидРасчета В (&ГодовыеПремии)
	|					И Начисления.ДатаНачалаРасчетногоПериода <= ДанныеОЗаработке.БазовыйПериодНачало
	|					И &ОкончаниеРасчетногоПериода >= ДанныеОЗаработке.БазовыйПериодКонец
	|				ИЛИ ДанныеОЗаработке.ВидРасчета В (&ГодовыеПремии)
	|					И Начисления.ДатаНачалаРасчетногоПериода = ДанныеОЗаработке.БазовыйПериодНачало
	|					И &ОкончаниеРасчетногоПериода = ДанныеОЗаработке.БазовыйПериодКонец)";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРасчетСреднего()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОбособленноеПодразделение) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, по которой выполняется начисление!", Отказ, Заголовок);
	КонецЕсли;
	
	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период регистрации!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ДнейЧасовКомпенсацииУдержанияОтпуска <> 0 И НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПорядокРасчетаОтпуска) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не  указан порядок расчета отпуска!", Отказ, Заголовок);
	КонецЕсли;

	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры:
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Расчет среднего"": ";
	
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала базового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ, Заголовок);
		// Дата окончания базового периода
	ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры:
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборРасчетСреднего)
	
	СуммаРесурсов = ВыборкаПоСтрокамДокумента.Результат 
			+ ВыборкаПоСтрокамДокумента.ОтработаноДней + ВыборкаПоСтрокамДокумента.ОтработаноЧасов 
			+ ВыборкаПоСтрокамДокумента.ОтработаноПоПятидневке + ВыборкаПоСтрокамДокумента.НормаПоПятидневке;
		
	Если СуммаРесурсов <> 0 Тогда
		
		Движение = НаборРасчетСреднего.Добавить();
		
		СтрокаСвойствИзДокумента = "ПериодРегистрации,Сотрудник,ФизЛицо,Организация,ДатаНачалаСобытия";
		СтрокаСвойствИзСтрокиДокумента = "МесяцВыборки,БазовыйПериодНачало,БазовыйПериодКонец,ВидРасчета,СпособРасчета,Результат," 
										+ "ДатаНачалаРасчетногоПериода,ДатаОкончанияРасчетногоПериода,"
										+ "ОтработаноПоПятидневке,НормаПоПятидневке,ОтработаноДней,ОтработаноЧасов,"
										+ "КоэффициентИндексации,ЧислоМесяцев,КалендарныеДни,СпособРасчета";
		
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
		
		// Реквизиты
		Движение.ПериодРасчетаСреднегоЗаработка	= ВыборкаПоСтрокамДокумента.ЧислоМесяцевРасчета;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРасчетаСреднего()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента						- выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, УчетЗадолженностиПоМесяцам)
	
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КодДоходаНДФЛ) Тогда
		
		Движение = Движения.НДФЛСведенияОДоходах.Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоШапкеДокумента.ДатаУвольнения;
		
		// Измерения
		Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
		Движение.ФизЛицо					= ВыборкаПоШапкеДокумента.ФизЛицо;
		Движение.КодДохода					= ВыборкаПоСтрокамДокумента.КодДоходаНДФЛ;
		Движение.ПериодРегистрации			= НачалоМесяца(ПериодРегистрации);
		
		// Ресурсы
		Движение.СуммаДохода				= ВыборкаПоСтрокамДокумента.Результат; 
		
		// Реквизиты
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.ИсчисленоИзЗарплаты		= Истина;
		Движение.ПодразделениеОрганизации	= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		Движение.ВидРасчета = ВыборкаПоСтрокамДокумента.ВидРасчета; 
		
	КонецЕсли;
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
	
	// Свойства
	Движение.Период						= КонецМесяца(ПериодРегистрации);
	Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
	
	// Измерения
	Движение.Организация				= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.ФизЛицо					= ВыборкаПоШапкеДокумента.ФизЛицо;
	//vvv комментируем
	//Если УчетЗадолженностиПоМесяцам Тогда
		Движение.ПериодВзаиморасчетов		= ПериодРегистрации;
	//КонецЕсли;
	
	// Ресурсы
	Если ВыборкаПоСтрокамДокумента.ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни ИЛИ
		ВыборкаПоСтрокамДокумента.ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка Тогда
		
		Движение.СуммаВзаиморасчетов	= -ВыборкаПоСтрокамДокумента.Результат;
		
	Иначе
		Движение.СуммаВзаиморасчетов	= ВыборкаПоСтрокамДокумента.Результат;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоКомпенсации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)

	Движение = Движения.ФактическиеОтпускаОрганизаций.Добавить();
	
	// Свойства
	Движение.Период					= ВыборкаПоШапкеДокумента.ДатаУвольнения;

	// Измерения
	Движение.Сотрудник				= ВыборкаПоШапкеДокумента.Сотрудник;
	Движение.ВидЕжегодногоОтпуска	= ВыборкаПоШапкеДокумента.ВидЕжегодногоОтпуска;

	// Ресурсы
	Движение.Количество				= ВыборкаПоСтрокамДокумента.Показатель1 * ?(ВыборкаПоСтрокамДокумента.Сторно, -1, 1) * ?(ВыборкаПоСтрокамДокумента.Удержание, -1, 1);

	// Реквизиты
	Движение.ЭтоКомпенсация			= Истина;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоКомпенсации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	ПерерассчитываемыйДокумент = Неопределено
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ДатаУвольнения
	Если НЕ ЗначениеЗаполнено(ДатаУвольнения) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата увольнения работника!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат
	КонецЕсли; 
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда
		
		Движения.ДополнительныеНачисленияРаботниковОрганизаций.мВыполнятьСписаниеФактическогоОтпуска	= Истина;
		Движения.УдержанияРаботниковОрганизаций.мВыполнятьСписаниеФактическогоОтпуска					= Истина;
		
		УчетнаяПолитикаПоПерсоналуОрганизации  = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");	
		// ведется ли учет задолженности в разрезе периодов возникновения задолженности
		УчетЗадолженностиПоМесяцам				= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналуОрганизации, Организация, "УчетЗадолженностиПоМесяцам");
		
		// получим реквизиты табличной части
		ВыборкаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего(ВыборкаПоШапкеДокумента).Выбрать();
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ, Заголовок);
			Если НЕ Отказ Тогда
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Движения.РасчетСреднегоЗаработка);
			КонецЕсли;
		КонецЦикла;
		
		// перепишем данные из таблицы начислений в набор записей
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);
			Если НЕ Отказ Тогда
				Если ВыборкаПоНачислениям.Начисления Тогда
					Движение = ПроведениеРасчетов.ДобавитьСтрокуДополнительныхНачислений(Движения.ДополнительныеНачисленияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
					Движение.КоэффициентИндексации =  ВыборкаПоНачислениям.КоэффициентИндексации;
				Иначе
					ПроведениеРасчетов.ДобавитьСтрокуУдержаний(Движения.УдержанияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
					
				КонецЕсли;
				ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетЗадолженностиПоМесяцам);
				//
				//Если ВыборкаПоШапкеДокумента.ВидЕжегодногоОтпуска <> NULL Тогда
				//	ДобавитьСтрокуВДвиженияПоКомпенсации(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
				//КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для каждого Движение Из Движения.УдержанияРаботниковОрганизаций Цикл
			Движение.ДатаНачалаСобытия = ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
		КонецЦикла;
		
		// выполним удаление перерасчетов исправленного документа
		Если Не Отказ И ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
			ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка, Истина); // Только по исправленным документам
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток 		= 86400; // в секундах
мУдержаниеЗаОтпускУменьшаетНалоги = Неопределено;


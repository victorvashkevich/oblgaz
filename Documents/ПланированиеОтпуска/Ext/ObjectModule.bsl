////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Дата,
	|	Док.Ссылка
	|ИЗ
	|	Документ.ПланированиеОтпуска КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Работники" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоРаботники(Режим)
	

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);

	// Описание текста запроса:
	// 1. Выборка "ПерваяТаблица": 
	//		Представляет собой вложенный запрос, в котором:  
	//         - в выборке "ПланированиеОтпускаРаботники" выбираются строки документа
	//         - из основной таблицы регистра (выборка "СобытийныйПланЗанятостиФизлиц") 
	//           присоединяются даты движений, непосредственно предшествующих
	//           датам ДатаОкончания из строк документа
	// 2. Выборка "СобытийныйПланЗанятостиФизлиц": 
	//		Из основной таблицы регистра выбираются значения ресурсов на полученные  
	//      в первой выборке даты
	// 3. Выборка "ВтораяТаблица": 
	//		Среди строк документа ищем строки с пересекающимися периодами отпусков 
	//      для одного работника
	//
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПерваяТаблица.НомерСтроки КАК НомерСтроки,
	|	ПерваяТаблица.Сотрудник,
	|	ПерваяТаблица.Физлицо,
	|	ПерваяТаблица.ДатаНачала,
	|	ПерваяТаблица.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|					КОГДА СобытийныйПланЗанятостиФизлиц.ПериодЗавершения <= ПерваяТаблица.ДатаНачала
	|							И СобытийныйПланЗанятостиФизлиц.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА СобытийныйПланЗанятостиФизлиц.СостояниеЗавершения
	|					ИНАЧЕ СобытийныйПланЗанятостиФизлиц.Состояние
	|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Свободен)
	|				ИЛИ ПерваяТаблица.ДатаЗначения >= ПерваяТаблица.ДатаНачала
	|			ТОГДА ""Нельзя""
	|		ИНАЧЕ ""Можно""
	|	КОНЕЦ КАК ПроверяемоеЗначение,
	|	ПРЕДСТАВЛЕНИЕ(СобытийныйПланЗанятостиФизлиц.Регистратор) КАК Регистратор,
	|	МИНИМУМ(ВтораяТаблица.НомерСтроки) КАК КонфликтнаяСтрока,
	|	ПерваяТаблица.СостояниеУтверждения
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(СобытийныйПланЗанятостиФизлиц.Период) КАК ДатаЗначения,
	|		ПланированиеОтпускаРаботники.Сотрудник КАК Сотрудник,
	|		ПланированиеОтпускаРаботники.Сотрудник.Физлицо КАК Физлицо,
	|		ПланированиеОтпускаРаботники.ДатаОкончания КАК ДатаОкончания,
	|		ПланированиеОтпускаРаботники.ДатаНачала КАК ДатаНачала,
	|		ПланированиеОтпускаРаботники.Ссылка КАК Ссылка,
	|		ПланированиеОтпускаРаботники.НомерСтроки КАК НомерСтроки,
	|		ПланированиеОтпускаРаботники.СостояниеУтверждения КАК СостояниеУтверждения
	|	ИЗ
	|		Документ.ПланированиеОтпуска.Работники КАК ПланированиеОтпускаРаботники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
	|			ПО ПланированиеОтпускаРаботники.ДатаОкончания > СобытийныйПланЗанятостиФизлиц.Период
	|				И ПланированиеОтпускаРаботники.Сотрудник.Физлицо = СобытийныйПланЗанятостиФизлиц.ФизЛицо
	|	ГДЕ
	|		ПланированиеОтпускаРаботники.Ссылка = &ДокументСсылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПланированиеОтпускаРаботники.Сотрудник.Физлицо,
	|		ПланированиеОтпускаРаботники.ДатаОкончания,
	|		ПланированиеОтпускаРаботники.ДатаНачала,
	|		ПланированиеОтпускаРаботники.Ссылка,
	|		ПланированиеОтпускаРаботники.НомерСтроки,
	|		ПланированиеОтпускаРаботники.Сотрудник,
	|		ПланированиеОтпускаРаботники.СостояниеУтверждения) КАК ПерваяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
	|		ПО ПерваяТаблица.ДатаЗначения = СобытийныйПланЗанятостиФизлиц.Период
	|			И ПерваяТаблица.Физлицо = СобытийныйПланЗанятостиФизлиц.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланированиеОтпуска.Работники КАК ВтораяТаблица
	|		ПО ПерваяТаблица.Ссылка = ВтораяТаблица.Ссылка
	|			И ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки
	|			И (ПерваяТаблица.ДатаНачала <= ВтораяТаблица.ДатаНачала
	|					И ВтораяТаблица.ДатаНачала <= ПерваяТаблица.ДатаОкончания
	|				ИЛИ ПерваяТаблица.ДатаНачала <= ВтораяТаблица.ДатаОкончания
	|					И ВтораяТаблица.ДатаОкончания <= ПерваяТаблица.ДатаОкончания
	|				ИЛИ ВтораяТаблица.ДатаНачала <= ПерваяТаблица.ДатаНачала
	|					И ПерваяТаблица.ДатаОкончания <= ВтораяТаблица.ДатаОкончания)
	|			И ПерваяТаблица.Сотрудник = ВтораяТаблица.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ПерваяТаблица.НомерСтроки,
	|	СобытийныйПланЗанятостиФизлиц.Состояние,
	|	ПерваяТаблица.Физлицо,
	|	ПерваяТаблица.ДатаЗначения,
	|	ПерваяТаблица.ДатаНачала,
	|	ПерваяТаблица.ДатаОкончания,
	|	ПРЕДСТАВЛЕНИЕ(СобытийныйПланЗанятостиФизлиц.Регистратор),
	|	ПерваяТаблица.Сотрудник,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|					КОГДА СобытийныйПланЗанятостиФизлиц.ПериодЗавершения <= ПерваяТаблица.ДатаНачала
	|							И СобытийныйПланЗанятостиФизлиц.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА СобытийныйПланЗанятостиФизлиц.СостояниеЗавершения
	|					ИНАЧЕ СобытийныйПланЗанятостиФизлиц.Состояние
	|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Свободен)
	|				ИЛИ ПерваяТаблица.ДатаЗначения >= ПерваяТаблица.ДатаНачала
	|			ТОГДА ""Нельзя""
	|		ИНАЧЕ ""Можно""
	|	КОНЕЦ,
	|	ПерваяТаблица.СостояниеУтверждения";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботники()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Работники" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Сотрудники"": ";
	
	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаНачала
	НетДатыНачала = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
	Если НетДатыНачала Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала отпуска!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаОкончания
	НетДатыОкончания = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания);
	Если НетДатыОкончания Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания отпуска!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НетСотрудника ИЛИ НетДатыНачала ИЛИ НетДатыОкончания Тогда
		Возврат;
	КонецЕсли;
		
	// проверка корректности сочетаний реквизитов
	Если ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала отпуска не может превышать дату окончания отпуска!", Отказ, Заголовок);
	КонецЕсли;
		
	Если ВыборкаПоСтрокамДокумента.ПроверяемоеЗначение = "Нельзя" Тогда
		Расшифровки = Новый Массив;
		Расшифровки.Добавить(Новый Структура("Представление, Расшифровка", ВыборкаПоСтрокамДокумента.Регистратор, ВыборкаПоСтрокамДокумента.Регистратор));
		СтрокаПродолжениеСообщенияОбОшибке = " на указанный период уже был запланирован другой отпуск или мероприятие документом ";
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок, , Расшифровки);
	КонецЕсли;
		
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока <> Null  Тогда
		СтрокаПродолжениеСообщенияОбОшибке = " в строке №" + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока + " указан пересекающийся период отпуска!";
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	КонецЕсли;
		
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботника()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПараметров = "")

	Если ВыборкаПоРаботники.СостояниеУтверждения = Перечисления.СостоянияУтверждения.НеУтвержден Тогда
		Движение = Движения.СборДанныхДляПланированияЗанятостиФизлиц.Добавить();
		// Свойства
		Движение.Период					= ВыборкаПоРаботники.ДатаНачала;
		// Измерения
		Движение.Физлицо				= ВыборкаПоРаботники.Физлицо;
		Движение.Документ				= ВыборкаПоШапкеДокумента.Ссылка;
		// Ресурсы
		Движение.Состояние				= Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный;
		Движение.ПериодЗавершения		= КонецДня(ВыборкаПоРаботники.ДатаОкончания);
		Движение.СостояниеЗавершения	= Перечисления.ТипыПериодическихЗадачРаботника.Свободен;
		
	Иначе
		Движение = Движения.СобытийныйПланЗанятостиФизлиц.Добавить();
		// Свойства
		Движение.Период					= ВыборкаПоРаботники.ДатаНачала;
		// Измерения
		Движение.Физлицо				= ВыборкаПоРаботники.Физлицо;
		// Ресурсы
		Движение.Состояние				= Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный;
		Движение.ПериодЗавершения		= КонецДня(ВыборкаПоРаботники.ДатаОкончания);
		Движение.СостояниеЗавершения	= Перечисления.ТипыПериодическихЗадачРаботника.Свободен;
		
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда
			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботники(Режим);
			
			ВыборкаПоРаботники = РезультатЗапросаПоРаботники.Выбрать();
				
			Пока ВыборкаПоРаботники.Следующий() Цикл 
				ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.ГрафикОтпусковОрганизаций") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Основание.Проведен Тогда
			
			Работники.Загрузить(Основание.РаботникиОрганизации.Выгрузить());
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Работники);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Работники);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("СостояниеУтверждения", Перечисления.СостоянияУтверждения.Утвержден);
	УтвержденПолностью		= Работники.НайтиСтроки(СтруктураОтбора).Количество() = Работники.Количество();
	
	СтруктураОтбора.Вставить("СостояниеУтверждения", Перечисления.СостоянияУтверждения.НеУтвержден);
	НеУтвержденПолностью	= Работники.НайтиСтроки(СтруктураОтбора).Количество() = Работники.Количество();
		
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если УтвержденПолностью Тогда
			СостояниеУтвержденияДокумента	= Перечисления.СостоянияУтвержденияДокумента.УтвержденПолностьюПроведен;
		ИначеЕсли НеУтвержденПолностью Тогда
			СостояниеУтвержденияДокумента	= Перечисления.СостоянияУтвержденияДокумента.НеУтвержденПроведен;
		Иначе
			СостояниеУтвержденияДокумента	= Перечисления.СостоянияУтвержденияДокумента.УтвержденЧастичноПроведен;
		КонецЕсли;
		
	Иначе
		Если УтвержденПолностью Тогда
			СостояниеУтвержденияДокумента	= Перечисления.СостоянияУтвержденияДокумента.УтвержденПолностьюНеПроведен;
		ИначеЕсли НеУтвержденПолностью Тогда
			СостояниеУтвержденияДокумента	= Перечисления.СостоянияУтвержденияДокумента.НеУтвержденНеПроведен;
		Иначе
			СостояниеУтвержденияДокумента	= Перечисления.СостоянияУтвержденияДокумента.УтвержденЧастичноНеПроведен;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;

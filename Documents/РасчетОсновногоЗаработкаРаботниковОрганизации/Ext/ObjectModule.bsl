////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА
Перем мСведенияОВидахРасчетаОснНачислений;

// Формирует запрос по шапке документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" ,		Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаспределениеОсновногоЗаработка.Дата,
	|	РаспределениеОсновногоЗаработка.Организация,
	|	ВЫБОР
	|		КОГДА РаспределениеОсновногоЗаработка.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА РаспределениеОсновногоЗаработка.Организация
	|		ИНАЧЕ РаспределениеОсновногоЗаработка.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	РаспределениеОсновногоЗаработка.Период,	
	|	РаспределениеОсновногоЗаработка.НепосредственныйВводОтражения,
	|   РаспределениеОсновногоЗаработка.ВидРасчетаВыслуга,
	|   РаспределениеОсновногоЗаработка.ВидРасчетаВыслуга.СпособРасчета КАК СпособРасчетаВыслуга,
	|   РаспределениеОсновногоЗаработка.ВидРасчетаКлассность,
	|   РаспределениеОсновногоЗаработка.ВидРасчетаКлассность.СпособРасчета КАК СпособРасчетаКлассность,
	|   РаспределениеОсновногоЗаработка.ВидРасчетаКонтракт,
	|   РаспределениеОсновногоЗаработка.ВидРасчетаКонтракт.СпособРасчета КАК СпособРасчетаКонтракт,
	|   РаспределениеОсновногоЗаработка.ВидРасчетаПремияКонтракт,
	|   РаспределениеОсновногоЗаработка.ВидРасчетаПремияКонтракт.СпособРасчета КАК СпособРасчетаПремияКонтракт,
	|   РаспределениеОсновногоЗаработка.ВидРасчетаНочные,
	|   РаспределениеОсновногоЗаработка.ВидРасчетаВредность,
	|   РаспределениеОсновногоЗаработка.ВидРасчетаВыходныеПраздничные,
	|   РаспределениеОсновногоЗаработка.ВидРасчетаВыходныеПраздничные.СпособРасчета КАК СпособРасчетаВыходные,
	|   РаспределениеОсновногоЗаработка.ВидРасчетаСверхурочные,
	|   РаспределениеОсновногоЗаработка.ВидРасчетаСверхурочные.СпособРасчета КАК СпособРасчетаСверхурочные,
	|   РаспределениеОсновногоЗаработка.Выслуга,
	|   РаспределениеОсновногоЗаработка.Классность,
	|   РаспределениеОсновногоЗаработка.Контракт,
	|   РаспределениеОсновногоЗаработка.ПремияКонтракт,
	|   РаспределениеОсновногоЗаработка.Ночные,
	|   РаспределениеОсновногоЗаработка.Вредность,
	|   РаспределениеОсновногоЗаработка.ВыходныеПраздничные,
	|   РаспределениеОсновногоЗаработка.Сверхурочные,
	|	РаспределениеОсновногоЗаработка.Ссылка
	|ИЗ
	|	Документ.РасчетОсновногоЗаработкаРаботниковОрганизации КАК РаспределениеОсновногоЗаработка
	|ГДЕ
	|	РаспределениеОсновногоЗаработка.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Период", Период);
	//vvv
	Запрос.УстановитьПараметр("НачПериода",НачалоМесяца(ВыборкаПоШапкеДокумента.Период));
	Запрос.УстановитьПараметр("КонПериода",КонецМесяца(ВыборкаПоШапкеДокумента.Период));
	Запрос.УстановитьПараметр("Явка",Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокРаботников.Сотрудник,
	|	СписокРаботников.Сотрудник.Наименование,
	|	СписокРаботников.ДоляЕНВД КАК ПодпадаетПодЕНВД,
	|	СписокРаботников.ДоляСпособаОтражения КАК ИтогоОтражено,
	//vvv
	|	СУММА(ОтработаноВремени.Часов) КАК ЧасовОборот,
	|	СписокРаботников.ПериодДействияНачало КАК ПериодДействияНачало,
	|	СписокРаботников.ПериодДействияКонец КАК ПериодДействияКонец,
	//
	|	СписокРаботников.СтатьяЗатратЕНВД,
	|	СписокРаботников.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА СписокРаботников.Сотрудник.Организация = &Организация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	СуществующиеДвиженияЕНВД.РегистраторПредставление КАК КонфликтныйДокументЕНВД,
	|	СуществующиеДвиженияРаспределение.РегистраторПредставление КАК КонфликтныйДокументРаспределения
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаспределениеНачислений.Сотрудник КАК Сотрудник,
	//vvv
	|		РаспределениеНачислений.ПериодДействияНачало КАК ПериодДействияНачало,
	|		РаспределениеНачислений.ПериодДействияКонец КАК ПериодДействияКонец,
	//
	|		СУММА(РаспределениеНачислений.ДоляСпособаОтражения) КАК ДоляСпособаОтражения,
	|		СУММА(ВЫБОР
	|				КОГДА РаспределениеНачислений.ПодпадаетПодЕНВД
	|					ТОГДА РаспределениеНачислений.ДоляСпособаОтражения
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ДоляЕНВД,
	|		МИНИМУМ(РаспределениеНачислений.НомерСтроки) КАК НомерСтроки,
	|		МАКСИМУМ(РаспределениеНачислений.СтатьяЗатратЕНВД) КАК СтатьяЗатратЕНВД
	|	ИЗ
	|		Документ.ВводРаспределенияОсновногоЗаработкаРаботниковОрганизации.РаспределениеНачислений КАК РаспределениеНачислений
	|	ГДЕ
	|		РаспределениеНачислений.Ссылка = &ДокументСсылка
	|	
	|	СГРУППИРОВАТЬ ПО
	//vvv
	|		РаспределениеНачислений.ПериодДействияНачало,
	|		РаспределениеНачислений.ПериодДействияКонец,
	//
	|		РаспределениеНачислений.Сотрудник) КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СуществующееРаспределение.Сотрудник КАК Сотрудник,
	|			СуществующееРаспределение.Регистратор.Представление КАК РегистраторПредставление
	|		ИЗ
	|			РегистрСведений.РаспределениеОсновногоЗаработкаРаботниковОрганизаций КАК СуществующееРаспределение
	|		ГДЕ
	|			СуществующееРаспределение.ПериодРегистрации = &Период
	|			И СуществующееРаспределение.Организация = &Организация) КАК СуществующиеДвиженияРаспределение
	|		ПО СписокРаботников.Сотрудник = СуществующиеДвиженияРаспределение.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СуществующиеДвиженияЕНВД.Сотрудник КАК Сотрудник,
	|			СуществующиеДвиженияЕНВД.Регистратор.Представление КАК РегистраторПредставление
	|		ИЗ
	|			РегистрСведений.ПроцентДеятельностиЕНВДСотрудников КАК СуществующиеДвиженияЕНВД
	|		ГДЕ
	|			СуществующиеДвиженияЕНВД.ПериодРегистрации = &Период
	|			И СуществующиеДвиженияЕНВД.Организация = &Организация) КАК СуществующиеДвиженияЕНВД
	|		ПО СписокРаботников.Сотрудник = СуществующиеДвиженияЕНВД.Сотрудник
	//vvv
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработаноВремени
	|			ПО ОтработаноВремени.Сотрудник=СписокРаботников.Сотрудник
	|			И ОтработаноВремени.Организация = &Организация
	|			И ВидИспользованияРабочегоВремени = &Явка		
	|			И ОтработаноВремени.Период МЕЖДУ &НачПериода И &КонПериода  
	|			И (ОтработаноВремени.Период>=СписокРаботников.ПериодДействияНачало И ОтработаноВремени.Период<=СписокРаботников.ПериодДействияКонец)
	|СГРУППИРОВАТЬ ПО
	|	СписокРаботников.Сотрудник,
	|	СписокРаботников.Сотрудник.Наименование,
	|	СписокРаботников.ДоляЕНВД,
	|	СписокРаботников.ДоляСпособаОтражения,
	|	СписокРаботников.ПериодДействияНачало,
	|	СписокРаботников.ПериодДействияКонец,
	|	СписокРаботников.СтатьяЗатратЕНВД,
	|	СписокРаботников.НомерСтроки,
	|	ВЫБОР
	|		КОГДА СписокРаботников.Сотрудник.Организация = &Организация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	СуществующиеДвиженияЕНВД.РегистраторПредставление,
	|	СуществующиеДвиженияРаспределение.РегистраторПредставление
	//
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	СписокСтруктурныхПодразделений = ПроцедурыУправленияПерсоналом.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",	СписокСтруктурныхПодразделений);

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организация",Организация);
	МассивВидовВремени = Новый СписокЗначений;
	МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеНеотработанное);
	МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
	Запрос.УстановитьПараметр("ПочасовоеНачисление",МассивВидовВремени);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиДокумента.Ссылка,
	|	СтрокиДокумента.НомерСтроки,
	|	ВЫБОР
	|		КОГДА СтрокиДокумента.Ссылка.Выслуга
	|				И НЕ СтрокиДокумента.НетВыслуги
	|				И СтрокиДокумента.Ссылка.ВидРасчетаВыслуга <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ШкалаКоэффициентовСтажа.Величина, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоэффициентСтажа,
	|	ВЫБОР
	|		КОГДА СтрокиДокумента.Ссылка.Классность
	|				И НЕ СтрокиДокумента.НетКлассности
	|				И СтрокиДокумента.Ссылка.ВидРасчетаКлассность <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(НачисленияРаботниковОрганизации.Показатель1, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПроцентКлассности,
	|	ВЫБОР
	|		КОГДА СтрокиДокумента.Ссылка.Ночные	
	|				И СтрокиДокумента.Ссылка.ВидРасчетаНочные <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СтрокиДокумента.ЧасовНочных, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧасовНочных,
	|	ВЫБОР
	|		КОГДА СтрокиДокумента.Ссылка.Вредность	
	|				И СтрокиДокумента.Ссылка.ВидРасчетаВредность <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СтрокиДокумента.ЧасовВредности, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧасовВредности,
	|	ВЫБОР
	|		КОГДА СтрокиДокумента.Ссылка.ВыходныеПраздничные	
	|				И СтрокиДокумента.Ссылка.ВидРасчетаВыходныеПраздничные <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СтрокиДокумента.ЧасовВыходныхПраздничных, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧасовВыходныхПраздничных,
	|	ВЫБОР
	|		КОГДА СтрокиДокумента.Ссылка.Сверхурочные	
	|				И СтрокиДокумента.Ссылка.ВидРасчетаСверхурочные <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СтрокиДокумента.ЧасовСверхурочных, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧасовСверхурочных,
	|	ВЫБОР
	|		КОГДА СтрокиДокумента.Ссылка.Контракт
	|				И НЕ СтрокиДокумента.НетКонтракта
	|				И СтрокиДокумента.Ссылка.Контракт <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ТарифныеСтавкиРаботниковОрганизации.ТарифнаяСтавка, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТарифнаяСтавка,
	|	ВЫБОР
	|		КОГДА СтрокиДокумента.Ссылка.ПремияКонтракт
	|				И НЕ СтрокиДокумента.НетКонтракта
	|				И СтрокиДокумента.Ссылка.ВидРасчетаПремияКонтракт <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|			ТОГДА СтрокиДокумента.ПроцентПремии
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПроцентПремииКонтракт,
	|	СтрокиДокумента.Сотрудник КАК Сотрудник,
	|	ТарифныеСтавкиПервогоРазрядаОрганизаций.Размер КАК ТарифнаяСтавкаПервогоРазряда
	|ПОМЕСТИТЬ ВТПараметрыДляРасчета
	|ИЗ
	|	Документ.РасчетОсновногоЗаработкаРаботниковОрганизации.РаспределениеНачислений КАК СтрокиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Стажи КАК Стажи
	|		ПО СтрокиДокумента.Ссылка.ВидРасчетаВыслуга.ВидСтажа = Стажи.ВидСтажа
	|			И СтрокиДокумента.ФизЛицо = Стажи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаКоэффициентовСтажа КАК ШкалаКоэффициентовСтажа
	|		ПО СтрокиДокумента.Ссылка.ВидРасчетаВыслуга.КоэффициентСтажа = ШкалаКоэффициентовСтажа.КоэффициентСтажа
	|			И (Стажи.РазмерМесяцев + РАЗНОСТЬДАТ(Стажи.ДатаОтсчета, ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней), МЕСЯЦ) - ВЫБОР
	|				КОГДА ДЕНЬ(Стажи.ДатаОтсчета) > ДЕНЬ(ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней))
	|					ТОГДА ВЫБОР
	|							КОГДА &ПорядокРасчетаНадбавкиЗаСтаж = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаНадбавкиЗаСтаж.СменаВТекущемМесяце)
	|								ТОГДА 0
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ >= ШкалаКоэффициентовСтажа.СтажС)
	|			И (Стажи.РазмерМесяцев + РАЗНОСТЬДАТ(Стажи.ДатаОтсчета, ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней), МЕСЯЦ) - ВЫБОР
	|				КОГДА ДЕНЬ(Стажи.ДатаОтсчета) > ДЕНЬ(ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней))
	|					ТОГДА ВЫБОР
	|							КОГДА &ПорядокРасчетаНадбавкиЗаСтаж = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаНадбавкиЗаСтаж.СменаВТекущемМесяце)
	|								ТОГДА 0
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ < ВЫБОР
	|				КОГДА ШкалаКоэффициентовСтажа.СтажПо = 0
	|					ТОГДА 999999
	|				ИНАЧЕ ШкалаКоэффициентовСтажа.СтажПо
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаКоэффициентовСтажа КАК ШкалаСледКоэффициентовСтажа
	|		ПО СтрокиДокумента.Ссылка.ВидРасчетаВыслуга.КоэффициентСтажа = ШкалаСледКоэффициентовСтажа.КоэффициентСтажа
	|			И (Стажи.РазмерМесяцев + РАЗНОСТЬДАТ(Стажи.ДатаОтсчета, ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней), МЕСЯЦ) - ВЫБОР
	|				КОГДА ДЕНЬ(Стажи.ДатаОтсчета) >= ДЕНЬ(ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней))
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ = ШкалаКоэффициентовСтажа.СтажПо - 1)
	|			И (ШкалаСледКоэффициентовСтажа.НомерСтрокиШкалы = ШкалаКоэффициентовСтажа.НомерСтрокиШкалы + 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|				&парамНачало,
	|				ДокументОснование = ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
	|					И ВидРасчета = &ВидРасчетаКлассность) КАК НачисленияРаботниковОрганизации
	|		ПО СтрокиДокумента.Сотрудник = НачисленияРаботниковОрганизации.Сотрудник
	|			И (ВЫБОР
	|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
	|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА НачисленияРаботниковОрганизации.ДействиеЗавершения
	|				ИНАЧЕ НачисленияРаботниковОрганизации.Действие
	|			КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации.СрезПоследних(&парамНачало, ) КАК ТарифныеСтавкиРаботниковОрганизации
	|		ПО СтрокиДокумента.Сотрудник = ТарифныеСтавкиРаботниковОрганизации.Сотрудник
	//
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций.СрезПоследних(&парамНачало, Организация=&Организация) КАК ТарифныеСтавкиПервогоРазрядаОрганизаций	
	|		ПО ИСТИНА
	//
	|ГДЕ
	|	СтрокиДокумента.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";

	Запрос.УстановитьПараметр("парамНачало",НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ПорядокРасчетаНадбавкиЗаСтаж",РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Получить(Новый Структура("Организация", ОбщегоНазначения.ГоловнаяОрганизация(Организация))).ПорядокРасчетаНадбавкиЗаСтаж);
	Запрос.УстановитьПараметр("ВидРасчетаКлассность",ВидРасчетаКлассность);
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиДокумента.Ссылка,
	|	СтрокиДокумента.НомерСтроки,
	|	СтрокиДокумента.Сотрудник КАК Сотрудник,
	|	СтрокиДокумента.Физлицо,
	|	СтрокиДокумента.ВидРасчета,
	|	СтрокиДокумента.ВидРасчетаПремия,
	|	СтрокиДокумента.ПроцентПремии,
	|	СтрокиДокумента.ПроцентСниженияПремии,
	|	СтрокиДокумента.СтавкаВредности,
	|	ПараметрыДляРасчета.ЧасовВредности КАК ЧасовВредности, 
	|	ПараметрыДляРасчета.ЧасовНочных КАК ЧасовНочных, 
	|	ПараметрыДляРасчета.ЧасовСверхурочных КАК ЧасовСверхурочных, 
	|	ПараметрыДляРасчета.ЧасовВыходныхПраздничных КАК ЧасовВыходныхПраздничных, 
	|	ЕСТЬNULL(ПараметрыДляРасчета.КоэффициентСтажа,0) КАК КоэффициентСтажа,
	|	ЕСТЬNULL(ПараметрыДляРасчета.ПроцентКлассности,0) КАК ПроцентКлассности,
	|	ЕСТЬNULL(ПараметрыДляРасчета.ТарифнаяСтавка,0) КАК ТарифнаяСтавка,
	|	ЕСТЬNULL(ПараметрыДляРасчета.ПроцентПремииКонтракт,0) КАК ПроцентПремииКонтракт,
	|	ЕСТЬNULL(ПараметрыДляРасчета.ТарифнаяСтавкаПервогоРазряда,0) КАК ТарифнаяСтавкаПервогоРазряда,
	|	НАЧАЛОПЕРИОДА(СтрокиДокумента.Ссылка.Период,МЕСЯЦ) КАК ПериодДействия,
	|	НАЧАЛОПЕРИОДА(СтрокиДокумента.Ссылка.Период,МЕСЯЦ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(СтрокиДокумента.Ссылка.Период,МЕСЯЦ) КАК ДатаОкончания,
	|	СтрокиДокумента.Показатель1,
	|	СтрокиДокумента.Показатель2,
	|	СтрокиДокумента.Показатель3,
	|	СтрокиДокумента.Показатель4,
	|	СтрокиДокумента.Показатель5,
	|	СтрокиДокумента.Показатель6,
	|	СтрокиДокумента.Результат,
	|	СтрокиДокумента.ПодразделениеОрганизации,
	|	СтрокиДокумента.СчетДт,
	|	СтрокиДокумента.СубконтоДт1,
	|	СтрокиДокумента.СубконтоДт2,
	|	СтрокиДокумента.СубконтоДт3,
	|	СтрокиДокумента.СубконтоДт4,
	|	СтрокиДокумента.СпособОтраженияВБухучете,
	|	НАЧАЛОПЕРИОДА(СтрокиДокумента.Ссылка.Период,МЕСЯЦ) КАК ДатаНачалаСобытия,
	|	СтрокиДокумента.ППС,
	|	СтрокиДокумента.Должность,
	|	СтрокиДокумента.Авторасчет,
	|	СтрокиДокумента.ОплаченоДнейЧасов
	|ПОМЕСТИТЬ ВТСтрокиНачислений
	|ИЗ
	|	Документ.РасчетОсновногоЗаработкаРаботниковОрганизации.РаспределениеНачислений КАК СтрокиДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыДляРасчета КАК ПараметрыДляРасчета
	|	ПО ПараметрыДляРасчета.НомерСтроки=СтрокиДокумента.НомерСтроки 
	|ГДЕ
	|	СтрокиДокумента.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия";
	Запрос.Выполнить();
	
	// ВТГрафикиСотрудников
	//		таблица содержит номера строк документа с данными о графике указанного
	//		в этой строке сотрудника из рег-ра сведений РаботникиОрганизации
	// 
	//	Поля:
	//		НомерСтроки
	//      ГрафикРаботы
	//      ГрафикПолногоРабочегоВремени
	//      СуммированныйУчетРабочегоВремени
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоследниеДаты.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикПолногоРабочегоВремени,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|	КОНЕЦ КАК СуммированныйУчетРабочегоВремени
	|ПОМЕСТИТЬ ВТГрафикиСотрудников
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|		СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|		СтрокиНачисления.Сотрудник КАК Сотрудник,
	|		СтрокиНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия
	|	ИЗ
	|		ВТСтрокиНачислений КАК СтрокиНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ПО СтрокиНачисления.ДатаНачалаСобытия >= РаботникиОрганизации.Период
	|				И СтрокиНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СтрокиНачисления.НомерСтроки,
	|		СтрокиНачисления.Сотрудник,
	|		СтрокиНачисления.ДатаНачалаСобытия) КАК ПоследниеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ПоследниеДаты.МаксПериод = РаботникиОрганизации.Период
	|			И ПоследниеДаты.Сотрудник = РаботникиОрганизации.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	// ВТДанныеИндивидуальныхГрафиковИТабелей
	//		таблица содержит номера строк документа с сотрудниками, для которых введены 
	//		подробные документы использования времени: инд.графики и табели
	// 
	//	Поля:
	//		НомерСтроки
	//      План
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	ГрафикиРаботыПоВидамВремени.План КАК План
	|ПОМЕСТИТЬ ВТДанныеИндивидуальныхГрафиковИТабелей
	|ИЗ
	|	ВТСтрокиНачислений КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СтрокиНачисления.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И СтрокиНачисления.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	План";
	Запрос.Выполнить();
	
	// СводныеИндивидуальныеГрафикиРаботы
	//		таблица содержит номера строк документа с сотрудниками, для которых введены сводные 
	//		данные об их графике
	// 
	//	Поля:
	//		НомерСтроки
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокРаботников.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафикиРаботы
	|ИЗ
	|	ВТСтрокиНачислений КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО СписокРаботников.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И СписокРаботников.ПериодДействия = СводныеИндивидуальныеГрафики.Месяц
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.Сотрудник.Наименование,
	|	ТЧНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(ТЧНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ТЧНачисления.ДатаНачала, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТЧНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ТЧНачисления.ДатаОкончания, МЕСЯЦ, -1), МЕСЯЦ)
	|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			КОНЕЦ
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ТЧНачисления.ВидРасчетаПремия КАК ВидРасчетаПремия,
	|	ТЧНачисления.ВидРасчетаПремия.СпособРасчета КАК СпособРасчетаПремия,
	|	ТЧНачисления.ПроцентПремии КАК ПроцентПремии,
	|	ТЧНачисления.ПроцентСниженияПремии КАК ПроцентСниженияПремии,
	|	ТЧНачисления.КоэффициентСтажа КАК КоэффициентСтажа,
	|	ТЧНачисления.ПроцентКлассности КАК ПроцентКлассности,
	|	ТЧНачисления.ТарифнаяСтавка КАК ТарифнаяСтавка,
	|	ТЧНачисления.ПроцентПремииКонтракт КАК ПроцентПремииКонтракт,
	|	ТЧНачисления.ЧасовНочных КАК ЧасовНочных,
	|	ТЧНачисления.ЧасовВредности КАК ЧасовВредности,
	|	ТЧНачисления.ЧасовВыходныхПраздничных КАК ЧасовВыходныхПраздничных,
	|	ТЧНачисления.ЧасовСверхурочных КАК ЧасовСверхурочных,
	|	ТЧНачисления.СтавкаВредности КАК СтавкаВредности,
	|	ТЧНачисления.ТарифнаяСтавкаПервогоРазряда КАК ТарифнаяСтавкаПервогоРазряда,
	|	ТЧНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ТЧНачисления.ВидРасчета.ВидВремени КАК ВидВремени,
	|	ТЧНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ТЧНачисления.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	ТЧНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.НеОбрабатывать)КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете,
	|	ТЧНачисления.Показатель1,
	|	ТЧНачисления.Показатель2,
	|	ТЧНачисления.Показатель3,
	|	ТЧНачисления.Показатель4,
	|	ТЧНачисления.Показатель5,
	|	ТЧНачисления.Показатель6,
	|	ТЧНачисления.Результат,
	|	ТЧНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТЧНачисления.СчетДт,
	|	ТЧНачисления.СубконтоДт1,
	|	ТЧНачисления.СубконтоДт2,
	|	ТЧНачисления.СубконтоДт3,
	|	ТЧНачисления.СубконтоДт4,
	|	ТЧНачисления.СпособОтраженияВБухучете,
	|	ВЫБОР
	|		КОГДА ГрафикРаботыПоСотруднику.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы
	|		ИНАЧЕ ТЧНачисления.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
			// если введен табель, но нет индивидуального графика, то норму времени надо считать по данным ""общего графика""
	|		КОГДА ТабелиУчетаВремениПоСотруднику.НомерСтроки ЕСТЬ НЕ NULL
	|				И ИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ NULL
	|				И СводныеИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы
			// если у работника сокращенное рабочее время, а норма времени определяется по полному графику
			// и введен индивидуальный график, то норму времени надо считать по-прежнему по данным ""общего графика""
	|		КОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|				И (ИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ НЕ NULL
	|					ИЛИ СводныеИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ НЕ NULL )
	|			ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикРаботыНорма,
	|	ЕСТЬNULL(ДанныеПоРаботникуНаДатуНачисления.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	ТЧНачисления.ОплаченоДнейЧасов,
	|	ТЧНачисления.ППС,
	|	ТЧНачисления.Должность,
	|	ТЧНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА (НЕ ТЧНачисления.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ТЧНачисления.Авторасчет
	|ИЗ
	|	ВТСтрокиНачислений КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСотрудников КАК ДанныеПоРаботникуНаДатуНачисления
	|		ПО ТЧНачисления.НомерСтроки = ДанныеПоРаботникуНаДатуНачисления.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК ТЧНачисления) КАК ГрафикРаботыПоСотруднику
	|		ПО ТЧНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК ТЧНачисления
	|		ГДЕ
	|			(НЕ ТЧНачисления.План)) КАК ТабелиУчетаВремениПоСотруднику
	|		ПО ТЧНачисления.НомерСтроки = ТабелиУчетаВремениПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК ТЧНачисления
	|		ГДЕ
	|			ТЧНачисления.План) КАК ИндивидуальныеГрафикиРаботы
	|		ПО ТЧНачисления.НомерСтроки = ИндивидуальныеГрафикиРаботы.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеИндивидуальныеГрафикиРаботы КАК СводныеИндивидуальныеГрафикиРаботы
	|		ПО ТЧНачисления.НомерСтроки = СводныеИндивидуальныеГрафикиРаботы.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()


// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизацииРаспределение(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	//vvv
	Запрос.УстановитьПараметр("Организация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("НачПериода",НачалоМесяца(ВыборкаПоШапкеДокумента.Период));
	Запрос.УстановитьПараметр("КонПериода",КонецМесяца(ВыборкаПоШапкеДокумента.Период));
	Запрос.УстановитьПараметр("Явка",Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
	//
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокРаспределения.Сотрудник,
	|	СписокРаспределения.СпособОтраженияВБухучете,
	//vvv
	//|	СписокРаспределения.ДоляСпособаОтражения,
	|	СписокРаспределения.СчетДт,
	|	СписокРаспределения.Ссылка.НепосредственныйВводОтражения КАК НепосредственныйВводОтражения,
	|	СписокРаспределения.СубконтоДт1,
	|	СписокРаспределения.СубконтоДт2,
	|	СписокРаспределения.СубконтоДт3,
	|	СписокРаспределения.СубконтоДт4,
	|	СписокРаспределения.ДоляСпособаОтражения КАК ДоляСпособаОтражения,
	|	СУММА(ОтработаноВремени.Часов) КАК ЧасовОборот,
	|	СписокРаспределения.ВидРасчета,
	|	СписокРаспределения.ПериодДействияНачало,
	|	СписокРаспределения.ПериодДействияКонец,
	//
	|	СписокРаспределения.ПодпадаетПодЕНВД,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СчетВыбран,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.БольничныйЗаСчетРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК БольничныйЗаСчетРаботодателя,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеОтражатьВБухучете,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтражениеНачисленийПоУмолчанию,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПустойСпособОтражения,	
	|	СписокРаспределения.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ВводРаспределенияОсновногоЗаработкаРаботниковОрганизации.РаспределениеНачислений КАК СписокРаспределения
	//vvv
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработаноВремени
	|		ПО ОтработаноВремени.Сотрудник=СписокРаспределения.Сотрудник
	|		И ОтработаноВремени.Организация = &Организация
	|		И ВидИспользованияРабочегоВремени = &Явка
	|		И ОтработаноВремени.Период МЕЖДУ &НачПериода И &КонПериода  
	|		И (ОтработаноВремени.Период>=СписокРаспределения.ПериодДействияНачало И ОтработаноВремени.Период<=СписокРаспределения.ПериодДействияКонец)
	//
	|ГДЕ
	|	СписокРаспределения.Ссылка = &ДокументСсылка
	|
	//vvv
	|СГРУППИРОВАТЬ ПО
	|	СписокРаспределения.Сотрудник,
	|	СписокРаспределения.СпособОтраженияВБухучете,
	|	СписокРаспределения.СчетДт,
	|	СписокРаспределения.Ссылка.НепосредственныйВводОтражения,
	|	СписокРаспределения.СубконтоДт1,
	|	СписокРаспределения.СубконтоДт2,
	|	СписокРаспределения.СубконтоДт3,
	|	СписокРаспределения.СубконтоДт4,
	|	СписокРаспределения.ВидРасчета,
	|	СписокРаспределения.ПериодДействияНачало,
	|	СписокРаспределения.ПериодДействияКонец,
	|	СписокРаспределения.ДоляСпособаОтражения,
	|	СписокРаспределения.ПодпадаетПодЕНВД,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.БольничныйЗаСчетРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,	
	|	СписокРаспределения.НомерСтроки
	//
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизацииРаспределение()
//vvv
Функция ПолучитьНаименованиеСпособаОтражения(СпособОтражения)

	НаименовниеДебета = "";
	СубконтоДебета = "";
	Если ЗначениеЗаполнено(СпособОтражения.СчетДт) Тогда
		ВидыСубконтоСчета = СпособОтражения.СчетДт.ВидыСубконто;
		Для Ном = 1 по ВидыСубконтоСчета.Количество() Цикл
			Если ЗначениеЗаполнено(СпособОтражения["СубконтоДт"+Ном]) Тогда
				Если ТипЗнч(СпособОтражения["СубконтоДт"+Ном])=Тип("СправочникСсылка.ПодразделенияОрганизаций") или 
					 ТипЗнч(СпособОтражения["СубконтоДт"+Ном])=Тип("СправочникСсылка.Автомобили") Тогда
					СубконтоДебета = СубконтоДебета + "<" + СокрЛП(Строка(СпособОтражения["СубконтоДт"+Ном].Владелец))+"."+СокрЛП(Строка(СпособОтражения["СубконтоДт"+Ном])) + "> ";
				Иначе
					СубконтоДебета = СубконтоДебета + "<" + СокрЛП(Строка(СпособОтражения["СубконтоДт"+Ном])) + "> ";					
				КонецЕсли;
			ИначеЕсли ВидыСубконтоСчета[Ном-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации Тогда
				//пропускаем
			ИначеЕсли ВидыСубконтоСчета[Ном-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения Тогда	
				СубконтоДебета = СубконтоДебета + "<подб. авт.> ";
			Иначе
				СубконтоДебета = СубконтоДебета + "<...> ";
			КонецЕсли;	
		КонецЦикла;                 
		НаименовниеДебета = "Дт" + СпособОтражения.СчетДт + " " + СубконтоДебета;
	КонецЕсли;
	
	НаименовниеКредита = "";
	СубконтоКредита = "";
	Если ЗначениеЗаполнено(СпособОтражения.СчетКт) Тогда
		ВидыСубконтоСчета = СпособОтражения.СчетКт.ВидыСубконто;
		Для Ном = 1 по ВидыСубконтоСчета.Количество() Цикл
			Если ЗначениеЗаполнено(СпособОтражения["СубконтоКт"+Ном]) Тогда
				Если ТипЗнч(СпособОтражения["СубконтоКт"+Ном])=Тип("СправочникСсылка.ПодразделенияОрганизаций") или 
					 ТипЗнч(СпособОтражения["СубконтоКт"+Ном])=Тип("СправочникСсылка.Автомобили") Тогда
					СубконтоКредита = СубконтоКредита + "<" + СокрЛП(Строка(СпособОтражения["СубконтоКт"+Ном].Владелец))+"."+СокрЛП(Строка(СпособОтражения["СубконтоКт"+Ном])) + "> ";
				Иначе
					СубконтоКредита = СубконтоКредита + "<" +СокрЛП(Строка(СпособОтражения["СубконтоКт"+Ном])) + "> ";					
				КонецЕсли;
			ИначеЕсли ВидыСубконтоСчета[Ном-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации Тогда
				//пропускаем
			ИначеЕсли ВидыСубконтоСчета[Ном-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения Тогда	
				СубконтоКредита = СубконтоКредита + "<подб. авт.> ";
			Иначе
				СубконтоКредита = СубконтоКредита + "<...> ";
			КонецЕсли;	
		КонецЦикла;
		НаименовниеКредита = "Кт" + СпособОтражения.СчетКт + " " + СубконтоКредита;
	КонецЕсли;
	
	Возврат СОКРЛП(НаименовниеДебета + " " + НаименовниеКредита);


КонецФункции // ПолучитьНаименованиеСпособаОтражения()
//vvv
Функция ПодобратьСпособОтражения(СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СубконтоДт4)
	
	Запрос=Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпособыОтраженияЗарплатыВРеглУчете.Ссылка
	|ИЗ
	|	Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК СпособыОтраженияЗарплатыВРеглУчете
	|ГДЕ
	|	СпособыОтраженияЗарплатыВРеглУчете.СчетДт = &СчетДт
	|	И СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт1 = &СубконтоДт1
	|	И СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт2 = &СубконтоДт2
	|	И СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт3 = &СубконтоДт3
	|	И СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт4 = &СубконтоДт4
	|	И СпособыОтраженияЗарплатыВРеглУчете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда)";
	
	Запрос.УстановитьПараметр("СчетДт",СчетДТ);
	Запрос.УстановитьПараметр("СубконтоДт1",СубконтоДт1);
	Запрос.УстановитьПараметр("СубконтоДт2",СубконтоДт2);
	Запрос.УстановитьПараметр("СубконтоДт3",СубконтоДт3);
	Запрос.УстановитьПараметр("СубконтоДт4",СубконтоДт4);
	Выборка=Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СпособОтражения=Выборка.Ссылка;
	Иначе
		Отражение = Справочники.СпособыОтраженияЗарплатыВРеглУчете.СоздатьЭлемент();
		Отражение.СчетДт=СчетДТ;       
		Отражение.СубконтоДт1=СубконтоДт1;
		Отражение.СубконтоДт2=СубконтоДт2;
		Отражение.СубконтоДт3=СубконтоДт3;
		Отражение.СубконтоДт4=СубконтоДт4;
		Отражение.СчетКт=ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		Отражение.Наименование = ПолучитьНаименованиеСпособаОтражения(Отражение);
		Отражение.Записать();
		СпособОтражения=Отражение.Ссылка;
		Сообщить("Создан новый способ отражения "+СокрЛП(Отражение.Наименование));
	КонецЕсли;

	Возврат СпособОтражения;
	
КонецФункции

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;	
		
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Период) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан Сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;

	// Дата начала события
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала события!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.НепосредственныйВводОтражения ТОгда
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетДт) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан счет дебета!", Отказ, Заголовок);
		КонецЕсли;	
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетДт) ТОгда
			Для НомерСубконто=1 По ВыборкаПоСтрокамДокумента.СчетДт.ВидыСубконто.Количество() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["СубконтоДт"+Строка(НомерСубконто)]) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано субконто Дт" +Строка(НомерСубконто)+"!", Отказ, Заголовок);
				КонецЕсли;			
			КонецЦикла;		
		КонецЕсли;		
	Иначе
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете.СчетДт) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан счет дебета!", Отказ, Заголовок);
		КонецЕсли;	
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете.СчетДт) ТОгда
			Для НомерСубконто=1 По ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете.СчетДт.ВидыСубконто.Количество() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете["СубконтоДт"+Строка(НомерСубконто)]) Тогда				
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано субконто Дт" +Строка(НомерСубконто)+"!", Отказ, Заголовок);
				КонецЕсли;			
			КонецЦикла;	
		КонецЕсли;		
	КонецЕсли;		
		
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
		// Подразделение
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение организации!", Отказ, Заголовок);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
		КонецЕсли;
		
		// График работы
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "по состоянию на " + Формат(ВыборкаПоСтрокамДокумента.ПериодДействияНачало,"ДЛФ=DD") + " не задан рабочий график работника, либо он еще не принят на работу!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса
//	Отказ						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Распределение основного заработка"": ";
									
									
	//vvv
	//добавляем условие на непосредственный ввод
	Если Не ВыборкаПоСтрокамДокумента.НеПосредственныйВводОтражения Тогда
		
		Если ВыборкаПоСтрокамДокумента.ПустойСпособОтражения Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан способ отражения!", Отказ, Заголовок);
		КонецЕсли;
	
		// Проверка способа отражения
		Если ВыборкаПоСтрокамДокумента.БольничныйЗаСчетРаботодателя ИЛИ ВыборкаПоСтрокамДокумента.НеОтражатьВБухучете Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "заданный способ отражения нельзя указывать в документе!", Отказ, Заголовок);
		ИначеЕсли Не ВыборкаПоСтрокамДокумента.СчетВыбран Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "в способе отражения не задан счет дебета и/или кредита!", Отказ, Заголовок);
		КонецЕсли;
		
	Иначе	
		
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетДт) И ВыборкаПоСтрокамДокумента.НеПосредственныйВводОтражения Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан счет дебета!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса
//	Отказ						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеДанныхПоРаботнику(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ЕстьЕНВД)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Распределение основного заработка"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран работник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник и организация
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + ВыборкаПоСтрокамДокумента.СотрудникНаименование+" работает в другой организации!", Отказ, Заголовок);
	КонецЕсли;
	
	//vvv
	Если ВыборкаПоШапкеДокумента.ВидРаспределения=Перечисления.ВидыРаспределенияОсновногоЗаработка.КоличествоЧасов Тогда
		Если ВыборкаПоСтрокамДокумента.ИтогоОтражено <> ВыборкаПоСтрокамДокумента.ЧасовОборот Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "суммарное количество введеных часов по работнику не совпадает с отработанным временем!", Отказ, Заголовок);
		КонецЕсли;
	Иначе
	//	
		Если ВыборкаПоСтрокамДокумента.ИтогоОтражено <> 100 Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "суммарная доля распределения начислений по работнику не равна 100%!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	//
	// Движения в регистре доли ЕНВД
	//Если ЕстьЕНВД И ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтныйДокументЕНВД) Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "на период "+ Формат(ВыборкаПоШапкеДокумента.Период, "ДФ='ММММ гггг'") + " процент деятельностьи ЕНВД уже зарегистрирован документом " + Символы.ПС + ВыборкаПоСтрокамДокумента.КонфликтныйДокументЕНВД + "!", Отказ, Заголовок);
	//КонецЕсли;
	
	// Движения в регистре распределения
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтныйДокументРаспределения) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "на период "+ Формат(ВыборкаПоШапкеДокумента.Период, "ДФ='ММММ гггг'") + " распределение основного заработка уже зарегистрировано документом " + Символы.ПС + ВыборкаПоСтрокамДокумента.КонфликтныйДокументРаспределения + "!", Отказ, Заголовок);
	КонецЕсли;

	
КонецПроцедуры // ПроверитьЗаполнениеДанныхПоРаботнику()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//	ВыборкаПоШапкеДокумента					- выборка из результата запроса по шапке документа,
//	ИмяРегистра								- строка, имя регистрапо которому делаем движения
//	СтруктураПараметров						- структура параметров проведения,
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, ИмяРегистра)
	
	Движение = Движения[ИмяРегистра].Добавить();
	
	Если ИмяРегистра = "ПроцентДеятельностиЕНВДСотрудников" Тогда
		// Измерения
		Движение.ПериодРегистрации	= ВыборкаПоШапкеДокумента.Период;
		Движение.Сотрудник			= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// Ресурсы
		Движение.ПодпадаетПодЕНВД	= ВыборкаПоРаботникиОрганизации.ПодпадаетПодЕНВД;
		Движение.СтатьяЗатратЕНВД	= ВыборкаПоРаботникиОрганизации.СтатьяЗатратЕНВД;
		
	ИначеЕсли ИмяРегистра = "РаспределениеОсновногоЗаработкаРаботниковОрганизаций" Тогда	
		
		// Измерения
		Движение.ПериодРегистрации			= ВыборкаПоШапкеДокумента.Период;
		Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.СпособОтраженияВБухучете 	= ВыборкаПоРаботникиОрганизации.СпособОтраженияВБухучете;
		//vvv
		Если ВыборкаПоШапкеДокумента.НепосредственныйВводОтражения Тогда
			Движение.СпособОтраженияВБухучете 	= ПодобратьСпособОтражения(ВыборкаПоРаботникиОрганизации.СчетДт,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт1,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт2,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт3,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт4);
		КонецЕсли;		
		Движение.ПериодДействияНачало		= ВыборкаПоРаботникиОрганизации.ПериодДействияНачало;
		Движение.ПериодДействияКонец		= ВыборкаПоРаботникиОрганизации.ПериодДействияКонец;
		//
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// Ресурсы
		Движение.ДоляСпособаОтражения		= ВыборкаПоРаботникиОрганизации.ДоляСпособаОтражения;
		Движение.ПодпадаетПодЕНВД			= ВыборкаПоРаботникиОрганизации.ПодпадаетПодЕНВД;
		
	//vvv
	ИначеЕсли ИмяРегистра = "РаспределениеВидовРасчетаРаботниковОрганизаций" Тогда	
		
		// Измерения
		Движение.ПериодРегистрации			= ВыборкаПоШапкеДокумента.Период;
		Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ПериодДействияНачало		= ВыборкаПоРаботникиОрганизации.ПериодДействияНачало;
		Движение.ПериодДействияКонец		= ВыборкаПоРаботникиОрганизации.ПериодДействияКонец;
		Движение.ВидРасчета					= ВыборкаПоРаботникиОрганизации.ВидРасчета;
		
		// Ресурсы
		Движение.СпособОтраженияВБухучете 	= ВыборкаПоРаботникиОрганизации.СпособОтраженияВБухучете;		
		Если ВыборкаПоШапкеДокумента.НепосредственныйВводОтражения Тогда
			Движение.СпособОтраженияВБухучете 	= ПодобратьСпособОтражения(ВыборкаПоРаботникиОрганизации.СчетДт,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт1,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт2,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт3,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт4);
		КонецЕсли;				
	//
		
	КонецЕсли; 
	
		
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

// Функция возвращает график работы  сотрудника, на указанную дату, 
// если сотрудник еще не работал на указанную дату, тогда возвращается ближайший график (срез первых)
Функция ПолучитьГрафикСотрудникаНаДату(Сотрудник, ДатаПолученияГрафика)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Месяц", ДатаПолученияГрафика);
	Запрос.Текст = "ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Месяц, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних
	|ГДЕ
	|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПервых.ГрафикРаботы
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПервых(&Месяц, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПервых
	|ГДЕ
	|	РаботникиОрганизацийСрезПервых.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ГрафикРаботы;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // ПолучитьГрафикСотрудникаНаДату(Сотрудник, ДатаПолученияГрафика()

Процедура СформироватьОтражениеВУчете(ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	СчетУчетаРасчетовСРаботниками = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("парамСсылка",			Ссылка);
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Основные.Сотрудник.Физлицо КАК Физлицо,
	|	Основные.Сотрудник КАК Сотрудник,
	|	Основные.Результат КАК Результат,
	|	Основные.ПериодДействияНачало,
	|	Основные.ПериодДействияКонец,
	|	Основные.ПериодРегистрации,
	|	Основные.СпособОтраженияВБухучете.СчетДт КАК СчетДт,
	|	Основные.СпособОтраженияВБухучете.СубконтоДт1 КАК СубконтоДт1,
	|	Основные.СпособОтраженияВБухучете.СубконтоДт2 КАК СубконтоДт2,
	|	Основные.СпособОтраженияВБухучете.СубконтоДт3 КАК СубконтоДт3,
	|	Основные.СпособОтраженияВБухучете.СубконтоДт4 КАК СубконтоДт4,
	|	Основные.ВидРасчета
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основные
	|ГДЕ
	|	Основные.Регистратор = &парамСсылка
	|	И Основные.Результат <> 0";
	
	
	ВыборкаПоОтражению=Запрос.Выполнить().Выбрать();
	
	
	Пока ВыборкаПоОтражению.Следующий() Цикл
		
		СтрокаНабора = НаборЗаписей.Добавить();
						
		// свойства
		СтрокаНабора.ПериодРегистрации			= ВыборкаПоШапкеДокумента.Период;
		ПериодДействияНачало 					= ВыборкаПоШапкеДокумента.Период;
		ПериодДействияКонец 					= КонецМесяца(ВыборкаПоШапкеДокумента.Период);

		СтрокаНабора.ПериодДействияНачало		= ВыборкаПоОтражению.ПериодДействияНачало;
		СтрокаНабора.ПериодДействияКонец		= ВыборкаПоОтражению.ПериодДействияКонец;
		СтрокаНабора.ВидРасчета					= ВыборкаПоОтражению.ВидРасчета;
		
		// Измерения
		СтрокаНабора.Сотрудник					= ВыборкаПоОтражению.Сотрудник;
		СтрокаНабора.Физлицо					= ВыборкаПоОтражению.Физлицо;
		СтрокаНабора.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// ресурсы
		СтрокаНабора.Результат					= ВыборкаПоОтражению.Результат;
		
		// реквизиты
		СтрокаНабора.ГрафикРаботы				= ПолучитьГрафикСотрудникаНаДату(ВыборкаПоОтражению.Сотрудник, ВыборкаПоОтражению.ПериодДействияНачало);
		СтрокаНабора.ВидУчетаВремени			= Перечисления.ВидыУчетаВремени.ПоЧасам;
		СтрокаНабора.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
		
		// данные бухучета
		СтрокаНабора.СчетДт						= ВыборкаПоОтражению.СчетДт;
		СтрокаНабора.СубконтоДт1                = ВыборкаПоОтражению.СубконтоДт1;
		СтрокаНабора.СубконтоДт2                = ВыборкаПоОтражению.СубконтоДт2;
		СтрокаНабора.СубконтоДт3                = ВыборкаПоОтражению.СубконтоДт3;
		СтрокаНабора.СубконтоДт4                = ВыборкаПоОтражению.СубконтоДт4;	
		СтрокаНабора.СчетКт						= СчетУчетаРасчетовСРаботниками;	
		СтрокаНабора.СубконтоКт1 = ВыборкаПоОтражению.Физлицо;	
		
	КонецЦикла;
	
	
КонецПроцедуры

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();

	// Свойства
	Движение.ПериодРегистрации				= Период;
	Движение.ПериодДействияНачало			= ВыборкаПоСтрокамДокумента.ПериодДействияНачало;
	Движение.ПериодДействияКонец			= ВыборкаПоСтрокамДокумента.ПериодДействияКонец;
	Движение.БазовыйПериодНачало			= ВыборкаПоСтрокамДокумента.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец				= ВыборкаПоСтрокамДокумента.БазовыйПериодКонец;
	Движение.ВидРасчета						= ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно							= Ложь;

	// Измерения
	Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.ФизЛицо						= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// Ресурсы
	Если ВыборкаПоСтрокамДокумента.ВидРасчета=ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяТарифнаяЧастьВодители Тогда
		Движение.Результат					= ?(ВыборкаПоСтрокамДокумента.Результат<ВыборкаПоСтрокамДокумента.Показатель1*ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов,ВыборкаПоСтрокамДокумента.Результат,ВыборкаПоСтрокамДокумента.Показатель1*ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов);
	Иначе
		Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;
	КонецЕсли;	
	
	// ресурсы по норме времени
	Движение.ОплаченоДнейЧасов				= ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов;

	// Реквизиты
	Движение.ГрафикРаботы					= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
	Движение.ГрафикРаботыНорма				= ВыборкаПоСтрокамДокумента.ГрафикРаботыНорма;
	Движение.Показатель1					= ВыборкаПоСтрокамДокумента.Показатель1;
	Движение.Показатель2					= ВыборкаПоСтрокамДокумента.Показатель2;
	Движение.Показатель3					= ВыборкаПоСтрокамДокумента.Показатель3;
	Движение.Показатель4					= ВыборкаПоСтрокамДокумента.Показатель4;	
	Движение.Показатель5					= ВыборкаПоСтрокамДокумента.Показатель5;
	Движение.Показатель6					= ВыборкаПоСтрокамДокумента.Показатель6;	
	Движение.ВидУчетаВремени				= ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.СпособРасчета, ВыборкаПоСтрокамДокумента.ВидВремени, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени,ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени,ВыборкаПоСтрокамДокумента.ВидРасчета.Показатели);
	Движение.ПодразделениеОрганизации		= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	Движение.ОбособленноеПодразделение		= ВыборкаПоШапкеДокумента.Организация;
	Движение.ДатаНачалаСобытия				= ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия;
	Движение.ВариантОбработкиЗаписиПриОтраженииВРеглУчете = ВыборкаПоСтрокамДокумента.ВариантОбработкиЗаписиПриОтраженииВРеглУчете;
	Движение.Авторасчет						= Истина;
	Движение.СпособОтраженияВБухучете 	= ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете;
	
	Если ВыборкаПоШапкеДокумента.НепосредственныйВводОтражения Тогда
			Движение.СпособОтраженияВБухучете 	= ПодобратьСпособОтражения(ВыборкаПоСтрокамДокумента.СчетДт,
																			ВыборкаПоСтрокамДокумента.СубконтоДт1,
																			ВыборкаПоСтрокамДокумента.СубконтоДт2,
																			ВыборкаПоСтрокамДокумента.СубконтоДт3,
																			ВыборкаПоСтрокамДокумента.СубконтоДт4);
	КонецЕсли;
																		
	Движение.ОтчисленияНаППС = ?(ВыборкаПоСтрокамДокумента.ППС,Перечисления.ДоходыФСС_НС.Облагается,Перечисления.ДоходыФСС_НС.НеОблагается);	
	Движение.Должность = ВыборкаПоСтрокамДокумента.Должность;
	
	Если (ВыборкаПоСтрокамДокумента.ВидРасчета=ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяТарифнаяЧастьВодители) и 
		(ВыборкаПоСтрокамДокумента.Результат>ВыборкаПоСтрокамДокумента.Показатель1*ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов) Тогда
		
		ДвижениеДоп = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеДоп,Движение);
		
		ДвижениеДоп.ВидРасчета						= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельныйПриработокВодители;		

		// Ресурсы		
		ДвижениеДоп.Результат						= ВыборкаПоСтрокамДокумента.Результат-ВыборкаПоСтрокамДокумента.Показатель1*ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов;		
		ДвижениеДоп.ОплаченоДнейЧасов				= 0;		
		
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ПроцентПремии>0 Тогда
		
		ДвижениеДоп = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеДоп,Движение);		

		ДвижениеДоп.ВидРасчета						= ВыборкаПоСтрокамДокумента.ВидРасчетаПремия;
		// Ресурсы
		Если ВыборкаПоСтрокамДокумента.СпособРасчетаПремия=Перечисления.СпособыРасчетаОплатыТруда.ЕжемесячнаяПремия или ВыборкаПоСтрокамДокумента.СпособРасчетаПремия=Перечисления.СпособыРасчетаОплатыТруда.ПроцентомСоСнижением Тогда
			
			ДвижениеДоп.Результат						= (ВыборкаПоСтрокамДокумента.Результат*ВыборкаПоСтрокамДокумента.ПроцентПремии)/100*(100-ВыборкаПоСтрокамДокумента.ПроцентСниженияПремии)/100;
			ДвижениеДоп.Показатель1					= ВыборкаПоСтрокамДокумента.ПроцентПремии;
			ДвижениеДоп.Показатель2					= ВыборкаПоСтрокамДокумента.ПроцентСниженияПремии;
			ДвижениеДоп.Показатель3 = 0;
			ДвижениеДоп.Показатель4 = 0;
			ДвижениеДоп.Показатель5 = 0;
			ДвижениеДоп.Показатель6 = 0;
			
		ИначеЕсли ВыборкаПоСтрокамДокумента.СпособРасчетаПремия=Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеРемонт или ВыборкаПоСтрокамДокумента.СпособРасчетаПремия=Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеВодители Тогда
			
			ДвижениеДоп.Результат						= (ВыборкаПоСтрокамДокумента.Результат*ВыборкаПоСтрокамДокумента.ПроцентПремии)/100*(100-ВыборкаПоСтрокамДокумента.ПроцентСниженияПремии)/100;
			ДвижениеДоп.Показатель1					= ВыборкаПоСтрокамДокумента.Показатель1;
			ДвижениеДоп.Показатель2					= ВыборкаПоСтрокамДокумента.ПроцентПремии;
			ДвижениеДоп.Показатель3					= ВыборкаПоСтрокамДокумента.ПроцентСниженияПремии;
			ДвижениеДоп.Показатель4 = 0;
			ДвижениеДоп.Показатель5 = 0;
			ДвижениеДоп.Показатель6 = 0;
			
		ИначеЕсли ВыборкаПоСтрокамДокумента.СпособРасчетаПремия=Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтСдельногоЗаработкаВодителей Тогда
			
			ДвижениеДоп.Результат						= (ВыборкаПоСтрокамДокумента.Результат*ВыборкаПоСтрокамДокумента.ПроцентПремии)/100*(100-ВыборкаПоСтрокамДокумента.ПроцентСниженияПремии)/100;
			ДвижениеДоп.Показатель1					= ВыборкаПоСтрокамДокумента.Показатель1;
			ДвижениеДоп.Показатель2					= ВыборкаПоСтрокамДокумента.ПроцентПремии;
			ДвижениеДоп.Показатель3					= ВыборкаПоСтрокамДокумента.ПроцентСниженияПремии;
			ДвижениеДоп.Показатель4 = 0;
			ДвижениеДоп.Показатель5 = 0;
			ДвижениеДоп.Показатель6 = 0;	
			
		Иначе
			
			ДвижениеДоп.Результат 	= 0;
			ДвижениеДоп.Показатель1	= 0;
			ДвижениеДоп.Показатель2	= 0;
			ДвижениеДоп.Показатель3	= 0;
			ДвижениеДоп.Показатель4 = 0;
			ДвижениеДоп.Показатель5 = 0;
			ДвижениеДоп.Показатель6 = 0;
			
		КонецЕсли;				
		
	КонецЕсли;	
	
	Если ВыборкаПоСтрокамДокумента.КоэффициентСтажа>0 Тогда
		
		ДвижениеДоп = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеДоп,Движение);		

		ДвижениеДоп.ВидРасчета						= ВыборкаПоШапкеДокумента.ВидРасчетаВыслуга;
		// Ресурсы
		Если ВыборкаПоШапкеДокумента.СпособРасчетаВыслуга=Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом ТОгда
			
			ДвижениеДоп.Результат						= (ВыборкаПоСтрокамДокумента.Показатель1*ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов*ВыборкаПоСтрокамДокумента.КоэффициентСтажа)/100;	
			ДвижениеДоп.Показатель1					= ВыборкаПоСтрокамДокумента.КоэффициентСтажа;	
			ДвижениеДоп.Показатель2	= 0;
			ДвижениеДоп.Показатель3	= 0;
			ДвижениеДоп.Показатель4 = 0;
			ДвижениеДоп.Показатель5 = 0;
			ДвижениеДоп.Показатель6 = 0;
			
		ИначеЕсли ВыборкаПоШапкеДокумента.СпособРасчетаВыслуга=Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке ТОгда
			
			ДвижениеДоп.Результат						= (ВыборкаПоСтрокамДокумента.Показатель1*ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов*ВыборкаПоСтрокамДокумента.КоэффициентСтажа)/100;	
			ДвижениеДоп.Показатель1					= ВыборкаПоСтрокамДокумента.Показатель1;
			ДвижениеДоп.Показатель2					= ВыборкаПоСтрокамДокумента.КоэффициентСтажа;
			ДвижениеДоп.Показатель3	= 0;
			ДвижениеДоп.Показатель4 = 0;
			ДвижениеДоп.Показатель5 = 0;
			ДвижениеДоп.Показатель6 = 0;
			
		Иначе 
			
			ДвижениеДоп.Результат = 0;
			ДвижениеДоп.Показатель1	= 0;
			ДвижениеДоп.Показатель2	= 0;
			ДвижениеДоп.Показатель3	= 0;
			ДвижениеДоп.Показатель4 = 0;
			ДвижениеДоп.Показатель5 = 0;
			ДвижениеДоп.Показатель6 = 0;
			
		КонецЕсли;
			
		
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ПроцентКлассности>0 Тогда
		
		ДвижениеДоп = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеДоп,Движение);		

		ДвижениеДоп.ВидРасчета						= ВыборкаПоШапкеДокумента.ВидРасчетаКлассность;
		// Ресурсы
		Если ВыборкаПоШапкеДокумента.СпособРасчетаКлассность=Перечисления.СпособыРасчетаОплатыТруда.Процентом ТОгда
			ДвижениеДоп.Результат						= (ВыборкаПоСтрокамДокумента.Результат*ВыборкаПоСтрокамДокумента.ПроцентКлассности)/100;
			ДвижениеДоп.Показатель1					= ВыборкаПоСтрокамДокумента.ПроцентКлассности;
			ДвижениеДоп.Показатель2	= 0;
			ДвижениеДоп.Показатель3	= 0;
			ДвижениеДоп.Показатель4 = 0;
			ДвижениеДоп.Показатель5 = 0;
			ДвижениеДоп.Показатель6 = 0;
		Иначе
			
			ДвижениеДоп.Результат = 0;
			ДвижениеДоп.Результат = 0;
			ДвижениеДоп.Показатель1	= 0;
			ДвижениеДоп.Показатель2	= 0;
			ДвижениеДоп.Показатель3	= 0;
			ДвижениеДоп.Показатель4 = 0;
			ДвижениеДоп.Показатель5 = 0;
			ДвижениеДоп.Показатель6 = 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ЧасовНочных>0 Тогда
		
		ДвижениеДоп = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеДоп,Движение);		

		ДвижениеДоп.ВидРасчета						= ВыборкаПоШапкеДокумента.ВидРасчетаНочные;
		
		СтавкаНочных=ВыборкаПоСтрокамДокумента.Показатель1*40/100;
		ДвижениеДоп.Результат	= ОбщегоНазначения.ОкруглитьПоВалюте(СтавкаНочных*ВыборкаПоСтрокамДокумента.ЧасовНочных,Константы.ВалютаРегламентированногоУчета.Получить());
		ДвижениеДоп.Показатель1	= СтавкаНочных;
		ДвижениеДоп.Показатель2	= 0;
		ДвижениеДоп.Показатель3	= 0;
		ДвижениеДоп.Показатель4 = 0;
		ДвижениеДоп.Показатель5 = 0;
		ДвижениеДоп.Показатель6 = 0;
		
		ДвижениеДоп.ОплаченоДнейЧасов = ВыборкаПоСтрокамДокумента.ЧасовНочных;
		
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ЧасовВредности>0 Тогда
		
		ДвижениеДоп = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеДоп,Движение);		

		ДвижениеДоп.ВидРасчета						= ВыборкаПоШапкеДокумента.ВидРасчетаВредность;
		
		ДвижениеДоп.Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ВыборкаПоСтрокамДокумента.ТарифнаяСтавкаПервогоРазряда*ВыборкаПоСтрокамДокумента.СтавкаВредности/100*ВыборкаПоСтрокамДокумента.ЧасовВредности,Константы.ВалютаРегламентированногоУчета.Получить());
		ДвижениеДоп.Показатель1					= ВыборкаПоСтрокамДокумента.СтавкаВредности;
		ДвижениеДоп.Показатель2	= 0;
		ДвижениеДоп.Показатель3	= 0;
		ДвижениеДоп.Показатель4 = 0;
		ДвижениеДоп.Показатель5 = 0;
		ДвижениеДоп.Показатель6 = 0;
		
		ДвижениеДоп.ОплаченоДнейЧасов = ВыборкаПоСтрокамДокумента.ЧасовВредности;
		
	КонецЕсли;
	
	Если (ВыборкаПоСтрокамДокумента.ТарифнаяСтавка>0) и (ВыборкаПоСтрокамДокумента.Показатель1>ВыборкаПоСтрокамДокумента.ТарифнаяСтавка) Тогда
		
		ДвижениеДоп = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеДоп,Движение);		

		ДвижениеДоп.ВидРасчета						= ВыборкаПоШапкеДокумента.ВидРасчетаКонтракт;
		// Ресурсы
		ДвижениеДоп.Результат						= (ВыборкаПоСтрокамДокумента.Показатель1-ВыборкаПоСтрокамДокумента.ТарифнаяСтавка)*ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов;				
		ДвижениеДоп.Показатель1 = ВыборкаПоСтрокамДокумента.ТарифнаяСтавка;
		ДвижениеДоп.Показатель2 = ВыборкаПоСтрокамДокумента.Показатель1;
		ДвижениеДоп.Показатель3	= 0;
		ДвижениеДоп.Показатель4 = 0;
		ДвижениеДоп.Показатель5 = 0;
		ДвижениеДоп.Показатель6 = 0;
		
	КонецЕсли;
	
	Если (ВыборкаПоСтрокамДокумента.ПроцентПремииКонтракт>0) И (ВыборкаПоСтрокамДокумента.Показатель1>ВыборкаПоСтрокамДокумента.ТарифнаяСтавка) Тогда
		
		ДвижениеДоп = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеДоп,Движение);		

		ДвижениеДоп.ВидРасчета						= ВыборкаПоШапкеДокумента.ВидРасчетаПремияКонтракт;
		// Ресурсы
		ДвижениеДоп.Результат						= ((ВыборкаПоСтрокамДокумента.Показатель1-ВыборкаПоСтрокамДокумента.ТарифнаяСтавка)*ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов*ВыборкаПоСтрокамДокумента.ПроцентПремии)/100*(100-ВыборкаПоСтрокамДокумента.ПроцентСниженияПремии)/100;
		
		Если ВыборкаПоШапкеДокумента.СпособРасчетаПремияКонтракт=Перечисления.СпособыРасчетаОплатыТруда.ЕжемесячнаяПремия или ВыборкаПоШапкеДокумента.СпособРасчетаПремияКонтракт=Перечисления.СпособыРасчетаОплатыТруда.ПроцентомСоСнижением Тогда
			ДвижениеДоп.Показатель1					= ВыборкаПоСтрокамДокумента.ПроцентПремииКонтракт;
			ДвижениеДоп.Показатель2	= 0;
			ДвижениеДоп.Показатель3	= 0;
			ДвижениеДоп.Показатель4 = 0;
			ДвижениеДоп.Показатель5 = 0;
			ДвижениеДоп.Показатель6 = 0;
		Иначе
			
			ДвижениеДоп.Результат	= 0;
			ДвижениеДоп.Показатель1	= 0;
			ДвижениеДоп.Показатель2	= 0;
			ДвижениеДоп.Показатель3	= 0;
			ДвижениеДоп.Показатель4 = 0;
			ДвижениеДоп.Показатель5 = 0;
			ДвижениеДоп.Показатель6 = 0;
			
		КонецЕсли;
	КонецЕсли;
	
	Если (ВыборкаПоСтрокамДокумента.ЧасовВыходныхПраздничных) Тогда
		
		ДвижениеДоп = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеДоп,Движение);		

		ДвижениеДоп.ВидРасчета						= ВыборкаПоШапкеДокумента.ВидРасчетаВыходныеПраздничные;
		// Ресурсы
		ДвижениеДоп.Результат						= ВыборкаПоСтрокамДокумента.Показатель1*ВыборкаПоСтрокамДокумента.ЧасовВыходныхПраздничных;
		
		ДвижениеДоп.Показатель1					= ВыборкаПоСтрокамДокумента.Показатель1;
		ДвижениеДоп.Показатель2	= 0;
		ДвижениеДоп.Показатель3	= 0;
		ДвижениеДоп.Показатель4 = 0;
		ДвижениеДоп.Показатель5 = 0;
		ДвижениеДоп.Показатель6 = 0;
		
		ДвижениеДоп.ОплаченоДнейЧасов = ВыборкаПоСтрокамДокумента.ЧасовВыходныхПраздничных;

	КонецЕсли;
	
	Если (ВыборкаПоСтрокамДокумента.ЧасовСверхурочных) Тогда
		
		ДвижениеДоп = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеДоп,Движение);		

		ДвижениеДоп.ВидРасчета						= ВыборкаПоШапкеДокумента.ВидРасчетаСверхурочные;
		// Ресурсы
		ДвижениеДоп.Результат						= ВыборкаПоСтрокамДокумента.Показатель1*ВыборкаПоСтрокамДокумента.ЧасовСверхурочных;
		
		ДвижениеДоп.Показатель1					= ВыборкаПоСтрокамДокумента.Показатель1;
		ДвижениеДоп.Показатель2	= 0;
		ДвижениеДоп.Показатель3	= 0;
		ДвижениеДоп.Показатель4 = 0;
		ДвижениеДоп.Показатель5 = 0;
		ДвижениеДоп.Показатель6 = 0;
		
		ДвижениеДоп.ОплаченоДнейЧасов = ВыборкаПоСтрокамДокумента.ЧасовСверхурочных;

	КонецЕсли;
	//
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

// получает доходы НДФЛ по табличным частям с доходами
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		
Процедура СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ДатаНалоговогоПериода", КонецГода(Период));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Доходы.Физлицо,
	|	Доходы.КодДохода,
	|	Доходы.Период,
	|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода,
	|	Доходы.ПодразделениеОрганизации,
	|	Доходы.ВидРасчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основные.Сотрудник.Физлицо КАК Физлицо,
	|		Основные.ВидРасчета.КодДоходаНДФЛ КАК КодДохода,
	|		Основные.ПериодДействияНачало КАК Период,
	|		Основные.Результат КАК СуммаДохода,
	|		Основные.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		Основные.ВидРасчета КАК ВидРасчета
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основные
	|	ГДЕ
	|		Основные.Регистратор = &парамСсылка
	|		И Основные.ВидРасчета.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)
	|		И Основные.Результат <> 0) КАК Доходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.Физлицо,
	|	Доходы.КодДохода,
	|	Доходы.Период,
	|	Доходы.ПодразделениеОрганизации,
	|	Доходы.ВидРасчета";
	
	ДоходыПоКодам = Запрос.Выполнить().Выбрать();
	// сформируем движения НДФЛСведенияОДоходах
	Пока ДоходыПоКодам.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// свойства
		Движение.Период						= ДоходыПоКодам.Период;
		
		// измерения 
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.Физлицо					= ДоходыПоКодам.Физлицо;
		Движение.КодДохода					= ДоходыПоКодам.КодДохода;
		Движение.ПериодРегистрации			= НачалоМесяца(Период);
		
		// ресурсы
		Движение.СуммаДохода				= ДоходыПоКодам.СуммаДохода;		
		
		// реквизиты
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;		
		Движение.ИсчисленоИзЗарплаты		= Истина;
		Движение.ПодразделениеОрганизации	= ДоходыПоКодам.ПодразделениеОрганизации;
		Движение.ВидРасчета                 = ДоходыПоКодам.ВидРасчета;
	КонецЦикла;
КонецПроцедуры // СформироватьДоходыПоКодамНДФЛ()

// Вычисляет разницу между начислениями и удержаниями работника и формирует
// движения по взаиморасчетам с работниками
//
// Параметры:
//	ВыборкаПоШапкеДокумента	- спозиционированная выборка по шапке документа
//	НаборЗаписей			- набор записей 
//	Перерасчет				- признак проведения перерасчетов, по умолчанию - Ложь
//	Физлица					- список физлиц, по которым производится расчет, по умолчанию - отсутствует
//
// Возвращаемое значение:
//	Нет.
//	
Процедура СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, НаборЗаписей, УчетЗадолженностиПоМесяцам, Перерасчет = Ложь, Физлица = Неопределено)
	
	НачисленияРаботниковТекст = 
		"ВЫБРАТЬ
		|	Доходы.Физлицо,
		|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основные.Сотрудник.Физлицо КАК Физлицо,
		|		Основные.Результат КАК СуммаДохода
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основные
		|	ГДЕ
		|		Основные.Регистратор = &парамСсылка
		|		И Основные.Результат <> 0
		|		И НЕ Основные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме) КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Физлицо";
		
		Запрос = Новый Запрос(НачисленияРаботниковТекст);
		
		
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка" , Ссылка);
	
	Доходы = Запрос.Выполнить().Выбрать();
	// сформируем движения ВзаиморасчетыСРаботникамиОрганизаций
	Пока Доходы.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// свойства
		Движение.Период					= КонецМесяца(Период);
		Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
		
		// измерения 
		Движение.Физлицо				= Доходы.Физлицо;
		Движение.Организация			= Организация;		
		Движение.ПериодВзаиморасчетов	= Период;		
		
		// ресурсы
		Движение.СуммаВзаиморасчетов	= Доходы.СуммаДохода;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьВзаиморасчетыСРаботниками()

Процедура СформироватьДвиженияПоВыработке(ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка",			Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Основные.Сотрудник КАК Сотрудник,
	|	Основные.Ссылка.Период КАК Период,
	|	Основные.Показатель1 КАК Тариф,
	|	Основные.Результат КАК Выработка
	|ИЗ
	|	Документ.РасчетОсновногоЗаработкаРаботниковОрганизации.РаспределениеНачислений КАК Основные
	|ГДЕ
	|	Основные.Ссылка = &парамСсылка
	|	И Основные.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавкеВодителей))
	|	И Основные.Результат <> 0";
	
	Выработка = Запрос.Выполнить().Выбрать();
	// сформируем движения ФактическаяВыработкаРаботниковОрганизаций
	Пока Выработка.Следующий() Цикл
		
		Движение = НаборЗаписей.Добавить();
		
		// свойства
		Движение.Период						= Выработка.Период;
		
		// измерения 
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.Сотрудник					= Выработка.Сотрудник;
		Движение.Месяц						= НачалоМесяца(Период);
		
		// ресурсы
		Движение.Выработка					= Выработка.Выработка;
		
		// реквизиты
		Движение.СпособВводаДанных			= Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод;
		Движение.Тариф						= Выработка.Тариф;
		
	КонецЦикла;

	
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// получим реквизиты табличной части, сгруппировананные по работникам
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента);
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать();
			
			БухгалтерскийИНалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("глУчетнаяПолитикаПоНалоговомуУчету"), КонецМесяца(Период), Организация);			
			
			// Получение учетной политики по персоналу организации
			// ведется ли учет задолженности в разрезе периодов возникновения задолженности
			УчетЗадолженностиПоМесяцам = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
			
			Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
			
			ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента).Выбрать();

			Пока ВыборкаПоНачислениям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, Движения.ОсновныеНачисленияРаботниковОрганизаций);					
				КонецЕсли;
			КонецЦикла;
			
			Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать();
			// доходы НДФЛ
			
			// сформируем доходы НДФЛ по начислениям документа
			СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, Движения.НДФЛСведенияОДоходах);
			
			////////////////////////////////////////////////////////////////////////
			// взаиморасчеты с работниками
			
			// сформируем начисления к выплате по начислениям документа
			СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, Движения.ВзаиморасчетыСРаботникамиОрганизаций, УчетЗадолженностиПоМесяцам);
			СформироватьДвиженияПоВыработке(ВыборкаПоШапкеДокумента, Движения.ФактическаяВыработкаРаботниковОрганизаций);
			СформироватьОтражениеВУчете(ВыборкаПоШапкеДокумента, Движения.БУОсновныеНачисления);
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаспределениеНачислений);
	
КонецПроцедуры // ПередЗаписью()

мСведенияОВидахРасчетаОснНачислений = Новый Соответствие;
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

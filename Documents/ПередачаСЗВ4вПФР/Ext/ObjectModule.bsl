
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ФАЙЛА ИНДИВИДУАЛЬНЫХ СВЕДЕНИЙ ПФР ФОРМАТ 7.0


#Если Клиент Тогда

//Процедура вывода файла сведений на печать
Функция ПечатьАДВ11()
	
	ЕстьОшибки = Ложь;
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ЭтотОбъект,ЕстьОшибки);
	Если ЕстьОшибки тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Макет = ПолучитьМакет("АДВ_11");
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВедомостьУплатыСтраховыхВзносовАДВ11_АДВ_11";
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьГод = Макет.ПолучитьОбласть("Год");
	ОбластьПустойГод = Макет.ПолучитьОбласть("ПустойГод");
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьНачисленоЗаГод = Макет.ПолучитьОбласть("НачисленоЗаГод");
	ОбластьУплачено = Макет.ПолучитьОбласть("Уплачено");
	ОбластьДолгНаКонец = Макет.ПолучитьОбласть("ДолгНаКонец");
	
	// Получим сведения об ответственных лицах
	ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, Дата, Ответственный.ФизЛицо);
	
	Если ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда
	
		// формируем отчет по версии файла 04.00
		
		//Получаем форматы записей
		ДокументФорматЗаписей = ПолучитьМакет("ФорматЗаписей");
		ФорматЗаписиВУПЛ = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи("ВУПЛ", ДокументФорматЗаписей);
		ФорматЗаписиЗНЧЛ = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи("ЗНЧЛ", ДокументФорматЗаписей);
		ФорматЗаписиУПЛЧ = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи("УПЛЧ", ДокументФорматЗаписей);
		ФорматЗаписиЗКНЦ = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи("ЗКНЦ", ДокументФорматЗаписей);
		
		//Обработка заголовка файла
		ИнформацияОПачке = Новый Структура;
		Если ПроцедурыПерсонифицированогоУчета.РазобратьЗаголовокФайла(ТекстФайла,ИнформацияОПачке)=0 тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		
		Н=5;//Номер строки записи ВУПЛ
		
		//Читаем запись ВУПЛ
		СтрокаФайла = СтрПолучитьСтроку(ТекстФайла, Н);
		Н= Н + 1;
		ЗаписьВУПЛ = ПроцедурыПерсонифицированогоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиВУПЛ);
		СтрОшибка = "";
		Если НЕ ПроцедурыПерсонифицированогоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ВУПЛ", ФорматЗаписиВУПЛ, ЗаписьВУПЛ, СтрОшибка) тогда
			Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
			Возврат Неопределено;
		КонецЕсли;	
		
		// Заполнение данных шапки и подвала
		ОбластьШапка.Параметры.РегНомерПФР = ИнформацияОПачке.ИнформацияОРаботодателе.РегистрационныйНомерПФР;
		ОбластьШапка.Параметры.ИНН = ИнформацияОПачке.ИнформацияОРаботодателе.ИНН;
		ОбластьШапка.Параметры.КПП = ИнформацияОПачке.ИнформацияОРаботодателе.КПП;
		ОбластьШапка.Параметры.НаименованиеКр1 = ИнформацияОПачке.ИнформацияОРаботодателе.Наименование;
		ОбластьШапка.Параметры.Год = ИнформацияОПачке.РасчетныйПериод;
		ОбластьШапка.Параметры.СоставленаНаДату = "Ведомость составлена по состоянию на дату:  "+ ПроцедурыПерсонифицированогоУчета.ДатаВОтчет(ЗаписьВУПЛ.ДатаДействия);
		ОбластьШапка.Параметры.КолПачек = ЗаписьВУПЛ.КоличествоПачек;
		ОбластьШапка.Параметры.ЗастрахованныхЛиц = ЗаписьВУПЛ.ЧислоЗастрахованныхЛиц;
		ОбластьШапка.Параметры.КодОсновногоТарифа = ЗаписьВУПЛ.КодОсновногоТарифа;
		ОбластьШапка.Параметры.КодДополнительногоТарифа = ЗаписьВУПЛ.КодДополнительногоТарифа;
		
		ОбластьПодвал.Параметры.РасшифровкаПодписиГлавногоБухгалтера= ОтветственныеЛица.ГлавныйБухгалтер;
		ОбластьПодвал.Параметры.ДолжностьРуководителя		 		= ОтветственныеЛица.РуководительДолжность;
		ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя		= ОтветственныеЛица.Руководитель;
		ОбластьПодвал.Параметры.Дата				 				= ПроцедурыПерсонифицированогоУчета.ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);
		
		// Вывод шапки ведомости
		ДокументРезультат.Вывести(ОбластьШапка);
		
		// Вывод задолженности на начало года
		Если ЗаписьВУПЛ.ЧислоЗаписейЗНЧЛ > 0 Тогда
			Для НомерЗаписиЗНЧЛ=1 По ЗаписьВУПЛ.ЧислоЗаписейЗНЧЛ Цикл
				//Читаем и выводим запись ЗНЧЛ
				СтрокаФайла = СтрПолучитьСтроку(ТекстФайла, Н);
				Н= Н + 1;
				ЗаписьЗНЧЛ = ПроцедурыПерсонифицированогоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиЗНЧЛ);
				СтрОшибка = "";
				Если НЕ ПроцедурыПерсонифицированогоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ЗНЧЛ", ФорматЗаписиЗНЧЛ, ЗаписьЗНЧЛ, СтрОшибка) тогда
					Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
					Возврат Неопределено;
				КонецЕсли;	
				
				ОбластьГод.Параметры.Год 					= ЗаписьЗНЧЛ.Год;
				ОбластьГод.Параметры.СтраховаяЧасть 		= ЗаписьЗНЧЛ.СтраховаяЧасть;
				ОбластьГод.Параметры.НакопительнаяЧасть 	= ЗаписьЗНЧЛ.НакопительнаяЧасть;
				ОбластьГод.Параметры.ДополнительныйТариф 	= ЗаписьЗНЧЛ.ДополнительныйТариф;
				ДокументРезультат.Вывести(ОбластьГод);
			КонецЦикла; 
		Иначе
			ДокументРезультат.Вывести(ОбластьПустойГод);
		КонецЕсли; 
		ОбластьИтого.Параметры.СтраховаяЧасть 		= ЗаписьВУПЛ.ДолгНаНачалоСтраховаяЧасть;
		ОбластьИтого.Параметры.НакопительнаяЧасть 	= ЗаписьВУПЛ.ДолгНаНачалоНакопительнаяЧасть;
		ОбластьИтого.Параметры.ДополнительныйТариф 	= ЗаписьВУПЛ.ДолгНачалоДополнительныйТариф;
		ДокументРезультат.Вывести(ОбластьИтого);
		
		// Вывод начислений за год
		ОбластьНачисленоЗаГод.Параметры.ПризнакТарифа		= ЗаписьВУПЛ.ПризнакТарифа;
		ОбластьНачисленоЗаГод.Параметры.СтраховаяЧасть 		= ЗаписьВУПЛ.НачисленоСтраховаяЧасть;
		ОбластьНачисленоЗаГод.Параметры.НакопительнаяЧасть 	= ЗаписьВУПЛ.НачисленоНакопительнаяЧасть;
		ОбластьНачисленоЗаГод.Параметры.ДополнительныйТариф = ЗаписьВУПЛ.НачисленоДополнительныйТариф;
		ДокументРезультат.Вывести(ОбластьНачисленоЗаГод);
		
		// Вывод уплаченных сумм
		ДокументРезультат.Вывести(ОбластьУплачено);
		Если ЗаписьВУПЛ.ЧислоЗаписейУПЛЧ > 0 Тогда
			Для НомерЗаписиУПЛЧ=1 По ЗаписьВУПЛ.ЧислоЗаписейУПЛЧ Цикл
				//Читаем и выводим запись УПЛЧ
				СтрокаФайла = СтрПолучитьСтроку(ТекстФайла, Н);
				Н= Н + 1;
				ЗаписьУПЛЧ = ПроцедурыПерсонифицированогоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиУПЛЧ);
				СтрОшибка = "";
				Если НЕ ПроцедурыПерсонифицированогоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "УПЛЧ", ФорматЗаписиУПЛЧ, ЗаписьУПЛЧ, СтрОшибка) тогда
					Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
					Возврат Неопределено;
				КонецЕсли;	
				
				ОбластьГод.Параметры.Год 			= ЗаписьУПЛЧ.Год;
				ОбластьГод.Параметры.СтраховаяЧасть 		= ЗаписьУПЛЧ.СтраховаяЧасть;
				ОбластьГод.Параметры.НакопительнаяЧасть 	= ЗаписьУПЛЧ.НакопительнаяЧасть;
				ОбластьГод.Параметры.ДополнительныйТариф 	= ЗаписьУПЛЧ.ДополнительныйТариф;
				ДокументРезультат.Вывести(ОбластьГод);
			КонецЦикла; 
		Иначе
			ДокументРезультат.Вывести(ОбластьПустойГод);
		КонецЕсли; 
		ОбластьИтого.Параметры.СтраховаяЧасть 		= ЗаписьВУПЛ.УплаченоСтраховаяЧасть;
		ОбластьИтого.Параметры.НакопительнаяЧасть 	= ЗаписьВУПЛ.УплаченоНакопительнаяЧасть;
		ОбластьИтого.Параметры.ДополнительныйТариф 	= ЗаписьВУПЛ.УплаченоДополнительныйТариф;
		ДокументРезультат.Вывести(ОбластьИтого);
		
		// Вывод задолженностей на конец года
		ДокументРезультат.Вывести(ОбластьДолгНаКонец);
		Если ЗаписьВУПЛ.ЧислоЗаписейЗКНЦ > 0 Тогда
			Для НомерЗаписиЗКНЦ=1 По ЗаписьВУПЛ.ЧислоЗаписейЗКНЦ Цикл
				//Читаем и выводим запись ЗКНЦ
				СтрокаФайла = СтрПолучитьСтроку(ТекстФайла, Н);
				Н= Н + 1;
				ЗаписьЗКНЦ = ПроцедурыПерсонифицированогоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиЗКНЦ);
				СтрОшибка = "";
				Если НЕ ПроцедурыПерсонифицированогоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ЗКНЦ", ФорматЗаписиЗКНЦ, ЗаписьЗКНЦ, СтрОшибка) тогда
					Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
					Возврат Неопределено;
				КонецЕсли;	
				
				ОбластьГод.Параметры.Год 					= ЗаписьЗКНЦ.Год;
				ОбластьГод.Параметры.СтраховаяЧасть 		= ЗаписьЗКНЦ.СтраховаяЧасть;
				ОбластьГод.Параметры.НакопительнаяЧасть 	= ЗаписьЗКНЦ.НакопительнаяЧасть;
				ОбластьГод.Параметры.ДополнительныйТариф 	= ЗаписьЗКНЦ.ДополнительныйТариф;
				ДокументРезультат.Вывести(ОбластьГод);
			КонецЦикла; 
		Иначе
			ДокументРезультат.Вывести(ОбластьПустойГод);
		КонецЕсли; 
		ОбластьИтого.Параметры.СтраховаяЧасть 		= ЗаписьВУПЛ.ДолгНаКонецСтраховаяЧасть;
		ОбластьИтого.Параметры.НакопительнаяЧасть 	= ЗаписьВУПЛ.ДолгНаКонецНакопительнаяЧасть;
		ОбластьИтого.Параметры.ДополнительныйТариф 	= ЗаписьВУПЛ.ДолгНаКонецДополнительныйТариф;
		ДокументРезультат.Вывести(ОбластьИтого);
		
		// Подвал ведомости
		ДокументРезультат.Вывести(ОбластьПодвал);
		
		Возврат РаботаСДиалогами.НапечататьДокумент(ДокументРезультат, 1 , Ложь, "Ведомость уплаты взносов (АДВ-11); пачка №" + ИнформацияОПачке.НомерПачкиРаботодателя);
		
	ИначеЕсли ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда
		// формируем отчет по версии файла 07.00	
		
		ДеревоПФР = ПроцедурыПерсонифицированогоУчета.ПреобразоватьВДеревоXML(ТекстФайла);
		
		Если ДеревоПФР = Неопределено Тогда
			Отказ = Ложь;
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось разобрать файл с данными!",Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка));
			Возврат Неопределено 
		КонецЕсли;
		ДеревоПФР = ДеревоПФР.Строки.Найти("ФайлПФР","Имя");
		Если ДеревоПФР = Неопределено Тогда
			Отказ = Ложь;
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось разобрать файл с данными!",Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка));
			Возврат Неопределено 
		КонецЕсли;
		
		СтрокаДереваПачкаВходящихДокументов = ДеревоПФР.Строки.Найти("ПачкаВходящихДокументов","Имя");
		Если СтрокаДереваПачкаВходящихДокументов <> Неопределено Тогда
			СтрокаДереваВедомостьУплаты = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВЕДОМОСТЬ_УПЛАТЫ", "Имя");
			
			Если СтрокаДереваВедомостьУплаты <> Неопределено Тогда
				ОбластьШапка.Параметры.Год = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВедомостьУплаты, "РасчетныйПериод");
				ОбластьШапка.Параметры.СоставленаНаДату = "Ведомость составлена по состоянию на дату:  "+ ПроцедурыПерсонифицированогоУчета.ДатаXMLВОтчет(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВедомостьУплаты, "ДатаЗаполнения"));
				ОбластьШапка.Параметры.ЗастрахованныхЛиц = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВедомостьУплаты, "ЧислоЗастрахованныхЛиц");
				ОбластьШапка.Параметры.КолПачек = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВедомостьУплаты, "ЧислоПачек");
				Если ОбластьШапка.Параметры.КолПачек = "" Тогда
					ОбластьШапка.Параметры.КолПачек = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВедомостьУплаты, "ЧислоПачекСДокументами");	
				КонецЕсли;
				
				СтрокаДереваСтрахователь = СтрокаДереваВедомостьУплаты.Строки.Найти("Страхователь", "Имя");
				
				// Заполнение данных шапки и подвала
				ОбластьШапка.Параметры.РегНомерПФР = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваСтрахователь, "РегистрационныйНомер");
				ОбластьШапка.Параметры.НаименованиеКр1 = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваСтрахователь, "НаименованиеКраткое");
				
				СтрокаДереваНалоговыйНомер = СтрокаДереваСтрахователь.Строки.Найти("НалоговыйНомер", "Имя");
				Если СтрокаДереваНалоговыйНомер <> Неопределено Тогда
					ОбластьШапка.Параметры.ИНН = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНалоговыйНомер, "ИНН");
					ОбластьШапка.Параметры.КПП = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНалоговыйНомер, "КПП");
				КонецЕсли;
				
				СтрокаДереваТариф = СтрокаДереваВедомостьУплаты.Строки.Найти("Тариф", "Имя");
				Если СтрокаДереваТариф <> Неопределено Тогда
					ОбластьШапка.Параметры.КодОсновногоТарифа = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваТариф, "КодКатегории");
					ОбластьШапка.Параметры.КодДополнительногоТарифа = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваТариф, "КодДополнительногоТарифа");
				КонецЕсли;
				
				ОбластьПодвал.Параметры.РасшифровкаПодписиГлавногоБухгалтера= ОтветственныеЛица.ГлавныйБухгалтер;
				ОбластьПодвал.Параметры.ДолжностьРуководителя		 		= ОтветственныеЛица.РуководительДолжность;
				ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя		= ОтветственныеЛица.Руководитель;
				ОбластьПодвал.Параметры.Дата				 				= ПроцедурыПерсонифицированогоУчета.ДатаXMLВОтчет(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВедомостьУплаты, "ДатаВедомости"));
				
				// Вывод шапки ведомости
				ДокументРезультат.Вывести(ОбластьШапка);
				
				ДолгНаНачалоСтраховаяЧасть = 0;
				ДолгНаНачалоНакопительнаяЧасть = 0;
				ДолгНаНачалоДополнительныйТариф = 0;
				// Вывод задолженности на начало года
				СтрокаДереваЗадолженностьНаНачало = СтрокаДереваВедомостьУплаты.Строки.Найти("ЗадолженностьНаНачало", "Имя");
				Если СтрокаДереваЗадолженностьНаНачало <> Неопределено Тогда
					Если СтрокаДереваЗадолженностьНаНачало.Строки.Количество() > 1 Тогда
						Для Каждого СтрокаДерева Из СтрокаДереваЗадолженностьНаНачало.Строки Цикл
							Если СтрокаДерева.Имя = "СуммаЗаПериод" Тогда
								ТипСтроки = СтрокаДерева.Строки.Найти("ТипСтроки", "Имя");
								Если ТипСтроки <> Неопределено и ТипСтроки.Значение <> "ДЕТАЛЬНАЯ" Тогда
									Продолжить;
								КонецЕсли;
								СтрокаДереваСтраховыеВзносы = СтрокаДерева.Строки.Найти("СтраховыеВзносы", "Имя");
								Если СтрокаДереваСтраховыеВзносы <> Неопределено Тогда
									ОбластьГод.Параметры.Год 					= ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДерева, "РасчетныйПериод");
									СтраховаяЧасть = Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваСтраховыеВзносы, "Страховые"));
									НакопительнаяЧасть = Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваСтраховыеВзносы, "Накопительные"));
									ДополнительныйТариф = Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокадереваСтраховыеВзносы, "Дополнительные"));
									ОбластьГод.Параметры.СтраховаяЧасть 		= СтраховаяЧасть;
									ОбластьГод.Параметры.НакопительнаяЧасть 	= НакопительнаяЧасть;
									ОбластьГод.Параметры.ДополнительныйТариф 	= ДополнительныйТариф;
									ДокументРезультат.Вывести(ОбластьГод);
									ДолгНаНачалоСтраховаяЧасть = ДолгНаНачалоСтраховаяЧасть + СтраховаяЧасть;
									ДолгНаНачалоНакопительнаяЧасть = ДолгНаНачалоНакопительнаяЧасть + НакопительнаяЧасть;
									ДолгНаНачалоДополнительныйТариф = ДолгНаНачалоДополнительныйТариф + ДополнительныйТариф;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					Иначе
						ДокументРезультат.Вывести(ОбластьПустойГод);
					КонецЕсли;
					
				КонецЕсли;
				ОбластьИтого.Параметры.СтраховаяЧасть 		= ДолгНаНачалоСтраховаяЧасть;
				ОбластьИтого.Параметры.НакопительнаяЧасть 	= ДолгНаНачалоНакопительнаяЧасть;
				ОбластьИтого.Параметры.ДополнительныйТариф 	= ДолгНаНачалоДополнительныйТариф;
				ДокументРезультат.Вывести(ОбластьИтого);
				
				
				СтрокаДереваНачисленоЗаПериод = СтрокаДереваВедомостьУплаты.Строки.Найти("НачисленияЗаПериод", "Имя");
				Если СтрокаДереваНачисленоЗаПериод <> Неопределено Тогда
					// Вывод начислений за год
					ОбластьНачисленоЗаГод.Параметры.ПризнакТарифа		= ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВедомостьУплаты, "ПризнакТарифа");
					ОбластьНачисленоЗаГод.Параметры.СтраховаяЧасть 		= ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНачисленоЗаПериод, "Страховые");
					ОбластьНачисленоЗаГод.Параметры.НакопительнаяЧасть 	= ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНачисленоЗаПериод, "Накопительные");
					ОбластьНачисленоЗаГод.Параметры.ДополнительныйТариф = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНачисленоЗаПериод, "Дополнительные");
					ДокументРезультат.Вывести(ОбластьНачисленоЗаГод);
				КонецЕсли;
				
				
				// Вывод уплаченных сумм
				
				ДокументРезультат.Вывести(ОбластьУплачено);
				УплаченоСтраховаяЧасть = 0;
				УплаченоНакопительнаяЧасть = 0;
				УплаченоДополнительныйТариф = 0;
				СтрокаДереваУплатаЗаПериод = СтрокаДереваВедомостьУплаты.Строки.Найти("УплатаЗаПериод", "Имя");
				Если СтрокаДереваУплатаЗаПериод <> Неопределено Тогда
					Если СтрокаДереваУплатаЗаПериод.Строки.Количество() > 1 Тогда
						Для Каждого СтрокаДерева Из СтрокаДереваУплатаЗаПериод.Строки Цикл
							Если СтрокаДерева.Имя = "СуммаЗаПериод" Тогда
								ТипСтроки = СтрокаДерева.Строки.Найти("ТипСтроки", "Имя");
								Если ТипСтроки <> Неопределено и ТипСтроки.Значение <> "ДЕТАЛЬНАЯ" Тогда
									Продолжить;
								КонецЕсли;
								СтрокаДереваСтраховыеВзносы = СтрокаДерева.Строки.Найти("СтраховыеВзносы", "Имя");
								Если СтрокаДереваСтраховыеВзносы <> Неопределено Тогда
									//Читаем и выводим запись УПЛЧ
									СтраховаяЧасть = Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваСтраховыеВзносы, "Страховые"));
									НакопительнаяЧасть = Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваСтраховыеВзносы, "Накопительные"));
									ДополнительныйТариф = Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваСтраховыеВзносы, "Дополнительные"));
									ОбластьГод.Параметры.Год 					= ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДерева, "РасчетныйПериод");
									ОбластьГод.Параметры.СтраховаяЧасть 		= СтраховаяЧасть;
									ОбластьГод.Параметры.НакопительнаяЧасть 	= НакопительнаяЧасть;
									ОбластьГод.Параметры.ДополнительныйТариф 	= ДополнительныйТариф;
									ДокументРезультат.Вывести(ОбластьГод);
									УплаченоСтраховаяЧасть = УплаченоСтраховаяЧасть + СтраховаяЧасть;
									УплаченоНакопительнаяЧасть = УплаченоНакопительнаяЧасть + НакопительнаяЧасть;
									УплаченоДополнительныйТариф = УплаченоДополнительныйТариф + ДополнительныйТариф;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					Иначе
						ДокументРезультат.Вывести(ОбластьПустойГод);
					КонецЕсли;
				КонецЕсли;
			
				ОбластьИтого.Параметры.СтраховаяЧасть 		= УплаченоСтраховаяЧасть;
				ОбластьИтого.Параметры.НакопительнаяЧасть 	= УплаченоНакопительнаяЧасть;
				ОбластьИтого.Параметры.ДополнительныйТариф 	= УплаченоДополнительныйТариф;
				ДокументРезультат.Вывести(ОбластьИтого);

				// Вывод задолженностей на конец года
				ДокументРезультат.Вывести(ОбластьДолгНаКонец);
				ДолгНаКонецСтраховаяЧасть = 0;
				ДолгНаКонецНакопительнаяЧасть = 0;
				ДолгНаКонецДополнительныйТариф = 0;
				СтрокаДереваЗадолженностьНаКонец = СтрокаДереваВедомостьУплаты.Строки.Найти("ЗадолженностьНаКонец");
				Если СтрокаДереваЗадолженностьНаКонец <> Неопределено Тогда
					Если СтрокаДереваЗадолженностьНаКонец.Строки.Количество() > 1 Тогда
						Для Каждого СтрокаДерева Из СтрокаДереваЗадолженностьНаКонец.Строки Цикл
							Если СтрокаДерева.Имя = "СуммаЗаПериод" Тогда
								ТипСтроки = СтрокаДерева.Строки.Найти("ТипСтроки", "Имя");
								Если ТипСтроки <> Неопределено и ТипСтроки.Значение <> "ДЕТАЛЬНАЯ" Тогда
									Продолжить;
								КонецЕсли;
								СтрокаДереваСтраховыеВзносы = СтрокаДерева.Строки.Найти("СтраховыеВзносы", "Имя");
								Если СтрокаДереваСтраховыеВзносы <> Неопределено Тогда
									//Читаем и выводим запись ЗКНЦ
									СтраховаяЧасть = Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваСтраховыеВзносы, "Страховые"));
									НакопительнаяЧасть = Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваСтраховыеВзносы, "Накопительные"));
									ДополнительныйТариф = Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваСтраховыеВзносы, "Дополнительные"));
									ОбластьГод.Параметры.Год 					= ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДерева, "РасчетныйПериод");
									ОбластьГод.Параметры.СтраховаяЧасть 		= СтраховаяЧасть;
									ОбластьГод.Параметры.НакопительнаяЧасть 	= НакопительнаяЧасть;
									ОбластьГод.Параметры.ДополнительныйТариф 	= ДополнительныйТариф;
									ДокументРезультат.Вывести(ОбластьГод);
									ДолгНаКонецСтраховаяЧасть = ДолгНаКонецСтраховаяЧасть + СтраховаяЧасть;
									ДолгНаКонецНакопительнаяЧасть = ДолгНаКонецНакопительнаяЧасть + НакопительнаяЧасть;
									ДолгНаКонецДополнительныйТариф = ДолгНаКонецДополнительныйТариф + ДополнительныйТариф;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					Иначе
						ДокументРезультат.Вывести(ОбластьПустойГод);
					КонецЕсли;
				КонецЕсли;
		
				ОбластьИтого.Параметры.СтраховаяЧасть 		= ДолгНаКонецСтраховаяЧасть;
				ОбластьИтого.Параметры.НакопительнаяЧасть 	= ДолгНаКонецНакопительнаяЧасть;
				ОбластьИтого.Параметры.ДополнительныйТариф 	= ДолгНаКонецДополнительныйТариф;
				ДокументРезультат.Вывести(ОбластьИтого);
				
				// Подвал ведомости
				ДокументРезультат.Вывести(ОбластьПодвал);
			КонецЕсли;
			
			СтрокаДереваВходящаяОпись = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВХОДЯЩАЯ_ОПИСЬ", "Имя");
			Если СтрокаДереваВходящаяОпись <> Неопределено Тогда
				СтрокаДереваНомерПачки = СтрокаДереваВходящаяОпись.Строки.Найти("НомерПачки", "Имя");
				Если СтрокаДереваНомерПачки <> Неопределено Тогда
					СтрокаДереваОсновной = СтрокаДереваНомерПачки.Строки.Найти("Основной", "Имя");
					Если СтрокаДереваОсновной <> Неопределено Тогда
						НомерПачкиРаботодателя = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваОсновной, "Основной");
					Иначе
						СтрокаДереваПоПодразделению = СтрокаДереваНомерПачки.Строки.Найти("ПоПодразделению", "Имя");
						НомерПачкиРаботодателя = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваПоПодразделению, "ПоПодразделению");
					КонецЕсли;
	       			Возврат РаботаСДиалогами.НапечататьДокумент(ДокументРезультат, 1 , Ложь, "Ведомость уплаты взносов (АДВ-11); пачка №" + НомерПачкиРаботодателя);
				КонецЕсли;
			КонецЕсли
		КонецЕсли;

	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "АДВ11" Тогда
		
		Возврат ПечатьАДВ11();
		
	КонецЕсли;
	
	Если  ИмяМакета = "СЗВ4" Тогда
		
		Для каждого СтрокаТЧ Из ПачкиДокументов Цикл
			Если Не СтрокаТЧ.ДокументПачка.Пустая() Тогда
				СтрокаТЧ.ДокументПачка.ПолучитьОбъект().Печать("ФормаСЗВ_4_2")
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяМакета = "ВсеДокументы" Тогда
		
		ПечатьАДВ11();
		
		Для каждого СтрокаТЧ Из ПачкиДокументов Цикл
			Если Не СтрокаТЧ.ДокументПачка.Пустая() Тогда
				СтрокаТЧ.ДокументПачка.ПолучитьОбъект().Печать("ФормаСЗВ_4_2")
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // Печать

#КонецЕсли

// Формирует файл, который можно будет записать на дискетку
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Строка - содержимое файла
//
Функция СформироватьВыходнойФайл(Отказ, Заголовок = "") Экспорт
	
	//Проверка корректности заполнения шапки документа
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	КоличествоДокументов = ВыборкаПоШапкеДокумента.Количество();
	
	ВыборкаПоШапкеДокумента.Следующий();
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	Если Отказ тогда
		Возврат "";
	КонецЕсли;	 
	
	// Проверим правильности указания таблицы пачек документов
	ВыборкаПоПачкам = СформироватьЗапросПоПачкам().Выбрать();
	КоличествоПачек 	= ВыборкаПоПачкам.Количество();
	Если КоличествоПачек = 0 тогда
		ОбщегоНазначения.СообщитьОбОшибке("Список пачек документов пуст!", Отказ, Заголовок);
	КонецЕсли;	 
	
	ПроверитьЗаполнениеПачек(ВыборкаПоПачкам, ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	Если Отказ тогда
		Возврат "";
	КонецЕсли;	 
	
	ВыборкаПоЗадолженности = СформироватьЗапросПоЗадолженности().Выбрать();
	
	НомерПачки 				= ПроцедурыПерсонифицированогоУчета.НомерПачкиДокумента(ВыборкаПоШапкеДокумента.Номер);
	ДатаЗаполнения 			= ВыборкаПоШапкеДокумента.Дата;
	РасчетныйПериодГод      = ВыборкаПоШапкеДокумента.Год;
	
	ТекстФайла	=	"";
	НомерДокументаВПачке = 0;
	
	// Формирование файла версии 04.00
	Если ВыборкаПоШапкеДокумента.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда

		//Получаем форматы необходимых записей
		ДокументФорматЗаписей = ПолучитьМакет("ФорматЗаписей");
		ФорматЗаписиВУПЛ = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи("ВУПЛ",ДокументФорматЗаписей);
		ФорматЗаписиЗНЧЛ = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи("ЗНЧЛ",ДокументФорматЗаписей);// Задолженность на начало периода
		ФорматЗаписиУПЛЧ = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи("УПЛЧ",ДокументФорматЗаписей);// Уплачено за период
		ФорматЗаписиЗКНЦ = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи("ЗКНЦ",ДокументФорматЗаписей);// Задолженность на конец периода
		
		//Обработаем расчеты по годам
		ВсегоДолгНаНачалоСтраховаяЧасть = 0;
		ВсегоДолгНаНачалоНакопительнаяЧасть = 0;
		ВсегоУплаченоСтраховаяЧасть = 0;
		ВсегоУплаченоНакопительнаяЧасть = 0;
		ВсегоЗадолженностьСтраховаяЧасть = 0;
		ВсегоЗадолженностьНакопительнаяЧасть = 0;
		
		СтрокиЗНЧЛ = "";// Строки задолженности на начало
		ЧислоСтрокЗНЧЛ = 0;
		СтрокиУПЛЧ = "";// Строки уплачено по годам
		ЧислоСтрокУПЛЧ = 0;
		СтрокиЗКНЦ = "";// Строки задолженность на конец
		ЧислоСтрокЗКНЦ = 0;
		
		НачисленоСтраховаяЧасть = 0;
		НачисленоНакопительнаяЧасть = 0;
		
		Пока ВыборкаПоЗадолженности.Следующий() Цикл
			
			ПроверитьСтрокуЗадолженности(ВыборкаПоЗадолженности, ВыборкаПоШапкеДокумента, Отказ, Заголовок);
			
			Если ВыборкаПоЗадолженности.ТипСтроки = "Долг на начало года" Тогда
				
				ЗаписьЗНЧЛ = ПроцедурыПерсонифицированогоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиЗНЧЛ);
				ЗаписьЗНЧЛ.ТипЗаписи = "ЗНЧЛ";
				ЗаписьЗНЧЛ.Год = ВыборкаПоЗадолженности.Год;
				ЗаписьЗНЧЛ.СтраховаяЧасть = ВыборкаПоЗадолженности.СтраховаяЧасть;
				ЗаписьЗНЧЛ.НакопительнаяЧасть = ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
				//	Сохраняем запись ЗНЧЛ 
				СтрокавФайл = ПроцедурыПерсонифицированогоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьЗНЧЛ,ФорматЗаписиЗНЧЛ);
				СтрокиЗНЧЛ	=	СтрокиЗНЧЛ	+	СтрокавФайл + Символы.ПС;
				ЧислоСтрокЗНЧЛ = ЧислоСтрокЗНЧЛ + 1;
				
				//
				ВсегоДолгНаНачалоСтраховаяЧасть = ВсегоДолгНаНачалоСтраховаяЧасть + ВыборкаПоЗадолженности.СтраховаяЧасть;
				ВсегоДолгНаНачалоНакопительнаяЧасть = ВсегоДолгНаНачалоНакопительнаяЧасть + ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
			ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Уплачено" Тогда
				
				ЗаписьУПЛЧ = ПроцедурыПерсонифицированогоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиУПЛЧ);
				ЗаписьУПЛЧ.ТипЗаписи = "УПЛЧ";
				ЗаписьУПЛЧ.Год = ВыборкаПоЗадолженности.Год;
				ЗаписьУПЛЧ.СтраховаяЧасть = ВыборкаПоЗадолженности.СтраховаяЧасть;
				ЗаписьУПЛЧ.НакопительнаяЧасть = ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
				//	Сохраняем запись УПЛЧ 
				СтрокавФайл = ПроцедурыПерсонифицированогоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьУПЛЧ,ФорматЗаписиУПЛЧ);
				СтрокиУПЛЧ	=	СтрокиУПЛЧ	+	СтрокавФайл + Символы.ПС;
				ЧислоСтрокУПЛЧ = ЧислоСтрокУПЛЧ + 1;
				
				//
				ВсегоУплаченоСтраховаяЧасть = ВсегоУплаченоСтраховаяЧасть + ВыборкаПоЗадолженности.СтраховаяЧасть;
				ВсегоУплаченоНакопительнаяЧасть = ВсегоУплаченоНакопительнаяЧасть + ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
			ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Начислено" Тогда
				
				НачисленоСтраховаяЧасть = ВыборкаПоЗадолженности.СтраховаяЧасть;
				НачисленоНакопительнаяЧасть = ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
			ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Долг на конец года" Тогда 
				
				ЗаписьЗКНЦ = ПроцедурыПерсонифицированогоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиЗКНЦ);
				ЗаписьЗКНЦ.ТипЗаписи = "ЗКНЦ";
				ЗаписьЗКНЦ.Год = ВыборкаПоЗадолженности.Год;
				ЗаписьЗКНЦ.СтраховаяЧасть = ВыборкаПоЗадолженности.СтраховаяЧасть;
				ЗаписьЗКНЦ.НакопительнаяЧасть = ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
				//	Сохраняем запись ЗКНЦ 
				СтрокавФайл = ПроцедурыПерсонифицированогоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьЗКНЦ,ФорматЗаписиЗКНЦ);
				СтрокиЗКНЦ	=	СтрокиЗКНЦ	+	СтрокавФайл + Символы.ПС;
				ЧислоСтрокЗКНЦ = ЧислоСтрокЗКНЦ + 1;
				
				//
				ВсегоЗадолженностьСтраховаяЧасть = ВсегоЗадолженностьСтраховаяЧасть + ВыборкаПоЗадолженности.СтраховаяЧасть;
				ВсегоЗадолженностьНакопительнаяЧасть = ВсегоЗадолженностьНакопительнаяЧасть + ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
			КонецЕсли; 
		КонецЦикла; 
		
		//Формируем заголовок файла 
		
		ТекстФайла	=	ТекстФайла + ПроцедурыПерсонифицированогоУчета.ПолучитьЗаписьЗаголовок();
		ТекстФайла	=	ТекстФайла + ПроцедурыПерсонифицированогоУчета.ПолучитьЗаписьОРаботодателе(ВыборкаПоШапкеДокумента.Организация, ВыборкаПоШапкеДокумента.Дата, Отказ);
		ТекстФайла	=	ТекстФайла + ПроцедурыПерсонифицированогоУчета.ПолучитьЗаписьОПачке(НомерПачки,ДатаЗаполнения,"" ,"" ,РасчетныйПериодГод, ВыборкаПоШапкеДокумента.КодОсновногоТарифа);
		ТекстФайла	=	ТекстФайла + ПроцедурыПерсонифицированогоУчета.ПолучитьЗаписьОТипеДокумента("ВУПЛ", 1);
		
		// Формируем запись ВУПЛ	
		ЗаписьВУПЛ = ПроцедурыПерсонифицированогоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиВУПЛ);
		ЗаписьВУПЛ.ТипЗаписи = "ВУПЛ";
		ЗаписьВУПЛ.НомерДокументаВПачке = 1;
		ЗаписьВУПЛ.РасчетныйПериодГод = РасчетныйПериодГод;
		ЗаписьВУПЛ.ДатаДействия = ВыборкаПоШапкеДокумента.ДатаДействия;	
		ЗаписьВУПЛ.КоличествоПачек = ПачкиДокументов.Количество();	
		ЗаписьВУПЛ.ЧислоЗастрахованныхЛиц = ВыборкаПоШапкеДокумента.ЧислоЗастрахованныхЛиц;	
		ЗаписьВУПЛ.КодОсновногоТарифа = ВыборкаПоШапкеДокумента.КодОсновногоТарифа;	
		ЗаписьВУПЛ.ПризнакТарифа = ВыборкаПоШапкеДокумента.ПризнакТарифа;	
		
		// Суммы начислений за текущий год
		ЗаписьВУПЛ.НачисленоСтраховаяЧасть = НачисленоСтраховаяЧасть;	
		ЗаписьВУПЛ.НачисленоНакопительнаяЧасть = НачисленоНакопительнаяЧасть;	
		
		// Задолженность за прошлые годы
		ЗаписьВУПЛ.ДолгНаНачалоСтраховаяЧасть = ВсегоДолгНаНачалоСтраховаяЧасть;	
		ЗаписьВУПЛ.ДолгНаНачалоНакопительнаяЧасть = ВсегоДолгНаНачалоНакопительнаяЧасть;	
		
		// Уплачено по годам
		ЗаписьВУПЛ.УплаченоСтраховаяЧасть = ВсегоУплаченоСтраховаяЧасть;	
		ЗаписьВУПЛ.УплаченоНакопительнаяЧасть = ВсегоУплаченоНакопительнаяЧасть;	
		
		// Задолженность по всем периодам
		ЗаписьВУПЛ.ДолгНаКонецСтраховаяЧасть = ВсегоЗадолженностьСтраховаяЧасть;	
		ЗаписьВУПЛ.ДолгНаКонецНакопительнаяЧасть = ВсегоЗадолженностьНакопительнаяЧасть;	
		
		// Число записей по типам
		ЗаписьВУПЛ.ЧислоЗаписейЗНЧЛ = ЧислоСтрокЗНЧЛ;	
		ЗаписьВУПЛ.ЧислоЗаписейУПЛЧ = ЧислоСтрокУПЛЧ;	
		ЗаписьВУПЛ.ЧислоЗаписейЗКНЦ = ЧислоСтрокЗКНЦ;	
		
		ЗаписьВУПЛ.ДатаЗаполнения = ДатаЗаполнения;	
		
		//	Добавляем запись ВУПЛ в файл 
		СтрокавФайл = ПроцедурыПерсонифицированогоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьВУПЛ,ФорматЗаписиВУПЛ);
		ТекстФайла	=	ТекстФайла	+	СтрокавФайл + Символы.ПС;
		
		//	Добавляем записи ЗНЧЛ, УПЛЧ, ЗКНЦ 
		ТекстФайла	=	ТекстФайла	+	СтрокиЗНЧЛ + СтрокиУПЛЧ + СтрокиЗКНЦ;
		
	ИначеЕсли ВыборкаПоШапкеДокумента.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда 
		
		// Формирование файла версии 07.00

		// Загружаем формат файла сведений
		МакетФормата = ПолучитьОбщийМакет("ФорматПФР70");
		
		НомерДокументаВПачке = 1;
		// Создаем начальное дерево
		ДеревоВыгрузки = ПроцедурыПерсонифицированогоУчета.СоздатьДеревоXML();
				
		УзелПФР = ПроцедурыПерсонифицированогоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ФайлПФР", "", );
		
		ПроцедурыПерсонифицированогоУчета.ЗаполнитьИмяИЗаголовокФайла(УзелПФР, МакетФормата, ПроцедурыПерсонифицированогоУчета.ПолучитьИмяФайлаПФ(Ссылка, ВыборкаПоШапкеДокумента.Год, ВыборкаПоШапкеДокумента));
		
		// Добавляем реквизит ПачкаВходящихДокументов
		УзелПачкаВходящихДокументов = ПроцедурыПерсонифицированогоУчета.ЗаполнитьНаборЗаписейВходящаяОпись(УзелПФР, МакетФормата, "ВЕДОМОСТЬ_УПЛАТЫ", ВыборкаПоШапкеДокумента, КоличествоДокументов, НомерПачки, НомерДокументаВПачке);
		
		НаборЗаписейВедомостьУплаты = ПроцедурыПерсонифицированогоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ВЕДОМОСТЬ_УПЛАТЫ");		
		
		НомерДокументаВПачке = НомерДокументаВПачке + 1;
		НаборЗаписейВедомостьУплаты.НомерВПачке.Значение = НомерДокументаВПачке;
		
		// Страхователь
		НаборЗаписейСтрахователь = НаборЗаписейВедомостьУплаты.Страхователь.Значение;
		ПроцедурыПерсонифицированогоУчета.ЗаполнитьСоставительПачки(НаборЗаписейСтрахователь, ВыборкаПоШапкеДокумента);
		
		НаборЗаписейВедомостьУплаты.РасчетныйПериод.Значение = РасчетныйПериодГод;
		НаборЗаписейВедомостьУплаты.ДатаВедомости.Значение = ДатаДействия;
		
		Если ВыборкаПоШапкеДокумента.ТипСведений = "ИСХД" Тогда
			НаборЗаписейВедомостьУплаты.ТипАДВ__11.Значение = "ПОЛНАЯ"
		ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = "ПЕНС" Тогда
			НаборЗаписейВедомостьУплаты.ТипАДВ__11.Значение = "МЕЖРАСЧЕТНАЯ";
		КонецЕсли;
		
		// ЧислоПачек
		НаборЗаписейВедомостьУплаты.ЧислоПачек.Значение = ПачкиДокументов.Количество();
		
		// ЧислоЗастрахованныхЛиц
		НаборЗаписейВедомостьУплаты.ЧислоЗастрахованныхЛиц.Значение = ВыборкаПоШапкеДокумента.ЧислоЗастрахованныхЛиц;
		
		// Тариф
		НаборЗаписейТариф = НаборЗаписейВедомостьУплаты.Тариф.Значение;
		НаборЗаписейТариф.КодКатегории = ВыборкаПоШапкеДокумента.КодОсновногоТарифа;
		
		НаборЗаписейВедомостьУплаты.ПризнакТарифа.Значение = ВыборкаПоШапкеДокумента.ПризнакТарифа;
		
		// ЗадолженностьНаНачало
		ФорматЗадолженностьНаНачало = ПроцедурыПерсонифицированогоУчета.СкопироватьСтруктуруДанных(НаборЗаписейВедомостьУплаты.ЗадолженностьНаНачало);
		НаборЗаписейВедомостьУплаты.ЗадолженностьНаНачало.Значение.Удалить("СуммаЗаПериод");
		ФорматСуммаЗаПериод = ПроцедурыПерсонифицированогоУчета.СкопироватьСтруктуруДанных(ФорматЗадолженностьНаНачало.Значение.СуммаЗаПериод.Значение);
		
		// УплатаЗаПериод
		НаборЗаписейВедомостьУплаты.УплатаЗаПериод.Значение.Удалить("СуммаЗаПериод");
		
		// ЗадолженностьНаКонец
		НаборЗаписейВедомостьУплаты.ЗадолженностьНаКонец.Значение.Удалить("СуммаЗаПериод");
		
		
		НаборЗаписейВедомостьУплаты.ДатаЗаполнения.Значение = ДатаЗаполнения;
		УзелВедомостьУплаты = ПроцедурыПерсонифицированогоУчета.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, "ВЕДОМОСТЬ_УПЛАТЫ","");
		ПроцедурыПерсонифицированогоУчета.ДобавитьИнформациюВДерево(УзелВедомостьУплаты, НаборЗаписейВедомостьУплаты);
		
		УзелЗадолженностьНаНачало = УзелВедомостьУплаты.Строки.Найти("ЗадолженностьНаНачало");
		УзелЗадолженностьНаНачало.Строки.Очистить();
		УзелНачисленоЗаПериод = УзелВедомостьУплаты.Строки.Найти("НачисленияЗаПериод");
		УзелУплатаЗаПериод = УзелВедомостьУплаты.Строки.Найти("УплатаЗаПериод");
		УзелУплатаЗаПериод.Строки.Очистить();
		УзелЗадолженностьНаКонец = УзелВедомостьУплаты.Строки.Найти("ЗадолженностьНаКонец");
		УзелЗадолженностьНаКонец.Строки.Очистить();
		
		
		//Обработаем расчеты по годам
		ВсегоДолгНаНачалоСтраховаяЧасть = 0;
		ВсегоДолгНаНачалоНакопительнаяЧасть = 0;
		ВсегоУплаченоСтраховаяЧасть = 0;
		ВсегоУплаченоНакопительнаяЧасть = 0;
		ВсегоЗадолженностьСтраховаяЧасть = 0;
		ВсегоЗадолженностьНакопительнаяЧасть = 0;
		
		ЧислоСтрокЗНЧЛ 		= 0;// Строки задолженности на начало
		ЧислоСтрокУПЛЧ 		= 0;// Строки уплачено по годам
		ЧислоСтрокЗКНЦ 		= 0;// Строки задолженность на конец
		ЧислоСтрокНачислено = 0;
		
		НачисленоСтраховаяЧасть = 0;
		НачисленоНакопительнаяЧасть = 0;
		
		Пока ВыборкаПоЗадолженности.Следующий() Цикл
			
			ПроверитьСтрокуЗадолженности(ВыборкаПоЗадолженности, ВыборкаПоШапкеДокумента, Отказ, Заголовок);
			
			Если ВыборкаПоЗадолженности.ТипСтроки = "Долг на начало года" Тогда
				ЧислоСтрокЗНЧЛ = ЧислоСтрокЗНЧЛ + 1;
				
				НаборЗаписейСуммаЗаПериод = ПроцедурыПерсонифицированогоУчета.СкопироватьСтруктуруДанных(ФорматСуммаЗаПериод);
				
				НаборЗаписейСуммаЗаПериод.ТипСтроки.Значение = "ДЕТАЛЬНАЯ";
				НаборЗаписейСуммаЗаПериод.РасчетныйПериод.Значение = ВыборкаПоЗадолженности.Год;
				НаборЗаписейСтраховыеВзносы = НаборЗаписейСуммаЗаПериод.СтраховыеВзносы.Значение;
				НаборЗаписейСтраховыеВзносы.Страховые = ВыборкаПоЗадолженности.СтраховаяЧасть;
				НаборЗаписейСтраховыеВзносы.Накопительные = ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
				ПроцедурыПерсонифицированогоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированогоУчета.ДобавитьУзелВДеревоXML(УзелЗадолженностьНаНачало, "СуммаЗаПериод", ""), НаборЗаписейСуммаЗаПериод);
				
				ВсегоДолгНаНачалоСтраховаяЧасть = ВсегоДолгНаНачалоСтраховаяЧасть + ВыборкаПоЗадолженности.СтраховаяЧасть;
				ВсегоДолгНаНачалоНакопительнаяЧасть = ВсегоДолгНаНачалоНакопительнаяЧасть + ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
			ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Уплачено" Тогда
				ЧислоСтрокУПЛЧ = ЧислоСтрокУПЛЧ + 1;
				
				НаборЗаписейУплатаСуммаЗаПериод = ПроцедурыПерсонифицированогоУчета.СкопироватьСтруктуруДанных(ФорматСуммаЗаПериод);
				
				НаборЗаписейУплатаСуммаЗаПериод.ТипСтроки.Значение = "ДЕТАЛЬНАЯ";
				НаборЗаписейУплатаСуммаЗаПериод.РасчетныйПериод.Значение = ВыборкаПоЗадолженности.Год;
				НаборЗаписейУплатаСуммаЗаПериод.СтраховыеВзносы.Значение.Страховые = ВыборкаПоЗадолженности.СтраховаяЧасть;
				НаборЗаписейУплатаСуммаЗаПериод.СтраховыеВзносы.Значение.Накопительные = ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
				ПроцедурыПерсонифицированогоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированогоУчета.ДобавитьУзелВДеревоXML(УзелУплатаЗаПериод, "СуммаЗаПериод",""), НаборЗаписейУплатаСуммаЗаПериод);
		
				ВсегоУплаченоСтраховаяЧасть = ВсегоУплаченоСтраховаяЧасть + ВыборкаПоЗадолженности.СтраховаяЧасть;
				ВсегоУплаченоНакопительнаяЧасть = ВсегоУплаченоНакопительнаяЧасть + ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
			ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Начислено" Тогда
				ЧислоСтрокНачислено = ЧислоСтрокНачислено + 1;
				УзелНачисленоЗаПериод.Строки.Найти("Страховые").Значение = Формат(ВыборкаПоЗадолженности.СтраховаяЧасть, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				УзелНачисленоЗаПериод.Строки.Найти("Накопительные").Значение = Формат(ВыборкаПоЗадолженности.НакопительнаяЧасть, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				
				НачисленоСтраховаяЧасть = ВыборкаПоЗадолженности.СтраховаяЧасть;
				НачисленоНакопительнаяЧасть = ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
			ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Долг на конец года" Тогда 
				ЧислоСтрокЗКНЦ = ЧислоСтрокЗКНЦ + 1;
				
				НаборЗаписейДолгКонецСуммаЗаПериод = ПроцедурыПерсонифицированогоУчета.СкопироватьСтруктуруДанных(ФорматСуммаЗаПериод);
				
				НаборЗаписейДолгКонецСуммаЗаПериод.ТипСтроки.Значение = "ДЕТАЛЬНАЯ";
				НаборЗаписейДолгКонецСуммаЗаПериод.РасчетныйПериод.Значение = ВыборкаПоЗадолженности.Год;
				НаборЗаписейДолгКонецСуммаЗаПериод.СтраховыеВзносы.Значение.Страховые = ВыборкаПоЗадолженности.СтраховаяЧасть;
				НаборЗаписейДолгКонецСуммаЗаПериод.СтраховыеВзносы.Значение.Накопительные = ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
				ПроцедурыПерсонифицированогоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированогоУчета.ДобавитьУзелВДеревоXML(УзелЗадолженностьНаКонец, "СуммаЗаПериод", ""), НаборЗаписейДолгКонецСуммаЗаПериод);
				
				ВсегоЗадолженностьСтраховаяЧасть = ВсегоЗадолженностьСтраховаяЧасть + ВыборкаПоЗадолженности.СтраховаяЧасть;
				ВсегоЗадолженностьНакопительнаяЧасть = ВсегоЗадолженностьНакопительнаяЧасть + ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
			КонецЕсли; 
		КонецЦикла; 
		Если ЧислоСтрокЗНЧЛ = 0 Тогда
			УзелВедомостьУплаты.Строки.Удалить(УзелЗадолженностьНаНачало);
		Иначе
			НоваяСтрока = УзелЗадолженностьНаНачало.Строки.Вставить(0);
			НоваяСтрока.Имя = "Количество";
			НоваяСтрока.Значение = ЧислоСтрокЗНЧЛ + 1;
			// Добавление строки ИТОГО
			НаборЗаписейСуммаЗаПериод = ПроцедурыПерсонифицированогоУчета.СкопироватьСтруктуруДанных(ФорматСуммаЗаПериод);
			НаборЗаписейСуммаЗаПериод.Удалить("РасчетныйПериод");
			НаборЗаписейСуммаЗаПериод.ТипСтроки.Значение = "ИТОГО";
			НаборЗаписейСуммаЗаПериод.СтраховыеВзносы.Значение.Страховые = ВсегоДолгНаНачалоСтраховаяЧасть;
			НаборЗаписейСуммаЗаПериод.СтраховыеВзносы.Значение.Накопительные = ВсегоДолгНаНачалоНакопительнаяЧасть;
			ПроцедурыПерсонифицированогоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированогоУчета.ДобавитьУзелВДеревоXML(УзелЗадолженностьНаНачало, "СуммаЗаПериод", ""), НаборЗаписейСуммаЗаПериод);
				
		КонецЕсли;
		
		Если ЧислоСтрокНачислено = 0 Тогда
			УзелВедомостьУплаты.Строки.Удалить(УзелНачисленоЗаПериод);
		КонецЕсли;
		
		Если ЧислоСтрокУПЛЧ = 0 Тогда
			УзелВедомостьУплаты.Строки.Удалить(УзелУплатаЗаПериод);
		Иначе
			НоваяСтрока = УзелУплатаЗаПериод.Строки.Вставить(0);
			НоваяСтрока.Имя = "Количество";
			НоваяСтрока.Значение = ЧислоСтрокУПЛЧ + 1;
			// Добавление строки ИТОГО
			НаборЗаписейУплатаСуммаЗаПериод = ПроцедурыПерсонифицированогоУчета.СкопироватьСтруктуруДанных(ФорматСуммаЗаПериод);
			НаборЗаписейУплатаСуммаЗаПериод.Удалить("РасчетныйПериод");
			НаборЗаписейУплатаСуммаЗаПериод.ТипСтроки.Значение = "ИТОГО";
			НаборЗаписейУплатаСуммаЗаПериод.СтраховыеВзносы.Значение.Страховые = ВсегоУплаченоСтраховаяЧасть;
			НаборЗаписейУплатаСуммаЗаПериод.СтраховыеВзносы.Значение.Накопительные = ВсегоУплаченоНакопительнаяЧасть;
			ПроцедурыПерсонифицированогоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированогоУчета.ДобавитьУзелВДеревоXML(УзелУплатаЗаПериод, "СуммаЗаПериод",""), НаборЗаписейУплатаСуммаЗаПериод);
			
		КонецЕсли;
		Если ЧислоСтрокЗКНЦ = 0 Тогда
			УзелВедомостьУплаты.Строки.Удалить(УзелЗадолженностьНаКонец);
		Иначе
			НоваяСтрока = УзелЗадолженностьНаКонец.Строки.Вставить(0);
			НоваяСтрока.Имя = "Количество";
			НоваяСтрока.Значение = ЧислоСтрокЗКНЦ + 1;
			// Добавление строки ИТОГО
			НаборЗаписейДолгКонецСуммаЗаПериод = ПроцедурыПерсонифицированогоУчета.СкопироватьСтруктуруДанных(ФорматСуммаЗаПериод);
			НаборЗаписейДолгКонецСуммаЗаПериод.Удалить("РасчетныйПериод");	
			НаборЗаписейДолгКонецСуммаЗаПериод.ТипСтроки.Значение = "ИТОГО";
			НаборЗаписейДолгКонецСуммаЗаПериод.СтраховыеВзносы.Значение.Страховые = ВсегоЗадолженностьСтраховаяЧасть;
			НаборЗаписейДолгКонецСуммаЗаПериод.СтраховыеВзносы.Значение.Накопительные = ВсегоЗадолженностьНакопительнаяЧасть;
			ПроцедурыПерсонифицированогоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированогоУчета.ДобавитьУзелВДеревоXML(УзелЗадолженностьНаКонец, "СуммаЗаПериод", ""), НаборЗаписейДолгКонецСуммаЗаПериод);
				
		КонецЕсли;
		
		// Преобразуем дерево в строковое описание XML
		ТекстФайла = ПроцедурыПерсонифицированогоУчета.ПолучитьТекстФайлаИзДереваЗначений(ДеревоВыгрузки);
		
	КонецЕсли;
	
	Возврат ТекстФайла;
	
КонецФункции 

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("АДВ11,СЗВ4,Разделитель,ВсеДокументы","АДВ-11","СЗВ-4",Неопределено,"Все документы");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Создает сведения СЗВ-4
//
// Параметры
//  МассивФизЛиц - массив физлиц
//
Процедура АвтозаполнениеСведений() Экспорт

	НачалоГода = Дата(Год,1,1);
	КонецГода = КонецГода(Дата(Год,1,1));
	
	// РАСЧЕТ СУММ ВЗНОСОВ И ДНЕЙ ОТСУТСТВИЯ
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Год",						Год);
	Запрос.УстановитьПараметр("НачалоГода",					НачалоГода);
	Запрос.УстановитьПараметр("КонецГода",					КонецГода);
	Запрос.УстановитьПараметр("ОбособленноеПодразделение",	Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
	МассивБольничныеИОтпуска = Новый Массив;
	МассивБольничныеИОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь);
	МассивБольничныеИОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.БолезньБезОплаты);
	МассивБольничныеИОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск);
	МассивБольничныеИОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству);
	МассивБольничныеИОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя);
	МассивБольничныеИОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый);
	МассивБольничные = Новый Массив;
	МассивБольничные.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь);
	МассивБольничные.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.БолезньБезОплаты);
	Запрос.УстановитьПараметр("БольничныеИОтпуска", МассивБольничныеИОтпуска);
	Запрос.УстановитьПараметр("Больничные", МассивБольничные);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗастрахованныеЛица.Физлицо КАК ФизЛицо,
	|	&ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	&Год КАК Год,
	|	ЕСТЬNULL(ЕСНИсчисленныйОбороты.ПФРНакопительная, 0) КАК НачисленоНаНакопительнуюЧастьПФР,
	|	ЕСТЬNULL(ЕСНИсчисленныйОбороты.ПФРСтраховая, 0) КАК НачисленоНаСтраховуюЧастьПФР,
	|	ЕСТЬNULL(ФактическийПериодДействия.ДнейБолезни, 0) КАК ДнейБолезни,
	|	ЕСТЬNULL(ФактическийПериодДействия.ДнейОтпускаЗаСвойСчет, 0) КАК ДнейОтпускаЗаСвойСчет
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо КАК Физлицо
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&НачалоГода,
	|			Организация = &ГоловнаяОрганизация
	|				И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацииСрезПоследних
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &НачалоГода
	|						И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделениеЗавершения
	|				ИНАЧЕ РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение
	|			КОНЕЦ = &ОбособленноеПодразделение
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РаботникиОрганизации.Сотрудник.Физлицо
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|	ГДЕ
	|		РаботникиОрганизации.Период МЕЖДУ &НачалоГода И &КонецГода
	|		И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|		И РаботникиОрганизации.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|		И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Работники.Сотрудник.Физлицо 
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций КАК Работники
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|				ПО ПериодыПерекрытия.Период <= Работники.ПериодЗавершения
	|					И ПериодыПерекрытия.Период > Работники.Период
	|					И ПериодыПерекрытия.Сотрудник = Работники.Сотрудник
	|					И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|		ГДЕ
	|			Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			И Работники.Организация = &ГоловнаяОрганизация
	|			И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|			И Работники.ОбособленноеПодразделениеЗавершения = &ОбособленноеПодразделение
	|			И Работники.ПериодЗавершения МЕЖДУ &НачалоГода И &КонецГода
	|		    И ПериодыПерекрытия.Период ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо
	|	ИЗ
	|		Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|	ГДЕ
	|		ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &КонецГода
	|		И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &НачалоГода
	|		И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
	|		И ДоговорНаВыполнениеРаботСФизЛицом.Организация = &ОбособленноеПодразделение) КАК ЗастрахованныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЕСНИсчисленныйОбороты.ФизЛицо КАК ФизЛицо,
	|			СУММА(ЕСНИсчисленныйОбороты.ПФРНакопительная) КАК ПФРНакопительная,
	|			СУММА(ЕСНИсчисленныйОбороты.ПФРСтраховая) КАК ПФРСтраховая
	|		ИЗ
	|			РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленныйОбороты
	|		ГДЕ
	|			ЕСНИсчисленныйОбороты.Организация = &ГоловнаяОрганизация
	|			И ЕСНИсчисленныйОбороты.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|			И ЕСНИсчисленныйОбороты.Период МЕЖДУ &НачалоГода И &КонецГода
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЕСНИсчисленныйОбороты.ФизЛицо) КАК ЕСНИсчисленныйОбороты
	|		ПО ЗастрахованныеЛица.Физлицо = ЕСНИсчисленныйОбороты.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ФактическийПериодДействия.ФизЛицо КАК ФизЛицо,
	|			СУММА(ВЫБОР
	|					КОГДА ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&Больничные)
	|						ТОГДА РАЗНОСТЬДАТ(ФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ), СЕКУНДА, 1), ДЕНЬ)
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ДнейБолезни,
	|			СУММА(ВЫБОР
	|					КОГДА ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&Больничные)
	|						ТОГДА 0
	|					ИНАЧЕ РАЗНОСТЬДАТ(ФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ), СЕКУНДА, 1), ДЕНЬ)
	|				КОНЕЦ) КАК ДнейОтпускаЗаСвойСчет
	|		ИЗ
	|			РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|				Организация = &ГоловнаяОрганизация
	|					И ОбособленноеПодразделение = &ОбособленноеПодразделение
	|					И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&БольничныеИОтпуска)
	|					И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|					И (ПериодДействия МЕЖДУ &НачалоГода И &КонецГода)) КАК ФактическийПериодДействия
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ФактическийПериодДействия.ФизЛицо) КАК ФактическийПериодДействия
	|		ПО ЗастрахованныеЛица.Физлицо = ФактическийПериодДействия.ФизЛицо";
	
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	// РАСЧЕТ СТАЖА
	
	ТаблицаСтажа = ПроцедурыПерсонифицированогоУчета.СЗВ4_ПолучитьДанныеДляЗаполненияСтажа(Организация, Год);
	
	/////////////////////////////////////////////////////////////////////////////////////
	// ОЧИСТКА СТАРЫХ ЗАПИСЕЙ О СТАЖЕ, ЗАПИСЕЙ О ВЗНОСАХ И ДОБАВЛЕНИЕ НОВЫХ ЗАПИСЕЙ ДОЛЖНО ПРОИСХОДИТЬ В РАМКАХ ОДНОЙ ТРАНЗАКЦИИ
	
	НачатьТранзакцию();
	
	// Загрузим полученные данные в наборы записей 
	НаборЗаписейОВзносах = РегистрыСведений.СуммыВзносовДляСЗВ4.СоздатьНаборЗаписей();
	
	НаборЗаписейОВзносах.Отбор.ОбособленноеПодразделение.Значение = Организация;
	НаборЗаписейОВзносах.Отбор.ОбособленноеПодразделение.Использование = Истина;
	НаборЗаписейОВзносах.Отбор.Год.Значение = Год;
	НаборЗаписейОВзносах.Отбор.Год.Использование = Истина;
	НаборЗаписейОВзносах.Отбор.ФизЛицо.Использование = Истина;
	
	НаборЗаписейОСтаже = РегистрыСведений.ЗаписиОСтажеДляСЗВ4.СоздатьНаборЗаписей();
	
	НаборЗаписейОСтаже.Отбор.ОбособленноеПодразделение.Значение = Организация;
	НаборЗаписейОСтаже.Отбор.ОбособленноеПодразделение.Использование = Истина;
	НаборЗаписейОСтаже.Отбор.Год.Значение = Год;
	НаборЗаписейОСтаже.Отбор.Год.Использование = Истина;
	НаборЗаписейОСтаже.Отбор.ФизЛицо.Использование = Истина;
	
	СтруктураПоиска = Новый Структура("ФизЛицо");
	Пока ТаблицаРезультатаЗапроса.Следующий() Цикл
	
		// Установим отбор записей в наборе по выбранному работнику
		НаборЗаписейОСтаже.Отбор.ФизЛицо.Значение = ТаблицаРезультатаЗапроса.ФизЛицо;
		НаборЗаписейОВзносах.Отбор.ФизЛицо.Значение = ТаблицаРезультатаЗапроса.ФизЛицо;
		СтруктураПоиска.ФизЛицо = ТаблицаРезультатаЗапроса.ФизЛицо;
		
		МассивСтрок = ТаблицаСтажа.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписейОСтаже.Добавить(),СтрокаТаблицы)
		КонецЦикла; 
	
		// Пронумеруем основные записи о стаже
		НомерЗаписи = 0;
		Для Каждого Запись из НаборЗаписейОСтаже Цикл
			НомерЗаписи = НомерЗаписи + 1;
			Запись.НомерОсновнойЗаписи = НомерЗаписи;
		КонецЦикла; 
		
		// Запишем записи стажа в режиме добавления (при записи набора происходит проверка записей стажа)
		Попытка
			НаборЗаписейОСтаже.Записать();
			НаборЗаписейОСтаже.Очистить();
		Исключение
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
		
		Если ТаблицаРезультатаЗапроса.НачисленоНаНакопительнуюЧастьПФР <> Null Тогда
			ЗаполнитьЗначенияСвойств(НаборЗаписейОВзносах.Добавить(),ТаблицаРезультатаЗапроса);
		КонецЕсли; 
			
		// Запишем записи стажа в режиме добавления (при записи набора происходит проверка записей стажа)
		Попытка
			НаборЗаписейОВзносах.Записать();
			НаборЗаписейОВзносах.Очистить();
		Исключение
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
		
	КонецЦикла;

	ЗафиксироватьТранзакцию();

КонецПроцедуры // АвтозаполнениеСведений()

// Формирует пачки сведений СЗВ-4
//
// Параметры
//  нет
//
Процедура АвтозаполнениеПачек(АДВ11ПерваяВКомплекте = Ложь) Экспорт

	ПачкиДокументов.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидАдресаДляИнформирования", Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица);
	Запрос.УстановитьПараметр("ТипАдрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ПустыеУсловияТруды", Справочники.ОсобыеУсловияТруда.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеОснованиеВыслугиЛет", Справочники.ОснованияВыслугиЛет.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеОснованиеИсчисляемогоСтажа", Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ПустаяСсылка());
	
	// адреса для информирования заполняем только в том случае, когда они изменились по сравнению с последними
	// передававшимися в ПФР
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизЛица.ФизЛицо,
	|	ФизЛица.ФизЛицо.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА ФизЛицаСЗВ41.ФизЛицо ЕСТЬ НЕ NULL 
	|			ТОГДА ""СЗВ-4-1""
	|		ИНАЧЕ ""СЗВ-4-2""
	|	КОНЕЦ КАК ТипФормДокументов,
	|	ВЫБОР
	|		КОГДА ФизЛицаСЗВ41.ФизЛицо ЕСТЬ НЕ NULL 
	|			ТОГДА NULL
	|		ИНАЧЕ ФизЛица.ТерриториальныеУсловия
	|	КОНЕЦ КАК ТерриториальныеУсловия,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL("","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9, """") <> ЕСТЬNULL(ПереданныеВПФРАдреса.АдресДляИнформирования, """")
	|			ТОГДА "","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АдресДляИнформирования,
	|	ВЫБОР
	|		КОГДА ФизЛица.ФизЛицо.СтраховойНомерПФР = """"
	|			ТОГДА ИСТИНА
	|		КОГДА ФизЛица.ФизЛицо.СтраховойНомерПФР = ""   -   -      ""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НетСтраховогоНомера
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
	|		ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия
	|	ИЗ
	|		РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
	|	ГДЕ
	|		ЗаписиОСтаже.Год = &Год
	|		И ЗаписиОСтаже.ОбособленноеПодразделение = &Организация) КАК ФизЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЗаписиОСтаже.ФизЛицо КАК ФизЛицо
	|		ИЗ
	|			РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
	|		ГДЕ
	|			ЗаписиОСтаже.Год = &Год
	|			И ЗаписиОСтаже.ОбособленноеПодразделение = &Организация
	|			И (ЗаписиОСтаже.НомерОсновнойЗаписи > 1
	|					ИЛИ ЗаписиОСтаже.НомерДополнительнойЗаписи > 0
	|					ИЛИ ЗаписиОСтаже.ОсобыеУсловияТруда <> &ПустыеУсловияТруды
	|					ИЛИ ЗаписиОСтаже.ОснованиеВыслугиЛет <> &ПустоеОснованиеВыслугиЛет
	|					ИЛИ ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа <> &ПустоеОснованиеИсчисляемогоСтажа
	|					ИЛИ ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа <> """")) КАК ФизЛицаСЗВ41
	|		ПО ФизЛица.ФизЛицо = ФизЛицаСЗВ41.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаДляИнформирования
	|		ПО ФизЛица.ФизЛицо = АдресаДляИнформирования.Объект
	|			И (АдресаДляИнформирования.Вид = &ВидАдресаДляИнформирования)
	|			И (АдресаДляИнформирования.Тип = &ТипАдрес)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДатыДокументов.ФизЛицо КАК ФизЛицо,
	|			СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования КАК АдресДляИнформирования
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Дата) КАК Дата,
	|				СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо КАК ФизЛицо
	|			ИЗ
	|				Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
	|			ГДЕ
	|				СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования <> """"
	|				И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Организация = &Организация
	|				И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Проведен
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо) КАК ДатыДокументов
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
	|				ПО ДатыДокументов.Дата = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Дата
	|					И ДатыДокументов.ФизЛицо = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо
	|					И (СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Организация = &Организация)
	|					И (СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Проведен)
	|		ГДЕ
	|			СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования <> """") КАК ПереданныеВПФРАдреса
	|		ПО ФизЛица.ФизЛицо = ПереданныеВПФРАдреса.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипФормДокументов,
	|	ТерриториальныеУсловия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтрСписокФизЛицБезСтрахНомеров = "";
	
	Сообщить("--------------------------------------------------------------------");
	Сообщить("Генерация документов-пачек СЗВ-4:");
	
	ДатаСозданияДокументов = ДатаДействия;
	
	Пока Выборка.СледующийПоЗначениюПоля("ТипФормДокументов") Цикл
		
		Пока Выборка.СледующийПоЗначениюПоля("ТерриториальныеУсловия") Цикл

			// Создадим документ СЗВ-4
			НовыйДок = Документы.СведенияОТрудовомСтажеИЗаработкеСЗВ4.СоздатьДокумент();
			
			НовыйДок.Дата = ДатаСозданияДокументов;
			ЗаполнитьЗначенияСвойств(НовыйДок,ЭтотОбъект,"Организация,Ответственный,Год,ТипСведений,ФорматФайла");
			ЗаполнитьЗначенияСвойств(НовыйДок,Выборка,"ТипФормДокументов,ТерриториальныеУсловия");

			НовыйДок.УстановитьНовыйНомер();

			Пока Выборка.Следующий() Цикл
				
				// Если у физлица нет страхового номера, то в пачки его включать не будем: проверка на указание пустого или неверного страхового номера ("   -   -      ")
				Если Выборка.НетСтраховогоНомера Тогда
					СтрСписокФизЛицБезСтрахНомеров = СтрСписокФизЛицБезСтрахНомеров + Символы.ПС + Символы.Таб + Выборка.Наименование;
					Продолжить;
				КонецЕсли;	
				
				Если НовыйДок.РаботникиОрганизации.Количество() = 200  Тогда
					
					// Сохраним пачку СЗВ-4
					НовыйДок.Записать();
					Сообщить("	создан документ: " + НовыйДок);
					
					// Добавим пачку в ведомость АДВ-11
					НоваяСтрокаПачка = ПачкиДокументов.Добавить();
					НоваяСтрокаПачка.ДокументПачка = НовыйДок.Ссылка; 
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПачка,НовыйДок,"ТерриториальныеУсловия,ТипФормДокументов,ВидКорректировки");

					// Создадим документ СЗВ-4
					НовыйДок = Документы.СведенияОТрудовомСтажеИЗаработкеСЗВ4.СоздатьДокумент();
					
					НовыйДок.Дата = ДатаСозданияДокументов;
					ЗаполнитьЗначенияСвойств(НовыйДок,ЭтотОбъект,"Организация,Ответственный,Год,ТипСведений");
					ЗаполнитьЗначенияСвойств(НовыйДок,Выборка,"ТипФормДокументов,ТерриториальныеУсловия");

					НовыйДок.УстановитьНовыйНомер();

				КонецЕсли; 
				
				ЗаполнитьЗначенияСвойств(НовыйДок.РаботникиОрганизации.Добавить(),Выборка,"ФизЛицо,АдресДляИнформирования");

			КонецЦикла;
			
			Если НовыйДок.РаботникиОрганизации.Количество() <> 0 Тогда
				
				// Сохраним пачку СЗВ-4
				НовыйДок.Записать();
				Сообщить("	создан документ: " + НовыйДок);
				
				// Добавим пачку в ведомость АДВ-11
				НоваяСтрокаПачка = ПачкиДокументов.Добавить();
				НоваяСтрокаПачка.ДокументПачка = НовыйДок.Ссылка; 
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПачка,НовыйДок,"ТерриториальныеУсловия,ТипФормДокументов,ВидКорректировки");
				
			КонецЕсли;
			
		КонецЦикла; 
	КонецЦикла; 
	
	Если СтрСписокФизЛицБезСтрахНомеров <> "" Тогда
		Сообщить("Следующие физические лица не включены в пачки документов перс.учета из-за отсутствия страховых номеров ПФР:" + СтрСписокФизЛицБезСтрахНомеров, СтатусСообщения.Внимание);
	КонецЕсли; 
	
КонецПроцедуры

// заполняет строки задолженности
//
// Параметры
//  нет
//
Процедура АвтозаполнениеСтрокЗадолженности() Экспорт
	
	СведенияОЗадолженности.Очистить();
	
	СальдоНачальноеНакопительнаяЧасть = 0;
	СальдоНачальноеСтраховаяЧасть = 0;
	СальдоТекущееНакопительнаяЧасть = 0;
	СальдоТекущееСтраховаяЧасть = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПередачаСЗВ4вПФР.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР КАК ПередачаСЗВ4вПФР
	|ГДЕ
	|	ПередачаСЗВ4вПФР.Организация = &ОбособленноеПодразделение
	|	И ПередачаСЗВ4вПФР.МоментВремени < &МоментВремени
	|	И ПередачаСЗВ4вПФР.Год = &Год
	|	И ПередачаСЗВ4вПФР.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПередачаСЗВ4вПФР.МоментВремени УБЫВ";
	
	Запрос.УстановитьПараметр("МоментВремени", ?(ЭтоНовый(),Новый МоментВремени(ТекущаяДата()),МоментВремени()));
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Организация);
	Запрос.УстановитьПараметр("Год", Год);
	
	// это предыдущий документ за текущий расчетный период
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда // посмотрим прошлогодние документы
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ПередачаСЗВ4вПФРСведенияОЗадолженности.СтраховаяЧасть), 0) КАК СтраховаяЧасть,
		|	ЕСТЬNULL(СУММА(ПередачаСЗВ4вПФРСведенияОЗадолженности.НакопительнаяЧасть), 0) КАК НакопительнаяЧасть,
		|	ПередачаСЗВ4вПФРСведенияОЗадолженности.Год КАК Год
		|ИЗ
		|	Документ.ПередачаСЗВ4вПФР.СведенияОЗадолженности КАК ПередачаСЗВ4вПФРСведенияОЗадолженности
		|ГДЕ
		|	ПередачаСЗВ4вПФРСведенияОЗадолженности.Ссылка В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ПередачаСЗВ4вПФР.Ссылка КАК Ссылка
		|			ИЗ
		|				Документ.ПередачаСЗВ4вПФР КАК ПередачаСЗВ4вПФР
		|			ГДЕ
		|				ПередачаСЗВ4вПФР.Организация = &ОбособленноеПодразделение
		|				И ПередачаСЗВ4вПФР.МоментВремени < &МоментВремени
		|				И ПередачаСЗВ4вПФР.Год < &Год
		|				И ПередачаСЗВ4вПФР.Проведен
		|				
		|			УПОРЯДОЧИТЬ ПО
		|				ПередачаСЗВ4вПФР.МоментВремени УБЫВ)
		|	И ПередачаСЗВ4вПФРСведенияОЗадолженности.ТипСтроки = ""Долг на конец года""
		|
		|СГРУППИРОВАТЬ ПО
		|	ПередачаСЗВ4вПФРСведенияОЗадолженности.Год
		|
		|УПОРЯДОЧИТЬ ПО
		|	Год";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Год = Год Тогда
				СальдоНачальноеНакопительнаяЧасть = Мин(Выборка.НакопительнаяЧасть,0);
				СальдоНачальноеСтраховаяЧасть = Мин(Выборка.СтраховаяЧасть,0);
			Иначе
				СтрокаНачислено = СведенияОЗадолженности.Добавить();
				СтрокаНачислено.Год = Выборка.Год;
				СтрокаНачислено.ТипСтроки = "Долг на начало года";
				СтрокаНачислено.НакопительнаяЧасть = Выборка.НакопительнаяЧасть;
				СтрокаНачислено.СтраховаяЧасть = Выборка.СтраховаяЧасть;
				СтрокаНачислено = СведенияОЗадолженности.Добавить();
				СтрокаНачислено.Год = Выборка.Год;
				СтрокаНачислено.ТипСтроки = "Долг на конец года";
				СтрокаНачислено.НакопительнаяЧасть = Выборка.НакопительнаяЧасть;
				СтрокаНачислено.СтраховаяЧасть = Выборка.СтраховаяЧасть;
			КонецЕсли;
		КонецЦикла;
		
	Иначе   
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
		ТипыЗадолженности = Новый Массив;
		ТипыЗадолженности.Добавить("Долг на начало года");
		ТипыЗадолженности.Добавить("Начислено");
		ТипыЗадолженности.Добавить("Уплачено");
		Запрос.УстановитьПараметр("ТипыЗадолженности", ТипыЗадолженности);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПередачаСЗВ4вПФРСведенияОЗадолженности.Год КАК Год,
		|	ПередачаСЗВ4вПФРСведенияОЗадолженности.ТипСтроки,
		|	СУММА(ПередачаСЗВ4вПФРСведенияОЗадолженности.СтраховаяЧасть) КАК СтраховаяЧасть,
		|	СУММА(ПередачаСЗВ4вПФРСведенияОЗадолженности.НакопительнаяЧасть) КАК НакопительнаяЧасть,
		|	ВЫБОР
		|		КОГДА ПередачаСЗВ4вПФРСведенияОЗадолженности.ТипСтроки = ""Долг на начало года""
		|			ТОГДА 1
		|		КОГДА ПередачаСЗВ4вПФРСведенияОЗадолженности.ТипСтроки = ""Уплачено""
		|			ТОГДА -1
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПолеПорядка
		|ИЗ
		|	Документ.ПередачаСЗВ4вПФР.СведенияОЗадолженности КАК ПередачаСЗВ4вПФРСведенияОЗадолженности
		|ГДЕ
		|	ПередачаСЗВ4вПФРСведенияОЗадолженности.Ссылка = &Ссылка
		|	И ПередачаСЗВ4вПФРСведенияОЗадолженности.ТипСтроки В(&ТипыЗадолженности)
		|	И ПередачаСЗВ4вПФРСведенияОЗадолженности.Год <= &Год
		|
		|СГРУППИРОВАТЬ ПО
		|	ПередачаСЗВ4вПФРСведенияОЗадолженности.Год,
		|	ПередачаСЗВ4вПФРСведенияОЗадолженности.ТипСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Год,
		|	ПолеПорядка УБЫВ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Год") Цикл
			Если Выборка.Год = Год Тогда
				Пока Выборка.Следующий() Цикл 
					Если Выборка.ТипСтроки = "Долг на начало года" Тогда
						Продолжить; // вычислим самотоятельно
					КонецЕсли;
					СальдоТекущееНакопительнаяЧасть = СальдоТекущееНакопительнаяЧасть + Выборка.ПолеПорядка * Выборка.НакопительнаяЧасть;
					СальдоТекущееСтраховаяЧасть = СальдоТекущееСтраховаяЧасть + Выборка.ПолеПорядка * Выборка.СтраховаяЧасть;
				КонецЦикла;
			Иначе
				
				// строки задолженности по состоянию на начало текущего года и сумм уплаченных
				СальдоНакопительнаяЧасть = 0;
				СальдоСтраховаяЧасть = 0;
				ГодЗадолженности = Выборка.Год;
				
				Пока Выборка.Следующий() Цикл 
					Если Выборка.ТипСтроки = "Начислено" Тогда
						Продолжить; // недопустимое значение
					КонецЕсли;
					СтрокаНачислено = СведенияОЗадолженности.Добавить();
					СтрокаНачислено.Год = Выборка.Год;
					СтрокаНачислено.ТипСтроки = Выборка.ТипСтроки;
					СтрокаНачислено.НакопительнаяЧасть = Выборка.НакопительнаяЧасть;
					СтрокаНачислено.СтраховаяЧасть = Выборка.СтраховаяЧасть;
					СальдоНакопительнаяЧасть = СальдоНакопительнаяЧасть + Выборка.ПолеПорядка * Выборка.НакопительнаяЧасть;
					СальдоСтраховаяЧасть = СальдоСтраховаяЧасть + Выборка.ПолеПорядка * Выборка.СтраховаяЧасть;
				КонецЦикла;
				
				// формирование строк с суммами задолженности по состоянию на конец текущего года
				Если СальдоНакопительнаяЧасть <> 0 Или СальдоСтраховаяЧасть <> 0 Тогда
					Если ГодЗадолженности = Год - 1 Тогда // предыдущий год
						// задолженность ЗА предыдущий год по состоянию НА конец текущего года
						СальдоНачальноеНакопительнаяЧасть = Мин(СальдоНакопительнаяЧасть,0);
						СальдоНачальноеСтраховаяЧасть = Мин(СальдоСтраховаяЧасть,0);
						Если СальдоНакопительнаяЧасть >= 0 Или СальдоСтраховаяЧасть >= 0 Тогда
							СтрокаНачислено = СведенияОЗадолженности.Добавить();
							СтрокаНачислено.Год = ГодЗадолженности;
							СтрокаНачислено.ТипСтроки = "Долг на конец года";
							СтрокаНачислено.НакопительнаяЧасть = Макс(СальдоНакопительнаяЧасть,0);
							СтрокаНачислено.СтраховаяЧасть = Макс(СальдоСтраховаяЧасть,0);
						КонецЕсли;
						Если СальдоНакопительнаяЧасть <= 0 Или СальдоСтраховаяЧасть <= 0 Тогда
							СтрокаНачислено = СведенияОЗадолженности.Добавить();
							СтрокаНачислено.Год = Год;
							СтрокаНачислено.ТипСтроки = "Долг на начало года";
							СтрокаНачислено.НакопительнаяЧасть = СальдоНачальноеНакопительнаяЧасть;
							СтрокаНачислено.СтраховаяЧасть = СальдоНачальноеСтраховаяЧасть;
						КонецЕсли;
					Иначе  // прошлые годы
						Если СальдоНакопительнаяЧасть >= 0 Или СальдоСтраховаяЧасть >= 0 Тогда
							СтрокаНачислено = СведенияОЗадолженности.Добавить();
							СтрокаНачислено.Год = ГодЗадолженности;
							СтрокаНачислено.ТипСтроки = "Долг на конец года";
							СтрокаНачислено.НакопительнаяЧасть = Макс(СальдоНакопительнаяЧасть,0);
							СтрокаНачислено.СтраховаяЧасть = Макс(СальдоСтраховаяЧасть,0);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		
	КонецЕсли;
	
	// допишем записи текущего расчетного периода
	
	Запрос.УстановитьПараметр("НачалоГода", Дата(Год,1,1));
	Запрос.УстановитьПараметр("КонецГода", ?(ТипСведений = "ПЕНС", НачалоМесяца(ДатаДействия) - 1, КонецМесяца(ДатаДействия)));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ЕСНИсчисленныйОбороты.ПФРНакопительная), 0) КАК НачисленоНаНакопительнуюЧастьПФР,
	|	ЕСТЬNULL(СУММА(ЕСНИсчисленныйОбороты.ПФРСтраховая), 0) КАК НачисленоНаСтраховуюЧастьПФР
	|ИЗ
	|	РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленныйОбороты
	|ГДЕ
	|	ЕСНИсчисленныйОбороты.Период МЕЖДУ &НачалоГода И &КонецГода
	|	И ЕСНИсчисленныйОбороты.ОбособленноеПодразделение = &ОбособленноеПодразделение";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаНачислено = СведенияОЗадолженности.Добавить();
		СтрокаНачислено.Год = Год;
		СтрокаНачислено.ТипСтроки = "Начислено";
		СтрокаНачислено.НакопительнаяЧасть = Окр(Выборка.НачисленоНаНакопительнуюЧастьПФР);
		СтрокаНачислено.СтраховаяЧасть = Окр(Выборка.НачисленоНаСтраховуюЧастьПФР);
		СтрокаНачислено = СведенияОЗадолженности.Добавить();
		СтрокаНачислено.Год = Год;
		СтрокаНачислено.ТипСтроки = "Уплачено";
		СтрокаНачислено.НакопительнаяЧасть = Окр(Выборка.НачисленоНаНакопительнуюЧастьПФР) - СальдоТекущееНакопительнаяЧасть;
		СтрокаНачислено.СтраховаяЧасть = Окр(Выборка.НачисленоНаСтраховуюЧастьПФР) - СальдоТекущееСтраховаяЧасть;
	КонецЕсли;
	СальдоНакопительнаяЧасть = СальдоНачальноеНакопительнаяЧасть + СальдоТекущееНакопительнаяЧасть;
	СальдоСтраховаяЧасть = СальдоНачальноеСтраховаяЧасть + СальдоТекущееСтраховаяЧасть;
	Если СальдоНакопительнаяЧасть <> 0 Или СальдоСтраховаяЧасть <> 0 Тогда
		Если СальдоНакопительнаяЧасть >= 0 Или СальдоСтраховаяЧасть >= 0 Тогда
			СтрокаНачислено = СведенияОЗадолженности.Добавить();
			СтрокаНачислено.Год = Год;
			СтрокаНачислено.ТипСтроки = "Долг на конец года";
			СтрокаНачислено.НакопительнаяЧасть = Макс(СальдоНакопительнаяЧасть,0);
			СтрокаНачислено.СтраховаяЧасть = Макс(СальдоСтраховаяЧасть,0);
		КонецЕсли;
		Если СальдоНакопительнаяЧасть <= 0 И СальдоСтраховаяЧасть <= 0 Тогда
			СтрокаНачислено = СведенияОЗадолженности.Добавить();
			СтрокаНачислено.Год = Год + 1;
			СтрокаНачислено.ТипСтроки = "Долг на конец года";
			СтрокаНачислено.НакопительнаяЧасть = Мин(СальдоНакопительнаяЧасть,0);
			СтрокаНачислено.СтраховаяЧасть = Мин(СальдоСтраховаяЧасть,0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // АвтозаполнениеСтрокЗадолженности()

// Подбираем еще не отправленные, но проведенные пачки СЗВ-4
//
// Параметры
//  нет
//
Процедура АвтозаполнениеПроведеннымиПачками() Экспорт 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ТипСведений",	ТипСведений);
	Запрос.УстановитьПараметр("Год",			Год);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ФорматФайла",	ФорматФайла);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка КАК ДокументПачка,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Комментарий КАК КомментарийПачки,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТерриториальныеУсловия,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипФормДокументов,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.ВидКорректировки
	|ИЗ
	|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4 КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4
	|ГДЕ
	|	(НЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Ведомости.ДокументПачка
	|				ИЗ
	|					Документ.ПередачаСЗВ4вПФР.ПачкиДокументов КАК Ведомости
	|				ГДЕ
	|					Ведомости.Ссылка.Проведен = ИСТИНА
	|					И
	|					Ведомости.Ссылка <> &ДокСсылка))
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Проведен
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация = &Организация
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Год = &Год
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.ФорматФайла = &ФорматФайла
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипСведений = &ТипСведений";
	
	ПачкиДокументов.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры // АвтозаполнениеПроведеннымиПачками()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ проведения документа

// Формирует запрос по пачкам документов
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ДатаЗаполнения" , Дата);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидСтавокЕСНиПФР" , Перечисления.ВидыСтавокЕСНиПФР.ДляСельскохозяйственныхПроизводителей);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.Номер,
	|	Док.Дата,
	|	Док.Организация,
	|	Док.Организация.Код,
	|	Док.Организация.ЮрФизЛицо,
	|	Док.Организация.ОГРН,
	|	ВЫРАЗИТЬ(Док.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК ОрганизацияНаименованиеПолное,
	|	Док.Организация.Наименование,
	|	Док.Организация.РегистрационныйНомерПФР,
	|	Док.Организация.НаименованиеОКОПФ,
	|	Док.Организация.ИНН,
	|	Док.Организация.КПП,
	|	ВЫБОР
	|		КОГДА Док.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоГоловнаяОрганизация,
	|	Док.Год,
	|	Док.ДатаДействия,
	|	Док.Ответственный,
	|	Док.ТипСведений,
	|	Док.ФорматФайла,
	|	Док.Комментарий,
	|	ДанныеПоФизлицам.КоличествоФизлиц КАК ЧислоЗастрахованныхЛиц,
	|	ВЫБОР
	|		КОГДА Док.Год < 2005
	|			ТОГДА ВЫБОР
	|					КОГДА ПравоПрименениеРегресса.ПФР
	|						ТОГДА ""Р""
	|					ИНАЧЕ ""М""
	|				КОНЕЦ
	|		ИНАЧЕ ""Р""
	|	КОНЕЦ КАК ПризнакТарифа,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА Док.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|					ТОГДА Док.Организация.ВидСтавокЕСНиПФР
	|				ИНАЧЕ Организации.ВидСтавокЕСНиПФР
	|			КОНЕЦ = &ВидСтавокЕСНиПФР
	|			ТОГДА ""СХ""
	|		ИНАЧЕ ""НР""
	|	КОНЕЦ КАК КодОсновногоТарифа
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КОЛИЧЕСТВО(ФормыСЗВ4.ФизЛицо) КАК КоличествоФизлиц
	|		ИЗ
	|			Документ.ПередачаСЗВ4вПФР.ПачкиДокументов КАК ВУПЛ
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК ФормыСЗВ4
	|				ПО ФормыСЗВ4.Ссылка = ВУПЛ.ДокументПачка
	|		ГДЕ
	|			ВУПЛ.Ссылка = &ДокументСсылка) КАК ДанныеПоФизлицам
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравоПримененияРегрессивнойШкалыНалоговСФОТ.СрезПоследних(&ДатаЗаполнения, ) КАК ПравоПрименениеРегресса
	|		ПО (ВЫБОР
	|				КОГДА Док.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|					ТОГДА Док.Организация
	|				ИНАЧЕ Док.Организация.ГоловнаяОрганизация
	|			КОНЕЦ = ПравоПрименениеРегресса.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Организации.Ссылка КАК Ссылка,
	|			Организации.Код КАК Код,
	|			Организации.ЮрФизЛицо КАК ЮрФизЛицо,
	|			Организации.ВидСтавокЕСНиПФР КАК ВидСтавокЕСНиПФР
	|		ИЗ
	|			Справочник.Организации КАК Организации) КАК Организации
	|		ПО Док.Организация.ГоловнаяОрганизация = Организации.Ссылка
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции 

// Формирует запрос по задолженности
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоПачкам()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Пачки.НомерСтроки КАК НомерСтроки,
	|	Пачки.ДокументПачка КАК ДокументПачка,
	|	Пачки2.НомерСтроки КАК НомерПовторяющийсяСтроки,
	|	Пачки.ДокументПачка.Год КАК Год,
	|	Пачки.ДокументПачка.Проведен КАК Проведен,
	|	Пачки.ДокументПачка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Пачки.ДокументПачка.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоГоловнаяОрганизация,
	|	Пачки.ДокументПачка.Организация.Код КАК ОрганизацияКод,
	|	Пачки.ДокументПачка.Организация.РегистрационныйНомерПФР КАК ОрганизацияРегистрационныйНомерПФР,
	|	ВЫБОР
	|		КОГДА Пачки.ДокументПачка.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА Пачки.ДокументПачка.Организация
	|		ИНАЧЕ Пачки.ДокументПачка.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Пачки.ДокументПачка.ТипСведений КАК ТипСведений,
	|	Пачки.ДокументПачка.ФорматФайла КАК ФорматФайла,
	|	Пачки.ДокументПачка.Номер КАК Номер
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР.ПачкиДокументов КАК Пачки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаСЗВ4вПФР.ПачкиДокументов КАК Пачки2
	|		ПО (Пачки2.Ссылка = &ДокументСсылка)
	|			И Пачки.ДокументПачка = Пачки2.ДокументПачка
	|			И Пачки.НомерСтроки < Пачки2.НомерСтроки
	|ГДЕ
	|	Пачки.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();

КонецФункции 

// Формирует запрос по задолженности
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоЗадолженности()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сведения.Год КАК Год,
	|	Сведения.ТипСтроки,
	|	Сведения.СтраховаяЧасть,
	|	Сведения.НакопительнаяЧасть,
	|	Сведения.НомерСтроки,
	|	МИНИМУМ(Сведения2.НомерСтроки) КАК НомерПовторяющийсяСтроки
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР.СведенияОЗадолженности КАК Сведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаСЗВ4вПФР.СведенияОЗадолженности КАК Сведения2
	|		ПО Сведения.Год = Сведения2.Год
	|			И Сведения.ТипСтроки = Сведения2.ТипСтроки
	|			И Сведения.НомерСтроки < Сведения2.НомерСтроки
	|			И Сведения.Ссылка = Сведения2.Ссылка
	|ГДЕ
	|	Сведения.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Сведения.Год,
	|	Сведения.ТипСтроки,
	|	Сведения.СтраховаяЧасть,
	|	Сведения.НакопительнаяЧасть,
	|	Сведения.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Год";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(ВыборкаПоШапкеДокумента.Организация.РегистрационныйНомерПФР)) <> 14 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Предупреждение: Регистрационный номер организации в ПФР скорее всего неправильный",,Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаДействия) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата действия!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Ответственный) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указано ответственное лицо!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ФорматФайла) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан формат файла!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоШапкеДокумента.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда	
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеОКОПФ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Предупреждение: Не указано наименование ОКОПФ организации",,Заголовок);
		ИначеЕсли СтрДлина(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеОКОПФ) > 40 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Предупреждение: Наименование ОКОПФ организации обрезано до 40 символов.",,Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения документа
Процедура ПроверитьЗаполнениеПачек(ВыборкаПоПачкам,ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")
	
 	НомерПачкиАДВ11 = ПроцедурыПерсонифицированогоУчета.ПолучитьИмяФайлаПФ(Ссылка, ВыборкаПоШапкеДокумента.Год, ВыборкаПоШапкеДокумента);
	Пока ВыборкаПоПачкам.Следующий() Цикл
	
		Если НЕ ЗначениеЗаполнено(ВыборкаПоПачкам.ДокументПачка) тогда
			ОбщегоНазначения.СообщитьОбОшибке("Строка таблицы пачек № "+ ВыборкаПоПачкам.НомерСтроки + ": Не указан документ-пачка!", Отказ, Заголовок);
			Возврат;
		КонецЕсли;	 
		
		Если НЕ ВыборкаПоПачкам.Проведен тогда
			ОбщегоНазначения.СообщитьОбОшибке("Строка таблицы пачек № "+ ВыборкаПоПачкам.НомерСтроки + ": Документ-пачка не проведен!", Отказ, Заголовок);
		КонецЕсли;	 
		
		Если ВыборкаПоПачкам.Год <> ВыборкаПоШапкеДокумента.Год тогда
			ОбщегоНазначения.СообщитьОбОшибке("Строка таблицы пачек № "+ ВыборкаПоПачкам.НомерСтроки + ": Расчетный период документа-пачки отличается от указанного!", Отказ, Заголовок);
		КонецЕсли;	 
		
		Если ВыборкаПоПачкам.Организация <> ВыборкаПоШапкеДокумента.Организация тогда
			ОбщегоНазначения.СообщитьОбОшибке("Строка таблицы пачек № "+ ВыборкаПоПачкам.НомерСтроки + ": Документ-пачка оформлен на другую организацию!", Отказ, Заголовок);
		КонецЕсли;	 
		
		Если ВыборкаПоПачкам.ТипСведений <> ВыборкаПоШапкеДокумента.ТипСведений тогда
			ОбщегоНазначения.СообщитьОбОшибке("Строка таблицы пачек № "+ ВыборкаПоПачкам.НомерСтроки + ": Документ-пачка имеет тип сведений " + ВыборкаПоПачкам.ТипСведений + "!", Отказ, Заголовок);
		КонецЕсли;	 
		
		Если ВыборкаПоПачкам.ФорматФайла <> ВыборкаПоШапкеДокумента.ФорматФайла Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Строка таблицы пачек № "+ ВыборкаПоПачкам.НомерСтроки + ": Документ-пачка имеет формат файла " + ВыборкаПоПачкам.ФорматФайла + "!", Отказ, Заголовок);
		КонецЕсли;
		
		// Проверка на уникальность номеров пачек СЗВ-4 и АДВ-11
		Если НомерПачкиАДВ11 = ПроцедурыПерсонифицированогоУчета.ПолучитьИмяФайлаПФ(ВыборкаПоПачкам.ДокументПачка, ВыборкаПоПачкам.Год, ВыборкаПоПачкам) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Строка таблицы пачке № "+ ВыборкаПоПачкам.НомерСтроки + ": Документ-пачка имеет такой же номер как документ ""Передача СЗВ-4 в ПФР"", рекомендуется сменить номер документа ""Передача СЗВ-4""", Отказ, Заголовок);
		КонецЕсли;
		
		//Контроль дубля пачек документов
		Если ВыборкаПоПачкам.НомерПовторяющийсяСтроки <> NULL тогда
			ОбщегоНазначения.СообщитьОбОшибке("Строка таблицы пачек № "+ВыборкаПоПачкам.НомерПовторяющийсяСтроки+": Документ-пачка указан дважды!", Отказ, Заголовок);
		КонецЕсли;	 
		
	КонецЦикла; 
	
КонецПроцедуры	

// Проверяет правильность заполнения реквизитов физлица 
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьСтрокуЗадолженности(ВыборкаПоЗадолженности, ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	Если ВыборкаПоЗадолженности.НомерПовторяющийсяСтроки <> NULL Тогда
		
		СтрокаНачалаСообщенияОбОшибке = "В строке №" + ВыборкаПоЗадолженности.НомерПовторяющийсяСтроки + " таблицы задолженности: ";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Повторно указан тип строки """ +ВыборкаПоЗадолженности.ТипСтроки + """ за " + ВыборкаПоЗадолженности.Год + " год!", Отказ, Заголовок);
		
	Иначе
		
		СтрокаНачалаСообщенияОбОшибке = "В строке №" + ВыборкаПоЗадолженности.НомерСтроки + " таблицы задолженности: ";
		Если ВыборкаПоЗадолженности.Год = 0 тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не указан год задолженности!", Отказ, Заголовок);
		КонецЕсли;	
		
		Если Не ПустаяСтрока(ВыборкаПоЗадолженности.ТипСтроки) И ВыборкаПоЗадолженности.ТипСтроки <> "Уплачено" И ВыборкаПоЗадолженности.СтраховаяЧасть * ВыборкаПоЗадолженности.НакопительнаяЧасть < 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Суммы страховой и накопительной части пенсии должны иметь один знак!", Отказ, Заголовок);
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаПоЗадолженности.ТипСтроки)  тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не указан тип строки!", Отказ, Заголовок);
		ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Долг на начало года" Тогда
			Если ВыборкаПоЗадолженности.СтраховаяЧасть >= 0 И ВыборкаПоЗадолженности.НакопительнаяЧасть >= 0 Тогда
				Если ВыборкаПоЗадолженности.Год >= ВыборкаПоШапкеДокумента.Год тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Год задолженности должен быть меньше расчетного периода!", Отказ, Заголовок);
				КонецЕсли;	
			ИначеЕсли ВыборкаПоЗадолженности.СтраховаяЧасть * ВыборкаПоЗадолженности.НакопительнаяЧасть < 0 Тогда
			ИначеЕсли ВыборкаПоЗадолженности.СтраховаяЧасть <= 0 И ВыборкаПоЗадолженности.НакопительнаяЧасть <= 0 Тогда
				Если ВыборкаПоЗадолженности.Год > ВыборкаПоШапкеДокумента.Год тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Год переплаты не должен превышать год расчетного периода!", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Начислено" И ВыборкаПоЗадолженности.Год <> 0 И ВыборкаПоЗадолженности.Год <> ВыборкаПоШапкеДокумента.Год Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Начисленные суммы указываются только для текущего расчетного периода!", Отказ, Заголовок);
		ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Уплачено" И ВыборкаПоЗадолженности.Год > ВыборкаПоШапкеДокумента.Год Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Год уплаты взносов не должен превышать год расчетного периода!", Отказ, Заголовок);
		ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Долг на конец года"  Тогда 
			Если ВыборкаПоЗадолженности.СтраховаяЧасть >= 0 И ВыборкаПоЗадолженности.НакопительнаяЧасть >= 0 Тогда
				Если ВыборкаПоЗадолженности.Год > ВыборкаПоШапкеДокумента.Год тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Год задолженности не должен превышать год расчетного периода!", Отказ, Заголовок);
				КонецЕсли;	
			ИначеЕсли ВыборкаПоЗадолженности.СтраховаяЧасть * ВыборкаПоЗадолженности.НакопительнаяЧасть < 0 Тогда
			ИначеЕсли ВыборкаПоЗадолженности.СтраховаяЧасть <= 0 И ВыборкаПоЗадолженности.НакопительнаяЧасть <= 0 Тогда
				Если ВыборкаПоЗадолженности.Год > ВыборкаПоШапкеДокумента.Год + 1 тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Год переплаты не должен превышать год расчетного периода более чем на 1!", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСтрокуЗадолженности()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка,
	|	ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка.Представление КАК Представление
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР.ПачкиДокументов КАК ПередачаСЗВ4вПФРПачкиДокументов
	|ГДЕ
	|	(НЕ ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка.Проведен)
	|	И ПередачаСЗВ4вПФРПачкиДокументов.Ссылка = &Ссылка");
						  
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Обнаружены непроведенные пачки документов СЗВ-4:", Отказ, Заголовок);
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбщегоНазначения.СообщитьОбОшибке(Символы.Таб + Выборка.Представление, Отказ, Заголовок);
		КонецЦикла;
	КонецЕсли;

	Если Отказ тогда
		Возврат;
	КонецЕсли;	 
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		Если Отказ тогда
			Возврат;
		КонецЕсли;	 
		
	КонецЕсли;
	
	//При проведении файл формируем заново 
	ТекстФайла = СформироватьВыходнойФайл(Отказ, Заголовок);
	Если Отказ тогда
		Возврат;
	КонецЕсли;	 

	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения.АрхивДанныхРегламентированнойОтчетности.Добавить();
	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Ведомость уплаты страховых взносов АДВ11";
	Запись.Данные = ТекстФайла; 

КонецПроцедуры	

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	КраткийСоставДокумента = "";
	Для Каждого СтрокаТаблицы Из ПачкиДокументов Цикл
		Если ПустаяСтрока(КраткийСоставДокумента) Тогда
			КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(СтрокаТаблицы.ДокументПачка.РаботникиОрганизации,, "Физлицо");
		ИначеЕсли (СтрДлина(КраткийСоставДокумента) >= 96) Тогда
			Прервать;
		Иначе
			КраткийСоставДокумента = КраткийСоставДокумента + ", " + ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(СтрокаТаблицы.ДокументПачка.РаботникиОрганизации,, "Физлицо");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

// Механизм исправлений
Перем мВосстанавливатьДвижения;
Перем мСоответствиеДвижений;
Перем мИсправляемыйДокумент;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//	Название макета печати передается в качестве параметра,
//	по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета	- строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	
КонецФункции // Печать()

#КонецЕсли
// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//	Струткура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;	
	
	Возврат СтруктураМакетов;


КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетМежразряднойРазницы.Дата,
	|	РасчетМежразряднойРазницы.Номер,
	|	РасчетМежразряднойРазницы.Организация,
	|	РасчетМежразряднойРазницы.Организация КАК Организация1,
	|	РасчетМежразряднойРазницы.ВидРасчетаМежразряднаяРазница,
	|	ВЫБОР
	|		КОГДА РасчетМежразряднойРазницы.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасчетМежразряднойРазницы.Организация
	|		ИНАЧЕ РасчетМежразряднойРазницы.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация
	|ИЗ
	|	Документ.РасчетМежразряднойРазницы КАК РасчетМежразряднойРазницы
	|ГДЕ
	|	РасчетМежразряднойРазницы.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();


КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса. В запросе данные документа дополняются значениями
//	проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование,
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.Ссылка.Дата
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок
	|	КОНЕЦ КАК ЗанимаемыхСтавок,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ
	|	Документ.РасчетМежразряднойРазницы.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(Работники.Период) КАК Период
	|		ИЗ
	|			Документ.РасчетМежразряднойРазницы.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|				ПО (Работники.Период <= ТЧРаботникиОрганизации.Ссылка.Дата)
	|					И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
	|			И ТЧРаботникиОрганизации.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

Функция СформироватьЗапросПоРаботникиОрганизацииДляРегистраРасчета(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("парамДатаСобытия",КонецМесяца(Период));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетМежразряднойРазницыРаботникиОрганизации.НомерСтроки,
	|	РасчетМежразряднойРазницыРаботникиОрганизации.Сотрудник,
	|	РасчетМежразряднойРазницыРаботникиОрганизации.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(РасчетМежразряднойРазницыРаботникиОрганизации.Ссылка.ПериодВыполнения, МЕСЯЦ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(РасчетМежразряднойРазницыРаботникиОрганизации.Ссылка.ПериодВыполнения, МЕСЯЦ) КАК ДатаОкончания,
	|	НАЧАЛОПЕРИОДА(РасчетМежразряднойРазницыРаботникиОрганизации.Ссылка.ПериодВыполнения, МЕСЯЦ) КАК ДатаНачалаСобытия,
	|	НАЧАЛОПЕРИОДА(РасчетМежразряднойРазницыРаботникиОрганизации.Ссылка.ПериодВыполнения, МЕСЯЦ) КАК ПериодДействия,
	|	РасчетМежразряднойРазницыРаботникиОрганизации.ППС КАК ППС,
	|	РасчетМежразряднойРазницыРаботникиОрганизации.Ссылка.ВидРасчетаМежразряднаяРазница КАК ВидРасчета,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизации.Должность
	|	КОНЕЦ КАК Должность,
	|	ИСТИНА КАК Авторасчет,
	|	РасчетМежразряднойРазницыРаботникиОрганизации.МежразряднаяРазница КАК Результат,
	|	РасчетМежразряднойРазницыРаботникиОрганизации.МежразряднаяРазница КАК Показатель1
	|ПОМЕСТИТЬ ВТСтрокиНачислений
	|ИЗ
	|	Документ.РасчетМежразряднойРазницы.РаботникиОрганизации КАК РасчетМежразряднойРазницыРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамДатаСобытия, ) КАК РаботникиОрганизации
	|		ПО (РаботникиОрганизации.Сотрудник = РасчетМежразряднойРазницыРаботникиОрганизации.Сотрудник)
	|ГДЕ
	|	РасчетМежразряднойРазницыРаботникиОрганизации.Ссылка = &ДокументСсылка
	|	И РасчетМежразряднойРазницыРаботникиОрганизации.МежразряднаяРазница <> 0";
		
	Запрос.Выполнить();

	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоследниеДаты.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикПолногоРабочегоВремени,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|	КОНЕЦ КАК СуммированныйУчетРабочегоВремени
	|ПОМЕСТИТЬ ВТГрафикиСотрудников
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|		СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|		СтрокиНачисления.Сотрудник КАК Сотрудник,
	|		СтрокиНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия
	|	ИЗ
	|		ВТСтрокиНачислений КАК СтрокиНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ПО СтрокиНачисления.ДатаНачалаСобытия >= РаботникиОрганизации.Период
	|				И СтрокиНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СтрокиНачисления.НомерСтроки,
	|		СтрокиНачисления.Сотрудник,
	|		СтрокиНачисления.ДатаНачалаСобытия) КАК ПоследниеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ПоследниеДаты.МаксПериод = РаботникиОрганизации.Период
	|			И ПоследниеДаты.Сотрудник = РаботникиОрганизации.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	ГрафикиРаботыПоВидамВремени.План КАК План
	|ПОМЕСТИТЬ ВТДанныеИндивидуальныхГрафиковИТабелей
	|ИЗ
	|	ВТСтрокиНачислений КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СтрокиНачисления.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И СтрокиНачисления.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	План";
	
	Запрос.Выполнить();

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокРаботников.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафикиРаботы
	|ИЗ
	|	ВТСтрокиНачислений КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО СписокРаботников.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И СписокРаботников.ПериодДействия = СводныеИндивидуальныеГрафики.Месяц
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.Сотрудник.Наименование,
	|	ТЧНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(ТЧНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ТЧНачисления.ДатаНачала, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТЧНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ТЧНачисления.ДатаОкончания, МЕСЯЦ, -1), МЕСЯЦ)
	|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			КОНЕЦ
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ТЧНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ТЧНачисления.ВидРасчета.ВидВремени КАК ВидВремени,
	|	ТЧНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ТЧНачисления.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	ТЧНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|	СУММА(ТЧНачисления.Показатель1) КАК Показатель1,
	|	СУММА(ТЧНачисления.Результат) КАК Результат,
	|	ТЧНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ГрафикРаботыПоСотруднику.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы
	|		ИНАЧЕ ТЧНачисления.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА ТабелиУчетаВремениПоСотруднику.НомерСтроки ЕСТЬ НЕ NULL 
	|				И ИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ NULL 
	|				И СводныеИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы
	|		КОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|				И (ИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ НЕ NULL 
	|					ИЛИ СводныеИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ НЕ NULL )
	|			ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикРаботыНорма,
	|	ЕСТЬNULL(ДанныеПоРаботникуНаДатуНачисления.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	ТЧНачисления.ППС,
	|	ТЧНачисления.Должность,
	|	ТЧНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	ТЧНачисления.Авторасчет
	|ИЗ
	|	ВТСтрокиНачислений КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСотрудников КАК ДанныеПоРаботникуНаДатуНачисления
	|		ПО ТЧНачисления.НомерСтроки = ДанныеПоРаботникуНаДатуНачисления.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК ТЧНачисления) КАК ГрафикРаботыПоСотруднику
	|		ПО ТЧНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК ТЧНачисления
	|		ГДЕ
	|			НЕ ТЧНачисления.План) КАК ТабелиУчетаВремениПоСотруднику
	|		ПО ТЧНачисления.НомерСтроки = ТабелиУчетаВремениПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК ТЧНачисления
	|		ГДЕ
	|			ТЧНачисления.План) КАК ИндивидуальныеГрафикиРаботы
	|		ПО ТЧНачисления.НомерСтроки = ИндивидуальныеГрафикиРаботы.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеИндивидуальныеГрафикиРаботы КАК СводныеИндивидуальныеГрафикиРаботы
	|		ПО ТЧНачисления.НомерСтроки = СводныеИндивидуальныеГрафикиРаботы.НомерСтроки
	|
	|СГРУППИРОВАТЬ ПО
//	|	ТЧНачисления.НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.Сотрудник.Наименование,
	|	ТЧНачисления.Сотрудник.Физлицо,
	|	ТЧНачисления.ДатаНачала,
	|	ТЧНачисления.ВидРасчета,
	|	ТЧНачисления.ВидРасчета.СпособРасчета,
	|	ТЧНачисления.ВидРасчета.ВидВремени,
	|	ТЧНачисления.ВидРасчета.ЗачетНормыВремени,
	|	ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени,
	|	ТЧНачисления.ВидРасчета.КодДоходаНДФЛ,
	|	ТЧНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени,
	|	ТЧНачисления.ПодразделениеОрганизации,
	|	ТЧНачисления.ППС,
	|	ТЧНачисления.Должность,
	|	ТЧНачисления.ДатаНачалаСобытия,
	|	ТЧНачисления.Авторасчет,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(ТЧНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ТЧНачисления.ДатаНачала, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТЧНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ТЧНачисления.ДатаОкончания, МЕСЯЦ, -1), МЕСЯЦ)
	|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ГрафикРаботыПоСотруднику.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы
	|		ИНАЧЕ ТЧНачисления.Сотрудник
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТабелиУчетаВремениПоСотруднику.НомерСтроки ЕСТЬ НЕ NULL 
	|				И ИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ NULL 
	|				И СводныеИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы
	|		КОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|				И (ИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ НЕ NULL 
	|					ИЛИ СводныеИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ НЕ NULL )
	|			ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ,
	|	ЕСТЬNULL(ДанныеПоРаботникуНаДатуНачисления.СуммированныйУчетРабочегоВремени, ЛОЖЬ)";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизацииДляРегистраРасчета()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидРасчетаМежразряднаяРазница) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан вид расчета межразрядной разницы!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка
//								  из результата запроса по работникам,
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники организации"": ";

	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	Если НетСотрудника Тогда
		Возврат;
	КонецЕсли;
		
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
		
	// Проверка: ранее работник должен быть принят на работу
	//Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = NULL Тогда
	//	СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоШапкеДокумента.Дата, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
	//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	//ИначеЕсли ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда	
	//	СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоШапкеДокумента.Дата, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен!";
	//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	//КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()


// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//	ВыборкаПоРаботникиОрганизации
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегиструРасчета(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборЗаписей)

	
	Движение = НаборЗаписей.Добавить();

	// Свойства
	Движение.ПериодРегистрации				= Период;
	Движение.ПериодДействияНачало			= ВыборкаПоСтрокамДокумента.ПериодДействияНачало;
	Движение.ПериодДействияКонец			= ВыборкаПоСтрокамДокумента.ПериодДействияКонец;
	Движение.БазовыйПериодНачало			= ВыборкаПоСтрокамДокумента.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец				= ВыборкаПоСтрокамДокумента.БазовыйПериодКонец;
	Движение.ВидРасчета						= ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно							= Ложь;

	// Измерения
	Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.ФизЛицо						= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;
	//
	// Реквизиты
	Движение.ГрафикРаботы					= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
	Движение.ГрафикРаботыНорма				= ВыборкаПоСтрокамДокумента.ГрафикРаботыНорма;
	Движение.Показатель1					= ВыборкаПоСтрокамДокумента.Показатель1;	
	Движение.ВидУчетаВремени				= ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.СпособРасчета, ВыборкаПоСтрокамДокумента.ВидВремени, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени,ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени,ВыборкаПоСтрокамДокумента.ВидРасчета.Показатели);
	Движение.ПодразделениеОрганизации		= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	Движение.ОбособленноеПодразделение		= ВыборкаПоШапкеДокумента.Организация;
	Движение.ДатаНачалаСобытия				= ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия;
	Движение.Авторасчет						= Истина;
	//
	//																	
	Движение.ОтчисленияНаППС = ?(ВыборкаПоСтрокамДокумента.ППС,Перечисления.ДоходыФСС_НС.Облагается,Перечисления.ДоходыФСС_НС.НеОблагается);	
	Движение.Должность = ВыборкаПоСтрокамДокумента.Должность;
	//	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

// получает доходы НДФЛ по табличным частям с доходами
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		
Процедура СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ДатаНалоговогоПериода", КонецГода(Период));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Доходы.Физлицо,
	|	Доходы.КодДохода,
	|	Доходы.Период,
	|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода,
	|	Доходы.ПодразделениеОрганизации,
	|	Доходы.ВидРасчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основные.Сотрудник.Физлицо КАК Физлицо,
	|		Основные.ВидРасчета.КодДоходаНДФЛ КАК КодДохода,
	|		Основные.ПериодДействияНачало КАК Период,
	|		Основные.Результат КАК СуммаДохода,
	|		Основные.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		Основные.ВидРасчета КАК ВидРасчета
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основные
	|	ГДЕ
	|		Основные.Регистратор = &парамСсылка
	|		И Основные.ВидРасчета.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)
	|		И Основные.Результат <> 0) КАК Доходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.Физлицо,
	|	Доходы.КодДохода,
	|	Доходы.Период,
	|	Доходы.ПодразделениеОрганизации,
	|	Доходы.ВидРасчета";
	
	ДоходыПоКодам = Запрос.Выполнить().Выбрать();
	// сформируем движения НДФЛСведенияОДоходах
	Пока ДоходыПоКодам.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// свойства
		Движение.Период						= ДоходыПоКодам.Период;
		
		// измерения 
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.Физлицо					= ДоходыПоКодам.Физлицо;
		Движение.КодДохода					= ДоходыПоКодам.КодДохода;
		Движение.ПериодРегистрации			= НачалоМесяца(Период);
		
		// ресурсы
		Движение.СуммаДохода				= ДоходыПоКодам.СуммаДохода;		
		
		// реквизиты
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;		
		Движение.ИсчисленоИзЗарплаты		= Истина;
		Движение.ПодразделениеОрганизации	= ДоходыПоКодам.ПодразделениеОрганизации;
		Движение.ВидРасчета                 = ДоходыПоКодам.ВидРасчета;
	КонецЦикла;
КонецПроцедуры // СформироватьДоходыПоКодамНДФЛ()

// Вычисляет разницу между начислениями и удержаниями работника и формирует
// движения по взаиморасчетам с работниками
//
// Параметры:
//	ВыборкаПоШапкеДокумента	- спозиционированная выборка по шапке документа
//	НаборЗаписей			- набор записей 
//	Перерасчет				- признак проведения перерасчетов, по умолчанию - Ложь
//	Физлица					- список физлиц, по которым производится расчет, по умолчанию - отсутствует
//
// Возвращаемое значение:
//	Нет.
//	
Процедура СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, НаборЗаписей, УчетЗадолженностиПоМесяцам, Перерасчет = Ложь, Физлица = Неопределено)
	
	НачисленияРаботниковТекст = 
		"ВЫБРАТЬ
		|	Доходы.Физлицо,
		|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основные.Сотрудник.Физлицо КАК Физлицо,
		|		Основные.Результат КАК СуммаДохода
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основные
		|	ГДЕ
		|		Основные.Регистратор = &парамСсылка
		|		И Основные.Результат <> 0
		|		И НЕ Основные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме) КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Физлицо";
		
		Запрос = Новый Запрос(НачисленияРаботниковТекст);
		
		
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка" , Ссылка);
	
	Доходы = Запрос.Выполнить().Выбрать();
	// сформируем движения ВзаиморасчетыСРаботникамиОрганизаций
	Пока Доходы.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// свойства
		Движение.Период					= КонецМесяца(Период);
		Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
		
		// измерения 
		Движение.Физлицо				= Доходы.Физлицо;
		Движение.Организация			= Организация;		
		Движение.ПериодВзаиморасчетов	= Период;		
		
		// ресурсы
		Движение.СуммаВзаиморасчетов	= Доходы.СуммаДохода;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьВзаиморасчетыСРаботниками()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		Если НЕ Отказ Тогда
			
			ВыборкаПоРаботникиОрганизации = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);							
			
			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);

				Если НЕ Отказ Тогда					

				КонецЕсли;
				
			КонецЦикла;
			
			УчетЗадолженностиПоМесяцам = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
			ВыборкаПоРаботникиОрганизации = СформироватьЗапросПоРаботникиОрганизацииДляРегистраРасчета(ВыборкаПоШапкеДокумента).Выбрать();							
			
			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 
				
				ДобавитьСтрокуВДвиженияПоРегиструРасчета(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации,Движения.ОсновныеНачисленияРаботниковОрганизаций);
				
			КонецЦикла;
			
			Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать();
			
			// доходы НДФЛ
			
			// сформируем доходы НДФЛ по начислениям документа
			СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, Движения.НДФЛСведенияОДоходах);
			
			////////////////////////////////////////////////////////////////////////
			// взаиморасчеты с работниками
			
			// сформируем начисления к выплате по начислениям документа
			СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, Движения.ВзаиморасчетыСРаботникамиОрганизаций, УчетЗадолженностиПоМесяцам);	

		КонецЕсли;
	КонецЕсли;
		
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаЗаполнения" модуля объекта
//
Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;

мВосстанавливатьДвижения = Ложь;


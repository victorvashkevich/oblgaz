////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Выполняет автоматическое заполнение документа 
// 
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  нет
//
Процедура Автозаполнение(ОтборПоРаботникам = Неопределено) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Физлица",			ОтборПоРаботникам);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Приход",				ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Дата",				Дата);
	Запрос.УстановитьПараметр("ДатаИсковойДавности",ДобавитьМесяц(Дата,-36));
	
	ОтборПоРаботникамТекст = ?(ОтборПоРаботникам = Неопределено,"","И Физлицо В (&Физлица)");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НеВыплаченныеДепоненты.Физлицо,
	|	НеВыплаченныеДепоненты.Ведомость,
	|	НеВыплаченныеДепоненты.Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВзаиморасчетыСДепонентамиОрганизацийОстатки.Физлицо КАК Физлицо,
	|		ВзаиморасчетыСДепонентамиОрганизацийОстатки.Ведомость КАК Ведомость,
	|		ВзаиморасчетыСДепонентамиОрганизацийОстатки.Организация КАК Организация,
	|		ВзаиморасчетыСДепонентамиОрганизацийОстатки.СуммаОстаток КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки(
	|			&Дата,
	|			Организация = &Организация
	|				" + ОтборПоРаботникамТекст + ") КАК ВзаиморасчетыСДепонентамиОрганизацийОстатки
	|	ГДЕ
	|		ВзаиморасчетыСДепонентамиОрганизацийОстатки.СуммаОстаток > 0) КАК НеВыплаченныеДепоненты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций КАК ВзаиморасчетыСДепонентамиОрганизаций
	|		ПО НеВыплаченныеДепоненты.Физлицо = ВзаиморасчетыСДепонентамиОрганизаций.Физлицо
	|			И НеВыплаченныеДепоненты.Ведомость = ВзаиморасчетыСДепонентамиОрганизаций.Ведомость
	|			И НеВыплаченныеДепоненты.Организация = ВзаиморасчетыСДепонентамиОрганизаций.Организация
	|			И (ВзаиморасчетыСДепонентамиОрганизаций.ВидДвижения = &Приход)
	|			И (ВзаиморасчетыСДепонентамиОрганизаций.Период < &ДатаИсковойДавности)";
	
	ВыплатаДепонентов.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры //  Автозаполнение

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СписаниеДепонентовВДоходыОрганизаций.Дата,
	|	СписаниеДепонентовВДоходыОрганизаций.Ссылка,
	|	СписаниеДепонентовВДоходыОрганизаций.Организация
	|ИЗ
	|	Документ.СписаниеДепонентовВДоходыОрганизаций КАК СписаниеДепонентовВДоходыОрганизаций
	|ГДЕ
	|	СписаниеДепонентовВДоходыОрганизаций.Ссылка = &ДокументСсылка";

	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части документам
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоВыплатаДепонентов(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("Дата",				Дата);
	Запрос.УстановитьПараметр("Организация",		Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.НомерСтроки,
	|	СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.Ведомость,
	|	СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.Ведомость.Номер КАК Номер,
	|	СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.Ведомость.Дата КАК Дата,
	|	СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.ФизЛицо,
	|	СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.Сумма,
	|	МИНИМУМ(ДвойныеСтроки.НомерСтроки) КАК НомерПовторяющейсяСтроки,
	|	ЕСТЬNULL(ВзаиморасчетыСДепонентамиОрганизацийОстатки.СуммаОстаток, 0) КАК ОстатокДепонента
	|ИЗ
	|	Документ.СписаниеДепонентовВДоходыОрганизаций.ВыплатаДепонентов КАК СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеДепонентовВДоходыОрганизаций.ВыплатаДепонентов КАК ДвойныеСтроки
	|		ПО СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.Ссылка = ДвойныеСтроки.Ссылка
	|			И СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.ФизЛицо = ДвойныеСтроки.ФизЛицо
	|			И СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.Ведомость = ДвойныеСтроки.Ведомость
	|			И СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.НомерСтроки < ДвойныеСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки(
	|		&Дата,
	|		Организация = &Организация
	|		    И Физлицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		            СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.ФизЛицо
	|		        ИЗ
	|		            Документ.СписаниеДепонентовВДоходыОрганизаций.ВыплатаДепонентов КАК СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов
	|		        ГДЕ
	|		            СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.Ссылка = &ДокументСсылка)) КАК ВзаиморасчетыСДепонентамиОрганизацийОстатки
	|		ПО СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.ФизЛицо = ВзаиморасчетыСДепонентамиОрганизацийОстатки.Физлицо
	|			И СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.Ведомость = ВзаиморасчетыСДепонентамиОрганизацийОстатки.Ведомость
	|ГДЕ
	|	СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.НомерСтроки,
	|	СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.Ведомость,
	|	СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.ФизЛицо,
	|	СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.Сумма,
	|	ВзаиморасчетыСДепонентамиОрганизацийОстатки.СуммаОстаток";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоДепонированиеЗаработнойПлаты()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 		 - флаг отказа в проведении,
//	Заголовок	 - Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строки документа.
Процедура ПроверитьЗаполнениеСтрокиВыплатаДепонентов(ВыборкаПоВыплатаДепонентов, Отказ, Заголовок)

	НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоВыплатаДепонентов.НомерСтроки) +
										""" табл. части: ";
	
	НетФизлица		= НЕ ЗначениеЗаполнено(ВыборкаПоВыплатаДепонентов.ФизЛицо);
	НетВедомости	= НЕ ЗначениеЗаполнено(ВыборкаПоВыплатаДепонентов.Ведомость);

	Если НетФизлица Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указан работник!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НетВедомости Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указана платежная ведомость!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НетВедомости ИЛИ НетФизлица Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыборкаПоВыплатаДепонентов.НомерПовторяющейсяСтроки <> Null Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "обнаружена строка № " + ВыборкаПоВыплатаДепонентов.НомерПовторяющейсяСтроки + ", в которой указан тот же депонент!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоВыплатаДепонентов.ОстатокДепонента < ВыборкаПоВыплатаДепонентов.Сумма Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "невыданный остаток депонента (" + Формат(ВыборкаПоВыплатаДепонентов.ОстатокДепонента,"ЧДЦ=2") + ") меньше суммы, указанной в документе!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиДепонированиеЗаработнойПлаты()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ)
	
	Если ВыборкаПоТЧ.Сумма <> 0 Тогда
		
		Движение = Движения.ВзаиморасчетыСДепонентамиОрганизаций.Добавить();
		
		// Свойства
		Движение.Период      = ВыборкаПоШапкеДокумента.Дата;
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		// Измерения
		Движение.Организация = ВыборкаПоШапкеДокумента.Организация;
		Движение.ФизЛицо     = ВыборкаПоТЧ.ФизЛицо;
		Движение.Ведомость   = ВыборкаПоТЧ.Ведомость;
		
		// Ресурсы
		Движение.Сумма		 = ВыборкаПоТЧ.Сумма;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ВыплатаДепонентов.Итог("Сумма");
	
	// заполним КраткийСоставДокумента для обеспечения возможности отбора по физлицу
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ВыплатаДепонентов,, "Физлицо");

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда
			
			// получим реквизиты табличной части
			ВыборкаПоВыплатаДепонентов = СформироватьЗапросПоВыплатаДепонентов(ВыборкаПоШапкеДокумента).Выбрать();
			Пока ВыборкаПоВыплатаДепонентов.Следующий() Цикл 
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиВыплатаДепонентов(ВыборкаПоВыплатаДепонентов, Отказ, Заголовок);
				
				Если Не Отказ Тогда
					
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоВыплатаДепонентов);
					
				КонецЕсли;
				
			КонецЦикла;
					
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

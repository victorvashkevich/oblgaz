////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	ИмяФормы = "";
	Если ИмяМакета = "КомандировочноеУдостоверениеГруппыРаботников" Тогда
		ИмяФормы = " (Командировочное удостоверение группы работников)";
		ТабДокумент = ПечатьТ9(ИмяМакета);
		
	ИначеЕсли ИмяМакета = "ЖурналУчетаРаботниковВыбывающихВКомандировки" Тогда
		ИмяФормы = " (Журнал учета работников, выбывающих в командировки)";
		ТабДокумент = ПечатьТ10а(ИмяМакета);
		
	ИначеЕсли ИмяМакета = "КомандировочноеУдостоверение" Тогда
		 ИмяФормы = " (Командировочное удостоверение)";
		ТабДокумент = ПечатьТ10(ИмяМакета);
		
	//vvv	
	ИначеЕсли ИмяМакета = "КомандировочноеУдостоверениеНовое" Тогда
		 ИмяФормы = " (Командировочное удостоверение)";
		ТабДокумент = ПечатьКУ(ИмяМакета);
		
	ИначеЕсли ИмяМакета = "АвансовыйОтчет" Тогда
		 ИмяФормы = " (Авансовый отчет)";
		ТабДокумент = ПечатьАО(ИмяМакета);	
		
	ИначеЕсли ИмяМакета = "Авансовый" Тогда
		ИмяФормы = " (Авансовый отчет)";
		Файл = ПолучитьМакет("Авансовый");	
		ИмяВрем = ПолучитьИмяВременногоФайла(".doc");
  		Файл.Записать(ИмяВрем);
  		ЗапуститьПриложение(ИмяВрем,,,);		
		Возврат "";
		
	ИначеЕсли ИмяМакета = "АвансовыйОтчетДляПечати" Тогда
		//ИмяФормы = " (Авансовый1)";
		//АктивныйДокумент = ПолучитьМакет("АвансовыйОтчетДляПечати");
		//КомОбъект = АктивныйДокумент.Получить();	
		//КомОбъект.Application.Visible=1;
		//КомОбъект.Variables.Item("Работник").Value="Вашкевич Виктор Владимирович";
		//КомОбъект.Variables.Item("Организация").Value="УП Брестолгаз";
		//КомОбъект.Variables.Item("ПечПодразделениеСотр").Value="Отдел материально-технического снабжения";
		//КомОбъект.Variables.Item("ПечДолжностьСотр").Value="Ведущий инженер-программист";
		//КомОбъект.Fields.UpDate();
		//КомОбъект = 0;
		ПечатьАОНовый();
		Возврат ""	
	ИначеЕсли ИмяМакета = "Дополнение" Тогда
		 ИмяФормы = " (Дополнение к к/у)";
		ТабДокумент = ПечатьДополнения(ИмяМакета);
	ИначеЕсли ИмяМакета = "ЭСЧФ" Тогда
		 ИмяФормы = "ЭСЧФ";
		 Файл = ПолучитьМакет("ЭСЧФ");	
		 ИмяВрем = ПолучитьИмяВременногоФайла(".pdf");
  		 Файл.Записать(ИмяВрем);
  		 ЗапуститьПриложение(ИмяВрем,,,);		
		 Возврат "";
	//		
	КонецЕсли;
	
	Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним + ИмяФормы));
	
КонецФункции // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//	Струткура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	//vvv
	СтруктураМакетов.Вставить("КомандировочноеУдостоверениеНовое",	"Командировочное удостоверение (новое)");
	СтруктураМакетов.Вставить("АвансовыйОтчетДляПечати",	"Авансовый отчет");
	СтруктураМакетов.Вставить("Дополнение",	"Дополнение к к/у");
	СтруктураМакетов.Вставить("ЭСЧФ",	"ЭСЧФ");
	
	//
	СтруктураМакетов.Вставить("КомандировочноеУдостоверение",	"Командировочное удостоверение");
	СтруктураМакетов.Вставить("КомандировочноеУдостоверениеГруппыРаботников",		"Командировочное удостоверение группы работников");
	СтруктураМакетов.Вставить("ЖурналУчетаРаботниковВыбывающихВКомандировки",	"Журнал учета работников, выбывающих в командировки");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует запрос по документу и связанным регистрам сведений
//
// Параметры: 
//	Режим	- строка, может принимать значения:
//				"ПоРеквизитамДокумента"
//				"ПоТабличнойЧастиДокумента"
//
// Возвращаемое значение:
//	Результат запроса с данными об организации или о работниках из табличной части
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата);
    Запрос.УстановитьПараметр("ПустаяДата",		'00010101');

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КомандировкиОрганизаций.Дата КАК ДатаДок,
		|	КомандировкиОрганизаций.Номер КАК НомерДок,
		|	ВЫРАЗИТЬ(КомандировкиОрганизаций.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
		|	КомандировкиОрганизаций.Организация.КодПоОКПО КАК КодПоОКПО,
		//vvv
		//|	КомандировкиОрганизаций.СтранаНазначения,
		|	КомандировкиОрганизаций.СтранаНазначения.Наименование КАК СтранаНазначения,
		|	КомандировкиОрганизаций.Организация.Город КАК Город,
		|	КомандировкиОрганизаций.флПодразделение КАК ПечататьПодразделение,
		|	КомандировкиОрганизаций.Согласовал КАК Согласовал,
		|	КомандировкиОрганизаций.Цель КАК Цель,
		|	КомандировкиОрганизаций.ГородНазначения КАК ГородНазначения,
		|	КомандировкиОрганизаций.НомерПриказа,
		|	КомандировкиОрганизаций.ДатаПриказа,
		|	КомандировкиОрганизаций.Руководитель,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних2.Имя, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних2.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних2.Отчество, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних2.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + "" "" + ФИОФизЛицСрезПоследних2.Фамилия, КомандировкиОрганизаций.Ответственный.ФизЛицо.Наименование) КАК ФИООтветственного,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних1.Имя, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних1.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних1.Отчество, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних1.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + "" "" + ФИОФизЛицСрезПоследних1.Фамилия , КомандировкиОрганизаций.Руководитель.ФизЛицо.Наименование) КАК ФИОРуководителя1,
		|	ВЫБОР
		|		КОГДА РаботникРуководитель.ПериодЗавершения <= &ДатаДокумента
		|		И РаботникРуководитель.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникРуководитель.ДолжностьЗавершения
		|		ИНАЧЕ РаботникРуководитель.Должность
		|	КОНЕЦ КАК ДолжностьРуководителя1,
		//
		|	КомандировкиОрганизаций.ОрганизацияНазначения,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Представление КАК ДолжностьРуководителя,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + "" "" + ФИОФизЛицСрезПоследних.Фамилия, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
		|	КомандировкиОрганизаций.Организация.Префикс,
		|	КомандировкиОрганизаций.Организация,
		|	КомандировкиОрганизаций.ОснованиеКомандировки КАК ОснованиеКомандировки1
		|ИЗ
		|	Документ.КомандировкиОрганизаций КАК КомандировкиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО КомандировкиОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		//vvv
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДокумента) КАК РаботникРуководитель
		|			ПО КомандировкиОрганизаций.Организация = РаботникРуководитель.ОбособленноеПодразделение
		|			И КомандировкиОрганизаций.Руководитель = РаботникРуководитель.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних1
		|			ПО КомандировкиОрганизаций.Руководитель.ФизЛицо = ФИОФизЛицСрезПоследних1.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних2
		|			ПО КомандировкиОрганизаций.Ответственный.ФизЛицо = ФИОФизЛицСрезПоследних2.ФизЛицо
		//
		|ГДЕ
		|	КомандировкиОрганизаций.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		Запрос.УстановитьПараметр("Организация",	 Организация);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, КомандировкиОрганизацииРаботники.Сотрудник.Наименование) КАК Работник,
		|	ЕСТЬNULL(ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.Наименование + "", серия "" + ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия + "", №"" + ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер, """") КАК РеквизитыПаспорта,
		|	КомандировкиОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
		|	КомандировкиОрганизацииРаботники.ДатаНачала,
		|	КомандировкиОрганизацииРаботники.ДатаОкончания,
		|	КомандировкиОрганизацииРаботники.ВремяНахожденияВПути,
		//vvv
		|	КомандировкиОрганизацииРаботники.ВидТранспорта,
		|	КомандировкиОрганизацииРаботники.ЕжеднВозвр,
		|	КомандировкиОрганизацииРаботники.ВыхВозвр,
		|	КомандировкиОрганизацииРаботники.Согласовал КАК Согласовал,
		|	КомандировкиОрганизацииРаботники.КомандировкаОтменена КАК КомандировкаОтменена,
		|	КомандировкиОрганизацииРаботники.Руководитель КАК Руководитель,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних1.Имя, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних1.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних1.Отчество, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних1.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + "" "" + ФИОФизЛицСрезПоследних1.Фамилия , КомандировкиОрганизацииРаботники.Руководитель.ФизЛицо.Наименование) КАК ФИОРуководителя1,
		|	ВЫБОР
		|		КОГДА РаботникРуководитель.ПериодЗавершения <= &ДатаДокумента
		|		И РаботникРуководитель.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникРуководитель.ДолжностьЗавершения
		|		ИНАЧЕ РаботникРуководитель.Должность
		|	КОНЕЦ КАК ДолжностьРуководителя1,
		//
		|	КомандировкиОрганизацииРаботники.Цель,
		|	ВЫБОР
		|		КОГДА Работники.ПериодЗавершения <= КомандировкиОрганизацииРаботники.ДатаНачала
		|				И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА Работники.ПодразделениеОрганизацииЗавершения
		|		ИНАЧЕ Работники.ПодразделениеОрганизации
		|	КОНЕЦ КАК ПодразделениеРаботника,
		|	ВЫБОР
		|		КОГДА Работники.ПериодЗавершения <= КомандировкиОрганизацииРаботники.ДатаНачала
		|				И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА Работники.ДолжностьЗавершения
		|		ИНАЧЕ Работники.Должность
		|	КОНЕЦ КАК Должность,
		|	КомандировкиОрганизацииРаботники.ИсточникФинансирования,
		|	Работники.Сотрудник.Код КАК ТабельныйНомер,
		//vvv
		//|	Работники.ПодразделениеОрганизации
		|	ВЫБОР
		|		КОГДА Работники.ПериодЗавершения <= КомандировкиОрганизацииРаботники.ДатаНачала
		|				И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА Работники.ПодразделениеОрганизацииЗавершения
		|		ИНАЧЕ Работники.ПодразделениеОрганизации
		|	КОНЕЦ КАК ПодразделениеОрганизации
        //
		|ИЗ
		|	Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК КомандировкиОрганизацииРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокДат.Сотрудник КАК Сотрудник,
		|			Работники.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизации,
		|			Работники.Должность.Наименование КАК Должность,
		|			Работники.ПодразделениеОрганизацииЗавершения.Наименование КАК ПодразделениеОрганизацииЗавершения,
		|			Работники.ДолжностьЗавершения.Наименование КАК ДолжностьЗавершения,
		|			Работники.ПериодЗавершения КАК ПериодЗавершения
		|		ИЗ
		|			(ВЫБРАТЬ
		|				РаботникиВнутри.Сотрудник КАК Сотрудник,
		|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК КомандировкиОрганизаций
		|					ПО РаботникиВнутри.Период <= КомандировкиОрганизаций.ДатаНачала
		|						И РаботникиВнутри.Сотрудник = КомандировкиОрганизаций.Сотрудник
		|			ГДЕ
		|				КомандировкиОрганизаций.Ссылка = &ДокументСсылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиВнутри.Сотрудник) КАК СписокДат
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|				ПО СписокДат.ДатаПоследнегоИзменения = Работники.Период
		|					И СписокДат.Сотрудник = Работники.Сотрудник) КАК Работники
		|		ПО КомандировкиОрганизацииРаботники.Сотрудник = Работники.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				ФизЛицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						КомандировкиОрганизацииРаботники.Сотрудник.Физлицо
		|					ИЗ
		|						Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК КомандировкиОрганизацииРаботники
		|					ГДЕ
		|						КомандировкиОрганизацииРаботники.Ссылка = &ДокументСсылка)) КАК ФИОФизЛиц
		|		ПО КомандировкиОрганизацииРаботники.Сотрудник.Физлицо = ФИОФизЛиц.ФизЛицо
		//vvv
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДокумента) КАК РаботникРуководитель
		|			ПО КомандировкиОрганизацииРаботники.Руководитель = РаботникРуководитель.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних1
		|			ПО КомандировкиОрганизацииРаботники.Руководитель.ФизЛицо = ФИОФизЛицСрезПоследних1.ФизЛицо
		//
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				ФизЛицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						КомандировкиОрганизацииРаботники.Сотрудник.Физлицо
		|					ИЗ
		|						Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК КомандировкиОрганизацииРаботники
		|					ГДЕ
		|						КомандировкиОрганизацииРаботники.Ссылка = &ДокументСсылка)) КАК ПаспортныеДанныеФизЛицСрезПоследних
		|		ПО КомандировкиОрганизацииРаботники.Сотрудник.Физлицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
		|ГДЕ
		|	КомандировкиОрганизацииРаботники.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	Иначе
		Возврат Неопределено;
		
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой "Т-9",
//
// Возвращаемое значение:
//	Табличный документ - печатная форма
//
Функция ПечатьТ9(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	
	// получаем данные для печати
	ВыборкаДляШапки		= СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники	= СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка	= Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал	= Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета		= Макет.ПолучитьОбласть("Работник"); // строка работника
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаОтметок = Макет.ПолучитьОбласть("Отметки");

	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
 		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // область работника
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;

	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакетаШапка);
		
	Пока ВыборкаРаботники.Следующий() Цикл

		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакетаСтрока.Параметры.Номер = ВыборкаРаботники.НомерСтроки;
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		
	КонецЦикла;
 
	ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
	ОбластьМакета.Параметры.Цель = ВыборкаРаботники.Цель;
	ОбластьМакета.Параметры.СтранаИОрганизацияНазначения = ВыборкаДляШапки.СтранаНазначения+";"+ВыборкаДляШапки.ОрганизацияНазначения;
	ОбластьМакета.Параметры.Продолжительность = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания),Цел((ВыборкаРаботники.ДатаОкончания - ВыборкаРаботники.ДатаНачала + 1) / мДлинаСуток) + 1,"");

	//выводим данные
	ТабДокумент.Вывести(ОбластьМакета);	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	ТабДокумент.Вывести(ОбластьМакетаОтметок);

	Возврат ТабДокумент;

КонецФункции // ПечатьТ9()

// Функция формирует табличный документ с печатной формой "Т-10",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТ10(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// получаем данные для печати
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка	= Макет.ПолучитьОбласть("Шапка");			// Шапка документа
	ОбластьМакетаПодвал	= Макет.ПолучитьОбласть("Подвал");			// Подвал документа
	ОбластьМакета		= Макет.ПолучитьОбласть("Работник");		// строка работника
	ОборотШапка			= Макет.ПолучитьОбласть("ШапкаОтметок");	// оборот удостоверения - отметки от прибытии-выбытии
	ОборотОтметки		= Макет.ПолучитьОбласть("Отметки");

	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // область работника
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
	КонецЕсли;

	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		// Шапка документа.
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВыборкаРаботники.НомерСтроки
		КонецЕсли; 
		
		// выводим данные шапки 
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
				
		// в этой форме продолжительность командировки указывается без времени в пути
		ОбластьМакета.Параметры.Продолжительность = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания),Цел((ВыборкаРаботники.ДатаОкончания - ВыборкаРаботники.ДатаНачала + 1) / мДлинаСуток) + 1 - ВыборкаРаботники.ВремяНахожденияВПути,"");
		ОбластьМакета.Параметры.ОснованиеКомандировки = ВыборкаДляШапки.ОснованиеКомандировки1;
		ОбластьМакета.Параметры.ДолжностьИПодразделение = ВыборкаРаботники.Должность+";"+ВыборкаРаботники.ПодразделениеОрганизации+";"+ВыборкаДляШапки.НазваниеОрганизации;
		ОбластьМакета.Параметры.ОрганизацияИСтранаНазначения = ВыборкаДляШапки.СтранаНазначения+";"+ВыборкаДляШапки.ОрганизацияНазначения;
		
		// выводим данные по работнику
		ТабДокумент.Вывести(ОбластьМакета);

		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
		// выводим оборот удостоверения
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДокумент.Вывести(ОборотШапка);
		ТабДокумент.Вывести(ОборотОтметки);
		ТабДокумент.Вывести(ОборотОтметки);
		ТабДокумент.Вывести(ОборотОтметки);
		ТабДокумент.Вывести(ОборотОтметки);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
		// выводим оборот удостоверения
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДокумент.Вывести(ОборотШапка);
		ТабДокумент.Вывести(ОборотОтметки);
		ТабДокумент.Вывести(ОборотОтметки);
		ТабДокумент.Вывести(ОборотОтметки);
		ТабДокумент.Вывести(ОборотОтметки);
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции // ПечатьТ10()


//vvv
// Функция формирует табличный документ с печатной формой "Т-10",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьКУ(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.АвтоМасштаб = Истина;
	
	// получаем данные для печати
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакета		= Макет.ПолучитьОбласть("Отчет");		
	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
		НомерДокДляПечати=СокрЛП(Строка(Число(Сред(ВыборкаДляШапки.НомерДок,СтрДлина(ВыборкаДляШапки.ОрганизацияПрефикс)+1))));
	КонецЕсли;

	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		Если ВыборкаРаботники.КомандировкаОтменена Тогда
			Продолжить;
		КонецЕсли;		
		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		// Шапка документа.
		ОбластьМакета.Параметры.НомерДок = СокрЛП(НомерДокДляПечати);
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбластьМакета.Параметры.НомерДок = СокрЛП(НомерДокДляПечати) + "/" + ВыборкаРаботники.НомерСтроки;
		КонецЕсли; 
		

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
				
		// в этой форме продолжительность командировки указывается без времени в пути
		Если ВыборкаРаботники.ДатаОкончания<>'00010101' Тогда
			Продолжительность = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания),Цел((ВыборкаРаботники.ДатаОкончания - ВыборкаРаботники.ДатаНачала + 1) / мДлинаСуток) + 1 - ВыборкаРаботники.ВремяНахожденияВПути,"");
			ОбластьМакета.Параметры.Продолжительность = Продолжительность;
			Дней=Число(Продолжительность);
			печДней=?(Дней>4,"дней",?(Дней=1,"день","дня"));
			печСрокКоманд="Срок командировки   "+ Строка(Дней)+"   "+печДней+"  с  "+Формат(ВыборкаРаботники.ДатаНачала,"ДЛФ=Д")+"  по  "+Формат(ВыборкаРаботники.ДатаОкончания,"ДЛФ=Д")+
				?(ВыборкаРаботники.ЕжеднВозвр=1," с ежедневным возвращением","")+?(ВыборкаРаботники.ВыхВозвр=1," с возвращением по выходным и праздничным дням","")+
				?(ЗначениеЗаполнено(ВыборкаРаботники.ВидТранспорта),"; "+ВыборкаРаботники.ВидТранспорта,"");
			ОбластьМакета.Параметры.ПечДней=ПечДней;
			ОбластьМакета.Параметры.печСрокКоманд=печСрокКоманд;
		Иначе
			ОбластьМакета.Параметры.ПечДней="";
			ОбластьМакета.Параметры.Продолжительность="С "+Формат(ВыборкаРаботники.ДатаНачала,"ДЛФ=Д");
			печСрокКоманд="Срок командировки с  "+Формат(ВыборкаРаботники.ДатаНачала,"ДЛФ=Д")+
				?(ВыборкаРаботники.ЕжеднВозвр=1," с ежедневным возвращением","")+?(ВыборкаРаботники.ВыхВозвр=1," с возвращением по выходным и праздничным дням","")+
				?(ЗначениеЗаполнено(ВыборкаРаботники.ВидТранспорта),"; "+ВыборкаРаботники.ВидТранспорта,"");
			ОбластьМакета.Параметры.печСрокКоманд=печСрокКоманд;	
		КонецЕсли;
		ОбластьМакета.Параметры.НомерПриказа=ВыборкаДляШапки.НомерПриказа;
		ОбластьМакета.Параметры.ДатаПриказа=Формат(ВыборкаДляШапки.ДатаПриказа,"ДЛФ=Д");
		ЦельКомандЧасть1="";
		ЦельКомандЧасть2="";
		ЦельКомандировки=?(СокрЛП(ВыборкаРаботники.Цель)<>"",СокрЛП(ВыборкаРаботники.Цель),СокрЛП(ВыборкаДляШапки.Цель));
		Если ПустаяСтрока(ЦельКомандировки)=0 Тогда

			Для НомерСлова=1 по СтрЧислоВхождений(СокрЛП(ЦельКомандировки)," ")+1 цикл
				Слово="";
				Слово=СервисныеПроцедурыИФункции.Token(СокрЛП(ЦельКомандировки), " ", НомерСлова);
				Если СтрДлина(ЦельКомандЧасть1+" "+Слово)>90 тогда
					Прервать;
				Иначе
					ЦельКомандЧасть1=ЦельКомандЧасть1+" "+Слово;
					ЦельКомандЧасть2=Сред(ЦельКомандировки,СтрДлина(ЦельКомандЧасть1)+1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		печДолжностьСотр=ВыборкаРаботники.Должность;
		Если ВыборкаДляШапки.ПечататьПодразделение ТОгда
			печДолжностьСотр=печДолжностьСотр+", "+ВыборкаРаботники.ПодразделениеОрганизации;
		КОнецЕсли;
		
		ОбластьМакета.Параметры.печДолжностьСотр=печДолжностьСотр;
		ОбластьМакета.Параметры.печРуководитель=?(ЗначениеЗаполнено(ВыборкаДляШапки.Руководитель),ВыборкаДляШапки.ФИОРуководителя1,ВыборкаДляШапки.ФИОРуководителя);
		ОбластьМакета.Параметры.печРуководитель=?(ЗначениеЗаполнено(ВыборкаРаботники.Руководитель),ВыборкаРаботники.ФИОРуководителя1,ОбластьМакета.Параметры.печРуководитель);
		ОбластьМакета.Параметры.ДолжностьРуководителя=?(ЗначениеЗаполнено(ВыборкаДляШапки.Руководитель),ВыборкаДляШапки.ДолжностьРуководителя1,ВыборкаДляШапки.ДолжностьРуководителя);
		ОбластьМакета.Параметры.ДолжностьРуководителя=?(ЗначениеЗаполнено(ВыборкаРаботники.Руководитель),ВыборкаРаботники.ДолжностьРуководителя1,ОбластьМакета.Параметры.ДолжностьРуководителя);
		ОбластьМакета.Параметры.ЦельКомандЧасть1=ЦельКомандЧасть1;
		ОбластьМакета.Параметры.ЦельКомандЧасть2=ЦельКомандЧасть2;
		ОбластьМакета.Параметры.ВыбылНачало=Формат(ВыборкаРаботники.ДатаНачала,"ДЛФ=ДД");
		ОбластьМакета.Параметры.Город=ВыборкаДляШапки.Город;
		ОбластьМакета.Параметры.ГородНазначения=СокрЛП(ВыборкаДляШапки.ГородНазначения);
		ОбластьМакета.Параметры.ОрганизацияНазначения=СокрЛП(ВыборкаДляШапки.ОрганизацияНазначения);
		ОбластьМакета.Параметры.ПечОформил=ВыборкаДляШапки.ФИООтветственного;
		ОбластьМакета.Параметры.Основание=?(СокрЛП(ВыборкаРаботники.Согласовал)<>"",ВыборкаРаботники.Согласовал,ВыборкаДляШапки.Согласовал);
		Областьмакета.Параметры.КомандироватьВ=СокрЛП(ВыборкаДляШапки.ГородНазначения)+ ?(Не ПустаяСтрока(ВыборкаДЛяШапки.СтранаНазначения)," ("+СокрЛП(СтранаНазначения)+") ","")+", "+ ВыборкаДляШапки.ОрганизацияНазначения;
		                                   
		// выводим данные по работнику
		ТабДокумент.Вывести(ОбластьМакета);
		
		// выводим оборот удостоверения
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакета);
		
		// выводим оборот удостоверения
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции // ПечатьКУ()

//vvv
// Функция формирует табличный документ с печатной формой "Т-10",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьАО(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.АвтоМасштаб = Истина;
	
	// получаем данные для печати
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакета		= Макет.ПолучитьОбласть("Отчет");		
	ОбластьАвансовый     = Макет.ПолучитьОбласть("Авансовый");
	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
	КонецЕсли;

	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ОбластьАвансовый.Параметры.Заполнить(ВыборкаРаботники);		

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
				
		// в этой форме продолжительность командировки указывается без времени в пути
		Если ВыборкаРаботники.ДатаОкончания<>'00010101' Тогда
			Продолжительность = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания),Цел((ВыборкаРаботники.ДатаОкончания - ВыборкаРаботники.ДатаНачала + 1) / мДлинаСуток) + 1 - ВыборкаРаботники.ВремяНахожденияВПути,"");
			Дней=Число(Продолжительность);
			печДней=?(Дней>4,"календарных дней",?(Дней=1,"календарный день","календарных дня"));
			печСрокКоманд="Срок командировки   "+ Строка(Дней)+"   "+печДней+"  с  "+Формат(ВыборкаРаботники.ДатаНачала,"ДЛФ=Д")+"  по  "+Формат(ВыборкаРаботники.ДатаОкончания,"ДЛФ=Д");			
			ОбластьМакета.Параметры.печСрокКоманд=печСрокКоманд;
		Иначе
			печСрокКоманд="Срок командировки  с "+Формат(ВыборкаРаботники.ДатаНачала,"ДЛФ=Д");			
			ОбластьМакета.Параметры.печСрокКоманд=печСрокКоманд;
		КонецЕсли;
		
		ЦельКомандЧасть1="";
		ЦельКомандЧасть2="";
		
		ЦельКомандировки=?(СокрЛП(ВыборкаРаботники.Цель)<>"",СокрЛП(ВыборкаРаботники.Цель),СокрЛП(ВыборкаДляШапки.Цель));
		
		Если ПустаяСтрока(ЦельКомандировки)=0 Тогда

			Для НомерСлова=1 по СтрЧислоВхождений(СокрЛП(ЦельКомандировки)," ")+1 цикл
				Слово="";
				Слово=СервисныеПроцедурыИФункции.Token(СокрЛП(ЦельКомандировки), " ", НомерСлова);
				Если СтрДлина(ЦельКомандЧасть1+" "+Слово)>80 тогда
					Прервать;
				Иначе
					ЦельКомандЧасть1=ЦельКомандЧасть1+" "+Слово;
					ЦельКомандЧасть2=Сред(ЦельКомандировки,СтрДлина(ЦельКомандЧасть1)+1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		печДолжностьСотр=ВыборкаРаботники.Должность;
		печПодразделениеСотр=ВыборкаРаботники.ПодразделениеОрганизации;
		
		ОбластьМакета.Параметры.печДолжностьСотр=печДолжностьСотр;
		ОбластьМакета.Параметры.печПодразделениеСотр=печПодразделениеСотр;
		
		ОбластьАвансовый.Параметры.печДолжностьСотр=печДолжностьСотр;
		ОбластьАвансовый.Параметры.печПодразделениеСотр=печПодразделениеСотр;
		ОбластьАвансовый.Параметры.Организация=Организация;
		
		ТабДокумент.Вывести(ОбластьАвансовый);
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("Шапка"));
		
		Для к=1 По 4 Цикл
			ТабДокумент.Вывести(Макет.ПолучитьОбласть("Строка"));
		КонецЦикла;
		
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("Подвал"));

		ОбластьМакета.Параметры.ЦельКомандЧасть1=ЦельКомандЧасть1;
		ОбластьМакета.Параметры.ЦельКомандЧасть2=ЦельКомандЧасть2;
		ОбластьМакета.Параметры.ГородНазначения=СокрЛП(ВыборкаДляШапки.ГородНазначения);
		ОбластьМакета.Параметры.ОрганизацияНазначения=СокрЛП(ВыборкаДляШапки.ОрганизацияНазначения);
		                                   
		// выводим данные по работнику
		ТабДокумент.Вывести(ОбластьМакета);
		
		// выводим оборот удостоверения
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакета);
		
		// выводим оборот удостоверения
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции // ПечатьАО()
//vvv
Процедура ПечатьАОНовый()
		
	// получаем данные для печати
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаДляШапки.Следующий();
	
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	АктивныйДокумент = ПолучитьМакет("АвансовыйОтчетДляПечати");

	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		КомОбъект = АктивныйДокумент.Получить();
		КомОбъект.Application.Visible=1;
		КомОбъект.Variables.Item("Работник").Value=ВыборкаРаботники.Работник;		
						
		// в этой форме продолжительность командировки указывается без времени в пути
		Если ВыборкаРаботники.ДатаОкончания<>'00010101' Тогда
			Продолжительность = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания),Цел((ВыборкаРаботники.ДатаОкончания - ВыборкаРаботники.ДатаНачала + 1) / мДлинаСуток) + 1 - ВыборкаРаботники.ВремяНахожденияВПути,"");
			Дней=Число(Продолжительность);
			печДней=?(Дней>4,"календарных дней",?(Дней=1,"календарный день","календарных дня"));
			печСрокКоманд=Строка(Дней)+"   "+печДней+"  с  "+Формат(ВыборкаРаботники.ДатаНачала,"ДЛФ=Д")+"  по  "+Формат(ВыборкаРаботники.ДатаОкончания,"ДЛФ=Д");						
		Иначе
			печСрокКоманд=Формат(ВыборкаРаботники.ДатаНачала,"ДЛФ=Д");						
		КонецЕсли;
		
		КомОбъект.Variables.Item("ПечСрокКоманд").Value=печСрокКоманд;
		
		ЦельКомандЧасть1="";
		ЦельКомандЧасть2="";
		
		ЦельКомандировки=?(СокрЛП(ВыборкаРаботники.Цель)<>"",СокрЛП(ВыборкаРаботники.Цель),СокрЛП(ВыборкаДляШапки.Цель));
		
		Если Не ПустаяСтрока(ЦельКомандировки) Тогда

			Для НомерСлова=1 по СтрЧислоВхождений(СокрЛП(ЦельКомандировки)," ")+1 цикл
				Слово="";
				Слово=СервисныеПроцедурыИФункции.Token(СокрЛП(ЦельКомандировки), " ", НомерСлова);
				Если СтрДлина(ЦельКомандЧасть1+" "+Слово)>100 тогда
					Прервать;
				Иначе
					ЦельКомандЧасть1=ЦельКомандЧасть1+" "+Слово;
					ЦельКомандЧасть2=Сред(ЦельКомандировки,СтрДлина(ЦельКомандЧасть1)+1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		печДолжностьСотр=ВыборкаРаботники.Должность;
		печПодразделениеСотр=ВыборкаРаботники.ПодразделениеОрганизации;
		
		КомОбъект.Variables.Item("ПечПодразделениеСотр").Value=?(ПустаяСтрока(печПодразделениеСотр)," ",печПодразделениеСотр);
		КомОбъект.Variables.Item("ПечДолжностьСотр").Value=?(ПустаяСтрока(печДолжностьСотр)," ",печДолжностьСотр);
		КомОбъект.Variables.Item("Организация").Value=?(ЗначениеЗаполнено(Организация),Строка(Организация)," ");
				

		КомОбъект.Variables.Item("ЦельКомандЧасть1").Value=?(ПустаяСтрока(ЦельКомандЧасть1)," ",ЦельКомандЧасть1);
		КомОбъект.Variables.Item("ЦельКомандЧасть2").Value=?(ПустаяСтрока(ЦельКомандЧасть2)," ",ЦельКомандЧасть2);
		КомОбъект.Variables.Item("МестоКомандировки").Value = СокрЛП(ВыборкаДляШапки.ГородНазначения)+" "+?(Не ПустаяСтрока(СокрЛП(ВыборкаДляШапки.ОрганизацияНазначения))," ,  ","")+" "+СокрЛП(ВыборкаДляШапки.ОрганизацияНазначения);
		
		КомОбъект.Fields.UpDate();
		КомОбъект = 0;
                                   

	КонецЦикла;
	
КонецПроцедуры

//vvv
// Функция формирует табличный документ с печатной формой "Т-10",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьДополнения(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.АвтоМасштаб = Истина;
	
	// получаем данные для печати
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакета		= Макет.ПолучитьОбласть("Шапка");		
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
	КонецЕсли;

	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		// Шапка документа.
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбластьМакета.Параметры.НомерДок = СокрЛП(НомерДокДляПечати) + "/" + ВыборкаРаботники.НомерСтроки
		КонецЕсли;
		
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		
		ОбластьМакета.Параметры.НомерПриказа=ВыборкаДляШапки.НомерПриказа;
		ОбластьМакета.Параметры.ДатаПриказа=Формат(ВыборкаДляШапки.ДатаПриказа,"ДЛФ=Д");	
		ОбластьМакета.Параметры.ДатаДок=Формат(ВыборкаДляШапки.ДатаДок,"ДЛФ=Д");	
		
		печДолжностьСотр=ВыборкаРаботники.Должность;
		Если ВыборкаДляШапки.ПечататьПодразделение ТОгда
			печДолжностьСотр=печДолжностьСотр+", "+ВыборкаРаботники.ПодразделениеОрганизации;
		КОнецЕсли;                                  
		
		ОбластьМакета.Параметры.печДолжностьСотр=печДолжностьСотр;
		// выводим данные по работнику
		ТабДокумент.Вывести(ОбластьМакета);
		
		Для к=1 По 4 Цикл
			ТабДокумент.Вывести(Макет.ПолучитьОбласть("Выбыл"));
		КонецЦикла;

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакета);
		
		// выводим оборот удостоверения
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции // ПечатьАО()

// Функция формирует табличный документ с печатной формой "Т-10а",
//
// Возвращаемое значение:
//	Табличный документ - печатная форма
//
Функция ПечатьТ10а(ИмяМакета)

    ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	
	// получаем данные для печати
	ВыборкаДляШапки		= СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники	= СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка	= Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакета		= Макет.ПолучитьОбласть("Работник"); // строка работника
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
 		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // область работника
		НомерДокДляПечати = ВыборкаДляШапки.НомерДок;
	КонецЕсли;
	
	//заполняем шапку документа
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	//заполняем данные по работнику
	
	Пока ВыборкаРаботники.Следующий() Цикл
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакета.Параметры.Номер = ВыборкаРаботники.НомерСтроки;
		ОбластьМакета.Параметры.Дата = Формат(ВыборкаДляШапки.ДатаДок,"ДФ=dd.MM.yyyy");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
 	ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
	ТабДокумент.Вывести(ОбластьМакета);	
		
	Возврат ТабДокумент;

   
КонецФункции // ПечатьТ10а()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	КомандировкиОрганизаций.Дата,
	|	КомандировкиОрганизаций.Организация,
	//vvv
	|	КомандировкиОрганизаций.СтранаНазначения,
	|	КомандировкиОрганизаций.ГородНазначения,
	|	КомандировкиОрганизаций.ОрганизацияНазначения,
	|	КомандировкиОрганизаций.НомерПриказа,
	|	КомандировкиОрганизаций.ДатаПриказа,
	|	КомандировкиОрганизаций.Цель,
	|	КомандировкиОрганизаций.Согласовал,
	|	КомандировкиОрганизаций.Руководитель,
	//
	|	ВЫБОР
	|		КОГДА КомандировкиОрганизаций.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	|			ТОГДА КомандировкиОрганизаций.Организация
	|		ИНАЧЕ КомандировкиОрганизаций.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	КомандировкиОрганизаций.Ссылка
	|ИЗ
	|	Документ.КомандировкиОрганизаций КАК КомандировкиОрганизаций
	|ГДЕ
	|	КомандировкиОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры:
//	Режим	- режим проведения
//
// Возвращаемое значение:
//	Результат запроса. В запросе данные документа дополняются значениями
//	проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, ПроверкаШтатногоРасписания)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата",				Дата('00010101'));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);

	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвиженийКадров": 
	// 1. Выборка "ТЧРаботникиОрганизации": 
	//		Выбираются строки документа.  
	// 2. Выборка "ДанныеПоРаботникуДоНазначения": 
	//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по регистру РаботникиОрганизации на дату ДатаНачала
	//		для выполнения движений и проверки "Работает ли работник на дату перемещения"
	//		(Использует данные выборки "ДатыПоследнегоДвиженияРаботника")
	// 3. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки, имеющие пересекающийся период действия
	//
	// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	// 1. Выборка "ТЧРаботникиОрганизации":
	//		Выбираются строки документа 
	// 2. Выборка "Работники":
	//		Для каждой строки ТЧРаботникиОрганизации ищем движения по регистру РаботникиОрганизации за период [ДатаНачала, ДатаОкончания]
	//		по измерению <Сотрудник>
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование,
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧРаботникиОрганизации.ДатаНачала,
	|	ТЧРаботникиОрганизации.ДатаОкончания,
	//vvv
	|	ТЧРаботникиОрганизации.ВидТранспорта,
	|	ТЧРаботникиОрганизации.Цель,
	|	ТЧРаботникиОрганизации.Согласовал,
	|	ТЧРаботникиОрганизации.Руководитель,
	|	ТЧРаботникиОрганизации.КомандировкаОтменена,
	//
	|	ТЧРаботникиОрганизации.ВремяНахожденияВПути,
	|	ТЧРаботникиОрганизации.НапомнитьПоЗавершении,
	|	ТЧРаботникиОрганизации.ОсвобождатьСтавку,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок
	|	КОНЕЦ КАК ЗанимаемыхСтавок,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	ИмеющиесяСостояния.Состояние КАК КонфликтноеСостояние,
	|	ИмеющиесяСостояния.Регистратор.Представление КАК КонфликтныйДокумент,
	|	ДанныеПоРаботникуДоНазначения.УсловияТрудаИзмерение,
	|	ДанныеПоРаботникуДоНазначения.ВидДеятельностиИзмерение
	|ИЗ
	|	Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(Работники.Период) КАК ДатаДвижения
	|		ИЗ
	|			Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|				ПО (Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала)
	|					И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнегоДвиженияРаботника
	|		ПО (ДатыПоследнегоДвиженияРаботника.НомерСтроки = ТЧРаботникиОрганизации.НомерСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнегоДвиженияРаботника.ДатаДвижения)
	|			И ТЧРаботникиОрганизации.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
	|				ПО (ТЧРаботникиОрганизации2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботникиОрганизации.НомерСтроки <> ТЧРаботникиОрганизации2.НомерСтроки
	|					И ТЧРаботникиОрганизации.ДатаНачала <= ТЧРаботникиОрганизации2.ДатаНачала
	|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
	|					И (ВЫБОР
	|						КОГДА ТЧРаботникиОрганизации.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА ИСТИНА
	|						КОГДА ТЧРаботникиОрганизации.НапомнитьПоЗавершении
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ТЧРаботникиОрганизации.ДатаОкончания >= ТЧРаботникиОрганизации2.ДатаНачала
	|					КОНЕЦ)
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК ИмеющиесяСостояния
	//vvv делаем, чтобы было невозможно внести несколько командировок
	//|		ПО ТЧРаботникиОрганизации.ДатаНачала = ИмеющиесяСостояния.Период
	|		ПО 
	|			ВЫБОР
	|				КОГДА ИмеющиесяСостояния.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Командировка) И ИмеющиесяСостояния.ПериодЗавершения <> ДАТАВРЕМЯ(1,1,1,0,0,0) ТОГДА ТЧРаботникиОрганизации.ДатаНачала МЕЖДУ ИмеющиесяСостояния.Период И ДОБАВИТЬКДАТЕ(ИмеющиесяСостояния.ПериодЗавершения,ДЕНЬ,-1)
	|				ИНАЧЕ ТЧРаботникиОрганизации.ДатаНачала = ИмеющиесяСостояния.Период
	|			КОНЕЦ
	//
	|			И ТЧРаботникиОрганизации.Ссылка <> ИмеющиесяСостояния.Регистратор
	|			И ТЧРаботникиОрганизации.Сотрудник = ИмеющиесяСостояния.Сотрудник
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры:
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Организация
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, работники которой отправляются в командировку!", Отказ, Заголовок);
	КонецЕсли;
	
	//vvv
	НеКонтролироватьРеквизитыКомандировок=ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "НеКонтролироватьРеквизитыКомандировок");
	
	Если Не НеКонтролироватьРеквизитыКомандировок ТОгда 
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СтранаНазначения) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указана страна назначения!", Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ГородНазначения) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан город назначения!", Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОрганизацияНазначения) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указана организация назначения!", Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаПриказа) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указана дата приказа!", Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НомерПриказа) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан номер приказа!", Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Цель) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указана цель командировки!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;	
	//

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса по работникам, 
//	Отказ						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники организации"": ";

	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
		
	// ДатаНачала
	НетДатыНачала = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
	Если НетДатыНачала Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала командировки!", Отказ, Заголовок);
	КонецЕсли;

	Если НетСотрудника ИЛИ НетДатыНачала Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
		Если ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала командировки не может превышать дату окончания!", Отказ, Заголовок);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ДатаНачала + мДлинаСуток * ВыборкаПоСтрокамДокумента.ВремяНахожденияВПути > ВыборкаПоСтрокамДокумента.ДатаОкончания	Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "время нахождения в пути не может превышать срок командировки!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	//vvv
	НеКонтролироватьРеквизитыКомандировок=ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "НеКонтролироватьРеквизитыКомандировок");
	
	Если Не НеКонтролироватьРеквизитыКомандировок ТОгда
		Если Не (ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Согласовал) ИЛИ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Согласовал)) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан согласователь!", Отказ, Заголовок);
		КонецЕсли;
		
		Если Не (ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Руководитель) ИЛИ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Руководитель)) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан руководитель!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;	
	//

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
			
	// Проверка: ранее работник должен быть принят на работу
	Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = NULL Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
			
	ИначеЕсли ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
			
	КонецЕсли;

	// Проверка: противоречие другой строке документа
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
		СтрокаСообщениеОбОшибке = "период командировки пересекается с периодом строки " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка: в регистре уже есть такое движение
	Если ВыборкаПоСтрокамДокумента.КонфликтноеСостояние <> NULL Тогда
		СтрокаСообщениеОбОшибке = "работник уже переведен в состояние """ + ВыборкаПоСтрокамДокумента.КонфликтноеСостояние + """ документом " + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//	ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//	ВыборкаПоРаботникиОрганизации
//	УчетнаяПолитикаПоПерсоналуОрганизации
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)
	
	// движения по дате "с"
	Движение = Движения.СостояниеРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период							= ВыборкаПоРаботникиОрганизации.ДатаНачала;
	
	// Измерения
	Движение.Сотрудник						= ВыборкаПоРаботникиОрганизации.Сотрудник;
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Ресурсы
	Движение.Состояние						= Перечисления.СостоянияРаботникаОрганизации.Командировка;
	
	Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаОкончания) Тогда
		
		Если НЕ ВыборкаПоРаботникиОрганизации.НапомнитьПоЗавершении Тогда
			// Свойства
			Движение.ПериодЗавершения		= ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
			
			// Ресурсы
			Движение.СостояниеЗавершения	= Перечисления.СостоянияРаботникаОрганизации.Работает;
			
		Иначе
			Движение = Движения.НамеченныеСобытияПоПерсоналу.Добавить();
			
			// Свойства
			Движение.Период					= ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
			
			// Измерения
			Движение.Сотрудник				= ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
			Движение.ДатаИзменения			= ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
			Движение.ПланируемоеСобытие		= Перечисления.НамеченныеСобытияПоПерсоналу.Командировка;
			
			// Реквизиты
			Движение.ЗанимаемыхСтавок		= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
			Движение.ЗаниматьСтавку			= ВыборкаПоРаботникиОрганизации.ОсвобождатьСтавку;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Движение = Движения.ПериодыСостоянийРаботниковОрганизаций.Добавить();
			
	// Измерения
	Движение.Сотрудник			= ВыборкаПоРаботникиОрганизации.Сотрудник;
	Движение.ДатаНачала			= ВыборкаПоРаботникиОрганизации.ДатаНачала;
	Если ВыборкаПоРаботникиОрганизации.ДатаОкончания <> '0001-01-01' И
		 НЕ ВыборкаПоРаботникиОрганизации.НапомнитьПоЗавершении Тогда
		Движение.ДатаОкончания	= ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа
//	ВыборкаПоРаботникиОрганизации
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)

	Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
	
	// Свойства
	Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаНачала;
	Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;

	// Измерения
	Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
	Движение.Должность					= ВыборкаПоРаботникиОрганизации.Должность;
	Движение.УсловияТрудаИзмерение		= ВыборкаПоРаботникиОрганизации.УсловияТрудаИзмерение;
	Движение.ВидДеятельностиИзмерение	= ВыборкаПоРаботникиОрганизации.ВидДеятельностиИзмерение;


	// Ресурсы
	Движение.КоличествоСтавок			= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок; 

	Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаОкончания) и НЕ ВыборкаПоРаботникиОрганизации.НапомнитьПоЗавершении Тогда
	
		Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();

		// Свойства
		Движение.Период					= ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
		Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
		// Измерения
		Движение.ПодразделениеОрганизации = ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		Движение.Должность					= ВыборкаПоРаботникиОрганизации.Должность;
		Движение.УсловияТрудаИзмерение		= ВыборкаПоРаботникиОрганизации.УсловияТрудаИзмерение;
		Движение.ВидДеятельностиИзмерение	= ВыборкаПоРаботникиОрганизации.ВидДеятельностиИзмерение;


		// Ресурсы
		Движение.КоличествоСтавок		= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
		
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Получение учетной политики по персоналу организации
			УчетнаяПолитикаПоПерсоналуОрганизации	= глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
			ПроверкаШтатногоРасписания				= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналуОрганизации, Организация, "ПроверкаШтатногоРасписания");
			
			РезультатЗапросаПоРаботники		= СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, ПроверкаШтатногоРасписания);
			ВыборкаПоРаботникиОрганизации	= РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);

				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					//vvv добавим условие, т.к. в случае если сотрудников в одном документе много, а один может не ехать
					Если Не ВыборкаПоРаботникиОрганизации.КомандировкаОтменена Тогда 
						ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации);
					КонецЕсли;					

					//vvv
					//Если ВыборкаПоРаботникиОрганизации.ОсвобождатьСтавку Тогда
					Если ВыборкаПоРаботникиОрганизации.ОсвобождатьСтавку И Не ВыборкаПоРаботникиОрганизации.КомандировкаОтменена Тогда
						ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации);
					КонецЕсли;
				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.КадровыеПриказыОрганизации.Добавить();
		ЗаписьРегистрации.Период		= Дата;
		ЗаписьРегистрации.Регистратор	= Ссылка;
	КонецЕсли;
	
	Движения.ПериодыСостоянийРаботниковОрганизаций.РежимЗаписиРегистратора = РежимЗаписи;
	
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;

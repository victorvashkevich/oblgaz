////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Заполняет показатели
//
Функция ЗаполнитьПоказатели(ТекущийСотрудник, Источник) Экспорт 
	
	Если ТекущийСотрудник = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ФормаВводаПоказателей = РегистрыСведений.ЗначенияПоказателейСхемМотивации.ПолучитьФорму("ФормаВводаЗначенийПоказателей");
	ФормаВводаПоказателей.Организация		= Справочники.Организации.ПустаяСсылка();
	ФормаВводаПоказателей.ПериодДействия	= НачалоМесяца(ПериодРегистрации);
	
	ТЗНачисления	= Начисления.Выгрузить(,"ФизЛицо,Сотрудник,ВидРасчета,ДатаОкончания");
	ТЗУдержания		= Удержания.Выгрузить(,"ФизЛицо,ВидРасчета,ДатаОкончания");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Начисления",ТЗНачисления);
	Запрос.УстановитьПараметр("Удержания",ТЗУдержания);
	Запрос.УстановитьПараметр("ПарамДата",НачалоМесяца(ПериодРегистрации));
	
	// получим временную таблицу с сотрудниками и видами расчетов
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ВидРасчета,
	|	Начисления.ФизЛицо,
	|	Начисления.Сотрудник,
	|	Начисления.ДатаОкончания
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&Начисления КАК Начисления";
	
	Запрос.Выполнить();
	
	ВТНачисления = "ВТНачисления";
	
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Удержания.ВидРасчета,
	|	Удержания.ФизЛицо,
	|	Удержания.ДатаОкончания
	|ПОМЕСТИТЬ ВТУдержания
	|ИЗ
	|	&Удержания КАК Удержания";
	
	ВТУдержания = "ВТУдержания";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Показатели.Показатель.ВидПоказателя КАК ВидПоказателя,
	|	Показатели.Показатель КАК Показатель,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизЛицо,
	|	Начисления.ДатаОкончания
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели
	|		ПО Начисления.ВидРасчета = Показатели.Ссылка
	|ГДЕ
	|	Показатели.Показатель ЕСТЬ НЕ NULL 
	|	И Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется)
	|	И Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)
	|	И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
	|	И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная)
	|	И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|	И (НЕ Показатели.Показатель.Предопределенный)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Показатели.Показатель.ВидПоказателя,
	|	Показатели.Показатель,
	|	Сотрудники.Сотрудник,
	|	Удержания.ФизЛицо,
	|	Удержания.ДатаОкончания
	|ИЗ
	|	ВТУдержания КАК Удержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели
	|		ПО Удержания.ВидРасчета = Показатели.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокСотрудников.Сотрудник КАК Сотрудник,
	|			СписокСотрудников.Физлицо КАК Физлицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
	|				РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
	|				1 КАК Приоритет
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|						&ПарамДата,
	|						Сотрудник.Физлицо В
	|								(ВЫБРАТЬ
	|									Удержания.Физлицо
	|								ИЗ
	|									ВТУдержания КАК Удержания)
	|							И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)) КАК РаботникиОсновноеМесто
	|			ГДЕ
	|				ВЫБОР
	|						КОГДА РаботникиОсновноеМесто.ПериодЗавершения <= &ПарамДата
	|								И РаботникиОсновноеМесто.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА РаботникиОсновноеМесто.ПричинаИзмененияСостоянияЗавершения
	|						ИНАЧЕ РаботникиОсновноеМесто.ПричинаИзмененияСостояния
	|					КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиОсновноеМесто.Сотрудник.Физлицо
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиСовместительство.Сотрудник),
	|				РаботникиСовместительство.Сотрудник.Физлицо,
	|				2
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|						&ПарамДата,
	|						Сотрудник.Физлицо В
	|								(ВЫБРАТЬ
	|									Удержания.Физлицо
	|								ИЗ
	|									ВТУдержания КАК Удержания)
	|							И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)) КАК РаботникиСовместительство
	|			ГДЕ
	|				ВЫБОР
	|						КОГДА РаботникиСовместительство.ПериодЗавершения <= &ПарамДата
	|								И РаботникиСовместительство.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА РаботникиСовместительство.ПричинаИзмененияСостоянияЗавершения
	|						ИНАЧЕ РаботникиСовместительство.ПричинаИзмененияСостояния
	|					КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиСовместительство.Сотрудник.Физлицо
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				МАКСИМУМ(СотрудникиДУ.Ссылка),
	|				СотрудникиДУ.Физлицо,
	|				ВЫБОР
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|						ТОГДА 3
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|						ТОГДА 4
	|					ИНАЧЕ 5
	|				КОНЕЦ
	|			ИЗ
	|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
	|			ГДЕ
	|				СотрудникиДУ.Физлицо В
	|						(ВЫБРАТЬ
	|							Удержания.Физлицо
	|						ИЗ
	|							ВТУдержания КАК Удержания)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СотрудникиДУ.Физлицо,
	|				ВЫБОР
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|						ТОГДА 3
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|						ТОГДА 4
	|					ИНАЧЕ 5
	|				КОНЕЦ) КАК СписокСотрудников
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					СписокФизическихЛиц.Физлицо КАК Физлицо,
	|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
	|				ИЗ
	|					(ВЫБРАТЬ
	|						РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
	|						1 КАК Приоритет
	|					ИЗ
	|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|								&ПарамДата,
	|								Сотрудник.Физлицо В
	|										(ВЫБРАТЬ
	|											Удержания.Физлицо
	|										ИЗ
	|											ВТУдержания КАК Удержания)
	|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)) КАК РаботникиОсновноеМесто
	|					ГДЕ
	|						ВЫБОР
	|								КОГДА РаботникиОсновноеМесто.ПериодЗавершения <= &ПарамДата
	|										И РаботникиОсновноеМесто.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|									ТОГДА РаботникиОсновноеМесто.ПричинаИзмененияСостоянияЗавершения
	|								ИНАЧЕ РаботникиОсновноеМесто.ПричинаИзмененияСостояния
	|							КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						РаботникиСовместительство.Сотрудник.Физлицо,
	|						2
	|					ИЗ
	|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|								&ПарамДата,
	|								Сотрудник.Физлицо В
	|										(ВЫБРАТЬ
	|											Удержания.Физлицо
	|										ИЗ
	|											ВТУдержания КАК Удержания)
	|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)) КАК РаботникиСовместительство
	|					ГДЕ
	|						ВЫБОР
	|								КОГДА РаботникиСовместительство.ПериодЗавершения <= &ПарамДата
	|										И РаботникиСовместительство.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|									ТОГДА РаботникиСовместительство.ПричинаИзмененияСостоянияЗавершения
	|								ИНАЧЕ РаботникиСовместительство.ПричинаИзмененияСостояния
	|							КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						СотрудникиДУ.Физлицо,
	|						ВЫБОР
	|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|								ТОГДА 3
	|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|								ТОГДА 4
	|							ИНАЧЕ 5
	|						КОНЕЦ
	|					ИЗ
	|						Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
	|					ГДЕ
	|						СотрудникиДУ.Физлицо В
	|								(ВЫБРАТЬ
	|									Удержания.Физлицо
	|								ИЗ
	|									ВТУдержания КАК Удержания)) КАК СписокФизическихЛиц
	|				
	|				СГРУППИРОВАТЬ ПО
	|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
	|				ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
	|					И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет) КАК Сотрудники
	|		ПО Удержания.ФизЛицо = Сотрудники.Физлицо
	|ГДЕ
	|	Показатели.Показатель ЕСТЬ НЕ NULL 
	|	И Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется)
	|	И Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)
	|	И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
	|	И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная)
	|	И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|	И (НЕ Показатели.Показатель.Предопределенный)
	|	И Сотрудники.Сотрудник ЕСТЬ НЕ NULL ";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Показатели = ТаблицаЗапроса.ВыгрузитьКолонку("Показатель");
	Сотрудники = ТаблицаЗапроса.ВыгрузитьКолонку("Сотрудник");

	Если ТаблицаЗапроса.Количество() > 0 Тогда
		ФормаВводаПоказателей.ФормаАвтозаполнение(ТаблицаЗапроса, Сотрудники, Показатели, , Истина);
		ФормаВводаПоказателей.мСотрудникДляОткрытия = ТекущийСотрудник;
		ФормаВводаПоказателей.мИсточник				= Источник;
		ФормаВводаПоказателей.Открыть();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции //ЗаполнитьПоказатели

// Закрытие строк - ввод значения ДатаОкончания для тех строк у которых не нуоевое 
// значение Размер и удаление тех, у кого Размер = 0
// Параметры:
//  ТЗ - таблица значений
//  НезакрытыеСтроки - массив незакрытых строк таблицы значений ТЗ
//  ДатаОкончания - дата, которую нужно проставить в качестве "закрывающей"
//
// Возвращаемое зеначение:
//  нет
//
Процедура ЗакрытьСтроки(ТЗ, НезакрытыеСтроки, ДатаОкончания)
	
	Для Каждого Строка Из НезакрытыеСтроки Цикл
		Если Строка.ВидРасчета = Неопределено ИЛИ Строка.ДатаНачала > ДатаОкончания Тогда
			ТЗ.Удалить(Строка);
		ИначеЕсли Строка.ДатаОкончания = Дата('00010101') или Строка.ДатаОкончания > ДатаОкончания Тогда
			Строка.ДатаОкончания = ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	НезакрытыеСтроки.Очистить();
	
КонецПроцедуры // ЗакрытьСтроки

// Найти строку в массиве строк по переданному виду расчета или по признаку "Основное"
// Найденная строка и ее индекс возвращаются через переданные параметры Строка и ИндексСтроки
// Параметры:
//  НезакрытыеСтроки - массив строк таблицы значений
//	ПоискОсновного - признак поиска основного начисления
//  ВидРасчета - вид расчета ссылка
//  Строка - в этот параметр будет возвращена строка, начальное значение - Неопределено
//  ИндексСтроки - в этот параметр будет возвращен индекс строки, начальное значение - Неопределено
//
// Возвращаемое зеначение:
//  нет
//
Процедура НайтиСредиНезакрытых(НезакрытыеСтроки, ПоискОсновного, ВидРасчета, Строка, ИндексСтроки)
	
	Для Индекс  = 0 По НезакрытыеСтроки.ВГраница() Цикл
		Если (ПоискОсновного И НезакрытыеСтроки[Индекс].Основное) 
			ИЛИ (НЕ ПоискОсновного И НезакрытыеСтроки[Индекс].ВидРасчета = ВидРасчета) Тогда
			ИндексСтроки = Индекс;
			Строка = НезакрытыеСтроки[Индекс];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры  // НайтиСредиНезакрытых

// Нйти строку в массиве строк по переданному виду расчета и основанию (ссылка на документ)
// Найденная строка и ее индекс возвращаются через переданные параметры Строка и ИндексСтроки
// Параметры:
//  НезакрытыеСтроки - массив строк таблицы значений
//  ВидРасчета - вид расчета ссылка
//  ДокументОснование - документ ссылка
//  Строка - в этот параметр будет возвращена строка, начальное значение - Неопределено
//  ИндексСтроки - в этот параметр будет возвращен индекс строки, начальное значение - Неопределено
//
// Возвращаемое зеначение:
//  нет
//
Процедура НайтиСредиНезакрытыхУдержаний(НезакрытыеСтроки, ВидРасчета, ДокументОснование, Строка, ИндексСтроки)
	
	Для Индекс = 0 По НезакрытыеСтроки.ВГраница() Цикл
		Если НезакрытыеСтроки[Индекс].ВидРасчета = ВидРасчета И НезакрытыеСтроки[Индекс].ДокументОснование = ДокументОснование Тогда
			ИндексСтроки = Индекс;
			Строка = НезакрытыеСтроки[Индекс];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры  // НайтиСредиНезакрытыхУдержаний

// Выполняет формирование таблицы значений для загрузки ее в табличную часть Начисления
// Параметры:
// 	выборка результатат запроса
// Возвращаемое значение:
//  таблица значений
//
Функция СформироватьТаблицуНачислений(Начисления, МассивВалютСНезаданнымКурсом)
	
	ТЗНачисления = Новый ТаблицаЗначений();
	ТЗНачисления.Колонки.Добавить("Сотрудник");
	ТЗНачисления.Колонки.Добавить("Физлицо");
	ТЗНачисления.Колонки.Добавить("ГрафикРаботы");
	ТЗНачисления.Колонки.Добавить("СуммированныйУчетРабочегоВремени");
	ТЗНачисления.Колонки.Добавить("ВидРасчета");
	ТЗНачисления.Колонки.Добавить("Основное");// Признак основного начисления
	ТЗНачисления.Колонки.Добавить("СпособРасчета");
	ТЗНачисления.Колонки.Добавить("Показатель1");
	ТЗНачисления.Колонки.Добавить("Показатель2");
	ТЗНачисления.Колонки.Добавить("Показатель3");
	ТЗНачисления.Колонки.Добавить("Показатель4");
	ТЗНачисления.Колонки.Добавить("Показатель5");
	ТЗНачисления.Колонки.Добавить("Показатель6");
	ТЗНачисления.Колонки.Добавить("ДатаНачала", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗНачисления.Колонки.Добавить("ДатаОкончания", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗНачисления.Колонки.Добавить("Подразделение");
	ТЗНачисления.Колонки.Добавить("Авторасчет");
	
	// Массив незакрытых строк таблицы значений, т.е. тех, которым не проставлена дата окончания
	НезакрытыеСтроки = Новый Массив;
	ТекущийСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	КонецМесяца = КонецМесяца(ПериодРегистрации);
	СтрокиНачисленийТекущегоНазначения = Новый Массив;
	
	Пока Начисления.Следующий() Цикл
		
		// пропускаем удержания
		Если НЕ Начисления.ЭтоНачисление Тогда
			Продолжить;
		КонецЕсли;
		
		Для Сч = 1 По 6 Цикл
			Если (Начисления["КурсВалюты"+Сч] = NULL ИЛИ Начисления["КурсВалюты"+Сч] = 0) Тогда
				Если ЗначениеЗаполнено(Начисления["Валюта"+Сч]) И (Начисления["КурсВалюты"+Сч] = NULL ИЛИ Начисления["КурсВалюты"+Сч] = 0) Тогда
					МассивВалютСНезаданнымКурсом[Начисления["Валюта"+ Сч]] = Истина;
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;
		
		Если Начисления.Сотрудник <> ТекущийСотрудник Тогда
			
			// закрываем незакрытые строки начислений предыдущего работника концом месяца
			ЗакрытьСтроки(ТЗНачисления, НезакрытыеСтроки, КонецМесяца);
			
			// меняется текущий работник и дата его движения
			ТекущийСотрудник = Начисления.Сотрудник;
			ТекущаяДатаНазначения = Начисления.ПериодРаботники;
			СтрокиНачисленийТекущегоНазначения.Очистить();
			
		ИначеЕсли Начисления.ПериодРаботники <> ТекущаяДатаНазначения И (Начисления.НачисляетсяВЦеломЗаМесяц = Null Или (НЕ Начисления.НачисляетсяВЦеломЗаМесяц)) Тогда
		
			// закрываем все строки предыдущего назначения датой предшествующей новому назначению
			ЗакрытьСтроки(ТЗНачисления, СтрокиНачисленийТекущегоНазначения, Начисления.ПериодРаботники - 1);
			НезакрытыеСтроки.Очистить();

			// меняется текущая дата движения работника
			ТекущаяДатаНазначения = Начисления.ПериодРаботники;
			
		КонецЕсли;
			
		Если НЕ Начисления.Подходит ИЛИ Начисления.УжеПроведен Тогда
			// пропускаем такие записи: они уже введены другими документами или соответствуют окончанию назначения работника
			Продолжить;
		КонецЕсли;
		
		// Найдем такой же вид расчета среди незакрытых строк с целью завершения его действия
		Строка = НеОпределено;
		ИндексСтроки = НеОпределено;
		НайтиСредиНезакрытых(НезакрытыеСтроки, Начисления.ОсновноеНачисление, Начисления.ВидРасчета, Строка, ИндексСтроки);
		Если Строка <> НеОпределено Тогда
			// нашли
			Если Строка.ДатаНачала = Начисления.Период Тогда
				Если Начисления.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
					НезакрытыеСтроки.Удалить(ИндексСтроки);
					ИндексСтроки = 0;
					Для каждого СтрокаМассива Из СтрокиНачисленийТекущегоНазначения Цикл
						Если СтрокаМассива = Строка Тогда
							СтрокиНачисленийТекущегоНазначения.Удалить(ИндексСтроки);
							Прервать;
						Иначе
							ИндексСтроки = ИндексСтроки + 1;
						КонецЕсли;
					КонецЦикла;
					ТЗНачисления.Удалить(Строка);
				Иначе
					// если дата та же - меняем данные 
					// не вводим новую строку в формируемую таблицу значений
					// и оставляем "незакрытой"
					Строка.ВидРасчета = Начисления.ВидРасчета;
					Строка.Показатель1 = Начисления.Показатель1;
					Строка.Показатель2 = Начисления.Показатель2;
					Строка.Показатель3 = Начисления.Показатель3;
					Строка.Показатель4 = Начисления.Показатель4;
					Строка.Показатель5 = Начисления.Показатель5;
					Строка.Показатель6 = Начисления.Показатель6;
					Строка.Подразделение = Начисления.Подразделение;
					Строка.ГрафикРаботы = Начисления.ГрафикРаботы;
					Строка.СпособРасчета = Начисления.СпособРасчета;
					Строка.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
				КонецЕсли;
				Продолжить;
			Иначе
				 Если (Начисления.НачисляетсяВЦеломЗаМесяц = Null Или (НЕ Начисления.НачисляетсяВЦеломЗаМесяц)) Тогда
					// иначе - "закрываем" строку и удаляем из массива незакрытых
					Строка.ДатаОкончания = Начисления.Период-1;
					НезакрытыеСтроки.Удалить(ИндексСтроки);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
		Если Начисления.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
			Продолжить;
		ИначеЕсли Начисления.НачисляетсяВЦеломЗаМесяц Тогда
			
			// проверем не введено ли данное начисление уже
			СтрокаПоиска= Новый Структура;
			СтрокаПоиска.Вставить("Сотрудник", Начисления.Сотрудник);
			СтрокаПоиска.Вставить("ВидРасчета", Начисления.ВидРасчета);
			
			НайденныеСтроки = ТЗНачисления.НайтиСтроки(СтрокаПоиска);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Добавим новую строку начислений
		НоваяСтрока = ТЗНачисления.Добавить();
		НоваяСтрока.Сотрудник							= Начисления.Сотрудник;
		НоваяСтрока.Физлицо								= Начисления.Физлицо;
		НоваяСтрока.ГрафикРаботы						= Начисления.ГрафикРаботы;
		НоваяСтрока.СпособРасчета						= Начисления.СпособРасчета;
		НоваяСтрока.СуммированныйУчетРабочегоВремени	= Начисления.СуммированныйУчетРабочегоВремени;
		НоваяСтрока.ВидРасчета							= Начисления.ВидРасчета;
		НоваяСтрока.Основное							= Начисления.ОсновноеНачисление;
		НоваяСтрока.Показатель1							= Начисления.Показатель1;
		НоваяСтрока.Показатель2							= Начисления.Показатель2;
		НоваяСтрока.Показатель3							= Начисления.Показатель3;
		НоваяСтрока.Показатель4							= Начисления.Показатель4;
		НоваяСтрока.Показатель5							= Начисления.Показатель5;
		НоваяСтрока.Показатель6							= Начисления.Показатель6;	
		НоваяСтрока.ДатаНачала							= Начисления.Период;
		Если Начисления.НачисляетсяВЦеломЗаМесяц Тогда
			НоваяСтрока.ДатаОкончания = Начисления.ДатаОкончания;
		КонецЕсли;
		НоваяСтрока.Подразделение						= Начисления.Подразделение;
		НоваяСтрока.Авторасчет							= Истина;
		Если Не Начисления.НачисляетсяВЦеломЗаМесяц Тогда
			НезакрытыеСтроки.Добавить(НоваяСтрока);
			СтрокиНачисленийТекущегоНазначения.Добавить(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивВалютСНезаданнымКурсом.Количество() > 0 Тогда
		
		МассивРасшифровки = Новый Массив;
		МассивРасшифровки.Добавить("ОткрытьФормуСписка");
		МассивРасшифровки.Добавить("РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом");
		
		Расшифровки = Новый Массив;
		Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", "Заполните курс валют" + " ", МассивРасшифровки));
		
		Для Каждого КлючЗначение Из МассивВалютСНезаданнымКурсом Цикл
			ОбщегоНазначения.ВывестиИнформациюОбОшибке("Для расчетного периода не задан курс валюты " + КлючЗначение.Ключ,,,Перечисления.ВидыСообщений.Ошибка, Расшифровки);
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;


	// закрываем строки концом месяца
	ЗакрытьСтроки(ТЗНачисления, НезакрытыеСтроки, КонецМесяца);
	Возврат ТЗНачисления;
	
КонецФункции //СформироватьТаблицуНачислений

// Выполняет формирование таблицы значений для загрузки ее в табличную часть Удержания
//
// Параметры:
//	выборка результатат запроса
//
// Возвращаемое значение:
//	таблица значений
//
Функция СформироватьТаблицуУдержаний(Удержания, МассивВалютСНезаданнымКурсом)
	
	ТЗУдержания = Новый ТаблицаЗначений();
	ТЗУдержания.Колонки.Добавить("ФизЛицо");
	ТЗУдержания.Колонки.Добавить("Подразделение");
	ТЗУдержания.Колонки.Добавить("ВидРасчета");
	ТЗУдержания.Колонки.Добавить("Показатель1");
	ТЗУдержания.Колонки.Добавить("Показатель2");
	ТЗУдержания.Колонки.Добавить("Показатель3");
	ТЗУдержания.Колонки.Добавить("Показатель4");
	ТЗУдержания.Колонки.Добавить("Показатель5");
	ТЗУдержания.Колонки.Добавить("Показатель6");	
	ТЗУдержания.Колонки.Добавить("ДатаНачала", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗУдержания.Колонки.Добавить("ДатаОкончания", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗУдержания.Колонки.Добавить("ДокументОснование");
	ТЗУдержания.Колонки.Добавить("Авторасчет");

	// Массив незакрытых строк таблицы значений, т.е. тех, которым не проставлена дата окончания
	НезакрытыеСтроки = Новый Массив;
	ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецМесяца = КонецМесяца(ПериодРегистрации);
	
	Пока Удержания.Следующий() Цикл
		
		// пропускаем начисления
		Если Удержания.ЭтоНачисление Тогда
			Продолжить;
		КонецЕсли;
		
		Для Сч = 1 По 6 Цикл
			Если (Удержания["КурсВалюты"+Сч] = NULL ИЛИ Удержания["КурсВалюты"+Сч] = 0) Тогда
				Если ЗначениеЗаполнено(Удержания["Валюта"+Сч]) И (Удержания["КурсВалюты"+Сч] = NULL ИЛИ Удержания["КурсВалюты"+Сч] = 0) Тогда
					МассивВалютСНезаданнымКурсом[Удержания["Валюта"+ Сч]] = Истина;
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;
		
		
		Если Удержания.ФизЛицо <> ТекущееФизлицо Тогда
			// закрываем строки концом месяца
			ЗакрытьСтроки(ТЗУдержания, НезакрытыеСтроки, КонецМесяца);
			ТекущееФизлицо = Удержания.ФизЛицо;
		Иначе
			// найдем такой же вид расчета по тому же основанию среди незакрытых строк
			Строка = Неопределено;
			ИндексСтроки = Неопределено;
			НайтиСредиНезакрытыхУдержаний(НезакрытыеСтроки, Удержания.ВидРасчета, Удержания.ДокументОснование, Строка, ИндексСтроки);
			Если Строка <> Неопределено Тогда
				// нашли
				Если Строка.ДатаНачала = Удержания.Период Тогда
					// если дата та же - меняем данные 
					// не вводим новую строку в формируемую таблицу значений
					// и оставляем "незакрытой"
					Строка.Показатель1 = Удержания.Показатель1;
					Строка.Показатель2 = Удержания.Показатель2;
					Строка.Показатель3 = Удержания.Показатель3;
					Строка.Показатель4 = Удержания.Показатель4;
					Строка.Показатель5 = Удержания.Показатель5;
					Строка.Показатель6 = Удержания.Показатель6;			
					Продолжить;
				Иначе
					// иначе - "закрываем" строку и удаляем из массива незакрытых
					Строка.ДатаОкончания = Удержания.Период-1;
					НезакрытыеСтроки.Удалить(ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Удержания.Подходит ИЛИ Удержания.УжеПроведен Тогда
			// пропускаем такие записи: они уже введены другими документами или соответствуют окончанию назначения работника
			Продолжить;                        
		КонецЕсли;
		
		Если Удержания.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
			Продолжить;
		Иначе
			
			// проверем не введено ли уже данное удержание
			СтрокаПоиска= Новый Структура;
			СтрокаПоиска.Вставить("Физлицо", Удержания.Физлицо);
			СтрокаПоиска.Вставить("ВидРасчета", Удержания.ВидРасчета);
			
			НайденныеСтроки = ТЗУдержания.НайтиСтроки(СтрокаПоиска);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ТЗУдержания.Добавить();
		НоваяСтрока.ФизЛицо				= Удержания.ФизЛицо;
		НоваяСтрока.Подразделение		= Удержания.Подразделение;
		НоваяСтрока.ВидРасчета			= Удержания.ВидРасчета;
		НоваяСтрока.Показатель1			= Удержания.Показатель1;
		НоваяСтрока.Показатель2			= Удержания.Показатель2;
		НоваяСтрока.Показатель3			= Удержания.Показатель3;
		НоваяСтрока.Показатель4			= Удержания.Показатель4;
		НоваяСтрока.Показатель5			= Удержания.Показатель5;
		НоваяСтрока.Показатель6			= Удержания.Показатель6;
		НоваяСтрока.ДатаНачала			= Удержания.Период;
		НоваяСтрока.ДатаОкончания		= КонецМесяца;
		НоваяСтрока.ДокументОснование	= Удержания.ДокументОснование;
		НоваяСтрока.Авторасчет			= Истина;
		НезакрытыеСтроки.Добавить(НоваяСтрока);
		
	КонецЦикла;
	// закрываем строки концом месяца
	ЗакрытьСтроки(ТЗУдержания, НезакрытыеСтроки, КонецМесяца);
	Возврат ТЗУдержания;
	
КонецФункции

// Процедура рассчитывает проценты и сумму погашения займа
// и заполняет реквизиты табличной части
Процедура РассчитатьПогашениеЗаймов(ФизЛицо = Неопределено) Экспорт
	
	ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
		
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("парамРегистратор",Ссылка);
	Запрос.УстановитьПараметр("парамВалютаУпрУчета" , ВалютаУпрУчета);
	Запрос.УстановитьПараметр("парамКонецГода",КонецГода(ПериодРегистрации));
	Запрос.УстановитьПараметр("НачалоРасчетногоПериода",ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецРасчетногоПериода",КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДнейВГоду",(КонецГода(ПериодРегистрации) + 1 - НачалоГода(ПериодРегистрации)) / 86400);
	
	Если ВалютаУпрУчета = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		КурсУпрВалюты = 1;
	Иначе	
		Структура = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, КонецМесяца(ПериодРегистрации));
		Если Структура.Курс = 0 или Структура.Кратность = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан курс валюты управленческого учета.");
			Возврат;
		КонецЕсли;
		КурсУпрВалюты = Структура.Курс / Структура.Кратность;
	КонецЕсли;
	Запрос.УстановитьПараметр("КурсУпрВалюты",КурсУпрВалюты);
	
	Если НЕ (Физлицо = Неопределено) Тогда
		
		Запрос.УстановитьПараметр("парамФизлицо", Физлицо);
		СписокФизлицТекст = "Физлицо = &парамФизлицо";
		УсловиеНаФизлицоТекст = " И НачислениеЗарплатыРаботникамПогашениеЗаймов.Физлицо = &парамФизлицо ";
		
	Иначе
		
		СписокФизлицТекст = "Физлицо в
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			 	   Работники.ФизЛицо КАК Физлицо
		|			    ИЗ
		|			 	   Документ.НачислениеЗарплатыРаботникам.ПогашениеЗаймов КАК Работники
		|			    ГДЕ
		|			 	   Работники.Ссылка = &парамРегистратор)";
		
		УсловиеНаФизлицоТекст="";

	КонецЕсли; 	
	
	// ТаблицаПериодыПогашения
	// Описание
	// 1.из таблицы остатков и оборотов рег-ра ПогашениеЗаймовРаботниками (выборка ПогашениеЗаймов)
	// выбираются дни, в которые были произведены какие-либо движения по займу - период движений определяет  
	// начало периода погашения (в течение которого остаток долга не изменяется) - поле ДатаС;  
	// рассчитывается остаток основного долга на конец месяца (поле ОсновнойДолгНаКонецМесяца)
	// 2.из основной таблицы того же рег-ра присоединяются даты окончания периодов погашения - поле ДатаПО  
	// 3.из договора займа выбираются его параметры: проценты, сумма займа (переведенная в валюту упр. учета) и пр.
	//
	
	ТаблицаПериодыПогашения = 
	"ВЫБРАТЬ
	|	ПогашениеЗаймов.Период КАК ДатаС,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботниками.Период, ДЕНЬ)) КАК ДатаПО,
	|	ПогашениеЗаймов.ФизЛицо КАК ФизЛицо,
	|	ПогашениеЗаймов.ДоговорЗайма КАК ДоговорЗайма,
	|	ПогашениеЗаймов.ДоговорЗайма.ПроцентЗаПользованиеЗаймом КАК ДоговорЗаймаПроцентЗаПользованиеЗаймом,
	|	ПогашениеЗаймов.ДоговорЗайма.ПорядокПогашенияЗайма КАК ПорядокПогашенияЗайма,
	|	ВЫБОР
	|		КОГДА ПогашениеЗаймов.ДоговорЗайма.НачалоПогашения < ПогашениеЗаймов.ДоговорЗайма.Дата
	|			ТОГДА ПогашениеЗаймов.ДоговорЗайма.Дата
	|		ИНАЧЕ ПогашениеЗаймов.ДоговорЗайма.НачалоПогашения
	|	КОНЕЦ КАК ДоговорЗаймаНачалоПогашения,
	|	ПогашениеЗаймов.ДоговорЗайма.СрокПогашения КАК ДоговорЗаймаСрокПогашения,
	|	ПогашениеЗаймов.ДоговорЗайма.СуммаЗайма * ВЫБОР
	|		КОГДА ПогашениеЗаймов.ДоговорЗайма.ВалютаДокумента = &парамВалютаУпрУчета
	|			ТОГДА 1
	|		ИНАЧЕ ПогашениеЗаймов.ДоговорЗайма.КурсДокумента / ПогашениеЗаймов.ДоговорЗайма.КратностьДокумента / &КурсУпрВалюты
	|	КОНЕЦ КАК СуммаЗайма,
	|	ПогашениеЗаймов.ОсновнойДолгКонечныйОстаток КАК ОсновнойДолгКонечныйОстаток,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(ПогашениеЗаймов.Период, ДЕНЬ) = &КонецРасчетногоПериода
	|			ТОГДА ПогашениеЗаймов.ОсновнойДолгКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОсновнойДолгНаКонецМесяца,
	|	ПогашениеЗаймов.ПроцентыПриход КАК ПроцентыПриход,
	|	ПогашениеЗаймов.ПроцентыРасход КАК ПроцентыРасход,
	|	ПогашениеЗаймов.ПроцентыОборот КАК ПроцентыОборот,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ПогашениеЗаймов.Период, ДЕНЬ) = &НачалоРасчетногоПериода
	|			ТОГДА ПогашениеЗаймов.ПроцентыНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПроцентыНачальныйОстаток
	|ИЗ
	|	РегистрНакопления.ПогашениеЗаймовРаботниками.ОстаткиИОбороты(
	|		&НачалоРасчетногоПериода,
	|		&КонецРасчетногоПериода,
	|		День,
	|		ДвиженияИГраницыПериода,
	|		" + СписокФизлицТекст + ") КАК ПогашениеЗаймов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПогашениеЗаймовРаботниками КАК ПогашениеЗаймовРаботниками
	|		ПО ПогашениеЗаймов.ФизЛицо = ПогашениеЗаймовРаботниками.ФизЛицо
	|			И ПогашениеЗаймов.ДоговорЗайма = ПогашениеЗаймовРаботниками.ДоговорЗайма
	|			И (ПогашениеЗаймов.Период < НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботниками.Период, ДЕНЬ))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПогашениеЗаймов.Период,
	|	ПогашениеЗаймов.ФизЛицо,
	|	ПогашениеЗаймов.ОсновнойДолгКонечныйОстаток,
	|	ПогашениеЗаймов.ПроцентыНачальныйОстаток,
	|	ПогашениеЗаймов.ПроцентыПриход,
	|	ПогашениеЗаймов.ДоговорЗайма,
	|	ПогашениеЗаймов.ПроцентыРасход,
	|	ПогашениеЗаймов.ПроцентыОборот";
	
	// Основной текст запроса
	// 1. Выборка ДанныеОПогашении
	//  поле ПогашатьЗаймВЭтомМесяце - Определяем, нужно ли погашать займ по условиям договора в текущем месяце
	//  поле ПогашеноЗайма - Рассчитывается сумма займа к погашению: как месячная доля займа или 
	//                       остаток по основному долгу на конец месяца - по условиям договора
	//  поля ПроцентыПриход и ПроцентыРасход - Суммируются начисленные и погашенные проценты по займу за месяц
	//  поле НачисленоПроцентов - Рассчитывается сумма процентов к начислению за месяц (по ежедневным 
	//		остаткам основного долга) как сумма по всем периодам из таблицы ПериодыПогашения начисленных по 
	//  	следующей формуле процентов: 
	//			%% к начислению за период = кадендарных дней в периоде / кадендарных дней в году * процент по займу
	// 2. В основной выборке рассчитываются все показатели т.ч. документа
	//  поле НачисленоПроцентов - доначисляются проценты за пользование займом
	//  поле ПогашеноПроцентов - если займ в текущем месяце погашается, предлагается остаток %% с учетом начисленных за месяц
	//  поле ПогашеноЗайма - если займ в текущем месяце погашается, предлагается рассчитанная ранее сумма к 
	//                       погашению основного долга + сумма погашаемых %%
	//

	ТекстОстаткиЗаймов = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеЗарплатыРаботникамПогашениеЗаймов.ФизЛицо,
	|	НачислениеЗарплатыРаботникамПогашениеЗаймов.ДоговорЗайма,
	|	НачислениеЗарплатыРаботникамПогашениеЗаймов.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ДанныеОПогашении.НачисленоПроцентов > ДанныеОПогашении.ПроцентыПриход
	|			ТОГДА ДанныеОПогашении.НачисленоПроцентов - ДанныеОПогашении.ПроцентыПриход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоПроцентов,
	|	ВЫБОР
	|		КОГДА ДанныеОПогашении.ПогашатьЗаймВЭтомМесяце
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеОПогашении.НачисленоПроцентов > ДанныеОПогашении.ПроцентыПриход + ДанныеОПогашении.ПроцентыРасход
	|						ТОГДА ДанныеОПогашении.НачисленоПроцентов - ДанныеОПогашении.ПроцентыПриход - ДанныеОПогашении.ПроцентыРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ + ДанныеОПогашении.ПроцентыНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПогашеноПроцентов,
	|	ВЫБОР
	|		КОГДА ДанныеОПогашении.ПогашатьЗаймВЭтомМесяце
	|			ТОГДА ДанныеОПогашении.ПогашеноЗайма + ВЫБОР
	|					КОГДА ДанныеОПогашении.НачисленоПроцентов > ДанныеОПогашении.ПроцентыПриход + ДанныеОПогашении.ПроцентыРасход
	|						ТОГДА ДанныеОПогашении.НачисленоПроцентов - ДанныеОПогашении.ПроцентыПриход - ДанныеОПогашении.ПроцентыРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ + ДанныеОПогашении.ПроцентыНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПогашеноЗайма
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникам.ПогашениеЗаймов КАК НачислениеЗарплатыРаботникамПогашениеЗаймов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыПогашения.ФизЛицо КАК ФизЛицо,
	|			ПериодыПогашения.ДоговорЗайма КАК ДоговорЗайма,
	|			ВЫБОР
	|				КОГДА ПериодыПогашения.ПорядокПогашенияЗайма = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияЗаймаПроцентов.ПоОкончанииСрока)
	|							И &КонецРасчетногоПериода >= ДОБАВИТЬКДАТЕ(ПериодыПогашения.ДоговорЗаймаНачалоПогашения, МЕСЯЦ, ПериодыПогашения.ДоговорЗаймаСрокПогашения)
	|					ТОГДА ИСТИНА
	|				КОГДА ПериодыПогашения.ПорядокПогашенияЗайма <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияЗаймаПроцентов.ПоОкончанииСрока)
	|							И &КонецРасчетногоПериода >= ПериодыПогашения.ДоговорЗаймаНачалоПогашения
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ПогашатьЗаймВЭтомМесяце,
	|			ВЫБОР
	|				КОГДА ПериодыПогашения.ПорядокПогашенияЗайма = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияЗаймаПроцентов.ПоОкончанииСрока)
	|					ТОГДА МАКСИМУМ(ПериодыПогашения.ОсновнойДолгНаКонецМесяца)
	|				КОГДА ПериодыПогашения.СуммаЗайма / ПериодыПогашения.ДоговорЗаймаСрокПогашения > МАКСИМУМ(ПериодыПогашения.ОсновнойДолгНаКонецМесяца)
	|					ТОГДА МАКСИМУМ(ПериодыПогашения.ОсновнойДолгНаКонецМесяца)
	|				ИНАЧЕ ПериодыПогашения.СуммаЗайма / ПериодыПогашения.ДоговорЗаймаСрокПогашения
	|			КОНЕЦ КАК ПогашеноЗайма,
	|			СУММА(ПериодыПогашения.ПроцентыПриход) КАК ПроцентыПриход,
	|			СУММА(ПериодыПогашения.ПроцентыРасход) КАК ПроцентыРасход,
	|			СУММА(ВЫРАЗИТЬ(ПериодыПогашения.ОсновнойДолгКонечныйОстаток * РАЗНОСТЬДАТ(ВЫБОР
	|							КОГДА ПериодыПогашения.ОсновнойДолгКонечныйОстаток > 0
	|									И ПериодыПогашения.ДатаС = &НачалоРасчетногоПериода
	|								ТОГДА ДОБАВИТЬКДАТЕ(ПериодыПогашения.ДатаС, ДЕНЬ, -1)
	|							ИНАЧЕ ПериодыПогашения.ДатаС
	|						КОНЕЦ, ВЫБОР
	|							КОГДА ЕСТЬNULL(ПериодыПогашения.ДатаПО, &КонецРасчетногоПериода) > &КонецРасчетногоПериода
	|								ТОГДА &КонецРасчетногоПериода
	|							ИНАЧЕ ЕСТЬNULL(ПериодыПогашения.ДатаПО, &КонецРасчетногоПериода)
	|						КОНЕЦ, ДЕНЬ) / &ДнейВГоду * ПериодыПогашения.ДоговорЗаймаПроцентЗаПользованиеЗаймом / 100 КАК ЧИСЛО(15, 2))) КАК НачисленоПроцентов,
	|			СУММА(ПериодыПогашения.ПроцентыНачальныйОстаток) КАК ПроцентыНачальныйОстаток
	|		ИЗ
	|			(" + ТаблицаПериодыПогашения + ") КАК ПериодыПогашения
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыПогашения.ФизЛицо,
	|			ПериодыПогашения.ДоговорЗайма,
	|			ПериодыПогашения.ПорядокПогашенияЗайма,
	|			ПериодыПогашения.ДоговорЗаймаНачалоПогашения,
	|			ПериодыПогашения.ДоговорЗаймаСрокПогашения,
	|			ПериодыПогашения.СуммаЗайма) КАК ДанныеОПогашении
	|		ПО НачислениеЗарплатыРаботникамПогашениеЗаймов.ФизЛицо = ДанныеОПогашении.ФизЛицо
	|			И НачислениеЗарплатыРаботникамПогашениеЗаймов.ДоговорЗайма = ДанныеОПогашении.ДоговорЗайма
	|ГДЕ
	|	НачислениеЗарплатыРаботникамПогашениеЗаймов.Ссылка = &парамРегистратор" + УсловиеНаФизлицоТекст+"
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";;
	
	Запрос.Текст = ТекстОстаткиЗаймов;
	РезультатЗапроса = Запрос.Выполнить();
	Если ЗначениеЗаполнено(Физлицо) Тогда
		ВыборкаПоСсудам = РезультатЗапроса.Выбрать();
		Пока ВыборкаПоСсудам.Следующий() Цикл
			СтрокаТабличнойЧасти = ПогашениеЗаймов.Получить(ВыборкаПоСсудам.НомерСтроки-1);
			СтрокаТабличнойЧасти.НачисленоПроцентов = ВыборкаПоСсудам.НачисленоПроцентов;
			СтрокаТабличнойЧасти.ПогашеноЗайма	  = ВыборкаПоСсудам.ПогашеноЗайма;
			СтрокаТабличнойЧасти.ПогашеноПроцентов  = ВыборкаПоСсудам.ПогашеноПроцентов;
		КонецЦикла;
	Иначе	
		ПогашениеЗаймов.Загрузить(РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Расчерчивает разделы расчетного листка линиями
//
// Параметры
//  ВременныйТабличныйДокумент - Табличный документ с уже выведенными строками расчетного листка
//  СтрокПропустить - целое число уже обработанных ранее строк т.д.
//  СтрокРасчертить - целое число строк т.д., которым требуется указать границы
//
Процедура РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент,СтрокПропустить,СтрокРасчертить)

	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	Для Сч = 0 По СтрокРасчертить - 1 Цикл
		
		НомерСтроки = СтрокПропустить + Сч;
		
		Для Ссч = 2 По 15 Цикл
			
			Если Ссч = 4 ИЛИ Ссч = 8 ИЛИ Ссч = 10 ИЛИ Ссч = 11 ИЛИ Ссч = 13 ИЛИ Ссч = 15 Тогда
				Продолжить
			КонецЕсли; 
			
			ВременныйТабличныйДокумент.Область(НомерСтроки, Ссч).ГраницаСлева = Линия;
			
		КонецЦикла;
		
		ВременныйТабличныйДокумент.Область(НомерСтроки, 15).ГраницаСправа = Линия;
		ВременныйТабличныйДокумент.Область(НомерСтроки, 2, НомерСтроки, 15).ГраницаСнизу = Линия;
		
	КонецЦикла; 
	
КонецПроцедуры // РасчертитьРасчетныйЛисток()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает соответствие физлиц и подразделений
//
Функция ПолучитьСоответствиеФизлицИПодразделений(ФизЛица) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СписокСотрудников.Физлицо КАК Физлицо,
	|	СписокСотрудников.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрСведений.Работники.СрезПоследних(&ПарамДата, Физлицо В (&ФизЛица)) КАК СписокСотрудников
	|ГДЕ
	|	СписокСотрудников.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ФизЛица",ФизЛица);
	Запрос.УстановитьПараметр("ПарамДата", КонецДня(КонецМесяца(ПериодРегистрации)));
	
	ПодразделенияФизлиц = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПодразделенияФизлиц.Вставить(Выборка.Физлицо, Выборка.Подразделение);
	КонецЦикла;
	
	Возврат ПодразделенияФизлиц;
	
КонецФункции //ПолучитьСоответствиеФизлицИПодразделений

//Выполняет автоматическое заполнение показателей в строке
//
Процедура ЗаполнитьПоказателиСтроки(СтрокаТабличнойЧасти, ИмяТабличнойЧасти) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДатаНачала = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаНачала), СтрокаТабличнойЧасти.ДатаНачала, ПериодРегистрации);
	
	Запрос.УстановитьПараметр("парамНачало",							ДатаНачала);
	Запрос.УстановитьПараметр("парамКонец",								КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПользователь",						Ответственный);
	Запрос.УстановитьПараметр("парамДатаВалютногоУчета",				НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамВидСхемыМотивации",					ВидСхемыМотивации);
	
	Физлицо = ?(ИмяТабличнойЧасти = "Начисления", ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.Сотрудник, "Физлицо"), СтрокаТабличнойЧасти.Физлицо);
	
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Запрос.УстановитьПараметр("ВидРасчета", СтрокаТабличнойЧасти.ВидРасчета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиСрезПоследних.ФизЛицо,
	|	РаботникиСрезПоследних.Подразделение,
	|	РаботникиСрезПоследних.Должность
	|ПОМЕСТИТЬ ВТСписокРаботников
	|ИЗ
	|	РегистрСведений.Работники.СрезПоследних(&парамНачало, Физлицо = &Физлицо) КАК РаботникиСрезПоследних
	|ГДЕ
	|	РаботникиСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&парамНачало КАК Период,
	|	СписокРаботников.ФизЛицо,
	|	СписокРаботников.Подразделение,
	|	СписокРаботников.Должность
	|ПОМЕСТИТЬ ВТДвиженияРаботников
	|ИЗ
	|	ВТСписокРаботников КАК СписокРаботников";
	
	Запрос.Выполнить();

	ЗаполнениеДокументовДополнительный.СформироватьЗапросЗначенийПоказателейУправленческогоУчета(Запрос, ПоВременнойСхемеМотивации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияПоказателя1.Значение КАК Показатель1,
	|	ЗначенияПоказателя2.Значение КАК Показатель2,
	|	ЗначенияПоказателя3.Значение КАК Показатель3,
	|	ЗначенияПоказателя4.Значение КАК Показатель4,
	|	ЗначенияПоказателя5.Значение КАК Показатель5,
	|	ЗначенияПоказателя6.Значение КАК Показатель6
	|ИЗ
	|	ПоказателиВидаРасчета КАК ПоказателиВидаРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК Показатель1
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателейИсходныйПериодДействия КАК ЗначенияПоказателя1
	|			ПО Показатель1.Показатель = ЗначенияПоказателя1.Показатель
	|		ПО ПоказателиВидаРасчета.ВидРасчета = Показатель1.ВидРасчета
	|			И (Показатель1.НомерПоказателя = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК Показатель2
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателейИсходныйПериодДействия КАК ЗначенияПоказателя2
	|			ПО Показатель2.Показатель = ЗначенияПоказателя2.Показатель
	|		ПО ПоказателиВидаРасчета.ВидРасчета = Показатель2.ВидРасчета
	|			И (Показатель2.НомерПоказателя = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК Показатель3
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателейИсходныйПериодДействия КАК ЗначенияПоказателя3
	|			ПО Показатель3.Показатель = ЗначенияПоказателя3.Показатель
	|		ПО ПоказателиВидаРасчета.ВидРасчета = Показатель3.ВидРасчета
	|			И (Показатель3.НомерПоказателя = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК Показатель4
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателейИсходныйПериодДействия КАК ЗначенияПоказателя4
	|			ПО Показатель4.Показатель = ЗначенияПоказателя4.Показатель
	|		ПО ПоказателиВидаРасчета.ВидРасчета = Показатель4.ВидРасчета
	|			И (Показатель4.НомерПоказателя = 4)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК Показатель5
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателейИсходныйПериодДействия КАК ЗначенияПоказателя5
	|			ПО Показатель5.Показатель = ЗначенияПоказателя5.Показатель
	|		ПО ПоказателиВидаРасчета.ВидРасчета = Показатель5.ВидРасчета
	|			И (Показатель5.НомерПоказателя = 5)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК Показатель6
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателейИсходныйПериодДействия КАК ЗначенияПоказателя6
	|			ПО Показатель6.Показатель = ЗначенияПоказателя6.Показатель
	|		ПО ПоказателиВидаРасчета.ВидРасчета = Показатель6.ВидРасчета
	|			И (Показатель6.НомерПоказателя = 6)
	|ГДЕ
	|	ПоказателиВидаРасчета.ВидРасчета = &ВидРасчета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
	КонецЕсли;

КонецПроцедуры

// Выполняет автоматическое заполнение документа по данным документа и переданным параметрам
// 
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Логическое - удалось ли выполнить автоматическое заполнение документа
//
Функция Автозаполнение(Запрос = НеОпределено, МассивФизлица = Неопределено) Экспорт
	
	Перем ВалютаУпрУчета;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	КурсВалютыУпрУчета = 0;
	ПроведениеРасчетовДополнительный.ПолучитьКурсВалютыУпрУчета(ПериодРегистрации, ПериодРегистрации, ВалютаУпрУчета, КурсВалютыУпрУчета, ВалютаРегламентированногоУчета);
	КурсВалютыУпрУчета = КурсВалютыУпрУчета.Получить(ПериодРегистрации);
	Если КурсВалютыУпрУчета = 0 Тогда
		
		
		МассивРасшифровки = Новый Массив;
		МассивРасшифровки.Добавить("ОткрытьФормуСписка");
		МассивРасшифровки.Добавить("РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом");
		
		Расшифровки = Новый Массив;
		Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", "Заполните курс валют" + " ", МассивРасшифровки));
		
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(" не задан курс валюты управленческого учета (" + ВалютаУпрУчета + ") для расчетов с персоналом",,,Перечисления.ВидыСообщений.Ошибка, Расшифровки);
		
		Возврат Ложь;
	КонецЕсли;
	
	УчетнаяПолитикаПоПерсоналу = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу");
	
	Если Подразделение.Пустая() И Ответственный.Пустая() Тогда
		УсловиеНаПодразделения = "";
	ИначеЕсли Подразделение.Пустая() Тогда
		Если УчетнаяПолитикаПоПерсоналу.РасчетЗарплатыПоОтветственным Тогда
			УсловиеНаПодразделения = " И Работники.Подразделение В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.Подразделение ИЗ РегистрСведений.РасчетчикиЗарплаты.СрезПоследних(&парамНачало) Расчетчики ГДЕ Расчетчики.Пользователь = &парамПользователь)";
		Иначе
			УсловиеНаПодразделения = "";
		КонецЕсли;		
	ИначеЕсли Ответственный.Пустая() Тогда
		УсловиеНаПодразделения = " И Работники.Подразделение В ИЕРАРХИИ (&парамПодразделение)";
	Иначе
		Если УчетнаяПолитикаПоПерсоналу.РасчетЗарплатыПоОтветственным Тогда
			УсловиеНаПодразделения = " И Работники.Подразделение В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.Подразделение ИЗ РегистрСведений.РасчетчикиЗарплаты.СрезПоследних(&парамНачало) Расчетчики ГДЕ Расчетчики.Пользователь = &парамПользователь) И Работники.Подразделение В ИЕРАРХИИ (&парамПодразделение)";
		Иначе
			УсловиеНаПодразделения = " И Работники.Подразделение В ИЕРАРХИИ (&парамПодразделение)";
		КонецЕсли;
	КонецЕсли;
	
	Если Запрос = Неопределено Тогда
		
		Запрос = Новый Запрос;
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("парамНачало",							ПериодРегистрации);
		Запрос.УстановитьПараметр("парамКонец",								КонецМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("парамПользователь",						Ответственный);
		Запрос.УстановитьПараметр("парамПодразделение",						Подразделение);
		Запрос.УстановитьПараметр("парамРегистратор",						Ссылка);
		Запрос.УстановитьПараметр("парамДатаВалютногоУчета",				НачалоМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("парамВидСхемыМотивации",					ВидСхемыМотивации);
		
		Если МассивФизлица = Неопределено Тогда
			
			// Проверим ответственного - является ли он расчетчиком вообще и для заданного 
			// подразделения (если оно задано)
			Если Не Ответственный.Пустая() Тогда
				Если УчетнаяПолитикаПоПерсоналу.РасчетЗарплатыПоОтветственным Тогда
					Если Подразделение.Пустая() Тогда
						Запрос.Текст = 
						"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						|	Расчетчики.Подразделение
						|ИЗ
						|	РегистрСведений.РасчетчикиЗарплаты.СрезПоследних(&парамНачало, ) КАК Расчетчики
						|ГДЕ
						|	Расчетчики.Пользователь = &парамПользователь";
						Если Запрос.Выполнить().Пустой() Тогда
							Сообщить("Ответственный за этот документ не является расчетчиком ни одного из подразделений компании");
							Возврат  Ложь;
						КонецЕсли;
					Иначе
						Запрос.Текст = 
						"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						|	Подразделения.Ссылка
						|ИЗ
						|	Справочник.Подразделения КАК Подразделения
						|ГДЕ
						|	Подразделения.Ссылка В ИЕРАРХИИ(&парамПодразделение)
						|	И Подразделения.Ссылка В ИЕРАРХИИ
						|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
						|				Расчетчики.Подразделение
						|			ИЗ
						|				РегистрСведений.РасчетчикиЗарплаты.СрезПоследних(&парамНачало) КАК Расчетчики
						|			ГДЕ
						|				Расчетчики.Пользователь = &парамПользователь)";
						Если Запрос.Выполнить().Пустой() Тогда
							Сообщить("Ответственный за этот документ не является расчетчиком для выбранного подразделения");
							Возврат  Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	&парамНачало КАК Период,
			|	Работники.ФизЛицо КАК Физлицо,
			|	ИСТИНА КАК Подходит,
			|	Работники.Подразделение КАК Подразделение,
			|	Работники.ГрафикРаботы КАК ГрафикРаботы,
			|	Работники.Должность КАК Должность
			|ПОМЕСТИТЬ ВТСписокРаботников
			|ИЗ
			|	РегистрСведений.Работники.СрезПоследних(&парамНачало, ) КАК Работники
			|ГДЕ
			|	Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)" + УсловиеНаПодразделения + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Работники.Период,
			|	Работники.ФизЛицо,
			|	ВЫБОР
			|		КОГДА Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)" + УсловиеНаПодразделения + "
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ,
			|	Работники.Подразделение,
			|	Работники.ГрафикРаботы,
			|	Работники.Должность
			|ИЗ
			|	РегистрСведений.Работники КАК Работники
			|ГДЕ
			|	Работники.Период > &парамНачало
			|	И Работники.Период <= &парамКонец" + УсловиеНаПодразделения;
			
		Иначе
			
			Запрос.УстановитьПараметр("Физлица", МассивФизлица);
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	&парамНачало КАК Период,
			|	Работники.ФизЛицо КАК Физлицо,
			|	ИСТИНА КАК Подходит,
			|	Работники.Подразделение КАК Подразделение,
			|	Работники.ГрафикРаботы КАК ГрафикРаботы,
			|	Работники.Должность КАК Должность
			|ПОМЕСТИТЬ ВТСписокРаботников
			|ИЗ
			|	РегистрСведений.Работники.СрезПоследних(&парамНачало, ФизЛицо В (&Физлица)) КАК Работники
			|ГДЕ
			|	Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)" + УсловиеНаПодразделения + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Работники.Период,
			|	Работники.ФизЛицо,
			|	ВЫБОР
			|		КОГДА Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)" + УсловиеНаПодразделения + "
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ,
			|	Работники.Подразделение,
			|	Работники.ГрафикРаботы,
			|	Работники.Должность
			|ИЗ
			|	РегистрСведений.Работники КАК Работники
			|ГДЕ
			|	Работники.Период > &парамНачало
			|	И Работники.Период <= &парамКонец
			|	И Работники.ФизЛицо В (&Физлица)" + УсловиеНаПодразделения;
			
		КонецЕсли;
		
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо,
		|	РаботникиОрганизаций.Сотрудник.ВидЗанятости КАК ВидЗанятости,
		|	РаботникиОрганизаций.Сотрудник.ВидДоговора КАК ВидДоговора
		|ПОМЕСТИТЬ РаботникиОрганизаций
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&парамКонец,
		|			Сотрудник.Физлицо В
		|				(ВЫБРАТЬ
		|					СписокРаботников.Физлицо
		|				ИЗ
		|					ВТСписокРаботников КАК СписокРаботников)) КАК РаботникиОрганизаций
		|ГДЕ
		|	ВЫБОР
		|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= &парамКонец
		|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
		|			ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
		|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникСотрудники.Ссылка,
		|	СправочникСотрудники.Физлицо,
		|	СправочникСотрудники.ВидДоговора
		|ПОМЕСТИТЬ СправочникСотрудники
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СправочникСотрудники
		|ГДЕ
		|	СправочникСотрудники.Физлицо В
		|			(ВЫБРАТЬ
		|				СписокРаботников.Физлицо
		|			ИЗ
		|				ВТСписокРаботников КАК СписокРаботников)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
		|	РаботникиОсновноеМесто.Физлицо КАК Физлицо,
		|	1 КАК Приоритет
		|ПОМЕСТИТЬ СписокСотрудников
		|ИЗ
		|	РаботникиОрганизаций КАК РаботникиОсновноеМесто
		|ГДЕ
		|	РаботникиОсновноеМесто.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|
		|СГРУППИРОВАТЬ ПО
		|	РаботникиОсновноеМесто.Физлицо
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(РаботникиСовместительство.Сотрудник),
		|	РаботникиСовместительство.Физлицо,
		|	2
		|ИЗ
		|	РаботникиОрганизаций КАК РаботникиСовместительство
		|ГДЕ
		|	РаботникиСовместительство.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
		|
		|СГРУППИРОВАТЬ ПО
		|	РаботникиСовместительство.Физлицо
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(СотрудникиДУ.Ссылка),
		|	СотрудникиДУ.Физлицо,
		|	ВЫБОР
		|		КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|			ТОГДА 3
		|		КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ
		|ИЗ
		|	СправочникСотрудники КАК СотрудникиДУ
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиДУ.Физлицо,
		|	ВЫБОР
		|		КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|			ТОГДА 3
		|		КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокФизическихЛиц.Физлицо КАК Физлицо,
		|	МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ СписокФизическихЛиц
		|ИЗ
		|	СписокСотрудников КАК СписокФизическихЛиц
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокФизическихЛиц.Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокСотрудников.Сотрудник КАК Сотрудник,
		|	СписокСотрудников.Физлицо КАК Физлицо
		|ПОМЕСТИТЬ Сотрудники
		|ИЗ
		|	СписокСотрудников КАК СписокСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокФизическихЛиц КАК СписокФизическихЛиц
		|		ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
		|			И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Работники.Физлицо КАК Физлицо,
		|	Работники.Период КАК Период,
		|	Работники.Должность КАК Должность,
		|	Работники.Подходит,
		|	Работники.Подразделение,
		|	Работники.ГрафикРаботы,
		|	ЕСТЬNULL(Работники.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
		|	Работники.Физлицо.Наименование КАК ФизлицоНаименование
		|ПОМЕСТИТЬ ВТДвиженияРаботников
		|ИЗ
		|	ВТСписокРаботников КАК Работники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Сотрудники КАК Сотрудники
		|		ПО Работники.Физлицо = Сотрудники.Физлицо
		|ГДЕ
		|	ИСТИНА " + УсловиеНаПодразделения;
		
		Запрос.Выполнить();
		
	Иначе
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		// создаем временную таблицу ВТСписокРаботников с сотрудниками, отобранными по критериям пользователя 
		// 
		// Поля:
		//   Сотрудник
		//   Физлицо
		//   ФИО
		//
		Запрос.Выполнить();
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("парамНачало",							ПериодРегистрации);
		Запрос.УстановитьПараметр("парамКонец",								КонецМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("парамПользователь",						Ответственный);
		Запрос.УстановитьПараметр("парамПодразделение",						Подразделение);
		Запрос.УстановитьПараметр("парамРегистратор",						Ссылка);
		Запрос.УстановитьПараметр("парамДатаВалютногоУчета",				НачалоМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("парамВидСхемыМотивации",					ВидСхемыМотивации);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Работники.Сотрудник КАК Сотрудник,
		|	Работники.Физлицо КАК Физлицо,
		|	ДанныеРаботников.Период КАК Период,
		|	ДанныеРаботников.Подходит,
		|	ДанныеРаботников.Подразделение,
		|	ДанныеРаботников.ГрафикРаботы,
		|	ЕСТЬNULL(ДанныеРаботников.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
		|	ДанныеРаботников.Должность
		|ПОМЕСТИТЬ ВТДвиженияРаботников
		|ИЗ
		|	ВТСписокРаботников КАК Работники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			&парамНачало КАК Период,
		|			Работники.ФизЛицо КАК Физлицо,
		|			ИСТИНА КАК Подходит,
		|			Работники.Подразделение КАК Подразделение,
		|			Работники.ГрафикРаботы КАК ГрафикРаботы,
		|			Работники.Должность КАК Должность
		|		ИЗ
		|			РегистрСведений.Работники.СрезПоследних(
		|					&парамНачало,
		|					Физлицо В
		|						(ВЫБРАТЬ
		|							СписокРаботников.Физлицо
		|						ИЗ
		|							ВТСписокРаботников КАК СписокРаботников)) КАК Работники
		|		ГДЕ
		|			Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			Работники.Период,
		|			Работники.ФизЛицо,
		|			ВЫБОР
		|				КОГДА Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ,
		|			Работники.Подразделение,
		|			Работники.ГрафикРаботы,
		|			Работники.Должность
		|		ИЗ
		|			РегистрСведений.Работники КАК Работники
		|		ГДЕ
		|			Работники.ФизЛицо В
		|					(ВЫБРАТЬ
		|						СписокРаботников.Физлицо
		|					ИЗ
		|						ВТСписокРаботников КАК СписокРаботников)
		|			И Работники.Период > &парамНачало
		|			И Работники.Период <= &парамКонец) КАК ДанныеРаботников
		|		ПО Работники.Сотрудник.Физлицо = ДанныеРаботников.Физлицо
		|ГДЕ ИСТИНА " + УсловиеНаПодразделения;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	ЗаполнятьНачисления = ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений;
	ЗаполнятьУдержания = ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний;
		
	Если ЗаполнятьНачисления ИЛИ ЗаполнятьУдержания Тогда
		
		ЗаполнениеДокументовДополнительный.СформироватьЗапросЗначенийПоказателейУправленческогоУчета(Запрос, ПоВременнойСхемеМотивации);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОсновныеНачисления.ФизЛицо КАК Физлицо,
		|	ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
		|	ОсновныеНачисления.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ЗарегистрированныеНачисления
		|ИЗ
		|	РегистрРасчета.УправленческиеНачисления КАК ОсновныеНачисления
		|ГДЕ
		|	ОсновныеНачисления.ПериодРегистрации = &парамНачало
		|	И ОсновныеНачисления.ФизЛицо В
		|			(ВЫБРАТЬ
		|				СписокРаботников.Физлицо
		|			ИЗ
		|				ВТСписокРаботников КАК СписокРаботников)
		|	И ОсновныеНачисления.Регистратор <> &парамРегистратор
		|	И ОсновныеНачисления.ВидСхемыМотивации = &парамВидСхемыМотивации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо,
		|	ВидРасчета,
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УправленческиеУдержания.ФизЛицо,
		|	УправленческиеУдержания.ВидРасчета
		|ПОМЕСТИТЬ ЗарегистрированныеУдержания
		|ИЗ
		|	РегистрРасчета.УправленческиеУдержания КАК УправленческиеУдержания
		|ГДЕ
		|	УправленческиеУдержания.ПериодРегистрации = &парамНачало
		|	И УправленческиеУдержания.ФизЛицо В
		|			(ВЫБРАТЬ
		|				СписокРаботников.Физлицо
		|			ИЗ
		|				ВТСписокРаботников КАК СписокРаботников)
		|	И УправленческиеУдержания.Регистратор <> &парамРегистратор
		|	И УправленческиеУдержания.ВидСхемыМотивации = &парамВидСхемыМотивации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	УправленческиеУдержания.ФизЛицо,
		|	УправленческиеУдержания.ВидРасчета
		|;
		|";
		
		Если ЗаполнятьНачисления Тогда
			ТекстЗапроса = ТекстЗапроса + "	
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ПлановыеНачисления.Период < &парамНачало
			|			ТОГДА &парамНачало
			|		ИНАЧЕ ПлановыеНачисления.Период
			|	КОНЕЦ КАК Период,
			|	ПлановыеНачисления.ФизЛицо,
			|	ПлановыеНачисления.Действие,
			|	ПлановыеНачисления.ВидРасчета,
			|	ПлановыеНачисления.ПоказательСсылка1,
			|	ПлановыеНачисления.ПоказательСсылка2,
			|	ПлановыеНачисления.ПоказательСсылка3,
			|	ПлановыеНачисления.ПоказательСсылка4,
			|	ПлановыеНачисления.ПоказательСсылка5,
			|	ПлановыеНачисления.ПоказательСсылка6,
			|	ИСТИНА КАК ЭтоНачисление,
			|	ПлановыеНачисления.ВидРасчета.НачисляетсяВЦеломЗаМесяц КАК НачисляетсяВЦеломЗаМесяц,
			|	ПлановыеНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ОсновноеНачисление,
			|	NULL КАК ДокументОснование
			|ПОМЕСТИТЬ НачисленияУдержанияЗаработнойПлаты
			|ИЗ
			|	ПлановыеНачисления КАК ПлановыеНачисления
			|";
			Если ЗаполнятьУдержания Тогда
				ТекстЗапроса = ТекстЗапроса + "	
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА ПлановыеУдержания.Период < &парамНачало
				|			ТОГДА &парамНачало
				|		ИНАЧЕ ПлановыеУдержания.Период
				|	КОНЕЦ КАК Период,
				|	ПлановыеУдержания.ФизЛицо,
				|	ПлановыеУдержания.Действие,
				|	ПлановыеУдержания.ВидРасчета,
				|	ПлановыеУдержания.ПоказательСсылка1,
				|	ПлановыеУдержания.ПоказательСсылка2,
				|	ПлановыеУдержания.ПоказательСсылка3,
				|	ПлановыеУдержания.ПоказательСсылка4,
				|	ПлановыеУдержания.ПоказательСсылка5,
				|	ПлановыеУдержания.ПоказательСсылка6,
				|	ЛОЖЬ,
				|	ИСТИНА,
				|	ЛОЖЬ,
				|	ПлановыеУдержания.ДокументОснование
				|ИЗ
				|	ПлановыеУдержания КАК ПлановыеУдержания
				|";
			КонецЕсли;
		Иначе
			Если ЗаполнятьУдержания Тогда
				ТекстЗапроса = ТекстЗапроса + "	
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА ПлановыеУдержания.Период < &парамНачало
				|			ТОГДА &парамНачало
				|		ИНАЧЕ ПлановыеУдержания.Период
				|	КОНЕЦ КАК Период,
				|	ПлановыеУдержания.ФизЛицо,
				|	ПлановыеУдержания.Действие,
				|	ПлановыеУдержания.ВидРасчета,
				|	ПлановыеУдержания.ПоказательСсылка1,
				|	ПлановыеУдержания.ПоказательСсылка2,
				|	ПлановыеУдержания.ПоказательСсылка3,
				|	ПлановыеУдержания.ПоказательСсылка4,
				|	ПлановыеУдержания.ПоказательСсылка5,
				|	ПлановыеУдержания.ПоказательСсылка6,
				|	ЛОЖЬ КАК ЭтоНачисление,
				|	ИСТИНА КАК НачисляетсяВЦеломЗаМесяц,
				|	ЛОЖЬ КАК ОсновноеНачисление,
				|	ПлановыеУдержания.ДокументОснование
				|ПОМЕСТИТЬ НачисленияУдержанияЗаработнойПлаты
				|ИЗ
				|	ПлановыеУдержания КАК ПлановыеУдержания
				|";
			КонецЕсли;
		КонецЕсли;
		
		НачислениеЗарплатыРаботникамПереопределяемый.ДобавитьОбъединениеДополнительныхНачисленийУдержаний(ТекстЗапроса, ЗаполнятьНачисления, ЗаполнятьУдержания);
		
		ТекстЗапроса = ТекстЗапроса + "	
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЗначенияПоказателей.ПериодДействия) КАК ПериодДействия,
		|	НачисленияУдержания.Период,
		|	ЗначенияПоказателей.Физлицо,
		|	ЗначенияПоказателей.Показатель
		|ПОМЕСТИТЬ ПоследниеЗначенияПоказателей
		|ИЗ
		|	ЗначенияПоказателейИсходныйПериодДействия КАК ЗначенияПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачисленияУдержанияЗаработнойПлаты КАК НачисленияУдержания
		|		ПО ЗначенияПоказателей.Физлицо = НачисленияУдержания.ФизЛицо
		|			И ЗначенияПоказателей.ПериодДействия <= НачисленияУдержания.Период
		|			И (ЗначенияПоказателей.Показатель = НачисленияУдержания.ПоказательСсылка1
		|				ИЛИ ЗначенияПоказателей.Показатель = НачисленияУдержания.ПоказательСсылка2
		|				ИЛИ ЗначенияПоказателей.Показатель = НачисленияУдержания.ПоказательСсылка3
		|				ИЛИ ЗначенияПоказателей.Показатель = НачисленияУдержания.ПоказательСсылка4
		|				ИЛИ ЗначенияПоказателей.Показатель = НачисленияУдержания.ПоказательСсылка5
		|				ИЛИ ЗначенияПоказателей.Показатель = НачисленияУдержания.ПоказательСсылка6)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияПоказателей.Физлицо,
		|	НачисленияУдержания.Период,
		|	ЗначенияПоказателей.Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоследниеЗначенияПоказателей.Период КАК ПериодДействия,
		|	ЗначенияПоказателей.Физлицо,
		|	ЗначенияПоказателей.Подразделение,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ИсходноеЗначение,
		|	ЗначенияПоказателей.Значение,
		|	ЗначенияПоказателей.Валюта,
		|	ЗначенияПоказателей.ВводитсяВВалюте,
		|	ЗначенияПоказателей.КурсВалюты
		|ПОМЕСТИТЬ ЗначенияПоказателей
		|ИЗ
		|	ЗначенияПоказателейИсходныйПериодДействия КАК ЗначенияПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследниеЗначенияПоказателей КАК ПоследниеЗначенияПоказателей
		|		ПО ЗначенияПоказателей.Физлицо = ПоследниеЗначенияПоказателей.Физлицо
		|			И ЗначенияПоказателей.Показатель = ПоследниеЗначенияПоказателей.Показатель
		|			И ЗначенияПоказателей.ПериодДействия = ПоследниеЗначенияПоказателей.ПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаписиПлановыхНачислений.Период КАК Период,
		|	ЗаписиПлановыхНачислений.ФизЛицо КАК ФизЛицо,
		|	ДвиженияРаботников.Сотрудник,
		|	ДвиженияРаботников.Должность,
		|	ДвиженияРаботников.Подходит,
		|	ДвиженияРаботников.Подразделение,
		|	ДвиженияРаботников.ГрафикРаботы,
		|	ДвиженияРаботников.СуммированныйУчетРабочегоВремени
		|ПОМЕСТИТЬ ИзмененияПлановыхНачисленийУдержаний
		|ИЗ
		|	ЗаписиПлановыхНачислений КАК ЗаписиПлановыхНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияРаботников КАК ДвиженияРаботников
		|		ПО ЗаписиПлановыхНачислений.ФизЛицо = ДвиженияРаботников.Физлицо
		|			И ЗаписиПлановыхНачислений.Период >= ДвиженияРаботников.Период
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗаписиПлановыхУдержаний.Период,
		|	ЗаписиПлановыхУдержаний.ФизЛицо,
		|	ДвиженияРаботников.Сотрудник,
		|	ДвиженияРаботников.Должность,
		|	ДвиженияРаботников.Подходит,
		|	ДвиженияРаботников.Подразделение,
		|	ДвиженияРаботников.ГрафикРаботы,
		|	ДвиженияРаботников.СуммированныйУчетРабочегоВремени
		|ИЗ
		|	ЗаписиПлановыхУдержаний КАК ЗаписиПлановыхУдержаний
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияРаботников КАК ДвиженияРаботников
		|		ПО ЗаписиПлановыхУдержаний.ФизЛицо = ДвиженияРаботников.Физлицо
		|			И ЗаписиПлановыхУдержаний.Период >= ДвиженияРаботников.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДвиженияРаботников.Период КАК Период,
		|	ВТДвиженияРаботников.Физлицо КАК Физлицо,
		|	ВТДвиженияРаботников.Сотрудник,
		|	ВТДвиженияРаботников.Должность,
		|	ВТДвиженияРаботников.Подходит,
		|	ВТДвиженияРаботников.Подразделение,
		|	ВТДвиженияРаботников.ГрафикРаботы,
		|	ВТДвиженияРаботников.СуммированныйУчетРабочегоВремени
		|ПОМЕСТИТЬ ЗаписиИзмененияНачисленийУдержаний
		|ИЗ
		|	ВТДвиженияРаботников КАК ВТДвиженияРаботников
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ИзмененияПлановыхНачисленийУдержаний.Период,
		|	ИзмененияПлановыхНачисленийУдержаний.ФизЛицо,
		|	ИзмененияПлановыхНачисленийУдержаний.Сотрудник,
		|	ИзмененияПлановыхНачисленийУдержаний.Должность,
		|	ИзмененияПлановыхНачисленийУдержаний.Подходит,
		|	ИзмененияПлановыхНачисленийУдержаний.Подразделение,
		|	ИзмененияПлановыхНачисленийУдержаний.ГрафикРаботы,
		|	ИзмененияПлановыхНачисленийУдержаний.СуммированныйУчетРабочегоВремени
		|ИЗ
		|	ИзмененияПлановыхНачисленийУдержаний КАК ИзмененияПлановыхНачисленийУдержаний
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаписиИзмененияНачисленийУдержаний.Сотрудник,
		|	ЗаписиИзмененияНачисленийУдержаний.Физлицо,
		|	ВЫБОР
		|		КОГДА НачисленияУдержания.ЭтоНачисление
		|			ТОГДА ЗаписиИзмененияНачисленийУдержаний.Период
		|		ИНАЧЕ НачисленияУдержания.Период
		|	КОНЕЦ КАК Период,
		|	ЗаписиИзмененияНачисленийУдержаний.Период КАК ПериодРаботники,
		|	ЗаписиИзмененияНачисленийУдержаний.Должность,
		|	ЗаписиИзмененияНачисленийУдержаний.Подходит,
		|	ЗаписиИзмененияНачисленийУдержаний.Подразделение,
		|	ЗаписиИзмененияНачисленийУдержаний.ГрафикРаботы,
		|	ЗаписиИзмененияНачисленийУдержаний.СуммированныйУчетРабочегоВремени,
		|	ВЫБОР
		|		КОГДА ЗаписиИзмененияНачисленийУдержаний.Сотрудник.ДатаУвольненияИзКомпании МЕЖДУ &парамНачало И &парамКонец
		|			ТОГДА ЗаписиИзмененияНачисленийУдержаний.Сотрудник.ДатаУвольненияИзКомпании
		|		ИНАЧЕ &парамКонец
		|	КОНЕЦ КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА НачисленияУдержания.ЭтоНачисление
		|					И ЗарегистрированныеНачисления.Физлицо ЕСТЬ NULL 
		|				ИЛИ (НЕ НачисленияУдержания.ЭтоНачисление)
		|					И ЗарегистрированныеУдержания.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК УжеПроведен,
		|	НачисленияУдержания.Период КАК ПериодНачисления,
		|	НачисленияУдержания.Действие,
		|	НачисленияУдержания.ВидРасчета,
		|	НачисленияУдержания.ВидРасчета.СпособРасчета КАК СпособРасчета,
		|	НачисленияУдержания.НачисляетсяВЦеломЗаМесяц КАК НачисляетсяВЦеломЗаМесяц,
		|	НачисленияУдержания.ОсновноеНачисление КАК ОсновноеНачисление,
		|	НачисленияУдержания.ЭтоНачисление КАК ЭтоНачисление,
		|	НачисленияУдержания.ДокументОснование КАК ДокументОснование,
		|	ЗначениеПоказателя1.Значение КАК Показатель1,
		|	ЗначениеПоказателя2.Значение КАК Показатель2,
		|	ЗначениеПоказателя3.Значение КАК Показатель3,
		|	ЗначениеПоказателя4.Значение КАК Показатель4,
		|	ЗначениеПоказателя5.Значение КАК Показатель5,
		|	ЗначениеПоказателя6.Значение КАК Показатель6,
		|	ЗначениеПоказателя1.Валюта КАК Валюта1,
		|	ЗначениеПоказателя2.Валюта КАК Валюта2,
		|	ЗначениеПоказателя3.Валюта КАК Валюта3,
		|	ЗначениеПоказателя4.Валюта КАК Валюта4,
		|	ЗначениеПоказателя5.Валюта КАК Валюта5,
		|	ЗначениеПоказателя6.Валюта КАК Валюта6,
		|	ЗначениеПоказателя1.КурсВалюты КАК КурсВалюты1,
		|	ЗначениеПоказателя2.КурсВалюты КАК КурсВалюты2,
		|	ЗначениеПоказателя3.КурсВалюты КАК КурсВалюты3,
		|	ЗначениеПоказателя4.КурсВалюты КАК КурсВалюты4,
		|	ЗначениеПоказателя5.КурсВалюты КАК КурсВалюты5,
		|	ЗначениеПоказателя6.КурсВалюты КАК КурсВалюты6,
		|	ЗаписиИзмененияНачисленийУдержаний.Сотрудник.Наименование КАК СотрудникНаименование
		|ИЗ
		|	ЗаписиИзмененияНачисленийУдержаний КАК ЗаписиИзмененияНачисленийУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачисленияУдержанияЗаработнойПлаты КАК НачисленияУдержания
		|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначениеПоказателя1
		|			ПО НачисленияУдержания.ФизЛицо = ЗначениеПоказателя1.Физлицо
		|				И НачисленияУдержания.ПоказательСсылка1 = ЗначениеПоказателя1.Показатель
		|				И (ВЫБОР
		|					КОГДА НачисленияУдержания.ПоказательСсылка1.ВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется)
		|						ТОГДА НачисленияУдержания.Период = ЗначениеПоказателя1.ПериодДействия
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначениеПоказателя2
		|			ПО НачисленияУдержания.ФизЛицо = ЗначениеПоказателя2.Физлицо
		|				И НачисленияУдержания.ПоказательСсылка2 = ЗначениеПоказателя2.Показатель
		|				И (ВЫБОР
		|					КОГДА НачисленияУдержания.ПоказательСсылка1.ВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется)
		|						ТОГДА НачисленияУдержания.Период = ЗначениеПоказателя1.ПериодДействия
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначениеПоказателя3
		|			ПО НачисленияУдержания.ФизЛицо = ЗначениеПоказателя3.Физлицо
		|				И НачисленияУдержания.ПоказательСсылка3 = ЗначениеПоказателя3.Показатель
		|				И (ВЫБОР
		|					КОГДА НачисленияУдержания.ПоказательСсылка1.ВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется)
		|						ТОГДА НачисленияУдержания.Период = ЗначениеПоказателя1.ПериодДействия
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначениеПоказателя4
		|			ПО НачисленияУдержания.ФизЛицо = ЗначениеПоказателя4.Физлицо
		|				И НачисленияУдержания.ПоказательСсылка4 = ЗначениеПоказателя4.Показатель
		|				И (ВЫБОР
		|					КОГДА НачисленияУдержания.ПоказательСсылка1.ВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется)
		|						ТОГДА НачисленияУдержания.Период = ЗначениеПоказателя1.ПериодДействия
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначениеПоказателя5
		|			ПО НачисленияУдержания.ФизЛицо = ЗначениеПоказателя5.Физлицо
		|				И НачисленияУдержания.ПоказательСсылка5 = ЗначениеПоказателя5.Показатель
		|				И (ВЫБОР
		|					КОГДА НачисленияУдержания.ПоказательСсылка1.ВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется)
		|						ТОГДА НачисленияУдержания.Период = ЗначениеПоказателя1.ПериодДействия
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначениеПоказателя6
		|			ПО НачисленияУдержания.ФизЛицо = ЗначениеПоказателя6.Физлицо
		|				И НачисленияУдержания.ПоказательСсылка6 = ЗначениеПоказателя6.Показатель
		|				И (ВЫБОР
		|					КОГДА НачисленияУдержания.ПоказательСсылка1.ВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется)
		|						ТОГДА НачисленияУдержания.Период = ЗначениеПоказателя1.ПериодДействия
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ)
		|		ПО ЗаписиИзмененияНачисленийУдержаний.Физлицо = НачисленияУдержания.ФизЛицо
		|			И ЗаписиИзмененияНачисленийУдержаний.Период >= НачисленияУдержания.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗарегистрированныеНачисления КАК ЗарегистрированныеНачисления
		|		ПО ЗаписиИзмененияНачисленийУдержаний.Физлицо = ЗарегистрированныеНачисления.Физлицо
		|			И ЗаписиИзмененияНачисленийУдержаний.Подразделение = ЗарегистрированныеНачисления.Подразделение
		|			И ЗарегистрированныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗарегистрированныеУдержания КАК ЗарегистрированныеУдержания
		|		ПО ЗаписиИзмененияНачисленийУдержаний.Физлицо = ЗарегистрированныеУдержания.ФизЛицо		
		|		И НачисленияУдержания.ВидРасчета = ЗарегистрированныеУдержания.ВидРасчета		
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоНачисление УБЫВ,
		|	СотрудникНаименование,
		|	ЗаписиИзмененияНачисленийУдержаний.Сотрудник,
		|	ПериодРаботники,
		|	ПериодНачисления,
		|	ОсновноеНачисление УБЫВ,
		|	НачисленияУдержания.ВидРасчета";
		
		Запрос.Текст = ТекстЗапроса;
		НачисленияУдержанияВыборка = Запрос.Выполнить().Выбрать();
		
		МассивВалютСНезаданнымКурсом = Новый Соответствие;
		
		// АВТОЗАПОЛНЕНИЕ ТЧ "Начисления"
		Если ЗаполнятьНачисления Тогда
			
			ТЗНачисления = СформироватьТаблицуНачислений(НачисленияУдержанияВыборка, МассивВалютСНезаданнымКурсом);
			
			Если МассивВалютСНезаданнымКурсом.Количество() > 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Если МассивФизлица = Неопределено Тогда 
				//Заполняем по всем сотрудникам
				Начисления.Загрузить(ТЗНачисления);
			Иначе
				Для Каждого СтрокаНачисления Из ТЗНачисления Цикл
					НоваяСтрока = Начисления.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
				КонецЦикла;
			КонецЕсли;
			
			// проверим записи начислений на не пустой фактический период действия
			НаборЗаписейДляПроверки = РегистрыРасчета.УправленческиеНачисления.СоздатьНаборЗаписей();
			Если Ссылка.Пустая() Тогда
				СcылкаОбъекта = Документы.НачислениеЗарплатыРаботникам.ПолучитьСсылку();
				УстановитьСсылкуНового(СcылкаОбъекта);
			Иначе
				СcылкаОбъекта = Ссылка;
			КонецЕсли;
			НаборЗаписейДляПроверки.Отбор.Регистратор.Значение = СcылкаОбъекта;
			
			Для Каждого Строка Из ТЗНачисления Цикл
				Движение = НаборЗаписейДляПроверки.Добавить();
				
				// свойства
				Движение.ПериодРегистрации			= ПериодРегистрации;
				Движение.ПериодДействияНачало		= Строка.ДатаНачала;
				Движение.ПериодДействияКонец		= Строка.ДатаОкончания;
				Движение.ВидРасчета					= Строка.ВидРасчета;
				
				// измерения
				Движение.Физлицо					= Строка.Физлицо;
				
				// реквизиты поддержки графика
				Движение.ГрафикРаботы				= Строка.ГрафикРаботы;
				Движение.ВидУчетаВремени			= ПроведениеРасчетов.ПолучитьВидУчетаВремени(Строка.СпособРасчета, Неопределено, Строка.СуммированныйУчетРабочегоВремени);
			КонецЦикла;
			
			НаборЗаписейДляПроверки.Записать();
			ЗапросПроверки = Новый Запрос;
			ЗапросПроверки.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	УправленческиеНачисления.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрРасчета.УправленческиеНачисления КАК УправленческиеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.УправленческиеНачисления.ФактическийПериодДействия(Регистратор = &парамСсылка) КАК УправленческиеНачисленияФактическийПериодДействия
			|		ПО УправленческиеНачисления.НомерСтроки = УправленческиеНачисленияФактическийПериодДействия.НомерСтроки
			|			И УправленческиеНачисления.Регистратор = УправленческиеНачисленияФактическийПериодДействия.Регистратор
			|ГДЕ
			|	УправленческиеНачисления.Регистратор = &парамСсылка
			|	И УправленческиеНачисленияФактическийПериодДействия.Регистратор ЕСТЬ NULL 
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки УБЫВ";
			
			ЗапросПроверки.УстановитьПараметр("парамСсылка", Ссылка);
			// выполним удаление строк табличной части, которые соответствуют полностью вытесняемым видам расчета
			СтрокиКУдалению = ЗапросПроверки.Выполнить().Выгрузить();
			
			Для Каждого Строка Из СтрокиКУдалению Цикл
				Начисления.Удалить(Строка.НомерСтроки - 1);
			КонецЦикла;
			
			// удалим проверочный набор записей
			НаборЗаписейДляПроверки.Очистить();
			НаборЗаписейДляПроверки.Записать();
		КонецЕсли;
		
		// АВТОЗАПОЛНЕНИЕ ТЧ "Удержания"
		Если ЗаполнятьУдержания Тогда
			
			НачисленияУдержанияВыборка.Сбросить();
			ТЗУдержания = СформироватьТаблицуУдержаний(НачисленияУдержанияВыборка, МассивВалютСНезаданнымКурсом);
			
			Если МассивВалютСНезаданнымКурсом.Количество() > 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Если МассивФизлица = Неопределено Тогда 
				//Заполняем по всем сотрудникам
				Удержания.Загрузить(ТЗУдержания);
			Иначе
				Для Каждого СтрокаУдержания Из ТЗУдержания Цикл
					НоваяСтрока = Удержания.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержания);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// АВТОЗАПОЛНЕНИЕ ТЧ Погашение займов
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПогашениеЗаймовРаботникамиОстатки.ФизЛицо,
		|	ПогашениеЗаймовРаботникамиОстатки.ДоговорЗайма,
		|	ПогашениеЗаймовРаботникамиОстатки.ФизЛицо.Наименование КАК ФизЛицоНаименование
		|ИЗ
		|	РегистрНакопления.ПогашениеЗаймовРаботниками.Остатки(
		|			&парамКонец,
		|			(ДоговорЗайма.НачалоПогашения <= &парамНачало
		|				ИЛИ ДоговорЗайма.ПроцентЗаПользованиеЗаймом > 0)
		|				И Физлицо В
		|					(ВЫБРАТЬ
		|						СписокРаботников.Физлицо
		|					ИЗ
		|						ВТСписокРаботников КАК СписокРаботников)) КАК ПогашениеЗаймовРаботникамиОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПогашениеЗаймовРаботниками КАК ПогашениеЗаймовРаботникамиОбороты
		|		ПО ПогашениеЗаймовРаботникамиОстатки.ФизЛицо = ПогашениеЗаймовРаботникамиОбороты.ФизЛицо
		|			И ПогашениеЗаймовРаботникамиОстатки.ДоговорЗайма = ПогашениеЗаймовРаботникамиОбороты.ДоговорЗайма
		|			И (ПогашениеЗаймовРаботникамиОбороты.Период МЕЖДУ &парамНачало И &парамКонец)
		|			И (ПогашениеЗаймовРаботникамиОбороты.УдержаноИзЗарплаты)
		|ГДЕ
		|	ПогашениеЗаймовРаботникамиОбороты.ФизЛицо ЕСТЬ NULL 
		|	И (ПогашениеЗаймовРаботникамиОстатки.ОсновнойДолгОстаток <> 0
		|			ИЛИ ПогашениеЗаймовРаботникамиОстатки.ПроцентыОстаток <> 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизЛицоНаименование";
		// Установим параметры запроса
		Запрос.УстановитьПараметр("парамНачало" , ПериодРегистрации);
		Запрос.УстановитьПараметр("парамКонец" , КонецМесяца(ПериодРегистрации));
		
		ТЗПогашениеЗаймов = Запрос.Выполнить().Выгрузить();

		Если МассивФизлица = Неопределено Тогда 
			//Заполняем по всем сотрудникам
			ПогашениеЗаймов.Загрузить(ТЗПогашениеЗаймов);
		Иначе
			Для Каждого СтрокаПогашениеЗаймов Из ТЗПогашениеЗаймов Цикл
				НоваяСтрока = ПогашениеЗаймов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПогашениеЗаймов);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура рассчитывает ресурсы для начислений
// и заполняет реквизит Результат соотвтествующих табличных частей документа
//
Функция РассчитатьНачисления(ВыборкаПоШапкеДокумента = Неопределено, ВыборкаПоНачислениям = Неопределено, Физлицо = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	Отказ = Ложь;
	
	//массивы для хранения индексов строк табличных частей,
	//используются для расчета по одному сотруднику
	Если Физлицо = Неопределено Тогда
		МассивИндексыСтрокНачисления = Неопределено;
	Иначе
		МассивИндексыСтрокНачисления = Новый Массив();
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		
		// Перечитаем объект и соберем данные для заполнения наборов записей регистров
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		// позиционируем выборку
		ВыборкаПоШапкеДокумента.Следующий();
		ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(Физлицо).Выбрать();
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	
	// Создадим наборы записей используемых регистров 
	НаборНачисления = РегистрыРасчета.УправленческиеНачисления.СоздатьНаборЗаписей();
	НаборНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	// заполним набор начислений
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, НаборНачисления);
			Если НЕ (Физлицо = Неопределено)  Тогда
				МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Если Отказ Тогда
		Возврат Отказ;
	КонецЕсли; 	
	
	// рассчитываем записи
	// при этом передаем не только набор записей регистра расчета, но и набор записей регисра 
	// накопления со сведениями об отработанном времени
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("УправленческиеНачисления", НаборНачисления, , , , , Начисления, , , МассивИндексыСтрокНачисления,Физлицо,КомментироватьРасчет);
	
	// запишем рассчитанный набор перед расчетом удержаний
	НаборНачисления.Записать(Истина, Истина);
	
	// Удаляем движения
	Для Каждого Набор Из Движения Цикл
		Если ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.УправленческиеНачисления")  Тогда
			
			// Удаляем движения
			Набор.Очистить();
			Набор.Записать();
		КонецЕсли;
	КонецЦикла;	

	Возврат Не Отказ;

КонецФункции //РассчитатьНачисления

Процедура РассчитатьУдержания(ВыборкаПоШапкеДокумента = Неопределено, ВыборкаПоУдержаниям = Неопределено, Физлицо = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	Отказ = Ложь;
	
	Если Физлицо = Неопределено Тогда
		МассивИндексыСтрокУдержания = Неопределено;
	Иначе
		МассивИндексыСтрокУдержания = Новый Массив();
	КонецЕсли;

	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		
		// Перечитаем объект и соберем данные для заполнения наборов записей регистров
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		// позиционируем выборку
		ВыборкаПоШапкеДокумента.Следующий();
		ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(Физлицо).Выбрать();
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	// Создадим наборы записей используемых регистров 
	НаборНачисления = РегистрыРасчета.УправленческиеНачисления.СоздатьНаборЗаписей();
	НаборНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(Физлицо).Выбрать();
	// заполним набор начислений
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, НаборНачисления);
		КонецЕсли;
	КонецЦикла;	
	
	НаборУдержания = РегистрыРасчета.УправленческиеУдержания.СоздатьНаборЗаписей();
	НаборУдержания.Отбор.Регистратор.Значение = Ссылка;
	
	// заполним набор удержаний
	Пока ВыборкаПоУдержаниям.Следующий() Цикл 
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоУдержаниям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, ВыборкаПоШапкеДокумента, НаборУдержания);
			Если НЕ Физлицо = Неопределено Тогда
				МассивИндексыСтрокУдержания.Добавить(ВыборкаПоУдержаниям.НомерСтроки - 1); 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если Отказ Тогда
		Возврат;
	КонецЕсли; 	
	
	// перед тем как начать расчет, сформированные движения надо записать - 
	Для Каждого Набор Из Движения Цикл
		Если ТипЗнч(Набор) = Тип("РегистрРасчетаНаборЗаписей.УправленческиеНачисления") Тогда
			НаборНачисления.Записать();
		КонецЕсли;
	КонецЦикла;
	
	// удержания - в последнюю очередь
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("УправленческиеУдержания",	НаборУдержания,		,,,, Удержания,,, МассивИндексыСтрокУдержания, Физлицо, КомментироватьРасчет);

		
	// Удаляем движения
	Для Каждого Набор Из Движения Цикл
		ПроверяемыйТип = ТипЗнч(Набор);
		Если ПроверяемыйТип = Тип("РегистрРасчетаНаборЗаписей.УправленческиеУдержания")
			Или ПроверяемыйТип = Тип("РегистрРасчетаНаборЗаписей.УправленческиеНачисления")Тогда
			
			Набор.Очистить();
			Набор.Записать();
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры //РассчитатьУдержания

// Процедура рассчитывает ресурсы всех наборов записей и заполняет 
// реквизиты Результат всех табличных частей документа
Процедура РассчитатьВсе(Физлицо = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	Отказ = Ложь;
	
	//Перед вызов процедуры документ должнен быть записан, движения должны быть удалены 
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();		
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(Физлицо).Выбрать();
	ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(Физлицо).Выбрать();
	ЗафиксироватьТранзакцию();
	
	НачисленияРассчитаны = РассчитатьНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Физлицо, КомментироватьРасчет);
	Если НачисленияРассчитаны Тогда
		Записать();
		РассчитатьПогашениеЗаймов(Физлицо);		
		Записать();
		РассчитатьУдержания(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям, Физлицо, КомментироватьРасчет);
	КонецЕсли;

КонецПроцедуры  // Рассчитать

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Функция заполняет табличное поле "РасчетныйЛисток"
//
// Параметры: 
//  ФизЛицо - элемент справочника "ФизическиеЛица"
//  Приказ - приказ
//
// Возвращаемое значение:
//  Табличное поле с запаленным расчетным листком
//
Функция ЗаполнитьТаблицуРасчетногоЛистка(ФизЛицо) Экспорт
	ЗапросРЛ = Новый Запрос;
	ЗапросРЛ.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход); 
	
	// Дополнительный запрос по фактически отработанному времени регистра расчетов "Начисления работников".
	Запрос = Новый Запрос();		
	
	ЗапросРЛ.УстановитьПараметр("ПериодРегистрации", 	   ПериодРегистрации);
	ЗапросРЛ.УстановитьПараметр("КонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	ЗапросРЛ.УстановитьПараметр("ПрошлыйПериодРегистрации", 	   НачалоМесяца(ПериодРегистрации)-1);
	ЗапросРЛ.УстановитьПараметр("КонецПрошлогоПериодаРегистрации", КонецМесяца(НачалоМесяца(ПериодРегистрации)-1));
	ЗапросРЛ.УстановитьПараметр("Ссылка", Ссылка);
	ЗапросРЛ.УстановитьПараметр("Работник", ФизЛицо); 
	
	Запрос.УстановитьПараметр("ПериодРегистрации",			ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериодаРегистрации",	КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Работник", 	   ФизЛицо);		
	
	Модифицированность = Модифицированность();
	
	Если Модифицированность или Не Проведен Тогда
		ВзаиморасчетыПоДокументу =
		"ВЫБРАТЬ
		|	Доходы.Физлицо КАК ФизЛицо,
		|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
		|ИЗ
		|	(ВЫБРАТЬ
		|		НачисленияРаботников.Сотрудник.Физлицо КАК Физлицо,
		|		НачисленияРаботников.Результат КАК СуммаДохода
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникам.Начисления КАК НачисленияРаботников
		|	
		|	ГДЕ";
		Если Не Проведен Тогда
			ВзаиморасчетыПоДокументу = ВзаиморасчетыПоДокументу + "
			|		НачисленияРаботников.Ссылка = &Ссылка И";
		Иначе
			ВзаиморасчетыПоДокументу = ВзаиморасчетыПоДокументу + "
			|		НачисленияРаботников.Ссылка <> &Ссылка И
			|		НачисленияРаботников.Ссылка.ПериодРегистрации = &ПериодРегистрации И";
		КонецЕсли;
		ВзаиморасчетыПоДокументу = ВзаиморасчетыПоДокументу + "
		|		(НачисленияРаботников.Результат <> 0) И
		|		НачисленияРаботников.Сотрудник.Физлицо = &Работник
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗплУдержания.Физлицо,
		|		-(ЗплУдержания.Результат)
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникам.Удержания КАК ЗплУдержания
		|	
		|	ГДЕ";
		Если Не Проведен Тогда
			ВзаиморасчетыПоДокументу = ВзаиморасчетыПоДокументу + "
			|		ЗплУдержания.Ссылка = &Ссылка И";
		Иначе
			ВзаиморасчетыПоДокументу = ВзаиморасчетыПоДокументу + "
			|		ЗплУдержания.Ссылка <> &Ссылка И
			|		ЗплУдержания.Ссылка.ПериодРегистрации = &ПериодРегистрации И";
		КонецЕсли;
		ВзаиморасчетыПоДокументу = ВзаиморасчетыПоДокументу + "
		|		(ЗплУдержания.Результат <> 0) И
		|		ЗплУдержания.Физлицо = &Работник
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗплЗаймы.ФизЛицо,
		|		-(ЗплЗаймы.ПогашеноЗайма)
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникам.ПогашениеЗаймов КАК ЗплЗаймы
		|	
		|	ГДЕ";
		Если Не Проведен Тогда
			ВзаиморасчетыПоДокументу = ВзаиморасчетыПоДокументу + "
			|		ЗплЗаймы.Ссылка = &Ссылка И";
		Иначе
			ВзаиморасчетыПоДокументу = ВзаиморасчетыПоДокументу + "
			|		ЗплЗаймы.Ссылка <> &Ссылка И
			|		ЗплЗаймы.Ссылка.ПериодРегистрации = &ПериодРегистрации И";
		КонецЕсли;
		ВзаиморасчетыПоДокументу = ВзаиморасчетыПоДокументу + "
		|		(ЗплЗаймы.ПогашеноЗайма <> 0) И
		|		ЗплЗаймы.Физлицо = &Работник) КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Физлицо";
	КонецЕсли;
	
	// документ записан и проведен, построим отчет по регистрам
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачисленияУдержания.ВидДвижения,
	|	НачисленияУдержания.Регистратор КАК Регистратор,
	|	НачисленияУдержания.ФизЛицо КАК ФизЛицо,
	|	НачисленияУдержания.ВидРасчета,
	|	НачисленияУдержания.ПорядокВидаРасчета,
	|	НачисленияУдержания.НомерСтроки КАК НомерСтроки,
	|	НачисленияУдержания.ПериодДействияНачало,
	|	НачисленияУдержания.ПериодДействияКонец,
	|	НачисленияУдержания.ОтработаноДней КАК ОтработаноДней,
	|	НачисленияУдержания.ОтработаноЧасов КАК ОтработаноЧасов,
	|	ЕСТЬNULL(НачисленияУдержания.Начисления,0) КАК Начисления,
	|	ЕСТЬNULL(НачисленияУдержания.Удержания,0) КАК Удержания,
	|	ЕСТЬNULL(НачисленияУдержания.СуммаУпрНачальныйОстаток,0) КАК СуммаУпрНачальныйОстаток,
	|	ЕСТЬNULL(НачисленияУдержания.СуммаУпрКонечныйОстаток,0) КАК СуммаУпрКонечныйОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		""Начисления"" КАК ВидДвижения,
	|		УправленческиеНачисления.ПериодРегистрации КАК ПериодРегистрации,
	|		УправленческиеНачисления.Регистратор КАК Регистратор,
	|		УправленческиеНачисления.ФизЛицо КАК ФизЛицо,
	|		УправленческиеНачисления.ВидРасчета.Наименование КАК ВидРасчета,
	|		УправленческиеНачисления.ВидРасчета.Код КАК ПорядокВидаРасчета,
	|		УправленческиеНачисления.НомерСтроки КАК НомерСтроки,
	|		УправленческиеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|		УправленческиеНачисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|		УправленческиеНачисления.ОтработаноДней КАК ОтработаноДней,
	|		УправленческиеНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|		УправленческиеНачисления.Результат КАК Начисления,
	|		NULL КАК Удержания,
	|		NULL КАК СуммаУпрНачальныйОстаток,
	|		NULL КАК СуммаУпрКонечныйОстаток
	|	ИЗ
	|		РегистрРасчета.УправленческиеНачисления КАК УправленческиеНачисления
	|	
	|ГДЕ
	|		УправленческиеНачисления.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И УправленческиеНачисления.ФизЛицо = &Работник";
	Если Модифицированность Тогда 
		ТекстЗапроса = ТекстЗапроса + "
		|		И УправленческиеНачисления.Регистратор <> &Ссылка";
	ИначеЕсли Не Проведен Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|			
		|	ОБЪЕДИНИТЬ
		|
		|	ВЫБРАТЬ
		|		""Начисления"",
		|		&ПериодРегистрации,
		|		&Ссылка КАК Регистратор,
		|		НачислениеЗарплатыРаботникамНачисления.Сотрудник.ФизЛицо,
		|		НачислениеЗарплатыРаботникамНачисления.ВидРасчета.Наименование,
		|		НачислениеЗарплатыРаботникамНачисления.ВидРасчета.Код,
		|		НачислениеЗарплатыРаботникамНачисления.НомерСтроки,
		|		НачислениеЗарплатыРаботникамНачисления.ДатаНачала,
		|		НачислениеЗарплатыРаботникамНачисления.ДатаОкончания,
		|		НачислениеЗарплатыРаботникамНачисления.ОтработаноДней,
		|		НачислениеЗарплатыРаботникамНачисления.ОтработаноЧасов,
		|		НачислениеЗарплатыРаботникамНачисления.Результат,
		|		NULL,
		|		NULL,
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникам.Начисления КАК НачислениеЗарплатыРаботникамНачисления
		|	
		|ГДЕ
		|		НачислениеЗарплатыРаботникамНачисления.Сотрудник.ФизЛицо = &Работник
		|		И НачислениеЗарплатыРаботникамНачисления.Ссылка = &Ссылка";		
		
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""Удержания"",
	|		УправленческиеУдержания.ПериодРегистрации,
	|		УправленческиеУдержания.Регистратор,
	|		УправленческиеУдержания.ФизЛицо,
	|		УправленческиеУдержания.ВидРасчета.Наименование,
	|		УправленческиеУдержания.ВидРасчета.Код КАК ПорядокВидаРасчета,
	|		УправленческиеУдержания.НомерСтроки КАК НомерСтроки,
	|		УправленческиеУдержания.БазовыйПериодНачало,
	|		УправленческиеУдержания.БазовыйПериодКонец,
	|		NULL,
	|		NULL,
	|		NULL,
	|		УправленческиеУдержания.Результат,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрРасчета.УправленческиеУдержания КАК УправленческиеУдержания
	|	
	|	ГДЕ
	|		УправленческиеУдержания.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И УправленческиеУдержания.ФизЛицо = &Работник";
	Если Модифицированность Тогда 
		ТекстЗапроса = ТекстЗапроса + "
		|		И УправленческиеУдержания.Регистратор <> &Ссылка";
	ИначеЕсли Не Проведен Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		""Удержания"",
		|		&ПериодРегистрации,
		|		&Ссылка,
		|		НачислениеЗарплатыРаботникамУдержания.ФизЛицо,
		|		НачислениеЗарплатыРаботникамУдержания.ВидРасчета.Наименование,
		|		НачислениеЗарплатыРаботникамУдержания.ВидРасчета.Код КАК ПорядокВидаРасчета,
		|		НачислениеЗарплатыРаботникамУдержания.НомерСтроки КАК НомерСтроки,
		|		НачислениеЗарплатыРаботникамУдержания.ДатаНачала,
		|		НачислениеЗарплатыРаботникамУдержания.ДатаОкончания,
		|		NULL,
		|		NULL,
		|		NULL,
		|		НачислениеЗарплатыРаботникамУдержания.Результат,
		|		NULL,
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникам.Удержания КАК НачислениеЗарплатыРаботникамУдержания				
		|	
		|	ГДЕ
		|		НачислениеЗарплатыРаботникамУдержания.ФизЛицо = &Работник
		|		И НачислениеЗарплатыРаботникамУдержания.Ссылка = &Ссылка";	
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""Удержания"",
	|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботниками.Период, МЕСЯЦ),
	|		ПогашениеЗаймовРаботниками.Регистратор,
	|		ПогашениеЗаймовРаботниками.ФизЛицо,
	|		""Погашение займа"",
	|		NULL,
	|		ПогашениеЗаймовРаботниками.НомерСтроки,
	|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботниками.Период, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ПогашениеЗаймовРаботниками.Период, МЕСЯЦ),
	|		NULL,
	|		NULL,
	|		NULL,
	|		ПогашениеЗаймовРаботниками.ОсновнойДолг + ПогашениеЗаймовРаботниками.Проценты,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.ПогашениеЗаймовРаботниками КАК ПогашениеЗаймовРаботниками
	|	
	|	ГДЕ
	|		ПогашениеЗаймовРаботниками.ВидДвижения = &Расход 	
	|		И ПогашениеЗаймовРаботниками.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И ПогашениеЗаймовРаботниками.УдержаноИзЗарплаты		
	|		И ПогашениеЗаймовРаботниками.ФизЛицо = &Работник";
	Если Модифицированность Тогда 
		ТекстЗапроса = ТекстЗапроса +  "
		|		И ПогашениеЗаймовРаботниками.Регистратор <> &Ссылка";
	ИначеЕсли Не Проведен Тогда
		ТекстЗапроса = ТекстЗапроса + "			
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		""Удержания"",
		|		НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
		|		&Ссылка,
		|		НачислениеЗарплатыРаботникамПогашениеЗаймов.ФизЛицо,
		|		""Погашение займа"",
		|		NULL,
		|		НачислениеЗарплатыРаботникамПогашениеЗаймов.НомерСтроки,
		|		НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
		|		КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
		|		NULL,
		|		NULL,
		|		NULL,
		|		НачислениеЗарплатыРаботникамПогашениеЗаймов.ПогашеноЗайма,
		|		NULL,
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникам.ПогашениеЗаймов КАК НачислениеЗарплатыРаботникамПогашениеЗаймов
		|	
		|	ГДЕ
		|		НачислениеЗарплатыРаботникамПогашениеЗаймов.ФизЛицо = &Работник
		|		И НачислениеЗарплатыРаботникамПогашениеЗаймов.Ссылка = &Ссылка";			
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|";	
	Если Модифицированность Тогда 
		
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБРАТЬ
		|		""Взаиморасчеты"",
		|		НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
		|		NULL,
		|		Взаиморасчеты.Физлицо,
		|		""Выплата"",
		|		NULL,
		|		NULL,
		|		НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
		|		КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
		|		NULL,
		|		NULL,
		|		NULL,
		|		СУММА(Взаиморасчеты.СуммаУпрРасход),
		|		СУММА(Взаиморасчеты.СуммаУпрНачальныйОстаток),
		|		СУММА(Взаиморасчеты.СуммаУпрКонечныйОстаток)
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ВзаиморасчетыСРаботникамиОстаткиИОбороты.Физлицо,
		|			NULL КАК СуммаУпрРасход,
		|			ВзаиморасчетыСРаботникамиОстаткиИОбороты.СуммаУпрКонечныйОстаток КАК СуммаУпрНачальныйОстаток,
		|			ВзаиморасчетыСРаботникамиОстаткиИОбороты.СуммаУпрКонечныйОстаток КАК СуммаУпрКонечныйОстаток					
		|		ИЗ 			
		|			РегистрНакопления.ВзаиморасчетыСРаботниками.ОстаткиИОбороты(&ПрошлыйПериодРегистрации, &КонецПрошлогоПериодаРегистрации, Месяц, , Физлицо = &Работник) КАК ВзаиморасчетыСРаботникамиОстаткиИОбороты
		|
		|		ОБЪЕДИНИТЬ ВСЕ		
		|
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ			
		|			ВзаиморасчетыПоДокументу.Физлицо,
		|			NULL,
		|			NULL,
		|			ВзаиморасчетыПоДокументу.СуммаДохода
		|		ИЗ 						
		|			(" + ВзаиморасчетыПоДокументу + ") КАК ВзаиморасчетыПоДокументу
		|			
		|		ОБЪЕДИНИТЬ ВСЕ
		|
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ВзаиморасчетыСРаботникамиОстаткиИОборотыТекПериода.Физлицо,
		|			ВзаиморасчетыСРаботникамиОстаткиИОборотыТекПериода.СуммаУпрРасход,
		|			NULL,
		|			NULL
		|		ИЗ
		|			РегистрНакопления.ВзаиморасчетыСРаботниками.ОстаткиИОбороты(&ПериодРегистрации, &КонецПериодаРегистрации, Месяц, , Физлицо = &Работник)КАК ВзаиморасчетыСРаботникамиОстаткиИОборотыТекПериода
		|) КАК Взаиморасчеты
		|	СГРУППИРОВАТЬ ПО Взаиморасчеты.Физлицо) КАК НачисленияУдержания";
	ИначеЕсли Не Проведен Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		""Взаиморасчеты"",
		|		НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
		|		NULL,
		|		Взаиморасчеты.Физлицо,
		|		""Выплата"",
		|		NULL,
		|		NULL,
		|		НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
		|		КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
		|		NULL,
		|		NULL,
		|		NULL,
		|		СУММА(Взаиморасчеты.СуммаУпрРасход),
		|		СУММА(Взаиморасчеты.СуммаУпрНачальныйОстаток),
		|		СУММА(Взаиморасчеты.СуммаУпрКонечныйОстаток)
		|	ИЗ
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ВзаиморасчетыСРаботникамиОстаткиИОбороты.Физлицо,
		|			ВзаиморасчетыСРаботникамиОстаткиИОбороты.СуммаУпрРасход КАК СуммаУпрРасход,
		|			ВзаиморасчетыСРаботникамиОстаткиИОбороты.СуммаУпрНачальныйОстаток КАК СуммаУпрНачальныйОстаток,
		|			ВзаиморасчетыСРаботникамиОстаткиИОбороты.СуммаУпрКонечныйОстаток КАК СуммаУпрКонечныйОстаток
		|		ИЗ 			
		|			РегистрНакопления.ВзаиморасчетыСРаботниками.ОстаткиИОбороты(&ПериодРегистрации, &КонецПериодаРегистрации, Месяц, , Физлицо = &Работник) КАК ВзаиморасчетыСРаботникамиОстаткиИОбороты
		|
		|		ОБЪЕДИНИТЬ ВСЕ		
		|
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ			
		|			ВзаиморасчетыПоДокументу.Физлицо,
		|			NULL,
		|			NULL,
		|			ВзаиморасчетыПоДокументу.СуммаДохода
		|		ИЗ 						
		|			(" + ВзаиморасчетыПоДокументу + ") КАК ВзаиморасчетыПоДокументу) КАК Взаиморасчеты
		|	СГРУППИРОВАТЬ ПО Взаиморасчеты.Физлицо) КАК НачисленияУдержания";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБРАТЬ
		|		""Взаиморасчеты"",
		|		НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботникамиОстаткиИОбороты.Период, МЕСЯЦ),
		|		NULL,
		|		ВзаиморасчетыСРаботникамиОстаткиИОбороты.Физлицо,
		|		""Выплата"",
		|		NULL,
		|		NULL,
		|		НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботникамиОстаткиИОбороты.Период, МЕСЯЦ),
		|		КОНЕЦПЕРИОДА(ВзаиморасчетыСРаботникамиОстаткиИОбороты.Период, МЕСЯЦ),
		|		NULL,
		|		NULL,
		|		NULL,
		|		ВзаиморасчетыСРаботникамиОстаткиИОбороты.СуммаУпрРасход,
		|		ВзаиморасчетыСРаботникамиОстаткиИОбороты.СуммаУпрНачальныйОстаток,
		|		ВзаиморасчетыСРаботникамиОстаткиИОбороты.СуммаУпрКонечныйОстаток
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыСРаботниками.ОстаткиИОбороты(&ПериодРегистрации, &КонецПериодаРегистрации, Месяц, , Физлицо = &Работник) КАК ВзаиморасчетыСРаботникамиОстаткиИОбороты) КАК НачисленияУдержания";			
	КонецЕсли;
	
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодРегистрации,
	|	НачисленияУдержания.ПорядокВидаРасчета,
	|	НачисленияУдержания.ПериодДействияНачало
	|
	|ИТОГИ 	МАКСИМУМ(ОтработаноДней), 
	|		МАКСИМУМ(ОтработаноЧасов), 
	|		СУММА(Начисления), 
	|		СУММА(Удержания), 
	|		СУММА(СуммаУпрНачальныйОстаток), 
	|		СУММА(СуммаУпрКонечныйОстаток),
	|	    МИНИМУМ(ПериодДействияНачало),
	|	    МАКСИМУМ(ПериодДействияКонец)
	|	ПО
	|		ФизЛицо";
	
	ЗапросРЛ.Текст = ТекстЗапроса;		
	
	РезультатЗапроса = ЗапросРЛ.Выполнить();
	
	СтруктураПоискаПоФизЛицу = Новый Структура("ФизЛицо",ФизЛицо);
	
	Макет = ПолучитьМакет("РасчетныйЛисток");
	
	ОбластьЗаголовокТЧ		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьНачисленоУдержано= Макет.ПолучитьОбласть("НачисленоУдержано");
	ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьПодвал			= Макет.ПолучитьОбласть("Подвал");
	
	КолонкаНачислено = 2;
	КолонкаПериодНачислено = 3;
	КолонкаОтработаноДней = 5;
	КолонкаОтработаноЧасов = 6;
	КолонкаСуммаНачислено = 7;
	КолонкаУдержано = 9;
	КолонкаПериодУдержано = 12;
	КолонкаСуммаУдержано = 14;
	
	ВсегоНачисления = 0; КоличествоНачислений = 0;
	ВсегоУдержания = 0; КоличествоУдержаний  = 0;
		
	НеНайденыЗаписиВЗапросе	= Истина;
	
	// В этот табличный документ будет собираться данные для РЛ до проверки на возвможность его вывода (по количеству строк)
	ВременныйТабличныйДокумент = Новый ТабличныйДокумент;		
	
	ВыборкаПоФЛ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоФЛ.Следующий() Цикл
		
		НеНайденыЗаписиВЗапросе	= Ложь;
		
		ТекстПериода  	   = Формат(ПериодРегистрации, "ДФ = 'ММММ гггг ''г.'''");
		
		// Очистим временный табличный документ
		ВременныйТабличныйДокумент.Очистить();
		
		КоличествоНачислений = 0;
		КоличествоУдержаний  = 0;
		
		ВсегоНачисления                      = ВыборкаПоФЛ.Начисления;
		ВсегоУдержания                       = ВыборкаПоФЛ.Удержания;
		
		// Данные для подвала
		СуммаНаНачалоПериода = ВыборкаПоФЛ.СуммаУпрНачальныйОстаток;
		СуммаНаКонецПериода  = ВыборкаПоФЛ.СуммаУпрКонечныйОстаток;			
		
		ОбластьВсего.Параметры.ВсегоНачисления = ВыборкаПоФЛ.Начисления;
		ОбластьВсего.Параметры.ВсегоУдержания  = ВыборкаПоФЛ.Удержания;
		
		Если СуммаНаНачалоПериода = NULL Тогда
			
			ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = "Долг за предприятием на начало месяца: ";
			ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = 0;
			
		Иначе
			
			Если СуммаНаНачалоПериода >= 0  Тогда
				ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = "Долг за предприятием на начало месяца: ";
				ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = СуммаНаНачалоПериода;
			Иначе
				ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = "Долг за работником на начало месяца: ";
				ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = 0 - СуммаНаНачалоПериода;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СуммаНаКонецПериода = NULL Тогда
			
			ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за работником на конец месяца: ";
			ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = 0;
			
		Иначе
			
			Если СуммаНаКонецПериода >= 0  Тогда
				ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за предприятием на конец месяца: ";
				ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = СуммаНаКонецПериода;
			Иначе
				ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за работником на конец месяца: ";
				ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = 0 - СуммаНаКонецПериода;
			КонецЕсли;
			
		КонецЕсли; 
		
		
		ВременныйТабличныйДокумент.Вывести(ОбластьЗаголовокТЧ);
		ВременныйТабличныйДокумент.Вывести(ОбластьНачисленоУдержано);
		
		ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаПоНС = ВыборкаПоФЛ.Выбрать();
		Пока ВыборкаПоНС.Следующий() Цикл
			Если ВыборкаПоНС.ВидРасчета = "Выплата"  и ВыборкаПоНС.Удержания = 0 Тогда
				Продолжить
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоНС.ПериодДействияКонец) Тогда
				ДатаОкончанияПериода = ВыборкаПоНС.ПериодДействияКонец
			Иначе
				ДатаОкончанияПериода = КонецМесяца(ВыборкаПоНС.ПериодДействияНачало);
			КонецЕсли; 
			
			Если ВыборкаПоНС.Начисления = NULL Или ВыборкаПоНС.ВидДвижения = "Удержания" ИЛИ ВыборкаПоНС.ВидДвижения = "Взаиморасчеты" Тогда
				
				НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = ВыборкаПоНС.ВидРасчета;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = УправлениеОтчетамиЗК.ОписаниеПериода(ВыборкаПоНС.ПериодДействияНачало,ДатаОкончанияПериода);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(ВыборкаПоНС.Удержания,"ЧЦ=15; ЧДЦ=2");
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
				КоличествоУдержаний = КоличествоУдержаний + 1;
				
			Иначе
				
				НомерСтроки = ВысотаТаблицы + КоличествоНачислений;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Текст = ВыборкаПоНС.ВидРасчета;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).Текст = УправлениеОтчетамиЗК.ОписаниеПериода(ВыборкаПоНС.ПериодДействияНачало,ДатаОкончанияПериода);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаОтработаноДней - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноДней).Текст = ВыборкаПоНС.ОтработаноДней;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноЧасов).Текст = ВыборкаПоНС.ОтработаноЧасов;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).Текст = Формат(ВыборкаПоНС.Начисления,"ЧЦ=15; ЧДЦ=2");
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаУдержано - 1).Объединить();
				КоличествоНачислений = КоличествоНачислений + 1;
			КонецЕсли; 
			
		КонецЦикла;
		
		// если документ модифицирован, то обойдем все табличные части
		Если Модифицированность  Тогда
			// выведем начисления
			Строки = Начисления.НайтиСтроки(СтруктураПоискаПоФизЛицу);
			Для Каждого СтрокаНачислений Из Строки Цикл
				НомерСтроки = ВысотаТаблицы + КоличествоНачислений;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Текст = СтрокаНачислений.ВидРасчета;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).Текст = УправлениеОтчетамиЗК.ОписаниеПериода(СтрокаНачислений.ДатаНачала,СтрокаНачислений.ДатаОкончания);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаОтработаноДней - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноДней).Текст = СтрокаНачислений.ОтработаноДней;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноЧасов).Текст = СтрокаНачислений.ОтработаноЧасов;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).Текст = Формат(СтрокаНачислений.Результат,"ЧЦ=15; ЧДЦ=2");
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаУдержано - 1).Объединить();
				КоличествоНачислений = КоличествоНачислений + 1;
				ВсегоНачисления = ВсегоНачисления + СтрокаНачислений.Результат;
				
				ОбластьВсего.Параметры.ВсегоНачисления = ВсегоНачисления;
				
			КонецЦикла;
			
			// выведем удержания
			СтрокиУдержано = Удержания.НайтиСтроки(СтруктураПоискаПоФизЛицу);
			Для Каждого СтрокаУдержано Из СтрокиУдержано Цикл
				НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = СтрокаУдержано.ВидРасчета;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = УправлениеОтчетамиЗК.ОписаниеПериода(СтрокаУдержано.ДатаНачала,СтрокаУдержано.ДатаОкончания);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(СтрокаУдержано.Результат,"ЧЦ=15; ЧДЦ=2");
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
				КоличествоУдержаний = КоличествоУдержаний + 1;					
				ВсегоУдержания = ВсегоУдержания + СтрокаУдержано.Результат;
				
				ОбластьВсего.Параметры.ВсегоУдержания = ВсегоУдержания;
				
			КонецЦикла;
			
			// выведем займы
			СтрокиЗаймы = ПогашениеЗаймов.НайтиСтроки(СтруктураПоискаПоФизЛицу);
			Для Каждого СтрокаЗайма Из СтрокиЗаймы Цикл
				НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = "Погашение займа";
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = УправлениеОтчетамиЗК.ОписаниеПериода(НачалоМесяца(ПериодРегистрации),КонецМесяца(ПериодРегистрации));
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(СтрокаЗайма.ПогашеноЗайма,"ЧЦ=15; ЧДЦ=2");
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
				КоличествоУдержаний = КоличествоУдержаний + 1;					
				
				ВсегоУдержания = ВсегоУдержания + СтрокаЗайма.ПогашеноЗайма;
				
				ОбластьВсего.Параметры.ВсегоУдержания = ВсегоУдержания;
				
			КонецЦикла;
			
			СуммаНаКонецПериода  = СуммаНаНачалоПериода + ВсегоНачисления - ВсегоУдержания;
			
			Если СуммаНаКонецПериода >= 0  Тогда
				ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за предприятием на конец месяца: ";
				ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = СуммаНаКонецПериода;
			Иначе
				ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за работником на конец месяца: ";
				ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = 0 - СуммаНаКонецПериода;
			КонецЕсли;					
			
		КонецЕсли;
		
		КолвоРасчетов = Макс(КоличествоНачислений,КоличествоУдержаний);
		
		Если КолвоРасчетов > 0 Тогда
			РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент,ВысотаТаблицы,КолвоРасчетов)
		КонецЕсли; 
		
		ВременныйТабличныйДокумент.Вывести(ОбластьВсего);
		ВременныйТабличныйДокумент.Вывести(ОбластьПодвал);			
		
	КонецЦикла;			
	
	// документ модифицирован и по запросу ничего не получили
	// обойдем табличные части по данному физлицу
	Если НеНайденыЗаписиВЗапросе и Модифицированность Тогда
		
		
		ТекстПериода  	   = Формат(ПериодРегистрации, "ДФ = 'ММММ гггг ''г.'''");
		
		// Очистим временный табличный документ
		ВременныйТабличныйДокумент.Очистить();
		
		КоличествоНачислений = 0;
		КоличествоУдержаний  = 0;
		
		// Данные для подвала
		СуммаНаНачалоПериода = 0;
		СуммаНаКонецПериода  = 0;				
		
		ВременныйТабличныйДокумент.Вывести(ОбластьЗаголовокТЧ);
		ВременныйТабличныйДокумент.Вывести(ОбластьНачисленоУдержано);
		
		ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы + 1;
		
		
		// обнулим итоги
		ВсегоНачисления	= 0;
		ВсегоУдержания	= 0;
		
		// выведем начисления
		Строки = Начисления.НайтиСтроки(СтруктураПоискаПоФизЛицу);
		Для Каждого СтрокаНачислений Из Строки Цикл
			НомерСтроки = ВысотаТаблицы + КоличествоНачислений;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Текст = СтрокаНачислений.ВидРасчета;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).Текст = УправлениеОтчетамиЗК.ОписаниеПериода(СтрокаНачислений.ДатаНачала,СтрокаНачислений.ДатаОкончания);
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаОтработаноДней - 1).Объединить();
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноДней).Текст = СтрокаНачислений.ОтработаноДней;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноЧасов).Текст = СтрокаНачислений.ОтработаноЧасов;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).Текст = Формат(СтрокаНачислений.Результат,"ЧЦ=15; ЧДЦ=2");
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаУдержано - 1).Объединить();
			КоличествоНачислений = КоличествоНачислений + 1;
			Если ЗначениеЗаполнено(ОбластьВсего.Параметры.ВсегоНачисления) Тогда
				ОбластьВсего.Параметры.ВсегоНачисления = ОбластьВсего.Параметры.ВсегоНачисления + СтрокаНачислений.Результат;
			Иначе
				ОбластьВсего.Параметры.ВсегоНачисления = СтрокаНачислений.Результат;
			КонецЕсли;
			ВсегоНачисления = ВсегоНачисления + СтрокаНачислений.Результат;
			
		КонецЦикла;
		
		// выведем начисления
		СтрокиУдержано = Удержания.НайтиСтроки(СтруктураПоискаПоФизЛицу);
		Для Каждого СтрокаУдержано Из СтрокиУдержано Цикл
			НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = СтрокаУдержано.ВидРасчета;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = УправлениеОтчетамиЗК.ОписаниеПериода(СтрокаУдержано.ДатаНачала,СтрокаУдержано.ДатаОкончания);
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(СтрокаУдержано.Результат,"ЧЦ=15; ЧДЦ=2");
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
			КоличествоУдержаний = КоличествоУдержаний + 1;					
			ВсегоУдержания = ВсегоУдержания + СтрокаУдержано.Результат;
			
			Если ЗначениеЗаполнено(ОбластьВсего.Параметры.ВсегоУдержания) Тогда
				ОбластьВсего.Параметры.ВсегоУдержания = ОбластьВсего.Параметры.ВсегоУдержания + СтрокаУдержано.Результат;
			Иначе
				ОбластьВсего.Параметры.ВсегоУдержания = СтрокаУдержано.Результат;
			КонецЕсли;									
			
		КонецЦикла;
		
		СтрокиЗаймы = ПогашениеЗаймов.НайтиСтроки(СтруктураПоискаПоФизЛицу);
		Для Каждого СтрокаЗайма Из СтрокиЗаймы Цикл
			НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = "Погашение займа";
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = УправлениеОтчетамиЗК.ОписаниеПериода(НачалоМесяца(ПериодРегистрации),КонецМесяца(ПериодРегистрации));
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(СтрокаЗайма.ПогашеноЗайма,"ЧЦ=15; ЧДЦ=2");
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
			КоличествоУдержаний = КоличествоУдержаний + 1;					
			ВсегоУдержания = ВсегоУдержания + СтрокаЗайма.ПогашеноЗайма;
			
			Если ЗначениеЗаполнено(ОбластьВсего.Параметры.ВсегоУдержания) Тогда
				ОбластьВсего.Параметры.ВсегоУдержания = ОбластьВсего.Параметры.ВсегоУдержания + СтрокаЗайма.ПогашеноЗайма;
			Иначе
				ОбластьВсего.Параметры.ВсегоУдержания = СтрокаЗайма.ПогашеноЗайма;
			КонецЕсли;									
			
		КонецЦикла;
		
		СуммаНаКонецПериода  = ВсегоНачисления - ВсегоУдержания;
		
		Если СуммаНаКонецПериода >= 0  Тогда
			ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за предприятием на конец месяца: ";
			ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = СуммаНаКонецПериода;
		Иначе
			ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за работником на конец месяца: ";
			ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = 0 - СуммаНаКонецПериода;
		КонецЕсли;					
		
		КолвоРасчетов = Макс(КоличествоНачислений,КоличествоУдержаний);
		
		Если КолвоРасчетов > 0 Тогда
			РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент,ВысотаТаблицы,КолвоРасчетов)
		КонецЕсли; 
		
		ВременныйТабличныйДокумент.Вывести(ОбластьВсего);
		ВременныйТабличныйДокумент.Вывести(ОбластьПодвал);
		
	КонецЕсли;
	
	Возврат ВременныйТабличныйДокумент;
	
КонецФункции //ЗаполнитьТаблицуРасчетногоЛистка

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеЗарплатыРаботникам.Дата,
	|	НачислениеЗарплатыРаботникам.ПериодРегистрации,
	|	НачислениеЗарплатыРаботникам.ПоВременнойСхемеМотивации,
	|	НачислениеЗарплатыРаботникам.ВидСхемыМотивации,
	|	НачислениеЗарплатыРаботникам.ПоВременнойСхемеМотивации,
	|	НачислениеЗарплатыРаботникам.Ссылка
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникам КАК НачислениеЗарплатыРаботникам
	|ГДЕ
	|	НачислениеЗарплатыРаботникам.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачисления(Физлицо = Неопределено)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	
	Если НЕ (Физлицо = Неопределено) Тогда
		Запрос.УстановитьПараметр("парамФизлицо", Физлицо);
		УсловиеНаФизлицоТекст = "ГДЕ СтрокиНачисления.Сотрудник.Физлицо = &парамФизлицо ";
	Иначе
		УсловиеНаФизлицоТекст="";
	КонецЕсли;	

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	СтрокиНачисления.Подразделение,
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	СтрокиНачисления.ОтработаноДней КАК ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	Работники.ГрафикРаботы,
	|	ЕСТЬNULL(Работники.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,	
	|	СтрокиНачисления.Авторасчет КАК Авторасчет
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтрокиНачисления.ВидРасчета КАК ВидРасчета,
	|		СтрокиНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|		СтрокиНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|		СтрокиНачисления.ДатаНачала КАК ДатаНачала,
	|		СтрокиНачисления.ДатаОкончания КАК ДатаОкончания,
	|		СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|		СтрокиНачисления.Подразделение КАК Подразделение,
	|		СтрокиНачисления.Результат КАК Результат,
	|		СтрокиНачисления.Сотрудник КАК Сотрудник,
	|		СтрокиНачисления.ОтработаноДней КАК ОтработаноДней,
	|		СтрокиНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|		ПоследниеДаты.МаксПериод КАК МаксПериод,
	|		СтрокиНачисления.Показатель1 КАК Показатель1,
	|		СтрокиНачисления.Показатель2 КАК Показатель2,
	|		СтрокиНачисления.Показатель3 КАК Показатель3,
	|		СтрокиНачисления.Показатель4 КАК Показатель4,
	|		СтрокиНачисления.Показатель5 КАК Показатель5,
	|		СтрокиНачисления.Показатель6 КАК Показатель6,	
	|		СтрокиНачисления.Авторасчет КАК Авторасчет
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникам.Начисления КАК СтрокиНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МАКСИМУМ(Работники.Период) КАК МаксПериод,
	|				СтрокиНачисления.Сотрудник КАК Сотрудник
	|			ИЗ
	|				Документ.НачислениеЗарплатыРаботникам.Начисления КАК СтрокиНачисления
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
	|					ПО Работники.Период <= СтрокиНачисления.ДатаНачала
	|						И СтрокиНачисления.Сотрудник.Физлицо = Работники.ФизЛицо
	|			ГДЕ
	|				СтрокиНачисления.Ссылка = &ДокументСсылка
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СтрокиНачисления.Сотрудник) КАК ПоследниеДаты
	|			ПО СтрокиНачисления.Сотрудник = ПоследниеДаты.Сотрудник
	|	ГДЕ
	|		СтрокиНачисления.Ссылка = &ДокументСсылка) КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
	|		ПО Работники.Период = СтрокиНачисления.МаксПериод
	|			И СтрокиНачисления.Сотрудник.Физлицо = Работники.ФизЛицо
	|
	|	" + УсловиеНаФизлицоТекст + "	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()


// Формирует запрос по таблице "Удержания" документа
//
// Параметры: 
//  Физлицо
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоУдержания(Физлицо = Неопределено)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	
	Если Физлицо = Неопределено Тогда
		ТекстУсловия = "";
	Иначе
		ТекстУсловия = " И Физлицо В (&ПарамФизЛицо)";
		Запрос.УстановитьПараметр("ПарамФизЛицо", Физлицо);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтрокиУдержания.ВидРасчета,
	|	СтрокиУдержания.ДатаНачала,
	|	ВЫБОР
	|		КОГДА СтрокиУдержания.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиУдержания.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ДатаОкончания,
	|	СтрокиУдержания.НомерСтроки КАК НомерСтроки,
	|	СтрокиУдержания.Результат,
	|	СтрокиУдержания.Подразделение,
	|	СтрокиУдержания.Физлицо,
	|	СтрокиУдержания.Показатель1,
	|	СтрокиУдержания.Показатель2,
	|	СтрокиУдержания.Показатель3,
	|	СтрокиУдержания.Показатель4,
	|	СтрокиУдержания.Показатель5,
	|	СтрокиУдержания.Показатель6,	
	|	СтрокиУдержания.Авторасчет КАК Авторасчет
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникам.Удержания КАК СтрокиУдержания
	|ГДЕ
	|	СтрокиУдержания.Ссылка = &ДокументСсылка" + ТекстУсловия + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоУдержания()

// Формирует запрос по таблице "ПогашениеЗайма" документа
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоПогашениеЗайма()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтрокиПогашениеЗайма.НомерСтроки,
	|	СтрокиПогашениеЗайма.ДоговорЗайма,
	|	СтрокиПогашениеЗайма.НачисленоПроцентов,
	|	СтрокиПогашениеЗайма.ПогашеноПроцентов,
	|	СтрокиПогашениеЗайма.ПогашеноЗайма,
	|	СтрокиПогашениеЗайма.ФизЛицо
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникам.ПогашениеЗаймов КАК СтрокиПогашениеЗайма
	|
	|ГДЕ
	|	СтрокиПогашениеЗайма.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоПогашениеЗайма()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	//  ПериодРегистрации
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не задан период начисления зарплаты!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ПоВременнойСхемеМотивации и ВидСхемыМотивации.Пустая() Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("По временному расчету должен указываться вид схемы мотивации!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала больше даты окончания
	Если ВыборкаПоСтрокамДокумента.ПериодДействияНачало > ВыборкаПоСтрокамДокумента.ПериодДействияКонец Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала начисления не может быть больше даты окончания!", Отказ, Заголовок);	
	КонецЕсли;


КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Удержания" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Удержания"": ";
	
	// Физлицо
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Физлицо) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала удержания!", Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания удержания!", Отказ, Заголовок);
	КонецЕсли;

	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиУдержания()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ПогашениеЗайма" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиПогашениеЗайма(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Погашение займов"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// ДоговорЗайма
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДоговорЗайма) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан договор займа погашение которого выполняется!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиПогашениеЗайма()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуНачислений(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборНачисления)	
	
	Движение = НаборНачисления.Добавить();

	// Свойства
	Движение.ПериодРегистрации			= ПериодРегистрации;
	Движение.ПериодДействияНачало		= ВыборкаПоСтрокамДокумента.ПериодДействияНачало;
	Движение.ПериодДействияКонец		= ВыборкаПоСтрокамДокумента.ПериодДействияКонец;
	
	Движение.БазовыйПериодНачало		= ВыборкаПоСтрокамДокумента.ПериодДействияНачало;
	Движение.БазовыйПериодКонец			= ВыборкаПоСтрокамДокумента.ПериодДействияКонец;

	Движение.ВидРасчета					= ВыборкаПоСтрокамДокумента.ВидРасчета;

	// Измерения
	Движение.Физлицо					= ВыборкаПоСтрокамДокумента.Физлицо;
	Движение.ВидСхемыМотивации			= ВыборкаПоШапкеДокумента.ВидСхемыМотивации;

	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;
	// ресурсы по отработанному времени
	Если ВыборкаПоСтрокамДокумента.ЗачетОтработанногоВремени Тогда
		Движение.ОтработаноДней			= ВыборкаПоСтрокамДокумента.ОтработаноДней;
		Движение.ОтработаноЧасов		= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
	КонецЕсли;

	// Реквизиты
	Движение.ГрафикРаботы				= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
	Движение.ВидУчетаВремени			= ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.СпособРасчета, Неопределено, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);
	Движение.Подразделение				= ВыборкаПоСтрокамДокумента.Подразделение;
	Движение.Показатель1				= ВыборкаПоСтрокамДокумента.Показатель1;
	Движение.Показатель2				= ВыборкаПоСтрокамДокумента.Показатель2;
	Движение.Показатель3				= ВыборкаПоСтрокамДокумента.Показатель3;
	Движение.Показатель4				= ВыборкаПоСтрокамДокумента.Показатель4;
	Движение.Показатель5				= ВыборкаПоСтрокамДокумента.Показатель5;
	Движение.Показатель6				= ВыборкаПоСтрокамДокумента.Показатель6;	
	Движение.Авторасчет					= ВыборкаПоСтрокамДокумента.Авторасчет;
	Движение.ПоВременнойСхемеМотивации	= ВыборкаПоШапкеДокумента.ПоВременнойСхемеМотивации;
	
КонецПроцедуры // ДобавитьСтрокуНачислений

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуУдержаний(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборУдержания)	

	Движение = НаборУдержания.Добавить();

	// Свойства
	Движение.ПериодРегистрации			= ПериодРегистрации;
	Движение.БазовыйПериодНачало		= ВыборкаПоСтрокамДокумента.ДатаНачала;
	Движение.БазовыйПериодКонец			= ВыборкаПоСтрокамДокумента.ДатаОкончания;
	Движение.ВидРасчета					= ВыборкаПоСтрокамДокумента.ВидРасчета;

	// Измерения
	Движение.Физлицо					= ВыборкаПоСтрокамДокумента.Физлицо;
	Движение.ВидСхемыМотивации			= ВыборкаПоШапкеДокумента.ВидСхемыМотивации;	
	

	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;

	// Реквизиты
	Движение.Подразделение				= ВыборкаПоСтрокамДокумента.Подразделение;
	Движение.Показатель1				= ВыборкаПоСтрокамДокумента.Показатель1;
	Движение.Показатель2				= ВыборкаПоСтрокамДокумента.Показатель2;
	Движение.Показатель3				= ВыборкаПоСтрокамДокумента.Показатель3;
	Движение.Показатель4				= ВыборкаПоСтрокамДокумента.Показатель4;
	Движение.Показатель5				= ВыборкаПоСтрокамДокумента.Показатель5;
	Движение.Показатель6				= ВыборкаПоСтрокамДокумента.Показатель6;	
	Движение.Авторасчет					= ВыборкаПоСтрокамДокумента.Авторасчет;
	Движение.ПоВременнойСхемеМотивации	= ВыборкаПоШапкеДокумента.ПоВременнойСхемеМотивации;

КонецПроцедуры // ДобавитьСтрокуУдержаний

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуПогашениеЗайма(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборПогашениеЗайма)

	// начислено процентов
	Движение = НаборПогашениеЗайма.Добавить();

	// Свойства
	Движение.Период					= КонецМесяца(ПериодРегистрации);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;

	// Измерения
	Движение.ФизЛицо				= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.ДоговорЗайма			= ВыборкаПоСтрокамДокумента.ДоговорЗайма;

	// Ресурсы
	Движение.Проценты				= ВыборкаПоСтрокамДокумента.НачисленоПроцентов;
	// Реквизиты
	Движение.УдержаноИзЗарплаты		= Истина;
	
	// погашено процентов и основного долга
	Движение = НаборПогашениеЗайма.Добавить();

	// Свойства
	Движение.Период					= КонецМесяца(ПериодРегистрации);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;

	// Измерения

	Движение.ФизЛицо				= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.ДоговорЗайма			= ВыборкаПоСтрокамДокумента.ДоговорЗайма;

	// Ресурсы
	Движение.Проценты = ВыборкаПоСтрокамДокумента.ПогашеноПроцентов;
	// даже если начисленные проценты не погашены не увеличиваем основной долг - ограничиваем снизу 
	// размер погашения основного долга нулем
	Движение.ОсновнойДолг = Макс(0, ВыборкаПоСтрокамДокумента.ПогашеноЗайма - ВыборкаПоСтрокамДокумента.ПогашеноПроцентов);

	// Реквизиты
	Движение.УдержаноИзЗарплаты	= Истина;
	
КонецПроцедуры // ДобавитьСтрокуПогашениеЗайма

// Вычисляет разницу между начислениями и удержаниями работника и формирует
// движения по взаиморасчетам с работниками
//
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		НаборЗаписей - набор записей 
//
// Возвращаемое значение:
//  Нет.
//		
Процедура ДобавитьСтрокуВзаиморасчетов(ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Доходы.Физлицо,
	|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачисленияРаботников.Сотрудник.Физлицо КАК Физлицо,
	|		НачисленияРаботников.Результат КАК СуммаДохода
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникам.Начисления КАК НачисленияРаботников
	|	
	|	ГДЕ
	|		НачисленияРаботников.Ссылка = &парамСсылка И
	|		(НачисленияРаботников.Результат <> 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗплУдержания.Физлицо,
	|		-(ЗплУдержания.Результат)
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникам.Удержания КАК ЗплУдержания
	|	
	|	ГДЕ
	|		ЗплУдержания.Ссылка = &парамСсылка И
	|		(ЗплУдержания.Результат <> 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗплЗаймы.ФизЛицо,
	|		-(ЗплЗаймы.ПогашеноЗайма)
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникам.ПогашениеЗаймов КАК ЗплЗаймы
	|	
	|	ГДЕ
	|		ЗплЗаймы.Ссылка = &парамСсылка И
	|		(ЗплЗаймы.ПогашеноЗайма <> 0)) КАК Доходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.Физлицо");
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка" , Ссылка);
	
	Доходы = Запрос.Выполнить().Выбрать();
	// сформируем движения ВзаиморасчетыСРаботниками
	Пока Доходы.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// свойства
		Движение.Период 	 = КонецМесяца(ПериодРегистрации);
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		
		// измерения 
		Движение.Физлицо 	 = Доходы.Физлицо;
		
		// ресурсы
		Движение.СуммаУпр 	 = Доходы.СуммаДохода;
		
	КонецЦикла;
	
КонецПроцедуры  // ДобавитьСтрокуВзаиморасчетов


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда
		
		КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Начисления);
		КраткийСоставДокумента = КраткийСоставДокумента + ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Удержания, , "Физлицо");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
				
		КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Начисления);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
			
		КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ПогашениеЗаймов, ,  "Физлицо");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний Тогда
		
		КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Удержания, , "Физлицо");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Для Каждого Набор Из Движения Цикл
		Набор.Очистить();
	КонецЦикла;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// Начисления
			//
			// получим реквизиты табличной части
			ВыборкаПоНачислениям = СформироватьЗапросПоНачисления().Выбрать();

			Пока ВыборкаПоНачислениям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, Движения.УправленческиеНачисления);
				КонецЕсли;
			КонецЦикла;

			// Удержания
			//
			// получим реквизиты табличной части
			ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания().Выбрать();

			Пока ВыборкаПоУдержаниям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоУдержаниям, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, ВыборкаПоШапкеДокумента, Движения.УправленческиеУдержания);
				КонецЕсли;
			КонецЦикла;
			
			Если Не ВыборкаПоШапкеДокумента.ПоВременнойСхемеМотивации Тогда			
				
				// ПогашениеЗайма
				//
				// получим реквизиты табличной части
				ВыборкаПоПогашениеЗайма = СформироватьЗапросПоПогашениеЗайма().Выбрать();
				
				Пока ВыборкаПоПогашениеЗайма.Следующий() Цикл 
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиПогашениеЗайма(ВыборкаПоПогашениеЗайма, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуПогашениеЗайма(ВыборкаПоПогашениеЗайма, ВыборкаПоШапкеДокумента, Движения.ПогашениеЗаймовРаботниками);
					КонецЕсли;
				КонецЦикла;
				
				// сформируем начисления к выплате по начислениям документа
				ДобавитьСтрокуВзаиморасчетов(ВыборкаПоШапкеДокумента, Движения.ВзаиморасчетыСРаботниками);
				
			КонецЕсли; 
		КонецЕсли; 

	КонецЕсли;

	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Для Каждого Набор Из Движения Цикл
		Набор.Очистить();
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

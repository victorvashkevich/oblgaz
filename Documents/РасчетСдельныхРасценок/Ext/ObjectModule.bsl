////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

// Механизм исправлений
Перем мВосстанавливатьДвижения;
Перем мСоответствиеДвижений;
Перем мИсправляемыйДокумент;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//	Название макета печати передается в качестве параметра,
//	по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета	- строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт


	Если ИмяМакета="Задание" ТОгда
		Если Не Проведен Тогда
			Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		ТабДокумент=ПечатьЗадания();
		Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним));
	КонецЕсли;
	
КонецФункции // Печать()

#КонецЕсли
// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//	Струткура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;	
	
	//СтруктураМакетов.Вставить("Задание","Выполненные задания");
	Возврат СтруктураМакетов;


КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыдачаЗадания.Дата,
	|	ВыдачаЗадания.ДатаЗадания,
	|	ВыдачаЗадания.Номер,
	|	ВыдачаЗадания.Организация,
	|	ВыдачаЗадания.Мастер,
	|	ВыдачаЗадания.НомерМегаполис,
	|	ВыдачаЗадания.ВыдачаЗаданияСсылка,
	|	ВЫБОР
	|		КОГДА ВыдачаЗадания.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВыдачаЗадания.Организация
	|		ИНАЧЕ ВыдачаЗадания.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация
	|ИЗ
	|	Документ.ВыполнениеЗадания КАК ВыдачаЗадания
	|ГДЕ
	|	ВыдачаЗадания.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();


КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса. В запросе данные документа дополняются значениями
//	проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование,
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧРаботникиОрганизации.ВидРаботы.Наименование КАК ВидРаботы,
	|	ТЧРаботникиОрганизации.ВидРаботы.КодПоПрейскуранту КАК КодРаботы,
	|	ТЧРаботникиОрганизации.ПродолжительностьРаботы,
	|	ТЧРаботникиОрганизации.Количество,
	|	ТЧРаботникиОрганизации.Стоимость,
	|	ТЧРаботникиОрганизации.Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.Ссылка.Дата
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок
	|	КОНЕЦ КАК ЗанимаемыхСтавок,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ
	|	Документ.ВыполнениеЗадания.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(Работники.Период) КАК Период
	|		ИЗ
	|			Документ.ВыполнениеЗадания.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|				ПО (Работники.Период <= ТЧРаботникиОрганизации.Ссылка.Дата)
	|					И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
	|			И ТЧРаботникиОрганизации.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.НомерСтроки";
	//|	ТЧРаботникиОрганизации.ВидРаботы";
		
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

Функция СформироватьЗапросПоТехнологическимОперациям()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасчетСдельныхРасценокТехнологическиеОперации.Ссылка,
	|	РасчетСдельныхРасценокТехнологическиеОперации.НомерСтроки,
	|	РасчетСдельныхРасценокТехнологическиеОперации.ТехнологическаяОперация,
	|	РасчетСдельныхРасценокТехнологическиеОперации.Расценка,
	|	РасчетСдельныхРасценокТехнологическиеОперации.НоваяРасценка,
	|	РасчетСдельныхРасценокТехнологическиеОперации.Норма,
	|	РасчетСдельныхРасценокТехнологическиеОперации.СредняяТарифнаяСтавка,
	|	РасчетСдельныхРасценокТехнологическиеОперации.НоваяНорма,
	|	РасчетСдельныхРасценокТехнологическиеОперации.НоваяСредняяТарифнаяСтавка,
	|	РасчетСдельныхРасценокТехнологическиеОперации.ТехнологическаяОперация.ВидРаботы ВидРаботы
	|ИЗ
	|	Документ.РасчетСдельныхРасценок.ТехнологическиеОперации КАК РасчетСдельныхРасценокТехнологическиеОперации
	|ГДЕ
	|	РасчетСдельныхРасценокТехнологическиеОперации.Ссылка = &ДокументСсылка";
		
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоТехнологическимОперациям()


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, работники которой отправляются в отпуск!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВыдачаЗаданияСсылка) И (ВыборкаПоШапкеДокумента.НомерМегаполис="") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан документ выдачи задания!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка
//								  из результата запроса по работникам,
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники организации"": ";

	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	Если НетСотрудника Тогда
		Возврат;
	КонецЕсли;
		
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
		
	// Проверка: ранее работник должен быть принят на работу
	Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = NULL Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоШапкеДокумента.Дата, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда	
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоШапкеДокумента.Дата, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

Процедура ПроверитьЗаполнениеСтрокиТехнологическойОперации(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Технологические операции"": ";

	НетВидаРабот = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРаботы);
	Если НетВидаРабот Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран вид работы в технологической операции!", Отказ, Заголовок);
	КонецЕсли;

	//Если НетСотрудника Тогда
	//	Возврат;
	//КонецЕсли;
	//	
	//// Организация сотрудника должна совпадать с организацией документа
	//Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	//КонецЕсли;
	//	
	//// Проверка: ранее работник должен быть принят на работу
	//Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = NULL Тогда
	//	СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоШапкеДокумента.Дата, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
	//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	//ИначеЕсли ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда	
	//	СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоШапкеДокумента.Дата, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен!";
	//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	//КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()


// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//	ВыборкаПоРаботникиОрганизации
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)

			
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Функция ПолучитьИсполнителей()
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("СписокТО",ТехнологическиеОперации.ВыгрузитьКолонку("ТехнологическаяОперация"));
	Запрос.УстановитьПараметр("ВыбДата",Дата);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ИсполнителиТехнологическихОперацийСрезПоследних.Исполнитель,
	|	ИсполнителиТехнологическихОперацийСрезПоследних.ТехнологическаяОперация,
	|	ИсполнителиТехнологическихОперацийСрезПоследних.Количество
	|ИЗ
	|	РегистрСведений.ИсполнителиТехнологическихОпераций.СрезПоследних(&ВыбДата, ТехнологическаяОперация В (&СписокТО)) КАК ИсполнителиТехнологическихОперацийСрезПоследних
	|ГДЕ
	|	ИсполнителиТехнологическихОперацийСрезПоследних.Количество > 0";
	
	Возврат Запрос.Выполнить().Выгрузить();

	
КонецФункции

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	//РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	//// Получим реквизиты шапки из запроса
	//ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	//Если ВыборкаПоШапкеДокумента.Следующий() Тогда
	//	
	//	//Надо позвать проверку заполнения реквизитов шапки
	//	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

	//	Если НЕ Отказ Тогда
	//		
	//		ВыборкаПоРаботникиОрганизации = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);							
			ВыборкаПоТО = СформироватьЗапросПоТехнологическимОперациям().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);							
	//		
			Пока ВыборкаПоТО.Следующий() Цикл 
	//			// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиТехнологическойОперации(ВыборкаПоТО, Отказ, Заголовок);

	//			Если НЕ Отказ Тогда
	//				// Заполним записи в наборах записей регистров
	//				ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации);

	//			КонецЕсли;
			КонецЦикла;
	//	КонецЕсли;
	//КонецЕсли;

	ТаблицаИсполнителей = ПолучитьИсполнителей();
	
	НаборСдельныеРасценки = РегистрыСведений.СдельныеРасценки.СоздатьНаборЗаписей();
	
	НаборСведенияОВидахРабот = РегистрыСведений.СведенияОВидахРабот.СоздатьНаборЗаписей();
	
	Для каждого СтрокаТО Из ТехнологическиеОперации Цикл			
		
		СтруктураПоиска = Новый Структура("ТехнологическаяОперация",СтрокаТО.ТехнологическаяОперация);
		НайденныеСтроки = ТаблицаИсполнителей.НайтиСтроки(СтруктураПоиска);
		Кол =0;
		Для каждого Исп Из НайденныеСтроки Цикл
			Кол=Кол+Исп.Количество;
		КонецЦикла;

		НаборСдельныеРасценки.Отбор.ТехнологическаяОперация.Установить(СтрокаТО.ТехнологическаяОперация);
		НаборСдельныеРасценки.Отбор.Период.Установить(Дата);
		НаборСдельныеРасценки.Прочитать();
		
		ЗаписьРасценка = НаборСдельныеРасценки.Добавить();
		ЗаписьРасценка.ТехнологическаяОперация = СтрокаТО.ТехнологическаяОперация;
		ЗаписьРасценка.Расценка = СтрокаТО.НоваяРасценка;
		ЗаписьРасценка.Норма = СтрокаТО.НоваяНорма;
		ЗаписьРасценка.Период = Дата;
		ЗаписьРасценка.КолИсполнителей = Кол;
		ЗаписьРасценка.СредняяТарифнаяСтавка = СтрокаТО.НоваяСредняяТарифнаяСтавка;
		
		ЗаписьРасценка.Документ = Ссылка;			
		НаборСдельныеРасценки.Записать();
		
		НаборСведенияОВидахРабот.Отбор.ВидРаботы.Установить(СтрокаТО.ТехнологическаяОперация.ВидРаботы);
		НаборСведенияОВидахРабот.Отбор.Период.Установить(Дата);
		НаборСведенияОВидахРабот.Прочитать();
		
		ЗаписьСведения = НаборСведенияОВидахРабот.Добавить();
		ЗаписьСведения.ВидРаботы = СтрокаТО.ТехнологическаяОперация.ВидРаботы;
		ЗаписьСведения.ЗаработнаяПлатаОсновная = СтрокаТО.НоваяРасценка;
		ЗаписьСведения.НормаВремени = СтрокаТО.НоваяНорма;
		ЗаписьСведения.Период = Дата;
		
		//ЗаписьСведения.КолЧеловек = НайденныеСтроки.Количество();
		ЗаписьСведения.КолЧеловек = Кол;
		
		ЗаписьСведения.Документ = Ссылка;			
		НаборСведенияОВидахРабот.Записать();
						
	КонецЦикла;
		
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаЗаполнения" модуля объекта
//
Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.ВыдачаЗадания") Тогда	
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Основание,,"Номер");
		
		Для Каждого Стр Из Основание.РаботникиОрганизации Цикл
			НоваяСтрока=РаботникиОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			НоваяСтрока.ВидРаботы=Стр.ВидРаботыСсылка;
		КОнецЦикла;
		
		ВыдачаЗаданияСсылка=Основание;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Проведен Тогда
		ОбработкаУдаленияПроведения(Ложь);
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНаименованиеРаботы(Знач Код) Экспорт
	
	Спр=Справочники.ВидыРабот;
	
	к=Найти(Код,".");
	
	Наименование="";
	
	СтрКод="";
	
	ПервыйПроход=Истина;
	Пока к>0 Цикл
		
		СтрКод=СтрКод+?(ПервыйПроход,"",".")+Лев(Код,к-1);
		НайденнаяСсылка=Спр.НайтиПоРеквизиту("КодПоПрейскуранту",СтрКод+?(ПервыйПроход,"","-"));
		
		Если Не НайденнаяСсылка.Пустая() ТОгда
			Наименование=Наименование+СокрЛП(НайденнаяСсылка.Наименование)+" ";
		КонецЕсли;		
		
		Код=Сред(Код,к+1);
		
		к=Найти(Код,".");
		
		ПервыйПроход=Ложь;
		
	КонецЦикла;		
	
	
	Возврат Наименование;
	
КонецФункции

Функция  ПечатьЗадания()
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("Задание");
	// Шапка
	Шапка = Макет.ПолучитьОбласть("Шапка");
	
	ВыборкаПоШапке=СформироватьЗапросПоШапке().Выбрать();;
	
	Если ВыборкаПоШапке.Следующий()>0 Тогда
		
		Шапка.Параметры.Заполнить(ВыборкаПоШапке);
		Шапка.Параметры.ДатаЗадания=Формат(ВыборкаПоШапке.ДатаЗадания,"ДФ=dd.MM.yyyy");
		ОбластьРаботникиОрганизации = Макет.ПолучитьОбласть("Строка");
		
		ВыборкаПоРаботникам=СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапке).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
		Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("Сотрудник")>0 Цикл
			Шапка.Параметры.Сотрудник=ВыборкаПоРаботникам.Сотрудник;
			ТабДок.Вывести(Шапка);		
			ИтогоЧасов=0;
			ИтогоСтоимость=0;
			ИтогоКоличество=0;
			ИтогоСумма=0;			
			НомерПП=1;
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки")>0 Цикл
				ОбластьРаботникиОрганизации.Параметры.Заполнить(ВыборкаПоРаботникам);
				ОбластьРаботникиОрганизации.Параметры.ВидРаботы=ПолучитьНаименованиеРаботы(ВыборкаПоРаботникам.КодРаботы)+" "+ВыборкаПоРаботникам.ВидРаботы;
				ОбластьРаботникиОрганизации.Параметры.НомерПП=НомерПП;
				ТабДок.Вывести(ОбластьРаботникиОрганизации);
				ИтогоЧасов=ИтогоЧасов+ВыборкаПоРаботникам.ПродолжительностьРаботы;
				ИтогоСтоимость=ИтогоСтоимость+ВыборкаПоРаботникам.Стоимость;
				ИтогоСумма=ИтогоСумма+ВыборкаПоРаботникам.Сумма;
				ИтогоКоличество=ИтогоКоличество+ВыборкаПоРаботникам.Количество;
				НомерПП=НомерПП+1;
			КонецЦикла;		
			
			ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
			ОбластьПодвал.Параметры.ИтогоЧасов=ИтогоЧасов;
			ОбластьПодвал.Параметры.ИтогоСумма=ИтогоСумма;
			ОбластьПодвал.Параметры.ИтогоСтоимость=ИтогоСтоимость;
			ОбластьПодвал.Параметры.ИтогоКоличество=ИтогоКоличество;
			ОбластьПодвал.Параметры.Мастер=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоШапке.Мастер);
			ОбластьПодвал.Параметры.Сотрудник=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботникам.Сотрудник);
			ТабДок.Вывести(ОбластьПодвал);

		
		КонецЦикла;
			
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.АвтоМасштаб=Истина;
		ТабДок.ОриентацияСтраницы=ОриентацияСтраницы.Портрет;
		ТабДок.Защита = Ложь;
		ТабДок.ТолькоПросмотр = Истина;
		ТабДок.ОтображатьЗаголовки = Ложь;
	КонецЕсли;
	
	Возврат ТабДок;
	
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	НаборСдельныеРасценки = РегистрыСведений.СдельныеРасценки.СоздатьНаборЗаписей();
	
	НаборСдельныеРасценки.Прочитать();
	НомерЗаписиНабора = НаборСдельныеРасценки.Количество() - 1;
	Пока НомерЗаписиНабора >= 0 Цикл
		Если НаборСдельныеРасценки[НомерЗаписиНабора].Документ = Ссылка Тогда
			НаборСдельныеРасценки.Удалить(НомерЗаписиНабора);
		КонецЕсли;
		НомерЗаписиНабора = НомерЗаписиНабора - 1
	КонецЦикла;

	НаборСдельныеРасценки.Записать();	
	
	НаборСведенияОВидахРабот = РегистрыСведений.СведенияОВидахРабот.СоздатьНаборЗаписей();
	
	НаборСведенияОВидахРабот.Прочитать();
	НомерЗаписиНабора = НаборСведенияОВидахРабот.Количество() - 1;
	Пока НомерЗаписиНабора >= 0 Цикл
		Если НаборСведенияОВидахРабот[НомерЗаписиНабора].Документ = Ссылка Тогда
			НаборСведенияОВидахРабот.Удалить(НомерЗаписиНабора);
		КонецЕсли;
		НомерЗаписиНабора = НомерЗаписиНабора - 1
	КонецЦикла;

	НаборСведенияОВидахРабот.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;

мВосстанавливатьДвижения = Ложь;







 ////////////////////////////////////////////////////////////////////////////////
 // ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет автоматическое заполнение документа по данным документа
//
//
Процедура Автозаполнение() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("парамПереходящийОстаток", ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПереходящийОстаток);
	Запрос.УстановитьПараметр("парамВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	
	ТекстЗапроса = 
    "ВЫБРАТЬ
    |	РаботникиОрганизацийСрезПоследних.Сотрудник,
    |	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Физлицо,
    |	ВзаиморасчетыСРаботникамиОрганизацийОстатки.СуммаВзаиморасчетовОстаток КАК СуммаНачисления,
    |	&парамПереходящийОстаток КАК Начисление,
    |	ВзаиморасчетыСРаботникамиОрганизацийОстатки.ПериодВзаиморасчетов КАК ПериодВозникновения
    |ИЗ
    |	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
    |			&парамПериодРегистрации,
    |			Организация = &парамОрганизация
    |				И ПериодВзаиморасчетов <= &парамПериодРегистрации) КАК ВзаиморасчетыСРаботникамиОрганизацийОстатки
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамПериодРегистрации,Организация = &парамОрганизация) КАК РаботникиОрганизацийСрезПоследних
    |		ПО ВзаиморасчетыСРаботникамиОрганизацийОстатки.Физлицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
    |ГДЕ
    |	РаботникиОрганизацийСрезПоследних.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
    |	И ВзаиморасчетыСРаботникамиОрганизацийОстатки.СуммаВзаиморасчетовОстаток > 0";
	
	Запрос.Текст = ТекстЗапроса;
	РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьТЧ() Экспорт
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛегализацияКопеекРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо
	|ПОМЕСТИТЬ ВТСписокСотрудников
	|ИЗ
	|	Документ.ПереносОстатоковПоРасчетамСРаботниками.РаботникиОрганизации КАК ЛегализацияКопеекРаботникиОрганизации
	|ГДЕ
	|	ЛегализацияКопеекРаботникиОрганизации.Ссылка = &ДокументСсылка";
	Запрос.Выполнить();	
	
	
	
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамПереходящийОстаток", ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПереходящийОстаток);
	Запрос.УстановитьПараметр("парамВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник,
	|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Физлицо,
	|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.СуммаВзаиморасчетовОстаток КАК СуммаНачисления,
	|	&парамПереходящийОстаток КАК Начисление,
	|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.ПериодВзаиморасчетов КАК ПериодВозникновения
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
	|			&парамПериодРегистрации,
	|			Организация = &парамОрганизация
	|				И ПериодВзаиморасчетов <= &парамПериодРегистрации) КАК ВзаиморасчетыСРаботникамиОрганизацийОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокСотрудников КАК СписокСотрудников
	|		ПО ВзаиморасчетыСРаботникамиОрганизацийОстатки.Физлицо = СписокСотрудников.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамПериодРегистрации, ) КАК РаботникиОрганизацийСрезПоследних
	|		ПО ВзаиморасчетыСРаботникамиОрганизацийОстатки.Физлицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
	|ГДЕ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
	|	И ВзаиморасчетыСРаботникамиОрганизацийОстатки.СуммаВзаиморасчетовОстаток > 0";
	

	
	Запрос.Текст = ТекстЗапроса;
	РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
    КонецЕсли;
 	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации)    Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть заполнен!", Отказ, Заголовок);
    КонецЕсли;
  
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникиОрганизации(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части : ";
	
	//// ФизЛицо
	//Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	//КонецЕсли;
	
	// Сотрудник
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;


	// ВидРасчета
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;
	
	// Результат
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Результат) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана сумма!", Отказ, Заголовок);
	КонецЕсли;
	
	//// Приказ
	//Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Приказ) Тогда
	//	ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан приказ!", Отказ, Заголовок);
	//КонецЕсли;


КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуДопНачислений(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();

	// Свойства
	Движение.ПериодРегистрации          = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ВидРасчета				    = ВыборкаПоСтрокамДокумента.ВидРасчета;
	
	// Измерения
	Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Сотрудник                  = ВыборкаПоСтрокамДокумента.Сотрудник;
	//Движение.Приказ						= ВыборкаПоСтрокамДокумента.Приказ;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;

	// Реквизиты
	
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.ДатаНачалаСобытия 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.Показатель1                = ВыборкаПоСтрокамДокумента.Результат;
	
КонецПроцедуры // ДобавитьСтрокуДопНачислений

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
Процедура ДобавитьСтрокуВзаиморасчетыСРаботниками(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей);
	
	Движение= НаборЗаписей.Добавить();
	// свойства
	Движение.Период 				= ВыборкаПоСтрокамДокумента.ПериодВозникновения;
	Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
		
	// измерения 
	Движение.Физлицо 				= ВыборкаПоСтрокамДокумента.Физлицо;
	Движение.Организация 			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ПериодВзаиморасчетов 	= ВыборкаПоСтрокамДокумента.ПериодВозникновения;
		
	// ресурсы
	Движение.СуммаВзаиморасчетов 	= ВыборкаПоСтрокамДокумента.Результат;
	
	Движение= НаборЗаписей.Добавить();
	// свойства
	Движение.Период 				= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
		
	// измерения 
	Движение.Физлицо 				= ВыборкаПоСтрокамДокумента.Физлицо;
	Движение.Организация 			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ПериодВзаиморасчетов 	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		
	// ресурсы
	Движение.СуммаВзаиморасчетов 	= ВыборкаПоСтрокамДокумента.Результат;
		

КонецПроцедуры

 // Формирует запрос по шапке документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	Дата, 
	|	ПериодРегистрации, 
	|	ВЫБОР КОГДА Организация.ГоловнаяОрганизация = &парамПустаяОрганизация ТОГДА Организация ИНАЧЕ Организация.ГоловнаяОрганизация КОНЕЦ Как ГоловнаяОрганизация, 
	|	Организация Как ОбособленноеПодразделение, 
	| 	Ссылка 
	|ИЗ 
	|	Документ.ПереносОстатоковПоРасчетамСРаботниками
	|ГДЕ 
	|	Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса
//
Функция	СформироватьЗапросПоРаботникамОрганизации()
	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛегализацияКопеекРаботникиОрганизации.НомерСтроки,
	|	ЛегализацияКопеекРаботникиОрганизации.Начисление КАК ВидРасчета,
	|	ЛегализацияКопеекРаботникиОрганизации.СуммаНачисления КАК Результат,
	|	ЛегализацияКопеекРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ЛегализацияКопеекРаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
	|	ЛегализацияКопеекРаботникиОрганизации.ПериодВозникновения
	|ИЗ
	|	Документ.ПереносОстатоковПоРасчетамСРаботниками.РаботникиОрганизации КАК ЛегализацияКопеекРаботникиОрганизации
	|ГДЕ
	|	ЛегализацияКопеекРаботникиОрганизации.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
КонецФункции



Процедура ОбработкаПроведения(Отказ, Режим)
	
	//Для Каждого Набор Из Движения Цикл
	//	Набор.Очистить();
	//КонецЦикла;
	//
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);	
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоРаботникамОрганизации().Выбрать();
			
			Пока ВыборкаПоСтрокамДокумента.Следующий() цикл
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникиОрганизации(ВыборкаПоСтрокамДокумента, Отказ, Заголовок);
				
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуДопНачислений(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Движения.ДополнительныеНачисленияРаботниковОрганизаций);
					
					ДобавитьСтрокуВзаиморасчетыСРаботниками(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Движения.ВзаиморасчетыСРаботникамиОрганизаций);
				КонецЕсли;
           				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
		


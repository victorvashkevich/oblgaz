////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка,
	|	Док.Дата,
	|	Док.ФизЛицо,
	|	Док.ИсточникКандидата,
	|	Док.Подразделение,
	|	Док.Должность,
	|	Док.Вакансия,
	|	ВЫБОР
	|		КОГДА СостояниеКандидатовНаРаботу.Статус = ЗНАЧЕНИЕ(Перечисление.УдалитьСостоянияКандидатаНаРаботу.Отклонен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КандидатОтклонен,
	|	ВЫБОР
	|		КОГДА СостояниеКандидатовНаРаботу.Период = Док.Дата
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьРешение
	|ИЗ
	|	Документ.УдалитьРегистрацияКандидата КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьКандидатыНаРаботу КАК СостояниеКандидатовНаРаботу
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МАКСИМУМ(СостояниеКандидатовНаРаботу.Период) КАК ДатаЗначения,
	|				Док.ФизЛицо КАК ФизЛицо
	|			ИЗ
	|				Документ.УдалитьРегистрацияКандидата КАК Док
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьКандидатыНаРаботу КАК СостояниеКандидатовНаРаботу
	|					ПО СостояниеКандидатовНаРаботу.ФизЛицо = Док.ФизЛицо
	|						И СостояниеКандидатовНаРаботу.Период <= Док.Дата
	|			ГДЕ
	|				Док.Ссылка = &ДокументСсылка
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Док.ФизЛицо) КАК СписокДат
	|			ПО СостояниеКандидатовНаРаботу.Период = СписокДат.ДатаЗначения
	|				И СостояниеКандидатовНаРаботу.ФизЛицо = СписокДат.ФизЛицо
	|		ПО СостояниеКандидатовНаРаботу.ФизЛицо = Док.ФизЛицо
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)
	
	// ФизЛицо
	НетФизлица = НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ФизЛицо);
	Если НетФизлица Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НетФизлица Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ЕстьРешение Тогда
		ОбщегоНазначения.СообщитьОбОшибке("По кандидату на дату регистрации уже присутствует решение!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.КандидатОтклонен Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Указан отклоненный ранее претендент!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПараметров = "")

	Движение = Движения.УдалитьКандидатыНаРаботу.Добавить();
	// Свойства
	Движение.Период			= ВыборкаПоШапкеДокумента.Дата;
	// Измерения
	Движение.ФизЛицо		= ВыборкаПоШапкеДокумента.ФизЛицо;
	// Ресурсы
	Движение.Подразделение	= ВыборкаПоШапкеДокумента.Подразделение;
	Движение.Должность		= ВыборкаПоШапкеДокумента.Должность;
	
	//Движение = Движения.СостояниеКандидатовНаРаботу.Добавить();
	//// Свойства
	//Движение.Период			= ВыборкаПоШапкеДокумента.Дата;
	//// Измерения
	//Движение.ФизЛицо		= ВыборкаПоШапкеДокумента.ФизЛицо;
	//// Ресурсы
	//Движение.Состояние		= Перечисления.СостоянияКандидатаНаРаботу.ПринятКРассмотрению;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамНакоплений - структура, содержащая имена регистров 
//                                             накоплений по которым надо проводить документ,
//  СтруктураПараметров                      - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакоплений(ВыборкаПоШапкеДокумента, СтруктураПараметров = "")

	Возврат;
	
	Движение = Движения.ПриходПерсоналаПоИсточникам.Добавить();

	// Свойства
	Движение.Период				= ВыборкаПоШапкеДокумента.Дата;
		
	// Измерения
	Движение.ИсточникПерсонала	= ВыборкаПоШапкеДокумента.ИсточникКандидата;

	// Ресурсы
	Движение.Количество			= 1;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента);
			ДобавитьСтрокуВДвиженияПоРегистрамНакоплений(ВыборкаПоШапкеДокумента);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;

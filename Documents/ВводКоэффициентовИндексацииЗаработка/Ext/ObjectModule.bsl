////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры:
//	Режим	- режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВводКоэффициентовИндексацииЗаработка.Дата,
	|	ВводКоэффициентовИндексацииЗаработка.Организация,
	|	ВЫБОР
	|		КОГДА ВводКоэффициентовИндексацииЗаработка.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	|			ТОГДА ВводКоэффициентовИндексацииЗаработка.Организация
	|		ИНАЧЕ ВводКоэффициентовИндексацииЗаработка.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ВводКоэффициентовИндексацииЗаработка.Ссылка,
	|	ВводКоэффициентовИндексацииЗаработка.ПериодРегистрации,
	|	ВводКоэффициентовИндексацииЗаработка.Коэффициент
	|ИЗ
	|	Документ.ВводКоэффициентовИндексацииЗаработка КАК ВводКоэффициентовИндексацииЗаработка
	|ГДЕ
	|	ВводКоэффициентовИндексацииЗаработка.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры:
//	Режим	- режим проведения.
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ВводКоэффициентовИндексацииЗаработкаРаботникиОрганизации.НомерСтроки) ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьКонфликтнаяСтрока,
	|	МИНИМУМ(ВводКоэффициентовИндексацииЗаработкаРаботникиОрганизации.НомерСтроки) КАК КонфликтнаяСтрокаНомер,
	|	ВЫБОР
	|		КОГДА КоэффициентИндексацииЗаработка.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьКонфликтноеДвижение
	|ИЗ
	|	Документ.ВводКоэффициентовИндексацииЗаработка.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводКоэффициентовИндексацииЗаработка.РаботникиОрганизации КАК ВводКоэффициентовИндексацииЗаработкаРаботникиОрганизации
	|		ПО ТЧРаботникиОрганизации.Ссылка = ВводКоэффициентовИндексацииЗаработкаРаботникиОрганизации.Ссылка
	|			И ТЧРаботникиОрганизации.НомерСтроки < ВводКоэффициентовИндексацииЗаработкаРаботникиОрганизации.НомерСтроки
	|			И ТЧРаботникиОрганизации.Сотрудник = ВводКоэффициентовИндексацииЗаработкаРаботникиОрганизации.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентИндексацииЗаработка КАК КоэффициентИндексацииЗаработка
	|		ПО ТЧРаботникиОрганизации.Ссылка.ПериодРегистрации = КоэффициентИндексацииЗаработка.Период
	|			И ТЧРаботникиОрганизации.Сотрудник = КоэффициентИндексацииЗаработка.Сотрудник
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ВЫБОР
	|		КОГДА КоэффициентИндексацииЗаработка.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры:
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан месяц повышения заработка!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры:
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса по товарам документа, 
//	Отказ						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники"": ";

	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НетСотрудника Тогда
		Возврат; // Дальше не проверяем
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка: противоречие другой строке документа
	Если ВыборкаПоСтрокамДокумента.ЕстьКонфликтнаяСтрока Тогда
		СтрокаСообщениеОбОшибке = "одним документом допускается регистрировать только одно перемещение работника - см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;	
	
	// Проверка: противоречие другой строке документа
	Если ВыборкаПоСтрокамДокумента.ЕстьКонфликтноеДвижение Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "одним документом допускается регистрировать только одно перемещение работника - см. строку ", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента					- выборка из результата запроса по шапке документа,
//	СтруктураПроведенияПоРегистрамСведений	- структура, содержащая имена регистров 
//											  сведений по которым надо проводить документ,
//	СтруктураПараметров						- структура параметров проведения,
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)

	Движение = Движения.КоэффициентИндексацииЗаработка.Добавить();
	
	// Свойства
	Движение.Период			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	
	// Измерения
	Движение.Сотрудник		= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.Организация	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Ресурсы
	Движение.Коэффициент	= ВыборкаПоШапкеДокумента.Коэффициент;
	
	// Реквизиты
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	ВыборкаПоСтрокамДокумента = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать();
	Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
		
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоСтрокамДокумента, Отказ, Заголовок);

		Если Не Отказ Тогда
			ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПроведения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура Автозаполнение(Режим = "") Экспорт 
	
	Если Режим = "ВсеАдреса" Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ВидАдресаДляИнформирования", Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица);
		Запрос.УстановитьПараметр("ТипАдрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботникиОрганизации.ФизЛицо,
		|	"","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9 КАК АдресДляИнформирования
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК РаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаДляИнформирования
		|		ПО РаботникиОрганизации.ФизЛицо = АдресаДляИнформирования.Объект
		|			И (АдресаДляИнформирования.Вид = &ВидАдресаДляИнформирования)
		|			И (АдресаДляИнформирования.Тип = &ТипАдрес)
		|ГДЕ
		|	РаботникиОрганизации.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаботникиОрганизации.НомерСтроки";
		
		РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
		
	ИначеЕсли Режим = "ИзменившиесяАдреса" Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ВидАдресаДляИнформирования", Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица);
		Запрос.УстановитьПараметр("ТипАдрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботникиОрганизации.ФизЛицо,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL("","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9, """") <> ЕСТЬNULL(ПереданныеВПФРАдреса.АдресДляИнформирования, """")
		|			ТОГДА "","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК АдресДляИнформирования
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК РаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаДляИнформирования
		|		ПО РаботникиОрганизации.ФизЛицо = АдресаДляИнформирования.Объект
		|			И (АдресаДляИнформирования.Вид = &ВидАдресаДляИнформирования)
		|			И (АдресаДляИнформирования.Тип = &ТипАдрес)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДатыДокументов.ФизЛицо КАК ФизЛицо,
		|			СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования КАК АдресДляИнформирования
		|		ИЗ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Дата) КАК Дата,
		|				РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
		|				РаботникиОрганизации.Ссылка.Организация КАК Организация
		|			ИЗ
		|				Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК РаботникиОрганизации
		|					ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
		|					ПО РаботникиОрганизации.ФизЛицо = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо
		|						И РаботникиОрганизации.Ссылка.Дата > СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Дата
		|			ГДЕ
		|				РаботникиОрганизации.Ссылка = &Ссылка
		|				И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Организация = РаботникиОрганизации.Ссылка.Организация
		|				И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования <> """"
		|				И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Проведен
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиОрганизации.ФизЛицо,
		|				РаботникиОрганизации.Ссылка.Организация) КАК ДатыДокументов
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
		|				ПО ДатыДокументов.Дата = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Дата
		|					И ДатыДокументов.ФизЛицо = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо
		|					И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Организация = ДатыДокументов.Организация
		|					И (СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Проведен)
		|		ГДЕ
		|			СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования <> """") КАК ПереданныеВПФРАдреса
		|		ПО РаботникиОрганизации.ФизЛицо = ПереданныеВПФРАдреса.ФизЛицо
		|ГДЕ
		|	РаботникиОрганизации.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаботникиОрганизации.НомерСтроки";
		
		РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
		
	Иначе
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидСтавокЕСНиПФР",		Перечисления.ВидыСтавокЕСНиПФР.ДляСельскохозяйственныхПроизводителей);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПерваяТаблица.Ссылка.Дата КАК Дата,
	|	ПерваяТаблица.Ссылка.Номер КАК Номер,
	|	ПерваяТаблица.Ссылка.Год КАК Год,
	|	ПерваяТаблица.Ссылка.ФорматФайла КАК ФорматФайла,
	|	ПерваяТаблица.Ссылка.Организация КАК Организация,
	|	ПерваяТаблица.Ссылка.Организация.Код КАК ОрганизацияКод,
	|	ПерваяТаблица.Ссылка.Организация.Наименование КАК ОрганизацияНаименование,
	|	ПерваяТаблица.Ссылка.Организация.ЮрФизЛицо Как ОрганизацияЮрФизЛицо,
	|	ПерваяТаблица.Ссылка.Организация.ОГРН Как ОрганизацияОГРН,
	|	ПерваяТаблица.Ссылка.Организация.НаименованиеОКОПФ Как ОрганизацияНаименованиеОКОПФ,
	|	ВЫРАЗИТЬ(ПерваяТаблица.Ссылка.Организация.НаименованиеПолное КАК СТРОКА(300)) Как ОрганизацияНаименованиеПолное,
	|	ПерваяТаблица.Ссылка.Организация.РегистрационныйНомерПФР Как ОрганизацияРегистрационныйНомерПФР,
	|	ПерваяТаблица.Ссылка.Организация.ИНН Как ОрганизацияИНН,
	|	ПерваяТаблица.Ссылка.Организация.КПП Как ОрганизацияКПП,
	|	ПерваяТаблица.Ссылка.Организация.РайонныйКоэффициентРФ Как ОрганизацияРайонныйКоэффициентРФ,
	|	ВЫБОР
	|		КОГДА ПерваяТаблица.Ссылка.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА ПерваяТаблица.Ссылка.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА ПерваяТаблица.Ссылка.Организация
	|		ИНАЧЕ ПерваяТаблица.Ссылка.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ПерваяТаблица.Ссылка.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|					ТОГДА ПерваяТаблица.Ссылка.Организация.ВидСтавокЕСНиПФР
	|				ИНАЧЕ Организации.ВидСтавокЕСНиПФР
	|			КОНЕЦ = &ВидСтавокЕСНиПФР
	|			ТОГДА ""СХ""
	|		ИНАЧЕ ""НР""
	|	КОНЕЦ КАК КодОсновногоТарифа,
	|	ПерваяТаблица.Ссылка.Ответственный КАК Ответственный,
	|	ПерваяТаблица.Ссылка.ТипСведений КАК ТипСведений,
	|	ПерваяТаблица.Ссылка.ТипФормДокументов КАК ТипФормДокументов,
	|	ПерваяТаблица.Ссылка.ВидКорректировки КАК ВидКорректировки,
	|	ПерваяТаблица.Ссылка.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
	|	ПерваяТаблица.Ссылка.Ссылка КАК Ссылка,
	|	ПерваяТаблица.ФизЛицо КАК ФизЛицо,
	|	ПерваяТаблица.НомерСтроки,
	|	ВтораяТаблица.НомерСтроки КАК НомерПовторяющейсяСтроки
	|ИЗ
	|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК ПерваяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК ВтораяТаблица
	|		ПО ПерваяТаблица.ФизЛицо = ВтораяТаблица.ФизЛицо
	|			И ПерваяТаблица.Ссылка = ВтораяТаблица.Ссылка
	|			И ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Организации.Ссылка КАК Ссылка,
	|			Организации.Код КАК Код,
	|			Организации.ЮрФизЛицо КАК ЮрФизЛицо,
	|			Организации.ВидСтавокЕСНиПФР КАК ВидСтавокЕСНиПФР
	|		ИЗ
	|			Справочник.Организации КАК Организации) КАК Организации
	|		ПО ПерваяТаблица.Ссылка.Организация.ГоловнаяОрганизация = Организации.Ссылка
	|ГДЕ
	|	ПерваяТаблица.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(ВыборкаПоШапкеДокумента.Организация.РегистрационныйНомерПФР)) <> 14 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Предупреждение: Регистрационный номер организации в ПФР скорее всего неправильный",,Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Ответственный) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указано ответственное лицо!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ВидКорректировки = "" И ВыборкаПоШапкеДокумента.ТипСведений = ""  Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Тип сведений и вид корректировки не могут быть одновременно пустыми!", Отказ);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ФорматФайла) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан формат файла!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоШапкеДокумента.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда	
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеОКОПФ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Предупреждение: Не указано наименование ОКОПФ организации",,Заголовок);
		ИначеЕсли СтрДлина(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеОКОПФ) > 40 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Предупреждение: Наименование ОКОПФ организации обрезано до 40 символов.",,Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения документа
Процедура ПроверитьЗаполнениеДокумента(ВыборкаПоДокументу, Отказ, Заголовок, ПроверятьШапку = Истина)

	КоличествоДокументов 	= ВыборкаПоДокументу.Количество();
	Если КоличествоДокументов = 0 тогда
		ОбщегоНазначения.СообщитьОбОшибке("Список работников пуст!", Отказ, Заголовок);
	КонецЕсли;	 

	ПроверялиШапку = Не ПроверятьШапку;
	Пока ВыборкаПоДокументу.Следующий() цикл

		//Проверка реквизитов шапки документа
		Если Не ПроверялиШапку тогда
			ПроверитьЗаполнениеШапки(ВыборкаПоДокументу, Отказ, Заголовок);
			ПроверялиШапку = Истина;
		КонецЕсли;	 

		Если НЕ ЗначениеЗаполнено(ВыборкаПоДокументу.ФизЛицо) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Строка №"+ВыборкаПоДокументу.НомерСтроки+": Не выбран работник!", Отказ, Заголовок);
		КонецЕсли;
		
		//Контроль дубля строк
		Если ВыборкаПоДокументу.НомерПовторяющейсяСтроки <> NULL тогда
			ОбщегоНазначения.СообщитьОбОшибке("Строка №"+ВыборкаПоДокументу.НомерПовторяющейсяСтроки+": Работник "+ВыборкаПоДокументу.ФизЛицо+ " указан в документе дважды!", Отказ, Заголовок);
		КонецЕсли;	 
	КонецЦикла;	
 	
	Если КоличествоДокументов > 200 тогда
		ОбщегоНазначения.СообщитьОбОшибке("В документе должно быть не более 200 форм " + ТипФормДокументов +" (работников)!", Отказ, Заголовок);
	КонецЕсли;	 
	
КонецПроцедуры	

// Проверяет правильность заполнения реквизитов физлица 
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоРаботникиОрганизации	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьДанныеФизлица(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, ФамилияФизЛица, ИмяФизЛица, Отказ, Заголовок)

	// ФизЛицо
	СтрокаНачалаСообщенияОбОшибке = "В строке № """+ СокрЛП(ВыборкаПоРаботникиОрганизации.НомерСтроки) + """: ";
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ФизЛицо) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не выбран работник!", Отказ, Заголовок);
	Иначе	
		
		СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + "По работнику "+ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование + " ";
		
		Если НЕ ВыборкаПоРаботникиОрганизации.ФизЛицоРаботаетВОрганизации тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- не работал(а) в организации " + ВыборкаПоШапкеДокумента.ОрганизацияНаименование + " в " + Формат(ВыборкаПоШапкеДокумента.Год,"ЧГ=0") + " году!", Отказ, Заголовок);
		КонецЕсли;
		
		СтраховойНомерПФР = ВыборкаПоРаботникиОрганизации.СтраховойНомерПФР;
		Если НЕ ЗначениеЗаполнено(СтраховойНомерПФР) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан страховой номер!", Отказ, Заголовок);
		Иначе	
			Если НЕ РегламентированнаяОтчетность.СтраховойНомерПФРСоответствуетТребованиям(ВыборкаПоРаботникиОрганизации.СтраховойНомерПФР) тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Задан неверный страховой номер!", Отказ, Заголовок);
			КонецЕсли;	
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ФамилияФизЛица) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана фамилия!", Отказ, Заголовок);
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(ИмяФизЛица) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задано имя!", Отказ, Заголовок);
		КонецЕсли;	
		                                                
		// Проверка адреса для информирования
		Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.АдресДляИнформирования) Тогда
			АдресДляИнформированияСписком = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(ВыборкаПоРаботникиОрганизации.АдресДляИнформирования);
			ЗаПределамиРФ = Ложь;
			АдресДляИнформированияСписком.Свойство("ЗаПределамиРФ", ЗаПределамиРФ);
			// значение переменной ЗаПределамиРФ может быть Неопределено
			Если ЗаПределамиРФ <> Истина Тогда
				Если  РегламентированнаяОтчетность.АдресСоответствуетТребованиям(АдресДляИнформированияСписком) Тогда
					ТекстОшибки = ПроцедурыПерсонифицированогоУчета.ПроверитьАдресПоКЛАДР(АдресДляИнформированияСписком);

					Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Адрес для информирования не соответствует адресному классификатору: в классификаторе не найден" + ТекстОшибки + "!", , Заголовок);
					КонецЕсли;
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Адрес для информирования заполнен не полностью или неверно или присутствуют латинские или недопустимые символы!", Отказ ,Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


#Если Клиент Тогда
	
//Процедура вывода сведений на печать
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ИмяМакета = "ФормаСЗВ_4_1" Или ИмяМакета = "ФормаСЗВ_4_2" Тогда
		
		ЕстьОшибки = Ложь;
		ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ЭтотОбъект,ЕстьОшибки);
		Если ЕстьОшибки тогда
			Возврат Неопределено;
		КонецЕсли;	 
		
		ДокументРезультат = Новый ТабличныйДокумент;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработкеСЗВ4_ФорматЗаписей";
		ДокументФорматЗаписей = ПолучитьМакет("ФорматЗаписей");
		
		ДокументСписокЗастрахованныхЛиц = Новый ТабличныйДокумент;
		ДокументСписокЗастрахованныхЛиц.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработкеСЗВ4_Список";
		
		Макет = ПолучитьМакет("СписокЗастрахованныхЛиц");
		ОбластьШапкаСписка = Макет.ПолучитьОбласть("Шапка");
		ОбластьСтрокаСписка = Макет.ПолучитьОбласть("СтрокаРаботника");
		ОбластьПодвалСписка = Макет.ПолучитьОбласть("Подвал");
		ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
		// массив с двумя строками - для разбиения на страницы
	    ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьСтрокаСписка);
		
		// Получим сведения об ответственных лицах
		ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, Дата, Ответственный.ФизЛицо);
		
		// Список застрахованных лиц
		ЗаполнитьЗначенияСвойств(ОбластьПодвалСписка.Параметры,ОтветственныеЛица,"РуководительДолжность,Руководитель");
		
		Если ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда
			
			// формируем отчет по версии файла 04.00
			
			//Обработка заголовка файла
			ИнформацияОПачке = Новый Структура;
			Если ПроцедурыПерсонифицированогоУчета.РазобратьЗаголовокФайла(ТекстФайла,ИнформацияОПачке)=0 тогда
				Возврат Неопределено;
			КонецЕсли;	
			
			// Список застрахованных лиц
			ЗаполнитьЗначенияСвойств(ОбластьШапкаСписка.Параметры,ИнформацияОПачке,"РасчетныйПериод,НомерПачкиРаботодателя");
			ЗаполнитьЗначенияСвойств(ОбластьШапкаСписка.Параметры,ИнформацияОПачке.ИнформацияОРаботодателе,"РегистрационныйНомерПФР,Наименование");
			ОбластьПодвалСписка.Параметры.ДатаСоставленияОписи = ПроцедурыПерсонифицированогоУчета.ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);
			ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьШапкаСписка);
		
			Если ТипФормДокументов = "СЗВ-4-1" Тогда
				
				// ПЕЧАТЬ ПАЧКИ ДОКУМЕНТОВ СЗВ-4-1
				
				Макет = ПолучитьМакет("ФормаСЗВ_4_1");
				ФорматЗаписиИН41 = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи("ИН41", ДокументФорматЗаписей);
				ФорматЗаписиСТАЖ = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи("СТАЖ", ДокументФорматЗаписей);
				ФорматЗаписиЛГОТ = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи("ЛГОТ", ДокументФорматЗаписей);
				
				// Рабочие области макета
				ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
				ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
				ОбластьСтаж 	= Макет.ПолучитьОбласть("Стаж");
				ОбластьСтраховыеПоВсемПодразделениям  = Макет.ПолучитьОбласть("СтраховыеПоВсемПодразделениям");
				
				// Заполнение данных шапки и подвала
				ОбластьШапка.Параметры.РегНомерПФР = ИнформацияОПачке.ИнформацияОРаботодателе.РегистрационныйНомерПФР;
				ОбластьШапка.Параметры.НаименованиеОрганизации = ИнформацияОПачке.ИнформацияОРаботодателе.Наименование;
				ОбластьШапка.Параметры.Год = ИнформацияОПачке.РасчетныйПериод;
				
				ОбластьПодвал.Параметры.ДолжностьРуководителя		 	= ОтветственныеЛица.РуководительДолжность;
				ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
				ОбластьПодвал.Параметры.Дата				 			= ПроцедурыПерсонифицированогоУчета.ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);
				
				
				Н=5;//Номер строки первой записи ИН41
				
				//Цикл по документам файла
				Для НомерДокумента = 1 по ИнформацияОПачке.ДокументовВПачке цикл
					
					//Читаем запись ИН41
					СтрокаФайла = СтрПолучитьСтроку(ТекстФайла, Н);
					Н= Н + 1;
					ЗаписьИН41 = ПроцедурыПерсонифицированогоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиИН41);
					СтрОшибка = "";
					Если НЕ ПроцедурыПерсонифицированогоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ИН41", ФорматЗаписиИН41, ЗаписьИН41, СтрОшибка) тогда
						Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
						Возврат Неопределено;
					КонецЕсли;	
					
					//Каждый новый работник с новой страницы (отдельная форма СЗВ-4-1)
					Если НомерДокумента<>1 тогда
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					// Данные по физлицу
					ОбластьШапка.Параметры.СтраховойНомерПФР 			= ЗаписьИН41.СтраховойНомер;
					ОбластьШапка.Параметры.ФИО			 				= ЗаписьИН41.Фамилия + " " + ЗаписьИН41.Имя + " " + ЗаписьИН41.Отчество;
					ОбластьШапка.Параметры.Адрес			 			= ВРег(РегламентированнаяОтчетность.ПредставлениеАдреса(НРег(ЗаписьИН41.АдресДляИнформирования), 0, ""));
					ОбластьШапка.Параметры.НачисленоСтраховаяЧасть 		= ЗаписьИН41.НачисленоСтраховаяЧасть;
					ОбластьШапка.Параметры.НачисленоНакопительнаяЧасть 	= ЗаписьИН41.НачисленоНакопительнаяЧасть;
					ОбластьШапка.Параметры.НачисленоДополнительныйТариф = ЗаписьИН41.НачисленоДополнительныйТариф;
					ОбластьШапка.Параметры.ДнейБолел 					= ПроцедурыПерсонифицированогоУчета.ПредставлениеПериодаБолезниОтпуска(ЗаписьИН41.ВременнаяНетрудоспособностьМесяцев,ЗаписьИН41.ВременнаяНетрудоспособностьДней);
					ОбластьШапка.Параметры.ДнейГулял 					= ПроцедурыПерсонифицированогоУчета.ПредставлениеПериодаБолезниОтпуска(ЗаписьИН41.ОтпускМесяцев, ЗаписьИН41.ОтпускДней);
					ДокументРезультат.Вывести(ОбластьШапка);
					
					//Цикл по основным записям о стаже
					Для НомерОснованойЗаписи = 1 по  ЗаписьИН41.ЧислоОсновныхЗаписейОСтаже цикл
						
						//Читаем запись СТАЖ
						СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
						Н= Н + 1;
						ЗаписьСТАЖ = ПроцедурыПерсонифицированогоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиСТАЖ);
						СтрОшибка = "";
						Если НЕ ПроцедурыПерсонифицированогоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "СТАЖ", ФорматЗаписиСТАЖ, ЗаписьСТАЖ, СтрОшибка) тогда
							Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
							Возврат Неопределено;
						КонецЕсли;	
						
						ОбластьСтаж.Параметры.НомерПериода				= НомерОснованойЗаписи;
						ОбластьСтаж.Параметры.ДатаНачалаПериода 		= ЗаписьСТАЖ.ДатаНачалаПериода;
						ОбластьСтаж.Параметры.ДатаОкончанияПериода 		= ЗаписьСТАЖ.ДатаОкончанияПериода;
						ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ЗаписьСТАЖ.ТерриториальныеУсловияКод;
						ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод 	= ЗаписьСТАЖ.ОсобыеУсловияТрудаКод;
						ОбластьСтаж.Параметры.КодПозицииСписка 			= ЗаписьСТАЖ.КодПозицииСписка;
						
						// Представление параметров ИТС
						ОбластьСтаж.Параметры.ОснованиеИТС				= ЗаписьСТАЖ.ОснованиеИсчисляемогоСтажаКод;
						ОбластьСтаж.Параметры.ДопИТС 					= ПроцедурыПерсонифицированогоУчета.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьСТАЖ);
						
						// Представление параметров выслуги лет
						ОбластьСтаж.Параметры.ОснованиеВыслуги			= ЗаписьСТАЖ.ОснованиеВыслугиЛетКод;
						ПроцедурыПерсонифицированогоУчета.ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьСТАЖ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
						
						ДокументРезультат.Вывести(ОбластьСтаж);
						
						//Цикл по дополнительным записям о стаже
						Для НомерДополнительнойЗаписи = 1 по  ЗаписьСТАЖ.ЧислоДополнительныхЗаписей цикл
							
							//Читаем запись ЛГОТ
							СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
							Н= Н + 1;
							ЗаписьЛГОТ = ПроцедурыПерсонифицированогоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиЛГОТ);
							СтрОшибка = "";
							Если НЕ ПроцедурыПерсонифицированогоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ЛГОТ", ФорматЗаписиЛГОТ, ЗаписьЛГОТ, СтрОшибка) тогда
								Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
								Возврат Неопределено;
							КонецЕсли;	
							
							// Выводим запись ЛГОТ
							ОбластьСтаж.Параметры.НомерПериода 				= "";
							ОбластьСтаж.Параметры.ДатаНачалаПериода 		= "";
							ОбластьСтаж.Параметры.ДатаОкончанияПериода 		= "";
							ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ЗаписьЛГОТ.ТерриториальныеУсловияКод;
							ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод 	= ЗаписьЛГОТ.ОсобыеУсловияТрудаКод;
							ОбластьСтаж.Параметры.КодПозицииСписка 			= ЗаписьЛГОТ.КодПозицииСписка;
							
							// Представление параметров ИТС
							ОбластьСтаж.Параметры.ОснованиеИТС				= ЗаписьЛГОТ.ОснованиеИсчисляемогоСтажаКод;
							ОбластьСтаж.Параметры.ДопИТС 					= ПроцедурыПерсонифицированогоУчета.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьЛГОТ);
							
							// Представление параметров выслуги лет
							ОбластьСтаж.Параметры.ОснованиеВыслуги			= ЗаписьЛГОТ.ОснованиеВыслугиЛетКод;
							ПроцедурыПерсонифицированогоУчета.ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьЛГОТ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
							
							ДокументРезультат.Вывести(ОбластьСтаж);
							
						КонецЦикла;//Цикл по дополнительным записям о стаже	
						
					КонецЦикла;// По основным записям о стаже	
					
					Если ФорматФайла=Перечисления.ФорматФайлаПФР.Версия07 Тогда
						// Страховые взносы включая обособленные подразделения
						ДокументРезультат.Вывести(ОбластьСтраховыеПоВсемПодразделениям);
					КонецЕсли;
					// Подвал формы
					ДокументРезультат.Вывести(ОбластьПодвал);
					
					// Список застрахованных лиц
				    ЗаполнитьЗначенияСвойств(ОбластьСтрокаСписка.Параметры,ОбластьШапка.Параметры,"СтраховойНомерПФР,ФИО");
					ОбластьСтрокаСписка.Параметры.НомерСтроки = НомерДокумента;
					
					// Проверим, уместится ли строка на странице или надо открывать новую страницу
					ВывестиПодвалЛиста = Не ДокументСписокЗастрахованныхЛиц.ПроверитьВывод(ВыводимыеОбласти);
					Если Не ВывестиПодвалЛиста и НомерДокумента = ИнформацияОПачке.ДокументовВПачке Тогда
						ВыводимыеОбласти.Добавить(ОбластьПодвалСписка);
						ВывестиПодвалЛиста = Не ДокументСписокЗастрахованныхЛиц.ПроверитьВывод(ВыводимыеОбласти);
					КонецЕсли;
					Если ВывестиПодвалЛиста Тогда
						ДокументСписокЗастрахованныхЛиц.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументСписокЗастрахованныхЛиц.Вывести(ПовторятьПриПечатиСтроки);
					КонецЕсли;
						
					ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьСтрокаСписка);
				
				КонецЦикла;// По документам	
				
				РаботаСДиалогами.НапечататьДокумент(ДокументРезультат, КоличествоЭкземпляров, НаПринтер, "Индивидуальные сведения (СЗВ-4-1); пачка №" + ИнформацияОПачке.НомерПачкиРаботодателя);
				
			Иначе	
				
				Вывести42как41 = ИмяМакета = "ФормаСЗВ_4_1";
				
				// ПЕЧАТЬ ПАЧКИ ДОКУМЕНТОВ СЗВ-4-2
				Если Вывести42как41 тогда
					Макет = ПолучитьМакет("ФормаСЗВ_4_1");
					ФорматЗаписиИН41 = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи("ИН42", ДокументФорматЗаписей);
					//ФорматЗаписиСТАЖ = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи("СТАЖ", ДокументФорматЗаписей);
					//ФорматЗаписиЛГОТ = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи("ЛГОТ", ДокументФорматЗаписей);
					
					// Рабочие области макета
					ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
					ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
					ОбластьСтаж 	= Макет.ПолучитьОбласть("Стаж");
					
					// Заполнение данных шапки и подвала
					ОбластьШапка.Параметры.РегНомерПФР = ИнформацияОПачке.ИнформацияОРаботодателе.РегистрационныйНомерПФР;
					ОбластьШапка.Параметры.НаименованиеОрганизации = ИнформацияОПачке.ИнформацияОРаботодателе.Наименование;
					ОбластьШапка.Параметры.Год = ИнформацияОПачке.РасчетныйПериод;
					
					ОбластьПодвал.Параметры.ДолжностьРуководителя		 	= ОтветственныеЛица.РуководительДолжность;
					ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
					ОбластьПодвал.Параметры.Дата				 			= ПроцедурыПерсонифицированогоУчета.ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);
				
					НомерДокумента = 0;
				Иначе	
					ДокументовСЗВ4_2вПачке = 1;
					Макет = ПолучитьМакет("ФормаСЗВ_4_2");
					ФорматЗаписиИН42 = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи("ИН42", ДокументФорматЗаписей);
					
					// Рабочие области макета
					ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
					ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
					ОбластьДокумент = Макет.ПолучитьОбласть("Документ");
					ОбластьПустойДокумент = Макет.ПолучитьОбласть("ПустойДокумент");
					
					// Заполнение данных шапки и подвала форм
					ОбластьШапка.Параметры.РегНомерПФР = ИнформацияОПачке.ИнформацияОРаботодателе.РегистрационныйНомерПФР;
					ОбластьШапка.Параметры.НаименованиеОрганизации = ИнформацияОПачке.ИнформацияОРаботодателе.Наименование;
					ОбластьШапка.Параметры.Год = ИнформацияОПачке.РасчетныйПериод;
					
					ОбластьПодвал.Параметры.ДолжностьРуководителя		 	= ОтветственныеЛица.РуководительДолжность;
					ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
					ОбластьПодвал.Параметры.Дата				 			= ПроцедурыПерсонифицированогоУчета.ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);
					
					// Вывод данных
					ДокументРезультат.Вывести(ОбластьШапка);
				КонецЕсли;
				
				ВсегоСтрокДокумента = СтрЧислоСтрок(ТекстФайла);
				Для Н=5 по ВсегоСтрокДокумента Цикл
					Если Вывести42как41 тогда
						
						//Читаем запись ИН41
						СтрокаФайла = СтрПолучитьСтроку(ТекстФайла, Н);
						ЗаписьИН41 = ПроцедурыПерсонифицированогоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиИН41);
						СтрОшибка = "";
						Если НЕ ПроцедурыПерсонифицированогоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ИН42", ФорматЗаписиИН41, ЗаписьИН41, СтрОшибка) тогда
							Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
							Возврат Неопределено;
						КонецЕсли;	
						
						//Каждый новый работник с новой страницы (отдельная форма СЗВ-4-1)
						Если НомерДокумента<>1 тогда
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;
						
						// Данные по физлицу
						ОбластьШапка.Параметры.СтраховойНомерПФР 			= ЗаписьИН41.СтраховойНомер;
						ОбластьШапка.Параметры.ФИО			 				= ЗаписьИН41.Фамилия + " " + ЗаписьИН41.Имя + " " + ЗаписьИН41.Отчество;
						ОбластьШапка.Параметры.Адрес			 			= ВРег(РегламентированнаяОтчетность.ПредставлениеАдреса(НРег(ЗаписьИН41.АдресДляИнформирования), 0, ""));
						ОбластьШапка.Параметры.НачисленоСтраховаяЧасть 		= ЗаписьИН41.НачисленоСтраховаяЧасть;
						ОбластьШапка.Параметры.НачисленоНакопительнаяЧасть 	= ЗаписьИН41.НачисленоНакопительнаяЧасть;
						ОбластьШапка.Параметры.НачисленоДополнительныйТариф = ЗаписьИН41.НачисленоДополнительныйТариф;
						ОбластьШапка.Параметры.ДнейБолел 					= ПроцедурыПерсонифицированогоУчета.ПредставлениеПериодаБолезниОтпуска(ЗаписьИН41.ВременнаяНетрудоспособностьМесяцев,ЗаписьИН41.ВременнаяНетрудоспособностьДней);
						ОбластьШапка.Параметры.ДнейГулял 					= ПроцедурыПерсонифицированогоУчета.ПредставлениеПериодаБолезниОтпуска(ЗаписьИН41.ОтпускМесяцев, ЗаписьИН41.ОтпускДней);
						ДокументРезультат.Вывести(ОбластьШапка);
						
						//Н= Н + 1;
						ОбластьСтаж.Параметры.НомерПериода				= 1;
						ОбластьСтаж.Параметры.ДатаНачалаПериода 		= ЗаписьИН41.ПериодРаботыДатаС;
						ОбластьСтаж.Параметры.ДатаОкончанияПериода 		= ЗаписьИН41.ПериодРаботыДатаПо;
						ОбластьСтаж.Параметры.ТерриториальныеУсловияКод	= ИнформацияОПачке.ТерриториальныеУсловия;
						ДокументРезультат.Вывести(ОбластьСтаж);
						
					    ЗаполнитьЗначенияСвойств(ОбластьСтрокаСписка.Параметры,ОбластьШапка.Параметры,"СтраховойНомерПФР,ФИО");
						НомерДокумента = НомерДокумента + 1; 
					
					Иначе
						
						//Прочитаем запись из файла
						СтрокаФайла = СтрПолучитьСтроку(ТекстФайла, Н);
						ЗаписьИН42 = ПроцедурыПерсонифицированогоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиИН42);
						СтрОшибка = "";
						Если НЕ ПроцедурыПерсонифицированогоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла,"ИН42",ФорматЗаписиИН42, ЗаписьИН42, СтрОшибка) тогда
							Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
							Возврат Неопределено;
						КонецЕсли;	
						
						ОбластьДокумент.Параметры.НомерДокументаВПачке 			= ЗаписьИН42.НомерДокументаВПачке;
						НомерДокумента = ЗаписьИН42.НомерДокументаВПачке;
						ОбластьДокумент.Параметры.СтраховойНомерПФР 			= ЗаписьИН42.СтраховойНомер;
						ОбластьДокумент.Параметры.ФИО			 				= ЗаписьИН42.Фамилия + " " + ЗаписьИН42.Имя + " " + ЗаписьИН42.Отчество;
						ОбластьДокумент.Параметры.Адрес			 				= ВРег(РегламентированнаяОтчетность.ПредставлениеАдреса(НРег(ЗаписьИН42.АдресДляИнформирования), 0, ""));
						ОбластьДокумент.Параметры.НачисленоСтраховаяЧасть 		= ЗаписьИН42.НачисленоСтраховаяЧасть;
						ОбластьДокумент.Параметры.НачисленоНакопительнаяЧасть 	= ЗаписьИН42.НачисленоНакопительнаяЧасть;
						ОбластьДокумент.Параметры.НачисленоДополнительныйТариф 	= ЗаписьИН42.НачисленоДополнительныйТариф;
						ОбластьДокумент.Параметры.ПериодРаботыДатаС 			= ЗаписьИН42.ПериодРаботыДатаС;
						ОбластьДокумент.Параметры.ПериодРаботыДатаПо 			= ЗаписьИН42.ПериодРаботыДатаПо;
						ОбластьДокумент.Параметры.ДнейБолел 					= ПроцедурыПерсонифицированогоУчета.ПредставлениеПериодаБолезниОтпуска(ЗаписьИН42.ВременнаяНетрудоспособностьМесяцев, ЗаписьИН42.ВременнаяНетрудоспособностьДней);
						ОбластьДокумент.Параметры.ДнейГулял 					= ПроцедурыПерсонифицированогоУчета.ПредставлениеПериодаБолезниОтпуска(ЗаписьИН42.ОтпускМесяцев, ЗаписьИН42.ОтпускДней);
						
						ДокументРезультат.Вывести(ОбластьДокумент);
					    ЗаполнитьЗначенияСвойств(ОбластьСтрокаСписка.Параметры,ОбластьДокумент.Параметры,"СтраховойНомерПФР,ФИО");
						
						//На лист выводим 10 документов
						Если (ЗаписьИН42.НомерДокументаВПачке%10 = 0) и (ЗаписьИН42.НомерДокументаВПачке <> ИнформацияОПачке.ДокументовВПачке) Тогда
							ДокументРезультат.Вывести(ОбластьПодвал);
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							ДокументРезультат.Вывести(ОбластьШапка);
							ДокументовСЗВ4_2вПачке = ДокументовСЗВ4_2вПачке + 1;
						КонецЕсли; 
					КонецЕсли;
				
					// Список застрахованных лиц
					ОбластьСтрокаСписка.Параметры.НомерСтроки = НомерДокумента;
					
					// Проверим, уместится ли строка на странице или надо открывать новую страницу
					ВывестиПодвалЛиста = Не ДокументСписокЗастрахованныхЛиц.ПроверитьВывод(ВыводимыеОбласти);
					Если Не ВывестиПодвалЛиста и Н = ВсегоСтрокДокумента Тогда
						ВыводимыеОбласти.Добавить(ОбластьПодвалСписка);
						ВывестиПодвалЛиста = Не ДокументСписокЗастрахованныхЛиц.ПроверитьВывод(ВыводимыеОбласти);
					КонецЕсли;
					Если ВывестиПодвалЛиста Тогда
						ДокументСписокЗастрахованныхЛиц.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументСписокЗастрахованныхЛиц.Вывести(ПовторятьПриПечатиСтроки);
					КонецЕсли;
						
					ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьСтрокаСписка);
					
				КонецЦикла;	
				
				Если НЕ Вывести42как41 тогда
					//Выведем пустые записи до 10 документов
					Если ЗаписьИН42.НомерДокументаВПачке%10 <> 0 тогда
						Для Н = ЗаписьИН42.НомерДокументаВПачке%10 по 9 цикл
							ДокументРезультат.Вывести(ОбластьПустойДокумент);
						КонецЦикла;	
					КонецЕсли;
				КонецЕсли;
				
				ДокументРезультат.Вывести(ОбластьПодвал);
				
				РаботаСДиалогами.НапечататьДокумент(ДокументРезультат, КоличествоЭкземпляров, НаПринтер, "Индивидуальные сведения (СЗВ-4-2); пачка №" + ИнформацияОПачке.НомерПачкиРаботодателя);
			КонецЕсли;	 
			
			//Печать описи документов
			ИнформацияОПачке.Вставить("ДокументовСЗВ4_2вПачке", ДокументовСЗВ4_2вПачке);
			ДокументОписи = Новый ТабличныйДокумент;
			ДокументОписи.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработкеСЗВ4_АДВ_6_1";
			ПроцедурыПерсонифицированогоУчета.ВывестиОписьАДВ6(ДокументОписи, ИнформацияОПачке, ОтветственныеЛица);
			РаботаСДиалогами.НапечататьДокумент(ДокументОписи,КоличествоЭкземпляров, НаПринтер,"Опись документов (АДВ-6-1); пачка №" + ИнформацияОПачке.НомерПачкиРаботодателя);
			
			// Список застрахованных лиц
			ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьПодвалСписка);
			Возврат РаботаСДиалогами.НапечататьДокумент(ДокументСписокЗастрахованныхЛиц,КоличествоЭкземпляров, НаПринтер,"Список застрахованных лиц; пачка №" + ИнформацияОПачке.НомерПачкиРаботодателя);
		
		ИначеЕсли ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда
			
			// формируем отчет по версии файла 07.00	
			ДеревоПФР = ПроцедурыПерсонифицированогоУчета.ПреобразоватьВДеревоXML(ТекстФайла);
			
			Если ДеревоПФР = Неопределено Тогда
				Отказ = Ложь;
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось разобрать файл с данными!",Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка));
				Возврат Неопределено 
			КонецЕсли;
			ДеревоПФР = ДеревоПФР.Строки.Найти("ФайлПФР","Имя");
			Если ДеревоПФР = Неопределено Тогда
				Отказ = Ложь;
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось разобрать файл с данными!",Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка));
				Возврат Неопределено 
			КонецЕсли;
			
			Если ТипФормДокументов = "СЗВ-4-1" Тогда
				
				// ПЕЧАТЬ ПАЧКИ ДОКУМЕНТОВ СЗВ-4-1
				
				Макет = ПолучитьМакет("ФормаСЗВ_4_1");
				
				// Рабочие области макета
				ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
				ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
				ОбластьСтаж 	= Макет.ПолучитьОбласть("Стаж");
				ОбластьСтраховыеПоВсемПодразделениям  = Макет.ПолучитьОбласть("СтраховыеПоВсемПодразделениям");
				
				НомерПачкиРаботодателя = "";
				
				//Печать описи документов
				ИнформацияОПачке = Новый Структура;
				ИнформацияОПачке.Вставить("ИнформацияОРаботодателе", Организация);
				ИнформацияОПачке.Вставить("ТипДокумента", "ИН41");
				ИнформацияОПачке.Вставить("ТерриториальныеУсловия", "");
				
				ОбластьПодвал.Параметры.ДолжностьРуководителя		 	= ОтветственныеЛица.РуководительДолжность;
				ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
				
				СтрокаДереваПачкаВходящихДокументов = ДеревоПФР.Строки.Найти("ПачкаВходящихДокументов","Имя");
				Если СтрокаДереваПачкаВходящихДокументов <> Неопределено Тогда
					
					СтрокаДереваВходящаяОпись = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВХОДЯЩАЯ_ОПИСЬ", "Имя");
					Если СтрокаДереваВходящаяОпись <> Неопределено Тогда
						
						СтрокаДереваСоставительПачки = СтрокаДереваВходящаяОпись.Строки.Найти("СоставительПачки", "Имя");
						Если СтрокаДереваСоставительПачки <> Неопределено Тогда
							// Заполнение данных шапки и подвала
							ОбластьШапка.Параметры.РегНомерПФР = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваСоставительПачки, "РегистрационныйНомер");
							ОбластьШапка.Параметры.НаименованиеОрганизации = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваСоставительПачки, "НаименованиеКраткое");
						КонецЕсли;
						
						СтрокаДереваПачкаСЗВ4 = СтрокаДереваВходящаяОпись.Строки.Найти("ПачкаСЗВ4");
						Если СтрокаДереваПачкаСЗВ4 <> Неопределено Тогда
							
							ОбластьШапка.Параметры.Год = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "РасчетныйПериод");
							
							СтрокаДереваСоставДокументов = СтрокаДереваВходящаяОпись.Строки.Найти("СоставДокументов", "Имя");
							Если СтрокаДереваСоставДокументов <> Неопределено Тогда
								СтрокаДереваНаличиеДокументов = СтрокаДереваСоставДокументов.Строки.Найти("НаличиеДокументов", "Имя");
								Если СтрокаДереваНаличиеДокументов <> Неопределено Тогда
									ИнформацияОПачке.Вставить("ДокументовВПачке", ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНаличиеДокументов, "Количество"));
								КонецЕсли;
							КонецЕсли;
							
							СтрокаДереваТарифСтраховыхВзносов = СтрокаДереваПачкаСЗВ4.Строки.Найти("ТарифСтраховыхВзносов", "Имя");
							Если СтрокаДереваТарифСтраховыхВзносов <> Неопределено Тогда
								ИнформацияОПачке.Вставить("КодКатегорииЗастрахованногоЛица", ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваТарифСтраховыхВзносов, "КодКатегории"));
								ИнформацияОПачке.Вставить("КодДополнительногоТарифа", ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваТарифСтраховыхВзносов, "КодДополнительногоТарифа"));
							КонецЕсли;
							
							СтрокаДереваИтогоСуммаВзносов = СтрокаДереваПачкаСЗВ4.Строки.Найти("ИтогоСуммаВзносов", "Имя");
							Если СтрокаДереваИтогоСуммаВзносов <> Неопределено Тогда
								ИнформацияОПачке.Вставить("ИтогоВзносыСтраховаяЧасть", Формат(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Страховые")), "ЧДЦ=2"));
								ИнформацияОПачке.Вставить("ИтогоВзносыНакопительнаяЧасть", Формат(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Накопительные")), "ЧДЦ=2"));
								ИнформацияОПачке.Вставить("ИтогоВзносыПоДопТарифу", Формат(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Дополнительные")), "ЧДЦ=2"));
							КонецЕсли;
							
							ВидКорректировкиВФайле = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "ВидКорректировки");
							Если ВидКорректировкиВФайле = "КОРРЕКТИРУЮЩАЯ" Тогда
								ИнформацияОПачке.Вставить("ВидКорректировки", "КОРР");
							ИначеЕсли ВидКорректировкиВФайле = "ОТМЕНЯЮЩАЯ" Тогда
								ИнформацияОПачке.Вставить("ВидКорректировки", "ОТМН");
							Иначе
								ИнформацияОПачке.Вставить("ВидКорректировки", "");
							КонецЕсли;
							
							ТипСведенийВФайле = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "ТипСведений");
							Если ТипСведенийВФайле = "ИСХОДНАЯ" Тогда
								ИнформацияОПачке.Вставить("ТипСведений", "ИСХД");
							Иначеесли ТипСведенийВФайле = "ПЕНСИОННАЯ" Тогда
								ИнформацияОПачке.Вставить("ТипСведений", "ПЕНС");
							Иначе
								ИнформацияОПачке.Вставить("ТипСведений", "");
							КонецЕсли;
							
						КонецЕсли;
						
						СтрокаДереваНомерПачки = СтрокаДереваВходящаяОпись.Строки.Найти("НомерПачки", "Имя");
						Если СтрокаДереваНомерПачки <> Неопределено Тогда
							СтрокаДереваОсновной = СтрокаДереваНомерПачки.Строки.Найти("Основной", "Имя");
							Если СтрокаДереваОсновной <> Неопределено Тогда
								НомерПачкиРаботодателя = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "Основной");
							Иначе
								НомерПачкиРаботодателя = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "ПоПодразделению");
							КонецЕсли;
						КонецЕсли;
						
						ДатаСоставления = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВходящаяОпись, "ДатаСоставления");
						ОбластьПодвал.Параметры.Дата = ПроцедурыПерсонифицированогоУчета.ДатаXMLВОтчет(ДатаСоставления);
						ИнформацияОПачке.Вставить("ДатаСоставленияОписи", ПроцедурыПерсонифицированогоУчета.ДатаXMLВОтчет(ДатаСоставления, Ложь));
						
					КонецЕсли;
					
					ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", НомерПачкиРаботодателя);
					ИнформацияОПачке.Вставить("РасчетныйПериод", ОбластьШапка.Параметры.Год);
							
					// Список застрахованных лиц
					ЗаполнитьЗначенияСвойств(ОбластьШапкаСписка.Параметры,ИнформацияОПачке,"РасчетныйПериод,НомерПачкиРаботодателя");
					ЗаполнитьЗначенияСвойств(ОбластьШапкаСписка.Параметры,ИнформацияОПачке.ИнформацияОРаботодателе,"РегистрационныйНомерПФР,Наименование");
					ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьШапкаСписка);
					
					НомерДокумента = 0;
					
					//Цикл по документам файла
					Для Каждого СтрокаДереваИССЗВ41 Из СтрокаДереваПачкаВходящихДокументов.Строки Цикл
						
						//Читаем запись ИН41
						Если СтрокаДереваИССЗВ41.Имя = "ИС_СЗВ-4-1" Тогда
							//Каждый новый работник с новой страницы (отдельная форма СЗВ-4-1)
							
							НомерДокумента = НомерДокумента + 1;
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							
							// Данные по физлицу
							ОбластьШапка.Параметры.СтраховойНомерПФР = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваИССЗВ41, "СтраховойНомер");
							СтрокаДереваФИО = СтрокаДереваИССЗВ41.Строки.Найти("ФИО");
							Если СтрокаДереваФИО <> Неопределено Тогда
								ОбластьШапка.Параметры.ФИО = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Фамилия") + " " + ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Имя") + " " + ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Отчество");
							КонецЕсли;
							
							СтрокаДереваАдресЗЛ = СтрокаДереваИССЗВ41.Строки.Найти("АдресЗЛ");
							Если СтрокаДереваАдресЗЛ <> Неопределено Тогда
								ОбластьШапка.Параметры.Адрес = ВРег(ПроцедурыПерсонифицированогоУчета.ПредставлениеАдресадляПФР(СтрокаДереваАдресЗЛ));
							КонецЕсли;
							
							СтрокаДереваНачисленоВзносовОсновных = СтрокаДереваИССЗВ41.Строки.Найти("НачисленоВзносовОсновных");
							Если СтрокаДереваНачисленоВзносовОсновных <> Неопределено Тогда
								ОбластьШапка.Параметры.НачисленоСтраховаяЧасть 		= Формат(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовОсновных, "Страховые")), "ЧДЦ=2");
								ОбластьШапка.Параметры.НачисленоНакопительнаяЧасть 	= Формат(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовОсновных, "Накопительные")), "ЧДЦ=2");
								ОбластьШапка.Параметры.НачисленоДополнительныйТариф = Формат(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовОсновных, "Дополнительные")), "ЧДЦ=2");
							КонецЕсли;
							
							СтрокаДереваБольничныеЛисты = СтрокаДереваИССЗВ41.Строки.Найти("БольничныеЛисты");
							Если СтрокаДереваБольничныеЛисты <> Неопределено Тогда
								ОбластьШапка.Параметры.ДнейБолел = ПроцедурыПерсонифицированогоУчета.ПредставлениеПериодаБолезниОтпуска(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваБольничныеЛисты, "ВсеМесяцы")),Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваБольничныеЛисты, "ВсеДни")));
							КонецЕсли;
							
							СтрокаДереваАдминистративныйОтпуск = СтрокаДереваИССЗВ41.Строки.Найти("АдминистративныйОтпуск");
							Если СтрокаДереваАдминистративныйОтпуск <> Неопределено Тогда
								ОбластьШапка.Параметры.ДнейГулял = ПроцедурыПерсонифицированогоУчета.ПредставлениеПериодаБолезниОтпуска(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваАдминистративныйОтпуск, "ВсеМесяцы")), Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваАдминистративныйОтпуск, "ВсеДни")));
							КонецЕсли;
							
							ДокументРезультат.Вывести(ОбластьШапка);
							
							
							//Цикл по основным записям о стаже
							СтрокаДереваВсеПериодыРаботы = СтрокаДереваИССЗВ41.Строки.Найти("ВсеПериодыРаботы");
							Если СтрокаДереваВсеПериодыРаботы <> Неопределено Тогда
								//Читаем запись СТАЖ
								
								Для Каждого СтрокаДереваПериодРаботы Из СтрокаДереваВсеПериодыРаботы.Строки Цикл
									СтрокаДереваОсновнаяСтрока = СтрокаДереваПериодРаботы.Строки.Найти("ОсновнаяСтрока");
									Если СтрокаДереваОсновнаяСтрока <> Неопределено Тогда
										ОбластьСтаж.Параметры.НомерПериода 				= ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваОсновнаяСтрока, "НомерСтроки");
										ОбластьСтаж.Параметры.ДатаНачалаПериода 		= ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваОсновнаяСтрока, "ДатаНачалаПериода");
										ОбластьСтаж.Параметры.ДатаОкончанияПериода 		= ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваОсновнаяСтрока, "ДатаКонцаПериода");
										
										СтрокаДереваОсобенностиУчета = СтрокаДереваОсновнаяСтрока.Строки.Найти("ОсобенностиУчета");
										Если СтрокаДереваОсобенностиУчета <> Неопределено Тогда
											
											СтрокаДереваТерриториальныеУсловия = СтрокаДереваОсобенностиУчета.Строки.Найти("ТерриториальныеУсловия");
											Если СтрокаДереваТерриториальныеУсловия <> Неопределено Тогда
												ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваОсобенностиУчета, "ОснованиеТУ");
											КонецЕсли;
											
											СтрокаДереваОсобыеУсловияТруда = СтрокаДереваОсобенностиУчета.Строки.Найти("ОсобыеУсловияТруда");
											Если СтрокаДереваОсобыеУсловияТруда <> Неопределено Тогда
												ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод 	= ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ОснованиеОУТ");
												ОбластьСтаж.Параметры.КодПозицииСписка = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ПозицияСписка");
											КонецЕсли;
											
											
											
											СтрокаДереваИсчисляемыйСтаж = СтрокаДереваОсобенностиУчета.Строки.Найти("ИсчисляемыйСтаж");
											Если СтрокаДереваИсчисляемыйСтаж <> Неопределено Тогда
												// Представление параметров ИТС
												ОбластьСтаж.Параметры.ОснованиеИТС = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваИсчисляемыйСтаж, "ОснованиеИС");
												
												
												ЗаписьЛгот = Новый Структура;
												СтрокаДереваВыработкаВЧасах = СтрокаДереваИсчисляемыйСтаж.Строки.Найти("ВыработкаВчасах");
												СтрокаДереваВыработкаКалендарная = СтрокаДереваИсчисляемыйСтаж.Строки.Найти("ВыработкаКалендарная");
												ПервыйПараметрИсчисляемогоСтажа = 0;
												ВторойПараметрИсчисляемогоСтажа = 0;
												ТретийПараметрИсчисляемогоСтажа = 0;
												Если СтрокаДереваВыработкаВЧасах <> Неопределено Тогда
													ПервыйПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Часы");
													ВторойПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Минуты");
													//ТретийПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "
												ИначеЕсли СтрокаДереваВыработкаКалендарная <> Неопределено Тогда
													ПервыйПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеМесяцы");
													ВторойПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеДни");
													ТретийПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеГоды");
												КонецЕсли;
												
												ЗаписьЛгот.Вставить("ОснованиеИсчисляемогоСтажаКод", ОбластьСтаж.Параметры.ОснованиеИТС);
												ЗаписьЛгот.Вставить("ПервыйПараметрИсчисляемогоСтажа", Число(ПервыйПараметрИсчисляемогоСтажа));
												ЗаписьЛгот.Вставить("ВторойПараметрИсчисляемогоСтажа", Число(ВторойПараметрИсчисляемогоСтажа));
												ЗаписьЛгот.Вставить("ТретийПараметрИсчисляемогоСтажа", Число(ТретийПараметрИсчисляемогоСтажа));
												
												ОбластьСтаж.Параметры.ДопИТС= ПроцедурыПерсонифицированогоУчета.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьЛГОТ);
												
												
												
											КонецЕсли;
											
											СтрокаДереваВыслугаЛет = СтрокаДереваОсобенностиУчета.Строки.Найти("ВыслугаЛет");
											Если СтрокаДереваВыслугаЛет <> Неопределено Тогда
												
												// Представление параметров выслуги лет
												ОбластьСтаж.Параметры.ОснованиеВыслуги = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ОснованиеВЛ");
												
												
												СтрокаДереваВыработкаВЧасах = СтрокаДереваВыслугаЛет.Строки.Найти("ВыработкаВчасах");
												СтрокаДереваВыработкаКалендарная = СтрокаДереваВыслугаЛет.Строки.Найти("ВыработкаКалендарная");
												
												Если СтрокаДереваВыработкаВЧасах <> Неопределено Тогда
													ПервыйПараметрВыслугиЛет = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Часы");
													ВторойПараметрВыслугиЛет = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Минуты");
												ИначеЕсли СтрокаДереваВыработкаКалендарная <> Неопределено Тогда
													ПервыйПараметрВыслугиЛет = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеМесяцы");
													ВторойПараметрВыслугиЛет = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеДни");
												КонецЕсли;
												ТретийПараметрВыслугиЛет = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ДоляСтавки");
												ЗаписьЛгот = Новый Структура;
												ЗаписьЛгот.Вставить("ОснованиеВыслугиЛетКод",ОбластьСтаж.Параметры.ОснованиеВыслуги);
												ЗаписьЛгот.Вставить("ПервыйПараметрВыслугиЛет",Число(ПервыйПараметрВыслугиЛет));
												ЗаписьЛгот.Вставить("ВторойПараметрВыслугиЛет",Число(ВторойПараметрВыслугиЛет));
												ЗаписьЛгот.Вставить("ТретийПараметрВыслугиЛет",Число(ТретийПараметрВыслугиЛет));
												
												
												ПроцедурыПерсонифицированогоУчета.ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьЛГОТ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
												
											КонецЕсли;
										КонецЕсли;
										ДокументРезультат.Вывести(ОбластьСтаж);
									КонецЕсли;
									СтрокаДереваДополнительныеСтроки = СтрокаДереваПериодРаботы.Строки.Найти("ДополнительныеСтроки");
									Если СтрокаДереваДополнительныеСтроки <> Неопределено Тогда
										Для Каждого СтрокаДереваОсобенностиУчета Из СтрокаДереваДополнительныеСтроки.Строки Цикл
											Если СтрокаДереваОсобенностиУчета.Имя = "ОсобенностиУчета" Тогда
												// Выводим запись ЛГОТ
												ОбластьСтаж.Параметры.НомерПериода 				= "";
												ОбластьСтаж.Параметры.ДатаНачалаПериода 		= "";
												ОбластьСтаж.Параметры.ДатаОкончанияПериода 		= "";
												
												СтрокаДереваТерриториальныеУсловия = СтрокаДереваОсобенностиУчета.Строки.Найти("ТерриториальныеУсловия");
												Если СтрокаДереваТерриториальныеУсловия <> Неопределено Тогда
													ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваТерриториальныеУсловия, "ОснованиеТУ");
												КонецЕсли;
												
												СтрокаДереваОсобыеУсловияТруда = СтрокаДереваОсобенностиУчета.Строки.Найти("ОсобыеУсловияТруда");
												Если СтрокаДереваОсобыеУсловияТруда <> Неопределено Тогда
													ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ОснованиеОУТ");
													ОбластьСтаж.Параметры.КодПозицииСписка = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ПозицияСписка");
												КонецЕсли;
												
												
												
												// Представление параметров ИТС
												СтрокаДереваИсчисляемыйСтаж = СтрокаДереваОсобенностиУчета.Строки.Найти("ИсчисляемыйСтаж");
												Если СтрокаДереваИсчисляемыйСтаж <> Неопределено Тогда
													ОбластьСтаж.Параметры.ОснованиеИТС = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваИсчисляемыйСтаж, "ОснованиеИС");
													ЗаписьЛгот = Новый Структура;
													СтрокаДереваВыработкаВЧасах = СтрокаДереваИсчисляемыйСтаж.Строки.Найти("ВыработкаВчасах");
													СтрокаДереваВыработкаКалендарная = СтрокаДереваИсчисляемыйСтаж.Строки.Найти("ВыработкаКалендарная");
													ПервыйПараметрИсчисляемогоСтажа = 0;
													ВторойПараметрИсчисляемогоСтажа = 0;
													ТретийПараметрИсчисляемогоСтажа = 0;
													Если СтрокаДереваВыработкаВЧасах <> Неопределено Тогда
														ПервыйПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Часы");
														ВторойПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Минуты");
														//ТретийПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "
													ИначеЕсли СтрокаДереваВыработкаКалендарная <> Неопределено Тогда
														ПервыйПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеМесяцы");
														ВторойПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеДни");
														ТретийПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеГоды");
													КонецЕсли;
													
													ЗаписьЛгот.Вставить("ОснованиеИсчисляемогоСтажаКод", ОбластьСтаж.Параметры.ОснованиеИТС);
													ЗаписьЛгот.Вставить("ПервыйПараметрИсчисляемогоСтажа", Число(ПервыйПараметрИсчисляемогоСтажа));
													ЗаписьЛгот.Вставить("ВторойПараметрИсчисляемогоСтажа", Число(ВторойПараметрИсчисляемогоСтажа));
													ЗаписьЛгот.Вставить("ТретийПараметрИсчисляемогоСтажа", Число(ТретийПараметрИсчисляемогоСтажа));
													
													ОбластьСтаж.Параметры.ДопИТС= ПроцедурыПерсонифицированогоУчета.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьЛГОТ);
												КонецЕсли;
												
												// Представление параметров выслуги лет
												СтрокаДереваВыслугаЛет = СтрокаДереваОсобенностиУчета.Строки.Найти("ВыслугаЛет");
												Если СтрокаДереваВыслугаЛет <> Неопределено Тогда
													ОбластьСтаж.Параметры.ОснованиеВыслуги = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ОснованиеВЛ");
													СтрокаДереваВыработкаВЧасах = СтрокаДереваВыслугаЛет.Строки.Найти("ВыработкаВчасах");
													СтрокаДереваВыработкаКалендарная = СтрокаДереваВыслугаЛет.Строки.Найти("ВыработкаКалендарная");
													
													Если СтрокаДереваВыработкаВЧасах <> Неопределено Тогда
														ПервыйПараметрВыслугиЛет = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Часы");
														ВторойПараметрВыслугиЛет = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Минуты");
													ИначеЕсли СтрокаДереваВыработкаКалендарная <> Неопределено Тогда
														ПервыйПараметрВыслугиЛет = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеМесяцы");
														ВторойПараметрВыслугиЛет = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеДни");
													КонецЕсли;
													ТретийПараметрВыслугиЛет = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ДоляСтавки");
													ЗаписьЛгот = Новый Структура;
													ЗаписьЛгот.Вставить("ОснованиеВыслугиЛетКод",ОбластьСтаж.Параметры.ОснованиеВыслуги);
													ЗаписьЛгот.Вставить("ПервыйПараметрВыслугиЛет",Число(ПервыйПараметрВыслугиЛет));
													ЗаписьЛгот.Вставить("ВторойПараметрВыслугиЛет",Число(ВторойПараметрВыслугиЛет));
													ЗаписьЛгот.Вставить("ТретийПараметрВыслугиЛет",Число(ТретийПараметрВыслугиЛет));
													
													ПроцедурыПерсонифицированогоУчета.ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьЛГОТ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
												КонецЕсли;
												
												ДокументРезультат.Вывести(ОбластьСтаж);
											КонецЕсли;
										КонецЦикла;
									КонецЕсли; // Дополнительные записи о стаже
								КонецЦикла;
							КонецЕсли; // Основные записи о стаже
							
							// Страховые взносы включая обособленные подразделения
							ДокументРезультат.Вывести(ОбластьСтраховыеПоВсемПодразделениям);

							// Подвал формы
							ДокументРезультат.Вывести(ОбластьПодвал);
							
							// Список застрахованных лиц
						    ЗаполнитьЗначенияСвойств(ОбластьСтрокаСписка.Параметры,ОбластьШапка.Параметры,"СтраховойНомерПФР,ФИО");
							ОбластьСтрокаСписка.Параметры.НомерСтроки = НомерДокумента;
							
							// Проверим, уместится ли строка на странице или надо открывать новую страницу
							ВывестиПодвалЛиста = Не ДокументСписокЗастрахованныхЛиц.ПроверитьВывод(ВыводимыеОбласти);
							Если Не ВывестиПодвалЛиста и НомерДокумента = ИнформацияОПачке.ДокументовВПачке Тогда
								ВыводимыеОбласти.Добавить(ОбластьПодвалСписка);
								ВывестиПодвалЛиста = Не ДокументСписокЗастрахованныхЛиц.ПроверитьВывод(ВыводимыеОбласти);
							КонецЕсли;
							Если ВывестиПодвалЛиста Тогда
								ДокументСписокЗастрахованныхЛиц.ВывестиГоризонтальныйРазделительСтраниц();
								ДокументСписокЗастрахованныхЛиц.Вывести(ПовторятьПриПечатиСтроки);
							КонецЕсли;
								
							ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьСтрокаСписка);
				
						КонецЕсли;
					КонецЦикла; // по документам
					
					Если СтрокаДереваВходящаяОпись <> Неопределено Тогда
						
						РаботаСДиалогами.НапечататьДокумент(ДокументРезультат, КоличествоЭкземпляров, НаПринтер, "Индивидуальные сведения (СЗВ-4-1); пачка №" + НомерПачкиРаботодателя);
						
						ДокументОписи = Новый ТабличныйДокумент;
						ДокументОписи.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработкеСЗВ4_АДВ_6_1";
						ПроцедурыПерсонифицированогоУчета.ВывестиОписьАДВ6(ДокументОписи, ИнформацияОПачке, ОтветственныеЛица);
						РаботаСДиалогами.НапечататьДокумент(ДокументОписи,КоличествоЭкземпляров, НаПринтер,"Опись документов (АДВ-6-1); пачка №" + НомерПачкиРаботодателя);
						
						// Список застрахованных лиц
						ОбластьПодвалСписка.Параметры.ДатаСоставленияОписи = ПроцедурыПерсонифицированогоУчета.ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);
						ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьПодвалСписка);
						Возврат РаботаСДиалогами.НапечататьДокумент(ДокументСписокЗастрахованныхЛиц,КоличествоЭкземпляров, НаПринтер,"Список застрахованных лиц; пачка №" + НомерПачкиРаботодателя);
		
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе	
				
				Вывести42как41 = ИмяМакета = "ФормаСЗВ_4_1";
				
				ТерриториальныеУсловияОтчета = "";
				НомерПачкиРаботодателя = "";
				
				//Печать описи документов
				ИнформацияОПачке = Новый Структура;
				ИнформацияОПачке.Вставить("ТерриториальныеУсловия", "");
				ИнформацияОПачке.Вставить("ИнформацияОРаботодателе", Организация);
				
				Макет = ПолучитьМакет(?(Вывести42как41,"ФормаСЗВ_4_1","ФормаСЗВ_4_2"));
				
				// Рабочие области макета
				ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
				ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
				
				ОбластьПодвал.Параметры.ДолжностьРуководителя		 	= ОтветственныеЛица.РуководительДолжность;
				ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
				
				// ПЕЧАТЬ ПАЧКИ ДОКУМЕНТОВ СЗВ-4-2
				Если Вывести42как41 тогда
					
					// Рабочие области макета
					ОбластьСтаж 	= Макет.ПолучитьОбласть("Стаж");
				
					СтрокаДереваПачкаВходящихДокументов = ДеревоПФР.Строки.Найти("ПачкаВходящихДокументов","Имя");
					Если СтрокаДереваПачкаВходящихДокументов <> Неопределено Тогда
						
						СтрокаДереваВходящаяОпись = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВХОДЯЩАЯ_ОПИСЬ", "Имя");
						Если СтрокаДереваВходящаяОпись <> Неопределено Тогда
							
							СтрокаДереваСоставительПачки = СтрокаДереваВходящаяОпись.Строки.Найти("СоставительПачки", "Имя");
							Если СтрокаДереваСоставительПачки <> Неопределено Тогда
								// Заполнение данных шапки и подвала
								ОбластьШапка.Параметры.РегНомерПФР = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваСоставительПачки, "РегистрационныйНомер");
								ОбластьШапка.Параметры.НаименованиеОрганизации = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваСоставительПачки, "НаименованиеКраткое");
							КонецЕсли;
							
							СтрокаДереваПачкаСЗВ4 = СтрокаДереваВходящаяОпись.Строки.Найти("ПачкаСЗВ4");
							Если СтрокаДереваПачкаСЗВ4 <> Неопределено Тогда
								ОбластьШапка.Параметры.Год = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "РасчетныйПериод");
								СтрокаДереваТерриториальныеУсловия = СтрокаДереваПачкаСЗВ4.Строки.Найти("ТерриториальныеУсловия");
								Если СтрокаДереваТерриториальныеУсловия <> Неопределено Тогда
									ТерриториальныеУсловияОтчета = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "ОснованиеТУ");
								КонецЕсли;
								
							КонецЕсли;
							ОбластьПодвал.Параметры.Дата = ПроцедурыПерсонифицированогоУчета.ДатаXMLВОтчет(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВходящаяОпись, "ДатаСоставления"));

							СтрокаДереваНомерПачки = СтрокаДереваВходящаяОпись.Строки.Найти("НомерПачки", "Имя");
							Если СтрокаДереваНомерПачки <> Неопределено Тогда
								СтрокаДереваОсновной = СтрокаДереваНомерПачки.Строки.Найти("Основной", "Имя");
								Если СтрокаДереваОсновной <> Неопределено Тогда
									НомерПачкиРаботодателя = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "Основной");
								Иначе
									НомерПачкиРаботодателя = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "ПоПодразделению");
								КонецЕсли;
								
								СтрокаДереваПачкаСЗВ4 = СтрокаДереваВходящаяОпись.Строки.Найти("ПачкаСЗВ4", "Имя");
								Если СтрокаДереваПачкаСЗВ4 <> Неопределено Тогда
									//Печать описи документов
									ИнформацияОПачке.Вставить("ДокументовСЗВ4_2вПачке", ДокументовСЗВ4_2вПачке);
									
									СтрокаДереваСоставДокументов = СтрокаДереваВходящаяОпись.Строки.Найти("СоставДокументов", "Имя");
									Если СтрокаДереваСоставДокументов <> Неопределено Тогда
										СтрокаДереваНаличиеДокументов = СтрокаДереваСоставДокументов.Строки.Найти("НаличиеДокументов", "Имя");
										Если СтрокаДереваНаличиеДокументов <> Неопределено Тогда
											ИнформацияОПачке.Вставить("ДокументовВПачке", ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНаличиеДокументов, "Количество"));
										КонецЕсли;
									КонецЕсли;
									
									ИнформацияОПачке.Вставить("ТипДокумента", "ИН42");
									ИнформацияОПачке.Вставить("РасчетныйПериод", ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "РасчетныйПериод"));
									
									СтрокаДереваТарифСтраховыхВзносов = СтрокаДереваПачкаСЗВ4.Строки.Найти("ТарифСтраховыхВзносов", "Имя");
									Если СтрокаДереваТарифСтраховыхВзносов <> Неопределено Тогда
										ИнформацияОПачке.Вставить("КодКатегорииЗастрахованногоЛица", ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваТарифСтраховыхВзносов, "КодКатегории"));
										ИнформацияОПачке.Вставить("КодДополнительногоТарифа", ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваТарифСтраховыхВзносов, "КодДополнительногоТарифа"));
									КонецЕсли;
									
									СтрокаДереваТерриториальныеУсловия = СтрокаДереваПачкаСЗВ4.Строки.Найти("ТерриториальныеУсловия", "Имя");
									Если СтрокаДереваТерриториальныеУсловия <> Неопределено Тогда
										ИнформацияОПачке.Вставить("ТерриториальныеУсловия", ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваТерриториальныеУсловия, "ОснованиеТУ"));
									КонецЕсли;
									
									СтрокаДереваИтогоСуммаВзносов = СтрокаДереваПачкаСЗВ4.Строки.Найти("ИтогоСуммаВзносов", "Имя");
									Если СтрокаДереваИтогоСуммаВзносов <> Неопределено Тогда
										ИнформацияОПачке.Вставить("ИтогоВзносыСтраховаяЧасть", Формат(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Страховые")),"ЧДЦ=2"));
										ИнформацияОПачке.Вставить("ИтогоВзносыНакопительнаяЧасть", Формат(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Накопительные")),"ЧДЦ=2"));
										ИнформацияОПачке.Вставить("ИтогоВзносыПоДопТарифу", Формат(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Дополнительные")),"ЧДЦ=2"));
									КонецЕсли;
									
									ВидКорректировкиВФайле = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "ВидКорректировки");
									Если ВидКорректировкиВФайле = "КОРРЕКТИРУЮЩАЯ" Тогда
										ИнформацияОПачке.Вставить("ВидКорректировки", "КОРР");
									ИначеЕсли ВидКорректировкиВФайле = "ОТМЕНЯЮЩАЯ" Тогда
										ИнформацияОПачке.Вставить("ВидКорректировки", "ОТМН");
									Иначе
										ИнформацияОПачке.Вставить("ВидКорректировки", "");
									КонецЕсли;
									
									ТипСведенийВФайле = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "ТипСведений");
									Если ТипСведенийВФайле = "ИСХОДНАЯ" Тогда
										ИнформацияОПачке.Вставить("ТипСведений", "ИСХД");
									Иначеесли ТипСведенийВФайле = "ПЕНСИОННАЯ" Тогда
										ИнформацияОПачке.Вставить("ТипСведений", "ПЕНС");
									Иначе
										ИнформацияОПачке.Вставить("ТипСведений", "");
									КонецЕсли;
									
									ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", НомерПачкиРаботодателя);
									ИнформацияОПачке.Вставить("ДатаСоставленияОписи", ПроцедурыПерсонифицированогоУчета.ДатаXMLВОтчет(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВходящаяОпись, "ДатаСоставления"), Ложь));
									
								КонецЕсли;
								
							КонецЕсли;
						КонецЕсли
						
					КонецЕсли;
					
				Иначе
					
					ДокументовСЗВ4_2вПачке = 1;
					
					// Рабочие области макета
					ОбластьПустойДокумент = Макет.ПолучитьОбласть("ПустойДокумент");
					ОбластьДокумент = Макет.ПолучитьОбласть("Документ");
					
					СтрокаДереваПачкаВходящихДокументов = ДеревоПФР.Строки.Найти("ПачкаВходящихДокументов","Имя");
					Если СтрокаДереваПачкаВходящихДокументов <> Неопределено Тогда
						
						СтрокаДереваВходящаяОпись = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВХОДЯЩАЯ_ОПИСЬ", "Имя");
						Если СтрокаДереваВходящаяОпись <> Неопределено Тогда
							
							СтрокаДереваСоставительПачки = СтрокаДереваВходящаяОпись.Строки.Найти("СоставительПачки", "Имя");
							Если СтрокаДереваСоставительПачки <> Неопределено Тогда
								// Заполнение данных шапки и подвала
								ОбластьШапка.Параметры.РегНомерПФР = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваСоставительПачки, "РегистрационныйНомер");
								ОбластьШапка.Параметры.НаименованиеОрганизации = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваСоставительПачки, "НаименованиеКраткое");
							КонецЕсли;
							
							СтрокаДереваСоставДокументов = СтрокаДереваВходящаяОпись.Строки.Найти("СоставДокументов");
							Если СтрокаДереваСоставДокументов <> Неопределено Тогда
								СтрокаДереваНаличиеДокументов = СтрокаДереваСоставДокументов.Строки.Найти("НаличиеДокументов");
								Если СтрокаДереваНаличиеДокументов <> Неопределено Тогда
									КоличествоДокументовВПачке = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНаличиеДокументов, "Количество");
								КонецЕсли;
							КонецЕсли;
							
							СтрокаДереваПачкаСЗВ4 = СтрокаДереваВходящаяОпись.Строки.Найти("ПачкаСЗВ4");
							Если СтрокаДереваПачкаСЗВ4 <> Неопределено Тогда
								ОбластьШапка.Параметры.Год = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "РасчетныйПериод");
							КонецЕсли;
							ОбластьПодвал.Параметры.Дата = ПроцедурыПерсонифицированогоУчета.ДатаXMLВОтчет(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВходящаяОпись, "ДатаСоставления"));

							СтрокаДереваНомерПачки = СтрокаДереваВходящаяОпись.Строки.Найти("НомерПачки", "Имя");
							Если СтрокаДереваНомерПачки <> Неопределено Тогда
								СтрокаДереваОсновной = СтрокаДереваНомерПачки.Строки.Найти("Основной", "Имя");
								Если СтрокаДереваОсновной <> Неопределено Тогда
									НомерПачкиРаботодателя = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "Основной");
								Иначе
									НомерПачкиРаботодателя = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "ПоПодразделению");
								КонецЕсли;
								
								СтрокаДереваПачкаСЗВ4 = СтрокаДереваВходящаяОпись.Строки.Найти("ПачкаСЗВ4", "Имя");
								Если СтрокаДереваПачкаСЗВ4 <> Неопределено Тогда
									//Печать описи документов
									ИнформацияОПачке.Вставить("ДокументовСЗВ4_2вПачке", ДокументовСЗВ4_2вПачке);
									
									СтрокаДереваСоставДокументов = СтрокаДереваВходящаяОпись.Строки.Найти("СоставДокументов", "Имя");
									Если СтрокаДереваСоставДокументов <> Неопределено Тогда
										СтрокаДереваНаличиеДокументов = СтрокаДереваСоставДокументов.Строки.Найти("НаличиеДокументов", "Имя");
										Если СтрокаДереваНаличиеДокументов <> Неопределено Тогда
											ИнформацияОПачке.Вставить("ДокументовВПачке", ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНаличиеДокументов, "Количество"));
										КонецЕсли;
									КонецЕсли;
									
									ИнформацияОПачке.Вставить("ТипДокумента", "ИН42");
									ИнформацияОПачке.Вставить("РасчетныйПериод", ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "РасчетныйПериод"));
									
									СтрокаДереваТарифСтраховыхВзносов = СтрокаДереваПачкаСЗВ4.Строки.Найти("ТарифСтраховыхВзносов", "Имя");
									Если СтрокаДереваТарифСтраховыхВзносов <> Неопределено Тогда
										ИнформацияОПачке.Вставить("КодКатегорииЗастрахованногоЛица", ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваТарифСтраховыхВзносов, "КодКатегории"));
										ИнформацияОПачке.Вставить("КодДополнительногоТарифа", ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваТарифСтраховыхВзносов, "КодДополнительногоТарифа"));
									КонецЕсли;
									
									СтрокаДереваТерриториальныеУсловия = СтрокаДереваПачкаСЗВ4.Строки.Найти("ТерриториальныеУсловия", "Имя");
									Если СтрокаДереваТерриториальныеУсловия <> Неопределено Тогда
										ИнформацияОПачке.Вставить("ТерриториальныеУсловия", ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваТерриториальныеУсловия, "ОснованиеТУ"));
									КонецЕсли;
									
									СтрокаДереваИтогоСуммаВзносов = СтрокаДереваПачкаСЗВ4.Строки.Найти("ИтогоСуммаВзносов", "Имя");
									Если СтрокаДереваИтогоСуммаВзносов <> Неопределено Тогда
										ИнформацияОПачке.Вставить("ИтогоВзносыСтраховаяЧасть", Формат(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Страховые")),"ЧДЦ=2"));
										ИнформацияОПачке.Вставить("ИтогоВзносыНакопительнаяЧасть", Формат(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Накопительные")),"ЧДЦ=2"));
										ИнформацияОПачке.Вставить("ИтогоВзносыПоДопТарифу", Формат(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Дополнительные")),"ЧДЦ=2"));
									КонецЕсли;
									
									ВидКорректировкиВФайле = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "ВидКорректировки");
									Если ВидКорректировкиВФайле = "КОРРЕКТИРУЮЩАЯ" Тогда
										ИнформацияОПачке.Вставить("ВидКорректировки", "КОРР");
									ИначеЕсли ВидКорректировкиВФайле = "ОТМЕНЯЮЩАЯ" Тогда
										ИнформацияОПачке.Вставить("ВидКорректировки", "ОТМН");
									Иначе
										ИнформацияОПачке.Вставить("ВидКорректировки", "");
									КонецЕсли;
									
									ТипСведенийВФайле = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "ТипСведений");
									Если ТипСведенийВФайле = "ИСХОДНАЯ" Тогда
										ИнформацияОПачке.Вставить("ТипСведений", "ИСХД");
									Иначеесли ТипСведенийВФайле = "ПЕНСИОННАЯ" Тогда
										ИнформацияОПачке.Вставить("ТипСведений", "ПЕНС");
									Иначе
										ИнформацияОПачке.Вставить("ТипСведений", "");
									КонецЕсли;
									
									ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", НомерПачкиРаботодателя);
									ИнформацияОПачке.Вставить("ДатаСоставленияОписи", ПроцедурыПерсонифицированогоУчета.ДатаXMLВОтчет(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваВходящаяОпись, "ДатаСоставления"), Ложь));
									
								КонецЕсли;
								
							КонецЕсли;
						КонецЕсли
						
					КонецЕсли;
					
					// Вывод данных
					ДокументРезультат.Вывести(ОбластьШапка);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ОбластьШапкаСписка.Параметры,ИнформацияОПачке,"РасчетныйПериод,НомерПачкиРаботодателя");
				ЗаполнитьЗначенияСвойств(ОбластьШапкаСписка.Параметры,ИнформацияОПачке.ИнформацияОРаботодателе,"РегистрационныйНомерПФР,Наименование");
				ОбластьПодвалСписка.Параметры.ДатаСоставленияОписи = ПроцедурыПерсонифицированогоУчета.ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);
				ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьШапкаСписка);
		
				НомерДокумента = 0;
					
				Для Каждого СтрокаДереваИССЗВ42 Из СтрокаДереваПачкаВходящихДокументов.Строки Цикл
					
					НомерДокумента = НомерДокумента + 1;
					
					Если СтрокаДереваИССЗВ42.Имя = "ИС_СЗВ-4-2" Тогда
						
						Если Вывести42как41 тогда
							
							//Каждый новый работник с новой страницы (отдельная форма СЗВ-4-1)
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							
							// Данные по физлицу
							ОбластьШапка.Параметры.СтраховойНомерПФР 			= ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваИССЗВ42, "СтраховойНомер");
							
							СтрокаДереваФИО = СтрокаДереваИССЗВ42.Строки.Найти("ФИО");
							Если СтрокаДереваФИО <> Неопределено Тогда
								ОбластьШапка.Параметры.ФИО = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Фамилия") + " " + ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Имя") + " " + ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Отчество");
							КонецЕсли;
							
							ЗаполнитьЗначенияСвойств(ОбластьСтрокаСписка.Параметры,ОбластьШапка.Параметры,"СтраховойНомерПФР,ФИО");
							
							СтрокаДереваАдресЗЛ = СтрокаДереваИССЗВ42.Строки.Найти("АдресЗЛ");
							Если СтрокаДереваАдресЗЛ <> Неопределено Тогда
								ОбластьШапка.Параметры.Адрес= ВРег(ПроцедурыПерсонифицированогоУчета.ПредставлениеАдресадляПФР(СтрокаДереваАдресЗЛ));
							КонецЕсли;
							СтрокаДереваНачисленоВзносовОсновных = СтрокаДереваИССЗВ42.Строки.Найти("НачисленоВзносовОсновных");
							Если СтрокаДереваНачисленоВзносовОсновных <> Неопределено Тогда
								ОбластьШапка.Параметры.НачисленоСтраховаяЧасть 		= Формат(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовОсновных, "Страховые")), "ЧДЦ=2");
								ОбластьШапка.Параметры.НачисленоНакопительнаяЧасть 	= Формат(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовОсновных, "Накопительные")), "ЧДЦ=2");
								ОбластьШапка.Параметры.НачисленоДополнительныйТариф = Формат(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовОсновных, "Дополнительные")), "ЧДЦ=2");
							КонецЕсли;
							
							СтрокаДереваБольничныеЛисты = СтрокаДереваИССЗВ42.Строки.Найти("БольничныеЛисты");
							Если СтрокаДереваБольничныеЛисты <> Неопределено Тогда
								ОбластьШапка.Параметры.ДнейБолел = ПроцедурыПерсонифицированогоУчета.ПредставлениеПериодаБолезниОтпуска(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваБольничныеЛисты, "ВсеМесяцы")),Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваБольничныеЛисты, "ВсеДни")));
							КонецЕсли;
							
							СтрокаДереваАдминистративныйОтпуск = СтрокаДереваИССЗВ42.Строки.Найти("АдминистративныйОтпуск");
							Если СтрокаДереваАдминистративныйОтпуск <> Неопределено Тогда
								ОбластьШапка.Параметры.ДнейГулял = ПроцедурыПерсонифицированогоУчета.ПредставлениеПериодаБолезниОтпуска(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваАдминистративныйОтпуск, "ВсеМесяцы")), Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваАдминистративныйОтпуск, "ВсеДни")));
							КонецЕсли;
							ДокументРезультат.Вывести(ОбластьШапка);
							
							СтрокаДереваВсеПериодыРаботы = СтрокаДереваИССЗВ42.Строки.Найти("ВсеПериодыРаботы");
							Если СтрокаДереваВсеПериодыРаботы <> Неопределено Тогда
								//Читаем запись СТАЖ
								
								СтрокаДереваПериодРаботы = СтрокаДереваВсеПериодыРаботы.Строки.Найти("ПериодРаботы");
								Если СтрокаДереваПериодРаботы <> Неопределено Тогда
									СтрокаДереваОсновнаяСтрока = СтрокаДереваПериодРаботы.Строки.Найти("ОсновнаяСтрока");
									Если СтрокаДереваОсновнаяСтрока <> Неопределено Тогда
										ОбластьСтаж.Параметры.НомерПериода 				= ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваОсновнаяСтрока, "НомерСтроки");
										ОбластьСтаж.Параметры.ДатаНачалаПериода 		= ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваОсновнаяСтрока, "ДатаНачалаПериода");
										ОбластьСтаж.Параметры.ДатаОкончанияПериода 		= ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваОсновнаяСтрока, "ДатаКонцаПериода");
										ОбластьСтаж.Параметры.ТерриториальныеУсловияКод	= ТерриториальныеУсловияОтчета;
										ДокументРезультат.Вывести(ОбластьСтаж);
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;
						Иначе
							
							//Прочитаем запись из файла
							
							ОбластьДокумент.Параметры.НомерДокументаВПачке 			= Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваИССЗВ42, "НомерВпачке"))-1;
							ОбластьДокумент.Параметры.СтраховойНомерПФР 			= ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваИССЗВ42, "СтраховойНомер");
							СтрокаДереваФИО = СтрокаДереваИССЗВ42.Строки.Найти("ФИО");
							Если СтрокаДереваФИО <> Неопределено Тогда
								ОбластьДокумент.Параметры.ФИО = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Фамилия") + " " + ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Имя") + " " + ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Отчество");
							КонецЕсли;
							ЗаполнитьЗначенияСвойств(ОбластьСтрокаСписка.Параметры,ОбластьДокумент.Параметры,"СтраховойНомерПФР,ФИО");
							
							СтрокаДереваАдресЗЛ = СтрокаДереваИССЗВ42.Строки.Найти("АдресЗЛ");
							Если СтрокаДереваАдресЗЛ <> Неопределено Тогда
								ОбластьДокумент.Параметры.Адрес = ВРег(ПроцедурыПерсонифицированогоУчета.ПредставлениеАдресадляПФР(СтрокаДереваАдресЗЛ));
							КонецЕсли;
							
							СтрокаДереваНачисленоВзносовОсновных = СтрокаДереваИССЗВ42.Строки.Найти("НачисленоВзносовОсновных");
							Если СтрокаДереваНачисленоВзносовОсновных <> Неопределено Тогда
								ОбластьДокумент.Параметры.НачисленоСтраховаяЧасть 		= Формат(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовОсновных, "Страховые")), "ЧДЦ=2");
								ОбластьДокумент.Параметры.НачисленоНакопительнаяЧасть 	= Формат(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовОсновных, "Накопительные")), "ЧДЦ=2");
								ОбластьДокумент.Параметры.НачисленоДополнительныйТариф = Формат(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовОсновных, "Дополнительные")), "ЧДЦ=2");
							КонецЕсли;
							
							СтрокаДереваВсеПериодыРаботы = СтрокаДереваИССЗВ42.Строки.Найти("ВсеПериодыРаботы");
							Если СтрокаДереваВсеПериодыРаботы <> Неопределено Тогда
								//Читаем запись СТАЖ
								
								СтрокаДереваПериодРаботы = СтрокаДереваВсеПериодыРаботы.Строки.Найти("ПериодРаботы");
								Если СтрокаДереваПериодРаботы <> Неопределено Тогда
									СтрокаДереваОсновнаяСтрока = СтрокаДереваПериодРаботы.Строки.Найти("ОсновнаяСтрока");
									Если СтрокаДереваОсновнаяСтрока <> Неопределено Тогда
										ОбластьДокумент.Параметры.ПериодРаботыДатаС = ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваОсновнаяСтрока, "ДатаНачалаПериода");
										ОбластьДокумент.Параметры.ПериодРаботыДатаПо 		= ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваОсновнаяСтрока, "ДатаКонцаПериода");
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;
							СтрокаДереваБольничныеЛисты = СтрокаДереваИССЗВ42.Строки.Найти("БольничныеЛисты");
							Если СтрокаДереваБольничныеЛисты <> Неопределено Тогда
								ОбластьДокумент.Параметры.ДнейБолел = ПроцедурыПерсонифицированогоУчета.ПредставлениеПериодаБолезниОтпуска(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваБольничныеЛисты, "ВсеМесяцы")),Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваБольничныеЛисты, "ВсеДни")));
							КонецЕсли;
							
							СтрокаДереваАдминистративныйОтпуск = СтрокаДереваИССЗВ42.Строки.Найти("АдминистративныйОтпуск");
							Если СтрокаДереваАдминистративныйОтпуск <> Неопределено Тогда
								ОбластьДокумент.Параметры.ДнейГулял = ПроцедурыПерсонифицированогоУчета.ПредставлениеПериодаБолезниОтпуска(Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваАдминистративныйОтпуск, "ВсеМесяцы")), Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваАдминистративныйОтпуск, "ВсеДни")));
							КонецЕсли;
							ДокументРезультат.Вывести(ОбластьДокумент);
							
							НомерВПачке = Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваИССЗВ42,"НомерВпачке"))-1;
							//На лист выводим 10 документов
							Если (НомерВПачке%10 = 0) и (НомерВПачке <> КоличествоДокументовВПачке) Тогда
								ДокументРезультат.Вывести(ОбластьПодвал);
								ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
								ДокументРезультат.Вывести(ОбластьШапка);
								ДокументовСЗВ4_2вПачке = ДокументовСЗВ4_2вПачке + 1;
							КонецЕсли; 
							
						КонецЕсли;
						
						// Список застрахованных лиц
						ОбластьСтрокаСписка.Параметры.НомерСтроки = НомерДокумента;
						
						// Проверим, уместится ли строка на странице или надо открывать новую страницу
						ВывестиПодвалЛиста = Не ДокументСписокЗастрахованныхЛиц.ПроверитьВывод(ВыводимыеОбласти);
						Если Не ВывестиПодвалЛиста и НомерДокумента = ИнформацияОПачке.ДокументовВПачке Тогда
							ВыводимыеОбласти.Добавить(ОбластьПодвалСписка);
							ВывестиПодвалЛиста = Не ДокументСписокЗастрахованныхЛиц.ПроверитьВывод(ВыводимыеОбласти);
						КонецЕсли;
						Если ВывестиПодвалЛиста Тогда
							ДокументСписокЗастрахованныхЛиц.ВывестиГоризонтальныйРазделительСтраниц();
							ДокументСписокЗастрахованныхЛиц.Вывести(ПовторятьПриПечатиСтроки);
						КонецЕсли;
						
						ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьСтрокаСписка);
				
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ Вывести42как41 тогда
					//Выведем пустые записи до 10 документов
					НомерДокументаВПачке = Число(ПроцедурыПерсонифицированогоУчета.ИзвлечьДанное(СтрокаДереваИССЗВ42, "НомерВпачке"))-1;
					Если НомерДокументаВПачке%10 <> 0 тогда
						Для Н = НомерДокументаВПачке%10 по 9 цикл
							ДокументРезультат.Вывести(ОбластьПустойДокумент);
						КонецЦикла;	
					КонецЕсли;
				КонецЕсли;
				
				ДокументРезультат.Вывести(ОбластьПодвал);
				
				Если СтрокаДереваВходящаяОпись <> Неопределено Тогда
					
					РаботаСДиалогами.НапечататьДокумент(ДокументРезультат, КоличествоЭкземпляров, НаПринтер, "Индивидуальные сведения (СЗВ-4-" + ?(Вывести42как41,"1","2") + "); пачка №" + НомерПачкиРаботодателя);
					
					ДокументОписи = Новый ТабличныйДокумент;
					ДокументОписи.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработкеСЗВ4_АДВ_6_1";
					ПроцедурыПерсонифицированогоУчета.ВывестиОписьАДВ6(ДокументОписи, ИнформацияОПачке, ОтветственныеЛица);
					РаботаСДиалогами.НапечататьДокумент(ДокументОписи,КоличествоЭкземпляров, НаПринтер,"Опись документов (АДВ-6-1); пачка №" + НомерПачкиРаботодателя);
					
					ОбластьПодвалСписка.Параметры.ДатаСоставленияОписи = ПроцедурыПерсонифицированогоУчета.ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);
					ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьПодвалСписка);
					Возврат РаботаСДиалогами.НапечататьДокумент(ДокументСписокЗастрахованныхЛиц,КоличествоЭкземпляров, НаПринтер,"Список застрахованных лиц; пачка №" + НомерПачкиРаботодателя);
				КонецЕсли
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецЕсли

// Формирует файл, который можно будет записать на дискетку
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Строка - содержимое файла
//
Функция СформироватьВыходнойФайл(Отказ, ПроверятьШапку = Истина) Экспорт
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	
	
	//Проверка корректности заполнения документа
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	КоличествоДокументов = ВыборкаПоШапкеДокумента.Количество();
	
	ПроверитьЗаполнениеДокумента(ВыборкаПоШапкеДокумента,Отказ, Заголовок, ПроверятьШапку);
	Если Отказ тогда
		Возврат "";
	КонецЕсли;	 
	
	//Выполним проверку записей стажа и получим результат запроса к самим записям
	РезультатЗапросаПоЗаписямСтажа = "";
	Если НЕ ПроцедурыПерсонифицированогоУчета.СЗВ4_ПроверитьНаборЗаписейОСтаже(Ссылка,Новый Структура("ДатаАктуальности,Организация, ГоловнаяОрганизация" , Дата(Год, 12, 31, 23, 59,59), Организация, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация) , РезультатЗапросаПоЗаписямСтажа) тогда
		Отказ = Истина;
		Возврат "";
	КонецЕсли;	
	
	Если ТипФормДокументов = "СЗВ-4-1" Тогда
		ТипЗаписиИН = "ИН41";
		ТУвПачке = "";// Территориальные условия указываются в записях о стаже
	Иначе	
		ТипЗаписиИН = "ИН42";
		ТУвПачке = СокрЛП(ВыборкаПоШапкеДокумента.ТерриториальныеУсловияКод);// Территориальные условия едины для всей пачки
	КонецЕсли; 
	
	ДатаЗаполнения 			= ВыборкаПоШапкеДокумента.Дата;
	РасчетныйПериодГод      = ВыборкаПоШапкеДокумента.Год;
	
	////////////////////////////////////////////////////////////////////////////////////////////
	//ФОРМИРУЕМ ФАЙЛ СВЕДЕНИЙ
	
	ТекстФайла	=	"";
	НомерДокументаВПачке = 0;
	//Формируем заголовок файла 
	НомерПачки 		= ПроцедурыПерсонифицированогоУчета.НомерПачкиДокумента(ВыборкаПоШапкеДокумента.Номер);
	
	// Формирование файла версии 04.00
	Если ВыборкаПоШапкеДокумента.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда
                     		              		
		//Получаем форматы необходимых записей
		ДокументФорматЗаписей = ПолучитьМакет("ФорматЗаписей");
		ФорматЗаписиИН = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи(ТипЗаписиИН,ДокументФорматЗаписей);
		Если ТипЗаписиИН = "ИН41" Тогда
			ФорматЗаписиСТАЖ = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи("СТАЖ",ДокументФорматЗаписей);
			ФорматЗаписиЛГОТ = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи("ЛГОТ",ДокументФорматЗаписей);
		КонецЕсли;
		
		
		ВыборкаПоРаботникиОрганизации	= РезультатЗапросаПоЗаписямСтажа.Выбрать();
		
		ВсегоНачисленоНаСтраховуюЧастьПФР = 0;
		ВсегоНачисленоНаНакопительнуюЧастьПФР = 0;
		
		Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерСтроки")	Цикл
			
			НомерДокументаВПачке = НомерДокументаВПачке + 1;
			
			// ПРОВЕРКА ДАННЫХ ФИЗЛИЦА
			
			СтрокаНачалаСообщенияОбОшибке = "В строке № """+ СокрЛП(ВыборкаПоРаботникиОрганизации.НомерСтроки) + """: " + "По работнику "+ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование + " ";
			
			//Инициалы должны быть указаны
			Фамилия = ВыборкаПоРаботникиОрганизации.Фамилия;
			Имя = ВыборкаПоРаботникиОрганизации.Имя;
			Отчество = ВыборкаПоРаботникиОрганизации.Отчество;
			Если "" + Фамилия + Имя + Отчество = ""  тогда
				ПроцедурыУправленияПерсоналом.ФамилияИнициалыФизЛица(ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование,Фамилия,Имя,Отчество);
			КонецЕсли;	
			
			Если СокрЛП(СтрЗаменить(ВыборкаПоРаботникиОрганизации.АдресДляИнформирования, ",","")) <> "" Тогда
				АдресДляИнформирования = ВыборкаПоРаботникиОрганизации.АдресДляИнформирования;
			Иначе	
				АдресДляИнформирования = "";	
			КонецЕсли; 
			
			Если ВидКорректировки <> "ОТМН"  Тогда
				Если ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода = NULL И ВыборкаПоРаботникиОрганизации.НачисленоНаСтраховуюЧастьПФР = 0 И ВыборкаПоРаботникиОрганизации.НачисленоНаНакопительнуюЧастьПФР = 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Данных о стаже и взносах не обнаружено!", Отказ, Заголовок);
				КонецЕсли; 
			КонецЕсли; 
			
			ПроверитьДанныеФизлица(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Фамилия, Имя, Отказ, Заголовок);
			
			// ФОРМИРОВАНИЕ ЗАПИСЕЙ ИН41 и ИН42
			
			// Общие данные записей ИН41 и ИН42
			ЗаписьИН = ПроцедурыПерсонифицированогоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиИН);
			ЗаписьИН.ТипЗаписи = ТипЗаписиИН;
			ЗаписьИН.НомерДокументаВПачке = НомерДокументаВПачке;
			ЗаписьИН.СтраховойНомер = ВыборкаПоРаботникиОрганизации.СтраховойНомерПФР;
			ЗаписьИН.Фамилия = ВРЕГ(Фамилия);
			ЗаписьИН.Имя = ВРЕГ(Имя);
			ЗаписьИН.Отчество = ВРЕГ(Отчество);
			ЗаписьИН.РасчетныйПериодГод = РасчетныйПериодГод;
			
			ЗаписьИН.ДатаЗаполнения = ДатаЗаполнения;
			
			Если ВидКорректировки = "ОТМН" Тогда// Для отменяюмей корректировки больше ничего не надо
				//	Добавим в файл запись ИН
				СтрокавФайл = ПроцедурыПерсонифицированогоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьИН,ФорматЗаписиИН);
				ТекстФайла	=	ТекстФайла	+	СтрокавФайл + Символы.ПС;
				
				ЗаписьИН.Удалить("АдресДляИнформирования");
				Продолжить;
			КонецЕсли; 
			ЗаписьИН.АдресДляИнформирования = ВРЕГ(АдресДляИнформирования);
			
			ЗаписьИН.НачисленоСтраховаяЧасть = ВыборкаПоРаботникиОрганизации.НачисленоНаСтраховуюЧастьПФР;
			ЗаписьИН.НачисленоНакопительнаяЧасть = ВыборкаПоРаботникиОрганизации.НачисленоНаНакопительнуюЧастьПФР;
			ЗаписьИН.ВременнаяНетрудоспособностьМесяцев = Цел(ВыборкаПоРаботникиОрганизации.ДнейБолезни/30);
			ЗаписьИН.ВременнаяНетрудоспособностьДней = ВыборкаПоРаботникиОрганизации.ДнейБолезни%30;
			ЗаписьИН.ОтпускМесяцев = Цел(ВыборкаПоРаботникиОрганизации.ДнейОтпускаЗаСвойСчет/30);
			ЗаписьИН.ОтпускДней = ВыборкаПоРаботникиОрганизации.ДнейОтпускаЗаСвойСчет%30;
			
			
			// Итоги по пачке
			ВсегоНачисленоНаСтраховуюЧастьПФР = ВсегоНачисленоНаСтраховуюЧастьПФР + ВыборкаПоРаботникиОрганизации.НачисленоНаСтраховуюЧастьПФР;
			ВсегоНачисленоНаНакопительнуюЧастьПФР = ВсегоНачисленоНаНакопительнуюЧастьПФР + ВыборкаПоРаботникиОрганизации.НачисленоНаНакопительнуюЧастьПФР;
			
			
			// СБОР ДАННЫХ О СТАЖЕ
			
			//Переменный для хранения строк о стаже работника (для формы СЗВ-4-1)
			ЧислоОсновныхЗаписейОСтаже = 0;
			СтрокиСтажРаботникаОрганизации = "";
			// Признак наличия у работника основания для льготного стажа
			РаботникОрганизацииИмеетЛьготныйСтаж = ЛОЖЬ;
			// Признак соответствия территориальных условий стажа работника и пачки (для формы СЗВ-4-2)
			ТУРаботникаНеСоответствуютПачке = ЛОЖЬ;
			
			Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл
				
				ЧислоОсновныхЗаписейОСтаже = ЧислоОсновныхЗаписейОСтаже + 1; 
				
				Если ТипФормДокументов = "СЗВ-4-2" Тогда
					// Заполнение периода работы  для записи ИН42
					
					Если ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи = 1 Тогда
						
						ЗаписьИН.ПериодРаботыДатаС = ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода;
						ЗаписьИН.ПериодРаботыДатаПо = ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода;
						
						// Признак наличия у работника основания для льготного стажа
						Если НЕ ПустаяСтрока(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод) ИЛИ НЕ ПустаяСтрока(ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод) ИЛИ НЕ ПустаяСтрока(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод) Тогда
							
							РаботникОрганизацииИмеетЛьготныйСтаж = Истина;
							
						Иначе
							// Проверяем сооответствие территориальных условий пачке
							Если Строка(ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод) <> ТУвПачке Тогда
								ТУРаботникаНеСоответствуютПачке = Истина;
							КонецЕсли; 
							
						КонецЕсли; 
						
					КонецЕсли; 
					
				Иначе	// ТипФормДокументов = "СЗВ-4-1"
					
					//Берем пустую запись "Основная запись о стаже"
					ЗаписьСТАЖ = ПроцедурыПерсонифицированогоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиСТАЖ);
					ЗаписьСТАЖ.ТипЗаписи = "СТАЖ";
					ЗаписьСТАЖ.НомерПериода = ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи;
					ЗаписьСТАЖ.ДатаНачалаПериода = ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода;
					ЗаписьСТАЖ.ДатаОкончанияПериода = ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода;
					ЗаписьСТАЖ.ОсобыеУсловияТрудаКод = ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод;
					ЗаписьСТАЖ.КодПозицииСписка = ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод;
					ЗаписьСТАЖ.ОснованиеИсчисляемогоСтажаКод = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
					ЗаписьСТАЖ.ПервыйПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
					ЗаписьСТАЖ.ВторойПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
					ЗаписьСТАЖ.ТретийПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
					ЗаписьСТАЖ.ОснованиеВыслугиЛетКод = ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод;
					ЗаписьСТАЖ.ПервыйПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
					ЗаписьСТАЖ.ВторойПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
					ЗаписьСТАЖ.ТретийПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
					ЗаписьСТАЖ.ТерриториальныеУсловияКод = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
					//ЗаписьЛГОТ.РайонныйКоэффициент = ВыборкаПоРаботникиОрганизации.РайонныйКоэффициент;
					
				КонецЕсли; 
				
				//Переменный для хранения дополнительных записей о стаже
				ЧислоДополнительныхЗаписейОСтаже = 0;
				СтрокиДополнительныеЗаписи = "";
				
				Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")	Цикл
					
					//В дополнительной записи с номером 0 находится информация об основной записи
					Если ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи = 0 тогда
						Продолжить;
					КонецЕсли;	
					
					РаботникОрганизацииИмеетЛьготныйСтаж = Истина;
					
					Если ТипФормДокументов = "СЗВ-4-1" Тогда
						
						ЧислоДополнительныхЗаписейОСтаже = ЧислоДополнительныхЗаписейОСтаже + 1;
						
						//Берем пустую запись "Запись о льготном стаже"
						ЗаписьЛГОТ = ПроцедурыПерсонифицированогоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиЛГОТ);
						ЗаписьЛГОТ.ТипЗаписи = "ЛГОТ";
						ЗаписьЛГОТ.НомерЗаписи = ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи;
						ЗаписьЛГОТ.ОсобыеУсловияТрудаКод = ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод;
						ЗаписьЛГОТ.КодПозицииСписка = ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод;
						ЗаписьЛГОТ.ОснованиеИсчисляемогоСтажаКод = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
						ЗаписьЛГОТ.ПервыйПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
						ЗаписьЛГОТ.ВторойПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
						ЗаписьЛГОТ.ТретийПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
						ЗаписьЛГОТ.ОснованиеВыслугиЛетКод = ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод;
						ЗаписьЛГОТ.ПервыйПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
						ЗаписьЛГОТ.ВторойПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
						ЗаписьЛГОТ.ТретийПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
						ЗаписьЛГОТ.ТерриториальныеУсловияКод = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
						//ЗаписьЛГОТ.РайонныйКоэффициент = ВыборкаПоРаботникиОрганизации.РайонныйКоэффициент;
						
						//Сохраним запись ЛГОТ
						СтрокавФайл = ПроцедурыПерсонифицированогоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьЛГОТ, ФорматЗаписиЛГОТ);
						СтрокиДополнительныеЗаписи = СтрокиДополнительныеЗаписи + СтрокавФайл + Символы.ПС;
					КонецЕсли; 
					
				КонецЦикла;// Выборка по дополнительным записям о стаже
				
				Если ТипФормДокументов = "СЗВ-4-1" Тогда
					
					ЗаписьСТАЖ.ЧислоДополнительныхЗаписей = ЧислоДополнительныхЗаписейОСтаже;
					
					//Сохраним запись СТАЖ
					СтрокавФайл = ПроцедурыПерсонифицированогоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьСТАЖ,ФорматЗаписиСТАЖ);
					СтрокиСтажРаботникаОрганизации  = СтрокиСтажРаботникаОрганизации + СтрокавФайл + Символы.ПС;
					
					//Добавим записи ЛГОТ
					СтрокиСтажРаботникаОрганизации  = СтрокиСтажРаботникаОрганизации + ВРЕГ(СтрокиДополнительныеЗаписи);
					
				КонецЕсли;	
				
			КонецЦикла;// Выборка по основным записям о стаже
			
			
			// ДОБАВЛЯЕМ ЗАПИСЬ ИН В ФАЙЛ
			
			Если ТипФормДокументов = "СЗВ-4-1" Тогда
				
				ЗаписьИН.ЧислоОсновныхЗаписейОСтаже = ЧислоОсновныхЗаписейОСтаже;
				
				//	Добавляем в файл записи ИН41, СТАЖ И ЛГОТ
				СтрокавФайл = ПроцедурыПерсонифицированогоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьИН,ФорматЗаписиИН);
				ТекстФайла	=	ТекстФайла	+	СтрокавФайл + Символы.ПС + ВРег(СтрокиСтажРаботникаОрганизации);
				
			Иначе// Проверки для формы СЗВ-4-2
				Если Не Отказ Тогда
					Если (ЧислоОсновныхЗаписейОСтаже > 1) ИЛИ (СтрЧислоСтрок(СтрокиСтажРаботникаОрганизации) > 1) Тогда
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Работник имеет более одной записи о стаже.
						|				Данные необходимо подавать по форме СЗВ-4-1!", Отказ, Заголовок);
					ИначеЕсли РаботникОрганизацииИмеетЛьготныйСтаж тогда	
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- В записях о стаже имеется льготный стаж. 
						|				Данные необходимо подавать по форме СЗВ-4-1!", Отказ, Заголовок);
					ИначеЕсли ТУРаботникаНеСоответствуютПачке тогда	
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Территориальные условия не соответствуют пачке!", Отказ);
					КонецЕсли; 			
				КонецЕсли; 
				
				//	Добавляем в файл записи ИН42
				СтрокавФайл = ПроцедурыПерсонифицированогоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьИН,ФорматЗаписиИН);
				ТекстФайла	=	ТекстФайла	+	СтрокавФайл + Символы.ПС;
				
			КонецЕсли; 
			
		КонецЦикла;// Выборка работников  
		
		// Если указан вид корректировки, то ИСХД в файл выводить не надо
		Если ВыборкаПоШапкеДокумента.ТипСведений = "ИСХД" и ВыборкаПоШапкеДокумента.ВидКорректировки <>"" Тогда
			ТипСведенийДляЗаписиПачки = "";
		Иначе	
			ТипСведенийДляЗаписиПачки = ВыборкаПоШапкеДокумента.ТипСведений;
		КонецЕсли; 
		
		ЗаголовокФайла	=	ПроцедурыПерсонифицированогоУчета.ПолучитьЗаписьЗаголовок();
		ЗаголовокФайла	=	ЗаголовокФайла + ПроцедурыПерсонифицированогоУчета.ПолучитьЗаписьОРаботодателе(ВыборкаПоШапкеДокумента.Организация, ВыборкаПоШапкеДокумента.Дата, Отказ);
		ЗаголовокФайла	=	ЗаголовокФайла + ПроцедурыПерсонифицированогоУчета.ПолучитьЗаписьОПачке(НомерПачки, ДатаЗаполнения, ТипСведенийДляЗаписиПачки,ВыборкаПоШапкеДокумента.ВидКорректировки, РасчетныйПериодГод, ВыборкаПоШапкеДокумента.КодОсновногоТарифа, ТУвПачке, ВсегоНачисленоНаСтраховуюЧастьПФР, ВсегоНачисленоНаНакопительнуюЧастьПФР);
		ЗаголовокФайла	=	ЗаголовокФайла + ПроцедурыПерсонифицированогоУчета.ПолучитьЗаписьОТипеДокумента(ТипЗаписиИН, КоличествоДокументов);
		
		ТекстФайла = ЗаголовокФайла + ТекстФайла;
		
	ИначеЕсли ВыборкаПоШапкеДокумента.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда 
		
		// Формат файла 07.00
		
		// Список стран
		СписокСтран = Новый Соответствие;
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КлассификаторСтранМира.Наименование,
		|	КлассификаторСтранМира.Код
		|ИЗ
		|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокСтран.Вставить(СокрЛП(Выборка.Наименование), Строка(Выборка.Код));
		КонецЦикла;
		
		// Загружаем формат файла сведений
		МакетФормата = ПолучитьОбщийМакет("ФорматПФР70");
		
		НомерДокументаВПачке = 1;
		// Создаем начальное дерево
		ДеревоВыгрузки = ПроцедурыПерсонифицированогоУчета.СоздатьДеревоXML();
		
		УзелПФР = ПроцедурыПерсонифицированогоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ФайлПФР", "", );
		
		ПроцедурыПерсонифицированогоУчета.ЗаполнитьИмяИЗаголовокФайла(УзелПФР, МакетФормата, ПроцедурыПерсонифицированогоУчета.ПолучитьИмяФайлаПФ(Ссылка, ВыборкаПоШапкеДокумента.Год, ВыборкаПоШапкеДокумента));
		
		ТипДокументовПачки = "ИС_"+ТипФормДокументов;
		УзелПачкаСЗВ4 = "";
		НаборЗаписейИтогоСуммаВзносов = "";
		// Добавляем реквизит ПачкаВходящихДокументов
		УзелПачкаВходящихДокументов = ПроцедурыПерсонифицированогоУчета.ЗаполнитьНаборЗаписейВходящаяОпись(УзелПФР, МакетФормата, ТипДокументовПачки, ВыборкаПоШапкеДокумента, КоличествоДокументов, НомерПачки, НомерДокументаВПачке, УзелПачкаСЗВ4, НаборЗаписейИтогоСуммаВзносов);
		
		Сокращение = "";
		ФорматИССЗВ4 = ПроцедурыПерсонифицированогоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, СтрЗаменить(ТипДокументовПачки, "-", "_"));
		Если ТипДокументовПачки = "ИС_СЗВ-4-2" Тогда
			ФорматИССЗВ4.ВсеПериодыРаботы.Значение.ПериодРаботы.Значение.Удалить("ДополнительныеСтроки");
			ФорматИССЗВ4.ВсеПериодыРаботы.Значение.ПериодРаботы.Значение.ОсновнаяСтрока.Значение.Удалить("ОсобенностиУчета");
		КонецЕсли;
		
		ФорматИностранныйАдрес = ПроцедурыПерсонифицированогоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "АдресОбщий", 3);
		ФорматНеструктурированныйАдрес = ПроцедурыПерсонифицированогоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "АдресОбщий", 2);
		
		ВыборкаПоРаботникиОрганизации	= РезультатЗапросаПоЗаписямСтажа.Выбрать();
		
		ВсегоНачисленоНаСтраховуюЧастьПФР = 0;
		ВсегоНачисленоНаНакопительнуюЧастьПФР = 0;
		
		Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерСтроки")	Цикл
			
			НомерДокументаВПачке = НомерДокументаВПачке + 1;
			
			НаборЗаписейСЗВ4 = ПроцедурыПерсонифицированогоУчета.СкопироватьСтруктуруДанных(ФорматИССЗВ4);
			// ПРОВЕРКА ДАННЫХ ФИЗЛИЦА
			
			СтрокаНачалаСообщенияОбОшибке = "В строке № """+ СокрЛП(ВыборкаПоРаботникиОрганизации.НомерСтроки) + """: " + "По работнику "+ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование + " ";
			
			//Инициалы должны быть указаны
			Фамилия = ВыборкаПоРаботникиОрганизации.Фамилия;
			Имя = ВыборкаПоРаботникиОрганизации.Имя;
			Отчество = ВыборкаПоРаботникиОрганизации.Отчество;
			Если "" + Фамилия + Имя + Отчество = ""  тогда
				ПроцедурыУправленияПерсоналом.ФамилияИнициалыФизЛица(ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование,Фамилия,Имя,Отчество);
			КонецЕсли;	
			
			Если СокрЛП(СтрЗаменить(ВыборкаПоРаботникиОрганизации.АдресДляИнформирования, ",","")) <> "" Тогда
				АдресДляИнформирования = ВыборкаПоРаботникиОрганизации.АдресДляИнформирования;
			Иначе	
				АдресДляИнформирования = "";	
			КонецЕсли; 
			
			Если ВидКорректировки <> "ОТМН"  Тогда
				Если ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода = NULL И ВыборкаПоРаботникиОрганизации.НачисленоНаСтраховуюЧастьПФР = 0 И ВыборкаПоРаботникиОрганизации.НачисленоНаНакопительнуюЧастьПФР = 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Данных о стаже и взносах не обнаружено!", Отказ, Заголовок);
				КонецЕсли; 
			КонецЕсли; 
			
			ПроверитьДанныеФизлица(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Фамилия, Имя, Отказ, Заголовок);
			
			НаборЗаписейСЗВ4.НомерВПачке.Значение = НомерДокументаВПачке;
			НаборЗаписейСЗВ4.ВидФормы.Значение = ВыборкаПоШапкеДокумента.ТипФормДокументов;
			Если ВыборкаПоШапкеДокумента.ТипСведений = "ИСХД" Тогда
				НаборЗаписейСЗВ4.ТипСведений.Значение = "ИСХОДНАЯ";
			ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = "ПЕНС" Тогда
				НаборЗаписейСЗВ4.ТипСведений.Значение = "ПЕНСИОННАЯ";
			КонецЕсли;
			
			Если ВыборкаПоШапкеДокумента.ВидКорректировки = "КОРР" Тогда
				НаборЗаписейСЗВ4.ВидКорректировки.Значение = "КОРРЕКТИРУЮЩАЯ";
			ИначеЕсли ВыборкаПоШапкеДокумента.ВидКорректировки = "ОТМН" Тогда
				НаборЗаписейСЗВ4.ВидКорректировки.Значение = "ОТМЕНЯЮЩАЯ";
			Иначе
				НаборЗаписейСЗВ4.Удалить("ВидКорректировки");
			КонецЕсли;
			
			НаборЗаписейСЗВ4.СтраховойНомер.Значение = ВыборкаПоРаботникиОрганизации.СтраховойНомерПФР;
			НаборЗаписейФИО = НаборЗаписейСЗВ4.ФИО.Значение;
			НаборЗаписейФИО.Фамилия = ВРег(Фамилия);
			ПроцедурыПерсонифицированогоУчета.ЗаменитьБуквуЁ(НаборЗаписейФИО.Фамилия, "Фамилия");
			НаборЗаписейФИО.Имя = ВРег(Имя);
			ПроцедурыПерсонифицированогоУчета.ЗаменитьБуквуЁ(НаборЗаписейФИО.Имя, "Имя");
			НаборЗаписейФИО.Отчество = ВРег(Отчество);
			ПроцедурыПерсонифицированогоУчета.ЗаменитьБуквуЁ(НаборЗаписейФИО.Отчество, "Отчество");
			
			НаборЗаписейСЗВ4.РасчетныйПериод.Значение = РасчетныйПериодГод;
			НаборЗаписейСЗВ4.ДатаЗаполнения.Значение = ВыборкаПоШапкеДокумента.Дата;
			
			// Заполняем адрес застрахованного лица, если он есть.
			Если ВыборкаПоШапкеДокумента.ВидКорректировки = "ОТМН" Тогда
				НаборЗаписейСЗВ4.Удалить("АдресЗЛ");
			ИначеЕсли ПустаяСтрока(ВыборкаПоРаботникиОрганизации.АдресДляИнформирования) Тогда
				НаборЗаписейСЗВ4.Удалить("АдресЗЛ");
			Иначе
				ТекстОшибки  ="";
				НаборЗаписейАдресЗЛ = НаборЗаписейСЗВ4.АдресЗЛ.Значение;
				ПроцедурыПерсонифицированогоУчета.ЗаполнитьАдрес(НаборЗаписейАдресЗЛ, ВыборкаПоРаботникиОрганизации.АдресДляИнформирования, 
					СписокСтран, ФорматНеструктурированныйАдрес, ФорматИностранныйАдрес, ТекстОшибки);
				НаборЗаписейСЗВ4.АдресЗЛ.Значение = НаборЗаписейАдресЗЛ;
				Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Предупреждение: Строка №"+ВыборкаПоРаботникиОрганизации.НомерСтроки+": Работник "+ВыборкаПоРаботникиОрганизации.ФизЛицо+ " Адрес" + ТекстОшибки, Ложь);
				КонецЕсли;
			КонецЕсли;
			
			// Страхователь
			НаборЗаписейСтрахователь = НаборЗаписейСЗВ4.Страхователь.Значение;
			ПроцедурыПерсонифицированогоУчета.ЗаполнитьСоставительПачки(НаборЗаписейСтрахователь, ВыборкаПоШапкеДокумента);
			
			// Тариф страховых взносов
			НаборЗаписейТарифСтраховыхВзносов = НаборЗаписейСЗВ4.ТарифСтраховыхВзносов.Значение;
			НаборЗаписейТарифСтраховыхВзносов.КодКатегории = ВыборкаПоШапкеДокумента.КодОсновногоТарифа;
			Если ВыборкаПоШапкеДокумента.КодОсновногоТарифа = "НР" Тогда
				НаборЗаписейТарифСтраховыхВзносов.НазваниеКатегории = "НАЕМ/РАБОТНИК";
			ИначеЕсли ВыборкаПоШапкеДокумента.КодОсновногоТарифа = "СХ" Тогда
				НаборЗаписейТарифСтраховыхВзносов.НазваниеКатегории = "С/Х ОРГАНИЗАЦИЯ";
			КонецЕсли;
			
			
			Если ВидКорректировки <> "ОТМН" Тогда
				// Начислено взносов основных
				НаборЗаписейНачисленоВзносовОсновных = НаборЗаписейСЗВ4.НачисленоВзносовОсновных.Значение;
				НаборЗаписейНачисленоВзносовОсновных.Страховые = ВыборкаПоРаботникиОрганизации.НачисленоНаСтраховуюЧастьПФР;
				НаборЗаписейНачисленоВзносовОсновных.Накопительные = ВыборкаПоРаботникиОрганизации.НачисленоНаНакопительнуюЧастьПФР;
				
				// Итоги по пачке
				ВсегоНачисленоНаСтраховуюЧастьПФР = ВсегоНачисленоНаСтраховуюЧастьПФР + ВыборкаПоРаботникиОрганизации.НачисленоНаСтраховуюЧастьПФР;
				ВсегоНачисленоНаНакопительнуюЧастьПФР = ВсегоНачисленоНаНакопительнуюЧастьПФР + ВыборкаПоРаботникиОрганизации.НачисленоНаНакопительнуюЧастьПФР;
				
				
				// Больничные листы
				НаборЗаписейБольничныеЛисты = НаборЗаписейСЗВ4.БольничныеЛисты.Значение;
				НаборЗаписейБольничныеЛисты.ВсеГоды = 0;
				НаборЗаписейБольничныеЛисты.ВсеМесяцы = Цел(ВыборкаПоРаботникиОрганизации.ДнейБолезни/30);
				НаборЗаписейБольничныеЛисты.ВсеДни = ВыборкаПоРаботникиОрганизации.ДнейБолезни%30;
				
				// Административный отпуск
				НаборЗаписейАдминистративныйОтпуск = НаборЗаписейСЗВ4.АдминистративныйОтпуск.Значение;
				НаборЗаписейАдминистративныйОтпуск.ВсеГоды = 0;
				НаборЗаписейАдминистративныйОтпуск.ВсеМесяцы = Цел(ВыборкаПоРаботникиОрганизации.ДнейОтпускаЗаСвойСчет/30);
				НаборЗаписейАдминистративныйОтпуск.ВсеДни = ВыборкаПоРаботникиОрганизации.ДнейОтпускаЗаСвойСчет%30;
			КонецЕсли;
			
			//Переменный для хранения строк о стаже работника (для формы СЗВ-4-1)
			ЧислоОсновныхЗаписейОСтаже = 0;
			// Признак наличия у работника основания для льготного стажа
			РаботникОрганизацииИмеетЛьготныйСтаж = ЛОЖЬ;
			// Признак соответствия территориальных условий стажа работника и пачки (для формы СЗВ-4-2)
			ТУРаботникаНеСоответствуютПачке = ЛОЖЬ;
			
			Если ТипФормДокументов = "СЗВ-4-2" Тогда
				
				Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл
					Если ВидКорректировки <> "ОТМН"  Тогда
						ЧислоОсновныхЗаписейОСтаже = ЧислоОсновныхЗаписейОСтаже + 1; 
						
						Если ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи = 1 Тогда
							НаборЗаписейСЗВ4.ВсеПериодыРаботы.Значение.Количество.Значение = 1;
							НаборЗаписейОсновнаяСтрока = НаборЗаписейСЗВ4.ВсеПериодыРаботы.Значение.ПериодРаботы.Значение.ОсновнаяСтрока.Значение;
							НаборЗаписейОсновнаяСтрока.НомерСтроки.Значение = 1;
							НаборЗаписейОсновнаяСтрока.ДатаНачалаПериода.Значение = ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода;
							НаборЗаписейОсновнаяСтрока.ДатаКонцаПериода.Значение = ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода;
							
							// Признак наличия у работника основания для льготного стажа
							Если НЕ ПустаяСтрока(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод) ИЛИ НЕ ПустаяСтрока(ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод) ИЛИ НЕ ПустаяСтрока(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод) Тогда
								
								РаботникОрганизацииИмеетЛьготныйСтаж = Истина;
								
							Иначе
								// Проверяем сооответствие территориальных условий пачке
								Если Строка(ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод) <> ТУвПачке Тогда
									ТУРаботникаНеСоответствуютПачке = Истина;
								КонецЕсли; 
								
							КонецЕсли;
							
						КонецЕсли; 
					Иначе
						НаборЗаписейСЗВ4.Удалить("ВсеПериодыРаботы");
					КонецЕсли; 
					
					ПроцедурыПерсонифицированогоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированогоУчета.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТипДокументовПачки,""), НаборЗаписейСЗВ4);
				КонецЦикла;		
				Если Не Отказ Тогда
					Если (ЧислоОсновныхЗаписейОСтаже > 1) ИЛИ (СтрЧислоСтрок(СтрокиСтажРаботникаОрганизации) > 1) Тогда
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Работник имеет более одной записи о стаже.
						|				Данные необходимо подавать по форме СЗВ-4-1!", Отказ, Заголовок);
					ИначеЕсли РаботникОрганизацииИмеетЛьготныйСтаж тогда	
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- В записях о стаже имеется льготный стаж. 
						|				Данные необходимо подавать по форме СЗВ-4-1!", Отказ, Заголовок);
					ИначеЕсли ТУРаботникаНеСоответствуютПачке тогда	
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Территориальные условия не соответствуют пачке!", Отказ);
					КонецЕсли; 			
				КонецЕсли; 
				
			ИначеЕсли ТипФормДокументов = "СЗВ-4-1" Тогда
				
				ФорматПериодРаботы = ПроцедурыПерсонифицированогоУчета.СкопироватьСтруктуруДанных(НаборЗаписейСЗВ4.ВсеПериодыРаботы.Значение);
				ФорматПериодРаботы.Удалить("Количество");
				ФорматКоличествоПериодовРаботы = ПроцедурыПерсонифицированогоУчета.СкопироватьСтруктуруДанных(НаборЗаписейСЗВ4.ВсеПериодыРаботы.Значение);
				ФорматКоличествоПериодовРаботы.Удалить("ПериодРаботы");
				НаборЗаписейСЗВ4.Удалить("ВсеПериодыРаботы");
				ФорматОсобенностиУчета = ПроцедурыПерсонифицированогоУчета.СкопироватьСтруктуруДанных(ФорматПериодРаботы);
				ФорматОсобенностиУчета.ПериодРаботы.Значение.Удалить("ОсновнаяСтрока");
				ФорматПериодРаботы.ПериодРаботы.Значение.Удалить("ДополнительныеСтроки");
				ФорматДопОсобенностиУчета = ПроцедурыПерсонифицированогоУчета.СкопироватьСтруктуруДанных(ФорматОсобенностиУчета.ПериодРаботы.Значение.ДополнительныеСтроки.Значение.ОсобенностиУчета.Значение);
				УзелСЗВ41 = ПроцедурыПерсонифицированогоУчета.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТипДокументовПачки,"");
				ПроцедурыПерсонифицированогоУчета.ДобавитьИнформациюВДерево(УзелСЗВ41, НаборЗаписейСЗВ4);
				
				Если ВидКорректировки <> "ОТМН"  Тогда
					
					УзелВсеПериодыРаботы = ПроцедурыПерсонифицированогоУчета.ДобавитьУзелВДеревоXML(УзелСЗВ41, "ВсеПериодыРаботы","");
					ПроцедурыПерсонифицированогоУчета.ДобавитьИнформациюВДерево(УзелВсеПериодыРаботы, ФорматКоличествоПериодовРаботы);
					КоличествоПериодов = 0;
					
					Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл	
						
						УзелПериодРаботы = ПроцедурыПерсонифицированогоУчета.ДобавитьУзелВДеревоXML(УзелВсеПериодыРаботы, "ПериодРаботы", "");
						
						НаборЗаписейПериодРаботы = ПроцедурыПерсонифицированогоУчета.СкопироватьСтруктуруДанных(ФорматПериодРаботы);
						НаборЗаписейОсновнаяСтрока = НаборЗаписейПериодРаботы.ПериодРаботы.Значение.ОсновнаяСтрока.Значение;
						НаборЗаписейОсновнаяСтрока.НомерСтроки.Значение = ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи;
						НаборЗаписейОсновнаяСтрока.ДатаНачалаПериода.Значение = ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода;
						НаборЗаписейОсновнаяСтрока.ДатаКонцаПериода.Значение = ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода;
						НаборЗаписейОсобенностиУчета = НаборЗаписейОсновнаяСтрока.ОсобенностиУчета.Значение;
						
						// Территориальные условия
						НаборЗаписейТерриториальныеУсловия = НаборЗаписейОсобенностиУчета.ТерриториальныеУсловия.Значение;
						НаборЗаписейТерриториальныеУсловия.ОснованиеТУ = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
						НаборЗаписейТерриториальныеУсловия.Коэффициент = ВыборкаПоШапкеДокумента.ОрганизацияРайонныйКоэффициентРФ;
						
						// Особые условия труда
						НаборЗаписейОсобыеУсловияТруда = НаборЗаписейОсобенностиУчета.ОсобыеУсловияТруда.Значение;
						НаборЗаписейОсобыеУсловияТруда.ОснованиеОУТ = СокрЛП(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод);
						НаборЗаписейОсобыеУсловияТруда.ПозицияСписка = СокрЛП(ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод);
						
						// Исчисляемый стаж
						НаборЗаписейИсчисляемыйСтаж = НаборЗаписейОсобенностиУчета.ИсчисляемыйСтаж.Значение;
						НаборЗаписейИсчисляемыйСтаж.ОснованиеИС.Значение = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
						Если ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод = "УИК104" 
							ИЛИ ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод = "СЕЗОН" Тогда
							НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВыработкаКалендарная.Значение;
							НаборЗаписейВыработкаКалендарная.ВсеМесяцы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
							НаборЗаписейВыработкаКалендарная.ВсеДни = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
						ИначеЕсли ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод = "ВОДОЛАЗ" Тогда
							//НаборЗаписейИсчисляемыйСтаж.ВыработкаВЧасах
							//НаборЗаписейИсчсисляемыйСтаж.ВыработкаКалендарная
						КонецЕсли;
						
						
						// Выслуга лет
						НаборЗаписейВыслугаЛет = НаборЗаписейОсобенностиУчета.ВыслугаЛет.Значение;
						НаборЗаписейВыслугаЛет.Удалить("КодИсчисления");
						НаборЗаписейВыслугаЛет.ОснованиеВЛ.Значение = СокрЛП(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод);
						НаборЗаписейВыслугаЛет.ДоляСтавки.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
						НаборЗаписейВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВыработкаВЧасах.Значение;
						НаборЗаписейВыработкаВЧасах.Часы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаВЧасах.Минуты = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
						
						//ДекретДети
						Если ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа = "ДЕКРЕТ"
							ИЛИ ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ" Тогда
							НаборЗаписейОсобенностиУчета.ДекретДети.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
						КонецЕсли;
						
						// Профессия должность
						//НаборЗаписейОсобенностиУчета.ПрофессияДолжность.Значение = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.КодПозицииСписка.Наименование));
						
						КоличествоПериодов = КоличествоПериодов + 1;
						
						ПроцедурыПерсонифицированогоУчета.ДобавитьИнформациюВДерево(УзелПериодРаботы, НаборЗаписейПериодРаботы.ПериодРаботы.Значение);
						
						//Переменный для хранения дополнительных записей о стаже
						ЧислоДополнительныхЗаписейОСтаже = 0;
						
						Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")	Цикл
							
							//В дополнительной записи с номером 0 находится информация об основной записи
							Если ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи = 0 тогда
								Продолжить;
							КонецЕсли;	
							Если ЧислоДополнительныхЗаписейОСтаже = 0 Тогда
								УзелДополнительныеСтроки = ПроцедурыПерсонифицированогоУчета.ДобавитьУзелВДеревоXML(УзелПериодРаботы, "ДополнительныеСтроки", "");
								ПроцедурыПерсонифицированогоУчета.ДобавитьИнформациюВДерево(УзелДополнительныеСтроки, ФорматКоличествоПериодовРаботы);
							КонецЕсли;
							
							ЧислоДополнительныхЗаписейОСтаже = ЧислоДополнительныхЗаписейОСтаже + 1;
							
							НаборЗаписейДопОсобенностиУчета = ПроцедурыПерсонифицированогоУчета.СкопироватьСтруктуруДанных(ФорматДопОсобенностиУчета);
							
							// Территориальные условия
							НаборЗаписейДопТерриториальныеУсловия = НаборЗаписейДопОсобенностиУчета.ТерриториальныеУсловия.Значение;
							НаборЗаписейДопТерриториальныеУсловия.ОснованиеТУ = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
							НаборЗаписейДопТерриториальныеУсловия.Коэффициент = ВыборкаПоШапкеДокумента.ОрганизацияРайонныйКоэффициентРФ;
							
							// Особые условия труда
							НаборЗаписейДопОсобыеУсловияТруда = НаборЗаписейДопОсобенностиУчета.ОсобыеУсловияТруда.Значение;
							НаборЗаписейДопОсобыеУсловияТруда.ОснованиеОУТ = ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод;
							НаборЗаписейДопОсобыеУсловияТруда.ПозицияСписка = ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод;
							
							// Исчисляемый стаж
							НаборЗаписейДопИсчисляемыйСтаж = НаборЗаписейДопОсобенностиУчета.ИсчисляемыйСтаж.Значение;
							НаборЗаписейДопИсчисляемыйСтаж.ОснованиеИС.Значение = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
							Если ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод = "УИК104" 
								ИЛИ ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод = "СЕЗОН" Тогда
								НаборЗаписейДопВыработкаКалендарная = НаборЗаписейДопИсчисляемыйСтаж.ВыработкаКалендарная.Значение;
								НаборЗаписейДопВыработкаКалендарная.ВсеМесяцы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
								НаборЗаписейДопВыработкаКалендарная.ВсеДни = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
							ИначеЕсли ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод = "ВОДОЛАЗ" Тогда
								//НаборЗаписейИсчисляемыйСтаж.ВыработкаВЧасах
								//НаборЗаписейИсчсисляемыйСтаж.ВыработкаКалендарная
							КонецЕсли;
							
							
							// Выслуга лет
							НаборЗаписейДопВыслугаЛет = НаборЗаписейДопОсобенностиУчета.ВыслугаЛет.Значение;
							НаборЗаписейДопВыслугаЛет.Удалить("КодИсчисления");
							НаборЗаписейДопВыслугаЛет.ОснованиеВЛ.Значение = СокрЛП(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод);
							НаборЗаписейДопВыслугаЛет.ДоляСтавки.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
							НаборЗаписейДопВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВыработкаВЧасах.Значение;
							НаборЗаписейДопВыработкаВЧасах.Часы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
							НаборЗаписейДопВыработкаВЧасах.Минуты = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
							
							//ДекретДети
							Если ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа = "ДЕКРЕТ"
								ИЛИ ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ" Тогда
								НаборЗаписейДопОсобенностиУчета.ДекретДети.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
							КонецЕсли;
							
							// Профессия должность
							//НаборЗаписейДопОсобенностиУчета.ПрофессияДолжность.Значение = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.КодПозицииСписка.Наименование));
							
							// Добавляем строку в структуру
							ПроцедурыПерсонифицированогоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированогоУчета.ДобавитьУзелВДеревоXML(УзелДополнительныеСтроки, "ОсобенностиУчета", ""), НаборЗаписейДопОсобенностиУчета);
							
						КонецЦикла;// Выборка по дополнительным записям о стаже
						Если ЧислоДополнительныхЗаписейОСтаже > 0 Тогда
							УзелДополнительныеСтроки.Строки[0].Значение = ЧислоДополнительныхЗаписейОСтаже;
						КонецЕсли;
						
					КонецЦикла;	
					УзелВсеПериодыРаботы.Строки[0].Значение = КоличествоПериодов;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// ИтогоСтраховыеВзносы
		НаборЗаписейИтогоСуммаВзносов.Страховые.Значение = ВсегоНачисленоНаСтраховуюЧастьПФР;
		НаборЗаписейИтогоСуммаВзносов.Накопительные.Значение = ВсегоНачисленоНаНакопительнуюЧастьПФР;
		ПроцедурыПерсонифицированогоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированогоУчета.ДобавитьУзелВДеревоXML(УзелПачкаСЗВ4, "ИтогоСуммаВзносов",""), НаборЗаписейИтогоСуммаВзносов);
		
		// Преобразуем дерево в строковое описание XML
		ТекстФайла = ПроцедурыПерсонифицированогоУчета.ПолучитьТекстФайлаИзДереваЗначений(ДеревоВыгрузки);
		
	КонецЕсли;
	
	Возврат ТекстФайла;
КонецФункции 

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	Если ТипФормДокументов = "СЗВ-4-1" тогда
		СтруктураМакетов.Вставить("ФормаСЗВ_4_1", "СЗВ-4-1");
	ИначеЕсли ТипФормДокументов = "СЗВ-4-2" тогда
		СтруктураМакетов.Вставить("ФормаСЗВ_4_2", "СЗВ-4-2");
		СтруктураМакетов.Вставить("ФормаСЗВ_4_1", "СЗВ-4-1");
	КонецЕсли;
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		Если Отказ тогда
			Возврат;
		КонецЕсли;	 
		
	КонецЕсли;
	
	//При проведении файл формируем заново 
	ТекстФайла = СформироватьВыходнойФайл(Отказ, Ложь);
	Если Отказ тогда
		Возврат;
	КонецЕсли;	 

	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения.АрхивДанныхРегламентированнойОтчетности.Добавить();
	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Файл-пачка форм " + ТипФормДокументов;
	Запись.Данные = ТекстФайла; 

КонецПроцедуры	

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации,, "Физлицо");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Структура для поиска строки таблицы значений
Перем СтруктураПоиска;

// список информационных сообщений, для вывода
Перем МассивСообщений;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Функция предназначена для автозаполнения документа
// если заполнен параметр сотрудники, то в табличную часть будут добавлены
// строки по данным сотрудникам.
Функция Автозаполнение(Запрос = Неопределено, Сотрудник = Неопределено, ТекущаяСтрокаТабличнойЧасти = Неопределено) Экспорт
	
	ЗапросАвтоЗаполнения = Новый Запрос;
	ЗапросАвтоЗаполнения.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо,
	|	1 КАК КТУ
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоМесяца, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизаций
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
	|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизаций.ОбособленноеПодразделение
	|		КОНЕЦ = &ОбособленноеПодразделение
	|	И (ВЫБОР
	|				КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
	|						И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
	|				ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
	|			КОНЕЦ В ИЕРАРХИИ (&Подразделение)
	|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ИЛИ &ТабельУчета <> ЗНАЧЕНИЕ(Справочник.ТабеляУчетаОрганизаций.ПустаяСсылка))
	|	И (ВЫБОР
	|				КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
	|						И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизаций.ТабельУчетаОрганизацииЗавершения
	|				ИНАЧЕ РаботникиОрганизаций.ТабельУчетаОрганизации
	|			КОНЕЦ = &ТабельУчета
	|			ИЛИ &ТабельУчета = ЗНАЧЕНИЕ(Справочник.ТабеляУчетаОрганизаций.ПустаяСсылка))
	|	И ВЫБОР
	|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
	|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник,
	|	РаботникиОрганизаций.Сотрудник.Физлицо,
	|	1
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.Период > &НачалоМесяца
	|	И РаботникиОрганизаций.Период <= &КонецМесяца
	|	И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
	|	И РаботникиОрганизаций.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|	И (РаботникиОрганизаций.ПодразделениеОрганизации В ИЕРАРХИИ (&Подразделение)
	|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
	|	И (РаботникиОрганизаций.ТабельУчетаОрганизации = &ТабельУчета
	|			ИЛИ &ТабельУчета = ЗНАЧЕНИЕ(Справочник.ТабеляУчетаОрганизаций.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Работники.Сотрудник,
	|	Работники.Сотрудник.Физлицо,
	|	1
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|		ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|			И (ПериодыПерекрытия.Период > Работники.Период)
	|			И (ПериодыПерекрытия.Сотрудник = Работники.Сотрудник)
	|			И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|ГДЕ
	|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И Работники.ПериодЗавершения > &НачалоМесяца
	|	И Работники.ПериодЗавершения <= &КонецМесяца
	|	И Работники.Организация = &ГоловнаяОрганизация
	|	И Работники.ОбособленноеПодразделениеЗавершения = &ОбособленноеПодразделение
	|	И (Работники.ПодразделениеОрганизацииЗавершения В ИЕРАРХИИ (&Подразделение)
	|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
	|	И (Работники.ТабельУчетаОрганизацииЗавершения = &ТабельУчета
	|			ИЛИ &ТабельУчета = ЗНАЧЕНИЕ(Справочник.ТабеляУчетаОрганизаций.ПустаяСсылка))
	|	И ПериодыПерекрытия.Период ЕСТЬ NULL ";			
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Ложь);

	ЗапросАвтоЗаполнения.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	ЗапросАвтоЗаполнения.УстановитьПараметр("ОбособленноеПодразделение", Организация);
	ЗапросАвтоЗаполнения.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);	
	ЗапросАвтоЗаполнения.УстановитьПараметр("ТабельУчета", ТабельУчетаОрганизации);	
	ЗапросАвтоЗаполнения.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПериодРегистрации));
	ЗапросАвтоЗаполнения.УстановитьПараметр("КонецМесяца", КонецМесяца(ПериодРегистрации));
	ЗапросАвтоЗаполнения.УстановитьПараметр("Месяц", ПериодРегистрации);
	
	РаботникиОрганизации.Загрузить(ЗапросАвтоЗаполнения.Выполнить().Выгрузить());
			
КонецФункции // Автозаполнение()

#Если Клиент Тогда	
	
Функция ПечатьПротокола()
	
	ЗапросПоШапке = Новый Запрос;
	
	// Установим параметры запроса
	ЗапросПоШапке.УстановитьПараметр("ДокументСсылка",			Ссылка);
	ЗапросПоШапке.УстановитьПараметр("парамПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());
	
	ЗапросПоШапке.Текст =
	"ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениОрганизации.Дата,
	|	ТабельУчетаРабочегоВремениОрганизации.ПериодРегистрации,
	|	ТабельУчетаРабочегоВремениОрганизации.ПодразделениеОрганизации,
	|	ТабельУчетаРабочегоВремениОрганизации.ТабельУчетаОрганизации,
	|	ВЫБОР
	|		КОГДА ТабельУчетаРабочегоВремениОрганизации.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА ТабельУчетаРабочегоВремениОрганизации.Организация
	|		ИНАЧЕ ТабельУчетаРабочегоВремениОрганизации.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ТабельУчетаРабочегоВремениОрганизации.Организация КАК Организация,
	|	ТабельУчетаРабочегоВремениОрганизации.Руководитель,
	|	ТабельУчетаРабочегоВремениОрганизации.РуководительДолжность,
	|	ТабельУчетаРабочегоВремениОрганизации.ПредседательСобрания,
	|	ТабельУчетаРабочегоВремениОрганизации.ПредседательСобранияДолжность.Наименование КАК РаботникКадровойСлужбыДолжность,
	|	ТабельУчетаРабочегоВремениОрганизации.Исполнитель,
	|	ТабельУчетаРабочегоВремениОрганизации.ИсполнительДолжность.Наименование КАК ИсполнительДолжность,
	|	ТабельУчетаРабочегоВремениОрганизации.СекретарьСобрания,
	|	ТабельУчетаРабочегоВремениОрганизации.СекретарьСобранияДолжность.Наименование КАК СекретарьСобранияДолжность,
	|	ТабельУчетаРабочегоВремениОрганизации.Ответственный.ФизЛицо КАК Табельщик
	|ИЗ
	|	Документ.УтверждениеКТУРаботниковОрганизации КАК ТабельУчетаРабочегоВремениОрганизации
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизации.Ссылка = &ДокументСсылка";
	
	ВыборкаПоШапке=ЗапросПоШапке.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();
	
	
	ЗапросПоОтветственным=Новый Запрос;
	ЗапросПоОтветственным.Текст=
	"ВЫБРАТЬ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК Руководитель,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			&ДатаАктуальности,
	|			ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|				И СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
	
	ЗапросПоОтветственным.УстановитьПараметр("Организация",Организация);
	ЗапросПоОтветственным.УстановитьПараметр("ДатаАктуальности",ПериодРегистрации);
	
	ВыборкаОтветственный=ЗапросПоОтветственным.Выполнить().Выбрать();
	ВыборкаОтветственный.Следующий();
	
	
	Запрос=Новый Запрос;
	Запрос.Текст=
	
	"ВЫБРАТЬ
	|	УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации.Сотрудник,
	|	УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
	|	УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации.Сотрудник.Код КАК ТабНомер,
	|	УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации.КТУ,
	|	УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.УтверждениеКТУРаботниковОрганизации.РаботникиОрганизации КАК УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации
	|ГДЕ
	|	УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Выборка=Запрос.Выполнить().Выбрать();
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет=ПолучитьМакет("Протокол");
	
	ОбластьШапка=Макет.ПолучитьОбласть("Шапка");
	ОбластьПодвал=Макет.ПолучитьОбласть("Подвал");
	ОбластьСтрока=Макет.ПолучитьОбласть("Строка");
	
	ОбластьШапка.Параметры.Заполнить(ВыборкаПоШапке);
	ОбластьШапка.Параметры.Заполнить(ВыборкаОтветственный);
	
	ОбластьШапка.Параметры.Руководитель=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаОтветственный.Руководитель);
	Если ЗначениеЗаполнено(ВыборкаПоШапке.Руководитель) Тогда
		ОбластьШапка.Параметры.Руководитель=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоШапке.Руководитель);
		ОбластьШапка.Параметры.ДолжностьРуководителя=ВыборкаПоШапке.РуководительДолжность;
	КонецЕсли;
	
	ОбластьШапка.Параметры.Дата=Формат(ВыборкаПоШапке.Дата,"ДЛФ=DD");
	ОбластьШапка.Параметры.ПериодРегистрации=Формат(ВыборкаПоШапке.ПериодРегистрации,"ДФ='ММММ гггг'");
	ОбластьШапка.Параметры.Выступили=ОбщегоНазначения.ФамилияИнициалыФизЛица(ВыборкаПоШапке.ПредседательСобрания);
	
	ТабДокумент.Вывести(ОбластьШапка);
	
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);	
		ОбластьСтрока.Параметры.Сотрудник=ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.СотрудникНаименование);
		ТабДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ОбластьПодвал.Параметры.Начальник=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоШапке.Табельщик);
	Если ЗначениеЗаполнено(ВыборкаПоШапке.Исполнитель) Тогда
		ОбластьПодвал.Параметры.Начальник=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоШапке.Исполнитель);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаПоШапке.ПредседательСобрания) Тогда
		ОбластьПодвал.Параметры.ПредседательСобрания=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоШапке.ПредседательСобрания);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаПоШапке.СекретарьСобрания) Тогда
		ОбластьПодвал.Параметры.Секретарь=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоШапке.СекретарьСобрания);
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьПодвал);
	
	ТабДокумент.ОриентацияСтраницы=ОриентацияСтраницы.Портрет;
	ТабДокумент.АвтоМасштаб=Истина;
	
	Возврат ТабДокумент;
	
КонецФункции
	
//	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
	Если ИмяМакета="Протокол" ТОгда
		Если Не  Проведен Тогда
			Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		ТабДокумент=ПечатьПротокола();
		Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним));
	КонецЕсли;
КонецФункции // Печать()
	
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//	Структура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;	
	СтруктураМакетов.Вставить("Протокол","Протокол");	
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Создает структуру, с параметрами выводимого сообщения 
// для помещения в массив сообщений-структур
Функция СоздатьСообщениеСтруктуру(ТекстСообщения, ВидСообщения, РасшифровкаСообщения = Неопределено)
	СтруктураСообщения = Новый Структура;
	СтруктураСообщения.Вставить("ТекстСообщения", ТекстСообщения);
	СтруктураСообщения.Вставить("ВидСообщения", ВидСообщения);
	СтруктураСообщения.Вставить("РасшифровкаСообщения", РасшифровкаСообщения);
	Возврат СтруктураСообщения
КонецФункции // СоздатьСообщениеСтруктуру()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ	

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)
	
	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация) Тогда
		МассивСообщений.Добавить(СоздатьСообщениеСтруктуру(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация, по которой вводится табель!"), Перечисления.ВидыСообщений.Ошибка));
		Отказ = Истина;
	КонецЕсли;
	
	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		МассивСообщений.Добавить(СоздатьСообщениеСтруктуру("Не указан период регистрации!", Перечисления.ВидыСообщений.Ошибка));
		Отказ = Истина
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениОрганизации.Дата,
	|	ТабельУчетаРабочегоВремениОрганизации.ПериодРегистрации,
	|	ТабельУчетаРабочегоВремениОрганизации.ПодразделениеОрганизации,
	|	ТабельУчетаРабочегоВремениОрганизации.ТабельУчетаОрганизации,
	|	ВЫБОР
	|		КОГДА ТабельУчетаРабочегоВремениОрганизации.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА ТабельУчетаРабочегоВремениОрганизации.Организация
	|		ИНАЧЕ ТабельУчетаРабочегоВремениОрганизации.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ТабельУчетаРабочегоВремениОрганизации.Организация Как Организация,
	|	ТабельУчетаРабочегоВремениОрганизации.Ссылка КАК Документ
	|ИЗ
	|	Документ.УтверждениеКТУРаботниковОрганизации КАК ТабельУчетаРабочегоВремениОрганизации
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизации.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()


// Формирует запрос по таблице "ОтработанноеВремя" документа
//
// Параметры:
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоКТУ(ВыборкаПоШапкеДокумента)
	
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("Ссылка",			Ссылка);

	Запрос.Текст=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации.КТУ,
	|	УтверждениеКТУРаботниковОрганизацииОтработанноеВремя.ПоказательКТУ КАК ПоказательКТУ,
	|	СУММА(УтверждениеКТУРаботниковОрганизацииОтработанноеВремя.Размер) КАК Размер
	|ИЗ
	|	Документ.УтверждениеКТУРаботниковОрганизации.РаботникиОрганизации КАК УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УтверждениеКТУРаботниковОрганизации.ОтработанноеВремя КАК УтверждениеКТУРаботниковОрганизацииОтработанноеВремя
	|		ПО УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации.Сотрудник = УтверждениеКТУРаботниковОрганизацииОтработанноеВремя.Сотрудник
	|			И (УтверждениеКТУРаботниковОрганизацииОтработанноеВремя.Ссылка = &Ссылка)
	|ГДЕ
	|	УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации.Сотрудник,
	|	УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации.КТУ,
	|	УтверждениеКТУРаботниковОрганизацииОтработанноеВремя.ПоказательКТУ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ПоказательКТУ";
	
	Возврат Запрос.Выполнить();

	
КонецФункции // СформироватьЗапросПоОтработанноеВремя()

// Формирует запрос по таблице "ОтработанноеВремя" документа
//
// Параметры:
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)
	
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("Ссылка",			Ссылка);

	Запрос.Текст=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации.КТУ
	|ИЗ
	|	Документ.УтверждениеКТУРаботниковОрганизации.РаботникиОрганизации КАК УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации
	|ГДЕ
	|	УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации.Ссылка = &Ссылка
	|";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоОтработанноеВремя()

// Формирует запрос по таблице "ОтработанноеВремя" документа
//
// Параметры:
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоОтклонениям(ВыборкаПоШапкеДокумента)
	
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("Ссылка",			Ссылка);

	Запрос.Текст=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации.ПоказательКТУ,
	|	УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации.Размер
	|ИЗ
	|	Документ.УтверждениеКТУРаботниковОрганизации.ОтработанноеВремя КАК УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации
	|ГДЕ
	|	УтверждениеКТУРаботниковОрганизацииРаботникиОрганизации.Ссылка = &Ссылка
	|";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоОтработанноеВремя()


// Проверяет правильность заполнения реквизитов в строке ТЧ "ОтработанноеВремя" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//								  из результата запроса к ТЧ документа,
//	Отказ						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникиОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)
	
	СтрокаНачалаСообщенияОбОшибке = "В табл. части ""Работники организации"": ";	
		
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		МассивСообщений.Добавить(СоздатьСообщениеСтруктуру(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Перечисления.ВидыСообщений.Ошибка));
		Отказ = Истина;
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	//Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
	//	МассивСообщений.Добавить(СоздатьСообщениеСтруктуру(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("указанный сотрудник оформлен на другую организацию!"), Перечисления.ВидыСообщений.Ошибка));
	//	Отказ = Истина;
	//КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиОтработанноеВремя()

Процедура ПроверитьЗаполнениеСтрокиОтклоненияОтКТУ(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)
	
	СтрокаНачалаСообщенияОбОшибке = "В табл. части ""Отклонения от КТУ"": ";	
		
	// Показатель КТУ
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПоказательКТУ) Тогда
		МассивСообщений.Добавить(СоздатьСообщениеСтруктуру(СтрокаНачалаСообщенияОбОшибке + " Для сотрудника "+СокрЛП(ВыборкаПоСтрокамДокумента.Сотрудник)+"не выбран показатель КТУ!", Перечисления.ВидыСообщений.Ошибка));
		Отказ = Истина;
	КонецЕсли;
	
	// Размер показателя
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Размер) Тогда
		МассивСообщений.Добавить(СоздатьСообщениеСтруктуру(СтрокаНачалаСообщенияОбОшибке + " Для сотрудника "+СокрЛП(ВыборкаПоСтрокамДокумента.Сотрудник)+"не указан размер показателя КТУ!", Перечисления.ВидыСообщений.Ошибка));
		Отказ = Истина;
	КонецЕсли;
		
КонецПроцедуры // ПроверитьЗаполнениеСтрокиОтработанноеВремя()




// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определенной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуОтклоненияКТУ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();
	
	// Свойства
	Движение.Период								= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	
	// Измерения
	Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.ПодразделениеОрганизации		= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
	Движение.ПоказательКТУ					= ВыборкаПоСтрокамДокумента.ПоказательКТУ;
	
    //
	
	// Реквизиты
	Движение.Размер							= ВыборкаПоСтрокамДокумента.Размер;
	
	
	
КонецПроцедуры 

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определенной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуКТУ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();
	
	// Свойства
	Движение.Период								= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	
	// Измерения
	Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.ПодразделениеОрганизации		= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
	
    //
	
	// Реквизиты
	Движение.Размер							= ВыборкаПоСтрокамДокумента.КТУ;

	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(ОтработанноеВремя);
		
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ОтработанноеВремя);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения" документа.
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	МассивСообщений = Новый Массив;
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда									
			
			ВыборкаПоРаботникиОрганизации=СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать();
			
			Пока ВыборкаПоРаботникиОрганизации.Следующий()>0 Цикл
				
				ПроверитьЗаполнениеСтрокиРаботникиОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации,Отказ);
				
				Если Отказ ТОгда
					Прервать;
				КонецЕсли;				
				
			КонецЦикла;
			
			ВыборкаПоОтклонениям=СформироватьЗапросПоОтклонениям(ВыборкаПоШапкеДокумента).Выбрать();
			
			Пока ВыборкаПоОтклонениям.Следующий()>0 Цикл
				
				ПроверитьЗаполнениеСтрокиОтклоненияОтКТУ(ВыборкаПоШапкеДокумента, ВыборкаПоОтклонениям,Отказ);
				
				Если Отказ ТОгда
					Прервать;
				КонецЕсли;				
				
			КонецЦикла;
			
			ВыборкаПоКТУ=СформироватьЗапросПоКТУ(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоКТУ.СледующийПоЗначениюПоля("Сотрудник") Цикл
				
				Пока ВыборкаПоКТУ.СледующийПоЗначениюПоля("ПоказательКТУ") Цикл
					Если ЗначениеЗаполнено(ВыборкаПоКТУ.ПоказательКТУ) Тогда
						ДобавитьСтрокуОтклоненияКТУ(ВыборкаПоКТУ,ВыборкаПоШапкеДокумента,Движения.ОтклоненияОтБазовогоКТУРаботниковОрганизаций);	
					КонецЕсли;					
				КонецЦикла;				
				
				ДобавитьСтрокуКТУ(ВыборкаПоКТУ,ВыборкаПоШапкеДокумента,Движения.КТУРаботниковОрганизаций);	
				
			КонецЦикла;			
			
		КонецЕсли;
	КонецЕсли;
	
	Если МассивСообщений.Количество() > 0 Тогда
		#Если Клиент Тогда
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
			ОбработкаКомментариев.УдалитьСообщения();
			ОбработкаКомментариев.ДобавитьСообщение(Заголовок, Перечисления.ВидыСообщений.Раздел);
			Для каждого ЭлементМассива Из МассивСообщений Цикл
				ОбработкаКомментариев.ДобавитьСообщение(ЭлементМассива.ТекстСообщения, ЭлементМассива.ВидСообщения, ЭлементМассива.РасшифровкаСообщения);
			КонецЦикла;
			ОбработкаКомментариев.ПоказатьСообщения();
		#Иначе
			Для каждого ЭлементМассива Из МассивСообщений Цикл
				ОбщегоНазначения.СообщитьОбОшибке(ЭлементМассива.ТекстСообщения, Отказ, Заголовок);
			КонецЦикла; 
		#КонецЕсли 
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

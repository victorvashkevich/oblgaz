////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для УдержанияРаботниковОрганизации 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуУдержаний(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)

	Движение = НаборЗаписей.Добавить();

	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента);   // ПериодРегистрации, ОбособленноеПодразделение
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента); // БазовыйПериодНачало, БазовыйПериодКонец, ВидРасчета, Сторно
	                                                              // ФизЛицо, Организация, 
	                                                              // Результат, Размер, ДокументОснование, Авторасчет, ПорядокРасчетаБазы
	//vvv
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СпособОтраженияВБухУчете) Тогда
		Движение.СпособОтраженияВБухучете=ВыборкаПоШапкеДокумента.СпособОтраженияВБухУчете;
	КонецЕсли;
	//
КонецПроцедуры // ДобавитьСтрокуУдержаний

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура Автозаполнение(ВременнаяТаблица = Неопределено, Реквизиты = Неопределено, ОсновноеНачисление = Истина) Экспорт
	
	Если ВременнаяТаблица = НеОпределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ВременнаяТаблица", ВременнаяТаблица);
	Запрос.УстановитьПараметр("ПарамВидРасчета",Реквизиты.ВидРасчета);
	Запрос.УстановитьПараметр("ПарамПериодРегистрации",ПериодРегистрации);
	Запрос.УстановитьПараметр("ПарамФизЛица",ВременнаяТаблица.ВыгрузитьКолонку("Физлицо"));
	Запрос.УстановитьПараметр("ПарамОрганизация",Организация);
	Запрос.УстановитьПараметр("ПарамДатаНачала",Реквизиты.ДатаНачала);
	Запрос.УстановитьПараметр("ПарамДатаОкончания",Реквизиты.ДатаОкончания);
	Если Не ОсновноеНачисление Тогда
		Запрос.УстановитьПараметр("ПарамКодВычета",Реквизиты.КодВычета);
	КонецЕсли;
	Запрос.УстановитьПараметр("парамВалютаРегламентУчета" , Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВременнаяТаблица.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&ВременнаяТаблица КАК ВременнаяТаблица
	|ИНДЕКСИРОВАТЬ ПО ФизЛицо";

	Запрос.Выполнить();
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВременнаяТаблица.ФизЛицо КАК ФизЛицо,
	|	НачисленияОрганизацийПоказатели.Показатель,
	|	НачисленияОрганизацийПоказатели.НомерСтроки
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК НачисленияОрганизацийПоказатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК ВременнаяТаблица
	|		ПО Истина
	|ГДЕ
	|	НачисленияОрганизацийПоказатели.Ссылка = &ПарамВидРасчета";
	
	Запрос.Выполнить();

	// таблица ВТЗначенияПоказателей
	// 
	// Поля:
	//   Сотрудник
	//   Показатель - введенный пользователем показатель
	//   Значение - значение показателя
	//
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияПоказателейСхемМотивации.Сотрудник КАК Сотрудник,
	|	Работники.ПодразделениеОрганизации КАК Подразделение,
	|	ЗначенияПоказателейСхемМотивации.Показатель КАК Показатель,
	|	ВЫБОР
	|		КОГДА ЗначенияПоказателейСхемМотивации.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
	|			ТОГДА ВЫБОР
	|					КОГДА ЗначенияПоказателейСхемМотивации.Валюта В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|						ТОГДА ЗначенияПоказателейСхемМотивации.Значение
	|					ИНАЧЕ ЗначенияПоказателейСхемМотивации.Значение * ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
	|				КОНЕЦ
	|		ИНАЧЕ ЗначенияПоказателейСхемМотивации.Значение
	|	КОНЕЦ КАК Значение
	|ПОМЕСТИТЬ ВТЗначенияПоказателей
	|ИЗ
	|		(ВЫБРАТЬ
	|			Ежемесячно.Организация,
	|			Ежемесячно.Подразделение КАК Подразделение,
	|			Ежемесячно.Показатель КАК Показатель,
	|			Ежемесячно.Валюта КАК Валюта,
	|			Ежемесячно.Значение КАК Значение,
	|			Ежемесячно.Сотрудник КАК Сотрудник
	|		ИЗ
	|			РегистрСведений.ЗначенияПоказателейСхемМотивации КАК Ежемесячно
	|		ГДЕ
	|			Ежемесячно.Значение ЕСТЬ НЕ NULL 
	|			И Ежемесячно.Организация = &парамОрганизация
	|			И Ежемесячно.ПериодДействия >= &ПарамДатаНачала
	|			И Ежемесячно.ПериодДействия <= &ПарамДатаОкончания
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Организация,
	|			ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Подразделение,
	|			ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Показатель,
	|			ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Валюта,
	|			ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Значение,
	|			NULL
	|		ИЗ
	|			РегистрСведений.ПериодическиеЗначенияПоказателейСхемМотивации.СрезПоследних(&ПарамДатаОкончания, Организация = &парамОрганизация) КАК ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних) КАК ЗначенияПоказателейСхемМотивации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ПарамДатаОкончания,
	|				Организация = &парамОрганизация
	|					И Сотрудник.ФизЛицо В (&ПарамФизЛица)) КАК Работники
	|		ПО (ВЫБОР
	|				КОГДА ЗначенияПоказателейСхемМотивации.Показатель.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателейСхемМотивации.Индивидуальный)
	|						ИЛИ ЗначенияПоказателейСхемМотивации.Показатель.ВидПоказателя ЕСТЬ NULL 
	|					ТОГДА Работники.Сотрудник = ЗначенияПоказателейСхемМотивации.Сотрудник
	|				КОГДА ЗначенияПоказателейСхемМотивации.Показатель.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателейСхемМотивации.ПоПодразделению)
	|					ТОГДА Работники.ПодразделениеОрганизации = ЗначенияПоказателейСхемМотивации.Подразделение
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)

	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|		ПО (Валюты.Период = &ПарамДатаОкончания)
	|			И ЗначенияПоказателейСхемМотивации.Валюта = Валюты.Валюта
	|ГДЕ
	|	ЗначенияПоказателейСхемМотивации.Показатель В(ВЫБРАТЬ Показатель Из ВТПоказатели)
	|	И ЗначенияПоказателейСхемМотивации.Организация = &парамОрганизация
	|	И ЗначенияПоказателейСхемМотивации.Значение ЕСТЬ НЕ NULL 
	|	И ВЫБОР
	|			КОГДА ЗначенияПоказателейСхемМотивации.Показатель.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателейСхемМотивации.Индивидуальный)
	|					ИЛИ ЗначенияПоказателейСхемМотивации.Показатель.ВидПоказателя ЕСТЬ NULL 
	|				ТОГДА ЗначенияПоказателейСхемМотивации.Сотрудник.ФизЛицо В (&ПарамФизЛица)
	|			КОГДА ЗначенияПоказателейСхемМотивации.Показатель.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателейСхемМотивации.ПоПодразделению)
	|				ТОГДА Работники.ПодразделениеОрганизации = ЗначенияПоказателейСхемМотивации.Подразделение
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Показатель
	|";
	Запрос.Выполнить();

	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизацийПоказатели.Показатель,
	|	ОсновныеНачисленияОрганизацийПоказатели.Ссылка.ЗачетОтработанногоВремени,
	|	ОсновныеНачисленияОрганизацийПоказатели.Ссылка,
	|	ОсновныеНачисленияОрганизацийПоказатели.НомерСтроки,
	|	ОсновныеНачисленияОрганизацийПоказатели.Ссылка.СпособРасчета
	|ПОМЕСТИТЬ ВТПоказателиИзПВР
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияОрганизацийПоказатели
	|ГДЕ
	|	ОсновныеНачисленияОрганизацийПоказатели.Показатель В (ВЫБРАТЬ Показатель Из ВТПоказатели)
	|				И (ОсновныеНачисленияОрганизацийПоказатели.Показатель.ВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ИзменяетсяПриРасчете)
	|					ИЛИ ОсновныеНачисленияОрганизацийПоказатели.Показатель.ВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	ИСТИНА,
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	NULL,
	|	ОсновныеНачисленияОрганизаций.СпособРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.Ссылка.ЗачетОтработанногоВремени 
	|	ИЛИ ОсновныеНачисленияОрганизаций.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам))
	|	ИЛИ ОсновныеНачисленияОрганизаций.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
	|	
	|";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Работники.ПодразделениеОрганизации КАК Подразделение,
	|	Начисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	Начисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	Показатели1.Показатель КАК ППоказатель1,
	|	Показатели2.Показатель КАК ППоказатель2,
	|	Показатели3.Показатель КАК ППоказатель3,
	|	Показатели4.Показатель КАК ППоказатель4,
	|	Показатели5.Показатель КАК ППоказатель5,
	|	Показатели6.Показатель КАК ППоказатель6,
	|	ВЫБОР
	|		КОГДА Показатели1.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
	|			ТОГДА ВЫБОР
	|					КОГДА Начисления.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|						ТОГДА Начисления.Показатель1
	|					ИНАЧЕ Начисления.Показатель1 * ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0)
	|				КОНЕЦ
	|		КОГДА Показатели1.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|			ТОГДА ТарифныеРазряды1.Размер
	|		ИНАЧЕ Начисления.Показатель1
	|	КОНЕЦ КАК Показатель1,
	|	ВЫБОР КОГДА Показатели2.Показатель ЕСТЬ НЕ NULL ТОГДА
	|		ВЫБОР
	|			КОГДА Показатели2.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
	|				ТОГДА ВЫБОР
	|						КОГДА Начисления.Валюта2 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|							ТОГДА Начисления.Показатель2
	|						ИНАЧЕ Начисления.Показатель2 * ЕСТЬNULL(Валюты2.Курс / Валюты2.Кратность, 0)
	|					КОНЕЦ
	|			КОГДА Показатели2.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|				ТОГДА ТарифныеРазряды2.Размер
	|			ИНАЧЕ Начисления.Показатель2
	|		КОНЕЦ
	|	КОНЕЦ КАК Показатель2,
	|	ВЫБОР КОГДА Показатели3.Показатель ЕСТЬ НЕ NULL ТОГДА
	|		ВЫБОР
	|			КОГДА Показатели3.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
	|				ТОГДА ВЫБОР
	|						КОГДА Начисления.Валюта3 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|							ТОГДА Начисления.Показатель3
	|						ИНАЧЕ Начисления.Показатель3 * ЕСТЬNULL(Валюты2.Курс / Валюты2.Кратность, 0)
	|					КОНЕЦ
	|			КОГДА Показатели3.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|				ТОГДА ТарифныеРазряды3.Размер
	|			ИНАЧЕ Начисления.Показатель3
	|		КОНЕЦ
	|	КОНЕЦ КАК Показатель3,
	|	ВЫБОР КОГДА Показатели4.Показатель ЕСТЬ НЕ NULL ТОГДА
	|		ВЫБОР
	|			КОГДА Показатели4.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
	|				ТОГДА ВЫБОР
	|						КОГДА Начисления.Валюта4 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|							ТОГДА Начисления.Показатель4
	|						ИНАЧЕ Начисления.Показатель4 * ЕСТЬNULL(Валюты4.Курс / Валюты4.Кратность, 0)
	|					КОНЕЦ
	|			КОГДА Показатели4.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|				ТОГДА ТарифныеРазряды4.Размер
	|			ИНАЧЕ Начисления.Показатель4
	|		КОНЕЦ
	|	КОНЕЦ КАК Показатель4,
	|	ВЫБОР КОГДА Показатели5.Показатель ЕСТЬ НЕ NULL ТОГДА
	|		ВЫБОР
	|			КОГДА Показатели5.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
	|				ТОГДА ВЫБОР
	|						КОГДА Начисления.Валюта5 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|							ТОГДА Начисления.Показатель5
	|						ИНАЧЕ Начисления.Показатель5 * ЕСТЬNULL(Валюты5.Курс / Валюты5.Кратность, 0)
	|					КОНЕЦ
	|			КОГДА Показатели5.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|				ТОГДА ТарифныеРазряды5.Размер
	|			ИНАЧЕ Начисления.Показатель5
	|		КОНЕЦ
	|	КОНЕЦ КАК Показатель5,
	|	ВЫБОР КОГДА Показатели6.Показатель ЕСТЬ НЕ NULL ТОГДА
	|		ВЫБОР
	|			КОГДА Показатели6.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
	|				ТОГДА ВЫБОР
	|						КОГДА Начисления.Валюта6 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|							ТОГДА Начисления.Показатель6
	|						ИНАЧЕ Начисления.Показатель6 * ЕСТЬNULL(Валюты6.Курс / Валюты6.Кратность, 0)
	|					КОНЕЦ
	|			КОГДА Показатели6.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|				ТОГДА ТарифныеРазряды6.Размер
	|			ИНАЧЕ Начисления.Показатель6
	|		КОНЕЦ
	|	КОНЕЦ КАК Показатель6
	|ПОМЕСТИТЬ ВТПлановыеНачисления
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|				&ПарамПериодРегистрации,
	|				Организация = &ПарамОрганизация
	|					И Сотрудник.ФизЛицо В (&ПарамФизЛица) И (ВидРасчета В (ВЫБРАТЬ Ссылка Из ВТПоказателиИзПВР))) КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ПарамДатаОкончания,
	|				Организация = &парамОрганизация
	|					И Сотрудник.ФизЛицо В (&ПарамФизЛица)) КАК Работники
	|		ПО (Работники.Сотрудник = Начисления.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты1
	|		ПО (Валюты1.Период = &ПарамДатаОкончания)
	|			И Начисления.Валюта1 = Валюты1.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты2
	|		ПО (Валюты2.Период = &ПарамДатаОкончания)
	|			И Начисления.Валюта2 = Валюты2.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты3
	|		ПО (Валюты3.Период = &ПарамДатаОкончания)
	|			И Начисления.Валюта3 = Валюты3.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты4
	|		ПО (Валюты4.Период = &ПарамДатаОкончания)
	|			И Начисления.Валюта4 = Валюты4.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты5
	|		ПО (Валюты5.Период = &ПарамДатаОкончания)
	|			И Начисления.Валюта5 = Валюты5.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты6
	|		ПО (Валюты6.Период = &ПарамДатаОкончания)
	|			И Начисления.Валюта6 = Валюты6.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ПарамДатаОкончания, ) КАК ТарифныеРазряды1
	|		ПО Начисления.ТарифныйРазряд1 = ТарифныеРазряды1.ТарифныйРазряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ПарамДатаОкончания, ) КАК ТарифныеРазряды2
	|		ПО Начисления.ТарифныйРазряд2 = ТарифныеРазряды2.ТарифныйРазряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ПарамДатаОкончания, ) КАК ТарифныеРазряды3
	|		ПО Начисления.ТарифныйРазряд3 = ТарифныеРазряды3.ТарифныйРазряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ПарамДатаОкончания, ) КАК ТарифныеРазряды4
	|		ПО Начисления.ТарифныйРазряд4 = ТарифныеРазряды4.ТарифныйРазряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ПарамДатаОкончания, ) КАК ТарифныеРазряды5
	|		ПО Начисления.ТарифныйРазряд5 = ТарифныеРазряды5.ТарифныйРазряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ПарамДатаОкончания, ) КАК ТарифныеРазряды6
	|		ПО Начисления.ТарифныйРазряд6 = ТарифныеРазряды6.ТарифныйРазряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиИзПВР КАК Показатели1
	|			ПО Показатели1.Ссылка = Начисления.ВидРасчета
	|			И Показатели1.НомерСтроки = 1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиИзПВР КАК Показатели2
	|			ПО Показатели2.Ссылка = Начисления.ВидРасчета
	|			И Показатели2.НомерСтроки = 2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиИзПВР КАК Показатели3
	|			ПО Показатели3.Ссылка = Начисления.ВидРасчета
	|			И Показатели3.НомерСтроки = 3
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиИзПВР КАК Показатели4
	|			ПО Показатели4.Ссылка = Начисления.ВидРасчета
	|			И Показатели4.НомерСтроки = 4
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиИзПВР КАК Показатели5
	|			ПО Показатели5.Ссылка = Начисления.ВидРасчета
	|			И Показатели5.НомерСтроки = 5
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиИзПВР КАК Показатели6
	|			ПО Показатели6.Ссылка = Начисления.ВидРасчета
	|			И Показатели6.НомерСтроки = 6
	|ГДЕ
	|	Начисления.Показатель1 <> 0 ИЛИ Начисления.Показатель2 <> 0 ИЛИ Начисления.Показатель3 <> 0 ИЛИ Начисления.Показатель4 <> 0 ИЛИ Начисления.Показатель5 <> 0 ИЛИ Начисления.Показатель6 <> 0 ";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ПарамВидРасчета КАК ВидРасчета,
	|	&ПарамДатаНачала КАК ДатаНачала,
	|	&ПарамДатаОкончания КАК ДатаОкончания,
	|	ИСТИНА КАК Авторасчет,
	|	Показатели.ФизЛицо,
	|	СУММА(ВЫБОР
	|			КОГДА Показатели.НомерСтроки = 1
	|				ТОГДА ЗначенияПлановыхИФактическихПоказателей.ЗначениеПоказателя
	|		КОНЕЦ) КАК Показатель1,
	|	СУММА(ВЫБОР
	|			КОГДА Показатели.НомерСтроки = 2
	|				ТОГДА ЗначенияПлановыхИФактическихПоказателей.ЗначениеПоказателя
	|		КОНЕЦ) КАК Показатель2,
	|	СУММА(ВЫБОР
	|			КОГДА Показатели.НомерСтроки = 3
	|				ТОГДА ЗначенияПлановыхИФактическихПоказателей.ЗначениеПоказателя
	|		КОНЕЦ) КАК Показатель3,
	|	СУММА(ВЫБОР
	|			КОГДА Показатели.НомерСтроки = 4
	|				ТОГДА ЗначенияПлановыхИФактическихПоказателей.ЗначениеПоказателя
	|		КОНЕЦ) КАК Показатель4,
	|	СУММА(ВЫБОР
	|			КОГДА Показатели.НомерСтроки = 5
	|				ТОГДА ЗначенияПлановыхИФактическихПоказателей.ЗначениеПоказателя
	|		КОНЕЦ) КАК Показатель5,
	|	СУММА(ВЫБОР
	|			КОГДА Показатели.НомерСтроки = 6
	|				ТОГДА ЗначенияПлановыхИФактическихПоказателей.ЗначениеПоказателя
	|		КОНЕЦ) КАК Показатель6
	|ИЗ
	|	ВТПоказатели КАК Показатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПлановыеНачисления.Сотрудник.ФизЛицо КАК ФизЛицо,
	|			ПлановыеНачисления.Подразделение КАК Подразделение,
	|			ПлановыеНачисления.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|			ПлановыеНачисления.СпособРасчета КАК СпособРасчета,
	|			ПлановыеНачисления.ППоказатель1 КАК Показатель,
	|			ПлановыеНачисления.Показатель1 КАК ЗначениеПоказателя
	|		ИЗ
	|			ВТПлановыеНачисления КАК ПлановыеНачисления
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ПлановыеНачисления.Сотрудник.ФизЛицо,
	|			ПлановыеНачисления.Подразделение КАК Подразделение,
	|			ЛОЖЬ,
	|			NULL,
	|			ПлановыеНачисления.ППоказатель2,
	|			ПлановыеНачисления.Показатель2
	|		ИЗ
	|			ВТПлановыеНачисления КАК ПлановыеНачисления
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ПлановыеНачисления.Сотрудник.ФизЛицо,
	|			ПлановыеНачисления.Подразделение КАК Подразделение,	
	|			ЛОЖЬ,
	|			NULL,
	|			ПлановыеНачисления.ППоказатель3,
	|			ПлановыеНачисления.Показатель3
	|		ИЗ
	|			ВТПлановыеНачисления КАК ПлановыеНачисления
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ПлановыеНачисления.Сотрудник.ФизЛицо,
	|			ПлановыеНачисления.Подразделение КАК Подразделение,
	|			ЛОЖЬ,
	|			NULL,
	|			ПлановыеНачисления.ППоказатель4,
	|			ПлановыеНачисления.Показатель4
	|		ИЗ
	|			ВТПлановыеНачисления КАК ПлановыеНачисления
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ПлановыеНачисления.Сотрудник.ФизЛицо,
	|			ПлановыеНачисления.Подразделение КАК Подразделение,
	|			ЛОЖЬ,
	|			NULL,
	|			ПлановыеНачисления.ППоказатель5,
	|			ПлановыеНачисления.Показатель5
	|		ИЗ
	|			ВТПлановыеНачисления КАК ПлановыеНачисления
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ПлановыеНачисления.Сотрудник.ФизЛицо,
	|			ПлановыеНачисления.Подразделение КАК Подразделение,
	|			ЛОЖЬ,
	|			NULL,
	|			ПлановыеНачисления.ППоказатель6,
	|			ПлановыеНачисления.Показатель6
	|		ИЗ
	|			ВТПлановыеНачисления КАК ПлановыеНачисления
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ЗначенияПоказателей.Сотрудник.ФизЛицо,
	|			ЗначенияПоказателей.Подразделение КАК Подразделение,
	|			ЛОЖЬ,
	|			NULL,
	|			ЗначенияПоказателей.Показатель,
	|			ЗначенияПоказателей.Значение
	|		ИЗ
	|			ВТЗначенияПоказателей КАК ЗначенияПоказателей) КАК ЗначенияПлановыхИФактическихПоказателей
	|		ПО (ЗначенияПлановыхИФактическихПоказателей.Показатель = Показатели.Показатель
	|					И ЗначенияПлановыхИФактическихПоказателей.ЗначениеПоказателя <> 0
	|				ИЛИ Показатели.Показатель.ТарифнаяСтавка
	|					И ЗначенияПлановыхИФактическихПоказателей.ЗачетОтработанногоВремени
	|				ИЛИ Показатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	|					И ЗначенияПлановыхИФактическихПоказателей.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам))
	|				ИЛИ Показатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
	|					И ЗначенияПлановыхИФактическихПоказателей.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|				ИЛИ Показатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
	|					И ЗначенияПлановыхИФактическихПоказателей.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок)))
	|				И Показатели.ФизЛицо = ЗначенияПлановыхИФактическихПоказателей.ФизЛицо	
	|				И (Показатели.Показатель.ВидПоказателя = Значение(Перечисление.ВидыПоказателейСхемМотивации.Индивидуальный) И Показатели.ФизЛицо = ЗначенияПлановыхИФактическихПоказателей.ФизЛицо
	|				ИЛИ Показатели.Показатель.ВидПоказателя = Значение(Перечисление.ВидыПоказателейСхемМотивации.Общий))
	
	|ГДЕ
	|	Показатели.ФизЛицо ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	Показатели.ФизЛицо";
		
	Удержания.Загрузить(Запрос.Выполнить().Выгрузить());


КонецПроцедуры
	
// Выполняет расчет удержаний
Процедура РассчитатьУдержания() Экспорт
	
	Отказ = Ложь;
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(ВыборкаПоШапкеДокумента).Выбрать();
	ЗафиксироватьТранзакцию();	

	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	
	// создадим наборы записей для выполнения движений
	НаборУдержания = РегистрыРасчета.УдержанияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборУдержания.Отбор.Регистратор.Значение = Ссылка;
	
	// сформируем движения удержаний по данным табличной части без записи (запись делается процедурой РассчитатьЗаписиРегистраРасчета)
	Пока ВыборкаПоУдержаниям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, ВыборкаПоШапкеДокумента, НаборУдержания);
		КонецЕсли;	
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 

	// рассчитываем записи
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("УдержанияРаботниковОрганизаций", НаборУдержания, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, Удержания);
	
	// Удаляем движения
	НаборУдержания.Очистить();
	НаборУдержания.Записать();
	
КонецПроцедуры

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.НачислениеОтпускаРаботникамОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Физлица = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	Запрос.УстановитьПараметр("Физлица", Физлица);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам", Физлица = Неопределено);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РазовыеУдержания.Физлицо,
	|	-РазовыеУдержания.Результат КАК Результат,
	|	ИСТИНА КАК Сторно,
	|	ЛОЖЬ КАК Авторасчет,
	|	РазовыеУдержания.НомерСтроки КАК НомерСтроки,
	|	РазовыеУдержания.ВидРасчета,
	|	РазовыеУдержания.ДатаНачала,
	|	РазовыеУдержания.ДатаОкончания,
	|	РазовыеУдержания.Показатель1,
	|	РазовыеУдержания.Показатель2,
	|	РазовыеУдержания.Показатель3,
	|	РазовыеУдержания.Показатель4,
	|	РазовыеУдержания.Показатель5,
	|	РазовыеУдержания.Показатель6
	|ИЗ
	|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК РазовыеУдержания
	|ГДЕ
	|	РазовыеУдержания.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ РазовыеУдержания.Сторно)
	|	И РазовыеУдержания.Ссылка.Проведен
	|	И (&ПоВсемСотрудникам
	|			ИЛИ РазовыеУдержания.Физлицо В (&Физлица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РазовыеУдержания.Физлицо,
	|	0,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	РазовыеУдержания.НомерСтроки,
	|	РазовыеУдержания.ВидРасчета,
	|	РазовыеУдержания.ДатаНачала,
	|	РазовыеУдержания.ДатаОкончания,
	|	РазовыеУдержания.Показатель1,
	|	РазовыеУдержания.Показатель2,
	|	РазовыеУдержания.Показатель3,
	|	РазовыеУдержания.Показатель4,
	|	РазовыеУдержания.Показатель5,
	|	РазовыеУдержания.Показатель6
	|ИЗ
	|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК РазовыеУдержания
	|ГДЕ
	|	РазовыеУдержания.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ РазовыеУдержания.Сторно)
	|	И (&ПоВсемСотрудникам
	|			ИЛИ РазовыеУдержания.Физлицо В (&Физлица))
	|	И РазовыеУдержания.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сторно УБЫВ,
	|	НомерСтроки";
	
	Удержания.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

#Если Клиент Тогда

// Заполняет показатели
//
Функция ЗаполнитьПоказатели(ТекущийСотрудник) Экспорт 
	
	Если ТекущийСотрудник = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Удержания.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТЗУдержания		= Удержания.Выгрузить(,"ФизЛицо,ВидРасчета");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Удержания",ТЗУдержания);
	Запрос.УстановитьПараметр("ПарамДата",НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ПарамГоловнаяОрганизация",ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Удержания.ВидРасчета,
	|	Удержания.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТУдержания
	|ИЗ
	|	&Удержания КАК Удержания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.ВидДоговора,
	|	СотрудникиОрганизаций.Физлицо,
	|	СотрудникиОрганизаций.ВидЗанятости КАК ВидЗанятости
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Организация = &ПарамГоловнаяОрганизация
	|	И СотрудникиОрганизаций.Физлицо В
	|			(ВЫБРАТЬ
	|				Удержания.ФизЛицо КАК ФизЛицо
	|			ИЗ
	|				ВТУдержания КАК Удержания)
	|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И СотрудникиОрганизаций.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиОсновноеМесто.Сотрудник КАК Сотрудник,
	|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
	|	СотрудникиОрганизаций.ВидЗанятости КАК ВидЗанятости
	|ПОМЕСТИТЬ ВТДанныеОРаботниках
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&ПарамДата,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					Сотрудники.Сотрудник
	|				ИЗ
	|					ВТСотрудники КАК Сотрудники)) КАК РаботникиОсновноеМесто
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК СотрудникиОрганизаций
	|		ПО РаботникиОсновноеМесто.Сотрудник = СотрудникиОрганизаций.Сотрудник
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОсновноеМесто.ПериодЗавершения <= &ПарамДата
	|					И РаботникиОсновноеМесто.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОсновноеМесто.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОсновноеМесто.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЗанятости,
	|	Физлицо";			
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Показатели.Показатель КАК Показатель,
	|	Показатели.Показатель.ВидПоказателя КАК ВидПоказателя,
	|	Сотрудники.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТУдержания КАК Удержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели
	|		ПО Удержания.ВидРасчета = Показатели.Ссылка
	|			И ((НЕ Показатели.Показатель.Предопределенный))
	|			И (Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется))
	|			И (Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокСотрудников.Сотрудник КАК Сотрудник,
	|			СписокСотрудников.Физлицо КАК Физлицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
	|				РаботникиОсновноеМесто.Физлицо КАК Физлицо,
	|				1 КАК Приоритет
	|			ИЗ
	|				ВТДанныеОРаботниках КАК РаботникиОсновноеМесто
	|			ГДЕ
	|				РаботникиОсновноеМесто.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиОсновноеМесто.Физлицо
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиСовместительство.Сотрудник),
	|				РаботникиСовместительство.Физлицо,
	|				2
	|			ИЗ
	|				ВТДанныеОРаботниках КАК РаботникиСовместительство
	|			ГДЕ
	|				РаботникиСовместительство.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиСовместительство.Физлицо
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				МАКСИМУМ(СотрудникиДУ.Сотрудник),
	|				СотрудникиДУ.Физлицо,
	|				ВЫБОР
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|						ТОГДА 4
	|					ИНАЧЕ 5
	|				КОНЕЦ
	|			ИЗ
	|				ВТСотрудники КАК СотрудникиДУ
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СотрудникиДУ.Физлицо,
	|				ВЫБОР
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|						ТОГДА 4
	|					ИНАЧЕ 5
	|				КОНЕЦ) КАК СписокСотрудников
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					СписокФизическихЛиц.Физлицо КАК Физлицо,
	|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
	|				ИЗ
	|					(ВЫБРАТЬ
	|						РаботникиОсновноеМесто.Физлицо КАК Физлицо,
	|						1 КАК Приоритет
	|					ИЗ
	|						ВТДанныеОРаботниках КАК РаботникиОсновноеМесто
	|					ГДЕ
	|						РаботникиОсновноеМесто.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						РаботникиСовместительство.Физлицо,
	|						2
	|					ИЗ
	|						ВТДанныеОРаботниках КАК РаботникиСовместительство
	|					ГДЕ
	|						РаботникиСовместительство.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						СотрудникиДУ.Физлицо,
	|						ВЫБОР
	|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|								ТОГДА 4
	|							ИНАЧЕ 5
	|						КОНЕЦ
	|					ИЗ
	|						ВТСотрудники КАК СотрудникиДУ) КАК СписокФизическихЛиц
	|				
	|				СГРУППИРОВАТЬ ПО
	|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
	|				ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
	|					И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет) КАК Сотрудники
	|		ПО Удержания.ФизЛицо = Сотрудники.Физлицо
	|ГДЕ
	|	Показатели.Показатель ЕСТЬ НЕ NULL 
	|	И Сотрудники.Сотрудник ЕСТЬ НЕ NULL ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		
		ТаблицаЗапроса = Результат.Выгрузить();
		Показатели = ТаблицаЗапроса.ВыгрузитьКолонку("Показатель");
		Сотрудники = ТаблицаЗапроса.ВыгрузитьКолонку("Сотрудник");
		
		ФормаВводаПоказателей = РегистрыСведений.ЗначенияПоказателейСхемМотивации.ПолучитьФорму("ФормаВводаЗначенийПоказателей");
		ФормаВводаПоказателей.Организация		= Организация;
		ФормаВводаПоказателей.ПериодДействия	= НачалоМесяца(ПериодРегистрации);
		ФормаВводаПоказателей.ФормаАвтозаполнение(ТаблицаЗапроса, Сотрудники, Показатели);
		ФормаВводаПоказателей.мСотрудникДляОткрытия = ТекущийСотрудник;
		ФормаВводаПоказателей.Открыть();		
		
		Возврат Истина;
		
	КонецЕсли;

КонецФункции //ЗаполнитьПоказатели

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацияРазовыхУдержанийРаботниковОрганизации.Дата,
	|	РегистрацияРазовыхУдержанийРаботниковОрганизации.ПериодРегистрации,
	|	РегистрацияРазовыхУдержанийРаботниковОрганизации.Организация,
	//vvv
	|	РегистрацияРазовыхУдержанийРаботниковОрганизации.СпособОтраженияВБухучете,
	//
	|	ВЫБОР
	|		КОГДА РегистрацияРазовыхУдержанийРаботниковОрганизации.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА РегистрацияРазовыхУдержанийРаботниковОрганизации.Организация
	|		ИНАЧЕ РегистрацияРазовыхУдержанийРаботниковОрганизации.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	РегистрацияРазовыхУдержанийРаботниковОрганизации.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	РегистрацияРазовыхУдержанийРаботниковОрганизации.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	РегистрацияРазовыхУдержанийРаботниковОрганизации.Организация КАК ОбособленноеПодразделение,
	|	РегистрацияРазовыхУдержанийРаботниковОрганизации.Ссылка
	|ИЗ
	|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций КАК РегистрацияРазовыхУдержанийРаботниковОрганизации
	|ГДЕ
	|	РегистрацияРазовыхУдержанийРаботниковОрганизации.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Удержания" документа
//
// Параметры: 
//	нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоУдержания(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",				Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации",			ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериодаРегистрации",	КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПриемНаРаботу",				Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("ВнутреннееСовместительство",	Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("ЗаВесьПериод",				Перечисления.ПорядокРасчетаБазы.ЗаВесьПериод);
	Запрос.УстановитьПараметр("ПриПриемеНаРаботу",			Перечисления.ПорядокРасчетаБазы.ПриПриемеНаРаботу);
	Запрос.УстановитьПараметр("ПриУвольнении",				Перечисления.ПорядокРасчетаБазы.ПриУвольнении);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ГоловнаяОрганизация КАК Организация,
	|	СтрокиУдержания.Физлицо,
	|	СтрокиУдержания.ВидРасчета,
	|	СтрокиУдержания.ДатаНачала,
	|	СтрокиУдержания.ДатаОкончания,
	|	СтрокиУдержания.ДатаНачала КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокиУдержания.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА СтрокиУдержания.ДатаОкончания
	|		ИНАЧЕ КОНЕЦПЕРИОДА(СтрокиУдержания.ДатаОкончания, ДЕНЬ)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокиУдержания.НомерСтроки КАК НомерСтроки,
	|	СтрокиУдержания.Показатель1,
	|	СтрокиУдержания.Показатель2,
	|	СтрокиУдержания.Показатель3,
	|	СтрокиУдержания.Показатель4,
	|	СтрокиУдержания.Показатель5,
	|	СтрокиУдержания.Показатель6,
	//vvv
	|	СтрокиУдержания.СпособОтраженияВБухучете,
	|	СтрокиУдержания.Номер,
	//
	|	СтрокиУдержания.Результат,
	|	СтрокиУдержания.Сторно,
	|	СтрокиУдержания.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиУдержания.Авторасчет КАК Авторасчет,
	|	ВЫБОР
	|		КОГДА СтрокиУдержания.ДатаНачала > &ПериодРегистрации
	|				И ПринятыеВТекущемМесяце.Период ЕСТЬ НЕ NULL 
	|			ТОГДА &ПриПриемеНаРаботу
	|		КОГДА СтрокиУдержания.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА &ЗаВесьПериод
	|		КОГДА КОНЕЦПЕРИОДА(СтрокиУдержания.ДатаОкончания, ДЕНЬ) < &КонецПериодаРегистрации
	|				И УволенныеВТекущемМесяце.ПричинаИзмененияСостоянияЗавершения = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				И УволенныеВТекущемМесяце.ПериодЗавершения <= &КонецПериодаРегистрации
	|				И УволенныеВТекущемМесяце.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА &ПриУвольнении
	|		КОГДА КОНЕЦПЕРИОДА(СтрокиУдержания.ДатаОкончания, ДЕНЬ) < &КонецПериодаРегистрации
	|				И УволенныеВТекущемМесяце.Период ЕСТЬ НЕ NULL 
	|			ТОГДА &ПриУвольнении
	|		ИНАЧЕ &ЗаВесьПериод
	|	КОНЕЦ КАК ПорядокРасчетаБазы
	|ИЗ
	|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК СтрокиУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|		ИЗ
	|			Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|				ПО РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо
	|		ГДЕ
	|			РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.Ссылка = &ДокументСсылка
	|			И РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.ДатаНачала > &ПериодРегистрации
	|			И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
	|			И РаботникиОрганизаций.Период > &ПериодРегистрации
	|			И РаботникиОрганизаций.Период <= &КонецПериодаРегистрации
	|			И РаботникиОрганизаций.ПричинаИзмененияСостояния = &ПриемНаРаботу
	|			И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.НомерСтроки) КАК ПринятыеВТекущемМесяце
	|		ПО СтрокиУдержания.НомерСтроки = ПринятыеВТекущемМесяце.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.НомерСтроки КАК НомерСтроки,
	|			РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения КАК ПричинаИзмененияСостоянияЗавершения,
	|			РаботникиОрганизаций.ПериодЗавершения КАК ПериодЗавершения,
	|			МИНИМУМ(РаботникиОрганизаций.Период) КАК Период
	|		ИЗ
	|			Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|				ПО РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо
	|		ГДЕ
	|			РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.Ссылка = &ДокументСсылка
	|			И РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			И РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.ДатаОкончания < &КонецПериодаРегистрации
	|			И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
	|			И РаботникиОрганизаций.Период >= &ПериодРегистрации
	|			И РаботникиОрганизаций.Период < &КонецПериодаРегистрации
	|			И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.НомерСтроки,
	|			РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения,
	|			РаботникиОрганизаций.ПериодЗавершения) КАК УволенныеВТекущемМесяце
	|		ПО СтрокиУдержания.НомерСтроки = УволенныеВТекущемМесяце.НомерСтроки
	|ГДЕ
	|	СтрокиУдержания.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоУдержания()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, в которой выполняются удержания!", Отказ, Заголовок);
	КонецЕсли;
	
	//  ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан месяц, в котором выполняются удержания!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией исправляемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Удержания" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Удержания"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой и 
		ВыборкаПоСтрокамДокумента.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
		// Дата начала
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала удержания!", Отказ, Заголовок);
		КонецЕсли;

		// Дата окончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания удержания!", Отказ, Заголовок);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиУдержания()

// Вычисляет разницу между начислениями и удержаниями работника и формирует
// движения по взаиморасчетам с работниками
//
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		НаборЗаписей - набор записей 
//      Перерасчет - признак проведения перерасчетов, по умолчанию - Ложь
//      Физлица - список физлиц, по которым производится расчет, по умолчанию - отсутствует
//
// Возвращаемое значение:
//  Нет.
//		
Процедура СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, НаборЗаписей, УчетЗадолженностиПоМесяцам, Перерасчет = Ложь, Физлица = НеОпределено)
	
	УдержанияРаботниковТекст = 
	"ВЫБРАТЬ
	|	ТЧУдержания.Физлицо КАК Физлицо,
	|	СУММА(ТЧУдержания.Результат) КАК СуммаУдержания
	|ИЗ
	|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК ТЧУдержания
	|
	|ГДЕ
	|	ТЧУдержания.Ссылка = &парамСсылка И
	|	(ТЧУдержания.Результат <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧУдержания.Физлицо";
	
	Запрос = Новый Запрос(УдержанияРаботниковТекст);
		
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка" , Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	// сформируем движения ВзаиморасчетыСРаботникамиОрганизаций
	Пока Выборка.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// свойства
		Движение.Период 				= КонецМесяца(ПериодРегистрации);
		Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
		
		// измерения 
		Движение.Физлицо 				= Выборка.Физлицо;
		Движение.Организация 			= Организация;
		//vvv комментируем
		//Если УчетЗадолженностиПоМесяцам Тогда
			Движение.ПериодВзаиморасчетов 	= ПериодРегистрации;
		//КонецЕсли;
		
		// ресурсы
		Движение.СуммаВзаиморасчетов 	= - Выборка.СуммаУдержания;
		
	КонецЦикла;
	
КонецПроцедуры   // СформироватьВзаиморасчетыСРаботниками

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	ПерерассчитываемыйДокумент = Неопределено
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// ведется ли учет задолженности в разрезе периодов возникновения задолженности
			УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");

			////////////////////////////////////////////////////////////////////////
			// Удержания

			// получим реквизиты табличной части
			ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(ВыборкаПоШапкеДокумента).Выбрать();

			Пока ВыборкаПоУдержаниям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, ВыборкаПоШапкеДокумента, Движения.УдержанияРаботниковОрганизаций);
				КонецЕсли;
			КонецЦикла;

			////////////////////////////////////////////////////////////////////////
			// взаиморасчеты с работниками
			
			// сформируем начисления к выплате по начислениям документа
			СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, Движения.ВзаиморасчетыСРаботникамиОрганизаций, УчетЗадолженностиПоМесяцам);
			
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Удержания,, "Физлицо");
	
КонецПроцедуры

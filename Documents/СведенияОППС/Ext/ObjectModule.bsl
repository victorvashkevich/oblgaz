



////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет автоматическое заполнение документа по данным документа и переданным параметрам
// 
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Логическое - удалось ли выполнить автоматическое заполнение документа
//
Функция Автозаполнение(ФизЛицо = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КонецПрошлого", НачалоКвартала(ДатаРегистрации)-1);
	Запрос.УстановитьПараметр("Начало", НачалоКвартала(ДатаРегистрации));
	//vvv
	Запрос.УстановитьПараметр("Начало", НачалоГода(ДатаРегистрации));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаДеноминации", ОбщегоНазначения.ПолучитьДатуДеноминации());
	//
	Запрос.УстановитьПараметр("Конец", КонецКвартала(ДатаРегистрации)); 
	Запрос.УстановитьПараметр("СписокОтчитывающихсяПодразделений", Организация);
	Запрос.УстановитьПараметр("Увольнение", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("ВнСовместитель", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	ДопУсловиеТескт = "";
	//Если Сотрудник <> Неопределено тогда
	//	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	//	ДопУсловиеТескт = "И ЕСНСведенияОДоходах.Сотрудник = &Сотрудник";
	//КонецЕсли;   
	Запрос.УстановитьПараметр("ПоВсемФизЛицам", ФизЛицо = Неопределено);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);



	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСНСведенияОДоходах.ФизЛицо
	|ПОМЕСТИТЬ ВТФизЛица
	|ИЗ
	|	РегистрСведений.ТарифыВзносовНаППС.СрезПоследних(&Конец, ) КАК ТарифыВзносовНаППССрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|		ПО ЕСНСведенияОДоходах.ВидДеятельности = ТарифыВзносовНаППССрезПоследних.ВидДеятельности
	|ГДЕ
	|	ЕСНСведенияОДоходах.ПериодВзаиморасчетов МЕЖДУ &Начало И &Конец
	//vvv
	//|	И ЕСНСведенияОДоходах.Организация = &СписокОтчитывающихсяПодразделений
	|	И ЕСНСведенияОДоходах.ОбособленноеПодразделение = &СписокОтчитывающихсяПодразделений 
	//
	|	И (&ПоВсемФизЛицам
	|			ИЛИ ЕСНСведенияОДоходах.ФизЛицо = &ФизЛицо)";
	
	Запрос.Выполнить();
		
	ДатыДвиженийТекст = 
    "ВЫБРАТЬ
    |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо,
    |	&Начало КАК ДатаС,
	//vvv
    //|	РаботникиОрганизацийСрезПоследних.Организация КАК Организация,
	|	РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение КАК Организация,
	//
    |	РаботникиОрганизацийСрезПоследних.ВидДеятельностиИзмерение КАК ВидДеятельности,
    |	РаботникиОрганизацийСрезПоследних.Должность.КодПоОКПДТР КАК КодПоОКПДТР
	|ПОМЕСТИТЬ ВТДатыДвижений
    |ИЗ
    |	ВТФизЛица КАК ФизЛица
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&КонецПрошлого, ) КАК РаботникиОрганизацийСрезПоследних
    |		ПО ФизЛица.ФизЛицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
    |ГДЕ
	//vvv
    //|	РаботникиОрганизацийСрезПоследних.Организация = &СписокОтчитывающихсяПодразделений
	|	РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение = &СписокОтчитывающихсяПодразделений
	//
    |	И РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> &Увольнение
    |	И РаботникиОрганизацийСрезПоследних.Сотрудник.ВидЗанятости <> &ВнСовместитель
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	РаботникиОрганизаций.Сотрудник.Физлицо,
    |	РаботникиОрганизаций.Период,
	//vvv
    //|	РаботникиОрганизаций.Организация,
	|	РаботникиОрганизаций.ОбособленноеПодразделение,
	//
    |	РаботникиОрганизаций.ВидДеятельностиИзмерение,
    |	РаботникиОрганизаций.Должность.КодПоОКПДТР
    |ИЗ
    |	ВТФизЛица КАК ФизЛица
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
    |		ПО ФизЛица.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
    |ГДЕ
	//vvv
    //|	РаботникиОрганизаций.Организация = &СписокОтчитывающихсяПодразделений
	|	РаботникиОрганизаций.ОбособленноеПодразделение = &СписокОтчитывающихсяПодразделений
	//
    |	И РаботникиОрганизаций.Период МЕЖДУ &Начало И &Конец
    |	И РаботникиОрганизаций.ПричинаИзмененияСостояния <> &Увольнение
    |	И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> &ВнСовместитель";

	Запрос.Текст = ДатыДвиженийТекст;
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДатыНазначений1.ВидДеятельности КАК ВидДеятельности,
	|	ДатыНазначений1.ФизЛицо КАК ФизЛицо,
	|	ДатыНазначений1.ДатаС КАК ДатаНачалаРабот,
	|	ЕСТЬNULL(МИНИМУМ(ДОБАВИТЬКДАТЕ(ДатыНазначений2.Период, СЕКУНДА, -1)), &Конец) КАК ДатаОкончанияРабот,
	|	ДатыНазначений1.Физлицо.СтраховойНомерПФР КАК ЛичныйНомер,
	|	ДатыНазначений1.КодПоОКПДТР КАК КодПоОКПДТР,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	ВТДатыДвижений КАК ДатыНазначений1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДатыНазначений2
	|		ПО (ДатыНазначений2.Сотрудник.ФизЛицо = ДатыНазначений1.ФизЛицо)
	|			И (ДатыНазначений2.Организация = ДатыНазначений1.Организация)
	|			И (ДатыНазначений2.Период > ДатыНазначений1.ДатаС)
	|			И (ДатыНазначений2.Период < &Конец)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Конец, ) КАК ФИОФизЛицСрезПоследних
	|		ПО ДатыНазначений1.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыНазначений1.ФизЛицо,
	|	ДатыНазначений1.ВидДеятельности,
	|	ДатыНазначений1.ДатаС,
	|	ДатыНазначений1.Физлицо.СтраховойНомерПФР,
	|	ДатыНазначений1.КодПоОКПДТР,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	ДатаНачалаРабот,
	|	ВидДеятельности";

	//vvv
	Запрос.Текст=
	"ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.ВидДеятельностиИзмерение КАК ВидДеятельности,
	|	ВредностьДляППС.Сотрудник.Физлицо КАК ФизЛицо,
	|	ВЫБОР КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения<=&Конец И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) 
	|		ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения<=&Конец И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) 
	|		ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения.ОсобыеПоказатели
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность.ОсобыеПоказатели
	|	КОНЕЦ КАК ОсобыеПоказатели,
	|	ВредностьДляППС.ДатаНачала КАК ДатаНачалаРабот,
	|	ВредностьДляППС.ДатаОкончания КАК ДатаОкончанияРабот,
	|	ВредностьДляППС.Сотрудник.Физлицо.СтраховойНомерПФР КАК ЛичныйНомер,
	|	ВЫБОР КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения<=&Конец И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) 
	|		ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения.КодПоОКПДТР
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность.КодПоОКПДТР
	|	КОНЕЦ КАК КодПоОКПДТР,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ВредностьДляППС КАК ВредностьДляППС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК ФизЛица
	|		ПО ФизЛица.ФизЛицо=ВредностьДляППС.Сотрудник.Физлицо 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Конец, ) КАК РаботникиОрганизацийСрезПоследних
	|		ПО ВредностьДляППС.Сотрудник.Физлицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Конец, ) КАК ФИОФизЛицСрезПоследних
	|		ПО ВредностьДляППС.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ВредностьДляППС.ДатаНачала >= &Начало
	|	И ВредностьДляППС.ДатаОкончания <= &Конец
	|	И ВредностьДляППС.Вредность
	|	И ВредностьДляППС.Организация=&ГоловнаяОрганизация
	|	И (&ПоВсемФизЛицам
	|			ИЛИ ВредностьДляППС.Сотрудник.Физлицо = &ФизЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	ДатаНачалаРабот,
	|	ВидДеятельности";
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	РаботникиОрганизаций.ВидДеятельностиИзмерение КАК ВидДеятельности,
	|	ДанныеВредности.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= &Конец
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизаций.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизаций.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= &Конец
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизаций.ДолжностьЗавершения.ОсобыеПоказатели
	|		ИНАЧЕ РаботникиОрганизаций.Должность.ОсобыеПоказатели
	|	КОНЕЦ КАК ОсобыеПоказатели,
	|	ДанныеВредности.ДатаНачалаРабот КАК ДатаНачалаРабот,
	|	ДанныеВредности.ДатаОкончанияРабот,
	|	ДанныеВредности.ФизЛицо.СтраховойНомерПФР КАК ЛичныйНомер,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= &Конец
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизаций.ДолжностьЗавершения.КодПоОКПДТР
	|		ИНАЧЕ РаботникиОрганизаций.Должность.КодПоОКПДТР
	|	КОНЕЦ КАК КодПоОКПДТР,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВредностьДляППС.Сотрудник.Физлицо КАК ФизЛицо,
	|		ВредностьДляППС.ДатаНачала КАК ДатаНачалаРабот,
	|		ВредностьДляППС.ДатаОкончания КАК ДатаОкончанияРабот,
	|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ПериодВредности
	|	ИЗ
	|		РегистрСведений.ВредностьДляППС КАК ВредностьДляППС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК ФизЛица
	|			ПО (ФизЛица.ФизЛицо = ВредностьДляППС.Сотрудник.Физлицо)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО ВредностьДляППС.Сотрудник.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо
	|				И (РаботникиОрганизаций.Период <= ВредностьДляППС.ДатаНачала)
	|	ГДЕ
	|		ВредностьДляППС.ДатаНачала >= &Начало
	|		И ВредностьДляППС.ДатаОкончания <= &Конец
	|		И ВредностьДляППС.Вредность
	|		И ВредностьДляППС.Организация = &ГоловнаяОрганизация
	|		И (&ПоВсемФизЛицам
	|				ИЛИ ВредностьДляППС.Сотрудник.Физлицо = &ФизЛицо)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВредностьДляППС.Сотрудник.Физлицо,
	|		ВредностьДляППС.ДатаНачала,
	|		ВредностьДляППС.ДатаОкончания) КАК ДанныеВредности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ДанныеВредности.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
	|			И ДанныеВредности.ПериодВредности = РаботникиОрганизаций.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Конец, ) КАК ФИОФизЛицСрезПоследних
	|		ПО ДанныеВредности.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	ДатаНачалаРабот,
	|	ВидДеятельности";
	//
	
	Таблица = Запрос.Выполнить().Выгрузить(); 
	//vvv сделаем данные стажа непрерывными
	к=0;
	Пока к<Таблица.Количество()-1 Цикл
		Стр=Таблица[к];		
		СтрСлед=Таблица[к+1];
		Если (Стр.ДатаОкончанияРабот+86400)=СтрСлед.ДатаНачалаРабот Тогда
			Стр.ДатаОкончанияРабот=СтрСлед.ДатаОкончанияРабот;
			Таблица.Удалить(СтрСлед);
		Иначе
			к=к+1;
		КонецЕсли;				
	КонецЦикла;	
    //
	Для Каждого Строка из Таблица Цикл
		Если ЗначениеЗаполнено(Строка.ВидДеятельности) тогда
			СтрокаСтажа = СведенияОСтаже.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСтажа,Строка);
		КонецЕсли; 
	КонецЦикла;
	Запрос.УстановитьПараметр("ДоходППС", Перечисления.ДоходыФСС_НС.Облагается);
    Запрос.УстановитьПараметр("ДатаПодачиСведений", ДатаРегистрации); 
	Запрос.УстановитьПараметр("ПустойВидДеятельности", Справочники.ОсобыеУсловияТруда.ПустаяСсылка());
	
 	ДоходыПоВидамЗаГод =
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ЕСНСведенияОДоходах.ДоходППС = &ДоходППС
	//vvv
	//|				ТОГДА ЕСНСведенияОДоходах.Результат
	|				ТОГДА ЕСНСведенияОДоходах.Результат / ВЫБОР КОГДА ЕСНСведенияОДоходах.Период<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ 
	//
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Выплаты,
	|	ЕСНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.ПериодВзаиморасчетов, МЕСЯЦ) КАК Месяц,
	|	ЕСНИсчисленный.ППС КАК Взносы,
	|	ЕСНИсчисленный.ПроцентППС КАК ТарифВзносов,
	|	ЕСНИсчисленный.ВидДеятельности КАК ВидДеятельности,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	ЕСНИсчисленный.ФизЛицо.СтраховойНомерПФР КАК ЛичныйНомер
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСНИсчисленный.ФизЛицо КАК ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ЕСНИсчисленный.ПериодВзаиморасчетов, МЕСЯЦ) КАК ПериодВзаиморасчетов,
	//vvv
	//|		СУММА(ЕСНИсчисленный.ППС) КАК ППС,
	|		СУММА(ЕСНИсчисленный.ППС / ВЫБОР КОГДА ЕСНИсчисленный.Период<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ) КАК ППС,
	//
	|		ЕСНИсчисленный.ПроцентППС КАК ПроцентППС,
	|		ЕСНИсчисленный.ВидДеятельности КАК ВидДеятельности
	|	ИЗ
	|		ВТФизЛица КАК ВТФизЛица
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленный
	|			ПО (ЕСНИсчисленный.ФизЛицо = ВТФизЛица.ФизЛицо)
	|	ГДЕ
	|		ЕСНИсчисленный.ПериодВзаиморасчетов МЕЖДУ &Начало И &Конец
	|		И ЕСНИсчисленный.Период <= &ДатаПодачиСведений
	//vvv
	//|		И ЕСНИсчисленный.Организация = &СписокОтчитывающихсяПодразделений
	|		И ЕСНИсчисленный.Организация = &ГоловнаяОрганизация
	//
	|		И ЕСНИсчисленный.ВидДеятельности <> &ПустойВидДеятельности
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЕСНИсчисленный.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ЕСНИсчисленный.ПериодВзаиморасчетов, МЕСЯЦ),
	|		ЕСНИсчисленный.ПроцентППС,
	|		ЕСНИсчисленный.ВидДеятельности) КАК ЕСНИсчисленный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Конец, ) КАК ФИОФизЛицСрезПоследних
	|			ПО ЕСНСведенияОДоходах.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ПО (ЕСНСведенияОДоходах.ФизЛицо = ЕСНИсчисленный.ФизЛицо)
	|			И (НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.ПериодВзаиморасчетов, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ЕСНИсчисленный.ПериодВзаиморасчетов, МЕСЯЦ))
	|ГДЕ
	|	ЕСНСведенияОДоходах.ПериодВзаиморасчетов МЕЖДУ &Начало И &Конец
	|	И ЕСНСведенияОДоходах.Период <= &ДатаПодачиСведений
	|	И ЕСНСведенияОДоходах.ВидДеятельности <> &ПустойВидДеятельности
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСНСведенияОДоходах.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.ПериодВзаиморасчетов, МЕСЯЦ),
	|	ЕСНИсчисленный.ППС,
	|	ЕСНИсчисленный.ПроцентППС,
	|	ЕСНИсчисленный.ВидДеятельности,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	ЕСНИсчисленный.ФизЛицо.СтраховойНомерПФР
	//vvv
	|	УПОРЯДОЧИТЬ ПО 
	|		ФизЛицо,
	|		Месяц";
	
	Запрос.Текст = ДоходыПоВидамЗаГод;
	
	ПредыдущийСотрудник = Справочники.ФизическиеЛица.ПустаяСсылка();
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка из Таблица Цикл
		Если ПредыдущийСотрудник <> Строка.ФизЛицо тогда
			СтрокаРаботники = РаботникиОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРаботники,Строка);
		КонецЕсли;
		ПредыдущийСотрудник = Строка.ФизЛицо;
		СтрокаНачислений = СведенияОВзносах.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачислений,Строка);
	КонецЦикла;


 
КонецФункции

#Если Клиент Тогда

// Формирует файл, который можно будет записать на дискетку
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Строка - содержимое файла
//
//vvv
//Функция СформироватьВыходнойФайл(Отказ) Экспорт
Функция СформироватьВыходнойФайл(Отказ,ЗаписыватьПачку=Истина) Экспорт

	мДлиннаСуток = 86400;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

    ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	Если ВыборкаПоШапкеДокумента.Следующий()=0 тогда
		Отказ = Истина;
		Возврат "";
	КонецЕсли;	

    ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	Если Отказ тогда
		Возврат "";
	КонецЕсли;	 

	Результат					=	СформироватьЗапросПоРаботникиОрганизации();
	ВыборкаПоРаботникиОрганизации			=	Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
    ТаблицаНачислений = ПолучитьТаблицуНачислений();
	ТаблицаСтажа = ПолучитьТаблицуСтажа();

	СписокОбработанныхАнкет = Новый СписокЗначений;
	МассивСтрок = Новый Массив;
	ТекстФайла	=	"";
	НомерДокументаВПачке = 0;

	//Формируем заголовок выходного файла
	ДатаФормирования = ВыборкаПоШапкеДокумента.Дата;
	ДеньШапки        = ?(День(ДатаФормирования)<10,"0","")+День(ДатаФормирования);
	МесяцШапки       = ?(Месяц(ДатаФормирования)<10,"0","")+Месяц(ДатаФормирования);
	ГодШапки 		 = Строка(СокрЛП(Формат(Год(ДатаФормирования), "ЧГ=0")));
	ДатаЗаполнения   = ДеньШапки+"/"+МесяцШапки+"/"+ГодШапки;
	//vvv комментируем
	//НомерПачки 				= ПроцедурыПерсонифицированогоУчета.НомерПачкиДокумента(ВыборкаПоШапкеДокумента.Номер);
	КоличествоДокументов 	= ВыборкаПоРаботникиОрганизации.Количество();
	ГодЗаполнения =  Формат(ГОД(ВыборкаПоШапкеДокумента.ПериодРегистрации),"ЧГ=0");
	Квартал = Месяц(КонецКвартала(ДатаРегистрации))/3;
	//vvv
	Телефон=СокрЛП(ВыборкаПоШапкеДокумента.Телефон);
	//
	

	Если Отказ тогда
		Возврат "";
	КонецЕсли;	 
	

	ТекстФайла = Новый ТекстовыйДокумент;
	текстФайла.ДобавитьСтроку("ЗГЛВ=1.5=");
	ВтораяСтрока = Врег("<ПАЧК="+?(СокрЛП(ВыборкаПоШапкеДокумента.Организация.ИНН)= "", " ",СокрЛП(ВыборкаПоШапкеДокумента.Организация.ИНН)) +"="+?(СокрЛП(ВыборкаПоШапкеДокумента.Организация.РегистрационныйНомерПФР)= ""," ",СокрЛП(ВыборкаПоШапкеДокумента.Организация.РегистрационныйНомерПФР))+
				"="+?(СокрЛП(ВыборкаПоШапкедокумента.организация.НаименованиеПолное) = ""," ",СокрЛП(ВыборкаПоШапкедокумента.организация.НаименованиеПолное)));
	ТекстФайла.ДобавитьСтроку(ВтораяСтрока);
				
	//ТекстФайла.ДобавитьСтроку("ТИПД=ПУ-6=1= = = =>");
	 
	ТипЗаписи    = "<ПУ-6=И="+?(СокрЛП(ВыборкаПоШапкеДокумента.Организация.РегистрационныйНомерПФР) = ""," ",СокрЛП(ВыборкаПоШапкеДокумента.Организация.РегистрационныйНомерПФР)) +"=";
	
	
	ТекСтрока = 2;
	ИтогоВыплаты = 0;
	ИтогоВзносы   = 0;
	
	РаботВыплаты = 0;
	РаботВзносы = 0;
		
	СтрокаЗамены = 2;
	Пока ВыборкаПоРаботникиОрганизации.Следующий()	Цикл
		
		СтрокиНачислений = ТаблицаНачислений.НайтиСтроки(Новый Структура("ФизЛицо",ВыборкаПоРаботникиОрганизации.ФизЛицо)); 
		//Контроль дубля строк
		ТипЗаписиНач = "НЧСЛ=";
	   

		Фамилия = ВРег(?(ВыборкаПоРаботникиОрганизации.Фамилия = "", " ", СокрЛП(ВыборкаПоРаботникиОрганизации.Фамилия)));
		Имя = Лев(Врег(?(ВыборкаПоРаботникиОрганизации.Имя = "", " ", СокрЛП(ВыборкаПоРаботникиОрганизации.Имя))),1);
		Отчество = Лев(Врег(?(ВыборкаПоРаботникиОрганизации.Отчество = "", " ", СокрЛП(ВыборкаПоРаботникиОрганизации.Отчество))),1);
		ТарифВзносов = Формат(ВыборкаПоРаботникиОрганизации.ТарифВзносов,"ЧЦ=2; ЧДЦ=1;ЧРД=.");
		//vvv
		ТарифВзносов = Формат(ВыборкаПоРаботникиОрганизации.ТарифВзносов,"ЧЦ=2; ЧДЦ=1;ЧРД=,");
		//
	    СтрокаФайла = ТипЗаписи;
		СтрокаФайла = СтрокаФайла+СокрЛП(ВыборкаПоРаботникиОрганизации.ЛичныйНомер)+"="+Фамилия+"="+Имя+"="+Отчество+"="+ТарифВзносов+"= =";
		
		РаботВыплаты = 0;
		РаботВзносы = 0;
		НомерДокументаВПачке = 	НомерДокументаВПачке + 1;
		
		НомерДокументаВПачке = НомерДокументаВПачке;
		ТекстФайла.ДобавитьСтроку(СтрокаФайла);
		ТекСтрока = ТекСтрока+1;
		СтрокаЗамены = ТекСтрока;
		МассивСтрок.Очистить();
		Месяц = 0;
		Пока Месяц <= 11 Цикл
			МассивСтрок.Добавить(" ");
			Месяц = Месяц+1;
		КонецЦикла;
		КоличествоМес = 0;
		Для каждого СтрокаМес из СтрокиНачислений цикл
			СтрВыплаты = ?(СтрокаМес.Выплаты = 0, " ", СокрЛП(Строка(Формат(СтрокаМес.Выплаты,"ЧГ=0"))));
			СтрВзносы = ?(СтрокаМес.Взносы = 0, " ", СокрЛП(Строка(Формат(СтрокаМес.Взносы,"ЧГ=0"))));
			//vvv
			СтрВыплаты = ?(СтрокаМес.Выплаты = 0, " ", СокрЛП(Строка(Формат(СтрокаМес.Выплаты,"ЧДЦ=2; ЧГ=0"))));
			СтрВзносы = ?(СтрокаМес.Взносы = 0, " ", СокрЛП(Строка(Формат(СтрокаМес.Взносы,"ЧДЦ=2; ЧГ=0"))));
			//
		
			СтрокаЗар = ВРЕГ(ТипЗаписиНач+Формат(Месяц(СтрокаМес.Месяц),"ЧГ=0")+"="+СтрВыплаты+"="+СтрВзносы+"= =");
			ТекстФайла.ДобавитьСтроку(СтрокаЗар);
			ТекСтрока = ТекСтрока+1;
			//МассивСтрок[Месяц(СтрокаМес.Месяц)-1] = СтрокаЗар;
			
			ИтогоВыплаты = ИтогоВыплаты + СтрокаМес.Выплаты;
			ИтогоВзносы = ИтогоВзносы + СтрокаМес.Взносы;
								
			РаботВыплаты = РаботВыплаты + СтрокаМес.Выплаты;
			РаботВзносы = РаботВзносы + СтрокаМес.Взносы;
			КоличествоМес = КоличествоМес+1;
		КонецЦикла;
		//Месяц = 0;
		//Пока Месяц <= 11 Цикл
		//	
		//	Если ЗначениеЗаполнено(МассивСтрок[Месяц]) тогда
		//		СтрокаЗар = МассивСтрок[Месяц];
		//	Иначе
		//		СтрокаЗар = ВРЕГ(ТипЗаписиНач+Формат(Месяц+1,"ЧГ=0")+"=0=0= =");
		//	КонецЕсли;
		//	ТекстФайла.ДобавитьСтроку(СтрокаЗар);
		//	ТекСтрока = ТекСтрока+1;
		//	Месяц = Месяц+1;
		//КонецЦикла;
							
		ТипЗаписиНач = "СТАЖ=";
		СтрокиПоРаботнику = ТаблицаСтажа.НайтиСтроки(Новый Структура("ФизЛицо",ВыборкаПоРаботникиОрганизации.ФизЛицо)); 
		КоличествоЗаписейОСтаже = 0;
		Для каждого СтрокаСтаж из СтрокиПоРаботнику цикл
			
			ДатаФормирования = СтрокаСтаж.ДатаНачалаРабот;
			ДеньШапки        = ?(День(ДатаФормирования)<10,"0","")+День(ДатаФормирования);
			МесяцШапки       = ?(Месяц(ДатаФормирования)<10,"0","")+Месяц(ДатаФормирования);
			ГодШапки 		 = Строка(СокрЛП(Формат(Год(ДатаФормирования), "ЧГ=0")));
			ДатаНачалаРабот   = ДеньШапки+"/"+МесяцШапки+"/"+ГодШапки;
								
			ДатаФормирования = СтрокаСтаж.ДатаОкончанияРабот;
			ДеньШапки        = ?(День(ДатаФормирования)<10,"0","")+День(ДатаФормирования);
			МесяцШапки       = ?(Месяц(ДатаФормирования)<10,"0","")+Месяц(ДатаФормирования);
			ГодШапки 		 = Строка(СокрЛП(Формат(Год(ДатаФормирования), "ЧГ=0")));
			ДатаОкончанияРабот   = ДеньШапки+"/"+МесяцШапки+"/"+ГодШапки;
			//vvv
			ПодКодПрофессии="000";
			ОсобыйПоказатель=СокрЛП(СтрокаСтаж.ОсобыеПоказатели);
			ПодКод=СокрЛП(СтрокаСтаж.ПодКодПрофессии);
			КодПрофессии=СокрЛП(СтрокаСтаж.КодПоОКПДТР);
			Если КодПрофессии<>"" ТОгда
				ПервоеВхождение=Найти(КодПрофессии,".");
				Если ПервоеВхождение>0 Тогда
					ПодКод=Сред(КодПрофессии,ПервоеВхождение+1);
					Проф=Лев(КодПрофессии,ПервоеВхождение-1);
					Пока СтрДлина(ПодКод)<>3 Цикл
						ПодКод="0"+ПодКод;
					КонецЦикла;
					ПодКодПрофессии=СокрЛП(ПодКод);
					КодПрофессии=СокрЛП(Проф);
				Иначе
					Если ПодКод<>"" ТОгда
						Пока СтрДлина(ПодКод)<>3 Цикл
							ПодКод="0"+ПодКод;
						КонецЦикла;
						ПодКодПрофессии=СокрЛП(ПодКод);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ДляЦелейППС=СтрокаСтаж.ДляЦелейППС; //должность для целей ППС
			Если (ПодКодПрофессии="000") и ДляЦелейППС ТОгда //не понятно почему так
				ПодКодПрофессии=" ";
			КонецЕсли;
			//
			
			//vvv
			//СтрокаЗар = ВРЕГ(ТипЗаписиНач+ДатаНачалаРабот+"="+ДатаОкончанияРабот+"="+?(СокрЛП(СтрокаСтаж.КодПоОКПДТР)= ""," ",СокрЛП(СтрокаСтаж.КодПоОКПДТР))+"= = = = =1="+СокрЛП(СтрокаСтаж.ВидДеятельности)+"= = = = =");
			СтрокаЗар = ВРЕГ(ТипЗаписиНач+ДатаНачалаРабот+"="+ДатаОкончанияРабот+"="+?(СокрЛП(СтрокаСтаж.КодПоОКПДТР)= ""," ",СокрЛП(СтрокаСтаж.КодПоОКПДТР))+"="+ПодКодПрофессии+"= = = ="+?(ДляЦелейППС,"2","1")+"="+СокрЛП(СтрокаСтаж.ВидДеятельности)+"="+?(ОсобыйПоказатель<>"",ОсобыйПоказатель," ")+"= = = =");
			//
			ТекстФайла.ДобавитьСтроку(СтрокаЗар);
			ТекСтрока = ТекСтрока+1;
			КоличествоЗаписейОСтаже = КоличествоЗаписейОСтаже+1;
			
		КонецЦикла;
				
				
		СтрокаЗар = СтрокаЗар + ">";
		ТекстФайла.ЗаменитьСтроку(ТекСтрока, СтрокаЗар);
		
		//vvv комментриуем
		//СтрокаФайла = ВРЕГ(СтрокаФайла+ ?(РаботВыплаты = 0, " ", СокрЛП(Строка(Формат(РаботВыплаты,"ЧГ=0"))))+"="+
		//			?(РаботВзносы = 0, " ", СокрЛП(Строка(Формат(РаботВзносы,"ЧГ=0"))))+"="+ ?(РаботВзносы = 0, " ", СокрЛП(Строка(Формат(РаботВзносы,"ЧГ=0"))))+"="+
		//			//vvv
		//			//Формат(КоличествоМес,"ЧГ=0")+"="+?(КоличествоЗаписейОСтаже=0," ",СокрЛП(Строка(Формат(КоличествоЗаписейОСтаже,"ЧГ=0"))))+"="+ДатаЗаполнения+"="+Квартал+"="+ГодЗаполнения+"= =");
		//			Формат(КоличествоМес,"ЧГ=0")+"="+?(КоличествоЗаписейОСтаже=0," ",СокрЛП(Строка(Формат(КоличествоЗаписейОСтаже,"ЧГ=0"))))+"="+ДатаЗаполнения+"="+Квартал+"="+ГодЗаполнения+"="+Телефон+"=");
		//			//
		//vvv			
		СтрокаФайла = ВРЕГ(СтрокаФайла+ ?(РаботВыплаты = 0, " ", СокрЛП(Строка(Формат(РаботВыплаты,"ЧДЦ=2;ЧГ=0"))))+"="+
					?(РаботВзносы = 0, " ", СокрЛП(Строка(Формат(РаботВзносы,"ЧДЦ=2;ЧГ=0"))))+"="+ ?(РаботВзносы = 0, " ", СокрЛП(Строка(Формат(РаботВзносы,"ЧДЦ=2;ЧГ=0"))))+"="+
					Формат(КоличествоМес,"ЧГ=0")+"="+?(КоличествоЗаписейОСтаже=0," ",СокрЛП(Строка(Формат(КоличествоЗаписейОСтаже,"ЧГ=0"))))+"="+ДатаЗаполнения+"="+Квартал+"="+ГодЗаполнения+"="+Телефон+"=");
		//			
		ТекстФайла.ЗаменитьСтроку(СтрокаЗамены, СтрокаФайла);
	КонецЦикла; 

	СтрокаФайла = ВтораяСтрока+"="+НомерПачки+"=И="+Квартал+"="+ГодЗаполнения+"="+ ?(ИтогоВыплаты = 0, " ", СокрЛП(Строка(Формат(ИтогоВыплаты,"ЧГ=0"))))+"="+
				?(ИтогоВзносы = 0, " ", СокрЛП(Строка(Формат(ИтогоВзносы,"ЧГ=0"))))+"="+?(ИтогоВзносы = 0, " ", СокрЛП(Строка(Формат(ИтогоВзносы,"ЧГ=0"))))+"="+СокрЛП(Строка(КоличествоДокументов))+"=>";
	//vvv
	СтрокаФайла = ВтораяСтрока+"="+НомерПачки+"="+Лев(ТипФормы,1)+"="+Квартал+"="+ГодЗаполнения+"="+ ?(ИтогоВыплаты = 0, " ", СокрЛП(Строка(Формат(ИтогоВыплаты,"ЧДЦ=2; ЧГ=0"))))+"="+
				?(ИтогоВзносы = 0, " ", СокрЛП(Строка(Формат(ИтогоВзносы,"ЧДЦ=2; ЧГ=0"))))+"="+?(ИтогоВзносы = 0, " ", СокрЛП(Строка(Формат(ИтогоВзносы,"ЧДЦ=2; ЧГ=0"))))+"="+СокрЛП(Строка(КоличествоДокументов))+"=>";
	//
	ТекстФайла.ЗаменитьСтроку(2, СтрокаФайла);
	//vvv
	Если ЗаписыватьПачку Тогда
		ТекстФайла.Записать(КаталогВыгрузки+"\pp6"+СокрЛП(ВыборкаПоШапкеДокумента.Организация.РегистрационныйНомерПФР)+СокрЛП(НомерПачки)+".txt",КодировкаТекста.ANSI);
	КонецЕсли;
	//
	Возврат ТекстФайла.ПолучитьТекст();
КонецФункции 

Функция ПолучитьТаблицуСтажа() Экспорт
	Запрос = Новый Запрос;
     
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОППССведенияОСтаже.ДатаНачалаРабот,
	|	СведенияОППССведенияОСтаже.ДатаОкончанияРабот,
	|	СведенияОППССведенияОСтаже.ВидДеятельности,
	//vvv
	|	СведенияОППССведенияОСтаже.Должность,
	|	СведенияОППССведенияОСтаже.ОсобыеПоказатели,
	|	СведенияОППССведенияОСтаже.Должность.ПодКодПрофессии КАК ПодКодПрофессии,
	|	СведенияОППССведенияОСтаже.Должность.ДляЦелейППС КАК ДляЦелейППС,
	//
	|	СведенияОППССведенияОСтаже.КодПоОКПДТР,
	|	СведенияОППССведенияОСтаже.ФизЛицо
	|ИЗ
	|	Документ.СведенияОППС.СведенияОСтаже КАК СведенияОППССведенияОСтаже
	|ГДЕ
	|	СведенияОППССведенияОСтаже.Ссылка = &ДокументСсылка";
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьТаблицуНачислений() Экспорт
	
	Запрос = Новый Запрос;
     
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОППССведенияОВзносах.Месяц,
	|	СведенияОППССведенияОВзносах.Выплаты,
	|	СведенияОППССведенияОВзносах.Взносы,
	|	СведенияОППССведенияОВзносах.ТарифВзносов,
	|	СведенияОППССведенияОВзносах.ВидДеятельности.Код,
	|	СведенияОППССведенияОВзносах.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	Документ.СведенияОППС.СведенияОВзносах КАК СведенияОППССведенияОВзносах
	|ГДЕ
	|	СведенияОППССведенияОВзносах.Ссылка = &ДокументСсылка";
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

 //vvv
Процедура ВыборФайлаДляВыгрузки(Элемент) Экспорт
	
	ДиалогФыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогФыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

//Процедура вывода файла сведений на печать
Процедура ПечатьФайла(РежимПечати = 0, МестоВызова = "") Экспорт

	ЕстьОшибки = Ложь;
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ЭтотОбъект,ЕстьОшибки);
	Если ЕстьОшибки тогда
		Возврат;
	КонецЕсли;	 

	Макет = ПолучитьМакет("ФормаАДВ_1");
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АнкетаЗастрахованногоЛица_ФормаАДВ_1";

	//Получаем таблицу формата записи
	ДокументФорматЗаписей = ПолучитьМакет("ФорматЗаписей");
	ТаблицаФорматаЗаписи = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи("АНКТ",ДокументФорматЗаписей);

	//Получаем инициализированную структуру, соответствующую формату записи 
	//ПустаяЗапись = ПолучитьСтруктуруЗаписи(ТаблицаФорматаЗаписи);
	
	//Обработка заголовка файла
	ИнформацияОПачке = Новый Структура;
	Если ПроцедурыПерсонифицированогоУчета.РазобратьЗаголовокФайла(ТекстФайла,ИнформацияОПачке)=0 тогда
		Возврат;
	КонецЕсли;	
	
	//Обработка документов файла
	ОбластьАнкета = Макет.ПолучитьОбласть("Анкета");
    
	Для Н=5 по СтрЧислоСтрок(ТекстФайла) цикл
		//Прочитаем запись из файла
		СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
		Запись = ПроцедурыПерсонифицированогоУчета.ПолучитьСтруктуруЗаписи(ТаблицаФорматаЗаписи);
		СтрОшибка = "";
		Если НЕ ПроцедурыПерсонифицированогоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла,"АНКТ",ТаблицаФорматаЗаписи,Запись,СтрОшибка) тогда
			Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
			Возврат;
		КонецЕсли;	

		ОбластьАнкета.Параметры.ДатаЗаполнения					= 	"Дата заполнения "+ПроцедурыПерсонифицированогоУчета.ДатаВОтчет(Запись.ДатаЗаполнения);
		ОбластьАнкета.Параметры.Фамилия 						= Запись.Фамилия; 
		ОбластьАнкета.Параметры.Имя 							= Запись.Имя; 
		ОбластьАнкета.Параметры.Отчество 						= Запись.Отчество; 
		ОбластьАнкета.Параметры.Пол 							= Запись.Пол+"     (м/ж)"; 
		ОбластьАнкета.Параметры.ДатаРождения 					= ПроцедурыПерсонифицированогоУчета.ДатаВОтчет(Запись.СтандартнаяДатаРождения); 

		//Место рождения
		ОбластьАнкета.Параметры.МестоРожденияТип 				= 	?(Запись.ТипМестаРождения = "ОСОБОЕ", "особое", "");
		ОбластьАнкета.Параметры.МестоРожденияГород 				= 	Запись.МестоРожденияНаселенныйПункт;
		ОбластьАнкета.Параметры.МестоРожденияРайон 				= 	Запись.МестоРожденияРайон;
		ОбластьАнкета.Параметры.МестоРожденияОбласть			= 	Запись.МестоРожденияОбласть;
		ОбластьАнкета.Параметры.МестоРожденияСтрана			 	= 	Запись.МестоРожденияСтрана;

		ОбластьАнкета.Параметры.Гражданство 					= 	Запись.Гражданство;

		//Паспортные данные
		НаименованиеДокумента 									= 	Запись.ДокументНаименование;
		Серия1 													= 	Запись.ДокументСерияРимскиеЦифры;
		Серия2 													= 	Запись.ДокументСерияРусскиеБуквы;
		
		СерияНомер = Серия1 +?( СокрЛП(НаименованиеДокумента) 	= ВРЕГ("паспорт РБ"), " ", ?( СокрЛП(НаименованиеДокумента) = ВРЕГ("паспорт"), "-", "") ) + Серия2 +",  " + Формат(Запись.ДокументНомер,"ЧГ=0");

		ОбластьАнкета.Параметры.НаименованиеДокумента		= 	НаименованиеДокумента;
		ОбластьАнкета.Параметры.СерияНомер			 		= 	СерияНомер;
		ОбластьАнкета.Параметры.ДатаВыдачи 					= 	ПроцедурыПерсонифицированогоУчета.ДатаВОтчет(Запись.ДокументДатаВыдачи);
		ОбластьАнкета.Параметры.КемВыдан 					= 	Запись.ДокументКемВыдан;
		
		//Адреса
		ОбластьАнкета.Параметры.АдресРегистрации 			=	ПроцедурыПерсонифицированогоУчета.ПредставлениеАдресадляПФР(Запись.АдресРегистрации,0,"");
		ОбластьАнкета.Параметры.АдресФактический 			= 	ПроцедурыПерсонифицированогоУчета.ПредставлениеАдресадляПФР(Запись.АдресФактический,0,"");
		ОбластьАнкета.Параметры.Телефоны 					= 	Запись.Телефоны;
		
		ДокументРезультат.Вывести(ОбластьАнкета);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла;	
	
	РаботаСДиалогами.НапечататьДокумент(ДокументРезультат,1,Ложь,"Анкета застрахованного лица АДВ-1");

    //Печать описи документов
	ДокументОписи = Новый ТабличныйДокумент;
	ДокументОписи.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АнкетаЗастрахованногоЛица_АДВ_6";
	ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация,Дата,Ответственный.ФизЛицо);
	ПроцедурыПерсонифицированогоУчета.ВывестиОписьАДВ6(ДокументОписи,ИнформацияОПачке,ОтветственныеЛица);
	РаботаСДиалогами.НапечататьДокумент(ДокументОписи,1,Ложь,"Опись документов АДВ-6");
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	|	Номер, 
	|	Организация,
	//vvv
	|	КонтактнаяИнформация.Представление КАК Телефон,
	|	НомерПачки,
	|	ТипФормы,
	|	КаталогВыгрузки,
	//
	|	ДатаРегистрации КАК ПериодРегистрации,
	|	Ответственный,
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	//vvv
	| ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|	ПО (Организация=КонтактнаяИнформация.Объект)
	|	И (КонтактнаяИнформация.Тип=ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|	И (КонтактнаяИнформация.Вид=ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации))
	//
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Выбирает данные, необходимые для заполнения утвержденных форм как из спр-ка
//  физлиц, так и из соотв. регистров сведений
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса к данным работников документа.
//
Функция	СформироватьЗапросПоРаботникиОрганизации()
	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОППСРаботникиОрганизации.Фамилия,
	|	СведенияОППСРаботникиОрганизации.Имя,
	|	СведенияОППСРаботникиОрганизации.Отчество,
	|	СведенияОППСРаботникиОрганизации.ЛичныйНомер,
	|	СведенияОППСРаботникиОрганизации.ФизЛицо,
	|	СведенияОППСРаботникиОрганизации.ТарифВзносов
	|ИЗ
	|	Документ.СведенияОППС.РаботникиОрганизации КАК СведенияОППСРаботникиОрганизации
	|ГДЕ
	|	СведенияОППСРаботникиОрганизации.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, которая подает сведения!", Отказ, Заголовок);
	КонецЕсли;
	//vvv
	Если СокрЛП(ВыборкаПоШапкеДокумента.Телефон)="" Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан телефон организации, которая подает сведения!", Отказ, Заголовок);
	КонецЕсли;
	//vvv
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НомерПачки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан номер пачки!", Отказ, Заголовок);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ТипФормы) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан тип пачки!", Отказ, Заголовок);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КаталогВыгрузки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан каталог выгрузки!", Отказ, Заголовок);
	КонецЕсли;
	//
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Ответственный) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указано ответственное лицо!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Фамилия, Имя, Отказ ,Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке № """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Работники организации"": ";
	// ФизЛицо
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не выбран работник!", Отказ ,Заголовок);
	Иначе	
		СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + ВыборкаПоСтрокамДокумента.ФизЛицо + " ";

		Если ЗначениеЗаполнено(СтрЗаменить(ВыборкаПоСтрокамДокумента.СтраховойНомерПФР,"-","")) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Уже имеет страховой номер!", Отказ ,Заголовок);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Фамилия) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана фамилия!", Отказ ,Заголовок);
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(Имя) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задано имя!", Отказ ,Заголовок);
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Пол) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан пол!", Отказ ,Заголовок);
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаРождения) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана дата рождения!", Отказ ,Заголовок);
		Иначе
			Если ВыборкаПоСтрокамДокумента.ДатаРождения > Дата тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Дата рождения не может быть больше даты подачи сведений!", Отказ ,Заголовок);
			КонецЕсли;	 
		КонецЕсли;	
		
		Если СокрЛП(СтрЗаменить(ВыборкаПоСтрокамДокумента.МестоРождения,",","")) = "" 
			или СокрЛП(СтрЗаменить(ВыборкаПоСтрокамДокумента.МестоРождения,",","")) = "0" Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не указано место рождения!", Отказ ,Заголовок);
		КонецЕсли; 

		//Паспортные данные
        Если ВыборкаПоСтрокамДокумента.ДокументВид = NULL Тогда

			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не указаны паспортные данные!", Отказ ,Заголовок);

		Иначе

			//Проверка реквизитов паспортных данных
			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументВид) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан вид документа, удостоверяющего личность!", Отказ ,Заголовок);
			КонецЕсли;	

			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументДатаВыдачи) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана дата выдачи документа, удостоверяющего личность!", Отказ ,Заголовок);
			Иначе
				Если (ВыборкаПоСтрокамДокумента.ДатаРождения > ВыборкаПоСтрокамДокумента.ДокументДатаВыдачи) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Дата рождения не должна превышать дату выдачи документа, удостоверяющего личность!", Отказ ,Заголовок);
				КонецЕсли;
			КонецЕсли;	

			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументСерия) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана серия документа, удостоверяющего личность!", Отказ ,Заголовок);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументНомер) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан номер документа, удостоверяющего личность!", Отказ ,Заголовок);
			КонецЕсли;
		КонецЕсли; 

		// Проверка адреса регистрации и проживания
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.АдресРегистрации) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан адрес регистрации (юридический адрес)!", Отказ ,Заголовок);
		КонецЕсли;	
		Если НЕ РегламентированнаяОтчетность.АдресСоответствуетТребованиям(УправлениеКонтактнойИнформацией.РазложитьАдрес(ВыборкаПоСтрокамДокумента.АдресРегистрации)) тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- В адресе регистрации присутствуют латинские или недопустимые символы!", Отказ ,Заголовок);
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетность.АдресСоответствуетТребованиям(УправлениеКонтактнойИнформацией.РазложитьАдрес(ВыборкаПоСтрокамДокумента.АдресФактический)) тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- В фактическом адресе проживания присутствуют латинские или недопустимые символы!", Отказ ,Заголовок);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	//При проведении файл формируем заново 
	ТекстФайла = "";
#Если Клиент Тогда

	//vvv
	//ТекстФайла = СформироватьВыходнойФайл(Отказ);
	ТекстФайла = СформироватьВыходнойФайл(Отказ,Ложь);
	//
#КонецЕсли

	Если Отказ тогда
		Возврат;
	КонецЕсли;	 

	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения["АрхивДанныхРегламентированнойОтчетности"].Добавить();
	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Файл-пачка форм ПУ-3";
	Запись.Данные = ТекстФайла; 
КонецПроцедуры	

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации,,"ФизЛицо");
	
КонецПроцедуры





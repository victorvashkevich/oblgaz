////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда
 //vvv
Функция СформироватьДокумент()
	
		ТабДокумент = Новый ТабличныйДокумент;
		Макет = ПолучитьМакет("Макет");
	
		Запрос=Новый Запрос;
	
		ОсновнойЗаработок = Новый Массив(2);
		ОсновнойЗаработок[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск;

		ПоГодовымПремиям = Новый Массив(2);
		ПоГодовымПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
					
		Запрос.Текст=
		"ВЫБРАТЬ
		|	СотрудникСГрафиком.ВидРасчета КАК ВидРасчета,
		|	СотрудникСГрафиком.МесяцВыборки КАК Месяц,
		|	СотрудникСГрафиком.Результат КАК Заработок,
		|	СотрудникСГрафиком.КоэффициентИндексации КАК Индекс,
		|	ГодоваяПремия.Результат КАК Заработок13я,
		|	ВЫРАЗИТЬ(СотрудникСГрафиком.КоэффициентИндексации * СотрудникСГрафиком.Результат КАК ЧИСЛО(16, 2)) КАК ЗаработокИнд,
		|	ВЫРАЗИТЬ(СотрудникСГрафиком.КоэффициентИндексации * СотрудникСГрафиком.Результат + ЕСТЬNULL(ГодоваяПремия.Результат,0) КАК ЧИСЛО(16, 2)) КАК ЗаработокИ,
		|	СотрудникСГрафиком.ОтработаноЧасов КАК ОтрабЧасов,
		|	СотрудникСГрафиком.Сотрудник,
		|	СотрудникСГрафиком.НормаЧасов КАК НормаЧасов
		//|	ВЫБОР
		//|		КОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремениИнд.ОсновноеЗначение,0) = 0
		//|			ТОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение,0)
		//|		ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремениИнд.ОсновноеЗначение,0) 	
		//|	КОНЕЦ КАК НормаЧасов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОплатаПоСреднемуЗаработкуРасчетСреднего.Ссылка.ВидРасчета КАК ВидРасчета,
		|		ОплатаПоСреднемуЗаработкуРасчетСреднего.МесяцВыборки КАК МесяцВыборки,
		|		СУММА(ОплатаПоСреднемуЗаработкуРасчетСреднего.НормаЧасов) КАК НормаЧасов,
		|		СУММА(ОплатаПоСреднемуЗаработкуРасчетСреднего.Результат) КАК Результат,
		|		ОплатаПоСреднемуЗаработкуРасчетСреднего.КоэффициентИндексации КАК КоэффициентИндексации,
		|		СУММА(ОплатаПоСреднемуЗаработкуРасчетСреднего.ОтработаноЧасов) КАК ОтработаноЧасов,
		|		ОплатаПоСреднемуЗаработкуРасчетСреднего.Ссылка.Сотрудник КАК Сотрудник,
		|		РаботникиОрганизацийСрезПоследних.ГрафикРаботы КАК ГрафикРаботы
		|	ИЗ
		|		Документ.ОплатаПоСреднемуЗаработку.РасчетСреднего КАК ОплатаПоСреднемуЗаработкуРасчетСреднего
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, ) КАК РаботникиОрганизацийСрезПоследних
		|			ПО ОплатаПоСреднемуЗаработкуРасчетСреднего.Ссылка.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
		|	ГДЕ
		|		ОплатаПоСреднемуЗаработкуРасчетСреднего.Ссылка = &ДокументСсылка
		|		И ОплатаПоСреднемуЗаработкуРасчетСреднего.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОплатаПоСреднемуЗаработкуРасчетСреднего.Ссылка.ВидРасчета,
		|		ОплатаПоСреднемуЗаработкуРасчетСреднего.МесяцВыборки,		
		|		ОплатаПоСреднемуЗаработкуРасчетСреднего.КоэффициентИндексации,
		|		ОплатаПоСреднемуЗаработкуРасчетСреднего.Ссылка.Сотрудник,
		|		РаботникиОрганизацийСрезПоследних.ГрафикРаботы) КАК СотрудникСГрафиком
		//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		//|			ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
		//|			ГрафикиРаботыПоВидамВремени.Месяц КАК Месяц,
		//|			СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК ОсновноеЗначение
		//|		ИЗ
		//|			РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		//|		ГДЕ
		//|			ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		//|			И ГрафикиРаботыПоВидамВремени.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы
		//|		
		//|		СГРУППИРОВАТЬ ПО
		//|			ГрафикиРаботыПоВидамВремени.Месяц,
		//|			ГрафикиРаботыПоВидамВремени.ГрафикРаботы) КАК ГрафикиРаботыПоВидамВремени
		//|		ПО СотрудникСГрафиком.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		//|			И (ГрафикиРаботыПоВидамВремени.Месяц = СотрудникСГрафиком.МесяцВыборки)
		//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		//|			ГрафикиРаботыПоВидамВремени.ГрафикРаботы.ФизЛицо КАК ГрафикРаботы,
		//|			ГрафикиРаботыПоВидамВремени.Месяц КАК Месяц,
		//|			СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК ОсновноеЗначение
		//|		ИЗ
		//|			РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		//|		ГДЕ
		//|			ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		//|			И ГрафикиРаботыПоВидамВремени.ГрафикРаботы=&Сотрудник
		//|		
		//|		СГРУППИРОВАТЬ ПО
		//|			ГрафикиРаботыПоВидамВремени.Месяц,
		//|			ГрафикиРаботыПоВидамВремени.ГрафикРаботы.ФизЛицо) КАК ГрафикиРаботыПоВидамВремениИнд
		//|		ПО СотрудникСГрафиком.Сотрудник.ФизЛицо = ГрафикиРаботыПоВидамВремениИнд.ГрафикРаботы
		//|			И (ГрафикиРаботыПоВидамВремениИнд.Месяц = СотрудникСГрафиком.МесяцВыборки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СУММА(ВЫРАЗИТЬ(ОплатаПоСреднемуЗаработкуРасчетСреднего.Результат * ВЫБОР КОГДА ОплатаПоСреднемуЗаработкуРасчетСреднего.КоэффициентИндексации<=0 ТОГДА 1 ИНАЧЕ ОплатаПоСреднемуЗаработкуРасчетСреднего.КоэффициентИндексации КОНЕЦ КАК ЧИСЛО(16,2))) КАК Результат,
		|			ОплатаПоСреднемуЗаработкуРасчетСреднего.МесяцВыборки КАК МесяцВыборки
		|		ИЗ
		|			Документ.ОплатаПоСреднемуЗаработку.РасчетСреднего КАК ОплатаПоСреднемуЗаработкуРасчетСреднего
		|		ГДЕ
		|			ОплатаПоСреднемуЗаработкуРасчетСреднего.Ссылка = &ДокументСсылка
		|			И ОплатаПоСреднемуЗаработкуРасчетСреднего.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОплатаПоСреднемуЗаработкуРасчетСреднего.МесяцВыборки) КАК ГодоваяПремия
		|		ПО (ГодоваяПремия.МесяцВыборки = СотрудникСГрафиком.МесяцВыборки)
		|ИТОГИ
		|	СУММА(Заработок),
		|	СУММА(ЗаработокИнд),
		|	СУММА(Заработок13я),
		|	СУММА(ЗаработокИ),
		|	СУММА(ОтрабЧасов),
		|	СУММА(НормаЧасов)
		|ПО
		|	ВидРасчета";		
		
		
		ЗапросПоШапке=Новый Запрос;
		ЗапросПоШапке.Текст=
		"ВЫБРАТЬ
		|	ОплатаПоСреднемуЗаработку.Сотрудник,
		|	ОплатаПоСреднемуЗаработку.Номер КАК НомерДок,
		|	ОплатаПоСреднемуЗаработку.Дата КАК ДатаДок,
		|	ОплатаПоСреднемуЗаработку.ВидРасчета КАК ВидРасчета,
		|	ОплатаПоСреднемуЗаработку.ВидРасчета.Наименование КАК ВидРасчетаНаименование,
		|	ОплатаПоСреднемуЗаработку.ДатаНачала КАК Начало,
		|	ОплатаПоСреднемуЗаработку.ДатаОкончания КАК Окончание,
		|	ОплатаПоСреднемуЗаработку.Сотрудник.Код КАК Код,
		|	ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.Ставка КАК ТекущийОклад,
		|	ОплаченоЧасов.Часов КАК Часов
		|ИЗ
		|	Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднемуЗаработку
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации.СрезПоследних(&ДатаАктуальности, ) КАК ТарифныеСтавкиРаботниковОрганизацииСрезПоследних
		|		ПО ОплатаПоСреднемуЗаработку.Сотрудник = ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОплатаПоСреднемуЗаработкуНачисления.Ссылка.Сотрудник КАК Сотрудник,
		|			СУММА(ОплатаПоСреднемуЗаработкуНачисления.ОплаченоДнейЧасов) КАК Часов
		|		ИЗ
		|			Документ.ОплатаПоСреднемуЗаработку.Начисления КАК ОплатаПоСреднемуЗаработкуНачисления
		|		ГДЕ
		|			ОплатаПоСреднемуЗаработкуНачисления.Ссылка = &ДокументСсылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОплатаПоСреднемуЗаработкуНачисления.Ссылка.Сотрудник) КАК ОплаченоЧасов
		|		ПО (ОплаченоЧасов.Сотрудник = ОплатаПоСреднемуЗаработку.Сотрудник)
		|ГДЕ
		|	ОплатаПоСреднемуЗаработку.Ссылка = &ДокументСсылка";
		
		
		ЗапросПоНачислениям = Новый Запрос;
		
		ЗапросПоНачислениям.Текст=
		"ВЫБРАТЬ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.Результат КАК ПСумма,
		|	Начисления.Месяц КАК Месяц,
		|	Начисления.Часов КАК Часов,
		|	ЕСТЬNULL(НачисленияФМП.Результат, 0) КАК ПСумма13
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОплатаПоСреднемуЗаработкуНачисления.Ссылка.Сотрудник КАК Сотрудник,
		|		ОплатаПоСреднемуЗаработкуНачисления.ВидРасчета КАК ВидРасчета,
		|		СУММА(ОплатаПоСреднемуЗаработкуНачисления.Результат) КАК Результат,
		|		НАЧАЛОПЕРИОДА(ОплатаПоСреднемуЗаработкуНачисления.ДатаНачала, МЕСЯЦ) КАК Месяц,
		|		СУММА(ОплатаПоСреднемуЗаработкуНачисления.ОплаченоДнейЧасов) КАК Часов
		|	ИЗ
		|		Документ.ОплатаПоСреднемуЗаработку.Начисления КАК ОплатаПоСреднемуЗаработкуНачисления
		|	ГДЕ
		|		ОплатаПоСреднемуЗаработкуНачисления.Ссылка = &ДокументСсылка
		|		И ОплатаПоСреднемуЗаработкуНачисления.ВидРасчета = ОплатаПоСреднемуЗаработкуНачисления.Ссылка.ВидРасчета
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОплатаПоСреднемуЗаработкуНачисления.Ссылка.Сотрудник,
		|		ОплатаПоСреднемуЗаработкуНачисления.ВидРасчета,
		|		НАЧАЛОПЕРИОДА(ОплатаПоСреднемуЗаработкуНачисления.ДатаНачала, МЕСЯЦ)) КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОплатаПоСреднемуЗаработкуНачисления.ВидРасчета КАК ВидРасчета,
		|			СУММА(ОплатаПоСреднемуЗаработкуНачисления.Результат) КАК Результат,
		|			НАЧАЛОПЕРИОДА(ОплатаПоСреднемуЗаработкуНачисления.ДатаНачала, МЕСЯЦ) КАК Месяц,
		|			СУММА(ОплатаПоСреднемуЗаработкуНачисления.ОплаченоДнейЧасов) КАК Часов
		|		ИЗ
		|			Документ.ОплатаПоСреднемуЗаработку.Начисления КАК ОплатаПоСреднемуЗаработкуНачисления
		|		ГДЕ
		|			ОплатаПоСреднемуЗаработкуНачисления.Ссылка = &ДокументСсылка
		|			И ОплатаПоСреднемуЗаработкуНачисления.ВидРасчета = ОплатаПоСреднемуЗаработкуНачисления.Ссылка.ВидРасчета.ОтпускИзФМП
		|			И ОплатаПоСреднемуЗаработкуНачисления.Ссылка.ВидРасчета.ОтпускИзФМП<>ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОплатаПоСреднемуЗаработкуНачисления.ВидРасчета,
		|			НАЧАЛОПЕРИОДА(ОплатаПоСреднемуЗаработкуНачисления.ДатаНачала, МЕСЯЦ)) КАК НачисленияФМП
		|		ПО Начисления.Месяц = НачисленияФМП.Месяц
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Месяц
		|ИТОГИ
		|	СУММА(ПСумма),
		|	СУММА(Часов),
		|	СУММА(ПСумма13)
		|ПО
		|	Сотрудник";
		
		ЗапросПоШапке.УстановитьПараметр("ДокументСсылка",Ссылка);
		ЗапросПоШапке.УстановитьПараметр("ДатаАктуальности",ПолучитьДатуНачалаСобытия());
		ВыборкаПоШапке=ЗапросПоШапке.Выполнить().Выбрать();
		
		Запрос.УстановитьПараметр("ДокументСсылка",Ссылка);
		Запрос.УстановитьПараметр("ДатаАктуальности",ПолучитьДатуНачалаСобытия());
		Запрос.УстановитьПараметр("ПоГодовымПремиям",ПоГодовымПремиям);
		Запрос.УстановитьПараметр("ОсновнойЗаработок",ОсновнойЗаработок);
		Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
		
		ЗапросПоНачислениям.УстановитьПараметр("ДокументСсылка",Ссылка);		
		
		ВыборкаНачислений=ЗапросПоНачислениям.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ВыборкаИтогов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		
		ОбластьШапка=Макет.ПолучитьОбласть("Шапка");
		ОбластьШапкаР=Макет.ПолучитьОбласть("ШапкаР");
		ОбластьСтрока=Макет.ПолучитьОбласть("СтрЗП");
		ОбластьСреднечасовой=Макет.ПолучитьОбласть("СРЗ");
		ОбластьИтоги=Макет.ПолучитьОбласть("Итоги");
		ОбластьИтогиНачислений=Макет.ПолучитьОбласть("Итог");
		ОбластьНачислений=Макет.ПолучитьОбласть("СтрР");
		
		Если ВыборкаПоШапке.Следующий() ТОгда
			
			ОбластьШапка.Параметры.Заполнить(ВыборкаПоШапке);
			ОбластьШапка.Параметры.ДатаДок=Формат(ВыборкаПоШапке.ДатаДок,"ДЛФ=Д");
			ОбластьШапка.Параметры.Период=ВыборкаПоШапке.ВидРасчетаНаименование+": с "+Формат(ВыборкаПоШапке.Начало,"ДЛФ=Д")+" по "+Формат(ВыборкаПоШапке.Окончание,"ДЛФ=Д")+", длительность - "+ВыборкаПоШапке.Часов+" часов";
			ТабДокумент.Вывести(ОбластьШапка);
			
		КонецЕсли;
		
		Пока ВыборкаИтогов.Следующий() Цикл
			
			ОбластьИтоги.Параметры.Заполнить(ВыборкаИтогов);
			ОбластьСреднечасовой.Параметры.СРЗ=Окр(ВыборкаИтогов.ЗаработокИ/ВыборкаИтогов.ОтрабЧасов,4);
			ВыборкаСреднего=ВыборкаИтогов.Выбрать();
			
			Пока ВыборкаСреднего.Следующий() Цикл
				ОбластьСтрока.Параметры.Заполнить(ВыборкаСреднего);
				ОбластьСтрока.Параметры.Месяц=Формат(ВыборкаСреднего.Месяц,"ДФ='ММММ гггг ""г.""'");
				ТабДокумент.Вывести(ОбластьСтрока);
			КонецЦикла;			
			ТабДокумент.Вывести(ОбластьИтоги);
		КонецЦикла;
		
		ТабДокумент.Вывести(ОбластьСреднечасовой);
		
		ТабДокумент.Вывести(ОбластьШапкаР);
		//
		
		Если ВыборкаНачислений.Следующий() Тогда
			ОбластьИтогиНачислений.Параметры.Заполнить(ВыборкаНачислений);
			ОбластьИтогиНачислений.Параметры.СуммаПрописью=РаботаСДиалогами.СформироватьСуммуПрописью(ВыборкаНачислений.ПСумма+ВыборкаНачислений.ПСумма13, Константы.ВалютаРегламентированногоУчета.Получить());
			ВыборкаПоСтрокамНачислений=ВыборкаНачислений.Выбрать();
			Пока ВыборкаПоСтрокамНачислений.Следующий() Цикл
				ОбластьНачислений.Параметры.Заполнить(ВыборкаПоСтрокамНачислений);
				ОбластьНачислений.Параметры.Месяц=Формат(ВыборкаПоСтрокамНачислений.Месяц,"ДФ='ММММ гггг ""г.""'");
				ТабДокумент.Вывести(ОбластьНачислений);
			КонецЦикла;			
		ТабДокумент.Вывести(ОбластьИтогиНачислений);	
		КонецЕсли;
		
	ТабДокумент.АвтоМасштаб=Истина;
	ТабДокумент.ОриентацияСтраницы=ОриентацияСтраницы.Портрет;
	Возврат ТабДокумент;
	
КонецФункции
//
//vvv	
Функция ПечатьРасчетаСреднегоЗаработкаСНачислениями(ДокументСсылка, ДатаСобытия, ПродолжительностьРасчетногоПериода, ОписаниеОплачиваемогоПериода, СпособРасчета, Знач ИспользоватьСреднеЧасовойЗаработок = Неопределено, СписокСоставляющихСреднегоЗаработка = Неопределено, ВыводитьЗаголовок = Истина, ОтражатьДолюВремени = Истина, СтруктураПоказателей = Неопределено) Экспорт
	
	Попытка
		МетаданныеДокумента = ДокументСсылка.Метаданные();
		ИмяИсточникаДанных = МетаданныеДокумента.Имя;
	Исключение
		Возврат Новый ТабличныйДокумент
	КонецПопытки;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетСреднегоЗаработка";
	
	Макет = ПолучитьОбщийМакет("РасчетСреднегоЗаработка1");
	
	СекцияШапка = Макет.ПолучитьОбласть("Шапка");
	СекцияЗаголовокНачислений = Макет.ПолучитьОбласть("ЗаголовокНачислений");
	СекцияЗаголовокРабочегоМеста = Макет.ПолучитьОбласть("ЗаголовокРабочегоМеста");
	СекцияМесячныйЗаработок = Макет.ПолучитьОбласть("МесячныйЗаработок");
	СекцияСерединаОтчета = Макет.ПолучитьОбласть("СерединаОтчета");
	//СекцияДоляВремени = Макет.ПолучитьОбласть("ДоляВремени");
	СекцияЗаголовокПремий = Макет.ПолучитьОбласть("ЗаголовокПремий");
	СекцияПремии = Макет.ПолучитьОбласть("Премии");
	СекцияПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Запрос = Новый Запрос;
	
	Организация = ДокументСсылка.Организация;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			ДокументСсылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",		ДатаСобытия);
	Запрос.УстановитьПараметр("Сотрудник",				ДокументСсылка.Сотрудник);
	Запрос.УстановитьПараметр("Физлицо",				ДокументСсылка.Сотрудник.Физлицо);
	Запрос.УстановитьПараметр("ИспользоватьСреднеЧасовойЗаработок" , ИспользоватьСреднеЧасовойЗаработок);

	Если ИспользоватьСреднеЧасовойЗаработок = Неопределено Тогда
		Если МетаданныеДокумента.Реквизиты.Найти("СпособРегистрацииВремени") <> Неопределено Тогда
			ТекстПоляИспользоватьСреднеЧасовойЗаработок = "
			|	ВЫБОР
			|		КОГДА Документ.СпособРегистрацииВремени = ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены) 
			|			ИЛИ ВЫБОР
			|					КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
			|							И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|						ТОГДА ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени, ЛОЖЬ)
			|					ИНАЧЕ ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) 
			|				КОНЕЦ			
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ИспользоватьСреднеЧасовойЗаработок"
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням 
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке Тогда
			// Решение Верховного Суда РФ от 13.07.2006 № ГКПИ06-637
			ТекстПоляИспользоватьСреднеЧасовойЗаработок = "
			|	Ложь КАК ИспользоватьСреднеЧасовойЗаработок"  
		Иначе
			ТекстПоляИспользоватьСреднеЧасовойЗаработок = "
			|ВЫБОР
			|	КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
			|			И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени, ЛОЖЬ)
			|	ИНАЧЕ ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) 
			|КОНЕЦ КАК ИспользоватьСреднеЧасовойЗаработок"
		КонецЕсли;
	Иначе
		ТекстПоляИспользоватьСреднеЧасовойЗаработок ="
		|	&ИспользоватьСреднеЧасовойЗаработок КАК ИспользоватьСреднеЧасовойЗаработок"
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Представление,
	|	Документ.Ссылка,
	|	Документ.Сотрудник,
	|	Документ.Сотрудник.Физлицо КАК Физлицо,
	|	Документ.Организация,
	|	ВЫРАЗИТЬ(Документ.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НаименованиеОрганизации,
	|	ЕСТЬNULL(ФИОФизлица.Фамилия + "" "" + ФИОФизлица.Имя + "" "" + ФИОФизлица.Отчество, Документ.Сотрудник.Наименование) КАК ФИОРаботника,
	|	Документ.Сотрудник.Код КАК ТабельныйНомер,"
	+ ТекстПоляИспользоватьСреднеЧасовойЗаработок + "
	|ИЗ
	|	Документ." + ИмяИсточникаДанных + " КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаНачалаСобытия, ФизЛицо = &ФизЛицо) КАК ФИОФизлица
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Документ.Ссылка = &ДокументСсылка";

	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если ИспользоватьСреднеЧасовойЗаработок = Неопределено Тогда
			ИспользоватьСреднеЧасовойЗаработок = Выборка.ИспользоватьСреднеЧасовойЗаработок;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СекцияШапка.Параметры,Выборка);
	КонецЕсли;
	
	Если ВыводитьЗаголовок Тогда
		СекцияШапка.Параметры.Представление = РаботаСДиалогами.СформироватьЗаголовокДокумента(ДокументСсылка,МетаданныеДокумента.Синоним);
		СекцияШапка.Параметры.ОписаниеОплачиваемогоПериода = ОписаниеОплачиваемогоПериода;
		СекцияШапка.Параметры.ДатаНачалаРасчетногоПериода = Формат(ДобавитьМесяц(НачалоМесяца(ДатаСобытия), - ПродолжительностьРасчетногоПериода),"ДФ=dd.MM.yyyy");
		СекцияШапка.Параметры.ДатаОкончанияРасчетногоПериода = Формат(НачалоДня(НачалоМесяца(ДатаСобытия) - 1),"ДФ=dd.MM.yyyy");
		СекцияШапка.Параметры.СпособРасчета = ?(СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3Лет,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС,СпособРасчета);
	
		ТабДокумент.Вывести(СекцияШапка);
	КонецЕсли;
	
	Если СписокСоставляющихСреднегоЗаработка = Неопределено Тогда
		Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням 
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке 
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка
			Тогда
			СписокСоставляющихСреднегоЗаработка = Новый Массив(5); 
			СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
			СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск;
			СписокСоставляющихСреднегоЗаработка[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
			СписокСоставляющихСреднегоЗаработка[3] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
			СписокСоставляющихСреднегоЗаработка[4] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Тогда
			СписокСоставляющихСреднегоЗаработка = Новый Массив(4); 
			СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
			СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
			СписокСоставляющихСреднегоЗаработка[2] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
			СписокСоставляющихСреднегоЗаработка[3] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
		КонецЕсли;
	КонецЕсли;
	
	ОсновнойЗаработок = Новый Массив(3);
	ОсновнойЗаработок[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
	ОсновнойЗаработок[1] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
	ОсновнойЗаработок[2] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск;
	
	//ФиксированныеПремии = Новый Массив(6);
	//ФиксированныеПремии[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
	//
	//ПоФиксПремиям = Новый Массив(3);
	//ПоФиксПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
	//
	
	ПоПремиям = Новый Массив(3);
	ПоПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
	ПоПремиям[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
    ПоПремиям[2] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;

	//	
	//ПоФиксПремиямНеИндексируемые = Новый Массив(4);
	//ПоФиксПремиямНеИндексируемые[0] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
		
	Индексируемые = Новый Массив(7);
	Индексируемые[3] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
	Индексируемые[4] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
	Индексируемые[5] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск;
	Индексируемые[6] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.УстановитьПараметр("СпособРасчета", СпособРасчета);
	Запрос.УстановитьПараметр("ИспользоватьСреднеЧасовойЗаработок", ИспользоватьСреднеЧасовойЗаработок);
	Запрос.УстановитьПараметр("СписокСоставляющихСреднегоЗаработка", СписокСоставляющихСреднегоЗаработка);
	Запрос.УстановитьПараметр("Индексируемые",						Индексируемые);
	Запрос.УстановитьПараметр("ОсновнойЗаработок",					ОсновнойЗаработок);
	Запрос.УстановитьПараметр("ОсновнойЗаработокНеиндексируемый",	ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
	//Запрос.УстановитьПараметр("ПоФиксПремиям",						ПоФиксПремиям);
	Запрос.УстановитьПараметр("ПоПремиям",							ПоПремиям);
	//Запрос.УстановитьПараметр("ВсеФиксированныеПремии",				ФиксированныеПремии);
	//Запрос.УстановитьПараметр("ПоФиксПремиямНеИндексируемые",		ПоФиксПремиямНеИндексируемые);
	Запрос.УстановитьПараметр("РасчетныйПериодНачало",				ДобавитьМесяц(НачалоМесяца(ДатаСобытия), - ПродолжительностьРасчетногоПериода));
	Запрос.УстановитьПараметр("РасчетныйПериодОкончание",			НачалоДня(НачалоМесяца(ДатаСобытия) - 1));
	
	// по окончательным данным проведенного документа
	// собираем итоговые данные и рассчитываем средний заработок
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА 1
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ПорядокЗаписей,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|					КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|						ТОГДА 1
	|					ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|				КОНЕЦ
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|			ТОГДА РасчетСреднегоЗаработка.Результат
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоЗаработка,
	|	ВЫБОР
	|		КОГДА (РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|				ИЛИ РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый))
	|				И РасчетСреднегоЗаработка.Сотрудник = &Сотрудник
	|			ТОГДА ВЫБОР
	|					КОГДА &ИспользоватьСреднеЧасовойЗаработок
	|						ТОГДА РасчетСреднегоЗаработка.ОтработаноЧасов
	|					ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноДней
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоДнейРасчетногоПериода,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА 0
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|			ТОГДА 0
	|		КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоПремиям)
	|					ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|							КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|								ТОГДА 1
	|							ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|						КОНЕЦ
	|				ИНАЧЕ РасчетСреднегоЗаработка.Результат
	|			КОНЕЦ
	|	КОНЕЦ КАК ВсегоУчтеноПремий,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА 0
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|			ТОГДА 0
	|		КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоПремиям)
	|					ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|							КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|								ТОГДА 1
	|							ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|						КОНЕЦ
	|				ИНАЧЕ РасчетСреднегоЗаработка.Результат
	|			КОНЕЦ / РасчетСреднегоЗаработка.ЧислоМесяцев
	|	КОНЕЦ КАК МесячнаяЧастьПремий,
	|	НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.МесяцВыборки, МЕСЯЦ) КАК МесяцРасчетногоПериода,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|			ТОГДА 1
	|		ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|	КОНЕЦ КАК КоэффициентИндексации,
	|	РасчетСреднегоЗаработка.Результат,
	|	РасчетСреднегоЗаработка.ЧислоМесяцев КАК МесяцевПремии,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.Наименование
	|	КОНЕЦ + ""; "" + ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность.Наименование
	|	КОНЕЦ КАК РабочееМесто,
	|	РасчетСреднегоЗаработка.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РасчетСреднегоЗаработка.Сотрудник.ВидЗанятости, РасчетСреднегоЗаработка.Регистратор.Сотрудник.ВидЗанятости) = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|			ТОГДА ""По внутр. совм-ву""
	|		ИНАЧЕ ""Основное рабочее место""
	|	КОНЕЦ КАК ВидЗанятости
	|ИЗ
	|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ДатаНачалаСобытия,
	|				Сотрудник В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							РасчетСреднегоЗаработка.Сотрудник
	|						ИЗ
	|							РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|						ГДЕ
	|							РасчетСреднегоЗаработка.Регистратор = &Регистратор)
	|					И Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизацийСрезПоследних
	|		ПО РасчетСреднегоЗаработка.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
	|ГДЕ
	|	РасчетСреднегоЗаработка.Регистратор = &Регистратор
	|	И РасчетСреднегоЗаработка.СпособРасчета = &СпособРасчета
	|	И (РасчетСреднегоЗаработка.Результат <> 0
	|			ИЛИ РасчетСреднегоЗаработка.ОтработаноДней <> 0
	|			ИЛИ РасчетСреднегоЗаработка.ОтработаноЧасов <> 0)
	|	И РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода = &РасчетныйПериодНачало
	|	И РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода = &РасчетныйПериодОкончание
	|	И РасчетСреднегоЗаработка.ВидРасчета В(&СписокСоставляющихСреднегоЗаработка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокЗаписей,
	|	РасчетСреднегоЗаработка.БазовыйПериодНачало
	|ИТОГИ
	|	СУММА(ВсегоЗаработка),
	|	СУММА(ВсегоДнейРасчетногоПериода),
	|	СУММА(ВсегоУчтеноПремий)
	|ПО
	|	ОБЩИЕ,
	|	Сотрудник";
	
	Результат = Запрос.Выполнить();
	
	СтруктураПоказателей = Новый Структура("
	|ВсегоДнейРасчетногоПериода,
	|ВсегоЗаработка,
	|ВсегоУчтеноПремий,
	|ОбщийЗаработок, 
	|Средний",0,0,0,0,0);
	
	Если Не Результат.Пустой() Тогда
		
		// уточним названия колонок и показателей
		Если ИспользоватьСреднеЧасовойЗаработок Тогда
			СекцияЗаголовокРабочегоМеста.Параметры.ЕдиницаИзмерения = "часов";
			//СекцияДоляВремени.Параметры.ЕдиницаИзмерения = "часов";
			СекцияПодвал.Параметры.ЕдиницаИзмерения = "часов";
			СекцияПодвал.Параметры.ОписаниеЗаработка = "Среднечасовой";
		Иначе
			СекцияЗаголовокРабочегоМеста.Параметры.ЕдиницаИзмерения = "дней";
			//СекцияДоляВремени.Параметры.ЕдиницаИзмерения = "дней";
			СекцияПодвал.Параметры.ЕдиницаИзмерения = "дней";
			СекцияПодвал.Параметры.ОписаниеЗаработка = "Среднедневной";
		КонецЕсли;
		СтруктураИтоговПоРабочемуМесту = Новый Структура("
		|ВсегоДнейРасчетногоПериода,
		|ВсегоЗаработка,
		|ВсегоДнейОтработано,
		|ВсегоДнейПоНорме,
		|ДоляВремени",0,0,0,0,0);
		
		ВыводитьЗаголовокРабочегоМеста = Истина;
		ВыводитьИтогиПредыдущегоРабочегоМеста = Ложь;
		ТабДокумент.Вывести(СекцияЗаголовокНачислений);
		
		// Формирование раздела по начислениям за расчетный период по рабочим местам
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
				
				//заполнение итогами по расчету среднего заработка
				ЗаполнитьЗначенияСвойств(СтруктураПоказателей,Выборка);
				//ОтражатьДолюВремени = ОтражатьДолюВремени И Выборка.ФиксПремий <> 0;
				
				СтруктураПоказателей.ОбщийЗаработок = Формат(Выборка.ВсегоЗаработка + Выборка.ВсегоУчтеноПремий, "ЧЦ=17; ЧДЦ=4; ЧН=-");
				СтруктураПоказателей.Средний = Окр(?(СтруктураПоказателей.ВсегоДнейРасчетногоПериода = 0,0, (Выборка.ВсегоЗаработка + Выборка.ВсегоУчтеноПремий) / СтруктураПоказателей.ВсегоДнейРасчетногоПериода),2);
				
			ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
				Если ВыводитьИтогиПредыдущегоРабочегоМеста Тогда // итоги предыдущего р.м.
					ЗаполнитьЗначенияСвойств(СекцияСерединаОтчета.Параметры,СтруктураИтоговПоРабочемуМесту);
					ТабДокумент.Вывести(СекцияСерединаОтчета);
					//Если ОтражатьДолюВремени Тогда
					//	//ЗаполнитьЗначенияСвойств(СекцияДоляВремени.Параметры,СтруктураИтоговПоРабочемуМесту);
					//	//ТабДокумент.Вывести(СекцияДоляВремени);
					//КонецЕсли;
				Иначе
					ВыводитьИтогиПредыдущегоРабочегоМеста = Истина;
				КонецЕсли;
				
				// заполнение итогами по очередному р.м.
				ЗаполнитьЗначенияСвойств(СтруктураИтоговПоРабочемуМесту,Выборка);
				СтруктураИтоговПоРабочемуМесту.ДоляВремени = ?(СтруктураИтоговПоРабочемуМесту.ВсегоДнейПоНорме = 0,0, Формат(СтруктураИтоговПоРабочемуМесту.ВсегоДнейОтработано / СтруктураИтоговПоРабочемуМесту.ВсегоДнейПоНорме,"ЧДЦ=10"));
				ВыводитьЗаголовокРабочегоМеста = Истина;
				
			ИначеЕсли Выборка.ПорядокЗаписей <> 3 Тогда
				Если ВыводитьЗаголовокРабочегоМеста Тогда
					ВыводитьЗаголовокРабочегоМеста = Ложь;
					ЗаполнитьЗначенияСвойств(СекцияЗаголовокРабочегоМеста.Параметры,Выборка);
					ТабДокумент.Вывести(СекцияЗаголовокРабочегоМеста);
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СекцияМесячныйЗаработок.Параметры,Выборка);
				ТабДокумент.Вывести(СекцияМесячныйЗаработок);
			КонецЕсли;
		КонецЦикла;
		Если ВыводитьЗаголовокРабочегоМеста Тогда
			ТабДокумент.Вывести(СекцияЗаголовокРабочегоМеста);
		КонецЕсли;
		// итоги последнего по порядку р.м.
		ЗаполнитьЗначенияСвойств(СекцияСерединаОтчета.Параметры,СтруктураИтоговПоРабочемуМесту);
		ТабДокумент.Вывести(СекцияСерединаОтчета);
		//Если ОтражатьДолюВремени Тогда
		//	ЗаполнитьЗначенияСвойств(СекцияДоляВремени.Параметры,СтруктураИтоговПоРабочемуМесту);
		//	ТабДокумент.Вывести(СекцияДоляВремени);
		//КонецЕсли;
		
		// Формирование раздела по начисленным премиям
		ТабДокумент.Вывести(СекцияЗаголовокПремий);
		ВыводитьПустуюСтрокуПремии = Истина;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись И Выборка.ПорядокЗаписей = 3 Тогда
				ЗаполнитьЗначенияСвойств(СекцияПремии.Параметры,Выборка);
				СекцияПремии.Параметры.МесяцРасчетногоПериода = Формат(СекцияПремии.Параметры.МесяцРасчетногоПериода,"ДФ='ММММ гггг ""г.""'");
				ТабДокумент.Вывести(СекцияПремии);
				ВыводитьПустуюСтрокуПремии = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если ВыводитьПустуюСтрокуПремии Тогда
			СекцияПремии.Область(1,2,1,2).Текст = "";
			ТабДокумент.Вывести(СекцияПремии);
		КонецЕсли;
		
		// Итоги по расчету среднего заработка
		ЗаполнитьЗначенияСвойств(СекцияПодвал.Параметры,СтруктураПоказателей);
		ТабДокумент.Вывести(СекцияПодвал);
		
	КонецЕсли;
	
	//выводим начисления
	ЗапросПоНачислениям=Новый Запрос;
	ЗапросПоНачислениям.Текст=
	"ВЫБРАТЬ
	|	ОплатаПоСреднемуЗаработкуНачисления.ДатаНачала,
	|	ОплатаПоСреднемуЗаработкуНачисления.ДатаОкончания,
	|	ОплатаПоСреднемуЗаработкуНачисления.ВидРасчета,
	|	ОплатаПоСреднемуЗаработкуНачисления.Результат
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку.Начисления КАК ОплатаПоСреднемуЗаработкуНачисления
	|ГДЕ
	|	ОплатаПоСреднемуЗаработкуНачисления.Ссылка = &ДокументСсылка";
	
	ЗапросПоНачислениям.УстановитьПараметр("ДокументСсылка",ДокументСсылка);
	
	Выборка=ЗапросПоНачислениям.Выполнить().Выбрать();
	СекцияШапкаНачислений=Макет.ПолучитьОбласть("ШапкаНачислений");
	СекцияСтрокаНачислений=Макет.ПолучитьОбласть("СтрокаНачислений");
	
	Если Выборка.Количество()>0 Тогда
		
		ТабДокумент.Вывести(СекцияШапкаНачислений);
	
		Пока Выборка.Следующий() Цикл
			
			СекцияСтрокаНачислений.Параметры.Заполнить(Выборка);
			СекцияСтрокаНачислений.Параметры.ДатаНачала=Формат(Выборка.ДатаНачала,"ДФ=dd.MM.yyyy");
			СекцияСтрокаНачислений.Параметры.ДатаОкончания=Формат(Выборка.ДатаОкончания,"ДФ=dd.MM.yyyy");
			ТабДокумент.Вывести(СекцияСтрокаНачислений);
			
		КонецЦикла;	
		
	КонецЕсли;
	//конец вывода начислений	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьРасчетаСреднегоЗаработкаСНачислениями
//
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета	- строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если Не Проведен Тогда
		РаботаСДиалогами.ВывестиПредупреждение("Документ можно распечатать только после расчета и проведения!");
		Возврат Неопределено;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "РасчетСреднегоЗаработка" Тогда
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
		ТабДокумент = ФормированиеПечатныхФорм.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаНачала, ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка, "с " + Формат(ДатаНачала,"ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания,"ДФ=dd.MM.yyyy"), ВидРасчета.СпособРасчета);
		Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (расчет среднего заработка)");
	//vvv		
	ИначеЕсли ИмяМакета="Макет" Тогда		
		ТабДокумент=СформироватьДокумент();
		Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним));		
	Иначе
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
		ТабДокумент = ПечатьРасчетаСреднегоЗаработкаСНачислениями(Ссылка, ДатаНачала, ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка, "с " + Формат(ДатаНачала,"ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания,"ДФ=dd.MM.yyyy"), ВидРасчета.СпособРасчета);
		Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (расчет среднего заработка)");
	//	
	КонецЕсли;
	
КонецФункции // Печать()

#КонецЕсли

// Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
//
// Параметры:
//	РассчитываемыеТаблицы	- структура из элементов, соответствующих табличным частям документа. 
//							  Значение Истина для каждого из элементов структуры означает необходимость расчета 
//							  соответствующей табличной части документа
//	РежимПерерасчета		- булево - признак вызов расчета при перерасчете документа
//
Процедура Рассчитать(РассчитываемыеТаблицы, РежимПерерасчета = Ложь) Экспорт
	
	//Перед вызовом процедуры документ должнен быть записан, движения должны быть удалены 
	
	Отказ = Ложь;
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Если почасовое отклонение, то записываем движения в регистр ВнутрисменноеВремяРаботниковОрганизаций
	НаборЗаписейРабочееВремя = Движения.ВнутрисменноеВремяРаботниковОрганизаций;
	Если ВыборкаПоШапкеДокумента.ЯвляетсяПочасовымОтклонением И ВыборкаПоШапкеДокумента.ОплачиватьЧасов <> 0 Тогда
		//vvv заполним почасовое отклонение по каждому дню периода
		ТекДата=ВыборкаПоШапкеДокумента.ДатаНачала;
		Пока ТекДата<=ВыборкаПоШапкеДокумента.ДатаОкончания Цикл
		//
			Движение = НаборЗаписейРабочееВремя.Добавить();
		
			// Свойства
			//vvv комментируем
			//Движение.Период								= ВыборкаПоШапкеДокумента.ДатаНачала;
			Движение.Период								= ТекДата;
			//
			
			// Измерения
			Движение.Сотрудник							= ВыборкаПоШапкеДокумента.Сотрудник;
			Движение.Организация						= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ВидИспользованияРабочегоВремени	= ВыборкаПоШапкеДокумента.ВидИспользованияРабочегоВремени;
		
			// Ресурсы
			Движение.Часов								= ВыборкаПоШапкеДокумента.ОплачиватьЧасов;
			НаборЗаписейРабочееВремя.Записать();
			//vvv	
			ТекДата=ТекДата+мДлинаСуток;
		КонецЦикла;
		//
	КонецЕсли;
	
	Отказ = Не ПроведениеРасчетов.РассчитатьДокументСреднегоЗаработка(ЭтотОбъект, РассчитываемыеТаблицы, ВыборкаПоШапкеДокумента, РежимПерерасчета);
	
	// Удаляем движения для режима интерактивного расчета
	Если Не РежимПерерасчета Тогда
		НаборЗаписейРабочееВремя.Очистить();
		НаборЗаписейРабочееВремя.Записать();
	КонецЕсли;
	
КонецПроцедуры // Рассчитать()

// Выполняет перерасчет по заданному списку физлиц
//
// Параметры:
//	Физлица		- массив - ссылки на физлиц
//
// Возвращаемое значение:
//	Нет.
//
Процедура Перерассчитать(Физлица = Неопределено) Экспорт

	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	// Выполним полный перерасчет документа
	Рассчитать(Новый Структура("Начисления,РасчетСреднего",Истина,Истина), Истина);
	
	// Зафиксируем данные табличных частей после расчета
	Записать();
	
	Движения.НДФЛСведенияОДоходах.Очистить();
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Очистить();
	Движения.ВнутрисменноеВремяРаботниковОрганизаций.Очистить();
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	// Получение учетной политики по персоналу организации
	// ведется ли учет задолженности в разрезе периодов возникновения задолженности
	УчетЗадолженностиПоМесяцам = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
		
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетЗадолженностиПоМесяцам);
		Если ВыборкаПоНачислениям.ЯвляетсяПочасовымОтклонением Тогда
			ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ВнутрисменноеВремяРаботниковОрганизаций);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Набор Из Движения Цикл
		ТипНабораЗаписей = ТипЗнч(Набор);
		Если ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.НДФЛСведенияОДоходах") 
			Или ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.ВзаиморасчетыСРаботникамиОрганизаций") 
			Или ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.ВнутрисменноеВремяРаботниковОрганизаций") Тогда
			Набор.Записать();
		КонецЕсли;
	КонецЦикла;
	
	// Удалим записи перерасчета по которым выполнен перерасчет
	ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка);
	
КонецПроцедуры // Перерассчитать()

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.ОплатаПоСреднемуЗаработку
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ПерерассчитываемыйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//	Структура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("РасчетСреднегоЗаработка",	"Расчет среднего заработка");
	//vvv
	СтруктураМакетов.Вставить("РасчетСреднегоЗаработка1",	"Расчет среднего заработка c начислениями");
	СтруктураМакетов.Вставить("Макет",	"Печать");
	//
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция ПолучитьВидУчетаВремени(Сотрудник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
    Запрос.УстановитьПараметр("Дата",	  ПолучитьДатуНачалаСобытия());

	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|						И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|			КОНЕЦ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	КОНЕЦ КАК ВидУчетаВремени
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&Дата,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					Сотрудники.Ссылка
	|				ИЗ
	|					Справочник.СотрудникиОрганизаций КАК Сотрудники
	|				ГДЕ
	|					Сотрудники.Ссылка = &Сотрудник)) КАК РаботникиОрганизацийСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|					И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)";
	
 	Возврат Запрос.Выполнить().Выгрузить();
	

	
КонецФункции

// Возвращает дату начала события
Функция ПолучитьДатуНачалаСобытия() Экспорт

	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Возврат ДатаНачала;
	Иначе
		Возврат ТекущаяДата();
	КонецЕсли;

КонецФункции // ПолучитьДатуНачалаСобытия()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует соответствие в котором находятся действующие графики сотрудника 
// на указанные даты
Функция ПолучитьГрафикРаботыСотрудника(Сотрудник, ДатыПолучения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("СписокДат", ДатыПолучения);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыПоВидамВремени.Месяц КАК ДатаПолучения
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &Сотрудник
	|	И ГрафикиРаботыПоВидамВремени.Месяц В(&СписокДат)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДатаПолучения");
	
КонецФункции // ПолучитьГрафикРаботыСотрудника()

// Выполняет проверку непрерывности интервалов начислений
//
Процедура ПроверитьНепрерывностьЗаписейНачислений(Отказ, Заголовок)
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ТНачислений = Начисления.Выгрузить();
	ТНачислений.Сортировать("ДатаНачала");
	
	ПредыдущаяДатаОкончания = '00010101';
	СтрокаНеПервая = Ложь;
	Для Каждого Строка ИЗ ТНачислений Цикл
		
		// Пропустим сторно записи и доначисления
		Если Строка.Сторно или Строка.ВидРасчета <> ВидРасчета Тогда
			Продолжить;
		КонецЕсли;
		//vvv проверку на непрерывность будем делать только для целодневных
		Если СпособРегистрацииВремени=Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены ТОгда
			Продолжить;
		КонецЕсли;
		//
		
		// если встретили не первую строку начислений
		Если СтрокаНеПервая Тогда
			// строка не первая
			Если Строка.ДатаНачала <> ПредыдущаяДатаОкончания + мДлинаСуток Тогда
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
				""" табл. части ""Начисления"": ";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "нарушено требование непрерывности записей начислений!", Отказ, Заголовок);
			КонецЕсли;
			
		Иначе
			СтрокаНеПервая = Истина;
			
		КонецЕсли;
		ПредыдущаяДатаОкончания = Строка.ДатаОкончания;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьНепрерывностьЗаписейНачислений()

// Формирует записи регистра "ОсновныеНачисленияРаботниковОрганизаций" по данным шапки документа
//
Процедура СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборОсновныеНачисления) Экспорт 
	
	//vvv
	Если ВыборкаПоШапкеДокумента.СпособРегистрацииВремени=Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены ТОгда
		ВидУчетаВремени = ВыборкаПоШапкеДокумента.ВидУчетаВремени;	
		ТекущаяДатаНачала = ДатаНачала;
		ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания);
		МассивДат = Новый Массив;
		Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
			МассивДат.Добавить(НачалоМесяца(ТекущаяДатаНачала));
			ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
			ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания);				
		КонецЦикла;
		МесяцыРасчетаВремениПоТабелю = ПолучитьГрафикРаботыСотрудника(ВыборкаПоШапкеДокумента.Сотрудник, МассивДат);
		
		ТекущаяДатаНачала = ДатаНачала;
		ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания);
		УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
		Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
		
			// строка движений
			Движение = НаборОсновныеНачисления.Добавить();
		
			// Свойства
			Движение.ПериодРегистрации			= ПериодРегистрации;
			Движение.ПериодДействияНачало		= НачалоДня(ТекущаяДатаНачала);
			Движение.ПериодДействияКонец		= КонецДня(ТекущаяДатаОкончания);
			Движение.ВидРасчета					= ВидРасчета;
			
			// Измерения
			Движение.Сотрудник					= ВыборкаПоШапкеДокумента.Сотрудник;
			Движение.ФизЛицо					= ВыборкаПоШапкеДокумента.ФизЛицо;
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
      	
			// Реквизиты
			Движение.Показатель1				= ВыборкаПоШапкеДокумента.ПроцентОплаты;
			Движение.ПодразделениеОрганизации	= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			Движение.Должность					= ВыборкаПоШапкеДокумента.Должность;
			Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		
			Если МесяцыРасчетаВремениПоТабелю.Найти(НачалоМесяца(ТекущаяДатаНачала)) = Неопределено Тогда
				Движение.ГрафикРаботы			= ВыборкаПоШапкеДокумента.ГрафикРаботы;
			Иначе
				Движение.ГрафикРаботы			= ВыборкаПоШапкеДокумента.Сотрудник;
			КонецЕсли; 
				
			Движение.ВидУчетаВремени			= ВидУчетаВремени;
			Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
			Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
			Движение.ДатаНачалаСобытия			= ДатаНачала;
			Движение.РучнойРасчетСреднегоЗаработка = ВыборкаПоШапкеДокумента.РучнойРасчетСреднегоЗаработка;
			Если Движение.РучнойРасчетСреднегоЗаработка тогда
				Движение.РазмерСреднегоЗаработка = ВыборкаПоШапкеДокумента.РазмерСреднегоЗаработка;
			КонецЕсли;

			Движение.Авторасчет					= Истина;
			//сумма из ФМП
			Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидРасчетаФМП) ТОгда
				// строка движений
				Движение = НаборОсновныеНачисления.Добавить();
			
				// Свойства
				Движение.ПериодРегистрации			= ПериодРегистрации;
				Движение.ПериодДействияНачало		= НачалоДня(ТекущаяДатаНачала);
				Движение.ПериодДействияКонец		= КонецДня(ТекущаяДатаОкончания);
				Движение.ВидРасчета					= ВыборкаПоШапкеДокумента.ВидРасчетаФМП;
				
				// Измерения
				Движение.Сотрудник					= ВыборкаПоШапкеДокумента.Сотрудник;
				Движение.ФизЛицо					= ВыборкаПоШапкеДокумента.ФизЛицо;
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	   	
				// Реквизиты
				Движение.Показатель1				= ВыборкаПоШапкеДокумента.ПроцентОплаты;
				Движение.ПодразделениеОрганизации	= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
				Движение.Должность					= ВыборкаПоШапкеДокумента.Должность;
				Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
				
				Если МесяцыРасчетаВремениПоТабелю.Найти(НачалоМесяца(ТекущаяДатаНачала)) = Неопределено Тогда
					Движение.ГрафикРаботы			= ВыборкаПоШапкеДокумента.ГрафикРаботы;
				Иначе   	
					Движение.ГрафикРаботы			= ВыборкаПоШапкеДокумента.Сотрудник;
				КонецЕсли; 
					
				Движение.ВидУчетаВремени			= ВидУчетаВремени;
				Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
				Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
				Движение.ДатаНачалаСобытия			= ДатаНачала;
				Движение.РучнойРасчетСреднегоЗаработка = ВыборкаПоШапкеДокумента.РучнойРасчетСреднегоЗаработка;
				Если Движение.РучнойРасчетСреднегоЗаработка тогда
					Движение.РазмерСреднегоЗаработка = ВыборкаПоШапкеДокумента.РазмерСреднегоЗаработка;
				КонецЕсли;
           	
				Движение.Авторасчет					= Истина;
			КонецЕсли;
			//
			ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
			ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания);				
			
		КонецЦикла;
	//vvv	
	Иначе
		ВидУчетаВремени = ВыборкаПоШапкеДокумента.ВидУчетаВремени;	
		ТекущаяДатаНачала = ДатаНачала;
		ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания);
		МассивДат = Новый Массив;
		Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
			МассивДат.Добавить(НачалоМесяца(ТекущаяДатаНачала));
			ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
			ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания);				
		КонецЦикла;
		МесяцыРасчетаВремениПоТабелю = ПолучитьГрафикРаботыСотрудника(ВыборкаПоШапкеДокумента.Сотрудник, МассивДат);
		
		ТекущаяДатаНачала = ДатаНачала;
		//ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания);
		ТекущаяДатаОкончания = ДатаОкончания;
		УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
		Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
		
			// строка движений
			Движение = НаборОсновныеНачисления.Добавить();
			
			// Свойства
			Движение.ПериодРегистрации			= ПериодРегистрации;
			Движение.ПериодДействияНачало		= НачалоДня(ТекущаяДатаНачала);
			Движение.ПериодДействияКонец		= КонецДня(ТекущаяДатаНачала);
			Движение.ВидРасчета					= ВидРасчета;
		
			// Измерения
			Движение.Сотрудник					= ВыборкаПоШапкеДокумента.Сотрудник;
			Движение.ФизЛицо					= ВыборкаПоШапкеДокумента.ФизЛицо;
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
   	
			// Реквизиты
			Движение.Показатель1				= ВыборкаПоШапкеДокумента.ПроцентОплаты;
			Движение.ПодразделениеОрганизации	= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			//vvv
			Движение.Должность					= ВыборкаПоШапкеДокумента.Должность;
			//
			Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		
			Если МесяцыРасчетаВремениПоТабелю.Найти(НачалоМесяца(ТекущаяДатаНачала)) = Неопределено Тогда
				Движение.ГрафикРаботы			= ВыборкаПоШапкеДокумента.ГрафикРаботы;
			Иначе
				Движение.ГрафикРаботы			= ВыборкаПоШапкеДокумента.Сотрудник;
			КонецЕсли; 
		
			Движение.ВидУчетаВремени			= ВидУчетаВремени;
			Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
			Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
			Движение.ДатаНачалаСобытия			= ДатаНачала;
			Движение.РучнойРасчетСреднегоЗаработка = ВыборкаПоШапкеДокумента.РучнойРасчетСреднегоЗаработка;
			Если Движение.РучнойРасчетСреднегоЗаработка тогда
				Движение.РазмерСреднегоЗаработка = ВыборкаПоШапкеДокумента.РазмерСреднегоЗаработка;
			КонецЕсли;
  	
			Движение.Авторасчет					= Истина;
			//сумма из ФМП
			Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидРасчетаФМП) ТОгда
				// строка движений
				Движение = НаборОсновныеНачисления.Добавить();
			
				// Свойства
				Движение.ПериодРегистрации			= ПериодРегистрации;
				Движение.ПериодДействияНачало		= НачалоДня(ТекущаяДатаНачала);
				Движение.ПериодДействияКонец		= КонецДня(ТекущаяДатаНачала);
				Движение.ВидРасчета					= ВыборкаПоШапкеДокумента.ВидРасчетаФМП;
				
				// Измерения
				Движение.Сотрудник					= ВыборкаПоШапкеДокумента.Сотрудник;
				Движение.ФизЛицо					= ВыборкаПоШапкеДокумента.ФизЛицо;
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
				// Реквизиты
				Движение.Показатель1				= ВыборкаПоШапкеДокумента.ПроцентОплаты;
				Движение.ПодразделениеОрганизации	= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
				Движение.Должность					= ВыборкаПоШапкеДокумента.Должность;
				Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
			
				Если МесяцыРасчетаВремениПоТабелю.Найти(НачалоМесяца(ТекущаяДатаНачала)) = Неопределено Тогда
					Движение.ГрафикРаботы			= ВыборкаПоШапкеДокумента.ГрафикРаботы;
				Иначе   	
					Движение.ГрафикРаботы			= ВыборкаПоШапкеДокумента.Сотрудник;
				КонецЕсли; 
				
				Движение.ВидУчетаВремени			= ВидУчетаВремени;
				Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
				Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
				Движение.ДатаНачалаСобытия			= ДатаНачала;
				Движение.РучнойРасчетСреднегоЗаработка = ВыборкаПоШапкеДокумента.РучнойРасчетСреднегоЗаработка;
				Если Движение.РучнойРасчетСреднегоЗаработка тогда
					Движение.РазмерСреднегоЗаработка = ВыборкаПоШапкеДокумента.РазмерСреднегоЗаработка;
				КонецЕсли;

				Движение.Авторасчет					= Истина;
			КонецЕсли;
			ТекущаяДатаНачала = ТекущаяДатаНачала + мДлинаСуток;
		КонецЦикла;	
	КонецЕсли;
	//

КонецПроцедуры // СформироватьДвиженияПоНачислениям()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала",				ДатаНачала);
	Запрос.УстановитьПараметр("Сотрудник",				Сотрудник);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОплатаПоСреднемуЗаработку.Дата,
	|	ОплатаПоСреднемуЗаработку.ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ОплатаПоСреднемуЗаработку.Организация
	|		ИНАЧЕ ОплатаПоСреднемуЗаработку.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ОплатаПоСреднемуЗаработку.Организация
	|		ИНАЧЕ ОплатаПоСреднемуЗаработку.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	ОплатаПоСреднемуЗаработку.Организация КАК ОбособленноеПодразделение,
	|	ОплатаПоСреднемуЗаработку.Ссылка,
	|	ОплатаПоСреднемуЗаработку.Сотрудник,
	|	ОплатаПоСреднемуЗаработку.Сотрудник.Физлицо КАК Физлицо,
	|	ОплатаПоСреднемуЗаработку.ПроцентОплаты,
	|	ОплатаПоСреднемуЗаработку.ВидРасчета,
	//vvv
	|	ОплатаПоСреднемуЗаработку.ВидРасчета.ОтпускИзФМП КАК ВидРасчетаФМП,
	|	ОплатаПоСреднемуЗаработку.ППС КАК ППС,
	|	ОплатаПоСреднемуЗаработку.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете,
	|	ОплатаПоСреднемуЗаработку.СпособРегистрацииВремени КАК СпособРегистрацииВремени,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачала
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность
	|	КОНЕЦ КАК Должность,
	//
	|	ОплатаПоСреднемуЗаработку.ДатаНачала,
	|	ОплатаПоСреднемуЗаработку.ДатаНачала КАК ДатаНачалаСобытия,
	|	ОплатаПоСреднемуЗаработку.ДатаОкончания,
	|	ОплатаПоСреднемуЗаработку.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ОплатаПоСреднемуЗаработку.ВидРасчета.ПериодРасчетаСреднегоЗаработка КАК ПериодРасчетаСреднегоЗаработка,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//vvv
	|		КОГДА ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоЗаработкаНачало <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоЗаработкаНачало
	//
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОплатаПоСреднемуЗаработку.ДатаНачала, МЕСЯЦ), МЕСЯЦ, -ОплатаПоСреднемуЗаработку.ВидРасчета.ПериодРасчетаСреднегоЗаработка)
	|	КОНЕЦ КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//vvv
	|		КОГДА ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоЗаработкаОкончание <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоЗаработкаОкончание
	//
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОплатаПоСреднемуЗаработку.ДатаНачала, МЕСЯЦ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//vvv
	|		КОГДА ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоЗаработкаНачало <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоЗаработкаНачало
	//
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОплатаПоСреднемуЗаработку.ДатаНачала, МЕСЯЦ), МЕСЯЦ, -ОплатаПоСреднемуЗаработку.ВидРасчета.ПериодРасчетаСреднегоЗаработка)
	|	КОНЕЦ КАК ДатаНачалаРасчетногоПериода,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//vvv
	|		КОГДА ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоЗаработкаОкончание <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоЗаработкаОкончание
	//
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОплатаПоСреднемуЗаработку.ДатаНачала, МЕСЯЦ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ДатаОкончанияРасчетногоПериода,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачала
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачала
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачала
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|		КОНЕЦ, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	ОплатаПоСреднемуЗаработку.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяПочасовымОтклонением,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.СпособРегистрацииВремени = ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РегистрируютсяПочасовыеОтклонения,
	|	ОплатаПоСреднемуЗаработку.ОплачиватьЧасов КАК ОплачиватьЧасов,
	|	ОплатаПоСреднемуЗаработку.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	ОплатаПоСреднемуЗаработку.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	ОплатаПоСреднемуЗаработку.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.Сотрудник.Организация = ВЫБОР
	|				КОГДА ОплатаПоСреднемуЗаработку.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ОплатаПоСреднемуЗаработку.Организация
	|				ИНАЧЕ ОплатаПоСреднемуЗаработку.Организация.ГоловнаяОрганизация
	|			КОНЕЦ
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.Дата < ОплатаПоСреднемуЗаработку.ПериодРегистрации
	|			ТОГДА ОплатаПоСреднемуЗаработку.ПериодРегистрации
	|		КОГДА ОплатаПоСреднемуЗаработку.Дата > КОНЕЦПЕРИОДА(ОплатаПоСреднемуЗаработку.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА КОНЕЦПЕРИОДА(ОплатаПоСреднемуЗаработку.ПериодРегистрации, МЕСЯЦ)
	|		ИНАЧЕ ОплатаПоСреднемуЗаработку.Дата
	|	КОНЕЦ КАК ПериодРегистрацииДополнительныхНачислений,
	|	ОплатаПоСреднемуЗаработку.РазмерСреднегоЗаработка,
	|	ОплатаПоСреднемуЗаработку.РучнойРасчетСреднегоЗаработка,
	|	ОплатаПоСреднемуЗаработку.ВидУчетаВремени
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднемуЗаработку
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачала, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|		ПО (РаботникиОрганизацииСрезПоследних.Организация = ВЫБОР
	|				КОГДА ОплатаПоСреднемуЗаработку.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ОплатаПоСреднемуЗаработку.Организация
	|				ИНАЧЕ ОплатаПоСреднемуЗаработку.Организация.ГоловнаяОрганизация
	|			КОНЕЦ)
	|ГДЕ
	|	ОплатаПоСреднемуЗаработку.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части Начисления
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	СписокСтруктурныхПодразделений = ПроцедурыУправленияПерсоналом.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",			СписокСтруктурныхПодразделений);
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",					Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала",						ДатаНачала);
	Запрос.УстановитьПараметр("Сотрудник",						Сотрудник);
	Запрос.УстановитьПараметр("СуммированныйУчетРабочегоВремени", ВыборкаПоШапкеДокумента.СуммированныйУчетРабочегоВремени);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",			ГоловнаяОрганизация);
	КодОплатыТрудаПоНДФЛ = Новый Массив;
	КодОплатыТрудаПоНДФЛ.Добавить(Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию);
	//КодОплатыТрудаПоНДФЛ.Добавить(Справочники.ДоходыНДФЛ.Код2012);
	Запрос.УстановитьПараметр("КодОплатыТрудаПоНДФЛ", КодОплатыТрудаПоНДФЛ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	СтрокиНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	СтрокиНачисления.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.КодДоходаНДФЛ В (&КодОплатыТрудаПоНДФЛ)
	|			ТОГДА СтрокиНачисления.ДатаНачала
	|		ИНАЧЕ СтрокиНачисления.Ссылка.ПериодРегистрации
	|	КОНЕЦ КАК МесяцНалоговогоПериода,
	|	СтрокиНачисления.ДатаНачала,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ДатаОкончания,
	|	СтрокиНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	СтрокиНачисления.ДатаНачала КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	ВЫБОР
	|		КОГДА &СуммированныйУчетРабочегоВремени
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	КОНЕЦ КАК ВидУчетаВремени,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяПочасовымОтклонением,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ДополнительныеДанные,
	//vvv
	|	СтрокиНачисления.ЗаработокЗаЕдиницуВремениФМП,
	|	СтрокиНачисления.Должность,
	//
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.ОтработаноДнейПоПятидневке,
	|	СтрокиНачисления.ОтработаноЧасовПоПятидневке,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ПустаяСсылка) КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.НормаДнейПоПятидневке,
	|	СтрокиНачисления.НормаЧасовПоПятидневке,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ВЫБОР
	|		КОГДА ГрафикРаботыПоСотруднику.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизации.ПериодЗавершения <= СтрокиНачисления.ДатаНачалаСобытия
	|							И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|					ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|				КОНЕЦ
	|		ИНАЧЕ СтрокиНачисления.Ссылка.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка) КАК ГрафикРаботыНорма,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= СтрокиНачисления.ДатаНачалаСобытия
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|			ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|		КОНЕЦ, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.ДатаНачалаСобытия,
	|	СтрокиНачисления.Сторно,
	|	ВЫБОР
	|		КОГДА НЕ СтрокиНачисления.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент,
	|	СтрокиНачисления.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления,
	|	СтрокиНачисления.ЧислоМесяцев,
	|	СтрокиНачисления.Авторасчет,
	|	СтрокиНачисления.Ссылка.Сотрудник,
	|	СтрокиНачисления.РучнойРасчетСреднегоЗаработка,
	|	СтрокиНачисления.РазмерСреднегоЗаработка,
	|	СтрокиНачисления.КоэффициентИндексации
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку.Начисления КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			Документ.ОплатаПоСреднемуЗаработку.Начисления КАК СтрокиНачисления
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО (РаботникиОрганизации.Период <= СтрокиНачисления.ДатаНачалаСобытия)
	|					И СтрокиНачисления.Ссылка.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ГДЕ
	|			СтрокиНачисления.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтрокиНачисления.НомерСтроки) КАК ПоследниеДаты
	|		ПО СтрокиНачисления.НомерСтроки = ПоследниеДаты.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО (РаботникиОрганизации.Период = ПоследниеДаты.МаксПериод)
	|			И СтрокиНачисления.Ссылка.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			Документ.ОплатаПоСреднемуЗаработку.Начисления КАК СтрокиНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|				ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = СтрокиНачисления.Ссылка.Сотрудник)
	|					И (ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаНачала, МЕСЯЦ))
	|		ГДЕ
	|			СтрокиНачисления.Ссылка = &ДокументСсылка) КАК ГрафикРаботыПоСотруднику
	|		ПО СтрокиНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

// Формирует запрос по таблице "РасчетСреднего" документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоРасчетСреднего()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокаРасчетСреднего.НомерСтроки,
	|	СтрокаРасчетСреднего.Ссылка.Сотрудник,
	//vvv
	|	СтрокаРасчетСреднего.Сотрудник КАК СотрудникСтрока,
	//
	|	СтрокаРасчетСреднего.Ссылка.Сотрудник.Физлицо КАК Физлицо,
	|	СтрокаРасчетСреднего.ВидРасчета,
	|	СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокаРасчетСреднего.КоэффициентИндексации,
	|	СтрокаРасчетСреднего.Результат,
	|	СтрокаРасчетСреднего.ОтработаноПоПятидневке,
	|	СтрокаРасчетСреднего.НормаПоПятидневке,
	|	СтрокаРасчетСреднего.ОтработаноДней,
	|	СтрокаРасчетСреднего.ОтработаноЧасов,
	|	СтрокаРасчетСреднего.ЧислоМесяцев,
	|	СтрокаРасчетСреднего.МесяцВыборки,
	|	СтрокаРасчетСреднего.КалендарныеДни
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку.РасчетСреднего КАК СтрокаРасчетСреднего
	|ГДЕ
	|	СтрокаРасчетСреднего.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРасчетСреднего()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры:
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период регистрации!", Отказ, Заголовок);
	КонецЕсли;
	
	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОбособленноеПодразделение) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, по которой выполняется начисление!", Отказ, Заголовок);
	КонецЕсли;

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ДатаНачала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата начала оплачиваемого события!", Отказ, Заголовок);
	ИначеЕсли Не ВыборкаПоШапкеДокумента.РегистрируютсяПочасовыеОтклонения Тогда
		
		// ДатаОкончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указана дата окончания оплачиваемого события!", Отказ, Заголовок);
		ИначеЕсли ВыборкаПоШапкеДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачала Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Дата окончания оплачиваемого события не должна быть меньше даты начала!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан вид расчета!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоШапкеДокумента.РегистрируютсяПочасовыеОтклонения <> ВыборкаПоШапкеДокумента.ЯвляетсяПочасовымОтклонением Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Указанный вид расчета не соответствует способу регистрации времени в документе!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.РегистрируютсяПочасовыеОтклонения И ВыборкаПоШапкеДокумента.ЯвляетсяПочасовымОтклонением Тогда
		// ВидИспользованияРабочегоВремени
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидИспользованияРабочегоВремени) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан учет времени для вида расчета!", Отказ, Заголовок);
		КонецЕсли;
		
		// ОплачиватьЧасов
		Если ВыборкаПоШапкеДокумента.ОплачиватьЧасов <= 0 Или ВыборкаПоШапкеДокумента.ОплачиватьЧасов > 24 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Количество оплачиваемых часов должно быть положительным и не превышать 24!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	// Процент оплаты
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПроцентОплаты) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан процент оплаты!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала 
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) и ВыборкаПоСтрокамДокумента.ОсновныеНачисления Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
		
	ИначеЕсли Не ВыборкаПоШапкеДокумента.РегистрируютсяПочасовыеОтклонения Тогда
		
		// Дата окончания
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			Если ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоСтрокамДокумента.ДатаНачала Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ, Заголовок);
			ИначеЕсли ВыборкаПоСтрокамДокумента.ОсновныеНачисления Тогда
				Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаОкончания) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;

	// Дата начала события
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия) и ВыборкаПоСтрокамДокумента.ОсновныеНачисления Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала события!", Отказ, Заголовок);
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение организации!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ВыборкаПоСтрокамДокумента.Сторно И ВыборкаПоСтрокамДокумента.ОсновныеНачисления И  (ВыборкаПоСтрокамДокумента.ДатаНачала < ВыборкаПоШапкеДокумента.ДатаНачала ИЛИ ВыборкаПоСтрокамДокумента.ДатаНачала > КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания) 
		ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачала ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания > КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания)) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "период начисления выходит за временные границы оплачиваемого события!", Ложь, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры:
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Расчет среднего"": ";
	
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала базового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ, Заголовок);
		
	// Дата окончания базового периода
	ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ, Заголовок);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры:
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборРасчетСреднего)
	
	СуммаРесурсов = ВыборкаПоСтрокамДокумента.Результат 
			+ ВыборкаПоСтрокамДокумента.ОтработаноДней + ВыборкаПоСтрокамДокумента.ОтработаноЧасов 
			+ ВыборкаПоСтрокамДокумента.ОтработаноПоПятидневке + ВыборкаПоСтрокамДокумента.НормаПоПятидневке;
		
	Если СуммаРесурсов <> 0 Тогда
		
		Движение = НаборРасчетСреднего.Добавить();
		
		СтрокаСвойствИзДокумента = "ПериодРегистрации,Сотрудник,ФизЛицо,Организация,ДатаНачалаСобытия,СпособРасчета,"
										+ "ДатаНачалаРасчетногоПериода,ДатаОкончанияРасчетногоПериода,ПериодРасчетаСреднегоЗаработка";
		СтрокаСвойствИзСтрокиДокумента = "БазовыйПериодНачало,БазовыйПериодКонец,ВидРасчета,Результат," 
										+ "ОтработаноПоПятидневке,НормаПоПятидневке,ОтработаноДней,ОтработаноЧасов,"
										+ "КоэффициентИндексации,ЧислоМесяцев,МесяцВыборки,КалендарныеДни";
		
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
		//vvv
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СотрудникСтрока) Тогда
			Движение.Сотрудник=ВыборкаПоСтрокамДокумента.СотрудникСтрока;
		КонецЕсли;		
		Движение.РасчетВнутреннегоСовместителя	= ВыборкаПоШапкеДокумента.Сотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;
		//
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРасчетаСреднего()

// По выборке из результатов запроса по шапке документу формируем движения по регистру
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- спозиционированная на определеной строке выборка 
//							  из результата запроса к шапке документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Если ВыборкаПоШапкеДокумента.ЯвляетсяПочасовымОтклонением И ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов <> 0 Тогда
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период								= ВыборкаПоСтрокамДокумента.ДатаНачала;
		
		// Измерения
		Движение.Сотрудник							= ВыборкаПоШапкеДокумента.Сотрудник;
		Движение.Организация						= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ВидИспользованияРабочегоВремени	= ВыборкаПоШапкеДокумента.ВидИспользованияРабочегоВремени;
		
		// Ресурсы
		Движение.Часов								= ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРабочегоВремени()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//	ВыборкаПоШапкеДокумента			- выборка из результата запроса по шапке документа
//	ВыборкаПоТЧ						- выборка из результата запроса по т.ч. документа
//	УчетЗадолженностиПоМесяцам		- булево, учетная политика ведения расчетов с работниками 
//										в разрезе периодов образования задолженности
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, УчетЗадолженностиПоМесяцам)
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.КодДоходаНДФЛ) Тогда
		
		Движение = Движения.НДФЛСведенияОДоходах.Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоТЧ.МесяцНалоговогоПериода;
		
		// Измерения
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ФизЛицо					= ВыборкаПоШапкеДокумента.ФизЛицо;
		Движение.КодДохода					= ВыборкаПоТЧ.КодДоходаНДФЛ;
		Движение.ПериодРегистрации			= НачалоМесяца(ПериодРегистрации);
		
		// Ресурсы
		Движение.СуммаДохода				= ВыборкаПоТЧ.Результат; 
		
		// Реквизиты
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.ИсчисленоИзЗарплаты	= Истина;
		Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации; 
		Движение.ВидРасчета = ВыборкаПоТЧ.ВидРасчета; 
	КонецЕсли;
	
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
	
	// Свойства
	Движение.Период					= КонецМесяца(ПериодРегистрации);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	
	// Измерения
	Движение.Организация			= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.ФизЛицо				= ВыборкаПоШапкеДокумента.ФизЛицо;
	//vvv комментируем
	//Если УчетЗадолженностиПоМесяцам Тогда
		Движение.ПериодВзаиморасчетов	= ПериодРегистрации;
	//КонецЕсли;
	
	// Ресурсы
	Движение.СуммаВзаиморасчетов	= ВыборкаПоТЧ.Результат;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	ПерерассчитываемыйДокумент = Неопределено
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверим непрерывночть следования записей начислений
	ПроверитьНепрерывностьЗаписейНачислений(Отказ, Заголовок);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда
		
		// Получение учетной политики по персоналу организации
		// ведется ли учет задолженности в разрезе периодов возникновения задолженности
		УчетЗадолженностиПоМесяцам = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
		
		Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
		Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьСписаниеФактическогоОтпуска	= Истина;

		// перепишем данные из таблицы начислений в набор записей
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
		
		
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);
			
			Если НЕ Отказ Тогда
				Если ВыборкаПоНачислениям.ОсновныеНачисления Тогда
					Движение = ПроведениеРасчетов.ДобавитьСтрокуОсновныхНачислений(Движения.ОсновныеНачисленияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
				Иначе
					Движение = ПроведениеРасчетов.ДобавитьСтрокуДополнительныхНачислений(Движения.ДополнительныеНачисленияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
				КонецЕсли;
					Движение.КоэффициентИндексации =  ВыборкаПоНачислениям.КоэффициентИндексации;
					//vvv
					Движение.ОтчисленияНаППС = ?(ВыборкаПоШапкеДокумента.ППС,Перечисления.ДоходыФСС_НС.Облагается,Перечисления.ДоходыФСС_НС.НеОблагается);
					Движение.СпособОтраженияВБухучете = ВыборкаПоШапкеДокумента.СпособОтраженияВБухучете;
					Движение.ВидУчетаВремени = ВыборкаПоШапкеДокумента.ВидУчетаВремени;
					//
				ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетЗадолженностиПоМесяцам);
				Если ВыборкаПоНачислениям.ЯвляетсяПочасовымОтклонением Тогда
					ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ВнутрисменноеВремяРаботниковОрганизаций);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// получим реквизиты табличной части
		ВыборкаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего().Выбрать();
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ, Заголовок);
			
			Если НЕ Отказ Тогда
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Движения.РасчетСреднегоЗаработка);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ Отказ Тогда
			
			// выполним удаление перерасчетов исправленного документа
			Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
				ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка, Истина); // Только по исправленным документам
			КонецЕсли;
			
			Для Каждого Набор Из Движения Цикл
				ТипНабораЗаписей = ТипЗнч(Набор);
				Если ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") 
					Или ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда
					Набор.Записать();
				КонецЕсли;
			КонецЦикла;
			ПроведениеРасчетов.ОбработатьТаблицуПерерасчетов(Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
    Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены Тогда
		//vvv комментируем для возможности расчитывать внутрисменные отклонения за период
		//ДатаОкончания = ДатаНачала;
		ДатаОкончания=?(ЗначениеЗаполнено(ДатаОкончания),ДатаОкончания,ДатаНачала);
		//
	Иначе 
		ОплачиватьЧасов = 0;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400; // в секундах


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит массив типов наборов записей,
// движения по которому не контролируются документом
Перем мНеуправляемыеДвижения;

// Хранит соответствие доходов и положенных по ним вычетов
Перем мСоответствиеДоходовИВычетов;

// Хранит соответствие доходов и положенных по ним вычетов
Перем мВалютаРегламентиованногоУчета;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

// Заполняет показатели
//
Функция ЗаполнитьПоказатели(ТекущийСотрудник) Экспорт 
	
	Если ТекущийСотрудник = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Начисления.Количество() = 0 И ДополнительныеНачисления.Количество() = 0 И Удержания.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТЗНачисления	= Начисления.Выгрузить(,"Сотрудник,ВидРасчета");
	ТЗДопНачисления	= ДополнительныеНачисления.Выгрузить(,"Сотрудник,ВидРасчета");
	ТЗУдержания		= Удержания.Выгрузить(,"ФизЛицо,ВидРасчета");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Начисления",ТЗНачисления);
	Запрос.УстановитьПараметр("ДопНачисления",ТЗДопНачисления);
	Запрос.УстановитьПараметр("Удержания",ТЗУдержания);
	Запрос.УстановитьПараметр("ПарамДата",НачалоМесяца(ПериодНачисленияДатаНачала));
	Запрос.УстановитьПараметр("ПарамГоловнаяОрганизация",ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
	// получим временную таблицу с сотрудниками и видами расчетов
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.Сотрудник
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&Начисления КАК Начисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.Сотрудник
	|ПОМЕСТИТЬ ВТДопНачисления
	|ИЗ
	|	&ДопНачисления КАК Начисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Удержания.ВидРасчета,
	|	Удержания.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТУдержания
	|ИЗ
	|	&Удержания КАК Удержания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.ВидДоговора,
	|	СотрудникиОрганизаций.Физлицо,
	|	СотрудникиОрганизаций.ВидЗанятости КАК ВидЗанятости
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Организация = &ПарамГоловнаяОрганизация
	|	И СотрудникиОрганизаций.Физлицо В
	|			(ВЫБРАТЬ
	|				Удержания.ФизЛицо КАК ФизЛицо
	|			ИЗ
	|				ВТУдержания КАК Удержания)
	|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И СотрудникиОрганизаций.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиОсновноеМесто.Сотрудник КАК Сотрудник,
	|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
	|	СотрудникиОрганизаций.ВидЗанятости КАК ВидЗанятости
	|ПОМЕСТИТЬ ВТДанныеОРаботниках
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&ПарамДата,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					Сотрудники.Сотрудник
	|				ИЗ
	|					ВТСотрудники КАК Сотрудники)) КАК РаботникиОсновноеМесто
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК СотрудникиОрганизаций
	|		ПО РаботникиОсновноеМесто.Сотрудник = СотрудникиОрганизаций.Сотрудник
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОсновноеМесто.ПериодЗавершения <= &ПарамДата
	|					И РаботникиОсновноеМесто.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОсновноеМесто.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОсновноеМесто.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЗанятости,
	|	Физлицо";			
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Показатели.Показатель КАК Показатель,
	|	Показатели.Показатель.ВидПоказателя КАК ВидПоказателя,
	|	Начисления.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели
	|		ПО Начисления.ВидРасчета = Показатели.Ссылка
	|			И ((НЕ Показатели.Показатель.Предопределенный))
	|			И (Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется))
	|			И (Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд))
	|ГДЕ
	|	Показатели.Показатель ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Показатели.Показатель,
	|	Показатели.Показатель.ВидПоказателя,
	|	ДопНачисления.Сотрудник
	|ИЗ
	|	ВТДопНачисления КАК ДопНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели
	|		ПО ДопНачисления.ВидРасчета = Показатели.Ссылка
	|			И ((НЕ Показатели.Показатель.Предопределенный))
	|			И (Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется))
	|			И (Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд))
	|ГДЕ
	|	Показатели.Показатель ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Показатели.Показатель,
	|	Показатели.Показатель.ВидПоказателя,
	|	Сотрудники.Сотрудник
	|ИЗ
	|	ВТУдержания КАК Удержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели
	|		ПО Удержания.ВидРасчета = Показатели.Ссылка
	|			И ((НЕ Показатели.Показатель.Предопределенный))
	|			И (Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется))
	|			И (Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокСотрудников.Сотрудник КАК Сотрудник,
	|			СписокСотрудников.Физлицо КАК Физлицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
	|				РаботникиОсновноеМесто.Физлицо КАК Физлицо,
	|				1 КАК Приоритет
	|			ИЗ
	|				ВТДанныеОРаботниках КАК РаботникиОсновноеМесто
	|			ГДЕ
	|				РаботникиОсновноеМесто.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиОсновноеМесто.Физлицо
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиСовместительство.Сотрудник),
	|				РаботникиСовместительство.Физлицо,
	|				2
	|			ИЗ
	|				ВТДанныеОРаботниках КАК РаботникиСовместительство
	|			ГДЕ
	|				РаботникиСовместительство.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиСовместительство.Физлицо
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				МАКСИМУМ(СотрудникиДУ.Сотрудник),
	|				СотрудникиДУ.Физлицо,
	|				ВЫБОР
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|						ТОГДА 4
	|					ИНАЧЕ 5
	|				КОНЕЦ
	|			ИЗ
	|				ВТСотрудники КАК СотрудникиДУ
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СотрудникиДУ.Физлицо,
	|				ВЫБОР
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|						ТОГДА 4
	|					ИНАЧЕ 5
	|				КОНЕЦ) КАК СписокСотрудников
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					СписокФизическихЛиц.Физлицо КАК Физлицо,
	|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
	|				ИЗ
	|					(ВЫБРАТЬ
	|						РаботникиОсновноеМесто.Физлицо КАК Физлицо,
	|						1 КАК Приоритет
	|					ИЗ
	|						ВТДанныеОРаботниках КАК РаботникиОсновноеМесто
	|					ГДЕ
	|						РаботникиОсновноеМесто.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						РаботникиСовместительство.Физлицо,
	|						2
	|					ИЗ
	|						ВТДанныеОРаботниках КАК РаботникиСовместительство
	|					ГДЕ
	|						РаботникиСовместительство.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						СотрудникиДУ.Физлицо,
	|						ВЫБОР
	|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|								ТОГДА 4
	|							ИНАЧЕ 5
	|						КОНЕЦ
	|					ИЗ
	|						ВТСотрудники КАК СотрудникиДУ) КАК СписокФизическихЛиц
	|				
	|				СГРУППИРОВАТЬ ПО
	|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
	|				ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
	|					И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет) КАК Сотрудники
	|		ПО Удержания.ФизЛицо = Сотрудники.Физлицо
	|ГДЕ
	|	Показатели.Показатель ЕСТЬ НЕ NULL 
	|	И Сотрудники.Сотрудник ЕСТЬ НЕ NULL ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		
		ТаблицаЗапроса = Результат.Выгрузить();
		Показатели = ТаблицаЗапроса.ВыгрузитьКолонку("Показатель");
		Сотрудники = ТаблицаЗапроса.ВыгрузитьКолонку("Сотрудник");
		
		ФормаВводаПоказателей = РегистрыСведений.ЗначенияПоказателейСхемМотивации.ПолучитьФорму("ФормаВводаЗначенийПоказателей");
		ФормаВводаПоказателей.Организация		= Организация;
		ФормаВводаПоказателей.ПериодДействия	= НачалоМесяца(ПериодНачисленияДатаНачала);

		ФормаВводаПоказателей.ФормаАвтозаполнение(ТаблицаЗапроса, Сотрудники, Показатели);
		ФормаВводаПоказателей.мСотрудникДляОткрытия = ТекущийСотрудник;
		ФормаВводаПоказателей.Открыть();
		
		Возврат Истина;
		
	КонецЕсли;

КонецФункции //ЗаполнитьПоказатели

// Функция заполняет табличный документ "РасчетныйЛисток"
//
// Параметры:
//	ФизЛицо	- элемент справочника "ФизическиеЛица"
//
// Возвращаемое значение:
//	Табличный документ с заполненным расчетным листком
//
Функция ЗаполнитьТаблицуРасчетногоЛистка(ФизЛицо) Экспорт
	
	ЗапросРЛ = Новый Запрос;
	ЗапросРЛ.УстановитьПараметр("ПериодРегистрации",			ПериодРегистрации);
	ЗапросРЛ.УстановитьПараметр("КонецПериодаРегистрации",		КонецМесяца(ПериодРегистрации));
	ЗапросРЛ.УстановитьПараметр("Расход",						ВидДвиженияНакопления.Расход);
	Авансы = Новый Массив;
	Авансы.Добавить(Перечисления.ХарактерВыплатыЗарплаты.АвансЗаПервуюПоловинуМесяца);
	Авансы.Добавить(Перечисления.ХарактерВыплатыЗарплаты.ПлановыйАванс);
	ЗапросРЛ.УстановитьПараметр("Аванс",						Авансы);
	
	
	ЗапросРЛ.УстановитьПараметр("Организация",					Организация);
	ЗапросРЛ.УстановитьПараметр("ГоловнаяОрганизация",			ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	ЗапросРЛ.УстановитьПараметр("Работник",						ФизЛицо);
	ЗапросРЛ.УстановитьПараметр("Ссылка",						Ссылка);
	
	МассивКодыМатвыгоды = Новый Массив;
	МассивКодыМатвыгоды.Добавить(Справочники.ДоходыНДФЛ.Код99998проценты);
	МассивКодыМатвыгоды.Добавить(Справочники.ДоходыНДФЛ.Код99999товары);
	
	ЗапросРЛ.УстановитьПараметр("КодыМатвыгоды",				МассивКодыМатвыгоды);
	
	//из запроса исключаем данные по регистратору - этот документ, если документ проведен и модифицирован
	ИсключитьДанныеПоРегистратору = Проведен И Модифицированность() И ПериодНачисления <> Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца;
	
	//добавляем данные в расчетный листок из документа, если он не проведен или проведен и модифицирован
	ДобавитьДанныеИзДокумента = Модифицированность() Или Не Проведен Или ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца;
	
	Если ДобавитьДанныеИзДокумента И ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Работник",ФизЛицо);
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("ПериодРегистрации",ПериодРегистрации);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Физлицо = &Работник
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации = &ПериодРегистрации
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодНачисленияЗарплаты.ТекущийМесяц)
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Проведен
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация = &Организация";
		ДобавитьДанныеИзДокумента = Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачисленияУдержания.ВидДвижения КАК ВидДвижения,
	|	НачисленияУдержания.НомерСтроки КАК НомерСтроки,
	|	НачисленияУдержания.Сотрудник КАК Сотрудник,
	|	НачисленияУдержания.ВидРасчета КАК ВидРасчета,
	|	НачисленияУдержания.ПорядокВидаРасчета КАК ПорядокВидаРасчета,
	|	НачисленияУдержания.ПериодДействияНачало КАК ПериодДействияНачало,
	|	НачисленияУдержания.ПериодДействияКонец КАК ПериодДействияКонец,
	|	НачисленияУдержания.ОтработаноДней КАК ОтработаноДней,
	|	НачисленияУдержания.ОтработаноЧасов КАК ОтработаноЧасов,
	|	НачисленияУдержания.ОплаченоДней КАК ОплаченоДней,
	|	НачисленияУдержания.ОплаченоЧасов КАК ОплаченоЧасов,
	|	НачисленияУдержания.Начисления КАК Начисления,
	|	НачисленияУдержания.Удержания КАК Удержания,
	|	Сальдо.СуммаВзаиморасчетовНачальныйОстаток КАК СуммаВзаиморасчетовНачальныйОстаток,
	|	Сальдо.СуммаВзаиморасчетовКонечныйОстаток КАК СуммаВзаиморасчетовКонечныйОстаток,
	|	НачисленияУдержания.Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(НачисленияУдержания.Регистратор) КАК ОписаниеРегистратора
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
	|				ТОГДА 6
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ВидДвижения,
	|		ОсновныеНачисленияРаботниковОрганизации.Регистратор КАК Регистратор,
	|		ОсновныеНачисленияРаботниковОрганизации.ОбособленноеПодразделение КАК Организация,
	|		ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации КАК ПериодРегистрации,
	|		ОсновныеНачисленияРаботниковОрганизации.ФизЛицо КАК ФизЛицо,
	|		ОсновныеНачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
	|		ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Наименование + ВЫБОР
	|			КОГДА ЕСТЬNULL(ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ВидЗанятости, Значение(Перечисление.ВидыЗанятостиВОрганизации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				ТОГДА """"
	|			ИНАЧЕ "" (по внутр. совмест-ву)""
	|		КОНЕЦ КАК ВидРасчета,
	|		""А"" + ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Код КАК ПорядокВидаРасчета,
	|		ОсновныеНачисленияРаботниковОрганизации.НомерСтроки КАК НомерСтроки,
	|		ОсновныеНачисленияРаботниковОрганизации.ПериодДействияНачало КАК ПериодДействияНачало,
	|		ОсновныеНачисленияРаботниковОрганизации.ПериодДействияКонец КАК ПериодДействияКонец,
	|		ОсновныеНачисленияРаботниковОрганизации.ОтработаноДней КАК ОтработаноДней,
	|		ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов КАК ОтработаноЧасов,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|				ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОплаченоДней,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|				ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОплаченоЧасов,
	|		ОсновныеНачисленияРаботниковОрганизации.Результат КАК Начисления,
	|		0 КАК Удержания,
	|		NULL КАК ВычетНаФизлицо,
	|		NULL КАК ВычетНаДетей,
	|		NULL КАК СуммаВзаиморасчетовНачальныйОстаток,
	|		NULL КАК СуммаВзаиморасчетовКонечныйОстаток
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизации
	|	ГДЕ
	|		ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И ОсновныеНачисленияРаботниковОрганизации.ОбособленноеПодразделение = &Организация
	|		И ОсновныеНачисленияРаботниковОрганизации.ФизЛицо = &Работник";
	
	Если ИсключитьДанныеПоРегистратору Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|И ОсновныеНачисленияРаботниковОрганизации.Регистратор <> &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса+"
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
	|				ТОГДА 7
	|			ИНАЧЕ 2
	|		КОНЕЦ,
	|		ДополнительныеНачисленияРаботниковОрганизации.Регистратор,
	|		ДополнительныеНачисленияРаботниковОрганизации.ОбособленноеПодразделение,
	|		НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизации.ПериодРегистрации, МЕСЯЦ),
	|		ДополнительныеНачисленияРаботниковОрганизации.ФизЛицо,
	|		ДополнительныеНачисленияРаботниковОрганизации.Сотрудник,
	|		ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.Наименование + ВЫБОР
	|			КОГДА ЕСТЬNULL(ДополнительныеНачисленияРаботниковОрганизации.Сотрудник.ВидЗанятости, Значение(Перечисление.ВидыЗанятостиВОрганизации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				ТОГДА """"
	|			ИНАЧЕ "" (по внутр. совмест-ву)""
	|		КОНЕЦ,
	|		""Б"" + ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.Код,
	|		NULL,
	|		ДополнительныеНачисленияРаботниковОрганизации.ПериодРегистрации,
	|		ДополнительныеНачисленияРаботниковОрганизации.ПериодРегистрации,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА ДополнительныеНачисленияРаботниковОрганизации.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|				ТОГДА ДополнительныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОплаченоДней,
	|		ВЫБОР
	|			КОГДА ДополнительныеНачисленияРаботниковОрганизации.ВидУчетаВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|				ТОГДА ДополнительныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОплаченоЧасов,
	|		ДополнительныеНачисленияРаботниковОрганизации.Результат,
	|		0,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизации
	|	ГДЕ
	|		ДополнительныеНачисленияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И ДополнительныеНачисленияРаботниковОрганизации.ОбособленноеПодразделение = &Организация
	|		И ДополнительныеНачисленияРаботниковОрганизации.ФизЛицо = &Работник";
	
	Если ИсключитьДанныеПоРегистратору Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|И ДополнительныеНачисленияРаботниковОрганизации.Регистратор <> &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса+"
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		7,
	|		НДФЛСведенияОДоходах.Регистратор,
	|		НДФЛСведенияОДоходах.ОбособленноеПодразделение,
	|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ),
	|		НДФЛСведенияОДоходах.ФизЛицо,
	|		NULL,
	|		""Мат. выгода по займам (кредитам)"",
	|		""Б9"",
	|		NULL,
	|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		СУММА(НДФЛСведенияОДоходах.СуммаДохода),
	|		0,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
	|	ГДЕ
	|		НДФЛСведенияОДоходах.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И НДФЛСведенияОДоходах.КодДохода В(&КодыМатвыгоды)
	|		И НДФЛСведенияОДоходах.ИсчисленоИзЗарплаты
	|		И НДФЛСведенияОДоходах.ОбособленноеПодразделение = &Организация
	|		И НДФЛСведенияОДоходах.ФизЛицо = &Работник";
	
	Если ИсключитьДанныеПоРегистратору Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|И НДФЛСведенияОДоходах.Регистратор <> &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса+"
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НДФЛСведенияОДоходах.ОбособленноеПодразделение,
	|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ),
	|		НДФЛСведенияОДоходах.ФизЛицо,
	|		НДФЛСведенияОДоходах.Регистратор,
	|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		4,
	|		УдержанияРаботниковОрганизации.Регистратор,
	|		УдержанияРаботниковОрганизации.ОбособленноеПодразделение,
	|		УдержанияРаботниковОрганизации.ПериодРегистрации,
	|		УдержанияРаботниковОрганизации.ФизЛицо,
	|		NULL,
	|		УдержанияРаботниковОрганизации.ВидРасчета.Наименование,
	|		""А"" + УдержанияРаботниковОрганизации.ВидРасчета.Код,
	|		NULL,
	|		УдержанияРаботниковОрганизации.БазовыйПериодНачало,
	|		УдержанияРаботниковОрганизации.БазовыйПериодКонец,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		0,
	|		УдержанияРаботниковОрганизации.Результат,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрРасчета.УдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизации
	|	ГДЕ
	|		УдержанияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И УдержанияРаботниковОрганизации.ОбособленноеПодразделение = &Организация
	|		И УдержанияРаботниковОрганизации.ФизЛицо = &Работник";
	
	Если ИсключитьДанныеПоРегистратору Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|И УдержанияРаботниковОрганизации.Регистратор <> &Ссылка";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса+"
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		3,
	|		ЕСНИсчисленный.Регистратор,
	|		ЕСНИсчисленный.ОбособленноеПодразделение,
	|		НАЧАЛОПЕРИОДА(ЕСНИсчисленный.Период, МЕСЯЦ),
	|		ЕСНИсчисленный.ФизЛицо,
	|		NULL,
	|		""Пенсионный фонд исчисленный "",
	|		""Б"",
	|		NULL,
	|		НАЧАЛОПЕРИОДА(ЕСНИсчисленный.ПериодВзаиморасчетов, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ЕСНИсчисленный.ПериодВзаиморасчетов, МЕСЯЦ),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		0,
	|		СУММА(ЕСНИсчисленный.ПенсионныйФонд),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленный
	|	ГДЕ
	|		ЕСНИсчисленный.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И ЕСНИсчисленный.ОбособленноеПодразделение = &Организация
	|		И ЕСНИсчисленный.ФизЛицо = &Работник
	|		И ЕСНИсчисленный.ПенсионныйФонд <> 0";
	
	Если ИсключитьДанныеПоРегистратору Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|И ЕСНИсчисленный.Регистратор <> &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса+"
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЕСНИсчисленный.ОбособленноеПодразделение,
	|		НАЧАЛОПЕРИОДА(ЕСНИсчисленный.Период, МЕСЯЦ),
	|		НАЧАЛОПЕРИОДА(ЕСНИсчисленный.ПериодВзаиморасчетов, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ЕСНИсчисленный.ПериодВзаиморасчетов, МЕСЯЦ),
	|		ЕСНИсчисленный.ФизЛицо,
	|		ЕСНИсчисленный.Регистратор
 	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		3,
	|		НДФЛРасчетыСБюджетом.Регистратор,
	|		НДФЛРасчетыСБюджетом.ОбособленноеПодразделение,
	|		НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.Период, МЕСЯЦ),
	|		НДФЛРасчетыСБюджетом.ФизЛицо,
	|		NULL,
	|		""Подоходный налог, исчисленный "" + ВЫБОР
	|			КОГДА НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента = Значение(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|				ТОГДА ""по основной ставке""
	|			КОГДА НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента = Значение(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
	|				ТОГДА ""по дивидендам""
	|			ИНАЧЕ ""по ставке 15%""
	|		КОНЕЦ,
	|		""Б"",
	|		NULL,
	|		НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		0,
	|		СУММА(НДФЛРасчетыСБюджетом.Налог),
	|		СУММА(НДФЛРасчетыСБюджетом.ПримененныйВычетЛичный),
	|		СУММА(НДФЛРасчетыСБюджетом.ПримененныйВычетНаДетей + НДФЛРасчетыСБюджетом.ПримененныйВычетНаДетейИнвалидов),
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|	ГДЕ
	//vvv комментируем
	//|		НДФЛРасчетыСБюджетом.ВидСтроки = Значение(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Начисление)
	//|		И НДФЛРасчетыСБюджетом.ИсчисленоИзЗарплаты
	|		((НДФЛРасчетыСБюджетом.ИсчисленоИзЗарплаты И НДФЛРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Начисление)) ИЛИ (НЕ НДФЛРасчетыСБюджетом.ИсчисленоИзЗарплаты И НДФЛРасчетыСБюджетом.ВидСтроки В (ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.ВозвратНалога),ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Начисление))))
	//
	|		И НДФЛРасчетыСБюджетом.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И НДФЛРасчетыСБюджетом.ОбособленноеПодразделение = &Организация
	|		И НДФЛРасчетыСБюджетом.ФизЛицо = &Работник";
	
	Если ИсключитьДанныеПоРегистратору Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|И НДФЛРасчетыСБюджетом.Регистратор <> &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса+"
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НДФЛРасчетыСБюджетом.ОбособленноеПодразделение,
	|		НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|		НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.Период, МЕСЯЦ),
	|		НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|		НДФЛРасчетыСБюджетом.ФизЛицо,
	|		НДФЛРасчетыСБюджетом.Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		5,
	|		ПогашениеЗаймовРаботникамиОрганизаций.Регистратор,
	|		ПогашениеЗаймовРаботникамиОрганизаций.Организация,
	|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
	|		ПогашениеЗаймовРаботникамиОрганизаций.ФизЛицо,
	|		NULL,
	|		""Погашение займа"",
	|		""В"",
	|		NULL,
	|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		0,
	|		СУММА(ПогашениеЗаймовРаботникамиОрганизаций.ОсновнойДолг + ПогашениеЗаймовРаботникамиОрганизаций.Проценты),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций КАК ПогашениеЗаймовРаботникамиОрганизаций
	|	ГДЕ
	|		ПогашениеЗаймовРаботникамиОрганизаций.ВидДвижения = &Расход
	|		И ПогашениеЗаймовРаботникамиОрганизаций.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И ПогашениеЗаймовРаботникамиОрганизаций.УдержаноИзЗарплаты
	|		И ПогашениеЗаймовРаботникамиОрганизаций.Организация = &Организация
	|		И ПогашениеЗаймовРаботникамиОрганизаций.ФизЛицо = &Работник";
	
	Если ИсключитьДанныеПоРегистратору Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|И ПогашениеЗаймовРаботникамиОрганизаций.Регистратор <> &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса+"
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПогашениеЗаймовРаботникамиОрганизаций.ДоговорЗайма,
	|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
	|		ПогашениеЗаймовРаботникамиОрганизаций.Организация,
	|		ПогашениеЗаймовРаботникамиОрганизаций.ФизЛицо,
	|		ПогашениеЗаймовРаботникамиОрганизаций.Регистратор,
	|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		8,
	|		Взаиморасчеты.Регистратор,
	|		Взаиморасчеты.Организация,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ),
	|		Взаиморасчеты.Физлицо,
	|		NULL,
	|		ВЫБОР
	|			КОГДА Взаиморасчеты.СпособВыплаты = Значение(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
	|				ТОГДА ""Через кассу ""
	|			КОГДА Взаиморасчеты.СпособВыплаты = Значение(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
	|				ТОГДА ""Перечислено в банк ""
	|			ИНАЧЕ ""Способ выплаты не указан ""
	|		КОНЕЦ + ВЫБОР
	|			КОГДА Взаиморасчеты.ХарактерВыплаты В(&Аванс)
	|				ТОГДА ""(аванс)""
	|			КОГДА Взаиморасчеты.ХарактерВыплаты = Значение(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)
	|				ТОГДА ""(под расчет)""
	|			КОГДА Взаиморасчеты.ХарактерВыплаты = Значение(Перечисление.ХарактерВыплатыЗарплаты.ПустаяСсылка)
	|					И Взаиморасчеты.СуммаВзаиморасчетов > 0
	|				ТОГДА ""(не указано)""
	|			КОГДА Взаиморасчеты.ХарактерВыплаты = Значение(Перечисление.ХарактерВыплатыЗарплаты.ПустаяСсылка)
	|					И Взаиморасчеты.СуммаВзаиморасчетов < 0
	|				ТОГДА ""(погашено задолженности)""
	|			ИНАЧЕ ""(межрасчет)""
	|		КОНЕЦ,
	|		""Г"",
	|		NULL,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		0,
	|		СУММА(Взаиморасчеты.СуммаВзаиморасчетов),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК Взаиморасчеты
	|	ГДЕ
	|		Взаиморасчеты.ВидДвижения = &Расход
	|		И Взаиморасчеты.СуммаВзаиморасчетов <> 0
	|		И Взаиморасчеты.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И Взаиморасчеты.Организация = &Организация
	|		И Взаиморасчеты.Физлицо = &Работник";
	
	Если ИсключитьДанныеПоРегистратору Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|И Взаиморасчеты.Регистратор <> &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса+"
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Взаиморасчеты.Организация,
	|		Взаиморасчеты.Физлицо,
	|		ВЫБОР
	|			КОГДА Взаиморасчеты.СпособВыплаты = Значение(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
	|				ТОГДА ""Через кассу ""
	|			КОГДА Взаиморасчеты.СпособВыплаты = Значение(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
	|				ТОГДА ""Перечислено в банк ""
	|			ИНАЧЕ ""Способ выплаты не указан ""
	|		КОНЕЦ + ВЫБОР
	|			КОГДА Взаиморасчеты.ХарактерВыплаты В(&Аванс)
	|				ТОГДА ""(аванс)""
	|			КОГДА Взаиморасчеты.ХарактерВыплаты = Значение(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)
	|				ТОГДА ""(под расчет)""
	|			КОГДА Взаиморасчеты.ХарактерВыплаты = Значение(Перечисление.ХарактерВыплатыЗарплаты.ПустаяСсылка)
	|					И Взаиморасчеты.СуммаВзаиморасчетов > 0
	|				ТОГДА ""(не указано)""
	|			КОГДА Взаиморасчеты.ХарактерВыплаты = Значение(Перечисление.ХарактерВыплатыЗарплаты.ПустаяСсылка)
	|					И Взаиморасчеты.СуммаВзаиморасчетов < 0
	|				ТОГДА ""(погашено задолженности)""
	|			ИНАЧЕ ""(межрасчет)""
	|		КОНЕЦ,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ),
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
	|	    Взаиморасчеты.Регистратор) КАК НачисленияУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(Сальдо.СуммаВзаиморасчетовНачальныйОстаток) КАК СуммаВзаиморасчетовНачальныйОстаток,
	|			СУММА(Сальдо.СуммаВзаиморасчетовКонечныйОстаток) КАК СуммаВзаиморасчетовКонечныйОстаток
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.СуммаВзаиморасчетовНачальныйОстаток КАК СуммаВзаиморасчетовНачальныйОстаток,
	|				ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток КАК СуммаВзаиморасчетовКонечныйОстаток
	|			ИЗ
	|				РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.ОстаткиИОбороты(
	|					&ПериодРегистрации,
	|					&КонецПериодаРегистрации,
	|					Месяц,
	|					,
	|					Организация = &Организация
	|						И ФизЛицо = &Работник) КАК ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				НДФЛКЗачету.СуммаНДФЛКЗачетуНачальныйОстаток,
	|				НДФЛКЗачету.СуммаНДФЛКЗачетуКонечныйОстаток
	|			ИЗ
	|				РегистрНакопления.НДФЛКЗачету.ОстаткиИОбороты(
	|					&ПериодРегистрации,
	|					&КонецПериодаРегистрации,
	|					Месяц,
	|					,
	|					Организация = &Организация
	|						И ФизЛицо = &Работник) КАК НДФЛКЗачету) КАК Сальдо) КАК Сальдо
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидДвижения,
	|	ПорядокВидаРасчета,
	|	ВидРасчета,
	|	ПериодДействияНачало";
	
	ЗапросРЛ.Текст		= ТекстЗапроса;
	РезультатЗапроса	= ЗапросРЛ.Выполнить();
	
	Макет						= ПолучитьМакет("РасчетныйЛисток");
	ОбластьЗаголовокТЧ			= Макет.ПолучитьОбласть("Заголовок");
	ОбластьНачисленоУдержано	= Макет.ПолучитьОбласть("НачисленоУдержано");
	ОбластьНатурДоходыВыплаты	= Макет.ПолучитьОбласть("НатурДоходыВыплаты");
	ОбластьВсего				= Макет.ПолучитьОбласть("Всего");
	ОбластьНатуральныеДоходы	= Макет.ПолучитьОбласть("НатуральныеДоходы");
	ОбластьПодвал				= Макет.ПолучитьОбласть("Подвал");
	
	КолонкаНачислено		= 2;
	КолонкаПериодНачислено	= 3;
	КолонкаОтработаноДней	= 5;
	КолонкаОтработаноЧасов	= 6;
	КолонкаОплаченоДней		= 7;
	КолонкаОплаченоЧасов	= 8;
	КолонкаСуммаНачислено	= 9;
	КолонкаУдержано			= 11;
	КолонкаПериодУдержано	= 14;
	КолонкаСуммаУдержано	= 16;
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	НеНайденыЗаписиВЗапросе	= Истина;
	
	// В этот табличный документ будет собираться данные для РЛ
	ВременныйТабличныйДокумент = Новый ТабличныйДокумент;
	
	ФИОФизлица = Физлицо.Наименование;
	
	Если ДобавитьДанныеИзДокумента Тогда
		//к результату запроса необходимо добавить данные из табличных полей документа
		
		СтруктураПоиска    = Новый Структура("ФизЛицо",ФизЛицо);
		
		ТаблицаРезультатовЗапроса = РезультатЗапроса.Выгрузить();
		СуммаНаНачалоПериода = 0;
		СуммаНаКонецПериода = 0;
		
		Если ТаблицаРезультатовЗапроса.Количество()>0 Тогда
			СуммаНаНачалоПериода = ТаблицаРезультатовЗапроса[0].СуммаВзаиморасчетовНачальныйОстаток;
			Если НЕ ЗначениеЗаполнено(СуммаНаНачалоПериода) Тогда
				СуммаНаНачалоПериода = 0;
			КонецЕсли;
			СуммаНаКонецПериода = СуммаНаНачалоПериода;
		Иначе	
			ТЗ = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(Сальдо.СуммаВзаиморасчетовНачальныйОстаток) КАК СуммаВзаиморасчетовНачальныйОстаток,
			|	СУММА(Сальдо.СуммаВзаиморасчетовКонечныйОстаток) КАК СуммаВзаиморасчетовКонечныйОстаток
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.СуммаВзаиморасчетовНачальныйОстаток КАК СуммаВзаиморасчетовНачальныйОстаток,
			|		ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток КАК СуммаВзаиморасчетовКонечныйОстаток
			|	ИЗ
			|		РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.ОстаткиИОбороты(
			|				&ПериодРегистрации,
			|				&КонецПериодаРегистрации,
			|				,
			|				,
			|				Организация = &Организация
			|					И ФизЛицо = &Работник) КАК ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		НДФЛКЗачету.СуммаНДФЛКЗачетуНачальныйОстаток,
			|		НДФЛКЗачету.СуммаНДФЛКЗачетуКонечныйОстаток
			|	ИЗ
			|		РегистрНакопления.НДФЛКЗачету.ОстаткиИОбороты(
			|				&ПериодРегистрации,
			|				&КонецПериодаРегистрации,
			|				,
			|				,
			|				Организация = &Организация
			|					И ФизЛицо = &Работник) КАК НДФЛКЗачету) КАК Сальдо";
			
			Запрос = Новый Запрос(ТЗ);
			Запрос.УстановитьПараметр("Работник", ФизЛицо);
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
			Запрос.УстановитьПараметр("КонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() тогда
				Выборка = РезультатЗапроса.Выбрать();
				Если Выборка.Следующий() тогда
					СуммаНаНачалоПериода = ?(Выборка.СуммаВзаиморасчетовНачальныйОстаток = NULL, 0, Выборка.СуммаВзаиморасчетовНачальныйОстаток);
					СуммаНаКонецПериода = ?(Выборка.СуммаВзаиморасчетовКонечныйОстаток = NULL, 0,  Выборка.СуммаВзаиморасчетовКонечныйОстаток);
					СуммаНаКонецПериода = ?(Проведен, СуммаНаНачалоПериода, СуммаНаКонецПериода);
				Иначе
					СуммаНаНачалоПериода = 0;
					СуммаНаКонецПериода = 0;
				КонецЕсли;
			Иначе
				СуммаНаНачалоПериода = 0;
				СуммаНаКонецПериода = 0;
			КонецЕсли;
		КонецЕсли;
		
		
		ТекстПериода = Формат(ПериодРегистрации, "ДФ = 'ММММ гггг ''г.'''");
		
		// Очистим временный табличный документ
		ВременныйТабличныйДокумент.Очистить();
		
		ВременныйТабличныйДокумент.Вывести(ОбластьЗаголовокТЧ);
		ВременныйТабличныйДокумент.Вывести(ОбластьНачисленоУдержано);
		
		ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВсегоНачисления = 0; КоличествоНачислений = 0;
		ВсегоУдержания = 0; КоличествоУдержаний  = 0;
		ИтогиНачисленийИУдержанийВыведены = Ложь;
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("парамФизЛицо", Физлицо);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОсновныеНачисления.Сотрудник,
		|	ОсновныеНачисления.ВидРасчета,
		|	ОсновныеНачисления.ДатаНачала,
		|	ОсновныеНачисления.ДатаОкончания,
		|	ОсновныеНачисления.Результат,
		|	ОсновныеНачисления.ОтработаноДней,
		|	ОсновныеНачисления.ОтработаноЧасов,
		|	ОсновныеНачисления.ОплаченоДнейЧасов
		|ПОМЕСТИТЬ ВТ_ОсновныеНачисления
		|ИЗ
		|	&ОсновныеНачисления КАК ОсновныеНачисления
		|ГДЕ
		|	ОсновныеНачисления.Физлицо = &парамФизЛицо";
		
		Запрос.УстановитьПараметр("ОсновныеНачисления", Начисления);
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДополнительныеНачисления.Сотрудник,
		|	ДополнительныеНачисления.ВидРасчета,
		|	ДополнительныеНачисления.ДатаНачала,
		|	ДополнительныеНачисления.ДатаОкончания,
		|	ДополнительныеНачисления.Результат,
		|	ДополнительныеНачисления.ОплаченоДнейЧасов
		|ПОМЕСТИТЬ ВТ_ДополнительныеНачисления
		|ИЗ
		|	&ДополнительныеНачисления КАК ДополнительныеНачисления
		|ГДЕ
		|	ДополнительныеНачисления.Физлицо = &парамФизЛицо";
		
		Запрос.УстановитьПараметр("ДополнительныеНачисления", ДополнительныеНачисления);
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДоговорыНаВыполнениеРабот.Сотрудник,
		|	ДоговорыНаВыполнениеРабот.ВидРасчета,
		|	ДоговорыНаВыполнениеРабот.ДатаНачала,
		|	ДоговорыНаВыполнениеРабот.ДатаОкончания,
		|	ДоговорыНаВыполнениеРабот.Результат
		|ПОМЕСТИТЬ ВТ_ДоговорыНаВыполнениеРабот
		|ИЗ
		|	&ДоговорыНаВыполнениеРабот КАК ДоговорыНаВыполнениеРабот
		|ГДЕ
		|	ДоговорыНаВыполнениеРабот.Физлицо = &парамФизЛицо";
		
		Запрос.УстановитьПараметр("ДоговорыНаВыполнениеРабот", ДоговорыНаВыполнениеРабот);
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Удержания.Физлицо,
		|	Удержания.ВидРасчета,
		|	Удержания.ДатаНачала,
		|	Удержания.ДатаОкончания,
		|	Удержания.Результат
		|ПОМЕСТИТЬ ВТ_Удержания
		|ИЗ
		|	&Удержания КАК Удержания
		|ГДЕ
		|	Удержания.Физлицо = &парамФизЛицо";
		
		Запрос.УстановитьПараметр("Удержания", Удержания);
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПенсионныйФонд.Физлицо,
		|	ПенсионныйФонд.Налог,
		|	ПенсионныйФонд.МесяцНалоговогоПериода
		|ПОМЕСТИТЬ ВТ_ПенсионныйФонд
		|ИЗ
		|	&ПенсионныйФонд КАК ПенсионныйФонд
		|ГДЕ
		|	ПенсионныйФонд.Физлицо = &парамФизЛицо";
		
		Запрос.УстановитьПараметр("ПенсионныйФонд", ПенсионныйФонд);
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НДФЛ.Физлицо,
		|	НДФЛ.Налог,
		|	НДФЛ.МесяцНалоговогоПериода
		|ПОМЕСТИТЬ ВТ_НДФЛ
		|ИЗ
		|	&НДФЛ КАК НДФЛ
		|ГДЕ
		|	НДФЛ.Физлицо = &парамФизЛицо";
		
		Запрос.УстановитьПараметр("НДФЛ", НДФЛ);
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПогашениеЗаймов.Физлицо,
		|	ПогашениеЗаймов.ПогашеноЗайма,
		|	ПогашениеЗаймов.МатериальнаяВыгода,
		|	ПогашениеЗаймов.НалогНаМатериальнуюВыгоду,
		|	ПогашениеЗаймов.СтавкаНалогообложенияМатвыгоды
		|ПОМЕСТИТЬ ВТ_ПогашениеЗаймов
		|ИЗ
		|	&ПогашениеЗаймов КАК ПогашениеЗаймов
		|ГДЕ
		|	ПогашениеЗаймов.Физлицо = &парамФизЛицо";
		
		Запрос.УстановитьПараметр("ПогашениеЗаймов", ПогашениеЗаймов);
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();

		
		ТекстЗапросаНачисления = 
		"ВЫБРАТЬ
		|	""Начисления"" КАК Таблица,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник КАК Сотрудник,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.Наименование, ""<не указано>"") КАК ВидРасчетаНаименование,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.Код, ""Я"") КАК ВидРасчетаКод,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме, ЛОЖЬ) КАК ЯвляетсяДоходомВНатуральнойФорме,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.СпособРасчета КАК ВидРасчетаСпособРасчета,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.ВидВремени,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|			ТОГДА "" (по внутр. совмест-ву)""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ВидЗанятости,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ДатаНачала,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ДатаОкончания,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийНачисления.Результат) КАК Результат,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийНачисления.ОтработаноДней) КАК ОтработаноДней,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийНачисления.ОтработаноЧасов) КАК ОтработаноЧасов,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийНачисления.ОплаченоДнейЧасов) КАК ОплаченоДнейЧасов,
		|	NULL КАК МесяцНалоговогоПериода,
		|	NULL КАК ПогашеноЗайма,
		|	NULL КАК МатериальнаяВыгода,
		|	NULL КАК НалогНаМатериальнуюВыгоду,
		|	NULL КАК СтавкаНалогообложенияМатвыгоды
		|ИЗ
		|	ВТ_ОсновныеНачисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ДатаНачала,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ДатаОкончания,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|			ТОГДА "" (по внутр. совмест-ву)""
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.СпособРасчета,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.ВидВремени,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.Наименование, ""<не указано>""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.Код, ""Я""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме, ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ДополнительныеНачисления"",
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета.Наименование, ""<не указано>""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета.Код, ""Я""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме, ЛОЖЬ),
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета.СпособРасчета,
		|	NULL,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|			ТОГДА "" (по внутр. совмест-ву)""
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ДатаНачала,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ДатаОкончания,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Результат),
		|	0,
		|	0,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ОплаченоДнейЧасов),
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_ДополнительныеНачисления КАК НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ДатаНачала,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ДатаОкончания,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета.СпособРасчета,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|			ТОГДА "" (по внутр. совмест-ву)""
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета.Наименование, ""<не указано>""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме, ЛОЖЬ),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета.Код, ""Я"")
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ДоговорыНаВыполнениеРабот"",
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.Сотрудник,
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета.Наименование, ""<не указано>""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета.Код, ""Я""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме, ЛОЖЬ),
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета.СпособРасчета,
		|	NULL,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|			ТОГДА "" (по внутр. совмест-ву)""
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ДатаНачала,
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ДатаОкончания,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.Результат),
		|	0,
		|	0,
		|	0,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_ДоговорыНаВыполнениеРабот КАК НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ДатаОкончания,
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета,
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ДатаНачала,
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.Сотрудник,
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета.СпособРасчета,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|			ТОГДА "" (по внутр. совмест-ву)""
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета.Наименование, ""<не указано>""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме, ЛОЖЬ),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета.Код, ""Я"")
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Удержания"",
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ФизЛицо,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ВидРасчета,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийУдержания.ВидРасчета.Наименование, ""<не указано>""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийУдержания.ВидРасчета.Код, ""Я""),
		|	ЛОЖЬ,
		|	NULL,
		|	NULL,
		|	NULL,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ДатаНачала,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ДатаОкончания,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийУдержания.Результат),
		|	0,
		|	0,
		|	0,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_Удержания КАК НачислениеЗарплатыРаботникамОрганизацийУдержания
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ФизЛицо,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ВидРасчета,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ДатаНачала,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ДатаОкончания,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийУдержания.ВидРасчета.Наименование, ""<не указано>""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийУдержания.ВидРасчета.Код, ""Я"")
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ПенсионныйФонд"",
		|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.ФизЛицо,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.Налог,
		|	NULL,
		|	NULL,
		|	NULL,
		|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.МесяцНалоговогоПериода,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_ПенсионныйФонд КАК НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд
		|
		|ОБЪЕДИНИТЬ ВСЕ
        |
		|ВЫБРАТЬ
		|	""НДФЛ"",
		|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ФизЛицо,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.Налог,
		|	NULL,
		|	NULL,
		|	NULL,
		|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.МесяцНалоговогоПериода,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_НДФЛ КАК НачислениеЗарплатыРаботникамОрганизацийНДФЛ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ПогашениеЗаймов"",
		|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ФизЛицо,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ПогашеноЗайма),
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.МатериальнаяВыгода),
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.НалогНаМатериальнуюВыгоду),
		|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.СтавкаНалогообложенияМатвыгоды
		|ИЗ
		|	ВТ_ПогашениеЗаймов КАК НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.СтавкаНалогообложенияМатвыгоды,
		|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Таблица";
		
		
		Запрос.Текст = ТекстЗапросаНачисления;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("парамФизЛицо", Физлицо);
		
		ВыборкаЗапросаПоСотрудникам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Пока ВыборкаЗапросаПоСотрудникам.Следующий() Цикл
			
			Если ВыборкаЗапросаПоСотрудникам.Таблица = "Начисления" тогда
				
				ВидУчетаВремени = ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаЗапросаПоСотрудникам.ВидРасчетаСпособРасчета, ВыборкаЗапросаПоСотрудникам.ВидРасчетаВидВремени,,ВыборкаЗапросаПоСотрудникам.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени,ВыборкаЗапросаПоСотрудникам.ВидРасчета.Показатели);
				
				СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
				
				СтрокаТаблицы.ВидДвижения			= ?(ВыборкаЗапросаПоСотрудникам.ЯвляетсяДоходомВНатуральнойФорме,6,1);
				СтрокаТаблицы.ВидРасчета			= ВыборкаЗапросаПоСотрудникам.ВидРасчетаНаименование + ВыборкаЗапросаПоСотрудникам.ВидЗанятости;
				СтрокаТаблицы.ПорядокВидаРасчета	= "А" + ВыборкаЗапросаПоСотрудникам.ВидРасчетаКод;
				СтрокаТаблицы.ПериодДействияНачало	= ВыборкаЗапросаПоСотрудникам.ДатаНачала;
				СтрокаТаблицы.ПериодДействияКонец	= КонецДня(ВыборкаЗапросаПоСотрудникам.ДатаОкончания);
				СтрокаТаблицы.ОтработаноДней		= ВыборкаЗапросаПоСотрудникам.ОтработаноДней;
				СтрокаТаблицы.ОтработаноЧасов		= ВыборкаЗапросаПоСотрудникам.ОтработаноЧасов;
				СтрокаТаблицы.ОплаченоДней			= ?(ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням, ВыборкаЗапросаПоСотрудникам.ОплаченоДнейЧасов, 0);
				СтрокаТаблицы.ОплаченоЧасов			= ?(ВидУчетаВремени <> Перечисления.ВидыУчетаВремени.ПоДням, ВыборкаЗапросаПоСотрудникам.ОплаченоДнейЧасов, 0);
				СтрокаТаблицы.Начисления			= ВыборкаЗапросаПоСотрудникам.Результат;
				СтрокаТаблицы.Удержания				= 0;
				СтрокаТаблицы.Регистратор			= Неопределено;
				
			ИначеЕсли ВыборкаЗапросаПоСотрудникам.Таблица = "ДополнительныеНачисления" тогда
				
				ВидУчетаВремени = ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаЗапросаПоСотрудникам.ВидРасчетаСпособРасчета, Неопределено);
				
				СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
				
				СтрокаТаблицы.ВидДвижения			= ?(ВыборкаЗапросаПоСотрудникам.ЯвляетсяДоходомВНатуральнойФорме,7,2);
				СтрокаТаблицы.ВидРасчета			= ВыборкаЗапросаПоСотрудникам.ВидРасчетаНаименование + ВыборкаЗапросаПоСотрудникам.ВидЗанятости;
				СтрокаТаблицы.ПорядокВидаРасчета	= "А" + ВыборкаЗапросаПоСотрудникам.ВидРасчетаКод;
				СтрокаТаблицы.ПериодДействияНачало	= ПериодРегистрации;
				СтрокаТаблицы.ПериодДействияКонец	= ПериодРегистрации;
				СтрокаТаблицы.ОтработаноДней		= 0;
				СтрокаТаблицы.ОтработаноЧасов		= 0;
				СтрокаТаблицы.ОплаченоДней			= ?(ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням, ВыборкаЗапросаПоСотрудникам.ОплаченоДнейЧасов, 0);
				СтрокаТаблицы.ОплаченоЧасов			= ?(ВидУчетаВремени <> Перечисления.ВидыУчетаВремени.ПоДням, ВыборкаЗапросаПоСотрудникам.ОплаченоДнейЧасов, 0);
				СтрокаТаблицы.Начисления			= ВыборкаЗапросаПоСотрудникам.Результат;
				СтрокаТаблицы.Удержания				= 0;
				СтрокаТаблицы.Регистратор			= Неопределено;
				
			ИначеЕсли ВыборкаЗапросаПоСотрудникам.Таблица = "ДоговорыНаВыполнениеРабот" тогда
				СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
				
				СтрокаТаблицы.ВидДвижения			= ?(ВыборкаЗапросаПоСотрудникам.ЯвляетсяДоходомВНатуральнойФорме,7,2);
				СтрокаТаблицы.ВидРасчета			= ВыборкаЗапросаПоСотрудникам.ВидРасчетаНаименование;
				СтрокаТаблицы.ПорядокВидаРасчета	= "А" + ВыборкаЗапросаПоСотрудникам.ВидРасчетаКод;
				СтрокаТаблицы.ПериодДействияНачало	= ВыборкаЗапросаПоСотрудникам.ДатаНачала;
				СтрокаТаблицы.ПериодДействияКонец	= КонецДня(ВыборкаЗапросаПоСотрудникам.ДатаОкончания);
				СтрокаТаблицы.ОтработаноДней		= 0;
				СтрокаТаблицы.ОтработаноЧасов		= 0;
				СтрокаТаблицы.ОплаченоДней			= 0;
				СтрокаТаблицы.ОплаченоЧасов			= 0;
				СтрокаТаблицы.Начисления			= ВыборкаЗапросаПоСотрудникам.Результат;
				СтрокаТаблицы.Удержания				= 0;
				СтрокаТаблицы.Регистратор			= Неопределено;
				
			ИначеЕсли ВыборкаЗапросаПоСотрудникам.Таблица = "ПенсионныйФонд" тогда
				
				СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
				
				СтрокаТаблицы.ВидДвижения			= 3;
				СтрокаТаблицы.ВидРасчета			= "Пенсионный фонд исчисленный";
				СтрокаТаблицы.ПорядокВидаРасчета	= "Б";
				СтрокаТаблицы.ПериодДействияНачало	= ВыборкаЗапросаПоСотрудникам.МесяцНалоговогоПериода;
				СтрокаТаблицы.ПериодДействияКонец	= КонецДня(КонецМесяца(ВыборкаЗапросаПоСотрудникам.МесяцНалоговогоПериода));
				СтрокаТаблицы.ОтработаноДней		= 0;
				СтрокаТаблицы.ОтработаноЧасов		= 0;
				СтрокаТаблицы.ОплаченоДней			= 0;
				СтрокаТаблицы.ОплаченоЧасов			= 0;
				СтрокаТаблицы.Начисления			= 0;
				СтрокаТаблицы.Удержания				= ВыборкаЗапросаПоСотрудникам.Результат;
				СтрокаТаблицы.Регистратор			= Неопределено;
				
			ИначеЕсли ВыборкаЗапросаПоСотрудникам.Таблица = "НДФЛ" тогда
				
				СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
				
				СтрокаТаблицы.ВидДвижения			= 3;
				СтрокаТаблицы.ВидРасчета			= "Подоходный налог, исчисленный по основной ставке";   //1с-минск
				СтрокаТаблицы.ПорядокВидаРасчета	= "Б";
				СтрокаТаблицы.ПериодДействияНачало	= ВыборкаЗапросаПоСотрудникам.МесяцНалоговогоПериода;
				СтрокаТаблицы.ПериодДействияКонец	= КонецДня(КонецМесяца(ВыборкаЗапросаПоСотрудникам.МесяцНалоговогоПериода));
				СтрокаТаблицы.ОтработаноДней		= 0;
				СтрокаТаблицы.ОтработаноЧасов		= 0;
				СтрокаТаблицы.ОплаченоДней			= 0;
				СтрокаТаблицы.ОплаченоЧасов			= 0;
				СтрокаТаблицы.Начисления			= 0;
				СтрокаТаблицы.Удержания				= ВыборкаЗапросаПоСотрудникам.Результат;
				СтрокаТаблицы.Регистратор			= Неопределено;
				
	
			ИначеЕсли ВыборкаЗапросаПоСотрудникам.Таблица = "Удержания" тогда
				
				СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
				
				СтрокаТаблицы.ВидДвижения			= 4;
				СтрокаТаблицы.ВидРасчета			= ВыборкаЗапросаПоСотрудникам.ВидРасчетаНаименование;
				СтрокаТаблицы.ПорядокВидаРасчета	= "А" + ВыборкаЗапросаПоСотрудникам.ВидРасчетаКод;
				СтрокаТаблицы.ПериодДействияНачало	= ВыборкаЗапросаПоСотрудникам.ДатаНачала;
				СтрокаТаблицы.ПериодДействияКонец	= КонецДня(ВыборкаЗапросаПоСотрудникам.ДатаОкончания);
				СтрокаТаблицы.ОтработаноДней		= 0;
				СтрокаТаблицы.ОтработаноЧасов		= 0;
				СтрокаТаблицы.ОплаченоДней			= 0;
				СтрокаТаблицы.ОплаченоЧасов			= 0;
				СтрокаТаблицы.Начисления			= 0;
				СтрокаТаблицы.Удержания				= ВыборкаЗапросаПоСотрудникам.Результат;
				СтрокаТаблицы.Регистратор			= Неопределено;		
				
			ИначеЕсли ВыборкаЗапросаПоСотрудникам.Таблица = "ПогашениеЗаймов" тогда
				Если ВыборкаЗапросаПоСотрудникам.МатериальнаяВыгода <> 0 Тогда
					
					СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
					
					СтрокаТаблицы.ВидДвижения			= 7;
					СтрокаТаблицы.ВидРасчета			= "Мат. выгода по займам (кредитам)";
					СтрокаТаблицы.ПорядокВидаРасчета	= "Б9";
					СтрокаТаблицы.ПериодДействияНачало	= ПериодРегистрации;
					СтрокаТаблицы.ПериодДействияКонец	= КонецДня(КонецМесяца(ПериодРегистрации));
					СтрокаТаблицы.ОтработаноДней		= 0;
					СтрокаТаблицы.ОтработаноЧасов		= 0;
					СтрокаТаблицы.ОплаченоДней			= 0;
					СтрокаТаблицы.ОплаченоЧасов			= 0;
					СтрокаТаблицы.Начисления			= ВыборкаЗапросаПоСотрудникам.МатериальнаяВыгода;
					СтрокаТаблицы.Удержания				= 0;
					СтрокаТаблицы.Регистратор			= Неопределено;
					
				КонецЕсли;
				
				СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
				
				СтрокаТаблицы.ВидДвижения			= 5;
				СтрокаТаблицы.ВидРасчета			= "Погашение займа";
				СтрокаТаблицы.ПорядокВидаРасчета	= "В";
				СтрокаТаблицы.ПериодДействияНачало	= ПериодРегистрации;
				СтрокаТаблицы.ПериодДействияКонец	= КонецДня(КонецМесяца(ПериодРегистрации));
				СтрокаТаблицы.ОтработаноДней		= 0;
				СтрокаТаблицы.ОтработаноЧасов		= 0;
				СтрокаТаблицы.ОплаченоДней			= 0;
				СтрокаТаблицы.ОплаченоЧасов			= 0;
				СтрокаТаблицы.Начисления			= 0;
				СтрокаТаблицы.Удержания				= ВыборкаЗапросаПоСотрудникам.ПогашеноЗайма;
				СтрокаТаблицы.Регистратор			= Неопределено;
				
				Если ВыборкаЗапросаПоСотрудникам.НалогНаМатериальнуюВыгоду <> 0 и ВыборкаЗапросаПоСотрудникам.СтавкаНалогообложенияМатвыгоды = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35 Тогда
					
					СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
					
					СтрокаТаблицы.ВидДвижения			= 5;
					СтрокаТаблицы.ВидРасчета			= "Подоходный налог исчисленный по ставке 20%";
					СтрокаТаблицы.ПорядокВидаРасчета	= "Б";
					СтрокаТаблицы.ПериодДействияНачало	= ПериодРегистрации;
					СтрокаТаблицы.ПериодДействияКонец	= КонецДня(КонецМесяца(ПериодРегистрации));
					СтрокаТаблицы.ОтработаноДней		= 0;
					СтрокаТаблицы.ОтработаноЧасов		= 0;
					СтрокаТаблицы.ОплаченоДней			= 0;
					СтрокаТаблицы.ОплаченоЧасов			= 0;
					СтрокаТаблицы.Начисления			= 0;
					СтрокаТаблицы.Удержания				= ВыборкаЗапросаПоСотрудникам.НалогНаМатериальнуюВыгоду;
					СтрокаТаблицы.Регистратор			= Неопределено;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		ТаблицаРезультатовЗапроса.Сортировать("ВидДвижения, ПорядокВидаРасчета, ВидРасчета, ПериодДействияНачало"); 
		
		Для Каждого СтрокаТаблицы Из ТаблицаРезультатовЗапроса Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодДействияКонец) Тогда
				ДатаОкончанияПериода = СтрокаТаблицы.ПериодДействияКонец
			Иначе
				ДатаОкончанияПериода = КонецМесяца(СтрокаТаблицы.ПериодДействияНачало);
			КонецЕсли;
			
			Если СтрокаТаблицы.ВидДвижения < 3 Тогда
				НомерСтроки = ВысотаТаблицы + КоличествоНачислений;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Текст = СтрокаТаблицы.ВидРасчета;
				
				Если СтрокаТаблицы.Регистратор <> Неопределено Тогда
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Примечание.Текст = СтрокаТаблицы.ОписаниеРегистратора;
				КонецЕсли;
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).Текст = ОбщегоНазначения.ОписаниеПериода(СтрокаТаблицы.ПериодДействияНачало, ДатаОкончанияПериода);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаОтработаноДней - 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноДней).Текст	= СтрокаТаблицы.ОтработаноДней;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноЧасов).Текст	= СтрокаТаблицы.ОтработаноЧасов;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоДней).Текст		= СтрокаТаблицы.ОплаченоДней;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоЧасов).Текст		= СтрокаТаблицы.ОплаченоЧасов;
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).Текст = Формат(СтрокаТаблицы.Начисления,"ЧЦ=15; ЧДЦ=2");
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаУдержано - 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;				
				
				КоличествоНачислений = КоличествоНачислений + 1;
				ВсегоНачисления = ВсегоНачисления + СтрокаТаблицы.Начисления;
				СуммаНаКонецПериода = СуммаНаКонецПериода + СтрокаТаблицы.Начисления;
				
			ИначеЕсли СтрокаТаблицы.ВидДвижения < 6 Тогда
				
				НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = СтрокаТаблицы.ВидРасчета;
				
				Если СтрокаТаблицы.Регистратор <> Неопределено Тогда
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Примечание.Текст = СтрокаТаблицы.ОписаниеРегистратора;
				КонецЕсли;
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = ОбщегоНазначения.ОписаниеПериода(СтрокаТаблицы.ПериодДействияНачало, ДатаОкончанияПериода);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(СтрокаТаблицы.Удержания,"ЧЦ=15; ЧДЦ=2");
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;
				
				КоличествоУдержаний = КоличествоУдержаний + 1;
				ВсегоУдержания = ВсегоУдержания + СтрокаТаблицы.Удержания;
				СуммаНаКонецПериода = СуммаНаКонецПериода - СтрокаТаблицы.Удержания;
				
			Иначе
				
				// подведем итоги раздела начислений и удержаний
				// начнем раздел доходов в натуральной форме и выплат
				Если Не ИтогиНачисленийИУдержанийВыведены Тогда
					
					КолвоРасчетов = Макс(КоличествоНачислений,КоличествоУдержаний);
					
					Если КолвоРасчетов > 0 Тогда
						РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент,ВысотаТаблицы,КолвоРасчетов)
					КонецЕсли; 
					
					ОбластьВсего.Параметры.ВсегоНачисления = ВсегоНачисления;
					ОбластьВсего.Параметры.ВсегоУдержания  = ВсегоУдержания;
					
					ВременныйТабличныйДокумент.Вывести(ОбластьВсего);
					ИтогиНачисленийИУдержанийВыведены = Не ИтогиНачисленийИУдержанийВыведены;
					
					ВременныйТабличныйДокумент.Вывести(ОбластьНатурДоходыВыплаты);
					ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы + 1;
					ВсегоНачисления = 0; КоличествоНачислений = 0;
					ВсегоУдержания = 0; КоличествоУдержаний  = 0;
					
				КонецЕсли;
				
				Если СтрокаТаблицы.ВидДвижения < 8 Тогда
					
					НомерСтроки = ВысотаТаблицы + КоличествоНачислений;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Текст = СтрокаТаблицы.ВидРасчета;
					
					Если СтрокаТаблицы.Регистратор <> Неопределено Тогда
						ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Примечание.Текст = СтрокаТаблицы.ОписаниеРегистратора;
					КонецЕсли;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).Текст = ОбщегоНазначения.ОписаниеПериода(СтрокаТаблицы.ПериодДействияНачало, ДатаОкончанияПериода);
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаОтработаноДней - 1).Объединить();
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноДней).Текст	= СтрокаТаблицы.ОтработаноДней;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноЧасов).Текст	= СтрокаТаблицы.ОтработаноЧасов;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоДней).Текст		= СтрокаТаблицы.ОплаченоДней;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоЧасов).Текст		= СтрокаТаблицы.ОплаченоЧасов;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).Текст = Формат(СтрокаТаблицы.Начисления,"ЧЦ=15; ЧДЦ=2");
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаУдержано - 1).Объединить();
					
					КоличествоНачислений = КоличествоНачислений + 1;
					ВсегоНачисления = ВсегоНачисления + СтрокаТаблицы.Начисления;
					//СуммаНаКонецПериода = СуммаНаКонецПериода + СтрокаТаблицы.Начисления;
					
				Иначе // остались выплаты
					
					НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = СтрокаТаблицы.ВидРасчета;
					
					Если СтрокаТаблицы.Регистратор <> Неопределено Тогда
						ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Примечание.Текст = СтрокаТаблицы.ОписаниеРегистратора;
					КонецЕсли;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = ОбщегоНазначения.ОписаниеПериода(СтрокаТаблицы.ПериодДействияНачало, ДатаОкончанияПериода);
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(СтрокаТаблицы.Удержания,"ЧЦ=15; ЧДЦ=2");
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
					
					КоличествоУдержаний = КоличествоУдержаний + 1;
					ВсегоУдержания = ВсегоУдержания + СтрокаТаблицы.Удержания;
					СуммаНаКонецПериода = СуммаНаКонецПериода - СтрокаТаблицы.Удержания;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// расчертим линиями низ расчетного листками
		КолвоРасчетов = Макс(КоличествоНачислений,КоличествоУдержаний);
		
		Если КолвоРасчетов > 0 Тогда
			РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент,ВысотаТаблицы,КолвоРасчетов)
		КонецЕсли;
		
		Если Не ИтогиНачисленийИУдержанийВыведены Тогда // есть только начисления и удержания
			ОбластьВсего.Параметры.ВсегоНачисления = ВсегоНачисления;
			ОбластьВсего.Параметры.ВсегоУдержания  = ВсегоУдержания;
			ВременныйТабличныйДокумент.Вывести(ОбластьВсего);
			
		ИначеЕсли КолвоРасчетов > 0 Тогда  // остались итоги по натуральным доходам и выплатам
			ОбластьНатуральныеДоходы.Параметры.ВсегоНачисления = ВсегоНачисления;
			ОбластьНатуральныеДоходы.Параметры.ВсегоУдержания  = ВсегоУдержания;
			ВременныйТабличныйДокумент.Вывести(ОбластьНатуральныеДоходы);
			
		КонецЕсли;
		
		Если СуммаНаНачалоПериода >= 0  Тогда
			ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = "Долг за организацией на начало месяца: ";
			ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = СуммаНаНачалоПериода;
		Иначе
			ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = "Долг за работником на начало месяца: ";
			ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = 0 - СуммаНаНачалоПериода;
		КонецЕсли;
		
		Если СуммаНаКонецПериода >= 0  Тогда
			ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за организацией на конец месяца: ";
			ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = СуммаНаКонецПериода;
		Иначе
			ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за работником на конец месяца: ";
			ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = 0 - СуммаНаКонецПериода;
		КонецЕсли;
		
		ВременныйТабличныйДокумент.Вывести(ОбластьПодвал);
		
	Иначе //выводим в отчет только данные запроса
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 0 Тогда
			//нет данных в запросе
			Возврат ВременныйТабличныйДокумент;	
		КонецЕсли;
		
		ТекстПериода = Формат(ПериодРегистрации, "ДФ = 'ММММ гггг ''г.'''");
		
		// Очистим временный табличный документ
		ВременныйТабличныйДокумент.Очистить();
		
		ВременныйТабличныйДокумент.Вывести(ОбластьЗаголовокТЧ);
		ВременныйТабличныйДокумент.Вывести(ОбластьНачисленоУдержано);
		
		ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВсегоНачисления = 0; КоличествоНачислений = 0;
		ВсегоУдержания = 0; КоличествоУдержаний  = 0;
		ИтогиНачисленийИУдержанийВыведены = Ложь;
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ПериодДействияКонец) Тогда
				ДатаОкончанияПериода = Выборка.ПериодДействияКонец;
				
			Иначе
				ДатаОкончанияПериода = КонецМесяца(Выборка.ПериодДействияНачало);
				
			КонецЕсли;
			
			Если Выборка.ВидДвижения < 3 Тогда
				НомерСтроки = ВысотаТаблицы + КоличествоНачислений;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Текст = Выборка.ВидРасчета;
				Если Выборка.Регистратор <> Ссылка Тогда
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Примечание.Текст = Выборка.Регистратор;
				КонецЕсли;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).Текст = ОбщегоНазначения.ОписаниеПериода(Выборка.ПериодДействияНачало, ДатаОкончанияПериода);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаОтработаноДней - 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноДней).Текст	= Выборка.ОтработаноДней;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноЧасов).Текст	= Выборка.ОтработаноЧасов;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоДней).Текст		= Выборка.ОплаченоДней;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоЧасов).Текст		= Выборка.ОплаченоЧасов;
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).Текст = Формат(Выборка.Начисления,"ЧЦ=15; ЧДЦ=2");
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаУдержано - 1).Объединить();
				
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;
				
				
				КоличествоНачислений = КоличествоНачислений + 1;
				ВсегоНачисления = ВсегоНачисления + Выборка.Начисления;
				
			ИначеЕсли Выборка.ВидДвижения < 6 Тогда
				
				НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = Выборка.ВидРасчета;
				Если Выборка.Регистратор <> Ссылка Тогда
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Примечание.Текст = Выборка.Регистратор;
				КонецЕсли;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = ОбщегоНазначения.ОписаниеПериода(Выборка.ПериодДействияНачало, ДатаОкончанияПериода);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(Выборка.Удержания,"ЧЦ=15; ЧДЦ=2");
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;								
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;
				
				КоличествоУдержаний = КоличествоУдержаний + 1;
				ВсегоУдержания = ВсегоУдержания + Выборка.Удержания;
				
			Иначе
				
				// подведем итоги раздела начислений и удержаний
				// начнем раздел доходов в натуральной форме и выплат
				Если Не ИтогиНачисленийИУдержанийВыведены Тогда
					
					КолвоРасчетов = Макс(КоличествоНачислений,КоличествоУдержаний);
					
					Если КолвоРасчетов > 0 Тогда
						РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент,ВысотаТаблицы,КолвоРасчетов)
					КонецЕсли;
					
					ОбластьВсего.Параметры.ВсегоНачисления = ВсегоНачисления;
					ОбластьВсего.Параметры.ВсегоУдержания  = ВсегоУдержания;
					
					ВременныйТабличныйДокумент.Вывести(ОбластьВсего);
					ИтогиНачисленийИУдержанийВыведены = Не ИтогиНачисленийИУдержанийВыведены;
					
					ВременныйТабличныйДокумент.Вывести(ОбластьНатурДоходыВыплаты);
					ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы + 1;
					ВсегоНачисления = 0; КоличествоНачислений = 0;
					ВсегоУдержания = 0; КоличествоУдержаний  = 0;
					
				КонецЕсли;
				
				Если Выборка.ВидДвижения < 8 Тогда
					
					НомерСтроки = ВысотаТаблицы + КоличествоНачислений;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Текст = Выборка.ВидРасчета;
					Если Выборка.Регистратор <> Ссылка Тогда
						ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Примечание.Текст = Выборка.Регистратор;
					КонецЕсли;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).Текст = ОбщегоНазначения.ОписаниеПериода(Выборка.ПериодДействияНачало, ДатаОкончанияПериода);
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаОтработаноДней - 1).Объединить();
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноДней).Текст	= Выборка.ОтработаноДней;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноЧасов).Текст	= Выборка.ОтработаноЧасов;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоДней).Текст		= Выборка.ОплаченоДней;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоЧасов).Текст		= Выборка.ОплаченоЧасов;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).Текст = Формат(Выборка.Начисления,"ЧЦ=15; ЧДЦ=2");
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаУдержано - 1).Объединить();
					
					КоличествоНачислений = КоличествоНачислений + 1;
					ВсегоНачисления = ВсегоНачисления + Выборка.Начисления;
					
				Иначе // остались выплаты
					
					НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = Выборка.ВидРасчета;
					Если Выборка.Регистратор <> Ссылка Тогда
						ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Примечание.Текст = Выборка.Регистратор;
					КонецЕсли;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = ОбщегоНазначения.ОписаниеПериода(Выборка.ПериодДействияНачало, ДатаОкончанияПериода);
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(Выборка.Удержания,"ЧЦ=15; ЧДЦ=2");
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
					
					КоличествоУдержаний = КоличествоУдержаний + 1;
					ВсегоУдержания = ВсегоУдержания + Выборка.Удержания;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Данные для подвала
		СуммаНаНачалоПериода = Выборка.СуммаВзаиморасчетовНачальныйОстаток;
		СуммаНаКонецПериода  = Выборка.СуммаВзаиморасчетовКонечныйОстаток;
		
		// расчертим линиями низ расчетного листками
		КолвоРасчетов = Макс(КоличествоНачислений,КоличествоУдержаний);
		
		Если КолвоРасчетов > 0 Тогда
			РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент,ВысотаТаблицы,КолвоРасчетов)
		КонецЕсли;
		
		Если Не ИтогиНачисленийИУдержанийВыведены Тогда // есть только начисления и удержания
			ОбластьВсего.Параметры.ВсегоНачисления = ВсегоНачисления;
			ОбластьВсего.Параметры.ВсегоУдержания  = ВсегоУдержания;
			ВременныйТабличныйДокумент.Вывести(ОбластьВсего);
		ИначеЕсли КолвоРасчетов > 0 Тогда  // остались итоги по натуральным доходам и выплатам
			ОбластьНатуральныеДоходы.Параметры.ВсегоНачисления = ВсегоНачисления;
			ОбластьНатуральныеДоходы.Параметры.ВсегоУдержания  = ВсегоУдержания;
			ВременныйТабличныйДокумент.Вывести(ОбластьНатуральныеДоходы);
		КонецЕсли;
		
		Если СуммаНаНачалоПериода = NULL Тогда
			
			ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = "Долг за организацией на начало месяца: ";
			ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = 0;
			
		Иначе
			
			Если СуммаНаНачалоПериода >= 0  Тогда
				ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = "Долг за организацией на начало месяца: ";
				ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = СуммаНаНачалоПериода;
			Иначе
				ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = "Долг за работником на начало месяца: ";
				ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = 0 - СуммаНаНачалоПериода;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СуммаНаКонецПериода = NULL Тогда
			
			ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за работником на конец месяца: ";
			ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = 0;
			
		Иначе
			
			Если СуммаНаКонецПериода >= 0  Тогда
				ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за организацией на конец месяца: ";
				ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = СуммаНаКонецПериода;
			Иначе
				ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за работником на конец месяца: ";
				ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = 0 - СуммаНаКонецПериода;
			КонецЕсли;
			
		КонецЕсли;
		
		ВременныйТабличныйДокумент.Вывести(ОбластьПодвал);
		
	КонецЕсли;
	
	Возврат ВременныйТабличныйДокумент;
	
КонецФункции //ЗаполнитьТаблицуРасчетногоЛистка()
	
#КонецЕсли

// Выполняет автоматическое заполнение документа по данным документа и переданным параметрам
// 
// Параметры: 
//	ПостроительЗапроса - построитель запроса, который используется для ограничения состава физлиц
//						 по которым выполняется заполнение документа
//
// Возвращаемое значение:
//	Логическое - удалось ли выполнить автоматическое заполнение документа
//
Функция Автозаполнение(Запрос = Неопределено) Экспорт
	
	Начисления.Очистить();
	ДополнительныеНачисления.Очистить();
	НДФЛ.Очистить();
	ПенсионныйФонд.Очистить();
	Удержания.Очистить();
	ПогашениеЗаймов.Очистить();
	
	Возврат ВыполнитьАвтозаполнение(ПериодНачисленияДатаНачала, ПериодНачисленияДатаОкончания, Запрос);
	
КонецФункции // Автозаполнение()

Функция ПолучитьДокументыРасчетаЗаВесьМесяц() Экспорт

	Если ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца Тогда
		 // проверим, можно ли произвести расчет - поищем "мешающие" документы
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("ПериодРегистрации",ПериодРегистрации);
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСписокСотрудников
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка) КАК Представление
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокСотрудников КАК СписокСотрудников
		|		ПО НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник = СписокСотрудников.Сотрудник
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации = &ПериодРегистрации
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодНачисленияЗарплаты.ТекущийМесяц)
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка <> &Ссылка
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ 
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка)
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокСотрудников КАК СписокСотрудников
		|		ПО НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник = СписокСотрудников.Сотрудник
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка.ПериодРегистрации = &ПериодРегистрации
		|	И НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка.ПериодНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодНачисленияЗарплаты.ТекущийМесяц)
		|	И НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка <> &Ссылка
		|	И НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка.Проведен";

		Возврат Запрос.Выполнить().Выгрузить();
	Иначе
		Возврат Новый Массив
	КонецЕсли;
	
КонецФункции
//vvv
Функция ДеноминироватьПоказателиВидаРасчета(Строка) Экспорт
	
	СписокОбрабатываемыхПоказателей=ОбщегоНазначения.ПолучитьСписокОбрабатываемыхПоказателей();
	СведенияОВидеРасчета=РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(Новый Соответствие, Строка.ВидРасчета, "ПриРасчете");
			
	Для СчПоказателей = 1 По СведенияОВидеРасчета["КоличествоПоказателей"] Цикл				
				
		Наименование=СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"];				
						
		Если СписокОбрабатываемыхПоказателей.НайтиПоЗначению(Наименование)<>Неопределено ТОгда		
			Строка["Показатель"+СчПоказателей]=ОбщегоНазначения.ОкруглитьПоВалюте(Строка["Показатель"+СчПоказателей]/10000,Константы.ВалютаРегламентированногоУчета.Получить());
		КонецЕсли;
		
	КонецЦикла;
			
КонецФункции
//
// Заполняет документ-исправление по переданному списку сотрудников
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Знач Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
	
	// выполним заполнение по всем табличным частям документа
	// и получим список сотрудников для перезаполнения
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	//vvv
	Запрос.УстановитьПараметр("ДатаДеноминации",ОбщегоНазначения.ПолучитьДатуДеноминации());
	//
	Запрос.УстановитьПараметр("ПоВсемСотрудникам", Сотрудники = Неопределено);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если Сотрудники = "ПоДаннымПерерасчета" Тогда
		
		Исправления = ПроведениеРасчетов.ПолучитьДокументИсправление(ПерерассчитываемыйДокумент, "КритерийОтбора"); 
		Запрос.УстановитьПараметр("Исправления", Исправления);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиИсправлений
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка В(&Исправления)
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Сторно
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.СторнируемыйДокумент = &ПерерассчитываемыйДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка В(&Исправления)
		|	И НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сторно
		|	И НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.СторнируемыйДокумент = &ПерерассчитываемыйДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.Сотрудник
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.Ссылка В(&Исправления)
		|	И НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.Сторно
		|	И НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.СторнируемыйДокумент = &ПерерассчитываемыйДокумент
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизаций.Сотрудник,
		|	СотрудникиОрганизаций.Физлицо КАК Физлицо
		|ПОМЕСТИТЬ ВТФизлицаПерерасчета
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &ПерерассчитываемыйДокумент
		|	И СотрудникиОрганизаций.Физлицо В
		|			(ВЫБРАТЬ
		|				Перерасчет.ФизЛицо
		|			ИЗ
		|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|			ГДЕ
		|				Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент
		|		
		|			ОБЪЕДИНИТЬ ВСЕ
		|		
		|			ВЫБРАТЬ
		|				ЗаполнениеПлановыхНачислений.Сотрудник.Физлицо
		|			ИЗ
		|				РегистрСведений.ЗаполнениеПлановыхНачислений КАК ЗаполнениеПлановыхНачислений
		|			ГДЕ
		|				ЗаполнениеПлановыхНачислений.ОбъектЗаполнения = &ПерерассчитываемыйДокумент)
		|	И (НЕ СотрудникиОрганизаций.Сотрудник В
		|				(ВЫБРАТЬ
		|					Начисления.Сотрудник
		|				ИЗ
		|					ВТСотрудникиИсправлений КАК Начисления))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизаций.Сотрудник,
		|	СотрудникиОрганизаций.Физлицо
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &ПерерассчитываемыйДокумент
		|	И СотрудникиОрганизаций.Физлицо В
		|			(ВЫБРАТЬ
		|				Перерасчет.ФизЛицо
		|			ИЗ
		|				РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
		|			ГДЕ
		|				Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент
		|		
		|			ОБЪЕДИНИТЬ ВСЕ
		|		
		|			ВЫБРАТЬ
		|				ЗаполнениеПлановыхНачислений.Сотрудник.Физлицо
		|			ИЗ
		|				РегистрСведений.ЗаполнениеПлановыхНачислений КАК ЗаполнениеПлановыхНачислений
		|			ГДЕ
		|				ЗаполнениеПлановыхНачислений.ОбъектЗаполнения = &ПерерассчитываемыйДокумент)
		|	И (НЕ СотрудникиОрганизаций.Сотрудник В
		|				(ВЫБРАТЬ
		|					Начисления.Сотрудник
		|				ИЗ
		|					ВТСотрудникиИсправлений КАК Начисления))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо";
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Сотрудник
		|ИЗ
		|	ВТФизлицаПерерасчета КАК СотрудникиОрганизаций";
		Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		
	ИначеЕсли Сотрудники <> Неопределено Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизаций.Физлицо КАК Физлицо
		|ПОМЕСТИТЬ ВТФизлицаПерерасчета
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка В(&Сотрудники)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо";
		Запрос.Выполнить();
		
	Иначе 
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НЕОПРЕДЕЛЕНО КАК Физлицо
		|ПОМЕСТИТЬ ВТФизлицаПерерасчета";
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	Начисления.ПодразделениеОрганизации,
	//vvv
	|	Начисления.Должность,
	//|	-Начисления.Результат - ЕСТЬNULL(СУММА(СторноНачисления.Результат), 0) КАК Результат,
	|	-Начисления.Результат / ВЫБОР КОГДА Начисления.Ссылка.ПериодРегистрации<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ - ЕСТЬNULL(СУММА(СторноНачисления.Результат), 0) КАК Результат,
	//
	|	-Начисления.ОплаченоДнейЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОплаченоДнейЧасов), 0) КАК ОплаченоДнейЧасов,
	|	-Начисления.ОтработаноДней - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДней), 0) КАК ОтработаноДней,
	|	-Начисления.ОтработаноЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасов), 0) КАК ОтработаноЧасов,
	|	-Начисления.ОтработаноДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДнейПоПятидневке), 0) КАК ОтработаноДнейПоПятидневке,
	|	-Начисления.ОтработаноЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасовПоПятидневке), 0) КАК ОтработаноЧасовПоПятидневке,
	|	-Начисления.НормаДней - ЕСТЬNULL(СУММА(СторноНачисления.НормаДней), 0) КАК НормаДней,
	|	-Начисления.НормаЧасов - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасов), 0) КАК НормаЧасов,
	|	-Начисления.НормаДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаДнейПоПятидневке), 0) КАК НормаДнейПоПятидневке,
	|	-Начисления.НормаЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасовПоПятидневке), 0) КАК НормаЧасовПоПятидневке,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	Начисления.ДатаНачалаСобытия,
	|	ИСТИНА КАК Сторно,
	|	&ПерерассчитываемыйДокумент КАК СторнируемыйДокумент
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК СторноНачисления
	|		ПО Начисления.Сотрудник = СторноНачисления.Сотрудник
	|			И Начисления.ВидРасчета = СторноНачисления.ВидРасчета
	|			И (СторноНачисления.ПериодДействияНачало МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
	|			И (СторноНачисления.ПериодДействияКонец МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
	|			И (СторноНачисления.ПериодРегистрации > Начисления.Ссылка.ПериодРегистрации)
	|			И (СторноНачисления.ПериодРегистрации <= &ПериодРегистрации)
	|			И (СторноНачисления.СторнируемыйДокумент = Начисления.Ссылка)
	|			И (СторноНачисления.Сторно)
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Начисления.Сторно)
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Начисления.Сотрудник В (&Сотрудники))
	|	И Начисления.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	Начисления.ПодразделениеОрганизации,
	//vvv
	|	Начисления.Должность,
	|	Начисления.Ссылка,
	//
	|	Начисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	Начисления.ДатаНачалаСобытия,
	|	Начисления.Результат,
	|	Начисления.ОплаченоДнейЧасов,
	|	Начисления.ОтработаноДней,
	|	Начисления.ОтработаноЧасов,
	|	Начисления.ОтработаноДнейПоПятидневке,
	|	Начисления.ОтработаноЧасовПоПятидневке,
	|	Начисления.НормаДней,
	|	Начисления.НормаЧасов,
	|	Начисления.НормаДнейПоПятидневке,
	|	Начисления.НормаЧасовПоПятидневке";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Сотрудники = Новый Массив;
	Пока Выборка.Следующий() Цикл
		// сторно-строка
		//vvv комментируем
		//ЗаполнитьЗначенияСвойств(Начисления.Добавить(), Выборка);
		НоваяСтрока=Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если Выборка.ДатаНачалаСобытия<ОбщегоНазначения.ПолучитьДатуДеноминации() ТОгда
			ДеноминироватьПоказателиВидаРасчета(НоваяСтрока);
		КонецЕсли;			
		//
		Если Сотрудники.Найти(Выборка.Сотрудник) = Неопределено Тогда
			Сотрудники.Добавить(Выборка.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	// выполним запрос к ДополнительныеНачисления
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	-Начисления.Результат КАК Результат,
	|	Начисления.ПодразделениеОрганизации,
	//vvv
	|	Начисления.Должность,
	//
	|	Начисления.КодВычета,
	|	-Начисления.СуммаВычета КАК СуммаВычета,
	|	ИСТИНА КАК Сторно,
	|	&ПерерассчитываемыйДокумент КАК СторнируемыйДокумент,
	|	Начисления.ДатаНачалаСобытия,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	-Начисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Начисления.Сторно)
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Начисления.Сотрудник В (&Сотрудники))
	|	И Начисления.Ссылка.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// сторно-строка
		ЗаполнитьЗначенияСвойств(ДополнительныеНачисления.Добавить(), Выборка);
		Если Сотрудники.Найти(Выборка.Сотрудник) = Неопределено Тогда
			Сотрудники.Добавить(Выборка.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	// выполним запрос к ДоговорыНаВыполнениеРабот
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДоговорыНаВыполнениеРабот.Сотрудник,
	|	ДоговорыНаВыполнениеРабот.Физлицо,
	|	ДоговорыНаВыполнениеРабот.ВидРасчета,
	|	ДоговорыНаВыполнениеРабот.ДатаНачала,
	|	ДоговорыНаВыполнениеРабот.ДатаОкончания,
	|	ДоговорыНаВыполнениеРабот.Размер,
	|	ДоговорыНаВыполнениеРабот.ПодразделениеОрганизации,
	|	ДоговорыНаВыполнениеРабот.КодВычета,
	|	-ДоговорыНаВыполнениеРабот.СуммаВычета КАК СуммаВычета,
	|	-ДоговорыНаВыполнениеРабот.Результат КАК Результат,
	|	ИСТИНА КАК Сторно,
	|	&ПерерассчитываемыйДокумент КАК СторнируемыйДокумент,
	|	ДоговорыНаВыполнениеРабот.ДокументОснование
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК ДоговорыНаВыполнениеРабот
	|ГДЕ
	|	ДоговорыНаВыполнениеРабот.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ ДоговорыНаВыполнениеРабот.Сторно)
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Сотрудник В (&Сотрудники))
	|	И ДоговорыНаВыполнениеРабот.Ссылка.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// сторно-строка
		ЗаполнитьЗначенияСвойств(ДоговорыНаВыполнениеРабот.Добавить(), Выборка);
		Если Сотрудники.Найти(Выборка.Сотрудник) = Неопределено Тогда
			Сотрудники.Добавить(Выборка.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	// выполним запрос к Удержания
	//vvv комментируем, т.к. для Удержаний действует зависимость от базы по периоду РЕГИСТРАЦИИ, поэтому
	//перерасчет будем делать в текущем периоде
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Удержания.ФизЛицо,
	//|	Удержания.ВидРасчета,
	//|	Удержания.Показатель1,
	//|	Удержания.Показатель2,
	//|	Удержания.Показатель3,
	//|	Удержания.Показатель4,
	//|	Удержания.Показатель5,
	//|	Удержания.Показатель6,
	//|	Удержания.ДатаНачала,
	//|	Удержания.ДатаОкончания,
	//|	Удержания.ДокументОснование,
	//|	-Удержания.Результат КАК Результат,
	//|	ИСТИНА КАК Сторно,
	//|	Удержания.ПериодРасчетаСреднегоЗаработкаНачало,
	//|	Удержания.ПериодРасчетаСреднегоЗаработкаОкончание,
	//|	Удержания.ДатаНачалаСобытия
	//|ИЗ
	//|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК Удержания
	//|ГДЕ
	//|	Удержания.Ссылка = &ПерерассчитываемыйДокумент
	//|	И (НЕ Удержания.Сторно)
	//|	И (&ПоВсемСотрудникам
	//|			ИЛИ Удержания.ФизЛицо В
	//|				(ВЫБРАТЬ
	//|					Физлица.Физлицо
	//|				ИЗ
	//|					ВТФизлицаПерерасчета КАК Физлица))
	//|	И Удержания.Ссылка.Проведен";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	// сторно-строка
	//	ЗаполнитьЗначенияСвойств(Удержания.Добавить(), Выборка);
	//КонецЦикла;
	
	// выполним запрос к ПогашениеЗаймов
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Займы.ФизЛицо,
	|	ИСТИНА КАК Сторно,
	|	Займы.ДоговорЗайма,
	|	Займы.СтавкаНалогообложенияМатвыгоды,
	|	Займы.ПодразделениеОрганизации,
	|	-Займы.НачисленоПроцентов КАК НачисленоПроцентов,
	|	-Займы.ПогашеноПроцентов КАК ПогашеноПроцентов,
	|	-Займы.ПогашеноЗайма КАК ПогашеноЗайма,
	|	-Займы.МатериальнаяВыгода КАК МатериальнаяВыгода,
	|	-Займы.НалогНаМатериальнуюВыгоду КАК НалогНаМатериальнуюВыгоду
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК Займы
	|ГДЕ
	|	Займы.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Займы.Сторно)
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Займы.ФизЛицо В
	|				(ВЫБРАТЬ
	|					Физлица.Физлицо
	|				ИЗ
	|					ВТФизлицаПерерасчета КАК Физлица))
	|	И Займы.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Займы.ФизЛицо,
	|	ЛОЖЬ,
	|	Займы.ДоговорЗайма,
	|	Займы.СтавкаНалогообложенияМатвыгоды,
	|	Займы.ПодразделениеОрганизации,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК Займы
	|ГДЕ
	|	Займы.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Займы.Сторно)
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Займы.ФизЛицо В
	|				(ВЫБРАТЬ
	|					Физлица.Физлицо
	|				ИЗ
	|					ВТФизлицаПерерасчета КАК Физлица))
	|	И Займы.Ссылка.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// сторно-строка
		ЗаполнитьЗначенияСвойств(ПогашениеЗаймов.Добавить(), Выборка);
	КонецЦикла;
	
	ЗапросПериод = Новый Запрос;
	ЗапросПериод.Текст =
	"ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникамОрганизаций.ПериодНачисленияДатаНачала,
	|	НачислениеЗарплатыРаботникамОрганизаций.ПериодНачисленияДатаОкончания,
	|	НачислениеЗарплатыРаботникамОрганизаций.Организация,
	|	НачислениеЗарплатыРаботникамОрганизаций.ПодразделениеОрганизации,
	|	НачислениеЗарплатыРаботникамОрганизаций.ВидОперации
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций КАК НачислениеЗарплатыРаботникамОрганизаций
	|ГДЕ
	|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка = &ПерерассчитываемыйДокумент";
	
	ЗапросПериод.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	Выборка = ЗапросПериод.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПрошлыйПериод;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,Выборка);
	
	ВыполнитьАвтозаполнение(Выборка.ПериодНачисленияДатаНачала, Выборка.ПериодНачисленияДатаОкончания, , Истина, , Сотрудники);
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

// Процедура выполняет автозаполнение табличных частей только по переданным сотрудникам,
// остальные строки табличных частей документа остаются нетронутыми.
//
// Параметры: МассивСотрудников -  Массив сотрудников организации, по которым нужно сделать перезаполнение документа.
Процедура ВыполнитьПерезаполнениеПоВыбраннымСотрудникам(МассивСотрудников, МассивФизЛиц) Экспорт
	
	// сохраним табличные данные в таблицы значений
	ТаблицаНачисления = Начисления.Выгрузить();
	ТаблицаДополнительныеНачисления = ДополнительныеНачисления.Выгрузить();
	ТаблицаДоговорыНаВыполнениеРабот = ДоговорыНаВыполнениеРабот.Выгрузить();
	ТаблицаУдержания = Удержания.Выгрузить();
	ТаблицаНДФЛ = НДФЛ.Выгрузить();
	ТаблицаПогашениеЗаймов = ПогашениеЗаймов.Выгрузить();
	// Удалим из таблиц сотрудников которых нужно перезаполнить.
	
	// Удаляем из таблицы начисления
	ИндексСтроки = ТаблицаНачисления.Количество()-1;
	Пока ИндексСтроки >= 0 Цикл
		Если МассивСотрудников.Найти(ТаблицаНачисления[ИндексСтроки].Сотрудник) <> Неопределено Тогда
			ТаблицаНачисления.Удалить(ИндексСтроки);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
	
	// Удаляем из таблицы дополнительные начисления
	ИндексСтроки = ТаблицаДополнительныеНачисления.Количество() - 1;
	Пока ИндексСтроки >=0 Цикл
		Если МассивСотрудников.Найти(ТаблицаДополнительныеНачисления[ИндексСтроки].Сотрудник) <> Неопределено Тогда
			ТаблицаДополнительныеНачисления.Удалить(ИндексСтроки);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
	
	// Удаляем из таблицы договоры на выполнение работ
	ИндексСтроки = ТаблицаДоговорыНаВыполнениеРабот.Количество() - 1;
	Пока ИндексСтроки >=0 Цикл
		Если МассивСотрудников.Найти(ТаблицаДоговорыНаВыполнениеРабот[ИндексСтроки].Сотрудник) <> Неопределено Тогда
			ТаблицаДоговорыНаВыполнениеРабот.Удалить(ИндексСтроки);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
	
	// Удаляем из таблицы Удержания.
	ИндексСтроки = ТаблицаУдержания.Количество() - 1;
	Пока ИндексСтроки >=0 Цикл
		Если МассивФизЛиц.Найти(ТаблицаУдержания[ИндексСтроки].ФизЛицо) <> Неопределено Тогда
			ТаблицаУдержания.Удалить(ИндексСтроки);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
	
	// Удаляем из таблицы НДФЛ
	ИндексСтроки = ТаблицаНДФЛ.Количество() - 1;
	Пока ИндексСтроки >=0 Цикл
		Если МассивФизЛиц.Найти(ТаблицаНДФЛ[ИндексСтроки].ФизЛицо) <> Неопределено Тогда
			ТаблицаНДФЛ.Удалить(ИндексСтроки);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;

	// Удаляем из таблицы Погашение Займов
	ИндексСтроки = ТаблицаПогашениеЗаймов.Количество() - 1;
	Пока ИндексСтроки >=0 Цикл
		Если МассивФизЛиц.Найти(ТаблицаПогашениеЗаймов[ИндексСтроки].ФизЛицо) <> Неопределено Тогда
			ТаблицаПогашениеЗаймов.Удалить(ИндексСтроки);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;

	//Очищаем таблицы документа
	Начисления.Очистить();
	ДополнительныеНачисления.Очистить();
	НДФЛ.Очистить();
	Удержания.Очистить();
	ПогашениеЗаймов.Очистить();
	
	// Выполняем автозаполенение и расчет
	ВыполнитьАвтоЗаполнение(ПериодНачисленияДатаНачала,ПериодНачисленияДатаОкончания,,,,МассивСотрудников);
	Записать();
	РассчитатьВсе();
	
	//Добавляем в документ сотрудников из временных таблиц значений
	ДописатьСтрокиИзТаблицыВТаблицу(ТаблицаНачисления, Начисления);
	ДописатьСтрокиИзТаблицыВТаблицу(ТаблицаДополнительныеНачисления, ДополнительныеНачисления);
	ДописатьСтрокиИзТаблицыВТаблицу(ТаблицаНДФЛ, НДФЛ);
	ДописатьСтрокиИзТаблицыВТаблицу(ТаблицаУдержания, Удержания);
	ДописатьСтрокиИзТаблицыВТаблицу(ТаблицаПогашениеЗаймов, ПогашениеЗаймов);
	Если Проведен Тогда
		Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		Записать();
	КонецЕсли;
	
	// удалять записи о перезаполнении из регистра не будем - они были удалены при автозаполнении
	
КонецПроцедуры // ВыполнитьПерезаполнениеПоВыбраннымСотрудникам()

// Процедура выполняет автозаполнение табличных частей только по переданным сотрудникам,
// остальные строки табличных частей документа остаются нетронутыми.
//
// Параметры: МассивСотрудников -  Массив сотрудников организации, по которым нужно сделать перезаполнение документа.
Процедура ВыполнитьПерезаполнениеДокумента(МассивСотрудников, МассивФизЛиц) Экспорт
	
	// сохраним табличные данные в таблицы значений
	ТаблицаНачисления = Начисления.Выгрузить();
	ТаблицаДополнительныеНачисления = ДополнительныеНачисления.Выгрузить();
	ТаблицаДоговорыНаВыполнениеРабот = ДоговорыНаВыполнениеРабот.Выгрузить();
	ТаблицаУдержания = Удержания.Выгрузить();
	ТаблицаНДФЛ = НДФЛ.Выгрузить();
	ТаблицаПогашениеЗаймов = ПогашениеЗаймов.Выгрузить();
	// Удалим из таблиц сотрудников которых нужно перезаполнить.
	
	// Удаляем из таблицы начисления
	ИндексСтроки = ТаблицаНачисления.Количество()-1;
	Пока ИндексСтроки >= 0 Цикл
		Если МассивСотрудников.Найти(ТаблицаНачисления[ИндексСтроки].Сотрудник) <> Неопределено Тогда
			ТаблицаНачисления.Удалить(ИндексСтроки);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
	
	// Удаляем из таблицы дополнительные начисления
	ИндексСтроки = ТаблицаДополнительныеНачисления.Количество() - 1;
	Пока ИндексСтроки >=0 Цикл
		Если МассивСотрудников.Найти(ТаблицаДополнительныеНачисления[ИндексСтроки].Сотрудник) <> Неопределено Тогда
			ТаблицаДополнительныеНачисления.Удалить(ИндексСтроки);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
	
	// Удаляем из таблицы договоры на выполнение работ
	ИндексСтроки = ТаблицаДоговорыНаВыполнениеРабот.Количество() - 1;
	Пока ИндексСтроки >=0 Цикл
		Если МассивСотрудников.Найти(ТаблицаДоговорыНаВыполнениеРабот[ИндексСтроки].Сотрудник) <> Неопределено Тогда
			ТаблицаДоговорыНаВыполнениеРабот.Удалить(ИндексСтроки);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
	
	// Удаляем из таблицы Удержания.
	ИндексСтроки = ТаблицаУдержания.Количество() - 1;
	Пока ИндексСтроки >=0 Цикл
		Если МассивФизЛиц.Найти(ТаблицаУдержания[ИндексСтроки].ФизЛицо) <> Неопределено Тогда
			ТаблицаУдержания.Удалить(ИндексСтроки);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
	
	// Удаляем из таблицы НДФЛ
	ИндексСтроки = ТаблицаНДФЛ.Количество() - 1;
	Пока ИндексСтроки >=0 Цикл
		Если МассивФизЛиц.Найти(ТаблицаНДФЛ[ИндексСтроки].ФизЛицо) <> Неопределено Тогда
			ТаблицаНДФЛ.Удалить(ИндексСтроки);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;

	// Удаляем из таблицы Погашение Займов
	ИндексСтроки = ТаблицаПогашениеЗаймов.Количество() - 1;
	Пока ИндексСтроки >=0 Цикл
		Если МассивФизЛиц.Найти(ТаблицаПогашениеЗаймов[ИндексСтроки].ФизЛицо) <> Неопределено Тогда
			ТаблицаПогашениеЗаймов.Удалить(ИндексСтроки);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;

	//Очищаем таблицы документа
	Начисления.Очистить();
	ДополнительныеНачисления.Очистить();
	НДФЛ.Очистить();
	Удержания.Очистить();
	ПогашениеЗаймов.Очистить();
	
	// Выполняем автозаполенение и расчет
	ВыполнитьАвтоЗаполнение(ПериодНачисленияДатаНачала,ПериодНачисленияДатаОкончания,,,,МассивСотрудников);
	Записать();
	РассчитатьВсе();
	
	//Добавляем в документ сотрудников из временных таблиц значений
	ДописатьСтрокиИзТаблицыВТаблицу(ТаблицаНачисления, Начисления);
	ДописатьСтрокиИзТаблицыВТаблицу(ТаблицаДополнительныеНачисления, ДополнительныеНачисления);
	ДописатьСтрокиИзТаблицыВТаблицу(ТаблицаНДФЛ, НДФЛ);
	ДописатьСтрокиИзТаблицыВТаблицу(ТаблицаУдержания, Удержания);
	ДописатьСтрокиИзТаблицыВТаблицу(ТаблицаПогашениеЗаймов, ПогашениеЗаймов);
	Если Проведен Тогда
		Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		Записать();
	КонецЕсли;
	
	// удалять записи о перезаполнении из регистра не будем - они были удалены при автозаполнении
	
КонецПроцедуры // ВыполнитьПерезаполнениеПоВыбраннымСотрудникам()


// Процедура рассчитывает ресурсы для начислений
// и заполняет реквизит Результат соотвтествующих табличных частей документа
//
Функция РассчитатьНачисления(ВыборкаПоШапкеДокумента = Неопределено, ВыборкаПоНачислениям = Неопределено, ВыборкаПоДопНачислениям = Неопределено, Физлицо = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	Перем ВалютаУпрУчета;
	Перем КурсВалютыУпрУчета;
	
	//массивы для хранения индексов строк табличных частей,
	//используются для расчета по одному сотруднику
	Если Физлицо = Неопределено Тогда
		МассивИндексыСтрокНачисления = Неопределено;
		МассивИндексыСтрокДополнительныеНачисления = Неопределено;
	Иначе
		МассивИндексыСтрокНачисления = Новый Массив();
		МассивИндексыСтрокДополнительныеНачисления = Новый Массив();
	КонецЕсли;

	Отказ = Ложь;
	
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		
		// Перечитаем объект и соберем данные для заполнения наборов записей регистров
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		// позиционируем выборку
		ВыборкаПоШапкеДокумента.Следующий();
		ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
		ВыборкаПоДопНачислениям = СформироватьЗапросПоДопНачисления(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;

	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
		
	НаборДопНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборДопНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	НаборРасчетСреднего = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборРасчетСреднего.Отбор.Регистратор.Значение = Ссылка;
	
	ЗаписиДоходовНДФЛ = РегистрыНакопления.НДФЛСведенияОДоходах.СоздатьНаборЗаписей();
	ЗаписиДоходовНДФЛ.Отбор.Регистратор.Значение = Ссылка;
	
	// Если встретим почасовое отклонение, то записываем движения в регистр РабочееВремяРаботниковОрганизаций
	НаборЗаписейРабочееВремя = РегистрыНакопления.РабочееВремяРаботниковОрганизаций.СоздатьНаборЗаписей();	
	НаборЗаписейРабочееВремя.Отбор.Регистратор.Значение = Ссылка;

	Пока ВыборкаПоНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, НаборОсновныеНачисления);
			ДобавитьСтрокуРабочегоВремени(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, НаборЗаписейРабочееВремя);
			
			Если НЕ (Физлицо = Неопределено)  Тогда
				МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	//мСоответствиеДоходовИВычетов = ПроведениеРасчетов.ПолучитьСоответствиеДоходовИВычетов();
	Пока ВыборкаПоДопНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиДопНачисления(ВыборкаПоДопНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуДопНачислений(ВыборкаПоДопНачислениям, ВыборкаПоШапкеДокумента, НаборДопНачисления);
			
			Если НЕ Физлицо = Неопределено Тогда
				МассивИндексыСтрокДополнительныеНачисления.Добавить(ВыборкаПоДопНачислениям.НомерСтроки-1);
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

	Если Отказ Тогда
		
		// Удаляем движения
		Для Каждого Набор Из Движения Цикл
			//vvv комментируем
			//Если ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") 
			//	или ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") 
			//	или ТипЗнч(Набор)=Тип("РегистрНакопленияНаборЗаписей.РабочееВремяРаботниковОрганизаций") 
			//	или ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.РасчетСреднегоЗаработка") Тогда
			//	
			//	// Удаляем движения
			//	Набор.Очистить();
			//	Набор.Записать();
			//КонецЕсли;
			Если ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
				
				// Удаляем движения
				Набор.Очистить();
				Набор.Записать(Истина, Ложь, Истина, Ложь);
				
			ИначеЕсли ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") 
				или ТипЗнч(Набор)=Тип("РегистрНакопленияНаборЗаписей.РабочееВремяРаботниковОрганизаций") 
				или ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.РасчетСреднегоЗаработка") Тогда
				
				// Удаляем движения
				Набор.Очистить();
				Набор.Записать();
				
			КонецЕсли;
			//
		КонецЦикла;
		
		Возврат Не Отказ;
	КонецЕсли;
	
	//vvv комментируем, вставим ниже
	//НаборЗаписейРабочееВремя.Записать();
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = ПроведениеРасчетов.ПолучитьТаблицуСторноЗаписей(НаборОсновныеНачисления.ПолучитьДополнение());
	ИндексПоследнейСтроки = ВыборкаПоШапкеДокумента.НачисленияКоличествоСтрок;
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		// Заполним записи в наборе записей регистра
		// и в табличной части
		ДобавитьСтрокуСторно(НаборОсновныеНачисления, Начисления, СтрокаСторно);
		Если Не Физлицо = Неопределено Тогда
			//добавим в массив строк новые строки сторно
			МассивИндексыСтрокНачисления.Добавить(ИндексПоследнейСтроки);
			//индекс начинается с нуля, а номер строки с 1
			ИндексПоследнейСтроки = ИндексПоследнейСтроки +1;
		КонецЕсли;
	КонецЦикла;
	
	// Поддержка способа расчета ДоначислениеПоУправленческомуУчету
	СведенияОДоначислениях = Новый Соответствие;
	// категория начисления в которой встречены виды расчета со способом ДоначислениеПоУправленческомуУчету 
	КатегорияДоначисления = Неопределено;
	ПроведениеРасчетов.ПолучитьКурсВалютыУпрУчета(ПериодРегистрации, ВалютаУпрУчета, КурсВалютыУпрУчета, Константы.ВалютаРегламентированногоУчета.Получить());
	
	// нужен ли расчет Основных начислений при повторном расчете
	НеобходимРасчетОсновных = Истина;
	//vvv
	НачатьТранзакцию();
	НаборЗаписейРабочееВремя.Записать();
	//
	
	// максимальное число циклов расчета доначислений
	ЧислоЦиклов = 4;
	Для Счетчик = 1 По ЧислоЦиклов Цикл
	
		Если НеобходимРасчетОсновных Тогда
			// рассчитываем записи
			// при этом передаем не только набор записей регистра расчета, но и набор записей регисра 
			// накопления со сведениями об отработанном времени
			ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, ЗаписиДоходовНДФЛ, НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, Начисления, Ложь, ?(Счетчик = 1, Ложь, Истина), КатегорияДоначисления, СведенияОДоначислениях, КурсВалютыУпрУчета, МассивИндексыСтрокНачисления, Физлицо, КомментироватьРасчет);
			Если КатегорияДоначисления = Неопределено Тогда
				НеобходимРасчетОсновных = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// запишем результат расчета для расчета доп. начислений
		НаборОсновныеНачисления.Записать(Истина, Истина);
		
		Если Счетчик > 1 и НеобходимРасчетОсновных Тогда
			// если это повторный расчет и при этом выполняется расчет основных начислений
			// то не ограничиваем расчет доп. начислений определенной категорией
			ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДопНачисления, ЗаписиДоходовНДФЛ, НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, ДополнительныеНачисления, Ложь,?(Счетчик = 1, Ложь, Истина), Неопределено, СведенияОДоначислениях, КурсВалютыУпрУчета, МассивИндексыСтрокДополнительныеНачисления, Физлицо, КомментироватьРасчет);
		Иначе
			ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДопНачисления, ЗаписиДоходовНДФЛ, НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, ДополнительныеНачисления, Ложь,?(Счетчик = 1, Ложь, Истина), КатегорияДоначисления, СведенияОДоначислениях, КурсВалютыУпрУчета, МассивИндексыСтрокДополнительныеНачисления, Физлицо, КомментироватьРасчет);
		КонецЕсли;
		Если КатегорияДоначисления = Неопределено и Не НеобходимРасчетОсновных Тогда
			// не нашлось доначислений
			Прервать;
		КонецЕсли;
		
		ЗаписиДоходовНДФЛ.Очистить();
		ЗаписиДоходовНДФЛ.Записать();
		
		// проверка правильности доначислений
		Физлица = ПроведениеРасчетов.ФизлицаТребующиеПересчета(СведенияОДоначислениях);
		Если Физлица.Количество() = 0 Тогда
			Прервать;
		Иначе
			// не "сошлись" данные по некоторым физлицам
			Если Счетчик = ЧислоЦиклов Тогда
				Для Каждого Элемент Из Физлица Цикл
					ОбщегоНазначения.ОшибкаРасчета("" + Элемент + ": Неточно выполнен расчет - не совпадают начисления по управленческому и регламентированному учету!");
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//ПроведениеРасчетов.СкорректироватьНормируемыеВычетыПоНДФЛ(ЭтотОбъект);	
	
	Если КомментироватьРасчет Тогда
		// Удаляем движения, но для комментировани ярасчета НДФЛ оставляем движения по начислениям
		Для Каждого Набор Из Движения Цикл
			Если ТипЗнч(Набор)=Тип("РегистрНакопленияНаборЗаписей.РабочееВремяРаботниковОрганизаций") 
				или ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.РасчетСреднегоЗаработка") Тогда
				
				// Удаляем движения
				Набор.Очистить();
				Набор.Записать();
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		// Удаляем движения
		Для Каждого Набор Из Движения Цикл
			Если ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") 
				или ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") 
				или ТипЗнч(Набор)=Тип("РегистрНакопленияНаборЗаписей.РабочееВремяРаботниковОрганизаций") 
				или ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.РасчетСреднегоЗаработка") Тогда
				
				// Удаляем движения
				//vvv добавляем условие				
				//Набор.Очистить();
				//Набор.Записать();
				Если ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда						
					Набор.Очистить();
					Набор.Записать(Истина, Ложь, Истина, Ложь);
				Иначе
					Набор.Очистить();
					Набор.Записать();
				КонецЕсли;
				//
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//vvv
	ЗафиксироватьТранзакцию();
	//
	Возврат Не Отказ;
	
КонецФункции // РассчитатьНачисления()

// Процедура рассчитывает НДФЛ
// и заполняет реквизиты табличной части
//
Процедура РассчитатьНДФЛ(Физлицо = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	Отказ = Ложь;
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
	КонецЦикла;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// сформируем и запишем доходы НДФЛ по начислениям документа
	НаборНДФЛСведенияОДоходах = РегистрыНакопления.НДФЛСведенияОДоходах.СоздатьНаборЗаписей();
	НаборНДФЛСведенияОДоходах.Отбор.Регистратор.Значение = Ссылка;
	НаборНДФЛСведенияОДоходах.Очистить();
	
	СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, НаборНДФЛСведенияОДоходах); // по начислениям
	СформироватьДоходыПоМатвыгодеПоЗаймам(ВыборкаПоШапкеДокумента, НаборНДФЛСведенияОДоходах); // матвыгода по заемным средствам
	
	//vvv
	НачатьТранзакцию();
	//
	// запишем доходы НДФЛ по начислениям документа
	НаборНДФЛСведенияОДоходах.Записать();
		
	// Составим текст запроса для выбора списка физлиц, по которым надо считать НДФЛ
	Если НЕ (Физлицо = Неопределено) Тогда
		СписокФизлицТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Работники.Физлицо КАК Физлицо
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК Работники
		|
		|ГДЕ
		|	Работники.Ссылка = &парамРегистратор и Работники.Физлицо = &парамФизлицо";
		
		ДополнительныеПараметрыЗапросаНДФЛ  = Новый Структура;
		ДополнительныеПараметрыЗапросаНДФЛ.Вставить("парамФизлицо", Физлицо);
	Иначе
		СписокФизлицТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Работники.Физлицо КАК Физлицо
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК Работники
		|
		|ГДЕ
		|	Работники.Ссылка = &парамРегистратор";
		
		ДополнительныеПараметрыЗапросаНДФЛ  = Неопределено;
	КонецЕсли;
	
	// получение результата НДФЛ по ставке 13 процентов
	// для него передается Организация, период и ссылка на регистратор
	ВыборкаПодразделений = "";
	ДанныеНДФЛ = ПроведениеРасчетов.ПолучитьДанныеНДФЛПоРегистратору(Неопределено, Неопределено, ПериодРегистрации, Организация, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, Ссылка, СписокФизлицТекст, ДополнительныеПараметрыЗапросаНДФЛ, , КомментироватьРасчет, ВыборкаПодразделений);
	Если ДанныеНДФЛ <> Неопределено Тогда
		Если НЕ (Физлицо = Неопределено) Тогда
			// считаем одно физлицо
			ФизлицаСписок = Новый СписокЗначений;
			ФизлицаСписок.Добавить(Физлицо);
		Иначе
			// считаем всех
			ФизлицаСписок = НеОпределено;
		КонецЕсли;
		ЗаполнитьНаборЗаписейПоДаннымНДФЛ(, ДанныеНДФЛ, ВыборкаПоШапкеДокумента, ,ФизлицаСписок, КомментироватьРасчет, ВыборкаПодразделений);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Беларусь", Справочники.КлассификаторСтранМира.БЕЛАРУСЬ);
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", Организация);
	Запрос.УстановитьПараметр("парамСтавка9", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка9);
	Запрос.УстановитьПараметр("парамСтавка09", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09);
	Запрос.УстановитьПараметр("парамСтавка35", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35);
	Запрос.УстановитьПараметр("парамСтавка40", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка40);
	Запрос.УстановитьПараметр("парамСтавкаРезидента9", ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка9));
	Запрос.УстановитьПараметр("парамСтавкаРезидента09", ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09));
	Запрос.УстановитьПараметр("парамСтавкаРезидента35", ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35));
	Запрос.УстановитьПараметр("парамСтавкаРезидента40", ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка40));

	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамКонецМесяцаНалоговогоПериода", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамНачалоГода", НачалоГода(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамКонецГода", КонецГода(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамВидСтрокиНачисление", Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление);
	Запрос.УстановитьПараметр("парамВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамПустаяДата" , '00010101');
	Запрос.УстановитьПараметр("парамСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустойКодДохода" , Справочники.ДоходыНДФЛ.ПустаяСсылка());
	
	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапросаНДФЛ <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапросаНДФЛ Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Запрос.Текст = СписокФизлицТекст;
	// Ранее расчитанные налоги
	РанееНачисленныеНалогиТекст = 
	"ВЫБРАТЬ
	|	РасчетыСБюджетом.ФизЛицо,
	|	Сумма(ВЫБОР КОГДА РасчетыСБюджетом.СтавкаНалогообложенияРезидента = &парамСтавка9 ТОГДА РасчетыСБюджетом.Налог ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке9,
	|	Сумма(ВЫБОР КОГДА РасчетыСБюджетом.СтавкаНалогообложенияРезидента = &парамСтавка09 ТОГДА РасчетыСБюджетом.Налог ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке09,
	|	Сумма(ВЫБОР КОГДА РасчетыСБюджетом.СтавкаНалогообложенияРезидента = &парамСтавка35 ТОГДА РасчетыСБюджетом.Налог ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке35,
	|	Сумма(ВЫБОР КОГДА РасчетыСБюджетом.СтавкаНалогообложенияРезидента = &парамСтавка40 ТОГДА РасчетыСБюджетом.Налог ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке40
	|ИЗ
	|	РегистрНакопления.НДФЛРасчетыСБюджетом КАК РасчетыСБюджетом
	|
	|ГДЕ
	|	РасчетыСБюджетом.Организация = &парамГоловнаяОрганизация И
	|	РасчетыСБюджетом.Период <= &парамКонецМесяцаНалоговогоПериода И //парамПериодРегистрации И
	|	(РасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &парамНачалоГода И &парамКонецМесяцаНалоговогоПериода ИЛИ РасчетыСБюджетом.МесяцНалоговогоПериода = &парамКонецМесяцаНалоговогоПериода) И
	|	РасчетыСБюджетом.Регистратор <> &парамРегистратор И
	|	РасчетыСБюджетом.ВидДвижения = &парамВидДвиженияПриход И
	|	РасчетыСБюджетом.ФизЛицо В(" + СписокФизЛицТекст + ") И
	|	РасчетыСБюджетом.ВидСтроки = &парамВидСтрокиНачисление
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСБюджетом.ФизЛицо";
	 
	// Составим текст запроса для выбора списка физлиц, по которым надо считать НДФЛ (исключим нерезидентов)
	СписокФизлицРезидентовТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрганизации.ФизЛицо
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонецГода) КАК НеРезиденты
	|		ПО НеРезиденты.ФизЛицо = ТЧРаботникиОрганизации.ФизЛицо
	|
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &парамРегистратор И
	|	(((НеРезиденты.ФизЛицо) ЕСТЬ NULL ) ИЛИ ((НеРезиденты.Страна)=&Беларусь))
	|	И ТЧРаботникиОрганизации.ФизЛицо В(" + СписокФизЛицТекст + ")";
	
	Запрос.Текст = СписокФизлицРезидентовТекст;
	// НачислениеНалоговТекст
	НачислениеНалоговТекст = 
	"ВЫБРАТЬ
	|	НДФЛОбороты.ФизЛицо КАК ФизЛицо,
	|	Сумма(ВЫБОР КОГДА КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка9 ТОГДА (НДФЛОбороты.СуммаДоходаОборот-НДФЛОбороты.СуммаВычетаОборот)*&парамСтавкаРезидента9/100 ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке9,
	|	Сумма(ВЫБОР КОГДА КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка09 ТОГДА (НДФЛОбороты.СуммаДоходаОборот-НДФЛОбороты.СуммаВычетаОборот)*&парамСтавкаРезидента09/100 ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке09,
	|	Сумма(ВЫБОР КОГДА КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка35 ТОГДА (НДФЛОбороты.СуммаДоходаОборот-НДФЛОбороты.СуммаВычетаОборот)*&парамСтавкаРезидента35/100 ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке35,
	|	Сумма(ВЫБОР КОГДА КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка40 ТОГДА (НДФЛОбороты.СуммаДоходаОборот-НДФЛОбороты.СуммаВычетаОборот)*&парамСтавкаРезидента40/100 ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке40
	|ИЗ
	|	РегистрНакопления.НДФЛСведенияОДоходах.Обороты(&парамНачалоГода, &парамКонецМесяцаНалоговогоПериода, Месяц, ПериодРегистрации <= &парамПериодРегистрации И Организация = &парамГоловнаяОрганизация И ВЫБОР КОГДА Физлицо В (" + СписокФизлицРезидентовТекст + ") ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК НДФЛОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛОбороты.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалогиПоСтавкам.Физлицо,
	|	Сумма(НалогиПоСтавкам.Налог9) КАК НалогПоСтавке9,
	|	Сумма(НалогиПоСтавкам.Налог09) КАК НалогПоСтавке09,
	|	Сумма(НалогиПоСтавкам.Налог35) КАК НалогПоСтавке35,
	|	Сумма(НалогиПоСтавкам.Налог40) КАК НалогПоСтавке40
	|ИЗ
	|(ВЫБРАТЬ
	|	Доходы.Физлицо,
	|	ВЫБОР КОГДА Доходы.КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка9 ТОГДА СУММА(Доходы.СуммаДохода)*&парамСтавкаРезидента9/100 ИНАЧЕ 0 КОНЕЦ КАК Налог9,
	|	ВЫБОР КОГДА Доходы.КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка09 ТОГДА СУММА(Доходы.СуммаДохода)*&парамСтавкаРезидента09/100 ИНАЧЕ 0 КОНЕЦ КАК Налог09,
	|	ВЫБОР КОГДА Доходы.КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка35 ТОГДА СУММА(Доходы.СуммаДохода)*&парамСтавкаРезидента35/100 ИНАЧЕ 0 КОНЕЦ КАК Налог35,
	|	ВЫБОР КОГДА Доходы.КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка40 ТОГДА СУММА(Доходы.СуммаДохода)*&парамСтавкаРезидента40/100 ИНАЧЕ 0 КОНЕЦ КАК Налог40
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основные.Физлицо КАК Физлицо,
	|		Основные.ВидРасчета.КодДоходаНДФЛ КАК КодДохода,
	|		Основные.ДатаНачала КАК Период,
	|		Основные.Результат КАК СуммаДохода
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Основные
	|	
	|	ГДЕ
	|		Основные.Ссылка = &парамСсылка И
	|		Основные.ВидРасчета.КодДоходаНДФЛ <> &парамПустойКодДохода И
	|		(Основные.Результат <> 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Дополнительные.Физлицо,
	|		Дополнительные.ВидРасчета.КодДоходаНДФЛ,
	|		ВЫБОР КОГДА Дополнительные.ДатаНачала = &парамПустаяДата ТОГДА Дополнительные.Ссылка.ПериодРегистрации ИНАЧЕ Дополнительные.ДатаНачала КОНЕЦ,
	|		Дополнительные.Результат
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК Дополнительные
	|	
	|	ГДЕ
	|		Дополнительные.Ссылка = &парамСсылка И
	|		Дополнительные.ВидРасчета.КодДоходаНДФЛ <> &парамПустойКодДохода И
	|		(Дополнительные.Результат <> 0)) КАК Доходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.Физлицо,
	|	Доходы.КодДохода,
	|	Доходы.Период) КАК НалогиПоСтавкам
	|
	|СГРУППИРОВАТЬ ПО
	|	НалогиПоСтавкам.ФизЛицо";
	
	НачислениеНалоговТекст1 = 
	"ВЫБРАТЬ
	|	НДФЛОбороты.ФизЛицо КАК ФизЛицо,
	|	Сумма(ВЫБОР КОГДА КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка9 ТОГДА (НДФЛОбороты.СуммаДоходаОборот-НДФЛОбороты.СуммаВычетаОборот)*&парамСтавкаРезидента9/100 ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке9,
	|	Сумма(ВЫБОР КОГДА КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка09 ТОГДА (НДФЛОбороты.СуммаДоходаОборот-НДФЛОбороты.СуммаВычетаОборот)*&парамСтавкаРезидента09/100 ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке09,
	|	Сумма(ВЫБОР КОГДА КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка35 ТОГДА (НДФЛОбороты.СуммаДоходаОборот-НДФЛОбороты.СуммаВычетаОборот)*&парамСтавкаРезидента35/100 ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке35,
	|	Сумма(ВЫБОР КОГДА КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка40 ТОГДА (НДФЛОбороты.СуммаДоходаОборот-НДФЛОбороты.СуммаВычетаОборот)*&парамСтавкаРезидента40/100 ИНАЧЕ 0 КОНЕЦ) КАК НалогПоСтавке40
	|ИЗ
	|	РегистрНакопления.НДФЛСведенияОДоходах.Обороты(&парамНачалоГода, &парамКонецМесяцаНалоговогоПериода, Месяц, ПериодРегистрации <= &парамПериодРегистрации И Организация = &парамГоловнаяОрганизация И ВЫБОР КОГДА Физлицо В (" + СписокФизлицРезидентовТекст + ") ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК НДФЛОбороты
	|ГДЕ
	|	НДФЛОбороты.ФизЛицо В(" + СписокФизЛицТекст + ")
	|СГРУППИРОВАТЬ ПО
	|	НДФЛОбороты.ФизЛицо";
	
	Запрос.Текст = НачислениеНалоговТекст1;

	//Запрос.Текст = НачислениеНалоговТекст;
	// Объединение запросов
	НалогиТекст = 
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА НЕ НачисленныеНалоги.ФизЛицо ЕСТЬ NULL ТОГДА НачисленныеНалоги.ФизЛицо ИНАЧЕ РанееНачислено.ФизЛицо КОНЕЦ КАК ФизЛицо,
	|	ВЫБОР КОГДА НЕ НачисленныеНалоги.ФизЛицо ЕСТЬ NULL ТОГДА НачисленныеНалоги.НалогПоСтавке9 ИНАЧЕ 0 КОНЕЦ - ВЫБОР КОГДА НЕ РанееНачислено.ФизЛицо ЕСТЬ NULL ТОГДА РанееНачислено.НалогПоСтавке9 ИНАЧЕ 0 КОНЕЦ КАК НалогПоСтавке9,
	|	ВЫБОР КОГДА НЕ НачисленныеНалоги.ФизЛицо ЕСТЬ NULL ТОГДА НачисленныеНалоги.НалогПоСтавке09 ИНАЧЕ 0 КОНЕЦ - ВЫБОР КОГДА НЕ РанееНачислено.ФизЛицо ЕСТЬ NULL ТОГДА РанееНачислено.НалогПоСтавке09 ИНАЧЕ 0 КОНЕЦ КАК НалогПоСтавке09,
	|	ВЫБОР КОГДА НЕ НачисленныеНалоги.ФизЛицо ЕСТЬ NULL ТОГДА НачисленныеНалоги.НалогПоСтавке35 ИНАЧЕ 0 КОНЕЦ - ВЫБОР КОГДА НЕ РанееНачислено.ФизЛицо ЕСТЬ NULL ТОГДА РанееНачислено.НалогПоСтавке35 ИНАЧЕ 0 КОНЕЦ КАК НалогПоСтавке35,
	|	ВЫБОР КОГДА НЕ НачисленныеНалоги.ФизЛицо ЕСТЬ NULL ТОГДА НачисленныеНалоги.НалогПоСтавке40 ИНАЧЕ 0 КОНЕЦ - ВЫБОР КОГДА НЕ РанееНачислено.ФизЛицо ЕСТЬ NULL ТОГДА РанееНачислено.НалогПоСтавке35 ИНАЧЕ 0 КОНЕЦ КАК НалогПоСтавке40
	| ИЗ (" + НачислениеНалоговТекст1 + ") КАК НачисленныеНалоги
	|   ПОЛНОЕ СОЕДИНЕНИЕ (" +РанееНачисленныеНалогиТекст + ") КАК РанееНачислено
	|	ПО РанееНачислено.ФизЛицо = НачисленныеНалоги.ФизЛицо
	|";
	
	
	Запрос.Текст = РанееНачисленныеНалогиТекст;
	Запрос.Текст = НалогиТекст;
	ДанныеНДФЛТвердые = Запрос.Выполнить().Выбрать();
	
	
	СтруктураПоиска = Новый Структура("ФизЛицо");
	
	Пока ДанныеНДФЛТвердые.Следующий() Цикл
		СтруктураПоиска.Физлицо = ДанныеНДФЛТвердые.ФизЛицо;
		Строки = НДФЛ.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() > 0 Тогда
			Строка = Строки[0];
		Иначе
			Строка = НДФЛ.Добавить();
			Строка.ФизЛицо 						= ДанныеНДФЛ.ФизЛицо;
			Строка.МесяцНалоговогоПериода 		= ПериодРегистрации;
		КонецЕсли;
		
		Если  ДанныеНДФЛТвердые.НалогПоСтавке9<>0 тогда
			Строка.НалогПоСтавке9 = Строка.НалогПоСтавке9 + ДанныеНДФЛТвердые.НалогПоСтавке9;
		КонецЕсли;
		
		Если  ДанныеНДФЛТвердые.НалогПоСтавке09<>0 тогда
			Строка.НалогПоСтавке09 = Строка.НалогПоСтавке09 + ДанныеНДФЛТвердые.НалогПоСтавке09;
		КонецЕсли;
		
		Если  ДанныеНДФЛТвердые.НалогПоСтавке35<>0 тогда
			Строка.НалогПоСтавке35 = Строка.НалогПоСтавке35 + ДанныеНДФЛТвердые.НалогПоСтавке35;
		КонецЕсли;
		
		Если  ДанныеНДФЛТвердые.НалогПоСтавке40<>0 тогда
			Строка.НалогПоСтавке40 = Строка.НалогПоСтавке40 + ДанныеНДФЛТвердые.НалогПоСтавке40;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаляем движения
	НаборНДФЛСведенияОДоходах.Очистить();
	НаборНДФЛСведенияОДоходах.Записать();
	//vvv
	ЗафиксироватьТранзакцию();
	//

	
КонецПроцедуры  // РассчитатьНДФЛ



// Процедура рассчитывает Пенсионный фонд
// и заполняет реквизиты табличной части
//
Процедура РассчитатьПенсионныйФонд(ФизЛицо = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	
	Отказ = Ложь;
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, ФизЛицо).Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
	КонецЦикла;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	РаботникиДляРасчетаПФ = Новый Соответствие;
	Если НЕ (ФизЛицо = Неопределено) тогда
		СтруктураПоиска	= Новый Структура;
		СтруктураПоиска.Вставить("ФизЛицо",ФизЛицо);
		МассивСтрок = ПенсионныйФонд.НайтиСтроки(СтруктураПоиска);
		Для Каждого Строка из МассивСтрок Цикл
			РаботникиДляРасчетаПФ.Вставить(Строка.ФизЛицо);
			ПенсионныйФонд.Удалить(Строка);
		КонецЦикла;
	Иначе
		Для Каждого Строка из ПенсионныйФонд Цикл
			РаботникиДляРасчетаПФ.Вставить(Строка.ФизЛицо);
		КонецЦикла;
		ПенсионныйФонд.Очистить();		
	КонецЕсли;

	
	// сформируем и запишем доходы НДФЛ по начислениям документа
	НаборЕСНСведенияОДоходах = РегистрыНакопления.ЕСНСведенияОДоходах.СоздатьНаборЗаписей();
	НаборЕСНСведенияОДоходах.Отбор.Регистратор.Значение = Ссылка;
	НаборЕСНСведенияОДоходах.Очистить();

	СформироватьДоходыПоПенсионномуФонду(ВыборкаПоШапкеДокумента, НаборЕСНСведенияОДоходах,ФизЛицо);
	
	//vvv
	НачатьТранзакцию();
	//
	НаборЕСНСведенияОДоходах.Записать();
	
	ДанныеДляРасчетаЕСНТаблица = ПолучитьДанныеРасчетаЕСН(ОбщегоНазначения.ГоловнаяОрганизация(Организация),ФизЛицо);
	
	ВременнаяТаблица = ПенсионныйФонд.Выгрузить();
	ВременнаяТаблица.Очистить();
	// заполняем движения по регистру исчисленного 
	Для Каждого ДанныеДляРасчетаЕСН из ДанныеДляРасчетаЕСНТаблица Цикл
	
	
		Если  не ЗначениеЗаполнено(ДанныеДляРасчетаЕСН.ВидЗастрахованногоЛица) Тогда
			
			СтруктураПенс = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРегистрации),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ПенсионныйФонд));
			СтруктураФСЗН = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРегистрации),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗН));
			СтруктураФСЗНИнвалиды = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРегистрации),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗНИнвалиды)); 
			
		Иначе	
			
			СтруктураПенс = Новый Структура;
			СтруктураПенс.Вставить("Размер",0);
			
			СтруктураФСЗН = Новый Структура;
			СтруктураФСЗН.Вставить("Размер",0);
			
			СтруктураФСЗНИнвалиды = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРегистрации),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗНИнвалиды)); 
			
			Если ДанныеДляРасчетаЕСН.ВидЗастрахованногоЛица = Перечисления.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРБ или не ЗначениеЗаполнено(ДанныеДляРасчетаЕСН.ВидЗастрахованногоЛица) Тогда
				СтруктураФСЗН = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРегистрации),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗН));
				СтруктураПенс = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРегистрации),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ПенсионныйФонд));
				
			ИначеЕсли ДанныеДляРасчетаЕСН.ВидЗастрахованногоЛица = Перечисления.ВидыЗастрахованныхЛицОбязательногоСтрахования.ИностраныеГражданеСтранЕАЭС Тогда
				СтруктураФСЗН = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРегистрации),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗНИнГрЕАЭС));
				
			ИначеЕсли ДанныеДляРасчетаЕСН.ВидЗастрахованногоЛица = Перечисления.ВидыЗастрахованныхЛицОбязательногоСтрахования.ИностранцыУплачивающиеСтраховыеВзносы Тогда
				СтруктураФСЗН = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРегистрации),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗН));
				СтруктураПенс = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРегистрации),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ПенсионныйФонд));
				
			КонецЕсли;
		КонецЕсли;	
	
	
	
	Если СтруктураПенс.Количество()<>0 тогда
		СтавкаПенсионныйФонд = СтруктураПенс.Размер;
	Иначе
		Сообщить("Не заполнена ставка пенсионного фонда");
		СтавкаПенсионныйФонд = 0;
	КонецЕсли;

	Если СтруктураФСЗН.Количество()<>0 тогда
		СтавкаФСЗН = СтруктураФСЗН.Размер;
	Иначе
		Сообщить("Не заполнена ставка отчислений в ФСЗН");
		СтавкаФСЗН = 0;
	КонецЕсли;
	
	Если СтруктураФСЗНИнвалиды.Количество()<>0 тогда
		СтавкаФСЗНИнвалиды = СтруктураФСЗНИнвалиды.Размер;
	Иначе
		Сообщить("Не заполнена ставка отчислений в ФСЗН по инвалидам");
		СтавкаФСЗНИнвалиды = 0;
	КонецЕсли;

		
		// Пропустим нулевые строки
		//Если ДанныеДляРасчетаЕСН.БазаДоходФСЗН = 0  Тогда			
		//	Продолжить;
		//КонецЕсли; 
		
		 		
		НоваяСтрока = ВременнаяТаблица.Добавить();
		НоваяСтрока.ФизЛицо = ДанныеДляРасчетаЕСН.ФизЛицо;

		
		НоваяСтрока.ПроцентФСЗН = ?(ДанныеДляРасчетаЕСН.Группа = 0, СтавкаФСЗН, СтавкаФСЗНИнвалиды);
		
	    
		ПериодРасчета					 = ?(не ЗначениеЗаполнено(ДанныеДляРасчетаЕСН.Месяц), ПериодРегистрации, ДанныеДляРасчетаЕСН.Месяц);
		НоваяСтрока.МесяцНалоговогоПериода = ПериодРасчета;
		
					
		Если  ДанныеДляРасчетаЕСН.Месяц <= ПериодРегистрации И ДанныеДляРасчетаЕСН.ОтработаноЧасов <> 0 И ДанныеДляРасчетаЕСН.НормаЧасов <> 0  Тогда
			Если  расчетФСЗНотБПМ Тогда
        		РазмерМЗП = ОбщегоНазначения.ОкруглитьПоВалюте(ДанныеДляРасчетаЕСН.РазмерМЗП *ДанныеДляРасчетаЕСН.ОтработаноЧасов/ДанныеДляРасчетаЕСН.НормаЧасов	,Константы.ВалютаРегламентированногоУчета.Получить());
				БазаДоходПенсионныйФонд= ?(ДанныеДляРасчетаЕСН.БазаДоходФСЗНБезГПХ <> 0,Макс(ДанныеДляРасчетаЕСН.БазаДоходФСЗНБезГПХ, РазмерМЗП), ДанныеДляРасчетаЕСН.БазаДоходФСЗНБезГПХ) + ДанныеДляРасчетаЕСН.БазаДоходФСЗНПоГПХ;
			Иначе
				БазаДоходПенсионныйФонд = ДанныеДляРасчетаЕСН.БазаДоходФСЗНБезГПХ + ДанныеДляРасчетаЕСН.БазаДоходФСЗНПоГПХ;
            КонецЕсли;
		Иначе
			БазаДоходПенсионныйФонд = ДанныеДляРасчетаЕСН.БазаДоходФСЗНБезГПХ + ДанныеДляРасчетаЕСН.БазаДоходФСЗНПоГПХ;
	  	КонецЕсли; 
 		//Если СтруктураПенс.ОграничениеПоДоходам = 0 ИЛИ РазмерСреднейЗарплаты = 0 тогда
		//	БазаДоходПенсионныйФонд = ДанныеДляРасчетаЕСН.БазаДоходФСЗН;
		//Иначе	
		//	БазаДоходПенсионныйФонд = ?(ДанныеДляРасчетаЕСН.БазаДоходФСЗН > СтруктураПенс.ОграничениеПоДоходам*РазмерСреднейЗарплаты, СтруктураПенс.ОграничениеПоДоходам*РазмерСреднейЗарплаты, ДанныеДляРасчетаЕСН.БазаДоходФСЗН);
		//КонецЕсли;
			
		НоваяСтрока.Налог = ОбщегоНазначения.ОкруглитьПоВалюте(БазаДоходПенсионныйФонд * СтавкаПенсионныйФонд/100, Константы.ВалютаРегламентированногоУчета.Получить()) - данныеДляРасчетаЕСН.ПенсионныйФонд;
		//vvv
		Если данныеДляРасчетаЕСН.Месяц<ОбщегоНазначения.ПолучитьДатуДеноминации() Тогда
			НоваяСтрока.Налог = ОбщегоНазначения.ОкруглитьПоВалюте(БазаДоходПенсионныйФонд * СтавкаПенсионныйФонд/100 - данныеДляРасчетаЕСН.ПенсионныйФонд, Константы.ВалютаРегламентированногоУчета.Получить());	
		КонецЕсли;		
		//		
	КонецЦикла;
	
	ВременнаяТаблица.Свернуть("ФизЛицо, МесяцНалоговогоПериода, ПроцентФСЗН","Налог");
	Для Каждого Строка Из ВременнаяТаблица Цикл
		
		Если Строка.Налог <> 0 ИЛИ Строка.МесяцНалоговогоПериода = ПериодРегистрации тогда
			СтрокаПФ = ПенсионныйФонд.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПФ,Строка);
			РаботникиДляРасчетаПФ.Удалить(Строка.ФизЛицо);
		КонецЕсли;
			
	КонецЦикла;

	Для Каждого Элемент Из РаботникиДляРасчетаПФ Цикл
		НоваяСтрока =  ПенсионныйФонд.Добавить();
		НоваяСтрока.ФизЛицо = Элемент.Ключ;
		НоваяСтрока.МесяцНалоговогоПериода = НачалоМесяца(ПериодРегистрации);
	КонецЦикла;

	НаборЕСНСведенияОДоходах.Очистить();
	НаборЕСНСведенияОДоходах.Записать();
	//vvv
	ЗафиксироватьТранзакцию();
	//
КонецПроцедуры

// получает доходы ПенсонногоФонда по табличным частям с доходами
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		НаборЗаписей - таблица значений или набор записей рег-ра - "приемник" сведений о доходах
//		
Процедура СформироватьДоходыПоПенсионномуФонду(ВыборкаПоШапкеДокумента, НаборЗаписей, ФизЛицо = Неопределено)
	
	
	// Составим текст запроса для выбора списка физлиц, по которым надо считать песионный фонд
	Если НЕ (Физлицо = Неопределено) Тогда
		СписокФизлицТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Работники.ФизЛицо КАК ФизЛицо
		|ПОМЕСТИТЬ ВТФизЛица
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ПенсионныйФонд КАК Работники
		|ГДЕ
		|	Работники.Ссылка = &парамРегистратор
		|	И Работники.Физлицо = &парамФизлицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо";
		
		ДополнительныеПараметрыЗапроса  = Новый Структура;
		ДополнительныеПараметрыЗапроса.Вставить("парамФизлицо", Физлицо);
	Иначе
		СписокФизлицТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Работники.ФизЛицо КАК ФизЛицо
		|ПОМЕСТИТЬ ВТФизЛица
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ПенсионныйФонд КАК Работники
		|ГДЕ
		|	Работники.Ссылка = &парамРегистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо";
		
		ДополнительныеПараметрыЗапроса  = Неопределено;
	КонецЕсли;
	
	
	
	Запрос = Новый Запрос;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамСпособПоУмолчаниюКодДоходаЕСН", Перечисления.ДоходыФСС_НС.Облагается);
	Запрос.УстановитьПараметр("парамСпособНеОблагаетсяКодДоходаЕСН", Перечисления.ДоходыФСС_НС.НеОблагается);
    Запрос.УстановитьПараметр("парамПустойКодЕСНУ", Справочники.ДоходыЕСН.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамСпособПоУмолчаниюКодЕСН", Справочники.ДоходыЕСН.ОблагаетсяПолностью);
 	Запрос.УстановитьПараметр("парамПериодРегистрации",			ПериодРегистрации);
	//vvv меняем на головную, т.к. в противном случае при перемещении сотрудника в другое обособл. подразделение, снималась сумма пенсионного, начисленного в прошлом обособл. подр.
	//Запрос.УстановитьПараметр("парамОрганизация",				Организация);
	Запрос.УстановитьПараметр("парамОрганизация",				ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаДеноминации",				ОбщегоНазначения.ПолучитьДатуДеноминации());
	//
	Запрос.УстановитьПараметр("парамРегистратор",				Ссылка);
	Запрос.УстановитьПараметр("парамПустойВидДеятельности",		Справочники.ОсобыеУсловияТруда.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамОтветственный",				Ответственный);
	Запрос.УстановитьПараметр("парамРасчетОтпуска",				Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
	Запрос.УстановитьПараметр("парамУчетОтпусковДляФСЗНвМесяцеНачисления",глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].УчетОтпусковДляФСЗНвМесяцеНачисления);
	
	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	
	Запрос.Текст = СписокФизлицТекст;
	Запрос.Выполнить();
	Если ПодразделениеОрганизации.Пустая() И Ответственный.Пустая() Тогда
		ДополнительноеУсловие = "";
		ДополнительноеУсловиеВнешнее = "";
	ИначеЕсли ПодразделениеОрганизации.Пустая() Тогда
		Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].РасчетЗарплатыОрганизацииПоОтветственным Тогда
			ДополнительноеУсловие = " И ПодразделениеОрганизации В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.ПодразделениеОрганизации ИЗ РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамПериодРегистрации) Расчетчики ГДЕ Расчетчики.Пользователь = &парамОтветственный)";
			ДополнительноеУсловиеВнешнееОсновное = " И ОсновныеНачисления.ПодразделениеОрганизации В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.ПодразделениеОрганизации ИЗ РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамПериодРегистрации) Расчетчики ГДЕ Расчетчики.Пользователь = &парамОтветственный)";
			ДополнительноеУсловиеВнешнееДополнительное = " И ДополнительныеНачисления.ПодразделениеОрганизации В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.ПодразделениеОрганизации ИЗ РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамПериодРегистрации) Расчетчики ГДЕ Расчетчики.Пользователь = &парамОтветственный)";
			
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("парамПодразделениеОрганизации",	ПодразделениеОрганизации);
		ДополнительноеУсловие = " И ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделениеОрганизации)";
		ДополнительноеУсловиеВнешнееОсновное = " И ОсновныеНачисления.ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделениеОрганизации)";
		ДополнительноеУсловиеВнешнееДополнительное = " И ДополнительныеНачисления.ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделениеОрганизации)";
	КонецЕсли;
	
	ТекстЗапроса = 
		//vvv
		//"ВЫБРАТЬ РАЗЛИЧНЫЕ
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		//
		|	ДанныеУчета.Сотрудник.Физлицо КАК ФизЛицо,
		|	ДанныеУчета.Сотрудник КАК Сотрудник,
		|	ДанныеУчета.КодДоходаЕСН,
		|	ВЫБОР
		|		КОГДА ДанныеУчета.КодДоходаЕСН.ВходитВБазуФСЗН
		|			ТОГДА &парамСпособПоУмолчаниюКодДоходаЕСН
		|		ИНАЧЕ &парамСпособНеОблагаетсяКодДоходаЕСН
		|	КОНЕЦ КАК ДоходФСЗН,
		|	ВЫБОР
		|		КОГДА ДанныеУчета.КодДоходаЕСН.ВходитВБазуСтрах
		|			ТОГДА &парамСпособПоУмолчаниюКодДоходаЕСН
		|		ИНАЧЕ &парамСпособНеОблагаетсяКодДоходаЕСН
		|	КОНЕЦ КАК ДоходСтрах,
		|	ВЫБОР
		|		КОГДА ДанныеУчета.КодДоходаЕСН.ВходитВБазуЕдиныйПлатеж
		|			ТОГДА &парамСпособПоУмолчаниюКодДоходаЕСН
		|		ИНАЧЕ &парамСпособНеОблагаетсяКодДоходаЕСН
		|	КОНЕЦ КАК ДоходЕдиныйПлатеж,
		|	ДанныеУчета.Результат,
		|	ДанныеУчета.Организация,
		|	ДанныеУчета.Регистратор,
		|	ДанныеУчета.ВидРасчета КАК ВидРасчета,
		|	ДанныеУчета.НомерСтроки КАК НомерСтроки,
		|	ДанныеУчета.ПериодВзаимоРасчетов,
		|	ДанныеУчета.ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеУчета
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|		ВЫБОР
		|			КОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН <> &парамПустойКодЕСНУ
		|				ТОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН
		|			КОГДА ОсновныеНачисления.ВидРасчета.КодДоходаЕСН <> &парамПустойКодЕСНУ
		|				ТОГДА ОсновныеНачисления.ВидРасчета.КодДоходаЕСН
		|			ИНАЧЕ &парамСпособПоУмолчаниюКодЕСН
		|		КОНЕЦ КАК КодДоходаЕСН,
		|		ОсновныеНачисления.Организация КАК Организация,
		|		ОсновныеНачисления.Регистратор КАК Регистратор,
		|		ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
		|		ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|		ОсновныеНачисления.Результат КАК Результат,
		|		ОсновныеНачисления.ПериодДействияНачало КАК ПериодВзаимоРасчетов,
		|		NULL КАК ДокументОснование
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|					ОсновныеНачисления.Сотрудник.Физлицо КАК ФизЛицо,
		|					ОсновныеНачисления.Организация КАК Организация,
		|					ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
		|					МАКСИМУМ(РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период) КАК Период
		|				ИЗ
		|					РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
		|						ПО ОсновныеНачисления.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник
		|							И ОсновныеНачисления.Организация = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация
		|							И ОсновныеНачисления.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета
		|							И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период <= ОсновныеНачисления.ПериодДействияНачало)
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК ФизЛица
		|						ПО ОсновныеНачисления.Сотрудник.Физлицо = ФизЛица.ФизЛицо
		|				ГДЕ
		|					ВЫБОР
		//vvv
		//|							КОГДА ОсновныеНачисления.ПодразделениеОрганизации.Владелец ЕСТЬ NULL 
		|							КОГДА ОсновныеНачисления.ПодразделениеОрганизации.Владелец.ГоловнаяОрганизация<>ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		//
		|								ТОГДА ОсновныеНачисления.Организация
		|							ИНАЧЕ ОсновныеНачисления.ПодразделениеОрганизации.Владелец
		|						КОНЕЦ = &парамОрганизация		
		//vvv переписываем
		//|					И ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
		//|					И ОсновныеНачисления.ВидРасчета.СпособРасчета <> &парамРасчетОтпуска
		|					И ВЫБОР
		|							КОГДА ОсновныеНачисления.ВидРасчета.СпособРасчета <> &парамРасчетОтпуска		
		|								ТОГДА ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
		|							КОГДА &парамУчетОтпусковДляФСЗНвМесяцеНачисления		
		|								ТОГДА ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
		|							ИНАЧЕ НАЧАЛОПЕРИОДА(ОсновныеНачисления.ПериодДействияНачало, МЕСЯЦ) = &парамПериодРегистрации
		|						КОНЕЦ
		//
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ОсновныеНачисления.Сотрудник,
		|					ОсновныеНачисления.Сотрудник.Физлицо,
		|					ОсновныеНачисления.Организация,
		|					ОсновныеНачисления.ВидРасчета) КАК СведенияОНачисленияхСрез
		|				ПО (СведенияОНачисленияхСрез.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник)
		|					И (СведенияОНачисленияхСрез.Организация = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация)
		|					И (СведенияОНачисленияхСрез.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета)
		|					И (СведенияОНачисленияхСрез.Период = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период)
		|			ПО (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник = ОсновныеНачисления.Сотрудник)
		|				И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация = ОсновныеНачисления.Организация)
		|				И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета = ОсновныеНачисления.ВидРасчета)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК ФизЛица
		|			ПО ОсновныеНачисления.Сотрудник.Физлицо = ФизЛица.ФизЛицо
		|	ГДЕ
		|		ВЫБОР
		//vvv
		//|				КОГДА ОсновныеНачисления.ПодразделениеОрганизации.Владелец ЕСТЬ NULL 
		|				КОГДА ОсновныеНачисления.ПодразделениеОрганизации.Владелец.ГоловнаяОрганизация<>ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
		//
		|					ТОГДА ОсновныеНачисления.Организация
		|				ИНАЧЕ ОсновныеНачисления.ПодразделениеОрганизации.Владелец
		|			КОНЕЦ = &парамОрганизация		
		//vvv переписываем
		//|		И ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
		//|		И ОсновныеНачисления.ВидРасчета.СпособРасчета <> &парамРасчетОтпуска
		|		И ВЫБОР
		|				КОГДА ОсновныеНачисления.ВидРасчета.СпособРасчета <> &парамРасчетОтпуска
		|					ТОГДА ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации 
		|				КОГДА &парамУчетОтпусковДляФСЗНвМесяцеНачисления
		|					ТОГДА ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
		|				ИНАЧЕ НАЧАЛОПЕРИОДА(ОсновныеНачисления.ПериодДействияНачало, МЕСЯЦ) = &парамПериодРегистрации
		|			КОНЕЦ
		//
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		//vvv комментируем, т.к. переписали сверху
		//|	ВЫБРАТЬ
		//|		ОсновныеНачисления.Сотрудник,
		//|		ВЫБОР
		//|			КОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН <> &парамПустойКодЕСНУ
		//|				ТОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН
		//|			КОГДА ОсновныеНачисления.ВидРасчета.КодДоходаЕСН <> &парамПустойКодЕСНУ
		//|				ТОГДА ОсновныеНачисления.ВидРасчета.КодДоходаЕСН
		//|			ИНАЧЕ &парамСпособПоУмолчаниюКодЕСН
		//|		КОНЕЦ,
		//|		ОсновныеНачисления.Организация,
		//|		ОсновныеНачисления.Регистратор,
		//|		ОсновныеНачисления.ВидРасчета,
		//|		ОсновныеНачисления.НомерСтроки,
		//|		ОсновныеНачисления.Результат,
		//|		ОсновныеНачисления.ПериодДействияНачало,
		//|		NULL
		//|	ИЗ
		//|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		//|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
		//|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		//|					ОсновныеНачисления.Сотрудник КАК Сотрудник,
		//|					ОсновныеНачисления.Сотрудник.Физлицо КАК ФизЛицо,
		//|					ОсновныеНачисления.Организация КАК Организация,
		//|					ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
		//|					МАКСИМУМ(РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период) КАК Период
		//|				ИЗ
		//|					РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		//|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
		//|						ПО ОсновныеНачисления.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник
		//|							И ОсновныеНачисления.Организация = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация
		//|							И ОсновныеНачисления.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета
		//|							И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период <= ОсновныеНачисления.ПериодДействияНачало)
		//|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК ФизЛица
		//|						ПО ОсновныеНачисления.Сотрудник.Физлицо = ФизЛица.ФизЛицо
		//|				ГДЕ
		//|					ВЫБОР
		////vvv
		////|							КОГДА ОсновныеНачисления.ПодразделениеОрганизации.Владелец ЕСТЬ NULL 
		//|							КОГДА ОсновныеНачисления.ПодразделениеОрганизации.Владелец.ГоловнаяОрганизация<>ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
		////
		//|								ТОГДА ОсновныеНачисления.Организация
		//|							ИНАЧЕ ОсновныеНачисления.ПодразделениеОрганизации.Владелец
		//|						КОНЕЦ = &парамОрганизация
		//|					И ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамРасчетОтпуска
		//|					И ВЫБОР
		//|							КОГДА &парамУчетОтпусковДляФСЗНвМесяцеНачисления		
		//|								ТОГДА ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
		//|							ИНАЧЕ НАЧАЛОПЕРИОДА(ОсновныеНачисления.ПериодДействияНачало, МЕСЯЦ) = &парамПериодРегистрации
		//|						КОНЕЦ
		//|				
		//|				СГРУППИРОВАТЬ ПО
		//|					ОсновныеНачисления.Сотрудник,
		//|					ОсновныеНачисления.Сотрудник.Физлицо,
		//|					ОсновныеНачисления.Организация,
		//|					ОсновныеНачисления.ВидРасчета) КАК СведенияОНачисленияхСрез
		//|				ПО (СведенияОНачисленияхСрез.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник)
		//|					И (СведенияОНачисленияхСрез.Организация = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация)
		//|					И (СведенияОНачисленияхСрез.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета)
		//|					И (СведенияОНачисленияхСрез.Период = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период)
		//|			ПО (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник = ОсновныеНачисления.Сотрудник)
		//|				И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация = ОсновныеНачисления.Организация)
		//|				И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета = ОсновныеНачисления.ВидРасчета)
		//|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК ФизЛица
		//|			ПО ОсновныеНачисления.Сотрудник.Физлицо = ФизЛица.ФизЛицо
		//|	ГДЕ
		//|		ВЫБОР
		////vvv
		////|				КОГДА ОсновныеНачисления.ПодразделениеОрганизации.Владелец ЕСТЬ NULL 
		//|				КОГДА ОсновныеНачисления.ПодразделениеОрганизации.Владелец.ГоловнаяОрганизация<>ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
		////
		//|					ТОГДА ОсновныеНачисления.Организация
		//|				ИНАЧЕ ОсновныеНачисления.ПодразделениеОрганизации.Владелец
		//|			КОНЕЦ = &парамОрганизация
		//|		И ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамРасчетОтпуска
		//|		И ВЫБОР
		//|				КОГДА &парамУчетОтпусковДляФСЗНвМесяцеНачисления
		//|					ТОГДА ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
		//|				ИНАЧЕ НАЧАЛОПЕРИОДА(ОсновныеНачисления.ПериодДействияНачало, МЕСЯЦ) = &парамПериодРегистрации
		//|			КОНЕЦ
		//|
		//|	ОБЪЕДИНИТЬ ВСЕ
		//
		|	
		|	ВЫБРАТЬ
		|		ДополнительныеНачисления.Сотрудник,
		|		ВЫБОР
		|			КОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН <> &парамПустойКодЕСНУ
		|				ТОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН
		|			КОГДА ДополнительныеНачисления.ВидРасчета.КодДоходаЕСН <> &парамПустойКодЕСНУ
		|				ТОГДА ДополнительныеНачисления.ВидРасчета.КодДоходаЕСН
		|			ИНАЧЕ &парамСпособПоУмолчаниюКодЕСН
		|		КОНЕЦ,
		|		ДополнительныеНачисления.Организация,
		|		ДополнительныеНачисления.Регистратор,
		|		ДополнительныеНачисления.ВидРасчета,
		|		ДополнительныеНачисления.НомерСтроки,
		|		ДополнительныеНачисления.Результат,
		//vvv комментируем
		//|		НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ),
		|		ВЫБОР КОГДА (ДополнительныеНачисления.БазовыйПериодНачало<>ДАТАВРЕМЯ(1,1,1)) И (НЕ ДополнительныеНачисления.Регистратор ССЫЛКА Документ.ПремииРаботниковОрганизаций) ТОГДА НАЧАЛОПЕРИОДА(ДополнительныеНачисления.БазовыйПериодНачало, МЕСЯЦ) ИНАЧЕ НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ) КОНЕЦ,
		//
		|		ДополнительныеНачисления.ДокументОснование
		|	ИЗ
		|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисления
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ДополнительныеНачисления.Сотрудник КАК Сотрудник,
		|					ДополнительныеНачисления.Сотрудник.Физлицо КАК ФизЛицо,
		|					ДополнительныеНачисления.Организация КАК Организация,
		|					ДополнительныеНачисления.ВидРасчета КАК ВидРасчета,
		|					МАКСИМУМ(РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период) КАК Период
		|				ИЗ
		|					РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисления
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
		|						ПО ДополнительныеНачисления.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник
		|							И ДополнительныеНачисления.Организация = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация
		|							И ДополнительныеНачисления.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета
		|							И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период <= ДополнительныеНачисления.ПериодРегистрации)
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК ФизЛица
		|						ПО ДополнительныеНачисления.Сотрудник.Физлицо = ФизЛица.ФизЛицо
		|				ГДЕ
		|					ВЫБОР
		//vvv
		//|							КОГДА ДополнительныеНачисления.ПодразделениеОрганизации.Владелец ЕСТЬ NULL 
		|							КОГДА ДополнительныеНачисления.ПодразделениеОрганизации.Владелец.ГоловнаяОрганизация<>ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
		//
		|								ТОГДА ДополнительныеНачисления.Организация
		|							ИНАЧЕ ДополнительныеНачисления.ПодразделениеОрганизации.Владелец
		|						КОНЕЦ = &парамОрганизация		
		|					И НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ДополнительныеНачисления.Сотрудник,
		|					ДополнительныеНачисления.Сотрудник.Физлицо,
		|					ДополнительныеНачисления.Организация,
		|					ДополнительныеНачисления.ВидРасчета) КАК СведенияОНачисленияхСрез
		|				ПО (СведенияОНачисленияхСрез.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник)
		|					И (СведенияОНачисленияхСрез.Организация = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация)
		|					И (СведенияОНачисленияхСрез.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета)
		|					И (СведенияОНачисленияхСрез.Период = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период)
		|			ПО (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник = ДополнительныеНачисления.Сотрудник)
		|				И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация = ДополнительныеНачисления.Организация)
		|				И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета = ДополнительныеНачисления.ВидРасчета)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК ФизЛица
		|			ПО ДополнительныеНачисления.Сотрудник.Физлицо = ФизЛица.ФизЛицо
		|	ГДЕ
		|		ВЫБОР
		//|				КОГДА ДополнительныеНачисления.ПодразделениеОрганизации.Владелец ЕСТЬ NULL 
		|				КОГДА ДополнительныеНачисления.ПодразделениеОрганизации.Владелец.ГоловнаяОрганизация<>ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
		//
		|					ТОГДА ДополнительныеНачисления.Организация
		|				ИНАЧЕ ДополнительныеНачисления.ПодразделениеОрганизации.Владелец
		|			КОНЕЦ = &парамОрганизация		
		|		И НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Основные.Сотрудник,
		|		ВЫБОР
		|			КОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН <> &парамПустойКодЕСНУ
		|				ТОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН
		|			КОГДА Основные.ВидРасчета.КодДоходаЕСН <> &парамПустойКодЕСНУ
		|				ТОГДА Основные.ВидРасчета.КодДоходаЕСН
		|			ИНАЧЕ &парамСпособПоУмолчаниюКодЕСН
		|		КОНЕЦ,
		|		&парамОрганизация,
		|		&парамРегистратор,
		|		Основные.ВидРасчета,
		|		Основные.НомерСтроки,
		|		Основные.Результат,
		|		Основные.ДатаНачала,
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Основные
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Основные.Сотрудник КАК Сотрудник,
		|					Основные.Сотрудник.Физлицо КАК ФизЛицо,
		|					Основные.ВидРасчета КАК ВидРасчета,
		|					МАКСИМУМ(РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период) КАК Период
		|				ИЗ
		|					Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Основные
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
		|						ПО Основные.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник
		|							И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация = &парамОрганизация)
		|							И Основные.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета
		|							И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период <= Основные.ДатаНачала)
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК ФизЛица
		|						ПО Основные.Сотрудник.Физлицо = ФизЛица.ФизЛицо
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Основные.Сотрудник,
		|					Основные.Сотрудник.Физлицо,
		|					Основные.ВидРасчета) КАК СведенияОНачисленияхСрез
		|				ПО (СведенияОНачисленияхСрез.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник)
		|					И (СведенияОНачисленияхСрез.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета)
		|			ПО (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник = Основные.Сотрудник)
		|				И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета = Основные.ВидРасчета)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК ФизЛица
		|			ПО Основные.Сотрудник.Физлицо = ФизЛица.ФизЛицо
		|	ГДЕ
		|		Основные.Ссылка = &парамРегистратор
		|		И Основные.Результат <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Дополнительные.Сотрудник,
		|		ВЫБОР
		|			КОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН <> &парамПустойКодЕСНУ
		|				ТОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН
		|			КОГДА Дополнительные.ВидРасчета.КодДоходаЕСН <> &парамПустойКодЕСНУ
		|				ТОГДА Дополнительные.ВидРасчета.КодДоходаЕСН
		|			ИНАЧЕ &парамСпособПоУмолчаниюКодЕСН
		|		КОНЕЦ,
		|		&парамОрганизация,
		|		&парамРегистратор,
		|		Дополнительные.ВидРасчета,
		|		Дополнительные.НомерСтроки,
		|		Дополнительные.Результат,
		|		Дополнительные.Ссылка.ПериодРегистрации,
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК Дополнительные
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Дополнительные.Сотрудник КАК Сотрудник,
		|					Дополнительные.Сотрудник.Физлицо КАК ФизЛицо,
		|					Дополнительные.ВидРасчета КАК ВидРасчета,
		|					МАКСИМУМ(РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период) КАК Период
		|				ИЗ
		|					Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК Дополнительные
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
		|						ПО Дополнительные.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник
		|							И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация = &парамОрганизация)
		|							И Дополнительные.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета
		|							И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период <= Дополнительные.ДатаНачала)
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК ФизЛица
		|						ПО Дополнительные.Сотрудник.Физлицо = ФизЛица.ФизЛицо
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Дополнительные.Сотрудник,
		|					Дополнительные.Сотрудник.Физлицо,
		|					Дополнительные.ВидРасчета) КАК СведенияОНачисленияхСрез
		|				ПО (СведенияОНачисленияхСрез.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник)
		|					И (СведенияОНачисленияхСрез.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета)
		|					И (СведенияОНачисленияхСрез.Период = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период)
		|			ПО (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник = Дополнительные.Сотрудник)
		|				И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета = Дополнительные.ВидРасчета)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК ФизЛица
		|			ПО Дополнительные.Сотрудник.Физлицо = ФизЛица.ФизЛицо
		|	ГДЕ
		|		Дополнительные.Ссылка = &парамРегистратор
		|		И Дополнительные.Результат <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Договорники.Сотрудник,
		|		ВЫБОР
		|			КОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН <> &парамПустойКодЕСНУ
		|				ТОГДА РеглУчетПлановыхНачисленийРаботниковОрганизаций.КодДоходаЕСН
		|			КОГДА Договорники.ВидРасчета.КодДоходаЕСН <> &парамПустойКодЕСНУ
		|				ТОГДА Договорники.ВидРасчета.КодДоходаЕСН
		|			ИНАЧЕ &парамСпособПоУмолчаниюКодЕСН
		|		КОНЕЦ,
		|		&парамОрганизация,
		|		&парамРегистратор,
		|		Договорники.ВидРасчета,
		|		Договорники.НомерСтроки,
		|		Договорники.Результат,
		|		Договорники.Ссылка.ПериодРегистрации,
		|		Договорники.ДокументОснование
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК Договорники
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Договорники.Сотрудник КАК Сотрудник,
		|					Договорники.Сотрудник.Физлицо КАК ФизЛицо,
		|					Договорники.ВидРасчета КАК ВидРасчета,
		|					МАКСИМУМ(РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период) КАК Период
		|				ИЗ
		|					Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК Договорники
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК РеглУчетПлановыхНачисленийРаботниковОрганизаций
		|						ПО Договорники.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник
		|							И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Организация = &парамОрганизация)
		|							И Договорники.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета
		|							И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период <= Договорники.ДатаНачала)
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК ФизЛица
		|						ПО Договорники.Сотрудник.Физлицо = ФизЛица.ФизЛицо
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Договорники.Сотрудник,
		|					Договорники.Сотрудник.Физлицо,
		|					Договорники.ВидРасчета) КАК СведенияОНачисленияхСрез
		|				ПО (СведенияОНачисленияхСрез.Сотрудник = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник)
		|					И (СведенияОНачисленияхСрез.ВидРасчета = РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета)
		|					И (СведенияОНачисленияхСрез.Период = РеглУчетПлановыхНачисленийРаботниковОрганизаций.Период)
		|			ПО (РеглУчетПлановыхНачисленийРаботниковОрганизаций.Сотрудник = Договорники.Сотрудник)
		|				И (РеглУчетПлановыхНачисленийРаботниковОрганизаций.ВидРасчета = Договорники.ВидРасчета)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК ФизЛица
		|			ПО Договорники.Сотрудник.Физлицо = ФизЛица.ФизЛицо
		|	ГДЕ
		|		Договорники.Ссылка = &парамРегистратор
		|		И Договорники.Результат <> 0) КАК ДанныеУчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	ДанныеУчета.КодДоходаЕСН,
		|	ДоходФСЗН,
		|	ДоходСтрах,
		|	ДоходЕдиныйПлатеж,
		|	ДанныеУчета.Организация,
		|	ДанныеУчета.ПериодВзаимоРасчетов";
		
		
	
	Запрос.Текст = ТекстЗапроса;	
	Запрос.Выполнить();	
	
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОблогаемыеДоходы.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОблогаемыеДоходы.ПериодВзаимоРасчетов, МЕСЯЦ) КАК ПериодДействия,
	|	СУММА(ВЫБОР
	|			КОГДА ОблогаемыеДоходы.КодДоходаЕСН.ВходитВБазуФСЗН
	|				ТОГДА ОблогаемыеДоходы.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходаФСЗН
	|ПОМЕСТИТЬ ВТДоходыФСЗН
	|ИЗ
	|	ВТДанныеУчета КАК ОблогаемыеДоходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ОблогаемыеДоходы.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОблогаемыеДоходы.ПериодВзаимоРасчетов, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	ПериодДействия";
	Запрос.Выполнить();	
	
		
	Запрос.Текст =
	"ВЫБРАТЬ
	//vvv
	//|	СУММА(ЕСНСведенияОДоходах.БазаФСЗН) КАК БазаФСЗН,
	//|	СУММА(ЕСНСведенияОДоходах.БазаППС) КАК БазаППС,
	|	СУММА(ЕСНСведенияОДоходах.БазаФСЗН / ВЫБОР КОГДА ЕСНСведенияОДоходах.Период<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ) КАК БазаФСЗН,
	|	СУММА(ЕСНСведенияОДоходах.БазаППС / ВЫБОР КОГДА ЕСНСведенияОДоходах.Период<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ) КАК БазаППС,
	//
	|	ДоходыФСЗН.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ДоходыФСЗН.ПериодДействия, МЕСЯЦ) КАК ПериодВзаиморасчетов
	|ПОМЕСТИТЬ ВТДоходыПрошлыхПериодов
	|ИЗ
	|	ВТДоходыФСЗН КАК ДоходыФСЗН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|		ПО (ЕСНСведенияОДоходах.ФизЛицо = ДоходыФСЗН.ФизЛицо)
	|			И (НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.ПериодВзаиморасчетов, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ДоходыФСЗН.ПериодДействия, МЕСЯЦ))
	|			И НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.Период, МЕСЯЦ) < &парамПериодРегистрации
	|СГРУППИРОВАТЬ ПО
	|	ДоходыФСЗН.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ДоходыФСЗН.ПериодДействия, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Выполнить();

	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботникиОрганизаций.Период КАК ПериодППС,
	|	СведенияОРаботникеСрез.ФизЛицо КАК ФизЛицо,
	|	СведенияОРаботникеСрез.КодДоходаЕСН,
	|	СведенияОРаботникеСрез.ДоходФСЗН,
	|	СведенияОРаботникеСрез.ДоходСтрах,
	|	СведенияОРаботникеСрез.ДоходЕдиныйПлатеж,
	|	СведенияОРаботникеСрез.Результат,
	|	СведенияОРаботникеСрез.ПериодВзаимоРасчетов,
	|	ТарифыВзносовНаППССрезПоследних.ВидДеятельности КАК ВидДеятельности,
	|	ДоходыФСЗН.СуммаДоходаФСЗН КАК СуммаДоходФСЗН,
	|	ЕСТЬNULL(ДоходыПрошлыхПериодов.БазаФСЗН, 0) КАК ДоходыПрошлыхФСЗН,
	|	СведенияОРаботникеСрез.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеУчета.Сотрудник КАК Сотрудник,
	|		ДанныеУчета.ФизЛицо КАК ФизЛицо,
	|		ДанныеУчета.ПериодВзаимоРасчетов КАК ПериодВзаимоРасчетов,
	|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
	|		ДанныеУчета.Регистратор КАК Регистратор,
	|		ДанныеУчета.КодДоходаЕСН КАК КодДоходаЕСН,
	|		ДанныеУчета.ДоходФСЗН КАК ДоходФСЗН,
	|		ДанныеУчета.ДоходСтрах КАК ДоходСтрах,
	|		ДанныеУчета.ДоходЕдиныйПлатеж КАК ДоходЕдиныйПлатеж,
	|		ДанныеУчета.ВидРасчета КАК ВидРасчета,
	|		ДанныеУчета.НомерСтроки КАК НомерСтроки,
	|		ДанныеУчета.Результат КАК Результат,
	|		ДанныеУчета.ДокументОснование КАК ДокументОснование
	|	ИЗ
	|		ВТДанныеУчета КАК ДанныеУчета
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО ДанныеУчета.Сотрудник = РаботникиОрганизаций.Сотрудник
	|				И (РаботникиОрганизаций.Период <= ДанныеУчета.ПериодВзаимоРасчетов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеУчета.Сотрудник,
	|		ДанныеУчета.ФизЛицо,
	|		ДанныеУчета.ПериодВзаимоРасчетов,
	|		ДанныеУчета.Регистратор,
	|		ДанныеУчета.КодДоходаЕСН,
	|		ДанныеУчета.ДоходФСЗН,
	|		ДанныеУчета.ДоходСтрах,
	|		ДанныеУчета.ДоходЕдиныйПлатеж,
	|		ДанныеУчета.ВидРасчета,
	|		ДанныеУчета.НомерСтроки,
	|		ДанныеУчета.Результат,
	|		ДанныеУчета.ДокументОснование) КАК СведенияОРаботникеСрез
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифыВзносовНаППС.СрезПоследних КАК ТарифыВзносовНаППССрезПоследних
	|			ПО РаботникиОрганизаций.ВидДеятельностиИзмерение = ТарифыВзносовНаППССрезПоследних.ВидДеятельности
	|		ПО (РаботникиОрганизаций.Сотрудник = СведенияОРаботникеСрез.Сотрудник)
	|			И (РаботникиОрганизаций.Период = СведенияОРаботникеСрез.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыФСЗН КАК ДоходыФСЗН
	|		ПО (ДоходыФСЗН.ФизЛицо = СведенияОРаботникеСрез.ФизЛицо)
	|			И (НАЧАЛОПЕРИОДА(ДоходыФСЗН.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОРаботникеСрез.ПериодВзаимоРасчетов, МЕСЯЦ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыПрошлыхПериодов КАК ДоходыПрошлыхПериодов
	|		ПО (ДоходыПрошлыхПериодов.ФизЛицо = СведенияОРаботникеСрез.ФизЛицо)
	|			И (НАЧАЛОПЕРИОДА(ДоходыПрошлыхПериодов.ПериодВзаиморасчетов, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОРаботникеСрез.ПериодВзаимоРасчетов, МЕСЯЦ))";


	
	Доходы = Запрос.Выполнить().Выбрать();	                         
		//сформируем движения ЕСНСведенияОДоходах
	Пока Доходы.Следующий() Цикл
			
		
	    Движение = НаборЗаписей.Добавить();
	    // измерения
	    Движение.Период						= ПериодРегистрации;
	    Движение.ПериодВзаимоРасчетов       = Доходы.ПериодВзаимоРасчетов;
	 	Движение.Физлицо					= Доходы.Физлицо;
		//Движение.Сотрудник					= Доходы.Сотрудник;

	    Движение.Организация				= Организация;
		
		МесяцУчета = Доходы.ПериодВзаимоРасчетов;
        РазмерСреднейЗарплаты = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(НачалоМесяца(МесяцУчета)-1,Новый Структура("ВидПараметра",Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников)).Размер;
    	СтруктураФСЗН = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(ПериодРегистрации),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ПенсионныйФонд));
       	РазмерОграничения = (РазмерСреднейЗарплаты* СтруктураФСЗН.ОграничениеПоДоходам) - Доходы.ДоходыПрошлыхФСЗН;

	     //ресурсы
	    Движение.Результат					= Доходы.Результат;
		
		Если Доходы.ДоходФСЗН = Перечисления.ДоходыФСС_НС.Облагается тогда
			Если  Доходы.СуммаДоходФСЗН > РазмерОграничения тогда
				Движение.БазаФСЗН = Доходы.Результат/Доходы.СуммаДоходФСЗН * РазмерОграничения;
			Иначе
				Движение.БазаФСЗН = Доходы.Результат;
			КонецЕсли;
		КонецЕсли;

		//Движение.БазаФСЗН					= Доходы.Результат;

	     //реквизиты
	    Движение.КодДоходаЕСН				= Доходы.КодДоходаЕСН;
	    Движение.ДоходФСЗН 					= Доходы.ДоходФСЗН;
	    Движение.ДоходСтрах 				= Доходы.ДоходСтрах;
	    Движение.ДоходЕдиныйПлатеж 			= Доходы.ДоходЕдиныйПлатеж;
		Движение.ВидДеятельности            = Доходы.ВидДеятельности;
	    Движение.ОбособленноеПодразделение	= Организация;
		Движение.ДокументОснование          = Доходы.ДокументОснование;

		
	КонецЦикла;
	
КонецПроцедуры // СформироватьДоходыПоКодамНДФЛ()

// Предназначена для получения выборки из запроса с данными расчета ЕСН
// По текущему регистратору получает 
//    	данные о начисленной зарплате в разрезе кодов дохода ЕСН
// 		данные об инвалидности физлиц помесячно
//		присоединяет данные о скидках к доходам
//
// Параметры:
//  нет
// Возвращаемое значение:
//  Выборка результата запроса
//
Функция ПолучитьДанныеРасчетаЕСН(ГоловнаяОрганизация, ФизЛицо = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
    Запрос.УстановитьПараметр("парамКонецМесяцаПериодаРегистрации", КонецМесяца(ПериодРегистрации));
    Запрос.УстановитьПараметр("парамНачалоМесяцаПериодаРегистрации", НачалоГода(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамОбособленноеПодразделение", Организация);
	Запрос.УстановитьПараметр("парамПодлежитОбложению", Перечисления.ДоходыФСС_НС.Облагается);
	//vvv комментируем, доступ к реквизитам через точку при RLS невозможен. Только через запрос
	//Запрос.УстановитьПараметр("парамВидСтавокЕСНиПФР", ГоловнаяОрганизация.ВидСтавокЕСНиПФР);
	Запрос.УстановитьПараметр("парамВидСтавокЕСНиПФР",Перечисления.ВидыСтавокЕСНиПФР.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаДеноминации",ОбщегоНазначения.ПолучитьДатуДеноминации());
	//
    Запрос.УстановитьПараметр("парамНачалоГода", НачалоГода(ПериодРегистрации));
    Запрос.УстановитьПараметр("парамГруппа1", "I");
    Запрос.УстановитьПараметр("парамГруппа2", "II");
    Запрос.УстановитьПараметр("парамГодРасчета", Год(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
    Запрос.УстановитьПараметр("парамМуж", Перечисления.ПолФизическихЛиц.Мужской);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата",Дата('00010101'));
	
	//vvv
	ДатаКонтроля=НачалоГода(ПериодРегистрации); //по умолчанию с начала года
	ЗапросПн=Новый Запрос;
	ЗапросПн.УстановитьПараметр("Организация",Организация);
	ЗапросПн.Текст=
	"ВЫБРАТЬ
	|	ДатыПересчетаПенсионного.ДатаПересчета
	|ИЗ
	|	РегистрСведений.ДатыПересчетаПенсионного КАК ДатыПересчетаПенсионного
	|ГДЕ
	|	ДатыПересчетаПенсионного.Организация = &Организация";
	
	ВыборкаПН=ЗапросПн.Выполнить().Выбрать();
	Если ВыборкаПН.Следующий() Тогда
		Если ВыборкаПН.ДатаПересчета<>Дата(1,1,1) ТОгда
			ДатаКонтроля=ВыборкаПН.ДатаПересчета
		КонецЕсли;		
	КонецЕсли;		
	Запрос.УстановитьПараметр("парамНачалоМесяцаВнедрения",ДатаКонтроля);
	//
	//
	ЛьготаИнвалидов = "100000";
	
	СписокВсехПодразделенийОрганизации = ПроцедурыУправленияПерсоналом.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокВсехПодразделенийОрганизации.Добавить(ГоловнаяОрганизация);
    Запрос.УстановитьПараметр("СписокВсехПодразделенийОрганизации", СписокВсехПодразделенийОрганизации);
	// ---------------------------------------------------------------------------
	// тексты запросов
	//

	// Периоды
	// Таблица список периодов
	// Поля:
	//		Период
	// Описание:
	//  список периодов - первые даты месяцеы с начала года по "текущий" для запроса период
	//
	МесяцыДляРасчетаТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МАКСИМУМ(ЕСНСведенияОДоходах.ПериодВзаиморасчетов) КАК ПериодВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|ГДЕ
	|	ЕСНСведенияОДоходах.Период = &парамПериодРегистрации
	|	И ЕСНСведенияОДоходах.ОбособленноеПодразделение = &парамОбособленноеПодразделение";
	Запрос.Текст = МесяцыДляРасчетаТекст;
	ВыборкаПоследнегоМесяца  = Запрос.Выполнить().Выбрать();

	Если ВыборкаПоследнегоМесяца.Следующий() Тогда
		ПоследнийМесяц = ВыборкаПоследнегоМесяца.ПериодВзаиморасчетов
	КонецЕсли;
	
	Если  НЕ ЗначениеЗаполнено(ПоследнийМесяц) тогда
		ПоследнийМесяц = ПериодРегистрации;
	КонецЕсли;
		// конец месяца налогового периода
	КонецМесяца = КонецМесяца(НачалоГода(ПериодРегистрации));
	// первый месяц
	ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериоды";
	// прибавим остальные месяцы
	Для Сч = 2 По Месяц(ПоследнийМесяц) Цикл
		КонецМесяца = КонецМесяца(КонецМесяца+1);
    	ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	
	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	
	// ФизлицаДляРасчета
	//
	//ФизлицаДляРасчетаТекст = 
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ЕСНСведенияОДоходах.ФизЛицо КАК ФизЛицо
	//|ИЗ
	//|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	//|ГДЕ
	//|	ЕСНСведенияОДоходах.Период = &парамПериодРегистрации
	//|	И ЕСНСведенияОДоходах.ОбособленноеПодразделение = &парамОбособленноеПодразделение";

	// Составим текст запроса для выбора списка физлиц, по которым надо считать НДФЛ
	Если НЕ (ФизЛицо = Неопределено) Тогда
		ФизлицаДляРасчетаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		//vvv
		|	ДатыПересчетаПенсионного.ДатаПересчета,	
		//
		|	Работники.ФизЛицо КАК ФизЛицо
		|ПОМЕСТИТЬ ВТФизЛица
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ПенсионныйФонд КАК Работники
		//vvv
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПересчетаПенсионного КАК ДатыПересчетаПенсионного
		|		ПО	ДатыПересчетаПенсионного.Организация=Работники.ФизЛицо 
		//
		|ГДЕ
		|	Работники.Ссылка = &Регистратор
		|	И Работники.ФизЛицо = &парамФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо";
		
		ДополнительныеПараметрыЗапроса  = Новый Структура;
		ДополнительныеПараметрыЗапроса.Вставить("парамФизЛицо", ФизЛицо);
	Иначе
		ФизлицаДляРасчетаТекст  = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		//vvv
		|	ДатыПересчетаПенсионного.ДатаПересчета,	
		//
		|	Работники.ФизЛицо КАК ФизЛицо
		|ПОМЕСТИТЬ ВТФизЛица
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ПенсионныйФонд КАК Работники
		//vvv
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПересчетаПенсионного КАК ДатыПересчетаПенсионного
		|		ПО	ДатыПересчетаПенсионного.Организация=Работники.ФизЛицо 
		//
		|
		|ГДЕ
		|	Работники.Ссылка = &Регистратор";
		
		ДополнительныеПараметрыЗапроса  = Неопределено;
	КонецЕсли;

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Запрос.Текст = ФизлицаДляРасчетаТекст;
	Запрос.Выполнить();
	// ДанныеОПравеНаПенсию
	// Таблица Таблица Данные о праве на пенсию: - таблица это список иностранцев и периодов
	// Поля:
	//		Физлицо, 
	//		Месяц - месяц налогового периода
	// 
	// Описание:
	//	Выбираем Из Списка периодов
	//	Внутреннее соединение с ГражданствоФизЛиц.СрезПоследних
	//  по равенству периодов
	//  условие: что физлицо - не имеет права на пенсию
	//
	
	
	ДанныеОМЗПТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК Месяц,
	|	ЕСТЬNULL(РазмерыПараметровДляРасчетаРБ.Размер, 0) КАК Размер
	|ПОМЕСТИТЬ ВТДанныеОМЗП
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		МАКСИМУМ(РазмерыПараметровДляРасчетаРБ.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПериоды КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|			ПО Периоды.Период >= РазмерыПараметровДляРасчетаРБ.Период
	|				И (РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.МинимальнаяЗарплатаРБ))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (РазмерыПараметровДляРасчетаРБ.Период = Периоды.ПериодРегистра)
	|			И (РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.МинимальнаяЗарплатаРБ))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц";

    Запрос.Текст = ДанныеОМЗПТекст;
	Запрос.Выполнить();

    // ДоходыПоФизлицамМесяцамКодамТекст
	// Таблица ЕСН-доходы по ФЛ и Периодам:
    // Поля:
	// Описание:
	// Выбираем из ЕСНОсновныеНачисления ,ЕСНДополнительныеНачисления и ЕСНСведенияОДоходах и суммируем результат
	// с начала года по текущий период
	
	ДоходыПоФизлицамМесяцамКодамТекст = 
	"ВЫБРАТЬ
	|	ЕСНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.ПериодВзаиморасчетов, МЕСЯЦ) КАК Месяц,
	|	НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	ЕСНСведенияОДоходах.ДоходФСЗН,
	|	ЕСНСведенияОДоходах.ДоходСтрах,
	|	ЕСНСведенияОДоходах.доходЕдиныйПлатеж,
	//vvv
	//|	ЕСНСведенияОДоходах.Результат КАК ОблагаемыйДоход,
	//|	ЕСНСведенияОДоходах.БазаФСЗН,
	|	ЕСНСведенияОДоходах.Результат / ВЫБОР КОГДА ЕСНСведенияОДоходах.Период<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК ОблагаемыйДоход,
	|	ЕСНСведенияОДоходах.БазаФСЗН / ВЫБОР КОГДА ЕСНСведенияОДоходах.Период<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК БазаФСЗН,
	//
	|	ЕСНСведенияОДоходах.КодДоходаЕСН
	|ПОМЕСТИТЬ ВТСведенияОДоходах
	|ИЗ
	|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК Физлица
	|		ПО ЕСНСведенияОДоходах.ФизЛицо = Физлица.ФизЛицо
	|ГДЕ
	//vvv убираем условие на обособленное подразделение, т.к. если человек работал в двух подразделениях, не виден был доход с другого подразделения, добавляем условие - пересчет только с месяца внедрения.
	//|	ЕСНСведенияОДоходах.ОбособленноеПодразделение В(&СписокВсехПодразделенийОрганизации)	
	//|	И (ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации
	//|			ИЛИ ЕСНСведенияОДоходах.ПериодВзаиморасчетов МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации)
	|	(((ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации) И (ЕСНСведенияОДоходах.ПериодВзаиморасчетов>= ВЫБОР КОГДА Физлица.ДатаПересчета ЕСТЬ NULL ТОГДА &парамНачалоМесяцаВнедрения ИНАЧЕ Физлица.ДатаПересчета КОНЕЦ))
	|			ИЛИ ((ЕСНСведенияОДоходах.ПериодВзаиморасчетов МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации) И (ЕСНСведенияОДоходах.Период>= ВЫБОР КОГДА Физлица.ДатаПересчета ЕСТЬ NULL ТОГДА &парамНачалоМесяцаВнедрения ИНАЧЕ Физлица.ДатаПересчета КОНЕЦ)))
	//
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Месяц";

	
	Запрос.Текст = ДоходыПоФизлицамМесяцамКодамТекст;
	Запрос.Выполнить();

    // ДанныеОбИнвалидности
	// Таблица Данных об Инвалидности: - таблица это список инвалидов и периодов инвалидности
	// поля:
	//		Физлицо, 
	//		Месяц - месяц налогового периода
	// Описание:	
	//	Выбираем Из Список периодов (таблица - список периодов с начала года по текущий период
	//	Внутреннее соединение с СведенияОбИнвалидностиФизлиц.СрезПоследних
	//	по равенству периодов
	//  условие: что физлицо - Инвалид
	// 
				
	ДанныеОбИнвалидностиТекст = 
	//vvv
	//"ВЫБРАТЬ
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности = &парамГруппа1
	|				ИЛИ СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности = &парамГруппа2
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Группа,
	|	СведенияОбИнвалидностиФизлиц.Физлицо КАК Физлицо,
	|	НАЧАЛОПЕРИОДА(Периоды.Период,МЕСЯЦ) КАК Месяц
	|ПОМЕСТИТЬ ВТДанныеИбИнвалидности
	|ИЗ
	|	(ВЫБРАТЬ
	|		СведенияОбИнвалидностиФизлиц.Физлицо КАК Физлицо,
	|		Периоды.Период КАК Период,
	|		МАКСИМУМ(СведенияОбИнвалидностиФизлиц.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПериоды КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|			ПО Периоды.Период >= СведенияОбИнвалидностиФизлиц.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СведенияОбИнвалидностиФизлиц.Физлицо,
	|		Периоды.Период) КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|		ПО (СведенияОбИнвалидностиФизлиц.Период = Периоды.ПериодРегистра)
	|			И (СведенияОбИнвалидностиФизлиц.Физлицо = Периоды.Физлицо)
	|			И (СведенияОбИнвалидностиФизлиц.Инвалидность)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо";
	
	Запрос.Текст = ДанныеОбИнвалидностиТекст;
	Запрос.Выполнить();
	
	
	// ОблагаемаяБазаПоМесяцам
	// Таблица Баз для исчисления ЕСН по месяцам налогового периода:
	// Поля:
	//		ФизЛицо
	//		Месяц - месяц налогового периода
	//		БазаФедеральныйБюджет         - база для налогообложения ЕСН в части налога в федеральный бюджет
	//		ЛьготаИнвалидуФБ   			  - сумма льготы инвалиду по ЕСН в части налога в федеральный бюджет
	//		БазаФСС                       - база для налогообложения ЕСН в части налога в ФСС
	//		ЛьготаИнвалидуФСС  			  - сумма льготы инвалиду по ЕСН в части налога в ФСС
	//		БазаФОМС					  - база для налогообложения ЕСН в части налогов в ФОМС
	//		ЛьготаИнвалидуФОМС 			  - сумма льготы инвалиду по ЕСН в части налога в ФОМС
	//		БазаПФР			   			  - база для взносов в ПФР (включая доходы, облагаемые ЕНВД)
	//		БазаПФР_ЕНВД			   	  - сумма облагаемых ПФР доходов, подподающих под ЕНВД
	//
	// Описание:
	//	
	// 	1) выбираем из ДоходыПоФизлицамМесяцамКодамТекст
	// 		и суммируем ОблагаемыйДоход для всех составных частей ЕСН. При этом учитывается входимость в базу
	// 		по флажку в справочнике - это База.
	//		Доход, облагаемый ЕНВД, не включаем в базу ЕСН. 
	//		Доход иностранца не включаем в базу ПФР.
	//		Для инвалидов считается база отдельно, но из неё исключаем договора подряда.
	//  2) суммировать ОблагаемыйДоход для всех составных частей ЕСН при входимости в базу и признака инвалидности - это ЛьготаИнвалиду по всем частям ЕСН

	
	ДанныеОПравеНаПенсиюТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК Месяц,
	|	ГражданствоФизЛиц.ФизЛицо КАК Физлицо,
	|	ГражданствоФизЛиц.ВидЗастрахованногоЛица,
	|	ВЫБОР
	|		КОГДА ГражданствоФизЛиц.ВидЗастрахованногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ИностранцыНеУплачивающие)
	|				ИЛИ ГражданствоФизЛиц.ВидЗастрахованногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРб)
	|				ИЛИ ГражданствоФизЛиц.ВидЗастрахованногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ИностраныеГражданеСтранЕАЭС)
	|				ИЛИ ГражданствоФизЛиц.ВидЗастрахованногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ИностранцыУплачивающиеСтраховыеВзносы)
	|				ИЛИ ГражданствоФизЛиц.ВидЗастрахованногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ИностранцыУплачивающиеБелгосстрах)
	|			ТОГДА ГражданствоФизЛиц.НеИмеетПравоНаПенсию
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЕмеетПравоНаПенсию
	|ПОМЕСТИТЬ ВТДанныеОПравеНаПенсию
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Месяц КАК Период,
	|		ГражданствоФизЛиц.ФизЛицо КАК Физлицо,
	|		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТСведенияОДоходах КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|			ПО Периоды.Месяц >= ГражданствоФизЛиц.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ГражданствоФизЛиц.ФизЛицо,
	|		Периоды.Месяц) КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО (ГражданствоФизЛиц.Период = Периоды.ПериодРегистра)
	|			И (ГражданствоФизЛиц.ФизЛицо = Периоды.Физлицо)
	|			И (ГражданствоФизЛиц.НеИмеетПравоНаПенсию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Месяц";
	
	Запрос.Текст = ДанныеОПравеНаПенсиюТекст;
	Запрос.Выполнить();

	ОблагаемаяБазаПоМесяцам = 
	"ВЫБРАТЬ
	|	Основная.ФизЛицо КАК ФизЛицо,
	|	Основная.Месяц КАК Месяц,
	|	Основная.ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА НЕ Инвалид.Физлицо ЕСТЬ NULL
	|			ТОГДА Инвалид.Группа
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Группа,
	|	ВЫБОР
	|		КОГДА ДанныеОПравеНаПенсию.НеЕмеетПравоНаПенсию ЕСТЬ NULL 
	|				И Основная.ДоходФСЗН = &парамПодлежитОбложению
	|				И Основная.КодДоходаЕСН <> ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговорГПХ)
	|			ТОГДА Основная.БазаФСЗН
	|		КОГДА Основная.ДоходФСЗН = &парамПодлежитОбложению
	|				И Основная.КодДоходаЕСН <> ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговорГПХ)
	|				И НЕ ДанныеОПравеНаПенсию.НеЕмеетПравоНаПенсию 
	|			ТОГДА Основная.БазаФСЗН
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаДоходФСЗНБезГПХ,
	|	ВЫБОР
	|		КОГДА Основная.ДоходФСЗН = &парамПодлежитОбложению
	|				И Основная.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговорГПХ)
	|				И НЕ ДанныеОПравеНаПенсию.НеЕмеетПравоНаПенсию
	|			ТОГДА Основная.БазаФСЗН
	|		КОГДА Основная.ДоходФСЗН = &парамПодлежитОбложению
	|				И Основная.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговорГПХ)
	|				И ДанныеОПравеНаПенсию.НеЕмеетПравоНаПенсию ЕСТЬ NULL 
	|			ТОГДА Основная.БазаФСЗН
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаДоходФСЗНПоГПХ,
	|	ВЫБОР
	|		КОГДА Основная.ДоходСтрах = &парамПодлежитОбложению
	|				И Основная.КодДоходаЕСН <> ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговорГПХ)
	|			ТОГДА Основная.ОблагаемыйДоход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаДоходСтрахБезГПХ,
	|	ВЫБОР
	|		КОГДА Основная.ДоходСтрах = &парамПодлежитОбложению
	|				И Основная.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговорГПХ)
	|			ТОГДА Основная.ОблагаемыйДоход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаДоходСтрахПоГПХ,
	|	ВЫБОР
	|		КОГДА Основная.ДоходЕдиныйПлатеж = &парамПодлежитОбложению
	|				И НЕ ДанныеОПравеНаПенсию.НеЕмеетПравоНаПенсию
	|			ТОГДА Основная.ОблагаемыйДоход
	|		КОГДА Основная.ДоходЕдиныйПлатеж = &парамПодлежитОбложению
	|				И ДанныеОПравеНаПенсию.НеЕмеетПравоНаПенсию ЕСТЬ NULL 
	|			ТОГДА Основная.ОблагаемыйДоход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаДоходЕдиныйПлатеж,
	|	ДанныеОПравеНаПенсию.ВидЗастрахованногоЛица
	|ПОМЕСТИТЬ ВТОблагаемаяБаза
	|ИЗ
	|	ВТСведенияОДоходах КАК Основная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеИбИнвалидности КАК Инвалид
	|		ПО (Инвалид.Физлицо = Основная.ФизЛицо)
	|			 И (Инвалид.Месяц =  Основная.Месяц)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПравеНаПенсию КАК ДанныеОПравеНаПенсию
	|		ПО Основная.Месяц = ДанныеОПравеНаПенсию.Месяц
	|			И Основная.ФизЛицо = ДанныеОПравеНаПенсию.ФизЛицо
	| 
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Месяц";
	
	Запрос.Текст = ОблагаемаяБазаПоМесяцам;
	Запрос.Выполнить();


	ИсчисленныйЕСНТекст = 
	"ВЫБРАТЬ
	|	ЕСНИсчисленный.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА (НЕ Инвалид.Физлицо ЕСТЬ NULL )
	|			ТОГДА Инвалид.Группа
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Группа,
	|	ВЫБОР
	|		КОГДА ЕСНИсчисленный.ПроцентФСЗН ЕСТЬ NULL 
	|			ТОГДА 35
	|		ИНАЧЕ ЕСНИсчисленный.ПроцентФСЗН
	|	КОНЕЦ КАК ПроцентФСЗН,
	|	НАЧАЛОПЕРИОДА(ЕСНИсчисленный.ПериодВзаиморасчетов, МЕСЯЦ) КАК Месяц,
	|	ЕСНИсчисленный.ВидДеятельности,
	//vvv
	//|	ЕСНИсчисленный.ППС КАК ППС,
	//|	ЕСНИсчисленный.ПенсионныйФонд КАК ПенсионныйФонд,
	//|	ЕСНИсчисленный.ФСЗН КАК ФСЗН,
	//|	ЕСНИсчисленный.ЕдиныйПлатеж КАК ЕдиныйПлатеж,
	//|	ЕСНИсчисленный.ОбязательноеСтрахование КАК ОбязательноеСтрахование
	|	ЕСНИсчисленный.ППС / ВЫБОР КОГДА ЕСНИсчисленный.Период<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК ППС,
	|	ЕСНИсчисленный.ПенсионныйФонд / ВЫБОР КОГДА ЕСНИсчисленный.Период<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК ПенсионныйФонд,
	|	ЕСНИсчисленный.ФСЗН / ВЫБОР КОГДА ЕСНИсчисленный.Период<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК ФСЗН,
	|	ЕСНИсчисленный.ЕдиныйПлатеж / ВЫБОР КОГДА ЕСНИсчисленный.Период<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК ЕдиныйПлатеж,
	|	ЕСНИсчисленный.ОбязательноеСтрахование / ВЫБОР КОГДА ЕСНИсчисленный.Период<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК ОбязательноеСтрахование
	//
	|ПОМЕСТИТЬ ВТЕСНИсчисленный
	|ИЗ
	|	РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК Физлица
	|		ПО ЕСНИсчисленный.ФизЛицо = Физлица.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеИбИнвалидности КАК Инвалид
	|		ПО (Инвалид.Физлицо = ЕСНИсчисленный.ФизЛицо)
	|			И (Инвалид.Месяц = ЕСНИсчисленный.ПериодВзаиморасчетов)
	|ГДЕ
	|	ЕСНИсчисленный.Организация = &парамГоловнаяОрганизация
	//vvv комментируем, добавляем условие, т.к. не нужно видеть исчисленный пенс.фонд в месяце где был переходящий отпуск на месяц внедрения
	//|	И (ЕСНИсчисленный.Период МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации
	//|			ИЛИ ЕСНИсчисленный.ПериодВзаиморасчетов МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации)
	|	И (((ЕСНИсчисленный.Период МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации) И (ЕСНИсчисленный.ПериодВзаиморасчетов>=ВЫБОР КОГДА ФизЛица.ДатаПересчета ЕСТЬ NULL ТОГДА &парамНачалоМесяцаВнедрения ИНАЧЕ ФизЛица.ДатаПересчета КОНЕЦ))
	|			ИЛИ ((ЕСНИсчисленный.ПериодВзаиморасчетов МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации) И (ЕСНИсчисленный.Период>=ВЫБОР КОГДА ФизЛица.ДатаПересчета ЕСТЬ NULL ТОГДА &парамНачалоМесяцаВнедрения ИНАЧЕ ФизЛица.ДатаПересчета КОНЕЦ)))
	//
	//vvv не будем брать в расчет 2013 год т.к. там не считалсиь налоги, при проведени которых формируются дохода для Фонда
	|	И (ГОД(ЕСНИсчисленный.Период)>2013)
	//
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц,
	|	ФизЛицо";
	
	Запрос.Текст = ИсчисленныйЕСНТекст;
	Запрос.Выполнить();
	
	ДатыПриемаИУвольненияТекст = 
	//vvv иначе падает, если сотрудник перемещался между организациями
	//"ВЫБРАТЬ
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Физлица.ФизЛицо КАК ФизЛицо,
	|	МАКСИМУМ(РаботникиПрием.Период) КАК ДатаПриема,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА РаботникиУвольнение.Период < РаботникиПрием.Период
	|				ТОГДА &ПустаяДата
	|			ИНАЧЕ РаботникиУвольнение.Период
	|		КОНЕЦ) КАК ДатаУвольнения
	|ПОМЕСТИТЬ ВТДатыПриемаИУвольнения
	|ИЗ
	|	ВТФизЛица КАК Физлица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамКонецМесяцаПериодаРегистрации, ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиУвольнение
	|		ПО Физлица.ФизЛицо = РаботникиУвольнение.Сотрудник.Физлицо
	|			И (РаботникиУвольнение.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамКонецМесяцаПериодаРегистрации, ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)) КАК РаботникиПрием
	|		ПО Физлица.ФизЛицо = РаботникиПрием.Сотрудник.Физлицо
	|			И (РаботникиПрием.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|
	|СГРУППИРОВАТЬ ПО
	|	Физлица.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ДатыПриемаИУвольненияТекст;
	Запрос.Выполнить();
	

	СтрокиНачисленийТекст =
	"ВЫБРАТЬ
	|	СтрокиДокумента.Сотрудник КАК Сотрудник,
	|	СтрокиДокумента.Физлицо,
	|	СтрокиДокумента.ДатаНачалаСобытия,
	|	СтрокиДокумента.НомерСтроки
	|ПОМЕСТИТЬ ВТСтрокиНачислений
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК СтрокиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК Физлица
	|		ПО СтрокиДокумента.Физлицо = Физлица.ФизЛицо
	|ГДЕ
	|	СтрокиДокумента.Ссылка = &Регистратор
	|	И СтрокиДокумента.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	
	Запрос.Текст = СтрокиНачисленийТекст;
	Запрос.Выполнить();

	
    ГрафикиСотрудниковТекст =
	"ВЫБРАТЬ
	|	ПоследниеДаты.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТГрафикиСотрудников
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|		СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|		СтрокиНачисления.Сотрудник КАК Сотрудник,
	|		СтрокиНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия
	|	ИЗ
	|		ВТСтрокиНачислений КАК СтрокиНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ПО СтрокиНачисления.ДатаНачалаСобытия >= РаботникиОрганизации.Период
	|				И СтрокиНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СтрокиНачисления.НомерСтроки,
	|		СтрокиНачисления.Сотрудник,
	|		СтрокиНачисления.ДатаНачалаСобытия) КАК ПоследниеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ПоследниеДаты.МаксПериод = РаботникиОрганизации.Период
	|			И ПоследниеДаты.Сотрудник = РаботникиОрганизации.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = ГрафикиСотрудниковТекст;
	Запрос.Выполнить();
	
	ДанныеИндивидуальныхГрафиковИТабелейТекст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	ГрафикиРаботыПоВидамВремени.План КАК План
	|ПОМЕСТИТЬ ВТДанныеИндивидуальныхГрафиковИТабелей
	|ИЗ
	|	ВТСтрокиНачислений КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СтрокиНачисления.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаНачалаСобытия,МЕСЯЦ) = ГрафикиРаботыПоВидамВремени.Месяц
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	План";
	
	Запрос.Текст = ДанныеИндивидуальныхГрафиковИТабелейТекст;
	Запрос.Выполнить();

	
	// СводныеИндивидуальныеГрафикиРаботы
	//		таблица содержит номера строк документа с сотрудниками, для которых введены сводные 
	//		данные об их графике
	// 
	//	Поля:
	//		НомерСтроки
	// 
	
	СводныеИндивидуальныеГрафикиРаботыТекст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокРаботников.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафикиРаботы
	|ИЗ
	|	ВТСтрокиНачислений КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО СписокРаботников.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И НАЧАЛОПЕРИОДА(СписокРаботников.ДатаНачалаСобытия,МЕСЯЦ) = СводныеИндивидуальныеГрафики.Месяц
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = СводныеИндивидуальныеГрафикиРаботыТекст;
	Запрос.Выполнить();
	

 	
	ГрафикиРаботыТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Основные.ФизЛицо КАК ФизЛицо,
	|	Основные.ПериодДействия,
	|	Основные.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТГрафикиРаботы
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Основной.ФизЛицо КАК ФизЛицо,
	|		Основной.ПериодДействия КАК ПериодДействия,
	|		Основной.ГрафикРаботы КАК ГрафикРаботы
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК Физлица
	|			ПО Основной.ФизЛицо = Физлица.ФизЛицо
	|	ГДЕ
	|		Основной.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|		И Основной.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|		И Основной.ПериодРегистрации МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СтрокиНачисления.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаНачалаСобытия,МЕСЯЦ),
	|		ВЫБОР
	|			КОГДА ГрафикРаботыПоСотруднику.НомерСтроки ЕСТЬ NULL 
	|				ТОГДА РаботникиОрганизации.ГрафикРаботы
	|			ИНАЧЕ СтрокиНачисления.Сотрудник
	|		КОНЕЦ
	|	ИЗ
	|		ВТСтрокиНачислений КАК СтрокиНачисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК Физлица
	|			ПО СтрокиНачисления.ФизЛицо = Физлица.ФизЛицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСотрудников КАК РаботникиОрганизации
	|			ПО СтрокиНачисления.НомерСтроки = РаботникиОрганизации.НомерСтроки
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|			ИЗ
	|				ВТДанныеИндивидуальныхГрафиковИТабелей КАК СтрокиНачисления) КАК ГрафикРаботыПоСотруднику
	|			ПО СтрокиНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки) КАК Основные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	ГрафикРаботы";
	
	Запрос.Текст = ГрафикиРаботыТекст;
	Запрос.Выполнить();
	    	
	НормаВремениПоОбщемуГрафикуТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК НормаДней,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма) КАК НормаЧасов,
	|	ГрафикиРаботы.ФизЛицо КАК ФизЛицо,
	|	ГрафикиРаботы.ПериодДействия КАК ПериодДействия
	|ПОМЕСТИТЬ ВТНормаЗаМесяц
	|ИЗ
	|	ВТГрафикиРаботы КАК ГрафикиРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ГрафикиРаботы.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И ГрафикиРаботы.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
	|			И (ГрафикиРаботыПоВидамВремени.План)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиРаботы.ФизЛицо,
	|	ГрафикиРаботы.ПериодДействия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	ПериодДействия";
	
	
	Запрос.Текст = НормаВремениПоОбщемуГрафикуТекст;
	Запрос.Выполнить();
	
	ОтработанноеВремя =
	"ВЫБРАТЬ
	|	ОтработанноеВремя.ФизЛицо,
	|	СУММА(ВЫБОР
	|			КОГДА ОтработанноеВремя.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
	|				ТОГДА ОтработанноеВремя.ОтработаноЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтработаноЧасов,
	|	ВЫБОР
	|		КОГДА ДатыПриемаИУвольнения.ДатаПриема > ОтработанноеВремя.Месяц
	|				ИЛИ ДатыПриемаИУвольнения.ДатаУвольнения < ОтработанноеВремя.Месяц
	|			ТОГДА НормаЗаМесяц.НормаЧасов
	|		ИНАЧЕ СУММА(ОтработанноеВремя.НормаЧасов)
	|	КОНЕЦ КАК НормаЧасов,
	|	ОтработанноеВремя.Месяц КАК Месяц
	|ПОМЕСТИТЬ ВТОтработанноеВремя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо КАК ФизЛицо,
	|		СУММА(ВЫБОР
	|				КОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
	|					ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ОтработаноЧасов
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ОтработаноЧасов,
	|		СУММА(ОсновныеНачисленияРаботниковОрганизаций.НормаЧасов) КАК НормаЧасов,
	|		НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, МЕСЯЦ) КАК Месяц,
	|		ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.ВидВремени КАК ВидВремени
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК Физлица
	|			ПО ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо = Физлица.ФизЛицо
	|	ГДЕ
	|		ОсновныеНачисленияРаботниковОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|		И ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &парамНачалоМесяцаПериодаРегистрации И &парамКонецМесяцаПериодаРегистрации
	|		И ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение В(&СписокВсехПодразделенийОрганизации)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, МЕСЯЦ),
	|		ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.ВидВремени
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОсновныеНачисленияРаботниковОрганизаций.Физлицо,
	|		СУММА(ВЫБОР
	|				КОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
	|					ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ОтработаноЧасов
	|				ИНАЧЕ 0
	|			КОНЕЦ),
	|		СУММА(ОсновныеНачисленияРаботниковОрганизаций.НормаЧасов),
	|		НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ДатаНачала, МЕСЯЦ),
	|		ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.ВидВремени
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК ОсновныеНачисленияРаботниковОрганизаций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизЛица КАК Физлица
	|			ПО ОсновныеНачисленияРаботниковОрганизаций.Физлицо = Физлица.ФизЛицо
	|	ГДЕ
	|		ОсновныеНачисленияРаботниковОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|		И ОсновныеНачисленияРаботниковОрганизаций.Ссылка = &Регистратор
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОсновныеНачисленияРаботниковОрганизаций.Физлицо,
	|		НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ДатаНачала, МЕСЯЦ),
	|		ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.ВидВремени) КАК ОтработанноеВремя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПриемаИУвольнения КАК ДатыПриемаИУвольнения
	|		ПО ОтработанноеВремя.ФизЛицо = ДатыПриемаИУвольнения.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаЗаМесяц КАК НормаЗаМесяц
	|		ПО ОтработанноеВремя.ФизЛицо = НормаЗаМесяц.ФизЛицо
	|			И (ОтработанноеВремя.Месяц = НАЧАЛОПЕРИОДА(НормаЗаМесяц.ПериодДействия, МЕСЯЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтработанноеВремя.ФизЛицо,
	|	ОтработанноеВремя.Месяц,
	|	ДатыПриемаИУвольнения.ДатаПриема,
	|	ДатыПриемаИУвольнения.ДатаУвольнения,
	|	НормаЗаМесяц.НормаЧасов";
	
	Запрос.Текст = ОтработанноеВремя;
	Запрос.Выполнить();


	ДляИсчисленияЕСНТекст = 
	"ВЫБРАТЬ
	|	ДанныеФСЗН.ФизЛицо КАК ФизЛицо,
	|	ДанныеФСЗН.Месяц КАК Месяц,
	|	ДанныеФСЗН.Группа,
	|	ЕСТЬNULL(ДанныеОМЗП.Размер, 0) КАК РазмерМЗП,
	|	ЕСТЬNULL(ОтработанноеВремя.ОтработаноЧасов, 0) КАК ОтработаноЧасов,
	|	ЕСТЬNULL(ОтработанноеВремя.НормаЧасов, 0) КАК НормаЧасов,
	|	СУММА(ДанныеФСЗН.БазаДоходФСЗНБезГПХ) КАК БазаДоходФСЗНБезГПХ,
	|	СУММА(ДанныеФСЗН.БазаДоходФСЗНПоГПХ) КАК БазаДоходФСЗНПоГПХ,
	|	СУММА(ДанныеФСЗН.БазаДоходСтрахБезГПХ) КАК БазаДоходСтрахБезГПХ,
	|	СУММА(ДанныеФСЗН.БазаДоходСтрахПоГПХ) КАК БазаДоходСтрахПоГПХ,
	|	СУММА(ДанныеФСЗН.БазаДоходЕдиныйПлатеж) КАК БазаДоходЕдиныйПлатеж,
	|	СУММА(ДанныеФСЗН.ПенсионныйФонд) КАК ПенсионныйФонд,
	|	СУММА(ДанныеФСЗН.НачисленныйФСЗН) КАК НачисленныйФСЗН,
	|	СУММА(ДанныеФСЗН.НачисленныйСтрах) КАК НачисленныйСтрах,
	|	СУММА(ДанныеФСЗН.НачисленныйЕдиныйПлатеж) КАК НачисленныйЕдиныйПлатеж,
	|	ВТДанныеОПравеНаПенсию.ВидЗастрахованногоЛица
	|ИЗ
	|	(ВЫБРАТЬ
	|		БазаДляНачислений.ФизЛицо КАК ФизЛицо,
	|		БазаДляНачислений.Месяц КАК Месяц,
	|		БазаДляНачислений.Группа КАК Группа,
	|		БазаДляНачислений.БазаДоходФСЗНБезГПХ КАК БазаДоходФСЗНБезГПХ,
	|		БазаДляНачислений.БазаДоходФСЗНПоГПХ КАК БазаДоходФСЗНПоГПХ,
	|		БазаДляНачислений.БазаДоходСтрахБезГПХ КАК БазаДоходСтрахБезГПХ,
	|		БазаДляНачислений.БазаДоходСтрахПоГПХ КАК БазаДоходСтрахПоГПХ,
	|		БазаДляНачислений.БазаДоходЕдиныйПлатеж КАК БазаДоходЕдиныйПлатеж,
	|		0 КАК ПенсионныйФонд,
	|		0 КАК НачисленныйФСЗН,
	|		0 КАК НачисленныйСтрах,
	|		0 КАК НачисленныйЕдиныйПлатеж
	|	ИЗ
	|		ВТОблагаемаяБаза КАК БазаДляНачислений
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Отчсиления.ФизЛицо,
	|		Отчсиления.Месяц,
	|		Отчсиления.Группа,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		Отчсиления.ПенсионныйФонд,
	|		Отчсиления.ФСЗН,
	|		Отчсиления.ОбязательноеСтрахование,
	|		Отчсиления.ЕдиныйПлатеж
	|	ИЗ
	|		ВТЕСНИсчисленный КАК Отчсиления) КАК ДанныеФСЗН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОМЗП КАК ДанныеОМЗП
	|		ПО ДанныеФСЗН.Месяц = ДанныеОМЗП.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработанноеВремя КАК ОтработанноеВремя
	|		ПО ДанныеФСЗН.ФизЛицо = ОтработанноеВремя.ФизЛицо
	|			И ДанныеФСЗН.Месяц = ОтработанноеВремя.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПравеНаПенсию КАК ВТДанныеОПравеНаПенсию
	|		ПО ДанныеФСЗН.ФизЛицо = ВТДанныеОПравеНаПенсию.ФизЛицо
	|			И ДанныеФСЗН.Месяц = ВТДанныеОПравеНаПенсию.Месяц
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеФСЗН.ФизЛицо,
	|	ДанныеФСЗН.Месяц,
	|	ДанныеФСЗН.Группа,
	|	ДанныеОМЗП.Размер,
	|	ОтработанноеВремя.ОтработаноЧасов,
	|	ОтработанноеВремя.НормаЧасов,
	|	ВТДанныеОПравеНаПенсию.ВидЗастрахованногоЛица
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	Месяц";
	
	Запрос.Текст = ДляИсчисленияЕСНТекст;

	
	ВременнаяТаблица =  Запрос.Выполнить().Выгрузить();
	Возврат ВременнаяТаблица;

КонецФункции  // ПолучитьДанныеРасчетаЕСН

// Процедура рассчитывает проценты и сумму погашения займа
// и заполняет реквизиты табличной части
//
Процедура РассчитатьПогашениеЗаймов(Физлицо = Неопределено) Экспорт 
	
	Если  мВалютаРегламентиованногоУчета = Неопределено тогда
		мВалютаРегламентиованногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамРегистратор",Ссылка);
	Запрос.УстановитьПараметр("парамВалютаРегламентУчета" , Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("парамКонецГода",КонецГода(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамОрганизация" , Организация);
	Запрос.УстановитьПараметр("НачалоРасчетногоПериода",ПериодНачисленияДатаНачала);
	Запрос.УстановитьПараметр("КонецРасчетногоПериода",КонецДня(ПериодНачисленияДатаОкончания));
	Запрос.УстановитьПараметр("ДнейВГоду",(КонецГода(ПериодРегистрации) + 1 - НачалоГода(ПериодРегистрации)) / 86400);
	Запрос.УстановитьПараметр("СтавкаРезидента", ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35));
	Запрос.УстановитьПараметр("СтавкаНеРезидента", ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛСНерезидента());
	Запрос.УстановитьПараметр("парамФизлицо", Физлицо);
	Запрос.УстановитьПараметр("ПоВсемФИзЛИцам", Не ЗначениеЗаполнено(Физлицо));

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Работники.ФизЛицо КАК ФизЛицо,
	|	Работники.ДоговорЗайма КАК ДоговорЗайма,
	|	Работники.НомерСтроки,
	|	Работники.ПодразделениеОрганизации,
	|	Работники.СтавкаНалогообложенияМатвыгоды,
	|	Работники.Сторно,
	|	Работники.НачисленоПроцентов,
	|	Работники.ПогашеноПроцентов,
	|	Работники.ПогашеноЗайма,
	|	Работники.МатериальнаяВыгода,
	|	Работники.НалогНаМатериальнуюВыгоду,
	|	Работники.Ссылка.Организация
	|ПОМЕСТИТЬ ВТСписокФизлицДоговоров
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК Работники
	|ГДЕ
	|	Работники.Ссылка = &парамРегистратор
	|	И (&ПоВсемФИзЛИцам
	|			ИЛИ Работники.ФизЛицо В (&парамФизлицо))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	ДоговорЗайма";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВсеДанные.ФизЛицо КАК ФизЛицо,
	|	ВсеДанные.Организация,
	|	ВсеДанные.Период,
	|	СУММА(ВсеДанные.ОсновнойДолгКонечныйОстаток) КАК ОсновнойДолгКонечныйОстаток,
	|	СУММА(ВсеДанные.ПроцентыНачальныйОстаток) КАК ПроцентыНачальныйОстаток,
	|	СУММА(ВсеДанные.ПроцентыОборот) КАК ПроцентыОборот,
	|	СУММА(ВсеДанные.ПроцентыПриход) КАК ПроцентыПриход,
	|	СУММА(ВсеДанные.ПроцентыРасход) КАК ПроцентыРасход,
	|	ВсеДанные.ДоговорЗайма КАК ДоговорЗайма,
	|	ВсеДанные.ДоговорЗаймаДата,
	|	ВсеДанные.ДоговорЗаймаПроцентЗаПользованиеЗаймом,
	|	ВсеДанные.ДоговорЗаймаНачислятьМатериальнуюВыгоду,
	|	ВсеДанные.ДоговорЗаймаСтавкаНалогообложенияМатВыгоды,
	|	ВсеДанные.ДоговорЗаймаПорядокПогашенияЗайма,
	|	ВсеДанные.ДоговорЗаймаСрокПогашения,
	|	ВсеДанные.ДоговорЗаймаНачалоПогашения,
	|	ВсеДанные.ДоговорЗаймаСуммаЗайма,
	|	ВсеДанные.ДоговорЗаймаВалютаДокумента,
	|	ВсеДанные.ДоговорЗаймаКурсДокумента,
	|	ВсеДанные.ДоговорЗаймаКратностьДокумента
	|ПОМЕСТИТЬ ВТОстаткиИОбороты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПогашениеЗаймов.ФизЛицо КАК ФизЛицо,
	|		ПогашениеЗаймов.Организация КАК Организация,
	|		ПогашениеЗаймов.Период КАК Период,
	|		ПогашениеЗаймов.ОсновнойДолгКонечныйОстаток КАК ОсновнойДолгКонечныйОстаток,
	|		ПогашениеЗаймов.ПроцентыНачальныйОстаток КАК ПроцентыНачальныйОстаток,
	|		ПогашениеЗаймов.ПроцентыОборот КАК ПроцентыОборот,
	|		ПогашениеЗаймов.ПроцентыПриход КАК ПроцентыПриход,
	|		ПогашениеЗаймов.ПроцентыРасход КАК ПроцентыРасход,
	|		ПогашениеЗаймов.ДоговорЗайма КАК ДоговорЗайма,
	|		ПогашениеЗаймов.ДоговорЗайма.Дата КАК ДоговорЗаймаДата,
	|		ПогашениеЗаймов.ДоговорЗайма.ПроцентЗаПользованиеЗаймом КАК ДоговорЗаймаПроцентЗаПользованиеЗаймом,
	|		ПогашениеЗаймов.ДоговорЗайма.НачислятьМатериальнуюВыгоду КАК ДоговорЗаймаНачислятьМатериальнуюВыгоду,
	|		ПогашениеЗаймов.ДоговорЗайма.СтавкаНалогообложенияРезидента КАК ДоговорЗаймаСтавкаНалогообложенияМатВыгоды,
	|		ПогашениеЗаймов.ДоговорЗайма.ПорядокПогашенияЗайма КАК ДоговорЗаймаПорядокПогашенияЗайма,
	|		ПогашениеЗаймов.ДоговорЗайма.СрокПогашения КАК ДоговорЗаймаСрокПогашения,
	|		ПогашениеЗаймов.ДоговорЗайма.НачалоПогашения КАК ДоговорЗаймаНачалоПогашения,
	|		ПогашениеЗаймов.ДоговорЗайма.СуммаЗайма КАК ДоговорЗаймаСуммаЗайма,
	|		ПогашениеЗаймов.ДоговорЗайма.ВалютаДокумента КАК ДоговорЗаймаВалютаДокумента,
	|		ПогашениеЗаймов.ДоговорЗайма.КурсДокумента КАК ДоговорЗаймаКурсДокумента,
	|		ПогашениеЗаймов.ДоговорЗайма.КратностьДокумента КАК ДоговорЗаймаКратностьДокумента
	|	ИЗ
	|		РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций.ОстаткиИОбороты(
	|				&НачалоРасчетногоПериода,
	|				&КонецРасчетногоПериода,
	|				День,
	|				ДвиженияИГраницыПериода,
	|				Организация = &парамОрганизация
	|					И ДоговорЗайма В
	|						(ВЫБРАТЬ
	|							СписокДоговоров.ДоговорЗайма
	|						ИЗ
	|							ВТСписокФизлицДоговоров КАК СписокДоговоров)) КАК ПогашениеЗаймов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПогашениеЗаймов.ФизЛицо,
	|		ПогашениеЗаймов.Организация,
	|		&КонецРасчетногоПериода,
	|		-ПогашениеЗаймов.ПогашеноЗайма + ПогашениеЗаймов.ПогашеноПроцентов,
	|		0,
	|		ПогашениеЗаймов.НачисленоПроцентов - ПогашениеЗаймов.ПогашеноПроцентов,
	|		ПогашениеЗаймов.НачисленоПроцентов,
	|		ПогашениеЗаймов.ПогашеноПроцентов,
	|		ПогашениеЗаймов.ДоговорЗайма,
	|		ПогашениеЗаймов.ДоговорЗайма.Дата,
	|		ПогашениеЗаймов.ДоговорЗайма.ПроцентЗаПользованиеЗаймом,
	|		ПогашениеЗаймов.ДоговорЗайма.НачислятьМатериальнуюВыгоду,
	|		ПогашениеЗаймов.ДоговорЗайма.СтавкаНалогообложенияРезидента,
	|		ПогашениеЗаймов.ДоговорЗайма.ПорядокПогашенияЗайма,
	|		ПогашениеЗаймов.ДоговорЗайма.СрокПогашения,
	|		ПогашениеЗаймов.ДоговорЗайма.НачалоПогашения,
	|		ПогашениеЗаймов.ДоговорЗайма.СуммаЗайма,
	|		ПогашениеЗаймов.ДоговорЗайма.ВалютаДокумента,
	|		ПогашениеЗаймов.ДоговорЗайма.КурсДокумента,
	|		ПогашениеЗаймов.ДоговорЗайма.КратностьДокумента
	|	ИЗ
	|		ВТСписокФизлицДоговоров КАК ПогашениеЗаймов
	|	ГДЕ
	|		ПогашениеЗаймов.Сторно) КАК ВсеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеДанные.ФизЛицо,
	|	ВсеДанные.Организация,
	|	ВсеДанные.Период,
	|	ВсеДанные.ДоговорЗайма,
	|	ВсеДанные.ДоговорЗаймаДата,
	|	ВсеДанные.ДоговорЗаймаПроцентЗаПользованиеЗаймом,
	|	ВсеДанные.ДоговорЗаймаНачислятьМатериальнуюВыгоду,
	|	ВсеДанные.ДоговорЗаймаСтавкаНалогообложенияМатВыгоды,
	|	ВсеДанные.ДоговорЗаймаПорядокПогашенияЗайма,
	|	ВсеДанные.ДоговорЗаймаСрокПогашения,
	|	ВсеДанные.ДоговорЗаймаНачалоПогашения,
	|	ВсеДанные.ДоговорЗаймаСуммаЗайма,
	|	ВсеДанные.ДоговорЗаймаВалютаДокумента,
	|	ВсеДанные.ДоговорЗаймаКурсДокумента,
	|	ВсеДанные.ДоговорЗаймаКратностьДокумента
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВсеДанные.ОсновнойДолгКонечныйОстаток) <> 0
	|		ИЛИ СУММА(ВсеДанные.ПроцентыПриход) <> 0
	|		ИЛИ СУММА(ВсеДанные.ПроцентыОборот) <> 0
	|		ИЛИ СУММА(ВсеДанные.ПроцентыНачальныйОстаток) <> 0
	|		ИЛИ СУММА(ВсеДанные.ПроцентыРасход) <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	ДоговорЗайма";
	Запрос.Выполнить();
	
	// ТаблицаПериодыПогашения
	// Описание
	// 1.из таблицы остатков и оборотов рег-ра ПогашениеЗаймовРаботникамиОрганизаций (выборка ПогашениеЗаймов)
	// выбираются дни, в которые были произведены какие-либо движения по займу - период движений определяет  
	// начало периода погашения (в течение которого остаток долга не изменяется) - поле ДатаС;
	// рассчитывается остаток основного долга на конец месяца (поле ОсновнойДолгНаКонецМесяца)
	// рассчитывается остаток непогашенных процентов на начало месяца (поле ПроцентыНачальныйОстаток)
	// 2.из основной таблицы того же рег-ра присоединяются даты окончания периодов погашения - поле ДатаПО  
	// 3.из договора займа выбираются его параметры: проценты, сумма займа (переведенная в валюту регламентированного учета),
	// флажок исчисления мат.выгоды и пр.
	// 4.из рег-ра сведений о ставке рефинансирования РФ выбираем дату, непосредственно предшествующую дате 
	// получения дохода в виде матвыгоды, т.е. дате начисления процентов или окончанию месяца для беспроцентных
	// займов (до 1.1.2008 - дате Договора займа)
	//
	//
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПериодыПогашения.ДатаС,
	|	ПериодыПогашения.ДатаПО,
	|	ПериодыПогашения.ФизЛицо КАК ФизЛицо,
	|	ПериодыПогашения.ДоговорЗайма,
	|	ПериодыПогашения.ДоговорЗаймаПроцентЗаПользованиеЗаймом,
	|	ПериодыПогашения.ДоговорЗаймаНачислятьМатериальнуюВыгоду,
	|	ПериодыПогашения.ДоговорЗаймаСтавкаНалогообложенияМатВыгоды,
	|	ПериодыПогашения.ПорядокПогашенияЗайма,
	|	ПериодыПогашения.ДоговорЗаймаНачалоПогашения,
	|	ПериодыПогашения.ДоговорЗаймаСрокПогашения,
	|	ПериодыПогашения.СуммаЗайма,
	|	ПериодыПогашения.ОсновнойДолгКонечныйОстаток,
	|	ПериодыПогашения.ОсновнойДолгНаКонецМесяца,
	|	ПериодыПогашения.ПроцентыПриход,
	|	ПериодыПогашения.ПроцентыРасход,
	|	ПериодыПогашения.ПроцентыОборот,
	|	ПериодыПогашения.ПроцентыНачальныйОстаток,
	|	МАКСИМУМ(СтавкаРефинансированияЦБ.Период) КАК ДатаСтавкиРефинансирования
	|ПОМЕСТИТЬ ВТПериодыПогашения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПогашениеЗаймов.Период КАК ДатаС,
	|		ВЫБОР
	|			КОГДА МИНИМУМ(НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, ДЕНЬ)) > &КонецРасчетногоПериода
	|					ИЛИ МИНИМУМ(НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, ДЕНЬ)) ЕСТЬ NULL 
	|				ТОГДА &КонецРасчетногоПериода
	|			ИНАЧЕ МИНИМУМ(НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, ДЕНЬ))
	|		КОНЕЦ КАК ДатаПО,
	|		ПогашениеЗаймов.ФизЛицо КАК ФизЛицо,
	|		ПогашениеЗаймов.ДоговорЗайма КАК ДоговорЗайма,
	|		ПогашениеЗаймов.ДоговорЗаймаДата КАК ДоговорЗаймаДата,
	|		ПогашениеЗаймов.ДоговорЗаймаПроцентЗаПользованиеЗаймом КАК ДоговорЗаймаПроцентЗаПользованиеЗаймом,
	|		ПогашениеЗаймов.ДоговорЗаймаНачислятьМатериальнуюВыгоду КАК ДоговорЗаймаНачислятьМатериальнуюВыгоду,
	|		ПогашениеЗаймов.ДоговорЗаймаСтавкаНалогообложенияМатВыгоды КАК ДоговорЗаймаСтавкаНалогообложенияМатВыгоды,
	|		ПогашениеЗаймов.ДоговорЗаймаПорядокПогашенияЗайма КАК ПорядокПогашенияЗайма,
	|		ВЫБОР
	|			КОГДА ПогашениеЗаймов.ДоговорЗаймаНачалоПогашения < ПогашениеЗаймов.ДоговорЗаймаДата
	|				ТОГДА ПогашениеЗаймов.ДоговорЗаймаДата
	|			ИНАЧЕ ПогашениеЗаймов.ДоговорЗаймаНачалоПогашения
	|		КОНЕЦ КАК ДоговорЗаймаНачалоПогашения,
	|		ПогашениеЗаймов.ДоговорЗаймаСрокПогашения КАК ДоговорЗаймаСрокПогашения,
	|		ПогашениеЗаймов.ДоговорЗаймаСуммаЗайма * ВЫБОР
	|			КОГДА ПогашениеЗаймов.ДоговорЗаймаВалютаДокумента В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|				ТОГДА 1
	|			ИНАЧЕ ПогашениеЗаймов.ДоговорЗаймаКурсДокумента / ПогашениеЗаймов.ДоговорЗаймаКратностьДокумента
	|		КОНЕЦ КАК СуммаЗайма,
	|		ПогашениеЗаймов.ОсновнойДолгКонечныйОстаток КАК ОсновнойДолгКонечныйОстаток,
	|		ВЫБОР
	|			КОГДА КОНЕЦПЕРИОДА(ПогашениеЗаймов.Период, ДЕНЬ) = &КонецРасчетногоПериода
	|				ТОГДА ПогашениеЗаймов.ОсновнойДолгКонечныйОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОсновнойДолгНаКонецМесяца,
	|		ПогашениеЗаймов.ПроцентыПриход КАК ПроцентыПриход,
	|		ПогашениеЗаймов.ПроцентыРасход КАК ПроцентыРасход,
	|		ПогашениеЗаймов.ПроцентыОборот КАК ПроцентыОборот,
	|		ВЫБОР
	|			КОГДА ПогашениеЗаймов.Период = &НачалоРасчетногоПериода
	|				ТОГДА ПогашениеЗаймов.ПроцентыНачальныйОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПроцентыНачальныйОстаток
	|	ИЗ
	|		ВТОстаткиИОбороты КАК ПогашениеЗаймов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций КАК ПогашениеЗаймовРаботникамиОрганизаций
	|			ПО ПогашениеЗаймов.ФизЛицо = ПогашениеЗаймовРаботникамиОрганизаций.ФизЛицо
	|				И ПогашениеЗаймов.Организация = ПогашениеЗаймовРаботникамиОрганизаций.Организация
	|				И ПогашениеЗаймов.ДоговорЗайма = ПогашениеЗаймовРаботникамиОрганизаций.ДоговорЗайма
	|				И (ПогашениеЗаймов.Период < НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, ДЕНЬ))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПогашениеЗаймов.Период,
	|		ПогашениеЗаймов.ФизЛицо,
	|		ПогашениеЗаймов.ПроцентыНачальныйОстаток,
	|		ПогашениеЗаймов.ОсновнойДолгКонечныйОстаток,
	|		ПогашениеЗаймов.ПроцентыПриход,
	|		ПогашениеЗаймов.ДоговорЗайма,
	|		ПогашениеЗаймов.ПроцентыРасход,
	|		ПогашениеЗаймов.ПроцентыОборот,
	|		ПогашениеЗаймов.ДоговорЗаймаДата,
	|		ПогашениеЗаймов.ДоговорЗаймаПроцентЗаПользованиеЗаймом,
	|		ПогашениеЗаймов.ДоговорЗаймаНачислятьМатериальнуюВыгоду,
	|		ПогашениеЗаймов.ДоговорЗаймаСтавкаНалогообложенияМатВыгоды,
	|		ПогашениеЗаймов.ДоговорЗаймаПорядокПогашенияЗайма,
	|		ПогашениеЗаймов.ДоговорЗаймаСрокПогашения,
	|		ВЫБОР
	|			КОГДА ПогашениеЗаймов.ДоговорЗаймаНачалоПогашения < ПогашениеЗаймов.ДоговорЗаймаДата
	|				ТОГДА ПогашениеЗаймов.ДоговорЗаймаДата
	|			ИНАЧЕ ПогашениеЗаймов.ДоговорЗаймаНачалоПогашения
	|		КОНЕЦ,
	|		ПогашениеЗаймов.ДоговорЗаймаСуммаЗайма * ВЫБОР
	|			КОГДА ПогашениеЗаймов.ДоговорЗаймаВалютаДокумента В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|				ТОГДА 1
	|			ИНАЧЕ ПогашениеЗаймов.ДоговорЗаймаКурсДокумента / ПогашениеЗаймов.ДоговорЗаймаКратностьДокумента
	|		КОНЕЦ) КАК ПериодыПогашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкаРефинансированияЦБ КАК СтавкаРефинансированияЦБ
	|		ПО (ВЫБОР
	|				КОГДА ГОД(ПериодыПогашения.ДатаС) < 2008
	|					ТОГДА ПериодыПогашения.ДоговорЗаймаДата
	|				КОГДА ПериодыПогашения.ПроцентыПриход > 0
	|					ТОГДА ПериодыПогашения.ДатаПО
	|				КОГДА ПериодыПогашения.ОсновнойДолгНаКонецМесяца = 0
	|					ТОГДА ПериодыПогашения.ДатаПО
	|				ИНАЧЕ &КонецРасчетногоПериода
	|			КОНЕЦ >= СтавкаРефинансированияЦБ.Период)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыПогашения.ДатаС,
	|	ПериодыПогашения.ДатаПО,
	|	ПериодыПогашения.ФизЛицо,
	|	ПериодыПогашения.ДоговорЗайма,
	|	ПериодыПогашения.ДоговорЗаймаПроцентЗаПользованиеЗаймом,
	|	ПериодыПогашения.ДоговорЗаймаНачислятьМатериальнуюВыгоду,
	|	ПериодыПогашения.ДоговорЗаймаСтавкаНалогообложенияМатВыгоды,
	|	ПериодыПогашения.ПорядокПогашенияЗайма,
	|	ПериодыПогашения.ДоговорЗаймаНачалоПогашения,
	|	ПериодыПогашения.ДоговорЗаймаСрокПогашения,
	|	ПериодыПогашения.СуммаЗайма,
	|	ПериодыПогашения.ОсновнойДолгКонечныйОстаток,
	|	ПериодыПогашения.ОсновнойДолгНаКонецМесяца,
	|	ПериодыПогашения.ПроцентыПриход,
	|	ПериодыПогашения.ПроцентыРасход,
	|	ПериодыПогашения.ПроцентыОборот,
	|	ПериодыПогашения.ПроцентыНачальныйОстаток
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	Запрос.Выполнить();
	
	// Основной текст запроса
	// 1. Выборка ДанныеОПогашении
	//  поле ПогашатьЗаймВЭтомМесяце - Определяем, нужно ли погашать займ по условиям договора в текущем месяце
	//  поле ПогашеноЗайма - Рассчитывается сумма займа к погашению: как месячная доля займа или 
	//                       остаток по основному долгу на конец месяца - по условиям договора
	//  поля ПроцентыПриход и ПроцентыРасход - Суммируются начисленные и погашенные проценты по займу за месяц
	//  поле ПроцентыНачальныйОстаток - остаток непогашенных процентов на начало месяца, также будет предложен у погашению
	//  поле НачисленоПроцентов - Рассчитывается сумма процентов к начислению за месяц (по ежедневным 
	//      остаткам основного долга) как сумма по всем периодам из таблицы ПериодыПогашения начисленных по 
	//      следующей формуле процентов: 
	//            %% к начислению за период = кадендарных дней в периоде / кадендарных дней в году * процент по займу
	//  поле ПоСтавкеРефинансирования - Рассчитывается сумма процентов за месяц по ставке рефинансирования ЦБ РФ
	//        на дату Договора займа
	//  поле СтавкаНДФЛ - определяется ставка налогообложения мат.выгоды по займу налогом на доходы физлиц
	// 2. В основной выборке рассчитываются все показатели т.ч. документа
	//  поле НачисленоПроцентов - доначисляются проценты за пользование займом
	//  поле ПогашеноПроцентов - если займ в текущем месяце погашается, предлагается остаток %% с учетом начисленных за месяц
	//  поле ПогашеноЗайма - если займ в текущем месяце погашается, предлагается рассчитанная ранее сумма к 
	//                       погашению основного долга + сумма погашаемых %%
	//  поля МатериальнаяВыгода и НалогНаМатериальнуюВыгоду содержат соответственно сумму дохода и НДФЛ
	//

	ТекстОстаткиЗаймов = 
	"ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ФизЛицо,
	|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ПодразделениеОрганизации,
	|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ДоговорЗайма,
	|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.СтавкаНалогообложенияМатвыгоды,
	|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.Сторно
	|			ТОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.НачисленоПроцентов
	|		КОГДА ДанныеОПогашении.НачисленоПроцентов > ДанныеОПогашении.ПроцентыПриход
	|			ТОГДА ДанныеОПогашении.НачисленоПроцентов - ДанныеОПогашении.ПроцентыПриход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоПроцентов,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.Сторно
	|			ТОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ПогашеноПроцентов
	|		КОГДА ДанныеОПогашении.ПогашатьЗаймВЭтомМесяце
	|			ТОГДА ДанныеОПогашении.НачисленоПроцентов + ДанныеОПогашении.ПроцентыНачальныйОстаток - ДанныеОПогашении.ПроцентыРасход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПогашеноПроцентов,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.Сторно
	|			ТОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ПогашеноЗайма
	|		КОГДА ДанныеОПогашении.ПогашатьЗаймВЭтомМесяце
	|			ТОГДА ДанныеОПогашении.ПогашеноЗайма + ДанныеОПогашении.НачисленоПроцентов + ДанныеОПогашении.ПроцентыНачальныйОстаток - ДанныеОПогашении.ПроцентыРасход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПогашеноЗайма,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.Сторно
	|			ТОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.МатериальнаяВыгода
	|		КОГДА ДанныеОПогашении.ПоСтавкеРефинансирования > ДанныеОПогашении.НачисленоПроцентов
	|			ТОГДА ДанныеОПогашении.ПоСтавкеРефинансирования - ДанныеОПогашении.НачисленоПроцентов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МатериальнаяВыгода,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.Сторно
	|			ТОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.НалогНаМатериальнуюВыгоду
	|		КОГДА ДанныеОПогашении.ДоговорЗаймаСтавкаНалогообложенияМатВыгоды = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА ДанныеОПогашении.ПоСтавкеРефинансирования > ДанныеОПогашении.НачисленоПроцентов
	|							ТОГДА ДанныеОПогашении.ПоСтавкеРефинансирования - ДанныеОПогашении.НачисленоПроцентов
	|						ИНАЧЕ 0
	|					КОНЕЦ * ДанныеОПогашении.СтавкаНДФЛ / 100 КАК ЧИСЛО(13, 0))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НалогНаМатериальнуюВыгоду,
	|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.Сторно
	|ИЗ
	|	ВТСписокФизлицДоговоров КАК НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыПогашения.ФизЛицо КАК ФизЛицо,
	|			ПериодыПогашения.ДоговорЗайма КАК ДоговорЗайма,
	|			ПериодыПогашения.ДоговорЗаймаСтавкаНалогообложенияМатВыгоды КАК ДоговорЗаймаСтавкаНалогообложенияМатВыгоды,
	|			ВЫБОР
	|				КОГДА ПериодыПогашения.ПорядокПогашенияЗайма = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияЗаймаПроцентов.ПоОкончанииСрока)
	|						И &КонецРасчетногоПериода >= ДОБАВИТЬКДАТЕ(ПериодыПогашения.ДоговорЗаймаНачалоПогашения, МЕСЯЦ, ПериодыПогашения.ДоговорЗаймаСрокПогашения)
	|					ТОГДА ИСТИНА
	|				КОГДА ПериодыПогашения.ПорядокПогашенияЗайма <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияЗаймаПроцентов.ПоОкончанииСрока)
	|						И &КонецРасчетногоПериода >= ПериодыПогашения.ДоговорЗаймаНачалоПогашения
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ПогашатьЗаймВЭтомМесяце,
	|			ВЫБОР
	|				КОГДА ПериодыПогашения.ПорядокПогашенияЗайма = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияЗаймаПроцентов.ПоОкончанииСрока)
	|					ТОГДА МАКСИМУМ(ПериодыПогашения.ОсновнойДолгНаКонецМесяца)
	|				КОГДА ПериодыПогашения.СуммаЗайма / ПериодыПогашения.ДоговорЗаймаСрокПогашения > МАКСИМУМ(ПериодыПогашения.ОсновнойДолгНаКонецМесяца)
	|					ТОГДА МАКСИМУМ(ПериодыПогашения.ОсновнойДолгНаКонецМесяца)
	|				ИНАЧЕ ПериодыПогашения.СуммаЗайма / ПериодыПогашения.ДоговорЗаймаСрокПогашения
	|			КОНЕЦ КАК ПогашеноЗайма,
	|			СУММА(ПериодыПогашения.ПроцентыНачальныйОстаток) КАК ПроцентыНачальныйОстаток,
	|			СУММА(ПериодыПогашения.ПроцентыПриход) КАК ПроцентыПриход,
	|			СУММА(ПериодыПогашения.ПроцентыРасход) КАК ПроцентыРасход,
	|			СУММА(ВЫРАЗИТЬ(ПериодыПогашения.ОсновнойДолгКонечныйОстаток * РАЗНОСТЬДАТ(ВЫБОР
	|							КОГДА ПериодыПогашения.ОсновнойДолгКонечныйОстаток > 0
	|									И ПериодыПогашения.ДатаС = &НачалоРасчетногоПериода
	|								ТОГДА ДОБАВИТЬКДАТЕ(ПериодыПогашения.ДатаС, ДЕНЬ, -1)
	|							ИНАЧЕ ПериодыПогашения.ДатаС
	|						КОНЕЦ, ВЫБОР
	|							КОГДА ПериодыПогашения.ДатаПО > &КонецРасчетногоПериода
	|									ИЛИ ПериодыПогашения.ДатаПО ЕСТЬ NULL 
	|								ТОГДА &КонецРасчетногоПериода
	|							ИНАЧЕ ПериодыПогашения.ДатаПО
	|						КОНЕЦ, ДЕНЬ) / &ДнейВГоду * ПериодыПогашения.ДоговорЗаймаПроцентЗаПользованиеЗаймом / 100 КАК ЧИСЛО(15, 2))) КАК НачисленоПроцентов,
	|			СУММА(ВЫБОР
	|					КОГДА ПериодыПогашения.ДоговорЗаймаНачислятьМатериальнуюВыгоду
	|						ТОГДА ВЫРАЗИТЬ(ПериодыПогашения.ОсновнойДолгКонечныйОстаток * РАЗНОСТЬДАТ(ВЫБОР
	|										КОГДА ПериодыПогашения.ОсновнойДолгКонечныйОстаток > 0
	|												И ПериодыПогашения.ДатаС = &НачалоРасчетногоПериода
	|											ТОГДА ДОБАВИТЬКДАТЕ(ПериодыПогашения.ДатаС, ДЕНЬ, -1)
	|										ИНАЧЕ ПериодыПогашения.ДатаС
	|									КОНЕЦ, ВЫБОР
	|										КОГДА ПериодыПогашения.ДатаПО > &КонецРасчетногоПериода
	|												ИЛИ ПериодыПогашения.ДатаПО ЕСТЬ NULL 
	|											ТОГДА &КонецРасчетногоПериода
	|										ИНАЧЕ ПериодыПогашения.ДатаПО
	|									КОНЕЦ, ДЕНЬ) / &ДнейВГоду * СтавкаРефинансированияЦБ.Размер * 3 / 4 / 100 КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ПоСтавкеРефинансирования,
	|			ВЫБОР
	|				КОГДА ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРФ
	|					ТОГДА &СтавкаНеРезидента
	|				ИНАЧЕ &СтавкаРезидента
	|			КОНЕЦ КАК СтавкаНДФЛ
	|		ИЗ
	|			ВТПериодыПогашения КАК ПериодыПогашения
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкаРефинансированияЦБ КАК СтавкаРефинансированияЦБ
	|				ПО ПериодыПогашения.ДатаСтавкиРефинансирования = СтавкаРефинансированияЦБ.Период
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
	|						&парамКонецГода,
	|						ФизЛицо В
	|							(ВЫБРАТЬ
	|								СписокФизлиц.ФизЛицо
	|							ИЗ
	|								ВТСписокФизлицДоговоров КАК СписокФизлиц)) КАК ГражданствоФизЛицСрезПоследних
	|				ПО ПериодыПогашения.ФизЛицо = ГражданствоФизЛицСрезПоследних.ФизЛицо
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыПогашения.ФизЛицо,
	|			ПериодыПогашения.ДоговорЗайма,
	|			ПериодыПогашения.ПорядокПогашенияЗайма,
	|			ПериодыПогашения.ДоговорЗаймаНачалоПогашения,
	|			ПериодыПогашения.ДоговорЗаймаСрокПогашения,
	|			ПериодыПогашения.ДоговорЗаймаСтавкаНалогообложенияМатВыгоды,
	|			ПериодыПогашения.СуммаЗайма,
	|			ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРФ) КАК ДанныеОПогашении
	|		ПО НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ФизЛицо = ДанныеОПогашении.ФизЛицо
	|			И НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ДоговорЗайма = ДанныеОПогашении.ДоговорЗайма
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = ТекстОстаткиЗаймов;
	РезультатЗапроса = Запрос.Выполнить();
	Если ЗначениеЗаполнено(Физлицо) Тогда
		ВыборкаПоСсудам = РезультатЗапроса.Выбрать();
		Пока ВыборкаПоСсудам.Следующий() Цикл
			СтрокаТабличнойЧасти = ПогашениеЗаймов.Получить(ВыборкаПоСсудам.НомерСтроки-1);
			СтрокаТабличнойЧасти.НачисленоПроцентов = ОбщегоНазначения.ОкруглитьПоВалюте(ВыборкаПоСсудам.НачисленоПроцентов,мВалютаРегламентиованногоУчета);
			СтрокаТабличнойЧасти.МатериальнаяВыгода = ОбщегоНазначения.ОкруглитьПоВалюте(ВыборкаПоСсудам.МатериальнаяВыгода,мВалютаРегламентиованногоУчета);
			СтрокаТабличнойЧасти.ПогашеноЗайма	  = ОбщегоНазначения.ОкруглитьПоВалюте(ВыборкаПоСсудам.ПогашеноЗайма,мВалютаРегламентиованногоУчета);
			СтрокаТабличнойЧасти.ПогашеноПроцентов  = ОбщегоНазначения.ОкруглитьПоВалюте(ВыборкаПоСсудам.ПогашеноПроцентов,мВалютаРегламентиованногоУчета);
			СтрокаТабличнойЧасти.НалогНаМатериальнуюВыгоду = ОбщегоНазначения.ОкруглитьПоВалюте(ВыборкаПоСсудам.НалогНаМатериальнуюВыгоду,мВалютаРегламентиованногоУчета);
		КонецЦикла;
	Иначе
		ПогашениеЗаймов.Очистить();
		ВыборкаПоСсудам = РезультатЗапроса.Выбрать();
		Пока ВыборкаПоСсудам.Следующий() Цикл
			СтрокаТабличнойЧасти = ПогашениеЗаймов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ВыборкаПоСсудам);
			СтрокаТабличнойЧасти.НачисленоПроцентов = ОбщегоНазначения.ОкруглитьПоВалюте(ВыборкаПоСсудам.НачисленоПроцентов,мВалютаРегламентиованногоУчета);
			СтрокаТабличнойЧасти.МатериальнаяВыгода = ОбщегоНазначения.ОкруглитьПоВалюте(ВыборкаПоСсудам.МатериальнаяВыгода,мВалютаРегламентиованногоУчета);
			СтрокаТабличнойЧасти.ПогашеноЗайма	  = ОбщегоНазначения.ОкруглитьПоВалюте(ВыборкаПоСсудам.ПогашеноЗайма,мВалютаРегламентиованногоУчета);
			СтрокаТабличнойЧасти.ПогашеноПроцентов  = ОбщегоНазначения.ОкруглитьПоВалюте(ВыборкаПоСсудам.ПогашеноПроцентов,мВалютаРегламентиованногоУчета);
			СтрокаТабличнойЧасти.НалогНаМатериальнуюВыгоду = ОбщегоНазначения.ОкруглитьПоВалюте(ВыборкаПоСсудам.НалогНаМатериальнуюВыгоду,мВалютаРегламентиованногоУчета);
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

// Процедура рассчитывает ресурсы удержаний и заполняет 
// реквизиты Результат табличной части документа
//
Процедура РассчитатьУдержания(ВыборкаПоШапкеДокумента = Неопределено, ВыборкаПоУдержаниям = Неопределено, Физлицо = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	Отказ = Ложь;
	
	Если Физлицо = Неопределено Тогда
		МассивИндексыСтрокУдержания = Неопределено;
	Иначе
		МассивИндексыСтрокУдержания = Новый Массив();
	КонецЕсли;

	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		
		// Перечитаем объект и соберем данные для заполнения наборов записей регистров
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		// позиционируем выборку
		ВыборкаПоШапкеДокумента.Следующий();
		ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	НаборУдержания = РегистрыРасчета.УдержанияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборУдержания.Отбор.Регистратор.Значение = Ссылка;

	НаборНДФЛРасчетыСБюджетом = РегистрыНакопления.НДФЛРасчетыСБюджетом.СоздатьНаборЗаписей();
	НаборНДФЛРасчетыСБюджетом.Отбор.Регистратор.Значение = Ссылка;
	
	НаборЕСНИсчисленный = РегистрыНакопления.ЕСНИсчисленный.СоздатьНаборЗаписей();
	НаборЕСНИсчисленный.Отбор.Регистратор.Значение = Ссылка;

	НаборНДФЛИмущественныеВычетыФизлиц = РегистрыНакопления.НДФЛИмущественныеВычетыФизлиц.СоздатьНаборЗаписей();
	НаборНДФЛИмущественныеВычетыФизлиц.Отбор.Регистратор.Значение = Ссылка;

	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	НаборДопНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборДопНачисления.Отбор.Регистратор.Значение = Ссылка;

	// сформируем движения основных начислений по данным табличной части
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, НаборОсновныеНачисления);
		КонецЕсли;
	КонецЦикла;
	
	//мСоответствиеДоходовИВычетов = ПроведениеРасчетов.ПолучитьСоответствиеДоходовИВычетов();
	
	ВыборкаПоДоговорам = СформироватьЗапросПоДоговорам(ВыборкаПоШапкеДокумента).Выбрать();
	Пока ВыборкаПоДоговорам.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиДоговора(ВыборкаПоДоговорам, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуДоговора(ВыборкаПоДоговорам, ВыборкаПоШапкеДокумента, НаборДопНачисления);
		КонецЕсли;
	КонецЦикла;
				
	// сформируем движения дополнительных начислений по данным табличной части
	ВыборкаПоДопНачислениям = СформироватьЗапросПоДопНачисления(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
	Пока ВыборкаПоДопНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиДопНачисления(ВыборкаПоДопНачислениям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуДопНачислений(ВыборкаПоДопНачислениям, ВыборкаПоШапкеДокумента, НаборДопНачисления);
		КонецЕсли;
	КонецЦикла;
	
	// сформируем движения НДФЛ по данным табличной части
	ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ(Физлицо).Выбрать();
	Пока ВыборкаПоНДФЛ.Следующий() Цикл 
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоНДФЛ, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ, ВыборкаПоШапкеДокумента, НаборНДФЛРасчетыСБюджетом,НаборНДФЛИмущественныеВычетыФизлиц);
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаПФ = СформироватьЗапросПоПенсионномуФонду(Физлицо).Выбрать();
	Пока ВыборкаПФ.Следующий() Цикл 
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиПенсонныйФонд(ВыборкаПФ, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуПенсионныйФонд(ВыборкаПФ, ВыборкаПоШапкеДокумента, НаборЕСНИсчисленный, НаборУдержания);
		КонецЕсли;
	КонецЦикла;
	
	// получим реквизиты табличной части погашения займов
	ВыборкаПоСтрокамДокумента = СформироватьЗапросПоПогашениеЗайма().Выбрать();
	КонецМесяца = КонецМесяца(ПериодРегистрации);
	Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл 
		
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиПогашениеЗайма(ВыборкаПоСтрокамДокумента, Отказ, "");
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			Если ВыборкаПоСтрокамДокумента.НалогНаМатериальнуюВыгоду <> 0 Тогда
				Движение = НаборНДФЛРасчетыСБюджетом.Добавить();
				
				// Свойства
				Движение.Период							= КонецМесяца;
				Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;

				// Измерения
				Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
				Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.МесяцНалоговогоПериода     	= КонецМесяца;
				Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоСтрокамДокумента.СтавкаНалогообложенияМатвыгоды;

				// Ресурсы
				Движение.Налог							= ВыборкаПоСтрокамДокумента.НалогНаМатериальнуюВыгоду;
				
				// Реквизиты 
				Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
				Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
				Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
				Движение.ИсчисленоИзЗарплаты		= Истина;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// сформируем движения удержаний по данным табличной части без записи (запись делается процедурой РассчитатьЗаписиРегистраРасчета)
	Пока ВыборкаПоУдержаниям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоУдержаниям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, ВыборкаПоШапкеДокумента, НаборУдержания);
			Если НЕ Физлицо = Неопределено Тогда
				МассивИндексыСтрокУдержания.Добавить(ВыборкаПоУдержаниям.НомерСтроки - 1); 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	//vvv
	НачатьТранзакцию();
	//
	// перед тем как начать расчет, сформированные движения надо записать - 
	// по ним чуть позже будем получать дополнительные данные для расчетов
	Для Каждого Набор Из Движения Цикл
		ПроверяемыйТип = ТипЗнч(Набор);
		Если ПроверяемыйТип = Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
			//vvv
			//НаборОсновныеНачисления.Записать();
			НаборОсновныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
			//
		ИначеЕсли ПроверяемыйТип = Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда
			НаборДопНачисления.Записать();
		ИначеЕсли ПроверяемыйТип = Тип("РегистрНакопленияНаборЗаписей.НДФЛРасчетыСБюджетом") Тогда
			НаборНДФЛРасчетыСБюджетом.Записать();
		ИначеЕсли ПроверяемыйТип = Тип("РегистрНакопленияНаборЗаписей.ЕСНИсчисленный") Тогда
			НаборЕСНИсчисленный.Записать();	
		ИначеЕсли ПроверяемыйТип = Тип("РегистрНакопленияНаборЗаписей.НДФЛИмущественныеВычетыФизлиц") Тогда
			НаборНДФЛИмущественныеВычетыФизлиц.Записать();
		КонецЕсли;
	КонецЦикла;
	
	// удержания - в последнюю очередь
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("УдержанияРаботниковОрганизаций", НаборУдержания, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, Удержания, , , , , , МассивИндексыСтрокУдержания, Физлицо, КомментироватьРасчет);
	
	// Удаляем движения
	Для Каждого Набор Из Движения Цикл
		ПроверяемыйТип = ТипЗнч(Набор);
		Если ПроверяемыйТип = Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
			НаборОсновныеНачисления.Очистить();
			//vvv
			//НаборОсновныеНачисления.Записать();
			НаборОсновныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
			//
		ИначеЕсли ПроверяемыйТип = Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда
			НаборДопНачисления.Очистить();
			НаборДопНачисления.Записать();
		ИначеЕсли ПроверяемыйТип = Тип("РегистрНакопленияНаборЗаписей.НДФЛРасчетыСБюджетом") Тогда
			НаборНДФЛРасчетыСБюджетом.Очистить();
			НаборНДФЛРасчетыСБюджетом.Записать();
		ИначеЕсли ПроверяемыйТип = Тип("РегистрНакопленияНаборЗаписей.ЕСНИсчисленный") Тогда
			НаборЕСНИсчисленный.Очистить();
			НаборЕСНИсчисленный.Записать();		
		ИначеЕсли ПроверяемыйТип = Тип("РегистрНакопленияНаборЗаписей.НДФЛИмущественныеВычетыФизлиц") Тогда
			НаборНДФЛИмущественныеВычетыФизлиц.Очистить();
			НаборНДФЛИмущественныеВычетыФизлиц.Записать();
		//vvv
		ИначеЕсли ПроверяемыйТип = Тип("РегистрРасчетаНаборЗаписей.УдержанияРаботниковОрганизаций") Тогда
			НаборУдержания.Очистить();
			НаборУдержания.Записать();
		//	
		КонецЕсли;
	КонецЦикла;
	//vvv комментируем
	//НаборУдержания.Очистить();
	//НаборУдержания.Записать();
	//vvv
	ЗафиксироватьТранзакцию();
	//

КонецПроцедуры // РассчитатьУдержания()

// Процедура рассчитывает ресурсы всех наборов записей и заполняет 
// реквизиты Результат всех табличных частей документа
//
Процедура РассчитатьВсе(Физлицо = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	//vvv
	НачалоРасчета = ТекущаяДата();
	ЗаписьЖурналаРегистрации("НачислениеЗП.Расчет",УровеньЖурналаРегистрации.Информация,Метаданные.Документы.НачислениеЗарплатыРаботникамОрганизаций,Ссылка,"Начало расчета "+НачалоРасчета);
	//
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	
	Если КомментироватьРасчет Тогда
		// удаление промежуточных движений выполняется не так как при "нормальном" расчете
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
		ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
		ВыборкаПоДопНачислениям = СформироватьЗапросПоДопНачисления(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
		ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
		
		НачисленияРассчитаны = РассчитатьНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, ВыборкаПоДопНачислениям, Физлицо, КомментироватьРасчет);
		Если НачисленияРассчитаны Тогда
			Записать(); // для расчета НДФЛ нужно записать результаты расчета начислений
			РассчитатьПогашениеЗаймов(Физлицо);
			РассчитатьНДФЛ(Физлицо, КомментироватьРасчет);
			РассчитатьПенсионныйФонд(Физлицо, КомментироватьРасчет);
			Записать(); // для расчета удержаний нужно записать результаты расчета НДФЛ
			
			РассчитатьУдержания(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям, Физлицо, КомментироватьРасчет);
			
		КонецЕсли;
		
		// Удаляем движения по начислениям - ранее они не удалялисьь для комментирования 
		// расчета НДФЛ и удержаний
		Для Каждого Набор Из Движения Цикл
			//vvv комментруем
			//Если ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") 
			//	или ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда
			//	
			//	// Удаляем движения
			//	Набор.Очистить();
			//	Набор.Записать();
			//КонецЕсли;
			Если ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
				
				// Удаляем движения
				Набор.Очистить();
				Набор.Записать(Истина, Ложь, Истина, Ложь);
				
			ИначеЕсли ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда	
				
				// Удаляем движения
				Набор.Очистить();
				Набор.Записать();
				
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	Иначе
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
		ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
		ВыборкаПоДопНачислениям = СформироватьЗапросПоДопНачисления(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
		ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
		ЗафиксироватьТранзакцию();
		
		НачисленияРассчитаны = РассчитатьНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, ВыборкаПоДопНачислениям,Физлицо);
		Если НачисленияРассчитаны Тогда
			Записать(); // для расчета НДФЛ нужно записать результаты расчета начислений
			РассчитатьПогашениеЗаймов(Физлицо);
			РассчитатьНДФЛ(Физлицо);
			РассчитатьПенсионныйФонд(Физлицо, КомментироватьРасчет);
			Записать(); // для расчета удержаний нужно записать результаты расчета НДФЛ
			РассчитатьУдержания(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям, Физлицо);
			

		КонецЕсли;
		
	КонецЕсли;
	
	//vvv
	ЗаписьЖурналаРегистрации("НачислениеЗП.Расчет",УровеньЖурналаРегистрации.Информация,Метаданные.Документы.НачислениеЗарплатыРаботникамОрганизаций,Ссылка,"Окончание расчета "+Строка(ТекущаяДата())+". Затраченное время "+СервисныеПроцедурыИФункции.РазностьВремени(ТекущаяДата(),НачалоРасчета));
	//
КонецПроцедуры // Рассчитать()

// Выполняет перерасчет по заданному списку физлиц
// Если передан пустой список физлиц - перерасчет не проводится
// Если в качестве списка физлиц передан не массив, а Неопределено - перерасчет по всем физлицам 
// регистратора по которым требуется перерасчет
//
// Параметры
//     Физлица - список значений - ссылки на физлиц
// Возвращаемое значение
//  нет
//
Процедура Перерассчитать(Физлица = Неопределено) Экспорт
	
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	Если Не ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат 
	КонецЕсли;
	
	// получим список перерассчитываемых физлиц
	ФизлицаСписок = Новый СписокЗначений;
	Если Физлица = Неопределено Тогда
		
		// таблица ФизлицаДляПерерасчета
		// Список физлиц по которым необходимо выполнить перерасчет
		// Поля:
		//        ФизЛицо
		// Описание:
		// Получает список неповторяющихся физлиц по которым есть записи
		// перерасчета в одной из таблиц перерасчета - по основным или дополнительным начислениям
		//
		ФизлицаДляПерерасчетаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.ФизЛицо
		|ИЗ
		|	(ВЫБРАТЬ
		|		Перерасчет.ФизЛицо
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|	ГДЕ
		|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Перерасчет.ФизЛицо
		|	ИЗ
		|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
		|	ГДЕ
		|		Перерасчет.ОбъектПерерасчета = &парамРегистратор) КАК Перерасчет";
		
		Запрос = Новый Запрос(ФизлицаДляПерерасчетаТекст);
		Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
		ФизлицаСписок.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
		
	Иначе
		
		ФизлицаСписок = Физлица;
		
	КонецЕсли;

	// если не перерассчитываем никого - возврат
	Если ФизлицаСписок.Количество()=0 Тогда
		Возврат 
	КонецЕсли;
	
	// текст выбора списка физлиц для перерасчета НДФЛ
	СписокФизЛицДляРасчетаНДФЛТекст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛица.Ссылка КАК Физлицо
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&парамФизлицаПерерасчета)";
	
	ДополнительныеПараметрыЗапросаНДФЛ  = Новый Структура;
	ДополнительныеПараметрыЗапросаНДФЛ.Вставить("парамФизлицаПерерасчета", ФизлицаСписок);
	
	// читаем все данные 
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.ДополнительныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.УдержанияРаботниковОрганизаций.Прочитать();
	Движения.НДФЛСведенияОДоходах.Прочитать();
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Прочитать();
	Движения.НДФЛРасчетыСБюджетом.Прочитать();
	//vvv
	Движения.ЕСНИсчисленный.Прочитать();
	//
	ЗафиксироватьТранзакцию();

	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	// ведется ли учет задолженности в разрезе периодов возникновения задолженности
	УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");

	////////////////////////////////////////////////////////////////////////
	// Основные, дополнительные начисления и сведения о доходах НДФЛ
	
	// сначала удалим сведения о доходах НДФЛ по перерассчитываемым физлицам
	НДФЛСведенияОДоходах = Движения.НДФЛСведенияОДоходах;
	ПоследнееДвижение = НДФЛСведенияОДоходах.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		// удалим записи по всем физлицам полученного списка
		// обходим в обратном порядке
		Если ФизлицаСписок.НайтиПоЗначению(НДФЛСведенияОДоходах[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
			НДФЛСведенияОДоходах.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	
	// перерассчитываем записи начислений
	// при этом передаем не только набор записей регистра расчета, но и набор записей регистра 
	// накопления со сведениями об отработанном времени
	// а также таблицу значений в которую будет заполнять движения для НДФЛСведенияОДоходах
	ДвиженияНДФЛСведенияОДоходах = 	Движения.НДФЛСведенияОДоходах.Выгрузить();// фактически - создаем структуру таблицы значений
	ПроведениеРасчетов.ПереРассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", Движения.ОсновныеНачисленияРаботниковОрганизаций, Физлица, ДвиженияНДФЛСведенияОДоходах, Движения.РасчетСреднегоЗаработка, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, Начисления);
	// запишем без выполнения пересчета фактического периода действия
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	
	ПроведениеРасчетов.ПереРассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", Движения.ДополнительныеНачисленияРаботниковОрганизаций, Физлица, ДвиженияНДФЛСведенияОДоходах, Движения.РасчетСреднегоЗаработка, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
	
	// запишем набор
	Движения.ДополнительныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	ДополнительныеНачисления.Очистить();
	Для каждого СтрокаДвижения Из Движения.ДополнительныеНачисленияРаботниковОрганизаций Цикл
	    Если Не ЗначениеЗаполнено(СтрокаДвижения.ДокументОснование) Тогда
			СтрокаНачисления = ДополнительныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНачисления,СтрокаДвижения);
			СтрокаНачисления.ДатаНачала = СтрокаДвижения.БазовыйПериодНачало;
			СтрокаНачисления.ДатаОкончания = СтрокаДвижения.БазовыйПериодКонец;
		КонецЕсли;
	КонецЦикла; 
	
	// добавим матвыгоду по заемным средствам
	СформироватьДоходыПоМатвыгодеПоЗаймам(ВыборкаПоШапкеДокумента, ДвиженияНДФЛСведенияОДоходах, ФизлицаСписок);
	
	// запишем движения по доходам НДФЛ, которые формируются при ПереРассчитатьЗаписиРегистраРасчета
	ПроведениеРасчетов.СвернутьДвиженияНДФЛСведенияОДоходах(ДвиженияНДФЛСведенияОДоходах);
	Движения.НДФЛСведенияОДоходах.Загрузить(ДвиженияНДФЛСведенияОДоходах);
	Движения.НДФЛСведенияОДоходах.Записать();
	
	////////////////////////////////////////////////////////////////////////
	// НДФЛ Расчеты с бюджетом
	
	// перезаполним данные по исчисленному НДФЛ 
	// сначала удалим сведения об исчисленном НДФЛ по перерассчитываемым физлицам
	ДвиженияНДФЛРасчетыСБюджетом = Движения.НДФЛРасчетыСБюджетом;
	ПоследнееДвижение = ДвиженияНДФЛРасчетыСБюджетом.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		// удалим записи по всем физлицам полученного списка
		// обходим в обратном порядке
		Если ФизлицаСписок.НайтиПоЗначению(ДвиженияНДФЛРасчетыСБюджетом[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
			ДвиженияНДФЛРасчетыСБюджетом.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	
	// перезаполним данные по исчисленному НДФЛ в табличной части
	// сначала удалим сведения об исчисленном НДФЛ по перерассчитываемым физлицам
	// удаляем строки после получения данных для расчета НДФЛ!!
	ПоследнееДвижение = НДФЛ.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		// удалим записи по всем физлицам полученного списка
		// обходим в обратном порядке
		Если ФизлицаСписок.НайтиПоЗначению(НДФЛ[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
			НДФЛ.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	
	// получение результата НДФЛ по ставке 13 процентов
	// для него передается Организация, период, ссылка на регистратор и список физлиц
	ВыборкаПодразделений = "";
	ДанныеНДФЛ = ПроведениеРасчетов.ПолучитьДанныеНДФЛПоРегистратору(Неопределено, Неопределено, ПериодРегистрации, Организация, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, Ссылка, СписокФизЛицДляРасчетаНДФЛТекст, ДополнительныеПараметрыЗапросаНДФЛ, Истина, , ВыборкаПодразделений);
	
	Если ДанныеНДФЛ <> Неопределено Тогда
		ЗаполнитьНаборЗаписейПоДаннымНДФЛ(Движения.НДФЛРасчетыСБюджетом, ДанныеНДФЛ, ВыборкаПоШапкеДокумента, Истина, ФизлицаСписок, , ВыборкаПодразделений);
	КонецЕсли;
	Движения.НДФЛРасчетыСБюджетом.Записать();
	
	//vvv
	//пересчитываем пенсионный фонд
	// перезаполним данные по исчисленному пенсионному 
	// сначала удалим сведения об исчисленном пенсионном по перерассчитываемым физлицам
	ДвиженияЕСН = Движения.ЕСНИсчисленный;
	ПоследнееДвижение = ДвиженияЕСН.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		// удалим записи по всем физлицам полученного списка
		// обходим в обратном порядке
		Если ФизлицаСписок.НайтиПоЗначению(ДвиженияЕСН[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
			ДвиженияЕСН.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	ДвиженияЕСН.Записать();
	
	// перезаполним данные по исчисленному пенсионному в табличной части
	// сначала удалим сведения об пенсионному по перерассчитываемым физлицам
	ПоследнееДвижение = ПенсионныйФонд.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		// удалим записи по всем физлицам полученного списка
		// обходим в обратном порядке
		Если ФизлицаСписок.НайтиПоЗначению(ПенсионныйФонд[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
			ПенсионныйФонд.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	
	
	РаботникиДляРасчетаПФ = Новый Соответствие;
	
	Для Каждого Строка из ФизлицаСписок Цикл
		РаботникиДляРасчетаПФ.Вставить(Строка.Значение);
	КонецЦикла;
	
	НаборЕСНСведенияОДоходах = РегистрыНакопления.ЕСНСведенияОДоходах.СоздатьНаборЗаписей();
	НаборЕСНСведенияОДоходах.Отбор.Регистратор.Значение = Ссылка;
	НаборЕСНСведенияОДоходах.Очистить();

	Перерасчеты.СформироватьДоходыПоПенсионномуФонду(НаборЕСНСведенияОДоходах,ФизЛицаСписок,ПериодРегистрации,Организация,Ссылка);
	НаборЕСНСведенияОДоходах.Записать();
	
	ДанныеДляРасчетаЕСНТаблица = Перерасчеты.ПолучитьДанныеРасчетаЕСН(ОбщегоНазначения.ГоловнаяОрганизация(Организация),ФизЛицаСписок,ПериодРегистрации,Организация,Ссылка);
	
	ТаблицаПенсионного=Перерасчеты.ПолучитьТаблицуПенсионногоФонда(ДанныеДляРасчетаЕСНТаблица,ПериодРегистрации,расчетФСЗНотБПМ,Ссылка);
	
	Для Каждого Строка Из ТаблицаПенсионного Цикл
		
		Если Строка.Налог <> 0 ИЛИ Строка.МесяцНалоговогоПериода = ПериодРегистрации тогда
			СтрокаПФ = ПенсионныйФонд.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПФ,Строка);
			РаботникиДляРасчетаПФ.Удалить(Строка.ФизЛицо);
			
			Перерасчеты.ДобавитьСтрокуПенсионныйФонд(Строка,Организация,Движения.ЕСНИсчисленный,Движения.РасчетыПоСтраховымВзносам,ПериодРегистрации);
		КонецЕсли;      
			
	КонецЦикла;

	Для Каждого Элемент Из РаботникиДляРасчетаПФ Цикл
		НоваяСтрока =  ПенсионныйФонд.Добавить();
		НоваяСтрока.ФизЛицо = Элемент.Ключ;
		НоваяСтрока.МесяцНалоговогоПериода = НачалоМесяца(ПериодРегистрации);
	КонецЦикла;

	НаборЕСНСведенияОДоходах.Очистить();
	НаборЕСНСведенияОДоходах.Записать();
	//

	////////////////////////////////////////////////////////////////////////
	// удержания работников
	
	// в конце - перерасчет удержаний, так как им могут понадобиться данные расчета НДФЛ
	ПроведениеРасчетов.ПереРассчитатьЗаписиРегистраРасчета("УдержанияРаботниковОрганизаций", Движения.УдержанияРаботниковОрганизаций, Физлица, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, Удержания);
	// запишем
	Движения.УдержанияРаботниковОрганизаций.Записать(Истина, Истина);
	
	// записываем документ перед вызовом СформироватьВзаиморасчетыСРаботниками
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// взаиморасчеты с работниками
	
	// сначала удалим сведения о взаиморасчетах с работниками
	ВзаиморасчетыСРаботникамиОрганизаций = Движения.ВзаиморасчетыСРаботникамиОрганизаций;
	ПоследнееДвижение = ВзаиморасчетыСРаботникамиОрганизаций.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		// удалим записи по всем физлицам полученного списка
		// обходим в обратном порядке
		Если ФизлицаСписок.НайтиПоЗначению(ВзаиморасчетыСРаботникамиОрганизаций[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
			ВзаиморасчетыСРаботникамиОрганизаций.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	
	// теперь сформируем начисления к выплате по начислениям документа для перерассчитываемых работников
	СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, Движения.ВзаиморасчетыСРаботникамиОрганизаций, УчетЗадолженностиПоМесяцам, Истина, Физлица);
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Удалим записи перерасчета по которым выполнен перерасчет
	ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка);
		
КонецПроцедуры // Перерассчитать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Выполняет формирование таблицы значений для загрузки ее в табличную часть Начисления
// Параметры:
//        Начисления - выборка результатат запроса
//  ПериодЗаполнения - дата периода для которого выполняем заполнение документа
//
// Возвращаемое значение:
//  таблица значений
//
Функция СформироватьТаблицуНачислений(Начисления, ОкончаниеПериодаЗаполнения, ВремТЗНачисления)
	
	ТЗНачисления = Новый ТаблицаЗначений();
	ТЗНачисления.Колонки.Добавить("Сотрудник");
	ТЗНачисления.Колонки.Добавить("Физлицо");
	ТЗНачисления.Колонки.Добавить("ВидРасчета");
	ТЗНачисления.Колонки.Добавить("КодВычета");
	ТЗНачисления.Колонки.Добавить("Основное");// Признак основного начисления
	ТЗНачисления.Колонки.Добавить("Показатель1");
	ТЗНачисления.Колонки.Добавить("Показатель2");
	ТЗНачисления.Колонки.Добавить("Показатель3");
	ТЗНачисления.Колонки.Добавить("Показатель4");	
	ТЗНачисления.Колонки.Добавить("Показатель5");
	ТЗНачисления.Колонки.Добавить("Показатель6");		
	ТЗНачисления.Колонки.Добавить("Размер");
	ТЗНачисления.Колонки.Добавить("ДатаНачала", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗНачисления.Колонки.Добавить("ДатаНачалаСобытия", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗНачисления.Колонки.Добавить("ДатаОкончания", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗНачисления.Колонки.Добавить("ПодразделениеОрганизации");
	//vvv
	ТЗНачисления.Колонки.Добавить("Должность");
	ТЗНачисления.Колонки.Добавить("ППС");
	ТЗНачисления.Колонки.Добавить("ТабельУчетаОрганизации");
	ТЗНачисления.Колонки.Добавить("СпособОтраженияВБухучете");
	ТЗНачисления.Колонки.Добавить("Автомобиль");
	ТЗНачисления.Колонки.Добавить("НомерСтрокиТабеля");
	//
	
	// для заполнения графика и вида учета времени
	ТЗНачисления.Колонки.Добавить("ГрафикРаботы");
	ТЗНачисления.Колонки.Добавить("СуммированныйУчетРабочегоВремени");
	ТЗНачисления.Колонки.Добавить("СпособРасчета");
	ТЗНачисления.Колонки.Добавить("ВидВремени");

	// Массив незакрытых строк таблицы значений, т.е. тех, которым не проставлена дата окончания
	НезакрытыеСтроки = Новый Массив;
	// Текущие значения полей выборки для отслеживания изменения работника и даты назначения 
	ТекущийСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	ТекущаяДатаНазначения = '00010101';
	ТекущаяЧасоваяСтавкаОсновногоНачисления = 0;
	//vvv
	// признаки того, что вечерние или ночные часы введены по плановым начислениям
	ЕстьПлановаяДоплатаЗаНочные    = Ложь;
	ЕстьПлановаяДоплатаЗаВечерние  = Ложь;
	ЕстьПлановаяЕжемесячнаяПремия  = Ложь;
	ЕстьСдельныйПриработокВодители = Ложь;
	ЕстьСдельныйПриработок = Ложь;
	//
	СтрокиНачисленийТекущегоНазначения = Новый Массив;
	//vvv
	СтрокиВечернихТекущегоНазначения   = Новый Массив;
	СтрокиНочныхТекущегоНазначения     = Новый Массив;
	СтрокиПремииТекущегоНазначения     = Новый Массив;
	СтрокиПриработкаВодителиТекущегоНазначения = Новый Массив;
	СтрокиПриработкаТекущегоНазначения = Новый Массив;
	
	ДоплатыЗаНочныеВечерниеЧасы = ПолучитьДоплатыЗаНочныеВечерние();
	ДоплатаЗаНочные 				= ДоплатыЗаНочныеВечерниеЧасы.ДоплатаЗаНочныеЧасы;
	ДоплатаЗаВечерние 				= ДоплатыЗаНочныеВечерниеЧасы.ДоплатаЗаВечерниеЧасы;
	ПроцентДоплатыЗаНочныеЧасы 		= ДоплатыЗаНочныеВечерниеЧасы.ПроцентДоплатыЗаНочныеЧасы;
	ПроцентДоплатыЗаВечерниеЧасы 	= ДоплатыЗаНочныеВечерниеЧасы.ПроцентДоплатыЗаВечерниеЧасы;
	ПремияВодителям					= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПремияВодителям;
	ПремияВодителямСдельная			= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПремияВодителямСдельная;
	ПремияРемонт					= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПремияРемонт;
	ПремияРемонтПлановый			= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПремияРемонтПлановый;
	ПремияСдельная					= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПремияСдельная;
	ЕжемесячнаяПремияВР				= ПолучитьВидРасчетаЕжемесячнаяПремия().Премия;
	СдельныйПриработокВодители      = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельныйПриработокВодители;
	СдельныйПриработок			    = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельныйПриработок;
	ЕстьВидРасчетаПремия            = ЕжемесячнаяПремияВР<>Неопределено;
	ТекущийПроцентПремииОсновногоНачисления=0;
	//
	Пока Начисления.Следующий() Цикл
		//vvv  //непонятно почему-то при перемещении появляются пустые виды расчетов
		Если Не ЗначениеЗаполнено(Начисления.ВидРасчета) Тогда
			//Продолжить; //пока закомментируем, т.к. эти строчки появляются при временном переводе
		КонецЕсли;
		ЕжемесячнаяПремия=?(ЗначениеЗаполнено(Начисления.ВидРасчетаЕжемесячнаяПремия),Начисления.ВидРасчетаЕжемесячнаяПремия,ЕжемесячнаяПремияВР);
		//
		Если Начисления.Сотрудник <> ТекущийСотрудник Тогда
			
			// закрываем незакрытые строки начислений предыдущего работника концом месяца
			ЗакрытьСтроки(ТЗНачисления, НезакрытыеСтроки, ОкончаниеПериодаЗаполнения);
			
			//vvv
			Если ЕстьПлановаяДоплатаЗаНочные Тогда
				// удаляем те строки ночных часов, которые введены на основании табеля	
				Для Каждого Строка Из СтрокиНочныхТекущегоНазначения Цикл
					ТЗНачисления.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;
			Если ЕстьПлановаяДоплатаЗаВечерние Тогда
				// удаляем те строки вечерних часов, которые введены на основании табеля
				Для Каждого Строка Из СтрокиВечернихТекущегоНазначения Цикл
					ТЗНачисления.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;
			Если ЕстьПлановаяЕжемесячнаяПремия Тогда
				// удаляем те строки премии, которые введены на основании табеля
				Для Каждого Строка Из СтрокиПремииТекущегоНазначения Цикл
					ТЗНачисления.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;
			Если ЕстьСдельныйПриработокВодители Тогда
				// удаляем те строки приработка, которые введены на основании табеля
				Для Каждого Строка Из СтрокиПриработкаВодителиТекущегоНазначения Цикл
					ТЗНачисления.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;
			Если ЕстьСдельныйПриработок Тогда
				// удаляем те строки приработка, которые введены на основании табеля
				Для Каждого Строка Из СтрокиПриработкаТекущегоНазначения Цикл
					ТЗНачисления.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;
			//
			// меняется текущий работник и дата его движения
			ТекущийСотрудник = Начисления.Сотрудник;
			ТекущаяДатаНазначения = Начисления.ПериодРаботники;
			ТекущаяЧасоваяСтавкаОсновногоНачисления = 0;
			СтрокиНачисленийТекущегоНазначения.Очистить();
			//vvv
			СтрокиВечернихТекущегоНазначения.Очистить();
			СтрокиНочныхТекущегоНазначения.Очистить();
			СтрокиПремииТекущегоНазначения.Очистить();
			СтрокиПриработкаТекущегоНазначения.Очистить();
			СтрокиПриработкаВодителиТекущегоНазначения.Очистить();
			ЕстьПлановаяДоплатаЗаНочные = Ложь;
			ЕстьПлановаяДоплатаЗаВечерние = Ложь;
			ЕстьПлановаяЕжемесячнаяПремия = Ложь;
			ТекущийПроцентПремииОсновногоНачисления=Ложь;
			//
		//vvv	
		//ИначеЕсли Начисления.ПериодРаботники <> ТекущаяДатаНазначения Тогда
		ИначеЕсли Начисления.ПериодРаботники <> ТекущаяДатаНазначения И (Начисления.НачисляетсяВЦеломЗаМесяц = Null Или (НЕ Начисления.НачисляетсяВЦеломЗаМесяц)) Тогда
		//	
			
			Для каждого СтрокаТекущегоНазначения Из СтрокиНачисленийТекущегоНазначения Цикл
			
				ИндексСтроки = 0;
				Для каждого СтрокаМассива Из НезакрытыеСтроки Цикл
					Если СтрокаМассива = СтрокаТекущегоНазначения Тогда
						НезакрытыеСтроки.Удалить(ИндексСтроки);
						Прервать;
					Иначе
						ИндексСтроки = ИндексСтроки + 1;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
			// закрываем все строки предыдущего назначения датой предшествующей новому назначению
			ЗакрытьСтроки(ТЗНачисления, СтрокиНачисленийТекущегоНазначения, Начисления.ПериодРаботники - 1);

			// меняется текущая дата движения работника
			ТекущаяДатаНазначения = Начисления.ПериодРаботники;
			
		КонецЕсли;
			
		Если НЕ Начисления.Подходит ИЛИ Начисления.УжеПроведен Тогда
			// пропускаем такие записи: они уже введена другими документами или соответствуют окончанию назначения работника
			Продолжить;
		КонецЕсли;
		
		//vvv
		// если начисление - плановое для водителя, то будем их опускать, т.к. для них все начисления будут браться из табеля
		Если Начисления.НеБратьВРасчет Тогда
			Продолжить;
		КонецЕсли;
		//
		Если Начисления.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить И НЕ Начисления.ТребуетВводаТарифногоРазряда И (Начисления.КурсВалюты = NULL ИЛИ Начисления.КурсВалюты = 0) Тогда
			ОбщегоНазначения.ОшибкаРасчета("Для расчетного периода не задан курс валюты " + Начисления.Валюта + "!");
			ТЗНачисления.Очистить();
			Возврат ТЗНачисления;
		КонецЕсли;
		
		// Расчет размера начисления
		// для вечерних и ночных часов размер в регистре плановых начислений сожержит процент оплаты от тарифа/оклада
		///vvv добавим сюда еще процентом по часовой тарифной ставке
		Если Начисления.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы ИЛИ Начисления.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы
			//vvv
			//ИЛИ Начисления.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке ИЛИ Начисления.ВидРасчета = ДоплатаЗаНочные ИЛИ Начисления.ВидРасчета = ДоплатаЗаВечерние Тогда
			ИЛИ Начисления.ВидРасчета = ДоплатаЗаНочные ИЛИ Начисления.ВидРасчета = ДоплатаЗаВечерние Тогда
			//
			
			Показатель1 = ОбщегоНазначения.ОкруглитьПоВалюте(Начисления.Показатель1 / 100 * ТекущаяЧасоваяСтавкаОсновногоНачисления, Константы.ВалютаРегламентированногоУчета.Получить());
			Показатель2 = 0; 
			Показатель3 = 0; 
			Показатель4 = 0; 			
			Показатель5 = 0; 
			Показатель6 = 0; 		
		//vvv
		ИначеЕсли Начисления.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ЕжемесячнаяПремия Тогда
		
			Показатель1 = ТекущийПроцентПремииОсновногоНачисления;		
			Показатель2 = 0; 
			Показатель3 = 0; 
			Показатель4 = 0; 			
			Показатель5 = 0; 
			Показатель6 = 0;
		ИначеЕсли Начисления.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке Тогда
		
			Показатель1 = ТекущаяЧасоваяСтавкаОсновногоНачисления;		
			Показатель2 = Начисления.Показатель2; 
			Показатель3 = 0; 
			Показатель4 = 0; 			
			Показатель5 = 0; 
			Показатель6 = 0;	
		ИначеЕсли Начисления.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке Тогда
			//Показатель1 = Начисления.КоэффициентСтажа / 100 * ТекущаяЧасоваяСтавкаОсновногоНачисления;
			//лучше так, чтобы можно было в случае чего менять только процент
			Показатель1 = ТекущаяЧасоваяСтавкаОсновногоНачисления;
			Показатель2 = Начисления.КоэффициентСтажа;			
			Показатель3 = 0; 
			Показатель4 = 0; 			
			Показатель5 = 0; 
			Показатель6 = 0;
		//
		Иначе
			
			// расчета не требуется
			Показатель1 = Начисления.Показатель1; 
			Показатель2 = Начисления.Показатель2; 
			Показатель3 = Начисления.Показатель3; 
			Показатель4 = Начисления.Показатель4; 			
			Показатель5 = Начисления.Показатель5; 
			Показатель6 = Начисления.Показатель6; 		
			
		КонецЕсли;
		
		//vvv
		// признак того, что вечерние и/или ночные часы введены по плановым начислениям
		Если Начисления.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы Тогда
			ЕстьПлановаяДоплатаЗаВечерние = Истина;
			// удалим строки с веченими начислениями, введенными на основании графика, из 
			// всех массивос строк
			Для Каждого Строка Из СтрокиВечернихТекущегоНазначения Цикл
				Для Счетчик = 0 По НезакрытыеСтроки.ВГраница() Цикл
					Если ТЗНачисления.Индекс(НезакрытыеСтроки[Счетчик]) = ТЗНачисления.Индекс(Строка) Тогда
						// нашли строку с вечерними, введенными на основании графика
						НезакрытыеСтроки.Удалить(Счетчик);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Счетчик = 0 По СтрокиНачисленийТекущегоНазначения.ВГраница() Цикл
					Если ТЗНачисления.Индекс(СтрокиНачисленийТекущегоНазначения[Счетчик]) = ТЗНачисления.Индекс(Строка) Тогда
						// нашли строку с вечерними, введенными на основании графика
						СтрокиНачисленийТекущегоНазначения.Удалить(Счетчик);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ТЗНачисления.Удалить(Строка);
				
			КонецЦикла;
			СтрокиВечернихТекущегоНазначения.Очистить();
		КонецЕсли;
		Если Начисления.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы Тогда
			ЕстьПлановаяДоплатаЗаНочные = Истина;
			// удалим строки с ночными начислениями, введенными на основании графика, из 
			// всех массивос строк
			Для Каждого Строка Из СтрокиНочныхТекущегоНазначения Цикл
				Для Счетчик = 0 По НезакрытыеСтроки.ВГраница() Цикл
					Если ТЗНачисления.Индекс(НезакрытыеСтроки[Счетчик]) = ТЗНачисления.Индекс(Строка) Тогда
						// нашли строку с вечерними, введенными на основании графика
						НезакрытыеСтроки.Удалить(Счетчик);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Счетчик = 0 По СтрокиНачисленийТекущегоНазначения.ВГраница() Цикл
					Если ТЗНачисления.Индекс(СтрокиНачисленийТекущегоНазначения[Счетчик]) = ТЗНачисления.Индекс(Строка) Тогда
						// нашли строку с вечерними, введенными на основании графика
						СтрокиНачисленийТекущегоНазначения.Удалить(Счетчик);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ТЗНачисления.Удалить(Строка);
				
			КонецЦикла;
			СтрокиНочныхТекущегоНазначения.Очистить();
		КонецЕсли;
		Если Начисления.ВидРасчета = ЕжемесячнаяПремия Тогда
			ЕстьПлановаяЕжемесячнаяПремия = Истина;
			// удалим строки с ежемесячной премией, которая введена в табеле
			// всех массивос строк
			Для Каждого Строка Из СтрокиПремииТекущегоНазначения Цикл
				Для Счетчик = 0 По НезакрытыеСтроки.ВГраница() Цикл
					Если ТЗНачисления.Индекс(НезакрытыеСтроки[Счетчик]) = ТЗНачисления.Индекс(Строка) Тогда
						// нашли строку с вечерними, введенными на основании графика
						НезакрытыеСтроки.Удалить(Счетчик);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Счетчик = 0 По СтрокиНачисленийТекущегоНазначения.ВГраница() Цикл
					Если ТЗНачисления.Индекс(СтрокиНачисленийТекущегоНазначения[Счетчик]) = ТЗНачисления.Индекс(Строка) Тогда
						// нашли строку с ежемесячной премией, введенная в табеле
						СтрокиНачисленийТекущегоНазначения.Удалить(Счетчик);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ТЗНачисления.Удалить(Строка);
				
			КонецЦикла;
			СтрокиПремииТекущегоНазначения.Очистить();
		КонецЕсли;
		Если Начисления.ВидРасчета = СдельныйПриработокВодители Тогда
			ЕстьСдельныйПриработокВодители = Истина;
			Для Каждого Строка Из СтрокиПриработкаВодителиТекущегоНазначения Цикл
				Для Счетчик = 0 По НезакрытыеСтроки.ВГраница() Цикл
					Если ТЗНачисления.Индекс(НезакрытыеСтроки[Счетчик]) = ТЗНачисления.Индекс(Строка) Тогда
						// нашли строку с вечерними, введенными на основании графика
						НезакрытыеСтроки.Удалить(Счетчик);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Счетчик = 0 По СтрокиНачисленийТекущегоНазначения.ВГраница() Цикл
					Если ТЗНачисления.Индекс(СтрокиНачисленийТекущегоНазначения[Счетчик]) = ТЗНачисления.Индекс(Строка) Тогда
						// нашли строку с ежемесячной премией, введенная в табеле
						СтрокиНачисленийТекущегоНазначения.Удалить(Счетчик);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ТЗНачисления.Удалить(Строка);
				
			КонецЦикла;
			СтрокиПриработкаВодителиТекущегоНазначения.Очистить();
		КонецЕсли;
		Если Начисления.ВидРасчета = СдельныйПриработок Тогда
			ЕстьСдельныйПриработок = Истина;
			Для Каждого Строка Из СтрокиПриработкаТекущегоНазначения Цикл
				Для Счетчик = 0 По НезакрытыеСтроки.ВГраница() Цикл
					Если ТЗНачисления.Индекс(НезакрытыеСтроки[Счетчик]) = ТЗНачисления.Индекс(Строка) Тогда
						НезакрытыеСтроки.Удалить(Счетчик);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Счетчик = 0 По СтрокиНачисленийТекущегоНазначения.ВГраница() Цикл
					Если ТЗНачисления.Индекс(СтрокиНачисленийТекущегоНазначения[Счетчик]) = ТЗНачисления.Индекс(Строка) Тогда
						СтрокиНачисленийТекущегоНазначения.Удалить(Счетчик);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ТЗНачисления.Удалить(Строка);
				
			КонецЦикла;
			СтрокиПриработкаТекущегоНазначения.Очистить();
		КонецЕсли;
		//
		
		// Сохраним размер основного начисления для расчета размера оплаты ночных и вечерних часов
		// (основное начисление в выборке должно идти раньше других видов расчета)
		Если Начисления.ОсновноеНачисление и Начисления.ВидРасчета <> Неопределено Тогда
			ТекущаяЧасоваяСтавкаОсновногоНачисления = Начисления.ЧасоваяТарифнаяСтавка;
			//vvv
			ТекущийПроцентПремииОсновногоНачисления = Начисления.ПроцентПремии;
			//
		КонецЕсли;
		
		// Найдем такой же вид расчета среди незакрытых строк с целью завершения его действия
		Строки = Новый Массив;
		//vvv добавим в поиск среди незакрытых  еще один параметр (часовую ставку), нужно для водителей
		//НайтиСредиНезакрытых(НезакрытыеСтроки, Начисления.ОсновноеНачисление, Начисления.ВидРасчета, Строки);
		НайтиСредиНезакрытых(НезакрытыеСтроки, Начисления.ОсновноеНачисление, Начисления.ВидРасчета, Строки,Начисления.Показатель1,Начисления.НомерСтрокиТабеля,Начисления.Автомобиль);
		//
		ПрерватьОбход = Ложь;
		Если Строки.Количество() > 0 Тогда
			// нашли
			Для каждого Строка Из Строки Цикл
				Если Строка.ДатаНачала = Начисления.Период Тогда
					Если Начисления.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
						ИндексСтроки = НезакрытыеСтроки.Найти(Строка);
						НезакрытыеСтроки.Удалить(ИндексСтроки);
						ИндексСтроки = 0;
						Для каждого СтрокаМассива Из СтрокиНачисленийТекущегоНазначения Цикл
							Если СтрокаМассива = Строка Тогда
								СтрокиНачисленийТекущегоНазначения.Удалить(ИндексСтроки);
								Прервать;
							Иначе
								ИндексСтроки = ИндексСтроки + 1;
							КонецЕсли;
						КонецЦикла;
						ТЗНачисления.Удалить(Строка);
					Иначе
						//vvv Запомним подменяемый вид расчета для последующего анализа
						ПодменяемыйВидРасчета=Строка.ВидРасчета;
						//
						// если дата та же - новую строку в формируемую таблицу значений не вводим, а меняем данные 
						// и оставляем строку "незакрытой"
						Строка.ВидРасчета = Начисления.ВидРасчета;// вид расчета необходимо переопределять для основного начисления
						Строка.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
						Строка.СпособРасчета = Начисления.СпособРасчета;
						Строка.ГрафикРаботы = Начисления.ГрафикРаботы;
						Строка.ДатаНачалаСобытия = Начисления.ДатаНачалаСобытия;
						Строка.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
						Строка.Показатель1 = Показатель1;
						Строка.Показатель2 = Показатель2;
						Строка.Показатель3 = Показатель3;
						Строка.Показатель4 = Показатель4;						
						Строка.Показатель5 = Показатель5;
						Строка.Показатель6 = Показатель6;
						//vvv
						Строка.ППС = Начисления.ППС;
						Строка.СпособОтраженияВБухучете = Начисления.СпособОтраженияВБухучете;
						Строка.Должность = Начисления.Должность;
						//
						
						//vvv
						Если Начисления.ОсновноеНачисление Тогда
							// если это ОсновноеНачисление, то нужно подменить данные и в тех строках 
							// ночных и вечерних, которые введены не основании графика
							Для Каждого СтрокаДоплаты Из СтрокиВечернихТекущегоНазначения Цикл
								Для Каждого НезакрытаяСтрока Из НезакрытыеСтроки Цикл
									Если ТЗНачисления.Индекс(НезакрытаяСтрока) = ТЗНачисления.Индекс(СтрокаДоплаты) Тогда
										// нашли строку с вечерними, введенными на основании графика
										СтрокаДоплаты.Показатель1 = (Начисления.ЧасоваяТарифнаяСтавка * ПроцентДоплатыЗаВечерниеЧасы) / 100;
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
							Для Каждого СтрокаДоплаты Из СтрокиНочныхТекущегоНазначения Цикл
								Для Каждого НезакрытаяСтрока Из НезакрытыеСтроки Цикл
									Если ТЗНачисления.Индекс(НезакрытаяСтрока) = ТЗНачисления.Индекс(СтрокаДоплаты) Тогда
										// нашли строку с ночными, введенными на основании графика
										СтрокаДоплаты.Показатель1 = (Начисления.ЧасоваяТарифнаяСтавка * ПроцентДоплатыЗаНочныеЧасы) / 100;
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
							//а также данные по премии, введенной в табеле
							Для Каждого СтрокаДоплаты Из СтрокиПремииТекущегоНазначения Цикл
								Для Каждого НезакрытаяСтрока Из НезакрытыеСтроки Цикл
									Если ТЗНачисления.Индекс(НезакрытаяСтрока) = ТЗНачисления.Индекс(СтрокаДоплаты) Тогда
										// нашли строку с ежемесячной премией, введенной в табеле
										Если Строка.ВидРасчета=ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.РабочееВремяВодителей Тогда
											//в случае, когда встречается незакрытая премия и основное начисление становится для водителей
											//ежемесячную премию удаляем
											ИндексСтроки = НезакрытыеСтроки.Найти(НезакрытаяСтрока);
											//ТЗНачисления.Удалить(НезакрытаяСтрока);
											НезакрытыеСтроки.Удалить(ИндексСтроки);
											ИндексСтроки = 0;
											Для каждого СтрокаМассива Из СтрокиНачисленийТекущегоНазначения Цикл
												Если СтрокаМассива = НезакрытаяСтрока Тогда
													СтрокиНачисленийТекущегоНазначения.Удалить(ИндексСтроки);
													Прервать;
												Иначе
													ИндексСтроки = ИндексСтроки + 1;
												КонецЕсли;
											КонецЦикла;
											ТЗНачисления.Удалить(НезакрытаяСтрока);
										Иначе											
											СтрокаДоплаты.Показатель1 = Начисления.ПроцентПремии;
										КонецЕсли;										
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
							ПодменилиПоказательВСделке=Ложь;
							Для Каждого СтрокаДоплаты Из СтрокиПриработкаТекущегоНазначения Цикл
								Для Каждого НезакрытаяСтрока Из НезакрытыеСтроки Цикл
									Если ТЗНачисления.Индекс(НезакрытаяСтрока) = ТЗНачисления.Индекс(СтрокаДоплаты) Тогда
										Если Строка.ВидРасчета=ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.РабочееВремяВодителей Тогда
											//в случае, когда встречается незакрытая премия и основное начисление становится для водителей
											//сдельный приработок удаляем, т.к. для водителей он другой
											ИндексСтроки = НезакрытыеСтроки.Найти(НезакрытаяСтрока);
											//ТЗНачисления.Удалить(НезакрытаяСтрока);
											НезакрытыеСтроки.Удалить(ИндексСтроки);
											ИндексСтроки = 0;
											Для каждого СтрокаМассива Из СтрокиНачисленийТекущегоНазначения Цикл
												Если СтрокаМассива = НезакрытаяСтрока Тогда
													СтрокиНачисленийТекущегоНазначения.Удалить(ИндексСтроки);
													Прервать;
												Иначе
													ИндексСтроки = ИндексСтроки + 1;
												КонецЕсли;
											КонецЦикла;
											ТЗНачисления.Удалить(НезакрытаяСтрока);
										Иначе
											СтрокаДоплаты.Показатель1 = Начисления.Показатель1;
											ПодменилиПоказательВСделке=Истина;
										КонецЕсли;										
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
							
							Если ПодменяемыйВидРасчета=ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.РабочееВремяВодителей ТОгда
								
								Если Начисления.ВидРасчета=ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяТарифнаяЧасть И НЕ ЕстьСдельныйПриработок ТОгда
									
									НоваяСтрока = ТЗНачисления.Добавить();
									НоваяСтрока.Сотрудник = Начисления.Сотрудник;
									НоваяСтрока.Физлицо = Начисления.Физлицо;
									НоваяСтрока.ВидРасчета = СдельныйПриработок;
									НоваяСтрока.КодВычета = Начисления.КодВычета;
									НоваяСтрока.ППС = Начисления.ППС;
									НоваяСтрока.СпособОтраженияВБухучете=Начисления.СпособОтраженияВБухучете;			
									НоваяСтрока.Показатель1 = Показатель1;
									НоваяСтрока.Показатель2 = Показатель2;
									НоваяСтрока.Показатель3 = Показатель3;
									НоваяСтрока.Показатель4 = Показатель4;								
									НоваяСтрока.Показатель5 = Показатель5;
									НоваяСтрока.Показатель6 = Показатель6;
									НоваяСтрока.Основное = Ложь;
									НоваяСтрока.ДатаНачала = Строка.ДатаНачала;
									НоваяСтрока.ДатаНачалаСобытия = Строка.ДатаНачалаСобытия;
									НоваяСтрока.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
									НоваяСтрока.ТабельУчетаОрганизации = Начисления.ТабельУчетаОрганизации;
									НоваяСтрока.Должность = Начисления.Должность;
									НоваяСтрока.Автомобиль = Начисления.Автомобиль;
									НоваяСтрока.НомерСтрокиТабеля = Начисления.НомерСтрокиТабеля;
									НоваяСтрока.СпособРасчета = Начисления.СпособРасчета;
									НоваяСтрока.ВидВремени = Начисления.ВидВремени;
									НоваяСтрока.ГрафикРаботы = Начисления.ГрафикРаботы;
									НоваяСтрока.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
			
									НезакрытыеСтроки.Добавить(НоваяСтрока);
									СтрокиНачисленийТекущегоНазначения.Добавить(НоваяСтрока);
									СтрокиПриработкаТекущегоНазначения.Добавить(НоваяСтрока);
									
								КонецЕсли;
								
								Если Начисления.ПроцентПремии<>0 И НЕ ЕстьПлановаяЕжемесячнаяПремия И ЕстьВидРасчетаПремия Тогда
									
									НоваяСтрока = ТЗНачисления.Добавить();
									НоваяСтрока.Сотрудник = Начисления.Сотрудник;
									НоваяСтрока.Физлицо = Начисления.Физлицо;
									НоваяСтрока.ВидРасчета = ЕжемесячнаяПремия;
									НоваяСтрока.Показатель1 = Начисления.ПроцентПремии;
									НоваяСтрока.Основное = Ложь;			
									НоваяСтрока.ДатаНачала = Строка.ДатаНачала;
									НоваяСтрока.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
									НоваяСтрока.Должность = Начисления.Должность;
									НоваяСтрока.ТабельУчетаОрганизации = Начисления.ТабельУчетаОрганизации;
									НоваяСтрока.Автомобиль = Начисления.Автомобиль;
									НоваяСтрока.НомерСтрокиТабеля = Начисления.НомерСтрокиТабеля;
									НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ЕжемесячнаяПремия;
									НоваяСтрока.ВидВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
									НоваяСтрока.ГрафикРаботы = Начисления.ГрафикРаботы;
									НоваяСтрока.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
									НоваяСтрока.ППС=Начисления.ППС;
									
									НезакрытыеСтроки.Добавить(НоваяСтрока);
									СтрокиНачисленийТекущегоНазначения.Добавить(НоваяСтрока);
									СтрокиПремииТекущегоНазначения.Добавить(НоваяСтрока);
									
								КонецЕсли;
							ИначеЕсли Начисления.ВидРасчета=ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяТарифнаяЧасть И Не ПодменилиПоказательВСделке ТОгда
								//при подмене часовой тарифной ставки на сделку приработок не подменяется, потому что его нету у тар. ставки, поэтому добавим его
								НоваяСтрока = ТЗНачисления.Добавить();
								НоваяСтрока.Сотрудник = Начисления.Сотрудник;
								НоваяСтрока.Физлицо = Начисления.Физлицо;
								НоваяСтрока.ВидРасчета = СдельныйПриработок;
								НоваяСтрока.КодВычета = Начисления.КодВычета;
								НоваяСтрока.ППС = Начисления.ППС;
								НоваяСтрока.СпособОтраженияВБухучете=Начисления.СпособОтраженияВБухучете;			
								НоваяСтрока.Показатель1 = Показатель1;
								НоваяСтрока.Показатель2 = Показатель2;
								НоваяСтрока.Показатель3 = Показатель3;
								НоваяСтрока.Показатель4 = Показатель4;								
								НоваяСтрока.Показатель5 = Показатель5;
								НоваяСтрока.Показатель6 = Показатель6;
								НоваяСтрока.Основное = Ложь;
								НоваяСтрока.ДатаНачала = Строка.ДатаНачала;
								НоваяСтрока.ДатаНачалаСобытия = Строка.ДатаНачалаСобытия;
								НоваяСтрока.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
								НоваяСтрока.ТабельУчетаОрганизации = Начисления.ТабельУчетаОрганизации;
								НоваяСтрока.Должность = Начисления.Должность;
								НоваяСтрока.Автомобиль = Начисления.Автомобиль;
								НоваяСтрока.НомерСтрокиТабеля = Начисления.НомерСтрокиТабеля;
								НоваяСтрока.СпособРасчета = Начисления.СпособРасчета;
								НоваяСтрока.ВидВремени = Начисления.ВидВремени;
								НоваяСтрока.ГрафикРаботы = Начисления.ГрафикРаботы;
								НоваяСтрока.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
								
			                    НезакрытыеСтроки.Добавить(НоваяСтрока);
								СтрокиНачисленийТекущегоНазначения.Добавить(НоваяСтрока);
								СтрокиПриработкаТекущегоНазначения.Добавить(НоваяСтрока);
								
							КонецЕсли;
						КонецЕсли;						
						//
						
					КонецЕсли;
					ПрерватьОбход = Истина;
				//vvv	
				//ИначеЕсли Начисления.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Тогда
				ИначеЕсли Начисления.НачисляетсяВЦеломЗаМесяц = Null Или (НЕ Начисления.НачисляетсяВЦеломЗаМесяц) Тогда
				//	
					// "закрываем" строку и удаляем из массива незакрытых - кроме 
					// начислений фиксированной суммой (они принудительно не разбиваются на части)
					
					Если Не ЗначениеЗаполнено(Строка.ДатаОкончания) Или Строка.ДатаОкончания > Начисления.Период-1 Тогда
						Строка.ДатаОкончания = Начисления.Период-1;
					КонецЕсли;
					ИндексСтроки = НезакрытыеСтроки.Найти(Строка);
					НезакрытыеСтроки.Удалить(ИндексСтроки);
					//vvv
					Если Начисления.ОсновноеНачисление Тогда
						// если это ОсновноеНачисление, то нужно закрыть и те строки
						// ночных и вечерних, которые введены не на основании графика
						Для Каждого СтрокаДоплаты Из СтрокиВечернихТекущегоНазначения Цикл
							Для Каждого НезакрытаяСтрока Из НезакрытыеСтроки Цикл
								Если ТЗНачисления.Индекс(НезакрытаяСтрока) = ТЗНачисления.Индекс(СтрокаДоплаты) Тогда
									// нашли строку с вечерними, введенными на основании графика
									Если Не ЗначениеЗаполнено(СтрокаДоплаты.ДатаОкончания) Или СтрокаДоплаты.ДатаОкончания > Начисления.Период-1 Тогда
										СтрокаДоплаты.ДатаОкончания = Начисления.Период-1;
									КонецЕсли;
									ИндексСтроки = НезакрытыеСтроки.Найти(СтрокаДоплаты);
									НезакрытыеСтроки.Удалить(ИндексСтроки);
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
						Для Каждого СтрокаДоплаты Из СтрокиНочныхТекущегоНазначения Цикл
							Для Каждого НезакрытаяСтрока Из НезакрытыеСтроки Цикл
								Если ТЗНачисления.Индекс(НезакрытаяСтрока) = ТЗНачисления.Индекс(СтрокаДоплаты) Тогда
									// нашли строку с ночными, введенными на основании графика
									Если Не ЗначениеЗаполнено(СтрокаДоплаты.ДатаОкончания) Или СтрокаДоплаты.ДатаОкончания > Начисления.Период-1 Тогда
										СтрокаДоплаты.ДатаОкончания = Начисления.Период-1;
									КонецЕсли;
									ИндексСтроки = НезакрытыеСтроки.Найти(СтрокаДоплаты);
									НезакрытыеСтроки.Удалить(ИндексСтроки);
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
						//а также для ежемесячной премии
						Для Каждого СтрокаДоплаты Из СтрокиПремииТекущегоНазначения Цикл
							Для Каждого НезакрытаяСтрока Из НезакрытыеСтроки Цикл
								Если ТЗНачисления.Индекс(НезакрытаяСтрока) = ТЗНачисления.Индекс(СтрокаДоплаты) Тогда
									// нашли строку с ночными, введенными на основании графика
									Если Не ЗначениеЗаполнено(СтрокаДоплаты.ДатаОкончания) Или СтрокаДоплаты.ДатаОкончания > Начисления.Период-1 Тогда
										СтрокаДоплаты.ДатаОкончания = Начисления.Период-1;
									КонецЕсли;
									ИндексСтроки = НезакрытыеСтроки.Найти(СтрокаДоплаты);
									НезакрытыеСтроки.Удалить(ИндексСтроки);
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
						//закроем сдельный приработок
						Для Каждого СтрокаДоплаты Из СтрокиПриработкаТекущегоНазначения Цикл
							Для Каждого НезакрытаяСтрока Из НезакрытыеСтроки Цикл
								Если ТЗНачисления.Индекс(НезакрытаяСтрока) = ТЗНачисления.Индекс(СтрокаДоплаты) Тогда
									// нашли строку с ночными, введенными на основании графика
									Если Не ЗначениеЗаполнено(СтрокаДоплаты.ДатаОкончания) Или СтрокаДоплаты.ДатаОкончания > Начисления.Период-1 Тогда
										СтрокаДоплаты.ДатаОкончания = Начисления.Период-1;
									КонецЕсли;
									ИндексСтроки = НезакрытыеСтроки.Найти(СтрокаДоплаты);
									НезакрытыеСтроки.Удалить(ИндексСтроки);
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
					//
				ИначеЕсли Начисления.ПериодНачисления = Начисления.Период  Тогда 
					// для начислений фиксированной суммой рассматриваем строки, образовавшиеся из-за изменения данных о начислении, 
					// данные о перемещениях работника пропускаем
					
					// "закрываем" строку 
					Строка.ДатаОкончания = Начисления.Период-1;
					// и удаляем из массива незакрытых - если пользователем был изменен размер начисления
					Если Начисления.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
						ИндексСтроки = НезакрытыеСтроки.Найти(Строка);
						НезакрытыеСтроки.Удалить(ИндексСтроки);
					КонецЕсли;
					//vvv
					Если Начисления.ОсновноеНачисление Тогда
						// если это ОсновноеНачисление, то нужно закрыть и те строки
						// ночных и вечерних, которые введены не основании графика
						Для Каждого СтрокаДоплаты Из СтрокиВечернихТекущегоНазначения Цикл
							Для Каждого НезакрытаяСтрока Из НезакрытыеСтроки Цикл
								Если ТЗНачисления.Индекс(НезакрытаяСтрока) = ТЗНачисления.Индекс(СтрокаДоплаты) Тогда
									// нашли строку с вечерними, введенными на основании графика
									СтрокаДоплаты.ДатаОкончания = ОкончаниеПериодаЗаполнения;
									// удаляем из массива незакрытых - если пользователем был изменен размер начисления
									Если Начисления.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
										ИндексСтроки = НезакрытыеСтроки.Найти(СтрокаДоплаты);
										НезакрытыеСтроки.Удалить(ИндексСтроки);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
						Для Каждого СтрокаДоплаты Из СтрокиНочныхТекущегоНазначения Цикл
							Для Каждого НезакрытаяСтрока Из НезакрытыеСтроки Цикл
								Если ТЗНачисления.Индекс(НезакрытаяСтрока) = ТЗНачисления.Индекс(СтрокаДоплаты) Тогда
									// нашли строку с ночными, введенными на основании графика
									СтрокаДоплаты.ДатаОкончания = ОкончаниеПериодаЗаполнения;
									// удаляем из массива незакрытых - если пользователем был изменен размер начисления
									Если Начисления.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
										ИндексСтроки = НезакрытыеСтроки.Найти(СтрокаДоплаты);
										НезакрытыеСтроки.Удалить(ИндексСтроки);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
						//а также для ежемесячной премии
						Для Каждого СтрокаДоплаты Из СтрокиПремииТекущегоНазначения Цикл
							Для Каждого НезакрытаяСтрока Из НезакрытыеСтроки Цикл
								Если ТЗНачисления.Индекс(НезакрытаяСтрока) = ТЗНачисления.Индекс(СтрокаДоплаты) Тогда
									// нашли строку с ночными, введенными на основании графика
									СтрокаДоплаты.ДатаОкончания = ОкончаниеПериодаЗаполнения;
									// удаляем из массива незакрытых - если пользователем был изменен размер начисления
									Если Начисления.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
										ИндексСтроки = НезакрытыеСтроки.Найти(СтрокаДоплаты);
										НезакрытыеСтроки.Удалить(ИндексСтроки);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
						Для Каждого СтрокаДоплаты Из СтрокиПриработкаТекущегоНазначения Цикл
							Для Каждого НезакрытаяСтрока Из НезакрытыеСтроки Цикл
								Если ТЗНачисления.Индекс(НезакрытаяСтрока) = ТЗНачисления.Индекс(СтрокаДоплаты) Тогда
									// нашли строку с ночными, введенными на основании графика
									СтрокаДоплаты.ДатаОкончания = ОкончаниеПериодаЗаполнения;
									// удаляем из массива незакрытых - если пользователем был изменен размер начисления
									Если Начисления.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
										ИндексСтроки = НезакрытыеСтроки.Найти(СтрокаДоплаты);
										НезакрытыеСтроки.Удалить(ИндексСтроки);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
					//
				Иначе
					ПрерватьОбход = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ПрерватьОбход Или Начисления.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
			Продолжить;
		//vvv
		ИначеЕсли Начисления.НачисляетсяВЦеломЗаМесяц Тогда
			
			// проверем не введено ли данное начисление уже
			СтрокаПоиска= Новый Структура;
			СтрокаПоиска.Вставить("Сотрудник", Начисления.Сотрудник);
			СтрокаПоиска.Вставить("ВидРасчета", Начисления.ВидРасчета);
			
			НайденныеСтроки = ТЗНачисления.НайтиСтроки(СтрокаПоиска);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Добавим новую строку начислений
		НоваяСтрока = ТЗНачисления.Добавить();
		НоваяСтрока.Сотрудник = Начисления.Сотрудник;
		НоваяСтрока.Физлицо = Начисления.Физлицо;
		НоваяСтрока.ВидРасчета = Начисления.ВидРасчета;
		НоваяСтрока.КодВычета = Начисления.КодВычета;
		//vvv
		НоваяСтрока.ППС = Начисления.ППС;
		НоваяСтрока.СпособОтраженияВБухучете=Начисления.СпособОтраженияВБухучете;
		//
		Если ПроведениеРасчетов.ЭтоРасчетСеверныхНадбавок(Начисления.СпособРасчета) И Начисления.ДатаРегистрацииСеверногоСтажа <> Null Тогда
			// получим массив процентов северных надбавок с датами их действия для нашего периода
			ПроцентыСевернойНадбавки = ПроведениеРасчетов.ПолучитьПроцентыСевернойНадбавкиЗаПериод(
					Начисления.ДатаРегистрацииСеверногоСтажа, 
					Начисления.ПорядокНачисленияСеверныхНадбавок, 
					Начисления.НачальныйПроцентСевернойНадбавки,
					Начисления.СеверныйСтажМесяцев,
					Начисления.СеверныйСтажДней,
					Начисления.Период,
					ОкончаниеПериодаЗаполнения);
			НоваяСтрока.Показатель1 = ПроцентыСевернойНадбавки[0].Процент;
		ИначеЕсли ПроведениеРасчетов.ЭтоРасчетОтСтажа(Начисления.СпособРасчета) Тогда
			Если Начисления.КоэффициентСтажа = Null Тогда
				КоэффициентСтажа = 0;
				ОбщегоНазначения.ОшибкаРасчета("Для " + Начисления.Сотрудник.Наименование + ", вид расчета """ + Начисления.ВидРасчетаНаименование+ """ не подобран размер начисления в зависимости от стажа. Размер принят равным нулю.");
			Иначе
				КоэффициентСтажа = Начисления.КоэффициентСтажа;
			КонецЕсли;
			НоваяСтрока.Показатель1 = КоэффициентСтажа;
			//vvv
			Если Начисления.СпособРасчета=Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке ТОгда
				НоваяСтрока.Показатель1=Показатель1;
				НоваяСтрока.Показатель2=Показатель2;
			КонецЕсли;
			//
		Иначе			
			НоваяСтрока.Показатель1 = Показатель1;
			НоваяСтрока.Показатель2 = Показатель2;
			НоваяСтрока.Показатель3 = Показатель3;
			НоваяСтрока.Показатель4 = Показатель4;								
			НоваяСтрока.Показатель5 = Показатель5;
			НоваяСтрока.Показатель6 = Показатель6;
		КонецЕсли;
		НоваяСтрока.Основное = Начисления.ОсновноеНачисление;
		НоваяСтрока.ДатаНачала = Начисления.Период;
		НоваяСтрока.ДатаНачалаСобытия = Начисления.ДатаНачалаСобытия;
		НоваяСтрока.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
		//vvv
		Если Начисления.НачисляетсяВЦеломЗаМесяц Тогда
			НоваяСтрока.ДатаОкончания = ОкончаниеПериодаЗаполнения;
		КонецЕсли;
		//
		НоваяСтрока.ТабельУчетаОрганизации = Начисления.ТабельУчетаОрганизации;
		НоваяСтрока.Должность = Начисления.Должность;
		НоваяСтрока.Автомобиль = Начисления.Автомобиль;
		НоваяСтрока.НомерСтрокиТабеля = Начисления.НомерСтрокиТабеля;
		//
		НоваяСтрока.СпособРасчета = Начисления.СпособРасчета;
		НоваяСтрока.ВидВремени = Начисления.ВидВремени;
		НоваяСтрока.ГрафикРаботы = Начисления.ГрафикРаботы;
		НоваяСтрока.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
		
		//vvv
		//НезакрытыеСтроки.Добавить(НоваяСтрока);
		//Если Начисления.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Тогда
		Если Не Начисления.НачисляетсяВЦеломЗаМесяц Тогда
			НезакрытыеСтроки.Добавить(НоваяСтрока);
		//	
			СтрокиНачисленийТекущегоНазначения.Добавить(НоваяСтрока);
		КонецЕсли;
		
		//vvv для сделки водителям добавим еще сдельный приработок
		Если Начисления.ВидРасчета=ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяТарифнаяЧастьВодители И НЕ ЕстьСдельныйПриработокВодители ТОгда
			НоваяСтрока = ТЗНачисления.Добавить();
			НоваяСтрока.Сотрудник = Начисления.Сотрудник;
			НоваяСтрока.Физлицо = Начисления.Физлицо;
			НоваяСтрока.ВидРасчета = СдельныйПриработокВодители;
			НоваяСтрока.КодВычета = Начисления.КодВычета;
			НоваяСтрока.ППС = Начисления.ППС;
			НоваяСтрока.СпособОтраженияВБухучете=Начисления.СпособОтраженияВБухучете;			
			НоваяСтрока.Показатель1 = Показатель1;
			НоваяСтрока.Показатель2 = Показатель2;
			НоваяСтрока.Показатель3 = Показатель3;
			НоваяСтрока.Показатель4 = Показатель4;								
			НоваяСтрока.Показатель5 = Показатель5;
			НоваяСтрока.Показатель6 = Показатель6;
			НоваяСтрока.Основное = Начисления.ОсновноеНачисление;
			НоваяСтрока.ДатаНачала = Начисления.Период;
			НоваяСтрока.ДатаНачалаСобытия = Начисления.ДатаНачалаСобытия;
			НоваяСтрока.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
			НоваяСтрока.ТабельУчетаОрганизации = Начисления.ТабельУчетаОрганизации;
			НоваяСтрока.Должность = Начисления.Должность;
			НоваяСтрока.Автомобиль = Начисления.Автомобиль;
			НоваяСтрока.НомерСтрокиТабеля = Начисления.НомерСтрокиТабеля;
			НоваяСтрока.СпособРасчета = Начисления.СпособРасчета;
			НоваяСтрока.ВидВремени = Начисления.ВидВремени;
			НоваяСтрока.ГрафикРаботы = Начисления.ГрафикРаботы;
			НоваяСтрока.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
		
			НезакрытыеСтроки.Добавить(НоваяСтрока);
			СтрокиНачисленийТекущегоНазначения.Добавить(НоваяСтрока);
	
		ИначеЕсли Начисления.ВидРасчета=ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяТарифнаяЧасть И НЕ ЕстьСдельныйПриработок ТОгда
			НоваяСтрока = ТЗНачисления.Добавить();
			НоваяСтрока.Сотрудник = Начисления.Сотрудник;
			НоваяСтрока.Физлицо = Начисления.Физлицо;
			НоваяСтрока.ВидРасчета = СдельныйПриработок;
			НоваяСтрока.КодВычета = Начисления.КодВычета;
			НоваяСтрока.ППС = Начисления.ППС;
			НоваяСтрока.СпособОтраженияВБухучете=Начисления.СпособОтраженияВБухучете;			
			НоваяСтрока.Показатель1 = Показатель1;
			НоваяСтрока.Показатель2 = Показатель2;
			НоваяСтрока.Показатель3 = Показатель3;
			НоваяСтрока.Показатель4 = Показатель4;								
			НоваяСтрока.Показатель5 = Показатель5;
			НоваяСтрока.Показатель6 = Показатель6;
			НоваяСтрока.Основное = Ложь;
			НоваяСтрока.ДатаНачала = Начисления.Период;
			НоваяСтрока.ДатаНачалаСобытия = Начисления.ДатаНачалаСобытия;
			НоваяСтрока.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
			НоваяСтрока.ТабельУчетаОрганизации = Начисления.ТабельУчетаОрганизации;
			НоваяСтрока.Должность = Начисления.Должность;
			НоваяСтрока.Автомобиль = Начисления.Автомобиль;
			НоваяСтрока.НомерСтрокиТабеля = Начисления.НомерСтрокиТабеля;
			НоваяСтрока.СпособРасчета = Начисления.СпособРасчета;
			НоваяСтрока.ВидВремени = Начисления.ВидВремени;
			НоваяСтрока.ГрафикРаботы = Начисления.ГрафикРаботы;
			НоваяСтрока.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
		
			НезакрытыеСтроки.Добавить(НоваяСтрока);
			СтрокиНачисленийТекущегоНазначения.Добавить(НоваяСтрока);
			СтрокиПриработкаТекущегоНазначения.Добавить(НоваяСтрока);	
		КонецЕсли;
		//
		//vvv
		// Добавим начисления по ночным и вечерним, если требуется и если это - основной вид расчета
		Если Начисления.ОсновноеНачисление И Начисления.ЕстьНочные И НЕ ЕстьПлановаяДоплатаЗаНочные Тогда
			НоваяСтрока = ТЗНачисления.Добавить();
			НоваяСтрока.Сотрудник = Начисления.Сотрудник;
			НоваяСтрока.Физлицо = Начисления.Физлицо;
			НоваяСтрока.ВидРасчета = ДоплатаЗаНочные;
			НоваяСтрока.Показатель1 = (Начисления.ЧасоваяТарифнаяСтавка * ПроцентДоплатыЗаНочныеЧасы) / 100;
			НоваяСтрока.Основное = Ложь;			
			НоваяСтрока.ДатаНачала = Начисления.Период;
			НоваяСтрока.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
			НоваяСтрока.ТабельУчетаОрганизации = Начисления.ТабельУчетаОрганизации;
			НоваяСтрока.Автомобиль = Начисления.Автомобиль;
			НоваяСтрока.Должность = Начисления.Должность;
			НоваяСтрока.НомерСтрокиТабеля = Начисления.НомерСтрокиТабеля;
			НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы;
			НоваяСтрока.ВидВремени = Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;
			НоваяСтрока.ГрафикРаботы = Начисления.ГрафикРаботы;
			НоваяСтрока.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
			НоваяСтрока.ППС = Начисления.ППС;
			
			НезакрытыеСтроки.Добавить(НоваяСтрока);
			СтрокиНачисленийТекущегоНазначения.Добавить(НоваяСтрока);
			СтрокиНочныхТекущегоНазначения.Добавить(НоваяСтрока);
			
		КонецЕсли;
		
		Если Начисления.ОсновноеНачисление И Начисления.ЕстьВечерние И НЕ ЕстьПлановаяДоплатаЗаВечерние Тогда
			НоваяСтрока = ТЗНачисления.Добавить();
			НоваяСтрока.Сотрудник = Начисления.Сотрудник;
			НоваяСтрока.Физлицо = Начисления.Физлицо;
			НоваяСтрока.ВидРасчета = ДоплатаЗаВечерние;
			НоваяСтрока.Показатель1 = (Начисления.ЧасоваяТарифнаяСтавка * ПроцентДоплатыЗаВечерниеЧасы) / 100;
			НоваяСтрока.Основное = Ложь;			
			НоваяСтрока.ДатаНачала = Начисления.Период;
			НоваяСтрока.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
			НоваяСтрока.Должность = Начисления.Должность;
			НоваяСтрока.ТабельУчетаОрганизации = Начисления.ТабельУчетаОрганизации;
			НоваяСтрока.Автомобиль = Начисления.Автомобиль;
			НоваяСтрока.НомерСтрокиТабеля = Начисления.НомерСтрокиТабеля;
			НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы;
			НоваяСтрока.ВидВремени = Перечисления.ВидыУчетаВремени.ПоВечернимЧасам;
			НоваяСтрока.ГрафикРаботы = Начисления.ГрафикРаботы;
			НоваяСтрока.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
			НоваяСтрока.ППС=Начисления.ППС;
			
			НезакрытыеСтроки.Добавить(НоваяСтрока);
			СтрокиНачисленийТекущегоНазначения.Добавить(НоваяСтрока);
			СтрокиВечернихТекущегоНазначения.Добавить(НоваяСтрока);
			
		КонецЕсли;
		
		//ежемесячная премия
		Если Начисления.ОсновноеНачисление И Начисления.ПроцентПремии<>0 И НЕ ЕстьПлановаяЕжемесячнаяПремия И ЕстьВидРасчетаПремия Тогда
			НоваяСтрока = ТЗНачисления.Добавить();
			НоваяСтрока.Сотрудник = Начисления.Сотрудник;
			НоваяСтрока.Физлицо = Начисления.Физлицо;
			НоваяСтрока.ВидРасчета = ЕжемесячнаяПремия;
			НоваяСтрока.Показатель1 = Начисления.ПроцентПремии;
			НоваяСтрока.Основное = Ложь;			
			НоваяСтрока.ДатаНачала = Начисления.Период;
			НоваяСтрока.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
			НоваяСтрока.Должность = Начисления.Должность;
			НоваяСтрока.ТабельУчетаОрганизации = Начисления.ТабельУчетаОрганизации;
			НоваяСтрока.Автомобиль = Начисления.Автомобиль;
			НоваяСтрока.НомерСтрокиТабеля = Начисления.НомерСтрокиТабеля;
			НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ЕжемесячнаяПремия;
			НоваяСтрока.ВидВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
			НоваяСтрока.ГрафикРаботы = Начисления.ГрафикРаботы;
			НоваяСтрока.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
			НоваяСтрока.ППС=Начисления.ППС;
			
			НезакрытыеСтроки.Добавить(НоваяСтрока);
			СтрокиНачисленийТекущегоНазначения.Добавить(НоваяСтрока);
			СтрокиПремииТекущегоНазначения.Добавить(НоваяСтрока);
			
		КонецЕсли;
		
		//добавим премию водителям
		Если Начисления.ПроцентПремииВодителей>0 Тогда
			НоваяСтрока = ТЗНачисления.Добавить();
			НоваяСтрока.Сотрудник = Начисления.Сотрудник;
			НоваяСтрока.Физлицо = Начисления.Физлицо;
			Если Начисления.ВидВремениВодителей=Справочники.КлассификаторИспользованияРабочегоВремени.Линия Тогда
				ВидРасчетаПремия = ПремияВодителям;
			ИначеЕсли Начисления.ВидВремениВодителей=Справочники.КлассификаторИспользованияРабочегоВремени.ЛинияСдельно Тогда
				ВидРасчетаПремия = ПремияВодителямСдельная;
			ИначеЕсли Начисления.ВидВремениВодителей=Справочники.КлассификаторИспользованияРабочегоВремени.Ремонт Тогда
				ВидРасчетаПремия = ПремияРемонт;
			ИначеЕсли Начисления.ВидВремениВодителей=Справочники.КлассификаторИспользованияРабочегоВремени.РемонтПлановый Тогда
				ВидРасчетаПремия = ПремияРемонтПлановый;	
			КонецЕсли;
			НоваяСтрока.ВидРасчета=ВидРасчетаПремия;
			//Если Начисления.ВидВремениВодителей=Справочники.КлассификаторИспользованияРабочегоВремени.ЛинияСдельно ТОгда
			//	НоваяСтрока.Показатель1= Начисления.ПроцентПремииВодителей;
			//Иначе
				НоваяСтрока.Показатель1 = Начисления.Показатель1;
				НоваяСтрока.Показатель2 = Начисления.ПроцентПремииВодителей;
			//КонецЕсли;
			НоваяСтрока.Основное = Ложь;			
			НоваяСтрока.ДатаНачала = Начисления.Период;
			НоваяСтрока.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
			НоваяСтрока.Должность = Начисления.Должность;
			НоваяСтрока.ТабельУчетаОрганизации = Начисления.ТабельУчетаОрганизации;
			НоваяСтрока.Автомобиль = Начисления.Автомобиль;
			НоваяСтрока.НомерСтрокиТабеля = Начисления.НомерСтрокиТабеля;
			НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы;
			НоваяСтрока.ВидВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
			НоваяСтрока.ГрафикРаботы = Начисления.ГрафикРаботы;
			НоваяСтрока.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
			НоваяСтрока.ППС=Начисления.ППС;
			
			НезакрытыеСтроки.Добавить(НоваяСтрока);
			СтрокиНачисленийТекущегоНазначения.Добавить(НоваяСтрока);
			
		КонецЕсли;
		
		//здесь добавим все автоначисления из табеля
		Для НомерНачисления=1 По 5 Цикл
			
			АвтоНачисление=Начисления["Начисление"+Строка(НомерНачисления)];
			
			Если Начисления.ОсновноеНачисление И ЗначениеЗаполнено(АвтоНачисление) Тогда
				
				НоваяСтрока = ТЗНачисления.Добавить();
				НоваяСтрока.Сотрудник = Начисления.Сотрудник;
				НоваяСтрока.Физлицо = Начисления.Физлицо;
				НоваяСтрока.ВидРасчета = АвтоНачисление;
				НоваяСтрока.Показатель1 = Начисления.ЧасоваяТарифнаяСтавка;
				НоваяСтрока.Основное = Ложь;			
				НоваяСтрока.ДатаНачала = Начисления.Период;
				НоваяСтрока.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
				НоваяСтрока.Должность = Начисления.Должность;
				НоваяСтрока.ТабельУчетаОрганизации = Начисления.ТабельУчетаОрганизации;
				НоваяСтрока.Автомобиль = Начисления.Автомобиль;
				НоваяСтрока.НомерСтрокиТабеля = Начисления.НомерСтрокиТабеля;
				НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке;
				НоваяСтрока.ГрафикРаботы = Начисления.ГрафикРаботы;
				НоваяСтрока.ВидВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
				НоваяСтрока.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
				НоваяСтрока.ППС = Начисления.ППС;
				
				НезакрытыеСтроки.Добавить(НоваяСтрока);
				СтрокиНачисленийТекущегоНазначения.Добавить(НоваяСтрока);
			
			КонецЕсли;
		
		КонецЦикла;
		//
		
		Если Начисления.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы ИЛИ Начисления.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы
			//vvv
			ИЛИ Начисления.ВидРасчета = ДоплатаЗаНочные ИЛИ Начисления.ВидРасчета = ДоплатаЗаВечерние Тогда
			//
    		СтрокаДоплаты = НоваяСтрока;
    		
    		Отбор = Новый Структура();
    		Отбор.Вставить("Сотрудник", Начисления.Сотрудник);
    		Отбор.Вставить("Физлицо", Начисления.Физлицо);
    		Отбор.Вставить("ОсновноеНачисление", Истина);
    		Строки = ВремТЗНачисления.НайтиСтроки(Отбор);
			
    		ОтборДоплаты = Новый Структура();
    		ОтборДоплаты.Вставить("Сотрудник", Начисления.Сотрудник);
    		ОтборДоплаты.Вставить("Физлицо", Начисления.Физлицо);
    		ОтборДоплаты.Вставить("ВидРасчета", Начисления.ВидРасчета);
    		СтрокиДоплаты = ВремТЗНачисления.НайтиСтроки(ОтборДоплаты);
			
    			
			Если Строки.Количество() > 1 И СтрокиДоплаты.Количество() < 2 Тогда
				
				КоличествоСтрок = Строки.Количество();    		
				НомерСтр = 0;
				СтрокаДоплаты.ДатаОкончания = Строки[1].Период;					
				Для Каждого СтрокаТЗНачисления Из Строки Цикл												
					НомерСтр = НомерСтр + 1;						
					СтрокаДоплаты.ДатаОкончания = СтрокаТЗНачисления.Период;
					Если НомерСтр > 1  Тогда
						СтрокаДоплаты = ТЗНачисления.Добавить();
						СтрокаДоплаты.Сотрудник = СтрокаТЗНачисления.Сотрудник;
						СтрокаДоплаты.Физлицо = СтрокаТЗНачисления.Физлицо;
						СтрокаДоплаты.ВидРасчета = Начисления.ВидРасчета;
						СтрокаДоплаты.КодВычета = Начисления.КодВычета;
						СтрокаДоплаты.Показатель1 =  ОбщегоНазначения.ОкруглитьПоВалюте(Начисления.Показатель1 / 100 * СтрокаТЗНачисления.ЧасоваяТарифнаяСтавка,Константы.ВалютаРегламентированногоУчета.Получить());
						СтрокаДоплаты.Основное = Начисления.ОсновноеНачисление;
						СтрокаДоплаты.ДатаНачала = СтрокаТЗНачисления.Период;
						СтрокаДоплаты.ДатаНачалаСобытия = СтрокаТЗНачисления.ДатаНачалаСобытия;
						СтрокаДоплаты.ПодразделениеОрганизации = СтрокаТЗНачисления.ПодразделениеОрганизации;
						СтрокаДоплаты.СпособРасчета = Начисления.СпособРасчета;
						СтрокаДоплаты.ВидВремени = Начисления.ВидВремени;
						СтрокаДоплаты.ГрафикРаботы = Начисления.ГрафикРаботы;
						СтрокаДоплаты.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
						//vvv
						СтрокаДоплаты.ППС = Начисления.ППС;						
						СтрокаДоплаты.ТабельУчетаОрганизации = СтрокаТЗНачисления.ТабельУчетаОрганизации;
						СтрокаДоплаты.Автомобиль = СтрокаТЗНачисления.Автомобиль;
						СтрокаДоплаты.НомерСтрокиТабеля = СтрокаТЗНачисления.НомерСтрокиТабеля;
						//
					КонецЕсли;										
				КонецЦикла;
				СтрокаДоплаты.ДатаОкончания = ОкончаниеПериодаЗаполнения;    		
			ИначеЕсли  Строки.Количество() > 1 Тогда
				Для Каждого СтрокаТЗДопНачисления Из СтрокиДоплаты Цикл												
					Если СтрокаТЗДопНачисления.Период = НоваяСтрока.ДатаНачала Тогда
						Для Каждого СтрокаТЗНачисления Из Строки Цикл												
							Если СтрокаТЗНачисления.Период = НоваяСтрока.ДатаНачала Тогда
                                НоваяСтрока.Показатель1 =  ОбщегоНазначения.ОкруглитьПоВалюте(Начисления.Показатель1 / 100 * СтрокаТЗНачисления.ЧасоваяТарифнаяСтавка,Константы.ВалютаРегламентированногоУчета.Получить());
							КонецЕсли;
						КонецЦикла;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;    		
    	КонецЕсли;		
		
		Если ПроведениеРасчетов.ЭтоРасчетОтСтажа(Начисления.СпособРасчета) И Начисления.ДеньСменыКоэффициентаСтажа <> Null Тогда
			// установим дату окончания предыдущего расчета от стажа
			Если День(КонецМесяца(Начисления.Период)) >= Начисления.ДеньСменыКоэффициентаСтажа Тогда
				ДатаСменыКоэффициентаСтажа = Дата(Год(Начисления.Период), Месяц(Начисления.Период), Начисления.ДеньСменыКоэффициентаСтажа) - 1;
				Если ДатаСменыКоэффициентаСтажа > НоваяСтрока.ДатаНачала Тогда
					НоваяСтрока.ДатаОкончания = ДатаСменыКоэффициентаСтажа;
					// ... и введем еще один
					ДопНоваяСтрока = ТЗНачисления.Добавить();
					ДопНоваяСтрока.Сотрудник = Начисления.Сотрудник;
					ДопНоваяСтрока.Физлицо = Начисления.Физлицо;
					ДопНоваяСтрока.ВидРасчета = Начисления.ВидРасчета;
					ДопНоваяСтрока.КодВычета = Начисления.КодВычета;
					ДопНоваяСтрока.Показатель1 = Начисления.СледКоэффициентСтажа;				
					ДопНоваяСтрока.Основное = Начисления.ОсновноеНачисление;
					ДопНоваяСтрока.ДатаНачала = ДатаСменыКоэффициентаСтажа + 1;
					ДопНоваяСтрока.ДатаНачалаСобытия = Начисления.ДатаНачалаСобытия;
					ДопНоваяСтрока.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
					ДопНоваяСтрока.СпособРасчета = Начисления.СпособРасчета;
					ДопНоваяСтрока.ГрафикРаботы = Начисления.ГрафикРаботы;
					ДопНоваяСтрока.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
					//vvv
					ДопНоваяСтрока.ППС = Начисления.ППС;
					ДопНоваяСтрока.Должность = Начисления.Должность;
					ДопНоваяСтрока.ТабельУчетаОрганизации = Начисления.ТабельУчетаОрганизации;
					ДопНоваяСтрока.Автомобиль = Начисления.Автомобиль;
					ДопНоваяСтрока.НомерСтрокиТабеля = Начисления.НомерСтрокиТабеля;
					//
					
					НезакрытыеСтроки.Добавить(ДопНоваяСтрока);
					СтрокиНачисленийТекущегоНазначения.Добавить(ДопНоваяСтрока);
				Иначе // период записи начиался после дня изменения коэффициента стажа - запишем в ту же запись новое значение
					НоваяСтрока.Показатель1 = Начисления.СледКоэффициентСтажа;				
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ПроведениеРасчетов.ЭтоРасчетСеверныхНадбавок(Начисления.СпособРасчета) И Начисления.ДатаРегистрацииСеверногоСтажа <> Null Тогда
			Если ПроцентыСевернойНадбавки.Количество() > 1 Тогда
				Если ПроцентыСевернойНадбавки[0].Процент <= 0 Тогда
					
					НоваяСтрока.ДатаНачала = Дата(Год(Начисления.Период), Месяц(Начисления.Период), День(ПроцентыСевернойНадбавки[1].Период));
					НоваяСтрока.Показатель1 = ПроцентыСевернойНадбавки[1].Процент;
					
				Иначе
					
					// установим дату окончания предыдущего расчета от стажа
					НоваяСтрока.ДатаОкончания = Дата(Год(Начисления.Период), Месяц(Начисления.Период), День(ПроцентыСевернойНадбавки[1].Период)) - 1;
					
					// ... и введем дополнительную
					// предполагаем, что в течение одного расчетного периода (месяца) не может произойти несколько 
					// изменений процента северной надбавки
					ДопНоваяСтрока = ТЗНачисления.Добавить();
					ДопНоваяСтрока.Сотрудник = Начисления.Сотрудник;
					ДопНоваяСтрока.Физлицо = Начисления.Физлицо;
					ДопНоваяСтрока.ВидРасчета = Начисления.ВидРасчета;
					ДопНоваяСтрока.КодВычета = Начисления.КодВычета;					
					ДопНоваяСтрока.Показатель1 = ПроцентыСевернойНадбавки[1].Процент;
					ДопНоваяСтрока.Основное = Начисления.ОсновноеНачисление;
					ДопНоваяСтрока.ДатаНачала = Дата(Год(Начисления.Период), Месяц(Начисления.Период), День(ПроцентыСевернойНадбавки[1].Период));
	                ДопНоваяСтрока.ДатаНачалаСобытия = Начисления.ДатаНачалаСобытия;
					ДопНоваяСтрока.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
					ДопНоваяСтрока.СпособРасчета = Начисления.СпособРасчета;
					ДопНоваяСтрока.ГрафикРаботы = Начисления.ГрафикРаботы;
					ДопНоваяСтрока.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
					//vvv
					ДопНоваяСтрока.ППС = Начисления.ППС;
					ДопНоваяСтрока.Должность = Начисления.Должность;
					ДопНоваяСтрока.ТабельУчетаОрганизации = Начисления.ТабельУчетаОрганизации;
					ДопНоваяСтрока.Автомобиль = Начисления.Автомобиль;
					ДопНоваяСтрока.НомерСтрокиТабеля = Начисления.НомерСтрокиТабеля;
					//
		
					НезакрытыеСтроки.Добавить(ДопНоваяСтрока);
					СтрокиНачисленийТекущегоНазначения.Добавить(ДопНоваяСтрока);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// закрываем незакрытые строки по последнему работнику концом месяца
	ЗакрытьСтроки(ТЗНачисления, НезакрытыеСтроки, ОкончаниеПериодаЗаполнения);
	
	//vvv
	Для каждого Стр Из ТЗНачисления Цикл
		Если Стр.ДатаНачала<ОбщегоНазначения.ПолучитьДатуДеноминации() Тогда
			ДеноминироватьПоказателиВидаРасчета(Стр);
		КонецЕсли;		
	КонецЦикла;	
	//
	Возврат ТЗНачисления;
	
КонецФункции

// Выполняет формирование таблицы значений для загрузки ее в табличную часть Удержания
// Параметры:
// 	Удержания - выборка результатат запроса
//  ПериодЗаполнения - дата периода для которого выполняем заполнение документа
//
// Возвращаемое значение:
//  таблица значений
//
Функция СформироватьТаблицуУдержаний(ВыборкаУдержания, ОкончаниеПериодаЗаполнения, МассивВалютСНезаданнымКурсом)
	
	ТЗУдержания = Новый ТаблицаЗначений();
	ТЗУдержания.Колонки.Добавить("Физлицо");
	ТЗУдержания.Колонки.Добавить("ВидРасчета");
	ТЗУдержания.Колонки.Добавить("Показатель1");
	ТЗУдержания.Колонки.Добавить("Показатель2");
	ТЗУдержания.Колонки.Добавить("Показатель3");
	ТЗУдержания.Колонки.Добавить("Показатель4");
	ТЗУдержания.Колонки.Добавить("Показатель5");
	ТЗУдержания.Колонки.Добавить("Показатель6");	
	ТЗУдержания.Колонки.Добавить("ДатаНачала", ОбщегоНазначенияЗК.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗУдержания.Колонки.Добавить("ДатаОкончания", ОбщегоНазначенияЗК.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗУдержания.Колонки.Добавить("ДокументОснование");
	ТЗУдержания.Колонки.Добавить("ДополнительныеДанные");
	ТЗУдержания.Колонки.Добавить("ПорядокИсчисленияИздержек");
	ТЗУдержания.Колонки.Добавить("Получатель");
	ТЗУдержания.Колонки.Добавить("Авторасчет");

	// Массив незакрытых строк таблицы значений, т.е. тех, которым не проставлена дата окончания
	НезакрытыеСтроки = Новый Массив;
	ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	Пока ВыборкаУдержания.Следующий() Цикл
		
		Для Сч = 1 По 6 Цикл
			Если ЗначениеЗаполнено(ВыборкаУдержания["Валюта"+Сч]) И (ВыборкаУдержания["КурсВалюты"+Сч] = NULL ИЛИ ВыборкаУдержания["КурсВалюты"+Сч] = 0) Тогда
				МассивВалютСНезаданнымКурсом[ВыборкаУдержания["Валюта"+ Сч]] = Истина;
			КонецЕсли;
		КонецЦикла;
		
		            
		Если ВыборкаУдержания.Физлицо <> ТекущееФизлицо Тогда
			// закрываем строки концом месяца
			ЗакрытьСтроки(ТЗУдержания, НезакрытыеСтроки, ОкончаниеПериодаЗаполнения);
			ТекущееФизлицо = ВыборкаУдержания.Физлицо;
		Иначе
			// найдем такой же вид расчета по тому же основанию среди незакрытых строк
			Строка = Неопределено;
			ИндексСтроки = Неопределено;
			НайтиСредиНезакрытыхУдержаний(НезакрытыеСтроки, ВыборкаУдержания.ВидРасчета, ВыборкаУдержания.ДокументОснование, ВыборкаУдержания.Получатель, ВыборкаУдержания.ПорядокИсчисленияИздержек, Строка, ИндексСтроки);
			Если Строка <> Неопределено Тогда
				// нашли
				Если Строка.ДатаНачала = ВыборкаУдержания.Период Тогда
					// если дата та же - меняем данные 
					// не вводим новую строку в формируемую таблицу значений
					// и оставляем "незакрытой"
					Строка.Показатель1 = ВыборкаУдержания.Показатель1;
					Строка.Показатель2 = ВыборкаУдержания.Показатель2;
					Строка.Показатель3 = ВыборкаУдержания.Показатель3;
					Строка.Показатель4 = ВыборкаУдержания.Показатель4;
					Строка.Показатель5 = ВыборкаУдержания.Показатель5;
					Строка.Показатель6 = ВыборкаУдержания.Показатель6;
					Продолжить;
				Иначе
					// иначе - "закрываем" строку и удаляем из массива незакрытых
					Строка.ДатаОкончания = ВыборкаУдержания.Период-1;
					НезакрытыеСтроки.Удалить(ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаУдержания.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТЗУдержания.Добавить();
		
		НоваяСтрока.Физлицо 				= ВыборкаУдержания.Физлицо;
		НоваяСтрока.ВидРасчета 				= ВыборкаУдержания.ВидРасчета;
		НоваяСтрока.Показатель1 			= ВыборкаУдержания.Показатель1;
		НоваяСтрока.Показатель2 			= ВыборкаУдержания.Показатель2;
		НоваяСтрока.Показатель3 			= ВыборкаУдержания.Показатель3;
		НоваяСтрока.Показатель4 			= ВыборкаУдержания.Показатель4;
		НоваяСтрока.Показатель5 			= ВыборкаУдержания.Показатель5;
		НоваяСтрока.Показатель6 			= ВыборкаУдержания.Показатель6;
		НоваяСтрока.ДатаНачала 				= ВыборкаУдержания.Период;
		НоваяСтрока.ДокументОснование 		= ВыборкаУдержания.ДокументОснование;
		НоваяСтрока.ДополнительныеДанные 	= ВыборкаУдержания.ДополнительныеДанные;
		НоваяСтрока.ПорядокИсчисленияИздержек = ВыборкаУдержания.ПорядокИсчисленияИздержек;
		НоваяСтрока.Получатель 				= ВыборкаУдержания.Получатель;
		
		НоваяСтрока.Авторасчет = Истина;
		НезакрытыеСтроки.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	// закрываем строки концом месяца
	ЗакрытьСтроки(ТЗУдержания, НезакрытыеСтроки, ОкончаниеПериодаЗаполнения);
	Возврат ТЗУдержания;
	
КонецФункции // СформироватьТаблицуУдержаний()

// Выполняет автоматическое заполнение документа по данным документа и переданным параметрам
// 
// Параметры: 
//  ПериодЗаполнения - период (дата - начало месяца) за который необходимо выполнить автозаполнение
//  ПостроительЗапроса - построитель запроса, который используется для ограничения состава физлиц
//                       по которым выполняется заполнение документа
//  ПерерассчитываемыйДокумент - перерассчитываемый документ для автозаполнения документа 
//                               по перерассчитываемому начислению зарплаты
//  Физлица - массив физлиц перерасчета
//
// Возвращаемое значение:
//  Логическое - удалось ли выполнить автоматическое заполнение документа
//
Функция ВыполнитьАвтозаполнение(НачалоПериодаЗаполнения, ОкончаниеПериодаЗаполнения, Запрос = Неопределено, ЭтоПерерасчет = Ложь, СписокФизЛиц = Неопределено, МассивСотрудники = Неопределено) Экспорт

	//vvv
	НачалоАвтозаполнения = ТекущаяДата();
	ЗаписьЖурналаРегистрации("НачислениеЗП.Автозаполнение",УровеньЖурналаРегистрации.Информация,Метаданные.Документы.НачислениеЗарплатыРаботникамОрганизаций,Ссылка,"Начало автозаполнения "+НачалоАвтозаполнения);
	//
	
	РасчетЗарплатыОрганизацииПоОтветственным = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "РасчетЗарплатыОрганизацииПоОтветственным");
	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// готовим объект Запрос и 
	// определяем тексты условий ПоВсемПодразделениямОрганизации и УсловиеНаПодразделение.
	Если Запрос = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		// подготовим временную таблицу с подразделениями
		ПоВсемПодразделениямОрганизации = Истина;
		//vvv
		ПоВсемТабелям = Истина;
		Запрос.УстановитьПараметр("парамТабельУчета",Неопределено);
		//
		ТекстЗапросаПоПодразделениям = 
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Подразделение
		|ПОМЕСТИТЬ ВТПодразделенияОтбора";
		
		Если МассивСотрудники = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
				ПоВсемПодразделениямОрганизации = Ложь;
				Запрос.УстановитьПараметр("парамПодразделение", ПодразделениеОрганизации);
				ТекстЗапросаПоПодразделениям = 
				"ВЫБРАТЬ
				|	ПодразделенияОрганизаций.Ссылка КАК Подразделение
				|ПОМЕСТИТЬ ВТПодразделенияОтбора
				|ИЗ
				|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
				|ГДЕ
				|	ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ(&парамПодразделение)
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Подразделение";
			ИначеЕсли ЗначениеЗаполнено(Ответственный) И РасчетЗарплатыОрганизацииПоОтветственным Тогда
				ПоВсемПодразделениямОрганизации = Ложь;
				Запрос.УстановитьПараметр("парамПользователь", Ответственный);
				Запрос.УстановитьПараметр("парамНачало", НачалоПериодаЗаполнения);
				ТекстЗапросаПоПодразделениям = 
				"ВЫБРАТЬ
				|	ПодразделенияОрганизаций.Ссылка КАК Подразделение
				|ПОМЕСТИТЬ ВТПодразделенияОтбора
				|ИЗ
				|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
				|ГДЕ
				|	ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ
				|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
				|				Расчетчики.ПодразделениеОрганизации
				|			ИЗ
				|				РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало) КАК Расчетчики
				|			ГДЕ
				|				Расчетчики.Пользователь = &парамПользователь)
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Подразделение";
			КонецЕсли;
			
			Если РасчетЗарплатыОрганизацииПоОтветственным И ЗначениеЗаполнено(Ответственный) Тогда
				// Проверим ответственного - является ли он расчетчиком вообще и для заданного 
				// подразделения (если оно задано)
				Запрос.УстановитьПараметр("парамПользователь" , Ответственный);
				Запрос.УстановитьПараметр("парамНачало" , НачалоПериодаЗаполнения);
				Если ПодразделениеОрганизации.Пустая() Тогда
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	Расчетчики.ПодразделениеОрганизации
					|ИЗ
					|	РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало, ) КАК Расчетчики
					|ГДЕ
					|	Расчетчики.Пользователь = &парамПользователь";
					Если Запрос.Выполнить().Пустой() Тогда
						ОбщегоНазначения.ОшибкаРасчета("Ответственный за этот документ не является расчетчиком ни одного из подразделений организации");
						Возврат  Ложь;
					КонецЕсли;
				Иначе
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	Подразделения.Ссылка
					|ИЗ
					|	Справочник.ПодразделенияОрганизаций КАК Подразделения
					|ГДЕ
					|	Подразделения.Ссылка В ИЕРАРХИИ(&парамПодразделение)
					|	И Подразделения.Ссылка В ИЕРАРХИИ
					|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
					|				Расчетчики.ПодразделениеОрганизации
					|			ИЗ
					|				РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало) КАК Расчетчики
					|			ГДЕ
					|				Расчетчики.Пользователь = &парамПользователь)";
					Запрос.УстановитьПараметр("парамПодразделение" , ПодразделениеОрганизации);
					Если Запрос.Выполнить().Пустой() Тогда
						ОбщегоНазначения.ОшибкаРасчета("Ответственный за этот документ не является расчетчиком для выбранного подразделения");
						Возврат  Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			//vvv
			Если ЗначениеЗаполнено(ТабельУчетаОрганизации) Тогда
				ПоВсемТабелям = Ложь;
				Запрос.УстановитьПараметр("парамТабельУчета",ТабельУчетаОрганизации);
			КонецЕсли;			
            //
			
			Запрос.УстановитьПараметр("ФизЛица",				СписокФизЛиц);
			Запрос.УстановитьПараметр("ПоВсемФизЛицам",			СписокФизЛиц = Неопределено);
			Запрос.УстановитьПараметр("парамОрганизация",		Организация);
			Запрос.УстановитьПараметр("парамГоловнаяОрганизация",ГоловнаяОрганизация);
			Запрос.УстановитьПараметр("парамНачало",			НачалоПериодаЗаполнения);
			Запрос.УстановитьПараметр("парамКонец",				КонецДня(ОкончаниеПериодаЗаполнения));
			
			ТекстЗапросаПоСпискуРаботников = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
			|	РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо
			|ПОМЕСТИТЬ ВТСписокРаботников
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|			&парамНачало,
			|			Организация = &парамГоловнаяОрганизация
			|				И (&ПоВсемФизЛицам
			|					ИЛИ Сотрудник.ФизЛицо В (&ФизЛица))) КАК РаботникиОрганизации
			|ГДЕ
			|	ВЫБОР
			|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
			|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ТОГДА РаботникиОрганизации.ПричинаИзмененияСостоянияЗавершения
			|			ИНАЧЕ РаботникиОрганизации.ПричинаИзмененияСостояния
			|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			//vvv
			|	И ВЫБОР
			|			КОГДА &ПоВсемТабелям
			|				ТОГДА ИСТИНА
			|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
			|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ТОГДА РаботникиОрганизации.ТабельУчетаОрганизацииЗавершения=&парамТабельУчета
			|			ИНАЧЕ РаботникиОрганизации.ТабельУчетаОрганизации=&парамТабельУчета			
			|		КОНЕЦ
			//
			|	И ВЫБОР
			|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
			|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ТОГДА РаботникиОрганизации.ОбособленноеПодразделениеЗавершения
			|			ИНАЧЕ РаботникиОрганизации.ОбособленноеПодразделение
			|		КОНЕЦ = &парамОрганизация
			|	И ВЫБОР
			|			КОГДА &ПоВсемПодразделениям
			|				ТОГДА ИСТИНА
			|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
			|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения В
			|						(ВЫБРАТЬ
			|							Подразделения.Подразделение
			|						ИЗ
			|							ВТПодразделенияОтбора КАК Подразделения)
			|			ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации В
			|					(ВЫБРАТЬ
			|						Подразделения.Подразделение
			|					ИЗ
			|						ВТПодразделенияОтбора КАК Подразделения)
			|		КОНЕЦ
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РаботникиОрганизации.Сотрудник,
			|	РаботникиОрганизации.Сотрудник.Физлицо
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|ГДЕ
			|	РаботникиОрганизации.Период > &парамНачало
			|	И РаботникиОрганизации.Период <= &парамКонец
			|	И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
			|	И (&ПоВсемФизЛицам
			|			ИЛИ РаботникиОрганизации.Сотрудник.Физлицо В (&ФизЛица))
			|	И РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация
			|	И (&ПоВсемПодразделениям
			|			ИЛИ РаботникиОрганизации.ПодразделениеОрганизации В
			|				(ВЫБРАТЬ
			|					Подразделения.Подразделение
			|				ИЗ
			|					ВТПодразделенияОтбора КАК Подразделения))
			//vvv
			|	И (&ПоВсемТабелям
			|			ИЛИ РаботникиОрганизации.ТабельУчетаОрганизации=&парамТабельУчета)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Работники.Сотрудник,
			|	Работники.Сотрудник.Физлицо
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК Работники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
			|		ПО Работники.Сотрудник = ПериодыПерекрытия.Сотрудник
			|			И (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
			|			И (ПериодыПерекрытия.Период > Работники.Период)
			|			И (ПериодыПерекрытия.Организация = &парамГоловнаяОрганизация)
			|ГДЕ
			|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|	И Работники.ПериодЗавершения > &парамНачало
			|	И Работники.ПериодЗавершения <= &парамКонец
			|	И Работники.Организация = &парамГоловнаяОрганизация
			|	И Работники.ОбособленноеПодразделениеЗавершения = &парамОрганизация
			|	И (&ПоВсемФизЛицам
			|			ИЛИ Работники.Сотрудник.Физлицо В (&ФизЛица))
			|	И (&ПоВсемПодразделениям
			|			ИЛИ Работники.ПодразделениеОрганизацииЗавершения В
			|				(ВЫБРАТЬ
			|					Подразделения.Подразделение
			|				ИЗ
			|					ВТПодразделенияОтбора КАК Подразделения))
			//vvv			
			|	И (&ПоВсемТабелям
			|			ИЛИ Работники.ТабельУчетаОрганизацииЗавершения=&парамТабельУчета)
			//
			|	И ПериодыПерекрытия.Период ЕСТЬ NULL 
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник,
			|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо
			|ИЗ
			|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
			|ГДЕ
			|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &парамКонец
			|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &парамНачало
			|	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
			|	И ДоговорНаВыполнениеРаботСФизЛицом.Организация = &парамОрганизация
			|	И (&ПоВсемФизЛицам
			|			ИЛИ ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо В (&ФизЛица))
			//vvv			
			|	И (&ПоВсемТабелям
			|			ИЛИ ДоговорНаВыполнениеРаботСФизЛицом.ТабельУчетаОрганизации=&парамТабельУчета)
			//
			|	И (&ПоВсемПодразделениям
			|			ИЛИ ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации В
			|				(ВЫБРАТЬ
			|					Подразделения.Подразделение
			|				ИЗ
			|					ВТПодразделенияОтбора КАК Подразделения))
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник";
			
		Иначе
			
			Запрос.УстановитьПараметр("Сотрудники", МассивСотрудники);
			ТекстЗапросаПоСпискуРаботников = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
			|	СотрудникиОрганизаций.Физлицо
			|ПОМЕСТИТЬ ВТСписокРаботников
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка В(&Сотрудники)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник";
			
		КонецЕсли;
		
		// создаем временную таблицу с подразделениями
		Запрос.Текст = ТекстЗапросаПоПодразделениям;
		Запрос.УстановитьПараметр("ПоВсемПодразделениям", ПоВсемПодразделениямОрганизации);
		//vvv
		Запрос.УстановитьПараметр("ПоВсемТабелям",ПоВсемТабелям);
        //
		Запрос.Выполнить();
		 		
		Запрос.Текст = ТекстЗапросаПоСпискуРаботников;
		Запрос.Выполнить();
			
		
	Иначе
		
		// создаем временную таблицу ВТСписокРаботников с сотрудниками, отобранными по критериям пользователя 
		// 
		// Поля:
		//   Сотрудник
		//   Физлицо
		//
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Выполнить();
			
		// объявим временную таблицу - она должна присутствовать, но использоваться не будет
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Подразделение
		|ПОМЕСТИТЬ ВТПодразделенияОтбора";
		Запрос.Выполнить();
		Запрос.УстановитьПараметр("ПоВсемПодразделениям", Истина);
		//vvv
		Запрос.УстановитьПараметр("ПоВсемТабелям", Истина);
		//
		
	КонецЕсли;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамПериодРегистрации" , ПериодРегистрации);
	Запрос.УстановитьПараметр("парамНачало" , НачалоПериодаЗаполнения);
	Запрос.УстановитьПараметр("парамКонец" , КонецДня(ОкончаниеПериодаЗаполнения));
	Запрос.УстановитьПараметр("парамОрганизация" , Организация);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамПодразделение" , ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("парамРегистратор" , Ссылка);
	Запрос.УстановитьПараметр("парамНачалоМесяца" , НачалоМесяца(НачалоПериодаЗаполнения));
	Запрос.УстановитьПараметр("парамДатаВалютногоУчета" , НачалоМесяца(НачалоПериодаЗаполнения));
	Запрос.УстановитьПараметр("парамВалютаРегламентУчета" , Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("парамМассивСпособовРасчетовБезВалюты" , ПроведениеРасчетов.ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты());
	Запрос.УстановитьПараметр("СреднеМесячноеКоличесвтоЧасов",	Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаЧасов);
	Запрос.УстановитьПараметр("Год",Год(НачалоПериодаЗаполнения));
	Запрос.УстановитьПараметр("ЭтоПерерасчет", ЭтоПерерасчет);
	
	СпособыРасчетаОтСтажа = Новый Массив;
	СпособыРасчетаОтСтажа.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам);
	СпособыРасчетаОтСтажа.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням);
	СпособыРасчетаОтСтажа.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке);
	СпособыРасчетаОтСтажа.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке);
	СпособыРасчетаОтСтажа.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
	СпособыРасчетаОтСтажа.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка);
	Запрос.УстановитьПараметр("СпособыРасчетаОтСтажа", СпособыРасчетаОтСтажа);
	//vvv
	Запрос.УстановитьПараметр("Вредность",ПолучитьВидРасчетаВредность());
	Запрос.УстановитьПараметр("ПорядокРасчетаНадбавкиЗаСтаж",РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Получить(Новый Структура("Организация", ОбщегоНазначения.ГоловнаяОрганизация(Организация))).ПорядокРасчетаНадбавкиЗаСтаж);
	Запрос.УстановитьПараметр("парамТабельУчета",ТабельУчетаОрганизации);
	//
	
	Если Ссылка.Пустая() Тогда
		СcылкаОбъекта = Документы.НачислениеЗарплатыРаботникамОрганизаций.ПолучитьСсылку();
		УстановитьСсылкуНового(СcылкаОбъекта);
	Иначе
		СcылкаОбъекта = Ссылка;
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", СcылкаОбъекта);
	
	//vvv
	//Выберем периоды вредности работника для начисления ППС
	Запрос.Текст=
	"ВЫБРАТЬ
	|	РаботаВоВредныхУсловиях.ДатаНачала КАК Период,
	|	РаботаВоВредныхУсловиях.Сотрудник КАК Сотрудник,
	|	ИСТИНА КАК Подходит,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= &парамНачало
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= &парамНачало
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизаций.ТабельУчетаОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизаций.ТабельУчетаОрганизации
	|	КОНЕЦ КАК ТабельУчетаОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= &парамНачало
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизаций.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизаций.Должность
	|	КОНЕЦ КАК Должность,
	|	РаботникиОрганизаций.ГрафикРаботы,
	|	РаботаВоВредныхУсловиях.Вредность КАК ППС
	|ПОМЕСТИТЬ ВТРаботаВоВредныхУсловиях
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВредностьДляППС.Сотрудник КАК Сотрудник,
	|		ВредностьДляППС.ДатаНачала КАК ДатаНачала,
	|		ВредностьДляППС.Вредность КАК Вредность,
	|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ПериодРаботника
	|	ИЗ
	|		РегистрСведений.ВредностьДляППС КАК ВредностьДляППС
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО ВредностьДляППС.Сотрудник = РаботникиОрганизаций.Сотрудник
	|				И (РаботникиОрганизаций.Период <= ВредностьДляППС.ДатаНачала)
	|	ГДЕ
	|		ВредностьДляППС.Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТСписокРаботников.Сотрудник
	|				ИЗ
	|					ВТСписокРаботников КАК ВТСписокРаботников)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВредностьДляППС.Сотрудник,
	|		ВредностьДляППС.ДатаНачала,
	|		ВредностьДляППС.Вредность) КАК РаботаВоВредныхУсловиях
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО РаботаВоВредныхУсловиях.ПериодРаботника = РаботникиОрганизаций.Период
	|			И РаботаВоВредныхУсловиях.Сотрудник = РаботникиОрганизаций.Сотрудник
	|ГДЕ РаботаВоВредныхУсловиях.ДатаНачала МЕЖДУ &парамНачало И &парамКонец 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	
	Запрос.Выполнить();
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Период КАК Период,
	|	РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.ПроцентВредности КАК ПроцентВредности,
	|	РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Сотрудник
	|ПОМЕСТИТЬ ВТДатыСменыПроцента
	|ИЗ
	|	(ВЫБРАТЬ
	|		РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Период КАК Период,
	|		МАКСИМУМ(РабочееВремяРаботниковОрганизацийВоВредныхУсловиях1.Период) КАК Период1,
	|		РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.ПроцентВредности КАК ПроцентВредности,
	|		РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Сотрудник КАК Сотрудник
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Период КАК Период,
	|			РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.ПроцентВредности КАК ПроцентВредности,
	|			РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Сотрудник КАК Сотрудник
	|		ИЗ
	|			РегистрНакопления.РабочееВремяРаботниковОрганизацийВоВредныхУсловиях КАК РабочееВремяРаботниковОрганизацийВоВредныхУсловиях
	|		ГДЕ
	|			РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТСписокРаботников.Сотрудник
	|					ИЗ
	|						ВТСписокРаботников КАК ВТСписокРаботников)
	|			И РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Период МЕЖДУ &ПарамНачало И &парамКонец) КАК РабочееВремяРаботниковОрганизацийВоВредныхУсловиях
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Период КАК Период,
	|				РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.ПроцентВредности КАК ПроцентВредности,
	|				РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Сотрудник КАК Сотрудник
	|			ИЗ
	|				РегистрНакопления.РабочееВремяРаботниковОрганизацийВоВредныхУсловиях КАК РабочееВремяРаботниковОрганизацийВоВредныхУсловиях
	|			ГДЕ
	|				РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Сотрудник В
	|						(ВЫБРАТЬ
	|							ВТСписокРаботников.Сотрудник
	|						ИЗ
	|							ВТСписокРаботников КАК ВТСписокРаботников)
	|				И РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Период МЕЖДУ ДОБАВИТЬКДАТЕ(&ПарамНачало, МЕСЯЦ, -1) И &парамКонец) КАК РабочееВремяРаботниковОрганизацийВоВредныхУсловиях1
	|			ПО (РабочееВремяРаботниковОрганизацийВоВредныхУсловиях1.Сотрудник = РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Сотрудник)
	|				И (РабочееВремяРаботниковОрганизацийВоВредныхУсловиях1.Период < РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Период)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Период,
	|		РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.ПроцентВредности,
	|		РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Сотрудник) КАК РабочееВремяРаботниковОрганизацийВоВредныхУсловиях
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Период КАК Период,
	|			РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.ПроцентВредности КАК ПроцентВредности,
	|			РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Сотрудник КАК Сотрудник
	|		ИЗ
	|			РегистрНакопления.РабочееВремяРаботниковОрганизацийВоВредныхУсловиях КАК РабочееВремяРаботниковОрганизацийВоВредныхУсловиях
	|		ГДЕ
	|			РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТСписокРаботников.Сотрудник
	|					ИЗ
	|						ВТСписокРаботников КАК ВТСписокРаботников)) КАК РабочееВремяРаботниковОрганизацийВоВредныхУсловиях1
	|		ПО (РабочееВремяРаботниковОрганизацийВоВредныхУсловиях1.Сотрудник = РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Сотрудник)
	|			И (РабочееВремяРаботниковОрганизацийВоВредныхУсловиях1.Период = РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Период1)
	|ГДЕ
	|	РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.ПроцентВредности <> РабочееВремяРаботниковОрганизацийВоВредныхУсловиях1.ПроцентВредности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыСменыПроцента.Период КАК Период,
	|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ДатыСменыПроцента.Период1, ДЕНЬ, -1), НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ДатыСменыПроцента.Период, МЕСЯЦ), ДЕНЬ)) КАК Период1,
	|	ДатыСменыПроцента.ПроцентВредности,
	|	ДатыСменыПроцента.Сотрудник
	|ПОМЕСТИТЬ ВТПериодыВредностиПоСтавкам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатыСменыПроцента.Период КАК Период,
	|		МИНИМУМ(ДатыСменыПроцента1.Период) КАК Период1,
	|		ДатыСменыПроцента.ПроцентВредности КАК ПроцентВредности,
	|		ДатыСменыПроцента.Сотрудник КАК Сотрудник
	|	ИЗ
	|		ВТДатыСменыПроцента КАК ДатыСменыПроцента
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыСменыПроцента КАК ДатыСменыПроцента1
	|			ПО (ДатыСменыПроцента1.Сотрудник = ДатыСменыПроцента.Сотрудник)
	|				И ДатыСменыПроцента.Период < ДатыСменыПроцента1.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДатыСменыПроцента.Период,
	|		ДатыСменыПроцента.ПроцентВредности,
	|		ДатыСменыПроцента.Сотрудник) КАК ДатыСменыПроцента";
	
	//ПериодвВредности  - нужны чтобы определелить была ли вредность для ППС при перемещениях
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВредностьДляППС.Сотрудник КАК Сотрудник,
	|	ВредностьДляППС.ДатаНачала КАК ПериодНачало,
	|	ВредностьДляППС.ДатаОкончания КАК ПериодКонец,
	|	ВредностьДляППС.Вредность КАК ППС
	|ПОМЕСТИТЬ ВТПериодыВредности
	|ИЗ
	|	РегистрСведений.ВредностьДляППС КАК ВредностьДляППС
	|ГДЕ
	|	ВредностьДляППС.Вредность
	|	И ВредностьДляППС.ДатаНачала МЕЖДУ &парамНачало И &парамКонец
	|	И ВредностьДляППС.Сотрудник В
	|			(ВЫБРАТЬ
	|				ВТСписокРаботников.Сотрудник
	|			ИЗ
	|				ВТСписокРаботников КАК ВТСписокРаботников)";
	
	Запрос.Выполнить();
	
	//Запрос.Текст=
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	РаботникиОрганизации.Сотрудник,
	//|	РаботникиОрганизации.Сотрудник.Физлицо
	//|ПОМЕСТИТЬ ВТТабеля
	//|ИЗ
	//|	РегистрНакопления.РабочееВремяВодителейОрганизаций КАК РаботникиОрганизации
	//|ГДЕ
	//|	РаботникиОрганизации.Период >= &парамНачало
	//|	И РаботникиОрганизации.Период <= &парамКонец
	//|	И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
	//|	И (&ПоВсемТабелям ИЛИ РаботникиОрганизации.ТабельУчетаОрганизации = &парамТабельУчета)";
	//
	//Запрос.Выполнить();
	//
	
	//
	//ТаблицаДвиженийРаботниковТекст
	//Описание:
	//	Выбирает список работников, отвечающих условиям отбора, числящихся на начало месяца и их движения за месяц.
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&парамНачало КАК Период,
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ИСТИНА КАК Подходит,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизации.Должность
	|	КОНЕЦ КАК Должность
	|ПОМЕСТИТЬ ВТДвиженияРаботников
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&парамНачало,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТСписокРаботников.Сотрудник
	|				ИЗ
	|					ВТСписокРаботников КАК ВТСписокРаботников)) КАК РаботникиОрганизации
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизации.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизации.ОбособленноеПодразделение
	|		КОНЕЦ = &парамОрганизация
	|	И ВЫБОР
	|			КОГДА &ПоВсемПодразделениям
	|				ТОГДА ИСТИНА
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения В
	|						(ВЫБРАТЬ
	|							Подразделения.Подразделение
	|						ИЗ
	|							ВТПодразделенияОтбора КАК Подразделения)
	|			ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации В
	|					(ВЫБРАТЬ
	|						Подразделения.Подразделение
	|					ИЗ
	|						ВТПодразделенияОтбора КАК Подразделения)
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Период,
	|	РаботникиОрганизации.Сотрудник,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				И РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация
	|				И (&ПоВсемПодразделениям
	|					ИЛИ РаботникиОрганизации.ПодразделениеОрганизации В
	|						(ВЫБРАТЬ
	|							Подразделения.Подразделение
	|						ИЗ
	|							ВТПодразделенияОтбора КАК Подразделения))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	РаботникиОрганизации.ПодразделениеОрганизации,
	|	РаботникиОрганизации.ГрафикРаботы,
	|	РаботникиОрганизации.Должность
	|ИЗ
	|	ВТСписокРаботников КАК СписокРаботников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО СписокРаботников.Сотрудник = РаботникиОрганизации.Сотрудник
	|ГДЕ
	|	РаботникиОрганизации.Период > &парамНачало
	|	И РаботникиОрганизации.Период <= &парамКонец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.ПериодЗавершения,
	|	Работники.Сотрудник,
	|	ВЫБОР
	|		КОГДА Работники.ПричинаИзмененияСостоянияЗавершения <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				И Работники.ОбособленноеПодразделениеЗавершения = &парамОрганизация
	|				И (&ПоВсемПодразделениям
	|					ИЛИ Работники.ПодразделениеОрганизацииЗавершения В
	|						(ВЫБРАТЬ
	|							Подразделения.Подразделение
	|						ИЗ
	|							ВТПодразделенияОтбора КАК Подразделения))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	Работники.ПодразделениеОрганизацииЗавершения,
	|	Работники.ГрафикРаботыЗавершения,
	|	Работники.ДолжностьЗавершения
	|ИЗ
	|	ВТСписокРаботников КАК СписокРаботников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|			ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|				И (ПериодыПерекрытия.Период > Работники.Период)
	|				И (ПериодыПерекрытия.Сотрудник = Работники.Сотрудник)
	|		ПО СписокРаботников.Сотрудник = Работники.Сотрудник
	|ГДЕ
	|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И Работники.ПериодЗавершения > &парамНачало
	|	И Работники.ПериодЗавершения <= &парамКонец
	|	И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&парамНачало,
	|	ДоговорникиОрганизаций.Ссылка,
	|	ИСТИНА,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТСписокРаботников КАК СписокРаботников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
	|		ПО СписокРаботников.Сотрудник = ДоговорникиОрганизаций.Ссылка
	|ГДЕ
	|	ДоговорникиОрганизаций.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|";
	//vvv
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДвиженияРаботников.Период,
	|	ДвиженияРаботников.Сотрудник,
	|	ДвиженияРаботников.Подходит,
	|	ДвиженияРаботников.ПодразделениеОрганизации,
	|	ДвиженияРаботников.ТабельУчетаОрганизации,
	//|	ВЫБОР КОГДА ДвиженияРаботников.Сотрудник В (ВЫБРАТЬ Табеля.Сотрудник ИЗ ВТТабеля КАК Табеля) ТОГДА &ПарамТабельУчета ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТабеляУчетаОрганизаций.ПустаяСсылка) КОНЕЦ КАК ТабельРаботы,
	|	ДвиженияРаботников.ГрафикРаботы,
	|	ДвиженияРаботников.Должность,
	|	ВЫБОР
	|		КОГДА ПериодыВредности.ППС
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ППС
	|ПОМЕСТИТЬ ВТДвиженияРаботников
	|ИЗ
	|	(ВЫБРАТЬ
	|		&парамНачало КАК Период,
	|		РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|		ИСТИНА КАК Подходит,
	|		ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
	|			ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
	|		КОНЕЦ КАК ПодразделениеОрганизации,
	|		ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ТабельУчетаОрганизацииЗавершения
	|			ИНАЧЕ РаботникиОрганизации.ТабельУчетаОрганизации
	|		КОНЕЦ КАК ТабельУчетаОрганизации,
	|		ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|			ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|		КОНЕЦ КАК ГрафикРаботы,
	|		ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ДолжностьЗавершения
	|			ИНАЧЕ РаботникиОрганизации.Должность
	|		КОНЕЦ КАК Должность
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&парамНачало,
	|				Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТСписокРаботников.Сотрудник
	|					ИЗ
	|						ВТСписокРаботников КАК ВТСписокРаботников)) КАК РаботникиОрганизации
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|						И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизации.ПричинаИзмененияСостоянияЗавершения
	|				ИНАЧЕ РаботникиОрганизации.ПричинаИзмененияСостояния
	|			КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		И ВЫБОР
	|				КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|						И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизации.ОбособленноеПодразделениеЗавершения
	|				ИНАЧЕ РаботникиОрганизации.ОбособленноеПодразделение
	|			КОНЕЦ = &парамОрганизация
	|		И ВЫБОР
	|				КОГДА &ПоВсемПодразделениям
	|					ТОГДА ИСТИНА
	|				КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|						И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения В
	|							(ВЫБРАТЬ
	|								Подразделения.Подразделение
	|							ИЗ
	|								ВТПодразделенияОтбора КАК Подразделения)
	|				ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации В
	|						(ВЫБРАТЬ
	|							Подразделения.Подразделение
	|						ИЗ
	|							ВТПодразделенияОтбора КАК Подразделения)
	|			КОНЕЦ
	|		И ВЫБОР
	|				КОГДА &ПоВсемТабелям
	|					ТОГДА ИСТИНА
	//|				КОГДА РаботникиОрганизации.Сотрудник В (ВЫБРАТЬ Табеля.Сотрудник ИЗ ВТТабеля КАК Табеля) ТОГДА ИСТИНА 
	|				КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|						И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизации.ТабельУчетаОрганизацииЗавершения=&парамТабельУчета
	|				ИНАЧЕ РаботникиОрганизации.ТабельУчетаОрганизации=&парамТабельУчета
	|			КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РаботникиОрганизации.Период,
	|		РаботникиОрганизации.Сотрудник,
	|		ВЫБОР
	|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					И РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация
	|					И (&ПоВсемПодразделениям
	|						ИЛИ РаботникиОрганизации.ПодразделениеОрганизации В
	|							(ВЫБРАТЬ
	|								Подразделения.Подразделение
	|							ИЗ
	|								ВТПодразделенияОтбора КАК Подразделения))
	|					И (&ПоВсемТабелям
	|						ИЛИ РаботникиОрганизации.ТабельУчетаОрганизации=&парамТабельУчета)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		РаботникиОрганизации.ПодразделениеОрганизации,
	|		РаботникиОрганизации.ТабельУчетаОрганизации,
	|		РаботникиОрганизации.ГрафикРаботы,
	|		РаботникиОрганизации.Должность
	|	ИЗ
	|		ВТСписокРаботников КАК СписокРаботников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ПО СписокРаботников.Сотрудник = РаботникиОрганизации.Сотрудник
	|	ГДЕ
	|		РаботникиОрганизации.Период > &парамНачало
	|		И РаботникиОрганизации.Период <= &парамКонец
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Работники.ПериодЗавершения,
	|		Работники.Сотрудник,
	|		ВЫБОР
	|			КОГДА Работники.ПричинаИзмененияСостоянияЗавершения <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					И Работники.ОбособленноеПодразделениеЗавершения = &парамОрганизация
	|					И (&ПоВсемПодразделениям
	|						ИЛИ Работники.ПодразделениеОрганизацииЗавершения В
	|							(ВЫБРАТЬ
	|								Подразделения.Подразделение
	|							ИЗ
	|								ВТПодразделенияОтбора КАК Подразделения))
	|					И (&ПоВсемТабелям
	|						ИЛИ Работники.ТабельУчетаОрганизацииЗавершения=&парамТабельУчета)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		Работники.ПодразделениеОрганизацииЗавершения,
	|		Работники.ТабельУчетаОрганизацииЗавершения,
	|		Работники.ГрафикРаботыЗавершения,
	|		Работники.ДолжностьЗавершения
	|	ИЗ
	|		ВТСписокРаботников КАК СписокРаботников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|				ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|					И (ПериодыПерекрытия.Период > Работники.Период)
	|					И (ПериодыПерекрытия.Сотрудник = Работники.Сотрудник)
	|			ПО СписокРаботников.Сотрудник = Работники.Сотрудник
	|	ГДЕ
	|		Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		И Работники.ПериодЗавершения > &парамНачало
	|		И Работники.ПериодЗавершения <= &парамКонец
	|		И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&парамНачало,
	|		ДоговорникиОрганизаций.Ссылка,
	|		ИСТИНА,
	|		NULL,
	|		NULL,
	//vvv
	|		NULL,
	//
	|		NULL
	|	ИЗ
	|		ВТСписокРаботников КАК СписокРаботников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
	|			ПО СписокРаботников.Сотрудник = ДоговорникиОрганизаций.Ссылка
	|	ГДЕ
	|		ДоговорникиОрганизаций.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РаботаВоВредныхУсловиях.Период,
	|		РаботаВоВредныхУсловиях.Сотрудник,
	|		РаботаВоВредныхУсловиях.Подходит,
	|		РаботаВоВредныхУсловиях.ПодразделениеОрганизации,
	|		РаботаВоВредныхУсловиях.ТабельУчетаОрганизации,
	|		РаботаВоВредныхУсловиях.ГрафикРаботы,
	|		РаботаВоВредныхУсловиях.Должность
	|	ИЗ
	|		ВТРаботаВоВредныхУсловиях КАК РаботаВоВредныхУсловиях) КАК ДвиженияРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыВредности КАК ПериодыВредности
	|		ПО ДвиженияРаботников.Сотрудник = ПериодыВредности.Сотрудник
	|			И ДвиженияРаботников.Период >= ПериодыВредности.ПериодНачало
	|			И ДвиженияРаботников.Период <= ПериодыВредности.ПериодКонец
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДвиженияРаботников.Сотрудник";	
	//
	Запрос.Выполнить();
	
	// таблица ВТЗначенияПоказателей
	// 
	// Поля:
	//   Сотрудник
	//   Показатель - введенный пользователем показатель
	//   Значение - значение показателя
	//   Валюта
	//
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Работники.Сотрудник КАК Сотрудник,
	|	Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	//vvv
	|	Работники.ТабельУчетаОрганизации КАК ТабельУчетаОрганизации,
	//
	|	ЗначенияПоказателейСхемМотивации.Показатель КАК Показатель,
	|	ЗначенияПоказателейСхемМотивации.Валюта,
	|	ВЫБОР
	|		КОГДА ЗначенияПоказателейСхемМотивации.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
	|				И (НЕ ЗначенияПоказателейСхемМотивации.Валюта В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)))
	|			ТОГДА ЗначенияПоказателейСхемМотивации.Значение * ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
	|		ИНАЧЕ ЗначенияПоказателейСхемМотивации.Значение
	|	КОНЕЦ КАК Значение
	|ПОМЕСТИТЬ ВТЗначенияПоказателей
	|ИЗ
	|	ВТДвиженияРаботников КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Ежемесячно.Подразделение КАК Подразделение,
	|			Ежемесячно.Показатель КАК Показатель,
	|			Ежемесячно.Валюта КАК Валюта,
	|			Ежемесячно.Значение КАК Значение,
	|			Ежемесячно.Сотрудник КАК Сотрудник
	|		ИЗ
	|			РегистрСведений.ЗначенияПоказателейСхемМотивации КАК Ежемесячно
	|		ГДЕ
	|			Ежемесячно.Значение ЕСТЬ НЕ NULL 
	|			И Ежемесячно.Организация = &парамОрганизация
	|			И Ежемесячно.ПериодДействия >= &парамНачало
	|			И Ежемесячно.ПериодДействия <= &парамКонец
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Подразделение,
	|			ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Показатель,
	|			ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Валюта,
	|			ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Значение,
	|			NULL
	|		ИЗ
	|			РегистрСведений.ПериодическиеЗначенияПоказателейСхемМотивации.СрезПоследних(&парамКонец, Организация = &парамОрганизация) КАК ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних) КАК ЗначенияПоказателейСхемМотивации
	|		ПО (ВЫБОР
	|				КОГДА ЗначенияПоказателейСхемМотивации.Показатель.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателейСхемМотивации.Индивидуальный)
	|						ИЛИ ЗначенияПоказателейСхемМотивации.Показатель.ВидПоказателя ЕСТЬ NULL 
	|					ТОГДА Работники.Сотрудник = ЗначенияПоказателейСхемМотивации.Сотрудник
	|				КОГДА ЗначенияПоказателейСхемМотивации.Показатель.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателейСхемМотивации.ПоПодразделению)
	|					ТОГДА Работники.ПодразделениеОрганизации = ЗначенияПоказателейСхемМотивации.Подразделение
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|		ПО (Валюты.Период = &парамДатаВалютногоУчета)
	|			И (ЗначенияПоказателейСхемМотивации.Валюта = Валюты.Валюта)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Показатель
	|";
	
	Запрос.Выполнить();

	
	// создание временных таблиц для последующего использования:
	//	ЗначенияПоказателей
	//	НеЗапрашиваемыеПриКадровыхПеремещениях
	//	ВводимыеВПлановыхНачисленияхПоказатели
	//	РаботникиИНачисления
	
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетПенсионногоФонда Тогда
		
		// таблица НеЗапрашиваемыеПриКадровыхПеремещениях
		// 	выбираем показатели, которые не спрашиваем у пользователя в кадровых документах, а также все "тарифные ставки" и их в.р.;
		//  значения этих показателей будем искать в данных о плановых начислениях, но, возможно, при других видах расчета
		// 
		//	Поля:
		//		Ссылка - вид расчета
		//		Показатель
		//		НомерСтроки - номер строки показателя
		//		ЭтоТарифнаяСтавка - признак того. что Показатель является тарифной ставкой
		// 
		
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизацийПоказатели.Показатель КАК Показатель,
		|	ОсновныеНачисленияОрганизацийПоказатели.Показатель.ВозможностьИзменения,
		|	ОсновныеНачисленияОрганизацийПоказатели.НомерСтроки КАК НомерСтроки,
		|	ОсновныеНачисленияОрганизацийПоказатели.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
		|			ТОГДА ИСТИНА
		|		КОГДА ОсновныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
		|			ТОГДА ИСТИНА
		|		КОГДА ОсновныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
		|			ТОГДА ИСТИНА
		|		КОГДА ОсновныеНачисленияОрганизацийПоказатели.Показатель.ТарифнаяСтавка
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоТарифнаяСтавка
		|ПОМЕСТИТЬ ВТНеЗапрашиваемыеПриКадровыхПеремещениях
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияОрганизацийПоказатели
		|ГДЕ
		|	((НЕ ОсновныеНачисленияОрганизацийПоказатели.ЗапрашиватьПриКадровыхПеремещениях)
		|			ИЛИ ОсновныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
		|			ИЛИ ОсновныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
		|			ИЛИ ОсновныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
		|			ИЛИ ОсновныеНачисленияОрганизацийПоказатели.Показатель.ТарифнаяСтавка)
		|	И ОсновныеНачисленияОрганизацийПоказатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДополнительныеНачисленияОрганизацийПоказатели.Показатель,
		|	ДополнительныеНачисленияОрганизацийПоказатели.Показатель.ВозможностьИзменения,
		|	ДополнительныеНачисленияОрганизацийПоказатели.НомерСтроки,
		|	ДополнительныеНачисленияОрганизацийПоказатели.Ссылка,
		|	ВЫБОР
		|		КОГДА ДополнительныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
		|			ТОГДА ИСТИНА
		|		КОГДА ДополнительныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
		|			ТОГДА ИСТИНА
		|		КОГДА ДополнительныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
		|			ТОГДА ИСТИНА
		|		КОГДА ДополнительныеНачисленияОрганизацийПоказатели.Показатель.ТарифнаяСтавка
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК ДополнительныеНачисленияОрганизацийПоказатели
		|ГДЕ
		|	((НЕ ДополнительныеНачисленияОрганизацийПоказатели.ЗапрашиватьПриКадровыхПеремещениях)
		|			ИЛИ ДополнительныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
		|			ИЛИ ДополнительныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
		|			ИЛИ ДополнительныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
		|			ИЛИ ДополнительныеНачисленияОрганизацийПоказатели.Показатель.ТарифнаяСтавка)
		|	И ДополнительныеНачисленияОрганизацийПоказатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	УдержанияОрганизацийПоказатели.Показатель,
		|	УдержанияОрганизацийПоказатели.Показатель.ВозможностьИзменения,
		|	УдержанияОрганизацийПоказатели.НомерСтроки,
		|	УдержанияОрганизацийПоказатели.Ссылка,
		|	ВЫБОР
		|		КОГДА УдержанияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
		|			ТОГДА ИСТИНА
		|		КОГДА УдержанияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
		|			ТОГДА ИСТИНА
		|		КОГДА УдержанияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
		|			ТОГДА ИСТИНА
		|		КОГДА УдержанияОрганизацийПоказатели.Показатель.ТарифнаяСтавка
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК УдержанияОрганизацийПоказатели
		|ГДЕ
		|	((НЕ УдержанияОрганизацийПоказатели.ЗапрашиватьПриКадровыхПеремещениях)
		|			ИЛИ УдержанияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
		|			ИЛИ УдержанияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
		|			ИЛИ УдержанияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
		|			ИЛИ УдержанияОрганизацийПоказатели.Показатель.ТарифнаяСтавка)
		|	И УдержанияОрганизацийПоказатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель";
		Запрос.Выполнить();
		
		// таблица ВводимыеВПлановыхНачисленияхПоказатели
		//  виды расчета и показатели, значения которых находятся при этих в.р. в данных о плановых начислениях
		// 
		//	Поля:
		//		Ссылка - вид расчета
		//		Показатель
		//		НомерСтроки - номер строки показателя
		// 
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОсновныеНачисленияОрганизаций.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисленияОрганизаций.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам))
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
		|		КОГДА ОсновныеНачисленияОрганизаций.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке))
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
		|	КОНЕЦ КАК Показатель,
		|	1 КАК НомерСтроки,
		|	ИСТИНА КАК ЭтоТарифнаяСтавка
		|ПОМЕСТИТЬ ВТВводимыеВПлановыхНачисленияхПоказатели
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке))
		|	И ОсновныеНачисленияОрганизаций.ЗачетОтработанногоВремени
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОсновныеНачисленияОрганизацийПоказатели.Ссылка,
		|	ОсновныеНачисленияОрганизацийПоказатели.Показатель,
		|	ОсновныеНачисленияОрганизацийПоказатели.НомерСтроки,
		|	ИСТИНА
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияОрганизацийПоказатели
		|ГДЕ
		|	ОсновныеНачисленияОрганизацийПоказатели.Ссылка.ЗачетОтработанногоВремени
		|	И ОсновныеНачисленияОрганизацийПоказатели.Показатель.ТарифнаяСтавка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОсновныеНачисленияОрганизацийПоказатели.Ссылка,
		|	ОсновныеНачисленияОрганизацийПоказатели.Показатель,
		|	ОсновныеНачисленияОрганизацийПоказатели.НомерСтроки,
		|	ЛОЖЬ
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияОрганизацийПоказатели
		|ГДЕ
		|	ОсновныеНачисленияОрганизацийПоказатели.Показатель В
		|			(ВЫБРАТЬ
		|				ВТНеЗапрашиваемыеПриКадровыхПеремещениях.Показатель
		|			ИЗ
		|				ВТНеЗапрашиваемыеПриКадровыхПеремещениях)
		|	И (НЕ ОсновныеНачисленияОрганизацийПоказатели.Показатель.ТарифнаяСтавка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|";
		
		Запрос.Выполнить();
		
		//vvv
		//ВТПериодыРаботыВодителей
		//Эта таблица необходима для того, чтобы "неплановые" виды расчета, которые берутся из табеля водителей,
		//попадали именно на тот период, в котором они действительно работали водителями, т.к. могут быть переводы 
		//и в противном случае "неплановые" виды расчета цепляются на период перевода, что неправильно
		Запрос.Текст=
		"ВЫБРАТЬ
		|	Работники.Сотрудник КАК Сотрудник,
		|	Работники.Период КАК НачалоПериода,
		|	МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(Работники1.Период, ДЕНЬ, -1), КОНЕЦПЕРИОДА(Работники.Период, МЕСЯЦ))) КАК КонецПериода
		|ПОМЕСТИТЬ ВТПериодыРаботыВодителей
		|ИЗ
		|	ВТДвиженияРаботников КАК Работники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияРаботников КАК Работники1
		|		ПО Работники.Период < Работники1.Период
		|		И Работники.Сотрудник = Работники1.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	Работники.Сотрудник,
		|	Работники.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Работники.Сотрудник,
		|	Работники.Период";
		
		Запрос.Выполнить();
		//
		
		// РаботникиИНачисления
		//		Таблица движений работников с добавленными сведениями об их плановых начислениях
		// 
		//	Поля:
		//		Сотрудник 
		//		ВидРасчета - плановое начисление 
		//		Показатель1,...,6 - размеры показателей 
		//		СпособРасчета - способ расчета начисления 
		//		ГрафикРаботы - график сотрудника  
		//		ВидГрафика, СуммированныйУчетРабочегоВремени, ДлительностьРабочейНедели - реквизиты графика сотрудника 
		// 
		// Описание:
		//
		//	1. 
		//  2. 
		//
		Запрос.Текст =
		//vvv
		//"ВЫБРАТЬ
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		//
		|	Работники.Сотрудник КАК Сотрудник,
		|	Работники.Сотрудник.Наименование КАК СотрудникНаименование,
		|	Работники.Сотрудник.Физлицо КАК Физлицо,
		|	ВЫБОР
		|		КОГДА Работники.Период >= НачисленияРаботниковОрганизации.Период
		|				ИЛИ НачисленияРаботниковОрганизации.Период ЕСТЬ NULL 
		|			ТОГДА Работники.Период
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Период
		|	КОНЕЦ КАК Период,
		|	Работники.Подходит,
		|	Работники.Период КАК ПериодРаботники,
		|	НачисленияРаботниковОрганизации.Период КАК ПериодНачисления,
		|	НачисленияРаботниковОрганизации.ОсновноеНачисление,
		|	НачисленияРаботниковОрганизации.ВидРасчета,
		|	НачисленияРаботниковОрганизации.ВидРасчета.Наименование,
		//vvv
		|	НачисленияРаботниковОрганизации.СпособОтраженияВБухучете,
		|	НачисленияРаботниковОрганизации.ПроцентПремииВодителей,
		|	НачисленияРаботниковОрганизации.ВидВремениВодителей,
		|	НачисленияРаботниковОрганизации.Автомобиль,
		|	НачисленияРаботниковОрганизации.НомерСтрокиТабеля,
		|	НачисленияРаботниковОрганизации.ТабельВодителя,
		|	НачисленияРаботниковОрганизации.ВидРасчета.НачисляетсяВЦеломЗаМесяц КАК НачисляетсяВЦеломЗаМесяц,
		//|	ВЫБОР КОГДА НачисленияРаботниковОрганизации.Плановое И Работники.ТабельРаботы<>Работники.ТабельУчетаОрганизации И Работники.ТабельРаботы<>ЗНАЧЕНИЕ(Справочник.ТабеляУчетаОрганизаций.ПустаяСсылка) ТОГДА ИСТИНА
		//  	ИНАЧЕ ЛОЖЬ
		//|	КОНЕЦ КАК НеБратьВРасчет,
		|	ВЫБОР КОГДА НачисленияРаботниковОрганизации.Плановое И НачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителей),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавкеВодителей),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителейРемонт),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителейРемонтПлановый),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйПриработокВодителей)) ТОГДА ИСТИНА
		|   	ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеБратьВРасчет,
		//
		|	НачисленияРаботниковОрганизации.ВидРасчета.ВидСтажа,
		|	НачисленияРаботниковОрганизации.ВидРасчета.ТребуетВводаТарифногоРазряда,
		|	НачисленияРаботниковОрганизации.ВидРасчета.КоэффициентСтажа,
		|	НачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета КАК СпособРасчета,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций
		|			ТОГДА НачисленияРаботниковОрганизации.ВидРасчета.ВидВремени
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ВидВремени,
		|	НачисленияРаботниковОрганизации.Действие КАК Действие,
		|	ЕСТЬNULL(НачисленияРаботниковОрганизации.ВидРасчета.КодДоходаНДФЛ.КодВычета,ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)) КАК КодВычета,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ТребуетВводаТарифногоРазряда
		|				ИЛИ НачисленияРаботниковОрганизации.ВидРасчета.ПроизвольнаяФормулаРасчета
		|					И (НачисленияРаботниковОрганизации.ТарифныйРазряд1 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка)
		|						И НачисленияРаботниковОрганизации.ТарифныйРазряд1 ЕСТЬ НЕ NULL )
		|			ТОГДА ТарифныеСтавки1.Размер
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Показатель1
		|	КОНЕЦ КАК Показатель1,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ПроизвольнаяФормулаРасчета
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд2 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка)
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд2 ЕСТЬ НЕ NULL 
		|			ТОГДА ТарифныеСтавки2.Размер
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Показатель2
		|	КОНЕЦ КАК Показатель2,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ПроизвольнаяФормулаРасчета
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд3 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка)
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд3 ЕСТЬ НЕ NULL 
		|			ТОГДА ТарифныеСтавки3.Размер
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Показатель3
		|	КОНЕЦ КАК Показатель3,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ПроизвольнаяФормулаРасчета
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд4 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка)
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд4 ЕСТЬ НЕ NULL 
		|			ТОГДА ТарифныеСтавки4.Размер
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Показатель4
		|	КОНЕЦ КАК Показатель4,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ПроизвольнаяФормулаРасчета
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд5 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка)
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд5 ЕСТЬ НЕ NULL 
		|			ТОГДА ТарифныеСтавки5.Размер
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Показатель5
		|	КОНЕЦ КАК Показатель5,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ПроизвольнаяФормулаРасчета
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд6 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка)
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд6 ЕСТЬ НЕ NULL 
		|			ТОГДА ТарифныеСтавки6.Размер
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Показатель6
		|	КОНЕЦ КАК Показатель6,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ТребуетВводаТарифногоРазряда
		|			ТОГДА ТарифныеСтавки1.Валюта
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Валюта1
		|	КОНЕЦ КАК Валюта1,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ТребуетВводаТарифногоРазряда
		|			ТОГДА ТарифныеСтавки2.Валюта
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Валюта2
		|	КОНЕЦ КАК Валюта2,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ТребуетВводаТарифногоРазряда
		|			ТОГДА ТарифныеСтавки3.Валюта
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Валюта3
		|	КОНЕЦ КАК Валюта3,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ТребуетВводаТарифногоРазряда
		|			ТОГДА ТарифныеСтавки4.Валюта
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Валюта4
		|	КОНЕЦ КАК Валюта4,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ТребуетВводаТарифногоРазряда
		|			ТОГДА ТарифныеСтавки5.Валюта
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Валюта5
		|	КОНЕЦ КАК Валюта5,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ТребуетВводаТарифногоРазряда
		|			ТОГДА ТарифныеСтавки6.Валюта
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Валюта6
		|	КОНЕЦ КАК Валюта6,
		|	НачисленияРаботниковОрганизации.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|	Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		//vvv
		//|	ВЫБОР
		//|		КОГДА Работники.ТабельРаботы<>Работники.ТабельУчетаОрганизации И НЕ Работники.ТабельРаботы ЕСТЬ NULL ТОГДА Работники.ТабельРаботы
		//|		ИНАЧЕ Работники.ТабельУчетаОрганизации
		//|	КОНЕЦ КАК ТабельУчетаОрганизации,
		|		Работники.ТабельУчетаОрганизации,
		//
		|	Работники.ГрафикРаботы КАК ГрафикРаботы,
		|	ЕСТЬNULL(Работники.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА Работники.ГрафикРаботы.СокращенноеРабочееВремя
		|					И Работники.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
		|				ТОГДА Работники.ГрафикРаботы.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
		|			ИНАЧЕ Работники.ГрафикРаботы.ДлительностьРабочейНедели
		|		КОНЕЦ, 0) КАК ДлительностьРабочейНедели,
		|	Работники.ГрафикРаботы.ВидГрафика КАК ВидГрафика,
		|	Работники.Должность КАК Должность,
		//vvv
		|	Работники.ППС
		//
		|ПОМЕСТИТЬ ВТРаботникиИНачисления
		|ИЗ
		|	ВТДвиженияРаботников КАК Работники
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			&парамНачало КАК Период,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ВидРасчетаИзмерение.Код ЕСТЬ NULL 
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ КАК ОсновноеНачисление,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА ВЫБОР
		|							КОГДА НачисленияРаботниковОрганизации.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|								ТОГДА НачисленияРаботниковОрганизации.ВидРасчета
		|							ИНАЧЕ НачисленияРаботниковОрганизации.ВидРасчетаЗавершения
		|						КОНЕЦ
		|				ИНАЧЕ НачисленияРаботниковОрганизации.ВидРасчета
		|			КОНЕЦ КАК ВидРасчета,
		//vvv
		|			NULL КАК СпособОтраженияВБухучете,
		|			NULL КАК ПроцентПремииВодителей,
		|			NULL КАК ВидВремениВодителей,
		//|			NULL КАК Автомобиль,
		|			РабочееВремяВодителейОрганизаций.Автомобиль КАК Автомобиль,
		|			NULL КАК НомерСтрокиТабеля,
		|			NULL КАК ТабельВодителя,
		|			ИСТИНА КАК Плановое,
		//
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.ДействиеЗавершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Действие
		|			КОНЕЦ КАК Действие,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Показатель1Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Показатель1
		|			КОНЕЦ КАК Показатель1,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Показатель2Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Показатель2
		|			КОНЕЦ КАК Показатель2,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Показатель3Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Показатель3
		|			КОНЕЦ КАК Показатель3,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Показатель4Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Показатель4
		|			КОНЕЦ КАК Показатель4,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Показатель5Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Показатель5
		|			КОНЕЦ КАК Показатель5,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Показатель6Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Показатель6
		|			КОНЕЦ КАК Показатель6,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Валюта1Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Валюта1
		|			КОНЕЦ КАК Валюта1,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Валюта2Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Валюта2
		|			КОНЕЦ КАК Валюта2,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Валюта3Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Валюта3
		|			КОНЕЦ КАК Валюта3,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Валюта4Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Валюта4
		|			КОНЕЦ КАК Валюта4,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Валюта5Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Валюта5
		|			КОНЕЦ КАК Валюта5,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Валюта6Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Валюта6
		|			КОНЕЦ КАК Валюта6,
		|			НачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
		|			НачисленияРаботниковОрганизации.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.ТарифныйРазряд1Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.ТарифныйРазряд1
		|			КОНЕЦ КАК ТарифныйРазряд1,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.ТарифныйРазряд2Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.ТарифныйРазряд2
		|			КОНЕЦ КАК ТарифныйРазряд2,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.ТарифныйРазряд3Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.ТарифныйРазряд3
		|			КОНЕЦ КАК ТарифныйРазряд3,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.ТарифныйРазряд4Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.ТарифныйРазряд4
		|			КОНЕЦ КАК ТарифныйРазряд4,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.ТарифныйРазряд5Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.ТарифныйРазряд5
		|			КОНЕЦ КАК ТарифныйРазряд5,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.ТарифныйРазряд6Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.ТарифныйРазряд6
		|			КОНЕЦ КАК ТарифныйРазряд6
		|		ИЗ
		|			РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
		|					&парамНачало,
		|					ДокументОснование = ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
		|						И Сотрудник В
		|							(ВЫБРАТЬ
		|								Работники.Сотрудник
		|							ИЗ
		|								ВТСписокРаботников КАК Работники)) КАК НачисленияРаботниковОрганизации
		//vvv
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяВодителейОрганизаций КАК РабочееВремяВодителейОрганизаций
		|				ПО НачисленияРаботниковОрганизации.Сотрудник = РабочееВремяВодителейОрганизаций.Сотрудник
		|				И НачисленияРаботниковОрганизации.Период МЕЖДУ &парамНачало И &парамКонец
		|				И НачисленияРаботниковОрганизации.ВидРасчета.УчитыватьАвтомобиль
		//
		|		ГДЕ
		|			ВЫБОР
		|					КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|							И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА НачисленияРаботниковОрганизации.ДействиеЗавершения
		|					ИНАЧЕ НачисленияРаботниковОрганизации.Действие
		|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|		
		//vvv получим начисления водителей, введнных документом ТабельУчетаРабочегоВремениВодителейОрганизации
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ПериодыРаботыВодителей.НачалоПериода,
		|			ЛОЖЬ,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ВидИспользованияРабочегоВремени=ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Линия)
		|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовойВодители)
		|				КОГДА НачисленияРаботниковОрганизации.ВидИспользованияРабочегоВремени=ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.БезВыезда)
		|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовойБезВыезда)
		|				КОГДА НачисленияРаботниковОрганизации.ВидИспользованияРабочегоВремени=ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ЛинияСдельно)
		|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяТарифнаяЧастьВодители)
		|				КОГДА НачисленияРаботниковОрганизации.ВидИспользованияРабочегоВремени=ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Ремонт)
		|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовойРемонт)
		|				КОГДА НачисленияРаботниковОрганизации.ВидИспользованияРабочегоВремени=ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РемонтПлановый)
		|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовойРемонтПлановый)
		|			КОНЕЦ КАК ВидРасчета,
		|			НачисленияРаботниковОрганизации.СпособОтраженияВБухучете,
		|			НачисленияРаботниковОрганизации.ПроцентПремии,
		|			НачисленияРаботниковОрганизации.ВидИспользованияРабочегоВремени КАК ВидВремениВодителя,
		|			НачисленияРаботниковОрганизации.Автомобиль КАК Автомобиль,
		|			НачисленияРаботниковОрганизации.НомерСтрокиТабеля КАК НомерСтрокиТабеля,
		|			НачисленияРаботниковОрганизации.ТабельУчетаОрганизации КАК ТабельВодителя,
		|			ЛОЖЬ КАК Плановое,
		|			ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать),
		|			НачисленияРаботниковОрганизации.ЧасоваяСтавка,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			&парамВалютаРегламентУчета,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			НачисленияРаботниковОрганизации.Сотрудник,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL
		|		ИЗ
		|			ВТПериодыРаботыВодителей КАК ПериодыРаботыВодителей
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяВодителейОрганизаций КАК НачисленияРаботниковОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК ТаблицаДвиженийРаботников
		|				ПО НачисленияРаботниковОрганизации.Сотрудник = ТаблицаДвиженийРаботников.Сотрудник
		|			ПО НачисленияРаботниковОрганизации.Период МЕЖДУ ПериодыРаботыВодителей.НачалоПериода И ПериодыРаботыВодителей.КонецПериода
		|			И НачисленияРаботниковОрганизации.Сотрудник = ПериодыРаботыВодителей.Сотрудник  
		|		ГДЕ
		//|			НачисленияРаботниковОрганизации.ВидИспользованияРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ЛинияСдельно),ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.БезВыезда),ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Линия),ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Ремонт),ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РемонтПлановый))
		|			НачисленияРаботниковОрганизации.ВидИспользованияРабочегоВремени В (&СписокВидовВремени)
		|			И НачисленияРаботниковОрганизации.Период >= &парамНачало
		|			И НачисленияРаботниковОрганизации.Период <= &парамКонец
		|			И НачисленияРаботниковОрганизации.Организация = &парамГоловнаяОрганизация
		//|			И (&ПоВсемТабелям
		//|						ИЛИ НачисленияРаботниковОрганизации.ТабельУчетаОрганизации=&парамТабельУчета)
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			НАЧАЛОПЕРИОДА(НачисленияРаботниковОрганизации.Период,МЕСЯЦ),
		|			ЛОЖЬ,
		|			&Вредность,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			ЛОЖЬ,
		|			ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать),
		|			НачисленияРаботниковОрганизации.ПроцентВредности,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			&парамВалютаРегламентУчета,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			НачисленияРаботниковОрганизации.Сотрудник,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL
		|		ИЗ
		|			РегистрНакопления.РабочееВремяРаботниковОрганизацийВоВредныхУсловиях КАК НачисленияРаботниковОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК ТаблицаДвиженийРаботников
		|				ПО НачисленияРаботниковОрганизации.Сотрудник = ТаблицаДвиженийРаботников.Сотрудник
		|		ГДЕ
		|			НачисленияРаботниковОрганизации.ВидИспользованияРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа))
		|			И НачисленияРаботниковОрганизации.Период >= &парамНачало
		|			И НачисленияРаботниковОрганизации.Период <= &парамКонец
		//
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			НачисленияРаботниковОрганизации.Период,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ВидРасчетаИзмерение.Код ЕСТЬ NULL 
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ,
		|			НачисленияРаботниковОрганизации.ВидРасчета,
		//vvv
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			ИСТИНА,
		//
		|			НачисленияРаботниковОрганизации.Действие,
		|			НачисленияРаботниковОрганизации.Показатель1,
		|			НачисленияРаботниковОрганизации.Показатель2,
		|			НачисленияРаботниковОрганизации.Показатель3,
		|			НачисленияРаботниковОрганизации.Показатель4,
		|			НачисленияРаботниковОрганизации.Показатель5,
		|			НачисленияРаботниковОрганизации.Показатель6,
		|			НачисленияРаботниковОрганизации.Валюта1,
		|			НачисленияРаботниковОрганизации.Валюта2,
		|			НачисленияРаботниковОрганизации.Валюта3,
		|			НачисленияРаботниковОрганизации.Валюта4,
		|			НачисленияРаботниковОрганизации.Валюта5,
		|			НачисленияРаботниковОрганизации.Валюта6,
		|			НачисленияРаботниковОрганизации.Сотрудник,
		|			НачисленияРаботниковОрганизации.ДатаНачалаСобытия,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд1,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд2,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд3,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд4,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд5,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд6
		|		ИЗ
		|			РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК ТаблицаДвиженийРаботников
		|				ПО НачисленияРаботниковОрганизации.Сотрудник = ТаблицаДвиженийРаботников.Сотрудник
		|		ГДЕ
		|			НачисленияРаботниковОрганизации.Период > &парамНачало
		|			И НачисленияРаботниковОрганизации.Период <= &парамКонец
		|			И НачисленияРаботниковОрганизации.Организация = &парамГоловнаяОрганизация
		|			И НачисленияРаботниковОрганизации.ДокументОснование = ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			НачисленияРаботниковОрганизации.ПериодЗавершения,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ВидРасчетаИзмерение.Код ЕСТЬ NULL 
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|					ТОГДА НачисленияРаботниковОрганизации.ВидРасчета
		|				ИНАЧЕ НачисленияРаботниковОрганизации.ВидРасчетаЗавершения
		|			КОНЕЦ,
		//vvv
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			ИСТИНА,
		//
		|			НачисленияРаботниковОрганизации.ДействиеЗавершения,
		|			НачисленияРаботниковОрганизации.Показатель1Завершения,
		|			НачисленияРаботниковОрганизации.Показатель2Завершения,
		|			НачисленияРаботниковОрганизации.Показатель3Завершения,
		|			НачисленияРаботниковОрганизации.Показатель4Завершения,
		|			НачисленияРаботниковОрганизации.Показатель5Завершения,
		|			НачисленияРаботниковОрганизации.Показатель6Завершения,
		|			НачисленияРаботниковОрганизации.Валюта1Завершения,
		|			НачисленияРаботниковОрганизации.Валюта2Завершения,
		|			НачисленияРаботниковОрганизации.Валюта3Завершения,
		|			НачисленияРаботниковОрганизации.Валюта4Завершения,
		|			НачисленияРаботниковОрганизации.Валюта5Завершения,
		|			НачисленияРаботниковОрганизации.Валюта6Завершения,
		|			НачисленияРаботниковОрганизации.Сотрудник,
		|			НачисленияРаботниковОрганизации.ДатаНачалаСобытия,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд1Завершения,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд2Завершения,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд3Завершения,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд4Завершения,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд5Завершения,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд6Завершения
		|		ИЗ
		|			РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК ТаблицаДвиженийРаботников
		|				ПО НачисленияРаботниковОрганизации.Сотрудник = ТаблицаДвиженийРаботников.Сотрудник
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковПроверка
		|				ПО НачисленияРаботниковОрганизации.Сотрудник = НачисленияРаботниковПроверка.Сотрудник
		|					И НачисленияРаботниковОрганизации.ВидРасчетаИзмерение = НачисленияРаботниковПроверка.ВидРасчетаИзмерение
		|					И НачисленияРаботниковОрганизации.ДокументОснование = НачисленияРаботниковПроверка.ДокументОснование
		|					И (НачисленияРаботниковПроверка.Период > НачисленияРаботниковОрганизации.Период)
		|					И (НачисленияРаботниковПроверка.Период <= НачисленияРаботниковОрганизации.ПериодЗавершения)
		|		ГДЕ
		|			НачисленияРаботниковОрганизации.ПериодЗавершения >= &парамНачало
		|			И НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамКонец
		|			И НачисленияРаботниковОрганизации.Организация = &парамГоловнаяОрганизация
		|			И НачисленияРаботниковОрганизации.ДокументОснование = ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
		|			И НачисленияРаботниковПроверка.Сотрудник ЕСТЬ NULL ) КАК НачисленияРаботниковОрганизации
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки1
		|			ПО НачисленияРаботниковОрганизации.ТарифныйРазряд1 = ТарифныеСтавки1.ТарифныйРазряд
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки2
		|			ПО НачисленияРаботниковОрганизации.ТарифныйРазряд2 = ТарифныеСтавки2.ТарифныйРазряд
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки3
		|			ПО НачисленияРаботниковОрганизации.ТарифныйРазряд3 = ТарифныеСтавки3.ТарифныйРазряд
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки4
		|			ПО НачисленияРаботниковОрганизации.ТарифныйРазряд4 = ТарифныеСтавки4.ТарифныйРазряд
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки5
		|			ПО НачисленияРаботниковОрганизации.ТарифныйРазряд5 = ТарифныеСтавки5.ТарифныйРазряд
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки6
		|			ПО НачисленияРаботниковОрганизации.ТарифныйРазряд6 = ТарифныеСтавки6.ТарифныйРазряд
		|		ПО (Работники.Подходит)
		|			И Работники.Сотрудник = НачисленияРаботниковОрганизации.Сотрудник
		//vvv
		|			И ((НачисленияРаботниковОрганизации.Плановое) ИЛИ (НЕ НачисленияРаботниковОрганизации.Плановое И 
		|			ВЫБОР
		|				КОГДА Работники.Период >= НачисленияРаботниковОрганизации.Период
		|					ИЛИ НачисленияРаботниковОрганизации.Период ЕСТЬ NULL 
		|						ТОГДА Работники.Период
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Период
		|			КОНЕЦ = НачисленияРаботниковОрганизации.Период))
		//
		//|			И Работники.Период = НачисленияРаботниковОрганизации.Период
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ВидРасчета
		|";	
		//vvv
		СписокВидовВремени=Новый СписокЗначений;
		
		СписокВидовВремени.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ЛинияСдельно);
		СписокВидовВремени.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.БезВыезда);
		СписокВидовВремени.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Линия);
		
		Если Не РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Получить(Новый Структура("Организация", ОбщегоНазначения.ГоловнаяОрганизация(Организация))).ОплачиватьРемонтПоСреднему ТОгда
			СписокВидовВремени.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Ремонт);
			СписокВидовВремени.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.РемонтПлановый);
		КонецЕсли;		
		
		Запрос.УстановитьПараметр("СписокВидовВремени",СписокВидовВремени);
		//
		Запрос.Выполнить();
		
		//получим все невводимые показатели
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокНачислений.Сотрудник КАК Сотрудник,
		|	СписокНачислений.Период,
		|	СписокНачислений.ПериодРаботники КАК ПериодРаботники,
		|	СписокНачислений.ПериодНачисления КАК ПериодНачисления,
		|	ВводимыеПоказатели.Показатель КАК Показатель,
		|	ВЫБОР
		|		КОГДА ВводимыеПоказатели.НомерСтроки = 1
		|			ТОГДА СписокНачислений.Показатель1
		|		КОГДА ВводимыеПоказатели.НомерСтроки = 2
		|			ТОГДА СписокНачислений.Показатель2
		|		КОГДА ВводимыеПоказатели.НомерСтроки = 3
		|			ТОГДА СписокНачислений.Показатель3
		|		КОГДА ВводимыеПоказатели.НомерСтроки = 4
		|			ТОГДА СписокНачислений.Показатель4
		|		КОГДА ВводимыеПоказатели.НомерСтроки = 5
		|			ТОГДА СписокНачислений.Показатель5
		|		КОГДА ВводимыеПоказатели.НомерСтроки = 6
		|			ТОГДА СписокНачислений.Показатель6
		|	КОНЕЦ КАК ЗначениеПоказателя
		|ПОМЕСТИТЬ ВТЗначенияВводимыхКадровыхПоказателей
		|ИЗ
		|	ВТРаботникиИНачисления КАК СписокНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВводимыеВПлановыхНачисленияхПоказатели КАК ВводимыеПоказатели
		|		ПО СписокНачислений.ВидРасчета = ВводимыеПоказатели.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель
		|";
		Запрос.Выполнить();
		
	КонецЕсли;

		
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда 

		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиВидовРасчета.Ссылка КАК ВидРасчета,
		|	ПоказателиВидовРасчета.Показатель1.ТипПоказателя КАК ТипПоказателя1,
		|	ПоказателиВидовРасчета.Показатель2.ТипПоказателя КАК ТипПоказателя2,
		|	ПоказателиВидовРасчета.Показатель3.ТипПоказателя КАК ТипПоказателя3,
		|	ПоказателиВидовРасчета.Показатель4.ТипПоказателя КАК ТипПоказателя4,
		|	ПоказателиВидовРасчета.Показатель5.ТипПоказателя КАК ТипПоказателя5,
		|	ПоказателиВидовРасчета.Показатель6.ТипПоказателя КАК ТипПоказателя6,
		|	ПоказателиВидовРасчета.Показатель1 КАК Показатель1,
		|	ПоказателиВидовРасчета.Показатель2 КАК Показатель2,
		|	ПоказателиВидовРасчета.Показатель3 КАК Показатель3,
		|	ПоказателиВидовРасчета.Показатель4 КАК Показатель4,
		|	ПоказателиВидовРасчета.Показатель5 КАК Показатель5,
		|	ПоказателиВидовРасчета.Показатель6 КАК Показатель6,
		|	ПоказателиВидовРасчета.Показатель1.ВозможностьИзменения КАК ВозможностьИзменения1,
		|	ПоказателиВидовРасчета.Показатель2.ВозможностьИзменения КАК ВозможностьИзменения2,
		|	ПоказателиВидовРасчета.Показатель3.ВозможностьИзменения КАК ВозможностьИзменения3,
		|	ПоказателиВидовРасчета.Показатель4.ВозможностьИзменения КАК ВозможностьИзменения4,
		|	ПоказателиВидовРасчета.Показатель5.ВозможностьИзменения КАК ВозможностьИзменения5,
		|	ПоказателиВидовРасчета.Показатель6.ВозможностьИзменения КАК ВозможностьИзменения6
		|ПОМЕСТИТЬ ВТПоказателиИВР
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ОсновныеНачисленияОрганизаций.Ссылка КАК Ссылка,
		|		Показатели1.Показатель КАК Показатель1,
		|		Показатели2.Показатель КАК Показатель2,
		|		Показатели3.Показатель КАК Показатель3,
		|		Показатели4.Показатель КАК Показатель4,
		|		Показатели5.Показатель КАК Показатель5,
		|		Показатели6.Показатель КАК Показатель6
		|	ИЗ
		|		ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели1
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели1.Ссылка
		|				И (Показатели1.НомерСтроки = 1)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели2
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели2.Ссылка
		|				И (Показатели2.НомерСтроки = 2)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели3
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели3.Ссылка
		|				И (Показатели3.НомерСтроки = 3)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели4
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели4.Ссылка
		|				И (Показатели4.НомерСтроки = 4)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели5
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели5.Ссылка
		|				И (Показатели5.НомерСтроки = 5)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели6
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели6.Ссылка
		|				И (Показатели6.НомерСтроки = 6)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДополнительныеНачисленияОрганизаций.Ссылка,
		|		Показатели1.Показатель,
		|		Показатели2.Показатель,
		|		Показатели3.Показатель,
		|		Показатели4.Показатель,
		|		Показатели5.Показатель,
		|		Показатели6.Показатель
		|	ИЗ
		|		ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели1
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели1.Ссылка
		|				И (Показатели1.НомерСтроки = 1)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели2
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели2.Ссылка
		|				И (Показатели2.НомерСтроки = 2)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели3
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели3.Ссылка
		|				И (Показатели3.НомерСтроки = 3)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели4
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели4.Ссылка
		|				И (Показатели4.НомерСтроки = 4)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели5
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели5.Ссылка
		|				И (Показатели5.НомерСтроки = 5)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели6
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели6.Ссылка
		|				И (Показатели6.НомерСтроки = 6)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		УдержанияОрганизаций.Ссылка,
		|		Показатели1.Показатель,
		|		Показатели2.Показатель,
		|		Показатели3.Показатель,
		|		Показатели4.Показатель,
		|		Показатели5.Показатель,
		|		Показатели6.Показатель
		|	ИЗ
		|		ПланВидовРасчета.УдержанияОрганизаций КАК УдержанияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели1
		|			ПО УдержанияОрганизаций.Ссылка = Показатели1.Ссылка
		|				И (Показатели1.НомерСтроки = 1)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели2
		|			ПО УдержанияОрганизаций.Ссылка = Показатели2.Ссылка
		|				И (Показатели2.НомерСтроки = 2)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели3
		|			ПО УдержанияОрганизаций.Ссылка = Показатели3.Ссылка
		|				И (Показатели3.НомерСтроки = 3)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели4
		|			ПО УдержанияОрганизаций.Ссылка = Показатели4.Ссылка
		|				И (Показатели4.НомерСтроки = 4)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели5
		|			ПО УдержанияОрганизаций.Ссылка = Показатели5.Ссылка
		|				И (Показатели5.НомерСтроки = 5)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели6
		|			ПО УдержанияОрганизаций.Ссылка = Показатели6.Ссылка
		|				И (Показатели6.НомерСтроки = 6)) КАК ПоказателиВидовРасчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель1,
		|	Показатель2,
		|	Показатель3,
		|	Показатель4,
		|	Показатель5,
		|	Показатель6
		|";

		
		Запрос.Выполнить();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиВидовРасчета.Ссылка КАК ВидРасчета,
		|	ПоказателиВидовРасчета.Показатель1.ТипПоказателя КАК ТипПоказателя1,
		|	ПоказателиВидовРасчета.Показатель2.ТипПоказателя КАК ТипПоказателя2,
		|	ПоказателиВидовРасчета.Показатель3.ТипПоказателя КАК ТипПоказателя3,
		|	ПоказателиВидовРасчета.Показатель4.ТипПоказателя КАК ТипПоказателя4,
		|	ПоказателиВидовРасчета.Показатель5.ТипПоказателя КАК ТипПоказателя5,
		|	ПоказателиВидовРасчета.Показатель6.ТипПоказателя КАК ТипПоказателя6,
		|	ПоказателиВидовРасчета.Показатель1 КАК Показатель1,
		|	ПоказателиВидовРасчета.Показатель2 КАК Показатель2,
		|	ПоказателиВидовРасчета.Показатель3 КАК Показатель3,
		|	ПоказателиВидовРасчета.Показатель4 КАК Показатель4,
		|	ПоказателиВидовРасчета.Показатель5 КАК Показатель5,
		|	ПоказателиВидовРасчета.Показатель6 КАК Показатель6,
		|	ПоказателиВидовРасчета.Показатель1.ВозможностьИзменения КАК ВозможностьИзменения1,
		|	ПоказателиВидовРасчета.Показатель2.ВозможностьИзменения КАК ВозможностьИзменения2,
		|	ПоказателиВидовРасчета.Показатель3.ВозможностьИзменения КАК ВозможностьИзменения3,
		|	ПоказателиВидовРасчета.Показатель4.ВозможностьИзменения КАК ВозможностьИзменения4,
		|	ПоказателиВидовРасчета.Показатель5.ВозможностьИзменения КАК ВозможностьИзменения5,
		|	ПоказателиВидовРасчета.Показатель6.ВозможностьИзменения КАК ВозможностьИзменения6
		|ПОМЕСТИТЬ ВТПоказателиИВР
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ОсновныеНачисленияОрганизаций.Ссылка КАК Ссылка,
		|		Показатели1.Показатель КАК Показатель1,
		|		Показатели2.Показатель КАК Показатель2,
		|		Показатели3.Показатель КАК Показатель3,
		|		Показатели4.Показатель КАК Показатель4,
		|		Показатели5.Показатель КАК Показатель5,
		|		Показатели6.Показатель КАК Показатель6
		|	ИЗ
		|		ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели1
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели1.Ссылка
		|				И (Показатели1.НомерСтроки = 1)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели2
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели2.Ссылка
		|				И (Показатели2.НомерСтроки = 2)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели3
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели3.Ссылка
		|				И (Показатели3.НомерСтроки = 3)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели4
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели4.Ссылка
		|				И (Показатели4.НомерСтроки = 4)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели5
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели5.Ссылка
		|				И (Показатели5.НомерСтроки = 5)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели6
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели6.Ссылка
		|				И (Показатели6.НомерСтроки = 6)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДополнительныеНачисленияОрганизаций.Ссылка,
		|		Показатели1.Показатель,
		|		Показатели2.Показатель,
		|		Показатели3.Показатель,
		|		Показатели4.Показатель,
		|		Показатели5.Показатель,
		|		Показатели6.Показатель
		|	ИЗ
		|		ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели1
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели1.Ссылка
		|				И (Показатели1.НомерСтроки = 1)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели2
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели2.Ссылка
		|				И (Показатели2.НомерСтроки = 2)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели3
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели3.Ссылка
		|				И (Показатели3.НомерСтроки = 3)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели4
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели4.Ссылка
		|				И (Показатели4.НомерСтроки = 4)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели5
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели5.Ссылка
		|				И (Показатели5.НомерСтроки = 5)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели6
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели6.Ссылка
		|				И (Показатели6.НомерСтроки = 6)
		|) КАК ПоказателиВидовРасчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель1,
		|	Показатель2,
		|	Показатель3,
		|	Показатель4,
		|	Показатель5,
		|	Показатель6
		|";
		Запрос.Выполнить();
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиВидовРасчета.Ссылка КАК ВидРасчета,
		|	ПоказателиВидовРасчета.Показатель1.ТипПоказателя КАК ТипПоказателя1,
		|	ПоказателиВидовРасчета.Показатель2.ТипПоказателя КАК ТипПоказателя2,
		|	ПоказателиВидовРасчета.Показатель3.ТипПоказателя КАК ТипПоказателя3,
		|	ПоказателиВидовРасчета.Показатель4.ТипПоказателя КАК ТипПоказателя4,
		|	ПоказателиВидовРасчета.Показатель5.ТипПоказателя КАК ТипПоказателя5,
		|	ПоказателиВидовРасчета.Показатель6.ТипПоказателя КАК ТипПоказателя6,
		|	ПоказателиВидовРасчета.Показатель1 КАК Показатель1,
		|	ПоказателиВидовРасчета.Показатель2 КАК Показатель2,
		|	ПоказателиВидовРасчета.Показатель3 КАК Показатель3,
		|	ПоказателиВидовРасчета.Показатель4 КАК Показатель4,
		|	ПоказателиВидовРасчета.Показатель5 КАК Показатель5,
		|	ПоказателиВидовРасчета.Показатель6 КАК Показатель6,
		|	ПоказателиВидовРасчета.Показатель1.ВозможностьИзменения КАК ВозможностьИзменения1,
		|	ПоказателиВидовРасчета.Показатель2.ВозможностьИзменения КАК ВозможностьИзменения2,
		|	ПоказателиВидовРасчета.Показатель3.ВозможностьИзменения КАК ВозможностьИзменения3,
		|	ПоказателиВидовРасчета.Показатель4.ВозможностьИзменения КАК ВозможностьИзменения4,
		|	ПоказателиВидовРасчета.Показатель5.ВозможностьИзменения КАК ВозможностьИзменения5,
		|	ПоказателиВидовРасчета.Показатель6.ВозможностьИзменения КАК ВозможностьИзменения6
		|ПОМЕСТИТЬ ВТПоказателиИВР
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		УдержанияОрганизаций.Ссылка КАК Ссылка,
		|		Показатели1.Показатель КАК Показатель1,
		|		Показатели2.Показатель КАК Показатель2,
		|		Показатели3.Показатель КАК Показатель3,
		|		Показатели4.Показатель КАК Показатель4,
		|		Показатели5.Показатель КАК Показатель5,
		|		Показатели6.Показатель КАК Показатель6
		|	ИЗ
		|		ПланВидовРасчета.УдержанияОрганизаций КАК УдержанияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели1
		|			ПО УдержанияОрганизаций.Ссылка = Показатели1.Ссылка
		|				И (Показатели1.НомерСтроки = 1)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели2
		|			ПО УдержанияОрганизаций.Ссылка = Показатели2.Ссылка
		|				И (Показатели2.НомерСтроки = 2)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели3
		|			ПО УдержанияОрганизаций.Ссылка = Показатели3.Ссылка
		|				И (Показатели3.НомерСтроки = 3)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели4
		|			ПО УдержанияОрганизаций.Ссылка = Показатели4.Ссылка
		|				И (Показатели4.НомерСтроки = 4)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели5
		|			ПО УдержанияОрганизаций.Ссылка = Показатели5.Ссылка
		|				И (Показатели5.НомерСтроки = 5)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели6
		|			ПО УдержанияОрганизаций.Ссылка = Показатели6.Ссылка
		|				И (Показатели6.НомерСтроки = 6)) КАК ПоказателиВидовРасчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель1,
		|	Показатель2,
		|	Показатель3,
		|	Показатель4,
		|	Показатель5,
		|	Показатель6";
		
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                |	ВложеныйЗапрос.ВидРасчета КАК ВидРасчета,
	                |	ВложеныйЗапрос.Сотрудник КАК Сотрудник,
	                |	ВложеныйЗапрос.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	                |	МАКСИМУМ(ВложеныйЗапрос.ТипПоказателя1) КАК ТипПоказателя1,
	                |	МАКСИМУМ(ВложеныйЗапрос.ВозможностьИзменения1) КАК ВозможностьИзменения1,
	                |	МАКСИМУМ(ВложеныйЗапрос.Показатель1) КАК Показатель1,
	                |	МАКСИМУМ(ВложеныйЗапрос.ТипПоказателя2) КАК ТипПоказателя2,
	                |	МАКСИМУМ(ВложеныйЗапрос.ВозможностьИзменения2) КАК ВозможностьИзменения2,
	                |	МАКСИМУМ(ВложеныйЗапрос.Показатель2) КАК Показатель2,
	                |	МАКСИМУМ(ВложеныйЗапрос.ТипПоказателя3) КАК ТипПоказателя3,
	                |	МАКСИМУМ(ВложеныйЗапрос.ВозможностьИзменения3) КАК ВозможностьИзменения3,
	                |	МАКСИМУМ(ВложеныйЗапрос.Показатель3) КАК Показатель3,
	                |	МАКСИМУМ(ВложеныйЗапрос.ТипПоказателя4) КАК ТипПоказателя4,
	                |	МАКСИМУМ(ВложеныйЗапрос.ВозможностьИзменения4) КАК ВозможностьИзменения4,
	                |	МАКСИМУМ(ВложеныйЗапрос.Показатель4) КАК Показатель4,
	                |	МАКСИМУМ(ВложеныйЗапрос.ТипПоказателя5) КАК ТипПоказателя5,
	                |	МАКСИМУМ(ВложеныйЗапрос.ВозможностьИзменения5) КАК ВозможностьИзменения5,
	                |	МАКСИМУМ(ВложеныйЗапрос.Показатель5) КАК Показатель5,
	                |	МАКСИМУМ(ВложеныйЗапрос.ТипПоказателя6) КАК ТипПоказателя6,
	                |	МАКСИМУМ(ВложеныйЗапрос.ВозможностьИзменения6) КАК ВозможностьИзменения6,
	                |	МАКСИМУМ(ВложеныйЗапрос.Показатель6) КАК Показатель6,
	                |	МАКСИМУМ(ВложеныйЗапрос.Валюта1) КАК Валюта1,
	                |	МАКСИМУМ(ВложеныйЗапрос.Валюта2) КАК Валюта2,
	                |	МАКСИМУМ(ВложеныйЗапрос.Валюта3) КАК Валюта3,
	                |	МАКСИМУМ(ВложеныйЗапрос.Валюта4) КАК Валюта4,
	                |	МАКСИМУМ(ВложеныйЗапрос.Валюта5) КАК Валюта5,
	                |	МАКСИМУМ(ВложеныйЗапрос.Валюта6) КАК Валюта6
					|ПОМЕСТИТЬ ВТПоказатели
	                |ИЗ
	                |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |		ПоказателиИВР.ВидРасчета КАК ВидРасчета,
	                |		ЗначенияПоказателей1.Сотрудник КАК Сотрудник,
	                |		ЗначенияПоказателей1.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	                |		ПоказателиИВР.ТипПоказателя1 КАК ТипПоказателя1,
	                |		ПоказателиИВР.ВозможностьИзменения1 КАК ВозможностьИзменения1,
	                |		ЗначенияПоказателей1.Значение КАК Показатель1,
	                |		NULL КАК ТипПоказателя2,
	                |		NULL КАК ВозможностьИзменения2,
	                |		NULL КАК Показатель2,
	                |		NULL КАК ТипПоказателя3,
	                |		NULL КАК ВозможностьИзменения3,
	                |		NULL КАК Показатель3,
	                |		NULL КАК ТипПоказателя4,
	                |		NULL КАК ВозможностьИзменения4,
	                |		NULL КАК Показатель4,
	                |		NULL КАК ТипПоказателя5,
	                |		NULL КАК ВозможностьИзменения5,
	                |		NULL КАК Показатель5,
	                |		NULL КАК ТипПоказателя6,
	                |		NULL КАК ВозможностьИзменения6,
	                |		NULL КАК Показатель6,
	                |		ЗначенияПоказателей1.Валюта КАК Валюта1,
	                |		NULL КАК Валюта2,
	                |		NULL КАК Валюта3,
	                |		NULL КАК Валюта4,
	                |		NULL КАК Валюта5,
	                |		NULL КАК Валюта6
	                |	ИЗ
	                |		ВТПоказателиИВР КАК ПоказателиИВР
	                |			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей1
	                |			ПО ПоказателиИВР.Показатель1 = ЗначенияПоказателей1.Показатель
	                |	
	                |	ОБЪЕДИНИТЬ
	                |	
	                |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |		ПоказателиИВР.ВидРасчета,
	                |		ЗначенияПоказателей2.Сотрудник,
	                |		ЗначенияПоказателей2.ПодразделениеОрганизации,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ПоказателиИВР.ТипПоказателя2,
	                |		ПоказателиИВР.ВозможностьИзменения2,
	                |		ЗначенияПоказателей2.Значение,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ЗначенияПоказателей2.Валюта,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL
	                |	ИЗ
	                |		ВТПоказателиИВР КАК ПоказателиИВР
	                |			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей2
	                |			ПО ПоказателиИВР.Показатель2 = ЗначенияПоказателей2.Показатель
	                |	
	                |	ОБЪЕДИНИТЬ
	                |	
	                |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |		ПоказателиИВР.ВидРасчета,
	                |		ЗначенияПоказателей3.Сотрудник,
	                |		ЗначенияПоказателей3.ПодразделениеОрганизации,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ПоказателиИВР.ТипПоказателя3,
	                |		ПоказателиИВР.ВозможностьИзменения3,
	                |		ЗначенияПоказателей3.Значение,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ЗначенияПоказателей3.Валюта,
	                |		NULL,
	                |		NULL,
	                |		NULL
	                |	ИЗ
	                |		ВТПоказателиИВР КАК ПоказателиИВР
	                |			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей3
	                |			ПО ПоказателиИВР.Показатель3 = ЗначенияПоказателей3.Показатель
	                |	
	                |	ОБЪЕДИНИТЬ
	                |	
	                |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |		ПоказателиИВР.ВидРасчета,
	                |		ЗначенияПоказателей4.Сотрудник,
	                |		ЗначенияПоказателей4.ПодразделениеОрганизации,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ПоказателиИВР.ТипПоказателя4,
	                |		ПоказателиИВР.ВозможностьИзменения4,
	                |		ЗначенияПоказателей4.Значение,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ЗначенияПоказателей4.Валюта,
	                |		NULL,
	                |		NULL
	                |	ИЗ
	                |		ВТПоказателиИВР КАК ПоказателиИВР
	                |			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей4
	                |			ПО ПоказателиИВР.Показатель4 = ЗначенияПоказателей4.Показатель
	                |	
	                |	ОБЪЕДИНИТЬ
	                |	
	                |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |		ПоказателиИВР.ВидРасчета,
	                |		ЗначенияПоказателей5.Сотрудник,
	                |		ЗначенияПоказателей5.ПодразделениеОрганизации,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ПоказателиИВР.ТипПоказателя5,
	                |		ПоказателиИВР.ВозможностьИзменения5,
	                |		ЗначенияПоказателей5.Значение,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ЗначенияПоказателей5.Валюта,
	                |		NULL
	                |	ИЗ
	                |		ВТПоказателиИВР КАК ПоказателиИВР
	                |			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей5
	                |			ПО ПоказателиИВР.Показатель5 = ЗначенияПоказателей5.Показатель
	                |	
	                |	ОБЪЕДИНИТЬ
	                |	
	                |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |		ПоказателиИВР.ВидРасчета,
	                |		ЗначенияПоказателей6.Сотрудник,
	                |		ЗначенияПоказателей6.ПодразделениеОрганизации,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ПоказателиИВР.ТипПоказателя6,
	                |		ПоказателиИВР.ВозможностьИзменения6,
	                |		ЗначенияПоказателей6.Значение,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ЗначенияПоказателей6.Валюта
	                |	ИЗ
	                |		ВТПоказателиИВР КАК ПоказателиИВР
	                |			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей6
	                |			ПО ПоказателиИВР.Показатель6 = ЗначенияПоказателей6.Показатель) КАК ВложеныйЗапрос
	                |ГДЕ
	                |	(ВложеныйЗапрос.Показатель1 <> 0
	                |			ИЛИ ВложеныйЗапрос.Показатель2 <> 0
	                |			ИЛИ ВложеныйЗапрос.Показатель3 <> 0
	                |			ИЛИ ВложеныйЗапрос.Показатель4 <> 0
	                |			ИЛИ ВложеныйЗапрос.Показатель5 <> 0
	                |			ИЛИ ВложеныйЗапрос.Показатель6 <> 0)
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ВложеныйЗапрос.ВидРасчета,
	                |	ВложеныйЗапрос.Сотрудник,
	                |	ВложеныйЗапрос.ПодразделениеОрганизации
	                |
					|ИНДЕКСИРОВАТЬ ПО
					|	Сотрудник,
					|	ПодразделениеОрганизации,
					|	ВидРасчета
					|";
					
	Запрос.Выполнить();
	
    МассивВалютСНезаданнымКурсом = Новый Соответствие;
		
	// АВТОЗАПОЛНЕНИЕ ТЧ "Начисления", "ДополнительныеНачисления" и "ДоговорыНаВыполнениеРабот"
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетПенсионногоФонда Тогда
		
		// таблица ОсновныеНачисления  
		//	    выборка сведений об уже выполненных начислениях за отработанное время - для выбрасывания 
		// 		ранее "обслуженных" работников
		//	Поля:
		//		Сотрудник,
		//		ПодразделениеОрганизации
		//
		
		Если ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗарплатаЗаПервуюПоловинуМесяца.Сотрудник КАК Сотрудник,
			|	ТаблицаДвиженийРаботников.ПодразделениеОрганизации
			|ПОМЕСТИТЬ ВТОсновныеНачисления
			|ИЗ
			|	РегистрНакопления.ЗарплатаЗаПервуюПоловинуМесяца КАК ЗарплатаЗаПервуюПоловинуМесяца
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДвиженияРаботников КАК ТаблицаДвиженийРаботников
			|		ПО ЗарплатаЗаПервуюПоловинуМесяца.Сотрудник = ТаблицаДвиженийРаботников.Сотрудник
			|ГДЕ
			|	ЗарплатаЗаПервуюПоловинуМесяца.Организация = &парамОрганизация
			|	И ЗарплатаЗаПервуюПоловинуМесяца.Регистратор <> &парамРегистратор
			|	И НАЧАЛОПЕРИОДА(ЗарплатаЗаПервуюПоловинуМесяца.Период, МЕСЯЦ) = &парамНачалоМесяца
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник";		
			Запрос.Выполнить();
			
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОсновныеНачисления.Сотрудник КАК Сотрудник,
			//vvv нужен для правильного разбора "обслуженных" видов расчета сотрудника
			|	ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
			|	ОсновныеНачисления.ТабельУчетаОрганизации КАК ТабельУчетаОрганизации,
			|	ОсновныеНачисления.Должность КАК Должность,
			|	ОсновныеНачисления.Регистратор КАК Регистратор,
			//
			|	ОсновныеНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации
			|ПОМЕСТИТЬ ВТОсновныеНачисления
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДвиженияРаботников КАК ТаблицаДвиженийРаботников
			|		ПО ОсновныеНачисления.Сотрудник = ТаблицаДвиженийРаботников.Сотрудник
			|ГДЕ
			|	ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
			|	И ОсновныеНачисления.ПериодДействияКонец <= &парамКонец
			|	И ОсновныеНачисления.ПериодДействияНачало >= &парамНачало
			|	И ОсновныеНачисления.Организация = &парамГоловнаяОрганизация
			//vvv
			|	И (&ПоВсемТабелям
			|						ИЛИ ОсновныеНачисления.ТабельУчетаОрганизации=&парамТабельУчета)
			// добавляем условие, будем считать рассчитанными начисления, введенные в распределении заработка
			//|	И (ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
			//|				И ОсновныеНачисления.ВидРасчета.ЗачетНормыВремени
			//|			ИЛИ ОсновныеНачисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты))
			|	И (((ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
			|				И ОсновныеНачисления.ВидРасчета.ЗачетНормыВремени
			|			ИЛИ ОсновныеНачисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты)))
			|	ИЛИ (ОсновныеНачисления.Регистратор ССЫЛКА Документ.РасчетОсновногоЗаработкаРаботниковОрганизации))
			//
			|	И (НЕ ОсновныеНачисления.Сторно)
			|	И ОсновныеНачисления.Регистратор <> &парамРегистратор
			|	И ОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник";		
			Запрос.Выполнить();
		КонецЕсли;
		
		// НормаВремениПоСводнымИндивидуальнымГрафикам
		//		Сотрудники, для которых введены сводные данные об их графике
		// 
		//	Поля:
		//		Сотрудник
		//		ЧасовЗаМесяц - указанное пользователем значение
		// 
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокРаботников.Сотрудник КАК Сотрудник,
		|	СводныеИндивидуальныеГрафики.Часов КАК ЧасовЗаМесяц
		|ИЗ
		|	ВТСписокРаботников КАК СписокРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
		|		ПО СписокРаботников.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
		|			И (СводныеИндивидуальныеГрафики.Месяц = &парамПериодРегистрации)
		|ГДЕ
		|	СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL";
		
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокРаботников.Сотрудник КАК Сотрудник,
		|	СводныеИндивидуальныеГрафики.Часов КАК ЧасовЗаМесяц
		|ПОМЕСТИТЬ ВТНормаВремениПоСводнымИндивидуальнымГрафикам
		|ИЗ
		|	ВТСписокРаботников КАК СписокРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
		|		ПО СписокРаботников.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
		|			И (СводныеИндивидуальныеГрафики.Месяц = &парамПериодРегистрации)
		|ГДЕ
		|	СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
		Запрос.Выполнить();
		
		// НормаВремениПоЕжедневнымИндивидуальнымГрафикам
		//		Таблица сотрудников и нормы времени в часах, введенной индивидуальными графиками
		// 
		//	Поля:
		//		Сотрудник,
		//		ЧасовЗаМесяц - суммируем все часы рабочего времени
		// 
		// Описание:
		//
		//	выбираем данные из рег-ра ГрафикиРаботыПоВидамВремени,	
		//	введенные доками ВводИндивидуальныхГрафиков, т.е. по строкам с выставленным флажком План
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СписокРаботников.Сотрудник КАК Сотрудник,
		|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК ЧасовЗаМесяц
		|ИЗ
		|	ВТСписокРаботников КАК СписокРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО СписокРаботников.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
		|			И (ГрафикиРаботыПоВидамВремени.Месяц = &парамПериодРегистрации)
		|			И (ГрафикиРаботыПоВидамВремени.План)
		|ГДЕ
		|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокРаботников.Сотрудник";
		
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СписокРаботников.Сотрудник КАК Сотрудник,
		|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК ЧасовЗаМесяц
		|ПОМЕСТИТЬ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам
		|ИЗ
		|	ВТСписокРаботников КАК СписокРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО СписокРаботников.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
		|			И (ГрафикиРаботыПоВидамВремени.Месяц = &парамПериодРегистрации)
		|			И (ГрафикиРаботыПоВидамВремени.План)
		|ГДЕ
		|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокРаботников.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
		Запрос.Выполнить();
		
		// НормаВремениПоОбщимГрафикам
		//		Таблица сотрудников и нормы времени в часах по общим графикам
		// 
		//	Поля:
		//		Сотрудник,
		//		ЧасовЗаМесяц - суммируем все часы рабочего времени
		// 
		// Описание:
		//
		//	выбираем данные из рег-ра ГрафикиРаботыПоВидамВремени для общих графиков
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписокРаботников.Сотрудник КАК Сотрудник,
		|	СписокРаботников.ГрафикРаботы,
		|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК ЧасовЗаМесяц
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СписокРаботников.Сотрудник КАК Сотрудник,
		|		ВЫБОР
		|			КОГДА СписокРаботников.ГрафикРаботы.СокращенноеРабочееВремя
		|					И СписокРаботников.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
		|				ТОГДА СписокРаботников.ГрафикРаботы.ГрафикПолногоРабочегоВремени
		|			ИНАЧЕ СписокРаботников.ГрафикРаботы
		|		КОНЕЦ КАК ГрафикРаботыНорма,
		|		СписокРаботников.ГрафикРаботы КАК ГрафикРаботы
		|	ИЗ
		|		ВТДвиженияРаботников КАК СписокРаботников) КАК СписокРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО СписокРаботников.ГрафикРаботыНорма = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
       	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
		|			И (ГрафикиРаботыПоВидамВремени.Месяц = &парамПериодРегистрации)
		|			И (ГрафикиРаботыПоВидамВремени.План)
		|ГДЕ
		|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокРаботников.Сотрудник,
		|	СписокРаботников.ГрафикРаботы";
		Запрос.Выполнить();

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписокРаботников.Сотрудник КАК Сотрудник,
		|	СписокРаботников.ГрафикРаботы,
		|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК ЧасовЗаМесяц
		|ПОМЕСТИТЬ ВТНормаВремениПоОбщимГрафикам
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СписокРаботников.Сотрудник КАК Сотрудник,
		|		ВЫБОР
		|			КОГДА СписокРаботников.ГрафикРаботы.СокращенноеРабочееВремя
		|					И СписокРаботников.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
		|				ТОГДА СписокРаботников.ГрафикРаботы.ГрафикПолногоРабочегоВремени
		|			ИНАЧЕ СписокРаботников.ГрафикРаботы
		|		КОНЕЦ КАК ГрафикРаботыНорма,
		|		СписокРаботников.ГрафикРаботы КАК ГрафикРаботы
		|	ИЗ
		|		ВТДвиженияРаботников КАК СписокРаботников) КАК СписокРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО СписокРаботников.ГрафикРаботыНорма = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
       	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
		|			И (ГрафикиРаботыПоВидамВремени.Месяц = &парамПериодРегистрации)
		|			И (ГрафикиРаботыПоВидамВремени.План)
		|ГДЕ
		|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокРаботников.Сотрудник,
		|	СписокРаботников.ГрафикРаботы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДатыСтажа.Сотрудник КАК Сотрудник,
		|	ДатыСтажа.Физлицо,
		|	ДатыСтажа.ПериодРаботники,
		|	ДатыСтажа.ПериодСеверногоСтажа КАК ДатаРегистрацииСеверногоСтажа,
		|	СведенияОСтажеРаботыНаСевере.ПорядокНачисленияСеверныхНадбавок,
		|	СведенияОСтажеРаботыНаСевере.НачальныйПроцентСевернойНадбавки,
		|	СведенияОСтажеРаботыНаСевере.СеверныйСтажМесяцев,
		|	СведенияОСтажеРаботыНаСевере.СеверныйСтажДней
		|ПОМЕСТИТЬ ВТДанныеОСеверномСтаже
		|ИЗ
		|	(ВЫБРАТЬ
		|		СписокНачислений.Сотрудник КАК Сотрудник,
		|		СписокНачислений.Физлицо КАК Физлицо,
		|		СписокНачислений.ПериодРаботники КАК ПериодРаботники,
		|		МАКСИМУМ(СведенияОСтажеРаботыНаСевере.Период) КАК ПериодСеверногоСтажа
		|	ИЗ
		|		ВТРаботникиИНачисления КАК СписокНачислений
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтажеРаботыНаСевере КАК СведенияОСтажеРаботыНаСевере
		|			ПО СписокНачислений.Физлицо = СведенияОСтажеРаботыНаСевере.ФизЛицо
		|				И СписокНачислений.ПериодРаботники >= СведенияОСтажеРаботыНаСевере.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СписокНачислений.Сотрудник,
		|		СписокНачислений.Физлицо,
		|		СписокНачислений.ПериодРаботники) КАК ДатыСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтажеРаботыНаСевере КАК СведенияОСтажеРаботыНаСевере
		|		ПО ДатыСтажа.Физлицо = СведенияОСтажеРаботыНаСевере.ФизЛицо
		|			И ДатыСтажа.ПериодСеверногоСтажа = СведенияОСтажеРаботыНаСевере.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
		Запрос.Выполнить();
		
		//vvv Иногда основное начисление рассчитывается как нулевая сумма, тогда неоткуда брать оклад/тариф 
		//для ночных и вечерних например  и всех начислений, зависящий от оклада...Поэтому тарифную ставку
		//будем брать из регистра сведений
		//надо проверить!!!
		
		Запрос.Текст=
		"ВЫБРАТЬ
		|	СтавкиСотрудников.Сотрудник,	
		|   СтавкиСотрудников.Период,
		|	ВЫБОР
		|		КОГДА ЗначениеСтавки.ПериодЗавершения <= &парамНачало
		|				И ЗначениеСтавки.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ЗначениеСтавки.СтавкаЗавершения
		|		ИНАЧЕ ЗначениеСтавки.Ставка
		|	КОНЕЦ КАК Ставка
		|ПОМЕСТИТЬ ВТМесячныеСтавки	
		|ИЗ 
		|	(ВЫБРАТЬ
		|		СписокРаботников.Сотрудник,
		|       СписокРаботников.Период КАК Период,
	    |		МАКСИМУМ(ТарифныеСтавкиРаботниковОрганизации.Период) КАК ПериодДок
		|	ИЗ
		|		ВТДвиженияРаботников КАК СписокРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации КАК ТарифныеСтавкиРаботниковОрганизации
		|		ПО ТарифныеСтавкиРаботниковОрганизации.Период<=СписокРаботников.Период
		|		И СписокРаботников.Сотрудник=ТарифныеСтавкиРаботниковОрганизации.Сотрудник
		|		СГРУППИРОВАТЬ ПО
		|			СписокРаботников.Сотрудник,
		|			СписокРаботников.Период) Как СтавкиСотрудников
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации КАК ЗначениеСтавки
		|	ПО ЗначениеСтавки.Период=СтавкиСотрудников.ПериодДок И ЗначениеСтавки.Сотрудник=СтавкиСотрудников.Сотрудник";
		
		
		Запрос.Выполнить();
		
		// РаботникиИНачисленияПоСхемамМотивации
		//		Таблица движений работников и сведениями об их плановых начислениях
		//      с добавленными значениями показателей, как введенными пользователями для расчета, так и 
		//      выбранными из строк плановых начислений, содержащих тарифные ставки по "основным" начислениям работника
		// 
		//	Поля:
		//		Сотрудник 
		//		ВидРасчета - плановое начисление 
		//		Показатель1,...,6 - размеры показателей 
		//		СпособРасчета - способ расчета начисления 
		//		ОкладТариф - размер трифной ставки, если начисление ее содержит  
		//		ГрафикРаботы - график сотрудника  
		//		ВидГрафика, СуммированныйУчетРабочегоВремени, ДлительностьРабочейНедели - реквизиты графика сотрудника 
		// 
		// Описание:
		//
		//	1. 
		//  2. 
		//
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокНачислений.Сотрудник КАК Сотрудник,
		|	СписокНачислений.СотрудникНаименование,
		|	СписокНачислений.Физлицо,
		|	СписокНачислений.ПодразделениеОрганизации,
		//vvv
		|	СписокНачислений.ТабельУчетаОрганизации,
		|	СписокНачислений.Должность,
		|	СписокНачислений.НачисляетсяВЦеломЗаМесяц,
		//
		|	СписокНачислений.Подходит,
		|	СписокНачислений.Период,
		|	СписокНачислений.ПериодРаботники,
		|	СписокНачислений.ПериодНачисления,
		|	СписокНачислений.ОсновноеНачисление,
		|	СписокНачислений.ВидРасчета,
		|	СписокНачислений.ВидРасчетаНаименование,
		|	СписокНачислений.ВидРасчетаКоэффициентСтажа,
		|	СписокНачислений.ВидРасчетаВидСтажа,
		|	СписокНачислений.ВидРасчетаТребуетВводаТарифногоРазряда,
		|	СписокНачислений.СпособРасчета,
		|	СписокНачислений.ВидВремени,
		|	СписокНачислений.Действие,
		|	СписокНачислений.КодВычета,
		|	СписокНачислений.ДатаНачалаСобытия,
		|	СписокНачислений.ГрафикРаботы,
		|	СписокНачислений.СуммированныйУчетРабочегоВремени,
		|	СписокНачислений.ДлительностьРабочейНедели,
		|	СписокНачислений.ВидГрафика,
		|	СписокНачислений.Валюта1 КАК Валюта,
		//vvv
		|	МесячныеСтавки.Ставка КАК МесячнаяСтавка,
		|	СписокНачислений.ППС КАК ППС,
		|	СписокНачислений.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете,
		|	СписокНачислений.ПроцентПремииВодителей КАК ПроцентПремииВодителей,
		|	СписокНачислений.ВидВремениВодителей КАК ВидВремениВодителей,
		|	СписокНачислений.Автомобиль КАК Автомобиль,
		|	СписокНачислений.НомерСтрокиТабеля КАК НомерСтрокиТабеля,
		|	СписокНачислений.ТабельВодителя КАК ТабельВодителя,
		|	СписокНачислений.НеБратьВРасчет КАК НеБратьВРасчет,
		//
		|	ВЫБОР
		|		КОГДА СписокНачислений.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА 1
		|		ИНАЧЕ Валюты1.Курс
		|	КОНЕЦ КАК КурсВалюты,
		|	ВЫБОР
		|		КОГДА СписокНачислений.Показатель1 ЕСТЬ NULL 
		|				И ПоказателиВведенныеПриРасчете.Показатель1 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА ПоказателиВведенныеПриРасчете.Показатель1 ЕСТЬ НЕ NULL 
		|				ИЛИ (ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Периодически))
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 1
		|			ТОГДА ПоказателиВведенныеПриРасчете.Показатель1
		|		КОГДА (СписокНачислений.Показатель1 = 0
		|				ИЛИ СписокНачислений.Показатель1 ЕСТЬ NULL )
		|				И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 1
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 1)
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		КОГДА СписокНачислений.Показатель1 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|			ТОГДА СписокНачислений.Показатель1
		|		КОГДА СписокНачислений.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА СписокНачислений.Показатель1
		|		ИНАЧЕ СписокНачислений.Показатель1 * ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0)
		|	КОНЕЦ КАК Показатель1,
		|	ВЫБОР
		|		КОГДА СписокНачислений.Показатель2 ЕСТЬ NULL 
		|				И ПоказателиВведенныеПриРасчете.Показатель2 ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ NULL 
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.НомерСтроки <> 2)
		|			ТОГДА 0
		|		КОГДА ПоказателиВведенныеПриРасчете.Показатель2 ЕСТЬ НЕ NULL 
		|				ИЛИ (ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Периодически))
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 2
		|			ТОГДА ПоказателиВведенныеПриРасчете.Показатель2
		|		КОГДА (СписокНачислений.Показатель2 = 0
		|				ИЛИ СписокНачислений.Показатель2 ЕСТЬ NULL )
		|				И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 2
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 2)
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		КОГДА СписокНачислений.Показатель2 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|			ТОГДА СписокНачислений.Показатель2
		|		КОГДА СписокНачислений.Валюта2 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА СписокНачислений.Показатель2
		|		ИНАЧЕ СписокНачислений.Показатель2 * ЕСТЬNULL(Валюты2.Курс / Валюты2.Кратность, 0)
		|	КОНЕЦ КАК Показатель2,
		|	ВЫБОР
		|		КОГДА СписокНачислений.Показатель3 ЕСТЬ NULL 
		|				И ПоказателиВведенныеПриРасчете.Показатель3 ЕСТЬ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ NULL 
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.НомерСтроки <> 3)
		|			ТОГДА 0
		|		КОГДА ПоказателиВведенныеПриРасчете.Показатель3 ЕСТЬ НЕ NULL 
		|				ИЛИ (ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Периодически))
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 3
		|			ТОГДА ПоказателиВведенныеПриРасчете.Показатель3
		|		КОГДА СписокНачислений.Показатель3 = 0
		|				И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 3
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 3)
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		КОГДА СписокНачислений.Показатель3 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|			ТОГДА СписокНачислений.Показатель3
		|		КОГДА СписокНачислений.Валюта3 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА СписокНачислений.Показатель3
		|		ИНАЧЕ СписокНачислений.Показатель3 * ЕСТЬNULL(Валюты3.Курс / Валюты3.Кратность, 0)
		|	КОНЕЦ КАК Показатель3,
		|	ВЫБОР
		|		КОГДА СписокНачислений.Показатель4 ЕСТЬ NULL 
		|				И ПоказателиВведенныеПриРасчете.Показатель4 ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ NULL 
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.НомерСтроки <> 4)
		|			ТОГДА 0
		|		КОГДА ПоказателиВведенныеПриРасчете.Показатель4 ЕСТЬ НЕ NULL 
		|				ИЛИ (ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Периодически))
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 4
		|			ТОГДА ПоказателиВведенныеПриРасчете.Показатель4
		|		КОГДА СписокНачислений.Показатель4 = 0
		|				И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 4
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 4)
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		КОГДА СписокНачислений.Показатель4 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|			ТОГДА СписокНачислений.Показатель4
		|		КОГДА СписокНачислений.Валюта4 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА СписокНачислений.Показатель4
		|		ИНАЧЕ СписокНачислений.Показатель4 * ЕСТЬNULL(Валюты4.Курс / Валюты4.Кратность, 0)
		|	КОНЕЦ КАК Показатель4,
		|	ВЫБОР
		|		КОГДА СписокНачислений.Показатель5 ЕСТЬ NULL 
		|				И ПоказателиВведенныеПриРасчете.Показатель5 ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ NULL 
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.НомерСтроки <> 5)
		|			ТОГДА 0
		|		КОГДА ПоказателиВведенныеПриРасчете.Показатель5 ЕСТЬ НЕ NULL 
		|				ИЛИ (ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Периодически))
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 5
		|			ТОГДА ПоказателиВведенныеПриРасчете.Показатель5
		|		КОГДА СписокНачислений.Показатель5 = 0
		|				И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 5
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 5)
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		КОГДА СписокНачислений.Показатель5 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|			ТОГДА СписокНачислений.Показатель5
		|		КОГДА СписокНачислений.Валюта5 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА СписокНачислений.Показатель5
		|		ИНАЧЕ СписокНачислений.Показатель5 * ЕСТЬNULL(Валюты5.Курс / Валюты5.Кратность, 0)
		|	КОНЕЦ КАК Показатель5,
		|	ВЫБОР
		|		КОГДА СписокНачислений.Показатель6 ЕСТЬ NULL 
		|				И ПоказателиВведенныеПриРасчете.Показатель6 ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ NULL 
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.НомерСтроки <> 6)
		|			ТОГДА 0
		|		КОГДА ПоказателиВведенныеПриРасчете.Показатель6 ЕСТЬ НЕ NULL 
		|				ИЛИ (ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Периодически))
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 6
		|			ТОГДА ПоказателиВведенныеПриРасчете.Показатель6
		|		КОГДА СписокНачислений.Показатель6 = 0
		|				И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 6
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 6)
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		КОГДА СписокНачислений.Показатель6 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|			ТОГДА СписокНачислений.Показатель6
		|		КОГДА СписокНачислений.Валюта6 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА СписокНачислений.Показатель6
		|		ИНАЧЕ СписокНачислений.Показатель6 * ЕСТЬNULL(Валюты6.Курс / Валюты6.Кратность, 0)
		|	КОНЕЦ КАК Показатель6,
		|	ПоказательТарифнойСтавки.Показатель КАК ВидТарифнойСтавки,
		|	ВЫБОР
		|		КОГДА ПоказательТарифнойСтавки.НомерСтроки = 1
		|			ТОГДА ВЫБОР
		|					КОГДА ПоказателиВведенныеПриРасчете.Показатель1 ЕСТЬ НЕ NULL 
		|						ТОГДА ПоказателиВведенныеПриРасчете.Показатель1
		|					КОГДА СписокНачислений.Показатель1 = 0
		|							И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|									И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 1
		|								ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка)
		|						ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|					КОГДА СписокНачислений.Показатель1 ЕСТЬ NULL 
		|						ТОГДА 0
		|					КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ТОГДА СписокНачислений.Показатель1
		|					КОГДА СписокНачислений.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|						ТОГДА СписокНачислений.Показатель1
		|					ИНАЧЕ СписокНачислений.Показатель1 * ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0)
		|				КОНЕЦ
		|		КОГДА ПоказательТарифнойСтавки.НомерСтроки = 2
		|			ТОГДА ВЫБОР
		|					КОГДА ПоказателиВведенныеПриРасчете.Показатель2 ЕСТЬ НЕ NULL 
		|						ТОГДА ПоказателиВведенныеПриРасчете.Показатель2
		|					КОГДА СписокНачислений.Показатель2 = 0
		|							И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|									И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 2
		|								ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка)
		|						ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|					КОГДА СписокНачислений.Показатель2 ЕСТЬ NULL 
		|						ТОГДА 0
		|					КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ТОГДА СписокНачислений.Показатель2
		|					КОГДА СписокНачислений.Валюта2 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|						ТОГДА СписокНачислений.Показатель2
		|					ИНАЧЕ СписокНачислений.Показатель2 * ЕСТЬNULL(Валюты2.Курс / Валюты2.Кратность, 0)
		|				КОНЕЦ
		|		КОГДА ПоказательТарифнойСтавки.НомерСтроки = 3
		|			ТОГДА ВЫБОР
		|					КОГДА ПоказателиВведенныеПриРасчете.Показатель3 ЕСТЬ НЕ NULL 
		|						ТОГДА ПоказателиВведенныеПриРасчете.Показатель3
		|					КОГДА СписокНачислений.Показатель3 = 0
		|							И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|									И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 3
		|								ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка)
		|						ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|					КОГДА СписокНачислений.Показатель3 ЕСТЬ NULL 
		|						ТОГДА 0
		|					КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ТОГДА СписокНачислений.Показатель3
		|					КОГДА СписокНачислений.Валюта3 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|						ТОГДА СписокНачислений.Показатель3
		|					ИНАЧЕ СписокНачислений.Показатель3 * ЕСТЬNULL(Валюты3.Курс / Валюты3.Кратность, 0)
		|				КОНЕЦ
		|		КОГДА ПоказательТарифнойСтавки.НомерСтроки = 4
		|			ТОГДА ВЫБОР
		|					КОГДА ПоказателиВведенныеПриРасчете.Показатель4 ЕСТЬ НЕ NULL 
		|						ТОГДА ПоказателиВведенныеПриРасчете.Показатель4
		|					КОГДА СписокНачислений.Показатель4 = 0
		|							И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|									И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 4
		|								ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка)
		|						ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|					КОГДА СписокНачислений.Показатель4 ЕСТЬ NULL 
		|						ТОГДА 0
		|					КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ТОГДА СписокНачислений.Показатель4
		|					КОГДА СписокНачислений.Валюта4 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|						ТОГДА СписокНачислений.Показатель4
		|					ИНАЧЕ СписокНачислений.Показатель4 * ЕСТЬNULL(Валюты4.Курс / Валюты4.Кратность, 0)
		|				КОНЕЦ
		|		КОГДА ПоказательТарифнойСтавки.НомерСтроки = 5
		|			ТОГДА ВЫБОР
		|					КОГДА ПоказателиВведенныеПриРасчете.Показатель5 ЕСТЬ НЕ NULL 
		|						ТОГДА ПоказателиВведенныеПриРасчете.Показатель5
		|					КОГДА СписокНачислений.Показатель5 = 0
		|							И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|									И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 5
		|								ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка)
		|						ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|					КОГДА СписокНачислений.Показатель5 ЕСТЬ NULL 
		|						ТОГДА 0
		|					КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ТОГДА СписокНачислений.Показатель5
		|					КОГДА СписокНачислений.Валюта5 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|						ТОГДА СписокНачислений.Показатель5
		|					ИНАЧЕ СписокНачислений.Показатель5 * ЕСТЬNULL(Валюты5.Курс / Валюты5.Кратность, 0)
		|				КОНЕЦ
		|		КОГДА ПоказательТарифнойСтавки.НомерСтроки = 6
		|			ТОГДА ВЫБОР
		|					КОГДА ПоказателиВведенныеПриРасчете.Показатель6 ЕСТЬ НЕ NULL 
		|						ТОГДА ПоказателиВведенныеПриРасчете.Показатель6
		|					КОГДА СписокНачислений.Показатель6 = 0
		|							И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|									И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 6
		|								ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка)
		|						ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|					КОГДА СписокНачислений.Показатель6 ЕСТЬ NULL 
		|						ТОГДА 0
		|					КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ТОГДА СписокНачислений.Показатель6
		|					КОГДА СписокНачислений.Валюта6 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|						ТОГДА СписокНачислений.Показатель6
		|					ИНАЧЕ СписокНачислений.Показатель6 * ЕСТЬNULL(Валюты6.Курс / Валюты6.Кратность, 0)
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОкладТариф
		|ПОМЕСТИТЬ ВТРаботникиИНачисленияПоСхемамМотивации
		|ИЗ
		|	ВТРаботникиИНачисления КАК СписокНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиВведенныеПриРасчете
		|		ПО СписокНачислений.ВидРасчета = ПоказателиВведенныеПриРасчете.ВидРасчета
		|			И (СписокНачислений.Сотрудник = ПоказателиВведенныеПриРасчете.Сотрудник)
		//|				ИЛИ СписокНачислений.ПодразделениеОрганизации = ПоказателиВведенныеПриРасчете.ПодразделениеОрганизации)
		//vvv
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМесячныеСтавки КАК МесячныеСтавки
		|		ПО МесячныеСтавки.Период=СписокНачислений.Период И МесячныеСтавки.Сотрудник=СписокНачислений.Сотрудник
		//
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			НеВводимыеПоказатели.Ссылка КАК Ссылка,
		|			НеВводимыеПоказатели.НомерСтроки КАК НомерСтроки,
		|			НеВводимыеПоказатели.Показатель КАК Показатель,
		|			НеВводимыеПоказатели.ПоказательВозможностьИзменения КАК ПоказательВозможностьИзменения,
		|			НеВводимыеПоказатели.ЭтоТарифнаяСтавка КАК ЭтоТарифнаяСтавка,
		|			СУММА(ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя) КАК ЗначениеПоказателя,
		|			ЗначенияВводимыхКадровыхПоказателей.Сотрудник КАК Сотрудник,
		|			ЗначенияВводимыхКадровыхПоказателей.Период КАК Период,
		|			ЗначенияВводимыхКадровыхПоказателей.ПериодРаботники КАК ПериодРаботники,
		|			ЗначенияВводимыхКадровыхПоказателей.ПериодНачисления КАК ПериодНачисления
		|		ИЗ
		|			ВТНеЗапрашиваемыеПриКадровыхПеремещениях КАК НеВводимыеПоказатели
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияВводимыхКадровыхПоказателей КАК ЗначенияВводимыхКадровыхПоказателей
		|				ПО НеВводимыеПоказатели.Показатель = ЗначенияВводимыхКадровыхПоказателей.Показатель
		|		ГДЕ
		|			ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя <> 0
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НеВводимыеПоказатели.Ссылка,
		|			НеВводимыеПоказатели.НомерСтроки,
		|			НеВводимыеПоказатели.Показатель,
		|			НеВводимыеПоказатели.ПоказательВозможностьИзменения,
		|			НеВводимыеПоказатели.ЭтоТарифнаяСтавка,
		|			ЗначенияВводимыхКадровыхПоказателей.Сотрудник,
		|			ЗначенияВводимыхКадровыхПоказателей.Период,
		|			ЗначенияВводимыхКадровыхПоказателей.ПериодРаботники,
		|			ЗначенияВводимыхКадровыхПоказателей.ПериодНачисления) КАК ЗначенияВводимыхКадровыхПоказателей
		|		ПО СписокНачислений.Сотрудник = ЗначенияВводимыхКадровыхПоказателей.Сотрудник
		|			И (КОНЕЦПЕРИОДА(СписокНачислений.Период, МЕСЯЦ) = КОНЕЦПЕРИОДА(ЗначенияВводимыхКадровыхПоказателей.Период, МЕСЯЦ))
		|			И СписокНачислений.ПериодРаботники = ЗначенияВводимыхКадровыхПоказателей.ПериодРаботники
		|			И СписокНачислений.ВидРасчета = ЗначенияВводимыхКадровыхПоказателей.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты1
		|		ПО (Валюты1.Период = &парамДатаВалютногоУчета)
		|			И СписокНачислений.Валюта1 = Валюты1.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты2
		|		ПО (Валюты2.Период = &парамДатаВалютногоУчета)
		|			И СписокНачислений.Валюта2 = Валюты2.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты3
		|		ПО (Валюты3.Период = &парамДатаВалютногоУчета)
		|			И СписокНачислений.Валюта3 = Валюты3.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты4
		|		ПО (Валюты4.Период = &парамДатаВалютногоУчета)
		|			И СписокНачислений.Валюта4 = Валюты4.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты5
		|		ПО (Валюты5.Период = &парамДатаВалютногоУчета)
		|			И СписокНачислений.Валюта5 = Валюты5.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты6
		|		ПО (Валюты6.Период = &парамДатаВалютногоУчета)
		|			И СписокНачислений.Валюта6 = Валюты6.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВводимыеВПлановыхНачисленияхПоказатели КАК ПоказательТарифнойСтавки
		|		ПО СписокНачислений.ВидРасчета = ПоказательТарифнойСтавки.Ссылка
		|			И (ПоказательТарифнойСтавки.Показатель В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)))
		|ГДЕ
		|	ВЫБОР
		|			КОГДА СписокНачислений.Подходит
		|				ТОГДА (НЕ СписокНачислений.ВидРасчета ЕСТЬ NULL )
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
		Запрос.Выполнить();
		
		//vvv
		ЗапросПризнаковАвтоНачисленийПоТабелю = Новый Запрос;
		ЗапросПризнаковАвтоНачисленийПоТабелю.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|				ГДЕ
		|					ОсновныеНачисленияОрганизаций.АвтоНачислятьПоТабелю
		|					И ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК АвтоНачислятьПоТабелюНочные,
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|				ГДЕ
		|					ОсновныеНачисленияОрганизаций.АвтоНачислятьПоТабелю
		|					И ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК АвтоНачислятьПоТабелюВечерние";
		
		ВыборкаПризнаковАвтоначисления = ЗапросПризнаковАвтоНачисленийПоТабелю.Выполнить().Выбрать();
		ВыборкаПризнаковАвтоначисления.Следующий();

		ОсновнойТекстЗапроса = 		
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДвиженияРаботников.Сотрудник КАК Сотрудник,
		|	ДвиженияРаботников.Период,
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|				ГДЕ
		|					ГрафикиРаботы.Месяц = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
		|					И ГрафикиРаботы.ГрафикРаботы = ДвиженияРаботников.Сотрудник)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьИндГрафик,
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
		|				ГДЕ
		|					СводныеИндивидуальныеГрафики.Месяц = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
		|					И СводныеИндивидуальныеГрафики.Сотрудник = ДвиженияРаботников.Сотрудник)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьИндСводнГрафик,
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
		|				ГДЕ
		|					РабочееВремяРаботниковОрганизаций.Период = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
		|					И РабочееВремяРаботниковОрганизаций.Сотрудник = ДвиженияРаботников.Сотрудник)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьСводнТабель,";
		
		Если ВыборкаПризнаковАвтоначисления.АвтоНачислятьПоТабелюНочные Тогда
			ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
			|				ГДЕ
			|					ГрафикиРаботы.Месяц = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
			|					И ГрафикиРаботы.ГрафикРаботы = ДвиженияРаботников.Сотрудник
			|					И ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
			|					И ГрафикиРаботы.ОсновноеЗначение <> 0)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьНочныеИндГрафик,
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
			|				ГДЕ
			|					СводныеИндивидуальныеГрафики.Месяц = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
			|					И СводныеИндивидуальныеГрафики.Сотрудник = ДвиженияРаботников.Сотрудник
			|					И СводныеИндивидуальныеГрафики.ЧасовНочных <> 0)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьНочныеИндСводнГрафик,
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
			|				ГДЕ
			|					РабочееВремяРаботниковОрганизаций.Период = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
			|					И РабочееВремяРаботниковОрганизаций.Сотрудник = ДвиженияРаботников.Сотрудник
			|					И РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
			|					И РабочееВремяРаботниковОрганизаций.Часов <> 0)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьНочныеСводнТабель,
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
			|				ГДЕ
			|					ГрафикиРаботы.Месяц = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
			|					И ГрафикиРаботы.ГрафикРаботы = ДвиженияРаботников.ГрафикРаботы
			|					И ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
			|					И ГрафикиРаботы.ОсновноеЗначение <> 0)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьНочныеОбщГрафик,";
		Иначе
			ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
			|	ЛОЖЬ КАК ЕстьНочныеИндГрафик,
			|	ЛОЖЬ КАК ЕстьНочныеИндСводнГрафик,
			|	ЛОЖЬ КАК ЕстьНочныеСводнТабель,
			|	ЛОЖЬ КАК ЕстьНочныеОбщГрафик,";
		КонецЕсли;
		
		Если ВыборкаПризнаковАвтоначисления.АвтоНачислятьПоТабелюВечерние Тогда
			ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
			|				ГДЕ
			|					ГрафикиРаботы.Месяц = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
			|					И ГрафикиРаботы.ГрафикРаботы = ДвиженияРаботников.Сотрудник
			|					И ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
			|					И ГрафикиРаботы.ОсновноеЗначение <> 0)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьВечерниеИндГрафик,
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
			|				ГДЕ
			|					СводныеИндивидуальныеГрафики.Месяц = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
			|					И СводныеИндивидуальныеГрафики.Сотрудник = ДвиженияРаботников.Сотрудник
			|					И СводныеИндивидуальныеГрафики.ЧасовВечерних <> 0)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьВечерниеИндСводнГрафик,
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
			|				ГДЕ
			|					РабочееВремяРаботниковОрганизаций.Период = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
			|					И РабочееВремяРаботниковОрганизаций.Сотрудник = ДвиженияРаботников.Сотрудник
			|					И РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
			|					И РабочееВремяРаботниковОрганизаций.Часов <> 0)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьВечерниеСводнТабель,
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
			|				ГДЕ
			|					ГрафикиРаботы.Месяц = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
			|					И ГрафикиРаботы.ГрафикРаботы = ДвиженияРаботников.ГрафикРаботы
			|					И ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
			|					И ГрафикиРаботы.ОсновноеЗначение <> 0)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьВечерниеОбщГрафик";
		Иначе
			ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
			|	ЛОЖЬ КАК ЕстьВечерниеИндГрафик,
			|	ЛОЖЬ КАК ЕстьВечерниеИндСводнГрафик,
			|	ЛОЖЬ КАК ЕстьВечерниеСводнТабель,
			|	ЛОЖЬ КАК ЕстьВечерниеОбщГрафик";
		КонецЕсли;
        ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
		|ПОМЕСТИТЬ ВТСведенияОНочныхВечерних
		|ИЗ
		|	ВТДвиженияРаботников КАК ДвиженияРаботников
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
	
		Запрос.Текст=ОсновнойТекстЗапроса;
		Запрос.Выполнить();
		
		Запрос.Текст=
		"ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета,
		|	ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени		
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке)
		|	И ОсновныеНачисленияОрганизаций.АвтоНачислятьПоТабелю";
		
		ВыборкаПоАвтоначислениям=Запрос.Выполнить().Выбрать();		
		
		НомерАвтоНачисления=1;
		Пока ВыборкаПоАвтоначислениям.Следующий() Цикл
			Если НомерАвтоНачисления>5 Тогда
				Прервать;
			КонецЕсли;			
			Запрос.Текст=
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДвиженияРаботников.Сотрудник КАК Сотрудник,			
			|	ДвиженияРаботников.НачалоПериода КАК Период,
			|	&ВидРасчета КАК ВидРасчета,
			|	РабочееВремяРаботниковОрганизаций.Часов
			|ПОМЕСТИТЬ ВТСведенияОбАвтоНачислениях"+Строка(НомерАвтоНачисления)+
			"
			|ИЗ
			|	ВТПериодыРаботыВодителей КАК ДвиженияРаботников //берем периоды из таблицы, где в строке есть окончание периода (транспонировали выше)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
			|		ПО (РабочееВремяРаботниковОрганизаций.Период МЕЖДУ ДвиженияРаботников.НачалоПериода И ДвиженияРаботников.КонецПериода)
			|			И (РабочееВремяРаботниковОрганизаций.Сотрудник = ДвиженияРаботников.Сотрудник)
			|			И (РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени = &ВидУчетаВремени)
			|			И (РабочееВремяРаботниковОрганизаций.Часов <> 0)";
						
			Запрос.УстановитьПараметр("ВидУчетаВремени",ВыборкаПоАвтоначислениям.ОбозначениеВТабелеУчетаРабочегоВремени);
			Запрос.УстановитьПараметр("ВидРасчета",ВыборкаПоАвтоначислениям.ВидРасчета);
			Запрос.Выполнить();
		    НомерАвтоНачисления=НомерАвтоНачисления+1;
			
		КонецЦикла;
		
		Пока НомерАвтоНачисления<=5 Цикл					
			
			//Запрос.Текст=
			//"ВЫБРАТЬ РАЗЛИЧНЫЕ
			//|	ДвиженияРаботников.Сотрудник КАК Сотрудник,
			//|	ДвиженияРаботников.Период,
			//|	&ВидРасчета КАК ВидРасчета,			
			//|	0 КАК Часов
			//|ПОМЕСТИТЬ ВТСведенияОбАвтоНачислениях"+Строка(НомерАвтоНачисления)+
			//"
			//|ИЗ
			//|	ВТДвиженияРаботников КАК ДвиженияРаботников";
			
			Запрос.Текст=
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДвиженияРаботников.Сотрудник КАК Сотрудник,		
			|	ДвиженияРаботников.НачалоПериода КАК Период,
			|	&ВидРасчета КАК ВидРасчета,
			|	РабочееВремяРаботниковОрганизаций.Часов
			|ПОМЕСТИТЬ ВТСведенияОбАвтоНачислениях"+Строка(НомерАвтоНачисления)+
			"
			|ИЗ
			|	ВТПериодыРаботыВодителей КАК ДвиженияРаботников 
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
			|		ПО (РабочееВремяРаботниковОрганизаций.Период МЕЖДУ ДвиженияРаботников.НачалоПериода И ДвиженияРаботников.КонецПериода)
			|			И (РабочееВремяРаботниковОрганизаций.Сотрудник = ДвиженияРаботников.Сотрудник)
			|			И (РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени = &ВидУчетаВремени)
			|			И (РабочееВремяРаботниковОрганизаций.Часов <> 0)";
			
			Запрос.УстановитьПараметр("ВидУчетаВремени",ВыборкаПоАвтоначислениям.ОбозначениеВТабелеУчетаРабочегоВремени);
			Запрос.УстановитьПараметр("ВидРасчета",ВыборкаПоАвтоначислениям.ВидРасчета);
			Запрос.Выполнить();
			НомерАвтоНачисления=НомерАвтоНачисления+1;
		КонецЦикла;
		
		Запрос.Текст=
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДвиженияРаботников.Сотрудник КАК Сотрудник,
		|	ДвиженияРаботников.Период,
		|	СведенияОбАвтоНачислениях1.ВидРасчета КАК Начисление1,
		|	СведенияОбАвтоНачислениях2.ВидРасчета КАК Начисление2,
		|	СведенияОбАвтоНачислениях3.ВидРасчета КАК Начисление3,
		|	СведенияОбАвтоНачислениях4.ВидРасчета КАК Начисление4,
		|	СведенияОбАвтоНачислениях5.ВидРасчета КАК Начисление5
		|ПОМЕСТИТЬ ВТСведенияОбАвтоначислениях
		|ИЗ
		|	ВТДвиженияРаботников КАК ДвиженияРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбАвтоНачислениях1 КАК СведенияОбАвтоНачислениях1
		|		ПО (СведенияОбАвтоНачислениях1.Сотрудник = ДвиженияРаботников.Сотрудник)
		|			И (СведенияОбАвтоНачислениях1.Часов <> 0)
		|			И (СведенияОбАвтоНачислениях1.Период = ДвиженияРаботников.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбАвтоНачислениях2 КАК СведенияОбАвтоНачислениях2
		|		ПО (СведенияОбАвтоНачислениях2.Сотрудник = ДвиженияРаботников.Сотрудник)
		|			И (СведенияОбАвтоНачислениях2.Часов <> 0)
		|			И (СведенияОбАвтоНачислениях2.Период = ДвиженияРаботников.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбАвтоНачислениях3 КАК СведенияОбАвтоНачислениях3
		|		ПО (СведенияОбАвтоНачислениях3.Сотрудник = ДвиженияРаботников.Сотрудник)
		|			И (СведенияОбАвтоНачислениях3.Часов <> 0)
		|			И (СведенияОбАвтоНачислениях3.Период = ДвиженияРаботников.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбАвтоНачислениях4 КАК СведенияОбАвтоНачислениях4
		|		ПО (СведенияОбАвтоНачислениях4.Сотрудник = ДвиженияРаботников.Сотрудник)
		|			И (СведенияОбАвтоНачислениях4.Часов <> 0)
		|			И (СведенияОбАвтоНачислениях4.Период = ДвиженияРаботников.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбАвтоНачислениях5 КАК СведенияОбАвтоНачислениях5
		|		ПО (СведенияОбАвтоНачислениях5.Сотрудник = ДвиженияРаботников.Сотрудник)
		|			И (СведенияОбАвтоНачислениях5.Период = ДвиженияРаботников.Период)
		|			И (СведенияОбАвтоНачислениях5.Часов <> 0)";
		
		Запрос.Выполнить();
		
		//получим вид ежемесячной премии на каждую дату основного начисления
		Запрос.Текст=
		"ВЫБРАТЬ
		|	Таб1.Сотрудник,
		|	Таб1.ПериодНачисления,
		|	ПараметрыРасчетаЗарплатыСотрудников.ВидЕжемесячнойПремии
		|ПОМЕСТИТЬ ВТПараметрыРасчетаЗарплатыСотрудников
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботникиИНачисленияПоСхемамМотивации.Сотрудник КАК Сотрудник,
		|		РаботникиИНачисленияПоСхемамМотивации.ПериодНачисления КАК ПериодНачисления,
		|		МАКСИМУМ(ПараметрыРасчетаЗарплатыСотрудников.Период) КАК ПериодПремии
		|	ИЗ
		|		ВТРаботникиИНачисленияПоСхемамМотивации КАК РаботникиИНачисленияПоСхемамМотивации
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРасчетаЗарплатыСотрудников КАК ПараметрыРасчетаЗарплатыСотрудников
		|			ПО РаботникиИНачисленияПоСхемамМотивации.Сотрудник = ПараметрыРасчетаЗарплатыСотрудников.Сотрудник
		|				И (ПараметрыРасчетаЗарплатыСотрудников.Период <= РаботникиИНачисленияПоСхемамМотивации.ПериодНачисления)
		|	ГДЕ РаботникиИНачисленияПоСхемамМотивации.ПериодНачисления<>ДАТАВРЕМЯ(1,1,1,0,0,0) 
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиИНачисленияПоСхемамМотивации.Сотрудник,
		|		РаботникиИНачисленияПоСхемамМотивации.ПериодНачисления) КАК Таб1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРасчетаЗарплатыСотрудников КАК ПараметрыРасчетаЗарплатыСотрудников
		|		ПО Таб1.Сотрудник = ПараметрыРасчетаЗарплатыСотрудников.Сотрудник
		|			И Таб1.ПериодПремии = ПараметрыРасчетаЗарплатыСотрудников.Период";
		
		Запрос.Выполнить();
		
		//получим процент ежемесячной премии на каждую дату основного начисления
		Запрос.Текст=
		"ВЫБРАТЬ
		|	Таб1.Сотрудник,
		|	Таб1.ПериодНачисления,
		|	ДанныеОЕжемесячнойПремии.ПроцентПремии,
		|	ДанныеОЕжемесячнойПремии.ПодразделениеОрганизации,
		|	ДанныеОЕжемесячнойПремии.ТабельУчетаОрганизации
		|ПОМЕСТИТЬ ВТДанныеОЕжемесячнойПремии
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботникиИНачисленияПоСхемамМотивации.Сотрудник КАК Сотрудник,
		|		РаботникиИНачисленияПоСхемамМотивации.ПериодНачисления КАК ПериодНачисления,
		|		МАКСИМУМ(ДанныеОЕжемесячнойПремии.Период) КАК ПериодПремии
		|	ИЗ
		|		ВТРаботникиИНачисленияПоСхемамМотивации КАК РаботникиИНачисленияПоСхемамМотивации
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеОЕжемесячнойПремии КАК ДанныеОЕжемесячнойПремии
		|			ПО РаботникиИНачисленияПоСхемамМотивации.Сотрудник = ДанныеОЕжемесячнойПремии.Сотрудник
		|				И (ДанныеОЕжемесячнойПремии.Период <= РаботникиИНачисленияПоСхемамМотивации.ПериодНачисления)
		|		И НАЧАЛОПЕРИОДА(ДанныеОЕжемесячнойПремии.Месяц,МЕСЯЦ)=НАЧАЛОПЕРИОДА(&парамНачало,МЕСЯЦ)
		|	ГДЕ РаботникиИНачисленияПоСхемамМотивации.ПериодНачисления<>ДАТАВРЕМЯ(1,1,1,0,0,0) 
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиИНачисленияПоСхемамМотивации.Сотрудник,
		|		РаботникиИНачисленияПоСхемамМотивации.ПериодНачисления) КАК Таб1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеОЕжемесячнойПремии КАК ДанныеОЕжемесячнойПремии
		|		ПО Таб1.Сотрудник = ДанныеОЕжемесячнойПремии.Сотрудник
		|			И Таб1.ПериодПремии = ДанныеОЕжемесячнойПремии.Период";
		
		Запрос.Выполнить();
		
		//		
		//Основной текст запроса
		ОсновнойТекстЗапроса =
		"ВЫБРАТЬ
		|	СписокНачислений.Сотрудник КАК Сотрудник,
		|	СписокНачислений.СотрудникНаименование КАК СотрудникНаименование,
		|	СписокНачислений.Физлицо КАК Физлицо,
		|	СписокНачислений.ПодразделениеОрганизации,
		//vvv
		//|	СписокНачислений.ТабельУчетаОрганизации,
		|	ВЫБОР
		|		КОГДА СписокНачислений.ТабельВодителя<>ЗНАЧЕНИЕ(Справочник.ТабеляУчетаОрганизаций.ПустаяСсылка) ТОГДА СписокНачислений.ТабельВодителя 
		|		КОГДА СписокНачислений.ТабельУчетаОрганизации=ЗНАЧЕНИЕ(Справочник.ТабеляУчетаОрганизаций.ПустаяСсылка) ТОГДА &парамТабельУчета
		|		ИНАЧЕ СписокНачислений.ТабельУчетаОрганизации
		|	КОНЕЦ КАК ТабельУчетаОрганизации, 
		|	СписокНачислений.Должность,
		|	ЕСТЬNULL(СписокНачислений.НачисляетсяВЦеломЗаМесяц, ЛОЖЬ) КАК НачисляетсяВЦеломЗаМесяц,
		//
		|	СписокНачислений.Подходит,
		|	СписокНачислений.Период,
		|	СписокНачислений.ПериодРаботники КАК ПериодРаботники,
		|	СписокНачислений.ПериодНачисления КАК ПериодНачисления,
		|	СписокНачислений.ОсновноеНачисление КАК ОсновноеНачисление,
		|	СписокНачислений.ВидРасчета КАК ВидРасчета,
		|	СписокНачислений.ВидРасчетаНаименование,
		|	ЕСТЬNULL(СписокНачислений.ВидРасчетаТребуетВводаТарифногоРазряда, ЛОЖЬ) КАК ТребуетВводаТарифногоРазряда,
		|	СписокНачислений.СпособРасчета,
		|	СписокНачислений.ВидВремени,
		|	СписокНачислений.Действие,
		|	СписокНачислений.КодВычета,
		|	СписокНачислений.ДатаНачалаСобытия,
		|	СписокНачислений.ГрафикРаботы,
		|	СписокНачислений.СуммированныйУчетРабочегоВремени,
		|	СписокНачислений.Валюта,
		|	СписокНачислений.КурсВалюты,
		|	СписокНачислений.ВидТарифнойСтавки,
		|	ВЫБОР
		|		КОГДА СписокНачислений.ВидТарифнойСтавки = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
		|			ТОГДА СписокНачислений.ОкладТариф
		|		КОГДА СписокНачислений.ВидТарифнойСтавки = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
		|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
		//vvv
		|						КОГДА СписокНачислений.СуммированныйУчетРабочегоВремени
		|							ТОГДА СписокНачислений.ОкладТариф / ЕСТЬNULL(НормаВремениПоОбщимГрафикам.ЧасовЗаМесяц, 0)  
		//
		|						КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую, ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)) = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)
		|							ТОГДА СписокНачислений.ОкладТариф /ЕСТЬNULL(РазмерыПараметровДляРасчетаРБ.Размер,1)
		|						КОГДА ВЫБОР
		|								КОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
		|									ТОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.ЧасовЗаМесяц
		|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
		|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
		|								ИНАЧЕ ЕСТЬNULL(НормаВремениПоОбщимГрафикам.ЧасовЗаМесяц, 0)
		|							КОНЕЦ = 0
		|							ТОГДА 0
		|						ИНАЧЕ СписокНачислений.ОкладТариф / ВЫБОР
		|								КОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
		|									ТОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.ЧасовЗаМесяц
		|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
		|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
		|								ИНАЧЕ ЕСТЬNULL(НормаВремениПоОбщимГрафикам.ЧасовЗаМесяц, 0)
		|							КОНЕЦ
		|					КОНЕЦ КАК ЧИСЛО(15, 4))
		//vvv
		|		КОГДА СписокНачислений.ОкладТариф=0
		|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
		|						КОГДА СписокНачислений.ОсновноеНачисление И СписокНачислений.ВидРасчета=ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.РабочееВремяВодителей)
		|							ТОГДА ЕСТЬNULL(СписокНачислений.МесячнаяСтавка,0)
		|						КОГДА СписокНачислений.СуммированныйУчетРабочегоВремени
		|							ТОГДА СписокНачислений.МесячнаяСтавка / ЕСТЬNULL(НормаВремениПоОбщимГрафикам.ЧасовЗаМесяц, 0)  
		|						КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую, ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)) = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)
		|							ТОГДА СписокНачислений.МесячнаяСтавка /ЕСТЬNULL(РазмерыПараметровДляРасчетаРБ.Размер,1)
		|						КОГДА ВЫБОР
		|								КОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
		|									ТОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.ЧасовЗаМесяц
		|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
		|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
		|								ИНАЧЕ ЕСТЬNULL(НормаВремениПоОбщимГрафикам.ЧасовЗаМесяц, 0)
		|							КОНЕЦ = 0
		|							ТОГДА 0
		|						ИНАЧЕ СписокНачислений.МесячнаяСтавка / ВЫБОР
		|								КОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
		|									ТОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.ЧасовЗаМесяц
		|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
		|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
		|								ИНАЧЕ ЕСТЬNULL(НормаВремениПоОбщимГрафикам.ЧасовЗаМесяц, 0)
		|							КОНЕЦ
		|					КОНЕЦ КАК ЧИСЛО(15, 4))
		//
		|		КОГДА СписокНачислений.ВидТарифнойСтавки = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
		|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
		|						КОГДА СписокНачислений.ДлительностьРабочейНедели = 0
		|							ТОГДА 0
		|						ИНАЧЕ СписокНачислений.ОкладТариф / СписокНачислений.ДлительностьРабочейНедели * ВЫБОР
		|								КОГДА СписокНачислений.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Шестидневка)
		|									ТОГДА 6
		|								ИНАЧЕ 5
		|							КОНЕЦ
		|					КОНЕЦ КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЧасоваяТарифнаяСтавка,
		|	СписокНачислений.Показатель1,
		|	СписокНачислений.Показатель2,
		|	СписокНачислений.Показатель3,
		|	СписокНачислений.Показатель4,
		|	СписокНачислений.Показатель5,
		|	СписокНачислений.Показатель6,
		|	СведенияОСтажеРаботыНаСевере.ДатаРегистрацииСеверногоСтажа,
		|	СведенияОСтажеРаботыНаСевере.ПорядокНачисленияСеверныхНадбавок,
		|	СведенияОСтажеРаботыНаСевере.НачальныйПроцентСевернойНадбавки,
		|	СведенияОСтажеРаботыНаСевере.СеверныйСтажМесяцев,
		|	СведенияОСтажеРаботыНаСевере.СеверныйСтажДней,
		|	ШкалаКоэффициентовСтажа.Величина КАК КоэффициентСтажа,
		|	ШкалаСледКоэффициентовСтажа.Величина КАК СледКоэффициентСтажа,
		|	ВЫБОР
		//vvv добавляем условие
		//|		КОГДА (НЕ ШкалаСледКоэффициентовСтажа.Величина ЕСТЬ NULL )
		|		КОГДА (НЕ ШкалаСледКоэффициентовСтажа.Величина ЕСТЬ NULL ) И &ПорядокРасчетаНадбавкиЗаСтаж<>ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаНадбавкиЗаСтаж.СменаСоСледующегоМесяца)
		|			ТОГДА ВЫБОР
		|					КОГДА ДЕНЬ(Стажи.ДатаОтсчета) > Стажи.РазмерДней
		|						ТОГДА ДЕНЬ(Стажи.ДатаОтсчета) - Стажи.РазмерДней
		|					ИНАЧЕ ДЕНЬ(ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, -1)) - (Стажи.РазмерДней - ДЕНЬ(Стажи.ДатаОтсчета))
		|				КОНЕЦ
		//vvv следующий коэффициент стажа будем применять только со след. месяца, если смена стажа наступила в тек. месяце
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ДеньСменыКоэффициентаСтажа,
		|	ВЫБОР
		|		КОГДА &ЭтоПерерасчет
		|			ТОГДА ЛОЖЬ
		|		КОГДА ОсновныеНачисления.Сотрудник ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК УжеПроведен,
		//vvv
		|	ВЫБОР
		|		КОГДА СведенияОНочныхВечерних.ЕстьИндГрафик
		//|			ТОГДА СведенияОНочныхВечерних.ЕстьНочныеИндГрафик
		//если введен Инд. график, но ночных там нет, ночные будем брать из табеля, где ночные введены сводно
		|			ТОГДА ВЫБОР КОГДА НЕ СведенияОНочныхВечерних.ЕстьНочныеИндГрафик ТОГДА СведенияОНочныхВечерних.ЕстьНочныеСводнТабель ИНАЧЕ СведенияОНочныхВечерних.ЕстьНочныеИндГрафик КОНЕЦ   
		|		КОГДА СведенияОНочныхВечерних.ЕстьСводнТабель
		|			ТОГДА СведенияОНочныхВечерних.ЕстьНочныеСводнТабель
		|		КОГДА СведенияОНочныхВечерних.ЕстьИндСводнГрафик
		|			ТОГДА СведенияОНочныхВечерних.ЕстьНочныеИндСводнГрафик
		|		ИНАЧЕ СведенияОНочныхВечерних.ЕстьНочныеОбщГрафик
		|	КОНЕЦ КАК ЕстьНочные,
		|	ВЫБОР
		|		КОГДА СведенияОНочныхВечерних.ЕстьИндГрафик
		|			ТОГДА СведенияОНочныхВечерних.ЕстьВечерниеИндГрафик
		|		КОГДА СведенияОНочныхВечерних.ЕстьСводнТабель
		|			ТОГДА СведенияОНочныхВечерних.ЕстьВечерниеСводнТабель
		|		КОГДА СведенияОНочныхВечерних.ЕстьИндСводнГрафик
		|			ТОГДА СведенияОНочныхВечерних.ЕстьВечерниеИндСводнГрафик
		|		ИНАЧЕ СведенияОНочныхВечерних.ЕстьВечерниеОбщГрафик
		|	КОНЕЦ КАК ЕстьВечерние,
		|	СведенияОбАвтоНачислениях.Начисление1,
		|	СведенияОбАвтоНачислениях.Начисление2,
		|	СведенияОбАвтоНачислениях.Начисление3,
		|	СведенияОбАвтоНачислениях.Начисление4,
		|	СведенияОбАвтоНачислениях.Начисление5,
		|	СписокНачислений.ППС,
		|	СписокНачислений.СпособОтраженияВБухучете,
		|	ЕСТЬNULL(СписокНачислений.ПроцентПремииВодителей,0) КАК ПроцентПремииВодителей,
		|	СписокНачислений.ВидВремениВодителей КАК ВидВремениВодителей,
		|	СписокНачислений.Автомобиль КАК Автомобиль,
		|	СписокНачислений.НомерСтрокиТабеля КАК НомерСтрокиТабеля,
		|	ВЫБОР 
		|		КОГДА СписокНачислений.ОсновноеНачисление ТОГДА ЕСТЬNULL(ДанныеОЕжемесячнойПремии.ПроцентПремии,0)
		|	ИНАЧЕ 0
		|	КОНЕЦ КАК ПроцентПремии,
		|	ПараметрыРасчетаЗарплатыСотрудников.ВидЕжемесячнойПремии КАК ВидРасчетаЕжемесячнаяПремия,
		|	СписокНачислений.НеБратьВРасчет КАК НеБратьВРасчет,
		//
		|	НормаВремениПоСводнымИндивидуальнымГрафикам.Сотрудник,
		|   НормаВремениПоСводнымИндивидуальнымГрафикам.ЧасовЗаМесяц,
		|	НормаВремениПоЕжедневнымИндивидуальнымГрафикам.Сотрудник,
		|	НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц,
		|	НормаВремениПоОбщимГрафикам.ЧасовЗаМесяц
		|ИЗ
		|	ВТРаботникиИНачисленияПоСхемамМотивации КАК СписокНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОСеверномСтаже КАК СведенияОСтажеРаботыНаСевере
		|		ПО СписокНачислений.Сотрудник = СведенияОСтажеРаботыНаСевере.Сотрудник
		|			И СписокНачислений.ПериодРаботники = СведенияОСтажеРаботыНаСевере.ПериодРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Стажи КАК Стажи
		|		ПО СписокНачислений.ВидРасчетаВидСтажа = Стажи.ВидСтажа
		|			И СписокНачислений.Физлицо = Стажи.Ссылка
		|			И (СписокНачислений.СпособРасчета В (&СпособыРасчетаОтСтажа))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаКоэффициентовСтажа КАК ШкалаКоэффициентовСтажа
		|		ПО СписокНачислений.ВидРасчетаКоэффициентСтажа = ШкалаКоэффициентовСтажа.КоэффициентСтажа
		|			И (СписокНачислений.СпособРасчета В (&СпособыРасчетаОтСтажа))
		|			И (Стажи.РазмерМесяцев + РАЗНОСТЬДАТ(Стажи.ДатаОтсчета, ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней), МЕСЯЦ) - ВЫБОР
		|				КОГДА ДЕНЬ(Стажи.ДатаОтсчета) > ДЕНЬ(ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней))
		//vvv
		//|					ТОГДА 1
		|					ТОГДА ВЫБОР КОГДА &ПорядокРасчетаНадбавкиЗаСтаж=ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаНадбавкиЗаСтаж.СменаВТекущемМесяце) ТОГДА 0 ИНАЧЕ 1 КОНЕЦ
		//
		|				ИНАЧЕ 0
		|			КОНЕЦ >= ШкалаКоэффициентовСтажа.СтажС)			
		|			И (Стажи.РазмерМесяцев + РАЗНОСТЬДАТ(Стажи.ДатаОтсчета, ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней), МЕСЯЦ) - ВЫБОР
		|				КОГДА ДЕНЬ(Стажи.ДатаОтсчета) > ДЕНЬ(ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней))
		//vvv
		//|					ТОГДА 1
		|					ТОГДА ВЫБОР КОГДА &ПорядокРасчетаНадбавкиЗаСтаж=ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаНадбавкиЗаСтаж.СменаВТекущемМесяце) ТОГДА 0 ИНАЧЕ 1 КОНЕЦ
		//
		|				ИНАЧЕ 0
		|			КОНЕЦ < ВЫБОР
		|				КОГДА ШкалаКоэффициентовСтажа.СтажПо = 0
		|					ТОГДА 999999
		|				ИНАЧЕ ШкалаКоэффициентовСтажа.СтажПо
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаКоэффициентовСтажа КАК ШкалаСледКоэффициентовСтажа
		|		ПО СписокНачислений.ВидРасчетаКоэффициентСтажа = ШкалаСледКоэффициентовСтажа.КоэффициентСтажа
		|			И (СписокНачислений.СпособРасчета В (&СпособыРасчетаОтСтажа))
		|			И (Стажи.РазмерМесяцев + РАЗНОСТЬДАТ(Стажи.ДатаОтсчета, ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней), МЕСЯЦ) - ВЫБОР
		|				КОГДА ДЕНЬ(Стажи.ДатаОтсчета) >= ДЕНЬ(ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней))
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ = ШкалаКоэффициентовСтажа.СтажПо - 1)
		|			И (ШкалаСледКоэффициентовСтажа.НомерСтрокиШкалы = ШкалаКоэффициентовСтажа.НомерСтрокиШкалы + 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СУММА(ВЫБОР
		|					КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК ЧислоРабочихДней,
		|			СУММА(ВЫБОР
		|					КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК ЧислоПредпраздничныхДней
		|		ИЗ
		|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		ГДЕ
		|			РегламентированныйПроизводственныйКалендарь.Год = &Год) КАК ДанныеПроизводственногоКалендаря
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоСводнымИндивидуальнымГрафикам КАК НормаВремениПоСводнымИндивидуальнымГрафикам
		|		ПО СписокНачислений.Сотрудник = НормаВремениПоСводнымИндивидуальнымГрафикам.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам КАК НормаВремениПоЕжедневнымИндивидуальнымГрафикам
		|		ПО СписокНачислений.Сотрудник = НормаВремениПоЕжедневнымИндивидуальнымГрафикам.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоОбщимГрафикам КАК НормаВремениПоОбщимГрафикам
		|		ПО СписокНачислений.Сотрудник = НормаВремениПоОбщимГрафикам.Сотрудник
		|			И СписокНачислений.ГрафикРаботы = НормаВремениПоОбщимГрафикам.ГрафикРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты КАК ВариантыВстроенныхАлгоритмовРасчетаЗарплаты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ.СрезПоследних(&парамПериодРегистрации,ВидПараметра = &СреднеМесячноеКоличесвтоЧасов)  КАК РазмерыПараметровДляРасчетаРБ
		|		ПО (ИСТИНА)
        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеНачисления КАК ОсновныеНачисления
		|		ПО СписокНачислений.Сотрудник = ОсновныеНачисления.Сотрудник
		//vvv нужен для правильного разбора "обслуженных" видов расчета сотрудника
		//|			И СписокНачислений.ВидРасчета = ОсновныеНачисления.ВидРасчета
		//			добавим выбор, т.к. в противном случае при повторном заполнении в течении месяца (например когда сотрудник уже уволен, и по его подразделению заполняются люди), если начисления уже
		//			проведены, снова заполняются плановые начисления, отличные от основного.			
		|			И СписокНачислений.ВидРасчета = 
		|			ВЫБОР
		|				КОГДА СписокНачислений.ВидРасчета.ЗачетОтработанногоВремени И СписокНачислений.ВидРасчета.ЗачетНормыВремени ИЛИ СписокНачислений.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты)
		|					ТОГДА ОсновныеНачисления.ВидРасчета
		//vvv все, что начислено документом расчета основного заработка, считаем начисленным
		|				КОГДА ОсновныеНачисления.Регистратор ССЫЛКА Документ.РасчетОсновногоЗаработкаРаботниковОрганизации
		|					ТОГДА ОсновныеНачисления.ВидРасчета
		|				ИНАЧЕ СписокНачислений.ВидРасчета
		|			КОНЕЦ
		//
		|			И СписокНачислений.ПодразделениеОрганизации = ОсновныеНачисления.ПодразделениеОрганизации
		//vvv
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОНочныхВечерних КАК СведенияОНочныхВечерних
		|		ПО СписокНачислений.Сотрудник = СведенияОНочныхВечерних.Сотрудник
		|		И СписокНачислений.ПериодРаботники = СведенияОНочныхВечерних.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбАвтоначислениях КАК СведенияОбАвтоначислениях
		|		ПО СписокНачислений.Сотрудник = СведенияОбАвтоначислениях.Сотрудник
		|		И СписокНачислений.ПериодРаботники = СведенияОбАвтоначислениях.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОЕжемесячнойПремии КАК ДанныеОЕжемесячнойПремии		
		|		ПО ДанныеОЕжемесячнойПремии.Сотрудник=СписокНачислений.Сотрудник
		|		И (&ПоВсемПодразделениям ИЛИ ДанныеОЕжемесячнойПремии.ПодразделениеОрганизации=&парамПодразделение)
		|		И (&ПоВсемТабелям ИЛИ ДанныеОЕжемесячнойПремии.ТабельУчетаОрганизации=&ПарамТабельУчета)
		|		И ДанныеОЕжемесячнойПремии.ПериодНачисления=СписокНачислений.ПериодНачисления
		|		И СписокНачислений.ВидРасчета<>ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.РабочееВремяВодителей)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыРасчетаЗарплатыСотрудников КАК ПараметрыРасчетаЗарплатыСотрудников		
		|		ПО ПараметрыРасчетаЗарплатыСотрудников.Сотрудник=СписокНачислений.Сотрудник
		|		И ПараметрыРасчетаЗарплатыСотрудников.ПериодНачисления=СписокНачислений.ПериодНачисления
		//
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникНаименование,
		|	Сотрудник,
		|	ПериодРаботники,
		|	ПериодНачисления,
		|	ОсновноеНачисление УБЫВ,
		|	ВидРасчета";
		
		Запрос.Текст = ОсновнойТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();
		
		НачисленияВыборка = РезультатЗапроса.Выбрать();
		
		ТЗНачисления = СформироватьТаблицуНачислений(НачисленияВыборка, ОкончаниеПериодаЗаполнения, РезультатЗапроса.Выгрузить());
		
		// для заполнения табличной части НДФЛ
		
		РаботникиДляРасчетаНДФЛ = Новый Соответствие;
		РаботникиДляРасчетаПенсионного = Новый Соответствие;

		
		ТипОсновныхНачислений = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций");
		
		НаборЗаписейДляПроверки = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
		
		НаборЗаписейДляПроверки.Отбор.Регистратор.Значение = СcылкаОбъекта;
		
		СтрокаПолейОсновныхНачислений = "Сотрудник,Физлицо,ВидРасчета,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,ДатаНачала,ДатаОкончания,ПодразделениеОрганизации";
		СтрокаПолейДополнительныхНачислений = "Сотрудник,Физлицо,ВидРасчета,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,,КодВычета,ДатаНачала,ДатаОкончания,ПодразделениеОрганизации";
		Для Каждого НачислениеИзТаблицыЗначений Из ТЗНачисления Цикл
			
			РаботникиДляРасчетаНДФЛ.Вставить(НачислениеИзТаблицыЗначений.Физлицо, 0);
			РаботникиДляРасчетаПенсионного.Вставить(НачислениеИзТаблицыЗначений.Физлицо, 0);

			
			Если ВидОперации <> Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ 
			 ИЛИ ВидОперации <> Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетПенсионногоФонда Тогда
				
				Если ТипЗнч(НачислениеИзТаблицыЗначений.ВидРасчета)	= ТипОсновныхНачислений Тогда
					
					НоваяСтрока	=	Начисления.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,НачислениеИзТаблицыЗначений,СтрокаПолейОсновныхНачислений); //Сотрудник,ВидРасчета,Размер,Показатель2,Показатель3,ДатаНачала,ДатаОкончания,ПодразделениеОрганизации
					//vvv
					НоваяСтрока.ППС=НачислениеИзТаблицыЗначений.ППС;
					НоваяСтрока.СпособОтраженияВБухучете=НачислениеИзТаблицыЗначений.СпособОтраженияВБухучете;
					НоваяСтрока.ТабельУчетаОрганизации=НачислениеИзТаблицыЗначений.ТабельУчетаОрганизации;
					НоваяСтрока.Автомобиль=НачислениеИзТаблицыЗначений.Автомобиль;
					НоваяСтрока.НомерСтрокиТабеля=НачислениеИзТаблицыЗначений.НомерСтрокиТабеля;
					НоваяСтрока.Должность=НачислениеИзТаблицыЗначений.Должность;
					//
					НоваяСтрока.Авторасчет			= Истина;
					НоваяСтрока.ДатаНачалаСобытия	= ?(ЗначениеЗаполнено(НачислениеИзТаблицыЗначений.ДатаНачалаСобытия),НачислениеИзТаблицыЗначений.ДатаНачалаСобытия,НачислениеИзТаблицыЗначений.ДатаНачала);
					//Если НоваяСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет Тогда
					//	НоваяСтрока.ПериодРасчетаСреднегоЗаработкаНачало = ДобавитьМесяц(НачалоМесяца(НоваяСтрока.ДатаНачалаСобытия), -12);	
					//	НоваяСтрока.ПериодРасчетаСреднегоЗаработкаОкончание = НачалоМесяца(НоваяСтрока.ДатаНачалаСобытия) - 1;	
					//КонецЕсли;
					
					Движение = НаборЗаписейДляПроверки.Добавить();
					
					// свойства
					Движение.ПериодРегистрации		= ПериодРегистрации;
					Движение.ВидРасчета				= НачислениеИзТаблицыЗначений.ВидРасчета;
					Движение.ПериодДействияНачало	= НачислениеИзТаблицыЗначений.ДатаНачала;
					Движение.ПериодДействияКонец	= НачислениеИзТаблицыЗначений.ДатаОкончания;
					
					// измерения
					Движение.Сотрудник				= НачислениеИзТаблицыЗначений.Сотрудник;
					Движение.Физлицо				= НачислениеИзТаблицыЗначений.Физлицо;
					Движение.Организация			= ГоловнаяОрганизация;
					
					// реквизиты поддержки графика
					Движение.ГрафикРаботы			= НачислениеИзТаблицыЗначений.ГрафикРаботы;
					Движение.ВидУчетаВремени		= ПроведениеРасчетов.ПолучитьВидУчетаВремени(НачислениеИзТаблицыЗначений.СпособРасчета, НачислениеИзТаблицыЗначений.ВидВремени, НачислениеИзТаблицыЗначений.СуммированныйУчетРабочегоВремени,НачислениеИзТаблицыЗначений.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени,НачислениеИзТаблицыЗначений.ВидРасчета.Показатели);
					Движение.ДатаНачалаСобытия		= НачислениеИзТаблицыЗначений.ДатаНачала;
					Движение.Авторасчет				= Истина;
					
				Иначе
					
					НоваяСтрока	=	ДополнительныеНачисления.Добавить();
					НоваяСтрока.Авторасчет		= Истина;
					ЗаполнитьЗначенияСвойств(НоваяСтрока,НачислениеИзТаблицыЗначений,СтрокаПолейДополнительныхНачислений); //Сотрудник,ВидРасчета,Размер,КодВычета,ДатаНачала,ДатаОкончания,ПодразделениеОрганизации
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// выполним удаление строк табличной части, которые соответствуют полностью вытесняемым видам расчета
		// проверку выполним через фактический период действия
		Если ВидОперации <> Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ 
		 ИЛИ ВидОперации <> Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетПенсионногоФонда Тогда
			
			НачатьТранзакцию();
			
			//vvv
			НаборЗаписейДляПроверки.ОбменДанными.Загрузка = Истина;
			//НаборЗаписейДляПроверки.Записать();			
			НаборЗаписейДляПроверки.Записать(Истина, Ложь, Истина, Ложь);
			//
			
			ЗапросПроверки = Новый Запрос(
			"ВЫБРАТЬ
			|	ОсновныеНачисленияРаботниковОрганизации.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизации
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(Регистратор = &парамСсылка) КАК ОсновныеНачисленияРаботниковОрганизацииФактическийПериодДействия
			|		ПО ОсновныеНачисленияРаботниковОрганизации.НомерСтроки = ОсновныеНачисленияРаботниковОрганизацииФактическийПериодДействия.НомерСтроки
			|			И ОсновныеНачисленияРаботниковОрганизации.Регистратор = ОсновныеНачисленияРаботниковОрганизацииФактическийПериодДействия.Регистратор
			|ГДЕ
			|	ОсновныеНачисленияРаботниковОрганизации.Регистратор = &парамСсылка
			|	И ОсновныеНачисленияРаботниковОрганизацииФактическийПериодДействия.Регистратор ЕСТЬ NULL 
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки УБЫВ");
			
			//vvv перепишем запрос, иначе в случае переподбора сотрудника в документе, в котором много сотрудников, и если у переподбираемого сотрудника нету фактического
			//периода действия, то тупо удалялась первая строка документа
			
			ЗапросПроверки = Новый Запрос(
			"ВЫБРАТЬ 
			|	Начисления.Сотрудник,
			|	Начисления.ВидРасчета,
			|	Начисления.ДатаНачала,
			|	Начисления.ДатаОкончания,
			|	Начисления.НомерСтроки
			|ПОМЕСТИТЬ ВТНачисления
			|ИЗ &парамНачисления КАК Начисления
			|ИНДЕКСИРОВАТЬ ПО Сотрудник, ВидРасчета;
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Начисления.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизации
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(Регистратор = &парамСсылка) КАК ОсновныеНачисленияРаботниковОрганизацииФактическийПериодДействия
			|		ПО ОсновныеНачисленияРаботниковОрганизации.НомерСтроки = ОсновныеНачисленияРаботниковОрганизацииФактическийПериодДействия.НомерСтроки
			|			И ОсновныеНачисленияРаботниковОрганизации.Регистратор = ОсновныеНачисленияРаботниковОрганизацииФактическийПериодДействия.Регистратор
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
			|		ПО 	(Начисления.Сотрудник = ОсновныеНачисленияРаботниковОрганизации.Сотрудник)
			|			И (Начисления.ВидРасчета = ОсновныеНачисленияРаботниковОрганизации.ВидРасчета)
			|			И (Начисления.ДатаНачала = ОсновныеНачисленияРаботниковОрганизации.ПериодДействияНачало)
			|			И (КОНЕЦПЕРИОДА(Начисления.ДатаОкончания, День) = КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизации.ПериодДействияКонец, День))
			|ГДЕ
			|	ОсновныеНачисленияРаботниковОрганизации.Регистратор = &парамСсылка
			|	И ОсновныеНачисленияРаботниковОрганизацииФактическийПериодДействия.Регистратор ЕСТЬ NULL 
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки УБЫВ");
			//
			
			ЗапросПроверки.УстановитьПараметр("парамСсылка", СcылкаОбъекта);
			//vvv
			ЗапросПроверки.УстановитьПараметр("парамНачисления", Начисления.Выгрузить());
			//
			СтрокиКУдалению = ЗапросПроверки.Выполнить().Выгрузить();
			// удалим проверочный набор записей
			НаборЗаписейДляПроверки.Очистить();
			//vvv
			//НаборЗаписейДляПроверки.Записать();
			НаборЗаписейДляПроверки.Записать(Истина, Ложь, Истина, Ложь);
			//
			
			ЗафиксироватьТранзакцию();
			
			Для Каждого СтрокаТЗ Из СтрокиКУдалению Цикл
				Начисления.Удалить(СтрокаТЗ.НомерСтроки - 1);
			КонецЦикла;
			
		КонецЕсли;
		// конец удаления строк табличной части, которые соответствуют полностью вытесняемым видам расчета
		
		// работающие по договорам подряда
		ОсновнойТекстЗапроса =
		"ВЫБРАТЬ
		|	СписокНачислений.Сотрудник КАК Сотрудник,
		|	СписокНачислений.СотрудникФизлицо КАК Физлицо,
		|	СписокНачислений.СотрудникНаименование КАК СотрудникНаименование,
		|	СписокНачислений.ВидРасчета КАК ВидРасчета,
		|	СписокНачислений.ПериодНачисления КАК ДатаНачала,
		|	ЕСТЬNULL(СписокНачислений.ДатаОкончания, &парамКонец) КАК ДатаОкончания,
		|	СписокНачислений.ДокументОснование КАК ДокументОснование,
		|	СписокНачислений.Подходит,
		|	СписокНачислений.ВидРасчета.Наименование КАК ВидРасчетаНаименование,
		|	СписокНачислений.ДокументОснование.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	СписокНачислений.ДокументОснование.КодВычета КАК КодВычета,
		|	ВЫБОР
		|		КОГДА СписокНачислений.Показатель1 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СписокНачислений.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА СписокНачислений.Показатель1
		|		ИНАЧЕ СписокНачислений.Показатель1 * ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0)
		|	КОНЕЦ КАК Размер,
		|	ВЫБОР
		|		КОГДА СписокНачислений.Показатель1 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СписокНачислений.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА СписокНачислений.Показатель1
		|		ИНАЧЕ СписокНачислений.Показатель1 * ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0)
		|	КОНЕЦ КАК Результат,
		|	ВЫБОР
		|		КОГДА СписокНачислений.Показатель1 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СписокНачислений.ДокументОснование.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код405)
		|			ТОГДА 0
		|		КОГДА СписокНачислений.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА СписокНачислений.Показатель1 * ЕСТЬNULL(СведенияОСкидках.НормативЗатрат, 0) / 100
		|		ИНАЧЕ СписокНачислений.Показатель1 * ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0) * ЕСТЬNULL(СведенияОСкидках.НормативЗатрат, 0) / 100
		|	КОНЕЦ КАК СуммаВычета
		|ИЗ
		|	(ВЫБРАТЬ
		|		Работники.Сотрудник КАК Сотрудник,
		|		Работники.Сотрудник.Физлицо КАК СотрудникФизлицо,
		|		Работники.Сотрудник.Наименование КАК СотрудникНаименование,
		|		НачисленияРаботниковОрганизации.ДокументОснование КАК ДокументОснование,
		|		НачисленияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
		|		Работники.Подходит КАК Подходит,
		|		НачисленияРаботниковОрганизации.Период КАК ПериодНачисления,
		|		МИНИМУМ(ДатыОкончанияНачисленияРаботниковОрганизации.ДатаОкончания) КАК ДатаОкончания,
		|		НачисленияРаботниковОрганизации.Показатель1 КАК Показатель1,
		|		НачисленияРаботниковОрганизации.Валюта1 КАК Валюта1
		|	ИЗ
		|		ВТДвиженияРаботников КАК Работники
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				&парамНачало КАК Период,
		|				НачисленияРаботниковОрганизации.ВидРасчетаИзмерение КАК ВидРасчета,
		|				ВЫБОР
		|					КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|							И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА НачисленияРаботниковОрганизации.Показатель1Завершения
		|					ИНАЧЕ НачисленияРаботниковОрганизации.Показатель1
		|				КОНЕЦ КАК Показатель1,
		|				ВЫБОР
		|					КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|							И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА НачисленияРаботниковОрганизации.Валюта1Завершения
		|					ИНАЧЕ НачисленияРаботниковОрганизации.Валюта1
		|				КОНЕЦ КАК Валюта1,
		|				НачисленияРаботниковОрганизации.ДокументОснование КАК ДокументОснование,
		|				НачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник
		|			ИЗ
		|				РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
		|						&парамНачало,
		|						ДокументОснование <> ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
		|							И Сотрудник В
		|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|									ДвиженияРаботников.Сотрудник
		|								ИЗ
		|									ВТСписокРаботников КАК ДвиженияРаботников)) КАК НачисленияРаботниковОрганизации
		|			ГДЕ
		|				ВЫБОР
		|						КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|								И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|							ТОГДА НачисленияРаботниковОрганизации.ДействиеЗавершения
		|						ИНАЧЕ НачисленияРаботниковОрганизации.Действие
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				НачисленияРаботниковОрганизации.Период,
		|				НачисленияРаботниковОрганизации.ВидРасчетаИзмерение,
		|				НачисленияРаботниковОрганизации.Показатель1,
		|				НачисленияРаботниковОрганизации.Валюта1,
		|				НачисленияРаботниковОрганизации.ДокументОснование,
		|				НачисленияРаботниковОрганизации.Сотрудник
		|			ИЗ
		|				РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК ТаблицаДвиженийРаботников
		|					ПО НачисленияРаботниковОрганизации.Сотрудник = ТаблицаДвиженийРаботников.Сотрудник
		|			ГДЕ
		|				НачисленияРаботниковОрганизации.Период > &парамНачало
		|				И НачисленияРаботниковОрганизации.Период <= &парамКонец
		|				И НачисленияРаботниковОрганизации.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
		|				И НачисленияРаботниковОрганизации.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				НачисленияРаботниковОрганизации.ПериодЗавершения,
		|				НачисленияРаботниковОрганизации.ВидРасчетаИзмерение,
		|				НачисленияРаботниковОрганизации.Показатель1Завершения,
		|				НачисленияРаботниковОрганизации.Валюта1Завершения,
		|				НачисленияРаботниковОрганизации.ДокументОснование,
		|				НачисленияРаботниковОрганизации.Сотрудник
		|			ИЗ
		|				РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК ТаблицаДвиженийРаботников
		|					ПО НачисленияРаботниковОрганизации.Сотрудник = ТаблицаДвиженийРаботников.Сотрудник
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковПроверка
		|					ПО НачисленияРаботниковОрганизации.Сотрудник = НачисленияРаботниковПроверка.Сотрудник
		|						И НачисленияРаботниковОрганизации.ВидРасчетаИзмерение = НачисленияРаботниковПроверка.ВидРасчетаИзмерение
		|						И НачисленияРаботниковОрганизации.ДокументОснование = НачисленияРаботниковПроверка.ДокументОснование
		|						И (НачисленияРаботниковПроверка.Период > НачисленияРаботниковОрганизации.Период)
		|						И (НачисленияРаботниковПроверка.Период <= НачисленияРаботниковОрганизации.ПериодЗавершения)
		|			ГДЕ
		|				НачисленияРаботниковОрганизации.ПериодЗавершения МЕЖДУ &парамНачало И &парамКонец
		|				И НачисленияРаботниковОрганизации.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
		|				И НачисленияРаботниковОрганизации.ДействиеЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|				И НачисленияРаботниковПроверка.Сотрудник ЕСТЬ NULL ) КАК НачисленияРаботниковОрганизации
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ДОБАВИТЬКДАТЕ(НачисленияРаботниковОрганизации.Период, ДЕНЬ, -1) КАК ДатаОкончания,
		|					НачисленияРаботниковОрганизации.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
		|					НачисленияРаботниковОрганизации.ДокументОснование КАК ДокументОснование,
		|					НачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник
		|				ИЗ
		|					РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК ТаблицаДвиженийРаботников
		|						ПО НачисленияРаботниковОрганизации.Сотрудник = ТаблицаДвиженийРаботников.Сотрудник
		|				ГДЕ
		|					НачисленияРаботниковОрганизации.Период >= &парамНачало
		|					И НачисленияРаботниковОрганизации.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
		|					И НачисленияРаботниковОрганизации.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
		|				
		|				ОБЪЕДИНИТЬ ВСЕ
		|				
		|				ВЫБРАТЬ
		|					ВЫБОР
		|						КОГДА ДОБАВИТЬКДАТЕ(НачисленияРаботниковОрганизации.ПериодЗавершения, ДЕНЬ, -1) > &парамКонец
		|							ТОГДА &парамКонец
		|						ИНАЧЕ ДОБАВИТЬКДАТЕ(НачисленияРаботниковОрганизации.ПериодЗавершения, ДЕНЬ, -1)
		|					КОНЕЦ,
		|					НачисленияРаботниковОрганизации.ВидРасчетаИзмерение,
		|					НачисленияРаботниковОрганизации.ДокументОснование,
		|					НачисленияРаботниковОрганизации.Сотрудник
		|				ИЗ
		|					РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДвиженияРаботников КАК ТаблицаДвиженийРаботников
		|						ПО НачисленияРаботниковОрганизации.Сотрудник = ТаблицаДвиженийРаботников.Сотрудник
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковПроверка
		|						ПО НачисленияРаботниковОрганизации.Сотрудник = НачисленияРаботниковПроверка.Сотрудник
		|							И НачисленияРаботниковОрганизации.ВидРасчетаИзмерение = НачисленияРаботниковПроверка.ВидРасчетаИзмерение
		|							И НачисленияРаботниковОрганизации.ДокументОснование = НачисленияРаботниковПроверка.ДокументОснование
		|							И (НачисленияРаботниковПроверка.Период > НачисленияРаботниковОрганизации.Период)
		|							И (НачисленияРаботниковПроверка.Период <= НачисленияРаботниковОрганизации.ПериодЗавершения)
		|				ГДЕ
		|					НачисленияРаботниковОрганизации.ПериодЗавершения >= &парамНачало
		|					И НачисленияРаботниковОрганизации.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
		|					И НачисленияРаботниковОрганизации.ДействиеЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
		|					И НачисленияРаботниковПроверка.Сотрудник ЕСТЬ NULL ) КАК ДатыОкончанияНачисленияРаботниковОрганизации
		|				ПО НачисленияРаботниковОрганизации.Сотрудник = ДатыОкончанияНачисленияРаботниковОрганизации.Сотрудник
		|					И НачисленияРаботниковОрганизации.ВидРасчета = ДатыОкончанияНачисленияРаботниковОрганизации.ВидРасчетаИзмерение
		|					И НачисленияРаботниковОрганизации.ДокументОснование = ДатыОкончанияНачисленияРаботниковОрганизации.ДокументОснование
		|					И НачисленияРаботниковОрганизации.Период <= ДатыОкончанияНачисленияРаботниковОрганизации.ДатаОкончания
		|			ПО (Работники.Подходит)
		|				И Работники.Сотрудник = НачисленияРаботниковОрганизации.Сотрудник
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Работники.Сотрудник,
		|		Работники.Сотрудник.Физлицо,
		|		Работники.Сотрудник.Наименование,
		|		Работники.Подходит,
		|		НачисленияРаботниковОрганизации.ДокументОснование,
		|		НачисленияРаботниковОрганизации.ВидРасчета,
		|		НачисленияРаботниковОрганизации.Период,
		|		НачисленияРаботниковОрганизации.Показатель1,
		|		НачисленияРаботниковОрганизации.Валюта1) КАК СписокНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты1
		|		ПО (Валюты1.Период = &парамДатаВалютногоУчета)
		|			И СписокНачислений.Валюта1 = Валюты1.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|			ОсновныеНачисления.ДокументОснование КАК ДокументОснование
		|		ИЗ
		|			РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК ТаблицаДвиженийРаботников
		|				ПО ОсновныеНачисления.Сотрудник = ТаблицаДвиженийРаботников.Сотрудник
		|		ГДЕ
		|			ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
		|			И ОсновныеНачисления.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
		|			И ОсновныеНачисления.Регистратор <> &парамРегистратор
		|			И (НЕ ОсновныеНачисления.Сторно)
		|			И ОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация) КАК ОсновныеНачисления
		|		ПО СписокНачислений.Сотрудник = ОсновныеНачисления.Сотрудник
		|			И СписокНачислений.ДокументОснование = ОсновныеНачисления.ДокументОснование
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛВычетыПоДоходам.СрезПоследних(&парамНачало, ) КАК СведенияОСкидках
		|		ПО СписокНачислений.ВидРасчета.КодДоходаНДФЛ = СведенияОСкидках.КодДохода
		|ГДЕ
		|	СписокНачислений.Подходит
		|	И ВЫБОР
		|			КОГДА СписокНачислений.ДокументОснование ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			КОГДА СписокНачислений.ДокументОснование.Организация = &парамОрганизация
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ЭтоПерерасчет
		|				ТОГДА ИСТИНА
		|			КОГДА ОсновныеНачисления.Сотрудник ЕСТЬ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникНаименование,
		|	ДокументОснование,
		|	ДатаНачала";
		
		Запрос.Текст = ОсновнойТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();
		
		Если МассивСотрудники = Неопределено Тогда
			ДоговорыНаВыполнениеРабот.Загрузить(РезультатЗапроса.Выгрузить());
			Для каждого СтрокаТЧ Из ДоговорыНаВыполнениеРабот Цикл
				РаботникиДляРасчетаНДФЛ.Вставить(СтрокаТЧ.Физлицо, 0);
				РаботникиДляРасчетаПенсионного.Вставить(СтрокаТЧ.Физлицо, 0);
			КонецЦикла;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ДоговорыНаВыполнениеРабот.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
				РаботникиДляРасчетаНДФЛ.Вставить(НоваяСтрока.Физлицо, 0);
				РаботникиДляРасчетаПенсионного.Вставить(НоваяСтрока.Физлицо, 0);
			КонецЦикла;
		КонецЕсли;	
		
		// Очистим необходимость перезаполнения по заполненным работникам
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокРаботников.Сотрудник
		|ИЗ
		|	ВТСписокРаботников КАК СписокРаботников";
		ПроведениеРасчетов.УдалитьСведенияОПерезаполненииДокумента(Ссылка,Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник"));
		
	КонецЕсли;

	// АВТОЗАПОЛНЕНИЕ ТЧ "Удержания"
	//vvv комментируем, добавляем условие
	//Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет ИЛИ
	Если (ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет И Не ЗначениеЗаполнено(ПерерассчитываемыйДокумент)) ИЛИ
	//	
		ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний Тогда		
		
		ТекстЗапросаУдержаний = 
		"ВЫБРАТЬ
		|	УдержанияРаботниковОрганизации.Физлицо КАК Физлицо,
		|	УдержанияРаботниковОрганизации.Физлицо.Наименование КАК ФизлицоНаименование,
		|	УдержанияРаботниковОрганизации.Период КАК Период,
		|	УдержанияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
		|	УдержанияРаботниковОрганизации.Действие КАК Действие,
		|	УдержанияРаботниковОрганизации.ДокументОснование КАК ДокументОснование,
		|	УдержанияРаботниковОрганизации.ДополнительныеДанные КАК ДополнительныеДанные,
		|	УдержанияРаботниковОрганизации.ПорядокИсчисленияИздержек,
		|	УдержанияРаботниковОрганизации.Получатель КАК Получатель,
		|	УдержанияРаботниковОрганизации.Валюта1 КАК Валюта1,
		|	УдержанияРаботниковОрганизации.Валюта2 КАК Валюта2,
		|	УдержанияРаботниковОрганизации.Валюта3 КАК Валюта3,
		|	УдержанияРаботниковОрганизации.Валюта4 КАК Валюта4,
		|	УдержанияРаботниковОрганизации.Валюта5 КАК Валюта5,
		|	УдержанияРаботниковОрганизации.Валюта6 КАК Валюта6,
		|	ВЫБОР
		|		КОГДА УдержанияРаботниковОрганизации.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА 1
		|		ИНАЧЕ Валюты1.Курс
		|	КОНЕЦ КАК КурсВалюты1,
		|	ВЫБОР
		|		КОГДА УдержанияРаботниковОрганизации.Валюта2 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА 1
		|		ИНАЧЕ Валюты2.Курс
		|	КОНЕЦ КАК КурсВалюты2,
		|	ВЫБОР
		|		КОГДА УдержанияРаботниковОрганизации.Валюта3 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА 1
		|		ИНАЧЕ Валюты3.Курс
		|	КОНЕЦ КАК КурсВалюты3,
		|	ВЫБОР
		|		КОГДА УдержанияРаботниковОрганизации.Валюта4 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА 1
		|		ИНАЧЕ Валюты4.Курс
		|	КОНЕЦ КАК КурсВалюты4,
		|	ВЫБОР
		|		КОГДА УдержанияРаботниковОрганизации.Валюта5 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА 1
		|		ИНАЧЕ Валюты5.Курс
		|	КОНЕЦ КАК КурсВалюты5,
		|	ВЫБОР
		|		КОГДА УдержанияРаботниковОрганизации.Валюта6 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА 1
		|		ИНАЧЕ Валюты6.Курс
		|	КОНЕЦ КАК КурсВалюты6,
		|	ВЫБОР
		|		КОГДА Показатели.Показатель1 ЕСТЬ НЕ NULL 
		|					И Показатели.Показатель1 <> 0
		|				ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|			ТОГДА Показатели.Показатель1
		|		КОГДА УдержанияРаботниковОрганизации.Показатель1 ЕСТЬ NULL 
		|				ИЛИ УдержанияРаботниковОрганизации.Показатель1 = 0
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 1
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УдержанияРаботниковОрганизации.Показатель1 ЕСТЬ NULL 
		|					ТОГДА 0
		|				КОГДА УдержанияРаботниковОрганизации.ВидРасчета.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ИЛИ УдержанияРаботниковОрганизации.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|					ТОГДА УдержанияРаботниковОрганизации.Показатель1
		|				ИНАЧЕ УдержанияРаботниковОрганизации.Показатель1 * ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0)
		|			КОНЕЦ
		|	КОНЕЦ КАК Показатель1,
		|	ВЫБОР
		|		КОГДА Показатели.Показатель2 ЕСТЬ НЕ NULL 
		|					И Показатели.Показатель2 <> 0
		|				ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|			ТОГДА Показатели.Показатель2
		|		КОГДА УдержанияРаботниковОрганизации.Показатель2 ЕСТЬ NULL 
		|				ИЛИ УдержанияРаботниковОрганизации.Показатель2 = 0
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 2
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УдержанияРаботниковОрганизации.Показатель2 ЕСТЬ NULL 
		|					ТОГДА 0
		|				КОГДА УдержанияРаботниковОрганизации.ВидРасчета.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ИЛИ УдержанияРаботниковОрганизации.Валюта2 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|					ТОГДА УдержанияРаботниковОрганизации.Показатель2
		|				ИНАЧЕ УдержанияРаботниковОрганизации.Показатель2 * ЕСТЬNULL(Валюты2.Курс / Валюты2.Кратность, 0)
		|			КОНЕЦ
		|	КОНЕЦ КАК Показатель2,
		|	ВЫБОР
		|		КОГДА Показатели.Показатель3 ЕСТЬ НЕ NULL 
		|					И Показатели.Показатель3 <> 0
		|				ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|			ТОГДА Показатели.Показатель3
		|		КОГДА УдержанияРаботниковОрганизации.Показатель3 ЕСТЬ NULL 
		|				ИЛИ УдержанияРаботниковОрганизации.Показатель3 = 0
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 3
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УдержанияРаботниковОрганизации.Показатель3 ЕСТЬ NULL 
		|					ТОГДА 0
		|				КОГДА УдержанияРаботниковОрганизации.ВидРасчета.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ИЛИ УдержанияРаботниковОрганизации.Валюта3 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|					ТОГДА УдержанияРаботниковОрганизации.Показатель3
		|				ИНАЧЕ УдержанияРаботниковОрганизации.Показатель3 * ЕСТЬNULL(Валюты3.Курс / Валюты3.Кратность, 0)
		|			КОНЕЦ
		|	КОНЕЦ КАК Показатель3,
		|	ВЫБОР
		|		КОГДА Показатели.Показатель4 ЕСТЬ НЕ NULL 
		|					И Показатели.Показатель4 <> 0
		|				ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|			ТОГДА Показатели.Показатель4
		|		КОГДА УдержанияРаботниковОрганизации.Показатель4 ЕСТЬ NULL 
		|				ИЛИ УдержанияРаботниковОрганизации.Показатель4 = 0
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 4
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УдержанияРаботниковОрганизации.Показатель4 ЕСТЬ NULL 
		|					ТОГДА 0
		|				КОГДА УдержанияРаботниковОрганизации.ВидРасчета.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ИЛИ УдержанияРаботниковОрганизации.Валюта4 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|					ТОГДА УдержанияРаботниковОрганизации.Показатель4
		|				ИНАЧЕ УдержанияРаботниковОрганизации.Показатель4 * ЕСТЬNULL(Валюты4.Курс / Валюты4.Кратность, 0)
		|			КОНЕЦ
		|	КОНЕЦ КАК Показатель4,
		|	ВЫБОР
		|		КОГДА Показатели.Показатель5 ЕСТЬ НЕ NULL 
		|					И Показатели.Показатель5 <> 0
		|				ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|			ТОГДА Показатели.Показатель5
		|		КОГДА УдержанияРаботниковОрганизации.Показатель5 ЕСТЬ NULL 
		|				ИЛИ УдержанияРаботниковОрганизации.Показатель5 = 0
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 5
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УдержанияРаботниковОрганизации.Показатель5 ЕСТЬ NULL 
		|					ТОГДА 0
		|				КОГДА УдержанияРаботниковОрганизации.ВидРасчета.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ИЛИ УдержанияРаботниковОрганизации.Валюта5 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|					ТОГДА УдержанияРаботниковОрганизации.Показатель5
		|				ИНАЧЕ УдержанияРаботниковОрганизации.Показатель5 * ЕСТЬNULL(Валюты5.Курс / Валюты5.Кратность, 0)
		|			КОНЕЦ
		|	КОНЕЦ КАК Показатель5,
		|	ВЫБОР
		|		КОГДА Показатели.Показатель6 ЕСТЬ НЕ NULL 
		|					И Показатели.Показатель6 <> 0
		|				ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|			ТОГДА Показатели.Показатель6
		|		КОГДА УдержанияРаботниковОрганизации.Показатель6 ЕСТЬ NULL 
		|				ИЛИ УдержанияРаботниковОрганизации.Показатель6 = 0
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 6
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УдержанияРаботниковОрганизации.Показатель6 ЕСТЬ NULL 
		|					ТОГДА 0
		|				КОГДА УдержанияРаботниковОрганизации.ВидРасчета.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ИЛИ УдержанияРаботниковОрганизации.Валюта6 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|					ТОГДА УдержанияРаботниковОрганизации.Показатель6
		|				ИНАЧЕ УдержанияРаботниковОрганизации.Показатель6 * ЕСТЬNULL(Валюты6.Курс / Валюты6.Кратность, 0)
		|			КОНЕЦ
		|	КОНЕЦ КАК Показатель6
		|ИЗ
		|	(ВЫБРАТЬ
		|		&парамНачало КАК Период,
		|		УдержанияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.ДействиеЗавершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Действие
		|		КОНЕЦ КАК Действие,
		|		ВЫБОР
		|			КОГДА (НЕ УдержанияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ИсполнительныйЛист)
		|					ИЛИ УдержанияРаботниковОрганизации.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.КомиссионыйСбор))
		|				ТОГДА ЗНАЧЕНИЕ(Документ.ИсполнительныйЛист.ПустаяСсылка)
		|			ИНАЧЕ УдержанияРаботниковОрганизации.ДокументОснование
		|		КОНЕЦ КАК ДокументОснование,
		|		УдержанияРаботниковОрганизации.ПрожиточныйМинимум КАК ДополнительныеДанные,
		|		УдержанияРаботниковОрганизации.ПорядокИсчисленияИздержек КАК ПорядокИсчисленияИздержек,
		|		УдержанияРаботниковОрганизации.Получатель КАК Получатель,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Показатель1Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Показатель1
		|		КОНЕЦ КАК Показатель1,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Показатель2Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Показатель2
		|		КОНЕЦ КАК Показатель2,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Показатель3Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Показатель3
		|		КОНЕЦ КАК Показатель3,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Показатель4Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Показатель4
		|		КОНЕЦ КАК Показатель4,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Показатель5Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Показатель5
		|		КОНЕЦ КАК Показатель5,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Показатель6Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Показатель6
		|		КОНЕЦ КАК Показатель6,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Валюта1Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Валюта1
		|		КОНЕЦ КАК Валюта1,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Валюта2Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Валюта2
		|		КОНЕЦ КАК Валюта2,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Валюта3Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Валюта3
		|		КОНЕЦ КАК Валюта3,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Валюта4Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Валюта4
		|		КОНЕЦ КАК Валюта4,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Валюта5Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Валюта5
		|		КОНЕЦ КАК Валюта5,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Валюта6Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Валюта6
		|		КОНЕЦ КАК Валюта6,
		|		УдержанияРаботниковОрганизации.ФизЛицо КАК Физлицо
		|	ИЗ
		|		РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций.СрезПоследних(
		|				&парамНачало,
		|				Организация = &парамГоловнаяОрганизация
		|					И ФизЛицо В
		|						(ВЫБРАТЬ
		|							СписокРаботников.ФизЛицо
		|						ИЗ
		|							ВТСписокРаботников КАК СписокРаботников)) КАК УдержанияРаботниковОрганизации
		|	ГДЕ
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.ДействиеЗавершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Действие
		|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		УдержанияРаботниковОрганизации.Период,
		|		УдержанияРаботниковОрганизации.ВидРасчета,
		|		УдержанияРаботниковОрганизации.Действие,
		|		ВЫБОР
		|			КОГДА (НЕ УдержанияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ИсполнительныйЛист)
		|					ИЛИ УдержанияРаботниковОрганизации.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.КомиссионыйСбор))
		|				ТОГДА ЗНАЧЕНИЕ(Документ.ИсполнительныйЛист.ПустаяСсылка)
		|			ИНАЧЕ УдержанияРаботниковОрганизации.ДокументОснование
		|		КОНЕЦ,
		|		УдержанияРаботниковОрганизации.ПрожиточныйМинимум,
		|		УдержанияРаботниковОрганизации.ПорядокИсчисленияИздержек,
		|		УдержанияРаботниковОрганизации.Получатель,
		|		УдержанияРаботниковОрганизации.Показатель1,
		|		УдержанияРаботниковОрганизации.Показатель2,
		|		УдержанияРаботниковОрганизации.Показатель3,
		|		УдержанияРаботниковОрганизации.Показатель4,
		|		УдержанияРаботниковОрганизации.Показатель5,
		|		УдержанияРаботниковОрганизации.Показатель6,
		|		УдержанияРаботниковОрганизации.Валюта1,
		|		УдержанияРаботниковОрганизации.Валюта2,
		|		УдержанияРаботниковОрганизации.Валюта3,
		|		УдержанияРаботниковОрганизации.Валюта4,
		|		УдержанияРаботниковОрганизации.Валюта5,
		|		УдержанияРаботниковОрганизации.Валюта6,
		|		УдержанияРаботниковОрганизации.ФизЛицо
		|	ИЗ
		|		РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизации
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК СписокРаботников
		|			ПО УдержанияРаботниковОрганизации.ФизЛицо = СписокРаботников.Физлицо
		|	ГДЕ
		|		УдержанияРаботниковОрганизации.Период > &парамНачало
		|		И УдержанияРаботниковОрганизации.Период <= &парамКонец
		|		И УдержанияРаботниковОрганизации.Организация = &парамГоловнаяОрганизация
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		УдержанияРаботниковОрганизации.ПериодЗавершения,
		|		УдержанияРаботниковОрганизации.ВидРасчета,
		|		УдержанияРаботниковОрганизации.ДействиеЗавершения,
		|		ВЫБОР
		|			КОГДА (НЕ УдержанияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ИсполнительныйЛист)
		|					ИЛИ УдержанияРаботниковОрганизации.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.КомиссионыйСбор))
		|				ТОГДА ЗНАЧЕНИЕ(Документ.ИсполнительныйЛист.ПустаяСсылка)
		|			ИНАЧЕ УдержанияРаботниковОрганизации.ДокументОснование
		|		КОНЕЦ,
		|		УдержанияРаботниковОрганизации.ПрожиточныйМинимум,
		|		УдержанияРаботниковОрганизации.ПорядокИсчисленияИздержек,
		|		УдержанияРаботниковОрганизации.Получатель,
		|		УдержанияРаботниковОрганизации.Показатель1Завершения,
		|		УдержанияРаботниковОрганизации.Показатель2Завершения,
		|		УдержанияРаботниковОрганизации.Показатель3Завершения,
		|		УдержанияРаботниковОрганизации.Показатель4Завершения,
		|		УдержанияРаботниковОрганизации.Показатель5Завершения,
		|		УдержанияРаботниковОрганизации.Показатель6Завершения,
		|		УдержанияРаботниковОрганизации.Валюта1Завершения,
		|		УдержанияРаботниковОрганизации.Валюта2Завершения,
		|		УдержанияРаботниковОрганизации.Валюта3Завершения,
		|		УдержанияРаботниковОрганизации.Валюта4Завершения,
		|		УдержанияРаботниковОрганизации.Валюта5Завершения,
		|		УдержанияРаботниковОрганизации.Валюта6Завершения,
		|		УдержанияРаботниковОрганизации.ФизЛицо
		|	ИЗ
		|		РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизации
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК СписокРаботников
		|			ПО УдержанияРаботниковОрганизации.ФизЛицо = СписокРаботников.Физлицо
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизацииПроверка
		|			ПО (УдержанияРаботниковОрганизацииПроверка.Организация = УдержанияРаботниковОрганизации.Организация)
		|				И (УдержанияРаботниковОрганизацииПроверка.ФизЛицо = УдержанияРаботниковОрганизации.ФизЛицо)
		|				И (УдержанияРаботниковОрганизацииПроверка.ВидРасчета = УдержанияРаботниковОрганизации.ВидРасчета)
		|				И (УдержанияРаботниковОрганизацииПроверка.ДокументОснование = УдержанияРаботниковОрганизации.ДокументОснование)
		|				И (УдержанияРаботниковОрганизацииПроверка.Период > УдержанияРаботниковОрганизации.Период)
		|				И (УдержанияРаботниковОрганизацииПроверка.Период <= УдержанияРаботниковОрганизации.ПериодЗавершения)
		|	ГДЕ
		|		УдержанияРаботниковОрганизации.ПериодЗавершения > &парамНачало
		|		И УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамКонец
		|		И УдержанияРаботниковОрганизации.Организация = &парамГоловнаяОрганизация
		|		И УдержанияРаботниковОрганизацииПроверка.ФизЛицо ЕСТЬ NULL ) КАК УдержанияРаботниковОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты1
		|		ПО (Валюты1.Период = &парамДатаВалютногоУчета)
		|			И УдержанияРаботниковОрганизации.Валюта1 = Валюты1.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты2
		|		ПО (Валюты2.Период = &парамДатаВалютногоУчета)
		|			И УдержанияРаботниковОрганизации.Валюта2 = Валюты2.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты3
		|		ПО (Валюты3.Период = &парамДатаВалютногоУчета)
		|			И УдержанияРаботниковОрганизации.Валюта3 = Валюты3.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты4
		|		ПО (Валюты4.Период = &парамДатаВалютногоУчета)
		|			И УдержанияРаботниковОрганизации.Валюта4 = Валюты4.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты5
		|		ПО (Валюты5.Период = &парамДатаВалютногоУчета)
		|			И УдержанияРаботниковОрганизации.Валюта5 = Валюты5.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты6
		|		ПО (Валюты6.Период = &парамДатаВалютногоУчета)
		|			И УдержанияРаботниковОрганизации.Валюта6 = Валюты6.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
		|		ПО УдержанияРаботниковОрганизации.Физлицо = Показатели.Сотрудник.Физлицо
		|			И УдержанияРаботниковОрганизации.ВидРасчета = Показатели.ВидРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			НеВводимыеПоказатели.Ссылка КАК Ссылка,
		|			НеВводимыеПоказатели.НомерСтроки КАК НомерСтроки,
		|			НеВводимыеПоказатели.Показатель КАК Показатель,
		|			НеВводимыеПоказатели.Показатель.ВозможностьИзменения КАК ПоказательВозможностьИзменения,
		|			СУММА(ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя) КАК ЗначениеПоказателя,
		|			ЗначенияВводимыхКадровыхПоказателей.Сотрудник.ФизЛицо КАК ФизЛицо,
		|			ЗначенияВводимыхКадровыхПоказателей.Период КАК Период
		|		ИЗ
		|			ВТНеЗапрашиваемыеПриКадровыхПеремещениях КАК НеВводимыеПоказатели
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияВводимыхКадровыхПоказателей КАК ЗначенияВводимыхКадровыхПоказателей
		|				ПО НеВводимыеПоказатели.Показатель = ЗначенияВводимыхКадровыхПоказателей.Показатель
		|		ГДЕ
		|			ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя <> 0
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НеВводимыеПоказатели.Ссылка,
		|			НеВводимыеПоказатели.НомерСтроки,
		|			НеВводимыеПоказатели.Показатель,
		|			НеВводимыеПоказатели.Показатель.ВозможностьИзменения,
		|			ЗначенияВводимыхКадровыхПоказателей.Сотрудник.ФизЛицо,
		|			ЗначенияВводимыхКадровыхПоказателей.Период) КАК ЗначенияВводимыхКадровыхПоказателей
		|		ПО УдержанияРаботниковОрганизации.Физлицо = ЗначенияВводимыхКадровыхПоказателей.ФизЛицо
		|			И (КОНЕЦПЕРИОДА(УдержанияРаботниковОрганизации.Период, МЕСЯЦ) = КОНЕЦПЕРИОДА(ЗначенияВводимыхКадровыхПоказателей.Период, МЕСЯЦ))
		|			И УдержанияРаботниковОрганизации.ВидРасчета = ЗначенияВводимыхКадровыхПоказателей.Ссылка";
		
		// если не перерасчет - проверяем проведенность в расчетном периоде
		Если Не ЭтоПерерасчет Тогда
			ТекстЗапросаУдержаний = ТекстЗапросаУдержаний + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			УдержанияРаботников.ФизЛицо КАК ФизЛицо,
		|			УдержанияРаботников.ВидРасчета КАК ВидРасчета,
		|			УдержанияРаботников.ДокументОснование КАК ДокументОснование
		|		ИЗ
		|			РегистрРасчета.УдержанияРаботниковОрганизаций КАК УдержанияРаботников
		|		ГДЕ
		|			УдержанияРаботников.ПериодРегистрации = &парамПериодРегистрации
		|			И УдержанияРаботников.ФизЛицо В
		|					(ВЫБРАТЬ
		|						СписокРаботников.Физлицо
		|					ИЗ
		|						ВТСписокРаботников КАК СписокРаботников)
		|			И УдержанияРаботников.ОбособленноеПодразделение = &парамОрганизация
		|			И УдержанияРаботников.Регистратор <> &парамРегистратор
		|			И НАЧАЛОПЕРИОДА(УдержанияРаботников.БазовыйПериодНачало, МЕСЯЦ) = &парамПериодРегистрации) КАК ЗарегистрированныеУдержанияРаботников
		|		ПО УдержанияРаботниковОрганизации.Физлицо = ЗарегистрированныеУдержанияРаботников.ФизЛицо
		|			И УдержанияРаботниковОрганизации.ВидРасчета = ЗарегистрированныеУдержанияРаботников.ВидРасчета
		|			И (ЗарегистрированныеУдержанияРаботников.ДокументОснование = ВЫБОР
		|				КОГДА УдержанияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ИсполнительныйЛист
		|					ТОГДА УдержанияРаботниковОрганизации.ДокументОснование
		|				ИНАЧЕ ЗНАЧЕНИЕ(Документ.ИсполнительныйЛист.ПустаяСсылка)
		|			КОНЕЦ)
		|ГДЕ
		|	ЗарегистрированныеУдержанияРаботников.ФизЛицо ЕСТЬ NULL ";
		
		КонецЕсли;
		
		ТекстЗапросаУдержаний = ТекстЗапросаУдержаний + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизлицоНаименование,
		|	Физлицо,
		|	ДокументОснование,
		|	ВидРасчета,
		|	УдержанияРаботниковОрганизации.Период";
		
		Запрос.Текст = ТекстЗапросаУдержаний;
		УдержанияВыборка = Запрос.Выполнить().Выбрать();

		ТЗУдержания = СформироватьТаблицуУдержаний(УдержанияВыборка, ОкончаниеПериодаЗаполнения,МассивВалютСНезаданнымКурсом);
		
		СтруктураПоиска = Новый Структура("Сторно,ФизЛицо,ВидРасчета,ДокументОснование,ДатаНачала,Получатель,ДополнительныеДанные, ПорядокИсчисленияИздержек", Ложь);
		Для каждого СтрокаУдержания Из ТЗУдержания Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаУдержания);	
			Если Удержания.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(Удержания.Добавить(),СтрокаУдержания)	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// АВТОЗАПОЛНЕНИЕ ТЧ "НДФЛ"
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет ИЛИ
		ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НДФЛСведенияОДоходах.ФизЛицо
		|ИЗ
		|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
		|ГДЕ
		|	НДФЛСведенияОДоходах.ФизЛицо В
		|			(ВЫБРАТЬ
		|				СписокРаботников.Физлицо
		|			ИЗ
		|				ВТСписокРаботников КАК СписокРаботников)
		|	И НДФЛСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		//vvv
		//|	И НДФЛСведенияОДоходах.Организация = &парамОрганизация
		|	И НДФЛСведенияОДоходах.ОбособленноеПодразделение = &парамОрганизация
		//
		|	И НДФЛСведенияОДоходах.Регистратор <> &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			РаботникиДляРасчетаНДФЛ.Вставить(Выборка.Физлицо, 0);
		КонецЦикла;
		
		// заполним НДФЛ
		СтруктураПоиска = Новый Структура("ФизЛицо,МесяцНалоговогоПериода");
		Для Каждого Элемент Из РаботникиДляРасчетаНДФЛ Цикл
			СтруктураПоиска.ФизЛицо = Элемент.Ключ;
			СтруктураПоиска.МесяцНалоговогоПериода = НачалоМесяца(ПериодРегистрации);
			Если НДФЛ.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(НДФЛ.Добавить(),СтруктураПоиска)	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// АВТОЗАПОЛНЕНИЕ ТЧ "ПенсионныйФонд"
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет ИЛИ
		ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетПенсионногоФонда Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НДФЛСведенияОДоходах.ФизЛицо
		|ИЗ
		|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
		|ГДЕ
		|	НДФЛСведенияОДоходах.ФизЛицо В
		|			(ВЫБРАТЬ
		|				СписокРаботников.Физлицо
		|			ИЗ
		|				ВТСписокРаботников КАК СписокРаботников)
		|	И НДФЛСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		//vvv
		//|	И НДФЛСведенияОДоходах.Организация = &парамОрганизация
		|	И НДФЛСведенияОДоходах.ОбособленноеПодразделение = &парамОрганизация
		//
		|	И НДФЛСведенияОДоходах.Регистратор <> &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			РаботникиДляРасчетаПенсионного.Вставить(Выборка.Физлицо, 0);
		КонецЦикла;
		
		// заполним ПенсионныйФонд
		СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");
		Для Каждого Элемент Из РаботникиДляРасчетаПенсионного Цикл
			СтруктураПоиска.Физлицо = Элемент.Ключ;
			СтруктураПоиска.МесяцНалоговогоПериода = НачалоМесяца(ПериодРегистрации);
			Если ПенсионныйФонд.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(ПенсионныйФонд.Добавить(),СтруктураПоиска)	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// заполняем погашение займов 
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет ИЛИ
		ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
		
			// погашение займов
			ТекстЗапросаУдержаний = 
			"ВЫБРАТЬ
			|	ПогашениеЗаймовРаботникамиОстатки.ФизЛицо,
			|	ПогашениеЗаймовРаботникамиОстатки.ФизЛицо.Наименование КАК ФизЛицоНаименование,
			|	ПогашениеЗаймовРаботникамиОстатки.СтавкаНалогообложенияМатвыгоды,
			|	ПогашениеЗаймовРаботникамиОстатки.ДоговорЗайма,
			|	РаботникиОрганизаций.ПодразделениеОрганизации
			|ИЗ
			|	(ВЫБРАТЬ
			|		ПогашениеЗаймовРаботникамиОстатки.ФизЛицо КАК ФизЛицо,
			|		ПогашениеЗаймовРаботникамиОстатки.ДоговорЗайма КАК ДоговорЗайма,
			|		ВЫБОР
			|			КОГДА ПогашениеЗаймовРаботникамиОстатки.ДоговорЗайма.НачислятьМатериальнуюВыгоду
			|				ТОГДА ПогашениеЗаймовРаботникамиОстатки.ДоговорЗайма.СтавкаНалогообложенияРезидента
			|			ИНАЧЕ НЕОПРЕДЕЛЕНО
			|		КОНЕЦ КАК СтавкаНалогообложенияМатвыгоды
			|	ИЗ
			|		РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций.Остатки(
			|				&парамНачало,
			|				Организация = &парамОрганизация
			|					И (ДоговорЗайма.НачалоПогашения <= &парамНачало
			|						ИЛИ ДоговорЗайма.ПроцентЗаПользованиеЗаймом > 0
			|						ИЛИ ДоговорЗайма.НачислятьМатериальнуюВыгоду)
			|					И Физлицо В
			|						(ВЫБРАТЬ
			|							СписокРаботников.Физлицо
			|						ИЗ
			|							ВТСписокРаботников КАК СписокРаботников
			|						ГДЕ
			|							СписокРаботников.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))) КАК ПогашениеЗаймовРаботникамиОстатки
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ПогашениеЗаймовРаботникамиОбороты.ФизЛицо,
			|		ПогашениеЗаймовРаботникамиОбороты.ДоговорЗайма,
			|		ВЫБОР
			|			КОГДА ПогашениеЗаймовРаботникамиОбороты.ДоговорЗайма.НачислятьМатериальнуюВыгоду
			|				ТОГДА ПогашениеЗаймовРаботникамиОбороты.ДоговорЗайма.СтавкаНалогообложенияРезидента
			|			ИНАЧЕ НЕОПРЕДЕЛЕНО
			|		КОНЕЦ
			|	ИЗ
			|		РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций КАК ПогашениеЗаймовРаботникамиОбороты
			|	ГДЕ
			|		(ПогашениеЗаймовРаботникамиОбороты.ДоговорЗайма.НачалоПогашения <= &парамНачало
			|				ИЛИ ПогашениеЗаймовРаботникамиОбороты.ДоговорЗайма.ПроцентЗаПользованиеЗаймом > 0
			|				ИЛИ ПогашениеЗаймовРаботникамиОбороты.ДоговорЗайма.НачислятьМатериальнуюВыгоду)
			|		И ПогашениеЗаймовРаботникамиОбороты.Организация = &парамОрганизация
			|		И ПогашениеЗаймовРаботникамиОбороты.ФизЛицо В
			|				(ВЫБРАТЬ
			|					СписокРаботников.Физлицо
			|				ИЗ
			|					ВТСписокРаботников КАК СписокРаботников
			|				ГДЕ
			|					СписокРаботников.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
			|		И ПогашениеЗаймовРаботникамиОбороты.Период МЕЖДУ &парамНачало И &парамКонец
			|		И ПогашениеЗаймовРаботникамиОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)) КАК ПогашениеЗаймовРаботникамиОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
			|			ВЫБОР
			|				КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &парамКонец
			|						И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|					ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения
			|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
			|			КОНЕЦ КАК ПодразделениеОрганизации
			|		ИЗ
			|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|					&парамКонец,
			|					Организация = &парамГоловнаяОрганизация
			|						И Сотрудник В
			|							(ВЫБРАТЬ
			|								СписокРаботников.Сотрудник
			|							ИЗ
			|								ВТСписокРаботников КАК СписокРаботников
			|							ГДЕ
			|								СписокРаботников.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
			|						И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацийСрезПоследних
			|		ГДЕ
			|			ВЫБОР
			|					КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &парамКонец
			|							И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|						ТОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения
			|					ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
			|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизаций
			|		ПО ПогашениеЗаймовРаботникамиОстатки.ФизЛицо = РаботникиОрганизаций.Физлицо
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций КАК ПогашениеЗаймовРаботникамиОбороты
			|		ПО ПогашениеЗаймовРаботникамиОстатки.ФизЛицо = ПогашениеЗаймовРаботникамиОбороты.ФизЛицо
			|			И ПогашениеЗаймовРаботникамиОстатки.ДоговорЗайма = ПогашениеЗаймовРаботникамиОбороты.ДоговорЗайма
			|			И (ПогашениеЗаймовРаботникамиОбороты.Период МЕЖДУ &парамНачало И &парамКонец)
			|			И (ПогашениеЗаймовРаботникамиОбороты.Регистратор ССЫЛКА Документ.НачислениеЗарплатыРаботникамОрганизаций)
			|			И (ВЫРАЗИТЬ(ПогашениеЗаймовРаботникамиОбороты.Регистратор КАК Документ.НачислениеЗарплатыРаботникамОрганизаций).ПериодРегистрации = &парамПериодРегистрации)
			|ГДЕ
			|	ПогашениеЗаймовРаботникамиОбороты.ФизЛицо ЕСТЬ NULL 
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФизЛицоНаименование";
			
			Запрос.Текст = ТекстЗапросаУдержаний;
			СтруктураПоиска = Новый Структура("ФизЛицо,ДоговорЗайма,Сторно",Неопределено, Неопределено, Ложь);
			Для каждого СтрокаУдержания Из Запрос.Выполнить().Выгрузить() Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаУдержания);	
				Если ПогашениеЗаймов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
					ЗаполнитьЗначенияСвойств(ПогашениеЗаймов.Добавить(),СтрокаУдержания)	
				КонецЕсли;
			КонецЦикла;
			
	КонецЕсли;
	
	//vvv
	ЗаписьЖурналаРегистрации("НачислениеЗП.Автозаполнение",УровеньЖурналаРегистрации.Информация,Метаданные.Документы.НачислениеЗарплатыРаботникамОрганизаций,Ссылка,"Окончание автозаполнения "+Строка(ТекущаяДата())+". Затраченное время "+СервисныеПроцедурыИФункции.РазностьВремени(ТекущаяДата(),НачалоАвтозаполнения));
	//
	Возврат Истина;

КонецФункции

// процедура дописывать строки в таблицуИсточник из таблицы Приемник.
// Обе таблицы должны иметь одинаковую структуру колонок, иначе возникнет ошибка.
Процедура ДописатьСтрокиИзТаблицыВТаблицу(ТаблицаИсточник, ТаблицаПриемник)
	
	Для Каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТаблицыИсточника);
	КонецЦикла;
	
КонецПроцедуры // ДописатьСтрокиИзТаблицыВТаблицу()

// Заполняет набор записей по переданным данным расчета НДФЛ
//
// Параметры: 
//  НаборЗаписей - набор записей регистра НДФЛРасчетыСБюджетом
//    ДанныеНДФЛ - таблица значений - данные расчета НДФЛ
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымНДФЛ(НаборЗаписей, ДанныеНДФЛ, ВыборкаПоШапкеДокумента, Перерасчет = Ложь, ФизлицаСписок = Неопределено, КомментироватьРасчет = Ложь, ВыборкаПодразделений)
	
	УжеИсчислили = 0;
	УжеПрименилиЛичный = 0;
	УжеПрименилиДетский = 0;
	УжеПрименилиДетскийИнвалидов = 0;
	ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	ТекущийГод = 0;
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим соответствие физлиц, по  которым считается НДФЛ и индексов их строк табличной части НДФЛ
	РаботникиДляРасчетаНДФЛ = Новый Соответствие;
	РасчетПоФизлицу = Ложь;
	Если НЕ (ФизлицаСписок = НеОпределено) И Перерасчет = Ложь Тогда
		// расчет по одному физлицу
		РасчетПоФизлицу = Истина;
		РаботникиДляРасчетаНДФЛ.Вставить(ФизлицаСписок[0].Значение);
		СтруктураПоиска = Новый Структура("ФизЛицо", ФизлицаСписок[0].Значение);
		// запоминаем позицию физлица в табличной части
		ИндексСтрокиТаблицыНДФЛ = НеОпределено;
		МассивСтрок = НДФЛ.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТабличнойЧасти Из МассивСтрок Цикл
			Если ИндексСтрокиТаблицыНДФЛ = НеОпределено Тогда
				ИндексСтрокиТаблицыНДФЛ = СтрокаТабличнойЧасти.НомерСтроки - 1;
			КонецЕсли;
			НДФЛ.Удалить(СтрокаТабличнойЧасти);
		КонецЦикла;
		Если ИндексСтрокиТаблицыНДФЛ = НеОпределено Тогда
			ИндексСтрокиТаблицыНДФЛ = 0;
		КонецЕсли;
			
	ИначеЕсли НЕ (ФизлицаСписок = Неопределено) Тогда
		// это перерасчет
		Для Каждого ЭлементСписка Из ФизлицаСписок Цикл
			РаботникиДляРасчетаНДФЛ.Вставить(ЭлементСписка.Значение);
		КонецЦикла;
	Иначе //расчет всего документа
		Для Каждого Строка Из НДФЛ Цикл
			РаботникиДляРасчетаНДФЛ.Вставить(Строка.Физлицо);
		КонецЦикла;
		// очистим результаты расчета НДФЛ, которые находятся в табличной части документа
		НДФЛ.Очистить();
		
	КонецЕсли;
	
	ЗапросШкала = Новый Запрос;
	ЗапросШкала.Текст = "ВЫБРАТЬ
	                    |	ШкалаПодоходногоНалогаСрезПоследних.Налог
	                    |ИЗ
	                    |	РегистрСведений.ШкалаПодоходногоНалога.СрезПоследних(&КонецПериода, ) КАК ШкалаПодоходногоНалогаСрезПоследних
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	ШкалаПодоходногоНалогаСрезПоследних.Период,
	                    |	ШкалаПодоходногоНалогаСрезПоследних.НижнийПредел";
	ЗапросШкала.УстановитьПараметр("КонецПериода", ПериодРегистрации);
	Шкала = ЗапросШкала.Выполнить().Выгрузить();

	Если КомментироватьРасчет Тогда
		КомментарийНДФЛ = ОбщегоНазначения.КомментарийРасчета("Расчет подоходного налога");
	КонецЕсли;
	
	СтруктураПоискаПодразделения = Новый Структура("Физлицо,Период");
	Если ГОД(ПериодРегистрации) < 2009 тогда
		Пока ДанныеНДФЛ.Следующий() Цикл
			Если ТекущееФизлицо <> ДанныеНДФЛ.ФизЛицо ИЛИ ТекущийГод <> Год(ДанныеНДФЛ.Период) Тогда
				УжеИсчислили = 0;
				УжеПрименилиЛичный = 0;
				УжеПрименилиДетский = 0;
				УжеПрименилиДетскийЛьгота = 0;
				УжеПрименилиДополнительный = 0;
				НалогИсчисленный = 0;
				НалогИсчисленныйЗаГод = 0;
				ВычетыПримененныеЛичный = 0;
				ВычетыПримененныеДетский = 0;
				ВычетыПримененныеДетскийЛьгота = 0;
				ВычетыПримененныеДополнительный = 0; 
				ВычетыПримененные312Пред = 0;
				ВычетыПримененные311Пред = 0;
				ВычетыПримененные312 = 0;
				ВычетыПримененные311 = 0;
				ОблагаемыйДоходЗаГод = 0;
				УжеПрименили312 = 0;
				УжеПрименили311 = 0;
				// текущие физлицо и год периода
				ТекущееФизлицо = ДанныеНДФЛ.ФизЛицо;
				ТекущийГод = Год(ДанныеНДФЛ.Период);
			КонецЕсли;
			
			//Минск н
				Если   ТекущийГод < Год(ПериодРегистрации) тогда   //Перерасчеты за предидущие налоговые периоды
					Если Месяц(ДанныеНДФЛ.Период) = 12 тогда
						Если (Год(ПериодРегистрации) - ТекущийГод) > 3 тогда
							Сообщить("Перерасчет подоходного налога возможен только за три года");
							Продолжить;
						КонецЕсли;
						//Рассчитать по прогрессивной шкале
						ВычетыПримененныеЛичный = ДанныеНДФЛ.ПримененныеВычетыЛичные;
						ВычетыПримененныеДетский = ДанныеНДФЛ.ПримененныеВычетыДетские;
						ВычетыПримененныеДетскийЛьгота = ДанныеНДФЛ.ПримененныеВычетыДетскиеЛьгота;
						ВычетыПримененныеДополнительный = ДанныеНДФЛ.ПримененныеВычетыДополнительные; 
						ВычетыПримененные312 = ДанныеНДФЛ.ПримененныеВычеты312;
						ВычетыПримененные311 = ДанныеНДФЛ.ПримененныеВычеты311;
						ОблагаемыйДоходЗаГод = ДанныеНДФЛ.ДоходЗаГод;
						если ДанныеНДФЛ.Резидент тогда
							НалогИсчисленный = ОбщегоНазначения.ОкруглитьПоВалюте(ПроведениеРасчетов.РассчитатьПрогрессивнуюШкалу(ТекущийГод, ДанныеНДФЛ.период,  ДанныеНДФЛ.НалогРанееИсчисленный,
																		ОблагаемыйДоходЗаГод, 
																		ВычетыПримененныеЛичный,
																		ВычетыПримененныеДетский,
																		ВычетыПримененныеДетскийЛьгота,
																		ВычетыПримененныеДополнительный,
																		ВычетыПримененные312,
																		ВычетыПримененные311) - ДанныеНДФЛ.НалогРанееИсчисленный, Константы.ВалютаРегламентированногоУчета.Получить());
						Иначе
							НалогИсчисленный = ОбщегоНазначения.ОкруглитьПоВалюте(ДанныеНДФЛ.НалогНерезидентаЗаГод - ДанныеНДФЛ.НалогРанееИсчисленный, Константы.ВалютаРегламентированногоУчета.Получить());											
							НалогИсчисленныйЗаГод = ДанныеНДФЛ.НалогНерезидентаЗаГод;
						КонецЕсли;												
					КонецЕсли;
					
					Если НалогИсчисленный <> 0 тогда
						//Сообщить("Работник "+ ДанныеНДФЛ.ФизЛицо+ " период "+ДанныеНДФЛ.Период);
						//Сообщить("Перерасчет налога за предыдущие налоговые периоды. Заполните документ Перерасчет подоходного налога");
				//		НалогИсчисленный =0;
					КонецЕсли;
					
				ИначеЕсли ТекущийГод >= Год(ПериодРегистрации) тогда
					Если ((Месяц(ДанныеНДФЛ.период) >= Месяц(ПериодРегистрации)) И ТекущийГод = Год(ПериодРегистрации)) ИЛИ
						(ТекущийГод > Год(ПериодРегистрации)) тогда
						ВычетыПримененныеЛичный = ДанныеНДФЛ.ПримененныеВычетыЛичные;
						ВычетыПримененныеДетский = ДанныеНДФЛ.ПримененныеВычетыДетские;
						ВычетыПримененныеДетскийЛьгота = ДанныеНДФЛ.ПримененныеВычетыДетскиеЛьгота;
						ВычетыПримененныеДополнительный = ДанныеНДФЛ.ПримененныеВычетыДополнительные; 
						ВычетыПримененные312 = ДанныеНДФЛ.ПримененныеВычеты312;
						ВычетыПримененные311 = ДанныеНДФЛ.ПримененныеВычеты311;
						ОблагаемыйДоходЗаГод = ДанныеНДФЛ.ДоходЗаГод;
						Если ДанныеНДФЛ.Резидент тогда
							НалогИсчисленныйЗаГод = ПроведениеРасчетов.РассчитатьПрогрессивнуюШкалу(ТекущийГод, ДанныеНДФЛ.период, ДанныеНДФЛ.НалогРанееИсчисленный,
																		ОблагаемыйДоходЗаГод, 
																		ВычетыПримененныеЛичный,
																		ВычетыПримененныеДетский,
																		ВычетыПримененныеДетскийЛьгота,
																		ВычетыПримененныеДополнительный,
																		ВычетыПримененные312,
																		ВычетыПримененные311) - ДанныеНДФЛ.НалогРанееИсчисленный;
							НалогИсчисленный = ОбщегоНазначения.ОкруглитьПоВалюте(НалогИсчисленныйЗаГод - УжеИсчислили, Константы.ВалютаРегламентированногоУчета.Получить());
						Иначе
							НалогИсчисленный = ОбщегоНазначения.ОкруглитьПоВалюте(ДанныеНДФЛ.НалогНерезидентаЗаГод - ДанныеНДФЛ.НалогРанееИсчисленный, Константы.ВалютаРегламентированногоУчета.Получить());	
							НалогИсчисленныйЗаГод = ДанныеНДФЛ.НалогНерезидентаЗаГод;
						КонецЕсли;
					Иначе
						ВычетыПримененные312Пред = ДанныеНДФЛ.ПримененныеВычеты312;// + ДанныеНДФЛ.ПримененныеРанееВычеты312;
						ВычетыПримененные311Пред = ДанныеНДФЛ.ПримененныеВычеты311;// + ДанныеНДФЛ.ПримененныеранееВычеты311;
					КонецЕсли;
				КонецЕсли;
			
			Если 	НалогИсчисленный = 0 и НалогИсчисленныйЗаГод >= 0 и 
					ОблагаемыйДоходЗаГод = 0 и 
					ВычетыПримененныеЛичный = 0 и 
					ВычетыПримененныеДетский = 0 и 
					ВычетыПримененныеДополнительный = 0 и 
					ВычетыПримененные312 = 0 и 
					ВычетыПримененные311 = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если КомментироватьРасчет Тогда
				КомментарийМесяца = ОбщегоНазначения.КомментарийРасчета("Результат расчета за " + Формат(ДанныеНДФЛ.Период, "ДФ=ММММ") + ": " + НалогИсчисленный, КомментарийНДФЛ);
				Если ДанныеНДФЛ.Резидент Тогда
					ОбщегоНазначения.КомментарийРасчета("Статус: резидент РБ", КомментарийМесяца);
				Иначе
					ОбщегоНазначения.КомментарийРасчета("Статус: не является резидентом РБ", КомментарийМесяца,,, Перечисления.ВидыСообщений.ВажнаяИнформация);
				КонецЕсли;
				КомментарийДохода = ОбщегоНазначения.КомментарийРасчета("Доход за налоговый период, всего: " + ОблагаемыйДоходЗаГод, КомментарийМесяца,,,, Ложь);
				
				ДоходыПоВидамРасчетов = ДанныеНДФЛ.Выбрать();
				Пока ДоходыПоВидамРасчетов.Следующий() Цикл
					ОбщегоНазначения.КомментарийРасчета("По виду расчета " + ДоходыПоВидамРасчетов.ВидРасчетаНаименование + " " + ДоходыПоВидамРасчетов.ДоходЗаМесяцПоВидамРасчета, КомментарийДохода);
				КонецЦикла;
				КомментарийВычетовСтанд = ОбщегоНазначения.КомментарийРасчета("Примененные стандартные вычеты, всего: " + (ВычетыПримененныеЛичный + ВычетыПримененныеДетский + ВычетыПримененныеДетскийЛьгота + ВычетыПримененныеДополнительный), КомментарийМесяца);
				КомментарийВычетов = ОбщегоНазначения.КомментарийРасчета("Примененные имущественный/социальный вычеты, всего: " + (ВычетыПримененные312 + ВычетыПримененные311), КомментарийМесяца);
				Если ВычетыПримененныеЛичный <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Примененный личный вычет: " + ВычетыПримененныеЛичный, КомментарийВычетов);
				КонецЕсли;
				Если ВычетыПримененныеДетский <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Примененный вычет на детей: " + ВычетыПримененныеДетский, КомментарийВычетов);
				КонецЕсли;
				Если ВычетыПримененныеДетскийЛьгота <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Примененный вычет на детей-инвалидов: " + ВычетыПримененныеДетскийЛьгота, КомментарийВычетов);
				КонецЕсли;
				Если ВычетыПримененныеДополнительный <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Примененный вычет на детей-инвалидов: " + ВычетыПримененныеДополнительный, КомментарийВычетов);
				КонецЕсли;
				Если ВычетыПримененные312 <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Вычет имущественный: " + ВычетыПримененные312, КомментарийВычетов);
				КонецЕсли;
				Если ВычетыПримененные311 <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Вычет социальный: " + ВычетыПримененные311, КомментарийВычетов);
				КонецЕсли;
				КомментарийДохода = ОбщегоНазначения.КомментарийРасчета("Облагаемый доход за налоговый период, всего: " + ОблагаемыйДоходЗаГод, КомментарийМесяца,,,, Ложь);
				Если ДанныеНДФЛ.РанееНалогИсчисленный <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Исчисленный налог нарастающим итогом за год: " + ДанныеНДФЛ.РанееНалогИсчисленный, КомментарийМесяца);
				КонецЕсли;
				Если ДанныеНДФЛ.ВычетЗаМесяц <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Льготы по доходам: " + ДанныеНДФЛ.ВычетЗаМесяц, КомментарийМесяца);
				КонецЕсли;
			КонецЕсли;
			
			// Если передан набор записей - заполняем и его
			Если НаборЗаписей <> Неопределено Тогда
				// зарегистрируем в регистре
				Движение = НаборЗаписей.Добавить();

				// Свойства
				Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
				Движение.Период						= КонецМесяца(ПериодРегистрации);

				// Измерения
				Движение.Организация	 	   		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ФизЛицо	 	 	  		= ДанныеНДФЛ.ФизЛицо;
				Движение.МесяцНалоговогоПериода			= ДанныеНДФЛ.Период;
				Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;

				// Ресурсы
				Движение.Налог						= НалогИсчисленный;
				Движение.ПримененныйВычетЛичный		= ВычетыПримененныеЛичный;
				Движение.ПримененныйВычетНаДетей	= ВычетыПримененныеДетский;
				Движение.ПримененныйВычетНаДетейЛьгота = ВычетыПримененныеДетскийЛьгота;
				Движение.ПримененныйДополнительныйВычет = ВычетыПримененныеДополнительный;
				
				// Реквизиты 
				Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
				Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
				Движение.ИсчисленоИзЗарплаты	= Истина;	
			КонецЕсли;
			
			// Ниже - заполняем табличную часть документа
			Если Перерасчет Тогда
				СтруктураПоиска.Физлицо = ДанныеНДФЛ.ФизЛицо;
				СтруктураПоиска.МесяцНалоговогоПериода = ДанныеНДФЛ.Период;
				Строки = НДФЛ.НайтиСтроки(СтруктураПоиска);
				Если Строки.Количество() > 0 Тогда
					Строка = Строки[0];
				Иначе
					Строка = НДФЛ.Добавить();
				КонецЕсли;
			Иначе
				Если РасчетПоФизлицу Тогда
					Строка = НДФЛ.Вставить(ИндексСтрокиТаблицыНДФЛ);
					ИндексСтрокиТаблицыНДФЛ = ИндексСтрокиТаблицыНДФЛ+1;
				Иначе
					Строка = НДФЛ.Добавить();
				КонецЕсли;
			КонецЕсли;
			РаботникиДляРасчетаНДФЛ.Удалить(ДанныеНДФЛ.ФизЛицо);
				
			ЗаполнитьЗначенияСвойств(СтруктураПоискаПодразделения,ДанныеНДФЛ);
			ВыборкаПодразделений.Сбросить();
			Если ВыборкаПодразделений.НайтиСледующий(СтруктураПоискаПодразделения) Тогда
				Строка.ПодразделениеОрганизации	= ВыборкаПодразделений.ПодразделениеОрганизации;
			КонецЕсли;
			
			Строка.ФизЛицо 						= ДанныеНДФЛ.ФизЛицо;
			Строка.Налог   						= НалогИсчисленный;
			Строка.ПримененныйВычетЛичный		= ВычетыПримененныеЛичный;
			Строка.ПримененныйВычетНаДетей		= ВычетыПримененныеДетский;
			Строка.ПримененныйВычетНаДетейЛьгота		= ВычетыПримененныеДетскийЛьгота;
			Строка.ПримененныйВычетДополнительный	= ВычетыПримененныеДополнительный;
			Строка.ПримененныйВычетИмущественныйРасход		= ВычетыПримененные311-ВычетыПримененные311Пред;
			Строка.ПримененныйВычетСоциальныйСПроцентами		= ВычетыПримененные312-ВычетыПримененные312пред;
			Строка.МесяцНалоговогоПериода 		= ДанныеНДФЛ.Период;
			
			// Запомним суммы для следующей итерации
			УжеИсчислили = УжеИсчислили + НалогИсчисленный;
			УжеПрименилиЛичный = УжеПрименилиЛичный + ВычетыПримененныеЛичный;
			УжеПрименилиДетский = УжеПрименилиДетский + ВычетыПримененныеДетский;
			УжеПрименилиДетскийЛьгота = УжеПрименилиДетскийЛьгота + ВычетыПримененныеДетскийЛьгота;
			УжеПрименилиДополнительный = УжеПрименилиДополнительный + ВычетыПримененныеДополнительный;
			УжеПрименили312 = УжеПрименили312 + ВычетыПримененные312;
			УжеПрименили311 = УжеПрименили311 + ВычетыПримененные311;
		КонецЦикла;
		
	Иначе		
		Пока ДанныеНДФЛ.Следующий() Цикл
			
			Если ТекущееФизлицо <> ДанныеНДФЛ.ФизЛицо ИЛИ ТекущийГод <> Год(ДанныеНДФЛ.Период) Тогда
				УжеИсчислили = 0;
				// уже примененные вычеты
				УжеПрименилиЛичный = 0;
				УжеПрименилиДетский = 0;
				УжеПрименилиДетскийЛьгота = 0;
				УжеПрименилиДополнительный = 0;
				ВычетыПримененные312ЗаМесяц = 0;
				ВычетыПримененные311ЗаМесяц = 0;
				ВычетыПримененные640СтрахЗаМесяц = 0;
				//vvv эти переменные должны обнуляться только тогда, когда поменялось физ. лицо
				//условие на год использовать не будем,чтобы не пользоваться кнопкой "Заполнить остатками с предыдущего года" в документе
				// "Подтверждение прав на имущ. вычеты"
				Если ТекущееФизлицо <> ДанныеНДФЛ.ФизЛицо ТОгда
				//	
					УжеПрименили312 = 0;
					УжеПрименили311 = 0;
					УжеПрименили640Страх = 0;
				//vvv
				КонецЕсли;
			    //
				// текущие физлицо и год периода
				ТекущееФизлицо = ДанныеНДФЛ.ФизЛицо;
				ТекущийГод = Год(ДанныеНДФЛ.Период);
			КонецЕсли;
			
			//vvv надо обнулить, т.к. если в тек. месяце не было имущ. соц. вычетов, то он брался с пред. месяца
			ВычетыПримененные312ЗаМесяц = 0;
			ВычетыПримененные311ЗаМесяц = 0;
			ВычетыПримененные640СтрахЗаМесяц = 0;
			//
						//
			// первый проход
			//ВычетыПримененныеЛичный = ДанныеНДФЛ.ПримененныеВычетыЛичные - ДанныеНДФЛ.РанееПримененныеВычетыЛичные - УжеПрименилиЛичный;
			//ВычетыПримененныеДетский = ДанныеНДФЛ.ПримененныеВычетыДетские - ДанныеНДФЛ.РанееПримененныеВычетыДетские - УжеПрименилиДетский;
			//ВычетыПримененныеДетскийЛьгота = ДанныеНДФЛ.ПримененныеВычетыДетскиеЛьгота  - ДанныеНДФЛ.РанееПримененныеВычетыДетскиеЛьгота  - УжеПрименилиДетскийЛьгота;
			//ВычетыПримененныеДополнительный =  ДанныеНДФЛ.ПримененныеВычетыДополнительные - ДанныеНДФЛ.РанееПримененныеВычетыДополнительные - УжеПрименилиДополнительный;
			ВычетыПримененныеЛичный =  ДанныеНДФЛ.ПримененныеВычетыЛичныеЗаПериод - ДанныеНДФЛ.РанееПримененныеВычетыЛичныеЗаМесяц;
			ВычетыПримененныеДетский = ДанныеНДФЛ.ПримененныеВычетыДетскиеЗаПериод  - ДанныеНДФЛ.РанееПримененныеВычетыДетскиеЗаМесяц;
			ВычетыПримененныеДетскийЛьгота =  ДанныеНДФЛ.ПримененныеВычетыДетскиеЛьготаЗаПериод  - ДанныеНДФЛ.РанееПримененныеВычетыДетскиеЛьготаЗаМесяц;
			ВычетыПримененныеДополнительный =   ДанныеНДФЛ.ПримененныеВычетыДополнительныеЗаПериод - ДанныеНДФЛ.РанееПримененныеВычетыДополнительныеЗаМесяц;
			ДоходЗаПериодДляВычета = ДанныеНДФЛ.ДоходЗаПериод - (ДанныеНДФЛ.ПримененныеВычетыЛичныеЗаПериод + ДанныеНДФЛ.ПримененныеВычетыДетскиеЗаПериод  + ДанныеНДФЛ.ПримененныеВычетыДетскиеЛьготаЗаПериод + ДанныеНДФЛ.ПримененныеВычетыДополнительныеЗаПериод);
			
			//vvv комментируем, непонятно зачем она нужна
			//БазоваяВеличина = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(КонецМесяца(ДанныеНДФЛ.Период),Новый Структура("ВидПараметра",Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяВеличина)).Размер;
							
			Вычеты640СтрахОстаток = ДанныеНДФЛ.Вычет640СтрахОстаток - УжеПрименили640Страх;
            
			Если Год(ДанныеНДФЛ.Период) =  2013 Тогда 
				РазмерСтраховогоВычета = 10000000;
			ИначеЕсли Год(ДанныеНДФЛ.Период) =  2014 Тогда
				РазмерСтраховогоВычета = 12000000;
			ИначеЕсли Год(ДанныеНДФЛ.Период) =  2015 Тогда
				РазмерСтраховогоВычета = 16000000;
			ИначеЕсли Год(ДанныеНДФЛ.Период) >=  2016 Тогда
				РазмерСтраховогоВычета = 18130000;	
			КонецЕсли;
	              			
			Если УжеПрименили640Страх < РазмерСтраховогоВычета Тогда
				Если ДоходЗаПериодДляВычета > 0 тогда
					Вычеты640СтрахОстаток = Мин(РазмерСтраховогоВычета - УжеПрименили640Страх,Вычеты640СтрахОстаток);
					ВычетыПримененные640СтрахЗаМесяц = Мин(ДоходЗаПериодДляВычета, Вычеты640СтрахОстаток);
				Иначе
					ВычетыПримененные640СтрахЗаМесяц = 0;
				КонецЕсли;
			Иначе
				ВычетыПримененные640СтрахЗаМесяц = 0;	
			КонецЕсли;		

			Вычеты312Остаток = ДанныеНДФЛ.Вычет312Остаток - УжеПрименили312;
			Если ДоходЗаПериодДляВычета > 0 тогда
				Если  Вычеты312Остаток > ДоходЗаПериодДляВычета - ВычетыПримененные640СтрахЗаМесяц тогда
					ВычетыПримененные312ЗаМесяц = ДоходЗаПериодДляВычета - ВычетыПримененные640СтрахЗаМесяц;
				Иначе
					ВычетыПримененные312ЗаМесяц = Вычеты312Остаток;
				КонецЕсли;
			Иначе
				ВычетыПримененные312ЗаМесяц = 0;	
			КонецЕсли;
			
			Вычеты311Остаток = ДанныеНДФЛ.Вычет311Остаток - УжеПрименили311;
			Если ДоходЗаПериодДляВычета > 0 тогда
				Если  Вычеты311Остаток > ДоходЗаПериодДляВычета - ВычетыПримененные312ЗаМесяц - ВычетыПримененные640СтрахЗаМесяц тогда 
					ВычетыПримененные311ЗаМесяц = ДоходЗаПериодДляВычета - ВычетыПримененные312ЗаМесяц - ВычетыПримененные640СтрахЗаМесяц;
				Иначе
					ВычетыПримененные311ЗаМесяц = Вычеты311Остаток;
				КонецЕсли;
			Иначе
				ВычетыПримененные311ЗаМесяц = 0;	
			КонецЕсли;
			
			НалогИсчисленный = (ДанныеНДФЛ.ДоходЗаПериод - ДанныеНДФЛ.ПримененныеВычетыЛичныеЗаПериод - ДанныеНДФЛ.ПримененныеВычетыДетскиеЗаПериод - ДанныеНДФЛ.ПримененныеВычетыДетскиеЛьготаЗаПериод - ДанныеНДФЛ.ПримененныеВычетыДополнительныеЗаПериод - (ВычетыПримененные640СтрахЗаМесяц) - (ВычетыПримененные312ЗаМесяц) - (ВычетыПримененные311ЗаМесяц))*ОКР(Шкала[0].Налог/100,2,0);
			//vvv
			НалогИсчисленный = (ДанныеНДФЛ.ДоходЗаПериод - ДанныеНДФЛ.ПримененныеВычетыЛичныеЗаПериод - ДанныеНДФЛ.ПримененныеВычетыДетскиеЗаПериод - ДанныеНДФЛ.ПримененныеВычетыДетскиеЛьготаЗаПериод - ДанныеНДФЛ.ПримененныеВычетыДополнительныеЗаПериод - (ВычетыПримененные640СтрахЗаМесяц) - (ВычетыПримененные312ЗаМесяц) - (ВычетыПримененные311ЗаМесяц))*ОКР(ДанныеНДФЛ.Налог/100,2,0);
			//
			//vvv комментируем, налог за месяцы до деноминации будем округлять до 4 знаком, т.к. делили на 10 тыс
			//НалогИсчисленный = ОбщегоНазначения.ОкруглитьПоВалюте(НалогИсчисленный,Константы.ВалютаРегламентированногоУчета.Получить()) - ДанныеНДФЛ.НалогРанееИсчисленный;
			Если ДанныеНДФЛ.Период<ОбщегоНазначения.ПолучитьДатуДеноминации() ТОгда 
				НалогИсчисленный = Окр(НалогИсчисленный,4) - ДанныеНДФЛ.НалогРанееИсчисленный;
			Иначе
				НалогИсчисленный = ОбщегоНазначения.ОкруглитьПоВалюте(НалогИсчисленный,Константы.ВалютаРегламентированногоУчета.Получить()) - ДанныеНДФЛ.НалогРанееИсчисленный;
			КонецЕсли;			
			//
			
			//vvv при пересчете за пред. месяцы, когда были в старые деньги, может быть получиться сумма меньше копейки, поэтому округлим еще разок
			НалогИсчисленный = ОбщегоНазначения.ОкруглитьПоВалюте(НалогИсчисленный,Константы.ВалютаРегламентированногоУчета.Получить());
			//
			
			ВычетыПримененные640Страх = ВычетыПримененные640СтрахЗаМесяц - ДанныеНДФЛ.РанееПримененныеВычеты640СтрахЗаМесяц;
			ВычетыПримененные312 = ВычетыПримененные312ЗаМесяц - ДанныеНДФЛ.РанееПримененныеВычеты312ЗаМесяц;
			ВычетыПримененные311 = ВычетыПримененные311ЗаМесяц - ДанныеНДФЛ.РанееПримененныеВычеты311ЗаМесяц;
			
			// Запомним суммы для следующей итерации
			УжеПрименили312 = УжеПрименили312 + ВычетыПримененные312ЗаМесяц;
	        УжеПрименили311 = УжеПрименили311 + ВычетыПримененные311ЗаМесяц;
			УжеПрименили640Страх = УжеПрименили640Страх + ВычетыПримененные640СтрахЗаМесяц;
			
			Если	НалогИсчисленный = 0 и 
					ВычетыПримененныеЛичный = 0 и 
					ВычетыПримененныеДетский = 0 и 
					ВычетыПримененныеДетскийЛьгота = 0 и
					ВычетыПримененныеДополнительный = 0 и
					ВычетыПримененные640Страх = 0 и
					ВычетыПримененные312 = 0 и 
					ВычетыПримененные311 = 0 Тогда
				Продолжить;
			КонецЕсли;
			
					
			// Если передан набор записей - заполняем и его
			Если НаборЗаписей <> Неопределено Тогда
				// зарегистрируем в регистре
				Движение = НаборЗаписей.Добавить();

				// Свойства
				Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
				Движение.Период						= КонецМесяца(ПериодРегистрации);

				// Измерения
				Движение.Организация	 	   		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ФизЛицо	 	 	  		= ДанныеНДФЛ.ФизЛицо;
				Движение.МесяцНалоговогоПериода			= ДанныеНДФЛ.Период;
				Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;

				// Ресурсы
				Движение.Налог						= ОбщегоНазначения.ОкруглитьПоВалюте(НалогИсчисленный,Константы.ВалютаРегламентированногоУчета.Получить());
				Движение.ПримененныйВычетЛичный		= ВычетыПримененныеЛичный;
				Движение.ПримененныйВычетНаДетей	= ВычетыПримененныеДетский;
				Движение.ПримененныйВычетНаДетейЛьгота = ВычетыПримененныеДетскийЛьгота;
				Движение.ПримененныйДополнительныйВычет		= ВычетыПримененныеДополнительный;

				
				// Реквизиты 
				Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
				Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
				Движение.ИсчисленоИзЗарплаты	= Истина;	
			КонецЕсли;
			
			// Ниже - заполняем табличную часть документа
			Если Перерасчет Тогда
				СтруктураПоиска.Физлицо = ДанныеНДФЛ.ФизЛицо;
				СтруктураПоиска.МесяцНалоговогоПериода = ДанныеНДФЛ.Период;
				Строки = НДФЛ.НайтиСтроки(СтруктураПоиска);
				Если Строки.Количество() > 0 Тогда
					Строка = Строки[0];
				Иначе
					Строка = НДФЛ.Добавить();
				КонецЕсли;
			Иначе
				Если РасчетПоФизлицу Тогда
					Строка = НДФЛ.Вставить(ИндексСтрокиТаблицыНДФЛ);
					ИндексСтрокиТаблицыНДФЛ = ИндексСтрокиТаблицыНДФЛ+1;
				Иначе
					Строка = НДФЛ.Добавить();
				КонецЕсли;
			КонецЕсли;
			РаботникиДляРасчетаНДФЛ.Удалить(ДанныеНДФЛ.ФизЛицо);
				
			ЗаполнитьЗначенияСвойств(СтруктураПоискаПодразделения,ДанныеНДФЛ);
			ВыборкаПодразделений.Сбросить();
			Если ВыборкаПодразделений.НайтиСледующий(СтруктураПоискаПодразделения) Тогда
				Строка.ПодразделениеОрганизации	= ВыборкаПодразделений.ПодразделениеОрганизации;
			КонецЕсли;
			
			Строка.ФизЛицо 						= ДанныеНДФЛ.ФизЛицо;
			Строка.Налог   						= ОбщегоНазначения.ОкруглитьПоВалюте(НалогИсчисленный,Константы.ВалютаРегламентированногоУчета.Получить());
			Строка.ПримененныйВычетЛичный		= ВычетыПримененныеЛичный;
			Строка.ПримененныйВычетНаДетей		= ВычетыПримененныеДетский;
			Строка.ПримененныйВычетНаДетейЛьгота	= ВычетыПримененныеДетскийЛьгота;
			Строка.ПримененныйВычетДополнительный   = ВычетыПримененныеДополнительный;
			Строка.ПримененныйВычетИмущественныйРасход		= ВычетыПримененные311;
			Строка.ПримененныйВычетСоциальныйСПроцентами		= ВычетыПримененные312;
			Строка.ПримененныйВычетСтраховойРасход		= ВычетыПримененные640Страх;
			Строка.МесяцНалоговогоПериода 		= ДанныеНДФЛ.Период;
			
						
			Если КомментироватьРасчет Тогда
				
				Если ДанныеНДФЛ.Резидент Тогда
					ОбщегоНазначения.КомментарийРасчета("Статус: резидент РБ", КомментарийНДФЛ,,,, Ложь);
				Иначе
					ОбщегоНазначения.КомментарийРасчета("Статус: не является резидентом РБ", КомментарийНДФЛ,,, Перечисления.ВидыСообщений.ВажнаяИнформация);
				КонецЕсли;
				
				КомментарийМесяца = ОбщегоНазначения.КомментарийРасчета("Результат расчета за " + Формат(ДанныеНДФЛ.Период, "ДФ=ММММ") + ": " + ОбщегоНазначения.ОкруглитьПоВалюте(НалогИсчисленный,Константы.ВалютаРегламентированногоУчета.Получить()), КомментарийНДФЛ);
                				
				КомментарийДохода = ОбщегоНазначения.КомментарийРасчета("Доход за месяц, всего: " + ДанныеНДФЛ.ДоходЗаПериод, КомментарийМесяца,,,, Ложь);
				
				Если ВычетыПримененныеЛичный <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Примененный личный вычет: " +ВычетыПримененныеЛичный, КомментарийДохода);
				КонецЕсли;
				Если ВычетыПримененныеДетский <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Примененный вычет на детей: " + ВычетыПримененныеДетский, КомментарийДохода);
				КонецЕсли;
				Если ВычетыПримененныеДетскийЛьгота <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Примененный вычет на детей-инвалидов: " + ВычетыПримененныеДетскийЛьгота, КомментарийДохода);
				КонецЕсли;
				Если ВычетыПримененныеДополнительный <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Примененный вычет на детей-инвалидов: " + ВычетыПримененныеДополнительный, КомментарийДохода);
				КонецЕсли;
				Если ВычетыПримененные312 <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Вычет имущественный: " + ВычетыПримененные312,КомментарийДохода);
				КонецЕсли;
				Если ВычетыПримененные311 <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Вычет социальный: " + ВычетыПримененные311, КомментарийДохода);
				КонецЕсли;
				Если ВычетыПримененные640Страх <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Вычет социальный по суммам выплаченым по страховым взносам: " + ВычетыПримененные640Страх, КомментарийДохода);
				КонецЕсли;
						
				//	ДоходыПоВидамРасчетов = ДанныеНДФЛ.Выбрать();
				//	Пока ДоходыПоВидамРасчетов.Следующий() Цикл
				//		ОбщегоНазначения.КомментарийРасчета("По виду расчета " + ДоходыПоВидамРасчетов.ВидРасчетаНаименование + " " + ДоходыПоВидамРасчетов.ДоходЗаМесяцПоВидамРасчета, КомментарийДохода);
				//	КонецЦикла;
				//	КомментарийВычетовСтанд = ОбщегоНазначения.КомментарийРасчета("Примененные стандартные вычеты, всего: " + (ДанныеНДФЛ.ВычетыПримененныеЛичный +ДанныеНДФЛ. ВычетыПримененныеДетский + ДанныеНДФЛ.ВычетыПримененныеДетскийЛьгота + ДанныеНДФЛ.ВычетыПримененныеДополнительный), КомментарийМесяца);
				//	КомментарийВычетов = ОбщегоНазначения.КомментарийРасчета("Примененные имущественный/социальный вычеты, всего: " + (ДанныеНДФЛ.ВычетыПримененные312 + ДанныеНДФЛ.ВычетыПримененные311), КомментарийМесяца);
				
				//КомментарийДохода = ОбщегоНазначения.КомментарийРасчета("Облагаемый доход за налоговый период, всего: " + ДанныеНДФЛ.ДоходЗаГод, КомментарийМесяца,,,, Ложь);
				//Если ДанныеНДФЛ.РанееНалогИсчисленный <> 0 Тогда
				//	ОбщегоНазначения.КомментарийРасчета("Исчисленный налог нарастающим итогом за год: " + (ДанныеНДФЛ.НалогРанееИсчисленный + НалогИсчисленный), КомментарийМесяца);
				//КонецЕсли;
				//
				Если ДанныеНДФЛ.ВычетЗаМесяц <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Льготы по доходам: " + ДанныеНДФЛ.ВычетЗаМесяц, КомментарийДохода);
				КонецЕсли;
			КонецЕсли;
				
			
	
		КонецЦикла;
	КонецЕсли;
	
	// заполним НДФЛ
	Для Каждого Элемент Из РаботникиДляРасчетаНДФЛ Цикл
		НоваяСтрока = НДФЛ.Добавить();
		НоваяСтрока.ФизЛицо = Элемент.Ключ;
		НоваяСтрока.МесяцНалоговогоПериода = НачалоМесяца(ПериодРегистрации);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымНДФЛ()

// Закрытие строк - ввод значения ДатаОкончания для тех строк у которых не нулевое 
// значение Размер и удаление тех, у кого ВидРасчета - неопределено или ДатаНачала > даты закрытия
// Параметры:
//  ТЗ - таблица значений
//  НезакрытыеСтроки - массив незакрытых строк таблицы значений ТЗ
//  ДатаОкончания - дата, которую нужно проставить в качестве "закрывающей"
//
// Возвращаемое зеначение:
//  нет
//
Процедура ЗакрытьСтроки(ТЗ, НезакрытыеСтроки, ДатаОкончания)
	
	Для Каждого Строка Из НезакрытыеСтроки Цикл
		Если Строка.ВидРасчета = Неопределено ИЛИ Строка.ДатаНачала > ДатаОкончания Тогда
			ТЗ.Удалить(Строка);
		ИначеЕсли Строка.ДатаОкончания = '00010101' или Строка.ДатаОкончания > ДатаОкончания Тогда
			Строка.ДатаОкончания = ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	НезакрытыеСтроки.Очистить();
	
КонецПроцедуры // ЗакрытьСтроки()

// Найти строку в массиве строк по переданному виду расчета или по признаку "Основное"
// Найденная строка и ее индекс возвращаются через переданные параметры Строка и ИндексСтроки
// Параметры:
//  НезакрытыеСтроки - массив строк таблицы значений
//	ПоискОсновного - признак поиска основного начисления
//  ВидРасчета - вид расчета ссылка
//  Строка - в этот параметр будет возвращена строка, начальное значение - Неопределено
//  ИндексСтроки - в этот параметр будет возвращен индекс строки, начальное значение - Неопределено
//
// Возвращаемое зеначение:
//  нет
//
Процедура НайтиСредиНезакрытых(НезакрытыеСтроки, ПоискОсновного, ВидРасчета, Строки,Показатель1,НомерСтрокиТабеля,Автомобиль)
	Количество = НезакрытыеСтроки.Количество();
	Для Сч = 1 По Количество Цикл
		Индекс = Количество - Сч;
		Если (ПоискОсновного И НезакрытыеСтроки[Индекс].Основное) 
			ИЛИ (НЕ ПоискОсновного И НезакрытыеСтроки[Индекс].ВидРасчета = ВидРасчета) Тогда
			//vvv
			Если (ВидРасчета=ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовойВодители) или (ВидРасчета=ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяТарифнаяЧастьВодители) или (ВидРасчета=ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовойБезВыезда) или (ВидРасчета=ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовойРемонт) или (ВидРасчета=ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовойРемонтПлановый) Тогда 
				//сравниваем еще часовую ставку
				Если (НезакрытыеСтроки[Индекс].Показатель1=Показатель1) и ((НезакрытыеСтроки[Индекс].НомерСтрокиТабеля=НомерСтрокиТабеля)) Тогда
					Строки.Добавить(НезакрытыеСтроки[Индекс]);
				КонецЕсли;
			ИначеЕсли ВидРасчета.СпособРасчета=Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоРазряда Тогда
				//сравним процент доплаты
				Если (НезакрытыеСтроки[Индекс].Показатель1=Показатель1) ТОгда
					Строки.Добавить(НезакрытыеСтроки[Индекс]);
				КонецЕсли;	
			ИначеЕсли ВидРасчета.УчитыватьАвтомобиль И Автомобиль<>Неопределено ТОгда
				Если (НезакрытыеСтроки[Индекс].Автомобиль=Автомобиль) ТОгда
					Строки.Добавить(НезакрытыеСтроки[Индекс]);
				КонецЕсли;	
			Иначе
			//
			Строки.Добавить(НезакрытыеСтроки[Индекс]);
			//vvv
			КонецЕсли;
		    //
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // НайтиСредиНезакрытых()

// Нйти строку в массиве строк по переданному виду расчета и основанию (ссылка на документ)
// Найденная строка и ее индекс возвращаются через переданные параметры Строка и ИндексСтроки
// Параметры:
//  НезакрытыеСтроки - массив строк таблицы значений
//  ВидРасчета - вид расчета ссылка
//  ДокументОснование - документ ссылка
//  Строка - в этот параметр будет возвращена строка, начальное значение - Неопределено
//  ИндексСтроки - в этот параметр будет возвращен индекс строки, начальное значение - Неопределено
//
// Возвращаемое зеначение:
//  нет
//
Процедура НайтиСредиНезакрытыхУдержаний(НезакрытыеСтроки, ВидРасчета, ДокументОснование, Получатель, ПорядокИсчисленияИздержек, Строка, ИндексСтроки)
	
	Для Индекс = 0 По НезакрытыеСтроки.ВГраница() Цикл
		Если НезакрытыеСтроки[Индекс].ВидРасчета = ВидРасчета Тогда
			СтрокаНайдена = Ложь;
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				СтрокаНайдена = НезакрытыеСтроки[Индекс].ДокументОснование = ДокументОснование
			Иначе	
				СтрокаНайдена = НезакрытыеСтроки[Индекс].Получатель = Получатель И НезакрытыеСтроки[Индекс].ПорядокИсчисленияИздержек = ПорядокИсчисленияИздержек
			КонецЕсли;
			Если СтрокаНайдена Тогда
				ИндексСтроки = Индекс;
				Строка = НезакрытыеСтроки[Индекс];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // НайтиСредиНезакрытыхУдержаний()

// Добавляет строку сторно начислений в движения и табличную часть документа
Процедура ДобавитьСтрокуСторно(Движения, ТабличнаяЧасть, Строка)

	СтрокаСохраняемыхРеквизитов = "Сотрудник,ФизЛицо,Организация,ВидРасчета,ДатаНачалаСобытия,ВариантОбработкиЗаписиПриОтраженииВРеглУчете," 
									+ "ОбособленноеПодразделение,ПодразделениеОрганизации,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,ВидУчетаВремени,ГрафикРаботы,ГрафикРаботыНорма,"
									+ "ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,СторнируемыйДокумент";
	// новая запись движений
	Движение = Движения.Добавить();
	
	ЗаполнитьЗначенияСвойств(Движение,Строка,СтрокаСохраняемыхРеквизитов);
	
	// Свойства
	Движение.ПериодРегистрации				= Строка.ПериодРегистрацииСторно;
	Движение.ПериодДействияНачало			= Строка.ПериодДействияНачалоСторно;
	Движение.ПериодДействияКонец			= Строка.ПериодДействияКонецСторно;
	Движение.БазовыйПериодНачало			= Строка.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец				= Строка.БазовыйПериодКонец;
	Движение.Сторно							= Истина;
	Движение.Авторасчет						= Истина;

	СтрокаСохраняемыхРеквизитов = "Сотрудник,ФизЛицо,ВидРасчета,ДатаНачалаСобытия," 
									+ "ПодразделениеОрганизации,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,"
									+ "ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,СторнируемыйДокумент";
	// новая строка табличной части
	СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,Строка,СтрокаСохраняемыхРеквизитов);
	
	СтрокаТабличнойЧасти.ДатаНачала					= Строка.ПериодДействияНачалоСторно;
	СтрокаТабличнойЧасти.ДатаОкончания				= Строка.ПериодДействияКонецСторно;

	СтрокаТабличнойЧасти.Сторно						= Истина;
	СтрокаТабличнойЧасти.Авторасчет					= Истина; 
	
КонецПроцедуры

#Если Клиент Тогда
	
// Расчерчивает разделы расчетного листка линиями
//
// Параметры
//  ВременныйТабличныйДокумент - Табличный документ с уже выведенными строками расчетного листка
//  СтрокПропустить - целое число уже обработанных ранее строк т.д.
//  СтрокРасчертить - целое число строк т.д., которым требуется указать границы
//
Процедура РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент,СтрокПропустить,СтрокРасчертить)

	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	Для Сч = 0 По СтрокРасчертить - 1 Цикл
		
		НомерСтроки = СтрокПропустить + Сч;
		
		Для Ссч = 2 По 17 Цикл
			
			Если Ссч = 4 ИЛИ Ссч = 10 ИЛИ Ссч = 13 ИЛИ Ссч = 15 Тогда
				Продолжить
			КонецЕсли; 
			
			ВременныйТабличныйДокумент.Область(НомерСтроки, Ссч).ГраницаСлева = Линия;
			
		КонецЦикла;
		
		ВременныйТабличныйДокумент.Область(НомерСтроки, 15).ГраницаСправа = Линия;
		ВременныйТабличныйДокумент.Область(НомерСтроки, 2, НомерСтроки, 15).ГраницаСнизу = Линия;
		
	КонецЦикла;
	
КонецПроцедуры // РасчертитьРасчетныйЛисток()

#КонецЕсли

//vvv
Функция ПолучитьДоплатыЗаНочныеВечерние()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|				ГДЕ
	|					ОсновныеНачисленияОрганизаций.АвтоНачислятьПоТабелю
	|					И ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АвтоНачислятьПоТабелюНочные,
	|	ВЫБОР
	|		КОГДА 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|				ГДЕ
	|					ОсновныеНачисленияОрганизаций.АвтоНачислятьПоТабелю
	|					И ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АвтоНачислятьПоТабелюВечерние
	|ПОМЕСТИТЬ ПризнакиАвтоначисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени
	|ПОМЕСТИТЬ НачисленияСПризнаком
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.АвтоНачислятьПоТабелю
	|	И ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПризнакиАвтоначисления.АвтоНачислятьПоТабелюНочные
	|			ТОГДА НочныеНачисленияСПризнаком.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы)
	|	КОНЕЦ КАК ДоплатаЗаНочныеЧасы,
	|	ВЫБОР
	|		КОГДА ПризнакиАвтоначисления.АвтоНачислятьПоТабелюВечерние
	|			ТОГДА ВечерниеНачисленияСПризнаком.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы)
	|	КОНЕЦ КАК ДоплатаЗаВечерниеЧасы,
	|	ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.ПроцентДоплатыЗаРаботуВНочноеВремя, 20) КАК ПроцентДоплатыЗаНочныеЧасы,
	|	ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.ПроцентДоплатыЗаРаботуВВечернееВремя, 10) КАК ПроцентДоплатыЗаВечерниеЧасы
	|ИЗ
	|	ПризнакиАвтоначисления КАК ПризнакиАвтоначисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачисленияСПризнаком КАК НочныеНачисленияСПризнаком
	|		ПО (НочныеНачисленияСПризнаком.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы))
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачисленияСПризнаком КАК ВечерниеНачисленияСПризнаком
	|		ПО (ВечерниеНачисленияСПризнаком.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций КАК УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций
	|		ПО (УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Организация = &Организация)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

//vvv
Функция ПолучитьВидРасчетаЕжемесячнаяПремия()
	
	Запрос=Новый Запрос;
	
	Запрос.Текст=
	
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка КАК Премия
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ЕжемесячнаяПремия)
	|	И ОсновныеНачисленияОрганизаций.АвтоНачислятьПоТабелю";
	
	Выборка=Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

//vvv
Функция ПолучитьВидРасчетаВредность()
	
	Запрос=Новый Запрос;
	
	Запрос.Текст=
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОсновныеНачисленияОрганизаций.Ссылка КАК Вредность
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоРазряда)";
	
	Выборка=Запрос.Выполнить().Выбрать();	
	Выборка.Следующий();
	
	Возврат Выборка.Вредность;
	
КонецФункции
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПерваяПоловинаТекущегоМесяца" , Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникамОрганизаций.Дата,
	|	НачислениеЗарплатыРаботникамОрганизаций.ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплатыРаботникамОрганизаций.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА НачислениеЗарплатыРаботникамОрганизаций.Организация
	|		ИНАЧЕ НачислениеЗарплатыРаботникамОрганизаций.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	НачислениеЗарплатыРаботникамОрганизаций.Организация КАК ОбособленноеПодразделение,
	|	НачислениеЗарплатыРаботникамОрганизаций.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	НачислениеЗарплатыРаботникамОрганизаций.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	НачислениеЗарплатыРаботникамОрганизаций.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплатыРаботникамОрганизаций.ПериодНачисления = &ПерваяПоловинаТекущегоМесяца
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЗарплатаЗаПервуюПоловинуМесяца,
	//vvv
	|	НачислениеЗарплатыРаботникамОрганизаций.СпособОтраженияВБухучете,
	//
	|	СписокНачисления.КоличествоСтрок КАК НачисленияКоличествоСтрок
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций КАК НачислениеЗарплатыРаботникамОрганизаций,
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(Начисления.НомерСтроки) КАК КоличествоСтрок
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
	|	ГДЕ
	|		Начисления.Ссылка = &ДокументСсылка) КАК СписокНачисления
	|ГДЕ
	|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Физлицо = Неопределено)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);

	Запрос.УстановитьПараметр("парамФизлицо", Физлицо);
	Запрос.УстановитьПараметр("парамНеОтбиратьФизлицо", Физлицо = Неопределено);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиДокумента.Ссылка,
	|	СтрокиДокумента.НомерСтроки,
	|	СтрокиДокумента.Сотрудник КАК Сотрудник,
	|	СтрокиДокумента.Физлицо,
	|	СтрокиДокумента.ВидРасчета,
	|	НАЧАЛОПЕРИОДА(СтрокиДокумента.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
	|	СтрокиДокумента.ДатаНачала,
	|	СтрокиДокумента.ДатаОкончания,
	|	СтрокиДокумента.Показатель1,
	|	СтрокиДокумента.Показатель2,
	|	СтрокиДокумента.Показатель3,
	|	СтрокиДокумента.Показатель4,
	|	СтрокиДокумента.Показатель5,
	|	СтрокиДокумента.Показатель6,
	|	СтрокиДокумента.Результат,
	|	СтрокиДокумента.ПодразделениеОрганизации,
	|	СтрокиДокумента.ОтработаноДней,
	|	СтрокиДокумента.ОтработаноЧасов,
	|	СтрокиДокумента.ОтработаноДнейПоПятидневке,
	|	СтрокиДокумента.НормаДней,
	|	СтрокиДокумента.НормаЧасов,
	|	СтрокиДокумента.НормаДнейПоПятидневке,
	|	СтрокиДокумента.ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиДокумента.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	СтрокиДокумента.ДатаНачалаСобытия,
	|	СтрокиДокумента.Сторно,
	//vvv
	|	СтрокиДокумента.ППС,
	|	СтрокиДокумента.СпособОтраженияВБухучете,
	|	СтрокиДокумента.Резерв,
	|	СтрокиДокумента.ПроцентРезерва,
	|	СтрокиДокумента.ИзРезерва,
	|	СтрокиДокумента.СуммаРезерва,
	|	СтрокиДокумента.ТабельУчетаОрганизации,
	|	СтрокиДокумента.Автомобиль,
	|	СтрокиДокумента.НомерСтрокиТабеля,
	|	СтрокиДокумента.Должность,
	//
	|	СтрокиДокумента.Авторасчет,
	|	СтрокиДокумента.ОплачиватьЧасов,
	|	СтрокиДокумента.ОплаченоДнейЧасов,
	|	СтрокиДокумента.ОтработаноЧасовПоПятидневке,
	|	СтрокиДокумента.НормаЧасовПоПятидневке,
	|	СтрокиДокумента.СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТСтрокиНачислений
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК СтрокиДокумента
	|ГДЕ
	|	СтрокиДокумента.Ссылка = &ДокументСсылка
	|	И (&парамНеОтбиратьФизлицо
	|			ИЛИ СтрокиДокумента.Сотрудник.Физлицо = &парамФизлицо)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();
	
	// ВТГрафикиСотрудников
	//		таблица содержит номера строк документа с данными о графике указанного
	//		в этой строке сотрудника из рег-ра сведений РаботникиОрганизации
	// 
	//	Поля:
	//		НомерСтроки
	//      ГрафикРаботы
	//      ГрафикПолногоРабочегоВремени
	//      СуммированныйУчетРабочегоВремени
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоследниеДаты.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	//vvv
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикСотрудника,
	//
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикПолногоРабочегоВремени,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|	КОНЕЦ КАК СуммированныйУчетРабочегоВремени
	|ПОМЕСТИТЬ ВТГрафикиСотрудников
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|		СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|		СтрокиНачисления.Сотрудник КАК Сотрудник,
	|		СтрокиНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия
	|	ИЗ
	|		ВТСтрокиНачислений КАК СтрокиНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ПО СтрокиНачисления.ДатаНачалаСобытия >= РаботникиОрганизации.Период
	|				И СтрокиНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СтрокиНачисления.НомерСтроки,
	|		СтрокиНачисления.Сотрудник,
	|		СтрокиНачисления.ДатаНачалаСобытия) КАК ПоследниеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ПоследниеДаты.МаксПериод = РаботникиОрганизации.Период
	|			И ПоследниеДаты.Сотрудник = РаботникиОрганизации.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	// ВТДанныеИндивидуальныхГрафиковИТабелей
	//		таблица содержит номера строк документа с сотрудниками, для которых введены 
	//		подробные документы использования времени: инд.графики и/или табели
	// 
	//	Поля:
	//		НомерСтроки
	//      План
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	ГрафикиРаботыПоВидамВремени.План КАК План
	|ПОМЕСТИТЬ ВТДанныеИндивидуальныхГрафиковИТабелей
	|ИЗ
	|	ВТСтрокиНачислений КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СтрокиНачисления.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И СтрокиНачисления.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	План";
	Запрос.Выполнить();
	
	// СводныеИндивидуальныеГрафикиРаботы
	//		таблица содержит номера строк документа с сотрудниками, для которых введены сводные 
	//		данные об их графике
	// 
	//	Поля:
	//		НомерСтроки
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокРаботников.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафикиРаботы
	|ИЗ
	|	ВТСтрокиНачислений КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО СписокРаботников.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И СписокРаботников.ПериодДействия = СводныеИндивидуальныеГрафики.Месяц
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	

	
	// Основной запрос
	//		Сотрудники, для которых введены сводные данные об их графике
	// 
	//	Поля:
	//		НомерСтроки
	// 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиНачисления.Сотрудник КАК Сотрудник,
	|	СтрокиНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	СтрокиНачисления.ВидРасчета КАК ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	СтрокиНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиНачисления.ВидРасчета.ВидВремени КАК ВидВремени,
	|	СтрокиНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА СтрокиНачисления.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(СтрокиНачисления.ДатаНачала, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА СтрокиНачисления.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(СтрокиНачисления.ДатаОкончания, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	СтрокиНачисления.Показатель1 КАК Показатель1,
	|	СтрокиНачисления.Показатель2 КАК Показатель2,
	|	СтрокиНачисления.Показатель3 КАК Показатель3,
	|	СтрокиНачисления.Показатель4 КАК Показатель4,
	|	СтрокиНачисления.Показатель5 КАК Показатель5,
	|	СтрокиНачисления.Показатель6 КАК Показатель6,
	|	СтрокиНачисления.Результат КАК Результат,
	|	СтрокиНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	СтрокиНачисления.Сторно КАК Сторно,
	|	СтрокиНачисления.ОтработаноДней КАК ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	СтрокиНачисления.ОтработаноДнейПоПятидневке КАК ОтработаноДнейПоПятидневке,
	|	СтрокиНачисления.ОтработаноЧасовПоПятидневке КАК ОтработаноЧасовПоПятидневке,
	|	СтрокиНачисления.НормаДней КАК НормаДней,
	|	СтрокиНачисления.НормаЧасов КАК НормаЧасов,
	|	СтрокиНачисления.НормаДнейПоПятидневке КАК НормаДнейПоПятидневке,
	|	СтрокиНачисления.НормаЧасовПоПятидневке КАК НормаЧасовПоПятидневке,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	СтрокиНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	//vvv
	|	СтрокиНачисления.ППС,
	|	СтрокиНачисления.СпособОтраженияВБухучете,
	|	СтрокиНачисления.ПроцентРезерва,
	|	СтрокиНачисления.ИзРезерва,
	|	СтрокиНачисления.СуммаРезерва,
	|	СтрокиНачисления.Резерв,
	|	СтрокиНачисления.ТабельУчетаОрганизации,
	|	СтрокиНачисления.Автомобиль,
	|	СтрокиНачисления.Должность,
	|	СтрокиНачисления.НомерСтрокиТабеля,
	//
	|	СтрокиНачисления.Авторасчет КАК Авторасчет,
	|	СтрокиНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
	|	ВЫБОР
	|		КОГДА ГрафикРаботыПоСотруднику.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА РаботникиОрганизации.ГрафикРаботы
	|		ИНАЧЕ СтрокиНачисления.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	//vvv
	|	РаботникиОрганизации.ГрафикРаботы КАК ГрафикСотрудника,	
	//
	|	ВЫБОР
			// если введен табель, но нет индивидуального графика, то норму времени надо считать по данным ""общего графика""
	|		КОГДА ТабелиУчетаВремениПоСотруднику.НомерСтроки ЕСТЬ НЕ NULL 
	|				И ИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ NULL 
	|				И СводныеИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА РаботникиОрганизации.ГрафикРаботы
			// если у работника сокращенное рабочее время, а норма времени определяется по полному графику
			// и введен индивидуальный график, то норму времени надо считать по-прежнему по данным ""общего графика""
	|		КОГДА РаботникиОрганизации.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|				И (ИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ НЕ NULL 
	|					ИЛИ СводныеИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ НЕ NULL )
	|			ТОГДА РаботникиОрганизации.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикРаботыНорма,
	|	ЕСТЬNULL(РаботникиОрганизации.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.ОплачиватьЧасов,
	|	СтрокиНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяПочасовымОтклонением,
	//vvv комментируем, при отражении в учете будем пропускать записи, для которых отражение задается в сдельном наряде
	//|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ПустаяСсылка) КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете,
	|	ВЫБОР КОГДА (НЕ ОтражениеВНаряде.Сотрудник ЕСТЬ NULL) И (СтрокиНачисления.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавкеВодителей),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйПриработок),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйПриработокВодителей))) ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.НеОбрабатывать) ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ПустаяСсылка) КОНЕЦ КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете,
	//
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент
	|ИЗ
	|	ВТСтрокиНачислений КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСотрудников КАК РаботникиОрганизации
	|		ПО СтрокиНачисления.НомерСтроки = РаботникиОрганизации.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК СтрокиНачисления) КАК ГрафикРаботыПоСотруднику
	|		ПО СтрокиНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК СтрокиНачисления
	|		ГДЕ
	|			(НЕ СтрокиНачисления.План)) КАК ТабелиУчетаВремениПоСотруднику
	|		ПО СтрокиНачисления.НомерСтроки = ТабелиУчетаВремениПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК СтрокиНачисления
	|		ГДЕ
	|			СтрокиНачисления.План) КАК ИндивидуальныеГрафикиРаботы
	|		ПО СтрокиНачисления.НомерСтроки = ИндивидуальныеГрафикиРаботы.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеИндивидуальныеГрафикиРаботы КАК СводныеИндивидуальныеГрафикиРаботы
	|		ПО СтрокиНачисления.НомерСтроки = СводныеИндивидуальныеГрафикиРаботы.НомерСтроки
	//vvv
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				БУОсновныеНачисления.ПериодРегистрации КАК ПериодРегистрации,
	|				БУОсновныеНачисления.Сотрудник КАК Сотрудник
	|			ИЗ
	|				РегистрРасчета.БУОсновныеНачисления КАК БУОсновныеНачисления
	|			ГДЕ
	|				БУОсновныеНачисления.Регистратор ССЫЛКА Документ.СдельныйНаряд) КАК ОтражениеВНаряде
	|		ПО СтрокиНачисления.Сотрудник = ОтражениеВНаряде.Сотрудник
	|		И ОтражениеВНаряде.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаНачала,МЕСЯЦ) И КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаНачала,МЕСЯЦ)
	//
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

// Формирует запрос по таблице "ДополнительныеНачисления" документа
//
// Параметры: 
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоДопНачисления(ВыборкаПоШапкеДокумента, Физлицо = Неопределено)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ДатаНалоговогоПериода", КонецГода(ПериодРегистрации));
	Запрос.УстановитьПараметр("НеОтбиратьФизлиц", Физлицо = Неопределено);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.КодВычета КАК КодВычета,
	|	СтрокиНачисления.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	СтрокиНачисления.СуммаВычета,
	//|	ВЫБОР
	//|		КОГДА СтрокиНачисления.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.МатпомощьПриРожденииРебенка)
	//|			ТОГДА ВЫБОР
	//|					КОГДА СтрокиНачисления.Результат < СтрокиНачисления.СуммаВычета * ВычетПоМатпомощиПриРождении.НормативЗатрат
	//|						ТОГДА СтрокиНачисления.Результат
	//|					ИНАЧЕ СтрокиНачисления.СуммаВычета * ВычетПоМатпомощиПриРождении.НормативЗатрат
	//|				КОНЕЦ
	//|		КОГДА СтрокиНачисления.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код404)
	//|			ТОГДА СтрокиНачисления.СуммаВычета
	//|		КОГДА СтрокиНачисления.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код405)
	//|			ТОГДА СтрокиНачисления.СуммаВычета
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК СкидкаПриНалогообложении,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.Сторно,
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	СтрокиНачисления.ДатаНачала КАК БазовыйПериодНачало,
	|	СтрокиНачисления.ДатаОкончания КАК БазовыйПериодКонец,
	|	СтрокиНачисления.ВидРасчета.ЧислоМесяцев КАК ЧислоМесяцев,
	//vvv
	|	СтрокиНачисления.ППС,
	|	СтрокиНачисления.СпособОтраженияВБухучете,
	|	СтрокиНачисления.Резерв,
	|	СтрокиНачисления.ПроцентРезерва,
	|	СтрокиНачисления.ИзРезерва,
	|	СтрокиНачисления.СуммаРезерва,
	|	СтрокиНачисления.Должность,
	//
	|	СтрокиНачисления.Авторасчет,
	|	СтрокиНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	СтрокиНачисления.ДатаНачалаСобытия,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= СтрокиНачисления.ДатаНачалаСобытия
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|			ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|		КОНЕЦ, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК СтрокиНачисления
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО (РаботникиОрганизации.Период <= СтрокиНачисления.ДатаНачалаСобытия)
	|					И СтрокиНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ГДЕ
	|			СтрокиНачисления.Ссылка = &ДокументСсылка
	|			И (&НеОтбиратьФизлиц
	|					ИЛИ СтрокиНачисления.Сотрудник.Физлицо = &Физлицо)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтрокиНачисления.НомерСтроки) КАК ПоследниеДаты
	|		ПО СтрокиНачисления.НомерСтроки = ПоследниеДаты.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО (РаботникиОрганизации.Период = ПоследниеДаты.МаксПериод)
	|			И СтрокиНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛВычетыПоДоходам.СрезПоследних(&ДатаНалоговогоПериода, КодДохода = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.МатпомощьПриРожденииРебенка)) КАК ВычетПоМатпомощиПриРождении
	//|		ПО СтрокиНачисления.ВидРасчета.КодДоходаНДФЛ = ВычетПоМатпомощиПриРождении.КодДохода
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка
	|	И (&НеОтбиратьФизлиц
	|			ИЛИ СтрокиНачисления.Сотрудник.Физлицо = &Физлицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоДопНачисления()

// Формирует запрос по таблице "ДополнительныеНачисления" документа
//
// Параметры: 
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоДоговорам(ВыборкаПоШапкеДокумента, Физлицо = Неопределено)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПериодРегистрации));
	Если НЕ (Физлицо = Неопределено) Тогда
		Запрос.УстановитьПараметр("Физлицо", Физлицо);
		УсловиеНаФизлицоТекст = " И СтрокиНачисления.Сотрудник.Физлицо = &Физлицо ";
	Иначе
		УсловиеНаФизлицоТекст="";
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНачисления.ДокументОснование,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.КодВычета КАК КодВычета,
	|	СтрокиНачисления.СуммаВычета КАК СкидкаПриНалогообложении,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиНачисления.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	СтрокиНачисления.Размер,
	|	СтрокиНачисления.Результат КАК Результат,
	//vvv 
	//|	СтрокиНачисления.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ПодразделениеОрганизации=ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) ТОГДА СтрокиНачисления.ДокументОснование.ПодразделениеОрганизации
	|		ИНАЧЕ СтрокиНачисления.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	//
	|	СтрокиНачисления.Сторно,
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	СтрокиНачисления.ДатаНачала КАК БазовыйПериодНачало,
	|	СтрокиНачисления.ДатаОкончания КАК БазовыйПериодКонец,
	|	0 КАК ЧислоМесяцев,
	|	ЛОЖЬ КАК Авторасчет,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК СтрокиНачисления
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка" + УсловиеНаФизлицоТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоДоговорам()

// Формирует запрос по таблице "Удержания" документа
//
// Параметры: 
//	нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоУдержания(ВыборкаПоШапкеДокумента, Физлицо = Неопределено)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",				Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации",			ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериодаРегистрации",	КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПриемНаРаботу",				Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("ЗаВесьПериод",				Перечисления.ПорядокРасчетаБазы.ЗаВесьПериод);
	Запрос.УстановитьПараметр("ПриПриемеНаРаботу",			Перечисления.ПорядокРасчетаБазы.ПриПриемеНаРаботу);
	Запрос.УстановитьПараметр("ПриУвольнении",				Перечисления.ПорядокРасчетаБазы.ПриУвольнении);
	
	УсловиеНаФизлицоТекст="";
	Если Физлицо <> Неопределено Тогда
		Запрос.УстановитьПараметр("парамФизлицо", Физлицо);
		УсловиеНаФизлицоТекст = Символы.ПС + " И СтрокиУдержания.Физлицо = &парамФизлицо ";	
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ГоловнаяОрганизация КАК Организация,
	|	СтрокиУдержания.ФизЛицо,
	|	СтрокиУдержания.ВидРасчета,
	|	СтрокиУдержания.ДатаНачала,
	|	СтрокиУдержания.ДатаОкончания,
	|	СтрокиУдержания.ДатаНачала КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокиУдержания.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА СтрокиУдержания.ДатаОкончания
	|		ИНАЧЕ КОНЕЦПЕРИОДА(СтрокиУдержания.ДатаОкончания, ДЕНЬ)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокиУдержания.НомерСтроки КАК НомерСтроки,
	|	СтрокиУдержания.ДокументОснование,
	|	СтрокиУдержания.Показатель1,
	|	СтрокиУдержания.Показатель2,
	|	СтрокиУдержания.Показатель3,
	|	СтрокиУдержания.Показатель4,
	|	СтрокиУдержания.Показатель5,
	|	СтрокиУдержания.Показатель6,
	|	СтрокиУдержания.Результат,
	|	СтрокиУдержания.Сторно,
	|	СтрокиУдержания.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиУдержания.Авторасчет КАК Авторасчет,
	|	СтрокиУдержания.ДополнительныеДанные КАК ДополнительныеДанные,
	|	СтрокиУдержания.ПорядокИсчисленияИздержек КАК ПорядокИсчисленияИздержек,
	|	СтрокиУдержания.Получатель КАК Получатель,
	|	СтрокиУдержания.ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиУдержания.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	СтрокиУдержания.ДатаНачалаСобытия";
	Если ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца Тогда
		Запрос.Текст = Запрос.Текст + ",
	|	&ПриУвольнении КАК ПорядокРасчетаБазы";
	ИначеЕсли ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ВтораяПоловинаТекущегоМесяца Тогда	
		Запрос.Текст = Запрос.Текст + ",
	|	&ПриПриемеНаРаботу КАК ПорядокРасчетаБазы";
	Иначе	
		Запрос.Текст = Запрос.Текст + ",
	|	ВЫБОР
	|		КОГДА СтрокиУдержания.ДатаНачала > &ПериодРегистрации
	|				И ПринятыеВТекущемМесяце.Период ЕСТЬ НЕ NULL 
	|			ТОГДА &ПриПриемеНаРаботу
	|		КОГДА СтрокиУдержания.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА &ЗаВесьПериод
	|		КОГДА КОНЕЦПЕРИОДА(СтрокиУдержания.ДатаОкончания, ДЕНЬ) < &КонецПериодаРегистрации
	|				И УволенныеВТекущемМесяце.Период ЕСТЬ НЕ NULL 
	|			ТОГДА &ПриУвольнении
	|		ИНАЧЕ &ЗаВесьПериод
	|	КОНЕЦ КАК ПорядокРасчетаБазы";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК СтрокиУдержания";
	Если ПериодНачисления <> Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца 
		И ПериодНачисления <> Перечисления.ПериодНачисленияЗарплаты.ВтораяПоловинаТекущегоМесяца Тогда	
		Запрос.Текст = Запрос.Текст + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СтрокиУдержания.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|		ИЗ
	|			Документ.НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК СтрокиУдержания
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|				ПО СтрокиУдержания.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
	|		ГДЕ
	|			СтрокиУдержания.Ссылка = &ДокументСсылка " + УсловиеНаФизлицоТекст + "
	|			И СтрокиУдержания.ДатаНачала > &ПериодРегистрации
	|			И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
	|			И РаботникиОрганизаций.Период > &ПериодРегистрации
	|			И РаботникиОрганизаций.Период <= &КонецПериодаРегистрации
	|			И РаботникиОрганизаций.ПричинаИзмененияСостояния = &ПриемНаРаботу
	|			И (РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтрокиУдержания.НомерСтроки) КАК ПринятыеВТекущемМесяце
	|		ПО СтрокиУдержания.НомерСтроки = ПринятыеВТекущемМесяце.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			УволенныеВТекущемМесяцеОбъединение.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(УволенныеВТекущемМесяцеОбъединение.Период) КАК Период
    |       ИЗ (ВЫБРАТЬ
	|			СтрокиУдержания.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(РаботникиОрганизаций.Период) КАК Период
	|		ИЗ
	|			Документ.НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК СтрокиУдержания
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|				ПО СтрокиУдержания.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
	|		ГДЕ
	|			СтрокиУдержания.Ссылка = &ДокументСсылка " + УсловиеНаФизлицоТекст + "
	|			И СтрокиУдержания.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			И СтрокиУдержания.ДатаОкончания < &КонецПериодаРегистрации
	|			И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
	|			И РаботникиОрганизаций.Период >= &ПериодРегистрации
	|			И РаботникиОрганизаций.Период < &КонецПериодаРегистрации
	|			И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			И (РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтрокиУдержания.НомерСтроки	
	|
	|			ОБЪЕДИНИТЬ
	|			
	|		ВЫБРАТЬ
	|			СтрокиУдержания.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(Работники.Период) КАК Период 
	|		ИЗ
	|			Документ.НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК СтрокиУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|              ПО СтрокиУдержания.ФизЛицо = Работники.Сотрудник.Физлицо
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|				  			ПО ПериодыПерекрытия.Период <= Работники.ПериодЗавершения
	|				   			И ПериодыПерекрытия.Период > Работники.Период
	|							И ПериодыПерекрытия.Сотрудник = Работники.Сотрудник
	|							И ПериодыПерекрытия.Организация = &ГоловнаяОрганизация
	|							И (ПериодыПерекрытия.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|			ГДЕ  
	|		  		Работники.ПериодЗавершения<>ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) 
	|				И Работники.Организация = &ГоловнаяОрганизация
	|				И Работники.ПериодЗавершения >= &ПериодРегистрации
	|				И Работники.ПериодЗавершения < &КонецПериодаРегистрации
    |               И Работники.ПричинаИзмененияСостоянияЗавершения = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				И (Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|				И ПериодыПерекрытия.Период ЕСТЬ NULL  
	|				И СтрокиУдержания.Ссылка = &ДокументСсылка " + УсловиеНаФизлицоТекст + " 
	|				И СтрокиУдержания.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И СтрокиУдержания.ДатаОкончания < &КонецПериодаРегистрации
	|		
	|			СГРУППИРОВАТЬ ПО
	|				СтрокиУдержания.НомерСтроки) КАК УволенныеВТекущемМесяцеОбъединение
	|	 	СГРУППИРОВАТЬ ПО 
	|			УволенныеВТекущемМесяцеОбъединение.НомерСтроки) КАК УволенныеВТекущемМесяце
	|		ПО СтрокиУдержания.НомерСтроки = УволенныеВТекущемМесяце.НомерСтроки";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ГДЕ
	|	СтрокиУдержания.Ссылка = &ДокументСсылка " + УсловиеНаФизлицоТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоУдержания()

// Формирует запрос по таблице "НДФЛ" документа
//
// Параметры: 
//	нет
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНДФЛ(Физлица = Неопределено)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПоВсемФизлицам", Физлица = Неопределено);
	Запрос.УстановитьПараметр("Физлица",		Физлица);


	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНДФЛ.НомерСтроки,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СтрокиНДФЛ.Налог,
	|	СтрокиНДФЛ.ПримененныйВычетЛичный,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетей,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейЛьгота,
	|	СтрокиНДФЛ.ПримененныйвычетДополнительный,
	|	СтрокиНДФЛ.ФизЛицо КАК ФизЛицо,
	|	СтрокиНДФЛ.ПримененныйВычетИмущественныйРасход,
	|	СтрокиНДФЛ.ПримененныйВычетСоциальныйСПроцентами,
	|	СтрокиНДФЛ.ПримененныйВычетСтраховойРасход,
	|	СтрокиНДФЛ.ПодразделениеОрганизации
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК СтрокиНДФЛ
	|
 	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|	И (&ПоВсемФизлицам
	|			ИЛИ СтрокиНДФЛ.ФизЛицо В (&Физлица))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	МесяцНалоговогоПериода";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНДФЛ()

// Формирует запрос по таблице "НДФЛ" документа
//
// Параметры: 
//	нет
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНДФЛудержанный()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(СтрокиНДФЛ.Налог) КАК Налог,
	|	СтрокиНДФЛ.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК СтрокиНДФЛ
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиНДФЛ.ФизЛицо
	|
	|ИМЕЮЩИЕ
	|	СУММА(СтрокиНДФЛ.Налог) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНДФЛудержанный()

// Формирует запрос по таблице "НДФЛ" документа для расчета сумм НДФЛ к зачету
//
// Параметры: 
//	нет
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНДФЛКЗачету()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", КонецМесяца(ПериодРегистрации)+1);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(СтрокиНДФЛ.Налог) КАК Налог,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) + ЕСТЬNULL(СуммыУчтенныеДокументом.СуммаНДФЛКЗачету, 0) > ВЫБОР
	|				КОГДА СУММА(СтрокиНДФЛ.Налог) > 0
	|					ТОГДА СУММА(СтрокиНДФЛ.Налог)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|			ТОГДА СУММА(СтрокиНДФЛ.Налог)
	|		ИНАЧЕ ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) + ЕСТЬNULL(СуммыУчтенныеДокументом.СуммаНДФЛКЗачету, 0)
	|	КОНЕЦ КАК НДФЛКЗачетуУчтено,
	|	СтрокиНДФЛ.ФизЛицо,
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13) КАК СтавкаНалогообложенияРезидента
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК СтрокиНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛКЗачету.Остатки(
	|				&ПериодРегистрации,
	|				Физлицо В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ.ФизЛицо
	|						ИЗ
	|							Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ
	|						ГДЕ
	|							Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ.Ссылка = &ДокументСсылка)
	|					И Организация = &Организация
	|					И СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)) КАК НДФЛКЗачету
	|		ПО (НДФЛКЗачету.ФизЛицо = СтрокиНДФЛ.ФизЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НДФЛКЗачету.ФизЛицо КАК ФизЛицо,
	|			СУММА(НДФЛКЗачету.СуммаНДФЛКЗачету) КАК СуммаНДФЛКЗачету
	|		ИЗ
	|			РегистрНакопления.НДФЛКЗачету КАК НДФЛКЗачету
	|		ГДЕ
	|			НДФЛКЗачету.ФизЛицо В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ.ФизЛицо
	|					ИЗ
	|						Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ
	|					ГДЕ
	|						Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ.Ссылка = &ДокументСсылка)
	|			И НДФЛКЗачету.Организация = &Организация
	|			И НДФЛКЗачету.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|			И НДФЛКЗачету.Регистратор = &ДокументСсылка
	|			И НДФЛКЗачету.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НДФЛКЗачету.ФизЛицо) КАК СуммыУчтенныеДокументом
	|		ПО СтрокиНДФЛ.ФизЛицо = СуммыУчтенныеДокументом.ФизЛицо
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиНДФЛ.ФизЛицо,
	|	НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток,
	|	СуммыУчтенныеДокументом.СуммаНДФЛКЗачету
	|
	|ИМЕЮЩИЕ
	|	(СУММА(СтрокиНДФЛ.Налог) < 0
	|		ИЛИ ВЫБОР
	|			КОГДА ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) + ЕСТЬNULL(СуммыУчтенныеДокументом.СуммаНДФЛКЗачету, 0) > ВЫБОР
	|					КОГДА СУММА(СтрокиНДФЛ.Налог) > 0
	|						ТОГДА СУММА(СтрокиНДФЛ.Налог)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|				ТОГДА СУММА(СтрокиНДФЛ.Налог)
	|			ИНАЧЕ ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) + ЕСТЬNULL(СуммыУчтенныеДокументом.СуммаНДФЛКЗачету, 0)
	|		КОНЕЦ <> 0)";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНДФЛКЗачету

// Формирует запрос по таблице "ПенсионныйФонд" документа
//
// Параметры: 
//	нет
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоПенсионномуФонду(Физлицо = Неопределено)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Если НЕ (Физлицо = Неопределено) Тогда
		Запрос.УстановитьПараметр("парамФизлицо", Физлицо);
		//vvv комментируем
		//УсловиеНаФизлицоТекст = " И НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.Сотрудник.Физлицо = &парамФизлицо ";	
		УсловиеНаФизлицоТекст = " И НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.Физлицо = &парамФизлицо ";	
		//
	Иначе
		УсловиеНаФизлицоТекст="";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.НомерСтроки,
	|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.ФизЛицо КАК ФизЛицо,
	|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.Налог,
	|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.ПроцентФСЗН КАК ПроцентФСЗН,
	|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.ВидДеятельности,
	|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.ПроцентППС
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ПенсионныйФонд КАК НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд
	|ГДЕ
	|	НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.Ссылка = &ДокументСсылка И НачислениеЗарплатыРаботникамОрганизацийПенсионныйФонд.Налог <> 0" + УсловиеНаФизлицоТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	МесяцНалоговогоПериода";
	
	Возврат Запрос.Выполнить();
КонецФункции

// Формирует запрос по таблице "ПогашениеЗайма" документа
//
// Параметры: 
//	нет
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоПогашениеЗайма()
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Ставка13", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);
	//Рф Мат. выгода
	//Запрос.УстановитьПараметр("Код13", Справочники.ДоходыНДФЛ.Код2610ПоСтавке13);
	//Запрос.УстановитьПараметр("Код35", Справочники.ДоходыНДФЛ.Код2610ПоСтавке35);
    ////////////////////////////////////////////////////////////////////////////////
	Запрос.УстановитьПараметр("Код13", Справочники.ДоходыНДФЛ.Код99998проценты);
 	Запрос.УстановитьПараметр("Код35", Справочники.ДоходыНДФЛ.Код99999товары);


	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиПогашениеЗайма.НомерСтроки,
	|	СтрокиПогашениеЗайма.ФизЛицо,
	|	СтрокиПогашениеЗайма.ДоговорЗайма,
	|	СтрокиПогашениеЗайма.НачисленоПроцентов,
	|	СтрокиПогашениеЗайма.ПогашеноПроцентов,
	|	СтрокиПогашениеЗайма.ПогашеноЗайма,
	|	СтрокиПогашениеЗайма.МатериальнаяВыгода,
	|	СтрокиПогашениеЗайма.НалогНаМатериальнуюВыгоду,
	|	ВЫБОР
	|		КОГДА СтрокиПогашениеЗайма.СтавкаНалогообложенияМатвыгоды = &Ставка13
	|			ТОГДА &Код13
	|		ИНАЧЕ &Код35
	|	КОНЕЦ КАК КодДохода,
	|	СтрокиПогашениеЗайма.СтавкаНалогообложенияМатвыгоды,
	|	СтрокиПогашениеЗайма.ПодразделениеОрганизации,
	|	ЕСТЬNULL(СтрокиПогашениеЗайма.ДоговорЗайма.НачислятьМатериальнуюВыгоду, ЛОЖЬ) КАК ПроверятьМатериальнуюВыгоду
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК СтрокиПогашениеЗайма
	|ГДЕ
	|	СтрокиПогашениеЗайма.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоПогашениеЗайма

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, по которой начисляется зарплата!", Отказ, Заголовок);
	КонецЕсли;
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка соответствия Даты начала и Даты окончания
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) и ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
		Если ВыборкаПоСтрокамДокумента.ПериодДействияКонец < ВыборкаПоСтрокамДокумента.ПериодДействияНачало Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ, Заголовок);
		ИначеЕсли НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания начисления должны принадлежать одному месяцу!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;	

	// Дата начала события
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала события!", Отказ, Заголовок);
	КонецЕсли;

	Если ВыборкаПоСтрокамДокумента.ЯвляетсяПочасовымОтклонением Тогда
		// ВидИспользованияРабочегоВремени
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан учет времени для вида расчета!", Отказ, Заголовок);
		КонецЕсли;
		
		// ОплачиватьЧасов
		Если ВыборкаПоСтрокамДокумента.ОплачиватьЧасов <= 0 Или ВыборкаПоСтрокамДокумента.ОплачиватьЧасов > 24 Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "количество оплачиваемых часов должно быть положительным и не превышать 24!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ДополнительныеНачисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиДопНачисления(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Доп. начисления"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.Авторасчет  Тогда
		Если ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом
			Или ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка
			Или ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
		
			// Дата начала
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода начисления!", Отказ, Заголовок);
			КонецЕсли;
			// Дата окончания
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода начисления!", Отказ, Заголовок);
			КонецЕсли;
			
		ИначеЕсли ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку
			Или ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням
			Или ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке	Тогда
			
			// Дата начала события
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала события!", Отказ, Заголовок);
			КонецЕсли;
			// Дата начала
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаНачало) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала расчетного периода для исчисления среднего заработка!", Отказ, Заголовок);
			КонецЕсли;
			// Дата окончания
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаОкончание) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания расчетного периода для исчисления среднего заработка!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	// Проверка на сумму вычета
	Если ВыборкаПоСтрокамДокумента.СуммаВычета <> 0 И Не ПроведениеРасчетов.ВычетСоответствуетДоходу(ВыборкаПоСтрокамДокумента.КодДоходаНДФЛ, ВыборкаПоСтрокамДокумента.КодВычета, мСоответствиеДоходовИВычетов) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный код вычета не предусмотрен для кода дохода (" + ?(ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КодДоходаНДФЛ), СокрЛП(ВыборкаПоСтрокамДокумента.КодДоходаНДФЛ), "не указан") + "), с которым будет зарегистрировано в учете по Подоходному налогу начисление """ + ?(ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета), ВыборкаПоСтрокамДокумента.ВидРасчета, "<не указано>") + """!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиДопНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ДоговорыНаВыполнениеРабот" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиДоговора(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Договора"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
		// Дата начала
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода начисления!", Отказ, Заголовок);
		КонецЕсли;
		// Дата окончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода начисления!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;

	// ДокументОснование
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументОснование) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан договор-основание!", Отказ, Заголовок);
	КонецЕсли;

	// Проверка на сумму вычета
	Если ВыборкаПоСтрокамДокумента.СкидкаПриНалогообложении <> 0 И Не ПроведениеРасчетов.ВычетСоответствуетДоходу(ВыборкаПоСтрокамДокумента.КодДоходаНДФЛ, ВыборкаПоСтрокамДокумента.КодВычета, мСоответствиеДоходовИВычетов) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный код вычета не предусмотрен для кода дохода (" + ?(ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КодДоходаНДФЛ), СокрЛП(ВыборкаПоСтрокамДокумента.КодДоходаНДФЛ), "не указан") + "), с которым будет зарегистрировано в учете по НДФЛ начисление """ + ?(ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета), ВыборкаПоСтрокамДокумента.ВидРасчета, "<не указано>") + """!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиДоговора()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Удержания" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Удержания"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой и 
		ВыборкаПоСтрокамДокумента.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда

		// Дата начала
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала удержания!", Отказ, Заголовок);
		КонецЕсли;
		
		// Дата окончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания удержания!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиУдержания()

// Проверяет правильность заполнения реквизитов в строке ТЧ "НДФЛ" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""НДФЛ"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// месяц налогового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан месяц налогового периода!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНДФЛ()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ПенсионныйФонд" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиПенсонныйФонд(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""ПенсионныйФонд"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// месяц налогового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан месяц налогового периода!", Отказ, Заголовок);
	КонецЕсли;
	
	

КонецПроцедуры //

// Проверяет правильность заполнения реквизитов в строке ТЧ "ПогашениеЗайма" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиПогашениеЗайма(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
 									""" табл. части ""Погашение займов"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;
	// ДоговорЗайма
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДоговорЗайма) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан договор займа погашение которого выполняется!", Отказ, Заголовок);
	КонецЕсли;
	// СтавкаНалогообложенияМатвыгоды
	Если ВыборкаПоСтрокамДокумента.ПроверятьМатериальнуюВыгоду И НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СтавкаНалогообложенияМатвыгоды) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана ставка налогообложения матвыгоды!", Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНДФЛ()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для УдержанияРаботниковОрганизации 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуУдержаний(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)

	Движение = НаборЗаписей.Добавить();

	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента);		// ПериодРегистрации, ОбособленноеПодразделение
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);	// БазовыйПериодНачало, БазовыйПериодКонец, ВидРасчета, Сторно
																	// ФизЛицо, Организация,
																	// Результат, Размер, ДокументОснование, Авторасчет, ПорядокРасчетаБазы
 																	// ДатаНачалаСобытия,ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,
	//vvv
	Движение.БазовыйПериодНачало = НачалоМесяца(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало);
	Движение.БазовыйПериодКонец  = КонецМесяца(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало);
	Движение.ДатаНачалаИсп       = ВыборкаПоСтрокамДокумента.БазовыйПериодНачало;
	Движение.ДатаОкончанияИсп    = ВыборкаПоСтрокамДокумента.БазовыйПериодКонец;
	//																
КонецПроцедуры // ДобавитьСтрокуУдержаний

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ВыборкаПоШапкеДокумента		- выборка по данным шапки документа
//	НаборЗаписей				- набор записей для НДФЛРасчетыСБюджетом
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуПенсионныйФонд(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей, НаборЗаписейУдержания)
	
	Если  ВыборкаПоСтрокамДокумента.Налог <> 0 тогда
		Движение = НаборЗаписей.Добавить();

		// Свойства
		Движение.Период						= НачалоМесяца(ПериодРегистрации);
		
		// Измерения
		Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
	   	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ПериодВзаиморасчетов    		= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
		Движение.ПроцентФСЗН                    = ВыборкаПоСтрокамДокумента.ПроцентФСЗН;
		// Ресурсы
		Движение.ПенсионныйФонд						= ВыборкаПоСтрокамДокумента.Налог;
			
		// Реквизиты 
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.ПроцентППС					= ВыборкаПоСтрокамДокумента.ПроцентППС;
		Движение.ВидДеятельности			= ВыборкаПоСтрокамДокумента.ВидДеятельности;

		
		//Расчеты по страховым взносам
	    Движение = Движения.РасчетыПоСтраховымВзносам.ДобавитьПриход();
		// Свойства
		Движение.Период						= КонецМесяца(ПериодРегистрации);
		// Измерения
		Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
		Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.МесяцРасчетногоПериода    		= НачалоМесяца(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода);
		Движение.ВидПлатежа                     = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		// Ресурсы
		Движение.ФСЗН							= ВыборкаПоСтрокамДокумента.Налог;
					
	КонецЕсли;
		
КонецПроцедуры // ДобавитьСтрокуДобавитьСтрокуПенсионныйФонд


// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ВыборкаПоШапкеДокумента		- выборка по данным шапки документа
//	НаборЗаписей				- набор записей для НДФЛРасчетыСБюджетом
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей, НаборИмущественныеВычеты)

	Если  ВыборкаПоСтрокамДокумента.Налог <> 0 
		ИЛИ ВыборкаПоСтрокамДокумента.ПримененныйВычетЛичный <> 0 
		ИЛИ ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетей <> 0
		ИЛИ ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейЛьгота <> 0
		ИЛИ ВыборкаПоСтрокамДокумента.ПримененныйВычетДополнительный <> 0 тогда
		Движение = НаборЗаписей.Добавить();

		// Свойства
		Движение.Период						= КонецМесяца(ПериодРегистрации);
		Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

		// Измерения
		Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
		Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.МесяцНалоговогоПериода     	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
		Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;

		// Ресурсы
		Движение.Налог						= ВыборкаПоСтрокамДокумента.Налог;
		Движение.ПримененныйВычетЛичный		= ВыборкаПоСтрокамДокумента.ПримененныйВычетЛичный;
		Движение.ПримененныйВычетНаДетей	= ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетей;
		Движение.ПримененныйВычетНаДетейЛьгота	= ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейЛьгота;
		Движение.ПримененныйДополнительныйВычет	= ВыборкаПоСтрокамДокумента.ПримененныйВычетДополнительный;
		
		// Реквизиты 
		Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.ИсчисленоИзЗарплаты		= Истина;	
		Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации; 
    КонецЕсли;
		
	//Если  ВыборкаПоСтрокамДокумента.НалогПоСтавке9 <> 0 тогда
	//Движение = НаборЗаписей.Добавить();
	//	// Свойства
	//	Движение.Период						= КонецМесяца(ПериодРегистрации);

	//	// Измерения
	//	Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
	//	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	//	Движение.МесяцНалоговогоПериода     	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	//	Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка9;

	//	// Ресурсы
	//	Движение.Налог						= ВыборкаПоСтрокамДокумента.НалогПоСтавке9;
	//	
	//	// Реквизиты 
	//	Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
	//	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	//	Движение.ИсчисленоИзЗарплаты		= Истина;
	//	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации; 
	//КонецЕсли;
	//
	//Если  ВыборкаПоСтрокамДокумента.НалогПоСтавке09 <> 0 тогда
	//Движение = НаборЗаписей.Добавить();
	//	// Свойства
	//	Движение.Период						= КонецМесяца(ПериодРегистрации);

	//	// Измерения
	//	Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
	//	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	//	Движение.МесяцНалоговогоПериода     	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	//	Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09;

	//	// Ресурсы
	//	Движение.Налог						= ВыборкаПоСтрокамДокумента.НалогПоСтавке09;
	//	
	//	// Реквизиты 
	//	Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
	//	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	//	Движение.ИсчисленоИзЗарплаты		= Истина;
	//	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации; 
	//КонецЕсли;
	//
	//Если  ВыборкаПоСтрокамДокумента.НалогПоСтавке35 <> 0 тогда
	//Движение = НаборЗаписей.Добавить();
	//	// Свойства
	//	Движение.Период						= КонецМесяца(ПериодРегистрации);

	//	// Измерения
	//	Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
	//	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	//	Движение.МесяцНалоговогоПериода     	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	//	Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35;

	//	// Ресурсы
	//	Движение.Налог						= ВыборкаПоСтрокамДокумента.НалогПоСтавке35;
	//	
	//	// Реквизиты 
	//	Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
	//	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	//	Движение.ИсчисленоИзЗарплаты		= Истина;
	//	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации; 
	//КонецЕсли;
	//
	//Если  ВыборкаПоСтрокамДокумента.НалогПоСтавке40 <> 0 тогда
	//Движение = НаборЗаписей.Добавить();
	//	// Свойства
	//	Движение.Период						= КонецМесяца(ПериодРегистрации);

	//	// Измерения
	//	Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
	//	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	//	Движение.МесяцНалоговогоПериода     	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	//	Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка40;

	//	// Ресурсы
	//	Движение.Налог						= ВыборкаПоСтрокамДокумента.НалогПоСтавке40;
	//	
	//	// Реквизиты 
	//	Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
	//	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	//	Движение.ИсчисленоИзЗарплаты		= Истина;
	//	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации; 
	//КонецЕсли;
	
	Если (ВыборкаПоСтрокамДокумента.ПримененныйВычетИмущественныйРасход <> 0) Тогда 
		Движение = НаборИмущественныеВычеты.Добавить();
		
		// Свойства
		Движение.Период						= КонецМесяца(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода);
		Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
		
		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.Год					    = Год(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода);
		//vvv
		Движение.ПериодРегистрации		    = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Период						= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.МесяцНалоговогоПериода 	= НачалоМесяца(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода);
		//
		Движение.КодВычетаИмущественный     = Справочники.ВычетыНДФЛ.Код650;
		
		// Ресурсы
		Движение.Размер						= ВыборкаПоСтрокамДокумента.ПримененныйВычетИмущественныйРасход; 
		
		// Реквизиты 
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации; 
		
	КонецЕсли;
	
	Если (ВыборкаПоСтрокамДокумента.ПримененныйВычетСтраховойРасход <> 0) Тогда 
		Движение = НаборИмущественныеВычеты.Добавить();
		
		// Свойства
		Движение.Период						= КонецМесяца(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода);
		Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
		
		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.Год					    = Год(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода);
		//vvv
		Движение.ПериодРегистрации		    = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Период						= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.МесяцНалоговогоПериода 	= НачалоМесяца(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода);
		//
		Движение.КодВычетаИмущественный     = Справочники.ВычетыНДФЛ.Код640Страх;
		
		// Ресурсы
		Движение.Размер						= ВыборкаПоСтрокамДокумента.ПримененныйВычетСтраховойРасход; 
		
		// Реквизиты 
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации; 
		
	КонецЕсли;
	
	Если (ВыборкаПоСтрокамДокумента.ПримененныйВычетСоциальныйСПроцентами <> 0) Тогда
		
		Движение = НаборИмущественныеВычеты.Добавить();
		
		// Свойства
		Движение.Период						= КонецМесяца(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода);
		Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
		
		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.Год					    = Год(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода);
		//vvv
		Движение.ПериодРегистрации		    = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Период						= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.МесяцНалоговогоПериода 	= НачалоМесяца(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода);
		//
		Движение.КодВычетаИмущественный     = Справочники.ВычетыНДФЛ.Код640;
		
		// Ресурсы
		Движение.Размер						= ВыборкаПоСтрокамДокумента.ПримененныйВычетСоциальныйСПроцентами; 
		
		// Реквизиты 
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации; 
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛ

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ВыборкаПоШапкеДокумента		- выборка по данным шапки документа
//	НаборЗаписей				- набор записей для НДФЛРасчетыСБюджетом
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуНДФЛудержанный(ВыборкаСуммКУдержанию, ВыборкаПоСтрокамДокумента, ВыборкаПоНДФЛКЗачету, ВыборкаПоШапкеДокумента, НаборЗаписей)

	ОсталосьРаспределить = ВыборкаСуммКУдержанию.Налог; // положительная сумма исчисленного налога
	
	// учтем возможный зачет образовавшейся ранее переплаты налога
	ВыборкаПоНДФЛКЗачету.Сбросить();
	Если ВыборкаПоНДФЛКЗачету.НайтиСледующий(ВыборкаСуммКУдержанию.ФизЛицо,"ФизЛицо") Тогда
		ОсталосьРаспределить = ОсталосьРаспределить - ВыборкаПоНДФЛКЗачету.НДФЛКЗачетуУчтено;
	КонецЕсли;
	
	// распределим получившуюся сумму налога к удержанию по месяцам налогового периода 
	ВыборкаПоСтрокамДокумента.Сбросить();
	Пока ВыборкаПоСтрокамДокумента.НайтиСледующий(ВыборкаСуммКУдержанию.ФизЛицо,"ФизЛицо") Цикл
		
		Если ОсталосьРаспределить > 0 Тогда
			
			// расчет суммы удерживаемого налога
			ПогашаемаяСумма = Мин(ВыборкаПоСтрокамДокумента.Налог, ОсталосьРаспределить);
			ОсталосьРаспределить = ОсталосьРаспределить - ПогашаемаяСумма;
			
			Движение = НаборЗаписей.Добавить();
			
			// Свойства
			Движение.Период							= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.МесяцНалоговогоПериода     	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
			Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
			
			// Ресурсы
			Движение.Налог						= ПогашаемаяСумма;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
			Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;				
			Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации; 
			
		КонецЕсли;  
			
	КонецЦикла;

КонецПроцедуры // ДобавитьСтрокуНДФЛудержанный

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ВыборкаПоШапкеДокумента		- выборка по данным шапки документа
//	НаборЗаписей				- набор записей для НДФЛРасчетыСБюджетом
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуНДФЛКЗачету(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента)

	//vvv  не будем отдельно зачитывать подоходный, сразу возвращаем. Необходимо вынести в параметры учета
	Возврат;
	//
	// НДФЛ к зачету
	Если ВыборкаПоСтрокамДокумента.Налог < 0 Тогда
		Движение = Движения.НДФЛКЗачету.Добавить();

		// Свойства
		Движение.Период						= КонецМесяца(ПериодРегистрации);
		Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

		// Измерения
		Движение.ФизЛицо	 	 	 	        = ВыборкаПоСтрокамДокумента.ФизЛицо;
		Движение.Организация				    = ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоСтрокамДокумента.СтавкаНалогообложенияРезидента;

		// Ресурсы
		Движение.СуммаНДФЛКЗачету			= - ВыборкаПоСтрокамДокумента.Налог;
	    
	ИначеЕсли ВыборкаПоСтрокамДокумента.НДФЛКЗачетуУчтено <> 0 Тогда
		
		Движение = Движения.НДФЛКЗачету.Добавить();

		// Свойства
		Движение.Период						= КонецМесяца(ПериодРегистрации);
		Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
		
		// Измерения
		Движение.ФизЛицо	 	 	 	        = ВыборкаПоСтрокамДокумента.ФизЛицо;
		Движение.Организация				    = ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоСтрокамДокумента.СтавкаНалогообложенияРезидента;
		
		// Ресурсы
		Движение.СуммаНДФЛКЗачету			= ВыборкаПоСтрокамДокумента.НДФЛКЗачетуУчтено;
		    
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛКЗачету

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ВыборкаПоШапкеДокумента		- выборка по данным шапки документа
//	НаборЗаписей				- набор записей для НДФЛРасчетыСБюджетом
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуПогашениеЗайма(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей, НаборЗаписейНДФЛСведенияОДоходах, НаборЗаписейНДФЛРасчетыСБюджетом, ФормироватьНДФЛудержанный)
	
	КонецМесяца = КонецМесяца(ПериодРегистрации);

	// начислено процентов
	Если ВыборкаПоСтрокамДокумента.НачисленоПроцентов <> 0 Тогда
		Движение = НаборЗаписей.Добавить();

		// Свойства
		Движение.Период						= КонецМесяца;
		Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	 	Движение.ДоговорЗайма				= ВыборкаПоСтрокамДокумента.ДоговорЗайма;

		// Ресурсы
		Движение.Проценты					= ВыборкаПоСтрокамДокумента.НачисленоПроцентов;
		Движение.УдержаноИзЗарплаты			= Истина;
	КонецЕсли;
	
	// пошашено процентов и основного долга
	Движение = НаборЗаписей.Добавить(); 
	// запись в регистр складываем всегда, даже если реально погашения не было
	// запись служит признаком того, что с займом уже работали

	// Свойства
	Движение.Период						= КонецМесяца;
	Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
	
	// Измерения
	Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.ДоговорЗайма				= ВыборкаПоСтрокамДокумента.ДоговорЗайма;
	
	// Ресурсы
	Движение.Проценты					= ВыборкаПоСтрокамДокумента.ПогашеноПроцентов;
	// даже если начисленные проценты не погашены не увеличиваем основной долг - ограничиваем снизу 
	// размер погашения основного долга нулем
	Движение.ОсновнойДолг				= Макс(0, ВыборкаПоСтрокамДокумента.ПогашеноЗайма - ВыборкаПоСтрокамДокумента.ПогашеноПроцентов);
	
	// Реквизиты
	Движение.УдержаноИзЗарплаты			= Истина;
	
	
	// доходы - материальная выгода по заемным средствам
	Если ВыборкаПоСтрокамДокумента.МатериальнаяВыгода <> 0 Тогда
		
		Движение = НаборЗаписейНДФЛСведенияОДоходах.Добавить();
		
		// свойства
		Движение.Период 				= КонецМесяца;
		
		// измерения 
		Движение.Организация 			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.Физлицо 				= ВыборкаПоСтрокамДокумента.Физлицо;
		Движение.КодДохода 				= ВыборкаПоСтрокамДокумента.КодДохода;
		Движение.ПериодРегистрации 		= ПериодРегистрации;
			
		// ресурсы
		Движение.СуммаДохода 			= ВыборкаПоСтрокамДокумента.МатериальнаяВыгода;
		
		// реквизиты
		Движение.ОбособленноеПодразделение = ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		Движение.ИсчисленоИзЗарплаты	= Истина;	
		
	КонецЕсли;
	
	// налог с материальной выгоды по заемным средствам
	Если ВыборкаПоСтрокамДокумента.НалогНаМатериальнуюВыгоду <> 0 Тогда
		Движение = НаборЗаписейНДФЛРасчетыСБюджетом.Добавить();
		
		// Свойства
		Движение.Период							= КонецМесяца;
		Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;

		// Измерения
		Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
		Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.МесяцНалоговогоПериода     	= КонецМесяца;
		Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоСтрокамДокумента.СтавкаНалогообложенияМатвыгоды;

		// Ресурсы
		Движение.Налог							= ВыборкаПоСтрокамДокумента.НалогНаМатериальнуюВыгоду;
		
		// Реквизиты 
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
		Движение.ИсчисленоИзЗарплаты		= Истина;
		Движение.КодДохода 					= ВыборкаПоСтрокамДокумента.КодДохода;
		
		Если ФормироватьНДФЛудержанный Тогда // сразу же, не дожидаясь выплаты, регистрируем факт удержания налога
			
			Движение = НаборЗаписейНДФЛРасчетыСБюджетом.Добавить();

			// Свойства
			Движение.Период							= КонецМесяца;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;

			// Измерения
			Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.МесяцНалоговогоПериода     	= КонецМесяца;
			Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоСтрокамДокумента.СтавкаНалогообложенияМатвыгоды;

			// Ресурсы
			Движение.Налог						= ВыборкаПоСтрокамДокумента.НалогНаМатериальнуюВыгоду;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
			Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;				
			Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
			Движение.КодДохода 					= ВыборкаПоСтрокамДокумента.КодДохода;
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуПогашениеЗайма

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();

	// Свойства
	Движение.ПериодРегистрации				= ПериодРегистрации;
	Движение.ПериодДействияНачало			= ВыборкаПоСтрокамДокумента.ПериодДействияНачало;
	Движение.ПериодДействияКонец			= ВыборкаПоСтрокамДокумента.ПериодДействияКонец;
	Движение.БазовыйПериодНачало			= ВыборкаПоСтрокамДокумента.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец				= ВыборкаПоСтрокамДокумента.БазовыйПериодКонец;
	Движение.ВидРасчета						= ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно							= ВыборкаПоСтрокамДокумента.Сторно;

	// Измерения
	Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.ФизЛицо						= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// Ресурсы
	Движение.Результат						= ВыборкаПоСтрокамДокумента.Результат;
	// ресурсы по отработанному времени
	Если ВыборкаПоСтрокамДокумента.ЗачетОтработанногоВремени Тогда
		Движение.ОтработаноДней				= ВыборкаПоСтрокамДокумента.ОтработаноДней;
		Движение.ОтработаноЧасов			= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
		Движение.ОтработаноДнейПоПятидневке	= ВыборкаПоСтрокамДокумента.ОтработаноДнейПоПятидневке;
		Движение.ОтработаноЧасовПоПятидневке= ВыборкаПоСтрокамДокумента.ОтработаноЧасовПоПятидневке;
	КонецЕсли;
	// ресурсы по норме времени
	Если ВыборкаПоСтрокамДокумента.ЗачетНормыВремени Тогда
		Движение.НормаДней					= ВыборкаПоСтрокамДокумента.НормаДней;
		Движение.НормаЧасов					= ВыборкаПоСтрокамДокумента.НормаЧасов;
		Движение.НормаДнейПоПятидневке		= ВыборкаПоСтрокамДокумента.НормаДнейПоПятидневке;
		Движение.НормаЧасовПоПятидневке		= ВыборкаПоСтрокамДокумента.НормаЧасовПоПятидневке;
	КонецЕсли;
	Движение.ОплаченоДнейЧасов				= ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов;

	// Реквизиты
	Движение.ГрафикРаботы					= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
	Движение.ГрафикРаботыНорма				= ВыборкаПоСтрокамДокумента.ГрафикРаботыНорма;
	Для Сч = 1 По 6 Цикл
		Движение["Показатель"+Сч]			= ВыборкаПоСтрокамДокумента["Показатель"+Сч];
	КонецЦикла;
	
	Движение.ВидУчетаВремени				= ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.СпособРасчета, ВыборкаПоСтрокамДокумента.ВидВремени, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени, ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени,ВыборкаПоСтрокамДокумента.ВидРасчета.Показатели);
	Движение.ПодразделениеОрганизации		= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	Движение.ОбособленноеПодразделение		= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.ПериодРасчетаСреднегоЗаработкаНачало		= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
	Движение.ПериодРасчетаСреднегоЗаработкаОкончание	= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
	Движение.ДатаНачалаСобытия				= ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия;
	Движение.Авторасчет						= ВыборкаПоСтрокамДокумента.Авторасчет;
	Движение.ВариантОбработкиЗаписиПриОтраженииВРеглУчете = ВыборкаПоСтрокамДокумента.ВариантОбработкиЗаписиПриОтраженииВРеглУчете;	
	Движение.СторнируемыйДокумент = ВыборкаПоСтрокамДокумента.СторнируемыйДокумент;
	//vvv
	Движение.ОтчисленияНаППС = ?(ВыборкаПоСтрокамДокумента.ППС,Перечисления.ДоходыФСС_НС.Облагается,Перечисления.ДоходыФСС_НС.НеОблагается);
	Движение.ГрафикСотрудника= ВыборкаПоСтрокамДокумента.ГрафикСотрудника;
	Движение.ПроцентРезерва= ВыборкаПоСтрокамДокумента.ПроцентРезерва;
	Движение.ИзРезерва= ВыборкаПоСтрокамДокумента.ИзРезерва;
	Движение.СуммаРезерва= ВыборкаПоСтрокамДокумента.СуммаРезерва;
	Движение.Резерв = ВыборкаПоСтрокамДокумента.Резерв;
	Движение.ТабельУчетаОрганизации = ВыборкаПоСтрокамДокумента.ТабельУчетаОрганизации;
	Движение.Автомобиль = ВыборкаПоСтрокамДокумента.Автомобиль;
	Движение.НомерСтрокиТабеля = ВыборкаПоСтрокамДокумента.НомерСтрокиТабеля;
	Движение.Должность = ВыборкаПоСтрокамДокумента.Должность;
	//по умолчанию применяется (если выбрано) ,отражение из шапки, его отменяет отражение из строки
	Движение.СпособОтраженияВБухучете = ВыборкаПоШапкеДокумента.СпособОтраженияВБухучете;
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете) Тогда
		Движение.СпособОтраженияВБухучете = ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете;
	КонецЕсли;	
	//
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуДопНачислений(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();

	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);	// БазовыйПериодНачало, БазовыйПериодКонец, ВидРасчета, Сторно
																	// Сотрудник, ФизЛицо, Результат, СкидкаПриНалогообложении
																	// Размер,ЧислоМесяцев,ПодразделениеОрганизации,
																	// Авторасчет,ДокументОснование,ДатаНачалаСобытия,
 																	// ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,СторнируемыйДокумент

	Движение.ВидУчетаВремени			= ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.СпособРасчета, Неопределено, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);
	Движение.ПериодРегистрации			= ?(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало > КонецМесяца(ПериодРегистрации), ПериодРегистрации, Макс(ПериодРегистрации, ВыборкаПоСтрокамДокумента.БазовыйПериодНачало));
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.ДатаНачалаСобытия 			= ПериодРегистрации;
    //vvv
	Движение.ОтчисленияНаППС = ?(ВыборкаПоСтрокамДокумента.ППС,Перечисления.ДоходыФСС_НС.Облагается,Перечисления.ДоходыФСС_НС.НеОблагается);
	//по умолчанию применяется (если выбрано) ,отражение из шапки, его отменяет отражение из строки
	Движение.СпособОтраженияВБухучете = ВыборкаПоШапкеДокумента.СпособОтраженияВБухучете;
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете) Тогда
		Движение.СпособОтраженияВБухучете = ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете;
	КонецЕсли;
	Движение.ПроцентРезерва= ВыборкаПоСтрокамДокумента.ПроцентРезерва;
	Движение.ИзРезерва= ВыборкаПоСтрокамДокумента.ИзРезерва;
	Движение.СуммаРезерва= ВыборкаПоСтрокамДокумента.СуммаРезерва;
	Движение.Резерв = ВыборкаПоСтрокамДокумента.Резерв;
	//
	
КонецПроцедуры // ДобавитьСтрокуДопНачислений

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуДоговора(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();

	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);	// БазовыйПериодНачало, БазовыйПериодКонец, ВидРасчета, Сторно
																	// Сотрудник, ФизЛицо, Результат, СкидкаПриНалогообложении
																	// Размер,ЧислоМесяцев,ПодразделениеОрганизации,
																	// Авторасчет,ДокументОснование,ДатаНачалаСобытия,
 																	// ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,СторнируемыйДокумент

	Движение.ПериодРегистрации			= ?(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало > КонецМесяца(ПериодРегистрации), ПериодРегистрации, Макс(ПериодРегистрации, ВыборкаПоСтрокамДокумента.БазовыйПериодНачало));
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.ДатаНачалаСобытия 			= ПериодРегистрации;

КонецПроцедуры // ДобавитьСтрокуДоговора

// По выборке из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- спозиционированная на определеной строке выборка 
//							  из результата запроса к документу 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРабочегоВремени(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Если ВыборкаПоНачислениям.ЯвляетсяПочасовымОтклонением Тогда
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период = ВыборкаПоНачислениям.ПериодДействияНачало;
		
		// Измерения
		Движение.Сотрудник							= ВыборкаПоНачислениям.Сотрудник;
		Движение.Организация 						= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ВидИспользованияРабочегоВремени 	= ВыборкаПоНачислениям.ВидИспользованияРабочегоВремени;
		
		// Ресурсы
		
		Движение.Часов			= ВыборкаПоНачислениям.ОплачиватьЧасов;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРабочегоВремени()

// получает доходы НДФЛ по табличным частям с доходами
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		НаборЗаписей - таблица значений или набор записей рег-ра - "приемник" сведений о доходах
//		
Процедура СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ДатаНалоговогоПериода", КонецГода(ПериодРегистрации));
	КодОплатыТрудаПоНДФЛ = Новый Массив;
	КодОплатыТрудаПоНДФЛ.Добавить(Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию);
	//КодОплатыТрудаПоНДФЛ.Добавить(Справочники.ДоходыНДФЛ.Код2012);
	Запрос.УстановитьПараметр("КодОплатыТрудаПоНДФЛ", КодОплатыТрудаПоНДФЛ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Доходы.Физлицо,
	|	Доходы.КодДохода,
	|	Доходы.КодВычета,
	|	Доходы.Период,
	|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода,
	|	СУММА(Доходы.СуммаВычета) КАК СуммаВычета,
	|	Доходы.ПодразделениеОрганизации,
	|	Доходы.ВидРасчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основные.Сотрудник.Физлицо КАК Физлицо,
	|		Основные.ВидРасчета.КодДоходаНДФЛ КАК КодДохода,
	|		ВЫБОР
	|			КОГДА Основные.ВидРасчета.КодДоходаНДФЛ В (&КодОплатыТрудаПоНДФЛ)
	|				ТОГДА Основные.ДатаНачала
	|			ИНАЧЕ Основные.Ссылка.ПериодРегистрации
	|		КОНЕЦ КАК Период,
	|		Основные.Результат КАК СуммаДохода,
	|		0 КАК СуммаВычета,
	|		NULL КАК КодВычета,
	|		Основные.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		Основные.ВидРасчета КАК ВидРасчета
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Основные
	|	ГДЕ
	|		Основные.Ссылка = &парамСсылка
	|		И Основные.ВидРасчета.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)
	|		И Основные.Результат <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Дополнительные.Сотрудник.Физлицо,
	|		Дополнительные.ВидРасчета.КодДоходаНДФЛ,
	//vvv
	//|		Дополнительные.Ссылка.ПериодРегистрации,
	|		НАЧАЛОПЕРИОДА(Дополнительные.ДатаНачала,МЕСЯЦ),
	//
	|		Дополнительные.Результат,
	|		Дополнительные.СуммаВычета,
	|		Дополнительные.КодВычета,
	|		Дополнительные.ПодразделениеОрганизации,
	|		Дополнительные.ВидРасчета
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК Дополнительные
	|	ГДЕ
	|		Дополнительные.Ссылка = &парамСсылка
	|		И Дополнительные.ВидРасчета.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)
	|		И Дополнительные.Результат <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДоговорыНаВыполнениеРабот.Сотрудник.Физлицо,
	|		ДоговорыНаВыполнениеРабот.ВидРасчета.КодДоходаНДФЛ,
	|		ДоговорыНаВыполнениеРабот.Ссылка.ПериодРегистрации,
	|		ДоговорыНаВыполнениеРабот.Результат,
	|		ДоговорыНаВыполнениеРабот.СуммаВычета,
	|		ДоговорыНаВыполнениеРабот.КодВычета,
	|		ДоговорыНаВыполнениеРабот.ПодразделениеОрганизации,
	|		ДоговорыНаВыполнениеРабот.ВидРасчета
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК ДоговорыНаВыполнениеРабот
	|	ГДЕ
	|		ДоговорыНаВыполнениеРабот.Ссылка = &парамСсылка
	|		И ДоговорыНаВыполнениеРабот.ВидРасчета.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)
	|		И ДоговорыНаВыполнениеРабот.Результат <> 0) КАК Доходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.Физлицо,
	|	Доходы.КодДохода,
	|	Доходы.Период,
	|	Доходы.КодВычета,
	|	Доходы.ПодразделениеОрганизации,
	|	Доходы.ВидРасчета";
	
	ДоходыПоКодам = Запрос.Выполнить().Выбрать();
	// сформируем движения НДФЛСведенияОДоходах
	Пока ДоходыПоКодам.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// свойства
		Движение.Период 				= ДоходыПоКодам.Период;
		
		// измерения 
		Движение.Организация 			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.Физлицо 				= ДоходыПоКодам.Физлицо;
		Движение.КодДохода 				= ДоходыПоКодам.КодДохода;
		Движение.ПериодРегистрации 		= ПериодРегистрации;
		
		// ресурсы
		Движение.СуммаДохода 			= ДоходыПоКодам.СуммаДохода;
		Движение.СуммаВычета 			= ДоходыПоКодам.СуммаВычета;
		
		// реквизиты
		Движение.ОбособленноеПодразделение = ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.КодВычета	 	 		= ДоходыПоКодам.КодВычета;
		Движение.ИсчисленоИзЗарплаты	= Истина;	
		Движение.ПодразделениеОрганизации = ДоходыПоКодам.ПодразделениеОрганизации; 
		//Движение.КоличествоДетей		= ДоходыПоКодам.КоличествоДетей;	
		Движение.ВидРасчета = ДоходыПоКодам.ВидРасчета;
	КонецЦикла;
	
КонецПроцедуры // СформироватьДоходыПоКодамНДФЛ()

// получает доходы НДФЛ по табличной части с погашением займов
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		НаборЗаписей - таблица значений или набор записей рег-ра - "приемник" сведений о доходах
//		ФизлицаСписок - список физлиц, по которым нужно обработать строки т.ч., если для всех - то не указывается 
//		
Процедура СформироватьДоходыПоМатвыгодеПоЗаймам(ВыборкаПоШапкеДокумента,НаборЗаписей, ФизлицаСписок = Неопределено)

	Для каждого СтрокаТЧ Из ПогашениеЗаймов Цикл
		
		Если ФизлицаСписок <> Неопределено и ФизлицаСписок.НайтиПоЗначению(СтрокаТЧ.Физлицо) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.МатериальнаяВыгода <> 0 Тогда
			
			Движение = НаборЗаписей.Добавить();
			
			// свойства
			Движение.Период 				= КонецМесяца(ПериодРегистрации);
			
			// измерения 
			Движение.Организация 			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.Физлицо 				= СтрокаТЧ.Физлицо;
			//РФ Мат. выгода
			//Движение.КодДохода 				= ?(СтрокаТЧ.СтавкаНалогообложенияМатвыгоды = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13,
			//									Справочники.ДоходыНДФЛ.Код2610ПоСтавке13,Справочники.ДоходыНДФЛ.Код2610ПоСтавке35);
			Движение.КодДохода 				= ?(СтрокаТЧ.СтавкаНалогообложенияМатвыгоды = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13,
												Справочники.ДоходыНДФЛ.Код99998проценты,Справочники.ДоходыНДФЛ.Код99999товары);
			Движение.ПериодРегистрации 		= ПериодРегистрации;
			
			// ресурсы
			Движение.СуммаДохода 			= СтрокаТЧ.МатериальнаяВыгода;
			
			// реквизиты
			Движение.ОбособленноеПодразделение = ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
			Движение.ИсчисленоИзЗарплаты	= Истина;	
			Движение.ПодразделениеОрганизации = СтрокаТЧ.ПодразделениеОрганизации; 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьДоходыПоМатвыгодеПоЗаймам()

// Вычисляет разницу между начислениями и удержаниями работника и формирует
// движения по взаиморасчетам с работниками
//
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		НаборЗаписей - набор записей 
//		Перерасчет - признак проведения перерасчетов, по умолчанию - Ложь
//		Физлица - список физлиц, по которым производится расчет, по умолчанию - отсутствует
//
// Возвращаемое значение:
//	Нет
//		
Процедура СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, НаборЗаписей, УчетЗадолженностиПоМесяцам, Перерасчет = Ложь, Физлица = Неопределено)
	
	Если ВыборкаПоШапкеДокумента.ЭтоЗарплатаЗаПервуюПоловинуМесяца Тогда
		НачисленияРаботниковТекст =
		"ВЫБРАТЬ
		|	Доходы.Физлицо,
		|	Доходы.Сотрудник,
		|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода,
		|	Доходы.ХарактерВыплаты КАК ХарактерВыплаты
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основные.Сотрудник.Физлицо КАК Физлицо,
		|		Основные.Результат КАК СуммаДохода,
		|		Основные.Сотрудник КАК Сотрудник,
		|		ВЫБОР
		|			КОГДА Основные.ВидРасчета.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияИзФСЗН)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПособияНаДетей)
		|			ИНАЧЕ NULL
		|		КОНЕЦ КАК ХарактерВыплаты
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Основные
		|	ГДЕ
		|		Основные.Ссылка = &парамСсылка
		|		И Основные.Результат <> 0
		|		И НЕ Основные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Дополнительные.Сотрудник.Физлицо,
		|		Дополнительные.Результат,
		|		Дополнительные.Сотрудник,
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК Дополнительные
		|	ГДЕ
		|		Дополнительные.Ссылка = &парамСсылка
		|		И Дополнительные.Результат <> 0
		|		И НЕ Дополнительные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДоговорыНаВыполнениеРабот.Сотрудник.Физлицо,
		|		ДоговорыНаВыполнениеРабот.Результат,
		|		ДоговорыНаВыполнениеРабот.Сотрудник,
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК ДоговорыНаВыполнениеРабот
		|	ГДЕ
		|		ДоговорыНаВыполнениеРабот.Ссылка = &парамСсылка
		|		И НЕ ДоговорыНаВыполнениеРабот.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗплУдержания.ФизЛицо,
		|		-ЗплУдержания.Результат,
		|		NULL,
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК ЗплУдержания
		|	ГДЕ
		|		ЗплУдержания.Ссылка = &парамСсылка
		|		И ЗплУдержания.Результат <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПенсионныйФонд.ФизЛицо,
		|		-ПенсионныйФонд.Налог,
		|		NULL,
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ПенсионныйФонд КАК ПенсионныйФонд
		|	ГДЕ
		|		ПенсионныйФонд.Ссылка = &парамСсылка
		|		И ПенсионныйФонд.Налог <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗплНДФЛ.ФизЛицо,
		|		-СУММА(ЗплНДФЛ.Налог) + ВЫБОР
		|			КОГДА ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) > СУММА(ЗплНДФЛ.Налог)
		|				ТОГДА СУММА(ЗплНДФЛ.Налог)
		|			ИНАЧЕ ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0)
		|		КОНЕЦ,
		|		NULL,
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК ЗплНДФЛ
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛКЗачету.Остатки(
		|					&ПериодРегистрации,
		|					Физлицо В
		|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|								Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ.ФизЛицо
		|							ИЗ
		|								Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ
		|							ГДЕ
		|								Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ.Ссылка = &парамСсылка)
		|						И Организация = &Организация) КАК НДФЛКЗачету
		|			ПО (НДФЛКЗачету.ФизЛицо = ЗплНДФЛ.ФизЛицо)
		|	ГДЕ
		|		ЗплНДФЛ.Ссылка = &парамСсылка
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗплНДФЛ.ФизЛицо,
		|		НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток
		|	
		|	ИМЕЮЩИЕ
		|		СУММА(ЗплНДФЛ.Налог) > 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗплЗаймы.ФизЛицо,
		|		-ЗплЗаймы.ПогашеноЗайма - ЗплЗаймы.НалогНаМатериальнуюВыгоду,
		|		NULL,
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК ЗплЗаймы
		|	ГДЕ
		|		ЗплЗаймы.Ссылка = &парамСсылка
		|		И (ЗплЗаймы.ПогашеноЗайма <> 0
		|				ИЛИ ЗплЗаймы.НалогНаМатериальнуюВыгоду > 0)) КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Физлицо,
		|	Доходы.Сотрудник,
		|	Доходы.ХарактерВыплаты";
		Запрос = Новый Запрос(НачисленияРаботниковТекст);
	ИначеЕсли Перерасчет Тогда
		Если Физлица = Неопределено Тогда
			// таблица ФизлицаДляПерерасчета
			// Список физлиц по которым необходимо выполнить перерасчет
			// Поля:
			//		ФизЛицо
			// Описание:
			// Получает список неповторяющихся физлиц по которым есть записи
			// перерасчета в одной из таблиц перерасчета - по основным или дополнительным начислениям
			//
			ФизлицаДляПерерасчетаТекст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Перерасчет.Физлицо
			|ИЗ
			|	(ВЫБРАТЬ
			|		Перерасчет.Физлицо
			|	ИЗ
			|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
			|	
			|	ГДЕ
			|		Перерасчет.ОбъектПерерасчета = &парамСсылка
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Перерасчет.Физлицо
			|	ИЗ
			|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
			|	
			|	ГДЕ
			|		Перерасчет.ОбъектПерерасчета = &парамСсылка) КАК Перерасчет";
			
			// НачисленияРаботников
			//	Поля:
			//		Физлицо
			//		СуммаДохода - сумма "к выплате" - увличение состояния взаиморасчета с работником
			//
			
			НачисленияРаботниковТекст = 
			"ВЫБРАТЬ
			|	Доходы.Физлицо КАК Физлицо,
			|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода,
			|	Доходы.ХарактерВыплаты КАК ХарактерВыплаты
			|ИЗ
			|	(ВЫБРАТЬ
			|		Основные.Сотрудник.Физлицо КАК Физлицо,
			|		Основные.Результат КАК СуммаДохода,
			|		ВЫБОР
			|			КОГДА Основные.ВидРасчета.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияИзФСЗН)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПособияНаДетей)
			|			ИНАЧЕ NULL
			|		КОНЕЦ КАК ХарактерВыплаты
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Основные
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ФизлицаДляПерерасчетаТекст + ") КАК ФизлицаДляПерерасчета
			|			ПО ФизлицаДляПерерасчета.Физлицо = Основные.Сотрудник.Физлицо
			|	
			|	ГДЕ
			|		Основные.Ссылка = &парамСсылка 
			|		И (Основные.Результат <> 0)
			|		И (НЕ Основные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Дополнительные.Сотрудник.Физлицо,
			|		Дополнительные.Результат,
			|		NULL
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК Дополнительные
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ФизлицаДляПерерасчетаТекст + ") КАК ФизлицаДляПерерасчета
			|			ПО ФизлицаДляПерерасчета.Физлицо = Дополнительные.Сотрудник.Физлицо
			|	
			|	ГДЕ
			|		Дополнительные.Ссылка = &парамСсылка
			|		И (Дополнительные.Результат <> 0)
			|		И (НЕ Дополнительные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ДоговорыНаВыполнениеРабот.Сотрудник.Физлицо,
			|		ДоговорыНаВыполнениеРабот.Результат,
			|		NULL
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК ДоговорыНаВыполнениеРабот
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ФизлицаДляПерерасчетаТекст + ") КАК ФизлицаДляПерерасчета
			|			ПО ФизлицаДляПерерасчета.Физлицо = ДоговорыНаВыполнениеРабот.Сотрудник.Физлицо
			|	ГДЕ
			|		ДоговорыНаВыполнениеРабот.Ссылка = &парамСсылка
			|		И (НЕ ДоговорыНаВыполнениеРабот.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме)
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗплУдержания.ФизЛицо,
			|		-(ЗплУдержания.Результат),
			|		NULL
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК ЗплУдержания
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ФизлицаДляПерерасчетаТекст + ") КАК ФизлицаДляПерерасчета
			|			ПО ФизлицаДляПерерасчета.Физлицо = ЗплУдержания.Физлицо
			|	
			|	ГДЕ
			|		ЗплУдержания.Ссылка = &парамСсылка И
			|		(ЗплУдержания.Результат <> 0)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ПенсионныйФонд.ФизЛицо,
			|		-ПенсионныйФонд.Налог,
			|		NULL
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ПенсионныйФонд КАК ПенсионныйФонд
			|	ГДЕ
			|		ПенсионныйФонд.Ссылка = &парамСсылка
			|		И ПенсионныйФонд.Налог <> 0
	        |
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗплНДФЛ.ФизЛицо,
			//vvv комментируем, будеи возвращать
			//|		-СУММА(ЗплНДФЛ.Налог) + ВЫБОР
			//|			КОГДА ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) > СУММА(ЗплНДФЛ.Налог)
			//|				ТОГДА СУММА(ЗплНДФЛ.Налог)
			//|			ИНАЧЕ ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0)
			//|		КОНЕЦ,
			|		-СУММА(ЗплНДФЛ.Налог),
			//
			|		NULL
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК ЗплНДФЛ
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ФизлицаДляПерерасчетаТекст + ") КАК ФизлицаДляПерерасчета
			|			ПО ФизлицаДляПерерасчета.ФизЛицо = ЗплНДФЛ.Физлицо
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛКЗачету.Остатки(
			|			&ПериодРегистрации,
			|			Физлицо В
			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ.ФизЛицо
			|					ИЗ
			|						Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ
			|					ГДЕ
			|						Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ.Ссылка = &парамСсылка)
			|				И Организация = &Организация) КАК НДФЛКЗачету
			|			ПО НДФЛКЗачету.ФизЛицо = ЗплНДФЛ.ФизЛицо
			|
			|	ГДЕ
			|		ЗплНДФЛ.Ссылка = &парамСсылка
			|
			|	СГРУППИРОВАТЬ ПО
			|		ЗплНДФЛ.ФизЛицо,
			|		НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток
			|
			//vvv комментируем
			//|	ИМЕЮЩИЕ
			//|		СУММА(ЗплНДФЛ.Налог) > 0
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗплЗаймы.ФизЛицо,
			|		- ЗплЗаймы.ПогашеноЗайма - ЗплЗаймы.НалогНаМатериальнуюВыгоду,
			|		NULL
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК ЗплЗаймы
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ФизлицаДляПерерасчетаТекст + ") КАК ФизлицаДляПерерасчета
			|			ПО ФизлицаДляПерерасчета.ФизЛицо = ЗплЗаймы.Физлицо
			|	
			|	ГДЕ
			|		ЗплЗаймы.Ссылка = &парамСсылка И
			|		(ЗплЗаймы.ПогашеноЗайма <> 0 или ЗплЗаймы.НалогНаМатериальнуюВыгоду > 0)) КАК Доходы
			
			|СГРУППИРОВАТЬ ПО
			//vvv добавим запятую, похоже перерасчетом никто никогда не пользовался
			|	Доходы.Физлицо,
			|	Доходы.ХарактерВыплаты";
			
			Запрос = Новый Запрос(НачисленияРаботниковТекст);
		Иначе
			
			НачисленияРаботниковТекст = 
			"ВЫБРАТЬ
			|	Доходы.Физлицо КАК Физлицо,
			|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода,
			|	Доходы.ХарактерВыплаты КАК ХарактерВыплаты
			|ИЗ
			|	(ВЫБРАТЬ
			|		Основные.Сотрудник.Физлицо КАК Физлицо,
			|		Основные.Результат КАК СуммаДохода,
			|		ВЫБОР
			|			КОГДА Основные.ВидРасчета.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияИзФСЗН)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПособияНаДетей)
			|			ИНАЧЕ NULL
			|		КОНЕЦ КАК ХарактерВыплаты
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Основные
			|	ГДЕ
			|		Основные.Сотрудник.Физлицо В(&парамФизлица)
			|		И Основные.Ссылка = &парамСсылка
			|		И Основные.Результат <> 0
			|		И (НЕ Основные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Дополнительные.Сотрудник.Физлицо,
			|		Дополнительные.Результат,
			|		NULL
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК Дополнительные
			|	ГДЕ
			|		Дополнительные.Сотрудник.Физлицо В(&парамФизлица)
			|		И Дополнительные.Ссылка = &парамСсылка
			|		И Дополнительные.Результат <> 0
			|		И (НЕ Дополнительные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ДоговорыНаВыполнениеРабот.Сотрудник.Физлицо,
			|		ДоговорыНаВыполнениеРабот.Результат,
			|		NULL
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК ДоговорыНаВыполнениеРабот
			|	ГДЕ
			|		ДоговорыНаВыполнениеРабот.Сотрудник.Физлицо В(&парамФизлица)
			|		И ДоговорыНаВыполнениеРабот.Ссылка = &парамСсылка
			|		И (НЕ ДоговорыНаВыполнениеРабот.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗплУдержания.ФизЛицо,
			|		-ЗплУдержания.Результат,
			|		NULL
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК ЗплУдержания
			|	ГДЕ
			|		ЗплУдержания.ФизЛицо В(&парамФизлица)
			|		И ЗплУдержания.Ссылка = &парамСсылка
			|		И ЗплУдержания.Результат <> 0
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ПенсионныйФонд.ФизЛицо,
			|		-ПенсионныйФонд.Налог,
			|		NULL
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ПенсионныйФонд КАК ПенсионныйФонд
			|	ГДЕ
			|		ПенсионныйФонд.Ссылка = &парамСсылка
			|		И ПенсионныйФонд.Налог <> 0
	        |
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗплНДФЛ.ФизЛицо,
			|		-СУММА(ЗплНДФЛ.Налог) + ВЫБОР
			|			КОГДА ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) > СУММА(ЗплНДФЛ.Налог)
			|				ТОГДА СУММА(ЗплНДФЛ.Налог)
			|			ИНАЧЕ ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0)
			|		КОНЕЦ,
			|		NULL
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК ЗплНДФЛ
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛКЗачету.Остатки(
			|					&ПериодРегистрации,
			|					Физлицо В
			|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|								Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ.ФизЛицо
			|							ИЗ
			|								Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ
			|							ГДЕ
			|								Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ.Ссылка = &парамСсылка)
			|						И Организация = &Организация) КАК НДФЛКЗачету
			|			ПО (НДФЛКЗачету.ФизЛицо = ЗплНДФЛ.ФизЛицо)
			|	ГДЕ
			|		ЗплНДФЛ.Ссылка = &парамСсылка
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ЗплНДФЛ.ФизЛицо,
			|		НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток
			|	
			|	ИМЕЮЩИЕ
			|		СУММА(ЗплНДФЛ.Налог) > 0

			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗплЗаймы.ФизЛицо,
			|		-ЗплЗаймы.ПогашеноЗайма - ЗплЗаймы.НалогНаМатериальнуюВыгоду,
			|		NULL
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК ЗплЗаймы
			|	ГДЕ
			|		ЗплЗаймы.ФизЛицо В(&парамФизлица)
			|		И ЗплЗаймы.Ссылка = &парамСсылка
			|		И (ЗплЗаймы.ПогашеноЗайма <> 0
			|				ИЛИ ЗплЗаймы.НалогНаМатериальнуюВыгоду > 0)) КАК Доходы
			|
			|СГРУППИРОВАТЬ ПО
			|	Доходы.Физлицо,
			|	Доходы.ХарактерВыплаты";
			
			Запрос = Новый Запрос(НачисленияРаботниковТекст);
			Запрос.УстановитьПараметр("парамФизлица", Физлица);
			
		КонецЕсли;
	Иначе
		НачисленияРаботниковТекст =
		"ВЫБРАТЬ
		|	Доходы.Физлицо КАК Физлицо,
		|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода,
		|	Доходы.ХарактерВыплаты КАК ХарактерВыплаты
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основные.Сотрудник.Физлицо КАК Физлицо,
		|		Основные.Результат КАК СуммаДохода,
		|		ВЫБОР
		|			КОГДА Основные.ВидРасчета.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияИзФСЗН)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПособияНаДетей)
		|			ИНАЧЕ NULL
		|		КОНЕЦ КАК ХарактерВыплаты
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Основные
		|	ГДЕ
		|		Основные.Ссылка = &парамСсылка
		|		И Основные.Результат <> 0
		|		И НЕ Основные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Дополнительные.Сотрудник.Физлицо,
		|		Дополнительные.Результат,
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК Дополнительные
		|	ГДЕ
		|		Дополнительные.Ссылка = &парамСсылка
		|		И Дополнительные.Результат <> 0
		|		И НЕ Дополнительные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДоговорыНаВыполнениеРабот.Сотрудник.Физлицо,
		|		ДоговорыНаВыполнениеРабот.Результат,
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК ДоговорыНаВыполнениеРабот
		|	ГДЕ
		|		ДоговорыНаВыполнениеРабот.Ссылка = &парамСсылка
		|		И НЕ ДоговорыНаВыполнениеРабот.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗплУдержания.ФизЛицо,
		|		-ЗплУдержания.Результат,
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК ЗплУдержания
		|	ГДЕ
		|		ЗплУдержания.Ссылка = &парамСсылка
		|		И ЗплУдержания.Результат <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПенсионныйФонд.ФизЛицо,
		|		-ПенсионныйФонд.Налог,
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ПенсионныйФонд КАК ПенсионныйФонд
		|	ГДЕ
		|		ПенсионныйФонд.Ссылка = &парамСсылка
		|		И ПенсионныйФонд.Налог <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗплНДФЛ.ФизЛицо,
		//vvv комментируем, возвращаемый налог будем включать в задолженность
		//|		-СУММА(ЗплНДФЛ.Налог) + ВЫБОР
		//|			КОГДА ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачету, 0) > СУММА(ЗплНДФЛ.Налог)
		//|				ТОГДА СУММА(ЗплНДФЛ.Налог)
		//|			ИНАЧЕ ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачету, 0)
		//|		КОНЕЦ,
		|		-СУММА(ЗплНДФЛ.Налог),
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК ЗплНДФЛ
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				НДФЛКЗачету.ФизЛицо КАК ФизЛицо,
		|				СУММА(НДФЛКЗачету.СуммаНДФЛКЗачету) КАК СуммаНДФЛКЗачету
		|			ИЗ
		|				(ВЫБРАТЬ
		|					НДФЛКЗачету.ФизЛицо КАК ФизЛицо,
		|					НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток КАК СуммаНДФЛКЗачету
		|				ИЗ
		|					РегистрНакопления.НДФЛКЗачету.Остатки(
		|							&ПериодРегистрации,
		|							Физлицо В
		|									(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|										Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ.ФизЛицо
		|									ИЗ
		|										Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ
		|									ГДЕ
		|										Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ.Ссылка = &парамСсылка)
		|								И Организация = &Организация) КАК НДФЛКЗачету
		|				
		|				ОБЪЕДИНИТЬ
		|				
		|				ВЫБРАТЬ
		|					НДФЛКЗачетуОбороты.ФизЛицо,
		|					СУММА(НДФЛКЗачетуОбороты.СуммаНДФЛКЗачетуОборот)
		|				ИЗ
		|					РегистрНакопления.НДФЛКЗачету.Обороты(
		|							&ПериодРегистрации,
		|							&ПериодРегистрации,
		|							Регистратор,
		|							Физлицо В
		|									(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|										Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ.ФизЛицо
		|									ИЗ
		|										Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ
		|									ГДЕ
		|										Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ.Ссылка = &парамСсылка)
		|								И Организация = &Организация) КАК НДФЛКЗачетуОбороты
		|				ГДЕ
		|					НДФЛКЗачетуОбороты.Регистратор <> &парамСсылка
		|				
		|				СГРУППИРОВАТЬ ПО
		|					НДФЛКЗачетуОбороты.ФизЛицо) КАК НДФЛКЗачету
		|			
		|			СГРУППИРОВАТЬ ПО
		|				НДФЛКЗачету.ФизЛицо) КАК НДФЛКЗачету
		|			ПО ЗплНДФЛ.ФизЛицо = НДФЛКЗачету.ФизЛицо
		|	ГДЕ
		|		ЗплНДФЛ.Ссылка = &парамСсылка
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗплНДФЛ.ФизЛицо,
		|		НДФЛКЗачету.СуммаНДФЛКЗачету
		|	
		//vvv комментируем
		//|	ИМЕЮЩИЕ
		//|		СУММА(ЗплНДФЛ.Налог) > 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗплЗаймы.ФизЛицо,
		|		-ЗплЗаймы.ПогашеноЗайма - ЗплЗаймы.НалогНаМатериальнуюВыгоду,
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК ЗплЗаймы
		|	ГДЕ
		|		ЗплЗаймы.Ссылка = &парамСсылка
		|		И (ЗплЗаймы.ПогашеноЗайма <> 0
		|				ИЛИ ЗплЗаймы.НалогНаМатериальнуюВыгоду > 0)) КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Физлицо,
		|	Доходы.ХарактерВыплаты";
		
		Запрос = Новый Запрос(НачисленияРаботниковТекст);
		
	КонецЕсли;
		
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка",		Ссылка);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",	КонецМесяца(ПериодРегистрации));
	
	Доходы = Запрос.Выполнить().Выбрать();
	// сформируем движения по суммам к выплате
	Пока Доходы.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// свойства
		Движение.Период					= КонецМесяца(ПериодРегистрации);
		Если ВыборкаПоШапкеДокумента.ЭтоЗарплатаЗаПервуюПоловинуМесяца Тогда
			Движение.Сотрудник			= Доходы.Сотрудник;
		Иначе 	
			Движение.ВидДвижения		= ВидДвиженияНакопления.Приход;
		КонецЕсли;
		
		// измерения
		Движение.Физлицо				= Доходы.Физлицо;
		Движение.Организация			= Организация;
		//vvv комментируем
		//Если УчетЗадолженностиПоМесяцам И НЕ ВыборкаПоШапкеДокумента.ЭтоЗарплатаЗаПервуюПоловинуМесяца Тогда
		Если НЕ ВыборкаПоШапкеДокумента.ЭтоЗарплатаЗаПервуюПоловинуМесяца Тогда
			Движение.ПериодВзаиморасчетов	= ПериодРегистрации;
		КонецЕсли;
		
		// ресурсы
		Движение.СуммаВзаиморасчетов	= Доходы.СуммаДохода;
		
		//Реквизиты
		Если НЕ ВыборкаПоШапкеДокумента.ЭтоЗарплатаЗаПервуюПоловинуМесяца  Тогда
			Если ЗначениеЗаполнено(Доходы.ХарактерВыплаты) Тогда
				Движение.ХарактерВыплаты = Доходы.ХарактерВыплаты; 	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СформироватьВзаиморасчетыСРаботниками()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	ПерерассчитываемыйДокумент = Неопределено
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет
		Или ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
		КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Начисления, ДополнительныеНачисления);
		Если ПустаяСтрока(КраткийСоставДокумента) Тогда
			КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ДоговорыНаВыполнениеРабот);
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ Тогда
		КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(НДФЛ,, "Физлицо");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
		КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ПогашениеЗаймов,, "Физлицо");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний Тогда
		КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Удержания,, "Физлицо");
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ПометкаУдаления Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",	Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1
		|ИЗ
		|	РегистрСведений.ЗаполнениеПлановыхНачислений КАК ЗаполнениеПлановыхНачислений
		|ГДЕ
		|	ЗаполнениеПлановыхНачислений.ОбъектЗаполнения = &Ссылка";
	
		Если Не Запрос.Выполнить().Пустой() Тогда
			// удаляем запись о перезаполнении из регистра
			НаборЗаписей = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектЗаполнения.Установить(Ссылка);
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Для Каждого Набор Из Движения Цикл
		Если мНеуправляемыеДвижения.Найти(ТипЗнч(Набор)) = Неопределено Тогда
			Набор.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
			
			Если ВыборкаПоШапкеДокумента.ЭтоЗарплатаЗаПервуюПоловинуМесяца Тогда
				// движения запишем в специальный регистр
				
				// сформируем суммы к выплате по начислениям документа
				СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, Движения.ЗарплатаЗаПервуюПоловинуМесяца, Ложь);
				
			Иначе
				
				// ведется ли учет задолженности в разрезе периодов возникновения задолженности
				УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
				
				////////////////////////////////////////////////////////////////////////
				// основные Начисления
				
				// получим реквизиты табличной части
				ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента).Выбрать();
				
				Пока ВыборкаПоНачислениям.Следующий() Цикл 
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, Движения.ОсновныеНачисленияРаботниковОрганизаций);
						ДобавитьСтрокуРабочегоВремени(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, Движения.ВнутрисменноеВремяРаботниковОрганизаций);
						//vvv
						СервисныеПроцедурыИФункции.ДобавитьСтрокуРезерва(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, Движения.РезервНачислений);
						//
					КонецЕсли;
				КонецЦикла;
				
				//мСоответствиеДоходовИВычетов = ПроведениеРасчетов.ПолучитьСоответствиеДоходовИВычетов();
				
				////////////////////////////////////////////////////////////////////////
				// дополнительные Начисления
				
				// получим реквизиты табличной части
				ВыборкаПоДопНачислениям = СформироватьЗапросПоДопНачисления(ВыборкаПоШапкеДокумента).Выбрать();
				
				Пока ВыборкаПоДопНачислениям.Следующий() Цикл 
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиДопНачисления(ВыборкаПоДопНачислениям, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуДопНачислений(ВыборкаПоДопНачислениям, ВыборкаПоШапкеДокумента, Движения.ДополнительныеНачисленияРаботниковОрганизаций);
						//vvv
						СервисныеПроцедурыИФункции.ДобавитьСтрокуРезерва(ВыборкаПоДопНачислениям, ВыборкаПоШапкеДокумента, Движения.РезервНачислений);
						//
					КонецЕсли;
				КонецЦикла;
				
				//vvv
				Если Не Отказ Тогда
					ПроведениеРасчетов.ДобавитьДвиженияПериодическихВыплат(Движения, Ссылка);
				КонецЕсли;
				//
				
				////////////////////////////////////////////////////////////////////////
				// ДоговорыНаВыполнениеРабот
				
				// получим реквизиты табличной части
				ВыборкаПоДоговорам = СформироватьЗапросПоДоговорам(ВыборкаПоШапкеДокумента).Выбрать();
				
				Пока ВыборкаПоДоговорам.Следующий() Цикл 
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиДоговора(ВыборкаПоДоговорам, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуДоговора(ВыборкаПоДоговорам, ВыборкаПоШапкеДокумента, Движения.ДополнительныеНачисленияРаботниковОрганизаций);
					КонецЕсли;
				КонецЦикла;
				
				////////////////////////////////////////////////////////////////////////
				// удержания
				
				// получим реквизиты табличной части
				ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(ВыборкаПоШапкеДокумента).Выбрать();
				
				Пока ВыборкаПоУдержаниям.Следующий() Цикл 
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоУдержаниям, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, ВыборкаПоШапкеДокумента, Движения.УдержанияРаботниковОрганизаций);
					КонецЕсли;
				КонецЦикла;
				
				ВыборкаПоПенсионномуФонду = СформироватьЗапросПоПенсионномуФонду().Выбрать();
				
				Пока ВыборкаПоПенсионномуФонду.Следующий() Цикл
					
				     ПроверитьЗаполнениеСтрокиПенсонныйФонд(ВыборкаПоПенсионномуФонду, Отказ, Заголовок);
					 
					 Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуПенсионныйФонд(ВыборкаПоПенсионномуФонду, ВыборкаПоШапкеДокумента, Движения.ЕСНИсчисленный, Движения.УдержанияРаботниковОрганизаций);
					КонецЕсли;
					 
				КонецЦикла;
				
				////////////////////////////////////////////////////////////////////////
				// исчисленный НДФЛ
				
				// получим реквизиты табличной части
				ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ().Выбрать();
				
				Пока ВыборкаПоНДФЛ.Следующий() Цикл 
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоНДФЛ, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ, ВыборкаПоШапкеДокумента, Движения.НДФЛРасчетыСБюджетом, Движения.НДФЛИмущественныеВычетыФизлиц);
					КонецЕсли;
				КонецЦикла;
				
				// НДФЛ к зачету
				// получим реквизиты табличной части
				ВыборкаПоНДФЛКЗачету = СформироватьЗапросПоНДФЛКЗачету().Выбрать();
				Пока ВыборкаПоНДФЛКЗачету.Следующий() Цикл 
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуНДФЛКЗачету(ВыборкаПоНДФЛКЗачету, ВыборкаПоШапкеДокумента);
					КонецЕсли;
				КонецЦикла;
				
				////////////////////////////////////////////////////////////////////////
				// удержанный НДФЛ
				
				// посмотрим в учетную политику
				УпрощенныйУчетНДФЛ = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетНДФЛ");
				Если НЕ Отказ Тогда
					
					ВыборкаПоНДФЛуд = СформироватьЗапросПоНДФЛудержанный().Выбрать();
					Пока ВыборкаПоНДФЛуд.Следующий() Цикл 
						
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуНДФЛудержанный(ВыборкаПоНДФЛуд, ВыборкаПоНДФЛ, ВыборкаПоНДФЛКЗачету, ВыборкаПоШапкеДокумента, Движения.НДФЛРасчетыСБюджетом);
						
					КонецЦикла;
					
				КонецЕсли;
				
				////////////////////////////////////////////////////////////////////////
				// доходы НДФЛ
				
				// сформируем доходы НДФЛ по начислениям документа
				СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, Движения.НДФЛСведенияОДоходах);
				
				////////////////////////////////////////////////////////////////////////
				// погашение займов
				
				// получим реквизиты табличной части
				ВыборкаПоПогашениеЗаймов = СформироватьЗапросПоПогашениеЗайма().Выбрать();
				
				Пока ВыборкаПоПогашениеЗаймов.Следующий() Цикл 
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиПогашениеЗайма(ВыборкаПоПогашениеЗаймов, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуПогашениеЗайма(ВыборкаПоПогашениеЗаймов, ВыборкаПоШапкеДокумента, Движения.ПогашениеЗаймовРаботникамиОрганизаций, Движения.НДФЛСведенияОДоходах, Движения.НДФЛРасчетыСБюджетом, УпрощенныйУчетНДФЛ);
					КонецЕсли;
				КонецЦикла;
				
				////////////////////////////////////////////////////////////////////////
				// взаиморасчеты с работниками
				
				// сформируем начисления к выплате по начислениям документа
				СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, Движения.ВзаиморасчетыСРаботникамиОрганизаций, УчетЗадолженностиПоМесяцам);
				
				// выполним удаление перерасчетов и перезаполнений исправленного документа
				Если Не Отказ И ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
					
					ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка, Истина); // Только по исправленным документам
					ПроведениеРасчетов.УдалитьСведенияОПерезаполненииДокумента(Ссылка, Неопределено, Истина); // Только по исправленным документам и только сотрудников нашего документа
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
	Для Каждого Набор Из Движения Цикл
		Если мНеуправляемыеДвижения.Найти(ТипЗнч(Набор)) = Неопределено Тогда
			Набор.Очистить();
			Набор.Записать();
		КонецЕсли;
	КонецЦикла

	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мНеуправляемыеДвижения = Новый Массив();
мНеуправляемыеДвижения.Добавить(ТипЗнч(Движения.ЗарплатаЗаМесяцОрганизаций));

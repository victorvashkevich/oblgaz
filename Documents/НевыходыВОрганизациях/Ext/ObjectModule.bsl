////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
// Параметры:
//	Нет
//
Процедура Рассчитать() Экспорт
    
    //Перед вызовом процедуры документ должен быть записан
    
    Отказ = Ложь;
	
    // Удалим из начислений зависимые записи
	Для каждого СтрокаТЧ Из Начисления.НайтиСтроки(Новый Структура("ЗависимаяЗапись",Истина)) Цикл
		Начисления.Удалить(СтрокаТЧ);
	КонецЦикла; 
	
    // записываем документ и сразу читаем данные для заполнения наборов записей
    НачатьТранзакцию();
    Записать();
    ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
    // позиционируем выборку
    ВыборкаПоШапкеДокумента.Следующий();
    ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
    ЗафиксироватьТранзакцию();
    
    Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
    ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
    Если Отказ Тогда
        Возврат;
    КонецЕсли;
    
    // Создадим наборы записей используемых регистров 
    НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
    НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
    
	НаборДополнительныеНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборДополнительныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	// Если почасовое отклонение, то записываем движения в регистр ВнутрисменноеВремяРаботниковОрганизаций
    НаборЗаписейРабочееВремя = РегистрыНакопления.ВнутрисменноеВремяРаботниковОрганизаций.СоздатьНаборЗаписей();
    НаборЗаписейРабочееВремя.Отбор.Регистратор.Значение = Ссылка;
    
	МассивИндексыСтрокНачисления = Новый Массив();
	МассивИндексыСтрокДополнительныеНачисления = Новый Массив();
	
    // запишем данные о начислениях в регистр
    Пока ВыборкаПоНачислениям.Следующий() Цикл 
        // проверим очередную строку табличной части
        ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок, ПолучитьМассивВозможныхНачислений());
        Если НЕ Отказ Тогда
			Если ВыборкаПоНачислениям.ОсновныеНачисления Тогда
				ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, НаборОсновныеНачисления);
				МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
				ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, НаборЗаписейРабочееВремя);
			Иначе
				ДобавитьСтрокуДополнительныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям,НаборДополнительныеНачисления);
				МассивИндексыСтрокДополнительныеНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    
    Если Отказ Тогда
        Возврат;
    КонецЕсли;
    
    НаборЗаписейРабочееВремя.Записать();
    
    // Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
    // в текущий набор для того, чтобы в результате сохранения получился максимальный 
    // фактический период действия
    ТаблицаСторноЗаписей = ПроведениеРасчетов.ПолучитьТаблицуСторноЗаписей(НаборОсновныеНачисления.ПолучитьДополнение());
    Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
        // Заполним записи в наборе записей регистра
        // и в табличной части
        ДобавитьСтрокуСторно(НаборОсновныеНачисления, СтрокаСторно);
		МассивИндексыСтрокНачисления.Добавить(Начисления.Количество() - 1);
	КонецЦикла;
	
	// получим список зависимых начислений
	Если ТаблицаСторноЗаписей.Количество() <> 0 Тогда
		// если таблица сторно-записей не пустая, получим таблицу
		// начислений зависисяцих от тех начислений, которые зарегистрированы,
		
		ТаблицаОсновныхНачислений = ПроведениеРасчетов.ПолучитьТаблицуЗависимыхНачисленийОсновные(НаборОсновныеНачисления.Выгрузить());
		Для каждого СтрокаТаблицы Из ТаблицаОсновныхНачислений Цикл
			
			Если СтрокаТаблицы.Начислить > 0 Тогда
				
				// начисление зависит от сторнирующего, добавим не сторно
				Движение = НаборОсновныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.СторнируемыйДокумент = Неопределено;
				Движение.Сторно	= Ложь;
				Движение.Авторасчет	= Истина;
				
				СтрокаТабличнойЧасти = Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СтрокаТаблицы);
				СтрокаТабличнойЧасти.Сторно				  = Ложь;
				СтрокаТабличнойЧасти.Авторасчет			  = Истина;
				СтрокаТабличнойЧасти.СторнируемыйДокумент = Неопределено;
				СтрокаТабличнойЧасти.ДатаНачала			  = СтрокаТаблицы.ПериодДействияНачало;
    			СтрокаТабличнойЧасти.ДатаОкончания		  = СтрокаТаблицы.ПериодДействияКонец;
				МассивИндексыСтрокНачисления.Добавить(Начисления.Количество() - 1);
				
			КонецЕсли;
			
			Если СтрокаТаблицы.Сторнировать > 0 Тогда
				
				// начисление зависит от сторнируемого, добавим сторно
				Движение = НаборОсновныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.Сторно	= Истина;
				Движение.Авторасчет	= Истина;
				
				СтрокаТабличнойЧасти = Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СтрокаТаблицы);
				СтрокаТабличнойЧасти.Сторно				  = Истина;
				СтрокаТабличнойЧасти.Авторасчет			  = Истина;
				СтрокаТабличнойЧасти.ДатаНачала			  = СтрокаТаблицы.ПериодДействияНачало;
    			СтрокаТабличнойЧасти.ДатаОкончания		  = СтрокаТаблицы.ПериодДействияКонец;
				МассивИндексыСтрокНачисления.Добавить(Начисления.Количество() - 1);
				
			КонецЕсли;	
			
		КонецЦикла;
		
		ТаблицаСторноЗаписей.Колонки.Удалить("ПериодРегистрации");
		ТаблицаСторноЗаписей.Колонки.ПериодРегистрацииСторно.Имя = "ПериодРегистрации";
		ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияНачало");
		ТаблицаСторноЗаписей.Колонки.ПериодДействияНачалоСторно.Имя = "ПериодДействияНачало";
		ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияКонец");
		ТаблицаСторноЗаписей.Колонки.ПериодДействияКонецСторно.Имя = "ПериодДействияКонец";
		ТаблицаДополнительныхНачислений = ПроведениеРасчетов.ПолучитьТаблицуЗависимыхНачисленийДополнительные(ТаблицаСторноЗаписей);
		Если ТаблицаДополнительныхНачислений.Количество() > 0 Тогда
			
			Для каждого СтрокаТаблицы Из ТаблицаДополнительныхНачислений Цикл
				
				Движение = НаборДополнительныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.Сторно	= Истина;
				Движение.Авторасчет	= Истина;
				
				СтрокаТабличнойЧасти = Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СтрокаТаблицы);
				СтрокаТабличнойЧасти.ДатаНачала = СтрокаТаблицы.БазовыйПериодНачало;
				СтрокаТабличнойЧасти.ДатаОкончания = СтрокаТаблицы.БазовыйПериодКонец;
				СтрокаТабличнойЧасти.Сторно	= Истина;
				СтрокаТабличнойЧасти.Авторасчет	= Истина;
				СтрокаТабличнойЧасти.ЗависимаяЗапись= Истина;
				МассивИндексыСтрокДополнительныеНачисления.Добавить(Начисления.Количество() - 1);
			
				Движение = НаборДополнительныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.СторнируемыйДокумент = Неопределено;
				Движение.Сторно	= Ложь;
				Движение.Авторасчет	= Истина;
				
				СтрокаТабличнойЧасти = Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СтрокаТаблицы);
				СтрокаТабличнойЧасти.ДатаНачала = СтрокаТаблицы.БазовыйПериодНачало;
				СтрокаТабличнойЧасти.ДатаОкончания = СтрокаТаблицы.БазовыйПериодКонец;
				СтрокаТабличнойЧасти.Сторно	= Ложь;
				СтрокаТабличнойЧасти.Авторасчет	= Истина;
				СтрокаТабличнойЧасти.ЗависимаяЗапись= Истина;
				МассивИндексыСтрокДополнительныеНачисления.Добавить(Начисления.Количество() - 1);
			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
    // рассчитаем записи начислений 
    ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение,Начисления,,,,,,МассивИндексыСтрокНачисления);
	НаборОсновныеНачисления.Записать(Истина, Истина);
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДополнительныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение,Начисления,,,,,,МассивИндексыСтрокДополнительныеНачисления);
	НаборДополнительныеНачисления.Записать(Истина, Истина);
	
    // Удаляем движения после расчета
    НаборОсновныеНачисления.Очистить();
   	НаборОсновныеНачисления.Записать(Истина, Ложь);

    
    НаборЗаписейРабочееВремя.Очистить();
    НаборЗаписейРабочееВремя.Записать();
    
	НаборДополнительныеНачисления.Очистить();
	НаборДополнительныеНачисления.Записать(Истина, Ложь);

	
КонецПроцедуры // Рассчитать()

// Выполняет перерасчет по заданному списку физлиц
// Возвращаемое значение
//	Нет
//
Процедура Перерассчитать(Физлица = Неопределено) Экспорт
    
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
    Если Не ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
        Возврат;
    КонецЕсли;
    
    // получим список перерассчитываемых физлиц
    ФизлицаСписок = Новый СписокЗначений;
    
    Если Физлица = Неопределено Тогда
        // таблица ФизлицаДляПерерасчета
        // Список физлиц по которым необходимо выполнить перерасчет
        // Поля:
        //		ФизЛицо
        // Описание:
        // Получает список неповторяющихся физлиц по которым есть записи
        // перерасчета в таблице перерасчета основных начислений
        //
        Запрос = Новый Запрос;
        
        Запрос.УстановитьПараметр("парамСсылка", Ссылка);
        
        Запрос.Текст =
        "ВЫБРАТЬ РАЗЛИЧНЫЕ
        |	Перерасчет.ФизЛицо
        |ИЗ
        |	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
        |
        |ГДЕ
        |	Перерасчет.ОбъектПерерасчета = &парамСсылка";
        
        ФизлицаСписок.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
        
    Иначе
        ФизлицаСписок = Физлица;
        
    КонецЕсли;
    
    // если не перерассчитываем никого - возврат
    Если ФизлицаСписок.Количество() = 0 Тогда
        Возврат;
    КонецЕсли;
    
    // перечитываем данные в транзакции
    НачатьТранзакцию();
    Прочитать();
    // Получим реквизиты шапки из запроса
    ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
    // прочитать движения
    Движения.ОсновныеНачисленияРаботниковОрганизаций.Прочитать();
    Движения.НДФЛСведенияОДоходах.Прочитать();
    Движения.ВзаиморасчетыСРаботникамиОрганизаций.Прочитать();
    ЗафиксироватьТранзакцию();
    
    // позиционируем выборку
    ВыборкаПоШапкеДокумента.Следующий();
    
    // сначала удалим сведения о доходах НДФЛ по перерассчитываемым физлицам
    НДФЛСведенияОДоходах = Движения.НДФЛСведенияОДоходах;
    ПоследнееДвижение = НДФЛСведенияОДоходах.Количество()-1;
    Для Сч = 0 По ПоследнееДвижение Цикл
        // удалим записи по всем физлицам полученного списка
        // обходим в обратном порядке
        Если ФизлицаСписок.НайтиПоЗначению(НДФЛСведенияОДоходах[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
            НДФЛСведенияОДоходах.Удалить(ПоследнееДвижение - Сч);
        КонецЕсли;
    КонецЦикла;
    
    // перерассчитываем записи начислений
    // при этом передаем не только набор записей регистра расчета, 
    // но и таблицу значений в которую будет заполнять движения для НДФЛСведенияОДоходах
    ДвиженияНДФЛСведенияОДоходах = 	Движения.НДФЛСведенияОДоходах.Выгрузить();// фактически - создаем структуру таблицы значений
    ПроведениеРасчетов.ПереРассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", Движения.ОсновныеНачисленияРаботниковОрганизаций, Физлица, ДвиженияНДФЛСведенияОДоходах, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, Начисления);
    
    // запишем без выполнения пересчета фактического периода действия
    Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
    
    // запишем движения по доходам НДФЛ, которые формируются при ПереРассчитатьЗаписиРегистраРасчета
    ПроведениеРасчетов.СвернутьДвиженияНДФЛСведенияОДоходах(ДвиженияНДФЛСведенияОДоходах);
    Движения.НДФЛСведенияОДоходах.Загрузить(ДвиженияНДФЛСведенияОДоходах);
    Движения.НДФЛСведенияОДоходах.Записать();
    
    // записываем документ
    Записать();
    
    ////////////////////////////////////////////////////////////////////////
    // взаиморасчеты с работниками
    
    // сначала удалим сведения о взаиморасчетах с работниками
    ВзаиморасчетыСРаботникамиОрганизаций = Движения.ВзаиморасчетыСРаботникамиОрганизаций;
    ПоследнееДвижение = ВзаиморасчетыСРаботникамиОрганизаций.Количество()-1;
    Для Сч = 0 По ПоследнееДвижение Цикл
        // удалим записи по всем физлицам полученного списка
        // обходим в обратном порядке
        Если ФизлицаСписок.НайтиПоЗначению(ВзаиморасчетыСРаботникамиОрганизаций[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
            ВзаиморасчетыСРаботникамиОрганизаций.Удалить(ПоследнееДвижение - Сч);
        КонецЕсли;
    КонецЦикла;
    
    // ведется ли учет задолженности в разрезе периодов возникновения задолженности
    УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
    
    // теперь сформируем начисления к выплате по начислениям документа для перерассчитываемых работников
    СформироватьВзаиморасчетыСРаботниками(Движения.ВзаиморасчетыСРаботникамиОрганизаций, УчетЗадолженностиПоМесяцам, Истина, Физлица);
    Движения.ВзаиморасчетыСРаботникамиОрганизаций.Записать();
    
    ////////////////////////////////////////////////////////////////////////
    // Удалим записи перерасчета по которым выполнен перерасчет
	ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка);
    
КонецПроцедуры // Перерассчитать()

// Заполняет документ по перерассчитываемому документу
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных
	
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
    
	Если Сотрудники = "ПоДаннымПерерасчета" Тогда
		Исправления = ПроведениеРасчетов.ПолучитьДокументИсправление(ПерерассчитываемыйДокумент, "КритерийОтбора"); 
		Запрос.УстановитьПараметр("Исправления", Исправления);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Сотрудник
		|ИЗ
		|	Документ.НевыходыВОрганизациях.Начисления КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ СотрудникиОрганизаций.Сотрудник В
		|				(ВЫБРАТЬ
		|					Начисления.Сотрудник
		|				ИЗ
		|					Документ.НевыходыВОрганизациях.Начисления КАК Начисления
		|				ГДЕ
		|					Начисления.Ссылка В (&Исправления)
		|					И Начисления.СторнируемыйДокумент = &ПерерассчитываемыйДокумент
		|					И Начисления.Сторно))
		|	И СотрудникиОрганизаций.Физлицо В
		|			(ВЫБРАТЬ
		|				Перерасчет.ФизЛицо
		|			ИЗ
		|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|			ГДЕ
		|				Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент)";
		Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам", Сотрудники = Неопределено);
	
    // выполним запрос к Начисления
    Запрос.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    |	Начисления.Сотрудник,
    |	Начисления.Сотрудник.Физлицо КАК Физлицо,
    |	Начисления.ВидРасчета,
    |	Начисления.ДатаНачала,
    |	Начисления.ДатаОкончания,
    |	Начисления.Показатель1,
    |	Начисления.Показатель2,
    |	Начисления.Показатель3,
    |	Начисления.Показатель4,
    |	Начисления.Показатель5,
    |	Начисления.Показатель6,
    |	Начисления.ПодразделениеОрганизации,
    |	-Начисления.Результат КАК Результат,
    |	-Начисления.ОтработаноДней КАК ОтработаноДней,
    |	-Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
    |	-Начисления.ОтработаноДнейПоПятидневке КАК ОтработаноДнейПоПятидневке,
    |	-Начисления.НормаДней КАК НормаДней,
    |	-Начисления.НормаЧасов КАК НормаЧасов,
    |	-Начисления.НормаДнейПоПятидневке КАК НормаДнейПоПятидневке,
    |	Начисления.ПериодРасчетаСреднегоЗаработкаНачало,
    |	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание,
    |	Начисления.ДатаНачалаСобытия,
    |	Начисления.ОплачиватьЧасов КАК ОплачиватьЧасов,
    |	ИСТИНА КАК Сторно,
    |	ЛОЖЬ КАК Авторасчет,
    |	-Начисления.ОтработаноЧасовПоПятидневке КАК ОтработаноЧасовПоПятидневке,
    |	-Начисления.НормаЧасовПоПятидневке КАК НормаЧасовПоПятидневке,
    |	-Начисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
    |	Начисления.Ссылка КАК СторнируемыйДокумент,
    |	Начисления.НомерСтроки КАК НомерСтроки
    |ИЗ
    |	Документ.НевыходыВОрганизациях.Начисления КАК Начисления
    |ГДЕ
    |	Начисления.Ссылка = &ПерерассчитываемыйДокумент
    |	И (НЕ Начисления.Сторно)
    |	И (&ПоВсемСотрудникам
    |			ИЛИ Начисления.Сотрудник В (&Сотрудники))
    |	И Начисления.Ссылка.Проведен
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |	Начисления.Сотрудник,
    |	Начисления.Сотрудник.Физлицо,
    |	Начисления.ВидРасчета,
    |	Начисления.ДатаНачала,
    |	Начисления.ДатаОкончания,
    |	Начисления.Показатель1,
    |	Начисления.Показатель2,
    |	Начисления.Показатель3,
    |	Начисления.Показатель4,
    |	Начисления.Показатель5,
    |	Начисления.Показатель6,
    |	Начисления.ПодразделениеОрганизации,
    |	0,
    |	0,
    |	0,
    |	0,
    |	0,
    |	0,
    |	0,
    |	Начисления.ПериодРасчетаСреднегоЗаработкаНачало,
    |	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание,
    |	Начисления.ДатаНачалаСобытия,
    |	Начисления.ОплачиватьЧасов,
    |	ЛОЖЬ,
    |	ИСТИНА,
    |	0,
    |	0,
    |	0,
    |	NULL,
    |	Начисления.НомерСтроки
    |ИЗ
    |	Документ.НевыходыВОрганизациях.Начисления КАК Начисления
    |ГДЕ
    |	Начисления.Ссылка = &ПерерассчитываемыйДокумент
    |	И (НЕ Начисления.Сторно)
    |	И (&ПоВсемСотрудникам
    |			ИЛИ Начисления.Сотрудник В (&Сотрудники))
    |	И Начисления.Ссылка.Проведен
    |
    |УПОРЯДОЧИТЬ ПО
    |	Сторно УБЫВ,
    |	НомерСтроки";
    
	Начисления.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры  // ЗаполнитьПоПерерассчитываемомуДокументу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует массив возможных начислений
//
Функция ПолучитьМассивВозможныхНачислений()

	Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("НулеваяСумма", Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисления.Ссылка КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	(НЕ ОсновныеНачисления.Предопределенный)
	|	И ОсновныеНачисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.НулеваяСумма)
	|	И ОсновныеНачисления.ВидВремени В(&ВидВремени)";
	
	ВидВремени = Новый Массив; 
	ВидВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеНеотработанное);
	ВидВремени.Добавить(Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
	
	Запрос.УстановитьПараметр("ВидВремени", ВидВремени);
	МассивНачислений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета");
	МассивНачислений.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет);
	МассивНачислений.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Невыход);
	МассивНачислений.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул);
	МассивНачислений.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыУчебный);
	МассивНачислений.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыПоТКРФ);

	Возврат МассивНачислений;

КонецФункции // ПолучитьМассивВозможныхНачислений()

// На основе данных строки выборки добавляет в набор записей регистра сторно запись 
//
// Параметры: 
//	Строка				- спозиционированная на определенной строке выборка 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуСторно(Движения, Строка)
    
    // новая запись движений
    Движение = Движения.Добавить();
    ЗаполнитьЗначенияСвойств(Движение,Строка,"БазовыйПериодНачало,БазовыйПериодКонец,ВидРасчета,Сотрудник,Физлицо,Организация," + 
				    "ГрафикРаботы,ГрафикРаботыНорма,ВидУчетаВремени,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,ПодразделениеОрганизации,ОбособленноеПодразделение," + 
				    "ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,ДатаНачалаСобытия,Авторасчет,СторнируемыйДокумент");
	
	// Свойства
    Движение.ПериодРегистрации		= Строка.ПериодРегистрацииСторно;
    Движение.ПериодДействияНачало	= Строка.ПериодДействияНачалоСторно;
    Движение.ПериодДействияКонец	= Строка.ПериодДействияКонецСторно;
    Движение.Сторно					= Истина;
    
    // новая строка табличной части сторно начисления
    СтрокаТабличнойЧасти = Начисления.Добавить();
    ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,Строка,"ВидРасчета,Сотрудник,Физлицо,ПодразделениеОрганизации,ДатаНачалаСобытия," + 
				    "ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,Авторасчет,СторнируемыйДокумент,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6");
	
	// Свойства
    СтрокаТабличнойЧасти.ДатаНачала		= Строка.ПериодДействияНачалоСторно;
	СтрокаТабличнойЧасти.ДатаОкончания	= Строка.ПериодДействияКонецСторно;
	СтрокаТабличнойЧасти.Сторно			= Истина;
	СтрокаТабличнойЧасти.ЗависимаяЗапись= Истина;
	
КонецПроцедуры // ДобавитьСтрокуСторно()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()
    
    Запрос = Новый Запрос;
    
    // Установим параметры запроса
    Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
    
    Запрос.Текст =
    "ВЫБРАТЬ
    |	НевыходыВОрганизациях.Дата,
    |	НевыходыВОрганизациях.Организация,
    |	ВЫБОР
    |		КОГДА НевыходыВОрганизациях.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |			ТОГДА НевыходыВОрганизациях.Организация
    |		ИНАЧЕ НевыходыВОрганизациях.Организация.ГоловнаяОрганизация
    |	КОНЕЦ КАК ГоловнаяОрганизация,
    |	НевыходыВОрганизациях.Организация КАК ОбособленноеПодразделение,
    |	НевыходыВОрганизациях.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
    |	НевыходыВОрганизациях.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
    |	НевыходыВОрганизациях.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
    |	НевыходыВОрганизациях.ПериодРегистрации,
    |	НевыходыВОрганизациях.Ответственный,
    |	НевыходыВОрганизациях.Ссылка,
    |	ВЫБОР
    |		КОГДА НевыходыВОрганизациях.СпособРегистрацииВремени = ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены)
    |			ТОГДА ИСТИНА
    |		ИНАЧЕ ЛОЖЬ
    |	КОНЕЦ КАК РегистрируютсяПочасовыеОтклонения,
    |	ВЫБОР
    |		КОГДА НевыходыВОрганизациях.Дата < НевыходыВОрганизациях.ПериодРегистрации
    |			ТОГДА НевыходыВОрганизациях.ПериодРегистрации
    |		КОГДА НевыходыВОрганизациях.Дата > КОНЕЦПЕРИОДА(НевыходыВОрганизациях.ПериодРегистрации, МЕСЯЦ)
    |			ТОГДА КОНЕЦПЕРИОДА(НевыходыВОрганизациях.ПериодРегистрации, МЕСЯЦ)
    |		ИНАЧЕ НевыходыВОрганизациях.Дата
    |	КОНЕЦ КАК ПериодРегистрацииДополнительныхНачислений
    |ИЗ
    |	Документ.НевыходыВОрганизациях КАК НевыходыВОрганизациях
    |ГДЕ
    |	НевыходыВОрганизациях.Ссылка = &ДокументСсылка";
    
    Возврат Запрос.Выполнить();
    
КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части документа "Начисления" 
//
// Параметры: 
//	Режим		- режим проведения.
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента)
    
    ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
    СписокСтруктурныхПодразделений = ПроцедурыУправленияПерсоналом.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
    СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);
	
	КодОплатыТрудаПоНДФЛ = Новый Массив;
    КодОплатыТрудаПоНДФЛ.Добавить(Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию);
	//КодОплатыТрудаПоНДФЛ.Добавить(Справочники.ДоходыНДФЛ.Код2012);
	
    Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
    
    // Установим параметры запроса
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",	СписокСтруктурныхПодразделений);
    Запрос.УстановитьПараметр("ДокументСсылка",					Ссылка);
    Запрос.УстановитьПараметр("ГоловнаяОрганизация",			ГоловнаяОрганизация);
    Запрос.УстановитьПараметр("КодОплатыТрудаПоНДФЛ", 			КодОплатыТрудаПоНДФЛ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.Сотрудник.Наименование КАК СотрудникНаименование,
	|	ТЧНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧНачисления.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(ТЧНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ДатаОкончания,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ТЧНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ТЧНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ТЧНачисления.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.КодДоходаНДФЛ В (&КодОплатыТрудаПоНДФЛ)
	|			ТОГДА ТЧНачисления.ДатаНачала
	|		ИНАЧЕ ТЧНачисления.Ссылка.ПериодРегистрации
	|	КОНЕЦ КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ТЧНачисления.Показатель1,
	|	ТЧНачисления.Показатель2,
	|	ТЧНачисления.Показатель3,
	|	ТЧНачисления.Показатель4,
	|	ТЧНачисления.Показатель5,
	|	ТЧНачисления.Показатель6,
	|	ТЧНачисления.Результат,
	|	ТЧНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	//vvv
	|	ТЧНачисления.Должность КАК Должность,
	//
	|	ТЧНачисления.НормаДней,
	|	ТЧНачисления.НормаЧасов,
	|	ТЧНачисления.НормаДнейПоПятидневке,
	|	ТЧНачисления.НормаЧасовПоПятидневке,
	|	ТЧНачисления.ОплаченоДнейЧасов,
	|	ТЧНачисления.ОтработаноДней,
	|	ТЧНачисления.ОтработаноЧасов,
	|	ТЧНачисления.ОтработаноДнейПоПятидневке,
	|	ТЧНачисления.ОтработаноЧасовПоПятидневке,
	|	ТЧНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ТЧНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ТЧНачисления.ДатаНачалаСобытия,
	|	ТЧНачисления.Сторно,
	|	ВЫБОР
	|		КОГДА (НЕ ТЧНачисления.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ТЧНачисления.Авторасчет,
	|	ТЧНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|	ТЧНачисления.ОплачиватьЧасов КАК ОплачиватьЧасов,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяПочасовымОтклонением,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сторно
	|			ТОГДА ТЧНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент,
	|	ТЧНачисления.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления,
	|	ТЧНачисления.ЧислоМесяцев,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сторно
	|				И ТЧНачисления.СторнируемыйДокумент = ТЧНачисления.Ссылка.ПерерассчитываемыйДокумент
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтрокаИсправления
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.НевыходыВОрганизациях.Начисления КАК ТЧНачисления
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
    // Описание текста запроса:
    // Первая часть запроса  - вид строки запроса "ДанныеДляДвиженийКадров": 
    // 1. Выборка "ТЧНачисления": 
    //		Выбираются строки документа.  
    
    ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.СотрудникНаименование,
	|	ТЧНачисления.Физлицо КАК Физлицо,
	|	ТЧНачисления.ДатаНачала КАК ДатаНачала,
	|	ТЧНачисления.ДатаОкончания КАК ДатаОкончания,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ТЧНачисления.СпособРасчета КАК СпособРасчета,
	|	ТЧНачисления.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	ТЧНачисления.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ТЧНачисления.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	ТЧНачисления.МесяцНалоговогоПериода,
	|	ТЧНачисления.ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ТЧНачисления.Показатель1,
	|	ТЧНачисления.Показатель2,
	|	ТЧНачисления.Показатель3,
	|	ТЧНачисления.Показатель4,
	|	ТЧНачисления.Показатель5,
	|	ТЧНачисления.Показатель6,
	|	ТЧНачисления.Результат,
	|	ТЧНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	//vvv
	|	ТЧНачисления.Должность КАК Должность,
	//
	|	ТЧНачисления.НормаДней,
	|	ТЧНачисления.НормаЧасов,
	|	ТЧНачисления.НормаДнейПоПятидневке,
	|	ТЧНачисления.НормаЧасовПоПятидневке,
	|	ТЧНачисления.ОплаченоДнейЧасов,
	|	ТЧНачисления.ОтработаноДней,
	|	ТЧНачисления.ОтработаноЧасов,
	|	ТЧНачисления.ОтработаноДнейПоПятидневке,
	|	ТЧНачисления.ОтработаноЧасовПоПятидневке,
	|	ТЧНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ТЧНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ТЧНачисления.ДатаНачалаСобытия,
	|	ТЧНачисления.Сторно,
	|	ТЧНачисления.СтрокаИсправления,
	|	ТЧНачисления.ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ТЧНачисления.Авторасчет,
	|	ТЧНачисления.ВидИспользованияРабочегоВремени,
	|	ТЧНачисления.ОплачиватьЧасов КАК ОплачиватьЧасов,
	|	ТЧНачисления.ЯвляетсяПочасовымОтклонением,
	|	ТЧНачисления.СторнируемыйДокумент,
	|	ТЧНачисления.ОсновныеНачисления,
	|	ТЧНачисления.ЧислоМесяцев,
	|	ВЫБОР
	|		КОГДА ГрафикРаботыПоСотруднику.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеПоРаботникуНаДатуНачисления.ПериодЗавершения <= ТЧНачисления.ДатаНачалаСобытия
	|							И ДанныеПоРаботникуНаДатуНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботыЗавершения
	|					ИНАЧЕ ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы
	|				КОНЕЦ
	|		ИНАЧЕ ТЧНачисления.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ДанныеПоРаботникуНаДатуНачисления.ПериодЗавершения <= ТЧНачисления.ДатаНачалаСобытия
	|					И ДанныеПоРаботникуНаДатуНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|			ИНАЧЕ ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|		КОНЕЦ, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени
	|ИЗ
	|	ВТДанныеДокумента КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК Период
	|		ИЗ
	|			ВТДанныеДокумента КАК ТЧНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО (РаботникиОрганизации.Период <= ТЧНачисления.ДатаНачалаСобытия)
	|					И ТЧНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧНачисления.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуНаДатуНачисления
	|		ПО (ДатыПоследнихДвиженийРаботников.Период = ДанныеПоРаботникуНаДатуНачисления.Период)
	|			И ТЧНачисления.Сотрудник = ДанныеПоРаботникуНаДатуНачисления.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеДокумента КАК СтрокиНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|				ПО СтрокиНачисления.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|					И (ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаНачала, МЕСЯЦ))) КАК ГрафикРаботыПоСотруднику
	|		ПО ТЧНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
    
    Запрос.Текст = ТекстЗапроса;
    
    Возврат Запрос.Выполнить();
    
КонецФункции // СформироватьЗапросПоНачислениям()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")
    
    Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
        ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
        ОбщегоНазначения.СообщитьОбОшибке("Не указан период регистрации (месяц)!", Отказ, Заголовок);
    КонецЕсли;
    
    // соответствие периодов документа и перерассчитываемого документа
    Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> Null 
        И ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
        ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
    КонецЕсли;
    // соответствие организаций документа и перерассчитываемого документа
    Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> Null 
        И ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
        ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!", Отказ, Заголовок);
    КонецЕсли;
    
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//								  из результата запроса по товарам документа, 
//	Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "", МассивНачислений)
    
    СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
    """ табл. части ""Начисления"": ";
    
    // Сотрудник
    Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
        ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
    КонецЕсли;
    
    // ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	ИначеЕсли Не ВыборкаПоСтрокамДокумента.СтрокаИсправления Тогда
		Если ВыборкаПоШапкеДокумента.РегистрируютсяПочасовыеОтклонения <> ВыборкаПоСтрокамДокумента.ЯвляетсяПочасовымОтклонением 
			и МассивНачислений.Найти(ВыборкаПоСтрокамДокумента.ВидРасчета) <> Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный вид расчета не соответствует способу регистрации времени в документе!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
    
    // Дата начала
    Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
        ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
    ИначеЕсли Не ВыборкаПоСтрокамДокумента.ЯвляетсяПочасовымОтклонением Тогда
        // Дата окончания
        Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
            Если ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоСтрокамДокумента.ДатаНачала Тогда
                ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ, Заголовок);
            ИначеЕсли ВыборкаПоСтрокамДокумента.ОсновныеНачисления Тогда	
                Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаОкончания) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
                    ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ, Заголовок);
                КонецЕсли;
            КонецЕсли;
        Иначе
            ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
        КонецЕсли;
    КонецЕсли;
    
    // Дата начала события
    Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия) И ВыборкаПоСтрокамДокумента.ОсновныеНачисления Тогда
        ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала события!", Отказ, Заголовок);
    КонецЕсли;
    
	Если ВыборкаПоШапкеДокумента.РегистрируютсяПочасовыеОтклонения И ВыборкаПоСтрокамДокумента.ЯвляетсяПочасовымОтклонением 
		и МассивНачислений.Найти(ВыборкаПоСтрокамДокумента.ВидРасчета) <> Неопределено Тогда
        
        // ВидИспользованияРабочегоВремени
        Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени) Тогда
            ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан учет времени для вида расчета!", Отказ, Заголовок);
        КонецЕсли;
        
        // ОплачиватьЧасов
        Если ВыборкаПоСтрокамДокумента.ОплачиватьЧасов <= 0 Или ВыборкаПоСтрокамДокумента.ОплачиватьЧасов > 24 Тогда
            ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "количество оплачиваемых часов должно быть положительным и не превышать 24!", Отказ, Заголовок);
        КонецЕсли;
        
    КонецЕсли;
    
    // Подразделение
    Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
        ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение организации!", Отказ, Заголовок);
    ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
        ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
    КонецЕсли;
    
    // График работы
    Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы) и ВыборкаПоСтрокамДокумента.ОсновныеНачисления Тогда
        ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан рабочий график работника!", Отказ, Заголовок);
    КонецЕсли;
    
    // Организация сотрудника должна совпадать с организацией документа
    Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
        ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
    КонецЕсли;
    
КонецПроцедуры

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//	Выборка				- спозиционированная на определенной строке выборка 
//						  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборОсновныеНачисления)
    
    Если ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени Или ВыборкаПоСтрокамДокумента.ЯвляетсяПочасовымОтклонением Тогда
        ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
    Иначе
        ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
    КонецЕсли;
    
    Движение = НаборОсновныеНачисления.Добавить();
    
    // Свойства
    Движение.ПериодРегистрации				= ВыборкаПоШапкеДокумента.ПериодРегистрации;
    Движение.ПериодДействияНачало			= ВыборкаПоСтрокамДокумента.ДатаНачала;
    Движение.ПериодДействияКонец			= ВыборкаПоСтрокамДокумента.ДатаОкончания;
    Движение.ВидРасчета						= ВыборкаПоСтрокамДокумента.ВидРасчета;
    Движение.Сторно							= ВыборкаПоСтрокамДокумента.Сторно;
    
    // Измерения
    Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
    Движение.ФизЛицо						= ВыборкаПоСтрокамДокумента.ФизЛицо;
    Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
    
    // Ресурсы
    Движение.Результат						= ВыборкаПоСтрокамДокумента.Результат;
    
    // ресурсы по норме времени
    Если ВыборкаПоСтрокамДокумента.ЗачетНормыВремени Тогда
        Движение.НормаДней					= ВыборкаПоСтрокамДокумента.НормаДней;
        Движение.НормаЧасов					= ВыборкаПоСтрокамДокумента.НормаЧасов;
        Движение.НормаДнейПоПятидневке		= ВыборкаПоСтрокамДокумента.НормаДнейПоПятидневке;
        Движение.НормаЧасовПоПятидневке		= ВыборкаПоСтрокамДокумента.НормаЧасовПоПятидневке;
    КонецЕсли;
    
    // ресурсы по отработанному времени
    Если ВыборкаПоСтрокамДокумента.ЗачетОтработанногоВремени Тогда
        Движение.ОтработаноДней				= ВыборкаПоСтрокамДокумента.ОтработаноДней;
        Движение.ОтработаноЧасов			= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
        Движение.ОтработаноДнейПоПятидневке	= ВыборкаПоСтрокамДокумента.ОтработаноДнейПоПятидневке;
        Движение.ОтработаноЧасовПоПятидневке= ВыборкаПоСтрокамДокумента.ОтработаноЧасовПоПятидневке;
    КонецЕсли;
    
    // Реквизиты
    Движение.Показатель1					= ВыборкаПоСтрокамДокумента.Показатель1;
	Движение.Показатель2					= ВыборкаПоСтрокамДокумента.Показатель2;
	Движение.Показатель3					= ВыборкаПоСтрокамДокумента.Показатель3;
	Движение.Показатель4					= ВыборкаПоСтрокамДокумента.Показатель4;
	Движение.Показатель5					= ВыборкаПоСтрокамДокумента.Показатель5;
	Движение.Показатель6					= ВыборкаПоСтрокамДокумента.Показатель6;
    Движение.ПодразделениеОрганизации		= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	//vvv
	Движение.Должность						= ВыборкаПоСтрокамДокумента.Должность;
	//
    Движение.ОбособленноеПодразделение		= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
    Движение.ГрафикРаботы					= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
    Движение.ВидУчетаВремени				= ВидУчетаВремени;
    Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
    Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
    Движение.ДатаНачалаСобытия				= ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия;
    Движение.Авторасчет						= ВыборкаПоСтрокамДокумента.Авторасчет;
    Движение.СторнируемыйДокумент			= ВыборкаПоСтрокамДокумента.СторнируемыйДокумент;
    
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры:
//	Выборка				- спозиционированная на определенной строке выборка
//						  из результата запроса к ТЧ документа
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуДополнительныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборДополнительныеНачисления)
	
	Движение = НаборДополнительныеНачисления.Добавить();
	
	// Свойства
	Движение.ПериодРегистрации				= ВыборкаПоШапкеДокумента.ПериодРегистрацииДополнительныхНачислений;
	Движение.ВидРасчета						= ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно							= ВыборкаПоСтрокамДокумента.Сторно;
	
	// Измерения
	Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.Физлицо						= ВыборкаПоСтрокамДокумента.Физлицо;
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Ресурсы
	Движение.Результат						= ВыборкаПоСтрокамДокумента.Результат;
	Движение.ОплаченоДнейЧасов				= ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов;

	// Реквизиты
	Движение.ПодразделениеОрганизации		= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	Движение.ОбособленноеПодразделение		= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.Показатель1					= ВыборкаПоСтрокамДокумента.Показатель1;
	Движение.Показатель2					= ВыборкаПоСтрокамДокумента.Показатель2;
	Движение.Показатель3					= ВыборкаПоСтрокамДокумента.Показатель3;
	Движение.Показатель4					= ВыборкаПоСтрокамДокумента.Показатель4;
	Движение.Показатель5					= ВыборкаПоСтрокамДокумента.Показатель5;
	Движение.Показатель6					= ВыборкаПоСтрокамДокумента.Показатель6;
	Движение.ГрафикРаботы					= ВыборкаПоСтрокамДокумента.ГрафикРаботы;

	Движение.ПериодРасчетаСреднегоЗаработкаНачало	 = ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
	Движение.ПериодРасчетаСреднегоЗаработкаОкончание = ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
	
	Если ВыборкаПоСтрокамДокумента.Сторно Тогда
		Движение.СторнируемыйДокумент = ВыборкаПоСтрокамДокумента.СторнируемыйДокумент;
	КонецЕсли;
	
	Движение.БазовыйПериодНачало = ВыборкаПоСтрокамДокумента.ДатаНачала;
	Движение.БазовыйПериодКонец  = ВыборкаПоСтрокамДокумента.ДатаОкончания;
	Движение.ЧислоМесяцев		 = ВыборкаПоСтрокамДокумента.ЧислоМесяцев;
	Движение.Авторасчет						= Истина;
	
КонецПроцедуры // ДобавитьСтрокуДополнительныхНачислений()

// По выборке из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//	ВыборкаПоШапкеДокумента				- спозиционированная на определенной строке выборка 
//										  из результата запроса к документу 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, НаборЗаписей)
    
    Если ВыборкаПоНачислениям.ЯвляетсяПочасовымОтклонением Тогда
        Движение = НаборЗаписей.Добавить();
        
        // Свойства
        Движение.Период = ВыборкаПоНачислениям.ДатаНачала;
        
        // Измерения
        Движение.Сотрудник							= ВыборкаПоНачислениям.Сотрудник;
        Движение.Организация						= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
        Движение.ВидИспользованияРабочегоВремени	= ВыборкаПоНачислениям.ВидИспользованияРабочегоВремени;
        
        // Ресурсы
        Движение.Часов								= ВыборкаПоНачислениям.ОплачиватьЧасов;
        
    КонецЕсли;
    
КонецПроцедуры // ДобавитьСтрокуРабочегоВремени()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента						- выборка из результата запроса по шапке документа
//	СтруктураПроведенияПоРегистрамНакопления	- структура, содержащая имена регистров 
//												  накопления по которым надо проводить документ
//	СтруктураПараметров							- структура параметров проведения.
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, УчетЗадолженностиПоМесяцам)
    
    Если ЗначениеЗаполнено(ВыборкаПоТЧ.КодДоходаНДФЛ) Тогда
        
        Движение = Движения.НДФЛСведенияОДоходах.Добавить();
        
        // Свойства
        Движение.Период						= ВыборкаПоТЧ.МесяцНалоговогоПериода;
        
        // Измерения
        Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
        Движение.ФизЛицо					= ВыборкаПоТЧ.ФизЛицо;
        Движение.КодДохода					= ВыборкаПоТЧ.КодДоходаНДФЛ;
        Движение.ПериодРегистрации			= НачалоМесяца(ПериодРегистрации);
        
        // Ресурсы
        Движение.СуммаДохода				= ВыборкаПоТЧ.Результат; 
        
        // Реквизиты
        Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
        Движение.ИсчисленоИзЗарплаты		= Истина;
        Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации; 
		Движение.ВидРасчета = ВыборкаПоТЧ.ВидРасчета;
    КонецЕсли;
    
    Если ВыборкаПоТЧ.Результат <> 0 Тогда
        
        Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
        
        // Свойства
        Движение.Период					= КонецМесяца(ПериодРегистрации);
        Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
        
        // Измерения
        Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
        Движение.ФизЛицо				= ВыборкаПоТЧ.ФизЛицо;
        Если УчетЗадолженностиПоМесяцам Тогда
            Движение.ПериодВзаиморасчетов	= ПериодРегистрации;
        КонецЕсли;
        
        // Ресурсы
        Движение.СуммаВзаиморасчетов	= ВыборкаПоТЧ.Результат;
        
    КонецЕсли;
    
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

// Вычисляет разницу между начислениями и удержаниями работника и формирует
// движения по взаиморасчетам с работниками
//
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		НаборЗаписей - набор записей 
//		Перерасчет - признак проведения перерасчетов, по умолчанию - Ложь
//		Физлица - список физлиц, по которым производится расчет, по умолчанию - отсутствует
//
// Возвращаемое значение:
//  Нет.
//		
Процедура СформироватьВзаиморасчетыСРаботниками(НаборЗаписей, УчетЗадолженностиПоМесяцам, Перерасчет = Ложь, Физлица = Неопределено)
    
    Запрос = Новый Запрос;
    
    Если Перерасчет Тогда
        Если Физлица = Неопределено Тогда
            
            // таблица ФизлицаДляПерерасчета
            // Список физлиц по которым необходимо выполнить перерасчет
            // Поля:
            //		ФизЛицо
            // Описание:
            // Получает список неповторяющихся физлиц по которым есть записи
            // перерасчета в таблице перерасчета основных начислений
            //
            
            ФизлицаДляПерерасчетаТекст = 
            "ВЫБРАТЬ РАЗЛИЧНЫЕ
            |	Перерасчет.ФизЛицо КАК ФизЛицо
            |ИЗ
            |	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
            |
            |ГДЕ
            |	Перерасчет.ОбъектПерерасчета = &парамСсылка";
            
            // НачисленияРаботников
            //	Поля:
            //		Физлицо
            //		СуммаДохода - сумма "к выплате" - увличение состояния взаиморасчета с работником
            //
            
            НачисленияРаботниковТекст =
            "ВЫБРАТЬ
            |	Основные.Сотрудник.Физлицо КАК Физлицо,
            |	СУММА(Основные.Результат) КАК СуммаДохода
            |ИЗ
            |	Документ.НевыходыВОрганизациях.Начисления КАК Основные
            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ФизлицаДляПерерасчетаТекст + ") КАК ФизлицаДляПерерасчета
            |		ПО ФизлицаДляПерерасчета.Физлицо = Основные.Сотрудник.Физлицо
            |
            |ГДЕ
            |	Основные.Ссылка = &парамСсылка И
            |	(Основные.Результат <> 0)
            |
            |СГРУППИРОВАТЬ ПО
            |	Основные.Сотрудник.Физлицо";
            
        Иначе
            
            НачисленияРаботниковТекст =
            "ВЫБРАТЬ
            |	Основные.Сотрудник.Физлицо КАК Физлицо,
            |	СУММА(Основные.Результат) КАК СуммаДохода
            |ИЗ
            |	Документ.НевыходыВОрганизациях.Начисления КАК Основные
            |ГДЕ
            |	Основные.Сотрудник.Физлицо В(&парамФизлица)
            |	И Основные.Ссылка = &парамСсылка
            |	И Основные.Результат <> 0
            |
            |СГРУППИРОВАТЬ ПО
            |	Основные.Сотрудник.Физлицо";
            
            Запрос.УстановитьПараметр("парамФизлица", Физлица);
            
        КонецЕсли;
    Иначе
        
        НачисленияРаботниковТекст =
        "ВЫБРАТЬ
        |	Основные.Сотрудник.Физлицо КАК Физлицо,
        |	СУММА(Основные.Результат) КАК СуммаДохода
        |ИЗ
        |	Документ.НевыходыВОрганизациях.Начисления КАК Основные
        |ГДЕ
        |	Основные.Ссылка = &парамСсылка
        |	И Основные.Результат <> 0
        |
        |СГРУППИРОВАТЬ ПО
        |	Основные.Сотрудник.Физлицо";
        
    КонецЕсли;
    
    // Установим параметры запроса
    Запрос.Текст = НачисленияРаботниковТекст;
    Запрос.УстановитьПараметр("парамСсылка" , Ссылка);
    
    Доходы = Запрос.Выполнить().Выбрать();
    // сформируем движения ВзаиморасчетыСРаботникамиОрганизаций
    Пока Доходы.Следующий() Цикл
        Движение = НаборЗаписей.Добавить();
        
        // свойства
        Движение.Период					= КонецМесяца(ПериодРегистрации);
        Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
        
        // измерения 
        Движение.Физлицо				= Доходы.Физлицо;
        Движение.Организация			= Организация;
		//vvv комментируем
        //Если УчетЗадолженностиПоМесяцам Тогда
            Движение.ПериодВзаиморасчетов	= НачалоМесяца(ПериодРегистрации);
        //КонецЕсли;
        
        // ресурсы
        Движение.СуммаВзаиморасчетов	= Доходы.СуммаДохода;
        
    КонецЦикла;
    
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	ПерерассчитываемыйДокумент = Неопределено
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
    
    // Заголовок для сообщений об ошибках проведения.
    Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
    
    РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();
    
    // Получим реквизиты шапки из запроса
    ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	
	// получим список возможных начислений, для правильной обработки сторно записей и доначисленй
	МассивНачислений = ПолучитьМассивВозможныхНачислений();
    
    Если ВыборкаПоШапкеДокумента.Следующий() Тогда
        
        //Надо позвать проверку заполнения реквизитов шапки
        ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
        
        // Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
        Если НЕ Отказ Тогда
            
            // Получение учетной политики по персоналу организации
            // ведется ли учет задолженности в разрезе периодов возникновения задолженности
            УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
            
            Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
            Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьСписаниеФактическогоОтпуска	= Истина;

            // получим реквизиты табличной части
            РезультатЗапросаПоНачисления = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента);
            ВыборкаПоНачислениям = РезультатЗапросаПоНачисления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
            
            Пока ВыборкаПоНачислениям.Следующий() Цикл 
                
                // проверим очередную строку табличной части
                ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок, МассивНачислений);
                
                Если НЕ Отказ Тогда
                    
					Если ВыборкаПоНачислениям.ОсновныеНачисления Тогда
						ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ОсновныеНачисленияРаботниковОрганизаций);
						ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ВнутрисменноеВремяРаботниковОрганизаций);
					Иначе
						ДобавитьСтрокуДополнительныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ДополнительныеНачисленияРаботниковОрганизаций);
					КонецЕсли;
                    ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетЗадолженностиПоМесяцам);
                    
                КонецЕсли;
                
            КонецЦикла;
			
			Если НЕ Отказ Тогда
				
				// выполним удаление перерасчетов исправленного документа
				Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
					ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка, Истина); // Только по исправленным документам
				КонецЕсли;
				
				Для Каждого Набор Из Движения Цикл
					ТипНабораЗаписей = ТипЗнч(Набор);
					Если ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") 
						Или ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда
						Набор.Записать();
					КонецЕсли;
				КонецЦикла;
				ПроведениеРасчетов.ОбработатьТаблицуПерерасчетов(Ссылка);
				
			КонецЕсли;
			
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
    Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
    
	//Если ТипЗнч(Основание) = Тип("ДокументСсылка.НеявкиИБолезниОрганизаций") Тогда
	//	
	//	// Заполним реквизиты из стандартного набора.
	//	ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	//	СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
	//	
	//	// Заполнение табличной части
	//	Запрос = Новый Запрос;
	//	
	//	Запрос.УстановитьПараметр("ДокументОснование",	Основание);
	//	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ОбщегоНазначения.ГоловнаяОрганизация(Основание.Организация));
	//	
	//	Запрос.Текст =
	//	"ВЫБРАТЬ
	//	|	ТЧРаботникиОрганизации.Сотрудник,
	//	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	//	|	ТЧРаботникиОрганизации.ДатаНачала,
	//	|	ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачалаСобытия,
	//	|	ВЫБОР
	//	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
	//	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//	|			ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения
	//	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
	//	|	КОНЕЦ КАК ПодразделениеОрганизации,
	//	|	ВЫБОР
	//	|		КОГДА МИНИМУМ(ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ДатаНачала) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ДатаНачала), ДЕНЬ, -1)
	//	|	КОНЕЦ КАК ДатаОкончания,
	//	|	ВЫБОР
	//	|		КОГДА ТЧРаботникиОрганизации.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой)
	//	|			ТОГДА ЕСТЬNULL(ПВРПростой.ВидРасчета, ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул))
	//	|		КОГДА ТЧРаботникиОрганизации.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы)
	//	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул)
	//	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Невыход)
	//	|	КОНЕЦ КАК ВидРасчета,
	//	|	ИСТИНА КАК Авторасчет
	//	|ИЗ
	//	|	Документ.НеявкиИБолезниОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	//	|			МАКСИМУМ(Работники.Период) КАК Период
	//	|		ИЗ
	//	|			Документ.НеявкиИБолезниОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	//	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	//	|				ПО ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
	//	|					И Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала
	//	|		ГДЕ
	//	|			ТЧРаботникиОрганизации.Ссылка = &ДокументОснование
	//	|		
	//	|		СГРУППИРОВАТЬ ПО
	//	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	//	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	//	|		ПО ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период
	//	|			И ТЧРаботникиОрганизации.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НеявкиИБолезниОрганизаций.РаботникиОрганизации КАК ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации
	//	|		ПО ТЧРаботникиОрганизации.Ссылка = ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.Ссылка
	//	|			И ТЧРаботникиОрганизации.ДатаНачала < ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ДатаНачала
	//	|			И (ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает))
	//	|			И ТЧРаботникиОрганизации.Сотрудник = ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.Сотрудник
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//	|			МИНИМУМ(ОсновныеНачисления.Ссылка) КАК ВидРасчета
	//	|		ИЗ
	//	|			ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
	//	|		ГДЕ
	//	|			ОсновныеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботника)) КАК ПВРПростой
	//	|		ПО (ИСТИНА)
	//	|ГДЕ
	//	|	ТЧРаботникиОрганизации.Ссылка = &ДокументОснование
	//	|	И ТЧРаботникиОрганизации.ПричинаОтсутствия В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы))
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ТЧРаботникиОрганизации.Сотрудник,
	//	|	ТЧРаботникиОрганизации.ДатаНачала,
	//	|	ВЫБОР
	//	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
	//	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//	|			ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения
	//	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
	//	|	КОНЕЦ,
	//	|	ТЧРаботникиОрганизации.ПричинаОтсутствия,
	//	|	ПВРПростой.ВидРасчета,
	//	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо,
	//	|	ТЧРаботникиОрганизации.ДатаНачала";
	//	
	//	Начисления.Загрузить(Запрос.Выполнить().Выгрузить());
        
    Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтпускаОрганизаций") Тогда
        
        // Заполним реквизиты из стандартного набора.
        ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
        СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
        
        // Заполнение табличной части
        Запрос = Новый Запрос;
        
        Запрос.УстановитьПараметр("ДокументОснование",				Основание);
        Запрос.УстановитьПараметр("ГоловнаяОрганизация",			ОбщегоНазначения.ГоловнаяОрганизация(Основание.Организация));
        
        Запрос.Текст =
        "ВЫБРАТЬ
        |	ТЧРаботникиОрганизации.Сотрудник,
        |	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
        |	ВЫБОР
        |		КОГДА ТЧРаботникиОрганизации.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебныйНеоплачиваемый)
        |			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыУчебный)
        |		КОГДА ТЧРаботникиОрганизации.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускБезСохраненияЗарплаты)
        |			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет)
        |		ИНАЧЕ NULL
        |	КОНЕЦ КАК ВидРасчета,
        |	ТЧРаботникиОрганизации.ДатаНачала,
        |	ТЧРаботникиОрганизации.ДатаОкончания,
        |	ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачалаСобытия,
        |	ВЫБОР
        |		КОГДА  ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
        |				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
        |		ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения
        |		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
        |	КОНЕЦ КАК ПодразделениеОрганизации,		
        |	ИСТИНА КАК Авторасчет
        |ИЗ
        |	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
        |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
        |			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
        |			МАКСИМУМ(РегРаботникиОрганизации.Период) КАК Период
        |		ИЗ
        |			Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
        |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РегРаботникиОрганизации
        |				ПО РегРаботникиОрганизации.Период <= ТЧРаботникиОрганизации.ДатаНачала
        |					И ТЧРаботникиОрганизации.Сотрудник = РегРаботникиОрганизации.Сотрудник
        |		ГДЕ
        |			ТЧРаботникиОрганизации.Ссылка = &ДокументОснование
        |		
        |		СГРУППИРОВАТЬ ПО
        |			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
        |		ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
        |		ПО ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период
        |			И ТЧРаботникиОрганизации.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
        |ГДЕ
        |	ТЧРаботникиОрганизации.Ссылка = &ДокументОснование
        |	И ТЧРаботникиОрганизации.ПричинаОтсутствия В(ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускБезСохраненияЗарплаты),ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебныйНеоплачиваемый))";
        
        Начисления.Загрузить(Запрос.Выполнить().Выгрузить());
        
    КонецЕсли;
    
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Начисления);
	
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены Тогда
		Начисления.ЗагрузитьКолонку(Начисления.ВыгрузитьКолонку("ДатаНачала"),"ДатаОкончания")
	Иначе 
		Для каждого СтрокаТЧ Из Начисления Цикл
			СтрокаТЧ.ОплачиватьЧасов = 0
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
    Запрос.УстановитьПараметр("ДатаДокумента",	 Дата);
	Запрос.УстановитьПараметр("ВидАдресаРегистрации" , Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица);
	Запрос.УстановитьПараметр("ВидТелефонаДомашний" , Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
 	Запрос.УстановитьПараметр("ВидАдресаОрганизации" , Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	Запрос.УстановитьПараметр("ВидТелефонаОрганизации" , Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	Запрос.УстановитьПараметр("ОсновноеМестоРаботы",	Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
		|	ТрудовойДоговор.Номер КАК НомерДок,
		|	ТрудовойДоговор.Дата КАК ДатаДок,
		|	ВЫРАЗИТЬ(ТрудовойДоговор.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК ПолноеНазваниеОрганизации,
		|	ЕСТЬNULL(ФИООтветственныхЛиц.Фамилия + "" "" + ФИООтветственныхЛиц.Имя + "" "" + ФИООтветственныхЛиц.Отчество, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОРуководителя,
		|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ТрудовойДоговор.ФизЛицо.Наименование) КАК ФИОРаботника,
		|	ТрудовойДоговор.ДатаУвольнения,
		|	ТрудовойДоговор.ДатаПриема,
		|	ТрудовойДоговор.Должность.Наименование КАК Должность,
		|	ТрудовойДоговор.ЗанимаемыхСтавок,
		|	ТрудовойДоговор.ИспытательныйСрок,
		|	ТрудовойДоговор.ПодразделениеОрганизации.Наименование КАК Подразделение,
		|	ВЫБОР
		|		КОГДА ТрудовойДоговор.ВидЗанятости = &ОсновноеМестоРаботы
		|			ТОГДА ""основной работе""
		|		ИНАЧЕ ""совместительству""
		|	КОНЕЦ КАК ВидЗанятости,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
		|	ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(300)) КАК ДокументКемВыдан,
		|	АдресРегистрации.Представление КАК АдресРегистрации,
		|	ТелефонДомашний.Представление КАК Телефоны,
		|	КонтактнаяИнформация.Представление КАК АдресОрганизации,
		|	ТелефонОрганизации.Представление КАК ТелефоныОрганизации,
		|	ТрудовойДоговор.Организация.Наименование КАК НазваниеОрганизации,
		|	ТрудовойДоговор.ГрафикРаботы.ВидГрафика КАК ВидГрафика,
		|	ТрудовойДоговор.ГрафикРаботы.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели,
		|	ТрудовойДоговор.СпособРасчета,
		|	ТрудовойДоговор.РасчетнаяТарифнаяСтавка КАК ТарифнаяСтавка,
		|	ТрудовойДоговор.ВалютаТарифнойСтавки.Наименование КАК ВалютаТарифнойСтавки,
		|	ТрудовойДоговор.ПерсональныеНадбавки.(
		|		Ссылка,
		|		НомерСтроки,
		|		Надбавка КАК Надбавка,
		|		Показатель1
		|	),
		|	ТрудовойДоговор.Отпуска.(
		|		Ссылка,
		|		НомерСтроки,
		|		ВидОтпуска,
		|		КоличествоДней
		|	)
		|ИЗ
		|	Документ.ТрудовойДоговор КАК ТрудовойДоговор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИООтветственныхЛиц
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИООтветственныхЛиц.ФизЛицо
		|		ПО ТрудовойДоговор.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛиц
		|		ПО ТрудовойДоговор.ФизЛицо = ФИОФизЛиц.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ПаспортныеДанныеФизЛицСрезПоследних
		|		ПО ТрудовойДоговор.ФизЛицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресРегистрации
		|		ПО ТрудовойДоговор.ФизЛицо = АдресРегистрации.Объект
		|			И (АдресРегистрации.Вид = &ВидАдресаРегистрации)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонДомашний
		|		ПО ТрудовойДоговор.ФизЛицо = ТелефонДомашний.Объект
		|			И (АдресРегистрации.Вид = &ВидТелефонаДомашний)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ТрудовойДоговор.Организация = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Вид = &ВидАдресаОрганизации)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонОрганизации
		|		ПО ТрудовойДоговор.Организация = ТелефонОрганизации.Объект
		|			И (ТелефонОрганизации.Вид = &ВидТелефонаОрганизации)
		|ГДЕ
		|	ТрудовойДоговор.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Печать" Тогда
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТрудовойДоговор_Печать";
		
		// получаем данные для печати
		Выборка = СформироватьЗапросДляПечати().Выбрать();
		
		// получаем макет
		Макет = ПолучитьМакет("Макет");
		
		// выводим данные 
		Если Выборка.Следующий() Тогда
			Макет.Параметры.Заполнить(Выборка);
			Макет.Параметры.ИспытательныйСрокСтрокой = ?(ЗначениеЗаполнено(Выборка.ИспытательныйСрок), "" + Выборка.ИспытательныйСрок + " месяца(ев)","             месяцев" );
			Макет.Параметры.РежимРаботы = "" + Выборка.ВидГрафика + "; " + Выборка.ДлительностьРабочейНедели + " - часовая рабочая неделя";
			Макет.Параметры.ФормаОплаты = "Форма оплаты: " + Выборка.СпособРасчета + "; Оклад (тариф) = " + Выборка.ТарифнаяСтавка + " ("+Выборка.ВалютаТарифнойСтавки+")";  
			//для отпуска
			ВыборкаОтпуска = Выборка.Отпуска.Выбрать();
			Если ВыборкаОтпуска.Количество()>0 Тогда
				СтрокаОтпуска = "Отпуска: ";
				Пока ВыборкаОтпуска.Следующий() Цикл
					СтрокаОтпуска = СтрокаОтпуска + ВыборкаОтпуска.ВидОтпуска + "- " + ВыборкаОтпуска.КоличествоДней + "; ";
				КонецЦикла; 
				Макет.Параметры.ФормаОтпуск = СтрокаОтпуска;
			КонецЕсли; 

				
			ВыборкаПерсональныхДадбавок = Выборка.ПерсональныеНадбавки.Выбрать();
			Если ВыборкаПерсональныхДадбавок.Количество()>0 Тогда
				СтрокаНадбавки = "Персональные надбавки: ";
				Пока ВыборкаПерсональныхДадбавок.Следующий() Цикл
					СтрокаНадбавки = СтрокаНадбавки + ВыборкаПерсональныхДадбавок.Надбавка + "- " + ВыборкаПерсональныхДадбавок.Показатель1 + "; ";
				КонецЦикла; 
				Макет.Параметры.Надбавки = СтрокаНадбавки;
			КонецЕсли; 
		КонецЕсли;
		
		// выводим готовый документ
		ТабДокумент.Вывести(Макет);
		
	КонецЕсли;
	
	РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,"Прием на работу в организацию "));
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Печать","Печать");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция СформироватьЗапросПоДокументу() 
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТрудовойДоговор.Организация,
	|	ТрудовойДоговор.ПодразделениеОрганизации,
	|	ТрудовойДоговор.Должность,
	|	ТрудовойДоговор.ЗанимаемыхСтавок,
	|	ТрудовойДоговор.ДатаПриема КАК Период,
	|	ТрудовойДоговор.ИспытательныйСрок,
	|	ТрудовойДоговор.ДатаУвольнения,
	|	ТрудовойДоговор.ВидЗанятости,
	|	ТрудовойДоговор.ГрафикРаботы,
	|	ТрудовойДоговор.Сотрудник,
	|	ТрудовойДоговор.НомерТД,
	|	ТрудовойДоговор.ВидТД КАК ВидДоговора,
	|	ВЫБОР
	|		КОГДА ТрудовойДоговор.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ТрудовойДоговор.Организация
	|		ИНАЧЕ ТрудовойДоговор.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА ТрудовойДоговор.ПодразделениеОрганизации.Владелец <> ТрудовойДоговор.Организация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ВЫБОР
	|		КОГДА ТрудовыеДоговора.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПересичениеПериодов,
	|	ТрудовыеДоговора.Регистратор КАК ОшибочныйДоговор,
	|	ТрудовойДоговор.ТарифнаяСтавкаПервогоРазряда
	|ИЗ
	|	Документ.ТрудовойДоговор КАК ТрудовойДоговор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТрудовыеДоговора КАК ТрудовыеДоговора
	|		ПО ТрудовойДоговор.Ссылка <> ТрудовыеДоговора.Регистратор
	|			И ТрудовойДоговор.Сотрудник = ТрудовыеДоговора.Сотрудник
	|			И ТрудовойДоговор.ДатаПриема <= ТрудовыеДоговора.ДатаУвольнения
	|ГДЕ
	|	ТрудовойДоговор.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();


КонецФункции	

Функция СформироватьЗапросПоОтпускам() 
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТрудовойДоговорОтпуска.ВидОтпуска,
	|	ТрудовойДоговорОтпуска.КоличествоДней,
	|	ТрудовойДоговорОтпуска.НомерСтроки
	|ИЗ
	|	Документ.ТрудовойДоговор.Отпуска КАК ТрудовойДоговорОтпуска
	|ГДЕ
	|	ТрудовойДоговорОтпуска.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();


КонецФункции	




// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеДокумента(Выборка, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(Выборка.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, в которую принимается работник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(Выборка.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран работник!", Отказ, Заголовок);
	КонецЕсли;

		
	// Подразделение
	Если НЕ ЗначениеЗаполнено(Выборка.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указано подразделение, в которое принимается работник!", Отказ, Заголовок);
	ИначеЕсли Выборка.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке("указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
	КонецЕсли;
	
	// Должность
	Если НЕ ЗначениеЗаполнено(Выборка.Должность) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана должность работника!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаПриема
	ЕстьДатаПриема = ЗначениеЗаполнено(Выборка.Период);
	Если НЕ ЕстьДатаПриема Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата приема на работу!", Отказ, Заголовок);
	//Иначе
	//	#Если Клиент Тогда
	//		Если Выборка.Период > РабочаяДата Тогда
	//			Сообщить("Дата начала договора превышает рабочую дату!", СтатусСообщения.Важное);
	//		КонецЕсли;
	//	#КонецЕсли
	КонецЕсли;
	
	// Количество ставок
	Если Выборка.ЗанимаемыхСтавок = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указано количество занимаемых работником ставок!", Отказ, Заголовок);
	КонецЕсли;
	
	// ГрафикРаботы
	Если НЕ ЗначениеЗаполнено(Выборка.ГрафикРаботы)  Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан рабочий график!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НетСотрудника ИЛИ (НЕ ЕстьДатаПриема) Тогда
		Возврат;
	КонецЕсли;

	#Если Клиент Тогда
	Если Выборка.ПересичениеПериодов Тогда
			Сообщить("Дата начала трудового договора меньше даты окончания договора: " + Выборка.ОшибочныйДоговор, СтатусСообщения.Важное);
	КонецЕсли;
	#КонецЕсли

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеОтпусков(Выборка, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Выборка.НомерСтроки) +
	""" табл. части ""Отпуска"": ";

	Если НЕ ЗначениеЗаполнено(Выборка.ВидОтпуска) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид отпуска!", Отказ, Заголовок);
	КонецЕсли;
	
   	Если НЕ ЗначениеЗаполнено(Выборка.КоличествоДней) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано количство дней!", Отказ, Заголовок);
	КонецЕсли;
	

КонецПроцедуры // ПроверитьЗаполнениеШапки()




Процедура ДобавитьСтрокуВДвиженияПоРегиструТрудовыеДоговора(Выборка)
	
	Движение = Движения.ТрудовыеДоговора.Добавить();
	
	ЗаполнитьЗначенияСвойств(Движение, Выборка);	
 КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

Процедура ДобавитьСтрокуВДвиженияПоРегиструОтпускаПоТрудовымДоговорам(ВыборкаПоДокументу, ВыборкаПоОтпускам)
	
	Движение = Движения.ОтпускаПоТрудовымДоговорам.Добавить();
	
	//Измерения
	Движение.Период         = ВыборкаПоДокументу.Период;
	Движение.ДатаОкончания	= ВыборкаПоДокументу.ДатаУвольнения;
	Движение.Сотрудник      = ВыборкаПоДокументу.Сотрудник;
	Движение.ВидОтпуска     = ВыборкаПоОтпускам.ВидОтпуска;

	//Ресурсы
	Движение.КоличествоДней = ВыборкаПоОтпускам.КоличествоДней;
	
 КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

 //vvv
Процедура ЗаполнитьРеквизитыВСправочникеСотрудников()
	 
	СотрОбъект=Сотрудник.ПолучитьОбъект();
	
	СотрОбъект.НомерДоговора             		= НомерТД;
	СотрОбъект.ДатаДоговора              		= ДатаТД;
	СотрОбъект.ДатаНачала   			  		= ДатаПриема;
	СотрОбъект.ДатаОкончания 		      		= ДатаУвольнения;
	СотрОбъект.ИспытательныйСрок 		  		= ИспытательныйСрок;
	СотрОбъект.ОбособленноеПодразделение 		= Организация;
	СотрОбъект.ПодразделениеОрганизации  		= ПодразделениеОрганизации;
	СотрОбъект.Должность                 		= Должность;
	СотрОбъект.РазрядЕТС                 		= РазрядЕТС;
	СотрОбъект.КоэффициентЕТС            		= КоэффициентЕТС;
	СотрОбъект.ГрафикРаботы              		= ГрафикРаботы;
	СотрОбъект.ТарифнаяСтавка            		= ТарифнаяСтавка;
	СотрОбъект.ЗанимаемыхСтавок          		= ЗанимаемыхСтавок;
	СотрОбъект.ПроцентПовышения          		= ПроцентПовышения;
	СотрОбъект.РасчетнаяТарифнаяСтавка  		= РасчетнаяТарифнаяСтавка;
	СотрОбъект.ВалютаТарифнойСтавки      		= ВалютаТарифнойСтавки;
	СотрОбъект.ВидРасчета               		= ВидРасчета;
	СотрОбъект.ТарифныйСПовышениемПоИнструкции  = ТарифныйСПовышениемПоИнструкции;
	СотрОбъект.ПроцентПовышения				    = ПроцентПовышения;
	СотрОбъект.ИтоговоеПовышениеПоИнструкции  	= ИтоговоеПовышениеПоИнструкции;
	СотрОбъект.ВидТД                            = ВидТД;
	СотрОбъект.РазмерСтавки1Разряда             = РазмерСтавки1Разряда;
	СотрОбъект.ПовышенныйКоэффициентЕТС         = ПовышенныйКоэффициентЕТС;
	СотрОбъект.ТарифнаяСтавкаПервогоРазряда     = ТарифнаяСтавкаПервогоРазряда;
	СотрОбъект.ВидДеятельностиИзмерение         = ВидДеятельностиИзмерение;
	СотрОбъект.УсловияТрудаИзмерение            = УсловияТрудаИзмерение;
	СотрОбъект.БезЕТС          			     	= БезЕТС;
	СотрОбъект.Записать();
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ОбщегоНазначения.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ВыборкаПоДокументу = СформироватьЗапросПоДокументу().Выбрать();
	ВыборкаПоОтпускам = СформироватьЗапросПоОтпускам().Выбрать();
	
	Если ВыборкаПоДокументу.Следующий() тогда
		
		//Надо позвать проверку заполнения реквизитов 
		ПроверитьЗаполнениеДокумента(ВыборкаПоДокументу, Отказ, Заголовок);
		
	    // Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			ДобавитьСтрокуВДвиженияПоРегиструТрудовыеДоговора(ВыборкаПоДокументу);
			Пока  ВыборкаПоОтпускам.Следующий() Цикл
				ПроверитьЗаполнениеОтпусков(ВыборкаПоОтпускам, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					ДобавитьСтрокуВДвиженияПоРегиструОтпускаПоТрудовымДоговорам(ВыборкаПоДокументу, ВыборкаПоОтпускам);
                КонецЕсли;
			КонецЦикла;
            //vvv
			//ЗаполнитьРеквизитыВСправочникеСотрудников();
			//
		КонецЕсли;

	КонецЕсли;
   
  

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ТрудовойДоговор") Тогда
		// Заполнение шапки
		ВидЗанятости = Основание.ВидЗанятости;
		ЗанимаемыхСтавок = Основание.ЗанимаемыхСтавок;
		Организация = Основание.Организация;
		Сотрудник = Основание.Сотрудник;
		ФизЛицо = Основание.ФизЛицо;
		Для Каждого ТекСтрокаОтпуска Из Основание.Отпуска Цикл
			НоваяСтрока = Отпуска.Добавить();
			НоваяСтрока.ВидОтпуска = ТекСтрокаОтпуска.ВидОтпуска;
			НоваяСтрока.КоличествоДней = ТекСтрокаОтпуска.КоличествоДней;
		КонецЦикла;
		Для Каждого ТекСтрокаПерсональныеНадбавки Из Основание.ПерсональныеНадбавки Цикл
			НоваяСтрока = ПерсональныеНадбавки.Добавить();
			НоваяСтрока.Валюта1 = ТекСтрокаПерсональныеНадбавки.Валюта1;
			НоваяСтрока.Валюта2 = ТекСтрокаПерсональныеНадбавки.Валюта2;
			НоваяСтрока.Валюта3 = ТекСтрокаПерсональныеНадбавки.Валюта3;
			НоваяСтрока.Валюта4 = ТекСтрокаПерсональныеНадбавки.Валюта4;
			НоваяСтрока.Валюта5 = ТекСтрокаПерсональныеНадбавки.Валюта5;
			НоваяСтрока.Валюта6 = ТекСтрокаПерсональныеНадбавки.Валюта6;
			НоваяСтрока.Надбавка = ТекСтрокаПерсональныеНадбавки.Надбавка;
			НоваяСтрока.Показатель1 = ТекСтрокаПерсональныеНадбавки.Показатель1;
			НоваяСтрока.Показатель2 = ТекСтрокаПерсональныеНадбавки.Показатель3;
			НоваяСтрока.Показатель3 = ТекСтрокаПерсональныеНадбавки.Показатель3;
			НоваяСтрока.Показатель4 = ТекСтрокаПерсональныеНадбавки.Показатель4;
			НоваяСтрока.Показатель5 = ТекСтрокаПерсональныеНадбавки.Показатель5;
			НоваяСтрока.Показатель6 = ТекСтрокаПерсональныеНадбавки.Показатель6;
			НоваяСтрока.ТарифныйРазряд1 = ТекСтрокаПерсональныеНадбавки.ТарифныйРазряд1;
			НоваяСтрока.ТарифныйРазряд2 = ТекСтрокаПерсональныеНадбавки.ТарифныйРазряд2;
			НоваяСтрока.ТарифныйРазряд3 = ТекСтрокаПерсональныеНадбавки.ТарифныйРазряд3;
			НоваяСтрока.ТарифныйРазряд4 = ТекСтрокаПерсональныеНадбавки.ТарифныйРазряд4;
			НоваяСтрока.ТарифныйРазряд5 = ТекСтрокаПерсональныеНадбавки.ТарифныйРазряд5;
			НоваяСтрока.ТарифныйРазряд6 = ТекСтрокаПерсональныеНадбавки.ТарифныйРазряд6;
		КонецЦикла;
	//vvv
	ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
	
		Если Основание.ВидДоговора <> Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",	Основание);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизаций.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА СотрудникиОрганизаций.Организация
		|		ИНАЧЕ СотрудникиОрганизаций.ОбособленноеПодразделение
		|	КОНЕЦ КАК Организация,
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
		|	СотрудникиОрганизаций.Должность,
		|	СотрудникиОрганизаций.ПодразделениеОрганизации,
		|	СотрудникиОрганизаций.ТабельУчетаОрганизации,
		|	СотрудникиОрганизаций.КатегорияДолжности,
		|	СотрудникиОрганизаций.Классность,
		|	СотрудникиОрганизаций.ЗанимаемыхСтавок,
		|	СотрудникиОрганизаций.ИспытательныйСрок,
		|	СотрудникиОрганизаций.ГрафикРаботы,
		|	СотрудникиОрганизаций.НомерДоговора КАК НомерТД,
		|	СотрудникиОрганизаций.ДатаДоговора КАК ДатаТД,
		|	СотрудникиОрганизаций.ДатаОкончания КАК ДатаУвольнения,
		|	СотрудникиОрганизаций.ДатаНачала КАК ДатаПриема,
		|	СотрудникиОрганизаций.ВидТД,
		|	СотрудникиОрганизаций.ВидЗанятости,
		|	СотрудникиОрганизаций.ВидРасчета КАК ВидРасчета,
		|	СотрудникиОрганизаций.РасчетнаяТарифнаяСтавка КАК Показатель1,
		|	NULL КАК Показатель2,
		|	NULL КАК Показатель3,
		|	NULL КАК Показатель4,
		|	СотрудникиОрганизаций.ВалютаТарифнойСтавки КАК Валюта1,
		|	NULL КАК Валюта2,
		|	NULL КАК Валюта3,
		|	NULL КАК Валюта4,
		|	СотрудникиОрганизаций.ТарифныйРазряд КАК ТарифныйРазряд1,
		|	NULL КАК ТарифныйРазряд2,
		|	NULL КАК ТарифныйРазряд3,
		|	NULL КАК ТарифныйРазряд4,
		|	СотрудникиОрганизаций.РасчетнаяТарифнаяСтавка КАК МесячнаяТарифнаяСтавка,
		|	СотрудникиОрганизаций.РазрядЕТС,
		|	СотрудникиОрганизаций.КоэффициентЕТС,
		|	СотрудникиОрганизаций.ПроцентПовышения КАК ПроцентПоКонтракту,
		|	СотрудникиОрганизаций.Должность.Категория КАК Категория,
		|	СотрудникиОрганизаций.ТарифныйСПовышениемПоИнструкции,
		|	СотрудникиОрганизаций.ИтоговоеПовышениеПоИнструкции,
		|	СотрудникиОрганизаций.ТарифнаяСтавка,
		|	СотрудникиОрганизаций.РазмерСтавки1Разряда,
		|	СотрудникиОрганизаций.ПовышенныйКоэффициентЕТС,
		|	СотрудникиОрганизаций.РазмерСтавки1Разряда КАК РазмерСтавки1Разряда1,
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизаций.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НапомнитьПоЗавершении,
		|	СотрудникиОрганизаций.ТарифнаяСтавкаПервогоРазряда,
		|	СотрудникиОрганизаций.УсловияТрудаИзмерение,
		|	СотрудникиОрганизаций.ВидДеятельностиИзмерение,
		|	СотрудникиОрганизаций.БезЕТС
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ЗапросОтпуска = Новый Запрос;
		ЗапросОтпуска.УстановитьПараметр("Ссылка",	Основание);

		ЗапросОтпуска.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СотрудникиОрганизацийЕжегодныеОтпуска.ВидЕжегодногоОтпуска КАК ВидОтпуска,
		|	СотрудникиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод КАК КоличествоДней
		|ИЗ
		|	Справочник.СотрудникиОрганизаций.ЕжегодныеОтпуска КАК СотрудникиОрганизацийЕжегодныеОтпуска
		|ГДЕ
		|	СотрудникиОрганизацийЕжегодныеОтпуска.Ссылка = &Ссылка";
		
		ВыборкаОтпуска = ЗапросОтпуска.Выполнить().Выбрать();
		
		Если Выборка.Следующий() ТОгда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект,Выборка);
		КонецЕсли;
		
		Пока ВыборкаОтпуска.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ЭтотОбъект.Отпуска.Добавить(),ВыборкаОтпуска);
		КонецЦикла;
		
	//
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет автоматическое заполнение документа по данным документа и переданным параметрам
// 
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Логическое - удалось ли выполнить автоматическое заполнение документа
//
Функция Автозаполнение() Экспорт

    СписокПустыхНомеровПФР = Новый СписокЗначений;
	СписокПустыхНомеровПФР.Добавить("");
	СписокПустыхНомеровПФР.Добавить("              ");
	
    Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",				ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("СписокПустыхНомеровПФР",		СписокПустыхНомеровПФР);
	Запрос.УстановитьПараметр("Увольнение",		Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("ДатаАктуальности" , 		Дата);
	Запрос.УстановитьПараметр("ВидАдресаРегистрации" , 	Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица);
	Запрос.УстановитьПараметр("ВидАдресаФактический" , 	Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица);
   	Запрос.УстановитьПараметр("ВидТелефонаДомашний" , 	Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
   	Запрос.УстановитьПараметр("ТипТелефон" , 	Перечисления.ТипыКонтактнойИнформации.Телефон);
   	Запрос.УстановитьПараметр("ТипАдрес" , 	Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ПустаяСтрана" , Справочники.КлассификаторСтранМира.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтранапоУмолчанию" , Справочники.КлассификаторСтранМира.БЕЛАРУСЬ);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
	               |	ФИОФизЛицСрезПоследних.Имя КАК Имя,
	               |	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
	               |	АдресаРегистрации.Поле1  КАК ИндексРегистрации,
				   |	АдресаРегистрации.Поле2 + "","" + АдресаРегистрации.Поле3 + ВЫБОР КОГДА (АдресаРегистрации.Поле3 ЕСТЬ NULL) ТОГДА "","" ИНАЧЕ "" р-н ,"" КОНЕЦ + АдресаРегистрации.Поле4 + "","" + АдресаРегистрации.Поле5 + ВЫБОР КОГДА (АдресаРегистрации.Поле5 ЕСТЬ NULL) ТОГДА "","" ИНАЧЕ "" с/с ,"" КОНЕЦ + АдресаРегистрации.Поле6 + "","" + АдресаРегистрации.Поле7 + "","" + АдресаРегистрации.Поле8 + "","" + АдресаРегистрации.Поле9   КАК АдресРегистрации,
				   //|	АдресаРегистрации.Представление КАК АдресРегистрации,
				   |	ДомашниеТелефоны.Поле3 КАК Телефоны,
	               |	ПаспортныеДанныеФизЛицСрезПоследних.ЛичныйНомер КАК ЛичныйНомер,
	               |	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия КАК ПаспортСерия,
	               |	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер КАК ПаспортНомер,
	               |	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи КАК ПаспортДатаВыдачи,
	               |	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК ПаспортКемВыдан,
				   |	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид КАК ДокументВид,
	               |	СписокФизлиц.ФизЛицо,
	               |	СписокФизлиц.ФизЛицо.Пол КАК Пол,
	               |	СписокФизлиц.ФизЛицо.ДатаРождения КАК ДатаРождения,
	               |	СписокФизлиц.ФизЛицо.МестоРождения КАК МестоРождения,
	               |	ВЫБОР КОГДА (ГражданствоФизЛиц.ФизЛицо ЕСТЬ NULL) ИЛИ (ГражданствоФизЛиц.Страна  = &ПустаяСтрана) ТОГДА &СтранаПоУмолчанию ИНАЧЕ ГражданствоФизЛиц.Страна КОНЕЦ КАК Гражданство
	               |ИЗ
	               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		СостояниеРаботниковОрганизацииСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо
	               |	ИЗ
	               |		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
				   |			&ДатаАктуальности, 
				   |			Организация = &ГоловнаяОрганизация И 
				   |				НЕ(Сотрудник.ФизЛицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ 	АнкетаЗастрахованногоЛицаРаботникиОрганизации.ФизЛицо ИЗ Документ.АнкетаЗастрахованногоЛица.РаботникиОрганизации КАК АнкетаЗастрахованногоЛицаРаботникиОрганизации ГДЕ 	АнкетаЗастрахованногоЛицаРаботникиОрганизации.Ссылка <> &Ссылка И АнкетаЗастрахованногоЛицаРаботникиОрганизации.Ссылка.Проведен )) И Сотрудник.ФизЛицо.СтраховойНомерПФР В (&СписокПустыхНомеровПФР)) КАК СостояниеРаботниковОрганизацииСрезПоследних
	               |	
	               |	ГДЕ
	               |		СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостояния <> &Увольнение И
	               |		СостояниеРаботниковОрганизацииСрезПоследних.ПодразделениеОрганизации.Владелец = &Организация
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.ФизЛицо
	               |	ИЗ
	               |		Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	               |	
	               |	ГДЕ
	               |		ДоговорНаВыполнениеРаботСФизЛицом.Организация = &Организация И
	               |		(НЕ(ДоговорНаВыполнениеРаботСФизЛицом.Физлицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ 	АнкетаЗастрахованногоЛицаРаботникиОрганизации.ФизЛицо ИЗ Документ.АнкетаЗастрахованногоЛица.РаботникиОрганизации КАК АнкетаЗастрахованногоЛицаРаботникиОрганизации ГДЕ 	АнкетаЗастрахованногоЛицаРаботникиОрганизации.Ссылка <> &Ссылка И АнкетаЗастрахованногоЛицаРаботникиОрганизации.Ссылка.Проведен ))) И
	               |		ДоговорНаВыполнениеРаботСФизЛицом.Физлицо.СтраховойНомерПФР В(&СписокПустыхНомеровПФР) И
				   |		ДоговорНаВыполнениеРаботСФизЛицом.Проведен И
                   |		ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &ДатаАктуальности И
	               |		ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &ДатаАктуальности) КАК СписокФизлиц
	               |	
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&ДатаАктуальности) КАК ГражданствоФизЛиц
	               |		ПО СписокФизлиц.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности, ) КАК ФИОФизЛицСрезПоследних
	               |		ПО СписокФизлиц.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&ДатаАктуальности, ) КАК ПаспортныеДанныеФизЛицСрезПоследних
	               |		ПО СписокФизлиц.ФизЛицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ДомашниеТелефоны
	               |		ПО СписокФизлиц.ФизЛицо = ДомашниеТелефоны.Объект И (ДомашниеТелефоны.Вид = &ВидТелефонаДомашний) И (ДомашниеТелефоны.Тип = &ТипТелефон)
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаФактические
				   |		ПО СписокФизлиц.ФизЛицо = АдресаФактические.Объект И (АдресаФактические.Вид = &ВидАдресаФактический) И (АдресаФактические.Тип = &ТипАдрес)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаРегистрации
	               |		ПО СписокФизлиц.ФизЛицо = АдресаРегистрации.Объект И (АдресаРегистрации.Вид = &ВидАдресаРегистрации) И (АдресаФактические.Тип = &ТипАдрес)";

	РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для каждого СтрокаТЧ из РаботникиОрганизации цикл
		СтруктураАдреса = РегламентированнаяОтчетность.РазложитьМестоРождения(СтрокаТЧ.МестоРождения, Истина);
		СтрокаТЧ.ГородРождения = СтруктураАдреса.НаселенныйПункт;
		СтрокаТЧ.РайонРождения = СтруктураАдреса.Район;
		СтрокаТЧ.ОбластьРождения = СтруктураАдреса.Область;
		СтрокаТЧ.СтранаРождения  = ?(Не ЗначениеЗаполнено(СтруктураАдреса.Страна), Справочники.КлассификаторСтранМира.БЕЛАРУСЬ,Справочники.КлассификаторСтранМира.НайтиПоНаименованию(СтруктураАдреса.Страна));
	Конеццикла;

КонецФункции

//vvv
Процедура ВыборФайлаДляВыгрузки(Элемент) Экспорт
	
	ДиалогФыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогФыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

//Функция раскладывает строку с данными об адресе (в формате 9 запятых) на элементы структуры
Функция РазложитьСтрокуАдрес(Знач СтрокаАдрес) Экспорт
	
	Страна = "";
	Индекс = "";
	Регион = "";
	Район = "";
	Город = "";
	НаселенныйПункт = "";
	Улица ="";
	Дом ="";
	Корпус ="";
	Квартира ="";

	МассивАдрес	=	ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаАдрес);
	ЭлементовВМассиве = МассивАдрес.Количество();   

	Если ЭлементовВМассиве	>	0	тогда
		Страна	=	СокрЛП(МассивАдрес[0]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	1	тогда
		Индекс	=	СокрЛП(МассивАдрес[1]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	2	тогда
		Регион	=	СокрЛП(МассивАдрес[2]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	3	тогда
		Район	=	СокрЛП(МассивАдрес[3]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	4	тогда
		Город	=	СокрЛП(МассивАдрес[4]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	5	тогда
		НаселенныйПункт	=	СокрЛП(МассивАдрес[5]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	6	тогда
		Улица	=	СокрЛП(МассивАдрес[6]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	7	тогда
		Дом	=	СокрЛП(МассивАдрес[7]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	8	тогда
		Корпус	=	СокрЛП(МассивАдрес[8]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	9	тогда
		Квартира	=	СокрЛП(МассивАдрес[9]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Страна",Страна);
	СтруктураВозврата.Вставить("Индекс",Индекс);
	СтруктураВозврата.Вставить("Регион",Регион);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Город",Город);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Улица",Улица);
	СтруктураВозврата.Вставить("Дом",Дом);
	СтруктураВозврата.Вставить("Корпус",Корпус);
	СтруктураВозврата.Вставить("Квартира",Квартира);

	Возврат СтруктураВозврата;
	
КонецФункции	 

// Процедура заполняет поля объекта редактирования адреса по структуре
Процедура ЗаполнитьРедактированияАдресаПоСтруктуре(Объект, СтруктураАдреса) Экспорт
	
	Если СтруктураАдреса = Неопределено Тогда
		
		Объект.Поле1 = "";
		Объект.Поле2 = "";
		Объект.Поле3 = "";
		Объект.Поле4 = "";
		Объект.Поле5 = "";
		Объект.Поле6 = "";
		Объект.Поле7 = "";
		Объект.Поле8 = "";
		Объект.Поле9 = "";
		Объект.Поле10 = "";
		Объект.Поле11 = "";
		Объект.Поле12 = "";
		Объект.Поле13 = "";
		Объект.Представление = "";
	
		Возврат;
	КонецЕсли;
	
	Если СтруктураАдреса.Свойство("ЗаПределамиРФ") Тогда			
		Объект.Поле1 = СтруктураАдреса.Страна;
		Объект.Представление = СтруктураАдреса.Представление;		
	Иначе
		Объект.Поле1 = СтруктураАдреса.Индекс;
		Объект.Поле2 = СтруктураАдреса.Регион;
		Объект.Поле3 = СтруктураАдреса.Район;
		Объект.Поле4 = СтруктураАдреса.Город;
		Объект.Поле5 = СтруктураАдреса.НаселенныйПункт;
		Объект.Поле6 = СтруктураАдреса.Улица;
		Объект.Поле7 = СтруктураАдреса.Дом;
		Объект.Поле8 = СтруктураАдреса.Корпус;
		Объект.Поле9 = СтруктураАдреса.Квартира;
		//Объект.Поле10 = СтруктураАдреса.Улица;
		//Объект.Поле11 = СтруктураАдреса.Дом;
		//Объект.Поле12 = СтруктураАдреса.Корпус;
		//Объект.Поле13 = СтруктураАдреса.Квартира;
		
		//Определяем представление сразу же
		Объект.Представление = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(Объект);
	КонецЕсли;
  
КонецПроцедуры

// Функция возвращает строковое представление адреса (в формате через запятую) , включая незаполненные поля
Функция ПолучитьАдрес(Запись) Экспорт
	
	Результат = "";
	
	Если Запись = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(Запись) = Запись.Представление Тогда	
		Результат = 
		СокрЛП(Запись.Поле2) + ", " +
		СокрЛП(Запись.Поле3) + ", " +
		СокрЛП(Запись.Поле4) + ", " +
		СокрЛП(Запись.Поле5) + ", " +
		СокрЛП(Запись.Поле6) + ", " +
		СокрЛП(Запись.Поле7) + ", " +
		СокрЛП(Запись.Поле8) + ", " +
		СокрЛП(Запись.Поле9);
		
	Иначе
		Результат = Запись.Представление;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаменить(Результат, ",", "")) Тогда
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции



#Если Клиент Тогда

// Формирует файл, который можно будет записать на дискетку
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Строка - содержимое файла
//
//vvv
//Функция СформироватьВыходнойФайл(Отказ) Экспорт
Функция СформироватьВыходнойФайл(Отказ,ЗаписыватьПачку = Истина) Экспорт

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

    ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	Если ВыборкаПоШапкеДокумента.Следующий()=0 тогда
		Отказ = Истина;
		Возврат "";
	КонецЕсли;	

    ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	Если Отказ тогда
		Возврат "";
	КонецЕсли;	 

	Результат					=	СформироватьЗапросПоРаботникиОрганизации();
	ВыборкаПоРаботникиОрганизации			=	Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);

	//Если ВыборкаПоРаботникиОрганизации.Количество()>200 тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("В документе должно быть не более 200 анкет (работников)!", Отказ, Заголовок);
	//КонецЕсли;	 

	СписокОбработанныхАнкет = Новый СписокЗначений;
	
	ТекстФайла	=	"";
	НомерДокументаВПачке = 0;

	//Формируем заголовок выходного файла
	ДатаФормирования = ВыборкаПоШапкеДокумента.Дата;
	ДеньШапки        = ?(День(ДатаФормирования)<10,"0","")+День(ДатаФормирования);
	МесяцШапки       = ?(Месяц(ДатаФормирования)<10,"0","")+Месяц(ДатаФормирования);
	ГодШапки 		 = Строка(СокрЛП(Формат(Год(ДатаФормирования), "ЧГ=0")));
	ДатаЗаполнения   = ДеньШапки+"/"+МесяцШапки+"/"+ГодШапки;
	//vvv комментируем
	//НомерПачки 				= ПроцедурыПерсонифицированогоУчета.НомерПачкиДокумента(ВыборкаПоШапкеДокумента.Номер);
	//
	КоличествоДокументов 	= ВыборкаПоРаботникиОрганизации.Количество();

	Если Отказ тогда
		Возврат "";
	КонецЕсли;	 
	
	ТекстФайла = Новый ТекстовыйДокумент;
	текстФайла.ДобавитьСтроку("ЗГЛВ=1.6=");
	ТекстФайла.ДобавитьСтроку(Врег("<ПАЧК="+СокрЛП(ВыборкаПоШапкеДокумента.Организация.ИНН)+"="+СокрЛП(ВыборкаПоШапкеДокумента.Организация.РегистрационныйНомерПФР)+
				"="+СокрЛП(ВыборкаПоШапкедокумента.организация.НаименованиеПолное)+"="+СокрЛП(НомерПачки)+"= = =1="));
	ТекстФайла.ДобавитьСтроку("ТИПД=ПУ-1="+СокрЛП(Строка(КоличествоДокументов))+"= = = = =>");
	
	ТипЗаписи = "<ПУ-1="+Лев(ТипФормы,1)+"="+СокрЛП(ВыборкаПоШапкеДокумента.Организация.РегистрационныйНомерПФР)+"=";
	
	Пока ВыборкаПоРаботникиОрганизации.Следующий()	Цикл
		//Контроль дубля строк
		Если СписокОбработанныхАнкет.НайтиПоЗначению(ВыборкаПоРаботникиОрганизации.ФизЛицо) = Неопределено тогда
			СписокОбработанныхАнкет.Добавить(ВыборкаПоРаботникиОрганизации.ФизЛицо);
		Иначе	
			ОбщегоНазначения.СообщитьОбОшибке("Строка №"+ВыборкаПоРаботникиОрганизации.НомерСтроки+": Работник "+ВыборкаПоРаботникиОрганизации.ФизЛицо+ " указан(а) в документе дважды!", Отказ);
		КонецЕсли;	 
		
        СтрокаФайла = ТипЗаписи;
		//Инициалы должны быть указаны
		Фамилия = ?(ВыборкаПоРаботникиОрганизации.Фамилия = "", " ", ВРЕГ(СокрЛП(ВыборкаПоРаботникиОрганизации.Фамилия)));
		Имя = ?(ВыборкаПоРаботникиОрганизации.Имя = "", " ", ВРЕГ(СокрЛП(ВыборкаПоРаботникиОрганизации.Имя)));
		Отчество = ?(ВыборкаПоРаботникиОрганизации.Отчество = "", " ", ВРЕГ(СокрЛП(ВыборкаПоРаботникиОрганизации.Отчество)));
		//vvv
		Фамилия_Раннее = ?(ВыборкаПоРаботникиОрганизации.Фамилия_Раннее = "", " ", ВРЕГ(СокрЛП(ВыборкаПоРаботникиОрганизации.Фамилия_Раннее)));
		Имя_Раннее = ?(ВыборкаПоРаботникиОрганизации.Имя_Раннее = "", " ", ВРЕГ(СокрЛП(ВыборкаПоРаботникиОрганизации.Имя_Раннее)));
		Отчество_Раннее = ?(ВыборкаПоРаботникиОрганизации.Отчество_Раннее = "", " ", ВРЕГ(СокрЛП(ВыборкаПоРаботникиОрганизации.Отчество_Раннее)));
		
		Если ТипФормы=Перечисления.ТипыФормыДляПУ1.Восстановление ТОгда
			Фамилия = " ";
			Имя = " ";
			Отчество = " ";
		КонецЕсли;
		//
		СтрокаФайла = СтрокаФайла+Фамилия+"="+Имя+"="+Отчество+"=";

		Если Отказ Тогда
			Продолжить;
		КонецЕсли;

		НомерДокументаВПачке = 	НомерДокументаВПачке + 1;

		//Берем запись с пустыми полями
		//Запись = ПолучитьСтруктуруЗаписи(ТаблицаФорматаЗаписи);

		НомерДокументаВПачке = НомерДокументаВПачке;
		ДатаЗаполнения = ДатаЗаполнения;
		
		Пол = ?(ВыборкаПоРаботникиОрганизации.Пол = Перечисления.ПолФизическихЛиц.Мужской, "М", "Ж");
		
		ДатаФормирования = ВыборкаПоРаботникиОрганизации.ДатаРождения;
		Если Не ЗначениеЗаполнено(ДатаФормирования) тогда
			ДеньШапки = " ";
			МесяцШапки = "";
			ГодШапки = "";
		СтДатаРождения = ДеньШапки;
		Иначе
			ДеньШапки        = ?(День(ДатаФормирования)<10,"0","")+День(ДатаФормирования);
			МесяцШапки       = ?(Месяц(ДатаФормирования)<10,"0","")+Месяц(ДатаФормирования);
			ГодШапки 		 = Строка(СокрЛП(Формат(Год(ДатаФормирования), "ЧГ=0")));
		СтДатаРождения = ДеньШапки+"/"+МесяцШапки+"/"+ГодШапки;
		Конецесли;
		

		Гражданство = ?(ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.Страна)) = "БЕЛАРУСЬ", "1", "0");
		//vvv
		Гражданство = ВыборкаПоРаботникиОрганизации.Страна;
		//

		ГородРождения = ?(СокрЛП(ВыборкаПоРаботникиОрганизации.ГородРождения) = "", " ", СокрЛП(ВыборкаПоРаботникиОрганизации.ГородРождения));
		РайонРождения = ?(СокрЛП(ВыборкаПоРаботникиОрганизации.РайонРождения) = "", " ", СокрЛП(ВыборкаПоРаботникиОрганизации.РайонРождения));
		ОбластьРождения = ?(СокрЛП(ВыборкаПоРаботникиОрганизации.ОбластьРождения) = "", " ", СокрЛП(ВыборкаПоРаботникиОрганизации.ОбластьРождения+" ОБЛАСТЬ"));
		СтранаРождения = ?(Не ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.СтранаРождения), " ", ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.СтранаРождения.НаименованиеПолное)));
		//vvv
		Если ТипФормы=Перечисления.ТипыФормыДляПУ1.Восстановление ТОгда
			Пол = " ";
			СтДатаРождения = " ";
			городРождения = " ";
			РайонРождения = " ";
			ОбластьРождения = " ";
			СтранаРождения = " ";
		КонецЕсли;
		//
		СтрокаФайла = СтрокаФайла + Пол+"="+Гражданство+"="+СтДатаРождения+"="+городРождения+"="+РайонРождения+"="+ОбластьРождения+"="+СтранаРождения+"=";
		Если ВыборкаПоРаботникиОрганизации.ДокументВид.КодИМНС = "02" тогда	
			//vvv комментируем
			//СтрокаФайла = СтрокаФайла + СокрЛП(ВыборкаПоРаботникиОрганизации.ДокументСерия)+"=";
			//СтрокаФайла = СтрокаФайла + СокрЛП(ВыборкаПоРаботникиОрганизации.ДокументНомер)+"=";
			СтрокаФайла = СтрокаФайла + ?(ТипФормы=Перечисления.ТипыФормыДляПУ1.Восстановление," ",СокрЛП(ВыборкаПоРаботникиОрганизации.ДокументСерия))+"=";
			СтрокаФайла = СтрокаФайла + ?(ТипФормы=Перечисления.ТипыФормыДляПУ1.Восстановление," ",СокрЛП(ВыборкаПоРаботникиОрганизации.ДокументНомер))+"=";
		Иначе
			СтрокаФайла = СтрокаФайла + " =";
			//vvv
			//СтрокаФайла = СтрокаФайла + СокрЛП(ВыборкаПоРаботникиОрганизации.ДокументСерия)+СокрЛП(ВыборкаПоРаботникиОрганизации.ДокументНомер)+"=";
			СтрокаФайла = СтрокаФайла + ?(ТипФормы=Перечисления.ТипыФормыДляПУ1.Восстановление," ",СокрЛП(ВыборкаПоРаботникиОрганизации.ДокументСерия))+?(ТипФормы=Перечисления.ТипыФормыДляПУ1.Восстановление," ",СокрЛП(ВыборкаПоРаботникиОрганизации.ДокументНомер))+"=";
		КонецЕсли;
		ДатаФормирования = ВыборкаПоРаботникиОрганизации.ДокументДатаВыдачи;
		
		Если Не ЗначениеЗаполнено(ДатаФормирования) тогда
			ДеньШапки = " ";
			МесяцШапки = "";
			ГодШапки = "";
		СтДатаВыдачи = ДеньШапки;
		Иначе
			ДеньШапки        = ?(День(ДатаФормирования)<10,"0","")+День(ДатаФормирования);
			МесяцШапки       = ?(Месяц(ДатаФормирования)<10,"0","")+Месяц(ДатаФормирования);
			ГодШапки 		 = Строка(СокрЛП(Формат(Год(ДатаФормирования), "ЧГ=0")));
		СтДатаВыдачи = ДеньШапки+"/"+МесяцШапки+"/"+ГодШапки;
		Конецесли;
		
		//vvv
		ДатаРождения_Раннее=ВыборкаПоРаботникиОрганизации.ДатаРождения_Раннее;
		Если Не ЗначениеЗаполнено(ДатаРождения_Раннее) тогда
			ДеньДР = " ";
			МесяцДР = "";
			ГодДР = "";
			СтДатаРождения_Раннее = ДеньДР;
		Иначе
			ДеньДР        = ?(День(ДатаРождения_Раннее)<10,"0","")+День(ДатаРождения_Раннее);
			МесяцДР       = ?(Месяц(ДатаРождения_Раннее)<10,"0","")+Месяц(ДатаРождения_Раннее);
			ГодДР 		 = Строка(СокрЛП(Формат(Год(ДатаРождения_Раннее), "ЧГ=0")));
			СтДатаРождения_Раннее = ДеньДР+"/"+МесяцДР+"/"+ГодДР;
		Конецесли;
	    //
		
		//vvv добавим если
		Если ТипФормы<>Перечисления.ТипыФормыДляПУ1.Восстановление ТОгда
			СтрокаФайла = Строкафайла + СтДатаВыдачи+"=";
			СтрокаФайла = СтрокаФайла + ?(СокрЛП(ВыборкаПоРаботникиОрганизации.ДокументКемВыдан)=""," ",СокрЛП(ВыборкаПоРаботникиОрганизации.ДокументКемВыдан))+"=";
			СтрокаФайла = СтрокаФайла + ВыборкаПоРаботникиОрганизации.ЛичныйНомер+"=";
			СтрокаФайла = СтрокаФайла + ?(СокрЛП(ВыборкаПоРаботникиОрганизации.ИндексРегистрации)=""," ",СокрЛП(ВыборкаПоРаботникиОрганизации.ИндексРегистрации))+"=";
			СтрокаФайла = СтрокаФайла + ?(СокрЛП(ВыборкаПоРаботникиОрганизации.АдресРегистрации)=""," ",СокрЛП(ВыборкаПоРаботникиОрганизации.АдресРегистрации))+"= = ="+ДатаЗаполнения;
		Иначе
			СтрокаФайла = Строкафайла + " "+"=";
			СтрокаФайла = Строкафайла + " "+"=";
			СтрокаФайла = Строкафайла + " "+"=";
			СтрокаФайла = Строкафайла + " "+"=";
			СтрокаФайла = СтрокаФайла + " "+"= = ="+ДатаЗаполнения;
		КонецЕсли;
		//
		
		Если ТипФормы=Перечисления.ТипыФормыДляПУ1.Регистрация ТОгда
			СтрокаФайла = СтрокаФайла + "= = = = = =>";
		Иначе
			СтрокаФайла = СтрокаФайла + "="+?(СокрЛП(ВыборкаПоРаботникиОрганизации.ЛичныйНомер_Раннее)=""," ",СокрЛП(ВыборкаПоРаботникиОрганизации.ЛичныйНомер_Раннее))+"=";
			СтрокаФайла = СтрокаФайла + Фамилия_Раннее+"=";
			СтрокаФайла = СтрокаФайла + Имя_Раннее+"=";
			СтрокаФайла = СтрокаФайла + Отчество_Раннее+"=";
			СтрокаФайла = СтрокаФайла + стДатаРождения_Раннее+"=>";
		КонецЕсли;
		
		ТекстФайла.ДобавитьСтроку(СтрокаФайла);
	КонецЦикла; 
    //vvv
	Если ЗаписыватьПачку Тогда
		ТекстФайла.Записать(КаталогВыгрузки+"\"+СокрЛП(НомерПачки)+".txt",КодировкаТекста.ANSI);
	КонецЕсли;
	//

	Возврат ТекстФайла.ПолучитьТекст();
КонецФункции 


//Процедура вывода файла сведений на печать
Процедура ПечатьФайла(РежимПечати = 0, МестоВызова = "") Экспорт

	ЕстьОшибки = Ложь;
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ЭтотОбъект,ЕстьОшибки);
	Если ЕстьОшибки тогда
		Возврат;
	КонецЕсли;	 

	Макет = ПолучитьМакет("ФормаАДВ_1");
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АнкетаЗастрахованногоЛица_ФормаАДВ_1";

	//Получаем таблицу формата записи
	ДокументФорматЗаписей = ПолучитьМакет("ФорматЗаписей");
	ТаблицаФорматаЗаписи = ПроцедурыПерсонифицированогоУчета.ПолучитьФорматЗаписи("АНКТ",ДокументФорматЗаписей);

	//Получаем инициализированную структуру, соответствующую формату записи 
	//ПустаяЗапись = ПолучитьСтруктуруЗаписи(ТаблицаФорматаЗаписи);
	
	//Обработка заголовка файла
	ИнформацияОПачке = Новый Структура;
	Если ПроцедурыПерсонифицированогоУчета.РазобратьЗаголовокФайла(ТекстФайла,ИнформацияОПачке)=0 тогда
		Возврат;
	КонецЕсли;	
	
	//Обработка документов файла
	ОбластьАнкета = Макет.ПолучитьОбласть("Анкета");
    
	Для Н=5 по СтрЧислоСтрок(ТекстФайла) цикл
		//Прочитаем запись из файла
		СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
		Запись = ПроцедурыПерсонифицированогоУчета.ПолучитьСтруктуруЗаписи(ТаблицаФорматаЗаписи);
		СтрОшибка = "";
		Если НЕ ПроцедурыПерсонифицированогоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла,"АНКТ",ТаблицаФорматаЗаписи,Запись,СтрОшибка) тогда
			Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
			Возврат;
		КонецЕсли;	

		ОбластьАнкета.Параметры.ДатаЗаполнения					= 	"Дата заполнения "+ПроцедурыПерсонифицированогоУчета.ДатаВОтчет(Запись.ДатаЗаполнения);
		ОбластьАнкета.Параметры.Фамилия 						= Запись.Фамилия; 
		ОбластьАнкета.Параметры.Имя 							= Запись.Имя; 
		ОбластьАнкета.Параметры.Отчество 						= Запись.Отчество; 
		ОбластьАнкета.Параметры.Пол 							= Запись.Пол+"     (м/ж)"; 
		ОбластьАнкета.Параметры.ДатаРождения 					= ПроцедурыПерсонифицированогоУчета.ДатаВОтчет(Запись.СтандартнаяДатаРождения); 

		//Место рождения
		ОбластьАнкета.Параметры.МестоРожденияТип 				= 	?(Запись.ТипМестаРождения = "ОСОБОЕ", "особое", "");
		ОбластьАнкета.Параметры.МестоРожденияГород 				= 	Запись.МестоРожденияНаселенныйПункт;
		ОбластьАнкета.Параметры.МестоРожденияРайон 				= 	Запись.МестоРожденияРайон;
		ОбластьАнкета.Параметры.МестоРожденияОбласть			= 	Запись.МестоРожденияОбласть;
		ОбластьАнкета.Параметры.МестоРожденияСтрана			 	= 	Запись.МестоРожденияСтрана;

		ОбластьАнкета.Параметры.Гражданство 					= 	Запись.Гражданство;

		//Паспортные данные
		НаименованиеДокумента 									= 	Запись.ДокументНаименование;
		Серия1 													= 	Запись.ДокументСерияРимскиеЦифры;
		Серия2 													= 	Запись.ДокументСерияРусскиеБуквы;
		
		СерияНомер = Серия1 +?( СокрЛП(НаименованиеДокумента) 	= ВРЕГ("паспорт россии"), " ", ?( СокрЛП(НаименованиеДокумента) = ВРЕГ("паспорт"), "-", "") ) + Серия2 +",  " + Формат(Запись.ДокументНомер,"ЧГ=0");

		ОбластьАнкета.Параметры.НаименованиеДокумента		= 	НаименованиеДокумента;
		ОбластьАнкета.Параметры.СерияНомер			 		= 	СерияНомер;
		ОбластьАнкета.Параметры.ДатаВыдачи 					= 	ПроцедурыПерсонифицированогоУчета.ДатаВОтчет(Запись.ДокументДатаВыдачи);
		ОбластьАнкета.Параметры.КемВыдан 					= 	Запись.ДокументКемВыдан;
		
		//Адреса
		ОбластьАнкета.Параметры.АдресРегистрации 			=	РегламентированнаяОтчетность.ПредставлениеАдреса(Запись.АдресРегистрации,0,"");
		ОбластьАнкета.Параметры.АдресФактический 			= 	РегламентированнаяОтчетность.ПредставлениеАдреса(Запись.АдресФактический,0,"");
		ОбластьАнкета.Параметры.Телефоны 					= 	Запись.Телефоны;
		
		ДокументРезультат.Вывести(ОбластьАнкета);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла;	
	
	РаботаСДиалогами.НапечататьДокумент(ДокументРезультат,1,Ложь,"Анкета застрахованного лица АДВ-1");

    //Печать описи документов
	ДокументОписи = Новый ТабличныйДокумент;
	ДокументОписи.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АнкетаЗастрахованногоЛица_АДВ_6";
	ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация,Дата,Ответственный.ФизЛицо);
	ПроцедурыПерсонифицированогоУчета.ВывестиОписьАДВ6(ДокументОписи,ИнформацияОПачке,ОтветственныеЛица);
	РаботаСДиалогами.НапечататьДокумент(ДокументОписи,1,Ложь,"Опись документов АДВ-6");
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	|	Номер, 
	|	Организация,
	|	Ответственный,
	//vvv
	|	НомерПачки,
	|	КаталогВыгрузки,
	|	ТипФормы,
	//
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Выбирает данные, необходимые для заполнения утвержденных форм как из спр-ка
//  физлиц, так и из соотв. регистров сведений
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса к данным работников документа.
//
Функция	СформироватьЗапросПоРаботникиОрганизации()
	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ДатаАктуальности" , Дата);
	Запрос.УстановитьПараметр("ВидАдресаРегистрации" , Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица);
	Запрос.УстановитьПараметр("ВидАдресаФактический" , Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица);
   	Запрос.УстановитьПараметр("ВидТелефонаДомашний" , Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АнкетаЗастрахованногоЛицаРаботники.НомерСтроки КАК НомерСтроки,
	|	АнкетаЗастрахованногоЛицаРаботники.ФизЛицо КАК ФизЛицо,
	|	АнкетаЗастрахованногоЛицаРаботники.ФизЛицо.Наименование КАК ФизЛицоНаименование,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ЛичныйНомер ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ЛичныйНомер КОНЕЦ КАК ЛичныйНомер,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ПаспортСерия ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ПаспортСерия КОНЕЦ КАК ДокументСерия,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ПаспортНомер ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ПаспортНомер КОНЕЦ КАК ДокументНомер,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ПаспортДатаВыдачи ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ПаспортДатаВыдачи КОНЕЦ КАК ДокументДатаВыдачи,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ПаспортКемВыдан ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ПаспортКемВыдан КОНЕЦ КАК ДокументКемВыдан,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ДокументВид ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ДокументВид КОНЕЦ КАК ДокументВид,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.АдресРегистрации ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.АдресРегистрации КОНЕЦ КАК АдресРегистрации,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ИндексРегистрации ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ИндексРегистрации КОНЕЦ КАК ИндексРегистрации,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.Телефоны ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.Телефоны КОНЕЦ КАК Телефоны,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.Фамилия ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.Фамилия КОНЕЦ КАК Фамилия,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.Имя ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.Имя КОНЕЦ КАК Имя,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.Отчество ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.Отчество КОНЕЦ КАК Отчество,
	//vvv
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.Фамилия_Раннее ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.Фамилия_Раннее КОНЕЦ КАК Фамилия_Раннее,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.Имя_Раннее ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.Имя_Раннее КОНЕЦ КАК Имя_Раннее,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.Отчество_Раннее ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.Отчество_Раннее КОНЕЦ КАК Отчество_Раннее,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ЛичныйНомер_Раннее ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ЛичныйНомер_Раннее КОНЕЦ КАК ЛичныйНомер_Раннее,
	|	АнкетаЗастрахованногоЛицаРаботники.ДатаРождения_Раннее КАК ДатаРождения_Раннее,
	//
	|	АнкетаЗастрахованногоЛицаРаботники.Пол,
	|	АнкетаЗастрахованногоЛицаРаботники.ДатаРождения,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ГородРождения ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ГородРождения КОНЕЦ КАК ГородРождения,
	//vvv
	//|	АнкетаЗастрахованногоЛицаРаботники.Гражданство.Наименование КАК Страна,
	|	АнкетаЗастрахованногоЛицаРаботники.Гражданство.Код КАК Страна,
	//
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.РайонРождения ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.РайонРождения КОНЕЦ КАК РайонРождения,
	|	АнкетаЗастрахованногоЛицаРаботники.СтранаРождения,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ОбластьРождения ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ОбластьРождения КОНЕЦ КАК ОбластьРождения
	|ИЗ
	|	Документ.АнкетаЗастрахованногоЛица.РаботникиОрганизации КАК АнкетаЗастрахованногоЛицаРаботники
	|
	|ГДЕ
	|	АнкетаЗастрахованногоЛицаРаботники.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции



// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, которая подает сведения!", Отказ, Заголовок);
	КонецЕсли;
	//vvv
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НомерПачки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан номер пачки!", Отказ, Заголовок);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КаталогВыгрузки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан каталог выгрузки!", Отказ, Заголовок);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ТипФормы) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан тип формы!", Отказ, Заголовок);
	КонецЕсли;
	//
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Ответственный) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указано ответственное лицо!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Фамилия, Имя, Отказ ,Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке № """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Работники организации"": ";
	// ФизЛицо
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не выбран работник!", Отказ ,Заголовок);
	Иначе	
		СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + ВыборкаПоСтрокамДокумента.ФизЛицо + " ";

		Если  ЗначениеЗаполнено(СтрЗаменить(ВыборкаПоСтрокамДокумента.СтраховойНомерПФР,"-","")) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Уже имеет страховой номер!", Отказ ,Заголовок);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Фамилия) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана фамилия!", Отказ ,Заголовок);
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(Имя) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задано имя!", Отказ ,Заголовок);
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Пол) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан пол!", Отказ ,Заголовок);
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаРождения) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана дата рождения!", Отказ ,Заголовок);
		Иначе
			Если ВыборкаПоСтрокамДокумента.ДатаРождения > Дата тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Дата рождения не может быть больше даты подачи сведений!", Отказ ,Заголовок);
			КонецЕсли;	 
		КонецЕсли;	
		
		Если СокрЛП(СтрЗаменить(ВыборкаПоСтрокамДокумента.МестоРождения,",","")) = "" 
			или СокрЛП(СтрЗаменить(ВыборкаПоСтрокамДокумента.МестоРождения,",","")) = "0" Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не указано место рождения!", Отказ ,Заголовок);
		КонецЕсли; 

		//Паспортные данные
        Если ВыборкаПоСтрокамДокумента.ДокументВид = NULL Тогда

			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не указаны паспортные данные!", Отказ ,Заголовок);

		Иначе

			//Проверка реквизитов паспортных данных
			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументВид) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан вид документа, удостоверяющего личность!", Отказ ,Заголовок);
			КонецЕсли;	

			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументДатаВыдачи) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана дата выдачи документа, удостоверяющего личность!", Отказ ,Заголовок);
			Иначе
				Если (ВыборкаПоСтрокамДокумента.ДатаРождения > ВыборкаПоСтрокамДокумента.ДокументДатаВыдачи) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Дата рождения не должна превышать дату выдачи документа, удостоверяющего личность!", Отказ ,Заголовок);
				КонецЕсли;
			КонецЕсли;	

			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументСерия) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана серия документа, удостоверяющего личность!", Отказ ,Заголовок);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументНомер) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан номер документа, удостоверяющего личность!", Отказ ,Заголовок);
			КонецЕсли;
		КонецЕсли; 

		// Проверка адреса регистрации и проживания
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.АдресРегистрации) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан адрес регистрации (юридический адрес)!", Отказ ,Заголовок);
		КонецЕсли;	
		Если НЕ РегламентированнаяОтчетность.АдресСоответствуетТребованиям(РегламентированнаяОтчетность.РазложитьАдрес(ВыборкаПоСтрокамДокумента.АдресРегистрации)) тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- В адресе регистрации присутствуют латинские или недопустимые символы!", Отказ ,Заголовок);
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетность.АдресСоответствуетТребованиям(РегламентированнаяОтчетность.РазложитьАдрес(ВыборкаПоСтрокамДокумента.АдресФактический)) тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- В фактическом адресе проживания присутствуют латинские или недопустимые символы!", Отказ ,Заголовок);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	//При проведении файл формируем заново 
	ТекстФайла = "";
	#Если Клиент Тогда
	//vvv	
	//ТекстФайла = СформироватьВыходнойФайл(Отказ);
	ТекстФайла = СформироватьВыходнойФайл(Отказ,Ложь);
	//
	#КонецЕсли
	Если Отказ тогда
		Возврат;
	КонецЕсли;	 

	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения["АрхивДанныхРегламентированнойОтчетности"].Добавить();
	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Файл-пачка форм ПУ-1";
	Запись.Данные = ТекстФайла; 
КонецПроцедуры	

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации,,"ФизЛицо");
	
КонецПроцедуры


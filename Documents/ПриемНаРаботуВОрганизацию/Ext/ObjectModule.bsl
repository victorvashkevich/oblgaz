////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;
Перем СоответствиеВалютныеСпособыРасчета;
//vvv
Перем мНаборЗаписейПрименениеВычетов;
//
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Т1_от_6_4_2001" или ИмяМакета = "Т1_от_5_1_2004" Тогда
		ТабДокумент = ПечатьТ1(ИмяМакета);
		
	ИначеЕсли ИмяМакета = "Т1а_от_6_4_2001" или ИмяМакета = "Т1а_от_5_1_2004" тогда
		ТабДокумент = ПечатьТ1а(ИмяМакета);
		
	КонецЕсли;

	Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,"Прием на работу в организацию "));

КонецФункции // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("Т1а_от_5_1_2004",	"Форма Т-1а");
	СтруктураПечатныхФорм.Вставить("Т1_от_5_1_2004",	"Форма Т-1");
	СтруктураПечатныхФорм.Вставить("Т1а_от_6_4_2001",	"Форма Т-1а (от 06.04.2001)");
	СтруктураПечатныхФорм.Вставить("Т1_от_6_4_2001",	"Форма Т-1 (от 06.04.2001)");
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет табличную часть документа "Работники" списком по оформленным трудовым договорам
//
Процедура ЗаполнитьТабличнуюЧастьРаботникиСотрудниками(ДатаНачалаПериода, ДатаОкончанияПериода) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНачалаПериода",		ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода",	ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("Ссылка",					Ссылка);
	Запрос.УстановитьПараметр("РайонныйКоэффициент",	РайонныйКоэффициент);
	
	УсловиеНаДатыРаботы = "";
	Если ЗначениеЗаполнено(ДатаНачалаПериода) Тогда
		УсловиеНаДатыРаботы = УсловиеНаДатыРаботы + Символы.ПС + Символы.Таб + "И <имя поля>.ДатаНачала >= &ДатаНачалаПериода";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда
		УсловиеНаДатыРаботы = УсловиеНаДатыРаботы + Символы.ПС + Символы.Таб + "И <имя поля>.ДатаНачала <= &ДатаОкончанияПериода";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
	|	СотрудникиОрганизаций.Должность,
	|	СотрудникиОрганизаций.ПодразделениеОрганизации,
	|	СотрудникиОрганизаций.ЗанимаемыхСтавок,
	|	СотрудникиОрганизаций.ДатаНачала КАК ДатаПриема,
	|	СотрудникиОрганизаций.ДатаОкончания КАК ДатаУвольнения,
	|	СотрудникиОрганизаций.ИспытательныйСрок,
	|	СотрудникиОрганизаций.ГрафикРаботы,
	|	СотрудникиОрганизаций.Физлицо.Наименование КАК ФизлицоНаименование,
	|	СотрудникиОрганизаций.ВидРасчета КАК ВидРасчета,
	|	СотрудникиОрганизаций.РасчетнаяТарифнаяСтавка КАК Показатель1,
	|	NULL КАК Показатель2,
	|	NULL КАК Показатель3,
	|	NULL КАК Показатель4,
	|	СотрудникиОрганизаций.ВалютаТарифнойСтавки КАК Валюта1,
	|	NULL КАК Валюта2,
	|	NULL КАК Валюта3,
	|	NULL КАК Валюта4,
	|	СотрудникиОрганизаций.ТарифныйРазряд КАК ТарифныйРазряд1,
	|	NULL КАК ТарифныйРазряд2,
	|	NULL КАК ТарифныйРазряд3,
	|	NULL КАК ТарифныйРазряд4,
	|	СотрудникиОрганизаций.РасчетнаяТарифнаяСтавка КАК МесячнаяТарифнаяСтавка,
	|	СотрудникиОрганизаций.РазрядЕТС,
	|	СотрудникиОрганизаций.КоэффициентЕТС,
	|	СотрудникиОрганизаций.ПроцентПовышения КАК ПроцентПоКонтракту,
	|	СотрудникиОрганизаций.Должность.Категория КАК Категория,
	|	СотрудникиОрганизаций.ТарифныйСПовышениемПоИнструкции,
	|	СотрудникиОрганизаций.ИтоговоеПовышениеПоИнструкции,
	|	СотрудникиОрганизаций.ТарифнаяСтавка,
	|	СотрудникиОрганизаций.РазмерСтавки1Разряда,
	|	СотрудникиОрганизаций.ПовышенныйКоэффициентЕТС,
	|	ВЫБОР
	|		КОГДА СотрудникиОрганизаций.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НапомнитьПоЗавершении,
	|	СотрудникиОрганизаций.ТарифнаяСтавкаПервогоРазряда,
	|	СотрудникиОрганизаций.УсловияТрудаИзмерение,
	|	СотрудникиОрганизаций.ВидДеятельностиИзмерение
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизаций.Сотрудник
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СотрудникиОрганизаций.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА СотрудникиОрганизаций.Организация
	|			ИНАЧЕ СотрудникиОрганизаций.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|	И СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|	И (РаботникиОрганизаций.Сотрудник ЕСТЬ NULL 
	|			ИЛИ РаботникиОрганизаций.Регистратор = &Ссылка)" + СтрЗаменить(УсловиеНаДатыРаботы,"<имя поля>","СотрудникиОрганизаций") + "
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизаций.Ссылка,
	|	СотрудникиОрганизаций.Физлицо,
	|	СотрудникиОрганизаций.Должность,
	|	СотрудникиОрганизаций.ПодразделениеОрганизации,
	|	СотрудникиОрганизаций.ЗанимаемыхСтавок,
	|	СотрудникиОрганизаций.ДатаНачала,
	|	СотрудникиОрганизаций.ДатаОкончания,
	|	СотрудникиОрганизаций.ИспытательныйСрок,
	|	СотрудникиОрганизаций.ГрафикРаботы,
	|	СотрудникиОрганизаций.Физлицо.Наименование,
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.РайонныйКоэффициент),
	|	ВЫБОР
	|		КОГДА СотрудникиОрганизаций.ПодразделениеОрганизации.КодПоОКАТО <> """"
	|				И СотрудникиОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициент > 1
	|			ТОГДА СотрудникиОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициент
	|		ИНАЧЕ &РайонныйКоэффициент
	|	КОНЕЦ * 100 - 100,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизаций.Сотрудник
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СотрудникиОрганизаций.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА СотрудникиОрганизаций.Организация
	|			ИНАЧЕ СотрудникиОрганизаций.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|	И СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|	И (РаботникиОрганизаций.Сотрудник ЕСТЬ NULL ИЛИ РаботникиОрганизаций.Регистратор = &Ссылка)" + СтрЗаменить(УсловиеНаДатыРаботы,"<имя поля>","СотрудникиОрганизаций") + "
	|	И ВЫБОР
	|			КОГДА СотрудникиОрганизаций.ПодразделениеОрганизации.КодПоОКАТО <> """"
	|					И СотрудникиОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициент > 1
	|				ТОГДА СотрудникиОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициент
	|			ИНАЧЕ &РайонныйКоэффициент
	|		КОНЕЦ > 1
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Физлицо,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Должность,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ПодразделениеОрганизации,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ЗанимаемыхСтавок,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ДатаНачала,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ДатаОкончания,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ИспытательныйСрок,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ГрафикРаботы,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Физлицо.Наименование,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Надбавка,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Показатель1,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Показатель2,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Показатель3,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Показатель4,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Валюта1,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Валюта2,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Валюта3,
	|	СотрудникиОрганизацийПерсональныеНадбавки.Валюта4,
	|	СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд1,
	|	СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд2,
	|	СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд3,
	|	СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд4,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.СотрудникиОрганизаций.ПерсональныеНадбавки КАК СотрудникиОрганизацийПерсональныеНадбавки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО СотрудникиОрганизацийПерсональныеНадбавки.Ссылка = РаботникиОрганизаций.Сотрудник
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Организация
	|			ИНАЧЕ СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|	И СотрудникиОрганизацийПерсональныеНадбавки.Надбавка <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|	И СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Актуальность
	|	И СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|	И (РаботникиОрганизаций.Сотрудник ЕСТЬ NULL ИЛИ РаботникиОрганизаций.Регистратор = &Ссылка)" + СтрЗаменить(УсловиеНаДатыРаботы,"<имя поля>","СотрудникиОрганизацийПерсональныеНадбавки.Ссылка") + " 
	|
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизаций.Ссылка,
	|	СотрудникиОрганизаций.Физлицо,
	|	СотрудникиОрганизаций.Должность,
	|	СотрудникиОрганизаций.ПодразделениеОрганизации,
	|	СотрудникиОрганизаций.ЗанимаемыхСтавок,
	|	СотрудникиОрганизаций.ДатаНачала,
	|	СотрудникиОрганизаций.ДатаОкончания,
	|	СотрудникиОрганизаций.ИспытательныйСрок,
	|	СотрудникиОрганизаций.ГрафикРаботы,
	|	СотрудникиОрганизаций.Физлицо.Наименование,
	|	СхемыМотивацииРаботников.ВидРасчета,
	|	СхемыМотивацииРаботников.Показатель1,
	|	СхемыМотивацииРаботников.Показатель2,
	|	СхемыМотивацииРаботников.Показатель3,
	|	СхемыМотивацииРаботников.Показатель4,
	|	СхемыМотивацииРаботников.Валюта1,
	|	СхемыМотивацииРаботников.Валюта2,
	|	СхемыМотивацииРаботников.Валюта3,
	|	СхемыМотивацииРаботников.Валюта4,
	|	СхемыМотивацииРаботников.ТарифныйРазряд1,
	|	СхемыМотивацииРаботников.ТарифныйРазряд2,
	|	СхемыМотивацииРаботников.ТарифныйРазряд3,
	|	СхемыМотивацииРаботников.ТарифныйРазряд4,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизаций.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
	|		ПО (СхемыМотивацииРаботников.Организация = ВЫБОР
	|				КОГДА СотрудникиОрганизаций.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА СотрудникиОрганизаций.Организация
	|				ИНАЧЕ СотрудникиОрганизаций.ОбособленноеПодразделение
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА СхемыМотивацииРаботников.Должность <> ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)
	|						И СхемыМотивацииРаботников.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|					ТОГДА СхемыМотивацииРаботников.Должность = СотрудникиОрганизаций.Должность
	|							И СхемыМотивацииРаботников.Подразделение = СотрудникиОрганизаций.ПодразделениеОрганизации
	|				ИНАЧЕ СхемыМотивацииРаботников.Должность = СотрудникиОрганизаций.Должность
	|			КОНЕЦ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СотрудникиОрганизаций.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА СотрудникиОрганизаций.Организация
	|			ИНАЧЕ СотрудникиОрганизаций.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|	И СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|	И СхемыМотивацииРаботников.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций
	|	И СхемыМотивацииРаботников.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|	И (РаботникиОрганизаций.Сотрудник ЕСТЬ NULL ИЛИ РаботникиОрганизаций.Регистратор = &Ссылка)" + СтрЗаменить(УсловиеНаДатыРаботы,"<имя поля>","СотрудникиОрганизаций") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизлицоНаименование,
	|	Сотрудник,
	|	ВидРасчета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗапросКоэфПовышения = Новый запрос;
	ЗапросКоэфПовышения.УстановитьПараметр("ДатаНачалаПериода",		ДатаНачалаПериода);
	ЗапросКоэфПовышения.УстановитьПараметр("ДатаОкончанияПериода",	ДатаОкончанияПериода);
	ЗапросКоэфПовышения.УстановитьПараметр("Организация",			Организация);
	ЗапросКоэфПовышения.УстановитьПараметр("Ссылка",					Ссылка);

	ЗапросКоэфПовышения.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизацийКоэфПовышенияТО.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизацийКоэфПовышенияТО.Коэффициент,
	|	СотрудникиОрганизацийКоэфПовышенияТО.Размер
	|ИЗ
	|	Справочник.СотрудникиОрганизаций.КоэфПовышенияТО КАК СотрудникиОрганизацийКоэфПовышенияТО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО СотрудникиОрганизацийКоэфПовышенияТО.Ссылка = РаботникиОрганизаций.Сотрудник
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СотрудникиОрганизацийКоэфПовышенияТО.Ссылка.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА СотрудникиОрганизацийКоэфПовышенияТО.Ссылка.Организация
	|			ИНАЧЕ СотрудникиОрганизацийКоэфПовышенияТО.Ссылка.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|	И СотрудникиОрганизацийКоэфПовышенияТО.Ссылка.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|	И (РаботникиОрганизаций.Сотрудник ЕСТЬ NULL 
	|			ИЛИ РаботникиОрганизаций.Регистратор = &Ссылка)" + СтрЗаменить(УсловиеНаДатыРаботы,"<имя поля>","СотрудникиОрганизацийКоэфПовышенияТО.Ссылка") + "";

	ВыборкаКоэф = ЗапросКоэфПовышения.Выполнить().Выбрать();
	
	ЗапросПовышения = Новый запрос;
	ЗапросПовышения.УстановитьПараметр("ДатаНачалаПериода",		ДатаНачалаПериода);
	ЗапросПовышения.УстановитьПараметр("ДатаОкончанияПериода",	ДатаОкончанияПериода);
	ЗапросПовышения.УстановитьПараметр("Организация",			Организация);
	ЗапросПовышения.УстановитьПараметр("Ссылка",					Ссылка);
	
	ЗапросПовышения.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизацийПовышенияПоИнструкции.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизацийПовышенияПоИнструкции.Коэффициент,
	|	СотрудникиОрганизацийПовышенияПоИнструкции.Размер
	|ИЗ
	|	Справочник.СотрудникиОрганизаций.ПовышенияПоИнструкции КАК СотрудникиОрганизацийПовышенияПоИнструкции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО СотрудникиОрганизацийПовышенияПоИнструкции.Ссылка = РаботникиОрганизаций.Сотрудник
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СотрудникиОрганизацийПовышенияПоИнструкции.Ссылка.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА СотрудникиОрганизацийПовышенияПоИнструкции.Ссылка.Организация
	|			ИНАЧЕ СотрудникиОрганизацийПовышенияПоИнструкции.Ссылка.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|	И СотрудникиОрганизацийПовышенияПоИнструкции.Ссылка.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|	И (РаботникиОрганизаций.Сотрудник ЕСТЬ NULL 
	|			ИЛИ РаботникиОрганизаций.Регистратор = &Ссылка)" + СтрЗаменить(УсловиеНаДатыРаботы,"<имя поля>","СотрудникиОрганизацийПовышенияПоИнструкции.Ссылка") + "";

	ВыборкаПовышения = ЗапросПовышения.Выполнить().Выбрать();
	
	
	РаботникиОрганизации.Очистить();
	ОсновныеНачисления.Очистить();
	КоэфПовышенияТО.Очистить();
	ПовышенияПоИнструкции.Очистить();

	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ЗаполнитьЗначенияСвойств(РаботникиОрганизации.Добавить(), Выборка);
		
		Пока Выборка.Следующий() Цикл
			ВариантРасчетаЧасовойТарифнойСтавки = РегистрыСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.Получить().АлгоритмРасчетаЧасовойТарифнойСтваки;
			Если ЗначениеЗаполнено(Выборка.ВидРасчета) Тогда
				Если Выборка.ВидРасчета.СпособРасчета  = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке тогда
					ДнейВГоду = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(Выборка.ДатаПриема,Новый Структура("ВидПараметра",Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаДней));
					Тариф = Выборка.Показатель1;
					Если ДнейВГоду.Размер <> 0 тогда
						СтрокаОсновныеНачисления = ОсновныеНачисления.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаОсновныеНачисления, Выборка);
						СтрокаОсновныеНачисления.Показатель1 = ОбщегоНазначения.ОкруглитьПоВалюте(Тариф/?(ДнейВГоду.Размер=0,1,ДнейВГоду.Размер), Константы.ВалютаРегламентированногоУчета.Получить()); 
					Иначе
						Сообщить("Невозможно рассчиать дневную ставку. Не определен параметр среднемесячного количества рабочих дней");
					КонецЕсли;
				ИначеЕсли Выборка.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке ИЛИ Выборка.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок тогда
					ЧасовВГоду = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(Выборка.ДатаПриема,Новый Структура("ВидПараметра",Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаЧасов));
					Тариф = Выборка.Показатель1;
					Если ЧасовВГоду.Размер <> 0 тогда
						СтрокаОсновныеНачисления = ОсновныеНачисления.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаОсновныеНачисления, Выборка);
						Если ВариантРасчетаЧасовойТарифнойСтавки = Перечисления.ВариантыАлгоритмаРасчетаЧасовойТарифнойСтваки.РасчетЧасовойТарифгойСтавкиОтДолжностногоОклада тогда 
							СтрокаОсновныеНачисления.Показатель1 = ОбщегоНазначения.ОкруглитьПоВалюте(Тариф/ЧасовВГоду.Размер, Константы.ВалютаРегламентированногоУчета.Получить());
						Иначе
							ТарифЧасовой = ОбщегоНазначения.ОкруглитьПоВалюте(Выборка.ТарифнаяСтавка/ЧасовВГоду.Размер, Константы.ВалютаРегламентированногоУчета.Получить());
							ТарифЧасовойСПовышением = ОбщегоНазначения.ОкруглитьПоВалюте(ТарифЧасовой + ТарифЧасовой*Выборка.ИтоговоеПовышениеПоИнструкции/100, Константы.ВалютаРегламентированногоУчета.Получить());
							СтрокаОсновныеНачисления.Показатель1 = ТарифЧасовойСПовышением;
						КонецЕсли;
           			Иначе
						Сообщить("Невозможно рассчиать часовую ставку. Не определен параметр среднемесячного количества рабочих часов");
					КонецЕсли;
				Иначе
					ЗаполнитьЗначенияСвойств(ОсновныеНачисления.Добавить(), Выборка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	Пока ВыборкаКоэф.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(КоэфПовышенияТО.Добавить(),ВыборкаКоэф);
	КонецЦикла;	
	Пока ВыборкаПовышения.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПовышенияПоИнструкции.Добавить(),ВыборкаПовышения);
	КонецЦикла;
КонецПроцедуры // ЗаполнитьТабличнуюЧастьРаботникиПоТрудовымДоговорам()

// Заполняет табличную часть документа "Работники" списком работников компании
//
Процедура ЗаполнитьТабличнуюЧастьРаботникиПринятымиВКомпанию(ДатаНачалаПериода, ДатаОкончанияПериода) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНачалаПериода",		ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода",	ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("Дата",					Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Сотрудник,
	|	ВложенныйЗапрос.Сотрудник.Физлицо КАК Физлицо,
	|	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации,
	|	ПриемыВКомпанию.Должность КАК Должность,
	|	ВложенныйЗапрос.ЗанимаемыхСтавок,
	|	ВложенныйЗапрос.ДатаПриема,
	|	ВЫБОР
	|		КОГДА ПриемыВКомпанию.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПриемыВКомпанию.НапомнитьПоЗавершении
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НапомнитьПоЗавершении,
	|	ВложенныйЗапрос.ИспытательныйСрок,
	|	ПриемыВКомпанию.ДатаУвольнения,
	|	ПриемыВКомпанию.ГрафикРаботы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	|		ВложенныйЗапрос.ДатаПриема КАК ДатаПриема,
	|		0 КАК ИспытательныйСрок,
	|		1 КАК ЗанимаемыхСтавок
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ПриемыВКомпанию.Сотрудник КАК Сотрудник,
	|			МИНИМУМ(ПриемыВКомпанию.ДатаПриема) КАК ДатаПриема
	|		ИЗ
	|			Документ.ПриемНаРаботу.Работники КАК ПриемыВКомпанию
	|		ГДЕ
	|			ПриемыВКомпанию.Ссылка.Проведен
	|			И ПриемыВКомпанию.ДатаПриема МЕЖДУ &ДатаНачалаПериода И &ДатаОкончанияПериода
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПриемыВКомпанию.Сотрудник) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Работники КАК ПриемыВКомпанию
	|			ПО ВложенныйЗапрос.ДатаПриема = ПриемыВКомпанию.ДатаПриема
	|				И ВложенныйЗапрос.Сотрудник = ПриемыВКомпанию.Сотрудник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.ДатаПриема,
	|		ВложенныйЗапрос.Сотрудник) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Работники КАК ПриемыВКомпанию
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
	|			ПО ПриемыВКомпанию.Подразделение = СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение
	|				И (СоответствиеПодразделенийИПодразделенийОрганизаций.Организация = &Организация)
	|		ПО ВложенныйЗапрос.ДатаПриема = ПриемыВКомпанию.ДатаПриема
	|			И ВложенныйЗапрос.Сотрудник = ПриемыВКомпанию.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Сотрудник.Наименование";
	
	ОсновныеНачисления.Очистить();
	РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьРаботникиПринятымиВКомпанию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата);
	Запрос.УстановитьПараметр("РеглВалюта",		Константы.ВалютаРегламентированногоУчета.Получить());

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
		|	ПриемНаРаботуВОрганизацию.Номер КАК НомерДок,
		|	ПриемНаРаботуВОрганизацию.Дата КАК ДатаДок,
		|	ВЫРАЗИТЬ(ПриемНаРаботуВОрганизацию.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
		|	ПриемНаРаботуВОрганизацию.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОРуководителя,
		|	ПриемНаРаботуВОрганизацию.Организация.Префикс
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО (ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = &Руководитель)
		|			И ПриемНаРаботуВОрганизацию.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|ГДЕ
		|	ПриемНаРаботуВОрганизацию.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда
		
		Запрос.УстановитьПараметр("ОсновноеМестоРаботы", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель1 КАК РазмерНадбавки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта1, &РеглВалюта) = &РеглВалюта
		|			ТОГДА ""руб.""
		|		ИНАЧЕ НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта1.Наименование
		|	КОНЕЦ КАК ВалютаНадбавки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта1, &РеглВалюта) = &РеглВалюта
		|			ТОГДА ""коп.""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК КопейкиНадбавки,
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.ВидНадбавки.СпособРасчета КАК СпособРасчета,
		|	СтрокиДокумента.ДатаПриема,
		|	СтрокиДокумента.ДатаУвольнения,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, СтрокиДокумента.Сотрудник.Наименование) КАК Работник,
		|	СтрокиДокумента.НомерСтроки КАК НомерСтроки,
		|	СтрокиДокумента.ИспытательныйСрок,
		|	СтрокиДокумента.УсловияПриемаНаРаботу,
		|	СтрокиДокумента.Сотрудник.НомерДоговора КАК ТрудовойДоговорНомер,
		|	СтрокиДокумента.Сотрудник.ДатаДоговора КАК ТрудовойДоговорДата,
		|	СтрокиДокумента.ПодразделениеОрганизации.Наименование КАК Подразделение,
		|	СтрокиДокумента.Должность.Наименование КАК Должность,
		|	СтрокиДокумента.ВалютаТарифнойСтавки,
		|	СтрокиДокумента.КопейкиТарифнойСтавки,
		|	ЕСТЬNULL(СтрокиДокумента.ОкладТарифнаяСтавка, 0) КАК ОкладТарифнаяСтавка,
		|	ЕСТЬNULL(СтрокиДокумента.ТребуетВводаТарифногоРазряда, ЛОЖЬ) КАК ТребуетВводаТарифногоРазряда,
		|	ЕСТЬNULL(СтрокиДокумента.РазмерТарифныйРазряд, 0) КАК РазмерТарифныйРазряд,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СтрокиДокумента.ВалютаТарифныйРазряд, &РеглВалюта) = &РеглВалюта
		|			ТОГДА ""коп.""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК КопейкиТарифныйРазряд,
		|	ЕСТЬNULL(СтрокиДокумента.ВалютаТарифныйРазряд.Наименование, ""руб."") КАК ВалютаТарифныйРазряд,
		|	СтрокиДокумента.Сотрудник.Код КАК ТабельныйНомер
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПриемНаРаботуВОрганизациюРаботники.НомерСтроки КАК НомерСтроки,
		|		ПриемНаРаботуВОрганизациюРаботники.Сотрудник КАК Сотрудник,
		|		ПриемНаРаботуВОрганизациюРаботники.ДатаПриема КАК ДатаПриема,
		|		ПриемНаРаботуВОрганизациюРаботники.ДатаУвольнения КАК ДатаУвольнения,
		|		ПриемНаРаботуВОрганизациюРаботники.ИспытательныйСрок КАК ИспытательныйСрок,
		|		ПриемНаРаботуВОрганизациюРаботники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|		ПриемНаРаботуВОрганизациюРаботники.Должность КАК Должность,
		|		ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда КАК ТребуетВводаТарифногоРазряда,
		|		ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд1 КАК ТарифныйРазряд,
		|		ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель1 КАК ОкладТарифнаяСтавка,
		|		РазмерТарифныхСтавокСрезПоследних.Размер КАК РазмерТарифныйРазряд,
		|		РазмерТарифныхСтавокСрезПоследних.Валюта КАК ВалютаТарифныйРазряд,
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта1, &РеглВалюта) = &РеглВалюта
		|				ТОГДА ""руб.""
		|			ИНАЧЕ ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта1.Наименование
		|		КОНЕЦ КАК ВалютаТарифнойСтавки,
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта1, &РеглВалюта) = &РеглВалюта
		|				ТОГДА ""коп.""
		|			ИНАЧЕ """"
		|		КОНЕЦ КАК КопейкиТарифнойСтавки,
		|		ВЫБОР
		|			КОГДА ПриемНаРаботуВОрганизациюРаботники.Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы
		|				ТОГДА """"
		|			ИНАЧЕ ""По совместительству ""
		|		КОНЕЦ + ПриемНаРаботуВОрганизациюРаботники.УсловияПриемаНаРаботу КАК УсловияПриемаНаРаботу
		|	ИЗ
		|		Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботники
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ПриемНаРаботуВОрганизациюОсновныеНачисления
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(
		|			&ДатаДокумента,
		|			ТарифныйРазряд В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд1
		|				ИЗ
		|					Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ПриемНаРаботуВОрганизациюОсновныеНачисления
		|				ГДЕ
		|					ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка = &ДокументСсылка
		|					И ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени)) КАК РазмерТарифныхСтавокСрезПоследних
		|				ПО ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд1 = РазмерТарифныхСтавокСрезПоследних.ТарифныйРазряд
		|			ПО ПриемНаРаботуВОрганизациюРаботники.Ссылка = ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка
		|				И (ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени)
		|				И ПриемНаРаботуВОрганизациюРаботники.Сотрудник = ПриемНаРаботуВОрганизациюОсновныеНачисления.Сотрудник
		|	ГДЕ
		|		ПриемНаРаботуВОрганизациюРаботники.Ссылка = &ДокументСсылка) КАК СтрокиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних
		|		ПО СтрокиДокумента.ПодразделениеОрганизации = НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.ПодразделениеОрганизации
		|			И СтрокиДокумента.Должность = НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Должность
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|		&ДатаДокумента,
		|		ФизЛицо В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник.Физлицо
		|			ИЗ
		|				Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		|			ГДЕ
		|				ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &ДокументСсылка)) КАК ФИОФизЛицСрезПоследних
		|		ПО СтрокиДокумента.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ ПО
		|	НомерСтроки";

	Иначе
		Возврат Неопределено;
		
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой "Т-1а",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТ1а(ИмяМакета)

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемНаРаботуВОрганизацию_Т1а";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = РаботникиОрганизации.Количество();

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРаботник"); // строка работника

	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
 		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.

	ВыведеноСтрок = 0;
	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл

		ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
		ВложеннаяВыборка.Следующий();
		
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВложеннаяВыборка);
		// Уточним валюту тарифной ставки
		ОкладВПечатнойФорме = ?(ВложеннаяВыборка.ТребуетВводаТарифногоРазряда, ВложеннаяВыборка.РазмерТарифныйРазряд, ВложеннаяВыборка.ОкладТарифнаяСтавка);
		Если ЗначениеЗаполнено(ВложеннаяВыборка.ВалютаТарифнойСтавки) Тогда
			ОбластьМакета.Параметры.ОкладТарифнаяСтавка = "" + Формат(ОкладВПечатнойФорме,"ЧЦ=15; ЧДЦ=2") + Символы.ПС + "(" + ВложеннаяВыборка.ВалютаТарифнойСтавки+")";
		Иначе
			ОбластьМакета.Параметры.ОкладТарифнаяСтавка = ОкладВПечатнойФорме;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВложеннаяВыборка.РазмерНадбавки) Тогда
			
			ТекстЯчейки = ОбластьМакета.Параметры.ОкладТарифнаяСтавка;
			ТекстЯчейки = "" + ТекстЯчейки + "," + Символы.ПС + ВложеннаяВыборка.РазмерНадбавки;
			
			Если ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
				ТекстЯчейки = ТекстЯчейки + "(%)"
			Иначе	
				ТекстЯчейки = ТекстЯчейки + ?(ЗначениеЗаполнено(ВложеннаяВыборка.ВалютаНадбавки)," (" + ВложеннаяВыборка.ВалютаНадбавки+")","");
			КонецЕсли;
			
			ОбластьМакета.Параметры.ОкладТарифнаяСтавка = ТекстЯчейки;
		КонецЕсли;	

		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВложеннаяВыборка.ТабельныйНомер;
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьМакета.Параметры.Количество() Цикл
		ОбластьМакета.Параметры.Установить(Сч - 1,""); 
	КонецЦикла;
	ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
	Пока ТабДокумент.ПроверитьВывод(ВыводимыеОбласти) Цикл
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТ1а()

// Функция формирует табличный документ с печатной формой "Т-1",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТ1(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемНаРаботуВОрганизацию_Т1";
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника

	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
 		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
	КонецЕсли;
	
	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
		ВложеннаяВыборка.Следующий();
		
		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Шапка документа.
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВложеннаяВыборка.НомерСтроки
		КонецЕсли; 
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВложеннаяВыборка);
		
		// Уточним размер и валюту тарифной ставки
		ОкладВПечатнойФорме = ?(ВложеннаяВыборка.ТребуетВводаТарифногоРазряда, ВложеннаяВыборка.РазмерТарифныйРазряд, ВложеннаяВыборка.ОкладТарифнаяСтавка);
		ВалютаТарифнойСтавки = ?(ВложеннаяВыборка.ТребуетВводаТарифногоРазряда, ВложеннаяВыборка.ВалютаТарифныйРазряд, ВложеннаяВыборка.ВалютаТарифнойСтавки);
		Если ИмяМакета = "Т1_от_6_4_2001" Тогда
			
			ОбластьМакета.Параметры.ОкладТарифнаяСтавка = ОкладВПечатнойФорме;
			ОбластьМакета.Параметры.ОкладТарифнаяСтавка = "" + Формат(ОкладВПечатнойФорме,"ЧЦ=15; ЧДЦ=2") + " (" + ВалютаТарифнойСтавки+")";
			
			Если ВложеннаяВыборка.ИспытательныйСрок = 0 тогда
				ИспытательныйСрокСтрокой = "Без испытательного срока";
			Иначе
				ИспытательныйСрокСтрокой = "" + ВложеннаяВыборка.ИспытательныйСрок + " " + ОбщегоНазначения.ФормаМножественногоЧисла("месяц","месяца","месяцев",ВложеннаяВыборка.ИспытательныйСрок)
			КонецЕсли;
			ОбластьМакета.Параметры.ИспытательныйСрокСтрокой = ИспытательныйСрокСтрокой;
		Иначе
			
			ОбластьМакета.Параметры.КопейкиТарифнойСтавки = ?(ВложеннаяВыборка.ТребуетВводаТарифногоРазряда, ВложеннаяВыборка.КопейкиТарифныйРазряд, ВложеннаяВыборка.КопейкиТарифнойСтавки);
			ОбластьМакета.Параметры.ВалютаТарифнойСтавки = ВалютаТарифнойСтавки;
			
			Если ЗначениеЗаполнено(ОбластьМакета.Параметры.КопейкиТарифнойСтавки) Тогда // в иностр. валюте
				ОбластьМакета.Параметры.ОкладТарифнаяСтавкаЦелаяЧасть = Цел(ОкладВПечатнойФорме);
				ДробнаяЧасть = ОкладВПечатнойФорме - Цел(ОкладВПечатнойФорме);
				ОбластьМакета.Параметры.ОкладТарифнаяСтавкаДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100); 
			Иначе
				ОбластьМакета.Параметры.ОкладТарифнаяСтавкаЦелаяЧасть = Формат(ОкладВПечатнойФорме,"ЧЦ=15; ЧДЦ=2");
				ОбластьМакета.Параметры.ОкладТарифнаяСтавкаДробнаяЧасть = "";
			КонецЕсли;
			
			ОбластьМакета.Параметры.НадбавкаЦелаяЧасть   = "";
			ОбластьМакета.Параметры.НадбавкаДробнаяЧасть = "";
			ОбластьМакета.Параметры.ВалютаНадбавки = "руб.";
			ОбластьМакета.Параметры.КопейкиНадбавки = "коп.";
			
			Если ЗначениеЗаполнено(ВложеннаяВыборка.РазмерНадбавки) Тогда
				
				Если ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
					ОбластьМакета.Параметры.ВалютаНадбавки = "";
					ОбластьМакета.Параметры.КопейкиНадбавки = "";
					ОбластьМакета.Параметры.НадбавкаЦелаяЧасть = "" + ВложеннаяВыборка.РазмерНадбавки + "(%)"
				Иначе
					
					ОбластьМакета.Параметры.ВалютаНадбавки = ВложеннаяВыборка.ВалютаНадбавки;
					ОбластьМакета.Параметры.КопейкиНадбавки = ВложеннаяВыборка.КопейкиНадбавки;
					
					Если ЗначениеЗаполнено(ОбластьМакета.Параметры.КопейкиНадбавки) Тогда // в иностр. валюте
						ОбластьМакета.Параметры.НадбавкаЦелаяЧасть = Цел(ВложеннаяВыборка.РазмерНадбавки);
						ДробнаяЧасть = ВложеннаяВыборка.РазмерНадбавки - Цел(ВложеннаяВыборка.РазмерНадбавки);
						ОбластьМакета.Параметры.НадбавкаДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100); 
					Иначе
						ОбластьМакета.Параметры.НадбавкаЦелаяЧасть = Формат(ВложеннаяВыборка.РазмерНадбавки,"ЧЦ=15; ЧДЦ=2");
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВложеннаяВыборка.ИспытательныйСрок = 0 Тогда
				ОбластьМакета.Параметры.ИспытательныйСрок = "Без испытательного срока";
				
			Иначе
				ОбластьМакета.Параметры.ИспытательныйСрок = ВложеннаяВыборка.ИспытательныйСрок;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВложеннаяВыборка.ТабельныйНомер;

		ТабДокумент.Вывести(ОбластьМакета);

		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ОбластьМакета.Параметры.ТрудовойДоговорДата = '00010101';
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТ1()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриемНаРаботуВОрганизацию.Дата,
	|	ПриемНаРаботуВОрганизацию.Организация,
	|	ВЫБОР
	|		КОГДА ПриемНаРаботуВОрганизацию.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ПриемНаРаботуВОрганизацию.Организация
	|		ИНАЧЕ ПриемНаРаботуВОрганизацию.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ПриемНаРаботуВОрганизацию.РайонныйКоэффициент,
	|	ПриемНаРаботуВОрганизацию.Ссылка,
	|	ПриемНаРаботуВОрганизацию.Организация.Наименование
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
	|ГДЕ
	|	ПриемНаРаботуВОрганизацию.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, ПроверкаШтатногоРасписания)

	Запрос = Новый Запрос;

	//Определим список организаций - структурных подразделений
	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата",		Дата('00010101'));
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ГоловнаяОрганизация);
	
	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвижений": 
	// 1. Выборка "ТЧРаботникиОрганизации": 
	//		Выбираются строки документа.  
	// 2. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки с одинаковым значением реквизита "ФизЛицо"
	//
	// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	//		На каждую дату приема и увольнения ищем движения в регистре "РаботникиОрганизации" и "СостояниеРаботниковОрганизации"

	Если ПроверкаШтатногоРасписания Тогда
		
		// определим самую раннюю и позднюю дату перемещения, чтобы с нее начать расчет остатков штатных единиц
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МИНИМУМ(ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема) КАК ДатаНачала
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		|ГДЕ
		|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &ДокументСсылка
		|	И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема <> &ПустаяДата";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаНачала = ?(ЗначениеЗаполнено(Выборка.ДатаНачала),Выборка.ДатаНачала,Дата);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаНачала",	ДатаНачала);
		Запрос.УстановитьПараметр("Приход",		ВидДвиженияНакопления.Приход);
		
		//  Дополнительно используем выборки: 
		//  СвободноСтавокНаДатуПриема
		//		Для каждой строки ТЧРаботникиОрганизации на дату ДатаПриема
		//		подсчитываем количество остающихся ставок (с учетом "предшествующих" данных текущего документа)
		//

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвижений"" КАК ВидСтрокиЗапроса,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
		|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
		|	ТЧРаботникиОрганизации.ДатаПриема КАК ДатаПриема,
		|	ТЧРаботникиОрганизации.ДатаУвольнения,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
		|	ТЧРаботникиОрганизации.Должность,
		|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
		|	ТЧРаботникиОрганизации.ИспытательныйСрок,
		|	ТЧРаботникиОрганизации.НапомнитьПоЗавершении КАК НапомнитьПоЗавершении,
		|	ТЧРаботникиОрганизации.ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец <> &Организация
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		|	СвободноСтавокНаДатуПриема.ОстатокСтавок КАК ОстатокСтавок,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизлицами.ТрудовойДоговор)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеВерныйДоговор,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаСотрудникРаботалВОрганизации,
		|	ТЧРаботникиОрганизации.КоэффициентЕТС,
		|	ТЧРаботникиОрганизации.РазрядЕТС,
		|	ТЧРаботникиОрганизации.МесячнаяТарифнаяСтавка,
		|	ТЧРаботникиОрганизации.Категория,
		|	ТЧРаботникиОрганизации.ПроцентПоКонтракту,
		|	ТЧРаботникиОрганизации.ВидРасчета,
		|	ТЧРаботникиОрганизации.Аванс,
		|	ГражданствоФизЛицСрезПоследних.НеИмеетПравоНаПенсию,
		|	ТЧРаботникиОрганизации.ТарифныйСПовышениемПоИнструкции,
		|	ТЧРаботникиОрганизации.ТарифнаяСтавка,
		|	ТЧРаботникиОрганизации.ИтоговоеПовышениеПоИнструкции,
		|	ТЧРаботникиОрганизации.ПовышенныйКоэффициентЕТС,
		|	ТЧРаботникиОрганизации.ТарифнаяСтавкаПервогоРазряда,
		|	ТЧРаботникиОрганизации.УсловияТрудаИзмерение,
		|	ТЧРаботникиОрганизации.ВидДеятельностиИзмерение,
		|	ТЧРаботникиОрганизации.БезЕТС
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
		|				ПО (ТЧРаботникиОрганизации2.Ссылка = &ДокументСсылка)
		|					И ТЧРаботникиОрганизации.НомерСтроки > ТЧРаботникиОрганизации2.НомерСтроки
		|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
		|		ГДЕ
		|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МаксимальныеПериодыШР.НомерСтроки КАК НомерСтроки,
		|			ЕСТЬNULL(ШтатноеРасписание.КоличествоСтавок, 0) - ЕСТЬNULL(Вакансии.КоличествоСтавок, 0) - ЕСТЬNULL(РанееЗанятоСтавок.КоличествоСтавок, 0) КАК ОстатокСтавок
		|		ИЗ
		|			(ВЫБРАТЬ
		|				Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|				Работники.Должность КАК Должность,
		|				Работники.УсловияТрудаИзмерение КАК УсловияТрудаИзмерение,
		|				Работники.ВидДеятельностиИзмерение КАК ВидДеятельностиИзмерение,
		|				Работники.НомерСтроки КАК НомерСтроки,
		|				МАКСИМУМ(ШтатноеРасписание.Период) КАК МаксПериод
		|			ИЗ
		|				Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Работники
		|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|						ЕСТЬNULL(ШтатноеРасписание.Период, &ДатаНачала) КАК Период,
		|						Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|						Работники.Должность КАК Должность,
		|						Работники.УсловияТрудаИзмерение КАК УсловияТрудаИзмерение,
		|						Работники.ВидДеятельностиИзмерение КАК ВидДеятельностиИзмерение
		|					ИЗ
		|						Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Работники
		|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
		|							ПО Работники.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		|								И Работники.Должность = ШтатноеРасписание.Должность
		|								И Работники.УсловияТрудаИзмерение = ШтатноеРасписание.УсловияТрудаИзмерение
		|								И Работники.ВидДеятельностиИзмерение = ШтатноеРасписание.ВидДеятельностиИзмерение
		|					ГДЕ
		|						Работники.Ссылка = &ДокументСсылка) КАК ШтатноеРасписание
		|					ПО Работники.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		|						И Работники.Должность = ШтатноеРасписание.Должность
		|						И Работники.УсловияТрудаИзмерение = ШтатноеРасписание.УсловияТрудаИзмерение
		|						И Работники.ВидДеятельностиИзмерение = ШтатноеРасписание.ВидДеятельностиИзмерение
		|						И Работники.ДатаПриема >= ШтатноеРасписание.Период
		|			ГДЕ
		|				Работники.Ссылка = &ДокументСсылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Работники.ПодразделениеОрганизации,
		|				Работники.НомерСтроки,
		|				Работники.Должность,
		|				Работники.УсловияТрудаИзмерение,
		|				Работники.ВидДеятельностиИзмерение) КАК МаксимальныеПериодыШР
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
		|				ПО МаксимальныеПериодыШР.МаксПериод = ШтатноеРасписание.Период
		|					И МаксимальныеПериодыШР.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		|					И МаксимальныеПериодыШР.Должность = ШтатноеРасписание.Должность
		|					И МаксимальныеПериодыШР.УсловияТрудаИзмерение = ШтатноеРасписание.УсловияТрудаИзмерение
		|					И МаксимальныеПериодыШР.ВидДеятельностиИзмерение = ШтатноеРасписание.ВидДеятельностиИзмерение
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Работники.НомерСтроки КАК НомерСтроки,
		|					Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|					Работники.Должность КАК Должность,
		|					СУММА(ВЫБОР
		|							КОГДА Вакансии.ВидДвижения = &Приход
		|								ТОГДА Вакансии.КоличествоСтавок
		|							ИНАЧЕ -Вакансии.КоличествоСтавок
		|						КОНЕЦ) КАК КоличествоСтавок
		|				ИЗ
		|					Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Работники
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеШтатныеЕдиницыОрганизаций КАК Вакансии
		|						ПО Работники.ПодразделениеОрганизации = Вакансии.ПодразделениеОрганизации
		|							И Работники.Должность = Вакансии.Должность
		|							И Работники.УсловияТрудаИзмерение = Вакансии.УсловияТрудаИзмерение
		|							И Работники.ВидДеятельностиИзмерение = Вакансии.ВидДеятельностиИзмерение
		|							И Работники.ДатаПриема >= Вакансии.Период
		|							И (Вакансии.Регистратор <> &ДокументСсылка)
		|				ГДЕ
		|					Работники.Ссылка = &ДокументСсылка
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Работники.ПодразделениеОрганизации,
		|					Работники.Должность,
		|					Работники.НомерСтроки) КАК Вакансии
		|				ПО МаксимальныеПериодыШР.НомерСтроки = Вакансии.НомерСтроки
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СтрокиДокумента.НомерСтроки КАК НомерСтроки,
		|					СУММА(ВЫБОР
		|							КОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема <= СтрокиДокумента.ДатаПриема
		|								ТОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ЗанимаемыхСтавок
		|							ИНАЧЕ 0
		|						КОНЕЦ - ВЫБОР
		|							КОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения < СтрокиДокумента.ДатаПриема
		|									И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения <> &ПустаяДата
		|									И ПриемНаРаботуВОрганизациюРаботникиОрганизации.НапомнитьПоЗавершении
		|								ТОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ЗанимаемыхСтавок
		|							ИНАЧЕ 0
		|						КОНЕЦ) КАК КоличествоСтавок
		|				ИЗ
		|					Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК СтрокиДокумента
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		|						ПО СтрокиДокумента.Ссылка = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка
		|							И СтрокиДокумента.НомерСтроки <> ПриемНаРаботуВОрганизациюРаботникиОрганизации.НомерСтроки
		|							И СтрокиДокумента.ПодразделениеОрганизации = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ПодразделениеОрганизации
		|							И СтрокиДокумента.Должность = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Должность
		|							И СтрокиДокумента.УсловияТрудаИзмерение = ПриемНаРаботуВОрганизациюРаботникиОрганизации.УсловияТрудаИзмерение
		|							И СтрокиДокумента.ВидДеятельностиИзмерение = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ВидДеятельностиИзмерение
		|				ГДЕ
		|					СтрокиДокумента.Ссылка = &ДокументСсылка
		|				
		|				СГРУППИРОВАТЬ ПО
		|					СтрокиДокумента.НомерСтроки) КАК РанееЗанятоСтавок
		|				ПО МаксимальныеПериодыШР.НомерСтроки = РанееЗанятоСтавок.НомерСтроки) КАК СвободноСтавокНаДатуПриема
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = СвободноСтавокНаДатуПриема.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО ТЧРаботникиОрганизации.Сотрудник = РаботникиОрганизаций.Сотрудник
		|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&ДатаНачала, ) КАК ГражданствоФизЛицСрезПоследних
		|		ПО ТЧРаботникиОрганизации.ФизЛицо = ГражданствоФизЛицСрезПоследних.ФизЛицо
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	ВидСтрокиЗапроса";
		
	Иначе
			
		Запрос.УстановитьПараметр("ДатаНачала",	Дата);
				
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвижений"" КАК ВидСтрокиЗапроса,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
		|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
		|	ТЧРаботникиОрганизации.ДатаПриема КАК ДатаПриема,
		|	ТЧРаботникиОрганизации.ДатаУвольнения,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
		|	ТЧРаботникиОрганизации.Должность,
		|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
		|	ТЧРаботникиОрганизации.ИспытательныйСрок,
		|	ТЧРаботникиОрганизации.НапомнитьПоЗавершении КАК НапомнитьПоЗавершении,
		|	ТЧРаботникиОрганизации.ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец <> &Организация
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизлицами.ТрудовойДоговор)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеВерныйДоговор,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаСотрудникРаботалВОрганизации,
		|	ТЧРаботникиОрганизации.КоэффициентЕТС,
		|	ТЧРаботникиОрганизации.РазрядЕТС,
		|	ТЧРаботникиОрганизации.МесячнаяТарифнаяСтавка,
		|	ТЧРаботникиОрганизации.Категория,
		//vvv
		|	ТЧРаботникиОрганизации.КатегорияДолжности,
		|	ТЧРаботникиОрганизации.ТабельУчетаОрганизации,
		|	ТЧРаботникиОрганизации.Разряд,
		|	ТЧРаботникиОрганизации.МесячнаяТарифнаяСтавкаРемонт,
		|	ТЧРаботникиОрганизации.ТарифнаяСтавкаРемонт,
		|	ТЧРаботникиОрганизации.Автомобиль,
		|	ТЧРаботникиОрганизации.СпособОтраженияВБухУчете,
		|	ТЧРаботникиОрганизации.Классность,
		|	ТЧРаботникиОрганизации.ДатаПриказа,
		|	ТЧРаботникиОрганизации.НомерПриказа,
		|	ТЧРаботникиОрганизации.ВидУчетаВремени,
		|	ТЧРаботникиОрганизации.Сотрудник.Код КАК ТабельныйНомер,
		|	ТЧРаботникиОрганизации.Должность.Водитель КАК ЭтоВодитель,
		//
		|	ТЧРаботникиОрганизации.ПроцентПоКонтракту,
		|	ТЧРаботникиОрганизации.ИтоговоеПовышениеПоИнструкции,
		|	ТЧРаботникиОрганизации.Аванс,
		|	ТЧРаботникиОрганизации.ТарифнаяСтавка,
		|	ТЧРаботникиОрганизации.ТарифныйСПовышениемПоИнструкции,
		|	ГражданствоФизЛицСрезПоследних.НеИмеетПравоНаПенсию,
		|	ТЧРаботникиОрганизации.ПовышенныйКоэффициентЕТС,
		|	ТЧРаботникиОрганизации.ТарифнаяСтавкаПервогоРазряда,
		|	ТЧРаботникиОрганизации.УсловияТрудаИзмерение,
		|	ТЧРаботникиОрганизации.ВидДеятельностиИзмерение,
		|	ТЧРаботникиОрганизации.БезЕТС
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
		|				ПО (ТЧРаботникиОрганизации2.Ссылка = &ДокументСсылка)
		|					И ТЧРаботникиОрганизации.НомерСтроки > ТЧРаботникиОрганизации2.НомерСтроки
		|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
		|		ГДЕ
		|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО ТЧРаботникиОрганизации.Сотрудник = РаботникиОрганизаций.Сотрудник
		|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&ДатаНачала, ) КАК ГражданствоФизЛицСрезПоследних
		|		ПО ТЧРаботникиОрганизации.ФизЛицо = ГражданствоФизЛицСрезПоследних.ФизЛицо
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	ВидСтрокиЗапроса";
		
	КонецЕсли;

	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Формирует запрос по таблице "КоэфПовышенияТО" документа
Функция СформироватьЗапросПоКоэфПовышенияТО(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ПустойСотрудник", Справочники.СотрудникиОрганизаций.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриемНаРаботуВОрганизациюКоэфПовышенияТО.Ссылка,
	|	ПриемНаРаботуВОрганизациюКоэфПовышенияТО.НомерСтроки,
	|	ПриемНаРаботуВОрганизациюКоэфПовышенияТО.Коэффициент,
	|	ПриемНаРаботуВОрганизациюКоэфПовышенияТО.Сотрудник,
	|	ПриемНаРаботуВОрганизациюКоэфПовышенияТО.Размер,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.КоэфПовышенияТО КАК ПриемНаРаботуВОрганизациюКоэфПовышенияТО
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|		ПО ПриемНаРаботуВОрганизациюКоэфПовышенияТО.Ссылка = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка
	|			И ПриемНаРаботуВОрганизациюКоэфПовышенияТО.Сотрудник = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник
	|ГДЕ
	|	ПриемНаРаботуВОрганизациюКоэфПовышенияТО.Ссылка = &ДокументСсылка
	|	И ПриемНаРаботуВОрганизациюКоэфПовышенияТО.Сотрудник <> &ПустойСотрудник";
	
	Возврат Запрос.Выполнить();
КонецФункции

// Формирует запрос по таблице "ПовышенияПоИнструкции" документа
Функция СформироватьЗапросПоПовышенияПоИнструкции(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ПустойСотрудник", Справочники.СотрудникиОрганизаций.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриемНаРаботуВОрганизациюПовышенияПоИнструкции.Ссылка,
	|	ПриемНаРаботуВОрганизациюПовышенияПоИнструкции.Коэффициент,
	|	ПриемНаРаботуВОрганизациюПовышенияПоИнструкции.Размер,
	|	ПриемНаРаботуВОрганизациюПовышенияПоИнструкции.Сотрудник,
	|	ПриемНаРаботуВОрганизациюПовышенияПоИнструкции.Действие,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.ПовышенияПоИнструкции КАК ПриемНаРаботуВОрганизациюПовышенияПоИнструкции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|		ПО ПриемНаРаботуВОрганизациюПовышенияПоИнструкции.Ссылка = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка
	|			И ПриемНаРаботуВОрганизациюПовышенияПоИнструкции.Сотрудник = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник
	|ГДЕ
	|	ПриемНаРаботуВОрганизациюПовышенияПоИнструкции.Ссылка = &ДокументСсылка
	|	И ПриемНаРаботуВОрганизациюПовышенияПоИнструкции.Сотрудник <> &ПустойСотрудник";
	
	Возврат Запрос.Выполнить();
КонецФункции

// Формирует запрос по таблице "ОсновныеНачисления" документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачисления(ПроверкаШтатногоРасписания)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.НомерСтроки,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель1,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта1,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель2,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта2,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель3,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта3,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель4,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта4,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель5,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта5,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель6,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта6,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд1,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд2,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд3,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд4,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд5,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд6,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.СпособРасчета,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ПроизвольнаяФормулаРасчета
	|ПОМЕСТИТЬ ВТДанныеНачислений
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ПриемНаРаботуВОрганизациюОсновныеНачисления
	|ГДЕ
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
	|	ТЧРаботникиОрганизации.Должность,
	|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
	|	ТЧРаботникиОрганизации.ГрафикРаботы,
	|	ТЧРаботникиОрганизации.ДатаПриема,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	ТЧРаботникиОрганизации.НапомнитьПоЗавершении
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧНачисления.Ссылка КАК Ссылка,
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник КАК Сотрудник,
	|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
	|	ТЧРаботникиОрганизации.Должность,
	|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
	|	ТЧРаботникиОрганизации.ГрафикРаботы,
	|	ТЧРаботникиОрганизации.ДатаПриема КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать) КАК Действие,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И (НЕ ТЧРаботникиОрганизации.НапомнитьПоЗавершении)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТЧРаботникиОрганизации.ДатаУвольнения, ДЕНЬ, 1)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ПериодЗавершения,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И (НЕ ТЧРаботникиОрганизации.НапомнитьПоЗавершении)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.ПустаяСсылка)
	|	КОНЕЦ КАК ДействиеЗавершения,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчетаЗачетОтработанногоВремени
	|			ТОГДА """"
	|		ИНАЧЕ ТЧНачисления.ВидРасчета
	|	КОНЕЦ КАК ВидРасчетаИзмерение,
	|	ТЧНачисления.ВидРасчетаСпособРасчета КАК СпособРасчета,
	|	ТЧНачисления.ВидРасчетаЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ТЧНачисления.ВидРасчетаТребуетВводаТарифногоРазряда КАК ТребуетВводаТарифногоРазряда,
	|	ТЧНачисления.ВидРасчетаПроизвольнаяФормулаРасчета КАК ПроизвольнаяФормулаРасчета,
	|	ТЧНачисления.Показатель1 КАК Показатель1,
	|	ТЧНачисления.Валюта1 КАК Валюта1,
	|	ТЧНачисления.ТарифныйРазряд1 КАК ТарифныйРазряд1,
	|	ТЧНачисления.Показатель2 КАК Показатель2,
	|	ТЧНачисления.Валюта2 КАК Валюта2,
	|	ТЧНачисления.ТарифныйРазряд2 КАК ТарифныйРазряд2,
	|	ТЧНачисления.Показатель3 КАК Показатель3,
	|	ТЧНачисления.Валюта3 КАК Валюта3,
	|	ТЧНачисления.ТарифныйРазряд3 КАК ТарифныйРазряд3,
	|	ТЧНачисления.Показатель4 КАК Показатель4,
	|	ТЧНачисления.Валюта4 КАК Валюта4,
	|	ТЧНачисления.ТарифныйРазряд4 КАК ТарифныйРазряд4,
	|	ТЧНачисления.Показатель5 КАК Показатель5,
	|	ТЧНачисления.Валюта5 КАК Валюта5,
	|	ТЧНачисления.ТарифныйРазряд5 КАК ТарифныйРазряд5,
	|	ТЧНачисления.Показатель6 КАК Показатель6,
	|	ТЧНачисления.Валюта6 КАК Валюта6,
	|	ТЧНачисления.ТарифныйРазряд6 КАК ТарифныйРазряд6
	|ИЗ
	|	ВТДанныеНачислений КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	|		ПО ТЧНачисления.Сотрудник = ТЧРаботникиОрганизации.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ПроцедурыУправленияПерсоналом.СформироватьЗапросПоПлановымНачислениям(Запрос.Выполнить().Выгрузить(), ПроверкаШтатногоРасписания);
	

КонецФункции // СформироватьЗапросПоНачисления()

Функция СформироватьЗапросПоПрежнимМестам(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	ВложенныйЗапрос.КонфликтныйДокумент КАК КонфликтныйДокумент,
	|	ВложенныйЗапрос.ВидЗанятостиПоДругомуМестуРаботы КАК ВидЗанятостиПоДругомуМестуРаботы
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеПоРаботникуДоНазначения.Сотрудник.Физлицо КАК Физлицо,
	|			ДанныеПоРаботникуДоНазначения.Регистратор КАК КонфликтныйДокумент,
	|			ДанныеПоРаботникуДоНазначения.Сотрудник.ВидЗанятости КАК ВидЗанятостиПоДругомуМестуРаботы,
	|			0 КАК НомерСтроки
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					Док.Сотрудник.Физлицо КАК Физлицо,
	|					СостояниеВнутри.Сотрудник КАК Сотрудник,
	|					МАКСИМУМ(СостояниеВнутри.Период) КАК ДатаПоследнегоИзменения
	|				ИЗ
	|					РегистрСведений.РаботникиОрганизаций КАК СостояниеВнутри
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Док
	|						ПО (Док.Ссылка = &ДокументСсылка)
	|							И СостояниеВнутри.Сотрудник.Физлицо = Док.Сотрудник.Физлицо
	|							И (СостояниеВнутри.Организация = &ГоловнаяОрганизация)
	|							И СостояниеВнутри.Период <= Док.ДатаПриема
	|				
	|				СГРУППИРОВАТЬ ПО
	|					Док.Сотрудник.Физлицо,
	|					СостояниеВнутри.Сотрудник) КАК СписокДат
	|				ПО ДанныеПоРаботникуДоНазначения.Сотрудник = СписокДат.Сотрудник
	|					И ДанныеПоРаботникуДоНазначения.Период = СписокДат.ДатаПоследнегоИзменения
	|					И (ДанныеПоРаботникуДоНазначения.Организация = &ГоловнаяОрганизация)
	|					И (ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник.Физлицо,
	|			ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка,
	|			ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник.ВидЗанятости,
	|			ПриемНаРаботуВОрганизациюРаботникиОрганизации.НомерСтроки
	|		ИЗ
	|			Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|		ГДЕ
	|			ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &ДокументСсылка) КАК ВложенныйЗапрос
	|		ПО ТЧРаботникиОрганизации.ФизЛицо = ВложенныйЗапрос.Физлицо
	|			И ТЧРаботникиОрганизации.НомерСтроки <> ВложенныйЗапрос.НомерСтроки
	|			И ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости <> ВложенныйЗапрос.ВидЗанятостиПоДругомуМестуРаботы
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|ИТОГИ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоПрежнимМестам()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, в которую принимается работник!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники"": ";
	
	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран работник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Принимаем только по трудовому договору
	Если ВыборкаПоСтрокамДокумента.НеВерныйДоговор Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "у работника указан вид договора отличный от 'Трудового договора'!", Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный работник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение, в которое принимается работник!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
	КонецЕсли;
	
	// Должность
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Должность) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана должность работника!", Отказ, Заголовок);
	КонецЕсли;
	//vvv
	Если Не РольДоступна("ПолныеПрава") ТОгда
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КоэффициентЕТС) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан коэффициент ЕТС!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	//
	
	// ДатаПриема
	ЕстьДатаПриема = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаПриема);
	Если НЕ ЕстьДатаПриема Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата приема на работу!", Отказ, Заголовок);
	Иначе
		#Если Клиент Тогда
			Если ВыборкаПоСтрокамДокумента.ДатаПриема > РабочаяДата Тогда
				Сообщить(СтрокаНачалаСообщенияОбОшибке + "дата приема на работу превышает рабочую дату!", СтатусСообщения.Важное);
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
	// Количество ставок
	Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано количество занимаемых работником ставок!", Отказ, Заголовок);
		
	ИначеЕсли ЕстьДатаПриема И ПроверкаШтатногоРасписания Тогда
		Если ВыборкаПоСтрокамДокумента.ОстатокСтавок < ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "в штатном расписании не предусмотрены ставки для приема работника!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// ГрафикРаботы
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы)  Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан рабочий график!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НетСотрудника ИЛИ (НЕ ЕстьДатаПриема) Тогда
		Возврат;
	КонецЕсли;
	
	
	// ДатаУвольнения
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаУвольнения) и ВыборкаПоСтрокамДокумента.ДатаПриема > ВыборкаПоСтрокамДокумента.ДатаУвольнения Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата приема не может превышать дату окончания работы!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство и ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Аванс) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "размер аванса можно установить только для основного работника", Отказ, Заголовок);
	КонецЕсли;
	

	// Сотрудник указан дважды
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
		СтрокаСообщениеОбОшибке = "работник не может быть указан в документе дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник раньше работал в организации
	Если ВыборкаПоСтрокамДокумента.ОшибкаСотрудникРаботалВОрганизации Тогда
		СтрокаСообщениеОбОшибке = "Работник уже работал в организации, для повторного приема на работу необходимо создать нового сотрудника!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОсновныеНачисления" документа.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания)

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран работник!", Отказ, Заголовок);
	КонецЕсли;
		
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано начисление!", Отказ, Заголовок);
	Иначе
		
		// Соответствие размера "основного" начисления штатному расписанию
		Если ПроверкаШтатногоРасписания и Не ВыборкаПоСтрокамДокумента.РазмерСоответствуетШТР И
			НЕ ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "размер основного начисления не соответствует штатному расписанию!", Отказ, Заголовок);
		КонецЕсли;
		
		// Двойные строки
		Если ВыборкаПоСтрокамДокумента.ДвойнаяСтрока <> NULL Тогда
			Если ВыборкаПоСтрокамДокумента.ОсновноеНачисление Тогда
				СтрокаСообщениеОбОшибке = "работнику не может быть назначено основное начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
			Иначе
				СтрокаСообщениеОбОшибке = "работнику не может быть назначено одно и тоже начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;
			
	КонецЕсли;
	
	ИспользуютсяНачисленияВВалюте = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте");
	
	ПроведениеРасчетов.ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Истина, Отказ, Заголовок, ИспользуютсяНачисленияВВалюте, СоответствиеВалютныеСпособыРасчета);
	
	// проверка на существование работника в табличной части "РаботникиОрганизации"
	Если ВыборкаПоСтрокамДокумента.Период = NULL Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "данный работник не введен в приказ - по нему не могут быть введены начисления!", Отказ, Заголовок);
	КонецЕсли;
	

	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет возможность оформления работника на работу согласно указанному в шапке документа реквизиту "ВидЗанятости"
//
Процедура ПроверитьВидыЗанятостиРаботникаВОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, Отказ, Заголовок)
	
	// обходим строки запроса
	Пока ВыборкаСтрокЗапроса.Следующий() Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаСтрокЗапроса.НомерСтроки) +
		""" табл. части ""Работники организации"": ";

		// Проверка сочетаний видов занятости работника в одной организации
		Если ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы  Тогда

			// Для основного места работы недопустимо наличие внешнего совместительства
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.ВидыЗанятостиВОрганизации.Совместительство  Тогда
				СтрокаСообщениеОбОшибке = "нельзя принять работника на основное место работы до тех пор,
				|	пока он оформлен внешним совместителем!
				|	(См. приказ: " + ВыборкаСтрокЗапроса.КонфликтныйДокумент + ")"; 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;

		ИначеЕсли ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство  Тогда

			// Для внешнего совместительства недопустимо основное место работы
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы  Тогда
				СтрокаСообщениеОбОшибке = "нельзя оформить работника на внешнее совместительство, 
				|	так как он уже оформлен в организации по основному месту работы! 
				|	(См. приказ: " + ВыборкаСтрокЗапроса.КонфликтныйДокумент + ")"; 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;

		ИначеЕсли ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство  Тогда

			// При оформлении на внутреннее совместительство должно быть основное место работы или внешнее совместительство
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы <> Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы И ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы <> Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
				СтрокаСообщениеОбОшибке = "нельзя оформить работника на внутреннее совместительство, 
				|	так как он не оформлен в организации или по основному месту работы или по внешнему совместительству!"; 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;
	
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьВидыЗанятостиРаботникаВОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПараметров = "")

	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		ВедетсяНаборПерсонала	= СтруктураПараметров.ВедетсяНаборПерсонала И ВыборкаПоРаботникиОрганизации.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы;
	Иначе
		ВедетсяНаборПерсонала	= Ложь;
	КонецЕсли;
	
	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда
		
		// Движения на дату приёма
		
		// Движения по регистру "РаботникиОрганизации"
		Движение = Движения.РаботникиОрганизаций.Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаПриема;
		
		// Измерения
		Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

		// Ресурсы
		Движение.ЗанимаемыхСтавок			= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
		Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		Движение.Должность					= ВыборкаПоРаботникиОрганизации.Должность;
		Движение.ГрафикРаботы				= ВыборкаПоРаботникиОрганизации.ГрафикРаботы;
		
		//РБ
		Движение.Категория					= ВыборкаПоРаботникиОрганизации.Категория; 
		//vvv
		Движение.КатегорияДолжности			= ВыборкаПоРаботникиОрганизации.КатегорияДолжности; 
		Движение.ТабельУчетаОрганизации		= ВыборкаПоРаботникиОрганизации.ТабельУчетаОрганизации; 
		Движение.Разряд		                = ВыборкаПоРаботникиОрганизации.Разряд; 
		Движение.ВидУчетаВремени	        = ВыборкаПоРаботникиОрганизации.ВидУчетаВремени; 
		Движение.ТабельныйНомер		        = ВыборкаПоРаботникиОрганизации.ТабельныйНомер; 		
		Движение.Автомобиль		            = ВыборкаПоРаботникиОрганизации.Автомобиль; 
		Движение.Классность		            = ВыборкаПоРаботникиОрганизации.Классность;
		Движение.ДатаПриказа	            = ВыборкаПоРаботникиОрганизации.ДатаПриказа; 
		Движение.НомерПриказа	            = ВыборкаПоРаботникиОрганизации.НомерПриказа; 
		//
		Если НЕ ВыборкаПоРаботникиОрганизации.БезЕТС Тогда
			Движение.КоэффициентЕТС				= ВыборкаПоРаботникиОрганизации.КоэффициентЕТС; 
			Движение.РазрядЕТС					= ВыборкаПоРаботникиОрганизации.РазрядЕТС; 
			Движение.ИтоговоеПовышениеПоИнструкции		= ВыборкаПоРаботникиОрганизации.ИтоговоеПовышениеПоИнструкции;
			Движение.ПовышенныйКоэффициентЕТС   = ВыборкаПоРаботникиОрганизации.ПовышенныйКоэффициентЕТС;
			Движение.ТарифнаяСтавкаПервогоРазряда = ВыборкаПоРаботникиОрганизации.ТарифнаяСтавкаПервогоРазряда;
			Движение.БезЕТС				= ВыборкаПоРаботникиОрганизации.БезЕТС; 
		Иначе
			Движение.БезЕТС				= ВыборкаПоРаботникиОрганизации.БезЕТС; 
		КонецЕсли;

		Движение.УсловияТрудаИзмерение		    = ВыборкаПоРаботникиОрганизации.УсловияТрудаИзмерение;
		Движение.ВидДеятельностиИзмерение		= ВыборкаПоРаботникиОрганизации.ВидДеятельностиИзмерение;
		////////////////////////////////////////////////////////////////////////////////////
		// Реквизиты
		Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу;
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
		
		
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаУвольнения) Тогда
			Движение = Движения.НамеченныеСобытияПоПерсоналу.Добавить();
			// Свойства
			Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			// Измерения
			Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ДатаИзменения				= ВыборкаПоРаботникиОрганизации.ДатаУвольнения;
			Движение.ПланируемоеСобытие			= Перечисления.НамеченныеСобытияПоПерсоналу.Перемещение;
			// Ресурсы
			Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
			Движение.Должность					= ВыборкаПоРаботникиОрганизации.Должность;
			Движение.ЗанимаемыхСтавок			= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
			Движение.ГрафикРаботы				= ВыборкаПоРаботникиОрганизации.ГрафикРаботы;
		
			
			//Если НЕ ВыборкаПоРаботникиОрганизации.НапомнитьПоЗавершении Тогда
			//	// Свойства
			//	Движение.ПериодЗавершения						= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			//	// Ресурсы
			//	Движение.ПодразделениеОрганизацииЗавершения		= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
			//	Движение.ДолжностьЗавершения					= ВыборкаПоРаботникиОрганизации.Должность;
			//	// Реквизиты
			//	Движение.ПричинаИзмененияСостоянияЗавершения	= Перечисления.ПричиныИзмененияСостояния.Увольнение;
			//	Движение.ОбособленноеПодразделениеЗавершения	= ВыборкаПоШапкеДокумента.Организация;
			//КонецЕсли;
		КонецЕсли;
		
		Если ВедетсяНаборПерсонала И ВыборкаПоРаботникиОрганизации.ИспытательныйСрок > 0 Тогда
			Движение = Движения.СостояниеРаботниковНаИспытательномСроке.Добавить();
			// Свойства
			Движение.Период		= ВыборкаПоРаботникиОрганизации.ДатаПриема;
			// Измерения
			Движение.ФизЛицо	= ВыборкаПоРаботникиОрганизации.ФизЛицо;
			// Ресурсы
			Движение.Состояние	= Перечисления.СостоянияРаботникаНаИспытательномСроке.ПринятНаИспытательныйСрок;
			
			Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаУвольнения) Тогда
				
				Движение = Движения.НамеченныеСобытияПоПерсоналу.Добавить();
				// Свойства
				Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
				// Измерения
				Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ДатаИзменения				= ВыборкаПоРаботникиОрганизации.ДатаУвольнения;
				Движение.ПланируемоеСобытие			= Перечисления.НамеченныеСобытияПоПерсоналу.РезультатИспытательногоСрока;
				// Реквизиты
				Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
				Движение.Должность					= ВыборкаПоРаботникиОрганизации.Должность;
				Движение.ЗанимаемыхСтавок			= 0;
					
								
			Иначе
				Движение = Движения.СостояниеРаботниковНаИспытательномСроке.Добавить();
				// Свойства
				Движение.Период		= ДобавитьМесяц(ВыборкаПоРаботникиОрганизации.ДатаПриема, ВыборкаПоРаботникиОрганизации.ИспытательныйСрок) + мДлинаСуток;
				// Измерения
				Движение.ФизЛицо	= ВыборкаПоРаботникиОрганизации.ФизЛицо;
				// Ресурсы
				Движение.Состояние	= Перечисления.СостоянияРаботникаНаИспытательномСроке.ПринятНаРаботу;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыборкаПоРаботникиОрганизации.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда
			Движение = Движения.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы.Добавить();
			// Измерения
			Движение.Физлицо			= ВыборкаПоРаботникиОрганизации.Физлицо;
			Движение.ДатаНачала			= ВыборкаПоРаботникиОрганизации.ДатаПриема;
			Если ВыборкаПоРаботникиОрганизации.ДатаУвольнения <> '0001-01-01' и НЕ ВыборкаПоРаботникиОрганизации.НапомнитьПоЗавершении Тогда
				Движение.ДатаОкончания	= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			КонецЕсли;
			
		ИначеЕсли ВыборкаПоРаботникиОрганизации.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
			Движение = Движения.ПериодыРаботыРаботниковОрганизацийПоСовместительству.Добавить();
			// Измерения
			Движение.Физлицо			= ВыборкаПоРаботникиОрганизации.Физлицо;
			Движение.Организация		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ДатаНачала			= ВыборкаПоРаботникиОрганизации.ДатаПриема;
			Если ВыборкаПоРаботникиОрганизации.ДатаУвольнения <> '0001-01-01' и НЕ ВыборкаПоРаботникиОрганизации.НапомнитьПоЗавершении Тогда
				Движение.ДатаОкончания	= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			КонецЕсли;
			
		КонецЕсли;
		
		//РБ
		// Движения по регистру "ТарифныеСтавкиработниковОрганизации"
		Движение = Движения.ТарифныеСтавкиработниковОрганизации.Добавить();
		// Свойства
		Движение.Период                     = ВыборкаПоРаботникиОрганизации.ДатаПриема;
		// Измерения
		Движение.Сотрудник                    = ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация   		    	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		
		// Ресурсы
		Если НЕ ВыборкаПоРаботникиОрганизации.БезЕТС Тогда
      		Движение.Ставка           				 = ВыборкаПоРаботникиОрганизации.МесячнаяТарифнаяСтавка;
			Движение.ПроцентПоКонтракту         	 = ВыборкаПоРаботникиОрганизации.ПроцентПоКонтракту;
			Движение.ТарифнаяСтавка  				 = ВыборкаПоРаботникиОрганизации.ТарифнаяСтавка;
			Движение.ТарифнаяСПовышениемПоИнструкции = ВыборкаПоРаботникиОрганизации.ТарифныйСПовышениемПоИнструкции;
		Иначе
			Движение.Ставка           = ВыборкаПоРаботникиОрганизации.МесячнаяТарифнаяСтавка;
		КонецЕсли;
		
        //РБ
		// Движения по регистру "АвансыРаботниковОрганизаций"
		Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.Аванс)  тогда
			Движение = Движения.АвансыРаботникамОрганизаций.Добавить();
			// Свойства
			Движение.Период                     = ВыборкаПоРаботникиОрганизации.ДатаПриема;
			// Измерения
			Движение.ФизЛицо                    = ВыборкаПоРаботникиОрганизации.ФизЛицо;
			//vvv
			//Движение.Организация   		    	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.Организация   		    	= ВыборкаПоШапкеДокумента.Организация;
			//
		
			// Ресурсы
			Движение.СуммаАванса           = ВыборкаПоРаботникиОрганизации.Аванс;
		КонецЕсли;
		
		//vvv
		
		// Движения по регистру "ТарифныеСтавкиВодителейОрганизации"
		Если ((ВыборкаПоРаботникиОрганизации.Должность=Справочники.ДолжностиОрганизаций.ВодительАвтомобиля) или (ВыборкаПоРаботникиОрганизации.ЭтоВодитель)) и (РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Получить(Новый Структура("Организация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация)).ПорядокИзмененияРабочегоМестаВодителей=Перечисления.ПорядокИзмененияРабочегоМестаВодителей.ТабельУчетаРабочегоВремени) ТОгда
			
			Движение = Движения.ТарифныеСтавкиВодителейОрганизации.Добавить();
			// Свойства
			Движение.Период                     = ВыборкаПоРаботникиОрганизации.ДатаПриема;
			// Измерения
			Движение.Сотрудник                    = ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.Организация   		    	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		
			// Ресурсы
			Движение.ТарифнаяСтавка  				 = ВыборкаПоРаботникиОрганизации.ТарифнаяСтавка;
			Движение.Ставка           = ВыборкаПоРаботникиОрганизации.МесячнаяТарифнаяСтавка;
			Движение.ТарифнаяСтавкаРемонт  				 = ВыборкаПоРаботникиОрганизации.ТарифнаяСтавкаРемонт;
			Движение.СтавкаРемонт           = ВыборкаПоРаботникиОрганизации.МесячнаяТарифнаяСтавкаРемонт;
			
					
		
			// Движения по регистру "ВодителиОрганизации"
			Движение = Движения.ВодителиОрганизаций.Добавить();
			
			// Свойства
			Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаПриема;
			
			// Измерения
			Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
			// Ресурсы
			Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;			
			Движение.ТабельУчетаОрганизации		= ВыборкаПоРаботникиОрганизации.ТабельУчетаОрганизации; 
			Движение.Автомобиль					= ВыборкаПоРаботникиОрганизации.Автомобиль; 
			Движение.Классность					= ВыборкаПоРаботникиОрганизации.Классность; 
			//

			////////////////////////////////////////////////////////////////////////////////////
			// Реквизиты
			Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу;
			Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
			
		КонецЕсли;		

		Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.СпособОтраженияВБухУчете) Тогда
			
			//Движения по регистру "УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете"
			Движение = Движения.УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.Добавить();
			
			// Свойства
			Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаПриема;
			// Измерения
			
			Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			
			// Ресурсы
			Движение.СпособОтраженияВБухучете	= ВыборкаПоРаботникиОрганизации.СпособОтраженияВБухучете;			
			
		КонецЕсли;		
		
		мНаборЗаписейПрименениеВычетов.Отбор.ФизЛицо.Установить(ВыборкаПоРаботникиОрганизации.Физлицо);
		мНаборЗаписейПрименениеВычетов.Отбор.Период.Установить(НачалоМесяца(ВыборкаПоРаботникиОрганизации.ДатаПриема));
		мНаборЗаписейПрименениеВычетов.Прочитать();
		
		Если мНаборЗаписейПрименениеВычетов.Количество()=0 ТОгда
			НоваяЗапись=мНаборЗаписейПрименениеВычетов.Добавить();
		Иначе
			НоваяЗапись=мНаборЗаписейПрименениеВычетов[0];
		КонецЕсли;		
		
		НоваяЗапись.ФизЛицо=ВыборкаПоРаботникиОрганизации.Физлицо;
		НоваяЗапись.Период=ВыборкаПоРаботникиОрганизации.ДатаПриема;
		НоваяЗапись.Организация=ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		НоваяЗапись.Документ=Ссылка;
		мНаборЗаписейПрименениеВычетов.Записать();
		//
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

Процедура ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса)
	
	Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
	
	Движение.Организация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Если НЕ ВыборкаСтрокЗапроса.ОсновноеНачисление Тогда
		Движение.ВидРасчетаИзмерение = ВыборкаСтрокЗапроса.ВидРасчета;
	КонецЕсли;
	
	СтрокаПолей = "Период,Сотрудник,Действие,ВидРасчета,ПериодЗавершения,ДействиеЗавершения,ВидРасчетаЗавершения";
	
	Если ВыборкаСтрокЗапроса.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
	
		Для Сч = 1 По 6 Цикл
			Если ВыборкаСтрокЗапроса.ПроизвольнаяФормулаРасчета Тогда
				Если Сч <= ВыборкаСтрокЗапроса.КоличествоПоказателей Тогда
					Если ВыборкаСтрокЗапроса["Показатель" + Сч + "ЗапрашиватьПриКадровыхПеремещениях"]
						Или ВыборкаСтрокЗапроса.ОсновноеНачисление И ВыборкаСтрокЗапроса["Показатель" + Сч + "ТарифнаяСтавка"] Тогда
						СтрокаПолей = СтрокаПолей + ",Показатель" + Сч + ",Валюта"+ Сч + ",ТарифныйРазряд"+ Сч;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтрокаПолей = СтрокаПолей + ",Показатель" + Сч + ",Валюта"+ Сч;
				Если ВыборкаСтрокЗапроса.ТребуетВводаТарифногоРазряда Тогда
					СтрокаПолей = СтрокаПолей + ",ТарифныйРазряд"+ Сч;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Движения на дату завершения
	Если ЗначениеЗаполнено(ВыборкаСтрокЗапроса.ПериодЗавершения) И ВыборкаСтрокЗапроса.ДействиеЗавершения <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		
		Для Сч = 1 По 6 Цикл
			Если ВыборкаСтрокЗапроса.ПроизвольнаяФормулаРасчета Тогда
				Если Сч <= ВыборкаСтрокЗапроса.КоличествоПоказателей Тогда
					Если ВыборкаСтрокЗапроса["Показатель" + Сч + "ЗапрашиватьПриКадровыхПеремещениях"]
						Или ВыборкаСтрокЗапроса.ОсновноеНачисление И ВыборкаСтрокЗапроса["Показатель" + Сч + "ТарифнаяСтавка"] Тогда
						СтрокаПолей = СтрокаПолей + ",Показатель" + Сч + "Завершения,Валюта"+ Сч + "Завершения,ТарифныйРазряд"+ Сч + "Завершения";
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтрокаПолей = СтрокаПолей + ",Показатель" + Сч + "Завершения,Валюта"+ Сч + "Завершения,ТарифныйРазряд"+ Сч + "Завершения";
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаСтрокЗапроса, СтрокаПолей);

	
	

	
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоНачислениям()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)

	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда
		
		// Движения на дату приема
		
		// ЗанятыеШтатныеЕдиницыОрганизаций";
		Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
		
		// Свойства
		Движение.Период							= ВыборкаПоРаботникиОрганизации.ДатаПриема;
		Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.ПодразделениеОрганизации		= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		Движение.Должность						= ВыборкаПоРаботникиОрганизации.Должность;
		Движение.УсловияТрудаИзмерение		    = ВыборкаПоРаботникиОрганизации.УсловияТрудаИзмерение;
		Движение.ВидДеятельностиИзмерение		= ВыборкаПоРаботникиОрганизации.ВидДеятельностиИзмерение;
		// Ресурсы
		Движение.КоличествоСтавок				= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок; 
		
		//// Движения на дату увольнения
		//Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаУвольнения) И НЕ ВыборкаПоРаботникиОрганизации.НапомнитьПоЗавершении Тогда
		//	// ЗанятыеШтатныеЕдиницыОрганизаций";
		//	Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
		//	
		//	// Свойства
		//	Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
		//	Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
		//	
		//	// Измерения
		//	Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		//	Движение.Должность					= ВыборкаПоРаботникиОрганизации.Должность;
		//	Движение.УсловияТрудаИзмерение		= ВыборкаПоРаботникиОрганизации.УсловияТрудаИзмерение;
		//	Движение.ВидДеятельностиИзмерение	= ВыборкаПоРаботникиОрганизации.ВидДеятельностиИзмерение;

		//	
		//	// Ресурсы
		//	Движение.КоличествоСтавок			= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
		//КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

Процедура ДобавитьСтрокуВДвиженияПоКоэффициентам(ВыборкаПоКоэфициентам)
	
	Движение = Движения.КоэфПовышенияТО.Добавить();
	
	Движение.Период = ВыборкаПоКоэфициентам.ДатаПриема;
	Движение.Сотрудник = ВыборкаПоКоэфициентам.Сотрудник;
	Движение.Коэффициент = ВыборкаПоКоэфициентам.Коэффициент; 
	
	Движение.Размер = ВыборкаПоКоэфициентам.Размер;
	Движение.Действие = Перечисления.ВидыДействияСНачислением.Начать;
КонецПроцедуры

Процедура ДобавитьСтрокуВДвиженияПоПовышенияПоИнструкции(ВыборкаПоПовышениям)
	
	Движение = Движения.ПовышенияПоИнструкции.Добавить();
	
	Движение.Период = ВыборкаПоПовышениям.ДатаПриема;
	Движение.Сотрудник = ВыборкаПоПовышениям.Сотрудник;
	Движение.Коэффициент = ВыборкаПоПовышениям.Коэффициент; 
	
	Движение.Размер = ВыборкаПоПовышениям.Размер;
	Движение.Действие = Перечисления.ВидыДействияСНачислением.Начать;
КонецПроцедуры

//vvv
Процедура ДобавитьДопНачисленияПоСтроке(СтрокаТабличнойЧасти) Экспорт
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрокаТабличнойЧасти);
	
	ДействияСНачислениями = ЗаполнениеДокументовЗК.ПолучитьТаблицуДействийСНачислениями(РаботникиОрганизации.Выгрузить(МассивСтрок), Ссылка, Дата, Организация, "ДатаПриема", , Истина, Ложь);

	СтруктураПоиска = Новый Структура("Сотрудник, ВидРасчета");
	//СтруктураПоиска.Вставить("Сторно",	Ложь);
	
	Для Каждого СтрокаТаблицы Из ДействияСНачислениями Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		МассивНачислений = ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
		
		Если МассивНачислений.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ОсновныеНачисления.Добавить(), СтрокаТаблицы);
		
	КонецЦикла;
	
	//ПриемНаРаботуВОрганизациюПереопределяемый.ДобавитьДополнительноПоСтроке(ЭтотОбъект, СтрокаТабличнойЧасти);
	
КонецПроцедуры // ДобавитьНачисленияПоСтроке()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке(Режим).Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		// данные учетной политики
		УчетнаяПолитикаПоПерсоналуОрганизации	= глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
		ПроверкаШтатногоРасписания				= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналуОрганизации, Организация, "ПроверкаШтатногоРасписания");
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// получим соответствие для проверок
			СоответствиеВалютныеСпособыРасчета = ПроведениеРасчетов.ПолучитьСоответствиеСпособовРасчетаТребующихВалюту();
			
			// выполним выборку по табличной части документа
			ВыборкаСтрокЗапроса = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, ПроверкаШтатногоРасписания).Выбрать();
			
			ВедетсяНаборПерсонала = Константы.РежимНабораПерсонала.Получить() = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц;
			
			// для проверки числа ставок
			// обходим строки запроса, проверяем данные и формируем движения
			Пока ВыборкаСтрокЗапроса.Следующий() Цикл

				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ, Заголовок,  ПроверкаШтатногоРасписания);
				Если НЕ Отказ Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, Новый Структура("ВедетсяНаборПерсонала", ВедетсяНаборПерсонала));
				КонецЕсли;

			КонецЦикла;
			
			// проверим виды занятости работника в организации
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоПрежнимМестам(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьВидыЗанятостиРаботникаВОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента.Выбрать(), Отказ, Заголовок);
			КонецЦикла;
			
			// выполним выборку по табличной части основных начислений
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоНачисления(ПроверкаШтатногоРасписания).Выбрать();

			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания);
				Если не Отказ Тогда
					ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
				КонецЕсли;
				
			КонецЦикла;
			
			ВыборкаПоКоэфициентам = СформироватьЗапросПоКоэфПовышенияТО(ВыборкаПоШапкеДокумента).Выбрать();
			Пока ВыборкаПоКоэфициентам.Следующий() Цикл
				ДобавитьСтрокуВДвиженияПоКоэффициентам(ВыборкаПоКоэфициентам);
			КонецЦикла;
			
			ВыборкаПоПовышениям =  СформироватьЗапросПоПовышенияПоИнструкции(ВыборкаПоШапкеДокумента).Выбрать();
			Пока ВыборкаПоПовышениям.Следующий() Цикл
				ДобавитьСтрокуВДвиженияПоПовышенияПоИнструкции(ВыборкаПоПовышениям);
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Основание.Проведен Тогда
			
			ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
			УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
			
			Если Организация.Пустая() Тогда
				Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяОрганизация")
			КонецЕсли;
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Организация",			Организация);
			Запрос.УстановитьПараметр("Регистратор",			Основание);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПриемНаРаботуРаботники.Сотрудник,
			|	ПриемНаРаботуРаботники.Сотрудник.Физлицо КАК ФизЛицо,
			|	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации,
			|	ПриемНаРаботуРаботники.Должность КАК Должность,
			|	ПриемНаРаботуРаботники.ЗанимаемыхСтавок,
			|	ПриемНаРаботуРаботники.ДатаПриема,
			|	ВЫБОР
			|		КОГДА ПриемНаРаботуРаботники.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПриемНаРаботуРаботники.НапомнитьПоЗавершении
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НапомнитьПоЗавершении,
			|	ВЫБОР
			|		КОГДА ПриемНаРаботуРаботники.ИспытательныйСрок = ЗНАЧЕНИЕ(Перечисление.ИспытательныйСрок.СИспытательнымСроком)
			|			ТОГДА РАЗНОСТЬДАТ(ПриемНаРаботуРаботники.ДатаПриема, ПриемНаРаботуРаботники.ДатаУвольнения, МЕСЯЦ)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ИспытательныйСрок,
			|	ПриемНаРаботуРаботники.ДатаУвольнения,
			|	ПриемНаРаботуРаботники.ГрафикРаботы
			|ИЗ
			|	Документ.ПриемНаРаботу.Работники КАК ПриемНаРаботуРаботники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
			|		ПО (СоответствиеПодразделенийИПодразделенийОрганизаций.Организация = &Организация)
			|			И ПриемНаРаботуРаботники.Подразделение = СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение
			|ГДЕ
			|	ПриемНаРаботуРаботники.Ссылка = &Регистратор";
			
			РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
			
		КонецЕсли;
		
	//ИначеЕсли ТипОснования = Тип("Структура") Тогда
	//	Организация = Основание.Организация;
	//	
	//	// Заполним реквизиты из стандартного набора.
	//	ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание.Документ);
	//	
	//	РаботникиОрганизации.Загрузить(Основание.РаботникиОрганизации.Выгрузить());
		
	ИначеЕсли ТипОснования = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Если Основание.ВидДоговора <> Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",	Основание);
		
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизаций.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА СотрудникиОрганизаций.Организация
		|		ИНАЧЕ СотрудникиОрганизаций.ОбособленноеПодразделение
		|	КОНЕЦ КАК Организация,
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
		|	СотрудникиОрганизаций.Должность,
		|	СотрудникиОрганизаций.ПодразделениеОрганизации,
		//vvv
		|	СотрудникиОрганизаций.ТабельУчетаОрганизации,
		|	СотрудникиОрганизаций.КатегорияДолжности,
		|	СотрудникиОрганизаций.Классность,
		//
		|	СотрудникиОрганизаций.ЗанимаемыхСтавок,
		|	СотрудникиОрганизаций.ДатаНачала КАК ДатаПриема,
		|	СотрудникиОрганизаций.ДатаОкончания КАК ДатаУвольнения,
		|	СотрудникиОрганизаций.ИспытательныйСрок,
		|	СотрудникиОрганизаций.ГрафикРаботы,
		|	СотрудникиОрганизаций.ВидРасчета КАК ВидРасчета,
		|	СотрудникиОрганизаций.РасчетнаяТарифнаяСтавка КАК Показатель1,
		|	NULL КАК Показатель2,
		|	NULL КАК Показатель3,
		|	NULL КАК Показатель4,
		|	СотрудникиОрганизаций.ВалютаТарифнойСтавки КАК Валюта1,
		|	NULL КАК Валюта2,
		|	NULL КАК Валюта3,
		|	NULL КАК Валюта4,
		|	СотрудникиОрганизаций.ТарифныйРазряд КАК ТарифныйРазряд1,
		|	NULL КАК ТарифныйРазряд2,
		|	NULL КАК ТарифныйРазряд3,
		|	NULL КАК ТарифныйРазряд4,
		|	СотрудникиОрганизаций.РасчетнаяТарифнаяСтавка КАК МесячнаяТарифнаяСтавка,
		|	СотрудникиОрганизаций.РазрядЕТС,
		|	СотрудникиОрганизаций.КоэффициентЕТС,
		|	СотрудникиОрганизаций.ПроцентПовышения КАК ПроцентПоКонтракту,
		|	СотрудникиОрганизаций.Должность.Категория КАК Категория,
		|	СотрудникиОрганизаций.ТарифныйСПовышениемПоИнструкции,
		|	СотрудникиОрганизаций.ИтоговоеПовышениеПоИнструкции,
		|	СотрудникиОрганизаций.ТарифнаяСтавка,
		|	СотрудникиОрганизаций.РазмерСтавки1Разряда,
		|	СотрудникиОрганизаций.ПовышенныйКоэффициентЕТС,
		|	СотрудникиОрганизаций.РазмерСтавки1Разряда КАК РазмерСтавки1Разряда1,
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизаций.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НапомнитьПоЗавершении,
		|	СотрудникиОрганизаций.ТарифнаяСтавкаПервогоРазряда,
		|	СотрудникиОрганизаций.УсловияТрудаИзмерение,
		|	СотрудникиОрганизаций.ВидДеятельностиИзмерение,
		|	СотрудникиОрганизаций.БезЕТС
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Организация
		|		ИНАЧЕ СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ОбособленноеПодразделение
		|	КОНЕЦ,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Физлицо,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Должность,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ПодразделениеОрганизации,
		//vvv
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ТабельУчетаОрганизации,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.КатегорияДолжности,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Классность,
		//
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ЗанимаемыхСтавок,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ДатаНачала,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ДатаОкончания,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ИспытательныйСрок,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ГрафикРаботы,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Надбавка,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Показатель1,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Показатель2,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Показатель3,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Показатель4,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Валюта1,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Валюта2,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Валюта3,
		|	СотрудникиОрганизацийПерсональныеНадбавки.Валюта4,
		|	СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд1,
		|	СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд2,
		|	СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд3,
		|	СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд4,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	Справочник.СотрудникиОрганизаций.ПерсональныеНадбавки КАК СотрудникиОрганизацийПерсональныеНадбавки
		|ГДЕ
		|	СотрудникиОрганизацийПерсональныеНадбавки.Ссылка = &Ссылка
		|	И СотрудникиОрганизацийПерсональныеНадбавки.Надбавка <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизаций.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА СотрудникиОрганизаций.Организация
		|		ИНАЧЕ СотрудникиОрганизаций.ОбособленноеПодразделение
		|	КОНЕЦ,
		|	СотрудникиОрганизаций.Ссылка,
		|	СотрудникиОрганизаций.Физлицо,
		|	СотрудникиОрганизаций.Должность,
		|	СотрудникиОрганизаций.ПодразделениеОрганизации,
		//vvv
		|	СотрудникиОрганизаций.ТабельУчетаОрганизации,
		|	СотрудникиОрганизаций.КатегорияДолжности,
		|	СотрудникиОрганизаций.Классность,
		//
		|	СотрудникиОрганизаций.ЗанимаемыхСтавок,
		|	СотрудникиОрганизаций.ДатаНачала,
		|	СотрудникиОрганизаций.ДатаОкончания,
		|	СотрудникиОрганизаций.ИспытательныйСрок,
		|	СотрудникиОрганизаций.ГрафикРаботы,
		|	СхемыМотивацииРаботников.ВидРасчета,
		|	СхемыМотивацииРаботников.Показатель1,
		|	СхемыМотивацииРаботников.Показатель2,
		|	СхемыМотивацииРаботников.Показатель3,
		|	СхемыМотивацииРаботников.Показатель4,
		|	СхемыМотивацииРаботников.Валюта1,
		|	СхемыМотивацииРаботников.Валюта2,
		|	СхемыМотивацииРаботников.Валюта3,
		|	СхемыМотивацииРаботников.Валюта4,
		|	СхемыМотивацииРаботников.ТарифныйРазряд1,
		|	СхемыМотивацииРаботников.ТарифныйРазряд2,
		|	СхемыМотивацииРаботников.ТарифныйРазряд3,
		|	СхемыМотивацииРаботников.ТарифныйРазряд4,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
		|		ПО (СхемыМотивацииРаботников.Организация = ВЫБОР
		|				КОГДА СотрудникиОрганизаций.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА СотрудникиОрганизаций.Организация
		|				ИНАЧЕ СотрудникиОрганизаций.ОбособленноеПодразделение
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА СхемыМотивацииРаботников.Должность <> ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)
		|						И СхемыМотивацииРаботников.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|					ТОГДА СхемыМотивацииРаботников.Должность = СотрудникиОрганизаций.Должность
		|							И СхемыМотивацииРаботников.Подразделение = СотрудникиОрганизаций.ПодразделениеОрганизации
		|				ИНАЧЕ СхемыМотивацииРаботников.Должность = СотрудникиОрганизаций.Должность
		|			КОНЕЦ)
		|ГДЕ
		|	СхемыМотивацииРаботников.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций
		|	И СхемыМотивацииРаботников.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
		|	И СотрудникиОрганизаций.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
	
		ЗапросКоэфПовышения = Новый Запрос;
		ЗапросКоэфПовышения.УстановитьПараметр("Ссылка", Основание);

		ЗапросКоэфПовышения.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизацийКоэфПовышенияТО.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизацийКоэфПовышенияТО.Коэффициент,
		|	СотрудникиОрганизацийКоэфПовышенияТО.Размер
		|ИЗ
		|	Справочник.СотрудникиОрганизаций.КоэфПовышенияТО КАК СотрудникиОрганизацийКоэфПовышенияТО
		|ГДЕ
		|	 СотрудникиОрганизацийКоэфПовышенияТО.Ссылка = &Ссылка";
		
		ЗапросПовышения = Новый Запрос;
		ЗапросПовышения.УстановитьПараметр("Ссылка", Основание);
		
		ЗапросПовышения.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизацийПовышенияПоИнструкции.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизацийПовышенияПоИнструкции.Коэффициент,
		|	СотрудникиОрганизацийПовышенияПоИнструкции.Размер
		|ИЗ
		|	Справочник.СотрудникиОрганизаций.ПовышенияПоИнструкции КАК СотрудникиОрганизацийПовышенияПоИнструкции
		|ГДЕ
		|	СотрудникиОрганизацийПовышенияПоИнструкции.Ссылка = &Ссылка";;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ВыборкаКоэф = ЗапросКоэфПовышения.Выполнить().Выбрать();
		ВыборкаПовышения = ЗапросПовышения.Выполнить().Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, "Организация");
			//vvv комментируем, дату увольнения заполянть не будем, увольнение будет делать приказ
			//ЗаполнитьЗначенияСвойств(РаботникиОрганизации.Добавить(), Выборка);
			ЗаполнитьЗначенияСвойств(РаботникиОрганизации.Добавить(), Выборка,,"ДатаУвольнения");
			//
			Пока Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ВидРасчета) Цикл
				ЗаполнитьЗначенияСвойств(ОсновныеНачисления.Добавить(), Выборка);
			КонецЦикла;
			
		КонецЦикла;
		
		Пока ВыборкаКоэф.Следующий() цикл
			ЗаполнитьЗначенияСвойств(КоэфПовышенияТО.Добавить(), ВыборкаКоэф);
		КонецЦикла;	
		
		Пока ВыборкаПовышения.Следующий() цикл
			ЗаполнитьЗначенияСвойств(ПовышенияПоИнструкции.Добавить(),ВыборкаПовышения);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ОбщегоНазначения.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
	// получить новый номер документа по совокупности кадровых документов
	ПроцедурыУправленияПерсоналом.ПриУстановкеНовогоНомераКадровогоДокумента(СтандартнаяОбработка, ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ЕдиныйНумераторКадровыхДокументов"), Номер, Префикс, Дата);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.КадровыеПриказыОрганизации.Добавить();
		ЗаписьРегистрации.Период		= Дата;
		ЗаписьРегистрации.Регистратор	= Ссылка;
	КонецЕсли;
	
	Движения.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы.РежимЗаписиРегистратора = РежимЗаписи;
	Движения.ПериодыРаботыРаботниковОрганизацийПоСовместительству.РежимЗаписиРегистратора = РежимЗаписи;

КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// проверим уникальность номера с точки зрения кадровой нумерации
	ПроцедурыУправленияПерсоналом.ПроверкаУникальностиНомераКадровогоДокумента(ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ЕдиныйНумераторКадровыхДокументов"), Номер, Дата, Ссылка);
	
КонецПроцедуры // ПриЗаписи()
//vvv
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	мНаборЗаписейПрименениеВычетов.Прочитать();
	
	НомерЗаписиНабора = мНаборЗаписейПрименениеВычетов.Количество() - 1;
	Пока НомерЗаписиНабора >= 0 Цикл
		Если мНаборЗаписейПрименениеВычетов[НомерЗаписиНабора].Документ = Ссылка Тогда
			мНаборЗаписейПрименениеВычетов.Удалить(НомерЗаписиНабора);
		КонецЕсли;
		НомерЗаписиНабора = НомерЗаписиНабора - 1
	КонецЦикла;

	мНаборЗаписейПрименениеВычетов.Записать();
	
КонецПроцедуры
//
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;
//vvv
мНаборЗаписейПрименениеВычетов=РегистрыСведений.НДФЛПрименениеВычетов.СоздатьНаборЗаписей();
//


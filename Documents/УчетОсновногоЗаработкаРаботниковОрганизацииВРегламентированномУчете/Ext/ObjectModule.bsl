////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры:
//	Режим	- режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.Дата,
	|	УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.Организация КАК ОбособленноеПодразделение,
	//vvv
	|	УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.НепосредственныйВводОтражения КАК НепосредственныйВводОтражения,
	//
	|	ВЫБОР
	|		КОГДА УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.Организация
	|		ИНАЧЕ УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.Ссылка
	|ИЗ
	|	Документ.УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете КАК УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете
	|ГДЕ
	|	УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.Организация);

	// Описание текста запроса:
	// 1. Выборка "ТЧРаботникиОрганизации": 
	//		Выбираются строки документа.  
	// 2. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки с одинаковым значением реквизита "Сотрудник"
	// 3. Выборка "ПоследующиеДвижение": 
	//		В регистре УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете 
	//		ищем движения, следующие за теми, которые мы собираемся записать в этот же регистр - 
	//		затем проверим, нет ли уже движения на ту дату, которая указана в документе
	//
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование,
	|	ТЧРаботникиОрганизации.ДатаИзменения КАК Период,
	|	ТЧРаботникиОрганизации.СпособОтраженияВБухучете,
	//vvv
	|	ТЧРаботникиОрганизации.СчетДт,
	|	ТЧРаботникиОрганизации.СубконтоДт1,
	|	ТЧРаботникиОрганизации.СубконтоДт2,
	|	ТЧРаботникиОрганизации.СубконтоДт3,
	|	ТЧРаботникиОрганизации.СубконтоДт4,
    //
	|	ТЧРаботникиОрганизации.ПодпадаетПодЕНВД,
	|	ТЧРаботникиОрганизации.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	ПоследующиеДвижение.РегистраторПредставление,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ
	|	Документ.УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
	|				ПО (ТЧРаботникиОрганизации2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботникиОрганизации.НомерСтроки > ТЧРаботникиОрганизации2.НомерСтроки
	|					И ТЧРаботникиОрганизации.ДатаИзменения = ТЧРаботникиОрганизации2.ДатаИзменения
	|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МИНИМУМ(УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.Период) КАК ДатаПоследующегоДвижения,
	|			ТЧДокумента.Сотрудник КАК Сотрудник,
	|			УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.Регистратор.Представление КАК РегистраторПредставление
	|		ИЗ
	|			Документ.УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.РаботникиОрганизации КАК ТЧДокумента
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете КАК УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете
	|				ПО ТЧДокумента.ДатаИзменения <= УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.Период
	|					И ТЧДокумента.Сотрудник = УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.Сотрудник
	|		ГДЕ
	|			ТЧДокумента.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.Регистратор.Представление,
	|			ТЧДокумента.Сотрудник) КАК ПоследующиеДвижение
	|		ПО ТЧРаботникиОрганизации.ДатаИзменения = ПоследующиеДвижение.ДатаПоследующегоДвижения
	|			И ТЧРаботникиОрганизации.Сотрудник = ПоследующиеДвижение.Сотрудник
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОбособленноеПодразделение) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, для которой ведется учет!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры:
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса по товарам документа, 
//	Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Работники организации"": ";

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Период) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата изменения учета работника!", Отказ, Заголовок);
	КонецЕсли;
	
	//// СпособОтраженияВБухучете
	//Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете)  Тогда
	//	//ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан способ отражения заработка работника в бухгалтерском учете!", Отказ);
	//	Сообщить(СтрокаНачалаСообщенияОбОшибке + "не указан способ отражения заработка работника в бухгалтерском учете!
	//	|Движение по этой строке производиться не будет.")
	//КонецЕсли;
	
	// повторяющиеся строки
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер)  Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "по работнику " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " найдена повторяющаяся строка № " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!", Отказ, Заголовок);
	КонецЕсли;
	
	// повторяющиеся строки
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.РегистраторПредставление)  Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "способ учета основного заработка работника " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже зарегистрирован ранее документом " + ВыборкаПоСтрокамДокумента.РегистраторПредставление + "!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента					- выборка из результата запроса по шапке документа,
//	СтруктураПроведенияПоРегистрамСведений	- структура, содержащая имена регистров 
//											  сведений по которым надо проводить документ,
//	СтруктураПараметров						- структура параметров проведения,
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)

	СтрокаСвойствИзДокумента = "Организация";
	СтрокаСвойствИзСтрокиДокумента = "Период,Сотрудник,СпособОтраженияВБухучете,СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя,ПодпадаетПодЕНВД";
							
	//Движения по регистру "УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете"
	Движение = Движения.УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.Добавить();
	
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоРаботникиОрганизации,СтрокаСвойствИзСтрокиДокумента);
	
	//vvv
	Если ВыборкаПоШапкеДокумента.НепосредственныйВводОтражения Тогда
		Движение.СпособОтраженияВБухучете 	= ПодобратьСпособОтражения(ВыборкаПоРаботникиОрганизации.СчетДт,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт1,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт2,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт3,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт4);
	КонецЕсли;	
	//

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			// выполним выборку по табличной части документа
			РезультатЗапросаПоРаботники	= СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента);
			ВыборкаСтрокЗапроса			= РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			// обходим строки запроса, проверяем данные и формируем движения
			Пока ВыборкаСтрокЗапроса.Следующий() Цикл
				
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ, Заголовок);
				Если НЕ Отказ Тогда
					
					//Если ЗначениеЗаполнено(ВыборкаСтрокЗапроса.СпособОтраженияВБухучете) Тогда // Движения с пустым способом отражения не формировать
						ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
					//КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриемНаРаботуВОрганизацию") ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.КадровоеПеремещениеОрганизаций") ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратНаРаботуОрганизаций") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Основание.Проведен Тогда
			
			ОтражаемыйДокумент = Основание;
			
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриемНаРаботуВОрганизацию") Тогда
				РеквизитДатаС	= "ДатаПриема";
				РеквизитДатаПо	= "ДатаУвольнения";
				
			ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КадровоеПеремещениеОрганизаций") Тогда
				РеквизитДатаС	= "ДатаНачала";	
				РеквизитДатаПо	= "ДатаОкончания";
				
			ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратНаРаботуОрганизаций") Тогда
				РеквизитДатаС	= "ДатаВозврата";
				
			Иначе
				Возврат;
				
			КонецЕсли;
			
			Для Каждого  СтрокаОснования Из Основание.РаботникиОрганизации Цикл
				
				// Для даты начала
				НоваяСтрока	= РаботникиОрганизации.Добавить();
				НоваяСтрока.Сотрудник		= СтрокаОснования.Сотрудник;
				НоваяСтрока.ФизЛицо			= СтрокаОснования.ФизЛицо;
				НоваяСтрока.ДатаИзменения	= СтрокаОснования[РеквизитДатаС];
				
				// Для даты окончания
				Если ТипЗнч(Основание) <> Тип("ДокументСсылка.ВозвратНаРаботуОрганизаций") И НЕ СтрокаОснования.НапомнитьПоЗавершении И ЗначениеЗаполнено(СтрокаОснования[РеквизитДатаПо]) Тогда
					НоваяСтрока = РаботникиОрганизации.Добавить();
					НоваяСтрока.Сотрудник		= СтрокаОснования.Сотрудник;
					НоваяСтрока.ФизЛицо			= СтрокаОснования.ФизЛицо;
					НоваяСтрока.ДатаИзменения	= СтрокаОснования[РеквизитДатаПо];
					//vvv
					НоваяСтрока.ДатаИзменения	= СтрокаОснования[РеквизитДатаПо]+86400;
					//
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	
КонецПроцедуры // ПередЗаписью()
//vvv
Функция ПолучитьНаименованиеСпособаОтражения(СпособОтражения)

	НаименовниеДебета = "";
	СубконтоДебета = "";
	Если ЗначениеЗаполнено(СпособОтражения.СчетДт) Тогда
		ВидыСубконтоСчета = СпособОтражения.СчетДт.ВидыСубконто;
		Для Ном = 1 по ВидыСубконтоСчета.Количество() Цикл
			Если ЗначениеЗаполнено(СпособОтражения["СубконтоДт"+Ном]) Тогда
				Если ТипЗнч(СпособОтражения["СубконтоДт"+Ном])=Тип("СправочникСсылка.ПодразделенияОрганизаций") или 
					 ТипЗнч(СпособОтражения["СубконтоДт"+Ном])=Тип("СправочникСсылка.Автомобили") Тогда
					СубконтоДебета = СубконтоДебета + "<" + СокрЛП(Строка(СпособОтражения["СубконтоДт"+Ном].Владелец))+"."+СокрЛП(Строка(СпособОтражения["СубконтоДт"+Ном])) + "> ";
				Иначе
					СубконтоДебета = СубконтоДебета + "<" + СокрЛП(Строка(СпособОтражения["СубконтоДт"+Ном])) + "> ";					
				КонецЕсли;
			ИначеЕсли ВидыСубконтоСчета[Ном-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации Тогда
				//пропускаем
			ИначеЕсли ВидыСубконтоСчета[Ном-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения Тогда	
				СубконтоДебета = СубконтоДебета + "<подб. авт.> ";
			Иначе
				СубконтоДебета = СубконтоДебета + "<...> ";
			КонецЕсли;	
		КонецЦикла;                 
		НаименовниеДебета = "Дт" + СпособОтражения.СчетДт + " " + СубконтоДебета;
	КонецЕсли;
	
	НаименовниеКредита = "";
	СубконтоКредита = "";
	Если ЗначениеЗаполнено(СпособОтражения.СчетКт) Тогда
		ВидыСубконтоСчета = СпособОтражения.СчетКт.ВидыСубконто;
		Для Ном = 1 по ВидыСубконтоСчета.Количество() Цикл
			Если ЗначениеЗаполнено(СпособОтражения["СубконтоКт"+Ном]) Тогда
				Если ТипЗнч(СпособОтражения["СубконтоКт"+Ном])=Тип("СправочникСсылка.ПодразделенияОрганизаций") или 
					 ТипЗнч(СпособОтражения["СубконтоКт"+Ном])=Тип("СправочникСсылка.Автомобили") Тогда
					СубконтоКредита = СубконтоКредита + "<" + СокрЛП(Строка(СпособОтражения["СубконтоКт"+Ном].Владелец))+"."+СокрЛП(Строка(СпособОтражения["СубконтоКт"+Ном])) + "> ";
				Иначе
					СубконтоКредита = СубконтоКредита + "<" +СокрЛП(Строка(СпособОтражения["СубконтоКт"+Ном])) + "> ";					
				КонецЕсли;
			ИначеЕсли ВидыСубконтоСчета[Ном-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации Тогда
				//пропускаем
			ИначеЕсли ВидыСубконтоСчета[Ном-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения Тогда	
				СубконтоКредита = СубконтоКредита + "<подб. авт.> ";
			Иначе
				СубконтоКредита = СубконтоКредита + "<...> ";
			КонецЕсли;	
		КонецЦикла;
		НаименовниеКредита = "Кт" + СпособОтражения.СчетКт + " " + СубконтоКредита;
	КонецЕсли;
	
	Возврат СОКРЛП(НаименовниеДебета + " " + НаименовниеКредита);


КонецФункции // ПолучитьНаименованиеСпособаОтражения()
//vvv
Функция ПодобратьСпособОтражения(СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СубконтоДт4)
	
	Запрос=Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпособыОтраженияЗарплатыВРеглУчете.Ссылка
	|ИЗ
	|	Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК СпособыОтраженияЗарплатыВРеглУчете
	|ГДЕ
	|	СпособыОтраженияЗарплатыВРеглУчете.СчетДт = &СчетДт
	|	И СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт1 = &СубконтоДт1
	|	И СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт2 = &СубконтоДт2
	|	И СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт3 = &СубконтоДт3
	|	И СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт4 = &СубконтоДт4
	|	И СпособыОтраженияЗарплатыВРеглУчете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда)";
	
	Запрос.УстановитьПараметр("СчетДт",СчетДТ);
	Запрос.УстановитьПараметр("СубконтоДт1",СубконтоДт1);
	Запрос.УстановитьПараметр("СубконтоДт2",СубконтоДт2);
	Запрос.УстановитьПараметр("СубконтоДт3",СубконтоДт3);
	Запрос.УстановитьПараметр("СубконтоДт4",СубконтоДт4);
	Выборка=Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СпособОтражения=Выборка.Ссылка;
	Иначе
		Отражение = Справочники.СпособыОтраженияЗарплатыВРеглУчете.СоздатьЭлемент();
		Отражение.СчетДт=СчетДТ;       
		Отражение.СубконтоДт1=СубконтоДт1;
		Отражение.СубконтоДт2=СубконтоДт2;
		Отражение.СубконтоДт3=СубконтоДт3;
		Отражение.СубконтоДт4=СубконтоДт4;
		Отражение.СчетКт=ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		Отражение.Наименование = ПолучитьНаименованиеСпособаОтражения(Отражение);
		Отражение.Записать();
		СпособОтражения=Отражение.Ссылка;
		Сообщить("Создан новый способ отражения "+СокрЛП(Отражение.Наименование));
	КонецЕсли;

	Возврат СпособОтражения;
	
КонецФункции
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

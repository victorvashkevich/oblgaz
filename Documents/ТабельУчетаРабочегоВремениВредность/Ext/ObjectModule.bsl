////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Предопределенные значения справочника "КлассификаторИспользованияРабочегоВремени"
Перем КлассификаторНочноеВремя, КлассификаторВечернееВремя;
Перем КлассификаторВыходныеДни;

// Значение  "ПоДням" перечисления ВидыУчетаВремени
Перем ВидУчетаВремениПоДням;

// Значение  "ПоЧасам" перечисления ВидыУчетаВремени
Перем ВидУчетаВремениПоЧасам;
Перем ВидУчетаВремениПоВечернимЧасам;
Перем ВидУчетаВремениПоНочнымЧасам;

// Массив строк "Первый", "Второй", "Третий" - приставки элементов табличной части документа.
Перем МассивПриставок;

// Значения справочника Классификатор использования рабочего времени. 
Перем КлассификаторЯвка;
Перем КлассификаторНочныеЧасы;
Перем КлассификаторВечерниеЧасы;
Перем КлассификаторПустаяСсылка;
// Индекс записи в наборе записей регистра сведений Графика
Перем ИндексЗаписиЯвка;

// Дата на которую происходит получение записи регистра.
Перем ДатаИндексаЗаписиЯвка;

// Количество часов работы которое проставляется для вида времени ПоДням
Перем ВремяЯвки;
Перем ВремяЗаДень;

// Структура для поиска строки таблицы значений
Перем СтруктураПоиска;

// список информационных сообщений, для вывода
Перем МассивСообщений;

// Массив видов времени из классификатора, по индексам которого сортируется
// таблица ОтработанноеВремяВЦеломЗаПериод
Перем ПорядокСортировкиВидовВремени;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Функция предназначена для автозаполнения документа
// если заполнен параметр сотрудники, то в табличную часть будут добавлены
// строки по данным сотрудникам.
Функция Автозаполнение(Запрос = Неопределено, Сотрудник = Неопределено, ТекущаяСтрокаТабличнойЧасти = Неопределено) Экспорт
	
	#Если Клиент Тогда
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		СтрокаВерхнегоУровняСообщений = ОбработкаКомментариев.ДобавитьСообщение("Автозаполнение документа", Перечисления.ВидыСообщений.Раздел);
		СтрокаВерхнегоУровняСообщений = Неопределено;
	#КонецЕсли 
	ТекстЗапросаДляОтладки = "";
	Если Запрос = Неопределено Тогда 
		
		ЗапросАвтоЗаполнения = Новый Запрос;
		Если Сотрудник = Неопределено Тогда
			ЗапросАвтоЗаполнения.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РаботникиОрганизаций.Сотрудник КАК Ссылка,
			|	РаботникиОрганизаций.Физлицо КАК Физлицо,
			|	ВЫБОР
			|		КОГДА ПлановыеНачисления.ПериодЗавершения <= &НачалоМесяца
			|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисления.Показатель1Завершения
			|		ИНАЧЕ ПлановыеНачисления.Показатель1
			|	КОНЕЦ КАК ПроцентВредности 
			|ПОМЕСТИТЬ ВТСписокРаботников
			|ИЗ
			|(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
			|	РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоМесяца, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизаций
			|ГДЕ
			|	ВЫБОР
			|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
			|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ТОГДА РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения
			|			ИНАЧЕ РаботникиОрганизаций.ОбособленноеПодразделение
			|		КОНЕЦ = &ОбособленноеПодразделение
			|	И (ВЫБОР
			|				КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
			|						И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|					ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
			|				ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
			|			КОНЕЦ В ИЕРАРХИИ (&Подразделение)
			|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
			//vvv
			|	И (ВЫБОР
			|				КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
			|						И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|					ТОГДА РаботникиОрганизаций.ТабельУчетаОрганизацииЗавершения
			|				ИНАЧЕ РаботникиОрганизаций.ТабельУчетаОрганизации
			|			КОНЕЦ = &ТабельУчета
			|			ИЛИ &ТабельУчета = ЗНАЧЕНИЕ(Справочник.ТабеляУчетаОрганизаций.ПустаяСсылка))
			//
			|	И ВЫБОР
			|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
			|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
			|			ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
			|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	РаботникиОрганизаций.Сотрудник,
			|	РаботникиОрганизаций.Сотрудник.Физлицо
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|ГДЕ
			|	РаботникиОрганизаций.Период > &НачалоМесяца
			|	И РаботникиОрганизаций.Период <= &КонецМесяца
			|	И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
			|	И РаботникиОрганизаций.ОбособленноеПодразделение = &ОбособленноеПодразделение
			|	И (РаботникиОрганизаций.ПодразделениеОрганизации В ИЕРАРХИИ (&Подразделение)
			|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
			//vvv
			|	И (РаботникиОрганизаций.ТабельУчетаОрганизации=&ТабельУчета
			|			ИЛИ &ТабельУчета = ЗНАЧЕНИЕ(Справочник.ТабеляУчетаОрганизаций.ПустаяСсылка))
			//
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Работники.Сотрудник,
			|	Работники.Сотрудник.Физлицо
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК Работники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
			|		ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
			|			И (ПериодыПерекрытия.Период > Работники.Период)
			|			И (ПериодыПерекрытия.Сотрудник = Работники.Сотрудник)
			|			И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
			|ГДЕ
			|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|	И Работники.ПериодЗавершения > &НачалоМесяца
			|	И Работники.ПериодЗавершения <= &КонецМесяца
			|	И Работники.Организация = &ГоловнаяОрганизация
			|	И Работники.ОбособленноеПодразделениеЗавершения = &ОбособленноеПодразделение
			|	И (Работники.ПодразделениеОрганизацииЗавершения В ИЕРАРХИИ (&Подразделение)
			|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
			//vvv
			|	И (Работники.ТабельУчетаОрганизации=&ТабельУчета
			|			ИЛИ &ТабельУчета = ЗНАЧЕНИЕ(Справочник.ТабеляУчетаОрганизаций.ПустаяСсылка))
			//
			|	И ПериодыПерекрытия.Период ЕСТЬ NULL) КАК РаботникиОрганизаций
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&ДатаАктуальности, ) КАК ПлановыеНачисления
			|		ПО РаботникиОрганизаций.Сотрудник = ПлановыеНачисления.Сотрудник
			|			И (ПлановыеНачисления.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоРазряда)))
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка"; 
			
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Ложь);
			ЗапросАвтоЗаполнения.УстановитьПараметр("ДатаАктуальности",КонецМесяца(ПериодРегистрации));
		Иначе
			ЗапросАвтоЗаполнения.Текст = 
			"ВЫБРАТЬ
			|	СотрудникиОрганизаций.Ссылка КАК Ссылка,
			|	СотрудникиОрганизаций.Физлицо,
			|	ВЫБОР
			|		КОГДА ПлановыеНачисления.ПериодЗавершения <= &НачалоМесяца
			|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисления.Показатель1Завершения
			|		ИНАЧЕ ПлановыеНачисления.Показатель1
			|	КОНЕЦ КАК ПроцентВредности
			|ПОМЕСТИТЬ ВТСписокРаботников
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК ПлановыеНачисления
			|			По СотрудникиОрганизаций.Ссылка = ПлановыеНачисления.Сотрудник			
			|			И (ПлановыеНачисления.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоРазряда)))
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка = &Сотрудник
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка";
			ЗапросАвтоЗаполнения.УстановитьПараметр("Сотрудник", Сотрудник);
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Истина);
			ЗапросАвтоЗаполнения.УстановитьПараметр("ДатаАктуальности",КонецМесяца(ПериодРегистрации));
		КонецЕсли;

	Иначе
		
		ЗапросАвтоЗаполнения = Запрос;
		ЗапросАвтоЗаполненияТекст = СтрЗаменить(ЗапросАвтоЗаполнения.Текст,"РаботникиОрганизации.Сотрудник КАК Сотрудник","РаботникиОрганизации.Сотрудник КАК Ссылка");
		ПозицияИндексирования = Найти(ЗапросАвтоЗаполненияТекст,"ИНДЕКСИРОВАТЬ");
		ЗапросАвтоЗаполнения.Текст = Лев(ЗапросАвтоЗаполненияТекст,ПозицияИндексирования - 1) + "
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
		ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Ложь);
		
	КонецЕсли;
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	ЗапросАвтоЗаполнения.УстановитьПараметр("ОбособленноеПодразделение", Организация);
	ЗапросАвтоЗаполнения.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
	//vvv
	ЗапросАвтоЗаполнения.УстановитьПараметр("ТабельУчета", ТабельУчетаОрганизации);
	//
	ЗапросАвтоЗаполнения.УстановитьПараметр("НачалоМесяца", ДатаНачалаПериода);
	ЗапросАвтоЗаполнения.УстановитьПараметр("КонецМесяца", ДатаОкончанияПериода);
	ЗапросАвтоЗаполнения.УстановитьПараметр("Месяц", ПериодРегистрации);
	
	ЗапросАвтоЗаполнения.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТекстЗапросаДляОтладки = ТекстЗапросаДляОтладки + ЗапросАвтоЗаполнения.Текст + " ; " + Символы.ПС;
	ЗапросАвтоЗаполнения.Выполнить();
	
	//ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоДням", ВидУчетаВремениПоДням);
	//ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоЧасам", ВидУчетаВремениПоЧасам);
	//ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоВечернимЧасам", Перечисления.ВидыУчетаВремени.ПоВечернимЧасам);
	//ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоНочнымЧасам", Перечисления.ВидыУчетаВремени.ПоНочнымЧасам);
	
	//ЗапросАвтоЗаполнения.УстановитьПараметр("КлассификаторЯ", Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
	//ЗапросАвтоЗаполнения.УстановитьПараметр("КлассификаторВЧ", КлассификаторВечернееВремя);
	//ЗапросАвтоЗаполнения.УстановитьПараметр("КлассификаторНЧ", КлассификаторНочноеВремя);
	//ЗапросАвтоЗаполнения.УстановитьПараметр("Выходной", Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни);
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	//ЗапросАвтоЗаполнения.УстановитьПараметр("СверхНормы", Перечисления.ВидыВремени.ОтработанноеСверхНормы);
	//ЗапросАвтоЗаполнения.УстановитьПараметр("ПустойКлассификатор", Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка());
	
	//ЗапросАвтоЗаполнения.УстановитьПараметр("ПоДням", Перечисления.ВидыУчетаВремени.ПоДням);
	//ЗапросАвтоЗаполнения.УстановитьПараметр("ПоЧасам", Перечисления.ВидыУчетаВремени.ПоЧасам);
	//ЗапросАвтоЗаполнения.УстановитьПараметр("ПоВечерним", Перечисления.ВидыУчетаВремени.ПоВечернимЧасам);
	//ЗапросАвтоЗаполнения.УстановитьПараметр("ПоНочным", Перечисления.ВидыУчетаВремени.ПоНочнымЧасам); 
	
	ВидыВремениУчитываемыеВВыходные = Новый Массив(2);
	ВидыВремениУчитываемыеВВыходные[0] = Перечисления.ВидыВремени.ОтработанноеСверхНормы;
	ВидыВремениУчитываемыеВВыходные[1] = Перечисления.ВидыВремени.ЦелодневноеНеотработанное;
	ЗапросАвтоЗаполнения.УстановитьПараметр("ВидыВремениУчитываемыеВВыходные", ВидыВремениУчитываемыеВВыходные);
	//ЗапросАвтоЗаполнения.УстановитьПараметр("ПустойГрафик", Справочники.ГрафикиРаботы.ПустаяСсылка());
	
	ГодПериода = Формат(Год(ПериодРегистрации), "ЧГ=4");
	МесяцПериода = Месяц(ПериодРегистрации);
	ТекстЗапроса = "ВЫБРАТЬ
	|	ДатаТабеля
	|	
	|ПОМЕСТИТЬ ВТДатыТабеля 
	|	ИЗ (
	|	ВЫБРАТЬ
	|	ДАТАВРЕМЯ(" + ГодПериода + ", " + МесяцПериода + " , " + День(ДатаНачалаПериода) + ") КАК ДатаТабеля
	|	";           
	Для НомерДня = День(ДатаНачалаПериода) + 1 По День(ДатаОкончанияПериода) Цикл
		ТекстЗапроса = ТекстЗапроса + 
		"ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|  ДАТАВРЕМЯ(" + ГодПериода + ", " + МесяцПериода + " ," + НомерДня + ")
		|	";
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + ") КАК ДатыТабеля";
	ЗапросАвтоЗаполнения.Текст = ТекстЗапроса;
	ТекстЗапросаДляОтладки = ТекстЗапросаДляОтладки + ЗапросАвтоЗаполнения.Текст + " ; " + Символы.ПС;
	ЗапросАвтоЗаполнения.Выполнить();
	
	ЗапросАвтоЗаполнения.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеНачисленияРаботниковОрганизаций.Период,
	|	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник,
	|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета,
	|	ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения,
	|	ПлановыеНачисленияРаботниковОрганизаций.Действие,
	|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения,
	|	ПлановыеНачисленияРаботниковОрганизаций.ДействиеЗавершения,
	|	ПлановыеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия
	|ПОМЕСТИТЬ ВТПлановыеНачисленияРаботниковОрганизаций
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|ГДЕ
	|	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник В
	|			(ВЫБРАТЬ
	|				ВТСписокРаботников.Ссылка
	|			ИЗ
	|				ВТСписокРаботников)
	|	И ПлановыеНачисленияРаботниковОрганизаций.Период <= КОНЕЦПЕРИОДА(&Месяц, МЕСЯЦ)
	|	И ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК КлассификаторВидаВремени,
	|	ПлановыеНачисления.ВидРасчета,
	|	ДатыПолученияВР.ДатаТабеля,
	|	ДатыПолученияВР.Сотрудник
	|ПОМЕСТИТЬ ВТПлановыеНачисленияСотрудников
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатыТабеля.ДатаТабеля КАК ДатаТабеля,
	|		МАКСИМУМ(ПлановыеНачисления.Период) КАК Период,
	|		ПлановыеНачисления.Сотрудник КАК Сотрудник
	|	ИЗ
	|		ВТДатыТабеля КАК ДатыТабеля
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
	|			ПО (ПлановыеНачисления.Период <= ДатыТабеля.ДатаТабеля)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДатыТабеля.ДатаТабеля,
	|		ПлановыеНачисления.Сотрудник) КАК ДатыПолученияВР
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
	|		ПО (ПлановыеНачисления.Период = ДатыПолученияВР.Период)
	|			И (ПлановыеНачисления.Сотрудник = ДатыПолученияВР.Сотрудник)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФактическийПериодДействия.Сотрудник,
	|	ФактическийПериодДействия.ВидРасчета,
	|	ФактическийПериодДействия.НормаЧасов,
	|	ФактическийПериодДействия.ВидУчетаВремени,
	|	ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидВремени,
	|	ФактическийПериодДействия.ВидРасчета.ВидВремени КАК ПеречислениеВидВремени,
	|	ФактическийПериодДействия.ГрафикРаботы КАК ГрафикРаботы,
	|	ФактическийПериодДействия.ПериодДействияНачало,
	|	ФактическийПериодДействия.ПериодРегистрации,
	|	ФактическийПериодДействия.Сторно,
	|	ФактическийПериодДействия.ПериодДействияКонец,
	|	ФактическийПериодДействия.ОтработаноЧасов,
	|	ФактическийПериодДействия.Регистратор
	|ПОМЕСТИТЬ ВТНефильтрованныеОсновныеНачисления
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТСписокРаботников.Ссылка КАК Сотрудник
	|				ИЗ
	|					ВТСписокРаботников)) КАК ФактическийПериодДействия
	|ГДЕ
	|	ФактическийПериодДействия.ПериодДействия = &Месяц
	|	И ((НЕ ФактическийПериодДействия.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы)))
	|			ИЛИ ФактическийПериодДействия.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыТабеля.ДатаТабеля КАК ДатаТабеля,
	|	ВЫБОР
	|		КОГДА Начисления.ВидРасчета ЕСТЬ NULL 
	|			ТОГДА ПлановыеНачисления.Сотрудник
	|		ИНАЧЕ Начисления.Сотрудник
	|	КОНЕЦ КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА Начисления.ВидРасчета ЕСТЬ NULL 
	|			ТОГДА NULL
	|		ИНАЧЕ Начисления.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА Начисления.ВидРасчета ЕСТЬ NULL 
	|			ТОГДА ПлановыеНачисления.ВидРасчета
	|		ИНАЧЕ Начисления.ВидРасчета
	|	КОНЕЦ КАК ВидРасчета,
	|	ВЫБОР
	|		КОГДА Начисления.ВидРасчета ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ПлановыеНачисления.ВидРасчетаИзмерение ЕСТЬ NULL 
	|						ТОГДА NULL
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|				КОНЕЦ
	|		ИНАЧЕ Начисления.ВидУчетаВремени
	|	КОНЕЦ КАК ВидУчетаВремени,
	|	ВЫБОР
	|		КОГДА Начисления.ВидРасчета ЕСТЬ NULL 
	|			ТОГДА ПлановыеНачисления.ВидРасчетаИзмерение.ВидВремени
	|		ИНАЧЕ Начисления.ВидВремени
	|	КОНЕЦ КАК ВидВремени,
	|	ВЫБОР
	|		КОГДА Начисления.ВидРасчета ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ПлановыеНачисления.ВидРасчетаИзмерение ЕСТЬ NULL 
	|						ТОГДА NULL
	|					ИНАЧЕ &НачалоМесяца
	|				КОНЕЦ
	|		ИНАЧЕ Начисления.ПериодДействияНачало
	|	КОНЕЦ КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА Начисления.ВидРасчета ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ПлановыеНачисления.ВидРасчетаИзмерение ЕСТЬ NULL 
	|						ТОГДА NULL
	|					ИНАЧЕ &КонецМесяца
	|				КОНЕЦ
	|		ИНАЧЕ Начисления.ПериодДействияКонец
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	ВЫБОР
	|		КОГДА Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)
	|			ТОГДА ВЫБОР
	|					КОГДА ДатыТабеля.ДатаТабеля = Начисления.ПериодДействияНачало
	|						ТОГДА Начисления.ОтработаноЧасов
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное)
	|			ТОГДА ВЫБОР
	|					КОГДА ДатыТабеля.ДатаТабеля = Начисления.ПериодДействияНачало
	|						ТОГДА Начисления.НормаЧасов
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПлановыеНачисления.ВидРасчетаИзмерение ЕСТЬ NULL 
	|					ТОГДА NULL
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ВремяЗаДень,
	|	ВЫБОР
	|		КОГДА Начисления.ВидРасчета ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ПлановыеНачисления.ВидРасчетаИзмерение ЕСТЬ NULL 
	|						ТОГДА NULL
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(ВнутрисменныеПрогулы.Часов, 0)
	|	КОНЕЦ КАК ЧасовОтклонение
	|ПОМЕСТИТЬ ВТОсновныеНачисления
	|ИЗ
	|	ВТДатыТабеля КАК ДатыТабеля
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК СотрудникиОрганизаций
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|			ПлановыеНачисления.Период КАК Период,
	|			ПлановыеНачисления.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
	|			ПлановыеНачисления.ВидРасчета КАК ВидРасчета,
	|			ПлановыеНачисления.Действие КАК Действие,
	|			ЕСТЬNULL(ОкончаниеПлановыхНачислений.Период, ПлановыеНачисления.ПериодЗавершения) КАК ПериодЗавершения,
	|			ЕСТЬNULL(ОкончаниеПлановыхНачислений.Действие, ПлановыеНачисления.ДействиеЗавершения) КАК ДействиеЗавершения
	|		ИЗ
	|			ВТСписокРаботников КАК СотрудникиОрганизаций
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
	|				ПО (ПлановыеНачисления.Сотрудник = СотрудникиОрганизаций.Ссылка)
	|					И (ПлановыеНачисления.ВидРасчетаИзмерение = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты))
	|					И (ВЫБОР
	|						КОГДА ПлановыеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|							ТОГДА &НачалоМесяца <= ПлановыеНачисления.Период
	|						КОГДА ПлановыеНачисления.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|							ТОГДА &КонецМесяца >= ПлановыеНачисления.Период
	|						ИНАЧЕ ПлановыеНачисления.Период <= &КонецМесяца
	|					КОНЕЦ)
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ОкончаниеПлановыхНачислений
	|				ПО (ОкончаниеПлановыхНачислений.Период <= &КонецМесяца)
	|					И (ОкончаниеПлановыхНачислений.Сотрудник = СотрудникиОрганизаций.Ссылка)
	|					И (ОкончаниеПлановыхНачислений.ВидРасчетаИзмерение = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты))
	|					И (ОкончаниеПлановыхНачислений.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить))
	|					И (ОкончаниеПлановыхНачислений.Период МЕЖДУ ПлановыеНачисления.Период И ПлановыеНачисления.ПериодЗавершения)) КАК ПлановыеНачисления
	|		ПО (ПлановыеНачисления.Сотрудник = СотрудникиОрганизаций.Ссылка)
	|			И (ВЫБОР
	|				КОГДА ПлановыеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|					ТОГДА ДатыТабеля.ДатаТабеля < ПлановыеНачисления.Период
	|				КОГДА ПлановыеНачисления.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ДатыТабеля.ДатаТабеля >= ПлановыеНачисления.Период
	|				ИНАЧЕ ДатыТабеля.ДатаТабеля МЕЖДУ ПлановыеНачисления.Период И ДОБАВИТЬКДАТЕ(ПлановыеНачисления.ПериодЗавершения, ДЕНЬ, -1)
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТДатыТабеля.ДатаТабеля КАК ДатаТабеля,
	|			Начисления.Сотрудник КАК Сотрудник,
	|			Начисления.ГрафикРаботы КАК ГрафикРаботы,
	|			Начисления.ВидРасчета КАК ВидРасчета,
	|			Начисления.ВидУчетаВремени КАК ВидУчетаВремени,
	|			Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|			Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|			Начисления.ПеречислениеВидВремени КАК ВидВремени,
	|			Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|			Начисления.НормаЧасов КАК НормаЧасов,
	|			Начисления.Регистратор КАК Регистратор
	|		ИЗ
	|			ВТДатыТабеля КАК ВТДатыТабеля
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТНефильтрованныеОсновныеНачисления КАК Начисления
	|				ПО (ВТДатыТабеля.ДатаТабеля МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|					И ((НЕ Начисления.Сторно))
	|					И (Начисления.Регистратор <> &ДокументСсылка)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТНефильтрованныеОсновныеНачисления КАК СторноНачисления
	|				ПО (ВТДатыТабеля.ДатаТабеля МЕЖДУ СторноНачисления.ПериодДействияНачало И СторноНачисления.ПериодДействияКонец)
	|					И (СторноНачисления.Сторно)
	|					И (СторноНачисления.Сотрудник = Начисления.Сотрудник)
	|					И (СторноНачисления.ВидРасчета = Начисления.ВидРасчета)
	|					И (СторноНачисления.ПериодРегистрации > Начисления.ПериодРегистрации)
	|		ГДЕ
	|			СторноНачисления.Сотрудник ЕСТЬ NULL 
	|			И Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
	|			И ((НЕ Начисления.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы)))
	|					ИЛИ Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)))) КАК Начисления
	|		ПО ДатыТабеля.ДатаТабеля = Начисления.ДатаТабеля
	|			И (СотрудникиОрганизаций.Ссылка = Начисления.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВнутрисменноеВремяРаботниковОрганизаций КАК ВнутрисменныеПрогулы
	|		ПО (ВнутрисменныеПрогулы.Сотрудник = Начисления.Сотрудник)
	|			И (ВнутрисменныеПрогулы.Период = ДатыТабеля.ДатаТабеля)
	|			И ((НЕ ВнутрисменныеПрогулы.ВидИспользованияРабочегоВремени.РабочееВремя))
	|			И (Начисления.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы)))
	|ГДЕ
	|	(НЕ ВЫБОР
	|				КОГДА Начисления.ВидРасчета ЕСТЬ NULL 
	|					ТОГДА ПлановыеНачисления.Сотрудник
	|				ИНАЧЕ Начисления.Сотрудник
	|			КОНЕЦ ЕСТЬ NULL )
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаТабеля,
	|	ВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостояниеРаботников.Сотрудник КАК Сотрудник,
	|	СостояниеРаботников.Период КАК Период,
	|	СостояниеРаботников.Состояние,
	|	СостояниеРаботников.ПериодЗавершения,
	|	СостояниеРаботников.СостояниеЗавершения,
	|	СостояниеРаботников.ПервичныйДокумент,
	|	СостояниеРаботников.ДатаНачалаДоп КАК ДатаНачалаДополнительногоОтпуска,
	|	СостояниеРаботников.ВидДополнительногоОтпуска
	|ПОМЕСТИТЬ ВТСостояниеРаботниковСрез
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних(
	|			&НачалоМесяца,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТСписокРаботников.Ссылка КАК Сотрудник
	|				ИЗ
	|					ВТСписокРаботников)) КАК СостояниеРаботников
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостояниеРаботников.Сотрудник КАК Сотрудник,
	|	&НачалоМесяца КАК Период,
	|	ВЫБОР
	|		КОГДА СостояниеРаботников.ПериодЗавершения <= &НачалоМесяца
	|				И СостояниеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА СостояниеРаботников.СостояниеЗавершения
	|		ИНАЧЕ СостояниеРаботников.Состояние
	|	КОНЕЦ КАК Состояние,
	|	СостояниеРаботников.ПервичныйДокумент,
	|	СостояниеРаботников.ДатаНачалаДополнительногоОтпуска,
	|	СостояниеРаботников.ВидДополнительногоОтпуска
	|ПОМЕСТИТЬ ВТСостояниеРаботников
	|ИЗ
	|	ВТСостояниеРаботниковСрез КАК СостояниеРаботников
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СостояниеРаботников.Сотрудник,
	|	СостояниеРаботников.ПериодЗавершения,
	|	СостояниеРаботников.СостояниеЗавершения,
	|	СостояниеРаботников.ПервичныйДокумент,
	|	СостояниеРаботников.ДатаНачалаДополнительногоОтпуска,
	|	СостояниеРаботников.ВидДополнительногоОтпуска
	|ИЗ
	|	ВТСостояниеРаботниковСрез КАК СостояниеРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковПроверка
	|		ПО (СостояниеРаботниковПроверка.Сотрудник = СостояниеРаботников.Сотрудник)
	|			И (СостояниеРаботниковПроверка.Период <= СостояниеРаботников.ПериодЗавершения)
	|			И (СостояниеРаботниковПроверка.Период > СостояниеРаботников.Период)
	|ГДЕ
	|	СостояниеРаботников.ПериодЗавершения >= &НачалоМесяца
	|	И СостояниеРаботников.ПериодЗавершения <= &КонецМесяца
	|	И СостояниеРаботниковПроверка.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СостояниеРаботников.Сотрудник,
	|	СостояниеРаботников.Период,
	|	СостояниеРаботников.Состояние,
	|	СостояниеРаботников.ПервичныйДокумент,
	|	СостояниеРаботников.ДатаНачалаДоп,
	|	СостояниеРаботников.ВидДополнительногоОтпуска
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК ВТСотрудники
	|		ПО СостояниеРаботников.Сотрудник = ВТСотрудники.Ссылка
	|ГДЕ
	|	СостояниеРаботников.Период > &НачалоМесяца
	|	И СостояниеРаботников.Период <= &КонецМесяца
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СостояниеРаботников.Сотрудник,
	|	СостояниеРаботников.ПериодЗавершения,
	|	СостояниеРаботников.СостояниеЗавершения,
	|	СостояниеРаботников.ПервичныйДокумент,
	|	СостояниеРаботников.ДатаНачалаДоп,
	|	СостояниеРаботников.ВидДополнительногоОтпуска
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК ВТСотрудники
	|		ПО СостояниеРаботников.Сотрудник = ВТСотрудники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК ПроверкаПерекрытияПериодовСостоянияРаботников
	|		ПО (ПроверкаПерекрытияПериодовСостоянияРаботников.Сотрудник = СостояниеРаботников.Сотрудник)
	|			И ((НЕ(ПроверкаПерекрытияПериодовСостоянияРаботников.Регистратор = СостояниеРаботников.Регистратор
	|					И ПроверкаПерекрытияПериодовСостоянияРаботников.НомерСтроки = СостояниеРаботников.НомерСтроки)))
	|			И (ПроверкаПерекрытияПериодовСостоянияРаботников.Период = СостояниеРаботников.ПериодЗавершения)
	|ГДЕ
	|	СостояниеРаботников.Период > &НачалоМесяца
	|	И СостояниеРаботников.Период <= &КонецМесяца
	|	И СостояниеРаботников.ПериодЗавершения <= &КонецМесяца
	|	И СостояниеРаботников.ПериодЗавершения > &НачалоМесяца
	|	И ПроверкаПерекрытияПериодовСостоянияРаботников.Сотрудник ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Основной.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА Основной.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Заболевание), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ТравмаНаПроизводстве), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ПоУходуЗаРебенком), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ПоУходуЗаВзрослым), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Карантин), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Протезирование), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ПособиеПриДолечивании))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Болезнь)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Командировка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ВынужденныйПрогул)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВынужденныйПрогул)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ГосударственныеОбязанности)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ГосударственныеОбязанности)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДополнительныеВыходныеДниОплачиваемые)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ДополнительныеВыходныеДниОплачиваемые)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Простой)
	//vvv
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДетскиеДни)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ДетскийДень)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебныйПК)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификации)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДополнительныеВыходныеДниОплачиваемыеКолДоговор)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ДопСвободныеДниКолДоговор)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.СоциальныйОтпускОплачиваемый)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.СоциальныйОтпуск)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ВыходнойЗаРанееОтработанноеВремя)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ВоенноУчебныеСборы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВоенноУчебныеСборы)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДонорскиеДни)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Донорство)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтстранениеОтРаботы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыБезОплаты)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ЗаболеваниеБезОплаты)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.БолезньБезОплаты)
	|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Медосмотр)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Медосмотр)
	//
	|	КОНЕЦ КАК ВидВремени,
	|	Основной.Период КАК ПериодНачало,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(Вспомогательный.Период) ЕСТЬ NULL 
	|			ТОГДА &КонецМесяца
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(Вспомогательный.Период), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКонец,
	|	ВЫБОР КОГДА
	|     (ВЫБОР
	|			КОГДА МИНИМУМ(Вспомогательный.Период) ЕСТЬ NULL 
	|				ТОГДА &КонецМесяца
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(Вспомогательный.Период), СЕКУНДА, -1)
	|			КОНЕЦ) > Основной.ДатаНачалаДополнительногоОтпуска
	|		ТОГДА Основной.ДатаНачалаДополнительногоОтпуска
	|	КОНЕЦ КАК ДатаНачалаДополнительногоОтпуска,
	|	ВЫБОР КОГДА
	|     (ВЫБОР
	|			КОГДА МИНИМУМ(Вспомогательный.Период) ЕСТЬ NULL 
	|				ТОГДА &КонецМесяца
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(Вспомогательный.Период), СЕКУНДА, -1)
	|			КОНЕЦ) > Основной.ДатаНачалаДополнительногоОтпуска
	|		ТОГДА Основной.ВидДополнительногоОтпуска
	|	КОНЕЦ КАК ВидДополнительногоОтпуска
	|ПОМЕСТИТЬ ВТСостояниеСотрудниковБезДополнительныхОтпусков
	|ИЗ
	|	ВТСостояниеРаботников КАК Основной
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеРаботников КАК Вспомогательный
	|		ПО (Вспомогательный.Сотрудник = Основной.Сотрудник)
	|			И (Вспомогательный.Период > Основной.Период)
	|ГДЕ
	|	Основной.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает)
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.Сотрудник,
	|	Основной.Состояние,
	|	Основной.Период,
	|	Основной.ДатаНачалаДополнительногоОтпуска,
	|	Основной.ВидДополнительногоОтпуска
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодНачало
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостояниеСотрудниковБезДополнительныхОтпусков.Сотрудник,
	|	СостояниеСотрудниковБезДополнительныхОтпусков.ВидВремени,
	|	СостояниеСотрудниковБезДополнительныхОтпусков.ПериодНачало,
	|	ВЫБОР
	|		КОГДА СостояниеСотрудниковБезДополнительныхОтпусков.ВидДополнительногоОтпуска ЕСТЬ NULL 
	|		ИЛИ (СостояниеСотрудниковБезДополнительныхОтпусков.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка))
	|			ТОГДА СостояниеСотрудниковБезДополнительныхОтпусков.ПериодКонец
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(СостояниеСотрудниковБезДополнительныхОтпусков.ДатаНачалаДополнительногоОтпуска, СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКонец
	|ПОМЕСТИТЬ ВТСостояниеСотрудников
	|ИЗ
	|	ВТСостояниеСотрудниковБезДополнительныхОтпусков КАК СостояниеСотрудниковБезДополнительныхОтпусков
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СостояниеСотрудниковБезДополнительныхОтпусков.Сотрудник,
	|	СостояниеСотрудниковБезДополнительныхОтпусков.ВидДополнительногоОтпуска.ОбозначениеВТабелеУчетаРабочегоВремени,
	|	СостояниеСотрудниковБезДополнительныхОтпусков.ДатаНачалаДополнительногоОтпуска,
	|	СостояниеСотрудниковБезДополнительныхОтпусков.ПериодКонец
	|ИЗ
	|	ВТСостояниеСотрудниковБезДополнительныхОтпусков КАК СостояниеСотрудниковБезДополнительныхОтпусков
	|ГДЕ
	|	(НЕ СостояниеСотрудниковБезДополнительныхОтпусков.ВидДополнительногоОтпуска ЕСТЬ NULL )
	|	И (СостояниеСотрудниковБезДополнительныхОтпусков.ВидДополнительногоОтпуска <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Месяц КАК Месяц,
	|	ГрафикиРаботыПоВидамВремени.Дата КАК Дата,
	|	ГрафикиРаботыПоВидамВремени.План КАК План,
	|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначение,
	|	ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение,
	|	ГрафикиРаботыПоВидамВремени.Документ
	|ПОМЕСТИТЬ ВТГрафикиРаботыПоВидамВремени
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &НачалоМесяца
	|					И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботыЗавершения
	|			ИНАЧЕ РаботникиОрганизацийСрезПоследних.ГрафикРаботы
	|		КОНЕЦ КАК ГрафикРаботы
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&НачалоМесяца,
	|				Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТСписокРаботников.Ссылка
	|					ИЗ
	|						ВТСписокРаботников)) КАК РаботникиОрганизацийСрезПоследних
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &НачалоМесяца
	|						И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботыЗавершения
	|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.ГрафикРаботы
	|			КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РаботникиОрганизаций.ГрафикРаботы
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|	ГДЕ
	|		РаботникиОрганизаций.Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТСписокРаботников.Ссылка
	|				ИЗ
	|					ВТСписокРаботников)
	|		И РаботникиОрганизаций.Период > &НачалоМесяца
	|		И РаботникиОрганизаций.Период <= &КонецМесяца
	|		И РаботникиОрганизаций.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Работники.ГрафикРаботыЗавершения
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК Работники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|			ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|				И (ПериодыПерекрытия.Период > Работники.Период)
	|				И (ПериодыПерекрытия.Сотрудник = Работники.Сотрудник)
	|	ГДЕ
	|		Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		И Работники.ПериодЗавершения > &НачалоМесяца
	|		И Работники.ПериодЗавершения <= &КонецМесяца
	|		И Работники.ГрафикРаботыЗавершения <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|		И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|		И Работники.Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТСписокРаботников.Ссылка
	|				ИЗ
	|					ВТСписокРаботников)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВыбранныеСотрудники.Ссылка
	|	ИЗ
	|		ВТСписокРаботников КАК ВыбранныеСотрудники) КАК ГрафикиРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы)
	|			И (ГрафикиРаботыПоВидамВремени.Документ <> &ДокументСсылка)
	|			И (ГрафикиРаботыПоВидамВремени.Документ <> ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениВредность.ПустаяСсылка))
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
	|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца)
	|			И ((НЕ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL ))
	|ГДЕ
	|	(НЕ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL )
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГрафикРаботы,
	|	Месяц,
	|	Дата,
	|	План,
	|	ВидУчетаВремени";
	ТекстЗапросаДляОтладки = ТекстЗапросаДляОтладки + ЗапросАвтоЗаполнения.Текст + " ; " + Символы.ПС;
	ЗапросАвтоЗаполнения.Выполнить();
	
	Если НЕ ПодразделениеОрганизации.Пустая() Тогда
		ЗапросАвтоЗаполнения.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
		ЗапросАвтоЗаполнения.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
		|				И РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
		|			ТОГДА РаботникиОрганизаций.ПериодЗавершения
		|		ИНАЧЕ РаботникиОрганизаций.Период
		|	КОНЕЦ КАК Период,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
		|				И РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
		|			ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
		|		ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТКадровыеПеремещенияРаботниковОрганизаций
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&НачалоМесяца,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					ВТСписокРаботников.Ссылка
		|				ИЗ
		|					ВТСписокРаботников)) КАК РаботникиОрганизаций
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Период,
		|	РаботникиОрганизаций.ПодразделениеОрганизации,
		|	РаботникиОрганизаций.Сотрудник
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Сотрудник В
		|			(ВЫБРАТЬ
		|				ВТСписокРаботников.Ссылка
		|			ИЗ
		|				ВТСписокРаботников)
		|	И РаботникиОрганизаций.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.ПериодЗавершения,
		|	РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения,
		|	РаботникиОрганизаций.Сотрудник
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
		|		ПО (ПериодыПерекрытия.Период <= РаботникиОрганизаций.ПериодЗавершения)
		|			И (ПериодыПерекрытия.Период > РаботникиОрганизаций.Период)
		|			И РаботникиОрганизаций.Сотрудник = ПериодыПерекрытия.Сотрудник
		|ГДЕ
		|	РаботникиОрганизаций.Сотрудник В
		|			(ВЫБРАТЬ
		|				ВТСписокРаботников.Ссылка
		|			ИЗ
		|				ВТСписокРаботников)
		|	И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И РаботникиОрганизаций.ПериодЗавершения > &НачалоМесяца
		|	И РаботникиОрганизаций.ПериодЗавершения <= &КонецМесяца
		|	И ПериодыПерекрытия.Период ЕСТЬ NULL 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Период,
		|	ПодразделениеОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыПеремещенийРаботников.Сотрудник КАК Сотрудник,
		|	ДатыПеремещенийРаботников.ДатаТабеля КАК ДатаТабеля
		|ПОМЕСТИТЬ ВТПодразделенияСотрудников
		|ИЗ
		|	(ВЫБРАТЬ
		|		КадровыеПеремещенияРаботников.Сотрудник КАК Сотрудник,
		|		ДатыТабеля.ДатаТабеля КАК ДатаТабеля,
		|		МАКСИМУМ(КадровыеПеремещенияРаботников.Период) КАК ДатаПеремещения
		|	ИЗ
		|		ВТДатыТабеля КАК ДатыТабеля
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеПеремещенияРаботниковОрганизаций КАК КадровыеПеремещенияРаботников
		|			ПО ДатыТабеля.ДатаТабеля >= КадровыеПеремещенияРаботников.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		КадровыеПеремещенияРаботников.Сотрудник,
		|		ДатыТабеля.ДатаТабеля) КАК ДатыПеремещенийРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеПеремещенияРаботниковОрганизаций КАК ПодразделенияРаботников
		|		ПО ДатыПеремещенийРаботников.ДатаПеремещения = ПодразделенияРаботников.Период
		|			И ДатыПеремещенийРаботников.Сотрудник = ПодразделенияРаботников.Сотрудник
		|ГДЕ
		|	ПодразделенияРаботников.ПодразделениеОрганизации В ИЕРАРХИИ(&ПодразделениеОрганизации)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаТабеля";
		ТекстЗапросаДляОтладки = ТекстЗапросаДляОтладки + ЗапросАвтоЗаполнения.Текст + " ; " + Символы.ПС;
		ЗапросАвтоЗаполнения.Выполнить();
	КонецЕсли;
	
	//vvv
	Если НЕ ТабельУчетаОрганизации.Пустая() Тогда
		ЗапросАвтоЗаполнения.УстановитьПараметр("ТабельУчетаОрганизации", ТабельУчетаОрганизации);
		ЗапросАвтоЗаполнения.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
		|				И РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
		|			ТОГДА РаботникиОрганизаций.ПериодЗавершения
		|		ИНАЧЕ РаботникиОрганизаций.Период
		|	КОНЕЦ КАК Период,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
		|				И РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
		|			ТОГДА РаботникиОрганизаций.ТабельУчетаОрганизацииЗавершения
		|		ИНАЧЕ РаботникиОрганизаций.ТабельУчетаОрганизации
		|	КОНЕЦ КАК ТабельУчетаОрганизации,
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТКадровыеПеремещенияРаботниковОрганизацийДляТабелей
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&НачалоМесяца,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					ВТСписокРаботников.Ссылка
		|				ИЗ
		|					ВТСписокРаботников)) КАК РаботникиОрганизаций
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Период,
		|	РаботникиОрганизаций.ТабельУчетаОрганизации,
		|	РаботникиОрганизаций.Сотрудник
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Сотрудник В
		|			(ВЫБРАТЬ
		|				ВТСписокРаботников.Ссылка
		|			ИЗ
		|				ВТСписокРаботников)
		|	И РаботникиОрганизаций.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.ПериодЗавершения,
		|	РаботникиОрганизаций.ТабельУчетаОрганизацииЗавершения,
		|	РаботникиОрганизаций.Сотрудник
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
		|		ПО (ПериодыПерекрытия.Период <= РаботникиОрганизаций.ПериодЗавершения)
		|			И (ПериодыПерекрытия.Период > РаботникиОрганизаций.Период)
		|			И РаботникиОрганизаций.Сотрудник = ПериодыПерекрытия.Сотрудник
		|ГДЕ
		|	РаботникиОрганизаций.Сотрудник В
		|			(ВЫБРАТЬ
		|				ВТСписокРаботников.Ссылка
		|			ИЗ
		|				ВТСписокРаботников)
		|	И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И РаботникиОрганизаций.ПериодЗавершения > &НачалоМесяца
		|	И РаботникиОрганизаций.ПериодЗавершения <= &КонецМесяца
		|	И ПериодыПерекрытия.Период ЕСТЬ NULL 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Период,
		|	ТабельУчетаОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыПеремещенийРаботников.Сотрудник КАК Сотрудник,
		|	ДатыПеремещенийРаботников.ДатаТабеля КАК ДатаТабеля
		|ПОМЕСТИТЬ ВТТабеляСотрудников
		|ИЗ
		|	(ВЫБРАТЬ
		|		КадровыеПеремещенияРаботников.Сотрудник КАК Сотрудник,
		|		ДатыТабеля.ДатаТабеля КАК ДатаТабеля,
		|		МАКСИМУМ(КадровыеПеремещенияРаботников.Период) КАК ДатаПеремещения
		|	ИЗ
		|		ВТДатыТабеля КАК ДатыТабеля
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеПеремещенияРаботниковОрганизацийДляТабелей КАК КадровыеПеремещенияРаботников
		|			ПО ДатыТабеля.ДатаТабеля >= КадровыеПеремещенияРаботников.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		КадровыеПеремещенияРаботников.Сотрудник,
		|		ДатыТабеля.ДатаТабеля) КАК ДатыПеремещенийРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеПеремещенияРаботниковОрганизацийДляТабелей КАК ТабеляРаботников
		|		ПО ДатыПеремещенийРаботников.ДатаПеремещения = ТабеляРаботников.Период
		|			И ДатыПеремещенийРаботников.Сотрудник = ТабеляРаботников.Сотрудник
		|ГДЕ
		|	ТабеляРаботников.ТабельУчетаОрганизации=&ТабельУчетаОрганизации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаТабеля";
		ТекстЗапросаДляОтладки = ТекстЗапросаДляОтладки + ЗапросАвтоЗаполнения.Текст + " ; " + Символы.ПС;
		ЗапросАвтоЗаполнения.Выполнить();
	КонецЕсли;
	//
	
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
		
		
		ЗапросАвтоЗаполнения.Текст = 
		"ВЫБРАТЬ
		|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
		|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК Часов,
		|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК Дней
		|ПОМЕСТИТЬ ВТНормыРаботыПоОбщемуГрафику
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&КонецМесяца,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					ВТСписокРаботников.Ссылка
		|				ИЗ
		|					ВТСписокРаботников)) КАК РаботникиОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ВЫБОР
		|				КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &НачалоМесяца
		|						И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботыЗавершения
		|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.ГрафикРаботы
		|			КОНЕЦ)
		|			И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
		|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца)
		|			И (ГрафикиРаботыПоВидамВремени.План)
		|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
		|
		|СГРУППИРОВАТЬ ПО
		|	РаботникиОрганизацийСрезПоследних.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТОсновныеНачисления.ДатаТабеля,
		|	ВТОсновныеНачисления.Сотрудник,
		|	ВТОсновныеНачисления.ГрафикРаботы,
		|	ВТОсновныеНачисления.ВидРасчета,
		|	ВТОсновныеНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ОбозначениеВТабелеУчетаРабочегоВремени,
		|	ВТОсновныеНачисления.ВидВремени,
		|	ВТОсновныеНачисления.ПериодДействияНачало,
		|	ВТОсновныеНачисления.ПериодДействияКонец,
		|	ВТОсновныеНачисления.ВремяЗаДень,
		|	ВТОсновныеНачисления.ВидУчетаВремени,
		|	ВТОсновныеНачисления.ЧасовОтклонение
		|ПОМЕСТИТЬ ВТОтредактированныеНачисления
		|ИЗ
		|	ВТОсновныеНачисления КАК ВТОсновныеНачисления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТОсновныеНачисления.ДатаТабеля,
		|	ВТОсновныеНачисления.Сотрудник,
		|	ВТОсновныеНачисления.ГрафикРаботы,
		|	""ПланируемаяЯвка"",
		|	ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа),
		|	ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы),
		|	ВТОсновныеНачисления.ПериодДействияНачало,
		|	ВТОсновныеНачисления.ПериодДействияКонец,
		|	ВТОсновныеНачисления.ВремяЗаДень,
		|	ВТОсновныеНачисления.ВидУчетаВремени,
		|	ВЫБОР
		|		КОГДА ВТОсновныеНачисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное)
		|			ТОГДА ВТОсновныеНачисления.ВремяЗаДень
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	ВТОсновныеНачисления КАК ВТОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеНачисления КАК Явки
		|		ПО (Явки.ДатаТабеля = ВТОсновныеНачисления.ДатаТабеля)
		|			И (Явки.Сотрудник = ВТОсновныеНачисления.Сотрудник)
		|			И (Явки.ГрафикРаботы = ВТОсновныеНачисления.ГрафикРаботы
		|				ИЛИ Явки.ГрафикРаботы = ВТОсновныеНачисления.Сотрудник)
		|			И (Явки.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|		ПО (ГрафикиРаботы.ГрафикРаботы = ВТОсновныеНачисления.ГрафикРаботы)
		|			И (ГрафикиРаботы.Дата = ВТОсновныеНачисления.ДатаТабеля)
		|			И (ГрафикиРаботы.ВидУчетаВремени = ВТОсновныеНачисления.ВидУчетаВремени)
		|ГДЕ
		|	Явки.Сотрудник ЕСТЬ NULL 
		|	И ГрафикиРаботы.ОсновноеЗначение > 0
		|	И ВТОсновныеНачисления.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное))";
		ТекстЗапросаДляОтладки = ТекстЗапросаДляОтладки + ЗапросАвтоЗаполнения.Текст + " ; " + Символы.ПС;
		ЗапросАвтоЗаполнения.Выполнить();
		
		// Заполнение за целый период.
		ЗапросАвтоЗаполненияТекст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	ЕСТЬNULL(ПосчитанноеВремя.Дней, 0) КАК Дней,
		|	ЕСТЬNULL(ПосчитанноеВремя.Часов, 0) КАК Часов,
		|	ЕСТЬNULL(ПосчитанноеВремя.ЧасовВечерних, 0) КАК ЧасовВечерних,
		|	ЕСТЬNULL(ПосчитанноеВремя.ЧасовНочных, 0) КАК ЧасовНочных,
		|	ПосчитанноеВремя.ВидВремени КАК ВидВремени
		|ИЗ
		|	ВТСписокРаботников КАК СотрудникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|ВЫБОР 
		|		КОГДА ПосчитаннаяНормаВремени.ОбозначениеВТабелеУчетаРабочегоВремени.РабочееВремя = ИСТИНА
		|		И ПосчитаннаяНормаВремени.ИспользоватьДанныеСводногоТабеля
		|		И НормыРаботыПоОбщемуГрафику.Дней = ПосчитаннаяНормаВремени.ОсновноеЗначениеПоДням
		|И НЕ ПосчитаннаяНормаВремени.ОбозначениеВТабелеУчетаРабочегоВремени В 
		|			(ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Праздники),
		|			 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные))
		|			ТОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.Дней, ПосчитаннаяНормаВремени.ОсновноеЗначениеПоДням)
		|			ИНАЧЕ ПосчитаннаяНормаВремени.ОсновноеЗначениеПоДням КОНЕЦ КАК Дней,
		|	ВЫБОР 
		|		КОГДА ПосчитаннаяНормаВремени.ОбозначениеВТабелеУчетаРабочегоВремени.РабочееВремя = ИСТИНА
		|		И ПосчитаннаяНормаВремени.ИспользоватьДанныеСводногоТабеля
		|		И НормыРаботыПоОбщемуГрафику.Часов = ПосчитаннаяНормаВремени.ОсновноеЗначениеПоЧасам
		|И НЕ ПосчитаннаяНормаВремени.ОбозначениеВТабелеУчетаРабочегоВремени В 
		|			(ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Праздники),
		|			 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные))
		|			ТОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.Часов, ПосчитаннаяНормаВремени.ОсновноеЗначениеПоЧасам)
		|			ИНАЧЕ ПосчитаннаяНормаВремени.ОсновноеЗначениеПоЧасам КОНЕЦ КАК Часов,
		|	ВЫБОР 
		|		КОГДА ПосчитаннаяНормаВремени.ОбозначениеВТабелеУчетаРабочегоВремени.РабочееВремя = ИСТИНА
		|		И ПосчитаннаяНормаВремени.ИспользоватьДанныеСводногоТабеля
		|И НЕ ПосчитаннаяНормаВремени.ОбозначениеВТабелеУчетаРабочегоВремени В 
		|			(ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Праздники),
		|			 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные))
		|			ТОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ЧасовВечерних, ПосчитаннаяНормаВремени.ОсновноеЗначениеПоВечерним)
		|			ИНАЧЕ ПосчитаннаяНормаВремени.ОсновноеЗначениеПоВечерним КОНЕЦ КАК ЧасовВечерних,
		|	ВЫБОР 
		|		КОГДА ПосчитаннаяНормаВремени.ОбозначениеВТабелеУчетаРабочегоВремени.РабочееВремя = ИСТИНА
		|		И ПосчитаннаяНормаВремени.ИспользоватьДанныеСводногоТабеля
		|И НЕ ПосчитаннаяНормаВремени.ОбозначениеВТабелеУчетаРабочегоВремени В 
		|			(ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Праздники),
		|			 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные))
		|			ТОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ЧасовНочных, ПосчитаннаяНормаВремени.ОсновноеЗначениеПоНочным)
		|			ИНАЧЕ ПосчитаннаяНормаВремени.ОсновноеЗначениеПоНочным КОНЕЦ КАК ЧасовНочных,
		|	
		|
		|			ПосчитаннаяНормаВремени.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидВремени
		|		ИЗ
		|			ВТСписокРаботников КАК СотрудникиОрганизаций
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ДниСотрудников.Сотрудник КАК Сотрудник,
		|					СУММА(ВЫБОР
		|							КОГДА ДневныеНеявки.ВидВремени = 1
		|								ТОГДА 0
		|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|								ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ДополнительноеЗначение, ОбщиеГрафики.ДополнительноеЗначение)
		|						КОНЕЦ) КАК ОсновноеЗначениеПоДням,
		|					СУММА(ВЫБОР
		|							КОГДА (НЕ ДневныеНеявки.ВремяЗаДень ЕСТЬ NULL )
		|									И ДневныеНеявки.ВидРасчета <> ""ПланируемаяЯвка""
		|									И ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|									И ДневныеНеявки.ВремяЗаДень > 0
		|								ТОГДА ДневныеНеявки.ВремяЗаДень
		|							КОГДА ДневныеНеявки.ВидРасчета = ""ПланируемаяЯвка""
		|									И ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|								ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) - ЕСТЬNULL(ДневныеНеявки.ЧасовОтклонение, 0)
		|							КОГДА ДневныеНеявки.ВидВремени = 1
		|									И ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|								ТОГДА ЕСТЬNULL(ДневныеНеявки.ВремяЗаДень, 0)
		|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|								ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) - ЕСТЬNULL(ДневныеНеявки.ВремяЗаДень, 0) - ЕСТЬNULL(ДневныеНеявки.ЧасовОтклонение, 0)
		|						КОНЕЦ) КАК ОсновноеЗначениеПоЧасам,
		|					СУММА(ВЫБОР
		|							КОГДА (НЕ ДневныеНеявки.Сотрудник ЕСТЬ NULL )
		|									И ДневныеНеявки.ВидРасчета <> ""ПланируемаяЯвка""
		|								ТОГДА 0
		|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
		|								И ВТСостояниеСотрудников.ВидВремени ЕСТЬ NULL
		|								ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение)
		|						КОНЕЦ) КАК ОсновноеЗначениеПоВечерним,
		|					СУММА(ВЫБОР
		|							КОГДА (НЕ ДневныеНеявки.Сотрудник ЕСТЬ NULL )
		|									И ДневныеНеявки.ВидРасчета <> ""ПланируемаяЯвка""
		|								ТОГДА 0
		|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
		|								И ВТСостояниеСотрудников.ВидВремени ЕСТЬ NULL
		|								ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение)
		|						КОНЕЦ) КАК ОсновноеЗначениеПоНочным,
		|					КОЛИЧЕСТВО(ВведенныеТабеля.ГрафикРаботы) КАК ВведенныеТабеля,
		|					ВЫБОР
		|						КОГДА ДневныеНеявки.ВидРасчета = ""ПланируемаяЯвка""
		|							ТОГДА  ДневныеНеявки.ОбозначениеВТабелеУчетаРабочегоВремени
		|						ИНАЧЕ ЕСТЬNULL(ДневныеНеявки.ОбозначениеВТабелеУчетаРабочегоВремени, ЕСТЬNULL(ВТСостояниеСотрудников.ВидВремени, ПлановыеНачисленияСотрудников.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени))
		|					КОНЕЦ КАК ОбозначениеВТабелеУчетаРабочегоВремени,
		|					ВЫБОР
		|						КОГДА ДневныеНеявки.ВидРасчета ЕСТЬ NULL
		|						ИЛИ ДневныеНеявки.ВидРасчета = ""ПланируемаяЯвка""
		|						ТОГДА Истина ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ИспользоватьДанныеСводногоТабеля
		|				ИЗ
		|					(ВЫБРАТЬ
		|						ДатыПериода.ДатаТабеля КАК Дата,
		|						РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|						МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаИзменения
		|					ИЗ
		|						ВТДатыТабеля КАК ДатыПериода
		|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|							ПО (РаботникиОрганизаций.Сотрудник В
		|									(ВЫБРАТЬ
		|										ВТСписокРаботников.Ссылка
		|									ИЗ
		|										ВТСписокРаботников))
		|								И (РаботникиОрганизаций.Период <= ДатыПериода.ДатаТабеля)
		|					
		|					СГРУППИРОВАТЬ ПО
		|						РаботникиОрганизаций.Сотрудник,
		|						ДатыПериода.ДатаТабеля) КАК ДниСотрудников
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|						ПО (РаботникиОрганизаций.Сотрудник = ДниСотрудников.Сотрудник)
		|							И (РаботникиОрганизаций.Период = ДниСотрудников.ДатаИзменения)
		|						ЛЕВОЕ СОЕДИНЕНИЕ ВТОтредактированныеНачисления КАК ДневныеНеявки
		|						ПО (ДневныеНеявки.Сотрудник = ДниСотрудников.Сотрудник)
		|							И ДниСотрудников.Дата = ДневныеНеявки.ДатаТабеля
		|						ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ВведенныеТабеля
		|						ПО (ВведенныеТабеля.ГрафикРаботы = ДниСотрудников.Сотрудник)
		|							И ((НЕ ВведенныеТабеля.План))
		|							И (ВведенныеТабеля.Документ <> &ДокументСсылка)
		|							И (ВведенныеТабеля.Документ <> ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениВредность.ПустаяСсылка))
		|							И (ВведенныеТабеля.Дата = ДниСотрудников.Дата)
		|							И (ВведенныеТабеля.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
		//|							И (ВведенныеТабеля.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениВредность)
		|
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеСотрудников
		|				ПО ВТСостояниеСотрудников.Сотрудник = ДниСотрудников.Сотрудник
		|					И ДниСотрудников.Дата МЕЖДУ ВТСостояниеСотрудников.ПериодНачало И ВТСостояниеСотрудников.ПериодКонец
		|
		|						ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ИндивидуальныеГрафики
		|						ПО (ИндивидуальныеГрафики.ГрафикРаботы = ДниСотрудников.Сотрудник)
		|							И (ИндивидуальныеГрафики.План)
		|							И (ИндивидуальныеГрафики.Дата = ДниСотрудников.Дата)
		|							И (ИндивидуальныеГрафики.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)))
		|							И (ИндивидуальныеГрафики.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации)
		|							И (ДневныеНеявки.ВидРасчета ЕСТЬ NULL 
		|								ИЛИ ДневныеНеявки.ВидРасчета = ""ПланируемаяЯвка""
		|								ИЛИ ИндивидуальныеГрафики.ВидУчетаВремени = ДневныеНеявки.ВидУчетаВремени
		|								ИЛИ ИндивидуальныеГрафики.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|									И ДневныеНеявки.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
		|						ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ОбщиеГрафики
		|						ПО (ОбщиеГрафики.ГрафикРаботы = ВЫБОР
		|								КОГДА РаботникиОрганизаций.ПериодЗавершения <= ДниСотрудников.Дата
		|										И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|									ТОГДА РаботникиОрганизаций.ГрафикРаботыЗавершения
		|								ИНАЧЕ РаботникиОрганизаций.ГрафикРаботы
		|							КОНЕЦ)
		|							И (ОбщиеГрафики.План)
		|							И (ОбщиеГрафики.Дата = ДниСотрудников.Дата)
		|							И (ОбщиеГрафики.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)))
		|							И (ИндивидуальныеГрафики.ГрафикРаботы ЕСТЬ NULL )
		|							И (ДневныеНеявки.ВидРасчета ЕСТЬ NULL 
		|								ИЛИ ДневныеНеявки.ВидРасчета = ""ПланируемаяЯвка""
		|								ИЛИ ОбщиеГрафики.ВидУчетаВремени = ДневныеНеявки.ВидУчетаВремени
		|								ИЛИ ОбщиеГрафики.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|									И ДневныеНеявки.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
		|						ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСотрудников КАК ПлановыеНачисленияСотрудников
		|						ПО (ПлановыеНачисленияСотрудников.Сотрудник = ДниСотрудников.Сотрудник)
		|							И (ПлановыеНачисленияСотрудников.ДатаТабеля = ДниСотрудников.Дата)
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийУвольнения
		|						ПО (РаботникиОрганизацийУвольнения.Сотрудник = ДниСотрудников.Сотрудник)
		|							И (РаботникиОрганизацийУвольнения.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))" +
		?(ПодразделениеОрганизации.Пустая(), "", "	ЛЕВОЕ СОЕДИНЕНИЕ ВТПодразделенияСотрудников КАК ПодразделенияСотрудников
		|	ПО
		|	ПодразделенияСотрудников.Сотрудник = ДниСотрудников.Сотрудник
		|	И ПодразделенияСотрудников.ДатаТабеля = ДниСотрудников.Дата ") +
		"				ГДЕ
		|					(РаботникиОрганизацийУвольнения.Период ЕСТЬ NULL 
		|							ИЛИ РаботникиОрганизацийУвольнения.Период > ДниСотрудников.Дата)" + 
		?(ПодразделениеОрганизации.Пустая(), "", "	И НЕ ПодразделенияСотрудников.Сотрудник ЕСТЬ NULL") +
		"					И (НЕ(ИндивидуальныеГрафики.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам))
		|								И ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, 0) = 0
		|								И (ОбщиеГрафики.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам))
		|									И ЕСТЬNULL(ОбщиеГрафики.ОсновноеЗначение, 0) = 0)))
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ДниСотрудников.Сотрудник,
		|					ВЫБОР
		|						КОГДА ДневныеНеявки.ВидРасчета = ""ПланируемаяЯвка""
		|							ТОГДА  ДневныеНеявки.ОбозначениеВТабелеУчетаРабочегоВремени
		|						ИНАЧЕ ЕСТЬNULL(ДневныеНеявки.ОбозначениеВТабелеУчетаРабочегоВремени, ЕСТЬNULL(ВТСостояниеСотрудников.ВидВремени, ПлановыеНачисленияСотрудников.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени))
		|					КОНЕЦ, ВЫБОР
		|				КОГДА ДневныеНеявки.ВидРасчета ЕСТЬ NULL
		|				ИЛИ ДневныеНеявки.ВидРасчета = ""ПланируемаяЯвка""
		|				ТОГДА Истина ИНАЧЕ ЛОЖЬ КОНЕЦ ) КАК ПосчитаннаяНормаВремени
		|				ПО (ПосчитаннаяНормаВремени.Сотрудник = СотрудникиОрганизаций.Ссылка)
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
		|				ПО (СводныеИндивидуальныеГрафики.Сотрудник = СотрудникиОрганизаций.Ссылка)
		|					И (СводныеИндивидуальныеГрафики.Месяц = &Месяц)
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТНормыРаботыПоОбщемуГрафику КАК НормыРаботыПоОбщемуГрафику
		|					ПО  НормыРаботыПоОбщемуГрафику.Сотрудник = СотрудникиОрганизаций.Ссылка
		|				    И НЕ СводныеИндивидуальныеГрафики.Сотрудник  ЕСТЬ NULL
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК СводныеТабеля
		|				ПО (СводныеТабеля.Сотрудник = СотрудникиОрганизаций.Ссылка)
		|					И (СводныеТабеля.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениВредность)
		|					И (СводныеТабеля.Регистратор <> &ДокументСсылка)
		|					И (СводныеТабеля.Период = &Месяц)
		|		ГДЕ
		|			ПосчитаннаяНормаВремени.ВведенныеТабеля = 0
		|			И СводныеТабеля.Сотрудник ЕСТЬ NULL ) КАК ПосчитанноеВремя
		|		ПО (ПосчитанноеВремя.Сотрудник = СотрудникиОрганизаций.Ссылка)
		|			И НЕ ПосчитанноеВремя.ВидВремени ЕСТЬ NULL				
		|ГДЕ
		|	(&ВключатьВРезультатПустыеЗаписи
		|			ИЛИ (НЕ ПосчитанноеВремя.Часов ЕСТЬ NULL ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник.Наименование,
		|	Сотрудник,
		|	ВидВремени";
		
		
	Иначе
		// Заполнение с разбивкой по дням.
		
		ЗапросАвтоЗаполненияТекст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТОсновныеНачисления.ДатаТабеля,
		|	ВТОсновныеНачисления.Сотрудник,
		|	ВТОсновныеНачисления.ГрафикРаботы,
		|	ВТОсновныеНачисления.ВидРасчета,
		|	ВТОсновныеНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ОбозначениеВТабелеУчетаРабочегоВремени,
		|	ВТОсновныеНачисления.ВидВремени,
		|	ВТОсновныеНачисления.ПериодДействияНачало,
		|	ВТОсновныеНачисления.ПериодДействияКонец,
		|	ВТОсновныеНачисления.ВремяЗаДень,
		|	ВТОсновныеНачисления.ВидУчетаВремени,
		|	ВТОсновныеНачисления.ЧасовОтклонение
		|ПОМЕСТИТЬ ВТОтредактированныеНачисления
		|ИЗ
		|	ВТОсновныеНачисления КАК ВТОсновныеНачисления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТОсновныеНачисления.ДатаТабеля,
		|	ВТОсновныеНачисления.Сотрудник,
		|	ЕСТЬNULL(ГрафикиРаботы.ГрафикРаботы, РаботникиОрганизаций.ГрафикРаботы),
		|	""ПланируемаяЯвка"",
		|	NULL,
		|	NULL,
		|	ВТОсновныеНачисления.ПериодДействияНачало,
		|	ВТОсновныеНачисления.ПериодДействияКонец,
		|	0,
		|	ВТОсновныеНачисления.ВидУчетаВремени,
		|	СУММА(ВЫБОР
		|			КОГДА ВТОсновныеНачисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное)
		|				ТОГДА ВТОсновныеНачисления.ВремяЗаДень
		|			ИНАЧЕ 0
		|		КОНЕЦ)
		|ИЗ
		|	ВТОсновныеНачисления КАК ВТОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеНачисления КАК Явки
		|		ПО (Явки.ДатаТабеля = ВТОсновныеНачисления.ДатаТабеля)
		|			И (Явки.Сотрудник = ВТОсновныеНачисления.Сотрудник)
		|			И (Явки.ГрафикРаботы = ВТОсновныеНачисления.ГрафикРаботы
		|				ИЛИ Явки.ГрафикРаботы = ВТОсновныеНачисления.Сотрудник)
		|			И (Явки.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы))
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДатыПериода.ДатаТабеля КАК Дата,
		|			РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|			МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаИзменения
		|		ИЗ
		|			ВТДатыТабеля КАК ДатыПериода
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|				ПО (РаботникиОрганизаций.Сотрудник В
		|						(ВЫБРАТЬ
		|							ВТСписокРаботников.Ссылка
		|						ИЗ
		|							ВТСписокРаботников))
		|					И (РаботникиОрганизаций.Период <= ДатыПериода.ДатаТабеля)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РаботникиОрганизаций.Сотрудник,
		|			ДатыПериода.ДатаТабеля) КАК ДниСотрудников
		|		ПО (ДниСотрудников.Сотрудник = ВТОсновныеНачисления.Сотрудник)
		|			И (ДниСотрудников.Дата = ВТОсновныеНачисления.ДатаТабеля)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО (РаботникиОрганизаций.Сотрудник = ДниСотрудников.Сотрудник)
		|			И (РаботникиОрганизаций.Период = ДниСотрудников.ДатаИзменения)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|		ПО (ГрафикиРаботы.ГрафикРаботы = ВТОсновныеНачисления.ГрафикРаботы)
		|			И (ГрафикиРаботы.Дата = ВТОсновныеНачисления.ДатаТабеля)
		|			И (ГрафикиРаботы.ВидУчетаВремени = ВТОсновныеНачисления.ВидУчетаВремени)
		|ГДЕ
		|	Явки.Сотрудник ЕСТЬ NULL 
		|	И ВТОсновныеНачисления.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТОсновныеНачисления.ДатаТабеля,
		|	ВТОсновныеНачисления.Сотрудник,
		|	ЕСТЬNULL(ГрафикиРаботы.ГрафикРаботы, РаботникиОрганизаций.ГрафикРаботы),
		|	ВТОсновныеНачисления.ПериодДействияНачало,
		|	ВТОсновныеНачисления.ПериодДействияКонец,
		|	ВТОсновныеНачисления.ВидУчетаВремени;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ПроцентВредности КАК ПроцентВредности,
		|	ДниСотрудников.Дата,
		|	ДЕНЬ(ДниСотрудников.Дата) КАК День,
		|	ДниСотрудников.ВидВремени КАК БукваВидаВремени,
		|	ЕСТЬNULL(ДниСотрудников.ОсновноеЗначение, 0) КАК ОсновноеЗначение,
		|	ВЫБОР
		|		КОГДА ДниСотрудников.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
		|			ТОГДА 2
		|		КОГДА ДниСотрудников.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|			ТОГДА 3
		|		КОГДА ДниСотрудников.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
		|				ИЛИ ДниСотрудников.РабочееВремя
		|			ТОГДА 1
		|		ИНАЧЕ 4
		|	КОНЕЦ КАК ПорядокСортировки
		|ИЗ
		|	ВТСписокРаботников КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДниСотрудников.Сотрудник КАК Сотрудник,
		|			ДниСотрудников.Дата КАК Дата,
		|			ВЫБОР
		|				КОГДА ДневныеНеявки.ВидРасчета ЕСТЬ НЕ NULL 
		|						И ДневныеНеявки.ВидРасчета <> ""ПланируемаяЯвка""
		|						И (ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0
		|							ИЛИ ДневныеНеявки.ВидРасчета.ВидВремени В (&ВидыВремениУчитываемыеВВыходные)
		//комментируем, убираем больничный, чтобы он отражадся также в выходные дни, т.к. он считается по календарным дням
		//|								И (НЕ ДневныеНеявки.ВидРасчета.ОбозначениеВТабелеУчетаРабочеговремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы),ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Болезнь))))
		|								И (НЕ ДневныеНеявки.ВидРасчета.ОбозначениеВТабелеУчетаРабочеговремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы))))
		|					ТОГДА ДневныеНеявки.ВидРасчета.ОбозначениеВТабелеУчетаРабочеговремени
		|				КОГДА НЕ ВТСостояниеСотрудников.ВидВремени ЕСТЬ NULL  ТОГДА
		|					ВЫБОР 
		|						КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) В  (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам))
		|							ТОГДА NULL
		|						ИНАЧЕ ВТСостояниеСотрудников.ВидВремени
		|					КОНЕЦ
		|				КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0
		|					ТОГДА ВЫБОР
		|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|								ТОГДА ЕСТЬNULL(ПлановыеНачисленияСотрудников.КлассификаторВидаВремени, ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа))
		|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
		|								ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
		|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
		|								ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|						КОНЕЦ
		|				КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) = 0
		|					И ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|					И ЕСТЬNULL(ДневныеНеявки.ВидРасчета, """") <> ""ПланируемаяЯвка"" 
		|					ТОГДА  ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|			КОНЕЦ КАК ВидВремени,
		|			ВЫБОР
		|				КОГДА ДневныеНеявки.ВидРасчета ЕСТЬ НЕ NULL 
		|						И ДневныеНеявки.ВидРасчета <> ""ПланируемаяЯвка""
		|						И (ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0
		|							ИЛИ ДневныеНеявки.ВидРасчета.ВидВремени В (&ВидыВремениУчитываемыеВВыходные)
		|								И (НЕ ДневныеНеявки.ВидРасчета.ОбозначениеВТабелеУчетаРабочеговремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы))))
		|					ТОГДА ДневныеНеявки.ВидРасчета.ОбозначениеВТабелеУчетаРабочеговремени.РабочееВремя
		|				КОГДА НЕ ВТСостояниеСотрудников.ВидВремени ЕСТЬ NULL ТОГДА
		|					ВТСостояниеСотрудников.ВидВремени.РабочееВремя
		|				КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0
		|					ТОГДА ВЫБОР
		|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|								ТОГДА ЕСТЬNULL(ПлановыеНачисленияСотрудников.КлассификаторВидаВремени.РабочееВремя, ИСТИНА)
		|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
		|								ТОГДА ИСТИНА
		|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
		|								ТОГДА ИСТИНА
		|						КОНЕЦ
		|				КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) = 0
		|					И ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|					ТОГДА  ЛОЖЬ
		|			КОНЕЦ КАК РабочееВремя,
		|			ВЫБОР
		|				КОГДА (НЕ ДневныеНеявки.ВремяЗаДень ЕСТЬ NULL )
		|						И ДневныеНеявки.ВидРасчета <> ""ПланируемаяЯвка""
		|						И (ДневныеНеявки.ВремяЗаДень > 0)
		|					ТОГДА ДневныеНеявки.ВремяЗаДень
		|				КОГДА (НЕ ДневныеНеявки.ВидРасчета ЕСТЬ NULL )
		|						И ДневныеНеявки.ВидРасчета <> ""ПланируемаяЯвка""
		|						И (ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0
		|							ИЛИ ДневныеНеявки.ВидРасчета.ВидВремени В (&ВидыВремениУчитываемыеВВыходные)
		|								И (НЕ ДневныеНеявки.ВидРасчета.ОбозначениеВТабелеУчетаРабочеговремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы))))
		|					ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ЕСТЬNULL(ОбщиеГрафики.ОсновноеЗначение, 0)) - ДневныеНеявки.ЧасовОтклонение
		|				КОГДА ДневныеНеявки.ВидРасчета = ""ПланируемаяЯвка""
		|					ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) - ДневныеНеявки.ЧасовОтклонение
		|				КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0
		|					ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение)
		|				КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) = 0
		|					И ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|					ТОГДА  0
		|			КОНЕЦ КАК ОсновноеЗначение
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ДатыПериода.ДатаТабеля КАК Дата,
		|				РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|				МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаИзменения
		|			ИЗ
		|				ВТДатыТабеля КАК ДатыПериода
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|					ПО (РаботникиОрганизаций.Сотрудник В
		|							(ВЫБРАТЬ
		|								ВТСписокРаботников.Ссылка
		|							ИЗ
		|								ВТСписокРаботников))
		|						И (РаботникиОрганизаций.Период <= ДатыПериода.ДатаТабеля)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиОрганизаций.Сотрудник,
		|				ДатыПериода.ДатаТабеля) КАК ДниСотрудников
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|				ПО ДниСотрудников.Сотрудник = РаботникиОрганизаций.Сотрудник
		|					И ДниСотрудников.ДатаИзменения = РаботникиОрганизаций.Период
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ВведенныеТабеля
		|				ПО ДниСотрудников.Сотрудник = ВведенныеТабеля.ГрафикРаботы
		|					И ((НЕ ВведенныеТабеля.План))
		|					И ДниСотрудников.Дата = ВведенныеТабеля.Дата
		|					И (ВведенныеТабеля.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
		|					И (ВведенныеТабеля.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
		|				ПО ДниСотрудников.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
		|					И (СводныеИндивидуальныеГрафики.Месяц = &Месяц)
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК СводныеТабеля
		|				ПО ДниСотрудников.Сотрудник = СводныеТабеля.Сотрудник
		|					И (СводныеТабеля.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
		|					И (СводныеТабеля.ВЦеломЗаПериод)
		|					И (СводныеТабеля.Регистратор <> &ДокументСсылка)
		|					И (СводныеТабеля.Период = &Месяц)
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТОтредактированныеНачисления КАК ДневныеНеявки
		|				ПО ДниСотрудников.Сотрудник = ДневныеНеявки.Сотрудник
		|					И ДниСотрудников.Дата = ДневныеНеявки.ДатаТабеля
		|
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеСотрудников
		|				ПО ВТСостояниеСотрудников.Сотрудник = ДниСотрудников.Сотрудник
		|					И ДниСотрудников.Дата МЕЖДУ ВТСостояниеСотрудников.ПериодНачало И ВТСостояниеСотрудников.ПериодКонец
		|
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ИндивидуальныеГрафики
		|				ПО ДниСотрудников.Сотрудник = ИндивидуальныеГрафики.ГрафикРаботы
		|					И ДниСотрудников.Дата = ИндивидуальныеГрафики.Дата
		|					И (ИндивидуальныеГрафики.План)
		|					И (ИндивидуальныеГрафики.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)))
		|					И (ИндивидуальныеГрафики.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации)
		|					И (ДневныеНеявки.ВидРасчета ЕСТЬ NULL 
		|						ИЛИ ДневныеНеявки.ВидРасчета = ""ПланируемаяЯвка""
		|						ИЛИ ИндивидуальныеГрафики.ВидУчетаВремени = ДневныеНеявки.ВидУчетаВремени
		|						ИЛИ ИндивидуальныеГрафики.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|							И ДневныеНеявки.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ОбщиеГрафики
		|				ПО (ОбщиеГрафики.ГрафикРаботы = ВЫБОР
		|						КОГДА РаботникиОрганизаций.ПериодЗавершения <= ДниСотрудников.Дата
		|								И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|							ТОГДА РаботникиОрганизаций.ГрафикРаботыЗавершения
		|						ИНАЧЕ РаботникиОрганизаций.ГрафикРаботы
		|					КОНЕЦ)
		|					И (ОбщиеГрафики.План)
		|					И ДниСотрудников.Дата = ОбщиеГрафики.Дата
		|					И (ОбщиеГрафики.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)))
		|					И (ИндивидуальныеГрафики.ГрафикРаботы ЕСТЬ NULL )
		|					И (ДневныеНеявки.ВидРасчета ЕСТЬ NULL 
		|						ИЛИ ДневныеНеявки.ВидРасчета = ""ПланируемаяЯвка""
		|						ИЛИ ОбщиеГрафики.ВидУчетаВремени = ДневныеНеявки.ВидУчетаВремени
		|						ИЛИ ОбщиеГрафики.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|							И ДневныеНеявки.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийУвольнения
		|				ПО ДниСотрудников.Сотрудник = РаботникиОрганизацийУвольнения.Сотрудник
		|					И (РаботникиОрганизацийУвольнения.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))" +
		?(ПодразделениеОрганизации.Пустая(), "", "	ЛЕВОЕ СОЕДИНЕНИЕ ВТПодразделенияСотрудников КАК ПодразделенияСотрудников
		|	ПО
		|	ПодразделенияСотрудников.Сотрудник = ДниСотрудников.Сотрудник
		|	И ПодразделенияСотрудников.ДатаТабеля = ДниСотрудников.Дата ") +
		//vvv
		?(ТабельУчетаОрганизации.Пустая(), "", "	ЛЕВОЕ СОЕДИНЕНИЕ ВТТабеляСотрудников КАК ТабеляСотрудников
		|	ПО
		|	ТабеляСотрудников.Сотрудник = ДниСотрудников.Сотрудник
		|	И ТабеляСотрудников.ДатаТабеля = ДниСотрудников.Дата ") +
		//
		"				ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСотрудников КАК ПлановыеНачисленияСотрудников
		|				ПО ДниСотрудников.Сотрудник = ПлановыеНачисленияСотрудников.Сотрудник
		|					И ДниСотрудников.Дата = ПлановыеНачисленияСотрудников.ДатаТабеля
		|		ГДЕ
		|			(РаботникиОрганизацийУвольнения.Период ЕСТЬ NULL 
		|					ИЛИ РаботникиОрганизацийУвольнения.Период > ДниСотрудников.Дата)" +
		?(ПодразделениеОрганизации.Пустая(), "", "	И НЕ ПодразделенияСотрудников.Сотрудник ЕСТЬ NULL") +
		//vvv
		?(ТабельУчетаОрганизации.Пустая(), "", "	И НЕ ТабеляСотрудников.Сотрудник ЕСТЬ NULL") +
		//
		"			И РаботникиОрганизаций.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
		|			И СводныеТабеля.НомерСтроки ЕСТЬ NULL 
	//	|			И ВведенныеТабеля.ГрафикРаботы ЕСТЬ NULL 
		|			И СводныеИндивидуальныеГрафики.НомерСтроки ЕСТЬ NULL 
		|			И (НЕ(ИндивидуальныеГрафики.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам))
		|						И ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, 0) = 0
		|						И (ОбщиеГрафики.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам))
		|							И ЕСТЬNULL(ОбщиеГрафики.ОсновноеЗначение, 0) = 0)))
		|			И (ДневныеНеявки.ВидРасчета ЕСТЬ НЕ NULL 
		|					ИЛИ ДневныеНеявки.ВидРасчета ЕСТЬ NULL 
		|						И ВЫБОР
		|			КОГДА ВТСостояниеСотрудников.ВидВремени ЕСТЬ NULL ТОГДА
		|				ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0
		|				ИЛИ
		|				(ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) = 0
		|				И ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
		|			ИНАЧЕ ИСТИНА КОНЕЦ
		|		)) КАК ДниСотрудников
		|		ПО (ДниСотрудников.ВидВремени ЕСТЬ НЕ NULL )
		|			И Сотрудники.Ссылка = ДниСотрудников.Сотрудник
		|			И ДниСотрудников.ОсновноеЗначение >= 0 
		|ГДЕ
		|	(&ВключатьВРезультатПустыеЗаписи
		|			ИЛИ ДниСотрудников.ВидВремени ЕСТЬ НЕ NULL )
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник.Наименование,
		|	Сотрудник,
		|	День,
		|	ПорядокСортировки";
		
	КонецЕсли;
	
	ЗапросАвтоЗаполнения.Текст = ЗапросАвтоЗаполненияТекст;
	ТекстЗапросаДляОтладки = ТекстЗапросаДляОтладки + ЗапросАвтоЗаполнения.Текст;
	РезультатЗапроса = ЗапросАвтоЗаполнения.Выполнить();
	
	Если Сотрудник = Неопределено Тогда
		ОтработанноеВремя.Очистить();
		ОтработанноеВремяВЦеломЗаПериод.Очистить();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	СтрокаТекущегоУровняСообщений = "";
	Если Выборка.Количество() > 0 Тогда
		
		Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
			// по дням.
			
			ВведенныеТабеляПоДнямПоСотруднику = Новый Соответствие;
			Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
				
				ВведенныеТабеляПоДнямПоСотруднику.Очистить();
				Если ТекущаяСтрокаТабличнойЧасти = Неопределено Тогда
					СтрокаРасшифровкиПоДням = ОтработанноеВремя.Добавить();
				Иначе
					СтрокаРасшифровкиПоДням = ТекущаяСтрокаТабличнойЧасти;
					Для ИндексДня = 1 По 31 Цикл
						ТекущаяСтрокаТабличнойЧасти["ПервыйВидВремени" + Строка(ИндексДня)] = КлассификаторПустаяСсылка;
						ТекущаяСтрокаТабличнойЧасти["ВторойВидВремени" + Строка(ИндексДня)] = КлассификаторПустаяСсылка;
						ТекущаяСтрокаТабличнойЧасти["ТретийВидВремени" + Строка(ИндексДня)] = КлассификаторПустаяСсылка;
						ТекущаяСтрокаТабличнойЧасти["ЧетвертыйВидВремени" + Строка(ИндексДня)] = КлассификаторПустаяСсылка;
						ТекущаяСтрокаТабличнойЧасти["ПервыйЧасов" + Строка(ИндексДня)] = 0;
						ТекущаяСтрокаТабличнойЧасти["ВторойЧасов" + Строка(ИндексДня)] = 0;
						ТекущаяСтрокаТабличнойЧасти["ТретийЧасов" + Строка(ИндексДня)] = 0;
						ТекущаяСтрокаТабличнойЧасти["ЧетвертыйЧасов" + Строка(ИндексДня)] = 0;
					КонецЦикла;
				КонецЕсли;
				СтрокаРасшифровкиПоДням.Сотрудник = Выборка.Сотрудник;
				СтрокаРасшифровкиПоДням.ПроцентВредности = Выборка.ПроцентВредности;
				Если Выборка.День <> NULL Тогда
					
					Пока Выборка.СледующийПоЗначениюПоля("День") Цикл
						
						ИндексЯчейкиВТаблице = Выборка.День;
						ИндексМассиваПриставок = 0;
						Пока Выборка.Следующий() Цикл 
							
							Если (Выборка.ОсновноеЗначение=0) И (Выборка.БукваВидаВремени=Справочники.КлассификаторИспользованияРабочегоВремени.Работа) ТОгда
								Продолжить;
							КонецЕсли;
							
							Если ИндексМассиваПриставок > 3 Тогда
								// На данный момент мы можем вводить только 4 вида времени в один день
								Прервать;
							КонецЕсли;
							НазваниеЯчейкиВБазе = МассивПриставок[ИндексМассиваПриставок]+"ВидВремени"+Строка(ИндексЯчейкиВТаблице);
							СтрокаРасшифровкиПоДням[НазваниеЯчейкиВБазе] = Выборка.БукваВидаВремени;
							НазваниеЯчейкиВБазе = МассивПриставок[ИндексМассиваПриставок]+"Часов"+Строка(ИндексЯчейкиВТаблице);
							СтрокаРасшифровкиПоДням[НазваниеЯчейкиВБазе] = Выборка.ОсновноеЗначение;
							
							ИндексМассиваПриставок = ИндексМассиваПриставок + 1;
							
							
							
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		Иначе
			// в целом за период
			СписокСотрудниковСНехваткойВидовВремени = Новый Соответствие;
			СписокДобавленныхКолонок = Новый Соответствие;
			Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
				КоличествоЗаписей = 1;
				Если ТекущаяСтрокаТабличнойЧасти = Неопределено Тогда
					СтрокаТабличнойЧасти = ОтработанноеВремяВЦеломЗаПериод.Добавить();
					
				Иначе
					СтрокаТабличнойЧасти = ТекущаяСтрокаТабличнойЧасти;
				КонецЕсли;
				// Очистка старых значений
				Для ИндексТекущейЗаписи = КоличествоЗаписей По 6 Цикл
					СтрокаТабличнойЧасти["ВидВремени"+Строка(ИндексТекущейЗаписи)] = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();
					СтрокаТабличнойЧасти["Дней" + Строка(ИндексТекущейЗаписи)] = 0;
					СтрокаТабличнойЧасти["Часов" + Строка(ИндексТекущейЗаписи)] = 0;
				КонецЦикла;
				СтрокаТабличнойЧасти.Сотрудник = Выборка.Сотрудник;
				Пока Выборка.Следующий() Цикл
					Если Выборка.ВидВремени = NULL Тогда
						
						Если КоличествоЗаписей < 7 Тогда
							
							ЭлементСпискаКолонок = КолонкиСводногоТабеля.Найти(КлассификаторЯвка, "ВидВремени");
							Если ЭлементСпискаКолонок = Неопределено Тогда
								Если КолонкиСводногоТабеля.Количество() > 5 Тогда
									СписокСотрудниковСНехваткойВидовВремени.Вставить(Выборка.Сотрудник, 
									"" + СписокСотрудниковСНехваткойВидовВремени.Получить(Выборка.Сотрудник) + ", " + КлассификаторЯвка);
									ИндексКолонки = -1;
								Иначе
									КолонкиСводногоТабеля.Добавить().ВидВремени = КлассификаторЯвка;
									СписокДобавленныхКолонок.Вставить(КлассификаторЯвка, "");
									ИндексКолонки = КолонкиСводногоТабеля.Количество();
								КонецЕсли;
							Иначе
								ИндексКолонки = КолонкиСводногоТабеля.Индекс(ЭлементСпискаКолонок) + 1;
							КонецЕсли;
							
							Если ИндексКолонки > -1 Тогда
								СтрокаТабличнойЧасти["ВидВремени" + Строка(ИндексКолонки)] = КлассификаторЯвка;
								СтрокаТабличнойЧасти["Дней" + Строка(ИндексКолонки)] = Выборка.Дней;
								СтрокаТабличнойЧасти["Часов" + Строка(ИндексКолонки)] = Выборка.Часов;
								КоличествоЗаписей = КоличествоЗаписей + 1;
							КонецЕсли;
						КонецЕсли;
						
						Если КоличествоЗаписей < 7  И Выборка.ЧасовВечерних > 0 Тогда
							
							ЭлементСпискаКолонок = КолонкиСводногоТабеля.Найти(КлассификаторВечерниеЧасы, "ВидВремени");
							Если ЭлементСпискаКолонок = Неопределено Тогда
								Если КолонкиСводногоТабеля.Количество() > 5 Тогда
									СписокСотрудниковСНехваткойВидовВремени.Вставить(Выборка.Сотрудник, 
									"" + СписокСотрудниковСНехваткойВидовВремени.Получить(Выборка.Сотрудник) + ", " + КлассификаторВечерниеЧасы);
									ИндексКолонки = -1;
								Иначе
									КолонкиСводногоТабеля.Добавить().ВидВремени = КлассификаторВечерниеЧасы;
									СписокДобавленныхКолонок.Вставить(КлассификаторВечерниеЧасы, "");
									ИндексКолонки = КолонкиСводногоТабеля.Количество();
								КонецЕсли;
							Иначе
								ИндексКолонки = КолонкиСводногоТабеля.Индекс(ЭлементСпискаКолонок) + 1;
							КонецЕсли;
							
							Если ИндексКолонки > -1 Тогда
								СтрокаТабличнойЧасти["ВидВремени"+Строка(ИндексКолонки)] = КлассификаторВечерниеЧасы;
								СтрокаТабличнойЧасти["Часов" + Строка(ИндексКолонки)] = Выборка.ЧасовВечерних;
								КоличествоЗаписей = КоличествоЗаписей + 1;
							КонецЕсли;
						КонецЕсли;
						
						Если КоличествоЗаписей < 7  И Выборка.ЧасовНочных > 0 Тогда
							
							ЭлементСпискаКолонок = КолонкиСводногоТабеля.Найти(КлассификаторНочныеЧасы, "ВидВремени");
							Если ЭлементСпискаКолонок = Неопределено Тогда
								Если КолонкиСводногоТабеля.Количество() > 5 Тогда
									СписокСотрудниковСНехваткойВидовВремени.Вставить(Выборка.Сотрудник, 
									"" + СписокСотрудниковСНехваткойВидовВремени.Получить(Выборка.Сотрудник) + ", " + КлассификаторНочныеЧасы);
									ИндексКолонки = -1;
								Иначе
									КолонкиСводногоТабеля.Добавить().ВидВремени = КлассификаторНочныеЧасы;
									СписокДобавленныхКолонок.Вставить(КлассификаторНочныеЧасы, "");
									ИндексКолонки = КолонкиСводногоТабеля.Количество();
								КонецЕсли;
							Иначе
								ИндексКолонки = КолонкиСводногоТабеля.Индекс(ЭлементСпискаКолонок) + 1;
							КонецЕсли;
							
							Если ИндексКолонки > -1 Тогда
								СтрокаТабличнойЧасти["ВидВремени"+Строка(ИндексКолонки)] = КлассификаторНочныеЧасы;
								СтрокаТабличнойЧасти["Часов" + Строка(ИндексКолонки)] = Выборка.ЧасовНочных;
								КоличествоЗаписей = КоличествоЗаписей + 1;
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если КоличествоЗаписей < 7 Тогда
							
							ЭлементСпискаКолонок = КолонкиСводногоТабеля.Найти(Выборка.ВидВремени, "ВидВремени");
							Если ЭлементСпискаКолонок = Неопределено Тогда
								Если КолонкиСводногоТабеля.Количество() > 5 Тогда
									СписокСотрудниковСНехваткойВидовВремени.Вставить(Выборка.Сотрудник, 
									"" + СписокСотрудниковСНехваткойВидовВремени.Получить(Выборка.Сотрудник) + ", " + Выборка.ВидВремени);
									ИндексКолонки = -1;
								Иначе
									КолонкиСводногоТабеля.Добавить().ВидВремени = Выборка.ВидВремени;
									СписокДобавленныхКолонок.Вставить(Выборка.ВидВремени, "");
									ИндексКолонки = КолонкиСводногоТабеля.Количество();
								КонецЕсли;
							Иначе
								ИндексКолонки = КолонкиСводногоТабеля.Индекс(ЭлементСпискаКолонок) + 1;
							КонецЕсли;
							
							Если ИндексКолонки > -1 Тогда
								СтрокаТабличнойЧасти["ВидВремени"+Строка(ИндексКолонки)] = Выборка.ВидВремени;
								СтрокаТабличнойЧасти["Дней" + Строка(ИндексКолонки)] = Выборка.Дней;
								СтрокаТабличнойЧасти["Часов" + Строка(ИндексКолонки)] = Выборка.Часов;
								КоличествоЗаписей = КоличествоЗаписей + 1;
							КонецЕсли;
						КонецЕсли;
						
						
						Если КоличествоЗаписей < 7  И Выборка.ЧасовВечерних > 0 Тогда
							
							ЭлементСпискаКолонок = КолонкиСводногоТабеля.Найти(КлассификаторВечерниеЧасы, "ВидВремени");
							Если ЭлементСпискаКолонок = Неопределено Тогда
								Если КолонкиСводногоТабеля.Количество() > 5 Тогда
									СписокСотрудниковСНехваткойВидовВремени.Вставить(Выборка.Сотрудник, 
									"" + СписокСотрудниковСНехваткойВидовВремени.Получить(Выборка.Сотрудник) + ", " + КлассификаторВечерниеЧасы);
									ИндексКолонки = -1;
								Иначе
									КолонкиСводногоТабеля.Добавить().ВидВремени = КлассификаторВечерниеЧасы;
									СписокДобавленныхКолонок.Вставить(КлассификаторВечерниеЧасы, "");
									ИндексКолонки = КолонкиСводногоТабеля.Количество();
								КонецЕсли;
							Иначе
								ИндексКолонки = КолонкиСводногоТабеля.Индекс(ЭлементСпискаКолонок) + 1;
							КонецЕсли;
							
							Если ИндексКолонки > -1 Тогда
								СтрокаТабличнойЧасти["ВидВремени"+Строка(ИндексКолонки)] = КлассификаторВечерниеЧасы;
								СтрокаТабличнойЧасти["Часов" + Строка(ИндексКолонки)] = СтрокаТабличнойЧасти["Часов" + Строка(ИндексКолонки)] + Выборка.ЧасовВечерних;
								КоличествоЗаписей = КоличествоЗаписей + 1;
							КонецЕсли;
						КонецЕсли;
						
						Если КоличествоЗаписей < 7  И Выборка.ЧасовНочных > 0 Тогда
							
							ЭлементСпискаКолонок = КолонкиСводногоТабеля.Найти(КлассификаторНочныеЧасы, "ВидВремени");
							Если ЭлементСпискаКолонок = Неопределено Тогда
								Если КолонкиСводногоТабеля.Количество() > 5 Тогда
									СписокСотрудниковСНехваткойВидовВремени.Вставить(Выборка.Сотрудник, 
									"" + СписокСотрудниковСНехваткойВидовВремени.Получить(Выборка.Сотрудник) + ", " + КлассификаторНочныеЧасы);
									ИндексКолонки = -1;
								Иначе
									КолонкиСводногоТабеля.Добавить().ВидВремени = КлассификаторНочныеЧасы;
									СписокДобавленныхКолонок.Вставить(КлассификаторНочныеЧасы, "");
									ИндексКолонки = КолонкиСводногоТабеля.Количество();
								КонецЕсли;
							Иначе
								ИндексКолонки = КолонкиСводногоТабеля.Индекс(ЭлементСпискаКолонок) + 1;
							КонецЕсли;
							
							Если ИндексКолонки > -1 Тогда
								СтрокаТабличнойЧасти["ВидВремени"+Строка(ИндексКолонки)] = КлассификаторНочныеЧасы;
								СтрокаТабличнойЧасти["Часов" + Строка(ИндексКолонки)] = СтрокаТабличнойЧасти["Часов" + Строка(ИндексКолонки)] + Выборка.ЧасовНочных;
								КоличествоЗаписей = КоличествоЗаписей + 1;
							КонецЕсли;
						КонецЕсли;
						
						
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			
			КоличествоДобавленныхКолонок = СписокДобавленныхКолонок.Количество();
			Если КоличествоДобавленныхКолонок > 0 Тогда
				
				УпорядочитьКолонкиСводногоТабеля();
				
				#Если Клиент Тогда
					СтрокаСообщения = "В табличную часть " + 
					?(КоличествоДобавленныхКолонок = 1,"добавлена колонка с видом времени: ", "добавлены колонки с видами времени: ");
					
					СтрокаТекущегоУровняСообщений = ОбработкаКомментариев.ДобавитьСообщение(СтрокаСообщения, Перечисления.ВидыСообщений.ВажнаяИнформация, ,СтрокаВерхнегоУровняСообщений );
					
					Для Каждого ЭлементСписка Из СписокДобавленныхКолонок Цикл
						ОбработкаКомментариев.ДобавитьСообщение(ЭлементСписка.Ключ, Перечисления.ВидыСообщений.ПустаяСсылка(), , СтрокаТекущегоУровняСообщений);
					КонецЦикла;
					
				#КонецЕсли
				
			КонецЕсли;
			
			КоличествоСотрудниковВСпискеНехваткиВидовВремени = СписокСотрудниковСНехваткойВидовВремени.Количество();
			Если КоличествоСотрудниковВСпискеНехваткиВидовВремени > 0 Тогда
				
				#Если Клиент Тогда
					СтрокаТекущегоУровняСообщений = ОбработкаКомментариев.ДобавитьСообщение("Указанным сотрудникам выведены не все виды времени:", Перечисления.ВидыСообщений.ВажнаяИнформация,,СтрокаВерхнегоУровняСообщений );
				#Иначе
				#КонецЕсли
				
				КоличествоВыведенныхСотрудников = 0;
				Для Каждого ЭлементСписка Из СписокСотрудниковСНехваткойВидовВремени Цикл
					СтрокаСотрудника = "" + ЭлементСписка.Ключ + " (" + Сред(ЭлементСписка.Значение, 3) + ")";
					#Если Клиент Тогда
						ОбработкаКомментариев.ДобавитьСообщение(СтрокаСотрудника, Перечисления.ВидыСообщений.ПустаяСсылка(),, СтрокаТекущегоУровняСообщений);
					#Иначе
					#КонецЕсли
					КоличествоВыведенныхСотрудников = КоличествоВыведенныхСотрудников + 1;
					Если КоличествоВыведенныхСотрудников > 4 И КоличествоСотрудниковВСпискеНехваткиВидовВремени > 5 Тогда
						#Если Клиент Тогда
							ОбработкаКомментариев.ДобавитьСообщение(" и другие.", Перечисления.ВидыСообщений.ПустаяСсылка(),, СтрокаТекущегоУровняСообщений);
						#Иначе
						#КонецЕсли
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	Выборка = ТабельУчетаРабочегоВремениОрганизацииПереопределяемый.СформироватьЗапросПоНезаполненнымСотрудникам(ЗапросАвтоЗаполнения).Выбрать();
	//Если Выборка.Количество() > 0 Тогда
	//	
	//	КоличествоВыведенныхДокументов = 0;
	//	#Если Клиент Тогда
	//		СтрокаТекущегоУровняСообщений = ОбработкаКомментариев.ДобавитьСообщение("На следующих сотрудников уже введены документы учета отработанного времени в этом периоде:", Перечисления.ВидыСообщений.ВажнаяИнформация, ,СтрокаВерхнегоУровняСообщений );
	//	#Иначе
	//	#КонецЕсли
	//	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
	//		
	//		Если КоличествоВыведенныхДокументов >= 4 Тогда
	//			#Если Клиент Тогда
	//				ОбработкаКомментариев.ДобавитьСообщение("и другие.", Перечисления.ВидыСообщений.ПустаяСсылка(),, СтрокаТекущегоУровняСообщений);
	//				Прервать;
	//			#Иначе
	//			#КонецЕсли
	//		КонецЕсли;
	//		
	//		#Если Клиент Тогда
	//			СтрокаУровняСотрудника = ОбработкаКомментариев.ДобавитьСообщение(Выборка.ПредставлениеСотрудника, Перечисления.ВидыСообщений.Информация,, СтрокаТекущегоУровняСообщений);
	//		#Иначе
	//		#КонецЕсли
	//		
	//		Пока Выборка.Следующий() Цикл
	//			Если КоличествоВыведенныхДокументов >= 4 Тогда
	//				#Если Клиент Тогда
	//					ОбработкаКомментариев.ДобавитьСообщение("и другие.", Перечисления.ВидыСообщений.ПустаяСсылка(),, СтрокаТекущегоУровняСообщений);
	//				#Иначе
	//				#КонецЕсли
	//				Прервать;
	//			КонецЕсли;
	//			#Если Клиент Тогда
	//				РасшифровкаКомментария = Новый Массив;
	//				
	//				РасшифровкаКомментария.Добавить(Новый Структура("Представление, Расшифровка", Выборка.ПредставлениеДокумента, Выборка.ДокументОснование));
	//				ОбработкаКомментариев.ДобавитьСообщение("", Перечисления.ВидыСообщений.ПустаяСсылка(), РасшифровкаКомментария, СтрокаУровняСотрудника);
	//			#Иначе
	//			#КонецЕсли
	//			КоличествоВыведенныхДокументов = КоличествоВыведенныхДокументов + 1;
	//			
	//		КонецЦикла;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	// Запрос для вывода сообщения о введенном сводном графике
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
		ЗапросАвтоЗаполнения.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПРЕДСТАВЛЕНИЕ(СводныеИндивидуальныеГрафики.Регистратор) КАК ПредставлениеДокумента,
		|	СводныеИндивидуальныеГрафики.Регистратор КАК ВведенныйДокумент,
		|	ПРЕДСТАВЛЕНИЕ(СводныеИндивидуальныеГрафики.Сотрудник) КАК ПредставлениеСотрудника,
		|	СводныеИндивидуальныеГрафики.Регистратор,
		|	СводныеИндивидуальныеГрафики.Сотрудник
		|ИЗ
		|	РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
		|ГДЕ
		|	СводныеИндивидуальныеГрафики.Сотрудник В
		|			(ВЫБРАТЬ
		|				ВТСписокРаботников.Ссылка
		|			ИЗ
		|				ВТСписокРаботников)
		|	И СводныеИндивидуальныеГрафики.Месяц = &Месяц";
		Выборка = ЗапросАвтоЗаполнения.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			#Если Клиент Тогда
				СтрокаТекущегоУровняСообщений = ОбработкаКомментариев.ДобавитьСообщение("Следующим сотрудникам введен сводный индивидуальный график и подневный табель по ним не может быть заполнен:", Перечисления.ВидыСообщений.ВажнаяИнформация, ,СтрокаВерхнегоУровняСообщений );
			#Иначе
			#КонецЕсли
			КоличествоВыведенныхДокументов = 0;
			Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
				
				Если КоличествоВыведенныхДокументов >= 4 Тогда
					#Если Клиент Тогда
						ОбработкаКомментариев.ДобавитьСообщение(" и другие.", Перечисления.ВидыСообщений.ПустаяСсылка(),, СтрокаТекущегоУровняСообщений);
					#Иначе
					#КонецЕсли
					Прервать;
				КонецЕсли;
				#Если Клиент Тогда
					РасшифровкаКомментария = Новый Массив;
					РасшифровкаКомментария.Добавить(Новый Структура("Представление, Расшифровка", Выборка.ПредставлениеДокумента, Выборка.ВведенныйДокумент));
					СтрокаУровняДокумента = ОбработкаКомментариев.ДобавитьСообщение("", Перечисления.ВидыСообщений.ПустаяСсылка(), РасшифровкаКомментария, СтрокаТекущегоУровняСообщений);
				#Иначе
				#КонецЕсли
				Пока Выборка.Следующий() Цикл
					
					Если КоличествоВыведенныхДокументов >= 4 Тогда
						#Если Клиент Тогда
							ОбработкаКомментариев.ДобавитьСообщение(" и другие.", Перечисления.ВидыСообщений.ПустаяСсылка(),, СтрокаУровняДокумента);
						#Иначе
						#КонецЕсли
						Прервать;
					КонецЕсли;
					#Если Клиент Тогда
						ОбработкаКомментариев.ДобавитьСообщение(Выборка.ПредставлениеСотрудника, Перечисления.ВидыСообщений.Информация,, СтрокаУровняДокумента);
					#Иначе
					#КонецЕсли
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	#Если Клиент Тогда
		Если СтрокаТекущегоУровняСообщений <> "" Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
		КонецЕсли;
	#Иначе
	#КонецЕсли
КонецФункции // Автозаполнение()

#Если Клиент Тогда
//vvv	
Процедура ВывестиИтогиПоСотруднику(ТекСотрудник,ТекНомерСтроки,ТаблицаИтогов,ТаблицаВыходных,ОбластьИтоги)
	
	СтруктураПоиска.Вставить("Сотрудник",ТекСотрудник);
	СтруктураПоиска.Вставить("НомерСтроки",0);
	НайденнаяСтрока=ТаблицаИтогов.НайтиСтроки(СтруктураПоиска);
	ИскатьПоНомеруСтроки=НайденнаяСтрока.Количество()=0;
	СтруктураПоиска.Очистить();
	
	ОбластьИтоги.Параметры.РабочихДней=0;		
	СтруктураПоиска.Вставить("Сотрудник",ТекСотрудник);
	Если ИскатьПоНомеруСтроки Тогда
		СтруктураПоиска.Вставить("НомерСтроки",ТекНомерСтроки);
	КонецЕсли;
	СтруктураПоиска.Вставить("ВидИспользованияРабочегоВремени",Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
	  	
	НайденнаяСтрока=ТаблицаИтогов.НайтиСтроки(СтруктураПоиска);
	Если НайденнаяСтрока.Количество()<>0 Тогда
		ОбластьИтоги.Параметры.РабочихДней=НайденнаяСтрока[0].Дней;		
	КонецЕсли;
	СтруктураПоиска.Очистить();
	
	ОбластьИтоги.Параметры.РабочихЧасов=0;
	СтруктураПоиска.Вставить("Сотрудник",ТекСотрудник);
	Если ИскатьПоНомеруСтроки Тогда
		СтруктураПоиска.Вставить("НомерСтроки",ТекНомерСтроки);
	КонецЕсли;
	СтруктураПоиска.Вставить("ВидИспользованияРабочегоВремени",Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
	
	НайденнаяСтрока=ТаблицаИтогов.НайтиСтроки(СтруктураПоиска);
	
	Если НайденнаяСтрока.Количество()<>0 Тогда
		ОбластьИтоги.Параметры.РабочихЧасов=НайденнаяСтрока[0].Часов;
	КонецЕсли;
	СтруктураПоиска.Очистить();
					
КонецПроцедуры	
//vvv
Функция  ПечатьТабеля(ПоДням=Ложь)
	
	НачалоПериода=НачалоМесяца(ПериодРегистрации);
	КонецПериода=КонецМесяца(ПериодРегистрации);
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(" + Формат(Год(НачалоПериода), "ЧГ=4") + ", " + Месяц(НачалоПериода) + " , 1) КАК ДатаТабеля,
	|	ДАТАВРЕМЯ(" + Формат(Год(НачалоПериода), "ЧГ=4") + ", " + Месяц(НачалоПериода) + " , 1) КАК ПериодРегистрации
	|ПОМЕСТИТЬ ВТДатыТабеля 
	|	";           
	ДатаВОтчете = НачалоПериода + 86400;
	Пока ДатаВОтчете <= НачалоДня(КонецПериода) Цикл
		НомерДня    = День(ДатаВОтчете);
		НомерМесяца = Месяц(ДатаВОтчете);
		НомерГода   = Год(ДатаВОтчете);
		ТекстЗапроса = ТекстЗапроса + 
		"ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|  ДАТАВРЕМЯ(" + Формат(НомерГода, "ЧГ=4")+ ", " + НомерМесяца + " ," + НомерДня + "),
		|  ДАТАВРЕМЯ(" + Формат(НомерГода, "ЧГ=4") + ", " + НомерМесяца + " , 1) КАК ПериодРегистрации
		|	";
		ДатаВОтчете = ДатаВОтчете + 86400;
	КонецЦикла;
	
	Запрос.Текст=ТекстЗапроса;
	Запрос.Выполнить();
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ДатыТабеля.ДатаТабеля КАК ДатаТабеля
	|ИЗ
	|	ВТДатыТабеля КАК ДатыТабеля";
	
	ВыборкаДат=Запрос.Выполнить().Выбрать();
	
	Запрос.Текст=
	"ВЫБРАТЬ 
	| Дни.Дата1 КАК ДатаТабеля,
	| Дни.Сотрудник КАК Сотрудник,
	| Дни.ПроцентВредности КАК ПроцентВредности,
	| Дни.НомерСтроки КАК НомерСтроки,
	| Дни.ДеньТабеля КАК ДеньТабеля
	|	ПОМЕСТИТЬ ВТДатыСотрудников
	| ИЗ (";
	
	Пока ВыборкаДат.Следующий() Цикл
		Запрос.Текст=Запрос.Текст+
		"ВЫБРАТЬ "+Символы.ПС+	
		"&Дата"+Строка(День(ВыборкаДат.ДатаТабеля))+", "+Символы.ПС+	
		"	ТабельУчетаРабочегоВремениВредностьОтработанноеВремя.Сотрудник,
		|	ТабельУчетаРабочегоВремениВредностьОтработанноеВремя.ПроцентВредности,
		|	ТабельУчетаРабочегоВремениВредностьОтработанноеВремя.НомерСтроки,
		|	ВЫБОР КОГДА ТабельУчетаРабочегоВремениВредностьОтработанноеВремя.ПервыйВидВремени"+Строка(День(ВыборкаДат.ДатаТабеля))+"=ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа) ТОГДА ТабельУчетаРабочегоВремениВредностьОтработанноеВремя.ПервыйЧасов"+Строка(День(ВыборкаДат.ДатаТабеля))+" КОГДА ТабельУчетаРабочегоВремениВредностьОтработанноеВремя.ПервыйВидВремени"+Строка(День(ВыборкаДат.ДатаТабеля))+"=ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни) ТОГДА ""В"" ИНАЧЕ 0 КОНЕЦ КАК ДеньТабеля"+Символы.ПС+
		" ИЗ
		|	Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениВредностьОтработанноеВремя
		|ГДЕ
		|	ТабельУчетаРабочегоВремениВредностьОтработанноеВремя.Ссылка = &Ссылка
		|ОБЪЕДИНИТЬ ВСЕ "+Символы.ПС;
		Запрос.УстановитьПараметр("Дата"+Строка(День(ВыборкаДат.ДатаТабеля)),ВыборкаДат.ДатаТабеля);
	КонецЦикла;
	Запрос.Текст=ЛЕВ(Запрос.Текст,СтрДлина(Запрос.Текст)-16);
	Запрос.Текст=Запрос.Текст+") КАК Дни
	| ИНДЕКСИРОВАТЬ ПО Сотрудник, ДатаТабеля";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Запрос.Выполнить();
		
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ДатыСотрудников.ДатаТабеля КАК ДатаТабеля,
	|	ДатыСотрудников.Сотрудник.Код КАК ТабельныйНомер,
	|	ДатыСотрудников.Сотрудник КАК Сотрудник,
	|	ДатыСотрудников.ПроцентВредности КАК ПроцентВредности,
	|	ДатыСотрудников.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизаций.ДолжностьЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизаций.Должность.Наименование
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизаций.ДолжностьЗавершения.НаименованиеСокр
	|		ИНАЧЕ РаботникиОрганизаций.Должность.НаименованиеСокр
	|	КОНЕЦ КАК ДолжностьСокр,
	|	ВЫБОР
	|		КОГДА ТарифныеСтавкиРаботниковОрганизаций.ПериодЗавершения <= &ДатаАктуальности
	|				И ТарифныеСтавкиРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ТарифныеСтавкиРаботниковОрганизаций.СтавкаЗавершения
	|		ИНАЧЕ ТарифныеСтавкиРаботниковОрганизаций.Ставка
	|	КОНЕЦ КАК Оклад,
	|	ДатыСотрудников.ДеньТабеля КАК ДеньТабеля
	|ИЗ
	|	ВТДатыСотрудников КАК ДатыСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, ) КАК РаботникиОрганизаций
	|		ПО (РаботникиОрганизаций.Сотрудник = ДатыСотрудников.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации.СрезПоследних(&ДатаАктуальности, ) КАК ТарифныеСтавкиРаботниковОрганизаций
	|		ПО (ТарифныеСтавкиРаботниковОрганизаций.Сотрудник = ДатыСотрудников.Сотрудник)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Сотрудник,
	|	ДатаТабеля";

	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ДатаАктуальности",КонецМесяца(ПериодРегистрации));
	
	ЗапросИтоги=Новый Запрос;
	ЗапросИтоги.Текст=
	"ВЫБРАТЬ
	|	РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Сотрудник,
	|	РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.НомерСтрокиТабеля КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа) КАК ВидИспользованияРабочегоВремени,
	|	СУММА(РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Дней) КАК Дней,
	|	СУММА(РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Часов) КАК Часов
	|ИЗ
	|	РегистрНакопления.РабочееВремяРаботниковОрганизацийВоВредныхУсловиях КАК РабочееВремяРаботниковОрганизацийВоВредныхУсловиях
	|ГДЕ
	|	РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Регистратор = &Регистратор
	|	И РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
	|
	|СГРУППИРОВАТЬ ПО
	|	РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.Сотрудник,
	|	РабочееВремяРаботниковОрганизацийВоВредныхУсловиях.НомерСтрокиТабеля";
	
	ЗапросИтоги.УстановитьПараметр("Регистратор",Ссылка);
	ТаблицаИтогов=ЗапросИтоги.Выполнить().Выгрузить();

	ЗапросПоШапке=Новый Запрос;
	ЗапросПоШапке.Текст=
	"ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениОрганизации.Номер,
	|	ТабельУчетаРабочегоВремениОрганизации.ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА ТабельУчетаРабочегоВремениОрганизации.ТабельУчетаОрганизации = ЗНАЧЕНИЕ(Справочник.ТабеляУчетаОрганизаций.ПустаяСсылка)
	|			ТОГДА ТабельУчетаРабочегоВремениОрганизации.ПодразделениеОрганизации
	|		ИНАЧЕ ТабельУчетаРабочегоВремениОрганизации.ТабельУчетаОрганизации
	|	КОНЕЦ КАК Подразделение,
	|	ТабельУчетаРабочегоВремениОрганизации.Организация,
	|	ТабельУчетаРабочегоВремениОрганизации.Руководитель,
	|	ТабельУчетаРабочегоВремениОрганизации.РуководительДолжность,
	|	ТабельУчетаРабочегоВремениОрганизации.РаботникКадровойСлужбы,
	|	ТабельУчетаРабочегоВремениОрганизации.РаботникКадровойСлужбыДолжность.Наименование КАК РаботникКадровойСлужбыДолжность,
	|	ТабельУчетаРабочегоВремениОрганизации.Исполнитель,
	|	ТабельУчетаРабочегоВремениОрганизации.ИсполнительДолжность.Наименование КАК ИсполнительДолжность,
	|	ТабельУчетаРабочегоВремениОрганизации.Экономист,
	|	ТабельУчетаРабочегоВремениОрганизации.ЭкономистДолжность.Наименование КАК ЭкономистДолжность,
	|	ТабельУчетаРабочегоВремениОрганизации.ИнспекторПоОхранеТруда КАК ИнспекторОТ,
	|	ТабельУчетаРабочегоВремениОрганизации.ИнспекторПоОхранеТрудаДолжность.Наименование КАК ИнспекторОТДолжность,
	|	ТабельУчетаРабочегоВремениОрганизации.Ответственный.ФизЛицо КАК Табельщик
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениВредность КАК ТабельУчетаРабочегоВремениОрганизации
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизации.Ссылка = &Регистратор";
	
	ЗапросПоШапке.УстановитьПараметр("Регистратор",Ссылка);
	ВыборкаПоШапке=ЗапросПоШапке.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();
	
	ЗапросПоОтветственным=Новый Запрос;
	ЗапросПоОтветственным.Текст=
	"ВЫБРАТЬ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК Руководитель,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			&ДатаАктуальности,
	|			ОтветственноеЛицо = &ГенеральныйДиректор
	|				И СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
	
	ЗапросПоОтветственным.УстановитьПараметр("Организация",Организация);
	ЗапросПоОтветственным.УстановитьПараметр("ДатаАктуальности",ПериодРегистрации);
	ЗапросПоОтветственным.УстановитьПараметр("ГенеральныйДиректор",Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	ВыборкаОтветственный=ЗапросПоОтветственным.Выполнить().Выбрать();
	ВыборкаОтветственный.Следующий();
	
	ЗапросПоОтветственнымКадровик=Новый Запрос;
	ЗапросПоОтветственнымКадровик.Текст=
	"ВЫБРАТЬ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК Кадровик,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьКадровика
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			&ДатаАктуальности,
	|			ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы)
	|				И СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
	
	ЗапросПоОтветственнымКадровик.УстановитьПараметр("Организация",Организация);
	ЗапросПоОтветственнымКадровик.УстановитьПараметр("ДатаАктуальности",ПериодРегистрации);
	
	ВыборкаОтветственныйКадровик=ЗапросПоОтветственнымКадровик.Выполнить().Выбрать();
	ВыборкаОтветственныйКадровик.Следующий();
	
	ЗапросДатыТабеля=Новый Запрос;
	ЗапросДатыТабеля.Текст=
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(" + Формат(Год(НачалоПериода), "ЧГ=4") + ", " + Месяц(НачалоПериода) + " , 1) КАК ДатаТабеля,
	|	ДАТАВРЕМЯ(" + Формат(Год(НачалоПериода), "ЧГ=4") + ", " + Месяц(НачалоПериода) + " , 1) КАК ПериодРегистрации
	|	";           
	ДатаВОтчете = НачалоПериода + 86400;
	Пока ДатаВОтчете <= НачалоДня(КонецПериода) Цикл
		НомерДня    = День(ДатаВОтчете);
		НомерМесяца = Месяц(ДатаВОтчете);
		НомерГода   = Год(ДатаВОтчете);
		ЗапросДатыТабеля.Текст = ЗапросДатыТабеля.Текст + 
		"ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|  ДАТАВРЕМЯ(" + Формат(НомерГода, "ЧГ=4")+ ", " + НомерМесяца + " ," + НомерДня + "),
		|  ДАТАВРЕМЯ(" + Формат(НомерГода, "ЧГ=4") + ", " + НомерМесяца + " , 1) КАК ПериодРегистрации
		|	";
		ДатаВОтчете = ДатаВОтчете + 86400;
	КонецЦикла;
	
	ВыборкаПоДатам=ЗапросДатыТабеля.Выполнить().Выбрать();
	
	//ищем выходные дни, они всегда будут как первый вид времени
	ЗапросПоВыходным=Новый запрос;
	ЗапросПоВыходным.Текст=
	"ВЫБРАТЬ
	| ВыходныеДни.Сотрудник,
	| СУММА(ВыходныеДни.Количество) КАК Дней
	| ИЗ
	|(";

	Для к=1 По 31 Цикл
		ЗапросПоВыходным.Текст=ЗапросПоВыходным.Текст+
		"ВЫБРАТЬ
		|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|	1 КАК Количество,
		|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйВидВремени"+Строка(к)+""+
		" ИЗ
		|	Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|ГДЕ
		|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|	И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйВидВремени"+Строка(к)+"=&Выходной"+Символы.ПС;
		
		Если к<>31 ТОгда
			ЗапросПоВыходным.Текст=ЗапросПоВыходным.Текст+
			"	ОБЪЕДИНИТЬ ВСЕ
			|";
		КОнецЕсли;
		
	КонецЦикла;
	
	ЗапросПоВыходным.Текст=ЗапросПоВыходным.Текст+
	") КАК ВыходныеДни
	|СГРУППИРОВАТЬ ПО 
	| ВыходныеДни.Сотрудник";
	
	ЗапросПоВыходным.УстановитьПараметр("Выходной",Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни);
	ЗапросПоВыходным.УстановитьПараметр("ДокументСсылка",Ссылка);
	
	ТаблицаВыходных=ЗапросПоВыходным.Выполнить().Выгрузить();
	//
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ИмяМакета="Табель";
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьШапкаНачало=Макет.ПолучитьОбласть("Шапка|Сотрудник");
	ОбластьШапкаДата=Макет.ПолучитьОбласть("Шапка|Ном");
	ОбластьШапкаКонец=Макет.ПолучитьОбласть("Шапка|Конец");
	ОбластьСотрудник=Макет.ПолучитьОбласть("Осн|Сотрудник");
	ОбластьДень=Макет.ПолучитьОбласть("Осн|Ном");
	ОбластьВыходнойДень=Макет.ПолучитьОбласть("Осн|Ном1");
	ОбластьИтоги=Макет.ПолучитьОбласть("Осн|Конец");
	ОбластьПодвал=Макет.ПолучитьОбласть("Подпись|Сотрудник");
	ОбластьОТ=Макет.ПолучитьОбласть("ОТ|Сотрудник");
	
	ВыборкаПоСотрудникам=Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска=Новый Структура;
	
	//шапка
	ОбластьШапкаНачало.Параметры.Заполнить(ВыборкаПоШапке);
	ОбластьШапкаНачало.Параметры.Дата=Формат(ВыборкаПоШапке.ПериодРегистрации,"ДФ='ММММ гггг ""г.""'");
	ОбластьШапкаКонец.Параметры.Заполнить(ВыборкаОтветственный);
	ОбластьШапкаКонец.Параметры.Руководитель=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаОтветственный.Руководитель);
	Если ЗначениеЗаполнено(ВыборкаПоШапке.Руководитель) Тогда
		ОбластьШапкаКонец.Параметры.Руководитель=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоШапке.Руководитель);
		ОбластьШапкаКонец.Параметры.ДолжностьРуководителя=ВыборкаПоШапке.РуководительДолжность;
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьШапкаНачало);
	
	Пока ВыборкаПоДатам.Следующий() Цикл
		ОбластьШапкаДата.Параметры.Н=День(ВыборкаПоДатам.ДатаТабеля);
		ТабДокумент.Присоединить(ОбластьШапкаДата);
	КонецЦикла;	
	
	ТабДокумент.Присоединить(ОбластьШапкаКонец);
	
	//строки
	ТекСотрудник="";
	ТекНомерСтроки="";	
	Пока ВыборкаПоСотрудникам.СледующийПоЗначениюПоля("НомерСтроки") Цикл
				
		//Если ТекСотрудник<>ВыборкаПоСотрудникам.Сотрудник Тогда
		Если ТекНомерСтроки<>ВыборкаПоСотрудникам.НомерСтроки Тогда
			
			Если ТекСотрудник<>"" Тогда
				ВывестиИтогиПоСотруднику(ТекСотрудник,ТекНомерСтроки,ТаблицаИтогов,ТаблицаВыходных,ОбластьИтоги);
				ТабДокумент.Присоединить(ОбластьИтоги);
			КонецЕсли;
			
			ОбластьСотрудник.Параметры.Заполнить(ВыборкаПоСотрудникам);
			ОбластьСотрудник.Параметры.ТабельныйНомер=СокрЛП(ВыборкаПоСотрудникам.ТабельныйНомер);
			Если СокрЛП(ВыборкаПоСотрудникам.ДолжностьСокр)<>"" ТОгда
				ОбластьСотрудник.Параметры.Должность=СокрЛП(ВыборкаПоСотрудникам.ДолжностьСокр);
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьСотрудник);
			
		КонецЕсли;
		
		Пока ВыборкаПоСотрудникам.СледующийПоЗначениюПоля("ДатаТабеля") Цикл
			
			ОбластьТабеля=?(ВыборкаПоСотрудникам.ДеньТабеля="В",ОбластьВыходнойДень,ОбластьДень);
			ОбластьТабеля.Параметры.Заполнить(ВыборкаПоСотрудникам);
			Если ПоДням и ВыборкаПоСотрудникам.ДеньТабеля<>"В" ТОгда
				Если ТипЗнч(ВыборкаПоСотрудникам.ДеньТабеля)=тип("Число") ТОгда
					Если ВыборкаПоСотрудникам.ДеньТабеля<>0 Тогда
						ОбластьТабеля.Параметры.ДеньТабеля=1;
					Иначе
						ОбластьТабеля.Параметры.ДеньТабеля="-";
					КонецЕсли;					
				Иначе					
					ОбластьТабеля.Параметры.ДеньТабеля="-";
				КонецЕсли;				
			КонецЕсли;			
			ТабДокумент.Присоединить(ОбластьТабеля);
			
		КонецЦикла;
				
		ТекСотрудник=ВыборкаПоСотрудникам.Сотрудник;
		ТекНомерСтроки=ВыборкаПоСотрудникам.НомерСтроки;
		
	КОнецЦикла;
	
	ВывестиИтогиПоСотруднику(ТекСотрудник,ТекНомерСтроки,ТаблицаИтогов,ТаблицаВыходных,ОбластьИтоги);
	ТабДокумент.Присоединить(ОбластьИтоги);
	ОбластьПодвал.Параметры.Заполнить(ВыборкаОтветственныйКадровик);
	ОбластьПодвал.Параметры.Начальник=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоШапке.Табельщик);
	Если ЗначениеЗаполнено(ВыборкаПоШапке.Исполнитель) Тогда
		ОбластьПодвал.Параметры.Начальник=ВыборкаПоШапке.ИсполнительДолжность+" "+УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоШапке.Исполнитель);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаПоШапке.РаботникКадровойСлужбы) Тогда
		ОбластьПодвал.Параметры.ДолжностьКадровика=ВыборкаПоШапке.РаботникКадровойСлужбыДолжность+" "+УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоШапке.РаботникКадровойСлужбы);
	КонецЕсли;
	Если ИмяМакета="Табель" ТОгда
		ОбластьПодвал.Параметры.Экономист="Экономист";
		Если ЗначениеЗаполнено(ВыборкаПоШапке.Экономист) Тогда
			ОбластьПодвал.Параметры.Экономист=ВыборкаПоШапке.ЭкономистДолжность+" "+УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоШапке.Экономист);
		КонецЕсли;
	КонецЕсли;		
	ТабДокумент.Вывести(ОбластьПодвал);
	ОбластьОТ.Параметры.ИнспекторОТ = "Инспектор ОТ";
	Если ЗначениеЗаполнено(ВыборкаПоШапке.ИнспекторОТ) Тогда
		ОбластьОТ.Параметры.ИнспекторОТ=ВыборкаПоШапке.ИнспекторОТДолжность+" "+УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоШапке.ИнспекторОТ);
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьОТ);
	ТабДокумент.ФиксацияСверху=13;
	ТабДокумент.ФиксацияСлева=5;
	ТабДокумент.АвтоМасштаб=Истина;
	ТабДокумент.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	
	Возврат ТабДокумент;
	
КонецФункции
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	//vvv	
	Если ИмяМакета="Табель" ТОгда
		Если Не  Проведен Тогда
			//РаботаСДиалогами.ВывестиПредупреждение("Документ можно распечатать только после расчета и проведения!");
			//Возврат Неопределено;
			Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		ТабДокумент=ПечатьТабеля();
		Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним));
	ИначеЕсли ИмяМакета="ТабельПоДням" ТОгда
		Если Не  Проведен Тогда
			РаботаСДиалогами.ВывестиПредупреждение("Документ можно распечатать только после расчета и проведения!");
			Возврат Неопределено;
		КонецЕсли;
		ТабДокумент=ПечатьТабеля(Истина);
		Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним));	
	Иначе
	//
	ТабельУчетаРабочегоВремениОрганизацииПереопределяемый.Печать(ИмяМакета, КоличествоЭкземпляров, НаПринтер, ЭтотОбъект);
	КонецЕсли;
КонецФункции // Печать()
	
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//	Структура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	//vvv
	СтруктураМакетов.Вставить("Табель","Табель во вредных условиях труда");
	СтруктураМакетов.Вставить("ТабельПоДням","Табель во вредных условиях труда по дням");
	//
	ТабельУчетаРабочегоВремениОрганизацииПереопределяемый.ДополнитьСтруктуруПечатныхФорм(СтруктураМакетов);
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Создает структуру, с параметрами выводимого сообщения 
// для помещения в массив сообщений-структур
Функция СоздатьСообщениеСтруктуру(ТекстСообщения, ВидСообщения, РасшифровкаСообщения = Неопределено)
	СтруктураСообщения = Новый Структура;
	СтруктураСообщения.Вставить("ТекстСообщения", ТекстСообщения);
	СтруктураСообщения.Вставить("ВидСообщения", ВидСообщения);
	СтруктураСообщения.Вставить("РасшифровкаСообщения", РасшифровкаСообщения);
	Возврат СтруктураСообщения
КонецФункции // СоздатьСообщениеСтруктуру()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция возвращает значение перечислеиня ВидыУчетаВремени, соответствующее 
// справочнику КлассификаторИспользованияРабочегоВремени.
Функция ПолучитьВидУчетаВремениПоКлассификатору(ВидВремени)
	
	Если ВидВремени.Пустая() Тогда
		Возврат ВидУчетаВремениПоЧасам;
	ИначеЕсли ВидВремени = КлассификаторВечернееВремя Тогда
		Возврат Перечисления.ВидыУчетаВремени.ПоВечернимЧасам;
	ИначеЕсли ВидВремени = КлассификаторНочноеВремя Тогда
		Возврат Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;
	Иначе
		Возврат ВидУчетаВремениПоЧасам;
	КонецЕсли;
	
КонецФункции


// Процедура проверяет, нет ли уже аналогичных записей с ключевыми полями в регистре сведений
// ГрафикиРаботыПоВидамВремени.
// Возвращает Истина если проведение возможно, иначе Ложь.
Процедура ПроверитьУникальностьЗаписей(Отказ)
	
	ЗапросПроверкаУникальности = Новый Запрос;
	ЗапросПроверкаУникальности.УстановитьПараметр("ДокументСсылка", Ссылка);
	ЗапросПроверкаУникальности.УстановитьПараметр("Месяц", ПериодРегистрации);
	ЗапросПроверкаУникальности.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПериодРегистрации));
	ЗапросПроверкаУникальности.УстановитьПараметр("КонецМесяца", КонецМесяца(ПериодРегистрации));
	
	ЗапросПроверкаУникальности.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы.Сотрудник,
	|	ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы.Сотрудник.Наименование,
	|	ВЫБОР
	|		КОГДА (НЕ ОтработанныеВоВредных.НомерСтроки ЕСТЬ NULL )
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ОтработанныеВоВредных.Регистратор)
	|	КОНЕЦ КАК ДокументПредставление
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтработанныеВоВредных КАК ОтработанныеВоВредных
	|		ПО (ОтработанныеВоВредных.Сотрудник = ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы.Сотрудник)
	|			И (ОтработанныеВоВредных.Месяц = &Месяц)
	|			И (ОтработанныеВоВредных.Регистратор <> &ДокументСсылка)
	|ГДЕ
	|	ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы.Ссылка = &ДокументСсылка
	|	И (НЕ ОтработанныеВоВредных.НомерСтроки ЕСТЬ NULL )";
	
	РезультатЗапроса = ЗапросПроверкаУникальности.Выполнить().Выбрать();		
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		СтрокаСотрудников = "";
		
		Пока РезультатЗапроса.Следующий() Цикл
			СтрокаСотрудников = СтрокаСотрудников + Символы.ПС + РезультатЗапроса.СотрудникНаименование + " (" + РезультатЗапроса.ДокументПредставление + ")";
		КонецЦикла;
		
		МассивСообщений.Добавить(Перечисления.ВидыСообщений.Ошибка, "На следующих сотрудников уже введены документы учета времени в этом периоде:" + СтрокаСотрудников);
		Отказ = Истина;
 	КонецЕсли;

КонецПроцедуры // ПроверитьУникальностьЗаписей()	

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)
	
	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация) Тогда
		МассивСообщений.Добавить(СоздатьСообщениеСтруктуру(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация, по которой вводится табель!"), Перечисления.ВидыСообщений.Ошибка));
		Отказ = Истина;
	КонецЕсли;
	
	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		МассивСообщений.Добавить(СоздатьСообщениеСтруктуру("Не указан период регистрации!", Перечисления.ВидыСообщений.Ошибка));
		Отказ = Истина
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура удаляет все записи из регистра за ПериодРегистрации,
// если документ последний в этом периоде, в разрезе сотрудников
Процедура УдалитьЗаписиЗаПериодДокумента()
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботы.Сотрудник КАК ГрафикРаботы,
	|	ГрафикиРаботы.Ссылка.ПериодРегистрации КАК Месяц
	|ПОМЕСТИТЬ ВТСотрудникоМесяц
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.Ссылка = &Документ";
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|СотрудникоМесяц.ГрафикРаботы КАК Сотрудник,
	|СотрудникоМесяц.Месяц КАК Месяц,
	|ВЫБОР 
	|	КОГДА ВведенныеДокументы.ГрафикРаботы ЕСТЬ NULL 
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|КОНЕЦ КАК УдалятьЗаписиЗаПериод
	|
	|ИЗ
	|	ВТСотрудникоМесяц КАК СотрудникоМесяц
	|ЛЕВОЕ СОЕДИНЕНИЕ	
	|	(ВЫБРАТЬ
	|	СотрудникоМесяц.ГрафикРаботы,
	|	СотрудникоМесяц.Месяц
	|	ИЗ
	|		ВТСотрудникоМесяц КАК СотрудникоМесяц
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ПО
	|		ГрафикиРаботы.ГрафикРаботы = СотрудникоМесяц.ГрафикРаботы
	|		И НЕ ГрафикиРаботы.План
	|		И ГрафикиРаботы.Месяц = СотрудникоМесяц.Месяц
	|		И ГрафикиРаботы.Документ <> &Документ
	|		И ГрафикиРаботы.Документ <> ЗНАЧЕНИЕ(Документ.СдельныйНаряд.ПустаяСсылка)
	|		И ГрафикиРаботы.Документ <> ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениВредность.ПустаяСсылка)
	|		И ГрафикиРаботы.Документ <> НЕОПРЕДЕЛЕНО
	|	)КАК ВведенныеДокументы
	|ПО
	|	ВведенныеДокументы.ГрафикРаботы = СотрудникоМесяц.ГрафикРаботы
	|	И ВведенныеДокументы.Месяц = СотрудникоМесяц.Месяц";
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		НаборЗаписей.Отбор.План.Установить(Ложь);
		НаборЗаписей.Отбор.ГрафикРаботы.Установить(ВыборкаЗапроса.Сотрудник);
		НаборЗаписей.Отбор.Месяц.Установить(ВыборкаЗапроса.Месяц);
		
		Если ВыборкаЗапроса.УдалятьЗаписиЗаПериод Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		Иначе
			
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Если (Запись.Документ = Ссылка) Тогда
					Запись.ОсновноеЗначениеПолное = 0;
					Запись.ДополнительноеЗначениеПолное = 0;
					Запись.Документ = Документы.ТабельУчетаРабочегоВремениВредность.ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры  // УдалитьЗаписиЗаПериодДокумента()

// Функция, упорядочивает колонки табличной части сводного табеля
Процедура УпорядочитьКолонкиСводногоТабеля()
	Если ПорядокСортировкиВидовВремени = Неопределено Тогда
		ПорядокСортировкиВидовВремени = ПроцедурыУправленияПерсоналом.ПолучитьМассивУпорядоченныхВидовИспользованияРабочегоВремени();
	КонецЕсли;
	
	ТаблицаСортировки = Новый ТаблицаЗначений;
	ТаблицаСортировки = КолонкиСводногоТабеля.Выгрузить();
	ТаблицаСортировки.Колонки.Добавить("СтарыйНомерВВ");
	ТаблицаСортировки.Колонки.Добавить("НовыйНомерВВ");
	ТаблицаСортировки.Колонки.Добавить("КолонкаСортировки");
	Для Каждого СтрокаТаблицыСортировки Из ТаблицаСортировки Цикл
		СтрокаТаблицыСортировки.СтарыйНомерВВ = СтрокаТаблицыСортировки.НомерСтроки;
		СтрокаТаблицыСортировки.КолонкаСортировки = ПорядокСортировкиВидовВремени.Найти(СтрокаТаблицыСортировки.ВидВремени);
	КонецЦикла;
	
	
	КолонкиСводногоТабеля.Очистить();
	СоответствияКолонок = Новый Соответствие;
	КолонкиДляПеремещения = "";
	
	ТаблицаСортировки.Сортировать("КолонкаСортировки");
	Для Каждого СтрокаТаблицыСортировки Из ТаблицаСортировки Цикл
		СтрокаТаблицыСортировки.СтарыйНомерВВ = СтрокаТаблицыСортировки.НомерСтроки;
		СтрокаТаблицыСортировки.КолонкаСортировки = ПорядокСортировкиВидовВремени.Найти(СтрокаТаблицыСортировки.ВидВремени);
		СтрокаТаблицыСортировки.НовыйНомерВВ = ТаблицаСортировки.Индекс(СтрокаТаблицыСортировки) + 1;
		КолонкиДляПеремещения = КолонкиДляПеремещения + ", ВидВремени" + СтрокаТаблицыСортировки.СтарыйНомерВВ
		+ ", Дней" +  СтрокаТаблицыСортировки.СтарыйНомерВВ
		+ ", Часов" +  СтрокаТаблицыСортировки.СтарыйНомерВВ;
		СоответствияКолонок.Вставить("_ВидВремени" + СтрокаТаблицыСортировки.СтарыйНомерВВ, "ВидВремени" + СтрокаТаблицыСортировки.НовыйНомерВВ);
		СоответствияКолонок.Вставить("_Дней" + СтрокаТаблицыСортировки.СтарыйНомерВВ, "Дней" + СтрокаТаблицыСортировки.НовыйНомерВВ);
		СоответствияКолонок.Вставить("_Часов" + СтрокаТаблицыСортировки.СтарыйНомерВВ, "Часов" + СтрокаТаблицыСортировки.НовыйНомерВВ);
		КолонкиСводногоТабеля.Добавить().ВидВремени = СтрокаТаблицыСортировки.ВидВремени;
	КонецЦикла;
	
	КолонкиДляПеремещения = "Сотрудник, ФизЛицо" + КолонкиДляПеремещения;
	СоответствияКолонок.Вставить("_Сотрудник", "Сотрудник");
	СоответствияКолонок.Вставить("_ФизЛицо", "ФизЛицо");
	ТаблицаПеремещенияКолонок = ОтработанноеВремяВЦеломЗаПериод.Выгрузить(,КолонкиДляПеремещения);
	Для Каждого КолонкаТаблицыПеремещения Из ТаблицаПеремещенияКолонок.Колонки Цикл
		КолонкаТаблицыПеремещения.Имя = "_" + КолонкаТаблицыПеремещения.Имя;
	КонецЦикла;
	Для Каждого КолонкаТаблицыПеремещения Из ТаблицаПеремещенияКолонок.Колонки Цикл
		КолонкаТаблицыПеремещения.Имя = СоответствияКолонок.Получить(КолонкаТаблицыПеремещения.Имя);
	КонецЦикла;
	ОтработанноеВремяВЦеломЗаПериод.Загрузить(ТаблицаПеремещенияКолонок);
	
	
	
	
	
КонецПроцедуры // УпорядочитьКолонкиСводногоТабеля()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениВредность.Дата,
	|	ТабельУчетаРабочегоВремениВредность.ПериодРегистрации,
	|	ТабельУчетаРабочегоВремениВредность.СпособВводаДанных,
	|	ТабельУчетаРабочегоВремениВредность.ДатаНачалаПериода,
	|	ТабельУчетаРабочегоВремениВредность.ДатаОкончанияПериода,
	|	ТабельУчетаРабочегоВремениВредность.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ТабельУчетаРабочегоВремениВредность.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА ТабельУчетаРабочегоВремениВредность.Организация
	|		ИНАЧЕ ТабельУчетаРабочегоВремениВредность.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ТабельУчетаРабочегоВремениВредность.Организация Как Организация,
	|	ТабельУчетаРабочегоВремениВредность.Ссылка КАК Документ
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениВредность КАК ТабельУчетаРабочегоВремениВредность
	|ГДЕ
	|	ТабельУчетаРабочегоВремениВредность.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()


// Формирует запрос по таблице "ОтработанноеВремя" документа
//
// Параметры:
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоОтработанноеВремя(ВыборкаПоШапкеДокумента, ТаблицаСотрудниковСПустымиЯчейками)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДокументСсылка",			 Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	 ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации",ВыборкаПоШапкеДокумента.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Месяц", 					 ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("НачалоПериода",			 ВыборкаПоШапкеДокумента.ДатаНачалаПериода);
	Запрос.УстановитьПараметр("КонецПериода",			 ВыборкаПоШапкеДокумента.ДатаОкончанияПериода);
	
	Для ИндексДня = 1 По День(КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации)) Цикл
		Если ИндексДня = 1 Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ 
			|		" + Строка(ИндексДня) + " КАК ИндексДня		
			|ПОМЕСТИТЬ ВТКалендарныеДни
			|";
		Иначе 	
			ТекстЗапроса = ТекстЗапроса + 
			"	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ 
			|		" + Строка(ИндексДня) + "		
			|";
		КонецЕсли;
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса + " ; ";
	
	
	ИндексНачальногоДня = День(ВыборкаПоШапкеДокумента.ДатаНачалаПериода);
	ИндексКонечногоДня = День(ВыборкаПоШапкеДокумента.ДатаОкончанияПериода);
	
	Для ИндексДня = ИндексНачальногоДня По ИндексКонечногоДня Цикл
		СтрИндексДня = Строка(ИндексДня);
		Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ 
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки КАК НомерСтроки,		
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПроцентВредности КАК ПроцентВредности,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйВидВремени"+СтрИндексДня+" КАК ВидВремени,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйЧасов"+СтрИндексДня+" КАК Часов,
		|		"+СтрИндексДня+" КАК ИндексДня
		|ПОМЕСТИТЬ ВТДанныеТабеляПоДням" + СтрИндексДня + "
		|	ИЗ
		|		Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ 
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки,		
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПроцентВредности,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойВидВремени"+СтрИндексДня+",
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойЧасов"+СтрИндексДня+",
		|		"+СтрИндексДня+"
		|	ИЗ
		|		Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ 
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки,		
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПроцентВредности,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийВидВремени"+СтрИндексДня+",
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийЧасов"+СтрИндексДня+",
		|		"+СтрИндексДня+"
		|	ИЗ
		|		Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ 
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки,		
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПроцентВредности,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ЧетвертыйВидВремени"+СтрИндексДня+",
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ЧетвертыйЧасов"+СтрИндексДня+",
		|		"+СтрИндексДня+"
		|	ИЗ
		|		Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник ; 
		| ";
		
		
		Если ИндексДня = ИндексНачальногоДня Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ 
			|		ДанныеТабеляПоДням.ИндексДня,		
			|		ДанныеТабеляПоДням.ВидВремени,		
			|		СУММА(ДанныеТабеляПоДням.Часов) КАК Часов,		
			|		ДанныеТабеляПоДням.Сотрудник,
			|		ДанныеТабеляПоДням.ПроцентВредности,
			|		ДанныеТабеляПоДням.НомерСтроки
			|ПОМЕСТИТЬ ВТДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения
			|	ИЗ
			|		ВТДанныеТабеляПоДням"+СтрИндексДня+" КАК ДанныеТабеляПоДням
			|	СГРУППИРОВАТЬ ПО ИндексДня, ВидВремени, Сотрудник, ПроцентВредности, НомерСтроки
			|";
		Иначе 	
			ТекстЗапроса = ТекстЗапроса + 
			"	ОБЪЕДИНИТЬ  
			|
			|	ВЫБРАТЬ 
			|		ДанныеТабеляПоДням.ИндексДня,		
			|		ДанныеТабеляПоДням.ВидВремени,		
			|		Сумма(ДанныеТабеляПоДням.Часов) КАК Часов,		
			|		ДанныеТабеляПоДням.Сотрудник,
			|		ДанныеТабеляПоДням.ПроцентВредности,
			|		ДанныеТабеляПоДням.НомерСтроки
			|	ИЗ
			|		ВТДанныеТабеляПоДням"+СтрИндексДня+" КАК ДанныеТабеляПоДням
			|	СГРУППИРОВАТЬ ПО ИндексДня, ВидВремени, Сотрудник, ПроцентВредности, НомерСтроки
			|";
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст  + ТекстЗапроса + 
	"ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник ; ";

	
	
	
	Запрос.Текст = Запрос.Текст  + "ВЫБРАТЬ
	|	Пустые.Сотрудник,
	|	Пустые.ИндексДня,
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Месяц, МЕСЯЦ), ДЕНЬ, Пустые.ИндексДня - 1) КАК ДатаДня
	|ПОМЕСТИТЬ ВТСписокПустыхДней
	|ИЗ
	|	ВТДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения КАК Пустые
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения КАК Полные
	|		ПО (Полные.ВидВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка))
	|			И (Полные.ИндексДня = Пустые.ИндексДня)
	|			И (Полные.Сотрудник = Пустые.Сотрудник)
	|ГДЕ
	|	Пустые.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
	|	И Полные.ИндексДня ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокПустыхДней.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСписокСотрудников
	|ИЗ
	|	ВТСписокПустыхДней КАК СписокПустыхДней
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения < &НачалоПериода
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации
	|ПОМЕСТИТЬ ВТПодразделенияСотрудников
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&НачалоПериода,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					СписокСотрудников.Сотрудник
	|				ИЗ
	|					ВТСписокСотрудников КАК СписокСотрудников)) КАК РаботникиОрганизаций
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСотрудников.Сотрудник,
	|	РаботникиОрганизаций.ПодразделениеОрганизации
	|ИЗ
	|	ВТСписокСотрудников КАК СписокСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО (РаботникиОрганизаций.Период МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (РаботникиОрганизаций.Сотрудник = СписокСотрудников.Сотрудник)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСотрудников.Сотрудник,
	|	РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
	|ИЗ
	|	ВТСписокСотрудников КАК СписокСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО (РаботникиОрганизаций.ПериодЗавершения МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (РаботникиОрганизаций.Сотрудник = СписокСотрудников.Сотрудник)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПодразделениеОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыСрезаРаботников.Сотрудник КАК Сотрудник,
	|	ПРЕДСТАВЛЕНИЕ(ПериодыСрезаРаботников.Сотрудник) КАК ПредставлениеСотрудника
	|ПОМЕСТИТЬ ВТСписокСотрудниковСПустымиЯчейками
	|ИЗ
	|	(ВЫБРАТЬ
	|		СписокПустыхДней.Сотрудник КАК Сотрудник,
	|		СписокПустыхДней.ИндексДня КАК ИндексДня,
	|		СписокПустыхДней.ДатаДня КАК ДатаДня,
	|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ПериодСрезаРаботников
	|	ИЗ
	|		ВТСписокПустыхДней КАК СписокПустыхДней
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО (РаботникиОрганизаций.Сотрудник = СписокПустыхДней.Сотрудник)
	|				И (РаботникиОрганизаций.Период <= СписокПустыхДней.ДатаДня)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СписокПустыхДней.Сотрудник,
	|		СписокПустыхДней.ИндексДня,
	|		СписокПустыхДней.ДатаДня) КАК ПериодыСрезаРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО (РаботникиОрганизаций.Сотрудник = ПериодыСрезаРаботников.Сотрудник)
	|			И ПериодыСрезаРаботников.ПериодСрезаРаботников = РаботникиОрганизаций.Период
	|ГДЕ
	|	ЕСТЬNULL(ВЫБОР
	|				КОГДА РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|						И РаботникиОрганизаций.ПериодЗавершения <= ПериодыСрезаРаботников.ДатаДня
	|					ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
	|				ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
	|			КОНЕЦ, ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И ВЫБОР
	|			КОГДА &ПодразделениеОрганизации = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			КОГДА (НЕ (&ПодразделениеОрганизации, ПериодыСрезаРаботников.Сотрудник) В
	|						(ВЫБРАТЬ
	|							ПодразделенияСотрудников.ПодразделениеОрганизации,
	|							ПодразделенияСотрудников.Сотрудник
	|						ИЗ
	|							ВТПодразделенияСотрудников КАК ПодразделенияСотрудников))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|							И РаботникиОрганизаций.ПериодЗавершения <= ПериодыСрезаРаботников.ДатаДня
	|							И РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|						ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
	|					ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
	|				КОНЕЦ = &ПодразделениеОрганизации
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения.ИндексДня,
	|	ВЫБОР
	|		КОГДА ДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Праздники)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
	|		ИНАЧЕ ДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения.ВидВремени
	|	КОНЕЦ КАК ВидВремени,
	|	ДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения.Часов,
	|	ДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения.Сотрудник КАК Сотрудник,
	|	ДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения.ПроцентВредности КАК ПроцентВредности,
	|	ДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТДанныеТабеляПоДням
	|ИЗ
	|	ВТДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения КАК ДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения
	|ГДЕ
	|	(НЕ ДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения.ВидВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеупорядоченныйЗапрос.Сотрудник КАК Сотрудник,
	|	НеупорядоченныйЗапрос.ПроцентВредности КАК ПроцентВредности,
	|	НеупорядоченныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(НеупорядоченныйЗапрос.Сотрудник) КАК ПредставлениеСотрудника,
	|	НеупорядоченныйЗапрос.ДеньМесяца КАК ДеньМесяца,
	|	НеупорядоченныйЗапрос.ВидВремени КАК ВидВремени,
	|	НеупорядоченныйЗапрос.ВидВремени.РабочееВремя КАК ВидВремениРабочееВремя,
	|	НеупорядоченныйЗапрос.Часов,
	|	НеупорядоченныйЗапрос.ЗаписатьПустоеЗначение,
	|	НеупорядоченныйЗапрос.ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	НеупорядоченныйЗапрос.КоличествоДублей,
	|	ВЫБОР
	|		КОГДА НеупорядоченныйЗапрос.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
	|			ТОГДА 3
	|		КОГДА НеупорядоченныйЗапрос.ВидВремени.РабочееВремя
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПолеУпорядочивания
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОбщийЗапрос.Сотрудник КАК Сотрудник,
	|		ОбщийЗапрос.ПроцентВредности КАК ПроцентВредности,
	|		ОбщийЗапрос.НомерСтроки КАК НомерСтроки,
	|		ОбщийЗапрос.ДеньМесяца КАК ДеньМесяца,
	|		ЕСТЬNULL(ОбщийЗапрос.ВидВремени, ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)) КАК ВидВремени,
	|		МАКСИМУМ(ЕСТЬNULL(ОбщийЗапрос.Часов, 0)) КАК Часов,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ОбщийЗапрос.ЗаписатьПустогоСотрудника ЕСТЬ NULL 
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК ЗаписатьПустоеЗначение,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ОбщийЗапрос.ПроверкаСотрудникаИОрганизации ЕСТЬ NULL 
	|					ТОГДА ЛОЖЬ
	|				КОГДА ОбщийЗапрос.ПроверкаСотрудникаИОрганизации.Организация = &ГоловнаяОрганизация
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ) КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|		МАКСИМУМ(ЕСТЬNULL(ОбщийЗапрос.КоличествоДублей, 0)) КАК КоличествоДублей
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СотрудникиДокумента.Сотрудник КАК Сотрудник,
	|			СотрудникиДокумента.ПроцентВредности КАК ПроцентВредности,
	|			СотрудникиДокумента.НомерСтроки КАК НомерСтроки,
	|			ДанныеТабеляПоДням.ИндексДня КАК ДеньМесяца,
	|			ДанныеТабеляПоДням.ВидВремени КАК ВидВремени,
	|			ДанныеТабеляПоДням.Часов КАК Часов,
	|			ДанныеТабеляПоДням.Сотрудник КАК ЗаписатьПустогоСотрудника,
	|			СотрудникиДокумента.Сотрудник КАК ПроверкаСотрудникаИОрганизации,
	|			СотрудникиДокумента.КоличествоДублей КАК КоличествоДублей
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник,
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПроцентВредности КАК ПроцентВредности,
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки КАК НомерСтроки,
	|				КОЛИЧЕСТВО(ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник) КАК КоличествоДублей,
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка КАК Ссылка
	|			ИЗ
	|				Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
	|			ГДЕ
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПроцентВредности,
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки,
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка) КАК СотрудникиДокумента
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеТабеляПоДням КАК ДанныеТабеляПоДням
	|				ПО СотрудникиДокумента.Сотрудник = ДанныеТабеляПоДням.Сотрудник
	|				И СотрудникиДокумента.ПроцентВредности = ДанныеТабеляПоДням.ПроцентВредности
	|				И СотрудникиДокумента.НомерСтроки = ДанныеТабеляПоДням.НомерСтроки
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			Сотрудники.Сотрудник,
	|			Сотрудники.ПроцентВредности,
	|			Сотрудники.НомерСтроки,
	|			Даты.ИндексДня,
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(ДанныеИндГрафика.ВидУчетаВремени, ДанныеОбщегоГрафика.ВидУчетаВремени) = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ВидыУчетаВремени.ПоЧасам)
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
	|				КОГДА ЕСТЬNULL(ДанныеИндГрафика.ВидУчетаВремени, ДанныеОбщегоГрафика.ВидУчетаВремени) = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ВидыУчетаВремени.ПоВечернимЧасам)
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
	|				КОГДА ЕСТЬNULL(ДанныеИндГрафика.ВидУчетаВремени, ДанныеОбщегоГрафика.ВидУчетаВремени) = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ВидыУчетаВремени.ПоНочнымЧасам)
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
	|			КОНЕЦ,
	|			ЕСТЬNULL(ДанныеИндГрафика.ОсновноеЗначение, ДанныеОбщегоГрафика.ОсновноеЗначение),
	|			NULL,
	|			Сотрудники.Сотрудник,
	|			NULL
	|		ИЗ
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник,
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПроцентВредности КАК ПроцентВредности,
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки КАК НомерСтроки
	|			ИЗ
	|				Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|					ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник)
	|						И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
	|						И ((НЕ ГрафикиРаботыПоВидамВремени.План))
	|			ГДЕ
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
	|				И ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL ) КАК Сотрудники
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарныеДни КАК Даты
	|				ПО (ИСТИНА)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеТабеляПоДням КАК ДанныеТабеляПоДням
	|				ПО (ДанныеТабеляПоДням.Сотрудник = Сотрудники.Сотрудник)
	|					И (ДанныеТабеляПоДням.ИндексДня = Даты.ИндексДня)
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					Даты.ИндексДня КАК ИндексДня,
	|					РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|					МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|				ИЗ
	|					ВТКалендарныеДни КАК Даты
	|						ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|							РаботникиОрганизаций.Период КАК Период,
	|							РаботникиОрганизаций.ГрафикРаботы КАК ГрафикРаботы
	|						ИЗ
	|							РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|									&Месяц,
	|									Сотрудник В
	|											(ВЫБРАТЬ
	|												ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник
	|											ИЗ
	|												Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
	|											ГДЕ
	|												ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка)
	|										И ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|										И Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизаций
	|						
	|						ОБЪЕДИНИТЬ
	|						
	|						ВЫБРАТЬ
	|							РаботникиОрганизаций2.Сотрудник,
	|							РаботникиОрганизаций2.Период,
	|							РаботникиОрганизаций2.ГрафикРаботы
	|						ИЗ
	|							РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций2
	|						ГДЕ
	|							РаботникиОрганизаций2.Сотрудник В
	|									(ВЫБРАТЬ
	|										ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник
	|									ИЗ
	|										Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
	|									ГДЕ
	|										ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка)
	|							И РаботникиОрганизаций2.Организация = &ГоловнаяОрганизация
	|							И РаботникиОрганизаций2.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Месяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Месяц, МЕСЯЦ)) КАК РаботникиОрганизаций
	|						ПО (НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Период, МЕСЯЦ) < &Месяц
	|								ИЛИ НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Период, МЕСЯЦ) = &Месяц
	|									И ДЕНЬ(РаботникиОрганизаций.Период) <= Даты.ИндексДня)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					Даты.ИндексДня,
	|					РаботникиОрганизаций.Сотрудник) КАК РаботникиОрганизаций
	|				ПО (РаботникиОрганизаций.Сотрудник = Сотрудники.Сотрудник)
	|					И (РаботникиОрганизаций.ИндексДня = Даты.ИндексДня)
	|					И (ДанныеТабеляПоДням.ВидВремени ЕСТЬ NULL )
	|					И (ДанныеТабеляПоДням.Сотрудник ЕСТЬ NULL )
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПолучениеГрафикаСотрудника
	|				ПО (ПолучениеГрафикаСотрудника.Организация = &ГоловнаяОрганизация)
	|					И (ПолучениеГрафикаСотрудника.Сотрудник = РаботникиОрганизаций.Сотрудник)
	|					И (ПолучениеГрафикаСотрудника.Период = РаботникиОрганизаций.Период)
	|					И (ДанныеТабеляПоДням.ВидВремени ЕСТЬ NULL )
	|					И (ДанныеТабеляПоДням.Сотрудник ЕСТЬ NULL )
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ДанныеИндГрафика
	|				ПО (ДанныеИндГрафика.ГрафикРаботы = Сотрудники.Сотрудник)
	|					И (ДанныеИндГрафика.Месяц = &Месяц)
	|					И (ДанныеИндГрафика.План)
	|					И (ДанныеИндГрафика.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)))
	|					И (ДЕНЬ(ДанныеИндГрафика.Дата) = Даты.ИндексДня)
	|					И (ДанныеТабеляПоДням.ВидВремени ЕСТЬ NULL )
	|					И (ДанныеТабеляПоДням.Сотрудник ЕСТЬ NULL )
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ДанныеОбщегоГрафика
	|				ПО (ДанныеОбщегоГрафика.ГрафикРаботы = ПолучениеГрафикаСотрудника.ГрафикРаботы)
	|					И (ДанныеОбщегоГрафика.Месяц = &Месяц)
	|					И (ДанныеОбщегоГрафика.План)
	|					И (ДанныеОбщегоГрафика.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)))
	|					И (ДЕНЬ(ДанныеОбщегоГрафика.Дата) = Даты.ИндексДня)
	|					И (ДанныеИндГрафика.ГрафикРаботы ЕСТЬ NULL )
	|					И (ДанныеТабеляПоДням.ВидВремени ЕСТЬ NULL )
	|					И (ДанныеТабеляПоДням.Сотрудник ЕСТЬ NULL )
	|					И ((НЕ(ДанныеОбщегоГрафика.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам))
	|							И ДанныеОбщегоГрафика.ОсновноеЗначение = 0)))
	|		ГДЕ
	|			ДанныеТабеляПоДням.ВидВремени ЕСТЬ NULL 
	|			И ДанныеТабеляПоДням.Сотрудник ЕСТЬ NULL 
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			Сотрудники.Сотрудник,
	|			Сотрудники.ПроцентВредности,
	|			Сотрудники.НомерСтроки,
	|			Даты.ИндексДня,
	|			ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы),
	|			0,
	|			NULL,
	|			Сотрудники.Сотрудник,
	|			NULL
	|		ИЗ
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник,
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПроцентВредности КАК ПроцентВредности,
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки КАК НомерСтроки
	|			ИЗ
	|				Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|					ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник)
	|						И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
	|						И ((НЕ ГрафикиРаботыПоВидамВремени.План))
	|			ГДЕ
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
	|				И ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL ) КАК Сотрудники
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарныеДни КАК Даты
	|				ПО (ИСТИНА)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеТабеляПоДням КАК ДанныеТабеляПоДням
	|				ПО (ДанныеТабеляПоДням.Сотрудник = Сотрудники.Сотрудник)
	|					И (ДанныеТабеляПоДням.ИндексДня = Даты.ИндексДня)
	|					И (ДанныеТабеляПоДням.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа))
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеТабеляПоДням КАК ДанныеТабеляПоДнямНочные
	|				ПО (ДанныеТабеляПоДнямНочные.Сотрудник = Сотрудники.Сотрудник)
	|					И (ДанныеТабеляПоДнямНочные.ИндексДня = Даты.ИндексДня)
	|					И (ДанныеТабеляПоДнямНочные.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы))
	|		ГДЕ
	|			ДанныеТабеляПоДнямНочные.ВидВремени ЕСТЬ NULL 
	|			И ДанныеТабеляПоДнямНочные.Сотрудник ЕСТЬ NULL 
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			Сотрудники.Сотрудник,
	|			Сотрудники.ПроцентВредности,
	|			Сотрудники.НомерСтроки,
	|			Даты.ИндексДня,
	|			ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы),
	|			0,
	|			NULL,
	|			Сотрудники.Сотрудник,
	|			NULL
	|		ИЗ
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник,
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПроцентВредности КАК ПроцентВредности,
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки КАК НомерСтроки
	|			ИЗ
	|				Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|					ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник)
	|						И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
	|						И ((НЕ ГрафикиРаботыПоВидамВремени.План))
	|			ГДЕ
	|				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
	|				И ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL ) КАК Сотрудники
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарныеДни КАК Даты
	|				ПО (ИСТИНА)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеТабеляПоДням КАК ДанныеТабеляПоДням
	|				ПО (ДанныеТабеляПоДням.Сотрудник = Сотрудники.Сотрудник)
	|					И (ДанныеТабеляПоДням.ИндексДня = Даты.ИндексДня)
	|					И (ДанныеТабеляПоДням.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа))
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеТабеляПоДням КАК ДанныеТабеляПоДнямНочные
	|				ПО (ДанныеТабеляПоДнямНочные.Сотрудник = Сотрудники.Сотрудник)
	|					И (ДанныеТабеляПоДнямНочные.ИндексДня = Даты.ИндексДня)
	|					И (ДанныеТабеляПоДнямНочные.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы))
	|		ГДЕ
	|			ДанныеТабеляПоДнямНочные.ВидВремени ЕСТЬ NULL 
	|			И ДанныеТабеляПоДнямНочные.Сотрудник ЕСТЬ NULL ) КАК ОбщийЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОбщийЗапрос.Сотрудник,
	|		ОбщийЗапрос.ПроцентВредности,
	|		ОбщийЗапрос.НомерСтроки,
	|		ОбщийЗапрос.ДеньМесяца,
	|		ЕСТЬNULL(ОбщийЗапрос.ВидВремени, ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка))) КАК НеупорядоченныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДеньМесяца,
	|	ПолеУпорядочивания,
	|	ВидВремени";
	
	РезультатЗапроса =  Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСотрудниковСПустымиЯчейками.Сотрудник,
	|	СписокСотрудниковСПустымиЯчейками.ПредставлениеСотрудника
	|ИЗ
	|	ВТСписокСотрудниковСПустымиЯчейками КАК СписокСотрудниковСПустымиЯчейками";
	ТаблицаСотрудниковСПустымиЯчейками = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
КонецФункции // СформироватьЗапросПоОтработанноеВремя()

// Формирует запрос по таблице "ОтработанноеВремяВЦеломЗаПериод" документа
//
// Параметры:
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоОтработанноеВремяВЦеломЗаПериод(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("НачалоМесяца",НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецМесяца",КонецМесяца(ПериодРегистрации));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник КАК Сотрудник,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник.Организация КАК Организация,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.ФизЛицо,
	|	КолонкиСводногоТабеля.ВидВремени КАК ВидИспользованияРабочегоВремени,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Дней1 КАК Дней,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Часов1 КАК Часов
	|ПОМЕСТИТЬ ВТОтработанноеВремяВЦеломЗаПериод
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремяВЦеломЗаПериод КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТабельУчетаРабочегоВремениВредность.КолонкиСводногоТабеля КАК КолонкиСводногоТабеля
	|		ПО (КолонкиСводногоТабеля.НомерСтроки = 1)
	|			И (КолонкиСводногоТабеля.Ссылка = &ДокументСсылка)
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Ссылка = &ДокументСсылка
	|	И (НЕ КолонкиСводногоТабеля.ВидВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Праздники), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)))
	|	И (ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Дней1 > 0
	|			ИЛИ КолонкиСводногоТабеля.ВидВремени.РабочееВремя
	|			ИЛИ ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Часов1 > 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник.Организация,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.ФизЛицо,
	|	КолонкиСводногоТабеля.ВидВремени,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Дней2,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Часов2
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремяВЦеломЗаПериод КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТабельУчетаРабочегоВремениВредность.КолонкиСводногоТабеля КАК КолонкиСводногоТабеля
	|		ПО (КолонкиСводногоТабеля.НомерСтроки = 2)
	|			И (КолонкиСводногоТабеля.Ссылка = &ДокументСсылка)
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Ссылка = &ДокументСсылка
	|	И (НЕ КолонкиСводногоТабеля.ВидВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Праздники), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)))
	|	И (ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Дней2 > 0
	|			ИЛИ КолонкиСводногоТабеля.ВидВремени.РабочееВремя
	|			ИЛИ ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Часов2 > 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник.Организация,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.ФизЛицо,
	|	КолонкиСводногоТабеля.ВидВремени,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Дней3,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Часов3
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремяВЦеломЗаПериод КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТабельУчетаРабочегоВремениВредность.КолонкиСводногоТабеля КАК КолонкиСводногоТабеля
	|		ПО (КолонкиСводногоТабеля.НомерСтроки = 3)
	|			И (КолонкиСводногоТабеля.Ссылка = &ДокументСсылка)
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Ссылка = &ДокументСсылка
	|	И (НЕ КолонкиСводногоТабеля.ВидВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Праздники), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)))
	|	И (ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Дней3 > 0
	|			ИЛИ КолонкиСводногоТабеля.ВидВремени.РабочееВремя
	|			ИЛИ ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Часов3 > 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник.Организация,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.ФизЛицо,
	|	КолонкиСводногоТабеля.ВидВремени,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Дней4,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Часов4
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремяВЦеломЗаПериод КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТабельУчетаРабочегоВремениВредность.КолонкиСводногоТабеля КАК КолонкиСводногоТабеля
	|		ПО (КолонкиСводногоТабеля.НомерСтроки = 4)
	|			И (КолонкиСводногоТабеля.Ссылка = &ДокументСсылка)
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Ссылка = &ДокументСсылка
	|	И (НЕ КолонкиСводногоТабеля.ВидВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Праздники), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)))
	|	И (ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Дней4 > 0
	|			ИЛИ КолонкиСводногоТабеля.ВидВремени.РабочееВремя
	|			ИЛИ ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Часов4 > 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник.Организация,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.ФизЛицо,
	|	КолонкиСводногоТабеля.ВидВремени,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Дней5,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Часов5
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремяВЦеломЗаПериод КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТабельУчетаРабочегоВремениВредность.КолонкиСводногоТабеля КАК КолонкиСводногоТабеля
	|		ПО (КолонкиСводногоТабеля.НомерСтроки = 5)
	|			И (КолонкиСводногоТабеля.Ссылка = &ДокументСсылка)
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Ссылка = &ДокументСсылка
	|	И (НЕ КолонкиСводногоТабеля.ВидВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Праздники), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)))
	|	И (ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Дней5 > 0
	|			ИЛИ КолонкиСводногоТабеля.ВидВремени.РабочееВремя
	|			ИЛИ ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Часов5 > 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник.Организация,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.ФизЛицо,
	|	КолонкиСводногоТабеля.ВидВремени,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Дней6,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Часов6
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремяВЦеломЗаПериод КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТабельУчетаРабочегоВремениВредность.КолонкиСводногоТабеля КАК КолонкиСводногоТабеля
	|		ПО (КолонкиСводногоТабеля.НомерСтроки = 6)
	|			И (КолонкиСводногоТабеля.Ссылка = &ДокументСсылка)
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Ссылка = &ДокументСсылка
	|	И (НЕ КолонкиСводногоТабеля.ВидВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Праздники), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)))
	|	И (ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Дней6 > 0
	|			ИЛИ КолонкиСводногоТабеля.ВидВремени.РабочееВремя
	|			ИЛИ ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Часов6 > 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидИспользованияРабочегоВремени";
	Запрос.Выполнить();
	ТаблицаДокументаТекст = "ВТОтработанноеВремяВЦеломЗаПериод";

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Сотрудник,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Сотрудник) КАК ПредставлениеСотрудника,
	|	ТаблицаДокумента.ВидИспользованияРабочегоВремени,
	|	ТаблицаДокумента.Дней,
	|	ТаблицаДокумента.Часов,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	Дубли.КоличествоДублей
	|ИЗ " + ТаблицаДокументаТекст + " КАК ТаблицаДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|		Дубли.Сотрудник КАК Сотрудник,
	|		Дубли.ВидИспользованияРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|		КОЛИЧЕСТВО(Дубли.Сотрудник) КАК КоличествоДублей
	|	ИЗ
	|		" + ТаблицаДокументаТекст + " КАК Дубли
	|
	|	СГРУППИРОВАТЬ ПО
	|		Дубли.Сотрудник,
	|		Дубли.ВидИспользованияРабочегоВремени) КАК Дубли
	|	ПО Дубли.Сотрудник = ТаблицаДокумента.Сотрудник
	|		И Дубли.ВидИспользованияРабочегоВремени = ТаблицаДокумента.ВидИспользованияРабочегоВремени";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоОтработанноеВремяВЦеломЗаПериод()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОтработанноеВремя" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//								  из результата запроса к ТЧ документа,
//	Отказ						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиОтработанноеВремя(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)
	
	#Если Клиент Тогда
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	#КонецЕсли
	
	//СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	//""" табл. части ""Отработанное время"": ";
	СтрокаНачалаСообщенияОбОшибке = "В табл. части ""Отработанное время"": ";	
	//Если ВыборкаПоСтрокамДокумента.НомерСтроки = 0 Тогда // это строка-дополнение
	//	Возврат
	//КонецЕсли;
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		МассивСообщений.Добавить(СоздатьСообщениеСтруктуру(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Перечисления.ВидыСообщений.Ошибка));
		Отказ = Истина;
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ПроцентВредности=0 Тогда
		МассивСообщений.Добавить(СоздатьСообщениеСтруктуру(СтрокаНачалаСообщенияОбОшибке + "не указан процент вредности!", Перечисления.ВидыСообщений.Ошибка));
		Отказ = Истина;
	КонецЕсли;
	// Проверка дублирования сотрудников
	//Если ВыборкаПоСтрокамДокумента.КоличествоДублей > 1 Тогда
	//	МассивСообщений.Добавить(СоздатьСообщениеСтруктуру(СтрокаНачалаСообщенияОбОшибке + "обнаружен сотрудник, " + ВыборкаПоСтрокамДокумента.ПредставлениеСотрудника + " который введен второй раз!", Перечисления.ВидыСообщений.Ошибка));
	//	
	//	Отказ = Истина;
	//КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		МассивСообщений.Добавить(СоздатьСообщениеСтруктуру(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("указанный сотрудник оформлен на другую организацию!"), Перечисления.ВидыСообщений.Ошибка));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиОтработанноеВремя()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОтработанноеВремяВЦеломЗаПериод" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//								  из результата запроса к ТЧ документа,
//	Отказ						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиОтработанноеВремяВЦеломЗаПериод(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)
	СтрокаНачалаСообщенияОбОшибке = "В строке табл. части ""Отработанное время"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		МассивСообщений.Добавить(СоздатьСообщениеСтруктуру(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Перечисления.ВидыСообщений.Ошибка));
		Отказ = Истина;
	КонецЕсли;
	
	// Проверка дублирования сотрудников
	Если ВыборкаПоСтрокамДокумента.КоличествоДублей > 1 Тогда
		МассивСообщений.Добавить(СоздатьСообщениеСтруктуру(СтрокаНачалаСообщенияОбОшибке + "обнаружен сотрудник, " + ВыборкаПоСтрокамДокумента.ПредставлениеСотрудника + " который введен второй раз!", Перечисления.ВидыСообщений.Ошибка));
		Отказ = Истина;
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		МассивСообщений.Добавить(СоздатьСообщениеСтруктуру(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("указанный сотрудник оформлен на другую организацию!"), Перечисления.ВидыСообщений.Ошибка));
		Отказ = Истина;
	КонецЕсли;
	
	// ВидИспользованияРабочегоВремени
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени) Тогда
		МассивСообщений.Добавить(СоздатьСообщениеСтруктуру(СтрокаНачалаСообщенияОбОшибке + "не указано использование рабочего времени!", Перечисления.ВидыСообщений.Ошибка));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиОтработанноеВремяВЦеломЗаПериод()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определенной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРабочееВремяРаботниковОрганизацийВЦеломЗаПериод(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Если ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени=Справочники.КлассификаторИспользованияРабочегоВремени.Работа Тогда
		Движение = НаборЗаписей.Добавить();
	    	
		// Свойства
		Движение.Месяц								= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		
		// Измерения
		Движение.Сотрудник							= ВыборкаПоСтрокамДокумента.Сотрудник;
		
		// Ресурсы
		Движение.Дней								= ВыборкаПоСтрокамДокумента.Дней;
		Движение.Часов								= ВыборкаПоСтрокамДокумента.Часов;
	КонецЕсли;
	
	
КонецПроцедуры // ДобавитьСтрокуРабочееВремяРаботниковОрганизацийВЦеломЗаПериод()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определенной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)
	Движение = НаборЗаписей.Добавить();
	
	// Свойства
	Движение.Период								= Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ВыборкаПоСтрокамДокумента.ДеньМесяца);
	
	// Измерения
	Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	Движение.ВидИспользованияРабочегоВремени	= ВыборкаПоСтрокамДокумента.ВидВремени;
	
	// Ресурсы
	Движение.Дней								= ?(ВыборкаПоСтрокамДокумента.Часов = 0, 0, 1);
	Движение.Часов								= ВыборкаПоСтрокамДокумента.Часов;
	
	// Реквизиты
	Движение.ВЦеломЗаПериод						= Ложь;
	Движение.ПроцентВредности                   = ВыборкаПоСтрокамДокумента.ПроцентВредности;
	Движение.НомерСтрокиТабеля                  = ВыборкаПоСтрокамДокумента.НомерСтроки;
	
КонецПроцедуры // ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определенной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуГрафикиРаботыПоВидамВремениДни(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, ТаблицаНабора, ЗаполнятьРеквизитДокумент = ИСТИНА)
	ОбрабатываемаяДата = Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ВыборкаПоСтрокамДокумента.ДеньМесяца);
	
	СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоДням);
	СтруктураПоиска.Вставить("Дата", ОбрабатываемаяДата);
	
	МассивСтрок = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		Движение = МассивСтрок[0];
		Если Не Движение.Документ.Пустая() Тогда
			Возврат;
		КонецЕсли;
	Иначе
		
		Движение = ТаблицаНабора.Добавить();
		Движение.ГрафикРаботы = ВыборкаПоСтрокамДокумента.Сотрудник;
		Движение.ВидУчетаВремени = ВидУчетаВремениПоДням;
		Движение.Дата = ОбрабатываемаяДата;
		Движение.План = Ложь;
		Движение.Месяц = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		
	КонецЕсли;
	
	// Ресурсы
	//Если ВыборкаПоСтрокамДокумента.ВидВремени.РабочееВремя = Ложь Тогда
	//	Движение.ОсновноеЗначениеПолное = 0;
	//	Движение.ДополнительноеЗначениеПолное = 0;
	//Иначе
	//Если ВремяЯвки > 0 Тогда
	Если ВыборкаПоСтрокамДокумента.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
		Движение.ОсновноеЗначениеПолное = 0;
		Движение.ДополнительноеЗначениеПолное = 0;
	Иначе
		Движение.ОсновноеЗначениеПолное = ?(ВремяЗаДень = 0, 0, 1);
		Движение.ДополнительноеЗначениеПолное = ВремяЗаДень;
	КонецЕсли;
	//Иначе
	//	Движение.ОсновноеЗначениеПолное = ?(ВыборкаПоСтрокамДокумента.Часов = 0, 0, 1);
	//	Движение.ДополнительноеЗначениеПолное = ВыборкаПоСтрокамДокумента.Часов;
	//КонецЕсли;
	
	// Реквизиты
	Если ЗаполнятьРеквизитДокумент Тогда
		Движение.Документ = ВыборкаПоШапкеДокумента.Документ;
	Иначе
		Движение.Документ = Документы.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуГрафикиРаботыПоВидамВремениДни()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определенной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуГрафикиРаботыПоВидамВремениЧасы(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, ТаблицаНабора, ЗаполнятьРеквизитДокумент = Истина)
	
	ОбрабатываемаяДата = Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ВыборкаПоСтрокамДокумента.ДеньМесяца);
	ВидУчетаВремени = ПолучитьВидУчетаВремениПоКлассификатору(ВыборкаПоСтрокамДокумента.ВидВремени);
	
	Если ВыборкаПоСтрокамДокумента.ВидВремени = КлассификаторВечерниеЧасы Тогда
		СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоВечернимЧасам);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидВремени = КлассификаторНочныеЧасы Тогда
		СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоНочнымЧасам);
	Иначе
		СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоЧасам);
	КонецЕсли;
	СтруктураПоиска.Вставить("Дата", ОбрабатываемаяДата);
	
	МассивСтрок = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		Движение = МассивСтрок[0];
		//Если Не Движение.Документ.Пустая() Тогда
		//	Возврат;
		//КонецЕсли;
	Иначе
		
		Движение = ТаблицаНабора.Добавить();
		Движение.ГрафикРаботы = ВыборкаПоСтрокамДокумента.Сотрудник;
		Движение.ВидУчетаВремени = ВидУчетаВремени;
		Движение.Дата = ОбрабатываемаяДата;
		Движение.План = Ложь;
		Движение.Месяц = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		
	КонецЕсли;
	
	// Ресурсы
	//Если ВыборкаПоСтрокамДокумента.ВидВремени.РабочееВремя = Ложь Тогда
	//	Движение.ОсновноеЗначениеПолное = Движение.ОсновноеЗначениеПолное + ВыборкаПоСтрокамДокумента.Часов;
	//	Движение.ДополнительноеЗначениеПолное = ?((Движение.ДополнительноеЗначениеПолное > 0) ИЛИ (ВыборкаПоСтрокамДокумента.Часов > 0), 1, 0);
	//	//Движение.ОсновноеЗначениеПолное = 0;
	//	//Движение.ДополнительноеЗначениеПолное = 0;
	Если ВыборкаПоСтрокамДокумента.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
		Движение.ОсновноеЗначениеПолное = 0;
		Движение.ДополнительноеЗначениеПолное = 0;
	ИначеЕсли Движение.Документ = Документы.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка() Тогда	
		Движение.ОсновноеЗначениеПолное = ВыборкаПоСтрокамДокумента.Часов;
		Движение.ДополнительноеЗначениеПолное = ?((ВыборкаПоСтрокамДокумента.Часов > 0), 1, 0);
	ИначеЕсли НЕ ((Движение.ОсновноеЗначениеПолное > 0) И НЕ ВыборкаПоСтрокамДокумента.ВидВремениРабочееВремя) Тогда
		Движение.ОсновноеЗначениеПолное = Движение.ОсновноеЗначениеПолное + ВыборкаПоСтрокамДокумента.Часов;
		Движение.ДополнительноеЗначениеПолное = ?((Движение.ДополнительноеЗначениеПолное > 0) ИЛИ (ВыборкаПоСтрокамДокумента.Часов > 0), 1, 0);
	КонецЕсли;
	
	// Реквизиты
	Если ВыборкаПоСтрокамДокумента.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка() 
		ИЛИ НЕ ЗаполнятьРеквизитДокумент Тогда
		Движение.Документ = Документы.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка();
	Иначе
		Движение.Документ				= ВыборкаПоШапкеДокумента.Документ;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуГрафикиРаботыПоВидамВремениЧасы()

// Функция формирует запрос по таблице ОтработанноеВремя документа
// для получения периодов невыходов.
Функция СформироватьЗапросДляРегистраРасчета(ВыборкаПоШапкеДокумента)
	
		Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("НачалоМесяца",НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецМесяца",КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Месяц",ПериодРегистрации);
	Запрос.УстановитьПараметр("Явка",Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	КлассификаторИспользованияРабочегоВремени.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТСписокПропусков
	|ИЗ
	|	Справочник.КлассификаторИспользованияРабочегоВремени КАК КлассификаторИспользованияРабочегоВремени
	|ГДЕ
	|	(НЕ КлассификаторИспользованияРабочегоВремени.РабочееВремя)
	|	И КлассификаторИспользованияРабочегоВремени.Ссылка <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	ТекстЗапросаДляОтладки = Запрос.Текст + ";" + Символы.ПС;
	Запрос.Выполнить();

	Для ИндексДня =  День(ДатаНачалаПериода) ПО День(ДатаОкончанияПериода) Цикл
		СтрИндексДня = Строка(ИндексДня);
		
		Если ИндексДня = День(ДатаНачалаПериода) Тогда
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник,
		|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйВидВремени"+СтрИндексДня+" КАК ВидВремени,
		|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйЧасов"+СтрИндексДня+" КАК Часов,
		|	"+СтрИндексДня+" КАК ДеньМесяца
		|ПОМЕСТИТЬ ВТВсеДниТабеля
		|ИЗ
		|	Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|ГДЕ
		|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|	И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойВидВремени"+СтрИндексДня+",
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойЧасов"+СтрИндексДня+",
		|		"+СтрИндексДня+"
		|	ИЗ
		|		Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|		И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийВидВремени"+СтрИндексДня+",
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийЧасов"+СтрИндексДня+",
		|		"+СтрИндексДня+"
		|	ИЗ
		|		Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|		И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ЧетвертыйВидВремени"+СтрИндексДня+",
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ЧетвертыйЧасов"+СтрИндексДня+",
		|		"+СтрИндексДня+"
		|	ИЗ
		|		Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|		И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ЧетвертыйВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
		|	";
		Иначе
			Запрос.Текст = Запрос.Текст + "	ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник,
		|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйВидВремени"+СтрИндексДня+" КАК ВидВремени,
		|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйЧасов"+СтрИндексДня+" КАК Часов,
		|	"+СтрИндексДня+" КАК ДеньМесяца
		|ИЗ
		|	Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|ГДЕ
		|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|	И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойВидВремени"+СтрИндексДня+",
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойЧасов"+СтрИндексДня+",
		|		"+СтрИндексДня+"
		|	ИЗ
		|		Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|		И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийВидВремени"+СтрИндексДня+",
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийЧасов"+СтрИндексДня+",
		|		"+СтрИндексДня+"
		|	ИЗ
		|		Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|		И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ЧетвертыйВидВремени"+СтрИндексДня+",
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ЧетвертыйЧасов"+СтрИндексДня+",
		|		"+СтрИндексДня+"
		|	ИЗ
		|		Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|		И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ЧетвертыйВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
		|	";

		КонецЕсли;
		
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + 
	"	ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник, ДеньМесяца, ВидВремени ;
		|	";
		
	Запрос.Текст = Запрос.Текст + 
	"ВЫБРАТЬ
	|	ВсеДниТабеля.Сотрудник,
	|	ВсеДниТабеля.ДеньМесяца,
	|	ВсеДниТабеля.ВидВремени,
	|	СУММА(ВсеДниТабеля.Часов) КАК Часов
	|	ПОМЕСТИТЬ ВТСуммированныеВсеДниТабеля
	|ИЗ ВТВсеДниТабеля КАК ВсеДниТабеля
	|	СГРУППИРОВАТЬ ПО 
	|	Сотрудник, ДеньМесяца, ВидВремени;
	|	";
	
	//
	//
	Запрос.Текст=Запрос.Текст+
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботы.Сотрудник1 КАК Сотрудник,
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Месяц КАК Месяц,
	|	ГрафикиРаботыПоВидамВремени.Дата КАК Дата,
	|	ГрафикиРаботыПоВидамВремени.План КАК План,
	|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначение,
	|	ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение,
	|	ГрафикиРаботыПоВидамВремени.Документ,
	|	ДЕНЬ(ГрафикиРаботыПоВидамВремени.Дата) КАК ДеньМесяца
	|ПОМЕСТИТЬ ВТГрафикиРаботыПоВидамВремени
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник1,
	|		ВЫБОР
	|			КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &НачалоМесяца
	|					И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботыЗавершения
	|			ИНАЧЕ РаботникиОрганизацийСрезПоследних.ГрафикРаботы
	|		КОНЕЦ КАК ГрафикРаботы
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&НачалоМесяца,
	|				Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТВсеДниТабеля.Сотрудник
	|					ИЗ
	|						ВТВсеДниТабеля)) КАК РаботникиОрганизацийСрезПоследних
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &НачалоМесяца
	|						И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботыЗавершения
	|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.ГрафикРаботы
	|			КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РаботникиОрганизаций.Сотрудник,
	|		РаботникиОрганизаций.ГрафикРаботы
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|	ГДЕ
	|		РаботникиОрганизаций.Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТВсеДниТабеля.Сотрудник
	|				ИЗ
	|					ВТВсеДниТабеля)
	|		И РаботникиОрганизаций.Период > &НачалоМесяца
	|		И РаботникиОрганизаций.Период <= &КонецМесяца
	|		И РаботникиОрганизаций.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Работники.Сотрудник,
	|		Работники.ГрафикРаботыЗавершения
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК Работники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|			ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|				И (ПериодыПерекрытия.Период > Работники.Период)
	|				И (ПериодыПерекрытия.Сотрудник = Работники.Сотрудник)
	|	ГДЕ
	|		Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		И Работники.ПериодЗавершения > &НачалоМесяца
	|		И Работники.ПериодЗавершения <= &КонецМесяца
	|		И Работники.ГрафикРаботыЗавершения <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|		И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|		И Работники.Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТВсеДниТабеля.Сотрудник
	|				ИЗ
	|					ВТВсеДниТабеля)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		ВыбранныеСотрудники.Сотрудник
	|	ИЗ
	|		ВТВсеДниТабеля КАК ВыбранныеСотрудники) КАК ГрафикиРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы)
	|			И (ГрафикиРаботыПоВидамВремени.Документ <> &ДокументСсылка)
	|			И (ГрафикиРаботыПоВидамВремени.Документ <> ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениВредность.ПустаяСсылка))
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
	|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца)
	|			И ((НЕ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL ))
	|ГДЕ
	|	(НЕ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL )
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГрафикРаботы,
	|	Месяц,
	|	Дата,
	|	План,
	|	ВидУчетаВремени;
	|";
	
	//
	Запрос.Текст = Запрос.Текст	+ 
	"ВЫБРАТЬ 
	|	ВсеДниТабеля.Сотрудник,
	|	ВсеДниТабеля.ДеньМесяца,
	|	ВсеДниТабеля.ВидВремени,
	|	ВсеДниТабеля.Часов,
	|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначение
	|ПОМЕСТИТЬ ВТПропущенныеДни	
	|	
	|ИЗ ВТСуммированныеВсеДниТабеля КАК ВсеДниТабеля
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммированныеВсеДниТабеля КАК ФильтрацияЦелодневныхНеявок
	|ПО ФильтрацияЦелодневныхНеявок.Сотрудник = ВсеДниТабеля.Сотрудник
	|	И ФильтрацияЦелодневныхНеявок.ДеньМесяца = ВсеДниТабеля.ДеньМесяца
	|	И ФильтрацияЦелодневныхНеявок.ВидВремени <> ВсеДниТабеля.ВидВремени
	//
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ПО ГрафикиРаботыПоВидамВремени.Сотрудник = ВсеДниТабеля.Сотрудник
	|	И ГрафикиРаботыПоВидамВремени.ДеньМесяца = ВсеДниТабеля.ДеньМесяца
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени  =ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	//
	|ГДЕ (ФильтрацияЦелодневныхНеявок.Сотрудник ЕСТЬ NULL
	|	И ВсеДниТабеля.ВидВремени В(ВЫБРАТЬ ВТСписокПропусков.Ссылка ИЗ ВТСписокПропусков)) или (ФильтрацияЦелодневныхНеявок.Сотрудник ЕСТЬ NULL
	|	И ВсеДниТабеля.Часов<(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение*80/100))
	|ИНДЕКСИРОВАТЬ ПО 
	|	ВсеДниТабеля.Сотрудник,
	|	ВсеДниТабеля.ДеньМесяца,
	|	ВсеДниТабеля.ВидВремени";
	
	ТекстЗапросаДляОтладки = ТекстЗапросаДляОтладки + Запрос.Текст + ";" + Символы.ПС;
	Запрос.Выполнить();
	
	//
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СгруппированныеДанные.Сотрудник,
	|	СгруппированныеДанные.ВидВремени,
	|	СгруппированныеДанные.НачалоПериода КАК НачалоПериода,
	|	СгруппированныеДанные.КонецПериода,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= СгруппированныеДанные.НачалоПериода
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачальнаяДата.Сотрудник КАК Сотрудник,
	|		НачальнаяДата.ВидВремени КАК ВидВремени,
	|		НачальнаяДата.ДеньМесяца КАК НачалоПериода,
	|		МИНИМУМ(КонечнаяДата.ДеньМесяца) КАК КонецПериода,
	|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаПолученияПодразделения
	|	ИЗ
	|		(ВЫБРАТЬ
	|			НачальнаяДата.Сотрудник КАК Сотрудник,
	|			НачальнаяДата.ВидВремени КАК ВидВремени,
	|			НачальнаяДата.Часов КАК Часов,
	|			НачальнаяДата.ДеньМесяца КАК ДеньМесяца
	|		ИЗ
	|			ВТПропущенныеДни КАК НачальнаяДата
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТПропущенныеДни КАК ПредыдущаяНачальнаяДата
	|				ПО (ПредыдущаяНачальнаяДата.Сотрудник = НачальнаяДата.Сотрудник)
	|					И (ПредыдущаяНачальнаяДата.ДеньМесяца + 1 = НачальнаяДата.ДеньМесяца)
	|		ГДЕ
	|			(ПредыдущаяНачальнаяДата.Сотрудник ЕСТЬ NULL 
	|					ИЛИ ПредыдущаяНачальнаяДата.ВидВремени <> НачальнаяДата.ВидВремени)) КАК НачальнаяДата
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				КонечнаяДата.Сотрудник КАК Сотрудник,
	|				КонечнаяДата.ВидВремени КАК ВидВремени,
	|				КонечнаяДата.Часов КАК Часов,
	|				КонечнаяДата.ДеньМесяца КАК ДеньМесяца
	|			ИЗ
	|				ВТПропущенныеДни КАК КонечнаяДата
	|					ЛЕВОЕ СОЕДИНЕНИЕ ВТПропущенныеДни КАК СледующаяКонечнаяДата
	|					ПО (СледующаяКонечнаяДата.Сотрудник = КонечнаяДата.Сотрудник)
	|						И (СледующаяКонечнаяДата.ДеньМесяца = КонечнаяДата.ДеньМесяца + 1)
	|			ГДЕ
	|				(СледующаяКонечнаяДата.Сотрудник ЕСТЬ NULL 
	|						ИЛИ СледующаяКонечнаяДата.ВидВремени <> КонечнаяДата.ВидВремени)) КАК КонечнаяДата
	|			ПО (КонечнаяДата.Сотрудник = НачальнаяДата.Сотрудник)
	|				И (КонечнаяДата.ВидВремени = НачальнаяДата.ВидВремени)
	|				И (КонечнаяДата.ДеньМесяца >= НачальнаяДата.ДеньМесяца)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО (РаботникиОрганизаций.Сотрудник = НачальнаяДата.Сотрудник)
	|				И (РаботникиОрганизаций.Период <= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ), ДЕНЬ, НачальнаяДата.ДеньМесяца - 1))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НачальнаяДата.Сотрудник,
	|		НачальнаяДата.ВидВремени,
	|		НачальнаяДата.ДеньМесяца) КАК СгруппированныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО (РаботникиОрганизаций.Сотрудник = СгруппированныеДанные.Сотрудник)
	|			И (РаботникиОрганизаций.Период = СгруппированныеДанные.ДатаПолученияПодразделения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода";
	
	ТекстЗапросаДляОтладки = ТекстЗапросаДляОтладки + Запрос.Текст;
	Возврат Запрос.Выполнить();	
	

КонецФункции // СформироватьЗапросДляРегистраРасчета()

// Процедура вводит в Регистр расчета ОсновныеНачисленияРаботниковОрганизаций
// ВР ДниНеоплачиваемыеСогласноТабелю 
Процедура ПроведениеПоРегиструРасчета(ВыборкаПоШапкеДокумента)
	
	НаборОсновныеНачисления = Движения.ОсновныеНачисленияРаботниковОрганизаций;
	ВыборкаПериодыПропусков = СформироватьЗапросДляРегистраРасчета(ВыборкаПоШапкеДокумента).Выбрать();
	Пока ВыборкаПериодыПропусков.Следующий() Цикл
		Движение = НаборОсновныеНачисления.Добавить();
		
		// Свойства
		Движение.ПериодРегистрации = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.ПериодДействияНачало = Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ВыборкаПериодыПропусков.НачалоПериода);
		Движение.ПериодДействияКонец = КонецДня(Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ВыборкаПериодыПропусков.КонецПериода));
		Движение.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДниБезВредности;
		Движение.Сторно = Ложь;
		
		// Измерения
		Движение.Сотрудник = ВыборкаПериодыПропусков.Сотрудник;
		Движение.ФизЛицо = ВыборкаПериодыПропусков.Сотрудник.ФизЛицо;
		Движение.Организация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// Реквизиты
		Движение.ПодразделениеОрганизации = ВыборкаПериодыПропусков.ПодразделениеОрганизации;
		Движение.ОбособленноеПодразделение = ВыборкаПоШапкеДокумента.Организация;
		Движение.ДатаНачалаСобытия = ВыборкаПоШапкеДокумента.ДатаНачалаПериода;
		Движение.Авторасчет = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // ПроведениеПоРегиструРасчета()

Процедура ПроведениеВредности(ВыборкаПоШапкеДокумента,ВыборкаПоОтработанноеВремя)
	
	НаборОсновныеНачисления = Движения.ОсновныеНачисленияРаботниковОрганизаций;
	
	Движение = НаборОсновныеНачисления.Добавить();
	
	// Свойства
	Движение.ПериодРегистрации = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ПериодДействияНачало = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ПериодДействияКонец = КОнецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Вредные;
	Движение.Сторно = Ложь;
	
	// Измерения
	Движение.Сотрудник = ВыборкаПоОтработанноеВремя.Сотрудник;
	Движение.ФизЛицо = ВыборкаПоОтработанноеВремя.Сотрудник.ФизЛицо;
	Движение.Организация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Реквизиты
	Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
	Движение.ОбособленноеПодразделение = ВыборкаПоШапкеДокумента.Организация;
	Движение.ДатаНачалаСобытия = ВыборкаПоШапкеДокумента.ДатаНачалаПериода;
	Движение.Авторасчет = Истина;	
	
КонецПроцедуры

Процедура ПроведениеПоРегиструСведений(ВыборкаПоШапкеДокумента)
	
	НачалоПериода=НачалоМесяца(ПериодРегистрации);
	КонецПериода=КонецМесяца(ПериодРегистрации);
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИндексНачальногоДня = День(НачалоПериода);
	ИндексКонечногоДня = День(КонецПериода);
	Запрос.Текст="";
	ДатаВОтчете = НачалоПериода;
	Для ИндексДня = ИндексНачальногоДня По ИндексКонечногоДня Цикл
		
		СтрИндексДня = Строка(ИндексДня);
		
		НомерДня    = День(ДатаВОтчете);
		НомерМесяца = Месяц(ДатаВОтчете);
		НомерГода   = Год(ДатаВОтчете);
		
		Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ 
	//	|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки КАК НомерСтроки,		
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйВидВремени"+СтрИндексДня+" КАК ВидВремени,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйЧасов"+СтрИндексДня+" КАК Часов,
		|  ДАТАВРЕМЯ(" + Формат(НомерГода, "ЧГ=4")+ ", " + НомерМесяца + " ," + НомерДня + ") КАК ДатаТабеля,
		|  NULL КАК Вредность ";
	//	|		"+СтрИндексДня+" КАК ИндексДня ";
		
		Если ИндексДня=ИндексНачальногоДня ТОгда
			Запрос.Текст = Запрос.Текст +
			" 
			|ПОМЕСТИТЬ ВТДанныеПоДням
			|";			
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст +
		"	ИЗ
		|		Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|	
		| ";
		
		//Если ИндексДня <> ИндексКонечногоДня Тогда
			Запрос.Текст=Запрос.Текст+
			" ОБЪЕДИНИТЬ ВСЕ
			|";
		//КонецЕсли;
		ДатаВОтчете = ДатаВОтчете + 86400;
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст +
    "ВЫБРАТЬ
    |	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник,
	|	NULL КАК ВидВремени,
    |	NULL КАК Часов,
    |	&ДатаПредМесяца КАК ДатаТабеля,
    |	ВредностьДляППС.Вредность КАК Вредность
    |ИЗ
    |	Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВредностьДляППС КАК ВредностьДляППС
    |		ПО ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник = ВредностьДляППС.Сотрудник
    |			И (&ДатаПредМесяца >= ВредностьДляППС.ДатаНачала)
    |			И (&ДатаПредМесяца <= ВредностьДляППС.ДатаОкончания)
    |ГДЕ
    |	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка";
	
	Запрос.УстановитьПараметр("ДокументСсылка",Ссылка);
	Запрос.УстановитьПараметр("ДатаПредМесяца",НачалоПериода-86400);
	Запрос.УстановитьПараметр("ДатаАктуальности",КонецПериода);
	
	Запрос.Выполнить();	
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ДанныеПоДням.Сотрудник,
	|	ДанныеПоДням.ДатаПриемаНаРаботу,
	|	ДанныеПоДням.ДатаТабеля,
	|	ДанныеПоДням.ВидВремени,
	|	ДанныеПоДням.Часов,
	|	ДанныеПоДням.ПоГрафику,
	|	ДанныеПоДням.ВидДеятельности,
	|	ДанныеПоДням.Вредность
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеПоДням.Сотрудник КАК Сотрудник,
	|		ДанныеПоДням.ДатаТабеля КАК ДатаТабеля,
	|		ДанныеПоДням.ВидВремени КАК ВидВремени,
	|		ДанныеПоДням.ДатаПриемаНаРаботу КАК ДатаПриемаНаРаботу,
	|		ВЫБОР
	|			КОГДА ДанныеПоДням.ВидВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(ДанныеПоДням.Часов, 0)
	|		КОНЕЦ КАК Часов,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремениИндГрафик.ОсновноеЗначение, 0) <> 0
	|				ТОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремениИндГрафик.ОсновноеЗначение, 0)
	|			ИНАЧЕ ГрафикиРаботыПоВидамВремени.ОсновноеЗначение
	|		КОНЕЦ КАК ПоГрафику,
	|		РаботникиОрганизацийСрезПоследних.ВидДеятельностиИзмерение КАК ВидДеятельности,
	|		ЕСТЬNULL(ДанныеПоДням.Вредность, ЛОЖЬ) КАК Вредность
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ДанныеПоДням.Сотрудник КАК Сотрудник,
	|			ДанныеПоДням.Сотрудник.ДатаПриемаНаРаботу КАК ДатаПриемаНаРаботу,
	|			ДанныеПоДням.ДатаТабеля КАК ДатаТабеля,
	|			ДанныеПоДням.ВидВремени КАК ВидВремени,
	|			ВЫБОР
	|				КОГДА ДанныеПоДням.ВидВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
	|					ТОГДА 0
	|				ИНАЧЕ ЕСТЬNULL(ДанныеПоДням.Часов, 0)
	|			КОНЕЦ КАК Часов,
	|			ЕСТЬNULL(ДанныеПоДням.Вредность, ЛОЖЬ) КАК Вредность,
	|			МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Период) КАК ПериодДок
	|		ИЗ
	|			ВТДанныеПоДням КАК ДанныеПоДням
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийСрезПоследних
	|				ПО (РаботникиОрганизацийСрезПоследних.Период <= ДанныеПоДням.ДатаТабеля)
	|					И ДанныеПоДням.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДанныеПоДням.Сотрудник,
	|			ДанныеПоДням.ВидВремени,
	|			ДанныеПоДням.Сотрудник.ДатаПриемаНаРаботу,
	|			ВЫБОР
	|				КОГДА ДанныеПоДням.ВидВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
	|					ТОГДА 0
	|				ИНАЧЕ ЕСТЬNULL(ДанныеПоДням.Часов, 0)
	|			КОНЕЦ,
	|			ЕСТЬNULL(ДанныеПоДням.Вредность, ЛОЖЬ),
	|			ДанныеПоДням.ДатаТабеля) КАК ДанныеПоДням
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийСрезПоследних
	|			ПО (РаботникиОрганизацийСрезПоследних.Период = ДанныеПоДням.ПериодДок)
	|				И ДанныеПоДням.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|			ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = РаботникиОрганизацийСрезПоследних.ГрафикРаботы)
	|				И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
	|				И ДанныеПоДням.ДатаТабеля = ГрафикиРаботыПоВидамВремени.Дата
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремениИндГрафик
	|			ПО (ГрафикиРаботыПоВидамВремениИндГрафик.ГрафикРаботы = РаботникиОрганизацийСрезПоследних.Сотрудник)
	|				И (ГрафикиРаботыПоВидамВремениИндГрафик.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
	|				И ДанныеПоДням.ДатаТабеля = ГрафикиРаботыПоВидамВремениИндГрафик.Дата
	|				И (ГрафикиРаботыПоВидамВремениИндГрафик.План)) КАК ДанныеПоДням
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеПоДням.Сотрудник,
	|	ДанныеПоДням.ДатаТабеля,
	|	ДанныеПоДням.ВидВремени";
	
	//Выборка=Запрос.Выполнить().Выгрузить(); не просто взять выборку, т.к. может быть несколько строк с разными ставками, поэтому предварительно обработаем
	
	ВыборкаЗапрос=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Выборка = Новый ТаблицаЗначений;
	
	Выборка.Колонки.Добавить("Сотрудник");
	Выборка.Колонки.Добавить("ДатаПриемаНаРаботу");
	Выборка.Колонки.Добавить("ДатаТабеля");
	Выборка.Колонки.Добавить("ВидВремени");
	Выборка.Колонки.Добавить("Часов");
	Выборка.Колонки.Добавить("ПоГрафику");
	Выборка.Колонки.Добавить("ВидДеятельности");
	Выборка.Колонки.Добавить("Вредность");
	
	Пока ВыборкаЗапрос.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		Пока ВыборкаЗапрос.СледующийПоЗначениюПоля("ДатаТабеля") Цикл
			
			ДобавилиСтроку = ЛОжь;
			
			Пока ВыборкаЗапрос.СледующийПоЗначениюПоля("ВидВремени") Цикл				
				
				Если ЗначениеЗаполнено(ВыборкаЗапрос.ВидВремени) ТОгда	
					
					НовСтр=Выборка.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр,ВыборкаЗапрос);
 					ДобавилиСтроку=Истина;
					
				КонецЕсли;								
				
			КонецЦикла;
			
			Если Не ДобавилиСтроку Тогда
				
				НовСтр=Выборка.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,ВыборкаЗапрос); 				
					
			КонецЕсли;			
							
		КонецЦикла;
	
	КонецЦикла;
	
	НаборЗаписейВредности = РегистрыСведений.ВредностьДляППС.СоздатьНаборЗаписей();
	
	НаборЗаписейВредности.Прочитать();
	НомерЗаписиНабора = НаборЗаписейВредности.Количество() - 1;
	Пока НомерЗаписиНабора >= 0 Цикл
		Если НаборЗаписейВредности[НомерЗаписиНабора].Документ = Ссылка Тогда
			НаборЗаписейВредности.Удалить(НомерЗаписиНабора);
		КонецЕсли;
		НомерЗаписиНабора = НомерЗаписиНабора - 1
	КонецЦикла;

	НаборЗаписейВредности.Записать();
	
	Вредность=Ложь;
	ТекВредность="";
	ТекСотрудник="";
	НоваяЗапись="";
	НаборЗаписейВредности="";
	
	СписокСотрудников=Новый СписокЗначений;
	
	Для Каждого Стр ИЗ Выборка Цикл
		
		Если СписокСотрудников.НайтиПоЗначению(Стр.Сотрудник)=Неопределено ТОгда
			СписокСотрудников.Добавить(Стр.Сотрудник);
		КонецЕсли;
		
		Если ТекСотрудник<>Стр.Сотрудник ТОгда
			Вредность=Ложь;
		КонецЕсли;
		
		Если Стр.ВидДеятельности=Справочники.ОсобыеУсловияТруда.ПустаяСсылка() Тогда
			Вредность=Ложь;
		ИначеЕсли НачалоМесяца(Стр.ДатаТабеля)<НачалоПериода Тогда
			Вредность=Стр.Вредность;			
		ИначеЕсли Стр.Часов>0 ТОгда
			Вредность=Стр.Часов>=(Стр.ПоГрафику*80/100);
		ИначеЕсли (Стр.Часов=0) и Стр.ВидВремени=Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка() ТОгда	
			Вредность=Ложь;
		КонецЕсли;
		
		Стр.Вредность=Вредность;
		ТекСотрудник=Стр.Сотрудник;
		
	КонецЦикла;
	
	СтруктураПоиска=Новый Структура();
	ТекСотрудник="";
	
	Для Каждого ТекСотрудник Из СписокСотрудников Цикл
		
		ТекВредность="";
		СтруктураПоиска.Вставить("Сотрудник",ТекСотрудник.Значение);
		
		НайденныеСтроки=Выборка.НайтиСтроки(СтруктураПоиска);
		БылаНачальнаяДата=Ложь;
		
		Для Каждого Стр Из НайденныеСтроки Цикл
			
			Если НачалоМесяца(Стр.ДатаТабеля)<НачалоПериода Тогда
				Продолжить;
			КонецЕсли;
			
			Если Стр.ДатаТабеля<Стр.ДатаПриемаНаРаботу Тогда
				Продолжить;
			КонецЕсли;
			
			//Если Не ЗначениеЗаполнено(Стр.ВидДеятельности) Тогда
			//	Продолжить;
			//КонецЕсли;
			
			Если ТекВредность<>Стр.Вредность Тогда
				
				Если ТекВредность="" ТОгда
					
					НаборЗаписейВредности=РегистрыСведений.ВредностьДляППС.СоздатьНаборЗаписей();
					НаборЗаписейВредности.Отбор.Организация.Установить(ОбщегоНазначения.ГоловнаяОрганизация(ВыборкаПоШапкеДокумента.Организация));	
					НаборЗаписейВредности.Отбор.Сотрудник.Установить(Стр.Сотрудник);			
					НаборЗаписейВредности.Отбор.ДатаНачала.Установить(Стр.ДатаТабеля);			
					
					НоваяЗапись=НаборЗаписейВредности.Добавить();
					БылаНачальнаяДата=Истина;
					НоваяЗапись.Организация=ОбщегоНазначения.ГоловнаяОрганизация(ВыборкаПоШапкеДокумента.Организация);
					НоваяЗапись.ОбособленноеПодразделение = ВыборкаПоШапкеДокумента.Организация;
					НоваяЗапись.Документ=Ссылка;
					НоваяЗапись.Сотрудник=Стр.Сотрудник;
					НоваяЗапись.ДатаНачала=Стр.ДатаТабеля;
					НоваяЗапись.Вредность=Стр.Вредность;
				
				Иначе
					
					НоваяЗапись.ДатаОкончания=Стр.ДатаТабеля-86400;							
					НаборЗаписейВредности.Записать();
					
					НаборЗаписейВредности=РегистрыСведений.ВредностьДляППС.СоздатьНаборЗаписей();
					НаборЗаписейВредности.Отбор.Организация.Установить(ОбщегоНазначения.ГоловнаяОрганизация(ВыборкаПоШапкеДокумента.Организация));	
					НаборЗаписейВредности.Отбор.Сотрудник.Установить(Стр.Сотрудник);				
					НаборЗаписейВредности.Отбор.ДатаНачала.Установить(Стр.ДатаТабеля);			
				
					НоваяЗапись=НаборЗаписейВредности.Добавить();				
					БылаНачальнаяДата=Истина;
					НоваяЗапись.Организация=ОбщегоНазначения.ГоловнаяОрганизация(ВыборкаПоШапкеДокумента.Организация);
					НоваяЗапись.ОбособленноеПодразделение = ВыборкаПоШапкеДокумента.Организация;
					НоваяЗапись.Документ=Ссылка;
					НоваяЗапись.Сотрудник=Стр.Сотрудник;
					НоваяЗапись.ДатаНачала=Стр.ДатаТабеля;
					НоваяЗапись.Вредность=Стр.Вредность;
				
				КонецЕсли;		
						
			КонецЕсли;
					
			ТекВредность=Стр.Вредность;
		
		КонецЦикла;	
		
		Если БылаНачальнаяДата=Истина ТОгда
			НоваяЗапись.ДатаОкончания=Стр.ДатаТабеля;							
			НаборЗаписейВредности.Записать();
		КонецЕсли;
		

	КонецЦикла;
   
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
	//	ОтработанноеВремя.Очистить();
	//	
	//	МассивТЧ = Новый Массив();
	//	МассивТЧ.Добавить(ОтработанноеВремяВЦеломЗаПериод);
	//	
	//	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ОтработанноеВремяВЦеломЗаПериод);
	//Иначе
	//	ОтработанноеВремяВЦеломЗаПериод.Очистить();
	//	
	//	МассивТЧ = Новый Массив();
	//	МассивТЧ.Добавить(ОтработанноеВремя);
	//	
		КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ОтработанноеВремя);
	//КонецЕсли;
	//
	//УдалитьЗаписиЗаПериодДокумента();
	//
	//
	//// проверим допустимо ли изменение состава сотрудников по которым введен табель
	//Если Не ЭтоНовый() 
	//	И СпособВводаДанных <> Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод 
	//	И РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
	//	
	//	#Если Клиент Тогда
	//		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	//	#КонецЕсли
	//	
	//	СоответствиеСотрудники = Новый Соответствие;
	//	Для Каждого Строка Из ОтработанноеВремя Цикл
	//		СоответствиеСотрудники.Вставить(Строка.Сотрудник, "");
	//	КонецЦикла;
	//	
	//	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//		Запрос = Новый Запрос(
	//		"ВЫБРАТЬ
	//		|	НовыеСотрудники.Сотрудник КАК Сотрудник
	//		|ПОМЕСТИТЬ ВТНовыеСотрудники
	//		|ИЗ
	//		|	&НовыеСотрудники КАК НовыеСотрудники
	//		|
	//		|ИНДЕКСИРОВАТЬ ПО
	//		|	Сотрудник
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//		|	ОсновныеНачисления.Регистратор КАК Документ,
	//		|	ПРЕДСТАВЛЕНИЕ(ОсновныеНачисления.Регистратор) КАК ДокументПредставление,
	//		|	ОсновныеНачисления.Сотрудник.Наименование КАК СотрудникНаименование
	//		|ИЗ
	//		|	Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК СтарыеСотрудники
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНовыеСотрудники КАК НовыеСотрудники
	//		|		ПО СтарыеСотрудники.Сотрудник = НовыеСотрудники.Сотрудник
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
	//		|		ПО СтарыеСотрудники.Сотрудник = ОсновныеНачисления.Сотрудник
	//		|			И (ОсновныеНачисления.ПериодДействия = НАЧАЛОПЕРИОДА(СтарыеСотрудники.Ссылка.ДатаНачалаПериода, МЕСЯЦ))
	//		|			И (ОсновныеНачисления.ГрафикРаботы = ОсновныеНачисления.Сотрудник)
	//		|ГДЕ
	//		|	СтарыеСотрудники.Ссылка = &Документ
	//		|	И НовыеСотрудники.Сотрудник ЕСТЬ NULL 
	//		|	И ОсновныеНачисления.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю)
	//		|	И ОсновныеНачисления.Регистратор <> &Документ");
	//		
	//		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//		Запрос.УстановитьПараметр("Документ", Ссылка);
	//		
	//		НовыеСотрудники = Новый ТаблицаЗначений;
	//		НовыеСотрудники.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	//		Для Каждого КлючЗначение Из СоответствиеСотрудники Цикл
	//			Строка = НовыеСотрудники.Добавить();
	//			Строка.Сотрудник = КлючЗначение.Ключ;
	//		КонецЦикла;
	//		Запрос.УстановитьПараметр("НовыеСотрудники", НовыеСотрудники);
	//		
	//		Выборка = Запрос.ВыполнитьПакет()[1].Выбрать();
	//		
	//	Иначе
	//		Запрос = Новый Запрос(
	//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//		|	ОсновныеНачисления.Регистратор КАК Документ,
	//		|	ПРЕДСТАВЛЕНИЕ(ОсновныеНачисления.Регистратор) КАК ДокументПредставление,
	//		|	ОсновныеНачисления.Сотрудник.Наименование КАК СотрудникНаименование
	//		|ИЗ
	//		|	Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК СтарыеСотрудники
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
	//		|		ПО СтарыеСотрудники.Сотрудник = ОсновныеНачисления.Сотрудник
	//		|			И (ОсновныеНачисления.ПериодДействия = НАЧАЛОПЕРИОДА(СтарыеСотрудники.Ссылка.ДатаНачалаПериода, МЕСЯЦ))
	//		|			И (ОсновныеНачисления.ГрафикРаботы = ОсновныеНачисления.Сотрудник)
	//		|ГДЕ
	//		|	СтарыеСотрудники.Ссылка = &Документ
	//		|	И ОсновныеНачисления.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю)
	//		|	И ОсновныеНачисления.Регистратор <> &Документ");
	//		
	//		Запрос.УстановитьПараметр("Документ", Ссылка);
	//		Выборка = Запрос.Выполнить().Выбрать();
	//		
	//	КонецЕсли;
	//	
	//	Если Выборка.Количество() > 0 Тогда
	//		#Если Клиент Тогда
	//			ОбработкаКомментариев.УдалитьСообщения();
	//			ОбщегоНазначения.ВывестиИнформациюОбОшибке("Изменение документа невозможно, так как по следующим сотрудникам уже выполнено начисление зарплаты");
	//		#Иначе
	//			ОбщегоНазначения.СообщитьОбОшибке("Изменение документа невозможно, так как по следующим сотрудникам уже выполнено начисление зарплаты", Отказ);
	//		#КонецЕсли
	//		
	//		Пока Выборка.Следующий() Цикл 
	//			#Если Клиент Тогда
	//				Расшифровки = Новый Массив;
	//				Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", Выборка.ДокументПредставление, Выборка.Документ));
	//				ОбщегоНазначения.ВывестиИнформациюОбОшибке(
	//				Выборка.СотрудникНаименование + " документом %%",
	//				Отказ, , Перечисления.ВидыСообщений.Ошибка, Расшифровки);
	//			#Иначе
	//				ОбщегоНазначения.СообщитьОбОшибке(Выборка.СотрудникНаименование + " документом %%", Отказ);
	//				
	//			#КонецЕсли
	//			
	//		КонецЦикла;
	//		#Если Клиент Тогда
	//			ОбработкаКомментариев.ПоказатьСообщения();
	//		#КонецЕсли
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения" документа.
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	МассивСообщений = Новый Массив;
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
		ПроверитьУникальностьЗаписей(Отказ);
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			//Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
				// Данные введены в целом за период.
				
				////////////////////////////////////////////////////////////////////////
				// Отработанное время в целом за период
				
				
				// получим реквизиты табличной части
				//ВыборкаПоОтработанноеВремяВЦеломЗаПериод = СформироватьЗапросПоОтработанноеВремяВЦеломЗаПериод(ВыборкаПоШапкеДокумента).Выбрать();
				//Пока ВыборкаПоОтработанноеВремяВЦеломЗаПериод.СледующийПоЗначениюПоля("Сотрудник") Цикл
				//	Если Не Отказ Тогда
				//		Пока ВыборкаПоОтработанноеВремяВЦеломЗаПериод.Следующий() Цикл
				//			
				//			// Проверим очередную строку табличной части
				//			ПроверитьЗаполнениеСтрокиОтработанноеВремяВЦеломЗаПериод(ВыборкаПоШапкеДокумента, ВыборкаПоОтработанноеВремяВЦеломЗаПериод, Отказ);
				//			Если Не Отказ Тогда
				//				// Заполним записи в наборах записей регистров
				//				//ДобавитьСтрокуРабочееВремяРаботниковОрганизацийВЦеломЗаПериод(ВыборкаПоОтработанноеВремяВЦеломЗаПериод, ВыборкаПоШапкеДокумента, Движения.ОтработанныеВоВредных);
				//			Иначе
				//				Прервать;
				//			КонецЕсли;
				//		КонецЦикла;
				//	Иначе
				//		Прервать;
				//	КонецЕсли;
				//	
				//КонецЦикла;
			//Иначе
				// Данные введены с разбивкой по дням.
				
				////////////////////////////////////////////////////////////////////////
				// Отработанное время
				Запрос = Новый Запрос;
				
				Запрос.УстановитьПараметр("Месяц", ВыборкаПоШапкеДокумента.ПериодРегистрации);
				
				ТаблицаСотрудниковСПустымиЯчейками = Новый ТаблицаЗначений;
				// получим реквизиты табличной части
				ВыборкаПоОтработанноеВремя = СформироватьЗапросПоОтработанноеВремя(ВыборкаПоШапкеДокумента, ТаблицаСотрудниковСПустымиЯчейками).Выбрать();
				
				//Если ТаблицаСотрудниковСПустымиЯчейками.Количество() > 0 Тогда
				//	СтрокаСотрудников = "";
				//	Для Каждого ЭлементТаблицыСотрудников Из ТаблицаСотрудниковСПустымиЯчейками Цикл
				//		СтрокаСотрудников = СтрокаСотрудников + " " + ЭлементТаблицыСотрудников.ПредставлениеСотрудника + ", ";
				//	КонецЦикла;
				//	СтрокаСотрудников = ЛЕВ(СтрокаСотрудников, СтрДлина(СтрокаСотрудников) -2 );
				//	МассивСообщений.Добавить(СоздатьСообщениеСтруктуру("Для следующих сотрудников время заполнено не по всем дням " + СтрокаСотрудников, Перечисления.ВидыСообщений.Ошибка));
				//	Отказ = Истина
				//Иначе
										
					ДеньНачалаПериода = День(ДатаНачалаПериода);
					ДеньОкончанияПериода = День(ДатаОкончанияПериода);
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("План", Ложь);
					СтруктураПоиска.Вставить("Месяц", ВыборкаПоШапкеДокумента.ПериодРегистрации);
					
					ВидУчетаВремениПоДням = Перечисления.ВидыУчетаВремени.ПоДням;
					ВидУчетаВремениПоЧасам = Перечисления.ВидыУчетаВремени.ПоЧасам;
					ПустойДокумент = Документы.ТабельУчетаРабочегоВремениВредность.ПустаяСсылка();
					ЗаписатьПустоеЗначениеПоДням = Истина;
					Пока ВыборкаПоОтработанноеВремя.СледующийПоЗначениюПоля("Сотрудник") Цикл
						// Проверим очередную строка табличной части
						ПроверитьЗаполнениеСтрокиОтработанноеВремя(ВыборкаПоШапкеДокумента, ВыборкаПоОтработанноеВремя, Отказ);
						Если НЕ Отказ Тогда																									
							Пока ВыборкаПоОтработанноеВремя.СледующийПоЗначениюПоля("ДеньМесяца") Цикл
								Если (ВыборкаПоОтработанноеВремя.ДеньМесяца <= ДеньОкончанияПериода)
									И (ВыборкаПоОтработанноеВремя.ДеньМесяца >= ДеньНачалаПериода)Тогда
									ВремяЯвки = 0;
									ВремяЗаДень = 0;
									Дней=0;
									ЗаписатьПустоеЗначениеПоДням = Истина;
									Пока ВыборкаПоОтработанноеВремя.Следующий() Цикл
										// Заполним записи в наборах записей регистров																																			
										Если НЕ ВыборкаПоОтработанноеВремя.ВидВремени.Пустая() Тогда
											Если НЕ ВыборкаПоОтработанноеВремя.ЗаписатьПустоеЗначение
												И ВыборкаПоОтработанноеВремя.ВидВремени <> Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
												ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням(ВыборкаПоОтработанноеВремя, ВыборкаПоШапкеДокумента, Движения.РабочееВремяРаботниковОрганизацийВоВредныхУсловиях);
											КонецЕсли;
											Если ВыборкаПоОтработанноеВремя.ВидВремени.РабочееВремя 
												И ВыборкаПоОтработанноеВремя.ВидВремени <> КлассификаторВечерниеЧасы
												И ВыборкаПоОтработанноеВремя.ВидВремени <> КлассификаторНочныеЧасы Тогда
												ВремяЯвки = ВыборкаПоОтработанноеВремя.Часов;
												ЗаписатьПустоеЗначениеПоДням = НЕ ВыборкаПоОтработанноеВремя.ЗаписатьПустоеЗначение;
											КонецЕсли;
											Если ВыборкаПоОтработанноеВремя.ВидВремени <> КлассификаторВечерниеЧасы
												И ВыборкаПоОтработанноеВремя.ВидВремени <> КлассификаторНочныеЧасы 
												И НЕ (ВремяЗаДень > 0 И НЕ ВыборкаПоОтработанноеВремя.ВидВремениРабочееВремя) Тогда
											//Если НЕ (ВремяЗаДень > 0 И НЕ ВыборкаПоОтработанноеВремя.ВидВремениРабочееВремя) Тогда
												ВремяЗаДень = ВремяЗаДень + ВыборкаПоОтработанноеВремя.Часов;
												Дней=Дней+1;
											КонецЕсли;
											
										КонецЕсли;
									КонецЦикла;									
								ИначеЕсли ВыборкаПоОтработанноеВремя.ЗаписатьПустоеЗначение Тогда
									ВремяЯвки = 0;
									ВремяЗаДень = 0;
									ДатаМесяца = Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ВыборкаПоОтработанноеВремя.ДеньМесяца);
									Пока ВыборкаПоОтработанноеВремя.Следующий() Цикл
										
										Если НЕ ВыборкаПоОтработанноеВремя.ВидВремени.Пустая() Тогда											
											Если ВыборкаПоОтработанноеВремя.ВидВремени.РабочееВремя 
												И ВыборкаПоОтработанноеВремя.ВидВремени <> КлассификаторВечерниеЧасы
												И ВыборкаПоОтработанноеВремя.ВидВремени <> КлассификаторНочныеЧасы Тогда
												ВремяЯвки = ВыборкаПоОтработанноеВремя.Часов;
											КонецЕсли;
											Если ВыборкаПоОтработанноеВремя.ВидВремени <> КлассификаторВечерниеЧасы
												И ВыборкаПоОтработанноеВремя.ВидВремени <> КлассификаторНочныеЧасы Тогда
												ВремяЗаДень = ВремяЗаДень + ВыборкаПоОтработанноеВремя.Часов;
											КонецЕсли;
										Иначе
										КонецЕсли;
									КонецЦикла;
									
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						//ПроведениеВредности(ВыборкаПоШапкеДокумента,ВыборкаПоОтработанноеВремя);
					КонецЦикла;
					ПроведениеПоРегиструСведений(ВыборкаПоШапкеДокумента);                
					//ПроведениеПоРегиструРасчета(ВыборкаПоШапкеДокумента);
				//КонецЕсли;		
			//КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;
	
	Если МассивСообщений.Количество() > 0 Тогда
		#Если Клиент Тогда
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
			ОбработкаКомментариев.УдалитьСообщения();
			ОбработкаКомментариев.ДобавитьСообщение(Заголовок, Перечисления.ВидыСообщений.Раздел);
			Для каждого ЭлементМассива Из МассивСообщений Цикл
				ОбработкаКомментариев.ДобавитьСообщение(ЭлементМассива.ТекстСообщения, ЭлементМассива.ВидСообщения, ЭлементМассива.РасшифровкаСообщения);
			КонецЦикла;
			ОбработкаКомментариев.ПоказатьСообщения();
		#Иначе
			Для каждого ЭлементМассива Из МассивСообщений Цикл
				ОбщегоНазначения.СообщитьОбОшибке(ЭлементМассива.ТекстСообщения, Отказ, Заголовок);
			КонецЦикла; 
		#КонецЕсли 
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	НаборЗаписейВредности = РегистрыСведений.ВредностьДляППС.СоздатьНаборЗаписей();
	НаборЗаписейВредности.Прочитать();
	НомерЗаписиНабора = НаборЗаписейВредности.Количество() - 1;
	Пока НомерЗаписиНабора >= 0 Цикл
		Если НаборЗаписейВредности[НомерЗаписиНабора].Документ = Ссылка Тогда
			НаборЗаписейВредности.Удалить(НомерЗаписиНабора);
		КонецЕсли;
		НомерЗаписиНабора = НомерЗаписиНабора - 1
	КонецЦикла;

	НаборЗаписейВредности.Записать();
	
КонецПроцедуры

//vvv
Процедура ПриЗаписи(Отказ)
	////проверим на заполненность ставок
	//#Если Клиент Тогда
	//	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	//#КонецЕсли
	//
	//ЗапросПроверка=Новый Запрос;
	//
	//ЗапросПроверка.Текст=
	//"ВЫБРАТЬ
	//|	ТабельУчетаРабочегоВремениВредностьОтработанноеВремя.Сотрудник,
	//|	ТабельУчетаРабочегоВремениВредностьОтработанноеВремя.НомерСтроки,
	//|	ТабельУчетаРабочегоВремениВредностьОтработанноеВремя.ПроцентВредности
	//|ИЗ
	//|	Документ.ТабельУчетаРабочегоВремениВредность.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениВредностьОтработанноеВремя
	//|ГДЕ
	//|	ТабельУчетаРабочегоВремениВредностьОтработанноеВремя.Ссылка = &Ссылка
	//|	И ТабельУчетаРабочегоВремениВредностьОтработанноеВремя.ПроцентВредности = 0";
	//
	//ЗапросПроверка.УстановитьПараметр("Ссылка",Ссылка);
	//ВыборкаПоСтрокам=ЗапросПроверка.Выполнить().Выбрать();
	//
	//Если ВыборкаПоСтрокам.Следующий() Тогда
	//	
	//	Отказ=Истина;
	//	
	//	#Если Клиент Тогда
	//		ОбработкаКомментариев.УдалитьСообщения();
	//		ОбщегоНазначения.ВывестиИнформациюОбОшибке("В строке №"+Строка(ВыборкаПоСтрокам.НомерСтроки)+" не указан процент вредности");
	//		ОбработкаКомментариев.ПоказатьСообщения();
	//	#Иначе
	//		ОбщегоНазначения.СообщитьОбОшибке("В строке №"+Строка(ВыборкаПоСтрокам.НомерСтроки)+" не указан процент вредности", Отказ);
	//	#КонецЕсли	

	//КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ТабельУчетаРабочегоВремениВодителейОрганизации") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеЗаполнения.ПолучитьОбъект());
		Для Каждого Стр Из ДанныеЗаполнения.ОтработанноеВремя Цикл			
			НоваяСтрока=ОтработанноеВремя.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);			
			Для к=1 По День(КонецМесяца(ПериодРегистрации)) Цикл
				ВремяЯвки=0;
				Если НоваяСтрока["ПервыйВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.БезВыезда
					или НоваяСтрока["ПервыйВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.Ремонт
					или НоваяСтрока["ПервыйВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.РемонтПлановый
					или НоваяСтрока["ПервыйВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.Линия
					или НоваяСтрока["ПервыйВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.ЛинияСдельно ТОгда
					ВремяЯвки=ВремяЯвки+НоваяСтрока["ПервыйЧасов"+Строка(к)];								
					НоваяСтрока["ПервыйВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();
					НоваяСтрока["ПервыйЧасов"+Строка(к)]=0;								
				КонецЕсли;				
				Если НоваяСтрока["ВторойВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.БезВыезда
					или НоваяСтрока["ВторойВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.Ремонт
					или НоваяСтрока["ВторойВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.РемонтПлановый
					или НоваяСтрока["ВторойВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.Линия
					или НоваяСтрока["ВторойВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.ЛинияСдельно ТОгда
					ВремяЯвки=ВремяЯвки+НоваяСтрока["ВторойЧасов"+Строка(к)];			
					НоваяСтрока["ВторойВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();
					НоваяСтрока["ВторойЧасов"+Строка(к)]=0;								
				КонецЕсли;				
				Если НоваяСтрока["ТретийВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.БезВыезда
					или НоваяСтрока["ТретийВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.Ремонт
					или НоваяСтрока["ТретийВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.РемонтПлановый
					или НоваяСтрока["ТретийВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.Линия
					или НоваяСтрока["ТретийВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.ЛинияСдельно ТОгда
					ВремяЯвки=ВремяЯвки+НоваяСтрока["ТретийЧасов"+Строка(к)];
					НоваяСтрока["ТретийВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();
					НоваяСтрока["ТретийЧасов"+Строка(к)]=0;
				КонецЕсли;				
				Если НоваяСтрока["ЧетвертыйВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.БезВыезда
					или НоваяСтрока["ЧетвертыйВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.Ремонт
					или НоваяСтрока["ЧетвертыйВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.РемонтПлановый
					или НоваяСтрока["ЧетвертыйВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.Линия
					или НоваяСтрока["ЧетвертыйВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.ЛинияСдельно ТОгда
					ВремяЯвки=ВремяЯвки+НоваяСтрока["ЧетвертыйЧасов"+Строка(к)];								
					НоваяСтрока["ЧетвертыйВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();
					НоваяСтрока["ЧетвертыйВидВремени"+Строка(к)]=0;
				КонецЕсли;
				
				Если ВремяЯвки<>0 Тогда
					НоваяСтрока["ПервыйВидВремени"+Строка(к)]=Справочники.КлассификаторИспользованияРабочегоВремени.Работа;	
					НоваяСтрока["ПервыйЧасов"+Строка(к)]=ВремяЯвки;
				КонецЕсли;	
				
			КонецЦикла;			
		КонецЦикла;		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ТабельУчетаРабочегоВремениОрганизации") Тогда	
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеЗаполнения.ПолучитьОбъект());
		Для Каждого Стр Из ДанныеЗаполнения.ОтработанноеВремя Цикл						
			ЗаполнитьЗначенияСвойств(ОтработанноеВремя.Добавить(),Стр);						
		КонецЦикла;		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

КлассификаторНочноеВремя = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы;
КлассификаторВечернееВремя = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы;
КлассификаторВыходныеДни = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни;

ВидУчетаВремениПоДням  			= Перечисления.ВидыУчетаВремени.ПоДням;
ВидУчетаВремениПоЧасам 			= Перечисления.ВидыУчетаВремени.ПоЧасам;
ВидУчетаВремениПоВечернимЧасам 	= Перечисления.ВидыУчетаВремени.ПоВечернимЧасам;
ВидУчетаВремениПоНочнымЧасам 	= Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;


МассивПриставок = Новый Массив(4);
МассивПриставок[0] = "Первый";
МассивПриставок[1] = "Второй";
МассивПриставок[2] = "Третий";
МассивПриставок[3] = "Четвертый";

КлассификаторЯвка = Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
КлассификаторВечерниеЧасы = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы;
КлассификаторНочныеЧасы = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы;
КлассификаторПустаяСсылка = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();


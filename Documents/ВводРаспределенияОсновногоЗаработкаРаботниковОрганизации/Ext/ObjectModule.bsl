////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" ,		Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаспределениеОсновногоЗаработка.Дата,
	|	РаспределениеОсновногоЗаработка.Организация,
	|	ВЫБОР
	|		КОГДА РаспределениеОсновногоЗаработка.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА РаспределениеОсновногоЗаработка.Организация
	|		ИНАЧЕ РаспределениеОсновногоЗаработка.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	РаспределениеОсновногоЗаработка.Период,
	//vvv
	|	РаспределениеОсновногоЗаработка.ВидРаспределения,
	|	РаспределениеОсновногоЗаработка.НепосредственныйВводОтражения,
	//
	|	РаспределениеОсновногоЗаработка.Ссылка
	|ИЗ
	|	Документ.ВводРаспределенияОсновногоЗаработкаРаботниковОрганизации КАК РаспределениеОсновногоЗаработка
	|ГДЕ
	|	РаспределениеОсновногоЗаработка.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Период", Период);
	//vvv
	Запрос.УстановитьПараметр("НачПериода",НачалоМесяца(ВыборкаПоШапкеДокумента.Период));
	Запрос.УстановитьПараметр("КонПериода",КонецМесяца(ВыборкаПоШапкеДокумента.Период));
	Запрос.УстановитьПараметр("Явка",Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокРаботников.Сотрудник,
	|	СписокРаботников.Сотрудник.Наименование,
	|	СписокРаботников.ДоляЕНВД КАК ПодпадаетПодЕНВД,
	|	СписокРаботников.ДоляСпособаОтражения КАК ИтогоОтражено,
	//vvv
	|	СУММА(ОтработаноВремени.Часов) КАК ЧасовОборот,
	|	СписокРаботников.ПериодДействияНачало КАК ПериодДействияНачало,
	|	СписокРаботников.ПериодДействияКонец КАК ПериодДействияКонец,
	//
	|	СписокРаботников.СтатьяЗатратЕНВД,
	|	СписокРаботников.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА СписокРаботников.Сотрудник.Организация = &Организация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	СуществующиеДвиженияЕНВД.РегистраторПредставление КАК КонфликтныйДокументЕНВД,
	|	СуществующиеДвиженияРаспределение.РегистраторПредставление КАК КонфликтныйДокументРаспределения
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаспределениеНачислений.Сотрудник КАК Сотрудник,
	//vvv
	|		РаспределениеНачислений.ПериодДействияНачало КАК ПериодДействияНачало,
	|		РаспределениеНачислений.ПериодДействияКонец КАК ПериодДействияКонец,
	//
	|		СУММА(РаспределениеНачислений.ДоляСпособаОтражения) КАК ДоляСпособаОтражения,
	|		СУММА(ВЫБОР
	|				КОГДА РаспределениеНачислений.ПодпадаетПодЕНВД
	|					ТОГДА РаспределениеНачислений.ДоляСпособаОтражения
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ДоляЕНВД,
	|		МИНИМУМ(РаспределениеНачислений.НомерСтроки) КАК НомерСтроки,
	|		МАКСИМУМ(РаспределениеНачислений.СтатьяЗатратЕНВД) КАК СтатьяЗатратЕНВД
	|	ИЗ
	|		Документ.ВводРаспределенияОсновногоЗаработкаРаботниковОрганизации.РаспределениеНачислений КАК РаспределениеНачислений
	|	ГДЕ
	|		РаспределениеНачислений.Ссылка = &ДокументСсылка
	|	
	|	СГРУППИРОВАТЬ ПО
	//vvv
	|		РаспределениеНачислений.ПериодДействияНачало,
	|		РаспределениеНачислений.ПериодДействияКонец,
	//
	|		РаспределениеНачислений.Сотрудник) КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СуществующееРаспределение.Сотрудник КАК Сотрудник,
	|			СуществующееРаспределение.Регистратор.Представление КАК РегистраторПредставление
	|		ИЗ
	|			РегистрСведений.РаспределениеОсновногоЗаработкаРаботниковОрганизаций КАК СуществующееРаспределение
	|		ГДЕ
	|			СуществующееРаспределение.ПериодРегистрации = &Период
	|			И СуществующееРаспределение.Организация = &Организация) КАК СуществующиеДвиженияРаспределение
	|		ПО СписокРаботников.Сотрудник = СуществующиеДвиженияРаспределение.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СуществующиеДвиженияЕНВД.Сотрудник КАК Сотрудник,
	|			СуществующиеДвиженияЕНВД.Регистратор.Представление КАК РегистраторПредставление
	|		ИЗ
	|			РегистрСведений.ПроцентДеятельностиЕНВДСотрудников КАК СуществующиеДвиженияЕНВД
	|		ГДЕ
	|			СуществующиеДвиженияЕНВД.ПериодРегистрации = &Период
	|			И СуществующиеДвиженияЕНВД.Организация = &Организация) КАК СуществующиеДвиженияЕНВД
	|		ПО СписокРаботников.Сотрудник = СуществующиеДвиженияЕНВД.Сотрудник
	//vvv
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработаноВремени
	|			ПО ОтработаноВремени.Сотрудник=СписокРаботников.Сотрудник
	|			И ОтработаноВремени.Организация = &Организация
	|			И ВидИспользованияРабочегоВремени = &Явка		
	|			И ОтработаноВремени.Период МЕЖДУ &НачПериода И &КонПериода  
	|			И (ОтработаноВремени.Период>=СписокРаботников.ПериодДействияНачало И ОтработаноВремени.Период<=СписокРаботников.ПериодДействияКонец)
	|СГРУППИРОВАТЬ ПО
	|	СписокРаботников.Сотрудник,
	|	СписокРаботников.Сотрудник.Наименование,
	|	СписокРаботников.ДоляЕНВД,
	|	СписокРаботников.ДоляСпособаОтражения,
	|	СписокРаботников.ПериодДействияНачало,
	|	СписокРаботников.ПериодДействияКонец,
	|	СписокРаботников.СтатьяЗатратЕНВД,
	|	СписокРаботников.НомерСтроки,
	|	ВЫБОР
	|		КОГДА СписокРаботников.Сотрудник.Организация = &Организация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	СуществующиеДвиженияЕНВД.РегистраторПредставление,
	|	СуществующиеДвиженияРаспределение.РегистраторПредставление
	//
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизацииРаспределение(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	//vvv
	Запрос.УстановитьПараметр("Организация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("НачПериода",НачалоМесяца(ВыборкаПоШапкеДокумента.Период));
	Запрос.УстановитьПараметр("КонПериода",КонецМесяца(ВыборкаПоШапкеДокумента.Период));
	Запрос.УстановитьПараметр("Явка",Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
	Запрос.УстановитьПараметр("ВидРаспределения",ВыборкаПоШапкеДокумента.ВидРаспределения);
	//
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокРаспределения.Сотрудник,
	|	СписокРаспределения.СпособОтраженияВБухучете,
	//vvv
	//|	СписокРаспределения.ДоляСпособаОтражения,
	|	СписокРаспределения.СчетДт,
	|	СписокРаспределения.Ссылка.НепосредственныйВводОтражения КАК НепосредственныйВводОтражения,
	|	СписокРаспределения.СубконтоДт1,
	|	СписокРаспределения.СубконтоДт2,
	|	СписокРаспределения.СубконтоДт3,
	|	СписокРаспределения.СубконтоДт4,
	|	ВЫБОР 
	|		КОГДА &ВидРаспределения=ЗНАЧЕНИЕ(Перечисление.ВидыРаспределенияОсновногоЗаработка.КоличествоЧасов)
	|			ТОГДА СписокРаспределения.ДоляСпособаОтражения / СУММА(ОтработаноВремени.Часов)*100 
	| 		ИНАЧЕ СписокРаспределения.ДоляСпособаОтражения	
	|	КОНЕЦ КАК ДоляСпособаОтражения,
	|	СУММА(ОтработаноВремени.Часов) КАК ЧасовОборот,
	|	СписокРаспределения.ВидРасчета,
	|	СписокРаспределения.ПериодДействияНачало,
	|	СписокРаспределения.ПериодДействияКонец,
	//
	|	СписокРаспределения.ПодпадаетПодЕНВД,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СчетВыбран,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.БольничныйЗаСчетРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК БольничныйЗаСчетРаботодателя,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеОтражатьВБухучете,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтражениеНачисленийПоУмолчанию,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПустойСпособОтражения,	
	|	СписокРаспределения.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ВводРаспределенияОсновногоЗаработкаРаботниковОрганизации.РаспределениеНачислений КАК СписокРаспределения
	//vvv
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработаноВремени
	|		ПО ОтработаноВремени.Сотрудник=СписокРаспределения.Сотрудник
	|		И ОтработаноВремени.Организация = &Организация
	|		И ВидИспользованияРабочегоВремени = &Явка
	|		И ОтработаноВремени.Период МЕЖДУ &НачПериода И &КонПериода  
	|		И (ОтработаноВремени.Период>=СписокРаспределения.ПериодДействияНачало И ОтработаноВремени.Период<=СписокРаспределения.ПериодДействияКонец)
	//
	|ГДЕ
	|	СписокРаспределения.Ссылка = &ДокументСсылка
	|
	//vvv
	|СГРУППИРОВАТЬ ПО
	|	СписокРаспределения.Сотрудник,
	|	СписокРаспределения.СпособОтраженияВБухучете,
	|	СписокРаспределения.СчетДт,
	|	СписокРаспределения.Ссылка.НепосредственныйВводОтражения,
	|	СписокРаспределения.СубконтоДт1,
	|	СписокРаспределения.СубконтоДт2,
	|	СписокРаспределения.СубконтоДт3,
	|	СписокРаспределения.СубконтоДт4,
	|	СписокРаспределения.ВидРасчета,
	|	СписокРаспределения.ПериодДействияНачало,
	|	СписокРаспределения.ПериодДействияКонец,
	|	СписокРаспределения.ДоляСпособаОтражения,
	|	СписокРаспределения.ПодпадаетПодЕНВД,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.БольничныйЗаСчетРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,	
	|	СписокРаспределения.НомерСтроки
	//
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизацииРаспределение()
//vvv
Функция ПолучитьНаименованиеСпособаОтражения(СпособОтражения)

	НаименовниеДебета = "";
	СубконтоДебета = "";
	Если ЗначениеЗаполнено(СпособОтражения.СчетДт) Тогда
		ВидыСубконтоСчета = СпособОтражения.СчетДт.ВидыСубконто;
		Для Ном = 1 по ВидыСубконтоСчета.Количество() Цикл
			Если ЗначениеЗаполнено(СпособОтражения["СубконтоДт"+Ном]) Тогда
				Если ТипЗнч(СпособОтражения["СубконтоДт"+Ном])=Тип("СправочникСсылка.ПодразделенияОрганизаций") или 
					 ТипЗнч(СпособОтражения["СубконтоДт"+Ном])=Тип("СправочникСсылка.Автомобили") Тогда
					СубконтоДебета = СубконтоДебета + "<" + СокрЛП(Строка(СпособОтражения["СубконтоДт"+Ном].Владелец))+"."+СокрЛП(Строка(СпособОтражения["СубконтоДт"+Ном])) + "> ";
				Иначе
					СубконтоДебета = СубконтоДебета + "<" + СокрЛП(Строка(СпособОтражения["СубконтоДт"+Ном])) + "> ";					
				КонецЕсли;
			ИначеЕсли ВидыСубконтоСчета[Ном-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации Тогда
				//пропускаем
			ИначеЕсли ВидыСубконтоСчета[Ном-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения Тогда	
				СубконтоДебета = СубконтоДебета + "<подб. авт.> ";
			Иначе
				СубконтоДебета = СубконтоДебета + "<...> ";
			КонецЕсли;	
		КонецЦикла;                 
		НаименовниеДебета = "Дт" + СпособОтражения.СчетДт + " " + СубконтоДебета;
	КонецЕсли;
	
	НаименовниеКредита = "";
	СубконтоКредита = "";
	Если ЗначениеЗаполнено(СпособОтражения.СчетКт) Тогда
		ВидыСубконтоСчета = СпособОтражения.СчетКт.ВидыСубконто;
		Для Ном = 1 по ВидыСубконтоСчета.Количество() Цикл
			Если ЗначениеЗаполнено(СпособОтражения["СубконтоКт"+Ном]) Тогда
				Если ТипЗнч(СпособОтражения["СубконтоКт"+Ном])=Тип("СправочникСсылка.ПодразделенияОрганизаций") или 
					 ТипЗнч(СпособОтражения["СубконтоКт"+Ном])=Тип("СправочникСсылка.Автомобили") Тогда
					СубконтоКредита = СубконтоКредита + "<" + СокрЛП(Строка(СпособОтражения["СубконтоКт"+Ном].Владелец))+"."+СокрЛП(Строка(СпособОтражения["СубконтоКт"+Ном])) + "> ";
				Иначе
					СубконтоКредита = СубконтоКредита + "<" +СокрЛП(Строка(СпособОтражения["СубконтоКт"+Ном])) + "> ";					
				КонецЕсли;
			ИначеЕсли ВидыСубконтоСчета[Ном-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации Тогда
				//пропускаем
			ИначеЕсли ВидыСубконтоСчета[Ном-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения Тогда	
				СубконтоКредита = СубконтоКредита + "<подб. авт.> ";
			Иначе
				СубконтоКредита = СубконтоКредита + "<...> ";
			КонецЕсли;	
		КонецЦикла;
		НаименовниеКредита = "Кт" + СпособОтражения.СчетКт + " " + СубконтоКредита;
	КонецЕсли;
	
	Возврат СОКРЛП(НаименовниеДебета + " " + НаименовниеКредита);


КонецФункции // ПолучитьНаименованиеСпособаОтражения()
//vvv
Функция ПодобратьСпособОтражения(СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СубконтоДт4)
	
	Запрос=Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпособыОтраженияЗарплатыВРеглУчете.Ссылка
	|ИЗ
	|	Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК СпособыОтраженияЗарплатыВРеглУчете
	|ГДЕ
	|	СпособыОтраженияЗарплатыВРеглУчете.СчетДт = &СчетДт
	|	И СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт1 = &СубконтоДт1
	|	И СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт2 = &СубконтоДт2
	|	И СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт3 = &СубконтоДт3
	|	И СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт4 = &СубконтоДт4
	|	И СпособыОтраженияЗарплатыВРеглУчете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда)";
	
	Запрос.УстановитьПараметр("СчетДт",СчетДТ);
	Запрос.УстановитьПараметр("СубконтоДт1",СубконтоДт1);
	Запрос.УстановитьПараметр("СубконтоДт2",СубконтоДт2);
	Запрос.УстановитьПараметр("СубконтоДт3",СубконтоДт3);
	Запрос.УстановитьПараметр("СубконтоДт4",СубконтоДт4);
	Выборка=Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СпособОтражения=Выборка.Ссылка;
	Иначе
		Отражение = Справочники.СпособыОтраженияЗарплатыВРеглУчете.СоздатьЭлемент();
		Отражение.СчетДт=СчетДТ;       
		Отражение.СубконтоДт1=СубконтоДт1;
		Отражение.СубконтоДт2=СубконтоДт2;
		Отражение.СубконтоДт3=СубконтоДт3;
		Отражение.СубконтоДт4=СубконтоДт4;
		Отражение.СчетКт=ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		Отражение.Наименование = ПолучитьНаименованиеСпособаОтражения(Отражение);
		Отражение.Записать();
		СпособОтражения=Отражение.Ссылка;
		Сообщить("Создан новый способ отражения "+СокрЛП(Отражение.Наименование));
	КонецЕсли;

	Возврат СпособОтражения;
	
КонецФункции

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;	
		
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Период) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса
//	Отказ						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Распределение основного заработка"": ";
									
									
	//vvv
	//добавляем условие на непосредственный ввод
	Если Не ВыборкаПоСтрокамДокумента.НеПосредственныйВводОтражения Тогда
		
		Если ВыборкаПоСтрокамДокумента.ПустойСпособОтражения Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан способ отражения!", Отказ, Заголовок);
		КонецЕсли;
	
		// Проверка способа отражения
		Если ВыборкаПоСтрокамДокумента.БольничныйЗаСчетРаботодателя ИЛИ ВыборкаПоСтрокамДокумента.НеОтражатьВБухучете Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "заданный способ отражения нельзя указывать в документе!", Отказ, Заголовок);
		ИначеЕсли Не ВыборкаПоСтрокамДокумента.СчетВыбран Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "в способе отражения не задан счет дебета и/или кредита!", Отказ, Заголовок);
		КонецЕсли;
		
	Иначе	
		
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетДт) И ВыборкаПоСтрокамДокумента.НеПосредственныйВводОтражения Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан счет дебета!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса
//	Отказ						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеДанныхПоРаботнику(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ЕстьЕНВД)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Распределение основного заработка"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран работник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник и организация
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + ВыборкаПоСтрокамДокумента.СотрудникНаименование+" работает в другой организации!", Отказ, Заголовок);
	КонецЕсли;
	
	//vvv
	Если ВыборкаПоШапкеДокумента.ВидРаспределения=Перечисления.ВидыРаспределенияОсновногоЗаработка.КоличествоЧасов Тогда
		Если ВыборкаПоСтрокамДокумента.ИтогоОтражено <> ВыборкаПоСтрокамДокумента.ЧасовОборот Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "суммарное количество введеных часов по работнику не совпадает с отработанным временем!", Отказ, Заголовок);
		КонецЕсли;
	Иначе
	//	
		Если ВыборкаПоСтрокамДокумента.ИтогоОтражено <> 100 Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "суммарная доля распределения начислений по работнику не равна 100%!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	//
	// Движения в регистре доли ЕНВД
	//Если ЕстьЕНВД И ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтныйДокументЕНВД) Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "на период "+ Формат(ВыборкаПоШапкеДокумента.Период, "ДФ='ММММ гггг'") + " процент деятельностьи ЕНВД уже зарегистрирован документом " + Символы.ПС + ВыборкаПоСтрокамДокумента.КонфликтныйДокументЕНВД + "!", Отказ, Заголовок);
	//КонецЕсли;
	
	// Движения в регистре распределения
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтныйДокументРаспределения) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "на период "+ Формат(ВыборкаПоШапкеДокумента.Период, "ДФ='ММММ гггг'") + " распределение основного заработка уже зарегистрировано документом " + Символы.ПС + ВыборкаПоСтрокамДокумента.КонфликтныйДокументРаспределения + "!", Отказ, Заголовок);
	КонецЕсли;

	
КонецПроцедуры // ПроверитьЗаполнениеДанныхПоРаботнику()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//	ВыборкаПоШапкеДокумента					- выборка из результата запроса по шапке документа,
//	ИмяРегистра								- строка, имя регистрапо которому делаем движения
//	СтруктураПараметров						- структура параметров проведения,
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, ИмяРегистра)
	
	Движение = Движения[ИмяРегистра].Добавить();
	
	Если ИмяРегистра = "ПроцентДеятельностиЕНВДСотрудников" Тогда
		// Измерения
		Движение.ПериодРегистрации	= ВыборкаПоШапкеДокумента.Период;
		Движение.Сотрудник			= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// Ресурсы
		Движение.ПодпадаетПодЕНВД	= ВыборкаПоРаботникиОрганизации.ПодпадаетПодЕНВД;
		Движение.СтатьяЗатратЕНВД	= ВыборкаПоРаботникиОрганизации.СтатьяЗатратЕНВД;
		
	ИначеЕсли ИмяРегистра = "РаспределениеОсновногоЗаработкаРаботниковОрганизаций" Тогда	
		
		// Измерения
		Движение.ПериодРегистрации			= ВыборкаПоШапкеДокумента.Период;
		Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.СпособОтраженияВБухучете 	= ВыборкаПоРаботникиОрганизации.СпособОтраженияВБухучете;
		//vvv
		Если ВыборкаПоШапкеДокумента.НепосредственныйВводОтражения Тогда
			Движение.СпособОтраженияВБухучете 	= ПодобратьСпособОтражения(ВыборкаПоРаботникиОрганизации.СчетДт,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт1,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт2,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт3,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт4);
		КонецЕсли;		
		Движение.ПериодДействияНачало		= ВыборкаПоРаботникиОрганизации.ПериодДействияНачало;
		Движение.ПериодДействияКонец		= ВыборкаПоРаботникиОрганизации.ПериодДействияКонец;
		//
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// Ресурсы
		Движение.ДоляСпособаОтражения		= ВыборкаПоРаботникиОрганизации.ДоляСпособаОтражения;
		Движение.ПодпадаетПодЕНВД			= ВыборкаПоРаботникиОрганизации.ПодпадаетПодЕНВД;
		
	//vvv
	ИначеЕсли ИмяРегистра = "РаспределениеВидовРасчетаРаботниковОрганизаций" Тогда	
		
		// Измерения
		Движение.ПериодРегистрации			= ВыборкаПоШапкеДокумента.Период;
		Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ПериодДействияНачало		= ВыборкаПоРаботникиОрганизации.ПериодДействияНачало;
		Движение.ПериодДействияКонец		= ВыборкаПоРаботникиОрганизации.ПериодДействияКонец;
		Движение.ВидРасчета					= ВыборкаПоРаботникиОрганизации.ВидРасчета;
		
		// Ресурсы
		Движение.СпособОтраженияВБухучете 	= ВыборкаПоРаботникиОрганизации.СпособОтраженияВБухучете;		
		Если ВыборкаПоШапкеДокумента.НепосредственныйВводОтражения Тогда
			Движение.СпособОтраженияВБухучете 	= ПодобратьСпособОтражения(ВыборкаПоРаботникиОрганизации.СчетДт,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт1,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт2,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт3,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт4);
		КонецЕсли;				
	//
		
	КонецЕсли; 
	
		
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			//vvv
			Если ВыборкаПоШапкеДокумента.ВидРаспределения=Перечисления.ВидыРаспределенияОсновногоЗаработка.НачисленияПоПериодуДействия Тогда
				// получим реквизиты табличной части
				РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизацииРаспределение(ВыборкаПоШапкеДокумента);
				ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать();

				Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);
				
					Если Не Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, "РаспределениеВидовРасчетаРаботниковОрганизаций");
					КонецЕсли;
				
				КонецЦикла;
			
				Если Отказ Тогда
					Возврат;
				КонецЕсли;
			Иначе	
			//
			// получим реквизиты табличной части, сгруппировананные по работникам
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента);
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать();
			
			БухгалтерскийИНалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("глУчетнаяПолитикаПоНалоговомуУчету"), КонецМесяца(Период), Организация);
			ЕстьЕНВД = глЗначениеПеременной("глУчетнаяПолитикаПоНалоговомуУчету")[КонецМесяца(Период)][Организация].ОрганизацияЯвляетсяПлательщикомЕНВД;
			
			//в первом цикле проверим заполнение данных и зарегистрируем долю ЕНВД
			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 
					
					// проверим очередную строку
					ПроверитьЗаполнениеДанныхПоРаботнику(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок, ЕстьЕНВД);
					
					Если НЕ Отказ И ЕстьЕНВД Тогда
						
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, "ПроцентДеятельностиЕНВДСотрудников");
						
					КонецЕсли;
					
			КонецЦикла;

			ОтказПервогоЦикла = Отказ; //есть ошибки по результатам проверки в первом цикле
			
			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизацииРаспределение(ВыборкаПоШапкеДокумента);
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать();
			
			

			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);
				
				Если Не Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, "РаспределениеОсновногоЗаработкаРаботниковОрганизаций");
				КонецЕсли;
				
			КонецЦикла;
			
			Если Отказ или ОтказПервогоЦикла Тогда
				Возврат;
			КонецЕсли;
			//vvv
			КонецЕсли;
		    //
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаспределениеНачислений);
	
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

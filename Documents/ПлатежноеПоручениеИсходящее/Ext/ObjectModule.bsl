
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Определяет номер расчетного счета по
// переданному банковскому счету
//
// Параметры:
//  СчетКонтра - справочник.БанковскиеСчета
//
// Возвращаемое значение
//  Номер расчетного счета
//
Функция ВернутьРасчетныйСчет(СчетКонтра)
	
	БанкДляРасчетов = СчетКонтра.БанкДляРасчетов;
	Результат       = ?(БанкДляРасчетов.Пустая(),СчетКонтра.НомерСчета,БанкДляРасчетов.КоррСчет);
	
	Возврат Результат;
	
КонецФункции // ВернутьРасчетныйСчет()

// Форматирует сумму прописью документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо представить прописью 
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСуммуПрописи(СуммаДок,СуммаБезКопеек)
	//
	//Результат     = СуммаДок;
	//ЦелаяЧасть    = Цел(СуммаДок);
	//ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	//ПарамПредмета = "рубль, рубля, рублей, м, копейка, копейки, копеек, ж";
	//
	//Если (Результат - ЦелаяЧасть) = 0 Тогда
	//	Если СуммаБезКопеек Тогда
	//		Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
	//		Результат = Лев(Результат,Найти(Результат,"0")-1)+"=";
	//	Иначе
	//		Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
	//	КонецЕсли;
	//Иначе
	//	Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
	//КонецЕсли;
	//
	//Возврат Результат;
	//
	
	 //РБ
	Результат     = СуммаДок;
	ЦелаяЧасть    = Цел(СуммаДок);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
		 
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если Валюта.ПараметрыПрописиНаРусском = "" Тогда
		ПарамПредмета = "белорусский рубль, белорусских рубля, белорусских рублей, м,,,,, 0";
	Иначе
		ПарамПредмета = Валюта.ПараметрыПрописиНаРусском;
	КонецЕсли;
      
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
			допРезультат = Найти(Результат,"00");
			Если допРезультат = 0 тогда
				Результат = СокрЛП(Результат);//+"=";
			Иначе
				Результат = Лев(Результат,Найти(Результат,"00") - 1);// + "=";
			КонецЕсли;
		Иначе
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	

	
КонецФункции // ФорматироватьСуммуПрописи()

// Форматирует сумму  документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо отформатировать
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСумму(СуммаДок,СуммаБезКопеек)
	
	//Результат  = СуммаДок;
	//ЦелаяЧасть = Цел(СуммаДок);
	//
	//Если (Результат - ЦелаяЧасть) = 0 Тогда
	//	Если СуммаБезКопеек Тогда
	//		Результат = Формат(Результат,"ЧДЦ=2; ЧРД='='; ЧГ=0");
	//		Результат = Лев(Результат,Найти(Результат,"="));
	//	Иначе
	//		Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
	//	КонецЕсли;
	//Иначе
	//	Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
	//КонецЕсли;
	//
	//Возврат Результат;
	//
	
	//РБ	
	Результат  = СуммаДок;
	ЦелаяЧасть = Цел(СуммаДок);
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат,Найти(Результат,"="));
		Иначе
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='.'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат,"ЧДЦ=2; ЧРД='.'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	

КонецФункции // ФорматироватьСумму()

Процедура ЗаполнитьДокументПоОснованиюРегл(Основание)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание",Основание);
	Запрос.УстановитьПараметр("Рубли",Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка КАК Ведомость,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.СпособВыплаты,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = &Рубли
	|			ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация.ОсновнойБанковскийСчет
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетОрганизации,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Банк КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Банк.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = &Рубли
	|			ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Банк.ОсновнойБанковскийСчет
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетКонтрагента,
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК СуммаКВыплате
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если Выборка.СпособВыплаты <> Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
		Сообщить("Платежная ведомость оформлена на выплату через кассу! Заполнение не выполнялось.");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,Выборка);
	ЗаполнитьЗначенияСвойств(ПеречислениеЗаработнойПлаты.Добавить(),Выборка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Формирует печатную форму 
// платежного поручения
//
// Параметры:
//  ТабДок - табличный документ
//
Функция ПечатьПлатежногоПоручения() Экспорт

	Если Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	Если Контрагент.Пустая() Тогда
		Сообщить("Не указан контрагент.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	НомерПечать= РаботаСДиалогами.ПолучитьНомерНаПечать(ЭтотОбъект);
	
	Если Прав(НомерПечать,3)="000" Тогда
		Сообщить("Номер платежного поручения не может оканчиваться на ""000""!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение";
	
	Макет = ПолучитьОбщийМакет("ПлатежноеПоручениеРБ");
	Обл   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");

	МесяцПрописью   = СчетОрганизации.МесяцПрописью;
	СуммаБезКопеек  = СчетОрганизации.СуммаБезКопеек;
	ФорматДаты      = "ДФ=" + ?(МесяцПрописью = 1,"'дд ММММ гггг'","'дд.ММ.гггг'");
	БанкОрганизации = ?(ЗначениеЗаполнено(СчетОрганизации.БанкДляРасчетов), СчетОрганизации.БанкДляРасчетов, СчетОрганизации.Банк);
	БанкКонтрагента = ?(ЗначениеЗаполнено(СчетКонтрагента.БанкДляРасчетов), СчетКонтрагента.БанкДляРасчетов, СчетКонтрагента.Банк);

	Обл.Параметры.НомерДокумента       	  = НомерПечать;
	Обл.Параметры.ДатаДокумента           = Формат(Дата,ФорматДаты);
	//Обл.Параметры.ВидПлатежа              = ВидПлатежа;
	СуммаДокумента = ПеречислениеЗаработнойПлаты.Итог("СуммаКВыплате");
	Обл.Параметры.СуммаЧислом             = ФорматироватьСумму(СуммаДокумента,СуммаБезКопеек);
	Обл.Параметры.СуммаПрописью           = ФорматироватьСуммуПрописи(СуммаДокумента,СуммаБезКопеек);

	
	Обл.Параметры.КодВалюты               = СчетОрганизации.ВалютаДенежныхСредств.Код;
	Обл.Параметры.ПлательщикИНН           = ?(ПустаяСтрока(ИННПлательщика), Организация.ИНН, СокрЛП(ИННПлательщика));
	//Обл.Параметры.ПлательщикКПП         = "КПП " + ?(ПустаяСтрока(КППплательщика),"",СокрЛП(КППплательщика));
	Обл.Параметры.Плательщик              = ?(ПустаяСтрока(ТекстПлательщика),Организация.НаименованиеПолное,СокрЛП(ТекстПлательщика));
	Обл.Параметры.БанкПлательщика         = "" + БанкОрганизации + " " + БанкОрганизации.Город;
	
	Обл.Параметры.Несрочный 	= ?(Перевод,"","Х");
	Обл.Параметры.Срочный	    = ?(Перевод,"Х","");
	Обл.Параметры.пл		= ?(РасходыПоПереводу = 1,"Х"," ");
	Обл.Параметры.бн		= ?(РасходыПоПереводу = 2,"Х"," ");
	Обл.Параметры.пб		= ?(РасходыПоПереводу = 3,"Х"," ");
	
	Если СчетОрганизации.БанкДляРасчетов.Пустая() Тогда
		СтрКорреспондент="";
	Иначе	
		СтрКорреспондент= " р/с " + СчетОрганизации.НомерСчета+ " в " + СчетОрганизации.Банк + " " + СчетОрганизации.Банк.Город;	
	КонецЕсли;
	
    ТекстПлательщикПечать=?(ПустаяСтрока(ТекстПлательщика),Организация.НаименованиеПолное,СокрЛП(ТекстПлательщика))+?(организация.РезидентРБ,", резидент РБ",", нерезидент РБ");
	
	Обл.Параметры.Плательщик              = ТекстПлательщикПечать;
	Обл.Параметры.БанкПлательщика         = "" + БанкОрганизации + " " + БанкОрганизации.Город;
	
	Обл.Параметры.НомерСчетаПлательщика   = ВернутьРасчетныйСчет(СчетОрганизации);

	Обл.Параметры.БикБанкаПлательщика     = БанкОрганизации.Код;
	//Обл.Параметры.СчетБанкаПлательщика    = БанкОрганизации.КоррСчет;

	Обл.Параметры.ПолучательИНН           = ?(ПустаяСтрока(ИННПолучателя), Контрагент.ИНН, СокрЛП(ИННПолучателя));
	//Обл.Параметры.ПолучательКПП           = "КПП " + ?(ПустаяСтрока(КПППолучателя),"",СокрЛП(КПППолучателя));
	Обл.Параметры.Получатель              = ?(ПустаяСтрока(ТекстПолучателя),Контрагент.НаименованиеПолное,СокрЛП(ТекстПолучателя));

	Обл.Параметры.БанкПолучателя          = "" + БанкКонтрагента + " " + БанкКонтрагента.Город;
	Обл.Параметры.БикБанкаПолучателя      = БанкКонтрагента.Код;
	//Обл.Параметры.СчетБанкаПолучателя     = БанкКонтрагента.КоррСчет;

    Обл.Параметры.НомерСчетаПолучателя    = ВернутьРасчетныйСчет(СчетКонтрагента);

	Обл.Параметры.НазначениеПлатежа       = СокрЛП(НазначениеПлатежа);
	Обл.Параметры.Очередность             = ОчередностьПлатежа;
	//Обл.Параметры.СрокПлатежа             = "";
    Обл.Параметры.КодПлатежа				=КодПлатежа;
	//Обл.Параметры.Нужд = ?(НеотложныхНужд, "В счет неотложных нужд", "");
	
	
	ТабДокумент.Вывести(Обл);

	Возврат ТабДокумент;

КонецФункции // ПечатьПлатежногоПоручения()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПлатежноеПоручение" тогда
	
		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПлатежногоПоручения();
	КонецЕсли;
	
	Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
	
КонецФункции // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПлатежноеПоручение","Платежное поручение");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчеты()

	СтруктураПолей= Новый Структура("Организация");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Формирует запрос по табличной части документа
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоДокПлатежноеПоручение()

	Запрос = Новый Запрос;
	
	Если ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументПеречислениеЗаработнойПлаты.Ссылка.Дата КАК Период,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК ФизЛицо,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодРегистрации КАК ПериодВзаиморасчетов,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ХарактерВыплаты,
		|	&СпособВыплаты КАК СпособВыплаты,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК СуммаВзаиморасчетов,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Удержано,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.АвтоматическиПереноситьОстатки
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ДокументПеречислениеЗаработнойПлаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|			ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|				И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
		|				И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
		|		ПО (ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = ДокументПеречислениеЗаработнойПлаты.Ведомость)
		|ГДЕ
		|	ДокументПеречислениеЗаработнойПлаты.Ссылка = &Ссылка
		|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументПеречислениеЗаработнойПлаты.Ссылка.Дата,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодРегистрации,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ХарактерВыплаты,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Удержано
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) <> 0";
	Иначе	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументПеречислениеЗаработнойПлаты.Ссылка.Дата КАК Период,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК ФизЛицо,
		|	&СпособВыплаты КАК СпособВыплаты,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ХарактерВыплаты,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК СуммаВзаиморасчетов,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.АвтоматическиПереноситьОстатки
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ДокументПеречислениеЗаработнойПлаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|			ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|				И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
		|				И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
		|		ПО (ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = ДокументПеречислениеЗаработнойПлаты.Ведомость)
		|ГДЕ
		|	ДокументПеречислениеЗаработнойПлаты.Ссылка = &Ссылка
		|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументПеречислениеЗаработнойПлаты.Ссылка.Дата,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ХарактерВыплаты
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) <> 0";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",			Ссылка);
	Запрос.УстановитьПараметр("СпособВыплаты",	Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоДокПлатежноеПоручение

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок)
	
	ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок)
	
	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	УчетЗадолженностиПоМесяцам = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
	// По регистру регламентированных расчетов с работниками

	Выборка = СформироватьЗапросПоДокПлатежноеПоручение().Выбрать();

	Пока Выборка.Следующий() Цикл
		СтрокаДвижения = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижения,Выборка);
		СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Расход;
		
		Если Выборка.АвтоматическиПереноситьОстатки И УчетЗадолженностиПоМесяцам Тогда
			
			СтрокаДвижения = Движения.ВзаиморасчетыСРаботникамиОрганизаций.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения,Выборка); 
			СтрокаДвижения.СуммаВзаиморасчетов	= -Выборка.Удержано;
			
			СтрокаДвижения = Движения.ВзаиморасчетыСРаботникамиОрганизаций.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения,Выборка);
			СтрокаДвижения.ПериодВзаиморасчетов	= КонецМесяца(Выборка.ПериодВзаиморасчетов)+1;
			СтрокаДвижения.СуммаВзаиморасчетов	= Выборка.Удержано;
			
		КонецЕсли;

	КонецЦикла;

	// По регистру расчетов с бюджетом по НДФЛ

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПлДок.Ссылка.Дата > КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
	|			ТОГДА ПлДок.Ссылка.Дата
	|		ИНАЧЕ КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
	|	КОНЕЦ КАК ДатаНДФЛ
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлДок
	|ГДЕ
	|	ПлДок.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлДок.Ссылка.Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДатаНДФЛ = Выборка.ДатаНДФЛ;
	
	// Выборка долгов по НДФЛ в разрезе месяцев налогового периода по обособленному подразделению
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СуммыВыплатИСальдоПоМесяцам.ФизЛицо КАК ФизЛицо,
	|	ЕСТЬNULL(СуммыВыплатИСальдоПоМесяцам.ВыплаченнаяСумма, 0) КАК ВыплаченнаяСумма,
	|	НДФЛРасчетыСБюджетомПоМесяцам.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	НДФЛРасчетыСБюджетомПоМесяцам.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцам.СальдоПоНалогу, 0) КАК СальдоПоНалогуЗаМесяц,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоГодам.СальдоПоНалогу, 0) КАК СальдоПоНалогуЗаНалоговыйПериод,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.КодПоОКАТО, """") КАК КодПоОКАТО,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.КПП, """") КАК КПП,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ПодразделениеОрганизации,
	|	НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.Период КАК ДатаРегистрацииКодаОКАТО,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.СальдоПоНалогу, 0) КАК СальдоПоОКАТО,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего.СальдоПоНалогу, 0) КАК ВсегоЗаМесяцПоОКАТО
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗарплатаКВыплате.Физлицо КАК ФизЛицо,
	|		СУММА(ЗарплатаКВыплате.Сумма) КАК ВыплаченнаяСумма
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлДок
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|				ПО ЗарплатаКВыплате.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|					И ЗарплатаКВыплате.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|					И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
	|			ПО ПлДок.Ведомость = ЗарплатаКВыплате.Ссылка
	|	ГДЕ
	|		ПлДок.Ссылка = &ДокументСсылка
	|		И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗарплатаКВыплате.Физлицо) КАК СуммыВыплатИСальдоПоМесяцам
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|			НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|			НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|			СУММА(НДФЛРасчетыСБюджетом.СальдоПоНалогу) КАК СальдоПоНалогу
	|		ИЗ
	|			(ВЫБРАТЬ
	|				НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|				НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|				НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|				ВЫБОР
	|					КОГДА НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ТОГДА НДФЛРасчетыСБюджетом.Налог
	|					ИНАЧЕ -НДФЛРасчетыСБюджетом.Налог
	|				КОНЕЦ КАК СальдоПоНалогу
	|			ИЗ
	|				РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|			ГДЕ
	|				НДФЛРасчетыСБюджетом.Регистратор <> &ДокументСсылка
	|				И НДФЛРасчетыСБюджетом.Организация = &ГоловнаяОрганизация
	|				И НДФЛРасчетыСБюджетом.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				И НДФЛРасчетыСБюджетом.Период <= &ДатаНДФЛ
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				НДФЛКЗачету.ФизЛицо,
	|				НАЧАЛОПЕРИОДА(НДФЛКЗачету.Период, МЕСЯЦ),
	|				&Ставка13,
	|				ВЫБОР
	|					КОГДА НДФЛКЗачету.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ТОГДА НДФЛКЗачету.СуммаНДФЛКЗачету
	|					ИНАЧЕ -НДФЛКЗачету.СуммаНДФЛКЗачету
	|				КОНЕЦ
	|			ИЗ
	|				РегистрНакопления.НДФЛКЗачету КАК НДФЛКЗачету
	|			ГДЕ
	|				НДФЛКЗачету.Регистратор <> &ДокументСсылка
	|				И НДФЛКЗачету.Организация = &ГоловнаяОрганизация
	|				И НДФЛКЗачету.Период <= &ДатаНДФЛ) КАК НДФЛРасчетыСБюджетом
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НДФЛРасчетыСБюджетом.ФизЛицо,
	|			НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|			НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ)) КАК НДФЛРасчетыСБюджетомПоМесяцам
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|				НДФЛРасчетыСБюджетом.НалоговыйПериод КАК НалоговыйПериод,
	|				НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|				СУММА(НДФЛРасчетыСБюджетом.СальдоПоНалогу) КАК СальдоПоНалогу
	|			ИЗ
	|				(ВЫБРАТЬ
	|					НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|					НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, ГОД) КАК НалоговыйПериод,
	|					НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|					ВЫБОР
	|						КОГДА НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА НДФЛРасчетыСБюджетом.Налог
	|						ИНАЧЕ -НДФЛРасчетыСБюджетом.Налог
	|					КОНЕЦ КАК СальдоПоНалогу
	|				ИЗ
	|					РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|				ГДЕ
	|					НДФЛРасчетыСБюджетом.Регистратор <> &ДокументСсылка
	|					И НДФЛРасчетыСБюджетом.Организация = &ГоловнаяОрганизация
	|					И НДФЛРасчетыСБюджетом.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|					И НДФЛРасчетыСБюджетом.Период <= &ДатаНДФЛ
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ
	|					НДФЛКЗачету.ФизЛицо,
	|					НАЧАЛОПЕРИОДА(НДФЛКЗачету.Период, ГОД),
	|					&Ставка13,
	|					ВЫБОР
	|						КОГДА НДФЛКЗачету.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА НДФЛКЗачету.СуммаНДФЛКЗачету
	|						ИНАЧЕ -НДФЛКЗачету.СуммаНДФЛКЗачету
	|					КОНЕЦ
	|				ИЗ
	|					РегистрНакопления.НДФЛКЗачету КАК НДФЛКЗачету
	|				ГДЕ
	|					НДФЛКЗачету.Регистратор <> &ДокументСсылка
	|					И НДФЛКЗачету.Организация = &ГоловнаяОрганизация
	|					И НДФЛКЗачету.Период <= &ДатаНДФЛ) КАК НДФЛРасчетыСБюджетом
	|			
	|			СГРУППИРОВАТЬ ПО
	|				НДФЛРасчетыСБюджетом.ФизЛицо,
	|				НДФЛРасчетыСБюджетом.НалоговыйПериод,
	|				НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента) КАК НДФЛРасчетыСБюджетомПоГодам
	|			ПО НДФЛРасчетыСБюджетомПоМесяцам.ФизЛицо = НДФЛРасчетыСБюджетомПоГодам.ФизЛицо
	|				И НДФЛРасчетыСБюджетомПоМесяцам.СтавкаНалогообложенияРезидента = НДФЛРасчетыСБюджетомПоГодам.СтавкаНалогообложенияРезидента
	|				И (НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетомПоМесяцам.МесяцНалоговогоПериода, ГОД) = НДФЛРасчетыСБюджетомПоГодам.НалоговыйПериод)
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|				НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|				НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|				СУММА(ВЫБОР
	|						КОГДА НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА НДФЛРасчетыСБюджетом.Налог
	|						ИНАЧЕ -НДФЛРасчетыСБюджетом.Налог
	|					КОНЕЦ) КАК СальдоПоНалогу,
	|				НДФЛРасчетыСБюджетом.КодПоОКАТО КАК КодПоОКАТО,
	|				НДФЛРасчетыСБюджетом.КПП КАК КПП,
	|				МАКСИМУМ(НДФЛРасчетыСБюджетом.Период) КАК Период,
	|				НДФЛРасчетыСБюджетом.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|			ИЗ
	|				РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|			ГДЕ
	|				НДФЛРасчетыСБюджетом.Регистратор <> &ДокументСсылка
	|				И НДФЛРасчетыСБюджетом.Организация = &ГоловнаяОрганизация
	|				И НДФЛРасчетыСБюджетом.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				И НДФЛРасчетыСБюджетом.Период <= &ДатаНДФЛ
	|			
	|			СГРУППИРОВАТЬ ПО
	|				НДФЛРасчетыСБюджетом.ФизЛицо,
	|				НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|				НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|				НДФЛРасчетыСБюджетом.КодПоОКАТО,
	|				НДФЛРасчетыСБюджетом.КПП,
	|				НДФЛРасчетыСБюджетом.ПодразделениеОрганизации) КАК НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО
	|			ПО НДФЛРасчетыСБюджетомПоМесяцам.ФизЛицо = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.ФизЛицо
	|				И НДФЛРасчетыСБюджетомПоМесяцам.СтавкаНалогообложенияРезидента = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.СтавкаНалогообложенияРезидента
	|				И НДФЛРасчетыСБюджетомПоМесяцам.МесяцНалоговогоПериода = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.МесяцНалоговогоПериода
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|				НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|				НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|				СУММА(ВЫБОР
	|						КОГДА НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА НДФЛРасчетыСБюджетом.Налог
	|						ИНАЧЕ -НДФЛРасчетыСБюджетом.Налог
	|					КОНЕЦ) КАК СальдоПоНалогу
	|			ИЗ
	|				РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|			ГДЕ
	|				НДФЛРасчетыСБюджетом.Регистратор <> &ДокументСсылка
	|				И НДФЛРасчетыСБюджетом.Организация = &ГоловнаяОрганизация
	|				И НДФЛРасчетыСБюджетом.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				И НДФЛРасчетыСБюджетом.Период <= &ДатаНДФЛ
	|			
	|			СГРУППИРОВАТЬ ПО
	|				НДФЛРасчетыСБюджетом.ФизЛицо,
	|				НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|				НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента) КАК НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего
	|			ПО НДФЛРасчетыСБюджетомПоМесяцам.ФизЛицо = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего.ФизЛицо
	|				И НДФЛРасчетыСБюджетомПоМесяцам.СтавкаНалогообложенияРезидента = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего.СтавкаНалогообложенияРезидента
	|				И НДФЛРасчетыСБюджетомПоМесяцам.МесяцНалоговогоПериода = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего.МесяцНалоговогоПериода
	|		ПО СуммыВыплатИСальдоПоМесяцам.ФизЛицо = НДФЛРасчетыСБюджетомПоМесяцам.ФизЛицо
	|ГДЕ
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцам.СальдоПоНалогу, 0) > 0
	|	И ЕСТЬNULL(НДФЛРасчетыСБюджетомПоГодам.СальдоПоНалогу, 0) > 0
	|	И ЕСТЬNULL(СуммыВыплатИСальдоПоМесяцам.ВыплаченнаяСумма, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	СтавкаНалогообложенияРезидента,
	|	МесяцНалоговогоПериода,
	|	ДатаРегистрацииКодаОКАТО";

	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ДатаНДФЛ",					ДатаНДФЛ);
	Запрос.УстановитьПараметр("ОбособленноеПодразделение",	Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Ставка13",					Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);

	ВременнаяТаблица = Новый ТаблицаЗначений;
	ВременнаяТаблица.Колонки.Добавить("КодПоОКАТО");
	ВременнаяТаблица.Колонки.Добавить("КПП");
	ВременнаяТаблица.Колонки.Добавить("ПодразделениеОрганизации");
	ВременнаяТаблица.Колонки.Добавить("СальдоПоОКАТО");
	
	Выборка= Запрос.Выполнить().Выбрать();

	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
		
		СуммаКВыплате = Выборка.ВыплаченнаяСумма;
		
		Пока Выборка.СледующийПоЗначениюПоля("СтавкаНалогообложенияРезидента") Цикл
			
			ОсталосьРаспределить = Мин(СуммаКВыплате,Выборка.СальдоПоНалогуЗаНалоговыйПериод);
			СуммаКВыплате = Макс(0,СуммаКВыплате - Выборка.СальдоПоНалогуЗаНалоговыйПериод);
			
			Пока Выборка.СледующийПоЗначениюПоля("МесяцНалоговогоПериода") И ОсталосьРаспределить > 0 Цикл

				
				// расчет суммы удерживаемого налога
				ПогашаемаяСумма = Мин(Выборка.СальдоПоНалогуЗаМесяц, ОсталосьРаспределить);
				ОсталосьРаспределить = ОсталосьРаспределить - ПогашаемаяСумма;
				
				Если Выборка.ВсегоЗаМесяцПоОКАТО = Выборка.СальдоПоОКАТО Или Выборка.ВсегоЗаМесяцПоОКАТО = 0 Тогда
					
					// запись удержания
					Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
					
					ЗаполнитьЗначенияСвойств(Движение,Выборка); // ФизЛицо, СтавкаНалогообложенияРезидента, МесяцНалоговогоПериода 
																// КодПоОКАТО, КПП, ПодразделениеОрганизации
				
					//свойства
					Движение.Период      = Дата;
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					//измерения
					Движение.Организация = ГоловнаяОрганизация;
					// ресурсы
					Движение.Налог       = ПогашаемаяСумма;
					// реквизиты
					Движение.ВидСтроки	 = Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
					Движение.ОбособленноеПодразделение = Организация;
					
				Иначе
					
					ФизЛицо = Выборка.ФизЛицо;
					СтавкаНалогообложенияРезидента = Выборка.СтавкаНалогообложенияРезидента;
					МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
					
					ВременнаяТаблица.Очистить();
					Пока Выборка.Следующий() Цикл
						ЗаполнитьЗначенияСвойств(ВременнаяТаблица.Добавить(),Выборка);
					КонецЦикла;
					
					Результат = ОбщегоНазначения.РаспределитьПропорционально(ПогашаемаяСумма,ВременнаяТаблица.ВыгрузитьКолонку("СальдоПоОКАТО"));
					
					Для каждого СтрокаОКАТО Из ВременнаяТаблица Цикл
						
						// запись удержания
						Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
						//свойства
						Движение.Период      = Дата;
						Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
						//измерения
						Движение.Физлицо     = ФизЛицо;
						Движение.Организация = ГоловнаяОрганизация;
						Движение.СтавкаНалогообложенияРезидента = СтавкаНалогообложенияРезидента;
						Движение.МесяцНалоговогоПериода = МесяцНалоговогоПериода;
						// ресурсы
						Движение.Налог       = Результат[ВременнаяТаблица.Индекс(СтрокаОКАТО)];
						// реквизиты
						Движение.ОбособленноеПодразделение = Организация;
						Движение.ВидСтроки = Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
						Движение.КодПоОКАТО	 = СтрокаОКАТО.КодПоОКАТО; 
						Движение.КПП		 = СтрокаОКАТО.КПП; 
						Движение.ПодразделениеОрганизации = СтрокаОКАТО.ПодразделениеОрганизации; 
						
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) <> Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДокументПоОснованиюРегл(Основание);
		
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Запрос = Новый Запрос;

		// Установим параметры запроса
		Запрос.УстановитьПараметр("Ведомости", ПеречислениеЗаработнойПлаты.ВыгрузитьКолонку("Ведомость"));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо.Наименование КАК ФизлицоНаименование,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка В(&Ведомости)
		|	И ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизлицоНаименование";

		Работники.Загрузить(Запрос.Выполнить().Выгрузить());
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Работники.Очистить();
		
	КонецЕсли;
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Работники,, "Физлицо");
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, Режим)
		
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
		
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчеты(), Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры


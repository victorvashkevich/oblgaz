// Текущие курс и кратность валюты документа для расчетов
//Перем КурсДокумента Экспорт;
//Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мИмяВалютыРегламентированногоУчета Экспорт;
Перем мПрежнееОтражатьВУправленческомУчете;

// Хранит текущее распределение долга работника по займу
// на основную сумму займа и начисленные проценты
Перем СтруктураДолг Экспорт;
Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Определяет коды счетов дебета и кредита для вывода в печатную форму.
//
Функция ОпределитьКодыСчетСубсчет() 
	
	КодыСчетов=Новый Структура("Дебет,Кредит");
	
	// Определяем код счета дебета
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		СчетДт = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал.Код;
	Иначе
		СчетДт = ПланыСчетов.Хозрасчетный.КассаОрганизации.Код;
	КонецЕсли;
	
	КодыСчетов.Дебет=СчетДт;
	
	//Определяем коды счетов кредита. Если указаны и счет расчетов с контрагентом, и счет расчетов по авансам - выводим оба.
	Если ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
		СчетРасчетов=ПланыСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам.Код;
		
		Если Не РасчетныйДокумент=Неопределено Тогда
			
			СчетПроцентов=РасчетныйДокумент.СчетУчетаПроцентовПоЗайму.Код;
			
			Если СтруктураДолг = Неопределено Тогда
				ПолучитьОстатокПоДоговоруЗайма(РасчетныйДокумент)
			КонецЕсли;
			
			Если СтруктураДолг.Проценты<СуммаДокумента Тогда
				
				Если НЕ СтруктураДолг.Проценты=0 Тогда
					
					СтрокаКредит = СчетРасчетов+", "+СчетПроцентов;
					
				Иначе
					
					СтрокаКредит = СчетРасчетов;
					
				КонецЕсли;
				
			Иначе
				
				СтрокаКредит = СчетПроцентов;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаКредит=ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		
	КонецЕсли;
	
	КодыСчетов.Кредит=СтрокаКредит;
	
	Возврат КодыСчетов;
	
	КонецФункции // ОпределитьКодыСчетСубсчет()

// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
Функция ПечатьПКО()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="ВЫБРАТЬ
	              |	ПриходныйКассовыйОрдер.Номер,
	              |	ПриходныйКассовыйОрдер.Дата КАК ДатаДокумента,
	              |	ПриходныйКассовыйОрдер.Организация КАК Орган,
	              |	ПриходныйКассовыйОрдер.Организация,
	              |	ПриходныйКассовыйОрдер.Организация КАК Руководители,
	              |	ПриходныйКассовыйОрдер.Контрагент,
	              |	ПриходныйКассовыйОрдер.Контрагент.Представление КАК Контрагент,
	              |	ПриходныйКассовыйОрдер.ПринятоОт КАК ПринятоОт,
	              |	ПриходныйКассовыйОрдер.Основание КАК Основание,
	              |	ПриходныйКассовыйОрдер.Приложение КАК Приложение,
	              |	ПриходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
	              |	ПриходныйКассовыйОрдер.ВалютаДокумента,
	              |	ПриходныйКассовыйОрдер.ВалютаДокумента.Представление КАК ВалютаПредставление
	              |ИЗ
	              |	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	              |
	              |ГДЕ
	              |	ПриходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Макет       = ПолучитьОбщийМакет("КО1_РБ2016");
	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйКассовыйОрдер_КО1";
	
	
	// Выводим шапку ПКО

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Орган, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");

	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ОбластьМакета.Параметры.Сумма             = Шапка.Сумма;
	
	СуммаПрописью	= РаботаСДиалогами.СформироватьСуммуПрописью(Шапка.Сумма, ?(ОтражатьВБухгалтерскомУчете,Константы.ВалютаРегламентированногоУчета.Получить(),Константы.ВалютаУправленческогоУчета.Получить()));
	
	СуммаПрописьюКоп    = "";
	СуммаПрописьюРублей = ""; 
	СуммаПрописьюРублей = Лев(СуммаПрописью, Найти(СуммаПрописью, "бел") - 2);
	
	Если Шапка.Сумма = ЦЕЛ(Шапка.Сумма) Тогда
		СуммаПрописьюКоп = "00";
	Иначе
		СуммаПрописьюКоп = (Шапка.Сумма - ЦЕЛ(Шапка.Сумма)) * 100;
	КонецЕсли;
	
	ОбластьМакета.Параметры.СуммаПрописью		= СуммаПрописьюРублей;
	ОбластьМакета.Параметры.СуммаПрописьюКоп    = СуммаПрописьюКоп;	
	//ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	//ОбластьМакета.Параметры.ИНН				  = СведенияОбОрганизации.ИНН;
	ОбластьМакета.Параметры.ДатаДокумента     = Формат(Шапка.ДатаДокумента,"ДФ = 'дд ММММ гггг'");
	//ОбластьМакета.Параметры.ДатаДокументаДень = День(Шапка.ДатаДокумента);
	//ОбластьМакета.Параметры.ДатаДокументаМесяц= Месяц(Шапка.ДатаДокумента);
	//ОбластьМакета.Параметры.ДатаДокументаГод =  Формат(Шапка.ДатаДокумента,"ДФ = 'гггг'") + " г.";
	ОбластьМакета.Параметры.НомерДокумента    = РаботаСДиалогами.ПолучитьНомерНаПечать(Шапка);

	КодыСчетСубсчет = ОпределитьКодыСчетСубсчет();

	//ОбластьМакета.Параметры.КодДебета = КодыСчетСубсчет.Дебет;
	ОбластьМакета.Параметры.СубСчет   = КодыСчетСубсчет.Кредит;

	ТекстСуммаНДС="";

	ТекстСуммаНДС = Сред(ТекстСуммаНДС,2);

	//ОбластьМакета.Параметры.ВТомЧисле=ТекстСуммаНДС;

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, КонецДня(Шапка.ДатаДокумента),);
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	Кассир       = Руководители.Кассир;

	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Бухгалтер;
	ОбластьМакета.Параметры.ФИОКассира            = Кассир;

	ТекстПринятоОт = Шапка.ПринятоОт;

	Если ТекстПринятоОт = "" И ЗначениеЗаполнено(Контрагент) Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата",    Дата);
			Запрос.УстановитьПараметр("ФизЛицо", Контрагент);
			Запрос.Текст = "ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
			Результат = Запрос.Выполнить().Выбрать();

			Если Результат.Следующий() Тогда
				ТекстПринятоОт = РаботаСДиалогами.ПолучитьФамилиюИмяОтчество(Результат.Фамилия, Результат.Имя, Результат.Отчество);
			КонецЕсли;

	КонецЕсли;

	ОбластьМакета.Параметры.ПринятоОт  = ТекстПринятоОт;
	ОбластьМакета.Параметры.Основание  = Основание;
	ОбластьМакета.Параметры.Приложение = Приложение;

	ТабДокумент.Вывести(ОбластьМакета);
    // Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
    ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	Возврат ТабДокумент;

КонецФункции // ПечатьПКО()

// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ИмяМакета = "ПКО" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьПКО();

		Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)));
	КонецЕсли; 

КонецФункции // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПКО","Приходный кассовый ордер");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Формирует остаток по договору займа с работником при соответствующем виде операции
//
Процедура ПолучитьОстатокПоДоговоруЗайма(Основание) Экспорт
	
	СтруктураДолг=Новый Структура;
	СтруктураДолг.Вставить("ОсновнойДолг",0);
	СтруктураДолг.Вставить("Проценты",0);
	
	Если ЗначениеЗаполнено(Основание) Тогда		
		
		Если Основание.ОтражатьВБухгалтерскомУчете Тогда
			ИмяРегистра="ПогашениеЗаймовРаботникамиОрганизаций";
			СтруктураДолг.Вставить("Валюта",мВалютаРегламентированногоУчета);
		Иначе
			ИмяРегистра="ПогашениеЗаймовРаботниками";
			СтруктураДолг.Вставить("Валюта",Константы.ВалютаУправленческогоУчета.Получить());
		КонецЕсли;
		
		Запрос=Новый Запрос;
		Запрос.Текст=
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ПогашениеЗаймовОстатки.ОсновнойДолгОстаток, 0) КАК ОсновнойДолгОстаток,
		|	ЕСТЬNULL(ПогашениеЗаймовОстатки.ПроцентыОстаток, 0) КАК ПроцентыОстаток
		|ИЗ
		|	РегистрНакопления."+ИмяРегистра+".Остатки(, ДоговорЗайма=&ДоговорЗайма) КАК ПогашениеЗаймовОстатки";
		
		Запрос.УстановитьПараметр("ДоговорЗайма",Основание);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			СтруктураДолг.Вставить("ОсновнойДолг",Результат.ОсновнойДолгОстаток);
			СтруктураДолг.Вставить("Проценты",Результат.ПроцентыОстаток);
		КонецЕсли;
		
	КонецЕсли;
				
КонецПроцедуры // ПолучитьОстатокПоДоговоруЗаймаУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда
		//Проверяем заполнение шапки
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		 
		ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрам(Режим, Отказ, Заголовок ,СтруктураШапкиДокумента)

	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента,  Режим, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, Режим, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, Режим, Отказ, Заголовок)

	Если ОтражатьВУправленческомУчете Тогда // Принято кассиром
		
		Если ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
			// По регистру управленческих расчетов с работниками по займам
			
			НаборДвижений = Движения.ПогашениеЗаймовРаботниками;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ФизЛицо = Контрагент;
			СтрокаДвижений.ДоговорЗайма = РасчетныйДокумент;
			
			//СуммаРасчетов = СуммаДокумента;
		
			ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
			СтруктураКурса = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаУправленческогоУчета,Дата);
			
			СуммаРасчетов	= ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента,ВалютаДокумента,ВалютаУправленческогоУчета,
														КурсДокумента,СтруктураКурса.Курс,
														КратностьДокумента,СтруктураКурса.Кратность);
			
			Если СтруктураДолг.Проценты < СуммаРасчетов Тогда
				
				СтрокаДвижений.Проценты = СтруктураДолг.Проценты;
				СтрокаДвижений.ОсновнойДолг = СуммаРасчетов-СтруктураДолг.Проценты;
				
			Иначе
				
				СтрокаДвижений.Проценты = СуммаРасчетов;
				СтрокаДвижений.ОсновнойДолг = 0;
				
			КонецЕсли;
			
			НаборДвижений.мПериод=Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ПогашениеЗаймовРаботниками.ВыполнитьРасход();
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
			
			НаборДвижений = Движения.ВзаиморасчетыСРаботниками;
			
			СтрокаДвижений = НаборДвижений.Добавить();
			СтрокаДвижений.ФизЛицо = Контрагент;
			СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход;
			СтрокаДвижений.СуммаУпр = -СуммаДокумента;
			СтрокаДвижений.Период=Дата;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, Режим, Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда // Принято кассиром
		
		Если ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
			// По регистру регламентированных расчетов с работниками по займам
			
			НаборДвижений = Движения.ПогашениеЗаймовРаботникамиОрганизаций;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Организация=Организация;
			СтрокаДвижений.ФизЛицо=Контрагент;
			СтрокаДвижений.ДоговорЗайма=РасчетныйДокумент;
			
			//СуммаРасчетов = СуммаДокумента;
			СуммаРасчетов	= ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента,ВалютаДокумента,мВалютаРегламентированногоУчета,
																		КурсДокумента,1,
																		КратностьДокумента,1);

		
			Если СтруктураДолг.Проценты < СуммаРасчетов Тогда
				
				СтрокаДвижений.Проценты = СтруктураДолг.Проценты;
				СтрокаДвижений.ОсновнойДолг = СуммаРасчетов - СтруктураДолг.Проценты;
				
			Иначе
				
				СтрокаДвижений.Проценты = СуммаРасчетов;
				СтрокаДвижений.ОсновнойДолг=0;
				
			КонецЕсли;
			
			НаборДвижений.мПериод=Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ПогашениеЗаймовРаботникамиОрганизаций.ВыполнитьРасход();
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
			
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА &парамУчетЗадолженностиПоМесяцам
			|			ТОГДА ВзаиморасчетыСРаботникамиОрганизацииОстатки.ПериодВзаиморасчетов
			|		ИНАЧЕ &парамПустаяДата
			|	КОНЕЦ КАК ПериодВзаиморасчетов,
			|	-ВзаиморасчетыСРаботникамиОрганизацииОстатки.СуммаВзаиморасчетовОстаток КАК Остаток
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
			|		&Дата,
			|		Организация = &Организация
			|		    И Физлицо = &Физлицо) КАК ВзаиморасчетыСРаботникамиОрганизацииОстатки
			|ГДЕ
			|	ВзаиморасчетыСРаботникамиОрганизацииОстатки.СуммаВзаиморасчетовОстаток < 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПериодВзаиморасчетов";

			// ведется ли учет задолженности в разрезе периодов возникновения задолженности
			УчетЗадолженностиПоМесяцам = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
			Запрос.УстановитьПараметр("Дата",Дата);
			Запрос.УстановитьПараметр("Организация",Организация);
			Запрос.УстановитьПараметр("Физлицо",Контрагент);
			Запрос.УстановитьПараметр("парамУчетЗадолженностиПоМесяцам",УчетЗадолженностиПоМесяцам);
			Запрос.УстановитьПараметр("парамПустаяДата",Дата('00010101'));
			
			ВыборкаОстатков = Запрос.Выполнить().Выбрать();
			СуммаКПогашению = СуммаДокумента;
			
			НаборДвижений = Движения.ВзаиморасчетыСРаботникамиОрганизаций;
			
			Пока ВыборкаОстатков.СледующийПоЗначениюПоля("ПериодВзаиморасчетов") Цикл 
				
				СтрокаДвижений = НаборДвижений.Добавить();
				//Свойства
				СтрокаДвижений.Период = Дата;
				СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход;
				//Измерения
				СтрокаДвижений.ФизЛицо = Контрагент;
				СтрокаДвижений.Организация = Организация;
				СтрокаДвижений.ПериодВзаиморасчетов = ВыборкаОстатков.ПериодВзаиморасчетов;
				//Ресурсы
				СуммаВзаиморасчетов = Мин(ВыборкаОстатков.Остаток,СуммаКПогашению);
				СтрокаДвижений.СуммаВзаиморасчетов = - СуммаВзаиморасчетов;
				СтрокаДвижений.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу; 
				
				СуммаКПогашению = СуммаКПогашению - СуммаВзаиморасчетов;
				
				Если СуммаКПогашению = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
				
			Если СуммаКПогашению > 0 Тогда
				
				СтрокаДвижений = НаборДвижений.Добавить();
				//Свойства
				СтрокаДвижений.Период = Дата;
				СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход;
				//Измерения
				СтрокаДвижений.ФизЛицо = Контрагент;
				СтрокаДвижений.Организация = Организация;
				//vvv комментируем
				//Если УчетЗадолженностиПоМесяцам Тогда
					СтрокаДвижений.ПериодВзаиморасчетов = НачалоМесяца(Дата);
				//КонецЕсли;
				//Ресурсы
				СтрокаДвижений.СуммаВзаиморасчетов = - СуммаКПогашению;
				СтрокаДвижений.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу; 
								
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ДоговорЗаймаСРаботником")	Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если ОтражатьВБухгалтерскомУчете Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаДокумента = Константы.ВалютаУправленческогоУчета.Получить();
		КонецЕсли;
	

		ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками;

		Контрагент        = Основание.ФизЛицо;
		РасчетныйДокумент = Основание;

		ПолучитьОстатокПоДоговоруЗайма(Основание);
		
		СуммаДокумента=СтруктураДолг.ОсновнойДолг+СтруктураДолг.Проценты;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим) 
	
	// удалим движения
	УдалитьДвижения();
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок);
	
	Если Не Отказ Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
			ПолучитьОстатокПоДоговоруЗайма(РасчетныйДокумент);
		КонецЕсли;
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Установим прежнее состояние ОтражатьВУправленческомУчете
	мПрежнееОтражатьВУправленческомУчете = Ссылка.ОтражатьВУправленческомУчете;
	
	мУдалятьДвижения = Не ЭтоНовый();

КонецПроцедуры // ПередЗаписью

// удаление движений - документ не удаляеи движения автоматически
Процедура УдалитьДвижения()

	Если НЕ мУдалятьДвижения Тогда
		Возврат;
	КонецЕсли;
	
	Если мПрежнееОтражатьВУправленческомУчете Тогда
		Движения.ВзаиморасчетыСРаботниками.Очистить();
		Движения.ВзаиморасчетыСРаботниками.Записать();
		Движения.ПогашениеЗаймовРаботниками.Очистить();
		Движения.ПогашениеЗаймовРаботниками.Записать();
	Иначе
		Движения.ВзаиморасчетыСРаботникамиОрганизаций.Очистить();
		Движения.ВзаиморасчетыСРаботникамиОрганизаций.Записать();
		Движения.ПогашениеЗаймовРаботникамиОрганизаций.Очистить();
		Движения.ПогашениеЗаймовРаботникамиОрганизаций.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	// удалим движения
	УдалитьДвижения();
КонецПроцедуры

Запрос = Новый Запрос("ВЫБРАТЬ
                      |	Константы.ВалютаРегламентированногоУчета.Ссылка КАК Ссылка,
                      |	Константы.ВалютаРегламентированногоУчета.Наименование КАК Наименование
                      |ИЗ
                      |	Константы КАК Константы");

Выборка = Запрос.Выполнить().Выбрать();
Выборка.Следующий();
мИмяВалютыРегламентированногоУчета	= Выборка.Наименование;
мВалютаРегламентированногоУчета		= Выборка.Ссылка;
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;
Перем мДатаЗакона180ФЗ Экспорт;
Перем мДатаЗакона255ФЗ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

//vvv
Функция СформироватьДокумент()
	
		ТабДокумент = Новый ТабличныйДокумент;
		Макет = ПолучитьМакет("Макет");
	
		Запрос=Новый Запрос;
	
		ОсновнойЗаработок = Новый Массив(2);
		ОсновнойЗаработок[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;

		ПоГодовымПремиям = Новый Массив(2);
		ПоГодовымПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ;
			
		Запрос.УстановитьПараметр("ОсновнойЗаработок",					ОсновнойЗаработок);
		Запрос.УстановитьПараметр("ДатаАктуальности", КонецМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("ПослеДеноминации",ПериодРегистрации>=ОбщегоНазначения.ПолучитьДатуДеноминации());
		Запрос.УстановитьПараметр("ДатаДеноминации", ОбщегоНазначения.ПолучитьДатуДеноминации());
		
		Запрос.Текст=
		"ВЫБРАТЬ
		|	1 КАК Индекс,
		|	Таб1.Результат КАК Заработок,
		|	Таб1.МесяцВыборки КАК Месяц,
		|	Таб1.Часов КАК Часов,
		|	ВЫБОР
		|		КОГДА ТарифныеСтавкиРаботниковОрганизации.ПериодЗавершения <= &ДатаАктуальности
		|			И ТарифныеСтавкиРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ТарифныеСтавкиРаботниковОрганизации.СтавкаЗавершения 
		|	ИНАЧЕ ТарифныеСтавкиРаботниковОрганизации.Ставка
		|	КОНЕЦ / ВЫБОР КОГДА &ПослеДеноминации И Таб1.МесяцВыборки<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК Оклад,
		|	ВЫРАЗИТЬ(Таб1.Результат * 1 КАК ЧИСЛО(16, 2)) КАК ЗаработокИ
		|ИЗ
		|	(ВЫБРАТЬ
		|		НачислениеПоБольничномуЛистуРасчетСреднего.Ссылка.Сотрудник КАК Сотрудник,
		|		НачислениеПоБольничномуЛистуРасчетСреднего.КоэффициентИндексации КАК КоэффициентИндексации,
		|		НачислениеПоБольничномуЛистуРасчетСреднего.Результат КАК Результат,
		|		НачислениеПоБольничномуЛистуРасчетСреднего.МесяцВыборки КАК МесяцВыборки,
		|		НачислениеПоБольничномуЛистуРасчетСреднего.КалендарныеДни КАК Часов,
		|		МАКСИМУМ(ТарифныеСтавкиРаботниковОрганизации.Период) КАК ПериодСтавки
		|	ИЗ
		|		(ВЫБРАТЬ
		|			НачислениеПоБольничномуЛистуРасчетСреднего.Ссылка КАК Ссылка,
		|			НачислениеПоБольничномуЛистуРасчетСреднего.Ссылка.Сотрудник КАК Сотрудник,
		|			НачислениеПоБольничномуЛистуРасчетСреднего.КоэффициентИндексации КАК КоэффициентИндексации,
		|			СУММА(НачислениеПоБольничномуЛистуРасчетСреднего.Результат) КАК Результат,
		|			НачислениеПоБольничномуЛистуРасчетСреднего.МесяцВыборки КАК МесяцВыборки,
		|			СУММА(НачислениеПоБольничномуЛистуРасчетСреднего.КалендарныеДни) КАК КалендарныеДни
		|		ИЗ
		|			Документ.НачислениеПоБольничномуЛисту.РасчетСреднего КАК НачислениеПоБольничномуЛистуРасчетСреднего
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НачислениеПоБольничномуЛистуРасчетСреднего.Ссылка,
		|			НачислениеПоБольничномуЛистуРасчетСреднего.Ссылка.Сотрудник,
		|			НачислениеПоБольничномуЛистуРасчетСреднего.КоэффициентИндексации,
		|			НачислениеПоБольничномуЛистуРасчетСреднего.МесяцВыборки) КАК НачислениеПоБольничномуЛистуРасчетСреднего
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации КАК ТарифныеСтавкиРаботниковОрганизации
		|			ПО НачислениеПоБольничномуЛистуРасчетСреднего.Ссылка.Сотрудник = ТарифныеСтавкиРаботниковОрганизации.Сотрудник
		|				И (ТарифныеСтавкиРаботниковОрганизации.Период <= НачислениеПоБольничномуЛистуРасчетСреднего.МесяцВыборки)
		|	ГДЕ
		|		НачислениеПоБольничномуЛистуРасчетСреднего.Ссылка = &ДокументСсылка
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НачислениеПоБольничномуЛистуРасчетСреднего.Ссылка.Сотрудник,
		|		НачислениеПоБольничномуЛистуРасчетСреднего.КоэффициентИндексации,
		|		НачислениеПоБольничномуЛистуРасчетСреднего.Результат,
		|		НачислениеПоБольничномуЛистуРасчетСреднего.МесяцВыборки,
		|		НачислениеПоБольничномуЛистуРасчетСреднего.КалендарныеДни) КАК Таб1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации КАК ТарифныеСтавкиРаботниковОрганизации
		|		ПО Таб1.ПериодСтавки = ТарифныеСтавкиРаботниковОрганизации.Период
		|			И Таб1.Сотрудник = ТарифныеСтавкиРаботниковОрганизации.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таб1.МесяцВыборки
		|ИТОГИ
		|	СУММА(Заработок),
		|	СУММА(Часов),
		|	СУММА(ЗаработокИ)
		|ПО
		|	ОБЩИЕ";
				
		ЗапросПоШапке=Новый Запрос;
		ЗапросПоШапке.Текст=
		"ВЫБРАТЬ
		|	НачислениеПоБольничномуЛисту.Сотрудник,
		|	НачислениеПоБольничномуЛисту.Ответственный.ФизЛицо КАК Исполнитель,
		|	НачислениеПоБольничномуЛисту.РучнойРасчетСреднегоЗаработка КАК РучнойРасчетСреднегоЗаработка,
		|	НачислениеПоБольничномуЛисту.РазмерСреднегоЗаработка КАК РазмерСреднегоЗаработка,
		|	НачислениеПоБольничномуЛисту.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
		|	НачислениеПоБольничномуЛисту.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
		|	НачислениеПоБольничномуЛисту.Номер КАК НомерДок,
		|	НачислениеПоБольничномуЛисту.Дата КАК ДатаДок,
		|	НачислениеПоБольничномуЛисту.ВидРасчета КАК ВидРасчета,
		//|	НачислениеПоБольничномуЛисту.ДатаНачалаБольничногоЛиста КАК Начало,
		|	НачислениеПоБольничномуЛисту.ДатаНачала КАК Начало,
		|	НачислениеПоБольничномуЛисту.ДатаОкончания КАК Окончание,
		|	НачислениеПоБольничномуЛисту.Сотрудник.Код КАК Код,
		|	ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.Ставка КАК ТекущийОклад,
		|	НачислениеПоБольничномуЛисту.ДатаНарушенияРежима,
		|	НачислениеПоБольничномуЛисту.ДнейОплаты КАК Дней,
		|	НачислениеПоБольничномуЛисту.ПериодРегистрации КАК ОП
		|ИЗ
		|	Документ.НачислениеПоБольничномуЛисту КАК НачислениеПоБольничномуЛисту
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации.СрезПоследних(&ДатаАктуальности, ) КАК ТарифныеСтавкиРаботниковОрганизацииСрезПоследних
		|		ПО НачислениеПоБольничномуЛисту.Сотрудник = ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.Сотрудник
		|ГДЕ
		|	НачислениеПоБольничномуЛисту.Ссылка = &ДокументСсылка";
		
		
		ЗапросПоНачислениям = Новый Запрос;		
		
		ЗапросПоНачислениям.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц();
		ЗапросПоНачислениям.Текст=
		 "ВЫБРАТЬ
		 |	Начисления.Сотрудник,
		 |	Начисления.Месяц,
		 |	Начисления.КалендарныхДнейВМесяце,
		 |	Начисления.ВидРасчета,
		 |	Начисления.Результат100,
		 |	Начисления.Результат80,
		 |	Начисления.Дней80,
		 |	Начисления.Дней100,
		 |	Начисления.Часов
		 |ПОМЕСТИТЬ ВТНачисления
		 |ИЗ
		 |	(ВЫБРАТЬ
		 |		Начисления.Сотрудник КАК Сотрудник,
		 |		Начисления.ВидРасчета КАК ВидРасчета,
		 |		Начисления.Месяц КАК Месяц,
		 |		Начисления.КалендарныхДнейВМесяце КАК КалендарныхДнейВМесяце,
		 |		СУММА(Начисления.Результат100) КАК Результат100,
		 |		СУММА(Начисления.Часов) КАК Часов,
		 |		СУММА(Начисления.Дней80) КАК Дней80,
		 |		СУММА(Начисления.Дней100) КАК Дней100,
		 |		СУММА(Начисления.Результат80) КАК Результат80
		 |	ИЗ
		 |		(ВЫБРАТЬ
		 |			НачислениеПоБольничномуЛистуНачисления.Ссылка.Сотрудник КАК Сотрудник,
		 |			НачислениеПоБольничномуЛистуНачисления.ВидРасчета КАК ВидРасчета,
		 |			НАЧАЛОПЕРИОДА(НачислениеПоБольничномуЛистуНачисления.ДатаНачала, МЕСЯЦ) КАК Месяц,
		 |			РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(НачислениеПоБольничномуЛистуНачисления.ДатаНачала, МЕСЯЦ), КОНЕЦПЕРИОДА(НачислениеПоБольничномуЛистуНачисления.ДатаНачала, МЕСЯЦ), ДЕНЬ) + 1 КАК КалендарныхДнейВМесяце,
		 |			НачислениеПоБольничномуЛистуНачисления.ОплаченоДнейЧасов КАК Часов,
		 |			НачислениеПоБольничномуЛистуНачисления.ОплаченоДнейЧасов КАК Дней100,
		 |			0 КАК Дней80,
		 |			НачислениеПоБольничномуЛистуНачисления.Результат КАК Результат100,
		 |			0 КАК Результат80
		 |		ИЗ
		 |			Документ.НачислениеПоБольничномуЛисту.Начисления КАК НачислениеПоБольничномуЛистуНачисления
		 |		ГДЕ
		 |			НачислениеПоБольничномуЛистуНачисления.Показатель1 > 80
		 //добавим, иначе в печ. форму попадают сторно-записи
		 |			И НачислениеПоБольничномуЛистуНачисления.Ссылка.ВидРасчета = НачислениеПоБольничномуЛистуНачисления.ВидРасчета
		 |			И НачислениеПоБольничномуЛистуНачисления.Ссылка = &ДокументСсылка
		 |		
		 |		ОБЪЕДИНИТЬ ВСЕ
		 |		
		 |		ВЫБРАТЬ
		 |			НачислениеПоБольничномуЛистуНачисления.Ссылка.Сотрудник,
		 |			НачислениеПоБольничномуЛистуНачисления.ВидРасчета,
		 |			НАЧАЛОПЕРИОДА(НачислениеПоБольничномуЛистуНачисления.ДатаНачала, МЕСЯЦ),
		 |			РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(НачислениеПоБольничномуЛистуНачисления.ДатаНачала, МЕСЯЦ), КОНЕЦПЕРИОДА(НачислениеПоБольничномуЛистуНачисления.ДатаНачала, МЕСЯЦ), ДЕНЬ) + 1,
		 |			НачислениеПоБольничномуЛистуНачисления.ОплаченоДнейЧасов,
		 |			0,
		 |			НачислениеПоБольничномуЛистуНачисления.ОплаченоДнейЧасов,
		 |			0,
		 |			НачислениеПоБольничномуЛистуНачисления.Результат
		 |		ИЗ
		 |			Документ.НачислениеПоБольничномуЛисту.Начисления КАК НачислениеПоБольничномуЛистуНачисления
		 |		ГДЕ
		 |			НачислениеПоБольничномуЛистуНачисления.Показатель1 <= 80
		 //добавим, иначе в печ. форму попадают сторно-записи
		 |			И НачислениеПоБольничномуЛистуНачисления.Ссылка.ВидРасчета = НачислениеПоБольничномуЛистуНачисления.ВидРасчета
		 |			И НачислениеПоБольничномуЛистуНачисления.Ссылка = &ДокументСсылка) КАК Начисления
		 |	
		 |	СГРУППИРОВАТЬ ПО
		 |		Начисления.Сотрудник,
		 |		Начисления.Месяц,
		 |		Начисления.КалендарныхДнейВМесяце,
		 |		Начисления.ВидРасчета) КАК Начисления";
		
		ЗапросПоШапке.УстановитьПараметр("ДокументСсылка",Ссылка);
		ЗапросПоШапке.УстановитьПараметр("ДатаАктуальности",ПолучитьДатуНачалаСобытия());
		ВыборкаПоШапке=ЗапросПоШапке.Выполнить().Выбрать();
		
		Запрос.УстановитьПараметр("ДокументСсылка",Ссылка);
		Запрос.УстановитьПараметр("ПоГодовымПремиям",ПоГодовымПремиям);
		Запрос.УстановитьПараметр("ОсновнойЗаработок",ОсновнойЗаработок);
		
		ЗапросПоНачислениям.УстановитьПараметр("ДокументСсылка",Ссылка);				
		ЗапросПоНачислениям.УстановитьПараметр("ДатаДеноминации",ОбщегоНазначения.ПолучитьДатуДеноминации());
		ЗапросПоНачислениям.УстановитьПараметр("ПослеДеноминации",ПериодРегистрации>=ОбщегоНазначения.ПолучитьДатуДеноминации());
		ЗапросПоНачислениям.Выполнить();
		ЗапросПоНачислениям.Текст=
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.Месяц КАК Месяц,
		|	Начисления.ВидРасчета,
		|	Начисления.Часов КАК ВсегоЧасов,
		|	Начисления.Результат100 КАК С100,
		|	Начисления.Результат80 КАК С80,
		|	Начисления.Дней100 КАК Д100,
		|	Начисления.Дней80 КАК Д80,
		|	ЕСТЬNULL(Начисления.Результат80, 0) + ЕСТЬNULL(Начисления.Результат100, 0) КАК СВсе,
		//|	ВЫБОР
		//|		КОГДА ГрафикиРаботыПоВидамВремени.ЧасовПоГрафику = 0
		//|			ТОГДА 0
		//|		ИНАЧЕ ВЫРАЗИТЬ(Начисления.СПБР / ГрафикиРаботыПоВидамВремени.ЧасовПоГрафику * Начисления.Часов КАК ЧИСЛО(16, 0))
		//|	КОНЕЦ КАК СПБ,
		|	ВЫБОР
		|		КОГДА Начисления.КалендарныхДнейВМесяце = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(Начисления.СПБР * 3 / Начисления.КалендарныхДнейВМесяце * (Начисления.Дней100+Начисления.Дней80) КАК ЧИСЛО(16, 2))
		|	КОНЕЦ КАК СПБ,
		|	Начисления.СПБР,
		|	Начисления.ГрафикРаботы,
		|	ГрафикиРаботыПоВидамВремени.ЧасовПоГрафику
		|ИЗ
		|	(ВЫБРАТЬ
		|		Начисления.Сотрудник КАК Сотрудник,
		|		Начисления.Месяц КАК Месяц,
		|		Начисления.ВидРасчета КАК ВидРасчета,
		|		Начисления.КалендарныхДнейВМесяце КАК КалендарныхДнейВМесяце,
		|		Начисления.Часов КАК Часов,
		|		Начисления.Результат100 КАК Результат100,
		|		Начисления.Результат80 КАК Результат80,
		|		Начисления.Дней100 КАК Дней100,
		|		Начисления.Дней80 КАК Дней80,
		|		РазмерыПараметровДляРасчетаРБ.Размер / ВЫБОР КОГДА &ПослеДеноминации И РазмерыПараметровДляРасчетаРБ.Период<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК СПБР,
		|		РаботникиОрганизаций.ГрафикРаботы КАК ГрафикРаботы
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Начисления.Сотрудник КАК Сотрудник,
		|			Начисления.ВидРасчета КАК ВидРасчета,
		|			Начисления.Месяц КАК Месяц,
		|			Начисления.КалендарныхДнейВМесяце КАК КалендарныхДнейВМесяце,
		|			Начисления.Часов КАК Часов,
		|			Начисления.Результат100 КАК Результат100,
		|			Начисления.Результат80 КАК Результат80,
		|			Начисления.Дней100 КАК Дней100,
		|			Начисления.Дней80 КАК Дней80,
		|			МАКСИМУМ(РазмерыПараметровДляРасчетаРБ.Период) КАК ПериодСРЗ,
		|			МАКСИМУМ(РаботникиОрганизаций.Период) КАК ПериодРаботника
		|		ИЗ
		|			ВТНачисления КАК Начисления
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
		|				ПО (РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников))
		|					И (РазмерыПараметровДляРасчетаРБ.Период <= ДОБАВИТЬКДАТЕ(Начисления.Месяц,МЕСЯЦ,-1))
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|				ПО (РаботникиОрганизаций.Сотрудник = Начисления.Сотрудник)
		|					И (РаботникиОрганизаций.Период <= Начисления.Месяц)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Начисления.Сотрудник,
		|			Начисления.ВидРасчета,
		|			Начисления.Месяц,
		|			Начисления.КалендарныхДнейВМесяце,
		|			Начисления.Часов,
		|			Начисления.Результат100,
		|			Начисления.Результат80,
		|			Начисления.Дней100,
		|			Начисления.Дней80) КАК Начисления
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
		|			ПО (РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников))
		|				И (РазмерыПараметровДляРасчетаРБ.Период = Начисления.ПериодСРЗ)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|			ПО (РаботникиОрганизаций.Сотрудник = Начисления.Сотрудник)
		|				И (РаботникиОрганизаций.Период = Начисления.ПериодРаботника)) КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
		|			ГрафикиРаботыПоВидамВремени.Месяц КАК Месяц,
		|			СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК ЧасовПоГрафику
		|		ИЗ
		|			РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ГДЕ
		|			ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|			И ГрафикиРаботыПоВидамВремени.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ГрафикиРаботыПоВидамВремени.Месяц,
		|			ГрафикиРаботыПоВидамВремени.ГрафикРаботы) КАК ГрафикиРаботыПоВидамВремени
		|		ПО Начисления.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|			И (ГрафикиРаботыПоВидамВремени.Месяц = Начисления.Месяц)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Месяц";
		
		
		ЗапросПоОтветственным=Новый Запрос;
		ЗапросПоОтветственным.Текст=
		"ВЫБРАТЬ
		|	Исполнитель.ФИО КАК ФИОИсполнитель,
		|	ГлавныйБухгалтер.ФИО КАК ФИОГлБухгалтер
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОтветственныеЛицаОрганизаций.Ссылка КАК Ссылка,
		|		ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК ФИО
		|	ИЗ
		|		Перечисление.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаАктуальности,СтруктурнаяЕдиница=&Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ПО ОтветственныеЛицаОрганизаций.Ссылка = ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо
		|	ГДЕ
		|		ОтветственныеЛицаОрганизаций.Ссылка = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Исполнитель)) КАК Исполнитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОтветственныеЛицаОрганизаций.Ссылка КАК Ссылка,
		|			ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК ФИО
		|		ИЗ
		|			Перечисление.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаАктуальности, СтруктурнаяЕдиница=&Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|				ПО ОтветственныеЛицаОрганизаций.Ссылка = ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо
		|		ГДЕ
		|			ОтветственныеЛицаОрганизаций.Ссылка = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)) КАК ГлавныйБухгалтер
		|		ПО (ИСТИНА)";
		
		ЗапросПоОтветственным.УстановитьПараметр("ДатаАктуальности",ПолучитьДатуНачалаСобытия());
		ЗапросПоОтветственным.УстановитьПараметр("Организация",Организация);
		
		ВыборкаПоОтветственным=ЗапросПоОтветственным.Выполнить().Выбрать();
		
		ВыборкаНачислений=ЗапросПоНачислениям.Выполнить().Выбрать();
		
		ВыборкаИтогов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		
		ОбластьШапка=Макет.ПолучитьОбласть("Шапка");
		ОбластьШапкаР=Макет.ПолучитьОбласть("Помощь");
		ОбластьСтрока=Макет.ПолучитьОбласть("Строка|Расчеты");
		ОбластьИтоги=Макет.ПолучитьОбласть("Итоги");
		ОбластьИтогНачислений=Макет.ПолучитьОбласть("Итог");
		ОбластьОтметка=Макет.ПолучитьОбласть("Отметка|Расчеты");
		ОбластьНачислений=Макет.ПолучитьОбласть("ПомощьСтр|Расчеты");
		ОбластьСредний=Макет.ПолучитьОбласть("Строка|НеРасчеты");
		ОбластьКВыплате=Макет.ПолучитьОбласть("ПомощьСтр|НеРасчеты");
		ОбластьПодпись=Макет.ПолучитьОбласть("Подпись");
		
		Если ВыборкаПоШапке.Следующий() ТОгда
			
			ОбластьШапка.Параметры.Заполнить(ВыборкаПоШапке);
			ОбластьШапка.Параметры.ДатаВыдачи=Формат(ВыборкаПоШапке.ДатаДок,"ДФ=dd.MM.yy");
			ОбластьШапка.Параметры.Начало=Формат(ВыборкаПоШапке.Начало,"ДФ=dd.MM.yy");
			ОбластьШапка.Параметры.Окончание=Формат(ВыборкаПоШапке.Окончание,"ДФ=dd.MM.yy");
			ОбластьШапкаР.Параметры.Заполнить(ВыборкаПоШапке);
			ОбластьШапкаР.Параметры.Начало=Формат(ВыборкаПоШапке.Начало,"ДФ=dd.MM.yy");
			ОбластьШапкаР.Параметры.Окончание=Формат(ВыборкаПоШапке.Окончание,"ДФ=dd.MM.yy");
			ОбластьИтогНачислений.Параметры.Заполнить(ВыборкаПоШапке);
			
			ТабДокумент.Вывести(ОбластьШапка);
			
		КонецЕсли;
		
		Если Не ВыборкаПоШапке.РучнойРасчетСреднегоЗаработка ТОгда			
			Пока ВыборкаИтогов.Следующий() Цикл
				
				ОбластьИтоги.Параметры.Заполнить(ВыборкаИтогов);
				СРЗ=?(ВыборкаИтогов.Часов<>0,Окр(ВыборкаИтогов.ЗаработокИ/ВыборкаИтогов.Часов,2),0);
				ВыборкаСреднего=ВыборкаИтогов.Выбрать();
				Пока ВыборкаСреднего.Следующий() Цикл
					ОбластьСтрока.Параметры.Заполнить(ВыборкаСреднего);
					ОбластьСтрока.Параметры.Месяц=Формат(ВыборкаСреднего.Месяц,"ДФ='ММММ гггг ""г.""'");
					ТабДокумент.Вывести(ОбластьСтрока);
				КонецЦикла;			
				ОбластьСредний.Параметры.СРЗ=СРЗ;
				ТабДокумент.Присоединить(ОбластьСредний);
				ТабДокумент.Вывести(ОбластьИтоги);
			КонецЦикла;
		Иначе
			ТекДата=ВыборкаПоШапке.ПериодРасчетаСреднегоЗаработкаНачало;
			Пока ТекДата<=ВыборкаПоШапке.ПериодРасчетаСреднегоЗаработкаОкончание Цикл
				ОбластьСтрока.Параметры.Месяц=Формат(ТекДата,"ДФ='ММММ гггг ""г.""'");
				ТабДокумент.Вывести(ОбластьСтрока);
				ТекДата=ДобавитьМесяц(ТекДата,1);
			КонецЦикла;			
			ОбластьСредний.Параметры.СРЗ=ВыборкаПоШапке.РазмерСреднегоЗаработка;
			ТабДокумент.Присоединить(ОбластьСредний);
			ТабДокумент.Вывести(ОбластьИтоги);
		КонецЕсли;
		
		Если ВыборкаПоШапке.ДатаНарушенияРежима<>'00010101' Тогда
			Отметка="Выписан за нарушение режима, оплата 50% с"+ВыборкаПоШапке.ДатаНарушенияРежима;
			ОбластьОтметка.Параметры.Отметка=Отметка;
			ТабДокумент.Вывести(ОбластьОтметка);
		КонецЕсли;		
		
		ТабДокумент.Вывести(ОбластьШапкаР);		
		
		ВсегоЧ=0;
		
		Пока ВыборкаНачислений.Следующий() Цикл
			ОбластьНачислений.Параметры.Заполнить(ВыборкаНачислений);
			ОбластьНачислений.Параметры.МД=Формат(ВыборкаНачислений.Месяц,"ДФ='ММММ'")+" "+Строка(ВыборкаНачислений.ВсегоЧасов)+"дн.";
			ОбластьНачислений.Параметры.Печ80=?((ВыборкаНачислений.Д80<>0) И (ВыборкаНачислений.Д100<>0), Строка(ВыборкаНачислений.С80)+", "+ВыборкаНачислений.Д80+"дн.",ВыборкаНачислений.С80);
			ОбластьНачислений.Параметры.Печ100=?((ВыборкаНачислений.Д100<>0) И (ВыборкаНачислений.Д80<>0), Строка(ВыборкаНачислений.С100)+", "+ВыборкаНачислений.Д100+"дн.",ВыборкаНачислений.С100);
			ТабДокумент.Вывести(ОбластьНачислений);
			ВсегоЧ=ВсегоЧ+ВыборкаНачислений.СВсе;
		КонецЦикла;
		
		ОбластьКВыплате.Параметры.ВсегоЧ=ВсегоЧ;
		ТабДокумент.Присоединить(ОбластьКВыплате);
		
		ОбластьИтогНачислений.Параметры.Всего=РаботаСДиалогами.СформироватьСуммуПрописью(ВсегоЧ, Константы.ВалютаРегламентированногоУчета.Получить());
		ОбластьИтогНачислений.Параметры.ОП=ФОРМАТ(ВыборкаПоШапке.ОП,"ДФ='ММММ гггг'");
		ТабДокумент.Вывести(ОбластьИтогНачислений);
		
		Если ВыборкаПоОтветственным.Следующий() ТОгда
			ОбластьПодпись.Параметры.Заполнить(ВыборкаПоОтветственным);			
			Если ЗначениеЗаполнено(ВыборкаПоШапке.Исполнитель) ТОгда
				ОбластьПодпись.Параметры.ФИОИсполнитель=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоШапке.Исполнитель);
			Иначе				
				ОбластьПодпись.Параметры.ФИОИсполнитель=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоОтветственным.ФИОИсполнитель);
			КонецЕсли;			
			ОбластьПодпись.Параметры.ФИОГлБухгалтер=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоОтветственным.ФИОГлБухгалтер)
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьПодпись);
	ТабДокумент.АвтоМасштаб=Истина;
	ТабДокумент.ОриентацияСтраницы=ОриентацияСтраницы.Портрет;	
	
	Возврат ТабДокумент;
	
КонецФункции
//
//vvv
Функция ДеноминироватьПоказателиВидаРасчета(Движение) Экспорт
	
	СписокОбрабатываемыхПоказателей=ОбщегоНазначения.ПолучитьСписокОбрабатываемыхПоказателей();
	СведенияОВидеРасчета=РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(Новый Соответствие, Движение.ВидРасчета, "ПриРасчете");
			
	Для СчПоказателей = 1 По СведенияОВидеРасчета["КоличествоПоказателей"] Цикл				
				
		Наименование=СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"];				
						
		Если СписокОбрабатываемыхПоказателей.НайтиПоЗначению(Наименование)<>Неопределено ТОгда		
			Движение["Показатель"+СчПоказателей]=ОбщегоНазначения.ОкруглитьПоВалюте(Движение["Показатель"+СчПоказателей]/10000,Константы.ВалютаРегламентированногоУчета.Получить());
		КонецЕсли;
		
	КонецЦикла;
			
КонецФункции
//
Процедура ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачала, ВидРасчета, ПроцентОплаты)

	СтрокаИнтервала					= ТаблицаИнтерваловОплаты.Добавить();
	СтрокаИнтервала.Начало			= ДатаНачала;
	СтрокаИнтервала.Расчет			= ВидРасчета;
	СтрокаИнтервала.ПроцентОплаты	= ПроцентОплаты;
	
КонецПроцедуры // ДобавитьСтрокуВТаблицуИнтервалов()

// Выполняет проверку непрерывности интервалов начислений
Процедура ПроверитьНепрерывностьЗаписейНачислений(Отказ, Заголовок)
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// создадим массив начислений, по которым будем проверять непрерывность записей
	МассивНачислений = Новый Массив;
	МассивНачислений.Добавить(?(ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам, ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезниПоБеременности, ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезни));	
	МассивНачислений.Добавить(ВидРасчета);
	
	ТНачислений = Начисления.Выгрузить();
	ТНачислений.Сортировать("Сотрудник, ДатаНачала");
	
	ПредыдущийСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	ПредыдущаяДатаОкончания = '00010101';
	СтрокаНеПервая = Ложь;
	Для Каждого Строка ИЗ ТНачислений Цикл
		
		// Пропустим сторно записи и записи не из массива начислений
		Если Строка.Сторно ИЛИ МассивНачислений.Найти(Строка.ВидРасчета) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПредыдущийСотрудник <> Строка.Сотрудник Тогда
			ПредыдущийСотрудник = Строка.Сотрудник;
			СтрокаНеПервая = Ложь;
		КонецЕсли;
		
		// если встретили не первую строку начислений
		Если СтрокаНеПервая Тогда
			// строка не первая
			Если Строка.ДатаНачала <> ПредыдущаяДатаОкончания + мДлинаСуток Тогда
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
				""" табл. части ""Начисления"": ";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "нарушено требование непрерывности записей начислений!", Отказ, Заголовок);
			КонецЕсли;
		Иначе
			СтрокаНеПервая = Истина;
		КонецЕсли;
		ПредыдущаяДатаОкончания = Строка.ДатаОкончания;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьНепрерывностьЗаписейНачислений()

Функция КорректноеСочетаниеСчетовНУ(СчетДт,НаименованиеСчетДт, СчетКт, СчетДтНУ, СчетКтНУ, ЭтоЕНВД, Сообщение)
	
	Сообщение = "";
	
	Если СчетДтНУ.Пустая() Тогда
		Если (СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда или СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоВыплатеДоходов)
			и Не ЭтоЕНВД Тогда
			Сообщение = "Не указан счет налогового учета!";
		КонецЕсли;
		Если НЕ СчетКтНУ.Пустая() Тогда
			Сообщение = Сообщение + ?(Сообщение = "","",Символы.ПС) + "Указан счет кредита налогового учета, но не указан счет дебета налогового учета!";
		КонецЕсли;
	Иначе
		Если (СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда или СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоВыплатеДоходов) Тогда
			Сообщение = "Проводки в дебет "+НаименованиеСчетДт +" не должны отражаться в налоговом учете!";
		ИначеЕсли ЭтоЕНВД Тогда
			Сообщение = "Проводки по видам деятельности, облагаемым ЕНВД не должны отражаться в налоговом учете!";
		КонецЕсли;
		
		Если СчетКтНУ.Пустая() Тогда
			Сообщение = Сообщение + ?(Сообщение = "","",Символы.ПС) + "Указан счет дебета налогового учета, но не указан счет кредита налогового учета!";
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ПустаяСтрока(Сообщение)
	
КонецФункции // КорректноеСочетаниеСчетовНУ()

Функция ПолучитьВариантАлгоритмаРасчета(ЭтоПереходныйПериодПоЗакону255ФЗ)

	Если ЭтоПереходныйПериодПоЗакону255ФЗ Тогда
		Если ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
			Если ОграничениеПособияПереходногоПериода = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ Тогда
				ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОбщимОграничениемИВРазмереММОТ;
			ИначеЕсли ОграничениеПособияПереходногоПериода = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
				ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОбщимОграничением;
			Иначе
				ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОбщимОграничениемИБезОграничений;
			КонецЕсли;
		ИначеЕсли ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ Тогда
			Если ОграничениеПособияПереходногоПериода = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ Тогда
				ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОграничениемВРазмереММОТ;
			ИначеЕсли ОграничениеПособияПереходногоПериода = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
				ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОграничениямиВРазмереММОТиОбщим;
			Иначе
				ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОграничениемВРазмереММОТиБезОграничений;
			КонецЕсли;
		Иначе
			ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаБезОграничений;
		КонецЕсли;
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам И ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
		ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемПоБеременности;
	ИначеЕсли ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
		ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничением;
	ИначеЕсли ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ Тогда
		ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемВРазмереММОТ;
	Иначе
		ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйБезОграничений;
	КонецЕсли;

	Возврат ВариантАлгоритмаРасчета
	
КонецФункции // ПолучитьВариантАлгоритмаРасчета()

// получение первичных данных для бухучета
// первичные в данном случае, это те, для которых определено конкретное отражение
// в бухучете (не требуетяс предварительная обработка правила отражения в бухучете)
// или те которые определяют свой бухучет по базовым начисленияи и 
// при этом базируются на прошлом периоде
// 
// Параметры:
//  Основные - булево, если Истина, то получаем данные по основным начислениям иначе - по доп.
//
// Возвращаемое значение:
//  Результат запроса
// 
Функция ПолучитьДанныеУчета(ВыборкаПоШапкеДокумента, ЧитатьРасчетнуюБазу)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Организация", ВыборкаПоШапкеДокумента.Организация);
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("ПериодРегистрации", ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("ДатаЗакона202ФЗ", '20050101');
	Запрос.УстановитьПараметр("ДатаЗакона255ФЗ", мДатаЗакона255ФЗ);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	//получим отражение в учете сторно записей
	ОсновныеНачисленияСторноТекст =
	"ВЫБРАТЬ
	|	ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|	ОсновныеНачисления.Сотрудник,
	|	ОсновныеНачисления.ФизЛицо,
	|	ОсновныеНачисления.Организация,
	|	ОсновныеНачисления.ПериодДействияНачало,
	|	ОсновныеНачисления.ПериодДействияКонец,
	|	ОсновныеНачисления.ВидРасчета,
	|	ОсновныеНачисления.СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТ_ОсновныеНачисленияСторно
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	ОсновныеНачисления.Регистратор = &Регистратор
	|	И ОсновныеНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
	|	И ОсновныеНачисления.Результат <> 0
	|	И ОсновныеНачисления.Сторно
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = ОсновныеНачисленияСторноТекст;
	//временная таблица - ВТ_ОсновныеНачисленияСторно
	Результат = Запрос.Выполнить().Выгрузить();
	КоличествоСторноЗаписей = Результат[0].Количество;
	
	Если КоличествоСторноЗаписей <> 0 Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОсновныеНачисления.СторнируемыйДокумент.ПериодРегистрации КАК ПериодРегистрации,
		|	ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|	ОсновныеНачисления.ВидРасчета КАК ВидРасчета
		|ПОМЕСТИТЬ ВТ_СторноСотрудники
		|ИЗ
		|	ВТ_ОсновныеНачисленияСторно КАК ОсновныеНачисления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПериодРегистрации,
		|	Сотрудник,
		|	ВидРасчета";
		
		//временная таблица - ВТ_СторноСотрудники
		Запрос.Выполнить();
		
		
		ОтражениеВУчетеСторноТекст = 
		"ВЫБРАТЬ
		|	ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	БУОсновныеНачисления.СчетДт,
		|	БУОсновныеНачисления.СубконтоДт1,
		|	БУОсновныеНачисления.СубконтоДт2,
		|	БУОсновныеНачисления.СубконтоДт3,
		|	БУОсновныеНачисления.СчетКт,
		|	БУОсновныеНачисления.СубконтоКт1,
		|	БУОсновныеНачисления.СубконтоКт2,
		|	БУОсновныеНачисления.СубконтоКт3,
		|	БУОсновныеНачисления.СчетДтНУ,
		|	БУОсновныеНачисления.СубконтоДтНУ1,
		|	БУОсновныеНачисления.СубконтоДтНУ2,
		|	БУОсновныеНачисления.СубконтоДтНУ3,
		|	БУОсновныеНачисления.СчетКтНУ,
		|	БУОсновныеНачисления.СубконтоКтНУ1,
		|	БУОсновныеНачисления.СубконтоКтНУ2,
		|	БУОсновныеНачисления.СубконтоКтНУ3,
		|	БУОсновныеНачисления.СчетКтУСН,
		|	БУОсновныеНачисления.ОтражениеВУСН,
		|	БУОсновныеНачисления.Результат,
		|	ВЫБОР
		|		КОГДА БУОсновныеНачисления.СчетДт В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЕНВД))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОблагаетсяЕНВД,
		|	ВЫБОР
		|		КОГДА БУОсновныеНачисления.СчетДт В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_СПЕЦ_УСН), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС))
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияЗаСчетФСС)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.НеОблагаетсяЦеликом)
		|	КОНЕЦ КАК КодДоходаЕСН,
		|	БУОсновныеНачисления.ПериодДействияНачало,
		|	БУОсновныеНачисления.ПериодДействияКонец
		|ПОМЕСТИТЬ ВТ_ОтражениеВУчетеСторно
		|ИЗ
		|	ВТ_ОсновныеНачисленияСторно КАК ОсновныеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			БУОсновныеНачисления.ВидРасчета КАК ВидРасчета,
		|			БУОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|			БУОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|			БУОсновныеНачисления.Сотрудник КАК Сотрудник,
		|			БУОсновныеНачисления.ФизЛицо КАК ФизЛицо,
		|			БУОсновныеНачисления.Организация КАК Организация,
		|			БУОсновныеНачисления.Результат КАК Результат,
		|			БУОсновныеНачисления.СчетДт КАК СчетДт,
		|			БУОсновныеНачисления.СубконтоДт1 КАК СубконтоДт1,
		|			БУОсновныеНачисления.СубконтоДт2 КАК СубконтоДт2,
		|			БУОсновныеНачисления.СубконтоДт3 КАК СубконтоДт3,
		|			БУОсновныеНачисления.СчетКт КАК СчетКт,
		|			БУОсновныеНачисления.СубконтоКт1 КАК СубконтоКт1,
		|			БУОсновныеНачисления.СубконтоКт2 КАК СубконтоКт2,
		|			БУОсновныеНачисления.СубконтоКт3 КАК СубконтоКт3,
		|			БУОсновныеНачисления.СчетДтНУ КАК СчетДтНУ,
		|			БУОсновныеНачисления.СубконтоДтНУ1 КАК СубконтоДтНУ1,
		|			БУОсновныеНачисления.СубконтоДтНУ2 КАК СубконтоДтНУ2,
		|			БУОсновныеНачисления.СубконтоДтНУ3 КАК СубконтоДтНУ3,
		|			БУОсновныеНачисления.СчетКтНУ КАК СчетКтНУ,
		|			БУОсновныеНачисления.СубконтоКтНУ1 КАК СубконтоКтНУ1,
		|			БУОсновныеНачисления.СубконтоКтНУ2 КАК СубконтоКтНУ2,
		|			БУОсновныеНачисления.СубконтоКтНУ3 КАК СубконтоКтНУ3,
		|			БУОсновныеНачисления.СчетКтУСН КАК СчетКтУСН,
		|			БУОсновныеНачисления.ОтражениеВУСН КАК ОтражениеВУСН,
		|			БУОсновныеНачисления.ДокументОснование КАК ДокументОснование,
		|			БУОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало1,
		|			БУОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец1
		|		ИЗ
		|			РегистрРасчета.БУОсновныеНачисления КАК БУОсновныеНачисления
		|		ГДЕ
		|			(БУОсновныеНачисления.ПериодРегистрации, БУОсновныеНачисления.Сотрудник, БУОсновныеНачисления.ВидРасчета) В
		|					(ВЫБРАТЬ
		|						ОсновныеНачисления.ПериодРегистрации,
		|						ОсновныеНачисления.Сотрудник,
		|						ОсновныеНачисления.ВидРасчета
		|					ИЗ
		|						ВТ_СторноСотрудники КАК ОсновныеНачисления)) КАК БУОсновныеНачисления
		|		ПО ОсновныеНачисления.ВидРасчета = БУОсновныеНачисления.ВидРасчета
		|			И ОсновныеНачисления.Сотрудник = БУОсновныеНачисления.Сотрудник
		|			И ОсновныеНачисления.Организация = БУОсновныеНачисления.Организация
		|			И ОсновныеНачисления.ФизЛицо = БУОсновныеНачисления.ФизЛицо
		|			И ОсновныеНачисления.СторнируемыйДокумент = БУОсновныеНачисления.ДокументОснование
		|			И (БУОсновныеНачисления.ПериодДействияНачало >= ОсновныеНачисления.ПериодДействияНачало)
		|			И (БУОсновныеНачисления.ПериодДействияКонец <= ОсновныеНачисления.ПериодДействияКонец)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		
	Иначе
		
		ОтражениеВУчетеСторноТекст = 
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК СчетДт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СчетКт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	НЕОПРЕДЕЛЕНО КАК СчетДтНУ,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДтНУ1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДтНУ2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДтНУ3,
		|	НЕОПРЕДЕЛЕНО КАК СчетКтНУ,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКтНУ1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКтНУ2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКтНУ3,
		|	НЕОПРЕДЕЛЕНО КАК СчетКтУСН,
		|	НЕОПРЕДЕЛЕНО КАК ОтражениеВУСН,
		|	НЕОПРЕДЕЛЕНО КАК ОблагаетсяЕНВД,
		|	НЕОПРЕДЕЛЕНО КАК ПериодДействияНачало,
		|	НЕОПРЕДЕЛЕНО КАК ПериодДействияКонец,
		|	НЕОПРЕДЕЛЕНО КАК КодДоходаЕСН,
		|	0 КАК Результат
		|ПОМЕСТИТЬ ВТ_ОтражениеВУчетеСторно";
		
	КонецЕсли;
	
	Запрос.Текст = ОтражениеВУчетеСторноТекст;
	//временная таблица - ВТ_ОтражениеВУчетеСторно
	Запрос.Выполнить();

	Если ЧитатьРасчетнуюБазу Тогда
		
		Измерения = Новый Массив(1);
		Измерения[0] = "Сотрудник";
		
		Запрос.УстановитьПараметр("парамИзмерения", Измерения);
		
		Разрезы = Новый Массив(17);
		Разрезы[0] = "СчетДт";
		Разрезы[1] = "СубконтоДт1";
		Разрезы[2] = "СубконтоДт2";
		Разрезы[3] = "СубконтоДт3";
		Разрезы[4] = "СчетКт";
		Разрезы[5] = "СубконтоКт1";
		Разрезы[6] = "СубконтоКт2";
		Разрезы[7] = "СубконтоКт3";
		Разрезы[8] = "СчетДтНУ";
		Разрезы[9] = "СчетКтНУ";
		Разрезы[10] = "СубконтоДтНУ1";
		Разрезы[11] = "СубконтоДтНУ2";
		Разрезы[12] = "СубконтоДтНУ3";
		Разрезы[13] = "СубконтоКтНУ1";
		Разрезы[14] = "СубконтоКтНУ2";
		Разрезы[15] = "СубконтоКтНУ3";
		Разрезы[16] = "ОтражениеВУСН";	
		
		Запрос.УстановитьПараметр("парамРазрезыБУ", Разрезы);
		
		// для учета особенностей расчета среднего заработка
		СписокСоставляющихСреднегоЗаработка = Новый Массив(10); 
		СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
		СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ;
		СписокСоставляющихСреднегоЗаработка[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ;
		СписокСоставляющихСреднегоЗаработка[3] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ;
		СписокСоставляющихСреднегоЗаработка[4] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ;
		СписокСоставляющихСреднегоЗаработка[5] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
		СписокСоставляющихСреднегоЗаработка[6] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
		СписокСоставляющихСреднегоЗаработка[7] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии;
		СписокСоставляющихСреднегоЗаработка[8] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
		СписокСоставляющихСреднегоЗаработка[9] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
		Запрос.УстановитьПараметр("парамСписокСоставляющихСреднегоЗаработка", СписокСоставляющихСреднегоЗаработка);
	
		ОсновнойЗаработок = Новый Массив(3);
		ОсновнойЗаработок[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
		ОсновнойЗаработок[1] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
		ОсновнойЗаработок[2] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий;
		ПоФиксПремиям = Новый Массив(3);
		ПоФиксПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
		ПоФиксПремиям[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ;
		ПоФиксПремиям[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий;
		ПоПремиям = Новый Массив(3);
		ПоПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
		ПоПремиям[1] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ;
		ПоПремиям[2] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий;
		ФиксГодовыеПремии = Новый Массив(3);
		ФиксГодовыеПремии[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии;
		ФиксГодовыеПремии[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ;
		ФиксГодовыеПремии[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий;
		
		Запрос.УстановитьПараметр("ОсновнойЗаработок", ОсновнойЗаработок);
		Запрос.УстановитьПараметр("ПоПремиям", ПоПремиям);
		Запрос.УстановитьПараметр("ПоФиксПремиям", ПоФиксПремиям);
		Запрос.УстановитьПараметр("ФиксГодовыеПремии", ФиксГодовыеПремии);
			
		БазаСреднегоЗаработкаТекст =
		"ВЫБРАТЬ
		|	БазаСреднегоЗаработка.Регистратор,
		|	БазаСреднегоЗаработка.НомерСтроки,
		|	БазаСреднегоЗаработка.СчетДтРазрез,
		|	БазаСреднегоЗаработка.СчетКтРазрез,
		|	БазаСреднегоЗаработка.СубконтоДт1Разрез,
		|	БазаСреднегоЗаработка.СубконтоДт2Разрез,
		|	БазаСреднегоЗаработка.СубконтоДт3Разрез,
		|	БазаСреднегоЗаработка.СубконтоКт1Разрез,
		|	БазаСреднегоЗаработка.СубконтоКт2Разрез,
		|	БазаСреднегоЗаработка.СубконтоКт3Разрез,
		|	БазаСреднегоЗаработка.СчетДтНУРазрез,
		|	БазаСреднегоЗаработка.СчетКтНУРазрез,
		|	БазаСреднегоЗаработка.СубконтоДтНУ1Разрез,
		|	БазаСреднегоЗаработка.СубконтоДтНУ2Разрез,
		|	БазаСреднегоЗаработка.СубконтоДтНУ3Разрез,
		|	БазаСреднегоЗаработка.СубконтоКтНУ1Разрез,
		|	БазаСреднегоЗаработка.СубконтоКтНУ2Разрез,
		|	БазаСреднегоЗаработка.СубконтоКтНУ3Разрез,
		|	БазаСреднегоЗаработка.ОтражениеВУСНРазрез,
		|	СУММА(БазаСреднегоЗаработка.РезультатБаза) КАК РезультатБаза
		|ПОМЕСТИТЬ БазаСреднегоЗаработка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОсновныеНачисления.Регистратор КАК Регистратор,
		|		ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|		БазаСреднегоЗаработка.СчетДтРазрез КАК СчетДтРазрез,
		|		БазаСреднегоЗаработка.СчетКтРазрез КАК СчетКтРазрез,
		|		БазаСреднегоЗаработка.СубконтоДт1Разрез КАК СубконтоДт1Разрез,
		|		БазаСреднегоЗаработка.СубконтоДт2Разрез КАК СубконтоДт2Разрез,
		|		БазаСреднегоЗаработка.СубконтоДт3Разрез КАК СубконтоДт3Разрез,
		|		БазаСреднегоЗаработка.СубконтоКт1Разрез КАК СубконтоКт1Разрез,
		|		БазаСреднегоЗаработка.СубконтоКт2Разрез КАК СубконтоКт2Разрез,
		|		БазаСреднегоЗаработка.СубконтоКт3Разрез КАК СубконтоКт3Разрез,
		|		БазаСреднегоЗаработка.СчетДтНУРазрез КАК СчетДтНУРазрез,
		|		БазаСреднегоЗаработка.СчетКтНУРазрез КАК СчетКтНУРазрез,
		|		БазаСреднегоЗаработка.СубконтоДтНУ1Разрез КАК СубконтоДтНУ1Разрез,
		|		БазаСреднегоЗаработка.СубконтоДтНУ2Разрез КАК СубконтоДтНУ2Разрез,
		|		БазаСреднегоЗаработка.СубконтоДтНУ3Разрез КАК СубконтоДтНУ3Разрез,
		|		БазаСреднегоЗаработка.СубконтоКтНУ1Разрез КАК СубконтоКтНУ1Разрез,
		|		БазаСреднегоЗаработка.СубконтоКтНУ2Разрез КАК СубконтоКтНУ2Разрез,
		|		БазаСреднегоЗаработка.СубконтоКтНУ3Разрез КАК СубконтоКтНУ3Разрез,
		|		БазаСреднегоЗаработка.ОтражениеВУСНРазрез КАК ОтражениеВУСНРазрез,
		|		ВЫБОР
		|			КОГДА БазаСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
		|				ТОГДА БазаСреднегоЗаработка.РезультатБаза * БазаСреднегоЗаработка.КоэффициентИндексации
		|			КОГДА БазаСреднегоЗаработка.ЧислоМесяцев = 0
		|				ТОГДА 0
		|			ИНАЧЕ ВЫБОР
		|					КОГДА БазаСреднегоЗаработка.ВидРасчета В (&ПоФиксПремиям)
		|						ТОГДА БазаСреднегоЗаработка.РезультатБаза * БазаСреднегоЗаработка.КоэффициентИндексации * ВЫБОР
		|								КОГДА БазаСреднегоЗаработка.НормаПоПятидневке = 0
		|									ТОГДА 0
		|								ИНАЧЕ БазаСреднегоЗаработка.ОтработаноПоПятидневке / БазаСреднегоЗаработка.НормаПоПятидневке
		|							КОНЕЦ
		|					КОГДА БазаСреднегоЗаработка.ВидРасчета В (&ПоПремиям)
		|						ТОГДА БазаСреднегоЗаработка.РезультатБаза * БазаСреднегоЗаработка.КоэффициентИндексации
		|					КОГДА БазаСреднегоЗаработка.ВидРасчета В (&ФиксГодовыеПремии)
		|						ТОГДА БазаСреднегоЗаработка.РезультатБаза * ВЫБОР
		|								КОГДА БазаСреднегоЗаработка.НормаПоПятидневке = 0
		|									ТОГДА 0
		|								ИНАЧЕ БазаСреднегоЗаработка.ОтработаноПоПятидневке / БазаСреднегоЗаработка.НормаПоПятидневке
		|							КОНЕЦ
		|					ИНАЧЕ БазаСреднегоЗаработка.РезультатБаза
		|				КОНЕЦ * ВЫБОР
		|					КОГДА БазаСреднегоЗаработка.ЧислоМесяцев > БазаСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка
		|						ТОГДА БазаСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка / БазаСреднегоЗаработка.ЧислоМесяцев
		|					ИНАЧЕ 1
		|				КОНЕЦ
		|		КОНЕЦ КАК РезультатБаза
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.РасчетСреднегоЗаработка.БазаБУОсновныеНачисления(
		|					&парамИзмерения,
		|					&парамИзмерения,
		|					&парамРазрезыБУ,
		|					Регистратор = &Регистратор
		|						И (НЕ Сторно)
		|						И (ВидРасчета В (&парамСписокСоставляющихСреднегоЗаработка)
		|							ИЛИ ДатаНачалаСобытия >= &ДатаЗакона255ФЗ)) КАК БазаСреднегоЗаработка
		|			ПО (БазаСреднегоЗаработка.СпособРасчета = ОсновныеНачисления.ВидРасчета.СпособРасчета)
		|				И ОсновныеНачисления.ДатаНачалаСобытия = БазаСреднегоЗаработка.ДатаНачалаСобытия
		|				И ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало = БазаСреднегоЗаработка.ДатаНачалаРасчетногоПериода
		|				И ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание = БазаСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
		|				И (ОсновныеНачисления.Сотрудник = ВЫБОР
		|					КОГДА БазаСреднегоЗаработка.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|							И БазаСреднегоЗаработка.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет))
		|						ТОГДА ЕСТЬNULL(БазаСреднегоЗаработка.Регистратор.Сотрудник, БазаСреднегоЗаработка.Сотрудник)
		|					ИНАЧЕ БазаСреднегоЗаработка.Сотрудник
		|				КОНЕЦ)
		|	ГДЕ
		|		ОсновныеНачисления.Регистратор = &Регистратор
		|		И ОсновныеНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|		И (НЕ ОсновныеНачисления.Сторно)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОсновныеНачисления.Регистратор,
		|		ОсновныеНачисления.НомерСтроки,
		|		БазаСреднегоЗаработка.СчетДтРазрез,
		|		БазаСреднегоЗаработка.СчетКтРазрез,
		|		БазаСреднегоЗаработка.СубконтоДт1Разрез,
		|		БазаСреднегоЗаработка.СубконтоДт2Разрез,
		|		БазаСреднегоЗаработка.СубконтоДт3Разрез,
		|		БазаСреднегоЗаработка.СубконтоКт1Разрез,
		|		БазаСреднегоЗаработка.СубконтоКт2Разрез,
		|		БазаСреднегоЗаработка.СубконтоКт3Разрез,
		|		БазаСреднегоЗаработка.СчетДтНУРазрез,
		|		БазаСреднегоЗаработка.СчетКтНУРазрез,
		|		БазаСреднегоЗаработка.СубконтоДтНУ1Разрез,
		|		БазаСреднегоЗаработка.СубконтоДтНУ2Разрез,
		|		БазаСреднегоЗаработка.СубконтоДтНУ3Разрез,
		|		БазаСреднегоЗаработка.СубконтоКтНУ1Разрез,
		|		БазаСреднегоЗаработка.СубконтоКтНУ2Разрез,
		|		БазаСреднегоЗаработка.СубконтоКтНУ3Разрез,
		|		БазаСреднегоЗаработка.ОтражениеВУСНРазрез,
		|		ВЫБОР
		|			КОГДА БазаСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
		|				ТОГДА БазаСреднегоЗаработка.РезультатБаза * БазаСреднегоЗаработка.КоэффициентИндексации
		|			КОГДА БазаСреднегоЗаработка.ЧислоМесяцев = 0
		|				ТОГДА 0
		|			ИНАЧЕ ВЫБОР
		|					КОГДА БазаСреднегоЗаработка.ВидРасчета В (&ПоФиксПремиям)
		|						ТОГДА БазаСреднегоЗаработка.РезультатБаза * БазаСреднегоЗаработка.КоэффициентИндексации * ВЫБОР
		|								КОГДА БазаСреднегоЗаработка.НормаПоПятидневке = 0
		|									ТОГДА 0
		|								ИНАЧЕ БазаСреднегоЗаработка.ОтработаноПоПятидневке / БазаСреднегоЗаработка.НормаПоПятидневке
		|							КОНЕЦ
		|					КОГДА БазаСреднегоЗаработка.ВидРасчета В (&ПоПремиям)
		|						ТОГДА БазаСреднегоЗаработка.РезультатБаза * БазаСреднегоЗаработка.КоэффициентИндексации
		|					КОГДА БазаСреднегоЗаработка.ВидРасчета В (&ФиксГодовыеПремии)
		|						ТОГДА БазаСреднегоЗаработка.РезультатБаза * ВЫБОР
		|								КОГДА БазаСреднегоЗаработка.НормаПоПятидневке = 0
		|									ТОГДА 0
		|								ИНАЧЕ БазаСреднегоЗаработка.ОтработаноПоПятидневке / БазаСреднегоЗаработка.НормаПоПятидневке
		|							КОНЕЦ
		|					ИНАЧЕ БазаСреднегоЗаработка.РезультатБаза
		|				КОНЕЦ * ВЫБОР
		|					КОГДА БазаСреднегоЗаработка.ЧислоМесяцев > БазаСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка
		|						ТОГДА БазаСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка / БазаСреднегоЗаработка.ЧислоМесяцев
		|					ИНАЧЕ 1
		|				КОНЕЦ
		|		КОНЕЦ
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.РасчетСреднегоЗаработка.БазаБУДополнительныеНачисления(
		|					&парамИзмерения,
		|					&парамИзмерения,
		|					&парамРазрезыБУ,
		|					Регистратор = &Регистратор
		|						И (НЕ Сторно)
		|						И (ВидРасчета В (&парамСписокСоставляющихСреднегоЗаработка)
		|							ИЛИ ДатаНачалаСобытия >= &ДатаЗакона255ФЗ)) КАК БазаСреднегоЗаработка
		|			ПО (ОсновныеНачисления.Сотрудник = ВЫБОР
		|					КОГДА БазаСреднегоЗаработка.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|							И БазаСреднегоЗаработка.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет))
		|						ТОГДА ЕСТЬNULL(БазаСреднегоЗаработка.Регистратор.Сотрудник, БазаСреднегоЗаработка.Сотрудник)
		|					ИНАЧЕ БазаСреднегоЗаработка.Сотрудник
		|				КОНЕЦ)
		|				И (БазаСреднегоЗаработка.СпособРасчета = ОсновныеНачисления.ВидРасчета.СпособРасчета)
		|				И ОсновныеНачисления.ДатаНачалаСобытия = БазаСреднегоЗаработка.ДатаНачалаСобытия
		|				И ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало = БазаСреднегоЗаработка.ДатаНачалаРасчетногоПериода
		|				И ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание = БазаСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
		|	ГДЕ
		|		ОсновныеНачисления.Регистратор = &Регистратор
		|		И ОсновныеНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|		И (НЕ ОсновныеНачисления.Сторно)) КАК БазаСреднегоЗаработка
		|
		|СГРУППИРОВАТЬ ПО
		|	БазаСреднегоЗаработка.Регистратор,
		|	БазаСреднегоЗаработка.НомерСтроки,
		|	БазаСреднегоЗаработка.СчетДтРазрез,
		|	БазаСреднегоЗаработка.СчетКтРазрез,
		|	БазаСреднегоЗаработка.СубконтоДт1Разрез,
		|	БазаСреднегоЗаработка.СубконтоДт2Разрез,
		|	БазаСреднегоЗаработка.СубконтоДт3Разрез,
		|	БазаСреднегоЗаработка.СубконтоКт1Разрез,
		|	БазаСреднегоЗаработка.СубконтоКт2Разрез,
		|	БазаСреднегоЗаработка.СубконтоКт3Разрез,
		|	БазаСреднегоЗаработка.СчетДтНУРазрез,
		|	БазаСреднегоЗаработка.СчетКтНУРазрез,
		|	БазаСреднегоЗаработка.СубконтоДтНУ1Разрез,
		|	БазаСреднегоЗаработка.СубконтоДтНУ2Разрез,
		|	БазаСреднегоЗаработка.СубконтоДтНУ3Разрез,
		|	БазаСреднегоЗаработка.СубконтоКтНУ1Разрез,
		|	БазаСреднегоЗаработка.СубконтоКтНУ2Разрез,
		|	БазаСреднегоЗаработка.СубконтоКтНУ3Разрез,
		|	БазаСреднегоЗаработка.ОтражениеВУСНРазрез";
		
		Запрос.Текст = БазаСреднегоЗаработкаТекст;
		//временная таблица - БазаСреднегоЗаработка
		Запрос.Выполнить();
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	&ПериодРегистрации КАК ПериодРегистрации,
		|	ДанныеУчета.НомерСтроки КАК НомерСтроки,
		|	ДанныеУчета.Сотрудник,
		|	ДанныеУчета.ФизЛицо,
		|	ДанныеУчета.ВидРасчета,
		|	ДанныеУчета.Сторно,
		|	ДанныеУчета.Результат,
		|	ЕСТЬNULL(ОтражениеВУчетеСторно.ПериодДействияНачало, ДанныеУчета.ПериодДействияНачало) КАК ПериодДействияНачало,
		|	ЕСТЬNULL(ОтражениеВУчетеСторно.ПериодДействияКонец, ДанныеУчета.ПериодДействияКонец) КАК ПериодДействияКонец,
		|	ДанныеУчета.ГрафикРаботы,
		|	ДанныеУчета.ВидУчетаВремени,
		|	ДанныеУчета.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|	БазаСреднегоЗаработка.СчетДтРазрез КАК СчетДтРазрез,
		|	БазаСреднегоЗаработка.СчетКтРазрез КАК СчетКтРазрез,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА БазаСреднегоЗаработка.СубконтоДт1Разрез ССЫЛКА Справочник.СтатьиЗатрат
		|					ТОГДА БазаСреднегоЗаработка.СубконтоДт1Разрез.ОтнесениеРасходовКДеятельностиЕНВД
		|				КОГДА БазаСреднегоЗаработка.СубконтоДт2Разрез ССЫЛКА Справочник.СтатьиЗатрат
		|					ТОГДА БазаСреднегоЗаработка.СубконтоДт2Разрез.ОтнесениеРасходовКДеятельностиЕНВД
		|				КОГДА БазаСреднегоЗаработка.СубконтоДт3Разрез ССЫЛКА Справочник.СтатьиЗатрат
		|					ТОГДА БазаСреднегоЗаработка.СубконтоДт3Разрез.ОтнесениеРасходовКДеятельностиЕНВД
		|				ИНАЧЕ NULL
		|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЕНВД,
		|	БазаСреднегоЗаработка.СубконтоДт1Разрез КАК СубконтоДт1Разрез,
		|	БазаСреднегоЗаработка.СубконтоДт2Разрез КАК СубконтоДт2Разрез,
		|	БазаСреднегоЗаработка.СубконтоДт3Разрез КАК СубконтоДт3Разрез,
		|	БазаСреднегоЗаработка.СубконтоКт1Разрез КАК СубконтоКт1Разрез,
		|	БазаСреднегоЗаработка.СубконтоКт2Разрез КАК СубконтоКт2Разрез,
		|	БазаСреднегоЗаработка.СубконтоКт3Разрез КАК СубконтоКт3Разрез,
		|	БазаСреднегоЗаработка.СчетДтНУРазрез КАК СчетДтНУРазрез,
		|	БазаСреднегоЗаработка.СчетКтНУРазрез КАК СчетКтНУРазрез,
		|	БазаСреднегоЗаработка.СубконтоДтНУ1Разрез КАК СубконтоДтНУ1Разрез,
		|	БазаСреднегоЗаработка.СубконтоДтНУ2Разрез КАК СубконтоДтНУ2Разрез,
		|	БазаСреднегоЗаработка.СубконтоДтНУ3Разрез КАК СубконтоДтНУ3Разрез,
		|	БазаСреднегоЗаработка.СубконтоКтНУ1Разрез КАК СубконтоКтНУ1Разрез,
		|	БазаСреднегоЗаработка.СубконтоКтНУ2Разрез КАК СубконтоКтНУ2Разрез,
		|	БазаСреднегоЗаработка.СубконтоКтНУ3Разрез КАК СубконтоКтНУ3Разрез,
		|	БазаСреднегоЗаработка.ОтражениеВУСНРазрез КАК ОтражениеВУСНРазрез,
		|	БазаСреднегоЗаработка.РезультатБаза КАК РезультатБаза,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ДанныеУчета.ПериодДействия >= &ДатаЗакона255ФЗ
		|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазмерыММОТ.Размер, 0) * (ЕСТЬNULL(ДанныеФПД.КалендарныхДней, 0) / ДЕНЬ(КОНЕЦПЕРИОДА(ДанныеУчета.ПериодДействия, МЕСЯЦ))) КАК ЧИСЛО(10, 2))
		|			КОГДА ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеПериодДействия, 0) = 0
		|				ТОГДА 0
		|			ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(РазмерыММОТ.Размер, 0) / ДанныеГрафика.ОсновноеЗначениеПериодДействия * ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия, 0) КАК ЧИСЛО(10, 2))
		|		КОНЕЦ, 0) КАК ВПределахММОТ,
		|	ЕСТЬNULL(ДанныеУчетаБЛ.ДоляБЛЗаСчетРаботодателя, 0) КАК ДоляБЛЗаСчетРаботодателя,
		|	ДанныеУчета.ВидРасчета.Наименование,
		|	ОтражениеВУчетеСторно.КодДоходаЕСН КАК КодДоходаЕСН,
		|	ОтражениеВУчетеСторно.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	ОтражениеВУчетеСторно.СчетДт КАК СчетДт,
		|	ОтражениеВУчетеСторно.СубконтоДт1,
		|	ОтражениеВУчетеСторно.СубконтоДт2,
		|	ОтражениеВУчетеСторно.СубконтоДт3,
		|	ОтражениеВУчетеСторно.СчетКт,
		|	ОтражениеВУчетеСторно.СубконтоКт1,
		|	ОтражениеВУчетеСторно.СубконтоКт2,
		|	ОтражениеВУчетеСторно.СубконтоКт3,
		|	ОтражениеВУчетеСторно.СчетДтНУ,
		|	ОтражениеВУчетеСторно.СубконтоДтНУ1,
		|	ОтражениеВУчетеСторно.СубконтоДтНУ2,
		|	ОтражениеВУчетеСторно.СубконтоДтНУ3,
		|	ОтражениеВУчетеСторно.СчетКтНУ,
		|	ОтражениеВУчетеСторно.СубконтоКтНУ1,
		|	ОтражениеВУчетеСторно.СубконтоКтНУ2,
		|	ОтражениеВУчетеСторно.СубконтоКтНУ3,
		|	ОтражениеВУчетеСторно.СчетКтУСН,
		|	ОтражениеВУчетеСторно.ОтражениеВУСН,
		|	ОтражениеВУчетеСторно.Результат КАК РезультатСторно
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|		ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|		ОсновныеНачисления.ФизЛицо КАК ФизЛицо,
		|		ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
		|		ОсновныеНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|		ОсновныеНачисления.Результат КАК Результат,
		|		ОсновныеНачисления.ПериодДействия КАК ПериодДействия,
		|		ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|		ОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|		ОсновныеНачисления.Сторно КАК Сторно,
		|		ОсновныеНачисления.ГрафикРаботы КАК ГрафикРаботы,
		|		ОсновныеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
		|		ОсновныеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|	ГДЕ
		|		ОсновныеНачисления.Регистратор = &Регистратор
		|		И ОсновныеНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)) КАК ДанныеУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ БазаСреднегоЗаработка КАК БазаСреднегоЗаработка
		|		ПО ДанныеУчета.НомерСтроки = БазаСреднегоЗаработка.НомерСтроки
		|			И ((НЕ ДанныеУчета.Сторно))
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДатыАктуальностиММОТ.Регистратор КАК Регистратор,
		|			ДатыАктуальностиММОТ.НомерСтроки КАК ОсновнойНомерСтроки,
		|			МинимальнаяОплатаТрудаРФ.Размер КАК Размер
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ОсновныеНачисления.Регистратор КАК Регистратор,
		|				ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|				МАКСИМУМ(МинимальнаяОплатаТрудаРФ.Период) КАК ДатаАктуальности
		|			ИЗ
		|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
		|					ПО (МинимальнаяОплатаТрудаРФ.Период <= ОсновныеНачисления.ПериодДействияНачало)
		|			ГДЕ
		|				ОсновныеНачисления.Регистратор = &Регистратор
		|				И (НЕ ОсновныеНачисления.Сторно)
		|				И ОсновныеНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ОсновныеНачисления.НомерСтроки,
		|				ОсновныеНачисления.Регистратор) КАК ДатыАктуальностиММОТ
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
		|				ПО (МинимальнаяОплатаТрудаРФ.Период = ДатыАктуальностиММОТ.ДатаАктуальности)) КАК РазмерыММОТ
		|		ПО ДанныеУчета.НомерСтроки = РазмерыММОТ.ОсновнойНомерСтроки
		|			И ((НЕ ДанныеУчета.Сторно))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ДанныеГрафика(
		|				ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|					И (НЕ Сторно)
		|					И Регистратор = &Регистратор) КАК ДанныеГрафика
		|		ПО ДанныеУчета.НомерСтроки = ДанныеГрафика.НомерСтроки
		|			И ((НЕ ДанныеУчета.Сторно))
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ФактическийПериодДействияЗаписей.НомерСтроки КАК НомерСтроки,
		|			СУММА(РАЗНОСТЬДАТ(ФактическийПериодДействияЗаписей.ПериодДействияНачало, НАЧАЛОПЕРИОДА(ФактическийПериодДействияЗаписей.ПериодДействияКонец, ДЕНЬ), ДЕНЬ) + 1) КАК КалендарныхДней
		|		ИЗ
		|			РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|					ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|						И (НЕ Сторно)
		|						И Регистратор = &Регистратор) КАК ФактическийПериодДействияЗаписей
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ФактическийПериодДействияЗаписей.НомерСтроки) КАК ДанныеФПД
		|		ПО ДанныеУчета.НомерСтроки = ДанныеФПД.НомерСтроки
		|			И ((НЕ ДанныеУчета.Сторно))
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОсновныеНачисления.Регистратор КАК Регистратор,
		|			ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|			ЕСТЬNULL(ВЫБОР
		|					КОГДА ОсновныеНачисления.ДатаНачалаСобытия >= &ДатаЗакона255ФЗ
		|						ТОГДА ФактическийПериодДействияЗаписей.ДнейЗаСчетРаботодателя / ФактическийПериодДействияЗаписей.КалендарныхДней
		|					КОГДА ВЫБОР
		|							КОГДА ОсновныеНачисления.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|								ТОГДА ОсновныеНачисления.НормаДней
		|							ИНАЧЕ ОсновныеНачисления.НормаЧасов
		|						КОНЕЦ = 0
		|						ТОГДА 0
		|					ИНАЧЕ СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) / ВЫБОР
		|							КОГДА ОсновныеНачисления.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|								ТОГДА ОсновныеНачисления.НормаДней
		|							ИНАЧЕ ОсновныеНачисления.НормаЧасов
		|						КОНЕЦ
		|				КОНЕЦ, 0) КАК ДоляБЛЗаСчетРаботодателя
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ОсновныеНачисления.Регистратор КАК Регистратор,
		|				ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|				ОсновныеНачисления.ПериодДействия КАК ПериодДействия,
		|				ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|				ОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|				ОсновныеНачисления.ГрафикРаботы КАК ГрафикРаботы,
		|				ОсновныеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
		|				ОсновныеНачисления.НормаДней КАК НормаДней,
		|				ОсновныеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|				ОсновныеНачисления.НормаЧасов КАК НормаЧасов
		|			ИЗ
		|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|			ГДЕ
		|				ОсновныеНачисления.Регистратор = &Регистратор
		|				И (НЕ ОсновныеНачисления.Сторно)
		|				И ОсновныеНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|				И РАЗНОСТЬДАТ(ОсновныеНачисления.ДатаНачалаСобытия, ОсновныеНачисления.ПериодДействияНачало, ДЕНЬ) < 2
		|				И ОсновныеНачисления.ДатаНачалаСобытия >= &ДатаЗакона202ФЗ) КАК ОсновныеНачисления
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|				ПО ОсновныеНачисления.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|					И ОсновныеНачисления.ВидУчетаВремени = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
		|					И (ОсновныеНачисления.ПериодДействия < &ДатаЗакона255ФЗ)
		|					И ОсновныеНачисления.ПериодДействияНачало <= ГрафикиРаботыПоВидамВремени.Дата
		|					И (ДОБАВИТЬКДАТЕ(ОсновныеНачисления.ДатаНачалаСобытия, ДЕНЬ, 1) >= ГрафикиРаботыПоВидамВремени.Дата)
		|					И ОсновныеНачисления.ПериодДействияКонец >= ГрафикиРаботыПоВидамВремени.Дата
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ФактическийПериодДействияЗаписей.НомерСтроки КАК НомерСтроки,
		|					СУММА(ВЫБОР
		|							КОГДА ФактическийПериодДействияЗаписей.ПериодДействияНачало = ФактическийПериодДействияЗаписей.ДатаНачалаСобытия
		|								ТОГДА ВЫБОР
		|										КОГДА ФактическийПериодДействияЗаписей.ПериодДействияКонец >= ДОБАВИТЬКДАТЕ(ФактическийПериодДействияЗаписей.ДатаНачалаСобытия, ДЕНЬ, 1)
		|											ТОГДА 2
		|										ИНАЧЕ 1
		|									КОНЕЦ
		|							КОГДА ФактическийПериодДействияЗаписей.ПериодДействияНачало > ДОБАВИТЬКДАТЕ(ФактическийПериодДействияЗаписей.ДатаНачалаСобытия, ДЕНЬ, 1)
		|								ТОГДА 0
		|							ИНАЧЕ 1
		|						КОНЕЦ) КАК ДнейЗаСчетРаботодателя,
		|					СУММА(РАЗНОСТЬДАТ(ФактическийПериодДействияЗаписей.ПериодДействияНачало, НАЧАЛОПЕРИОДА(ФактическийПериодДействияЗаписей.ПериодДействияКонец, ДЕНЬ), ДЕНЬ) + 1) КАК КалендарныхДней
		|				ИЗ
		|					РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|							ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|								И Регистратор = &Регистратор
		|								И (НЕ Сторно)
		|								И ДатаНачалаСобытия >= &ДатаЗакона255ФЗ) КАК ФактическийПериодДействияЗаписей
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ФактическийПериодДействияЗаписей.НомерСтроки) КАК ФактическийПериодДействияЗаписей
		|				ПО ОсновныеНачисления.НомерСтроки = ФактическийПериодДействияЗаписей.НомерСтроки
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОсновныеНачисления.Регистратор,
		|			ОсновныеНачисления.ВидУчетаВремени,
		|			ОсновныеНачисления.ДатаНачалаСобытия,
		|			ОсновныеНачисления.ПериодДействияНачало,
		|			ОсновныеНачисления.ПериодДействияКонец,
		|			ОсновныеНачисления.НормаЧасов,
		|			ОсновныеНачисления.НормаДней,
		|			ОсновныеНачисления.НомерСтроки,
		|			ФактическийПериодДействияЗаписей.КалендарныхДней,
		|			ФактическийПериодДействияЗаписей.ДнейЗаСчетРаботодателя) КАК ДанныеУчетаБЛ
		|		ПО ДанныеУчета.НомерСтроки = ДанныеУчетаБЛ.НомерСтроки
		|			И ((НЕ ДанныеУчета.Сторно))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтражениеВУчетеСторно КАК ОтражениеВУчетеСторно
		|		ПО ДанныеУчета.НомерСтроки = ОтражениеВУчетеСторно.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	СчетДтРазрез,
		|	СчетДт
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.Текст = ТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();
		
		Возврат РезультатЗапроса;
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	&ПериодРегистрации КАК ПериодРегистрации,
		|	ДанныеУчета.НомерСтроки КАК НомерСтроки,
		|	ДанныеУчета.Сотрудник,
		|	ДанныеУчета.ФизЛицо,
		|	ДанныеУчета.ВидРасчета,
		|	ДанныеУчета.Сторно,
		|	ДанныеУчета.Результат,
		|	ЕСТЬNULL(ОтражениеВУчетеСторно.ПериодДействияНачало, ДанныеУчета.ПериодДействияНачало) КАК ПериодДействияНачало,
		|	ЕСТЬNULL(ОтражениеВУчетеСторно.ПериодДействияКонец, ДанныеУчета.ПериодДействияКонец) КАК ПериодДействияКонец,
		|	ДанныеУчета.ГрафикРаботы,
		|	ДанныеУчета.ВидУчетаВремени,
		|	ДанныеУчета.ДатаНачалаСобытия,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ДанныеУчета.ПериодДействия >= &ДатаЗакона255ФЗ
		|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазмерыММОТ.Размер, 0) * (ЕСТЬNULL(ДанныеФПД.КалендарныхДней, 0) / ДЕНЬ(КОНЕЦПЕРИОДА(ДанныеУчета.ПериодДействия, МЕСЯЦ))) КАК ЧИСЛО(10, 2))
		|			КОГДА ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеПериодДействия, 0) = 0
		|				ТОГДА 0
		|			ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(РазмерыММОТ.Размер, 0) / ДанныеГрафика.ОсновноеЗначениеПериодДействия * ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия, 0) КАК ЧИСЛО(10, 2))
		|		КОНЕЦ, 0) КАК ВПределахММОТ,
		|	ЕСТЬNULL(ДанныеУчетаБЛ.ДоляБЛЗаСчетРаботодателя, 0) КАК ДоляБЛЗаСчетРаботодателя,
		|	ДанныеУчета.ВидРасчета.Наименование,
		|	ЛОЖЬ КАК ЭтоЕНВД,
		|	ОтражениеВУчетеСторно.КодДоходаЕСН КАК КодДоходаЕСН,
		|	ОтражениеВУчетеСторно.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	ОтражениеВУчетеСторно.СчетДт,
		|	ОтражениеВУчетеСторно.СубконтоДт1,
		|	ОтражениеВУчетеСторно.СубконтоДт2,
		|	ОтражениеВУчетеСторно.СубконтоДт3,
		|	ОтражениеВУчетеСторно.СчетКт,
		|	ОтражениеВУчетеСторно.СубконтоКт1,
		|	ОтражениеВУчетеСторно.СубконтоКт2,
		|	ОтражениеВУчетеСторно.СубконтоКт3,
		|	ОтражениеВУчетеСторно.СчетДтНУ,
		|	ОтражениеВУчетеСторно.СубконтоДтНУ1,
		|	ОтражениеВУчетеСторно.СубконтоДтНУ2,
		|	ОтражениеВУчетеСторно.СубконтоДтНУ3,
		|	ОтражениеВУчетеСторно.СчетКтНУ,
		|	ОтражениеВУчетеСторно.СубконтоКтНУ1,
		|	ОтражениеВУчетеСторно.СубконтоКтНУ2,
		|	ОтражениеВУчетеСторно.СубконтоКтНУ3,
		|	ОтражениеВУчетеСторно.СчетКтУСН,
		|	ОтражениеВУчетеСторно.ОтражениеВУСН,
		|	ОтражениеВУчетеСторно.Результат КАК РезультатСторно
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|		ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|		ОсновныеНачисления.ФизЛицо КАК ФизЛицо,
		|		ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
		|		ОсновныеНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|		ОсновныеНачисления.Результат КАК Результат,
		|		ОсновныеНачисления.ПериодДействия КАК ПериодДействия,
		|		ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|		ОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|		ОсновныеНачисления.Сторно КАК Сторно,
		|		ОсновныеНачисления.ГрафикРаботы КАК ГрафикРаботы,
		|		ОсновныеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
		|		ОсновныеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|	ГДЕ
		|		ОсновныеНачисления.Регистратор = &Регистратор
		|		И ОсновныеНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)) КАК ДанныеУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДатыАктуальностиММОТ.Регистратор КАК Регистратор,
		|			ДатыАктуальностиММОТ.НомерСтроки КАК ОсновнойНомерСтроки,
		|			МинимальнаяОплатаТрудаРФ.Размер КАК Размер
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ОсновныеНачисления.Регистратор КАК Регистратор,
		|				ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|				МАКСИМУМ(МинимальнаяОплатаТрудаРФ.Период) КАК ДатаАктуальности
		|			ИЗ
		|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
		|					ПО (МинимальнаяОплатаТрудаРФ.Период <= ОсновныеНачисления.ПериодДействияНачало)
		|			ГДЕ
		|				ОсновныеНачисления.Регистратор = &Регистратор
		|				И ОсновныеНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|				И (НЕ ОсновныеНачисления.Сторно)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ОсновныеНачисления.НомерСтроки,
		|				ОсновныеНачисления.Регистратор) КАК ДатыАктуальностиММОТ
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
		|				ПО (МинимальнаяОплатаТрудаРФ.Период = ДатыАктуальностиММОТ.ДатаАктуальности)) КАК РазмерыММОТ
		|		ПО ДанныеУчета.НомерСтроки = РазмерыММОТ.ОсновнойНомерСтроки
		|			И ((НЕ ДанныеУчета.Сторно))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ДанныеГрафика(
		|				ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|					И (НЕ Сторно)
		|					И Регистратор = &Регистратор) КАК ДанныеГрафика
		|		ПО ДанныеУчета.НомерСтроки = ДанныеГрафика.НомерСтроки
		|			И ((НЕ ДанныеУчета.Сторно))
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ФактическийПериодДействияЗаписей.НомерСтроки КАК НомерСтроки,
		|			СУММА(РАЗНОСТЬДАТ(ФактическийПериодДействияЗаписей.ПериодДействияНачало, НАЧАЛОПЕРИОДА(ФактическийПериодДействияЗаписей.ПериодДействияКонец, ДЕНЬ), ДЕНЬ) + 1) КАК КалендарныхДней
		|		ИЗ
		|			РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|					ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|						И (НЕ Сторно)
		|						И Регистратор = &Регистратор) КАК ФактическийПериодДействияЗаписей
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ФактическийПериодДействияЗаписей.НомерСтроки) КАК ДанныеФПД
		|		ПО ДанныеУчета.НомерСтроки = ДанныеФПД.НомерСтроки
		|			И ((НЕ ДанныеУчета.Сторно))
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОсновныеНачисления.Регистратор КАК Регистратор,
		|			ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|			ЕСТЬNULL(ВЫБОР
		|					КОГДА ОсновныеНачисления.ДатаНачалаСобытия >= &ДатаЗакона255ФЗ
		|						ТОГДА ФактическийПериодДействияЗаписей.ДнейЗаСчетРаботодателя / ФактическийПериодДействияЗаписей.КалендарныхДней
		|					КОГДА ВЫБОР
		|							КОГДА ОсновныеНачисления.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|								ТОГДА ОсновныеНачисления.НормаДней
		|							ИНАЧЕ ОсновныеНачисления.НормаЧасов
		|						КОНЕЦ = 0
		|						ТОГДА 0
		|					ИНАЧЕ СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) / ВЫБОР
		|							КОГДА ОсновныеНачисления.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|								ТОГДА ОсновныеНачисления.НормаДней
		|							ИНАЧЕ ОсновныеНачисления.НормаЧасов
		|						КОНЕЦ
		|				КОНЕЦ, 0) КАК ДоляБЛЗаСчетРаботодателя
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ОсновныеНачисления.Регистратор КАК Регистратор,
		|				ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|				ОсновныеНачисления.ПериодДействия КАК ПериодДействия,
		|				ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|				ОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|				ОсновныеНачисления.ГрафикРаботы КАК ГрафикРаботы,
		|				ОсновныеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
		|				ОсновныеНачисления.НормаДней КАК НормаДней,
		|				ОсновныеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|				ОсновныеНачисления.НормаЧасов КАК НормаЧасов
		|			ИЗ
		|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|			ГДЕ
		|				ОсновныеНачисления.Регистратор = &Регистратор
		|				И ОсновныеНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|				И РАЗНОСТЬДАТ(ОсновныеНачисления.ДатаНачалаСобытия, ОсновныеНачисления.ПериодДействияНачало, ДЕНЬ) < 2
		|				И ОсновныеНачисления.ДатаНачалаСобытия >= &ДатаЗакона202ФЗ
		|				И (НЕ ОсновныеНачисления.Сторно)) КАК ОсновныеНачисления
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|				ПО ОсновныеНачисления.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|					И ОсновныеНачисления.ВидУчетаВремени = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
		|					И (ОсновныеНачисления.ПериодДействия < &ДатаЗакона255ФЗ)
		|					И ОсновныеНачисления.ПериодДействияНачало <= ГрафикиРаботыПоВидамВремени.Дата
		|					И (ДОБАВИТЬКДАТЕ(ОсновныеНачисления.ДатаНачалаСобытия, ДЕНЬ, 1) >= ГрафикиРаботыПоВидамВремени.Дата)
		|					И ОсновныеНачисления.ПериодДействияКонец >= ГрафикиРаботыПоВидамВремени.Дата
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ФактическийПериодДействияЗаписей.НомерСтроки КАК НомерСтроки,
		|					СУММА(ВЫБОР
		|							КОГДА ФактическийПериодДействияЗаписей.ПериодДействияНачало = ФактическийПериодДействияЗаписей.ДатаНачалаСобытия
		|								ТОГДА ВЫБОР
		|										КОГДА ФактическийПериодДействияЗаписей.ПериодДействияКонец >= ДОБАВИТЬКДАТЕ(ФактическийПериодДействияЗаписей.ДатаНачалаСобытия, ДЕНЬ, 1)
		|											ТОГДА 2
		|										ИНАЧЕ 1
		|									КОНЕЦ
		|							КОГДА ФактическийПериодДействияЗаписей.ПериодДействияНачало > ДОБАВИТЬКДАТЕ(ФактическийПериодДействияЗаписей.ДатаНачалаСобытия, ДЕНЬ, 1)
		|								ТОГДА 0
		|							ИНАЧЕ 1
		|						КОНЕЦ) КАК ДнейЗаСчетРаботодателя,
		|					СУММА(РАЗНОСТЬДАТ(ФактическийПериодДействияЗаписей.ПериодДействияНачало, НАЧАЛОПЕРИОДА(ФактическийПериодДействияЗаписей.ПериодДействияКонец, ДЕНЬ), ДЕНЬ) + 1) КАК КалендарныхДней
		|				ИЗ
		|					РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|							ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|								И (НЕ Сторно)
		|								И Регистратор = &Регистратор
		|								И ДатаНачалаСобытия >= &ДатаЗакона255ФЗ) КАК ФактическийПериодДействияЗаписей
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ФактическийПериодДействияЗаписей.НомерСтроки) КАК ФактическийПериодДействияЗаписей
		|				ПО ОсновныеНачисления.НомерСтроки = ФактическийПериодДействияЗаписей.НомерСтроки
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОсновныеНачисления.Регистратор,
		|			ОсновныеНачисления.ВидУчетаВремени,
		|			ОсновныеНачисления.ДатаНачалаСобытия,
		|			ОсновныеНачисления.ПериодДействияНачало,
		|			ОсновныеНачисления.ПериодДействияКонец,
		|			ОсновныеНачисления.НормаЧасов,
		|			ОсновныеНачисления.НормаДней,
		|			ОсновныеНачисления.НомерСтроки,
		|			ФактическийПериодДействияЗаписей.КалендарныхДней,
		|			ФактическийПериодДействияЗаписей.ДнейЗаСчетРаботодателя) КАК ДанныеУчетаБЛ
		|		ПО ДанныеУчета.НомерСтроки = ДанныеУчетаБЛ.НомерСтроки
		|			И ((НЕ ДанныеУчета.Сторно))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтражениеВУчетеСторно КАК ОтражениеВУчетеСторно
		|		ПО ДанныеУчета.НомерСтроки = ОтражениеВУчетеСторно.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	ОтражениеВУчетеСторно.СчетДт
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.Текст = ТекстЗапроса;
	
		Возврат Запрос.Выполнить();
		
	КонецЕсли;	
	
КонецФункции  // ПолучитьДанныеУчета

// создает строку таблицы данных учета
// 
// Параметры:
//	ДанныеУчета - спозиционированная выборка по результату запроса
//	НаборЗаписей
//
Функция СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей)
	
	СтрокаДанных = НаборЗаписей.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаДанных,ДанныеУчета,"Результат,ПериодДействияНачало, ПериодДействияКонец, Сторно");
		                                                    
	Возврат СтрокаДанных;
	
КонецФункции // СоздатьСтрокуДвижений()

Функция ПолучитьВидУчетаВремени(Сотрудник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
    Запрос.УстановитьПараметр("Дата",	  ПолучитьДатуНачалаСобытия());

	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|						И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|			КОНЕЦ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	КОНЕЦ КАК ВидУчетаВремени
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&Дата,
	|			Сотрудник В
	|					(ВЫБРАТЬ
	|						Сотрудники.Ссылка
	|					ИЗ
	|						Справочник.СотрудникиОрганизаций КАК Сотрудники
	|					ГДЕ
	|						Сотрудники.Ссылка = &Сотрудник)
	|				И ВЫБОР
	|					КОГДА ПериодЗавершения <= &Дата
	|							И ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА ПричинаИзмененияСостоянияЗавершения
	|					ИНАЧЕ ПричинаИзмененияСостояния
	|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизацийСрезПоследних";
	
 	Возврат Запрос.Выполнить().Выгрузить();
	

	
КонецФункции

// Формирует соответствие в котором находятся действующие графики сотрудника 
// на указанные даты
Функция ПолучитьГрафикРаботыСотрудника(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Физлицо",			ВыборкаПоШапкеДокумента.Физлицо);
	Запрос.УстановитьПараметр("Сотрудник",			ВыборкаПоШапкеДокумента.Сотрудник);
	Запрос.УстановитьПараметр("ВидУчетаВремени",	ВыборкаПоШапкеДокумента.ВидУчетаВремени);


	Запрос.УстановитьПараметр("Дата",				ВыборкаПоШапкеДокумента.ДатаНачалаСобытия);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ВыборкаПоШапкеДокумента.Организация);
	//Запрос.УстановитьПараметр("ПоВсемМестамРаботы",	ВыборкаПоШапкеДокумента.ДатаНачалаСобытия >= мДатаЗакона180ФЗ);
	Запрос.УстановитьПараметр("ВидРасчета",			ВыборкаПоШапкеДокумента.ВидРасчета);
	Запрос.УстановитьПараметр("РасчетПоКалендарнымДням",ВыборкаПоШапкеДокумента.ДатаНачалаСобытия >= мДатаЗакона255ФЗ);

	НачМесяца = НачалоМесяца(ДатаНачала);
	ДатыПоМесяцамТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период
	|ПОМЕСТИТЬ ВТДатыПоМесяцам";
	Пока НачМесяца < НачалоМесяца(ДатаОкончания) Цикл
		НачМесяца = НачалоМесяца(КонецМесяца(НачМесяца) + 1);
		ДатыПоМесяцамТекст = ДатыПоМесяцамТекст +"
		|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	ДатыПоМесяцамТекст = ДатыПоМесяцамТекст + "
	|ИНДЕКСИРОВАТЬ ПО Период";
	
	Запрос.Текст = ДатыПоМесяцамТекст;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокДат.Период КАК Период,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	//vvv
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность
	|	КОНЕЦ КАК Должность,
	//
	//|	ВЫБОР
	//|		КОГДА &РасчетПоКалендарнымДням
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	//|		КОГДА ВЫБОР
	//|				КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	//|						И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|					ТОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	//|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	//|			КОНЕЦ
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	//|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	//|	КОНЕЦ КАК ВидУчетаВремени,
	|	&ВидУчетаВремени КАК ВидУчетаВремени,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикПолногоРабочегоВремени
	|ПОМЕСТИТЬ ВТСотрудникиДаты
	|ИЗ
	|	ВТДатыПоМесяцам КАК СписокДат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&Дата,
	|				Сотрудник В
	|					(ВЫБРАТЬ
	|						Сотрудники.Ссылка
	|					ИЗ
	|						Справочник.СотрудникиОрганизаций КАК Сотрудники
	|					ГДЕ
	|						Сотрудники.Ссылка = &Сотрудник
	|						И Сотрудники.Организация = &ГоловнаяОрганизация)) КАК РаботникиОрганизацийСрезПоследних
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|					И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник";
	Запрос.Выполнить();

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыДействия.Период КАК Период,
	|	ГрафикиРаботыПоВидамВремени.План,
	|	ПериодыДействия.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТДанныеИндивидуальныхГрафиковИТабелей
	|ИЗ
	|	ВТСотрудникиДаты КАК ПериодыДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ПериодыДействия.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И ПериодыДействия.Период = ГрафикиРаботыПоВидамВремени.Месяц
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.План ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыДействия.Период КАК Период,
	|	ПериодыДействия.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафикиРаботы
	|ИЗ
	|	ВТСотрудникиДаты КАК ПериодыДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО ПериодыДействия.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И ПериодыДействия.Период = СводныеИндивидуальныеГрафики.Месяц
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыДействия.Сотрудник КАК Сотрудник,
	|	ПериодыДействия.Сотрудник.ВидЗанятости КАК ВидЗанятостиСотрудника,
	|	ПериодыДействия.Период КАК Месяц,
	|	ПериодыДействия.ВидУчетаВремени,
	|	ПериодыДействия.ПодразделениеОрганизации,
	//vvv
	|	ПериодыДействия.Должность,
	//
	|	ВЫБОР
	|		КОГДА ИндивидуальныеГрафикиРаботы.Период ЕСТЬ NULL 
	|				И ТабелиУчетаВремениПоСотруднику.Период ЕСТЬ NULL 
	|			ТОГДА ПериодыДействия.ГрафикРаботы
	|		ИНАЧЕ ПериодыДействия.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА ИндивидуальныеГрафикиРаботы.Период ЕСТЬ NULL 
	|				И СводныеИндивидуальныеГрафикиРаботы.Период ЕСТЬ NULL 
	|				И ТабелиУчетаВремениПоСотруднику.Период ЕСТЬ НЕ NULL 
	|			ТОГДА ПериодыДействия.ГрафикРаботы
	|		КОГДА ПериодыДействия.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|				И (ИндивидуальныеГрафикиРаботы.Период ЕСТЬ НЕ NULL 
	|					ИЛИ СводныеИндивидуальныеГрафикиРаботы.Период ЕСТЬ НЕ NULL )
	|			ТОГДА ПериодыДействия.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|	КОНЕЦ КАК ГрафикРаботыНорма
	|ИЗ
	|	ВТСотрудникиДаты КАК ПериодыДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеИндивидуальныеГрафикиРаботы КАК СводныеИндивидуальныеГрафикиРаботы
	|		ПО ПериодыДействия.Период = СводныеИндивидуальныеГрафикиРаботы.Период
	|			И ПериодыДействия.Сотрудник = СводныеИндивидуальныеГрафикиРаботы.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеИндивидуальныхГрафиковИТабелей КАК ИндивидуальныеГрафикиРаботы
	|		ПО ПериодыДействия.Период = ИндивидуальныеГрафикиРаботы.Период
	|			И ПериодыДействия.Сотрудник = ИндивидуальныеГрафикиРаботы.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеИндивидуальныхГрафиковИТабелей КАК ТабелиУчетаВремениПоСотруднику
	|		ПО ПериодыДействия.Период = ТабелиУчетаВремениПоСотруднику.Период
	|			И ((НЕ ТабелиУчетаВремениПоСотруднику.План))
	|			И ПериодыДействия.Сотрудник = ТабелиУчетаВремениПоСотруднику.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	Сотрудник";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьГрафикРаботыСотрудника()

#Если Клиент Тогда

// Формирует оборот листка нетрудоспособности
//
// Параметры
//	Нет.
//
// Возвращаемое значение:
//	табличный документ
//
Функция ПечатьОборотаБольничного()
		
	ДатаСобытия = ПолучитьДатуНачалаСобытия();
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("Сотрудник",			 Сотрудник);
	Запрос.УстановитьПараметр("ФизЛицо",			 Сотрудник.Физлицо);
	Запрос.УстановитьПараметр("ДокументСсылка",		 Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	 ДатаСобытия);
	Запрос.УстановитьПараметр("ДатаЗакона255ФЗ",	 мДатаЗакона255ФЗ);
	Запрос.УстановитьПараметр("МесяцСобытия",		 НачалоМесяца(ДатаСобытия));
	Запрос.УстановитьПараметр("ДатаНачала",			 ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",		 ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаНарушенияРежима", ДатаНарушенияРежима);
	
	ДанныеОДокументеТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументБЛ.Ссылка,
	|	ДокументБЛ.Сотрудник.Физлицо КАК Физлицо,
	|	ДокументБЛ.Организация,
	|	ВЫРАЗИТЬ(ДокументБЛ.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НаименованиеОрганизации,
	|	ДокументБЛ.ДатаНачала,
	|	ДокументБЛ.ДатаОкончания,
	|	ДокументБЛ.НомерВходящегоДокумента,
	|	ДокументБЛ.СерияВходящегоДокумента,
	|	ДокументБЛ.ПроцентОплаты,
	|	ВЫБОР
	|		КОГДА ДокументБЛ.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам)
	|			ТОГДА ""по беременности и родам""
	|		ИНАЧЕ ""по временной нетрудоспособности""
	|	КОНЕЦ КАК ПричинаНетрудоспособности,
	|	ЕСТЬNULL(ФИОФизлица.Фамилия + "" "" + ФИОФизлица.Имя + "" "" + ФИОФизлица.Отчество, ДокументБЛ.Сотрудник.Наименование) КАК ФИОРаботника,
	|	ВЫБОР
	|		КОГДА ДокументБЛ.Сотрудник.Физлицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|			ТОГДА ""Не работала""
	|		ИНАЧЕ ""Не работал""
	|	КОНЕЦ КАК СловаНеРаботал,
	|	ВЫБОР
	|		КОГДА ПараметрыВидаРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору)
	|			ТОГДА ПараметрыВидаРасчета.ПериодРасчетаСреднегоЗаработка
	|		ИНАЧЕ 12
	|	КОНЕЦ КАК ПериодРасчетаСреднегоЗаработка,
	|	ДокументБЛ.Сотрудник.Код КАК ТабельныйНомер,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.Наименование
	|	КОНЕЦ КАК ПодразделениеНаименование,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность.Наименование
	|	КОНЕЦ КАК ДолжностьНаименование,
	|	ВЫБОР
	|		КОГДА &ДатаНачалаСобытия < &ДатаЗакона255ФЗ
	|				И ЕСТЬNULL(ВЫБОР
	|						КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|								И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|						ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|					КОНЕЦ, ЛОЖЬ)
	|			ТОГДА ""часов""
	|		ИНАЧЕ ""дней""
	|	КОНЕЦ КАК СловаДней,
	|	ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ГрафикРаботы, ВЫБОР
	|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|		КОНЕЦ) КАК ГрафикРаботы
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту КАК ДокументБЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаНачалаСобытия, ФизЛицо = &ФизЛицо) КАК ФИОФизлица
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ПараметрыВидаРасчета
	|		ПО (ПараметрыВидаРасчета.Ссылка = ДокументБЛ.ВидРасчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы
	|		ИЗ
	|			РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ГДЕ
	|			ГрафикиРаботыПоВидамВремени.Месяц = &МесяцСобытия
	|			И ГрафикиРаботыПоВидамВремени.План
	|			И ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &Сотрудник) КАК ГрафикиРаботыПоВидамВремени
	|		ПО ДокументБЛ.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|ГДЕ
	|	ДокументБЛ.Ссылка = &ДокументСсылка";
	
	ВыходныеДниТекст =
	"ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.Дата
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	И ГрафикиРаботыПоВидамВремени.План
	|	И ГрафикиРаботыПоВидамВремени.ОсновноеЗначение = 0
	|	И ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы";
	
	// РазмерММОТ
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
	//		Размер - размер ММОТ
	//	Описание:
	//		получает размер ММОТ для каждой строки начислений
	//
	РазмерММОТТекст = 
	"ВЫБРАТЬ
	|	ДатыАктуальностиММОТ.НомерСтроки КАК ОсновнойНомерСтроки,
	|	МинимальнаяОплатаТрудаРФ.Размер КАК Размер
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(МинимальнаяОплатаТрудаРФ.Период) КАК ДатаАктуальности
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
	|			ПО МинимальнаяОплатаТрудаРФ.Период <= Основной.ПериодДействияНачало
	|	
	|	ГДЕ
	|		Основной.Регистратор = &ДокументСсылка И
	|		Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки) КАК ДатыАктуальностиММОТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
	|		ПО МинимальнаяОплатаТрудаРФ.Период = ДатыАктуальностиММОТ.ДатаАктуальности";
	
	// РазмерОграниченияПособия
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
	//		Размер - размер ограничения
	//	Описание:
	//		получает размер ограничения пособия для каждой строки начислений
	//
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		РазмерОграниченияПособияТекст = 
		"ВЫБРАТЬ
		|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
		|	РазмерОграниченияПособияПоНетрудоспособности.РазмерПоБеременности КАК Размер
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		МАКСИМУМ(РазмерОграниченияПособияПоНетрудоспособности.Период) КАК ДатаАктуальности
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
		|			ПО РазмерОграниченияПособияПоНетрудоспособности.Период <= Основной.ПериодДействияНачало
		|	ГДЕ
		|		Основной.Регистратор = &ДокументСсылка
		|		И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки) КАК ДатыАктуальности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
		|		ПО РазмерОграниченияПособияПоНетрудоспособности.Период = ДатыАктуальности.ДатаАктуальности";
	Иначе
		РазмерОграниченияПособияТекст = 
		"ВЫБРАТЬ
		|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
		|	РазмерОграниченияПособияПоНетрудоспособности.Размер КАК Размер
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		МАКСИМУМ(РазмерОграниченияПособияПоНетрудоспособности.Период) КАК ДатаАктуальности
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
		|			ПО РазмерОграниченияПособияПоНетрудоспособности.Период <= Основной.ПериодДействияНачало
		|	ГДЕ
		|		Основной.Регистратор = &ДокументСсылка
		|		И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки) КАК ДатыАктуальности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
		|		ПО РазмерОграниченияПособияПоНетрудоспособности.Период = ДатыАктуальности.ДатаАктуальности";
	КонецЕсли;
	
	СводныеИндивидуальныеГрафикиТекст = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|			ТОГДА СводныеИндивидуальныеГрафики.Дней
	|		КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|			ТОГДА СводныеИндивидуальныеГрафики.Часов
	|		КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовВечерних
	|		КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовНочных
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаВремени,
	|	ВЫБОР
	|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|				И СводныеИндивидуальныеГрафики.Дней ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаВводаИндивидуальногоГрафикаРаботы
	|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафики
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО Основной.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И СводныеИндивидуальныеГрафики.Месяц = Основной.ПериодДействия
	|ГДЕ
	|	Основной.Регистратор = &ДокументСсылка
	|	И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = СводныеИндивидуальныеГрафикиТекст;
	Запрос.Выполнить();
	СводныеИндивидуальныеГрафикиТекст = "ВТСводныеИндивидуальныеГрафики";
	
	Если ДатаСобытия < мДатаЗакона255ФЗ Тогда
		
		ОграничениеВРазмереММОТТекст = 
		"ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
		|							ТОГДА 0
		|						ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаВремени, ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия, 0))
		|					КОНЕЦ = 0
		|					ТОГДА 0
		|				ИНАЧЕ ЕСТЬNULL(РазмерММОТ.Размер, 0) / ВЫБОР
		|						КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
		|							ТОГДА 0
		|						ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаВремени, ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия, 0))
		|			КОНЕЦ * ВЫБОР
		|					КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.КодПоОКАТО <> """"
		|						ТОГДА ВЫБОР
		|								КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ > 1
		|								ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ
		|								ИНАЧЕ 1
		|							КОНЕЦ
		|					КОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ > 1
		|						ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ
		|					ИНАЧЕ 1
		|				КОНЕЦ КОНЕЦ КАК ЧИСЛО(15, 2))";
		
		ОграничениеТекст = 
		"ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
		|							ТОГДА 0
		|						ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаВремени, ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия, 0))
		|					КОНЕЦ = 0
		|						ТОГДА 0
		|				ИНАЧЕ ЕСТЬNULL(РазмерОграниченияПособия.Размер, 0) / ВЫБОР
		|						КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
		|							ТОГДА 0
		|						ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаВремени, ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия, 0))
		|					КОНЕЦ
		|			КОНЕЦ * ВЫБОР
		|					КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.КодПоОКАТО <> """"
		|						ТОГДА ВЫБОР
		|								КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ > 1
		|								ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ
		|								ИНАЧЕ 1
		|							КОНЕЦ
		|					КОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ > 1
		|						ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ
		|					ИНАЧЕ 1
		|				КОНЕЦ КАК ЧИСЛО(15, 2))";
	
		РасчетПособияТекст = 
		"ВЫБРАТЬ
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|			ТОГДА ОсновныеНачисленияРаботниковОрганизаций.НормаДней
		|		ИНАЧЕ ОсновныеНачисленияРаботниковОрганизаций.НормаЧасов
		|	КОНЕЦ КАК ОплаченоВремени,
		|	ОсновныеНачисленияРаботниковОрганизаций.Показатель1 КАК РазмерВПроцентах,
		|	ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Показатель1 * &Средний / 100 КАК ЧИСЛО(15, 2)) КАК РазмерВРублях,";
		Если ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ Тогда
			РасчетПособияТекст = РасчетПособияТекст + "
			|	" + ОграничениеВРазмереММОТТекст + " КАК ОграничениеПособия,"
		ИначеЕсли ЗначениеЗаполнено(ДатаНарушенияРежима) Тогда
			Если ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
				РасчетПособияТекст = РасчетПособияТекст + "
				|	ВЫБОР
				|		КОГДА &ДатаНарушенияРежима <= ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало
				|			ТОГДА " + ОграничениеВРазмереММОТТекст + "
				|		ИНАЧЕ " + ОграничениеТекст + "
				|	КОНЕЦ КАК ОграничениеПособия,";
			Иначе
				РасчетПособияТекст = РасчетПособияТекст + "
				|	ВЫБОР
				|		КОГДА &ДатаНарушенияРежима <= ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало
				|			ТОГДА " + ОграничениеВРазмереММОТТекст + "
				|		ИНАЧЕ ""-""
				|	КОНЕЦ КАК ОграничениеПособия,";
			КонецЕсли;
		ИначеЕсли ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
			РасчетПособияТекст = РасчетПособияТекст + "
			|	" + ОграничениеТекст + " КАК ОграничениеПособия,"
		Иначе
			РасчетПособияТекст = РасчетПособияТекст + "
			|	""-""  КАК ОграничениеПособия,"
		КонецЕсли;
		РасчетПособияТекст = РасчетПособияТекст + "
		|	ОсновныеНачисленияРаботниковОрганизаций.Результат
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
		|		// присоединяем данные о размере пособия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ДанныеГрафика(
		|		Регистратор = &ДокументСсылка
		|			И ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)) КАК ДанныеГрафика
		|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = ДанныеГрафика.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
		|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = СводныеИндивидуальныеГрафики.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + РазмерММОТТекст + ") КАК РазмерММОТ
		|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = РазмерММОТ.ОсновнойНомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + РазмерОграниченияПособияТекст + ") КАК РазмерОграниченияПособия
		|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = РазмерОграниченияПособия.ОсновнойНомерСтроки
		|ГДЕ
		|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &ДокументСсылка
		|	И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодДействияНачало";
		
	Иначе
		
		ОграничениеВРазмереММОТТекст = 
		"ВЫРАЗИТЬ(ЕСТЬNULL(РазмерММОТ.Размер, 0) / ДЕНЬ(КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, МЕСЯЦ)) * ВЫБОР
		|				КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.КодПоОКАТО <> """"
		|						ТОГДА ВЫБОР
		|								КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ > 1
		|								ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ
		|								ИНАЧЕ 1
		|							КОНЕЦ
		|				КОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ > 1
		|					ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ
		|				ИНАЧЕ 1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))";
		
		ОграничениеТекст = 
		"ВЫРАЗИТЬ(ЕСТЬNULL(РазмерОграниченияПособия.Размер, 0) / ДЕНЬ(КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, МЕСЯЦ)) * ВЫБОР
		|				КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.КодПоОКАТО <> """"
		|						ТОГДА ВЫБОР
		|								КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ > 1
		|								ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ
		|								ИНАЧЕ 1
		|							КОНЕЦ
		|				КОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ > 1
		|					ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ
		|				ИНАЧЕ 1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))";
		
		РасчетПособияТекст = 
		"ВЫБРАТЬ
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец,
		|	КалендарныеДниПособия.ОплачиватьДнейПособия КАК ОплаченоВремени,
		|	ОсновныеНачисленияРаботниковОрганизаций.Показатель1 КАК РазмерВПроцентах,
		|	ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Показатель1 * &Средний / 100 КАК ЧИСЛО(15, 2)) КАК РазмерВРублях,";
		Если ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ Тогда
			РасчетПособияТекст = РасчетПособияТекст + "
			|	" + ОграничениеВРазмереММОТТекст + " КАК ОграничениеПособия,"
		ИначеЕсли ЗначениеЗаполнено(ДатаНарушенияРежима) Тогда
			Если ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
				РасчетПособияТекст = РасчетПособияТекст + "
				|	ВЫБОР
				|		КОГДА &ДатаНарушенияРежима <= ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало
				|			ТОГДА " + ОграничениеВРазмереММОТТекст + "
				|		ИНАЧЕ " + ОграничениеТекст + "
				|	КОНЕЦ КАК ОграничениеПособия,";
			Иначе
				РасчетПособияТекст = РасчетПособияТекст + "
				|	ВЫБОР
				|		КОГДА &ДатаНарушенияРежима <= ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало
				|			ТОГДА " + ОграничениеВРазмереММОТТекст + "
				|		ИНАЧЕ ""-""
				|	КОНЕЦ КАК ОграничениеПособия,";
			КонецЕсли;
		ИначеЕсли ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
			РасчетПособияТекст = РасчетПособияТекст + "
			|	" + ОграничениеТекст + " КАК ОграничениеПособия,"
		Иначе
			РасчетПособияТекст = РасчетПособияТекст + "
			|	""-""  КАК ОграничениеПособия,"
		КонецЕсли;
		РасчетПособияТекст = РасчетПособияТекст + "
		|	ОсновныеНачисленияРаботниковОрганизаций.Результат
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ФактическийПериодДействия.НомерСтроки КАК НомерСтроки,
		|			СУММА(РАЗНОСТЬДАТ(ФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(ФактическийПериодДействия.ПериодДействияКонец, СЕКУНДА, 1), ДЕНЬ)) КАК ОплачиватьДнейПособия
		|		ИЗ
		|			РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|				ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС))
		|				    И Регистратор = &ДокументСсылка) КАК ФактическийПериодДействия
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ФактическийПериодДействия.Регистратор,
		|			ФактическийПериодДействия.НомерСтроки) КАК КалендарныеДниПособия
		|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = КалендарныеДниПособия.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + РазмерММОТТекст + ") КАК РазмерММОТ
		|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = РазмерММОТ.ОсновнойНомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + РазмерОграниченияПособияТекст + ") КАК РазмерОграниченияПособия
		|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = РазмерОграниченияПособия.ОсновнойНомерСтроки
		|ГДЕ
		|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &ДокументСсылка
		|	И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодДействияНачало";
	КонецЕсли;
	
	ОтражениеТекст = 
	"ВЫБРАТЬ
	|	БУОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	БУОсновныеНачисления.ПериодДействияКонец,
	|	СУММА(БУОсновныеНачисления.Результат) КАК Результат,
	|	РАЗНОСТЬДАТ(БУОсновныеНачисления.ПериодДействияНачало, БУОсновныеНачисления.ПериодДействияКонец, ДЕНЬ) + 1 КАК ДнейПериода,
	|	БУОсновныеНачисления.СчетДт.Код,
	|	БУОсновныеНачисления.СубконтоДт1 КАК СубконтоДт1,
	|	БУОсновныеНачисления.СубконтоДт2 КАК СубконтоДт2,
	|	БУОсновныеНачисления.СубконтоДт3 КАК СубконтоДт3,
	|	ВЫБОР
	|		КОГДА &УСН
	|			ТОГДА БУОсновныеНачисления.ОтражениеВУСН
	|		ИНАЧЕ БУОсновныеНачисления.СчетДтНУ.Код
	|	КОНЕЦ КАК СчетДтНУКод,
	|	ВЫБОР
	|		КОГДА &УСН
	|			ТОГДА """"
	|		ИНАЧЕ БУОсновныеНачисления.СубконтоДтНУ1
	|	КОНЕЦ КАК СубконтоДтНУ1,
	|	ВЫБОР
	|		КОГДА &УСН
	|			ТОГДА """"
	|		ИНАЧЕ БУОсновныеНачисления.СубконтоДтНУ2
	|	КОНЕЦ КАК СубконтоДтНУ2,
	|	ВЫБОР
	|		КОГДА &УСН
	|			ТОГДА """"
	|		ИНАЧЕ БУОсновныеНачисления.СубконтоДтНУ3
	|	КОНЕЦ КАК СубконтоДтНУ3
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.БУОсновныеНачисления КАК БУОсновныеНачисления
	|		ПО ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = БУОсновныеНачисления.ВидРасчета
	|			И ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия = БУОсновныеНачисления.ПериодДействия
	|			И ОсновныеНачисленияРаботниковОрганизаций.Сотрудник = БУОсновныеНачисления.Сотрудник
	|			И (БУОсновныеНачисления.ПериодДействияНачало МЕЖДУ ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало И ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец)
	|			И (БУОсновныеНачисления.ПериодДействияКонец МЕЖДУ ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало И ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец)
	|			И (БУОсновныеНачисления.ПериодРегистрации <= &ПериодРегистрации)
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &ДокументСсылка
	|	И (НЕ ОсновныеНачисленияРаботниковОрганизаций.Сторно)
	|	И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = &ВидРасчетаКОплате
	|
	|СГРУППИРОВАТЬ ПО
	|	БУОсновныеНачисления.ПериодДействияНачало,
	|	БУОсновныеНачисления.ПериодДействияКонец,
	|	БУОсновныеНачисления.СубконтоДт3,
	|	БУОсновныеНачисления.СубконтоДтНУ1,
	|	БУОсновныеНачисления.СубконтоДтНУ2,
	|	БУОсновныеНачисления.СубконтоДтНУ3,
	|	БУОсновныеНачисления.СчетДт.Код,
	|	ВЫБОР
	|		КОГДА &УСН
	|			ТОГДА БУОсновныеНачисления.ОтражениеВУСН
	|		ИНАЧЕ БУОсновныеНачисления.СчетДтНУ.Код
	|	КОНЕЦ,
	|	БУОсновныеНачисления.СубконтоДт1,
	|	БУОсновныеНачисления.СубконтоДт2,
	|	БУОсновныеНачисления.СубконтоДт3
	|
	|ИМЕЮЩИЕ
	|	СУММА(БУОсновныеНачисления.Результат) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодДействияНачало";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НачислениеПоБольничномуЛисту_ОборотЛисткаНетрудоспособности";
	
	Макет = ПолучитьМакет("ОборотЛисткаНетрудоспособности");
	СекцияШапка = Макет.ПолучитьОбласть("Шапка");
	СекцияРасчетПособияШапка = Макет.ПолучитьОбласть("РасчетПособияШапка");
	СекцияРасчетПособияСтрока = Макет.ПолучитьОбласть("РасчетПособияСтрока");
	СекцияРасчетПособияИтог = Макет.ПолучитьОбласть("РасчетПособияИтог");
	СекцияОтражениеПособияСтрока = Макет.ПолучитьОбласть("ОтражениеПособияСтрока");
	
	// определим налоговый режим
	БухгалтерскийИНалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), КонецМесяца(ПериодРегистрации), Организация);
	УчетнаяПолитика = глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете")[КонецМесяца(ПериодРегистрации)][Организация];
	мУСН = УчетнаяПолитика.УСН;
	мОбъектНалогообложенияУСН = УчетнаяПолитика.ОбъектНалогообложенияУСН;
	мЕНВД = УчетнаяПолитика.ОрганизацияЯвляетсяПлательщикомЕНВД;
	мФСС_БЛ = УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС;
	
	ЭтоПереходныйПериодПоЗакону255ФЗ = ДатаСобытия < мДатаЗакона255ФЗ И ДатаОкончания >= мДатаЗакона255ФЗ И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве;
	
	Запрос.Текст = ДанныеОДокументеТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СекцияШапка.Параметры,Выборка);
	ЗаполнитьЗначенияСвойств(СекцияРасчетПособияШапка.Параметры,Выборка);
	ГрафикРаботы = Выборка.ГрафикРаботы;
	ПериодРасчетаСреднегоЗаработка = Выборка.ПериодРасчетаСреднегоЗаработка;
	ЛетСтажа	= 0;
	МесяцевСтажа= 0;
	ДнейСтажа	= 0;
	ДатаНепрерывногоСтажа = ПроведениеРасчетов.ПолучитьНачалоСтажаДляБольничногоЛиста(ДатаСобытия, Сотрудник.Физлицо, Организация);
	Если ЗначениеЗаполнено(ДатаНепрерывногоСтажа) Тогда
		ОбщегоНазначения.РазобратьРазностьДат(ДатаСобытия, ДатаНепрерывногоСтажа, ЛетСтажа, МесяцевСтажа, ДнейСтажа);
	КонецЕсли;
	СекцияШапка.Параметры.НазваниеСтажа = ?(ДатаСобытия < мДатаЗакона255ФЗ,"Непрерывный","Страховой");
	СекцияШапка.Параметры.ЛетСтажа = ЛетСтажа;
	СекцияШапка.Параметры.ПодписьЛетСтажа = ОбщегоНазначения.ФормаМножественногоЧисла("год","года","лет",ЛетСтажа);
	СекцияШапка.Параметры.МесяцевСтажа = МесяцевСтажа;
	СекцияШапка.Параметры.ПодписьМесяцевСтажа = ОбщегоНазначения.ФормаМножественногоЧисла("месяц","месяца","месяцев",МесяцевСтажа);
	СекцияШапка.Параметры.ДнейСтажа = ДнейСтажа;
	СекцияШапка.Параметры.ПодписьДнейСтажа = ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ДнейСтажа);
	
	ДатыВыходныхДней = "";
	Если ДатаСобытия < мДатаЗакона255ФЗ Тогда
		Запрос.УстановитьПараметр("ГрафикРаботы" , ГрафикРаботы);
		Запрос.Текст = ВыходныеДниТекст;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДатыВыходныхДней = ДатыВыходныхДней + ?(ДатыВыходныхДней = "","","; ") + Формат(Выборка.Дата,"ДЛФ=DD")
		КонецЦикла;
	КонецЕсли;
	СекцияШапка.Параметры.НазваниеДней =  ?(ДатаСобытия < мДатаЗакона255ФЗ,"рабочих","календарных");
	СекцияШапка.Параметры.РабочихДней = ДнейОплаты - ?(ДатаСобытия < мДатаЗакона255ФЗ,Выборка.Количество(),0);
	СекцияШапка.Параметры.ДатыВыходныхДней = ДатыВыходныхДней;
	ТабДокумент.Вывести(СекцияШапка);
	
	СтруктураПоказателей = Неопределено;
	СписокСоставляющихСреднегоЗаработка = Неопределено;
	Если ЭтоПереходныйПериодПоЗакону255ФЗ Тогда
		СписокСоставляющихСреднегоЗаработка = Новый Массив(5); 
		СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
		СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ;
		СписокСоставляющихСреднегоЗаработка[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ;
		СписокСоставляющихСреднегоЗаработка[3] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ;
		СписокСоставляющихСреднегоЗаработка[4] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ;
	КонецЕсли;
	ПечатьРасчетаСреднегоЗаработкаОтчет = ФормированиеПечатныхФорм.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаСобытия, ПериодРасчетаСреднегоЗаработка, "", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС, ?(ДатаСобытия < мДатаЗакона255ФЗ, Неопределено, Ложь), СписокСоставляющихСреднегоЗаработка, Ложь, Ложь, СтруктураПоказателей);
	ОбластьПрямоугольная = ПечатьРасчетаСреднегоЗаработкаОтчет.Область(1, 1, ПечатьРасчетаСреднегоЗаработкаОтчет.ВысотаТаблицы, ПечатьРасчетаСреднегоЗаработкаОтчет.ШиринаТаблицы);
	НачалоНовогоФорматаСтрок = ТабДокумент.ВысотаТаблицы + 1;
	ТабДокумент.Область(НачалоНовогоФорматаСтрок, , НачалоНовогоФорматаСтрок + ПечатьРасчетаСреднегоЗаработкаОтчет.ВысотаТаблицы - 1, ).СоздатьФорматСтрок();
	// назначим ширину колонок у новой области формата строк
	Для Счетчик = 1 По ПечатьРасчетаСреднегоЗаработкаОтчет.ШиринаТаблицы Цикл
		ТабДокумент.Область(НачалоНовогоФорматаСтрок, Счетчик).ШиринаКолонки = ПечатьРасчетаСреднегоЗаработкаОтчет.Область(1, Счетчик).ШиринаКолонки;
	КонецЦикла;
	ТабДокумент.ВставитьОбласть(ОбластьПрямоугольная, ТабДокумент.Область(НачалоНовогоФорматаСтрок, 1));
	
	ТабДокумент.Вывести(СекцияРасчетПособияШапка);
	Запрос.УстановитьПараметр("Средний",Окр(СтруктураПоказателей.Средний,2));
	Запрос.Текст = РасчетПособияТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	НачисленоВсего = 0;
	Пока Выборка.Следующий() Цикл
		НачисленоВсего = НачисленоВсего + Выборка.Результат;
		ЗаполнитьЗначенияСвойств(СекцияРасчетПособияСтрока.Параметры,Выборка);
		ТабДокумент.Вывести(СекцияРасчетПособияСтрока);
	КонецЦикла;
	
	СекцияРасчетПособияИтог.Параметры.НачисленоВсегоПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(НачисленоВсего, Константы.ВалютаРегламентированногоУчета.Получить());
	СекцияРасчетПособияИтог.Параметры.ПериодРегистрации = ПериодРегистрации;
	ТабДокумент.Вывести(СекцияРасчетПособияИтог);
	
	Запрос.Текст = ОтражениеТекст;
	Запрос.УстановитьПараметр("УСН",мУСН);
	Запрос.УстановитьПараметр("ВидРасчетаКОплате", ВидРасчета);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	
	Результат = Запрос.Выполнить();
	
	ТабДокумент.Вывести(Макет.ПолучитьОбласть("ОтражениеВУчетеШапка"));
	Если Результат.Пустой() Тогда
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("НетДанных"));
	Иначе
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("ОтражениеПособияШапка"));
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СекцияОтражениеПособияСтрока.Параметры,Выборка);
			
			СекцияОтражениеПособияСтрока.Параметры.СтрокаСубконтоБУ = ?(ЗначениеЗаполнено(Выборка.СубконтоДт1),Строка(Выборка.СубконтоДт1),"") +
				?(ЗначениеЗаполнено(Выборка.СубконтоДт2), Символы.ПС + Строка(Выборка.СубконтоДт2),"") + 
				?(ЗначениеЗаполнено(Выборка.СубконтоДт3), Символы.ПС+ Строка(Выборка.СубконтоДт3),"") ; 
			СекцияОтражениеПособияСтрока.Параметры.СтрокаСубконтоНУ = ?(ЗначениеЗаполнено(Выборка.СубконтоДтНУ1),Строка(Выборка.СубконтоДтНУ1),"") +
				?(ЗначениеЗаполнено(Выборка.СубконтоДтНУ2), Символы.ПС + Строка(Выборка.СубконтоДтНУ2),"") + 
				?(ЗначениеЗаполнено(Выборка.СубконтоДтНУ3), Символы.ПС + Строка(Выборка.СубконтоДтНУ3),""); 
		
			ТабДокумент.Вывести(СекцияОтражениеПособияСтрока);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат	ТабДокумент
	
КонецФункции // ПечатьОборотаБольничного()

// Формирует оборот листка нетрудоспособности
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   табличный документ
//
Функция ПечатьОборотаБольничногоВПереходныйПериод2007()
		
	ДатаСобытия = ПолучитьДатуНачалаСобытия();
	
	ДанныеОДокументеТекст = 
	"ВЫБРАТЬ
	|	Документ.Ссылка,
	|	Документ.Сотрудник.Физлицо КАК Физлицо,
	|	Документ.Организация,
	|	ВЫРАЗИТЬ(Документ.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НаименованиеОрганизации,
	|	Документ.ДатаНачала,
	|	Документ.ДатаОкончания,
	|	Документ.НомерВходящегоДокумента,
	|	Документ.СерияВходящегоДокумента,
	|	Документ.ПроцентОплаты,
	|	ВЫБОР
	|		КОГДА Документ.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам)
	|			ТОГДА ""по беременности и родам""
	|		ИНАЧЕ ""по временной нетрудоспособности""
	|	КОНЕЦ КАК ПричинаНетрудоспособности,
	|	ЕСТЬNULL(ФИОФизлица.Фамилия + "" "" + ФИОФизлица.Имя + "" "" + ФИОФизлица.Отчество, Документ.Сотрудник.Физлицо.Наименование) КАК ФИОРаботника,
	|	ВЫБОР
	|		КОГДА Документ.Сотрудник.Физлицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|			ТОГДА ""Не работала""
	|		ИНАЧЕ ""Не работал""
	|	КОНЕЦ КАК СловаНеРаботал,
	|	ВЫБОР
	|		КОГДА ПараметрыВидаРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору)
	|			ТОГДА ПараметрыВидаРасчета.ПериодРасчетаСреднегоЗаработка
	|		ИНАЧЕ 12
	|	КОНЕЦ КАК ПериодРасчетаСреднегоЗаработка,
	|	Документ.Сотрудник.Код КАК ТабельныйНомер,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.Наименование
	|	КОНЕЦ КАК ПодразделениеНаименование,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность.Наименование
	|	КОНЕЦ КАК ДолжностьНаименование,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫБОР
	|					КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|							И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|					ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|				КОНЕЦ, ЛОЖЬ)
	|			ТОГДА ""часов""
	|		ИНАЧЕ ""дней""
	|	КОНЕЦ КАК СловаДней,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	Документ.ПроцентОплатыПереходногоПериода
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаНачалаСобытия, ФизЛицо = &ФизЛицо) КАК ФИОФизлица
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ПараметрыВидаРасчета
	|		ПО (ПараметрыВидаРасчета.Ссылка = Документ.ВидРасчета)
	|ГДЕ
	|	Документ.Ссылка = &ДокументСсылка";
	
	ВыходныеДниТекст =
	"ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.Дата
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	И ГрафикиРаботыПоВидамВремени.ОсновноеЗначение = 0
	|	И ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы";
	
	// РазмерММОТ
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
	//		Размер - размер ММОТ
	//	Описание:
	//		получает размер ММОТ для каждой строки начислений
	//
	РазмерММОТТекст = 
	"ВЫБРАТЬ
	|	ДатыАктуальностиММОТ.НомерСтроки КАК ОсновнойНомерСтроки,
	|	МинимальнаяОплатаТрудаРФ.Размер КАК Размер
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(МинимальнаяОплатаТрудаРФ.Период) КАК ДатаАктуальности
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
	|			ПО МинимальнаяОплатаТрудаРФ.Период <= Основной.ПериодДействияНачало
	|	ГДЕ
	|		Основной.Регистратор = &ДокументСсылка
	|		И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки) КАК ДатыАктуальностиММОТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
	|		ПО МинимальнаяОплатаТрудаРФ.Период = ДатыАктуальностиММОТ.ДатаАктуальности";
	
	// РазмерОграниченияПособия
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
	//		Размер - размер ограничения
	//	Описание:
	//		получает размер ограничения пособия для каждой строки начислений
	//
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		РазмерОграниченияПособияТекст = 
		"ВЫБРАТЬ
		|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
		|	РазмерОграниченияПособияПоНетрудоспособности.РазмерПоБеременности КАК Размер
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		МАКСИМУМ(РазмерОграниченияПособияПоНетрудоспособности.Период) КАК ДатаАктуальности
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
		|			ПО РазмерОграниченияПособияПоНетрудоспособности.Период <= Основной.ПериодДействияНачало
		|	ГДЕ
		|		Основной.Регистратор = &ДокументСсылка
		|		И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки) КАК ДатыАктуальности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
		|		ПО РазмерОграниченияПособияПоНетрудоспособности.Период = ДатыАктуальности.ДатаАктуальности";
	Иначе
		РазмерОграниченияПособияТекст = 
		"ВЫБРАТЬ
		|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
		|	РазмерОграниченияПособияПоНетрудоспособности.Размер КАК Размер
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		МАКСИМУМ(РазмерОграниченияПособияПоНетрудоспособности.Период) КАК ДатаАктуальности
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
		|			ПО РазмерОграниченияПособияПоНетрудоспособности.Период <= Основной.ПериодДействияНачало
		|	ГДЕ
		|		Основной.Регистратор = &ДокументСсылка
		|		И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки) КАК ДатыАктуальности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
		|		ПО РазмерОграниченияПособияПоНетрудоспособности.Период = ДатыАктуальности.ДатаАктуальности";
	КонецЕсли;
	
	СводныеИндивидуальныеГрафикиТекст = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|			ТОГДА СводныеИндивидуальныеГрафики.Дней
	|		КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|			ТОГДА СводныеИндивидуальныеГрафики.Часов
	|		КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовВечерних
	|		КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовНочных
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаВремени,
	|	ВЫБОР
	|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|				И СводныеИндивидуальныеГрафики.Дней ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаВводаИндивидуальногоГрафикаРаботы
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО Основной.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И СводныеИндивидуальныеГрафики.Месяц = Основной.ПериодДействия
	|ГДЕ
	|	Основной.Регистратор = &ДокументСсылка
	|	И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)";
	
	РазмерВРубляхТекст = 
	"ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизаций.Показатель1 = 0
	|				ТОГДА ОсновныеНачисленияРаботниковОрганизаций.Показатель1
	|			КОГДА ОсновныеНачисленияРаботниковОрганизаций.Показатель1 = 50
	|				ТОГДА ОсновныеНачисленияРаботниковОрганизаций.Показатель1
	|			ИНАЧЕ &ПроцентОплаты
	|		КОНЕЦ * &Средний / 100 КАК ЧИСЛО(15, 2))";
	
	ОплачиваемоеВремяТекст = 
	"ВЫБОР
	|		КОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|			ТОГДА ОсновныеНачисленияРаботниковОрганизаций.НормаДней
	|		ИНАЧЕ ОсновныеНачисленияРаботниковОрганизаций.НормаЧасов
	|	КОНЕЦ";
	
	ВремяЗаМесяцТекст = 
	"ВЫБОР
	|	КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
	|		ТОГДА 0
	|	ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаВремени, ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия, 0))
	|КОНЕЦ";
	
	ОграничениеВРазмереММОТТекст = 
	"ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
	|							ТОГДА 0
	|						ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаВремени, ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия, 0))
	|					КОНЕЦ = 0
	|					ТОГДА 0
	|				ИНАЧЕ ЕСТЬNULL(РазмерММОТ.Размер, 0) / ВЫБОР
	|						КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
	|							ТОГДА 0
	|						ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаВремени, ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия, 0))
	|			КОНЕЦ * ВЫБОР
	|					КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.КодПоОКАТО <> """"
	|						ТОГДА ВЫБОР
	|								КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ > 1
	|								ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|					КОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ > 1
	|						ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ
	|					ИНАЧЕ 1
	|				КОНЕЦ КОНЕЦ КАК ЧИСЛО(15, 2))";
	
	ОграничениеВРазмереММОТЗаМесяцТекст = 
	"ВЫРАЗИТЬ(ЕСТЬNULL(РазмерММОТ.Размер, 0) * ВЫБОР
	|				КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.КодПоОКАТО <> """"
	|						ТОГДА ВЫБОР
	|								КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ > 1
	|								ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|				КОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ > 1
	|					ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ
	|				ИНАЧЕ 1
	|			КОНЕЦ КАК ЧИСЛО(15, 2))";
	
	ОграничениеТекст = 
	"ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
	|							ТОГДА 0
	|						ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаВремени, ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия, 0))
	|					КОНЕЦ = 0
	|						ТОГДА 0
	|				ИНАЧЕ ЕСТЬNULL(РазмерОграниченияПособия.Размер, 0) / ВЫБОР
	|						КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
	|							ТОГДА 0
	|						ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаВремени, ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия, 0))
	|					КОНЕЦ
	|			КОНЕЦ * ВЫБОР
	|					КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.КодПоОКАТО <> """"
	|						ТОГДА ВЫБОР
	|								КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ > 1
	|								ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|					КОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ > 1
	|						ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ
	|					ИНАЧЕ 1
	|				КОНЕЦ КАК ЧИСЛО(15, 2))";
	
	ОграничениеЗаМесяцТекст = 
	"ВЫРАЗИТЬ(ЕСТЬNULL(РазмерОграниченияПособия.Размер, 0) * ВЫБОР
	|					КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.КодПоОКАТО <> """"
	|						ТОГДА ВЫБОР
	|								КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ > 1
	|								ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|					КОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ > 1
	|						ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ
	|					ИНАЧЕ 1
	|				КОНЕЦ КАК ЧИСЛО(15, 2))";
	
	
	
	РасчетПособияТекст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|			ТОГДА ОсновныеНачисленияРаботниковОрганизаций.НормаДней
	|		ИНАЧЕ ОсновныеНачисленияРаботниковОрганизаций.НормаЧасов
	|	КОНЕЦ КАК ОплаченоВремени,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияРаботниковОрганизаций.Показатель1 = 0
	|			ТОГДА ОсновныеНачисленияРаботниковОрганизаций.Показатель1
	|		КОГДА ОсновныеНачисленияРаботниковОрганизаций.Показатель1 = 50
	|			ТОГДА ОсновныеНачисленияРаботниковОрганизаций.Показатель1
	|		ИНАЧЕ ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ПроцентОплаты
	|	КОНЕЦ КАК РазмерВПроцентах,
	|	" + РазмерВРубляхТекст + " КАК РазмерВРублях,";
	Если ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ Тогда
		РасчетПособияТекст = РасчетПособияТекст + "
	|	ВЫБОР
	|		КОГДА " + РазмерВРубляхТекст + " < " + ОграничениеВРазмереММОТТекст + "
	|			ТОГДА " + РазмерВРубляхТекст + " * " + ОплачиваемоеВремяТекст + "
	|		КОГДА " + ОплачиваемоеВремяТекст + " = " + ВремяЗаМесяцТекст + "
	|			ТОГДА " + ОграничениеВРазмереММОТЗаМесяцТекст + "
	|		ИНАЧЕ " + ОграничениеВРазмереММОТТекст + " * " + ОплачиваемоеВремяТекст + "
	|	КОНЕЦ  КАК РасчетныйРезультат,
	|	" + ОграничениеВРазмереММОТТекст + " КАК ОграничениеПособия,"
	ИначеЕсли ЗначениеЗаполнено(ДатаНарушенияРежима) Тогда
		Если ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
			РасчетПособияТекст = РасчетПособияТекст + "
	|	ВЫБОР
	|		КОГДА &ДатаНарушенияРежима <= ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало
	|			ТОГДА ВЫБОР
	|					КОГДА (" + РазмерВРубляхТекст + ") < (" + ОграничениеВРазмереММОТТекст + ")
	|						ТОГДА " + РазмерВРубляхТекст + " * " + ОплачиваемоеВремяТекст + "
	|					КОГДА " + ОплачиваемоеВремяТекст + " = " + ВремяЗаМесяцТекст + "
	|						ТОГДА " + ОграничениеВРазмереММОТЗаМесяцТекст + "
	|					ИНАЧЕ " + ОграничениеВРазмереММОТТекст + " * " + ОплачиваемоеВремяТекст + "
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА (" + РазмерВРубляхТекст + ") < (" + ОграничениеТекст + ")
	|					ТОГДА " + РазмерВРубляхТекст + " * " + ОплачиваемоеВремяТекст + "
	|				КОГДА " + ОплачиваемоеВремяТекст + " = " + ВремяЗаМесяцТекст + "
	|					ТОГДА " + ОграничениеЗаМесяцТекст + "
	|				ИНАЧЕ " + ОграничениеТекст + " * " + ОплачиваемоеВремяТекст + "
	|			КОНЕЦ
	|	КОНЕЦ КАК РасчетныйРезультат,
	|	ВЫБОР
	|		КОГДА &ДатаНарушенияРежима <= ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало
	|			ТОГДА " + ОграничениеВРазмереММОТТекст + "
	|		ИНАЧЕ " + ОграничениеТекст + "
	|	КОНЕЦ  КАК ОграничениеПособия,"
		Иначе
			РасчетПособияТекст = РасчетПособияТекст + "
	|	ВЫБОР
	|		КОГДА &ДатаНарушенияРежима <= ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало
	|			ТОГДА ВЫБОР
	|					КОГДА (" + РазмерВРубляхТекст + ") < (" + ОграничениеВРазмереММОТТекст + ")
	|						ТОГДА " + РазмерВРубляхТекст + " * " + ОплачиваемоеВремяТекст + "
	|					КОГДА " + ОплачиваемоеВремяТекст + " = " + ВремяЗаМесяцТекст + "
	|						ТОГДА " + ОграничениеВРазмереММОТЗаМесяцТекст + "
	|					ИНАЧЕ " + ОграничениеВРазмереММОТТекст + " * " + ОплачиваемоеВремяТекст + "
	|				КОНЕЦ
	|		ИНАЧЕ " + РазмерВРубляхТекст + " 
	|	КОНЕЦ КАК РасчетныйРезультат,
	|	ВЫБОР
	|		КОГДА &ДатаНарушенияРежима <= ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало
	|			ТОГДА " + ОграничениеВРазмереММОТТекст + "
	|		ИНАЧЕ ""-""
	|	КОНЕЦ  КАК ОграничениеПособия,"
		КонецЕсли;
	ИначеЕсли ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
		РасчетПособияТекст = РасчетПособияТекст + "
	|	ВЫБОР
	|		КОГДА (" + РазмерВРубляхТекст + ") < (" + ОграничениеТекст + ")
	|			ТОГДА " + РазмерВРубляхТекст + " * " + ОплачиваемоеВремяТекст + "
	|		КОГДА " + ОплачиваемоеВремяТекст + " = " + ВремяЗаМесяцТекст + "
	|			ТОГДА " + ОграничениеЗаМесяцТекст + "
	|		ИНАЧЕ " + ОграничениеТекст + " * " + ОплачиваемоеВремяТекст + "
	|	КОНЕЦ КАК РасчетныйРезультат,
	|	" + ОграничениеТекст + " КАК ОграничениеПособия,"
	Иначе
		РасчетПособияТекст = РасчетПособияТекст + "
	|	" + РазмерВРубляхТекст + " * " + ОплачиваемоеВремяТекст + " КАК РасчетныйРезультат,
	|	""-""  КАК ОграничениеПособия,"
	КонецЕсли;
	РасчетПособияТекст = РасчетПособияТекст + "
	|	ОсновныеНачисленияРаботниковОрганизаций.Результат
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ДанныеГрафика(
	|		Регистратор = &ДокументСсылка
	|			И ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)) КАК ДанныеГрафика
	|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = ДанныеГрафика.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + СводныеИндивидуальныеГрафикиТекст + ") КАК СводныеИндивидуальныеГрафики
	|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = СводныеИндивидуальныеГрафики.НомерСтроки
	|		// присоединяем данные о размере пособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + РазмерММОТТекст + ") КАК РазмерММОТ
	|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = РазмерММОТ.ОсновнойНомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + РазмерОграниченияПособияТекст + ") КАК РазмерОграниченияПособия
	|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = РазмерОграниченияПособия.ОсновнойНомерСтроки
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &ДокументСсылка
	|	И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодДействияНачало";
	
	РазмерВРубляхТекст = 
	"ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ОсновныеНачисленияРаботниковОрганизаций.Показатель1 = 0
	|			ТОГДА ОсновныеНачисленияРаботниковОрганизаций.Показатель1
	|		КОГДА ОсновныеНачисленияРаботниковОрганизаций.Показатель1 = 50
	|			ТОГДА ОсновныеНачисленияРаботниковОрганизаций.Показатель1
	|		ИНАЧЕ &ПроцентОплатыПереходногоПериода
	|	КОНЕЦ * &СреднийПП / 100 КАК ЧИСЛО(15, 2))";
	
	ОграничениеВРазмереММОТТекст = 
	"ВЫРАЗИТЬ(ЕСТЬNULL(РазмерММОТ.Размер, 0) / ДЕНЬ(КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, МЕСЯЦ)) * ВЫБОР
	|				КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.КодПоОКАТО <> """"
	|						ТОГДА ВЫБОР
	|								КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ > 1
	|								ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|				КОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ > 1
	|					ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ
	|				ИНАЧЕ 1
	|			КОНЕЦ КАК ЧИСЛО(15, 2))";
	
	ОграничениеТекст = 
	"ВЫРАЗИТЬ(ЕСТЬNULL(РазмерОграниченияПособия.Размер, 0) / ДЕНЬ(КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, МЕСЯЦ)) * ВЫБОР
	|				КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.КодПоОКАТО <> """"
	|						ТОГДА ВЫБОР
	|								КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ > 1
	|								ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|				КОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ > 1
	|					ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ
	|				ИНАЧЕ 1
	|			КОНЕЦ КАК ЧИСЛО(15, 2))";
	
	ОплачиваемоеВремяТекст = 
	"КалендарныеДниПособия.ОплачиватьДнейПособия";
	
	ВремяЗаМесяцТекст = 
	"ДЕНЬ(КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, МЕСЯЦ))";
	
	РасчетПособияТекстПП = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало КАК ПериодДействияНачало,
	|	КалендарныеДниПособия.ОплачиватьДнейПособия КАК ОплаченоВремениПП,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияРаботниковОрганизаций.Показатель1 = 0
	|			ТОГДА ОсновныеНачисленияРаботниковОрганизаций.Показатель1
	|		КОГДА ОсновныеНачисленияРаботниковОрганизаций.Показатель1 = 50
	|			ТОГДА ОсновныеНачисленияРаботниковОрганизаций.Показатель1
	|		ИНАЧЕ ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ПроцентОплатыПереходногоПериода
	|	КОНЕЦ КАК РазмерВПроцентахПП,
	|	" + РазмерВРубляхТекст + " КАК РазмерВРубляхПП,";
	Если ОграничениеПособияПереходногоПериода =Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ Тогда
		РасчетПособияТекстПП = РасчетПособияТекстПП + "
	|	ВЫБОР
	|		КОГДА " + РазмерВРубляхТекст + " < " + ОграничениеВРазмереММОТТекст + "
	|			ТОГДА " + РазмерВРубляхТекст + " * " + ОплачиваемоеВремяТекст + "
	|		КОГДА " + ОплачиваемоеВремяТекст + " = " + ВремяЗаМесяцТекст + "
	|			ТОГДА " + ОграничениеВРазмереММОТЗаМесяцТекст + "
	|		ИНАЧЕ " + ОграничениеВРазмереММОТТекст + " * " + ОплачиваемоеВремяТекст + "
	|	КОНЕЦ  КАК РасчетныйРезультатПП,
	|	" + ОграничениеВРазмереММОТТекст + " КАК ОграничениеПособияПП,"
	ИначеЕсли ЗначениеЗаполнено(ДатаНарушенияРежима) Тогда
		Если ОграничениеПособияПереходногоПериода =Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
			РасчетПособияТекстПП = РасчетПособияТекстПП + "
	|	ВЫБОР
	|		КОГДА &ДатаНарушенияРежима <= ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало
	|			ТОГДА ВЫБОР
	|					КОГДА (" + РазмерВРубляхТекст + ") < (" + ОграничениеВРазмереММОТТекст + ")
	|						ТОГДА " + РазмерВРубляхТекст + " * " + ОплачиваемоеВремяТекст + "
	|					КОГДА " + ОплачиваемоеВремяТекст + " = " + ВремяЗаМесяцТекст + "
	|						ТОГДА " + ОграничениеВРазмереММОТЗаМесяцТекст + "
	|					ИНАЧЕ " + ОграничениеВРазмереММОТТекст + " * " + ОплачиваемоеВремяТекст + "
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА (" + РазмерВРубляхТекст + ") < (" + ОграничениеТекст + ")
	|					ТОГДА " + РазмерВРубляхТекст + " * " + ОплачиваемоеВремяТекст + "
	|				КОГДА " + ОплачиваемоеВремяТекст + " = " + ВремяЗаМесяцТекст + "
	|					ТОГДА " + ОграничениеЗаМесяцТекст + "
	|				ИНАЧЕ " + ОграничениеТекст + " * " + ОплачиваемоеВремяТекст + "
	|			КОНЕЦ
	|	КОНЕЦ КАК РасчетныйРезультатПП,
	|	ВЫБОР
	|		КОГДА &ДатаНарушенияРежима <= ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало
	|			ТОГДА " + ОграничениеВРазмереММОТТекст + "
	|		ИНАЧЕ " + ОграничениеТекст + "
	|	КОНЕЦ  КАК ОграничениеПособияПП,"
		Иначе
			РасчетПособияТекстПП = РасчетПособияТекстПП + "
	|	ВЫБОР
	|		КОГДА &ДатаНарушенияРежима <= ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало
	|			ТОГДА ВЫБОР
	|					КОГДА (" + РазмерВРубляхТекст + ") < (" + ОграничениеВРазмереММОТТекст + ")
	|						ТОГДА " + РазмерВРубляхТекст + " * " + ОплачиваемоеВремяТекст + "
	|					КОГДА " + ОплачиваемоеВремяТекст + " = " + ВремяЗаМесяцТекст + "
	|						ТОГДА " + ОграничениеВРазмереММОТЗаМесяцТекст + "
	|					ИНАЧЕ " + ОграничениеВРазмереММОТТекст + " * " + ОплачиваемоеВремяТекст + "
	|				КОНЕЦ
	|		ИНАЧЕ " + РазмерВРубляхТекст + " 
	|	КОНЕЦ КАК РасчетныйРезультатПП,
	|	ВЫБОР
	|		КОГДА &ДатаНарушенияРежима <= ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало
	|			ТОГДА " + ОграничениеВРазмереММОТТекст + "
	|		ИНАЧЕ ""-""
	|	КОНЕЦ  КАК ОграничениеПособияПП,"
		КонецЕсли;
	ИначеЕсли ОграничениеПособияПереходногоПериода =Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
		РасчетПособияТекстПП = РасчетПособияТекстПП + "
	|	ВЫБОР
	|		КОГДА (" + РазмерВРубляхТекст + ") < (" + ОграничениеТекст + ")
	|			ТОГДА " + РазмерВРубляхТекст + " * " + ОплачиваемоеВремяТекст + "
	|		КОГДА " + ОплачиваемоеВремяТекст + " = " + ВремяЗаМесяцТекст + "
	|			ТОГДА " + ОграничениеЗаМесяцТекст + "
	|		ИНАЧЕ " + ОграничениеТекст + " * " + ОплачиваемоеВремяТекст + "
	|	КОНЕЦ КАК РасчетныйРезультатПП,
	|	" + ОграничениеТекст + " КАК ОграничениеПособияПП,"
	Иначе
		РасчетПособияТекстПП = РасчетПособияТекстПП + "
	|	" + РазмерВРубляхТекст + " * " + ОплачиваемоеВремяТекст + " КАК РасчетныйРезультатПП,
	|	""-""  КАК ОграничениеПособияПП,"
	КонецЕсли;
	РасчетПособияТекстПП = РасчетПособияТекстПП + "
	|	ОсновныеНачисленияРаботниковОрганизаций.Результат
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ФактическийПериодДействия.НомерСтроки КАК НомерСтроки,
	|			СУММА(РАЗНОСТЬДАТ(ФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(ФактическийПериодДействия.ПериодДействияКонец, СЕКУНДА, 1), ДЕНЬ)) КАК ОплачиватьДнейПособия
	|		ИЗ
	|			РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|				ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС))
	|				    И Регистратор = &ДокументСсылка) КАК ФактическийПериодДействия
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ФактическийПериодДействия.Регистратор,
	|			ФактическийПериодДействия.НомерСтроки) КАК КалендарныеДниПособия
	|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = КалендарныеДниПособия.НомерСтроки
	|		// присоединяем данные о размере пособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + РазмерММОТТекст + ") КАК РазмерММОТ
	|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = РазмерММОТ.ОсновнойНомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + РазмерОграниченияПособияТекст + ") КАК РазмерОграниченияПособия
	|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = РазмерОграниченияПособия.ОсновнойНомерСтроки
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &ДокументСсылка
	|	И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодДействияНачало";
	

	ОтражениеТекст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец,
	|	СУММА(БУОсновныеНачисления.Результат) КАК Результат,
	|	БУОсновныеНачисления.СчетДт.Код,
	|	БУОсновныеНачисления.СубконтоДт1 КАК СубконтоДт1,
	|	БУОсновныеНачисления.СубконтоДт2 КАК СубконтоДт2,
	|	БУОсновныеНачисления.СубконтоДт3 КАК СубконтоДт3,
	|	ВЫБОР
	|		КОГДА &УСН
	|			ТОГДА БУОсновныеНачисления.ОтражениеВУСН
	|		ИНАЧЕ БУОсновныеНачисления.СчетДтНУ.Код
	|	КОНЕЦ КАК СчетДтНУКод,
	|	ВЫБОР
	|		КОГДА &УСН
	|			ТОГДА """"
	|		ИНАЧЕ БУОсновныеНачисления.СубконтоДтНУ1
	|	КОНЕЦ КАК СубконтоДтНУ1,
	|	ВЫБОР
	|		КОГДА &УСН
	|			ТОГДА """"
	|		ИНАЧЕ БУОсновныеНачисления.СубконтоДтНУ2
	|	КОНЕЦ КАК СубконтоДтНУ2,
	|	ВЫБОР
	|		КОГДА &УСН
	|			ТОГДА """"
	|		ИНАЧЕ БУОсновныеНачисления.СубконтоДтНУ3
	|	КОНЕЦ КАК СубконтоДтНУ3
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.БУОсновныеНачисления КАК БУОсновныеНачисления
	|		ПО ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = БУОсновныеНачисления.ВидРасчета
	|			И ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия = БУОсновныеНачисления.ПериодДействия
	|			И ОсновныеНачисленияРаботниковОрганизаций.Сотрудник = БУОсновныеНачисления.Сотрудник
	|			И (БУОсновныеНачисления.ПериодДействияНачало МЕЖДУ ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало И ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец)
	|			И (БУОсновныеНачисления.ПериодДействияКонец МЕЖДУ ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало И ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец)
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &ДокументСсылка
	|	И (НЕ ОсновныеНачисленияРаботниковОрганизаций.Сторно)
	|	И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = &ВидРасчетаКОплате
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец,
	|	БУОсновныеНачисления.СубконтоДт3,
	|	БУОсновныеНачисления.СубконтоДтНУ1,
	|	БУОсновныеНачисления.СубконтоДтНУ2,
	|	БУОсновныеНачисления.СубконтоДтНУ3,
	|	БУОсновныеНачисления.СчетДт.Код,
	|	ВЫБОР
	|		КОГДА &УСН
	|			ТОГДА БУОсновныеНачисления.ОтражениеВУСН
	|		ИНАЧЕ БУОсновныеНачисления.СчетДтНУ.Код
	|	КОНЕЦ,
	|	БУОсновныеНачисления.СубконтоДт1,
	|	БУОсновныеНачисления.СубконтоДт2,
	|	БУОсновныеНачисления.СубконтоДт3
	|
	|ИМЕЮЩИЕ
	|	СУММА(БУОсновныеНачисления.Результат) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодДействияНачало";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НачислениеПоБольничномуЛисту_ОборотЛисткаНетрудоспособности";
	
	Макет = ПолучитьМакет("ОборотЛисткаНетрудоспособностиВПереходныйПериод2007");
	СекцияШапка = Макет.ПолучитьОбласть("Шапка");
	СекцияРасчетПособияШапка = Макет.ПолучитьОбласть("РасчетПособияШапка");
	СекцияРасчетПособияСтрока2006 = Макет.ПолучитьОбласть("РасчетПособияСтрока2006");
	СекцияРасчетПособияСтрока = Макет.ПолучитьОбласть("РасчетПособияСтрока");
	СекцияРасчетПособияИтог = Макет.ПолучитьОбласть("РасчетПособияИтог");
	СекцияОтражениеПособияСтрока = Макет.ПолучитьОбласть("ОтражениеПособияСтрока");
	
	// определим налоговый режим
	БухгалтерскийИНалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), КонецМесяца(ПериодРегистрации), Организация);
	УчетнаяПолитика = глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете")[КонецМесяца(ПериодРегистрации)][Организация];
	мУСН = УчетнаяПолитика.УСН;
	мОбъектНалогообложенияУСН = УчетнаяПолитика.ОбъектНалогообложенияУСН;
	мЕНВД = УчетнаяПолитика.ОрганизацияЯвляетсяПлательщикомЕНВД;
	мФСС_БЛ = УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС;
	
	Запрос = Новый Запрос;
	
	ГрафикРаботы = Неопределено;
	ЭтоПереходныйПериодПоЗакону255ФЗ = ДатаСобытия < мДатаЗакона255ФЗ И ДатаОкончания >= мДатаЗакона255ФЗ И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаНачалаСобытия", ДатаСобытия);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);	
	Запрос.УстановитьПараметр("Физлицо", Сотрудник.Физлицо);
	Запрос.УстановитьПараметр("ПроцентОплатыПереходногоПериода", ПроцентОплатыПереходногоПериода);
	Запрос.УстановитьПараметр("ПроцентОплаты", ПроцентОплаты);
	Запрос.УстановитьПараметр("ДатаНарушенияРежима", ДатаНарушенияРежима);
	
	Запрос.Текст = ДанныеОДокументеТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СекцияШапка.Параметры,Выборка);
	ЗаполнитьЗначенияСвойств(СекцияРасчетПособияСтрока.Параметры,Выборка);
	ЗаполнитьЗначенияСвойств(СекцияРасчетПособияСтрока2006.Параметры,Выборка);
	ГрафикРаботы = Выборка.ГрафикРаботы;
	ПериодРасчетаСреднегоЗаработка = Выборка.ПериодРасчетаСреднегоЗаработка;
	ЛетСтажа	= 0;
	МесяцевСтажа= 0;
	ДнейСтажа	= 0;
	ДатаНепрерывногоСтажа = ПроведениеРасчетов.ПолучитьНачалоСтажаДляБольничногоЛиста(ДатаСобытия, Сотрудник.Физлицо, Организация);
	Если ЗначениеЗаполнено(ДатаНепрерывногоСтажа) Тогда
		ОбщегоНазначения.РазобратьРазностьДат(ДатаСобытия, ДатаНепрерывногоСтажа, ЛетСтажа, МесяцевСтажа, ДнейСтажа);
	КонецЕсли;
	СекцияШапка.Параметры.НазваниеСтажа = ?(ДатаСобытия < мДатаЗакона255ФЗ,"Непрерывный","Страховой");
	СекцияШапка.Параметры.ЛетСтажа = ЛетСтажа;
    СекцияШапка.Параметры.ПодписьЛетСтажа = ОбщегоНазначения.ФормаМножественногоЧисла("год","года","лет",ЛетСтажа);
    СекцияШапка.Параметры.МесяцевСтажа = МесяцевСтажа;
    СекцияШапка.Параметры.ПодписьМесяцевСтажа = ОбщегоНазначения.ФормаМножественногоЧисла("месяц","месяца","месяцев",МесяцевСтажа);
    СекцияШапка.Параметры.ДнейСтажа = ДнейСтажа;
    СекцияШапка.Параметры.ПодписьДнейСтажа = ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ДнейСтажа);
	
	ДатыВыходныхДней = "";
	Запрос.УстановитьПараметр("ГрафикРаботы" , ГрафикРаботы);
	Запрос.Текст = ВыходныеДниТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоДней = 0;
	Пока Выборка.Следующий() Цикл
		ДатыВыходныхДней = ДатыВыходныхДней + ?(ДатыВыходныхДней = "","","; ") + Формат(Выборка.Дата,"ДЛФ=DD");
		Если Выборка.Дата < мДатаЗакона255ФЗ Тогда
			КоличествоДней = КоличествоДней + 1
		КонецЕсли;
	КонецЦикла;
	СекцияШапка.Параметры.РабочихДней = ((мДатаЗакона255ФЗ - ДатаНачала) / мДлинаСуток) - КоличествоДней;
	СекцияШапка.Параметры.ДатыВыходныхДней = ДатыВыходныхДней;
	ТабДокумент.Вывести(СекцияШапка);
	
	СтруктураПоказателей = Неопределено;
	СписокСоставляющихСреднегоЗаработка = Новый Массив(5); 
	СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
	СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ;
	СписокСоставляющихСреднегоЗаработка[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ;
	СписокСоставляющихСреднегоЗаработка[3] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ;
	СписокСоставляющихСреднегоЗаработка[4] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ;
	ПечатьРасчетаСреднегоЗаработкаОтчет = ФормированиеПечатныхФорм.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаСобытия, ПериодРасчетаСреднегоЗаработка, "", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС, , СписокСоставляющихСреднегоЗаработка, Ложь, Ложь, СтруктураПоказателей);
    ОбластьПрямоугольная = ПечатьРасчетаСреднегоЗаработкаОтчет.Область(1, 1, ПечатьРасчетаСреднегоЗаработкаОтчет.ВысотаТаблицы, ПечатьРасчетаСреднегоЗаработкаОтчет.ШиринаТаблицы);
    НачалоНовогоФорматаСтрок = ТабДокумент.ВысотаТаблицы + 1;
    ТабДокумент.Область(НачалоНовогоФорматаСтрок, , НачалоНовогоФорматаСтрок + ПечатьРасчетаСреднегоЗаработкаОтчет.ВысотаТаблицы - 1, ).СоздатьФорматСтрок();
    // назначим ширину колонок у новой области формата строк
    Для Счетчик = 1 По ПечатьРасчетаСреднегоЗаработкаОтчет.ШиринаТаблицы Цикл
        ТабДокумент.Область(НачалоНовогоФорматаСтрок, Счетчик).ШиринаКолонки = ПечатьРасчетаСреднегоЗаработкаОтчет.Область(1, Счетчик).ШиринаКолонки;
    КонецЦикла;
    ТабДокумент.ВставитьОбласть(ОбластьПрямоугольная, ТабДокумент.Область(НачалоНовогоФорматаСтрок, 1));
	Запрос.УстановитьПараметр("Средний",Окр(СтруктураПоказателей.Средний,2));
	
	ТабДокумент.Вывести(Макет.ПолучитьОбласть("ЗаголовокНовогоПорядка"));
	СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий;
	СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий;
	СписокСоставляющихСреднегоЗаработка[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий;
	СписокСоставляющихСреднегоЗаработка[3] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий;
	СписокСоставляющихСреднегоЗаработка[4] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий;
	ПечатьРасчетаСреднегоЗаработкаОтчет = ФормированиеПечатныхФорм.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаСобытия, ПериодРасчетаСреднегоЗаработка, "", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС, Ложь, СписокСоставляющихСреднегоЗаработка, Ложь, Ложь, СтруктураПоказателей);
    ОбластьПрямоугольная = ПечатьРасчетаСреднегоЗаработкаОтчет.Область(1, 1, ПечатьРасчетаСреднегоЗаработкаОтчет.ВысотаТаблицы, ПечатьРасчетаСреднегоЗаработкаОтчет.ШиринаТаблицы);
    НачалоНовогоФорматаСтрок = ТабДокумент.ВысотаТаблицы + 1;
    ТабДокумент.Область(НачалоНовогоФорматаСтрок, , НачалоНовогоФорматаСтрок + ПечатьРасчетаСреднегоЗаработкаОтчет.ВысотаТаблицы - 1, ).СоздатьФорматСтрок();
    // назначим ширину колонок у новой области формата строк
    Для Счетчик = 1 По ПечатьРасчетаСреднегоЗаработкаОтчет.ШиринаТаблицы Цикл
        ТабДокумент.Область(НачалоНовогоФорматаСтрок, Счетчик).ШиринаКолонки = ПечатьРасчетаСреднегоЗаработкаОтчет.Область(1, Счетчик).ШиринаКолонки;
    КонецЦикла;
    ТабДокумент.ВставитьОбласть(ОбластьПрямоугольная, ТабДокумент.Область(НачалоНовогоФорматаСтрок, 1));
	Запрос.УстановитьПараметр("СреднийПП",Окр(СтруктураПоказателей.Средний,2));
	
	ТабДокумент.Вывести(СекцияРасчетПособияШапка);
	
	Запрос.Текст = РасчетПособияТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Запрос.Текст = РасчетПособияТекстПП;
	ВыборкаПП = Запрос.Выполнить().Выбрать(); ВыборкаПП.Следующий();
	СтруктураПоиска = Новый Структура("ПериодДействияНачало");
	НачисленоВсего = 0;
	Пока Выборка.Следующий() Цикл
		НачисленоВсего = НачисленоВсего + Выборка.Результат;
		Если Выборка.ПериодДействияНачало < мДатаЗакона255ФЗ Тогда
			ЗаполнитьЗначенияСвойств(СекцияРасчетПособияСтрока2006.Параметры,Выборка);
			ТабДокумент.Вывести(СекцияРасчетПособияСтрока2006);
		Иначе
			ЗаполнитьЗначенияСвойств(СекцияРасчетПособияСтрока.Параметры,Выборка);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,Выборка);
			ВыборкаПП.Сбросить();
			ВыборкаПП.НайтиСледующий(СтруктураПоиска);
			ЗаполнитьЗначенияСвойств(СекцияРасчетПособияСтрока.Параметры,ВыборкаПП);
			ТабДокумент.Вывести(СекцияРасчетПособияСтрока);
		КонецЕсли;
	КонецЦикла;
	                                  
	СекцияРасчетПособияИтог.Параметры.НачисленоВсегоПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(НачисленоВсего, Константы.ВалютаРегламентированногоУчета.Получить());
	СекцияРасчетПособияИтог.Параметры.ПериодРегистрации = ПериодРегистрации;
	ТабДокумент.Вывести(СекцияРасчетПособияИтог);
	
	Запрос.Текст = ОтражениеТекст;
	Запрос.УстановитьПараметр("ВидРасчетаКОплате", ВидРасчета);
	Запрос.УстановитьПараметр("УСН",мУСН);
	Результат = Запрос.Выполнить();
	
	ТабДокумент.Вывести(Макет.ПолучитьОбласть("ОтражениеВУчетеШапка"));
	Если Результат.Пустой() Тогда
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("НетДанных"));
	Иначе
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("ОтражениеПособияШапка"));
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СекцияОтражениеПособияСтрока.Параметры,Выборка);
			
			СекцияОтражениеПособияСтрока.Параметры.СтрокаСубконтоБУ = ?(ЗначениеЗаполнено(Выборка.СубконтоДт1),Строка(Выборка.СубконтоДт1),"") +
				?(ЗначениеЗаполнено(Выборка.СубконтоДт2), Символы.ПС + Строка(Выборка.СубконтоДт2),"") + 
				?(ЗначениеЗаполнено(Выборка.СубконтоДт3), Символы.ПС+ Строка(Выборка.СубконтоДт3),"") ; 
			СекцияОтражениеПособияСтрока.Параметры.СтрокаСубконтоНУ = ?(ЗначениеЗаполнено(Выборка.СубконтоДтНУ1),Строка(Выборка.СубконтоДтНУ1),"") +
				?(ЗначениеЗаполнено(Выборка.СубконтоДтНУ2), Символы.ПС + Строка(Выборка.СубконтоДтНУ2),"") + 
				?(ЗначениеЗаполнено(Выборка.СубконтоДтНУ3), Символы.ПС + Строка(Выборка.СубконтоДтНУ3),""); 
		
			ТабДокумент.Вывести(СекцияОтражениеПособияСтрока);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат	ТабДокумент
	
КонецФункции // ПечатьОборотаБольничного()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если Не Проведен Тогда
		Предупреждение("Документ можно распечатать только после расчета и проведения!");
		Возврат Неопределено;
	КонецЕсли;
    //vvv
	Если ИмяМакета="Макет" ТОгда
		ТабДокумент=СформироватьДокумент();
		Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним));		
	Иначе
	//	
	СреднийЗаработок = 0;
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ВыборкаПоШапкеДокументадляПечати = СформироватьЗапросПоШапкеДляПечати().Выбрать();
	ВыборкаПоШапкеДокументадляПечати.Следующий();
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	График =  ПолучитьГрафикРаботыСотрудника(ВыборкаПоШапкеДокумента);
	СпособРасчета = ВыборкаПоШапкеДокумента.ВидРасчета.СпособРасчета;

	// Определение даты начала и конца оплачиваемого события 
	
	ДатаНачалаСобытия 			= ВыборкаПоШапкеДокумента.ДатаНачала;
	ДатаОкончанияСобытия 		= ВыборкаПоШапкеДокумента.ДатаОкончания;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия", ДатаНачалаСобытия);
	
	//Выборка годовой премии
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(НачислениеПоБольничнымЛистамРасчетСреднего.Результат) КАК Результат,
	               |	НачислениеПоБольничнымЛистамРасчетСреднего.КоэффициентИндексации
	               |ИЗ
	               |	Документ.НачислениеПоБольничномуЛисту.РасчетСреднего КАК НачислениеПоБольничнымЛистамРасчетСреднего
	               |ГДЕ
	               |	НачислениеПоБольничнымЛистамРасчетСреднего.Результат <> 0
	               |	И НачислениеПоБольничнымЛистамРасчетСреднего.МесяцВыборки <> &ПустаяДата
	               |	И НачислениеПоБольничнымЛистамРасчетСреднего.ВидРасчета = &ВидРасчетаПоГодовойПремии
	               |	И НачислениеПоБольничнымЛистамРасчетСреднего.Ссылка = &Регистратор
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НачислениеПоБольничнымЛистамРасчетСреднего.КоэффициентИндексации";
				   
   	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	Запрос.УстановитьПараметр("ВидРасчетаПоФиксПремиям", ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	Запрос.УстановитьПараметр("ВидРасчетаПоГодовойПремии", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии);
	//vvv
	Запрос.УстановитьПараметр("ВидРасчетаПоФиксПремиям", ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ);
	Запрос.УстановитьПараметр("ВидРасчетаПоГодовойПремии", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ);
	//
	Запрос.УстановитьПараметр("ГодоваяПремия", Перечисления.ВидыПремии.ГодоваяПремия);
	Запрос.УстановитьПараметр("ГодПредшествующийСобытию", ГОД(ДатаНачалаСобытия) - 1);
	
	Годовая = Запрос.Выполнить().Выбрать();
	годоваяВМесяц = 0;
	Если Годовая.Следующий() тогда
		ГодоваяВМесяц = Годовая.Результат / 12 * Годовая.КоэффициентИндексации;
	КонецЕсли;
	
	// Запрос выборки среднего заработка
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НачислениеПоБольничнымЛистамРасчетСреднего.Результат) КАК Результат,
	|	НачислениеПоБольничнымЛистамРасчетСреднего.МесяцВыборки КАК МесяцВыборки,
	|	НачислениеПоБольничнымЛистамРасчетСреднего.ТарифнаяСтавкаПериода,
	|	НачислениеПоБольничнымЛистамРасчетСреднего.ТекущаяТарифнаяСтавка,
	|	НачислениеПоБольничнымЛистамРасчетСреднего.КоэффициентИндексации
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту.РасчетСреднего КАК НачислениеПоБольничнымЛистамРасчетСреднего
	|ГДЕ
	|	(НачислениеПоБольничнымЛистамРасчетСреднего.Результат <> 0
	|			ИЛИ НачислениеПоБольничнымЛистамРасчетСреднего.КалендарныеДни <> 0)
	|	И НачислениеПоБольничнымЛистамРасчетСреднего.МесяцВыборки <> &ПустаяДата
	|	И НачислениеПоБольничнымЛистамРасчетСреднего.Ссылка = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеПоБольничнымЛистамРасчетСреднего.МесяцВыборки,
	|	НачислениеПоБольничнымЛистамРасчетСреднего.КоэффициентИндексации,
	|	НачислениеПоБольничнымЛистамРасчетСреднего.ТарифнаяСтавкаПериода,
	|	НачислениеПоБольничнымЛистамРасчетСреднего.ТекущаяТарифнаяСтавка
	|
	|УПОРЯДОЧИТЬ ПО
	|	МесяцВыборки";
	
	Измерения = Новый Массив(1);
	Измерения[0] = "Сотрудник";
	
	// основные начисления собираем по периодам действия
	РазрезыОсновных = Новый Массив(1);
	РазрезыОсновных[0] = "ПериодДействия";
	
	// дополнительные начисления собираем по периодам регистрации
	РазрезыДополнительных = Новый Массив(2);
	РазрезыДополнительных[0] = "ПериодРегистрации";
	РазрезыДополнительных[1] = "ЧислоМесяцев";
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	Запрос.УстановитьПараметр("Измерения", Измерения);
	Запрос.УстановитьПараметр("РазрезыОсновных", РазрезыОсновных);
	Запрос.УстановитьПараметр("РазрезыДополнительных", РазрезыДополнительных);
	Запрос.УстановитьПараметр("ВидРасчетаПоФиксПремиям", ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	Запрос.УстановитьПараметр("ВидРасчетаПоГодовойПремии", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии);
	//vvv
	Запрос.УстановитьПараметр("ВидРасчетаПоФиксПремиям", ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ);
	Запрос.УстановитьПараметр("ВидРасчетаПоГодовойПремии", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ);
	//
	Запрос.УстановитьПараметр("ГодоваяПремия", Перечисления.ВидыПремии.ГодоваяПремия);
	Запрос.УстановитьПараметр("ГодПредшествующийСобытию", ГОД(ДатаНачалаСобытия) - 1);
	
	ТаблицаСреднего = Новый ТаблицаЗначений;        
	ТаблицаСреднего.Колонки.Добавить("Месяц");
	ТаблицаСреднего.Колонки.Добавить("Сумма");
	ТаблицаСреднего.Колонки.Добавить("Описание");
	
	ВыборкаСреднегоЗаработка = Запрос.Выполнить().Выбрать();
	
	// Запрос выборки отработанного времени
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеПоБольничнымЛистамРасчетСреднего.МесяцВыборки КАК МесяцВыборки,
	|	СУММА(НачислениеПоБольничнымЛистамРасчетСреднего.ОтработаноДней) КАК ОтработаноДней,
	|	СУММА(НачислениеПоБольничнымЛистамРасчетСреднего.ОтработаноЧасов) КАК ОтработаноЧасов,
	|	СУММА(НачислениеПоБольничнымЛистамРасчетСреднего.КалендарныеДни) КАК КалендарныеДни
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту.РасчетСреднего КАК НачислениеПоБольничнымЛистамРасчетСреднего
	|ГДЕ
	|	(НачислениеПоБольничнымЛистамРасчетСреднего.Результат <> 0
	|			ИЛИ НачислениеПоБольничнымЛистамРасчетСреднего.КалендарныеДни <> 0)
	|	И НачислениеПоБольничнымЛистамРасчетСреднего.МесяцВыборки <> &ПустаяДата
	|	И НачислениеПоБольничнымЛистамРасчетСреднего.ВидРасчета = &ВидРасчетаПоЗаработку
	|	И НачислениеПоБольничнымЛистамРасчетСреднего.Ссылка = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеПоБольничнымЛистамРасчетСреднего.МесяцВыборки
	|
	|УПОРЯДОЧИТЬ ПО
	|	МесяцВыборки";
				   
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	Запрос.УстановитьПараметр("Измерения", Измерения);
	Запрос.УстановитьПараметр("РазрезыОсновных", РазрезыОсновных);
	Запрос.УстановитьПараметр("РазрезыДополнительных", РазрезыДополнительных);
	Запрос.УстановитьПараметр("ВидРасчетаПоФиксПремиям", ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	Запрос.УстановитьПараметр("ВидРасчетаПоЗаработку", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
	Запрос.УстановитьПараметр("ГодоваяПремия", Перечисления.ВидыПремии.ГодоваяПремия);
	Запрос.УстановитьПараметр("ГодПредшествующийСобытию", ГОД(ДатаНачалаСобытия) - 1);
	
	ТаблицаСреднего.Колонки.Добавить("Отработано");
	
	ВыборкаОтработаноПоПятидневке = Запрос.Выполнить().Выгрузить();
	
	Макет = ПолучитьМакет("Оборот");
	
	// вывод лицевой стороны
	СекцияЛицеваяСторона = Макет.ПолучитьОбласть("ЛицеваяСторона");
	
	СекцияЛицеваяСторона.Параметры.Заполнить(ВыборкаПоШапкеДокументаДляПечати);
	
	ТабДокумент.Вывести(СекцияЛицеваяСторона);
	
	// Вывод сведений о порядке расчета среднего заработка
	СекцияРасчетСреднего = Макет.ПолучитьОбласть("РасчетСреднего");
	
	// вывод данных о сумме заработка за расчетный период
	НомерСтроки = 0;
	ИтогоЗаработок = 0;
	ИтогоЗаработокБезИндексации = 0;
	ИтогоОтработано = 0;
	СтруктураПоиска = Новый Структура("МесяцВыборки");
	Пока ВыборкаСреднегоЗаработка.Следующий() Цикл
		
		НомерСтроки = НомерСтроки  + 1;
		
		
		ОписаниеСуммы = "Заработок " +  Формат(ВыборкаСреднегоЗаработка.Результат,"ЧЦ=15; ЧДЦ=2");
		
		СтруктураПоиска.МесяцВыборки =  ВыборкаСреднегоЗаработка.МесяцВыборки;
		
		ОтработаноДней = ВыборкаОтработаноПоПятидневке.НайтиСтроки(СтруктураПоиска);
		Отработано = 0;
		Для каждого Строка из ОтработаноДней цикл
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуОтпускаПоБеременности ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН Тогда
				Отработано = Отработано + Строка.КалендарныеДни;
			Иначе	
				Если График[0].ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням тогда
					Отработано = Отработано + Строка.ОтработаноДней;
				Иначе
					Отработано = Отработано + Строка.ОтработаноЧасов;
				КонецЕсли;
			КонецЕсли;
	
		КонецЦикла;
		
		
		ИтогоЗаработок = ИтогоЗаработок + ВыборкаСреднегоЗаработка.Результат*ВыборкаСреднегоЗаработка.КоэффициентИндексации;// + ГодоваяВМесяц;
		ИтогоЗаработокБезИндексации = ИтогоЗаработокБезИндексации + ВыборкаСреднегоЗаработка.Результат;
		ИтогоОтработано = ИтогоОтработано + Отработано;
			
		СекцияРасчетСреднего.Параметры["Год" + НомерСтроки] 		= Год(ВыборкаСреднегоЗаработка.МесяцВыборки);
		СекцияРасчетСреднего.Параметры["Месяц" + НомерСтроки] 		= Месяц(ВыборкаСреднегоЗаработка.Месяцвыборки);
		СекцияРасчетСреднего.Параметры["Сумма" + НомерСтроки] 		= ОписаниеСуммы;
		СекцияРасчетСреднего.Параметры["Отработано" + НомерСтроки] 	= Отработано;
		Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуОтпускаПоБеременности ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН Тогда
			СекцияРасчетСреднего.Параметры["Коэф" + НомерСтроки] 		= "1.0"	
		Иначе
        	СекцияРасчетСреднего.Параметры["Коэф" + НомерСтроки] 		= Формат(ВыборкаСреднегоЗаработка.КоэффициентИндексации,"ЧЦ=15; ЧДЦ=5");
		КонецЕсли;	
	КонецЦикла; 
	Если РучнойРасчетСреднегоЗаработка тогда
		СекцияРасчетСреднего.Параметры["СреднийЗаработок"] = Формат(РазмерСреднегоЗаработка,"ЧЦ=15; ЧДЦ=2");
		СреднийЗаработок = Формат(РазмерСреднегоЗаработка,"ЧЦ=15; ЧДЦ=2");
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуОтпускаПоБеременности ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН Тогда
		СекцияРасчетСреднего.Параметры["СреднийЗаработок"] = Формат(ИтогоЗаработокБезИндексации/ ИтогоОтработано,"ЧЦ=15; ЧДЦ=2");
		СреднийЗаработок =  Формат(ИтогоЗаработокБезИндексации/ ИтогоОтработано,"ЧЦ=15; ЧДЦ=2");
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтпускПоБеременностиОтБПМ Тогда
		СекцияРасчетСреднего.Параметры["СреднийЗаработок"] = "";
		СреднийЗаработок = 0;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.РасчетБЛотТарифнойСтавки Тогда
		СекцияРасчетСреднего.Параметры["СреднийЗаработок"] = "";
		СреднийЗаработок = 0;
	
	Иначе	
		СекцияРасчетСреднего.Параметры["СреднийЗаработок"] = Формат(ИтогоЗаработок / ИтогоОтработано,"ЧЦ=15; ЧДЦ=2");
		СреднийЗаработок = Формат(ИтогоЗаработок / ИтогоОтработано,"ЧЦ=15; ЧДЦ=2");
	КонецЕсли;
	ТабДокумент.Вывести(СекцияРасчетСреднего);
	
	Запрос = Новый Запрос;
    
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеДоговорникам ИЛИ ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеУволенным Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДополнительныеНачисленияРаботниковОрганизаций.Показатель1,
		|	ДополнительныеНачисленияРаботниковОрганизаций.Показатель2,
		|	ДополнительныеНачисленияРаботниковОрганизаций.Результат,
		|	ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета,
		|	ДополнительныеНачисленияРаботниковОрганизаций.НомерСтроки,
		|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизаций.БазовыйПериодНачало, МЕСЯЦ), КОНЕЦПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизаций.БазовыйПериодКонец, МЕСЯЦ), ДЕНЬ) + 1 КАК КалендарныхДнейЗаМесяц,
		|	ДополнительныеНачисленияРаботниковОрганизаций.БазовыйПериодНачало КАК ДатаНачала,
		|	ДополнительныеНачисленияРаботниковОрганизаций.ОплаченоДнейЧасов,
		|	ДополнительныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия,
		|	1 КАК КИ
        |ИЗ
		|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
		|ГДЕ
		|	ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПосреднемуЗаработкуФСЗН)
		|	И ДополнительныеНачисленияРаботниковОрганизаций.Регистратор = &парамРегистратор";
		
		
	Иначе	
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеНачисленияРаботниковОрганизаций.Показатель1,
		|	ОсновныеНачисленияРаботниковОрганизаций.Результат,
		|	ОсновныеНачисленияРаботниковОрганизаций.НормаДней,
		|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета,
		|	ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки,
		|	ОсновныеНачисленияРаботниковОрганизаций.ДополнительныеДанные КАК ДополнительныеДанные1,
		|	ОсновныеНачисленияРаботниковОрганизаций.НормаЧасов,
		|	ОсновныеНачисленияРаботниковОрганизаций.КоэффициентИндексации КАК КИ,
		|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК НормаЗаМесяц,
		|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, МЕСЯЦ), КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, МЕСЯЦ), ДЕНЬ) + 1 КАК КалендарныхДнейЗаМесяц,
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало КАК ДатаНачала,
		|	ОсновныеНачисленияРаботниковОрганизаций.ОплаченоДнейЧасов,
		|	ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО (НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, МЕСЯЦ) = ГрафикиРаботыПоВидамВремени.Месяц)
		|			И ОсновныеНачисленияРаботниковОрганизаций.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|			И ОсновныеНачисленияРаботниковОрганизаций.ВидУчетаВремени = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
		|ГДЕ
		|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета В(&парамПоСреднемуФСЗН)
		|	И ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &парамРегистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета,
		|	ОсновныеНачисленияРаботниковОрганизаций.ДополнительныеДанные,
		|	ОсновныеНачисленияРаботниковОрганизаций.КоэффициентИндексации,
		|	ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки,
		|	ОсновныеНачисленияРаботниковОрганизаций.НормаДней,
		|	ОсновныеНачисленияРаботниковОрганизаций.НормаЧасов,
		|	ОсновныеНачисленияРаботниковОрганизаций.Показатель1,
		|	ОсновныеНачисленияРаботниковОрганизаций.Результат,
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало,
		|	ОсновныеНачисленияРаботниковОрганизаций.ОплаченоДнейЧасов,
		|	ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала";
	КонецЕсли;
	    					
	 ПоСреднему = Новый Массив;
	 ПоСреднему.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
	 ПоСреднему.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН);
	 ПоСреднему.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуОтпускаПоБеременности);
	 ПоСреднему.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтпускПоБеременностиОтБПМ);
	 
	 ПоСреднему.Добавить(Перечисления.СпособыРасчетаОплатыТруда.РасчетБЛотТарифнойСтавки);
	 

	 Запрос.УстановитьПараметр("парамПоСреднемуФСЗН", ПоСреднему);
	 Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	 
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 СекцияСтрокаОплаты = Макет.ПолучитьОбласть("СтрокаВыплат");
	 ИтогоКВыплате = 0;
	 ИтогоСумма = 0;
	 ИтогоНормаСумма = 0;
	 НормаСумма = 0;
	 
	Пока Выборка.Следующий() Цикл
		
		СекцияСтрокаОплаты.Параметры.Год = Год(Выборка.ДатаНачала);
		СекцияСтрокаОплаты.Параметры.Месяц = Месяц(Выборка.ДатаНачала);
		ОтработаноДнейЧасов = Выборка.ОплаченоДнейЧасов;
		
		
		СекцияСтрокаОплаты.Параметры.Оплачено = ОтработаноДнейЧасов;
		
		Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтпускПоБеременностиОтБПМ Тогда
			СекцияСтрокаОплаты.Параметры.Сумма = Выборка.Результат;
			ИтогоСумма = ИтогоСумма +   Выборка.Результат;

		Иначе
			Сумма = ОбщегоНазначения.ОкруглитьПоВалюте(Выборка.ОплаченоДнейЧасов* Выборка.Показатель1/100 * СреднийЗаработок,Константы.ВалютаРегламентированногоУчета.Получить());
       		СекцияСтрокаОплаты.Параметры.Сумма = Сумма;
			ИтогоСумма = ИтогоСумма +   Сумма;

		КонецЕсли;
		
		СекцияСтрокаОплаты.Параметры.Процент = Выборка.Показатель1;
		СекцияСтрокаОплаты.Параметры.КИ = Формат(Выборка.КИ,"ЧЦ=15; ЧДЦ=5");
				
	
		Если ВыборкаПоШапкеДокументадляПечати.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
			
					
			
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Тогда
				Норма = Выборка.НормаЗаМесяц;  	
				СредняяПоРБ = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(КонецМесяца(ДобавитьМесяц(НачалоМесяца(Выборка.ДатаНачала), -1)),
					Новый Структура("ВидПараметра", Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП)).Размер;
				//vvv
				СредняяПоРБ=ОбщегоНазначения.ПолучитьПоследнееДеноминированное("РазмерыПараметровДляРасчетаРБ","ВидПараметра","Размер",Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП,КонецМесяца(ДобавитьМесяц(НачалоМесяца(Выборка.ДатаНачала), -1)),ПериодРегистрации);
				//	

			Иначе
				Норма = Выборка.КалендарныхДнейЗаМесяц;
				СредняяПоРБ = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(КонецМесяца(ДобавитьМесяц(НачалоМесяца(Выборка.ДатаНачалаСобытия), -1)),
					Новый Структура("ВидПараметра", Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников)).Размер;
				//vvv
				СредняяПоРБ=ОбщегоНазначения.ПолучитьПоследнееДеноминированное("РазмерыПараметровДляРасчетаРБ","ВидПараметра","Размер",Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП,КонецМесяца(ДобавитьМесяц(НачалоМесяца(Выборка.ДатаНачала), -1)),ПериодРегистрации);
				//	

			КонецЕсли;
			РазмерОграничения = 3 * СредняяПоРБ / Норма * ОтработаноДнейЧасов;
			НормаСумма =  ОбщегоНазначения.ОкруглитьПоВалюте(РазмерОграничения,Константы.ВалютаРегламентированногоУчета.Получить());
		КонецЕсли;
		
		СекцияСтрокаОплаты.Параметры.КВыплате = Выборка.Результат;
		ИтогоНормаСумма = ИтогоНормаСумма + НормаСумма;
		ИтогоКВыплате = ИтогоКВыплате + Выборка.Результат;
		
		ТабДокумент.Вывести(СекцияСтрокаОплаты);
		
	КонецЦикла;
	 
	// Вывод подвала
	СекцияПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Бухгалтер = ПолучитьОтветственного();
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, КонецДня(Дата),);
	
	СекцияПодвал.Параметры.ГлавныйБухгалтер =  Руководители.ГлавныйБухгалтер;
	СекцияПодвал.Параметры.Бухгалтер = Бухгалтер;
	
	СекцияПодвал.Параметры.ИтогоКВыплате = ИтогоКВыплате;
	СекцияПодвал.Параметры.ИтогоСумма =  ИтогоСумма;
	СекцияПодвал.Параметры.ИтогоНормаСумма = ИтогоНормаСумма;
	СекцияПодвал.Параметры.КВыплатеПрописью = РаботаСДиалогами.СформироватьСуммуПрописью(ИтогоКВыплате, Константы.ВалютаРегламентированногоУчета.Получить());
	СекцияПодвал.Параметры.ПериодРегистрации = Формат(ПериодРегистрации,"ДФ=ММММ");	
	ТабДокумент.Вывести(СекцияПодвал);
	РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (оборот листка нетрудоспособности)");
    //vvv
	КонецЕсли;
    //
КонецФункции // Печать()

Функция ПолучитьОтветственного()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Ответственный);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст ="ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
	|			ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
	|		ИНАЧЕ """"
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
	|			ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	|		ИНАЧЕ """"
	|	КОНЕЦ + ФИОФизЛицСрезПоследних.Фамилия КАК Бухгалтер
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛицСрезПоследних
	|		ПО Пользователи.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	Пользователи.Ссылка = &Пользователь";
				  
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Бухгалтер;
	
КонецФункции


#КонецЕсли

// Формирует записи регистра "ОсновныеНачисленияРаботниковОрганизаций" по данным шапки документа
//
Процедура СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборОсновныеНачисления, НаборДополнительныеНачисления) Экспорт
	
	СтрокаСвойствИзДокумента = "ПериодРегистрации,Сотрудник,ФизЛицо,Организация,ОбособленноеПодразделение,ДатаНачалаСобытия,ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,РучнойРасчетСреднегоЗаработка";
	
	ДатаНачалаСобытия = ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
	ДатаОкончанияОплаты = ВыборкаПоШапкеДокумента.ДатаНачала + (ВыборкаПоШапкеДокумента.ДнейОплаты - 1) * мДлинаСуток;
	БЛБезОплаты = ?(ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам, ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезниПоБеременности, ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезни);
	
	// в зависимости от причины нетрудоспособности оплачивается разное количество дней; процент оплаты также меняется
	ТаблицаИнтерваловОплаты = ЗаполнитьТаблицуИнтервалов(ДатаНачалаБольничногоЛиста, ВыборкаПоШапкеДокумента.ВидРасчета);
	// таблица значений с колонками:  Месяц, ГрафикРаботы, ГрафикРаботыНорма
	ГрафикиСотрудникаПоМесяцам = ПолучитьГрафикРаботыСотрудника(ВыборкаПоШапкеДокумента);
	ГрафикиСотрудникаПоМесяцам.Индексы.Добавить("Месяц");
	ЕстьДанныеОСотруднике = ГрафикиСотрудникаПоМесяцам.Количество() > 0;
	СтруктураПоиска = Новый Структура("Месяц");
	
	Для Каждого ИнтервалОплаты Из ТаблицаИнтерваловОплаты Цикл
		
		НомерИнтервалаОплаты = ТаблицаИнтерваловОплаты.Индекс(ИнтервалОплаты);
		
		Если ИнтервалОплаты.Начало > ДатаОкончания Тогда
			Продолжить;
		КонецЕсли;
				
		ОкончаниеИнтервалаОплаты = Мин(ТаблицаИнтерваловОплаты[НомерИнтервалаОплаты + 1].Начало - мДлинаСуток,ДатаОкончания);
		
		ТекущаяДатаНачала = Макс(ИнтервалОплаты.Начало, ДатаНачала);
		 
		Если ДатаОкончанияОплаты < ТекущаяДатаНачала Тогда
			ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ОкончаниеИнтервалаОплаты);
		Иначе
			ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончанияОплаты, ОкончаниеИнтервалаОплаты);
		КонецЕсли;
	
		
		Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
			
			Если НЕ (ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеДоговорникам ИЛИ ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеУволенным)  Тогда
				Если ЕстьДанныеОСотруднике Тогда
					СтруктураПоиска.Месяц = НачалоМесяца(ТекущаяДатаНачала);
					Для каждого ДанныеОГрафиках Из ГрафикиСотрудникаПоМесяцам.НайтиСтроки(СтруктураПоиска) Цикл
					
						// строка движений
						Движение = НаборОсновныеНачисления.Добавить();
						
						ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
						
						// заполнение графиков работы
						ЗаполнитьЗначенияСвойств(Движение,ДанныеОГрафиках); // ГрафикРаботы, ГрафикРаботыНорма, ВидУчетаВремени, ПодразделениеОрганизации 
						
						// Свойства
						Движение.ПериодДействияНачало		= НачалоДня(ТекущаяДатаНачала);
						Движение.ПериодДействияКонец		= КонецДня(ТекущаяДатаОкончания);
						Движение.ВидРасчета					= ?(Движение.ПериодДействияНачало <= ДатаОкончанияОплаты,ИнтервалОплаты.Расчет,БЛБезОплаты);
						
						
						// Реквизиты
						Движение.Показатель1				= ИнтервалОплаты.ПроцентОплаты;
						Если Движение.ПериодДействияНачало > ДатаОкончанияОплаты Тогда
							Движение.Показатель1					= 0;
						КонецЕсли;
						Движение.ДатаНачалаСобытия			= ДатаНачалаСобытия;
						Движение.Авторасчет					= Истина;
						Если Движение.РучнойРасчетСреднегоЗаработка тогда
							Движение.РазмерСреднегоЗаработка = ВыборкаПоШапкеДокумента.РазмерСреднегоЗаработка;
						КонецЕсли;
						Движение.ВидОграниченияЗаработка = ВыборкаПоШапкеДокумента.ВидОграниченияЗаработка;
						
					КонецЦикла;
					        
				Иначе
					
					// строка движений
					Движение = НаборОсновныеНачисления.Добавить();
					
					ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
					
					// Свойства
					Движение.ПериодДействияНачало		= НачалоДня(ТекущаяДатаНачала);
					Движение.ПериодДействияКонец		= КонецДня(ТекущаяДатаОкончания);
					Движение.ВидРасчета				    = ?(Движение.ПериодДействияНачало <= ДатаОкончанияОплаты,ИнтервалОплаты.Расчет,БЛБезОплаты);
					
					// Реквизиты
					Движение.Показатель1				= ИнтервалОплаты.ПроцентОплаты;
					Если Движение.ПериодДействияНачало > ДатаОкончанияОплаты Тогда
						Движение.Показатель1					= 0;
					КонецЕсли;
					Движение.ДатаНачалаСобытия			= ДатаНачалаСобытия;

					Движение.Авторасчет					= Истина;
					Если Движение.РучнойРасчетСреднегоЗаработка тогда
							Движение.РазмерСреднегоЗаработка = ВыборкаПоШапкеДокумента.РазмерСреднегоЗаработка;
					КонецЕсли;
					Движение.ВидОграниченияЗаработка = ВыборкаПоШапкеДокумента.ВидОграниченияЗаработка;
				КонецЕсли;
			Иначе
				
				// строка движений
					Движение = НаборДополнительныеНачисления.Добавить();
					
					ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
					
					// Свойства
					Движение.БазовыйПериодНачало		= НачалоДня(ТекущаяДатаНачала);
					Движение.БазовыйПериодКонец			= КонецДня(ТекущаяДатаОкончания);
					Движение.ВидРасчета				    = ?(Движение.ПериодДействияНачало <= ДатаОкончанияОплаты,ИнтервалОплаты.Расчет,БЛБезОплаты);
					
					// Реквизиты
					Движение.Показатель1				= ИнтервалОплаты.ПроцентОплаты;
					Движение.Показатель2				= День(ТекущаяДатаОкончания) - День(ТекущаяДатаНачала)+1;
					Если НачалоДня(ТекущаяДатаНачала) > ДатаОкончанияОплаты Тогда
						Движение.Показатель1					= 0;
						Движение.Показатель2                    = 0;
					КонецЕсли;
					Движение.ДатаНачалаСобытия			= ДатаНачалаСобытия;

					Движение.Авторасчет					= Истина;
					Если Движение.РучнойРасчетСреднегоЗаработка тогда
							Движение.РазмерСреднегоЗаработка = ВыборкаПоШапкеДокумента.РазмерСреднегоЗаработка;
					КонецЕсли;
					Движение.ВидОграниченияЗаработка = ВыборкаПоШапкеДокумента.ВидОграниченияЗаработка;	


			КонецЕсли;
			ТекущаяДатаНачала = КонецДня(ТекущаяДатаОкончания) + 1;
			
			
			Если ДатаОкончанияОплаты < ТекущаяДатаНачала Тогда
				ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ОкончаниеИнтервалаОплаты);
			Иначе
				ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончанияОплаты, ОкончаниеИнтервалаОплаты);
			КонецЕсли;
			
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // СформироватьДвиженияПоНачислениям()

// Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
// Параметры:
//		РассчитываемыеТаблицы  - структура из элементов, соответствующих табличным частям документа. 
//				Значение Истина для каждого из элементов структуры означает необходимость расчета 
//				соответствующей табличной части документа
//		РежимПерерасчета - булево - признак вызов расчета при перерасчете документа
Процедура Рассчитать(РассчитываемыеТаблицы, РежимПерерасчета = Ложь) Экспорт
	
	//Перед вызовом процедуры документ должнен быть записан, движения должны быть удалены 
	
	Отказ = Ложь;
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если РассчитываемыеТаблицы.РасчетСреднего И ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда
		РасчетСреднего.Загрузить(ПервичныйБольничныйЛист.РасчетСреднего.Выгрузить());
		//vvv
		Если ПервичныйБольничныйЛист.ПериодРегистрации<ОбщегоНазначения.ПолучитьДатуДеноминации() Тогда
			Для каждого Стр Из РасчетСреднего Цикл
				Стр.Результат=ОбщегоНазначения.ОкруглитьПоВалюте(Стр.Результат/10000,Константы.ВалютаРегламентированногоУчета.Получить());
				Стр.НачисленнаяСумма=ОбщегоНазначения.ОкруглитьПоВалюте(Стр.НачисленнаяСумма/10000,Константы.ВалютаРегламентированногоУчета.Получить());
			КонецЦикла;
		КонецЕсли;
		//
		Записать();
		РассчитываемыеТаблицы.РасчетСреднего = Ложь;
	КонецЕсли;
	
	// Создадим наборы записей используемых регистров 
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
		
	НаборДополнительныеНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборДополнительныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	НаборРасчетСреднего = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборРасчетСреднего.Отбор.Регистратор.Значение = Ссылка;
	
	Если НЕ РассчитываемыеТаблицы.РасчетСреднего Тогда

		// получим реквизиты табличной части РасчетСреднего 
		
	

		Запрос = Новый Запрос;
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтрокаРасчетСреднего.НомерСтроки,
		|	СтрокаРасчетСреднего.Ссылка.Сотрудник КАК Сотрудник,
		|	СтрокаРасчетСреднего.Ссылка.Сотрудник.Физлицо КАК Физлицо,
		|	ВЫБОР
		|		КОГДА СтрокаРасчетСреднего.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА СтрокаРасчетСреднего.Ссылка.Организация
		|		ИНАЧЕ СтрокаРасчетСреднего.Ссылка.Организация.ГоловнаяОрганизация
		|	КОНЕЦ КАК Организация,
		|	СтрокаРасчетСреднего.ВидРасчета,
		|	СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
		|	ВЫБОР
		|		КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ)
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	КОНЕЦ КАК БазовыйПериодКонец,
		|	СтрокаРасчетСреднего.ОтработаноПоПятидневке,
		|	СтрокаРасчетСреднего.НормаПоПятидневке,
		|	СтрокаРасчетСреднего.ОтработаноДней,
		|	СтрокаРасчетСреднего.ОтработаноЧасов,
		|	СтрокаРасчетСреднего.ЧислоМесяцев,
		|	СтрокаРасчетСреднего.КоэффициентИндексации,
		|	СтрокаРасчетСреднего.Результат,
		|	СтрокаРасчетСреднего.ТарифнаяСтавкаПериода,
		|	СтрокаРасчетСреднего.ТекущаяТарифнаяСтавка,
		|	СтрокаРасчетСреднего.МесяцВыборки,
		|	СтрокаРасчетСреднего.КалендарныеДни,
		|	СтрокаРасчетСреднего.НачисленнаяСумма,
		|	СтрокаРасчетСреднего.НормаДней,
		|	СтрокаРасчетСреднего.НормаЧасов,
		|	СтрокаРасчетСреднего.НормаДнейПоГрафику,
		|	СтрокаРасчетСреднего.НормаЧасовПоГрафику
		|ИЗ
		|	Документ.НачислениеПоБольничномуЛисту.РасчетСреднего КАК СтрокаРасчетСреднего
		|
		|ГДЕ
		|	СтрокаРасчетСреднего.Ссылка = &ДокументСсылка";
		
		РезультатЗапросаПоРасчетСреднего = Запрос.Выполнить();
		
		
		
		ВыборкаПоРасчетСреднего = РезультатЗапросаПоРасчетСреднего.Выбрать();
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоРасчетСреднего.НомерСтроки) +
			""" табл. части ""Расчет среднего"": ";
			
			// Вид расчета
			Если НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.ВидРасчета) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ);
			КонецЕсли;
			
			// Дата начала базового периода
			Если НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.БазовыйПериодНачало) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ);
				// Дата окончания базового периода
			ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.БазовыйПериодКонец) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ);
			ИначеЕсли ВыборкаПоРасчетСреднего.БазовыйПериодКонец < ВыборкаПоРасчетСреднего.БазовыйПериодНачало Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ);
			КонецЕсли; 
			
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				Движение = НаборРасчетСреднего.Добавить();
				
				// Свойства
				Движение.ПериодРегистрации				= ВыборкаПоШапкеДокумента.ПериодРегистрации;
				Движение.БазовыйПериодНачало			= ВыборкаПоРасчетСреднего.БазовыйПериодНачало;
				Движение.БазовыйПериодКонец				= ВыборкаПоРасчетСреднего.БазовыйПериодКонец;
				Движение.ВидРасчета						= ВыборкаПоРасчетСреднего.ВидРасчета;
				
				// Измерения
				Движение.Сотрудник						= ВыборкаПоРасчетСреднего.Сотрудник;
				Движение.Физлицо						= ВыборкаПоРасчетСреднего.Физлицо;
				Движение.Организация					= ВыборкаПоРасчетСреднего.Организация;
				
				// Ресурсы
				Движение.Результат						= ВыборкаПоРасчетСреднего.Результат;
				Движение.ОтработаноПоПятидневке			= ВыборкаПоРасчетСреднего.ОтработаноПоПятидневке;
				Движение.НормаПоПятидневке				= ВыборкаПоРасчетСреднего.НормаПоПятидневке;
				Движение.ОтработаноДней					= ВыборкаПоРасчетСреднего.ОтработаноДней;
				Движение.ОтработаноЧасов				= ВыборкаПоРасчетСреднего.ОтработаноЧасов;
				Движение.НормаДней                      = ВыборкаПоРасчетСреднего.НормаДней;
				Движение.НормаЧасов                     = ВыборкаПоРасчетСреднего.НормаЧасов;
				Движение.НормаДнейПоГрафику             = ВыборкаПоРасчетСреднего.НормаДнейПоГрафику;
				Движение.НормаЧасовПоГрафику            = ВыборкаПоРасчетСреднего.НормаЧасовПоГрафику;
				Движение.КалендарныеДни					= ВыборкаПоРасчетСреднего.КалендарныеДни;
                Движение.НачисленнаяСумма				= ВыборкаПоРасчетСреднего.НачисленнаяСумма;
				
				
				// Реквизиты
				Движение.КоэффициентИндексации			= ВыборкаПоРасчетСреднего.КоэффициентИндексации;
				Движение.ЧислоМесяцев					= ВыборкаПоРасчетСреднего.ЧислоМесяцев;
				Движение.ПериодРасчетаСреднегоЗаработка	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка;
				Движение.ДатаНачалаСобытия				= ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
				Движение.СпособРасчета					= ВыборкаПоШапкеДокумента.СпособРасчета;
				Движение.ДатаНачалаРасчетногоПериода	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
				Движение.ДатаОкончанияРасчетногоПериода	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
				Движение.ВидОграниченияЗаработка		= ВыборкаПоШапкеДокумента.ВидОграниченияЗаработка;
				Движение.ТарифнаяСтавкаПериода          = ВыборкаПоРасчетСреднего.ТарифнаяСтавкаПериода;
				Движение.ТекущаяТарифнаяСтавка          = ВыборкаПоРасчетСреднего.ТекущаяТарифнаяСтавка;
				Движение.МесяцВыборки                   = ВыборкаПоРасчетСреднего.МесяцВыборки; 
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ Отказ Тогда
			НаборРасчетСреднего.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
		// Если это документ-исправление, тогда добавим сторно-записи из исправляемого документа.
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ПроведениеРасчетов.СформироватьСторноЗаписиПоПерерассчитываемомуДокументу(ПерерассчитываемыйДокумент, ВыборкаПоШапкеДокумента, НаборОсновныеНачисления, НаборДополнительныеНачисления);
	КонецЕсли;

	СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборОсновныеНачисления, НаборДополнительныеНачисления);

	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодРегистрации");
	ТаблицаСторноЗаписей.Колонки.ПериодРегистрацииСторно.Имя = "ПериодРегистрации";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияНачало");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияНачалоСторно.Имя = "ПериодДействияНачало";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияКонец");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияКонецСторно.Имя = "ПериодДействияКонец";
	ТаблицаСторноЗаписей.Колонки.Удалить("СторнируемыйДокумент");
	ТаблицаСторноЗаписей.Колонки.Регистратор.Имя = "СторнируемыйДокумент";

	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		// Заполним записи в наборе записей регистра
		// и в табличной части
		
		// новая запись движений
		Движение = НаборОсновныеНачисления.Добавить();

		ЗаполнитьЗначенияСвойств(Движение,СтрокаСторно);
		
		// Свойства
		Движение.Сторно	= Истина;
		Движение.Авторасчет	= Истина;
		//vvv
		Если (Движение.ПериодДействия<ОбщегоНазначения.ПолучитьДатуДеноминации()) Тогда
			
			Движение.Результат=ОбщегоНазначения.ОкруглитьПоВалюте(Движение.Результат/10000,Константы.ВалютаРегламентированногоУчета.Получить());
			ДеноминироватьПоказателиВидаРасчета(Движение);
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("ПериодРегистрации",СтрокаСторно.СторнируемыйДокумент.Метаданные()) ТОгда
			Если СтрокаСторно.СторнируемыйДокумент.ПериодРегистрации<ОбщегоНазначения.ПолучитьДатуДеноминации() ТОгда
				Движение.Результат=ОбщегоНазначения.ОкруглитьПоВалюте(Движение.Результат/10000,Константы.ВалютаРегламентированногоУчета.Получить());
				ДеноминироватьПоказателиВидаРасчета(Движение);
			КонецЕсли;			
		КонецЕсли;
		//

	КонецЦикла;
	
	Если ТаблицаСторноЗаписей.Количество() <> 0 Тогда
		// если таблица сторно-записей не пустая, получим таблицу
		// начислений зависисяцих от тех начислений, которые зарегистрированы,
		
		ТаблицаОсновныхНачислений = ПроведениеРасчетов.ПолучитьТаблицуЗависимыхНачисленийОсновные(НаборОсновныеНачисления.Выгрузить());
		Для каждого СтрокаТаблицы Из ТаблицаОсновныхНачислений Цикл
			
			Если СтрокаТаблицы.Начислить > 0 Тогда
				// начисление зависит от сторнирующего, добавим не сторно
				Движение = НаборОсновныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.СторнируемыйДокумент = Неопределено;
				Движение.Сторно	= Ложь;
				Движение.Авторасчет	= Истина;
			КонецЕсли;
			
			Если СтрокаТаблицы.Сторнировать > 0 Тогда
				// начисление зависит от сторнируемого, добавим сторно
				Движение = НаборОсновныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.Сторно	= Истина;
				Движение.Авторасчет	= Истина;
				//vvv
				Если (Движение.ПериодДействия<ОбщегоНазначения.ПолучитьДатуДеноминации()) Тогда 
					Движение.Результат=ОбщегоНазначения.ОкруглитьПоВалюте(Движение.Результат/10000,Константы.ВалютаРегламентированногоУчета.Получить());
					ДеноминироватьПоказателиВидаРасчета(Движение);
				ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("ПериодРегистрации",СтрокаСторно.СторнируемыйДокумент.Метаданные()) ТОгда
					Если СтрокаСторно.СторнируемыйДокумент.ПериодРегистрации<ОбщегоНазначения.ПолучитьДатуДеноминации() ТОгда	
						Движение.Результат=ОбщегоНазначения.ОкруглитьПоВалюте(Движение.Результат/10000,Константы.ВалютаРегламентированногоУчета.Получить());
						ДеноминироватьПоказателиВидаРасчета(Движение);
					КонецЕсли;					
				КонецЕсли;
				
				Движение = НаборОсновныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.СторнируемыйДокумент = Неопределено;
				Движение.Сторно	= Ложь;
				Движение.Авторасчет	= Истина;
				Если (Движение.ПериодДействия<ОбщегоНазначения.ПолучитьДатуДеноминации()) Тогда 
					Движение.Результат=ОбщегоНазначения.ОкруглитьПоВалюте(Движение.Результат/10000,Константы.ВалютаРегламентированногоУчета.Получить());
					ДеноминироватьПоказателиВидаРасчета(Движение);
				ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("ПериодРегистрации",СтрокаСторно.СторнируемыйДокумент.Метаданные()) ТОгда
					Если СтрокаСторно.СторнируемыйДокумент.ПериодРегистрации<ОбщегоНазначения.ПолучитьДатуДеноминации() ТОгда
						Движение.Результат=ОбщегоНазначения.ОкруглитьПоВалюте(Движение.Результат/10000,Константы.ВалютаРегламентированногоУчета.Получить());
						ДеноминироватьПоказателиВидаРасчета(Движение);
					КонецЕсли;									
				КонецЕсли;
				//
			КонецЕсли;	
			
		КонецЦикла;
		
		ТаблицаДополнительныхНачислений = ПроведениеРасчетов.ПолучитьТаблицуЗависимыхНачисленийДополнительные(ТаблицаСторноЗаписей);
		Для каждого СтрокаТаблицы Из ТаблицаДополнительныхНачислений Цикл
			
			Движение = НаборДополнительныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
			Движение.Сторно	= Истина;
			Движение.Авторасчет	= Истина;
			
			Движение = НаборДополнительныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
			Движение.СторнируемыйДокумент = Неопределено;
			Движение.Сторно	= Ложь;
			Движение.Авторасчет	= Истина;	
			
		КонецЦикла;
		
	КонецЕсли;

	// Очистим начисления
	Начисления.Очистить();
	
	// рассчитываем записи начислений и если надо, записи расчета среднего заработка
	Если РассчитываемыеТаблицы.Начисления Тогда
		СреднийРассчитан = Ложь;
		Если НаборОсновныеНачисления.Количество() <> 0 Тогда
			Если РассчитываемыеТаблицы.РасчетСреднего Тогда
				ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение,,Истина);
				СреднийРассчитан = Истина;

			Иначе
				ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
			КонецЕсли;
		КонецЕсли;
		
		
	
		Если  ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
			НаборОсновныеНачисления.Записать();	
			ПроведениеРасчетов.РассчитатьОграничение(Ссылка,НаборОсновныеНачисления);
		КонецЕсли;
		ПроведениеРасчетов.РассчитатьМинимальноеОграничение(Ссылка,НаборОсновныеНачисления);

      
 		
		// перепишем записи основных начислений в документ
		ЗаписиНачислений = НаборОсновныеНачисления.Выгрузить();
		ЗаписиНачислений.Колонки.ПериодДействияНачало.Имя = "ДатаНачала";
		ЗаписиНачислений.Колонки.ПериодДействияКонец.Имя = "ДатаОкончания";
		Начисления.Загрузить(ЗаписиНачислений);
		
		Если НаборДополнительныеНачисления.Количество() > 0 Тогда
			
			Если РассчитываемыеТаблицы.РасчетСреднего  И Не СреднийРассчитан Тогда
				ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДополнительныеНачисления, , НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
				СреднийРассчитан = Истина;
			Иначе
				ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДополнительныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
			КонецЕсли;
			
			// перепишем записи начислений в документ
			ЗаписиНачислений = НаборДополнительныеНачисления.Выгрузить();
			ЗаписиНачислений.Колонки.БазовыйПериодНачало.Имя = "ДатаНачала";
			ЗаписиНачислений.Колонки.БазовыйПериодКонец.Имя  = "ДатаОкончания";
			
			Для каждого СтрокаТаблицы Из ЗаписиНачислений Цикл
				СтрокаТабличнойЧасти = Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли РассчитываемыеТаблицы.РасчетСреднего Тогда
		СреднийРассчитан = Ложь;
     	НаборОсновныеНачисления.Записать();
		НаборДополнительныеНачисления.Записать();
		Если НаборОсновныеНачисления.Количество() > 0 Тогда
			ПроведениеРасчетов.СформироватьИЗаписатьДанныеРасчетаСреднего("ОсновныеНачисленияРаботниковОрганизаций", Ссылка, НаборРасчетСреднего);
			СреднийРассчитан = Истина;
		КонецЕсли;
		Если НаборДополнительныеНачисления.Количество() > 0  И Не СреднийРассчитан 	Тогда
			ПроведениеРасчетов.СформироватьИЗаписатьДанныеРасчетаСреднего("ДополнительныеНачисленияРаботниковОрганизаций", Ссылка, НаборРасчетСреднего);
		КонецЕсли;
	КонецЕсли;


    Если РассчитываемыеТаблицы.РасчетСреднего Тогда
	// перепишем записи расчета среднего заработка в документ
		РасчетСреднего.Загрузить(НаборРасчетСреднего.Выгрузить());
	КонецЕсли;
	
	
	
	Если РежимПерерасчета тогда
		// Для режима перерасчета запишем движения (набор записей расчета среднего уже записан)
		НаборОсновныеНачисления.Записать();
		Если НаборДополнительныеНачисления.Количество() > 0 Тогда
			НаборДополнительныеНачисления.Записать();
		КонецЕсли;
	Иначе	
		// Удаляем движения для режима интерактивного расчета
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		Если НаборДополнительныеНачисления.Количество() > 0 Тогда
			НаборДополнительныеНачисления.Очистить();
			НаборДополнительныеНачисления.Записать();
		КонецЕсли;
		
		НаборРасчетСреднего.Очистить();
		НаборРасчетСреднего.Записать();
	КонецЕсли;

	
	//РезультатЗапроса = Неопределено;
	//Если НЕ РассчитываемыеТаблицы.РасчетСреднего Тогда
	//	РезультатЗапроса = СформироватьЗапросПоРасчетСреднего();
	//КонецЕсли;
	//
	//Отказ = Не ПроведениеРасчетов.РассчитатьДокументСреднегоЗаработка(ЭтотОбъект, РассчитываемыеТаблицы, ВыборкаПоШапкеДокумента, РежимПерерасчета, РезультатЗапроса);
	
	//Если Не Отказ Тогда
	//	// Рассчитаем ограничение
	//	Если РассчитываемыеТаблицы.Начисления Тогда
	//		Записать();
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры // Рассчитать()

// Выполняет перерасчет по заданному списку физлиц
// Параметры
// 	Физлица - массив - ссылки на физлиц
// Возвращаемое значение
//  Нет
//
Процедура Перерассчитать(Физлица = Неопределено) Экспорт

	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	// Выполним полный перерасчет документа
	Рассчитать(Новый Структура("Начисления,РасчетСреднего",Истина,Истина), Истина);
	
	// Зафиксируем данные табличных частей после расчета
	Записать();

	Движения.НДФЛСведенияОДоходах.Очистить();
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Очистить();
	Движения.БУОсновныеНачисления.Очистить();
	Движения.ЕСНОсновныеНачисления.Очистить();
	Движения.ЕСНСведенияОДоходах.Очистить();
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	// Получение учетной политики по персоналу организации
	УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
	
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		// на основе данных табличной части "начисления" полностью перепишем регистры накопления НДФЛСведенияОДоходах и ВзаиморасчетыСРаботникамиОрганизаций
		ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетЗадолженностиПоМесяцам);
	КонецЦикла;
	
	Если ПособиеОтражаетсяВРеглУчетеТекущимДокументом Тогда
		АвтозаполнениеПроводок(ВыборкаПоШапкеДокумента,Ложь);
		Записать();
		ВыборкаПоОтражениеВУчете = СформироватьЗапросПоОтражениеВУчете().Выбрать();
		Пока ВыборкаПоОтражениеВУчете.Следующий() Цикл
			ДобавитьСтрокуОтраженияВУчете(ВыборкаПоШапкеДокумента, ВыборкаПоОтражениеВУчете);
		КонецЦикла;
	КонецЕсли;
	
	// записываем обновленные движения
	Для Каждого Набор Из Движения Цикл
		ТипНабораЗаписей = ТипЗнч(Набор);
		Если ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.НДФЛСведенияОДоходах") 
			Или ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.ВзаиморасчетыСРаботникамиОрганизаций") 
			Или ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.ЕСНСведенияОДоходах") 
			Или ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.БУОсновныеНачисления") 
			Или ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.ЕСНОсновныеНачисления") Тогда
			Набор.Записать();
		КонецЕсли;
	КонецЦикла;
	
	// Удалим записи перерасчета по которым выполнен перерасчет
	ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка);
	
КонецПроцедуры // Перерассчитать()

// Выполняет отражение сумм пособия во всех учетах
Функция АвтозаполнениеПроводок(ВыборкаПоШапкеДокумента = Неопределено, ФормироватьДвижения = Истина) Экспорт

	// Получим реквизиты шапки из запроса
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	
	// запрос по соответсвиям статей затрат начислений и статей затарт для 
    // отражения б/л за счет работодателя
	// соответствие будет использоваться только при отражении в учете
	//доли за счет работодателя по данным базовых начислений
    ДополнительныеСтатьиЗатратЗапрос = Новый Запрос(
    "ВЫБРАТЬ
    |   СоответствиеСтатейЗатратОтраженияЗарплатыВРеглУчете.ВидСтатьиЗатрат,
    |   СоответствиеСтатейЗатратОтраженияЗарплатыВРеглУчете.СтатьяЗатратНачисления,
    |   СоответствиеСтатейЗатратОтраженияЗарплатыВРеглУчете.СтатьяЗатрат
    |ИЗ
    |   РегистрСведений.СоответствиеСтатейЗатратОтраженияЗарплатыВРеглУчете КАК СоответствиеСтатейЗатратОтраженияЗарплатыВРеглУчете
    |ГДЕ
    |   СоответствиеСтатейЗатратОтраженияЗарплатыВРеглУчете.ВидСтатьиЗатрат = &ПособияЗаСчетРаботодателя");
    
    ДополнительныеСтатьиЗатратЗапрос.УстановитьПараметр("ДатаЗапроса", ПериодРегистрации);
    ДополнительныеСтатьиЗатратЗапрос.УстановитьПараметр("ПособияЗаСчетРаботодателя", Перечисления.ВидыДополнительныхСтатейЗатрат.ПособияЗаСчетРаботодателя);
    ДополнительныеСтатьиЗатрат = ДополнительныеСтатьиЗатратЗапрос.Выполнить().Выгрузить();
    
    ПараметрыПолученияСубконто = Новый Соответствие;
    ПараметрыПолученияСубконто[Тип("СправочникСсылка.СтатьиЗатрат")] = Новый Структура("ВидСтатьиЗатрат, ДополнительныеСтатьиЗатрат", 
                                    Перечисления.ВидыДополнительныхСтатейЗатрат.ПособияЗаСчетРаботодателя, 
                                    ДополнительныеСтатьиЗатрат);
	
	Если ФормироватьДвижения Тогда
		
		// Заголовок для сообщений об ошибках проведения.
		Заголовок = "Формирование списка проводок документа: " + СокрЛП(Ссылка);
		Отказ = Ложь;
		ПроверятьМестоРаботы = ВыборкаПоШапкеДокумента.ДатаНачалаСобытия >= мДатаЗакона180ФЗ;
		
		// перепишем данные из таблицы начислений в набор записей
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок, ПроверятьМестоРаботы);
			
			Если НЕ Отказ Тогда
				Если ВыборкаПоНачислениям.ОсновныеНачисления Тогда
					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
				Иначе
					ПроведениеРасчетов.ДобавитьСтрокуДополнительныхНачислений(Движения.ДополнительныеНачисленияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// получим реквизиты табличной части
		ВыборкаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего().Выбрать();
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ, Заголовок, ПроверятьМестоРаботы);
			
			Если НЕ Отказ Тогда
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Движения.РасчетСреднегоЗаработка);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Отказ Тогда
			Возврат Ложь
		КонецЕсли;
		
		Для Каждого Набор Из Движения Цикл
			Если ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") 
				или ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.РасчетСреднегоЗаработка") Тогда
				Набор.Записать();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли; 
	
	мЕНВД = Ложь;
	Если ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
		// определим налоговый режим
		БухгалтерскийИНалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), КонецМесяца(ПериодРегистрации), Организация);
		УчетнаяПолитика = глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете")[КонецМесяца(ПериодРегистрации)][Организация];
		мУСН = УчетнаяПолитика.УСН;
		мОбъектНалогообложенияУСН = УчетнаяПолитика.ОбъектНалогообложенияУСН;
		мЕНВД = УчетнаяПолитика.ОрганизацияЯвляетсяПлательщикомЕНВД;
		мФСС_БЛ = УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС;
	КонецЕсли;
	
	УказаноОтражениеВУчетеДляРаботодателя = ВыборкаПоШапкеДокумента.УказаноОтражениеВУчетеДляРаботодателя;
	ВторойКалендарныйДень = ВыборкаПоШапкеДокумента.ДатаНачалаСобытия + мДлинаСуток;
	ТретийКалендарныйДень = ВторойКалендарныйДень + мДлинаСуток;
	
	// для всех болезней, кроме прозводственного травматизма может потребоваться расчетная база
	// расчетная база используется для вычисления доли ЕНВД и для распределения по счетам затрат
	// доли пособия за счет работодателя, когда явно не указан способ отражения пособия за счет работодателя:
	// - два календарных дня при ОСН
	// - при УСН доходы минус расходы, добровольные взносы не уплачиваются
	
	НадоЧитатьРасчетнуюБазу = ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве 
								И ((мЕНВД И ВыборкаПоШапкеДокумента.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления)
									ИЛИ (Не УказаноОтражениеВУчетеДляРаботодателя	
										И НЕ мУСН
										И (ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание ИЛИ ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаВБыту))
									ИЛИ (Не УказаноОтражениеВУчетеДляРаботодателя
										И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам
										И мУСН и НЕ мФСС_БЛ
										И мОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы));
									    //
								
	// основная выборка - по ней ведем обход и вводим записи движений
	РезультатДанныеУчета = ПолучитьДанныеУчета(ВыборкаПоШапкеДокумента, НадоЧитатьРасчетнуюБазу);
	ДанныеУчета = РезультатДанныеУчета.Выбрать();
	
	ПродолжатьОбработку = ДанныеУчета.Следующий(); 
	Успешно = Истина;
	
	НаборЗаписей = ОтражениеВУчете.ВыгрузитьКолонки();
	
	ПодпадаетПодЕНВД = 0;
	
	Если ПродолжатьОбработку и мЕНВД И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
		
		Если ВыборкаПоШапкеДокумента.СтратегияОтраженияВУчете <> Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления Тогда
			
			ПодпадаетПодЕНВД = ВыборкаПоШапкеДокумента.ПроцентЕНВД;
			
		Иначе
			
			ОбщаяБазаРаспределенияСтроки = 0;
			БазаЕНВД = 0;
			
			// вспомогательная выборка - по ней ведем суммирование базовых результатов
			ДанныеУчетаВспомогательные = РезультатДанныеУчета.Выбрать();
			ДанныеУчетаВспомогательные.Следующий();
			ТекущийНомерСтроки = ДанныеУчетаВспомогательные.НомерСтроки;
			
			// суммируем базовые ресурсы по текущей строке набора записей
			Пока ДанныеУчетаВспомогательные.НомерСтроки = ТекущийНомерСтроки Цикл
				Если НЕ ДанныеУчетаВспомогательные.Сторно Тогда
					Если ДанныеУчетаВспомогательные.РезультатБаза = NULL Тогда
						Успешно = Ложь;
					Иначе
						ОбщаяБазаРаспределенияСтроки = ОбщаяБазаРаспределенияСтроки + ДанныеУчетаВспомогательные.РезультатБаза;
						Если ДанныеУчетаВспомогательные.ЭтоЕНВД Тогда
							БазаЕНВД = БазаЕНВД + ДанныеУчетаВспомогательные.РезультатБаза
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
				Если Не ДанныеУчетаВспомогательные.Следующий() Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ОбщаяБазаРаспределенияСтроки = 0 Тогда
				ДоляЕНВД = 0
			Иначе
				ДоляЕНВД = БазаЕНВД / ОбщаяБазаРаспределенияСтроки
			КонецЕсли;
			ПодпадаетПодЕНВД = ДоляЕНВД * 100;
		КонецЕсли;
		
	КонецЕсли;
	
	// вспомогательная выборка - по ней ведем суммирование базовых результатов
	ДанныеУчетаВспомогательные = РезультатДанныеУчета.Выбрать();
	
	// структура поиска для позиционирования в ДанныеНалоговогоУчетаВспомогательные
	// при необходимости суммирования "базовых" ресурсов
	СтруктураПоиска = Новый Структура("НомерСтроки");
	
	#Если Клиент Тогда
		КомментарийОшибкаСбораРасчетнойБазы = "";
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	#КонецЕсли

	Пока ПродолжатьОбработку Цикл
		
		Если ДанныеУчета.Сторно Тогда
			
			ТекущийНомерСтроки = ДанныеУчета.НомерСтроки;
			// позиционируемся во вспомогательной выборке по запросу для суммирования "базовых" данных
			СтруктураПоиска.НомерСтроки = ТекущийНомерСтроки;
			Если ДанныеУчетаВспомогательные.НомерСтроки <> ТекущийНомерСтроки Тогда
				// ищем следующую строку во спомогательной выборке если она не является искомой	
				ДанныеУчетаВспомогательные.НайтиСледующий(СтруктураПоиска);
			КонецЕсли;
			
			СуммаПоСтроке = 0;
			
			// суммируем базовые ресурсы по текущей строке набора записей
			Пока ДанныеУчетаВспомогательные.НомерСтроки = ТекущийНомерСтроки Цикл
				Если ДанныеУчетаВспомогательные.РезультатСторно = NULL Тогда
					Успешно = Ложь;
				Иначе
					СуммаПоСтроке = СуммаПоСтроке + ДанныеУчетаВспомогательные.РезультатСторно;
				КонецЕсли;
				Если Не ДанныеУчетаВспомогательные.Следующий() Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// суммарная доля, которую уже "разбросали" на строки с одинаковым номером строки
			СуммарнаяДоля = 0;
			// полный результат
			ПолныйРезультат = ДанныеУчета.Результат;
			
			СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
			
			// обходим строки и вычисляем долю результата по базовым записям
			ПерваяИзГруппыСтрок = Истина;
			Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
				// если это не первая из группы "базовых" строк по одной строке основного регистра
				// то создаем очередную строку движений
					
				Если Не ПерваяИзГруппыСтрок Тогда
					СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
				Иначе
					ПерваяИзГруппыСтрок = Ложь;
				КонецЕсли;
				
				Если СуммаПоСтроке = 0 Тогда
					Доля = 0;
				Иначе
					Если ДанныеУчета.РезультатСторно = NULL Тогда
						Успешно = Ложь;
						Доля = 0;
					Иначе
						Доля = ПолныйРезультат * ДанныеУчета.РезультатСторно / СуммаПоСтроке;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаДанных.СчетДт 	 = ДанныеУчета.СчетДт;
				СтрокаДанных.СубконтоДт1 = ДанныеУчета.СубконтоДт1;
				СтрокаДанных.СубконтоДт2 = ДанныеУчета.СубконтоДт2;
				СтрокаДанных.СубконтоДт3 = ДанныеУчета.СубконтоДт3;
				СтрокаДанных.СчетДтНУ	 = ДанныеУчета.СчетДтНУ;
				СтрокаДанных.СубконтоДтНУ1 = ДанныеУчета.СубконтоДтНУ1;
				СтрокаДанных.СубконтоДтНУ2 = ДанныеУчета.СубконтоДтНУ2;
				СтрокаДанных.СубконтоДтНУ3 = ДанныеУчета.СубконтоДтНУ3;
				
				СтрокаДанных.СчетКт 	 = ДанныеУчета.СчетКт;
				СтрокаДанных.СубконтоКт1 = ДанныеУчета.СубконтоКт1;
				СтрокаДанных.СубконтоКт2 = ДанныеУчета.СубконтоКт2;
				СтрокаДанных.СубконтоКт3 = ДанныеУчета.СубконтоКт3;
				СтрокаДанных.СчетКтНУ	 = ДанныеУчета.СчетКтНУ;
				СтрокаДанных.СубконтоКтНУ1 = ДанныеУчета.СубконтоКтНУ1;
				СтрокаДанных.СубконтоКтНУ2 = ДанныеУчета.СубконтоКтНУ2;
				СтрокаДанных.СубконтоКтНУ3 = ДанныеУчета.СубконтоКтНУ3;
				
				СтрокаДанных.КодДоходаЕСН   = ДанныеУчета.КодДоходаЕСН;
				СтрокаДанных.ОблагаетсяЕНВД = ДанныеУчета.ОблагаетсяЕНВД;
				
				СтрокаДанных.Результат = ?(ПолныйРезультат > 0,Мин(Доля, ПолныйРезультат - СуммарнаяДоля),Макс(Доля,ПолныйРезультат - СуммарнаяДоля));
				СуммарнаяДоля = СуммарнаяДоля + СтрокаДанных.Результат;
				
				Если Не ДанныеУчета.Следующий() Тогда
					ПродолжатьОбработку = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			// ошибки округления складываются на последнюю запись из группы базовых записей
			СтрокаДанных.Результат = СтрокаДанных.Результат + ПолныйРезультат - СуммарнаяДоля;
			
		
		ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда // отражение в учете не зависит от налогового режима
			
			ТекущийНомерСтроки = ДанныеУчета.НомерСтроки;
			
			СуммаПоСтроке = ДанныеУчета.Результат;
			СуммаПоСтрокеЕНВД = 0;
			
			Если СуммаПоСтроке = 0 Тогда
				Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
					Если Не ДанныеУчета.Следующий() Тогда
						ПродолжатьОбработку = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
			
			СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ;
			СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
			СтрокаДанных.СубконтоДт2 = Неопределено;
			СтрокаДанных.СубконтоДт3 = Неопределено;
			СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
			СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
			СтрокаДанных.СубконтоКт2 = Неопределено;
			СтрокаДанных.СубконтоКт3 = Неопределено;
			СтрокаДанных.СчетДтНУ	 = Неопределено;
			СтрокаДанных.СчетКтНУ	 = Неопределено;
			СтрокаДанных.СубконтоДтНУ1 = Неопределено;
			СтрокаДанных.СубконтоДтНУ2 = Неопределено;
			СтрокаДанных.СубконтоДтНУ3 = Неопределено;
			СтрокаДанных.СубконтоКтНУ1 = Неопределено;
			СтрокаДанных.СубконтоКтНУ2 = Неопределено;
			СтрокаДанных.СубконтоКтНУ3 = Неопределено;
			СтрокаДанных.ОтражениеВУСН	 = Неопределено;		
			СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
			
			Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
				Если Не ДанныеУчета.Следующий() Тогда
					ПродолжатьОбработку = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
						
			ТекущийНомерСтроки = ДанныеУчета.НомерСтроки;
			// позиционируемся во вспомогательной выборке по запросу для суммирования "базовых" данных
			СтруктураПоиска.НомерСтроки = ТекущийНомерСтроки;
			Если ДанныеУчетаВспомогательные.НомерСтроки <> ТекущийНомерСтроки Тогда
				// ищем следующую строку во спомогательной выборке если она не является искомой	
				ДанныеУчетаВспомогательные.НайтиСледующий(СтруктураПоиска);
			КонецЕсли;
			
			СуммаПоСтроке = 0;
			СуммаПоСтрокеЕНВД = 0;
			Если НадоЧитатьРасчетнуюБазу и ВыборкаПоШапкеДокумента.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления Тогда
				// суммируем базовые ресурсы по текущей строке набора записей
				Пока ДанныеУчетаВспомогательные.НомерСтроки = ТекущийНомерСтроки Цикл
					Если ДанныеУчетаВспомогательные.РезультатБаза = NULL Тогда
						Успешно = Ложь;
					Иначе
						СуммаПоСтроке = СуммаПоСтроке + ДанныеУчетаВспомогательные.РезультатБаза;
						Если ДанныеУчетаВспомогательные.ЭтоЕНВД Тогда
							СуммаПоСтрокеЕНВД = СуммаПоСтрокеЕНВД + ДанныеУчетаВспомогательные.РезультатБаза;
						КонецЕсли;						
					КонецЕсли;
					Если Не ДанныеУчетаВспомогательные.Следующий() Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли НадоЧитатьРасчетнуюБазу и ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
				// суммируем базовые ресурсы по текущей строке набора записей
				// сюда попали когда для БЛ доля ЕНВД определяется по текущему месяцу, а доля за счет работодателя распределяется по базовым начислениям
				Пока ДанныеУчетаВспомогательные.НомерСтроки = ТекущийНомерСтроки Цикл
					Если ДанныеУчетаВспомогательные.РезультатБаза = NULL Тогда
						Успешно = Ложь;
					Иначе 
						СуммаПоСтроке = СуммаПоСтроке + ДанныеУчетаВспомогательные.РезультатБаза;
					КонецЕсли;
					Если Не ДанныеУчетаВспомогательные.Следующий() Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				СуммаПоСтрокеЕНВД = СуммаПоСтроке * ВыборкаПоШапкеДокумента.ПроцентЕНВД / 100;
			ИначеЕсли ВыборкаПоШапкеДокумента.ПроцентЕНВД = 100 Тогда
				СуммаПоСтроке = ДанныеУчета.Результат;
				СуммаПоСтрокеЕНВД = ДанныеУчета.Результат;
			ИначеЕсли ВыборкаПоШапкеДокумента.ПроцентЕНВД = 0 Тогда
				СуммаПоСтроке = ДанныеУчета.Результат;
			Иначе
				СуммаПоСтроке = ДанныеУчета.Результат;
				СуммаПоСтрокеЕНВД = ДанныеУчета.Результат * ВыборкаПоШапкеДокумента.ПроцентЕНВД / 100;
			КонецЕсли;
			
			Если Не Успешно Тогда
				// не удалось собрать данные отражения в учете, необходимо разобраться зачем мы собирали расчетную базу
				// и сообщить пользователю о проблемах
				
				// ДоляЕНВДПоБазе - необходимо было собирать долю ЕНВД по базовым начислениям
				ДоляЕНВДПоБазе =  мЕНВД и ВыборкаПоШапкеДокумента.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления;
				
				// ДоляРаботодателяПоБазе - необходимо было собирать долю пособия за счет работодателя по базе
				// данные по базе нужны для 2-х календарных дней и для доли за счет работодателя при УСН доходы минус расходы
				ДоляРаботодателяПоБазе = Не УказаноОтражениеВУчетеДляРаботодателя 
					и ((НЕ мУСН и (ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание
					ИЛИ ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаВБыту)
					и ДанныеУчета.ДоляБЛЗаСчетРаботодателя <>0)
					или (ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам
					и мУСН и НЕ мФСС_БЛ и мОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы));
				
				Если Не ДоляЕНВДПоБазе и Не ДоляРаботодателяПоБазе Тогда
						
					// данные собранные по базе не нужны, можно использовать результат запроса по шапке документа
					Успешно = Истина;
					Если ВыборкаПоШапкеДокумента.ПроцентЕНВД = 100 Тогда
						СуммаПоСтроке = ДанныеУчета.Результат;
						СуммаПоСтрокеЕНВД = ДанныеУчета.Результат;
					ИначеЕсли ВыборкаПоШапкеДокумента.ПроцентЕНВД = 0 Тогда
						СуммаПоСтроке = ДанныеУчета.Результат;
					Иначе
						СуммаПоСтроке = ДанныеУчета.Результат;
						СуммаПоСтрокеЕНВД = ДанныеУчета.Результат * ВыборкаПоШапкеДокумента.ПроцентЕНВД / 100;
					КонецЕсли;
					
				Иначе
					
					Если Не ДоляЕНВДПоБазе Тогда
						// данные по базе нужны только для распределения по счетам затрат доли пособия за счет работодателя
						// соберм суммы и продолжим работу, при этом счет затрат для пособия за счет работодателя будет пустой
						Если ВыборкаПоШапкеДокумента.ПроцентЕНВД = 100 Тогда
							СуммаПоСтроке = ДанныеУчета.Результат;
							СуммаПоСтрокеЕНВД = ДанныеУчета.Результат;
						ИначеЕсли ВыборкаПоШапкеДокумента.ПроцентЕНВД = 0 Тогда
							СуммаПоСтроке = ДанныеУчета.Результат;
						Иначе
							СуммаПоСтроке = ДанныеУчета.Результат;
							СуммаПоСтрокеЕНВД = ДанныеУчета.Результат * ВыборкаПоШапкеДокумента.ПроцентЕНВД / 100;
						КонецЕсли;
					КонецЕсли;
					
					#Если Клиент Тогда
												
						Если ПустаяСтрока(КомментарийОшибкаСбораРасчетнойБазы) Тогда 
							
							//Добавим родительскую сторку
							ТекстСообщения = "Внимание! Нет данных для отражения пособия в учете.
							|Отсутствуют данные по отражению зарплаты в регламентированном учете за расчетный период.";
							КомментарийОшибкаСбораРасчетнойБазы = ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.Ошибка);
							
							Если Не ПособиеОтражаетсяВРеглУчетеТекущимДокументом и (ДоляЕНВДПоБазе или ДоляРаботодателяПоБазе) Тогда
								ТекстСообщения = "Рекомендуется зарегистрировать отражение пособия в учете текущим документом.
								|На закладке ""Отражение пособия в учете"" установите ""Отражать в учете по данным текущего документа""
								|и заполните таблицу ""Проводки и данные для ЕСН""";	
								ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.ВажнаяИнформация,,КомментарийОшибкаСбораРасчетнойБазы);
							КонецЕсли;
							
							Если ДоляЕНВДПоБазе Тогда
								ТекстСообщения = "Нет данных для определения доли ЕНВД пособия. Стратегия определения доли ЕНВД - ""по базовым начислениям "" задана в ";
								Если Не ПособиеОтражаетсяВРеглУчетеТекущимДокументом Тогда
									ТекстСообщения = ТекстСообщения + "начислении: " + ДанныеУчета.ВидРасчетаНаименование;	
								Иначе
									ТекстСообщения = ТекстСообщения + "документе";
								КонецЕсли;	
								ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.ВажнаяИнформация,,КомментарийОшибкаСбораРасчетнойБазы);
							КонецЕсли;	
							
							Если ДоляРаботодателяПоБазе Тогда
								ТекстСообщения = "Нет данных для распределения доли пособия за счет работодателя по счетам затрат.";
								ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.ВажнаяИнформация,,КомментарийОшибкаСбораРасчетнойБазы);
							КонецЕсли;
							
						КонецЕсли;
						
					#КонецЕсли
					
				КонецЕсли;
				
			КонецЕсли;	
			
			Если СуммаПоСтроке = 0 Тогда
				Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
					Если Не ДанныеУчета.Следующий() Тогда
						ПродолжатьОбработку = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
			
			// доля пособия за счет работодателя за первые два календарных дня может быть
			// при этом ДоляБЛЗаСчетРаботодателя может быть равна нулю по причине отсутствия ФПД
			ЕстьДоляБЛЗаСчетРаботодателя = ТретийКалендарныйДень > ДанныеУчета.ПериодДействияНачало;
			
			Если мУСН и НЕ мФСС_БЛ Тогда  // налоговые режимы: УСН и УСН+ЕНВД, без уплаты добровольных взносов
				
				Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
					
					Если Не мЕНВД Или СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_УСН;
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;		
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						Если мЕНВД И СуммаПоСтрокеЕНВД <> 0 Тогда
							СтрокаДанных.Результат = ДанныеУчета.Результат - Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
						КонецЕсли;
					КонецЕсли;
					
					Если мЕНВД И СуммаПоСтрокеЕНВД <> 0 Тогда
						Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
							СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
						КонецЕсли;
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД; 
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;		
						СтрокаДанных.Результат	 = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						СтрокаДанных.ОблагаетсяЕНВД = Истина;
					КонецЕсли;
					
					Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
						Если Не ДанныеУчета.Следующий() Тогда
							ПродолжатьОбработку = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				Иначе // не травма на производстве и не отпуск по беременности и родам
					
					ВПределахММОТ = ?(ДанныеУчета.Сторно,Макс(ДанныеУчета.Результат,ДанныеУчета.ВПределахММОТ),Мин(ДанныеУчета.Результат,ДанныеУчета.ВПределахММОТ));
					СтрокаДанных.Результат	 = ВПределахММОТ;
					
					Если Не мЕНВД Или СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
						// доля УСН
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_УСН; 
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;		
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						Если мЕНВД И СуммаПоСтрокеЕНВД <> 0 Тогда
							СтрокаДанных.Результат	 = ВПределахММОТ - Окр(ВПределахММОТ * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
						КонецЕсли;
					КонецЕсли;
					
					Если мЕНВД И СуммаПоСтрокеЕНВД <> 0 Тогда
						Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
							СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
						КонецЕсли;
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД; 
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;
						СтрокаДанных.Результат	 = Окр(ВПределахММОТ * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						СтрокаДанных.ОблагаетсяЕНВД = Истина;
					КонецЕсли;
					
					// полный результат
					ПолныйРезультат = ДанныеУчета.Результат - ВПределахММОТ;
					
					Если мЕНВД И СуммаПоСтрокеЕНВД <> 0 и ПолныйРезультат <> 0 Тогда
						СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ЕНВД; 
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;		
						СтрокаДанных.Результат	 = Окр(ПолныйРезультат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
						СтрокаДанных.ОблагаетсяЕНВД = Истина;
						ПолныйРезультат = ПолныйРезультат - Окр(ПолныйРезультат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
					КонецЕсли;
					
					Если мОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда
						Если ПолныйРезультат <> 0 Тогда
							СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
							СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ЕНприУСН;
							СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
							СтрокаДанных.СубконтоДт2 = Неопределено;
							СтрокаДанных.СубконтоДт3 = Неопределено;
							СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
							СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
							СтрокаДанных.СубконтоКт2 = Неопределено;
							СтрокаДанных.СубконтоКт3 = Неопределено;
							СтрокаДанных.СчетДтНУ	 = Неопределено;
							СтрокаДанных.СчетКтНУ	 = Неопределено;
							СтрокаДанных.СубконтоДтНУ1 = Неопределено;
							СтрокаДанных.СубконтоДтНУ2 = Неопределено;
							СтрокаДанных.СубконтоДтНУ3 = Неопределено;
							СтрокаДанных.СубконтоКтНУ1 = Неопределено;
							СтрокаДанных.СубконтоКтНУ2 = Неопределено;
							СтрокаДанных.СубконтоКтНУ3 = Неопределено;
							СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;		
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
							СтрокаДанных.Результат	 = ПолныйРезультат
						КонецЕсли;
						
						Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
							Если Не ДанныеУчета.Следующий() Тогда
								ПродолжатьОбработку = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					Иначе 
						Если ПолныйРезультат <> 0 Тогда 
							СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
							Если УказаноОтражениеВУчетеДляРаботодателя Тогда
								ЗаполнитьЗначенияСвойств(СтрокаДанных,ВыборкаПоШапкеДокумента,
								"СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1," +
								"СчетДтНУ,СубконтоДтНУ1,СубконтоДтНУ2,СубконтоДтНУ3,СчетКтНУ,СубконтоКтНУ1,ОтражениеВУСН");
								СтрокаДанных.Результат	 = ПолныйРезультат;
								СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
								Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
									Если Не ДанныеУчета.Следующий() Тогда
										ПродолжатьОбработку = Ложь;
										Прервать;
									КонецЕсли;
								КонецЦикла;
							Иначе // обходим строки и вычисляем долю результата по базовым записям
								// суммарная доля, которую уже "разбросали" на строки с одинаковым регистратором и номером строки
								СуммарнаяДоля = 0;
								ПерваяИзГруппыСтрок = Истина;
								Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
									Если Не ДанныеУчета.ЭтоЕНВД Тогда
										// если это не первая из группы "базовых" строк по одной строке основного регистра
										// то создаем очередную строку движений
										Если Не ПерваяИзГруппыСтрок Тогда
											СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
										Иначе
											ПерваяИзГруппыСтрок = Ложь;
										КонецЕсли;
										
										Если СуммаПоСтроке = 0 Тогда
											Доля = 0;
										Иначе
											Если ДанныеУчета.РезультатБаза = NULL Тогда
												Успешно = Ложь;
												Доля = 0;
											Иначе
												Доля = ПолныйРезультат * ДанныеУчета.РезультатБаза / (СуммаПоСтроке - СуммаПоСтрокеЕНВД);
											КонецЕсли;
										КонецЕсли;
										
										Если ДанныеУчета.СчетДтРазрез = NULL Тогда
											Успешно = Ложь;
										Иначе
											СтрокаДанных.СчетДт 	 = ДанныеУчета.СчетДтРазрез;
											СтрокаДанных.СубконтоДт1 = ПолучитьСубконто(ДанныеУчета.СубконтоДт1Разрез, ПараметрыПолученияСубконто);
											СтрокаДанных.СубконтоДт2 = ПолучитьСубконто(ДанныеУчета.СубконтоДт2Разрез, ПараметрыПолученияСубконто);
											СтрокаДанных.СубконтоДт3 = ПолучитьСубконто(ДанныеУчета.СубконтоДт3Разрез, ПараметрыПолученияСубконто);
											СтрокаДанных.СчетДтНУ	 = ДанныеУчета.СчетДтНУРазрез;
											СтрокаДанных.СубконтоДтНУ1 = ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ1Разрез, ПараметрыПолученияСубконто);
											СтрокаДанных.СубконтоДтНУ2 = ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ2Разрез, ПараметрыПолученияСубконто);
											СтрокаДанных.СубконтоДтНУ3 = ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ3Разрез, ПараметрыПолученияСубконто);
										КонецЕсли;
										
										Если ДанныеУчета.СчетКтРазрез = NULL Тогда
											Успешно = Ложь;
										Иначе
											СтрокаДанных.СчетКт 	 = ДанныеУчета.СчетКтРазрез;
											СтрокаДанных.СубконтоКт1 = ДанныеУчета.СубконтоКт1Разрез;
											СтрокаДанных.СубконтоКт2 = ДанныеУчета.СубконтоКт2Разрез;
											СтрокаДанных.СубконтоКт3 = ДанныеУчета.СубконтоКт3Разрез;
											СтрокаДанных.СчетКтНУ	 = ДанныеУчета.СчетКтНУРазрез;
											СтрокаДанных.СубконтоКтНУ1 = ДанныеУчета.СубконтоКтНУ1Разрез;
											СтрокаДанных.СубконтоКтНУ2 = Неопределено;
											СтрокаДанных.СубконтоКтНУ3 = Неопределено;
											СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.Принимаются;		
										КонецЕсли;
										СтрокаДанных.Результат = ?(ПолныйРезультат > 0,Мин(Доля,ПолныйРезультат - СуммарнаяДоля),Макс(Доля,ПолныйРезультат - СуммарнаяДоля));
										СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
										СуммарнаяДоля = СуммарнаяДоля + СтрокаДанных.Результат;
									КонецЕсли;
									Если Не ДанныеУчета.Следующий() Тогда
										ПродолжатьОбработку = Ложь;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								// ошибки округления складываются на последнюю запись из группы базовых записей
								СтрокаДанных.Результат = СтрокаДанных.Результат + ПолныйРезультат - СуммарнаяДоля;
							КонецЕсли;
						Иначе	
							Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
								Если Не ДанныеУчета.Следующий() Тогда
									ПродолжатьОбработку = Ложь;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли мЕНВД и СуммаПоСтрокеЕНВД <> 0 и НЕ мФСС_БЛ Тогда // налоговые режимы: ОСН+ЕНВД, без уплаты добровольных взносов
				
				Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
					Если СуммаПоСтрокеЕНВД <> СуммаПоСтроке  Тогда
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.Результат	 = ДанныеУчета.Результат - Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
					КонецЕсли;
					СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД; 
					СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
					СтрокаДанных.СубконтоДт2 = Неопределено;
					СтрокаДанных.СубконтоДт3 = Неопределено;
					СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
					СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
					СтрокаДанных.СубконтоКт2 = Неопределено;
					СтрокаДанных.СубконтоКт3 = Неопределено;
					СтрокаДанных.СчетДтНУ	 = Неопределено;
					СтрокаДанных.СчетКтНУ	 = Неопределено;
					СтрокаДанных.СубконтоДтНУ1 = Неопределено;
					СтрокаДанных.СубконтоДтНУ2 = Неопределено;
					СтрокаДанных.СубконтоДтНУ3 = Неопределено;
					СтрокаДанных.СубконтоКтНУ1 = Неопределено;
					СтрокаДанных.СубконтоКтНУ2 = Неопределено;
					СтрокаДанных.СубконтоКтНУ3 = Неопределено;
					СтрокаДанных.Результат	 = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
					СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
					СтрокаДанных.ОблагаетсяЕНВД = Истина;
					Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
						Если Не ДанныеУчета.Следующий() Тогда
							ПродолжатьОбработку = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли  ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание
					И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаВБыту Тогда
					Если СуммаПоСтрокеЕНВД <> СуммаПоСтроке  Тогда
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.Результат	 = ДанныеУчета.Результат - Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
					КонецЕсли;		
					СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД; 
					СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
					СтрокаДанных.СубконтоДт2 = Неопределено;
					СтрокаДанных.СубконтоДт3 = Неопределено;
					СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
					СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
					СтрокаДанных.СубконтоКт2 = Неопределено;
					СтрокаДанных.СубконтоКт3 = Неопределено;
					СтрокаДанных.СчетДтНУ	 = Неопределено;
					СтрокаДанных.СчетКтНУ	 = Неопределено;
					СтрокаДанных.СубконтоДтНУ1 = Неопределено;
					СтрокаДанных.СубконтоДтНУ2 = Неопределено;
					СтрокаДанных.СубконтоДтНУ3 = Неопределено;
					СтрокаДанных.СубконтоКтНУ1 = Неопределено;
					СтрокаДанных.СубконтоКтНУ2 = Неопределено;
					СтрокаДанных.СубконтоКтНУ3 = Неопределено;
					ВПределахММОТ	 = ?(ДанныеУчета.Сторно,Макс(Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2),ДанныеУчета.ВПределахММОТ),Мин(Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2),ДанныеУчета.ВПределахММОТ));
					СтрокаДанных.Результат	 = ВПределахММОТ;
					СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
					СтрокаДанных.ОблагаетсяЕНВД = Истина;
					Если Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2) - ВПределахММОТ <> 0 Тогда
						СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ЕНВД; 
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.Результат = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2) - ВПределахММОТ;
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
						СтрокаДанных.ОблагаетсяЕНВД = Истина;
					КонецЕсли;
					
					Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
						Если Не ДанныеУчета.Следующий() Тогда
							ПродолжатьОбработку = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				Иначе // ОбщееЗаболевание или ТравмаВБыту
					
					ДоляПособияЕНВД = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
					
					// это доля возмещаемая ФСС в части ЕНВД в пределах ММОТ
					ВПределахММОТ = ?(ДанныеУчета.Сторно,Макс(ДоляПособияЕНВД, ДанныеУчета.ВПределахММОТ),Мин(ДоляПособияЕНВД, ДанныеУчета.ВПределахММОТ));
					
					СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД; 
					СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
					СтрокаДанных.СубконтоДт2 = Неопределено;
					СтрокаДанных.СубконтоДт3 = Неопределено;
					СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
					СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
					СтрокаДанных.СубконтоКт2 = Неопределено;
					СтрокаДанных.СубконтоКт3 = Неопределено;
					СтрокаДанных.СчетДтНУ	 = Неопределено;
					СтрокаДанных.СчетКтНУ	 = Неопределено;
					СтрокаДанных.СубконтоДтНУ1 = Неопределено;
					СтрокаДанных.СубконтоДтНУ2 = Неопределено;
					СтрокаДанных.СубконтоДтНУ3 = Неопределено;
					СтрокаДанных.СубконтоКтНУ1 = Неопределено;
					СтрокаДанных.СубконтоКтНУ2 = Неопределено;
					СтрокаДанных.СубконтоКтНУ3 = Неопределено;
					СтрокаДанных.Результат	 = ВПределахММОТ;
					СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
					СтрокаДанных.ОблагаетсяЕНВД = Истина;
					
					// зарегистрируем долю за счет работодателя в части ЕНВД
					СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
					СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ЕНВД; 
					СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
					СтрокаДанных.СубконтоДт2 = Неопределено;
					СтрокаДанных.СубконтоДт3 = Неопределено;
					СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
					СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
					СтрокаДанных.СубконтоКт2 = Неопределено;
					СтрокаДанных.СубконтоКт3 = Неопределено;
					СтрокаДанных.СчетДтНУ	 = Неопределено;
					СтрокаДанных.СчетКтНУ	 = Неопределено;
					СтрокаДанных.СубконтоДтНУ1 = Неопределено;
					СтрокаДанных.СубконтоДтНУ2 = Неопределено;
					СтрокаДанных.СубконтоДтНУ3 = Неопределено;
					СтрокаДанных.СубконтоКтНУ1 = Неопределено;
					СтрокаДанных.СубконтоКтНУ2 = Неопределено;
					СтрокаДанных.СубконтоКтНУ3 = Неопределено;
					СтрокаДанных.Результат = ДоляПособияЕНВД - ВПределахММОТ;
					СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
					СтрокаДанных.ОблагаетсяЕНВД = Истина;
					
					
					// за счет работодателя в части ОСН, первые два календарных дня
					РезультатЗаСчетРаботодателя = Окр((ДанныеУчета.Результат - ДоляПособияЕНВД) * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
					//за счет ФСС
					ЗаСчетФССРезультат = ДанныеУчета.Результат - ДоляПособияЕНВД - РезультатЗаСчетРаботодателя;
					
					Если ЗаСчетФССРезультат <> 0 Тогда
						//доля за счет ФСС
						СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
						СтрокаДанных.Результат	 = ЗаСчетФССРезультат;
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						
						Если ЕстьДоляБЛЗаСчетРаботодателя Тогда
							СтрокаДанных.ПериодДействияНачало = Мин(СтрокаДанных.ПериодДействияКонец, ТретийКалендарныйДень);
						КонецЕсли;
						
					КонецЕсли;
					
					Если РезультатЗаСчетРаботодателя <> 0 Тогда 
						
						СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
						СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
						Если УказаноОтражениеВУчетеДляРаботодателя Тогда
							ЗаполнитьЗначенияСвойств(СтрокаДанных,ВыборкаПоШапкеДокумента,
							"СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1," +
							"СчетДтНУ,СубконтоДтНУ1,СубконтоДтНУ2,СубконтоДтНУ3,СчетКтНУ,СубконтоКтНУ1,ОтражениеВУСН");
							СтрокаДанных.Результат	 = РезультатЗаСчетРаботодателя;
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
							Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
								Если Не ДанныеУчета.Следующий() Тогда
									ПродолжатьОбработку = Ложь;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						Иначе // обходим строки и вычисляем долю результата по базовым записям
							// суммарная доля, которую уже "разбросали" на строки с одинаковым регистратором и номером строки
							СуммарнаяДоля = 0;
							ПерваяИзГруппыСтрок = Истина;
							Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
								Если Не ДанныеУчета.ЭтоЕНВД Тогда
									// если это не первая из группы "базовых" строк по одной строке основного регистра
									// то создаем очередную строку движений
									Если Не ПерваяИзГруппыСтрок Тогда
										СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
										СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
									Иначе
										ПерваяИзГруппыСтрок = Ложь;
									КонецЕсли;
									
									Если СуммаПоСтроке = 0 Тогда
										Доля = 0;
									Иначе
										Если ДанныеУчета.РезультатБаза = NULL Тогда
											Успешно = Ложь;
											Доля = 0;
										Иначе
											Доля = РезультатЗаСчетРаботодателя * ДанныеУчета.РезультатБаза / (СуммаПоСтроке -  СуммаПоСтрокеЕНВД);
										КонецЕсли;
									КонецЕсли;
									
									Если ДанныеУчета.СчетДтРазрез = NULL Тогда
										Успешно = Ложь;
									Иначе
										СтрокаДанных.СчетДт 	 = ДанныеУчета.СчетДтРазрез;
										СтрокаДанных.СубконтоДт1 = ПолучитьСубконто(ДанныеУчета.СубконтоДт1Разрез, ПараметрыПолученияСубконто);
										СтрокаДанных.СубконтоДт2 = ПолучитьСубконто(ДанныеУчета.СубконтоДт2Разрез, ПараметрыПолученияСубконто);
										СтрокаДанных.СубконтоДт3 = ПолучитьСубконто(ДанныеУчета.СубконтоДт3Разрез, ПараметрыПолученияСубконто);
										СтрокаДанных.СчетДтНУ	 = ДанныеУчета.СчетДтНУРазрез;
										СтрокаДанных.СубконтоДтНУ1 = ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ1Разрез, ПараметрыПолученияСубконто);
										СтрокаДанных.СубконтоДтНУ2 = ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ2Разрез, ПараметрыПолученияСубконто);
										СтрокаДанных.СубконтоДтНУ3 = ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ3Разрез, ПараметрыПолученияСубконто);
									КонецЕсли;
									Если ДанныеУчета.СчетКтРазрез = NULL Тогда
										Успешно = Ложь;
									Иначе
										СтрокаДанных.СчетКт 	 = ДанныеУчета.СчетКтРазрез;
										СтрокаДанных.СубконтоКт1 = ДанныеУчета.СубконтоКт1Разрез;
										СтрокаДанных.СубконтоКт2 = ДанныеУчета.СубконтоКт2Разрез;
										СтрокаДанных.СубконтоКт3 = ДанныеУчета.СубконтоКт3Разрез;
										СтрокаДанных.СчетКтНУ	 = ДанныеУчета.СчетКтНУРазрез;
										СтрокаДанных.СубконтоКтНУ1 = ДанныеУчета.СубконтоКтНУ1Разрез;
										СтрокаДанных.СубконтоКтНУ2 = Неопределено;
										СтрокаДанных.СубконтоКтНУ3 = Неопределено;
									КонецЕсли;
									СтрокаДанных.Результат = ?(РезультатЗаСчетРаботодателя > 0,Мин(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля),Макс(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля));
									СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
									СуммарнаяДоля = СуммарнаяДоля + СтрокаДанных.Результат;
								КонецЕсли;
								Если Не ДанныеУчета.Следующий() Тогда
									ПродолжатьОбработку = Ложь;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							// ошибки округления складываются на последнюю запись из группы базовых записей
							СтрокаДанных.Результат = СтрокаДанных.Результат + РезультатЗаСчетРаботодателя - СуммарнаяДоля;
						КонецЕсли;
					Иначе
						Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
							Если Не ДанныеУчета.Следующий() Тогда
								ПродолжатьОбработку = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли мФСС_БЛ Тогда // налоговые режимы: УСН, ОСН+ЕНВД и УСН+ЕНВД, с уплатой добровольных взносов
				
				Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
					
					Если мЕНВД и НЕ мУСН Тогда // налоговые режимы: ОСН+ЕНВД, с уплатой добровольных взносов
						
						Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
							СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
							СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
							СтрокаДанных.СубконтоДт2 = Неопределено;
							СтрокаДанных.СубконтоДт3 = Неопределено;
							СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
							СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
							СтрокаДанных.СубконтоКт2 = Неопределено;
							СтрокаДанных.СубконтоКт3 = Неопределено;
							СтрокаДанных.СчетДтНУ	 = Неопределено;
							СтрокаДанных.СчетКтНУ	 = Неопределено;
							СтрокаДанных.СубконтоДтНУ1 = Неопределено;
							СтрокаДанных.СубконтоДтНУ2 = Неопределено;
							СтрокаДанных.СубконтоДтНУ3 = Неопределено;
							СтрокаДанных.СубконтоКтНУ1 = Неопределено;
							СтрокаДанных.СубконтоКтНУ2 = Неопределено;
							СтрокаДанных.СубконтоКтНУ3 = Неопределено;
							СтрокаДанных.Результат	 = ДанныеУчета.Результат - Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						КонецЕсли;	
						
						Если СуммаПоСтрокеЕНВД <> 0 Тогда
							Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
								СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
							КонецЕсли;
							СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД; 
							СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
							СтрокаДанных.СубконтоДт2 = Неопределено;
							СтрокаДанных.СубконтоДт3 = Неопределено;
							СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
							СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
							СтрокаДанных.СубконтоКт2 = Неопределено;
							СтрокаДанных.СубконтоКт3 = Неопределено;
							СтрокаДанных.СчетДтНУ	 = Неопределено;
							СтрокаДанных.СчетКтНУ	 = Неопределено;
							СтрокаДанных.СубконтоДтНУ1 = Неопределено;
							СтрокаДанных.СубконтоДтНУ2 = Неопределено;
							СтрокаДанных.СубконтоДтНУ3 = Неопределено;
							СтрокаДанных.СубконтоКтНУ1 = Неопределено;
							СтрокаДанных.СубконтоКтНУ2 = Неопределено;
							СтрокаДанных.СубконтоКтНУ3 = Неопределено;
							СтрокаДанных.Результат	 = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
							СтрокаДанных.ОблагаетсяЕНВД = Истина;
						КонецЕсли;
						
						Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
							Если Не ДанныеУчета.Следующий() Тогда
								ПродолжатьОбработку = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					ИначеЕсли мУСН Тогда  // налоговые режимы: УСН и УСН+ЕНВД, с уплатой добровольных взносов
						
						Если Не мЕНВД Или СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
							СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_УСН;
							СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
							СтрокаДанных.СубконтоДт2 = Неопределено;
							СтрокаДанных.СубконтоДт3 = Неопределено;
							СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
							СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
							СтрокаДанных.СубконтоКт2 = Неопределено;
							СтрокаДанных.СубконтоКт3 = Неопределено;
							СтрокаДанных.СчетДтНУ	 = Неопределено;
							СтрокаДанных.СчетКтНУ	 = Неопределено;
							СтрокаДанных.СубконтоДтНУ1 = Неопределено;
							СтрокаДанных.СубконтоДтНУ2 = Неопределено;
							СтрокаДанных.СубконтоДтНУ3 = Неопределено;
							СтрокаДанных.СубконтоКтНУ1 = Неопределено;
							СтрокаДанных.СубконтоКтНУ2 = Неопределено;
							СтрокаДанных.СубконтоКтНУ3 = Неопределено;
							СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
							Если мЕНВД Тогда
								СтрокаДанных.Результат	 = ДанныеУчета.Результат - Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							КонецЕсли;
						КонецЕсли;
						
						Если мЕНВД И СуммаПоСтрокеЕНВД <> 0 Тогда
							Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
								СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
							КонецЕсли;
							СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД; 
							СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
							СтрокаДанных.СубконтоДт2 = Неопределено;
							СтрокаДанных.СубконтоДт3 = Неопределено;
							СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
							СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
							СтрокаДанных.СубконтоКт2 = Неопределено;
							СтрокаДанных.СубконтоКт3 = Неопределено;
							СтрокаДанных.СчетДтНУ	 = Неопределено;
							СтрокаДанных.СчетКтНУ	 = Неопределено;
							СтрокаДанных.СубконтоДтНУ1 = Неопределено;
							СтрокаДанных.СубконтоДтНУ2 = Неопределено;
							СтрокаДанных.СубконтоДтНУ3 = Неопределено;
							СтрокаДанных.СубконтоКтНУ1 = Неопределено;
							СтрокаДанных.СубконтоКтНУ2 = Неопределено;
							СтрокаДанных.СубконтоКтНУ3 = Неопределено;
							СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;
							СтрокаДанных.Результат	 = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
							СтрокаДанных.ОблагаетсяЕНВД = Истина;
						КонецЕсли;							
						
						Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
							Если Не ДанныеУчета.Следующий() Тогда
								ПродолжатьОбработку = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
				ИначеЕсли  ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание
					И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаВБыту Тогда
					
					Если мЕНВД и НЕ мУСН Тогда // налоговые режимы: ОСН+ЕНВД, с уплатой добровольных взносов
						
						Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
							СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
							СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
							СтрокаДанных.СубконтоДт2 = Неопределено;
							СтрокаДанных.СубконтоДт3 = Неопределено;
							СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
							СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
							СтрокаДанных.СубконтоКт2 = Неопределено;
							СтрокаДанных.СубконтоКт3 = Неопределено;
							СтрокаДанных.СчетДтНУ	 = Неопределено;
							СтрокаДанных.СчетКтНУ	 = Неопределено;
							СтрокаДанных.СубконтоДтНУ1 = Неопределено;
							СтрокаДанных.СубконтоДтНУ2 = Неопределено;
							СтрокаДанных.СубконтоДтНУ3 = Неопределено;
							СтрокаДанных.СубконтоКтНУ1 = Неопределено;
							СтрокаДанных.СубконтоКтНУ2 = Неопределено;
							СтрокаДанных.СубконтоКтНУ3 = Неопределено;
							СтрокаДанных.Результат	 = ДанныеУчета.Результат - Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						КонецЕсли;
						
						Если СуммаПоСтрокеЕНВД <> 0 Тогда
							Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
								СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
							КонецЕсли;
							СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_ДобровольныеВзносы; 
							СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
							СтрокаДанных.СубконтоДт2 = Неопределено;
							СтрокаДанных.СубконтоДт3 = Неопределено;
							СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
							СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
							СтрокаДанных.СубконтоКт2 = Неопределено;
							СтрокаДанных.СубконтоКт3 = Неопределено;
							СтрокаДанных.СчетДтНУ	 = Неопределено;
							СтрокаДанных.СчетКтНУ	 = Неопределено;
							СтрокаДанных.СубконтоДтНУ1 = Неопределено;
							СтрокаДанных.СубконтоДтНУ2 = Неопределено;
							СтрокаДанных.СубконтоДтНУ3 = Неопределено;
							СтрокаДанных.СубконтоКтНУ1 = Неопределено;
							СтрокаДанных.СубконтоКтНУ2 = Неопределено;
							СтрокаДанных.СубконтоКтНУ3 = Неопределено;
							СтрокаДанных.Результат	 = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
							СтрокаДанных.ОблагаетсяЕНВД = Истина;
						КонецЕсли;
						
						Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
							Если Не ДанныеУчета.Следующий() Тогда
								ПродолжатьОбработку = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					ИначеЕсли мУСН Тогда // налоговые режимы: УСН и УСН+ЕНВД, с уплатой добровольных взносов
						
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_ДобровольныеВзносы; 
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						СтрокаДанных.Результат	 = ДанныеУчета.Результат - Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
					
						Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД и мЕНВД Тогда
							СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
							СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_ДобровольныеВзносы; 
							СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
							СтрокаДанных.СубконтоДт2 = Неопределено;
							СтрокаДанных.СубконтоДт3 = Неопределено;
							СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
							СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
							СтрокаДанных.СубконтоКт2 = Неопределено;
							СтрокаДанных.СубконтоКт3 = Неопределено;
							СтрокаДанных.СчетДтНУ	 = Неопределено;
							СтрокаДанных.СчетКтНУ	 = Неопределено;
							СтрокаДанных.СубконтоДтНУ1 = Неопределено;
							СтрокаДанных.СубконтоДтНУ2 = Неопределено;
							СтрокаДанных.СубконтоДтНУ3 = Неопределено;
							СтрокаДанных.СубконтоКтНУ1 = Неопределено;
							СтрокаДанных.СубконтоКтНУ2 = Неопределено;
							СтрокаДанных.СубконтоКтНУ3 = Неопределено;
							СтрокаДанных.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
							СтрокаДанных.КодДоходаЕСН  = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
							СтрокаДанных.ОблагаетсяЕНВД = Истина;
							СтрокаДанных.Результат	 = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
						КонецЕсли;
						
						Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
							Если Не ДанныеУчета.Следующий() Тогда
								ПродолжатьОбработку = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;							
						
					КонецЕсли;	
					
				Иначе // заболевание работника, налоговые режимы: УСН, ОСН+ЕНВД и УСН+ЕНВД, с уплатой добровольных взносов
					
					Если мЕНВД и НЕ мУСН Тогда // налоговые режимы: ОСН+ЕНВД, с уплатой добровольных взносов
						
						Если ДанныеУчета.ДатаНачалаСобытия < мДатаЗакона180ФЗ Тогда
							
							ДоляПособияЕНВД = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							
							// за счет работодателя в части ОСН
							РезультатЗаСчетРаботодателя = Окр((ДанныеУчета.Результат - ДоляПособияЕНВД) * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
							
							Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
								// за счет ФСС в части ОСН
								СтрокаДанных.Результат	 = ДанныеУчета.Результат - ДоляПособияЕНВД - РезультатЗаСчетРаботодателя;
								СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
								СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
								СтрокаДанных.СубконтоДт2 = Неопределено;
								СтрокаДанных.СубконтоДт3 = Неопределено;
								СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
								СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
								СтрокаДанных.СубконтоКт2 = Неопределено;
								СтрокаДанных.СубконтоКт3 = Неопределено;
								СтрокаДанных.СчетДтНУ	 = Неопределено;
								СтрокаДанных.СчетКтНУ	 = Неопределено;
								СтрокаДанных.СубконтоДтНУ1 = Неопределено;
								СтрокаДанных.СубконтоДтНУ2 = Неопределено;
								СтрокаДанных.СубконтоДтНУ3 = Неопределено;
								СтрокаДанных.СубконтоКтНУ1 = Неопределено;
								СтрокаДанных.СубконтоКтНУ2 = Неопределено;
								СтрокаДанных.СубконтоКтНУ3 = Неопределено;
								СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
								
								Если ЕстьДоляБЛЗаСчетРаботодателя Тогда
									СтрокаДанных.ПериодДействияНачало = Мин(СтрокаДанных.ПериодДействияКонец, ТретийКалендарныйДень);	
								КонецЕсли;	
								
							КонецЕсли;
							
							Если СуммаПоСтрокеЕНВД <> 0 Тогда
								
								// за счет добровольных взносов
								Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
									СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
								КонецЕсли;
								СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_ДобровольныеВзносы; 
								СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
								СтрокаДанных.СубконтоДт2 = Неопределено;
								СтрокаДанных.СубконтоДт3 = Неопределено;
								СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
								СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
								СтрокаДанных.СубконтоКт2 = Неопределено;
								СтрокаДанных.СубконтоКт3 = Неопределено;
								СтрокаДанных.СчетДтНУ	 = Неопределено;
								СтрокаДанных.СчетКтНУ	 = Неопределено;
								СтрокаДанных.СубконтоДтНУ1 = Неопределено;
								СтрокаДанных.СубконтоДтНУ2 = Неопределено;
								СтрокаДанных.СубконтоДтНУ3 = Неопределено;
								СтрокаДанных.СубконтоКтНУ1 = Неопределено;
								СтрокаДанных.СубконтоКтНУ2 = Неопределено;
								СтрокаДанных.СубконтоКтНУ3 = Неопределено;
								СтрокаДанных.Результат	 = ДоляПособияЕНВД - Окр(ДоляПособияЕНВД * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
								СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
								СтрокаДанных.ОблагаетсяЕНВД = Истина;
								
								Если ДанныеУчета.ДоляБЛЗаСчетРаботодателя <> 0 Тогда
									СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
									СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ЕНВД; 
									СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
									СтрокаДанных.СубконтоДт2 = Неопределено;
									СтрокаДанных.СубконтоДт3 = Неопределено;
									СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
									СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
									СтрокаДанных.СубконтоКт2 = Неопределено;
									СтрокаДанных.СубконтоКт3 = Неопределено;
									СтрокаДанных.СчетДтНУ	 = Неопределено;
									СтрокаДанных.СчетКтНУ	 = Неопределено;
									СтрокаДанных.СубконтоДтНУ1 = Неопределено;
									СтрокаДанных.СубконтоДтНУ2 = Неопределено;
									СтрокаДанных.СубконтоДтНУ3 = Неопределено;
									СтрокаДанных.СубконтоКтНУ1 = Неопределено;
									СтрокаДанных.СубконтоКтНУ2 = Неопределено;
									СтрокаДанных.СубконтоКтНУ3 = Неопределено;
									СтрокаДанных.Результат	 = Окр(ДоляПособияЕНВД * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
									СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
									СтрокаДанных.ОблагаетсяЕНВД = Истина;
								КонецЕсли;
							КонецЕсли;							
							
							Если РезультатЗаСчетРаботодателя <> 0 Тогда 
								
								СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
								СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
								Если УказаноОтражениеВУчетеДляРаботодателя Тогда
									ЗаполнитьЗначенияСвойств(СтрокаДанных,ВыборкаПоШапкеДокумента,
									"СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1," +
									"СчетДтНУ,СубконтоДтНУ1,СубконтоДтНУ2,СубконтоДтНУ3,СчетКтНУ,СубконтоКтНУ1,ОтражениеВУСН");
									СтрокаДанных.Результат	 = РезультатЗаСчетРаботодателя;
									СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
								Иначе  // обходим строки и вычисляем долю результата по базовым записям
									// суммарная доля, которую уже "разбросали" на строки с одинаковым регистратором и номером строки
									СуммарнаяДоля = 0;
									ПерваяИзГруппыСтрок = Истина;
									Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
										Если Не ДанныеУчета.ЭтоЕНВД Тогда
											// если это не первая из группы "базовых" строк по одной строке основного регистра
											// то создаем очередную строку движений
											Если Не ПерваяИзГруппыСтрок Тогда
												СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
												СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
											Иначе
												ПерваяИзГруппыСтрок = Ложь;
											КонецЕсли;
											
											Если СуммаПоСтроке = 0 Тогда
												Доля = 0;
											Иначе
												Если ДанныеУчета.РезультатБаза = NULL Тогда
													Успешно = Ложь;
													Доля = 0;
												Иначе
													Доля = РезультатЗаСчетРаботодателя * ДанныеУчета.РезультатБаза / (СуммаПоСтроке - СуммаПоСтрокеЕНВД);
												КонецЕсли;
											КонецЕсли;
											
											Если ДанныеУчета.СчетДтРазрез = NULL Тогда
												Успешно = Ложь;
											Иначе
												СтрокаДанных.СчетДт 	 = ДанныеУчета.СчетДтРазрез;
												СтрокаДанных.СубконтоДт1 = ПолучитьСубконто(ДанныеУчета.СубконтоДт1Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СубконтоДт2 = ПолучитьСубконто(ДанныеУчета.СубконтоДт2Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СубконтоДт3 = ПолучитьСубконто(ДанныеУчета.СубконтоДт3Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СчетДтНУ	 = ДанныеУчета.СчетДтНУРазрез;
												СтрокаДанных.СубконтоДтНУ1 = ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ1Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СубконтоДтНУ2 = ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ2Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СубконтоДтНУ3 = ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ3Разрез, ПараметрыПолученияСубконто);
											КонецЕсли;
											Если ДанныеУчета.СчетКтРазрез = NULL Тогда
												Успешно = Ложь;
											Иначе
												СтрокаДанных.СчетКт 	 = ДанныеУчета.СчетКтРазрез;
												СтрокаДанных.СубконтоКт1 = ДанныеУчета.СубконтоКт1Разрез;
												СтрокаДанных.СубконтоКт2 = ДанныеУчета.СубконтоКт2Разрез;
												СтрокаДанных.СубконтоКт3 = ДанныеУчета.СубконтоКт3Разрез;
												СтрокаДанных.СчетКтНУ	 = ДанныеУчета.СчетКтНУРазрез;
												СтрокаДанных.СубконтоКтНУ1 = ДанныеУчета.СубконтоКтНУ1Разрез;
												СтрокаДанных.СубконтоКтНУ2 = Неопределено;
												СтрокаДанных.СубконтоКтНУ3 = Неопределено;
											КонецЕсли;
											
											СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
											СтрокаДанных.Результат = ?(РезультатЗаСчетРаботодателя > 0,Мин(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля),Макс(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля));
											СуммарнаяДоля = СуммарнаяДоля + СтрокаДанных.Результат;
										КонецЕсли;
										Если Не ДанныеУчета.Следующий() Тогда
											ПродолжатьОбработку = Ложь;
											Прервать;
										КонецЕсли;
									КонецЦикла;
									// ошибки округления складываются на последнюю запись из группы базовых записей
									СтрокаДанных.Результат = СтрокаДанных.Результат + РезультатЗаСчетРаботодателя - СуммарнаяДоля;
								КонецЕсли;	
								
							КонецЕсли;	
							
							Пока ПродолжатьОбработку И ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
								Если Не ДанныеУчета.Следующий() Тогда
									ПродолжатьОбработку = Ложь;
									Прервать;
								КонецЕсли;
							КонецЦикла;							
							
						Иначе // ДанныеУчета.ДатаНачалаСобытия > мДатаЗакона180ФЗ, налоговые режимы: ОСН+ЕНВД, с уплатой добровольных взносов
							
							ДоляПособияЕНВД = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							
							// за счет работодателя
							РезультатЗаСчетРаботодателя = Окр((ДанныеУчета.Результат - ДоляПособияЕНВД) * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
							
							//за счет ФСС
							ЗаСчетФССРезультат = 0;
							
							Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
								
								ЗаСчетФССРезультат = ДанныеУчета.Результат - ДоляПособияЕНВД - РезультатЗаСчетРаботодателя;
								
								Если ЗаСчетФССРезультат <> 0 Тогда
									СтрокаДанных.Результат	 = ЗаСчетФССРезультат;
									СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
									СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
									СтрокаДанных.СубконтоДт2 = Неопределено;
									СтрокаДанных.СубконтоДт3 = Неопределено;
									СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
									СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
									СтрокаДанных.СубконтоКт2 = Неопределено;
									СтрокаДанных.СубконтоКт3 = Неопределено;
									СтрокаДанных.СчетДтНУ	 = Неопределено;
									СтрокаДанных.СчетКтНУ	 = Неопределено;
									СтрокаДанных.СубконтоДтНУ1 = Неопределено;
									СтрокаДанных.СубконтоДтНУ2 = Неопределено;
									СтрокаДанных.СубконтоДтНУ3 = Неопределено;
									СтрокаДанных.СубконтоКтНУ1 = Неопределено;
									СтрокаДанных.СубконтоКтНУ2 = Неопределено;
									СтрокаДанных.СубконтоКтНУ3 = Неопределено;
									СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
									Если ЕстьДоляБЛЗаСчетРаботодателя Тогда
										СтрокаДанных.ПериодДействияНачало = Мин(СтрокаДанных.ПериодДействияКонец, ТретийКалендарныйДень);	
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;
							
							Если СуммаПоСтрокеЕНВД <> 0 Тогда
								Если ЗаСчетФССРезультат <> 0 Тогда
									СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
								КонецЕсли;
								СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_ДобровольныеВзносы; 
								СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
								СтрокаДанных.СубконтоДт2 = Неопределено;
								СтрокаДанных.СубконтоДт3 = Неопределено;
								СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
								СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
								СтрокаДанных.СубконтоКт2 = Неопределено;
								СтрокаДанных.СубконтоКт3 = Неопределено;
								СтрокаДанных.СчетДтНУ	 = Неопределено;
								СтрокаДанных.СчетКтНУ	 = Неопределено;
								СтрокаДанных.СубконтоДтНУ1 = Неопределено;
								СтрокаДанных.СубконтоДтНУ2 = Неопределено;
								СтрокаДанных.СубконтоДтНУ3 = Неопределено;
								СтрокаДанных.СубконтоКтНУ1 = Неопределено;
								СтрокаДанных.СубконтоКтНУ2 = Неопределено;
								СтрокаДанных.СубконтоКтНУ3 = Неопределено;
								СтрокаДанных.Результат	 = ДоляПособияЕНВД;
								СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
								СтрокаДанных.ОблагаетсяЕНВД = Истина;
							КонецЕсли;							
							
							Если РезультатЗаСчетРаботодателя <> 0 Тогда 
								Если ЗаСчетФССРезультат <> 0 ИЛИ СуммаПоСтрокеЕНВД <> 0 Тогда
									//добавим новую строку движений, т.к. есть доля за счет ФСС
									СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
								КонецЕсли;
								СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
								Если УказаноОтражениеВУчетеДляРаботодателя Тогда
									ЗаполнитьЗначенияСвойств(СтрокаДанных,ВыборкаПоШапкеДокумента,
									"СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1," +
									"СчетДтНУ,СубконтоДтНУ1,СубконтоДтНУ2,СубконтоДтНУ3,СчетКтНУ,СубконтоКтНУ1,ОтражениеВУСН");
									СтрокаДанных.Результат	 = РезультатЗаСчетРаботодателя;
									СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
								Иначе // обходим строки и вычисляем долю результата по базовым записям
									// суммарная доля, которую уже "разбросали" на строки с одинаковым регистратором и номером строки
									СуммарнаяДоля = 0;
									ПерваяИзГруппыСтрок = Истина;
									Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
										Если Не ДанныеУчета.ЭтоЕНВД Тогда
											// если это не первая из группы "базовых" строк по одной строке основного регистра
											// то создаем очередную строку движений
											Если Не ПерваяИзГруппыСтрок Тогда
												СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
												СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
											Иначе
												ПерваяИзГруппыСтрок = Ложь;
											КонецЕсли;
											
											Если СуммаПоСтроке = 0 Тогда
												Доля = 0;
											Иначе
												Если ДанныеУчета.РезультатБаза = NULL Тогда
													Успешно = Ложь;
													Доля = 0;
												Иначе
													Доля = РезультатЗаСчетРаботодателя * ДанныеУчета.РезультатБаза / (СуммаПоСтроке - СуммаПоСтрокеЕНВД);
												КонецЕсли;
											КонецЕсли;
											
											Если ДанныеУчета.СчетДтРазрез = NULL Тогда
												Успешно = Ложь;
											Иначе
												СтрокаДанных.СчетДт 	 = ДанныеУчета.СчетДтРазрез;
												СтрокаДанных.СубконтоДт1 = ПолучитьСубконто(ДанныеУчета.СубконтоДт1Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СубконтоДт2 = ПолучитьСубконто(ДанныеУчета.СубконтоДт2Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СубконтоДт3 = ПолучитьСубконто(ДанныеУчета.СубконтоДт3Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СчетДтНУ	 = ДанныеУчета.СчетДтНУРазрез;
												СтрокаДанных.СубконтоДтНУ1 = ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ1Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СубконтоДтНУ2 = ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ2Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СубконтоДтНУ3 = ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ3Разрез, ПараметрыПолученияСубконто);
											КонецЕсли;
											Если ДанныеУчета.СчетКтРазрез = NULL Тогда
												Успешно = Ложь;
											Иначе
												СтрокаДанных.СчетКт 	 = ДанныеУчета.СчетКтРазрез;
												СтрокаДанных.СубконтоКт1 = ДанныеУчета.СубконтоКт1Разрез;
												СтрокаДанных.СубконтоКт2 = ДанныеУчета.СубконтоКт2Разрез;
												СтрокаДанных.СубконтоКт3 = ДанныеУчета.СубконтоКт3Разрез;
												СтрокаДанных.СчетКтНУ	 = ДанныеУчета.СчетКтНУРазрез;
												СтрокаДанных.СубконтоКтНУ1 = ДанныеУчета.СубконтоКтНУ1Разрез;
												СтрокаДанных.СубконтоКтНУ2 = Неопределено;
												СтрокаДанных.СубконтоКтНУ3 = Неопределено;
											КонецЕсли;
											
											СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
											СтрокаДанных.Результат = ?(РезультатЗаСчетРаботодателя > 0,Мин(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля),Макс(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля));
											СуммарнаяДоля = СуммарнаяДоля + СтрокаДанных.Результат;
										КонецЕсли;
										Если Не ДанныеУчета.Следующий() Тогда
											ПродолжатьОбработку = Ложь;
											Прервать;
										КонецЕсли;
									КонецЦикла;
									// ошибки округления складываются на последнюю запись из группы базовых записей
									СтрокаДанных.Результат = СтрокаДанных.Результат + РезультатЗаСчетРаботодателя - СуммарнаяДоля;
								КонецЕсли;	
							КонецЕсли;	
							
							Пока ПродолжатьОбработку И ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
								Если Не ДанныеУчета.Следующий() Тогда
									ПродолжатьОбработку = Ложь;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли;
						
					ИначеЕсли мУСН Тогда // налоговые режимы: УСН и УСН+ЕНВД, с уплатой добровольных взносов
						
						Если ДанныеУчета.ДатаНачалаСобытия < мДатаЗакона180ФЗ Тогда
							
							ДоляПособияЕНВД = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							
							// за счет работодателя
							РезультатЗаСчетРаботодателя = Окр((ДанныеУчета.Результат - ДоляПособияЕНВД) * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
							
							Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
								СтрокаДанных.Результат	 = ДанныеУчета.Результат - ДоляПособияЕНВД - РезультатЗаСчетРаботодателя;
								СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_ДобровольныеВзносы;
								СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
								СтрокаДанных.СубконтоДт2 = Неопределено;
								СтрокаДанных.СубконтоДт3 = Неопределено;
								СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
								СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
								СтрокаДанных.СубконтоКт2 = Неопределено;
								СтрокаДанных.СубконтоКт3 = Неопределено;
								СтрокаДанных.СчетДтНУ	 = Неопределено;
								СтрокаДанных.СчетКтНУ	 = Неопределено;
								СтрокаДанных.СубконтоДтНУ1 = Неопределено;
								СтрокаДанных.СубконтоДтНУ2 = Неопределено;
								СтрокаДанных.СубконтоДтНУ3 = Неопределено;
								СтрокаДанных.СубконтоКтНУ1 = Неопределено;
								СтрокаДанных.СубконтоКтНУ2 = Неопределено;
								СтрокаДанных.СубконтоКтНУ3 = Неопределено;
								СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;
								СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
							КонецЕсли;
							
							Если СуммаПоСтрокеЕНВД <> 0 Тогда
								Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
									СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
								КонецЕсли;
								СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_ДобровольныеВзносы; 
								СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
								СтрокаДанных.СубконтоДт2 = Неопределено;
								СтрокаДанных.СубконтоДт3 = Неопределено;
								СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
								СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
								СтрокаДанных.СубконтоКт2 = Неопределено;
								СтрокаДанных.СубконтоКт3 = Неопределено;
								СтрокаДанных.СчетДтНУ	 = Неопределено;
								СтрокаДанных.СчетКтНУ	 = Неопределено;
								СтрокаДанных.СубконтоДтНУ1 = Неопределено;
								СтрокаДанных.СубконтоДтНУ2 = Неопределено;
								СтрокаДанных.СубконтоДтНУ3 = Неопределено;
								СтрокаДанных.СубконтоКтНУ1 = Неопределено;
								СтрокаДанных.СубконтоКтНУ2 = Неопределено;
								СтрокаДанных.СубконтоКтНУ3 = Неопределено;
								СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;
								СтрокаДанных.Результат	 = ДоляПособияЕНВД - Окр(ДоляПособияЕНВД * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);							
								СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
								СтрокаДанных.ОблагаетсяЕНВД = Истина;
								
								СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
								СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ЕНВД; 
								СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
								СтрокаДанных.СубконтоДт2 = Неопределено;
								СтрокаДанных.СубконтоДт3 = Неопределено;
								СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
								СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
								СтрокаДанных.СубконтоКт2 = Неопределено;
								СтрокаДанных.СубконтоКт3 = Неопределено;
								СтрокаДанных.СчетДтНУ	 = Неопределено;
								СтрокаДанных.СчетКтНУ	 = Неопределено;
								СтрокаДанных.СубконтоДтНУ1 = Неопределено;
								СтрокаДанных.СубконтоДтНУ2 = Неопределено;
								СтрокаДанных.СубконтоДтНУ3 = Неопределено;
								СтрокаДанных.СубконтоКтНУ1 = Неопределено;
								СтрокаДанных.СубконтоКтНУ2 = Неопределено;
								СтрокаДанных.СубконтоКтНУ3 = Неопределено;
								СтрокаДанных.Результат	 = Окр(ДоляПособияЕНВД * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
								СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
								СтрокаДанных.ОблагаетсяЕНВД = Истина;
							КонецЕсли;
							
							Если РезультатЗаСчетРаботодателя <> 0 Тогда
								
								Если мОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда
									
									СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
									СтрокаДанных.Результат	 = РезультатЗаСчетРаботодателя;
									СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ЕНприУСН;
									СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
									СтрокаДанных.СубконтоДт2 = Неопределено;
									СтрокаДанных.СубконтоДт3 = Неопределено;
									СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
									СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
									СтрокаДанных.СубконтоКт2 = Неопределено;
									СтрокаДанных.СубконтоКт3 = Неопределено;
									СтрокаДанных.СчетДтНУ	 = Неопределено;
									СтрокаДанных.СчетКтНУ	 = Неопределено;
									СтрокаДанных.СубконтоДтНУ1 = Неопределено;
									СтрокаДанных.СубконтоДтНУ2 = Неопределено;
									СтрокаДанных.СубконтоДтНУ3 = Неопределено;
									СтрокаДанных.СубконтоКтНУ1 = Неопределено;
									СтрокаДанных.СубконтоКтНУ2 = Неопределено;
									СтрокаДанных.СубконтоКтНУ3 = Неопределено;
									СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;
									СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
									
								Иначе
									
									СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
									Если УказаноОтражениеВУчетеДляРаботодателя Тогда
										ЗаполнитьЗначенияСвойств(СтрокаДанных,ВыборкаПоШапкеДокумента,
										"СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1," +
										"СчетДтНУ,СубконтоДтНУ1,СубконтоДтНУ2,СубконтоДтНУ3,СчетКтНУ,СубконтоКтНУ1,ОтражениеВУСН");
										СтрокаДанных.Результат	 = РезультатЗаСчетРаботодателя;
										СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
									Иначе // обходим строки и вычисляем долю результата по базовым записям
										// суммарная доля, которую уже "разбросали" на строки с одинаковым регистратором и номером строки
										СуммарнаяДоля = 0;
										ПерваяИзГруппыСтрок = Истина;
										Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
											Если Не ДанныеУчета.ЭтоЕНВД Тогда
												// если это не первая из группы "базовых" строк по одной строке основного регистра
												// то создаем очередную строку движений
												Если Не ПерваяИзГруппыСтрок Тогда
													СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
												Иначе
													ПерваяИзГруппыСтрок = Ложь;
												КонецЕсли;
												
												Если СуммаПоСтроке = 0 Тогда
													Доля = 0;
												Иначе
													Если ДанныеУчета.РезультатБаза = NULL Тогда
														Успешно = Ложь;
														Доля = 0;
													Иначе
														Доля = РезультатЗаСчетРаботодателя * ДанныеУчета.РезультатБаза / (СуммаПоСтроке - СуммаПоСтрокеЕНВД);
													КонецЕсли;
												КонецЕсли;
												
												Если ДанныеУчета.СчетДтРазрез = NULL Тогда
													Успешно = Ложь;
												Иначе
													СтрокаДанных.СчетДт 	 = ДанныеУчета.СчетДтРазрез;
													СтрокаДанных.СубконтоДт1 = ПолучитьСубконто(ДанныеУчета.СубконтоДт1Разрез, ПараметрыПолученияСубконто);
													СтрокаДанных.СубконтоДт2 = ПолучитьСубконто(ДанныеУчета.СубконтоДт2Разрез, ПараметрыПолученияСубконто);
													СтрокаДанных.СубконтоДт3 = ПолучитьСубконто(ДанныеУчета.СубконтоДт3Разрез, ПараметрыПолученияСубконто);
													СтрокаДанных.СчетДтНУ	 = ДанныеУчета.СчетДтНУРазрез;
													СтрокаДанных.СубконтоДтНУ1 = ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ1Разрез, ПараметрыПолученияСубконто);
													СтрокаДанных.СубконтоДтНУ2 = ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ2Разрез, ПараметрыПолученияСубконто);
													СтрокаДанных.СубконтоДтНУ3 = ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ3Разрез, ПараметрыПолученияСубконто);
													СтрокаДанных.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
												КонецЕсли;
												Если ДанныеУчета.СчетКтРазрез = NULL Тогда
													Успешно = Ложь;
												Иначе
													СтрокаДанных.СчетКт 	 = ДанныеУчета.СчетКтРазрез;
													СтрокаДанных.СубконтоКт1 = ДанныеУчета.СубконтоКт1Разрез;
													СтрокаДанных.СубконтоКт2 = ДанныеУчета.СубконтоКт2Разрез;
													СтрокаДанных.СубконтоКт3 = ДанныеУчета.СубконтоКт3Разрез;
													СтрокаДанных.СчетКтНУ	 = ДанныеУчета.СчетКтНУРазрез;
													СтрокаДанных.СубконтоКтНУ1 = ДанныеУчета.СубконтоКтНУ1Разрез;
													СтрокаДанных.СубконтоКтНУ2 = Неопределено;
													СтрокаДанных.СубконтоКтНУ3 = Неопределено;
													СтрокаДанных.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
												КонецЕсли;
												
												СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
												СтрокаДанных.Результат = ?(РезультатЗаСчетРаботодателя > 0,Мин(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля),Макс(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля));
												СуммарнаяДоля = СуммарнаяДоля + СтрокаДанных.Результат;
											КонецЕсли;
											Если Не ДанныеУчета.Следующий() Тогда
												ПродолжатьОбработку = Ложь;
												Прервать;
											КонецЕсли;											
										КонецЦикла;		
										// ошибки округления складываются на последнюю запись из группы базовых записей
										СтрокаДанных.Результат = СтрокаДанных.Результат + РезультатЗаСчетРаботодателя - СуммарнаяДоля;
									КонецЕсли;									
								КонецЕсли;									
								
							КонецЕсли;
							
							Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
								Если Не ДанныеУчета.Следующий() Тогда
									ПродолжатьОбработку = Ложь;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
						Иначе // ДанныеУчета.ДатаНачалаСобытия > мДатаЗакона180ФЗ, налоговые режимы: УСН и УСН+ЕНВД, с уплатой добровольных взносов
							
							СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_ДобровольныеВзносы; 
							СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
							СтрокаДанных.СубконтоДт2 = Неопределено;
							СтрокаДанных.СубконтоДт3 = Неопределено;
							СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
							СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
							СтрокаДанных.СубконтоКт2 = Неопределено;
							СтрокаДанных.СубконтоКт3 = Неопределено;
							СтрокаДанных.СчетДтНУ	 = Неопределено;
							СтрокаДанных.СчетКтНУ	 = Неопределено;
							СтрокаДанных.СубконтоДтНУ1 = Неопределено;
							СтрокаДанных.СубконтоДтНУ2 = Неопределено;
							СтрокаДанных.СубконтоДтНУ3 = Неопределено;
							СтрокаДанных.СубконтоКтНУ1 = Неопределено;
							СтрокаДанных.СубконтоКтНУ2 = Неопределено;
							СтрокаДанных.СубконтоКтНУ3 = Неопределено;
							СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
							СтрокаДанных.Результат	 = ДанныеУчета.Результат - Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							
							// здесь ЕСН отдельно - двумя строками
							Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД и мЕНВД Тогда
								СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
								СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_ДобровольныеВзносы; 
								СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
								СтрокаДанных.СубконтоДт2 = Неопределено;
								СтрокаДанных.СубконтоДт3 = Неопределено;
								СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
								СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
								СтрокаДанных.СубконтоКт2 = Неопределено;
								СтрокаДанных.СубконтоКт3 = Неопределено;
								СтрокаДанных.СчетДтНУ	 = Неопределено;
								СтрокаДанных.СчетКтНУ	 = Неопределено;
								СтрокаДанных.СубконтоДтНУ1 = Неопределено;
								СтрокаДанных.СубконтоДтНУ2 = Неопределено;
								СтрокаДанных.СубконтоДтНУ3 = Неопределено;
								СтрокаДанных.СубконтоКтНУ1 = Неопределено;
								СтрокаДанных.СубконтоКтНУ2 = Неопределено;
								СтрокаДанных.СубконтоКтНУ3 = Неопределено;
								СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;
								СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
								СтрокаДанных.ОблагаетсяЕНВД = Истина;
								СтрокаДанных.Результат	 = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							КонецЕсли;
							
							Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
								Если Не ДанныеУчета.Следующий() Тогда
									ПродолжатьОбработку = Ложь;
									Прервать;
								КонецЕсли;
							КонецЦикла;							
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе // налоговые режимы: ОСН, ОСН+ЕНВД но доли ЕНВД нет
				
				Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
					
					СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
					СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
					СтрокаДанных.СубконтоДт2 = Неопределено;
					СтрокаДанных.СубконтоДт3 = Неопределено;
					СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
					СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
					СтрокаДанных.СубконтоКт2 = Неопределено;
					СтрокаДанных.СубконтоКт3 = Неопределено;
					СтрокаДанных.СчетДтНУ	 = Неопределено;
					СтрокаДанных.СчетКтНУ	 = Неопределено;
					СтрокаДанных.СубконтоДтНУ1 = Неопределено;
					СтрокаДанных.СубконтоДтНУ2 = Неопределено;
					СтрокаДанных.СубконтоДтНУ3 = Неопределено;
					СтрокаДанных.СубконтоКтНУ1 = Неопределено;
					СтрокаДанных.СубконтоКтНУ2 = Неопределено;
					СтрокаДанных.СубконтоКтНУ3 = Неопределено;
					СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
					Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
						Если Не ДанныеУчета.Следующий() Тогда
							ПродолжатьОбработку = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				ИначеЕсли  ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание
					И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаВБыту Тогда
					
					СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
					СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
					СтрокаДанных.СубконтоДт2 = Неопределено;
					СтрокаДанных.СубконтоДт3 = Неопределено;
					СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
					СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
					СтрокаДанных.СубконтоКт2 = Неопределено;
					СтрокаДанных.СубконтоКт3 = Неопределено;
					СтрокаДанных.СчетДтНУ	 = Неопределено;
					СтрокаДанных.СчетКтНУ	 = Неопределено;
					СтрокаДанных.СубконтоДтНУ1 = Неопределено;
					СтрокаДанных.СубконтоДтНУ2 = Неопределено;
					СтрокаДанных.СубконтоДтНУ3 = Неопределено;
					СтрокаДанных.СубконтоКтНУ1 = Неопределено;
					СтрокаДанных.СубконтоКтНУ2 = Неопределено;
					СтрокаДанных.СубконтоКтНУ3 = Неопределено;
					СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
					Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
						Если Не ДанныеУчета.Следующий() Тогда
							ПродолжатьОбработку = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				Иначе // причина ОбщееЗаболевание или ТравмаВБыту
					
					// результат пособия за счет работодателя
					РезультатЗаСчетРаботодателя = Окр(ДанныеУчета.Результат * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
					     
					Если ДанныеУчета.Результат <> РезультатЗаСчетРаботодателя Тогда
						
						// есть доля пособия за счет ФСС
						СтрокаДанных.Результат	 = ДанныеУчета.Результат - РезультатЗаСчетРаботодателя;
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						
						Если ЕстьДоляБЛЗаСчетРаботодателя Тогда
							//доля за счет работодателя есть, скорректируем начало периода действия доли за счет ФСС
							СтрокаДанных.ПериодДействияНачало = Мин(СтрокаДанных.ПериодДействияКонец, ТретийКалендарныйДень);	
						КонецЕсли;
						
					КонецЕсли;
					
					Если РезультатЗаСчетРаботодателя <> 0 Тогда
						//доля пособия за счет работодателя не равна нулю, произведем отражение в учете
						Если ДанныеУчета.Результат <> РезультатЗаСчетРаботодателя Тогда
							// доля пособия за счет работодателя не равно единицы, создадим новую строку
							СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
						КонецЕсли;
						СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
						Если УказаноОтражениеВУчетеДляРаботодателя Тогда
							ЗаполнитьЗначенияСвойств(СтрокаДанных,ВыборкаПоШапкеДокумента,
							"СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1," +
							"СчетДтНУ,СубконтоДтНУ1,СубконтоДтНУ2,СубконтоДтНУ3,СчетКтНУ,СубконтоКтНУ1,ОтражениеВУСН");
							СтрокаДанных.Результат	 = РезультатЗаСчетРаботодателя;
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
							Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
								Если Не ДанныеУчета.Следующий() Тогда
									ПродолжатьОбработку = Ложь;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						Иначе // обходим строки и вычисляем долю результата по базовым записям
							// суммарная доля, которую уже "разбросали" на строки с одинаковым регистратором и номером строки
							СуммарнаяДоля = 0;
							ПерваяИзГруппыСтрок = Истина;
							Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
								// если это не первая из группы "базовых" строк по одной строке основного регистра
								// то создаем очередную строку движений
								Если Не ДанныеУчета.ЭтоЕНВД Тогда
									
									Если Не ПерваяИзГруппыСтрок Тогда
										СтрокаДанных = СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
										СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
									Иначе
										ПерваяИзГруппыСтрок = Ложь;
									КонецЕсли;
									
									Если СуммаПоСтроке = 0 Тогда
										Доля = 0;
									Иначе
										Если ДанныеУчета.РезультатБаза = NULL Тогда
											Успешно = Ложь;
											Доля = 0;
										Иначе
											Доля = РезультатЗаСчетРаботодателя * ДанныеУчета.РезультатБаза / СуммаПоСтроке;
										КонецЕсли;
									КонецЕсли;
									
									Если ДанныеУчета.СчетДтРазрез = NULL Тогда
										Успешно = Ложь;
									Иначе
										СтрокаДанных.СчетДт 	 = ДанныеУчета.СчетДтРазрез;
										СтрокаДанных.СубконтоДт1 = ПолучитьСубконто(ДанныеУчета.СубконтоДт1Разрез, ПараметрыПолученияСубконто);
										СтрокаДанных.СубконтоДт2 = ПолучитьСубконто(ДанныеУчета.СубконтоДт2Разрез, ПараметрыПолученияСубконто);
										СтрокаДанных.СубконтоДт3 = ПолучитьСубконто(ДанныеУчета.СубконтоДт3Разрез, ПараметрыПолученияСубконто);
										СтрокаДанных.СчетДтНУ	 = ДанныеУчета.СчетДтНУРазрез;
										СтрокаДанных.СубконтоДтНУ1 = ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ1Разрез, ПараметрыПолученияСубконто);
										СтрокаДанных.СубконтоДтНУ2 = ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ2Разрез, ПараметрыПолученияСубконто);
										СтрокаДанных.СубконтоДтНУ3 = ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ3Разрез, ПараметрыПолученияСубконто);
									КонецЕсли;
									Если ДанныеУчета.СчетКтРазрез = NULL Тогда
										Успешно = Ложь;
									Иначе
										СтрокаДанных.СчетКт 	 = ДанныеУчета.СчетКтРазрез;
										СтрокаДанных.СубконтоКт1 = ДанныеУчета.СубконтоКт1Разрез;
										СтрокаДанных.СубконтоКт2 = ДанныеУчета.СубконтоКт2Разрез;
										СтрокаДанных.СубконтоКт3 = ДанныеУчета.СубконтоКт3Разрез;
										СтрокаДанных.СчетКтНУ	 = ДанныеУчета.СчетКтНУРазрез;
										СтрокаДанных.СубконтоКтНУ1 = ДанныеУчета.СубконтоКтНУ1Разрез;
										СтрокаДанных.СубконтоКтНУ2 = Неопределено;
										СтрокаДанных.СубконтоКтНУ3 = Неопределено;
									КонецЕсли;
									
									СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
									СтрокаДанных.Результат = ?(РезультатЗаСчетРаботодателя > 0,Мин(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля),Макс(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля));
									СуммарнаяДоля = СуммарнаяДоля + СтрокаДанных.Результат;
								КонецЕсли;
								Если Не ДанныеУчета.Следующий() Тогда
									ПродолжатьОбработку = Ложь;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							// ошибки округления складываются на последнюю запись из группы базовых записей
							СтрокаДанных.Результат = СтрокаДанных.Результат + РезультатЗаСчетРаботодателя - СуммарнаяДоля;
						КонецЕсли;
					Иначе
						Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
							Если Не ДанныеУчета.Следующий() Тогда
								ПродолжатьОбработку = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	НаборЗаписей.Свернуть("КодДоходаЕСН,ОблагаетсяЕНВД,СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,СчетДтНУ,СчетКтНУ,СубконтоДтНУ1,СубконтоДтНУ2,СубконтоДтНУ3,СубконтоКтНУ1,СубконтоКтНУ2,СубконтоКтНУ3,ОтражениеВУСН,ПериодДействияНачало, ПериодДействияКонец, Сторно","Результат");
	
	ОтражениеВУчете.Загрузить(НаборЗаписей);
	
	Если ФормироватьДвижения Тогда
		
		Движения.ОсновныеНачисленияРаботниковОрганизаций.Очистить();
		Движения.РасчетСреднегоЗаработка.Очистить();
		
		Для Каждого Набор Из Движения Цикл
			Если ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") 
				или ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.РасчетСреднегоЗаработка") Тогда
				Набор.Записать();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат Успешно
	
КонецФункции

// Получает значение субконто в том случае, если заданы правила его переопределения
//
// Параметры
//  Субконто - начальное значение субконто
//  ПараметрыПолученияСубконто - соответсвие, 
//                              ключ соответсвия - тип, 
//                              значение - параметры, которые помогают преобразовывать 
//                              субконто соотв. типа из одного значения в другое
//
// Возвращаемое значение:
//   Субконто
// Если для субконто некоторого типа не задаы параметры преобразования, то его 
// значение не изменяется
//
Функция ПолучитьСубконто(Субконто, ПараметрыПолученияСубконто)
	
    Параметры = ПараметрыПолученияСубконто[ТипЗнч(Субконто)];
    Если Параметры = НеОпределено Тогда
        // для субконто этого типа не заданы парамтры переопределения
        Возврат Субконто;
    КонецЕсли;
    // для статьи затрат
    Если ТипЗнч(Субконто) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
        ВидСтатьиЗатрат = Параметры.ВидСтатьиЗатрат;
        ДополнительныеСтатьиЗатрат = Параметры.ДополнительныеСтатьиЗатрат;
        КлючПоиска = Новый Структура("ВидСтатьиЗатрат, СтатьяЗатратНачисления", ВидСтатьиЗатрат, Субконто);
        Строки = ДополнительныеСтатьиЗатрат.НайтиСтроки(КлючПоиска);
        Если Строки.Количество() = 0 Тогда
            КлючПоиска = Новый Структура("ВидСтатьиЗатрат, СтатьяЗатратНачисления", ВидСтатьиЗатрат, Справочники.СтатьиЗатрат.ПустаяСсылка());
            Строки = ДополнительныеСтатьиЗатрат.НайтиСтроки(КлючПоиска);
            Если Строки.Количество() = 0 Тогда
                Возврат Субконто;
            Иначе
                Возврат Строки[0].СтатьяЗатрат;
            КонецЕсли;
        Иначе
            Возврат Строки[0].СтатьяЗатрат;
        КонецЕсли;
    // для получения субконто другого типа - дописываем ИначеЕсли...
    Иначе
        Возврат Субконто;
    КонецЕсли;
    
КонецФункции

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.НачислениеПоБольничномуЛисту
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных

КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

// Формирует таблицу значений, описывающую размеры выплаты пособия по периодам
//
Функция ЗаполнитьТаблицуИнтервалов(ДатаНачалаСобытия, ВидРасчетаОтПричины) Экспорт
	
	ТаблицаИнтерваловОплаты = Новый ТаблицаЗначений;
	ТаблицаИнтерваловОплаты.Колонки.Добавить("Начало",Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеДоговорникам ИЛИ ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеУволенным Тогда
		ТаблицаИнтерваловОплаты.Колонки.Добавить("Расчет",Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций"));
	Иначе
		ТаблицаИнтерваловОплаты.Колонки.Добавить("Расчет",Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	КонецЕсли;
	ТаблицаИнтерваловОплаты.Колонки.Добавить("ПроцентОплаты",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(6,2)));
	
	ТаблицаИнтервалов = Новый ТаблицаЗначений;
	ТаблицаИнтервалов.Колонки.Добавить("Начало",Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеДоговорникам ИЛИ ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеУволенным Тогда
  		ТаблицаИнтервалов.Колонки.Добавить("Расчет",Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций"));
	Иначе
		ТаблицаИнтервалов.Колонки.Добавить("Расчет",Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	КонецЕсли;
	ТаблицаИнтервалов.Колонки.Добавить("ПроцентОплаты",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(6,2)));

	
	// в зависимости от причины нетрудоспособности оплачивается разное количество дней; процент оплаты также меняется
	ДатаОкончанияОплаты = Датаокончания;
		
	Если ПроцентОплаты = 80 Тогда
		
		Если ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС  Тогда
			ДниНеПолнойОплаты = 6;	
		Иначе
			ДниНеПолнойОплаты = 12;
		КонецЕсли;
		
		Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.БольничныйЛистАлкоголь Тогда
			ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия, 				   ВидРасчетаОтПричины, 0);
			ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия + 6 * мДлинаСуток, ВидРасчетаОтПричины, 40);
			ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия + 12 * мДлинаСуток, ВидРасчетаОтПричины, 50);
			ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаОкончанияОплаты + мДлинаСуток, 		   ВидРасчетаОтПричины, 0);

		Иначе	
			ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия, 				   ВидРасчетаОтПричины, ПроцентОплаты);
			ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия + дниНеПолнойОплаты * мДлинаСуток, ВидРасчетаОтПричины, 100);
			ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаОкончанияОплаты + мДлинаСуток, 		   ВидРасчетаОтПричины, 0);
		КонецЕсли
		
	Иначе
		
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия, 		   ВидРасчетаОтПричины, ПроцентОплаты );
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаОкончанияОплаты + мДлинаСуток, ВидРасчетаОтПричины, 0);
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНарушенияРежима) И  ЗначениеЗаполнено(ДатаНарушенияРежимаПо) Тогда 
		Для Каждого ИнтервалОплаты Из ТаблицаИнтерваловОплаты Цикл
			

			НомерИнтервалаОплаты = ТаблицаИнтерваловОплаты.Индекс(ИнтервалОплаты);
			ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтервалов, ИнтервалОплаты.Начало,ИнтервалОплаты.Расчет, ИнтервалОплаты.ПроцентОплаты);	
			Если ИнтервалОплаты.Начало > ДатаОкончания Тогда
				Продолжить;
			КонецЕсли;
			Если ДатаНарушенияРежима >= ИнтервалОплаты.Начало И  ДатаНарушенияРежима <= ТаблицаИнтерваловОплаты[НомерИнтервалаОплаты + 1].Начало Тогда
				ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтервалов, ДатаНарушенияРежима,ИнтервалОплаты.Расчет, ИнтервалОплаты.ПроцентОплаты*0.5);		
			КонецЕсли;
			Если  ИнтервалОплаты.Начало >=ДатаНарушенияРежима  И ИнтервалОплаты.Начало <= ДатаНарушенияРежимаПО Тогда
				ТаблицаИнтервалов.Удалить(ТаблицаИнтервалов.Количество() -1);
				ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтервалов, ИнтервалОплаты.Начало,ИнтервалОплаты.Расчет, ИнтервалОплаты.ПроцентОплаты*0.5);		
			КонецЕсли;

			Если ДатаНарушенияРежимаПо >= ИнтервалОплаты.Начало И  ДатаНарушенияРежимаПо < ТаблицаИнтерваловОплаты[НомерИнтервалаОплаты + 1].Начало-мДлинаСуток Тогда
				ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтервалов, ДатаНарушенияРежимаПо+ мДлинаСуток,ИнтервалОплаты.Расчет, ИнтервалОплаты.ПроцентОплаты);		
			КонецЕсли;						
			
		КонецЦикла;	
		Возврат ТаблицаИнтервалов

	Иначе
		Возврат ТаблицаИнтерваловОплаты
	КонецЕсли;

	
КонецФункции // ЗаполнитьТаблицуИнтервалов()

// Возвращает дату начала события
Функция ПолучитьДатуНачалаСобытия() Экспорт

	Если ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда
		Возврат ПервичныйБольничныйЛист.ДатаНачалаБольничногоЛиста;
	Иначе
		Возврат ДатаНачалаБольничногоЛиста;
	КонецЕсли;

КонецФункции // ПолучитьДатуНачалаСобытия()

// Возвращает вид расчета, соответствующий причине нетрудоспособности
//
// Параметры
//  Причина  – <ПеречислениеСсылка.ПричиныНетрудочпособности> – причина нетрудоспособности
//
// Возвращаемое значение:
//   ПланыВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций   – вид расчета
//
Функция ПолучитьВидРасчетаОтПричиныНетрудоспособности(Причина) Экспорт

	Если Причина = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременности;
	ИначеЕсли Причина = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве;
	ИначеЕсли Причина = Перечисления.ПричиныНетрудоспособности.ПоУходу Тогда
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОпалатБЛПоУходу2013;	
    ИначеЕсли  Причина = Перечисления.ПричиныНетрудоспособности.ПособиеДоговорникам Тогда
		Возврат ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ОплатаБЛДоговорникам;
	ИначеЕсли  Причина = Перечисления.ПричиныНетрудоспособности.ПособиеУволенным Тогда
		Возврат ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ОплатаБЛУволеным;
	Иначе
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛ2013;	
	КонецЕсли;
	
КонецФункции // ПолучитьВидРасчетаОтПричиныНетрудоспособности()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//	Структура, каждая строка которой соответствует одному из вариантов печати
//	
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	//vvv
	//Возврат Новый Структура("ОборотЛисткаНетрудоспособности","Оборот листка нетрудоспособности ");
	//
	//vvv
	СтруктураМакетов = Новый Структура;	
	СтруктураМакетов.Вставить("ОборотЛисткаНетрудоспособности",	"Оборот листка нетрудоспособности");
	СтруктураМакетов.Вставить("Макет",	"Печать");
	//
	
	Возврат СтруктураМакетов;

	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа для целей выода документа на печать
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапкеДляПечати()

	ДатаНачалаСобытия = Датаначала;
	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	//Запрос.УстановитьПараметр("ГоловнаяОрганизация" , ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаНачалаСобытия" , ДатаНачалаСобытия);
	Запрос.УстановитьПараметр("ФизЛицо" , Сотрудник.Физлицо);	
	Запрос.УстановитьПараметр("Сотрудник" , Сотрудник);	
	//Запрос.УстановитьПараметр("Приказ" , Приказ);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Отпуск.Дата КАК ДатаДокумента,
	               |	Отпуск.СерияВходящегоДокумента + "" "" + Отпуск.НомерВходящегоДокумента КАК НомерДокумента,
	               |	Отпуск.Сотрудник.Физлицо КАК ФизЛицо,
	               |	Отпуск.Организация.КодПоОКПО КАК КодПоОКПО,
	               |	Отпуск.Организация.НаименованиеПолное КАК НазваниеОрганизации,
	               |	ВЫБОР
	               |		КОГДА ФИОФизлица.ФизЛицо ЕСТЬ NULL 
	               |			ТОГДА Отпуск.Физлицо.Наименование
	               |		ИНАЧЕ ФИОФизлица.Фамилия + "" "" + ФИОФизлица.Имя + "" "" + ФИОФизлица.Отчество
	               |	КОНЕЦ КАК ФИО,
	               |	Отпуск.Сотрудник.Код КАК ТабельныйНомер,
	               |	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.Наименование КАК Подразделение,
	               |	РаботникиОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
	               |	Отпуск.ОграничениеПособия,
				   |	Отпуск.ПричинаНетрудоспособности
	               |ИЗ
	               |	Документ.НачислениеПоБольничномуЛисту КАК Отпуск
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаНачалаСобытия, ФизЛицо = &ФизЛицо) КАК ФИОФизлица
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	Отпуск.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапкеДляПечати()

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(ОтражениеВУчете = Истина)

	Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("Сотрудник",				Сотрудник);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",		ПолучитьДатуНачалаСобытия());
	//Запрос.УстановитьПараметр("ДатаЗакона255ФЗ", 		мДатаЗакона255ФЗ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	//vvv
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность
	|	КОНЕЦ КАК Должность,
	//
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|	КОНЕЦ КАК СуммированныйУчетРабочегоВремени,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикПолногоРабочегоВремени
	|ПОМЕСТИТЬ ВТДанныеОСотруднике
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеПоБольничномуЛисту.Дата,
	|	НачислениеПоБольничномуЛисту.ПериодРегистрации,
	|	НачислениеПоБольничномуЛисту.Организация,
	|	НачислениеПоБольничномуЛисту.Комментарий,
	|	НачислениеПоБольничномуЛисту.Ответственный,
	|	НачислениеПоБольничномуЛисту.Сотрудник,
	//vvv
	|	НачислениеПоБольничномуЛисту.Диагноз,
	|	ВЫБОР
	|		КОГДА НачислениеПоБольничномуЛисту.Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетПоДоговоруПодряда, 
	//
	|	НачислениеПоБольничномуЛисту.Физлицо,
	|	НачислениеПоБольничномуЛисту.ПричинаНетрудоспособности,
	|	НачислениеПоБольничномуЛисту.ПроцентОплаты,
	|	НачислениеПоБольничномуЛисту.ПервичныйБольничныйЛист,
	|	НачислениеПоБольничномуЛисту.ДатаНачала,
	|	НачислениеПоБольничномуЛисту.ДатаОкончания,
	|	НачислениеПоБольничномуЛисту.ОграничениеПособия,
	|	НачислениеПоБольничномуЛисту.ПерерассчитываемыйДокумент,
	|	НачислениеПоБольничномуЛисту.ПособиеОтражаетсяВРеглУчетеТекущимДокументом,
	|	НачислениеПоБольничномуЛисту.ДнейОплаты,
	|	НачислениеПоБольничномуЛисту.ОграничениеПособияПереходногоПериода,
	|	НачислениеПоБольничномуЛисту.ДатаНарушенияРежима,
	|	НачислениеПоБольничномуЛисту.ВидРасчета,
	|	НачислениеПоБольничномуЛисту.Ссылка,
	|	НачислениеПоБольничномуЛисту.РучнойРасчетСреднегоЗаработка,
	|	НачислениеПоБольничномуЛисту.РазмерСреднегоЗаработка,
	|	НачислениеПоБольничномуЛисту.ВидУчетаВремени,
	|	НачислениеПоБольничномуЛисту.ДатаНачалаБольничногоЛиста,
	|	НачислениеПоБольничномуЛисту.ПериодРасчетаСреднегоЗаработкаНачало,
	|	НачислениеПоБольничномуЛисту.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	НачислениеПоБольничномуЛисту.ВидОграниченияЗаработка
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту КАК НачислениеПоБольничномуЛисту
	|ГДЕ
	|	НачислениеПоБольничномуЛисту.Ссылка = &ДокументСсылка";
	Запрос.Выполнить();
	
			
		Запрос.Текст =
		"ВЫБРАТЬ
		|	"""" КАК СтратегияОтраженияВУчете,
		|	0 КАК ПроцентЕНВД,
		|	ЛОЖЬ КАК УказаноОтражениеВУчетеДляРаботодателя,
		|	"""" КАК ОтражениеВУСН,
		|	"""" КАК СчетДт,
		|	"""" КАК СубконтоДт1,
		|	"""" КАК СубконтоДт2,
		|	"""" КАК СубконтоДт3,
		|	"""" КАК СчетКт,
		|	"""" КАК СубконтоКт1,
		|	"""" КАК СчетДтНУ,
		|	"""" КАК СубконтоДтНУ1,
		|	"""" КАК СубконтоДтНУ2,
		|	"""" КАК СубконтоДтНУ3,
		|	"""" КАК СчетКтНУ,
		|	"""" КАК СубконтоКтНУ1
		|ПОМЕСТИТЬ ВТОтражениеВУчете";
		
	//КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеПоБольничномуЛисту.Ссылка,
	|	НачислениеПоБольничномуЛисту.Дата,
	|	НачислениеПоБольничномуЛисту.ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА НачислениеПоБольничномуЛисту.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА НачислениеПоБольничномуЛисту.Организация
	|		ИНАЧЕ НачислениеПоБольничномуЛисту.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА НачислениеПоБольничномуЛисту.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА НачислениеПоБольничномуЛисту.Организация
	|		ИНАЧЕ НачислениеПоБольничномуЛисту.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	НачислениеПоБольничномуЛисту.Организация КАК ОбособленноеПодразделение,
	|	НачислениеПоБольничномуЛисту.Сотрудник,
	//vvv
	|	НачислениеПоБольничномуЛисту.Диагноз,
	|	НачислениеПоБольничномуЛисту.РасчетПоДоговоруПодряда,
	//
	|	НачислениеПоБольничномуЛисту.Сотрудник.Физлицо КАК Физлицо,
	|	НачислениеПоБольничномуЛисту.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	НачислениеПоБольничномуЛисту.ПроцентОплаты,
	|	НачислениеПоБольничномуЛисту.ПричинаНетрудоспособности,
	|	НачислениеПоБольничномуЛисту.ДатаНачала,
	|	НачислениеПоБольничномуЛисту.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА НачислениеПоБольничномуЛисту.ПервичныйБольничныйЛист = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|			ТОГДА НачислениеПоБольничномуЛисту.ДатаНачалаБольничногоЛиста
	|		ИНАЧЕ НачислениеПоБольничномуЛисту.ПервичныйБольничныйЛист.ДатаНачалаБольничногоЛиста
	|	КОНЕЦ КАК ДатаНачалаСобытия,
	|	НачислениеПоБольничномуЛисту.ДатаНарушенияРежима,
	|	НачислениеПоБольничномуЛисту.ДнейОплаты,
	|	НачислениеПоБольничномуЛисту.ВидРасчета КАК ВидРасчета,
	|	НачислениеПоБольничномуЛисту.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	&ДокументСсылка КАК ДокументОснование,
	| 	ПараметрыВидаРасчета.ПериодРасчетаСреднегоЗаработка КАК ПериодРасчетаСреднегоЗаработка,
	|	НачислениеПоБольничномуЛисту.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА НачислениеПоБольничномуЛисту.ПервичныйБольничныйЛист = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|					ТОГДА НачислениеПоБольничномуЛисту.ДатаНачала
	|				ИНАЧЕ НачислениеПоБольничномуЛисту.ПервичныйБольничныйЛист.ДатаНачала
	|			КОНЕЦ = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВЫБОР
	|						КОГДА НачислениеПоБольничномуЛисту.ПервичныйБольничныйЛист = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|							ТОГДА НачислениеПоБольничномуЛисту.ДатаНачала
	|						ИНАЧЕ НачислениеПоБольничномуЛисту.ПервичныйБольничныйЛист.ДатаНачала
	|					КОНЕЦ, МЕСЯЦ), МЕСЯЦ, - ПараметрыВидаРасчета.ПериодРасчетаСреднегоЗаработка)
	|	КОНЕЦ КАК ДатаНачалаРасчетногоПериода,
	|	НачислениеПоБольничномуЛисту.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА НачислениеПоБольничномуЛисту.ПервичныйБольничныйЛист = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|					ТОГДА НачислениеПоБольничномуЛисту.ДатаНачала
	|				ИНАЧЕ НачислениеПоБольничномуЛисту.ПервичныйБольничныйЛист.ДатаНачала
	|			КОНЕЦ = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВЫБОР
	|						КОГДА НачислениеПоБольничномуЛисту.ПервичныйБольничныйЛист = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|							ТОГДА НачислениеПоБольничномуЛисту.ДатаНачала
	|						ИНАЧЕ НачислениеПоБольничномуЛисту.ПервичныйБольничныйЛист.ДатаНачала
	|					КОНЕЦ, МЕСЯЦ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ДатаОкончанияРасчетногоПериода,
	|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы КАК ГрафикРаботы,
	|	НачислениеПоБольничномуЛисту.ВидУчетаВремени КАК ВидУчетаВремени,
	|	НачислениеПоБольничномуЛисту.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	НачислениеПоБольничномуЛисту.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	НачислениеПоБольничномуЛисту.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	НачислениеПоБольничномуЛисту.ПособиеОтражаетсяВРеглУчетеТекущимДокументом КАК ОтражатьВУчетеЭтимДокументом,
	|	ВЫБОР
	|		КОГДА НачислениеПоБольничномуЛисту.Сотрудник.Организация = ВЫБОР
	|				КОГДА НачислениеПоБольничномуЛисту.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА НачислениеПоБольничномуЛисту.Организация
	|				ИНАЧЕ НачислениеПоБольничномуЛисту.Организация.ГоловнаяОрганизация
	|			КОНЕЦ
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА НачислениеПоБольничномуЛисту.Дата < НачислениеПоБольничномуЛисту.ПериодРегистрации
	|			ТОГДА НачислениеПоБольничномуЛисту.ПериодРегистрации
	|		КОГДА НачислениеПоБольничномуЛисту.Дата > КОНЕЦПЕРИОДА(НачислениеПоБольничномуЛисту.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА КОНЕЦПЕРИОДА(НачислениеПоБольничномуЛисту.ПериодРегистрации, МЕСЯЦ)
	|		ИНАЧЕ НачислениеПоБольничномуЛисту.Дата
	|	КОНЕЦ КАК ПериодРегистрацииДополнительныхНачислений,
	|	НачислениеПоБольничномуЛисту.РучнойРасчетСреднегоЗаработка,
	|	НачислениеПоБольничномуЛисту.РазмерСреднегоЗаработка,
	|	НачислениеПоБольничномуЛисту.ВидОграниченияЗаработка,
	|	ДанныеОбОтражении.СтратегияОтраженияВУчете,
	|	ДанныеОбОтражении.ПроцентЕНВД,
	|	ДанныеОбОтражении.УказаноОтражениеВУчетеДляРаботодателя,
	|	ДанныеОбОтражении.ОтражениеВУСН,
	|	ДанныеОбОтражении.СчетДт,
	|	ДанныеОбОтражении.СубконтоДт1,
	|	ДанныеОбОтражении.СубконтоДт2,
	|	ДанныеОбОтражении.СубконтоДт3,
	|	ДанныеОбОтражении.СчетКт,
	|	ДанныеОбОтражении.СубконтоКт1,
	|	ДанныеОбОтражении.СчетДтНУ,
	|	ДанныеОбОтражении.СубконтоДтНУ1,
	|	ДанныеОбОтражении.СубконтоДтНУ2,
	|	ДанныеОбОтражении.СубконтоДтНУ3,
	|	ДанныеОбОтражении.СчетКтНУ,
	|	ДанныеОбОтражении.СубконтоКтНУ1
	|ИЗ
	|	ВТДанныеДокумента КАК НачислениеПоБольничномуЛисту
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОСотруднике КАК РаботникиОрганизацииСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтражениеВУчете КАК ДанныеОбОтражении
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ПараметрыВидаРасчета
	|		ПО НачислениеПоБольничномуЛисту.ВидРасчета = ПараметрыВидаРасчета.Ссылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части Начисления
//
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.Организация;
	СписокСтруктурныхПодразделений = ПроцедурыУправленияПерсоналом.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",	СписокСтруктурныхПодразделений);
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",					Ссылка);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия" , 			ВыборкаПоШапкеДокумента.ДатаНачалаСобытия);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",			ГоловнаяОрганизация);
	//vvv
	Запрос.УстановитьПараметр("ВидРасчета",						ВыборкаПоШапкеДокумента.ВидРасчета);
	//
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.Сотрудник,
	|	ЕСТЬNULL(ГрафикРаботыПоСотруднику.Сотрудник, ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= СтрокиНачисления.ДатаНачалаСобытия
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|			ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|		КОНЕЦ) КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА (НЕ ГрафикРаботыНормаПоСотруднику.НомерСтроки ЕСТЬ NULL )
	|				ИЛИ (РаботникиОрганизации.ПериодЗавершения <= СтрокиНачисления.ДатаНачалаСобытия
	|						И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						И РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|						И (НЕ РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени ЕСТЬ NULL )
	|					ИЛИ (НЕ(РаботникиОрганизации.ПериодЗавершения <= СтрокиНачисления.ДатаНачалаСобытия
	|								И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)))
	|						И РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|						И (НЕ РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени ЕСТЬ NULL ))
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизации.ПериодЗавершения <= СтрокиНачисления.ДатаНачалаСобытия
	|							И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|					ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|				КОНЕЦ
	|	КОНЕЦ КАК ГрафикРаботыНорма,
	|	СтрокиНачисления.Ссылка.ВидУчетаВремени КАК ВидУчетаВремени,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	СтрокиНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	СтрокиНачисления.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйОбщееЗаболевание) КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете,
	|	СтрокиНачисления.ДатаНачала КАК МесяцНалоговогоПериода,
	|	СтрокиНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	СтрокиНачисления.ДатаНачала КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ДополнительныеДанные,
	//vvv
	|	СтрокиНачисления.ЗаработокЗаЕдиницуВремениФМП,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета = &ВидРасчета
	|				И НЕ СтрокиНачисления.Сторно
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПроверятьПериодНачисления,
	|	СтрокиНачисления.Должность,
	//
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.ОтработаноДнейПоПятидневке,
	|	СтрокиНачисления.ОтработаноЧасовПоПятидневке,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.НормаДнейПоПятидневке,
	|	СтрокиНачисления.НормаЧасовПоПятидневке,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	СтрокиНачисления.ДатаНачалаСобытия,
	|	СтрокиНачисления.Сторно,
	|	СтрокиНачисления.Авторасчет,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА (НЕ СтрокиНачисления.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент,
	|	СтрокиНачисления.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления,
	|	СтрокиНачисления.КоэффициентИндексации,
	|	СтрокиНачисления.ЧислоМесяцев
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту.Начисления КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			Документ.НачислениеПоБольничномуЛисту.Начисления КАК СтрокиНачисления
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО (РаботникиОрганизации.Период <= СтрокиНачисления.ДатаНачалаСобытия)
	|					И СтрокиНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ГДЕ
	|			СтрокиНачисления.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтрокиНачисления.НомерСтроки) КАК ПоследниеДаты
	|		ПО СтрокиНачисления.НомерСтроки = ПоследниеДаты.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО (РаботникиОрганизации.Период = ПоследниеДаты.МаксПериод)
	|			И СтрокиНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|			СтрокиНачисления.Сотрудник КАК Сотрудник
	|		ИЗ
	|			Документ.НачислениеПоБольничномуЛисту.Начисления КАК СтрокиНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|				ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = СтрокиНачисления.Сотрудник)
	|					И (ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаНачала, МЕСЯЦ))
	|		ГДЕ
	|			СтрокиНачисления.Ссылка = &ДокументСсылка) КАК ГрафикРаботыПоСотруднику
	|		ПО СтрокиНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|			СтрокиНачисления.Сотрудник КАК Сотрудник
	|		ИЗ
	|			Документ.НачислениеПоБольничномуЛисту.Начисления КАК СтрокиНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|				ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = СтрокиНачисления.Сотрудник)
	|					И (ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаНачала, МЕСЯЦ))
	|					И ((НЕ ГрафикиРаботыПоВидамВремени.План))
	|		ГДЕ
	|			СтрокиНачисления.Ссылка = &ДокументСсылка) КАК ГрафикРаботыНормаПоСотруднику
	|		ПО СтрокиНачисления.НомерСтроки = ГрафикРаботыНормаПоСотруднику.НомерСтроки
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

// Формирует запрос по таблице "РасчетСреднего" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоРасчетСреднего()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ДатаЗакона180ФЗ",	мДатаЗакона180ФЗ);

	// реализация Федерального закона № 180-ФЗ от 22.12.2005 г.:
	// поле "Сотрудник" с 1 января 2006 года может идентифицировать несколько мест работы,
	// включая работу по внутреннему совместительству
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СтрокаРасчетСреднего.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА СтрокаРасчетСреднего.Ссылка.Организация
	|		ИНАЧЕ СтрокаРасчетСреднего.Ссылка.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	СтрокаРасчетСреднего.Ссылка.Сотрудник.Физлицо КАК Физлицо,
	|	СтрокаРасчетСреднего.НомерСтроки,
	|	СтрокаРасчетСреднего.Сотрудник,
	|	СтрокаРасчетСреднего.ВидРасчета,
	|	СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокаРасчетСреднего.КоэффициентИндексации,
	|	СтрокаРасчетСреднего.Результат,
	|	СтрокаРасчетСреднего.ОтработаноПоПятидневке,
	|	СтрокаРасчетСреднего.НормаПоПятидневке,
	|	СтрокаРасчетСреднего.ОтработаноДней,
	|	СтрокаРасчетСреднего.ОтработаноЧасов,
	|	СтрокаРасчетСреднего.МесяцВыборки,
	|	СтрокаРасчетСреднего.ЧислоМесяцев,
	|	СтрокаРасчетСреднего.ТарифнаяСтавкаПериода,
	|	СтрокаРасчетСреднего.ТекущаяТарифнаяСтавка,
	|	СтрокаРасчетСреднего.КалендарныеДни,
	|	СтрокаРасчетСреднего.НачисленнаяСумма
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту.РасчетСреднего КАК СтрокаРасчетСреднего
	|ГДЕ
	|	СтрокаРасчетСреднего.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРасчетСреднего()

// Формирует запрос по таблице "ОтражениеВУчете" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоОтражениеВУчете()

	// готовим список счетов
	СчетаИсключения = Новый Массив();
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
	
	ТекстСчетаИсключения = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаИсключения)";
	
	Запрос = Новый Запрос(ТекстСчетаИсключения);
	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
	СчетаИсключения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия", ПолучитьДатуНачалаСобытия());


	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокаОтраженияВУчете.НомерСтроки,
	|	СтрокаОтраженияВУчете.Ссылка.Сотрудник,
	|	СтрокаОтраженияВУчете.Ссылка.Сотрудник.Физлицо КАК Физлицо,
	|	&ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	ВЫБОР
	|		КОГДА СтрокаОтраженияВУчете.СчетДт В (&СчетаИсключения)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражаетсяНУ,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА СтрокаОтраженияВУчете.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА СтрокаОтраженияВУчете.СубконтоДт1.ОтнесениеРасходовКДеятельностиЕНВД
	|				КОГДА СтрокаОтраженияВУчете.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА СтрокаОтраженияВУчете.СубконтоДт2.ОтнесениеРасходовКДеятельностиЕНВД
	|				КОГДА СтрокаОтраженияВУчете.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА СтрокаОтраженияВУчете.СубконтоДт3.ОтнесениеРасходовКДеятельностиЕНВД
	|				ИНАЧЕ NULL
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЕНВД,
	|	СтрокаОтраженияВУчете.Результат,
	|	СтрокаОтраженияВУчете.СчетДт,
	|	СтрокаОтраженияВУчете.СчетДт.Наименование КАК НаименованиеСчетДт,
	|	СтрокаОтраженияВУчете.СубконтоДт1,
	|	СтрокаОтраженияВУчете.СубконтоДт2,
	|	СтрокаОтраженияВУчете.СубконтоДт3,
	|	СтрокаОтраженияВУчете.СчетКт,
	|	СтрокаОтраженияВУчете.СубконтоКт1,
	|	СтрокаОтраженияВУчете.СубконтоКт2,
	|	СтрокаОтраженияВУчете.СубконтоКт3,
	|	СтрокаОтраженияВУчете.СчетДтНУ,
	|	СтрокаОтраженияВУчете.СубконтоДтНУ1,
	|	СтрокаОтраженияВУчете.СубконтоДтНУ2,
	|	СтрокаОтраженияВУчете.СубконтоДтНУ3,
	|	СтрокаОтраженияВУчете.СчетКтНУ,
	|	СтрокаОтраженияВУчете.СубконтоКтНУ1,
	|	СтрокаОтраженияВУчете.СубконтоКтНУ2,
	|	СтрокаОтраженияВУчете.СубконтоКтНУ3,
	|	СтрокаОтраженияВУчете.ОтражениеВУСН,
	|	СтрокаОтраженияВУчете.ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА СтрокаОтраженияВУчете.ПериодДействияКонец <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокаОтраженияВУчете.ПериодДействияКонец, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	СтрокаОтраженияВУчете.КодДоходаЕСН,
	|	СтрокаОтраженияВУчете.ОблагаетсяЕНВД,
	|	СтрокаОтраженияВУчете.Сторно
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту.ОтражениеВУчете КАК СтрокаОтраженияВУчете
	|ГДЕ
	|	СтрокаОтраженияВУчете.Ссылка = &ДокументСсылка
	|	И СтрокаОтраженияВУчете.Результат <> 0";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоОтражениеВУчете()

// Формирует запрос по табличным частям документам
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоПособияСоциальномуСтрахованию()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ДатаЗакона255ФЗ" , НачалоМесяца(мДатаЗакона255ФЗ));
	Запрос.УстановитьПараметр("НовыйСтраховойСлучай", ?(ПервичныйБольничныйЛист.Пустая() и ПерерассчитываемыйДокумент.Пустая(),1,0));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСНОсновныеНачисления.ПериодРегистрации КАК Период,
	|	ЕСНОсновныеНачисления.ОбособленноеПодразделение КАК Организация,
	|	ВЫБОР
	|		КОГДА ЕСНОсновныеНачисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияЗаСчетФСС)
	|			ТОГДА ЕСНОсновныеНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПустаяСсылка)
	|	КОНЕЦ КАК ВидПособияСоциальногоСтрахования,
	|	ЕСНОсновныеНачисления.ОблагаетсяЕНВД,
	|	ВЫБОР
	|		КОГДА ЕСНОсновныеНачисления.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗанятости,
	|	&НовыйСтраховойСлучай КАК СтраховыеСлучаи,
	|	СУММА(ЕСТЬNULL(ЕСНФактическийПериодДействия.ОплаченныеДни, ВЫБОР
	|				КОГДА ЕСНОсновныеНачисления.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|					ТОГДА ЕСНОсновныеНачисленияДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
	|				ИНАЧЕ ЕСНОсновныеНачисленияДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
	|			КОНЕЦ) * ВЫБОР
	|			КОГДА ЕСНОсновныеНачисления.Сторно
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ОплаченныеДни,
	|	СУММА(ЕСНОсновныеНачисления.Результат) КАК СуммаВсего,
	|	ЕСНОсновныеНачисления.Сотрудник,
	|	ЕСНОсновныеНачисления.ДокументОснование
	|ИЗ
	|	РегистрРасчета.ЕСНОсновныеНачисления КАК ЕСНОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ЕСНОсновныеНачисления.ДанныеГрафика(
	|				Регистратор = &ДокументСсылка
	|					И (НЕ ВидРасчета.ВидПособияСоциальногоСтрахования В (ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет), ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПустаяСсылка)))) КАК ЕСНОсновныеНачисленияДанныеГрафика
	|		ПО ЕСНОсновныеНачисления.Регистратор = ЕСНОсновныеНачисленияДанныеГрафика.Регистратор
	|			И ЕСНОсновныеНачисления.НомерСтроки = ЕСНОсновныеНачисленияДанныеГрафика.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЕСНФактическийПериодДействия.Регистратор КАК Регистратор,
	|			ЕСНФактическийПериодДействия.НомерСтроки КАК НомерСтроки,
	|			СУММА(РАЗНОСТЬДАТ(ЕСНФактическийПериодДействия.ПериодДействияНачало, ЕСНФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ) + 1) КАК ОплаченныеДни
	|		ИЗ
	|			РегистрРасчета.ЕСНОсновныеНачисления.ФактическийПериодДействия(
	|					Регистратор = &ДокументСсылка
	|						И ПериодДействия >= &ДатаЗакона255ФЗ
	|						И ВидРасчета.ВидПособияСоциальногоСтрахования В (ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность), ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды), ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание), ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай))) КАК ЕСНФактическийПериодДействия
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЕСНФактическийПериодДействия.Регистратор,
	|			ЕСНФактическийПериодДействия.НомерСтроки) КАК ЕСНФактическийПериодДействия
	|		ПО ЕСНОсновныеНачисления.НомерСтроки = ЕСНФактическийПериодДействия.НомерСтроки
	|			И ЕСНОсновныеНачисления.Регистратор = ЕСНФактическийПериодДействия.Регистратор
	|ГДЕ
	|	ЕСНОсновныеНачисления.Регистратор = &ДокументСсылка
	|	И ЕСНОсновныеНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования <> ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСНОсновныеНачисления.ПериодРегистрации,
	|	ЕСНОсновныеНачисления.ОбособленноеПодразделение,
	|	ЕСНОсновныеНачисления.ОблагаетсяЕНВД,
	|	ЕСНОсновныеНачисления.Сотрудник,
	|	ЕСНОсновныеНачисления.ДокументОснование,
	|	ВЫБОР
	|		КОГДА ЕСНОсновныеНачисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияЗаСчетФСС)
	|			ТОГДА ЕСНОсновныеНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСНОсновныеНачисления.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ПустаяСсылка)
	|	КОНЕЦ";
	
	Возврат Запрос.Выполнить();

КонецФункции

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период регистрации!", Отказ, Заголовок);
	КонецЕсли;

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, по которой выполняется начисление!", Отказ, Заголовок);
	КонецЕсли;

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ДатаНачала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата начала оплачиваемого события!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачалаСобытия) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата начала больничного листа!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаОкончания
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата окончания оплачиваемого события!", Отказ, Заголовок);
	КонецЕсли;
	
	//vvv
	// Диагноз
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Диагноз) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан диагноз!", Отказ, Заголовок);
	КонецЕсли;
	//
	
	// Период нетрудоспособности
	Если ВыборкаПоШапкеДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачала Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дата окончания оплачиваемого события не должна быть меньше даты начала!", Отказ, Заголовок);
	КонецЕсли;

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПричинаНетрудоспособности) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана причина нетрудоспособности!", Отказ, Заголовок);
	//ИначеЕсли ВыборкаПоШапкеДокумента.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком И НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СлучайУходаЗаБольнымРебенком) Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Не указан случай ухода за ребенком!", Отказ, Заголовок);
	КонецЕсли;
	
	// Процент оплаты
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПроцентОплаты) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан процент оплаты!", Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка данных для переходного периода
	//Если ПерерассчитываемыйДокумент.Пустая() 
	//	И ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачала) 
	//	И ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания)
	//	И ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПричинаНетрудоспособности) Тогда
	//	
	//	//мДатаЗакона255ФЗ = ПроведениеРасчетов.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006();
	//	//Если ВыборкаПоШапкеДокумента.ДатаНачалаСобытия < мДатаЗакона255ФЗ И ВыборкаПоШапкеДокумента.ДатаОкончания >= мДатаЗакона255ФЗ И ВыборкаПоШапкеДокумента.ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
	//	//	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПричинаНетрудоспособностиПереходногоПериода) Тогда
	//	//		ОбщегоНазначения.СообщитьОбОшибке("Не указана причина нетрудоспособности для переходного периода!", Отказ, Заголовок);
	//	//	ИначеЕсли ВыборкаПоШапкеДокумента.ПричинаНетрудоспособностиПереходногоПериода = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком И НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СлучайУходаЗаБольнымРебенкомПереходногоПериода) Тогда
	//	//		ОбщегоНазначения.СообщитьОбОшибке("Не указан случай ухода за ребенком для переходного периода!", Отказ, Заголовок);
	//	//	КонецЕсли;
	//	//	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПроцентОплатыПереходногоПериода) Тогда
	//	//		ОбщегоНазначения.СообщитьОбОшибке("Не указан процент оплаты для переходного периода!", Отказ, Заголовок);
	//	//	КонецЕсли;
	//	//КонецЕсли;
	//	
	//КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// ВидЗанятости
	//Если ВыборкаПоШапкеДокумента.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть оформлен на внутреннего совместителя!", Отказ, Заголовок);
	//КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверятьМестоРаботы)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Оплата"": ";
	
	// Сотрудник в табличном поле
	Если ПроверятьМестоРаботы И НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
	Иначе
		// Дата окончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
		Иначе
			Если ВыборкаПоСтрокамДокумента.ПериодДействияКонец < ВыборкаПоСтрокамДокумента.ПериодДействияНачало Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ, Заголовок);
			ИначеЕсли ВыборкаПоСтрокамДокумента.ОсновныеНачисления Тогда
				Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Дата начала события
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия) И ВыборкаПоСтрокамДокумента.ОсновныеНачисления Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала события!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ПроверятьМестоРаботы И ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;

	// Подразделение
	Если ПроверятьМестоРаботы И НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) И ВыборкаПоСтрокамДокумента.ОсновныеНачисления  Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение организации!", Отказ, Заголовок);
		
	ИначеЕсли ПроверятьМестоРаботы И ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации И ВыборкаПоСтрокамДокумента.ОсновныеНачисления Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
		
	КонецЕсли;
	
	Если НЕ ВыборкаПоСтрокамДокумента.Сторно И ВыборкаПоСтрокамДокумента.ОсновныеНачисления И
		//vvv
		ВыборкаПоСтрокамДокумента.ПроверятьПериодНачисления И 
		//
		(ВыборкаПоСтрокамДокумента.ПериодДействияНачало < ВыборкаПоШапкеДокумента.ДатаНачала 
			ИЛИ ВыборкаПоСтрокамДокумента.ПериодДействияНачало > КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания) 
			ИЛИ ВыборкаПоСтрокамДокумента.ПериодДействияКонец < ВыборкаПоШапкеДокумента.ДатаНачала 
			ИЛИ ВыборкаПоСтрокамДокумента.ПериодДействияКонец > КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания)) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "период начисления выходит за временные границы оплачиваемого события!", Ложь, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РасчетСреднего" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверятьМестоРаботы)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Расчет среднего"": ";
	
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала базового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ, Заголовок);
		// Дата окончания базового периода
	ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	Если ПроверятьМестоРаботы И НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОтраженияВУчете" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
Процедура ПроверитьЗаполнениеСтрокиОтраженияВУчете(ВыборкаПоДоходам, Отказ, ПроверятьСочетание, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоДоходам.НомерСтроки) + """ табл. части ""Проводки и данные для ЕСН"": ";
	
	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоДоходам.ПериодДействияНачало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала периода начисления!", Отказ, Заголовок);
	Иначе
		// Дата окончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоДоходам.ПериодДействияКонец) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания периода начисления!", Отказ, Заголовок);
		Иначе
			Если ВыборкаПоДоходам.ПериодДействияКонец < ВыборкаПоДоходам.ПериодДействияНачало Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания периода начисления не должна быть меньше даты начала!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ВыборкаПоДоходам.СчетДт) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не указан счет дебета!", Отказ, Заголовок);
		ПроверятьСочетание = Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ВыборкаПоДоходам.СчетКт) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не указан счет кредита!", Отказ, Заголовок);
		ПроверятьСочетание = Ложь;
	КонецЕсли;

	Сообщение = "";
	Если ПроверятьСочетание И ВыборкаПоДоходам.ОтражаетсяНУ И Не КорректноеСочетаниеСчетовНУ(ВыборкаПоДоходам.СчетДт,ВыборкаПоДоходам.НаименованиеСчетДт,ВыборкаПоДоходам.СчетКт,ВыборкаПоДоходам.СчетДтНУ, ВыборкаПоДоходам.СчетКтНУ, ВыборкаПоДоходам.ЭтоЕНВД, Сообщение) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Сообщение, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры:
//	Выборка				- спозиционированная на определеной строке выборка
//						  из результата запроса к ТЧ документа
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)
	
	Движение = ПроведениеРасчетов.ДобавитьСтрокуОсновныхНачислений(Движения.ОсновныеНачисленияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
    Движение.КоэффициентИндексации = ВыборкаПоСтрокамДокумента.КоэффициентИндексации;	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборОсновныеНачисления)
	
	СуммаРесурсов = ВыборкаПоСтрокамДокумента.Результат + ВыборкаПоСтрокамДокумента.ОтработаноПоПятидневке +
		ВыборкаПоСтрокамДокумента.НормаПоПятидневке + ВыборкаПоСтрокамДокумента.ОтработаноДней + ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
		
	Если СуммаРесурсов <> 0 Тогда
		
		Движение = НаборОсновныеНачисления.Добавить();
		
		СтрокаСвойствИзДокумента = "ПериодРегистрации,ФизЛицо,Организация,ДатаНачалаСобытия,СпособРасчета,"
		//vvv
										//+ "ДатаНачалаРасчетногоПериода,ДатаОкончанияРасчетногоПериода,ПериодРасчетаСреднегоЗаработка,ВидОграниченияЗаработка";
										+ "ДатаНачалаРасчетногоПериода,ДатаОкончанияРасчетногоПериода,ПериодРасчетаСреднегоЗаработка,ВидОграниченияЗаработка,РасчетПоДоговоруПодряда";
		//								
		СтрокаСвойствИзСтрокиДокумента = "БазовыйПериодНачало,БазовыйПериодКонец,Сотрудник,ВидРасчета,Результат," 
										+ "ОтработаноПоПятидневке,НормаПоПятидневке,ОтработаноДней,ОтработаноЧасов,"
										+ "КоэффициентИндексации,ЧислоМесяцев,КалендарныеДни,НачисленнаяСумма";
		
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРасчетаСреднего()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//	СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//											   накопления по которым надо проводить документ
//	СтруктураПараметров						 - структура параметров проведения.
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, УчетЗадолженностиПоМесяцам)
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.КодДоходаНДФЛ) Тогда
		
		Движение = Движения.НДФЛСведенияОДоходах.Добавить();
		
		// Свойства
		Движение.Период					= ВыборкаПоТЧ.МесяцНалоговогоПериода;
		
		// Измерения
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.ФизЛицо				= ВыборкаПоШапкеДокумента.ФизЛицо;
		Движение.КодДохода				= ВыборкаПоТЧ.КодДоходаНДФЛ;
		Движение.ПериодРегистрации		= ПериодРегистрации;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
		// Реквизиты
		Движение.ОбособленноеПодразделение  = ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.ИсчисленоИзЗарплаты	    = Истина;
		Движение.ПодразделениеОрганизации   = ВыборкаПоТЧ.ПодразделениеОрганизации; 
		Движение.ВидРасчета				    = ВыборкаПоТЧ.ВидРасчета;
	КонецЕсли;
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
	
	// Свойства
	Движение.Период					= КонецМесяца(ПериодРегистрации);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	// Измерения
	Движение.Организация			= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.ФизЛицо				= ВыборкаПоШапкеДокумента.ФизЛицо;
	//vvv комментируем
	//Если УчетЗадолженностиПоМесяцам Тогда
		Движение.ПериодВзаиморасчетов	= ПериодРегистрации;
	//КонецЕсли;
	
	// Ресурсы
	Движение.СуммаВзаиморасчетов	= ВыборкаПоТЧ.Результат;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

// Добавляет движение в наборы записей БУОсновныеНачисления
//
Процедура ДобавитьСтрокуОтраженияВУчете(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)
	
	СтрокаСвойствИзДокумента = "ПериодРегистрации,Сотрудник,ФизЛицо,Организация,ОбособленноеПодразделение,"
							+ "ГрафикРаботы,ВидУчетаВремени,ВидРасчета";
							
	СтрокаСвойствИзСтрокиДокумента = "ПериодДействияНачало,ПериодДействияКонец,Результат," 
							+ "СчетДт,СчетКт,СчетДтНУ,СчетКтНУ,ОтражениеВУСН,"
							+ "СубконтоДт1,СубконтоДт2,СубконтоДт3,СубконтоКт1,СубконтоКт2,СубконтоКт3,"
							+ "СубконтоДтНУ1,СубконтоДтНУ2,СубконтоДтНУ3,СубконтоКтНУ1,СубконтоКтНУ2,СубконтоКтНУ3,Сторно";
							
	Движение = Движения.БУОсновныеНачисления.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
	Движение.ДокументОснование = Ссылка;
		
	СтрокаСвойствИзСтрокиДокумента = "ПериодДействияНачало,ПериодДействияКонец,Результат," 
							+ "КодДоходаЕСН,ОблагаетсяЕНВД,Сторно";
							
	Движение = Движения.ЕСНОсновныеНачисления.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
	Движение.ДокументОснование = Ссылка;
		
КонецПроцедуры  // ДобавитьСтрокуОтраженияВУчете

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	ПерерассчитываемыйДокумент = Неопределено
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту") Тогда
		
		// Скопируем параметры начисления
		СтрокаРеквизитов = "Организация,Сотрудник,ФизЛицо,ПервичныйБольничныйЛист,ДатаНарушенияРежима,"
			+ "ПричинаНетрудоспособности,ВидРасчета,ДатаОкончания,ПроцентОплаты,ОграничениеПособия";

			
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Основание,СтрокаРеквизитов);	
		
		// добавим другие реквизиты
		Если ПервичныйБольничныйЛист.Пустая() Тогда
			ПервичныйБольничныйЛист	= Основание;
		КонецЕсли;
		ДатаНачала = КонецДня(ДатаОкончания) + 1;
		ДатаОкончания = '00010101';
		
	ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Если Не Основание.ТекущееОбособленноеПодразделение.Пустая() Тогда
			Организация = Основание.ТекущееОбособленноеПодразделение;
		Иначе
			Организация = Основание.Организация;
		КонецЕсли;
		
		Сотрудник	= Основание;
		Физлицо		= Основание.Физлицо;
		
	
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Ложь); // данные по отразжению в учете уже не нужны

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	ПроверятьМестоРаботы = ВыборкаПоШапкеДокумента.ДатаНачалаСобытия >= мДатаЗакона180ФЗ;
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда
		
		// Проверим непрерывность следования записей начислений
		ПроверитьНепрерывностьЗаписейНачислений(Отказ, Заголовок);
		
		// Получение учетной политики по персоналу организации
		УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
		
		Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
		Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьСписаниеФактическогоОтпуска			= Истина;
		Движения.ДополнительныеНачисленияРаботниковОрганизаций.мВыполнятьСписаниеФактическогоОтпуска	= Истина;

		// перепишем данные из таблицы начислений в набор записей
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок, ПроверятьМестоРаботы);
			
			Если НЕ Отказ Тогда
				Если ВыборкаПоНачислениям.ОсновныеНачисления Тогда
					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
				Иначе
					Движение = ПроведениеРасчетов.ДобавитьСтрокуДополнительныхНачислений(Движения.ДополнительныеНачисленияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
					Движение.КоэффициентИндексации =  ВыборкаПоНачислениям.КоэффициентИндексации;

				КонецЕсли;	
				ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетЗадолженностиПоМесяцам);
			КонецЕсли;
		КонецЦикла;
		
		// получим реквизиты табличной части
		ВыборкаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего().Выбрать();
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ, Заголовок, ПроверятьМестоРаботы);
			
			Если НЕ Отказ Тогда
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Движения.РасчетСреднегоЗаработка);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПособиеОтражаетсяВРеглУчетеТекущимДокументом Тогда
			
			// определим налоговый режим
			БухгалтерскийИНалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), КонецМесяца(ПериодРегистрации), Организация);
			УчетнаяПолитика = глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете")[КонецМесяца(ПериодРегистрации)][Организация];
	
			ВыборкаПоОтражениеВУчете = СформироватьЗапросПоОтражениеВУчете().Выбрать();
			Пока ВыборкаПоОтражениеВУчете.Следующий() Цикл
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиОтраженияВУчете(ВыборкаПоОтражениеВУчете, Отказ, Не УчетнаяПолитика.УСН, Заголовок);
				
				Если НЕ Отказ Тогда
					ДобавитьСтрокуОтраженияВУчете(ВыборкаПоШапкеДокумента, ВыборкаПоОтражениеВУчете);
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ Отказ Тогда
				
				ТаблицаДвижений = Движения.ЕСНОсновныеНачисления.Выгрузить();
				// Свернем таблицу, в ней могут быть дубли строк из-за доли больничного за счет работодателя
				ТаблицаДвижений.Свернуть("ВидРасчета,ВидУчетаВремени,ГрафикРаботы,Организация,ОбособленноеПодразделение,Сотрудник,ФизЛицо,КодДоходаЕСН,ОблагаетсяЕНВД,ПериодДействия,ПериодДействияНачало,ПериодДействияКонец,Сторно,ДокументОснование,ПериодРегистрации","Результат");
				Движения.ЕСНОсновныеНачисления.Загрузить(ТаблицаДвижений);
				
				ТаблицаДвижений.Свернуть("Организация,ФизЛицо,КодДоходаЕСН,ОблагаетсяЕНВД,ОбособленноеПодразделение,ПериодРегистрации","Результат");
				ТаблицаДвижений.Колонки.ПериодРегистрации.Имя = "Период";
				Движения.ЕСНСведенияОДоходах.Загрузить(ТаблицаДвижений);
				
				Если НачалоМесяца(ПериодРегистрации) >= НачалоМесяца(мДатаЗакона255ФЗ) Тогда
					
					ТаблицаДвижений = Движения.ЕСНОсновныеНачисления.Выгрузить();
										
					// временно добавим сторно-записи для формирования правильного ФПД записей по пособиям
					ТаблицаСторно = Движения.ЕСНОсновныеНачисления.ПолучитьДополнение();
					Для каждого СтрокаТаблицы Из ТаблицаСторно Цикл
						Движение = Движения.ЕСНОсновныеНачисления.Добавить();
						ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
						Движение.Сторно = Истина;
						Движение.ПериодДействияНачало = СтрокаТаблицы.ПериодДействияНачалоСторно;
						Движение.ПериодДействияКонец  = СтрокаТаблицы.ПериодДействияКонецСторно;
						Движение.ПериодРегистрации    = СтрокаТаблицы.ПериодРегистрацииСторно;
					КонецЦикла;
					Движения.ЕСНОсновныеНачисления.Записать();
					
					Выборка = СформироватьЗапросПоПособияСоциальномуСтрахованию().Выбрать();
					Пока Выборка.Следующий() Цикл 
						Движение = Движения.ПособияСоциальномуСтрахованию.Добавить();
						ЗаполнитьЗначенияСвойств(Движение,Выборка);
						Движение.ДатаСтраховогоСлучая = ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
					КонецЦикла;
					// избавимся от временных строк учета
					Движения.ЕСНОсновныеНачисления.Загрузить(ТаблицаДвижений);
				КонецЕсли;
				
			КонецЕсли;
	
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			// выполним удаление перерасчетов исправленного документа
			Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
				ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка, Истина); // Только по исправленным документам
			КонецЕсли;
		
			Для Каждого Набор Из Движения Цикл
				ТипНабораЗаписей = ТипЗнч(Набор);
				Если ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") 
					Или ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда
					Набор.Записать();
				КонецЕсли;
			КонецЦикла;
			ПроведениеРасчетов.ОбработатьТаблицуПерерасчетов(Ссылка);
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ПолучитьДатуНачалаСобытия() < мДатаЗакона255ФЗ И ДатаОкончания >= мДатаЗакона255ФЗ И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве) Тогда
		ПроцентОплатыПереходногоПериода = 0;
		ПричинаНетрудоспособностиПереходногоПериода = "";
		СлучайУходаЗаБольнымРебенкомПереходногоПериода = "";
		ОграничениеПособияПереходногоПериода = "";
	КонецЕсли;
	
	//ЗаполнитьМестоРаботы = Не ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ПоддержкаВнутреннегоСовместительства");
	//ЗаполнитьМестоРаботы = Ложь;	
	//Если ЗаполнитьМестоРаботы Тогда
	//	Для каждого СтрокаТЧ Из РасчетСреднего Цикл
	//		СтрокаТЧ.Сотрудник = Сотрудник
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток		 = 86400;		// в секундах
мДатаЗакона180ФЗ = '20060101';	// 1 января 2006 года
мДатаЗакона255ФЗ = ПроведениеРасчетов.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006();


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет расчет налога для указанного списка физлиц 
Процедура Рассчитать() Экспорт

	ФизЛица = РаботникиОрганизации.ВыгрузитьКолонку("ФизЛицо");
	
	Если Организация.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		НФДЛКВозврату = ПолучитьНДФЛКВозвратуЮрЛицо(ФизЛица);
		ПоляСтруктурыПоиска = "ФизЛицо";
	Иначе
		НФДЛКВозврату = ПолучитьНДФЛКВозвратуФизЛицо(ФизЛица);
		ПоляСтруктурыПоиска = "ФизЛицо";
	КонецЕсли;
	
	//ПоляСтруктурыПоиска = СтрЗаменить(ПоляСтруктурыПоиска, "ДополнительноеПоле,", НДФЛВозвратНалогаПереопределяемый.ПолучитьДополнительноеПолеОписанияСтроки());
	СтруктураПоиска = Новый Структура(ПоляСтруктурыПоиска);
	
	Для Каждого СтрокаТЧ Из РаботникиОрганизации Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ); 
		СтрокиВозврата = НФДЛКВозврату.НайтиСтроки(СтруктураПоиска);
		Если СтрокиВозврата.Количество() > 0 Тогда
			СтрокаТЧ.СуммаВозвратаПоСтавке13 = СтрокиВозврата[0].СуммаВозвратаПоСтавке13;
		Иначе
			СтрокаТЧ.СуммаВозвратаПоСтавке13 = 0;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры


// Заполняет табличную часть документа отпусками по графику отпусков
//
// Параметры
//  ДатаНачала, ДатаОкончания – даты начала и окончания 
//								просмотра графика отпусков	
//
Процедура Автозаполнение(ФизЛица = Неопределено) Экспорт
	
	Если Организация.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		НФДЛКВозврату = ПолучитьНДФЛКВозвратуЮрЛицо(ФизЛица);
	Иначе
		НФДЛКВозврату = ПолучитьНДФЛКВозвратуФизЛицо(ФизЛица);                                                           
	КонецЕсли;
	Если ФизЛица = Неопределено Тогда
		РаботникиОрганизации.Загрузить(НФДЛКВозврату);
	Иначе
		Для каждого СтрокаРезультата Из НФДЛКВозврату Цикл
			ЗаполнитьЗначенияСвойств(РаботникиОрганизации.Добавить(),СтрокаРезультата);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // Автозаполнение()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ЗАПОЛНЕНИЯ И РАСЧЕТА ДОКУМЕНТА

// Выбор сальдо на дату документа с учетом всех "МесяцевНалоговогоПериода" < МесяцНалоговогоПериода
// Интересует только отрицательное сальдо по налогу, т.е. когда удержано больше чем начислено
Функция ПолучитьНДФЛКВозвратуЮрЛицо(ФизЛица = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("МесяцНалоговогоПериода", КонецМесяца(МесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("НачалоНалоговогоПериода", НачалоГода(МесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("Ставка13", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);


	Запрос.УстановитьПараметр("ПоВсемФизлицам", Физлица = Неопределено);	
	Запрос.УстановитьПараметр("Физлица", Физлица);	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента = &Ставка13
	|			ТОГДА ВЫБОР
	|					КОГДА НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ТОГДА НДФЛРасчетыСБюджетом.Налог
	|					ИНАЧЕ -НДФЛРасчетыСБюджетом.Налог
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СальдоПоСтавке13
	|ПОМЕСТИТЬ ВТСтрокиРегистра
	|ИЗ
	|	РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|ГДЕ
	|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода <= &МесяцНалоговогоПериода
	|	И НДФЛРасчетыСБюджетом.Организация = &ГоловнаяОрганизация
	|	И НДФЛРасчетыСБюджетом.Период <= &ДатаДокумента
	|	И (&ПоВсемФизлицам
	|			ИЛИ НДФЛРасчетыСБюджетом.ФизЛицо В (&Физлица))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СальдоПоСтавкам.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА СальдоПоСтавкам.СальдоПоСтавке13 < 0
	|			ТОГДА -СальдоПоСтавкам.СальдоПоСтавке13
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВозвратаПоСтавке13
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|		СУММА(НДФЛРасчетыСБюджетом.СальдоПоСтавке13) КАК СальдоПоСтавке13
	|	ИЗ
	|		ВТСтрокиРегистра КАК НДФЛРасчетыСБюджетом
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НДФЛРасчетыСБюджетом.ФизЛицо) КАК СальдоПоСтавкам
	|ГДЕ
	|	СальдоПоСтавкам.СальдоПоСтавке13 < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо";
	
	//ДополнительноеПоле = НДФЛВозвратНалогаПереопределяемый.ПолучитьДополнительноеПолеОписанияСтроки();
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СальдоПоСтавкам.ДополнительноеПоле,", ДополнительноеПоле);
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НДФЛРасчетыСБюджетом.НомерСтроки КАК ДополнительноеПоле,", ДополнительноеПоле);
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НДФЛРасчетыСБюджетом.НомерСтроки,", ДополнительноеПоле);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить()
	
КонецФункции

// Выбор сальдо на дату документа с учетом всех "МесяцевНалоговогоПериода" < МесяцНалоговогоПериода
// Интересует только отрицательное сальдо по налогу, т.е. когда удержано больше чем начислено
Функция ПолучитьНДФЛКВозвратуФизЛицо(ФизЛица = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("МесяцНалоговогоПериода", КонецМесяца(МесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("НачалоНалоговогоПериода", НачалоГода(МесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("Ставка13", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);

	Запрос.УстановитьПараметр("ПоВсемФизлицам", Физлица = Неопределено);	
	Запрос.УстановитьПараметр("Физлица", Физлица);	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента = &Ставка13
	|			ТОГДА ВЫБОР
	|					КОГДА НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ТОГДА НДФЛРасчетыСБюджетом.Налог
	|					ИНАЧЕ -НДФЛРасчетыСБюджетом.Налог
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СальдоПоСтавке13
	|ПОМЕСТИТЬ ВТСтрокиРегистра
	|ИЗ
	|	РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|ГДЕ
	|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода <= &МесяцНалоговогоПериода
	|	И НДФЛРасчетыСБюджетом.Организация = &ГоловнаяОрганизация
	|	И НДФЛРасчетыСБюджетом.Период <= &ДатаДокумента
	|	И (&ПоВсемФизлицам
	|			ИЛИ НДФЛРасчетыСБюджетом.ФизЛицо В (&Физлица))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СальдоПоСтавкам.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА СальдоПоСтавкам.СальдоПоСтавке13 < 0
	|			ТОГДА -СальдоПоСтавкам.СальдоПоСтавке13
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВозвратаПоСтавке13
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|		СУММА(НДФЛРасчетыСБюджетом.СальдоПоСтавке13) КАК СальдоПоСтавке13
	|	ИЗ
	|		ВТСтрокиРегистра КАК НДФЛРасчетыСБюджетом
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НДФЛРасчетыСБюджетом.ФизЛицо) КАК СальдоПоСтавкам
	|ГДЕ
	|	СальдоПоСтавкам.СальдоПоСтавке13 < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо";
	
	//ДополнительноеПоле = НДФЛВозвратНалогаПереопределяемый.ПолучитьДополнительноеПолеОписанияСтроки();
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СальдоПоСтавкам.ДополнительноеПоле,", ДополнительноеПоле);
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НДФЛРасчетыСБюджетом.НомерСтроки КАК ДополнительноеПоле,", ДополнительноеПоле);
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НДФЛРасчетыСБюджетом.НомерСтроки,", ДополнительноеПоле);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить()
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДФЛВозвратНалога.Дата,
	|	НДФЛВозвратНалога.Ссылка,
	|	НДФЛВозвратНалога.МесяцНалоговогоПериода,
	|	НДФЛВозвратНалога.Организация,
	|	ВЫБОР
	|		КОГДА НДФЛВозвратНалога.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА НДФЛВозвратНалога.Организация
	|		ИНАЧЕ НДФЛВозвратНалога.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация
	|ИЗ
	|	Документ.НДФЛВозвратНалога КАК НДФЛВозвратНалога
	|ГДЕ
	|	НДФЛВозвратНалога.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части документам
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДФЛВозвратНалогаРаботникиОрганизации.НомерСтроки,
	|	НДФЛВозвратНалогаРаботникиОрганизации.ФизЛицо,
	|	НДФЛВозвратНалогаРаботникиОрганизации.СуммаВозвратаПоСтавке13,
	|	НДФЛВозвратНалогаРаботникиОрганизации.СуммаВозвратаПоСтавке09,
	|	НДФЛВозвратНалогаРаботникиОрганизации.СуммаВозвратаПоСтавке35,
	|	НДФЛВозвратНалогаРаботникиОрганизации.СуммаВозвратаПоСтавке9,
	|	НДФЛВозвратНалогаРаботникиОрганизации.СуммаВозвратаПоСтавке40
	//|	НДФЛВозвратНалогаРаботникиОрганизации.КодПоОКАТО,
	//|	НДФЛВозвратНалогаРаботникиОрганизации.КПП
	|ИЗ
	|	Документ.НДФЛВозвратНалога.РаботникиОрганизации КАК НДФЛВозвратНалогаРаботникиОрганизации
	|ГДЕ
	|	НДФЛВозвратНалогаРаботникиОрганизации.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 		 - флаг отказа в проведении,
//	Заголовок	 - Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.МесяцНалоговогоПериода) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период, за который возвращается налог!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строки документа.
Процедура ПроверитьЗаполнениеСтрокиРаботникиОрганизации(ВыборкаПоРаботникиОрганизации, Отказ, Заголовок)

		НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоРаботникиОрганизации.НомерСтроки) +
									""" табл. части ""Работники организации"": ";
									
		Если НЕ ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ФизЛицо) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указано физическое лицо!", Отказ, Заголовок);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.СуммаВозвратаПоСтавке13 + ВыборкаПоРаботникиОрганизации.СуммаВозвратаПоСтавке09 + ВыборкаПоРаботникиОрганизации.СуммаВозвратаПоСтавке35 + ВыборкаПоРаботникиОрганизации.СуммаВозвратаПоСтавке9 + ВыборкаПоРаботникиОрганизации.СуммаВозвратаПоСтавке40) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указаны суммы возврата налога!", Отказ, Заголовок);
		КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникиОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, УчетЗадолженностиПоМесяцам)
	
	// Проведем возврат как отрицательный расход (отрицательное удержание налога) отдельно для каждой ставки
	
	Если ВыборкаПоТЧ.СуммаВозвратаПоСтавке13 <> 0 Тогда
		Движение = Движения.НДФЛКЗачету.Добавить();
		// Свойства
		Движение.Период                 = ВыборкаПоШапкеДокумента.Дата;
		Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
		// Измерения
		Движение.Организация			        = ВыборкаПоШапкеДокумента.Организация;
		Движение.ФизЛицо                        = ВыборкаПоТЧ.ФизЛицо;
		Движение.СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
		
		// Ресурсы
		Движение.СуммаНДФЛКЗачету = ВыборкаПоТЧ.СуммаВозвратаПоСтавке13;
	КонецЕсли;
		
	// Проведем возврат как отрицательный расход (отрицательное удержание налога) отдельно для каждой ставки
	
	Если ВыборкаПоТЧ.СуммаВозвратаПоСтавке13 <> 0 Тогда
		Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
		// Свойства
		Движение.Период                 = ВыборкаПоШапкеДокумента.Дата;
		Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
		// Измерения
		Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
		Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
		Движение.МесяцНалоговогоПериода      	= ВыборкаПоШапкеДокумента.МесяцНалоговогоПериода;
		// Ресурсы
		Движение.Налог					= - ВыборкаПоТЧ.СуммаВозвратаПоСтавке13; 
		// Реквизиты
		Движение.ОбособленноеПодразделение  = ВыборкаПоШапкеДокумента.Организация;
		Движение.ВидСтроки				= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.ВозвратНалога;
	КонецЕсли;
	
	// Проведем возврат как отрицательный расход (отрицательное удержание налога) отюдельно для каждой ставки
	
	Если ВыборкаПоТЧ.СуммаВозвратаПоСтавке13 <> 0 Тогда
		Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
		// Свойства
		Движение.Период           				= ВыборкаПоШапкеДокумента.Дата;
		Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
		// Измерения
		Движение.Организация					= ВыборкаПоШапкеДокумента.Организация;
		Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
		//vvv комментируем
		//Если УчетЗадолженностиПоМесяцам Тогда
			//Движение.ПериодВзаиморасчетов           = ВыборкаПоШапкеДокумента.МесяцНалоговогоПериода;
			Движение.ПериодВзаиморасчетов           = НачалоМесяца(ВыборкаПоШапкеДокумента.Дата);
		//КонецЕсли;
		
		// Ресурсы
		Движение.СуммаВзаиморасчетов			= ВыборкаПоТЧ.СуммаВозвратаПоСтавке13; 
	КонецЕсли;
	
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// ведется ли учет задолженности в разрезе периодов возникновения задолженности
			УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");

			// получим реквизиты табличной части
			ВыборкаПоРаботникиОрганизации = СформироватьЗапросПоРаботникиОрганизации(Режим).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникиОрганизации(ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);
				
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, УчетЗадолженностиПоМесяцам);

			КонецЦикла;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации,, "Физлицо");
	
	Если Не ОбменДанными.Загрузка Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение  Тогда
			
			ЭтоНеЮрЛицо = Не Организация.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо;
			
			Для каждого СтрокаТЧ Из РаботникиОрганизации Цикл
				Если ЭтоНеЮрЛицо Тогда
					СтрокаТЧ.КодПоОКАТО = "";
					СтрокаТЧ.КПП = "";
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


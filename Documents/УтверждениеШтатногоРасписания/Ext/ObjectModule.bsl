////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция ПолучитьКодСтроки() Экспорт
	
	мКод = 0;
	
	Для Каждого мСтрокаТЧ Из ШтатныеЕдиницы Цикл
		мКод = Макс(мКод, мСтрокаТЧ.КодСтроки);
	КонецЦикла;
	
	Возврат мКод + 1;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	УтверждениеШтатногоРасписания.Дата,
	|	УтверждениеШтатногоРасписания.Организация,
	|	ВЫБОР
	|		КОГДА УтверждениеШтатногоРасписания.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	|			ТОГДА УтверждениеШтатногоРасписания.Организация
	|		ИНАЧЕ УтверждениеШтатногоРасписания.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	УтверждениеШтатногоРасписания.Ссылка,
	|	УтверждениеШтатногоРасписания.ДатаВступленияВСилу
	|ИЗ
	|	Документ.УтверждениеШтатногоРасписания КАК УтверждениеШтатногоРасписания
	|ГДЕ
	|	УтверждениеШтатногоРасписания.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "ШтатныеЕдиницы" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются данными о 
//  штатными единицами из регистра сведений ШтатныеЕдиницы 
//
Функция СформироватьЗапросПоШтатнымЕдиницам(ВыборкаПоШапкеДокумента, Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	УтверждениеШтатногоРасписанияШтатныеЕдиницы.ПодразделениеОрганизации,
	|	УтверждениеШтатногоРасписанияШтатныеЕдиницы.Должность,
	|	УтверждениеШтатногоРасписанияШтатныеЕдиницы.НомерСтроки,
	|	УтверждениеШтатногоРасписанияШтатныеЕдиницы.КоличествоСтавок,
	|	УтверждениеШтатногоРасписанияШтатныеЕдиницы.Тариф,
	|	УтверждениеШтатногоРасписанияШтатныеЕдиницы.Должность.ВидТарифнойСтавки КАК ВидТарифнойСтавки,
	|	УтверждениеШтатногоРасписанияШтатныеЕдиницы.ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА УтверждениеШтатногоРасписанияШтатныеЕдиницы.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСПозициямиШтатногоРасписания.ЗакрытьПозицию)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Используется
	|ИЗ
	|	Документ.УтверждениеШтатногоРасписания.ШтатныеЕдиницы КАК УтверждениеШтатногоРасписанияШтатныеЕдиницы
	|ГДЕ
	|	НЕ УтверждениеШтатногоРасписанияШтатныеЕдиницы.КоличествоСтавок ЕСТЬ NULL 
	|	И УтверждениеШтатногоРасписанияШтатныеЕдиницы.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	УтверждениеШтатногоРасписанияШтатныеЕдиницы.ПодразделениеОрганизации,
	|	УтверждениеШтатногоРасписанияШтатныеЕдиницы.Должность";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияЗК.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиШтатныеЕдиницы(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Штатные единицы"": ";
	
	// Должность
	НетДолжности = Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Должность);
	Если НетДолжности Тогда
		ОбщегоНазначенияЗК.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрана должность!", Отказ, Заголовок);
	КонецЕсли;
		
	Если НетДолжности Тогда
		Возврат; // Дальше не проверяем
	КонецЕсли;
		
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)
	
	Движение = Движения.ШтатноеРасписаниеОрганизаций.Добавить();
	
	// Свойства
	Движение.Период							= ВыборкаПоШапкеДокумента.ДатаВступленияВСилу;
	
	// Измерения
	Движение.ПодразделениеОрганизации    	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации; 
	Движение.Должность						= ВыборкаПоСтрокамДокумента.Должность; 
	
	// Ресурсы
	Движение.КоличествоСтавок				= ВыборкаПоСтрокамДокумента.КоличествоСтавок;
	Движение.МинимальнаяТарифнаяСтавка      = ВыборкаПоСтрокамДокумента.Тариф;
	Движение.МаксимальнаяТарифнаяСтавка     = ВыборкаПоСтрокамДокумента.Тариф;
	Движение.ВидТарифнойСтавки              = ВыборкаПоСтрокамДокумента.ВидТарифнойСтавки;
	Движение.ГрафикРаботы                   = ВыборкаПоСтрокамДокумента.ГрафикРаботы;
	Движение.ВалютаТарифнойСтавки           = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	Движение.Используется                   = ВыборкаПоСтрокамДокумента.Используется;
	
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// получим реквизиты табличной части
			РезультатЗапросаПоШтатнымЕдиницам = СформироватьЗапросПоШтатнымЕдиницам(ВыборкаПоШапкеДокумента, Режим);
			ВыборкаПоСтрокамДокумента = РезультатЗапросаПоШтатнымЕдиницам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				
				ПроверитьЗаполнениеСтрокиШтатныеЕдиницы(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента , Отказ, Заголовок);
				
				Если НЕ Отказ Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения

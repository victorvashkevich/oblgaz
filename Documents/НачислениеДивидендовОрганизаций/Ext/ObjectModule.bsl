////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Выполняет распределение общей суммы дивидендов между акционерами пропорционально количеству акций
Процедура РассчитатьДивиденды() Экспорт
	
	Если НаОднуАкцию Тогда
		// Сумма к начислению указана в расчете на одну акцию
		СуммаНаАкцию = ДивидендыНачисляемые;
		Для каждого СтрокаТЧ Из Начисления Цикл
			Если Не СтрокаТЧ.Сторно Тогда
				СтрокаТЧ.Результат = СтрокаТЧ.КоличествоАкций * СуммаНаАкцию;
			КонецЕсли;
		КонецЦикла; 
	Иначе
		// Начисляемые дивиденды надо распределить пропорционально количеству акций			
		ЗаписиКРасчету = Начисления.Выгрузить(Начисления.НайтиСтроки(Новый Структура("Сторно",Ложь)));
		СторноЗаписи = Начисления.Выгрузить(Начисления.НайтиСтроки(Новый Структура("Сторно",Истина)));
		
		МассивСуммКНачислению = ОбщегоНазначения.РаспределитьПропорционально(ДивидендыНачисляемые,ЗаписиКРасчету.ВыгрузитьКолонку("КоличествоАкций"));
		Если МассивСуммКНачислению <> Неопределено Тогда
			Начисления.Загрузить(СторноЗаписи);
			ЗаписиКРасчету.ЗагрузитьКолонку(МассивСуммКНачислению,"Результат");
			Для каждого СтрокаТЗ Из ЗаписиКРасчету Цикл
				ЗаполнитьЗначенияСвойств(Начисления.Добавить(), СтрокаТЗ);
			КонецЦикла;
		Иначе //обнулим суммы дивидендов
			Для каждого СтрокаТЧ Из Начисления Цикл
				Если Не СтрокаТЧ.Сторно Тогда
					СтрокаТЧ.Результат = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Выполняет распределение общей суммы полученных дивидентов(вычета) между акционерами пропорционально количеству акций
// Вычеты распределяются только между налоговыми резидентами
Процедура РассчитатьНДФЛ() Экспорт
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
    ВыборкаПоШапкеДокумента.Следующий();
		
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаНачисления", ВыборкаПоШапкеДокумента.ДатаРегистрации);
	Запрос.УстановитьПараметр("СтавкаРезидента", ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13));
	Запрос.УстановитьПараметр("СтавкаНеРезидента", ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛСНерезидента());
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организация", ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);

    // Описание текста запроса:
    // 1. Выборка "НачислениеДивидендовОрганизацииНачисления": 
	//		Выбираются строки документа.  
	// 2. Выборка "ГражданствоФизЛицСрезПоследних": 
	//		Из регистра сведений о гражданстве выбираем информацию о налоговом резидентстве работника - 
	//		для расчета вычетов по НДФЛ и сумм НДФЛ
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеДивидендовОрганизацииНачисления.НомерСтроки КАК НомерСтроки,
	|	НачислениеДивидендовОрганизацииНачисления.Физлицо,
	|	НачислениеДивидендовОрганизацииНачисления.КоличествоАкций КАК КоличествоАкций,
	|	НачислениеДивидендовОрганизацииНачисления.Результат,
	|	НачислениеДивидендовОрганизацииНачисления.НДФЛ,
	|	ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРФ, ЛОЖЬ) КАК НеЯвляетсяНалоговымРезидентомРФ,
	|	&СтавкаРезидента КАК СтавкаНДФЛ,
	|	НачислениеДивидендовОрганизацииНачисления.КоличествоАкций КАК КоличествоАкцийРезидентов,
	|	НачислениеДивидендовОрганизацииНачисления.НалоговаяБаза,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизлицоАкционер
	|ИЗ
	|	Документ.НачислениеДивидендовОрганизаций.Начисления КАК НачислениеДивидендовОрганизацииНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
	|				&ДатаНачисления,
	|				ФизЛицо В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						НачислениеДивидендовОрганизацииНачисления.Физлицо
	|					ИЗ
	|						Документ.НачислениеДивидендовОрганизаций.Начисления КАК НачислениеДивидендовОрганизацииНачисления
	|					ГДЕ
	|						НачислениеДивидендовОрганизацииНачисления.Ссылка = &ДокументСсылка)) КАК ГражданствоФизЛицСрезПоследних
	|		ПО НачислениеДивидендовОрганизацииНачисления.Физлицо = ГражданствоФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаботникиОрганизацииСрезПоследних.Период КАК Период,
	|			РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|			ВЫБОР
	|				КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачисления
	|						И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|				ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|			КОНЕЦ КАК ПодразделениеОрганизации,
	|			РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|					&ДатаНачисления,
	|					Организация = &ГоловнаяОрганизация
	|						И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|						И Сотрудник.ФизЛицо В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								НачислениеДивидендовОрганизацииНачисления.Физлицо
	|							ИЗ
	|								Документ.НачислениеДивидендовОрганизаций.Начисления КАК НачислениеДивидендовОрганизацииНачисления
	|							ГДЕ
	|								НачислениеДивидендовОрганизацииНачисления.Ссылка = &ДокументСсылка)) КАК РаботникиОрганизацииСрезПоследних
	|		ГДЕ
	|			ВЫБОР
	|					КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачисления
	|							И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделениеЗавершения
	|					ИНАЧЕ РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение
	|				КОНЕЦ = &Организация) КАК РаботникиОрганизацииСрезПоследних
	|		ПО (РаботникиОрганизацииСрезПоследних.Физлицо = НачислениеДивидендовОрганизацииНачисления.Физлицо)
	|ГДЕ
	|	НачислениеДивидендовОрганизацииНачисления.Ссылка = &ДокументСсылка
	|	И (НЕ НачислениеДивидендовОрганизацииНачисления.Сторно)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВременнаяТаблица = Запрос.Выполнить().Выгрузить();
	
	
	// расчет налога по суммам дохода и обновление данных в соответствующих строках т.ч. документа
	Для каждого СтрокаТЗ Из ВременнаяТаблица Цикл
		
		СтрокаТЗ.НалоговаяБаза = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаТЗ.Результат/ОСДА*(ОСДА - СДО), Константы.ВалютаРегламентированногоУчета.Получить());
		Если СтрокаТЗ.ФизлицоАкционер Тогда
			СтрокаТЗ.НДФЛ = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаТЗ.НалоговаяБаза* СтрокаТЗ.СтавкаНДФЛ / 100, Константы.ВалютаРегламентированногоУчета.Получить());
		КонецЕсли;
		СтрокаТЧ = Начисления.Найти(СтрокаТЗ.НомерСтроки,"НомерСтроки");
		Если СтрокаТЧ <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.НачислениеОтпускаРаботникамОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Физлица = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	Запрос.УстановитьПараметр("Физлица", Физлица);
	Запрос.УстановитьПараметр("ПоВсемАкционерам", Физлица = Неопределено);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеДивидендовОрганизацийНачисления.Физлицо,
	|	-НачислениеДивидендовОрганизацийНачисления.Результат КАК Результат,
	|	ИСТИНА КАК Сторно,
	|	НачислениеДивидендовОрганизацийНачисления.КоличествоАкций КАК КоличествоАкций,
	|	-НачислениеДивидендовОрганизацийНачисления.ВычетПоНДФЛ КАК ВычетПоНДФЛ,
	|	-НачислениеДивидендовОрганизацийНачисления.НДФЛ КАК НДФЛ
	|ИЗ
	|	Документ.НачислениеДивидендовОрганизаций.Начисления КАК НачислениеДивидендовОрганизацийНачисления
	|ГДЕ
	|	НачислениеДивидендовОрганизацийНачисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ НачислениеДивидендовОрганизацийНачисления.Сторно)
	|	И НачислениеДивидендовОрганизацийНачисления.Ссылка.Проведен
	|	И (&ПоВсемАкционерам
	|			ИЛИ НачислениеДивидендовОрганизацийНачисления.Физлицо В (&Физлица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачислениеДивидендовОрганизацийНачисления.Физлицо,
	|	0,
	|	ЛОЖЬ,
	|	НачислениеДивидендовОрганизацийНачисления.КоличествоАкций,
	|	0,
	|	0
	|ИЗ
	|	Документ.НачислениеДивидендовОрганизаций.Начисления КАК НачислениеДивидендовОрганизацийНачисления
	|ГДЕ
	|	НачислениеДивидендовОрганизацийНачисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ НачислениеДивидендовОрганизацийНачисления.Сторно)
	|	И (&ПоВсемАкционерам
	|			ИЛИ НачислениеДивидендовОрганизацийНачисления.Физлицо В (&Физлица))
	|	И НачислениеДивидендовОрганизацийНачисления.Ссылка.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// сторно-строка
		ЗаполнитьЗначенияСвойств(Начисления.Добавить(), Выборка);
	КонецЦикла;
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеДивидендовОрганизаций.Дата,
	|	ВЫБОР
	|		КОГДА НачислениеДивидендовОрганизаций.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА НачислениеДивидендовОрганизаций.Организация
	|		ИНАЧЕ НачислениеДивидендовОрганизаций.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА НачислениеДивидендовОрганизаций.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА НачислениеДивидендовОрганизаций.Организация
	|		ИНАЧЕ НачислениеДивидендовОрганизаций.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	НачислениеДивидендовОрганизаций.Организация КАК ОбособленноеПодразделение,
	|	НачислениеДивидендовОрганизаций.Ответственный,
	|	НачислениеДивидендовОрганизаций.Ссылка,
	|	НачислениеДивидендовОрганизаций.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	НачислениеДивидендовОрганизаций.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ВЫБОР
	|		КОГДА НачислениеДивидендовОрганизаций.Ссылка.Дата < НачислениеДивидендовОрганизаций.Ссылка.ПериодРегистрации
	|			ТОГДА НачислениеДивидендовОрганизаций.Ссылка.ПериодРегистрации
	|		КОГДА НачислениеДивидендовОрганизаций.Ссылка.Дата > КОНЕЦПЕРИОДА(НачислениеДивидендовОрганизаций.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА КОНЕЦПЕРИОДА(НачислениеДивидендовОрганизаций.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|		ИНАЧЕ НачислениеДивидендовОрганизаций.Ссылка.Дата
	|	КОНЕЦ КАК ПериодРегистрацииДополнительныхНачислений,
	|	ВЫБОР
	|		КОГДА НачислениеДивидендовОрганизаций.Ссылка.Дата < НачислениеДивидендовОрганизаций.Ссылка.ПериодРегистрации
	|			ТОГДА НачислениеДивидендовОрганизаций.Ссылка.ПериодРегистрации
	|		КОГДА НачислениеДивидендовОрганизаций.Ссылка.Дата > КОНЕЦПЕРИОДА(НачислениеДивидендовОрганизаций.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА КОНЕЦПЕРИОДА(НачислениеДивидендовОрганизаций.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|		ИНАЧЕ НачислениеДивидендовОрганизаций.Ссылка.Дата
	|	КОНЕЦ КАК ДатаРегистрации,
	|	НачислениеДивидендовОрганизаций.ПериодРегистрации
	|ИЗ
	|	Документ.НачислениеДивидендовОрганизаций КАК НачислениеДивидендовОрганизаций
	|ГДЕ
	|	НачислениеДивидендовОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаНачисления", ВыборкаПоШапкеДокумента.ДатаРегистрации);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организация", ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);

	// Описание текста запроса:
	// 1. Выборка "ТЧНачисления": 
	//		Выбираются строки документа.  
	// 2. Выборка "РаботникиОрганизацииСрезПоследних": 
	//		Из регистра сведений о работниках выбираем информацию о том, является ли акционер работником организации
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Физлицо КАК ФизЛицо,
	|	ТЧНачисления.Физлицо.Наименование КАК ФизЛицоНаименование,
	|	ТЧНачисления.Результат,
	|	ТЧНачисления.ВычетПоНДФЛ,
	|	ТЧНачисления.НДФЛ,
	|	ТЧНачисления.Сторно,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сторно
	|			ТОГДА ТЧНачисления.Ссылка.ПерерассчитываемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизлицоАкционер,
	|	РаботникиОрганизацииСрезПоследних.Сотрудник,
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации,
	|	ТЧНачисления.НалоговаяБаза
	|ИЗ
	|	Документ.НачислениеДивидендовОрганизаций.Начисления КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаботникиОрганизацииСрезПоследних.Период КАК Период,
	|			РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|			ВЫБОР
	|				КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачисления
	|						И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|				ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|			КОНЕЦ КАК ПодразделениеОрганизации,
	|			РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|					&ДатаНачисления,
	|					Организация = &ГоловнаяОрганизация
	|						И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|						И Сотрудник.ФизЛицо В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								НачислениеДивидендовОрганизацииНачисления.Физлицо
	|							ИЗ
	|								Документ.НачислениеДивидендовОрганизаций.Начисления КАК НачислениеДивидендовОрганизацииНачисления
	|							ГДЕ
	|								НачислениеДивидендовОрганизацииНачисления.Ссылка = &ДокументСсылка)) КАК РаботникиОрганизацииСрезПоследних
	|		ГДЕ
	|			ВЫБОР
	|					КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачисления
	|							И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделениеЗавершения
	|					ИНАЧЕ РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение
	|				КОНЕЦ = &Организация) КАК РаботникиОрганизацииСрезПоследних
	|		ПО (РаботникиОрганизацииСрезПоследних.Физлицо = ТЧНачисления.Физлицо)
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	РаботникиОрганизацииСрезПоследних.Период УБЫВ";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОбособленноеПодразделение) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода исправляемого документа!", Отказ, Заголовок);
	КонецЕсли;
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией исправляемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";

	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан акционер!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуДополнительныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)
	
	// В регистр расчета попадают записи только работников организации
	Движение = Движения.ДополнительныеНачисленияРаботниковОрганизаций.Добавить();
	
	СтрокаСвойствИзДокумента = "Организация,ОбособленноеПодразделение";
	СтрокаСвойствИзСтрокиДокумента = "ФизЛицо,Результат,Сотрудник,ПодразделениеОрганизации,Сторно,СторнируемыйДокумент"; 
	
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
	// Свойства
	Движение.ПериодРегистрации  = ВыборкаПоШапкеДокумента.ПериодРегистрацииДополнительныхНачислений;
	Движение.ВидРасчета			= ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ДивидендыРаботников;
	
КонецПроцедуры // ДобавитьСтрокуДополнительныхНачислений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, 
	СтруктураПроведенияПоРегистрамНакопления, УпрощенныйУчетНДФЛ, УчетЗадолженностиПоМесяцам)
	
	ИмяРегистра = "НДФЛСведенияОДоходах";
	Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда
		
		Движение = Движения[ИмяРегистра].Добавить();
		
		// Свойства
		Движение.Период                 = ВыборкаПоШапкеДокумента.ДатаРегистрации;
		
		// Измерения
		Движение.Организация			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ФизЛицо                = ВыборкаПоТЧ.ФизЛицо;
		
		Движение.ПериодРегистрации      = НачалоМесяца(ВыборкаПоШапкеДокумента.ДатаРегистрации);
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.НалоговаяБаза; 
		Движение.СуммаВычета			= ВыборкаПоТЧ.ВычетПоНДФЛ; 
		
		// Реквизиты
		Движение.ОбособленноеПодразделение = ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.КодВычета				= Справочники.ВычетыНДФЛ.ПустаяСсылка();
		Движение.ИсчисленоИзЗарплаты	= Не ВыборкаПоТЧ.ФизлицоАкционер; 
		
		Если ВыборкаПоТЧ.ФизлицоАкционер Тогда
			Движение.ВидРасчета	= ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ДивидендыРаботников;
			Движение.КодДохода              = Справочники.ДоходыНДФЛ.Код1842;
		Иначе
			Движение.КодДохода              = Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию;	
		КонецЕсли;

		
	КонецЕсли; 

	ИмяРегистра = "НДФЛРасчетыСБюджетом";
	Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда
		
		Если ВыборкаПоТЧ.НДФЛ <> 0 И ВыборкаПоТЧ.ФизлицоАкционер Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период                 		= ВыборкаПоШапкеДокумента.ДатаРегистрации;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
				
			// Измерения
			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ФизЛицо               	 		= ВыборкаПоТЧ.ФизЛицо;
			Движение.СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09;
			Движение.МесяцНалоговогоПериода 		= ВыборкаПоШапкеДокумента.ДатаРегистрации;
			
			// Ресурсы
			Движение.Налог							= ВыборкаПоТЧ.НДФЛ; 
			
			// Реквизиты
			Движение.ОбособленноеПодразделение 		= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
			Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
			Движение.ИсчисленоИзЗарплаты			= Не ВыборкаПоТЧ.ФизлицоАкционер; 
			Движение.КодДохода     			        = Справочники.ДоходыНДФЛ.Код1842;
			Если УпрощенныйУчетНДФЛ Тогда // сразу же, не дожидаясь выплаты, регистрируем факт удержания налога

				Движение = Движения[ИмяРегистра].Добавить();
				
				// Свойства
				Движение.Период                 		= ВыборкаПоШапкеДокумента.ДатаРегистрации;
				Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
					
				// Измерения
				Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ФизЛицо               	 		= ВыборкаПоТЧ.ФизЛицо;
				Движение.СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09;
				Движение.МесяцНалоговогоПериода 		= ВыборкаПоШапкеДокумента.ДатаРегистрации;
				
				// Ресурсы
				Движение.Налог							= ВыборкаПоТЧ.НДФЛ; 
				
				// Реквизиты
				Движение.ОбособленноеПодразделение 		= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
				Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
				
				Движение.КодДохода     			        = Справочники.ДоходыНДФЛ.Код1842;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
	ИмяРегистра = "ВзаиморасчетыСРаботникамиОрганизаций";
	Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда
		
		Движение = Движения[ИмяРегистра].Добавить();
		
		// Свойства
		Движение.Период                 = ВыборкаПоШапкеДокумента.ДатаРегистрации;
		Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
			
		// Измерения
		Движение.Организация			= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.ФизЛицо                = ВыборкаПоТЧ.ФизЛицо;
		//vvv комментируем
		//Если УчетЗадолженностиПоМесяцам Тогда
			Движение.ПериодВзаиморасчетов   = НачалоМесяца(ВыборкаПоШапкеДокумента.ДатаРегистрации);
		//КонецЕсли;
		
		// Ресурсы
		Если ВыборкаПоТЧ.ФизлицоАкционер Тогда 
			Движение.СуммаВзаиморасчетов	= ВыборкаПоТЧ.Результат - ВыборкаПоТЧ.НДФЛ; 
		Иначе
			Движение.СуммаВзаиморасчетов	= ВыборкаПоТЧ.Результат;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	ПерерассчитываемыйДокумент = Неопределено
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();
	
	СтруктураПроведенияПоРегистрамНакопленияСотрудника =  Новый Структура("НДФЛСведенияОДоходах, НДФЛРасчетыСБюджетом, ВзаиморасчетыСРаботникамиОрганизаций");
	СтруктураПроведенияПоРегистрамНакопленияАкционера =  Новый Структура("НДФЛСведенияОДоходах, НДФЛРасчетыСБюджетом");
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// получим учетную политику
			УпрощенныйУчетНДФЛ					 = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетНДФЛ");
			
			// ведется ли учет задолженности в разрезе периодов возникновения задолженности
			УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
			
			// получим реквизиты табличной части
			ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента).Выбрать();
			
			Пока ВыборкаПоНачислениям.СледующийПоЗначениюПоля("НомерСтроки") Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);

				Если НЕ Отказ Тогда

					
					Если ВыборкаПоНачислениям.ФизлицоАкционер Тогда
						ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, СтруктураПроведенияПоРегистрамНакопленияАкционера, УпрощенныйУчетНДФЛ, УчетЗадолженностиПоМесяцам);
					Иначе // В регистр расчета начисления пишем только для работников организации  
						ДобавитьСтрокуДополнительныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
						ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, СтруктураПроведенияПоРегистрамНакопленияСотрудника, УпрощенныйУчетНДФЛ, УчетЗадолженностиПоМесяцам);
					КонецЕсли; 
					
					
				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Начисления,, "Физлицо");
	
КонецПроцедуры


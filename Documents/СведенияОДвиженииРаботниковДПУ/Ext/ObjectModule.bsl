////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет автоматическое заполнение документа по данным документа и переданным параметрам
// 
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Логическое - удалось ли выполнить автоматическое заполнение документа
//
//vvv добавим параметр, чтобы можно было использовать при добавлении вручую
Функция Автозаполнение(ФизЛицо = Неопределено) Экспорт

    СписокПустыхНомеровПФР = Новый СписокЗначений;
	СписокПустыхНомеровПФР.Добавить("");
	СписокПустыхНомеровПФР.Добавить("              ");
	
	СписокПричин = Новый СписокЗначений;
	СписокПричин.Добавить(Перечисления.ПричиныИзмененияСостояния.Увольнение);
	СписокПричин.Добавить(Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	
	СписокСтран = Новый СписокЗначений;
	СписокСтран.Добавить(Справочники.КлассификаторСтранМира.ПустаяСсылка());
	СписокСтран.Добавить(Справочники.КлассификаторСтранМира.БЕЛАРУСЬ);
    Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",				ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	//vvv
	Запрос.УстановитьПараметр("ФизЛицо",ФизЛицо);
	Запрос.УстановитьПараметр("поВсемФизЛицам",ФизЛицо = Неопределено);
	//
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("СписокПустыхНомеровПФР",		СписокПустыхНомеровПФР);
	Запрос.УстановитьПараметр("Прием",		Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("Увольнение",		Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("СписокПричин",		СписокПричин);
	Запрос.УстановитьПараметр("ДатаНачала" , 		НачалоКвартала(ДатаРегистрации));
	Запрос.УстановитьПараметр("ДатаОкончания" , 	КонецКвартала(ДатаРегистрации)+1);
	Запрос.УстановитьПараметр("СписокСтран" , СписокСтран);
	Запрос.УстановитьПараметр("ВнСовместитель" , Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
	               |	ФИОФизЛицСрезПоследних.Имя КАК Имя,
	               |	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
	               |	СписокФизлиц.ФизЛицо КАК ФизЛицо,
	               |	СписокФизлиц.Сотрудник КАК Сотрудник,
	               |	ЕСТЬNULL(СписокФизлиц.ФизЛицо.СтраховойНомерПФР, """") КАК ЛичныйНомер,
	               |	СписокФизлиц.ДатаПриема КАК ДатаПриема,
	               |	СписокФизлиц.ДатаУвольнения КАК ДатаУвольнения,
				   //vvv
				   |	СписокФизлиц.ДатаДвижения КАК ДатаДвижения,
				   |	ВЫБОР
			   	   |		КОГДА СписокФизлиц.ПричинаИзмененияСостояния В (&Прием,&Увольнение) ТОГДА 1
			  	   |		ИНАЧЕ 2
				   |	КОНЕЦ КАК ЧислоСортировки,
				   |	СписокФизлиц.Сотрудник.ВидТД КАК ВидТД,
				   |	СписокФизлиц.ДатаПриказаПрием КАК ДатаПриказаПрием,
				   |	СписокФизлиц.НомерПриказаПрием КАК НомерПриказаПрием,
				   |	СписокФизлиц.ДатаПриказаУвольнение КАК ДатаПриказаУвольнение,
				   |	СписокФизлиц.НомерПриказаУвольнение КАК НомерПриказаУвольнение,
				   |	СписокФизлиц.ДатаПриказаПеремещение КАК ДатаПриказаПеремещение,
				   |	СписокФизлиц.НомерПриказаПеремещение КАК НомерПриказаПеремещение,				   
				   |	СписокФизлиц.ВнешнийСовместитель КАК ВнешнийСовместитель,
				   |	СписокФизлиц.ВнутреннийСовместитель КАК ВнутреннийСовместитель,
				   |	СписокФизлиц.ОснованиеУвольнения КАК ОснованиеУвольнения,
				   |	СписокФизлиц.Должность КАК Должность,
				   |	СписокФизлиц.КратныеРазмеры КАК КратныеРазмеры,
				   |	СписокФизлиц.КодПроизводной КАК КодПроизводной,
				   |	СписокФизлиц.КодОКРБ КАК КодОКРБ,
				   |	СписокФизлиц.КодКатегорииРаботников КАК КодКатегорииРаботников,
				   |	СписокФизлиц.ПричинаКадровогоПеремещения КАК ПричинаКадровогоПеремещения,
				   |	ВЫБОР
				   |		КОГДА СписокФизлиц.КодКатегорииРаботников = ""02"" ТОГДА СписокФизлиц.КодКатегорииДолжности 
				   |		ИНАЧЕ СписокФизлиц.РазрядЕТС
				   |	КОНЕЦ КАК КодКатегорииДолжности, 
				   |	СписокФизлиц.КатегорияДолжности КАК КатегорияДолжности,
				   |	СписокФизлиц.РазрядЕТС КАК РазрядЕТС,
				   //
	               |	СписокФизлиц.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния
				   //vvv
				   |ПОМЕСТИТЬ ВТСписокФизлиц
				   //
	               |ИЗ
	               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		СостояниеРаботниковОрганизацииСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо,
				   //vvv
				   |		СостояниеРаботниковОрганизацииСрезПоследних.Должность КАК Должность,
				   |		СостояниеРаботниковОрганизацииСрезПоследних.Должность.КодОКРБ КАК КодОКРБ,
				   |		СостояниеРаботниковОрганизацииСрезПоследних.Должность.СтрокаЕТС.КратныеКоэффициенты КАК КратныеРазмеры,
				   |		ВЫБОР
				   |			КОГДА СостояниеРаботниковОрганизацииСрезПоследних.Должность.Производная = ЗНАЧЕНИЕ(Справочник.ПроизводныеДолжностейОрганизаций.ПустаяСсылка) ТОГДА ""00""
				   |			ИНАЧЕ СостояниеРаботниковОрганизацииСрезПоследних.Должность.Производная.Код
				   |		КОНЕЦ КАК КодПроизводной,
				   |		ВЫБОР
				   |			КОГДА СостояниеРаботниковОрганизацииСрезПоследних.Должность.Категория В (ЗНАЧЕНИЕ(Справочник.КатегорииРаботников.Водители),ЗНАЧЕНИЕ(Справочник.КатегорииРаботников.РабочиеВспомогательные),ЗНАЧЕНИЕ(Справочник.КатегорииРаботников.РабочиеОсновные)) ТОГДА ""01"" 
				   |			ИНАЧЕ ""02"" 
				   |		КОНЕЦ КАК КодКатегорииРаботников,
				   |		ВЫБОР
				   |			КОГДА СостояниеРаботниковОрганизацииСрезПоследних.КатегорияДолжности = ЗНАЧЕНИЕ(Перечисление.Категории.ПерваяКатегория) ТОГДА ""1""
				   |			КОГДА СостояниеРаботниковОрганизацииСрезПоследних.КатегорияДолжности = ЗНАЧЕНИЕ(Перечисление.Категории.Вторая) ТОГДА ""2""
				   |			КОГДА СостояниеРаботниковОрганизацииСрезПоследних.КатегорияДолжности = ЗНАЧЕНИЕ(Перечисление.Категории.Третья) ТОГДА ""3""
				   |			ИНАЧЕ ""0"" 
				   |		КОНЕЦ КАК КодКатегорииДолжности,				   
				   |		СостояниеРаботниковОрганизацииСрезПоследних.ПричинаКадровогоПеремещения,
				   |		СостояниеРаботниковОрганизацииСрезПоследних.КатегорияДолжности,
				   |		СостояниеРаботниковОрганизацииСрезПоследних.РазрядЕТС КАК РазрядЕТС,
				   |		ВЫБОР
	               |			КОГДА СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение)	               
	               |				ТОГДА СостояниеРаботниковОрганизацииСрезПоследних.Период
	               |		КОНЕЦ КАК ДатаДвижения,
				   |		ВЫБОР
	               |			КОГДА СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение)	               
	               |				ТОГДА СостояниеРаботниковОрганизацииСрезПоследних.ПричинаКадровогоПеремещения
	               |		КОНЕЦ КАК ПричинаКадровогоПеремещения,
				   |		ВЫБОР
	               |			КОГДА СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостояния = &Прием	            
	               |				ТОГДА СостояниеРаботниковОрганизацииСрезПоследних.ДатаПриказа
	               |		КОНЕЦ КАК ДатаПриказаПрием,
				   |		ВЫБОР
	               |			КОГДА СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостояния = &Прием	            
	               |				ТОГДА СостояниеРаботниковОрганизацииСрезПоследних.НомерПриказа
	               |		КОНЕЦ КАК НомерПриказаПрием,
				   |		ВЫБОР
	               |			КОГДА СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение)
	               |				ТОГДА СостояниеРаботниковОрганизацииСрезПоследних.ДатаПриказа
	               |		КОНЕЦ КАК ДатаПриказаПеремещение,
				   |		ВЫБОР
	               |			КОГДА СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение)				 
	               |				ТОГДА СостояниеРаботниковОрганизацииСрезПоследних.НомерПриказа
	               |		КОНЕЦ КАК НомерПриказаПеремещение,				   
				   |		СостояниеРаботниковОрганизацииСрезПоследних.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство) КАК ВнешнийСовместитель,		
				   |		СостояниеРаботниковОрганизацииСрезПоследних.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство) КАК ВнутреннийСовместитель,	               
				   |		ВЫБОР
	               |			КОГДА СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостояния = &Увольнение	            
	               |				ТОГДА СостояниеРаботниковОрганизацииСрезПоследних.ДатаПриказа
	               |		КОНЕЦ КАК ДатаПриказаУвольнение,
				   |		ВЫБОР
	               |			КОГДА СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостояния = &Увольнение	            
	               |				ТОГДА СостояниеРаботниковОрганизацииСрезПоследних.НомерПриказа
	               |		КОНЕЦ КАК НомерПриказаУвольнение,
				   |		ВЫБОР
	               |			КОГДА СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостояния = &Увольнение	            
	               |				ТОГДА СостояниеРаботниковОрганизацииСрезПоследних.ОснованиеУвольнения
	               |		КОНЕЦ КАК ОснованиеУвольнения,
				   //
	               |		СостояниеРаботниковОрганизацииСрезПоследних.Регистратор КАК Регистратор,
	               |		СостояниеРаботниковОрганизацииСрезПоследних.Сотрудник КАК Сотрудник,
	               |		ВЫБОР
	               |			КОГДА СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостояния = &Прием
	               |					И СостояниеРаботниковОрганизацииСрезПоследних.Период <> &ДатаОкончания
	               |				ТОГДА СостояниеРаботниковОрганизацииСрезПоследних.Период
	               |		КОНЕЦ КАК ДатаПриема,
	               |		ВЫБОР
	               |			КОГДА СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостояния = &Увольнение
	               |				ТОГДА ДОБАВИТЬКДАТЕ(СостояниеРаботниковОрганизацииСрезПоследних.Период, ДЕНЬ, -1)
	               |		КОНЕЦ КАК ДатаУвольнения,
	               |		СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния
	               |	ИЗ
	               |		РегистрСведений.РаботникиОрганизаций КАК СостояниеРаботниковОрганизацииСрезПоследних
	               |	ГДЕ
				   //vvv комментируем, будет брать все причины
	               //|		СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостояния В(&СписокПричин)				   
   	               //|		И СостояниеРаботниковОрганизацииСрезПоследних.ПодразделениеОрганизации.Владелец = &Организация
				   //
				   |		СостояниеРаботниковОрганизацииСрезПоследних.ПодразделениеОрганизации.Владелец = &Организация
				   //vvv
				   |		И (&ПоВсемФизЛицам ИЛИ СостояниеРаботниковОрганизацииСрезПоследних.Сотрудник.ФизЛицо = &ФизЛицо)
				   //
	               |		И СостояниеРаботниковОрганизацииСрезПоследних.Организация = &ГоловнаяОрганизация
	               |		И ВЫБОР
	               |				КОГДА СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостояния = &Прием
	               |					ТОГДА СостояниеРаботниковОрганизацииСрезПоследних.Период >= &ДатаНачала
				   //vvv
				   |				КОГДА СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение)
	               |					ТОГДА (СостояниеРаботниковОрганизацииСрезПоследних.Период >= &ДатаНачала) И (СостояниеРаботниковОрганизацииСрезПоследних.ПричинаКадровогоПеремещения В (ЗНАЧЕНИЕ(Перечисление.ПричиныКадровыхПеремещений.Перемещение),ЗНАЧЕНИЕ(Перечисление.ПричиныКадровыхПеремещений.ПрисвоениеКатегорииРазряда)))
				   //
	               |				ИНАЧЕ СостояниеРаботниковОрганизацииСрезПоследних.Период > &ДатаНачала
	               |			КОНЕЦ
	               |		И ВЫБОР
	               |				КОГДА СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостояния = &Прием
	               |					ТОГДА СостояниеРаботниковОрганизацииСрезПоследних.Период < &ДатаОкончания
				   //vvv
				   |				КОГДА СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение)
	               |					ТОГДА (СостояниеРаботниковОрганизацииСрезПоследних.Период < &ДатаОкончания)  И (СостояниеРаботниковОрганизацииСрезПоследних.ПричинаКадровогоПеремещения В (ЗНАЧЕНИЕ(Перечисление.ПричиныКадровыхПеремещений.Перемещение),ЗНАЧЕНИЕ(Перечисление.ПричиныКадровыхПеремещений.ПрисвоениеКатегорииРазряда)))
				   //
	               |				ИНАЧЕ СостояниеРаботниковОрганизацииСрезПоследних.Период <= &ДатаОкончания
	               |			КОНЕЦ				   
				   //vvv комментируем, внутренние совместители будут
	               //|		И СостояниеРаботниковОрганизацииСрезПоследних.Сотрудник.ВидЗанятости <> &ВнСовместитель) КАК СписокФизлиц
				   |		) КАК СписокФизлиц
				   //
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&ДатаОкончания, ) КАК ГражданствоФизЛиц
	               |		ПО СписокФизлиц.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
	               |			И (ГражданствоФизЛиц.Страна В (&СписокСтран))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаОкончания, ) КАК ФИОФизЛицСрезПоследних
				   //vvv
	               //|		ПО СписокФизлиц.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
				   |		ПО СписокФизлиц.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СоответствияДолжностейОрганизацийЗанятиям.Должность,
	               |	МАКСИМУМ(СоответствияДолжностейОрганизацийЗанятиям.Занятие) КАК Занятие,
	               |	ВЫБОР
	               |		КОГДА Уточнение.Занятие > 1
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Уточнить
	               |ПОМЕСТИТЬ ВТЗанятия
	               |ИЗ
	               |	РегистрСведений.СоответствияДолжностейОрганизацийЗанятиям КАК СоответствияДолжностейОрганизацийЗанятиям
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СоответствияДолжностейОрганизацийЗанятиям.Должность КАК Должность,
	               |			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствияДолжностейОрганизацийЗанятиям.Занятие) КАК Занятие
	               |		ИЗ
	               |			РегистрСведений.СоответствияДолжностейОрганизацийЗанятиям КАК СоответствияДолжностейОрганизацийЗанятиям
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			СоответствияДолжностейОрганизацийЗанятиям.Должность) КАК Уточнение
	               |		ПО СоответствияДолжностейОрганизацийЗанятиям.Должность = Уточнение.Должность
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СоответствияДолжностейОрганизацийЗанятиям.Должность,
	               |	ВЫБОР
	               |		КОГДА Уточнение.Занятие > 1
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокФизЛиц.Фамилия,
	               |	СписокФизЛиц.Имя,
	               |	СписокФизЛиц.Отчество,
	               |	СписокФизЛиц.ФизЛицо,
	               |	СписокФизЛиц.Сотрудник,
	               |	СписокФизЛиц.ЛичныйНомер,
	               |	СписокФизЛиц.ДатаПриема,
	               |	СписокФизЛиц.ДатаУвольнения,
	               |	СписокФизЛиц.ДатаДвижения,
	               |	СписокФизЛиц.ЧислоСортировки,
	               |	СписокФизЛиц.ВидТД,
	               |	СписокФизЛиц.ДатаПриказаПрием,
	               |	СписокФизЛиц.НомерПриказаПрием,
	               |	СписокФизЛиц.ДатаПриказаУвольнение,
	               |	СписокФизЛиц.НомерПриказаУвольнение,
	               |	СписокФизЛиц.ДатаПриказаПеремещение,
	               |	СписокФизЛиц.НомерПриказаПеремещение,
	               |	СписокФизЛиц.ВнешнийСовместитель,
	               |	СписокФизЛиц.ВнутреннийСовместитель,
	               |	СписокФизЛиц.ОснованиеУвольнения,
	               |	СписокФизЛиц.Должность,
				   |	СписокФизЛиц.КратныеРазмеры,
				   |	Занятия.Занятие,
				   |	Занятия.Занятие.Код КАК КодЗанятия,
				   |	ЕСТЬNULL(Занятия.Уточнить,ЛОЖЬ) КАК Уточнить,
	               |	СписокФизЛиц.КодПроизводной,
	               |	СписокФизЛиц.КодОКРБ,
	               |	СписокФизЛиц.КодКатегорииРаботников,
				   |	СписокФизЛиц.КатегорияДолжности,
				   |	СписокФизЛиц.РазрядЕТС,
	               |	СписокФизЛиц.ПричинаКадровогоПеремещения,
	               |	СписокФизЛиц.КодКатегорииДолжности,
	               |	СписокФизЛиц.ПричинаИзмененияСостояния,
				   |	РаботникиОрганизаций.Должность КАК ПредДолжность,
				   |	ПредЗанятия.Занятие КАК ПредЗанятие,
				   |	ПредЗанятия.Занятие.Код КАК ПредКодЗанятия,
				   |	ЕСТЬNULL(ПредЗанятия.Уточнить,ЛОЖЬ) КАК ПредУточнить,
				   |	РаботникиОрганизаций.Должность.КодОКРБ КАК ПредКодОКРБ,
				   |	РаботникиОрганизаций.Должность.СтрокаЕТС.КратныеКоэффициенты КАК ПредКратныеРазмеры,
				   |	ВЫБОР
				   |		КОГДА РаботникиОрганизаций.Должность.Производная = ЗНАЧЕНИЕ(Справочник.ПроизводныеДолжностейОрганизаций.ПустаяСсылка) ТОГДА ""00""
				   |		ИНАЧЕ РаботникиОрганизаций.Должность.Производная.Код
				   |	КОНЕЦ КАК ПредКодПроизводной,
				   |	ВЫБОР
				   |		КОГДА РаботникиОрганизаций.Должность.Категория В (ЗНАЧЕНИЕ(Справочник.КатегорииРаботников.Водители),ЗНАЧЕНИЕ(Справочник.КатегорииРаботников.РабочиеВспомогательные),ЗНАЧЕНИЕ(Справочник.КатегорииРаботников.РабочиеОсновные)) ТОГДА ""01"" 
				   |		ИНАЧЕ ""02"" 
				   |	КОНЕЦ КАК ПредКодКатегорииРаботников,
				   |	ВЫБОР
				   |		КОГДА РаботникиОрганизаций.Должность.Категория В (ЗНАЧЕНИЕ(Справочник.КатегорииРаботников.Водители),ЗНАЧЕНИЕ(Справочник.КатегорииРаботников.РабочиеВспомогательные),ЗНАЧЕНИЕ(Справочник.КатегорииРаботников.РабочиеОсновные))
				   |			ТОГДА РаботникиОрганизаций.РазрядЕТС  
				   |		КОГДА РаботникиОрганизаций.КатегорияДолжности = ЗНАЧЕНИЕ(Перечисление.Категории.ПерваяКатегория) ТОГДА ""1""
				   |		КОГДА РаботникиОрганизаций.КатегорияДолжности = ЗНАЧЕНИЕ(Перечисление.Категории.Вторая) ТОГДА ""2""
				   |		КОГДА РаботникиОрганизаций.КатегорияДолжности = ЗНАЧЕНИЕ(Перечисление.Категории.Третья) ТОГДА ""3""
				   |		ИНАЧЕ ""0"" 
				   |	КОНЕЦ КАК ПредКодКатегорииДолжности,			
				   |	РаботникиОрганизаций.КатегорияДолжности КАК предКатегорияДолжности,
				   |	РаботникиОрганизаций.РазрядЕТС КАК предРазрядЕТС
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СписокФизЛиц.Фамилия КАК Фамилия,
	               |		СписокФизЛиц.Имя КАК Имя,
	               |		СписокФизЛиц.Отчество КАК Отчество,
	               |		СписокФизЛиц.ФизЛицо КАК ФизЛицо,
	               |		СписокФизЛиц.Сотрудник КАК Сотрудник,
	               |		СписокФизЛиц.ЛичныйНомер КАК ЛичныйНомер,
	               |		СписокФизЛиц.ДатаПриема КАК ДатаПриема,
	               |		СписокФизЛиц.ДатаУвольнения КАК ДатаУвольнения,
	               |		СписокФизЛиц.ДатаДвижения КАК ДатаДвижения,
	               |		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ПериодРег,
	               |		СписокФизЛиц.ЧислоСортировки КАК ЧислоСортировки,
	               |		СписокФизЛиц.Сотрудник.ВидТД КАК ВидТД,
	               |		СписокФизЛиц.ДатаПриказаПрием КАК ДатаПриказаПрием,
	               |		СписокФизЛиц.НомерПриказаПрием КАК НомерПриказаПрием,
	               |		СписокФизЛиц.ДатаПриказаУвольнение КАК ДатаПриказаУвольнение,
	               |		СписокФизЛиц.НомерПриказаУвольнение КАК НомерПриказаУвольнение,
	               |		СписокФизЛиц.ДатаПриказаПеремещение КАК ДатаПриказаПеремещение,
	               |		СписокФизЛиц.НомерПриказаПеремещение КАК НомерПриказаПеремещение,
	               |		СписокФизЛиц.ВнешнийСовместитель КАК ВнешнийСовместитель,
	               |		СписокФизЛиц.ВнутреннийСовместитель КАК ВнутреннийСовместитель,
	               |		СписокФизЛиц.ОснованиеУвольнения КАК ОснованиеУвольнения,
	               |		СписокФизЛиц.Должность КАК Должность,
				   |		СписокФизЛиц.КратныеРазмеры КАК КратныеРазмеры,
				   |		СписокФизЛиц.КатегорияДолжности КАК КатегорияДолжности,
				   |		СписокФизЛиц.РазрядЕТС КАК РазрядЕТС,
	               |		СписокФизЛиц.КодПроизводной КАК КодПроизводной,
	               |		СписокФизЛиц.КодОКРБ КАК КодОКРБ,
	               |		СписокФизЛиц.КодКатегорииРаботников КАК КодКатегорииРаботников,
	               |		СписокФизЛиц.ПричинаКадровогоПеремещения КАК ПричинаКадровогоПеремещения,
	               |		СписокФизЛиц.КодКатегорииДолжности КАК КодКатегорииДолжности,
	               |		СписокФизЛиц.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния
	               |	ИЗ
	               |		ВТСписокФизлиц КАК СписокФизЛиц
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	               |			ПО (РаботникиОрганизаций.Период <= ДОБАВИТЬКДАТЕ(СписокФизЛиц.ДатаДвижения, ДЕНЬ, -1))
	               |				И (РаботникиОрганизаций.Сотрудник = СписокФизЛиц.Сотрудник)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		СписокФизЛиц.Фамилия,
	               |		СписокФизЛиц.Имя,
	               |		СписокФизЛиц.Отчество,
	               |		СписокФизЛиц.ФизЛицо,
	               |		СписокФизЛиц.Сотрудник,
	               |		СписокФизЛиц.ЛичныйНомер,
	               |		СписокФизЛиц.ДатаПриема,
	               |		СписокФизЛиц.ДатаУвольнения,
	               |		СписокФизЛиц.ДатаДвижения,
	               |		СписокФизЛиц.ЧислоСортировки,
	               |		СписокФизЛиц.Сотрудник.ВидТД,
	               |		СписокФизЛиц.ДатаПриказаПрием,
	               |		СписокФизЛиц.НомерПриказаПрием,
	               |		СписокФизЛиц.ДатаПриказаУвольнение,
	               |		СписокФизЛиц.НомерПриказаУвольнение,
	               |		СписокФизЛиц.ДатаПриказаПеремещение,
	               |		СписокФизЛиц.НомерПриказаПеремещение,
	               |		СписокФизЛиц.ВнешнийСовместитель,
	               |		СписокФизЛиц.ВнутреннийСовместитель,
	               |		СписокФизЛиц.ОснованиеУвольнения,
	               |		СписокФизЛиц.Должность,
				   |		СписокФизЛиц.КратныеРазмеры,
				   |		СписокФизЛиц.КатегорияДолжности,
				   |		СписокФизЛиц.РазрядЕТС,
	               |		СписокФизЛиц.КодПроизводной,
	               |		СписокФизЛиц.КодОКРБ,
	               |		СписокФизЛиц.КодКатегорииРаботников,
	               |		СписокФизЛиц.ПричинаКадровогоПеремещения,
	               |		СписокФизЛиц.КодКатегорииДолжности,
	               |		СписокФизЛиц.ПричинаИзмененияСостояния) КАК СписокФизЛиц
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	               |		ПО (РаботникиОрганизаций.Период = СписокФизЛиц.ПериодРег)
	               |			И (РаботникиОрганизаций.Сотрудник = СписокФизЛиц.Сотрудник)
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗанятия КАК Занятия
	               |		ПО (СписокФизЛиц.Должность = Занятия.Должность)
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗанятия КАК ПредЗанятия
	               |		ПО (РаботникиОрганизаций.Должность = ПредЗанятия.Должность)";
				   //

	ТаблицаРаботникиОрганизации = Новый таблицаЗначений();
	
	ТаблицаРаботникиОрганизации = (Запрос.Выполнить().Выгрузить());
	
	//vvv
	ТаблицаПеремещений = Новый ТаблицаЗначений;
	ТаблицаПеремещений=ТаблицаРаботникиОрганизации.Скопировать();
	Для каждого Стр Из ТаблицаПеремещений Цикл
		
		Если Стр.ПричинаИзмененияСостояния<>Перечисления.ПричиныИзмененияСостояния.Перемещение ТОгда
			ТаблицаПеремещений.Удалить(Стр);
		КонецЕсли;		
		
	КонецЦикла;
	
	ТаблицаФизЛиц = Новый ТаблицаЗначений;
	ТаблицаФизЛиц=ТаблицаРаботникиОрганизации.Скопировать();
	ТаблицаФизЛиц.Свернуть("ФизЛицо,Фамилия,Имя,Отчество,ЛичныйНомер");
	//
	
	Для Каждого Строка  из ТаблицаРаботникиОрганизации Цикл
		Если Строка.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу тогда
			СтрокаУвольнения = ТаблицаРаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник,ПричинаИзмененияСостояния", Строка.Сотрудник,Перечисления.ПричиныИзмененияСостояния.Увольнение));
			Если СтрокаУвольнения.Количество() > 0 тогда
				Строка.ДатаУвольнения = СтрокаУвольнения[0].ДатаУвольнения;
				ТаблицаРаботникиОрганизации.Удалить(СтрокаУвольнения[0]);
			КонецЕсли;
			Если Строка.ЛичныйНомер = "" тогда
				Сообщить("В табличной части ""Работники организации"" у "+ Строка.ФизЛицо +" не заполнен Страховой номер", СтатусСообщения.Важное);
			КонецЕсли;
		//vvv
		ИначеЕсли Строка.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Перемещение тогда
			СтрокиПеремещений = ТаблицаРаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник,ПричинаИзмененияСостояния", Строка.Сотрудник,Перечисления.ПричиныИзмененияСостояния.Перемещение));
			Для каждого СтрокаПеремещения Из СтрокиПеремещений Цикл
				Если СтрокаПеремещения<>Строка ТОгда
					ТаблицаРаботникиОрганизации.Удалить(СтрокаПеремещения);
				КонецЕсли;				
			КонецЦикла;			
		//		
		КонецЕсли;
	КонецЦикла;
	
	//vvv комментируем
	//РаботникиОрганизации.Загрузить(ТаблицаРаботникиОрганизации);
	ТаблицаРаботникиОрганизации.Сортировать("Сотрудник,ЧислоСортировки");
	
	Если ФизЛицо = Неопределено ТОгда
		РаботникиОрганизации.Загрузить(ТаблицаФизЛиц);
	КонецЕсли;
	//
	//vvv	
	Для Каждого Стр Из ТаблицаРаботникиОрганизации Цикл
		
		Если Стр.ПричинаИзмененияСостояния <> Перечисления.ПричиныИзмененияСостояния.Перемещение тогда 
			
			Если Не Стр.ВнутреннийСовместитель Тогда
				
				НовСтр = ПриемУвольнение.Добавить();
				НовСтр.ФизЛицо = Стр.ФизЛицо;
				НовСтр.ДатаПриказаПрием = Стр.ДатаПриказаПрием;
				НовСтр.НомерПриказаПрием = Стр.НомерПриказаПрием;
				НовСтр.ДатаПриема = Стр.ДатаПриема;
				НовСтр.ВнешнийСовместитель = Стр.ВнешнийСовместитель;
				НовСтр.ДатаУвольнения = Стр.ДатаУвольнения;
				НовСтр.ДатаПриказаУвольнение = Стр.ДатаПриказаУвольнение;
				НовСтр.НомерПриказаУвольнение = Стр.НомерПриказаУвольнение;
				НовСтр.ОснованиеУвольнения = Стр.ОснованиеУвольнения;
				
				Если Стр.ПричинаИзмененияСостояния<>Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда 
					
					НовСтр = ДолжностьКвалификация.Добавить();
					НовСтр.ФизЛицо = Стр.ФизЛицо;
					НовСтр.Должность = Стр.Должность;
					НовСтр.КатегорияДолжности = Стр.КатегорияДолжности;
					НовСтр.РазрядЕТС = Стр.РазрядЕТС;
					НовСтр.Занятие = Стр.Занятие;
					Если Стр.Уточнить ТОгда
						Сообщить("В табличной части ""Должность/квалификация"" у "+ Стр.ФизЛицо +" в строке "+Строка(НовСтр.НомерСтроки)+" необходимо уточнить ""Занятие"" по ОКРБ 014-2017!", СтатусСообщения.Важное);	
					КонецЕсли;				
					//НовСтр.КодДолжности = СокрЛП(Стр.КодОКРБ)+"-"+Стр.КодКатегорииРаботников+"-"+Стр.КодКатегорииДолжности+"-"+Стр.КодПроизводной;
					НовСтр.КодДолжности = СокрЛП(Стр.КодЗанятия)+"-"+Стр.КодКатегорииРаботников+"-"+?(Стр.КратныеРазмеры,"0",Стр.КодКатегорииДолжности)+"-"+Стр.КодПроизводной;
					НовСтр.ДатаПриказаОснование = Стр.ДатаПриказаПрием;
					НовСтр.НомерПриказаОснование = Стр.НомерПриказаПрием;
					НовСтр.ДатаПриемаПеревода = Стр.ДатаПриема;
					НовСтр.ВидТД = Стр.ВидТД;
					
				КонецЕсли;				
				
			Иначе
				
				НовСтр = ВнутреннееСовместительство.Добавить();
				НовСтр.ФизЛицо = Стр.ФизЛицо;
				НовСтр.Должность = Стр.Должность;
				НовСтр.КатегорияДолжности = Стр.КатегорияДолжности;
				НовСтр.РазрядЕТС = Стр.РазрядЕТС;
				НовСтр.Занятие = Стр.Занятие;				
				Если Стр.Уточнить ТОгда
					Сообщить("В табличной части ""Внутреннее совместительство"" у "+ Стр.ФизЛицо +" в строке "+Строка(НовСтр.НомерСтроки)+" необходимо уточнить ""Занятие"" по ОКРБ 014-2017!", СтатусСообщения.Важное);	
				КонецЕсли;
				//НовСтр.КодДолжности = СокрЛП(Стр.КодОКРБ)+"-"+Стр.КодКатегорииРаботников+"-"+Стр.КодКатегорииДолжности+"-"+Стр.КодПроизводной;
				НовСтр.КодДолжности = СокрЛП(Стр.КодЗанятия)+"-"+Стр.КодКатегорииРаботников+"-"+?(Стр.КратныеРазмеры,"0",Стр.КодКатегорииДолжности)+"-"+Стр.КодПроизводной;
				НовСтр.ДатаПриказаПрием = Стр.ДатаПриказаПрием;
				НовСтр.НомерПриказаПрием = Стр.НомерПриказаПрием;
				НовСтр.ДатаПриема = ?(Стр.ДатаПриема<Дата(2019,07,01),Дата(2019,07,01),Стр.ДатаПриема);
				НовСтр.ДатаУвольнения = Стр.ДатаУвольнения;
				НовСтр.ДатаПриказаУвольнение = Стр.ДатаПриказаУвольнение;
				НовСтр.НомерПриказаУвольнение = Стр.НомерПриказаУвольнение;
				НовСтр.ОснованиеУвольнения = Стр.ОснованиеУвольнения;
				
			КонецЕсли;
			
			
		Иначе			
			
			СтрокиПеремещений = ТаблицаПеремещений.НайтиСтроки(Новый Структура("ФизЛицо",Стр.ФизЛицо));
			
			Для Каждого СтрокаПеремещения Из СтрокиПеремещений Цикл
				
				Если Не СтрокаПеремещения.ВнутреннийСовместитель Тогда
					
					НовСтр = ДолжностьКвалификация.Добавить();
					НовСтр.ФизЛицо = СтрокаПеремещения.ФизЛицо;
					НовСтр.Должность = СтрокаПеремещения.Должность;
					НовСтр.КатегорияДолжности = СтрокаПеремещения.КатегорияДолжности;
					НовСтр.РазрядЕТС = СтрокаПеремещения.РазрядЕТС;
					НовСтр.Занятие = СтрокаПеремещения.Занятие;
					Если СтрокаПеремещения.Уточнить ТОгда
						Сообщить("В табличной части ""Должность/квалификация"" у "+ Стр.ФизЛицо +" в строке "+Строка(НовСтр.НомерСтроки)+" необходимо уточнить ""Занятие"" по ОКРБ 014-2017!", СтатусСообщения.Важное);	
					КонецЕсли;
	
					//НовСтр.КодДолжности = СокрЛП(СтрокаПеремещения.КодОКРБ)+"-"+СтрокаПеремещения.КодКатегорииРаботников+"-"+СтрокаПеремещения.КодКатегорииДолжности+"-"+СтрокаПеремещения.КодПроизводной;
					НовСтр.КодДолжности = СокрЛП(СтрокаПеремещения.КодЗанятия)+"-"+СтрокаПеремещения.КодКатегорииРаботников+"-"+?(СтрокаПеремещения.КратныеРазмеры,"0",СтрокаПеремещения.КодКатегорииДолжности)+"-"+СтрокаПеремещения.КодПроизводной;
					
					Если СтрокаПеремещения.ПричинаКадровогоПеремещения = Перечисления.ПричиныКадровыхПеремещений.ПрисвоениеКатегорииРазряда Тогда
						
						НовСтр.ДатаПриказаПрисвоение = СтрокаПеремещения.ДатаПриказаПеремещение;
						НовСтр.НомерПриказаПрисвоение = СтрокаПеремещения.НомерПриказаПеремещение;
						НовСтр.ДатаПрисвоение = СтрокаПеремещения.ДатаДвижения;	
						
					Иначе
						
						НовСтр.ДатаПриказаОснование = СтрокаПеремещения.ДатаПриказаПеремещение;
						НовСтр.НомерПриказаОснование = СтрокаПеремещения.НомерПриказаПеремещение;
						НовСтр.ДатаПриемаПеревода = СтрокаПеремещения.ДатаДвижения;
						НовСтр.ВидТД = СтрокаПеремещения.ВидТД;	
						
					КонецЕсли;
					
				Иначе //перемещение по внутреннему совместительству  - это увольнение и прием
					
					НовСтр = ВнутреннееСовместительство.Добавить();
					НовСтр.ФизЛицо = СтрокаПеремещения.ФизЛицо;
					НовСтр.Должность = СтрокаПеремещения.ПредДолжность;
					НовСтр.КатегорияДолжности = СтрокаПеремещения.ПредКатегорияДолжности;
					НовСтр.РазрядЕТС = СтрокаПеремещения.ПредРазрядЕТС;
					НовСтр.Занятие = СтрокаПеремещения.ПредЗанятие;
					Если СтрокаПеремещения.предУточнить ТОгда
						Сообщить("В табличной части ""Внутреннее совместительство"" у "+ СтрокаПеремещения.ФизЛицо +" в строке "+Строка(НовСтр.НомерСтроки)+" необходимо уточнить ""Занятие"" по ОКРБ 014-2017!", СтатусСообщения.Важное);	
					КонецЕсли;
					//НовСтр.КодДолжности = СокрЛП(СтрокаПеремещения.ПредКодОКРБ)+"-"+СтрокаПеремещения.ПредКодКатегорииРаботников+"-"+СтрокаПеремещения.ПредКодКатегорииДолжности+"-"+СтрокаПеремещения.ПредКодПроизводной;;
					НовСтр.КодДолжности = СокрЛП(СтрокаПеремещения.ПредКодЗанятия)+"-"+СтрокаПеремещения.ПредКодКатегорииРаботников+"-"+?(СтрокаПеремещения.ПредКратныеРазмеры,"0",СтрокаПеремещения.ПредКодКатегорииДолжности)+"-"+СтрокаПеремещения.ПредКодПроизводной;;
						
					НовСтр.ДатаПриказаУвольнение = СтрокаПеремещения.ДатаПриказаПеремещение;
					НовСтр.НомерПриказаУвольнение = СтрокаПеремещения.НомерПриказаПеремещение;
					НовСтр.ДатаУвольнения = СтрокаПеремещения.ДатаДвижения;	
					
					
					НовСтр = ВнутреннееСовместительство.Добавить();
					НовСтр.ФизЛицо = СтрокаПеремещения.ФизЛицо;
					НовСтр.Должность = СтрокаПеремещения.Должность;
					НовСтр.КатегорияДолжности = СтрокаПеремещения.КатегорияДолжности;
					НовСтр.РазрядЕТС = СтрокаПеремещения.РазрядЕТС;
					НовСтр.Занятие = СтрокаПеремещения.Занятие;
					Если СтрокаПеремещения.Уточнить ТОгда
						Сообщить("В табличной части ""Внутреннее совместительство"" у "+ Стр.ФизЛицо +" в строке "+Строка(НовСтр.НомерСтроки)+" необходимо уточнить ""Занятие"" по ОКРБ 014-2017!", СтатусСообщения.Важное);	
					КонецЕсли;
					//НовСтр.КодДолжности = СокрЛП(СтрокаПеремещения.КодОКРБ)+"-"+СтрокаПеремещения.КодКатегорииРаботников+"-"+СтрокаПеремещения.КодКатегорииДолжности+"-"+СтрокаПеремещения.КодПроизводной;
					НовСтр.КодДолжности = СокрЛП(СтрокаПеремещения.КодЗанятия)+"-"+СтрокаПеремещения.КодКатегорииРаботников+"-"+?(СтрокаПеремещения.КратныеРазмеры,"0",СтрокаПеремещения.КодКатегорииДолжности)+"-"+СтрокаПеремещения.КодПроизводной;
						
					НовСтр.ДатаПриказаПрием = СтрокаПеремещения.ДатаПриказаПеремещение;
					НовСтр.НомерПриказаПрием = СтрокаПеремещения.НомерПриказаПеремещение;
					НовСтр.ДатаПриема = СтрокаПеремещения.ДатаДвижения;	
																																
				КонецЕсли;
				
				
			КонецЦикла;
			
			
		КонецЕсли;
		
	КонецЦикла;	
	
	
	//
		
КонецФункции

#Если Клиент Тогда
	
//vvv
Функция ПолучитьСписокЗанятий(ВыбДолжность) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Должность",ВыбДолжность);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КлассификаторЗанятия.Ссылка КАК Занятие,
	|	КлассификаторЗанятия.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.СоответствияДолжностейОрганизацийЗанятиям КАК СоответствияДолжностейОрганизацийЗанятиям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторЗанятия КАК КлассификаторЗанятия
	|		ПО (СоответствияДолжностейОрганизацийЗанятиям.Занятие = КлассификаторЗанятия.Ссылка
	|				ИЛИ СоответствияДолжностейОрганизацийЗанятиям.Занятие.Родитель = КлассификаторЗанятия.Ссылка)
	|ГДЕ
	|	СоответствияДолжностейОрганизацийЗанятиям.Должность = &Должность
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлассификаторЗанятия.ЭтоГруппа ИЕРАРХИЯ";
	
	ДеревоДолжностей = Новый ДеревоЗначений;
	ДеревоДолжностей = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);		
	
	Возврат ДеревоДолжностей;
	
КонецФункции
//vvv
Функция СформироватьЗапросПоТабЧастям() 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОДвиженииРаботниковДПУПриемУвольнение.ФизЛицо,
	|	СведенияОДвиженииРаботниковДПУПриемУвольнение.ДатаПриказаПрием,
	|	СведенияОДвиженииРаботниковДПУПриемУвольнение.НомерПриказаПрием,
	|	СведенияОДвиженииРаботниковДПУПриемУвольнение.ДатаПриема,
	|	ВЫБОР
	|		КОГДА СведенияОДвиженииРаботниковДПУПриемУвольнение.ВнешнийСовместитель
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВнешнийСовместитель,
	|	СведенияОДвиженииРаботниковДПУПриемУвольнение.ДатаУвольнения,
	|	СведенияОДвиженииРаботниковДПУПриемУвольнение.ДатаПриказаУвольнение,
	|	СведенияОДвиженииРаботниковДПУПриемУвольнение.НомерПриказаУвольнение,
	|	СведенияОДвиженииРаботниковДПУПриемУвольнение.ОснованиеУвольнения,
	|	СведенияОДвиженииРаботниковДПУПриемУвольнение.ОснованиеУвольнения.Код КАК КодОснованияУвольнения
	|ИЗ
	|	Документ.СведенияОДвиженииРаботниковДПУ.ПриемУвольнение КАК СведенияОДвиженииРаботниковДПУПриемУвольнение
	|ГДЕ
	|	СведенияОДвиженииРаботниковДПУПриемУвольнение.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДвиженииРаботниковДолжностьКвалификация.ФизЛицо,
	|	СведенияОДвиженииРаботниковДолжностьКвалификация.Должность,
	|	СведенияОДвиженииРаботниковДолжностьКвалификация.КодДолжности КАК КодДолжности,
	|	СведенияОДвиженииРаботниковДолжностьКвалификация.ДатаПриказаОснование,
	|	СведенияОДвиженииРаботниковДолжностьКвалификация.НомерПриказаОснование,
	|	СведенияОДвиженииРаботниковДолжностьКвалификация.ДатаПриемаПеревода,
	|	СведенияОДвиженииРаботниковДолжностьКвалификация.ВидТД,
	|	ВЫБОР
	|		КОГДА СведенияОДвиженииРаботниковДолжностьКвалификация.ВидТД = ЗНАЧЕНИЕ(Перечисление.ВидыТрудовыхДоговоров.Контракт)
	|			ТОГДА ""01""
	|		КОГДА СведенияОДвиженииРаботниковДолжностьКвалификация.ВидТД = ЗНАЧЕНИЕ(Перечисление.ВидыТрудовыхДоговоров.НеопределенСрок)
	|			ТОГДА ""02""
	|		КОГДА СведенияОДвиженииРаботниковДолжностьКвалификация.ВидТД = ЗНАЧЕНИЕ(Перечисление.ВидыТрудовыхДоговоров.Срочный)
	|			ТОГДА ""03""
	|		ИНАЧЕ ""04""
	|	КОНЕЦ КАК КодТД,
	|	СведенияОДвиженииРаботниковДолжностьКвалификация.ДатаПриказаПрисвоение,
	|	СведенияОДвиженииРаботниковДолжностьКвалификация.НомерПриказаПрисвоение,
	|	СведенияОДвиженииРаботниковДолжностьКвалификация.ДатаПрисвоения
	|ИЗ
	|	Документ.СведенияОДвиженииРаботниковДПУ.ДолжностьКвалификация КАК СведенияОДвиженииРаботниковДолжностьКвалификация
	|ГДЕ
	|	СведенияОДвиженииРаботниковДолжностьКвалификация.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДвиженииРаботниковВнутреннееСовместительство.ФизЛицо,
	|	СведенияОДвиженииРаботниковВнутреннееСовместительство.Должность,
	|	СведенияОДвиженииРаботниковВнутреннееСовместительство.КодДолжности КАК КодДолжности,
	|	СведенияОДвиженииРаботниковВнутреннееСовместительство.ДатаПриказаПрием,
	|	СведенияОДвиженииРаботниковВнутреннееСовместительство.НомерПриказаПрием,
	|	СведенияОДвиженииРаботниковВнутреннееСовместительство.ДатаПриема,
	|	СведенияОДвиженииРаботниковВнутреннееСовместительство.ДатаУвольнения,
	|	СведенияОДвиженииРаботниковВнутреннееСовместительство.ДатаПриказаУвольнение,
	|	СведенияОДвиженииРаботниковВнутреннееСовместительство.НомерПриказаУвольнение,
	|	СведенияОДвиженииРаботниковВнутреннееСовместительство.ОснованиеУвольнения,
	|	СведенияОДвиженииРаботниковВнутреннееСовместительство.ОснованиеУвольнения.Код КАК КодОснованияУвольнения
	|ИЗ
	|	Документ.СведенияОДвиженииРаботниковДПУ.ВнутреннееСовместительство КАК СведенияОДвиженииРаботниковВнутреннееСовместительство
	|ГДЕ
	|	СведенияОДвиженииРаботниковВнутреннееСовместительство.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

//vvv	
Функция СформироватьВыходнойФайл2019(Отказ,ЗаписыватьПачку = Истина) Экспорт
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

    ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	Если ВыборкаПоШапкеДокумента.Следующий()=0 тогда
		Отказ = Истина;
		Возврат "";
	КонецЕсли;	

    ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	Если Отказ тогда
		Возврат "";
	КонецЕсли;
	
	Результат					=	СформироватьЗапросПоРаботникиОрганизации();
	ВыборкаПоРаботникиОрганизации			=	Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	МассивРезультатов = СформироватьЗапросПоТабЧастям();
	
	тПриемУвольнение = МассивРезультатов[0].Выгрузить();
	тДолжностьКвалификация = МассивРезультатов[1].Выгрузить();
	тВнутреннееСовместительство = МассивРезультатов[2].Выгрузить();	
	
	СтруктураПоиска = Новый Структура("ФизЛицо");
	
	НомерПачки_ = "PU2_"+СокрЛП(ВыборкаПоШапкеДокумента.УНПФ)+"_"+СокрЛП(ВыборкаПоШапкеДокумента.УНП)+"_"+Строка(ВыборкаПоШапкеДокумента.ТипФормы)+"_"+Формат(ВыборкаПоШапкеДокумента.ДатаРегистрации,"ДФ=гггг")+"0"
							+Строка(Число(Формат(КонецКвартала(ВыборкаПоШапкеДокумента.ДатаРегистрации),"ДФ=" "к")))+"_"+Формат(ТекущаяДата(),"ДФ=ггггММддччммсс");
							
	ТекстФайла = Новый ТекстовыйДокумент;
	
	текстФайла.ДобавитьСтроку("{");  //начало пачки
	
	текстФайла.ДобавитьСтроку("	""ver"" : ""2.0"",");
	текстФайла.ДобавитьСтроку("	""forma"" : ""PU2"",");
	текстФайла.ДобавитьСтроку("	""unpf"" : """+ВыборкаПоШапкеДокумента.УНПФ+""",");
	текстФайла.ДобавитьСтроку("	""unp"" : """+ВыборкаПоШапкеДокумента.УНП+""",");
	текстФайла.ДобавитьСтроку("	""plat"" : """+СтрЗаменить(ВРег(ВыборкаПоШапкеДокумента.НаименованиеПолное),"""","")+""",");
	текстФайла.ДобавитьСтроку("	""type"" : """+Строка(ВыборкаПоШапкеДокумента.ТипФормы)+""",");
	текстФайла.ДобавитьСтроку("	""kv"" : """+Строка(Число(Формат(КонецКвартала(ВыборкаПоШапкеДокумента.ДатаРегистрации),"ДФ=" "к")))+""",");
	текстФайла.ДобавитьСтроку("	""year"" : """+Формат(ВыборкаПоШапкеДокумента.ДатаРегистрации,"ДФ=гггг")+""",");
	текстФайла.ДобавитьСтроку("	""pck"" : """+НомерПачки_+""",");
	текстФайла.ДобавитьСтроку("	""tel"" : """+ВыборкаПоШапкеДокумента.Телефон+""",");
	текстФайла.ДобавитьСтроку("	""ddoc"" : """+Формат(ТекущаяДата(),"ДФ=dd/MM/yyyy")+""",");
	текстФайла.ДобавитьСтроку("	""data"" : [ ");
	
	Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл		
		
		текстФайла.ДобавитьСтроку("		{");
		текстФайла.ДобавитьСтроку("			""ils"" : """+ВыборкаПоРаботникиОрганизации.ЛичныйНомер+""",");
		текстФайла.ДобавитьСтроку("			""fzl"" : """+ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.Фамилия))+""",");
		текстФайла.ДобавитьСтроку("			""izl"" : """+Лев(ВыборкаПоРаботникиОрганизации.Имя,1)+""",");
		текстФайла.ДобавитьСтроку("			""ozl"" : """+Лев(ВыборкаПоРаботникиОрганизации.Отчество,1)+""",");
		
		
		НайденныеСтрокиР1 = тПриемУвольнение.НайтиСтроки(Новый Структура("ФизЛицо",ВыборкаПоРаботникиОрганизации.ФизЛицо));
		
		Если НайденныеСтрокиР1.Количество()>0 Тогда
						
			текстФайла.ДобавитьСтроку("			""r1"" : [");
			
			Для Каждого Стр Из НайденныеСтрокиР1 Цикл
				
				текстФайла.ДобавитьСтроку("			{");
				
				Если Стр.ДатаПриема<>Дата(1,1,1,0,0,0) ТОгда
					
					текстФайла.ДобавитьСтроку("				""dfr1"" : """+Формат(Стр.ДатаПриема,"ДФ=dd/MM/yyyy")+""",");
					текстФайла.ДобавитьСтроку("				""dpr11"" : """+Формат(Стр.ДатаПриказаПрием,"ДФ=dd/MM/yyyy")+""",");
					текстФайла.ДобавитьСтроку("				""npr11"" : """+СокрЛП(Стр.НомерПриказаПрием)+""",");
					текстФайла.ДобавитьСтроку("				""sovm"" : """+Строка(Стр.ВнешнийСовместитель)+""",");
					
				КонецЕсли;
				
				Если Стр.ДатаУвольнения<>Дата(1,1,1,0,0,0) ТОгда
					
					текстФайла.ДобавитьСтроку("				""dto1"" : """+Формат(Стр.ДатаУвольнения,"ДФ=dd/MM/yyyy")+""",");
					текстФайла.ДобавитьСтроку("				""koduv1"" : """+СокрЛП(Стр.КодОснованияУвольнения)+""",");
					текстФайла.ДобавитьСтроку("				""dpr12"" : """+Формат(Стр.ДатаПриказаУвольнение,"ДФ=dd/MM/yyyy")+""",");
					текстФайла.ДобавитьСтроку("				""npr12"" : """+СокрЛП(Стр.НомерПриказаУвольнение)+""",");
					
				КонецЕсли;
				
				Стр = ТекстФайла.ПолучитьСтроку(ТекстФайла.КоличествоСтрок());
				ТекстФайла.ЗаменитьСтроку(ТекстФайла.КоличествоСтрок(),Лев(Стр,СтрДлина(Стр)-1));
				
				текстФайла.ДобавитьСтроку("			},");
				
			КонецЦикла;			
			
			Стр = ТекстФайла.ПолучитьСтроку(ТекстФайла.КоличествоСтрок());
			ТекстФайла.ЗаменитьСтроку(ТекстФайла.КоличествоСтрок(),Лев(Стр,СтрДлина(Стр)-1));
			 
		КонецЕсли;
		
		НайденныеСтрокиР2 = тДолжностьКвалификация.НайтиСтроки(Новый Структура("ФизЛицо",ВыборкаПоРаботникиОрганизации.ФизЛицо));
			
		Если НайденныеСтрокиР2.Количество()>0 ТОгда
			
			Если НайденныеСтрокиР1.Количество()>0 Тогда
				
				текстФайла.ДобавитьСтроку("			],");	
				
			КонецЕсли;				
			
				текстФайла.ДобавитьСтроку("			""r2"" : [");
				
				Для Каждого Стр Из НайденныеСтрокиР2 Цикл
				
					текстФайла.ДобавитьСтроку("			{");
										
					текстФайла.ДобавитьСтроку("				""prof2"" : """+СокрЛП(Стр.КодДолжности)+""",");
					
					Если Стр.ДатаПриказаОснование<>Дата(1,1,1,0,0,0) ТОгда
						
						текстФайла.ДобавитьСтроку("				""dpr21"" : """+Формат(Стр.ДатаПриказаОснование,"ДФ=dd/MM/yyyy")+""",");
						текстФайла.ДобавитьСтроку("				""npr21"" : """+СокрЛП(Стр.НомерПриказаОснование)+""",");
						текстФайла.ДобавитьСтроку("				""dfr21"" : """+Формат(Стр.ДатаПриемаПеревода,"ДФ=dd/MM/yyyy")+""",");
						текстФайла.ДобавитьСтроку("				""kod"" : """+СокрЛП(Стр.КодТД)+""",");
						
					КонецЕсли;
					
					Если Стр.ДатаПриказаПрисвоение<>Дата(1,1,1,0,0,0) ТОгда
						
						текстФайла.ДобавитьСтроку("				""dpr22"" : """+Формат(Стр.ДатаПриказаПрисвоение,"ДФ=dd/MM/yyyy")+""",");
						текстФайла.ДобавитьСтроку("				""npr22"" : """+СокрЛП(Стр.НомерПриказаПрисвоение)+""",");
						текстФайла.ДобавитьСтроку("				""dfr22"" : """+Формат(Стр.ДатаПрисвоения,"ДФ=dd/MM/yyyy")+""",");						
						
					КонецЕсли;
					
					Стр = ТекстФайла.ПолучитьСтроку(ТекстФайла.КоличествоСтрок());
					ТекстФайла.ЗаменитьСтроку(ТекстФайла.КоличествоСтрок(),Лев(Стр,СтрДлина(Стр)-1));
					
					текстФайла.ДобавитьСтроку("			},");
				
				КонецЦикла;
				
				Стр = ТекстФайла.ПолучитьСтроку(ТекстФайла.КоличествоСтрок());
				ТекстФайла.ЗаменитьСтроку(ТекстФайла.КоличествоСтрок(),Лев(Стр,СтрДлина(Стр)-1));
			
		Иначе
			
			Если НайденныеСтрокиР1.Количество()>0 Тогда
				текстФайла.ДобавитьСтроку("			]");	
			КонецЕсли;			
			
		КонецЕсли;
		
		НайденныеСтрокиР3 = тВнутреннееСовместительство.НайтиСтроки(Новый Структура("ФизЛицо",ВыборкаПоРаботникиОрганизации.ФизЛицо));
			
		Если НайденныеСтрокиР3.Количество()>0 ТОгда
			
			Если (НайденныеСтрокиР2.Количество()>0) или (НайденныеСтрокиР1.Количество()>0) Тогда
				
				текстФайла.ДобавитьСтроку("			],");	
				
			КонецЕсли;			
			
			текстФайла.ДобавитьСтроку("			""r3"" : [");
				
				Для Каждого Стр Из НайденныеСтрокиР3 Цикл
				
					текстФайла.ДобавитьСтроку("			{");
										
					текстФайла.ДобавитьСтроку("				""prof3"" : """+СокрЛП(Стр.КодДолжности)+""",");
					
					Если Стр.ДатаПриема<>Дата(1,1,1,0,0,0) ТОгда
					
						текстФайла.ДобавитьСтроку("				""dfr3"" : """+Формат(Стр.ДатаПриема,"ДФ=dd/MM/yyyy")+""",");
						текстФайла.ДобавитьСтроку("				""dpr31"" : """+Формат(Стр.ДатаПриказаПрием,"ДФ=dd/MM/yyyy")+""",");
						текстФайла.ДобавитьСтроку("				""npr31"" : """+СокрЛП(Стр.НомерПриказаПрием)+""",");						
					
					КонецЕсли;
				
					Если Стр.ДатаУвольнения<>Дата(1,1,1,0,0,0) ТОгда
					
						текстФайла.ДобавитьСтроку("				""dto3"" : """+Формат(Стр.ДатаУвольнения,"ДФ=dd/MM/yyyy")+""",");
						текстФайла.ДобавитьСтроку("				""koduv3"" : """+СокрЛП(Стр.КодОснованияУвольнения)+""",");
						текстФайла.ДобавитьСтроку("				""dpr32"" : """+Формат(Стр.ДатаПриказаУвольнение,"ДФ=dd/MM/yyyy")+""",");
						текстФайла.ДобавитьСтроку("				""npr32"" : """+СокрЛП(Стр.НомерПриказаУвольнение)+""",");						
					
					КонецЕсли;
					
					Стр = ТекстФайла.ПолучитьСтроку(ТекстФайла.КоличествоСтрок());
					ТекстФайла.ЗаменитьСтроку(ТекстФайла.КоличествоСтрок(),Лев(Стр,СтрДлина(Стр)-1));
					текстФайла.ДобавитьСтроку("			},");
				
				КонецЦикла;
				
				Стр = ТекстФайла.ПолучитьСтроку(ТекстФайла.КоличествоСтрок());
				ТекстФайла.ЗаменитьСтроку(ТекстФайла.КоличествоСтрок(),Лев(Стр,СтрДлина(Стр)-1));
			
				текстФайла.ДобавитьСтроку("			]");
							
			
		Иначе
			
			Если НайденныеСтрокиР2.Количество()>0 Тогда
				текстФайла.ДобавитьСтроку("			]");	
			КонецЕсли;			
			
		КонецЕсли;
		
		текстФайла.ДобавитьСтроку("		},");
		
		
	КонецЦикла;	
	
	Стр = ТекстФайла.ПолучитьСтроку(ТекстФайла.КоличествоСтрок());
	ТекстФайла.ЗаменитьСтроку(ТекстФайла.КоличествоСтрок(),Лев(Стр,СтрДлина(Стр)-1));
			
	текстФайла.ДобавитьСтроку("	]");
	
	текстФайла.ДобавитьСтроку("}"); //конец пачки
	
	
	//vvv
	Если ЗаписыватьПачку Тогда
		ТекстФайла.Записать(КаталогВыгрузки+"\"+СокрЛП(НомерПачки_)+".txt",КодировкаТекста.ANSI);
	КонецЕсли;
	//
	
	Возврат ТекстФайла.ПолучитьТекст();
	
КонецФункции
			
// Формирует файл, который можно будет записать на дискетку
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Строка - содержимое файла
//
//vvv
//Функция СформироватьВыходнойФайл(Отказ) Экспорт
Функция СформироватьВыходнойФайл(Отказ,ЗаписыватьПачку = Истина) Экспорт

	//vvv
	Если ТекущаяДата()>=Дата(2019,09,20) ТОгда
		Возврат СформироватьВыходнойФайл2019(Отказ,ЗаписыватьПачку = Истина);
	КонецЕсли;	
	//
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

    ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	Если ВыборкаПоШапкеДокумента.Следующий()=0 тогда
		Отказ = Истина;
		Возврат "";
	КонецЕсли;	

    ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	Если Отказ тогда
		Возврат "";
	КонецЕсли;	 
	
	Результат					=	СформироватьЗапросПоРаботникиОрганизации();
	ВыборкаПоРаботникиОрганизации			=	Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);

	//Если ВыборкаПоРаботникиОрганизации.Количество()>200 тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("В документе должно быть не более 200 анкет (работников)!", Отказ, Заголовок);
	//КонецЕсли;	 

	СписокОбработанныхАнкет = Новый СписокЗначений;
	
	ТекстФайла	=	"";
	НомерДокументаВПачке = 0;

	//Формируем заголовок выходного файла
	ДатаФормирования = ВыборкаПоШапкеДокумента.Дата;
	ДеньШапки        = ?(День(ДатаФормирования)<10,"0","")+День(ДатаФормирования);
	МесяцШапки       = ?(Месяц(ДатаФормирования)<10,"0","")+Месяц(ДатаФормирования);
	ГодШапки 		 = Строка(СокрЛП(Формат(Год(ДатаФормирования), "ЧГ=0")));
	ДатаЗаполнения   = ДеньШапки+"/"+МесяцШапки+"/"+ГодШапки;
	//vvv комментируем
	//НомерПачки 				= ПроцедурыПерсонифицированогоУчета.НомерПачкиДокумента(ВыборкаПоШапкеДокумента.Номер);
	//
	КоличествоДокументов 	= ВыборкаПоРаботникиОрганизации.Количество();
	Квартал = Месяц(КонецКвартала(ДатаРегистрации))/3;
    Год = Формат(Год(ДатаРегистрации),"ЧГ=0");
	
	Если Отказ тогда
		Возврат "";
	КонецЕсли;	 
	
	ТекстФайла = Новый ТекстовыйДокумент;
	текстФайла.ДобавитьСтроку("ЗГЛВ=1.6=");
	ТекстФайла.ДобавитьСтроку(Врег("<ПАЧК="+СокрЛП(ВыборкаПоШапкеДокумента.Организация.ИНН)+"="+СокрЛП(ВыборкаПоШапкеДокумента.Организация.РегистрационныйНомерПФР)+
				"="+СокрЛП(ВыборкаПоШапкедокумента.организация.НаименованиеПолное)+"="+СокрЛП(НомерПачки)+"= = =1="));
	ТекстФайла.ДобавитьСтроку("ТИПД=ПУ-2=1= = = = =>");
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация.РегистрационныйНомерПФР) тогда
		ОбщегоНазначения.СообщитьОбОшибке("В организации : "+ВыборкаПоШапкеДокумента.Организация+" не заполнени страховой номер в ФСЗН", Отказ);
	КонецЕсли;
    Телефон = ?(СокрЛП(КонтактныйТелефонОтветственного)= ""," ",СокрЛП(КонтактныйТелефонОтветственного));
	ТекстФайла.ДобавитьСтроку("<ПУ-2=И="+СокрЛП(ВыборкаПоШапкеДокумента.Организация.РегистрационныйНомерПФР)+"= = ="+СокрЛП(Строка(КоличествоДокументов))+"="+Телефон+"="+ДатаЗаполнения+"="+Квартал+"="+Год+"=");
	
	ТипЗаписи = "ДВИЖ=";
	
	Пока ВыборкаПоРаботникиОрганизации.Следующий()	Цикл
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		//Контроль дубля строк
		Если СписокОбработанныхАнкет.НайтиПоЗначению(ВыборкаПоРаботникиОрганизации.ФизЛицо) = Неопределено тогда
			//vvv отключаем проверку, т.к. в противном случае не работает, когда сотрудник в пределах квартала принят и уволен
			//СписокОбработанныхАнкет.Добавить(ВыборкаПоРаботникиОрганизации.ФизЛицо);
		Иначе	
			//vvv
			//ОбщегоНазначения.СообщитьОбОшибке("Строка №"+ВыборкаПоРаботникиОрганизации.НомерСтроки+": Работник "+ВыборкаПоРаботникиОрганизации.ФизЛицо+ " указан(а) в документе дважды!", Отказ);
		КонецЕсли;	 
		
		
        СтрокаФайла = ТипЗаписи;
		//Инициалы должны быть указаны
		//vvv комментируем
		//Фамилия = ?(ВыборкаПоРаботникиОрганизации.Фамилия = "", " ", СокрЛП(ВыборкаПоРаботникиОрганизации.Фамилия));
		//Имя = ?(ВыборкаПоРаботникиОрганизации.Имя = "", " ", СокрЛП(ВыборкаПоРаботникиОрганизации.Имя));
		//Отчество = ?(ВыборкаПоРаботникиОрганизации.Отчество = "", " ", СокрЛП(ВыборкаПоРаботникиОрганизации.Отчество));
		Фамилия = ?(ВыборкаПоРаботникиОрганизации.Фамилия = "", " ", ВРЕГ(СокрЛП(ВыборкаПоРаботникиОрганизации.Фамилия)));
		Имя = ?(ВыборкаПоРаботникиОрганизации.Имя = "", " ", ЛЕВ(СокрЛП(ВыборкаПоРаботникиОрганизации.Имя),1));
		Отчество = ?(ВыборкаПоРаботникиОрганизации.Отчество = "", " ", ЛЕВ(СокрЛП(ВыборкаПоРаботникиОрганизации.Отчество),1));
		//
		СтрокаФайла = СтрокаФайла+Фамилия+"="+Имя+"="+Отчество+"=";

		Если Отказ Тогда
			Продолжить;
		КонецЕсли;

		НомерДокументаВПачке = 	НомерДокументаВПачке + 1;

		//Берем запись с пустыми полями
		//Запись = ПолучитьСтруктуруЗаписи(ТаблицаФорматаЗаписи);

		НомерДокументаВПачке = НомерДокументаВПачке;
		ДатаЗаполнения = ДатаЗаполнения;
	
		ДатаФормирования = ВыборкаПоРаботникиОрганизации.ДатаПриема;
		Если Не ЗначениеЗаполнено(ДатаФормирования) тогда
			ДеньШапки = " ";
			МесяцШапки = "";
			ГодШапки = "";
			ДатаПриема = ДеньШапки;
		Иначе
			ДеньШапки        = ?(День(ДатаФормирования)<10,"0","")+День(ДатаФормирования);
			МесяцШапки       = ?(Месяц(ДатаФормирования)<10,"0","")+Месяц(ДатаФормирования);
			ГодШапки 		 = Строка(СокрЛП(Формат(Год(ДатаФормирования), "ЧГ=0")));
			ДатаПриема = ДеньШапки+"/"+МесяцШапки+"/"+ГодШапки;
		
		Конецесли;
		

		ДатаФормирования = ВыборкаПоРаботникиОрганизации.ДатаУвольнения;
		
		Если Не ЗначениеЗаполнено(ДатаФормирования) тогда
			ДеньШапки = " ";
			МесяцШапки = "";
			ГодШапки = "";
		ДатаУвольнения = ДеньШапки;
		Иначе
			ДеньШапки        = ?(День(ДатаФормирования)<10,"0","")+День(ДатаФормирования);
			МесяцШапки       = ?(Месяц(ДатаФормирования)<10,"0","")+Месяц(ДатаФормирования);
			ГодШапки 		 = Строка(СокрЛП(Формат(Год(ДатаФормирования), "ЧГ=0")));
		ДатаУвольнения = ДеньШапки+"/"+МесяцШапки+"/"+ГодШапки;
		Конецесли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ЛичныйНомер) тогда
			ОбщегоНазначения.СообщитьОбОшибке("Строка №"+ВыборкаПоРаботникиОрганизации.НомерСтроки+": Работник "+ВыборкаПоРаботникиОрганизации.ФизЛицо+ " не заполнени страховой номер", Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		
		
		СтрокаФайла = СтрокаФайла + ВыборкаПоРаботникиОрганизации.ЛичныйНомер+"="+ДатаПриема+"= ="+датаУвольнения+"= = =";
		Если НомерДокументаВПачке = КоличествоДокументов тогда
			СтрокаФайла = СтрокаФайла + ">";
		КонецЕсли;
		ТекстФайла.ДобавитьСтроку(СтрокаФайла);
	КонецЦикла; 
    //vvv
	Если ЗаписыватьПачку Тогда
		ТекстФайла.Записать(КаталогВыгрузки+"\"+СокрЛП(НомерПачки)+".txt",КодировкаТекста.ANSI);
	КонецЕсли;
	//
	Возврат ТекстФайла.ПолучитьТекст();
КонецФункции 

//vvv
Процедура ВыборФайлаДляВыгрузки(Элемент) Экспорт
	
	ДиалогФыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогФыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры
//
//Процедура вывода файла сведений на печать
Процедура ПечатьФайла(РежимПечати = 0, МестоВызова = "") Экспорт

	ЕстьОшибки = Ложь;
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ЭтотОбъект,ЕстьОшибки);
	Если ЕстьОшибки тогда
		Возврат;
	КонецЕсли;	 

	Макет = ПолучитьМакет("ФормаАДВ_1");
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АнкетаЗастрахованногоЛица_ФормаАДВ_1";

	//Получаем таблицу формата записи
	ДокументФорматЗаписей = ПолучитьМакет("ФорматЗаписей");
	ТаблицаФорматаЗаписи = РегламентированнаяОтчетность.ПолучитьФорматЗаписи("АНКТ",ДокументФорматЗаписей);

	//Получаем инициализированную структуру, соответствующую формату записи 
	//ПустаяЗапись = ПолучитьСтруктуруЗаписи(ТаблицаФорматаЗаписи);
	
	//Обработка заголовка файла
	ИнформацияОПачке = Новый Структура;
	Если ПроцедурыПерсонифицированогоУчета.РазобратьЗаголовокФайла(ТекстФайла,ИнформацияОПачке)=0 тогда
		Возврат;
	КонецЕсли;	
	
	//Обработка документов файла
	ОбластьАнкета = Макет.ПолучитьОбласть("Анкета");
    
	Для Н=5 по СтрЧислоСтрок(ТекстФайла) цикл
		//Прочитаем запись из файла
		СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
		Запись = ПроцедурыПерсонифицированогоУчета.ПолучитьСтруктуруЗаписи(ТаблицаФорматаЗаписи);
		СтрОшибка = "";
		Если НЕ ПроцедурыПерсонифицированогоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла,"АНКТ",ТаблицаФорматаЗаписи,Запись,СтрОшибка) тогда
			Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
			Возврат;
		КонецЕсли;	

		ОбластьАнкета.Параметры.ДатаЗаполнения					= 	"Дата заполнения "+ПроцедурыПерсонифицированогоУчета.ДатаВОтчет(Запись.ДатаЗаполнения);
		ОбластьАнкета.Параметры.Фамилия 						= Запись.Фамилия; 
		ОбластьАнкета.Параметры.Имя 							= Запись.Имя; 
		ОбластьАнкета.Параметры.Отчество 						= Запись.Отчество; 
		ОбластьАнкета.Параметры.Пол 							= Запись.Пол+"     (м/ж)"; 
		ОбластьАнкета.Параметры.ДатаРождения 					= ПроцедурыПерсонифицированогоУчета.ДатаВОтчет(Запись.СтандартнаяДатаРождения); 

		//Место рождения
		ОбластьАнкета.Параметры.МестоРожденияТип 				= 	?(Запись.ТипМестаРождения = "ОСОБОЕ", "особое", "");
		ОбластьАнкета.Параметры.МестоРожденияГород 				= 	Запись.МестоРожденияНаселенныйПункт;
		ОбластьАнкета.Параметры.МестоРожденияРайон 				= 	Запись.МестоРожденияРайон;
		ОбластьАнкета.Параметры.МестоРожденияОбласть			= 	Запись.МестоРожденияОбласть;
		ОбластьАнкета.Параметры.МестоРожденияСтрана			 	= 	Запись.МестоРожденияСтрана;

		ОбластьАнкета.Параметры.Гражданство 					= 	Запись.Гражданство;

		//Паспортные данные
		НаименованиеДокумента 									= 	Запись.ДокументНаименование;
		Серия1 													= 	Запись.ДокументСерияРимскиеЦифры;
		Серия2 													= 	Запись.ДокументСерияРусскиеБуквы;
		
		СерияНомер = Серия1 +?( СокрЛП(НаименованиеДокумента) 	= ВРЕГ("паспорт РБ"), " ", ?( СокрЛП(НаименованиеДокумента) = ВРЕГ("паспорт"), "-", "") ) + Серия2 +",  " + Формат(Запись.ДокументНомер,"ЧГ=0");

		ОбластьАнкета.Параметры.НаименованиеДокумента		= 	НаименованиеДокумента;
		ОбластьАнкета.Параметры.СерияНомер			 		= 	СерияНомер;
		ОбластьАнкета.Параметры.ДатаВыдачи 					= 	ПроцедурыПерсонифицированогоУчета.ДатаВОтчет(Запись.ДокументДатаВыдачи);
		ОбластьАнкета.Параметры.КемВыдан 					= 	Запись.ДокументКемВыдан;
		
		//Адреса
		ОбластьАнкета.Параметры.АдресРегистрации 			=	РегламентированнаяОтчетность.ПредставлениеАдреса(Запись.АдресРегистрации,0,"");
		ОбластьАнкета.Параметры.АдресФактический 			= 	РегламентированнаяОтчетность.ПредставлениеАдреса(Запись.АдресФактический,0,"");
		ОбластьАнкета.Параметры.Телефоны 					= 	Запись.Телефоны;
		
		ДокументРезультат.Вывести(ОбластьАнкета);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла;	
	
	РаботаСДиалогами.НапечататьДокумент(ДокументРезультат,1,Ложь,"Анкета застрахованного лица АДВ-1");

    //Печать описи документов
	ДокументОписи = Новый ТабличныйДокумент;
	ДокументОписи.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АнкетаЗастрахованногоЛица_АДВ_6";
	ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация,Дата,Ответственный.ФизЛицо);
	ПроцедурыПерсонифицированогоУчета.ВывестиОписьАДВ6(ДокументОписи,ИнформацияОПачке,ОтветственныеЛица);
	РаботаСДиалогами.НапечататьДокумент(ДокументОписи,1,Ложь,"Опись документов АДВ-6");
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	|	ДатаРегистрации, 
	|	Номер, 
	|	Организация,
	|	Ответственный,
	//vvv
	|	НомерПачки,
	|	КаталогВыгрузки,
	|	КонтактныйТелефонОтветственного КАК Телефон,
	|	Организация.ИНН КАК УНП,
	|	Организация.РегистрационныйНомерПФР КАК УНПФ,
	|	Организация.НаименованиеПолное КАК НаименованиеПолное,
	|	ВЫБОР КОГДА ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормыДляПУ2.Исходная) ТОГДА 1 ИНАЧЕ 2 КОНЕЦ КАК ТипФормы,
	//
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Выбирает данные, необходимые для заполнения утвержденных форм как из спр-ка
//  физлиц, так и из соотв. регистров сведений
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса к данным работников документа.
//
Функция	СформироватьЗапросПоРаботникиОрганизации()
	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ДатаАктуальности" , Дата);
	Запрос.УстановитьПараметр("ВидАдресаРегистрации" , Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица);
	Запрос.УстановитьПараметр("ВидАдресаФактический" , Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица);
   	Запрос.УстановитьПараметр("ВидТелефонаДомашний" , Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АнкетаЗастрахованногоЛицаРаботники.НомерСтроки КАК НомерСтроки,
	|	АнкетаЗастрахованногоЛицаРаботники.ФизЛицо КАК ФизЛицо,
	|	АнкетаЗастрахованногоЛицаРаботники.ФизЛицо.Наименование КАК ФизЛицоНаименование,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ЛичныйНомер ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ЛичныйНомер КОНЕЦ КАК ЛичныйНомер,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ПаспортСерия ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ПаспортСерия КОНЕЦ КАК ДокументСерия,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ПаспортНомер ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ПаспортНомер КОНЕЦ КАК ДокументНомер,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ПаспортДатаВыдачи ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ПаспортДатаВыдачи КОНЕЦ КАК ДокументДатаВыдачи,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ПаспортКемВыдан ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ПаспортКемВыдан КОНЕЦ КАК ДокументКемВыдан,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.АдресРегистрации ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.АдресРегистрации КОНЕЦ КАК АдресРегистрации,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ИндексРегистрации ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ИндексРегистрации КОНЕЦ КАК ИндексРегистрации,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.Телефоны ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.Телефоны КОНЕЦ КАК Телефоны,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.Фамилия ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.Фамилия КОНЕЦ КАК Фамилия,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.Имя ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.Имя КОНЕЦ КАК Имя,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.Отчество ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.Отчество КОНЕЦ КАК Отчество,
	|	АнкетаЗастрахованногоЛицаРаботники.Пол,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ДатаПриема ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ДатаПриема КОНЕЦ КАК ДатаПриема,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ДатаУвольнения ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ДатаУвольнения КОНЕЦ КАК ДатаУвольнения,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ДатаРождения ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ДатаРождения КОНЕЦ КАК ДатаРождения,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ГородРождения ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ГородРождения КОНЕЦ КАК ГородРождения,
	|	АнкетаЗастрахованногоЛицаРаботники.Гражданство.Наименование КАК Страна,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.РайонРождения ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.РайонРождения КОНЕЦ КАК РайонРождения,
	|	АнкетаЗастрахованногоЛицаРаботники.СтранаРождения,
	|	ВЫБОР КОГДА АнкетаЗастрахованногоЛицаРаботники.ОбластьРождения ЕСТЬ NULL ТОГДА  "" ""  ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ОбластьРождения КОНЕЦ КАК ОбластьРождения
	|ИЗ
	|	Документ.СведенияОДвиженииРаботниковДПУ.РаботникиОрганизации КАК АнкетаЗастрахованногоЛицаРаботники
	|
	|ГДЕ
	|	АнкетаЗастрахованногоЛицаРаботники.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, которая подает сведения!", Отказ, Заголовок);
	КонецЕсли;
	//vvv
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НомерПачки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан номер пачки!", Отказ, Заголовок);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КаталогВыгрузки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан каталог выгрузки!", Отказ, Заголовок);
	КонецЕсли;
	//
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Ответственный) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указано ответственное лицо!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Фамилия, Имя, Отказ ,Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке № """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Работники организации"": ";
	// ФизЛицо
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не выбран работник!", Отказ ,Заголовок);
	Иначе	
		СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + ВыборкаПоСтрокамДокумента.ФизЛицо + " ";

		Если  ЗначениеЗаполнено(СтрЗаменить(ВыборкаПоСтрокамДокумента.СтраховойНомерПФР,"-","")) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Уже имеет страховой номер!", Отказ ,Заголовок);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Фамилия) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана фамилия!", Отказ ,Заголовок);
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(Имя) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задано имя!", Отказ ,Заголовок);
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Пол) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан пол!", Отказ ,Заголовок);
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаРождения) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана дата рождения!", Отказ ,Заголовок);
		Иначе
			Если ВыборкаПоСтрокамДокумента.ДатаРождения > Дата тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Дата рождения не может быть больше даты подачи сведений!", Отказ ,Заголовок);
			КонецЕсли;	 
		КонецЕсли;	
		
		Если СокрЛП(СтрЗаменить(ВыборкаПоСтрокамДокумента.МестоРождения,",","")) = "" 
			или СокрЛП(СтрЗаменить(ВыборкаПоСтрокамДокумента.МестоРождения,",","")) = "0" Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не указано место рождения!", Отказ ,Заголовок);
		КонецЕсли; 

		//Паспортные данные
        Если ВыборкаПоСтрокамДокумента.ДокументВид = NULL Тогда

			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не указаны паспортные данные!", Отказ ,Заголовок);

		Иначе

			//Проверка реквизитов паспортных данных
			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументВид) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан вид документа, удостоверяющего личность!", Отказ ,Заголовок);
			КонецЕсли;	

			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументДатаВыдачи) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана дата выдачи документа, удостоверяющего личность!", Отказ ,Заголовок);
			Иначе
				Если (ВыборкаПоСтрокамДокумента.ДатаРождения > ВыборкаПоСтрокамДокумента.ДокументДатаВыдачи) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Дата рождения не должна превышать дату выдачи документа, удостоверяющего личность!", Отказ ,Заголовок);
				КонецЕсли;
			КонецЕсли;	

			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументСерия) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана серия документа, удостоверяющего личность!", Отказ ,Заголовок);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументНомер) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан номер документа, удостоверяющего личность!", Отказ ,Заголовок);
			КонецЕсли;
		КонецЕсли; 

		// Проверка адреса регистрации и проживания
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.АдресРегистрации) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан адрес регистрации (юридический адрес)!", Отказ ,Заголовок);
		КонецЕсли;	
		Если НЕ РегламентированнаяОтчетность.АдресСоответствуетТребованиям(РегламентированнаяОтчетность.РазложитьАдрес(ВыборкаПоСтрокамДокумента.АдресРегистрации)) тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- В адресе регистрации присутствуют латинские или недопустимые символы!", Отказ ,Заголовок);
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетность.АдресСоответствуетТребованиям(РегламентированнаяОтчетность.РазложитьАдрес(ВыборкаПоСтрокамДокумента.АдресФактический)) тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- В фактическом адресе проживания присутствуют латинские или недопустимые символы!", Отказ ,Заголовок);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	//При проведении файл формируем заново 
	ТекстФайла = "";
	#Если Клиент Тогда
	//vvv	
	//ТекстФайла = СформироватьВыходнойФайл(Отказ);
	ТекстФайла = СформироватьВыходнойФайл(Отказ,Ложь);
	#КонецЕсли
	Если Отказ тогда
		Возврат;
	КонецЕсли;	 

	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения["АрхивДанныхРегламентированнойОтчетности"].Добавить();
	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Файл-пачка форм ПУ-2";
	Запись.Данные = ТекстФайла; 
КонецПроцедуры	

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации,,"ФизЛицо");

	
КонецПроцедуры


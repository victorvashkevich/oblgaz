
Перем мВалютаРегламентированногоУчета;
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


Функция ЗаполнитьРаботавшимиПоНарядам() Экспорт
	
	Начисления.Очистить();
	Запрос = Новый Запрос;
	//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ФактическаяВыработкаРаботниковОрганизацийСверхурочно.Выработка) КАК Выработка,
	|	ФактическаяВыработкаРаботниковОрганизацийСверхурочно.Сотрудник,
	|	СУММА(ФактическаяВыработкаРаботниковОрганизацийСверхурочно.ОтработаноЧасов) КАК ОтработаноЧасов,
	|	ФактическаяВыработкаРаботниковОрганизацийСверхурочно.Период,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= ФактическаяВыработкаРаботниковОрганизацийСверхурочно.Период
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ФактическаяВыработкаРаботниковОрганизацийСверхурочно.Коэффициент
	|ИЗ
	|	РегистрНакопления.ФактическаяВыработкаРаботниковОрганизацийСверхурочно КАК ФактическаяВыработкаРаботниковОрганизацийСверхурочно
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&КонецПериода, ) КАК РаботникиОрганизаций
	|		ПО ФактическаяВыработкаРаботниковОрганизацийСверхурочно.Сотрудник = РаботникиОрганизаций.Сотрудник
	|ГДЕ
	|	ФактическаяВыработкаРаботниковОрганизацийСверхурочно.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ФактическаяВыработкаРаботниковОрганизацийСверхурочно.ВидНаряда = ЗНАЧЕНИЕ(Перечисление.ВидыНарядов.СверхурочныйНаряд)
	|	И ФактическаяВыработкаРаботниковОрганизацийСверхурочно.Организация = &ГоловнаяОрганизация
	|	И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
	|	И ВЫБОР
	|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= ФактическаяВыработкаРаботниковОрганизацийСверхурочно.Период
	|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И ВЫБОР
	|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= ФактическаяВыработкаРаботниковОрганизацийСверхурочно.Период
	|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизаций.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ФактическаяВыработкаРаботниковОрганизацийСверхурочно.Сотрудник,
	|	ФактическаяВыработкаРаботниковОрганизацийСверхурочно.Период,
	|	ФактическаяВыработкаРаботниковОрганизацийСверхурочно.Коэффициент,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= ФактическаяВыработкаРаботниковОрганизацийСверхурочно.Период
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("НачалоПериода",НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода",КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация",		Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 тогда
		
		Пока Выборка.Следующий() цикл
			Строка = Начисления.Добавить();
			Строка.Сотрудник = Выборка.Сотрудник;
			Строка.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
			Строка.ДатаВыхода = Выборка.Период;
			Строка.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаСверхурочныхПоНарядам;
			Строка.ЧасовДвойных = Выборка.ОтработаноЧасов;
			Строка.Размер = ПроцедурыУправленияПерсоналом.ЧасоваяТарифнаяСтавкаРаботникаОрг(Выборка.Сотрудник, Выборка.Период, НачалоМесяца(ПериодРегистрации), мВалютаРегламентированногоУчета);
			Если Выборка.Коэффициент <=1 тогда
				Строка.Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Выборка.Выработка,мВалютаРегламентированногоУчета);
			Иначе
				Строка.Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Выборка.Выработка/Выборка.Коэффициент ,мВалютаРегламентированногоУчета);
				Строка = Начисления.Добавить();
				Строка.Сотрудник = Выборка.Сотрудник;
				Строка.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
				Строка.ДатаВыхода = Выборка.Период;
				Строка.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаСверхурочныеПоНарядам;
				Строка.ЧасовДвойных = Выборка.ОтработаноЧасов;
				Строка.Размер = ПроцедурыУправленияПерсоналом.ЧасоваяТарифнаяСтавкаРаботникаОрг(Выборка.Сотрудник, Выборка.Период, НачалоМесяца(ПериодРегистрации), мВалютаРегламентированногоУчета);
				Строка.Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Выборка.Выработка - ОбщегоНазначения.ОкруглитьПоВалюте(Выборка.Выработка/Выборка.Коэффициент,мВалютаРегламентированногоУчета),мВалютаРегламентированногоУчета);
			КонецЕсли;
			
		КонецЦикла;
		Возврат Истина
	Иначе
		Возврат Ложь
	КонецЕсли;
	
	
КонецФункции

// Выполняет перерасчет по заданному списку физлиц
// Если передан пустой список физлиц - перерасчет не проводится
// Если в качестве списка физлиц передан не массив, а Неопределено - перерасчет по всем физлицам 
// регистратора по которым требуется перерасчет
//
// Параметры
//	Физлица		- список значений - ссылки на физлиц
// Возвращаемое значение
//	Нет
//
Процедура Перерассчитать() Экспорт
	
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	Если Не ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////
	// Начисления
	НачатьТранзакцию();
	Прочитать();
	Выборка = СформироватьЗапросДляПерерасчета(Ссылка, ПериодРегистрации).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// если не перерассчитываем никого - возврат
	Если Выборка.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		СтрокаНачисления = Начисления.Найти(Выборка.НомерСтроки,"НомерСтроки");
		
		СтрокаНачисления.ПодразделениеОрганизации = Выборка.НовоеПодразделениеОрганизации;
		СтрокаНачисления.Размер = ОбщегоНазначения.ОкруглитьПоВалюте(Выборка.НоваяТарифнаяСтавка,Константы.ВалютаРегламентированногоУчета.Получить());
		СтрокаНачисления.Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Выборка.НоваяТарифнаяСтавка * СтрокаНачисления.ЧасовДвойных ,Константы.ВалютаРегламентированногоУчета.Получить());
	КонецЦикла;
	
	// записываем документ перед запросом для обновления регистров
	Записать();

	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	// Получение учетной политики по персоналу организации
	УчетЗадолженностиПоМесяцам = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
		
	// получим реквизиты табличной части
	РезультатЗапросаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента);
	ВыборкаПоНачислениям = РезультатЗапросаПоНачислениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		// Заполним записи в наборах записей регистров
		ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
		ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетЗадолженностиПоМесяцам);
	КонецЦикла;

	// записываем движения по регистрам
	Для Каждого НаборЗаписей Из Движения Цикл
		НаборЗаписей.Записать();
	КонецЦикла;

	////////////////////////////////////////////////////////////////////////
	// Удалим записи перерасчета по которым выполнен перерасчет
	ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка);
	
КонецПроцедуры // Перерассчитать()

// Заполняет документ для отобранного пользователем списка работников
//
// Параметры:
//	Запрос - запрос, полученный из настроенного пользователем построителя отчета
//							в обработке ФормированиеСпискаРаботников
//	Реквизиты - структура данных для заполнения, соответствующих реквизитам 
//							 т.ч.документа, пришедшая из обработки ФормированиеСпискаРаботников
//
Процедура Автозаполнение(Запрос = Неопределено, Реквизиты = Неопределено) Экспорт
	
	Если Запрос = Неопределено Или Реквизиты = Неопределено Тогда // не передали необходимых для заполнения данных
		Возврат
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// создаем временную таблицу ВТСписокРаботников с сотрудниками, отобранными по критериям пользователя 
	// 
	// Поля:
	//   Сотрудник
	//   Физлицо
	//   ФИО
	//   ПодразделениеОрганизации
	//   ГрафикРаботы
	//
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("РегламентВалюта", 	Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ДатаВалютногоУчета",	ПериодРегистрации);
	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Год",				Год(Реквизиты.ДатаВыхода));
	Запрос.УстановитьПараметр("ТекущийМесяц",		НачалоМесяца(Реквизиты.ДатаВыхода));
	Запрос.УстановитьПараметр("ДатаВыхода",			Реквизиты.ДатаВыхода);
	Запрос.УстановитьПараметр("ЧасовПолуторных",	Реквизиты.ЧасовПолуторных);
	Запрос.УстановитьПараметр("ЧасовДвойных",		Реквизиты.ЧасовДвойных);
	Запрос.УстановитьПараметр("ВсегоЧасов",			Реквизиты.ЧасовДвойных);
	Запрос.УстановитьПараметр("СреднеМесячноеКоличесвтоЧасов",	Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаЧасов);

	
	// НормаВремениПоСводнымИндивидуальнымГрафикам
	//		Сотрудники, для которых введены сводные данные об их графике
	// 
	//	Поля:
	//		Сотрудник
	//		ЧасовЗаМесяц - указанное пользователем значение
	// 
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокРаботников.Сотрудник КАК Сотрудник,
	|	СводныеИндивидуальныеГрафики.Часов КАК ЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТНормаВремениПоСводнымИндивидуальнымГрафикам
	|ИЗ
	|	ВТСписокРаботников КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО СписокРаботников.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И (СводныеИндивидуальныеГрафики.Месяц = &ТекущийМесяц)
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();
	
	// НормаВремениПоЕжедневнымИндивидуальнымГрафикам
	//		Таблица сотрудников и нормы времени в часах, введенной индивидуальными графиками
	// 
	//	Поля:
	//		Сотрудник,
	//		ЧасовЗаМесяц - суммируем все часы рабочего времени
	// 
	// Описание:
	//
	//	выбираем данные из рег-ра ГрафикиРаботыПоВидамВремени,	
	//	введенные доками ВводИндивидуальныхГрафиков, т.е. по строкам с выставленным флажком План
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокРаботников.Сотрудник КАК Сотрудник,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК ЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам
	|ИЗ
	|	ВТСписокРаботников КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СписокРаботников.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = &ТекущийМесяц)
	|			И (ГрафикиРаботыПоВидамВремени.План)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокРаботников.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();
	
	// НормаВремениПоОбщимГрафикам
	//		Таблица сотрудников и нормы времени в часах по общим графикам
	// 
	//	Поля:
	//		Сотрудник,
	//		ЧасовЗаМесяц - суммируем все часы рабочего времени
	// 
	// Описание:
	//
	//	выбираем данные из рег-ра ГрафикиРаботыПоВидамВремени для общих графиков
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокРаботников.Сотрудник КАК Сотрудник,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК ЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТНормаВремениПоОбщимГрафикам
	|ИЗ
	|	ВТСписокРаботников КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО (ВЫБОР
	|				КОГДА СписокРаботников.ГрафикРаботы.СокращенноеРабочееВремя
	|						И СписокРаботников.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|					ТОГДА СписокРаботников.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|				ИНАЧЕ СписокРаботников.ГрафикРаботы
	|			КОНЕЦ = ГрафикиРаботыПоВидамВремени.ГрафикРаботы)
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = &ТекущийМесяц)
	|			И (ГрафикиРаботыПоВидамВремени.План)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокРаботников.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();
	
	//Основной текст запроса
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РаботникиИНачисления.Сотрудник,
	|	РаботникиИНачисления.Физлицо КАК Физлицо,
	|	РаботникиИНачисления.ПодразделениеОрганизации,
	|	&ДатаВыхода КАК ДатаВыхода,
	//|	&ЧасовПолуторных КАК ЧасовПолуторных,
	|	&ЧасовДвойных КАК ЧасовДвойных,
	|	РазмерыПараметровДляРасчетаРБ.Размер,
	|	РаботникиИНачисления.ОкладТариф,
	|	ВЫБОР
	|		КОГДА РаботникиИНачисления.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке))
	|			ТОГДА РаботникиИНачисления.ОкладТариф
	|		КОГДА РаботникиИНачисления.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням))
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую, ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)) = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)
	|							 ТОГДА РаботникиИНачисления.ОкладТариф / ЕСТЬNULL(РазмерыПараметровДляРасчетаРБ.Размер,1)
	|						КОГДА ВЫБОР
	|								КОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(НормаВремениПоОбщимГрафикам.ЧасовЗаМесяц, 0)
	|							КОНЕЦ = 0
	|							ТОГДА 0
	|						ИНАЧЕ РаботникиИНачисления.ОкладТариф / ВЫБОР
	|								КОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(НормаВремениПоОбщимГрафикам.ЧасовЗаМесяц, 0)
	|							КОНЕЦ
	|					КОНЕЦ КАК ЧИСЛО(15, 4))
	|		КОГДА РаботникиИНачисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиИНачисления.ДлительностьРабочейНедели = 0
	|						ТОГДА 0
	|					ИНАЧЕ РаботникиИНачисления.ОкладТариф / РаботникиИНачисления.ДлительностьРабочейНедели * ВЫБОР
	|							КОГДА РаботникиИНачисления.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Шестидневка)
	|								ТОГДА 6
	|							ИНАЧЕ 5
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Размер
	|ПОМЕСТИТЬ ВТСотрудникиРазмерыНачислений
	|ИЗ
	|	(ВЫБРАТЬ
	|		СписокРаботников.Сотрудник КАК Сотрудник,
	|		СписокРаботников.Физлицо КАК Физлицо,
	|		СписокРаботников.Подразделение КАК ПодразделениеОрганизации,
	|		ВЫБОР
	|			КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаВыхода
	|					И ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВЫБОР
	|						КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|							ТОГДА РазмерТарифныхСтавокСрезПоследних.Размер
	|						ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Показатель1Завершения
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.ТребуетВводаТарифногоРазряда
	|						ТОГДА РазмерТарифныхСтавокСрезПоследних.Размер
	|					ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Показатель1
	|				КОНЕЦ
	|		КОНЕЦ * ВЫБОР
	|			КОГДА ВЫБОР
	|					КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаВыхода
	|							И ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА ВЫБОР
	|								КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|									ТОГДА РазмерТарифныхСтавокСрезПоследних.Валюта
	|								ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Валюта1Завершения
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.ТребуетВводаТарифногоРазряда
	|								ТОГДА РазмерТарифныхСтавокСрезПоследних.Валюта
	|							ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Валюта1
	|						КОНЕЦ
	|				КОНЕЦ В (&РегламентВалюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|				ТОГДА 1
	|			ИНАЧЕ ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
	|		КОНЕЦ КАК ОкладТариф,
	|		ЕСТЬNULL(ВЫБОР
	|				КОГДА СписокРаботников.ГрафикРаботы.СокращенноеРабочееВремя
	|						И СписокРаботников.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|					ТОГДА СписокРаботников.ГрафикРаботы.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
	|				ИНАЧЕ СписокРаботников.ГрафикРаботы.ДлительностьРабочейНедели
	|			КОНЕЦ, 0) КАК ДлительностьРабочейНедели,
	|		СписокРаботников.ГрафикРаботы.ВидГрафика КАК ВидГрафика,
	|		ВЫБОР
	|			КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаВыхода
	|					И ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчетаЗавершения.СпособРасчета
	|			ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.СпособРасчета
	|		КОНЕЦ КАК СпособРасчета
	|	ИЗ
	|		ВТСписокРаботников КАК СписокРаботников
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|					&ДатаВыхода,
	|					Сотрудник В
	|						(ВЫБРАТЬ
	|							СписокРаботников.Сотрудник
	|						ИЗ
	|							ВТСписокРаботников КАК СписокРаботников)) КАК ПлановыеНачисленияРаботниковОрганизацийСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ДатаВыхода, ) КАК РазмерТарифныхСтавокСрезПоследних
	|				ПО (ВЫБОР
	|						КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаВыхода
	|								И ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ТарифныйРазряд1Завершения
	|						ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ТарифныйРазряд1
	|					КОНЕЦ = РазмерТарифныхСтавокСрезПоследних.ТарифныйРазряд)
	|			ПО СписокРаботников.Сотрудник = ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Сотрудник
	|				И (ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчетаИзмерение.Ссылка ЕСТЬ NULL )
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|			ПО (Валюты.Период = &ДатаВалютногоУчета)
	|				И (Валюты.Валюта = ВЫБОР
	|					КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаВыхода
	|							И ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА ВЫБОР
	|								КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|									ТОГДА РазмерТарифныхСтавокСрезПоследних.Валюта
	|								ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Валюта1Завершения
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.ТребуетВводаТарифногоРазряда
	|								ТОГДА РазмерТарифныхСтавокСрезПоследних.Валюта
	|							ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Валюта1
	|						КОНЕЦ
	|				КОНЕЦ)) КАК РаботникиИНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоСводнымИндивидуальнымГрафикам КАК НормаВремениПоСводнымИндивидуальнымГрафикам
	|		ПО РаботникиИНачисления.Сотрудник = НормаВремениПоСводнымИндивидуальнымГрафикам.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам КАК НормаВремениПоЕжедневнымИндивидуальнымГрафикам
	|		ПО РаботникиИНачисления.Сотрудник = НормаВремениПоЕжедневнымИндивидуальнымГрафикам.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоОбщимГрафикам КАК НормаВремениПоОбщимГрафикам
	|		ПО РаботникиИНачисления.Сотрудник = НормаВремениПоОбщимГрафикам.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ВЫБОР
	|					КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЧислоРабочихДней,
	|			СУММА(ВЫБОР
	|					КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЧислоПредпраздничныхДней
	|		ИЗ
	|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ГДЕ
	|			РегламентированныйПроизводственныйКалендарь.Год = &Год) КАК ДанныеПроизводственногоКалендаря
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты КАК ВариантыВстроенныхАлгоритмовРасчетаЗарплаты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ.СрезПоследних(&ДатаАктуальности,ВидПараметра = &СреднеМесячноеКоличесвтоЧасов)  КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (ИСТИНА)";
	Запрос.Выполнить();

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	СписокРаботников.ФИО КАК ФИО,
	|	СписокРаботников.Сотрудник,
	|	СписокРаботников.Физлицо,
	|	СписокРаботников.ПодразделениеОрганизации,
	|	СписокРаботников.ДатаВыхода КАК ДатаВыхода,
	|	СписокРаботников.ЧасовДвойных КАК ЧасовДвойных,
	|	СписокРаботников.Размер КАК Размер,
	|	ВЫРАЗИТЬ(СписокРаботников.ЧасовДвойных * СписокРаботников.Размер КАК ЧИСЛО(15, 4))  КАК Результат,
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаСверхурочные) КАК ВидРасчета
	|ИЗ
	|	ВТСотрудникиРазмерыНачислений КАК СписокРаботников
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	СписокРаботников.ФИО,
	|	СписокРаботников.Сотрудник,
	|	СписокРаботников.Физлицо,
	|	СписокРаботников.ПодразделениеОрганизации,
	|	СписокРаботников.ДатаВыхода,
	|	СписокРаботников.ЧасовДвойных,
	|	СписокРаботников.Размер,
	|	ВЫРАЗИТЬ(СписокРаботников.ЧасовДвойных * СписокРаботников.Размер КАК ЧИСЛО(15, 4)),
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаСверхурочных)
	|ИЗ
	|	ВТСотрудникиРазмерыНачислений КАК СписокРаботников
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ВидРасчета";
	
	Начисления.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // Автозаполнение()

// Заполняет документ по перерассчитываемому документу
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт

	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных

	ПериодПерерассчитываемогоДокумента = ИсходныйДокумент.ПериодРегистрации;
	Выборка = СформироватьЗапросДляПерерасчета(ПерерассчитываемыйДокумент, ПериодПерерассчитываемогоДокумента, Сотрудники).Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// сторно-строка
		НоваяСтрока = Начисления.Добавить();
		НоваяСтрока.Сотрудник					= Выборка.Сотрудник;
		НоваяСтрока.Физлицо						= Выборка.Физлицо;
		НоваяСтрока.ПодразделениеОрганизации	= Выборка.ПодразделениеОрганизации;
		НоваяСтрока.ВидРасчета                  = Выборка.ВидРасчета;
		НоваяСтрока.ДатаВыхода					= Выборка.ДатаВыхода;
		НоваяСтрока.Размер						= Выборка.Размер;
		НоваяСтрока.ЧасовПолуторных				= - Выборка.ЧасовПолуторных;
		НоваяСтрока.ЧасовДвойных				= - Выборка.ЧасовДвойных;
		НоваяСтрока.Результат					= - Выборка.Результат;
		НоваяСтрока.Сторно						= Истина;
		
		// новая рассчитываемая строка
		НоваяСтрока = Начисления.Добавить();
		НоваяСтрока.Сотрудник					= Выборка.Сотрудник;
		НоваяСтрока.Физлицо						= Выборка.Физлицо;
		НоваяСтрока.ПодразделениеОрганизации	= Выборка.НовоеПодразделениеОрганизации;
		НоваяСтрока.ВидРасчета                  = Выборка.ВидРасчета;
		НоваяСтрока.ДатаВыхода					= Выборка.ДатаВыхода;
		НоваяСтрока.Размер						= ОбщегоНазначения.ОкруглитьПоВалюте(Выборка.НоваяТарифнаяСтавка,Константы.ВалютаРегламентированногоУчета.Получить());
		НоваяСтрока.ЧасовПолуторных				= Выборка.ЧасовПолуторных;
		НоваяСтрока.ЧасовДвойных				= Выборка.ЧасовДвойных;
		НоваяСтрока.Результат					= ОбщегоНазначения.ОкруглитьПоВалюте(Выборка.ЧасовДвойных * 2 * Выборка.НоваяТарифнаяСтавка ,Константы.ВалютаРегламентированногоУчета.Получить());		
	КонецЦикла;
	
КонецПроцедуры  // ЗаполнитьПоПерерассчитываемомуДокументу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует запрос для заполнения ТЧ документа по данным перерасчетов
Функция СформироватьЗапросДляПерерасчета(ДокументСсылка, ПериодРегистрацииДокумента, Сотрудники = Неопределено, ПоЗаписямПерерасчета = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДокументСсылка",			ДокументСсылка);
	Запрос.УстановитьПараметр("РегламентВалюта",		Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ДатаВалютногоУчета",		ПериодРегистрацииДокумента);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Сотрудники",			Сотрудники);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам",	Ложь);
	Запрос.УстановитьПараметр("СреднеМесячноеКоличесвтоЧасов",	Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаЧасов);
	
	Если ЗначениеЗаполнено(Сотрудники) Тогда // этих сотрудников попросил исправить пользователь
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка В(&Сотрудники)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";	
	ИначеЕсли ПоЗаписямПерерасчета Тогда //  список физлиц для перерасчета получим из таблицы перерасчетов
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Сотрудник КАК Ссылка
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Документ.ОплатаСверхурочныхЧасов.Начисления КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &ДокументСсылка
		|	И СотрудникиОрганизаций.Физлицо В
		|			(ВЫБРАТЬ
		|				Перерасчет.ФизЛицо
		|			ИЗ
		|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|			ГДЕ
		|				Перерасчет.ОбъектПерерасчета = &ДокументСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	Иначе 
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Ссылка
		|ПОМЕСТИТЬ ВТСотрудники";
		Запрос.УстановитьПараметр("ПоВсемСотрудникам",	Истина);
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.НомерСтроки,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Сотрудник.Физлицо КАК Физлицо,
	|	Начисления.ПодразделениеОрганизации,
	|	Начисления.ДатаВыхода,
	|	НАЧАЛОПЕРИОДА(Начисления.ДатаВыхода, МЕСЯЦ) КАК ТекущийМесяц,
	|	Начисления.Размер,
	|	Начисления.ВидРасчета,
	|	Начисления.ЧасовПолуторных,
	|	Начисления.ЧасовДвойных,
	|	Начисления.Результат
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	Документ.ОплатаСверхурочныхЧасов.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ДокументСсылка
	|	И (НЕ Начисления.Сторно)
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Начисления.Сотрудник В
	|				(ВЫБРАТЬ
	|					Сотрудники.Ссылка
	|				ИЗ
	|					ВТСотрудники КАК Сотрудники))
	|	И Начисления.Ссылка.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();
	
	// НормаВремениПоСводнымИндивидуальнымГрафикам
	//		Таблица строк документа и нормы времени в часах, введенной сводными индивидуальными графиками
	// 
	//	Поля:
	//		НомерСтроки,
	//		ЧасовЗаМесяц - суммируем все часы рабочего времени
	// 
	// Описание:
	//
	//	выбираем данные из рег-ра СводныеИндивидуальныеГрафики, соответствующие дате из строки документа	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТНачисления.Сотрудник КАК Сотрудник,
	|	ВТНачисления.ТекущийМесяц
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТНачисления КАК ВТНачисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";

		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокРаботников.НомерСтроки КАК НомерСтроки,
	|	СводныеИндивидуальныеГрафики.Часов КАК ЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТНормаВремениПоСводнымИндивидуальнымГрафикам
	|ИЗ
	|	ВТНачисления КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО СписокРаботников.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И СписокРаботников.ТекущийМесяц = СводныеИндивидуальныеГрафики.Месяц
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	// НормаВремениПоЕжедневнымИндивидуальнымГрафикам
	//		Таблица строк документа и нормы времени в часах, введенной индивидуальными графиками
	// 
	//	Поля:
	//		НомерСтроки,
	//		ЧасовЗаМесяц - суммируем все часы рабочего времени
	// 
	// Описание:
	//
	//	выбираем данные из рег-ра ГрафикиРаботыПоВидамВремени,	
	//	введенные доками ВводИндивидуальныхГрафиков, т.е. по строкам с выставленным флажком План
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокРаботников.НомерСтроки КАК НомерСтроки,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК ЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам
	|ИЗ
	|	ВТНачисления КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СписокРаботников.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И СписокРаботников.ТекущийМесяц = ГрафикиРаботыПоВидамВремени.Месяц
	|			И (ГрафикиРаботыПоВидамВремени.План)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокРаботников.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	// РаботникиИНачисления
	//		Таблица строк документа с добавленными сведениями о работниках и их начислениях
	// 
	//	Поля:
	//		НомерСтроки,
	//		Сотрудник 
	//		ДатаВыхода 
	//		ОкладТариф - размер основного начисления по состоянию на дату ДатаВыхода 
	//		СпособРасчета - способ расчета основного начисления по состоянию на дату ДатаВыхода 
	//		НовоеПодразделениеОрганизации - подразделение сотрудника по состоянию на дату ДатаВыхода 
	//		ГрафикРаботы - график сотрудника по состоянию на дату ДатаВыхода 
	//		ВидГрафика,
	//		ДлительностьРабочейНедели - реквизиты графика сотрудника по состоянию на дату ДатаВыхода 
	// 
	// Описание:
	//
	//	1. к каждой строке документа приписываем данные из "псевдосрезов" последних по регистрам	
	//	ПлановыеНачисленияРаботниковОрганизаций и РаботникиОрганизаций
	//  2. для определения размер основного начисления по состоянию на дату ДатаВыхода дополнительно
	//  пользуемся "псевдосрезом" последних по регистру РазмерТарифныхСтавок и курсами валют
	//
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.ДатаВыхода,
	|	Начисления.ТекущийМесяц,
	|	ВЫБОР
	|		КОГДА ОсновноеНачисление.ПериодЗавершения <= Начисления.ДатаВыхода
	|				И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|						ТОГДА РазмерТарифныхСтавок.Размер
	|					ИНАЧЕ ОсновноеНачисление.Показатель1Завершения
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА РазмерТарифныхСтавок.Размер
	|				ИНАЧЕ ОсновноеНачисление.Показатель1
	|			КОНЕЦ
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ОсновноеНачисление.ПериодЗавершения <= Начисления.ДатаВыхода
	|						И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ВЫБОР
	|							КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|								ТОГДА РазмерТарифныхСтавок.Валюта
	|							ИНАЧЕ ОсновноеНачисление.Валюта1Завершения
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|							ТОГДА РазмерТарифныхСтавок.Валюта
	|						ИНАЧЕ ОсновноеНачисление.Валюта1
	|					КОНЕЦ
	|			КОНЕЦ В (&РегламентВалюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
	|	КОНЕЦ КАК ОкладТариф,
	|	ВЫБОР
	|		КОГДА ОсновноеНачисление.ПериодЗавершения <= Начисления.ДатаВыхода
	|				И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ОсновноеНачисление.ВидРасчетаЗавершения.СпособРасчета
	|		ИНАЧЕ ОсновноеНачисление.ВидРасчета.СпособРасчета
	|	КОНЕЦ КАК СпособРасчета,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= Начисления.ДатаВыхода
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
	|	КОНЕЦ КАК НовоеПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= Начисления.ДатаВыхода
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.СокращенноеРабочееВремя
	|							И РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|					ИНАЧЕ РаботникиОрганизации.ГрафикРаботыЗавершения
	|				КОНЕЦ
	|		КОГДА РаботникиОрганизации.ГрафикРаботы.СокращенноеРабочееВремя
	|				И РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= Начисления.ДатаВыхода
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.СокращенноеРабочееВремя
	|							И РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
	|					ИНАЧЕ РаботникиОрганизации.ГрафикРаботыЗавершения.ДлительностьРабочейНедели
	|				КОНЕЦ
	|		КОГДА РаботникиОрганизации.ГрафикРаботы.СокращенноеРабочееВремя
	|				И РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.ДлительностьРабочейНедели
	|	КОНЕЦ КАК ДлительностьРабочейНедели,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= Начисления.ДатаВыхода
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.ВидГрафика
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.ВидГрафика
	|	КОНЕЦ КАК ВидГрафика
	|ПОМЕСТИТЬ ВТРаботникиИНачисления
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Начисления.НомерСтроки КАК НомерСтроки,
	|			Начисления.Сотрудник КАК Сотрудник,
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК Период
	|		ИЗ
	|			ВТНачисления КАК Начисления
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО Начисления.ДатаВыхода >= РаботникиОрганизации.Период
	|					И Начисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Начисления.НомерСтроки,
	|			Начисления.Сотрудник) КАК ДатыПоследнихНазначений
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ПО ДатыПоследнихНазначений.Период = РаботникиОрганизации.Период
	|				И ДатыПоследнихНазначений.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ПО Начисления.НомерСтроки = ДатыПоследнихНазначений.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Начисления.НомерСтроки КАК НомерСтроки,
	|			Начисления.Сотрудник КАК Сотрудник,
	|			МАКСИМУМ(ПлановыеНачисления.Период) КАК Период
	|		ИЗ
	|			ВТНачисления КАК Начисления
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
	|				ПО Начисления.Сотрудник = ПлановыеНачисления.Сотрудник
	|					И Начисления.ДатаВыхода >= ПлановыеНачисления.Период
	|					И (ПлановыеНачисления.ВидРасчетаИзмерение.Ссылка ЕСТЬ NULL )
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Начисления.НомерСтроки,
	|			Начисления.Сотрудник) КАК ДатыПоследнихПлановыхНачислений
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ОсновноеНачисление
	|			ПО ДатыПоследнихПлановыхНачислений.Сотрудник = ОсновноеНачисление.Сотрудник
	|				И ДатыПоследнихПлановыхНачислений.Период = ОсновноеНачисление.Период
	|				И (ОсновноеНачисление.ВидРасчетаИзмерение.Ссылка ЕСТЬ NULL )
	|		ПО Начисления.НомерСтроки = ДатыПоследнихПлановыхНачислений.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Начисления.НомерСтроки КАК НомерСтроки,
	|			РазмерТарифныхСтавок.ТарифныйРазряд КАК ТарифныйРазряд,
	|			МАКСИМУМ(РазмерТарифныхСтавок.Период) КАК ПериодРазряда
	|		ИЗ
	|			ВТНачисления КАК Начисления
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
	|				ПО Начисления.ДатаВыхода >= РазмерТарифныхСтавок.Период
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РазмерТарифныхСтавок.ТарифныйРазряд,
	|			Начисления.НомерСтроки) КАК ДатыТарифныхРазрядов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
	|			ПО ДатыТарифныхРазрядов.ПериодРазряда = РазмерТарифныхСтавок.Период
	|				И ДатыТарифныхРазрядов.ТарифныйРазряд = РазмерТарифныхСтавок.ТарифныйРазряд
	|		ПО Начисления.НомерСтроки = ДатыТарифныхРазрядов.НомерСтроки
	|			И (ВЫБОР
	|				КОГДА ОсновноеНачисление.ПериодЗавершения <= Начисления.ДатаВыхода
	|						И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ВЫБОР
	|							КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|								ТОГДА ОсновноеНачисление.ТарифныйРазряд1
	|							ИНАЧЕ NULL
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|							ТОГДА ОсновноеНачисление.ТарифныйРазряд1
	|						ИНАЧЕ NULL
	|					КОНЕЦ
	|			КОНЕЦ = ДатыТарифныхРазрядов.ТарифныйРазряд)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|		ПО (Валюты.Валюта = ВЫБОР
	|				КОГДА ОсновноеНачисление.ПериодЗавершения <= Начисления.ДатаВыхода
	|						И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ВЫБОР
	|							КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|								ТОГДА РазмерТарифныхСтавок.Валюта
	|							ИНАЧЕ ОсновноеНачисление.Валюта1Завершения
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|							ТОГДА РазмерТарифныхСтавок.Валюта
	|						ИНАЧЕ ОсновноеНачисление.Валюта1
	|					КОНЕЦ
	|			КОНЕЦ)
	|			И (Валюты.Период = &ДатаВалютногоУчета)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	// НормаВремениПоОбщимГрафикам
	//		Таблица строк документа и нормы времени в часах по общим графикам
	// 
	//	Поля:
	//		Сотрудник,
	//		ЧасовЗаМесяц - суммируем все часы рабочего времени
	// 
	// Описание:
	//
	//	выбираем данные из рег-ра ГрафикиРаботыПоВидамВремени для общих графиков
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокРаботников.НомерСтроки КАК НомерСтроки,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК ЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТНормаВремениПоОбщимГрафикам
	|ИЗ
	|	ВТРаботникиИНачисления КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СписокРаботников.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И СписокРаботников.ТекущийМесяц = ГрафикиРаботыПоВидамВремени.Месяц
	|			И (ГрафикиРаботыПоВидамВремени.План)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокРаботников.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	// основной запрос - по собранным данным рассчитываем часовую тарифную ставку в зависимости 
	// от порядка расчета основного начисления и от используемого пользователями алгоритма пересчета оклада: 
	// либо по общероссийскому производственному календарю (с использованием 
	// среднемесячного количества часов и длительности рабочей недели графика), либо по графику работника
	// данные по рабочим и предпраздничным дням выбираются из РегистрСведений.РегламентированныйПроизводственныйКалендарь	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.НомерСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.Физлицо,
	|	Начисления.ВидРасчета,
    |	Начисления.ДатаВыхода,
	|	Начисления.Размер,
	|	Начисления.Результат,
	|	Начисления.ПодразделениеОрганизации,
	|	Начисления.ЧасовПолуторных,
	|	Начисления.ЧасовДвойных,
	|	РаботникиИНачисления.НовоеПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиИНачисления.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
	|			ТОГДА РаботникиИНачисления.ОкладТариф
	|		КОГДА РаботникиИНачисления.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням))
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую, ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)) = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)
	|							ТОГДА РаботникиИНачисления.ОкладТариф /ЕСТЬNULL(РазмерыПараметровДляРасчетаРБ.Размер,1)
	|						КОГДА ВЫБОР
	|								КОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.НомерСтроки ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.НомерСтроки ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(НормаВремениПоОбщимГрафикам.ЧасовЗаМесяц, 0)
	|							КОНЕЦ = 0
	|							ТОГДА 0
	|						ИНАЧЕ РаботникиИНачисления.ОкладТариф / ВЫБОР
	|								КОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.НомерСтроки ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.НомерСтроки ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(НормаВремениПоОбщимГрафикам.ЧасовЗаМесяц, 0)
	|							КОНЕЦ
	|					КОНЕЦ КАК ЧИСЛО(15, 3))
	|		КОГДА РаботникиИНачисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА РаботникиИНачисления.ДлительностьРабочейНедели = 0
	|							ТОГДА 0
	|						ИНАЧЕ РаботникиИНачисления.ОкладТариф / РаботникиИНачисления.ДлительностьРабочейНедели * ВЫБОР
	|								КОГДА РаботникиИНачисления.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Шестидневка)
	|									ТОГДА 6
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					КОНЕЦ КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НоваяТарифнаяСтавка
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботникиИНачисления КАК РаботникиИНачисления
	|		ПО Начисления.НомерСтроки = РаботникиИНачисления.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоСводнымИндивидуальнымГрафикам КАК НормаВремениПоСводнымИндивидуальнымГрафикам
	|		ПО Начисления.НомерСтроки = НормаВремениПоСводнымИндивидуальнымГрафикам.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам КАК НормаВремениПоЕжедневнымИндивидуальнымГрафикам
	|		ПО Начисления.НомерСтроки = НормаВремениПоЕжедневнымИндивидуальнымГрафикам.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоОбщимГрафикам КАК НормаВремениПоОбщимГрафикам
	|		ПО Начисления.НомерСтроки = НормаВремениПоОбщимГрафикам.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ГодаОплаты.ГодВыхода КАК ГодВыхода,
	|			СУММА(ВЫБОР
	|					КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЧислоРабочихДней,
	|			СУММА(ВЫБОР
	|					КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЧислоПредпраздничныхДней
	|		ИЗ
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ГОД(ОплатаПраздничных.ДатаВыхода) КАК ГодВыхода
	|			ИЗ
	|				ВТНачисления КАК ОплатаПраздничных) КАК ГодаОплаты
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|				ПО (ГодаОплаты.ГодВыхода = ГОД(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ГодаОплаты.ГодВыхода) КАК ДанныеПроизводственногоКалендаря
	|		ПО (ГОД(Начисления.ДатаВыхода) = ДанныеПроизводственногоКалендаря.ГодВыхода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты КАК ВариантыВстроенныхАлгоритмовРасчетаЗарплаты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ.СрезПоследних(&ДатаВалютногоУчета,ВидПараметра = &СреднеМесячноеКоличесвтоЧасов)  КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (ИСТИНА)";
	
	Возврат Запрос.Выполнить();
	
КонецФункции  // СформироватьЗапросДляПерерасчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОплатаСверхурочныхЧасов.Дата,
	|	ОплатаСверхурочныхЧасов.Организация,
	|	ВЫБОР
	|		КОГДА ОплатаСверхурочныхЧасов.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА ОплатаСверхурочныхЧасов.Организация
	|		ИНАЧЕ ОплатаСверхурочныхЧасов.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ОплатаСверхурочныхЧасов.Организация КАК ОбособленноеПодразделение,
	|	ОплатаСверхурочныхЧасов.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	ОплатаСверхурочныхЧасов.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	ОплатаСверхурочныхЧасов.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ОплатаСверхурочныхЧасов.ПериодРегистрации,
	|	ОплатаСверхурочныхЧасов.Ответственный,
	|	ОплатаСверхурочныхЧасов.Ссылка
	|ИЗ
	|	Документ.ОплатаСверхурочныхЧасов КАК ОплатаСверхурочныхЧасов
	|ГДЕ
	|	ОплатаСверхурочныхЧасов.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//	Режим		- режим проведения.
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	СписокСтруктурныхПодразделений = ПроцедурыУправленияПерсоналом.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",	СписокСтруктурныхПодразделений);
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",					Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата",						'00010101');
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",			ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организация",					Организация);

	//Запрос.УстановитьПараметр("ВидРасчета",						ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаСверхурочных);
	КодОплатыТрудаПоНДФЛ = Новый Массив;
	КодОплатыТрудаПоНДФЛ.Добавить(Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию);
	//КодОплатыТрудаПоНДФЛ.Добавить(Справочники.ДоходыНДФЛ.Код2012);
	Запрос.УстановитьПараметр("КодОплатыТрудаПоНДФЛ", КодОплатыТрудаПоНДФЛ);
	
	// Описание текста запроса:
	// 1. Выборка "ТЧНачисления":
	//		Выбираются строки документа.
	// 2. Выборка "ПересекающиесяСтроки":
	//		Среди остальных строк документа ищем строки, имеющие пересекающийся период действия
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.Сотрудник.Наименование,
	|	ТЧНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧНачисления.ДатаВыхода КАК ДатаВыхода,
	|	ЕСТЬNULL(ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени, 0) КАК ЗачетОтработанногоВремени,
	|	ТЧНачисления.Сторно КАК Сторно,
	|	ТЧНачисления.ЧасовДвойных КАК ОтработаноЧасов,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ТЧНачисления.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.КодДоходаНДФЛ В (&КодОплатыТрудаПоНДФЛ)
	|			ТОГДА ТЧНачисления.ДатаВыхода
	|		ИНАЧЕ ТЧНачисления.Ссылка.ПериодРегистрации
	|	КОНЕЦ КАК МесяцНалоговогоПериода,
	|	ТЧНачисления.Размер,
	|	ТЧНачисления.Результат,
	|	ТЧНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА (НЕ ТЧНачисления.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ДатыПоследнихДвиженийРаботников.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ВЫБОР
	|		КОГДА ГрафикРаботыПоСотруднику.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧНачисления.ДатаВыхода
	|							И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> &ПустаяДата
	|						ТОГДА ДанныеПоРаботникуДоНазначения.ГрафикРаботыЗавершения
	|					ИНАЧЕ ДанныеПоРаботникуДоНазначения.ГрафикРаботы
	|				КОНЕЦ
	|		ИНАЧЕ ТЧНачисления.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧНачисления.ДатаВыхода
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> &ПустаяДата
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок
	|	КОНЕЦ КАК ЗанимаемыхСтавок,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|ИЗ
	|	Документ.ОплатаСверхурочныхЧасов.Начисления КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК Период
	|		ИЗ
	|			Документ.ОплатаСверхурочныхЧасов.Начисления КАК ТЧНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО (РаботникиОрганизации.Период <= ТЧНачисления.ДатаВыхода)
	|					И ТЧНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ГДЕ
	|			ТЧНачисления.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧНачисления.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
	|			И ТЧНачисления.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧНачисления2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ОплатаСверхурочныхЧасов.Начисления КАК ТЧНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОплатаСверхурочныхЧасов.Начисления КАК ТЧНачисления2
	|				ПО (ТЧНачисления2.Ссылка = &ДокументСсылка)
	|					И ТЧНачисления.ВидРасчета = ТЧНачисления2.ВидРасчета
	|					И ТЧНачисления.НомерСтроки > ТЧНачисления2.НомерСтроки
	|					И ТЧНачисления.ДатаВыхода = ТЧНачисления2.ДатаВыхода
	|					И ТЧНачисления.Сотрудник = ТЧНачисления2.Сотрудник
	|		ГДЕ
	|			ТЧНачисления.Ссылка = &ДокументСсылка
	|			И (НЕ ТЧНачисления.Сторно)
	|			И (НЕ ТЧНачисления2.Сторно)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧНачисления.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			Документ.ОплатаСверхурочныхЧасов.Начисления КАК СтрокиНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|				ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = СтрокиНачисления.Сотрудник)
	|					И (ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаВыхода, МЕСЯЦ))
	|		ГДЕ
	|			СтрокиНачисления.Ссылка = &ДокументСсылка) КАК ГрафикРаботыПоСотруднику
	|		ПО ТЧНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период регистрации (месяц)!", Отказ, Заголовок);
	КонецЕсли;

	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса по товарам документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";

	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение организации!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаВыхода
	НетДатаВыхода = Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаВыхода);
	Если НетДатаВыхода Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата!", Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид оплаты!", Отказ, Заголовок);
	КонецЕсли;

	Если НетСотрудника ИЛИ НетДатаВыхода Тогда
		Возврат; // Дальше не проверяем
	КонецЕсли;
	
	
	// График работы
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан рабочий график!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка: ранее работник должен быть принят на работу
	Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = NULL Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаВыхода, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
		Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаВыхода, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
		Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		
	КонецЕсли;
	
	// Проверка: противоречие другой строке документа
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
		СтрокаСообщениеОбОшибке = "указана повторяющаяся строка (см. строку  № " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)
	
	Движение = Движения.ОсновныеНачисленияРаботниковОрганизаций.Добавить();
	
	// Свойства

	Движение.ПериодРегистрации			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ПериодДействияНачало		= ВыборкаПоСтрокамДокумента.ДатаВыхода;
	Движение.ПериодДействияКонец		= КонецДня(ВыборкаПоСтрокамДокумента.ДатаВыхода);
	Движение.ВидРасчета					= ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно						= ВыборкаПоСтрокамДокумента.Сторно;
	
	// Измерения
	Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.ФизЛицо					= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;
	
	// ресурсы по отработанному времени (только часы)
	Если ВыборкаПоСтрокамДокумента.ЗачетОтработанногоВремени тогда
		Движение.ОтработаноЧасов			= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
	КонецЕсли;	
	Движение.ОплаченоДнейЧасов			= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
	
	// Реквизиты
	Движение.Показатель1				= ВыборкаПоСтрокамДокумента.Размер;
	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.ГрафикРаботы				= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
	Движение.ВидУчетаВремени			= Перечисления.ВидыУчетаВремени.ПоЧасам;
	Движение.ДатаНачалаСобытия			= ВыборкаПоСтрокамДокумента.ДатаВыхода;
	
	Если ВыборкаПоСтрокамДокумента.Сторно Тогда
		Движение.СторнируемыйДокумент = ВыборкаПоШапкеДокумента.ПерерассчитываемыйДокумент;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//	ВыборкаПоШапкеДокумента						- выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, УчетЗадолженностиПоМесяцам)
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.КодДоходаНДФЛ) Тогда
		
		Движение = Движения.НДФЛСведенияОДоходах.Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоТЧ.МесяцНалоговогоПериода;
		
		
		// Измерения
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ФизЛицо					= ВыборкаПоТЧ.ФизЛицо;
		Движение.КодДохода					= ВыборкаПоТЧ.КодДоходаНДФЛ;
		Движение.ПериодРегистрации			= НачалоМесяца(ПериодРегистрации);
		
		// Ресурсы
		Движение.СуммаДохода				= ВыборкаПоТЧ.Результат; 
		
		// Реквизиты
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.ИсчисленоИзЗарплаты		= Истина;
		Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации; 
		Движение.ВидРасчета = ВыборкаПоТЧ.ВидРасчета;
	КонецЕсли;
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
	
	// Свойства
	Движение.Период					= КонецМесяца(ПериодРегистрации);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	
	// Измерения
	Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
	Движение.ФизЛицо				= ВыборкаПоТЧ.ФизЛицо;
	//vvv комментируем
	//Если УчетЗадолженностиПоМесяцам Тогда
		Движение.ПериодВзаиморасчетов	= ПериодРегистрации;
	//КонецЕсли;
	
	// Ресурсы
	Движение.СуммаВзаиморасчетов	= ВыборкаПоТЧ.Результат;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	ПерерассчитываемыйДокумент = Неопределено
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// Получение учетной политики по персоналу организации
			УчетЗадолженностиПоМесяцам = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
		
			Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
			
			// получим реквизиты табличной части
			РезультатЗапросаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента);
			ВыборкаПоНачислениям = РезультатЗапросаПоНачислениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоНачислениям.Следующий() Цикл

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетЗадолженностиПоМесяцам);
						
				КонецЕсли;

			КонецЦикла;
			
			// выполним удаление перерасчетов исправленного документа
			Если Не Отказ И ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
				ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка, Истина); // Только по исправленным документам
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
    Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Начисления);
	
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
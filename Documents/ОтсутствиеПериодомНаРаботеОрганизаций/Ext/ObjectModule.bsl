////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтсутствиеНаРаботеОрганизаций.Дата,
	|	ОтсутствиеНаРаботеОрганизаций.Организация,
	|	ВЫБОР КОГДА ОтсутствиеНаРаботеОрганизаций.Организация.ГоловнаяОрганизация = &ПустаяОрганизация ТОГДА ОтсутствиеНаРаботеОрганизаций.Организация ИНАЧЕ ОтсутствиеНаРаботеОрганизаций.Организация.ГоловнаяОрганизация КОНЕЦ КАК ГоловнаяОрганизация,
	|	ОтсутствиеНаРаботеОрганизаций.Ссылка
	|ИЗ
	|	Документ.ОтсутствиеПериодомНаРаботеОрганизаций КАК ОтсутствиеНаРаботеОрганизаций
	|
	|ГДЕ
	|	ОтсутствиеНаРаботеОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры:
//	Режим	- режим проведения
//
// Возвращаемое значение:
//	Результат запроса. В запросе данные документа дополняются значениями
//	проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	//vvv
	Запрос.УстановитьПараметр("Организация", ВыборкаПоШапкеДокумента.Организация);
	//
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПустаяДата",	'00010101');
	

	// Описание текста запроса:
	// 1. Выборка "СтрокиДокумента": 
	//	Во вложенном запросе выбираются строки документа, к ним добавляется 
	//	дата предшествующего "дате начала" движения из рег-ра РаботникиОрганизации
	//
	// 2. Выборка "РаботникиОрганизации": 
	//	Для каждой строки документа выполняем срез по регистру РаботникиОрганизации на 
	//	дату ДатаНачала для выполнения движений по штатному расписаниюи и проверки, 
	//	работает ли работник на эту дату (использует данные выборки "СтрокиДокумента")
	//
	// 3. Выборка "ПересекающиесяСтроки": 
	//	Среди остальных строк документа ищем строки, имеющие ту же дату ДатаНачала
	//
	// 4. Выборка "ИмеющиесяСостояния": 
	//	В рег-ре СостояниеРаботниковОрганизации ищем движения на дату ДатаНачала
	//
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СтрокиДокумента.ДатаНачала >= РаботникиОрганизации.ПериодЗавершения
	|				И РаботникиОрганизации.ПериодЗавершения <> &ПустаяДата
	|			ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА СтрокиДокумента.ДатаНачала >= РаботникиОрганизации.ПериодЗавершения
	|				И РаботникиОрганизации.ПериодЗавершения <> &ПустаяДата
	|			ТОГДА РаботникиОрганизации.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизации.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА СтрокиДокумента.ДатаНачала >= РаботникиОрганизации.ПериодЗавершения
	|				И РаботникиОрганизации.ПериодЗавершения <> &ПустаяДата
	|			ТОГДА РаботникиОрганизации.ЗанимаемыхСтавокЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ЗанимаемыхСтавок
	|	КОНЕЦ КАК ЗанимаемыхСтавок,
	|	СтрокиДокумента.НомерСтроки,
	|	СтрокиДокумента.ДатаНачала,
	|	СтрокиДокумента.ДатаОкончания,
	|	СтрокиДокумента.ДатаРаботыВВыходной,
	|	СтрокиДокумента.Сотрудник,
	|	СтрокиДокумента.Сотрудник.Наименование,
	|	РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	СтрокиДокумента.ОсвобождатьСтавку,
	|	СтрокиДокумента.ПричинаОтсутствия,
	|	СтрокиДокумента.ВнутрисменныхЧасов,
	|	СтрокиДокумента.ПричинаНетрудоспособности,
	|	СтрокиДокумента.Ссылка,
	|	СтрокиДокумента.ДатаИзменения,
	//vvv
	//|	ВЫБОР
	//|		КОГДА СтрокиДокумента.Сотрудник.Организация = &ГоловнаяОрганизация
	//|			ТОГДА ЛОЖЬ
	//|		ИНАЧЕ ИСТИНА
	//|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение = &Организация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	//
	|	МИНИМУМ(ПересекающиесяСтроки.НомерСтроки) КАК КонфликтнаяСтрока,
	|	ИмеющиесяСостояния.Состояние КАК КонфликтноеСостояние,
	|	ИмеющиесяСостояния.Регистратор.Представление КАК КонфликтныйДокумент,
	|	РаботникиОрганизации.УсловияТрудаИзмерение,
	|	РаботникиОрганизации.ВидДеятельностиИзмерение
	|ИЗ
	|	(ВЫБРАТЬ
	|		Док.НомерСтроки КАК НомерСтроки,
	|		Док.ДатаНачала КАК ДатаНачала,
	|		Док.ДатаОкончания КАК ДатаОкончания,
	|		Док.ДатаРаботыВВыходной КАК ДатаРаботыВВыходной,
	|		Док.Сотрудник КАК Сотрудник,
	|		Док.ОсвобождатьСтавку КАК ОсвобождатьСтавку,
	|		Док.ПричинаОтсутствия КАК ПричинаОтсутствия,
	|		Док.ВнутрисменныхЧасов КАК ВнутрисменныхЧасов,
	|		Док.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
	|		Док.Ссылка КАК Ссылка,
	|		МАКСИМУМ(Работники.Период) КАК ДатаИзменения
	|	ИЗ
	|		Документ.ОтсутствиеПериодомНаРаботеОрганизаций.РаботникиОрганизации КАК Док
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|			ПО Док.ДатаНачала >= Работники.Период
	|				И Док.Сотрудник = Работники.Сотрудник
	|	ГДЕ
	|		Док.Ссылка = &ДокументСсылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Док.НомерСтроки,
	|		Док.ДатаНачала,
	|		Док.ДатаОкончания,
	|		Док.ДатаРаботыВВыходной,
	|		Док.ОсвобождатьСтавку,
	|		Док.ПричинаОтсутствия,
	|		Док.ВнутрисменныхЧасов,
	|		Док.ПричинаНетрудоспособности,
	|		Док.Ссылка,
	|		Док.Сотрудник) КАК СтрокиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО СтрокиДокумента.ДатаИзменения = РаботникиОрганизации.Период
	|			И СтрокиДокумента.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтсутствиеПериодомНаРаботеОрганизаций.РаботникиОрганизации КАК ПересекающиесяСтроки
	|		ПО СтрокиДокумента.Ссылка = ПересекающиесяСтроки.Ссылка
	|			И СтрокиДокумента.ДатаНачала = ПересекающиесяСтроки.ДатаНачала
	|			И СтрокиДокумента.НомерСтроки < ПересекающиесяСтроки.НомерСтроки
	|			И СтрокиДокумента.Сотрудник = ПересекающиесяСтроки.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК ИмеющиесяСостояния
	|		ПО СтрокиДокумента.ДатаНачала = ИмеющиесяСостояния.Период
	|			И СтрокиДокумента.Ссылка <> ИмеющиесяСостояния.Регистратор
	|			И СтрокиДокумента.Сотрудник = ИмеющиесяСостояния.Сотрудник
	//vvv
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(Работники.Период) КАК Период
	|		ИЗ
	|			Документ.ОтсутствиеПериодомНаРаботеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|				ПО (Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала)
	|					И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка			
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО СтрокиДокумента.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
	|			И СтрокиДокумента.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	//
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА СтрокиДокумента.ДатаНачала >= РаботникиОрганизации.ПериодЗавершения
	|				И РаботникиОрганизации.ПериодЗавершения <> &ПустаяДата
	|			ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СтрокиДокумента.ДатаНачала >= РаботникиОрганизации.ПериодЗавершения
	|				И РаботникиОрганизации.ПериодЗавершения <> &ПустаяДата
	|			ТОГДА РаботникиОрганизации.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизации.Должность
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СтрокиДокумента.ДатаНачала >= РаботникиОрганизации.ПериодЗавершения
	|				И РаботникиОрганизации.ПериодЗавершения <> &ПустаяДата
	|			ТОГДА РаботникиОрганизации.ЗанимаемыхСтавокЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ЗанимаемыхСтавок
	|	КОНЕЦ,
	|	СтрокиДокумента.НомерСтроки,
	|	СтрокиДокумента.ДатаНачала,
	|	СтрокиДокумента.ДатаОкончания,
	|	СтрокиДокумента.ДатаРаботыВВыходной,
	|	СтрокиДокумента.ОсвобождатьСтавку,
	|	СтрокиДокумента.ПричинаОтсутствия,
	|	СтрокиДокумента.ВнутрисменныхЧасов,
	|	СтрокиДокумента.ПричинаНетрудоспособности,
	|	СтрокиДокумента.Ссылка,
	|	ИмеющиесяСостояния.Состояние,
	|	ИмеющиесяСостояния.Регистратор.Представление,
	|	СтрокиДокумента.ДатаИзменения,
	|	СтрокиДокумента.Сотрудник,
	|	СтрокиДокумента.Сотрудник.Наименование,
	|	РаботникиОрганизации.Сотрудник.Физлицо,
	|	РаботникиОрганизации.УсловияТрудаИзмерение,
	|	РаботникиОрганизации.ВидДеятельностиИзмерение,
	//vvv
	//|	ВЫБОР
	//|		КОГДА СтрокиДокумента.Сотрудник.Организация = &ГоловнаяОрганизация
	//|			ТОГДА ЛОЖЬ
	//|		ИНАЧЕ ИСТИНА
	//|	КОНЕЦ";
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение = &Организация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	//
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры:
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса по товарам документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники организации"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата "с"
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата изменения состояния!", Отказ, Заголовок);
	КонецЕсли;
	
	// Причина отсутствия
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПричинаОтсутствия) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано состояние!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ПричинаОтсутствия=Перечисления.СостоянияРаботникаОрганизации.Заболевание ТОгда
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПричинаНетрудоспособности) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана причина нетрудоспособности!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;	
	
	// Работник не должен быть уволенным.
	Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда
		СтрокаСообщениеОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаИзменения, "ДЛФ=DD") + ")!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
		// Проверка: противоречие другой строке документа
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока <> NULL Тогда
		СтрокаСообщениеОбОшибке = "в строке " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока + " указана та же дата изменения состояния!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка: в регистре уже есть такое движение
	Если ВыборкаПоСтрокамДокумента.КонфликтноеСостояние <> NULL Тогда
		СтрокаСообщениеОбОшибке = "работник уже переведен в состояние """ + ВыборкаПоСтрокамДокумента.КонфликтноеСостояние + """ документом " + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Создает и заполняет структуру, содержащую имена регистров сведений
// по которым надо проводить документ
//
// Параметры: 
//	СтруктураПроведенияПоРегистрамСведений	- структура, содержащая имена регистров сведений 
//											  по которым надо проводить документ
//
// Возвращаемое значение:
//	Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	СтруктураПроведенияПоРегистрамСведений.Вставить("СостояниеРаботниковОрганизаций");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПериодыСостоянийРаботниковОрганизаций");
	СтруктураПроведенияПоРегистрамСведений.Вставить("КомпенсацияЗаРаботуВВыходныеДни");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//	ВыборкаПоШапкеДокумента					- выборка из результата запроса по шапке документа,
//	СтруктураПроведенияПоРегистрамСведений	- структура, содержащая имена регистров 
//											  сведений по которым надо проводить документ,
//  СтруктураПараметров						- структура параметров проведения,
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, 
		  СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "СостояниеРаботниковОрганизаций";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период			= ВыборкаПоРаботникиОрганизации.ДатаНачала;
		
		// Измерения
		Движение.Сотрудник		= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

		// Ресурсы
		Движение.Состояние		= ВыборкаПоРаботникиОрганизации.ПричинаОтсутствия;
		// Свойства
		Движение.ПериодЗавершения		= ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
		
		// Ресурсы
		Движение.СостояниеЗавершения	= Перечисления.СостоянияРаботникаОрганизации.Работает;	
		//реквизиты
		Движение.Внутрисменное		= ВыборкаПоРаботникиОрганизации.ВнутрисменныхЧасов>0;
	КонецЕсли;

	ИмяРегистра = "ПериодыСостоянийРаботниковОрганизаций";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
		Движение = Движения[ИмяРегистра].Добавить();
			
		// Измерения
		Движение.Сотрудник	= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.ДатаНачала		= ВыборкаПоРаботникиОрганизации.ДатаНачала;		
		Движение.ДатаОкончания	= ВыборкаПоРаботникиОрганизации.ДатаОкончания;		
	КонецЕсли;
	
	ИмяРегистра = "КомпенсацияЗаРаботуВВыходныеДни";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
		Если ВыборкаПоРаботникиОрганизации.ПричинаОтсутствия=Перечисления.СостоянияРаботникаОрганизации.ВыходнойЗаРанееОтработанноеВремя Тогда
			Движение = Движения[ИмяРегистра].Добавить();
			
			Движение.Период			= ВыборкаПоРаботникиОрганизации.ДатаНачала;
			
			// Измерения
			Движение.Организация	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.Сотрудник	     = ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.ДатаРаботы	 	 = ВыборкаПоРаботникиОрганизации.ДатаРаботыВВыходной;		
			Движение.ДатаКомпенсации = ВыборкаПоРаботникиОрганизации.ДатаОкончания;		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи
//
// Параметры:
//	СтруктураПроведенияПоРегистрамНакопления	- структура, содержащая имена регистров 
//												  накопления по которым надо проводить документ
//
// Возвращаемое значение:
//	Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления)

	СтруктураПроведенияПоРегистрамНакопления = Новый Структура();
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ЗанятыеШтатныеЕдиницыОрганизаций");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента						- выборка из результата запроса по шапке документа
//	СтруктураПроведенияПоРегистрамНакопления	- структура, содержащая имена регистров 
//												  накопления по которым надо проводить документ
//	СтруктураПараметров							- структура параметров проведения.
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, 
		  СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров = "")

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "ЗанятыеШтатныеЕдиницыОрганизаций";
	Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда

		Движение = Движения[ИмяРегистра].Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаНачала;
		Если ВыборкаПоРаботникиОрганизации.ПричинаОтсутствия = Перечисления.СостоянияРаботникаОрганизации.Работает Тогда
			Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
		Иначе
			Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
		КонецЕсли;

		// Измерения
		Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		Движение.Должность					= ВыборкаПоРаботникиОрганизации.Должность;
		Движение.УсловияТрудаИзмерение		= ВыборкаПоРаботникиОрганизации.УсловияТрудаИзмерение;
		Движение.ВидДеятельностиИзмерение	= ВыборкаПоРаботникиОрганизации.ВидДеятельностиИзмерение;

		
		// Ресурсы
		Движение.КоличествоСтавок			= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок; 

	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//	Струткура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("Записка1","Записка");		
	СтруктураМакетов.Вставить("ЗапискаВнутрисменныйОтгул","Заявление на внутрисменный отгул");		
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления, по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений, по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;

	//структура, содержащая имена регистров расчета, по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамРасчета;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);
			ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления);

			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента);
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамСведений);

					Если ВыборкаПоРаботникиОрганизации.ОсвобождатьСтавку Тогда
						ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамНакопления);
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	КраткийСоставДокумента = "";
	
	Для каждого СтрокаТЧ Из РаботникиОрганизации Цикл
		
		ФИОФизЛица = ПроцедурыУправленияПерсоналом.ФамилияИнициалыФизЛица(СтрокаТЧ["Сотрудник"].Наименование);
		Состояние=СтрокаТЧ.ПричинаОтсутствия;
		Если Найти(КраткийСоставДокумента, ФИОФизЛица) = 0 Тогда
			
			Если СтрДлина(КраткийСоставДокумента) < 100 Тогда
				КраткийСоставДокумента = КраткийСоставДокумента + ", " + ФИОФизЛица+" - "+Состояние;
			Иначе
				КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
				Прервать;
			КонецЕсли;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	Если Лев(КраткийСоставДокумента,2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставДокумента);
		Если ДлинаСтроки < 100 Тогда
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3)
		Иначе
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
		КонецЕсли; 
		
	КонецЕсли;
	
	Движения.ПериодыСостоянийРаботниковОрганизаций.РежимЗаписиРегистратора = РежимЗаписи;
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.ОтсутствиеНаРаботе") Тогда

		// Заполним реквизиты из стандартного набора.
		ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Основание.Проведен Тогда
			
			ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
			
			Если Организация.Пустая() Тогда
				Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяОрганизация")
			КонецЕсли;
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Основание",	Основание);
	
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОтсутствиеНаРаботеРаботники.Сотрудник,
			|	ОтсутствиеНаРаботеРаботники.ФизЛицо,
			|	ОтсутствиеНаРаботеРаботники.ПричинаОтсутствия,
			|	ОтсутствиеНаРаботеРаботники.ОсвобождатьСтавку,
			|	ОтсутствиеНаРаботеРаботники.ДатаНачала
			|ИЗ
			|	Документ.ОтсутствиеНаРаботе.Работники КАК ОтсутствиеНаРаботеРаботники
			|ГДЕ
			|	ОтсутствиеНаРаботеРаботники.Ссылка = &Основание";
			
			РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//	Название макета печати передается в качестве параметра,
//	по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета	- строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	ИмяФормы = "";
		
	Если ИмяМакета = "Записка1" Тогда
		ИмяФормы = "Записка";
		ТабДокумент = ПечатьЗаписки();
	ИначеЕсли ИмяМакета = "ЗапискаВнутрисменныйОтгул" Тогда
		ИмяФормы = "Часы за свой счет";
		ТабДокумент = ПечатьЗаявленияНаВнутрисменныйОтгул();	
	КонецЕсли;
	//
	Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним + ИмяФормы));

КонецФункции // Печать()

Функция ПечатьЗаписки()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтпускаОрганизации_Записка";
	ТабДокумент.ПолеСлева = 16;
	ТабДокумент.ПолеСправа = 10;
	ТабДокумент.ПолеСверху = 20;
	ТабДокумент.ПолеСнизу = 20;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.АвтоМасштаб=Истина;

	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();
	
	// запоминаем области макета
	Макет = Документы.ОтпускаОрганизаций.ПолучитьМакет("Записка1");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника
    ОбластьМакетаДоп=Макет.ПолучитьОбласть("ДопОтпуск");
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НомерДок=Число(ВыборкаДляШапки.НомерДок);
 		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		Если СокрЛП(ВыборкаДляШапки.ОрганизацияПрефикс)<>"" ТОгда
			ОбластьМакетаШапка.Параметры.НомерДок=СокрЛП(Строка(Число(Сред(ВыборкаДляШапки.НомерДок,СтрДлина(ВыборкаДляШапки.ОрганизацияПрефикс)+1))));
		КонецЕсли;
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ОбластьМакетаШапка.Параметры.НомерДок;
		ОбластьМакетаШапка.Параметры.ДатаДок = Формат(ВыборкаДляШапки.ДатаДок,"ДЛФ=ДД");
		ОбластьМакетаПодвал.Параметры.ДатаДок = Формат(ВыборкаДляШапки.ДатаДок,"ДЛФ=ДД");
	КонецЕсли;
	
	ЗапросПоОтветственным=Новый Запрос;
	ЗапросПоОтветственным.Текст=
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтпускаОрганизацийРаботникиОрганизации.ФизЛицо КАК Работник,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК Подразделение,
	|	ОтветственныеЛицаРуководитель.ФизическоеЛицо КАК Директор,
	|	ОтветственныеЛицаНачальник.ФизическоеЛицо КАК НачальникПодразделения,
	|	ОтветственныеЛицаКадровик.ФизическоеЛицо КАК Кадровик
	|ИЗ
	|	Документ.ОтсутствиеПериодомНаРаботеОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, ) КАК РаботникиОрганизацийСрезПоследних
	|		ПО ОтпускаОрганизацийРаботникиОрганизации.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаАктуальности, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаРуководитель
	|		ПО (ОтветственныеЛицаРуководитель.СтруктурнаяЕдиница = РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаАктуальности, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Табельщик)) КАК ОтветственныеЛицаНачальник
	|		ПО (ОтветственныеЛицаНачальник.СтруктурнаяЕдиница = ВЫБОР
	|				КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|						И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения
	|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаАктуальности, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы)) КАК ОтветственныеЛицаКадровик
	|		ПО (ОтветственныеЛицаКадровик.СтруктурнаяЕдиница = РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение)
	|ГДЕ
	|	ОтпускаОрганизацийРаботникиОрганизации.Ссылка = &Ссылка";
	
	ЗапросПоОтветственным.УстановитьПараметр("Организация",Организация);
	ЗапросПоОтветственным.УстановитьПараметр("ДатаАктуальности",Дата);	
	ЗапросПоОтветственным.УстановитьПараметр("Ссылка",Ссылка);	
	
	ТаблицаОтветственных=ЗапросПоОтветственным.Выполнить().Выгрузить();
	ОтборСотрудника=Новый Структура;
		
    // Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		// Шапка документа.
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВыборкаРаботники.НомерСтроки
		Иначе
			Если СокрЛП(ВыборкаРаботники.НомерДок)<>"" Тогда
				ОбластьМакетаШапка.Параметры.НомерДок = СокрЛП(ВыборкаРаботники.НомерДок);
			КонецЕсли;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакета.Параметры.КоличествоДнейВсего = "_______ дней";
		ОбластьМакета.Параметры.ПадежКалДнейВсего = "";
		ОбластьМакета.Параметры.КоличествоДнейОсновного = "_______ дней";
		ОбластьМакета.Параметры.ПадежДнейОсновной = "";	
		ОбластьМакетаПодвал.Параметры.СтрокаСоциального=?(ВыборкаРаботники.КоличествоДней>0,Строка(ВыборкаРаботники.ПричинаОтсутствия)+": "+СТрока(ВыборкаРаботники.КоличествоДней)+" "+ПадежДни(ВыборкаРаботники.КоличествоДней),"");
		ОбластьМакета.Параметры.РабочийГодС  = "_______";
		ОбластьМакета.Параметры.РабочийГодПо = "_______";
		
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = СокрЛП(ВыборкаРаботники.ТабельныйНомер);
		
		ТабДокумент.Вывести(ОбластьМакета);				
        ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаРаботники);
		// Подвал документа.
		ОбластьМакетаПодвал.Параметры.СтрокаМатпомощи="";		
		ОбластьМакетаПодвал.Параметры.ДатаНачала=Формат(ВыборкаРаботники.ДатаНачала,"ДЛФ=ДД");
		ОбластьМакетаПодвал.Параметры.ДатаОкончания=Формат(ВыборкаРаботники.ДатаОкончания,"ДЛФ=ДД");
		ОтборСотрудника.Вставить("Работник",ВыборкаРаботники.Сотрудник.ФизЛицо);
		НайденныеСтроки=ТаблицаОтветственных.НайтиСтроки(ОтборСотрудника);
		Если НайденныеСтроки.Количество()>0 Тогда
			ОбластьМакетаПодвал.Параметры.Директор=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(НайденныеСтроки[0].Директор);
			//ОбластьМакетаПодвал.Параметры.НачальникПодразделения=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(НайденныеСтроки[0].НачальникПодразделения);
			ОбластьМакетаПодвал.Параметры.НачальникПодразделения=""; //пока так могут быть и замы
			ОбластьМакетаПодвал.Параметры.Кадровик=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(НайденныеСтроки[0].Кадровик);
			ОбластьМакетаПодвал.Параметры.Работник=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(НайденныеСтроки[0].Работник);
		КонецЕсли;		
		ТабДокумент.Вывести(ОбластьМакетаПодвал);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;

	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьЗаявленияНаВнутрисменныйОтгул()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтсутствиеПериодомНаРаботеОрганизацийе_Заявление";
	ТабДокумент.ПолеСлева = 16;
	ТабДокумент.ПолеСправа = 10;
	ТабДокумент.ПолеСверху = 20;
	ТабДокумент.ПолеСнизу = 20;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.АвтоМасштаб=Истина;

	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();
	
	// запоминаем области макета
	Макет = ПолучитьМакет("ЗапискаВнутрисменныйОтгул");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НомерДок=Число(ВыборкаДляШапки.НомерДок);
 		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		Если СокрЛП(ВыборкаДляШапки.ОрганизацияПрефикс)<>"" ТОгда
			ОбластьМакетаШапка.Параметры.НомерДок=СокрЛП(Строка(Число(Сред(ВыборкаДляШапки.НомерДок,СтрДлина(ВыборкаДляШапки.ОрганизацияПрефикс)+1))));
		КонецЕсли;
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ОбластьМакетаШапка.Параметры.НомерДок;
		ОбластьМакетаШапка.Параметры.ДатаДок = Формат(ВыборкаДляШапки.ДатаДок,"ДЛФ=ДД");
		ОбластьМакетаПодвал.Параметры.ДатаДок = Формат(ВыборкаДляШапки.ДатаДок,"ДЛФ=ДД");
	КонецЕсли;
	
	ЗапросПоОтветственным=Новый Запрос;
	ЗапросПоОтветственным.Текст=
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтпускаОрганизацийРаботникиОрганизации.ФизЛицо КАК Работник,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК Подразделение,
	|	ОтветственныеЛицаРуководитель.ФизическоеЛицо КАК Директор,
	|	ОтветственныеЛицаНачальник.ФизическоеЛицо КАК НачальникПодразделения,
	|	ОтветственныеЛицаКадровик.ФизическоеЛицо КАК Кадровик
	|ИЗ
	|	Документ.ОтсутствиеПериодомНаРаботеОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, ) КАК РаботникиОрганизацийСрезПоследних
	|		ПО ОтпускаОрганизацийРаботникиОрганизации.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаАктуальности, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаРуководитель
	|		ПО (ОтветственныеЛицаРуководитель.СтруктурнаяЕдиница = РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаАктуальности, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Табельщик)) КАК ОтветственныеЛицаНачальник
	|		ПО (ОтветственныеЛицаНачальник.СтруктурнаяЕдиница = ВЫБОР
	|				КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|						И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения
	|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаАктуальности, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы)) КАК ОтветственныеЛицаКадровик
	|		ПО (ОтветственныеЛицаКадровик.СтруктурнаяЕдиница = РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение)
	|ГДЕ
	|	ОтпускаОрганизацийРаботникиОрганизации.Ссылка = &Ссылка";
	
	ЗапросПоОтветственным.УстановитьПараметр("Организация",Организация);
	ЗапросПоОтветственным.УстановитьПараметр("ДатаАктуальности",Дата);	
	ЗапросПоОтветственным.УстановитьПараметр("Ссылка",Ссылка);	
	
	ТаблицаОтветственных=ЗапросПоОтветственным.Выполнить().Выгрузить();
	ОтборСотрудника=Новый Структура;
		
    // Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		// Шапка документа.
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВыборкаРаботники.НомерСтроки
		Иначе
			Если СокрЛП(ВыборкаРаботники.НомерДок)<>"" Тогда
				ОбластьМакетаШапка.Параметры.НомерДок = СокрЛП(ВыборкаРаботники.НомерДок);
			КонецЕсли;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);			
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = СокрЛП(ВыборкаРаботники.ТабельныйНомер);
		
		ТабДокумент.Вывести(ОбластьМакета);				
        ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаРаботники);
		// Подвал документа.
		ОтборСотрудника.Вставить("Работник",ВыборкаРаботники.Сотрудник.ФизЛицо);
		НайденныеСтроки=ТаблицаОтветственных.НайтиСтроки(ОтборСотрудника);
		Если НайденныеСтроки.Количество()>0 Тогда			
			//ОбластьМакетаПодвал.Параметры.НачальникПодразделения=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(НайденныеСтроки[0].НачальникПодразделения);
			ОбластьМакетаПодвал.Параметры.НачальникПодразделения=""; //пока так могут быть и замы
			ОбластьМакетаПодвал.Параметры.Кадровик=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(НайденныеСтроки[0].Кадровик);
			ОбластьМакетаПодвал.Параметры.Работник=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(НайденныеСтроки[0].Работник);
		КонецЕсли;		
		ТабДокумент.Вывести(ОбластьМакетаПодвал);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;

	Возврат ТабДокумент;
	
КонецФункции

Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ТекущийДокумент",	Ссылка);
	Запрос.УстановитьПараметр("Руководитель",		Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",		Дата);

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтпускаОрганизаций.Дата КАК ДатаДок,
		|	ОтпускаОрганизаций.Номер КАК НомерДок,
		|	ВЫРАЗИТЬ(ОтпускаОрганизаций.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
		|	ОтпускаОрганизаций.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Представление КАК ДолжностьРуководителя,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ФИОФизЛицСрезПоследних.Имя КАК СТРОКА(1)) + ""."" + ВЫРАЗИТЬ(ФИОФизЛицСрезПоследних.Отчество КАК СТРОКА(1)) + ""."" + ФИОФизЛицСрезПоследних.Фамилия, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
		|	ОтпускаОрганизаций.Организация.Префикс
		|ИЗ
		|	Документ.ОтсутствиеПериодомНаРаботеОрганизаций КАК ОтпускаОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО ОтпускаОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|ГДЕ
		|	ОтпускаОрганизаций.Ссылка = &ТекущийДокумент";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ОтпускаОрганизацииРаботники.Сотрудник.Наименование) КАК Работник,
		|	ЕСТЬNULL((ВЫРАЗИТЬ(ФИОФизЛиц.Имя КАК СТРОКА(1))) + ""."" + (ВЫРАЗИТЬ(ФИОФизЛиц.Отчество КАК СТРОКА(1))) + ""."" + ФИОФизЛиц.Фамилия, ОтпускаОрганизацииРаботники.Сотрудник.Наименование) КАК ИОФРаботника,
		|	ОтпускаОрганизацииРаботники.ДатаНачала,
		|	ОтпускаОрганизацииРаботники.ДатаОкончания,
		|	ОтпускаОрганизацииРаботники.ПричинаОтсутствия,
		|	ОтпускаОрганизацииРаботники.Сотрудник,
		|	ВЫБОР
		|		КОГДА ДанныеОРаботникахОрганизации.ПериодЗавершения <= ОтпускаОрганизацииРаботники.ДатаНачала
		|				И ДанныеОРаботникахОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииЗавершенияНаименование
		|		ИНАЧЕ ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииНаименование
		|	КОНЕЦ КАК ПодразделениеРаботника,
		|	ВЫБОР
		|		КОГДА ДанныеОРаботникахОрганизации.ПериодЗавершения <= ОтпускаОрганизацииРаботники.ДатаНачала
		|				И ДанныеОРаботникахОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеОРаботникахОрганизации.ДолжностьЗавершенияНаименование
		|		ИНАЧЕ ДанныеОРаботникахОрганизации.ДолжностьНаименование
		|	КОНЕЦ КАК Должность,
		|	РАЗНОСТЬДАТ(ОтпускаОрганизацииРаботники.ДатаНачала, ОтпускаОрганизацииРаботники.ДатаОкончания, ДЕНЬ) + 1 КАК КоличествоДней,
		|	ОтпускаОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
		|	ОтпускаОрганизацииРаботники.НомерДок КАК НомерДок,
		|	ОтпускаОрганизацииРаботники.ВремяНачала КАК ВремяНачала,
		|	ОтпускаОрганизацииРаботники.ВремяОкончания КАК ВремяОкончания,
		|	ОтпускаОрганизацииРаботники.Сотрудник.Код КАК ТабельныйНомер
		|ИЗ
		|	Документ.ОтсутствиеПериодомНаРаботеОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				ФизЛицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ОтпускаОрганизацииРаботники.Сотрудник.Физлицо
		|					ИЗ
		|						Документ.ОтсутствиеПериодомНаРаботеОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботники
		|					ГДЕ
		|						ОтпускаОрганизацииРаботники.Ссылка = &ТекущийДокумент)) КАК ФИОФизЛиц
		|		ПО ОтпускаОрганизацииРаботники.Сотрудник.Физлицо = ФИОФизЛиц.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокДат.Сотрудник КАК Сотрудник,
		|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
		|			РаботникиОрганизации.Должность.Наименование КАК ДолжностьНаименование,
		|			РаботникиОрганизации.ПодразделениеОрганизацииЗавершения.Наименование КАК ПодразделениеОрганизацииЗавершенияНаименование,
		|			РаботникиОрганизации.ДолжностьЗавершения.Наименование КАК ДолжностьЗавершенияНаименование,
		|			РаботникиОрганизации.ПериодЗавершения КАК ПериодЗавершения
		|		ИЗ
		|			(ВЫБРАТЬ
		|				РаботникиВнутри.Сотрудник КАК Сотрудник,
		|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтсутствиеПериодомНаРаботеОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизаций
		|					ПО РаботникиВнутри.Период < ОтпускаОрганизаций.ДатаНачала
		|						И РаботникиВнутри.Сотрудник = ОтпускаОрганизаций.Сотрудник
		|			ГДЕ
		|				ОтпускаОрганизаций.Ссылка = &ТекущийДокумент
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиВнутри.Сотрудник) КАК СписокДат
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|				ПО СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник
		|					И СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период) КАК ДанныеОРаботникахОрганизации
		|		ПО ОтпускаОрганизацииРаботники.Сотрудник = ДанныеОРаботникахОрганизации.Сотрудник
		|ГДЕ
		|	ОтпускаОрганизацииРаботники.Ссылка = &ТекущийДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтпускаОрганизацииРаботники.ДатаНачала,
		|	ОтпускаОрганизацииРаботники.ДатаОкончания,
		|	ОтпускаОрганизацииРаботники.ПричинаОтсутствия,
		|	ОтпускаОрганизацииРаботники.НомерДок,
		|	ОтпускаОрганизацииРаботники.ВремяНачала,
		|	ОтпускаОрганизацииРаботники.ВремяОкончания,
		|	ОтпускаОрганизацииРаботники.Сотрудник,
		//
		|	ОтпускаОрганизацииРаботники.НомерСтроки,
		|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ОтпускаОрганизацииРаботники.Сотрудник.Наименование),
		|	ЕСТЬNULL((ВЫРАЗИТЬ(ФИОФизЛиц.Имя КАК СТРОКА(1))) + ""."" + (ВЫРАЗИТЬ(ФИОФизЛиц.Отчество КАК СТРОКА(1))) + ""."" + ФИОФизЛиц.Фамилия, ОтпускаОрганизацииРаботники.Сотрудник.Наименование),
		|	ОтпускаОрганизацииРаботники.Сотрудник.Код,
		|	ВЫБОР
		|		КОГДА ДанныеОРаботникахОрганизации.ПериодЗавершения <= ОтпускаОрганизацииРаботники.ДатаНачала
		|				И ДанныеОРаботникахОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииЗавершенияНаименование
		|		ИНАЧЕ ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииНаименование
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ДанныеОРаботникахОрганизации.ПериодЗавершения <= ОтпускаОрганизацииРаботники.ДатаНачала
		|				И ДанныеОРаботникахОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеОРаботникахОрганизации.ДолжностьЗавершенияНаименование
		|		ИНАЧЕ ДанныеОРаботникахОрганизации.ДолжностьНаименование
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

Функция ПадежДни(ЧислоДней)
	Если Прав(Строка(ЧислоДней),1)="1" тогда
		Возврат "день";
	ИначеЕсли (ЧислоДней>= 5) и (ЧислоДней<=20) тогда
		Возврат "дней";
	ИначеЕсли (Число(Прав(Строка(ЧислоДней),1))>=2) и (Число(Прав(Строка(ЧислоДней),1))<=4)тогда  	
		Возврат "дня";
	Иначе
		Возврат "дней";
	КонецЕсли;		
КонецФункции
#КонецЕсли
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;

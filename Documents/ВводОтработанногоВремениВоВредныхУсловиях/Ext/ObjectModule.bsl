////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Список значений перечисления "ВидыУчетаВремени" и названий ячеек.
Перем СписокСоответствийВидаУчетаВремениИНазванийЯчеек;

// Значение  "ПоДням" перечисления ВидыУчетаВремени
Перем ВидУчетаВремениПоДням;
Перем ВидУчетаВремениПоЧасам;

// Значение ПоДням перечисления СпособВводаДанных
Перем СпособВводаДанныхПоДням;

// Производственный календарь для заполнения реквизитов регистров
Перем ПроизводственныйКалендарь;

// список информационных сообщений, для вывода
Перем СписокСообщений;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
// Процедура предназначена для автозаполнения документа
// Если заполнен параметр сотрудники, то в табличную часть будут добавлены 
// строки по указаным сотрудникам.
Процедура Автозаполнение(Запрос = Неопределено, Сотрудник = Неопределено, ТекущаяСтрокаГрафикаРаботы = Неопределено) Экспорт
		
	Если Запрос = Неопределено Тогда
		
		ЗапросАвтоЗаполнения = Новый Запрос;
		
		Если Сотрудник = Неопределено Тогда
			ЗапросАвтоЗаполнения.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РаботникиОрганизаций.Сотрудник КАК Ссылка,
			|	РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо
			|ПОМЕСТИТЬ ВТСписокРаботников
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоМесяца, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизаций
			|ГДЕ
			|	ВЫБОР
			|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
			|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ТОГДА РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения
			|			ИНАЧЕ РаботникиОрганизаций.ОбособленноеПодразделение
			|		КОНЕЦ = &ОбособленноеПодразделение
			|	И ВЫБОР
			|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
			|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
			|			ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
			|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|	И (ВЫБОР
			|				КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
			|						И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|					ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
			|				ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
			|			КОНЕЦ = &Подразделение
			|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	РаботникиОрганизаций.Сотрудник,
			|	РаботникиОрганизаций.Сотрудник.Физлицо
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|ГДЕ
			|	РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
			|	И РаботникиОрганизаций.Период > &НачалоМесяца
			|	И РаботникиОрганизаций.Период <= &КонецМесяца
			|	И РаботникиОрганизаций.ОбособленноеПодразделение = &ОбособленноеПодразделение
			|	И (РаботникиОрганизаций.ПодразделениеОрганизации = &Подразделение
			|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка"; 
			
			ЗапросАвтоЗаполнения.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
			ЗапросАвтоЗаполнения.УстановитьПараметр("ОбособленноеПодразделение", Организация);
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Ложь);
		Иначе 
			ЗапросАвтоЗаполнения.Текст = 
			"ВЫБРАТЬ 
			|	СотрудникиОрганизаций.Ссылка КАК Ссылка,
			|	СотрудникиОрганизаций.Физлицо
			|ПОМЕСТИТЬ ВТСписокРаботников
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка = &Сотрудник
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка";
			ЗапросАвтоЗаполнения.УстановитьПараметр("Сотрудник", Сотрудник);
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Истина);
		КонецЕсли;
		
	Иначе
		
		ЗапросАвтоЗаполнения = Запрос;
		ЗапросАвтоЗаполненияТекст = СтрЗаменить(ЗапросАвтоЗаполнения.Текст,"РаботникиОрганизации.Сотрудник КАК Сотрудник","РаботникиОрганизации.Сотрудник КАК Ссылка");
		ПозицияИндексирования = Найти(ЗапросАвтоЗаполненияТекст,"ИНДЕКСИРОВАТЬ");
		ЗапросАвтоЗаполнения.Текст = Лев(ЗапросАвтоЗаполненияТекст,ПозицияИндексирования - 1) + "
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка";
		ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Ложь);
		
	КонецЕсли;
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	ЗапросАвтоЗаполнения.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПериодРегистрации));
	ЗапросАвтоЗаполнения.УстановитьПараметр("КонецМесяца", КонецМесяца(ПериодРегистрации));
	ЗапросАвтоЗаполнения.УстановитьПараметр("Месяц", ПериодРегистрации);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоЧасам", ВидУчетаВремениПоЧасам);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	ЗапросАвтоЗаполнения.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросАвтоЗаполнения.Выполнить();
	
	ЗапросАвтоЗаполнения.Текст = "ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка КАК Ссылка,
	|	СотрудникиОрганизаций.Физлицо,
	|	&КонецМесяца КАК ДатаКалендаря
	|ПОМЕСТИТЬ ВТСписокРаботниковДата
	|ИЗ
	|	ВТСписокРаботников КАК СотрудникиОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	ЗапросАвтоЗаполнения.Выполнить();
	
	ЗапросАвтоЗаполнения.Текст = "ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы КАК ГрафикРаботы,
	|	РаботникиОрганизацийСрезПоследних.Период КАК Период,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТГрафикиСотрудников
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&НачалоМесяца,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТСписокРаботников.ССылка
	|				ИЗ
	|					ВТСписокРаботников)) КАК РаботникиОрганизацийСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.ГрафикРаботы,
	|	РаботникиОрганизаций.Период,
	|	СписокРаботников.Ссылка
	|ИЗ
	|	ВТСписокРаботниковДата КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО СписокРаботников.Ссылка = РаботникиОрганизаций.Сотрудник
	|			И (РаботникиОрганизаций.Период > &НачалоМесяца)
	|			И (РаботникиОрганизаций.Период <= &КонецМесяца)";
	ЗапросАвтоЗаполнения.Выполнить();
	
	ЗапросАвтоЗаполнения.Текст = "ВЫБРАТЬ
	|	СписокРаботников.Ссылка,
	|	СписокРаботников.ДатаКалендаря,
	|	ВЫБОР
	|		КОГДА ГрафикиСотрудников.ПериодЗавершения <= СписокРаботников.ДатаКалендаря
	|				И ГрафикиСотрудников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ГрафикиСотрудников.ГрафикРаботыЗавершения
	|		ИНАЧЕ ГрафикиСотрудников.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТОбщиеГрафикиРаботников
	|ИЗ
	|	ВТСписокРаботниковДата КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокРаботников.Ссылка КАК Ссылка,
	|			СписокРаботников.Физлицо КАК Физлицо,
	|			СписокРаботников.ДатаКалендаря КАК ДатаКалендаря,
	|			МАКСИМУМ(ГрафикиСотрудников.Период) КАК ДатаГрафика
	|		ИЗ
	|			ВТСписокРаботниковДата КАК СписокРаботников
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСотрудников КАК ГрафикиСотрудников
	|				ПО (ГрафикиСотрудников.Сотрудник = СписокРаботников.Ссылка)
	|					И (ГрафикиСотрудников.Период <= СписокРаботников.ДатаКалендаря)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СписокРаботников.Ссылка,
	|			СписокРаботников.Физлицо,
	|			СписокРаботников.ДатаКалендаря) КАК БлижайшийГрафикСлева
	|		ПО (БлижайшийГрафикСлева.Ссылка = СписокРаботников.Ссылка)
	|			И (БлижайшийГрафикСлева.ДатаКалендаря = СписокРаботников.ДатаКалендаря)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокРаботников.Ссылка КАК Ссылка,
	|			СписокРаботников.Физлицо КАК Физлицо,
	|			СписокРаботников.ДатаКалендаря КАК ДатаКалендаря,
	|			МИНИМУМ(ГрафикиСотрудников.Период) КАК ДатаГрафика
	|		ИЗ
	|			ВТСписокРаботниковДата КАК СписокРаботников
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСотрудников КАК ГрафикиСотрудников
	|				ПО (ГрафикиСотрудников.Сотрудник = СписокРаботников.Ссылка)
	|					И (ГрафикиСотрудников.Период >= СписокРаботников.ДатаКалендаря)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СписокРаботников.Ссылка,
	|			СписокРаботников.Физлицо,
	|			СписокРаботников.ДатаКалендаря) КАК БлижайшийГрафикСправа
	|		ПО (БлижайшийГрафикСправа.Ссылка = СписокРаботников.Ссылка)
	|			И (БлижайшийГрафикСправа.ДатаКалендаря = СписокРаботников.ДатаКалендаря)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ГрафикиСотрудников
	|		ПО (ГрафикиСотрудников.Сотрудник = СписокРаботников.Ссылка)
	|			И (ГрафикиСотрудников.Период = ЕСТЬNULL(БлижайшийГрафикСлева.ДатаГрафика, БлижайшийГрафикСправа.ДатаГрафика))";
	ЗапросАвтоЗаполнения.Выполнить();
	
	
	ЗапросАвтоЗаполнения.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.Физлицо,
	|	ВЫБОР
	|		КОГДА ПосчитанноеВремя.РегистраторВведенныхВЦеломГрафиков ЕСТЬ NULL 
	|				И ПосчитанноеВремя.РегистраторВведенныхПоДнямГрафиков ЕСТЬ NULL 
	|			ТОГДА ПосчитанноеВремя.ВидУчетаВремени
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВидУчетаВремени,
	|	ЕСТЬNULL(ПосчитанноеВремя.ОсновноеЗначение, 0) КАК Часов,
	|	ЕСТЬNULL(ПосчитанноеВремя.ДополнительноеЗначение, 0) КАК Дней
	|ИЗ
	|	ВТСписокРаботников КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВведенныеГрафикиВЦелом.Регистратор КАК РегистраторВведенныхВЦеломГрафиков,
	|			ВведенныеГрафики.Документ КАК РегистраторВведенныхПоДнямГрафиков,
	|			РаботникиОрганизацийСрезПоследних.Ссылка КАК Сотрудник,
	|			ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|			ВЫБОР
	|				КОГДА ВведенныеГрафики.Документ ЕСТЬ НЕ NULL 
	|					ТОГДА ВведенныеГрафики.ОсновноеЗначение
	|				ИНАЧЕ ГрафикиРаботыПоВидамВремени.ОсновноеЗначение
	|			КОНЕЦ КАК ОсновноеЗначение,
	|			ВЫБОР
	|				КОГДА ВведенныеГрафики.Документ ЕСТЬ НЕ NULL 
	|					ТОГДА ВведенныеГрафики.ДополнительноеЗначение
	|				ИНАЧЕ ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение
	|			КОНЕЦ КАК ДополнительноеЗначение
	|		ИЗ
	|			ВТОбщиеГрафикиРаботников КАК РаботникиОрганизацийСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|					ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|					СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК ОсновноеЗначение,
	|					СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ДополнительноеЗначение
	|				ИЗ
	|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|				ГДЕ
	|					ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|					И ГрафикиРаботыПоВидамВремени.Месяц = &Месяц
	|					И ГрафикиРаботыПоВидамВремени.План
	|					И ГрафикиРаботыПоВидамВремени.ОсновноеЗначение <> 0
	|					И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &ВидУчетаВремениПоЧасам
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|					ГрафикиРаботыПоВидамВремени.ВидУчетаВремени) КАК ГрафикиРаботыПоВидамВремени
	|				ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = РаботникиОрганизацийСрезПоследних.ГрафикРаботы)
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ГрафикиРаботыПоВидамВремени.Документ КАК Документ,
	|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|					ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|					СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК ОсновноеЗначение,
	|					СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ДополнительноеЗначение
	|				ИЗ
	|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|				ГДЕ
	|					ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|					И ГрафикиРаботыПоВидамВремени.Месяц = &Месяц
	|					И ГрафикиРаботыПоВидамВремени.План
	|					И ГрафикиРаботыПоВидамВремени.ОсновноеЗначение <> 0
	|					И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &ВидУчетаВремениПоЧасам
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|					ГрафикиРаботыПоВидамВремени.Документ,
	|					ГрафикиРаботыПоВидамВремени.ВидУчетаВремени) КАК ВведенныеГрафики
	|				ПО (ВведенныеГрафики.ГрафикРаботы = РаботникиОрганизацийСрезПоследних.Ссылка)
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК ВведенныеГрафикиВЦелом
	|				ПО (ВведенныеГрафикиВЦелом.Сотрудник = РаботникиОрганизацийСрезПоследних.Ссылка)
	|					И (ВведенныеГрафикиВЦелом.Регистратор <> &ДокументСсылка)
	|					И (ВведенныеГрафикиВЦелом.Месяц = НАЧАЛОПЕРИОДА(РаботникиОрганизацийСрезПоследних.ДатаКалендаря, МЕСЯЦ))) КАК ПосчитанноеВремя
	|		ПО (ПосчитанноеВремя.Сотрудник = СотрудникиОрганизаций.Ссылка)
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ВидУчетаВремени";
	
	РезультатЗапроса = ЗапросАвтоЗаполнения.Выполнить();
		
	МассивДней = Новый Массив(32);
	
	Если Сотрудник = Неопределено Тогда
		ГрафикРаботы.Очистить();
	КонецЕсли;
	// Заполняем строку документа, даже если в запросе ничего не получили, но 
	// необходимо заполнить по одному сотруднику.
	Если РезультатЗапроса.Пустой() И ЗначениеЗаполнено(Сотрудник) И ТекущаяСтрокаГрафикаРаботы <> Неопределено Тогда
		ТекущаяСтрокаГрафикаРаботы.Сотрудник = Сотрудник;
		ТекущаяСтрокаГрафикаРаботы.ВсегоДней = 0;
		ТекущаяСтрокаГрафикаРаботы.ВсегоЧасов = 0;
		ТекущаяСтрокаГрафикаРаботы.ВсегоЧасовВечерних = 0;
		ТекущаяСтрокаГрафикаРаботы.ВсегоЧасовНочных = 0;
	Иначе 	
		ВыборкаРезультата = РезультатЗапроса.Выбрать();
		 Пока  ВыборкаРезультата.Следующий() Цикл
			СтрокаТаблицыГрафикРаботы = ГрафикРаботы.Добавить();		
			СтрокаТаблицыГрафикРаботы.Сотрудник = ВыборкаРезультата.Сотрудник;
		    СтрокаТаблицыГрафикРаботы.ВсегоЧасов = ВыборкаРезультата.Часов;
			СтрокаТаблицыГрафикРаботы.ВсегоДней = ВыборкаРезультата.Дней;
 		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // Автозаполнение()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
// Процедура предназначена для автозаполнения документа
// Если заполнен параметр сотрудники, то в табличную часть будут добавлены 
// строки по указаным сотрудникам.
Процедура АвтозаполнениеПоПлановым() Экспорт
		
	ЗапросАвтоЗаполнения = Новый Запрос;
			
	ЗапросАвтоЗаполнения.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НачисленияРаботниковОрганизацийСрезПоследних.Сотрудник КАК Ссылка,
	|	НачисленияРаботниковОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Физлицо
	|ПОМЕСТИТЬ ВТСписокРаботников
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&НачалоМесяца, Организация = &ГоловнаяОрганизация) КАК НачисленияРаботниковОрганизацийСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <= &НачалоМесяца
	|					И НачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА НачисленияРаботниковОрганизацийСрезПоследних.ДействиеЗавершения
	|			ИНАЧЕ НачисленияРаботниковОрганизацийСрезПоследних.Действие
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|	И НачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.СпособРасчета В(&ДоплатыОтСтавкиПервогоРазряда)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник,
	|	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник.Физлицо
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|ГДЕ
	|	ПлановыеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация
	|	И ПлановыеНачисленияРаботниковОрганизаций.Период > &НачалоМесяца
	|	И ПлановыеНачисленияРаботниковОрганизаций.Период <= &КонецМесяца
	|	И ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета В(&ДоплатыОтСтавкиПервогоРазряда)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка"; 
	
	
	ДоплатыОтСтавкиПервогоРазряда = Новый Массив;
	ДоплатыОтСтавкиПервогоРазряда.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоРазряда);
	ДоплатыОтСтавкиПервогоРазряда.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоСотрудника);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ДоплатыОтСтавкиПервогоРазряда", ДоплатыОтСтавкиПервогоРазряда);

	ЗапросАвтоЗаполнения.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ОбособленноеПодразделение", Организация);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Ложь);
		
		
	ЗапросАвтоЗаполнения.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	ЗапросАвтоЗаполнения.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПериодРегистрации));
	ЗапросАвтоЗаполнения.УстановитьПараметр("КонецМесяца", КонецМесяца(ПериодРегистрации));
	ЗапросАвтоЗаполнения.УстановитьПараметр("Месяц", ПериодРегистрации);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоЧасам", ВидУчетаВремениПоЧасам);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	ЗапросАвтоЗаполнения.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросАвтоЗаполнения.Выполнить();
	
	ЗапросАвтоЗаполнения.Текст = "ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка КАК Ссылка,
	|	СотрудникиОрганизаций.Физлицо,
	|	&КонецМесяца КАК ДатаКалендаря
	|ПОМЕСТИТЬ ВТСписокРаботниковДата
	|ИЗ
	|	ВТСписокРаботников КАК СотрудникиОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	ЗапросАвтоЗаполнения.Выполнить();
	
	ЗапросАвтоЗаполнения.Текст = "ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы КАК ГрафикРаботы,
	|	РаботникиОрганизацийСрезПоследних.Период КАК Период,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТГрафикиСотрудников
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&НачалоМесяца,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТСписокРаботников.ССылка
	|				ИЗ
	|					ВТСписокРаботников)) КАК РаботникиОрганизацийСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.ГрафикРаботы,
	|	РаботникиОрганизаций.Период,
	|	СписокРаботников.Ссылка
	|ИЗ
	|	ВТСписокРаботниковДата КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО СписокРаботников.Ссылка = РаботникиОрганизаций.Сотрудник
	|			И (РаботникиОрганизаций.Период > &НачалоМесяца)
	|			И (РаботникиОрганизаций.Период <= &КонецМесяца)";
	ЗапросАвтоЗаполнения.Выполнить();
				
	ЗапросАвтоЗаполнения.Текст = "ВЫБРАТЬ
	|	СписокРаботников.Ссылка,
	|	СписокРаботников.ДатаКалендаря,
	|	ВЫБОР
	|		КОГДА ГрафикиСотрудников.ПериодЗавершения <= СписокРаботников.ДатаКалендаря
	|				И ГрафикиСотрудников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ГрафикиСотрудников.ГрафикРаботыЗавершения
	|		ИНАЧЕ ГрафикиСотрудников.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТОбщиеГрафикиРаботников
	|ИЗ
	|	ВТСписокРаботниковДата КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокРаботников.Ссылка КАК Ссылка,
	|			СписокРаботников.Физлицо КАК Физлицо,
	|			СписокРаботников.ДатаКалендаря КАК ДатаКалендаря,
	|			МАКСИМУМ(ГрафикиСотрудников.Период) КАК ДатаГрафика
	|		ИЗ
	|			ВТСписокРаботниковДата КАК СписокРаботников
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСотрудников КАК ГрафикиСотрудников
	|				ПО (ГрафикиСотрудников.Сотрудник = СписокРаботников.Ссылка)
	|					И (ГрафикиСотрудников.Период <= СписокРаботников.ДатаКалендаря)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СписокРаботников.Ссылка,
	|			СписокРаботников.Физлицо,
	|			СписокРаботников.ДатаКалендаря) КАК БлижайшийГрафикСлева
	|		ПО (БлижайшийГрафикСлева.Ссылка = СписокРаботников.Ссылка)
	|			И (БлижайшийГрафикСлева.ДатаКалендаря = СписокРаботников.ДатаКалендаря)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокРаботников.Ссылка КАК Ссылка,
	|			СписокРаботников.Физлицо КАК Физлицо,
	|			СписокРаботников.ДатаКалендаря КАК ДатаКалендаря,
	|			МИНИМУМ(ГрафикиСотрудников.Период) КАК ДатаГрафика
	|		ИЗ
	|			ВТСписокРаботниковДата КАК СписокРаботников
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСотрудников КАК ГрафикиСотрудников
	|				ПО (ГрафикиСотрудников.Сотрудник = СписокРаботников.Ссылка)
	|					И (ГрафикиСотрудников.Период >= СписокРаботников.ДатаКалендаря)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СписокРаботников.Ссылка,
	|			СписокРаботников.Физлицо,
	|			СписокРаботников.ДатаКалендаря) КАК БлижайшийГрафикСправа
	|		ПО (БлижайшийГрафикСправа.Ссылка = СписокРаботников.Ссылка)
	|			И (БлижайшийГрафикСправа.ДатаКалендаря = СписокРаботников.ДатаКалендаря)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ГрафикиСотрудников
	|		ПО (ГрафикиСотрудников.Сотрудник = СписокРаботников.Ссылка)
	|			И (ГрафикиСотрудников.Период = ЕСТЬNULL(БлижайшийГрафикСлева.ДатаГрафика, БлижайшийГрафикСправа.ДатаГрафика))";
	ЗапросАвтоЗаполнения.Выполнить();
	
		
	ЗапросАвтоЗаполнения.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.Физлицо,
	|	ВЫБОР
	|		КОГДА ПосчитанноеВремя.РегистраторВведенныхВЦеломГрафиков ЕСТЬ NULL 
	|				И ПосчитанноеВремя.РегистраторВведенныхПоДнямГрафиков ЕСТЬ NULL 
	|			ТОГДА ПосчитанноеВремя.ВидУчетаВремени
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВидУчетаВремени,
	|	ЕСТЬNULL(ПосчитанноеВремя.ОсновноеЗначение, 0) КАК Часов,
	|	ЕСТЬNULL(ПосчитанноеВремя.ДополнительноеЗначение, 0) КАК Дней
	|ИЗ
	|	ВТСписокРаботников КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВведенныеГрафикиВЦелом.Регистратор КАК РегистраторВведенныхВЦеломГрафиков,
	|			ВведенныеГрафики.Документ КАК РегистраторВведенныхПоДнямГрафиков,
	|			РаботникиОрганизацийСрезПоследних.Ссылка КАК Сотрудник,
	|			ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|			ВЫБОР
	|				КОГДА ВведенныеГрафики.Документ ЕСТЬ НЕ NULL 
	|					ТОГДА ВведенныеГрафики.ОсновноеЗначение
	|				ИНАЧЕ ГрафикиРаботыПоВидамВремени.ОсновноеЗначение
	|			КОНЕЦ КАК ОсновноеЗначение,
	|			ВЫБОР
	|				КОГДА ВведенныеГрафики.Документ ЕСТЬ НЕ NULL 
	|					ТОГДА ВведенныеГрафики.ДополнительноеЗначение
	|				ИНАЧЕ ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение
	|			КОНЕЦ КАК ДополнительноеЗначение
	|		ИЗ
	|			ВТОбщиеГрафикиРаботников КАК РаботникиОрганизацийСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|					ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|					СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК ОсновноеЗначение,
	|					СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ДополнительноеЗначение
	|				ИЗ
	|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|				ГДЕ
	|					ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|					И ГрафикиРаботыПоВидамВремени.Месяц = &Месяц
	|					И ГрафикиРаботыПоВидамВремени.План
	|					И ГрафикиРаботыПоВидамВремени.ОсновноеЗначение <> 0
	|					И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &ВидУчетаВремениПоЧасам
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|					ГрафикиРаботыПоВидамВремени.ВидУчетаВремени) КАК ГрафикиРаботыПоВидамВремени
	|				ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = РаботникиОрганизацийСрезПоследних.ГрафикРаботы)
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ГрафикиРаботыПоВидамВремени.Документ КАК Документ,
	|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|					ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|					СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК ОсновноеЗначение,
	|					СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ДополнительноеЗначение
	|				ИЗ
	|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|				ГДЕ
	|					ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|					И ГрафикиРаботыПоВидамВремени.Месяц = &Месяц
	|					И ГрафикиРаботыПоВидамВремени.План
	|					И ГрафикиРаботыПоВидамВремени.ОсновноеЗначение <> 0
	|					И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &ВидУчетаВремениПоЧасам
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|					ГрафикиРаботыПоВидамВремени.Документ,
	|					ГрафикиРаботыПоВидамВремени.ВидУчетаВремени) КАК ВведенныеГрафики
	|				ПО (ВведенныеГрафики.ГрафикРаботы = РаботникиОрганизацийСрезПоследних.Ссылка)
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК ВведенныеГрафикиВЦелом
	|				ПО (ВведенныеГрафикиВЦелом.Сотрудник = РаботникиОрганизацийСрезПоследних.Ссылка)
	|					И (ВведенныеГрафикиВЦелом.Регистратор <> &ДокументСсылка)
	|					И (ВведенныеГрафикиВЦелом.Месяц = НАЧАЛОПЕРИОДА(РаботникиОрганизацийСрезПоследних.ДатаКалендаря, МЕСЯЦ))) КАК ПосчитанноеВремя
	|		ПО (ПосчитанноеВремя.Сотрудник = СотрудникиОрганизаций.Ссылка)
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ВидУчетаВремени";
	
	РезультатЗапроса = ЗапросАвтоЗаполнения.Выполнить();
	
	// Заполняем строку документа, даже если в запросе ничего не получили, но 
	// необходимо заполнить по одному сотруднику.
	ВыборкаРезультата = РезультатЗапроса.Выбрать();
	 Пока  ВыборкаРезультата.Следующий() Цикл
		СтрокаТаблицыГрафикРаботы = ГрафикРаботы.Добавить();		
		СтрокаТаблицыГрафикРаботы.Сотрудник = ВыборкаРезультата.Сотрудник;
	    СтрокаТаблицыГрафикРаботы.ВсегоЧасов = ВыборкаРезультата.Часов;
		СтрокаТаблицыГрафикРаботы.ВсегоДней = ВыборкаРезультата.Дней;
	КонецЦикла;

	
КонецПроцедуры // Автозаполнение()



#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
КонецФункции // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//	Структура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	//СтруктураМакетов.Вставить("Т13",	"Форма Т-13");
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


// Функция возвращает 1, если проверяемая дата участвует в расчете нормы времени - Ресурс
Функция ОтмеченВРесурсеПроизводственногоКалендаря(ПроверяемаяДата, Ресурс, ТаблицаДанныхКалендаря)
	
	НайденнаяСтрока = ТаблицаДанныхКалендаря.Найти(ПроверяемаяДата, "ДатаКалендаря");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	Возврат НайденнаяСтрока[Ресурс];
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()
	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводОтработанногоВремениВоВредныхУсловиях.Дата,
	|	ВводОтработанногоВремениВоВредныхУсловиях.ПериодРегистрации,
	|	ВводОтработанногоВремениВоВредныхУсловиях.Ссылка,
	|	ВЫБОР
	|		КОГДА ВводОтработанногоВремениВоВредныхУсловиях.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВводОтработанногоВремениВоВредныхУсловиях.Организация
	|		ИНАЧЕ ВводОтработанногоВремениВоВредныхУсловиях.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ВводОтработанногоВремениВоВредныхУсловиях.Организация КАК ОбособленноеПодразделение
	|ИЗ
	|	Документ.ВводОтработанногоВремениВоВредныхУсловиях КАК ВводОтработанногоВремениВоВредныхУсловиях
	|ГДЕ
	|	ВводОтработанногоВремениВоВредныхУсловиях.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "ГрафикРаботы" документа
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоГрафикРаботы(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы.НомерСтроки КАК НомерСтроки,
	|	ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы.ВсегоДней,
	|	ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы.ВсегоЧасов,
	|	Дубли.КоличествоДублей КАК КоличествоДублейСотрудников
	|ИЗ
	|	Документ.ВводОтработанногоВремениВоВредныхУсловиях.ГрафикРаботы КАК ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы.Сотрудник КАК Сотрудник,
	|			КОЛИЧЕСТВО(ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы.Сотрудник) КАК КоличествоДублей
	|		ИЗ
	|			Документ.ВводОтработанногоВремениВоВредныхУсловиях.ГрафикРаботы КАК ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы
	|		ГДЕ
	|			ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы.Сотрудник) КАК Дубли
	|		ПО (Дубли.Сотрудник = ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы.Сотрудник)
	|ГДЕ
	|	ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоГрафикРаботы()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)
	
	//  ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		СписокСообщений.Добавить(Перечисления.ВидыСообщений.Ошибка, "Не задан период индивидуального графика!");
		Отказ = Истина;
	КонецЕсли;
	
	 //  Организация
	 Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация) Тогда
		СписокСообщений.Добавить(Перечисления.ВидыСообщений.Ошибка, "Не указана организация, по которой вводится индивидуальный график!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ГрафикРаботы" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиГрафикРаботы(ВыборкаПоСтрокамДокумента, Отказ)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""График работы"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		СписокСообщений.Добавить(Перечисления.ВидыСообщений.Ошибка, СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!");
		Отказ = Истина;
	КонецЕсли;
	
	// Несколько одинаковых сотрудников
	Если ВыборкаПоСтрокамДокумента.КоличествоДублейСотрудников > 1 Тогда
		СписокСообщений.Добавить(Перечисления.ВидыСообщений.Ошибка, СтрокаНачалаСообщенияОбОшибке + "обнаружен сотрудник, который введен второй раз!");
		Отказ = Истина;
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		СписокСообщений.Добавить(Перечисления.ВидыСообщений.Ошибка, СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!");
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиГрафикРаботы()

// Проверяет уникальность записей сотрудников, чтобы на одного сотрудника в одном 
// периоде был только один документ Ввода индивидуальных графиков.
//
Процедура ПроверитьУникальностьЗаписей(Отказ)
	
	ЗапросПроверкаУникальности = Новый Запрос;
	ЗапросПроверкаУникальности.УстановитьПараметр("ДокументСсылка", Ссылка);
	ЗапросПроверкаУникальности.УстановитьПараметр("Месяц", ПериодРегистрации);
	ЗапросПроверкаУникальности.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПериодРегистрации));
	ЗапросПроверкаУникальности.УстановитьПараметр("КонецМесяца", КонецМесяца(ПериодРегистрации));
	
	ЗапросПроверкаУникальности.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы.Сотрудник,
	|	ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы.Сотрудник.Наименование,
	|	ВЫБОР
	|		КОГДА (НЕ ОтработанныеВоВредных.НомерСтроки ЕСТЬ NULL )
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ОтработанныеВоВредных.Регистратор)
	|	КОНЕЦ КАК ДокументПредставление
	|ИЗ
	|	Документ.ВводОтработанногоВремениВоВредныхУсловиях.ГрафикРаботы КАК ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтработанныеВоВредных КАК ОтработанныеВоВредных
	|		ПО (ОтработанныеВоВредных.Сотрудник = ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы.Сотрудник)
	|			И (ОтработанныеВоВредных.Месяц = &Месяц)
	|			И (ОтработанныеВоВредных.Регистратор <> &ДокументСсылка)
	|ГДЕ
	|	ВводОтработанногоВремениВоВредныхУсловияхГрафикРаботы.Ссылка = &ДокументСсылка
	|	И (НЕ ОтработанныеВоВредных.НомерСтроки ЕСТЬ NULL )";
	
	РезультатЗапроса = ЗапросПроверкаУникальности.Выполнить().Выбрать();		
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		СтрокаСотрудников = "";
		
		Пока РезультатЗапроса.Следующий() Цикл
			СтрокаСотрудников = СтрокаСотрудников + Символы.ПС + РезультатЗапроса.СотрудникНаименование + " (" + РезультатЗапроса.ДокументПредставление + ")";
		КонецЦикла;
		
		СписокСообщений.Добавить(Перечисления.ВидыСообщений.Ошибка, "На следующих сотрудников уже введены документы учета времени в этом периоде:" + СтрокаСотрудников);
		Отказ = Истина;
 	КонецЕсли;

КонецПроцедуры // ПроверитьУникальностьЗаписей()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определенной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуОтработанныеВоВредных(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборОтработанныеВоВредных)
	
	Движение = НаборОтработанныеВоВредных.Добавить();
	 
	// Измерения
	Движение.Сотрудник = ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.Месяц = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	 
	// Ресурсы
	Движение.Дней = ВыборкаПоСтрокамДокумента.ВсегоДней;
	Движение.Часов = ВыборкаПоСтрокамДокумента.ВсегоЧасов;
	
КонецПроцедуры // ДобавитьСтрокуСводныеИндивидуальныеГрафики()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры

// Проецура - обработчик события "ПередЗаписью" документа
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ГрафикРаботы);
	ДополнительныеСвойства.Вставить("ЗаписьПроведенного", Проведен);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения" документа
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
		
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СписокСообщений = Новый СписокЗначений;
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
		ПроверитьУникальностьЗаписей(Отказ);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			// Графики работы
			// получим реквизиты табличной части
			ВыборкаПоГрафикуРаботы = СформироватьЗапросПоГрафикРаботы(ВыборкаПоШапкеДокумента).Выбрать();
			
			
			Пока ВыборкаПоГрафикуРаботы.Следующий() Цикл
					
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиГрафикРаботы(ВыборкаПоГрафикуРаботы, Отказ);
				Если НЕ Отказ Тогда
						
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуОтработанныеВоВредных(ВыборкаПоГрафикуРаботы, ВыборкаПоШапкеДокумента, Движения.ОтработанныеВоВредных);
						
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
	Если СписокСообщений.Количество() > 0 Тогда
		
		#Если Клиент Тогда
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
			ОбработкаКомментариев.УдалитьСообщения();
			ОбработкаКомментариев.ДобавитьСообщение(Заголовок, Перечисления.ВидыСообщений.Раздел);
			Для каждого ЭлементСписка Из СписокСообщений Цикл
				ОбработкаКомментариев.ДобавитьСообщение(ЭлементСписка.Представление, ЭлементСписка.Значение);
			КонецЦикла;
			ОбработкаКомментариев.ПоказатьСообщения();
		#Иначе
			Для каждого ЭлементСписка Из СписокСообщений Цикл
				ОбщегоНазначения.СообщитьОбОшибке(ЭлементСписка.Представление, Отказ, Заголовок);
			КонецЦикла; 
		#КонецЕсли 
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

СписокСоответствийВидаУчетаВремениИНазванийЯчеек = Новый СписокЗначений;
СписокСоответствийВидаУчетаВремениИНазванийЯчеек.Добавить(Перечисления.ВидыУчетаВремени.ПоЧасам, "Часов");

ВидУчетаВремениПоДням  = Перечисления.ВидыУчетаВремени.ПоДням;
ВидУчетаВремениПоЧасам  = Перечисления.ВидыУчетаВремени.ПоЧасам;



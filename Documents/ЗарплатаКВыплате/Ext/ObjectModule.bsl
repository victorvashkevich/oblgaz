////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мУпрощенныйУчетВзаиморасчетов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("НачалоМесяца",  НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, ЗарплатаКВыплатеЗарплата.Физлицо.Наименование) КАК ФизЛицо,
	|	ЗарплатаКВыплатеЗарплата.Сумма,
	|	ЗарплатаКВыплатеЗарплата.НомерСтроки КАК НомерПП
	|ИЗ
	|	Документ.ЗарплатаКВыплате.Зарплата КАК ЗарплатаКВыплатеЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&ДатаДокумента,
	|				Физлицо В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ЗарплатаКВыплатеЗарплата.Физлицо
	|					ИЗ
	|						Документ.ЗарплатаКВыплате.Зарплата КАК ЗарплатаКВыплатеЗарплата
	|					ГДЕ
	|						ЗарплатаКВыплатеЗарплата.Ссылка = &Ссылка)) КАК ФИОФизЛицСрезПоследних
	|		ПО ЗарплатаКВыплатеЗарплата.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСРаботниками.Остатки(
	|				&НачалоМесяца,
	|				Физлицо В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ЗарплатаКВыплатеЗарплата.Физлицо
	|					ИЗ
	|						Документ.ЗарплатаКВыплате.Зарплата КАК ЗарплатаКВыплатеЗарплата
	|					ГДЕ
	|						ЗарплатаКВыплатеЗарплата.Ссылка = &Ссылка)) КАК ВзаиморасчетыНачалоМесяца
	|		ПО ЗарплатаКВыплатеЗарплата.Физлицо = ВзаиморасчетыНачалоМесяца.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСРаботниками.Остатки(
	|				&ДатаДокумента,
	|				Физлицо В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ЗарплатаКВыплатеЗарплата.Физлицо
	|					ИЗ
	|						Документ.ЗарплатаКВыплате.Зарплата КАК ЗарплатаКВыплатеЗарплата
	|					ГДЕ
	|						ЗарплатаКВыплатеЗарплата.Ссылка = &Ссылка)) КАК ВзаиморасчетыДатаДокумента
	|		ПО ЗарплатаКВыплатеЗарплата.Физлицо = ВзаиморасчетыДатаДокумента.Физлицо
	|ГДЕ
	|	ЗарплатаКВыплатеЗарплата.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПП";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ И РАСЧЕТА ДОКУМЕНТА

Функция ПолучитьЗарплатуПоХарактеруВыплаты(ФизЛица = Неопределено)
	
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПлановыйАванс Тогда
		ТаблицаЗарплат = ПолучитьОстаткиПлановогоАванса(ФизЛица)
	Иначе
		ТаблицаЗарплат = ПолучитьОстаткиЗарплатыЗаМесяц(ФизЛица)
	КонецЕсли;
	
	ТаблицаЗарплат.Сортировать("ФизЛицо");
	ТаблицаЗарплат.Индексы.Добавить("ФизЛицо");
	
	Возврат ТаблицаЗарплат;

КонецФункции		

Функция ПолучитьОстаткиПлановогоАванса(Физлица = Неопределено) Экспорт
	
		Период = КонецМесяца(Дата);
		ДатаКадровая= КонецМесяца(Дата);
		
		Если ЗначениеЗаполнено(Подразделение) Тогда
			ФизЛица = ПолучитьФизлицаРаботниковПодразделенияНаДату(Подразделение, ДатаКадровая, ФизЛица)
		КонецЕсли;

		Запрос = Новый Запрос();		
		
		Запрос.УстановитьПараметр("Период",	Период);
		Запрос.УстановитьПараметр("ПоВсемФизлицам", 	Физлица = Неопределено);	
		Запрос.УстановитьПараметр("Физлица", 			Физлица);	
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АвансыРаботникам.Физлицо КАК Физлицо,
		|	АвансыРаботникам.СуммаАванса
		|ПОМЕСТИТЬ ВТПлановыйАванс
		|ИЗ
		|	РегистрСведений.АвансыРаботникам КАК АвансыРаботникам
		|ГДЕ
		|	(&ПоВсемФизлицам
		|			ИЛИ АвансыРаботникам.Физлицо В (&Физлица))
		|	И АвансыРаботникам.СуммаАванса <> 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗарплатаЗаМесяц.Физлицо КАК Физлицо,
		|	СУММА(ЗарплатаЗаМесяц.СуммаУпр) КАК СуммаВзаиморасчетов
		|ПОМЕСТИТЬ ВТВыплаченныйАванс
		|ИЗ
		|	РегистрНакопления.ЗарплатаЗаМесяц КАК ЗарплатаЗаМесяц
		|ГДЕ
		|	ЗарплатаЗаМесяц.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И ЗарплатаЗаМесяц.Период = &Период
		|	И (&ПоВсемФизлицам
		|			ИЛИ ЗарплатаЗаМесяц.Физлицо В (&Физлица))
		|	И ЗарплатаЗаМесяц.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПлановыйАванс)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаЗаМесяц.Физлицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыйАванс.Физлицо,
		|	ПлановыйАванс.СуммаАванса - ЕСТЬNULL(ВыплаченныйАванс.СуммаВзаиморасчетов, 0) КАК Сумма
		|ИЗ
		|	ВТПлановыйАванс КАК ПлановыйАванс
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыплаченныйАванс КАК ВыплаченныйАванс
		|		ПО ПлановыйАванс.Физлицо = ВыплаченныйАванс.Физлицо
		|ГДЕ
		|	ПлановыйАванс.СуммаАванса - ЕСТЬNULL(ВыплаченныйАванс.СуммаВзаиморасчетов, 0) > 0";
		
	ТаблицаЗарплат = Запрос.Выполнить().Выгрузить();
	ТаблицаЗарплат.Индексы.Добавить("ФизЛицо");
	ТаблицаЗарплат.Сортировать("ФизЛицо");
	
	Возврат ТаблицаЗарплат;
		
КонецФункции	

Функция ПолучитьОстаткиЗарплатыЗаМесяц(Физлица = Неопределено) Экспорт
	
	ДатаКадровая= КонецМесяца(Дата);
	ДатаОстатков= КонецМесяца(Дата) + 1;
		
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ФизЛица = ПолучитьФизлицаРаботниковПодразделенияНаДату(Подразделение, ДатаКадровая, ФизЛица)
	КонецЕсли;

	Запрос = Новый Запрос();		
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ФизЛица = ПолучитьФизлицаРаботниковПодразделенияНаДату(Подразделение, ДатаКадровая, ФизЛица, Истина)
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОстатков",	ДатаОстатков);
	Запрос.УстановитьПараметр("ПоВсемФизлицам",	Физлица = Неопределено);	
	Запрос.УстановитьПараметр("Физлица", 		Физлица);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаОстатки.Физлицо,
	|	СУММА(ЗарплатаОстатки.СуммаУпрОстаток) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ЗарплатаЗаМесяц.Остатки(
	|			&ДатаОстатков,
	|			&ПоВсемФизлицам
	|				ИЛИ Физлицо В (&Физлица)) КАК ЗарплатаОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаОстатки.Физлицо
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗарплатаОстатки.СуммаУпрОстаток) > 0";
		
	ТаблицаЗарплат = Запрос.Выполнить().Выгрузить();
	ТаблицаЗарплат.Индексы.Добавить("ФизЛицо");
	ТаблицаЗарплат.Сортировать("ФизЛицо");
	
	Возврат ТаблицаЗарплат;
		
КонецФункции	

Функция ПолучитьФизлицаРаботниковПодразделенияНаДату(Подразделение = Неопределено, ДатаКадровая, ФизЛица = Неопределено, ВключаяУволенных = Ложь)
		
		Запрос = Новый Запрос();
		
		Запрос.УстановитьПараметр("Дата",				ДатаКадровая);
		Запрос.УстановитьПараметр("Подразделение",		Подразделение);
		Запрос.УстановитьПараметр("ПоВсемФизлицам", 	Физлица = Неопределено);	
		Запрос.УстановитьПараметр("Физлица", 			Физлица);	
		Запрос.УстановитьПараметр("ВключаяУволенных",	ВключаяУволенных);	
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиСрезПоследних.ФизЛицо
		|ИЗ
		|	РегистрСведений.Работники.СрезПоследних(
		|			&Дата,
		|			&ПоВсемФизлицам
		|				ИЛИ Физлицо В (&Физлица)) КАК РаботникиСрезПоследних
		|ГДЕ
		|	РаботникиСрезПоследних.Подразделение В ИЕРАРХИИ(&Подразделение)
		|	И (&ВключаяУволенных
		|			ИЛИ РаботникиСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))";
		
		Возврат(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Физлицо"));	
	
КонецФункции

Процедура ЗаполнитьПоТаблицеЗарплат(ТаблицаЗарплат)
	
	Если ТаблицаЗарплат.Количество() = 0 Тогда
		Зарплата.Очистить();
	Иначе
		
		Зарплата.Загрузить(ТаблицаЗарплат);
		
		// Устанавливаем для ТЧ Зарплата значения по умолчанию
		Для Каждого СтрокаЗарплаты Из Зарплата Цикл
			СтрокаЗарплаты.Авторасчет = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПоТаблицеЗарплат(ТаблицаЗарплат, ФизЛица)
	
	// дополняем таблицу зарплат до заказанных физлиц
	Для Каждого ФизЛицо Из ФизЛица Цикл
		Если ТаблицаЗарплат.Найти(ФизЛицо, "ФизЛицо") = Неопределено Тогда
			СтрокаЗарплаты = ТаблицаЗарплат.Добавить();
			СтрокаЗарплаты.ФизЛицо = ФизЛицо;
			ЗарплатаКВыплатеПереопределяемый.ЗаполнитьСтрокуЗарплаты(СтрокаЗарплаты)
		КонецЕсли;	
	КонецЦикла;
	
	// обновляем документ данными из таблицы зарплат
	Для Каждого СтрокаТаблицы Из ТаблицаЗарплат Цикл
		СтрокаЗарплаты = Зарплата.Найти(СтрокаТаблицы.ФизЛицо, "ФизЛицо");
		Если СтрокаЗарплаты <> Неопределено И СтрокаЗарплаты.Авторасчет Тогда
			ЗарплатаКВыплатеПереопределяемый.ЗаполнитьСтрокуЗарплаты(СтрокаЗарплаты, СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ ДОКУМЕНТА
//

Процедура ПроверитьЗаполнениеШапки(ШапкаДокумента, Отказ, Заголовок = "")

	// ХарактерВыплаты
	Если НЕ ЗначениеЗаполнено(ШапкаДокумента.ХарактерВыплаты) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан характер выплат!", Отказ, Заголовок);
	КонецЕсли;
	
	ЗарплатаКВыплатеПереопределяемый.ПроверитьЗаполнениеШапкиДополнительно(ШапкаДокумента, Отказ, Заголовок)
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиЗарплаты(СтрокаЗарплаты, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаЗарплаты.НомерСтроки) +
									""" табл. части ""Зарплата"": ";
	
	// Работник
	Если НЕ ЗначениеЗаполнено(СтрокаЗарплаты.ФизЛицо) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Сумма
	Если СтрокаЗарплаты.Сумма = 0 Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана сумма к выплате. Строка пропущена.");
	КонецЕсли;
	Если СтрокаЗарплаты.Сумма < 0 Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указана отрицательная сумма к выплате!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

// Процедура осуществляет регистрацию сведений о выплатах при упрощенном учете взаиморасчетов
//
Процедура ЗарегистрироватьСведенияОВыплатахРаботникамПоПлатежнымВедомостям()
	
	Для Каждого СтрокаЗарплаты Из Зарплата Цикл
	
		СтрокаДвижения = Движения.СведенияОВыплатахРаботникамПоПлатежнымВедомостям.Добавить();
		
		СтрокаДвижения.ФизЛицо   = СтрокаЗарплаты.ФизЛицо;
		СтрокаДвижения.Ведомость = Ссылка;
		
	КонецЦикла
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура Автозаполнение() Экспорт
	
	Отказ = Ложь; // для возврата из процедуры, если проверка покажет, что обязательные реквизиты не заполнены
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(ЭтотОбъект, Отказ, "Расчет документа: " + СокрЛП(ЭтотОбъект));
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗарплат = ПолучитьЗарплатуПоХарактеруВыплаты();
	
	ЗарплатаКВыплатеПереопределяемый.РассчитатьЗарплату(ЭтотОбъект, ТаблицаЗарплат);
	
	ЗаполнитьПоТаблицеЗарплат(ТаблицаЗарплат);
	
КонецПроцедуры //  Автозаполнение

// Рассчитывает суммы к выплате по документу
//
Процедура Рассчитать(ФизЛица = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(ЭтотОбъект, Отказ, "Расчет документа: " + СокрЛП(ЭтотОбъект));

	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если ФизЛица = Неопределено Тогда
		ФизЛица = Зарплата.ВыгрузитьКолонку("Физлицо");
	КонецЕсли;
	
	// берем суммы начисленных зарплат по характеру выплаты
	ТаблицаЗарплат = ПолучитьЗарплатуПоХарактеруВыплаты(ФизЛица); 
	
	ЗарплатаКВыплатеПереопределяемый.РассчитатьЗарплату(ЭтотОбъект, ТаблицаЗарплат);
	
	ОбновитьПоТаблицеЗарплат(ТаблицаЗарплат, ФизЛица);
	
КонецПроцедуры // Рассчитать

Функция ПолучитьДокументыВведенныеНаОсновании() Экспорт
	
	ЗапросПоПлатежнымДокументам = Новый Запрос;
	ЗапросПоПлатежнымДокументам.УстановитьПараметр("Ведомость", Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка) КАК Представление
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	|ГДЕ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = &Ведомость
	|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Проведен";
	
	ЗапросПоПлатежнымДокументам.Текст = ТекстЗапроса;
	
	Возврат ЗапросПоПлатежнымДокументам.Выполнить().Выгрузить();;
	
КонецФункции

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Печать" Тогда
	
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗарплатаКВыплате_Печать";
		
		// получаем данные для печати
		Выборка = СформироватьЗапросДляПечати().Выбрать();
		
		// получаем макет
		Макет = ПолучитьМакет("Макет");
		
		// выводим шапку документа
		ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); 
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРаботника"); // строка работника
		
		// выводим данные
		Пока Выборка.Следующий() Цикл
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Зарплата к выплате "));
	
КонецФункции // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Печать","Зарплата к выплате");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// получим учтенную политику по персоналу в части упрощенного учета взаиморасчетов
	Если мУпрощенныйУчетВзаиморасчетов = Неопределено Тогда
		глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу").Свойство("УпрощенныйУчетВзаиморасчетов", мУпрощенныйУчетВзаиморасчетов);
	КонецЕсли;
	
	// Нельзя отменять проведение документа, оплаченного кассовым документом
	Если НЕ ПометкаУдаления И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если ПолучитьДокументыВведенныеНаОсновании().Количество()  > 0 Тогда
			
			// Заголовок для сообщений об ошибках записи.
			Заголовок = "Отмена проведения документа: " + СокрЛП(Ссылка);
			
			ОбщегоНазначения.СообщитьОбОшибке("По документу уже созданы платежные документы, отмена проведения невозможна!", Отказ, Заголовок);
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Зарплата.Итог("Сумма");
	
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Зарплата, , "Физлицо");
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	// получим учтенную политику по персоналу в части упрощенного учета взаиморасчетов
	Если мУпрощенныйУчетВзаиморасчетов = Неопределено Тогда
		глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу").Свойство("УпрощенныйУчетВзаиморасчетов", мУпрощенныйУчетВзаиморасчетов);
	КонецЕсли;
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(ЭтотОбъект, Отказ, Заголовок);
	
	// Надо проверить табличную часть
	Если НЕ Отказ Тогда
		Для Каждого СтрокаЗарплаты Из Зарплата Цикл
			ПроверитьЗаполнениеСтрокиЗарплаты(СтрокаЗарплаты, Отказ, Заголовок);
		КонецЦикла;
	КонецЕсли;
	
	// Заполняем движения
	Если НЕ Отказ Тогда
		ЗарплатаКВыплатеПереопределяемый.ПровестиПоХарактеруВыплаты(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Если НЕ Отказ И мУпрощенныйУчетВзаиморасчетов Тогда
		ЗарплатаКВыплатеПереопределяемый.ПровестиВзаиморасчеты(ЭтотОбъект, Отказ);
		ЗарегистрироватьСведенияОВыплатахРаботникамПоПлатежнымВедомостям();
	КонецЕсли;	
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если Основание = НеОпределено Тогда
		Возврат;
	КонецЕсли;

	// Общие реквизиты
	ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	ЗарплатаКВыплатеПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект);		
	Дата = ОбщегоНазначения.ПолучитьРабочуюДату();

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.НачислениеЗарплатыРаботникам") Тогда
		ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		Дата = Основание.Дата;
		Подразделение = Основание.Подразделение;
		Автозаполнение();
	КонецЕсли;
	
	
КонецПроцедуры


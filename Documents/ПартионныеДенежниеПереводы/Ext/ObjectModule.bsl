Процедура Автозаполнение() Экспорт
	
	Запрос = новый Запрос;
	
	Запрос.УстановитьПараметр("ПочтовыйСбор", ПланыВидовРасчета.УдержанияОрганизаций.ПочтовыйСборПоИЛ);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Организация", Организация);
	УдержанияПоИЛ = Новый массив;
	УдержанияПоИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентом);
	УдержанияПоИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомБезБЛ);
	УдержанияПоИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПредела);
    УдержанияПоИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПределаБезБЛ);
    УдержанияПоИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммой);
    УдержанияПоИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммойДоПредела);
	Запрос.УстановитьПараметр("УдержанияПоИЛ", УдержанияПоИЛ);
	Запрос.УстановитьПараметр("ДоставкаНаДом", Истина);
	Запрос.УстановитьПараметр("Пол", Перечисления.ПолФизическихЛиц.Женский);
	Запрос.УстановитьПараметр("Адрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ФактическийАдрес", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	Запрос.УстановитьПараметр("ПустаяСтрана" , Справочники.КлассификаторСтранМира.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтранаПоУмолчанию",  Справочники.КлассификаторСтранМира.НайтиПоКоду(112));
	
	
	ЗапросТекст = 
	"ВЫБРАТЬ
	|	УдержанияРаботниковОрганизаций.Результат КАК СуммаПеревода,
	|	УдержанияРаботниковОрганизаций1.Результат КАК ПочтовыйСбор,
	|	&Пол КАК Пол,
	|	"","" + АдресаРегистрации.Поле1 + "","" + АдресаРегистрации.Поле2 + "","" + АдресаРегистрации.Поле3 + "",""+ АдресаРегистрации.Поле4 + "","" + АдресаРегистрации.Поле5 + "","" + АдресаРегистрации.Поле6 + "","" + АдресаРегистрации.Поле7 + "","" + АдресаРегистрации.Поле8 + "","" + АдресаРегистрации.Поле9 КАК Адрес,
	|	АдресаРегистрации.Поле11 КАК ТипУлицы,
	|	ВЫБОР
	|		КОГДА УдержанияРаботниковОрганизаций1.ДокументОснование.Получатель.СтранаРегистрации ЕСТЬ NULL 
	|				ИЛИ УдержанияРаботниковОрганизаций1.ДокументОснование.Получатель.СтранаРегистрации = &ПустаяСтрана
	|			ТОГДА &СтранаПоУмолчанию
	|	КОНЕЦ КАК Страна,
	|	УдержанияРаботниковОрганизаций1.ФизЛицо КАК Плательщик,
	|	УдержанияРаботниковОрганизаций1.ДокументОснование.Получатель КАК Получатель,
	|	УдержанияРаботниковОрганизаций1.ДокументОснование.Получатель.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизаций1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.УдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизаций
	|		ПО УдержанияРаботниковОрганизаций1.ФизЛицо = УдержанияРаботниковОрганизаций.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаРегистрации
	|		ПО УдержанияРаботниковОрганизаций1.ДокументОснование.Получатель = АдресаРегистрации.Объект
	|			И (АдресаРегистрации.Тип = &Адрес)
	|			И (АдресаРегистрации.Вид = &ФактическийАдрес)
	|ГДЕ
	|	УдержанияРаботниковОрганизаций.ВидРасчета В(&УдержанияПоИЛ)
	|	И УдержанияРаботниковОрганизаций.ПериодРегистрации = &ПериодРегистрации
	|	И УдержанияРаботниковОрганизаций1.ВидРасчета = &ПочтовыйСбор
	|	И УдержанияРаботниковОрганизаций1.ПериодРегистрации = &ПериодРегистрации
	|	И УдержанияРаботниковОрганизаций1.Организация = &Организация";
	
	
	
	Запрос.Текст = ЗапросТекст;
	ВременнаяТаблица = (Запрос.Выполнить().Выгрузить());
	МассивФИО = Новый Массив;
    ВременнаяТаблица.Колонки.Добавить("Фамилия",,,50);
	ВременнаяТаблица.Колонки.Добавить("Имя",,,50);
	ВременнаяТаблица.Колонки.Добавить("Отчество",,,50);
	
	Для Каждого ТекущаяСтрока из ВременнаяТаблица цикл
		
		МассивФИО = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ТекущаяСтрока.НаименованиеПолное," ");
		ТекущаяСтрока.Фамилия = МассивФИО[0];
	    ТекущаяСтрока.Имя = МассивФИО[1];
	    ТекущаяСтрока.Отчество = МассивФИО[2];
	КонецЦикла;
		
	ДенежныеПереводы.Загрузить(ВременнаяТаблица);
	
КонецПроцедуры

#Если Клиент Тогда

Функция СформироватьВыходнойФайл(Отказ) Экспорт
	
	КодСтраныБЗ = Новый СписокЗначений;
	КодСтраныБЗ.Добавить("031");
	КодСтраныБЗ.Добавить("051");
	КодСтраныБЗ.Добавить("268");
	КодСтраныБЗ.Добавить("398");
	КодСтраныБЗ.Добавить("498");
	КодСтраныБЗ.Добавить("643");
	КодСтраныБЗ.Добавить("762");
	КодСтраныБЗ.Добавить("804");
	КодСтраныБЗ.Добавить("860");
	
	Вопрос = "Перед формированием файла необходимо записать документ. Записать?";
	Если НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ЭтотОбъект,Вопрос) тогда
		Возврат "";
	КонецЕсли;
		
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	
	
    ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	Если ВыборкаПоШапкеДокумента.Следующий()=0 тогда
		Отказ = Истина;
		Возврат "";
	КонецЕсли;	

	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	Если Отказ тогда
		Возврат "";
	КонецЕсли;
	
	Результат					=	СформироватьЗапросПоРаботникиОрганизации();
	ВыборкаПоРаботникиОрганизации			=	Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);	
	
	ТекстФайла	=	"";
	
	//Формируем заголовок выходного файла
	УНП =  ВыборкаПоШапкеДокумента.ИНН;
	НаименованиеПолное =  ВыборкаПоШапкеДокумента.НаименованиеПолное;
	НомерСчета =  ВыборкаПоШапкеДокумента.НомерСчета;
	МФО =  ВыборкаПоШапкеДокумента.МФО;
	КодВалюты =  ВыборкаПоШапкеДокумента.КодВалюты;
	
	ТекстФайла = Новый ТекстовыйДокумент;
	ТекстФайла.ДобавитьСтроку(УНП+"|"+Врег(НаименованиеПолное));
	ТекстФайла.ДобавитьСтроку("*||||"+НомерСчета+"|"+МФО+"|"+КодВалюты);
	
	Пока ВыборкаПоРаботникиОрганизации.Следующий()	Цикл
		
		ПереводСумма = СокрЛП(Строка(Формат(ВыборкаПоРаботникиОрганизации.СуммаПеревода, "ЧГ=0")));
		СуммаПочтовыйСбор = СокрЛП(Строка(Формат(ВыборкаПоРаботникиОрганизации.ПочтовыйСбор, "ЧГ=0")));
		КодСтраны = СокрЛП(ВыборкаПоРаботникиОрганизации.Код);
		Если КодСтраны = "112" тогда
			КодНаправления = "1";
		ИначеЕсли КодСтраныБЗ.НайтиПоЗначению(КодСтраны)<> Неопределено тогда
			КодНаправления = "2";
		Иначе
			КодНаправления = "3";
		КонецЕсли;
		КатегорияПеревода = "1";
		ВидУведомления = "0";
		ДоставкаНаДом = "0";
		Пенсия = "0";
		Алименты = "1";
		ДоговорнойТариф = "0";
		ТестовоеСообщение = "";
		Фамилия  =  Врег(СокрЛП(ВыборкаПоРаботникиОрганизации.Фамилия));
 		Имя  = Врег(СокрЛП(ВыборкаПоРаботникиОрганизации.Имя));
		Отчество =   Врег(СокрЛП(ВыборкаПоРаботникиОрганизации.Отчество));
 		Пол  = ВыборкаПоРаботникиОрганизации.Пол;
		СтрАдрес = ВыборкаПоРаботникиОрганизации.Адрес;
		СтруктураАдрес = РегламентированнаяОтчетность.РазложитьАдрес(СтрАдрес);
		
		МассивОбл = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтруктураАдрес.Регион," ");
        Область = МассивОбл[0];
		//
		//МассивГород = РазложитьСтрокуВМассивПодстрок(СтруктураАдрес.Сельсовет," ");
		//Город = "";
		//Если МассивГород.ВГраница() > 0 тогда
		//	Для К = 0 по МассивГород.ВГраница()-1 цикл
		//		Город = Город+МассивГород[К];
		//	КонецЦикла;
		//Иначе  
		//	Город = МассивГород[0];
		//КонецЕсли;
		Город = СтруктураАдрес.Город;
		

		Улица = СтруктураАдрес.Улица;
	
		ТипУлицы = ВыборкаПоРаботникиОрганизации.ТипУлицы;
			
			Если ТипУлицы = "11" тогда
				КодУлицы = "1";
			ИначеЕсли ТипУлицы = "14" тогда
				КодУлицы = "2"; 
			ИначеЕсли  ТипУлицы = "21" тогда
				КодУлицы = "3"; 
			ИначеЕсли  ТипУлицы = "17" тогда
				КодУлицы = "4";
			ИначеЕсли  ТипУлицы = "15" тогда
				КодУлицы = "5";
			ИначеЕсли  ТипУлицы = "19" тогда
				КодУлицы = "6";
			ИначеЕсли  ТипУлицы = "22" тогда
				КодУлицы = "8";
            ИначеЕсли  ТипУлицы = "12" тогда
				КодУлицы = "8";
            ИначеЕсли  ТипУлицы = "16" тогда
				КодУлицы = "9";
			ИначеЕсли  ТипУлицы = "23" тогда
				КодУлицы = "10";
			Иначе
				КодУлицы = "0";
            КонецЕсли;
        
		
		
		ТекстФайла.ДобавитьСтроку("|"+ПереводСумма+"|"+СуммаПочтовыйСбор+"|"+КодНаправления+
								  "|"+КатегорияПеревода+"|"+ВидУведомления+"|"+ДоставкаНаДом+"|"+Пенсия+"|"+Алименты+"|"+ДоговорнойТариф+"|"+ТестовоеСообщение+
								  "|"+Фамилия+"|"+Имя+"|"+Отчество+"|"+Пол+"|"+СтруктураАдрес.Индекс+"|"+КодСтраны+
								  "|"+?(СтруктураАдрес.Регион="","",Врег(Область)+" ОБЛ")+?(СтруктураАдрес.Район="","",","+Врег(СтруктураАдрес.Район)+" Р-Н")+"|"+Врег(Город)+"|"+КодУлицы+"|"+Врег(Улица)+
								  "|"+СтруктураАдрес.Дом+"|"+СтруктураАдрес.Корпус+"|"+СтруктураАдрес.Квартира+"||");

	КонецЦикла;
	Возврат ТекстФайла.ПолучитьТекст();
КонецФункции

#КонецЕсли

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПартионныеДенежниеПереводы.Организация.ИНН КАК ИНН,
	|	ПартионныеДенежниеПереводы.Организация.НаименованиеПолное КАК НаименованиеПолное,
	|	ПартионныеДенежниеПереводы.СчетОрганизации.НомерСчета КАК НомерСчета,
	|	ПартионныеДенежниеПереводы.СчетОрганизации.Банк.Код КАК МФО,
	|	ПартионныеДенежниеПереводы.СчетОрганизации.ВалютаДенежныхСредств.Код КАК КодВалюты,
	|	ПартионныеДенежниеПереводы.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.ПартионныеДенежниеПереводы КАК ПартионныеДенежниеПереводы
	|ГДЕ
	|	ПартионныеДенежниеПереводы.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НаименованиеПолное) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, которая подает сведения!", Отказ, Заголовок);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Ответственный) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указано ответственное лицо!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИНН) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан УНП организации!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НомерСчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан Счет!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.МФО) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан МФО банка!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КодВалюты) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан код Валюты", Отказ, Заголовок);
	КонецЕсли;

	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Функция	СформироватьЗапросПоРаботникиОрганизации()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("Мужской", Перечисления.ПолФизическихЛиц.Мужской);
	Запрос.УстановитьПараметр("Мужской", Перечисления.ПолФизическихЛиц.Женский);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДенежныеПереводы.СуммаПеревода,
	|	ДенежныеПереводы.ПочтовыйСбор,
	|	ВЫБОР КОГДА ДенежныеПереводы.Пол = &Мужской ТОГДА ""1"" ИНАЧЕ ""2"" КОНЕЦ КАК Пол ,
	|	ДенежныеПереводы.Фамилия,
	|	ДенежныеПереводы.Имя,
	|	ДенежныеПереводы.Отчество,
	|	ДенежныеПереводы.Страна.Код КАК Код,
	|	ДенежныеПереводы.Адрес,
	|	ДенежныеПереводы.ТипУлицы
	|ИЗ
	|	Документ.ПартионныеДенежниеПереводы.ДенежныеПереводы КАК ДенежныеПереводы
	|ГДЕ
	|	ДенежныеПереводы.Ссылка = &ДокументСсылка";
	
	 Возврат Запрос.Выполнить();

	
КонецФункции

Процедура ОбработкаПроведения(Отказ, Режим)
	//При проведении файл формируем заново 
	ТекстФайла = "";
#Если Клиент Тогда

	ТекстФайла = СформироватьВыходнойФайл(Отказ);
#КонецЕсли

	Если Отказ тогда
		Возврат;
	КонецЕсли;	 

	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения["АрхивДанныхРегламентированнойОтчетности"].Добавить();
	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Файл обмена с АС ПП";
	Запись.Данные = ТекстФайла;
КонецПроцедуры

// Процедура заполняет поля объекта редактирования адреса по структуре
Процедура ЗаполнитьРедактированияАдресаПоСтруктуре(Объект, СтруктураАдреса) Экспорт
	
	Если СтруктураАдреса = Неопределено Тогда
		
		Объект.Поле1 = "";
		Объект.Поле2 = "";
		Объект.Поле3 = "";
		Объект.Поле4 = "";
		Объект.Поле5 = "";
		Объект.Поле6 = "";
		Объект.Поле7 = "";
		Объект.Поле8 = "";
		Объект.Поле9 = "";
		Объект.Поле10 = "";
		Объект.Поле11 = "";
		Объект.Поле12 = "";
		Объект.Поле13 = "";
		Объект.Представление = "";
	
		Возврат;
	КонецЕсли;
	
	Если СтруктураАдреса.Свойство("ЗаПределамиРФ") Тогда			
		Объект.Поле1 = СтруктураАдреса.Страна;
		Объект.Представление = СтруктураАдреса.Представление;		
	Иначе
		Объект.Поле1 = СтруктураАдреса.Индекс;
		Объект.Поле2 = СтруктураАдреса.Регион;
		Объект.Поле3 = СтруктураАдреса.Район;
		Объект.Поле4 = СтруктураАдреса.Город;
		Объект.Поле5 = СтруктураАдреса.НаселенныйПункт;
		Объект.Поле6 = СтруктураАдреса.Улица;
		Объект.Поле7 = СтруктураАдреса.Дом;
		Объект.Поле8 = СтруктураАдреса.Корпус;
		Объект.Поле9 = СтруктураАдреса.Квартира;
		//Объект.Поле10 = СтруктураАдреса.Улица;
		//Объект.Поле11 = СтруктураАдреса.Дом;
		//Объект.Поле12 = СтруктураАдреса.Корпус;
		//Объект.Поле13 = СтруктураАдреса.Квартира;
		
		//Определяем представление сразу же
		Объект.Представление = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(Объект);
	КонецЕсли;
  
КонецПроцедуры

 //Функция раскладывает строку с данными об адресе (в формате 9 запятых) на элементы структуры
Функция РазложитьСтрокуАдрес(Знач СтрокаАдрес) Экспорт
	
	Страна = "";
	Индекс = "";
	Регион = "";
	Район = "";
	Город = "";
	НаселенныйПункт = "";
	Улица ="";
	Дом ="";
	Корпус ="";
	Квартира ="";

	МассивАдрес	=	ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаАдрес);
	ЭлементовВМассиве = МассивАдрес.Количество();   

	Если ЭлементовВМассиве	>	0	тогда
		Страна	=	СокрЛП(МассивАдрес[0]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	1	тогда
		Индекс	=	СокрЛП(МассивАдрес[1]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	2	тогда
		Регион	=	СокрЛП(МассивАдрес[2]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	3	тогда
		Район	=	СокрЛП(МассивАдрес[3]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	4	тогда
		Город	=	СокрЛП(МассивАдрес[4]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	5	тогда
		НаселенныйПункт	=	СокрЛП(МассивАдрес[5]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	6	тогда
		Улица	=	СокрЛП(МассивАдрес[6]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	7	тогда
		Дом	=	СокрЛП(МассивАдрес[7]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	8	тогда
		Корпус	=	СокрЛП(МассивАдрес[8]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	9	тогда
		Квартира	=	СокрЛП(МассивАдрес[9]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Страна",Страна);
	СтруктураВозврата.Вставить("Индекс",Индекс);
	СтруктураВозврата.Вставить("Регион",Регион);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Город",Город);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Улица",Улица);
	СтруктураВозврата.Вставить("Дом",Дом);
	СтруктураВозврата.Вставить("Корпус",Корпус);
	СтруктураВозврата.Вставить("Квартира",Квартира);

	Возврат СтруктураВозврата;
	
КонецФункции	 

// Функция возвращает строковое представление адреса (в формате через запятую) , включая незаполненные поля
Функция ПолучитьАдрес(Запись) Экспорт
	
	Результат = "";
	
	Если Запись = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(Запись) = Запись.Представление Тогда	
		
	//	Результат ="," + 
	//	СокрЛП(Запись.Поле1) + ", " +
	//	СокрЛП(Запись.Поле2) + ", ";
	//	Если СокрЛП(Запись.Поле3) <> "" Тогда
	//		Результат = Результат + СокрЛП(Запись.Поле3)+ " р-н"+ ", ";
	//	Иначе
	//		Результат = Результат + ", ";
	//	КонецЕсли;
	//	Если СокрЛП(Запись.Поле4) <> "" Тогда
	//		Результат = Результат + СокрЛП(Запись.Поле10)+" "+СокрЛП(Запись.Поле4)+ ", ";
	//	Иначе
	//		Результат = Результат + ", ";
	//	КонецЕсли;
	//	Если СокрЛП(Запись.Поле5) <> "" Тогда
	//		Результат = Результат + СокрЛП(Запись.Поле5)+ " с/с"+ ", ";
	//	Иначе
	//		Результат = Результат + ", ";
	//	КонецЕсли;
	//	Если СокрЛП(Запись.Поле6) <> "" Тогда
	//	СокрУл = "";
	//	Если СокрЛП(Запись.Поле11) <> "" Тогда
	//		СпрСокр = Справочники.АдресныеСокращения;
	//		ТекСокр = СпрСокр.НайтиПоКоду(СокрЛП(Запись.Поле11));
	//		Если ТекСокр <> Неопределено тогда
	//			СокрУл = ТекСокр.Сокращение;
	//		КонецЕсли;
	//	КонецЕсли;
	//		Результат = Результат + СокрЛП(СокрУл) + " " + СокрЛП(Запись.Поле6) + ", ";
	//	Иначе 
	//		Результат = Результат + ", ";
	//	КонецЕсли;
	//	Результат = Результат + 
	//	СокрЛП(Запись.Поле7) + ", " +
	//	СокрЛП(Запись.Поле8) + ", " +
	//	СокрЛП(Запись.Поле9);
	//Иначе
	//	Результат = Запись.Представление;
	//КонецЕсли;
	//
	//Если ПустаяСтрока(СтрЗаменить(Результат, ",", "")) Тогда
	//	Результат = "";
	//КонецЕсли;
	
		Результат = 
		СокрЛП(Запись.Поле2) + ", " +
		СокрЛП(Запись.Поле3) + ", " +
		СокрЛП(Запись.Поле4) + ", " +
		СокрЛП(Запись.Поле5) + ", " +
		СокрЛП(Запись.Поле6) + ", " +
		СокрЛП(Запись.Поле7) + ", " +
		СокрЛП(Запись.Поле8) + ", " +
		СокрЛП(Запись.Поле9);
		
	Иначе
		Результат = Запись.Представление;
	КонецЕсли;
	
	
	Если ПустаяСтрока(СтрЗаменить(Результат, ",", "")) Тогда
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции




////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьДокумент(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций") Тогда
		
		ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект,Основание);
		
		СписокДействий = Новый СписокЗначений;
		СписокДействий.Добавить(Перечисления.ВидыДействияСНачислением.Начать);
		СписокДействий.Добавить(Перечисления.ВидыДействияСНачислением.Изменить);
		
		ДокументОснование = Основание;
		
		ЗапросДляЗаполнения = Новый Запрос;
		
		ЗапросДляЗаполнения.УстановитьПараметр("ДокументСсылка",	Основание);
		ЗапросДляЗаполнения.УстановитьПараметр("ПарамДействия",		СписокДействий);
		
		ЗапросДляЗаполнения.Текст =
		"ВЫБРАТЬ
		|	ДолгосрочныеНачисленияОрганизации.Сотрудник,
		|	ДолгосрочныеНачисленияОрганизации.Ссылка,
		|	ДолгосрочныеНачисленияОрганизации.ВидРасчета,
		|	ДолгосрочныеНачисленияОрганизации.ДатаДействия КАК ДатаНачала
		|ИЗ
		|	Документ.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.ОсновныеНачисления КАК ДолгосрочныеНачисленияОрганизации
		|ГДЕ
		|	ДолгосрочныеНачисленияОрганизации.Ссылка = &ДокументСсылка
		|	И ДолгосрочныеНачисленияОрганизации.Действие В(&ПарамДействия)";
		
		ОсновныеНачисления.Загрузить(ЗапросДляЗаполнения.Выполнить().Выгрузить());
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриемНаРаботуВОрганизацию") Тогда
		
		ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект,Основание);
		
		ДокументОснование = Основание;
		
		ЗапросДляЗаполнения = Новый Запрос;
		
		ЗапросДляЗаполнения.УстановитьПараметр("ДокументСсылка",	Основание);
		ЗапросДляЗаполнения.Текст =
		"ВЫБРАТЬ
		|	НачисленияПриПриеме.Сотрудник,
		|	НачисленияПриПриеме.ВидРасчета,
		|	ПринятыеРаботники.ДатаПриема КАК ДатаНачала
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК НачисленияПриПриеме
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПринятыеРаботники
		|		ПО НачисленияПриПриеме.Ссылка = ПринятыеРаботники.Ссылка
		|			И НачисленияПриПриеме.Сотрудник = ПринятыеРаботники.Сотрудник
		|ГДЕ
		|	НачисленияПриПриеме.Ссылка = &ДокументСсылка";
		
		ОсновныеНачисления.Загрузить(ЗапросДляЗаполнения.Выполнить().Выгрузить());
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КадровоеПеремещениеОрганизаций") Тогда
		
		ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект,Основание);
		
		СписокДействий = Новый СписокЗначений;
		СписокДействий.Добавить(Перечисления.ВидыДействияСНачислением.Начать);
		СписокДействий.Добавить(Перечисления.ВидыДействияСНачислением.Изменить);
		
		ДокументОснование = Основание;
		
		ЗапросДляЗаполнения = Новый Запрос;
		
		ЗапросДляЗаполнения.УстановитьПараметр("ДокументСсылка",	Основание);
		ЗапросДляЗаполнения.УстановитьПараметр("ПарамДействия",		СписокДействий);
		
		ЗапросДляЗаполнения.Текст =
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	ПринятыеРаботники.ДатаНачала КАК ДатаНачала
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ПринятыеРаботники
		|		ПО Начисления.Ссылка = ПринятыеРаботники.Ссылка
		|			И Начисления.Сотрудник = ПринятыеРаботники.Сотрудник
		|ГДЕ
		|	Начисления.Ссылка = &ДокументСсылка
		|	И Начисления.Действие В(&ПарамДействия)";
		
		ОсновныеНачисления.Загрузить(ЗапросДляЗаполнения.Выполнить().Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокумент()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.Дата,
	|	ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.Организация,
	//vvv
	|	ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.НепосредственныйВводОтражения,
	//
	|	ВЫБОР
	|		КОГДА ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	|			ТОГДА ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.Организация
	|		ИНАЧЕ ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.Ссылка
	|ИЗ
	|	Документ.ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций КАК ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций
	|ГДЕ
	|	ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);

	// Описание текста запроса:
	//
	// 1. Выборка "Начисления": 
	//		Выбираются строки ТЧ Начисления. Сразу проверяем наличие строк-дублей.  
	// 2. Выборка "СуществующиеДвижения": 
	//		Проверяем на наличие существующих конфликтных движений в регистре сведений. 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.Наименование,
	|	Начисления.ВидСтроки,
	|	Начисления.ВидРасчета,
	|	Начисления.СпособОтраженияВБухучете,
	//vvv
	|	Начисления.СчетДт,
	|	Начисления.СубконтоДт1,
	|	Начисления.СубконтоДт2,
	|	Начисления.СубконтоДт3,
	|	Начисления.СубконтоДт4,
    //
	|	Начисления.КодДоходаЕСН,
	|	Начисления.ДатаНачала,
	|	ВЫБОР
	|		КОГДА Начисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	Начисления.КонфликтныйНомерСтроки,
	|	Начисления.НомерСтроки,
	|	СуществующиеДвижения.Регистратор.Представление КАК КонфликтныйДокумент,
	|	Начисления.ОтнесениеРасходовКДеятельностиЕНВД
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|		ТЧОсновныеНачисления.Сотрудник КАК Сотрудник,
	|		ТЧОсновныеНачисления.ВидРасчета КАК ВидРасчета,
	|		ТЧОсновныеНачисления.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете,
	//vvv
	|		ТЧОсновныеНачисления.СчетДт,
	|		ТЧОсновныеНачисления.СубконтоДт1,
	|		ТЧОсновныеНачисления.СубконтоДт2,
	|		ТЧОсновныеНачисления.СубконтоДт3,
	|		ТЧОсновныеНачисления.СубконтоДт4,
    //
	|		ТЧОсновныеНачисления.КодДоходаЕСН КАК КодДоходаЕСН,
	|		ТЧОсновныеНачисления.ОтнесениеРасходовКДеятельностиЕНВД КАК ОтнесениеРасходовКДеятельностиЕНВД,
	|		ТЧОсновныеНачисления.ДатаНачала КАК ДатаНачала,
	|		МИНИМУМ(ПовторяющиесяСтроки.НомерСтроки) КАК КонфликтныйНомерСтроки,
	|		""Основные начисления"" КАК ВидСтроки
	|	ИЗ
	|		Документ.ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК ТЧОсновныеНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК ПовторяющиесяСтроки
	|			ПО ТЧОсновныеНачисления.Ссылка = ПовторяющиесяСтроки.Ссылка
	|				И ТЧОсновныеНачисления.НомерСтроки < ПовторяющиесяСтроки.НомерСтроки
	|				И ТЧОсновныеНачисления.ВидРасчета = ПовторяющиесяСтроки.ВидРасчета
	|				И ТЧОсновныеНачисления.Сотрудник = ПовторяющиесяСтроки.Сотрудник
	|	ГДЕ
	|		ТЧОсновныеНачисления.Ссылка = &ДокументСсылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТЧОсновныеНачисления.ВидРасчета,
	|		ТЧОсновныеНачисления.СпособОтраженияВБухучете,
	//vvv
	|		ТЧОсновныеНачисления.СчетДт,
	|		ТЧОсновныеНачисления.СубконтоДт1,
	|		ТЧОсновныеНачисления.СубконтоДт2,
	|		ТЧОсновныеНачисления.СубконтоДт3,
	|		ТЧОсновныеНачисления.СубконтоДт4,
    //
	|		ТЧОсновныеНачисления.КодДоходаЕСН,
	|		ТЧОсновныеНачисления.ДатаНачала,
	|		ТЧОсновныеНачисления.НомерСтроки,
	|		ТЧОсновныеНачисления.Сотрудник,
	|		ТЧОсновныеНачисления.ОтнесениеРасходовКДеятельностиЕНВД) КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК СуществующиеДвижения
	|		ПО Начисления.ВидРасчета = СуществующиеДвижения.ВидРасчета
	|			И Начисления.ДатаНачала = СуществующиеДвижения.Период
	|			И Начисления.Сотрудник = СуществующиеДвижения.Сотрудник";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры:
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, в которую принимается работник!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры:
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса по товарам документа, 
//	Отказ						- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части """ + ВыборкаПоСтрокамДокумента.ВидСтроки + """: ";

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаНачала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала)  Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата изменений!", Отказ, Заголовок);
	КонецЕсли;
	
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано начисление!", Отказ, Заголовок);
	КонецЕсли;
	
	// Одинаковые строки
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтныйНомерСтроки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке  + "по работнику " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " обнаружено повторное назначение способа учета того же начисления в строке №" + ВыборкаПоСтрокамДокумента.КонфликтныйНомерСтроки + "!", Отказ, Заголовок);
	КонецЕсли;
	
	// Движения в регистре на дату из документа
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтныйДокумент) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "на дату "+ ВыборкаПоСтрокамДокумента.ДатаНачала + " способ учета начисления уже зарегистрирован документом " + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//	ВыборкаПоШапкеДокумента			- выборка из результата запроса по шапке документа,
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)

	//Движения по регистру "РеглУчетПлановыхНачисленийРаботниковОрганизаций"
	Движение = Движения.РеглУчетПлановыхНачисленийРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаНачала;
	
	// Измерения
	Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ВидРасчета					= ВыборкаПоРаботникиОрганизации.ВидРасчета;
	
	// Ресурсы
	Движение.СпособОтраженияВБухучете	= ВыборкаПоРаботникиОрганизации.СпособОтраженияВБухучете;
	Движение.КодДоходаЕСН				= ВыборкаПоРаботникиОрганизации.КодДоходаЕСН;
	Движение.ОтнесениеРасходовКДеятельностиЕНВД = ВыборкаПоРаботникиОрганизации.ОтнесениеРасходовКДеятельностиЕНВД;
    //vvv
	Если ВыборкаПоШапкеДокумента.НепосредственныйВводОтражения Тогда
		Движение.СпособОтраженияВБухучете 	= ПодобратьСпособОтражения(ВыборкаПоРаботникиОрганизации.СчетДт,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт1,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт2,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт3,
																			ВыборкаПоРаботникиОрганизации.СубконтоДт4);
	КонецЕсли;	
	//
	
	// Реквизиты

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// выполним выборку по табличной части документа
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента);
			ВыборкаСтрокЗапроса = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			// обходим строки запроса, проверяем данные и формируем движения
			Пока ВыборкаСтрокЗапроса.Следующий() Цикл
				
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ, Заголовок);
				Если НЕ Отказ Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаЗаполнения(Основание)
	
	ЗаполнитьДокумент(Основание);
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ОсновныеНачисления);
	
КонецПроцедуры // ПередЗаписью()
//vvv
Функция ПолучитьНаименованиеСпособаОтражения(СпособОтражения)

	НаименовниеДебета = "";
	СубконтоДебета = "";
	Если ЗначениеЗаполнено(СпособОтражения.СчетДт) Тогда
		ВидыСубконтоСчета = СпособОтражения.СчетДт.ВидыСубконто;
		Для Ном = 1 по ВидыСубконтоСчета.Количество() Цикл
			Если ЗначениеЗаполнено(СпособОтражения["СубконтоДт"+Ном]) Тогда
				Если ТипЗнч(СпособОтражения["СубконтоДт"+Ном])=Тип("СправочникСсылка.ПодразделенияОрганизаций") или 
					 ТипЗнч(СпособОтражения["СубконтоДт"+Ном])=Тип("СправочникСсылка.Автомобили") Тогда
					СубконтоДебета = СубконтоДебета + "<" + СокрЛП(Строка(СпособОтражения["СубконтоДт"+Ном].Владелец))+"."+СокрЛП(Строка(СпособОтражения["СубконтоДт"+Ном])) + "> ";
				Иначе
					СубконтоДебета = СубконтоДебета + "<" + СокрЛП(Строка(СпособОтражения["СубконтоДт"+Ном])) + "> ";					
				КонецЕсли;
			ИначеЕсли ВидыСубконтоСчета[Ном-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации Тогда
				//пропускаем
			ИначеЕсли ВидыСубконтоСчета[Ном-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения Тогда	
				СубконтоДебета = СубконтоДебета + "<подб. авт.> ";
			Иначе
				СубконтоДебета = СубконтоДебета + "<...> ";
			КонецЕсли;	
		КонецЦикла;                 
		НаименовниеДебета = "Дт" + СпособОтражения.СчетДт + " " + СубконтоДебета;
	КонецЕсли;
	
	НаименовниеКредита = "";
	СубконтоКредита = "";
	Если ЗначениеЗаполнено(СпособОтражения.СчетКт) Тогда
		ВидыСубконтоСчета = СпособОтражения.СчетКт.ВидыСубконто;
		Для Ном = 1 по ВидыСубконтоСчета.Количество() Цикл
			Если ЗначениеЗаполнено(СпособОтражения["СубконтоКт"+Ном]) Тогда
				Если ТипЗнч(СпособОтражения["СубконтоКт"+Ном])=Тип("СправочникСсылка.ПодразделенияОрганизаций") или 
					 ТипЗнч(СпособОтражения["СубконтоКт"+Ном])=Тип("СправочникСсылка.Автомобили") Тогда
					СубконтоКредита = СубконтоКредита + "<" + СокрЛП(Строка(СпособОтражения["СубконтоКт"+Ном].Владелец))+"."+СокрЛП(Строка(СпособОтражения["СубконтоКт"+Ном])) + "> ";
				Иначе
					СубконтоКредита = СубконтоКредита + "<" +СокрЛП(Строка(СпособОтражения["СубконтоКт"+Ном])) + "> ";					
				КонецЕсли;
			ИначеЕсли ВидыСубконтоСчета[Ном-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации Тогда
				//пропускаем
			ИначеЕсли ВидыСубконтоСчета[Ном-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения Тогда	
				СубконтоКредита = СубконтоКредита + "<подб. авт.> ";
			Иначе
				СубконтоКредита = СубконтоКредита + "<...> ";
			КонецЕсли;	
		КонецЦикла;
		НаименовниеКредита = "Кт" + СпособОтражения.СчетКт + " " + СубконтоКредита;
	КонецЕсли;
	
	Возврат СОКРЛП(НаименовниеДебета + " " + НаименовниеКредита);


КонецФункции // ПолучитьНаименованиеСпособаОтражения()
//vvv
Функция ПодобратьСпособОтражения(СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СубконтоДт4)
	
	Запрос=Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпособыОтраженияЗарплатыВРеглУчете.Ссылка
	|ИЗ
	|	Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК СпособыОтраженияЗарплатыВРеглУчете
	|ГДЕ
	|	СпособыОтраженияЗарплатыВРеглУчете.СчетДт = &СчетДт
	|	И СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт1 = &СубконтоДт1
	|	И СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт2 = &СубконтоДт2
	|	И СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт3 = &СубконтоДт3
	|	И СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт4 = &СубконтоДт4
	|	И СпособыОтраженияЗарплатыВРеглУчете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда)";
	
	Запрос.УстановитьПараметр("СчетДт",СчетДТ);
	Запрос.УстановитьПараметр("СубконтоДт1",СубконтоДт1);
	Запрос.УстановитьПараметр("СубконтоДт2",СубконтоДт2);
	Запрос.УстановитьПараметр("СубконтоДт3",СубконтоДт3);
	Запрос.УстановитьПараметр("СубконтоДт4",СубконтоДт4);
	Выборка=Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СпособОтражения=Выборка.Ссылка;
	Иначе
		Отражение = Справочники.СпособыОтраженияЗарплатыВРеглУчете.СоздатьЭлемент();
		Отражение.СчетДт=СчетДТ;       
		Отражение.СубконтоДт1=СубконтоДт1;
		Отражение.СубконтоДт2=СубконтоДт2;
		Отражение.СубконтоДт3=СубконтоДт3;
		Отражение.СубконтоДт4=СубконтоДт4;
		Отражение.СчетКт=ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		Отражение.Наименование = ПолучитьНаименованиеСпособаОтражения(Отражение);
		Отражение.Записать();
		СпособОтражения=Отражение.Ссылка;
		Сообщить("Создан новый способ отражения "+СокрЛП(Отражение.Наименование));
	КонецЕсли;

	Возврат СпособОтражения;
	
КонецФункции
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

// Механизм исправлений
Перем мВосстанавливатьДвижения;
Перем мСоответствиеДвижений;
Перем мИсправляемыйДокумент;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//	Название макета печати передается в качестве параметра,
//	по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета	- строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ИмяМакета <> "Диаграмма" Тогда
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Ссылка",		Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(ОтпускаОрганизацииРаботникиОрганизации.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(ОтпускаОрганизацииРаботникиОрганизации.ДатаОкончания) КАК ДатаОкончания
		|ИЗ
		|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботникиОрганизации
		|ГДЕ
		|	ОтпускаОрганизацииРаботникиОрганизации.Ссылка = &Ссылка
		|	И ОтпускаОрганизацииРаботникиОрганизации.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ДатаНачала <> Null и Выборка.ДатаОкончания <> Null и Не ПроцедурыУправленияПерсоналом.РегламентированныйКалендарьЗаполнен(Выборка.ДатаНачала,Выборка.ДатаОкончания,Истина) Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	ИмяФормы = "";
	//Если ИмяМакета = "Т6а_от_6_4_2001" Тогда
	//	ИмяФормы = " (форма Т-6а)";
	//	ТабДокумент = ПечатьТ6а();
		
	Если ИмяМакета = "Т6а_от_5_1_2004" Тогда
		ИмяФормы = " (форма Т-6а)";
		ТабДокумент = ПечатьТ6а_2004();
	//	
	//ИначеЕсли ИмяМакета = "Т6_от_6_4_2001" Тогда
	//	ИмяФормы = " (форма Т-6)";
	//	ТабДокумент = ПечатьТ6();
	//	
	ИначеЕсли ИмяМакета = "Т6_от_5_1_2004" Тогда
		ИмяФормы = " (форма Т-6)";
		ТабДокумент = ПечатьТ6_2004();
	ИначеЕсли ИмяМакета = "ЗапискаОбОтпуске" Тогда
		ИмяФормы = " (Записка об отпуске)";
		ТабДокумент = ПечатьЗапискиОбОтпуске();
	//vvv
	ИначеЕсли ИмяМакета = "Записка" Тогда
		ИмяФормы = " (Записка об отпуске (a5))";
		ТабДокумент = ПечатьЗапискиОбОтпуске1();
	ИначеЕсли ИмяМакета = "Записка1" Тогда
		ИмяФормы = " (Записка об отпуске)";
		ТабДокумент = ПечатьЗапискиОбОтпуске2();	
	//
		
	ИначеЕсли ИмяМакета = "Диаграмма" тогда
		
		Если НЕ Проведен Тогда
			Предупреждение("Документ можно распечатать только после его проведения!");
			Возврат Неопределено;
		КонецЕсли;

		ИмяФормы = " (диаграмма отпусков)";
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ОтпускаОрганизацииРаботники.ДатаОкончания) КАК ДатаКон,
		|	МИНИМУМ(ОтпускаОрганизацииРаботники.ДатаНачала) КАК ДатаНач
		|ИЗ
		|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботники
		|
		|ГДЕ
		|	ОтпускаОрганизацииРаботники.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			Отчет = Отчеты.ДиаграммаГанта.Создать();
			Отчет.ВидОтчета = "Фактические отпуска работников организаций";
			Отчет.Периодичность = 2;
			Отчет.ЗаполнитьНачальныеНастройки();
			Отчет.ДатаНач = ?(ЗначениеЗаполнено(Выборка.ДатаНач),НачалоМесяца(Выборка.ДатаНач),НачалоГода(РабочаяДата));
			Отчет.ДатаКон = ?(ЗначениеЗаполнено(Выборка.ДатаКон),КонецМесяца(Выборка.ДатаКон),КонецГода(РабочаяДата));
			Возврат Отчет.Печать(Ссылка);
			
		Иначе
			Предупреждение("Ошибка исполнения запроса к т.ч.");
		КонецЕсли;
		Возврат Неопределено
	КонецЕсли;

	Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним + ИмяФормы));

КонецФункции // Печать()

#КонецЕсли

// Процедура заполняет связанные поля периода отпуска и количества дней
// в зависимости от измененного значения
//
Процедура ЗаполнитьДатыОтпуска(ДатаНачала, ДатаОкончания, КоличествоДней, ИмяИзмененногоПараметра = "", ВидОтпуска = Неопределено, ЗапрашиватьПользователя = Истина, ИмяИзменяемогоПараметра = "") Экспорт
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Если ЗначениеЗаполнено(ДатаОкончания) И ЗначениеЗаполнено(КоличествоДней) И ЗапрашиватьПользователя Тогда
			Если Найти(ИмяИзмененногоПараметра, "ДатаОкончания") > 0 Тогда
				ИзменитьПериодОтпускаПоЗапросу(КоличествоДней, КоличествоДнейОтпускаПоКалендарнымДням(ДатаНачала, ДатаОкончания, Ложь), "количество дней отпуска");
			Иначе
				ИзменитьПериодОтпускаПоЗапросу(ДатаОкончания, ДатаОкончанияОтпускаПоКалендарнымДням(ДатаНачала, КоличествоДней, Ложь), "дату окончания отпуска");
			КонецЕсли;
		Иначе
			Если Найти(ИмяИзменяемогоПараметра, "ДатаНачала") > 0 Тогда
				Если ЗначениеЗаполнено(КоличествоДней) Тогда
					ДатаНачала = ДатаНачалаОтпускаПоКалендарнымДням(ДатаОкончания, КоличествоДней, Ложь);
				КонецЕсли;
			//vvv
			ИначеЕсли Найти(ИмяИзменяемогоПараметра, "ДатаОкончания") > 0 Тогда
				Если ЗначениеЗаполнено(КоличествоДней) Тогда
					ДатаОкончания = ДатаОкончанияОтпускаПоКалендарнымДням(ДатаНачала, КоличествоДней,Ложь);
				КонецЕсли;
			//
			Иначе
				Если ЗначениеЗаполнено(ДатаОкончания) Тогда
					КоличествоДней = КоличествоДнейОтпускаПоКалендарнымДням(ДатаНачала, ДатаОкончания, Ложь);
				ИначеЕсли ЗначениеЗаполнено(КоличествоДней) Тогда
					ДатаОкончания = ДатаОкончанияОтпускаПоКалендарнымДням(ДатаНачала, КоличествоДней,Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Найти(ИмяИзменяемогоПараметра, "ДатаНачала") > 0 И ЗначениеЗаполнено(ДатаОкончания) И ЗначениеЗаполнено(КоличествоДней) Тогда
			ДатаНачала = ДатаНачалаОтпускаПоКалендарнымДням(ДатаОкончания, КоличествоДней, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДатыОтпуска

Процедура ИзменитьПериодОтпускаПоЗапросу(ПрежнееЗначение, НовоеЗначение, Формулировка)
	
	Если НовоеЗначение <> ПрежнееЗначение Тогда
		ТекстВопроса = "Указанный период отпуска
		|не соответствует количеству дней отпуска!
		|Изменить " + Формулировка + "?";
		Ответ = РаботаСДиалогами.ЗадатьВопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПрежнееЗначение = НовоеЗначение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ИзменитьПериодОтпускаПоЗапросу

//vvv добавим экспорт
//Функция КоличествоДнейОтпускаПоКалендарнымДням(ДатаНачала, ДатаОкончания, ВключатьПраздники = Ложь) 
Функция КоличествоДнейОтпускаПоКалендарнымДням(ДатаНачала, ДатаОкончания, ВключатьПраздники = Ложь) Экспорт
	
	Если НЕ ВключатьПраздники Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СУММА(РегламентированныйПроизводственныйКалендарь.КалендарныеДни) КАК КоличествоДней
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &ДатаНачала
		|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &ДатаОкончания");
		
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КоличествоДней = Выборка.КоличествоДней;
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Проверьте заполнение производственного календаря!");
			КоличествоДней = Неопределено;
		КонецЕсли;
	Иначе
		КоличествоДней = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала)) / 86400 + 1;
	КонецЕсли;
	
	Возврат КоличествоДней;
	
КонецФункции // КоличествоДнейОтпускаПоКалендарнымДням

Функция ДатаНачалаОтпускаПоКалендарнымДням(ДатаОкончания, КоличествоДней, ВключатьПраздники = Ложь)
	
	Если НЕ ВключатьПраздники Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КоличествоДней.ДатаКалендаря КАК ДатаНачала
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДатыКалендаря.ДатаКалендаря КАК ДатаКалендаря,
		|		СУММА(Календарь.КалендарныеДни) КАК КалендарныеДни
		|	ИЗ
		|		РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ДатыКалендаря
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК Календарь
		|			ПО (Календарь.ДатаКалендаря >= ДатыКалендаря.ДатаКалендаря)
		|				И (Календарь.ДатаКалендаря МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаОкончания, ДЕНЬ, -&КоличествоДней) И &ДатаОкончания)
		|				И (ДатыКалендаря.ДатаКалендаря МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаОкончания, ДЕНЬ, -&КоличествоДней) И &ДатаОкончания)
		|				И (ДатыКалендаря.КалендарныеДни > 0)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДатыКалендаря.ДатаКалендаря) КАК КоличествоДней
		|ГДЕ
		|	КоличествоДней.КалендарныеДни = &КоличествоДней");
		
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		Запрос.УстановитьПараметр("КоличествоДней", КоличествоДней);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаНачала = Выборка.ДатаНачала;
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Проверьте заполнение производственного календаря!");
			ДатаНачала = Неопределено;
		КонецЕсли;
	Иначе	
		ДатаНачала = НачалоДня(ДатаОкончания) - (КоличествоДней - 1) * 86400;
	КонецЕсли;
	
	Возврат ДатаНачала;
	
КонецФункции // ДатаОкончанияОтпускаПоКалендарнымДням

Функция ДатаОкончанияОтпускаПоКалендарнымДням(ДатаНачала, КоличествоДней, ВключатьПраздники = Ложь)
	
	Если НЕ ВключатьПраздники Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДатыКалендаря.ДатаКалендаря КАК ДатаОкончания,
		|	СУММА(Календарь.КалендарныеДни) КАК КалендарныеДни
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ДатыКалендаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК Календарь
		|		ПО (Календарь.ДатаКалендаря МЕЖДУ &ДатаНачала И ДатыКалендаря.ДатаКалендаря)
		|ГДЕ
		|	ДатыКалендаря.ДатаКалендаря МЕЖДУ &ДатаНачала И ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, 2 * &КоличествоДней)
		|	И ДатыКалендаря.КалендарныеДни > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыКалендаря.ДатаКалендаря
		|
		|ИМЕЮЩИЕ
		|	СУММА(Календарь.КалендарныеДни) = &КоличествоДней";
		
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.УстановитьПараметр("КоличествоДней", КоличествоДней);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаОкончания = Выборка.ДатаОкончания;
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Проверьте заполнение производственного календаря!");
			ДатаОкончания = Неопределено;
		КонецЕсли;
	Иначе	
		ДатаОкончания = НачалоДня(ДатаНачала) + (КоличествоДней - 1) * 86400;
	КонецЕсли;
	
	Возврат ДатаОкончания;
	
КонецФункции // ДатаОкончанияОтпускаПоКалендарнымДням

// Заполняет табличную часть документа отпусками по графику отпусков
//
// Параметры
//	ДатаНачала, ДатаОкончания	– даты начала и окончания
//								  просмотра графика отпусков	
//
Процедура Автозаполнение(ДатаНачала, ДатаОкончания) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация!");
		Возврат
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) или НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		Сообщить("Не указаны границы периода просмотра графика отпусков!");
		Возврат
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаНачала",				ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",			ДатаОкончания);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ РаботникиОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачала, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизацииСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачала
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|	И ВЫБОР
	|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачала
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиОрганизации.Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|	И РаботникиОрганизации.Период > &ДатаНачала
	|	И РаботникиОрганизации.Период <= &ДатаОкончания
	|	И РаботникиОрганизации.ОбособленноеПодразделение = &Организация
	|	И РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Работники.Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|		ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|			И (ПериодыПерекрытия.Период > Работники.Период)
	|			И (ПериодыПерекрытия.Сотрудник = Работники.Сотрудник)
	|			И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|ГДЕ
	|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И Работники.Организация = &ГоловнаяОрганизация
	|	И Работники.ОбособленноеПодразделениеЗавершения = &Организация
	|	И Работники.ПериодЗавершения > &ДатаНачала
	|	И Работники.ПериодЗавершения <= &ДатаОкончания
	|	И Работники.ПричинаИзмененияСостоянияЗавершения <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ГрафикОтпусковОрганизации.Сотрудник КАК Сотрудник,
	|	ГрафикОтпусковОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ГрафикОтпусковОрганизации.Период КАК ДатаНачала,
	|	ГрафикОтпусковОрганизации.ДатаОкончания,
	|	ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный) КАК ПричинаОтсутствия
	|ПОМЕСТИТЬ ГрафикОтпусков
	|ИЗ
	|	РегистрСведений.ГрафикОтпусковОрганизаций КАК ГрафикОтпусковОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаботникиОрганизации КАК РаботникиОрганизации
	|		ПО ГрафикОтпусковОрганизации.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|		ПО ГрафикОтпусковОрганизации.Сотрудник = СостояниеРаботниковОрганизаций.Сотрудник
	|			И ГрафикОтпусковОрганизации.Период = СостояниеРаботниковОрганизаций.Период
	|			И (НачалоПериода(ГрафикОтпусковОрганизации.ДатаОкончания, День) = ДОБАВИТЬКДАТЕ(СостояниеРаботниковОрганизаций.ПериодЗавершения, ДЕНЬ, -1))
	|ГДЕ
	|	ГрафикОтпусковОрганизации.Организация = &ГоловнаяОрганизация
	|	И ГрафикОтпусковОрганизации.Период <= &ДатаОкончания
	|	И ГрафикОтпусковОрганизации.Период >= &ДатаНачала
	|	И ГрафикОтпусковОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный)
	|	И СостояниеРаботниковОрганизаций.Период ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикОтпусков.Сотрудник,
	|	ГрафикОтпусков.Физлицо,
	|	ГрафикОтпусков.ДатаНачала,
	|	ГрафикОтпусков.ДатаОкончания,
	|	ГрафикОтпусков.ПричинаОтсутствия,
	|	СУММА(Календарь.КалендарныеДни) КАК КоличествоДней
	|ИЗ
	|	ГрафикОтпусков КАК ГрафикОтпусков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК Календарь
	|		ПО (Календарь.ДатаКалендаря МЕЖДУ ГрафикОтпусков.ДатаНачала И ГрафикОтпусков.ДатаОкончания)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикОтпусков.Сотрудник,
	|	ГрафикОтпусков.Физлицо,
	|	ГрафикОтпусков.ДатаНачала,
	|	ГрафикОтпусков.ДатаОкончания,
	|	ГрафикОтпусков.ПричинаОтсутствия";
	
	РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // Автозаполнение()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//	Струткура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("Т6а_от_5_1_2004",	"Форма Т-6а");
	СтруктураМакетов.Вставить("Т6_от_5_1_2004",		"Форма Т-6");
	//СтруктураМакетов.Вставить("Т6а_от_6_4_2001",	"Форма Т-6а (от 06.04.2001)");
	//СтруктураМакетов.Вставить("Т6_от_6_4_2001",		"Форма Т-6 (от 06.04.2001)");
	//СтруктураМакетов.Вставить("ЗапискаОбОтпуске",			"Записка об отпуске");
	//vvv
	СтруктураМакетов.Вставить("Записка",			"Записка об отпуске (а5)");
	СтруктураМакетов.Вставить("Записка1",			"Записка об отпуске");
	//
	СтруктураМакетов.Вставить("Диаграмма",			"Диаграмма");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.ОтпускаОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПроведениеРасчетов.ЗаполнитьИсправлениеПоКадровомуДокументу(ЭтотОбъект, ИсходныйДокумент.Ссылка, Сотрудники);
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Если Клиент Тогда

// Формирует запрос по документу и связанным регистрам сведений
//
// Параметры: 
//	Режим	- строка, может принимать значения:
//			  "ПоРеквизитамДокумента"
//			  "ПоТабличнойЧастиДокумента"
//
// Возвращаемое значение:
//	Результат запроса с данными об организации или о работниках из табличной части
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ТекущийДокумент",	Ссылка);
	Запрос.УстановитьПараметр("Руководитель",		Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",		Дата);

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтпускаОрганизаций.Дата КАК ДатаДок,
		|	ОтпускаОрганизаций.Номер КАК НомерДок,
		|	ВЫРАЗИТЬ(ОтпускаОрганизаций.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
		|	ОтпускаОрганизаций.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Представление КАК ДолжностьРуководителя,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ФИОФизЛицСрезПоследних.Имя КАК СТРОКА(1)) + ""."" + ВЫРАЗИТЬ(ФИОФизЛицСрезПоследних.Отчество КАК СТРОКА(1)) + ""."" + ФИОФизЛицСрезПоследних.Фамилия, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
		|	ОтпускаОрганизаций.Организация.Префикс
		|ИЗ
		|	Документ.ОтпускаОрганизаций КАК ОтпускаОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО ОтпускаОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|ГДЕ
		|	ОтпускаОрганизаций.Ссылка = &ТекущийДокумент";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		Запрос.УстановитьПараметр("Праздник",				Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
		Запрос.УстановитьПараметр("ЕжегодныйОтпуск",		Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный);

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ОтпускаОрганизацииРаботники.Сотрудник.Наименование) КАК Работник,
		|	ЕСТЬNULL((ВЫРАЗИТЬ(ФИОФизЛиц.Имя КАК СТРОКА(1))) + ""."" + (ВЫРАЗИТЬ(ФИОФизЛиц.Отчество КАК СТРОКА(1))) + ""."" + ФИОФизЛиц.Фамилия, ОтпускаОрганизацииРаботники.Сотрудник.Наименование) КАК ИОФРаботника,
		|	ОтпускаОрганизацииРаботники.ДатаНачала,
		|	ОтпускаОрганизацииРаботники.ДатаОкончания,
		|	ОтпускаОрганизацииРаботники.РабочийГодПо,
		|	ОтпускаОрганизацииРаботники.РабочийГодС,
		|	ОтпускаОрганизацииРаботники.ПричинаОтсутствия,
		// vvv
		|	ОтпускаОрганизацииРаботники.ФлагМатПомощь,
		|	ОтпускаОрганизацииРаботники.ДнейКомпенсации,
		|	ОтпускаОрганизацииРаботники.Сотрудник,
		|	ОтпускаОрганизацииРаботники.НомерДок,
		//
		|	ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска.Представление,
		|	ВЫБОР
		|		КОГДА ДанныеОРаботникахОрганизации.ПериодЗавершения <= ОтпускаОрганизацииРаботники.ДатаНачала
		|				И ДанныеОРаботникахОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииЗавершенияНаименование
		|		ИНАЧЕ ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииНаименование
		|	КОНЕЦ КАК ПодразделениеРаботника,
		|	ВЫБОР
		|		КОГДА ДанныеОРаботникахОрганизации.ПериодЗавершения <= ОтпускаОрганизацииРаботники.ДатаНачала
		|				И ДанныеОРаботникахОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеОРаботникахОрганизации.ДолжностьЗавершенияНаименование
		|		ИНАЧЕ ДанныеОРаботникахОрганизации.ДолжностьНаименование
		|	КОНЕЦ КАК Должность,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия <> &ЕжегодныйОтпуск
		|			ТОГДА РАЗНОСТЬДАТ(ОтпускаОрганизацииРаботники.ДатаНачала, ОтпускаОрганизацииРаботники.ДатаОкончания, ДЕНЬ) + 1
		|		ИНАЧЕ СУММА(РегламентированныйПроизводственныйКалендарь.КалендарныеДни)
		|	КОНЕЦ КАК КоличествоДней,
		|	ОтпускаОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
		|	ОтпускаОрганизацииРаботники.Сотрудник.Код КАК ТабельныйНомер,
		|	ОтпускаОрганизацииРаботники.ДатаНачалаДоп
		|ИЗ
		|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				ФизЛицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ОтпускаОрганизацииРаботники.Сотрудник.Физлицо
		|					ИЗ
		|						Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботники
		|					ГДЕ
		|						ОтпускаОрганизацииРаботники.Ссылка = &ТекущийДокумент)) КАК ФИОФизЛиц
		|		ПО ОтпускаОрганизацииРаботники.Сотрудник.Физлицо = ФИОФизЛиц.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокДат.Сотрудник КАК Сотрудник,
		|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
		|			РаботникиОрганизации.Должность.Наименование КАК ДолжностьНаименование,
		|			РаботникиОрганизации.ПодразделениеОрганизацииЗавершения.Наименование КАК ПодразделениеОрганизацииЗавершенияНаименование,
		|			РаботникиОрганизации.ДолжностьЗавершения.Наименование КАК ДолжностьЗавершенияНаименование,
		|			РаботникиОрганизации.ПериодЗавершения КАК ПериодЗавершения
		|		ИЗ
		|			(ВЫБРАТЬ
		|				РаботникиВнутри.Сотрудник КАК Сотрудник,
		|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизаций
		|					ПО РаботникиВнутри.Период < ОтпускаОрганизаций.ДатаНачала
		|						И РаботникиВнутри.Сотрудник = ОтпускаОрганизаций.Сотрудник
		|			ГДЕ
		|				ОтпускаОрганизаций.Ссылка = &ТекущийДокумент
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиВнутри.Сотрудник) КАК СписокДат
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|				ПО СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник
		|					И СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период) КАК ДанныеОРаботникахОрганизации
		|		ПО ОтпускаОрганизацииРаботники.Сотрудник = ДанныеОРаботникахОрганизации.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтпускаОрганизацииРаботники.ДатаНачала И ОтпускаОрганизацииРаботники.ДатаОкончания)
		|ГДЕ
		|	ОтпускаОрганизацииРаботники.Ссылка = &ТекущийДокумент
		|	И НЕ ОтпускаОрганизацииРаботники.Сторно
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтпускаОрганизацииРаботники.ДатаНачала,
		|	ОтпускаОрганизацииРаботники.ДатаОкончания,
		|	ОтпускаОрганизацииРаботники.РабочийГодПо,
		|	ОтпускаОрганизацииРаботники.РабочийГодС,
		|	ОтпускаОрганизацииРаботники.ПричинаОтсутствия,
		//
		|	ОтпускаОрганизацииРаботники.ФлагМатПомощь,
		|	ОтпускаОрганизацииРаботники.ДнейКомпенсации,
		|	ОтпускаОрганизацииРаботники.Сотрудник,
		|	ОтпускаОрганизацииРаботники.НомерДок,
		//
		|	ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска,
		|	ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска.Представление,
		|	ОтпускаОрганизацииРаботники.НомерСтроки,
		|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ОтпускаОрганизацииРаботники.Сотрудник.Наименование),
		|	ЕСТЬNULL((ВЫРАЗИТЬ(ФИОФизЛиц.Имя КАК СТРОКА(1))) + ""."" + (ВЫРАЗИТЬ(ФИОФизЛиц.Отчество КАК СТРОКА(1))) + ""."" + ФИОФизЛиц.Фамилия, ОтпускаОрганизацииРаботники.Сотрудник.Наименование),
		|	ОтпускаОрганизацииРаботники.Сотрудник.Код,
		|	ВЫБОР
		|		КОГДА ДанныеОРаботникахОрганизации.ПериодЗавершения <= ОтпускаОрганизацииРаботники.ДатаНачала
		|				И ДанныеОРаботникахОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииЗавершенияНаименование
		|		ИНАЧЕ ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииНаименование
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ДанныеОРаботникахОрганизации.ПериодЗавершения <= ОтпускаОрганизацииРаботники.ДатаНачала
		|				И ДанныеОРаботникахОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеОРаботникахОрганизации.ДолжностьЗавершенияНаименование
		|		ИНАЧЕ ДанныеОРаботникахОрганизации.ДолжностьНаименование
		|	КОНЕЦ,
		|	ОтпускаОрганизацииРаботники.ДатаНачалаДоп
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

// Формирует запрос по документу и связанным регистрам сведений
//
// Параметры: 
//  Режим - строка, может принимать значения:
//			"ПоРеквизитамДокумента"
//			"ПоТабличнойЧастиДокумента"
//
// Возвращаемое значение:
//  Результат запроса с данными об организации или о работниках из табличной части
//
Функция СформироватьЗапросДляПечати2004(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	 Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",	 Дата);
	Запрос.УстановитьПараметр("ЕжегодныйОтпуск", Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный);
	Запрос.УстановитьПараметр("ПустойОтпуск",	 ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка());

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтпускаОрганизаций.Дата КАК ДатаДок,
		|	ОтпускаОрганизаций.Номер КАК НомерДок,
		|	ВЫРАЗИТЬ(ОтпускаОрганизаций.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
		|	ОтпускаОрганизаций.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Представление КАК ДолжностьРуководителя,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
		|	ОтпускаОрганизаций.Организация.Префикс
		|ИЗ
		|	Документ.ОтпускаОрганизаций КАК ОтпускаОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО ОтпускаОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|ГДЕ
		|	ОтпускаОрганизаций.Ссылка = &ТекущийДокумент";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		Запрос.УстановитьПараметр("Праздник", Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ОтпускаОрганизацииРаботники.Сотрудник.Наименование) КАК Работник,
		|	ВЫБОР
		|		КОГДА ДанныеОРаботникахОрганизации.ПериодЗавершения <= ОтпускаОрганизацииРаботники.ДатаНачала
		|				И ДанныеОРаботникахОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииЗавершенияНаименование
		|		ИНАЧЕ ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииНаименование
		|	КОНЕЦ КАК ПодразделениеРаботника,
		|	ВЫБОР
		|		КОГДА ДанныеОРаботникахОрганизации.ПериодЗавершения <= ОтпускаОрганизацииРаботники.ДатаНачала
		|				И ДанныеОРаботникахОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеОРаботникахОрганизации.ДолжностьЗавершенияНаименование
		|		ИНАЧЕ ДанныеОРаботникахОрганизации.ДолжностьНаименование
		|	КОНЕЦ КАК Должность,
		|	ОтпускаОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
		|	ОтпускаОрганизацииРаботники.ДатаНачала КАК ДатаНачалаВсего,
		|	ОтпускаОрганизацииРаботники.ДатаОкончания КАК ДатаОкончанияВсего,
		|	ОтпускаОрганизацииРаботники.РабочийГодПо,
		|	ОтпускаОрганизацииРаботники.РабочийГодС,
		|	ОтпускаОрганизацииРаботники.ПричинаОтсутствия,
		|	ОтпускаОрганизацииРаботники.Основание,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия = &ЕжегодныйОтпуск
		|			ТОГДА ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска.Наименование
		|		ИНАЧЕ ОтпускаОрганизацииРаботники.ПричинаОтсутствия
		|	КОНЕЦ КАК ВидДопОтпуска,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска <> &ПустойОтпуск
		|			ТОГДА ОтпускаОрганизацииРаботники.ДатаНачалаДоп
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия = &ЕжегодныйОтпуск
		|					ТОГДА """"
		|				ИНАЧЕ ОтпускаОрганизацииРаботники.ДатаНачала
		|			КОНЕЦ
		|	КОНЕЦ КАК ДатаСДоп,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия <> &ЕжегодныйОтпуск
		|				ИЛИ ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска <> &ПустойОтпуск
		|			ТОГДА ОтпускаОрганизацииРаботники.ДатаОкончания
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ДатаПоДоп,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия = &ЕжегодныйОтпуск
		|			ТОГДА ВЫБОР
		|					КОГДА ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска = &ПустойОтпуск
		|							ИЛИ ОтпускаОрганизацииРаботники.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ОтпускаОрганизацииРаботники.ДатаНачала
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ОтпускаОрганизацииРаботники.ДатаНачала < ОтпускаОрганизацииРаботники.ДатаНачалаДоп
		|								ТОГДА ОтпускаОрганизацииРаботники.ДатаНачала
		|							ИНАЧЕ """"
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия = &ЕжегодныйОтпуск
		|			ТОГДА ВЫБОР
		|					КОГДА ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска = &ПустойОтпуск
		|							ИЛИ ОтпускаОрганизацииРаботники.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ОтпускаОрганизацииРаботники.ДатаОкончания
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ОтпускаОрганизацииРаботники.ДатаНачала < ОтпускаОрганизацииРаботники.ДатаНачалаДоп
		|								ТОГДА ДОБАВИТЬКДАТЕ(ОтпускаОрганизацииРаботники.ДатаНачалаДоп, ДЕНЬ, -1)
		|							ИНАЧЕ """"
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия <> &ЕжегодныйОтпуск
		|			ТОГДА РАЗНОСТЬДАТ(ОтпускаОрганизацииРаботники.ДатаНачала, ОтпускаОрганизацииРаботники.ДатаОкончания, ДЕНЬ) + 1
		|		ИНАЧЕ ЕСТЬNULL(КалендарьДнейВсего.КалендарныеДни, 0)
		|	КОНЕЦ КАК ПродолжительностьВсего,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия <> &ЕжегодныйОтпуск
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(КалендарьОсновногоОтпуска.КалендарныеДни, 0)
		|	КОНЕЦ КАК Продолжительность,
		|	ОтпускаОрганизацииРаботники.Сотрудник.Код КАК ТабельныйНомер
		|ИЗ
		|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокДат.Сотрудник КАК Сотрудник,
		|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
		|			РаботникиОрганизации.Должность.Наименование КАК ДолжностьНаименование,
		|			СписокДат.НомерСтроки КАК НомерСтроки,
		|			РаботникиОрганизации.ПодразделениеОрганизацииЗавершения.Наименование КАК ПодразделениеОрганизацииЗавершенияНаименование,
		|			РаботникиОрганизации.ДолжностьЗавершения.Наименование КАК ДолжностьЗавершенияНаименование,
		|			РаботникиОрганизации.ПериодЗавершения КАК ПериодЗавершения
		|		ИЗ
		|			(ВЫБРАТЬ
		|				РаботникиВнутри.Сотрудник КАК Сотрудник,
		|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения,
		|				ОтпускаОрганизаций.НомерСтроки КАК НомерСтроки
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизаций
		|					ПО РаботникиВнутри.Период < ОтпускаОрганизаций.ДатаНачала
		|						И РаботникиВнутри.Сотрудник = ОтпускаОрганизаций.Сотрудник
		|			ГДЕ
		|				ОтпускаОрганизаций.Ссылка = &ТекущийДокумент
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ОтпускаОрганизаций.НомерСтроки,
		|				РаботникиВнутри.Сотрудник) КАК СписокДат
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|				ПО СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период
		|					И СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник) КАК ДанныеОРаботникахОрганизации
		|		ПО ОтпускаОрганизацииРаботники.НомерСтроки = ДанныеОРаботникахОрганизации.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОтпускаОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
		|			СУММА(РегламентированныйПроизводственныйКалендарь.КалендарныеДни) КАК КалендарныеДни
		|		ИЗ
		|			Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботники
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|				ПО (РегламентированныйПроизводственныйКалендарь.ВидДня <> &Праздник)
		|					И (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтпускаОрганизацииРаботники.ДатаНачала И ОтпускаОрганизацииРаботники.ДатаОкончания)
		|		ГДЕ
		|			ОтпускаОрганизацииРаботники.Ссылка = &ТекущийДокумент
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОтпускаОрганизацииРаботники.НомерСтроки) КАК КалендарьДнейВсего
		|		ПО ОтпускаОрганизацииРаботники.НомерСтроки = КалендарьДнейВсего.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОтпускаОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
		|			СУММА(РегламентированныйПроизводственныйКалендарь.КалендарныеДни) КАК КалендарныеДни
		|		ИЗ
		|			Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботники
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|				ПО (РегламентированныйПроизводственныйКалендарь.ВидДня <> &Праздник)
		|					И (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтпускаОрганизацииРаботники.ДатаНачала И ВЫБОР
		|						КОГДА ОтпускаОрганизацииРаботники.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|							ТОГДА ОтпускаОрганизацииРаботники.ДатаОкончания
		|						ИНАЧЕ ДОБАВИТЬКДАТЕ(ОтпускаОрганизацииРаботники.ДатаНачалаДоп, ДЕНЬ, -1)
		|					КОНЕЦ)
		|		ГДЕ
		|			ОтпускаОрганизацииРаботники.Ссылка = &ТекущийДокумент
		|			И ОтпускаОрганизацииРаботники.ПричинаОтсутствия = &ЕжегодныйОтпуск
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОтпускаОрганизацииРаботники.НомерСтроки) КАК КалендарьОсновногоОтпуска
		|		ПО ОтпускаОрганизацииРаботники.НомерСтроки = КалендарьОсновногоОтпуска.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				ФизЛицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ОтпускаОрганизацииРаботники.Сотрудник.Физлицо
		|					ИЗ
		|						Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботники
		|					ГДЕ
		|						ОтпускаОрганизацииРаботники.Ссылка = &ТекущийДокумент)) КАК ФИОФизЛиц
		|		ПО ОтпускаОрганизацииРаботники.Сотрудник.Физлицо = ФИОФизЛиц.ФизЛицо
		|ГДЕ
		|	ОтпускаОрганизацииРаботники.Ссылка = &ТекущийДокумент
		|	И НЕ ОтпускаОрганизацииРаботники.Сторно
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

// Функция формирует табличный документ с печатной формой "Т-6а",
//
// Возвращаемое значение:
//	Табличный документ - печатная форма
//
Функция ПечатьТ6а_2004()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтпускаОрганизации_Т6а";

	// получаем данные для печати
	ВыборкаДляШапкиИПодвала = СформироватьЗапросДляПечати2004("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати2004("ПоТабличнойЧастиДокумента").Выбрать();

	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	// запоминаем области макета
	Макет = ПолучитьМакет("Т6а_от_5_1_2004");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Строка"); // строка работника

	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапкиИПодвала.Следующий() Тогда 
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Шапка документа.
 		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Для подвала
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.
	ВыведеноСтрок = 0;

	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл

		// Данные по работнику
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакета.Параметры.Продолжительность = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачала) И ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания),ВыборкаРаботники.Продолжительность,"");
		ОбластьМакета.Параметры.ПродолжительностьВсего = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачалаВсего) И ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончанияВсего),ВыборкаРаботники.ПродолжительностьВсего,"");
		ОбластьМакета.Параметры.ВидДопОтпуска = Строка(ВыборкаРаботники.ВидДопОтпуска) + ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаПоДоп),"; " + (ВыборкаРаботники.ПродолжительностьВсего - ВыборкаРаботники.Продолжительность)+ " "+ ВыборкаРаботники.Основание,"");

		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;

		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьМакета.Параметры.Количество() Цикл
		ОбластьМакета.Параметры.Установить(Сч - 1,""); 
	КонецЦикла;
	ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
	Пока ТабДокумент.ПроверитьВывод(ВыводимыеОбласти) Цикл
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТ6а()

// Функция формирует табличный документ с печатной формой "Т-6",
//
// Возвращаемое значение:
//	Табличный документ - печатная форма
//
Функция ПечатьТ6_2004()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтпускаОрганизации_Т6";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати2004("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати2004("ПоТабличнойЧастиДокумента").Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет("Т6_от_5_1_2004");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника

	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
 		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
	КонецЕсли;

	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		// Шапка документа.
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВыборкаРаботники.НомерСтроки
		КонецЕсли; 
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакета.Параметры.Продолжительность = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачала) И ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания),ВыборкаРаботники.Продолжительность,"");
		ОбластьМакета.Параметры.ПродолжительностьВсего = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачалаВсего) И ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончанияВсего),ВыборкаРаботники.ПродолжительностьВсего,"");
		ОбластьМакета.Параметры.ПродолжительностьДоп = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаСДоп) И ЗначениеЗаполнено(ВыборкаРаботники.ДатаПоДоп),ВыборкаРаботники.ПродолжительностьВсего - ВыборкаРаботники.Продолжительность,"");
		ОбластьМакета.Параметры.ВидДопОтпуска = ?(ЗначениеЗаполнено(ВыборкаРаботники.ВидДопОтпуска),"" + ВыборкаРаботники.ВидДопОтпуска + "; ","") + ВыборкаРаботники.Основание;

		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции // ПечатьТ6()

// Функция формирует табличный документ с печатной формой "Т-6а",
//
// Возвращаемое значение:
//	Табличный документ - печатная форма
//
Функция ПечатьТ6а()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтпускаОрганизации_Т6а";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	// получаем данные для печати
	ВыборкаДляШапкиИПодвала = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	// запоминаем области макета
	Макет = ПолучитьМакет("Т6а_от_6_4_2001");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Строка"); // строка работника

	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапкиИПодвала.Следующий() Тогда 
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Шапка документа.
 		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Для подвала
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.
	ВыведеноСтрок = 0;

	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл

		// Данные по работнику
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакета.Параметры.Продолжительность = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания),ВыборкаРаботники.КоличествоДней,"");
		ОбластьМакета.Параметры.ВидОтпуска = ?(ЗначениеЗаполнено(ВыборкаРаботники.ВидДополнительногоОтпускаПредставление),"Отпуск дополнительный " + ВыборкаРаботники.ВидДополнительногоОтпускаПредставление,ВыборкаРаботники.ПричинаОтсутствия);

		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;

		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьМакета.Параметры.Количество() Цикл
		ОбластьМакета.Параметры.Установить(Сч - 1,""); 
	КонецЦикла;
	ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
	Пока ТабДокумент.ПроверитьВывод(ВыводимыеОбласти) Цикл
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТ6а()

// Функция формирует табличный документ с печатной формой "Т-6",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТ6()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтпускаОрганизации_Т6";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет("Т6_от_6_4_2001");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника

	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
 		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
	КонецЕсли;

	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		// Шапка документа.
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВыборкаРаботники.НомерСтроки
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакета.Параметры.Продолжительность = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания),ВыборкаРаботники.КоличествоДней,"");
		ОбластьМакета.Параметры.ВидОтпуска = ?(ЗначениеЗаполнено(ВыборкаРаботники.ВидДополнительногоОтпускаПредставление),"Отпуск дополнительный " + ВыборкаРаботники.ВидДополнительногоОтпускаПредставление,ВыборкаРаботники.ПричинаОтсутствия);
		
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции // ПечатьТ6()

Функция ПечатьЗапискиОбОтпуске()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтпускаОрганизации_ЗапискаОбОтпуске";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();
	
	// запоминаем области макета
	Макет = ПолучитьМакет("ЗапискаОбОтпуске");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника

	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
 		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
	КонецЕсли;

    // Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		// Шапка документа.
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВыборкаРаботники.НомерСтроки
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		Если ВыборкаРаботники.ПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный Тогда
			ОбластьМакета.Параметры.РабочийГодС  = Формат(ВыборкаРаботники.РабочийГодС,"ДФ=dd.MM.yyyy");
			ОбластьМакета.Параметры.РабочийГодПо = Формат(ВыборкаРаботники.РабочийГодПо,"ДФ=dd.MM.yyyy");
			ОбластьМакета.Параметры.КоличествоДнейВсего = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания),ВыборкаРаботники.КоличествоДней+ВыборкаРаботники.ДнейКомпенсации,"");
			Если ВыборкаРаботники.ДатаНачала <> ВыборкаРаботники.ДатаНачалаДоп Тогда
				ДатаОкончанияОсновного = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачалаДоп),ВыборкаРаботники.ДатаНачалаДоп-1, ВыборкаРаботники.ДатаОкончания);
				КоличествоДнейОсновного = КоличествоДнейОтпускаПоКалендарнымДням(ВыборкаРаботники.ДатаНачала,ДатаОкончанияОсновного, Ложь);
				ОбластьМакета.Параметры.КоличествоДнейОсновного = КоличествоДнейОсновного;	
				Если ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачалаДоп) Тогда
					КоличествоДнейДополнительного =   КоличествоДнейОтпускаПоКалендарнымДням(ВыборкаРаботники.ДатаНачалаДоп,ВыборкаРаботники.ДатаОкончания, Ложь);
		            ОбластьМакета.Параметры.КоличествоДнейДополнительного = КоличествоДнейДополнительного;	
					ОбластьМакета.Параметры.ВидДополнительногоОтпуска = ?(ЗначениеЗаполнено(ВыборкаРаботники.ВидДополнительногоОтпускаПредставление),ВыборкаРаботники.ВидДополнительногоОтпускаПредставление,ВыборкаРаботники.ПричинаОтсутствия);
				КонецЕсли;
				
			Иначе
				КоличествоДнейДополнительного =   КоличествоДнейОтпускаПоКалендарнымДням(ВыборкаРаботники.ДатаНачалаДопВыборкаРаботники.ДатаОкончания, Ложь);
		        ОбластьМакета.Параметры.КоличествоДнейДополнительного = КоличествоДнейДополнительного;	
				ОбластьМакета.Параметры.ВидДополнительногоОтпуска = ?(ЗначениеЗаполнено(ВыборкаРаботники.ВидДополнительногоОтпускаПредставление),ВыборкаРаботники.ВидДополнительногоОтпускаПредставление,ВыборкаРаботники.ПричинаОтсутствия);	
	       	КонецЕсли;
		Иначе
			ОбластьМакета.Параметры.ВидСоциальногоОтпуска = ВыборкаРаботники.ПричинаОтсутствия;
			ОбластьМакета.Параметры.КоличествоДнейСоциального = ВыборкаРаботники.КоличествоДней;
		КонецЕсли;
		
		//ОбластьМакета.Параметры.ВидОтпуска = ?(ЗначениеЗаполнено(ВыборкаРаботники.ВидДополнительногоОтпускаПредставление),"Отпуск дополнительный " + ВыборкаРаботники.ВидДополнительногоОтпускаПредставление,ВыборкаРаботники.ПричинаОтсутствия);
		
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;
		
		ТабДокумент.Вывести(ОбластьМакета);
        ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаРаботники);
		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;

	Возврат ТабДокумент;

	
КонецФункции
//vvv
Функция ПадежКалДни(ЧислоДней)
	Если Прав(Строка(ЧислоДней),1)="1" тогда
		Возврат "календарный день";
	ИначеЕсли (ЧислоДней>= 5) и (ЧислоДней<=20) тогда
		Возврат "календарных дней";
	ИначеЕсли (Число(Прав(Строка(ЧислоДней),1))>=2) и (Число(Прав(Строка(ЧислоДней),1))<=4)тогда  	
		Возврат "календарных дня";
	Иначе
		Возврат "календарных дней";
	КонецЕсли;		
КонецФункции
//vvv
Функция ПадежДни(ЧислоДней)
	Если Прав(Строка(ЧислоДней),1)="1" тогда
		Возврат "день";
	ИначеЕсли (ЧислоДней>= 5) и (ЧислоДней<=20) тогда
		Возврат "дней";
	ИначеЕсли (Число(Прав(Строка(ЧислоДней),1))>=2) и (Число(Прав(Строка(ЧислоДней),1))<=4)тогда  	
		Возврат "дня";
	Иначе
		Возврат "дней";
	КонецЕсли;		
КонецФункции
//vvv
Функция ПечатьЗапискиОбОтпуске1()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтпускаОрганизации_ЗапискаОбОтпуске";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСлева=170;
	ТабДокумент.ПолеСправа=0;
	ТабДокумент.АвтоМасштаб=Истина;

	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();
	
	ЗапросДоп=Новый Запрос;
	ЗапросДоп.Текст=
	"ВЫБРАТЬ
	|	ОтпускаОрганизацийВидыОтпуска.Сотрудник,
	|	ОтпускаОрганизацийВидыОтпуска.ВидОтпуска,
	|	ОтпускаОрганизацийВидыОтпуска.Дней
	|ИЗ
	|	Документ.ОтпускаОрганизаций.ВидыОтпуска КАК ОтпускаОрганизацийВидыОтпуска
	|ГДЕ
	|	ОтпускаОрганизацийВидыОтпуска.Ссылка = &Ссылка";
	
	ЗапросДоп.УстановитьПараметр("Ссылка",Ссылка);
	ТаблицаДоп=ЗапросДоп.Выполнить().Выгрузить();
	
	// запоминаем области макета
	Макет = ПолучитьМакет("Записка");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника
    ОбластьМакетаДоп=Макет.ПолучитьОбласть("ДопОтпуск");
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НомерДок=Число(ВыборкаДляШапки.НомерДок);
 		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		Если СокрЛП(ВыборкаДляШапки.ОрганизацияПрефикс)<>"" ТОгда
			ОбластьМакетаШапка.Параметры.НомерДок=СокрЛП(Строка(Число(Сред(ВыборкаДляШапки.НомерДок,СтрДлина(ВыборкаДляШапки.ОрганизацияПрефикс)+1))));
		КонецЕсли;
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
		ОбластьМакетаШапка.Параметры.ДатаДок = Формат(ВыборкаДляШапки.ДатаДок,"ДЛФ=ДД");
		ОбластьМакетаПодвал.Параметры.ДатаДок = Формат(ВыборкаДляШапки.ДатаДок,"ДЛФ=ДД");
	КонецЕсли;

    // Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		// Шапка документа.
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВыборкаРаботники.НомерСтроки
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		Если ВыборкаРаботники.ПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный Тогда
			ОбластьМакета.Параметры.РабочийГодС  = Формат(ВыборкаРаботники.РабочийГодС,"ДЛФ=ДД");
			ОбластьМакета.Параметры.РабочийГодПо = Формат(ВыборкаРаботники.РабочийГодПо,"ДЛФ=ДД");
			ОбластьМакета.Параметры.КоличествоДнейВсего = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания),ВыборкаРаботники.КоличествоДней,"");
			ОбластьМакета.Параметры.ПадежКалДнейВсего = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания),ПадежКалДни(ВыборкаРаботники.КоличествоДней),"");
			КоличествоДнейОсновного=0;
			Для Каждого Стр Из ТаблицаДоп Цикл
				Если (Стр.Сотрудник=ВыборкаРаботники.Сотрудник) и (Найти(НРег(Стр.ВидОтпуска.Наименование),"основной")>0) ТОгда
					КоличествоДнейОсновного=Стр.Дней;
					Прервать;					
				КонецЕсли;				
			КонецЦикла;		
			ОбластьМакета.Параметры.КоличествоДнейОсновного = КоличествоДнейОсновного;
			ОбластьМакета.Параметры.ПадежДнейОсновной = ПадежДни(КоличествоДнейОсновного);
		Иначе
			ОбластьМакетаПодвал.Параметры.СтрокаСоциального=?(ВыборкаРаботники.КоличествоДней>0,Строка(ВыборкаРаботники.ПричинаОтсутствия)+": "+СТрока(ВыборкаРаботники.КоличествоДней)+" "+ПадежДни(ВыборкаРаботники.КоличествоДней),"");
			ОбластьМакета.Параметры.РабочийГодС  = "";
			ОбластьМакета.Параметры.РабочийГодПо = "";
		КонецЕсли;
		
		//ОбластьМакета.Параметры.ВидОтпуска = ?(ЗначениеЗаполнено(ВыборкаРаботники.ВидДополнительногоОтпускаПредставление),"Отпуск дополнительный " + ВыборкаРаботники.ВидДополнительногоОтпускаПредставление,ВыборкаРаботники.ПричинаОтсутствия);
		
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;
		
		ТабДокумент.Вывести(ОбластьМакета);
		Для Каждого Стр Из ТаблицаДоп Цикл
			Если (Стр.Сотрудник=ВыборкаРаботники.Сотрудник) и (Найти(НРег(Стр.ВидОтпуска.Наименование),"основной")=0) ТОгда //доп. отпуск
				ОбластьМакетаДоп.Параметры.СтрокаДополнительного=?(Стр.Дней>0,Строка(Стр.ВидОтпуска)+": "+СТрока(Стр.Дней)+" "+ПадежДни(Стр.Дней),"");
				ТабДокумент.Вывести(ОбластьМакетаДоп);
			КонецЕсли;				
		КонецЦикла;					
        ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаРаботники);
		// Подвал документа.
		ОбластьМакетаПодвал.Параметры.СтрокаМатпомощи=?(ВыборкаРаботники.ФлагМатПомощь,"Материальная помощь на оздоровление предоставляется","");		
		ОбластьМакетаПодвал.Параметры.ДатаНачала=Формат(ВыборкаРаботники.ДатаНачала,"ДЛФ=ДД");
		ОбластьМакетаПодвал.Параметры.ДатаОкончания=Формат(ВыборкаРаботники.ДатаОкончания,"ДЛФ=ДД");
		ТабДокумент.Вывести(ОбластьМакетаПодвал);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;

	Возврат ТабДокумент;

	
КонецФункции
//vvv
Функция ПечатьЗапискиОбОтпуске2()
	
	ТабДокумент = Новый ТабличныйДокумент;
	//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтпускаОрганизации_ЗапискаОбОтпуске1";
	ТабДокумент.ПолеСлева = 16;
	ТабДокумент.ПолеСправа = 10;
	ТабДокумент.ПолеСверху = 20;
	ТабДокумент.ПолеСнизу = 20;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.АвтоМасштаб=Истина;

	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();
	
	ЗапросДоп=Новый Запрос;
	ЗапросДоп.Текст=
	"ВЫБРАТЬ
	|	ОтпускаОрганизацийВидыОтпуска.Сотрудник,
	|	ОтпускаОрганизацийВидыОтпуска.ВидОтпуска,
	|	ОтпускаОрганизацийВидыОтпуска.Дней
	|ИЗ
	|	Документ.ОтпускаОрганизаций.ВидыОтпуска КАК ОтпускаОрганизацийВидыОтпуска
	|ГДЕ
	|	ОтпускаОрганизацийВидыОтпуска.Ссылка = &Ссылка";
	
	ЗапросДоп.УстановитьПараметр("Ссылка",Ссылка);
	ТаблицаДоп=ЗапросДоп.Выполнить().Выгрузить();
	
	// запоминаем области макета
	Макет = ПолучитьМакет("Записка1");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника
    ОбластьМакетаДоп=Макет.ПолучитьОбласть("ДопОтпуск");
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НомерДок=Число(ВыборкаДляШапки.НомерДок);
 		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		Если СокрЛП(ВыборкаДляШапки.ОрганизацияПрефикс)<>"" ТОгда
			ОбластьМакетаШапка.Параметры.НомерДок=СокрЛП(Строка(Число(Сред(ВыборкаДляШапки.НомерДок,СтрДлина(ВыборкаДляШапки.ОрганизацияПрефикс)+1))));
		КонецЕсли;
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
		ОбластьМакетаШапка.Параметры.ДатаДок = Формат(ВыборкаДляШапки.ДатаДок,"ДЛФ=ДД");
		ОбластьМакетаПодвал.Параметры.ДатаДок = Формат(ВыборкаДляШапки.ДатаДок,"ДЛФ=ДД");
	КонецЕсли;
	
	ЗапросПоОтветственным=Новый Запрос;
	ЗапросПоОтветственным.Текст=
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтпускаОрганизацийРаботникиОрганизации.ФизЛицо КАК Работник,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК Подразделение,
	|	ОтветственныеЛицаРуководитель.ФизическоеЛицо КАК Директор,
	|	ОтветственныеЛицаНачальник.ФизическоеЛицо КАК НачальникПодразделения,
	|	ОтветственныеЛицаКадровик.ФизическоеЛицо КАК Кадровик
	|ИЗ
	|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, ) КАК РаботникиОрганизацийСрезПоследних
	|		ПО ОтпускаОрганизацийРаботникиОрганизации.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаАктуальности, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаРуководитель
	|		ПО (ОтветственныеЛицаРуководитель.СтруктурнаяЕдиница = РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаАктуальности, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Табельщик)) КАК ОтветственныеЛицаНачальник
	|		ПО (ОтветственныеЛицаНачальник.СтруктурнаяЕдиница = ВЫБОР
	|				КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|						И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения
	|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаАктуальности, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы)) КАК ОтветственныеЛицаКадровик
	|		ПО (ОтветственныеЛицаКадровик.СтруктурнаяЕдиница = РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение)
	|ГДЕ
	|	ОтпускаОрганизацийРаботникиОрганизации.Ссылка = &Ссылка";
	
	ЗапросПоОтветственным.УстановитьПараметр("Организация",Организация);
	ЗапросПоОтветственным.УстановитьПараметр("ДатаАктуальности",Дата);	
	ЗапросПоОтветственным.УстановитьПараметр("Ссылка",Ссылка);	
	
	ТаблицаОтветственных=ЗапросПоОтветственным.Выполнить().Выгрузить();
	ОтборСотрудника=Новый Структура;
		
    // Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		// Шапка документа.
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВыборкаРаботники.НомерСтроки;
		Иначе
			Если СокрЛП(ВыборкаРаботники.НомерДок)<>"" Тогда
				ОбластьМакетаШапка.Параметры.НомерДок = СокрЛП(ВыборкаРаботники.НомерДок);
			КонецЕсли;	
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		Если ВыборкаРаботники.ПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный Тогда
			ОбластьМакета.Параметры.РабочийГодС  = Формат(ВыборкаРаботники.РабочийГодС,"ДЛФ=ДД");
			ОбластьМакета.Параметры.РабочийГодПо = Формат(ВыборкаРаботники.РабочийГодПо,"ДЛФ=ДД");
			ОбластьМакета.Параметры.КоличествоДнейВсего = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания),ВыборкаРаботники.КоличествоДней+ВыборкаРаботники.ДнейКомпенсации,"");
			ОбластьМакета.Параметры.ПадежКалДнейВсего = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания),ПадежКалДни(ВыборкаРаботники.КоличествоДней),"");
			КоличествоДнейОсновного=0;
			Для Каждого Стр Из ТаблицаДоп Цикл
				Если (Стр.Сотрудник=ВыборкаРаботники.Сотрудник) и (Найти(НРег(Стр.ВидОтпуска.Наименование),"основной")>0) ТОгда
					КоличествоДнейОсновного=Стр.Дней;
					Прервать;					
				КонецЕсли;				
			КонецЦикла;		
			ОбластьМакета.Параметры.КоличествоДнейОсновного = КоличествоДнейОсновного;
			ОбластьМакета.Параметры.ПадежДнейОсновной = ПадежДни(КоличествоДнейОсновного);
			ОбластьМакета.Параметры.СтрокаВТомЧисле="в том числе:";
			Если ВыборкаРаботники.ДнейКомпенсации<>0 Тогда
				ОбластьМакета.Параметры.СтрокаВТомЧисле="в том числе компенсации: "+Строка(ВыборкаРаботники.ДнейКомпенсации)+" "+ПадежДни(ВыборкаРаботники.ДнейКомпенсации);
			КонецЕсли;
		Иначе
			ОбластьМакетаПодвал.Параметры.СтрокаСоциального=?(ВыборкаРаботники.КоличествоДней>0,Строка(ВыборкаРаботники.ПричинаОтсутствия)+": "+СТрока(ВыборкаРаботники.КоличествоДней)+" "+ПадежДни(ВыборкаРаботники.КоличествоДней),"");
			ОбластьМакета.Параметры.РабочийГодС  = "";
			ОбластьМакета.Параметры.РабочийГодПо = "";
		КонецЕсли;		
		//ОбластьМакета.Параметры.ВидОтпуска = ?(ЗначениеЗаполнено(ВыборкаРаботники.ВидДополнительногоОтпускаПредставление),"Отпуск дополнительный " + ВыборкаРаботники.ВидДополнительногоОтпускаПредставление,ВыборкаРаботники.ПричинаОтсутствия);
		
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = СокрЛП(ВыборкаРаботники.ТабельныйНомер);
		
		ТабДокумент.Вывести(ОбластьМакета);
		Для Каждого Стр Из ТаблицаДоп Цикл
			Если (Стр.Сотрудник=ВыборкаРаботники.Сотрудник) и (Найти(НРег(Стр.ВидОтпуска.Наименование),"основной")=0) ТОгда //доп. отпуск
				ОбластьМакетаДоп.Параметры.СтрокаДополнительного=?(Стр.Дней>0,Строка(Стр.ВидОтпуска)+": "+СТрока(Стр.Дней)+" "+ПадежДни(Стр.Дней),"");
				ТабДокумент.Вывести(ОбластьМакетаДоп);
			КонецЕсли;				
		КонецЦикла;					
        ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаРаботники);
		// Подвал документа.
		ОбластьМакетаПодвал.Параметры.СтрокаМатпомощи=?(ВыборкаРаботники.ФлагМатПомощь,"Материальная помощь на оздоровление предоставляется","");		
		ОбластьМакетаПодвал.Параметры.ДатаНачала=Формат(ВыборкаРаботники.ДатаНачала,"ДЛФ=ДД");
		ОбластьМакетаПодвал.Параметры.ДатаОкончания=Формат(ВыборкаРаботники.ДатаОкончания,"ДЛФ=ДД");
		ОтборСотрудника.Вставить("Работник",ВыборкаРаботники.Сотрудник.ФизЛицо);
		НайденныеСтроки=ТаблицаОтветственных.НайтиСтроки(ОтборСотрудника);
		Если НайденныеСтроки.Количество()>0 Тогда
			ОбластьМакетаПодвал.Параметры.Директор=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(НайденныеСтроки[0].Директор);
			ОбластьМакетаПодвал.Параметры.НачальникПодразделения=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(НайденныеСтроки[0].НачальникПодразделения);
			ОбластьМакетаПодвал.Параметры.НачальникПодразделения=""; //пока так, могут быть и замы
			ОбластьМакетаПодвал.Параметры.Кадровик=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(НайденныеСтроки[0].Кадровик);
			ОбластьМакетаПодвал.Параметры.Работник=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(НайденныеСтроки[0].Работник);
		КонецЕсли;		
		ТабДокумент.Вывести(ОбластьМакетаПодвал);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;

	Возврат ТабДокумент;

	
КонецФункции
#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтпускаОрганизаций.Дата,
	|	ОтпускаОрганизаций.Организация,
	|	ВЫБОР
	|		КОГДА ОтпускаОрганизаций.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ОтпускаОрганизаций.Организация
	|		ИНАЧЕ ОтпускаОрганизаций.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ОтпускаОрганизаций.Ссылка
	|ИЗ
	|	Документ.ОтпускаОрганизаций КАК ОтпускаОрганизаций
	|ГДЕ
	|	ОтпускаОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса. В запросе данные документа дополняются значениями
//	проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование,
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧРаботникиОрганизации.ДатаНачала,
	|	ТЧРаботникиОрганизации.ДатаОкончания,
	|	ТЧРаботникиОрганизации.ДатаНачалаДоп,
	|	ТЧРаботникиОрганизации.НапомнитьПоЗавершении,
	|	ТЧРаботникиОрганизации.ОсвобождатьСтавку,
	|	ТЧРаботникиОрганизации.ВидДополнительногоОтпуска,
	|	ТЧРаботникиОрганизации.ПричинаОтсутствия,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок
	|	КОНЕЦ КАК ЗанимаемыхСтавок,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	ИмеющиесяСостояния.Состояние КАК КонфликтноеСостояние,
	|	ИмеющиесяСостояния.Регистратор КАК КонфликтныйДокумент,
	//vvv
	//|	ВЫБОР
	//|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
	//|			ТОГДА ЛОЖЬ
	//|		ИНАЧЕ ИСТИНА
	//|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение = &Организация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	//
	|	ДанныеПоРаботникуДоНазначения.УсловияТрудаИзмерение,
	|	ДанныеПоРаботникуДоНазначения.ВидДеятельностиИзмерение
	|ИЗ
	|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(Работники.Период) КАК Период
	|		ИЗ
	|			Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|				ПО (Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала)
	|					И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|			И НЕ ТЧРаботникиОрганизации.Сторно
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
	|			И ТЧРаботникиОрганизации.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
	|				ПО (ТЧРаботникиОрганизации2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботникиОрганизации.НомерСтроки <> ТЧРаботникиОрганизации2.НомерСтроки
	|					И ТЧРаботникиОрганизации.ДатаНачала <= ТЧРаботникиОрганизации2.ДатаНачала
	|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
	|					И (ВЫБОР
	|						КОГДА ТЧРаботникиОрганизации.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА ИСТИНА
	|						КОГДА ТЧРаботникиОрганизации.НапомнитьПоЗавершении
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ТЧРаботникиОрганизации.ДатаОкончания >= ТЧРаботникиОрганизации2.ДатаНачала
	|					КОНЕЦ)
	|					И ТЧРаботникиОрганизации.Сторно = ТЧРаботникиОрганизации2.Сторно
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|			И НЕ ТЧРаботникиОрганизации.Сторно
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК ИмеющиесяСостояния
	|		ПО ТЧРаботникиОрганизации.ДатаНачала = ИмеющиесяСостояния.Период
	|			И ТЧРаботникиОрганизации.Ссылка <> ИмеющиесяСостояния.Регистратор
	|			И ТЧРаботникиОрганизации.Сотрудник = ИмеющиесяСостояния.Сотрудник
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|	И НЕ ТЧРаботникиОрганизации.Сторно
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
		
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, работники которой отправляются в отпуск!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка
//								  из результата запроса по работникам,
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники организации"": ";

	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ДатаНачала
	НетДатыНачала = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
	Если НетДатыНачала Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала отпуска!", Отказ, Заголовок);
	КонецЕсли;

	// Причина отсутствия
	НетВидаОтпуска = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПричинаОтсутствия);
	Если НетВидаОтпуска Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид отпуска!", Отказ, Заголовок);
	Иначе
		ПричинаОтсутствия = ВыборкаПоСтрокамДокумента.ПричинаОтсутствия;
		Если ПричинаОтсутствия <> Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный
			и ПричинаОтсутствия <> Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускБезСохраненияЗарплаты
			и ПричинаОтсутствия <> Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускПоУходуЗаРебенком
			и ПричинаОтсутствия <> Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебный 
			и ПричинаОтсутствия <> Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебныйНеоплачиваемый Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "вместо отпуска указана иная причина отсутствия!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	Если НетСотрудника ИЛИ НетДатыНачала ИЛИ НетВидаОтпуска Тогда
		Возврат;
	КонецЕсли;

	Если  ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) и ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала отпуска не может превышать дату окончания отпуска!", Отказ, Заголовок);
	КонецЕсли;

	//Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидДополнительногоОтпуска) 
	//	И ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаДоп)
	//	И (ВыборкаПоСтрокамДокумента.ДатаНачалаДоп > ВыборкаПоСтрокамДокумента.ДатаОкончания Или ВыборкаПоСтрокамДокумента.ДатаНачалаДоп < ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "неверно указана дата начала дополнительного отпуска!", Отказ, Заголовок);
	//КонецЕсли;
		
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
		
	// Проверка: ранее работник должен быть принят на работу
	Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = NULL Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда	
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	КонецЕсли; 

	// Проверка: противоречие другой строке документа
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
		СтрокаСообщениеОбОшибке = "период отпуска пересекается с периодом строки " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка: в регистре уже есть такое движение
	Если ВыборкаПоСтрокамДокумента.КонфликтноеСостояние <> NULL Тогда
		СтрокаСообщениеОбОшибке = "работник уже переведен в состояние """ + ВыборкаПоСтрокамДокумента.КонфликтноеСостояние + """ документом " + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//	ВыборкаПоРаботникиОрганизации
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)

	Причина = ВыборкаПоРаботникиОрганизации.ПричинаОтсутствия;
	
	// движения по дате "с"
	Движение = Движения.СостояниеРаботниковОрганизаций.Добавить();

	// Свойства
	Движение.Период			= ВыборкаПоРаботникиОрганизации.ДатаНачала;

	// Измерения
	Движение.Сотрудник		= ВыборкаПоРаботникиОрганизации.Сотрудник;
	Движение.Организация	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// Ресурсы
	// здесь принято следующее соглашение - на каждую причину отсутствия обязательно есть одноименное состояние работника
	Движение.Состояние = Перечисления.СостоянияРаботникаОрганизации[Причина.Метаданные().ЗначенияПеречисления[Перечисления[Причина.Метаданные().Имя].Индекс(Причина)].Имя];

	Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаОкончания) Тогда

		// Движения по дате "по"
		Если  НЕ ВыборкаПоРаботникиОрганизации.НапомнитьПоЗавершении Тогда
			// Свойства
			Движение.ПериодЗавершения = ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
			// Ресурсы
			Движение.СостояниеЗавершения = Перечисления.СостоянияРаботникаОрганизации.Работает;
			
		Иначе
			Движение = Движения.НамеченныеСобытияПоПерсоналу.Добавить();

			// Свойства
			Движение.Период				= ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
	
			// Измерения
			Движение.Сотрудник			= ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
			Движение.ДатаИзменения		= ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
			// здесь принято следующее соглашение - на каждую причину отсутствия обязательно есть одноименное планируемое изменение работника
			Движение.ПланируемоеСобытие	= Перечисления.НамеченныеСобытияПоПерсоналу[Причина.Метаданные().ЗначенияПеречисления[Перечисления[Причина.Метаданные().Имя].Индекс(Причина)].Имя];

			// Реквизиты
			Движение.ЗанимаемыхСтавок	= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
			Движение.ЗаниматьСтавку		= ВыборкаПоРаботникиОрганизации.ОсвобождатьСтавку;
			
		КонецЕсли;

	КонецЕсли;

	Движение = Движения.ПериодыСостоянийРаботниковОрганизаций.Добавить();
			
	// Измерения
	Движение.Сотрудник			= ВыборкаПоРаботникиОрганизации.Сотрудник;
	Движение.ДатаНачала			= ВыборкаПоРаботникиОрганизации.ДатаНачала;
	Если ВыборкаПоРаботникиОрганизации.ДатаОкончания <> '0001-01-01' И
		 НЕ ВыборкаПоРаботникиОрганизации.НапомнитьПоЗавершении Тогда
		Движение.ДатаОкончания	= ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа
//	ВыборкаПоРаботникиОрганизации
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)

	Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
	
	// Свойства
	Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
	Движение.Период							= ВыборкаПоРаботникиОрганизации.ДатаНачала;

	// Измерения
	Движение.ПодразделениеОрганизации		= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
	Движение.Должность						= ВыборкаПоРаботникиОрганизации.Должность;
	Движение.УсловияТрудаИзмерение			= ВыборкаПоРаботникиОрганизации.УсловияТрудаИзмерение;
	Движение.ВидДеятельностиИзмерение		= ВыборкаПоРаботникиОрганизации.ВидДеятельностиИзмерение;


	// Ресурсы
	Движение.КоличествоСтавок				= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок; 

	Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаОкончания) и НЕ ВыборкаПоРаботникиОрганизации.НапомнитьПоЗавершении Тогда

		Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();

		// Свойства
		Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
		Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		Движение.Должность					= ВыборкаПоРаботникиОрганизации.Должность;
		Движение.УсловияТрудаИзмерение		= ВыборкаПоРаботникиОрганизации.УсловияТрудаИзмерение;
		Движение.ВидДеятельностиИзмерение	= ВыборкаПоРаботникиОрганизации.ВидДеятельностиИзмерение;


		// Ресурсы
		Движение.КоличествоСтавок			= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		//vvv
		Движения.СостояниеРаботниковОрганизаций.мВыполнятьСписаниеФактическогоОтпуска	= Истина;
		//
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		//ВыборкаПоДополнительныеОтпуска = СформироватьЗапросПоДополнительныеОтпуска(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//Пока ВыборкаПоДополнительныеОтпуска.Следующий() Цикл
		//		
		//	ПроверитьЗаполнениеСтрокиДополнительныеОтпуска(ВыборкаПоШапкеДокумента, ВыборкаПоДополнительныеОтпуска, Отказ, Заголовок);
		//	
		//КонецЦикла;
		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда
			ВыборкаПоРаботникиОрганизации = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
						
			
			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);

				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации);

					Если ВыборкаПоРаботникиОрганизации.ОсвобождатьСтавку Тогда
						ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаЗаполнения" модуля объекта
//
Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.Физлицо,
		|	СотрудникиОрганизаций.Организация,
		|	СотрудникиОрганизаций.ОбособленноеПодразделение
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
		Запрос.УстановитьПараметр("Сотрудник",	Основание);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если Не Выборка.ОбособленноеПодразделение.Пустая() Тогда
				Организация = Выборка.ОбособленноеПодразделение;
			Иначе
				Организация = Выборка.Организация;
			КонецЕсли;
			
			НоваяСтрока = РаботникиОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ДатаНачала	= ОбщегоНазначения.ПолучитьРабочуюДату();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.КадровыеПриказыОрганизации.Добавить();
		ЗаписьРегистрации.Период		= Дата;
		ЗаписьРегистрации.Регистратор	= Ссылка;
	КонецЕсли;
	
	Движения.ПериодыСостоянийРаботниковОрганизаций.РежимЗаписиРегистратора = РежимЗаписи;
	
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПередЗаписью(Отказ, РежимЗаписи, РежимПроведения, ЭтотОбъект, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПриЗаписи(Отказ, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;

мВосстанавливатьДвижения = Ложь;


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает дату начала события
//
Функция ПолучитьДатуНачалаСобытия() Экспорт
	
	Возврат ?(ДатаНачалаОсновногоОтпуска = '00010101', ?(ДатаНачалаДополнительногоОтпуска = '00010101',Дата,ДатаНачалаДополнительногоОтпуска), ДатаНачалаОсновногоОтпуска);
	
КонецФункции // ПолучитьДатуНачалаСобытия()

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.НачислениеОтпускаРаботникамОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,"Проведен, Дата, Номер, ПометкаУдаления, ПериодРегистрации, Комментарий, Ответственный, ПерерассчитываемыйДокумент, РезультатКомпенсацииОтпуска, СторноРезультатКомпенсацииОтпуска");
	ЭтотОбъект.ДополнительныеОтпуска.Загрузить(ИсходныйДокумент.ДополнительныеОтпуска.Выгрузить());	
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//	Структура, каждая строка которой соответствует одному из вариантов печати
//	
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("Т60",							"Форма Т-60");
	СтруктураПечатныхФорм.Вставить("РасчетОсновногоОтпуска",		"Расчет ср. заработка основного отпуска");
	СтруктураПечатныхФорм.Вставить("РасчетДополнительногоОтпуска",	"Расчет ср. заработка дополнительного отпуска");
	СтруктураПечатныхФорм.Вставить("РасчетКомпенсацииОтпуска",		"Расчет ср. заработка компенсации отпуска");
	//vvv
	СтруктураПечатныхФорм.Вставить("Макет",		                     "Печать");
	//
	Возврат СтруктураПечатныхФорм;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
// Параметры:
//		РассчитываемыеТаблицы  - структура из элементов, соответствующих табличным частям документа. 
//				Значение Истина для каждого из элементов структуры означает необходимость расчета 
//				соответствующей табличной части документа
//		РежимПерерасчета - булево - признак вызов расчета при перерасчете документа
Процедура Рассчитать(РассчитываемыеТаблицы, РежимПерерасчета = Ложь) Экспорт
	
	//Перед вызовом процедуры документ должнен быть записан, движения должны быть удалены 
	
	Отказ = Ложь;
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоДопОтпускам = СформироватьЗапросПОДопОтпускам().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	КоэффициентОтпуска = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(ПериодРегистрации, Новый Структура("ВидПараметра", Перечисления.ВидыПараметровДляРасчетаЗарплаты.КоэффициентДляРасчетаОтпуска)).Размер;
	Если КоэффициентОтпуска = 0 или КоэффициентОтпуска = Неопределено тогда
		Сообщить(Заголовок + ". Не заполнен параметр Коэффициент для расчета отпуска. Расчет не возможен.");
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Создадим наборы записей используемых регистров 
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
		
	НаборДополнительныеНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборДополнительныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	НаборРасчетСреднего = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборРасчетСреднего.Отбор.Регистратор.Значение = Ссылка;
	
	Если НЕ РассчитываемыеТаблицы.РасчетСреднего Тогда
		
		СтрокиЗаработка = РасчетСреднегоПоКалендарным.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск));
		КоличствоМесяцевСреднегоЗаработка = СтрокиЗаработка.Количество();
		//vvv
		КоличствоМесяцевСреднегоЗаработка = 0;
		Для Каждого Стр Из СтрокиЗаработка Цикл
			Если Стр.Сотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство И ВыборкаПоШапкеДокумента.Сотрудник.ВидЗанятости <> Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство ТОгда
				Продолжить;
			КонецЕсли;		
			КоличствоМесяцевСреднегоЗаработка=КоличствоМесяцевСреднегоЗаработка + 1;	
		КонецЦикла;		
		//

		//vvv
		//СтрокиГодовойПремии = РасчетСреднегоПоКалендарным.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии));
		СтрокиГодовойПремии = РасчетСреднегоПоКалендарным.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииОтпуск));
		//
		Если СтрокиГодовойПремии.Количество()<> 0 тогда
			Для каждого СтрокаПремии из СтрокиГодовойПремии цикл
				Если СтрокаПремии.ЧислоМесяцев = 12 Тогда
					КоличествоМесяцевВыборкиСреднего = (ГОД(СтрокаПремии.БазовыйПериодКонец)-ГОД(СтрокаПремии.БазовыйПериодНачало)) *12 + 1 - Месяц(СтрокаПремии.БазовыйПериодНачало) + Месяц(СтрокаПремии.БазовыйПериодКонец);   

					СтрокаПремии.Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаПремии.НачисленнаяСумма/КоличествоМесяцевВыборкиСреднего*КоличствоМесяцевСреднегоЗаработка,Константы.ВалютаРегламентированногоУчета.Получить()); 	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
 		// запишем движения по среднему заработку для расчета начислений
		// получим реквизиты табличной части РасчетСреднего 
		//vvv надо записать док-т, т.к. возможно поменялась сумма годовой премии, если например было 12 месяцев среднего, а мы удалили 1 месяц и стало 11.
		Записать();
		//
		РезультатЗапросаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего();
		ВыборкаПоРасчетСреднего = РезультатЗапросаПоРасчетСреднего.Выбрать();
		
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ, Заголовок);
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, НаборРасчетСреднего);
			КонецЕсли;
		КонецЦикла;
		
		НаборРасчетСреднего.Записать();
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Если это документ-исправление, тогда добавим сторно-записи из исправляемого документа.
	ПроведениеРасчетов.СформироватьСторноЗаписиПоПерерассчитываемомуДокументу(ПерерассчитываемыйДокумент,ВыборкаПоШапкеДокумента, НаборОсновныеНачисления, НаборДополнительныеНачисления);
	
	// Начисления документа.
	СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента,ВыборкаПоДопОтпускам, НаборОсновныеНачисления, НаборДополнительныеНачисления);
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = ПроведениеРасчетов.ПолучитьТаблицуСторноЗаписей(НаборОсновныеНачисления.ПолучитьДополнение());
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодРегистрации");
	ТаблицаСторноЗаписей.Колонки.ПериодРегистрацииСторно.Имя = "ПериодРегистрации";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияНачало");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияНачалоСторно.Имя = "ПериодДействияНачало";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияКонец");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияКонецСторно.Имя = "ПериодДействияКонец";
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		// Заполним записи в наборе записей регистра
		// и в табличной части
		
		// новая запись движений
		Движение = НаборОсновныеНачисления.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение,СтрокаСторно);
		
		// Свойства
		Движение.Сторно	= Истина;
		Движение.Авторасчет	= Истина;
		
	КонецЦикла;
	
	// получим список зависимых начислений
	Если ТаблицаСторноЗаписей.Количество() <> 0 Тогда
		// если таблица сторно-записей не пустая, получим таблицу
		// начислений, зависисяцих от тех начислений, которые зарегистрированы,
		
		ТаблицаОсновныхНачислений = ПроведениеРасчетов.ПолучитьТаблицуЗависимыхНачисленийОсновные(НаборОсновныеНачисления.Выгрузить());
		Для каждого СтрокаТаблицы Из ТаблицаОсновныхНачислений Цикл
			
			Если СтрокаТаблицы.Начислить > 0 Тогда
				
				// начисление зависит от сторнирующего, добавим не сторно
				Движение = НаборОсновныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.СторнируемыйДокумент = Неопределено;
				Движение.Сторно	= Ложь;
				Движение.Авторасчет	= Истина;
				
			КонецЕсли;
			
			Если СтрокаТаблицы.Сторнировать > 0 Тогда
				
				// начисление зависит от сторнируемого, добавим сторно
				Движение = НаборОсновныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.Сторно	= Истина;
				Движение.Авторасчет	= Истина;
				
			КонецЕсли;	
			
		КонецЦикла;
		
		ТаблицаДополнительныхНачислений = ПроведениеРасчетов.ПолучитьТаблицуЗависимыхНачисленийДополнительные(ТаблицаСторноЗаписей);
		Для каждого СтрокаТаблицы Из ТаблицаДополнительныхНачислений Цикл
			
			Движение = НаборДополнительныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
			Движение.Сторно	= Истина;
			Движение.Авторасчет	= Истина;
			
			Движение = НаборДополнительныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
			Движение.СторнируемыйДокумент = Неопределено;
			Движение.Сторно	= Ложь;
			Движение.Авторасчет	= Истина;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Очистим начисления
	Начисления.Очистить();
	
	// рассчитываем записи начислений и если надо, записи расчета среднего заработка
	Если РассчитываемыеТаблицы.Начисления Тогда
		СреднийРассчитан = Ложь;
		Если НаборОсновныеНачисления.Количество() <> 0 Тогда
			Если РассчитываемыеТаблицы.РасчетСреднего Тогда
				ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение,,Истина);
				СреднийРассчитан = Истина;

			Иначе
				ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
			КонецЕсли;
		КонецЕсли;
		
		// перепишем записи основных начислений в документ
		ЗаписиНачислений = НаборОсновныеНачисления.Выгрузить();
		ЗаписиНачислений.Колонки.ПериодДействияНачало.Имя = "ДатаНачала";
		ЗаписиНачислений.Колонки.ПериодДействияКонец.Имя = "ДатаОкончания";
		Начисления.Загрузить(ЗаписиНачислений);
		
		Если НаборДополнительныеНачисления.Количество() > 0 Тогда
			
			Если РассчитываемыеТаблицы.РасчетСреднего  И Не СреднийРассчитан Тогда
				ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДополнительныеНачисления, , НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
				СреднийРассчитан = Истина;
			Иначе
				ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДополнительныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
			КонецЕсли;
			
			// перепишем записи начислений в документ
			ЗаписиНачислений = НаборДополнительныеНачисления.Выгрузить();
			ЗаписиНачислений.Колонки.БазовыйПериодНачало.Имя = "ДатаНачала";
			ЗаписиНачислений.Колонки.БазовыйПериодКонец.Имя  = "ДатаОкончания";
			
			Для каждого СтрокаТаблицы Из ЗаписиНачислений Цикл
				СтрокаТабличнойЧасти = Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли РассчитываемыеТаблицы.РасчетСреднего Тогда
		СреднийРассчитан = Ложь;
     	НаборОсновныеНачисления.Записать();
		НаборДополнительныеНачисления.Записать();
		Если НаборОсновныеНачисления.Количество() > 0 Тогда
			ПроведениеРасчетов.СформироватьИЗаписатьДанныеРасчетаСреднего("ОсновныеНачисленияРаботниковОрганизаций", Ссылка, НаборРасчетСреднего);
			СреднийРассчитан = Истина;
		КонецЕсли;
		Если НаборДополнительныеНачисления.Количество() > 0  И Не СреднийРассчитан 	Тогда
			ПроведениеРасчетов.СформироватьИЗаписатьДанныеРасчетаСреднего("ДополнительныеНачисленияРаботниковОрганизаций", Ссылка, НаборРасчетСреднего);
		КонецЕсли;
	КонецЕсли;
	
	Если РассчитываемыеТаблицы.РасчетСреднего Тогда
		
		// перепишем записи расчета среднего заработка в документ
		РасчетСреднегоПоКалендарным.Очистить();
		РасчетСреднегоПоШестидневке.Очистить();
		
		ВременнаяТЗ = НаборРасчетСреднего.Выгрузить();
		ВременнаяТЗ.Свернуть("Сотрудник,СпособРасчета,БазовыйПериодКонец,БазовыйПериодНачало,ВидРасчета,КоэффициентИндексации,НормаПоПятидневке,ОтработаноДней,ОтработаноПоПятидневке,ОтработаноЧасов,ЧислоМесяцев,МесяцВыборки,ТекущаяТарифнаяСтавка,ТарифнаяСтавкаПериода,НормаДней,НормаЧасов","Результат,НАчисленнаяСумма");
		

		// перепишем записи расчета среднего заработка в документ
		Для Каждого СтрокаНабора Из ВременнаяТЗ Цикл
			Если СтрокаНабора.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням Тогда
				СтрокаТЧ = РасчетСреднегоПоКалендарным.Добавить();
			Иначе
				СтрокаТЧ = РасчетСреднегоПоШестидневке.Добавить();
				
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтрокаНабора);
			СтрокаТЧ.ОтработаноДней = КоэффициентОтпуска;
		КонецЦикла;
		
	КонецЕсли;
	
	Если РежимПерерасчета тогда
		// Для режима перерасчета запишем движения (набор записей расчета среднего уже записан)
		НаборОсновныеНачисления.Записать();
		НаборДополнительныеНачисления.Записать();
		
	Иначе	
		// Удаляем движения для режима интерактивного расчета 
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборДополнительныеНачисления.Очистить();
		НаборДополнительныеНачисления.Записать();
		
		НаборРасчетСреднего.Очистить();
		НаборРасчетСреднего.Записать();
		
	КонецЕсли;
	
		
КонецПроцедуры // РассчитатьНачисления()

// Выполняет перерасчет по заданному списку физлиц
// Параметры
//	Физлица - массив - ссылки на физлиц
// Возвращаемое значение
//	Нет
//
Процедура Перерассчитать(Физлица = Неопределено) Экспорт
	
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	// Выполним полный перерасчет документа
	Рассчитать(Новый Структура("Начисления,РасчетСреднего",Истина,Истина), Истина);
	
	// Зафиксируем данные табличных частей после расчета
	Записать();
	
	Движения.НДФЛСведенияОДоходах.Очистить();
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Очистить();
	Движения.ФактическиеОтпускаОрганизаций.Очистить();
	
	// Получение учетной политики по персоналу организации
	УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");

	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетЗадолженностиПоМесяцам);
		
		//Если Не ВыборкаПоНачислениям.ЕстьКадровыйОтпуск И Не ВыборкаПоНачислениям.ВидЕжегодногоОтпуска.Пустая() Тогда
		//	ДобавитьСтрокуВДвиженияПоОстаткам(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
		//КонецЕсли;
	КонецЦикла;
	
	Движения.НДФЛСведенияОДоходах.Записать();
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Записать();
	Движения.ФактическиеОтпускаОрганизаций.Записать();
	
	// Удалим записи перерасчета по которым выполнен перерасчет
	ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка);
	
КонецПроцедуры // Перерассчитать()

//vvv
Функция СформироватьДокумент()
	
		ТабДокумент = Новый ТабличныйДокумент;
		Макет = ПолучитьМакет("Макет");
	
		Запрос=Новый Запрос;
	
		ОсновнойЗаработок = Новый Массив(2);
		ОсновнойЗаработок[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск;

		ПоГодовымПремиям = Новый Массив(2);
		ПоГодовымПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииОтпуск;
			
		Запрос.УстановитьПараметр("ОсновнойЗаработок",					ОсновнойЗаработок);
		Запрос.УстановитьПараметр("ПослеДеноминации",ПериодРегистрации>=ОбщегоНазначения.ПолучитьДатуДеноминации());
		Запрос.УстановитьПараметр("ДатаДеноминации", ОбщегоНазначения.ПолучитьДатуДеноминации());
		
		Запрос.Текст=
		"ВЫБРАТЬ
		|	Таб1.ВидРасчета КАК ВидРасчета,
		|	ВЫРАЗИТЬ(Таб1.КоэффициентИндексации КАК ЧИСЛО(8, 6)) КАК Индекс,
		|	Таб1.Результат КАК Заработок,
		|	Таб1.МесяцВыборки КАК Месяц,
		//|	ТарифныеСтавкиРаботниковОрганизации.Ставка КАК Оклад,
		|	ВЫБОР
		|		КОГДА ТарифныеСтавкиРаботниковОрганизации.ПериодЗавершения <= &ДатаАктуальности
		|			И ТарифныеСтавкиРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ТарифныеСтавкиРаботниковОрганизации.СтавкаЗавершения 
		|	ИНАЧЕ ТарифныеСтавкиРаботниковОрганизации.Ставка
		|	КОНЕЦ / ВЫБОР КОГДА &ПослеДеноминации И Таб1.МесяцВыборки<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК Оклад,
		|	ГодоваяПремия.МесячнаяЧасть КАК Заработок13я,
		|	ВЫРАЗИТЬ(Таб1.Результат * Таб1.КоэффициентИндексации КАК ЧИСЛО(16, 2)) КАК ЗаработокИ
		|ИЗ
		|	(ВЫБРАТЬ
		|		НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.Сотрудник КАК Сотрудник,
		|		НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.ВидРасчета КАК ВидРасчета,
		|		НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.КоэффициентИндексации КАК КоэффициентИндексации,
		|		НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.Результат КАК Результат,
		|		НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.МесяцВыборки КАК МесяцВыборки,
		|		МАКСИМУМ(ТарифныеСтавкиРаботниковОрганизации.Период) КАК ПериодСтавки
		|	ИЗ
		|		(ВЫБРАТЬ
		|			НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.Ссылка.Сотрудник КАК Сотрудник,
		|			НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.ВидРасчета КАК ВидРасчета,
		|			НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.КоэффициентИндексации КАК КоэффициентИндексации,
		|			СУММА(НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.Результат) КАК Результат,
		|			НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.МесяцВыборки КАК МесяцВыборки
		|		ИЗ
		|			Документ.НачислениеОтпускаРаботникамОрганизаций.РасчетСреднегоПоКалендарным КАК НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным
		|		ГДЕ
		|			НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.Ссылка = &ДокументСсылка
		|			И НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.ВидРасчета В(&ОсновнойЗаработок)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.Ссылка.Сотрудник,
		|			НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.ВидРасчета,
		|			НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.КоэффициентИндексации,
		|			НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.МесяцВыборки) КАК НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации КАК ТарифныеСтавкиРаботниковОрганизации
		|			ПО НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.Сотрудник = ТарифныеСтавкиРаботниковОрганизации.Сотрудник
		|				И (ТарифныеСтавкиРаботниковОрганизации.Период <= НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.МесяцВыборки)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.Сотрудник,
		|		НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.ВидРасчета,
		|		НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.КоэффициентИндексации,
		|		НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.Результат,
		|		НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.МесяцВыборки) КАК Таб1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации КАК ТарифныеСтавкиРаботниковОрганизации
		|		ПО Таб1.ПериодСтавки = ТарифныеСтавкиРаботниковОрганизации.Период
		|			И Таб1.Сотрудник = ТарифныеСтавкиРаботниковОрганизации.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВЫБОР
		|				КОГДА ГодоваяПремия.МесяцевДляРасчета = 0
		|					ТОГДА 0
		|				ИНАЧЕ ВЫРАЗИТЬ(ГодоваяПремия.ВсегоЗаработкаГодовой / ГодоваяПремия.МесяцевДляРасчета КАК ЧИСЛО(16, 2))
		|			КОНЕЦ КАК МесячнаяЧасть
		|		ИЗ
		|			(ВЫБРАТЬ
		|				СУММА(ВЫБОР
		|						КОГДА НЕ РасчетСреднегоЗаработка.ВидРасчета В (&ПоГодовымПремиям)
		|							ТОГДА 0
		|						ИНАЧЕ РасчетСреднегоЗаработка.Результат * ВЫБОР
		|								КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
		|									ТОГДА 1
		|								ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
		|							КОНЕЦ
		|					КОНЕЦ) КАК ВсегоЗаработкаГодовой,
		|				СУММА(ВЫБОР
		|						КОГДА НЕ РасчетСреднегоЗаработка.ВидРасчета В (&ПоГодовымПремиям)
		|							ТОГДА ВЫБОР
		|									КОГДА РасчетСреднегоЗаработка.Ссылка.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|											И РасчетСреднегоЗаработка.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|										ТОГДА 0
		|									ИНАЧЕ 1
		|								КОНЕЦ
		|						ИНАЧЕ 0
		|					КОНЕЦ) КАК МесяцевДляРасчета
		|			ИЗ
		|				Документ.НачислениеОтпускаРаботникамОрганизаций.РасчетСреднегоПоКалендарным КАК РасчетСреднегоЗаработка
		|			ГДЕ
		|				РасчетСреднегоЗаработка.Ссылка = &ДокументСсылка) КАК ГодоваяПремия) КАК ГодоваяПремия
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таб1.МесяцВыборки
		|ИТОГИ
		|	СУММА(Заработок),
		|	СУММА(Заработок13я),
		|	СУММА(ЗаработокИ)
		|ПО
		|	ВидРасчета";
		
		
		ЗапросПоШапке=Новый Запрос;
		ЗапросПоШапке.Текст=
		"ВЫБРАТЬ
		|	НачислениеОтпускаРаботникамОрганизаций.Сотрудник,
		|	НачислениеОтпускаРаботникамОрганизаций.Номер КАК НомерДок,
		|	НачислениеОтпускаРаботникамОрганизаций.Дата КАК ДатаДок,
		|	НачислениеОтпускаРаботникамОрганизаций.ВидРасчетаОсновногоОтпуска КАК ВидРасчета,
		|	НачислениеОтпускаРаботникамОрганизаций.ВидРасчетаОсновногоОтпуска.Наименование КАК ВидРасчетаНаименование,
		|	НачислениеОтпускаРаботникамОрганизаций.ВидРасчетаКомпенсацииОтпуска.Наименование КАК ВидРасчетаКомпенсацииОтпускаНаименование,
		|	НачислениеОтпускаРаботникамОрганизаций.ДнейЧасовКомпенсацииОтпуска КАК ДнейКомпенсации,
		|	НачислениеОтпускаРаботникамОрганизаций.ДатаНачалаОсновногоОтпуска КАК Начало,
		|	НачислениеОтпускаРаботникамОрганизаций.ДатаОкончанияОсновногоОтпуска КАК Окончание,
		|	НачислениеОтпускаРаботникамОрганизаций.Сотрудник.Код КАК Код,
		//|	ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.Ставка КАК ТекущийОклад,
		|	ВЫБОР
		|		КОГДА ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
		|			И ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.СтавкаЗавершения
		|		ИНАЧЕ ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.Ставка
		|	КОНЕЦ КАК ТекущийОклад,
		|	НачислениеОтпускаРаботникамОрганизаций.КоличествоДнейОсновногоОтпуска КАК Дней
		|ИЗ
		|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК НачислениеОтпускаРаботникамОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации.СрезПоследних(&ДатаАктуальности, ) КАК ТарифныеСтавкиРаботниковОрганизацииСрезПоследних
		|		ПО НачислениеОтпускаРаботникамОрганизаций.Сотрудник = ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.Сотрудник
		|ГДЕ
		|	НачислениеОтпускаРаботникамОрганизаций.Ссылка = &ДокументСсылка";
		
		
		ЗапросПоДопОтпускам=Новый Запрос;
		ЗапросПоДопОтпускам.Текст=
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска.ДатаОкончанияДополнительногоОтпуска КАК ДатаОкончанияДополнительногоОтпуска,
		|	КоличествоДней.КоличествоДнейДополнительногоОтпуска КАК ДнейДопОтпуска
		|ИЗ
		|	Документ.НачислениеОтпускаРаботникамОрганизаций.ДополнительныеОтпуска КАК НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска.Ссылка КАК Ссылка,
		|			СУММА(НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска.КоличествоДнейДополнительногоОтпуска) КАК КоличествоДнейДополнительногоОтпуска
		|		ИЗ
		|			Документ.НачислениеОтпускаРаботникамОрганизаций.ДополнительныеОтпуска КАК НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска.Ссылка) КАК КоличествоДней
		|		ПО НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска.Ссылка = КоличествоДней.Ссылка
		|ГДЕ
		|	НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОкончанияДополнительногоОтпуска УБЫВ";
		
		ЗапросПоНачислениям = Новый Запрос;
		
		ЗапросПоНачислениям.Текст=
		"ВЫБРАТЬ
		|	НачислениеОтпускаРаботникамОрганизацийНачисления.ВидРасчета,
		|	НачислениеОтпускаРаботникамОрганизацийНачисления.Результат КАК Всего,
		|	НАЧАЛОПЕРИОДА(НачислениеОтпускаРаботникамОрганизацийНачисления.ДатаНачала, МЕСЯЦ) КАК Месяц,
		|	НачислениеОтпускаРаботникамОрганизацийНачисления.ОплаченоДнейЧасов КАК Дней,
		|	НачислениеОтпускаРаботникамОрганизацийНачисления.Ссылка.Сотрудник КАК Сотрудник
		|ИЗ
		|	Документ.НачислениеОтпускаРаботникамОрганизаций.Начисления КАК НачислениеОтпускаРаботникамОрганизацийНачисления
		|ГДЕ
		|	НачислениеОтпускаРаботникамОрганизацийНачисления.Ссылка = &ДокументСсылка
		|ИТОГИ
		|	СУММА(Всего)
		|ПО
		|	Сотрудник";
		
		ЗапросПоШапке.УстановитьПараметр("ДокументСсылка",Ссылка);
		ЗапросПоШапке.УстановитьПараметр("ДатаАктуальности",ПолучитьДатуНачалаСобытия());
		ВыборкаПоШапке=ЗапросПоШапке.Выполнить().Выбрать();
		
		Запрос.УстановитьПараметр("ДокументСсылка",Ссылка);
		Запрос.УстановитьПараметр("ПоГодовымПремиям",ПоГодовымПремиям);
		Запрос.УстановитьПараметр("ОсновнойЗаработок",ОсновнойЗаработок);
		Запрос.УстановитьПараметр("ДатаАктуальности",ПолучитьДатуНачалаСобытия());
		
		ЗапросПоНачислениям.УстановитьПараметр("ДокументСсылка",Ссылка);		
		
		ЗапросПоДопОтпускам.УстановитьПараметр("ДокументСсылка",Ссылка);
		ДатаДопОтпуска=Дата(1,1,1);
		ДнейДопОтпуска=0;
		ВыбораДопОтпуск=ЗапросПоДопОтпускам.Выполнить().Выбрать();
		
		Если ВыбораДопОтпуск.Следующий() ТОгда
			ДатаДопОтпуска=ВыбораДопОтпуск.ДатаОкончанияДополнительногоОтпуска;
			ДнейДопОтпуска=ВыбораДопОтпуск.ДнейДопОтпуска;
		КонецЕсли;		
		
		ВыборкаНачисленийПоСотруднику=ЗапросПоНачислениям.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ВыборкаИтогов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		
		ОбластьШапка=Макет.ПолучитьОбласть("Шапка");
		ОбластьШапкаР=Макет.ПолучитьОбласть("ШапкаР");
		ОбластьСтрока=Макет.ПолучитьОбласть("СтрЗП");
		ОбластьИтоги=Макет.ПолучитьОбласть("Итоги");
		ОбластьИтог=Макет.ПолучитьОбласть("Итог");
		ОбластьНачислений=Макет.ПолучитьОбласть("СтрР");
		
		Если ВыборкаПоШапке.Следующий() ТОгда
			
			ОбластьШапка.Параметры.Заполнить(ВыборкаПоШапке);
			ОбластьШапка.Параметры.ДатаДок=Формат(ВыборкаПоШапке.ДатаДок,"ДЛФ=Д");
			Если ВыборкаПоШапке.ВидРасчетаНаименование<>Null Тогда
				ОбластьШапка.Параметры.Период=ВыборкаПоШапке.ВидРасчетаНаименование+": с "+Формат(ВыборкаПоШапке.Начало,"ДЛФ=Д")+" по "+Формат(?(ДатаДопОтпуска<>Дата(1,1,1),ДатаДопОтпуска,ВыборкаПоШапке.Окончание),"ДЛФ=Д")+", длительность - "+(ВыборкаПоШапке.Дней+ДнейДопОтпуска)+" дней";
			Иначе
				ОбластьШапка.Параметры.Период=ВыборкаПоШапке.ВидРасчетаКомпенсацииОтпускаНаименование+": "+Строка(ВыборкаПоШапке.ДнейКомпенсации)+" дней";
			КонецЕсли;			
			ТабДокумент.Вывести(ОбластьШапка);
			
		КонецЕсли;
		
		Пока ВыборкаИтогов.Следующий() Цикл
			
			ОбластьИтоги.Параметры.Заполнить(ВыборкаИтогов);
			ВыборкаСреднего=ВыборкаИтогов.Выбрать();
			
			Пока ВыборкаСреднего.Следующий() Цикл
				ОбластьСтрока.Параметры.Заполнить(ВыборкаСреднего);
				ОбластьСтрока.Параметры.Месяц=Формат(ВыборкаСреднего.Месяц,"ДФ='ММММ гггг ""г.""'");
				ТабДокумент.Вывести(ОбластьСтрока);
			КонецЦикла;			
			ТабДокумент.Вывести(ОбластьИтоги);
		КонецЦикла;
		
		ТабДокумент.Вывести(ОбластьШапкаР);
		Если ВыборкаНачисленийПоСотруднику.Следующий() ТОгда
			ВыборкаНачислений=ВыборкаНачисленийПоСотруднику.Выбрать();
			ОбластьИтог.Параметры.Заполнить(ВыборкаНачисленийПоСотруднику);
			Пока ВыборкаНачислений.Следующий() Цикл
				ОбластьНачислений.Параметры.Заполнить(ВыборкаНачислений);
				ОбластьНачислений.Параметры.Месяц=Формат(ВыборкаНачислений.Месяц,"ДФ='ММММ гггг ""г.""'");
				ТабДокумент.Вывести(ОбластьНачислений);
			КонецЦикла;
			ОбластьИтог.Параметры.ИтогПрописью=РаботаСДиалогами.СформироватьСуммуПрописью(ВыборкаНачисленийПоСотруднику.Всего,Константы.ВалютаРегламентированногоУчета.Получить());
			ТабДокумент.Вывести(ОбластьИтог);	
		КонецЕсли;		
		
	ТабДокумент.АвтоМасштаб=Истина;
	ТабДокумент.ОриентацияСтраницы=ОриентацияСтраницы.Портрет;
	
	Возврат ТабДокумент;
	
КонецФункции

//
#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//	Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
	Если Не  Проведен Тогда
		РаботаСДиалогами.ВывестиПредупреждение("Документ можно распечатать только после расчета и проведения!");
		Возврат Неопределено;
	КонецЕсли;
		
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Т60" Тогда
		ТабДокумент = ПечатьТ60();
		Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (Т-60)");
		
	ИначеЕсли ИмяМакета = "РасчетОсновногоОтпуска" Тогда
		Если Не ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) Или ДатаНачалаОсновногоОтпуска = ДатаОкончанияДополнительногоОтпуска Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По документу не оплачивается основной отпуск!");
			Возврат Неопределено;
		КонецЕсли;
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
		ТабДокумент = ФормированиеПечатныхФорм.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаНачалаОсновногоОтпуска, ВыборкаПоШапкеДокумента.ПериодРасчетаОсновногоОтпуска, "с " + Формат(ДатаНачалаОсновногоОтпуска,"ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончанияОсновногоОтпуска,"ДФ=dd.MM.yyyy"), ВидРасчетаОсновногоОтпуска.СпособРасчета, ИспользоватьСреднеЧасовойЗаработок);
		Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (расчет среднего заработка основного отпуска)");
		
	ИначеЕсли ИмяМакета = "РасчетДополнительногоОтпуска" Тогда
		Если ДополнительныеОтпуска.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По документу не оплачивается дополнительный отпуск!");
			Возврат Неопределено
		КонецЕсли;

		ВыборкаПоШапкеДокумента = СформироватьЗапросПоДопОтпускам().Выбрать();
		Пока ВыборкаПоШапкеДокумента.Следующий() Цикл
			ТабДокумент = ФормированиеПечатныхФорм.ПечатьРасчетаСреднегоЗаработка(Ссылка, ПолучитьДатуНачалаСобытия(), ВыборкаПоШапкеДокумента.ПериодРасчетаДополнительногоОтпуска, "с " + Формат(ВыборкаПоШапкеДокумента.ДатаНачалаДополнительногоОтпуска,"ДФ=dd.MM.yyyy") + " по " + Формат(ВыборкаПоШапкеДокумента.ДатаОкончанияДополнительногоОтпуска,"ДФ=dd.MM.yyyy"), ВыборкаПоШапкеДокумента.ВидРасчетаДополнительногоОтпускаСпособРасчета, ИспользоватьСреднеЧасовойЗаработок);
			Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (расчет среднего заработка дополнительного отпуска)");
		КонецЦикла;
		
	ИначеЕсли ИмяМакета = "РасчетКомпенсацииОтпуска" Тогда
		Если Не ЗначениеЗаполнено(ДнейЧасовКомпенсацииОтпуска) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По документу не оплачивается компенсация отпуска!");
			Возврат Неопределено
		КонецЕсли;
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
		ТабДокумент = ФормированиеПечатныхФорм.ПечатьРасчетаСреднегоЗаработка(Ссылка, ПолучитьДатуНачалаСобытия(), ВыборкаПоШапкеДокумента.ПериодРасчетаКомпенсацииОтпуска, "за " + ДнейЧасовКомпенсацииОтпуска + " дней(часов) компенсации отпуска", ?(ПорядокРасчетаКомпенсацииОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке), ИспользоватьСреднеЧасовойЗаработок);
		Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (расчет среднего заработка компенсации отпуска)");
	//vvv	
	ИначеЕсли ИмяМакета="Макет" ТОгда
		ТабДокумент=СформироватьДокумент();
		Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (расчет среднего заработка компенсации отпуска)");
	КонецЕсли;
	//	
КонецФункции // Печать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует запрос по шапке документа для целей выода документа на печать
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапкеДляПечати()
		
	ДатаНачалаСобытия = ПолучитьДатуНачалаСобытия();
		
	Запрос = Новый Запрос;
		
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",		ДатаНачалаСобытия);
	Запрос.УстановитьПараметр("Сотрудник",				Сотрудник);
	Запрос.УстановитьПараметр("Физлицо",				Сотрудник.Физлицо);
	Запрос.УстановитьПараметр("МесяцевРасчетаПоЗакону",	?(ДатаНачалаСобытия < ПроведениеРасчетов.ПолучитьДатуВступленияВСилуИзмененийТрудовогоКодекса2006(),3,12));
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Отпуск.Дата КАК ДатаДокумента,
	|	Отпуск.Номер КАК НомерДокумента,
	|	Отпуск.Сотрудник КАК Сотрудник,
	|	Отпуск.ДатаНачалаОсновногоОтпуска,
	|	Отпуск.ДатаОкончанияОсновногоОтпуска,
	|	Отпуск.РабочийГодС,
	|	Отпуск.РабочийГодПо,
	|	Отпуск.ПорядокРасчетаОсновногоОтпуска,
	|	Отпуск.ИспользоватьСреднеЧасовойЗаработок КАК ИспользоватьСреднеЧасовойЗаработок,
	|	Отпуск.Организация.КодПоОКПО КАК КодПоОКПО,
	|	Отпуск.Организация.НаименованиеПолное КАК НазваниеОрганизации,
	|	Отпуск.Сотрудник.Код КАК ТабельныйНомер,
	|	Отпуск.Организация.Префикс,
	|	ЕСТЬNULL(ФИОФизлица.Фамилия + "" "" + ФИОФизлица.Имя + "" "" + ФИОФизлица.Отчество, Отпуск.Сотрудник.Наименование) КАК ФИО,
	|	ВЫБОР
	|		КОГДА  РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|		ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.Наименование
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|		ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность.Наименование 
	|	КОНЕЦ КАК Должность,	
	|	ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРФ, ЛОЖЬ) КАК НеЯвляетсяНалоговымРезидентомРФ,
	|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ДатаНачалаОтпуска,
	|	Отпуск.ДатаОкончанияОсновногоОтпуска  КАК ДатаОкончанияОтпуска";
	Если ДатаНачалаОсновногоОтпуска <> '00010101' Тогда
	ТекстЗапроса = ТекстЗапроса + ",
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, -(ВЫБОР
	|		КОГДА ПараметрыВидаРасчетаОсновногоОтпуска.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору)
	|			ТОГДА ПараметрыВидаРасчетаОсновногоОтпуска.ПериодРасчетаСреднегоЗаработка
	|		ИНАЧЕ &МесяцевРасчетаПоЗакону
	|	КОНЕЦ)) КАК ПериодРасчетаОсновногоОтпускаНачало";
	КонецЕсли;
	Если ДнейЧасовКомпенсацииОтпуска > 0 Тогда
	ТекстЗапроса = ТекстЗапроса + ",
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, -(ВЫБОР
	|		КОГДА ПараметрыВидаРасчетаКомпенсация.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору)
	|			ТОГДА ПараметрыВидаРасчетаКомпенсация.ЧислоМесяцев
	|		ИНАЧЕ &МесяцевРасчетаПоЗакону
	|	КОНЕЦ)) КАК ПериодРасчетаКомпенсацииОтпускаНачало";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК Отпуск
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаНачалаСобытия, ФизЛицо = &ФизЛицо) КАК ФИОФизлица
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&ДатаНачалаСобытия, ФизЛицо = &ФизЛицо) КАК ГражданствоФизЛицСрезПоследних
	|		ПО (ИСТИНА)";
	Если ДатаНачалаОсновногоОтпуска <> '00010101' Тогда
	ТекстЗапроса = ТекстЗапроса + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ПараметрыВидаРасчетаОсновногоОтпуска
	|		ПО (ПараметрыВидаРасчетаОсновногоОтпуска.Ссылка = ВЫБОР
	|			КОГДА Отпуск.ПорядокРасчетаОсновногоОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|				ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни)
	|			ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка)
	|		КОНЕЦ)";
	КонецЕсли;
	Если ДнейЧасовКомпенсацииОтпуска > 0 Тогда
	ТекстЗапроса = ТекстЗапроса + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ПараметрыВидаРасчетаКомпенсация
	|		ПО (ПараметрыВидаРасчетаКомпенсация.Ссылка = ВЫБОР
	|					КОГДА Отпуск.ПорядокРасчетаКомпенсацииОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|						ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения)
	|					ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения)
	|				КОНЕЦ)";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ГДЕ
	|	Отпуск.Ссылка = &ДокументСсылка";
		
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();
		
КонецФункции // СформироватьЗапросПоШапкеДляПечати()

// Формирует запрос табличной части ДополнительныеОтпуска документа для целей выода документа на печать
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоДопОтпускамДляПечати()
		
 	Запрос = Новый Запрос;
		
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска.ДатаНачалаДополнительногоОтпуска КАК ДатаНачалаДополнительногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска.ДатаОкончанияДополнительногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска.ВидРасчетаДополнительногоОтпуска.Наименование КАК ВидДополнительногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска.КоличествоДнейДополнительногоОтпуска КАК ДнейКОплатеДополнительногоОтпуска
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций.ДополнительныеОтпуска КАК НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска
	|ГДЕ
	|	НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачалаДополнительногоОтпуска";
		
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();
		
КонецФункции 

Функция СформироватьЗапросПоДатамДопОтпусковДляПечати()
		
 	Запрос = Новый Запрос;
		
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МИНИМУМ(НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска.ДатаНачалаДополнительногоОтпуска) КАК ДатаНачалаДополнительногоОтпуска,
	|	МАКСИМУМ(НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска.ДатаОкончанияДополнительногоОтпуска) КАК ДатаОкончанияДополнительногоОтпуска
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций.ДополнительныеОтпуска КАК НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска
	|ГДЕ
	|	НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачалаДополнительногоОтпуска";
		
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();
		
КонецФункции



// Функция формирует табличный документ с печатной формой "Т-60",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТ60() Экспорт
		
	
	// тексты запросов 
		
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапкеДляПечати().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ВыборкаПоДатамДопОтпусковДляПечати = СформироватьЗапросПоДатамДопОтпусковДляПечати().Выбрать();
	ВыборкаПоДатамДопОтпусковДляПечати.Следующий();
	
	ВыборкаПоДопОтпускам = СформироватьЗапросПоДопОтпускамДляПечати().Выбрать();


	
	
	 //Определение даты начала и конца оплачиваемого события 
	
	УказанаДатаНачалаОсновногоОтпуска = ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачалаОсновногоОтпуска);
	УказанаДатаНачалаДополнительногоОтпуска = ЗначениеЗаполнено(ВыборкаПоДатамДопОтпусковДляПечати.ДатаОкончанияДополнительногоОтпуска);

	
	Если УказанаДатаНачалаОсновногоОтпуска Тогда
		
		ДатаНачалаСобытия 			= ВыборкаПоШапкеДокумента.ДатаНачалаОсновногоОтпуска;
		Если УказанаДатаНачалаДополнительногоОтпуска тогда	
			
			ДатаОкончанияСобытия 	= ВыборкаПоДатамДопОтпусковДляПечати.ДатаОкончанияДополнительногоОтпуска;
		Иначе	
			ДатаОкончанияСобытия 	= ВыборкаПоШапкеДокумента.ДатаОкончанияОсновногоОтпуска;
		КонецЕсли;	
	Иначе
		ДатаНачалаСобытия 			= ВыборкаПоДатамДопОтпусковДляПечати.ДатаНачалаДополнительногоОтпуска;
		ДатаОкончанияСобытия 		= ВыборкаПоДатамДопОтпусковДляПечати.ДатаОкончанияДополнительногоОтпуска;
		Если Не ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда
			ДатаНачалаСобытия		= Мин(КонецМесяца(ПериодРегистрации),ВыборкаПоШапкеДокумента.ДатаДокумента);
			ДатаОкончанияСобытия	= ДатаНачалаСобытия;
		КонецЕсли; 
	КонецЕсли; 
	
	Если Не ПроцедурыУправленияПерсоналом.РегламентированныйКалендарьЗаполнен(НачалоМесяца(ДатаНачалаСобытия),КонецМесяца(ДатаОкончанияСобытия),Истина) Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	// Поскольку в документе может выполняться начисление как основного, так и дополнительного отпуска, 
	// а методика расчета у них может отличаться, то при печати будем использовать порядок расчета отпуска, 
	// указанный в первой строке начислений
	// Это также относится к виду учета времени и периоду расчета среднего заработка
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ФизЛицо", Сотрудник.Физлицо);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия", ДатаНачалаСобытия);
	Запрос.УстановитьПараметр("ДатаОкончанияСобытия", ДатаОкончанияСобытия);

	Запрос.УстановитьПараметр("ГоловнаяОрганизация" , ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|		Начисления.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|		Начисления.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|	
	|	ГДЕ
	|		Начисления.Регистратор = &Регистратор И
	|		(НЕ(Начисления.Сторно))
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|		ДополнительныеНачисленияРаботниковОрганизаций.ПериодРасчетаСреднегоЗаработкаНачало,
	|		ДополнительныеНачисленияРаботниковОрганизаций.ПериодРасчетаСреднегоЗаработкаОкончание
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
	|	
	|	ГДЕ
	|		ДополнительныеНачисленияРаботниковОрганизаций.Регистратор = &Регистратор И
	|		(НЕ(ДополнительныеНачисленияРаботниковОрганизаций.Сторно))) КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник И Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизацииСрезПоследних
	|		ПО (ИСТИНА)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.СуммированныйУчетРабочегоВремени = Истина  Тогда
			ИспользуемыйВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		Иначе
			ИспользуемыйВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		КонецЕсли;
		ИспользуемаяДатаНачалаРасчетногоПериода = Выборка.ПериодРасчетаСреднегоЗаработкаНачало;
		ИспользуемаяДатаОкончанияРасчетногоПериода = КонецДня(Выборка.ПериодРасчетаСреднегоЗаработкаОкончание);
	Иначе	
		Предупреждение("Документ не имеет начислений!");
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;  
	
	МесяцевРасчетногоПериода = Год(ИспользуемаяДатаОкончанияРасчетногоПериода)*12 + Месяц(ИспользуемаяДатаОкончанияРасчетногоПериода)  - (Год(ИспользуемаяДатаНачалаРасчетногоПериода)*12 + Месяц(ИспользуемаяДатаНачалаРасчетногоПериода)) + 1;
	
	// Запрос выборки среднего заработка
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.Результат) КАК Результат,
	               |	НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.МесяцВыборки КАК МесяцВыборки,
	               |	НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.ТарифнаяСтавкаПериода,
	               |	НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.ТекущаяТарифнаяСтавка,
	               |	НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.КоэффициентИндексации
	               |ИЗ
	               |	Документ.НачислениеОтпускаРаботникамОрганизаций.РасчетСреднегоПоКалендарным КАК НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным
	               |ГДЕ
	               |	НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.Результат <> 0
	               |	И НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.МесяцВыборки <> &ПустаяДата
	               |	И НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.ВидРасчета <> &ВидРасчетаПоГодовойПремии
	               |	И НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.Ссылка = &Регистратор
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.МесяцВыборки,
	               |	НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.КоэффициентИндексации,
	               |	НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.ТарифнаяСтавкаПериода,
	               |	НачислениеОтпускаРаботникамОрганизацийРасчетСреднегоПоКалендарным.ТекущаяТарифнаяСтавка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МесяцВыборки";
	
	Измерения = Новый Массив(1);
	Измерения[0] = "Сотрудник";
	
	// основные начисления собираем по периодам действия
	РазрезыОсновных = Новый Массив(1);
	РазрезыОсновных[0] = "ПериодДействия";
	
	// дополнительные начисления собираем по периодам регистрации
	РазрезыДополнительных = Новый Массив(2);
	РазрезыДополнительных[0] = "ПериодРегистрации";
	РазрезыДополнительных[1] = "ЧислоМесяцев";
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	Запрос.УстановитьПараметр("Измерения", Измерения);
	Запрос.УстановитьПараметр("РазрезыОсновных", РазрезыОсновных);
	Запрос.УстановитьПараметр("РазрезыДополнительных", РазрезыДополнительных);
	Запрос.УстановитьПараметр("ВидРасчетаПоФиксПремиям", ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	Запрос.УстановитьПараметр("ВидРасчетаПоГодовойПремии", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии);
	//vvv
	Запрос.УстановитьПараметр("ВидРасчетаПоФиксПремиям", ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямОтпуск);
	Запрос.УстановитьПараметр("ВидРасчетаПоГодовойПремии", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииОтпуск);
	//
	Запрос.УстановитьПараметр("МесяцевРасчетногоПериода", МесяцевРасчетногоПериода);
	Запрос.УстановитьПараметр("ГодоваяПремия", Перечисления.ВидыПремии.ГодоваяПремия);
	Запрос.УстановитьПараметр("ГодПредшествующийСобытию", ГОД(ДатаНачалаСобытия) - 1);

	
	ТаблицаСреднего = Новый ТаблицаЗначений;        
	ТаблицаСреднего.Колонки.Добавить("Месяц");
	ТаблицаСреднего.Колонки.Добавить("Сумма");
	ТаблицаСреднего.Колонки.Добавить("Описание");
	
	ВыборкаСреднегоЗаработка = Запрос.Выполнить().Выбрать();
		
	// Выборка дней , оплаченных за первый месяц отпуска и последующие месяцы
	
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало, МЕСЯЦ) = &ПервыйМесяцОтпуска ТОГДА ""Текущий"" ИНАЧЕ ""Будущий"" КОНЕЦ Как ВидМесяца,
	|	СУММА(ВЫБОР КОГДА Начисления.ВидРасчета В (&ВидыРасчетаОсновнойОтпуск) ТОГДА ПроизводственныйКалендарь.КалендарныеДни ИНАЧЕ 0 КОНЕЦ) КАК ДнейКОплатеОсновногоОтпуска,
	//|	СУММА(ВЫБОР КОГДА НЕ(Начисления.ВидРасчета В (&ВидыРасчетаОсновнойОтпуск)) ТОГДА ПроизводственныйКалендарь.КалендарныеДни ИНАЧЕ 0 КОНЕЦ) КАК ДнейКОплатеДополнительногоОтпуска
	//vvv
	|	СУММА(ВЫБОР КОГДА (НЕ(Начисления.ВидРасчета В (&ВидыРасчетаОсновнойОтпуск)) и (Начисления.ВидРасчета<>&ВидыРасчетаОтпускИзФМП)) ТОГДА ПроизводственныйКалендарь.КалендарныеДни ИНАЧЕ 0 КОНЕЦ) КАК ДнейКОплатеДополнительногоОтпуска
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(Регистратор = &Регистратор) КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|		ПО (ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|
	|ГДЕ
	|	(НЕ(Начисления.Сторно))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало, МЕСЯЦ) = &ПервыйМесяцОтпуска ТОГДА ""Текущий"" ИНАЧЕ ""Будущий"" КОНЕЦ";
	
	Запрос.УстановитьПараметр("ПервыйМесяцОтпуска", НачалоМесяца(ДатаНачалаСобытия));
	
	ВидыРасчетаОсновнойОтпуск = Новый Массив;
	ВидыРасчетаОсновнойОтпуск.Добавить(ВидРасчетаОсновногоОтпуска);
	Запрос.УстановитьПараметр("ВидыРасчетаОсновнойОтпуск", ВидыРасчетаОсновнойОтпуск);
	//vvv
	Запрос.УстановитьПараметр("ВидыРасчетаОтпускИзФМП", ВидРасчетаОсновногоОтпуска.ОтпускИзФМП);
	
	ДнейКОплатеОсновногоОтпускаЗаТекущийМесяц = 0;
	ДнейКОплатеДополнительногоОтпускаЗаТекущийМесяц = 0;
	ДнейКОплатеОсновногоОтпускаЗаБудущиеМесяцы = 0;
	ДнейКОплатеДополнительногоОтпускаЗаБудущиеМесяцы = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидМесяца = "Текущий" Тогда
			ДнейКОплатеОсновногоОтпускаЗаТекущийМесяц = Выборка.ДнейКОплатеОсновногоОтпуска;
			ДнейКОплатеДополнительногоОтпускаЗаТекущийМесяц = Выборка.ДнейКОплатеДополнительногоОтпуска;
		Иначе
			ДнейКОплатеОсновногоОтпускаЗаБудущиеМесяцы = Выборка.ДнейКОплатеОсновногоОтпуска;
			ДнейКОплатеДополнительногоОтпускаЗаБудущиеМесяцы = Выборка.ДнейКОплатеДополнительногоОтпуска;
		КонецЕсли; 
	КонецЦикла; 

	// Выборка начисленных сумм за отпуск
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(Начисления.НачисленоОтпускных) КАК НачисленоОтпускных,
	|	СУММА(Начисления.НачисленоОтпускныхФМП) КАК НачисленоОтпускныхФМП,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало, МЕСЯЦ) = &ПервыйМесяцОтпуска ТОГДА ""Текущий"" ИНАЧЕ ""Будущий"" КОНЕЦ КАК ВидМесяца
	|ИЗ
	|	(ВЫБРАТЬ
	|		Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	//vvv
	//|		Начисления.Результат КАК НачисленоОтпускных
	|		ВЫБОР 
	|			КОГДА Начисления.ВидРасчета В (&ВидыРасчетаОсновнойОтпуск) ТОГДА 
	|				Начисления.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НачисленоОтпускных,
	|		ВЫБОР 
	|			КОГДА НЕ (Начисления.ВидРасчета В (&ВидыРасчетаОсновнойОтпуск)) ТОГДА 
	|				Начисления.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НачисленоОтпускныхФМП
	//
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|	
	|	ГДЕ
	|		Начисления.Регистратор = &Регистратор И
	|		(НЕ(Начисления.Сторно))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации,
	|		ДополнительныеНачисленияРаботниковОрганизаций.Результат,
	//vvv
	|		0
	//
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
	|	
	|	ГДЕ
	|		ДополнительныеНачисленияРаботниковОрганизаций.Регистратор = &Регистратор И
	|		(НЕ(ДополнительныеНачисленияРаботниковОрганизаций.Сторно))) КАК Начисления
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало, МЕСЯЦ) = &ПервыйМесяцОтпуска ТОГДА ""Текущий"" ИНАЧЕ ""Будущий"" КОНЕЦ";
	
	НачисленоОтпускныхЗаТекущийМесяц = 0;
	НачисленоОтпускныхЗаБудущиеМесяцы = 0;
	//vvv
	ВидыРасчетаОтпуска = Новый Массив;
	ВидыРасчетаОтпуска.Добавить(ВидРасчетаОсновногоОтпуска);
	Для Каждого ДопОтп Из ДополнительныеОтпуска Цикл
		ВидыРасчетаОтпуска.Добавить(ДопОтп.ВидРасчетаДополнительногоОтпуска);
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидыРасчетаОсновнойОтпуск", ВидыРасчетаОтпуска);
	НачисленоОтпускныхЗаТекущийМесяцФМП = 0;
	НачисленоОтпускныхЗаБудущиеМесяцыФМП = 0;
	//
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидМесяца = "Текущий" Тогда
			НачисленоОтпускныхЗаТекущийМесяц = Выборка.НачисленоОтпускных;
			//vvv
			НачисленоОтпускныхЗаТекущийМесяцФМП = Выборка.НачисленоОтпускныхФМП;
		Иначе	
			НачисленоОтпускныхЗаБудущиеМесяцы = Выборка.НачисленоОтпускных;
			//vvv
			НачисленоОтпускныхЗаБудущиеМесяцыФМП = Выборка.НачисленоОтпускныхФМП;
		КонецЕсли;	
	КонецЦикла;
	//vvv
	//ВсегоНачисленоОтпускных = НачисленоОтпускныхЗаТекущийМесяц  + НачисленоОтпускныхЗаБудущиеМесяцы;
	ВсегоНачисленоОтпускных = НачисленоОтпускныхЗаТекущийМесяц  + НачисленоОтпускныхЗаБудущиеМесяцы + НачисленоОтпускныхЗаТекущийМесяцФМП  + НачисленоОтпускныхЗаБудущиеМесяцыФМП;
		
		
	 //ВЫВОД ДАННЫХ В ОТЧЕТ
	 
	//vvv
	//Макет = ПолучитьМакет("Т_60");
	Макет = ПолучитьМакет("Т_61");
	
	// вывод лицевой стороны
	СекцияЛицеваяСторона = Макет.ПолучитьОбласть("ЛицеваяСторона");
	СекцияСтрокаДоОтпусков = Макет.ПолучитьОбласть("СтрокаДопОтпусков");
	СекцияЛицеваяСторонаПродолжение = Макет.ПолучитьОбласть("ЛицеваяСторонаПродолжение");

	
	СекцияЛицеваяСторона.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
	
	СекцияЛицеваяСторона.Параметры.ДнейКОплатеОсновногоОтпуска = ДнейКОплатеОсновногоОтпускаЗаТекущийМесяц + ДнейКОплатеОсновногоОтпускаЗаБудущиеМесяцы;
	СекцияЛицеваяСторона.Параметры.ДнейКОплатеДополнительногоОтпуска = ДнейКОплатеДополнительногоОтпускаЗаТекущийМесяц + ДнейКОплатеДополнительногоОтпускаЗаБудущиеМесяцы;
	
	СекцияЛицеваяСторона.Параметры.ДатаНачалаОсновногоОтпускаПрописью = Формат(ВыборкаПоШапкеДокумента.ДатаНачалаОсновногоОтпуска,"ДЛФ=DD; ДП=-");
	СекцияЛицеваяСторона.Параметры.ДатаОкончанияОсновногоОтпускаПрописью = Формат(ВыборкаПоШапкеДокумента.ДатаОкончанияОсновногоОтпуска,"ДЛФ=DD; ДП=-");
	
	СекцияЛицеваяСторона.Параметры.ТекстКалендарныхРабочихОсновного = "календарных";
	СекцияЛицеваяСторона.Параметры.ТекстКалендарныхРабочихДополнительного = "календарных";
	
	ТабДокумент.Вывести(СекцияЛицеваяСторона);
	
	Пока ВыборкаПоДопОтпускам.Следующий() Цикл
		СекцияСтрокаДоОтпусков.Параметры.Заполнить(ВыборкаПоДопОтпускам);
		ТабДокумент.Вывести(СекцияСтрокаДоОтпусков);
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ 
				   |	СУММА(РегламентированныйПроизводственныйКалендарь.КалендарныеДни) КАК КоличествоДнейОчередногоОтпуска
				   |ИЗ
				   |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
				   |
				   |ГДЕ
				   |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачалаСобытия И &ДатаОкончанияСобытия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СекцияЛицеваяСторонаПродолжение.Параметры.Заполнить(Выборка)
	КонецЕсли;
	СекцияЛицеваяСторонаПродолжение.Параметры.ДатаНачалаОтпускаПрописью = Формат(ДатаНачалаСобытия,"ДЛФ=DD; ДП=-");
	СекцияЛицеваяСторонаПродолжение.Параметры.ДатаОкончанияОтпускаПрописью = Формат(ДатаОкончанияСобытия,"ДЛФ=DD; ДП=-");


	ТабДокумент.Вывести(СекцияЛицеваяСторонаПродолжение);

		
	// Вывод сведений о порядке расчета среднего заработка
	СекцияРасчетСреднего = Макет.ПолучитьОбласть("РасчетСреднего");
	
	// вывод данных о сумме заработка за расчетный период
	НомерСтроки = 0;
	ИтогоЗаработок = 0;
	ИтогоЗаработокОсовр = 0;
	Пока ВыборкаСреднегоЗаработка.Следующий() Цикл
		
		НомерСтроки = НомерСтроки  + 1;
		
		ОписаниеСуммы = "Заработок " +  Формат(ВыборкаСреднегоЗаработка.Результат,"ЧЦ=15; ЧДЦ=2");
		Коэфф = Окр(ВыборкаСреднегозаработка.КоэффициентИндексации,4,1);
		СуммаРасчета =  Формат(ВыборкаСреднегоЗаработка.Результат * ВыборкаСреднегозаработка.КоэффициентИндексации,"ЧЦ=15; ЧДЦ=2");
		
		ИтогоЗаработок = ИтогоЗаработок + ВыборкаСреднегоЗаработка.Результат;
		//vvv
		//ИтогоЗаработокОсовр = ИтогоЗаработокОсовр + ОКР(ВыборкаСреднегоЗаработка.Результат * ВыборкаСреднегозаработка.КоэффициентИндексации,0,1);
		ИтогоЗаработокОсовр = ИтогоЗаработокОсовр + ОКР(ВыборкаСреднегоЗаработка.Результат * ВыборкаСреднегозаработка.КоэффициентИндексации,2,1);
		//
		
		Если НомерСтроки <= 12 Тогда
			СекцияРасчетСреднего.Параметры["Год" + НомерСтроки] 		= Год(ВыборкаСреднегоЗаработка.МесяцВыборки);
			СекцияРасчетСреднего.Параметры["Месяц" + НомерСтроки] 		= Месяц(ВыборкаСреднегоЗаработка.Месяцвыборки);
			СекцияРасчетСреднего.Параметры["Сумма" + НомерСтроки] 		= ОписаниеСуммы;
			СекцияРасчетСреднего.Параметры["Коэфф" + НомерСтроки] 		= Коэфф;
			СекцияРасчетСреднего.Параметры["ОсоврСумма" + НомерСтроки] 	= СуммаРасчета;
			
			Если НомерСтроки = 12  Тогда
				//vvv
				//Сообщить("Бланк формы не позволяет отразить более 12 записей заработка!");		
			КонецЕсли; 
			
		КонецЕсли;
	КонецЦикла; 
	
	//vvv
	//СтрокиГодовойПремии = РасчетСреднегоПоКалендарным.НайтиСтроки(Новый Структура("ВидРасчета",ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии));
	СтрокиГодовойПремии = РасчетСреднегоПоКалендарным.НайтиСтроки(Новый Структура("ВидРасчета",ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииОтпуск));
	//
	Если СтрокиГодовойПремии.Количество() <> 0 тогда
		СуммаПремии = 0;
		Для каждого СтрокаПремии из СтрокиГодовойПремии цикл
			СуммаПремии = СуммаПремии + СтрокаПремии.Результат;
		КонецЦикла;
		
		Если СуммаПремии <> 0 тогда
		
			ОписаниеСуммы = "Годовая премия "+ Формат(СуммаПремии,"ЧЦ=15; ЧДЦ=2");
			Коэфф = СтрокиГодовойПремии[0].КоэффициентИндексации;
			СуммаРасчета = Формат(СуммаПремии * Коэфф,"ЧЦ=15; ЧДЦ=2");
			
			СекцияРасчетСреднего.Параметры["Год" + (НомерСтроки + 1)] 			= Год(СтрокиГодовойПремии[0].МесяцВыборки);
			СекцияРасчетСреднего.Параметры["Месяц" + (НомерСтроки + 1)]			= Месяц(СтрокиГодовойПремии[0].МесяцВыборки);
			СекцияРасчетСреднего.Параметры["Сумма" + (НомерСтроки + 1)] 		= ОписаниеСуммы;
			СекцияРасчетСреднего.Параметры["Коэфф" + (НомерСтроки + 1)] 		= Коэфф;
			СекцияРасчетСреднего.Параметры["ОсоврСумма" + (НомерСтроки + 1)] 	= СуммаРасчета;
			
			ИтогоЗаработок = ИтогоЗаработок + СуммаПремии;
			ИтогоЗаработокОсовр = ИтогоЗаработокОсовр + СуммаПремии * Коэфф;
		КонецЕсли;
	КонецЕсли;
	
	ТабДокумент.Вывести(СекцияРасчетСреднего);
	
	// итого средний заработок
	СекцияРасчетСреднегоИтого = Макет.ПолучитьОбласть("РасчетСреднегоИтого");
	СекцияРасчетСреднегоИтого.Параметры.ИтогоЗаработок  = ИтогоЗаработок;
	СекцияРасчетСреднегоИтого.Параметры.ИтогоЗаработокОсовр  = ИтогоЗаработокОсовр;
	СекцияРасчетСреднегоИтого.Параметры.КоличествоМесяцев  = НомерСтроки;;
	СекцияРасчетСреднегоИтого.Параметры.СреднийЗаработок  = Формат(ИтогоЗаработокОсовр/(?(НомерСтроки = 0, 1, НомерСтроки) * 29.7),"ЧЦ=15; ЧДЦ=4");
	ТабДокумент.Вывести(СекцияРасчетСреднегоИтого);
	
	//vvv
	//СредняяПоГодовой=СуммаПремии/?(НомерСтроки = 0, 1, НомерСтроки)/29.7;
	//НачисленоОтпускныхИзФМП=Окр(СредняяПоГодовой*(ДнейКОплатеОсновногоОтпускаЗаТекущийМесяц + ДнейКОплатеДополнительногоОтпускаЗаТекущийМесяц));
	//НачисленоОтпускныхИзФМП=Окр(СредняяПоГодовой*(ДнейКОплатеОсновногоОтпускаЗаТекущийМесяц + ДнейКОплатеДополнительногоОтпускаЗаТекущийМесяц));
	//НачисленоОтпускныхЗаБудущиеМесяцыИзФМП=Окр(СредняяПоГодовой*(ДнейКОплатеОсновногоОтпускаЗаБудущиеМесяцы + ДнейКОплатеДополнительногоОтпускаЗаБудущиеМесяцы));
	//
	// Вывод подвала
	СекцияПодвал = Макет.ПолучитьОбласть("Подвал");
	СекцияПодвал.Параметры.СтрТекущийМесяц = ПредставлениеПериода(НачалоМесяца(ДатаНачалаСобытия), КонецМесяца(ДатаНачалаСобытия));
	СекцияПодвал.Параметры.ДнейКОплатеЗаТекущийМесяц = "" + (ДнейКОплатеОсновногоОтпускаЗаТекущийМесяц + ДнейКОплатеДополнительногоОтпускаЗаТекущийМесяц); 
	
	СекцияПодвал.Параметры.НачисленоОтпускныхЗаТекущийМесяц = НачисленоОтпускныхЗаТекущийМесяц;
	//vvv
	СекцияПодвал.Параметры.НачисленоОтпускныхЗаТекущийМесяцФМП=НачисленоОтпускныхЗаТекущийМесяцФМП;
	//
	Если Месяц(ДатаОкончанияСобытия)<>Месяц(ДатаНачалаСобытия) Тогда
		СекцияПодвал.Параметры.ДнейКОплатеЗаБудущиеМесяцы = "" + (ДнейКОплатеОсновногоОтпускаЗаБудущиеМесяцы + ДнейКОплатеДополнительногоОтпускаЗаБудущиеМесяцы); 
		СекцияПодвал.Параметры.СтрБудущиеМесяцы = ПредставлениеПериода(КонецМесяца(ДатаНачалаСобытия) +1, КонецМесяца(ДатаОкончанияСобытия));
		СекцияПодвал.Параметры.НачисленоОтпускныхЗаБудущиеМесяцы = НачисленоОтпускныхЗаБудущиеМесяцы;
		//vvv
		СекцияПодвал.Параметры.НачисленоОтпускныхЗаБудущиеМесяцыФМП = НачисленоОтпускныхЗаБудущиеМесяцыФМП;
		//
	КонецЕсли; 
	СекцияПодвал.Параметры.ВсегоНачислено = ВсегоНачисленоОтпускных;
	
		
	КВыплате = ВсегоНачисленоОтпускных;
	СекцияПодвал.Параметры.КВыплатеПрописью = РаботаСДиалогами.СформироватьСуммуПрописью(КВыплате, Константы.ВалютаРегламентированногоУчета.Получить());
	
	ТабДокумент.Вывести(СекцияПодвал);
	
	Возврат ТабДокумент;
		
КонецФункции // ПечатьТ60()

#КонецЕсли

// Выполняет проверку непрерывности интервалов начислений
//
Процедура ПроверитьНепрерывностьЗаписейНачислений(Отказ)
	
	Если Начисления.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	ТНачислений = Начисления.Выгрузить();
	ТНачислений.Сортировать("ДатаНачала");
	
	ПредыдущаяДатаОкончания = '00010101';
	СтрокаНеПервая = Ложь;
	Для Каждого Строка ИЗ ТНачислений Цикл
		
		Если Строка.Сторно ИЛИ Строка.ВидРасчета <> ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни
			И Строка.ВидРасчета <> ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка
			И Строка.ВидРасчета <> ВидРасчетаДополнительногоОтпуска Тогда
			Возврат;
		КонецЕсли;
		
		// если встретили не первую строку начислений
		Если СтрокаНеПервая Тогда
			// строка не первая
			Если Строка.ДатаНачала <> ПредыдущаяДатаОкончания + мДлинаСуток Тогда
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
				""" табл. части ""Начисления"": ";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "нарушено требование непрерывности записей начислений!", Отказ);
			КонецЕсли;
			
		Иначе
			СтрокаНеПервая = Истина;
			
		КонецЕсли;
		ПредыдущаяДатаОкончания = Строка.ДатаОкончания;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьНепрерывностьЗаписейНачислений()

// Формирует соответствие в котором находятся действующие графики сотрудника 
// на указанные даты
Функция ПолучитьГрафикРаботыСотрудника(Сотрудник, ДатыПолучения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("СписокДат", ДатыПолучения);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыПоВидамВремени.Месяц КАК ДатаПолучения
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &Сотрудник
	|	И ГрафикиРаботыПоВидамВремени.Месяц В(&СписокДат)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДатаПолучения");
	
КонецФункции // ПолучитьГрафикРаботыСотрудника()

// Формирует записи регистра "ОсновныеНачисленияРаботниковОрганизаций" по данным шапки документа
//
Процедура СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента,ВыборкаПоДопОтпускам, НаборОсновныеНачисления, НаборДополнительныеНачисления) Экспорт
	
	ДатаНачалаСобытия = ПолучитьДатуНачалаСобытия();
	ВидУчетаВремени = ВыборкаПоШапкеДокумента.ВидУчетаВремени; 
	
	// сформируем записи начислений по основному отпуску
	Если ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) Тогда
		
		МассивДат = Новый Массив;
		ТекущаяДатаНачала = ДатаНачалаОсновногоОтпуска;
		ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончанияОсновногоОтпуска);
		Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
			МассивДат.Добавить(НачалоМесяца(ТекущаяДатаНачала));
			
			ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
			ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончанияОсновногоОтпуска);
		КонецЦикла;
		МесяцыРасчетаВремениПоТабелю = ПолучитьГрафикРаботыСотрудника(ВыборкаПоШапкеДокумента.Сотрудник, МассивДат);
		ТекущаяДатаНачала = ДатаНачалаОсновногоОтпуска;
		ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончанияОсновногоОтпуска);
		Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
			// строка движений
			Движение = НаборОсновныеНачисления.Добавить();
			
			// Свойства
			Движение.ПериодРегистрации			= ПериодРегистрации;
			Движение.ПериодДействияНачало		= НачалоДня(ТекущаяДатаНачала);
			Движение.ПериодДействияКонец		= КонецДня(ТекущаяДатаОкончания);
			Движение.ВидРасчета					= ВыборкаПоШапкеДокумента.ВидРасчетаОсновногоОтпуска;
			
			// Измерения
			Движение.Сотрудник					= ВыборкаПоШапкеДокумента.Сотрудник;
			Движение.ФизЛицо					= ВыборкаПоШапкеДокумента.ФизЛицо;
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			
			// Реквизиты
			Движение.Показатель1				= ВыборкаПоШапкеДокумента.ПроцентОплатыОсновногоОтпуска;
			Движение.ПодразделениеОрганизации	= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			//vvv
			Движение.Должность					= ВыборкаПоШапкеДокумента.Должность;
			//
			Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
			
			Если МесяцыРасчетаВремениПоТабелю.Найти(НачалоМесяца(ТекущаяДатаНачала)) = Неопределено Тогда
				Движение.ГрафикРаботы			= ВыборкаПоШапкеДокумента.ГрафикРаботы;
			Иначе
				Движение.ГрафикРаботы			= ВыборкаПоШапкеДокумента.Сотрудник;
			КонецЕсли; 
			
			Движение.ВидУчетаВремени			= ВидУчетаВремени;
			Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоШапкеДокумента.ПериодРасчетаОсновногоОтпускаНачало;
			Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
			Движение.ДатаНачалаСобытия			= ДатаНачалаСобытия;
			Движение.РучнойРасчетСреднегоЗаработка = ВыборкаПоШапкеДокумента.РучнойРасчетСреднегоЗаработка;
			Если Движение.РучнойРасчетСреднегоЗаработка тогда
				Движение.РазмерСреднегоЗаработка = ВыборкаПоШапкеДокумента.РазмерСреднегоЗаработка;
			КонецЕсли;

			Движение.Авторасчет					= Истина;
			
			//vvv
			//Отпуск из ФМП
			Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидРасчетаОтпускИзФМП) и (Не ВыборкаПоШапкеДокумента.РучнойРасчетСреднегоЗаработка) ТОгда
				// строка движений
				Движение = НаборОсновныеНачисления.Добавить();
			
				// Свойства
				Движение.ПериодРегистрации			= ПериодРегистрации;
				Движение.ПериодДействияНачало		= НачалоДня(ТекущаяДатаНачала);
				Движение.ПериодДействияКонец		= КонецДня(ТекущаяДатаОкончания);
				Движение.ВидРасчета					= ВыборкаПоШапкеДокумента.ВидРасчетаОтпускИзФМП;
				
				// Измерения
				Движение.Сотрудник					= ВыборкаПоШапкеДокумента.Сотрудник;
				Движение.ФизЛицо					= ВыборкаПоШапкеДокумента.ФизЛицо;
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				
				// Реквизиты
				Движение.Показатель1				= ВыборкаПоШапкеДокумента.ПроцентОплатыОсновногоОтпуска;
				Движение.ПодразделениеОрганизации	= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
				Движение.Должность					= ВыборкаПоШапкеДокумента.Должность;
				Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
				
				Если МесяцыРасчетаВремениПоТабелю.Найти(НачалоМесяца(ТекущаяДатаНачала)) = Неопределено Тогда
					Движение.ГрафикРаботы			= ВыборкаПоШапкеДокумента.ГрафикРаботы;
				Иначе
					Движение.ГрафикРаботы			= ВыборкаПоШапкеДокумента.Сотрудник;
				КонецЕсли; 
				
				Движение.ВидУчетаВремени			= ВидУчетаВремени;
				Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоШапкеДокумента.ПериодРасчетаОсновногоОтпускаНачало;
				Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
				Движение.ДатаНачалаСобытия			= ДатаНачалаСобытия;
				Движение.РучнойРасчетСреднегоЗаработка = ВыборкаПоШапкеДокумента.РучнойРасчетСреднегоЗаработка;
				Если Движение.РучнойРасчетСреднегоЗаработка тогда
					Движение.РазмерСреднегоЗаработка = ВыборкаПоШапкеДокумента.РазмерСреднегоЗаработка;
				КонецЕсли;
	
				Движение.Авторасчет					= Истина;
			КонецЕсли;
            	// 
			
			ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
			ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончанияОсновногоОтпуска);
						
		КонецЦикла;
	КонецЕсли;
	
	 //сформируем записи начислений по дополнительному отпуску
	Пока ВыборкаПоДопОтпускам.Следующий() Цикл 
	    Если ЗначениеЗаполнено(ВыборкаПоДопОтпускам.ДатаНачалаДополнительногоОтпуска) Тогда
	    	
	    	МассивДат = Новый Массив;
	    	ТекущаяДатаНачала = ВыборкаПоДопОтпускам.ДатаНачалаДополнительногоОтпуска;
	    	ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ВыборкаПоДопОтпускам.ДатаОкончанияДополнительногоОтпуска);
	    	Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
	    		МассивДат.Добавить(НачалоМесяца(ТекущаяДатаНачала));
	    		ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
	    		ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ВыборкаПоДопОтпускам.ДатаОкончанияДополнительногоОтпуска);
	    	КонецЦикла;
	    	МесяцыРасчетаВремениПоТабелю = ПолучитьГрафикРаботыСотрудника(ВыборкаПоДопОтпускам.Сотрудник, МассивДат);
	    
	    	ТекущаяДатаНачала = ВыборкаПоДопОтпускам.ДатаНачалаДополнительногоОтпуска;
	    	ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ВыборкаПоДопОтпускам.ДатаОкончанияДополнительногоОтпуска);
	    	Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
	    		// строка движений
	    		Движение = НаборОсновныеНачисления.Добавить();
	    		
	    		// Свойства
	    		Движение.ПериодРегистрации			= ПериодРегистрации;
	    		Движение.ПериодДействияНачало		= НачалоДня(ТекущаяДатаНачала);
	    		Движение.ПериодДействияКонец		= КонецДня(ТекущаяДатаОкончания);
	    		Движение.ВидРасчета					= ВыборкаПоДопОтпускам.ВидРасчетаДополнительногоОтпуска;
	    		
	    		// Измерения
	    		Движение.Сотрудник					= ВыборкаПоДопОтпускам.Сотрудник;
	    		Движение.ФизЛицо					= ВыборкаПоДопОтпускам.ФизЛицо;
	    		Движение.Организация				= ВыборкаПоДопОтпускам.ГоловнаяОрганизация;
	    		
	    		// Реквизиты
	    		Движение.Показатель1				= ВыборкаПоДопОтпускам.ПроцентОплатыДополнительногоОтпуска;
	    		Движение.ПодразделениеОрганизации	= ВыборкаПоДопОтпускам.ПодразделениеОрганизации;
				//vvv
				Движение.Должность					= ВыборкаПоДопОтпускам.Должность;
				//
	    		Движение.ОбособленноеПодразделение	= ВыборкаПоДопОтпускам.ОбособленноеПодразделение;
	    		
	    		Если МесяцыРасчетаВремениПоТабелю.Найти(НачалоМесяца(ТекущаяДатаНачала)) = Неопределено Тогда
	    			Движение.ГрафикРаботы			= ВыборкаПоДопОтпускам.ГрафикРаботы;
	    		Иначе
	    			Движение.ГрафикРаботы			= ВыборкаПоДопОтпускам.Сотрудник;
	    		КонецЕсли; 
	 
	    		Движение.ВариантАлгоритмаРасчета	= ВыборкаПоДопОтпускам.ВариантАлгоритмаРасчета;
	    		Движение.ВидУчетаВремени			= ВидУчетаВремени;
	    		Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоДопОтпускам.ПериодРасчетаДополнительногоОтпускаНачало;
	    		Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоДопОтпускам.ПериодРасчетаСреднегоЗаработкаОкончание;
	    		Движение.ДатаНачалаСобытия			= ДатаНачалаСобытия;
	    		Движение.РучнойРасчетСреднегоЗаработка = ВыборкаПоДопОтпускам.РучнойРасчетСреднегоЗаработка;
	    		Если Движение.РучнойРасчетСреднегоЗаработка тогда
	    			Движение.РазмерСреднегоЗаработка = ВыборкаПоДопОтпускам.РазмерСреднегоЗаработка;
	    		КонецЕсли;
	    		Движение.Авторасчет					= Истина;
				
				//vvv
				//Отпуск из ФМП
				Если (ЗначениеЗаполнено(ВыборкаПоДопОтпускам.ВидРасчетаОтпускИзФМП)) и (Не ВыборкаПоШапкеДокумента.РучнойРасчетСреднегоЗаработка) ТОгда
					// строка движений
	    			Движение = НаборОсновныеНачисления.Добавить();
	    		
		    		// Свойства
	    			Движение.ПериодРегистрации			= ПериодРегистрации;
	    			Движение.ПериодДействияНачало		= НачалоДня(ТекущаяДатаНачала);
	    			Движение.ПериодДействияКонец		= КонецДня(ТекущаяДатаОкончания);
	    			Движение.ВидРасчета					= ВыборкаПоДопОтпускам.ВидРасчетаОтпускИзФМП;
	    			
	    			// Измерения
	    			Движение.Сотрудник					= ВыборкаПоДопОтпускам.Сотрудник;
	    			Движение.ФизЛицо					= ВыборкаПоДопОтпускам.ФизЛицо;
	    			Движение.Организация				= ВыборкаПоДопОтпускам.ГоловнаяОрганизация;
	    			
	    			// Реквизиты
	    			Движение.Показатель1				= ВыборкаПоДопОтпускам.ПроцентОплатыДополнительногоОтпуска;
	    			Движение.ПодразделениеОрганизации	= ВыборкаПоДопОтпускам.ПодразделениеОрганизации;
					Движение.Должность					= ВыборкаПоДопОтпускам.Должность;
	    			Движение.ОбособленноеПодразделение	= ВыборкаПоДопОтпускам.ОбособленноеПодразделение;
	    			
	    			Если МесяцыРасчетаВремениПоТабелю.Найти(НачалоМесяца(ТекущаяДатаНачала)) = Неопределено Тогда
		    			Движение.ГрафикРаботы			= ВыборкаПоДопОтпускам.ГрафикРаботы;
	    			Иначе
		    			Движение.ГрафикРаботы			= ВыборкаПоДопОтпускам.Сотрудник;
	    			КонецЕсли; 
	 	
	    			Движение.ВариантАлгоритмаРасчета	= ВыборкаПоДопОтпускам.ВариантАлгоритмаРасчета;
	    			Движение.ВидУчетаВремени			= ВидУчетаВремени;
	    			Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоДопОтпускам.ПериодРасчетаДополнительногоОтпускаНачало;
	    			Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоДопОтпускам.ПериодРасчетаСреднегоЗаработкаОкончание;
	    			Движение.ДатаНачалаСобытия			= ДатаНачалаСобытия;
	    			Движение.РучнойРасчетСреднегоЗаработка = ВыборкаПоДопОтпускам.РучнойРасчетСреднегоЗаработка;
	    			Если Движение.РучнойРасчетСреднегоЗаработка тогда
		    			Движение.РазмерСреднегоЗаработка = ВыборкаПоДопОтпускам.РазмерСреднегоЗаработка;
	    			КонецЕсли;
		    			Движение.Авторасчет					= Истина;
				КонецЕсли;
            	//
	    		ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
	    		ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ВыборкаПоДопОтпускам.ДатаОкончанияДополнительногоОтпуска);
	    		
	    	КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	
	// сформируем записи начислений по компенсации отпуска
	Если ВыборкаПоШапкеДокумента.ДнейЧасовКомпенсацииОтпуска > 0 Тогда
		Движение = НаборДополнительныеНачисления.Добавить();
		
		// Свойства
		Движение.ПериодРегистрации							= Мин(КонецМесяца(ПериодРегистрации),Макс(ПериодРегистрации,ВыборкаПоШапкеДокумента.Дата));
		//vvv
		Движение.БазовыйПериодНачало						= НачалоМесяца(ВыборкаПоШапкеДокумента.БазовыйПериодКомпенсации);
		Движение.БазовыйПериодКонец							= КонецМесяца(ВыборкаПоШапкеДокумента.БазовыйПериодКомпенсации);
		//
		Движение.ВидРасчета									= ВыборкаПоШапкеДокумента.ВидРасчетаКомпенсацииОтпуска;
		
		// Измерения
		Движение.Сотрудник									= ВыборкаПоШапкеДокумента.Сотрудник;
		Движение.ФизЛицо									= ВыборкаПоШапкеДокумента.ФизЛицо;
		Движение.Организация								= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// Ресурсы
		Движение.ОплаченоДнейЧасов							= ВыборкаПоШапкеДокумента.ДнейЧасовКомпенсацииОтпуска;
		
		// Реквизиты
		Движение.Показатель1								= ВыборкаПоШапкеДокумента.ДнейЧасовКомпенсацииОтпуска;
		Движение.ГрафикРаботы								= ВыборкаПоШапкеДокумента.ГрафикРаботы;
		Движение.ВидУчетаВремени							= ВыборкаПоШапкеДокумента.ВидУчетаВремени;
		Движение.ДатаНачалаСобытия							= ПолучитьДатуНачалаСобытия();
		Движение.ПодразделениеОрганизации					= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		//vvv
		Движение.Должность									= ВыборкаПоШапкеДокумента.Должность;
		//
		Движение.ОбособленноеПодразделение					= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		
		Движение.ПериодРасчетаСреднегоЗаработкаНачало		= ВыборкаПоШапкеДокумента.ПериодРасчетаКомпенсацииОтпускаНачало;
		Движение.ПериодРасчетаСреднегоЗаработкаОкончание	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
		Движение.РучнойРасчетСреднегоЗаработка = ВыборкаПоШапкеДокумента.РучнойРасчетСреднегоЗаработка;
		Если Движение.РучнойРасчетСреднегоЗаработка тогда
			Движение.РазмерСреднегоЗаработка = ВыборкаПоШапкеДокумента.РазмерСреднегоЗаработка;
		КонецЕсли;

		Движение.Авторасчет									= Истина;
		
		//vvv
		//Отпуск из ФМП
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидРасчетаОтпускИзФМПКомп) и (Не ВыборкаПоШапкеДокумента.РучнойРасчетСреднегоЗаработка) ТОгда
			
			Движение = НаборДополнительныеНачисления.Добавить();
			// Свойства
			Движение.ПериодРегистрации							= Мин(КонецМесяца(ПериодРегистрации),Макс(ПериодРегистрации,ВыборкаПоШапкеДокумента.Дата));
			Движение.БазовыйПериодНачало						= НачалоМесяца(ВыборкаПоШапкеДокумента.БазовыйПериодКомпенсации);
			Движение.БазовыйПериодКонец							= КонецМесяца(ВыборкаПоШапкеДокумента.БазовыйПериодКомпенсации);
			Движение.ВидРасчета									= ВыборкаПоШапкеДокумента.ВидРасчетаОтпускИзФМПКомп;
		
			// Измерения
			Движение.Сотрудник									= ВыборкаПоШапкеДокумента.Сотрудник;
			Движение.ФизЛицо									= ВыборкаПоШапкеДокумента.ФизЛицо;
			Движение.Организация								= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				
			// Ресурсы
			Движение.ОплаченоДнейЧасов							= ВыборкаПоШапкеДокумента.ДнейЧасовКомпенсацииОтпуска;
			
			// Реквизиты
			Движение.Показатель1								= ВыборкаПоШапкеДокумента.ДнейЧасовКомпенсацииОтпуска;
			Движение.ГрафикРаботы								= ВыборкаПоШапкеДокумента.ГрафикРаботы;
			Движение.ВидУчетаВремени							= ВыборкаПоШапкеДокумента.ВидУчетаВремени;
			Движение.ДатаНачалаСобытия							= ПолучитьДатуНачалаСобытия();
			Движение.ПодразделениеОрганизации					= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			//vvv
			Движение.Должность									= ВыборкаПоШапкеДокумента.Должность;
			//
			Движение.ОбособленноеПодразделение					= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
			
			Движение.ПериодРасчетаСреднегоЗаработкаНачало		= ВыборкаПоШапкеДокумента.ПериодРасчетаКомпенсацииОтпускаНачало;
			Движение.ПериодРасчетаСреднегоЗаработкаОкончание	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
			Движение.РучнойРасчетСреднегоЗаработка = ВыборкаПоШапкеДокумента.РучнойРасчетСреднегоЗаработка;
			Если Движение.РучнойРасчетСреднегоЗаработка тогда
				Движение.РазмерСреднегоЗаработка = ВыборкаПоШапкеДокумента.РазмерСреднегоЗаработка;
			КонецЕсли;

			Движение.Авторасчет									= Истина;
			
		КонецЕсли;
        // 
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоНачислениям()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()
	
	ДатаНачалаСобытия = ПолучитьДатуНачалаСобытия();
	
	Запрос = Новый Запрос;
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",		ДатаНачалаСобытия);
	Запрос.УстановитьПараметр("Сотрудник",				Сотрудник);
	Запрос.УстановитьПараметр("МесяцевРасчетаПоЗакону",	?(ДатаНачалаСобытия < ПроведениеРасчетов.ПолучитьДатуВступленияВСилуИзмененийТрудовогоКодекса2006(),3,12));

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Отпуск.Дата,
	|	Отпуск.ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА Отпуск.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Отпуск.Организация
	|		ИНАЧЕ Отпуск.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА Отпуск.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Отпуск.Организация
	|		ИНАЧЕ Отпуск.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	Отпуск.Организация КАК ОбособленноеПодразделение,
	|	Отпуск.Ссылка,
	|	Отпуск.Сотрудник,
	//vvv
	|	Отпуск.ППС,
	|	ВЫБОР
	|		КОГДА  РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|		ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность
	|	КОНЕЦ КАК Должность,
	//
	|	Отпуск.Сотрудник.Физлицо КАК Физлицо,
	|	Отпуск.ДатаНачалаОсновногоОтпуска,
	|	Отпуск.ДатаОкончанияОсновногоОтпуска,
	|	Отпуск.ПорядокРасчетаОсновногоОтпуска,
	|	Отпуск.ДнейЧасовКомпенсацииОтпуска,
	|	Отпуск.ПорядокРасчетаКомпенсацииОтпуска,
	|	Отпуск.ДатаНачалаДополнительногоОтпуска,
	|	Отпуск.ДатаОкончанияДополнительногоОтпуска,
	|	Отпуск.ВидРасчетаДополнительногоОтпуска,
	|	Отпуск.РучнойРасчетСреднегоЗаработка,
	|	Отпуск.РазмерСреднегоЗаработка,
	|	ВЫБОР
	|		КОГДА Отпуск.ИспользоватьСреднеЧасовойЗаработок
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	КОНЕЦ КАК ВидУчетаВремени,
	|	Отпуск.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	Отпуск.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	Отпуск.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	Отпуск.ПерерассчитываемыйДокумент.Сотрудник КАК СотрудникПерерасчета,
	|	ВЫБОР
	|		КОГДА  РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|		ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА  РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|		ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	100 КАК ПроцентОплатыОсновногоОтпуска,
	|	Отпуск.ПроцентОплатыДополнительногоОтпуска,
	|	&ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	Отпуск.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ВЫБОР
	|		КОГДА Отпуск.Сотрудник.Организация = ВЫБОР
	|				КОГДА Отпуск.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА Отпуск.Организация
	|				ИНАЧЕ Отпуск.Организация.ГоловнаяОрганизация
	|			КОНЕЦ
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА Отпуск.Дата < Отпуск.ПериодРегистрации
	|			ТОГДА Отпуск.ПериодРегистрации
	|		КОГДА Отпуск.Дата > КОНЕЦПЕРИОДА(Отпуск.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА КОНЕЦПЕРИОДА(Отпуск.ПериодРегистрации, МЕСЯЦ)
	|		ИНАЧЕ Отпуск.Дата
	|	КОНЕЦ КАК ПериодРегистрацииДополнительныхНачислений";
	
	Если ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	|	Отпуск.ВидРасчетаОсновногоОтпуска КАК ВидРасчетаОсновногоОтпуска,
	|	Отпуск.ВидРасчетаОсновногоОтпуска.СпособРасчета КАК СпособРасчетаОсновногоОтпуска,
	//vvv
	|	Отпуск.ВидРасчетаОсновногоОтпуска.ОтпускИзФМП КАК ВидРасчетаОтпускИзФМП,
	//
	|	Отпуск.ВидРасчетаОсновногоОтпуска.ПериодРасчетаСреднегоЗаработка КАК ПериодРасчетаОсновногоОтпуска,
	|	Отпуск.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаОсновногоОтпускаНачало";

	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ДатаНачалаДополнительногоОтпуска) Тогда
	//	ТекстЗапроса = ТекстЗапроса + ",
	//|	Отпуск.ВидРасчетаДополнительногоОтпуска.СпособРасчета КАК СпособРасчетаДополнительногоОтпуска,
	//|	ВЫБОР
	//|		КОГДА Отпуск.ВидРасчетаДополнительногоОтпуска.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням)
	//|				И Отпуск.ВидРасчетаДополнительногоОтпуска.ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыАлгоритмовРасчета.ОтпускСОплатойПраздничныхДней)
	//|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыАлгоритмовРасчета.ПустаяСсылка)
	//|	КОНЕЦ КАК ВариантАлгоритмаРасчета,
	//|	12 КАК ПериодРасчетаДополнительногоОтпуска,
	//|	Отпуск.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаДополнительногоОтпускаНачало";
	//КонецЕсли;
	
	Если ДнейЧасовКомпенсацииОтпуска > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	|	Отпуск.ВидРасчетаКомпенсацииОтпуска КАК ВидРасчетаКомпенсацииОтпуска,
	|	Отпуск.ВидРасчетаКомпенсацииОтпуска.СпособРасчета КАК СпособРасчетаКомпенсацииОтпуска,
	//vvv
	|	Отпуск.ВидРасчетаКомпенсацииОтпуска.ОтпускИзФМП КАК ВидРасчетаОтпускИзФМПКомп,
	|	Отпуск.БазовыйПериодКомпенсации КАК БазовыйПериодКомпенсации,
	//
	|	Отпуск.ВидРасчетаКомпенсацииОтпуска.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	12 КАК ПериодРасчетаКомпенсацииОтпуска,
	|	Отпуск.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаКомпенсацииОтпускаНачало";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК Отпуск
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|		ПО (РаботникиОрганизацииСрезПоследних.Организация = ВЫБОР
	|				КОГДА Отпуск.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА Отпуск.Организация
	|				ИНАЧЕ Отпуск.Организация.ГоловнаяОрганизация
	|			КОНЕЦ)";
		
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ГДЕ
	|	Отпуск.Ссылка = &ДокументСсылка";
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоДопОтпускам()
	
	ДатаНачалаСобытия = ПолучитьДатуНачалаСобытия();
	
	Запрос = Новый Запрос;
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",		ДатаНачалаСобытия);
	Запрос.УстановитьПараметр("Сотрудник",				Сотрудник);
	Запрос.УстановитьПараметр("МесяцевРасчетаПоЗакону",	?(ДатаНачалаСобытия < ПроведениеРасчетов.ПолучитьДатуВступленияВСилуИзмененийТрудовогоКодекса2006(),3,12));

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Отпуск.Дата,
	|	Отпуск.ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА Отпуск.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Отпуск.Организация
	|		ИНАЧЕ Отпуск.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА Отпуск.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Отпуск.Организация
	|		ИНАЧЕ Отпуск.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	Отпуск.Организация КАК ОбособленноеПодразделение,
	|	Отпуск.Ссылка,
	|	Отпуск.Сотрудник,
	|	Отпуск.Сотрудник.Физлицо КАК Физлицо,
	|	Отпуск.РучнойРасчетСреднегоЗаработка,
	|	Отпуск.РазмерСреднегоЗаработка,
	|	ВЫБОР
	|		КОГДА Отпуск.ИспользоватьСреднеЧасовойЗаработок
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	КОНЕЦ КАК ВидУчетаВремени,
	|	Отпуск.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	Отпуск.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	Отпуск.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	Отпуск.ПерерассчитываемыйДокумент.Сотрудник КАК СотрудникПерерасчета,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	&ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	Отпуск.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ВЫБОР
	|		КОГДА Отпуск.Сотрудник.Организация = ВЫБОР
	|				КОГДА Отпуск.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА Отпуск.Организация
	|				ИНАЧЕ Отпуск.Организация.ГоловнаяОрганизация
	|			КОНЕЦ
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ТЧДополнительныеОтпуска.НомерСтроки,
	|	ТЧДополнительныеОтпуска.ВидРасчетаДополнительногоОтпуска,
	//vvv
	|	ТЧДополнительныеОтпуска.ВидРасчетаДополнительногоОтпуска.ОтпускИзФМП КАК ВидРасчетаОтпускИзФМП,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность
	|	КОНЕЦ КАК Должность,
	//
	|	ТЧДополнительныеОтпуска.ДатаНачалаДополнительногоОтпуска,
	|	ТЧДополнительныеОтпуска.ДатаОкончанияДополнительногоОтпуска,
	|	ТЧДополнительныеОтпуска.ПроцентОплатыДополнительногоОтпуска,
	|	ТЧДополнительныеОтпуска.ВидРасчетаДополнительногоОтпуска.СпособРасчета,
	|	12 КАК ПериодРасчетаДополнительногоОтпуска,
	|	ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаДополнительногоОтпускаНачало,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыАлгоритмовРасчета.ПустаяСсылка) КАК ВариантАлгоритмаРасчета,
	|	ВЫБОР
	|		КОГДА Отпуск.Дата < Отпуск.ПериодРегистрации
	|			ТОГДА Отпуск.ПериодРегистрации
	|		КОГДА Отпуск.Дата > КОНЕЦПЕРИОДА(Отпуск.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА КОНЕЦПЕРИОДА(Отпуск.ПериодРегистрации, МЕСЯЦ)
	|		ИНАЧЕ Отпуск.Дата
	|	КОНЕЦ КАК ПериодРегистрацииДополнительныхНачисленийБ
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций.ДополнительныеОтпуска КАК ТЧДополнительныеОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеОтпускаРаботникамОрганизаций КАК Отпуск
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|			ПО (РаботникиОрганизацииСрезПоследних.Организация = ВЫБОР
	|					КОГДА Отпуск.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|						ТОГДА Отпуск.Организация
	|					ИНАЧЕ Отпуск.Организация.ГоловнаяОрганизация
	|				КОНЕЦ)
	|		ПО ТЧДополнительныеОтпуска.Ссылка = Отпуск.Ссылка
	|ГДЕ
	|	Отпуск.Ссылка = &ДокументСсылка";
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();
КонецФункции // СформироватьЗапросПоШапке()


// Формирует запрос по табличной части Начисления
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	СписокСтруктурныхПодразделений = ПроцедурыУправленияПерсоналом.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",	СписокСтруктурныхПодразделений);
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",			ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ДокументСсылка",					Ссылка);
	Запрос.УстановитьПараметр("Сотрудник",						Сотрудник);
	КодОплатыТрудаПоНДФЛ = Новый Массив;
	КодОплатыТрудаПоНДФЛ.Добавить(Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию);
	//РФ Отпускные
	//КодОплатыТрудаПоНДФЛ.Добавить(Справочники.ДоходыНДФЛ.Код2012);
	Запрос.УстановитьПараметр("КодОплатыТрудаПоНДФЛ", КодОплатыТрудаПоНДФЛ);
	ДатаНачалаСобытия = ПолучитьДатуНачалаСобытия();
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",				ДатаНачалаСобытия);
	Запрос.УстановитьПараметр("МесяцевРасчетаПоЗакону",			?(ДатаНачалаСобытия < ПроведениеРасчетов.ПолучитьДатуВступленияВСилуИзмененийТрудовогоКодекса2006(),3,12));

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.Ссылка.Сотрудник,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	СтрокиНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	СтрокиНачисления.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций
	|			ТОГДА ВЫБОР
	|					КОГДА СтрокиНачисления.ВидРасчета.КодДоходаНДФЛ В (&КодОплатыТрудаПоНДФЛ)
	|						ТОГДА СтрокиНачисления.ДатаНачала
	|					ИНАЧЕ СтрокиНачисления.Ссылка.ПериодРегистрации
	|				КОНЕЦ
	//vvv комментируем
	//|		ИНАЧЕ СтрокиНачисления.Ссылка.ПериодРегистрации
	|		ИНАЧЕ 
	|			ВЫБОР КОГДА СтрокиНачисления.Ссылка.БазовыйПериодКомпенсации<>ДАТАВРЕМЯ(1,1,1)  ТОГДА 
	|				НАЧАЛОПЕРИОДА(СтрокиНачисления.Ссылка.БазовыйПериодКомпенсации,МЕСЯЦ)
	|			ИНАЧЕ СтрокиНачисления.Ссылка.ПериодРегистрации
	|			КОНЕЦ
	//
	|	КОНЕЦ КАК МесяцНалоговогоПериода,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ПустаяСсылка) КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете,
	|	СтрокиНачисления.ДатаНачала,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаОкончания,
	|	СтрокиНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	СтрокиНачисления.ДатаНачала КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Ссылка.ИспользоватьСреднеЧасовойЗаработок
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	КОНЕЦ КАК ВидУчетаВремени,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ДополнительныеДанные,
	//vvv
	|	СтрокиНачисления.ЗаработокЗаЕдиницуВремениФМП,
	|	СтрокиНачисления.Должность,
	//
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.ОтработаноДнейПоПятидневке,
	|	СтрокиНачисления.ОтработаноЧасовПоПятидневке,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.НормаДнейПоПятидневке,
	|	СтрокиНачисления.НормаЧасовПоПятидневке,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ВЫБОР
	|		КОГДА ГрафикРаботыПоСотруднику.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизации.ПериодЗавершения <= СтрокиНачисления.ДатаНачалаСобытия
	|							И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|					ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|				КОНЕЦ
	|		ИНАЧЕ СтрокиНачисления.Ссылка.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка) КАК ГрафикРаботыНорма,
	|	СтрокиНачисления.ДатаНачалаСобытия,
	|	СтрокиНачисления.Сторно,
	|	СтрокиНачисления.Авторасчет,
	|	ВЫБОР
	|		КОГДА НЕ СтрокиНачисления.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент,
	|	СтрокиНачисления.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления,
	|	СтрокиНачисления.ЧислоМесяцев,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка)
	|		ИНАЧЕ СтрокиНачисления.ВидРасчета.ВидЕжегодногоОтпуска
	|	КОНЕЦ КАК ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Компенсация,
	|	ЕСТЬNULL(ДанныеРегламентированногоКалендаря.ДнейОтпуска, СтрокиНачисления.ОплаченоДнейЧасов * ВЫБОР
	|			КОГДА СтрокиНачисления.Сторно
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДнейОтпуска,
	|	СтрокиНачисления.РучнойРасчетСреднегоЗаработка,
	|	СтрокиНачисления.РазмерСреднегоЗаработка,
	|	СтрокиНачисления.КоэффициентИндексации
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций.Начисления КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			Документ.НачислениеОтпускаРаботникамОрганизаций.Начисления КАК СтрокиНачисления
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО (РаботникиОрганизации.Период <= СтрокиНачисления.ДатаНачалаСобытия)
	|					И СтрокиНачисления.Ссылка.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ГДЕ
	|			СтрокиНачисления.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтрокиНачисления.НомерСтроки) КАК ПоследниеДаты
	|		ПО СтрокиНачисления.НомерСтроки = ПоследниеДаты.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО (РаботникиОрганизации.Период = ПоследниеДаты.МаксПериод)
	|			И СтрокиНачисления.Ссылка.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			Документ.НачислениеОтпускаРаботникамОрганизаций.Начисления КАК СтрокиНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|				ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = СтрокиНачисления.Ссылка.Сотрудник)
	|					И (ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаНачала, МЕСЯЦ))
	|		ГДЕ
	|			СтрокиНачисления.Ссылка = &ДокументСсылка) КАК ГрафикРаботыПоСотруднику
	|		ПО СтрокиНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|			СУММА(ВЫБОР
	|					КОГДА СтрокиНачисления.ВидРасчета.ВидЕжегодногоОтпуска.СпособРасчетаОстаткаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоРабочимДням)
	|						ТОГДА ЕСТЬNULL(РегламентированныйПроизводственныйКалендарь.Шестидневка, 0)
	|					ИНАЧЕ ЕСТЬNULL(РегламентированныйПроизводственныйКалендарь.КалендарныеДни, 0)
	|				КОНЕЦ) КАК ДнейОтпуска
	|		ИЗ
	|			Документ.НачислениеОтпускаРаботникамОрганизаций.Начисления КАК СтрокиНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|				ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ СтрокиНачисления.ДатаНачала И СтрокиНачисления.ДатаОкончания)
	|					И (СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1))
	|					И (СтрокиНачисления.Ссылка = &ДокументСсылка)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтрокиНачисления.НомерСтроки) КАК ДанныеРегламентированногоКалендаря
	|		ПО СтрокиНачисления.НомерСтроки = ДанныеРегламентированногоКалендаря.НомерСтроки
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоНачислениям()

// Формирует запрос по таблице "РасчетСреднего" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРасчетСреднего()
	
	Запрос = Новый Запрос;
	ДатаНачалаСобытия = ПолучитьДатуНачалаСобытия();
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ПериодРасчетаСреднегоЗаработкаОкончание", НачалоМесяца(ДатаНачалаСобытия)-1);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",		НачалоМесяца(ДатаНачалаСобытия));
	Запрос.УстановитьПараметр("МесяцевРасчетаПоЗакону",	?(ДатаНачалаСобытия < ПроведениеРасчетов.ПолучитьДатуВступленияВСилуИзмененийТрудовогоКодекса2006(),3,12));
	
	ГодовыеПремии = Новый Массив(4);
	//vvv
	//ГодовыеПремии[0] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
	ГодовыеПремии[0] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииОтпуск;
	//
	//ГодовыеПремии[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии;
	//ГодовыеПремии[2] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые;
	//ГодовыеПремии[3] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые;
	
	Запрос.УстановитьПараметр("ГодовыеПремии", ГодовыеПремии);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеОЗаработке.НомерСтроки,
	|	ДанныеОЗаработке.ВидРасчета,
	//vvv
	|	ДанныеОЗаработке.Сотрудник,
	//
	|	ДанныеОЗаработке.БазовыйПериодНачало,
	|	ДанныеОЗаработке.БазовыйПериодКонец,
	|	ДанныеОЗаработке.ОтработаноПоПятидневке,
	|	ДанныеОЗаработке.НормаПоПятидневке,
	|	ДанныеОЗаработке.ОтработаноДней,
	|	ДанныеОЗаработке.ОтработаноЧасов,
	|	ДанныеОЗаработке.ЧислоМесяцев,
	|	ДанныеОЗаработке.КоэффициентИндексации,
	|	ДанныеОЗаработке.Результат,
	|   ДанныеОЗаработке.МесяцВыборки,
	|	ДанныеОЗаработке.КалендарныеДни,
	|	Начисления.СпособРасчета,
	|	12 КАК ПериодРасчетаСреднегоЗаработка,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание
	|ИЗ
	|	(ВЫБРАТЬ
	|		Отпуск.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|		Отпуск.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|		ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням) КАК СпособРасчета
	|	ИЗ
	|		Документ.НачислениеОтпускаРаботникамОрганизаций КАК Отпуск
	|	ГДЕ
	|		Отпуск.Ссылка = &ДокументСсылка) КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СтрокаРасчетСреднего.НомерСтроки КАК НомерСтроки,
	//vvv
	|			СтрокаРасчетСреднего.Сотрудник КАК Сотрудник,
	//
	|			СтрокаРасчетСреднего.ВидРасчета КАК ВидРасчета,
	|			СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|			ВЫБОР
	|				КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ)
	|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|			КОНЕЦ КАК БазовыйПериодКонец,
	|			СтрокаРасчетСреднего.ОтработаноПоПятидневке КАК ОтработаноПоПятидневке,
	|			СтрокаРасчетСреднего.НормаПоПятидневке КАК НормаПоПятидневке,
	|			СтрокаРасчетСреднего.ОтработаноДней КАК ОтработаноДней,
	|			СтрокаРасчетСреднего.ОтработаноЧасов КАК ОтработаноЧасов,
	|			СтрокаРасчетСреднего.ЧислоМесяцев КАК ЧислоМесяцев,
	|			СтрокаРасчетСреднего.КоэффициентИндексации КАК КоэффициентИндексации,
	|			СтрокаРасчетСреднего.Результат КАК Результат,
	|			СтрокаРасчетСреднего.МесяцВыборки КАК МесяцВыборки,
	|			ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням) КАК СпособРасчета,
	|			СтрокаРасчетСреднего.КалендарныеДни КАК КалендарныеДни
	|		ИЗ
	|			Документ.НачислениеОтпускаРаботникамОрганизаций.РасчетСреднегоПоКалендарным КАК СтрокаРасчетСреднего
	|		ГДЕ
	|			СтрокаРасчетСреднего.Ссылка = &ДокументСсылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СтрокаРасчетСреднего.НомерСтроки,
	//vvv
	|			СтрокаРасчетСреднего.Сотрудник КАК Сотрудник,
	//
	|			СтрокаРасчетСреднего.ВидРасчета,
	|			СтрокаРасчетСреднего.БазовыйПериодНачало,
	|			ВЫБОР
	|				КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ)
	|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|			КОНЕЦ,
	|			СтрокаРасчетСреднего.ОтработаноПоПятидневке,
	|			СтрокаРасчетСреднего.НормаПоПятидневке,
	|			СтрокаРасчетСреднего.ОтработаноДней,
	|			СтрокаРасчетСреднего.ОтработаноЧасов,
	|			СтрокаРасчетСреднего.ЧислоМесяцев,
	|			СтрокаРасчетСреднего.КоэффициентИндексации,
	|			СтрокаРасчетСреднего.Результат,
	|			СтрокаРасчетСреднего.МесяцВыборки,
	|			ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке),
	|			СтрокаРасчетСреднего.КалендарныеДни
	|		ИЗ
	|			Документ.НачислениеОтпускаРаботникамОрганизаций.РасчетСреднегоПоШестидневке КАК СтрокаРасчетСреднего
	|		ГДЕ
	|			СтрокаРасчетСреднего.Ссылка = &ДокументСсылка) КАК ДанныеОЗаработке
	|		ПО Начисления.СпособРасчета = ДанныеОЗаработке.СпособРасчета";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРасчетСреднего()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "") 
	
	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОбособленноеПодразделение) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, по которой выполняется начисление!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник.Организация = Организация
	Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период регистрации!", Отказ, Заголовок);
	КонецЕсли;
	
	УказанаДатаНачалаОсновногоОтпуска = ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачалаОсновногоОтпуска);
	УказанаДатаНачалаДополнительногоОтпуска = ДополнительныеОтпуска.Количество() > 0 ;
	
	// ДатаНачалаОсновногоОтпуска
	Если НЕ УказанаДатаНачалаОсновногоОтпуска И НЕ УказанаДатаНачалаДополнительногоОтпуска и ВыборкаПоШапкеДокумента.ДнейЧасовКомпенсацииОтпуска = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Должна быть указана дата начала основного или дополнительного отпуска, или количество дней (часов) компенсации отпуска!", Отказ, Заголовок);
	Иначе
		
		Если УказанаДатаНачалаОсновногоОтпуска Тогда
			
			// проверка дат начала и окончания
			Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончанияОсновногоОтпуска) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не указана дата окончания основного отпуска!", Отказ, Заголовок);
			ИначеЕсли ВыборкаПоШапкеДокумента.ДатаОкончанияОсновногоОтпуска < ВыборкаПоШапкеДокумента.ДатаНачалаОсновногоОтпуска Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Дата окончания основного отпуска не должна быть меньше даты начала!", Отказ, Заголовок);
			Иначе
				//Если УказанаДатаНачалаДополнительногоОтпуска И ВыборкаПоШапкеДокумента.ДатаНачалаДополнительногоОтпуска <> КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончанияОсновногоОтпуска) + 1 Тогда
				//	ОбщегоНазначения.СообщитьОбОшибке("Дополнительный отпуск должен начинаться непосредственно после окончания основного!", Отказ, Заголовок);
				//КонецЕсли;
			КонецЕсли;
			
			// ПорядокРасчетаОсновногоОтпуска
			//Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПорядокРасчетаОсновногоОтпуска) Тогда
			//	ОбщегоНазначения.СообщитьОбОшибке("Не указан порядок расчета основного отпуска!", Отказ, Заголовок);
			//КонецЕсли;
			
		КонецЕсли;
		
		//Если УказанаДатаНачалаДополнительногоОтпуска Тогда
		//	
		//	// проверка дат начала и окончания
		//	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончанияДополнительногоОтпуска) Тогда
		//		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата окончания дополнительного отпуска!", Отказ, Заголовок);
		//	ИначеЕсли ВыборкаПоШапкеДокумента.ДатаОкончанияДополнительногоОтпуска < ВыборкаПоШапкеДокумента.ДатаНачалаДополнительногоОтпуска Тогда
		//		ОбщегоНазначения.СообщитьОбОшибке("Дата окончания дополнительного отпуска не должна быть меньше даты начала!", Отказ, Заголовок);
		//	КонецЕсли;	
		//	
		//	// ВидРасчетаДополнительногоОтпуска
		//	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидРасчетаДополнительногоОтпуска) Тогда
		//		ОбщегоНазначения.СообщитьОбОшибке("Не указан вид дополнительного отпуска!", Отказ, Заголовок);
		//	КонецЕсли;
		//КонецЕсли;
		
		Если ВыборкаПоШапкеДокумента.ДнейЧасовКомпенсацииОтпуска > 0 Тогда
			// ПорядокРасчетаКомпенсацииОтпуска
			Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидРасчетаКомпенсацииОтпуска) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не указан вид расчета компенсации отпуска!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода исправляемого документа!", Отказ, Заголовок);
	КонецЕсли;
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией исправляемого документа!", Отказ, Заголовок);
	КонецЕсли;
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.СотрудникПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.Сотрудник <> ВыборкаПоШапкеДокумента.СотрудникПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сотрудник документа должен совпадать с сотрудником исправляемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала и окончания
	Если ВыборкаПоСтрокамДокумента.ОсновныеНачисления 
		Или ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом
		Или ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка
		Или ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
	
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
		Иначе
			// Дата окончания 
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
			Иначе
				Если ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоСтрокамДокумента.ДатаНачала Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ, Заголовок);
				ИначеЕсли ВыборкаПоСтрокамДокумента.ОсновныеНачисления Тогда	
					Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаОкончания) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ, Заголовок);
					КонецЕсли;
				КонецЕсли;           
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Дата начала события
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия)  И (ВыборкаПоСтрокамДокумента.ОсновныеНачисления или ВыборкаПоСтрокамДокумента.Компенсация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала события!", Отказ, Заголовок);
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение организации!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата",	'00010101');
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска.ДатаНачалаДополнительногоОтпуска),&ПустаяДата) КАК ДатаНачалаДополнительногоОтпуска,
	|	ЕСТЬNULL(МАКСИМУМ(НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска.ДатаОкончанияДополнительногоОтпуска),&ПустаяДата) КАК ДатаОкончанияДополнительногоОтпуска
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций.ДополнительныеОтпуска КАК НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска
	|ГДЕ
	|	НачислениеОтпускаРаботникамОрганизацийДополнительныеОтпуска.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		ДатаНачалаСобытия = ?(ДатаНачалаОсновногоОтпуска = '00010101', Выборка.ДатаНачалаДополнительногоОтпуска, ДатаНачалаОсновногоОтпуска);
		ДатаОкончанияСобытия = КонецДня(?(Выборка.ДатаНачалаДополнительногоОтпуска = '00010101', ДатаОкончанияОсновногоОтпуска, Выборка.ДатаОкончанияДополнительногоОтпуска));
	Иначе
		ДатаНачалаСобытия = ДатаНачалаОсновногоОтпуска;
		ДатаОкончанияСобытия = КонецДня(ДатаОкончанияОсновногоОтпуска);
	КонецЕсли;
		
	Если НЕ ВыборкаПоСтрокамДокумента.Сторно И ВыборкаПоСтрокамДокумента.ОсновныеНачисления И (ВыборкаПоСтрокамДокумента.ДатаНачала < ДатаНачалаСобытия ИЛИ ВыборкаПоСтрокамДокумента.ДатаНачала > ДатаОкончанияСобытия
		ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания < ДатаНачалаСобытия ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания > ДатаОкончанияСобытия) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "период начисления выходит за временные границы оплачиваемого события!", Ложь, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Расчет среднего"": ";
	
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала базового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ, Заголовок);
		// Дата окончания базового периода
	ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборРасчетСреднего)
	
	СуммаРесурсов = ВыборкаПоСтрокамДокумента.Результат + ВыборкаПоСтрокамДокумента.ОтработаноПоПятидневке +
	ВыборкаПоСтрокамДокумента.НормаПоПятидневке + ВыборкаПоСтрокамДокумента.ОтработаноДней + ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
	
	Если СуммаРесурсов <> 0 Тогда
		
		Движение = НаборРасчетСреднего.Добавить();
		
		// Свойства
		Движение.ПериодРегистрации				= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.БазовыйПериодНачало			= ВыборкаПоСтрокамДокумента.БазовыйПериодНачало;
		Движение.БазовыйПериодКонец				= ВыборкаПоСтрокамДокумента.БазовыйПериодКонец;
		Движение.ВидРасчета						= ВыборкаПоСтрокамДокумента.ВидРасчета;
		
		// Измерения
		Движение.Сотрудник						= ВыборкаПоШапкеДокумента.Сотрудник;
		//vvv
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) ТОгда
			Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
		КонецЕсли;
		Движение.РасчетВнутреннегоСовместителя	= ВыборкаПоШапкеДокумента.Сотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;
		//
		Движение.Физлицо						= ВыборкаПоШапкеДокумента.Физлицо;
		Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// Ресурсы
		Движение.Результат						= ВыборкаПоСтрокамДокумента.Результат;
		Движение.ОтработаноПоПятидневке			= ВыборкаПоСтрокамДокумента.ОтработаноПоПятидневке;
		Движение.НормаПоПятидневке				= ВыборкаПоСтрокамДокумента.НормаПоПятидневке;
		Движение.ОтработаноДней					= ВыборкаПоСтрокамДокумента.ОтработаноДней;
		Движение.ОтработаноЧасов				= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
		Движение.КалендарныеДни					= ВыборкаПоСтрокамДокумента.КалендарныеДни;
		
		// Реквизиты
		Движение.КоэффициентИндексации			= ВыборкаПоСтрокамДокумента.КоэффициентИндексации;
		Движение.ЧислоМесяцев					= ВыборкаПоСтрокамДокумента.ЧислоМесяцев;
		Движение.ПериодРасчетаСреднегоЗаработка	= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработка;
		Движение.СпособРасчета					= ВыборкаПоСтрокамДокумента.СпособРасчета;
		Движение.ДатаНачалаСобытия				= ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
		Движение.ДатаНачалаРасчетногоПериода	= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
		Движение.ДатаОкончанияРасчетногоПериода	= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
		Движение.МесяцВыборки                   = ВыборкаПоСтрокамДокумента.МесяцВыборки
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРасчетаСреднего()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//	ВыборкаПоШапкеДокумента						- выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, УчетЗадолженностиПоМесяцам)
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.КодДоходаНДФЛ) Тогда
		
		Движение = Движения.НДФЛСведенияОДоходах.Добавить();
		
		// Свойства
		Движение.Период					= ВыборкаПоТЧ.МесяцНалоговогоПериода;
		
		// Измерения
		Движение.Организация			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ФизЛицо				= ВыборкаПоШапкеДокумента.ФизЛицо;
		Движение.КодДохода				= ВыборкаПоТЧ.КодДоходаНДФЛ;
		Движение.ПериодРегистрации		= ПериодРегистрации;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
		// Реквизиты
		Движение.ОбособленноеПодразделение = ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.ИсчисленоИзЗарплаты	= Истина;
		Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации; 
		Движение.ВидРасчета = ВыборкаПоТЧ.ВидРасчета;
	КонецЕсли;
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
	
	// Свойства
	Движение.Период					= КонецМесяца(ПериодРегистрации);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	
	// Измерения
	Движение.Организация			= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.ФизЛицо				= ВыборкаПоШапкеДокумента.ФизЛицо;
	//vvv комментируем
	//Если УчетЗадолженностиПоМесяцам Тогда
		Движение.ПериодВзаиморасчетов = ПериодРегистрации;
	//КонецЕсли;
	
	// Ресурсы
	Движение.СуммаВзаиморасчетов	= ВыборкаПоТЧ.Результат;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа
//	ВыборкаПоОстаткам
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоОстаткам(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям)

	Движение = Движения.ФактическиеОтпускаОрганизаций.Добавить();
	
	// Свойства
	Движение.Период					= ?(ВыборкаПоНачислениям.Компенсация, ВыборкаПоНачислениям.ДатаНачалаСобытия, ВыборкаПоНачислениям.ДатаНачала);

	// Измерения
	Движение.Сотрудник				= ВыборкаПоШапкеДокумента.Сотрудник;
	Движение.ВидЕжегодногоОтпуска	= ВыборкаПоНачислениям.ВидЕжегодногоОтпуска;

	// Ресурсы
	Движение.Количество				= ВыборкаПоНачислениям.ДнейОтпуска * ?(ВыборкаПоНачислениям.Сторно, -1, 1);

	// Реквизиты
	Движение.ДатаОкончания			= ?(ВыборкаПоНачислениям.Компенсация, Дата(1,1,1), ВыборкаПоНачислениям.ДатаОкончания);
	Движение.Компенсация			= ВыборкаПоНачислениям.Компенсация;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	ПерерассчитываемыйДокумент = Неопределено
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверим непрерывночть следования записей начислений
	ПроверитьНепрерывностьЗаписейНачислений(Отказ);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
			Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьСписаниеФактическогоОтпуска	= Истина;
           	Движения.ДополнительныеНачисленияРаботниковОрганизаций.мВыполнятьСписаниеФактическогоОтпуска	= Истина;
          
			
			// Получение учетной политики по персоналу организации
			УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");

			// получим реквизиты табличной части Начисления
			ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
			
			Пока ВыборкаПоНачислениям.Следующий() Цикл
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);
				
				Если НЕ Отказ Тогда
					
					// Заполним записи в наборах записей регистров
					Если ВыборкаПоНачислениям.ОсновныеНачисления Тогда
						Движение = ПроведениеРасчетов.ДобавитьСтрокуОсновныхНачислений(Движения.ОсновныеНачисленияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
					Иначе
						Движение = ПроведениеРасчетов.ДобавитьСтрокуДополнительныхНачислений(Движения.ДополнительныеНачисленияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
					КонецЕсли;
					//vvv
					Движение.ОтчисленияНаППС = ?(ВыборкаПоШапкеДокумента.ППС,Перечисления.ДоходыФСС_НС.Облагается,Перечисления.ДоходыФСС_НС.НеОблагается);
					//
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетЗадолженностиПоМесяцам);
					Движение.КоэффициентИндексации = ВыборкаПоНачислениям.КоэффициентИндексации;
					
					//Если Не ВыборкаПоНачислениям.ЕстьКадровыйОтпуск И Не ВыборкаПоНачислениям.ВидЕжегодногоОтпуска.Пустая() Тогда
					//	ДобавитьСтрокуВДвиженияПоОстаткам(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
					//КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// получим реквизиты табличной части РасчетСреднего 
			РезультатЗапросаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего();
			ВыборкаПоРасчетСреднего = РезультатЗапросаПоРасчетСреднего.Выбрать();
			
			Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ, Заголовок);
				
				Если НЕ Отказ Тогда
					
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Движения.РасчетСреднегоЗаработка);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ Отказ Тогда
				
				// выполним удаление перерасчетов исправленного документа
				Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
					ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка, Истина); // Только по исправленным документам
				КонецЕсли;
			
				Для Каждого Набор Из Движения Цикл
					ТипНабораЗаписей = ТипЗнч(Набор);
					Если ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") 
						Или ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда
						Набор.Записать();
					КонецЕсли;
				КонецЦикла;
				ПроведениеРасчетов.ОбработатьТаблицуПерерасчетов(Ссылка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.Физлицо,
		|	СотрудникиОрганизаций.Организация,
		|	СотрудникиОрганизаций.ОбособленноеПодразделение
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
		Запрос.УстановитьПараметр("Сотрудник",	Основание);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если Не Выборка.ОбособленноеПодразделение.Пустая() Тогда
				Организация = Выборка.ОбособленноеПодразделение;
			Иначе
				Организация = Выборка.Организация;
			КонецЕсли;
			Сотрудник = Выборка.Сотрудник;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400; // в секундах

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает список видов времени, которые нельзя вводить этим документом
//
// Параметры
//	Нет.
//
// Возвращаемое значение:
//	Список значений, содержащий подходящий перечень значений перечисления ВидыВремени
//
Функция ПолучитьСписокНедопустимыхВидовВремени() Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.ВидыВремени.ОтработанноеСверхНормы);
	Список.Добавить(Перечисления.ВидыВремени.ЧасовоеНеотработанное);
	
	Возврат Список;

КонецФункции // ПолучитьСписокНедопустимыхВидовВремени()

// Выполняет автоматическое заполнение документа по данным документа и переданным параметрам
// 
// Параметры:
//	Нет.
//
Процедура Автозаполнение(ПостроительЗапроса = Неопределено) Экспорт

	// АВТОЗАПОЛНЕНИЕ ТЧ "ОтработанноеВремя"

	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
	
	// Определим ссылку на элементы справочника КлассификаторИспользованияРабочегоВремени - ночное время,
	// который не является предопределенным
	УчетВремениНочноеВремя = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы.ОбозначениеВТабелеУчетаРабочегоВремени;
	Если УчетВремениНочноеВремя.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КлассификаторИспользованияРабочегоВремени.Ссылка КАК Ссылка,
		|	КлассификаторИспользованияРабочегоВремени.ЦифровойКод КАК ЦифровойКод
		|ИЗ
		|	Справочник.КлассификаторИспользованияРабочегоВремени КАК КлассификаторИспользованияРабочегоВремени
		|ГДЕ
		|	КлассификаторИспользованияРабочегоВремени.ЦифровойКод = ""02""";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			УчетВремениНочноеВремя = Выборка.Ссылка;
			
		Иначе
			УчетВремениНочноеВремя = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УчетВремениВечернееВремя = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы.ОбозначениеВТабелеУчетаРабочегоВремени;
	
	Если ПостроительЗапроса = Неопределено Тогда
		
		Запрос = Новый Запрос;
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("парамНачало",				ПериодРегистрации);
		Запрос.УстановитьПараметр("парамКонец",					КонецМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("парамОрганизация",			Организация);
		Запрос.УстановитьПараметр("парамГоловнаяОрганизация",	ГоловнаяОрганизация);
		Запрос.УстановитьПараметр("парамПользователь",			Ответственный);
		Запрос.УстановитьПараметр("парамПодразделение" ,		ПодразделениеОрганизации);
		Запрос.УстановитьПараметр("Уволен",						Перечисления.ПричиныИзмененияСостояния.Увольнение);
		Запрос.УстановитьПараметр("УчетВремениРабота",			Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
		Запрос.УстановитьПараметр("УчетВремениНочноеВремя",		УчетВремениНочноеВремя);
		Запрос.УстановитьПараметр("УчетВремениВечернееВремя",	УчетВремениВечернееВремя);
		Запрос.УстановитьПараметр("ЦелодневноеНеотработанное",	Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
		Запрос.УстановитьПараметр("парамСсылка",				Ссылка);
		Запрос.УстановитьПараметр("ЧасовоеНеотработанное",		Перечисления.ВидыВремени.ЧасовоеНеотработанное);
		Запрос.УстановитьПараметр("ПоЧасам",					Перечисления.ВидыУчетаВремени.ПоЧасам);
		Запрос.УстановитьПараметр("ПоНочнымЧасам",				Перечисления.ВидыУчетаВремени.ПоНочнымЧасам);
		Запрос.УстановитьПараметр("ПоВечернимЧасам",			Перечисления.ВидыУчетаВремени.ПоВечернимЧасам);
		Запрос.УстановитьПараметр("ПустаяДата",					'00010101');

		// Проверим ответсвенного - является ли он расчетчиком вообще и для заданного 
		// подразделения (если оно задано)
		Если Не Ответственный.Пустая() Тогда
			Если УчетнаяПолитикаПоПерсоналуОрганизации[Организация].РасчетЗарплатыОрганизацииПоОтветственным Тогда
				Если ПодразделениеОрганизации.Пустая() Тогда
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	Расчетчики.ПодразделениеОрганизации
					|ИЗ
					|	РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало, ) КАК Расчетчики
					|ГДЕ
					|	Расчетчики.Пользователь = &парамПользователь";
					Если Запрос.Выполнить().Пустой() Тогда
						Сообщить("Ответственный за этот документ не является расчетчиком ни одного из подразделений организации");
						Возврат;
					КонецЕсли;
				Иначе
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	Подразделения.Ссылка
					|ИЗ
					|	Справочник.ПодразделенияОрганизаций КАК Подразделения
					|ГДЕ
					|	Подразделения.Ссылка В ИЕРАРХИИ(&парамПодразделение)
					|	И Подразделения.Ссылка В ИЕРАРХИИ
					|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
					|				Расчетчики.ПодразделениеОрганизации
					|			ИЗ
					|				РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало) КАК Расчетчики
					|			ГДЕ
					|				Расчетчики.Пользователь = &парамПользователь)";
					Если Запрос.Выполнить().Пустой() Тогда
						Сообщить("Ответственный за этот документ не является расчетчиком для выбранного подразделения");
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПодразделениеОрганизации.Пустая() И Ответственный.Пустая() Тогда
			ПоВсемПодразделениямОрганизации = Истина;
			УсловиеНаПодразделение = " И ОбособленноеПодразделение = &парамОрганизация";
			УсловиеНаПодразделениеЗавершения = " И ОбособленноеПодразделениеЗавершения = &парамОрганизация";
			
		ИначеЕсли ПодразделениеОрганизации.Пустая() Тогда
			Если УчетнаяПолитикаПоПерсоналуОрганизации[Организация].РасчетЗарплатыОрганизацииПоОтветственным Тогда
				ПоВсемПодразделениямОрганизации = Ложь;
				УсловиеНаПодразделение = " И ПодразделениеОрганизации В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.ПодразделениеОрганизации ИЗ РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало) Расчетчики ГДЕ Расчетчики.Пользователь = &парамПользователь)";
				УсловиеНаПодразделениеЗавершения = " И ПодразделениеОрганизацииЗавершения В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.ПодразделениеОрганизации ИЗ РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало) Расчетчики ГДЕ Расчетчики.Пользователь = &парамПользователь)";
			Иначе
				ПоВсемПодразделениямОрганизации = Истина;
				УсловиеНаПодразделение = " И ОбособленноеПодразделение = &парамОрганизация";
				УсловиеНаПодразделениеЗавершения = " И ОбособленноеПодразделениеЗавершения = &парамОрганизация";
			КонецЕсли;
		Иначе
			ПоВсемПодразделениямОрганизации = Ложь;
			УсловиеНаПодразделение = " И ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделение)";
			УсловиеНаПодразделениеЗавершения = " И ПодразделениеОрганизацииЗавершения В ИЕРАРХИИ (&парамПодразделение)";
		КонецЕсли;
		
		//ТаблицаДвиженийРаботниковТекст
		//Описание:
		//	Выбирает список работников, отвечающих условиям отбора, числящихся на начало месяца и их движения за месяц.
		
		ТаблицаДвиженийРаботниковТекст = "
		|		// срез работников на начало месяца
		|		ВЫБРАТЬ
		|			&парамНачало КАК Период,
		|			РаботникиОрганизации.Сотрудник КАК Сотрудник,
		|			ИСТИНА КАК Подходит,
		|			ВЫБОР
		|				КОГДА РаботникиОрганизации.ПериодЗавершения < &парамНачало 
		|					И РаботникиОрганизации.ПериодЗавершения <> &ПустаяДата
		|				ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
		|				ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
		|			КОНЕЦ КАК ГрафикРаботы,
		|			ВЫБОР
		|				КОГДА РаботникиОрганизации.ПериодЗавершения < &парамНачало
		|					И РаботникиОрганизации.ПериодЗавершения <> &ПустаяДата
		|				ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
		|				ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
		|			КОНЕЦ КАК ПодразделениеОрганизации,
		|			NULL КАК ПериодЗавершения
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамНачало, Организация = &парамГоловнаяОрганизация) КАК РаботникиОрганизации
		|		
		|		ГДЕ 
		|			ВЫБОР
		|				КОГДА РаботникиОрганизации.ПериодЗавершения < &парамНачало
		|					И РаботникиОрганизации.ПериодЗавершения <> &ПустаяДата
		|					ТОГДА РаботникиОрганизации.ПричинаИзмененияСостоянияЗавершения
		|					ИНАЧЕ РаботникиОрганизации.ПричинаИзмененияСостояния 
		|			КОНЕЦ <> &Уволен И
		|			ВЫБОР
		|				КОГДА РаботникиОрганизации.ПериодЗавершения < &парамНачало
		|					И РаботникиОрганизации.ПериодЗавершения <> &ПустаяДата
		|					ТОГДА  "+ ИСТИНА + УсловиеНаПодразделениеЗавершения + "
		|					ИНАЧЕ  "+ ИСТИНА + УсловиеНаПодразделение + " 
		|			КОНЕЦ		
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|
		|		// движения работников за месяц
		|		ВЫБРАТЬ
		|			РаботникиОрганизации.Период,
		|			РаботникиОрганизации.Сотрудник,
		|			ВЫБОР КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния <> &Уволен" + УсловиеНаПодразделение +" ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ,
		|			РаботникиОрганизации.ГрафикРаботы,
		|			РаботникиОрганизации.ПодразделениеОрганизации,
		|			РаботникиОрганизации.ПериодЗавершения КАК ПериодЗавершения
 		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|		
		|		ГДЕ
		|			РаботникиОрганизации.Период > &парамНачало И
		|			РаботникиОрганизации.Период <= &парамКонец И
		|			РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ 
		|			Работники.ПериодЗавершения,
		|			Работники.Сотрудник,
		|			ВЫБОР КОГДА Работники.ПричинаИзмененияСостоянияЗавершения <> &Уволен" + УсловиеНаПодразделениеЗавершения +" ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ,
		|			Работники.ГрафикРаботыЗавершения,
		|			Работники.ПодразделениеОрганизацииЗавершения,
		|			NULL КАК ПериодЗавершения
		|		ИЗ РегистрСведений.РаботникиОрганизаций КАК Работники
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
		|				  			ПО ПериодыПерекрытия.Период <= Работники.ПериодЗавершения
		|				   			И ПериодыПерекрытия.Период > Работники.Период
		|							И ПериодыПерекрытия.Сотрудник = Работники.Сотрудник
		|							И ПериодыПерекрытия.Организация = &парамГоловнаяОрганизация
		|		ГДЕ  
		|			  Работники.ПериодЗавершения<>&ПустаяДата 
		|			И Работники.Организация = &парамГоловнаяОрганизация
		|			И Работники.ПериодЗавершения > &парамНачало
		|			И Работники.ПериодЗавершения <= &парамКонец
		|			И ПериодыПерекрытия.Период ЕСТЬ NULL) КАК РаботникиОрганизации
 		|";
		
	Иначе
		ПостроительЗапроса.Параметры.Вставить("парамГоловнаяОрганизация",	ГоловнаяОрганизация);
		ПостроительЗапроса.Параметры.Вставить("парамНачало",				ПериодРегистрации);
		ПостроительЗапроса.Параметры.Вставить("парамКонец",					КонецМесяца(ПериодРегистрации));
		ПостроительЗапроса.Параметры.Вставить("парамОрганизация",			Организация);
		ПостроительЗапроса.Параметры.Вставить("парамПользователь",			Ответственный);
		ПостроительЗапроса.Параметры.Вставить("парамПодразделение",			ПодразделениеОрганизации);
		ПостроительЗапроса.Параметры.Вставить("Уволен",						Перечисления.ПричиныИзмененияСостояния.Увольнение);
		ПостроительЗапроса.Параметры.Вставить("УчетВремениРабота",			Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
		ПостроительЗапроса.Параметры.Вставить("УчетВремениНочноеВремя",		УчетВремениНочноеВремя);
		ПостроительЗапроса.Параметры.Вставить("УчетВремениВечернееВремя",	УчетВремениВечернееВремя);
		ПостроительЗапроса.Параметры.Вставить("ЦелодневноеНеотработанное",	Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
		ПостроительЗапроса.Параметры.Вставить("парамСсылка",				Ссылка);
		ПостроительЗапроса.Параметры.Вставить("ЧасовоеНеотработанное",		Перечисления.ВидыВремени.ЧасовоеНеотработанное);
		ПостроительЗапроса.Параметры.Вставить("ПоЧасам",					Перечисления.ВидыУчетаВремени.ПоЧасам);
		ПостроительЗапроса.Параметры.Вставить("ПоНочнымЧасам",				Перечисления.ВидыУчетаВремени.ПоНочнымЧасам);
		ПостроительЗапроса.Параметры.Вставить("ПоВечернимЧасам",			Перечисления.ВидыУчетаВремени.ПоВечернимЧасам);
        ПостроительЗапроса.Параметры.Вставить("ПустаяДата",					'00010101');

		ИсходныйТекстПостроителя = ПостроительЗапроса.Текст;
		ТекстЗапросаПоСпискуРаботников = СтрЗаменить(ИсходныйТекстПостроителя,"РАЗРЕШЕННЫЕ","");
		ТекстЗапросаПоСпискуРаботников = Лев(ТекстЗапросаПоСпискуРаботников, Найти(ТекстЗапросаПоСпискуРаботников,"УПОРЯДОЧИТЬ") - 1);
		УсловиеНаПодразделение = "";
		ТаблицаДвиженийРаботниковТекст = 
		"ВЫБРАТЬ
		|	СписокРаботников.Сотрудник,
		|	ДвижениеРаботников.Период,
		|	ДвижениеРаботников.Подходит,
		|	ДвижениеРаботников.ПодразделениеОрганизации,
		|	ДвижениеРаботников.ГрафикРаботы,
		|	ДвижениеРаботников.ПериодЗавершения
		|ИЗ
		|	(" + ТекстЗапросаПоСпискуРаботников + ") КАК СписокРаботников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			&парамНачало КАК Период,
		|			РаботникиОрганизации.Сотрудник КАК Сотрудник,
		|			ИСТИНА КАК Подходит,
		|			ВЫБОР
		|				КОГДА РаботникиОрганизации.ПериодЗавершения < &парамНачало
		|					И РаботникиОрганизации.ПериодЗавершения <> &ПустаяДата
		|				ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
		|				ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
		|			КОНЕЦ КАК ПодразделениеОрганизации,
		|			ВЫБОР
		|				КОГДА РаботникиОрганизации.ПериодЗавершения < &парамНачало 
		|					И РаботникиОрганизации.ПериодЗавершения <> &ПустаяДата
		|				ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
		|				ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
		|			КОНЕЦ КАК ГрафикРаботы,
		|			NULL КАК ПериодЗавершения
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамНачало, Организация = &парамГоловнаяОрганизация) КАК РаботникиОрганизации
		|		ГДЕ
		|			ВЫБОР
		|				КОГДА РаботникиОрганизации.ПериодЗавершения < &парамНачало
		|					И РаботникиОрганизации.ПериодЗавершения <> &ПустаяДата
		|					ТОГДА РаботникиОрганизации.ПричинаИзмененияСостоянияЗавершения
		|					ИНАЧЕ РаботникиОрганизации.ПричинаИзмененияСостояния 
		|			КОНЕЦ <> &Уволен
		|			И 
		|			ВЫБОР
		|				КОГДА РаботникиОрганизации.ПериодЗавершения < &парамНачало
		|					И РаботникиОрганизации.ПериодЗавершения <> &ПустаяДата
		|					ТОГДА РаботникиОрганизации.ОбособленноеПодразделениеЗавершения
		|					ИНАЧЕ РаботникиОрганизации.ОбособленноеПодразделение 
		|			КОНЕЦ = &парамОрганизация
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			РаботникиОрганизации.Период,
		|			РаботникиОрганизации.Сотрудник,
		|			ВЫБОР
		|				КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния <> &Уволен И РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ,
		|			РаботникиОрганизации.ПодразделениеОрганизации,
		|			РаботникиОрганизации.ГрафикРаботы,
		|			РаботникиОрганизации.ПериодЗавершения КАК ПериодЗавершения
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|		ГДЕ
		|			РаботникиОрганизации.Период > &парамНачало
		|			И РаботникиОрганизации.Период <= &парамКонец
		|			И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ 
		|			Работники.ПериодЗавершения КАК Период,
		|			Работники.Сотрудник,
		|			ВЫБОР
		|				КОГДА Работники.ПричинаИзмененияСостоянияЗавершения <> &Уволен И Работники.ОбособленноеПодразделениеЗавершения = &парамОрганизация
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ,
		|			Работники.ПодразделениеОрганизацииЗавершения,
		|			Работники.ГрафикРаботыЗавершения,
		|			NULL КАК ПериодЗавершения
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций КАК Работники
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
		|				  			ПО ПериодыПерекрытия.Период <= Работники.ПериодЗавершения
		|				   			И ПериодыПерекрытия.Период > Работники.Период
		|							И ПериодыПерекрытия.Сотрудник = Работники.Сотрудник
		|							И ПериодыПерекрытия.Организация = &парамГоловнаяОрганизация
		|			ГДЕ  
		|		  		Работники.ПериодЗавершения<>&ПустаяДата 
		|				И Работники.Организация = &парамГоловнаяОрганизация
		|				И Работники.ПериодЗавершения > &парамНачало
		|				И Работники.ПериодЗавершения <= &парамКонец
		|				И ПериодыПерекрытия.Период ЕСТЬ NULL) КАК ДвижениеРаботников
		|		ПО СписокРаботников.Сотрудник = ДвижениеРаботников.Сотрудник		
		|";
	КонецЕсли;
	
	// Развернем назначение работников по периодам действия
	ПериодыДвиженийРаботниковТекст =
	"ВЫБРАТЬ
	|	РаботникиОрганизации1.Сотрудник,
	|	РаботникиОрганизации1.Период КАК ДатаНачала,
	|	ВЫБОР 
	|		КОГДА РаботникиОрганизации1.ПериодЗавершения<>&ПустаяДата 
	|		ТОГДА 
	|		ВЫБОР 
	|		  КОГДА МИНИМУМ(ЕСТЬNULL(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(РаботникиОрганизации2.Период, ДЕНЬ, -1), ДЕНЬ), &парамКонец)) > РаботникиОрганизации1.ПериодЗавершения
	|		  ТОГДА МИНИМУМ(ЕСТЬNULL(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(РаботникиОрганизации1.ПериодЗавершения, ДЕНЬ, -1), ДЕНЬ), &парамКонец))
	|		  ИНАЧЕ МИНИМУМ(ЕСТЬNULL(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(РаботникиОрганизации2.Период, ДЕНЬ, -1), ДЕНЬ), &парамКонец))
	|		 КОНЕЦ 
	|	    ИНАЧЕ  МИНИМУМ(ЕСТЬNULL(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(РаботникиОрганизации2.Период, ДЕНЬ, -1), ДЕНЬ), &парамКонец)) 
	|	КОНЕЦ КАК ДатаОкончания,
	|	РаботникиОрганизации1.ГрафикРаботы,
	|	РаботникиОрганизации1.ПодразделениеОрганизации
	|ИЗ
	|	(" + ТаблицаДвиженийРаботниковТекст + ") КАК РаботникиОрганизации1
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации2
	|		ПО РаботникиОрганизации1.Сотрудник = РаботникиОрганизации2.Сотрудник
	|			И РаботникиОрганизации1.Период < РаботникиОрганизации2.Период
	|ГДЕ
	|	РаботникиОрганизации1.Подходит
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизации1.Сотрудник,
	|	РаботникиОрганизации1.Период,
	|	РаботникиОрганизации1.ГрафикРаботы,
	|	РаботникиОрганизации1.ПодразделениеОрганизации,
	|   РаботникиОрганизации1.ПериодЗавершения
	|";
	
	// Выберем зарегистрированные отклонения за месяц
	// Развернем фактический период действия зарегистрированных отклонений на полный месяц
	// из-за того, что в регистре данные могут быть "кусками" по работнику 
	// (напр, 10.08.2005 - 20.08.2005 больничный лист, 25.08.2005 - 29.08.2005 отпуск), а
	// "целого" месяца нет, из-за чего потом при соединении будут неправильные данные
	НачалаФПДТекст = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник,
	|	NULL КАК ВидРасчета,
	|	&парамНачало КАК Период
	|ИЗ
	|	(" + ТаблицаДвиженийРаботниковТекст + ") КАК РаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|		Организация = &парамГоловнаяОрганизация
	|			И ПериодДействия = &парамНачало
	|			И ВидРасчета.ВидВремени = &ЦелодневноеНеотработанное) КАК ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия
	|		ПО РаботникиОрганизации.Сотрудник = ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Сотрудник
	|			И (&парамНачало = ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало)
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФПД.Сотрудник,
	|	ФПД.ВидРасчета,
	|	ФПД.ПериодДействияНачало
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|		Организация = &парамГоловнаяОрганизация
	|			И ПериодДействия = &парамНачало
	|			И ВидРасчета.ВидВремени = &ЦелодневноеНеотработанное) КАК ФПД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФПД.Сотрудник,
	|	NULL,
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ФПД.ПериодДействияКонец, ДЕНЬ), СЕКУНДА, 1) 
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|		Организация = &парамГоловнаяОрганизация
	|			И ПериодДействия = &парамНачало
	|			И ВидРасчета.ВидВремени = &ЦелодневноеНеотработанное) КАК ФПД
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|		Организация = &парамГоловнаяОрганизация
	|			И ПериодДействия = &парамНачало
	|			И ВидРасчета.ВидВремени = &ЦелодневноеНеотработанное) КАК ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия
	|		ПО ФПД.Сотрудник = ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Сотрудник
	|			И (ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ФПД.ПериодДействияКонец, ДЕНЬ), СЕКУНДА, 1) = ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало)
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Сотрудник ЕСТЬ NULL 
	|";
	
	ОкончанияФПДТекст = "
	|ВЫБРАТЬ
	|	ФПД.Сотрудник,
	|	ФПД.ВидРасчета,
	|	ФПД.ПериодДействияНачало КАК Период
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|		Организация = &парамГоловнаяОрганизация
	|			И ПериодДействия = &парамНачало
	|			И ВидРасчета.ВидВремени = &ЦелодневноеНеотработанное) КАК ФПД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФПД.Сотрудник,
	|	NULL,
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ФПД.ПериодДействияКонец, ДЕНЬ), СЕКУНДА, 1) 
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|		Организация = &парамГоловнаяОрганизация
	|			И ПериодДействия = &парамНачало
	|			И ВидРасчета.ВидВремени = &ЦелодневноеНеотработанное) КАК ФПД
	|";
	
	РазвернутыйФПДТекст = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации1.Сотрудник,
	|	МАКСИМУМ(РаботникиОрганизации1.ВидРасчета) КАК ВидРасчета,
	|	НАЧАЛОПЕРИОДА(РаботникиОрганизации1.Период, ДЕНЬ) КАК ПериодДействияНачало,
	|	МИНИМУМ(ЕСТЬNULL(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(РаботникиОрганизации2.Период, ДЕНЬ, -1), ДЕНЬ), &парамКонец)) КАК ПериодДействияКонец
	|ИЗ
	|	(" + НачалаФПДТекст + ") КАК РаботникиОрганизации1
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ТаблицаДвиженийРаботниковТекст + ") КАК ОграничениеРаботники
	|		ПО РаботникиОрганизации1.Сотрудник = ОграничениеРаботники.Сотрудник
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ОкончанияФПДТекст + ") КАК РаботникиОрганизации2
	|		ПО РаботникиОрганизации1.Сотрудник = РаботникиОрганизации2.Сотрудник
	|			И РаботникиОрганизации1.Период < РаботникиОрганизации2.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизации1.Сотрудник,
	|	РаботникиОрганизации1.Период
	|";
	
	// Соединим периоды движений с развернутым периодом действия зарегистрированных отклонений за месяц заполнения
	ДвиженияСОтклонениямиТекст = "
	|ВЫБРАТЬ
	|	ПериодыНазначения.Сотрудник,
	|	ПериодыНазначения.ГрафикРаботы,
	|	ПериодыНазначения.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ПериодыНазначения.ДатаНачала > ФПД.ПериодДействияНачало
	|			ТОГДА ПериодыНазначения.ДатаНачала
	|		ИНАЧЕ ФПД.ПериодДействияНачало
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ПериодыНазначения.ДатаОкончания < ФПД.ПериодДействияКонец
	|			ТОГДА ПериодыНазначения.ДатаОкончания
	|		ИНАЧЕ ФПД.ПериодДействияКонец
	|	КОНЕЦ КАК ДатаОкончания,
	|	ФПД.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени
	|ИЗ
	|	(" + ПериодыДвиженийРаботниковТекст + ") КАК ПериодыНазначения
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + РазвернутыйФПДТекст + ") КАК ФПД
	|		ПО ПериодыНазначения.Сотрудник = ФПД.Сотрудник
	|			И ПериодыНазначения.ДатаНачала <= ФПД.ПериодДействияКонец
	|			И ПериодыНазначения.ДатаОкончания >= ФПД.ПериодДействияНачало
	|";

	// Выберем ранее внесенные данные о времени из регистра РабочееВремяРаботниковОрганизаций
	// другим документом УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени, чтобы избежать дублирования при вводе
	РанееУчтенноеРабочееВремяТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РабочееВремя.Сотрудник,
	|	РабочееВремя.Период
	|ИЗ
	|	РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремя
	|ГДЕ
	|	РабочееВремя.Организация = &парамГоловнаяОрганизация
	|	И РабочееВремя.Период МЕЖДУ &парамНачало И &парамКонец
	|	И РабочееВремя.Регистратор <> &парамСсылка
	|	И РабочееВремя.ВидИспользованияРабочегоВремени <> &ЧасовоеНеотработанное";
	
	//Основной текст запроса за каждый день
	ОсновнойТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияСОтклонениями.Сотрудник,
	|	ДвиженияСОтклонениями.ДатаНачала,
	|	ДвиженияСОтклонениями.ДатаОкончания,
	|	ГрафикиПоВидамВремени.Дата,
	|	ГрафикиПоВидамВремени.ДополнительноеЗначение КАК ВсегоДней,
	|	ГрафикиПоВидамВремени.ОсновноеЗначение - ВЫБОР
	|		КОГДА ДвиженияСОтклонениями.ВидИспользованияРабочегоВремени ЕСТЬ NULL 
	|				И (НЕ ГрафикиПоВидамВремени.ВидУчетаВремени В (&ПоВечернимЧасам, &ПоНочнымЧасам))
	|			ТОГДА ЕСТЬNULL(ПочасовыеОтклонения.Часов, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоЧасов,
	|	ГрафикиПоВидамВремени.ДополнительноеЗначениеНорма КАК ВсегоДнейПоНорме,
	|	ГрафикиПоВидамВремени.ОсновноеЗначениеНорма КАК ВсегоЧасовПоНорме,
	|	ЕСТЬNULL(ДвиженияСОтклонениями.ВидИспользованияРабочегоВремени, ВЫБОР
	|			КОГДА ГрафикиПоВидамВремени.ВидУчетаВремени = &ПоЧасам
	|				ТОГДА &УчетВремениРабота
	|			КОГДА ГрафикиПоВидамВремени.ВидУчетаВремени = &ПоВечернимЧасам
	|				ТОГДА &УчетВремениВечернееВремя
	|			ИНАЧЕ &УчетВремениНочноеВремя
	|		КОНЕЦ) КАК ВидИспользованияРабочегоВремени
	|ИЗ
	|	(" + ДвиженияСОтклонениямиТекст + ") КАК ДвиженияСОтклонениями
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиПоВидамВремени
	|	ПО ДвиженияСОтклонениями.ГрафикРаботы = ГрафикиПоВидамВремени.ГрафикРаботы
	|		И (ГрафикиПоВидамВремени.Дата МЕЖДУ ДвиженияСОтклонениями.ДатаНачала И ДвиженияСОтклонениями.ДатаОкончания)
	|		И (ГрафикиПоВидамВремени.ВидУчетаВремени В (&ПоЧасам, &ПоВечернимЧасам, &ПоНочнымЧасам))
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|		ПочасовыеОтклонения.Сотрудник,
	|		ПочасовыеОтклонения.Период КАК Период,
	|		СУММА(ПочасовыеОтклонения.Часов) КАК Часов
	|	ИЗ
	|		РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ПочасовыеОтклонения
	|	ГДЕ
	|		ПочасовыеОтклонения.Период МЕЖДУ &парамНачало И &парамКонец
	|		И ПочасовыеОтклонения.Организация = &парамГоловнаяОрганизация
	|		И (НЕ ПочасовыеОтклонения.СводнаяЗапись)
	|		
	|	СГРУППИРОВАТЬ ПО
	|		ПочасовыеОтклонения.Сотрудник,
	|		ПочасовыеОтклонения.Период) КАК ПочасовыеОтклонения
	|	ПО ДвиженияСОтклонениями.Сотрудник = ПочасовыеОтклонения.Сотрудник
	|		И ПочасовыеОтклонения.Период = ГрафикиПоВидамВремени.Дата
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + РанееУчтенноеРабочееВремяТекст + ") КАК РанееУчтенноеВремя
	|	ПО ДвиженияСОтклонениями.Сотрудник = РанееУчтенноеВремя.Сотрудник
	|		И (РанееУчтенноеВремя.Период МЕЖДУ ДвиженияСОтклонениями.ДатаНачала И ДвиженияСОтклонениями.ДатаОкончания)
	|ГДЕ
	|	РанееУчтенноеВремя.Сотрудник ЕСТЬ NULL 
	|	И (ДвиженияСОтклонениями.ВидИспользованияРабочегоВремени ЕСТЬ NULL 
	|			ИЛИ ГрафикиПоВидамВремени.ВидУчетаВремени = &ПоЧасам)
	|";
	
	Если РазвернутыйПериод Тогда
		// Суммируем дни/часы за период действия
		ОсновнойТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Данные.Сотрудник,
		|	Данные.ДатаНачала,
		|	Данные.ДатаОкончания,
		|	Данные.ВидИспользованияРабочегоВремени,
		|	СУММА(Данные.ВсегоДней) КАК ВсегоДней,
		|	СУММА(Данные.ВсегоЧасов) КАК ВсегоЧасов,
		|	СУММА(Данные.ВсегоДнейПоНорме) КАК ВсегоДнейПоНорме,
		|	СУММА(Данные.ВсегоЧасовПоНорме) КАК ВсегоЧасовПоНорме
		|ИЗ
		|	(" + ОсновнойТекстЗапроса + ") КАК Данные
		|СГРУППИРОВАТЬ ПО
		|	Данные.Сотрудник,
		|	Данные.ДатаНачала,
		|	Данные.ДатаОкончания,
		|	Данные.ВидИспользованияРабочегоВремени
		|ИМЕЮЩИЕ 
		|	СУММА(Данные.ВсегоДней) <> 0 Или
		|	СУММА(Данные.ВсегоЧасов) <> 0 Или
		|	СУММА(Данные.ВсегоДнейПоНорме) <> 0 Или
		|	СУММА(Данные.ВсегоЧасовПоНорме) <> 0 
		|	
		|УПОРЯДОЧИТЬ ПО 
		|	Данные.Сотрудник.Наименование,
		|	Данные.ДатаНачала
		|";
	Иначе
		// Исправим даты периода
		ОсновнойТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Данные.Сотрудник,
		|	Данные.Дата КАК ДатаНачала,
		|	Данные.Дата КАК ДатаОкончания,
		|	Данные.ВидИспользованияРабочегоВремени,
		|	Данные.ВсегоДней,
		|	Данные.ВсегоЧасов,
		|	Данные.ВсегоДнейПоНорме,
		|	Данные.ВсегоЧасовПоНорме
		|ИЗ
		|	(" + ОсновнойТекстЗапроса + ") КАК Данные
		|ГДЕ
		|	Данные.ВсегоДней <> 0 Или
		|	Данные.ВсегоЧасов <> 0 Или
		|	Данные.ВсегоДнейПоНорме <> 0 Или
		|	Данные.ВсегоЧасовПоНорме <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Данные.Сотрудник.Наименование,
		|	Данные.Дата
		|";
	КонецЕсли;
	
	Если ПостроительЗапроса = Неопределено Тогда
		Запрос.Текст = ОсновнойТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();
	Иначе 
		//Основной текст запроса
		ПостроительЗапроса.Текст = ОсновнойТекстЗапроса;
		ПостроительЗапроса.Выполнить();
		РезультатЗапроса = ПостроительЗапроса.Результат;
	КонецЕсли;
	
	ОтработанноеВремя.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // Автозаполнение()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени.Дата,
	|	УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени.ПериодРегистрации,
	|	УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени.РазвернутыйПериод,
	|	ВЫБОР
	|		КОГДА УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени.Организация
	|		ИНАЧЕ УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени.Ссылка
	|ИЗ
	|	Документ.УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени КАК УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени
	|ГДЕ
	|	УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "ОтработанноеВремя" документа
//
// Параметры:
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоОтработанноеВремя(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",					Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",			ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПустаяДата",						Дата('00010101'));
	Запрос.УстановитьПараметр("СписокНедопустимыхВидовВремени",	ПолучитьСписокНедопустимыхВидовВремени());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиТЧ.Сотрудник,
	|	СтрокиТЧ.ВидИспользованияРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	//|	СтрокиТЧ.ВидИспользованияРабочегоВремени.ВидВремени КАК ВидВремени,
	|	ЛОЖЬ КАК НедопустимыйВидВремени,
	|	СтрокиТЧ.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА СтрокиТЧ.ДатаОкончания <> &ПустаяДата
	|			ТОГДА НАЧАЛОПЕРИОДА(СтрокиТЧ.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК ДатаОкончания,
	|	СтрокиТЧ.НомерСтроки КАК НомерСтроки,
	|	СтрокиТЧ.ВсегоДней КАК ВсегоДней,
	|	СтрокиТЧ.ВсегоДнейПоНорме КАК ВсегоДнейПоНорме,
	|	СтрокиТЧ.ВсегоЧасов КАК ВсегоЧасов,
	|	СтрокиТЧ.ВсегоЧасовПоНорме КАК ВсегоЧасовПоНорме,
	|	ВЫБОР
	|		КОГДА СтрокиТЧ.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ
	|	Документ.УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени.ОтработанноеВремя КАК СтрокиТЧ
	|ГДЕ
	|	СтрокиТЧ.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоОтработанноеВремя()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, по которой вводится рабочее время!", Отказ, Заголовок);
	КонецЕсли;
	
	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период регистрации!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОтработанноеВремя" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа,
//	Отказ						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиОтработанноеВремя(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "", УчетнаяПолитикаПоПерсоналуОрганизации)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Отработанное время"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// ВидИспользованияРабочегоВремени
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано использование рабочего времени!", Отказ, Заголовок);
	КонецЕсли;

	// Дата начала
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаНачала) <> ВыборкаПоШапкеДокумента.ПериодРегистрации Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала периода не совпадает с месяцем, за который составлен документ!", Отказ, Заголовок);
		КонецЕсли;
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала периода!", Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
		Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаОкончания) <> ВыборкаПоШапкеДокумента.ПериодРегистрации Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания периода не совпадает с месяцем, за который составлен документ!", Отказ, Заголовок);
		КонецЕсли;
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания периода!", Отказ, Заголовок);
	КонецЕсли;

	// Режим однодатного ввода
	Если НЕ ВыборкаПоШапкеДокумента.РазвернутыйПериод Тогда
		Если ВыборкаПоСтрокамДокумента.ДатаНачала <> ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "в режиме ввода данных за каждую дату начало и конец периода должны совпадать!", Отказ, Заголовок);
		КонецЕсли;
		
		Если ВыборкаПоСтрокамДокумента.ВсегоЧасов > 24 Или ВыборкаПоСтрокамДокумента.ВсегоЧасовПоНорме > 24 Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "в режиме ввода данных за каждую дату число часов не должно превышать 24!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	// Вид времени
	Если ВыборкаПоСтрокамДокумента.НедопустимыйВидВремени Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "нельзя в документе указывать " + ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуОтработанноеВремя(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)

	Движение = НаборЗаписей.Добавить();

	// Свойства
	Движение.Период								= НачалоДня(ВыборкаПоСтрокамДокумента.ДатаОкончания);

	// Измерения
	Движение.Сотрудник							= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.Организация						= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ВидИспользованияРабочегоВремени	= ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени;

	// Ресурсы
	Движение.Дней								= ВыборкаПоСтрокамДокумента.ВсегоДней;
	Движение.Часов								= ВыборкаПоСтрокамДокумента.ВсегоЧасов;
	Движение.ДнейПоНорме						= ВыборкаПоСтрокамДокумента.ВсегоДнейПоНорме;
	Движение.ЧасовПоНорме						= ВыборкаПоСтрокамДокумента.ВсегоЧасовПоНорме;

	// Реквизиты
	Движение.СводнаяЗапись						= (ВыборкаПоСтрокамДокумента.ВсегоДней > 1) 
												  Или (ВыборкаПоСтрокамДокумента.ДатаНачала <> ВыборкаПоСтрокамДокумента.ДатаОкончания);
КонецПроцедуры // ДобавитьСтрокуОтработанноеВремя()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			////////////////////////////////////////////////////////////////////////
			// Отработанное время

			// получим реквизиты табличной части
			ВыборкаПоОтработанноеВремя = СформироватьЗапросПоОтработанноеВремя(ВыборкаПоШапкеДокумента).Выбрать();
			УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");

			Пока ВыборкаПоОтработанноеВремя.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиОтработанноеВремя(ВыборкаПоШапкеДокумента, ВыборкаПоОтработанноеВремя, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуОтработанноеВремя(ВыборкаПоОтработанноеВремя, ВыборкаПоШапкеДокумента, Движения.РабочееВремяРаботниковОрганизаций);
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ОтработанноеВремя);
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;
Перем СоответствиеВалютныеСпособыРасчета;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если Лев(ИмяМакета,3) = "Т5_" Тогда
		ТабДокумент = ПечатьТ5(ИмяМакета);
		
	ИначеЕсли Лев(ИмяМакета,3) = "Т5а" тогда
		ТабДокумент = ПечатьТ5а(ИмяМакета);
		
	КонецЕсли;
	
	Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,"Кадровое перемещение "));
	
КонецФункции // Печать()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("Т5а_от_5_1_2004",	"Форма Т-5а");
	СтруктураМакетов.Вставить("Т5_от_5_1_2004",		"Форма Т-5");
	СтруктураМакетов.Вставить("Т5а_от_6_4_2001",	"Форма Т-5а (от 06.04.2001)");
	СтруктураМакетов.Вставить("Т5_от_6_4_2001",		"Форма Т-5 (от 06.04.2001)");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

Процедура ДобавитьСтрокиНачисленийПоРаботнику(Сотрудник, ДатаАктуальности = Неопределено) Экспорт
	
	Если ДатаАктуальности = Неопределено Тогда
		ДатаАктуальности = Дата
	КонецЕсли;
	
	ЗапросНачисления = Новый Запрос;
	ЗапросНачисления.УстановитьПараметр("Сотрудник", Сотрудник);
	ЗапросНачисления.УстановитьПараметр("Период",  ДатаАктуальности);
	ЗапросНачисления.УстановитьПараметр("Регистратор", Ссылка);


	
	ЗапросНачисления.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять) КАК Действие,
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.Физлицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодЗавершения <= &Период
	|				И Начисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Начисления.ВидРасчетаЗавершения
	|		ИНАЧЕ Начисления.ВидРасчета
	|	КОНЕЦ КАК ВидРасчета,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодЗавершения <= &Период
	|				И Начисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА Начисления.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|						ТОГДА НЕОПРЕДЕЛЕНО
	|					ИНАЧЕ Начисления.Показатель1Завершения
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ Начисления.Показатель1
	|			КОНЕЦ
	|	КОНЕЦ КАК Показатель1,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодЗавершения <= &Период
	|				И Начисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА Начисления.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|						ТОГДА НЕОПРЕДЕЛЕНО
	|					ИНАЧЕ Начисления.Показатель2Завершения
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ Начисления.Показатель2
	|			КОНЕЦ
	|	КОНЕЦ КАК Показатель2,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодЗавершения <= &Период
	|				И Начисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА Начисления.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|						ТОГДА НЕОПРЕДЕЛЕНО
	|					ИНАЧЕ Начисления.Показатель3Завершения
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ Начисления.Показатель3
	|			КОНЕЦ
	|	КОНЕЦ КАК Показатель3,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодЗавершения <= &Период
	|				И Начисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА Начисления.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|						ТОГДА НЕОПРЕДЕЛЕНО
	|					ИНАЧЕ Начисления.Показатель4Завершения
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ Начисления.Показатель4
	|			КОНЕЦ
	|	КОНЕЦ КАК Показатель4,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодЗавершения <= &Период
	|				И Начисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА Начисления.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|						ТОГДА Начисления.ТарифныйРазряд1Завершения
	|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА Начисления.ТарифныйРазряд1
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ КАК ТарифныйРазряд1,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодЗавершения <= &Период
	|				И Начисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА Начисления.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|						ТОГДА Начисления.ТарифныйРазряд2Завершения
	|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА Начисления.ТарифныйРазряд2
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ КАК ТарифныйРазряд2,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодЗавершения <= &Период
	|				И Начисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА Начисления.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|						ТОГДА Начисления.ТарифныйРазряд3Завершения
	|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА Начисления.ТарифныйРазряд3
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ КАК ТарифныйРазряд3,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодЗавершения <= &Период
	|				И Начисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА Начисления.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|						ТОГДА Начисления.ТарифныйРазряд4Завершения
	|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА Начисления.ТарифныйРазряд4
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ КАК ТарифныйРазряд4,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодЗавершения <= &Период
	|				И Начисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Начисления.Валюта1Завершения
	|		ИНАЧЕ Начисления.Валюта1
	|	КОНЕЦ КАК Валюта1,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодЗавершения <= &Период
	|				И Начисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Начисления.Валюта2Завершения
	|		ИНАЧЕ Начисления.Валюта2
	|	КОНЕЦ КАК Валюта2,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодЗавершения <= &Период
	|				И Начисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Начисления.Валюта3Завершения
	|		ИНАЧЕ Начисления.Валюта3
	|	КОНЕЦ КАК Валюта3,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодЗавершения <= &Период
	|				И Начисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Начисления.Валюта4Завершения
	|		ИНАЧЕ Начисления.Валюта4
	|	КОНЕЦ КАК Валюта4
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|		&Период,
	|		Сотрудник В (&Сотрудник)
	|			И ДокументОснование = ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
	|			И ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций
	//vvv
	|			И ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты)
	//
	|			И Регистратор <> &Регистратор) КАК Начисления
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Начисления.ПериодЗавершения <= &Период
	|					И Начисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА Начисления.ДействиеЗавершения
	|			ИНАЧЕ Начисления.Действие
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)";
	//|	И Начисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)";

	Выборка = ЗапросНачисления.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("Сотрудник, ВидРасчета");
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		МассивНачислений = ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
		
		Если МассивНачислений.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ОсновныеНачисления.Добавить(),Выборка);
		
	КонецЦикла;

КонецПроцедуры // ДобавитьСтрокиНачисленийПоРаботнику()

// простовляет в табличную часть КоэфПовышенияТО данные по Сторуднику
Процедура ДобавитьСтрокиКоэфПовышенияТО(Сотрудники, ДатаАктуальности = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("Дата", ДатаАктуальности);	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КоэфПовышенияТОСрезПоследних.Сотрудник,
	|	КоэфПовышенияТОСрезПоследних.Коэффициент,
	|	КоэфПовышенияТОСрезПоследних.Размер,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять) КАК Действие
	|ИЗ
	|	РегистрСведений.КоэфПовышенияТО.СрезПоследних(&Дата, Сотрудник В (&Сотрудники)) КАК КоэфПовышенияТОСрезПоследних
	|ГДЕ
	|	КоэфПовышенияТОСрезПоследних.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("Сотрудник, Коэффициент");
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		МассивНачислений = КоэфПовышенияТО.НайтиСтроки(СтруктураПоиска);
		
		Если МассивНачислений.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(КоэфПовышенияТО.Добавить(),Выборка);
	КонецЦикла;
КонецПроцедуры

// простовляет в табличную часть ПовышенияПоИнструкции данные по Сторуднику
Процедура ДобавитьСтрокиПовышенияПоИнструкции(Сотрудники, ДатаАктуальности = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("Дата", ДатаАктуальности);	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПовышенияПоИнструкцииСрезПоследних.Сотрудник,
	|	ПовышенияПоИнструкцииСрезПоследних.Коэффициент,
	|	ПовышенияПоИнструкцииСрезПоследних.Размер,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять) КАК Действие
	|ИЗ
	|	РегистрСведений.ПовышенияПоИнструкции.СрезПоследних(&Дата, Сотрудник В (&Сотрудники)) КАК ПовышенияПоИнструкцииСрезПоследних
	|ГДЕ
	|	ПовышенияПоИнструкцииСрезПоследних.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("Сотрудник, Коэффициент");
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		МассивНачислений =ПовышенияПоИнструкции.НайтиСтроки(СтруктураПоиска);
		
		Если МассивНачислений.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ПовышенияПоИнструкции.Добавить(),Выборка);
	КонецЦикла;	
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата);

	Если Режим = "ПоРеквизитамДокумента" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
		|	КадровоеПеремещениеОрганизаций.Номер КАК НомерДок,
		|	КадровоеПеремещениеОрганизаций.Дата КАК ДатаДок,
		|	ВЫРАЗИТЬ(КадровоеПеремещениеОрганизаций.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
		|	КадровоеПеремещениеОрганизаций.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОРуководителя,
		|	КадровоеПеремещениеОрганизаций.Организация.Префикс
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО (ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = &Руководитель)
		|			И КадровоеПеремещениеОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|ГДЕ
		|	КадровоеПеремещениеОрганизаций.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		Запрос.УстановитьПараметр("РеглВалюта",	Константы.ВалютаРегламентированногоУчета.Получить());
		Запрос.УстановитьПараметр("ПустаяДата",	'00010101');
		Запрос.УстановитьПараметр("Прием",		Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Док.ДатаНачала,
		|	Док.ДатаОкончания,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, Док.Сотрудник.Наименование) КАК Работник,
		|	ЕСТЬNULL(Док.Сотрудник.ДатаДоговора, &ПустаяДата) КАК ТрудовойДоговорДата,
		|	ЕСТЬNULL(Док.Сотрудник.НомерДоговора, """") КАК ТрудовойДоговорНомер,
		|	ВЫБОР
		|		КОГДА Док.Сотрудник.НомерДоговора ЕСТЬ NULL 
		|			ТОГДА Док.ОснованиеПеремещения
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ОснованиеПеремещения,
		|	Док.НомерСтроки КАК НомерСтроки,
		|	Док.ПодразделениеОрганизации.Наименование КАК НовоеПодразделение,
		|	Док.Должность.Наименование КАК НоваяДолжность,
		|	ВЫБОР
		|		КОГДА  Работники.ПериодЗавершения <= Док.ДатаНачала
		|				И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		ТОГДА Работники.ПодразделениеОрганизацииЗавершенияНаименование
		|		ИНАЧЕ Работники.ПодразделениеОрганизацииНаименование
		|	КОНЕЦ КАК ПрежнееПодразделение,
		|	ВЫБОР
		|		КОГДА Работники.ПериодЗавершения <= Док.ДатаНачала
		|				И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		ТОГДА Работники.ДолжностьЗавершенияНаименование
		|		ИНАЧЕ Работники.ДолжностьНаименование 
		|	КОНЕЦ КАК ПрежняяДолжность,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Начисления.Валюта1, &РеглВалюта) = &РеглВалюта
		|			ТОГДА """"
		|		ИНАЧЕ Начисления.Валюта1.Наименование
		|	КОНЕЦ КАК ВалютаТарифнойСтавки,
		|	ЕСТЬNULL(Начисления.Показатель1, 0) КАК ОкладТарифнаяСтавка,
		|	Работники.Сотрудник.Код КАК ТабельныйНомер
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокДат.Сотрудник КАК Сотрудник,
		|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
		|			РаботникиОрганизации.Должность.Наименование КАК ДолжностьНаименование,
		|			РаботникиОрганизации.ПодразделениеОрганизацииЗавершения.Наименование КАК ПодразделениеОрганизацииЗавершенияНаименование,
		|			РаботникиОрганизации.ДолжностьЗавершения.Наименование КАК ДолжностьЗавершенияНаименование,
		|			РаботникиОрганизации.ПериодЗавершения
		|		ИЗ
		|			(ВЫБРАТЬ
		|				РаботникиВнутри.Сотрудник КАК Сотрудник,
		|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК Док
		|					ПО РаботникиВнутри.Период < Док.ДатаНачала
		|						И РаботникиВнутри.Сотрудник = Док.Сотрудник
		|			ГДЕ
		|				Док.Ссылка = &ДокументСсылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиВнутри.Сотрудник) КАК СписокДат
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|				ПО СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период
		|					И СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник) КАК Работники
		|		ПО Док.Сотрудник = Работники.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК Начисления
		|		ПО Док.Ссылка = Начисления.Ссылка
		|			И (Начисления.ВидРасчета.ЗачетОтработанногоВремени)
		|			И (Начисления.ВидРасчета.ЗачетНормыВремени)
		|			И Док.Сотрудник = Начисления.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|		&ДатаДокумента,
		|		ФизЛицо В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				КадровоеПеремещениеОрганизацииРаботники.Сотрудник.Физлицо
		|			ИЗ
		|				Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацииРаботники
		|			ГДЕ
		|				КадровоеПеремещениеОрганизацииРаботники.Ссылка = &ДокументСсылка)) КАК ФИОФизЛицСрезПоследних
		|		ПО Док.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|ГДЕ
		|	Док.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой "Т-5а",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТ5а(ИмяМакета)

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КадровоеПеремещениеОрганизации_Т5а";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРаботник"); // строка работника

	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
 		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки);// Для подвала.
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.

	ВыведеноСтрок = 0;
	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		Если ЗначениеЗаполнено(ВыборкаРаботники.ВалютаТарифнойСтавки) Тогда
			ОбластьМакета.Параметры.ОкладТарифнаяСтавка = "" + Формат(ВыборкаРаботники.ОкладТарифнаяСтавка,"ЧЦ=15; ЧДЦ=2; ЧН=' '") + Символы.ПС + "(" + ВыборкаРаботники.ВалютаТарифнойСтавки +")";
		КонецЕсли;
		
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если ИмяМакета = "Т5а_от_5_1_2004" И ЗначениеЗаполнено(ВыборкаРаботники.ОснованиеПеремещения) Тогда
			ВысотаДока = ТабДокумент.ВысотаТаблицы;
			ОбластьДокумента = ТабДокумент.Область(ВысотаДока,14,ВысотаДока,17);
			ОбластьДокумента.Объединить();
			ОбластьДокумента.Текст = ВыборкаРаботники.ОснованиеПеремещения;
		КонецЕсли;

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьМакета.Параметры.Количество() Цикл
		ОбластьМакета.Параметры.Установить(Сч - 1,"");
	КонецЦикла;
	ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
	Пока ТабДокумент.ПроверитьВывод(ВыводимыеОбласти) Цикл
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТ5а()

// Функция формирует табличный документ с печатной формой "Т-5",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТ5(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КадровоеПеремещениеОрганизации_Т5";
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника

	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
 		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
	КонецЕсли;
	
	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Шапка документа.
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВыборкаРаботники.НомерСтроки;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;
		
		Если ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания) Тогда
			ОбластьМакета.Параметры.ВидПеревода = "временно";
						
		Иначе
			ОбластьМакета.Параметры.ВидПеревода = "постоянно";
			
		КонецЕсли;
		
		Если ИмяМакета = "Т5_от_6_4_2001" Тогда
		
			Если ЗначениеЗаполнено(ВыборкаРаботники.ВалютаТарифнойСтавки) Тогда
				ОбластьМакета.Параметры.ОкладТарифнаяСтавка = "" + Формат(ВыборкаРаботники.ОкладТарифнаяСтавка,"ЧЦ=15; ЧДЦ=2") + " (" + ВыборкаРаботники.ВалютаТарифнойСтавки+")";
			КонецЕсли;
		
		Иначе
			
			ОбластьМакета.Параметры.ОкладЦелаяЧасть = "" + Цел(ВыборкаРаботники.ОкладТарифнаяСтавка) 
			+ ?(ЗначениеЗаполнено(ВыборкаРаботники.ВалютаТарифнойСтавки)," (" + ВыборкаРаботники.ВалютаТарифнойСтавки+")","");
			
			ДробнаяЧасть = ВыборкаРаботники.ОкладТарифнаяСтавка - Цел(ВыборкаРаботники.ОкладТарифнаяСтавка);
			ОбластьМакета.Параметры.ОкладДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100); 
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
	КонецЦикла;
	
	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТ5()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КадровоеПеремещениеОрганизаций.Дата,
	|	КадровоеПеремещениеОрганизаций.Организация,
	|	ВЫБОР КОГДА КадровоеПеремещениеОрганизаций.Организация.ГоловнаяОрганизация = &ПустаяОрганизация ТОГДА КадровоеПеремещениеОрганизаций.Организация ИНАЧЕ КадровоеПеремещениеОрганизаций.Организация.ГоловнаяОрганизация КОНЕЦ КАК ГоловнаяОрганизация,
	|	КадровоеПеремещениеОрганизаций.Ссылка,
	|	КадровоеПеремещениеОрганизаций.ИндексацияЗаработка
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
	|
	|ГДЕ
	|	КадровоеПеремещениеОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, Режим, ПроверкаШтатногоРасписания)

	Запрос = Новый Запрос;

	СписокСтруктурныхПодразделений = ПроцедурыУправленияПерсоналом.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	СписокСтруктурныхПодразделений.Добавить(Организация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",	СписокСтруктурныхПодразделений);
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",					Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",			ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПустаяДата",						Дата('00010101'));
	Запрос.УстановитьПараметр("Прием",							Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	
	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвиженийКадров": 
	// 1. Выборка "ТЧРаботникиОрганизации": 
	//		Выбираются строки документа.  
	// 2. Выборка "ДанныеПоРаботникиДоНазначения": 
	//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по регистру РаботникиОрганизации на дату ДатаНачала
	//		для выполнения движений и проверки "Работает ли работник на дату перемещения"
	//		(Использует данные выборки "ДатыПоследнихДвиженийРаботников")
	// 3. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки, имеющие пересекающийся период действия
	//
	// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	// 1. Выборка "ТЧРаботникиОрганизации":
	//		Выбираются строки документа 
	// 2. Выборка "РаботникиОрганизации":
	//		Для каждой строки ТЧРаботникиОрганизации ищем движения по регистру РаботникиОрганизации за период [ДатаНачала, ДатаОкончания]
	
	Если ПроверкаШтатногоРасписания Тогда
		
		// определим самую раннюю дату перемещения, чтобы с нее начать расчет остатков штатных единиц
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МИНИМУМ(КадровоеПеремещениеОрганизацииРаботникиОрганизации.ДатаНачала) КАК ДатаНачала
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацииРаботникиОрганизации
		|ГДЕ
		|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.Ссылка = &ДокументСсылка
		|	И КадровоеПеремещениеОрганизацииРаботникиОрганизации.ДатаНачала <> &ПустаяДата";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаС = ?(ЗначениеЗаполнено(Выборка.ДатаНачала),Выборка.ДатаНачала,Дата)
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаНачала",	ДатаС);
		Запрос.УстановитьПараметр("Приход",		ВидДвиженияНакопления.Приход);

		//  Дополнительно используем выборки: 
		// 1. ШтатноеРасписаниеОрганизаций
		//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по регистру ШтатноеРасписаниеОрганизаций на дату ДатаНачала
		//		для проверки наличия ставок в штатном расписании
		//		(Использует данные выборки "ДатыШтатногоРасписания")
		// 2. ЗанятоСтавок
		//		Для каждой строки ТЧРаботникиОрганизации на дату ДатаНачала
		//		подсчитываем количество занятых ставок (с учетом "предшествующих" данных текущего документа)
		//
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
		|	ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
		|	ТЧРаботникиОрганизации.ДатаОкончания КАК ДатаОкончания,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ТЧРаботникиОрганизации.Должность КАК Должность,
		|	ТЧРаботникиОрганизации.РазрядЕТС КАК РазрядЕТС,
		|	ТЧРаботникиОрганизации.КоэффициентЕТС КАК КоэффициентЕТС,
		|	ТЧРаботникиОрганизации.Категория КАК Категория,
		|	ТЧРаботникиОрганизации.МесячнаяТарифнаяСтавка КАК МесячнаяТарифнаяСтавка,
		|	ТЧРаботникиОрганизации.ПроцентПоКонтракту КАК ПроцентПоКонтракту,
		|	ТЧРаботникиОрганизации.НапомнитьПоЗавершении КАК НапомнитьПоЗавершении,
		|	ТЧРаботникиОрганизации.ТарифныйСПовышениемПоИнструкции,
		|	ТЧРаботникиОрганизации.ТарифнаяСтавка,
		|	ТЧРаботникиОрганизации.ИтоговоеПовышениеПоИнструкции,
		|	ТЧРаботникиОрганизации.ТарифнаяСтавкаПервогоРазряда,
		|	ТЧРаботникиОрганизации.УсловияТрудаИзмерение,
		|	ТЧРаботникиОрганизации.ВидДеятельностиИзмерение,
		|	ДанныеПоРаботникуДоНазначения.УсловияТрудаИзмерение КАК ПрежнийУсловияТрудаИзмерение,
		|	ДанныеПоРаботникуДоНазначения.ВидДеятельностиИзмерение КАК ПрежнийВидДеятельностиИзмерение,
		|	ТЧРаботникиОрганизации.ПовышенныйКоэффициентЕТС,
		|	ТЧРаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
		|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец КАК ОрганизацияПодразделения,
		|	ВЫБОР
		|		КОГДА НЕ ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
		|	КОНЕЦ КАК ПрежнееПодразделение,
		//vvv
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ТабельУчетаОрганизацииЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ТабельУчетаОрганизации
		|	КОНЕЦ КАК ПрежнийТабель,
		//
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделениеЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение
		|	КОНЕЦ КАК ПрежняяОрганизация,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.Должность
		|	КОНЕЦ КАК ПрежняяДолжность,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок
		|	КОНЕЦ КАК ПрежняяСтавка,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ГрафикРаботыЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ГрафикРаботы
		|	КОНЕЦ КАК ПрежнийГрафикРаботы,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.Период
		|	КОНЕЦ КАК ДатаПоследнегоДвиженияПоРаботнику,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		|	NULL КАК КонфликтныйДокумент,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.НомерДоговора ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТрудовойДоговорПрисутствует,
		|	СвободноСтавокНаДатуПриема.ОстатокСтавок КАК ОстатокСтавок,
		|	ТЧРаботникиОрганизации.БезЕТС
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДатыПоследнихДвиженийРаботников.НомерСтроки КАК НомерСтроки,
		|			ДатыПоследнихДвиженийРаботников.Период КАК Период,
		|			ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
		|			ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|			ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|			ДанныеПоРаботникуДоНазначения.Должность КАК Должность,
		|			ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ГрафикРаботы,
		|			ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения КАК ЗанимаемыхСтавокЗавершения,
		|			ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделениеЗавершения КАК ОбособленноеПодразделениеЗавершения,
		|			ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения КАК ПодразделениеОрганизацииЗавершения,
		//vvv
		|			ДанныеПоРаботникуДоНазначения.ТабельУчетаОрганизацииЗавершения КАК ТабельУчетаОрганизацииЗавершения,
		|			ДанныеПоРаботникуДоНазначения.ТабельУчетаОрганизации КАК ТабельУчетаОрганизации,
		//
		|			ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения КАК ДолжностьЗавершения,
		|			ДанныеПоРаботникуДоНазначения.ГрафикРаботыЗавершения КАК ГрафикРаботыЗавершения,
		|			ДанныеПоРаботникуДоНазначения.ПериодЗавершения КАК ПериодЗавершения,
		|			ДанныеПоРаботникуДоНазначения.УсловияТрудаИзмерение КАК УсловияТрудаИзмерение,
		|			ДанныеПоРаботникуДоНазначения.ВидДеятельностиИзмерение КАК ВидДеятельностиИзмерение
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|				МАКСИМУМ(Работники.Период) КАК Период,
		|				ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник
		|			ИЗ
		|				Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|					ПО (Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала)
		|						И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|			ГДЕ
		|				ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ТЧРаботникиОрганизации.НомерСтроки,
		|				ТЧРаботникиОрганизации.Сотрудник) КАК ДатыПоследнихДвиженийРаботников
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
		|				ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
		|					И ДатыПоследнихДвиженийРаботников.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник) КАК ДанныеПоРаботникуДоНазначения
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДанныеПоРаботникуДоНазначения.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
		|				ПО (ТЧРаботникиОрганизации2.Ссылка = ТЧРаботникиОрганизации.Ссылка)
		|					И ТЧРаботникиОрганизации.НомерСтроки < ТЧРаботникиОрганизации2.НомерСтроки
		|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
		|		ГДЕ
		|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МаксимальныеПериодыШР.НомерСтроки КАК НомерСтроки,
		|			ЕСТЬNULL(ШтатноеРасписание.КоличествоСтавок, 0) - ЕСТЬNULL(Вакансии.КоличествоСтавок, 0) - ЕСТЬNULL(РанееЗанятоСтавок.КоличествоСтавок, 0) + ЕСТЬNULL(ОсвобождаетсяСтавок.КоличествоСтавок, 0) КАК ОстатокСтавок
		|		ИЗ
		|			(ВЫБРАТЬ
		|				Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|				Работники.Должность КАК Должность,
		|				Работники.УсловияТрудаИзмерение КАК УсловияТрудаИзмерение,
		|				Работники.ВидДеятельностиИзмерение КАК ВидДеятельностиИзмерение,
		|				Работники.НомерСтроки КАК НомерСтроки,
		|				МАКСИМУМ(ШтатноеРасписание.Период) КАК МаксПериод
		|			ИЗ
		|				Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК Работники
		|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|						ЕСТЬNULL(ШтатноеРасписание.Период, &ДатаНачала) КАК Период,
		|						Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|						Работники.Должность КАК Должность,
		|						Работники.УсловияТрудаИзмерение КАК УсловияТрудаИзмерение,
		|						Работники.ВидДеятельностиИзмерение КАК ВидДеятельностиИзмерение
		|					ИЗ
		|						Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК Работники
		|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
		|							ПО Работники.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		|								И Работники.Должность = ШтатноеРасписание.Должность
		|								И Работники.УсловияТрудаИзмерение = ШтатноеРасписание.УсловияТрудаИзмерение
		|								И Работники.ВидДеятельностиИзмерение = ШтатноеРасписание.ВидДеятельностиИзмерение
		|					ГДЕ
		|						Работники.Ссылка = &ДокументСсылка) КАК ШтатноеРасписание
		|					ПО Работники.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		|						И Работники.Должность = ШтатноеРасписание.Должность
		|						И Работники.УсловияТрудаИзмерение = ШтатноеРасписание.УсловияТрудаИзмерение
		|						И Работники.ВидДеятельностиИзмерение = ШтатноеРасписание.ВидДеятельностиИзмерение
		|						И Работники.ДатаНачала >= ШтатноеРасписание.Период
		|			ГДЕ
		|				Работники.Ссылка = &ДокументСсылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Работники.ПодразделениеОрганизации,
		|				Работники.НомерСтроки,
		|				Работники.Должность,
		|				Работники.УсловияТрудаИзмерение,
		|				Работники.ВидДеятельностиИзмерение) КАК МаксимальныеПериодыШР
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
		|				ПО МаксимальныеПериодыШР.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		|					И МаксимальныеПериодыШР.Должность = ШтатноеРасписание.Должность
		|					И МаксимальныеПериодыШР.УсловияТрудаИзмерение = ШтатноеРасписание.УсловияТрудаИзмерение
		|					И МаксимальныеПериодыШР.ВидДеятельностиИзмерение = ШтатноеРасписание.ВидДеятельностиИзмерение
		|					И МаксимальныеПериодыШР.МаксПериод = ШтатноеРасписание.Период
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Работники.НомерСтроки КАК НомерСтроки,
		|					Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|					Работники.Должность КАК Должность,
		|					Работники.УсловияТрудаИзмерение КАК УсловияТрудаИзмерение,
		|					Работники.ВидДеятельностиИзмерение КАК ВидДеятельностиИзмерение,
		|					СУММА(ВЫБОР
		|							КОГДА Вакансии.ВидДвижения = &Приход
		|								ТОГДА Вакансии.КоличествоСтавок
		|							ИНАЧЕ -Вакансии.КоличествоСтавок
		|						КОНЕЦ) КАК КоличествоСтавок
		|				ИЗ
		|					Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК Работники
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеШтатныеЕдиницыОрганизаций КАК Вакансии
		|						ПО Работники.ПодразделениеОрганизации = Вакансии.ПодразделениеОрганизации
		|							И Работники.Должность = Вакансии.Должность
		|							И Работники.УсловияТрудаИзмерение = Вакансии.УсловияТрудаИзмерение
		|							И Работники.ВидДеятельностиИзмерение = Вакансии.ВидДеятельностиИзмерение
		|							И Работники.ДатаНачала >= Вакансии.Период
		|							И (Вакансии.Регистратор <> &ДокументСсылка)
		|				ГДЕ
		|					Работники.Ссылка = &ДокументСсылка
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Работники.ПодразделениеОрганизации,
		|					Работники.Должность,
		|					Работники.УсловияТрудаИзмерение,
		|					Работники.ВидДеятельностиИзмерение,
		|					Работники.НомерСтроки) КАК Вакансии
		|				ПО МаксимальныеПериодыШР.НомерСтроки = Вакансии.НомерСтроки
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СтрокиДокумента.НомерСтроки КАК НомерСтроки,
		|					СУММА(ВЫБОР
		|							КОГДА КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала <= СтрокиДокумента.ДатаНачала
		|								ТОГДА КадровоеПеремещениеОрганизацийРаботникиОрганизации.ЗанимаемыхСтавок
		|							ИНАЧЕ 0
		|						КОНЕЦ - ВЫБОР
		|							КОГДА КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаОкончания < СтрокиДокумента.ДатаНачала
		|									И КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаОкончания <> &ПустаяДата
		|									И НЕ КадровоеПеремещениеОрганизацийРаботникиОрганизации.НапомнитьПоЗавершении
		|								ТОГДА КадровоеПеремещениеОрганизацийРаботникиОрганизации.ЗанимаемыхСтавок
		|							ИНАЧЕ 0
		|						КОНЕЦ) КАК КоличествоСтавок
		|				ИЗ
		|					Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК СтрокиДокумента
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацийРаботникиОрганизации
		|						ПО СтрокиДокумента.Ссылка = КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка
		|							И СтрокиДокумента.НомерСтроки <> КадровоеПеремещениеОрганизацийРаботникиОрганизации.НомерСтроки
		|							И СтрокиДокумента.ПодразделениеОрганизации = КадровоеПеремещениеОрганизацийРаботникиОрганизации.ПодразделениеОрганизации
		|							И СтрокиДокумента.Должность = КадровоеПеремещениеОрганизацийРаботникиОрганизации.Должность
		|							И СтрокиДокумента.УсловияТрудаИзмерение = КадровоеПеремещениеОрганизацийРаботникиОрганизации.УсловияТрудаИзмерение
		|							И СтрокиДокумента.ВидДеятельностиИзмерение = КадровоеПеремещениеОрганизацийРаботникиОрганизации.ВидДеятельностиИзмерение
		|				ГДЕ
		|					СтрокиДокумента.Ссылка = &ДокументСсылка
		|				
		|				СГРУППИРОВАТЬ ПО
		|					СтрокиДокумента.НомерСтроки) КАК РанееЗанятоСтавок
		|				ПО МаксимальныеПериодыШР.НомерСтроки = РанееЗанятоСтавок.НомерСтроки
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Работники.НомерСтроки КАК НомерСтроки,
		|					Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|					Работники.Должность КАК Должность,
		|					Работники.УсловияТрудаИзмерение КАК УсловияТрудаИзмерение,
		|					Работники.ВидДеятельностиИзмерение КАК ВидДеятельностиИзмерение,
		|					ИтогоЗанятоПоДолжности.КоличествоСтавок КАК КоличествоСтавок
		|				ИЗ
		|					Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК Работники
		|						ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							СУММА(ВЫБОР
		|									КОГДА РаботникиОрганизаций.ПериодЗавершения <= ПоследниеСтавки.ДатаНачала
		|											И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|										ТОГДА РаботникиОрганизаций.ЗанимаемыхСтавокЗавершения
		|									ИНАЧЕ РаботникиОрганизаций.ЗанимаемыхСтавок
		|								КОНЕЦ) КАК КоличествоСтавок,
		|							ВЫБОР
		|								КОГДА РаботникиОрганизаций.ПериодЗавершения <= ПоследниеСтавки.ДатаНачала
		|										И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|									ТОГДА РаботникиОрганизаций.ДолжностьЗавершения
		|								ИНАЧЕ РаботникиОрганизаций.Должность
		|							КОНЕЦ КАК Должность,
		|							ВЫБОР
		|								КОГДА РаботникиОрганизаций.ПериодЗавершения <= ПоследниеСтавки.ДатаНачала
		|										И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|									ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
		|								ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
		|							КОНЕЦ КАК ПодразделениеОрганизации,
		|							РаботникиОрганизаций.УсловияТрудаИзмерение КАК УсловияТрудаИзмерение,
		|							РаботникиОрганизаций.ВидДеятельностиИзмерение КАК ВидДеятельностиИзмерение
		|						ИЗ
		|							(ВЫБРАТЬ
		|								МАКСИМУМ(Работники.Период) КАК Период,
		|								Работники.Сотрудник КАК Сотрудник,
		|								ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала
		|							ИЗ
		|								Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|									ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|									ПО (Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала)
		|										И (Работники.Регистратор.Проведен)
		|										И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|							ГДЕ
		|								ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|							
		|							СГРУППИРОВАТЬ ПО
		|								Работники.Сотрудник,
		|								ТЧРаботникиОрганизации.ДатаНачала) КАК ПоследниеСтавки
		|								ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|								ПО ПоследниеСтавки.Период = РаботникиОрганизаций.Период
		|									И ПоследниеСтавки.Сотрудник = РаботникиОрганизаций.Сотрудник
		|						
		|						СГРУППИРОВАТЬ ПО
		|							ВЫБОР
		|								КОГДА РаботникиОрганизаций.ПериодЗавершения <= ПоследниеСтавки.ДатаНачала
		|										И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|									ТОГДА РаботникиОрганизаций.ДолжностьЗавершения
		|								ИНАЧЕ РаботникиОрганизаций.Должность
		|							КОНЕЦ,
		|							ВЫБОР
		|								КОГДА РаботникиОрганизаций.ПериодЗавершения <= ПоследниеСтавки.ДатаНачала
		|										И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|									ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
		|								ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
		|							КОНЕЦ,
		|							РаботникиОрганизаций.УсловияТрудаИзмерение,
		|							РаботникиОрганизаций.ВидДеятельностиИзмерение) КАК ИтогоЗанятоПоДолжности
		|						ПО (ИтогоЗанятоПоДолжности.Должность = Работники.Должность)
		|							И (ИтогоЗанятоПоДолжности.ПодразделениеОрганизации = Работники.ПодразделениеОрганизации)
		|							И (ИтогоЗанятоПоДолжности.УсловияТрудаИзмерение = Работники.УсловияТрудаИзмерение)
		|							И (ИтогоЗанятоПоДолжности.ВидДеятельностиИзмерение = Работники.ВидДеятельностиИзмерение)
		|				ГДЕ
		|					Работники.Ссылка = &ДокументСсылка) КАК ОсвобождаетсяСтавок
		|				ПО МаксимальныеПериодыШР.НомерСтроки = ОсвобождаетсяСтавок.НомерСтроки) КАК СвободноСтавокНаДатуПриема
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = СвободноСтавокНаДатуПриема.НомерСтроки
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""КонфликтныйДокумент"",
		|	ТЧРаботникиОрганизации.НомерСтроки,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		//vvv
		|	NULL,
		//
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	Работники.Регистратор,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|		ПО (НЕ ТЧРаботникиОрганизации.НапомнитьПоЗавершении
		|					И (Работники.Период МЕЖДУ ТЧРаботникиОрганизации.ДатаНачала И ВЫБОР
		|						КОГДА ТЧРаботникиОрганизации.ДатаОкончания = &ПустаяДата
		|							ТОГДА &ПустаяДата
		|						ИНАЧЕ ДОБАВИТЬКДАТЕ(ТЧРаботникиОрганизации.ДатаОкончания, ДЕНЬ, 1)
		|					КОНЕЦ)
		|				ИЛИ Работники.Период = ТЧРаботникиОрганизации.ДатаНачала)
		|			И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
		|	ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
		|	ТЧРаботникиОрганизации.ДатаОкончания КАК ДатаОкончания,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ТЧРаботникиОрганизации.Должность КАК Должность,
		//vvv
		|	ТЧРаботникиОрганизации.КатегорияДолжности КАК КатегорияДолжности,
		|	ТЧРаботникиОрганизации.ТабельУчетаОрганизации КАК ТабельУчетаОрганизации,
		|	ТЧРаботникиОрганизации.Автомобиль КАК Автомобиль,
		|	ТЧРаботникиОрганизации.ТарифнаяСтавкаРемонт КАК ТарифнаяСтавкаРемонт,
		|	ТЧРаботникиОрганизации.МесячнаяТарифнаяСтавкаРемонт КАК МесячнаяТарифнаяСтавкаРемонт,
		|	ТЧРаботникиОрганизации.Классность КАК Классность,
		|	ТЧРаботникиОрганизации.Должность.Водитель КАК ЭтоВодитель,
		|	ТЧРаботникиОрганизации.ВидУчетаВремени КАК ВидУчетаВремени,
		|	ТЧРаботникиОрганизации.НомерПриказа КАК НомерПриказа,
		|	ТЧРаботникиОрганизации.ДатаПриказа КАК ДатаПриказа,
		|	ТЧРаботникиОрганизации.ПричинаКадровогоПеремещения КАК ПричинаКадровогоПеремещения,
		//|	ДанныеПоСтавкамДоНазначения.МесячнаяТарифнаяСтавка КАК ПрежняяМесячнаяТарифнаяСтавка,
		//|	ДанныеПоСтавкамДоНазначения.ТарифнаяСтавка КАК ПрежняяТарифнаяСтавка,
		|	ВЫБОР
		|		КОГДА ДанныеПоСтавкамДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоСтавкамДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоСтавкамДоНазначения.МесячнаяТарифнаяСтавкаЗавершения
		|		ИНАЧЕ ДанныеПоСтавкамДоНазначения.МесячнаяТарифнаяСтавка
		|	КОНЕЦ КАК ПрежняяМесячнаяТарифнаяСтавка,
		|	ВЫБОР
		|		КОГДА ДанныеПоСтавкамДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоСтавкамДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоСтавкамДоНазначения.ТарифнаяСтавкаЗавершения
		|		ИНАЧЕ ДанныеПоСтавкамДоНазначения.ТарифнаяСтавка
		|	КОНЕЦ КАК ПрежняяТарифнаяСтавка,
		|	ДанныеПоСтавкамВодителяДоНазначения.ТарифнаяСтавкаРемонт КАК ПрежняяТарифнаяСтавкаРемонт,
		|	ДанныеПоСтавкамВодителяДоНазначения.МесячнаяТарифнаяСтавкаРемонт КАК ПрежняяМесячнаяТарифнаяСтавкаРемонт,
		|	ВЫБОР КОГДА ТЧРаботникиОрганизации.ТабельныйНомер="""" ТОГДА ТЧРаботникиОрганизации.Сотрудник.Код ИНАЧЕ ТЧРаботникиОрганизации.ТабельныйНомер КОНЕЦ КАК ТабельныйНомер,
		//
		|	ТЧРаботникиОрганизации.РазрядЕТС КАК РазрядЕТС,
		|	ТЧРаботникиОрганизации.КоэффициентЕТС КАК КоэффициентЕТС,
		|	ТЧРаботникиОрганизации.Категория КАК Категория,
		|	ТЧРаботникиОрганизации.МесячнаяТарифнаяСтавка КАК МесячнаяТарифнаяСтавка,
		|	ТЧРаботникиОрганизации.ПроцентПоКонтракту КАК ПроцентПоКонтракту,
		|	ТЧРаботникиОрганизации.ТарифныйСПовышениемПоИнструкции,
		|	ТЧРаботникиОрганизации.ТарифнаяСтавка,
		|	ТЧРаботникиОрганизации.ИтоговоеПовышениеПоИнструкции,
		|	ТЧРаботникиОрганизации.НапомнитьПоЗавершении КАК НапомнитьПоЗавершении,
		|	ТЧРаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
		|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец КАК ОрганизацияПодразделения,
		|	ВЫБОР
		|		КОГДА НЕ ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
		|	КОНЕЦ КАК ПрежнееПодразделение,
		//vvv
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ТабельУчетаОрганизацииЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ТабельУчетаОрганизации
		|	КОНЕЦ КАК ПрежнийТабель,
		|	ВЫБОР
		|		КОГДА ДанныеПоВодителюДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоВодителюДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоВодителюДоНазначения.АвтомобильЗавершения
		|		ИНАЧЕ ДанныеПоВодителюДоНазначения.Автомобиль
		|	КОНЕЦ КАК ПрежнийАвтомобиль,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.ПодразделениеОрганизации <> ВЫБОР
		|					КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|							И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения
		|					ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
		|				КОНЕЦ
		|				ИЛИ ТЧРаботникиОрганизации.Должность <> ВЫБОР
		|					КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|							И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения
		|					ИНАЧЕ ДанныеПоРаботникуДоНазначения.Должность
		|				КОНЕЦ
		|				ИЛИ ТЧРаботникиОрганизации.ЗанимаемыхСтавок <> ВЫБОР
		|					КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|							И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения
		|					ИНАЧЕ ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок
		|				КОНЕЦ
		|				ИЛИ ТЧРаботникиОрганизации.ГрафикРаботы <> ВЫБОР
		|					КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|							И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ДанныеПоРаботникуДоНазначения.ГрафикРаботыЗавершения
		|					ИНАЧЕ ДанныеПоРаботникуДоНазначения.ГрафикРаботы
		|				КОНЕЦ
		|				ИЛИ ТЧРаботникиОрганизации.РазрядЕТС <> ВЫБОР
		|					КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|							И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ДанныеПоРаботникуДоНазначения.РазрядЕТСЗавершения
		|					ИНАЧЕ ДанныеПоРаботникуДоНазначения.РазрядЕТС
		|				КОНЕЦ
		|				ИЛИ ТЧРаботникиОрганизации.КоэффициентЕТС <> ВЫБОР
		|					КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|							И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ДанныеПоРаботникуДоНазначения.КоэффициентЕТСЗавершения
		|					ИНАЧЕ ДанныеПоРаботникуДоНазначения.КоэффициентЕТС
		|				КОНЕЦ
		|				ИЛИ ТЧРаботникиОрганизации.КатегорияДолжности <> ВЫБОР
		|					КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|							И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ДанныеПоРаботникуДоНазначения.КатегорияДолжностиЗавершения
		|					ИНАЧЕ ДанныеПоРаботникуДоНазначения.КатегорияДолжности
		|				КОНЕЦ
		|				ИЛИ ТЧРаботникиОрганизации.ТабельУчетаОрганизации <> ВЫБОР
		|					КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|							И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ДанныеПоРаботникуДоНазначения.ТабельУчетаОрганизацииЗавершения
		|					ИНАЧЕ ДанныеПоРаботникуДоНазначения.ТабельУчетаОрганизации
		|				КОНЕЦ
		|				ИЛИ ТЧРаботникиОрганизации.КатегорияДолжности <> ДанныеПоРаботникуДоНазначения.КатегорияДолжности
		|				ИЛИ ТЧРаботникиОрганизации.ВидУчетаВремени <> ДанныеПоРаботникуДоНазначения.ВидУчетаВремени
		|				ИЛИ ТЧРаботникиОрганизации.ТарифнаяСтавкаПервогоРазряда <> ДанныеПоРаботникуДоНазначения.ТарифнаяСтавкаПервогоРазряда
		|				ИЛИ ТЧРаботникиОрганизации.УсловияТрудаИзмерение <> ДанныеПоРаботникуДоНазначения.УсловияТрудаИзмерение
		|				ИЛИ ТЧРаботникиОрганизации.ВидДеятельностиИзмерение <> ДанныеПоРаботникуДоНазначения.ВидДеятельностиИзмерение
		|				ИЛИ ТЧРаботникиОрганизации.РазрядЕТС <> ДанныеПоРаботникуДоНазначения.РазрядЕТС
		|				ИЛИ (ТЧРаботникиОрганизации.ТабельныйНомер<>"""" И ТЧРаботникиОрганизации.ТабельныйНомер<>ДанныеПоРаботникуДоНазначения.ТабельныйНомер)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДвижениеПоРаботнику,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.ПодразделениеОрганизации <> ВЫБОР
		|					КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|							И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения
		|					ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
		|				КОНЕЦ
		|				ИЛИ ТЧРаботникиОрганизации.Должность <> ВЫБОР
		|					КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|							И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения
		|					ИНАЧЕ ДанныеПоРаботникуДоНазначения.Должность
		|				КОНЕЦ
		|				ИЛИ ТЧРаботникиОрганизации.ЗанимаемыхСтавок <> ВЫБОР
		|					КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|							И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения
		|					ИНАЧЕ ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок
		|				КОНЕЦ
		|				ИЛИ ТЧРаботникиОрганизации.УсловияТрудаИзмерение <> ДанныеПоРаботникуДоНазначения.УсловияТрудаИзмерение
		|				ИЛИ ТЧРаботникиОрганизации.ВидДеятельностиИзмерение <> ДанныеПоРаботникуДоНазначения.ВидДеятельностиИзмерение
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДвижениеПоЗанятымЕдиницам,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Автомобиль <> ВЫБОР
		|					КОГДА ДанныеПоВодителюДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|							И ДанныеПоВодителюДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ЕСТЬNULL(ДанныеПоВодителюДоНазначения.АвтомобильЗавершения,ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка))
		|					ИНАЧЕ ЕСТЬNULL(ДанныеПоВодителюДоНазначения.Автомобиль,ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка))
		|				КОНЕЦ
		|				ИЛИ ТЧРаботникиОрганизации.ТабельУчетаОрганизации <> ВЫБОР
		|					КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|							И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ЕСТЬNULL(ДанныеПоРаботникуДоНазначения.ТабельУчетаОрганизацииЗавершения,ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка))
		|					ИНАЧЕ ЕСТЬNULL(ДанныеПоРаботникуДоНазначения.ТабельУчетаОрганизации,ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка))
		|				КОНЕЦ
		|				ИЛИ ТЧРаботникиОрганизации.ПодразделениеОрганизации <> ВЫБОР
		|					КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|							И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения
		|					ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
		|				КОНЕЦ
		|				ИЛИ ТЧРаботникиОрганизации.Классность <> ЕСТЬNULL(ДанныеПоВодителюДоНазначения.Классность,ЗНАЧЕНИЕ(Перечисление.КлассностиВодителей.ПустаяСсылка))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДвижениеПоВодителю,
		|	ВЫБОР
		//|		КОГДА ТЧРаботникиОрганизации.МесячнаяТарифнаяСтавка <> ДанныеПоСтавкамДоНазначения.МесячнаяТарифнаяСтавка
		|		КОГДА ТЧРаботникиОрганизации.МесячнаяТарифнаяСтавка <> ВЫБОР
		|					КОГДА ДанныеПоСтавкамДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|							И ДанныеПоСтавкамДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ДанныеПоСтавкамДоНазначения.МесячнаяТарифнаяСтавкаЗавершения
		|					ИНАЧЕ ДанныеПоСтавкамДоНазначения.МесячнаяТарифнаяСтавка
		|				КОНЕЦ
		//|				ИЛИ ТЧРаботникиОрганизации.ТарифнаяСтавка <> ДанныеПоСтавкамДоНазначения.ТарифнаяСтавка
		|				ИЛИ ТЧРаботникиОрганизации.ТарифнаяСтавка <>  ВЫБОР
		|					КОГДА ДанныеПоСтавкамДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|							И ДанныеПоСтавкамДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ДанныеПоСтавкамДоНазначения.ТарифнаяСтавкаЗавершения
		|					ИНАЧЕ ДанныеПоСтавкамДоНазначения.ТарифнаяСтавка
		|				КОНЕЦ
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДвижениеПоТарифнымСтавкам,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.МесячнаяТарифнаяСтавка <> ДанныеПоСтавкамДоНазначения.МесячнаяТарифнаяСтавка
		|				ИЛИ ТЧРаботникиОрганизации.ТарифнаяСтавка <> ДанныеПоСтавкамДоНазначения.ТарифнаяСтавка
		|				ИЛИ ТЧРаботникиОрганизации.ТарифнаяСтавкаРемонт <> ДанныеПоСтавкамВодителяДоНазначения.ТарифнаяСтавкаРемонт
		|				ИЛИ ТЧРаботникиОрганизации.МесячнаяТарифнаяСтавкаРемонт <> ДанныеПоСтавкамВодителяДоНазначения.МесячнаяТарифнаяСтавкаРемонт
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДвижениеПоТарифнымСтавкамВодителя,
		//
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделениеЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение
		|	КОНЕЦ КАК ПрежняяОрганизация,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.Должность
		|	КОНЕЦ КАК ПрежняяДолжность,
		//vvv
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.КатегорияДолжностиЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.КатегорияДолжности
		|	КОНЕЦ КАК ПрежняяКатегорияДолжности,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.РазрядЕТСЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.РазрядЕТС
		|	КОНЕЦ КАК ПрежнийРазрядЕТС,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.КоэффициентЕТСЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.КоэффициентЕТС
		|	КОНЕЦ КАК ПрежнийКоэффициентЕТС,
		//
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок
		|	КОНЕЦ КАК ПрежняяСтавка,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ГрафикРаботыЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ГрафикРаботы
		|	КОНЕЦ КАК ПрежнийГрафикРаботы,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.Период
		|	КОНЕЦ КАК ДатаПоследнегоДвиженияПоРаботнику,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		|	NULL КАК КонфликтныйДокумент,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.НомерДоговора ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТрудовойДоговорПрисутствует,
		|	ТЧРаботникиОрганизации.ТарифнаяСтавкаПервогоРазряда,
		|	ТЧРаботникиОрганизации.УсловияТрудаИзмерение,
		|	ТЧРаботникиОрганизации.ВидДеятельностиИзмерение,
		|	ДанныеПоРаботникуДоНазначения.УсловияТрудаИзмерение КАК ПрежнийУсловияТрудаИзмерение,
		|	ДанныеПоРаботникуДоНазначения.ВидДеятельностиИзмерение КАК ПрежнийВидДеятельностиИзмерение,
		|	ТЧРаботникиОрганизации.ПовышенныйКоэффициентЕТС,
		|	ТЧРаботникиОрганизации.БезЕТС
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДатыПоследнихДвиженийРаботников.НомерСтроки КАК НомерСтроки,
		|			ДатыПоследнихДвиженийРаботников.Период КАК Период,
		|			ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
		|			ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|			ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|			ДанныеПоРаботникуДоНазначения.Должность КАК Должность,
		|			ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ГрафикРаботы,
		|			ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения КАК ЗанимаемыхСтавокЗавершения,
		|			ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделениеЗавершения КАК ОбособленноеПодразделениеЗавершения,
		|			ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения КАК ПодразделениеОрганизацииЗавершения,
		//vvv
		|			ДанныеПоРаботникуДоНазначения.ТабельУчетаОрганизацииЗавершения КАК ТабельУчетаОрганизацииЗавершения,
		|			ДанныеПоРаботникуДоНазначения.ТабельУчетаОрганизации КАК ТабельУчетаОрганизации,
		|			ДанныеПоРаботникуДоНазначения.КатегорияДолжности КАК КатегорияДолжности,
		|			ДанныеПоРаботникуДоНазначения.ВидУчетаВремени КАК ВидУчетаВремени,
		|			ДанныеПоРаботникуДоНазначения.ТарифнаяСтавкаПервогоРазряда КАК ТарифнаяСтавкаПервогоРазряда,
		|			ДанныеПоРаботникуДоНазначения.РазрядЕТС КАК РазрядЕТС,
		|			ДанныеПоРаботникуДоНазначения.КоэффициентЕТС КАК КоэффициентЕТС,
		|			ДанныеПоРаботникуДоНазначения.РазрядЕТСЗавершения КАК РазрядЕТСЗавершения,
		|			ДанныеПоРаботникуДоНазначения.КоэффициентЕТСЗавершения КАК КоэффициентЕТСЗавершения,
		|			ДанныеПоРаботникуДоНазначения.КатегорияДолжностиЗавершения КАК КатегорияДолжностиЗавершения,
		|			ДанныеПоРаботникуДоНазначения.ТабельныйНомер КАК ТабельныйНомер,
		//
		|			ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения КАК ДолжностьЗавершения,
		|			ДанныеПоРаботникуДоНазначения.ГрафикРаботыЗавершения КАК ГрафикРаботыЗавершения,
		|			ДанныеПоРаботникуДоНазначения.ПериодЗавершения КАК ПериодЗавершения,
		|			ДанныеПоРаботникуДоНазначения.УсловияТрудаИзмерение КАК УсловияТрудаИзмерение,
		|			ДанныеПоРаботникуДоНазначения.ВидДеятельностиИзмерение КАК ВидДеятельностиИзмерение
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|				МАКСИМУМ(Работники.Период) КАК Период,
		|				ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник
		|			ИЗ
		|				Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|					ПО (Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала)
		|						И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|			ГДЕ
		|				ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ТЧРаботникиОрганизации.НомерСтроки,
		|				ТЧРаботникиОрганизации.Сотрудник) КАК ДатыПоследнихДвиженийРаботников
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
		|				ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
		|					И ДатыПоследнихДвиженийРаботников.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник) КАК ДанныеПоРаботникуДоНазначения
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДанныеПоРаботникуДоНазначения.НомерСтроки
		//vvv
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДатыПоследнихДвиженийРаботников.НомерСтроки КАК НомерСтроки,
		|			ДатыПоследнихДвиженийРаботников.Период КАК Период,
		|			ДанныеПоРаботникуДоНазначения.ПериодЗавершения КАК ПериодЗавершения,
		|			ДанныеПоРаботникуДоНазначения.Классность КАК Классность,
		|			ДанныеПоРаботникуДоНазначения.Автомобиль КАК Автомобиль,
		|			ДанныеПоРаботникуДоНазначения.АвтомобильЗавершения КАК АвтомобильЗавершения
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|				МАКСИМУМ(Работники.Период) КАК Период,
		|				ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник
		|			ИЗ
		|				Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВодителиОрганизаций КАК Работники
		|					ПО (Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала)
		|						И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|			ГДЕ
		|				ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ТЧРаботникиОрганизации.НомерСтроки,
		|				ТЧРаботникиОрганизации.Сотрудник) КАК ДатыПоследнихДвиженийРаботников
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВодителиОрганизаций КАК ДанныеПоРаботникуДоНазначения
		|				ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
		|					И ДатыПоследнихДвиженийРаботников.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник) КАК ДанныеПоВодителюДоНазначения
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДанныеПоВодителюДоНазначения.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДатыПоследнихДвиженийРаботников.НомерСтроки КАК НомерСтроки,
		|			ДатыПоследнихДвиженийРаботников.Период КАК Период,
		|			ДанныеПоРаботникуДоНазначения.ПериодЗавершения КАК ПериодЗавершения,
		|			ДанныеПоРаботникуДоНазначения.Ставка КАК МесячнаяТарифнаяСтавка,
		|			ДанныеПоРаботникуДоНазначения.ТарифнаяСтавка КАК ТарифнаяСтавка,
		|			ДанныеПоРаботникуДоНазначения.СтавкаЗавершения КАК МесячнаяТарифнаяСтавкаЗавершения,
		|			ДанныеПоРаботникуДоНазначения.ТарифнаяСтавкаЗавершения КАК ТарифнаяСтавкаЗавершения
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|				МАКСИМУМ(Работники.Период) КАК Период,
		|				ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник
		|			ИЗ
		|				Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации КАК Работники
		|					ПО (Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала)
		|						И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|			ГДЕ
		|				ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ТЧРаботникиОрганизации.НомерСтроки,
		|				ТЧРаботникиОрганизации.Сотрудник) КАК ДатыПоследнихДвиженийРаботников
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации КАК ДанныеПоРаботникуДоНазначения
		|				ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
		|					И ДатыПоследнихДвиженийРаботников.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник) КАК ДанныеПоСтавкамДоНазначения
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДанныеПоСтавкамДоНазначения.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДатыПоследнихДвиженийРаботников.НомерСтроки КАК НомерСтроки,
		|			ДатыПоследнихДвиженийРаботников.Период КАК Период,
		|			ДанныеПоРаботникуДоНазначения.СтавкаРемонт КАК МесячнаяТарифнаяСтавкаРемонт,
		|			ДанныеПоРаботникуДоНазначения.ТарифнаяСтавкаРемонт КАК ТарифнаяСтавкаРемонт
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|				МАКСИМУМ(Работники.Период) КАК Период,
		|				ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник
		|			ИЗ
		|				Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиВодителейОрганизации КАК Работники
		|					ПО (Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала)
		|						И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|			ГДЕ
		|				ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ТЧРаботникиОрганизации.НомерСтроки,
		|				ТЧРаботникиОрганизации.Сотрудник) КАК ДатыПоследнихДвиженийРаботников
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиВодителейОрганизации КАК ДанныеПоРаботникуДоНазначения
		|				ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
		|					И ДатыПоследнихДвиженийРаботников.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник) КАК ДанныеПоСтавкамВодителяДоНазначения
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДанныеПоСтавкамВодителяДоНазначения.НомерСтроки
		//
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
		|				ПО (ТЧРаботникиОрганизации2.Ссылка = ТЧРаботникиОрганизации.Ссылка)
		|					И ТЧРаботникиОрганизации.НомерСтроки < ТЧРаботникиОрганизации2.НомерСтроки
		|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
		|		ГДЕ
		|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""КонфликтныйДокумент"",
		|	ТЧРаботникиОрганизации.НомерСтроки,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		//vvv
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		//
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	Работники.Регистратор,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|		ПО (НЕ ТЧРаботникиОрганизации.НапомнитьПоЗавершении
		|					И (Работники.Период МЕЖДУ ТЧРаботникиОрганизации.ДатаНачала И ВЫБОР
		|						КОГДА ТЧРаботникиОрганизации.ДатаОкончания = &ПустаяДата
		|							ТОГДА &ПустаяДата
		|						ИНАЧЕ ДОБАВИТЬКДАТЕ(ТЧРаботникиОрганизации.ДатаОкончания, ДЕНЬ, 1)
		|					КОНЕЦ)
		|				ИЛИ Работники.Период = ТЧРаботникиОрганизации.ДатаНачала)
		|			И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
		
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Формирует запрос по таблице "ОсновныеНачисления" документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачисления(ПроверкаШтатногоРасписания)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧНачисления.Ссылка КАК Ссылка,
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник КАК Сотрудник,
	|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
	|	ТЧРаботникиОрганизации.Должность,
	|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
	|	ТЧРаботникиОрганизации.ГрафикРаботы,
	|	ТЧРаботникиОрганизации.ДатаНачала КАК Период,
	|	ТЧНачисления.Действие КАК Действие,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И (НЕ ТЧРаботникиОрганизации.НапомнитьПоЗавершении)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТЧРаботникиОрганизации.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ПериодЗавершения,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И (НЕ ТЧРаботникиОрганизации.НапомнитьПоЗавершении)
	|			ТОГДА ВЫБОР
	|					КОГДА ТЧНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
	|					КОГДА ТЧНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|					ИНАЧЕ ТЧНачисления.Действие
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.ПустаяСсылка)
	|	КОНЕЦ КАК ДействиеЗавершения,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|			ТОГДА """"
	|		ИНАЧЕ ТЧНачисления.ВидРасчета
	|	КОНЕЦ КАК ВидРасчетаИзмерение,
	|	ТЧНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ТЧНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда КАК ТребуетВводаТарифногоРазряда,
	|	ТЧНачисления.ВидРасчета.ПроизвольнаяФормулаРасчета КАК ПроизвольнаяФормулаРасчета,
	|	ТЧНачисления.Показатель1 КАК Показатель1,
	|	ТЧНачисления.Валюта1 КАК Валюта1,
	|	ТЧНачисления.ТарифныйРазряд1 КАК ТарифныйРазряд1,
	|	ТЧНачисления.Показатель2 КАК Показатель2,
	|	ТЧНачисления.Валюта2 КАК Валюта2,
	|	ТЧНачисления.ТарифныйРазряд2 КАК ТарифныйРазряд2,
	|	ТЧНачисления.Показатель3 КАК Показатель3,
	|	ТЧНачисления.Валюта3 КАК Валюта3,
	|	ТЧНачисления.ТарифныйРазряд3 КАК ТарифныйРазряд3,
	|	ТЧНачисления.Показатель4 КАК Показатель4,
	|	ТЧНачисления.Валюта4 КАК Валюта4,
	|	ТЧНачисления.ТарифныйРазряд4 КАК ТарифныйРазряд4,
	|	ТЧНачисления.Показатель5 КАК Показатель5,
	|	ТЧНачисления.Валюта5 КАК Валюта5,
	|	ТЧНачисления.ТарифныйРазряд5 КАК ТарифныйРазряд5,
	|	ТЧНачисления.Показатель6 КАК Показатель6,
	|	ТЧНачисления.Валюта6 КАК Валюта6,
	|	ТЧНачисления.ТарифныйРазряд6 КАК ТарифныйРазряд6
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ПО ТЧНачисления.Ссылка = ТЧРаботникиОрганизации.Ссылка
	|			И ТЧНачисления.Сотрудник = ТЧРаботникиОрганизации.Сотрудник
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ПроцедурыУправленияПерсоналом.СформироватьЗапросПоПлановымНачислениям(Запрос.Выполнить().Выгрузить(), ПроверкаШтатногоРасписания);

  КонецФункции // СформироватьЗапросПоНачисления()

// Формирует запрос по таблице "КоэфПовышенияТО" документа
Функция СформироватьЗапросПоКоэфПовышенияТО(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ПустойСотрудник", Справочники.СотрудникиОрганизаций.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровоеПеремещениеОрганизацийКоэфПовышенияТО.Ссылка,
	|	КадровоеПеремещениеОрганизацийКоэфПовышенияТО.НомерСтроки,
	|	КадровоеПеремещениеОрганизацийКоэфПовышенияТО.Коэффициент,
	|	КадровоеПеремещениеОрганизацийКоэфПовышенияТО.Размер,
	|	КадровоеПеремещениеОрганизацийКоэфПовышенияТО.Сотрудник,
	|	КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала,
	|	КадровоеПеремещениеОрганизацийКоэфПовышенияТО.Действие,
	|	ДвойныеСтроки.НомерСтроки КАК ДвойнаяСтрока
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций.КоэфПовышенияТО КАК КадровоеПеремещениеОрганизацийКоэфПовышенияТО
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацийРаботникиОрганизации
	|		ПО КадровоеПеремещениеОрганизацийКоэфПовышенияТО.Ссылка = КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка
	|			И КадровоеПеремещениеОрганизацийКоэфПовышенияТО.Сотрудник = КадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.КоэфПовышенияТО КАК ДвойныеСтроки
	|		ПО КадровоеПеремещениеОрганизацийКоэфПовышенияТО.Коэффициент = ДвойныеСтроки.Коэффициент
	|			И КадровоеПеремещениеОрганизацийКоэфПовышенияТО.Сотрудник = ДвойныеСтроки.Сотрудник
	|			И КадровоеПеремещениеОрганизацийКоэфПовышенияТО.Ссылка = ДвойныеСтроки.Ссылка
	|			И КадровоеПеремещениеОрганизацийКоэфПовышенияТО.НомерСтроки < ДвойныеСтроки.НомерСтроки
	|ГДЕ
	|	КадровоеПеремещениеОрганизацийКоэфПовышенияТО.Ссылка = &ДокументСсылка
	|	И КадровоеПеремещениеОрганизацийКоэфПовышенияТО.Сотрудник <> &ПустойСотрудник";
	
	Возврат Запрос.Выполнить();
КонецФункции

Функция СформироватьЗапросПоПовышенияПоИнструкции(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ПустойСотрудник", Справочники.СотрудникиОрганизаций.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровоеПеремещениеОрганизацийПовышенияПоИнструкции.Ссылка,
	|	КадровоеПеремещениеОрганизацийПовышенияПоИнструкции.НомерСтроки,
	|	КадровоеПеремещениеОрганизацийПовышенияПоИнструкции.Коэффициент,
	|	КадровоеПеремещениеОрганизацийПовышенияПоИнструкции.Размер,
	|	КадровоеПеремещениеОрганизацийПовышенияПоИнструкции.Сотрудник,
	|	КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала,
	|	КадровоеПеремещениеОрганизацийПовышенияПоИнструкции.Действие,
	|	ДвойныеСтроки.НомерСтроки КАК ДвойнаяСтрока
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций.ПовышенияПоИнструкции КАК КадровоеПеремещениеОрганизацийПовышенияПоИнструкции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацийРаботникиОрганизации
	|		ПО КадровоеПеремещениеОрганизацийПовышенияПоИнструкции.Ссылка = КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка
	|			И КадровоеПеремещениеОрганизацийПовышенияПоИнструкции.Сотрудник = КадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.ПовышенияПоИнструкции КАК ДвойныеСтроки
	|		ПО КадровоеПеремещениеОрганизацийПовышенияПоИнструкции.Ссылка = ДвойныеСтроки.Ссылка
	|			И КадровоеПеремещениеОрганизацийПовышенияПоИнструкции.Сотрудник = ДвойныеСтроки.Сотрудник
	|			И КадровоеПеремещениеОрганизацийПовышенияПоИнструкции.Коэффициент = ДвойныеСтроки.Коэффициент
	|			И КадровоеПеремещениеОрганизацийПовышенияПоИнструкции.НомерСтроки < ДвойныеСтроки.НомерСтроки
	|ГДЕ
	|	КадровоеПеремещениеОрганизацийПовышенияПоИнструкции.Ссылка = &ДокументСсылка
	|	И КадровоеПеремещениеОрганизацийПовышенияПоИнструкции.Сотрудник <> &ПустойСотрудник";
	
	Возврат Запрос.Выполнить();
КонецФункции



// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники"": ";

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда

		// Сотрудник
		НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НетСотрудника Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран работник!", Отказ, Заголовок);
		КонецЕсли;

		// ДатаНачала
		НетДатыНачала = Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
		Если НетДатыНачала Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указазана дата перемещения!", Отказ, Заголовок);
		КонецЕсли;

		// Организация сотрудника должна совпадать с организацией в документе
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный работник оформлен на другую организацию!", Отказ, Заголовок);
		КонецЕсли;

		// Подразделение
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение, куда переводится работник!", Отказ, Заголовок);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
		КонецЕсли;

		// Должность
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Должность) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана должность, на которую переводится работник!", Отказ, Заголовок);
		КонецЕсли;

		// Количество ставок
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано количество занимаемых работником ставок!", Отказ, Заголовок);
		ИначеЕсли Не НетДатыНачала И ПроверкаШтатногоРасписания Тогда
			Если ВыборкаПоСтрокамДокумента.ОстатокСтавок < ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "в штатном расписании не предусмотрены ставки для перевода работника!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

		Если НетСотрудника ИЛИ НетДатыНачала Тогда
			Возврат; // Дальше не проверяем
		КонецЕсли;

		// ГрафикРаботы
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы)  Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан рабочий график!", Отказ, Заголовок);
		КонецЕсли;
		
		// ДатаОкончания
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) и ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала перемещения не может превышать дату окончания!", Отказ, Заголовок);
		КонецЕсли;

		// Проверка: ранее работник должен быть принят на работу
		Если ВыборкаПоСтрокамДокумента.ПрежняяСтавка = NULL Тогда
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ПрежняяСтавка = 0 Тогда	
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		КонецЕсли;

		// Проверка: противоречие другой строке документа
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			СтрокаСообщениеОбОшибке = "одним документом допускается регистрировать только одно перемещение работника - см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!"; 
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;
		
		//Если ВыборкаПоСтрокамДокумента.ТрудовойДоговорПрисутствует И НЕ(ПустаяСтрока(РаботникиОрганизации.Найти(ВыборкаПоСтрокамДокумента.НомерСтроки,"НомерСтроки").ОснованиеПеремещения)) Тогда
		//	СтрокаСообщениеОбОшибке = " ""Основание перемещения"" указывается только тогда, когда с работником не был заключен трудовой договор!"; 
		//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);			
		//КонецЕсли;

	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	

		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "период действия приказа противоречит кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОсновныеНачисления" документа.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";

	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран работник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Вид расчета
	НетВР = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета);
	Если НетВР И ВыборкаПоСтрокамДокумента.Действие <> Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано начисление!", Отказ, Заголовок);
	Иначе
				
		// Соответствие размера "основного" начисления штатному расписанию
		Если ПроверкаШтатногоРасписания И НЕ ВыборкаПоСтрокамДокумента.РазмерСоответствуетШТР Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "размер основного начисления не соответствует штатному расписанию!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	// Действие
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Действие) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано действие!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Начать или ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
		ИспользуютсяНачисленияВВалюте = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте");
		ПроведениеРасчетов.ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Истина, Отказ, Заголовок, ИспользуютсяНачисленияВВалюте, СоответствиеВалютныеСпособыРасчета);
	КонецЕсли;
	//vvv
	//для основного начисления не может быть в кадровом изменении действия ""Начать""
	Если ВыборкаПоСтрокамДокумента.ЗачетОтработанногоВремени ТОгда
		Если (ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Начать) И Не (РольДоступна("ПолныеПрава")) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не может быть действия ""Начать""!", Отказ, Заголовок);
		КонецЕсли;		
	КонецЕсли;	
	Если ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Изменить И ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодЗавершения) Тогда
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчетаЗавершения) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не может быть действия ""Изменить""!", Отказ, Заголовок);
		КонецЕсли;	
	КонецЕсли;
	//
	
	// проверка на существование работника в табличной части "РаботникиОрганизации"
	Если ВыборкаПоСтрокамДокумента.Период = NULL Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "данный работник не введен в приказ - по нему не могут быть введены начисления!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.Период = ВыборкаПоСтрокамДокумента.ДатаДвижения Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "на дату "+ ВыборкаПоСтрокамДокумента.Период + " изменение начисления уже зарегистрировано документом " + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!", Отказ, Заголовок);
	КонецЕсли;
	
	// Двойные строки
	Если Не НетВР и Не НетСотрудника и ВыборкаПоСтрокамДокумента.ДвойнаяСтрока <> NULL Тогда
		Если ВыборкаПоСтрокамДокумента.ОсновноеНачисление Тогда
			СтрокаСообщениеОбОшибке = "основное начисление работника следует редактировать в одной строке (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
		Иначе
			СтрокаСообщениеОбОшибке = "работнику не может быть назначено одно и тоже начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
		КонецЕсли;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;

		
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления

Процедура ПроверитьЗаполнениеСтрокиПовышений(ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ТабличнаяЧасть)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части """+ ТабличнаяЧасть +""": ";
 	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран работник!", Отказ, Заголовок);
	КонецЕсли;

	НетДатыНачала = Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);			
	Если НетДатыНачала Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "нет даты начала!", Отказ, Заголовок);
	КонецЕсли;
	
	НетКоэффициент = Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Коэффициент);			
	Если НетКоэффициент Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "нет коэффициента!", Отказ, Заголовок);
	КонецЕсли;
	
	НетДействие = Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Действие);			
	Если НетДействие Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано дейтсвие!", Отказ, Заголовок);
	КонецЕсли;

	НетРазмер = Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Размер);			
	Если НетРазмер Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан размер!", Отказ, Заголовок);
	КонецЕсли;

    Если ВыборкаПоСтрокамДокумента.ДвойнаяСтрока <> NULL Тогда
		СтрокаСообщениеОбОшибке = "работнику не может быть назначено одно и тоже повышение дважды (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
 
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()


// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента,    ВыборкаПоСтрокамДокумента, СтруктураПараметров = "")
	
	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		// отразим новое место работы
		//vvv добавим условие
		Если ВыборкаПоСтрокамДокумента.ДвижениеПоРаботнику Тогда
		//
			Движение = Движения.РаботникиОрганизаций.Добавить();
			
			// Свойства
			Движение.Период						= ВыборкаПоСтрокамДокумента.ДатаНачала;
			
			// Измерения
			Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			
			// Ресурсы
			Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
			Движение.Должность					= ВыборкаПоСтрокамДокумента.Должность;
			Движение.ЗанимаемыхСтавок			= ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок;
			Движение.ГрафикРаботы				= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
			//vvv
			Движение.КатегорияДолжности			= ВыборкаПоСтрокамДокумента.КатегорияДолжности;
			Движение.Автомобиль					= ВыборкаПоСтрокамДокумента.Автомобиль;
			Движение.Классность					= ВыборкаПоСтрокамДокумента.Классность;
			Движение.ТабельУчетаОрганизации		= ВыборкаПоСтрокамДокумента.ТабельУчетаОрганизации;
			Движение.ВидУчетаВремени			= ВыборкаПоСтрокамДокумента.ВидУчетаВремени;
			Движение.ТабельныйНомер             = ВыборкаПоСтрокамДокумента.ТабельныйНомер;
			Движение.НомерПриказа				= ВыборкаПоСтрокамДокумента.НомерПриказа;
			Движение.ДатаПриказа     	        = ВыборкаПоСтрокамДокумента.ДатаПриказа;
			Движение.ПричинаКадровогоПеремещения = ВыборкаПоСтрокамДокумента.ПричинаКадровогоПеремещения;
			//
			Если НЕ ВыборкаПоСтрокамДокумента.БезЕТС Тогда
				Движение.РазрядЕТС                  = ВыборкаПоСтрокамДокумента.РазрядЕТС; //РБ
				Движение.КоэффициентЕТС             = ВыборкаПоСтрокамДокумента.КоэффициентЕТС; //РБ
				Движение.ПовышенныйКоэффициентЕТС   = ВыборкаПоСтрокамДокумента.ПовышенныйКоэффициентЕТС; //РБ
				Движение.ИтоговоеПовышениеПоИнструкции = ВыборкаПоСтрокамДокумента.ИтоговоеПовышениеПоИнструкции; //РБ
				Движение.ТарифнаяСтавкаПервогоРазряда  = ВыборкаПоСтрокамДокумента.ТарифнаяСтавкаПервогоРазряда; //РБ
        		Движение.БезЕТС				= ВыборкаПоСтрокамДокумента.БезЕТС;//РБ 
			Иначе
				Движение.БезЕТС				= ВыборкаПоСтрокамДокумента.БезЕТС;//РБ 
			КонецЕсли;
	
	   

			Движение.УсловияТрудаИзмерение		   = ВыборкаПоСтрокамДокумента.УсловияТрудаИзмерение; //РБ
			Движение.ВидДеятельностиИзмерение	   = ВыборкаПоСтрокамДокумента.ВидДеятельностиИзмерение; //РБ
			Движение.Категория                  = ВыборкаПоСтрокамДокумента.Категория; //РБ

			
			// Реквизиты
			Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.Перемещение;
			Движение.ОбособленноеПодразделение	= ВыборкаПоСтрокамДокумента.ОрганизацияПодразделения;
		
		
				
		
			Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
				
				//vvv
				Если НЕ ВыборкаПоСтрокамДокумента.НапомнитьПоЗавершении Тогда
					
					// вернем прежние данные по прежнему месту работы
					// Свойства
					Движение.ПериодЗавершения						= ВыборкаПоСтрокамДокумента.ДатаОкончания + мДлинаСуток;
					
					// Измерения
					Движение.Сотрудник								= ВыборкаПоСтрокамДокумента.Сотрудник;
					Движение.Организация							= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
					
					// Ресурсы
					Движение.ПодразделениеОрганизацииЗавершения		= ВыборкаПоСтрокамДокумента.ПрежнееПодразделение;
					Движение.ДолжностьЗавершения					= ВыборкаПоСтрокамДокумента.ПрежняяДолжность;
					Движение.АвтомобильЗавершения					= ВыборкаПоСтрокамДокумента.ПрежнийАвтомобиль;
					Движение.ЗанимаемыхСтавокЗавершения				= ВыборкаПоСтрокамДокумента.ПрежняяСтавка;
					Движение.ГрафикРаботыЗавершения					= ВыборкаПоСтрокамДокумента.ПрежнийГрафикРаботы;
					Движение.ПричинаИзмененияСостоянияЗавершения	= Перечисления.ПричиныИзмененияСостояния.Перемещение;
					Движение.ОбособленноеПодразделениеЗавершения	= ВыборкаПоСтрокамДокумента.ПрежняяОрганизация;
					Движение.ТабельУчетаОрганизацииЗавершения	    = ВыборкаПоСтрокамДокумента.ПрежнийТабель;
					Движение.КатегорияДолжностиЗавершения	   		= ВыборкаПоСтрокамДокумента.ПрежняяКатегорияДолжности;
					Движение.РазрядЕТСЗавершения	   				= ВыборкаПоСтрокамДокумента.ПрежнийРазрядЕТС;
					Движение.КоэффициентЕТСЗавершения	   			= ВыборкаПоСтрокамДокумента.ПрежнийКоэффициентЕТС;
					
				Иначе
				//	
					Движение = Движения.НамеченныеСобытияПоПерсоналу.Добавить();
					
					// Свойства
					Движение.Период						= ВыборкаПоСтрокамДокумента.ДатаОкончания + мДлинаСуток;
						
					// Измерения
					Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
					Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
					Движение.ДатаИзменения				= ВыборкаПоСтрокамДокумента.ДатаОкончания + мДлинаСуток;
					Движение.ПланируемоеСобытие			= Перечисления.НамеченныеСобытияПоПерсоналу.Перемещение;
						
					// Реквизиты
					Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
					Движение.Должность					= ВыборкаПоСтрокамДокумента.Должность;
					Движение.ГрафикРаботы				= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
					Движение.ЗанимаемыхСтавок			= ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок;
					Движение.ЗаниматьСтавку				= Истина;
				//vvv
				КонецЕсли;
		    	//
			КонецЕсли;
		//vvv
		//поменяем табельный номер, если надо
		Если (СокрЛП(ВыборкаПоСтрокамДокумента.ТабельныйНомер)<>"") и (СокрЛП(ВыборкаПоСтрокамДокумента.ТабельныйНомер)<>ВыборкаПоСтрокамДокумента.Сотрудник.Код) Тогда
			СотрудникОбъект=ВыборкаПоСтрокамДокумента.Сотрудник.ПолучитьОбъект();
			СотрудникОбъект.Код=СокрЛП(ВыборкаПоСтрокамДокумента.ТабельныйНомер);
			СотрудникОбъект.Записать();
		КонецЕсли;
		КонецЕсли;
		//	
		
		//РБ н
		// Движения по регистру "ТарифныеСтавкиработниковОрганизации"
		//vvv Добавим условие
		Если ВыборкаПоСтрокамДокумента.ДвижениеПоТарифнымСтавкам Тогда
			Движение = Движения.ТарифныеСтавкиРаботниковОрганизации.Добавить();
			// Свойства
			Движение.Период                     = ВыборкаПоСтрокамДокумента.ДатаНачала;
			// Измерения
			Движение.Сотрудник                  = ВыборкаПоСтрокамДокумента.Сотрудник;
			Движение.Организация   		    	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			
			// Ресурсы
			Если НЕ ВыборкаПоСтрокамДокумента.БезЕТС Тогда
	      		Движение.Ставка          				 = ВыборкаПоСтрокамДокумента.МесячнаяТарифнаяСтавка;
				Движение.ПроцентПоКонтракту           	 = ВыборкаПоСтрокамДокумента.ПроцентПоКонтракту;
				Движение.ТарифнаяСтавка 				 = ВыборкаПоСтрокамДокумента.ТарифнаяСтавка;
				Движение.ТарифнаяСПовышениемПоИнструкции = ВыборкаПоСтрокамДокумента.ТарифныйСПовышениемПоИнструкции;
			Иначе
				Движение.Ставка = ВыборкаПоСтрокамДокумента.МесячнаяТарифнаяСтавка;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
				Если НЕ ВыборкаПоСтрокамДокумента.НапомнитьПоЗавершении Тогда
					// вернем прежние тарифные ставки по прежнему месту работы
					// Свойства
					Движение.ПериодЗавершения						= ВыборкаПоСтрокамДокумента.ДатаОкончания + мДлинаСуток;
					Если НЕ ВыборкаПоСтрокамДокумента.БезЕТС Тогда
	      				Движение.СтавкаЗавершения  				           = ВыборкаПоСтрокамДокумента.ПрежняяМесячнаяТарифнаяСтавка;
						Движение.ПроцентПоКонтрактуЗавершения  	 		   = ВыборкаПоСтрокамДокумента.ПроцентПоКонтракту;
						Движение.ТарифнаяСтавкаЗавершения		 		   = ВыборкаПоСтрокамДокумента.ПрежняяТарифнаяСтавка;
						Движение.ТарифнаяСПовышениемПоИнструкцииЗавершения = ВыборкаПоСтрокамДокумента.ТарифныйСПовышениемПоИнструкции;
					Иначе
						Движение.СтавкаЗаершения = ВыборкаПоСтрокамДокумента.ПрежняяМесячнаяТарифнаяСтавка;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
	    //vvv
		КонецЕсли;
		//
		//РБ к
		
		//vvv
		// Движения по регистру "ТарифныеСтавкиВодителейОрганизации"
		//Если ((ВыборкаПоСтрокамДокумента.Должность=Справочники.ДолжностиОрганизаций.ВодительАвтомобиля) или (ВыборкаПоСтрокамДокумента.ПрежняяДолжность=Справочники.ДолжностиОрганизаций.ВодительАвтомобиля) или (ВыборкаПоСтрокамДокумента.ЭтоВодитель)) и (РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Получить(Новый Структура("Организация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация)).ПорядокИзмененияРабочегоМестаВодителей=Перечисления.ПорядокИзмененияРабочегоМестаВодителей.ТабельУчетаРабочегоВремени) ТОгда
		Если (РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Получить(Новый Структура("Организация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация)).ПорядокИзмененияРабочегоМестаВодителей=Перечисления.ПорядокИзмененияРабочегоМестаВодителей.ТабельУчетаРабочегоВремени) ТОгда
			
			Если ВыборкаПоСтрокамДокумента.ДвижениеПоТарифнымСтавкамВодителя Тогда
				
				Движение = Движения.ТарифныеСтавкиВодителейОрганизации.Добавить();
				// Свойства
				Движение.Период               = ВыборкаПоСтрокамДокумента.ДатаНачала;
				// Измерения
				Движение.Сотрудник            = ВыборкаПоСтрокамДокумента.Сотрудник;
				Движение.Организация   		  = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			
			
				// Ресурсы
				Движение.ТарифнаяСтавка  	  = ВыборкаПоСтрокамДокумента.ТарифнаяСтавка;
				Движение.Ставка               = ВыборкаПоСтрокамДокумента.МесячнаяТарифнаяСтавка;
				Движение.ТарифнаяСтавкаРемонт = ВыборкаПоСтрокамДокумента.ТарифнаяСтавкаРемонт;
				Движение.СтавкаРемонт         = ВыборкаПоСтрокамДокумента.МесячнаяТарифнаяСтавкаРемонт;
				
				Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
					Если НЕ ВыборкаПоСтрокамДокумента.НапомнитьПоЗавершении Тогда
						// Свойства
						Движение.ПериодЗавершения               = ВыборкаПоСтрокамДокумента.ДатаОкончания + мДлинаСуток;
						// Измерения
						Движение.Сотрудник            = ВыборкаПоСтрокамДокумента.Сотрудник;
						Движение.Организация   		  = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			
			
						// Ресурсы
						Движение.ТарифнаяСтавкаЗавершения       = ВыборкаПоСтрокамДокумента.ПрежняяТарифнаяСтавка;
						Движение.СтавкаЗавершения      	        = ВыборкаПоСтрокамДокумента.ПрежняяМесячнаяТарифнаяСтавка;
						Движение.ТарифнаяСтавкаРемонтЗавершения = ВыборкаПоСтрокамДокумента.ПрежняяТарифнаяСтавкаРемонт;
						Движение.СтавкаРемонтЗавершения         = ВыборкаПоСтрокамДокумента.ПрежняяМесячнаяТарифнаяСтавкаРемонт;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Движения по регистру "ВодителиОрганизации"
			Если ВыборкаПоСтрокамДокумента.ДвижениеПоВодителю Тогда
				
				Движение = Движения.ВодителиОрганизаций.Добавить();
				
				// Свойства
				Движение.Период						= ВыборкаПоСтрокамДокумента.ДатаНачала;
				
				// Измерения
				Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
				// Ресурсы
				Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;			
				Движение.ТабельУчетаОрганизации		= ВыборкаПоСтрокамДокумента.ТабельУчетаОрганизации; 
				Движение.Автомобиль					= ВыборкаПоСтрокамДокумента.Автомобиль; 
				Движение.Классность					= ВыборкаПоСтрокамДокумента.Классность; 
				//

				////////////////////////////////////////////////////////////////////////////////////
				// Реквизиты
				Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.Перемещение;
				Движение.ОбособленноеПодразделение	= ВыборкаПоСтрокамДокумента.ОрганизацияПодразделения;
			    	
				Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
				
					Если НЕ ВыборкаПоСтрокамДокумента.НапомнитьПоЗавершении Тогда
					
						// вернем прежние данные по прежнему месту работы
						// Свойства
						Движение.ПериодЗавершения						= ВыборкаПоСтрокамДокумента.ДатаОкончания + мДлинаСуток;
				
						// Измерения
						Движение.Сотрудник								= ВыборкаПоСтрокамДокумента.Сотрудник;
						Движение.Организация							= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				 		
						// Ресурсы
						Движение.ПодразделениеОрганизацииЗавершения		= ВыборкаПоСтрокамДокумента.ПрежнееПодразделение;
						Движение.ПричинаИзмененияСостоянияЗавершения	= Перечисления.ПричиныИзмененияСостояния.Перемещение;
						Движение.ОбособленноеПодразделениеЗавершения	= ВыборкаПоСтрокамДокумента.ПрежняяОрганизация;
						Движение.ТабельУчетаОрганизацииЗавершения	    = ВыборкаПоСтрокамДокумента.ПрежнийТабель;
						Движение.АвтомобильЗавершения	                = ВыборкаПоСтрокамДокумента.ПрежнийАвтомобиль;
					
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
		//
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

Процедура ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса)
	
	Если ВыборкаСтрокЗапроса.Действие = Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
		Возврат;
	КонецЕсли;
	
	//vvv убираем отпуск по уходу из движений
	Если ВыборкаСтрокЗапроса.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты И ВыборкаСтрокЗапроса.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
		Возврат;
	КонецЕсли;
	//
	
	// Движения по регистру "ПлановыеНачисленияРаботниковОрганизаций"
	ПроцедурыУправленияПерсоналом.СформироватьДвижениеПоПлановымНачислениям(Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить(), ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
	
	// Движения по регистру "КоэффициентИндексацииЗаработка" - отразим факт индексации заработка
	Если ВыборкаПоШапкеДокумента.ИндексацияЗаработка И ВыборкаСтрокЗапроса.ОсновноеНачисление Тогда
		
		// определим форму оплаты
		Если ВыборкаСтрокЗапроса.СпособРасчета = ВыборкаСтрокЗапроса.СпособРасчетаЗавершения Тогда
			ФормаОплатыДо = ВыборкаСтрокЗапроса.СпособРасчета;
			ФормаОплатыПосле = ВыборкаСтрокЗапроса.СпособРасчета;
		Иначе
			Если ВыборкаСтрокЗапроса.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням 
				Или ВыборкаСтрокЗапроса.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
				ФормаОплатыДо = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням
			ИначеЕсли ВыборкаСтрокЗапроса.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок 
				Или ВыборкаСтрокЗапроса.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке Тогда
				ФормаОплатыДо = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке
			Иначе
				ФормаОплатыДо = ВыборкаСтрокЗапроса.СпособРасчета;
			КонецЕсли;
			Если ВыборкаСтрокЗапроса.СпособРасчетаЗавершения = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням 
				Или ВыборкаСтрокЗапроса.СпособРасчетаЗавершения = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
				ФормаОплатыПосле = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням
			ИначеЕсли ВыборкаСтрокЗапроса.СпособРасчетаЗавершения = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок 
				Или ВыборкаСтрокЗапроса.СпособРасчетаЗавершения = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке Тогда
				ФормаОплатыПосле = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке
			Иначе
				ФормаОплатыПосле = ВыборкаСтрокЗапроса.СпособРасчетаЗавершения;
			КонецЕсли;
		КонецЕсли;
		
		//Если ФормаОплатыДо <> ФормаОплатыПосле Тогда
		//	ТекстСообщения = "Сотруднику " + Строка(ВыборкаСтрокЗапроса.Сотрудник) + " изменена форма оплаты труда; коэффициент индексации заработка не зарегистрирован! Для регистрации коэффициента индексации можно воспользоваться документом ""Ввод коэффициентов индексации заработка""";
		//	Если ЗначениеЗаполнено(Заголовок) Тогда
		//		ТекстСообщения = Заголовок + Символы.ПС + ТекстСообщения;
		//		Заголовок = "";
		//	КонецЕсли;
		//	ОбщегоНазначения.СообщитьИнформациюПользователю(ТекстСообщения);
		
		Если ВыборкаСтрокЗапроса.Показатель1Завершения > 0 И ВыборкаСтрокЗапроса.Показатель1 > ВыборкаСтрокЗапроса.Показатель1Завершения Тогда
			Движение = Движения.КоэффициентИндексацииЗаработка.Добавить();
				
				// Свойства
				Движение.Период						= ВыборкаСтрокЗапроса.Период;
				
				// Измерения
				Движение.Сотрудник					= ВыборкаСтрокЗапроса.Сотрудник;
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				
				// Ресурсы
				Движение.Коэффициент				= ?(ВыборкаСтрокЗапроса.Показатель1Завершения = 0, 0, ВыборкаСтрокЗапроса.Показатель1 / ВыборкаСтрокЗапроса.Показатель1Завершения);
			КонецЕсли;
			// Движения на дату завершения
			Если ЗначениеЗаполнено(ВыборкаСтрокЗапроса.ПериодЗавершения) Тогда
				
				Если ВыборкаСтрокЗапроса.Показатель1 > 0 И ВыборкаСтрокЗапроса.Показатель1Завершения > ВыборкаСтрокЗапроса.Показатель1 Тогда
					Движение = Движения.КоэффициентИндексацииЗаработка.Добавить();
					
					// Свойства
					Движение.Период						= ВыборкаСтрокЗапроса.ПериодЗавершения;
					
					// Измерения
					Движение.Сотрудник					= ВыборкаСтрокЗапроса.Сотрудник;
					Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
					
					// Ресурсы
					Движение.Коэффициент				= ?(ВыборкаСтрокЗапроса.Показатель1 =0, 0, ВыборкаСтрокЗапроса.Показатель1Завершения / ВыборкаСтрокЗапроса.Показатель1);
				КонецЕсли;
				
			КонецЕсли;
		
	КонецЕсли;

			
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоНачислениям()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента,ВыборкаПоСтрокамДокумента, СтруктураПараметров = "")
	
	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		//vvv
		Если ВыборкаПоСтрокамДокумента.ДвижениеПоЗанятымЕдиницам ТОгда
		//
			ПрежняяСтавка			= ВыборкаПоСтрокамДокумента.ПрежняяСтавка;
			ПрежнееПодразделение	= ВыборкаПоСтрокамДокумента.ПрежнееПодразделение; 
			ПрежняяДолжность		= ВыборкаПоСтрокамДокумента.ПрежняяДолжность;
			ПрежнийУсловияТруда     = ВыборкаПоСтрокамДокумента.ПрежнийУсловияТрудаИзмерение;
			ПрежнийВидДеятельностиИзмерение = ВыборкаПоСтрокамДокумента.ПрежнийВидДеятельностиИзмерение;
			// по прежнему месту работы освободим занимаемые ранее ставки
			Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
			
			// Свойства
			Движение.Период							= ВыборкаПоСтрокамДокумента.ДатаНачала;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.ПодразделениеОрганизации		= ПрежнееПодразделение;
			Движение.Должность						= ПрежняяДолжность;
			Движение.УсловияТрудаИзмерение		    = ВыборкаПоСтрокамДокумента.ПрежнийУсловияТрудаИзмерение;
			Движение.ВидДеятельностиИзмерение		= ВыборкаПоСтрокамДокумента.ПрежнийВидДеятельностиИзмерение;
			// Ресурсы
			Движение.КоличествоСтавок				= ПрежняяСтавка; 
			
			// по новому месту работы займем указанные ставки
			Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
			
			// Свойства
			Движение.Период							= ВыборкаПоСтрокамДокумента.ДатаНачала;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
				
			// Измерения
			Движение.ПодразделениеОрганизации		= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
			Движение.Должность						= ВыборкаПоСтрокамДокумента.Должность;
			Движение.УсловияТрудаИзмерение		    = ВыборкаПоСтрокамДокумента.УсловияТрудаИзмерение;
			Движение.ВидДеятельностиИзмерение		= ВыборкаПоСтрокамДокумента.ВидДеятельностиИзмерение;
			// Ресурсы
			Движение.КоличествоСтавок				= ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок; 
		    //vvv раскомментируем
			Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания)
				и НЕ ВыборкаПоСтрокамДокумента.НапомнитьПоЗавершении Тогда
			
				// по прежнему месту работы займем временно освобожденные ставки
				Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
			
				// Свойства
				Движение.Период						= ВыборкаПоСтрокамДокумента.ДатаОкончания + мДлинаСуток;
				Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
				
				// Измерения
				Движение.ПодразделениеОрганизации	= ПрежнееПодразделение;
				Движение.Должность					= ПрежняяДолжность;
				//vvv
				Движение.УсловияТрудаИзмерение		= ПрежнийУсловияТруда;
				Движение.ВидДеятельностиИзмерение	= ПрежнийВидДеятельностиИзмерение;	
				//
				
				// Ресурсы
				Движение.КоличествоСтавок			= ПрежняяСтавка; 
				
				// по новому месту работы освободим временно занимавшиеся ставки
				Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
				
				// Свойства
				Движение.Период						= ВыборкаПоСтрокамДокумента.ДатаОкончания + мДлинаСуток;
				Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
				
				// Измерения
				Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
				Движение.Должность					= ВыборкаПоСтрокамДокумента.Должность;
				//vvv
				Движение.УсловияТрудаИзмерение		= ВыборкаПоСтрокамДокумента.УсловияТрудаИзмерение;
				Движение.ВидДеятельностиИзмерение	= ВыборкаПоСтрокамДокумента.ВидДеятельностиИзмерение;	
				//
				
				// Ресурсы
				Движение.КоличествоСтавок			= ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок; 
				
			КонецЕсли;
		//vvv
		КонецЕсли;
	    //
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

Процедура ДобавитьСтрокуВДвиженияПоКоэффициентам(ВыборкаПоКоэфициентам)
	
	Движение = Движения.КоэфПовышенияТО.Добавить();
	
	Движение.Период = ВыборкаПоКоэфициентам.ДатаНачала;
	Движение.Сотрудник = ВыборкаПоКоэфициентам.Сотрудник;
	Движение.Коэффициент = ВыборкаПоКоэфициентам.Коэффициент; 
	
	Движение.Размер = ВыборкаПоКоэфициентам.Размер;
	Движение.Действие = ВыборкаПоКоэфициентам.Действие;
КонецПроцедуры

Процедура ДобавитьСтрокуВДвиженияПоПовышениям(ВыборкаПоПовышениям)
	
	Движение = Движения.ПовышенияПоИнструкции.Добавить();
	
	Движение.Период = ВыборкаПоПовышениям.ДатаНачала;
	Движение.Сотрудник = ВыборкаПоПовышениям.Сотрудник;
	Движение.Коэффициент = ВыборкаПоПовышениям.Коэффициент; 
	
	Движение.Размер = ВыборкаПоПовышениям.Размер;
	Движение.Действие = ВыборкаПоПовышениям.Действие;

КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	СоответствиеВалютныеСпособыРасчета = ПроведениеРасчетов.ПолучитьСоответствиеСпособовРасчетаТребующихВалюту();
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Получение учетной политики по персоналу организации
			УчетнаяПолитикаПоПерсоналуОрганизации	= глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
			ПроверкаШтатногоРасписания				= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналуОрганизации, Организация, "ПроверкаШтатногоРасписания");

			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники	= СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, Режим, ПроверкаШтатногоРасписания);
			ВыборкаПоСтрокамДокумента	= РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания);

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента,ВыборкаПоСтрокамДокумента);
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);

				КонецЕсли;

			КонецЦикла;

			// выполним выборку по табличной части основных начислений
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоНачисления(ПроверкаШтатногоРасписания).Выбрать();

			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания);
				Если не Отказ Тогда
					ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
				КонецЕсли;
				
			КонецЦикла;
			
				
			ВыборкаПоКоэфициентам = СформироватьЗапросПоКоэфПовышенияТО(ВыборкаПоШапкеДокумента).Выбрать();
				
			Пока ВыборкаПоКоэфициентам.Следующий() Цикл
				ПроверитьЗаполнениеСтрокиПовышений(ВыборкаПоКоэфициентам, Отказ, Заголовок, "Коэффициенты повышения по ЕТС");
				Если Не Отказ Тогда
					ДобавитьСтрокуВДвиженияПоКоэффициентам(ВыборкаПоКоэфициентам);
				КонецЕсли;
			КонецЦикла;
			
			ВыборкаПоПовышениям  = СформироватьЗапросПоПовышенияПоИнструкции(ВыборкаПоШапкеДокумента).Выбрать();
			
			Пока ВыборкаПоПовышениям.Следующий() Цикл
				ПроверитьЗаполнениеСтрокиПовышений(ВыборкаПоПовышениям, Отказ, Заголовок, "Повышения по инструкции");
                Если Не Отказ Тогда
                	ДобавитьСтрокуВДвиженияПоПовышениям(ВыборкаПоПовышениям);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ОбщегоНазначения.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
	// получить новый номер документа по совокупности кадровых документов
	ПроцедурыУправленияПерсоналом.ПриУстановкеНовогоНомераКадровогоДокумента(СтандартнаяОбработка, ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ЕдиныйНумераторКадровыхДокументов"), Номер, Префикс, Дата);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.КадровыеПриказыОрганизации.Добавить();
		ЗаписьРегистрации.Период      = Дата;
		ЗаписьРегистрации.Регистратор = Ссылка;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// проверим уникальность номера с точки зрения кадровой нумерации
	ПроцедурыУправленияПерсоналом.ПроверкаУникальностиНомераКадровогоДокумента(ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ЕдиныйНумераторКадровыхДокументов"), Номер, Дата, Ссылка);

КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	
	Если ТипОснования = Тип("ДокументСсылка.КадровоеПеремещение") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Основание.Проведен Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Основание",		Основание);
			Запрос.УстановитьПараметр("Организация",	Организация);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КадровоеПеремещениеРаботники.Сотрудник,
			|	КадровоеПеремещениеРаботники.ФизЛицо,
			|	КадровоеПеремещениеРаботники.ДатаНачала,
			|	КадровоеПеремещениеРаботники.ДатаОкончания,
			|	КадровоеПеремещениеРаботники.НапомнитьПоЗавершении,
			|	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации,
			|	КадровоеПеремещениеРаботники.НоваяДолжность КАК Должность,
			|	КадровоеПеремещениеРаботники.ЗанимаемыхСтавок,
			|	КадровоеПеремещениеРаботники.ГрафикРаботы
			|ИЗ
			|	Документ.КадровоеПеремещение.Работники КАК КадровоеПеремещениеРаботники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
			|		ПО КадровоеПеремещениеРаботники.НовоеПодразделение = СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение
			|			И (СоответствиеПодразделенийИПодразделенийОрганизаций.Организация = &Организация)
			|ГДЕ
			|	КадровоеПеремещениеРаботники.Ссылка = &Основание";
			
			РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
		
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Если Основание.ВидДоговора <> Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			Возврат;
		КонецЕсли;
		
		Если Не Основание.ОбособленноеПодразделение.Пустая() Тогда
			Организация = Основание.ОбособленноеПодразделение;
		Иначе
			Организация = Основание.Организация;
		КонецЕсли;
		
		НоваяСтрока = РаботникиОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Основание);
		НоваяСтрока.Сотрудник = Основание;
		НоваяСтрока.ПроцентПоКонтракту = Основание.ПроцентПовышения;
		НоваяСтрока.МесячнаяТарифнаяСтавка = Основание.РасчетнаяТарифнаяСтавка;
		
		ДобавитьСтрокиНачисленийПоРаботнику(Основание);
		
		Если ЗначениеЗаполнено(Основание.ВидРасчета) тогда

			НовоеНачисление =  ОсновныеНачисления.Добавить();
			НовоеНачисление.Сотрудник = Основание;
			НовоеНачисление.Действие = Перечисления.ВидыДействияСНачислением.Изменить;
			НовоеНачисление.ВидРасчета = Основание.ВидРасчета;
			Если Основание.ВидРасчета.СпособРасчета  = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке тогда
				ДнейВГоду = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(ОбщегоНазначения.ПолучитьРабочуюДату(),Новый Структура("ВидПараметра",Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаДней));
				Если ЗначениеЗаполнено(ДнейВГоду) ИЛИ ДнейВГоду.Размер <> 0 тогда
					НовоеНачисление.Показатель1 = ОбщегоНазначения.ОкруглитьПоВалюте(Основание.РасчетнаяТарифнаяСтавка/?(ДнейВГоду.Размер=0,1,ДнейВГоду.Размер), Константы.ВалютаРегламентированногоУчета.Получить());
				Иначе
					Сообщить("Невозможно рассчиать дневную ставку. Не определен параметр среднемесячного количества рабочих дней");
				КонецЕсли;
			ИначеЕсли Основание.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке ИЛИ Основание.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок тогда
				ЧасовВГоду = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(ОбщегоНазначения.ПолучитьРабочуюДату(),Новый Структура("ВидПараметра",Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаЧасов));
				Если ЗначениеЗаполнено(ЧасовВГоду) ИЛИ ЧасовВГоду.Размер <> 0 тогда
					НовоеНачисление.Показатель1 = ОбщегоНазначения.ОкруглитьПоВалюте(Основание.РасчетнаяТарифнаяСтавка/?(ЧасовВГоду.Размер=0,1,ЧасовВГоду.Размер), Константы.ВалютаРегламентированногоУчета.Получить());
				Иначе
					Сообщить("Невозможно рассчиать часовую ставку. Не определен параметр среднемесячного количества рабочих часов");
				КонецЕсли;
			Иначе
				НовоеНачисление.Показатель1	  = Основание.РасчетнаяТарифнаяСтавка;
			КонецЕсли;
		Конецесли;
		
		ДобавитьСтрокиКоэфПовышенияТО(Основание, Основание.ДатаНачала);
		ДобавитьСтрокиПовышенияПоИнструкции(Основание, Основание.ДатаНачала);
		
		Если Основание.ПерсональныеНадбавки.Количество() > 0 тогда
			Для каждого СтрокиНадбавка из Основание.ПерсональныеНадбавки цикл
				НовоеНачисление =  ОсновныеНачисления.Добавить();
				НовоеНачисление.Сотрудник = Основание;
				НовоеНачисление.Действие = Перечисления.ВидыДействияСНачислением.Изменить;
				НовоеНачисление.ВидРасчета = СтрокиНадбавка.Надбавка;
				НовоеНачисление.Показатель1	  = СтрокиНадбавка.Показатель1;
			КонецЦикла;
		КонецЕсли;
		
		
		Для Каждого Строка из Основание.КоэфПовышенияТО Цикл
			НоваяСтрокаКоэф = КоэфПовышенияТО.Добавить();
			НоваяСтрокаКоэф.Действие = Перечисления.ВидыДействияСНачислением.Начать;
			НоваяСтрокаКоэф.Сотрудник = Основание;
			НоваяСтрокаКоэф.Коэффициент = Строка.Коэффициент;
			НоваяСтрокаКоэф.Размер = Строка.Размер;
		КонецЦикла;
		
		Для Каждого Строка из Основание.ПовышенияПоИнструкции Цикл
			НоваяСтрокаПовышенияПоИнструкции = ПовышенияПоИнструкции.Добавить();
			НоваяСтрокаПовышенияПоИнструкции.Действие = Перечисления.ВидыДействияСНачислением.Начать;
			НоваяСтрокаПовышенияПоИнструкции.Сотрудник = Основание;
			НоваяСтрокаПовышенияПоИнструкции.Коэффициент = Строка.Коэффициент;
			НоваяСтрокаПовышенияПоИнструкции.Размер = Строка.Размер;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;


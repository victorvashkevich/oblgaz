
Перем мДлинаСуток;
Перем СоответствиеВалютныеСпособыРасчета;
Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// предназначена для заполнения табличной части 
// Параметры:
//	Основание - передается объект-основание
// Возвращаемое значение: нет
//
Процедура ЗаполнитьПоОснованию(Основание) Экспорт
	
	ДокументОснование = Основание;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.ДатаИзменения), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаИзменения
	|ИЗ
	|	Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком КАК ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком
	|ГДЕ
	|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование",Основание);
	Выборка = Запрос.Выполнить().Выбрать();
	ДатаПоследнегоИзменения = '00010101';
	Если Выборка.Следующий() Тогда
		ДатаПоследнегоИзменения = Выборка.ДатаИзменения
	КонецЕсли;
	
	СтрокаРеквизитов = "";
	Если Действие.Пустая() Тогда // документ заполняется впервые
		СтрокаРеквизитов = "Организация,Сотрудник,Физлицо"; 
		ДатаИзменения = Макс(ДатаПоследнегоИзменения + 86400, ОбщегоНазначения.ПолучитьРабочуюДату());
		Действие = Перечисления.ВидыДействияСНачислением.Изменить;
	ИначеЕсли ДатаИзменения = '00010101' Тогда
		ДатаИзменения = Макс(ДатаИзменения + 86400, Дата)
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ДатаПоследнегоИзменения) Тогда
	//	
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	МАКСИМУМ(ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.ДатаИзменения) КАК ДатаИзменения
	//	|ИЗ
	//	|	Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком КАК ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком
	//	|ГДЕ
	//	|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.ДокументОснование = &ДокументОснование";
	//	
	//	СтрокаРеквизитов = СтрокаРеквизитов	+ ",ОсвобождатьСтавку";
	//		
	//КонецЕсли;
	
	Если Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
		СтрокаРеквизитов = СтрокаРеквизитов	
			+ ",ВыплачиватьПособиеДоПолутораЛет,ДатаОкончанияПособияДоПолутораЛет" 
			+ ",ВыплачиватьПособиеДоТрехЛет,ДатаОкончанияПособияДоТрехЛет"
			+ ",КоличествоДетей,КоличествоПервыхДетей"
			+ ",ВидРасчетаДоПолутораЛет,ВидРасчетаДоТрехЛет,ПроцентПособияДоПолутораЛет,ПроцентПособияДотрехЛет";
	//Иначе 
		//ВыплачиватьПособиеДоПолутораЛет = Ложь;
		//ВыплачиватьПособиеДоТрехЛет = Ложь;
		//ДатаОкончанияПособияДоПолутораЛет = '00010101';
		//ДатаОкончанияПособияДоТрехЛет = '00010101';
		//КоличествоДетей = 0;
		//КоличествоПервыхДетей = 0;
	КонецЕсли;
	
	СтрокаРеквизитов = СтрокаРеквизитов + ",ВидОперации";
	Если Не ПустаяСтрока(СтрокаРеквизитов) Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, СтрокаРеквизитов);
	КонецЕсли;
    	
КонецПроцедуры  // ЗаполнитьПоОснованию

// Выполняет заполнение таблицы плановых начислений и удержаний 
Процедура ЗаполнитьПлановыеНачисленияУдержания() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", ДокументОснование);
	//ОтпускаПоУходу = Новый Массив;
	//ОтпускаПоУходу.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты);
	//ОтпускаПоУходу.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет);
	//ОтпускаПоУходу.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет);
	ОтпускаПоУходу = Новый Массив;
		
	если ВидОперации = Перечисления.ВидыОперацийОтпускаПоУходу.ОтпускПоУходуЗаРебенком тогда
			
		ОтпускаПоУходу.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты);
		ОтпускаПоУходу.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеМатериОдиночкедо1_5лет);
		ОтпускаПоУходу.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеМатериОдиночкеДо3Лет);
		ОтпускаПоУходу.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеНаРебенкаДо3Лет);
		ОтпускаПоУходу.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеНаРебенкаДо3ЛетНаВторого);
		ОтпускаПоУходу.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида);
      	ОтпускаПоУходу.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеНаРебенкаСНадбавкой40До3Лет);
		ОтпускаПоУходу.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеНеРабМатериНадб40До3Лет);
		ОтпускаПоУходу.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеНеРабМатериОдиночкеДо1_5Лет);
		ОтпускаПоУходу.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеНеРабМатериОдиночкеДо3Лет);
		ОтпускаПоУходу.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеНеРаботающейМатериДо3Лет);
		Запрос.УстановитьПараметр("ОтпускаПоУходу",ОтпускаПоУходу);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета,
		|	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник,
		|	ПлановыеНачисленияРаботниковОрганизаций.Показатель1,
		|	ПлановыеНачисленияРаботниковОрганизаций.Валюта1,
		|	ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд1,
		|	ПлановыеНачисленияРаботниковОрганизаций.Показатель2,
		|	ПлановыеНачисленияРаботниковОрганизаций.Валюта2,
		|	ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд2,
		|	ПлановыеНачисленияРаботниковОрганизаций.Показатель3,
		|	ПлановыеНачисленияРаботниковОрганизаций.Валюта3,
		|	ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд3,
		|	ПлановыеНачисленияРаботниковОрганизаций.Показатель4,
		|	ПлановыеНачисленияРаботниковОрганизаций.Валюта4,
		|	ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд4,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять) КАК Действие
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
		|ГДЕ
		|	ПлановыеНачисленияРаботниковОрганизаций.Регистратор = &Регистратор
		|	И (НЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение В (&ОтпускаПоУходу))";
		
		ОсновныеНачисления.Загрузить(Запрос.Выполнить().Выгрузить());
	
		// Удержания
		ПлановыеУдержания.Очистить();
		
		// Прекратим действующие до даты документа удержания работника
		
		Запрос.Текст = 
	    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	    |	СрезПлановыхУдержаний.ВидРасчета КАК ВидРасчета,
	    |	СрезПлановыхУдержаний.Показатель1 КАК Показатель1,
	    |	СрезПлановыхУдержаний.Валюта1 КАК Валюта1,
	    |	СрезПлановыхУдержаний.Показатель2 КАК Показатель2,
	    |	СрезПлановыхУдержаний.Валюта2 КАК Валюта2,	
	    |	СрезПлановыхУдержаний.Показатель3 КАК Показатель3,
	    |	СрезПлановыхУдержаний.Валюта3 КАК Валюта3,		
	    |	СрезПлановыхУдержаний.Показатель4 КАК Показатель4,
	    |	СрезПлановыхУдержаний.Валюта4 КАК Валюта4,
	    |	СрезПлановыхУдержаний.Показатель5 КАК Показатель5,
	    |	СрезПлановыхУдержаний.Валюта5 КАК Валюта5,	
	    |	СрезПлановыхУдержаний.Показатель6 КАК Показатель6,
	    |	СрезПлановыхУдержаний.Валюта6 КАК Валюта6,		
	    |	СрезПлановыхУдержаний.ДокументОснование КАК ДокументОснование,
	    |	ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять) КАК Действие
	    |ИЗ
	    |	РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК СрезПлановыхУдержаний
	    |ГДЕ
	    |	СрезПлановыхУдержаний.Регистратор = &Регистратор";
	
	ПлановыеУдержания.Загрузить(Запрос.Выполнить().Выгрузить());

		
	Иначе
		
		ЕжемесячныеПособия.Очистить();
		
		ОтпускаПоУходу.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеМатериОдиночкеДо1_5лет);
		ОтпускаПоУходу.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериОдиночкеДо1_5Лет);
		ОтпускаПоУходу.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеМатериОдиночкеДо3Лет);
		ОтпускаПоУходу.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3Лет);
		ОтпускаПоУходу.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеНаРебенкаДо3ЛетНаВторого);
		ОтпускаПоУходу.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида);
		ОтпускаПоУходу.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСНадбавкой40До3Лет);
		ОтпускаПоУходу.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериНадб40До3Лет);
		ОтпускаПоУходу.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериОдиночкеДо3Лет);
		ОтпускаПоУходу.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРаботающейМатериДо3Лет);
		ОтпускаПоУходу.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаВИЧ);
		ОтпускаПоУходу.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо18ЛетНадб40);
		ОтпускаПоУходу.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалида);
		ОтпускаПоУходу.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСтарше3Лет);
		ОтпускаПоУходу.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида);

		Запрос.УстановитьПараметр("ОтпускаПоУходу",ОтпускаПоУходу);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета,
		|	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник,
		|	ПлановыеНачисленияРаботниковОрганизаций.Показатель1,
		|	ПлановыеНачисленияРаботниковОрганизаций.Валюта1,
		|	ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд1,
		|	ПлановыеНачисленияРаботниковОрганизаций.Показатель2,
		|	ПлановыеНачисленияРаботниковОрганизаций.Валюта2,
		|	ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд2,
		|	ПлановыеНачисленияРаботниковОрганизаций.Показатель3,
		|	ПлановыеНачисленияРаботниковОрганизаций.Валюта3,
		|	ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд3,
		|	ПлановыеНачисленияРаботниковОрганизаций.Показатель4,
		|	ПлановыеНачисленияРаботниковОрганизаций.Валюта4,
		|	ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд4,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять) КАК Действие
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
		|ГДЕ
		|	ПлановыеНачисленияРаботниковОрганизаций.Регистратор = &Регистратор
		|	И (ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение.СпособРасчета В (&ОтпускаПоУходу))";
		
		ЕжемесячныеПособия.Загрузить(Запрос.Выполнить().Выгрузить());
	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Неопределено;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтпускПоУходуЗаРебенком.Дата,
	|	ОтпускПоУходуЗаРебенком.Организация,
	|	ВЫБОР
	|		КОГДА ОтпускПоУходуЗаРебенком.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ОтпускПоУходуЗаРебенком.Организация
	|		ИНАЧЕ ОтпускПоУходуЗаРебенком.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ОтпускПоУходуЗаРебенком.Ответственный,
	|	ОтпускПоУходуЗаРебенком.Ссылка,
	|	ОтпускПоУходуЗаРебенком.ДатаИзменения,
	|	ВЫБОР
	|		КОГДА ОтпускПоУходуЗаРебенком.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВнутреннийСовместитель,
	|	ОтпускПоУходуЗаРебенком.ДатаОкончанияПособияДоПолутораЛет,
	|	ОтпускПоУходуЗаРебенком.ДатаОкончанияПособияДоТрехЛет,
	|	ОтпускПоУходуЗаРебенком.ВыплачиватьПособиеДоПолутораЛет,
	|	ОтпускПоУходуЗаРебенком.ВыплачиватьПособиеДоТрехЛет,
	|	ОтпускПоУходуЗаРебенком.ДокументОснование.ДатаНачала КАК ДатаНачала,
	|	ОтпускПоУходуЗаРебенком.ДокументОснование.ДатаОкончания КАК ДатаОкончания,
	|	ОтпускПоУходуЗаРебенком.ДокументОснование.СреднедневнойЗаработок КАК СреднедневнойЗаработок,
	|	ВЫБОР
	|		КОГДА ОтпускПоУходуЗаРебенком.ДокументОснование.ВыплачиватьПособиеДоПолутораЛет
	|			ТОГДА ВЫБОР
	|					КОГДА ОтпускПоУходуЗаРебенком.ВыплачиватьПособиеДоПолутораЛет
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|				КОНЕЦ
	|		КОГДА ОтпускПоУходуЗаРебенком.ВыплачиватьПособиеДоПолутораЛет
	|			ТОГДА ВЫБОР
	|					КОГДА ОтпускПоУходуЗаРебенком.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
	|					ИНАЧЕ ОтпускПоУходуЗаРебенком.Действие
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять)
	|	КОНЕЦ КАК ДействиеСПособиемДоПолутораЛет,
	|	ВЫБОР
	|		КОГДА ОтпускПоУходуЗаРебенком.ДокументОснование.ВыплачиватьПособиеДоТрехЛет
	|			ТОГДА ВЫБОР
	|					КОГДА ОтпускПоУходуЗаРебенком.ВыплачиватьПособиеДоТрехЛет
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|				КОНЕЦ
	|		КОГДА ОтпускПоУходуЗаРебенком.ВыплачиватьПособиеДоТрехЛет
	|			ТОГДА ВЫБОР
	|					КОГДА ОтпускПоУходуЗаРебенком.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
	|					ИНАЧЕ ОтпускПоУходуЗаРебенком.Действие
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять)
	|	КОНЕЦ КАК ДействиеСПособиемДоТрехЛет,
	|	ОтпускПоУходуЗаРебенком.Действие,
	|	ОтпускПоУходуЗаРебенком.ДокументОснование,
	|	ОтпускПоУходуЗаРебенком.ДокументОснование.Проведен,
	|	ОтпускПоУходуЗаРебенком.КоличествоДетей,
	|	ОтпускПоУходуЗаРебенком.КоличествоПервыхДетей,
	|	ОтпускПоУходуЗаРебенком.ВидРасчетаДоПолутораЛет,
	|	ОтпускПоУходуЗаРебенком.ВидРасчетаДоТрехЛет,
	|	ОтпускПоУходуЗаРебенком.ПроцентПособияДоПолутораЛет,
	|	ОтпускПоУходуЗаРебенком.ПроцентПособияДотрехЛет,
	|	ОтпускПоУходуЗаРебенком.Сотрудник,
	|	ВЫБОР
	|		КОГДА ОтпускПоУходуЗаРебенком.Сотрудник.Организация = ВЫБОР
	|				КОГДА ОтпускПоУходуЗаРебенком.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ОтпускПоУходуЗаРебенком.Организация
	|				ИНАЧЕ ОтпускПоУходуЗаРебенком.Организация.ГоловнаяОрганизация
	|			КОНЕЦ
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ОтпускПоУходуЗаРебенком.ВыплачиватьПособиеДоТрехЛетНаВторогоРебенка,
	|	ОтпускПоУходуЗаРебенком.ВидРасчетаДоТрехЛетНаВторогоРебенка,
	|	ОтпускПоУходуЗаРебенком.ПроцентПособияДотрехЛетНаВторогоРебенка,
	|	ОтпускПоУходуЗаРебенком.ДатаОкончанияПособияДоТрехЛетНаВторогоРебенка,
	|	ВЫБОР
	|		КОГДА ОтпускПоУходуЗаРебенком.ДокументОснование.ВыплачиватьПособиеДоТрехЛетНаВторогоРебенка
	|			ТОГДА ВЫБОР
	|					КОГДА ОтпускПоУходуЗаРебенком.ВыплачиватьПособиеДоТрехЛетНаВторогоРебенка
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|				КОНЕЦ
	|		КОГДА ОтпускПоУходуЗаРебенком.ВыплачиватьПособиеДоТрехЛетНаВторогоРебенка
	|			ТОГДА ВЫБОР
	|					КОГДА ОтпускПоУходуЗаРебенком.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
	|					ИНАЧЕ ОтпускПоУходуЗаРебенком.Действие
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять)
	|	КОНЕЦ КАК ДействиеСПособиемДоТрехЛетНаВторогоРебенка
	|ИЗ
	|	Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|ГДЕ
	|	ОтпускПоУходуЗаРебенком.Ссылка = &ДокументСсылка";
	
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоРабочимМестам(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("Дата",					ДатаИзменения);
	Запрос.УстановитьПараметр("Физлицо",				Сотрудник.Физлицо);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацииСрезПоследних.Организация,
	|	РаботникиОрганизацииСрезПоследних.Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		&Дата,
	|		Сотрудник.Физлицо = &Физлицо
	|			И Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизацииСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &Дата
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)";
	
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "ПлановыеНачисления" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоОсновнымНачислениям(ВыборкаПоШапкеДокумента, ПроверкаШтатногоРасписания)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("Дата",					ДатаИзменения);
	Запрос.УстановитьПараметр("Физлицо",				Сотрудник.Физлицо);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ВалютаРегУчета",			Константы.ВалютаРегламентированногоУчета.Получить());

	Если ПроверкаШтатногоРасписания Тогда
		МассивСпособов = Новый Массив;
		МассивСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
		МассивСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
		
		МассивДействий = Новый Массив;
		МассивДействий.Добавить(Перечисления.ВидыДействияСНачислением.Начать);
		МассивДействий.Добавить(Перечисления.ВидыДействияСНачислением.Изменить);
		
		Запрос.УстановитьПараметр("МесячнаяСтавка",		Перечисления.ВидыТарифныхСтавок.Месячная);
		Запрос.УстановитьПараметр("ИзменитьРасчеты",	МассивДействий);
		Запрос.УстановитьПараметр("МесячныеРасчеты",	МассивСпособов);
		Запрос.УстановитьПараметр("ДневнаяСтавка",		Перечисления.ВидыТарифныхСтавок.Дневная);
		Запрос.УстановитьПараметр("ДневнойРасчет",		Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
		Запрос.УстановитьПараметр("ЧасоваяСтавка",		Перечисления.ВидыТарифныхСтавок.Часовая);
		Запрос.УстановитьПараметр("ЧасовойРасчет",		Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.НомерСтроки,
	|	Начисления.Действие,
	|	Начисления.ВидРасчета,
	|	Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда КАК ТребуетВводаТарифногоРазряда,
	|	Начисления.Сотрудник,
	|	Начисления.Показатель1,
	|	Начисления.Валюта1,
	|	Начисления.ТарифныйРазряд1,
	|	Начисления.Показатель2,
	|	Начисления.Валюта2,
	|	Начисления.ТарифныйРазряд2,
	|	Начисления.Показатель3,
	|	Начисления.Валюта3,
	|	Начисления.ТарифныйРазряд3,
	|	Начисления.Показатель4,
	|	Начисления.Валюта4,
	|	Начисления.ТарифныйРазряд4,
	|	Начисления.ВидРасчета.ЗачетОтработанногоВремени КАК ОсновноеНачисление,
	|	Начисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.ВидРасчетаЗавершения
	|		ИНАЧЕ ПлановыеНачисления.ВидРасчета
	|	КОНЕЦ КАК ПрежнийВидРасчета,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.Показатель1Завершения
	|		ИНАЧЕ ПлановыеНачисления.Показатель1
	|	КОНЕЦ КАК ПрежнийПоказатель1,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.Валюта1Завершения
	|		ИНАЧЕ ПлановыеНачисления.Валюта1
	|	КОНЕЦ КАК ПрежняяВалюта1,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.ТарифныйРазряд1Завершения
	|		ИНАЧЕ ПлановыеНачисления.ТарифныйРазряд1
	|	КОНЕЦ КАК ПрежнийТарифныйРазряд1,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.Показатель2Завершения
	|		ИНАЧЕ ПлановыеНачисления.Показатель2
	|	КОНЕЦ КАК ПрежнийПоказатель2,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.Валюта2Завершения
	|		ИНАЧЕ ПлановыеНачисления.Валюта2
	|	КОНЕЦ КАК ПрежняяВалюта2,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.ТарифныйРазряд2Завершения
	|		ИНАЧЕ ПлановыеНачисления.ТарифныйРазряд2
	|	КОНЕЦ КАК ПрежнийТарифныйРазряд2,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.Показатель3Завершения
	|		ИНАЧЕ ПлановыеНачисления.Показатель3
	|	КОНЕЦ КАК ПрежнийПоказатель3,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.Валюта3Завершения
	|		ИНАЧЕ ПлановыеНачисления.Валюта3
	|	КОНЕЦ КАК ПрежняяВалюта3,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.ТарифныйРазряд3Завершения
	|		ИНАЧЕ ПлановыеНачисления.ТарифныйРазряд3
	|	КОНЕЦ КАК ПрежнийТарифныйРазряд3,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.Показатель4Завершения
	|		ИНАЧЕ ПлановыеНачисления.Показатель4
	|	КОНЕЦ КАК ПрежнийПоказатель4,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.Валюта4Завершения
	|		ИНАЧЕ ПлановыеНачисления.Валюта4
	|	КОНЕЦ КАК ПрежняяВалюта4,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.ТарифныйРазряд4Завершения
	|		ИНАЧЕ ПлановыеНачисления.ТарифныйРазряд4
	|	КОНЕЦ КАК ПрежнийТарифныйРазряд4";
				   
	Если ПроверкаШтатногоРасписания Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	|	ВЫБОР КОГДА Начисления.ВидРасчета.ЗачетОтработанногоВремени И Начисления.Действие В (&ИзменитьРасчеты) ТОГДА ВЫБОР КОГДА Начисления.ВидРасчета.СпособРасчета В (&МесячныеРасчеты) И ШтатноеРасписаниеОрганизаций.ВидТарифнойСтавки = &МесячнаяСтавка ТОГДА ВЫБОР КОГДА Начисления.Показатель1 < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка ИЛИ Начисления.Показатель1 > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КОГДА Начисления.ВидРасчета.СпособРасчета = &ДневнойРасчет И ШтатноеРасписаниеОрганизаций.ВидТарифнойСтавки = &ДневнаяСтавка ТОГДА ВЫБОР КОГДА Начисления.Показатель1 < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка ИЛИ Начисления.Показатель1 > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КОГДА Начисления.ВидРасчета.СпособРасчета = &ЧасовойРасчет И ШтатноеРасписаниеОрганизаций.ВидТарифнойСтавки = &ЧасоваяСтавка ТОГДА ВЫБОР КОГДА Начисления.Показатель1 < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка ИЛИ Начисления.Показатель1 > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ ИНАЧЕ ИСТИНА КОНЕЦ ИНАЧЕ ИСТИНА КОНЕЦ КАК РазмерСоответствуетШТР";
	КонецЕсли;
			   
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.ОсновныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|		&Дата,
	|		Сотрудник.Физлицо = &Физлицо
	|		    И Организация = &ГоловнаяОрганизация) КАК ПлановыеНачисления
	|		ПО Начисления.Сотрудник = ПлановыеНачисления.Сотрудник
	|			И (Начисления.ВидРасчета = ПлановыеНачисления.ВидРасчетаИзмерение
	|				ИЛИ Начисления.ВидРасчета.ЗачетОтработанногоВремени И ПлановыеНачисления.ВидРасчетаИзмерение.Код ЕСТЬ NULL)";
	Если ПроверкаШтатногоРасписания Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&Дата,
	|			Сотрудник.Физлицо = &Физлицо
	|			    И Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизацииСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(&Дата, ) КАК ШтатноеРасписаниеОрганизаций
	|			ПО
	|			ВЫБОР
	|				КОГДА  РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &Дата
	|						И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1,1,1,0,0,0)
	|					ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения
	|						ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность 
	|			КОНЕЦ = ШтатноеРасписаниеОрганизаций.Должность 
	|			И 
	|			ВЫБОР
	|				КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &Дата
	|						И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|						ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|			КОНЕЦ = ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации
	|		ПО Начисления.Сотрудник = РаботникиОрганизацииСрезПоследних.Сотрудник";
	КонецЕсли;
			   
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ГДЕ
	|	Начисления.Ссылка = &ДокументСсылка
	|	И Начисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять)";
	
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоПлановымНачислениям()

// Формирует запрос по таблице "ПлановыеНачисления" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоЕжемесячнымПособиям(ВыборкаПоШапкеДокумента,  ПроверкаШтатногоРасписания)


	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("Дата",					ДатаИзменения);
	Запрос.УстановитьПараметр("Физлицо",				Сотрудник.Физлицо);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ВалютаРегУчета",			Константы.ВалютаРегламентированногоУчета.Получить());

	Если ПроверкаШтатногоРасписания Тогда
		МассивСпособов = Новый Массив;
		МассивСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
		МассивСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
		
		МассивДействий = Новый Массив;
		МассивДействий.Добавить(Перечисления.ВидыДействияСНачислением.Начать);
		МассивДействий.Добавить(Перечисления.ВидыДействияСНачислением.Изменить);
		
		Запрос.УстановитьПараметр("МесячнаяСтавка",		Перечисления.ВидыТарифныхСтавок.Месячная);
		Запрос.УстановитьПараметр("ИзменитьРасчеты",	МассивДействий);
		Запрос.УстановитьПараметр("МесячныеРасчеты",	МассивСпособов);
		Запрос.УстановитьПараметр("ДневнаяСтавка",		Перечисления.ВидыТарифныхСтавок.Дневная);
		Запрос.УстановитьПараметр("ДневнойРасчет",		Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
		Запрос.УстановитьПараметр("ЧасоваяСтавка",		Перечисления.ВидыТарифныхСтавок.Часовая);
		Запрос.УстановитьПараметр("ЧасовойРасчет",		Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.НомерСтроки,
	|	Начисления.Действие,
	|	Начисления.ВидРасчета,
	|	Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда КАК ТребуетВводаТарифногоРазряда,
	|	Ссылка.Сотрудник,
	|	Начисления.Показатель1,
	|	Начисления.Валюта1,
	|	Начисления.ТарифныйРазряд1,
	|	Начисления.Показатель2,
	|	Начисления.Валюта2,
	|	Начисления.ТарифныйРазряд2,
	|	Начисления.Показатель3,
	|	Начисления.Валюта3,
	|	Начисления.ТарифныйРазряд3,
	|	Начисления.Показатель4,
	|	Начисления.Валюта4,
	|	Начисления.ТарифныйРазряд4,
	|	Начисления.ВидРасчета.ЗачетОтработанногоВремени КАК ОсновноеНачисление,
	|	Начисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.ВидРасчетаЗавершения
	|		ИНАЧЕ ПлановыеНачисления.ВидРасчета
	|	КОНЕЦ КАК ПрежнийВидРасчета,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.Показатель1Завершения
	|		ИНАЧЕ ПлановыеНачисления.Показатель1
	|	КОНЕЦ КАК ПрежнийПоказатель1,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.Валюта1Завершения
	|		ИНАЧЕ ПлановыеНачисления.Валюта1
	|	КОНЕЦ КАК ПрежняяВалюта1,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.ТарифныйРазряд1Завершения
	|		ИНАЧЕ ПлановыеНачисления.ТарифныйРазряд1
	|	КОНЕЦ КАК ПрежнийТарифныйРазряд1,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.Показатель2Завершения
	|		ИНАЧЕ ПлановыеНачисления.Показатель2
	|	КОНЕЦ КАК ПрежнийПоказатель2,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.Валюта2Завершения
	|		ИНАЧЕ ПлановыеНачисления.Валюта2
	|	КОНЕЦ КАК ПрежняяВалюта2,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.ТарифныйРазряд2Завершения
	|		ИНАЧЕ ПлановыеНачисления.ТарифныйРазряд2
	|	КОНЕЦ КАК ПрежнийТарифныйРазряд2,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.Показатель3Завершения
	|		ИНАЧЕ ПлановыеНачисления.Показатель3
	|	КОНЕЦ КАК ПрежнийПоказатель3,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.Валюта3Завершения
	|		ИНАЧЕ ПлановыеНачисления.Валюта3
	|	КОНЕЦ КАК ПрежняяВалюта3,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.ТарифныйРазряд3Завершения
	|		ИНАЧЕ ПлановыеНачисления.ТарифныйРазряд3
	|	КОНЕЦ КАК ПрежнийТарифныйРазряд3,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.Показатель4Завершения
	|		ИНАЧЕ ПлановыеНачисления.Показатель4
	|	КОНЕЦ КАК ПрежнийПоказатель4,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.Валюта4Завершения
	|		ИНАЧЕ ПлановыеНачисления.Валюта4
	|	КОНЕЦ КАК ПрежняяВалюта4,
	|	ВЫБОР
	|		КОГДА Начисления.Ссылка.ДатаИзменения >= ПлановыеНачисления.ПериодЗавершения
	|				И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисления.ТарифныйРазряд4Завершения
	|		ИНАЧЕ ПлановыеНачисления.ТарифныйРазряд4
	|	КОНЕЦ КАК ПрежнийТарифныйРазряд4";
				   
	Если ПроверкаШтатногоРасписания Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	|	ВЫБОР КОГДА Начисления.ВидРасчета.ЗачетОтработанногоВремени И Начисления.Действие В (&ИзменитьРасчеты) ТОГДА ВЫБОР КОГДА Начисления.ВидРасчета.СпособРасчета В (&МесячныеРасчеты) И ШтатноеРасписаниеОрганизаций.ВидТарифнойСтавки = &МесячнаяСтавка ТОГДА ВЫБОР КОГДА Начисления.Показатель1 < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка ИЛИ Начисления.Показатель1 > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КОГДА Начисления.ВидРасчета.СпособРасчета = &ДневнойРасчет И ШтатноеРасписаниеОрганизаций.ВидТарифнойСтавки = &ДневнаяСтавка ТОГДА ВЫБОР КОГДА Начисления.Показатель1 < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка ИЛИ Начисления.Показатель1 > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КОГДА Начисления.ВидРасчета.СпособРасчета = &ЧасовойРасчет И ШтатноеРасписаниеОрганизаций.ВидТарифнойСтавки = &ЧасоваяСтавка ТОГДА ВЫБОР КОГДА Начисления.Показатель1 < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка ИЛИ Начисления.Показатель1 > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ ИНАЧЕ ИСТИНА КОНЕЦ ИНАЧЕ ИСТИНА КОНЕЦ КАК РазмерСоответствуетШТР";
	КонецЕсли;
			   
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.ЕжемесячныеПособия КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|		&Дата,
	|		Сотрудник.Физлицо = &Физлицо
	|		    И Организация = &ГоловнаяОрганизация) КАК ПлановыеНачисления
	|		ПО Ссылка.Сотрудник = ПлановыеНачисления.Сотрудник
	|			И (Начисления.ВидРасчета = ПлановыеНачисления.ВидРасчетаИзмерение
	|				ИЛИ Начисления.ВидРасчета.ЗачетОтработанногоВремени И ПлановыеНачисления.ВидРасчетаИзмерение.Код ЕСТЬ NULL)";
	Если ПроверкаШтатногоРасписания Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&Дата,
	|			Сотрудник.Физлицо = &Физлицо
	|			    И Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизацииСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(&Дата, ) КАК ШтатноеРасписаниеОрганизаций
	|			ПО
	|			ВЫБОР
	|				КОГДА  РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &Дата
	|						И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1,1,1,0,0,0)
	|					ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения
	|						ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность 
	|			КОНЕЦ = ШтатноеРасписаниеОрганизаций.Должность 
	|			И 
	|			ВЫБОР
	|				КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &Дата
	|						И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|						ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|			КОНЕЦ = ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации
	|		ПО Ссылка.Сотрудник = РаботникиОрганизацииСрезПоследних.Сотрудник";
	КонецЕсли;
			   
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ГДЕ
	|	Начисления.Ссылка = &ДокументСсылка
	|	И Начисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять)";
	
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоЕжемесячнымПособиям()

// Формирует запрос по таблице "ПлановыеУдержания" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоПлановымУдержаниям(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("Дата",					ДатаИзменения);
	Запрос.УстановитьПараметр("Физлицо",				Сотрудник.Физлицо);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// получим временную таблицу с показателями начислений
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Удержания.ВидРасчета				КАК ВидРасчета,
	|	МАКСИМУМ(Показатели.НомерСтроки)			КАК КоличествоПоказателей,
	|	Показатели1.Показатель.Предопределенный		КАК Показатель1Предопределенный,
	|	Показатели1.Показатель.Наименование			КАК Показатель1Наименование,
	|	Показатели1.Показатель.ТипПоказателя		КАК Показатель1ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения КАК Показатель1ВозможностьИзменения,
	|	Показатели2.Показатель.Предопределенный		КАК Показатель2Предопределенный,
	|	Показатели2.Показатель.Наименование			КАК Показатель2Наименование,
	|	Показатели2.Показатель.ТипПоказателя		КАК Показатель2ТипПоказателя,
	|	Показатели2.Показатель.ВозможностьИзменения КАК Показатель2ВозможностьИзменения,
	|	Показатели3.Показатель.Предопределенный		КАК Показатель3Предопределенный,
	|	Показатели3.Показатель.Наименование			КАК Показатель3Наименование,
	|	Показатели3.Показатель.ТипПоказателя 		КАК Показатель3ТипПоказателя,
	|	Показатели3.Показатель.ВозможностьИзменения КАК Показатель3ВозможностьИзменения,
	|	Показатели4.Показатель.Предопределенный		КАК Показатель4Предопределенный,
	|	Показатели4.Показатель.Наименование 		КАК Показатель4Наименование,
	|	Показатели4.Показатель.ТипПоказателя 		КАК Показатель4ТипПоказателя,
	|	Показатели4.Показатель.ВозможностьИзменения КАК Показатель4ВозможностьИзменения,
	|	Показатели5.Показатель.Предопределенный		КАК Показатель5Предопределенный,
	|	Показатели5.Показатель.Наименование 		КАК Показатель5Наименование,
	|	Показатели5.Показатель.ТипПоказателя 		КАК Показатель5ТипПоказателя,
	|	Показатели5.Показатель.ВозможностьИзменения КАК Показатель5ВозможностьИзменения,
	|	Показатели6.Показатель.Предопределенный		КАК Показатель6Предопределенный,
	|	Показатели6.Показатель.Наименование 		КАК Показатель6Наименование,
	|	Показатели6.Показатель.ТипПоказателя 		КАК Показатель6ТипПоказателя,
	|	Показатели6.Показатель.ВозможностьИзменения КАК Показатель6ВозможностьИзменения,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях
	|ПОМЕСТИТЬ ВТПоказателиУдержаний
	|ИЗ
	|	Документ.ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций.Удержания КАК Удержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели
	|		ПО Удержания.ВидРасчета = Показатели.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели1
	|		ПО Удержания.ВидРасчета = Показатели1.Ссылка
	|			И (Показатели1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели2
	|		ПО Удержания.ВидРасчета = Показатели2.Ссылка
	|			И (Показатели2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели3
	|		ПО Удержания.ВидРасчета = Показатели3.Ссылка
	|			И (Показатели3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели4
	|		ПО Удержания.ВидРасчета = Показатели4.Ссылка
	|			И (Показатели4.НомерСтроки = 4)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели5
	|		ПО Удержания.ВидРасчета = Показатели5.Ссылка
	|			И (Показатели5.НомерСтроки = 5)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели6
	|		ПО Удержания.ВидРасчета = Показатели6.Ссылка
	|			И (Показатели6.НомерСтроки = 6)
	|ГДЕ
	|	Удержания.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Удержания.ВидРасчета,
	|	Показатели1.Показатель,
	|	Показатели2.Показатель,
	|	Показатели3.Показатель,
	|	Показатели4.Показатель,
	|	Показатели5.Показатель,
	|	Показатели6.Показатель,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";		

	Запрос.Выполнить();	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Удержания.НомерСтроки,
	|	Удержания.Действие,
	|	Удержания.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	Удержания.ВидРасчета.ПроизвольнаяФормулаРасчета КАК ПроизвольнаяФормулаРасчета,
	|	Удержания.ВидРасчета,
	|	Удержания.Показатель1,
	|	Удержания.Валюта1,
	|	Удержания.Показатель2,
	|	Удержания.Валюта2,
	|	Удержания.Показатель3,
	|	Удержания.Валюта3,
	|	Удержания.Показатель4,
	|	Удержания.Валюта4,
	|	Удержания.Показатель5,
	|	Удержания.Валюта5,
	|	Удержания.Показатель6,
	|	Удержания.Валюта6,
	|	ЕСТЬNULL(Показатели.КоличествоПоказателей, 0) КАК КоличествоПоказателей,
	|	Показатели.Показатель1Предопределенный,
	|	Показатели.Показатель1Наименование,
	|	Показатели.Показатель1ТипПоказателя,
	|	Показатели.Показатель1ВозможностьИзменения,
	|	Показатели.Показатель2Предопределенный,
	|	Показатели.Показатель2Наименование,
	|	Показатели.Показатель2ТипПоказателя,
	|	Показатели.Показатель2ВозможностьИзменения,
	|	Показатели.Показатель3Предопределенный,
	|	Показатели.Показатель3Наименование,
	|	Показатели.Показатель3ТипПоказателя,
	|	Показатели.Показатель3ВозможностьИзменения,
	|	Показатели.Показатель4Предопределенный,
	|	Показатели.Показатель4Наименование,
	|	Показатели.Показатель4ТипПоказателя,
	|	Показатели.Показатель4ВозможностьИзменения,
	|	Показатели.Показатель5Предопределенный,
	|	Показатели.Показатель5Наименование,
	|	Показатели.Показатель5ТипПоказателя,
	|	Показатели.Показатель5ВозможностьИзменения,
	|	Показатели.Показатель6Предопределенный,
	|	Показатели.Показатель6Наименование,
	|	Показатели.Показатель6ТипПоказателя,
	|	Показатели.Показатель6ВозможностьИзменения,
	|	Показатели.Показатель1ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель2ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель3ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель4ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель5ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель6ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	Удержания.ДокументОснование,
	|	ДвойныеСтроки.КонфликтнаяСтрокаНомер,
	|	ЛОЖЬ КАК ТребуетВводаТарифногоРазряда,
	|	ВЫБОР
	|		КОГДА Удержания.Ссылка.ДатаИзменения >= ПлановыеУдержания.ПериодЗавершения
	|				И ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеУдержания.Показатель1Завершения
	|		ИНАЧЕ ПлановыеУдержания.Показатель1
	|	КОНЕЦ КАК ПрежнийПоказаетль1,
	|	ВЫБОР
	|		КОГДА Удержания.Ссылка.ДатаИзменения >= ПлановыеУдержания.ПериодЗавершения
	|				И ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеУдержания.Показатель2Завершения
	|		ИНАЧЕ ПлановыеУдержания.Показатель2
	|	КОНЕЦ КАК ПрежнийПоказаетль2,
	|	ВЫБОР
	|		КОГДА Удержания.Ссылка.ДатаИзменения >= ПлановыеУдержания.ПериодЗавершения
	|				И ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеУдержания.Показатель3Завершения
	|		ИНАЧЕ ПлановыеУдержания.Показатель3
	|	КОНЕЦ КАК ПрежнийПоказаетль3,
	|	ВЫБОР
	|		КОГДА Удержания.Ссылка.ДатаИзменения >= ПлановыеУдержания.ПериодЗавершения
	|				И ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеУдержания.Показатель4Завершения
	|		ИНАЧЕ ПлановыеУдержания.Показатель4
	|	КОНЕЦ КАК ПрежнийПоказаетль4,
	|	ВЫБОР
	|		КОГДА Удержания.Ссылка.ДатаИзменения >= ПлановыеУдержания.ПериодЗавершения
	|				И ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеУдержания.Показатель5Завершения
	|		ИНАЧЕ ПлановыеУдержания.Показатель5
	|	КОНЕЦ КАК ПрежнийПоказаетль5,
	|	ВЫБОР
	|		КОГДА Удержания.Ссылка.ДатаИзменения >= ПлановыеУдержания.ПериодЗавершения
	|				И ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеУдержания.Показатель6Завершения
	|		ИНАЧЕ ПлановыеУдержания.Показатель6
	|	КОНЕЦ КАК ПрежнийПоказаетль6,
	|	ВЫБОР
	|		КОГДА Удержания.Ссылка.ДатаИзменения >= ПлановыеУдержания.ПериодЗавершения
	|				И ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеУдержания.Валюта1Завершения
	|		ИНАЧЕ ПлановыеУдержания.Валюта1
	|	КОНЕЦ КАК ПрежняяВалюта1,
	|	ВЫБОР
	|		КОГДА Удержания.Ссылка.ДатаИзменения >= ПлановыеУдержания.ПериодЗавершения
	|				И ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеУдержания.Валюта2Завершения
	|		ИНАЧЕ ПлановыеУдержания.Валюта2
	|	КОНЕЦ КАК ПрежняяВалюта2,
	|	ВЫБОР
	|		КОГДА Удержания.Ссылка.ДатаИзменения >= ПлановыеУдержания.ПериодЗавершения
	|				И ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеУдержания.Валюта3Завершения
	|		ИНАЧЕ ПлановыеУдержания.Валюта3
	|	КОНЕЦ КАК ПрежняяВалюта3,
	|	ВЫБОР
	|		КОГДА Удержания.Ссылка.ДатаИзменения >= ПлановыеУдержания.ПериодЗавершения
	|				И ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеУдержания.Валюта4Завершения
	|		ИНАЧЕ ПлановыеУдержания.Валюта4
	|	КОНЕЦ КАК ПрежняяВалюта4,
	|	ВЫБОР
	|		КОГДА Удержания.Ссылка.ДатаИзменения >= ПлановыеУдержания.ПериодЗавершения
	|				И ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеУдержания.Валюта5Завершения
	|		ИНАЧЕ ПлановыеУдержания.Валюта5
	|	КОНЕЦ КАК ПрежняяВалюта5,
	|	ВЫБОР
	|		КОГДА Удержания.Ссылка.ДатаИзменения >= ПлановыеУдержания.ПериодЗавершения
	|				И ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеУдержания.Валюта6Завершения
	|		ИНАЧЕ ПлановыеУдержания.Валюта6
	|	КОНЕЦ КАК ПрежняяВалюта6
	|ИЗ
	|	Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.ПлановыеУдержания КАК Удержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Удержания.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ПовторяющиесяСтроки.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.ПлановыеУдержания КАК Удержания
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.ПлановыеУдержания КАК ПовторяющиесяСтроки
	|				ПО Удержания.Ссылка = ПовторяющиесяСтроки.Ссылка
	|					И Удержания.НомерСтроки < ПовторяющиесяСтроки.НомерСтроки
	|					И Удержания.ВидРасчета = ПовторяющиесяСтроки.ВидРасчета
	|					И Удержания.ДокументОснование = ПовторяющиесяСтроки.ДокументОснование
	|		ГДЕ
	|			Удержания.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Удержания.НомерСтроки) КАК ДвойныеСтроки
	|		ПО Удержания.НомерСтроки = ДвойныеСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций.СрезПоследних(
	|				&Дата,
	|				Физлицо = &Физлицо
	|					И Организация = &ГоловнаяОрганизация) КАК ПлановыеУдержания
	|		ПО Удержания.ВидРасчета = ПлановыеУдержания.ВидРасчета
	|			И Удержания.ДокументОснование = ПлановыеУдержания.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиУдержаний КАК Показатели
	|		ПО Удержания.ВидРасчета = Показатели.ВидРасчета
	|ГДЕ
	|	Удержания.Ссылка = &ДокументСсылка
	|	И Удержания.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять)";
                                                   
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоПлановымУдержаниям()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ДокументОснование
	ЕстьДокументОснование = ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДокументОснование);
	Если Не ЕстьДокументОснование Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан документ регистрации отпуска!", Отказ, Заголовок);
	ИначеЕсли Не ВыборкаПоШапкеДокумента.ДокументОснованиеПроведен Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Указанный документ регистрации отпуска ещё не проведен!", Отказ, Заголовок);
	КонецЕсли;

	// ДатаИзменения
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаИзменения) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата изменения условий оплаты отпуска!", Отказ, Заголовок);
	ИначеЕсли ЕстьДокументОснование 
		И (ВыборкаПоШапкеДокумента.ДатаНачала >= ВыборкаПоШапкеДокумента.ДатаИзменения Или ВыборкаПоШапкеДокумента.ДатаОкончания <= ВыборкаПоШапкеДокумента.ДатаИзменения) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Указанная дата изменения условий оплаты отпуска не соответствует периоду отпуска!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ВыплачиватьПособиеДоПолутораЛет Тогда
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончанияПособияДоПолутораЛет) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указана дата окончания выплаты пособия за счет ФСЗН до полутора лет!", Отказ, Заголовок);
		ИначеЕсли ЕстьДокументОснование И ВыборкаПоШапкеДокумента.ДатаОкончанияПособияДоПолутораЛет > ВыборкаПоШапкеДокумента.ДатаОкончания Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Дата окончания выплаты пособия за счет ФСЗН до полутора лет превышает дату окончания отпуска, будет использована дата окончания отпуска.");
		ИначеЕсли ЕстьДокументОснование И ВыборкаПоШапкеДокумента.ДатаОкончанияПособияДоПолутораЛет < ВыборкаПоШапкеДокумента.ДатаНачала Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Дата окончания выплаты пособия за счет ФСЗН до полутора лет не должна быть меньше даты начала отпуска!", Отказ, Заголовок);
		КонецЕсли;
		Если ВыборкаПоШапкеДокумента.КоличествоДетей = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указано количество детей, за которыми осуществляется уход!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ВыплачиватьПособиеДоТрехЛет Тогда
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончанияПособияДоТрехЛет) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указана дата окончания выплаты пособия до трех лет!", Отказ, Заголовок);
		ИначеЕсли ЕстьДокументОснование И ВыборкаПоШапкеДокумента.ДатаОкончанияПособияДоТрехЛет > ВыборкаПоШапкеДокумента.ДатаОкончания Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Дата окончания выплаты пособия до трех лет превышает дату окончания отпуска, будет использована дата окончания отпуска.");
		ИначеЕсли ЕстьДокументОснование И ВыборкаПоШапкеДокумента.ДатаОкончанияПособияДоТрехЛет < ВыборкаПоШапкеДокумента.ДатаНачала Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Дата окончания выплаты пособия до трех лет не должна быть меньше даты начала отпуска!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// ВнутреннийСовместитель
	Если ВыборкаПоШапкеДокумента.ВнутреннийСовместитель Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть оформлен на внутреннего совместителя!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ПлановыеНачисления" документа
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиОсновныеНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания, ПроверятьМестоРаботы, ПроверятьВалюту)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Основные начисления"": ";

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано начисление!", Отказ, Заголовок);
	ИначеЕсли (ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Начать или ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Изменить) Тогда
		// Валюта
		Если ПроверятьВалюту И СоответствиеВалютныеСпособыРасчета[ВыборкаПоСтрокамДокумента.СпособРасчета] и НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Валюта1) и Не ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана валюта начисления!", Отказ, Заголовок);
		КонецЕсли;
		// Соответствие размера "основного" начисления штатному расписанию
		Если ПроверкаШтатногоРасписания и Не ВыборкаПоСтрокамДокумента.РазмерСоответствуетШТР и Не ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "размер основного начисления не соответствует штатному расписанию!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// Действие
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Действие) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано действие!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	Если ПроверятьМестоРаботы И НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано рабочее место работника!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения реквизитов в строке ТЧ "ПлановыеУдержания" документа
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиПлановыхУдержаний(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Удержания"": ";

	// ВидРасчета
	НетВР = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета);
	НетДействия = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Действие);
	
	Если НетВР Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид удержания!", Отказ, Заголовок);
	КонецЕсли;
	
	// Действие
	Если НетДействия Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано действие с удержанием!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не НетВР И Не НетДействия Тогда	
	
		// Одинаковые строки
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " обнаружено повторное назначение того же удержания в строке №" + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!", Отказ, Заголовок);
		КонецЕсли;
		
		ИспользуютсяНачисленияВВалюте = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте");
		
		ПроведениеРасчетов.ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Ложь, Отказ, Заголовок, ИспользуютсяНачисленияВВалюте, СоответствиеВалютныеСпособыРасчета);

		// Основание
		//Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументОснование) Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано основание удержания!", Отказ, Заголовок);
		//КонецЕсли;
		
	КонецЕсли;


КонецПроцедуры

// По строке выборки результата запроса по документу формируем движения по регистру ПлановыеНачисленияРаботниковОрганизаций
//
// Параметры: 
//  ВыборкаПоШапкеДокумента 	- выборка из результата запроса по шапке документа,
//  ВыборкаПоРаботникиОрганизации 	- выборка из результата запроса по табличной чавсти документа,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуОтпуска(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)
	
	Если ВыборкаПоШапкеДокумента.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		
		Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
		
		// Свойства
		Движение.Период                     = ВыборкаПоШапкеДокумента.ДатаИзменения;
		
		// Измерения
		Движение.Сотрудник                  = ВыборкаПоСтрокамДокумента.Сотрудник;
		Движение.Организация				= ВыборкаПоСтрокамДокумента.Организация;
		Движение.ВидРасчетаИзмерение    	= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты;
		
		// Ресурсы
		Движение.Действие					= Перечисления.ВидыДействияСНачислением.Прекратить;
		Движение.ВидРасчета           		= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты;
		
		
		Движение = Движения.СостояниеРаботниковОрганизаций.Добавить();
		
		// Свойства
		Движение.Период                     = ВыборкаПоШапкеДокумента.ДатаИзменения;
		
		// Измерения
		Движение.Сотрудник                  = ВыборкаПоСтрокамДокумента.Сотрудник;
		Движение.Организация				= ВыборкаПоСтрокамДокумента.Организация;
		
		// Ресурсы
		Движение.Состояние					= Перечисления.СостоянияРаботникаОрганизации.Работает;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуОтпуска

// По строке выборки результата запроса по документу формируем движения по регистру ПлановыеНачисленияРаботниковОрганизаций
//
// Параметры: 
//  ВыборкаПоШапкеДокумента 	- выборка из результата запроса по шапке документа,
//  ВыборкаПоРаботникиОрганизации 	- выборка из результата запроса по табличной чавсти документа,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуОсновныеНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)

	Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период                     = ВыборкаПоШапкеДокумента.ДатаИзменения;
	
	// Измерения
	Движение.Сотрудник                  = ВыборкаПоШапкеДокумента.Сотрудник;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// для основного начисления измерение ВидРасчетаИзмерение остается пустым - нельзя ввести 
	// более одного основных видов расчета
	Если НЕ ВыборкаПоСтрокамДокумента.ОсновноеНачисление Тогда
		Движение.ВидРасчетаИзмерение    = ВыборкаПоСтрокамДокумента.ВидРасчета;
	КонецЕсли; 
	
	// Ресурсы
	СтрокаРесурсов = "Действие,ВидРасчета";
 	Если ВыборкаПоСтрокамДокумента.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		СтрокаРесурсов = СтрокаРесурсов 
		+ ",Показатель1,Валюта1,ТарифныйРазряд1,Показатель2,Валюта2,ТарифныйРазряд2,Показатель3,Валюта3,ТарифныйРазряд3,Показатель4,Валюта4,ТарифныйРазряд4";
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаРесурсов);

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистру ПлановыеУдержанияРаботниковОрганизаций
//
// Параметры: 
//  ВыборкаПоШапкеДокумента 	- выборка из результата запроса по шапке документа,
//  ВыборкаПоРаботникиОрганизации 	- выборка из результата запроса по табличной чавсти документа,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуПлановыхУдержаний(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)

	Если ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
		Возврат;
	КонецЕсли;
	
	Движение = Движения.ПлановыеУдержанияРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период							= ВыборкаПоШапкеДокумента.ДатаНачала;

	// Измерения
	Движение.ФизЛицо						= ВыборкаПоШапкеДокумента.Сотрудник.ФизЛицо;
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ВидРасчета						= ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.ДокументОснование				= ВыборкаПоСтрокамДокумента.ДокументОснование;
	
	// Ресурсы
	СтрокаРесурсов = "Действие,ВидРасчета";
	Движение.Действие						= ВыборкаПоСтрокамДокумента.Действие;
	Если ВыборкаПоСтрокамДокумента.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		СтрокаРесурсов = СтрокаРесурсов 
		+ ",Показатель1,Валюта1,Показатель2,Валюта2,Показатель3,Валюта3,Показатель4,Валюта4,Показатель5,Валюта5,Показатель6,Валюта6";
	КонецЕсли;
	
	Движение.ПериодЗавершения			= ВыборкаПоШапкеДокумента.ДатаОкончания + мДлинаСуток;
	Если ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда	
		Движение.ДействиеЗавершения	= Перечисления.ВидыДействияСНачислением.Начать
	ИначеЕсли ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Начать Тогда	
		Движение.ДействиеЗавершения	= Перечисления.ВидыДействияСНачислением.Прекратить
	Иначе	
		Движение.ДействиеЗавершения	= ВыборкаПоСтрокамДокумента.Действие;
	КонецЕсли;
	
	//Если ВыборкаПоСтрокамДокумента.Действие <> Перечисления.ВидыДействияСНачислением.Начать Тогда
	//	СтрокаРесурсов = СтрокаРесурсов 
	//	+ ",Показатель1Завершения,Валюта1Завершения,Показатель2Завершения,Валюта2Завершения,Показатель3Завершения,Валюта3Завершения,Показатель4Завершения,Валюта4Завершения,Показатель5Завершения,Валюта5Завершения,Показатель6Завершения,Валюта6Завершения";
	//КонецЕсли;
	//
	//ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаРесурсов);

	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	СоответствиеВалютныеСпособыРасчета = ПроведениеРасчетов.ПолучитьСоответствиеСпособовРасчетаТребующихВалюту();
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
        
		УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
		
		ПроверкаШтатногоРасписания = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналуОрганизации, Организация, "ПроверкаШтатногоРасписания");
		//ПроверятьМестоРаботы = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналуОрганизации, Организация, "ПоддержкаВнутреннегоСовместительства");
		ПроверятьМестоРаботы = Истина;
		ПроверятьВалюту = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналуОрганизации, Организация, "ИспользуютсяНачисленияВВалюте");
			
        
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			Если ВидОперации = Перечисления.ВидыОперацийОтпускаПоУходу.ОтпускПоУходуЗаРебенком тогда
				
						
			Если ВыборкаПоШапкеДокумента.ДействиеСПособиемДоТрехЛет <> Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
				
				Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
				
				// Свойства
				Движение.Период                     = ВыборкаПоШапкеДокумента.ДатаИзменения;
				
				// Измерения
				Движение.Сотрудник                  = ВыборкаПоШапкеДокумента.Сотрудник;
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ВидРасчетаИзмерение    	= ВыборкаПоШапкеДокумента.ВидРасчетаДоТрехЛет;//ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет;
				
				// Ресурсы
				Движение.Действие					= ВыборкаПоШапкеДокумента.ДействиеСПособиемДоТрехЛет;
				Движение.ВидРасчета           		= ВыборкаПоШапкеДокумента.ВидРасчетаДоТрехЛет;//ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет;
				Движение.Показатель1				= ВыборкаПоШапкеДокумента.ПроцентПособияДоТрехЛет;
                                                                                                                                          
				Если ВыборкаПоШапкеДокумента.ДействиеСПособиемДоТрехЛет <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
					Движение.ПериодЗавершения			= Мин(ВыборкаПоШапкеДокумента.ДатаОкончания,ВыборкаПоШапкеДокумента.ДатаОкончанияПособияДоТрехЛет) + 86400;
					Движение.ДействиеЗавершения			= Перечисления.ВидыДействияСНачислением.Прекратить;
					Движение.ВидРасчетаЗавершения		= Движение.ВидРасчета;
				КонецЕсли;

			КонецЕсли;
			
			
			Если ВыборкаПоШапкеДокумента.ДействиеСПособиемДоТрехЛетНаВторогоРебенка <> Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
				
				Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
				
				// Свойства
				Движение.Период                     = ВыборкаПоШапкеДокумента.ДатаИзменения;
				
				// Измерения
				Движение.Сотрудник                  = ВыборкаПоШапкеДокумента.Сотрудник;
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ВидРасчетаИзмерение    	= ВыборкаПоШапкеДокумента.ВидРасчетаДоТрехЛетНаВторогоРебенка;//ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет;
				
				// Ресурсы
				Движение.Действие					= ВыборкаПоШапкеДокумента.ДействиеСПособиемДоТрехЛетНаВторогоРебенка;
				Движение.ВидРасчета           		= ВыборкаПоШапкеДокумента.ВидРасчетаДоТрехЛетНаВторогоРебенка;//ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет;
				Движение.Показатель1				= ВыборкаПоШапкеДокумента.ПроцентПособияДотрехЛетНаВторогоРебенка;
		                                                                                                                                          
				Если ВыборкаПоШапкеДокумента.ДействиеСПособиемДоТрехЛет <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
					Движение.ПериодЗавершения			= Мин(ВыборкаПоШапкеДокумента.ДатаОкончания,ВыборкаПоШапкеДокумента.ДатаОкончанияПособияДоТрехЛетНаВторогоРебенка) + 86400;
					Движение.ДействиеЗавершения			= Перечисления.ВидыДействияСНачислением.Прекратить;
					Движение.ВидРасчетаЗавершения		= Движение.ВидРасчета;
				КонецЕсли;

			КонецЕсли;

			
        	// провести в регистр "состояние работников организаций"
			ВыборкаПоМестамРаботы = СформироватьЗапросПоРабочимМестам(ВыборкаПоШапкеДокумента).Выбрать();
			Пока ВыборкаПоМестамРаботы.Следующий() Цикл 
				ДобавитьСтрокуОтпуска(ВыборкаПоШапкеДокумента, ВыборкаПоМестамРаботы);
			КонецЦикла;
			
			// получим реквизиты табличной части
			ВыборкаПоНачислениям = СформироватьЗапросПоОсновнымНачислениям(ВыборкаПоШапкеДокумента, ПроверкаШтатногоРасписания).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоНачислениям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиОсновныеНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок, ПроверкаШтатногоРасписания, ПроверятьМестоРаботы, ПроверятьВалюту);

				Если НЕ Отказ Тогда
					ДобавитьСтрокуОсновныеНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
				КонецЕсли;

			КонецЦикла;
			
			// получим реквизиты табличной части
			ВыборкаПоУдержаниям = СформироватьЗапросПоПлановымУдержаниям(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоУдержаниям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиПлановыхУдержаний(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям, Отказ, Заголовок);

				Если НЕ Отказ Тогда
					ДобавитьСтрокуПлановыхУдержаний(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям);
				КонецЕсли;

			КонецЦикла;
			
			Иначе
				
				// получим реквизиты табличной части
			ВыборкаПоНачислениям = СформироватьЗапросПоЕжемесячнымПособиям(ВыборкаПоШапкеДокумента, ПроверкаШтатногоРасписания).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоНачислениям.Следующий() Цикл 

				// проверим очередную строку табличной части
				//ПроверитьЗаполнениеСтрокиОсновныеНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);

				Если НЕ Отказ Тогда
					ДобавитьСтрокуОсновныеНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
				КонецЕсли;

			КонецЦикла;
			Конецесли;
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") тогда
		ЗаполнитьПоОснованию(Основание);
		ЗаполнитьПлановыеНачисленияУдержания();	
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Не ОбменДанными.Загрузка Тогда
		
		//ЗаполнитьМестоРаботы = Не ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ПоддержкаВнутреннегоСовместительства");
		//Если ЗаполнитьМестоРаботы Тогда
		//	Для каждого СтрокаТЧ Из ОсновныеНачисления Цикл
		//		СтрокаТЧ.Сотрудник = Сотрудник
		//	КонецЦикла;
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
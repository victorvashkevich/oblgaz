////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит соответствие доходов и положенных по ним вычетов
Перем мСоответствиеДоходовИВычетов;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

// Заполняет показатели
//
Функция ЗаполнитьПоказатели(ТекущийСотрудник) Экспорт 
	
	Если ТекущийСотрудник = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ТЗНачисления					= ОсновныеНачисления.Выгрузить(,"Сотрудник,ВидРасчета");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Начисления",ТЗНачисления);
	Запрос.УстановитьПараметр("ПарамДата",НачалоМесяца(ПериодРегистрации));
	
	// получим временную таблицу с сотрудниками и видами расчетов
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ВидРасчета,
	|	Начисления.Сотрудник
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&Начисления КАК Начисления";
	
	Запрос.Выполнить();
	
	ВТНачисления = "ВТНачисления";
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Показатель.ВидПоказателя КАК ВидПоказателя,
	|	ВложенныйЗапрос.Показатель,
	|	ВложенныйЗапрос.Сотрудник
	|ИЗ (
    |
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Показатели.Показатель.ВидПоказателя КАК ВидПоказателя,
	|		Показатели.Показатель,
	|		Начисления.Сотрудник
	|	ИЗ
	|		ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели
	|			ПО Показатели.Ссылка = Начисления.ВидРасчета
	|			И Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется)
	|			И Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)
	|			И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
	|			И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная)
	|			И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|			И Не Показатели.Показатель.Предопределенный
	|	ГДЕ
	|		НЕ (Показатели.Показатель ЕСТЬ NULL)
	|		И НЕ (Начисления.Сотрудник ЕСТЬ NULL)";
	
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Свернуть("ВидПоказателя,Показатель,Сотрудник");
	Показатели = ТаблицаЗапроса.ВыгрузитьКолонку("Показатель");
	Сотрудники = ТаблицаЗапроса.ВыгрузитьКолонку("Сотрудник");
	
	Если ЗначениеЗаполнено(ТаблицаЗапроса) Тогда
		
		ФормаВводаПоказателей = РегистрыСведений.ЗначенияПоказателейСхемМотивации.ПолучитьФорму("ФормаВводаЗначенийПоказателей");
		ФормаВводаПоказателей.Организация		= Справочники.Организации.ПустаяСсылка();
		ФормаВводаПоказателей.ПериодДействия	= НачалоМесяца(ПериодРегистрации);
		
		ФормаВводаПоказателей.Организация = Организация;
		ФормаВводаПоказателей.ФормаАвтозаполнение(ТаблицаЗапроса, Сотрудники, Показатели, , Ложь);
		ФормаВводаПоказателей.мСотрудникДляОткрытия = ТекущийСотрудник;
		ФормаВводаПоказателей.Открыть();

		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции //ЗаполнитьПоказатели

#КонецЕсли

Функция Автозаполнение(ВременнаяТаблица = Неопределено, Реквизиты = Неопределено) Экспорт
	
	
	Если ВременнаяТаблица = НеОпределено Тогда
		Возврат Неопределено
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если Реквизиты <> Неопределено тогда
		Запрос.УстановитьПараметр("ПарамДатаНачала",Реквизиты.ДатаНачала);
		Запрос.УстановитьПараметр("ПарамДатаОкончания",Реквизиты.ДатаОкончания);
		Запрос.УстановитьПараметр("ПарамВидРасчета",Реквизиты.ВидРасчета);
	Иначе
		Запрос.УстановитьПараметр("ПарамДатаНачала",НачалоМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("ПарамДатаОкончания",КонецМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("ПарамВидРасчета", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка());
	
	КонецЕсли;
	Запрос.УстановитьПараметр("ВременнаяТаблица", ВременнаяТаблица);
	Запрос.УстановитьПараметр("ПарамПериодРегистрации",КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ПарамОрганизация",Организация);
	Запрос.УстановитьПараметр("ПарамСчитатьПоДолжностнымОкладам",СчитатьПоДолжностнымОкладам);
    Запрос.УстановитьПараметр("СреднеМесячноеКоличесвтоЧасов",	Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаЧасов);

	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВременнаяТаблица.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблица.ПодразделениеОрганизации КАК Подразделение,
	|	ВременнаяТаблица.ЗамещаемыйСотрудник КАК ЗамещаемыйСотрудник
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&ВременнаяТаблица КАК ВременнаяТаблица
	|ИНДЕКСИРОВАТЬ ПО Сотрудник";

	Запрос.Выполнить();
	
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ЗамещаемыйСотрудник КАК ЗамещаемыйСотрудник,
	|	ВЫБОР
	|		КОГДА ОсновноеНачисление.ПериодЗавершения <= &ПарамПериодРегистрации
	|				И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ОсновноеНачисление.ВидРасчетаЗавершения.СпособРасчета
	|		ИНАЧЕ ОсновноеНачисление.ВидРасчета.СпособРасчета
	|	КОНЕЦ КАК СпособРасчета,
	|	ОсновноеНачисление.ВидРасчета КАК ОсновнойВидРасчетаЗамещающего
   	|ПОМЕСТИТЬ ВТСпособыРасчета
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&ПарамПериодРегистрации, ВидРасчетаИзмерение.Код ЕСТЬ NULL ) КАК ОсновноеНачисление
	|		ПО Сотрудники.ЗамещаемыйСотрудник = ОсновноеНачисление.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";

	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ЗамещаемыйСотрудник КАК ЗамещаемыйСотрудник,
	|	ЕСТЬNULL(ВЫБОР
	|		КОГДА &ПарамСчитатьПоДолжностнымОкладам
	|			ТОГДА ТарифныеСтавкиЗамещаемого.Ставка
	|		ИНАЧЕ ТарифныеСтавкиЗамещаемого.ТарифнаяСтавка
	|	КОНЕЦ,0) КАК ОкладЗамещаемого
	|ПОМЕСТИТЬ ВТОклады
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации.СрезПоследних(&парамПериодРегистрации, ) КАК ТарифныеСтавкиЗамещаемого
	|		ПО Сотрудники.ЗамещаемыйСотрудник = ТарифныеСтавкиЗамещаемого.Сотрудник
	|			И (ТарифныеСтавкиЗамещаемого.Организация = &ПарамОрганизация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";

    Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ПарамВидРасчета КАК ВидРасчета,
	|	&ПарамДатаНачала КАК ДатаНачала,
	|	&ПарамДатаОкончания КАК ДатаОкончания,
	|	&ПарамДатаНачала КАК ДатаНачалаСобытия,
	|	ИСТИНА КАК Авторасчет,
	|	Сотрудники.Сотрудник,
	|	Сотрудники.Подразделение КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА СпособыРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке))
	|			ТОГДА Оклады.ОкладЗамещаемого / ЕСТЬNULL(РазмерыПараметровДляРасчетаРБ.Размер, 1)
	|		ИНАЧЕ Оклады.ОкладЗамещаемого
	|	КОНЕЦ КАК Показатель2,
	|	СпособыРасчета.СпособРасчета КАК СпособРасчета,
	|	СпособыРасчета.ОсновнойВидРасчетаЗамещающего КАК ОсновнойВидРасчетаЗамещающего
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОклады КАК Оклады
	|		ПО Сотрудники.ЗамещаемыйСотрудник = Оклады.ЗамещаемыйСотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпособыРасчета КАК СпособыРасчета
	|		ПО Сотрудники.ЗамещаемыйСотрудник = СпособыРасчета.ЗамещаемыйСотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ.СрезПоследних(&парамПериодРегистрации, ВидПараметра = &СреднеМесячноеКоличесвтоЧасов) КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Оклады.Сотрудник ЕСТЬ НЕ NULL ";
	
	Возврат Запрос.Выполнить();
КонецФункции //Автозаполнение


Процедура АвтозаполнениеПоСтроке(Строка = Неопределено) Экспорт
	
	
	Если Строка = НеОпределено Тогда
		Возврат 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЗамещаемыйСотрудник", Строка.ЗамещаемыйСотрудник);
	Запрос.УстановитьПараметр("ПарамПериодРегистрации",КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ПарамОрганизация",Организация);
	Запрос.УстановитьПараметр("ПарамСчитатьПоДолжностнымОкладам",СчитатьПоДолжностнымОкладам);
    Запрос.УстановитьПараметр("СреднеМесячноеКоличесвтоЧасов",	Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаЧасов);

				
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновноеНачисление.Сотрудник КАК ЗамещаемыйСотрудник,
	|	ВЫБОР
	|		КОГДА ОсновноеНачисление.ПериодЗавершения <= &ПарамПериодРегистрации
	|				И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ОсновноеНачисление.ВидРасчетаЗавершения.СпособРасчета
	|		ИНАЧЕ ОсновноеНачисление.ВидРасчета.СпособРасчета
	|	КОНЕЦ КАК СпособРасчета,
	|	ОсновноеНачисление.ВидРасчета КАК ОсновнойВидРасчетаЗамещающего
	|ПОМЕСТИТЬ ВТСпособыРасчета
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|			&ПарамПериодРегистрации,
	|			Сотрудник = &ЗамещаемыйСотрудник
	|				И ВидРасчетаИзмерение.Код ЕСТЬ NULL ) КАК ОсновноеНачисление
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗамещаемыйСотрудник";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТарифныеСтавкиЗамещаемого.Сотрудник КАК ЗамещаемыйСотрудник,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА &ПарамСчитатьПоДолжностнымОкладам
	|				ТОГДА ТарифныеСтавкиЗамещаемого.Ставка
	|			ИНАЧЕ ТарифныеСтавкиЗамещаемого.ТарифнаяСтавка
	|		КОНЕЦ, 0) КАК ОкладЗамещаемого
	|ПОМЕСТИТЬ ВТОклады
	|ИЗ
	|	РегистрСведений.ТарифныеСтавкиРаботниковОрганизации.СрезПоследних(&парамПериодРегистрации, Сотрудник = &ЗамещаемыйСотрудник) КАК ТарифныеСтавкиЗамещаемого
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗамещаемыйСотрудник";
	
	Запрос.Выполнить();

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА СпособыРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке))
	//vvv комментируем, не будем переводить в часовую ставку, т.к. у нас сразу есть готовые. Вынести в параметры для расчета
	//|			ТОГДА Оклады.ОкладЗамещаемого / ЕСТЬNULL(РазмерыПараметровДляРасчетаРБ.Размер, 1)
	|			ТОГДА Оклады.ОкладЗамещаемого
	//
	|		ИНАЧЕ Оклады.ОкладЗамещаемого
	|	КОНЕЦ КАК Показатель2,
	|	СпособыРасчета.СпособРасчета КАК СпособРасчета,
	|	СпособыРасчета.ОсновнойВидРасчетаЗамещающего КАК ОсновнойВидРасчетаЗамещающего
	|ИЗ
	|	ВТОклады КАК Оклады
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпособыРасчета КАК СпособыРасчета
	|		ПО Оклады.ЗамещаемыйСотрудник = СпособыРасчета.ЗамещаемыйСотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ.СрезПоследних(&парамПериодРегистрации, ВидПараметра = &СреднеМесячноеКоличесвтоЧасов) КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Оклады.ЗамещаемыйСотрудник ЕСТЬ НЕ NULL ";

	
 	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		ЗаполнитьЗначенияСвойств(Строка, Выборка);
	КонецЕсли;

	//Возврат Запрос.Выполнить();
КонецПроцедуры //Автозаполнение





// Выполняет расчет основных и дополнительных записей начислений
//
Процедура РассчитатьНачисления() Экспорт
	
	Отказ = Ложь;
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисленияДляРасчета(ВыборкаПоШапкеДокумента).Выбрать();
	ЗафиксироватьТранзакцию();

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	// создадим наборы записей для выполнения движений
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	// Если почасовое отклонение, то записываем движения в регистр ВнутрисменноеВремяРаботниковОрганизаций
	НаборЗаписейРабочееВремя = РегистрыНакопления.ВнутрисменноеВремяРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписейРабочееВремя.Отбор.Регистратор.Значение = Ссылка;
	
	// получим реквизиты табличной части
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, НаборОсновныеНачисления);
			Если ВыборкаПоНачислениям.СторнируемыйДокумент <> ВыборкаПоШапкеДокумента.ПерерассчитываемыйДокумент Тогда
				ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, НаборЗаписейРабочееВремя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
			
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	НаборЗаписейРабочееВремя.Записать();

	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = ПроведениеРасчетов.ПолучитьТаблицуСторноЗаписей(НаборОсновныеНачисления.ПолучитьДополнение());
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		// Заполним записи в наборе записей регистра
		// и в табличной части
		ДобавитьСтрокуСторно(НаборОсновныеНачисления, ОсновныеНачисления, СтрокаСторно);
	КонецЦикла;
	
	// перед тем как начать расчет, сформированные движения надо записать - 
	// по ним чуть позже будем получать дополнительные данные для расчетов

	// рассчитываем записи
	// при этом передаем не только набор записей регистра расчета, но и набор записей регисра 
	// накопления со сведениями об отработанном времени
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, Неопределено, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, ОсновныеНачисления);
	// запишем результат расчета для расчета доп. начислений
	НаборОсновныеНачисления.Записать(Истина, Истина);
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	//
	НаборЗаписейРабочееВремя.Очистить();
	НаборЗаписейРабочееВремя.Записать();

КонецПроцедуры // РассчитатьНачисления()

// Выполняет перерасчет по заданному списку физлиц
// Если передан пустой список физлиц - перерасчет не проводится
// Если в качестве списка физлиц передан не массив, а Неопределено - перерасчет по всем физлицам 
// регистратора по которым требуется перерасчет
//
// Параметры
// 	Физлица - список значений - ссылки на физлиц
// Возвращаемое значение
//  Нет
//
Процедура Перерассчитать(Физлица = Неопределено) Экспорт
	
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	Если Не ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// получим список перерассчитываемых физлиц
	ФизлицаСписок = Новый СписокЗначений;
	Если Физлица = Неопределено Тогда
		// таблица ФизлицаДляПерерасчета
		// Список физлиц по которым необходимо выполнить перерасчет
		// Поля:
		//		ФизЛицо
		// Описание:
		// Получает список неповторяющихся физлиц по которым есть записи
		// перерасчета в одной из таблиц перерасчета - по основным или дополнительным начислениям
		//
		ФизлицаДляПерерасчетаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.ФизЛицо
		|ИЗ
		|	(ВЫБРАТЬ
		|		Перерасчет.ФизЛицо
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|	
		|	ГДЕ
		|		Перерасчет.ОбъектПерерасчета = &парамРегистратор";
		
		Запрос = Новый Запрос(ФизлицаДляПерерасчетаТекст);
		Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
		ФизлицаСписок.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
		
	Иначе
		ФизлицаСписок = Физлица;
		
	КонецЕсли;

	// если не перерассчитываем никого - возврат
	Если ФизлицаСписок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;

	// читаем все данные в одной транзакции
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// прочитать движения
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.НДФЛСведенияОДоходах.Прочитать();
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Прочитать();
	ЗафиксироватьТранзакцию();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	////////////////////////////////////////////////////////////////////////
	// Основные, дополнительные начисления и сведения о доходах НДФЛ
	
	// сначала удалим сведения о доходах НДФЛ по перерассчитываемым физлицам
	НДФЛСведенияОДоходах = Движения.НДФЛСведенияОДоходах;
	ПоследнееДвижение = НДФЛСведенияОДоходах.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		// удалим записи по всем физлицам полученного списка
		// обходим в обратном порядке
		Если ФизлицаСписок.НайтиПоЗначению(НДФЛСведенияОДоходах[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
			НДФЛСведенияОДоходах.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	
	// перерассчитываем записи начислений
	// при этом передаем не только набор записей регистра расчета, но и набор записей регистра 
	// накопления со сведениями об отработанном времени
	// а также таблицу значений в которую будет заполнять движения для НДФЛСведенияОДоходах
	ДвиженияНДФЛСведенияОДоходах = Движения.НДФЛСведенияОДоходах.Выгрузить();// фактически - создаем структуру таблицы значений
	
	ПроведениеРасчетов.ПереРассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", Движения.ОсновныеНачисленияРаботниковОрганизаций, Физлица, ДвиженияНДФЛСведенияОДоходах, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, ОсновныеНачисления);
	// запишем без выполнения пересчета фактического периода действия
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	
	// запишем движения по доходам НДФЛ, которые формируются при ПереРассчитатьЗаписиРегистраРасчета
	ПроведениеРасчетов.СвернутьДвиженияНДФЛСведенияОДоходах(ДвиженияНДФЛСведенияОДоходах);
	Движения.НДФЛСведенияОДоходах.Загрузить(ДвиженияНДФЛСведенияОДоходах);
	Движения.НДФЛСведенияОДоходах.Записать();
	
	// записываем документ перед вызовом СформироватьВзаиморасчетыСРаботниками
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// взаиморасчеты с работниками
	
	// сначала удалим сведения о взаиморасчетах с работниками
	ВзаиморасчетыСРаботникамиОрганизаций = Движения.ВзаиморасчетыСРаботникамиОрганизаций;
	ПоследнееДвижение = ВзаиморасчетыСРаботникамиОрганизаций.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		// удалим записи по всем физлицам полученного списка
		// обходим в обратном порядке
		Если ФизлицаСписок.НайтиПоЗначению(ВзаиморасчетыСРаботникамиОрганизаций[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
			ВзаиморасчетыСРаботникамиОрганизаций.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	
	// ведется ли учет задолженности в разрезе периодов возникновения задолженности
	УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
	
	// теперь сформируем начисления к выплате по начислениям документа для перерассчитываемых работников
	СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, Движения.ВзаиморасчетыСРаботникамиОрганизаций, УчетЗадолженностиПоМесяцам, Истина, Физлица);
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Удалим записи перерасчета по которым выполнен перерасчет
	ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка);
	
КонецПроцедуры // Перерассчитать()

// Заполняет документ по перерассчитываемому документу
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Знач Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	
	Если Сотрудники = "ПоДаннымПерерасчета" Тогда
		
		Исправления = ПроведениеРасчетов.ПолучитьДокументИсправление(ПерерассчитываемыйДокумент, "КритерийОтбора"); 
		Запрос.УстановитьПараметр("Исправления", Исправления);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ЗамещаемыйСотрудник
		|ПОМЕСТИТЬ ВТСотрудникиИсправлений
		|ИЗ
		|	Документ.ОплатаСовмещенияСотрудников.ОсновныеНачисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка В(&Исправления)
		|	И Начисления.СторнируемыйДокумент = &ПерерассчитываемыйДокумент
		|	И Начисления.Сторно
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Сотрудник,
		|	СотрудникиОрганизаций.ЗамещаемыйСотрудник
		|ИЗ
		|	Документ.ОплатаСовмещенияСотрудников.ОсновныеНачисления КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &ПерерассчитываемыйДокумент
		|	И НЕ СотрудникиОрганизаций.Сотрудник В
		|				(ВЫБРАТЬ
		|					Начисления.Сотрудник
		|				ИЗ
		|					ВТСотрудникиИсправлений КАК Начисления)
		|	И СотрудникиОрганизаций.Физлицо В
		|			(ВЫБРАТЬ
		|				Перерасчет.ФизЛицо
		|			ИЗ
		|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|			ГДЕ
		|				Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент)";
		Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам", Сотрудники = Неопределено);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.Физлицо КАК Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	Начисления.ПодразделениеОрганизации,
	|	-Начисления.Результат - ЕСТЬNULL(СУММА(СторноНачисления.Результат), 0) КАК Результат,
	|	-Начисления.ОтработаноДней - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДней), 0) КАК ОтработаноДней,
	|	-Начисления.ОтработаноЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасов), 0) КАК ОтработаноЧасов,
	|	-Начисления.ОтработаноДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДнейПоПятидневке), 0) КАК ОтработаноДнейПоПятидневке,
	|	-Начисления.НормаДней - ЕСТЬNULL(СУММА(СторноНачисления.НормаДней), 0) КАК НормаДней,
	|	-Начисления.НормаЧасов - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасов), 0) КАК НормаЧасов,
	|	-Начисления.НормаДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаДнейПоПятидневке), 0) КАК НормаДнейПоПятидневке,
	|	-Начисления.ОплаченоДнейЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОплаченоДнейЧасов), 0) КАК ОплаченоДнейЧасов,
	|	-Начисления.ОтработаноЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасовПоПятидневке), 0) КАК ОтработаноЧасовПоПятидневке,
	|	-Начисления.НормаЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасовПоПятидневке), 0) КАК НормаЧасовПоПятидневке,
	|	Начисления.ДатаНачалаСобытия,
	|	Начисления.ОплачиватьЧасов,
	|	ИСТИНА КАК Сторно,
	|	ЛОЖЬ КАК Авторасчет,
	|	Начисления.Ссылка КАК СторнируемыйДокумент,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.ЗамещаемыйСотрудник
	|ИЗ
	|	Документ.ОплатаСовмещенияСотрудников.ОсновныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК СторноНачисления
	|		ПО Начисления.Сотрудник = СторноНачисления.Сотрудник
	|			И Начисления.ВидРасчета = СторноНачисления.ВидРасчета
	|			И (СторноНачисления.ПериодДействияНачало МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
	|			И (СторноНачисления.ПериодДействияКонец МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
	|			И (СторноНачисления.ПериодРегистрации > Начисления.Ссылка.ПериодРегистрации)
	|			И (СторноНачисления.ПериодРегистрации < &ПериодРегистрации)
	|			И (СторноНачисления.СторнируемыйДокумент = Начисления.Ссылка)
	|			И (СторноНачисления.Сторно)
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И НЕ Начисления.Сторно
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Начисления.Сотрудник В (&Сотрудники))
	|	И Начисления.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	Начисления.ПодразделениеОрганизации,
	|	Начисления.ДатаНачалаСобытия,
	|	Начисления.ОплачиватьЧасов,
	|	Начисления.НомерСтроки,
	|	Начисления.Результат,
	|	Начисления.ОтработаноДней,
	|	Начисления.ОтработаноЧасов,
	|	Начисления.ОтработаноДнейПоПятидневке,
	|	Начисления.НормаДней,
	|	Начисления.НормаЧасов,
	|	Начисления.НормаДнейПоПятидневке,
	|	Начисления.ОплаченоДнейЧасов,
	|	Начисления.ОтработаноЧасовПоПятидневке,
	|	Начисления.НормаЧасовПоПятидневке,
	|	Начисления.Ссылка,
	|	Начисления.ЗамещаемыйСотрудник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	Начисления.ПодразделениеОрганизации,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	Начисления.ДатаНачалаСобытия,
	|	Начисления.ОплачиватьЧасов,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	NULL,
	|	Начисления.НомерСтроки,
	|	Начисления.ЗамещаемыйСотрудник
	|ИЗ
	|	Документ.ОплатаСовмещенияСотрудников.ОсновныеНачисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И НЕ Начисления.Сторно
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Начисления.Сотрудник В (&Сотрудники))
	|	И Начисления.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сторно УБЫВ,
	|	НомерСтроки";
	
	ОсновныеНачисления.Загрузить(Запрос.Выполнить().Выгрузить());
	
	
	
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Добавляет строку сторно начислений в движения и табличную часть документа
//
Процедура ДобавитьСтрокуСторно(Движения, ТабличнаяЧасть, Строка)

	// новая запись движений
	Движение = Движения.Добавить();

    ЗаполнитьЗначенияСвойств(Движение,Строка,"БазовыйПериодНачало,БазовыйПериодКонец,ВидРасчета,Сотрудник,Физлицо,Организация," + 
									"ГрафикРаботы,ГрафикРаботыНорма,ВидУчетаВремени,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,ПодразделениеОрганизации,ОбособленноеПодразделение," + 
									"ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,СторнируемыйДокумент,ДатаНачалаСобытия");
	// Свойства
	Движение.ПериодРегистрации				= Строка.ПериодРегистрацииСторно;
	Движение.ПериодДействияНачало			= Строка.ПериодДействияНачалоСторно;
	Движение.ПериодДействияКонец			= Строка.ПериодДействияКонецСторно;
	Движение.Сторно							= Истина;
	Движение.Авторасчет						= Истина;

	// новая строка табличной части сторно начисления
	СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
    ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,Строка,"ВидРасчета,Сотрудник,Физлицо,ПодразделениеОрганизации,ДатаНачалаСобытия," + 
									"Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,СторнируемыйДокумент,Авторасчет");
	// Свойства
	
	СтрокаТабличнойЧасти.ДатаНачала						= Строка.ПериодДействияНачалоСторно;
	СтрокаТабличнойЧасти.ДатаОкончания					= Строка.ПериодДействияКонецСторно;
	СтрокаТабличнойЧасти.Сторно							= Истина;
	
КонецПроцедуры // ДобавитьСтрокуСторно()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());


	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОплатаСовмещенияСотрудников.Дата,
	|	ОплатаСовмещенияСотрудников.ПериодРегистрации,
	|	ОплатаСовмещенияСотрудников.Организация,
	|	ОплатаСовмещенияСотрудников.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	ОплатаСовмещенияСотрудников.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	ОплатаСовмещенияСотрудников.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ВЫБОР
	|		КОГДА ОплатаСовмещенияСотрудников.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА ОплатаСовмещенияСотрудников.Организация
	|		ИНАЧЕ ОплатаСовмещенияСотрудников.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ОплатаСовмещенияСотрудников.Организация КАК ОбособленноеПодразделение,
	|	ОплатаСовмещенияСотрудников.Ссылка
	|ИЗ
	|	Документ.ОплатаСовмещенияСотрудников КАК ОплатаСовмещенияСотрудников
	|ГДЕ
	|	ОплатаСовмещенияСотрудников.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоНачисленияДляРасчета(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	СписокСтруктурныхПодразделений = ПроцедурыУправленияПерсоналом.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",	СписокСтруктурныхПодразделений);

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ГоловнаяОрганизация);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиДокумента.Ссылка,
	|	СтрокиДокумента.НомерСтроки,
	|	СтрокиДокумента.ЗамещаемыйСотрудник КАК Сотрудник,
	|	СтрокиДокумента.Физлицо,
	|	СтрокиДокумента.ВидРасчета,
	|	НАЧАЛОПЕРИОДА(СтрокиДокумента.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
	|	СтрокиДокумента.ДатаНачала,
	|	СтрокиДокумента.ДатаОкончания,
	|	СтрокиДокумента.Показатель1,
	|	СтрокиДокумента.Показатель2,
	|	СтрокиДокумента.Показатель3,
	|	СтрокиДокумента.Показатель4,
	|	СтрокиДокумента.Показатель5,
	|	СтрокиДокумента.Показатель6,
	|	СтрокиДокумента.Результат,
	|	СтрокиДокумента.ПодразделениеОрганизации,
	//vvv
	|	СтрокиДокумента.Должность,
	//
	|	СтрокиДокумента.ОтработаноДней,
	|	СтрокиДокумента.ОтработаноЧасов,
	|	СтрокиДокумента.ОтработаноДнейПоПятидневке,
	|	СтрокиДокумента.НормаДней,
	|	СтрокиДокумента.НормаЧасов,
	|	СтрокиДокумента.НормаДнейПоПятидневке,
	|	СтрокиДокумента.ДатаНачалаСобытия,
	|	СтрокиДокумента.Сторно,
	|	СтрокиДокумента.Авторасчет,
	|	СтрокиДокумента.ОплачиватьЧасов,
	|	СтрокиДокумента.ОплаченоДнейЧасов,
	|	СтрокиДокумента.ОтработаноЧасовПоПятидневке,
	|	СтрокиДокумента.НормаЧасовПоПятидневке,
	|	СтрокиДокумента.СторнируемыйДокумент,
	|	ВЫБОР
	|		КОГДА СтрокиДокумента.Сторно
	|				И СтрокиДокумента.СторнируемыйДокумент = СтрокиДокумента.Ссылка.ПерерассчитываемыйДокумент
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтрокаИсправления
	|ПОМЕСТИТЬ ВТСтрокиНачислений
	|ИЗ
	|	Документ.ОплатаСовмещенияСотрудников.ОсновныеНачисления КАК СтрокиДокумента
	|ГДЕ
	|	СтрокиДокумента.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия";
	Запрос.Выполнить();
	
	// ВТГрафикиСотрудников
	//		таблица содержит номера строк документа с данными о графике указанного
	//		в этой строке сотрудника из рег-ра сведений РаботникиОрганизации
	// 
	//	Поля:
	//		НомерСтроки
	//      ГрафикРаботы
	//      ГрафикПолногоРабочегоВремени
	//      СуммированныйУчетРабочегоВремени
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоследниеДаты.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикПолногоРабочегоВремени,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|	КОНЕЦ КАК СуммированныйУчетРабочегоВремени
	|ПОМЕСТИТЬ ВТГрафикиСотрудников
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|		СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|		СтрокиНачисления.Сотрудник КАК Сотрудник,
	|		СтрокиНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия
	|	ИЗ
	|		ВТСтрокиНачислений КАК СтрокиНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ПО СтрокиНачисления.ДатаНачалаСобытия >= РаботникиОрганизации.Период
	|				И СтрокиНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СтрокиНачисления.НомерСтроки,
	|		СтрокиНачисления.Сотрудник,
	|		СтрокиНачисления.ДатаНачалаСобытия) КАК ПоследниеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ПоследниеДаты.МаксПериод = РаботникиОрганизации.Период
	|			И ПоследниеДаты.Сотрудник = РаботникиОрганизации.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	// ВТДанныеИндивидуальныхГрафиковИТабелей
	//		таблица содержит номера строк документа с сотрудниками, для которых введены 
	//		подробные документы использования времени: инд.графики и табели
	// 
	//	Поля:
	//		НомерСтроки
	//      План
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	ГрафикиРаботыПоВидамВремени.План КАК План
	|ПОМЕСТИТЬ ВТДанныеИндивидуальныхГрафиковИТабелей
	|ИЗ
	|	ВТСтрокиНачислений КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СтрокиНачисления.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И СтрокиНачисления.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	План";
	Запрос.Выполнить();
	
	// СводныеИндивидуальныеГрафикиРаботы
	//		таблица содержит номера строк документа с сотрудниками, для которых введены сводные 
	//		данные об их графике
	// 
	//	Поля:
	//		НомерСтроки
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокРаботников.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафикиРаботы
	|ИЗ
	|	ВТСтрокиНачислений КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО СписокРаботников.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И СписокРаботников.ПериодДействия = СводныеИндивидуальныеГрафики.Месяц
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.Сотрудник.Наименование,
	|	ТЧНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(ТЧНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ТЧНачисления.ДатаНачала, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТЧНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ТЧНачисления.ДатаОкончания, МЕСЯЦ, -1), МЕСЯЦ)
	|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			КОНЕЦ
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ТЧНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ТЧНачисления.ВидРасчета.ВидВремени КАК ВидВремени,
	|	ТЧНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ТЧНачисления.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	ТЧНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ПустаяСсылка)КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете,
	|	ТЧНачисления.Показатель1,
	|	ТЧНачисления.Показатель2,
	|	ТЧНачисления.Показатель3,
	|	ТЧНачисления.Показатель4,
	|	ТЧНачисления.Показатель5,
	|	ТЧНачисления.Показатель6,
	|	ТЧНачисления.Результат,
	|	ТЧНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	//vvv
	|	ТЧНачисления.Должность КАК Должность,
	//
	|	ВЫБОР
	|		КОГДА ГрафикРаботыПоСотруднику.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы
	|		ИНАЧЕ ТЧНачисления.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
			// если введен табель, но нет индивидуального графика, то норму времени надо считать по данным ""общего графика""
	|		КОГДА ТабелиУчетаВремениПоСотруднику.НомерСтроки ЕСТЬ НЕ NULL
	|				И ИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ NULL
	|				И СводныеИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы
			// если у работника сокращенное рабочее время, а норма времени определяется по полному графику
			// и введен индивидуальный график, то норму времени надо считать по-прежнему по данным ""общего графика""
	|		КОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|				И (ИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ НЕ NULL
	|					ИЛИ СводныеИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ НЕ NULL )
	|			ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикРаботыНорма,
	|	ЕСТЬNULL(ДанныеПоРаботникуНаДатуНачисления.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	ТЧНачисления.НормаДней,
	|	ТЧНачисления.НормаЧасов,
	|	ТЧНачисления.НормаДнейПоПятидневке,
	|	ТЧНачисления.ОплаченоДнейЧасов,
	|	ТЧНачисления.ОтработаноДней,
	|	ТЧНачисления.ОтработаноЧасов,
	|	ТЧНачисления.ОтработаноДнейПоПятидневке,
	|	ТЧНачисления.ОтработаноЧасовПоПятидневке,
	|	ТЧНачисления.НормаЧасовПоПятидневке,
	|	ТЧНачисления.Сторно,
	|	ТЧНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	ТЧНачисления.ОплачиватьЧасов КАК ОплачиватьЧасов,
	|	ТЧНачисления.СтрокаИсправления,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА (НЕ ТЧНачисления.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ТЧНачисления.Авторасчет,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сторно
	|			ТОГДА ТЧНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент
	|ИЗ
	|	ВТСтрокиНачислений КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСотрудников КАК ДанныеПоРаботникуНаДатуНачисления
	|		ПО ТЧНачисления.НомерСтроки = ДанныеПоРаботникуНаДатуНачисления.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК ТЧНачисления) КАК ГрафикРаботыПоСотруднику
	|		ПО ТЧНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК ТЧНачисления
	|		ГДЕ
	|			(НЕ ТЧНачисления.План)) КАК ТабелиУчетаВремениПоСотруднику
	|		ПО ТЧНачисления.НомерСтроки = ТабелиУчетаВремениПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК ТЧНачисления
	|		ГДЕ
	|			ТЧНачисления.План) КАК ИндивидуальныеГрафикиРаботы
	|		ПО ТЧНачисления.НомерСтроки = ИндивидуальныеГрафикиРаботы.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеИндивидуальныеГрафикиРаботы КАК СводныеИндивидуальныеГрафикиРаботы
	|		ПО ТЧНачисления.НомерСтроки = СводныеИндивидуальныеГрафикиРаботы.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	СписокСтруктурныхПодразделений = ПроцедурыУправленияПерсоналом.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",	СписокСтруктурныхПодразделений);

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ГоловнаяОрганизация);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиДокумента.Ссылка,
	|	СтрокиДокумента.НомерСтроки,
	|	СтрокиДокумента.Сотрудник КАК Сотрудник,
	|	СтрокиДокумента.Физлицо,
	|	СтрокиДокумента.ВидРасчета,
	|	НАЧАЛОПЕРИОДА(СтрокиДокумента.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
	|	СтрокиДокумента.ДатаНачала,
	|	СтрокиДокумента.ДатаОкончания,
	|	СтрокиДокумента.Показатель1,
	|	СтрокиДокумента.Показатель2,
	|	СтрокиДокумента.Показатель3,
	|	СтрокиДокумента.Показатель4,
	|	СтрокиДокумента.Показатель5,
	|	СтрокиДокумента.Показатель6,
	|	СтрокиДокумента.Результат,
	|	СтрокиДокумента.ПодразделениеОрганизации,
	//vvv
	|	СтрокиДокумента.Должность,
	//
	|	СтрокиДокумента.ОтработаноДней,
	|	СтрокиДокумента.ОтработаноЧасов,
	|	СтрокиДокумента.ОтработаноДнейПоПятидневке,
	|	СтрокиДокумента.НормаДней,
	|	СтрокиДокумента.НормаЧасов,
	|	СтрокиДокумента.НормаДнейПоПятидневке,
	|	СтрокиДокумента.ДатаНачалаСобытия,
	|	СтрокиДокумента.Сторно,
	|	СтрокиДокумента.Авторасчет,
	|	СтрокиДокумента.ОплачиватьЧасов,
	|	СтрокиДокумента.ОплаченоДнейЧасов,
	|	СтрокиДокумента.ОтработаноЧасовПоПятидневке,
	|	СтрокиДокумента.НормаЧасовПоПятидневке,
	|	СтрокиДокумента.СторнируемыйДокумент,
	|	ВЫБОР
	|		КОГДА СтрокиДокумента.Сторно
	|				И СтрокиДокумента.СторнируемыйДокумент = СтрокиДокумента.Ссылка.ПерерассчитываемыйДокумент
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтрокаИсправления
	|ПОМЕСТИТЬ ВТСтрокиНачислений
	|ИЗ
	|	Документ.ОплатаСовмещенияСотрудников.ОсновныеНачисления КАК СтрокиДокумента
	|ГДЕ
	|	СтрокиДокумента.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия";
	Запрос.Выполнить();
	
	// ВТГрафикиСотрудников
	//		таблица содержит номера строк документа с данными о графике указанного
	//		в этой строке сотрудника из рег-ра сведений РаботникиОрганизации
	// 
	//	Поля:
	//		НомерСтроки
	//      ГрафикРаботы
	//      ГрафикПолногоРабочегоВремени
	//      СуммированныйУчетРабочегоВремени
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоследниеДаты.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикПолногоРабочегоВремени,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|	КОНЕЦ КАК СуммированныйУчетРабочегоВремени
	|ПОМЕСТИТЬ ВТГрафикиСотрудников
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|		СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|		СтрокиНачисления.Сотрудник КАК Сотрудник,
	|		СтрокиНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия
	|	ИЗ
	|		ВТСтрокиНачислений КАК СтрокиНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ПО СтрокиНачисления.ДатаНачалаСобытия >= РаботникиОрганизации.Период
	|				И СтрокиНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СтрокиНачисления.НомерСтроки,
	|		СтрокиНачисления.Сотрудник,
	|		СтрокиНачисления.ДатаНачалаСобытия) КАК ПоследниеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ПоследниеДаты.МаксПериод = РаботникиОрганизации.Период
	|			И ПоследниеДаты.Сотрудник = РаботникиОрганизации.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	// ВТДанныеИндивидуальныхГрафиковИТабелей
	//		таблица содержит номера строк документа с сотрудниками, для которых введены 
	//		подробные документы использования времени: инд.графики и табели
	// 
	//	Поля:
	//		НомерСтроки
	//      План
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	ГрафикиРаботыПоВидамВремени.План КАК План
	|ПОМЕСТИТЬ ВТДанныеИндивидуальныхГрафиковИТабелей
	|ИЗ
	|	ВТСтрокиНачислений КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СтрокиНачисления.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И СтрокиНачисления.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	План";
	Запрос.Выполнить();
	
	// СводныеИндивидуальныеГрафикиРаботы
	//		таблица содержит номера строк документа с сотрудниками, для которых введены сводные 
	//		данные об их графике
	// 
	//	Поля:
	//		НомерСтроки
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокРаботников.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафикиРаботы
	|ИЗ
	|	ВТСтрокиНачислений КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО СписокРаботников.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И СписокРаботников.ПериодДействия = СводныеИндивидуальныеГрафики.Месяц
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.Сотрудник.Наименование,
	|	ТЧНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(ТЧНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ТЧНачисления.ДатаНачала, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТЧНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ТЧНачисления.ДатаОкончания, МЕСЯЦ, -1), МЕСЯЦ)
	|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			КОНЕЦ
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ТЧНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ТЧНачисления.ВидРасчета.ВидВремени КАК ВидВремени,
	|	ТЧНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ТЧНачисления.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	ТЧНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ПустаяСсылка)КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете,
	|	ТЧНачисления.Показатель1,
	|	ТЧНачисления.Показатель2,
	|	ТЧНачисления.Показатель3,
	|	ТЧНачисления.Показатель4,
	|	ТЧНачисления.Показатель5,
	|	ТЧНачисления.Показатель6,
	|	ТЧНачисления.Результат,
	|	ТЧНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	//vvv
	|	ТЧНачисления.Должность КАК Должность,
	//
	|	ВЫБОР
	|		КОГДА ГрафикРаботыПоСотруднику.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы
	|		ИНАЧЕ ТЧНачисления.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
			// если введен табель, но нет индивидуального графика, то норму времени надо считать по данным ""общего графика""
	|		КОГДА ТабелиУчетаВремениПоСотруднику.НомерСтроки ЕСТЬ НЕ NULL
	|				И ИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ NULL
	|				И СводныеИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы
			// если у работника сокращенное рабочее время, а норма времени определяется по полному графику
			// и введен индивидуальный график, то норму времени надо считать по-прежнему по данным ""общего графика""
	|		КОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|				И (ИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ НЕ NULL
	|					ИЛИ СводныеИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ НЕ NULL )
	|			ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикРаботыНорма,
	|	ЕСТЬNULL(ДанныеПоРаботникуНаДатуНачисления.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	ТЧНачисления.НормаДней,
	|	ТЧНачисления.НормаЧасов,
	|	ТЧНачисления.НормаДнейПоПятидневке,
	|	ТЧНачисления.ОплаченоДнейЧасов,
	|	ТЧНачисления.ОтработаноДней,
	|	ТЧНачисления.ОтработаноЧасов,
	|	ТЧНачисления.ОтработаноДнейПоПятидневке,
	|	ТЧНачисления.ОтработаноЧасовПоПятидневке,
	|	ТЧНачисления.НормаЧасовПоПятидневке,
	|	ТЧНачисления.Сторно,
	|	ТЧНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	ТЧНачисления.ОплачиватьЧасов КАК ОплачиватьЧасов,
	|	ТЧНачисления.СтрокаИсправления,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА (НЕ ТЧНачисления.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ТЧНачисления.Авторасчет,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сторно
	|			ТОГДА ТЧНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент
	|ИЗ
	|	ВТСтрокиНачислений КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСотрудников КАК ДанныеПоРаботникуНаДатуНачисления
	|		ПО ТЧНачисления.НомерСтроки = ДанныеПоРаботникуНаДатуНачисления.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК ТЧНачисления) КАК ГрафикРаботыПоСотруднику
	|		ПО ТЧНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК ТЧНачисления
	|		ГДЕ
	|			(НЕ ТЧНачисления.План)) КАК ТабелиУчетаВремениПоСотруднику
	|		ПО ТЧНачисления.НомерСтроки = ТабелиУчетаВремениПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК ТЧНачисления
	|		ГДЕ
	|			ТЧНачисления.План) КАК ИндивидуальныеГрафикиРаботы
	|		ПО ТЧНачисления.НомерСтроки = ИндивидуальныеГрафикиРаботы.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеИндивидуальныеГрафикиРаботы КАК СводныеИндивидуальныеГрафикиРаботы
	|		ПО ТЧНачисления.НомерСтроки = СводныеИндивидуальныеГрафикиРаботы.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, по которой выполняются начисления!", Отказ, Заголовок);
	КонецЕсли;
	
	//  ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан месяц, в котором выполняются начисления!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОсновныеНачисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан Сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
	КонецЕсли;	
	
		// Дата окончания
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
	Иначе
		Если ВыборкаПоСтрокамДокумента.ПериодДействияКонец < ВыборкаПоСтрокамДокумента.ПериодДействияНачало Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ, Заголовок);
			
		Иначе
			Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
		
	

	// Дата начала события
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала события!", Отказ, Заголовок);
	КонецЕсли;
			
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
		// Подразделение
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение организации!", Отказ, Заголовок);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
		КонецЕсли;
		
		// График работы
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "по состоянию на " + Формат(ВыборкаПоСтрокамДокумента.ПериодДействияНачало,"ДЛФ=DD") + " не задан рабочий график работника, либо он еще не принят на работу!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();

	// Свойства
	Движение.ПериодРегистрации				= ПериодРегистрации;
	Движение.ПериодДействияНачало			= ВыборкаПоСтрокамДокумента.ПериодДействияНачало;
	Движение.ПериодДействияКонец			= ВыборкаПоСтрокамДокумента.ПериодДействияКонец;
	Движение.БазовыйПериодНачало			= ВыборкаПоСтрокамДокумента.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец				= ВыборкаПоСтрокамДокумента.БазовыйПериодКонец;
	Движение.ВидРасчета						= ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно							= ВыборкаПоСтрокамДокумента.Сторно;

	// Измерения
	Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.ФизЛицо						= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// Ресурсы
	Движение.Результат						= ВыборкаПоСтрокамДокумента.Результат;
	// ресурсы по отработанному времени
	Если ВыборкаПоСтрокамДокумента.ЗачетОтработанногоВремени Тогда
		Движение.ОтработаноДней				= ВыборкаПоСтрокамДокумента.ОтработаноДней;
		Движение.ОтработаноЧасов			= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
		Движение.ОтработаноДнейПоПятидневке	= ВыборкаПоСтрокамДокумента.ОтработаноДнейПоПятидневке;
		Движение.ОтработаноЧасовПоПятидневке= ВыборкаПоСтрокамДокумента.ОтработаноЧасовПоПятидневке;
	КонецЕсли;
	// ресурсы по норме времени
	Если ВыборкаПоСтрокамДокумента.ЗачетНормыВремени Тогда
		Движение.НормаДней					= ВыборкаПоСтрокамДокумента.НормаДней;
		Движение.НормаЧасов					= ВыборкаПоСтрокамДокумента.НормаЧасов;
		Движение.НормаДнейПоПятидневке		= ВыборкаПоСтрокамДокумента.НормаДнейПоПятидневке;
		Движение.НормаЧасовПоПятидневке		= ВыборкаПоСтрокамДокумента.НормаЧасовПоПятидневке;
	КонецЕсли;
	Движение.ОплаченоДнейЧасов				= ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов;

	// Реквизиты
	Движение.ГрафикРаботы					= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
	Движение.ГрафикРаботыНорма				= ВыборкаПоСтрокамДокумента.ГрафикРаботыНорма;
	Движение.Показатель1					= ВыборкаПоСтрокамДокумента.Показатель1;
	Движение.Показатель2					= ВыборкаПоСтрокамДокумента.Показатель2;
	Движение.Показатель3					= ВыборкаПоСтрокамДокумента.Показатель3;
	Движение.Показатель4					= ВыборкаПоСтрокамДокумента.Показатель4;	
	Движение.Показатель5					= ВыборкаПоСтрокамДокумента.Показатель5;
	Движение.Показатель6					= ВыборкаПоСтрокамДокумента.Показатель6;	
	Движение.ВидУчетаВремени				= ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.СпособРасчета, ВыборкаПоСтрокамДокумента.ВидВремени, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);
	Движение.ПодразделениеОрганизации		= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	//vvv
	Движение.Должность						= ВыборкаПоСтрокамДокумента.Должность;
	//
	Движение.ОбособленноеПодразделение		= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.ДатаНачалаСобытия				= ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия;
	Движение.ВариантОбработкиЗаписиПриОтраженииВРеглУчете = ВыборкаПоСтрокамДокумента.ВариантОбработкиЗаписиПриОтраженииВРеглУчете;
	Движение.СторнируемыйДокумент			= ВыборкаПоСтрокамДокумента.СторнируемыйДокумент;
	Движение.Авторасчет						= ВыборкаПоСтрокамДокумента.Авторасчет;
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

// По выборке из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//	ВыборкаПоШапкеДокумента				- спозиционированная на определеной строке выборка 
//										  из результата запроса к документу 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, НаборЗаписей)
	
	//Если ВыборкаПоНачислениям.ЯвляетсяПочасовымОтклонением Тогда
	//	Движение = НаборЗаписей.Добавить();
	//	
	//	// Свойства
	//	Движение.Период = ВыборкаПоНачислениям.ПериодДействияНачало;
	//	
	//	// Измерения
	//	Движение.Сотрудник							= ВыборкаПоНачислениям.Сотрудник;
	//	Движение.Организация						= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	//	Движение.ВидИспользованияРабочегоВремени	= ВыборкаПоНачислениям.ВидИспользованияРабочегоВремени;
	//	
	//	// Ресурсы
	//	Движение.Часов								= ВыборкаПоНачислениям.ОплачиватьЧасов;
	//КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРабочегоВремени()

// получает доходы НДФЛ по табличным частям с доходами
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		
Процедура СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ДатаНалоговогоПериода", КонецГода(ПериодРегистрации));
	КодОплатыТрудаПоНДФЛ = Новый Массив;
	КодОплатыТрудаПоНДФЛ.Добавить(Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию);
	//КодОплатыТрудаПоНДФЛ.Добавить(Справочники.ДоходыНДФЛ.Код2012);
	Запрос.УстановитьПараметр("КодОплатыТрудаПоНДФЛ", КодОплатыТрудаПоНДФЛ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Доходы.Физлицо,
	|	Доходы.КодДохода,
	|	Доходы.Период,
	|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода,
	|	Доходы.КодВычета,
	|	СУММА(Доходы.СуммаВычета) КАК СуммаВычета,
	|	Доходы.ПодразделениеОрганизации,
	|	Доходы.ВидРасчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основные.Сотрудник.Физлицо КАК Физлицо,
	|		Основные.ВидРасчета.КодДоходаНДФЛ КАК КодДохода,
	|		ВЫБОР
	|			КОГДА Основные.ВидРасчета.КодДоходаНДФЛ В (&КодОплатыТрудаПоНДФЛ)
	|				ТОГДА Основные.ДатаНачала
	|			ИНАЧЕ Основные.Ссылка.ПериодРегистрации
	|		КОНЕЦ КАК Период,
	|		Основные.Результат КАК СуммаДохода,
	|		NULL КАК КодВычета,
	|		0 КАК СуммаВычета,
	|		Основные.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		Основные.ВидРасчета
	|	ИЗ
	|		Документ.ОплатаСовмещенияСотрудников.ОсновныеНачисления КАК Основные
	|	ГДЕ
	|		Основные.Ссылка = &парамСсылка
	|		И Основные.ВидРасчета.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)
	|		И Основные.Результат <> 0) КАК Доходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.Физлицо,
	|	Доходы.КодДохода,
	|	Доходы.Период,
	|	Доходы.КодВычета,
	|	Доходы.ПодразделениеОрганизации,
	|	Доходы.ВидРасчета";
	
	ДоходыПоКодам = Запрос.Выполнить().Выбрать();
	// сформируем движения НДФЛСведенияОДоходах
	Пока ДоходыПоКодам.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// свойства
		Движение.Период						= ДоходыПоКодам.Период;
		
		// измерения 
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.Физлицо					= ДоходыПоКодам.Физлицо;
		Движение.КодДохода					= ДоходыПоКодам.КодДохода;
		Движение.ПериодРегистрации			= НачалоМесяца(ПериодРегистрации);
		
		// ресурсы
		Движение.СуммаДохода				= ДоходыПоКодам.СуммаДохода;
		Движение.СуммаВычета				= ДоходыПоКодам.СуммаВычета;
		
		// реквизиты
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.КодВычета					= ДоходыПоКодам.КодВычета;
		Движение.ИсчисленоИзЗарплаты		= Истина;
		Движение.ПодразделениеОрганизации	= ДоходыПоКодам.ПодразделениеОрганизации;
		Движение.ВидРасчета                 = ДоходыПоКодам.ВидРасчета;
	КонецЦикла;
КонецПроцедуры // СформироватьДоходыПоКодамНДФЛ()

// Вычисляет разницу между начислениями и удержаниями работника и формирует
// движения по взаиморасчетам с работниками
//
// Параметры:
//	ВыборкаПоШапкеДокумента	- спозиционированная выборка по шапке документа
//	НаборЗаписей			- набор записей 
//	Перерасчет				- признак проведения перерасчетов, по умолчанию - Ложь
//	Физлица					- список физлиц, по которым производится расчет, по умолчанию - отсутствует
//
// Возвращаемое значение:
//	Нет.
//	
Процедура СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, НаборЗаписей, УчетЗадолженностиПоМесяцам, Перерасчет = Ложь, Физлица = Неопределено)
	
	Если Перерасчет Тогда
		Если Физлица = Неопределено Тогда
			// таблица ФизлицаДляПерерасчета
			// Список физлиц по которым необходимо выполнить перерасчет
			// Поля:
			//		ФизЛицо
			// Описание:
			// Получает список неповторяющихся физлиц по которым есть записи
			// перерасчета в одной из таблиц перерасчета - по основным или дополнительным начислениям
			//
			ФизлицаДляПерерасчетаТекст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Перерасчет.ФизЛицо
			|ИЗ
			|	(ВЫБРАТЬ
			|		Перерасчет.ФизЛицо
			|	ИЗ
			|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
			|	
			|	ГДЕ
			|		Перерасчет.ОбъектПерерасчета = &парамСсылка";
			
			// НачисленияРаботников
			//	Поля:
			//		Физлицо
			//		СуммаДохода - сумма "к выплате" - увличение состояния взаиморасчета с работником
			//
			
			НачисленияРаботниковТекст = 
			"ВЫБРАТЬ
			|	Доходы.Физлицо,
			|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
			|ИЗ
			|	(ВЫБРАТЬ
			|		Основные.Сотрудник.Физлицо КАК Физлицо,
			|		Основные.Результат КАК СуммаДохода
			|	ИЗ
			|		Документ.ОплатаСовмещенияСотрудников.ОсновныеНачисления КАК Основные
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ФизлицаДляПерерасчетаТекст + ") КАК ФизлицаДляПерерасчета
			|			ПО ФизлицаДляПерерасчета.ФизЛицо = Основные.Сотрудник.Физлицо
			|	
			|	ГДЕ
			|		Основные.Ссылка = &парамСсылка И
			|		(Основные.Результат <> 0)
			|		И (НЕ Основные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме)) КАК Доходы
			|	
			|СГРУППИРОВАТЬ ПО
			|	Доходы.Физлицо";
			
			Запрос = Новый Запрос(НачисленияРаботниковТекст);
		Иначе
			
			НачисленияРаботниковТекст = 
			"ВЫБРАТЬ
			|	Доходы.Физлицо,
			|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
			|ИЗ
			|	(ВЫБРАТЬ
			|		Основные.Сотрудник.Физлицо КАК Физлицо,
			|		Основные.Результат КАК СуммаДохода
			|	ИЗ
			|		Документ.ОплатаСовмещенияСотрудников.ОсновныеНачисления КАК Основные
			|	ГДЕ
			|		Основные.Физлицо В(&парамФизлица)
			|		И Основные.Ссылка = &парамСсылка
			|		И Основные.Результат <> 0
			|		И (НЕ Основные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме)) КАК Доходы
			|
			|СГРУППИРОВАТЬ ПО
			|	Доходы.Физлицо";
			
			Запрос = Новый Запрос(НачисленияРаботниковТекст);
			Запрос.УстановитьПараметр("парамФизлица", Физлица);
			
		КонецЕсли;
	Иначе
		НачисленияРаботниковТекст = 
		"ВЫБРАТЬ
		|	Доходы.Физлицо,
		|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основные.Сотрудник.Физлицо КАК Физлицо,
		|		Основные.Результат КАК СуммаДохода
		|	ИЗ
		|		Документ.ОплатаСовмещенияСотрудников.ОсновныеНачисления КАК Основные
		|	ГДЕ
		|		Основные.Ссылка = &парамСсылка
		|		И Основные.Результат <> 0
		|		И (НЕ Основные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме)) КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Физлицо";
		
		Запрос = Новый Запрос(НачисленияРаботниковТекст);
		
	КонецЕсли;
		
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка" , Ссылка);
	
	Доходы = Запрос.Выполнить().Выбрать();
	// сформируем движения ВзаиморасчетыСРаботникамиОрганизаций
	Пока Доходы.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// свойства
		Движение.Период					= КонецМесяца(ПериодРегистрации);
		Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
		
		// измерения 
		Движение.Физлицо				= Доходы.Физлицо;
		Движение.Организация			= Организация;
		//vvv комментируем
		//Если УчетЗадолженностиПоМесяцам Тогда
			Движение.ПериодВзаиморасчетов	= ПериодРегистрации;
		//КонецЕсли;
		
		// ресурсы
		Движение.СуммаВзаиморасчетов	= Доходы.СуммаДохода;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьВзаиморасчетыСРаботниками()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	ПерерассчитываемыйДокумент = Неопределено
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// Получение учетной политики по персоналу организации
			// ведется ли учет задолженности в разрезе периодов возникновения задолженности
			УчетЗадолженностиПоМесяцам = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
		
			////////////////////////////////////////////////////////////////////////
			// основные Начисления

			Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
			
			// получим реквизиты табличной части
			ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента).Выбрать();

			Пока ВыборкаПоНачислениям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, Движения.ОсновныеНачисленияРаботниковОрганизаций);
					ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ВнутрисменноеВремяРаботниковОрганизаций);
				КонецЕсли;
			КонецЦикла;

						
			////////////////////////////////////////////////////////////////////////
			// доходы НДФЛ
			
			// сформируем доходы НДФЛ по начислениям документа
			СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, Движения.НДФЛСведенияОДоходах);
			
			////////////////////////////////////////////////////////////////////////
			// взаиморасчеты с работниками
			
			// сформируем начисления к выплате по начислениям документа
			СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, Движения.ВзаиморасчетыСРаботникамиОрганизаций, УчетЗадолженностиПоМесяцам);

			// выполним удаление перерасчетов исправленного документа
			Если Не Отказ И ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
				ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка, Истина); // Только по исправленным документам
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
    Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ОсновныеНачисления);
			
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ


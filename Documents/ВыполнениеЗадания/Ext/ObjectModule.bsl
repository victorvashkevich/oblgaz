////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

// Механизм исправлений
Перем мВосстанавливатьДвижения;
Перем мСоответствиеДвижений;
Перем мИсправляемыйДокумент;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//	Название макета печати передается в качестве параметра,
//	по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета	- строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт


	Если ИмяМакета="Задание" ТОгда
		Если Не Проведен Тогда
			Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		ТабДокумент=ПечатьЗадания();
	ИначеЕсли ИмяМакета="ЗаданиеСвод" ТОгда
		Если Не Проведен Тогда
			Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		ТабДокумент=ПечатьЗадания(Ложь);	
	ИначеЕсли ИмяМакета = "НарядЗадание" ТОгда
		ТабДокумент=ПечатьНарядЗадание();	
	КонецЕсли;
	
	Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним));
	
КонецФункции // Печать()

#КонецЕсли
// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//	Струткура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;	
	
	СтруктураМакетов.Вставить("Задание","Выполненные задания по сотрудникам");
	СтруктураМакетов.Вставить("ЗаданиеСвод","Выполненные задания (свод)");
	СтруктураМакетов.Вставить("НарядЗадание","Наряд-задание (18-ОФ)");
	Возврат СтруктураМакетов;


КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыдачаЗадания.Дата,
	|	ВыдачаЗадания.ДатаЗадания,
	|	ВыдачаЗадания.Номер,
	|	ВыдачаЗадания.Организация,
	|	ВыдачаЗадания.Мастер,
	|	ВыдачаЗадания.НомерМегаполис,
	|	ВыдачаЗадания.ВыдачаЗаданияСсылка,
	|	ВЫБОР
	|		КОГДА ВыдачаЗадания.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВыдачаЗадания.Организация
	|		ИНАЧЕ ВыдачаЗадания.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация
	|ИЗ
	|	Документ.ВыполнениеЗадания КАК ВыдачаЗадания
	|ГДЕ
	|	ВыдачаЗадания.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();


КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса. В запросе данные документа дополняются значениями
//	проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование,
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧРаботникиОрганизации.ВидРаботы.Наименование КАК ВидРаботы,
	|	ТЧРаботникиОрганизации.ВидРаботы.КодПоПрейскуранту КАК КодРаботы,
	|	ТЧРаботникиОрганизации.ПродолжительностьРаботы,
	|	ТЧРаботникиОрганизации.Количество,
	|	ТЧРаботникиОрганизации.ВидРаботы КАК ВидРаботыСсылка,
	|	ТЧРаботникиОрганизации.ШтатнаяЕдиница КАК Исполнитель,
	|	ТЧРаботникиОрганизации.Стоимость,
	|	ТЧРаботникиОрганизации.Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.Ссылка.Дата
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок
	|	КОНЕЦ КАК ЗанимаемыхСтавок,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ
	|	Документ.ВыполнениеЗадания.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(Работники.Период) КАК Период
	|		ИЗ
	|			Документ.ВыполнениеЗадания.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|				ПО (Работники.Период <= ТЧРаботникиОрганизации.Ссылка.Дата)
	|					И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
	|			И ТЧРаботникиОрганизации.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.НомерСтроки";
	//|	ТЧРаботникиОрганизации.ВидРаботы";
		
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

Функция СформироватьЗапросПоРаботникиОрганизацииДляПечати(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование,
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧРаботникиОрганизации.ВидРаботы.Наименование КАК ВидРаботы,
	|	ТЧРаботникиОрганизации.ВидРаботы.КодПоПрейскуранту КАК КодРаботы,
	|	ТЧРаботникиОрганизации.ПродолжительностьРаботы,
	|	ТЧРаботникиОрганизации.Количество,
	|	ТЧРаботникиОрганизации.ВидРаботы КАК ВидРаботыСсылка,
	|	ТЧРаботникиОрганизации.ШтатнаяЕдиница КАК Исполнитель,
	|	ТЧРаботникиОрганизации.Стоимость,
	|	ТЧРаботникиОрганизации.Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.Ссылка.Дата
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок
	|	КОНЕЦ КАК ЗанимаемыхСтавок,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.Ссылка.Дата
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения.НаименованиеСокр
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.Должность.НаименованиеСокр
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.Ссылка.Дата
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.РазрядЕТСЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.РазрядЕТС
	|	КОНЕЦ КАК Разряд,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ
	|	Документ.ВыполнениеЗадания.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(Работники.Период) КАК Период
	|		ИЗ
	|			Документ.ВыполнениеЗадания.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|				ПО (Работники.Период <= ТЧРаботникиОрганизации.Ссылка.Дата)
	|					И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
	|			И ТЧРаботникиОрганизации.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.НомерСтроки";
	//|	ТЧРаботникиОрганизации.ВидРаботы";
		
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

Функция СформироватьЗапросПоРаботникиОрганизацииДляПечатиСвод(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботникиОрганизации.ВидРаботы.Наименование КАК ВидРаботы,
	|	ТЧРаботникиОрганизации.ВидРаботы.КодПоПрейскуранту КАК КодРаботы,
	|	ТЧРаботникиОрганизации.ШтатнаяЕдиница КАК Исполнитель,
	|	СУММА(ТЧРаботникиОрганизации.ПродолжительностьРаботы) КАК ПродолжительностьРаботы,
	|	СУММА(ТЧРаботникиОрганизации.Количество) КАК Количество,
	|	ТЧРаботникиОрганизации.ВидРаботы КАК ВидРаботыСсылка,
	|	СУММА(ТЧРаботникиОрганизации.Стоимость) КАК Стоимость,
	|	СУММА(ТЧРаботникиОрганизации.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ВыполнениеЗадания.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(Работники.Период) КАК Период
	|		ИЗ
	|			Документ.ВыполнениеЗадания.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|				ПО (Работники.Период <= ТЧРаботникиОрганизации.Ссылка.Дата)
	|					И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
	|			И ТЧРаботникиОрганизации.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧРаботникиОрганизации.ВидРаботы.Наименование,
	|	ТЧРаботникиОрганизации.ВидРаботы.КодПоПрейскуранту,
	|	ТЧРаботникиОрганизации.ШтатнаяЕдиница,
	|	ТЧРаботникиОрганизации.ВидРаботы";
		
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, работники которой отправляются в отпуск!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВыдачаЗаданияСсылка) И (ВыборкаПоШапкеДокумента.НомерМегаполис="") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан документ выдачи задания!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка
//								  из результата запроса по работникам,
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники организации"": ";

	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	Если НетСотрудника Тогда
		Возврат;
	КонецЕсли;
		
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
		
	// Проверка: ранее работник должен быть принят на работу
	Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = NULL Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоШапкеДокумента.Дата, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда	
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоШапкеДокумента.Дата, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//	ВыборкаПоРаботникиОрганизации
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)

			
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		Если НЕ Отказ Тогда
			
			ВыборкаПоРаботникиОрганизации = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);							
			
			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);

				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации);

				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаЗаполнения" модуля объекта
//
Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.ВыдачаЗадания") Тогда	
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Основание,,"Номер");
		
		Для Каждого Стр Из Основание.РаботникиОрганизации Цикл
			НоваяСтрока=РаботникиОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			НоваяСтрока.ВидРаботы=Стр.ВидРаботыСсылка;
		КОнецЦикла;
		
		ВыдачаЗаданияСсылка=Основание;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);	
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция  ПечатьЗадания(ПоСотрудникам=Истина)
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("Задание");
	// Шапка
	Шапка = Макет.ПолучитьОбласть("Шапка");
	
	ВыборкаПоШапке=СформироватьЗапросПоШапке().Выбрать();;
	
	Если ВыборкаПоШапке.Следующий()>0 Тогда
		
		Шапка.Параметры.Заполнить(ВыборкаПоШапке);
		Шапка.Параметры.ДатаЗадания=Формат(ВыборкаПоШапке.ДатаЗадания,"ДФ=dd.MM.yyyy");
		ОбластьРаботникиОрганизации = Макет.ПолучитьОбласть("Строка");
		
		ВыборкаПоРаботникам=СформироватьЗапросПоРаботникиОрганизацииДляПечати(ВыборкаПоШапке).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ПоСотрудникам ТОгда
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("Сотрудник")>0 Цикл
				Шапка.Параметры.Сотрудник=ВыборкаПоРаботникам.Сотрудник;
				Шапка.Параметры.Должность=СокрЛП(ВыборкаПоРаботникам.Должность)+?(СокрЛП(ВыборкаПоРаботникам.Разряд)<>""," "+СокрЛП(ВыборкаПоРаботникам.Разряд)+" разряда","");
				ТабДок.Вывести(Шапка);		
				ИтогоЧасов=0;
				ИтогоСтоимость=0;
				ИтогоКоличество=0;
				ИтогоСумма=0;			
				НомерПП=1;
				Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки")>0 Цикл
					ОбластьРаботникиОрганизации.Параметры.Заполнить(ВыборкаПоРаботникам);				
					ОбластьРаботникиОрганизации.Параметры.ВидРаботы=ВыборкаПоРаботникам.КодРаботы+" "+СтрЗаменить(ВыборкаПоРаботникам.ВидРаботыСсылка.ПолноеНаименование(),"ПРЕЙСКУРАНТЫ ОБЛГАЗА/","");				
					ОбластьРаботникиОрганизации.Параметры.НомерПП=НомерПП;
					ТабДок.Вывести(ОбластьРаботникиОрганизации);
					ИтогоЧасов=ИтогоЧасов+ВыборкаПоРаботникам.ПродолжительностьРаботы;
					ИтогоСтоимость=ИтогоСтоимость+ВыборкаПоРаботникам.Стоимость;
					ИтогоСумма=ИтогоСумма+ВыборкаПоРаботникам.Сумма;
					ИтогоКоличество=ИтогоКоличество+ВыборкаПоРаботникам.Количество;
					НомерПП=НомерПП+1;
				КонецЦикла;		
				
				ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
				ОбластьПодвал.Параметры.ИтогоЧасов=ИтогоЧасов;
				ОбластьПодвал.Параметры.ИтогоСумма=ИтогоСумма;
				ОбластьПодвал.Параметры.ИтогоСтоимость=ИтогоСтоимость;
				ОбластьПодвал.Параметры.ИтогоКоличество=ИтогоКоличество;
				ОбластьПодвал.Параметры.Мастер=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоШапке.Мастер);
				ОбластьПодвал.Параметры.Сотрудник=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботникам.Сотрудник);
				ОбластьПодвал.Параметры.Сотрудник=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(Ответственный.ФизЛицо);
				ТабДок.Вывести(ОбластьПодвал);

			
			КонецЦикла;
		Иначе
			
			СтрокаСотрудник="";
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("Сотрудник")>0 Цикл
				СтрокаСотрудник = СтрокаСотрудник+СТрока(ВыборкаПоРаботникам.Сотрудник)+Символы.ПС;
			КонецЦикла;
			
			//Шапка.Параметры.Сотрудник = Лев(СтрокаСотрудник,СтрДлина(СтрокаСотрудник)-2);
			Шапка.Параметры.Сотрудник = СтрокаСотрудник;
			Шапка.Параметры.Должность="";
			ТабДок.Вывести(Шапка);		
			ИтогоЧасов=0;
			ИтогоСтоимость=0;
			ИтогоКоличество=0;
			ИтогоСумма=0;			
			НомерПП=1;
			ВыборкаПоРаботникам = СформироватьЗапросПоРаботникиОрганизацииДляПечатиСвод(ВыборкаПоШапке).Выбрать();			
			
			Пока ВыборкаПоРаботникам.Следующий()>0 Цикл
				
				ОбластьРаботникиОрганизации.Параметры.Заполнить(ВыборкаПоРаботникам);				
				ОбластьРаботникиОрганизации.Параметры.ВидРаботы=ВыборкаПоРаботникам.КодРаботы+" "+СтрЗаменить(ВыборкаПоРаботникам.ВидРаботыСсылка.ПолноеНаименование(),"ПРЕЙСКУРАНТЫ ОБЛГАЗА/","");				
				ОбластьРаботникиОрганизации.Параметры.НомерПП=НомерПП;
				ТабДок.Вывести(ОбластьРаботникиОрганизации);
				ИтогоЧасов=ИтогоЧасов+ВыборкаПоРаботникам.ПродолжительностьРаботы;
				ИтогоСтоимость=ИтогоСтоимость+ВыборкаПоРаботникам.Стоимость;
				ИтогоСумма=ИтогоСумма+ВыборкаПоРаботникам.Сумма;
				ИтогоКоличество=ИтогоКоличество+ВыборкаПоРаботникам.Количество;
				НомерПП=НомерПП+1;
				
			КонецЦикла;		
				
			ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
			ОбластьПодвал.Параметры.ИтогоЧасов=ИтогоЧасов;
			ОбластьПодвал.Параметры.ИтогоСумма=ИтогоСумма;
			ОбластьПодвал.Параметры.ИтогоСтоимость=ИтогоСтоимость;
			ОбластьПодвал.Параметры.ИтогоКоличество=ИтогоКоличество;
			ОбластьПодвал.Параметры.Мастер=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоШапке.Мастер);
			ОбластьПодвал.Параметры.Сотрудник=УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(Ответственный.ФизЛицо);
			ТабДок.Вывести(ОбластьПодвал);
			
				
		КонецЕсли;
		
			
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.АвтоМасштаб=Истина;
		ТабДок.ОриентацияСтраницы=ОриентацияСтраницы.Портрет;
		ТабДок.Защита = Ложь;
		ТабДок.ТолькоПросмотр = Истина;
		ТабДок.ОтображатьЗаголовки = Ложь;
	КонецЕсли;
	
	Возврат ТабДок;
	
КонецФункции


Функция  ПечатьНарядЗадание()
	
	ТабДок = Новый ТабличныйДокумент;
	
	ВыборкаПоШапке=СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапке.Следующий();
	
	Макет = ПолучитьМакет("НарядЗадание");
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ШапкаТалицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ШапкаИнструктаж = Макет.ПолучитьОбласть("ШапкаИнструктаж");
	Строка = Макет.ПолучитьОбласть("Строка");
	Строка1 = Макет.ПолучитьОбласть("Строка1");
	СтрокаИнструктаж = Макет.ПолучитьОбласть("СтрокаИнструктаж");
	Подвал = Макет.ПолучитьОбласть("Подвал");
	СекцияВыдал = Макет.ПолучитьОбласть("Выдал");
	СекцияПолучил = Макет.ПолучитьОбласть("Получил");
	СекцияВыполнил = Макет.ПолучитьОбласть("Выполнил");
	СекцияПринял = Макет.ПолучитьОбласть("Принял");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВыполнениеЗаданияРаботникиОрганизации.ПродолжительностьРаботы) КАК Факт,
	|	СУММА(ВыдачаЗаданияРаботникиОрганизации.ПродолжительностьРаботы) КАК План,
	|	ВыполнениеЗаданияРаботникиОрганизации.АдресВыполненияРаботы КАК Адрес,
	|	ВыдачаЗаданияРаботникиОрганизации.ВидРаботы КАК ВидРаботыКраткий,
	|	ВыполнениеЗаданияРаботникиОрганизации.ВидРаботы.Родитель КАК ВидРаботыРодитель,
	|	ВыполнениеЗаданияРаботникиОрганизации.ВидРаботы КАК ВидРаботы
	|ИЗ
	|	Документ.ВыполнениеЗадания.РаботникиОрганизации КАК ВыполнениеЗаданияРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыдачаЗадания.РаботникиОрганизации КАК ВыдачаЗаданияРаботникиОрганизации
	|		ПО ВыполнениеЗаданияРаботникиОрганизации.Ссылка.ВыдачаЗаданияСсылка = ВыдачаЗаданияРаботникиОрганизации.Ссылка
	|			И ВыполнениеЗаданияРаботникиОрганизации.Сотрудник = ВыдачаЗаданияРаботникиОрганизации.Сотрудник
	//|			И ВыполнениеЗаданияРаботникиОрганизации.АдресВыполненияРаботы = ВыдачаЗаданияРаботникиОрганизации.АдресВыполненияРаботы
	|			И ВыполнениеЗаданияРаботникиОрганизации.ВидРаботы = ВыдачаЗаданияРаботникиОрганизации.ВидРаботыСсылка
	|ГДЕ
	|	ВыполнениеЗаданияРаботникиОрганизации.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыполнениеЗаданияРаботникиОрганизации.АдресВыполненияРаботы,
	|	ВыдачаЗаданияРаботникиОрганизации.ВидРаботы,
	|	ВыполнениеЗаданияРаботникиОрганизации.ВидРаботы.Родитель,
	|	ВыполнениеЗаданияРаботникиОрганизации.ВидРаботы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыполнениеЗаданияРаботникиОрганизации.АдресВыполненияРаботы,
	|	ВыполнениеЗаданияРаботникиОрганизации.ВидРаботы";
	
	
	ЗапросПоИсполнителям = Новый Запрос;
	ЗапросПоИсполнителям.УстановитьПараметр("Ссылка",Ссылка);
	ЗапросПоИсполнителям.УстановитьПараметр("КонецПериода",Дата);
	ЗапросПоИсполнителям.УстановитьПараметр("Организация",Организация);
	ЗапросПоИсполнителям.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыполнениеЗадания.Мастер КАК Сотрудник,
	|	ИСТИНА КАК Мастер
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.ВыполнениеЗадания КАК ВыполнениеЗадания
	|ГДЕ
	|	ВыполнениеЗадания.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыполнениеЗаданияРаботникиОрганизации.Сотрудник,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ВыполнениеЗадания.РаботникиОрганизации КАК ВыполнениеЗаданияРаботникиОрганизации
	|ГДЕ
	|	ВыполнениеЗаданияРаботникиОрганизации.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
	//|	РаботникиОрганизаций.Сотрудник.Физлицо КАК ФизЛицо,
	|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|	Сотрудники.Мастер КАК Мастер,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= &КонецПериода
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения
	|		ИНАЧЕ РаботникиОрганизаций.ОбособленноеПодразделение
	|	КОНЕЦ КАК Организация
	|ПОМЕСТИТЬ ВТДатыПоследнихДвижений
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
	|		ПО (Сотрудники.Сотрудник = РаботникиОрганизаций.Сотрудник)
	|ГДЕ
	|	РаботникиОрганизаций.Период <= &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	//|	РаботникиОрганизаций.Сотрудник.Физлицо,
	|	РаботникиОрганизаций.Сотрудник,
	|	Сотрудники.Мастер,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= &КонецПериода
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения
	|		ИНАЧЕ РаботникиОрганизаций.ОбособленноеПодразделение
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатыПоследнихДвижений.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДатыПоследнихДвижений.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ДатыПоследнихДвижений.Организация
	|		ИНАЧЕ ДатыПоследнихДвижений.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо,
	|	ДатыПоследнихДвижений.Мастер КАК Мастер,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &КонецПериода
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность.Наименование
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &КонецПериода
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения.НаименованиеСокр
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность.НаименованиеСокр
	|	КОНЕЦ КАК ДолжностьСокр,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &КонецПериода
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.РазрядЕТСЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.РазрядЕТС
	|	КОНЕЦ КАК Разряд
	|ИЗ
	|	ВТДатыПоследнихДвижений КАК ДатыПоследнихДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийСрезПоследних
	|		ПО ДатыПоследнихДвижений.Период = РаботникиОрганизацийСрезПоследних.Период
	//|			И ДатыПоследнихДвижений.ФизЛицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
	|			И ДатыПоследнихДвижений.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
	|ГДЕ
	|	ДатыПоследнихДвижений.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Мастер УБЫВ";
	
	ВыборкаИсполнителей = ЗапросПоИсполнителям.Выполнить().Выбрать();
	
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Шапка.Параметры.Организация = ВыборкаПоШапке.Организация;
	Шапка.Параметры.ДатаЗадания=Формат(ВыборкаПоШапке.ДатаЗадания,"ДЛФ=ДД");
	
	ТабДок.Вывести(Шапка);
	
	ПечМастер = "";
	ПечДолжность = "";
	Пока ВыборкаИсполнителей.Следующий() Цикл
		
		Должность=?(СокрЛП(ВыборкаИсполнителей.ДолжностьСокр)<>"",СокрЛП(ВыборкаИсполнителей.ДолжностьСокр),СокрЛП(ВыборкаИсполнителей.Должность));
		
		Если ВыборкаИсполнителей.Мастер Тогда
						
			СекцияВыдал.Параметры.Должность = Должность;
			СекцияВыдал.Параметры.ДатаЗадания = Формат(ВыборкаПоШапке.ДатаЗадания,"ДЛФ=ДД");
			СекцияВыдал.Параметры.ИОФамилия = ПроцедурыУправленияПерсоналом.ФамилияИнициалыФизЛица(ВыборкаИсполнителей.ФизЛицо);
			ПечМастер  = ПроцедурыУправленияПерсоналом.ФамилияИнициалыФизЛица(ВыборкаИсполнителей.ФизЛицо);
			ПечДолжность = Должность;
			ТабДок.Вывести(СекцияВыдал);
			
		Иначе
			
			СекцияПолучил.Параметры.Должность = Должность+" "+?(СокрЛП(ВыборкаИсполнителей.Разряд)<>"",СокрЛП(ВыборкаИсполнителей.Разряд)+" разр.","");
			СекцияПолучил.Параметры.ДатаЗадания = Формат(ВыборкаПоШапке.ДатаЗадания,"ДЛФ=ДД");
			СекцияПолучил.Параметры.ИОФамилия = ПроцедурыУправленияПерсоналом.ФамилияИнициалыФизЛица(ВыборкаИсполнителей.ФизЛицо);
			ТабДок.Вывести(СекцияПолучил);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабДок.Вывести(ШапкаИнструктаж);
	
	Нпп=1;
	
	ВыборкаИсполнителей.Сбросить();
	
	Пока ВыборкаИсполнителей.Следующий() Цикл
		
		Если ВыборкаИсполнителей.Мастер Тогда					
			Продолжить;
		КонецЕсли;		

		
		Должность=?(СокрЛП(ВыборкаИсполнителей.ДолжностьСокр)<>"",СокрЛП(ВыборкаИсполнителей.ДолжностьСокр),СокрЛП(ВыборкаИсполнителей.Должность));
					
		СтрокаИнструктаж.Параметры.Должность = Должность+" "+?(СокрЛП(ВыборкаИсполнителей.Разряд)<>"",СокрЛП(ВыборкаИсполнителей.Разряд)+" разр.","");
		СтрокаИнструктаж.Параметры.ИОФамилия = ПроцедурыУправленияПерсоналом.ФамилияИнициалыФизЛица(ВыборкаИсполнителей.ФизЛицо);
		СтрокаИнструктаж.Параметры.НПП=Нпп;
		СтрокаИнструктаж.Параметры.Мастер=ПечДолжность+" "+ПечМастер;
		ТабДок.Вывести(СтрокаИнструктаж);
		Нпп=Нпп+1;
		
	КонецЦикла;

	ТабДок.Вывести(ШапкаТалицы);
	
	Пока Выборка.СледующийПоЗначениюПоля("Адрес") Цикл
		
		ПервыйПроход = Истина;
		
		Пока Выборка.СледующийПоЗначениюПоля("ВидРаботы") Цикл
			
			НужнаяСекция = ?(ПервыйПроход, Строка,Строка1);
			НужнаяСекция.Параметры.Заполнить(Выборка);				
			//Адрес = ?(СокрЛП(Выборка.Адрес)="","<не указан>",Выборка.Адрес);
			Адрес = СокрЛП(Выборка.Адрес);
			//добавим родителя, чтобы было понятней
			НужнаяСекция.Параметры.ВидРаботы = Строка(Выборка.ВидРаботыРодитель)+"/"+Строка(Выборка.ВидРаботы);
			
			Если НужнаяСекция = Строка Тогда
				НужнаяСекция.Параметры.Адрес = Адрес;
			КонецЕсли;
	
			ТабДок.Вывести(НужнаяСекция);
			ПервыйПроход = Ложь;
			
		КонецЦикла;		
		
	КонецЦикла;	
	
	ТабДок.Вывести(Подвал);
	
	ВыборкаИсполнителей.Сбросить();
	
	Пока ВыборкаИсполнителей.Следующий() Цикл
		
		Если ВыборкаИсполнителей.Мастер Тогда					
			Продолжить;
		КонецЕсли;		

		
		Должность=?(СокрЛП(ВыборкаИсполнителей.ДолжностьСокр)<>"",СокрЛП(ВыборкаИсполнителей.ДолжностьСокр),СокрЛП(ВыборкаИсполнителей.Должность));
		
		СекцияВыполнил.Параметры.ДатаЗадания = Формат(ВыборкаПоШапке.ДатаЗадания,"ДЛФ=ДД");
		СекцияВыполнил.Параметры.ИОФамилия = ПроцедурыУправленияПерсоналом.ФамилияИнициалыФизЛица(ВыборкаИсполнителей.ФизЛицо);
		ТабДок.Вывести(СекцияВыполнил);
		
	КонецЦикла;
	
	СекцияПринял.Параметры.Должность=ПечДолжность;
	СекцияПринял.Параметры.ИОФамилия=ПечМастер;
	ТабДок.Вывести(СекцияПринял);
	
	ТабДок.АвтоМасштаб=Истина;
	ТабДок.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;

	
	Возврат ТабДок;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;

мВосстанавливатьДвижения = Ложь;


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ПОЛНОТЕКСТОВЫЙ ПОИСК
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Процедура ОбновлениеИндексаППД() Экспорт
	Попытка	
		ЗаписьЖурналаРегистрации("Полнотекстовое индексирование", 
			УровеньЖурналаРегистрации.Информация, , ,
			"Начато регламентное индексирование порции");
			
		ПолнотекстовыйПоиск.ОбновитьИндекс(Ложь, Истина);
		
		ЗаписьЖурналаРегистрации("Полнотекстовое индексирование", 
			УровеньЖурналаРегистрации.Информация, , ,
			"Закончено регламентное  индексирование порции");
	Исключение
		ЗаписьЖурналаРегистрации("Полнотекстовое индексирование", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			"Во время регламентного обновления индекса произошла неизвестная ошибка: " + ОписаниеОшибки());
	КонецПопытки;		
КонецПроцедуры

Процедура СлияниеИндексаППД() Экспорт
	Попытка	
		ЗаписьЖурналаРегистрации("Полнотекстовое индексирование", 
			УровеньЖурналаРегистрации.Информация, , ,
			"Начато регламентное слияние индексов");
			
		ПолнотекстовыйПоиск.ОбновитьИндекс(Истина);
		
		ЗаписьЖурналаРегистрации("Полнотекстовое индексирование", 
			УровеньЖурналаРегистрации.Информация, , ,
			"Закончено регламентное слияние индексов");
	Исключение
		ЗаписьЖурналаРегистрации("Полнотекстовое индексирование", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			"Во время регламентного слияния индекса произошла неизвестная ошибка: " + ОписаниеОшибки());
	КонецПопытки;		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕРЕСЧЕТА ИТОГОВ РЕГИСТРОВ НАКОПЛЕНИЯ
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// Процедура выполняет пересчет регистров накопления, для удаления нулевых записей
Процедура ПересчетИтоговРегистровНакопления() Экспорт

	НаДату = НачалоМесяца(ТекущаяДата())-1;	
	ПересчетРегистров(РегистрыНакопления, НаДату, Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки);
	
КонецПроцедуры

Процедура ПересчетРегистров(МенеджерРегистров, НаДату, ОграничениеПоВидуРегистра = Неопределено)
	
	Для Каждого МенеджерРегистра ИЗ МенеджерРегистров Цикл
		МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗнч(МенеджерРегистра));
		
		Если ОграничениеПоВидуРегистра <> Неопределено И МетаданныеРегистра.ВидРегистра <> ОграничениеПоВидуРегистра Тогда
			Продолжить;
		КонецЕсли;
		ПересчитатьРегистрПоДате(МенеджерРегистра, НаДату);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьРегистрПоДате(МенеджерРегистра, НаДату)
	
	Если МенеджерРегистра.ПолучитьПериодРассчитанныхИтогов()<НаДату Тогда
		МенеджерРегистра.УстановитьПериодРассчитанныхИтогов(НаДату);
	Иначе
		МенеджерРегистра.ПересчитатьИтоги();
	КонецЕсли;
	
КонецПроцедуры




///////////////////////////////////////////
// Процедуры регламентного обновления конфигурации ИБ
//

// Функция выделяет необходимые части из строки запуска
//
Функция ВыделитьПодстрокуСтрокиЗапуска(СтрокаЗапуска, КлючПодстроки)

	НомерПервогоСимвола = Найти(ВРег(СтрокаЗапуска), ВРег(КлючПодстроки)) + СтрДлина(КлючПодстроки);
	Для Счетчик = НомерПервогоСимвола По СтрДлина(СтрокаЗапуска) Цикл
		Если Сред(СтрокаЗапуска, Счетчик, 1) = ";" Тогда
			НомерПоследнегоСимвола = Счетчик - 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Получаем искомую подстроку
	ИскомаяПодстрока = Сред(СтрокаЗапуска, НомерПервогоСимвола, (НомерПоследнегоСимвола - НомерПервогоСимвола + 1));
	Если Сред(ИскомаяПодстрока, 1, 1) = """" Тогда
		// Если подстрока в кавычках, то выделяем их
		ИскомаяПодстрока = Сред(ИскомаяПодстрока, 2, (СтрДлина(ИскомаяПодстрока) - 2));
	КонецЕсли;
	
	Возврат ИскомаяПодстрока;

КонецФункции // ВыделитьПодстроку()

// Процедура производит действия, приводящие к регламетному обновлению ИБ,
// но только для серверного варианта
Процедура ОбновлениеКонфигурации() Экспорт

	СтруктураОбновленияИБ = Константы.НастройкаОбновленияКонфигурации.Получить().Получить();
	Если ТипЗнч(СтруктураОбновленияИБ) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбновленияИБ.ЗагружатьИзмененнуюКонфигурацию Тогда
		ФайлОбновления = Константы.ФайлКонфигурацииДляОбновления.Получить().Получить();
		Если ТипЗнч(ФайлОбновления) = Тип("ДвоичныеДанные") Тогда
			ПутьКФайлу = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + ".cf";
			ФайлОбновления.Записать(ПутьКФайлу);
			СтруктураОбновленияИБ.Вставить("ФайлОбновленияКонфигурации", ПутьКФайлу);
			СтруктураОбновленияИБ.Вставить("ОписаниеФайлаОбновленияКонфигурации", Константы.ОписаниеФайлаКонфигурацииДляОбновления.Получить());
		Иначе
			СтруктураОбновленияИБ.ЗагружатьИзмененнуюКонфигурацию = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Если СтрЧислоВхождений(ВРег(СтрокаСоединения), "FILE=") Тогда
		Возврат;
	КонецЕсли;
	
	СтрДлина = СтрДлина(СтрокаСоединения);
	
	// Ищем имя сервера
	СтрокаСервера = ВыделитьПодстрокуСтрокиЗапуска(СтрокаСоединения, "Srvr=");
	// Если в имени сервера присутствует имя порта, то выделяем его
	РазделительПорта = Найти(СтрокаСервера, ":");
	Если РазделительПорта > 0 Тогда
		ИмяСервера = Сред(СтрокаСервера, 1, (РазделительПорта - 1));
		НомерПортаКластера = Сред(СтрокаСервера, (РазделительПорта + 1));
	Иначе
		ИмяСервера = СтрокаСервера;
		ком = Новый COMОбъект("v81.COMConnector");
		НомерПортаКластера = ком.RMngrPortDefault;
	КонецЕсли; 
	
	// Ищем имя ИБ
	ИмяИБ = ВыделитьПодстрокуСтрокиЗапуска(СтрокаСоединения, "Ref=");
	
	ТекстСообщенияБлокировки = СтруктураОбновленияИБ.СообщениеОБлокировкеИБ;
	ПараметрБлокировки = СтруктураОбновленияИБ.ПараметрБлокировкиИБ;
	ИмяАдминистратораКластера = СтруктураОбновленияИБ.ИмяАдминистратораКластера;
	ПарольАдминистратораКластера = СтруктураОбновленияИБ.ПарольАдминистратораКластера;
	ИмяАдминистратораИБ = СтруктураОбновленияИБ.ИмяАдминистратораИБ;
	ИсполняемыйФайлКлиентаНаСервере = СтруктураОбновленияИБ.ИсполняемыйФайлКлиентаНаСервере;
	
	Пользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяАдминистратораИБ);
	НовыйПароль = Лев(Строка(Новый УникальныйИдентификатор), 20);
	Пользователь.Пароль = НовыйПароль;
	Пользователь.Записать();
	ПарольАдминистратораИБ = НовыйПароль;
	
	ПутьКФайлуЖурнала = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + ".txt";
	
	ШаблонТекста = ПолучитьОбщийМакет("МакетФайлаОбновленияКонфигурации");
	
	КонечныйТекст = ШаблонТекста.ПолучитьОбласть("ОбластьДоОбновленияКонфигурации");
	КонечныйТекст.УдалитьСтроку(1);
	КонечныйТекст.УдалитьСтроку(КонечныйТекст.КоличествоСтрок());
	Если СтруктураОбновленияИБ.ЗагружатьИзмененнуюКонфигурацию Тогда
		ПромТекст = ШаблонТекста.ПолучитьОбласть("ОбластьЗагрузкиИзмененнойКонфигурации");
		ПромТекст.УдалитьСтроку(1);
		ПромТекст.УдалитьСтроку(ПромТекст.КоличествоСтрок());
		КонечныйТекст.УстановитьТекст(КонечныйТекст.ПолучитьТекст() + ПромТекст.ПолучитьТекст());
	КонецЕсли;
	Если СтруктураОбновленияИБ.ОбновлятьКонфигурациюИБ Тогда
		ПромТекст = ШаблонТекста.ПолучитьОбласть("ОбластьОбновленияКонфигурацииБД");
		ПромТекст.УдалитьСтроку(1);
		ПромТекст.УдалитьСтроку(ПромТекст.КоличествоСтрок());
		КонечныйТекст.УстановитьТекст(КонечныйТекст.ПолучитьТекст() + ПромТекст.ПолучитьТекст());
	КонецЕсли;
	ПромТекст = ШаблонТекста.ПолучитьОбласть("ОбластьПослеОбновленияКонфигурации");
	ПромТекст.УдалитьСтроку(1);
	ПромТекст.УдалитьСтроку(ПромТекст.КоличествоСтрок());
	КонечныйТекст = КонечныйТекст.ПолучитьТекст() + ПромТекст.ПолучитьТекст();
	
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[ServerName]", """" + ИмяСервера + """");
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[KlasterPortNumber]", СтрЗаменить(Строка(НомерПортаКластера), Символы.НПП, ""));
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[InfoBaseName]", """" + ИмяИБ + """");
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[LockMessageText]", """" + ТекстСообщенияБлокировки + """");
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[LockPermissionCode]", """" + ПараметрБлокировки + """");
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[ClasterAdminName]", """" + ИмяАдминистратораКластера + """");
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[ClasterAdminPass]", """" + ПарольАдминистратораКластера + """");
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[InfoBasesAdminName]", """" + ИмяАдминистратораИБ + """");
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[InfoBasesAdminPass]", """" + ПарольАдминистратораИБ + """");
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[NewPass]", """" + Лев(Строка(Новый УникальныйИдентификатор), 20) + """");
	
	// ВАЖНО!!! Это же время (5 минут) прописано как задержка проверки в механизме завершения работы пользователей, модуль приложения ЗавершениеРаботыПользователей.КонтрольРежимаЗавершенияРаботыПользователей()
	// Рюмин - вернуться сюда и разобраться с этим временем...
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[TimeBeginLock]", "CDate(""" + Формат((ТекущаяДата() + 60*5), "ДФ=""дд/ММ/гггг ЧЧ:мм:сс""") + """)");
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[TimeEndLock]", "CDate(""" + Формат((ТекущаяДата() + 60*5 + 60*60*2), "ДФ=""дд/ММ/гггг ЧЧ:мм:сс""") + """)");
	
	Если СтруктураОбновленияИБ.ЗагружатьИзмененнуюКонфигурацию Тогда
		КонечныйТекст = СтрЗаменить(КонечныйТекст, "[Cfg]", """" + СтруктураОбновленияИБ.ФайлОбновленияКонфигурации + """");
		КонечныйТекст = СтрЗаменить(КонечныйТекст, "[ОписаниеФайлаОбновленияКонфигурации]", """" + СтруктураОбновленияИБ.ОписаниеФайлаОбновленияКонфигурации + """");
	Иначе
		КонечныйТекст = СтрЗаменить(КонечныйТекст, "[Cfg]", """" + "" + """");
		КонечныйТекст = СтрЗаменить(КонечныйТекст, "[ОписаниеФайлаОбновленияКонфигурации]", """" + "" + """");
	КонецЕсли; 
	Если ТипЗнч(ИсполняемыйФайлКлиентаНаСервере) = Тип("Строка") И НЕ ПустаяСтрока(ИсполняемыйФайлКлиентаНаСервере) Тогда
		КонечныйТекст = СтрЗаменить(КонечныйТекст, "[v8exe]", """" + ИсполняемыйФайлКлиентаНаСервере + """");
	Иначе
		КонечныйТекст = СтрЗаменить(КонечныйТекст, "[v8exe]", """" + КаталогПрограммы() + "1cv8.exe" + """");
	КонецЕсли; 
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[Out]", """" + ПутьКФайлуЖурнала + """");

	ИмяВременногоФайла = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + ".vbs";
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[FilePath]", """" + ИмяВременногоФайла + """");
	
	Скрипт = Новый ТекстовыйДокумент;
	Скрипт.Вывод = ИспользованиеВывода.Разрешить;
	Скрипт.УстановитьТекст(КонечныйТекст);
	Скрипт.Записать(ИмяВременногоФайла, КодировкаТекста.Системная);
	
	Ком = Новый COMObject("wScript.Shell");
	Ком.Run("""" + ИмяВременногоФайла + """");
	
КонецПроцедуры

///////////////////////////////////////////
// Процедуры получения электронных сообщений
//

Процедура ПолучениеЭлектронныхСообщений() Экспорт
	
	ТекстОшибок = "";
	УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(Неопределено, Справочники.Пользователи.ПустаяСсылка(),,,, Истина, Ложь, ТекстОшибок);
	
	Если ПустаяСтрока(ТекстОшибок) Тогда
		ЗаписьЖурналаРегистрации("Получение электронных сообщений", 
			УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ЭлектронноеПисьмо, ,
			"Получение электронных сообщений выполнено успешно");
	Иначе
		ЗаписьЖурналаРегистрации("Получение электронных сообщений", 
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЭлектронноеПисьмо, ,
			"Получение электронных сообщений выполнено с ошибками:" + Символы.ПС + ТекстОшибок);
	КонецЕсли; 
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБМЕНА ДАННЫМИ
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Процедура ВыполнитьОбменДаннымиДляНастройкиАвтоматическогоОбменаДанными(КодНастройки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = Справочники.НастройкиВыполненияОбмена.НайтиПоКоду(КодНастройки);
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена)
		ИЛИ НастройкаОбмена.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДанными.ВыполнитьОбменПоНастройкеАвтоматическогоВыполненияОбменаДанными(НастройкаОбмена, Ложь);
	
КонецПроцедуры

Процедура ВыполнитьОбменДаннымиДляНастройкиОбмена(КодНастройки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = Справочники.НастройкиОбменаДанными.НайтиПоКоду(КодНастройки);
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена)
		ИЛИ НастройкаОбмена.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДанными.ВыполнитьОбменДаннымиПоПроизвольнойНастройке(НастройкаОбмена, Ложь);
			
КонецПроцедуры

Процедура ВыполнитьОтложенныеДвиженияДляНастройкиОбмена(КодНастройки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = Справочники.НастройкиОбменаДанными.НайтиПоКоду(КодНастройки);
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена)
		ИЛИ НастройкаОбмена.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;	
	
	ПроцедурыОбменаДанными.ВыполнитьОтложенныеДвиженияПоНастройкеОбмена(НастройкаОбмена);
			
КонецПроцедуры




Процедура ПользовательскиеНастройкиПриОкончанииРедактирования(ФормаОтчета, Элемент = Неопределено, НоваяСтрока = Неопределено, ОтменаРедактирования = Неопределено) Экспорт
	
  	ВерсияСтандартныхФункцийОтчетов = "";
	Попытка 
		ВерсияСтандартныхФункцийОтчетов = ФормаОтчета.ВерсияСтандартныхФункцийОтчетов;
	Исключение
	КонецПопытки;
	
	Если ВерсияСтандартныхФункцийОтчетов = "1" тогда
		
		Если ФормаОтчета.Элементы.Найти("ГруппаНастроекПользователя") <> Неопределено тогда
			СписокНастроекПользователя = ФормаОтчета.ВыборПользовательскихНастроек;
			
			СуществуетНастройка = ложь;
			НазваниеНастройки="";
			Для каждого ЭлементСписка из СписокНастроекПользователя Цикл
				Если ФункцииОтчетовКлиентСервер.НастройкиОдинаковые(ЭлементСписка.Значение, ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки) тогда
					НазваниеНастройки = ЭлементСписка.Представление;
					СуществуетНастройка = истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ФормаОтчета.ТекущаяПользовательскаяНастройка = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗакрытии(ФормаОтчета) Экспорт
	
КонецПроцедуры 


Процедура ОбработатьРезультатКомпоновки(ОписаниеОшибки) Экспорт
	
	Если ОписаниеОшибки <> Неопределено тогда
		Предупреждение(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьОтчет(КлючОтчета, ВариантОтчета, ПараметрыУправляемойФормы = Неопределено) Экспорт
	
	Если ТипЗнч(ВариантОтчета) = Тип("Строка") тогда // ключ отчета
		ПараметрыОтчета = Новый Структура("КлючВарианта", ВариантОтчета);
		Если ПараметрыУправляемойФормы <> Неопределено Тогда
			Для каждого КлючИЗначение из ПараметрыУправляемойФормы Цикл
				ПараметрыОтчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
		КонецЕсли;	
		ОткрытьФорму(КлючОтчета + ".Форма", ПараметрыОтчета, , КлючОтчета +"\"+ ВариантОтчета);
	Иначе
		#Если ТолстыйКлиентОбычноеПриложение Тогда
		Справочник = Метаданные.Справочники.Найти("СохраненныеНастройки");
		Если Справочник <> Неопределено и ТипЗнч(ВариантОтчета) = Тип("СправочникСсылка.СохраненныеНастройки") тогда
			ИмяОтчета = СтрЗаменить(КлючОтчета, "Отчет.", "");
			ОтчетОбъект = Отчеты[ИмяОтчета].Создать();
			ФормаОтчета = ОтчетОбъект.ПолучитьФорму();
			ОтчетОбъект.СохраненнаяНастройка = ВариантОтчета;
			ОтчетОбъект.ПрименитьНастройку();
			ФормаОтчета.Открыть();
		КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура НачалоВыбора(ФормаОтчета, Элемент, СтандартнаяОбработка) Экспорт

	Если Найти(Элемент.Имя, "Период_") > 0 тогда
		ВыбратьПроизвольныйПериодОтчета(ФормаОтчета, Элемент.Имя);
		ПользовательскиеНастройкиПриОкончанииРедактирования(ФормаОтчета);	
	КонецЕсли;

Конецпроцедуры 

Процедура ОбработкаВыбора(ФормаОтчета, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если Элемент.Имя = "ВыборПользовательскихНастроек" тогда 
		СтруктураКоманды = ФункцииОтчетовКлиентСервер.ПолучитьСтруктуруКоманды("ОбновитьФормуОтчета");
		ФормаОтчета.ВыполнитьКомандуНаСервереУниверсальныйОбработчик(СтруктураКоманды);
	ИначеЕсли Элемент.Имя = "Период" тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Дата") тогда
			НачалоПериода = ФункцииОтчетовКлиентСервер.НачалоПериодаОтчета(ФормаОтчета.ВидПериода, ВыбранноеЗначение, ФормаОтчета);
			КонецПериода = ФункцииОтчетовКлиентСервер.КонецПериодаОтчета(ФормаОтчета.ВидПериода, ВыбранноеЗначение, ФормаОтчета);
			ФункцииОтчетовКлиентСервер.УстановитьПараметр(ФормаОтчета.Отчет.КомпоновщикНастроек, ФормаОтчета.НастройкиОтчета.ПараметрНачалоПериода, НачалоПериода);
			ФункцииОтчетовКлиентСервер.УстановитьПараметр(ФормаОтчета.Отчет.КомпоновщикНастроек, ФормаОтчета.НастройкиОтчета.ПараметрКонецПериода, КонецПериода);
			ВыбранноеЗначение = ФункцииОтчетовКлиентСервер.ПолучитьПредставлениеПериода(ФормаОтчета.ВидПериода, НачалоПериода, КонецПериода, ФормаОтчета);
			ФормаОтчета.Период = ВыбранноеЗначение;
			СтандартнаяОбработка = ложь;
		КонецЕсли;
	ИначеЕсли Найти(Элемент.Имя, "ВидОтбора_") > 0 тогда 
		Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(СтрЗаменить(Элемент.Имя, "ВидОтбора_", ""));
		ЭлементНастроек = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
		Если ЭлементНастроек <> Неопределено тогда
			ВибОтбора = ВыбранноеЗначение;
			Если ВибОтбора = "ВСписке" тогда
				ЭлементНастроек.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				ФормаОтчета["ВидОтбора_" + СтрЗаменить(Элемент.Имя, "ВидОтбора_", "")] = "Только выбранные";
				ЭлементНастроек.Использование = истина;
			ИначеЕсли ВибОтбора = "НеВСписке" тогда
				ЭлементНастроек.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
				ФормаОтчета["ВидОтбора_" + СтрЗаменить(Элемент.Имя, "ВидОтбора_", "")] = "Кроме выбранных";
				ЭлементНастроек.Использование = истина;
			ИначеЕсли ВибОтбора = "НеВСпискеПоИерархии" тогда
				ЭлементНастроек.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
				ФормаОтчета["ВидОтбора_" + СтрЗаменить(Элемент.Имя, "ВидОтбора_", "")] = "Только подчиненные";
				ЭлементНастроек.Использование = истина;
			ИначеЕсли ВибОтбора = "ВСпискеПоИерархии" тогда
				ЭлементНастроек.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				ФормаОтчета["ВидОтбора_" + СтрЗаменить(Элемент.Имя, "ВидОтбора_", "")] = "Кроме подчиненных";
				ЭлементНастроек.Использование = истина;
			ИначеЕсли ВибОтбора = "%НеОтбирать%"  тогда
				ФормаОтчета["ВидОтбора_" + СтрЗаменить(Элемент.Имя, "ВидОтбора_", "")] = "Не отбирать";
				ЭлементНастроек.Использование = ложь;
			КонецЕсли;
			СтандартнаяОбработка = ложь;
		КонецЕсли;
	ИначеЕсли Найти(Элемент.Имя, "СписокЗначенияОтбора_") > 0 тогда 
		СтандартнаяОбработка = Ложь;
		Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(СтрЗаменить(Элемент.Имя, "СписокЗначенияОтбора_", ""));
		ЭлементНастроек = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастроек.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(ЭлементНастроек.ПравоеЗначение) = Тип("СписокЗначений") тогда
			ЭлементНастроек.ВидСравнения = ЭлементНастройкиВарианта.ВидСравнения;
			СтруктураПараметров = Новый Структура("ЭлементФормы, ЭлементНастройкиПользователя, ВыбранноеЗначение, УстановитьИспользованиеОтбораВ", Элемент, ЭлементНастроек, ВыбранноеЗначение, Неопределено);
			СтандартнаяОбработкаСобытияПриИзмененииОтбора = истина;
			СобытияФункцийОтчетовКлиентПереопределяемый.ОтборОтчетаПриИзменении(ФормаОтчета, СтруктураПараметров, СтандартнаяОбработкаСобытияПриИзмененииОтбора);
			Если СтандартнаяОбработкаСобытияПриИзмененииОтбора тогда
				ФормаОтчета["Отбор_" + СтрЗаменить(Элемент.Имя, "СписокЗначенияОтбора_", "")].Добавить(ВыбранноеЗначение);
				ЭлементНастроек.ПравоеЗначение.ЗагрузитьЗначения(ФормаОтчета["Отбор_" + СтрЗаменить(Элемент.Имя, "СписокЗначенияОтбора_", "")].ВыгрузитьЗначения());
			КонецЕсли;
			Если СтруктураПараметров.УстановитьИспользованиеОтбораВ <> Неопределено тогда
				ЭлементНастроек.Использование = СтруктураПараметров.УстановитьИспользованиеОтбораВ;
				ФормаОтчета["ИспользованиеОтбора_" + СтрЗаменить(Элемент.Имя, "СписокЗначенияОтбора_", "")] = СтруктураПараметров.УстановитьИспользованиеОтбораВ;
			Иначе
				ЭлементНастроек.Использование = ЭлементНастроек.ПравоеЗначение.Количество()+1 > 0;
				ФормаОтчета["ИспользованиеОтбора_" + СтрЗаменить(Элемент.Имя, "СписокЗначенияОтбора_", "")] = ЭлементНастроек.Использование;
			КонецЕсли;
		ИначеЕсли ЭлементНастроек.ПравоеЗначение =  Неопределено тогда
			СтруктураПараметров = Новый Структура("ЭлементФормы, ЭлементНастройкиПользователя, ВыбранноеЗначение, УстановитьИспользованиеОтбораВ", Элемент, ЭлементНастроек, ВыбранноеЗначение, Неопределено);
			СтандартнаяОбработкаСобытияПриИзмененииОтбора = истина;
			СобытияФункцийОтчетовКлиентПереопределяемый.ОтборОтчетаПриИзменении(ФормаОтчета, СтруктураПараметров, СтандартнаяОбработкаСобытияПриИзмененииОтбора);
			ЭлементНастроек.ПравоеЗначение = Новый СписокЗначений;
			Если СтандартнаяОбработкаСобытияПриИзмененииОтбора тогда
				ФормаОтчета["Отбор_" + СтрЗаменить(Элемент.Имя, "СписокЗначенияОтбора_", "")].Добавить(ВыбранноеЗначение);
				ЭлементНастроек.ПравоеЗначение.ЗагрузитьЗначения(ФормаОтчета["Отбор_" + СтрЗаменить(Элемент.Имя, "СписокЗначенияОтбора_", "")].ВыгрузитьЗначения());
			КонецЕсли;
			Если СтруктураПараметров.УстановитьИспользованиеОтбораВ <> Неопределено тогда
				ЭлементНастроек.Использование = СтруктураПараметров.УстановитьИспользованиеОтбораВ;
				ФормаОтчета["ИспользованиеОтбора_" + СтрЗаменить(Элемент.Имя, "СписокЗначенияОтбора_", "")] = СтруктураПараметров.УстановитьИспользованиеОтбораВ;
			Иначе
				ЭлементНастроек.Использование = ЭлементНастроек.ПравоеЗначение.Количество()+1 > 0;
				ФормаОтчета["ИспользованиеОтбора_" + СтрЗаменить(Элемент.Имя, "СписокЗначенияОтбора_", "")] = ЭлементНастроек.Использование;
			КонецЕсли;
		КонецЕсли;
		ФункцииОтчетовКлиентСервер.УстановитьСвязиОтборов(ФормаОтчета, Идентификатор);
		ПользовательскиеНастройкиПриОкончанииРедактирования(ФормаОтчета);	
	КонецЕсли;
	
КонецПроцедуры 

Процедура ПриОкончанииРедактирования(ФормаОтчета, Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт
	
	Если Элемент.Имя = "ПользовательскиеНастройки" тогда
		ПользовательскиеНастройкиПриОкончанииРедактирования(ФормаОтчета, Элемент, НоваяСтрока, ОтменаРедактирования);
	ИначеЕсли Найти(Элемент.Имя, "СписокЗначенияОтбора_") > 0 тогда
		Если НЕ ОтменаРедактирования тогда
			ИдентификаторЭлемента = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - Найти(Элемент.Имя, "_"));
			ТаблицаФормы  = ФормаОтчета.Элементы["СписокЗначенияОтбора_" + ИдентификаторЭлемента];
			ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
			Таблица = ФормаОтчета["Отбор_" + ИдентификаторЭлемента];
			Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(ИдентификаторЭлемента);
			ЭлементНастроек = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
			Если ЭлементНастроек <> Неопределено тогда
				СтруктураПараметров = Новый Структура("ЭлементФормы, ЭлементНастройкиПользователя, ВыбранноеЗначение, УстановитьИспользованиеОтбораВ", Элемент, ЭлементНастроек, Таблица.ВыгрузитьЗначения(), Неопределено);
				СтандартнаяОбработкаСобытияПриИзмененииОтбора = истина;
				СобытияФункцийОтчетовКлиентПереопределяемый.ОтборОтчетаПриИзменении(ФормаОтчета, СтруктураПараметров, СтандартнаяОбработкаСобытияПриИзмененииОтбора);
				Если ЭлементНастроек.ПравоеЗначение = Неопределено тогда
					ЭлементНастроек.ПравоеЗначение = Новый СписокЗначений;
				КонецЕсли;
				Если СтандартнаяОбработкаСобытияПриИзмененииОтбора тогда
					ЭлементНастроек.ПравоеЗначение.ЗагрузитьЗначения(Таблица.ВыгрузитьЗначения());
				КонецЕсли;
				Если СтруктураПараметров.УстановитьИспользованиеОтбораВ <> Неопределено тогда
					ЭлементНастроек.Использование = СтруктураПараметров.УстановитьИспользованиеОтбораВ;
				Иначе
					ЭлементНастроек.Использование = Таблица.Количество() > 0;
				КонецЕсли;
			КонецЕсли;
			ПользовательскиеНастройкиПриОкончанииРедактирования(ФормаОтчета);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

Процедура ПриАктивизацииСтроки(ФормаОтчета, Элемент) Экспорт
	
	ПользовательскиеНастройкиПриОкончанииРедактирования(ФормаОтчета, Элемент)
	
КонецПроцедуры 


Процедура НачалоВыбораИзСписка(ФормаОтчета, Элемент, СтандартнаяОбработка) Экспорт
	
	Если Найти(Элемент.Имя, "Период_") > 0  тогда
		
		ИдентификаторЭлемента = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - Найти(Элемент.Имя, "_"));
		Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(ИдентификаторЭлемента);
		ЗначениеПараметра = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЗначениеПараметра.ИдентификаторПользовательскойНастройки);
		
		ВидПериода = ФормаОтчета[СтрЗаменить(Элемент.Имя, "Период_", "ВидПериода_")];
		
		НачалоПериода = ЗначениеПараметра.Значение.ДатаНачала;
		Если НачалоПериода = '00010101' тогда
			НачалоПериода = ФункцииОтчетовКлиентСервер.НачалоПериодаОтчета(ВидПериода, ТекущаяДата(), ФормаОтчета);
		КонецЕсли;
		ВыбранныйПериод      = ВыбратьПериодОтчета(ФормаОтчета, Элемент, СтандартнаяОбработка, НачалоПериода);
		СтандартнаяОбработка = ложь;
		Если ВыбранныйПериод = Неопределено тогда
			Возврат;
		КонецЕсли;
		ФормаОтчета[Элемент.Имя] = ВыбранныйПериод.Представление;
		КонецПериода = ФункцииОтчетовКлиентСервер.КонецПериодаОтчета(ВидПериода, ВыбранныйПериод.Значение, ФормаОтчета);
		ЗначениеПараметра.Значение.ДатаНачала    = ВыбранныйПериод.Значение;
		ЗначениеПараметра.Значение.ДатаОкончания = КонецПериода;
		ЗначениеПараметра.Использование = истина;
		ПользовательскиеНастройкиПриОкончанииРедактирования(ФормаОтчета);
	КонецЕсли;
	
КонецПроцедуры 

Функция ВыбратьПериодОтчета(ФормаОтчета, Элемент, СтандартнаяОбработка, НачалоПериода)
	
	ВидПериода = ФормаОтчета[СтрЗаменить(Элемент.Имя, "Период_", "ВидПериода_")];
	
	Список = ФункцииОтчетовКлиентСервер.ПолучитьСписокПериодов(НачалоПериода, ВидПериода, ФормаОтчета);
	ЭлементСписка = Список.НайтиПоЗначению(НачалоПериода);
	ВыбранныйПериод = ФормаОтчета.ВыбратьИзСписка(Список, Элемент, ЭлементСписка);
	
	Если ВыбранныйПериод = Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Индекс = Список.Индекс(ВыбранныйПериод);
	Если Индекс = 0 или Индекс = Список.Количество()-1 тогда
		ВыбранныйПериод = ВыбратьПериодОтчета(ФормаОтчета, Элемент, СтандартнаяОбработка, ВыбранныйПериод.Значение);
	КонецЕсли;
	
	Возврат ВыбранныйПериод;
	
КонецФункции 

Процедура Очистка(ФормаОтчета, Элемент, СтандартнаяОбработка) Экспорт
	Если Элемент.Имя = "Период" тогда
		СтандартнаяОбработка = ложь;
	ИначеЕсли Найти(Элемент.Имя, "Отбор_") > 0 тогда // обработка изменения отбора 
		Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(СтрЗаменить(Элемент.Имя, "Отбор_", ""));
		ЭлементНастроек = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
		Если ЭлементНастроек <> Неопределено тогда
			СтруктураПараметров = Новый Структура("ЭлементФормы, ЭлементНастройкиПользователя, ВыбранноеЗначение, УстановитьИспользованиеОтбораВ", Элемент, ЭлементНастроек, Неопределено, Неопределено);
			СтандартнаяОбработкаСобытияПриИзмененииОтбора = истина;
			СобытияФункцийОтчетовКлиентПереопределяемый.ОтборОтчетаПриИзменении(ФормаОтчета, СтруктураПараметров, СтандартнаяОбработкаСобытияПриИзмененииОтбора);
			Если СтандартнаяОбработкаСобытияПриИзмененииОтбора тогда
				СтандартнаяОбработка = истина;
			Иначе
				СтандартнаяОбработка = ложь;
			КонецЕсли;
			Если СтруктураПараметров.УстановитьИспользованиеОтбораВ <> Неопределено тогда
				ЭлементНастроек.Использование  = СтруктураПараметров.УстановитьИспользованиеОтбораВ;
				ФормаОтчета["ИспользованиеОтбора_" + СтрЗаменить(Элемент.Имя, "Отбор_", "")] = СтруктураПараметров.УстановитьИспользованиеОтбораВ;
			Иначе
				ЭлементНастроек.Использование  = ложь;
				ФормаОтчета["ИспользованиеОтбора_" + СтрЗаменить(Элемент.Имя, "Отбор_", "")] = ложь;
			КонецЕсли;
			ПользовательскиеНастройкиПриОкончанииРедактирования(ФормаОтчета);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

Процедура Регулирование(ФормаОтчета, Элемент, Направление, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры 

Процедура АвтоПодбор(ФормаОтчета, Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка) Экспорт
	
	Если Элемент.Имя = "Период" тогда
		ПараметрНачалоПериода = ФункцииОтчетовКлиентСервер.ПолучитьПараметр(ФормаОтчета.Отчет.КомпоновщикНастроек, ФормаОтчета.НастройкиОтчета.ПараметрНачалоПериода);
		ПараметрКонецПериода  = ФункцииОтчетовКлиентСервер.ПолучитьПараметр(ФормаОтчета.Отчет.КомпоновщикНастроек, ФормаОтчета.НастройкиОтчета.ПараметрКонецПериода);
		ДанныеВыбора  = ФункцииОтчетовКлиентСервер.ПодобратьПериодОтчета(ФормаОтчета.ВидПериода, Текст, Дата(ПараметрНачалоПериода.Значение), Дата(ПараметрКонецПериода.Значение), ФормаОтчета);
		СтандартнаяОбработка = ложь;
	КонецЕсли;
	
КонецПроцедуры 

Процедура ОкончаниеВводаТекста(ФормаОтчета, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
КонецПроцедуры 

Процедура ПриИзменении(ФормаОтчета, Элемент) Экспорт
	
	Если Элемент.Имя = "Дата" тогда
		ФункцииОтчетовКлиентСервер.УстановитьПараметр(ФормаОтчета.Отчет.КомпоновщикНастроек, ФормаОтчета.НастройкиОтчета.ПараметрДата, ФормаОтчета.Дата);
	ИначеЕсли Найти(Элемент.Имя, "ВидПериода_") > 0 тогда
		ВидПериода = ФормаОтчета[Элемент.Имя];
		Если ВидПериода = ФормаОтчета.ЗаПроизвольныйПериод тогда
			ВыбратьПроизвольныйПериодОтчета(ФормаОтчета, СтрЗаменить(Элемент.Имя, "ВидПериода_", "Период_"));
		Иначе
			ИдентификаторЭлемента = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - Найти(Элемент.Имя, "_"));
			Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(ИдентификаторЭлемента);
			ЗначениеПараметра = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
			ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЗначениеПараметра.ИдентификаторПользовательскойНастройки);

			Если ЗначениеПараметра.Значение = '00010101' тогда
				Возврат;
			КонецЕсли;
			НачалоПериода = ФункцииОтчетовКлиентСервер.НачалоПериодаОтчета(ВидПериода, ЗначениеПараметра.Значение.ДатаНачала, ФормаОтчета);
			КонецПериода = ФункцииОтчетовКлиентСервер.КонецПериодаОтчета(ВидПериода, НачалоПериода, ФормаОтчета);
			ЗначениеПараметра.Значение.ДатаНачала    = НачалоПериода;
			ЗначениеПараметра.Значение.ДатаОкончания = КонецПериода;
			ЗначениеПараметра.Использование = истина;
			Список = ФункцииОтчетовКлиентСервер.ПолучитьСписокПериодов(НачалоПериода, ВидПериода, ФормаОтчета);
			ЭлементСписка = Список.НайтиПоЗначению(НачалоПериода);
			Если ЭлементСписка <> Неопределено тогда
				ФормаОтчета[СтрЗаменить(Элемент.Имя, "ВидПериода_", "Период_")] = ЭлементСписка.Представление;
			КонецЕсли;
			ПользовательскиеНастройкиПриОкончанииРедактирования(ФормаОтчета);	
		КонецЕсли;
	ИначеЕсли Найти(Элемент.Имя, "ИспользованиеОтбора_") > 0 тогда // обработка изменения быстрого отбора 
		Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(СтрЗаменить(Элемент.Имя, "ИспользованиеОтбора_", ""));
		ЭлементНастроек = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастроек.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено тогда
			Возврат;
		КонецЕсли;
		Если ЭлементНастроек <> Неопределено тогда
			Если ТипЗнч(ЭлементНастроек) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				ИспользованиеОтбораГруппы = ФормаОтчета["ИспользованиеОтбора_" + СтрЗаменить(Элемент.Имя, "ИспользованиеОтбора_", "")];
				ЭлементНастроек.Использование = ИспользованиеОтбораГруппы;
				
				ФункцииОтчетовКлиентСервер.СкопироватьЭлементы(ЭлементНастроек, ЭлементНастройкиВарианта);
				Для каждого ЭлементНастроекГруппы Из ЭлементНастроек.Элементы Цикл
					ЭлементНастроекГруппы.Использование = ИспользованиеОтбораГруппы;
				КонецЦикла;
			Иначе
				Если ТипЗнч(ЭлементНастроек.ПравоеЗначение) <> ТипЗнч(ЭлементНастройкиВарианта.ПравоеЗначение) Тогда
					Если ТипЗнч(ЭлементНастроек.ПравоеЗначение) = Тип("СписокЗначений") Тогда
						Если ЭлементНастроек.ПравоеЗначение.Количество() > 0 Тогда
							ЭлементНастроек.ПравоеЗначение = ЭлементНастроек.ПравоеЗначение[0].Значение;
						Иначе
							ЭлементНастроек.ПравоеЗначение = ЭлементНастройкиВарианта.ПравоеЗначение;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ЭлементНастроек.ВидСравнения = ЭлементНастройкиВарианта.ВидСравнения;
				СтруктураПараметров = Новый Структура("ЭлементФормы, ЭлементНастройкиПользователя, ВыбранноеЗначение, УстановитьИспользованиеОтбораВ", Элемент, ЭлементНастроек, ЭлементНастроек.ПравоеЗначение, Неопределено);
				СтандартнаяОбработкаСобытияПриИзмененииОтбора = истина;
				СобытияФункцийОтчетовКлиентПереопределяемый.ОтборОтчетаПриИзменении(ФормаОтчета, СтруктураПараметров, СтандартнаяОбработкаСобытияПриИзмененииОтбора);
				Если СтандартнаяОбработкаСобытияПриИзмененииОтбора тогда
				КонецЕсли;
				Если СтруктураПараметров.УстановитьИспользованиеОтбораВ <> Неопределено тогда
					ЭлементНастроек.Использование = СтруктураПараметров.УстановитьИспользованиеОтбораВ;
				Иначе
					ЭлементНастроек.Использование = ФормаОтчета["ИспользованиеОтбора_" + СтрЗаменить(Элемент.Имя, "ИспользованиеОтбора_", "")];
				КонецЕсли;
			КонецЕсли;
			ФункцииОтчетовКлиентСервер.УстановитьСвязиОтборов(ФормаОтчета, Идентификатор);
		КонецЕсли;
		ПользовательскиеНастройкиПриОкончанииРедактирования(ФормаОтчета);	
	ИначеЕсли Найти(Элемент.Имя, "Отбор_") > 0 тогда // обработка изменения быстрого отбора 
		Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(СтрЗаменить(Элемент.Имя, "Отбор_", ""));
		ЭлементНастроек = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастроек.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено тогда
			Возврат;
		КонецЕсли;
		Если ЭлементНастроек <> Неопределено тогда
			ЭлементНастроек.ВидСравнения = ЭлементНастройкиВарианта.ВидСравнения;
			СтруктураПараметров = Новый Структура("ЭлементФормы, ЭлементНастройкиПользователя, ВыбранноеЗначение, УстановитьИспользованиеОтбораВ", Элемент, ЭлементНастроек, ФормаОтчета["Отбор_" + СтрЗаменить(Элемент.Имя, "Отбор_", "")], Неопределено);
			СтандартнаяОбработкаСобытияПриИзмененииОтбора = истина;
			СобытияФункцийОтчетовКлиентПереопределяемый.ОтборОтчетаПриИзменении(ФормаОтчета, СтруктураПараметров, СтандартнаяОбработкаСобытияПриИзмененииОтбора);
			Если СтандартнаяОбработкаСобытияПриИзмененииОтбора тогда
				ЭлементНастроек.ПравоеЗначение = СтруктураПараметров.ВыбранноеЗначение;
			КонецЕсли;
			ПользовательскиеНастройкиПриОкончанииРедактирования(ФормаОтчета);	
			Если СтруктураПараметров.УстановитьИспользованиеОтбораВ <> Неопределено тогда
				ЭлементНастроек.Использование  = СтруктураПараметров.УстановитьИспользованиеОтбораВ;
				ФормаОтчета["ИспользованиеОтбора_" + СтрЗаменить(Элемент.Имя, "Отбор_", "")] = СтруктураПараметров.УстановитьИспользованиеОтбораВ;
			Иначе
				ЭлементНастроек.Использование  = ЗначениеЗаполнено(ЭлементНастроек.ПравоеЗначение);
				ФормаОтчета["ИспользованиеОтбора_" + СтрЗаменить(Элемент.Имя, "Отбор_", "")] = ЗначениеЗаполнено(ЭлементНастроек.ПравоеЗначение);
			КонецЕсли;
			ФункцииОтчетовКлиентСервер.УстановитьСвязиОтборов(ФормаОтчета, Идентификатор);
			ПользовательскиеНастройкиПриОкончанииРедактирования(ФормаОтчета);	
		КонецЕсли;
	ИначеЕсли Найти(Элемент.Имя, "КолонкаОтбора_") > 0 тогда // обработка изменения быстрого отбора 
		Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(СтрЗаменить(Элемент.Имя, "КолонкаОтбора_", ""));
		ЭлементНастроек = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастроек.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено тогда
			Возврат;
		КонецЕсли;
		Если ЭлементНастроек <> Неопределено тогда
			ЭлементНастроек.ВидСравнения = ЭлементНастройкиВарианта.ВидСравнения;
			СтруктураПараметров = Новый Структура("ЭлементФормы, ЭлементНастройкиПользователя, ВыбранноеЗначение, УстановитьИспользованиеОтбораВ", Элемент, ЭлементНастроек, ФормаОтчета["Отбор_" + СтрЗаменить(Элемент.Имя, "КолонкаОтбора_", "")], Неопределено);
			СтандартнаяОбработкаСобытияПриИзмененииОтбора = истина;
			СобытияФункцийОтчетовКлиентПереопределяемый.ОтборОтчетаПриИзменении(ФормаОтчета, СтруктураПараметров, СтандартнаяОбработкаСобытияПриИзмененииОтбора);
			Если СтандартнаяОбработкаСобытияПриИзмененииОтбора тогда
				ЭлементНастроек.ПравоеЗначение = СтруктураПараметров.ВыбранноеЗначение;
			КонецЕсли;
			Если СтруктураПараметров.УстановитьИспользованиеОтбораВ <> Неопределено тогда
				ЭлементНастроек.Использование  = СтруктураПараметров.УстановитьИспользованиеОтбораВ;
				ФормаОтчета["ИспользованиеОтбора_" + СтрЗаменить(Элемент.Имя, "КолонкаОтбора_", "")] = СтруктураПараметров.УстановитьИспользованиеОтбораВ;
			Иначе
				ЭлементНастроек.Использование  = ЗначениеЗаполнено(ЭлементНастроек.ПравоеЗначение);
				ФормаОтчета["ИспользованиеОтбора_" + СтрЗаменить(Элемент.Имя, "КолонкаОтбора_", "")] = ЭлементНастроек.ПравоеЗначение.Количество() > 0;
			КонецЕсли;
			ФункцииОтчетовКлиентСервер.УстановитьСвязиОтборов(ФормаОтчета, Идентификатор);
			ПользовательскиеНастройкиПриОкончанииРедактирования(ФормаОтчета);	
		КонецЕсли;
	ИначеЕсли Найти(Элемент.Имя, "ПолеПараметр_") > 0 тогда // обработка изменения быстрого отбора 
		Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(СтрЗаменить(Элемент.Имя, "ПолеПараметр_", ""));
		ЭлементНастроек = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
		Если ЭлементНастроек <> Неопределено тогда
			СтруктураПараметра = Новый Структура("ЭлементФормы, ЭлементНастройкиПользователя, ВыбранноеЗначение, Значение", Элемент, ЭлементНастроек, ФормаОтчета["Параметр_" + СтрЗаменить(Элемент.Имя, "ПолеПараметр_", "")], ЭлементНастроек.Значение);
			СтандартнаяОбработка = истина;
			СобытияФункцийОтчетовКлиентПереопределяемый.ПараметрОтчетаПриИзменении(ФормаОтчета, СтруктураПараметра, СтандартнаяОбработка); 
			Если СтандартнаяОбработка тогда
				ЭлементНастроек.Значение = СтруктураПараметра.ВыбранноеЗначение;
			КонецЕсли;
			ПользовательскиеНастройкиПриОкончанииРедактирования(ФормаОтчета);	
		КонецЕсли;
	ИначеЕсли Найти(Элемент.Имя, "ИспользованиеПоляВыбора_") > 0 тогда // обработка включения поля выбора 
		ИдентификаторЭлемента = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - Найти(Элемент.Имя, "_"));
		ТаблицаФормы  = ФормаОтчета.Элементы["ПоляВыбора_" + ИдентификаторЭлемента];
		ТекущиеДанные      = ТаблицаФормы.ТекущиеДанные;
		ИдентификаторСтрок = ТекущиеДанные.Идентификатор;
		Идентификатор      = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(ИдентификаторЭлемента);
		ЭлементНастроек    = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
		ПолеВыбора      = ФункцииОтчетовКлиентСервер.ПолучитьПолеВыбораПоИдентификатору(ЭлементНастроек, ИдентификаторСтрок);
		Если ПолеВыбора <> Неопределено тогда
			ПолеВыбора.Использование = ТекущиеДанные.Использование;
		КонецЕсли;
		ПользовательскиеНастройкиПриОкончанииРедактирования(ФормаОтчета);	
	ИначеЕсли Найти(Элемент.Имя, "ИспользованиеПорядка_") > 0 тогда // обработка включения поля выбора 
		ИдентификаторЭлемента = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - Найти(Элемент.Имя, "_"));
		ТаблицаФормы  = ФормаОтчета.Элементы["ПоляПорядка_" + ИдентификаторЭлемента];
		ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
		ИдентификаторСтрок = ТекущиеДанные.Идентификатор;
		Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(ИдентификаторЭлемента);
		ЭлементНастроек = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
		ПолеПорядка      = ФункцииОтчетовКлиентСервер.ПолучитьПорядокПоИдентификатору(ЭлементНастроек, ИдентификаторСтрок);
		Если ПолеПорядка <> Неопределено тогда
			ПолеПорядка.Использование = ТекущиеДанные.Использование;
		КонецЕсли;
	ИначеЕсли Найти(Элемент.Имя, "ИспользованиеГруппировки_") > 0 тогда // обработка включения поля выбора 
		ИдентификаторЭлемента = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - Найти(Элемент.Имя, "_"));
		ТаблицаФормы  = ФормаОтчета.Элементы["Группировки_" + ИдентификаторЭлемента];
		ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
		Таблица = ФормаОтчета["НастройкаГруппировок_" + ИдентификаторЭлемента];
		ИндексСтроки = Таблица.Индекс(ТекущиеДанные);
		ИдентификаторСтрок = ТекущиеДанные.Идентификатор;
		Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(ИдентификаторЭлемента);
		ЭлементНастроек = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
		ПолеГруппировки = ЭлементНастроек.Структура.Получить(ИндексСтроки);
		Если ПолеГруппировки <> Неопределено тогда
			ПолеГруппировки.Использование = ТекущиеДанные.Использование;
			ПолеГруппировки.Состояние = ?(ТекущиеДанные.Использование, СостояниеЭлементаНастройкиКомпоновкиДанных.Включен, СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен);
			ПользовательскиеНастройкиПриОкончанииРедактирования(ФормаОтчета);	
		КонецЕсли;
	ИначеЕсли Найти(Элемент.Имя, "ИспользованиеЭлементаСтруктуры_") > 0 тогда // обработка включения поля выбора 
		ИдентификаторЭлемента = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - Найти(Элемент.Имя, "_"));
		Использование = ФормаОтчета["ИспользованиеЭлементаСтруктуры_" + ИдентификаторЭлемента];
		Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(ИдентификаторЭлемента);
		ЭлементНастроек = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
		Если ЭлементНастроек <> Неопределено тогда  
			ЭлементНастроек.Использование = Использование;
		КонецЕсли;
		ПользовательскиеНастройкиПриОкончанииРедактирования(ФормаОтчета);	
	ИначеЕсли Найти(Элемент.Имя, "Оформление_") > 0 тогда // обработка включения поля выбора 
		ИдентификаторЭлемента = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - Найти(Элемент.Имя, "_"));
		Использование = ФормаОтчета["УсловноеОформление_" + ИдентификаторЭлемента];
		Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(ИдентификаторЭлемента);
		ЭлементНастроек = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
		ЭлементНастроек.Использование = Использование;
		ПользовательскиеНастройкиПриОкончанииРедактирования(ФормаОтчета);	
	КонецЕсли;
КонецПроцедуры 

Процедура ВыбратьПроизвольныйПериодОтчета(ФормаОтчета, ИмяЭлемента)
	
	ИдентификаторЭлемента = Прав(ИмяЭлемента, СтрДлина(ИмяЭлемента) - Найти(ИмяЭлемента, "_"));
	Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(ИдентификаторЭлемента);
	ЗначениеПараметра = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
	ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЗначениеПараметра.ИдентификаторПользовательскойНастройки);
	
	МинимальнаяПериодичность = ФормаОтчета.НастройкиОтчета.СоответствиеПериодичностиПараметров[ЭлементНастройкиВарианта.Параметр];
	Если МинимальнаяПериодичность = Неопределено тогда
		МинимальнаяПериодичность = ФормаОтчета.ЗаДень;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("НачалоПериода, КонецПериода, МинимальныйПериод, ВидПериода", Дата(ЗначениеПараметра.Значение.ДатаНачала), Дата(ЗначениеПараметра.Значение.ДатаОкончания), МинимальнаяПериодичность, СтрЗаменить(ИмяЭлемента, "Период_", "ВидПериода_"));
	НастройкаПериода = ОткрытьФормуМодально("ОбщаяФорма.ВыборПроизвольногоПериода", ПараметрыФормы, ФормаОтчета);
	
	Если НастройкаПериода = Неопределено тогда
		Возврат;
	КонецЕсли;
	ЗначениеПараметра.Значение.ДатаНачала    = НастройкаПериода.НачалоПериода;
	ЗначениеПараметра.Значение.ДатаОкончания = НастройкаПериода.КонецПериода;
	ЗначениеПараметра.Использование = истина;
	ФормаОтчета[СтрЗаменить(ИмяЭлемента, "Период_", "ВидПериода_")] = ФормаОтчета.ЗаПроизвольныйПериод;
	ФормаОтчета[ИмяЭлемента] = ФункцииОтчетовКлиентСервер.ПолучитьПредставлениеПериода(ФормаОтчета.ЗаПроизвольныйПериод, НастройкаПериода.НачалоПериода, НастройкаПериода.КонецПериода, ФормаОтчета);
	
КонецПроцедуры 

Процедура ПослеУдаления(ФормаОтчета, Элемент) Экспорт 
	Если Найти(Элемент.Имя, "СписокЗначенияОтбора_") > 0 тогда // обработка изменения быстрого отбора 
		Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(СтрЗаменить(Элемент.Имя, "СписокЗначенияОтбора_", ""));
		ЭлементНастроек = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
		Если ЭлементНастроек <> Неопределено тогда
			ЭлементНастроек.ПравоеЗначение = ФормаОтчета["Отбор_" + СтрЗаменить(Элемент.Имя, "СписокЗначенияОтбора_", "")];
			ЭлементНастроек.Использование  = ЭлементНастроек.ПравоеЗначение.Количество()>0;
			ФормаОтчета["ИспользованиеОтбора_" + СтрЗаменить(Элемент.Имя, "СписокЗначенияОтбора_", "")] = ЭлементНастроек.Использование;
			ФункцииОтчетовКлиентСервер.УстановитьСвязиОтборов(ФормаОтчета, Идентификатор);
			ПользовательскиеНастройкиПриОкончанииРедактирования(ФормаОтчета);	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура Нажатие(ФормаОтчета, Элемент) Экспорт
	
	Если Найти(Элемент.Имя, "ВариантОтчета_") > 0 тогда
		Если ФормаОтчета.ВариантМодифицирован тогда
			Ответ = Вопрос("Вариант отчета изменен. Сохранить вариант отчета?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
			Если Ответ = КодВозвратаДиалога.Да тогда
				Если ФормаОтчета.СтандартныеНастройки.НайтиПоЗначению(ФормаОтчета.КлючТекущегоВарианта) = Неопределено тогда
					СтруктураКоманды = ФункцииОтчетовКлиентСервер.ПолучитьСтруктуруКоманды("СохранитьТекущийВариант");
					ФормаОтчета.ВыполнитьКомандуНаСервереУниверсальныйОбработчик(СтруктураКоманды);
					ФормаОтчета.ВариантМодифицирован = ложь;
				Иначе
					Предупреждение("Нельзя изменить предопределенный вариант отчета. Воспользуйтесь пунктом меню ""Сохранить вариант отчета""");
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
    	ИдентификаторЭлемента = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - Найти(Элемент.Имя, "_"));
		Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(ИдентификаторЭлемента);
		Если НЕ СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Идентификатор) тогда
			Идентификатор = ИдентификаторЭлемента;
		КонецЕсли;
		ФункцииОтчетовКлиентСервер.ВыделитьВариантОтчета(ФормаОтчета, Идентификатор);
		СтруктураКоманды = ФункцииОтчетовКлиентСервер.ПолучитьСтруктуруКоманды("УстановитьТекущийВариант", Идентификатор);
		ФормаОтчета.ВыполнитьКомандуНаСервереУниверсальныйОбработчик(СтруктураКоманды);
	КонецЕсли;
	
КонецПроцедуры


Процедура ПередЗакрытием(ФормаОтчета, Отказ, СтандартнаяОбработка) Экспорт
КонецПроцедуры

Процедура ФормаОбработкаВыбора(ФормаОтчета, РезультатВыбора, ИсточникВыбора) Экспорт 
КонецПроцедуры

Процедура ОбработкаОповещения(ФормаОтчета, ИмяСобытия, Параметр, Источник) Экспорт 
КонецПроцедуры

Процедура ВнешнееСобытие(ФормаОтчета, Источник, Событие, Данные) Экспорт
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////
//ДОПОЛНИТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбработкаРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	СобытияФункцийОтчетовКлиентПереопределяемый.ОбработкаРасшифровки(ФормаОтчета, Расшифровка);
КонецПроцедуры

Процедура УниверсальнаяПроцедураКоманды(Команда, ФормаОтчета) Экспорт 
	
	Если Найти(Команда.Имя, "Подбор_") > 0 тогда
		
		ЗначениеОтбора = ФормаОтчета[СтрЗаменить(Команда.Имя, "Подбор_", "Отбор_")];
		Если ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") тогда
			СписокТипов = ЗначениеОтбора.ТипЗначения.Типы();
			МассивДляВыбора = Новый Массив;
			Для каждого ЗначениеТипа из СписокТипов Цикл
				Если ЗначениеТипа = Тип("Строка") 
					или ЗначениеТипа = Тип("Дата")
					или ЗначениеТипа = Тип("Число") тогда
					Продолжить;
				КонецЕсли;
				МассивДляВыбора.Добавить(ЗначениеТипа);
			КонецЦикла;
			СписокТипов = МассивДляВыбора;
			Если СписокТипов.Количество() = 1 тогда
				ТипОтбора = СписокТипов[0];
			Иначе
				СписокДляВыбора = Новый СписокЗначений();
				СписокДляВыбора.ЗагрузитьЗначения(СписокТипов);
				ЭлементФормы = ФормаОтчета.Элементы.Найти(СтрЗаменить(Команда.Имя, "Подбор_", "КнопкаПодбор_"));
				Если ЭлементФормы <> Неопределено тогда  
					ЭлементСписка = ФормаОтчета.ВыбратьИзМеню(СписокДляВыбора, ЭлементФормы.Родитель); 
					Если ЭлементСписка <> Неопределено тогда
						ТипОтбора = ЭлементСписка.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаИдентификатора = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(СтрЗаменить(Команда.Имя, "Подбор_", ""));
			
			МассивПутейКФормамОтборов = ФормаОтчета.ПутиКФормамОтборов.НайтиСтроки(Новый Структура("Отбор", СтрокаИдентификатора));
			ПутьКФорме = Неопределено;
			Для каждого СтрокаДанных из МассивПутейКФормамОтборов Цикл
				Если Тип(СтрокаДанных.Тип) = ТипОтбора тогда
					ПутьКФорме = СтрокаДанных.ПутьКФорме;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ПутьКФорме <> Неопределено тогда
				ПараметрыФормы = ФункцииОтчетовКлиентСервер.ПолучитьСтруктуруОтборов(ФормаОтчета, ФормаОтчета.Отчет.КомпоновщикНастроек, СтрокаИдентификатора, ТипОтбора);
				Форма = ОткрытьФорму(ПутьКФорме, ПараметрыФормы, ФормаОтчета.Элементы.Найти(СтрЗаменить(Команда.Имя, "Подбор_", "СписокЗначенияОтбора_")));
				Форма.ЗакрыватьПриВыборе = ложь;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Найти(Команда.Имя, "ПоляВыбораПереместитьВверх_") > 0 или Найти(Команда.Имя, "ПоляВыбораПереместитьВниз_") > 0 тогда
		Направление = 0;
		Если Найти(Команда.Имя, "ПоляВыбораПереместитьВверх_") > 0 тогда
			Направление = -1;
		Иначе
			Направление = 1;
		КонецЕсли;
		ИдентификаторЭлемента = Прав(Команда.Имя, СтрДлина(Команда.Имя) - Найти(Команда.Имя, "_"));
		Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(ИдентификаторЭлемента);
		ЭлементНастроек = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
		Если ЭлементНастроек <> Неопределено тогда
			ТаблицаФормы  = ФормаОтчета.Элементы["ПоляВыбора_" + ИдентификаторЭлемента];
			Таблица = ФормаОтчета["ТаблицаПолейВыбора_" + ИдентификаторЭлемента];
			ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
			ИндексТекДанных = Таблица.Индекс(ТекущиеДанные);
			ИдентификаторСтрок = ТекущиеДанные.Идентификатор;
			ПолеВыбора = ФункцииОтчетовКлиентСервер.ПолучитьПолеВыбораПоИдентификатору(ЭлементНастроек, ИдентификаторСтрок);
			Если ПолеВыбора <> Неопределено тогда
				ЭлементНастроек.Элементы.Сдвинуть(ПолеВыбора, Направление);
				ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастроек.ИдентификаторПользовательскойНастройки);
				Если ЭлементНастройкиВарианта <> Неопределено тогда
					Таблица.Очистить();
					ФункцииОтчетовКлиентСервер.ДобавитьЭлементыНастройки(ФормаОтчета, Таблица, ЭлементНастроек, ЭлементНастроек, истина);
					МассивСтрок = Таблица.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторСтрок));
					Если МассивСтрок.Количество() > 0 тогда
						ТаблицаФормы.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор()
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(Команда.Имя, "ПорядокПереместитьВверх_") > 0 или Найти(Команда.Имя, "ПорядокПереместитьВниз_") > 0 тогда
		Направление = 0;
		Если Найти(Команда.Имя, "ПорядокПереместитьВверх_") > 0 тогда
			Направление = -1;
		Иначе
			Направление = 1;
		КонецЕсли;

    	ИдентификаторЭлемента = Прав(Команда.Имя, СтрДлина(Команда.Имя) - Найти(Команда.Имя, "_"));
		Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(ИдентификаторЭлемента);
		ЭлементНастроек = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
		ТаблицаФормы  = ФормаОтчета.Элементы["ПоляПорядка_" + ИдентификаторЭлемента];
		ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено тогда
			Возврат;
		КонецЕсли;
		Таблица = ФормаОтчета["ТаблицаПорядка_" + ИдентификаторЭлемента];
		ИдентификаторСтрок = ТекущиеДанные.Идентификатор;
   		ЭлементПорядка  = ФункцииОтчетовКлиентСервер.ПолучитьПорядокПоИдентификатору(ЭлементНастроек, ИдентификаторСтрок);
		ЭлементНастроек.Элементы.Сдвинуть(ЭлементПорядка, Направление);
		
		Таблица.Очистить();
		
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастроек.ИдентификаторПользовательскойНастройки);
		Для каждого ЭлементПорядка из ЭлементНастроек.Элементы Цикл
			Если ТипЗнч(ЭлементПорядка) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") тогда
				Продолжить;
			КонецЕсли;
			СтрокаПорядка = Таблица.Добавить();
			СтрокаПорядка.Использование = ЭлементПорядка.Использование;
			СтрокаПорядка.Идентификатор = Строка(ЭлементНастроек.ПолучитьИдентификаторПоОбъекту(ЭлементПорядка));
			ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка, ЭлементПорядка.Поле);
			СтрокаПорядка.Представление = ДоступноеПоле.Заголовок;
		КонецЦикла;
		МассивСтрок = Таблица.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторСтрок));
		Если МассивСтрок.Количество() > 0 тогда
			ТаблицаФормы.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор()
		КонецЕсли;
	ИначеЕсли Найти(Команда.Имя, "ПереместитьГруппировкуВверх_") > 0 или Найти(Команда.Имя, "ПереместитьГруппировкуВниз_") > 0 тогда
		Направление = 0;
		Если Найти(Команда.Имя, "ПереместитьГруппировкуВверх_") > 0 тогда
			Направление = -1;
		Иначе
			Направление = 1;
		КонецЕсли;

    	ИдентификаторЭлемента = Прав(Команда.Имя, СтрДлина(Команда.Имя) - Найти(Команда.Имя, "_"));
		Идентификатор   = ФункцииОтчетовКлиентСервер.ПолучитьУникальныйИдентификаторИзИмениЭлемента(ИдентификаторЭлемента);
		ЭлементНастроек = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Идентификатор);
		ТаблицаФормы  = ФормаОтчета.Элементы["Группировки_" + ИдентификаторЭлемента];
		ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
		Таблица = ФормаОтчета["НастройкаГруппировок_" + ИдентификаторЭлемента];
		ИндексСтроки = Таблица.Индекс(ТекущиеДанные);
		ИдентификаторСтрок = ТекущиеДанные.Идентификатор;
		ЭлементСтруктуры = ЭлементНастроек.Структура.Получить(ИндексСтроки);
		
		ЭлементНастроек.Структура.Сдвинуть(ЭлементСтруктуры, Направление);
		
		Таблица.Очистить();
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастроек.ИдентификаторПользовательскойНастройки);
		Для каждого ЭлементСтруктуры из ЭлементНастроек.Структура Цикл
			Представление = "";
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
				или ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
				или ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
				Для каждого ПолеГруппировки из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
					Если НЕ ПолеГруппировки.Использование тогда
						Продолжить;
					КонецЕсли;
					ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок, ПолеГруппировки.Поле);
					Представление = Представление + ДоступноеПоле.Заголовок + ", ";
				КонецЦикла;
				Представление = Лев(Представление,  СтрДлина(Представление)-2);
			Иначе
				Представление = "Таблица / диаграмма";
			КонецЕсли;
			СтрокиГруппировки = Таблица.Добавить();
			СтрокиГруппировки.Идентификатор = ЭлементСтруктуры.ИдентификаторПользовательскойНастройки;
			СтрокиГруппировки.Использование = ЭлементСтруктуры.Использование;
			СтрокиГруппировки.Представление = Представление;
		КонецЦикла;
		ИндексСтроки = ИндексСтроки + Направление;
		Если ИндексСтроки < 0 тогда
			ИндексСтроки = 0;
		ИначеЕсли ИндексСтроки >= Таблица.Количество() тогда
			ИндексСтроки = Таблица.Количество()-1;
		КонецЕсли;
		ТекущиеДанные = Таблица.Получить(ИндексСтроки);
		ТаблицаФормы.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
	ИначеЕсли Команда.Имя = "ВключитьПанельВыбораВариантовОтчета" тогда
		ПанельВыбораВариантов = ФормаОтчета.Элементы.Найти("ГруппаВыбораВариантовОтчета");
		Если ПанельВыбораВариантов <> Неопределено тогда
			Если ПанельВыбораВариантов.Видимость тогда
				ПанельВыбораВариантов.Видимость = ложь;
				Кнопка = ФормаОтчета.Элементы.Найти("ВключитьПанельВыбораВариантовОтчета");
				Если Кнопка <> Неопределено тогда
					Кнопка.Пометка = ложь;
				КонецЕсли;
			Иначе
				ПанельВыбораВариантов.Видимость = истина;
				Кнопка = ФормаОтчета.Элементы.Найти("ВключитьПанельВыбораВариантовОтчета");
				Если Кнопка <> Неопределено тогда
					Кнопка.Пометка = истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Команда.Имя = "ВключитьПанельНастроекПользователя" тогда
		ГруппаНастроекПользователя = ФормаОтчета.Элементы.Найти("ПанельНастроекПользователя");
		Если ГруппаНастроекПользователя <> Неопределено тогда
			Если ГруппаНастроекПользователя.Видимость тогда
				ГруппаНастроекПользователя.Видимость = ложь;
				Кнопка = ФормаОтчета.Элементы.Найти("ВключитьПанельНастроекПользователя");
				Если Кнопка <> Неопределено тогда
					Кнопка.Пометка = ложь;
				КонецЕсли;
			Иначе
				ГруппаНастроекПользователя.Видимость = истина;
				СтруктураКоманды = ФункцииОтчетовКлиентСервер.ПолучитьСтруктуруКоманды("ОбновитьПанельПользователя");
				ФормаОтчета.ВыполнитьКомандуНаСервереУниверсальныйОбработчик(СтруктураКоманды);
				Кнопка = ФормаОтчета.Элементы.Найти("ВключитьПанельНастроекПользователя");
				Если Кнопка <> Неопределено тогда
					Кнопка.Пометка = истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ПолучитьСкоростьКлиентскогоСоединения() <> СкоростьКлиентскогоСоединения.Низкая тогда
			СтруктураКоманды = ФункцииОтчетовКлиентСервер.ПолучитьСтруктуруКоманды("ОбновитьПанельПользователя");
			ФормаОтчета.ВыполнитьКомандуНаСервереУниверсальныйОбработчик(СтруктураКоманды);   
		КонецЕсли;
	ИначеЕсли Команда.Имя = "ОткрытьНастройкуПользователя" тогда
		ФормаНастроек = ПолучитьФорму("ОбщаяФорма.ФормаПользовательскихНастроек", , ФормаОтчета); 
		ФормаНастроек.КомпоновщикНастроек = ФормаОтчета.Отчет.КомпоновщикНастроек;
		//ФормаНастроек.Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
		Результат =ФормаНастроек.ОткрытьМодально();
		Если Результат = истина тогда
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ФормаНастроек.КомпоновщикНастроек.ПользовательскиеНастройки);
			СтруктураКоманды = ФункцииОтчетовКлиентСервер.ПолучитьСтруктуруКоманды("ОбновитьПанельПользователя");
			ФормаОтчета.ВыполнитьКомандуНаСервереУниверсальныйОбработчик(СтруктураКоманды)
		КонецЕсли;
	ИначеЕсли Команда.Имя = "ОтправитьОтчетПоПочте" тогда
		СтруктураКоманды = ФункцииОтчетовКлиентСервер.ПолучитьСтруктуруКоманды("ОтправитьПоПочте");
		ФормаОтчета.ВыполнитьКомандуНаСервереУниверсальныйОбработчик(СтруктураКоманды)
	КонецЕсли;
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция УникальноеИмяЭлементаФормы() Экспорт
	
	Возврат "Элемент" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	
КонецФункции // УникальноеИмяЭлементаФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ВВОДА ДАТЫ КАК МЕСЯЦА

// Предназначена для реализации "произвольного" ввода даты-месяца
// подбирает по переданному тексту строку-представление даты или список таких строк
// в переданный параметр ДатаПоТексту возвращает подобранную по тексту дату
Процедура ДатаКакМесяцОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
	
	Если Список.Количество() = 1 Тогда
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(Текст);
	Иначе
		ДанныеВыбора = Список;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт
	
	Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
	
	Если Список.Количество() = 1 Тогда
		ТекстАвтоПодбора = Список[0];
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура обрабатывает событие начала выбора из списка в поле периода регистрации
// Процедура исполняется только на клиенте
//
Процедура НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, НачальноеЗначение = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли; 
	
	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоМесяцаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	Для а = 1 По 12 Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ДатаКакМесяцПредставление(НачалоМесяцаЗаполнения));
		Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли; 
		НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 1);
	КонецЦикла;
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(НачальноеЗначение) Тогда
		НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, ВыбранныйЭлемент.Значение);
		Возврат;
	КонецЕсли;
	
	ПериодРегистрации = ВыбранныйЭлемент.Значение;
	
	ЭтаФорма[Элемент.Имя]  = ДатаКакМесяцПредставление(ПериодРегистрации);

КонецПроцедуры

// Предназначена для реализации "произвольного" ввода даты-месяца
// подбирает по переданному тексту строку-представление даты или список таких строк
// в переданный параметр ДатаПоТексту возвращает подобранную по тексту дату
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено) ЭКспорт
	
	СписокВозврата = Новый СписокЗначений;
	
	ТекущийГод = Год(ТекущаяДата());
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат СписокВозврата;
	КонецЕсли;
	Если Найти(Текст, ".") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли Найти(Текст, ",") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли Найти(Текст, "-") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли Найти(Текст, "/") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли Найти(Текст, "\") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	Если Подстроки.Количество() = 1 Тогда
		// единственное слово - пытаемся получить месяц
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 и МесяцЧислом <=12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гг'"));
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		// два слова - первое считаем месяцем, второе - годом
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
				СтрокаФорматированияГода = "г";
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
				СтрокаФорматированияГода = "гг";
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
				СтрокаФорматированияГода = "гггг";
			КонецЕсли;                    
		Иначе
			// второе слово может быть только годом
			Возврат СписокВозврата;
		КонецЕсли;                
		Если ЗначениеЗаполнено(Подстроки[0]) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 и МесяцЧислом <= 12 Тогда
				// если "правильный" месяц и год
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(ТекстВозврата);
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить("");
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гг'"));
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

Функция ДатаКакМесяцПредставление(ДатаДата) Экспорт
	Возврат Формат(ДатаДата, "ДФ='ММММ гггг'");
КонецФункции

Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев = Новый СписокЗначений;
	Месяцы = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРЕДСТАВЛЕНИЯ ИНФОРМАЦИИ В ФОРМЕ

// Выводит надпись и соответствующую ей картинку
//
// Параметры
//  ЭУНадпись, ЭУКартинка - элементы управления формы, соответственно надпись и картинка
//  ТекстСообщения - строка - выводимое сообщение
//  ВажностьСообщения - строка - определяет расцветку текста и картинку
//		допустимые значения: "СообщениеОПроблемах", "ВажнаяИнформация" и "Информация"
//
Процедура ПоказатьИнформациюОДокументе(ЭУНадпись = Неопределено, ЭУКартинка = Неопределено, ТекстСообщения = "", Стиль, ТекстИнформационнойНадписи) Экспорт 
	
	Если ЭУНадпись = Неопределено Или ЭУКартинка = Неопределено Тогда
		Возврат
	КонецЕсли;
	                                   
	ЭУКартинка.Картинка = Стиль.Картинка;
	ЭУНадпись.ЦветТекста = Стиль.ЦветТекста;
	
	ТекстИнформационнойНадписи = ТекстСообщения;
	
КонецПроцедуры // ПоказатьИнформациюОДокументе()

Функция ПолучитьПредставлениеМесяца(Дата) Экспорт
	
	ПредставленияМесяцевРодительныйПадеж = Новый Соответствие;
	ПредставленияМесяцевРодительныйПадеж.Вставить(1,	"января");
	ПредставленияМесяцевРодительныйПадеж.Вставить(2,	"февраля");
	ПредставленияМесяцевРодительныйПадеж.Вставить(3,	"марта");
	ПредставленияМесяцевРодительныйПадеж.Вставить(4,	"апреля");
	ПредставленияМесяцевРодительныйПадеж.Вставить(5,	"мая");
	ПредставленияМесяцевРодительныйПадеж.Вставить(6,	"июня");
	ПредставленияМесяцевРодительныйПадеж.Вставить(7,	"июля");
	ПредставленияМесяцевРодительныйПадеж.Вставить(8,	"августа");
	ПредставленияМесяцевРодительныйПадеж.Вставить(9,	"сентября");
	ПредставленияМесяцевРодительныйПадеж.Вставить(10,	"октября");
	ПредставленияМесяцевРодительныйПадеж.Вставить(11,	"ноября");
	ПредставленияМесяцевРодительныйПадеж.Вставить(12,	"декабря");
	
	Возврат ПредставленияМесяцевРодительныйПадеж.Получить(Месяц(Дата));
	
КонецФункции // ПолучитьПредставлениеМесяца

////////////////////////////////////////////////////////////////////////////////

Процедура ВывестиПредупреждение(Текст = "", Заголовок = "") Экспорт
	
	Предупреждение(Текст, , Заголовок);
	
КонецПроцедуры

Функция ЗадатьВопрос(ТекстВопроса = "", Режим = "", КнопкаПоУмолчанию = Неопределено, Заголовок = "") Экспорт
	
	Возврат Вопрос(ТекстВопроса, Режим, , КнопкаПоУмолчанию, Заголовок)
	
КонецФункции

Функция ПользовательСогласен(ТекстСообщения) Экспорт
	
	Возврат ЗадатьВопрос(ТекстСообщения, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да;
	
КонецФункции // ПользовательСогласен

// Этот модуль предназачен для реализации алгоритмов работы форм и 
// содержит процедуры и функции работы с формами и элементами форм,
// а также подготовки данных для представления информации в формах.
// Временно присутствует секция поддержки формирования печатных форм.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ВЫЗОВА ИЗ ИНТЕРФЕЙСА

Процедура ОткрытьФормуНастройкиОбновленияКонфигурации() Экспорт
	Форма = ПолучитьОбщуюФорму("НастройкаОбновленияКонфигурации");
	Форма.Открыть();
Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧЕНИЯ ТАЙПИНГА В ПОЛЕ ВВОДА

// Процедура инициализирует параметры обработки тайпинга
Процедура ИнициализироватьПараметрыОбработкиТайпинга(ОбработкаТайпинга, ТекстТайпинга, ПоследнееЗначениеЭлементаТайпинга) Экспорт
	
	ОбработкаТайпинга                 = Ложь;
	ТекстТайпинга                     = "";
	ПоследнееЗначениеЭлементаТайпинга = Неопределено;
   	
КонецПроцедуры

// Функция формирует ограничение для запроса по полю 
Функция СформироватьОграничениеПоПолюВхождениеВНачало(ИмяПоля, ТипЗначенияПоиска) Экспорт
	
	Ограничение = ИмяПоля + ?(ТипЗначенияПоиска = Тип("Строка"), (" ПОДОБНО &ТекстАвтоПодбора СПЕЦСИМВОЛ ""~"""), (" =  &ТекстАвтоПодбораЧисло"));
	Возврат "(" + Ограничение + ") ";
	
КонецФункции

//Функция Определяет тип ограничений по полю
Функция ОпределитьТипОграниченийПоПолю(ИмяЭлемента, МетаданныеОбъекта, ДляСправочника = Истина)
	
	Если ДляСправочника Тогда
		
		Если ИмяЭлемента <> "Наименование" И ИмяЭлемента <> "Код" Тогда
	    	ТипЗначенияПоиска = МетаданныеОбъекта.Реквизиты[ИмяЭлемента].Тип.Типы()[0];
		Иначе
			Если ИмяЭлемента = "Наименование" Тогда
				ТипЗначенияПоиска = Тип("Строка");
			Иначе
				Если МетаданныеОбъекта.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
					ТипЗначенияПоиска = Тип("Строка");
				Иначе
					ТипЗначенияПоиска = Тип("Число");
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
	Иначе
		// тип определяем для регистра сведений
		Объект = МетаданныеОбъекта.Измерения.Найти(ИмяЭлемента);
		Если Объект = Неопределено Тогда
			Объект = МетаданныеОбъекта.Ресурсы.Найти(ИмяЭлемента);
		КонецЕсли;
		Если Объект = Неопределено Тогда
			Объект = МетаданныеОбъекта.Реквизиты.Найти(ИмяЭлемента);
			Если Объект = Неопределено Тогда
				ТипЗначенияПоиска = Тип("Строка");
			КонецЕсли;	
		КонецЕсли;
		ТипЗначенияПоиска = Объект.Тип.Типы()[0];
		
	КонецЕсли;
	
	Возврат  ТипЗначенияПоиска;
	
КонецФункции

// функция из исходной строки формирует строку для поиска данных в запросе
Функция СформироватьСтрокуДляПоискаВЗапросе(Знач СтрокаПоиска) Экспорт
	
	ИтоговаяСтрокаДляПоиска = СтрокаПоиска;
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "~", "~~");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "%", "~%");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "_", "~_");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "[", "~[");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "-", "~-");

	Возврат ИтоговаяСтрокаДляПоиска;
	
КонецФункции

// Функция создает объект запрос и устанавливает у него параметры ТекстАвтоПодбора и ТекстАвтоПодбораЧисло
// убирает лишние символы в строке поиска
Функция  СоздатьЗапросДляСпискаАвтоподбора(СтрокаПоиска, СтрокаОтборовПоСтруктуре, СтруктураПараметров, ИмяТаблицыОграничений)
	
	Запрос = Новый Запрос;
	
	СтрокаПоиска = СформироватьСтрокуДляПоискаВЗапросе(СтрокаПоиска);
		
	Запрос.УстановитьПараметр("ТекстАвтоПодбора"     , (СтрокаПоиска + "%"));
	Попытка
		Запрос.УстановитьПараметр("ТекстАвтоПодбораЧисло", Число(СтрокаПоиска));
	Исключение
		Запрос.УстановитьПараметр("ТекстАвтоПодбораЧисло", Неопределено);
	КонецПопытки;
	
	// Устанавливает ограничения
	СтрокаОтборовПоСтруктуре = "";
	Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
		Ключ 	 = ЭлементСтруктуры.Ключ;
        Значение = ЭлементСтруктуры.Значение;

		Запрос.УстановитьПараметр(Ключ, Значение);
		СтрокаОтборовПоСтруктуре = СтрокаОтборовПоСтруктуре + "
		|		И
		|		" + ИмяТаблицыОграничений + "." + Ключ + " В (&"+ Ключ + ")";
	КонецЦикла; 
	
	Возврат Запрос;
	
КонецФункции

//Функция Строит запрос автоподбора для регистра
Функция ПолучитьРезультатЗапросаАвтоподбораДляРегистра(Знач Текст, СтруктураПараметров, ИмяРегистра, ПоляДляПоиска, КоличествоЭлементов) Экспорт
	
	Если (ПоляДляПоиска = Неопределено) ИЛИ ПоляДляПоиска.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Объект = Метаданные.РегистрыСведений[ИмяРегистра];
    	
	СтрокаОтборовПоСтруктуре = "";
	
	Запрос = СоздатьЗапросДляСпискаАвтоподбора(Текст, СтрокаОтборовПоСтруктуре, СтруктураПараметров, "ТаблицаРегистра");
	
	СтрокаПолей = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + Строка(КоличествоЭлементов) + "
				  	|	ТаблицаРегистра.* ";
	
	Запрос.Текст = СтрокаПолей + "
		|ИЗ
		|	РегистрСведений." + ИмяРегистра + " КАК ТаблицаРегистра
		|ГДЕ ";

	
	// формируем ограничения по полям для поиска
	ОграничениеПоПолю = "";
	Для Каждого ПолеПоиска из ПоляДляПоиска Цикл
		
		ТипЗначенияПоиска = ОпределитьТипОграниченийПоПолю(ПолеПоиска, Объект, Ложь);
		Если (ОграничениеПоПолю <> "") Тогда
			ОграничениеПоПолю = ОграничениеПоПолю + "
				| ИЛИ ";
		КонецЕсли;
		ОграничениеПоПолю = ОграничениеПоПолю + СформироватьОграничениеПоПолюВхождениеВНачало("ТаблицаРегистра." + ПолеПоиска, ТипЗначенияПоиска);

	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст +"
		|	(" + ОграничениеПоПолю + ") " + СтрокаОтборовПоСтруктуре;

	Возврат Запрос.Выполнить();
 	
КонецФункции

// По плану видов расчета выполняет поиск элементов по первым символам имени с применением шаблона
// Параметры:
//     	СтрокаПервыеСимволы - Строка - первые символы имени расчета
// 	   	ИмяПланаВидовРасчета - Строка - имя плана видов расчета
//	   	СтрокаДопУсловие - Строка - дополнительное условие для отбора видов расчетов
//		СписокДопПараметры - Структура - параметры запроса, необходимые для вычисления доп. условия
//		СтандартнаяОбработка - Булево - признак стандартной обработки события окончания ввода текста
// Возвращает:
//		Удовлетворяющий шаблону имени и условиям отбора вид расчета, если таких несколько - то список значений
Функция ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(СтрокаПервыеСимволы, ИмяПланаВидовРасчета, СтрокаДопУсловие, СтруктураДопПараметры, СтандартнаяОбработка) Экспорт
	Если ПустаяСтрока(СтрокаПервыеСимволы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 51
	               |	ОсновныеНачисленияОрганизаций.Ссылка КАК Ссылка,
	               |	ОсновныеНачисленияОрганизаций.Наименование + "" ("" + ОсновныеНачисленияОрганизаций.Код + "")"" КАК СтрокаПредставления
	               |ИЗ
	               |	ПланВидовРасчета." + ИмяПланаВидовРасчета + " КАК ОсновныеНачисленияОрганизаций
	               |
	               |ГДЕ
	               |	ОсновныеНачисленияОрганизаций.Наименование ПОДОБНО &парамШаблонИмени
				   | " + ?(СтрокаДопУсловие = "" , "", " И " + СтрокаДопУсловие);
				   
	// Параметры, требуемые для вычисления дополнительного условия
    Для Каждого Элемент ИЗ СтруктураДопПараметры  Цикл
        Запрос.УстановитьПараметр(Элемент.Ключ , Элемент.Значение);
    КонецЦикла; 
	
	// заменим спецсимволы
	СтрокаПервыеСимволы = СтрЗаменить(СтрокаПервыеСимволы, "~", "~~");
	СтрокаПервыеСимволы = СтрЗаменить(СтрокаПервыеСимволы, "%", "~%");
	СтрокаПервыеСимволы = СтрЗаменить(СтрокаПервыеСимволы, "_", "~_");
	СтрокаПервыеСимволы = СтрЗаменить(СтрокаПервыеСимволы, "[", "~[");
	СтрокаПервыеСимволы = СтрЗаменить(СтрокаПервыеСимволы, "-", "~-");
	
	Запрос.УстановитьПараметр("парамШаблонИмени", СтрокаПервыеСимволы + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Значение = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		Значение.Добавить(Выборка.Ссылка, Выборка.СтрокаПредставления);
	КонецЦикла;
	
	СтандартнаяОбработка = (Значение.Количество() > 50);
	
	Возврат Значение;
	
КонецФункции


// функция по типу возвращает наименование ветки метаданных
Функция ПолучитьВеткуМетаданныхПоТипу(ТипДанных)
	
	ВеткаМетаданных = "";
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипДанных) Тогда
		ВеткаМетаданных = "Справочник"
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипДанных) Тогда
		ВеткаМетаданных = "ПланВидовРасчета"
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипДанных) Тогда
		ВеткаМетаданных = "ПланВидовХарактеристик"
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипДанных) Тогда
		ВеткаМетаданных = "ПланСчетов"
	КонецЕсли;
	
	Возврат ВеткаМетаданных;

КонецФункции

// Функция выполняет запрос при автоподборе текста  и при окончании ввода текста в поле ввода.
//
// Параметры
//  Текст - Строка, текст введенный в поле ввода видв контактной информации, по которому необходимо строить поиск
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ТипСправочника - Тип, тип справочника автоподбора текста
//  КоличествоЭлементов - Число, количество элементов в результирующей таблице запроса
//
// Возвращаемое значение
//  РезультатЗапроса
//
Функция ПолучитьРезультатЗапросаАвтоподбора(Знач Текст, СтруктураПараметров, ТипСправочника, КоличествоЭлементов) Экспорт
	
	ВеткаМетаданных = ПолучитьВеткуМетаданныхПоТипу(ТипСправочника);
	
	Если ВеткаМетаданных = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПустаяСсылкаТипа = Новый(ТипСправочника);

	МетаданныеОбъекта = ПустаяСсылкаТипа.Метаданные();
	
	КоллекцияПоискаПоПодстроке = МетаданныеОбъекта.ВводПоСтроке;
	Если КоллекцияПоискаПоПодстроке.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ИмяТаблицыСправочника = МетаданныеОбъекта.Имя;
	ИмяТаблицыОграничений = ?(КоллекцияПоискаПоПодстроке.Количество() = 1, "ТаблицаВложенногоЗапроса", "ТаблицаСправочника");
	СтрокаОтборовПоСтруктуре = "";
	
	Запрос = СоздатьЗапросДляСпискаАвтоподбора(Текст, СтрокаОтборовПоСтруктуре, СтруктураПараметров, ИмяТаблицыОграничений);
	
	СтрокаПолей = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Строка(КоличествоЭлементов) + "
	|	ТаблицаВложенногоЗапроса.Ссылка КАК Ссылка,
	|";
	
	Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
		СтрокаПолей = СтрокаПолей + "
		|	ТаблицаВложенногоЗапроса.Ссылка.Наименование КАК Наименование,";
	КонецЕсли;
	
	Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
		СтрокаПолей = СтрокаПолей + "
		|	ТаблицаВложенногоЗапроса.Ссылка.Код КАК Код,";
	КонецЕсли; 
	
	Если КоллекцияПоискаПоПодстроке.Количество() = 1 Тогда
		
		ЭлементКоллекции = КоллекцияПоискаПоПодстроке[0];
		ТипЗначенияПоиска = ОпределитьТипОграниченийПоПолю(ЭлементКоллекции.Имя, МетаданныеОбъекта);
		
		Если ЭлементКоллекции.Имя <> "Наименование" И ЭлементКоллекции.Имя <> "Код" Тогда
			СтрокаПолей = СтрокаПолей + "
			|	ТаблицаВложенногоЗапроса.Ссылка." + ЭлементКоллекции.Имя + " КАК " + ЭлементКоллекции.Имя;

		КонецЕсли;
		
		Запрос.Текст = Лев(СтрокаПолей, (СтрДлина(СтрокаПолей) - 1)) + "
		|ИЗ
		|	" + ВеткаМетаданных + "." + ИмяТаблицыСправочника + " КАК ТаблицаВложенногоЗапроса
		|ГДЕ ";
		
		ОграничениеПоПолю = СформироватьОграничениеПоПолюВхождениеВНачало("ТаблицаВложенногоЗапроса." + ЭлементКоллекции.Имя, ТипЗначенияПоиска);
		
		ОграничениеПоПолю = ОграничениеПоПолю + "
		|	И НЕ ТаблицаВложенногоЗапроса.ПометкаУдаления ";
		
		Запрос.Текст = Запрос.Текст +"
		|	" + ОграничениеПоПолю + СтрокаОтборовПоСтруктуре;
	
	Иначе
		
		ПервыйЭлемент = Истина;
		СтрокаТаблиц = "";
		Для Каждого ЭлементКоллекции Из КоллекцияПоискаПоПодстроке Цикл
			
			ТипЗначенияПоиска = ОпределитьТипОграниченийПоПолю(ЭлементКоллекции.Имя, МетаданныеОбъекта);
			
			Если ЭлементКоллекции.Имя <> "Наименование" И ЭлементКоллекции.Имя <> "Код" Тогда
				СтрокаПолей = СтрокаПолей + "
				|	ТаблицаВложенногоЗапроса.Ссылка." + ЭлементКоллекции.Имя + " КАК " + ЭлементКоллекции.Имя + ",";

			КонецЕсли;
			
			Если НЕ ПервыйЭлемент Тогда
				СтрокаТаблиц = СтрокаТаблиц + "
				|
				|	ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли; 
			ПервыйЭлемент = Ложь;
			
			СтрокаТаблиц = СтрокаТаблиц + "
			|	ВЫБРАТЬ  ПЕРВЫЕ " + Строка(КоличествоЭлементов) + "
			|		ТаблицаСправочника.Ссылка КАК Ссылка
			|	ИЗ
			|		" + ВеткаМетаданных + "." + ИмяТаблицыСправочника + " КАК ТаблицаСправочника
			|	ГДЕ ";

			
			ОграничениеПоПолю = СформироватьОграничениеПоПолюВхождениеВНачало("ТаблицаСправочника." + ЭлементКоллекции.Имя, ТипЗначенияПоиска);
			
			ОграничениеПоПолю = ОграничениеПоПолю + "
			|	И НЕ ТаблицаСправочника.ПометкаУдаления ";
			
			СтрокаТаблиц = СтрокаТаблиц +"
			|	" + ОграничениеПоПолю + СтрокаОтборовПоСтруктуре;		
		КонецЦикла; 
		
		Запрос.Текст = Лев(СтрокаПолей, (СтрДлина(СтрокаПолей) - 1)) + "
		|ИЗ
		|
		|	(
		|" + СтрокаТаблиц + "
		|	) КАК ТаблицаВложенногоЗапроса";
	
	КонецЕсли; 
	
	Возврат Запрос.Выполнить();

КонецФункции

// Процедура обслуживает событие ОбновлениеОтображения в форме, где расположен ЭУ тайпинга.
//
// Параметры
//  ЭтаФорма - Форма записи регистра сведений КонтактнаяИнформация
//  Элемент - элемент управления в котором происводится тайпинг
//
Процедура ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, Элемент, ОбработкаТайпинга, ТекстТайпинга) Экспорт

	Если ОбработкаТайпинга Тогда
		ЭтаФорма.ТекущийЭлемент = Элемент;
		Элемент.ВыделенныйТекст = ТекстТайпинга;
		ОбработкаТайпинга = Ложь;
		ТекстТайпинга = "";
	КонецЕсли; 
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		Элемент.ЦветТекстаПоля = ЦветаСтиля.ТекстИнформационнойНадписи;
	Иначе
		Элемент.ЦветТекстаПоля = Новый Цвет;
	КонецЕсли;

КонецПроцедуры

// Функция подбирает значения по выборке
Функция ПолучитьАвтоподборПоВыборке(РезультатЗапроса, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПоляПоиска) Экспорт
	
	СтруктураНайденногоЭлемента = Новый Структура;
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат СтруктураНайденногоЭлемента;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СтруктураНайденногоЭлемента;
	КонецЕсли;
	
	ВрегТекст =	ВРег(Текст);
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() <> 1 Тогда
		Возврат СтруктураНайденногоЭлемента;
	КонецЕсли;

	// выбран только один элемент - его и подставляем
	Выборка.Следующий();
	Для Каждого ИмяПоляПоиска Из ПоляПоиска Цикл
		ВрегЗначение = Врег(Выборка[ИмяПоляПоиска]);
		
		Если Лев(ВрегЗначение, СтрДлина(ВрегТекст)) = ВрегТекст Тогда
			Если ВрегТекст <> ВрегЗначение Тогда
				ТекстАвтоподбора = Выборка[ИмяПоляПоиска];
				УправлениеКонтактнойИнформацией.ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, Выборка, СтруктураНайденногоЭлемента);
			КонецЕсли;
			
			Возврат СтруктураНайденногоЭлемента;
		КонецЕсли; 
		
	КонецЦикла; 
		
КонецФункции

// Функция формирует массив имен полей по которым организованн ввод по строке
Функция СформироватьМассивПоКоллекцииВводаПоСтроке(ТипСправочника) Экспорт
	
	ПоляПоиска = Новый Массив();
	ПустаяСсылка = Новый(ТипСправочника);
	КоллекцияЭлементовПоиска = ПустаяСсылка.Метаданные().ВводПоСтроке;
	Для Каждого ЭлементКоллекции Из КоллекцияЭлементовПоиска Цикл
		ПоляПоиска.Добавить(ЭлементКоллекции.Имя)
	КонецЦикла;
	
	Возврат ПоляПоиска;
	
КонецФункции

Процедура АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СтруктураПараметров, ТипСправочника) Экспорт

	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, ТипСправочника, 2);
	ПоляПоиска = СформироватьМассивПоКоллекцииВводаПоСтроке(ТипСправочника);
	ПолучитьАвтоподборПоВыборке(РезультатЗапроса, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПоляПоиска);
	
КонецПроцедуры

// Функция обслуживает событие АвтоПодборТекста элемента управления ПолеВвода для подмены автопоиска по тексту.
//
// Параметры
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода Вид
//  ТекстАвтоПодбора - текст автоподбора в поле Вид
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ТипСправочника - строка, имя регистра в котором ищется информация
//	ПоляПоиска - массивы полей для Поиска
//
Функция АвтоПодборТекстаВЭлементеУправленияПоРегистру(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СтруктураПараметров, 
														ИмяРегистра, ПоляПоиска, ПолеВыбора) Экспорт

	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбораДляРегистра(Текст, СтруктураПараметров, ИмяРегистра, ПоляПоиска, 2);
	МассивПолеВыбора = Новый Массив();
	МассивПолеВыбора.Добавить(ПолеВыбора);
	СтруктураНайденногоЭлемента = ПолучитьАвтоподборПоВыборке(РезультатЗапроса, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, МассивПолеВыбора);
	Возврат СтруктураНайденногоЭлемента;
	
КонецФункции

// Функция формирует список выбора значений, для события ОкончаниеВводаТекста.
//
// Параметры
//  РезультатЗапроса - РезультатЗапроса при тайпинге
//  Текст - Строка, текст тайпинга
//  ТипСправочника - Тип, тип справочника автоподбора текста
//  ОсновноеПредставлениеВВидеКода - Булево, является ли представление в виде кода основным для справочника
//
// Возвращаемое значение:
//   Список значений
//
Функция СформироватьСписокВыбораЗначенийТайпинга(ТаблицаЗапроса, Знач Текст, ПоляПоиска, ОсновноеПредставлениеВВидеКода) Экспорт

	КЧ = Новый КвалификаторыЧисла(12,2);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	ТаблицаЗапроса.Колонки.Добавить("УникальныйНомерСтроки", ОписаниеТиповЧ);
	
	СписокВозврата = Новый СписокЗначений;
	
	Текст = ВРег(Текст);
	ДлинаТекста = СтрДлина(Текст);
	
	ЕстьНаименование = (ТаблицаЗапроса.Колонки.Найти("Наименование") <> Неопределено);
	ЕстьКод          = (ТаблицаЗапроса.Колонки.Найти("Код") <> Неопределено);
	
	НужноИскатьПоКоду 		  = (ОбщегоНазначения.ВернутьИндексВМассиве(ПоляПоиска, "Код") <> -1);
	НужноИскатьПоНаименованию = (ОбщегоНазначения.ВернутьИндексВМассиве(ПоляПоиска, "Наименование") <> -1);

	НомерЭлемента = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		
		СтрокаТаблицы.УникальныйНомерСтроки = НомерЭлемента;
		НомерЭлемента = НомерЭлемента + 1;
		
		Если ЕстьНаименование И НужноИскатьПоНаименованию И ВРег(Лев(СтрокаТаблицы.Наименование, ДлинаТекста)) = Текст Тогда
			Если ОсновноеПредставлениеВВидеКода И ЕстьКод Тогда
				СписокВозврата.Добавить(СтрокаТаблицы["УникальныйНомерСтроки"], СтрокаТаблицы.Код + " (" + Строка(СтрокаТаблицы.Наименование) + ")");
			Иначе
				СписокВозврата.Добавить(СтрокаТаблицы["УникальныйНомерСтроки"], (СтрокаТаблицы.Наименование + ?(ЕстьКод, (" (" + Строка(СтрокаТаблицы.Код) + ")"), "")));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если ЕстьКод И НужноИскатьПоКоду И ВРег(Лев(СтрокаТаблицы.Код, ДлинаТекста)) = Текст Тогда
			Если ЕстьНаименование Тогда
				Если ОсновноеПредставлениеВВидеКода И ЕстьКод Тогда
					СписокВозврата.Добавить(СтрокаТаблицы["УникальныйНомерСтроки"], СтрокаТаблицы.Код + " (" + Строка(СтрокаТаблицы.Наименование) + ")");
				Иначе
					СписокВозврата.Добавить(СтрокаТаблицы["УникальныйНомерСтроки"], (СтрокаТаблицы.Наименование + " (" + Строка(СтрокаТаблицы.Код) + ")"));
				КонецЕсли;
			Иначе
				СписокВозврата.Добавить(СтрокаТаблицы["УникальныйНомерСтроки"], Строка(СтрокаТаблицы.Код));
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Для Каждого Колонка Из ТаблицаЗапроса.Колонки Цикл
		
			Если Колонка.Имя = "Наименование" ИЛИ Колонка.Имя = "Код" ИЛИ Колонка.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли; 
		
			Если ВРег(Лев(СтрокаТаблицы[Колонка.Имя], ДлинаТекста)) = Текст Тогда
				СписокВозврата.Добавить(СтрокаТаблицы["УникальныйНомерСтроки"], ("" + СтрокаТаблицы[Колонка.Имя] + ?(ЕстьНаименование, (" (" + Строка(СтрокаТаблицы.Наименование) + ")"), "")));
				Прервать;
			КонецЕсли
			
		КонецЦикла; 
	
	КонецЦикла;	 

	Возврат СписокВозврата;
	
КонецФункции

// Функция формирует список выбора значений, для АдресногоКлассификатора
Функция СформироватьСписокВыбораАдресногоКлассификатора(ТаблицаЗапроса, Знач Текст, НачальныйУровеньДетализации, КонечныйУровеньДетализации)

	КЧ = Новый КвалификаторыЧисла(12,2);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	ТаблицаЗапроса.Колонки.Добавить("УникальныйНомерСтроки", ОписаниеТиповЧ);
	
	СписокВозврата = Новый СписокЗначений;
	
	Текст = ВРег(Текст);
	ДлинаТекста = СтрДлина(Текст);
	
	НомерЭлемента = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		
		СтрокаТаблицы.УникальныйНомерСтроки = НомерЭлемента;
		НомерЭлемента = НомерЭлемента + 1;
				
		Если ВРег(Лев(СтрокаТаблицы.Наименование, ДлинаТекста)) = Текст Тогда
			
			// Нужно сформировать полное наименование адресного элемента
			// Смотрим какой уровень детализации и такое наименование и строим
			НаименованиеЭлемента = УправлениеКонтактнойИнформацией.ПолучитьПолноеНазвание(СтрокаТаблицы.Код, НачальныйУровеньДетализации, КонечныйУровеньДетализации);
			НаименованиеТекущегоУровня = СтрокаТаблицы.Наименование + " " + СтрокаТаблицы.Сокращение;
			ПолноеНаименованиеЭлемента = ?(ЗначениеЗаполнено(НаименованиеЭлемента), НаименованиеТекущегоУровня + " (" + НаименованиеЭлемента + ")", 
											НаименованиеТекущегоУровня);
			СписокВозврата.Добавить(СтрокаТаблицы["УникальныйНомерСтроки"], ПолноеНаименованиеЭлемента);
			
		КонецЕсли;
					
	КонецЦикла; 

	Возврат СписокВозврата;
	
КонецФункции


// функция возвращает выбранног значение при тайпинге
Функция ПолучитьЗначениеТайпинга(ПоследнееЗначениеЭлементаТайпинга, Текст)
	
	Если ПоследнееЗначениеЭлементаТайпинга = Неопределено Тогда
		Возврат Текст;
	Иначе
		Возврат ПоследнееЗначениеЭлементаТайпинга;
	КонецЕсли;
	
КонецФункции

// функция возвращает был ли выбран пользователем элемент из выпадающего списка выбора
Функция ОпределитьВыборПользователяИзСписка(Элемент, ЭтаФорма, СписокВыбора, ТаблицаВыборки, Значение, ПолеВыбора, СтруктураВыбранногоЭлемента)
	
	// а содержит ли список строки
	Если СписокВыбора.Количество() > 0 Тогда
		// список отсортируем в алфавитном порядке
		СписокВыбора.СортироватьПоПредставлению();
		ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент);
	Иначе
		ВыбранныйЭлемент = Неопределено; // если список пустой - выбирать не из чего
	КонецЕсли;
		
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ВыбраннаяСтрока = ТаблицаВыборки.Найти(ВыбранныйЭлемент.Значение, "УникальныйНомерСтроки");
		Значение = ВыбраннаяСтрока[ПолеВыбора];
		// структуру надо вернуть
		УправлениеКонтактнойИнформацией.ПеренестиСтрокуТаблицыВСтруктуру(ТаблицаВыборки, ВыбраннаяСтрока, СтруктураВыбранногоЭлемента);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// процедура переносит значение из выборки в структуру
Процедура ОбработатьЕдинственныйЭлементВыбора(РезультатЗапроса, Выборка, Значение, ПолеВыбора, СтруктураВыбранногоЭлемента)
	
	Выборка.Следующий();
	Значение = Выборка[ПолеВыбора];
	УправлениеКонтактнойИнформацией.ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, Выборка, СтруктураВыбранногоЭлемента);	
	
КонецПроцедуры

// функция вовзращает продолжить ли работу после введения некорректных данных при тайпинге
Функция ЗапроситьПродолжитьРаботуПриНекорректныхДанныхТайпинга()
	
	ОтветНаВопрос = Вопрос(("В элемент управления введены некорректные данные." + Символы.ПС + "Продолжить?"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Возврат (ОтветНаВопрос = КодВозвратаДиалога.Да);
	
КонецФункции

// Процедура предупреждает пользователя что найдено более 50 элементов для подбора
Процедура ПредупредитьНайденоБолееПятидесятиЭлементов()
	
	Предупреждение("Найдено более 50-ти значений, удовлетворяющих условиям выбора.
				   |Задайте более длинную строку или воспользуйтесь командой выбора (F4).");
				   
КонецПроцедуры

// Процедура организует выбор элементов по результату запроса
Процедура ВыбратьЭлементОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка, ОбработкаТайпинга, ТекстТайпинга, РезультатЗапроса, ЭтаФорма, ПоследнееЗначениеЭлементаТайпинга = Неопределено, 
											ПриОтсутствииЗначенияОставлятьТекст = Истина, ПоляПоиска, ПолеВыбора, 
											СтруктураВыбранногоЭлемента = Неопределено, ОсновноеПредставлениеВВидеКода = Ложь)
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если РезультатЗапроса.Пустой() И ПриОтсутствииЗначенияОставлятьТекст Тогда
		
		Значение = Текст;
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	КоличествоЭлементовВыборки = Выборка.Количество();
	
	Если КоличествоЭлементовВыборки = 1 Тогда
		
		// единственный элемент в выборке - переносим значение в стуктуру
		ОбработатьЕдинственныйЭлементВыбора(РезультатЗапроса, Выборка, Значение, ПолеВыбора, СтруктураВыбранногоЭлемента);
		Возврат;
		
	ИначеЕсли КоличествоЭлементовВыборки > 50 Тогда
		
		ПредупредитьНайденоБолееПятидесятиЭлементов();  
		Значение = ПолучитьЗначениеТайпинга(ПоследнееЗначениеЭлементаТайпинга, Текст);
        Возврат;
		
	ИначеЕсли КоличествоЭлементовВыборки = 0 Тогда
		ЭлементВыбран = Ложь;
	Иначе
		
		// из выпадающего списка предлагаем выбрать элемент
		ТаблицаВыборки = РезультатЗапроса.Выгрузить();
		СписокВыбора = СформироватьСписокВыбораЗначенийТайпинга(ТаблицаВыборки, Текст, ПоляПоиска, ОсновноеПредставлениеВВидеКода);
		
		ЭлементВыбран = ОпределитьВыборПользователяИзСписка(Элемент, ЭтаФорма, СписокВыбора, ТаблицаВыборки, Значение, ПолеВыбора, СтруктураВыбранногоЭлемента);
		
	КонецЕсли; 
	
	Если ЭлементВыбран Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьРаботу = ЗапроситьПродолжитьРаботуПриНекорректныхДанныхТайпинга();
	Значение = ПолучитьЗначениеТайпинга(ПоследнееЗначениеЭлементаТайпинга, Текст);
	
	Если НЕ ПродолжитьРаботу Тогда
		ОбработкаТайпинга = Истина;
		ТекстТайпинга = Текст;
	КонецЕсли;
		
КонецПроцедуры

// Процедура организует выбор элементов по результату запроса
Процедура ВыбратьЭлементОкончаниеВводаАдресногоКлассификатора(Элемент, Текст, Значение, СтандартнаяОбработка, ОбработкаТайпинга, ТекстТайпинга, РезультатЗапроса, ЭтаФорма, ПоследнееЗначениеЭлементаТайпинга = Неопределено, 
											ПриОтсутствииЗначенияОставлятьТекст = Истина, ПоляПоиска, ПолеВыбора, 
											СтруктураВыбранногоЭлемента = Неопределено, НачальныйУровеньДетализации = 0, КонечныйУровеньДетализации = 5)
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если РезультатЗапроса.Пустой() И ПриОтсутствииЗначенияОставлятьТекст Тогда
		Значение = Текст;
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	КоличествоЭлементовВыборки = Выборка.Количество();
	
	Если КоличествоЭлементовВыборки = 1 Тогда
		
		// единственный элемент в выборке - переносим значение в стуктуру
		ОбработатьЕдинственныйЭлементВыбора(РезультатЗапроса, Выборка, Значение, ПолеВыбора, СтруктураВыбранногоЭлемента);	
		Возврат;
		
	ИначеЕсли КоличествоЭлементовВыборки > 50 Тогда
		
		ПредупредитьНайденоБолееПятидесятиЭлементов();
		// то что пользователь ввел то и оставляем
		Значение = Текст;
        Возврат;
		
	ИначеЕсли КоличествоЭлементовВыборки = 0 Тогда
		ЭлементВыбран = Ложь;
	Иначе
		
		// из выпадающего списка предлагаем выбрать элемент
		ТаблицаВыборки = РезультатЗапроса.Выгрузить();
		СписокВыбора = СформироватьСписокВыбораАдресногоКлассификатора(ТаблицаВыборки, Текст, 
																			НачальныйУровеньДетализации, КонечныйУровеньДетализации);
		
		ЭлементВыбран = ОпределитьВыборПользователяИзСписка(Элемент, ЭтаФорма, СписокВыбора, ТаблицаВыборки, Значение, ПолеВыбора, СтруктураВыбранногоЭлемента);
		
	КонецЕсли; 
	
	Если ЭлементВыбран Тогда
		Возврат;
	КонецЕсли;
	
	// то что пользователь ввел то и оставляем
	Значение = Текст;
		
КонецПроцедуры

Процедура ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, СтруктураПараметров, ЭтаФорма, ТипСправочника, ОбработкаТайпинга = Неопределено, ТекстТайпинга = Неопределено, ПоследнееЗначениеЭлементаТайпинга = Неопределено, ПриОтсутствииЗначенияОставлятьТекст = Истина) Экспорт

	Если ПустаяСтрока(Текст) Тогда
		Значение = Новый(ТипСправочника);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли; 
	
	ПоляПоиска = СформироватьМассивПоКоллекцииВводаПоСтроке(ТипСправочника);

	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, ТипСправочника, 51);
	
	// определим способ основного представления справочника
	ОсновноеПредставлениеВВидеКода = Ложь;
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипСправочника);
	Если ОбъектМетаданных <> Неопределено Тогда
		Если ОбъектМетаданных.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеКода Тогда
			ОсновноеПредставлениеВВидеКода = Истина;
		КонецЕсли;
	КонецЕсли;

	ВыбратьЭлементОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка, ОбработкаТайпинга, ТекстТайпинга, РезультатЗапроса, ЭтаФорма, ПоследнееЗначениеЭлементаТайпинга, 
										ПриОтсутствииЗначенияОставлятьТекст, ПоляПоиска, "Ссылка", , ОсновноеПредставлениеВВидеКода);
	
КонецПроцедуры

// Процедура обслуживает событие ОкончаниеВводаТекста элемента управления Вид в форме записи регистра
// сведений Контактная информация.
//
// Параметры
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода Вид
//  Значение - данные элемента управления поле ввода
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ЭтаФорма - форма записи регистра сведений контактная информация
//  ТипСправочника - Тип, тип справочника автоподбора текста
//
Процедура ОкончаниеВводаТекстаВЭлементеУправленияПоРегистру(Элемент, Текст, Значение, СтандартнаяОбработка, СтруктураПараметров, ЭтаФорма, 
															ОбработкаТайпинга = Неопределено, ТекстТайпинга = Неопределено, 
															ПоследнееЗначениеЭлементаТайпинга = Неопределено, ПриОтсутствииЗначенияОставлятьТекст = Истина,
															ИмяРегистра, ПоляПоиска, ПолеВыбора, СтруктураВыбранногоЭлемента = Неопределено) Экспорт                                               

	Если ПустаяСтрока(Текст) Тогда
		Значение = "";
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли; 

	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбораДляРегистра(Текст, СтруктураПараметров, ИмяРегистра, ПоляПоиска, 51);
	
	ВыбратьЭлементОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка, ОбработкаТайпинга, ТекстТайпинга, РезультатЗапроса, ЭтаФорма, ПоследнееЗначениеЭлементаТайпинга, 
										ПриОтсутствииЗначенияОставлятьТекст, ПоляПоиска, ПолеВыбора, СтруктураВыбранногоЭлемента);
	
КонецПроцедуры

// Процедура обслуживает событие ОкончаниеВводаТекста элемента управления По Адресному Классификатору
Процедура ОкончаниеВводаТекстаВЭлементеУправленияПоАдресномуКлассификатору(Элемент, Текст, Значение, СтандартнаяОбработка, СтруктураПараметров, ЭтаФорма, 
															ОбработкаТайпинга = Неопределено, ТекстТайпинга = Неопределено, 
															ПоследнееЗначениеЭлементаТайпинга = Неопределено, ПриОтсутствииЗначенияОставлятьТекст = Истина,
															СтруктураВыбранногоЭлемента = Неопределено, 
															НачальныйУровеньДетализацииАдреса, КонечныйУровеньДетализацииАдреса) Экспорт                                               

	Если ПустаяСтрока(Текст) Тогда
		Значение = "";
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли; 

	МассивПоиска = Новый Массив();
    МассивПоиска.Добавить("Наименование");

	СокращенныйТекстТерритории = СокрЛП(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(Текст));
	СообщатьОбОшибкеПриОтсутствииЭлементов = (СокращенныйТекстТерритории = Текст);

  	// пробуем найти адресный элемент без обрезания потенциального сокращения
	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбораДляРегистра(Текст, СтруктураПараметров, "АдресныйКлассификатор", МассивПоиска, 51);
	Если РезультатЗапроса.Пустой() И НЕ СообщатьОбОшибкеПриОтсутствииЭлементов Тогда
		
		// Ничего найти не удалось. Обрезаем сокращения и пытаемся еще раз
		РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбораДляРегистра(СокращенныйТекстТерритории, СтруктураПараметров, "АдресныйКлассификатор", МассивПоиска, 51);
		
	КонецЕсли;
	
	ВыбратьЭлементОкончаниеВводаАдресногоКлассификатора(Элемент, Текст, Значение, СтандартнаяОбработка, ОбработкаТайпинга, ТекстТайпинга, РезультатЗапроса, 
										ЭтаФорма, ПоследнееЗначениеЭлементаТайпинга, ПриОтсутствииЗначенияОставлятьТекст, 
										МассивПоиска, "Наименование", СтруктураВыбранногоЭлемента, НачальныйУровеньДетализацииАдреса, КонечныйУровеньДетализацииАдреса);
	
КонецПроцедуры

// Процедура обслуживает событие ОкончаниеВводаТекста элемента управления По Адресному Классификатору
Процедура ОкончаниеВводаТекстаВЭлементеУправленияПоГородуУлице(Элемент, Текст, Значение, СтандартнаяОбработка, ЭтаФорма, 
															ОбработкаТайпинга = Неопределено, ТекстТайпинга = Неопределено, 
															ПоследнееЗначениеЭлементаТайпинга = Неопределено, ПриОтсутствииЗначенияОставлятьТекст = Истина,
															СтруктураВыбранногоЭлемента = Неопределено, 
															КонечныйУровеньДетализацииАдреса, ПодборГорода = Истина, ГородДляОграничения = "") Экспорт                                               

	Если ПустаяСтрока(Текст) Тогда
		Значение = "";
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли; 

	МассивПоиска = Новый Массив();
    МассивПоиска.Добавить("Наименование");

	СокращенныйТекстТерритории = СокрЛП(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(Текст));
	СообщатьОбОшибкеПриОтсутствииЭлементов = (СокращенныйТекстТерритории = Текст);

  	// пробуем найти адресный элемент без обрезания потенциального сокращения
	Если ПодборГорода Тогда
		РезультатЗапроса = УправлениеКонтактнойИнформацией.ВернутьРезультатЗапросаПоискаГорода(Текст, 51);
	Иначе
		РезультатЗапроса = УправлениеКонтактнойИнформацией.ВернутьРезультатЗапросаПоискаУлицыГорода(ГородДляОграничения, Текст, 51);
	КонецЕсли;

	Если РезультатЗапроса.Пустой() И НЕ СообщатьОбОшибкеПриОтсутствииЭлементов Тогда
		
		// Ничего найти не удалось. Обрезаем сокращения и пытаемся еще раз
		Если ПодборГорода Тогда
			РезультатЗапроса = УправлениеКонтактнойИнформацией.ВернутьРезультатЗапросаПоискаГорода(СокращенныйТекстТерритории, 51);
		Иначе
			РезультатЗапроса = УправлениеКонтактнойИнформацией.ВернутьРезультатЗапросаПоискаУлицыГорода(ГородДляОграничения, СокращенныйТекстТерритории, 51);
		КонецЕсли;

	КонецЕсли;
	
	УровеньПодбора = ?(ПодборГорода, 1, КонечныйУровеньДетализацииАдреса); 
	
	ВыбратьЭлементОкончаниеВводаАдресногоКлассификатора(Элемент, Текст, Значение, СтандартнаяОбработка, ОбработкаТайпинга, ТекстТайпинга, РезультатЗапроса, 
										ЭтаФорма, ПоследнееЗначениеЭлементаТайпинга, ПриОтсутствииЗначенияОставлятьТекст, 
										МассивПоиска, "Наименование", СтруктураВыбранногоЭлемента, УровеньПодбора, КонечныйУровеньДетализацииАдреса);
	
КонецПроцедуры

// Процедура вызывается в обработчике события "Начало выбора" в форме документов.
// Выполняет выбор даты курса и устанавливает переданный курс по выбранной дате.
//
// Параметры:
//  Курс   - число, курс валюты, который надо установить;
//  Валюта - ссылка на справочник, определяет валюту чей курс надо выбрать;
//  Дата   - дата, дата курса по умолчанию.
//
Процедура ВыбратьКурсВалюты(Курс, Кратность, Валюта, Дата) Экспорт

	// Если не заполнена валюта, то курс выбрать нельзя.
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Предупреждение("Для выбора курса нужно выбрать валюту."); 
		Возврат;
	КонецЕсли; 
	
	// Выберем дату курса
	ДатаУстановкиКурса = Дата; 
	Если ВвестиДату(ДатаУстановкиКурса, "Выберите дату установки курса.", ЧастиДаты.Дата) Тогда
		
		// Если дата введена, заполним значение курса и кратности
		СтруктураВалюты = ОбщегоНазначения.ПолучитьКурсВалюты(Валюта, ДатаУстановкиКурса);
		Курс            = СтруктураВалюты.Курс;
		Кратность       = СтруктураВалюты.Кратность;

	КонецЕсли; 

КонецПроцедуры // ВыбратьКурсВалюты()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ ФОРМЫ

// Активизирует один из реквизитов при открытии документа.
//
// Параметры:
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Функция АктивизироватьРеквизитВФорме(ДокументОбъект, ФормаДокумента, СтруктураРеквизитов = Неопределено) Экспорт

	// Структура - порядок актиизации реквизитов.
	// Активизируется первый не заполненный.
	Если ТипЗнч(СтруктураРеквизитов) <> Тип("Структура") Тогда
		СтруктураРеквизитов = Новый Структура;
		
		СтруктураРеквизитов.Вставить("Дата");
		ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти("Номер");
		Если ЭлементУправления <> Неопределено И Не ЭлементУправления.ТолькоПросмотр Тогда
			СтруктураРеквизитов.Вставить("Номер");
		КонецЕсли;
		СтруктураРеквизитов.Вставить("Организация");
		СтруктураРеквизитов.Вставить("ПериодРегистрации");
		СтруктураРеквизитов.Вставить("Сотрудник");
		СтруктураРеквизитов.Вставить("ФизЛицо");
		СтруктураРеквизитов.Вставить("Исполнитель");
		СтруктураРеквизитов.Вставить("КурсОбучения");
		СтруктураРеквизитов.Вставить("ДатаЗавершенияКурса");
		СтруктураРеквизитов.Вставить("Мероприятие");
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураРеквизитов Цикл
		// Определим, есть ли ЭУ с таким именем.
		ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти(Элемент.Ключ);
		Если ЭлементУправления = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЭлементУправления.Значение) Тогда
			// Нашли не заполненный ЭУ. Делаем его текущим и прекращаем цикл.
			ФормаДокумента.ТекущийЭлемент = ЭлементУправления;
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
	
КонецФункции // АктивизироватьРеквизитВФорме()

// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации = "", ДокументОбъект, ФормаДокумента) Экспорт

	ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	
	Если ПустаяСтрока(СтрокаВидаОперации) Тогда
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": ";
	Иначе
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": " + СтрокаВидаОперации + ". ";
	КонецЕсли;
		
	Если ДокументОбъект.ЭтоНовый() Тогда  
		Заголовок = Заголовок + "Новый";
	Иначе
		Если ДокументОбъект.Проведен Тогда
			Заголовок = Заголовок + "Проведен";
		ИначеЕсли ДокументОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Заголовок = Заголовок + "Не проведен";
		Иначе
			Заголовок = Заголовок + "Записан";
		КонецЕсли;
	КонецЕсли;
	
	ФормаДокумента.Заголовок = Заголовок;

КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

Процедура УстановитьСписокПоляВыбора(ПолеВыбора, Список) Экспорт

	ПрошлоеЗначение = ПолеВыбора.Значение;
	ПолеВыбора.СписокВыбора = Список;
	Если ЗначениеЗаполнено(ПрошлоеЗначение) Тогда
		Если  Список.НайтиПоЗначению(ПрошлоеЗначение) <> Неопределено Тогда
			Если НЕ ПолеВыбора.Значение = ПрошлоеЗначение Тогда
				ПолеВыбора.Значение = ПрошлоеЗначение;
			КонецЕсли;
		Иначе
			ПолеВыбора.Значение = Неопределено;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСписокПоляВыбора()

// Процедура устанавливает отбор по основной организации в указанно форме
//
Процедура УстановитьОтборПоОрганизации(Форма, УчетПоВсемОрганизациям, ОсновнаяОрганизация, ИмяРеквизитаСписка, СкрыватьКолонку = Истина, ИмяОтбора = "Организация") Экспорт

	// В том случае если учет ведется по одной организации необходимо установить мягкий отбор.
	// т.е. отбор, с возможностью его изменения.

	Если НЕ УчетПоВсемОрганизациям Тогда // Установлен режим учета по одной организации

		Если НЕ (ТипЗнч(Форма[ИмяРеквизитаСписка]) = Тип("ТаблицаЗначений")) Тогда // Элемент - табличное поле

			// Проверим - Если это связанный регитср сведений тогда не нужно устанавливать отбор - 
			// он уже установлен системой автоматически

			Если ИмяРеквизитаСписка = "РегистрСведенийСписок" Тогда

				// Возвможно это переход по кнопке ПЕрейти
				Если ТипЗнч(Форма.ПараметрОтборПоИзмерению) = Тип("Структура") Тогда
					Если ЗначениеЗаполнено(Форма.ПараметрОтборПоИзмерению) Тогда
						Возврат; // Это переход по кнопке Перейти - не нужно устанавливать отбор
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].ВидСравнения  = ВидСравнения.Равно;
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Использование = Истина;
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Значение      = ОсновнаяОрганизация;

			Форма.ЭлементыФормы[ИмяРеквизитаСписка].НастройкаОтбора[ИмяОтбора].Доступность = Ложь;

		КонецЕсли;

		Если СкрыватьКолонку Тогда

			Если НЕ Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки.Найти(ИмяОтбора) = Неопределено Тогда

				Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки[ИмяОтбора].Видимость         = Ложь;
				Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки[ИмяОтбора].ИзменятьВидимость = Ложь;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // УстановитьОтборПоОрганизации()

// Процедура - обработчик события ПриИзменении поля ввода Организация
//
// Параметры:
//		ДокументОбъект - объект документ в форме которого произошло событие
//
Процедура ПриИзмененииЗначенияОрганизации(ДокументОбъект) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента)
		   И ЗначениеЗаполнено(ДокументОбъект.Организация)
		   И ЗначениеЗаполнено(ДокументОбъект.ПодразделениеОрганизации)
		   И Не ДокументОбъект.ПодразделениеОрганизации.Владелец = ДокументОбъект.Организация Тогда

			ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			Предупреждение("Выбранное подразделение не соответствует организации!");

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияОрганизации()

Процедура ВакансияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	Если ДанныеСтроки.Закрыта Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	КонецЕсли;
	
	Если Не ДанныеСтроки.Закрыта И ДанныеСтроки.ПлановаяДатаЗакрытия < ОбщегоНазначения.ПолучитьРабочуюДату() Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;
	
КонецПроцедуры

// Выводит строки показателей в списке регистра сведений плановых начислений
//
Процедура ОформитьСтрокиПлановыхНачислений(Элемент, мСведенияОВидахРасчета, ОформленияСтрок) Экспорт

	ДлинаСуток = 86400;
	
	Для каждого Строка Из ОформленияСтрок Цикл
		
		ДанныеСтроки = Строка.ДанныеСтроки;
		ВидРасчета = ДанныеСтроки.ВидРасчета;
		
		Если ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
			
			СведенияОВидеРасчета = РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
			
			ЕстьПоказатели = Ложь;
			Для СчПоказателей = 1 По 6 Цикл
				Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
					ВидимостьПоказателяИВалюты = Истина;
					Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Истина;
						ЕстьПоказатели = Истина;
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
						Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Ложь;
					ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
						ВидимостьПоказателяИВалюты = Ложь;
						ЕстьПоказатели = Истина;
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);
						Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Истина;	
						Строка.Ячейки["ТарифныйРазряд" + СчПоказателей].Видимость = Истина;
					Иначе
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Ложь;
					КонецЕсли;
					Если ВидимостьПоказателяИВалюты Тогда
						Строка.Ячейки["Показатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
						Строка.Ячейки["Валюта" + СчПоказателей].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
						Если Строка.Ячейки["Показатель" + СчПоказателей].Видимость Тогда
							Строка.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
						КонецЕсли;
					Иначе
						Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;
					КонецЕсли;
				Иначе
					Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
					Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
					Строка.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Ложь;				
					Строка.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
			КонецЦикла;
			Если не ЕстьПоказатели Тогда
				Строка.Ячейки.НаименованиеПоказатель1.Видимость = Истина;
				Строка.Ячейки["Показатель1"].Видимость = Истина;
				Строка.Ячейки["Валюта1"].Видимость = Истина;
				Строка.Ячейки["НаименованиеПоказательТР1"].Видимость = Ложь;
				Строка.Ячейки["ТарифныйРазряд1"].Видимость = Ложь;
			КонецЕсли;
			Строка.Ячейки.Показатели.Видимость = Ложь;
			
			// События завершения
			Если ДанныеСтроки.ВидРасчетаЗавершения = Неопределено Тогда
				
				Для СчПоказателей = 1 По 6 Цикл
					
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость	= Ложь;
					Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость	= Ложь;
					Строка.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость				= Ложь;
					Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость				= Ложь;
					Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость					= Ложь;
					
				КонецЦикла;
				
			Иначе
				
				СведенияОВидеРасчета = РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ДанныеСтроки.ВидРасчетаЗавершения);
				
				Показатели = Ложь;
				Для СчПоказателей = 1 По 6 Цикл
					Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
						
						ВидимостьПоказателяИВалюты = Истина;
						Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
							Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость = Истина;
							ЕстьПоказатели = Истина;
							Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
							Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость = Ложь;
							Строка.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость = Ложь;
						ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
							ВидимостьПоказателяИВалюты = Ложь;
							ЕстьПоказатели = Истина;
							Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
							Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
							Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);
							Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость = Истина;
							Строка.Ячейки["ТарифныйРазряд" + СчПоказателей + "Завершения"].Видимость = Истина;
						Иначе
							Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
							Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость = Ложь;
							Строка.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость = Ложь;
						КонецЕсли;
						Если ВидимостьПоказателяИВалюты Тогда
							Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
							Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
							Если Строка.Ячейки["Показатель" + СчПоказателей].Видимость Тогда
								Строка.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
							КонецЕсли;
						Иначе
							Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
							Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость = Ложь;
						КонецЕсли;
					Иначе
						Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
						Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость = Ложь;
						Строка.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость = Ложь;					
						Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость = Ложь;
					КонецЕсли;
					
				КонецЦикла;
				Если не ЕстьПоказатели Тогда
					Строка.Ячейки.НаименованиеПоказатель1.Видимость = Истина;
					Строка.Ячейки["Показатель1Завершения"].Видимость = Истина;
					Строка.Ячейки["Валюта1Завершения"].Видимость = Истина;
					Строка.Ячейки["НаименованиеПоказательТР1Завершения"].Видимость = Ложь;
					Строка.Ячейки["ТарифныйРазряд1Завершения"].Видимость = Ложь;
				КонецЕсли;			
				Строка.Ячейки.ПоказателиЗавершения.Видимость = Ложь;
				
			КонецЕсли; 
		Иначе
			
			СведенияОВидеРасчета = РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ДанныеСтроки.ВидРасчета);
			
			Строка.Ячейки["НаименованиеПоказатель1"].Видимость	= Истина;
			Строка.Ячейки["НаименованиеПоказательТР1"].Видимость	= Ложь;
			Строка.Ячейки["ТарифныйРазряд1"].Видимость			= Ложь;
			Строка.Ячейки["Показатель1"].Видимость				= Истина;
			Строка.Ячейки["Валюта1"].Видимость					= Истина;
			
			Строка.Ячейки["НаименованиеПоказатель1"].УстановитьТекст(СведенияОВидеРасчета["Показатель1Наименование"]);
			
			Для СчПоказателей = 2 По 6 Цикл
				
				Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей ].Видимость	= Ложь;
				Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость	= Ложь;
				Строка.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость				= Ложь;
				Строка.Ячейки["Показатель" + СчПоказателей].Видимость					= Ложь;
				Строка.Ячейки["Валюта" + СчПоказателей].Видимость						= Ложь;
				
			КонецЦикла;
			
			Строка.Ячейки.Показатели.Видимость = Ложь;
			
			Если ДанныеСтроки.ВидРасчетаЗавершения = Неопределено Тогда
				
				Для СчПоказателей = 1 По 6 Цикл
					
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость		= Ложь;
					Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость	= Ложь;
					Строка.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость				= Ложь;
					Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость					= Ложь;
					Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость						= Ложь;
					
				КонецЦикла;
				
			Иначе
				
				Строка.Ячейки["НаименованиеПоказатель1" + "Завершения"].Видимость		= Ложь;
				Строка.Ячейки["НаименованиеПоказательТР1" + "Завершения"].Видимость	= Ложь;
				Строка.Ячейки["ТарифныйРазряд1" + "Завершения"].Видимость				= Ложь;
				Строка.Ячейки["Показатель1" + "Завершения"].Видимость					= Истина;
				Строка.Ячейки["Валюта1" + "Завершения"].Видимость						= Истина;
				
				
				Для СчПоказателей = 2 По 6 Цикл
					
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость		= Ложь;
					Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость	= Ложь;
					Строка.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость				= Ложь;
					Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость					= Ложь;
					Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость						= Ложь;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Строка.Ячейки.ПоказателиЗавершения.Видимость = Ложь;
			
		КонецЕсли;
		
		Если Элемент.Колонки.ПериодЗавершения.Видимость Тогда
			Строка.Ячейки.ПериодЗавершения.ОтображатьТекст = Истина;
			Если ДанныеСтроки.ПериодЗавершения <> Неопределено Тогда
				//vvv комментируем, путаница при просмотре
				//Строка.Ячейки.ПериодЗавершения.УстановитьТекст(Формат(ДанныеСтроки.ПериодЗавершения - ДлинаСуток, "ДФ=dd.MM.yyyy"));
			КонецЕсли;			
		КонецЕсли;
		
	КонецЦикла;
	

КонецПроцедуры

// Выводит строки показателей в списке регистра сведений плановых удержаний
//
Процедура ОформитьСтрокиПлановыхУдержаний(Элемент, мСведенияОВидахРасчета, ОформленияСтрок) Экспорт
	
	ДлинаСуток = 86400;

	Для каждого Строка Из ОформленияСтрок Цикл
		
		ДанныеСтроки = Строка.ДанныеСтроки;
		ВидРасчета = ДанныеСтроки.ВидРасчета;
		
		СведенияОВидеРасчета = РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
		
		ЕстьПоказатели = Ложь;
		Для СчПоказателей = 1 По 6 Цикл
			
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
				ВидимостьПоказателяИВалюты = Истина;
				Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Истина;
					ЕстьПоказатели = Истина;
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				Иначе
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
				Если ВидимостьПоказателяИВалюты Тогда
					Строка.Ячейки["Показатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];		
					Строка.Ячейки["Валюта" + СчПоказателей].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
				Иначе
					Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;		
					Строка.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
			Иначе
				Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;		
				Строка.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;			
			КонецЕсли;
			
		КонецЦикла;
		
		Если не ЕстьПоказатели Тогда		
			Строка.Ячейки.НаименованиеПоказатель1.Видимость = Истина;
			Строка.Ячейки["Показатель1"].Видимость = Истина;		
			Строка.Ячейки["Валюта1"].Видимость = Истина;		
		КонецЕсли;	
		Строка.Ячейки.Показатели.Видимость = Ложь;
		
		// События завершения
		Если Не ЗначениеЗаполнено(ДанныеСтроки.ДействиеЗавершения) ИЛИ ДанныеСтроки.ДействиеЗавершения = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
			
			Для СчПоказателей = 1 По 6 Цикл
				Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость	= Ложь;
				Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость				= Ложь;
				Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость					= Ложь;
			КонецЦикла;
			
		Иначе		
			
			ЕстьПоказатели = Ложь;
			Для СчПоказателей = 1 По 6 Цикл
				
				Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
					ВидимостьПоказателяИВалюты = Истина;
					Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей+ "Завершения"].Видимость = Истина;
						ЕстьПоказатели = Истина;
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей+ "Завершения"].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
					Иначе
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей+ "Завершения"].Видимость = Ложь;
					КонецЕсли;
					Если ВидимостьПоказателяИВалюты Тогда
						Строка.Ячейки["Показатель" + СчПоказателей+ "Завершения"].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];		
						Строка.Ячейки["Валюта" + СчПоказателей+ "Завершения"].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
					Иначе
						Строка.Ячейки["Показатель" + СчПоказателей+ "Завершения"].Видимость = Ложь;		
						Строка.Ячейки["Валюта" + СчПоказателей+ "Завершения"].Видимость = Ложь;
					КонецЕсли;
				Иначе
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей+ "Завершения"].Видимость = Ложь;
					Строка.Ячейки["Показатель" + СчПоказателей+ "Завершения"].Видимость = Ложь;		
					Строка.Ячейки["Валюта" + СчПоказателей+ "Завершения"].Видимость = Ложь;			
				КонецЕсли;
				
			КонецЦикла;
			
			Если не ЕстьПоказатели Тогда		
				Строка.Ячейки.НаименованиеПоказатель1Завершения.Видимость = Истина;
				Строка.Ячейки["Показатель1Завершения"].Видимость = Истина;		
				Строка.Ячейки["Валюта1Завершения"].Видимость = Истина;		
			КонецЕсли;	
			Строка.Ячейки.ПоказателиЗавершения.Видимость = Ложь;
		КонецЕсли;
		
		
		Если Элемент.Колонки.ПериодЗавершения.Видимость Тогда
			Строка.Ячейки.ПериодЗавершения.ОтображатьТекст = Истина;
			Строка.Ячейки.ПериодЗавершения.УстановитьТекст(Формат(ДанныеСтроки.ПериодЗавершения - ДлинаСуток, "ДФ=dd.MM.yyyy"));
		КонецЕсли;	
		
		
	КонецЦикла;	
	
КонецПроцедуры


// Выводит строки показателей в документах ввода плановых начислений и удержаний
//
Процедура ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, СведенияОВидахРасчета, ИспользуютсяТарифныеРазряды = Истина,ВидРасчета = Неопределено) Экспорт
		
	Если ВидРасчета = Неопределено Тогда
		Если ОформлениеСтроки.Ячейки.Найти("Надбавка") = Неопределено Тогда
			СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтроки.ВидРасчета);
		Иначе
			СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтроки.Надбавка);
		КонецЕсли; 
	Иначе
		СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета);
	КонецЕсли;
	
	ТолькоПросмотрЯчеек = Ложь;
	
	ЕстьПоказатели = Ложь;
	Для СчПоказателей = 1 По 6 Цикл
		УстановитьТолькоПросмотр = ТолькоПросмотрЯчеек;
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда			
			
			Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
				ЕстьПоказатели = Истина;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Истина;
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
				Если ИспользуютсяТарифныеРазряды Тогда
					ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
					ОформлениеСтроки.Ячейки["ТарифныйРазряд" + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
			ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] И ИспользуютсяТарифныеРазряды Тогда
				ЕстьПоказатели = Истина;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Истина;
				ОформлениеСтроки.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Истина;
			Иначе
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				Если ИспользуютсяТарифныеРазряды Тогда
					ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
					ОформлениеСтроки.Ячейки["ТарифныйРазряд" + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
			ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
			ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].ТолькоПросмотр = (НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"]) ИЛИ (УстановитьТолькоПросмотр);
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = УстановитьТолькоПросмотр;
		Иначе
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;
			Если ИспользуютсяТарифныеРазряды Тогда
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Ложь;			
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если не ЕстьПоказатели Тогда
		ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.УстановитьТекст("<ввод при расчете>");
		ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.Видимость = Истина;
		ОформлениеСтроки.Ячейки["Показатель1"].ТолькоПросмотр = Истина;
		Если ИспользуютсяТарифныеРазряды Тогда
			ОформлениеСтроки.Ячейки["НаименованиеПоказательТР1"].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["ТарифныйРазряд1"].Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;
	
КонецПроцедуры //ПриВыводеСтрокиПлановыхНачислений

// Выводит строки показателей в документах ввода плановых начислений и удержаний
//
//	Параметры:
//		ДанныеСтроки - данные строки документа
//		ОформлениеСтроки - оформление строки документа
//		СведенияОВидахРасчета - соответствие содержащие сведения о видах расчетах документа 
//
Процедура ПриВыводеСтрокиНачисленийИУдержаний(ДанныеСтроки, ОформлениеСтроки, СведенияОВидахРасчета) Экспорт
	
	ДанныеСтрокиВидРасчета = ДанныеСтроки.ВидРасчета;
	
	СведенияОВидеРасчета = РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтроки.ВидРасчета, "ПриРасчете");					
	
	ЕстьПоказатели = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеСтрокиВидРасчета) Тогда
		
		ЕстьПоказатели = Ложь; 
		СчПоказателей = 0;
		Для СчПоказателей = 1 По 6 Цикл
			
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
				
				ЕстьПоказатели = Истина;
				
				ВидимостьПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
				ВидимостьНаименованияПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"];
				
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = ВидимостьНаименованияПоказателя;
				
				// размеры показателя будут доступны только для видимых и изменяемых показателей
				Если ВидимостьПоказателя Тогда
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется
					Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически
					Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно;
				КонецЕсли;
				
				// если отображается наименование - пропишем текст
				Если ВидимостьНаименованияПоказателя Тогда		
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
					ВидимостьПоказателя = СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"];
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр	= Не ВидимостьПоказателя Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно
					Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически;
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"];			
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);			
				КонецЕсли;
				
				Если ВидимостьПоказателя Тогда
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
				КонецЕсли;
				
			Иначе
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если не ЕстьПоказатели Тогда
			ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.УстановитьТекст("<рассчитываются автоматически>");
			ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.Видимость			= Истина;
			ОформлениеСтроки.Ячейки["Показатель1"].ТолькоПросмотр				= Истина;
		КонецЕсли;
	Иначе
		
		Для СчПоказателей = 1 По 6 Цикл
			// настроим видимость ячеек
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;

КонецПроцедуры //ПриВыводеСтрокиНачисленийИУдержаний




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИНФОРМАЦИИ В ФОРМЕ

//  Процедура определяет ситуацию, когда при изменении своей даты документ 
//  оказывается в другом периоде нумерации документов, и в это м случае
//  присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументОбъект         - контекст документа,из которого вызвана процедура 
//  НачальнаяДатаДокумента - начальная дата документа 
// 
Процедура ПроверитьНомерДокумента(ДокументОбъект, НачальнаяДатаДокумента) Экспорт   // в разработке

	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументОбъект.Метаданные().ПериодичностьНомера;

	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - ДокументОбъект.Дата;

	Иначе
		Возврат;

	КонецЕсли;

	Если РазностьДат <> 0 Тогда
		ДокументОбъект.Номер = "";
	КонецЕсли;

КонецПроцедуры // ПроверитьНомерДокумента()

// Функция спрашивает пользователя записать ли объект, или нет, если он новый
//
// Параметры
//  ФормаОбъекта - Форма объекта, из которой пытаются произвести действия
//
// Возвращаемое значение:
//   Булево - Объект записан или нет
//
Функция ЗаписатьНовыйОбъектВФорме(ФормаОбъекта) Экспорт

	Если ФормаОбъекта.ЭтоНовый() Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ФормаОбъекта.ЭтотОбъект.Ссылка)) Тогда
			ТекстВопроса = "Для выполнения данной операции необходимо записать документ. Записать?";
		Иначе // Справочник
			ТекстВопроса = "Для выполнения данной операции необходимо записать элемент. Записать?";
		КонецЕсли; 
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		Иначе
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, (Строка(ФормаОбъекта.ЭтотОбъект) + " не записан."));
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции // ЗаписатьНовыйОбъектВФорме()


Процедура ОбработатьЗакрытиеФормы(Отказ, СтандартнаяОбработка, ФормаОбъекта) Экспорт

	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
	
	Если ФормаОбъекта.Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			//Запишем документ
			Попытка
				Отказ = Не ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				Предупреждение("Операция не выполнена!");
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	ФормаОбъекта.ЭлементыФормы.ПанельОткрытьИсходный.Свертка = РежимСверткиЭлементаУправления.Нет;
	ФормаОбъекта.ЭлементыФормы.ПанельОткрытьИсправление.Свертка = РежимСверткиЭлементаУправления.Нет;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ИНФОРМАЦИИ В ФОРМЕ

// Процедура возвращает паспортные данные физлица в виде строки
//
// Параметры: 
//  Валюта                         - Валюта, курс которой необходимо отобразить
//  Курс                           - курс, которой необходимо отобразить
//  Кратность                      - кратность, которую необходимо отобразить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СформироватьСкобки             - признак необходимости скобок
//
// Возвращаемое значение:
//  Строка с данными о курсе и кратности валюты
//
Функция ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, Курс, Кратность, ВалютаРегламентированногоУчета, СформироватьСкобки = Ложь) Экспорт

	Если ЗначениеЗаполнено(Валюта) Тогда
		Возврат ?(СформироватьСкобки, "   ( ", "") + Кратность + " "
		      + СокрЛП(Валюта)
		      + " = "
		      + Курс + " " 
		      + СокрЛП(ВалютаРегламентированногоУчета)
		      + ?(СформироватьСкобки, " )", "");

	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции // ПолучитьИнформациюКурсаВалютыСтрокой()

// Формирует представление переданного способа отражения с "предметной" точки зрения
//
// Параметры
//  СпособОтраженияВБухучете - СправочникСсылка.СпособыОтраженияЗарплатыВРеглУчете - описываемый 
//                 способ отражения
//  НетБазовыхРасчетов - булево - указывает на наличие/отсутствие у в.р. расчетной базы
//
// Возвращаемое значение:
//   строка - сформированное представление
//
Функция ПолучитьПредставлениеСпособаОтраженияНачисленияВУчетах(СпособОтраженияВБухучете, НетБазовыхРасчетов) Экспорт
	
	Если СпособОтраженияВБухучете.Пустая() Тогда
		РасшифровкаТекст = "Способ отражения определяется по данным о работнике и его плановых начислениях";
	ИначеЕсли СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете Тогда
		РасшифровкаТекст = "Начисление не отражается в бухгалтерском и налоговом учете.";
	ИначеЕсли СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.РаспределятьПоБазовымНачислениям Тогда
		РасшифровкаТекст = "Отражение начисления в бухгалтерском и налоговом учете определяется по базовым начислениям";
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",СпособОтраженияВБухучете);
		Запрос.УстановитьПараметр("Подразделения",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СпособыОтраженияЗарплатыВРеглУчете.СчетДт.Код, """") КАК СчетДт,
		//vvv комментируем, очень сильно тормозит в клиент-серверном варианте "Представление". Будем использовать функцию ПРЕДСТАВЛЕНИЕ
		//|	СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт1.Представление КАК СубконтоДт1Представление,
		//|	СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт2.Представление КАК СубконтоДт2Представление,
		//|	СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт3.Представление КАК СубконтоДт3Представление,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт1) КАК СубконтоДт1Представление,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт2) КАК СубконтоДт2Представление,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт3) КАК СубконтоДт3Представление,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт4) КАК СубконтоДт4Представление,
		//
		|	ЕСТЬNULL(СпособыОтраженияЗарплатыВРеглУчете.СчетКт.Код, """") КАК СчетКт,
		|	ЕСТЬNULL(СпособыОтраженияЗарплатыВРеглУчете.СчетДтНУ.Код, """") КАК СчетДтНУ,
		//vvv комментируем, очень сильно тормозит в клиент-серверном варианте "Представление". Будем использовать функцию ПРЕДСТАВЛЕНИЕ
		//|	СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ1.Представление КАК СубконтоДтНУ1Представление,
		//|	СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ2.Представление КАК СубконтоДтНУ2Представление,
		//|	СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ3.Представление КАК СубконтоДтНУ3Представление,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ1) КАК СубконтоДтНУ1Представление,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ2) КАК СубконтоДтНУ2Представление,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ3) КАК СубконтоДтНУ3Представление,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ4) КАК СубконтоДтНУ4Представление,
		//
		|	ЕСТЬNULL(СпособыОтраженияЗарплатыВРеглУчете.СчетКтНУ.Код, """") КАК СчетКтНУ,
		//|	СпособыОтраженияЗарплатыВРеглУчете.ОтражениеВУСН,
		|	ЕСТЬNULL(ХозрасчетныйВидыСубконто.КоличествоСк, 0) КАК КоличествоСкБУ,
		|	ЕСТЬNULL(НалоговыйВидыСубконто.КоличествоСк, 0) КАК КоличествоСкНУ,
		|	ЕСТЬNULL(ВидСубконтоБУПодразделения.НомерСтроки, 0) КАК НомерСкПодразделенияБУ,
		|	ЕСТЬNULL(ВидСубконтоНУПодразделения.НомерСтроки, 0) КАК НомерСкПодразделенияНУ
		|ИЗ
		|	(ВЫБРАТЬ
		|		СпособыОтраженияЗарплатыВРеглУчете.Ссылка КАК Ссылка,
		|		СпособыОтраженияЗарплатыВРеглУчете.СчетДт КАК СчетДт,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт1 КАК СубконтоДт1,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт2 КАК СубконтоДт2,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт3 КАК СубконтоДт3,
		//vvv
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт4 КАК СубконтоДт4,
		//
		|		СпособыОтраженияЗарплатыВРеглУчете.СчетКт КАК СчетКт,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоКт1 КАК СубконтоКт1,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоКт2 КАК СубконтоКт2,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоКт3 КАК СубконтоКт3,
		//vvv
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоКт4 КАК СубконтоКт4,
		//
		|		СпособыОтраженияЗарплатыВРеглУчете.СчетДтНУ КАК СчетДтНУ,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ1 КАК СубконтоДтНУ1,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ2 КАК СубконтоДтНУ2,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ3 КАК СубконтоДтНУ3,
		//vvv
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ4 КАК СубконтоДтНУ4,
		//
		|		СпособыОтраженияЗарплатыВРеглУчете.СчетКтНУ КАК СчетКтНУ,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоКтНУ1 КАК СубконтоКтНУ1,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоКтНУ2 КАК СубконтоКтНУ2,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоКтНУ3 КАК СубконтоКтНУ3,
		//vvv
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоКтНУ4 КАК СубконтоКтНУ4
		//
		//|		СпособыОтраженияЗарплатыВРеглУчете.ОтражениеВУСН КАК ОтражениеВУСН
		|	ИЗ
		|		Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК СпособыОтраженияЗарплатыВРеглУчете
		|	ГДЕ
		|		СпособыОтраженияЗарплатыВРеглУчете.Ссылка = &Ссылка) КАК СпособыОтраженияЗарплатыВРеглУчете
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КОЛИЧЕСТВО(ХозрасчетныйВидыСубконто.ВидСубконто) КАК КоличествоСк,
		|			ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка
		|		ИЗ
		|			ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ХозрасчетныйВидыСубконто.Ссылка) КАК ХозрасчетныйВидыСубконто
		|		ПО СпособыОтраженияЗарплатыВРеглУчете.СчетДт = ХозрасчетныйВидыСубконто.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСтроки,
		|			ХозрасчетныйВидыСубконто.Ссылка КАК СчетДт
		|		ИЗ
		|			ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|		ГДЕ
		|			ХозрасчетныйВидыСубконто.ВидСубконто = &Подразделения) КАК ВидСубконтоБУПодразделения
		|		ПО ВидСубконтоБУПодразделения.СчетДт = ХозрасчетныйВидыСубконто.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КОЛИЧЕСТВО(НалоговыйВидыСубконто.ВидСубконто) КАК КоличествоСк,
		|			НалоговыйВидыСубконто.Ссылка КАК Ссылка
		|		ИЗ
		|			ПланСчетов.Налоговый.ВидыСубконто КАК НалоговыйВидыСубконто
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НалоговыйВидыСубконто.Ссылка) КАК НалоговыйВидыСубконто
		|		ПО СпособыОтраженияЗарплатыВРеглУчете.СчетДтНУ = НалоговыйВидыСубконто.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НалоговыйВидыСубконто.НомерСтроки КАК НомерСтроки,
		|			НалоговыйВидыСубконто.Ссылка КАК СчетДт
		|		ИЗ
		|			ПланСчетов.Налоговый.ВидыСубконто КАК НалоговыйВидыСубконто
		|		ГДЕ
		|			НалоговыйВидыСубконто.ВидСубконто = &Подразделения) КАК ВидСубконтоНУПодразделения
		|		ПО ВидСубконтоНУПодразделения.СчетДт = ХозрасчетныйВидыСубконто.Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		РасшифровкаТекст = "Бухгалтерский учет: ";
		Если ЗначениеЗаполнено(Выборка.СчетДт) Тогда
			РасшифровкаТекст = РасшифровкаТекст + "Дт " + Выборка.СчетДт;
			Для СчСк = 1 По Выборка.КоличествоСкБУ Цикл
				Если Выборка["СубконтоДт" + СчСк + "Представление"] = Null Тогда
					Если СчСк = Выборка.НомерСкПодразделенияБУ Тогда
						РасшифровкаТекст = РасшифровкаТекст + ", <подбирается автоматически>";
					Иначе
						РасшифровкаТекст = РасшифровкаТекст + ", <не указано>";
					КонецЕсли;
				Иначе
					//vvv
					//РасшифровкаТекст = РасшифровкаТекст + ", " + Выборка["СубконтоДт" + СчСк + "Представление"];
					РасшифровкаТекст = РасшифровкаТекст + ", " + СокрЛП(Выборка["СубконтоДт" + СчСк + "Представление"]);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли НетБазовыхРасчетов Тогда
			РасшифровкаТекст = РасшифровкаТекст + "Дт <не указано>";
		Иначе
			РасшифровкаТекст = РасшифровкаТекст + "счет дебета определяется по расчетной базе";
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.СчетКт) Тогда
			РасшифровкаТекст = РасшифровкаТекст + " Кт " + Выборка.СчетКт;
		ИначеЕсли НетБазовыхРасчетов Тогда
			РасшифровкаТекст = РасшифровкаТекст + " Кт <не указано>";
		Иначе
			РасшифровкаТекст = РасшифровкаТекст + "; счет кредита определяется по расчетной базе";
		КонецЕсли;
		РасшифровкаТекст = РасшифровкаТекст + ";" + Символы.ПС + "Налоговый учет: ";
		Если ЗначениеЗаполнено(Выборка.СчетДтНУ) Тогда
			РасшифровкаТекст = РасшифровкаТекст + "Дт " + Выборка.СчетДтНУ;
			Для СчСк = 1 По Выборка.КоличествоСкНУ Цикл
				Если Выборка["СубконтоДтНУ" + СчСк + "Представление"] = Null Тогда
					Если СчСк = Выборка.НомерСкПодразделенияНУ Тогда
						РасшифровкаТекст = РасшифровкаТекст + ", <подбирается автоматически>";
					Иначе
						РасшифровкаТекст = РасшифровкаТекст + ", <не указано>";
					КонецЕсли;
				Иначе
					//vvv
					//РасшифровкаТекст = РасшифровкаТекст + ", " + Выборка["СубконтоДтНУ" + СчСк + "Представление"];
					РасшифровкаТекст = РасшифровкаТекст + ", " + СокрЛП(Выборка["СубконтоДтНУ" + СчСк + "Представление"]);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли НетБазовыхРасчетов Тогда
			РасшифровкаТекст = РасшифровкаТекст + "Дт <не указано>";
		Иначе
			РасшифровкаТекст = РасшифровкаТекст + "счет дебета определяется по расчетной базе";
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.СчетКтНУ) Тогда
			РасшифровкаТекст = РасшифровкаТекст + " Кт " + Выборка.СчетКтНУ;
		ИначеЕсли НетБазовыхРасчетов Тогда
			РасшифровкаТекст = РасшифровкаТекст + " Кт <не указано>";
		Иначе
			РасшифровкаТекст = РасшифровкаТекст + "; счет кредита определяется по расчетной базе";
		КонецЕсли;
		//РасшифровкаТекст = РасшифровкаТекст + ";" + Символы.ПС + "Учет для УСН: ";
		//Если ПустаяСтрока(Выборка.СчетКт) и Выборка.ОтражениеВУСН.Пустая() Тогда
		//	РасшифровкаТекст = РасшифровкаТекст + "определяется по расчетной базе";
		//Иначе
		//	РасшифровкаТекст = РасшифровкаТекст + ?(Выборка.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются,"","не ") + "принимается как расходы";
		//КонецЕсли;
	КонецЕсли;
	
	Возврат РасшифровкаТекст	
	
КонецФункции // ПолучитьПредставлениеСпособаОтраженияНачисленияВУчетах()

// Формирует представление переданного код дохода с "предметной" точки зрения
//
// Параметры
//  , КодДоходаЕСН - СправочникСсылка.ДоходыЕСН - описываемый код дохода
//
// Возвращаемое значение:
//   строка - сформированное представление
//
Функция ПолучитьПредставлениеКодаДоходаПоЕСН(КодДоходаЕСН) Экспорт
	
	Если КодДоходаЕСН = Справочники.ДоходыЕСН.БольничныйПроизводстТравма Тогда
		РасшифровкаКодДоходаЕСН = "Больничный в связи с производственной  травмой"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ОблагаетсяФСЗНиЕП Тогда
		РасшифровкаКодДоходаЕСН = "Входит в базу для ФСЗН и единого платежа, не входит для обазательного страхования"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ОблагаетсяСтрахиЕП Тогда
		РасшифровкаКодДоходаЕСН = "Входит в базу единого платежа и обязательного страхования и не входит в ФСЗН"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ОблагаетсяЕП Тогда
		РасшифровкаКодДоходаЕСН = "Входит в базу только для единого платежа"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяПолностью Тогда
		РасшифровкаКодДоходаЕСН = "Не входит в базу ни для одного из отчислений с ФОТ"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ОблагаетсяСтрах Тогда
		РасшифровкаКодДоходаЕСН = "Входит в базу только для обязательного страхования"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ОблагаетсяПолностью Тогда
		РасшифровкаКодДоходаЕСН = "Входит в базу для всех отчислений"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.БольничныйИзФСЗН Тогда
		РасшифровкаКодДоходаЕСН = "Пособие по врем нетрудоспособности из средств ФСЗН "
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ОблагаетсяФСЗН Тогда
		РасшифровкаКодДоходаЕСН = "Входит в базу только для ФСЗН"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ОблагаетсяФСЗНиСТРАХ Тогда
		РасшифровкаКодДоходаЕСН = "Входит в базу ФСЗН и страхование, не входит в единый платеж"
	Иначе
		РасшифровкаКодДоходаЕСН = "Не отражается в учете для целей исчисления отчислений в ФСЗН"
	КонецЕсли;
	
	Возврат РасшифровкаКодДоходаЕСН	
	
КонецФункции // ПолучитьПредставлениеСпособаОтраженияНачисленияВУчетах()

// Формирует представление переданного вида дохода с "предметной" точки зрения
//
// Параметры
//  , ВидНачисления - ПеречислениеСсылка.ВидыНачисленийОплатыТрудаПоСт255НК - описываемый вид дохода
//
// Возвращаемое значение:
//   строка - сформированное представление
//
Функция ПолучитьПредставлениеВидаДоходаПоНУ(ВидНачисления) Экспорт
	
	Если ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ПовременноПремиальная Тогда
		РасшифровкаВидНачисления = "Повременно-премиальная оплата труда"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.СдельноПремиальная Тогда
		РасшифровкаВидНачисления = "Сдельно-премиальная оплата труда"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ПремииОсновные Тогда
		РасшифровкаВидНачисления = "Премии, включаемые в основную зарплату"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ДоплатаЗаСлужебныеОбязанности Тогда
		РасшифровкаВидНачисления = "Доплаты за выполнение служебных обязанностей"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.НадбавкиЗаСлужебныеОбязанности Тогда
		РасшифровкаВидНачисления = "Надбавки за выполнение служебных обязанностей"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ДоплатаЗаСверхурочные Тогда
		РасшифровкаВидНачисления = "Доплата за сверхурочное время"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ДоплатаЗаВечерниеНочные Тогда
		РасшифровкаВидНачисления = "Доплата за вечерние и ночные часы"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.НадбавкиЗаВыслугу Тогда
		РасшифровкаВидНачисления = "Надбавка за непрерывный стаж работы"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ГодоваяПремия Тогда
		РасшифровкаВидНачисления = "Годовая премия по результатам работы"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ОплатыПоСреднему Тогда
		РасшифровкаВидНачисления = "Выплаты по среднему заработку"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.Прогресс Тогда
		РасшифровкаВидНачисления = "Прогресс"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ОплатаПростоев Тогда
		РасшифровкаВидНачисления = "Оплата простоев"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ОплатаЛьготныхЧасов Тогда
		РасшифровкаВидНачисления = "Оплата льготных часов подросткам, кормящим матерям"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.Договора Тогда
		РасшифровкаВидНачисления = "Договора на выполнение работ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ОплатаОтпускаТек Тогда
		РасшифровкаВидНачисления = "Оплата отпуска текущего месяца"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ОплатаОтпускаБуд Тогда
		РасшифровкаВидНачисления = "Оплата отпуска будущего периода"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.УчебныйОтпуск Тогда
		РасшифровкаВидНачисления = "Учебный отпуск"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.КомепсацияОтпуска Тогда
		РасшифровкаВидНачисления = "Компенсация неиспользованного отпуска"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.КомпенсацияОтпускаПриУвольнении Тогда
		РасшифровкаВидНачисления = "Компенсация отпуска при увольнении"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ПособияПоВременнойНетрудоспособности Тогда
		РасшифровкаВидНачисления = "Пособия по временной нетрудоспособности"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ПособияРазовыеФСЗН Тогда
		РасшифровкаВидНачисления = "Пособия (выплаты) из ФСЗН"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ВыплатыИзПрибыли Тогда
		РасшифровкаВидНачисления = "Выплаты из прибыли"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ПрочиеВыплаты Тогда
		РасшифровкаВидНачисления = "Прочие - не включается в себестоимость, включается в статистику ФЗП"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.выплатыЗаПроизводственныеРезультаты Тогда
		РасшифровкаВидНачисления = "Выплаты за производственные результаты"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.СтоимостьПродукцииПоНатОплате Тогда
		РасшифровкаВидНачисления = "Стоимость продукции по натуральной оплате"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ОплатаУчащимсяПТУиВУЗ Тогда
		РасшифровкаВидНачисления = "Оплата работ учащимся ПТУ и ВУЗ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.РазоваяМатПомощь Тогда
		РасшифровкаВидНачисления = "Разовая материальная помощь, включается в статистику ФЗП"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ВыплатыПоПроизводствТравмам Тогда
		РасшифровкаВидНачисления = "Выплаты по производств травмам"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ПрочиеВыплатыФЗП Тогда
		РасшифровкаВидНачисления = "Прочие - не включается в себестоимость, включается в статистику ФЗП"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ПрочиеВыплатыСебестФЗП Тогда
		РасшифровкаВидНачисления = "Прочие - ввключается в себестоимость и статистику ФЗП"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.ПрочиеВыплатыСебест Тогда
		РасшифровкаВидНачисления = "Прочие - включается в себестоимость, не включается в статистику ФЗП"
	ИначеЕсли ВидНачисления.Пустая() Тогда
		РасшифровкаВидНачисления = "Не учитывается в расходах на оплату труда"
	КонецЕсли;
	
	Возврат РасшифровкаВидНачисления	
	
КонецФункции // ПолучитьПредставлениеСпособаОтраженияНачисленияВУчетах()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОБРАБОТКИ МЕНЮ

// Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции объектов метаданных,
// соответствующей перечислению видов операций для данного документа.
// Всем кнопкам назначается одно переданное действие.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа
//
// Параметры:
//  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить, 
//  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
//
Процедура УстановитьПодменюВыбораВидаОперации(ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации) Экспорт

	Для каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
		ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Имя, ТипКнопкиКоманднойПанели.Действие, 
		                            ЭлементЗаполнения.Синоним, ОбъектОбработкиВыбораОперации);
	КонецЦикла;

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()

// Процедура вызывается формирования кнопки "Подбор" для формы видов расчетов Планов Видов Расчетов.
//
// Параметры:
//  СсылкаПВР 	   	   - ссылка на ПВР;
//  ФормаЭлемента 	   - Форма вида расчета.
//  ВедущиеВидыРасчета - булево, Истина - если нужно формировать кнопку в командной
//						 панели ТЧ "ВедущиеВидыРасчета".
//
Процедура СоздатьКнопкуПодбораДляПВР(СсылкаПВР, ФормаЭлемента, ВедущиеВидыРасчета = Ложь) Экспорт

	МассивДоступныхТипов = Новый Массив;
	
	КоллекцияБазовыхВидовРасчета = Метаданные.ПланыВидовРасчета[СсылкаПВР.Метаданные().Имя].БазовыеВидыРасчета;
	
	Если КоллекцияБазовыхВидовРасчета.Количество() > 1 Тогда
		
		ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
		
		Если ВедущиеВидыРасчета Тогда
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
		КонецЕсли;
		
		Для каждого СтрокаКолекции Из КоллекцияБазовыхВидовРасчета Цикл
			
			ДействиеПоКнопке = Новый Действие("КоманднаяПанельБазовыеВидыРасчетаПодборПодМеню");
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.Кнопки.Добавить(СтрокаКолекции.Имя, ТипКнопкиКоманднойПанели.Действие, СтрокаКолекции.Синоним, ДействиеПоКнопке);
			
			Если ВедущиеВидыРасчета Тогда
				
				ДействиеПоКнопке = Новый Действие("КоманднаяПанельВедущиеВидыРасчетаПодМеню");
				ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор.Кнопки.Добавить(СтрокаКолекции.Имя, ТипКнопкиКоманднойПанели.Действие, СтрокаКолекции.Синоним, ДействиеПоКнопке);
				
				МассивДоступныхТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + СтрокаКолекции.Имя));
				
			КонецЕсли;
			
		КонецЦикла; 
		
	Иначе
		
		ДействиеПоКнопке = Новый Действие("КоманднаяПанельБазовыеВидыРасчетаПодбор");
		ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
		ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.Действие  = ДействиеПоКнопке;
		
		Если ВедущиеВидыРасчета Тогда
			
			ДействиеПоКнопке = Новый Действие("КоманднаяПанельВедущиеВидыРасчетаПодбор");
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор.Действие = ДействиеПоКнопке;
			
			Для каждого СтрокаКолекции Из КоллекцияБазовыхВидовРасчета Цикл
				
				МассивДоступныхТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + СтрокаКолекции.Имя));
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если ВедущиеВидыРасчета Тогда
		
		ФормаЭлемента.ЭлементыФормы.ВедущиеВидыРасчета.Колонки.ВидРасчета.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов(МассивДоступныхТипов);
		Если КоллекцияБазовыхВидовРасчета.Количество() = 1 Тогда
			ФормаЭлемента.ЭлементыФормы.ВедущиеВидыРасчета.Колонки.ВидРасчета.ЭлементУправления.ВыбиратьТип = Ложь;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // СоздатьКнопкуПодбораДляПВР()

// Процедура удаляет кнопку "Права" из командной панели формы
//
// Параметры
//  Кнопки  – <КнопкиКоманднойПанели> – <описание параметра>
//
Процедура УдалитьКнопкуПрава(Кнопки) Экспорт
	
	Если Кнопки.Найти("Права") <> Неопределено И (НЕ ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей ИЛИ НЕ РольДоступна(Метаданные.Роли.ПолныеПрава)) Тогда
		Кнопки.Удалить(Кнопки.Права);
		Кнопки.Удалить(Кнопки.РазделительПрава);
	КонецЕсли;	
	
КонецПроцедуры // УдалитьКнопкуПрава()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ и ФУНКЦИИ ИНФОРМИРОВАНИЯ ПОЛЬЗОВАТЕЛЯ

// Проверяет модифицированность документа перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Документ - (ДокументОбъект.*) - проверяемый документ
//
Функция ПроверитьМодифицированность(Документ) Экспорт

	Результат = Ложь;

	Если Документ.Модифицированность() Тогда

		Проведен = ?(Документ.Проведен, " и провести","");

		Ответ = Вопрос("Документ изменен. Для печати его необходимо записать"+ Проведен +".
		               |Записать" + Проведен + "?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Документ изменен");

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			Если Документ.Проведен Тогда

				ДатаДока = НачалоДня(Документ.Дата);
				ДатаДня  = НачалоДня(ТекущаяДата());

				Попытка
					
					Если ДатаДока = ДатаДня и Документ.Метаданные().ОперативноеПроведение = Метаданные.СвойстваОбъектов.ОперативноеПроведение.Разрешить Тогда
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
					Иначе
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					КонецЕсли;

				Исключение

					Предупреждение("Операция не выполнена!");
					Возврат Результат = Истина;

				КонецПопытки;

			Иначе
				Документ.Записать();
			КонецЕсли;

			Результат = Истина;

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированность()

// Проверяет модифицированность документа перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Объект - (ДокументОбъект.*, СправочникОбъект.*) - проверяемый документ / справочник
//  Форма    - форма проверяемого документа / справочника
//
Функция ПроверитьМодифицированностьВФорме(Объект, Форма) Экспорт

	Результат = Ложь;

	Если Форма.Модифицированность Тогда

		Проведен    = Метаданные.Документы.Содержит(Объект.Метаданные()) И Объект.Проведен;
		СтрПроведен = ?(Проведен, " и провести","");
		
		Ответ = Вопрос("Документ изменен. Для печати его необходимо записать "+ СтрПроведен +".
		               |Записать" + СтрПроведен + "?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Документ изменен");

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			Если Проведен Тогда

				Попытка

					Отказ = Не Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);

				Исключение

					Предупреждение("Операция не выполнена!");
					Возврат Результат = Истина;

				КонецПопытки;

				Если Отказ Тогда
					Возврат Результат = Истина;
				КонецЕсли;
			Иначе
				Отказ = Не Форма.ЗаписатьВФорме();
				Если Отказ Тогда
					Возврат Результат = Истина;
				КонецЕсли;
			КонецЕсли;

			Результат = Истина;

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированность()

// Записывает документ спросив об этом у пользователя
//
// Параметры
//  Объект        - ДокументОбъект
//  ФормаОбъекта  – Тип - Форма
//                 форма документа из которого вызвана функция
//  ТекстВопроса  – Тип – Строка
//                 текст вопроса
//
// Возвращаемое значение:
//   Истина   – если не требуется запись документа или запись прошла успешно
//   Ложь     - отказ пользователя от записи или не удачная попытка записи
//
Функция ЗаписатьДокументПередВыполнениемДействия(Объект, ФормаОбъекта, ТекстВопроса) Экспорт

	Если Объект.Модифицированность() Тогда
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				Возврат Ложь;
			КонецПопытки;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 	
	
	Возврат Истина;

КонецФункции // ЗаписатьДокументПередВыполнениемДействия()

// Записывает документ в режиме отмены проведения, спросив об этом у пользователя
// Параметры
//  Объект        - ДокументОбъект
//  ФормаОбъекта  – Тип - Форма
//                 форма документа из которого вызвана функция
//  ТекстДействие  – Тип – Строка
//                 текст вопроса
//
// Возвращаемое значение:
//   Истина   – если не требуется запись документа или запись прошла успешно
//   Ложь     - отказ пользователя от записи или не удачная попытка записи
Функция ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(Объект, ФормаОбъекта, ТекстДействие = НеОпределено, ТекстВопрос1 = НеОпределено, ТекстВопрос2 = НеОпределено) Экспорт

	Если Объект.Проведен Тогда
		
		Если ТекстВопрос1 = Неопределено Тогда
			Если Вопрос("Автоматически "+ТекстДействие+" документ можно только после отмены его проведения. Выполнить отмену проведения документа?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Если Вопрос(ТекстВопрос1, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли; 
		
		Попытка
			Возврат ФормаОбъекта.ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			Возврат Ложь;
		КонецПопытки;
				
	ИначеЕсли Объект.Модифицированность() Тогда
		
		Если ТекстВопрос2 = Неопределено Тогда
			Если Вопрос("Автоматически "+ТекстДействие+" документ можно только после его записи. Записать?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Если Вопрос(ТекстВопрос2, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Возврат ФормаОбъекта.ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ЗаписатьДокументОтменивПроведение()

// Записывает документ в режиме отмены проведения, проверяет необходимость очистки табличных частей, спросив об этом у пользователя
// Параметры
//  Объект        - ДокументОбъект
//  ФормаОбъекта  – Тип - Форма
//                 форма документа из которого вызвана функция
//  ТекстВопроса1 и ТекстВопроса2  – Тип – Строка
//                 текст вопроса
//  ЗаписыватьДокумент - параметр определяет, производить запись документа или нет, с параметром Ложь функция
//						 вызывается при заполнении списком, т.е. запись документа необходимо произвести
//						 только если пользователь не откажется от заполнения списком в обработчике ОбработкаВыбора формы
//
// Возвращаемое значение:
//   Истина   – если не требуется запись документа или запись прошла успешно
//   Ложь     - отказ пользователя от записи или не удачная попытка записи
Функция ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(Объект, ФормаОбъекта, ТабличныеЧасти, ТекстВопроса1, ТекстВопроса2, ЗаписыватьДокумент = Истина) Экспорт
	
	Если Объект.Проведен Тогда
		
		//документ проведен, необходимо записать документ отменив проведение и очистить табличные части
		
		Если Вопрос(ТекстВопроса1, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		Если ЗаписыватьДокумент Тогда
			Попытка
				ФормаОбъекта.ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
			Исключение
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		
		// документ не проведен, необходимо записать документ и очистиить табличные части, вопросы
		// пользователю задаем только по поводу очистки табличных частей
		НадоОчищатьТабличныеЧасти = Ложь;
		Если НЕ ТабличныеЧасти = Неопределено Тогда
			//проверим заполнение табличных частей			
			Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
				НадоОчищатьТабличныеЧасти = ТабличнаяЧасть.Количество() > 0;
				Если НадоОчищатьТабличныеЧасти Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НадоОчищатьТабличныеЧасти Тогда
				
				Ответ = Вопрос(ТекстВопроса2, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
				
				Если Ответ <> КодВозвратаДиалога.Да Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗаписыватьДокумент И Объект.Модифицированность() Тогда //запишем документ
			
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
			Исключение
				Возврат Ложь;
			КонецПопытки;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ ДОКУМЕНТОВ

// Процедура выполняет открытие формы работы со свойствами документа
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  ФормаДокумента - форма редактируемого документа
//
Процедура ОткрытьСвойстваДокумента(ДокументОбъект, ФормаДокумента) Экспорт

	Если ДокументОбъект.ЭтоНовый() Тогда
		Вопрос = "Перед началом работы со свойствами необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ФормаДокумента.ЗаписатьВФорме();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ФормаДокумента, ДокументОбъект.Ссылка);

	//Форма.НазначениеСвойств      = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
	Форма.НазначениеСвойств      = ОбщегоНазначения.ПолучитьСписокНазначенийСвойствКатегорийОбъектовПоСсылке(ДокументОбъект.Ссылка);
	Форма.ОбъектОтбораЗначений   = ДокументОбъект.Ссылка;
	Форма.ОбъектОтбораНазначений = ДокументОбъект.Ссылка;

	Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
	Форма.Открыть();

КонецПроцедуры // ОткрытьСвойстваДокумента()

// Процедура выполняет открытие формы работы с категориями документа
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  ФормаДокумента - форма редактируемого документа
//
Процедура ОткрытьКатегорииДокумента(ДокументОбъект, ФормаДокумента) Экспорт

	Если ДокументОбъект.ЭтоНовый() Тогда
		Вопрос = "Перед началом работы с категориями необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ФормаДокумента.ЗаписатьВФорме();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Форма = Обработки.КатегорииОбъекта.ПолучитьФорму("КатегорииОбъекта", ФормаДокумента, ДокументОбъект.Ссылка);

	Форма.НазначениеКатегорий   = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
	Форма.ОбъектОтбораКатегорий = ФормаДокумента.Ссылка;

	Форма.ПрочитатьЗаполнитьКатегорииОбъекта();
	Форма.Открыть();

КонецПроцедуры // ОткрытьКатегорииДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБРАБОТКИ XML

Функция ПрочитатьЭлементXML(ОбъектДоступаXML, ИмяЭлемента = Неопределено)
	
	ИмяПоследнегоЗакрытогоУзла = "";
	
	Пока ОбъектДоступаXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Цикл // тип узла = начало элемента
		Если НЕ ОбъектДоступаXML.Прочитать() Тогда // должен прочитаться узел
			Возврат Неопределено;
		КонецЕсли;
		Если ОбъектДоступаXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ИмяПоследнегоЗакрытогоУзла = ОбъектДоступаXML.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяЭлемента <> Неопределено Тогда // если определили имя элемента, нужно чтобы совпадало с полученным
		Если ОбъектДоступаXML.Имя <> ИмяЭлемента Тогда
			Сообщить("Неправильное имя узла (" + ИмяЭлемента + ")!"); 
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеАтрибутов = Новый Соответствие();
	
	СоответствиеАтрибутов.Вставить("ИмяТекущегоУзлаXML", ОбъектДоступаXML.Имя);
	СоответствиеАтрибутов.Вставить("ИмяПоследнегоЗакрытогоУзла", ИмяПоследнегоЗакрытогоУзла);
	
	Пока ОбъектДоступаXML.ПрочитатьАтрибут() Цикл
		СоответствиеАтрибутов.Вставить(ОбъектДоступаXML.Имя, ОбъектДоступаXML.Значение);
	КонецЦикла;
	
	Возврат СоответствиеАтрибутов;

КонецФункции

Функция ДочитатьУзелДоКонца(ОбъектДоступаXML,ИмяЭлемента)
	
	Пока (ОбъектДоступаXML.ТипУзла <> ТипУзлаXML.КонецЭлемента) И (ОбъектДоступаXML.ИмяУзла = ИмяЭлемента) Цикл // тип узла = начало элемента
		Если НЕ ОбъектДоступаXML.Прочитать() Тогда // должен прочитаться узел
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПОДМЕНЮ ПЕРЕЙТИ

Функция ПолучитьXMLОписаниеПодменю()
	
	Возврат ПолучитьОбщийМакет("СоставПодменюПерейти").ПолучитьТекст();
	
КонецФункции

Функция ПолучитьДеревоПодменюПерейти(ТипОбъекта, ИмяОбъекта, ДействиеПоУмолчанию, СоответствиеДействийПодменюПерейти) Экспорт
	
	ОбъектЧтенияПодменю = Новый ЧтениеXML();
	ОбъектЧтенияПодменю.УстановитьСтроку(ПолучитьXMLОписаниеПодменю());
	
	СоответствиеАттрибутов = ПрочитатьЭлементXML(ОбъектЧтенияПодменю, "УказательПодменюПерейти");
	
	Если СоответствиеАттрибутов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СоответствиеАттрибутов = ПрочитатьЭлементXML(ОбъектЧтенияПодменю, "ПодменюПерейти");

	Если СоответствиеАттрибутов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Пока ("" + СоответствиеАттрибутов["Тип"] + СоответствиеАттрибутов["Имя"]) <> (ТипОбъекта + ИмяОбъекта) Цикл
		
		ДочитатьУзелДоКонца(ОбъектЧтенияПодменю, "ПодменюПерейти");
		
		СоответствиеАттрибутов = ПрочитатьЭлементXML(ОбъектЧтенияПодменю, "ПодменюПерейти");
		
		Если СоответствиеАттрибутов = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоПодменю = ИнициализироватьДеревоДополнительныхКнопок();
	ТекущаяСтрокаДерева = ДеревоПодменю;
	
	СоответствиеАттрибутов = ПрочитатьЭлементXML(ОбъектЧтенияПодменю);
	
	Если СоответствиеАттрибутов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяУзла = СоответствиеАттрибутов["ИмяТекущегоУзлаXML"];
	ИмяПоследнегоЗакрытогоУзла = СоответствиеАттрибутов["ИмяПоследнегоЗакрытогоУзла"];
	
	Пока ИмяПоследнегоЗакрытогоУзла <> "ПодменюПерейти" Цикл
		
		Если ИмяПоследнегоЗакрытогоУзла = "Подменю" Тогда
			ТекущаяСтрокаДерева = ТекущаяСтрокаДерева.Родитель;
			Если ТекущаяСтрокаДерева = Неопределено Тогда
				ТекущаяСтрокаДерева= ДеревоПодменю;
			КонецЕсли;
		КонецЕсли;
			
		Если ИмяУзла = "Кнопка" Тогда
			ДобавитьСтрокуВДеревоКнопок(ТекущаяСтрокаДерева, СоответствиеАттрибутов["Имя"], ТипКнопкиКоманднойПанели.Действие, СоответствиеАттрибутов["Текст"], ДействиеПоУмолчанию, Неопределено, Ложь, СоответствиеАттрибутов["Подсказка"]);
			СоответствиеДействийПодменюПерейти.Вставить( СоответствиеАттрибутов["Имя"], СоответствиеАттрибутов["Действие"]);
			
		ИначеЕсли ИмяУзла = "Разделитель" Тогда
			ДобавитьСтрокуВДеревоКнопок(ТекущаяСтрокаДерева, СоответствиеАттрибутов["Имя"], ТипКнопкиКоманднойПанели.Разделитель, СоответствиеАттрибутов["Текст"], ДействиеПоУмолчанию, Неопределено, Ложь, СоответствиеАттрибутов["Подсказка"]);
			
		ИначеЕсли ИмяУзла = "Подменю" Тогда
			СтрокаПодменю = ДобавитьСтрокуВДеревоКнопок(ТекущаяСтрокаДерева, СоответствиеАттрибутов["Имя"], ТипКнопкиКоманднойПанели.Подменю, СоответствиеАттрибутов["Текст"], Неопределено, Неопределено, Ложь, СоответствиеАттрибутов["Подсказка"]);
			ТекущаяСтрокаДерева = СтрокаПодменю;
			
		КонецЕсли;
		
		СоответствиеАттрибутов = ПрочитатьЭлементXML(ОбъектЧтенияПодменю);
		
		Если СоответствиеАттрибутов = Неопределено Тогда
			Возврат ДеревоПодменю;
		КонецЕсли;
		
		ИмяУзла = СоответствиеАттрибутов["ИмяТекущегоУзлаXML"];
		ИмяПоследнегоЗакрытогоУзла = СоответствиеАттрибутов["ИмяПоследнегоЗакрытогоУзла"];
		
	КонецЦикла;
	
	Возврат ДеревоПодменю;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ДОПОЛНИТЕЛЬНЫМИ КНОПКАМИ

// Функция инициализирует дерево дополнительных кнопок
//	Параметры:
//		Нет
// Возвращаемое значение:
//		Тип: ДереваЗначений.
Функция ИнициализироватьДеревоДополнительныхКнопок() Экспорт
	
	ДеревоКнопок = Новый ДеревоЗначений;
	
	//Если ИмяКнопки = Неопределено, создается разделитель
	//Если Дерево имеет подчиненные, то 
	
	ДеревоКнопок.Колонки.Добавить("Имя");
	ДеревоКнопок.Колонки.Добавить("ТипКнопки");
	ДеревоКнопок.Колонки.Добавить("Текст");
	ДеревоКнопок.Колонки.Добавить("Подсказка");
	ДеревоКнопок.Колонки.Добавить("Картинка");
	ДеревоКнопок.Колонки.Добавить("Действие");
	ДеревоКнопок.Колонки.Добавить("Пометка");
	
	ДеревоКнопок.Колонки.Добавить("ИзменяетДанные");
	
	//Остальные свойства кнопки
	
	ДеревоКнопок.Колонки.Добавить("Расшифровка");
	
	Возврат ДеревоКнопок;
	
КонецФункции // ()

// Функция добавляет новую строку в дерево кнопок
// Параметры:
//	< СтрокаПодменю > (обязательный)
//		Тип: Дерево или элемент дерева значений, в который необходимо добавить новое описание кнопки
//	< Имя > (обязательный)
//		Тип: Строка. Имя создаваемой кнопки;
//	< ТипКнопки > (по умолчанию «Действие»)
//		Тип: ТипКнопкиКоманднойПанели. Тип создаваемой кнопки (Кнопка, разделитель, подменю);
//	< Текст > (по умолчанию пустая строка)
//		Тип: Строка. Текст кнопки.
//	< Текст > (по умолчанию пустая строка)
//		Тип: Строка. Текст кнопки.
//	< Действие > (по умолчанию «Не Определено»)
//		Тип: Действие. Действие кнопки (процедура должна быть описана в форме объекта, на который навешивается подменю).
//	< Расшифровка > (по умолчанию не определено)
//		Тип: Произвольный.
//	< Пометка > (по умолчанию «Ложь»)
//		Тип: Булево.
//	< Подсказка > (по умолчанию пустая строка)
//		Тип: Строка. Подсказка создаваемой кнопки.
//	< Картинка > (по умолчанию «Не Определено»)
//		Тип: Картинка. Картинка создаваемой кнопки.
// Возвращаемое значение:
//		Тип: СтрокаДереваЗначений.
Функция ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, Имя, Знач ТипКнопки = Неопределено ,Текст = "", Действие = Неопределено, Расшифровка = Неопределено, Пометка = Ложь, Подсказка = "", Картинка = Неопределено, ИзменяетДанные = Ложь)
	
	Если ТипКнопки = Неопределено Тогда
	
		ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
		 
	КонецЕсли; 
	
	СтрокаКнопки             = СтрокаПодменю.Строки.Добавить();
	
	СтрокаКнопки.Имя         = Имя;
	СтрокаКнопки.ТипКнопки   = ТипКнопки;
	СтрокаКнопки.Текст       = Текст;
	СтрокаКнопки.Действие    = Действие;
	СтрокаКнопки.Картинка    = Картинка;
	СтрокаКнопки.Подсказка   = Подсказка;
	СтрокаКнопки.Пометка     = Пометка;
	
	СтрокаКнопки.ИзменяетДанные   = ИзменяетДанные;
	
	
	СтрокаКнопки.Расшифровка = Расшифровка;
	Возврат СтрокаКнопки;
	
КонецФункции

// Процедура формирует подменю по дереву значений
// Параметры:
//	< СтрокаПодменю > (обязательный)
//		Тип: Дерево или элемент дерева значений, по данным которого необходимо построить подменю.
//	< Подменю> (обязательный)
//		Тип: Элемент командной панели «Кнопка» типа «Подменю». На которой необходимо сформировать новое подменю.
//	< Очищать> (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли очищать переданное подменю.
//	< ДобавлятьРазделительВНачало > (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли добавить в начало подменю разделитель.
Процедура СформироватьПодменю(СтрокаПодменю, Подменю, Очищать = Ложь, ДобавлятьРазделительВНачало = Ложь) Экспорт
	
	Строки = СтрокаПодменю.Строки;
	Кнопки = Подменю.Кнопки;
	
	Если Очищать Тогда
		Кнопки.Очистить();
	
	КонецЕсли; 
	
	Если ДобавлятьРазделительВНачало и Строки.Количество() > 0 Тогда
		Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
	
	КонецЕсли; 
	
	Для каждого СтрокаКнопки Из Строки Цикл
		
		Кнопка = Кнопки.Добавить(СтрокаКнопки.Имя,СтрокаКнопки.ТипКнопки, СтрокаКнопки.Текст, СтрокаКнопки.Действие);
		
		Если СтрокаКнопки.Строки.Количество() > 0 Тогда
			
			СформироватьПодменю(СтрокаКнопки, Подменю, Ложь, Ложь)
			
		КонецЕсли; 
		
		Если Не СтрокаКнопки.Картинка = Неопределено Тогда
			
			Кнопка.Картинка  = СтрокаКнопки.Картинка;
		
		КонецЕсли; 
		
		Кнопка.Подсказка      = СтрокаКнопки.Подсказка;
		Кнопка.Пометка        = СтрокаКнопки.Пометка;
		Кнопка.ИзменяетДанные = СтрокаКнопки.ИзменяетДанные;
		
		//Остальные свойства кнопки
		
	КонецЦикла; 
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЗАПОЛНЕНИЯ ТАБЛИЧНЫХ ЧАСТЕЙ ИЗ ВНЕШНИХ ОБРАБОТОК

// Процедура - обработчик нажатия любой из дополнительных кнопок заполнения табличных частей
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
Процедура ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(СтрокаКнопки,ЭтотОбъект) Экспорт
	
	Перем СсылкаНаВнешнююОбработку;
	Перем ДополнительныеПараметры;
	
	// Получить ссылку на внешнюю обработку
	СтрокаКнопки.Расшифровка.Свойство("СсылкаНаВнешнююОбработку", СсылкаНаВнешнююОбработку);
	
	// Получить дополнительные параметры внешней обработки
	СтрокаКнопки.Расшифровка.Свойство("ДополнительныеПараметрыОбработки", ДополнительныеПараметры);
	
	//Расшифровка = СтрокаКнопки.Расшифровка;
	
	Если ТипЗНЧ(СсылкаНаВнешнююОбработку) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = СсылкаНаВнешнююОбработку.ПолучитьОбъект();
		
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней обработки заполнения табличной части документа. Возможно обработка была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		
		Попытка
			
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			
			// Передать внешней обработке дополнительные параметры
			Если ДополнительныеПараметры <> Неопределено Тогда
				
				// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение
				Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
					Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
				КонецЕсли;
				
			КонецЕсли;
			
		Исключение
			
			Сообщить("Ошибка исполнения внешней обработки табличной части документа."+Символы.ПС+ОписаниеОшибки(), СтатусСообщения.Важное);
			Возврат;
			
		КонецПопытки;
		
		Попытка
			
			Обработка.Инициализировать(ЭтотОбъект, СтрокаКнопки.Родитель.Имя, СтрокаКнопки.Родитель.Расшифровка);
			
		Исключение
			
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Заполнение ТЧ не произведено!");
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует подменю "Заполнить" у ТЧ по дереву значений
//
Функция СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Действие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка,
	|	ВнешниеОбработкиПринадлежность.ДополнительныеПараметрыОбработки КАК ДополнительныеПараметрыОбработки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВнешниеОбработкиПринадлежность.ПредставлениеКнопки, """") <> """" ТОГДА ВнешниеОбработкиПринадлежность.ПредставлениеКнопки
	|		ИНАЧЕ ВнешниеОбработкиПринадлежность.Ссылка.Наименование
	|	КОНЕЦ КАК Наименование,
	|	ВнешниеОбработкиПринадлежность.ТабличнаяЧастьИмя КАК ТабличнаяЧастьИмя
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьИмя
	|ИТОГИ ПО
	|	ТабличнаяЧастьИмя";
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ДеревоКнопок = ИнициализироватьДеревоДополнительныхКнопок();
	
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей);
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
	Иначе
		Возврат ДеревоКнопок;
	КонецЕсли;
	
	НомерКнопки = 0;
	
	ДеревоТЧ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого КлючИЗначение Из СоответствиеТЧ Цикл
		ИмяТабличнойЧасти = КлючИЗначение.Ключ.Данные;
		
		СтрокаДереваТЧ = ДеревоТЧ.Строки.Найти(ИмяТабличнойЧасти,"ТабличнаяЧастьИмя");
		
		Если Не СтрокаДереваТЧ = Неопределено Тогда
			
			СтрокаПодменю  = ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок,ИмяТабличнойЧасти, ТипКнопкиКоманднойПанели.Действие , , , КлючИЗначение.Ключ, , , ,Истина);
			
			Для каждого ПодСтрокаДереваТЧ Из СтрокаДереваТЧ.Строки Цикл
				
				НомерКнопки = НомерКнопки + 1;
				
				СтруктураРасшифровки = Новый Структура("СсылкаНаВнешнююОбработку, ДополнительныеПараметрыОбработки", ПодСтрокаДереваТЧ.Ссылка, ПодСтрокаДереваТЧ.ДополнительныеПараметрыОбработки.Получить());
				
				ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, "ЗаполнениеТЧ"+НомерКнопки, ТипКнопкиКоманднойПанели.Действие, ПодСтрокаДереваТЧ.Наименование, Действие , СтруктураРасшифровки, , , ,Истина)
				
			КонецЦикла;
			
			ПодменюИлиКоманднаяПанель = КлючИЗначение.Значение;
				
			Если ТипЗНЧ(ПодменюИлиКоманднаяПанель) = Тип("КоманднаяПанель") Тогда
					
				ПодменюИлиКоманднаяПанель = ПодменюИлиКоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Подменю,"Заполнить");
					
			КонецЕсли;
			
			СформироватьПодменю(СтрокаПодменю, ПодменюИлиКоманднаяПанель,Ложь,Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДеревоКнопок;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПЕЧАТИ

// Функция заполняет начальные параметры построителю отчета, который
//  используется для настройки отбора в мезанизме подключения внешних печатных форм.
//
// Параметры
//  ИмяТаблицы     - Строка, имя таблицы БД к которой необходимо определить запрос
//  СинонимТаблицы - Строка, синоним таблицы БД к которой необходимо определить запрос
//
// Возвращаемое значение:
//   ПостроительОтчета
//
Функция ИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицы, СинонимТаблицы) Экспорт

	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	" + ИмяТаблицы + " КАК Объект
	|ГДЕ
	|	Объект.Ссылка = &Ссылка
	|{ГДЕ
	|	Объект.Ссылка.*}
	|";
	
	ПолеОбъекта = ПостроительОтчета.ДоступныеПоля.Найти("Ссылка");
	ПолеОбъекта.Представление = ?(ЗначениеЗаполнено(СинонимТаблицы), СинонимТаблицы, ИмяТаблицы);
	
	Возврат ПостроительОтчета;

КонецФункции // ()

// Процедура формирует дерево кнопок для подменю "Печать"
//
Функция ПолучитьДеревоМакетовПечати(СсылкаОбъекта, ВнутренниеПечатныеФормы, Действие = Неопределено, ДействиеУстановитьПечатьПоУмолчанию = Неопределено) Экспорт
	
	
	ДеревоКнопок = ИнициализироватьДеревоДополнительныхКнопок();
	
	Если Не ВнутренниеПечатныеФормы = Неопределено Тогда
		ДобавитьВДеревоМакетовВстроенныеФормы(ДеревоКнопок, ВнутренниеПечатныеФормы, Действие);
		
	КонецЕсли;
	
	ДобавитьВДеревоМакетовДополнительныеФормы(ДеревоКнопок, СсылкаОбъекта, Действие);
	
	СтрокаПоУмолчанию = ДеревоКнопок.Строки.Найти(ВосстановитьЗначение(СсылкаОбъекта.Метаданные().Имя + "МакетПечати"),"Текст");
	
	Если Не СтрокаПоУмолчанию = Неопределено Тогда
		СтрокаПоУмолчанию.Пометка = Истина;
	КонецЕсли; 	
		
	Если ДеревоКнопок.Строки.Количество() > 0 Тогда
	
		ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Разделитель);
		
		ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, "ПечатьПоУмолчанию", ТипКнопкиКоманднойПанели.Действие, "По умолчанию...", ДействиеУстановитьПечатьПоУмолчанию, "ПечатьПоУмолчанию");
	
	КонецЕсли; 
	
	
	Возврат ДеревоКнопок;
	
КонецФункции // ()

// Процедура Устанавливает кнопку "Печать по умолчанию"
//
Процедура УстановитьПечатьПоУмолчанию(ПечатьПоУмолчанию, КоманднаяПанель, ДеревоМакетов, ИмяМетаданных, ДействиеПечатьПоУмолчанию) Экспорт
	
	Строки = ДеревоМакетов.Строки;
	
	МакетПоУмолчанию = ВосстановитьЗначение(ИмяМетаданных + "МакетПечати");
	
	Если Не Строки.Найти(МакетПоУмолчанию,"Текст") = Неопределено Тогда
		Если ПечатьПоУмолчанию = Неопределено Тогда
			
			ИмяКнопки = Строка (Новый УникальныйИдентификатор);
			
			Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
				КоманднаяПанель.Кнопки.Вставить(0,,ТипКнопкиКоманднойПанели.Разделитель);
				ПечатьПоУмолчанию = КоманднаяПанель.Кнопки.Вставить(0,ИмяКнопки,ТипКнопкиКоманднойПанели.Действие,"",ДействиеПечатьПоУмолчанию);
			Иначе
				КоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
				ПечатьПоУмолчанию = КоманднаяПанель.Кнопки.Добавить(ИмяКнопки,ТипКнопкиКоманднойПанели.Действие,"",ДействиеПечатьПоУмолчанию);
			КонецЕсли;
			
			ПечатьПоУмолчанию.Подсказка = "Печать по умолчанию";
			
		КонецЕсли; 
		
		ПечатьПоУмолчанию.Текст       = МакетПоУмолчанию; 
		ПечатьПоУмолчанию.Доступность = Истина; 
		
	ИначеЕсли Не ПечатьПоУмолчанию = Неопределено Тогда
		
		ПечатьПоУмолчанию.Текст       = "Печать по умолчанию не назначена"; 
		ПечатьПоУмолчанию.Доступность = Ложь; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает Подменю "Печать" 
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
//    ДополнительныеКнопки : Структура дополнительных кнопок
Процедура УстановитьПодменюПечати(ПодменюПечати, КоманднаяПанель, СоздаватьПриНеобходимости) Экспорт
	
	Если Не ПодменюПечати = Неопределено или  Не СоздаватьПриНеобходимости Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяПодменю = Строка (Новый УникальныйИдентификатор);
	Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
		КоманднаяПанель.Кнопки.Вставить(0,,ТипКнопкиКоманднойПанели.Разделитель);
		ПодменюПечати = КоманднаяПанель.Кнопки.Вставить(0,ИмяПодменю,ТипКнопкиКоманднойПанели.Подменю,"Печать");
	Иначе
		КоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
		ПодменюПечати = КоманднаяПанель.Кнопки.Добавить(ИмяПодменю,ТипКнопкиКоманднойПанели.Подменю,"Печать");
	КонецЕсли;
	ПодменюПечати.Подсказка = "Меню выбора печатных форм";
			
	
КонецПроцедуры

// Процедура - обработчик нажатия любой из дополнительных кнопок печати
//
// Параметры:
//  Форма       : Форма, вызвавшая процедуру
//
Процедура ПечатьПоДополнительнойКнопке(УдалитьДеревоМакетов, Объект, Форма = Неопределено, ТекстКнопки) Экспорт
	
	Если Не Форма = Неопределено Тогда
		Если Не ПроверитьМодифицированностьВФорме(Объект,Форма) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоДокумент = Метаданные.Документы.Содержит(Объект.Метаданные());
	
	Если ЭтоДокумент И Объект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить И Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Объект.Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Попытка
		СтруктураВнутреннихПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм()
	Исключение
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
	КонецПопытки;
	
	ДеревоМакетовПечати = ПолучитьДеревоМакетовПечати(Объект.Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаКнопки = ДеревоМакетовПечати.Строки.Найти(ТекстКнопки,"Текст");
	
	Если СтрокаКнопки = Неопределено Тогда
		
		Предупреждение("Печать не доступна. Изменился набор реквизитов!");
		Возврат;
		
	КонецЕсли;
	
	Расшифровка = СтрокаКнопки.Расшифровка;
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		ТабДокумент = НапечататьВнешнююФорму(Объект.Ссылка, Расшифровка);
		НапечататьДокумент(ТабДокумент, , , ?(ЭтоДокумент, СформироватьЗаголовокДокумента(Объект), Строка(Объект)));
		
	Иначе
		
		Объект.Печать(СтрокаКнопки.Имя);
		
	КонецЕсли;
	
КонецПроцедуры // ПечатьПоДополнительнойКнопке()

// Процедура назначает макет по умолчанию
//
Функция НазначитьКнопкуПечатиПоУмолчанию(ДеревоМакетов, МетаданныеОбъекта) Экспорт

	СписокМакетов = Новый СписокЗначений;
	
	Для каждого Строка Из ДеревоМакетов.Строки Цикл
	
		Если Строка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие и Не Строка.Расшифровка = "ПечатьПоУмолчанию" Тогда
			
			СписокМакетов.Добавить(Строка.Текст,,Строка.Пометка);
			
		КонецЕсли; 
		
	
	КонецЦикла; 
	ФормаВыбораПечатнойФормыПоУмолчанию = ПолучитьОбщуюФорму("ФормаВыбораПечатнойФормыПоУмолчанию");
	ФормаВыбораПечатнойФормыПоУмолчанию.СписокВыбораПечатнойФормы = СписокМакетов;
	
	МакетПоУмолчанию = ФормаВыбораПечатнойФормыПоУмолчанию.ОткрытьМодально();
	Если МакетПоУмолчанию = "" Тогда
		СохранитьЗначение(МетаданныеОбъекта + "МакетПечати", Неопределено);
		
	ИначеЕсли Не МакетПоУмолчанию = Неопределено Тогда
		СохранитьЗначение(МетаданныеОбъекта + "МакетПечати", МакетПоУмолчанию);
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

// Функция получает ТабличныйДокумент для печати из внешней печатной формы.
//
// Параметры
//  Ссылка         - Ссылка, для которой необходимо напечатать документ
//  ДвоичныеДанные - ДвоичныеДанные, внешняя обработка для печати
//
// Возвращаемое значение:
//   ТабличныйДокумент
//
Функция НапечататьВнешнююФорму(Ссылка, ИсточникМакета) Экспорт
	
	Перем ДополнительныеПараметры;
	
	ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.Принадлежность[ИсточникМакета.НомерСтроки - 1].ХранилищеВнешнейОбработки.Получить();
	
	// Получить дополнительные параметры внешней обработки
	ИсточникМакета.Свойство("ДополнительныеПараметрыОбработки", ДополнительныеПараметры);
	
	Если ДвоичныеДанные = Неопределено Тогда
		ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.ХранилищеВнешнейОбработки.Получить();
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Неопределено;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("epf");
	Попытка
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		
		// Передать внешней обработке дополнительные параметры
		Если ДополнительныеПараметры <> Неопределено Тогда
			
			// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение
			Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
				Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент = Обработка.Печать();
		УдалитьФайлы(ИмяФайла);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось сформировать внешнюю печатную форму!");
	КонецПопытки;
	
	Возврат ТабДокумент;

КонецФункции

// Процедура дополняет таблицу печатных форма (ТаблицаМакетов) объекта
// из справочника "Дополнительные печатные формы"
Процедура ДобавитьВДеревоМакетовДополнительныеФормы(ДеревоМакетов, СсылкаОбъекта, Действие)
	СтрокиДерева = ДеревоМакетов.Строки;
	Если ТипЗнч(СсылкаОбъекта) = Тип("ОбъектМетаданных") Тогда
		Возврат;
	КонецЕсли; 
	
	МетаданныеОбъекта = СсылкаОбъекта.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка КАК Ссылка,
	|	ВнешниеОбработкиПринадлежность.ДополнительныеПараметрыОбработки КАК ДополнительныеПараметрыОбработки,
	|	ВнешниеОбработкиПринадлежность.Ссылка.Наименование КАК Наименование,
	|	ВнешниеОбработкиПринадлежность.Ссылка.ХранилищеВнешнейОбработки КАК СсылкаХранилищеВнешнейОбработки,
	|	ВнешниеОбработкиПринадлежность.НастройкиПостроителяДляОтбора КАК НастройкиПостроителяДляОтбора,
	|	ВнешниеОбработкиПринадлежность.ХранилищеВнешнейОбработки КАК ХранилищеВнешнейОбработки,
	|	ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма КАК ЗаменяемаяПечатнаяФорма,
	|	ВнешниеОбработкиПринадлежность.НомерСтроки
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|ИТОГИ ПО
	|	Ссылка";
	
	ИмяТаблицыОбъекта = "";
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма);
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
		ИмяТаблицыОбъекта = "Документ." + МетаданныеОбъекта.Имя;
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
		ИмяТаблицыОбъекта = "Справочник." + МетаданныеОбъекта.Имя;
	Иначе
		Возврат;
	КонецЕсли;
	
	БылРазделитель = СтрокиДерева.Количество() = 0 ;
	ВыборкаСсылок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСсылок.Следующий() Цикл
		ПорядковыйНомер = 0;
		Выборка = ВыборкаСсылок.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяОбработка = Неопределено;
			ОбработкаСтроки = Выборка.ХранилищеВнешнейОбработки.Получить();
			Если ТипЗнч(ОбработкаСтроки) = Тип("ДвоичныеДанные") Тогда
				НоваяОбработка = ОбработкаСтроки;
			Иначе
				ОбработкаЭлемента = Выборка.СсылкаХранилищеВнешнейОбработки.Получить();
				Если ТипЗнч(ОбработкаЭлемента) = Тип("ДвоичныеДанные") Тогда
					НоваяОбработка = ОбработкаЭлемента;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяОбработка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураРасшифровки = Новый Структура("СсылкаНаВнешнююОбработку, НомерСтроки, ДополнительныеПараметрыОбработки", ВыборкаСсылок.Ссылка, Выборка.НомерСтроки, Выборка.ДополнительныеПараметрыОбработки.Получить());
			
			// Проверим, удовлетворяет ли подключаемый отчет указанным в нем условиям
			НастройкиПостроителя = Выборка.НастройкиПостроителяДляОтбора.Получить();
			Если ТипЗнч(НастройкиПостроителя) = Тип("НастройкиПостроителяОтчета") Тогда
				ПостроительОтчета = ИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицыОбъекта, МетаданныеОбъекта.Синоним);
				ПостроительОтчета.Параметры.Вставить("Ссылка", СсылкаОбъекта);
				ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
				ПостроительОтчета.Выполнить();
				Если ПостроительОтчета.Результат.Пустой() Тогда
					Продолжить;
				КонецЕсли;
				Подсказка = "Отбор";
			Иначе
				Подсказка = "";
			КонецЕсли;
			
			
			// Теперь проверим, надо ли заменять существующую печ.форму или нужно добавить новую
			Если ЗначениеЗаполнено(Выборка.ЗаменяемаяПечатнаяФорма) Тогда
				
				Подсказка = "Печатная форма заменена подключаемой" + Подсказка;
				
				СтрокаДерева = СтрокиДерева.Найти(Выборка.ЗаменяемаяПечатнаяФорма, "Имя");
				
				Если СтрокаДерева = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				//ПодменятьВстроеннуюФорму = Ложь;
				СтрокаДерева.Расшифровка = СтруктураРасшифровки;
				СтрокаДерева.Подсказка = Подсказка;
				
			КонецЕсли; 
			
			// Только тут будем добавлять новую печ. форму в дополнение списка
			Если Не БылРазделитель Тогда
				ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Разделитель);
				БылРазделитель = Истина;
			КонецЕсли;
			
			Суффикс = ?(ПорядковыйНомер = 0 ,"" , "("+ПорядковыйНомер+")");
			ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Действие, Выборка.Наименование + Суффикс, Действие ,СтруктураРасшифровки,);
			
		КонецЦикла;
	
	КонецЦикла; 
	
	
КонецПроцедуры

// Процедура добавляет в дерево кнопок макетов встроенные печатные формы
//
Процедура ДобавитьВДеревоМакетовВстроенныеФормы(ДеревоКнопок, ВнутренниеПечатныеФормы, Действие)

	Для каждого КлючИЗначение Из ВнутренниеПечатныеФормы Цикл
		Если КлючИЗначение.Значение = Неопределено Тогда
			
			ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, , ТипКнопкиКоманднойПанели.Разделитель);
			
		Иначе
			
			ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, КлючИЗначение.Ключ, ТипКнопкиКоманднойПанели.Действие, КлючИЗначение.Значение, Действие);
			
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры

// Печатает документ по умолчанию
//
//
Функция НапечататьДокументПоУмолчанию(Объект, НаПринтер = Ложь) Экспорт
	
	Попытка
		
		СтруктураВнутреннихПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм()
		
	Исключение
		
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
		
	КонецПопытки;
	
	ДеревоМакетов = ПолучитьДеревоМакетовПечати(Объект, СтруктураВнутреннихПечатныхФорм);
	
	ТекстКнопки = ВосстановитьЗначение(Объект.Метаданные().Имя + "МакетПечати");
	СтрокаПоУмолчанию = ДеревоМакетов.Строки.Найти(ТекстКнопки,"Текст");
	
	Если СтрокаПоУмолчанию = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	Если ТипЗнч(СтрокаПоУмолчанию.Расшифровка) = Тип("ДвоичныеДанные") Тогда
		
		ТабДокумент = НапечататьВнешнююФорму(Объект.Ссылка, СтрокаПоУмолчанию.Расшифровка);
		НапечататьДокумент(ТабДокумент, , НаПринтер, СформироватьЗаголовокДокумента(Объект));
		
	Иначе
		
		Объект.Печать(СтрокаПоУмолчанию.Имя, , НаПринтер);
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции // ()

// Печатает документ полученный по нажатию кнопки в форме списка
//
// Параметры
//  Документ - документ,который нужно отпечатать
//
Процедура НапечататьДокументИзФормыСписка(Объект) Экспорт
	
	Если Объект = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли Не НапечататьДокументПоУмолчанию(Объект) Тогда
		
		Предупреждение("Печать по умолчанию не определена!");
		
	КонецЕсли;

КонецПроцедуры // НапечататьДокументИзФормыСписка()

// Функция формирует представление суммы прописью в указанной валюте
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт

	Если Валюта.ПараметрыПрописиНаРусском = "" Тогда
		Возврат ФормированиеПечатныхФорм.ФорматСумм(Сумма);
	Иначе
		Возврат ЧислоПрописью(Сумма, "L=ru_RU", Валюта.ПараметрыПрописиНаРусском);
	КонецЕсли;

КонецФункции // СформироватьСуммуПрописью()

// Функция формирует представление заголовка документа
//
// Возвращаемое значение:
//  Строка - представление номера документа
//
Функция СформироватьЗаголовокДокумента(ДокументОбъект, НазваниеДокумента = "") Экспорт

	Возврат НазваниеДокумента + " № " + ПолучитьНомерНаПечать(ДокументОбъект)
	                          + " от " + Формат(ДокументОбъект.Дата, "ДФ='дд ММММ гггг'");

КонецФункции // СформироватьЗаголовокДокумента()

// Выводит на печать подготовленный макет 
//
// Параметры:
//  ПечДокумент           - ТабличыйДокумент, макет на печать,
//  КоличествоЭкземпляров - Число, количество экземпляров на печать,
//  НаПринтер             - Булево, Если истина, то выводим сразу на принтер.
//  Заголовок             - Заголовок окна табличного документа
//
Функция НапечататьДокумент(ПечДокумент, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Заголовок = "") Экспорт

	Если ПечДокумент = Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;

	// Получить необходимое количество копий
	Если КоличествоЭкземпляров < 1 Тогда
		ПечДокумент.КоличествоЭкземпляров = 1;
	Иначе
		ПечДокумент.КоличествоЭкземпляров = КоличествоЭкземпляров;
	КонецЕсли;

	Если НаПринтер Тогда

		ПечДокумент.Напечатать();
		
		Возврат Неопределено;
		
	Иначе

		// Отобразить печатный документ на экране
		ФормаПечати = ПолучитьОбщуюФорму("ПечатьДокументов",, ПечДокумент);
		ФормаПечати.ПечатныйДокумент = ПечДокумент;
		ФормаПечати.Заголовок        = Заголовок;
		ФормаПечати.Защита           = УправлениеПользователями.ЗащитаТаблиц();
		ФормаПечати.Открыть();

		Возврат ФормаПечати;
		
	КонецЕсли;
	
КонецФункции // НапечататьДокумент()

// Печатает движения документа
//
// Параметры:
//  ДокументСсылка - ссылка на документ, движения которого печатаем
//
Процедура НапечататьДвиженияДокумента(ДокументСсылка) Экспорт
	
	Форма = Отчеты.ДвиженияДокумента.ПолучитьФорму(,,Новый УникальныйИдентификатор);
	Форма.Открыть();
	Форма.Документ = ДокументСсылка;
	Форма.СформироватьИВывестиОтчет();

КонецПроцедуры // НапечататьДвиженияДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ИСТОРИЕЙ ВВОДА ЗНАЧЕНИЙ

Функция ПолучитьСписокИсторииВвода(Путь) Экспорт

	СтрокаИстории = ВосстановитьЗначение(Путь);

	Если СтрокаИстории = Неопределено Тогда
		Возврат Новый СписокЗначений();
	КонецЕсли;
	
	СохранятьСписокИстории = Ложь;

	СписокИстории = ЗначениеИзСтрокиВнутр(СтрокаИстории);
	ТипСписокЗначений = Тип("СписокЗначений");
	ТипЗначенияЭлементов = Неопределено;

	Если ТипЗнч(СписокИстории) = Тип("СписокЗначений") Тогда
		
		КолвоЭлементовКоллекции = СписокИстории.Количество(); 
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
		     ЭлементСписка = СписокИстории[КолвоЭлементовКоллекции - ОбратныйИндекс];
			 Если ТипЗнч(ЭлементСписка.Значение) <> Тип("Строка") Тогда
				СписокИстории.Удалить(ЭлементСписка);
				СохранятьСписокИстории = Истина;
				Продолжить;
			КонецЕсли;
			ЗначениеЭлементаСписка = ЗначениеИзСтрокиВнутр(ЭлементСписка.Значение);
			Если ТипЗнч(ЗначениеЭлементаСписка) = ТипСписокЗначений Тогда												
				ЗначениеЭлементаСписка = ЗначениеЭлементаСписка[0].Значение;
				Если ТипЗнч(ЗначениеЭлементаСписка) = ТипСписокЗначений Тогда
					СписокИстории.Удалить(ЭлементСписка);
					СохранятьСписокИстории = Истина;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ЭлементСписка.Значение = ЗначениеЭлементаСписка;
			
			Если ТипЗначенияЭлементов = Неопределено Тогда
				// Тип значения определяет первый элемент списка
				ТипЗначенияЭлементов = ТипЗнч(ЭлементСписка.Значение);
			КонецЕсли;			
			
		КонецЦикла;
		
		Если ТипЗначенияЭлементов <> Тип("Строка") Тогда
			ОпределитьПредставлениеЭлементовСписка(ТипЗначенияЭлементов, СписокИстории, СохранятьСписокИстории);
		КонецЕсли;
		
		//Если СохранятьСписокИстории Тогда
		//	СохранитьЗначение(Путь, ЗначениеВСтрокуВнутр(СписокИстории));
		//КонецЕсли;			
			
		Возврат СписокИстории;

	Иначе
		Возврат Новый СписокЗначений();

	КонецЕсли;

КонецФункции // ПолучитьСписокИсторииВвода()

Процедура ОпределитьПредставлениеЭлементовСписка(ТипЗначенияЭлементов, СписокИстории, СохранятьСписокИстории)
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(ТипЗначенияЭлементов);
	Если МетаданныеТипа = Неопределено
		 ИЛИ НЕ(Метаданные.Справочники.Содержит(МетаданныеТипа) 
		 		ИЛИ Метаданные.Документы.Содержит(МетаданныеТипа)
		 		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа)) Тогда
		СписокИстории.Очистить();
		Возврат;
	КонецЕсли;	
	
	ИмяТаблицы = МетаданныеТипа.ПолноеИмя();
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Ссылка КАК Ссылка, 
	|	ПРЕДСТАВЛЕНИЕ(Ссылка) КАК Представление 
	|ИЗ " + ИмяТаблицы + " ГДЕ Ссылка В (&СписокЗначений)";
	
	Запрос.УстановитьПараметр("СписокЗначений", СписокИстории);
	Выборка = Запрос.Выполнить().Выбрать();
	
	КолвоЭлементовКоллекции = СписокИстории.Количество(); 
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
		ЭлементСписка = СписокИстории[КолвоЭлементовКоллекции - ОбратныйИндекс];
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(ЭлементСписка.Значение, "Ссылка") Тогда
			ЭлементСписка.Представление = Выборка.Представление;
		Иначе
			СписокИстории.Удалить(ЭлементСписка);
			СохранятьСписокИстории = Истина;
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры

// Функция по для переданной строке пути возвращает список заполненных значений
//
// Параметры
//  Путь - Строка .с указанием объекта метаданных и поля ввода 
// сокращением
//
// Возвращаемые значения
//  Возвращается список значений с историей ввода в это поле
//
Функция ПолучитьСписокИсторииВводаСтарая(Путь) Экспорт

	СтрокаИстории = ВосстановитьЗначение(Путь);

	Если СтрокаИстории = Неопределено Тогда
		Возврат Новый СписокЗначений();
	КонецЕсли;

	СписокИстории = ЗначениеИзСтрокиВнутр(СтрокаИстории);

	Если ТипЗнч(СписокИстории) = Тип("СписокЗначений") Тогда
		Для каждого ЭлементСписка из СписокИстории Цикл
			Если ТипЗнч(ЭлементСписка.Значение) <> Тип("Строка") Тогда
				СписокИстории.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;

		Для каждого ЭлементСписка из СписокИстории Цикл
			Если ТипЗнч(ЗначениеИзСтрокиВнутр(ЭлементСписка.Значение)) <> Тип("Строка") Тогда
				ЭлементСписка.Значение = ЗначениеИзСтрокиВнутр(ЭлементСписка.Значение);
				ЭлементСписка.Представление = Строка(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;

		Возврат СписокИстории;

	Иначе
		Возврат Новый СписокЗначений();

	КонецЕсли;

КонецФункции // ПолучитьСписокИсторииВводаСтарая()

// Процедура по для переданной строке пути и строковому представлению //
//
// Параметры
//  Название - Строка .для которой определяется необходимость дополнения 
// сокращением
//  Уровень - уровень, для которго необходимо составить список сокращений
//
Процедура ДополнитьСписокИсторииВвода(Путь, Знач Значение) Экспорт

	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;

	СтрокаИстории = ВосстановитьЗначение(Путь);

	Если СтрокаИстории = Неопределено Тогда
		СписокИстории = Новый СписокЗначений();
	Иначе
		СписокИстории = ЗначениеИзСтрокиВнутр(СтрокаИстории);
	КонецЕсли;

	Если ТипЗнч(СписокИстории) <> Тип("СписокЗначений") Тогда
		СписокИстории = Новый СписокЗначений();
	КонецЕсли;

	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Значение = ЗначениеВСтрокуВнутр(Значение);
	КонецЕсли;

	НайденныйЭлемент = СписокИстории.НайтиПоЗначению(Значение);
	Пока НайденныйЭлемент <> Неопределено Цикл
		 СписокИстории.Удалить(НайденныйЭлемент);
		 НайденныйЭлемент = СписокИстории.НайтиПоЗначению(Значение);
	КонецЦикла;

	СписокИстории.Вставить(0, Значение);

	Пока СписокИстории.Количество() > 5 Цикл
		СписокИстории.Удалить(5);
	КонецЦикла;

	СохранитьЗначение(Путь, ЗначениеВСтрокуВнутр(СписокИстории));

КонецПроцедуры // ДополнитьСписокИсторииВвода()

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает видимость реквизитов в зависимости от типа учета
//
//		Параметры:
//
//
Процедура ВидимостьРеквизитовПоТипуУчета(ДокументОбъект, ФормаДокумента, Знач РеквизитыУпрУчета, Знач РеквизитыБухУчета, Знач РеквизитыНалУчета = "") Экспорт

	СтрРеквУпр = СтрЗаменить(РеквизитыУпрУчета, " ", "");
	СтрРеквУпр = СтрЗаменить(СтрРеквУпр, Символы.ПС,  "");
	СтрРеквУпр = СтрЗаменить(СтрРеквУпр, Символы.Таб, "");
	
	Пока Не ПустаяСтрока(СтрРеквУпр) Цикл
		
		Поз = Найти(СтрРеквУпр, ",");
		Если Поз = 0 Тогда
			ИмяРекв    = СтрРеквУпр;
			СтрРеквУпр = "";
		Иначе
			ИмяРекв    = Лев (СтрРеквУпр, Поз - 1);
			СтрРеквУпр = Сред(СтрРеквУпр, Поз + 1);
		КонецЕсли;
		Если ПустаяСтрока(ИмяРекв) Тогда
			Продолжить;
		КонецЕсли;
		
		Поз = Найти(ИмяРекв, ".");
		Если Поз = 0 Тогда
			ФормаДокумента.ЭлементыФормы[ИмяРекв].Видимость = ДокументОбъект.ОтражатьВУправленческомУчете;
		Иначе
			ФормаДокумента.ЭлементыФормы[Лев(ИмяРекв, Поз - 1)].Колонки[Сред(ИмяРекв, Поз + 1)].Видимость = ДокументОбъект.ОтражатьВУправленческомУчете;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрРеквБух = СтрЗаменить(РеквизитыБухУчета, " ", "");
	СтрРеквБух = СтрЗаменить(СтрРеквБух, Символы.ПС,  "");
	СтрРеквБух = СтрЗаменить(СтрРеквБух, Символы.Таб, "");
	Пока Не ПустаяСтрока(СтрРеквБух) Цикл
		
		Поз = Найти(СтрРеквБух, ",");
		Если Поз = 0 Тогда
			ИмяРекв    = СтрРеквБух;
			СтрРеквБух = "";
		Иначе
			ИмяРекв    = Лев (СтрРеквБух, Поз - 1);
			СтрРеквБух = Сред(СтрРеквБух, Поз + 1);
		КонецЕсли;
		Если ПустаяСтрока(ИмяРекв) Тогда
			Продолжить;
		КонецЕсли;
		
		Поз = Найти(ИмяРекв, ".");
		Если Поз = 0 Тогда
			ФормаДокумента.ЭлементыФормы[ИмяРекв].Видимость = ДокументОбъект.ОтражатьВБухгалтерскомУчете;
		Иначе
			ФормаДокумента.ЭлементыФормы[Лев(ИмяРекв, Поз - 1)].Колонки[Сред(ИмяРекв, Поз + 1)].Видимость = ДокументОбъект.ОтражатьВБухгалтерскомУчете;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрРеквНал = СтрЗаменить(РеквизитыНалУчета, " ", "");
	СтрРеквНал = СтрЗаменить(СтрРеквНал, Символы.ПС,  "");
	СтрРеквНал = СтрЗаменить(СтрРеквНал, Символы.Таб, "");
	Пока Не ПустаяСтрока(СтрРеквНал) Цикл
		
		Поз = Найти(СтрРеквНал, ",");
		Если Поз = 0 Тогда
			ИмяРекв    = СтрРеквНал;
			СтрРеквНал = "";
		Иначе
			ИмяРекв    = Лев (СтрРеквНал, Поз - 1);
			СтрРеквНал = Сред(СтрРеквНал, Поз + 1);
		КонецЕсли;
		Если ПустаяСтрока(ИмяРекв) Тогда
			Продолжить;
		КонецЕсли;
		
		Поз = Найти(ИмяРекв, ".");
		Если Поз = 0 Тогда
			ФормаДокумента.ЭлементыФормы[ИмяРекв].Видимость = ДокументОбъект.ОтражатьВНалоговомУчете;
		Иначе
			ФормаДокумента.ЭлементыФормы[Лев(ИмяРекв, Поз - 1)].Колонки[Сред(ИмяРекв, Поз + 1)].Видимость = ДокументОбъект.ОтражатьВНалоговомУчете;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВидимостьРеквизитовПоТипуУчета()

Функция ВернутьШестнадцатиричноеПредставлениеЦвета(ВыбранныйЦвет) Экспорт
	
	Если ТипЗнч(ВыбранныйЦвет) <> Тип("Цвет") Тогда
		Возврат "";
	КонецЕсли;
	
	Красный	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Красный);
	Зеленый	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Зеленый);
	Синий	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Синий);
	
	Возврат "#" + Красный + Зеленый + Синий;
	
КонецФункции

// Функция определеяте, по статье затрат, относится способ отражения к ЕНВД или нет
//
// Параметры
//  <СпособОтраженияВБухучете>  – <СправочникСсылка.СпособыОтраженияЗарплатыВРеглУчете> – способ отражения который проверяем
// Возвращаемое значение:
//   Истина   – когда статья затрат относится к ЕНВД
//   Ложь     - когда статья затрат не относится у ЕНВД
//   Неопределено - когда способ отражения не содержит субконто - Статьи затрат
//   NULL     - когда у способа отражения пустой счет Дт или Кт
//
Функция СтатьяЗатратСпособаОтраженияОтноситсяКЕНВД(СпособОтраженияВБухучете) Экспорт

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА NULL
	|		КОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫБОР
	|					КОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт1.ОтнесениеРасходовКДеятельностиЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫБОР
	|					КОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт2.ОтнесениеРасходовКДеятельностиЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫБОР
	|					КОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт3.ОтнесениеРасходовКДеятельностиЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЭтоЕНВД
	|ИЗ
	|	Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК СпособыОтраженияЗарплатыВРеглУчете
	|ГДЕ
	|	СпособыОтраженияЗарплатыВРеглУчете.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",СпособОтраженияВБухучете);
	Запрос.Текст = ТекстЗапроса;
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	ВыборкаИзЗапроса.Следующий();
	
	Возврат ВыборкаИзЗапроса.ЭтоЕНВД;
	

КонецФункции // ПроверитьСтатьюЗатаратСпособаОтражения()

Функция ПолучитьПутьККартинкеДляHTML(Картинка, ПолеHTMLДокумента) Экспорт
	
	МетаУрл	= ПолеHTMLДокумента.ПолучитьURL(Метаданные);
	МетаУрл	= Лев(МетаУрл,Найти(МетаУрл,"mdobject")-1);
	КартИД	= ЗначениеВСтрокуВнутр(Картинка);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Лев(КартИД,НАйти(КартИД,"}")-1);
	
	Если Лев(КартИД,1) = "-" Тогда
		КартИд	= "n"+КартИД;
	Иначе
		КартИД	= Сред(КартИД,3);
	КонецЕсли;
	
	Возврат МетаУрл+"mdpicture/id" + КартИД;
	
КонецФункции // КартинкаУрл()

// Процедура управляет видимостью показателей в табличном поле
// Парметры:
//		ТабличноеПоле - Табличное поле, в котором необходимо установить видимость показателей
//		ОформленияСтрокТабличногоПоля - оформления строк табличного поля
//		СведенияОВидахРасчета - соответствие, в котором хранятся сведения о виде расчета
Процедура ОбработатьОтображениеПоказателейДляРасчета(ТабличноеПоле, ОформленияСтрокТабличногоПоля, СведенияОВидахРасчета) Экспорт

	// показатели будут видны, если в табличном поле включена видимость колонки Показатели
	Колонки = ТабличноеПоле.Колонки;
	ПоказыватьПоказатели = Колонки.Показатели.Видимость;
	
	Для каждого ОформлениеСтроки Из ОформленияСтрокТабличногоПоля Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		ДанныеСтрокиВидРасчета = ДанныеСтроки.ВидРасчета;
		Если ДанныеСтрокиВидРасчета = Неопределено Тогда
			ДанныеСтрокиВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
		КонецЕсли;	
		СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтрокиВидРасчета, "ПриРасчете");
		
		Для СчПоказателей = 1 По 6 Цикл
			
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
				
				ВидимостьПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] и ПоказыватьПоказатели;
				ВидимостьНаименованияПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] и ПоказыватьПоказатели;
				
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = ВидимостьНаименованияПоказателя;
				
				// размеры показателя будут доступны только для видимых и изменяемых показателей
				Если ВидимостьПоказателя и ПоказыватьПоказатели Тогда
					
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется
					Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно
					Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически;
					
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
					
				КонецЕсли;
				
				// если отображается наименование - пропишем текст
				Если ВидимостьНаименованияПоказателя и ПоказыватьПоказатели Тогда		
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] и ПоказыватьПоказатели Тогда
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				КонецЕсли;	
				
			Иначе
				
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;
		
	КонецЦикла;	

КонецПроцедуры //ОбработатьОтображениеПоказателейДляРасчета()

// Функция подбирает из справочника организаций первую разрешенную
//
// Параметры
//  ТолькоГоловныеОрганизации  – Булево – подбор только среди головных организаций
//
// Возвращаемое значение:
//   <Справочники.Организации>   – Ссылка на организацию, или пустая ссылка
//
Функция ПодобратьОрганизацию (ТолькоГоловныеОрганизации = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Организация,
	|	Организации.ПометкаУдаления
	|ИЗ
	|	Справочник.Организации КАК Организации";
	Если ТолькоГоловныеОрганизации Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Код";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Организация;
	Иначе
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // ПодобратьОрганизацию ()


// Функция возвращает организацию, указанную для пользователя по умолчанию
// а если она пустая, то первую разрешенную
//
// Параметры
//  ТолькоГоловныеОрганизации  – Булево – вернуть головную организацию
//
// Возвращаемое значение:
//   <Справочники.Организации>   – Ссылка на организацию, или пустая ссылка
//
Функция ПолучитьОрганизацию(ТолькоГоловныеОрганизации = Ложь) Экспорт
	
	Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	Если ТолькоГоловныеОрганизации и Не Организация.Пустая() Тогда
		// получим головную организацию
		Организация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	КонецЕсли;
	//vvv
	//Если Организация.Пустая() Или Не ОбщегоНазначения.ЭтоДоступнаяОрганизация(Организация) Тогда
	Если Организация.Пустая() Или (Не ОбщегоНазначения.ЭтоДоступнаяОрганизация(Организация) И НЕ ТолькоГоловныеОрганизации) Тогда
	//	
		//для пользователя не задана организация по умолчанию, подберем первую разрешенную
		Организация = ПодобратьОрганизацию(ТолькоГоловныеОрганизации);
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции // ПолучитьОрганизацию()

// Процедура устанавливает видимость переданных страниц формы на основании прав доступа текущего пользователя
// вызывается из обработчика формы ПередОткрытием 
//
// Параметры
//		ОбъектыМетаданных - соответствие, ключ - ЭУ страница формы, значение - объекты метаданных 
//		РеквизитыФормы	  - соответствие, ключ - ЭУ страница формы, значение - реквизиты формы для изменения доступности
//
Процедура СформироватьСтраницыФормы(ОбъектыМетаданных, РеквизитыФормы) Экспорт
	
	// цикл по страницам формы
	Для каждого ЭлементСоответствия Из ОбъектыМетаданных Цикл
		
		// это элемент управления - страницы формы
		СтраницаФормы = ЭлементСоответствия.Ключ; 
		
		// Массив содержащий объекты метаданных, редактируемые на странице формы
		МассивОбъектовМетаданных = ЭлементСоответствия.Значение;
		
		ДоступенПросмотр = МассивОбъектовМетаданных <> Неопределено;
		Если ДоступенПросмотр Тогда
			
			РазрешеноРедактирование = Истина;
			
			// цикл по объектам метаданных на странице
			Для каждого ОбъектМетаданных Из МассивОбъектовМетаданных Цикл
				
				РазрешеноРедактирование = РазрешеноРедактирование и ПравоДоступа("Редактирование", ОбъектМетаданных);
				ДоступенПросмотр 		= ДоступенПросмотр 		  и ПравоДоступа("Просмотр", ОбъектМетаданных);
				
				Если Не РазрешеноРедактирование и Не ДоступенПросмотр Тогда
					//на странице есть объект, по которому у пользователя нет прав
					//не проверяем другие объекты этой страницы
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтраницаФормы.Видимость = ДоступенПросмотр;
		Если ДоступенПросмотр и Не РазрешеноРедактирование Тогда
			// если доступен только просмотр страницы, запретим редактирование реквизитов этой страницы
			МассивЭлементовУправления = РеквизитыФормы.Получить(СтраницаФормы);
			Для каждого Элемент Из МассивЭлементовУправления Цикл
				Если ТипЗнч(Элемент) = Тип("ПолеВвода") или ТипЗнч(Элемент) = Тип("ТабличноеПоле") Тогда
					Элемент.ТолькоПросмотр = Истина;
				ИначеЕсли ТипЗнч(Элемент) = Тип("Флажок") или ТипЗнч(Элемент) = Тип("Переключатель")
					или ТипЗнч(Элемент) = Тип("Надпись") Тогда
					Элемент.Доступность = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьСтраницыФормы()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОБРАБОТКИ МЕНЮ

// Процедура инициирует диалог выбора времени.
//
// Параметры
//  Форма - Форма, в которой производится выбор
//  ДатаВремен - дата для выбора времени
//  ТекЭлемент - элемент формы
//  ПолныйГод - булево, показывать год 4-мя цифрами или 2-мя
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ВыбратьВремяДня(Форма, ДатаВремен, ТекЭлемент, Пользователь, ПоГрафику = Истина, ПолныйГод = Истина, ВыбиратьТолькоВремя = Ложь) Экспорт

	ДлинаЧаса = 3600;
	
	Если ПоГрафику Тогда
		СтруктураРабочегоВремени = ОпределитьНачалоИОкончаниеРабочегоДняПользователя(Пользователь, ДатаВремен);
		
		НачалоРабочегоДняКонстанта    = СтруктураРабочегоВремени.ДатаНачала;
		ОкончаниеРабочегоДняКонстанта = СтруктураРабочегоВремени.ДатаОкончания;
	Иначе
		НачалоРабочегоДняКонстанта      = '00010101000000';
		ОкончаниеРабочегоДняКонстанта   = '00010101235959';
	КонецЕсли;
		
	СписокВремен = Новый СписокЗначений;
	НачалоРабочегоДня = НачалоЧаса(НачалоДня(ДатаВремен) + Час(НачалоРабочегоДняКонстанта) * ДлинаЧаса + Минута(НачалоРабочегоДняКонстанта)*60);
	ОкончаниеРабочегоДня = КонецЧаса(НачалоДня(ДатаВремен) + Час(ОкончаниеРабочегоДняКонстанта) * ДлинаЧаса + Минута(ОкончаниеРабочегоДняКонстанта)*60) - ДлинаЧаса;

	а = 0;
	ВремяСписка = НачалоРабочегоДня;
	Пока НачалоЧаса(ВремяСписка) <= НачалоЧаса(ОкончаниеРабочегоДня) Цикл
		ВремяСписка = НачалоРабочегоДня + а * ДлинаЧаса / 2; // по полчаса
		Если НЕ ЗначениеЗаполнено(ВремяСписка) И ВыбиратьТолькоВремя Тогда
			СписокВремен.Добавить(ВремяСписка, "00:00");
		Иначе
			Если ВыбиратьТолькоВремя Тогда
				СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ=ЧЧ:мм"));
			Иначе
				СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гг" + ?(ПолныйГод,"гг","") + " ЧЧ:мм'"));
			КонецЕсли;
		КонецЕсли;
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(ДатаВремен);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = Форма.ВыбратьИзСписка(СписокВремен, ТекЭлемент);
	Иначе
		ВыбранноеВремя = Форма.ВыбратьИзСписка(СписокВремен, ТекЭлемент, НачальноеЗначение);
	КонецЕсли; 

	Если ВыбранноеВремя <> Неопределено Тогда
		ДатаВремен = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры // ВыбратьВремя()

// Процедура выводить форму структуры подчиненности документа
Процедура ПоказатьСтруктуруПодчиненностиДокумента(ДокументСсылка) Экспорт
	
	ФормаСтруктурыПодчиненности = ПолучитьОбщуюФорму("ФормаСтруктурыПодчиненности");
	Если ФормаСтруктурыПодчиненности.Открыта() Тогда
		ФормаСтруктурыПодчиненности.Закрыть();
	КонецЕсли;
	ФормаСтруктурыПодчиненности.ДокументСсылка = ДокументСсылка;
	ФормаСтруктурыПодчиненности.Открыть();
	 
КонецПроцедуры

// Вызывается в обработчике события "Начало выбора" при выборе счета.
// используется для яильтрации по признаку забалансовый
//
Процедура ВыборСчета(Элемент, СтандартнаяОбработка, Флаг) Экспорт

	СтандартнаяОбработка = Ложь;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Флаг", Флаг);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Забалансовый = &Флаг";
	ВыборкаСчетов = Запрос.Выполнить().Выбрать();
	СписокСчетов  = Новый СписокЗначений;
	Пока ВыборкаСчетов.Следующий() Цикл
		СписокСчетов.Добавить(ВыборкаСчетов.Счет);
	КонецЦикла;

	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора("ФормаВыбора", Элемент,);

	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Значение      = СписокСчетов;

	ФормаВыбора.ЭлементыФормы.Список.НастройкаОтбора.Ссылка.Доступность = Ложь;

	ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;

	ФормаВыбора.Открыть();

Конецпроцедуры // ВыборСчета

// Процедура предназначена для заполнения реквизитов формы,
// вызывается в обработчиках событий "ПриОткрытии" в модулях форм обработок.
//
// Параметры:
//  ЗаполняемаяФорма  - форма, реквизиты которой следует заполнить,
//  ТекПользователь - ссылка на справочник, определяет текущего пользователя  
//
Процедура ЗаполнитьРеквизитыФормы(ЗаполняемаяФорма, ТекПользователь) Экспорт
	
	Элементы	=	ЗаполняемаяФорма.ЭлементыФормы;
	Для каждого Элемент из	Элементы	Цикл
		
		Если	Элемент.Имя	=	"Организация"	тогда
			Элемент.Значение	=	УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
		КонецЕсли;
		
	КонецЦикла;
	//Если	Элементы.Найти()	<>	Неопределено
	//КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыФормы()

// Процедура установки типа и доступности субконто в зависимости от  выбранного счета
//
//     Параметры:
//          Счет - выбранный счет
//          Форма - форма(или табличное поле) на которой расположены счет и субконто
//          Префикс - префекс наименования субконто. к префиксу добавляется номер субконто на счете
//                    для подписи с наименованием субконто предполагается имя
//                    вида "Надпись" + Префикс + НомерСубконто
//                    в случае если форма - это таб.поле, то надписи не устанавливаются
//
Процедура ПриВыбореСчета(Счет, Субконто1, НадписьСубконто1, Субконто2, НадписьСубконто2, Субконто3, НадписьСубконто3, ПолеСчет = НЕОПРЕДЕЛЕНО, ТолькоПросмотр = ЛОЖЬ) Экспорт
	
	ЭлементыСубконто = Новый Структура("Субконто1,НадписьСубконто1,Субконто2,НадписьСубконто2,Субконто3,НадписьСубконто3", Субконто1, НадписьСубконто1, Субконто2, НадписьСубконто2, Субконто3, НадписьСубконто3);
	
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		
		ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
		
		ЭлементыСубконто["Субконто" + Сч].Видимость = НЕ ТолькоПросмотр;
		ЭлементыСубконто["Субконто" + Сч].ВыбиратьТип = Ложь;
		
		// Чтобы не устанавливался флаг модифицированности при открытии формы
		Если ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч].Значение) <> ЭлементыСубконто["Субконто" + Сч].Значение Тогда
			ЭлементыСубконто["Субконто" + Сч].Значение = ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч].Значение);
		КонецЕсли;

		ЭлементыСубконто["НадписьСубконто" + Сч].Заголовок = Счет.ВидыСубконто[Сч - 1].ВидСубконто.Наименование + ":";
		ЭлементыСубконто["НадписьСубконто" + Сч].Видимость = НЕ ТолькоПросмотр;
		
	КонецЦикла;
	
	Для Сч = (ЧислоАктивныхСубконто + 1) По 3 Цикл
		
		Если Не ЭлементыСубконто["Субконто" + Сч].Значение = Неопределено Тогда
			ЭлементыСубконто["Субконто" + Сч].Значение = Неопределено;
		КонецЕсли;
		
		ЭлементыСубконто["Субконто" + Сч].Видимость = Ложь;
		ЭлементыСубконто["НадписьСубконто" + Сч].Видимость = Ложь;
		
	КонецЦикла;
	
	Если ПолеСчет <> НЕОПРЕДЕЛЕНО Тогда
		ПолеСчет.ТолькоПросмотр = ТолькоПросмотр;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореСчета()

// Процедура предназначена для управления видимостью элементов формы,
// вызывается в обработчиках событий "ПриОткрытии" форм, при изменении реквизита Организация
//
// Параметры:
//  ЭлементыФормы  - массив с коллекцией ЭУ формы, видимость которых необходимо определить
//  УчетнаяПолитикаПоПерсоналу - структура, содержит данные учетной политики    
//    предприятия или конкретной организации
//
Процедура УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(ЭлементыФормы,УчетнаяПолитикаПоПерсоналу,Организация = Неопределено) Экспорт
	
	ИспользуютсяНачисленияВВалюте			= Ложь;
	ПоказыватьТабельныеНомераВДокументах	= Ложь;
	ПоддерживатьНесколькоСхемМотивации		= Ложь;

	
	Если Организация = Неопределено Тогда
		Если УчетнаяПолитикаПоПерсоналу <> Неопределено Тогда
			Если Не УчетнаяПолитикаПоПерсоналу.Свойство("ИспользуютсяНачисленияВВалюте",ИспользуютсяНачисленияВВалюте) Тогда
				ИспользуютсяНачисленияВВалюте = Ложь;
			КонецЕсли;
			Если Не УчетнаяПолитикаПоПерсоналу.Свойство("ПоказыватьТабельныеНомераВДокументах",ПоказыватьТабельныеНомераВДокументах) Тогда
				ПоказыватьТабельныеНомераВДокументах = Ложь;
			КонецЕсли;
			Если Не УчетнаяПолитикаПоПерсоналу.Свойство("ПоддерживатьНесколькоСхемМотивации",ПоддерживатьНесколькоСхемМотивации) Тогда
				ПоддерживатьНесколькоСхемМотивации = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ИспользуютсяНачисленияВВалюте			= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналу, Организация, "ИспользуютсяНачисленияВВалюте");
		ПоказыватьТабельныеНомераВДокументах	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналу, Организация, "ПоказыватьТабельныеНомераВДокументах");
	
	КонецЕсли;
	
		
	ТипКолонкаТабличногоПоля = Тип("КолонкаТабличногоПоля");
	ТипПолеВвода = Тип("ПолеВвода");
	ТипНадпись = Тип("Надпись");
	ТипПанель  = Тип("Панель");
	
	Для каждого Элемент из ЭлементыФормы Цикл
		Если ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "ТабельныйНомерСтрока" Тогда
			Элемент.Видимость			= ПоказыватьТабельныеНомераВДокументах;
			Элемент.ИзменятьВидимость	= Ложь;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта1" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта2" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта3" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;	
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта4" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта5" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта6" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "ВалютаЗавершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта1Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта2Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта3Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;	
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта4Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта5Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта6Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;	
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "ВидСхемыМотивации" Тогда
			Элемент.Видимость			= Элемент.Видимость И ПоддерживатьНесколькоСхемМотивации;
			Элемент.ИзменятьВидимость	= ПоддерживатьНесколькоСхемМотивации;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "ПоВременнойСхемеМотивации" Тогда
			Элемент.Видимость			= Элемент.Видимость И ПоддерживатьНесколькоСхемМотивации;
			Элемент.ИзменятьВидимость	= ПоддерживатьНесколькоСхемМотивации;
		ИначеЕсли ТипЗнч(Элемент) = ТипПолеВвода и Элемент.Имя = "ВалютаДокумента" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "НадписьВалютаДокумента" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипПолеВвода и Элемент.Имя = "ВалютаТарифнойСтавки" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "НадписьВалютаТарифнойСтавки" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипПолеВвода и Элемент.Имя = "ВалютаТарифнойСтавки1" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "НадписьВалютаТарифнойСтавки1" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипПолеВвода и Элемент.Имя = "ВидСхемыМотивации" Тогда
			Элемент.Видимость = ПоддерживатьНесколькоСхемМотивации;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "НадписьВидСхемыМотивации" Тогда
			Элемент.Видимость = ПоддерживатьНесколькоСхемМотивации;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "ПоВременнойСхемеМотивации" Тогда
			Элемент.Видимость = ПоддерживатьНесколькоСхемМотивации;
		ИначеЕсли ТипЗнч(Элемент) = ТипПанель и Элемент.Имя = "ПанельСхемыМотивации" Тогда
			СверткаПанелиМотивации = ?(ПоддерживатьНесколькоСхемМотивации, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);	
			Элемент.Свертка = СверткаПанелиМотивации;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу()

Процедура ОтобразитьПоляПоказателейСхемМотивации(Форма) Экспорт
	
	СпособРасчета = Форма.СпособРасчета;
	
	СворачиватьПанельФормулы = Не ЗначениеЗаполнено(СпособРасчета) Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету;
	Форма.ЭлементыФормы.ПанельПредставлениеФормулы.Свертка = ?(СворачиватьПанельФормулы, РежимСверткиЭлементаУправления.Верх, РежимСверткиЭлементаУправления.Нет);
	
КонецПроцедуры //ЭтаФорма

// Процедура предназначена для преобразования номера документа.
//
// Параметры:
//  Документ - (ДокументСсылка), документ, чей номер надо получить для печати.
//
// Возвращаемое значение.
//  Строка - номер документа для печати
//
Функция ПолучитьНомерНаПечать(Документ) Экспорт

	Если Документ = Неопределено Тогда 
		Возврат 0;
	КонецЕсли;

	Номер = СокрЛП(Документ.Номер);

	Префикс = "";
	Если ТипЗнч(Документ) = Тип("ВыборкаИзРезультатаЗапроса") Тогда

		Если ЗначениеЗаполнено(Документ.Организация) Тогда
			Префикс = СокрЛП(Документ.Организация.Префикс);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Документ) = Тип("Структура") Тогда

		Префикс     = СокрЛП(Документ.Организация.Префикс);

	Иначе

		МетаданныеДокумента = Документ.Метаданные();

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда

			Если ЗначениеЗаполнено(Документ.Организация) Тогда
				Префикс = СокрЛП(Документ.Организация.Префикс);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	// удаление префикса из номера документа
	Если Найти(Номер, Префикс)=1 Тогда 
		Номер = Сред(Номер, СтрДлина(Префикс)+1);
	КонецЕсли;

	// так же, может остаться "минус" впереди
	Если Лев(Номер, 1) = "-" Тогда
		Номер = Сред(Номер, 2);
	КонецЕсли;

	// удаление ведущих нулей
	Пока Лев(Номер, 1)="0" Цикл
		Номер=Сред(Номер, 2);
	КонецЦикла;

	Возврат Номер;

КонецФункции // ПолучитьНомерНаПечать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ В ФОРМЕ

// Функция определяет начало и окончание рабочего дня пользователя, по его графику работы
//
// Параметры
//  Пользователь - СправочникСсылка.Пользователи, пользователь по которому определяются
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ОпределитьНачалоИОкончаниеРабочегоДняПользователя(Пользователь, РабочаяДата) Экспорт

	ДатаНачала      = '00010101000000';
	ДатаОкончания   = '00010101235959';
	НайденныйГрафик = Неопределено;
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
	
		Если НЕ Пользователь.ФизЛицо.Пустая() Тогда
		
			НайденныйГрафик = РегистрыСведений.Работники.ПолучитьПоследнее(РабочаяДата, Новый Структура("ФизЛицо", Пользователь.ФизЛицо)).ГрафикРаботы;
			
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(НайденныйГрафик) Тогда
		
			НайденныйГрафик = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ГрафикРаботы");
		
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НайденныйГрафик) И ТипЗнч(НайденныйГрафик) = Тип("СправочникСсылка.ГрафикиРаботы") Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ГрафикРаботы", НайденныйГрафик);
		Запрос.УстановитьПараметр("Дата", НачалоДня(РабочаяДата));
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МИНИМУМ(ВремяРаботы.ВремяНачала) КАК ВремяНачала,
			|	МАКСИМУМ(ВремяРаботы.ВремяОкончания) КАК ВремяОкончания
			|ИЗ
			|	(ВЫБРАТЬ
			|		ГрафикиРаботыПериодыСмены.ВремяНачала КАК ВремяНачала,
			|		ГрафикиРаботыПериодыСмены.ВремяОкончания КАК ВремяОкончания
			|	ИЗ
			|		Справочник.ГрафикиРаботы.ПериодыСмены КАК ГрафикиРаботыПериодыСмены
			|	
			|	ГДЕ
			|		ГрафикиРаботыПериодыСмены.Ссылка = &ГрафикРаботы
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		СменыПериодыСмены.ВремяНачала,
			|		СменыПериодыСмены.ВремяОкончания
			|	ИЗ
			|		Справочник.ГрафикиРаботы.Смены КАК ГрафикиРаботыСмены
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Смены.ПериодыСмены КАК СменыПериодыСмены
			|			ПО ГрафикиРаботыСмены.Смена = СменыПериодыСмены.Ссылка
			|	
			|	ГДЕ
			|		ГрафикиРаботыСмены.Ссылка = &ГрафикРаботы) КАК ВремяРаботы
			|";
		
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДатаНачала = Выборка.ВремяНачала;
			Если ЗначениеЗаполнено(Выборка.ВремяОкончания) Тогда
				ДатаОкончания = Выборка.ВремяОкончания;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	СтруктураВозврата = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания);
	
	Возврат СтруктураВозврата;
	
КонецФункции // ОпределитьНачалоИОкончаниеРабочегоДняПользователя()

// Функция Определяет индекс картинки
//
// Параметры
//  ВидСобытия - ПеречислениеСсылка.ВидыСобытий
//
// Возвращаемое значение:
//  Индекс - число
//
Функция ОпределитьИндексКартинкиВидаСобытия(Объект,ТипСобытия = Неопределено) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.Событие") Тогда
		ВидСобытия = Объект.ВидСобытия;
		ТипСобытия = Объект.ТипСобытия;
	Иначе
		ВидСобытия = Объект;
	КонецЕсли;
	
	Если ТипЗнч(ВидСобытия) = Тип("ПеречислениеСсылка.ВидыСобытий") Тогда
		
		Если ВидСобытия = Перечисления.ВидыСобытий.ТелефонныйЗвонок Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 14;
			Иначе
				Возврат 9;
			КонецЕсли;
		ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 15;
			Иначе
				Возврат 10;
			КонецЕсли;
		ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 16;
			Иначе
				Возврат 11;
			КонецЕсли;
		ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ПочтовоеПисьмо Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 17;
			Иначе
				Возврат 12;
			КонецЕсли;
		Иначе
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 13;
			Иначе
				Возврат 8;
			КонецЕсли;
		КонецЕсли;
			
	Иначе
		Возврат 21;
	КонецЕсли;

КонецФункции // ОпределитьИндексКартинкиВидаСобытия()

// Функция Определяет картинку для напоминания
	//
	// Параметры
	//  Напоминание - Произвольный, объект напоминания
	//  ТипСобытия  - тип события, если не указан - определяется по напоминанию
	//
	// Возвращаемое значение:
	//  Картинка - Картинка
	//
Функция ПолучитьКартинкуНапоминания(Напоминание,ТипСобытия = Неопределено) Экспорт
	
	ИндексВозврата = ОпределитьИндексКартинкиВидаСобытия(Напоминание,ТипСобытия);
	
	Если ИндексВозврата = 15 Тогда
		Возврат БиблиотекаКартинок.ЛичнаяВстречаИсходящяя;
		
	ИначеЕсли ИндексВозврата = 10 Тогда
		Возврат БиблиотекаКартинок.ЛичнаяВстречаВходящяя;
		
	ИначеЕсли ИндексВозврата = 17 Тогда
		Возврат БиблиотекаКартинок.ПочтовоеПисьмоИсходящее;
		
	ИначеЕсли ИндексВозврата = 12 Тогда
		Возврат БиблиотекаКартинок.ПочтовоеПисьмоВходящее;
		
	ИначеЕсли ИндексВозврата = 13 Тогда
		Возврат БиблиотекаКартинок.ПрочееСобытиеИсходящее;
		
	ИначеЕсли ИндексВозврата = 8 Тогда
		Возврат БиблиотекаКартинок.ПрочееСобытиеВходящее;
		
	ИначеЕсли ИндексВозврата = 14 Тогда
		Возврат БиблиотекаКартинок.ТелефонныйЗвонокИсходящий;
		
	ИначеЕсли ИндексВозврата = 9 Тогда
		Возврат БиблиотекаКартинок.ТелефонныйЗвонокВходящий;
		
	ИначеЕсли ИндексВозврата = 16 Тогда
		Возврат БиблиотекаКартинок.ЭлектронноеПисьмоИсходящее;
		
	ИначеЕсли ИндексВозврата = 11 Тогда
		Возврат БиблиотекаКартинок.ЭлектронноеПисьмоВходящее;
		
	ИначеЕсли ИндексВозврата = 21 Тогда
		Возврат Новый Картинка;
		
	Иначе
		Возврат БиблиотекаКартинок.Важно;
		
	КонецЕсли; 
	
КонецФункции //ПолучитьКартинкуНапоминания()

// Процедура заполняет вычисляемую колонку ТЧ документа "ТабельныйНомерСтрока"
//
// Параметры
//  ТЧДокумента  – Табличное поле
//  ОформленияСтрок – Коллекция значений типа ОформлениеСтроки табличного поля ТЧДокумента
//
Процедура УстановитьЗначенияКолонкиТабельныйНомерСтрока(ТЧДокумента, ОформленияСтрок) Экспорт
	
	Если ТЧДокумента.Колонки.Найти("ТабельныйНомерСтрока") = Неопределено 
		Или Не ТЧДокумента.Колонки.ТабельныйНомерСтрока.Видимость Тогда
		Возврат;
	КонецЕсли;

	МассивСотрудников = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		МассивСотрудников.Добавить(СтрокаТабличнойЧасти.ДанныеСтроки.Сотрудник);
	КонецЦикла;

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Код КАК ТабельныйНомер,
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&парамМассивСотрудников)";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("парамМассивСотрудников", МассивСотрудников);
	
	ТабельныеНомера = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТабельныеНомера[Выборка.Сотрудник] = Выборка.ТабельныйНомер;
	КонецЦикла; 
	
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		СтрокаТабличнойЧасти.Ячейки.ТабельныйНомерСтрока.УстановитьТекст(ТабельныеНомера[СтрокаТабличнойЧасти.Ячейки.Сотрудник.Значение]);
	КонецЦикла;

КонецПроцедуры // УстановитьЗначенияКолонкиТабельныйНомерСтрока()

// Процедура заполняет вычисляемые колонки формы списка справочника СотрудникиОрганизаций
//
// Параметры
//  ТабличноеПоле   – Табличное поле
//  ОформленияСтрок – Коллекция значений типа ОформлениеСтроки табличного поля ТЧДокумента
//  ДатаСреза	 	- тип дата, дата на которую получаем данные работников организации
//
Процедура ЗаполнитьДанныеПоРаботникамОрганизации(ТабличноеПоле, ОформленияСтрок, ДатаСреза = Неопределено)Экспорт

	КолонкиТабличногоПоля = ТабличноеПоле.Колонки;
	ПоказыватьЗанимаемыхСтавок 			= КолонкиТабличногоПоля.ЗанимаемыхСтавок.Видимость;
	ПоказыватьПодразделениеОрганизации 	= КолонкиТабличногоПоля.ПодразделениеОрганизации.Видимость;
	ПоказыватьДолжность 				= КолонкиТабличногоПоля.Должность.Видимость;
	ПоказыватьГрафикРаботы 				= КолонкиТабличногоПоля.ГрафикРаботы.Видимость;
	ПоказыватьСостояние			 		= КолонкиТабличногоПоля.Состояние.Видимость;
	
	Если Не (ПоказыватьЗанимаемыхСтавок
		или ПоказыватьПодразделениеОрганизации 
		или ПоказыватьДолжность
		или ПоказыватьГрафикРаботы
		или ПоказыватьСостояние) Тогда
		
		Возврат;
	
	КонецЕсли; 
	
	МассивСотрудников = Новый Массив;
	Для Каждого СтрокаТабличногПоля Из ОформленияСтрок Цикл
		ДанныеСтроки = СтрокаТабличногПоля.ДанныеСтроки;
		Если ДанныеСтроки.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		МассивСотрудников.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
	|	ПРЕДСТАВЛЕНИЕ(РаботникиОрганизацийСрезПоследних.Сотрудник.ВидЗанятости) КАК ВидЗанятости,
	|ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &парамДатаСреза
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	| ТОГДА
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.ПериодЗавершения, ДЕНЬ, -1)
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПериодЗавершения
	|	КОНЕЦ 
	|ИНАЧЕ
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Период, ДЕНЬ, -1)
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Период
	|	КОНЕЦ 
	|КОНЕЦ КАК Период";
	Если ПоказыватьПодразделениеОрганизации Тогда
	ТекстЗапроса = ТекстЗапроса + ",
	|ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &парамДатаСреза
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения) 
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации) 
	|КОНЕЦ	КАК Подразделение"; 
	
	КонецЕсли;
	Если ПоказыватьДолжность Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	|ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &парамДатаСреза
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РаботникиОрганизацийСрезПоследних.Должность) 
	|КОНЕЦ КАК Должность";
	КонецЕсли;
	Если ПоказыватьЗанимаемыхСтавок Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	|ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &парамДатаСреза
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавокЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок 
	|КОНЕЦ КАК ЗанимаемыхСтавок";
	КонецЕсли;
	Если ПоказыватьГрафикРаботы Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	|ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &парамДатаСреза
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(РаботникиОрганизацийСрезПоследних.ГрафикРаботыЗавершения)
	|ИНАЧЕ	ПРЕДСТАВЛЕНИЕ(РаботникиОрганизацийСрезПоследних.ГрафикРаботы) 
	|КОНЕЦ КАК ГрафикРаботы";
	КонецЕсли;
	Если ПоказыватьСостояние Тогда
	ТекстЗапроса = ТекстЗапроса + ",
	|ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &парамДатаСреза
	|			И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|ТОГДА 
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения = &Прием
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол = &Женский
	|						ТОГДА ""Принята ""
	|					ИНАЧЕ ""Принят ""
	|				КОНЕЦ
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол = &Женский
	|						ТОГДА ""Уволена ""
	|					ИНАЧЕ ""Уволен ""
	|				КОНЕЦ
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения = &Перемещение
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол = &Женский
	|						ТОГДА ""Переведена ""
	|					ИНАЧЕ ""Переведен ""
	|				КОНЕЦ
	|		ИНАЧЕ ""Не указано ""
	|	КОНЕЦ 		
	|ИНАЧЕ
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = &Прием
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол = &Женский
	|						ТОГДА ""Принята ""
	|					ИНАЧЕ ""Принят ""
	|				КОНЕЦ
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол = &Женский
	|						ТОГДА ""Уволена ""
	|					ИНАЧЕ ""Уволен ""
	|				КОНЕЦ
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = &Перемещение
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол = &Женский
	|						ТОГДА ""Переведена ""
	|					ИНАЧЕ ""Переведен ""
	|				КОНЕЦ
	|		ИНАЧЕ ""Не указано ""
	|	КОНЕЦ 		
	|КОНЕЦ КАК Состояние"
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамДатаСреза, Сотрудник В (&парамМассивСотрудников)) КАК РаботникиОрганизацийСрезПоследних";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("парамДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("парамМассивСотрудников", МассивСотрудников);
	Запрос.УстановитьПараметр("Женский", Перечисления.ПолФизическихЛиц.Женский);
	Запрос.УстановитьПараметр("Прием", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("Перемещение", Перечисления.ПричиныИзмененияСостояния.Перемещение);
	Запрос.УстановитьПараметр("парамТрудовойДоговор", Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Для Каждого СтрокаТабличногПоля Из ОформленияСтрок Цикл
		ДанныеСтроки = СтрокаТабличногПоля.ДанныеСтроки;
		Если ДанныеСтроки.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(ДанныеСтроки.Ссылка, "Сотрудник") Тогда
			Если ПоказыватьЗанимаемыхСтавок Тогда
				СтрокаТабличногПоля.Ячейки.ЗанимаемыхСтавок.УстановитьТекст(Выборка.ЗанимаемыхСтавок);
			КонецЕсли;
			Если ПоказыватьПодразделениеОрганизации Тогда
				СтрокаТабличногПоля.Ячейки.ПодразделениеОрганизации.УстановитьТекст(Выборка.Подразделение);
			КонецЕсли;
			Если ПоказыватьДолжность Тогда
				СтрокаТабличногПоля.Ячейки.Должность.УстановитьТекст(Выборка.Должность);
			КонецЕсли;
			Если ПоказыватьГрафикРаботы Тогда
				СтрокаТабличногПоля.Ячейки.ГрафикРаботы.УстановитьТекст(Выборка.ГрафикРаботы);
			КонецЕсли;
			Если ПоказыватьСостояние Тогда
				СтрокаТабличногПоля.Ячейки.Состояние.УстановитьТекст(Выборка.Состояние + Формат(Выборка.Период,"ДФ=dd.MM.yyyy") + ". "+Выборка.ВидЗанятости);
			КонецЕсли;
		ИначеЕсли ПоказыватьСостояние Тогда
			//нет данных в регистре сведений РаботникиОрганизаций
			ВидДоговора = ДанныеСтроки.ВидДоговора;
			Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
				СтрокаСостояние = "Не принят(а)";	
			Иначе
				СтрокаСостояние = ВидДоговора;
			КонецЕсли;
			СтрокаТабличногПоля.Ячейки.Состояние.УстановитьТекст(СтрокаСостояние);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// управляет валютой в зависимости от способа расчета
//
Процедура ПриИзмененииВидаРасчета(ИмяОбъекта,Значение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета) Экспорт

	СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, Значение);

	Для СчПоказателей = 1 По 6 Цикл		
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда			
			Если НЕ ЗначениеЗаполнено(ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей]) И 
				СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей] = мВалютаУправленческогоУчета;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей] = Справочники.Валюты.ПустаяСсылка();
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Показатель" + СчПоказателей] = 0;
			КонецЕсли;
		Иначе
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей]		= Справочники.Валюты.ПустаяСсылка();
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Показатель" + СчПоказателей]	= 0;						
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ПриИзмененииВидаРасчета


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ИНФОРМАЦИИ В ФОРМЕ

// Функция формирует фамилию и инициалы
//
// Параметры
//  Фамилия  - фамилия физ. лица.
//  Имя      - имя физ. лица.
//  Отчество - отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия, имя, отчество одной строкой.
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + 
			?(НЕ ПустаяСтрока(Отчество) , 
			Лев(Отчество,1)+".", ""), ""), "");

КонецФункции // ПолучитьФамилиюИмяОтчество()

Процедура ЗаполнениеОтбораПоОрганизацииПоУмолчанию(Форма, ЭлементОтбора = Неопределено, ЭлементФормы, ПараметрОтборПоРегистратору = Неопределено, ИспользоватьГоловнуюОрганизацию = Истина, ТекущийПользователь, ТекстЗаголовка = Неопределено) Экспорт
	
	ЭлементФормы.ТолькоПросмотр = Ложь;
	
	Если ЗначениеЗаполнено(ПараметрОтборПоРегистратору) Тогда
		
		МетаданныеДокумента = ПараметрОтборПоРегистратору.Метаданные();
		
		Если МетаданныеДокумента.Реквизиты.Найти("СторнируемыйДокумент") <> Неопределено Тогда
			
			МетаданныеДокумента 		= ПараметрОтборПоРегистратору.СторнируемыйДокумент.Метаданные();
			ПараметрОтборПоРегистратору = ПараметрОтборПоРегистратору.СторнируемыйДокумент;
			
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
			
			Если ИспользоватьГоловнуюОрганизацию Тогда
				Организация = ОбщегоНазначения.ГоловнаяОрганизация(ПараметрОтборПоРегистратору.Организация);
			Иначе
				Организация = ПараметрОтборПоРегистратору.Организация;
			КонецЕсли;
			
			ЭлементОтбора.Значение = Организация;
			ЭлементФормы.ТолькоПросмотр = Истина;
			Если ТекстЗаголовка <> Неопределено Тогда
				Форма.Заголовок = ТекстЗаголовка + Организация.Наименование;
			КонецЕсли; 
			
		КонецЕсли;
		
		ЭлементОтбора.Использование = Истина;
		
	Иначе
		
		Если ИспользоватьГоловнуюОрганизацию Тогда 
			Организация = ОбщегоНазначения.ГоловнаяОрганизация(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяОрганизация"));
		Иначе
			Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяОрганизация");
		КонецЕсли;
		
		Если ЭлементОтбора <> Неопределено Тогда
			ЭлементОтбора.Значение = Организация;
			ЭлементОтбора.Использование = Не Организация.Пустая();
		КонецЕсли;
			
		Если ТекстЗаголовка <> Неопределено Тогда
			Если Организация.Пустая() Тогда
				Форма.Заголовок = СтрЗаменить(ТекстЗаголовка,"организации","организаций");
			Иначе 
				Форма.Заголовок = ТекстЗаголовка + Организация;
			КонецЕсли;
		КонецЕсли; 
		//vvv
		Если Не СервисныеПроцедурыИФункции.ДоступныВсеОрганизации() ТОгда 
			ЭлементФормы.ТолькоПросмотр=Истина;
			Для каждого ЭФ ИЗ Форма.ЭлементыФормы Цикл
				Если Найти(Нрег(ЭФ.Имя),"список")>0 Тогда
					Если ИспользоватьГоловнуюОрганизацию Тогда
						ЭФ.НастройкаОтбора.Организация.Доступность=Ложь;
					Иначе
						ЭФ.НастройкаОтбора.ОбособленноеПодразделение.Доступность=Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КОнецЕсли;
		//
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ВВОДА ДАТЫ КАК МЕСЯЦА

// Предназначена для реализации "произвольного" ввода даты-месяца
// подбирает по переданному тексту строку-представление даты или список таких строк
// в переданный параметр ДатаПоТексту возвращает подобранную по тексту дату
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено) ЭКспорт
    СписокВозврата = Новый СписокЗначений;
    ТекущийГод = Год(ТекущаяДата());
    
    Если ПустаяСтрока(Текст) Тогда
        Возврат СписокВозврата;
    КонецЕсли;
    Если Найти(Текст, ".") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ".");
    ИначеЕсли Найти(Текст, ",") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ",");
    ИначеЕсли Найти(Текст, "-") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "-");
    ИначеЕсли Найти(Текст, "/") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "/");
    ИначеЕсли Найти(Текст, "\") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "\");
    Иначе
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, " ");
    КонецЕсли;
    Если Подстроки.Количество() = 1 Тогда
        // единственное слово - пытаемся получить месяц
        Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Текст) Тогда
            МесяцЧислом = Число(Текст);
            Если МесяцЧислом >= 1 и МесяцЧислом <=12 Тогда
                ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
                Если СтрДлина(Текст) = 1 Тогда
                    СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
                Иначе
                    СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
                КонецЕсли;
            Иначе
                Возврат СписокВозврата;
            КонецЕсли;                
        Иначе
            СписокМесяцев = СписокМесяцевПоСтроке(Текст);
            Для Каждого Месяц Из СписокМесяцев Цикл
                ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
                СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гг'"));
            КонецЦикла;
        КонецЕсли;
    ИначеЕсли Подстроки.Количество() = 2 Тогда
        // два слова - первое считаем месяцем, второе - годом
        Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
            Если ПустаяСтрока(Подстроки[1]) Тогда
                ГодЧислом = 0;
                Подстроки[1] = "0";
                ТекстВозврата = Текст + "0";
            Иначе
                ГодЧислом = Число(Подстроки[1]);
                ТекстВозврата = "";
            КонецЕсли;
            Если ГодЧислом > 3000 Тогда
                Возврат СписокВозврата;
            КонецЕсли;
            Если СтрДлина(Подстроки[1]) <= 1 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
                СтрокаФорматированияГода = "г";
            ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
                СтрокаФорматированияГода = "гг";
            ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
                СтрокаФорматированияГода = "гггг";
            КонецЕсли;                    
        Иначе
            // второе слово может быть только годом
            Возврат СписокВозврата;
        КонецЕсли;                
        Если ЗначениеЗаполнено(Подстроки[0]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
            МесяцЧислом = Число(Подстроки[0]);
            Если МесяцЧислом >= 1 и МесяцЧислом <= 12 Тогда
                // если "правильный" месяц и год
                ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
                СписокВозврата.Добавить(ТекстВозврата);
            Иначе
                Возврат СписокВозврата;
            КонецЕсли;                
        Иначе
            СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
            Если СписокМесяцев.Количество() = 1 Тогда
                ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
                СписокВозврата.Добавить("");
            Иначе
                Для Каждого Месяц Из СписокМесяцев Цикл
                    ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
                    СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гг'"));
                КонецЦикла;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    Возврат СписокВозврата;
КонецФункции

// подбирает массив номеров месяцев, соответствующих переданной строке
// например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// используется в ПодобратьДатуПоТексту
Функция СписокМесяцевПоСтроке(Текст)
    СписокМесяцев = Новый СписокЗначений;
    Месяцы = Новый Соответствие;
    МесяцыВозврата = Новый Массив;
    Для Счетчик = 1 По 12 Цикл
        Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
        СписокМесяцев.Добавить(Счетчик, Представление);
        Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
        СписокМесяцев.Добавить(Счетчик, Представление);
    КонецЦикла;
    Для Каждого ЭлементСписка Из СписокМесяцев Цикл
        Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
            Месяцы[ЭлементСписка.Значение] = 0;
        КонецЕсли;
    КонецЦикла;
    Для Каждого Элемент Из Месяцы Цикл
        МесяцыВозврата.Добавить(Элемент.Ключ);
    КонецЦикла;
    Возврат МесяцыВозврата;
КонецФункции

Процедура ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт
    Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
    Если Список.Количество() = 1 Тогда
        ТекстАвтоПодбора = Список[0];
    КонецЕсли;
    СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка) Экспорт
    Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
    Если Список.Количество() = 1 Тогда
        Значение = Текст;
    Иначе
        Значение = Список;
    КонецЕсли;
    СтандартнаяОбработка = Ложь;
КонецПроцедуры

Функция ДатаКакМесяцПредставление(ДатаДата) Экспорт
    Возврат Формат(ДатаДата, "ДФ='ММММ гггг'");
КонецФункции

// Процедура обрабатывает событие начала выбора из списка в поле периода регистрации
// Процедура исполняется только на клиенте
//
Процедура НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, НачальноеЗначение = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли; 
	
	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоМесяцаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	Для а = 1 По 12 Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ДатаКакМесяцПредставление(НачалоМесяцаЗаполнения));
		Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли; 
		НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 1);
	КонецЦикла;
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(НачальноеЗначение) Тогда
		НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, ВыбранныйЭлемент.Значение);
		Возврат;
	КонецЕсли;
	
	ПериодРегистрации = ВыбранныйЭлемент.Значение;
	Элемент.Значение  = ДатаКакМесяцПредставление(ПериодРегистрации);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА КОММЕНТИРОВАНИЯ ДЕЙСТВИЙ

// получает форму обработки комментирования действий
Функция ПолучитьФормуКомментариев() Экспорт
	
	Форма = Обработки.КомментарииВыполняемыхДействий.ПолучитьФорму();
	Форма.Открыть();
	Возврат Форма;
	
КонецФункции

Процедура ОткрытьГрафик(Параметры) Экспорт
	
	Если Параметры.Количество() < 2 Тогда
		Для Каждого Элемент Из Параметры Цикл
			Сообщить(Элемент);
		КонецЦикла;

	Иначе
		ГрафикРаботы = Параметры[0];
		Дата = Параметры[1];
		Если ТипЗнч(ГрафикРаботы) = Тип("СправочникСсылка.ГрафикиРаботы") Тогда
			// Открываем справочник ГрафикиРаботы.
			ГрафикРаботы.ПолучитьФорму().Открыть();
		ИначеЕсли ТипЗнч(ГрафикРаботы) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
			// Ищем и открываем документ Табель, если его нет, тогда индивидуальныйГрафик
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("Сотрудник", ГрафикРаботы);
			Запрос.УстановитьПараметр("Дата", НачалоМесяца(Дата));
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ГрафикиРаботы.Документ
			|ПОМЕСТИТЬ ВТПодневныеДокументы
			|ИЗ
			|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
			|ГДЕ
			|	ГрафикиРаботы.ГрафикРаботы = &Сотрудник
			|	И НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ) = &Дата
			|	И ГрафикиРаботы.Месяц = &Дата
			|	И (НЕ ГрафикиРаботы.Документ В (ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.СдельныйНаряд.ПустаяСсылка)))
			|
			|СГРУППИРОВАТЬ ПО
			|	ГрафикиРаботы.Документ,
			|	ГрафикиРаботы.План";
			Запрос.Выполнить();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СводныеТабели.Регистратор, ЕСТЬNULL(ПодневныеТабели.Документ, ЕСТЬNULL(СводныеНаряды.Регистратор, ЕСТЬNULL(ПодневныеНаряды.Документ, ЕСТЬNULL(СводныеГрафики.Регистратор, ПодневныеГрафики.Документ))))) КАК документ
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СводныеТабели.Регистратор КАК Регистратор
			|		ИЗ
			|			РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК СводныеТабели
			|		ГДЕ
			|			НАЧАЛОПЕРИОДА(СводныеТабели.Период, ДЕНЬ) = &Дата
			|			И СводныеТабели.Сотрудник = &Сотрудник
			|			И СводныеТабели.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации
			|		
			|		СГРУППИРОВАТЬ ПО
			|			СводныеТабели.Регистратор) КАК СводныеТабели
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодневныеДокументы КАК ПодневныеТабели
			|		ПО (ПодневныеТабели.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СводныеНаряды.Регистратор КАК Регистратор
			|		ИЗ
			|			РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК СводныеНаряды
			|		ГДЕ
			|			НАЧАЛОПЕРИОДА(СводныеНаряды.Период, ДЕНЬ) = &Дата
			|			И СводныеНаряды.Сотрудник = &Сотрудник
			|			И СводныеНаряды.Регистратор ССЫЛКА Документ.СдельныйНаряд
			|		
			|		СГРУППИРОВАТЬ ПО
			|			СводныеНаряды.Регистратор) КАК СводныеНаряды
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодневныеДокументы КАК ПодневныеНаряды
			|		ПО (ПодневныеНаряды.Документ ССЫЛКА Документ.СдельныйНаряд)
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СводныеГрафики.Регистратор КАК Регистратор
			|		ИЗ
			|			РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеГрафики
			|		ГДЕ
			|			СводныеГрафики.Сотрудник = &Сотрудник
			|			И СводныеГрафики.Месяц = &Дата) КАК СводныеГрафики
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодневныеДокументы КАК ПодневныеГрафики
			|		ПО (ПодневныеГрафики.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации)
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка = &Сотрудник
			|	И ЕСТЬNULL(СводныеТабели.Регистратор, ЕСТЬNULL(ПодневныеТабели.Документ, ЕСТЬNULL(СводныеНаряды.Регистратор, ЕСТЬNULL(ПодневныеНаряды.Документ, ЕСТЬNULL(СводныеГрафики.Регистратор, ПодневныеГрафики.Документ))))) ЕСТЬ НЕ NULL ";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Выборка.Документ.ПолучитьФорму().Открыть();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Эта функция возвращает информацию о виде расчета из переданного соответствия
// Если в соответствии не найдена информация о виде расчета - она подготавливается и 
// помещается в соответствие
// Применяется для работы с формами, в которых активно требуется получать 
// информащцию о видах расчета, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОВидахРасчета - соответствие, у котрого в качестве ключа - ПланВидовРасчетаСсылка, а 
//  				  в качестве значения - структура из элементов
//					  РазмерТребуется - булево - если да, то при вводе такого 
//										вида расчета требуется проставлять значение "размер" 
//										(суммы, проценты и проч. показатели, используемые при расчете)
//
//	ВидРасчета - ПланВидовРасчетаСсылка
//
// Возвращаемое значение:
//  Описанная выше структура
//
Функция ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета, Режим = "ПлановыеНачисления") Экспорт
	
	СведенияОВидеРасчета = СведенияОВидахРасчета[ВидРасчета];
	
	Если СведенияОВидеРасчета = Неопределено Тогда
		
		СведенияОВидеРасчета = Новый Структура("КоличествоПоказателей,РазмерТребуется,НеТребуетВалюты,ТребуетВводаТарифногоРазряда,ФактКоличествоПоказателей",1, Ложь, Ложь, Ложь,0);
																					
		Если ЗначениеЗаполнено(ВидРасчета) Тогда
			
			ТипВидРасчета = ТипЗнч(ВидРасчета);
			ЭтоОсновноеНачислениеОрганизаций = ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций");
			ЭтоДополнительноеНачислениеОрганизаций = ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций");
			ЭтоУдержаниеОрганизаций = ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций");
			ЭтоУправленческоеНачисление = ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления");
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Показатели.Показатель,
			|	ВЫБОР
			|		КОГДА  НЕ Показатели.ЗапрашиватьПриКадровыхПеремещениях
			|			ТОГДА ИСТИНА";
			Если ЭтоОсновноеНачислениеОрганизаций ИЛИ ЭтоУправленческоеНачисление Тогда
				Запрос.Текст = Запрос.Текст + "
				|       ИНАЧЕ
				|			ВЫБОР 
				|				КОГДА Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная) ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
				|				ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая) ИЛИ Показатели.Показатель.ТарифнаяСтавка
				|					ТОГДА НЕ Показатели.Ссылка.ЗачетОтработанногоВремени
				|				ИНАЧЕ ЛОЖЬ
				|			КОНЕЦ";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
			|	КОНЕЦ КАК НЕЗапрашиватьПриКадровыхПеремещениях,
			|	ВЫБОР
			|		КОГДА Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ПустаяСсылка) 
			|			ТОГДА ИСТИНА";
			Если ЭтоОсновноеНачислениеОрганизаций ИЛИ ЭтоУправленческоеНачисление Тогда
				Запрос.Текст = Запрос.Текст + "
				|	    ИНАЧЕ
				|			ВЫБОР 
				|				КОГДА Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная) ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
				|					ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая) ИЛИ Показатели.Показатель.ТарифнаяСтавка
				|						ТОГДА НЕ Показатели.Ссылка.ЗачетОтработанногоВремени
				|					ИНАЧЕ Показатели.Показатель.Предопределенный
				|			КОНЕЦ";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|		ИНАЧЕ Показатели.Показатель.Предопределенный";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "		
			|			
			|	КОНЕЦ КАК Предопределенный,
			|	ВЫБОР КОГДА Показатели.Показатель.Предопределенный И Показатели.Показатель <> Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
			|				И Показатели.Показатель <> Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная) 
			|				И Показатели.Показатель <> Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая) 
			|			ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоПредопределенный,
			|	Показатели.Показатель.Наименование КАК ПоказательНаименование,
			|	Показатели.Показатель.ТипПоказателя,
			|	ЕСТЬNULL(Показатели.Показатель.ВозможностьИзменения, ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)) КАК ПоказательВозможностьИзменения,
			|	Показатели.НомерСтроки,
			|	Максимум(Показатели.НомерСтроки) КАК КоличествоПоказателей
			|ИЗ";
			Если ЭтоОсновноеНачислениеОрганизаций Тогда
				Запрос.Текст = Запрос.Текст + "
				|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели";
			ИначеЕсли ЭтоДополнительноеНачислениеОрганизаций Тогда
				Запрос.Текст = Запрос.Текст + "
				|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели";
			ИначеЕсли ЭтоУдержаниеОрганизаций Тогда
				Запрос.Текст = Запрос.Текст + "
				|	ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели";
			ИначеЕсли ЭтоУправленческоеНачисление Тогда
				Запрос.Текст = Запрос.Текст + "
				|	ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели";
			ИначеЕсли ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.УправленческиеУдержания") Тогда
				Запрос.Текст = Запрос.Текст + "
				|	ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	Показатели.Ссылка = &Ссылка
			|СГРУППИРОВАТЬ ПО
			|	Показатели.Показатель,
			|	ВЫБОР
			|		КОГДА  НЕ Показатели.ЗапрашиватьПриКадровыхПеремещениях
			|			ТОГДА ИСТИНА";
			Если ЭтоОсновноеНачислениеОрганизаций ИЛИ ЭтоУправленческоеНачисление Тогда
				Запрос.Текст = Запрос.Текст + "
				|       ИНАЧЕ
				|			ВЫБОР 
				|				КОГДА Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная) ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
				|				ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая) ИЛИ Показатели.Показатель.ТарифнаяСтавка
				|					ТОГДА НЕ Показатели.Ссылка.ЗачетОтработанногоВремени
				|				ИНАЧЕ ЛОЖЬ
				|			КОНЕЦ";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ПустаяСсылка) 
			|			ТОГДА ИСТИНА";
			Если ЭтоОсновноеНачислениеОрганизаций ИЛИ ЭтоУправленческоеНачисление Тогда
				Запрос.Текст = Запрос.Текст + "
				|	    ИНАЧЕ
				|			ВЫБОР 
				|				КОГДА Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная) ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
				|				ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая) ИЛИ Показатели.Показатель.ТарифнаяСтавка
				|					ТОГДА НЕ Показатели.Ссылка.ЗачетОтработанногоВремени
				|				ИНАЧЕ Показатели.Показатель.Предопределенный
				|			КОНЕЦ";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|		ИНАЧЕ Показатели.Показатель.Предопределенный";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
			|	КОНЕЦ,
			|	Показатели.Показатель.Наименование,
			|	Показатели.Показатель.ТипПоказателя,
			|	ЕСТЬNULL(Показатели.Показатель.ВозможностьИзменения, ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)),
			|	Показатели.НомерСтроки";
			
			Запрос.УстановитьПараметр("Ссылка",ВидРасчета);
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				
				СтрокаТаблицыСведений = РезультатЗапроса.Выбрать();
				Пока СтрокаТаблицыСведений.Следующий() Цикл
					
					СведенияОВидеРасчета["КоличествоПоказателей"] = Макс(СведенияОВидеРасчета["КоличествоПоказателей"], СтрокаТаблицыСведений["КоличествоПоказателей"]);
					СведенияОВидеРасчета["ФактКоличествоПоказателей"] = Макс(СтрокаТаблицыСведений["КоличествоПоказателей"],СведенияОВидеРасчета["ФактКоличествоПоказателей"]);
					
					СчПоказателей 			= СтрокаТаблицыСведений.НомерСтроки;
					ВозможностьИзменения	= СтрокаТаблицыСведений.ПоказательВозможностьИзменения;
					ТипПоказателя			= СтрокаТаблицыСведений.ПоказательТипПоказателя;
					
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность",3);
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "ВозможностьИзменения",ВозможностьИзменения);					
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Наименование",СтрокаТаблицыСведений["ПоказательНаименование"]);
					
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей ,СтрокаТаблицыСведений.Показатель);
					
					Если СтрокаТаблицыСведений["НЕЗапрашиватьПриКадровыхПеремещениях"] <> Null И СтрокаТаблицыСведений["НЕЗапрашиватьПриКадровыхПеремещениях"] И Не СтрокаТаблицыСведений["ЭтоПредопределенный"] Тогда
						Если Режим = "ПлановыеНачисления" Тогда
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
						Иначе
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" ,Истина);
							Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
								
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость" , Истина);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость" , Истина);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Наименование" , СтрокаТаблицыСведений["ПоказательНаименование"]);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" , Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость" , Ложь);
								СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость" , Ложь);	
								
							ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Числовой Тогда
								
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
								СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
								
							ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный Тогда
								
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
								СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность",2);
								
							ИначеЕсли (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
								Или (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная) Тогда
								
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
								СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
								
							Иначе
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
								СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							КонецЕсли;
							
						КонецЕсли;
					ИначеЕсли СтрокаТаблицыСведений["Предопределенный"] <> Null И СтрокаТаблицыСведений["Предопределенный"] Тогда
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
					ИначеЕсли Режим = "ПлановыеНачисления" и (СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете
						Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно
						Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически) Тогда
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость" , Ложь);
						СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость" , Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость" , Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость" , Ложь);
					Иначе
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" ,Истина);
						Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
							
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость" , Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость" , Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Наименование" , СтрокаТаблицыСведений["ПоказательНаименование"]);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" , Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость" , Ложь);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость" , Ложь);	
							
						ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Числовой Тогда
							
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							
						ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный Тогда
							
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность",2);
							
							
						ИначеЕсли (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
							Или (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная) Тогда
							
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							
						Иначе
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							
						КонецЕсли;
					КонецЕсли;
					
					Если СтрокаТаблицыСведений.Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная
						Или СтрокаТаблицыСведений.Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная Тогда
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность",2);
					ИначеЕсли СтрокаТаблицыСведений.Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая Тогда
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность",4);	
					КонецЕсли;
				КонецЦикла;
			Иначе
				СведенияОВидеРасчета.Вставить("Показатель1Наименование", "");
				СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Ложь);
				СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Ложь);
				СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
				СведенияОВидеРасчета.Вставить("Показатель1Видимость", Ложь);
				СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
				СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
				СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Ложь);
			КонецЕсли;
				
	 		ИзменениеПоказателяНеУказано = Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка();
		
        // заполним для регламентированных способов оплаты труда
			Если ЭтоОсновноеНачислениеОрганизаций Или ЭтоДополнительноеНачислениеОрганизаций Или ЭтоУдержаниеОрганизаций Тогда
				СтруктураВидаРасчета = Новый Структура("СпособРасчета,ТребуетВводаТарифногоРазряда");
				ЗаполнитьЗначенияСвойств(СтруктураВидаРасчета,ВидРасчета);
				Если СтруктураВидаРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
					СведенияОВидеРасчета.Вставить("ФактКоличествоПоказателей",0);
					СведенияОВидеРасчета["Показатель1Точность"] = 3;
					Если СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням 
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						НаименованиеТарифнойСтавки = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная;
						
						Если СтруктураВидаРасчета.ТребуетВводаТарифногоРазряда Тогда
							СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР1Наименование", НаименованиеТарифнойСтавки);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						Иначе
							СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1Наименование", НаименованиеТарифнойСтавки);
							СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						КонецЕсли;
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке 
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйПриработок 
						//vvv
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйПриработокВодителей
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.КТУ
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителей
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителейБезВыезда
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавкеВодителей
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителейРемонт
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителейРемонтПлановый
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйПриработокМесячнаяСтавкаЧасы Тогда 
						//
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						
						Если СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке Тогда
							НаименованиеТарифнойСтавки = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная;
						//vvv	
						ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйПриработокМесячнаяСтавкаЧасы Тогда
						    НаименованиеТарифнойСтавки = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная;	
						ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.КТУ Тогда
						    НаименованиеТарифнойСтавки = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная;		
						Иначе
							НаименованиеТарифнойСтавки = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая;
						КонецЕсли;
						
						Если СтруктураВидаРасчета.ТребуетВводаТарифногоРазряда Тогда
							СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР1Наименование", НаименованиеТарифнойСтавки);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						Иначе
							СведенияОВидеРасчета.Вставить("Показатель1Наименование", НаименованиеТарифнойСтавки);
							СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1Точность", 4);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						КонецЕсли;
						
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент оплаты");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
					//vvv
					ИначеЕсли (СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Индексация) или (СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоВычисляемойЧасовойТарифнойСтавке) Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент оплаты");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоРазрядаПропорциональноОтработанномуВремени Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент оплаты");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомСКТУ Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент оплаты");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("КоличествоПоказателей", 2);	
						СведенияОВидеРасчета.Вставить("Показатель2Наименование", "КТУ");
						СведенияОВидеРасчета.Вставить("Показатель2Видимость", Режим <> "ПлановыеНачисления");
						СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Режим <> "ПлановыеНачисления");
						СведенияОВидеРасчета.Вставить("Показатель2Точность",2);
						СведенияОВидеРасчета.Вставить("Валюта2Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель2ВозможностьИзменения",Истина);
						СведенияОВидеРасчета.Вставить("ПоказательТР2НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР2Видимость", Ложь);
					//
						
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоРазряда Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент оплаты");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);

					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоСотрудника Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент оплаты");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);


					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3Лет 
						ИЛИ СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ
						ИЛИ СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ
						ИЛИ СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ
						ИЛИ СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3ЛетНаВторого
						ИЛИ СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида
						ИЛИ СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеМатериОдиночкеДо1_5лет
						ИЛИ СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаВИЧ
						ИЛИ СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеМатериОдиночкеДо3Лет
						ИЛИ СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо18ЛетНадб40
						ИЛИ СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалида
						ИЛИ СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСНадбавкой40До3Лет
						ИЛИ СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСтарше3Лет
						ИЛИ СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида
						ИЛИ СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериНадб40До3Лет
						ИЛИ СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериОдиночкеДо1_5Лет
						ИЛИ СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериОдиночкеДо3Лет
						ИЛИ СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРаботающейМатериДо3Лет Тогда 
						СведенияОВидеРасчета["Показатель1Наименование"] = "Процент пособия";
						СведенияОВидеРасчета["Показатель1Видимость"] = Истина;
						СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;	
						СведенияОВидеРасчета["Показатель1Точность"] = 0;
						СведенияОВидеРасчета["Валюта1Видимость"] = Истина;
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы
						//vvv
						//Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке
						//
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", ?(Режим = "ПлановыеНачисления","Процент доплаты","Тарифная ставка"));
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке
						Или  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням
						Или  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам
						Или  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", ?(Режим = "ПлановыеНачисления","Стаж","Тарифная ставка"));
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						//vvv
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Режим <> "ПлановыеНачисления");
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Режим <> "ПлановыеНачисления");
						Если СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке Тогда
							СведенияОВидеРасчета.Вставить("КоличествоПоказателей", 2);	
							СведенияОВидеРасчета.Вставить("Показатель2Наименование", "Процент оплаты");
							СведенияОВидеРасчета.Вставить("Показатель2Видимость", Режим <> "ПлановыеНачисления");
							СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Режим <> "ПлановыеНачисления");
							СведенияОВидеРасчета.Вставить("Показатель2Точность",2);
							СведенияОВидеРасчета.Вставить("Валюта2Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель2ВозможностьИзменения",Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР2НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР2Видимость", Ложь);
						КонецЕсли;
						//
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", ?(Режим = "ПлановыеНачисления","Стаж","Процент оплаты"));
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						//vvv
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Режим <> "ПлановыеНачисления");
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Режим <> "ПлановыеНачисления");
						//
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке 
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС
						ИЛИ СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуОтпускаПоБеременности
						ИЛИ СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент среднего заработка");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);	
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Тарифная ставка");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Или
						СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксСуммойПропорционльноОтработанномуВремени Или
						СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Сумма");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаЗаместительство  Тогда
						СведенияОВидеРасчета.Вставить("КоличествоПоказателей", 2);      
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Оклад замещающего");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2Наименование", "Оклад замещаемого");
						СведенияОВидеРасчета.Вставить("Показатель2Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2ВозможностьИзменения",Ложь);
						СведенияОВидеРасчета.Вставить("Валюта2Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2Точность",3);
						
					//vvv
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеВодители
					или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеРемонт
					или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтСдельногоЗаработкаВодителей
					или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеРемонтПлановый Тогда
						СведенияОВидеРасчета.Вставить("КоличествоПоказателей", 3);      
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Тарифная ставка");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2Наименование", "Процент");
						СведенияОВидеРасчета.Вставить("Показатель2Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2ВозможностьИзменения",Ложь);
						СведенияОВидеРасчета.Вставить("Валюта2Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2Точность",3);
						СведенияОВидеРасчета.Вставить("ПоказательТР2НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР2Видимость", Ложь);
						//
						СведенияОВидеРасчета.Вставить("Показатель3Наименование", "Процент снижения");
						СведенияОВидеРасчета.Вставить("Показатель3Видимость", Режим <> "ПлановыеНачисления");
						СведенияОВидеРасчета.Вставить("Показатель3НаименованиеВидимость", Режим <> "ПлановыеНачисления");
						СведенияОВидеРасчета.Вставить("Показатель3ВозможностьИзменения",Ложь);
						СведенияОВидеРасчета.Вставить("Валюта3Видимость", Режим <> "ПлановыеНачисления");
						СведенияОВидеРасчета.Вставить("Показатель3Точность",3);
						СведенияОВидеРасчета.Вставить("ПоказательТР3НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР3Видимость", Ложь);
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ЕжемесячнаяПремия Тогда
						СведенияОВидеРасчета.Вставить("КоличествоПоказателей", 2);      
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент премии");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2Наименование", "Процент снижения");
						СведенияОВидеРасчета.Вставить("Показатель2Видимость", Режим <> "ПлановыеНачисления");
						СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Режим <> "ПлановыеНачисления");
						СведенияОВидеРасчета.Вставить("Показатель2ВозможностьИзменения",Ложь);
						СведенияОВидеРасчета.Вставить("Валюта2Видимость", Режим <> "ПлановыеНачисления");
						СведенияОВидеРасчета.Вставить("Показатель2Точность",3);
						СведенияОВидеРасчета.Вставить("ПоказательТР2НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР2Видимость", Ложь);
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоРазницеМеждуЧасовымиСтавками Тогда
						СведенияОВидеРасчета.Вставить("КоличествоПоказателей", 2);      
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Cтавка фактическая");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2Наименование", "Ставка расчетная");
						СведенияОВидеРасчета.Вставить("Показатель2Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2ВозможностьИзменения",Ложь);
						СведенияОВидеРасчета.Вставить("Валюта2Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2Точность",3);
						СведенияОВидеРасчета.Вставить("ПоказательТР2НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР2Видимость", Ложь);	
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке Тогда
						СведенияОВидеРасчета.Вставить("КоличествоПоказателей", 2);      
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Тарифная ставка");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Режим <> "ПлановыеНачисления");
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Режим <> "ПлановыеНачисления");
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Режим <> "ПлановыеНачисления");
						СведенияОВидеРасчета.Вставить("Показатель2Наименование", "Процент доплаты");
						СведенияОВидеРасчета.Вставить("Показатель2Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2ВозможностьИзменения",Ложь);
						СведенияОВидеРасчета.Вставить("Валюта2Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2Точность",3);
						СведенияОВидеРасчета.Вставить("ПоказательТР2НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР2Видимость", Ложь);
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоИнойЧасовойТарифнойСтавке Тогда
						СведенияОВидеРасчета.Вставить("КоличествоПоказателей", 2);      
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая);
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2Наименование", "Процент доплаты");
						СведенияОВидеРасчета.Вставить("Показатель2Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2ВозможностьИзменения",Ложь);
						СведенияОВидеРасчета.Вставить("Валюта2Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2Точность",3);
						СведенияОВидеРасчета.Вставить("ПоказательТР2НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР2Видимость", Ложь);	
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоИнойМесячнойТарифнойСтавке Тогда
						СведенияОВидеРасчета.Вставить("КоличествоПоказателей", 2);      
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная);
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2Наименование", "Процент доплаты");
						СведенияОВидеРасчета.Вставить("Показатель2Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2ВозможностьИзменения",Ложь);
						СведенияОВидеРасчета.Вставить("Валюта2Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2Точность",3);
						СведенияОВидеРасчета.Вставить("ПоказательТР2НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР2Видимость", Ложь);		
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомСоСнижением Тогда
						СведенияОВидеРасчета.Вставить("КоличествоПоказателей", 2);      
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент оплаты");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2Наименование", "Процент снижения");
						СведенияОВидеРасчета.Вставить("Показатель2Видимость", Режим <> "ПлановыеНачисления");
						СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Режим <> "ПлановыеНачисления");
						СведенияОВидеРасчета.Вставить("Показатель2ВозможностьИзменения",Ложь);
						СведенияОВидеРасчета.Вставить("Валюта2Видимость", Режим <> "ПлановыеНачисления");
						СведенияОВидеРасчета.Вставить("Показатель2Точность",3);
						СведенияОВидеРасчета.Вставить("ПоказательТР2НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР2Видимость", Ложь);
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаКоличествомБазовых
						или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаФиксированнойСуммой Тогда	
						СведенияОВидеРасчета.Вставить("КоличествоПоказателей", 0);      
					//
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаСовмещениеПоОкладу  Тогда
						СведенияОВидеРасчета.Вставить("КоличествоПоказателей", 2);
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент оплаты");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2Наименование", "Месячная тарифная ставка замещаемог");
						СведенияОВидеРасчета.Вставить("Показатель2Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2ВозможностьИзменения",Ложь);
						СведенияОВидеРасчета.Вставить("Валюта2Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2Точность",2);
						
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаСовмещениеПоТарифу  Тогда
						СведенияОВидеРасчета.Вставить("КоличествоПоказателей", 2);
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент оплаты");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2Наименование", "Часовая тарифная ставка замещаемого");
						СведенияОВидеРасчета.Вставить("Показатель2Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2ВозможностьИзменения",Ложь);
						СведенияОВидеРасчета.Вставить("Валюта2Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2Точность",2);

						
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом 
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент удержаний");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						//vvv
						Если СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом ТОгда
							СведенияОВидеРасчета.Вставить("КоличествоПоказателей", 2);
							СведенияОВидеРасчета.Вставить("Показатель2Наименование", "Процент БПМ");
							СведенияОВидеРасчета.Вставить("Показатель2Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("Валюта2Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель2ВозможностьИзменения", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель2Точность",2);
							СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР2НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР2Видимость", Ложь);
						КонецЕсли;						
						//
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Фиксированная сумма");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистВПрожиточныхМинимумах Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Доля прожиточного минимума в %");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);	
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент сбора");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.КомиссионыйСбор Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент сбора");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("КоличествоПоказателей",0);
					ИначеЕсли ПроведениеРасчетов.СпособРасчетаТребуетРазмер(СтруктураВидаРасчета.СпособРасчета) Тогда
						СведенияОВидеРасчета.Вставить(СведенияОВидеРасчета.РазмерТребуется, Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						Если НЕ ПроведениеРасчетов.СпособРасчетаНеТребуетВалюты(СтруктураВидаРасчета.СпособРасчета) И Найти(Строка(СтруктураВидаРасчета.СпособРасчета), "П1") = 0 Тогда
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВидРасчета = ПланыВидовРасчета.УправленческиеУдержания.УдержаноПоБухгалтерии Тогда
				СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Удержано по бухгалтерии");
				СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
				СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
			КонецЕсли;
			
		Иначе
			СведенияОВидеРасчета.Вставить("Показатель1Наименование", "");
			СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Ложь);
			СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель1Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
			СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Ложь);
		КонецЕсли;
		
		СведенияОВидахРасчета[ВидРасчета] = СведенияОВидеРасчета;
		
	КонецЕсли;
	

	Возврат СведенияОВидеРасчета;
	
КонецФункции  // ПолучитьСведенияОВидеРасчетаСхемыМотивации

// Получает список предопределенных показателей схем мотивации 
//
Функция ПолучитьСписокПредопределенныхПоказателей() Экспорт 
	
	СписокПредопределенныхПоказателей = Новый СписокЗначений;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПоказателиСхемМотивации.Ссылка КАК Ссылка,
	|	ПоказателиСхемМотивации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
	|ГДЕ
	|	ПоказателиСхемМотивации.Предопределенный";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокПредопределенныхПоказателей.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокПредопределенныхПоказателей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВСТРОЕННОЙ СПРАВКИ

Процедура УстановитьВидимостьТекста(Документ, Ид, ВключитьВидимость, Параметр = "inline") Экспорт
	
	// Документ должен быть всегда загружен и в нем должен найтись нужный нам элемент
	// Пользователь может увидеть данные сообщения только в том случае, если при кодировании
	// механизма были допущены ошибки
	
	// Данное сообщение будет выведено, если мы пытаемся обновить справку ПриОткрытии формы
	// Обновлять справку в этом событии не нужно, так как текст справки был изначально
	// сформирован правильно
	Если Документ.readyState <> "complete" Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Справка: справка еще не загружена");
		Возврат;
	КонецЕсли;
	
	// Данное сообщение будет выведено, если мы пытаемся переключить видимость элемента
	// которого нет в справке. Такое может только в случае, если бы допустили ошибку в коде
	Элемент = Документ.getElementById(Ид);
	Если Элемент = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Справка: не найден элемент " + Ид);
		Возврат;
	КонецЕсли;
	
	Элемент.style.display = ?(ВключитьВидимость, Параметр, "none");
	
КонецПроцедуры

Процедура ПолеHTMLДокументаOnClick(Элемент, pEvtObj, Форма) Экспорт
	
	ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если ЭлементHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементHTML.id = "Команда" Тогда
		Попытка
			Форма.ВыполнитьКомандуФормы(ЭлементHTML.pathname, ЭлементHTML.target);
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		pEvtObj.returnValue = Ложь;
		
	ИначеЕсли ЭлементHTML.id = "ОткрытьСписок" Тогда
		Менеджер = Вычислить(ЭлементHTML.pathname);
		Попытка
			ФормаСписка = Менеджер.ПолучитьФормуСписка();
			ФормаСписка.Открыть();
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		
		pEvtObj.returnValue = Ложь;
		
	ИначеЕсли ЭлементHTML.id = "АктивизироватьЭУ" Тогда
		Форма.ТекущийЭлемент = Вычислить("Форма.ЭлементыФормы." + ЭлементHTML.pathname);
		pEvtObj.returnValue = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЭлемент(ЭлементHTML, НазваниеТега)
	
	ТекущийЭлементHTML = ЭлементHTML;
	Пока Истина Цикл
		Если ТекущийЭлементHTML.tagName = "BODY" Тогда
			Возврат Неопределено;
		ИначеЕсли ТекущийЭлементHTML.tagName = НазваниеТега Тогда
			Возврат ТекущийЭлементHTML;
		Иначе
			ТекущийЭлементHTML = ТекущийЭлементHTML.parentNode;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ПолеHTMLДокументаOnMouseOver(Элемент, pEvtObj, ВыделятьРазделы = Ложь) Экспорт
	
	Если ВыделятьРазделы Тогда
		ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "DIV");
		Если ЭлементHTML <> Неопределено Тогда
			ЭлементHTML.style.paddingtop		= 0;
			ЭлементHTML.style.paddingright		= 3;
			ЭлементHTML.style.paddingbottom		= 2;
			ЭлементHTML.style.paddingleft		= 3;
			ЭлементHTML.style.borderwidth		= 1;
			ЭлементHTML.style.borderstyle		= "solid";
			ЭлементHTML.style.backgroundcolor	= "#FFFBF0";
		КонецЕсли;
	КонецЕсли;
	ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если ЭлементHTML <> Неопределено Тогда
		ЭлементHTML.style.backgroundcolor	= ВернутьШестнадцатиричноеПредставлениеЦвета(ВстроеннаяСправка_ФонВыделеннойСсылки());
		ЭлементHTML.style.color				= ВернутьШестнадцатиричноеПредставлениеЦвета(ВстроеннаяСправка_ЦветВыделеннойСсылки());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеHTMLДокументаOnMouseOut(Элемент, pEvtObj, ВыделятьРазделы = Ложь) Экспорт
	
	Если ВыделятьРазделы Тогда
		ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "DIV");
		Если ЭлементHTML <> Неопределено Тогда
			ЭлементHTML.style.paddingtop		= 1;
			ЭлементHTML.style.paddingright		= 4;
			ЭлементHTML.style.paddingbottom		= 3;
			ЭлементHTML.style.paddingleft		= 4;
			ЭлементHTML.style.borderstyle		= "none";
			ЭлементHTML.style.backgroundcolor	= "";
		КонецЕсли;
	КонецЕсли;
	ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если ЭлементHTML <> Неопределено Тогда
		ЭлементHTML.style.backgroundcolor	= "";
		ЭлементHTML.style.color				= "";
	КонецЕсли;
	
КонецПроцедуры

Функция ВстроеннаяСправка_ЦветФона() Экспорт
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветРамки() Экспорт
	
	Возврат Новый Цвет(137, 132, 119);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветСсылки() Экспорт
	
	Возврат Новый Цвет(0, 0, 0);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветВыделеннойСсылки() Экспорт
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Функция ВстроеннаяСправка_ФонВыделеннойСсылки() Экспорт
	
	Возврат Новый Цвет(64, 94, 172);
	
КонецФункции

// Возвращает описание стилей, используемых при показе встроенной ситуационно-зависимой справки
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   строка
//
Функция ВстроеннаяСправка_СтилиДокумента() Экспорт

	Возврат "
	|		<STYLE type=text/css>
	|			DIV.top {
	|				PADDING: 0;
	|			}
	|			DIV {
	|				PADDING: 3px 0px 3px 3px;
	|				BORDER-TOP-COLOR: #dadac4;
	|				BORDER-RIGHT-COLOR: #dadac4;
	|				BORDER-BOTTOM-COLOR: #dadac4;
	|				BORDER-LEFT-COLOR: #dadac4;
	|			}
	|			A {
	|				PADDING-TOP: 1px;
	|				PADDING-BOTTOM: 1px;
	|			}
	|			BODY {
	|				SCROLLBAR-FACE-COLOR: #fffbf0;
	|				SCROLLBAR-HIGHLIGHT-COLOR: #dadac4;
	|				SCROLLBAR-3DLIGHT-COLOR: #fff; MARGIN: 5px;
	|				SCROLLBAR-ARROW-COLOR: #708090;
	|				SCROLLBAR-TRACK-COLOR: #fffbf0;
	|				SCROLLBAR-DARKSHADOW-COLOR: #fff;
	|				MARGIN: 5px 0px 5px 5px;
	|			}
	|			IMG {
	|				MARGIN-LEFT: 3px;
	|			}
	|		</STYLE>";

КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ИЗМЕНЕНИЯ ВИДИМОСТИ ПАНЕЛЕЙ

Процедура ИзменитьВидимостьПанелиПоГоризонтали(Форма, ОтображатьПанель, ИмяОсновнойПанели, ПостфиксЭлементов) Экспорт
	
	Перем Элемент, Граница, Пусто;
	
	ОсновнаяПанель	= Форма.ЭлементыФормы[ИмяОсновнойПанели];
	Панель			= Форма.ЭлементыФормы["Панель" + ПостфиксЭлементов];
	Разделитель		= Форма.ЭлементыФормы["Разделитель" + ПостфиксЭлементов];
	
	Если ОтображатьПанель Тогда
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Право Тогда
			// установить привязку основной панели к разделителю
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Разделитель, ГраницаЭлементаУправления.Лево);
			
			// развернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// развернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			Если Панель.Ширина > Форма.Ширина / 2 Тогда
				// если максимизировать форму с закрытой справкой, а потом открыть справку, то форма
				// будет выглядеть очень некрасиво
				// поэтому необходимо ограничить ширину панели справки в случаях, когда справка получается на шире чем 1/2 формы
				РазницаВШирине = Форма.Ширина - 250 - Разделитель.Лево;
			Иначе
				РазницаВШирине = Панель.Ширина - Макс(250, Мин(Форма.Ширина - 350, Панель.Ширина));
			КонецЕсли;
			
			// восстановить привязки разделителя
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Форма.Панель, ГраницаЭлементаУправления.Право);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Разделитель, ГраницаЭлементаУправления.Лево);
			
			// установить привязку панели справки к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Разделитель, ГраницаЭлементаУправления.Право);
			
			Разделитель.Лево = Разделитель.Лево + РазницаВШирине;
		КонецЕсли;
	Иначе
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			ШиринаОсновнойПанели = ОсновнаяПанель.Ширина + Разделитель.Ширина + Панель.Ширина;
			
			// сбросить привязку панели к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
			
			// установить привязку разделителя к панели справки
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Лево);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Лево);
			
			// свернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Право;
			// свернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Право;
			
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Право);
			
			// установить привязку основной панели к форме
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.Панель, ГраницаЭлементаУправления.Право);
			ОсновнаяПанель.Ширина = ШиринаОсновнойПанели;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьВидимостьПанелиПоВертикали(Форма, ОтображатьПанель, ИмяОсновнойПанели, ПостфиксЭлементов) Экспорт
	
	Перем Элемент, Граница, Пусто;
	
	ОсновнаяПанель	= Форма.ЭлементыФормы[ИмяОсновнойПанели];
	Панель			= Форма.ЭлементыФормы["Панель" + ПостфиксЭлементов];
	Разделитель		= Форма.ЭлементыФормы["Разделитель" + ПостфиксЭлементов];
	
	Если ОтображатьПанель Тогда
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
			// установить привязку основной панели к разделителю
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
			
			// развернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// развернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// восстановить привязки разделителя
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Форма.Панель, ГраницаЭлементаУправления.Верх);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
			
			// установить привязку панели справки к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Верх);
		КонецЕсли;
	Иначе
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			ВысотаОсновнойПанели = ОсновнаяПанель.Высота + (ОсновнаяПанель.Верх - Панель.Верх);
			
			// сбросить привязку панели к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Низ);
			
			// установить привязку разделителя к панели справки
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Низ);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			
			// свернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Верх;
			// свернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Верх;
			
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Верх);
			
			// установить привязку основной панели к форме
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Форма.Панель, ГраницаЭлементаУправления.Верх);
			ОсновнаяПанель.Верх		= Панель.Верх;
			ОсновнаяПанель.Высота	= ВысотаОсновнойПанели;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет отображением панелей формы путем свертки в низ
// Пареметры
//	 Панель - Панель, к низу которой производим привязку панели ВерхняяПанель при свертке панели НижняяПанель
//	 ОтображатьПанель - булево
//	 ВерхняяПанель - панель формы, которая всегда видима
//	 НижняяПанель - панель формы, которую сворачиваем в низ
//	 Разделитель - разделитель верхней и нижней панели
//
Процедура ИзменитьВидимостьПанелиПоВертикалиНиз(Панель, ОтображатьПанель, ВерхняяПанель, НижняяПанель, Разделитель) Экспорт
	
	Если ОтображатьПанель Тогда
		
		Если НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Низ Тогда
			// необходимо развернуть панель
			
			// текущая высота основной панели
			НачальнаяВысотаОсновнойПанели = ВерхняяПанель.Высота;
			
			// на основную панель отдаем половину высоты
			ВерхняяПанель.Высота = Окр(НачальнаяВысотаОсновнойПанели * 0.6 ,0);
			
			// развернем разделитель, устатановим его внизу основной панели, настроим привязки
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			Разделитель.Верх = ВерхняяПанель.Верх + ВерхняяПанель.Высота;
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Низ);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
			
			// развернем нижнюю панель,установим ее к разделителю, настроим привязки
			НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Нет;
			НижняяПанель.Верх = Разделитель.Верх + 6;
            НижняяПанель.Высота = НачальнаяВысотаОсновнойПанели - ВерхняяПанель.Высота - 6;
			НижняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Верх);
			НижняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			
		КонецЕсли;
		
		ВерхняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Верх);
		
	Иначе // надо скрыть нижнюю панель	
		
		Если НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			
			//это та высота основной панели, которую необходимо установить
			ВысотаОсновнойПанели = НижняяПанель.Верх + НижняяПанель.Высота - ВерхняяПанель.Верх;
			
			// свернем элементы
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Низ;
			НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Низ;
			
			//перенесем ЭУ в низ формы и переопределим привязки
			Разделитель.Верх  = ВысотаОсновнойПанели;
			НижняяПанель.Верх = ВысотаОсновнойПанели;
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			НижняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			
			// распахнем и привяжем основную панель
			ВерхняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			ВерхняяПанель.Высота = ВысотаОсновнойПанели;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура управляет отображением панелей формы путем свертки в низ
// Пареметры
//	 Панель - Панель, к низу которой производим привязку Разделителя
//	 ОтображатьПанель - булево
//	 Надпись - надпись с ИО сотрудника
//	 ПанельРасчетногоЛистка - панель расчетного листка
//	 Разделитель - разделитель верхней и нижней панели
//
Процедура ИзменитьВидимостьПанелиРасчетногоЛистка(Панель, ОтображатьПанель, Надпись, ПанельРасчетногоЛистка, Разделитель) Экспорт
	
	Если ОтображатьПанель Тогда
		Если ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Низ Тогда

			// развернем панель, привязки на форме остались правильные
			ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// перепривяжем ЭУ для работы с развернутой панелью
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Низ);
			Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Низ);
			ПанельРасчетногоЛистка.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Надпись, ГраницаЭлементаУправления.Низ);
			
		КонецЕсли;
	Иначе
		Если ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			
			// перепривяжем ЭУ перед сверткой панели в низ
			ПанельРасчетногоЛистка.УстановитьПривязку(ГраницаЭлементаУправления.Верх);
			Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПанельРасчетногоЛистка, ГраницаЭлементаУправления.Верх);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Надпись, ГраницаЭлементаУправления.Верх);
			ПанельРасчетногоЛистка.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ПанельРасчетногоЛистка, ГраницаЭлементаУправления.Низ);
			ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Низ;
			
		КонецЕсли;
	КонецЕсли;
	
    Разделитель.Доступность = ОтображатьПанель;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОНУМЕРАЦИИ

// Процедура изменения доступности "ручного" изменения кода/номера объекта
//
// Параметры
//  МетаданныеОбъекта  - метаданные объекта.
//  ФормаОбъекта      - форма объекта.
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать пункт "Редактировать код/номер"
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//	ПолеВводаНомераДубль - необязательный параметр, необходим в случаях, когда код/номер одновременно связан с двумя элементами формы
//	КодНомерСтрокой - необязательный параметр, позволяет задать переназначить имя кода/номера при выводе запроса на подтверждение
//
Процедура ИзменениеВозможностиРедактированияНомера(МетаданныеОбъекта, ФормаОбъекта, ПодменюДействия, ПолеВводаНомера, ПолеВводаНомераДубль = Неопределено, ТекстВопроса = "") Экспорт
	
	Кнопка = ПодменюДействия.Кнопки.РедактироватьКодНомер;
	Если НЕ Кнопка.Пометка Тогда
		
		Если ПустаяСтрока(ТекстВопроса) Тогда			
			Если ВРЕГ(ПолеВводаНомера.Данные) = ВРЕГ("Код") Тогда
				ТекстВопроса = "Код присваивается автоматически при записи элемента, самостоятельное его редактирование может привести к нарушению в нумерации в системе. Вы действительно хотите установить код вручную?"
			Иначе
				ТекстВопроса = "Номер документу присваивается автоматически при записи, самостоятельное его редактирование может привести к нарушению в нумерации в системе. Вы действительно хотите установить номер вручную?"
			КонецЕсли;
		КонецЕсли;		
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;				
	КонецЕсли;
	Кнопка.Пометка = Не Кнопка.Пометка;
	ПолеВводаНомера.ТолькоПросмотр = НЕ Кнопка.Пометка;
	ПолеВводаНомера.ПропускатьПриВводе = ПолеВводаНомера.ТолькоПросмотр;	
	ОбновитьПодсказкуКодНомерОбъекта(МетаданныеОбъекта, ПодменюДействия, ПолеВводаНомера);
	
	Если ПолеВводаНомераДубль <> Неопределено Тогда
		ПолеВводаНомераДубль.ТолькоПросмотр = ПолеВводаНомера.ТолькоПросмотр;
		ПолеВводаНомераДубль.ПропускатьПриВводе = ПолеВводаНомераДубль.ТолькоПросмотр;
		ОбновитьПодсказкуКодНомерОбъекта(МетаданныеОбъекта, ПодменюДействия, ПолеВводаНомераДубль);
	КонецЕсли;
	
	
КонецПроцедуры // ИзменениеВозможностиРедактированияНомера()

//	Процедура установки флага ТолькоПросмотр для поля ввода кода/номера в зависимости от стратегии автонумерации объекта
//
// Параметры
//  МетаданныеОбъекта  - метаданные объекта.
//  ФормаОбъекта      - форма объекта.
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать пункт "Редактировать код/номер"
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//
Процедура УстановитьДоступностьПоляВводаНомера(МетаданныеОбъекта, ФормаОбъекта, ПодменюДействия, ПолеВводаНомера) Экспорт
	
	Если ФормаОбъекта.Автонумерация = АвтонумерацияВФорме.Авто Тогда
		Возврат;
	КонецЕсли;	
	
	СтратегияРедактирования = ПолучитьСтратегиюРедактированияНомераОбъекта(МетаданныеОбъекта);
	
	Если СтратегияРедактирования = Перечисления.СтратегияРедактированияНомеровОбъектов.Доступно Тогда
		Если ПодменюДействия.Кнопки.Найти("РедактироватьКодНомер") <> Неопределено Тогда
			ПодменюДействия.Кнопки.Удалить(ПодменюДействия.Кнопки.РедактироватьКодНомер);
		КонецЕсли;
		ПолеВводаНомера.ТолькоПросмотр = Ложь;		
	КонецЕсли;
	
	ПолеВводаНомера.ПропускатьПриВводе = ПолеВводаНомера.ТолькоПросмотр;		
	УстановитьПодсказкуПоляВводаКодаНомера(ПолеВводаНомера, ПодменюДействия, СтратегияРедактирования);	
		
КонецПроцедуры // УстановитьДоступностьПоляВводаНомера()

//	Возвращает стратегию нумерациии для объекта
//
// Параметры
//	МетаданныеОбъекта - метаданные объекта
//
// Возвращаемое значение 
//  Стратегия нумерациии для объекта
//
Функция ПолучитьСтратегиюРедактированияНомераОбъекта(МетаданныеОбъекта) Экспорт
	КэшСтратегииАвтонумерации = глЗначениеПеременной("КэшСтратегииАвтонумерации");
	СтратегияРедактирования = КэшСтратегииАвтонумерации[МетаданныеОбъекта];
	Если СтратегияРедактирования = Неопределено Тогда
		СтратегияРедактирования = ПолучитьСтратегиюАвтонумерацииДляОбъекта(МетаданныеОбъекта);
		КэшСтратегииАвтонумерации.Вставить(МетаданныеОбъекта, СтратегияРедактирования);
	КонецЕсли;		
	Возврат СтратегияРедактирования;
КонецФункции // ПолучитьСтратегиюРедактированияНомераОбъекта()


//	Процедура установки текста подсказки для поля ввода кода/номера в зависимости от стратегии редактирования
//	и введенного значения
//
// Параметры
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать пункт "Редактировать код/номер"
//	СтратегияРедактирования - стратегия автонумерации объекта
//
Процедура УстановитьПодсказкуПоляВводаКодаНомера(ПолеВводаНомера, ПодменюДействия, СтратегияРедактирования)
		
	КодНомерСтрокой = ПолеВводаНомера.Данные;		
	
	Если ТипЗнч(ПолеВводаНомера) = Тип("ПолеВвода") Тогда
		ПолеВвода = ПолеВводаНомера;
	Иначе
		ПолеВвода = ПолеВводаНомера.ЭлементУправления;
	КонецЕсли;	
	
	Если ПустаяСтрока(ПолеВвода.Значение) Тогда
		ПолеВвода.Подсказка =  КодНомерСтрокой + " будет присвоен при записи объекта.";
	Иначе
		ПолеВвода.Подсказка =  "";
	КонецЕсли;
	
	//Если СтратегияРедактирования = Перечисления.СтратегияРедактированияНомеровОбъектов.НеДоступно
	//	И НЕ ПодменюДействия.Кнопки.РедактироватьКодНомер.Пометка Тогда
	//	ПолеВвода.Подсказка =  ПолеВвода.Подсказка + ?(ПустаяСтрока(ПолеВвода.Подсказка), "", " ") 
	//								 + "Для возможности редактирования " + ?(КодНомерСтрокой = "Номер", "номера", "кода") + " используйте подменю ""Действия"".";
	//КонецЕсли;
	
КонецПроцедуры // УстановитьПодсказкуПоляВводаКодаНомера()

//	Возвращает стратегию нумерациии для объекта, сохраненную в соотв. регистре сведений
//
// Параметры
//	МетаданныеОбъекта - метаданные объекта
//
// Возвращаемое значение 
//  Стратегия нумерациии для объекта
//
Функция ПолучитьСтратегиюАвтонумерацииДляОбъекта(МетаданныеОбъекта)
	
	Перем ТипОбъекта;
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		ТипОбъекта = "Справочники";
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		ТипОбъекта = "Документы";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		ТипОбъекта = "ПланыВидовХарактеристик";
	Иначе
		Возврат Перечисления.СтратегияРедактированияНомеровОбъектов.НеДоступно;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтратегияРедактированияНомераОбъекта КАК СтратегияРедактированияНомераОбъекта
	|ИЗ 
	|	РегистрСведений.СтратегииРедактированияНомеровОбъектов
	|ГДЕ
	|	ТипОбъекта = &ТипОбъекта
	|	И ВидОбъекта = &ВидОбъекта";
	
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.УстановитьПараметр("ВидОбъекта", МетаданныеОбъекта.Имя);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтратегияРедактированияНомераОбъекта;
	Иначе
		Возврат Перечисления.СтратегияРедактированияНомеровОбъектов.НеДоступно;
	КонецЕсли;	
	
КонецФункции // ПолучитьСтратегиюАвтонумерацииДляОбъекта()

//	Процедура обновления текста подсказки для поля ввода кода/номера
//
// Параметры
//	МетаданныеОбъекта - метаданные объекта
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать пункт "Редактировать код/номер"
//
Процедура ОбновитьПодсказкуКодНомерОбъекта(МетаданныеОбъекта, ПодменюДействия, ПолеВводаНомера) Экспорт
	УстановитьПодсказкуПоляВводаКодаНомера(ПолеВводаНомера, ПодменюДействия, ПолучитьСтратегиюРедактированияНомераОбъекта(МетаданныеОбъекта));
КонецПроцедуры // ОбновитьПодсказкуКодНомерОбъекта()

//	Процедура очистки введенного кода/номера объекта
// Параметры
//  ЭтотОбъект  - объект.
//	КодНомер - имя обрабатываемого реквизита (Код или Номер)
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать пункт "Редактировать код/номер"
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//
Процедура СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, КодНомер, ПодменюДействия, ПолеВводаНомера) Экспорт
	ЭтотОбъект[КодНомер] = "";
	ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ПодменюДействия, ПолеВводаНомера);
КонецПроцедуры // СброситьУстановленныйКодНомерОбъекта()

///////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЛАНОВ ВИДОВ РАСЧЕТА


Процедура УстановитьОтборыИСверткуПоказателей(ЭлементыФормы, Показатели, ПроизвольнаяФормулаРасчета = Истина) Экспорт
	
	ПоказателиДляОтбора = Новый СписокЗначений;
	Если ПроизвольнаяФормулаРасчета Тогда
		Для Каждого СтрокаПоказатель Из Показатели Цикл
			Показатель = СтрокаПоказатель.Показатель;
			Если Показатель.ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется И Не Показатель.Предопределенный
				И Не (Показатель.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная Или Показатель.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
				И Не (Показатель.ТарифнаяСтавка ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная
				ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная 
				ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)Тогда
				
				ПоказателиДляОтбора.Добавить(Показатель);
			КонецЕсли;
		КонецЦикла;
		ЭлементыФормы.Показатели.ОтборСтрок.Показатель.Использование = Истина;
		ЭлементыФормы.Показатели.ОтборСтрок.Показатель.ВидСравнения = ВидСравнения.ВСписке;
		ЭлементыФормы.Показатели.ОтборСтрок.Показатель.Значение = ПоказателиДляОтбора;
	КонецЕсли;
	
	ИзменитьВидимостьПанелиПоВертикалиНиз(ЭлементыФормы.ПанельПредставлениеФормулы, ПоказателиДляОтбора.Количество() <> 0, ЭлементыФормы.СпособРасчетаПредставление, ЭлементыФормы.ПанельПоказателей, ЭлементыФормы.РазделительПоказателей)
	
КонецПроцедуры

Функция ПроверитьПВРНаПустыеСтрокиВТЧ(ВидРасчета, ЕстьВытесняющиеВидыРасчета = Ложь) Экспорт
	
	КоничествоСтрок = ВидРасчета.БазовыеВидыРасчета.Количество() - 1;
	НомерСтроки = 0;
	Пока НомерСтроки <= КоничествоСтрок Цикл
		СтрокаБазовыйРасчет = ВидРасчета.БазовыеВидыРасчета[НомерСтроки];
		Если Не ЗначениеЗаполнено(СтрокаБазовыйРасчет.ВидРасчета) Тогда
			ВидРасчета.БазовыеВидыРасчета.Удалить(НомерСтроки );
			КоничествоСтрок = КоничествоСтрок - 1;
		Иначе
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	КоничествоСтрок = ВидРасчета.ВедущиеВидыРасчета.Количество() - 1;
	НомерСтроки = 0;
	Пока НомерСтроки <= КоничествоСтрок Цикл
		СтрокаВедущийРасчет = ВидРасчета.ВедущиеВидыРасчета[НомерСтроки];
		Если Не ЗначениеЗаполнено(СтрокаВедущийРасчет.ВидРасчета) Тогда
			ВидРасчета.ВедущиеВидыРасчета.Удалить(НомерСтроки );
			КоничествоСтрок = КоничествоСтрок - 1;
		Иначе
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВытесняющиеВидыРасчета Тогда
		
		КоничествоСтрок = ВидРасчета.ВытесняющиеВидыРасчета.Количество() - 1;
		НомерСтроки = 0;
		Пока НомерСтроки <= КоничествоСтрок Цикл
			СтрокаВытесняющейРасчет = ВидРасчета.ВытесняющиеВидыРасчета[НомерСтроки];
			Если Не ЗначениеЗаполнено(СтрокаВытесняющейРасчет.ВидРасчета) Тогда
				ВидРасчета.ВытесняющиеВидыРасчета.Удалить(НомерСтроки );
				КоничествоСтрок = КоничествоСтрок - 1;
			Иначе
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецФункции

// Проверяет правильность заполнения реквизитов вида расчета 
// для некуоторых случаев выдает сообщение об ошибке
// для некоторых - возвращает текст сообщения
// 	Параметры:
//		ВидРасчета - объект Вид расчета
//		Отказ - признак отказа (проверка не прошла)
//	Возвращаемое значение:
//		ТекстСообщения - текст сообщения о результате проверки
Функция ПроверитьНастройкуВидаРасчета(ВидРасчета, Отказ, ПроверятьСоответствиеБазовыхИВедущихРасчетов = Истина, ОбработкаКомментариев) Экспорт

	МетаданныеВидаРасчета = ВидРасчета.Метаданные();
	
	ВидРасчетаЯвляетсяНачислением = МетаданныеВидаРасчета <> Метаданные.ПланыВидовРасчета.УдержанияОрганизаций
								  И МетаданныеВидаРасчета <> Метаданные.ПланыВидовРасчета.УправленческиеУдержания;
	
	Если НЕ ЗначениеЗаполнено(ВидРасчета.Наименование) Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Не задано наименование " + ?(ВидРасчетаЯвляетсяНачислением, "начисления", "удержания") + "!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли; 

	ЕстьРеквизитСпособРасчета = МетаданныеВидаРасчета.Реквизиты.Найти("СпособРасчета") <> Неопределено;
	Если ЕстьРеквизитСпособРасчета И НЕ ЗначениеЗаполнено(ВидРасчета.СпособРасчета) Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Не задан способ расчета!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли;

	ЕстьРеквизитКатегорияНачисления = МетаданныеВидаРасчета.Реквизиты.Найти("КатегорияНачисления") <> Неопределено;
	Если ЕстьРеквизитКатегорияНачисления и НЕ ЗначениеЗаполнено(ВидРасчета.КатегорияНачисления) Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Не задана последовательность расчета!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли; 

	// Вид расчета не может входить в собственную базу
	ВидРасчетаСсылка = ВидРасчета.Ссылка;

	// рассчитываем на то, что данная функция вызывается для видов расчета с поддержкой базового периода
	Если ВидРасчета.БазовыеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  Неопределено Тогда
		// в расчетную базу входят только начисления
		ОбработкаКомментариев.ДобавитьСообщение("Начисление не может быть включено в состав собственной расчетной базы!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли;

	Если ВидРасчета.ВедущиеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  Неопределено Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Начисление не может быть включено в состав собственной таблицы ведущих начислений!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли;
	
	ЕстьРеквизитПроизвольнаяФормулаРасчета = МетаданныеВидаРасчета.Реквизиты.Найти("ПроизвольнаяФормулаРасчета") <> Неопределено;
	Если ЕстьРеквизитПроизвольнаяФормулаРасчета И ВидРасчета.ПроизвольнаяФормулаРасчета И Не ЗначениеЗаполнено(ВидРасчета.ФормулаРасчета) Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Не заполнена формула расчета!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина
	КонецЕсли;
	
	// если поддерживается период действия
	Если МетаданныеВидаРасчета.ИспользованиеПериодаДействия Тогда
		Если ВидРасчета.ВытесняющиеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  Неопределено Тогда
			ОбработкаКомментариев.ДобавитьСообщение("Начисление не может быть включено в состав собственной таблицы вытесняющих начислений!", Перечисления.ВидыСообщений.Ошибка);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстСообщения = "";
	Если ЕстьРеквизитКатегорияНачисления и ВидРасчетаЯвляетсяНачислением Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БазовыеВидыРасчета.ВидРасчета
		|ПОМЕСТИТЬ ВТ_ТаблицаБазовыхВидовРасчета
		|ИЗ
		|	&ТаблицаБазовыхВидовРасчета КАК БазовыеВидыРасчета";
		
		ТаблицаБазовыхВидовРасчета = Видрасчета.БазовыеВидыРасчета.Выгрузить();
		ТаблицаБазовыхВидовРасчета.Колонки.Добавить("Ссылка");
		ТаблицаБазовыхВидовРасчета.ЗаполнитьЗначения(Видрасчета,"Ссылка");
		Запрос.УстановитьПараметр("ТаблицаБазовыхВидовРасчета", ТаблицаБазовыхВидовРасчета);
		Запрос.Выполнить();

		Если МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.УправленческиеНачисления Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(МАКСИМУМ(БазовыеВидыРасчета.ВидРасчета.КатегорияНачисления.Код), """") КАК МаксимальныйИндексКатегории,
			|	ЛОЖЬ КАК ЕстьДополнительныеВР,
			|	ИСТИНА КАК ЕстьОсновныеВР
			|ИЗ
			|	ВТ_ТаблицаБазовыхВидовРасчета КАК БазовыеВидыРасчета
			|ГДЕ
			|	БазовыеВидыРасчета.ВидРасчета.Наименование ЕСТЬ НЕ NULL ";
			
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(МАКСИМУМ(БазовыеВидыРасчета.ВидРасчета.КатегорияНачисления.Код), """") КАК МаксимальныйИндексКатегории,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА БазовыеВидыРасчета.ВидРасчета ССЫЛКА ПланВидовРасчета.ДополнительныеНачисленияОрганизаций
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ), ЛОЖЬ) КАК ЕстьДополнительныеВР,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА БазовыеВидыРасчета.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ), ЛОЖЬ) КАК ЕстьОсновныеВР
			|ИЗ
			|	ВТ_ТаблицаБазовыхВидовРасчета КАК БазовыеВидыРасчета
			|ГДЕ
			|	БазовыеВидыРасчета.ВидРасчета.Наименование ЕСТЬ НЕ NULL ";
		КонецЕсли;
		
		Категории = Запрос.Выполнить().Выбрать();
		Если Категории.Следующий() Тогда
			МаксимальныйИндексКатегории = Категории.МаксимальныйИндексКатегории;
			ЕстьДополнительныеВР = Категории.ЕстьДополнительныеВР;
			ЕстьОсновныеВР = Категории.ЕстьОсновныеВР;
		Иначе
			МаксимальныйИндексКатегории = "";
			ЕстьДополнительныеВР = Ложь;
			ЕстьОсновныеВР = Ложь;
		КонецЕсли;
		
		// Если в базу доп.начислений входят только основные, тогда категория расчета нам не интересна 
		НеПроверять = МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций И Не ЕстьДополнительныеВР И ЕстьОсновныеВР;
		
		Если НеПроверять Тогда // ничего не делаем
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	МАКСИМУМ(КатегорииРасчетов.Код) КАК МаксимальныйИндексКатегории
			|ИЗ
			|	Справочник.КатегорииРасчетов КАК КатегорииРасчетов";
			
			Категории = Запрос.Выполнить().Выбрать();
			Категории.Следующий();
			МаксимальныйКодВСправочнике = Категории.МаксимальныйИндексКатегории;
		
			Если МаксимальныйИндексКатегории = МаксимальныйКодВСправочнике Тогда
				
				// В базе расчетов есть расчеты с максимальной категорией
				ТекстСообщения = "Откорректируйте состав базовых видов расчетов. В базу расчетов не должны входить расчеты с категорией начислений ""Зависимое третьего уровня""!.";
				
			Иначе
				
				ИндексВыбраннойКатегории = ВидРасчета.КатегорияНачисления.Код;
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	МИНИМУМ(КатегорииРасчетов.Код) КАК ИндексКатегории
				|ИЗ
				|	Справочник.КатегорииРасчетов КАК КатегорииРасчетов
				|ГДЕ
				|	КатегорииРасчетов.Код > &Код";
				
				Запрос.УстановитьПараметр("Код", МаксимальныйИндексКатегории);
				Категории = Запрос.Выполнить().Выбрать();
				Категории.Следующий();
				ОжидаемаяКатегорияКод = Категории.ИндексКатегории;
				ОжидаемаяКатегория = Справочники.КатегорииРасчетов.НайтиПоКоду(ОжидаемаяКатегорияКод);
				Если ИндексВыбраннойКатегории <= МаксимальныйИндексКатегории Тогда
					// Категория начислений вида расчета должна быть на уровень выше любого из видов расчетов, составляющих базу расчета
					// Пользователь установил категорию меньше чем самая максимальная категория базы расчетов
					МаксимальнаяКатегорияБазы = Справочники.КатегорииРасчетов.НайтиПоКоду(МаксимальныйИндексКатегории);
					ТекстСообщения = "Неверно установлена категория начислений. В базу расчетов входят расчеты с категорией """ + МаксимальнаяКатегорияБазы + """. Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """!";
				ИначеЕсли ИндексВыбраннойКатегории > ОжидаемаяКатегорияКод тогда
					// Категория слишком большая - предупредим
					Если Не ЗначениеЗаполнено(МаксимальныйИндексКатегории) Тогда  // нет в базе ничего
						Если ЕстьРеквизитСпособРасчета Тогда
							Если ТипЗнч(ВидРасчета.Ссылка) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
								Если ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом 
									Или ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка
									Или ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом
									Или ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
									
									ТекстСообщения = "Рекомендуется заполнить базовые начисления!";
								Иначе
									БылоСообщение = Ложь;
									Для Каждого Показатель Из ВидРасчета.Показатели Цикл
										Если  Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза
											Или Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза
											Или Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза
											Или Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза
											Или Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза Тогда
											ТекстСообщения = "Рекомендуется заполнить базовые начисления!";
											БылоСообщение = Истина;
										КонецЕсли;
									КонецЦикла;
									Если Не БылоСообщение Тогда
										ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. для вида расчета не заданы базовые начисления или для базовых начислений не заданы категории начисления!";								
									КонецЕсли;
								КонецЕсли;
							Иначе
								ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. для вида расчета не заданы базовые начисления или для базовых начислений не заданы категории начисления!";
							КонецЕсли;
						КонецЕсли;
					Иначе
						МаксимальнаяКатегорияБазы = Справочники.КатегорииРасчетов.НайтиПоКоду(МаксимальныйИндексКатегории);
						ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. максимальной категорией среди базовых расчетов является категория """ + МаксимальнаяКатегорияБазы + """!";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	// Проверим соответствие списков базовых и ведущих расчетов
	Если ПроверятьСоответствиеБазовыхИВедущихРасчетов Тогда
		Для Каждого СтрокаБазовыйРасчет из ВидРасчета.БазовыеВидыРасчета Цикл
			
			Если ВидРасчета.ВедущиеВидыРасчета.Найти(СтрокаБазовыйРасчет.ВидРасчета,"ВидРасчета") = Неопределено Тогда
				ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения),Символы.ПС,"") + "Список ведущих видов расчета отличается от списка базовых расчетов. Рекомендуется синхронизировать указанные списки!";
				Прервать;
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли; 
		
	// Если ВР связан со средним заработком, проверим, чтобы был заполнен реквизит "ПериодРасчетаСреднегоЗаработка"
	ЕстьРеквизитПериодРасчетаСреднегоЗаработка = МетаданныеВидаРасчета.Реквизиты.Найти("ПериодРасчетаСреднегоЗаработка") <> Неопределено;
	Если ЕстьРеквизитСпособРасчета и ЕстьРеквизитПериодРасчетаСреднегоЗаработка Тогда
	
		Если ПроведениеРасчетов.ПолучитьСписокНачисленийПоСреднемуЗаработку().НайтиПоЗначению(ВидРасчета.СпособРасчета) <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(ВидРасчета.ПериодРасчетаСреднегоЗаработка) и ВидРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору Тогда
				ОбработкаКомментариев.ДобавитьСообщение("Необходимо задать количество месяцев для расчета среднего заработка!", Перечисления.ВидыСообщений.Ошибка);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если ВР связан со средним заработком, проверим, чтобы был заполнен реквизит "ПериодРасчетаСреднегоЗаработка"
	ЕстьРеквизитСтавкаПервогоРазряда = МетаданныеВидаРасчета.Реквизиты.Найти("СтавкаПервогоРазряда") <> Неопределено;
	Если ЕстьРеквизитСпособРасчета и ЕстьРеквизитСтавкаПервогоРазряда Тогда
	
		Если ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоРазряда Тогда
			Если НЕ ЗначениеЗаполнено(ВидРасчета.СтавкаПервогоРазряда) Тогда
				ОбработкаКомментариев.ДобавитьСообщение("Необходимо задать Ставку первого разряда!", Перечисления.ВидыСообщений.Ошибка);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		//vvv
		Если ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоРазрядаПропорциональноОтработанномуВремени Тогда
			Если НЕ ЗначениеЗаполнено(ВидРасчета.СтавкаПервогоРазряда) Тогда
				ОбработкаКомментариев.ДобавитьСообщение("Необходимо задать Ставку первого разряда!", Перечисления.ВидыСообщений.Ошибка);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		//
		
	КонецЕсли;

	
	// Проверим соответствие способа отражения, кода ЕСН и отношения к ЕНВД
	Если (МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.ОсновныеНачисленияОрганизаций 
		или МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций)
		и ВидРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Тогда
		
		Если Не ЗначениеЗаполнено(ВидРасчета.СпособОтраженияВБухучете)Тогда
			// не задан способ отражения 
			//Если ВидРасчета.КодДоходаЕСН = Справочники.ДоходыЕСН.РаспределятьПоБазовымНачислениям Тогда
			//	ОписаниеОшибкиТекст = "Порядок налогообложения начисления единым социальным налогом ""Распределять по базовым начислениям""
			//	|имеет смысл указывать для тех начислений, отражение в бухгалтерском учете которых также определяется по базовым начислениям";
			//	Отказ = Истина;
			//	ОбработкаКомментариев.ДобавитьСообщение(ОписаниеОшибкиТекст, Перечисления.ВидыСообщений.Ошибка);
			//КонецЕсли;
			//Если ЗначениеЗаполнено(ВидРасчета.ОтнесениеРасходовКДеятельностиЕНВД)
			//	и ВидРасчета.ОтнесениеРасходовКДеятельностиЕНВД <> Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются Тогда
			//	ОписаниеОшибкиТекст = "Учет по видам деятельности, облагаемым ЕНВД, должен соответствовать порядку отражения начисления в бухучете. Значения «ЕНВД (Расходы относятся к деятельности, облагаемой ЕНВД)» или «Не ЕНВД (Расходы относятся к деятельности, не облагаемой ЕНВД)» имеет смысл указывать, только если задан конкретный способ отражения в учете";
			//	Отказ = Истина;
			//	ОбработкаКомментариев.ДобавитьСообщение(ОписаниеОшибкиТекст, Перечисления.ВидыСообщений.Ошибка);
			//КонецЕсли;	
			
		ИначеЕсли ЗначениеЗаполнено(ВидРасчета.СпособОтраженияВБухучете.СчетДт) Тогда
			//задан конкретный способ отражения
			//Если ВидРасчета.КодДоходаЕСН = Справочники.ДоходыЕСН.РаспределятьПоБазовымНачислениям Тогда
			//	ОписаниеОшибкиТекст = "Порядок налогообложения начисления единым социальным налогом ""Распределять по базовым начислениям""
			//	|имеет смысл указывать для тех начислений, отражение в бухгалтерском учете которых также определяется по базовым начислениям";
			//	Отказ = Истина;
			//	ОбработкаКомментариев.ДобавитьСообщение(ОписаниеОшибкиТекст, Перечисления.ВидыСообщений.Ошибка);
			//КонецЕсли;
			
			//ЭтоЕНВД = СтатьяЗатратСпособаОтраженияОтноситсяКЕНВД(ВидРасчета.СпособОтраженияВБухучете);
			//
			//Если ЭтоЕНВД = Неопределено Тогда
			//	// у способа отражения нет статьи затрат
			//	
			//ИначеЕсли ЭтоЕНВД Тогда
			//	// способ отражения в бухучете относится к ЕНВД
			//	Если ВидРасчета.КодДоходаЕСН = Справочники.ДоходыЕСН.ВыплатыЗаСчетПрибыли Тогда
			//		ОписаниеОшибкиТекст = "Учет по видам деятельности, облагаемым ЕНВД противоречит порядку налогообложения начисления единым социальным налогом.
			//		|Для начисления задан порядок налогообложения единым социальным налогом ""Не является объектом налогообложения ЕСН, взносами в ПФР согласно п.3 ст. 236 НК РФ (выплаты за счет прибыли)""";
			//		Отказ = Истина;
			//		ОбработкаКомментариев.ДобавитьСообщение(ОписаниеОшибкиТекст, Перечисления.ВидыСообщений.Ошибка);
			//	КонецЕсли;
			//	Если ВидРасчета.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД Тогда
			//		ОписаниеОшибкиТекст = "Учет по видам деятельности, облагаемым ЕНВД противоречит заданному способу отражения в бухучете.
			//		|У способа отражения задана статья затрат ЕНВД";
			//		Отказ = Истина;
			//		ОбработкаКомментариев.ДобавитьСообщение(ОписаниеОшибкиТекст, Перечисления.ВидыСообщений.Ошибка);
			//	КонецЕсли;
			//Иначе
			//	Если ВидРасчета.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД Тогда
			//		ОписаниеОшибкиТекст = "Учет по видам деятельности, облагаемым ЕНВД противоречит заданному способу отражения в бухучете.
			//		|У способа отражения задана статья затрат Не ЕНВД";
			//		Отказ = Истина;
			//		ОбработкаКомментариев.ДобавитьСообщение(ОписаниеОшибкиТекст, Перечисления.ВидыСообщений.Ошибка);
			//	КонецЕсли;
			//КонецЕсли;
			
		Иначе // задан способ отражения с пустым счетом дебета, т.е. распределение по базовым начислениям	
			
			//Если ЗначениеЗаполнено(ВидРасчета.ОтнесениеРасходовКДеятельностиЕНВД)
			//	и ВидРасчета.ОтнесениеРасходовКДеятельностиЕНВД <> Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются Тогда
			//	ОписаниеОшибкиТекст = "Учет по видам деятельности, облагаемым ЕНВД, должен соответствовать порядку отражения начисления в бухучете. Значения «ЕНВД (Расходы относятся к деятельности, облагаемой ЕНВД)» или «Не ЕНВД (Расходы относятся к деятельности, не облагаемой ЕНВД)» имеет смысл указывать, только если задан конкретный способ отражения в учете";
			//	Отказ = Истина;
			//	ОбработкаКомментариев.ДобавитьСообщение(ОписаниеОшибкиТекст, Перечисления.ВидыСообщений.Ошибка);
			//КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстСообщения;

КонецФункции //ПроверитьНастройкуВидаРасчета

// Процедура открывает редактор формуль расчета из вида расчета
//
// Параметры
//  ФормаПВР  - форма вида расчета из которой вызывается редактор формул расчета
//	Показатели - таблица показателей 
//  Наименование - наименование вида расчета
//  ФормулаРасчета - формула расчета
//
Процедура ОткрытьФормуРедактированияФормулы(ФормаПВР, Показатели, Наименование, ФормулаРасчета, ВидРасчета, ВидПВР = "") Экспорт 
	
	РедакторФормулРасчета = ПолучитьОбщуюФорму("РедакторФормулРасчета", ФормаПВР);
	РедакторФормулРасчета.Заголовок = "Редактирование формулы расчета: " + Наименование;
	
	ПоказателиДляФормыВвода = Новый СписокЗначений;
	
	ФормулаРасчетаДляФормулы = ФормулаРасчета;
	
	ФормулаРасчетаДляФормулы = СтрЗаменить(ФормулаРасчетаДляФормулы,"ПроведениеРасчетов.", "");

	
	Для Каждого Показатель Из Показатели Цикл
		
		//ПоказательДляФормулы = Строка(Показатель.Показатель.Идентификатор);
		//				
		//ФормулаРасчетаДляФормулы	= СтрЗаменить(ФормулаРасчетаДляФормулы, "ИсходныеДанные.Показатель"+Показатель.НомерСтроки, ПоказательДляФормулы);
		//
		ПоказателиДляФормыВвода.Добавить(Показатель.Показатель);
		
	КонецЦикла;
	
	ФормулаРасчетаДляФормулы = ПроведениеРасчетов.ПолучитьHTLMКодФормулыРасчета(ФормулаРасчетаДляФормулы, Показатели, "Текст", Истина);

	
	РедакторФормулРасчета.ВидРасчета	= ВидРасчета;
	РедакторФормулРасчета.Показатели	= ПоказателиДляФормыВвода;	
	РедакторФормулРасчета.ФормулаРасчета= ФормулаРасчетаДляФормулы;
	РедакторФормулРасчета.ВидПВР		= ВидПВР;
	РедакторФормулРасчета.Открыть();
	

КонецПроцедуры //ОткрытьФормуРедактированияФормулы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРЕДСТАВЛЕНИЯ ИНФОРМАЦИИ В ФОРМЕ

// По описателям состояния расчетного документа (флажкам) формирует текст инфо-строки и важность сообщения
//
// Параметры
//	НеЗаполнен,ЗаполненСОшибками,Рассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Отсторнирован - булево (все)
//		описывают достижение документом того или иного состояния
//
// Возвращаемое значение:
//	Структура из двух строковых значений - ТекстСообщения и ВажностьСообщения
//
Функция ПолучитьОписаниеРасчетногоДокумента(Заполнен = Ложь, ЗаполненСОшибками = Ложь, Рассчитан = Ложь, Проведен = Ложь, ЭтоИсправление = Ложь, ДокументИсправлен = Ложь, Отсторнирован = Ложь, ИмеетПродолжение = Ложь, ЯвляетсяПродолжением = Ложь) Экспорт 

	ТекстСообщения = "";
	ВажностьСообщения = "";
	
	Если Не Заполнен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ не заполнен";
	ИначеЕсли ЭтоИсправление Тогда
		ТекстСообщения = "Документ является исправлением документа прошлого периода; ";
		Если ДокументИсправлен Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			Если Не Рассчитан Тогда
				ТекстСообщения = ТекстСообщения + "не был рассчитан, но ";
			КонецЕсли;
			ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
		ИначеЕсли ЗаполненСОшибками Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			ТекстСообщения = ТекстСообщения + "поля документа заполнены не полностью или неверно";
		ИначеЕсли Не Рассчитан Тогда
			ВажностьСообщения = "ВажнаяИнформация";
			ТекстСообщения = ТекстСообщения + "документ не рассчитан";
		ИначеЕсли Рассчитан И Не Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "рассчитан, но не проведен";
		ИначеЕсли Рассчитан И Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "рассчитан и проведен";
		КонецЕсли;
	ИначеЕсли ДокументИсправлен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ ";
		Если Не Рассчитан Тогда
			ТекстСообщения = ТекстСообщения + "не был рассчитан, но ";
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
	ИначеЕсли Отсторнирован Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ был отменен полностью (отсторнирован); редактирование документа запрещено";
	ИначеЕсли ЗаполненСОшибками Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Поля документа заполнены не полностью или неверно";
	ИначеЕсли Не Рассчитан Тогда
		ВажностьСообщения = "ВажнаяИнформация";
		ТекстСообщения = "Документ не рассчитан";
	ИначеЕсли Рассчитан И Не Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ рассчитан, но не проведен";
	ИначеЕсли Рассчитан И Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ рассчитан и проведен";
	КонецЕсли;
	
	ТекстПродолжений = "";
	Если ЯвляетсяПродолжением Тогда
		ТекстПродолжений = "Этот больничный является б/л-продолжением. ";
	КонецЕсли;
	Если ИмеетПродолжение Тогда
		ТекстПродолжений = ТекстПродолжений + "Этот больничный имеет продолжение. ";
	КонецЕсли;
	
	Возврат Новый Структура("ТекстСообщения,ВажностьСообщения", ТекстПродолжений + ТекстСообщения, ВажностьСообщения)

КонецФункции

// Выводит надпись и соответствующую ей картинку
//
// Параметры
//  ЭУНадпись, ЭУКартинка - элементы управления формы, соответственно надпись и картинка
//  ТекстСообщения - строка - выводимое сообщение
//  ВажностьСообщения - строка - определяет расцветку текста и картинку
//		допустимые значения: "СообщениеОПроблемах", "ВажнаяИнформация" и "Информация"
//
Процедура ПоказатьИнформациюОДокументе(ЭУНадпись = Неопределено, ЭУКартинка = Неопределено, ТекстСообщения = "", ВажностьСообщения = "") Экспорт 

	Если ЭУНадпись = Неопределено Или ЭУКартинка = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ВажностьСообщения = "ВажнаяИнформация" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеВажнаяИнформация;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияВажнойИнформации;
	ИначеЕсли ВажностьСообщения = "СообщениеОПроблемах" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеОПроблемах;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияОПроблемах;
	ИначеЕсли ВажностьСообщения = "Ошибка" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеОшибка;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияОПроблемах;
	Иначе
		ЭУКартинка.Картинка	= БиблиотекаКартинок.СообщениеИнформация;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияИнформации;
	КонецЕсли;
	ЭУНадпись.Заголовок = ТекстСообщения;
	
КонецПроцедуры // ПоказатьИнформациюОДокументе()


///////////////////////////////////////////////////////////////////////////////
// ИСПРАВЛЕНИЕ ДОКУМЕНТОВ

// В документах на одного сотрудника (отпуск, б/л и пр.) в зависимости от состояния 
// 	документа кнопки исправлений либо не показываются вообще, либо показывается одна из них
//
// Параметры
//	ПериодРегистрацииДокумента - дата - определяет месяц начисления документа
//  ДокументИсправлен, ДокументСторнирован - булево, флажки состояния документа
//	Кнопки - коллекция кнопок соответствующей панели документа
//  КнопкаИсправление, КнопкаОтменаИсправление - кнопки-эталоны
//
Процедура УстановитьКнопкиИсправленияДокументаОдногоСотрудника(ПериодРегистрацииДокумента, ДокументИсправлен, ДокументСторнирован, Кнопки, КнопкаИсправление, КнопкаОтменаИсправление) Экспорт

	Если Кнопки.Найти(КнопкаИсправление.Имя) <> Неопределено Или Кнопки.Найти(КнопкаОтменаИсправление.Имя) <> Неопределено Тогда
		СтароеИмя = Кнопки[Кнопки.Количество() - 1].Имя;
		НовоеИмя = "";
		Если Не ДокументСторнирован Тогда // Документ не был отсторнирован
			Если ДокументИсправлен Тогда  // Документ исправлен
				НовоеИмя = КнопкаОтменаИсправление.Имя;
			ИначеЕсли ПериодРегистрацииДокумента < НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
				НовоеИмя = КнопкаИсправление.Имя;
			КонецЕсли;
		КонецЕсли;
		Если НовоеИмя <> СтароеИмя Тогда
			Кнопки.Удалить(Кнопки.Количество() - 1);
			Если НовоеИмя = КнопкаОтменаИсправление.Имя Тогда
				НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаОтменаИсправление.Действие);
				ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаОтменаИсправление);
			ИначеЕсли НовоеИмя = КнопкаИсправление.Имя Тогда
				НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаИсправление.Действие);
				ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаИсправление);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не ДокументСторнирован Тогда // Документ не был отсторнирован
		Если ДокументИсправлен Тогда  // Документ исправлен
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаОтменаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаОтменаИсправление);
		ИначеЕсли ПериодРегистрацииДокумента < НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаИсправление);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура создает новый документ, заполняет его данными исправляемого документа 
// 	и предъявляет пользователю для дальнейшей работы
//
// Параметры
//	ИсправляемыйДокумент - тип ДокументОбъект.<Имя документа> - документ, для которого вводится исправление
//  ФормаИсправляемогоДокумента - форма этого документа
//  Сотрудники - массив сотрудников, по которым выполняется исправление; необязательный, если не указан - по всем
//
Функция ВвестиДокументИсправление(ИсправляемыйДокумент, ФормаИсправляемогоДокумента = Неопределено, Сотрудники = Неопределено, ПериодРегистрации = Неопределено) Экспорт 
	
	Если ИсправляемыйДокумент.Проведен Тогда
		
		Если ФормаИсправляемогоДокумента <> Неопределено Тогда
			ТекстВопроса = "Для исправления необходимо записать документ. Продолжить?";
			Если Не ЗаписатьДокументПередВыполнениемДействия(ИсправляемыйДокумент, ФормаИсправляемогоДокумента, ТекстВопроса) Тогда
				Возврат Неопределено
			КонецЕсли;
		КонецЕсли;

		Исправление = Документы[ИсправляемыйДокумент.Метаданные().Имя].СоздатьДокумент();
		Исправление.ПериодРегистрации = Макс(?(ЗначениеЗаполнено(ПериодРегистрации),ПериодРегистрации,НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату())),ДобавитьМесяц(ИсправляемыйДокумент.ПериодРегистрации,1));
		Исправление.ЗаполнитьПоПерерассчитываемомуДокументу(ИсправляемыйДокумент, Сотрудники);
		ФормаДокумента = Исправление.ПолучитьФорму(,,ИсправляемыйДокумент.Ссылка);
		ФормаДокумента.Открыть();
		
		Возврат ФормаДокумента
		
	Иначе
		ВывестиПредупреждение("Исправить можно только проведенный документ!");
		Возврат Неопределено
	КонецЕсли;

КонецФункции

// Процедура собирает данные о существующих документах-исправлениях всех уровней,
// 	и формирует текст информирования пользователя, показывает его и запрашивает согласие 
// 	пользователя на удаление исправлений.
// 	Если пользователь согласился, очищает в найденных документах-исправлениях  
// 	поле ПерерассчитываемыйДокумент и помечает документы на удаление.
//
// Параметры
//	ИсправленныйДокумент - тип ДокументСсылка.<Имя документа> - ошибочно исправленный документ
//
Процедура ОтменитьИсправлениеДокумента(ИсправленныйДокумент) Экспорт 
	
	МетаданныеДокумента = ИсправленныйДокумент.Метаданные();
	РежимПоиска = ?(МетаданныеДокумента.Реквизиты.Найти("Сотрудник") = Неопределено, "КритерийОтбора","ТаблицаДокумента");	
	ИмяДокумента = МетаданныеДокумента.Имя;

	ИсправленияКОтмене = Новый Массив;
	Исправление = ПроведениеРасчетов.ПолучитьДокументИсправление(ИсправленныйДокумент, РежимПоиска, ИмяДокумента);
	Пока ЗначениеЗаполнено(Исправление) Цикл
		
		Если РежимПоиска = "КритерийОтбора" Тогда
			ИсправлениеСледующегоУровня = Новый Массив;
			Для каждого Значение Из Исправление Цикл
				ИсправленияКОтмене.Добавить(Значение);
				Для каждого ЗначениеСледующегоУровня Из ПроведениеРасчетов.ПолучитьДокументИсправление(Значение, РежимПоиска, ИмяДокумента) Цикл
					ИсправлениеСледующегоУровня.Добавить(ЗначениеСледующегоУровня);
				КонецЦикла;
			КонецЦикла;
			Исправление = ИсправлениеСледующегоУровня;
		Иначе
			ИсправленияКОтмене.Добавить(Исправление);
			Исправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Исправление, РежимПоиска, ИмяДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	ВсегоИсправлений = ИсправленияКОтмене.Количество();
	Если ВсегоИсправлений <> 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Исправления",ИсправленияКОтмене);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(Документы.ПериодРегистрации) КАК ПериодРегистрацииС,
		|	МАКСИМУМ(Документы.ПериодРегистрации) КАК ПериодРегистрацииПо,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Документы.ПериодРегистрации) КАК ВсегоПериодовРегистрации
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК Документы
		|ГДЕ
		|	Документы.Ссылка В (&Исправления)";
		Запрос.Выполнить();
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Если Выборка.ВсегоПериодовРегистрации = 1 Тогда
			Месяц = Формат(Выборка.ПериодРегистрацииС, "ДФ=MMMM");
			ПроцедурыУправленияПерсоналом.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 5, Перечисления.ПолФизическихЛиц.Мужской);
			ОписаниеПериода = НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г."
		ИначеЕсли Выборка.ВсегоПериодовРегистрации = 2 Тогда
			Месяц = Формат(Выборка.ПериодРегистрацииС, "ДФ=MMMM");
			ПроцедурыУправленияПерсоналом.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 5, Перечисления.ПолФизическихЛиц.Мужской);
			ОписаниеПериода = НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г. и "; 
			Месяц = Формат(Выборка.ПериодРегистрацииПо, "ДФ=MMMM");
			ПроцедурыУправленияПерсоналом.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 5, Перечисления.ПолФизическихЛиц.Мужской);
			ОписаниеПериода = ОписаниеПериода + НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г." 
		Иначе
			Месяц = Формат(Выборка.ПериодРегистрацииС, "ДФ=MMMM");
			ПроцедурыУправленияПерсоналом.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 2, Перечисления.ПолФизическихЛиц.Мужской);
			ОписаниеПериода = "в период с " + НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г. по "; 
			Месяц = Формат(Выборка.ПериодРегистрацииПо, "ДФ=MMMM");
			ПроцедурыУправленияПерсоналом.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 1, Перечисления.ПолФизическихЛиц.Мужской);
			ОписаниеПериода = ОписаниеПериода + НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г." 
		КонецЕсли;
		
		ТекстВопроса =  ОбщегоНазначения.ФормаМножественногоЧисла("Найден ","Найдено ","Найдено ",ВсегоИсправлений) + ВсегоИсправлений 
					+ ОбщегоНазначения.ФормаМножественногоЧисла(" документ-исправление"," документа-исправления"," документов-исправлений",ВсегоИсправлений) 
					+ ОбщегоНазначения.ФормаМножественногоЧисла(", зарегистрированный ",", зарегистрированных ",", зарегистрированных ",ВсегоИсправлений) 
					+ ОписаниеПериода + " Отменить исправления?";
		
		Ответ  = ЗадатьВопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, КодВозвратаДиалога.ОК);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
			ОбработкаКомментариев.УдалитьСообщения();
			Заголовок = ОбщегоНазначения.КомментарийРасчета("Удаление документов-исправлений");
			Если ВсегоИсправлений > 1 Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Для Сч = 1 По ВсегоИсправлений Цикл
				Значение = ИсправленияКОтмене[ВсегоИсправлений - Сч];
				Документ = Значение.ПолучитьОбъект();
				ОбщегоНазначения.КомментарийРасчета("Документ №" + Документ.Номер + " от " + Документ.Дата + " обработан успешно. ", Заголовок, "Открыть", Значение);
				Документ.ПерерассчитываемыйДокумент = Неопределено;
				Документ.ПометкаУдаления = Истина;
				Попытка
					Документ.Записать(?(Документ.Проведен, РежимЗаписиДокумента.ОтменаПроведения,РежимЗаписиДокумента.Запись));
				Исключение
					Если ВсегоИсправлений > 1 Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
					ОбщегоНазначения.КомментарийРасчета("Документ №" + Документ.Номер + " от " + Документ.Дата + " удалить не удалось! Процедура отмены исправлений отменена. ", , "Открыть", Значение,Перечисления.ВидыСообщений.Ошибка);
					ОбработкаКомментариев.ПоказатьСообщения();
					Возврат;
				КонецПопытки;
			КонецЦикла;
			Если ВсегоИсправлений > 1 Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			ОбработкаКомментариев.ПоказатьСообщения();
	
		Иначе
			Возврат 
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

// Устанавливает имя и доступность кнопки ТекущийСотрудник механизма исправлений
//
// Параметры
//	ТипДанных - тип Тип.- определяет тип переданного текущего элемента: Сотрудник или Физлицо
//  ТекущийСотрудник - тип СправочникСсылка.СотрудникиОрганизаций или СправочникСсылка.ФизическиеЛица, текущий сотрудник формы
//  СотрудникиСИсправлениями - тип Соответствие, содержит всех сотрудников, чьи расчеты уже подвергались исправлениям
//  Кнопка - описываемая кнопка командной панели
//  ИмяБезСотрудника - строка, имя кнопки "по умолчанию"
//
Функция ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипДанных, ТекущийСотрудник, СотрудникиСИсправлениями, Кнопка, ИмяБезСотрудника = "Расчеты текущего сотрудника") Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущийСотрудник) Тогда
		Кнопка.Текст = ИмяБезСотрудника;             
		Кнопка.Доступность = Истина;
		Возврат ""
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сотрудник", ТекущийСотрудник);
		Если ТипДанных = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СотрудникиОрганизаций.Наименование,
			|	СотрудникиОрганизаций.Физлицо.Пол КАК Пол
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ФизическиеЛица.Наименование,
			|	ФизическиеЛица.Пол
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	ФизическиеЛица.Ссылка = &Сотрудник";
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Не Выборка.Следующий() Тогда
			Кнопка.Текст = ИмяБезСотрудника;             
			Кнопка.Доступность = Истина;
			Возврат ""
		КонецЕсли;
		
		ФИО = ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.Наименование);
		
		ПозицияПервогоПробела = Найти(ФИО + " "," ");
		Фамилия  = Лев(ФИО,ПозицияПервогоПробела-1);
		Инициалы = Сред(ФИО,ПозицияПервогоПробела+1);
		
		РезультатСклонения = "";
		Если ПроцедурыУправленияПерсоналом.ПросклонятьФИО(глЗначениеПеременной("глКомпонентаСклоненияФИО"),Фамилия, 2, Выборка.Пол, РезультатСклонения) Тогда
			ФИО = РезультатСклонения + " " + Инициалы;	
		КонецЕсли;
		
		Кнопка.Текст = "Расчеты " + ФИО;
		Кнопка.Доступность = (СотрудникиСИсправлениями[ТекущийСотрудник] = Неопределено);
		
		Возврат ФИО;
		
	КонецЕсли;	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура ВывестиПредупреждение(Текст = "", Заголовок = "") Экспорт

	Предупреждение(Текст, , Заголовок);

КонецПроцедуры

Функция ЗадатьВопрос(ТекстВопроса = "", Режим = "", КнопкаПоУмолчанию = Неопределено, Заголовок = "") Экспорт

	Возврат Вопрос(ТекстВопроса, Режим, , КнопкаПоУмолчанию, Заголовок)

КонецФункции



// Функция определяет доступность организаций
//
// Параметры
//  нет
//
// Возвращаемое значение:
//	ДоступностьОрганизаций - 	структура, определяет доступность нескольких организаций,
//  							нескольких головных организаций
//
Функция ДоступностьОрганизаций() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Организации.Ссылка,
	|	Организации.ГоловнаяОрганизация
	|ПОМЕСТИТЬ РазрешенныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	КОЛИЧЕСТВО(РазрешенныеОрганизации.Ссылка) КАК КоличествоОрганизаций
	|ПОМЕСТИТЬ ДоступныеОрганизации
	|ИЗ
	|	РазрешенныеОрганизации КАК РазрешенныеОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	КОЛИЧЕСТВО(РазрешенныеОрганизации.Ссылка) КАК КоличествоГоловныхОрганизаций
	|ПОМЕСТИТЬ ДоступныеГоловныеОрганизации
	|ИЗ
	|	РазрешенныеОрганизации КАК РазрешенныеОрганизации
	|ГДЕ
	|	РазрешенныеОрганизации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДоступныеОрганизации.КоличествоОрганизаций > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступноНесколькоОрганизаций,
	|	ВЫБОР
	|		КОГДА ДоступныеГоловныеОрганизации.КоличествоГоловныхОрганизаций > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступноНесколькоГоловныхОрганизаций
	|ИЗ
	|	ДоступныеОрганизации КАК ДоступныеОрганизации,
	|	ДоступныеГоловныеОрганизации КАК ДоступныеГоловныеОрганизации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	ДоступностьОрганизаций = Новый Структура("ДоступноНесколькоОрганизаций,ДоступноНесколькоГоловныхОрганизаций");
	ЗаполнитьЗначенияСвойств(ДоступностьОрганизаций, Выборка);
	
	Возврат ДоступностьОрганизаций;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ КОМАНД ГЛАВНОГО МЕНЮ И РАБОЧЕГО СТОЛА

Процедура ВывестиДополненияКОписанию()Экспорт
	
	ФормаОбновлений = Обработки.ОбновлениеИнформационнойБазы.ПолучитьФорму();
	ФормаОбновлений.ВывестиМакетОписаниеОбновлений();
	ФормаОбновлений.Открыть();
	
КонецПроцедуры

// Показывает веб-страницы в обработке Обозреватель  
//
// Параметры
//  АдресСтраницы  – Строка – адрес просматриваемой страницы
//  ЗаголовокОкна  – Строка – заголовок окна обработки
//  КлючУникальностиФормы - произвольный, ключ уникальности формы обработки Обозреватель
//
// Если передается пустая строка АдресСтраницы, то в обработке Обозреватель 
// просматривается веб-страница конфигурации
//  
Процедура ПоказатьВебСтраницу(АдресСтраницы = "", ЗаголовокОкна = "", КлючУникальностиФормы = Неопределено) Экспорт 
	
	Форма = Обработки.Обозреватель.ПолучитьФорму("Форма",,КлючУникальностиФормы);
	Если ЗначениеЗаполнено(ЗаголовокОкна) Тогда
		Форма.Заголовок = ЗаголовокОкна;
	КонецЕсли;
	Форма.СтартоваяСтраница = АдресСтраницы;
	Форма.Открыть();
	
КонецПроцедуры

//Процедура открывает список выбора внешних обработок
Процедура ОткрытьСписокВнешнихОбработок() Экспорт
	
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
	
КонецПроцедуры 

//Процедура открывает список выбора внешних отчетов
Процедура ОткрытьСписокВнешнихОтчетов() Экспорт
	
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
	
КонецПроцедуры 

//Процедура открывает список выбора внешних печатных форм
Процедура ОткрытьСписокВнешнихПечатныхФорм() Экспорт
	
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
	
КонецПроцедуры   

//Процедура открывает список выбора внешних обработок заполнения табличных частей
Процедура ОткрытьСписокВнешнихОбработокЗаполненияТабличныхЧастей() Экспорт
	
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
	
КонецПроцедуры   

 ////////////////////////////////////////////////////////////////////////////////
// процедуры поддержки команд в журналах документов

// Процедура дополняет переданный список значений видами документов, регистрируемых 
// в журнале и заполняет их представления
// 
// Параметры:
//	МетаданныеЖурнала - метаданные журнала
//  СписокВидов - необязательный. Дополняемый список значений
Процедура ДополнитьСписокВидовДокументов(МетаданныеЖурнала, СписокВидов) Экспорт
	Если СписокВидов = НеОпределено Тогда
		СписокВидов = Новый СписокЗначений;
	КонецЕсли;
	Для Каждого МетаданныеДокумента Из МетаданныеЖурнала.РегистрируемыеДокументы Цикл
		ВидДокумента = СписокВидов.НайтиПоЗначению(МетаданныеДокумента.Имя);
		Если ВидДокумента = НеОпределено Тогда
			СписокВидов.Добавить(МетаданныеДокумента.Имя, МетаданныеДокумента.Представление());
		Иначе
			Если НЕ ЗначениеЗаполнено(ВидДокумента.Представление) Тогда
				ВидДокумента.Представление = МетаданныеДокумента.Представление();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура вводит команды для создания документов и открытия форм 
// списков документов для журнала
// Параметры:
//	СписокВидовДокументов - список значений с видами документов строкой
//	КнопкиДобавить - массив подменю, в которые необходимо добавить команды создания документов
//	КнопкиОткрыть - массив подменю, в которые необходимо добавить команды открытия списков документов
//  ДействиеСоздать - действие команды создания документов
//  ДействиеОткрыть - действие команды открытия списков документов
// 
Процедура ВвестиКомандыПоВидамДокументов(СписокВидовДокументов, КнопкиДобавить, КнопкиОткрыть, 
	ДействиеСоздать, ДействиеОткрыть) Экспорт
	Для Каждого ВидДокумента Из СписокВидовДокументов Цикл
		Если ВидДокумента.Значение = НеОпределено Тогда  // разделитель
			Для Каждого Кнопки Из КнопкиДобавить Цикл
				Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			КонецЦикла;
			Для Каждого Кнопки Из КнопкиОткрыть Цикл
				Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			КонецЦикла;
		Иначе // команда
			Для Каждого Кнопки Из КнопкиДобавить Цикл
				Кнопки.Добавить(ВидДокумента.Значение, 
				ТипКнопкиКоманднойПанели.Действие, 
				ВидДокумента.Представление,
				ДействиеСоздать);
			КонецЦикла;
			Для Каждого Кнопки Из КнопкиОткрыть Цикл
				Кнопки.Добавить(ВидДокумента.Значение, 
				ТипКнопкиКоманднойПанели.Действие, 
				ВидДокумента.Представление,
				ДействиеОткрыть);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура определяет необходимость быстрого отбора по организации, 
//  устанавливает его, если такая необходимость есть, или скрывает, если ее нет
//
// Параметры
//  Форма 							- форма списка документов или журнала документов
//  ИмяСпискаДокументов				- строка, имя реквизита содержащего список документов
//
Процедура НастроитьОтборПоОрганизации(Форма, ИмяСпискаДокументов, ОтборПоГоловнойОрганизации = Ложь) Экспорт
	
	ДоступностьОрганизаций = ДоступностьОрганизаций();
	ОтборДоступен = ?(ОтборПоГоловнойОрганизации, ДоступностьОрганизаций.ДоступноНесколькоГоловныхОрганизаций, ДоступностьОрганизаций.ДоступноНесколькоОрганизаций);
	
	ЭлементыФормы = Форма.ЭлементыФормы;
	ЭлементыФормы[ИмяСпискаДокументов].Колонки.Организация.Видимость = ОтборДоступен;
	
	// если элемент управления отбором размещен на панеле - управляем сверткой
	// если нет - видимостью
	Если ЭлементыФормы.Найти("ПанельОтборПоОрганизации") = Неопределено Тогда
		ЭлементыФормы.ОрганизацияФлаг.Видимость = ОтборДоступен;
		ЭлементыФормы.Организация.Видимость 	= ОтборДоступен;
	Иначе
		ЭлементыФормы.ПанельОтборПоОрганизации.Свертка = ?(ОтборДоступен, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	КонецЕсли;
	
	Если ОтборДоступен Тогда
		УстановитьБыстрыйОтборПоОрганизации(Форма, ИмяСпискаДокументов, ОтборПоГоловнойОрганизации);
	КонецЕсли;
	
КонецПроцедуры

 
Процедура УстановитьБыстрыйОтборПоОрганизации(Форма, ИмяСпискаДокументов, ОтборПоГоловнойОрганизации) 

	ОсновнаяОрганизацияПользователя = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	Если ОтборПоГоловнойОрганизации 
		И ЗначениеЗаполнено(ОсновнаяОрганизацияПользователя) 
		И ЗначениеЗаполнено(ОсновнаяОрганизацияПользователя.ГоловнаяОрганизация) Тогда
		ОсновнаяОрганизацияПользователя = ОсновнаяОрганизацияПользователя.ГоловнаяОрганизация;
	КонецЕсли;
	
	Форма[ИмяСпискаДокументов].Отбор.Организация.Установить(ОсновнаяОрганизацияПользователя, ЗначениеЗаполнено(ОсновнаяОрганизацияПользователя));	
		
КонецПроцедуры

// возвращает истина если для документа определена печать по умолчанию иначе ложь
//
// Параметры
//  ИмяДокумента					- строка, имя документа
//  СоответствиеОписанияДокументов	- соответствие, содержит признак наличия у документа печатной формы
//
// Возвращаемое значение:
//   булево
//
Функция ДляДокументаОпределенаПечатьПоУмолчанию(ИмяДокумента, СоответствиеОписанияДокументов) Экспорт
	
	ЗначениеИзСоответствия = СоответствиеОписанияДокументов[ИмяДокумента];
	Если ЗначениеИзСоответствия = Неопределено Тогда
		МенеджерДокумента = Документы[ИмяДокумента];
		Попытка
			СтруктураВнутреннихПечатныхФорм = МенеджерДокумента.СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм()
		Исключение
			СтруктураВнутреннихПечатныхФорм = Новый Структура;
		КонецПопытки;
		ДеревоМакетов = РаботаСДиалогами.ПолучитьДеревоМакетовПечати(МенеджерДокумента.ПустаяСсылка(), СтруктураВнутреннихПечатныхФорм);
		СтрокаПоУмолчанию = РаботаСДиалогами.ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяДокумента, ДеревоМакетов);
		ЗначениеИзСоответствия = СтрокаПоУмолчанию <> Неопределено; 
		СоответствиеОписанияДокументов.Вставить(ИмяДокумента, ЗначениеИзСоответствия);
	КонецЕсли;
	
	Возврат ЗначениеИзСоответствия;
	
КонецФункции // ДляДокументаОпределенаПечатьПоУмолчанию()

  Функция ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоКнопок) Экспорт
	
	ИмяМакетаПоУмолчанию = ВосстановитьЗначение(ИмяМетаданных+ "МакетПечати");
	
	Если ИмяМакетаПоУмолчанию = Ложь или ДеревоКнопок.Строки.Количество() = 0 Тогда
		
		СтрокаПоУмолчанию = Неопределено;
		
	Иначе
		
		СтрокаПоУмолчанию = ДеревоКнопок.Строки.Найти(ИмяМакетаПоУмолчанию,"Текст");
		
		Если СтрокаПоУмолчанию = Неопределено Тогда
			
			СтрокаПоУмолчанию = ДеревоКнопок.Строки[0];
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПоУмолчанию;
	
КонецФункции // ()

Процедура СоздатьПоВидуДокументаСтрокой(ВидДокумента, Организация = Неопределено, ЭлементСписок = Неопределено) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы[ВидДокумента];
	
	Если Не ПравоДоступа("ИнтерактивноеДобавление", МетаданныеДокумента) Тогда
		Предупреждение("Нарушение прав доступа!");
		Возврат;
	КонецЕсли;
	
	ФормаНовогоДокумента = Документы[ВидДокумента].ПолучитьФормуНовогоДокумента(, ЭлементСписок);
	Если Организация <> Неопределено И МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
		Если ТипЗнч(ФормаНовогоДокумента) = Тип("Форма") Тогда
			ФормаНовогоДокумента.Организация = Организация;
		Иначе // Управляемая форма
			ФормаНовогоДокумента.Объект.Организация = Организация;
		КонецЕсли;
	КонецЕсли;
	
	ФормаНовогоДокумента.ЗакрыватьПриЗакрытииВладельца = Ложь;
	ФормаНовогоДокумента.Открыть();
	
КонецПроцедуры

Процедура СписокДокументовПередНачаломДобавления(Форма, Отказ, Копирование, Организация, ВидДокумента) Экспорт
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	СоздатьПоВидуДокументаСтрокой(ВидДокумента, Организация, Форма.ЭлементыФормы.ДокументСписок);
	
КонецПроцедуры

// Процедура - общая часть обработок оповещения форм списков документов и журналов документов
//
// Параметры
//  Форма 							- форма списка документов или журнала документов
//  ИмяСпискаДокументов				- строка, имя реквизита содержащего список документов
//
Процедура ОбработкаОповещенияСпискаДокументов(ИмяСобытия, Параметр, Источник, Форма, ИмяСпискаДокументов, ОтборПоГоловнойОрганизации = Ложь) Экспорт
		
	Если ИмяСобытия = "ЗаписьПользователя" И Параметр = глЗначениеПеременной("глТекущийПользователь") Тогда
		УстановитьБыстрыйОтборПоОрганизации(Форма, ИмяСпискаДокументов, ОтборПоГоловнойОрганизации);
	КонецЕсли;
	
КонецПроцедуры

  
Функция ВставитьКолонкуВТабличноеПоле(НомерКолонки = Неопределено, ТабличноеПоле, Имя, ТекстШапки, 
									Данные = Неопределено, ДанныеФлажка = Неопределено, Подсказка = "", Видимость = Истина, 
									ТипЭлементаУправления = Неопределено, Положение = Неопределено, Ширина = Неопределено,
									КнопкаВыбора = Неопределено, КнопкаОткрытия = Неопределено, КнопкаОчистки = Неопределено) Экспорт
	
	Если НомерКолонки = Неопределено Тогда
		НоваяКолонка = ТабличноеПоле.Колонки.Добавить(Имя, ТекстШапки);
	Иначе
		НоваяКолонка = ТабличноеПоле.Колонки.Вставить(НомерКолонки, ТекстШапки);
		НоваяКолонка.Имя = Имя;
	КонецЕсли;
	
	Если ТипЭлементаУправления <> Неопределено Тогда
		НоваяКолонка.УстановитьЭлементУправления(ТипЭлементаУправления);
		Если КнопкаВыбора <> Неопределено Тогда
			НоваяКолонка.ЭлементУправления.КнопкаВыбора = КнопкаВыбора;
		КонецЕсли;
		Если КнопкаОткрытия <> Неопределено Тогда
			НоваяКолонка.ЭлементУправления.КнопкаОткрытия = КнопкаОткрытия;
		КонецЕсли;
		Если КнопкаОчистки <> Неопределено Тогда
			НоваяКолонка.ЭлементУправления.КнопкаОчистки = КнопкаОчистки;
		КонецЕсли;
	КонецЕсли;
	
	Если Данные <> Неопределено Тогда
		НоваяКолонка.Данные = Данные;
	КонецЕсли;
	
	Если ДанныеФлажка <> Неопределено Тогда
		НоваяКолонка.ДанныеФлажка = ДанныеФлажка;
	КонецЕсли;
	
	Если Положение <> Неопределено Тогда
		НоваяКолонка.Положение = Положение;
	Иначе
		НоваяКолонка.Положение = ПоложениеКолонки.НоваяКолонка;
	КонецЕсли;
	
	Если Ширина <> Неопределено Тогда
		НоваяКолонка.Ширина = Ширина;
	КонецЕсли;
	
	НоваяКолонка.ПодсказкаВШапке = Подсказка;
	НоваяКолонка.Видимость = Видимость;
	
	Возврат НоваяКолонка
	
КонецФункции

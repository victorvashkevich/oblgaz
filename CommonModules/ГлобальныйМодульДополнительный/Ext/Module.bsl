///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ 




///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ОЖИДАНИЯ



///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ЗАПОЛНЕНИЯ ГЛОБАЛЬНЫХ ПЕРЕМЕННЫХ

// Функция инициализирует глобальную переменную глПрограммаБухгалтерскогоУчетаОрганизации
//
Функция ЗаполнитьПеременнуюПрограммаБухгалтерскогоУчетаОрганизации() Экспорт

	ПрограммаБухгалтерскогоУчетаОрганизации = Новый Соответствие;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
		
		ПрограммаБухгалтерскогоУчетаОрганизации.Вставить(Справочники.Организации.ПустаяСсылка(), Константы.ПрограммаБухгалтерскогоУчета.Получить());
		
		//Запрос = Новый Запрос;     
		//Запрос.Текст = 
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	Организации.Ссылка КАК Ссылка,
		//|	ЕСТЬNULL(Константы.ПрограммаБухгалтерскогоУчета, Организации.ПрограммаБухгалтерскогоУчета) КАК ПрограммаБухгалтерскогоУчета
		//|ИЗ
		//|	Справочник.Организации КАК Организации
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
		//|		ПО ИСТИНА";
		//	
		//Выборка = Запрос.Выполнить().Выбрать();
		//Пока Выборка.Следующий() Цикл
		//	ПрограммаБухгалтерскогоУчетаОрганизации.Вставить(Выборка.Ссылка, Выборка.ПрограммаБухгалтерскогоУчета);
		//КонецЦикла;
	
	КонецЕсли;
	
	Возврат ПрограммаБухгалтерскогоУчетаОрганизации;

КонецФункции // ЗаполнитьПеременнуюПрограммаБухгалтерскогоУчетаОрганизации()

// Функция инициализирует глобальную переменную глСводныйРежимВыгрузкиПроводок 
//
Функция ЗаполнитьПеременнуюСводныйРежимВыгрузкиПроводок() Экспорт

	РежимВыгрузкиПроводок = Новый Соответствие;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
		
		РежимВыгрузкиПроводок.Вставить(Справочники.Организации.ПустаяСсылка(), Константы.СводныйРежимВыгрузкиПроводок.Получить());
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	Организации.Ссылка КАК Ссылка,
		//|	ВЫБОР
		//|		КОГДА ПрограммаБухучета.ПрограммаБухгалтерскогоУчета ЕСТЬ NULL 
		//|			ТОГДА Организации.СводныйРежимВыгрузкиПроводок
		//|		ИНАЧЕ ПрограммаБухучета.СводныйРежимВыгрузкиПроводок
		//|	КОНЕЦ КАК СводныйРежимВыгрузкиПроводок
		//|ИЗ
		//|	Справочник.Организации КАК Организации
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК ПрограммаБухучета
		//|		ПО (ПрограммаБухучета.ПрограммаБухгалтерскогоУчета <> ЗНАЧЕНИЕ(Перечисление.ПрограммыБухгалтерскогоУчета.ИспользуетсяНесколькоПрограммБухучета))
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК РежимВыгрузки
		//|		ПО (ИСТИНА)";
		//
		//Выборка = Запрос.Выполнить().Выбрать();
		//Пока Выборка.Следующий() Цикл
		//	РежимВыгрузкиПроводок.Вставить(Выборка.Ссылка, Выборка.СводныйРежимВыгрузкиПроводок);
		//КонецЦикла;
		
	КонецЕсли;
	
	Возврат РежимВыгрузкиПроводок;

КонецФункции // ЗаполнитьПеременнуюСводныйРежимВыгрузкиПроводок()


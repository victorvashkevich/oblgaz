// Этот модуль предназачен для реализации алгоритмов работы 
// с контактной информацией.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТОБРАЖЕНИЯ КИ В ФОРМАХ ОБЪЕКТОВ

// Процедура считывает контактную информацию из ИБ в набор записей регистра сведений.
//
// Параметры:
//  НаборЗаписей - набор записей регистра сведений
//  Ссылка - Объект, по которому необходимо заполнить КИ
//
Процедура ПрочитатьКонтактнуюИнформацию(НаборЗаписей, Ссылка) Экспорт

	Если ТипЗнч(НаборЗаписей) <> Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация") Тогда
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	Иначе
		НаборЗаписей.Очистить();
	КонецЕсли; 
	
	НаборЗаписей.Отбор.Объект.Значение      = Ссылка;
	НаборЗаписей.Отбор.Объект.Использование = Истина;
	НаборЗаписей.Прочитать();
	
	ТаблицаНабора = НаборЗаписей.Выгрузить();
	ТаблицаНабора.Сортировать("Тип ВОЗР, Вид ВОЗР");
	НаборЗаписей.Загрузить(ТаблицаНабора);
	
	МассивВидов = НаборЗаписей.ВыгрузитьКолонку("Вид");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации", ВидОбъектаКИ(Ссылка));
	Запрос.УстановитьПараметр("МассивВидов"                   , МассивВидов);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка     КАК Вид,
	|	ВидыКонтактнойИнформации.Ссылка.Тип КАК Тип
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидОбъектаКонтактнойИнформации
	|	И
	|	НЕ ВидыКонтактнойИнформации.Ссылка В(&МассивВидов)
	|";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Сортировать("Тип ВОЗР, Вид ВОЗР");
	Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаписьРегистра.Вид    = СтрокаТаблицы.Вид;
		ЗаписьРегистра.Тип    = СтрокаТаблицы.Тип;
		ЗаписьРегистра.Объект = Ссылка;
	КонецЦикла; 

КонецПроцедуры

// Процедура записывает контактную информацию в ИБ из набора записей регистра сведений.
//
// Параметры:
//  НаборЗаписей - набор записей регистра сведений
//  Ссылка - Объект, по которому необходимо записать КИ
//  Отказ - Булево
//
Процедура ЗаписатьКонтактнуюИнформацию(НаборЗаписей, Ссылка, Отказ) Экспорт

	Индекс = 0;
	Пока 1 = 1 Цикл
		
		Если Индекс > НаборЗаписей.Количество() - 1 Тогда
			Прервать;
		КонецЕсли; 
		
		Запись = НаборЗаписей[Индекс];
		
		Если Не ЗначениеЗаполнено(Запись.Представление) Тогда
			НаборЗаписей.Удалить(Запись);
			Продолжить;
		КонецЕсли;
		
		Запись.Объект = Ссылка;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
 	НаборЗаписей.Отбор.Объект.Значение      = Ссылка;
 	НаборЗаписей.Отбор.Объект.Использование = Истина;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ("Элемент """ + СокрЛП(Ссылка) + """ не записан. Не записана контактная информация."));
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	ПрочитатьКонтактнуюИнформацию(НаборЗаписей, Ссылка)
	
КонецПроцедуры

#Если Клиент Тогда

// Процедура выполняется при активизации строки табличного поля, в котором
// отображается контактная информация объектов в их формах, и управляет
// доступностью кнопки командной пенели установки значения по умолчанию.
//
// Параметры:
//  Элемент - ТабличноеПоле
//  КнопкаУстановитьОсновным - Кнопка командной панели
//
Процедура КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, КнопкаУстановитьОсновным) Экспорт

	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Если Элемент.ТекущиеДанные.ЗначениеПоУмолчанию Тогда
			КнопкаУстановитьОсновным.Пометка     = Истина;
			КнопкаУстановитьОсновным.Доступность = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Представление) Тогда
			КнопкаУстановитьОсновным.Пометка     = Ложь;
			КнопкаУстановитьОсновным.Доступность = Ложь;
		Иначе
			КнопкаУстановитьОсновным.Пометка     = Ложь;
			КнопкаУстановитьОсновным.Доступность = Истина;
		КонецЕсли; 
	Иначе
		КнопкаУстановитьОсновным.Пометка     = Ложь;
		КнопкаУстановитьОсновным.Доступность = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура выполняется при выводе строки табличного поля, в котором
// отображается контактная информация объектов в их формах.
//
// Параметры:
//  Элемент - ТабличноеПоле
//  ОформлениеСтроки - Оформление строки табличного поля
//  ДанныеСтроки - данные строки табличного поля
//
Процедура КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт

	Если ДанныеСтроки.ЗначениеПоУмолчанию Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	ИначеЕсли ТипЗнч(ДанныеСтроки.Вид) = Тип("Строка") Тогда
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
	КонецЕсли;
	
	Если ДанныеСтроки.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Если ПолучитьПредставлениеАдреса(ДанныеСтроки) = ДанныеСтроки.Представление Тогда
			// Формат МНС
			Если Не ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 8;
			Иначе
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 2;
			КонецЕсли; 
		Иначе
			Если Не ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 7;
			Иначе
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 1;
			КонецЕсли; 
		КонецЕсли; 
	ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 9;
		Иначе
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 3;
		КонецЕсли; 
	ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 10;
		Иначе
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 4;
		КонецЕсли; 
	ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 11;
		Иначе
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 5;
		КонецЕсли; 
	ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 6;
		Иначе
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

// Процедура устанавливает запись контактной информации определенного типа и вида основной
// для объекта в пространстве одного типа.
//
// Параметры:
//  СтруктураПараметров - структура, параметры записи, для которой надо установить признак основной
//   Ключи:
//    Объект, СправочникСсылка, значение измерния Объект регистра сведений
//    Тип, ПеречислениеСсылка.ТипыКонтактнойИнформации
//    Вид, СправочникСсылка.ВидыКонтактнойИнформации
//
Процедура УстановитьЗаписьОсновной(НаборЗаписей, ТабличноеПоле, Кнопка) Экспорт

	Если ТабличноеПоле.ТекущиеДанные <> Неопределено
	   И  ЗначениеЗаполнено(ТабличноеПоле.ТекущиеДанные.Представление) Тогда
	
		Если ТабличноеПоле.ТекущиеДанные.ЗначениеПоУмолчанию Тогда
		
			ТабличноеПоле.ТекущиеДанные.ЗначениеПоУмолчанию = Ложь;
			Кнопка.Пометка = Ложь;
			
		Иначе
			
			Для каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если ЗаписьНабора.Тип = ТабличноеПоле.ТекущиеДанные.Тип Тогда
					ЗаписьНабора.ЗначениеПоУмолчанию = Ложь;
				КонецЕсли; 
			КонецЦикла;
			
			ТабличноеПоле.ТекущиеДанные.ЗначениеПоУмолчанию = Истина;
			Кнопка.Пометка = Истина;
		
		КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры

// Обраьботчик события "ПередУдалением" табличного поля набора записей.
//
// Параметры:
//  Элемент - Табличное поле
//  Отказ - Булево
//
 Процедура УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ, Форма = Неопределено) Экспорт

	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные <> Неопределено И (ЗначениеЗаполнено(Элемент.ТекущиеДанные.Представление) ИЛИ ТипЗнч(Элемент.ТекущиеДанные.Вид) = Тип("Строка")) Тогда
	
		ОтветНаВопрос = Вопрос("Удалить запись?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Элемент.ТекущиеДанные.Вид) = Тип("Строка") Тогда
			Элемент.Значение.Удалить(Элемент.ТекущиеДанные);
		Иначе
			Элемент.ТекущиеДанные.Представление       = "";
			Элемент.ТекущиеДанные.ЗначениеПоУмолчанию = Ложь;
		КонецЕсли; 
		
 		Если Форма <> Неопределено Тогда
 			Форма.Модифицированность = Истина;
 		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Функция формирует структуру записи регистра.
//
// Параметры:
//  Запись - запись набора записей регистра сведений
//
Функция ПолучитьСтруктуруЗаписиРегистра(Запись) Экспорт

	Если ТипЗнч(Запись) = Тип("РегистрСведенийЗапись.КонтактнаяИнформация")
	 ИЛИ ТипЗнч(Запись) = Тип("РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация") Тогда
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Объект"       , Запись.Объект);
		СтруктураЗаписи.Вставить("Тип"          , Запись.Тип);
		СтруктураЗаписи.Вставить("Вид"          , Запись.Вид);
		СтруктураЗаписи.Вставить("Представление", Запись.Представление);
		СтруктураЗаписи.Вставить("Комментарий"  , Запись.Комментарий);
		Для а = 1 По 13 Цикл
			СтруктураЗаписи.Вставить("Поле" + Строка(а), Запись["Поле" + Строка(а)]);
		КонецЦикла;
		Возврат СтруктураЗаписи;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 

КонецФункции

// Процедура контролирует возможность редактирования текста в поле вводп представления КИ.
//
Процедура УстановитьВозможностьРедактированияТекстаКИ(Элемент) Экспорт

	Если Элемент.ТекущиеДанные.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
	   И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Представление)
	   И (ПолучитьПредставлениеАдреса(Элемент.ТекущиеДанные) = Элемент.ТекущиеДанные.Представление) Тогда
		Элемент.Колонки.Представление.ЭлементУправления.РедактированиеТекста = Ложь;
	Иначе
		Элемент.Колонки.Представление.ЭлементУправления.РедактированиеТекста = Истина;
	КонецЕсли; 

КонецПроцедуры

// Обработчик события "ПриНачалеРедактирования" табличного поля
// набора записей регистра сведений
//
Процедура КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, ПоследнееЗначениеЭлементаТайпингаВидаКИ) Экспорт

	Если НоваяСтрока Тогда
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Тип) Тогда
			Элемент.ТекущиеДанные.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		КонецЕсли; 
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Вид) Тогда
			Элемент.ТекущиеДанные.Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли; 
	
	ПоследнееЗначениеЭлементаТайпингаВидаКИ = Элемент.ТекущиеДанные.Вид;
	
КонецПроцедуры

// Обработчик события "ПередОкончаниемРедактирования" табличного поля
// набора записей регистра сведений
//
Процедура КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мТекстТайпингаВидаКИ, мОбработкаТайпингаВидаКИ) Экспорт
	
	Если мОбработкаТайпингаВидаКИ И НЕ НоваяСтрока Тогда
		мОбработкаТайпингаВидаКИ = Ложь;
		Отказ = Истина;
		Элемент.ТекущаяКолонка = Элемент.Колонки.Вид;
		Элемент.Колонки.Вид.ЭлементУправления.ВыделенныйТекст = мТекстТайпингаВидаКИ;
		мТекстТайпингаВидаКИ = "";
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события "ПриИзменении" представления КИ табличного поля
// набора записей регистра сведений
//
Процедура КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, ТабличноеПоле) Экспорт

	Если ТабличноеПоле.ТекущиеДанные.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		
		СтруктураПолей = РазложитьТелефонПоПолям(Элемент.Значение);
		ТабличноеПоле.ТекущиеДанные.Поле3 = СтруктураПолей.СамТелефон;
		ТабличноеПоле.ТекущиеДанные.Поле1 = СтруктураПолей.КодСтраны;
		ТабличноеПоле.ТекущиеДанные.Поле2 = СтруктураПолей.КодГорода;
		
		СформироватьПредставлениеТелефона(ТабличноеПоле.ТекущиеДанные);
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события "ПередНачаломДобавления" табличного поля
// набора записей регистра сведений
//
 Процедура КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге, ТабличноеПоле, 
 														  НаборКонтактнойИнформации, ДоступностьОбъекта = Истина, Форма = Неопределено) Экспорт
	Если Не Копирование Тогда
		Если мКнопкаРедактироватьКИВДиалоге.Пометка Тогда
			Отказ = Истина;
 			ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
 			ОбработкаРедактирования.ДоступностьОбъекта = ДоступностьОбъекта;
 			ОбработкаРедактирования.РедактироватьЗапись(НаборКонтактнойИнформации, , Форма);
		Иначе
			ТабличноеПоле.Колонки.Представление.ЭлементУправления.РедактированиеТекста = Истина;
		КонецЕсли;
	Иначе
		Если мКнопкаРедактироватьКИВДиалоге.Пометка Тогда
			Отказ = Истина;
 			ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
 			ОбработкаРедактирования.ДоступностьОбъекта = ДоступностьОбъекта;
 			ОбработкаРедактирования.РедактироватьЗапись(НаборКонтактнойИнформации,, Форма, ПолучитьСтруктуруЗаписиРегистра(ТабличноеПоле.ТекущиеДанные));
		Иначе
			УстановитьВозможностьРедактированияТекстаКИ(ТабличноеПоле);
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

// Обработчик события "ПередНачаломИзменения" табличного поля
// набора записей регистра сведений
//
 Процедура КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге, ДоступностьОбъекта = Истина, Форма = Неопределено) Экспорт
	Если мКнопкаРедактироватьКИВДиалоге.Пометка Тогда
		Отказ = Истина;
 		ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
 		ОбработкаРедактирования.ДоступностьОбъекта = ДоступностьОбъекта;
 		ОбработкаРедактирования.РедактироватьЗапись(Элемент.ТекущиеДанные, , Форма);
	Иначе
		УстановитьВозможностьРедактированияТекстаКИ(Элемент);
	КонецЕсли; 

КонецПроцедуры

// Обработчик события "ПриИзменении" Типа КИ табличного поля
// набора записей регистра сведений
//
Процедура КонтактнаяИнформацияТипПриИзмененииОбщее(Элемент, ТабличноеПоле) Экспорт

	Если ЗначениеЗаполнено(ТабличноеПоле.ТекущиеДанные)
	   И ЗначениеЗаполнено(ТабличноеПоле.ТекущиеДанные.Вид)
	   И ТипЗнч(ТабличноеПоле.ТекущиеДанные.Вид) = Тип("СправочникСсылка.ВидыКонтактнойИнформации")
	   И ТабличноеПоле.ТекущиеДанные.Вид.Тип <> Элемент.Значение Тогда
	
		ТабличноеПоле.ТекущиеДанные.Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	
	КонецЕсли; 

КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

//процедура пытается заблокировать объект для изменения
Процедура ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма) Экспорт
	
	ЭтотОбъект.Заблокировать();
	ЭтаФорма.Модифицированность = Истина;
		
КонецПроцедуры



// Функция проверяет строку на наличие значимых символов
//
// Параметры
//  ВыбСтрока  – строка для проверки
// Возвращаемое значение:
//   Строка - пробел или пустое значение строки
//
Функция ПроверкаПустойСтроки(ВыбСтрока, ПризнакЗапятой=Истина)
	
	Если ПустаяСтрока(ВыбСтрока) Тогда
		Возврат "";
	Иначе
		Возврат ?(ПризнакЗапятой,",","")+" ";
	КонецЕсли; 
	
КонецФункции // ПроверкаПустойСтроки()

// Функция возвращает представление адреса собранного из полей значений Поле1 - Поле10
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьПредставлениеАдреса(Запись) Экспорт

	ТекПредставление = "";
	Если СокрЛП(Запись.Поле1) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле1);
	КонецЕсли;
	Если СокрЛП(Запись.Поле2) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле2);
	КонецЕсли;
	Если СокрЛП(Запись.Поле3) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле3)+ " р-н";
	КонецЕсли;

	Если СокрЛП(Запись.Поле5) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле5)+ " с/с";
	КонецЕсли;

	Если СокрЛП(Запись.Поле4) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле10)+" "+СокрЛП(Запись.Поле4);
	КонецЕсли;

	Если СокрЛП(Запись.Поле6) <> "" Тогда
		СокрУл = "";
		Если СокрЛП(Запись.Поле11) <> "" Тогда
			СпрСокр = Справочники.АдресныеСокращения;
			ТекСокр = СпрСокр.НайтиПоКоду(СокрЛП(Запись.Поле11));
			Если ТекСокр <> Неопределено тогда
				СокрУл = ТекСокр.Сокращение;
			КонецЕсли;
		КонецЕсли;
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СокрУл) + " " + СокрЛП(Запись.Поле6);
	КонецЕсли;

	Если СокрЛП(Запись.Поле7) <> "" Тогда
		ТекПредставление = ТекПредставление + ", дом № " + СокрЛП(Запись.Поле7);
	КонецЕсли;

	Если СокрЛП(Запись.Поле8) <> "" Тогда
		ТекПредставление = ТекПредставление + ", корпус " + СокрЛП(Запись.Поле8);
	КонецЕсли;

	Если СокрЛП(Запись.Поле9) <> "" Тогда
		ТекПредставление = ТекПредставление + ", кв." + СокрЛП(Запись.Поле9);
	КонецЕсли;

	Если СтрДлина(ТекПредставление) > 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли;
	
	Возврат ТекПредставление;

КонецФункции

// Процедура формирует строковое представление адреса.
Процедура СформироватьПредставлениеТелефона(НаборПолей) Экспорт

	НаборПолей.Представление = НаборПолей.Поле1;
	НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле2)),(ПроверкаПустойСтроки(НаборПолей.Представление, Ложь)+"(" + НаборПолей.Поле2 + ")"),"");
	НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле3)),(ПроверкаПустойСтроки(НаборПолей.Представление, ПустаяСтрока(НаборПолей.Поле2)) + ПривестиНомерТелефонаКШаблону(НаборПолей.Поле3)),"");
	Если НЕ ПустаяСтрока(НаборПолей.Представление) Тогда
		НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле4)),(ПроверкаПустойСтроки(НаборПолей.Представление) + "доб. " + ПривестиНомерТелефонаКШаблону(НаборПолей.Поле4)),"");
	Иначе
		НаборПолей.Представление = ПривестиНомерТелефонаКШаблону(НаборПолей.Поле4);
	КонецЕсли; 

КонецПроцедуры // СформироватьПредставление()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА ХРАНЕНИЯ КОНТАКНОЙ ИНФОРМАЦИИ

// Функция определяет вид объекта контактной информации
//
// Параметры
//  ОбъектСсылка - Ссылка на объект контактной информации
// Возвращаемые значения
//  Возвращается ссылка на перечисление ВидыОбъектовКонтактнойИнформации,
//  соответствующее параметру ОбъектСсылка
Функция ВидОбъектаКИ(ОбъектСсылка) Экспорт

	Если ОбъектСсылка = Неопределено Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка();
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Организации") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Пользователи") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи;
	//vvv	
	//Иначе
	//	Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка();
	Иначе
		Возврат УправлениеКонтактнойИнформациейПереопределяемый.ВидОбъектаКИ(ОбъектСсылка);
	//	
	КонецЕсли; 
	
КонецФункции // ВидОбъектаКИ()

// Функция вызывается при начале выбора объекта контактной информации
//
// Параметры
//  ФормаЗаписи - форма записи регистра сведений КонтактнаяИнформация
//  Элемент - элемент формы записи регистра сведений КонтактнаяИнформация,
//  значение которого выбирается.
//
// Возвращаемое значение:
//   Булево - продолжить стандартную операцию выбора или нет.
//
Функция НачалоВыбораОбъектаКИ(ФормаЗаписи, Элемент, ТекущийПользователь) Экспорт

	Если Элемент.Значение <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли; 
	
	СписокТиповОбъектов = Новый СписокЗначений;

	МассивТипов = ?(Элемент.ОграничениеТипа.Типы().Количество()>0, Элемент.ОграничениеТипа.Типы(), Элемент.ТипЗначения.Типы());
	Для каждого Тип Из МассивТипов Цикл
		НовыйТип = Новый(Тип);
		СписокТиповОбъектов.Добавить(НовыйТип.Ссылка.Метаданные().Имя, НовыйТип.Ссылка.Метаданные().Синоним);
	КонецЦикла;

	Если СписокТиповОбъектов.Количество() = 1 Тогда
		ВыбранноеЗначениеСписка = СписокТиповОбъектов[0];
	Иначе
		ВыбранноеЗначениеСписка = ФормаЗаписи.ВыбратьИзСписка(СписокТиповОбъектов, Элемент);
	КонецЕсли;
	
	Если ВыбранноеЗначениеСписка = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Элемент.Значение = Справочники[ВыбранноеЗначениеСписка.Значение].ПустаяСсылка();
		Возврат Истина;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА РАБОТЫ С АДРЕСНЫМ КЛАССИФИКАТОРОМ

// Функция определяет является ли последнее слово в строке допустимым 
//  сокращением, и если является, то обрезает его из строки
//
// Параметры
//  СтрокаЭлемента - Строка в которой необходимо обрезать сокращение
// Возвращаемые значения
//  Обрезаную строку в случае, если есть сокращение и полученную строку в 
// обратном случае
Функция ОбрезатьСокращение(Знач СтрокаЭлемента) Экспорт

 	АдресноеСокращение = "";
 	ИмяЭлемента = ПолучитьИмяИАдресноеСокращение(СтрокаЭлемента, АдресноеСокращение);
 	Возврат ИмяЭлемента;

КонецФункции
// Функция по для переданной строки определят необходимость дополнить её
// сокращением
//
// Параметры
//  Название - Строка .для которой определяется необходимость дополнения 
// сокращением
//  Уровень - уровень, для которго необходимо составить список сокращений
// Возвращаемые значения
//  Возвращается Неопределено, если строку дополнять не нужно или список 
// значений с сокращениями в обратном случае
Функция ПолучитьСписокСокращений(Знач Название, Уровень) Экспорт

	Название = СокрЛП(Название);

	Если ПустаяСтрока(Название) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ОбрезатьСокращение(Название) <> Название Тогда // было что обрезать
		Возврат Неопределено; // для строки не требуется допонение сокращением
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уровень", Уровень);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Уровень = &Уровень";

	Выборка = Запрос.Выполнить().Выбрать();

	СписокСокращений = Новый СписокЗначений();

	Пока Выборка.Следующий() Цикл
		СписокСокращений.Добавить(Выборка.Ссылка.Сокращение);
	КонецЦикла;

	Если СписокСокращений.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат СписокСокращений;
	КонецЕсли;

КонецФункции

// Функция формирует строку с названием адресного элемента,
// которое состоит из наименования и сокращения
//
// Параметры:
//  АдресныйЭлемент - элемент справочника Адресный классфикатор.
//
// Возвращаемое значение:
//  Название адресного элемента
//
Функция ПолучитьНазвание(АдресныйЭлемент) Экспорт

	Если АдресныйЭлемент.Код = 0 Тогда
		Возврат "";
	Иначе
		Возврат СокрЛП(АдресныйЭлемент.Наименование)// + " " + СокрЛП(АдресныйЭлемент.Сокращение)
	КонецЕсли;

КонецФункции

// Функция формирует строку с полным названием адресного элемента,
// которое состоит из наименования и сокращения самого адресного
// элемента и его "родителей"
//
// Параметры:
//  КодЭлемента - Код адресного элемента.
//
// Возвращаемое значение:
//  Название адресного элемента и его родителей через запятую
//
//Функция ПолучитьПолноеНазвание(Знач КодЭлемента) Экспорт
 Функция ПолучитьПолноеНазвание(Знач КодЭлемента, НачальныйУровеньДетализации = 1, КонечныйУровеньДетализации = 5) Экспорт
 	Перем КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома;

 	РазложитькодАдресногоЭлементаНаСоставляющие(КодЭлемента, КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома);

	Название = "";
	НовыйКод = 0;

 	Если (КодРегиона > 0) Тогда
		НовыйКод = КодРегиона * МаскаРегиона();
 		Если (1 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 1) Тогда
 			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
 		КонецЕсли;
	КонецЕсли;

	Если (КодРайона > 0) Тогда
		НовыйКод = НовыйКод + КодРайона * МаскаРайона();
 		Если (2 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 2) Тогда
 			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
 		КонецЕсли;
	КонецЕсли;

 	Если (КодГорода > 0) Тогда
		НовыйКод = НовыйКод + КодНаселенногоПункта * МаскаНасПункта();
 		Если (3 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 3) Тогда
 			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
 		КонецЕсли;
	КонецЕсли;

 	Если (КодНаселенногоПункта > 0) Тогда
 		НовыйКод = НовыйКод + КодГорода * МаскаГорода();
		Если (4 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 4) Тогда
 			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
 		КонецЕсли;
	КонецЕсли;

 	Если (КодУлицы > 0) Тогда
		НовыйКод = НовыйКод + КодУлицы * МаскаУлицы();
 		Если (5 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 5) Тогда
 			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
 		КонецЕсли;
	КонецЕсли;

// 	Если (КодДома > 0) Тогда
// 		НовыйКод = НовыйКод + КодДома * МаскаДома();
// 		Если (6 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 6) Тогда
// 			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
// 		КонецЕсли;
// 	КонецЕсли;

	Если СтрДлина(Название) > 2 Тогда
		Название = Сред(Название, 3);
	КонецЕсли;

	Возврат Название;

КонецФункции

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  ТипАдресногоЭлемента -  число - тип адресного элемента.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьМаскуПоТипу(ТипАдресногоЭлемента) Экспорт

	Если ТипАдресногоЭлемента = 1 Тогда
		Возврат МаскаРегиона();

	ИначеЕсли ТипАдресногоЭлемента = 2 Тогда
		Возврат МаскаРайона();

	ИначеЕсли ТипАдресногоЭлемента = 4 Тогда
		Возврат МаскаГорода();

	ИначеЕсли ТипАдресногоЭлемента = 3 Тогда
		Возврат МаскаНасПункта();

	ИначеЕсли ТипАдресногоЭлемента = 5 Тогда
		Возврат МаскаУлицы();

	//ИначеЕсли ТипАдресногоЭлемента = 6 Тогда
	//	Возврат МаскаДома();

	//Иначе
	//	Возврат МаскаКвартиры();

	КонецЕсли;

КонецФункции

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  ТипАдресногоЭлемента -  число - тип адресного элемента.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьТипАдресногоЭлемента(КодЭлемента) Экспорт
	
	Если КодЭлемента = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если КодЭлемента % МаскаРегиона() < 10  Тогда // регион 10(14) ноль 
		Если КодЭлемента % МаскаРегиона() = 5 тогда
			Возврат 4;
		Иначе
			Возврат 1;
		КонецЕсли;
		
	ИначеЕсли КодЭлемента % МаскаРайона() < 1000 Тогда // район 6(10) ноль 
		Если  Цел((КодЭлемента % МаскаРайона())/100) = 4 тогда
			Возврат 4;
		Иначе
			Возврат 2;
		КонецЕсли;
		
	ИначеЕсли КодЭлемента % МаскаНасПункта() < 1000 Тогда // сельсовет 3(7) ноль 
		Если  Цел((КодЭлемента % МаскаНасПункта())/100) = 5 тогда
			Возврат 4;
		Иначе
			Возврат 3;
		КонецЕсли;
		
	ИначеЕсли КодЭлемента % МаскаГорода() < 1000 Тогда // город 0(4) ноль и АА
		Возврат 4;
		
	ИначеЕсли КодЭлемента % МаскаУлицы() < 10000 Тогда // улица 4 ноль и АА
		Возврат 5;
		
	//ИначеЕсли КодЭлемента % МаскаДома() < 100 Тогда // дом 4 ноль и АА
	//	Возврат 6;
	//	
	Иначе // квартира
		Возврат 6;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруАдресногоЭлемента(КодЭлемента) Экспорт

	КодРазбора = КодЭлемента;
	ТипАдресногоЭлемента = ПолучитьТипАдресногоЭлемента(КодРазбора);
	
	КодРегиона = Цел(КодРазбора / МаскаРегиона());
	КодРазбора = КодРазбора % МаскаРегиона();

	КодРайона = Цел(КодРазбора / МаскаРайона());
	КодРазбора = КодРазбора % МаскаРайона();

	КодНаселенногоПункта = Цел(КодРазбора / МаскаНасПункта());
	КодРазбора = КодРазбора % МаскаНасПункта();

	КодГорода = Цел(КодРазбора / МаскаГорода());
	КодРазбора = КодРазбора % МаскаГорода();

	КодУлицы = Цел(КодРазбора / МаскаУлицы());
	
	ТексЗапроса = "ВЫБРАТЬ
	              |	АдресныйКлассификатор.Код,
	              |	АдресныйКлассификатор.КодРегионаВКоде,
	              |	АдресныйКлассификатор.Наименование,
	              |	АдресныйКлассификатор.Сокращение,
	              |	АдресныйКлассификатор.Индекс,
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	              |	АдресныйКлассификатор.КодРайонаВКоде,
	              |	АдресныйКлассификатор.КодГородаВКоде,
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
	              |	АдресныйКлассификатор.КодИМНС,
	              |	АдресныйКлассификатор.КодСокращения,
	              |	АдресныйКлассификатор.КодУлицыВКоде
	              |ИЗ
	              |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	              |
	              |ГДЕ
	             // |	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента И
	              |	АдресныйКлассификатор.КодРегионаВКоде = &КодРегиона И
	              |	АдресныйКлассификатор.КодРайонаВКоде = &КодРайона И
	              |	АдресныйКлассификатор.КодГородаВКоде = &КодГорода И
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПункта И
	              |	АдресныйКлассификатор.КодУлицыВКоде = &КодУлицы И
	              |	АдресныйКлассификатор.Код = &КодЭлемента";
	
	Запрос = Новый Запрос(ТексЗапроса);
	//Запрос.УстановитьПараметр("ТипАдресногоЭлемента", ТипАдресногоЭлемента);
	Запрос.УстановитьПараметр("КодРегиона", КодРегиона);
	Запрос.УстановитьПараметр("КодРайона", КодРайона);
	Запрос.УстановитьПараметр("КодГорода", КодГорода);
	Запрос.УстановитьПараметр("КодНаселенногоПункта", КодНаселенногоПункта);
	Запрос.УстановитьПараметр("КодУлицы", КодУлицы);
	Запрос.УстановитьПараметр("КодЭлемента", КодЭлемента);
	
 	РезультатЗапроса = Запрос.Выполнить(); 
 	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		//Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодРегионаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде,КодСокращения,КодИМНС",
		//						 Выборка.Код,
		//						 Выборка.Наименование,
		//						 Выборка.Сокращение,
		//						 Выборка.ТипАдресногоЭлемента,
		//						 Выборка.Индекс,
		//						 Выборка.КодРегионаВКоде,
		//						 Выборка.КодРайонаВКоде,
		//						 Выборка.КодГородаВКоде,
		//						 Выборка.КодНаселенногоПунктаВКоде,
		//						 Выборка.КодУлицыВКоде,
		//						 Выборка.КодСокращения,
		//						 Выборка.КодИМНС);

 		Структура = СоздатьСтруктуруПоСтрокеВыборки(РезультатЗапроса, Выборка);
	Иначе 
		Возврат ПолучитьПустуюСтруктуруАдреса();
		
	КонецЕсли;
	
 	Возврат Структура;
КонецФункции

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  АдресныйЭлемент - элемент справочника "Адресный классификатор"
// для которого необходимо получить маску.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьМаску(АдресныйЭлемент) Экспорт

	Возврат ПолучитьМаскуПоТипу(АдресныйЭлемент.ТипАдресногоЭлемента);

КонецФункции

// Функция возвращает структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
// Параметры:
// Нет.
//
// Возвращаемое значение:
// Струтктура - структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
Функция ПолучитьПустуюСтруктуруАдреса() Экспорт
	
//{{MRG[ <-> ]
	Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодРегионаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде,КодСокращения,кодИМНС", 0, "", "", 0, "", 0, 0, 0, 0, 0,0,0);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
// 	Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодРегионаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде", 0, "", "", 0, "", 0, 0, 0, 0, 0);
//}}MRG[ <-> ]
	
КонецФункции

// Функция ищет требуемый адресный элемент по названию и типу 
// и возвращает первый найденный. В качестве дополнения может 
// быть задан элемент "родитель"
//
// Параметры:
//  НазваниеЭлемента - название адресного элемента ( с сокращением)
//  ТипЭлемента - тип искомого адресного элемента
//  ЭлементРодитель - элемент "родитель"
//
// Возвращаемое значение:
//  Найденный элемент справоника Адресный классификатор или пустая ссылка в случае неудачи
//
Функция ПолучитьАдресныйЭлемент(НазваниеЭлемента, ТипЭлемента, КодЭлементаРодителя = 0) Экспорт

 	Перем КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома;
	Если (СокрЛП(НазваниеЭлемента) = "") ИЛИ (ТипЭлемента = 0) Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса();
	КонецЕсли;
 	// смотрим есть ли в имени адресное сокращение этого уровня
 	// если есть, то ищем по наименованию и адресному сокращению
 	АдресноеСокращение = "";
 	НазваниеЭлемента = ПолучитьИмяИАдресноеСокращение(НазваниеЭлемента, АдресноеСокращение);

 	Запрос = Новый Запрос();
 	ОграничениеПоКоду = "";
 	Если КодЭлементаРодителя > 0 Тогда // проверка на соответствие подчинению родителю
 		ТипАдрЭлемента = ПолучитьТипАдресногоЭлемента(КодЭлементаРодителя);
 		МаскаРодителя = ПолучитьМаскуПоТипу(ТипАдрЭлемента);
 		Если ТипАдрЭлемента <= 5 Тогда
 			КодЭлемента = КодЭлементаРодителя;
 			РазложитькодАдресногоЭлементаНаСоставляющие(КодЭлемента, КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома);
 			Если КодРегиона <> 0 Тогда
 				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодРегионаВКоде = &КодРегионаВКоде)";
 				Запрос.УстановитьПараметр("КодРегионаВКоде", КодРегиона);
 			КонецЕсли;
 			Если КодРайона <> 0 Тогда
 				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде)";
 				Запрос.УстановитьПараметр("КодРайонаВКоде", КодРайона);
 			КонецЕсли;
 			Если КодГорода <> 0 Тогда
 				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде)";
 				Запрос.УстановитьПараметр("КодГородаВКоде", КодГорода);
 			КонецЕсли;
 			Если КодНаселенногоПункта <> 0 Тогда
 				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде)";
 				Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", КодНаселенногоПункта);
 			КонецЕсли;
 			Если КодУлицы <> 0 Тогда
 				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодУлицыВКоде = &КодУлицыВКоде)";
 				Запрос.УстановитьПараметр("КодУлицыВКоде", КодУлицы);
 			КонецЕсли;
 		Иначе
 			// ограничиваем по коду элемента
 			КонечноеЗначениеКода = КодЭлементаРодителя + МаскаРодителя - 1; 
 			ОграничениеПоКоду = Символы.ПС + "  И (АдресныйКлассификатор.Код Между &НачальноеЗанчениеКода И &КонечноеЗначениеКода)";
 			Запрос.УстановитьПараметр("НачальноеЗанчениеКода", КодЭлементаРодителя);
 			Запрос.УстановитьПараметр("КонечноеЗначениеКода", КонечноеЗначениеКода);
 		КонецЕсли;
 	КонецЕсли;
 	// ограничение на адресное сокращение
 	Если АдресноеСокращение <> "" Тогда
 		ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.Сокращение = &АдресноеСокращение)";
 		Запрос.УстановитьПараметр("АдресноеСокращение", АдресноеСокращение);
 	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ
	              |	АдресныйКлассификатор.Код,
	              |	АдресныйКлассификатор.КодРегионаВКоде,
	              |	АдресныйКлассификатор.Наименование,
	              |	АдресныйКлассификатор.Сокращение,
	              |	АдресныйКлассификатор.Индекс,
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	              |	АдресныйКлассификатор.КодРайонаВКоде,
	              |	АдресныйКлассификатор.КодГородаВКоде,
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
	              |	АдресныйКлассификатор.КодИМНС,
	              |	АдресныйКлассификатор.КодСокращения,
	              |	АдресныйКлассификатор.КодУлицыВКоде
	              |ИЗ
	              |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	              |
	              |ГДЕ
 	              |	АдресныйКлассификатор.Наименование = &Наименование И
 	              |	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента " +
 				  ОграничениеПоКоду;
	
	Запрос.УстановитьПараметр("Наименование", НазваниеЭлемента);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", ТипЭлемента);
 	РезультатЗапроса = Запрос.Выполнить();
 	Выборка = РезультатЗапроса.Выбрать();
	
 	Если Выборка.Следующий() Тогда
 		Структура = СоздатьСтруктуруПоСтрокеВыборки(РезультатЗапроса, Выборка);
 	Иначе 
 		Структура =  ПолучитьПустуюСтруктуруАдреса();
	КонецЕсли;
	
 	Возврат Структура;
	
КонецФункции

// Функция определяет входимость числа в заданный диапазон
//  При этом диапазон задается как это описано в комментарии к функции ЧислоВИнтервале
//
// Параметры: 
//  Номер - (число, строка) номер дома с корпусом
//  Интервал - (строка), интервал чисел (домов)
//
// Возвращаемое значение:
//  Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит
//
Функция ВходитВИнтервал(Знач Номер, Интервал) Экспорт

	Если ПустаяСтрока("" + Номер) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Номер, Ложь) Тогда
		Возврат СтрЗаменить("" + Номер, " ", "") = СтрЗаменить("" + Интервал, " ", "");
	КонецЕсли;

	Номер = Число(Номер);

	ТолькоЧислоИнтервал = ОбщегоНазначения.ТолькоЦифрыВСтроке(Интервал, Ложь);
	
	Если ТолькоЧислоИнтервал Тогда
		Если Номер = Число(Интервал) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Если Найти(Интервал,"Ч") > 0 Тогда // диапазон четных чисел
		Интервал      = СтрЗаменить(Интервал, "Ч", "");
		Четность = 2;
		
	ИначеЕсли Найти(Интервал,"Н") > 0 Тогда // диапазон нечетных чисел
		Интервал      = СтрЗаменить(Интервал, "Н", "");
		Четность = 1;
		
	ИначеЕсли (Найти(Интервал, "-") = 0) И ТолькоЧислоИнтервал Тогда 
		// интервал это дом представленный в виде строки
		Возврат Ложь;
		
	Иначе
		Четность=0;
		
	КонецЕсли;
	
	Интервал = СтрЗаменить(Интервал, ")", ""); // на всякий случай уберем скобки
	Интервал = СтрЗаменить(Интервал, "(", "");
	Позиция  = Найти(Интервал, "-");
	Попали = 0;
	
	Если Позиция <> 0 Тогда
		МинЗначение  = Число(Лев(Интервал, Позиция - 1));
		МаксЗначение = Число(Сред(Интервал, Позиция + 1));
		Если (Номер >= МинЗначение) И (Номер <= МаксЗначение) Тогда
			Попали = 1;
		КонецЕсли;
		
	Иначе
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Интервал, Ложь) Тогда
			Если Номер = Число(Интервал) Тогда
				Попали = 1;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Если (Попали = 1) И (
	((Четность = 2) И (Номер % 2 = 0)) ИЛИ 
	((Четность = 1) И (Номер % 2 = 1)) ИЛИ 
	 (Четность = 0)) Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВходитВИнтервал()

// Функция определяет входимость:
//  1. Номера дома (представленного в виде строки)
//     где Номер дома, это строка вида:
//     <СтрокаДом> пример: 58А, 32/1, 50А/8
//
//  2. Номера дома и номера корпуса (строения), в виде строки:
//     <СтрокаДом>к<СтрокаКорпус>,   пример: 32к1   это дом 32 корпус 1, 
//     <СтрокаДом>/<СтрокаКорпус>,   пример: 32/1   это дом 32 корпус 1, 
//     <СтрокаДом>стр<СтрокаКорпус>, пример: 32стр1 это дом 32 корпус 1, 
//		
//  3. Числа (номера дома) в заданный интервал чисел
//     При этом интервал задается строкой вида:
//     <Диапазон>[,<Диапазон>]
//     где Диапазон, это строка вида:
//     [Ч/Н]<Число>[-<Число>]
//     Префикс Ч или Н диапазона обозначает четность и нечетность входящих в него чисел
//     Пример: в интервал Ч12-14,Н1-5,20-29 входят числа 1,3,5,12,14 и все с 20 по 29
//
// Параметры: 
//  Номер - (число, строка) номер дома с корпусом
//  Интервал - (строка), интервал чисел (домов)
//
//  Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит
//
Функция НомерДомаВИнтервале(Номер, Знач Интервал) Экспорт
	
	Пока НЕ ПустаяСтрока(Интервал) Цикл

		Позиция = Найти(Интервал, ",");
		Если Позиция = 0 Тогда
			Возврат ВходитВИнтервал(Номер, Интервал);
		Иначе
			Если ВходитВИнтервал(Номер, СокрЛП(Лев(Интервал, Позиция - 1))) Тогда
				Возврат Истина;
			Иначе
				Интервал = Сред(Интервал, Позиция + 1);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции // НомерДомаВИнтервале()

// Функция определяет индекс по переданным улице, дому и корпусу
//
// Параметры: 
//  Улица - элемент справочника адресный классификатор с требуемой улицей
//  НомерДома - номер дома, для которго необходимо получить индекс
//  НомерКорпуса - номер корпуса
//
// Возвращаемое значение:
//  Строка - шестизначный почтовый индекс
//
Функция ПолучитьИндексПоУлицеДомуКорпусу(Улица, НомерДома, НомерКорпуса) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уровень", 6);
	Запрос.УстановитьПараметр("НижнийКод", Цел(Улица.Код / 10000000000) * 10000000000);
	Запрос.УстановитьПараметр("ВерхнийКод", Цел(Улица.Код / 10000000000 + 1) * 10000000000);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныйКлассификатор.Наименование,
	|	АдресныйКлассификатор.Индекс
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = &Уровень И
	|	АдресныйКлассификатор.Код МЕЖДУ &НижнийКод И &ВерхнийКод";

	Выборка = Запрос.Выполнить().Выбрать();
 	ИндексДома = "";
	Пока Выборка.Следующий() Цикл

		Если НЕ ПустаяСтрока(Выборка.Индекс) Тогда
			Интервал = Врег(СокрЛП(Выборка.Наименование));
			
 			Если НомерДомаВИнтервале(СокрЛП(НомерДома), Интервал) Тогда
 				ИндексДома = Выборка.Индекс;
 			КонецЕсли;
			
			Если (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "К", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
				Возврат Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "/", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
				Возврат Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "стр", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
				Возврат Выборка.Индекс;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ИндексДома) Тогда
 		Возврат ИндексДома;
 	Иначе
 		Возврат Улица.Индекс;
 	КонецЕсли;

КонецФункции

// Функция определяет индекс по переданным региону, району, городу, населенному пункту,
// улице, дому и корпусу
//
// Параметры: 
//  НазваниеРегиона - название региона( с сокращением)
//  НазваниеРайона - название района( с сокращением)
//  НазваниеГорода - название города( с сокращением)
//  НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//  Улица - название улицы ( с сокращением)
//  НомерДома - номер дома, для которго необходимо получить индекс
//  НомерКорпуса - номер корпуса
//
// Возвращаемое значение:
//  Строка - шестизначный почтовый индекс
//
Функция ПолучитьИндекс(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы, Знач НомерДома, Знач НомерКорпуса) Экспорт

	РодительИндекса = ПолучитьПустуюСтруктуруАдреса();
	Индекс = "";
	
 	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1);
	Если Регион.Код > 0 Тогда
        РодительИндекса = Регион;
		Если НЕ ПустаяСтрока(Регион.Индекс) Тогда
			Индекс = Регион.Индекс;
		КонецЕсли;
	КонецЕсли;
	
 	Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, РодительИндекса.Код);
	Если Район.Код > 0 Тогда
		РодительИндекса = Район;
		Если НЕ ПустаяСтрока(Район.Индекс) Тогда
			Индекс = Район.Индекс;
		КонецЕсли;
	КонецЕсли;
	
 	Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, РодительИндекса.Код);
	Если Город.Код > 0 Тогда
		РодительИндекса = Город;
		Если НЕ ПустаяСтрока(Город.Индекс) Тогда
			Индекс = Город.Индекс;
		КонецЕсли;
	КонецЕсли;
	
 	НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, РодительИндекса.Код);
	Если НаселенныйПункт.Код > 0 Тогда
		РодительИндекса = НаселенныйПункт;
		Если НЕ ПустаяСтрока(НаселенныйПункт.Индекс) Тогда
			Индекс = НаселенныйПункт.Индекс;
		КонецЕсли;
	КонецЕсли;
	
 	Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, РодительИндекса.Код);
	Если Улица.Код > 0 Тогда
		ИндексУлицы = ПолучитьИндексПоУлицеДомуКорпусу(Улица, НомерДома, НомерКорпуса);
		Если НЕ ПустаяСтрока(ИндексУлицы) Тогда
			Индекс = ИндексУлицы;
		КонецЕсли;
	КонецЕсли;

	Возврат Индекс;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С АДРЕСНЫМ КОДОМ

// Маска  СС РРР ГГГ ППП УУУУ ДДДД КККК АА
//
//        СС   - код региона
//        РРР  - код района
//        ГГГ  - код города
//        ППП  - код населенного пункта
//        УУУУ - код улицы
//        ДДДД - код дома
//        КККК - код квартиры
//        АА   - код актуальности

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаРегиона() Экспорт
	Возврат 10000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаРайона() Экспорт
	Возврат 10000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаГорода() Экспорт
	Возврат 10000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаНасПункта() Экспорт
	Возврат 10000000;
КонецФункции


// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаУлицы() Экспорт
	Возврат 1;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаДома() Экспорт
	Возврат 1;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаКвартиры() Экспорт
	Возврат 1;
КонецФункции

 //#КонецЕсли
////////////////////////////////////////////////////////////////////////////////
// ДРУГИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//  Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина) Экспорт

	Сведения = Новый Структура("Представление, ПолноеНаименование, КодПоОКПО, ИНН, КПП, Телефоны, ЮридическийАдрес, Банк, БИК, КоррСчет, НомерСчета, АдресБанка");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;

	Если ЮрФизЛицо = Неопределено Тогда
		Возврат Сведения;
	КонецЕсли;

	Запрос.УстановитьПараметр("ПарЮрФизЛицо", ЮрФизЛицо);

	// Выберем основные сведения о контрагентеЮрФизЛицо.ОсновнойБанковскийСчет.БанкДляРасчетов.Пустая
	Если ЮрФизЛицо.ОсновнойБанковскийСчет.БанкДляРасчетов.Пустая() Тогда
		ИмяРеквизитаБанка = "Банк";
	Иначе
		ИмяРеквизитаБанка = "БанкДляРасчетов";
	КонецЕсли;
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
	Иначе
		Возврат Сведения;
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Представление КАК Наименование,
	|	НаименованиеПолное КАК ПолноеНаименование,
	|	ИНН,
	|	КПП,
	|	КодПоОКПО КАК КодПоОКПО,
	|	ОсновнойБанковскийСчет.НомерСчета КАК НомерСчета,
	|	ОсновнойБанковскийСчет."+ИмяРеквизитаБанка+" КАК Банк,
	|	ОсновнойБанковскийСчет."+ИмяРеквизитаБанка+".Код      КАК БИК,
	|	ОсновнойБанковскийСчет."+ИмяРеквизитаБанка+".КоррСчет КАК КоррСчет,
	|	ОсновнойБанковскийСчет."+ИмяРеквизитаБанка+".Адрес    КАК АдресБанка
	|ИЗ
	|	Справочник."+ИмяСправочника+" КАК Организации
	|
	|ГДЕ
	|	Организации.Ссылка = &ПарЮрФизЛицо";
	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();
	Если ЮрФизЛицо.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		Сведения.Вставить("КодПоОКПО", Данные.КодПоОКПО);
		Сведения.Вставить("КПП",       Данные.КПП);
	Иначе
		Сведения.Вставить("КодПоОКПО", "");
		Сведения.Вставить("КПП",       "");
	КонецЕсли;
	Сведения.Вставить("ПолноеНаименование", Данные.ПолноеНаименование);

	Если Данные <> Неопределено Тогда
		Сведения.Вставить("Представление",    Данные.Наименование);
		Сведения.Вставить("ИНН",              Данные.ИНН);
		Сведения.Вставить("Телефоны",         ПолучитьТелефонИзКонтактнойИнформации(ЮрФизЛицо));
		Сведения.Вставить("НомерСчета",       Данные.НомерСчета);
		Сведения.Вставить("Банк",             Данные.Банк);
		Сведения.Вставить("БИК",              Данные.БИК);
		Сведения.Вставить("АдресБанка",       Данные.АдресБанка);
		Сведения.Вставить("КоррСчет",         Данные.КоррСчет);
		Сведения.Вставить("ЮридическийАдрес", ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо,"Юридический"));
		Сведения.Вставить("ФактическийАдрес", ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо,"Фактический"));
		Если Не ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
				Сведения.ПолноеНаименование = Сведения.Представление;
		КонецЕсли;
	КонецЕсли;

	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице()

// Функция находит актуальное значение адреса в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//  ТипАдреса - тип контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного адреса
//
Функция ПолучитьАдресИзКонтактнойИнформации(Объект, ТипАдреса = "") Экспорт

	Если Не ЗначениеЗаполнено(ТипАдреса) Тогда
		Возврат "";
	КонецЕсли;

	Если ТипАдреса="Фактический" Тогда
		Начало = "Факт";
	ИначеЕсли ТипАдреса="Регистрации"
		  ИЛИ ТипАдреса="Юридический" Тогда
		Начало = "Юр";
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
		Окончание = "Организации";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			Окончание = "Контрагента";
		Иначе
			Окончание = "ФизЛица";
		КонецЕсли;
	КонецЕсли;
	
	ВидАдреса = Справочники.ВидыКонтактнойИнформации[Начало+"Адрес"+Окончание].ПолучитьОбъект().Ссылка;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И
	|	КонтактнаяИнформация.Тип = &Тип
	|	И
	|	КонтактнаяИнформация.Вид = &Вид
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Представление;
	КонецЕсли;

КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

// Функция находит актуальное значение телефона в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного телефона
//
Функция ПолучитьТелефонИзКонтактнойИнформации(Объект) Экспорт

	ВидТелефона = Справочники.ВидыКонтактнойИнформации["ТелефонОрганизации"].ПолучитьОбъект().Ссылка;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Вид"   , ВидТелефона);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И
	|	КонтактнаяИнформация.Тип = &Тип
	|	И
	|	КонтактнаяИнформация.Вид = &Вид
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Представление;
	КонецЕсли;

КонецФункции // ПолучитьТелефонИзКонтактнойИнформации()

// Функция раскладывает номер телефона, по полям для записи в КИ объекта
//
// Параметры
//  
//  НомерТелефона - строка, номер телефона для преобразования
//
// Возвращаемое значение:
//   Список значений
//
Функция РазложитьТелефонПоПолям(НомерТелефона) Экспорт

	КодСтраны = "";
	НачалоКодаСтраны = Найти(НомерТелефона, "+");
	Если НачалоКодаСтраны > 0 Тогда
		Для а = (НачалоКодаСтраны + 1) По СтрДлина(НомерТелефона) Цикл
			Если Сред(НомерТелефона, а, 1) = " " Тогда
				Прервать;
			КонецЕсли; 
			КодСтраны = КодСтраны + Сред(НомерТелефона, а, 1);
		КонецЦикла; 
	КонецЕсли; 
	КодСтраны = СокрЛП(КодСтраны);

	КодГорода = "";
	Если СтрЧислоВхождений(НомерТелефона, "(") = 1 И СтрЧислоВхождений(НомерТелефона, ")") = 1 Тогда
		НачалоКодаГорода = Найти(НомерТелефона, "(");
		КонецКодаГорода = Найти(НомерТелефона, ")");
		Если КонецКодаГорода > НачалоКодаГорода Тогда
			КодГорода = Сред(НомерТелефона, (НачалоКодаГорода + 1), (КонецКодаГорода - НачалоКодаГорода - 1));
		КонецЕсли;
	КонецЕсли;
	КодГорода = СокрЛП(КодГорода);

	СамТелефон = НомерТелефона;
	Если НЕ ПустаяСтрока(КодСтраны) Тогда
		СамТелефон = СтрЗаменить(СамТелефон, ("+" + КодСтраны), "");
		СамТелефон = СокрЛП(СамТелефон);
	КонецЕсли; 
	Если НЕ ПустаяСтрока(КодГорода) Тогда
		СамТелефон = СтрЗаменить(СамТелефон, ("(" + КодГорода + ")"), "");
		СамТелефон = СокрЛП(СамТелефон);
	КонецЕсли;
	
	а = 1;
	Пока а <= СтрДлина(СамТелефон) Цикл
		Если (КодСимвола(Сред(СамТелефон, а, 1)) >= 48 И КодСимвола(Сред(СамТелефон, а, 1)) <= 57) ИЛИ КодСимвола(Сред(СамТелефон, а, 1)) = 32 Тогда
			а = а + 1;
			Продолжить;
		КонецЕсли;
		СамТелефон = Сред(СамТелефон, 1, (а - 1)) + Сред(СамТелефон, (а + 1));
	КонецЦикла; 

	Если НЕ ПустаяСтрока(КодСтраны) И Лев(СокрЛ(КодСтраны), 1) <> "+" Тогда
		КодСтраны = СокрЛП(КодСтраны);
		Пока Лев(КодСтраны, 1) = "0" Цикл
			КодСтраны = Сред(КодСтраны, 2);
		КонецЦикла;
		Если НЕ ПустаяСтрока(КодСтраны) Тогда
			КодСтраны = "+" + КодСтраны;
		КонецЕсли; 
	КонецЕсли; 
	
	СтруктураПолейТелефона = Новый Структура("КодСтраны,КодГорода,СамТелефон", КодСтраны, КодГорода, ПривестиНомерТелефонаКШаблону(СамТелефон));
	
	Возврат СтруктураПолейТелефона;

КонецФункции // ()

// Функция приводит телефонный номер к одному из указанных в настройке шаблонов
//
// Параметры
//  НомерТЛФ – строка, номер телефона, который надо преобразовывать
//
// Возвращаемое значение:
//   Приведенный номер – строка, номер, приведенный к одному из шаблонов
//
Функция ПривестиНомерТелефонаКШаблону(НомерТЛФ) Экспорт
	
	ТолькоЦифрыНомера = "";
	КоличествоЦифрНомера = 0;
	
	Для а=1 По СтрДлина(НомерТЛФ) Цикл
		Если СтрЧислоВхождений("1234567890",Сред(НомерТЛФ,а,1)) > 0 Тогда
			КоличествоЦифрНомера = КоличествоЦифрНомера + 1;
			ТолькоЦифрыНомера = ТолькоЦифрыНомера + Сред(НомерТЛФ,а,1);
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоЦифрНомера = 0 Тогда
		Возврат НомерТЛФ;
	КонецЕсли;
	
	СтруктураШаблонов = Константы.ШаблоныТелефонныхНомеров.Получить().Получить();
	Если ТипЗнч(СтруктураШаблонов) <> Тип("Соответствие") Тогда
		Возврат НомерТЛФ;
	КонецЕсли; 
	ПолученныйШаблон = СтруктураШаблонов.Получить(КоличествоЦифрНомера);
	
	Если ПолученныйШаблон = Неопределено Тогда
		Возврат НомерТЛФ;
	КонецЕсли;
	
	ПриведенныйНомер = "";
	НомерЦифры = 0;
	
	Для а=1 По СтрДлина(ПолученныйШаблон) Цикл
		Если Сред(ПолученныйШаблон,а,1) = "9" Тогда
			НомерЦифры = НомерЦифры + 1;
			ПриведенныйНомер = ПриведенныйНомер + Сред(ТолькоЦифрыНомера,НомерЦифры,1);
		Иначе
			ПриведенныйНомер = ПриведенныйНомер + Сред(ПолученныйШаблон,а,1);
		КонецЕсли;
	КонецЦикла; 

	Возврат ПриведенныйНомер;
	
КонецФункции // ПривестиКШаблону()

#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА ХРАНЕНИЯ КОНТАКНОЙ ИНФОРМАЦИИ

// Процедура открывает форму справочника ВидыКонтактнойИнформации для выбора.
//
// Параметры:
//  РеджимВыбора - булево, задает режим выбора для открываемой формы.
//  ВладелецФормы - задает владельца для открываемой формы.
//  ЗначениеОтбораПоТипу - задает значение отбора по типу конт.инф.
//  ЗначениеОтбораПоВидуОбъектаКИ - задает значение отбора по виду объекта конт.инф.
Процедура ОткрытьФормуВыбораВидаКИ(РежимВыбора, ВладелецФормы, ЗначениеОтбораПоТипу = Неопределено,
                                     ЗначениеОтбораПоВидуОбъектаКИ = Неопределено) Экспорт

	ВыбФорма = Справочники.ВидыКонтактнойИнформации.ПолучитьФорму("ФормаВыбора", ВладелецФормы);
	ВыбФорма.РежимВыбора = РежимВыбора;
	
	Если ЗначениеОтбораПоТипу <> Неопределено Тогда
		ВыбФорма.Отбор.Тип.Значение = ЗначениеОтбораПоТипу;
		ВыбФорма.Отбор.Тип.Использование = Истина;
		ВыбФорма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Тип.Доступность = Ложь;
	КонецЕсли; 
	
	Если ЗначениеОтбораПоВидуОбъектаКИ <> Неопределено Тогда
		ВыбФорма.Отбор.ВидОбъектаКонтактнойИнформации.Значение = ЗначениеОтбораПоВидуОбъектаКИ;
		ВыбФорма.Отбор.ВидОбъектаКонтактнойИнформации.Использование = Истина;
		ВыбФорма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбъектаКонтактнойИнформации.Доступность = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ВладелецФормы.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации")
	   И ЗначениеЗаполнено(ВладелецФормы.Значение) Тогда
		ВыбФорма.ПараметрТекущаяСтрока = ВладелецФормы.Значение;
	КонецЕсли; 
	
	ВыбФорма.Открыть();
	
КонецПроцедуры
// Этот модуль предназачен для реализации алгоритмов работы 
// с контактной информацией.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполняет поля объекта редактирования адреса по структуре
Процедура ЗаполнитьОбъектРедактированияАдресаПоСтруктуре(Объект, СтруктураАдреса) Экспорт
	
	Если СтруктураАдреса = Неопределено Тогда
		
		Объект.Поле1 = "";
		Объект.Поле2 = "";
		Объект.Поле3 = "";
		Объект.Поле4 = "";
		Объект.Поле5 = "";
		Объект.Поле6 = "";
		Объект.Поле7 = "";
		Объект.Поле8 = "";
		Объект.Поле9 = "";
		Объект.Поле10 = "";
		Объект.Поле11 = "";
		Объект.Поле12 = "";
		Объект.Поле13 = "";
		Объект.Представление = "";
	
		Возврат;
	КонецЕсли;
	
	Если СтруктураАдреса.Свойство("ЗаПределамиРФ") Тогда			
		Объект.Поле1 = СтруктураАдреса.Страна;
		Объект.Представление = СтруктураАдреса.Представление;		
	Иначе
		Объект.Поле1 = СтруктураАдреса.Индекс;
		Объект.Поле2 = СтруктураАдреса.Регион;
		Объект.Поле3 = СтруктураАдреса.Район;
		Объект.Поле4 = СтруктураАдреса.Город;
		Объект.Поле5 = СтруктураАдреса.НаселенныйПункт;
		Объект.Поле6 = СтруктураАдреса.Улица;
		Объект.Поле7 = СтруктураАдреса.Дом;
		Объект.Поле8 = СтруктураАдреса.Корпус;
		Объект.Поле9 = СтруктураАдреса.Квартира;
		Объект.Поле10 = СтруктураАдреса.Улица;
		Объект.Поле11 = СтруктураАдреса.Дом;
		Объект.Поле12 = СтруктураАдреса.Корпус;
		Объект.Поле13 = СтруктураАдреса.Квартира;
		
		//Определяем представление сразу же
		Объект.Представление = ПолучитьПредставлениеАдреса(Объект);
	КонецЕсли;
  
КонецПроцедуры

//Процедура дополняет представление адреса строкой 
Процедура ДополнитьПредставлениеАдреса(ТекущееПредставление, Дополнение, СтрокаКонкатенации)
	
	Если Дополнение <> "" Тогда
		ТекущееПредставление = ТекущееПредставление + СтрокаКонкатенации + Дополнение;
	КонецЕсли;
  	
КонецПроцедуры

// Функция возвращает строковое представление адреса (в формате через запятую) , включая незаполненные поля
Функция ПолучитьПолныйАдрес(Запись) Экспорт
	
	Результат = "";
	
	Если Запись = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПолучитьПредставлениеАдреса(Запись) = Запись.Представление Тогда	
		Результат = "," + 
		СокрЛП(Запись.Поле1) + ", " +
		СокрЛП(Запись.Поле2) + ", " +
		СокрЛП(Запись.Поле3) + ", " +
		СокрЛП(Запись.Поле4) + ", " +
		СокрЛП(Запись.Поле5) + ", " +
		СокрЛП(Запись.Поле6) + ", " +
		СокрЛП(Запись.Поле7) + ", " +
		СокрЛП(Запись.Поле8) + ", " +
		СокрЛП(Запись.Поле9);
		
	Иначе
		Результат = Запись.Представление;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаменить(Результат, ",", "")) Тогда
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция выполняет "преобразование" строкового представления адреса в структуру
Функция ПолучитьСтруктуруАдресаИзСтроки(Знач СтроковыйАдрес) Экспорт
	
	Если ПустаяСтрока(СтроковыйАдрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧислоВхожденийЗапятойВАдрес = СтрЧислоВхождений(СтроковыйАдрес, ","); 
	
	Если ЧислоВхожденийЗапятойВАдрес = 9 Тогда
		
		СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(СтроковыйАдрес);
		
	ИначеЕсли ЧислоВхожденийЗапятойВАдрес >= 1 Тогда
		
		СтруктураАдреса = Новый Структура;	
		СтруктураАдреса.Вставить("ЗаПределамиРФ", Истина);
		СтруктураАдреса.Вставить("Страна", СокрЛП(Лев(СтроковыйАдрес, Найти(СтроковыйАдрес, ",") - 1)));
		СтруктураАдреса.Вставить("Представление", СтроковыйАдрес);			
		
	Иначе
		// вообще запятых нет в представлении - значит необычный Российский Адрес
		СтруктураАдреса = Новый Структура;	
		СтруктураАдреса.Вставить("ЗаПределамиРФ", Истина);
		СтруктураАдреса.Вставить("Страна", Справочники.КлассификаторСтранМира.БЕЛАРУСЬ.Наименование);
		СтруктураАдреса.Вставить("Представление", СтроковыйАдрес);
		
	КонецЕсли;
		
	Возврат СтруктураАдреса;	
	
КонецФункции

// Функция возвращает значение определенного элемента адреса по строке адреса, разделенной запятыми
Функция ПолучитьЭлементАдресаПоСтроке(Знач СтроковыйАдрес, Знач ИмяЭлементаАдреса) Экспорт
	
	СтруктураАдреса = ПолучитьСтруктуруАдресаИзСтроки(СтроковыйАдрес);
	ЗначениеАдресногоЭлемента = "";
	Если (СтруктураАдреса <> Неопределено) И СтруктураАдреса.Свойство(ИмяЭлементаАдреса, ЗначениеАдресногоЭлемента) Тогда
		Возврат ЗначениеАдресногоЭлемента;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции


// Функция по строке адреса через запятую определяет Российский это адрес или нет
Функция ОпределитьЭтоРоссийскийАдрес(Знач СтроковыйАдрес) Экспорт
	
	СтруктураАдреса = ПолучитьСтруктуруАдресаИзСтроки(СтроковыйАдрес);
	Если СтруктураАдреса = Неопределено Или СтруктураАдреса.Свойство("ЗаПределамиРФ") Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

//Функция по структуре с адресом возвращает его представление
Функция ПолучитьПредставлениеАдресаПоСтруктуре(СтруктураАдреса) Экспорт
	
	ТекПредставление = "";
	
	Если СтруктураАдреса = Неопределено Тогда
		Возврат ТекПредставление;
	КонецЕсли;
	
	АдресЗаПределамиРФ = Неопределено;
	СтруктураАдреса.Свойство("ЗаПределамиРФ", АдресЗаПределамиРФ);
	Если АдресЗаПределамиРФ = Неопределено Тогда
		АдресЗаПределамиРФ = Ложь;
	КонецЕсли;
	
	Если Не АдресЗаПределамиРФ Тогда
		
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Индекс), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Область), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Район), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Сельсовет), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.НаселенныйПункт), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Улица), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Дом), ", дом № ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Корпус), ", корпус ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Квартира), ", кв.");
		
		Если СтрДлина(ТекПредставление) > 2 Тогда
			ТекПредставление = Сред(ТекПредставление, 3);
		КонецЕсли;
	
	Иначе
		
		ТекПредставление = СтруктураАдреса.Представление;
	
	КонецЕсли;
	
	Возврат ТекПредставление;
	
КонецФункции

//Функция по строке адреса (разделенная через запятую) возвращает его представление
Функция ПолучитьПредставлениеАдресаПоСтрока(СтрокаАдреса) Экспорт
	
	СтруктураАдреса = ПолучитьСтруктуруАдресаИзСтроки(СтрокаАдреса);
	ПредставлениеАдреса = ПолучитьПредставлениеАдресаПоСтруктуре(СтруктураАдреса);
	Возврат ПредставлениеАдреса
	
КонецФункции

// Процедура формирует представление для Адреса за пределами РФ
Функция СформироватьПредставлениеАдресаЗаПределамиРФ(Страна, Представление) Экспорт

	ТекущееПредставлениеАдреса = Представление;	
	
	Если ЗначениеЗаполнено(Страна) И Страна <> Справочники.КлассификаторСтранМира.БЕЛАРУСЬ.Наименование Тогда
			
		ПозицияСтраныВАдресе = Найти(Представление, Страна);
		// добавляем страну в самое начало представления, если ее там еще нет
		Если ПозицияСтраныВАдресе <> 1 Тогда
			ТекущееПредставлениеАдреса = Страна + ", " + Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекущееПредставлениеАдреса;
	
КонецФункции

// Функция возвращает представление адреса за пределами РФ без Страны
Функция ПолучитьПредставлениеАдресаЗаПределамиРФБезСтраны(Страна, Представление) Экспорт
	
	ТекущееПредставлениеАдреса = Представление;
	
	Если  ЗначениеЗаполнено(Страна) И Страна <> Справочники.КлассификаторСтранМира.БЕЛАРУСЬ.Наименование Тогда
		
		ИмяСтраны = Страна + ", ";
		ПозицияСтраныВАдресе = Найти(Врег(Представление), Врег(ИмяСтраны));
		// Если только страна в начале, то удаляем ее, иначе не трогаем
		Если ПозицияСтраныВАдресе = 1 Тогда
			ТекущееПредставлениеАдреса = Сред(Представление, СтрДлина(ИмяСтраны) + 1);	
		КонецЕсли;
		
	КонецЕсли;

	Возврат ТекущееПредставлениеАдреса;
	
КонецФункции

// Процедура копирует из строки источника адрес в строку приемника
Процедура СкопироватьДанныеАдреса(СтрокаИсточник, СтрокаПриемник)
	
	СтрокаПриемник.Представление	= СтрокаИсточник.Представление;
	СтрокаПриемник.Комментарий 		= СтрокаИсточник.Комментарий;
	Для а = 1 По 13 Цикл
		СтрокаПриемник["Поле" + Строка(а)] = СтрокаИсточник["Поле" + Строка(а)];
	КонецЦикла;
    	
КонецПроцедуры

// Процедура копирует КИ из Ффактич адреса в юридический и наоборот
Процедура СкопироватьАдресКонтактнойИнформации(СтрокаСАдресом, ТаблицаКИ) Экспорт
	
	Если (СтрокаСАдресом = Неопределено) Или (ТаблицаКИ = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаСАдресом.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента	Тогда 
		ВидПоиска = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	ИначеЕсли СтрокаСАдресом.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
		ВидПоиска = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	Иначе
		Возврат;
    КонецЕсли;

	ЗадаватьВопросОбИзменении = Истина;
	
	// бежим по всем записям регистра и те которые нужно поменять - меняем
	Для Каждого СтрокаДляИзменения Из ТаблицаКИ Цикл
		
		// если представление не заполнено то только тогда можно предложить его поменять
		Если СтрокаДляИзменения.Вид = ВидПоиска И Не ЗначениеЗаполнено(СтрокаДляИзменения.Представление) Тогда
			
			Если ЗадаватьВопросОбИзменении Тогда
				
				// вопрос задаем только в том случае, если представление не заполнено, а когда оно заполнено, то ничего не спрашиваем и не меняем
				НужноМенятьАдрес = Вопрос("Изменился " + СтрокаСАдресом.Вид.Наименование + ".
											|Автоматически изменить " + СтрокаДляИзменения.Вид.Наименование + "?", РежимДиалогаВопрос.ДаНет);
				// если менять не нужно - то не меняем							
				Если НужноМенятьАдрес <> КодВозвратаДиалога.Да Тогда 
					Возврат;
				КонецЕсли;
				ЗадаватьВопросОбИзменении = Ложь;
			КонецЕсли;
			
			// изменяем адрес
			СкопироватьДанныеАдреса(СтрокаСАдресом, СтрокаДляИзменения);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры


// Обработчик событие "Нажатия" кнопки выбора режима редактирования
// контаткной информации
Процедура КонтактнаяИнформацияРедактироватьВДиалоге(Кнопка)Экспорт
	
	РазрешеноВСписке = УправлениеПользователями.РазрешитьРедактированиеКИвСписке();
	
	Если РазрешеноВСписке Тогда
		Кнопка.Пометка = НЕ Кнопка.Пометка;
	Иначе
		Предупреждение("Вам разрешено редактировать контактную информацию только в диалоге!",5);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает пометку для кнопки выбора режима редактирования
// контактной информации в форме
Процедура ИнициализацияКнопкиРедактированиеКИВДиалоге(Кнопка) Экспорт
	
	РазрешеноВСписке = УправлениеПользователями.РазрешитьРедактированиеКИвСписке();
	
	Если РазрешеноВСписке Тогда
		НажатиеКнопки = ВосстановитьЗначение("РедактироватьКИВДиалоге");
		Если ТипЗнч(НажатиеКнопки) = Тип("Булево") Тогда
			Кнопка.Пометка = НажатиеКнопки;
		КонецЕсли; 
	Иначе
		Кнопка.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА ХРАНЕНИЯ КОНТАКНОЙ ИНФОРМАЦИИ

// Процедура переносит строку из запроса в Структуру
Процедура ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, СтруктураЭлемента)Экспорт 

	Если СтруктураЭлемента = Неопределено 
		ИЛИ РезультатЗапроса = Неопределено 
		ИЛИ СтрокаВыборки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента.Очистить();
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураЭлемента.Вставить(Колонка.Имя, СтрокаВыборки[Колонка.Имя]);
	КонецЦикла;
	
КонецПроцедуры

// Функция создает структуру по строке выборки
Функция СоздатьСтруктуруПоСтрокеВыборки(РезультатЗапроса, СтрокаВыборки)
	
	РезультирующаяСтруктура = Новый Структура;
	ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, РезультирующаяСтруктура);
	Возврат РезультирующаяСтруктура; 
	
КонецФункции

// Процедура переносит строку из таблицы в Структуру
Процедура ПеренестиСтрокуТаблицыВСтруктуру(Таблица, СтрокаТаблицы, СтруктураЭлемента)Экспорт 
	
	Если СтруктураЭлемента = Неопределено 
		ИЛИ СтрокаТаблицы = Неопределено 
		ИЛИ Таблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента.Очистить();
	Для Каждого Колонка Из Таблица.Колонки Цикл
		СтруктураЭлемента.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА РАБОТЫ С АДРЕСНЫМ КЛАССИФИКАТОРОМ

// Функция по полному наименованию адресного элемента выдает отдельно его имя, и отдельно его адресное сокращение
Функция ПолучитьИмяИАдресноеСокращение(Знач СтрокаЭлемента, АдресноеСокращение) Экспорт

	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПослПробела = Найти(Буфер, " ");
	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;

	Пока  СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = Найти(Буфер, " ");
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Сокращение = &Сокращение";

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
			Возврат СтрокаЭлемента;
		Иначе
			Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
		КонецЕсли;
	Иначе
		Возврат СтрокаЭлемента;
	КонецЕсли;
  	
КонецФункции

// Процедура раскладывает код адресного элемента на составляющие:
// Код Региона, код района, код города, код населенного пункта, код улицы и код дома
Процедура РазложитькодАдресногоЭлементаНаСоставляющие(Знач Код, КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома)
	
	КодЭлемента = Код;

	КодРегиона = Цел(КодЭлемента / МаскаРегиона());
	КодЭлемента = КодЭлемента % МаскаРегиона();
	
	КодРайона = Цел(КодЭлемента / МаскаРайона());
	КодЭлемента = КодЭлемента % МаскаРайона();

	КодГорода = Цел(КодЭлемента / МаскаГорода());
	КодЭлемента = КодЭлемента % МаскаГорода();

	КодНаселенногоПункта = Цел(КодЭлемента / МаскаНасПункта());
	КодЭлемента = КодЭлемента % МаскаНасПункта();

	КодУлицы = Цел(КодЭлемента / МаскаУлицы());
	КодЭлемента = КодЭлемента % МаскаУлицы();

//	КодДома = Цел(КодЭлемента / МаскаДома());

КонецПроцедуры

// Процедура добавляет не нулевое значение кода в структуру
Процедура ДобавитьКодВСтруктуру(ДанныеСтруктуры, ИмяЭлемента, КодЭлемента, УровеньРодителя, УровеньЭлемента)
	
	Если (КодЭлемента <> 0) ИЛИ (УровеньРодителя >= УровеньЭлемента) Тогда
		ДанныеСтруктуры.Вставить(ИмяЭлемента, КодЭлемента);
    КонецЕсли;
	
КонецПроцедуры


// Функция возвращает строку адресного классификатора по значениям адресных элементов
Функция ВернутьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, 
											Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы)
											
	РодительскийЭлемент = Неопределено;
	КодРодителяРодителя = 0;

	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1);
	Если Регион.Код > 0 Тогда
		РодительскийЭлемент = Регион;
		КодРодителяРодителя = Регион.Код;
	КонецЕсли;
	
	Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, КодРодителяРодителя);
	Если Район.Код > 0 Тогда
		РодительскийЭлемент = Район;
		КодРодителяРодителя = Район.Код;
	КонецЕсли;
	
	Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 4, КодРодителяРодителя);
    Если Город.Код > 0 Тогда
		РодительскийЭлемент = Город;
		КодРодителяРодителя = Город.Код;
	КонецЕсли;
	
	НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 3, КодРодителяРодителя);
	Если НаселенныйПункт.Код > 0 Тогда
		РодительскийЭлемент = НаселенныйПункт;
		КодРодителяРодителя = НаселенныйПункт.Код;
	КонецЕсли;
	
	Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, КодРодителяРодителя);
	Если Улица.Код > 0 Тогда
		РодительскийЭлемент = Улица;
		КодРодителяРодителя = Улица.Код;
	КонецЕсли;
	
	Если РодительскийЭлемент = Неопределено Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса()
	Иначе
		Возврат РодительскийЭлемент;
	КонецЕсли;
										
КонецФункции

// Функция возвращает структуру ограничений по переданным параметрам
// уже заполненным адресным полям
//
// Параметры: 
// Параметры: 
//  НазваниеРегиона - название региона( с сокращением)
//  НазваниеРайона - название района( с сокращением)
//  НазваниеГорода - название города( с сокращением)
//  НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//
Функция ВернутьСтруктуруОграниченийПоРодителю(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, 
											Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы, КодРодителя) Экспорт
	
	СтруктураОграничений = Новый Структура();
	РодительскийЭлемент = ВернутьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(НазваниеРегиона, НазваниеРайона, НазваниеГорода, 
											НазваниеНаселенногоПункта, НазваниеУлицы);
	
	КодРодителя = РодительскийЭлемент.Код;
	
	// по коду определяем уровень элемента
	ТипЭлемента = ПолучитьТипАдресногоЭлемента(КодРодителя);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодРегионаВКоде", Цел(КодРодителя / МаскаРегиона()), ТипЭлемента, 1);
    ДобавитьКодВСтруктуру(СтруктураОграничений, "КодРайонаВКоде", Цел(КодРодителя / МаскаРайона()) % 1000, ТипЭлемента, 2);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодГородаВКоде", Цел(КодРодителя / МаскаГорода()) % 1000, ТипЭлемента, 3);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодНаселенногоПунктаВКоде", Цел(КодРодителя / МаскаНасПункта()) % 1000, ТипЭлемента, 4);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодУлицыВКоде", Цел(КодРодителя / МаскаУлицы())% 10000, ТипЭлемента, 5);
	
	Возврат СтруктураОграничений;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ - СТАНДАРТНЫЕ ОБРАБОТЧИКИ ПРИ РАБОТЕ С АДРЕСНЫМ КЛАССИФИКАТОРОМ

#Если Клиент Тогда
	
	
//Функция по адресу возвращает структуру ограничений	
Функция ПолучитьСтруктуруОграниченийПоАдресу(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, ИмяУлицы, УровеньЭлемента) Экспорт 
	
	Если УровеньЭлемента > 1 Тогда
		
		КодРодителя = Неопределено;
		СтруктураОграничений = ВернутьСтруктуруОграниченийПоРодителю(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, ИмяУлицы, КодРодителя);
			
	Иначе
		СтруктураОграничений = Новый Структура();
	КонецЕсли;
	СтруктураОграничений.Вставить("ТипАдресногоЭлемента", УровеньЭлемента);
	
	Возврат СтруктураОграничений;
	
КонецФункции

// Функция возвращает имя адресноно элемента определенного уровня по коду
Функция ПолучитьИмяАдресногоЭлементаПоКоду(КодЭлемента, ТипАдресногоЭлемента) Экспорт
	
	ИмяАдресногоЭлемента = "";
	// сначала по коду определим уровень элемента, если не совпадет с требуемым, то к БД не обращаемся
	ТипЭлемента = ПолучитьТипАдресногоЭлемента(КодЭлемента);
	Если  ТипЭлемента <> ТипАдресногоЭлемента Тогда
		Возврат ИмяАдресногоЭлемента;
	КонецЕсли;
	
	АдресныйЭлемент = ПолучитьСтруктуруАдресногоЭлемента(КодЭлемента);
	Если АдресныйЭлемент.ТипАдресногоЭлемента = ТипАдресногоЭлемента Тогда
		ИмяАдресногоЭлемента = ПолучитьНазвание(АдресныйЭлемент);
	КонецЕсли;
	
	Возврат ИмяАдресногоЭлемента;
	
КонецФункции

// Процедура по коду адресноно элемента возвращает строковые представления его иерерхии
Процедура ПолучитьПоКодуАдресногоЭлементаЕгоКомпоненты(КодАдресногоЭлемента, Регион, Район, Город, НаселенныйПункт, Улица, Дом) Экспорт
	
	Элемент = ПолучитьСтруктуруАдресногоЭлемента(КодАдресногоЭлемента);
	
	//Если Элемент.ТипАдресногоЭлемента >= 6 Тогда
	//	Дом = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаДома(), 6);
	//КонецЕсли;
	
	Если Элемент.ТипАдресногоЭлемента >= 5 Тогда
		Улица = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаУлицы(), 5);
	КонецЕсли;
	
	Если Элемент.ТипАдресногоЭлемента >= 4 Тогда
		НаселенныйПункт = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаНасПункта(), 4);
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента >= 3 Тогда
		Город = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаГорода(), 3);
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента >= 2 Тогда    
		Район = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаРайона(), 2);
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента >= 1 Тогда
		Регион = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаРегиона(), 1);
	КонецЕсли;	
	
КонецПроцедуры

//  Процедура формирует строковое представление адресных элементов -
// "родителей" переданого в переданных параментрах
//
// Параметры:
//  Элемент - элемент справочника Адресный классфикатор, для которого надо получить родителей.
//  Регион - строка, куда будет помещено строковое представление "родительского" региона.
//  Район - строка, куда будет помещено строковое представление "родительского" района.
//  Город - строка, куда будет помещено строковое представление "родительского" города.
//  НаселенныйПункт - строка, куда будет помещено строковое представление "родительского" населенного пункта.
//
Процедура АдресныйЭлементЗаполнитьРодителей(Регион, Район, Город, НаселенныйПункт, Элемент) Экспорт

	Если (Элемент.ТипАдресногоЭлемента > 4) И Не ЗначениеЗаполнено(НаселенныйПункт) Тогда
		НаселенныйПункт = ПолучитьИмяАдресногоЭлементаПоКоду(Элемент.Код - Элемент.Код%МаскаНасПункта(), 4);
	КонецЕсли;

	Если (Элемент.ТипАдресногоЭлемента > 3) И Не ЗначениеЗаполнено(Город) Тогда
		Город = ПолучитьИмяАдресногоЭлементаПоКоду(Элемент.Код - Элемент.Код%МаскаГорода(), 3);
	КонецЕсли;

	Если (Элемент.ТипАдресногоЭлемента > 2) И Не ЗначениеЗаполнено(Район) Тогда    
		Район = ПолучитьИмяАдресногоЭлементаПоКоду(Элемент.Код - Элемент.Код%МаскаРайона(), 2);
	КонецЕсли;

	Если (Элемент.ТипАдресногоЭлемента > 1) И Не ЗначениеЗаполнено(Регион) Тогда
		Регион = ПолучитьИмяАдресногоЭлементаПоКоду(Элемент.Код - Элемент.Код%МаскаРегиона(), 1);
	КонецЕсли;
		
КонецПроцедуры

//  Процедура проверяет правильность заполнения потомков определенного адресного элемента
//
// Параметры:
//  Элемент - элемент справочника Адресный классфикатор, для которого надо получить родителей.
//  Регион - строка, куда будет помещено строковое представление "родительского" региона.
//  Район - строка, куда будет помещено строковое представление "родительского" района.
//  Город - строка, куда будет помещено строковое представление "родительского" города.
//  НаселенныйПункт - строка, куда будет помещено строковое представление "родительского" населенного пункта.
//
Процедура АдресныйЭлементПроверитьПравильностьЗаполненияПотомков(Регион, Район, Город, НаселенныйПункт, Улица, Элемент) Экспорт
	
	КодЭлемента = Неопределено;
	
	ИмяРегиона = ?(Элемент.ТипАдресногоЭлемента = 1, Элемент.Наименование, Регион);
	ИмяРайона = ?(Элемент.ТипАдресногоЭлемента = 2, Элемент.Наименование, Район);
	ИмяГорода = ?(Элемент.ТипАдресногоЭлемента = 3, Элемент.Наименование, Город);
	ИмяНаселенногоПункта = ?(Элемент.ТипАдресногоЭлемента = 4, Элемент.Наименование, НаселенныйПункт);
	ИмяУлицы = ?(Элемент.ТипАдресногоЭлемента = 5, Элемент.Наименование, Улица);
	
	Если (Элемент.ТипАдресногоЭлемента < 2) И  ЗначениеЗаполнено(ИмяРайона) Тогда
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ИмяРегиона, ИмяРайона, "", "", "", 2);
		СтруктураОграничений.Свойство("КодРайонаВКоде", КодЭлемента);
		Если (КодЭлемента = Неопределено) ИЛИ (КодЭлемента = -1) Тогда
			// очищаем элемент и все что ниже него по ирерархии
			Район = "";	
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если (Элемент.ТипАдресногоЭлемента < 3) И  ЗначениеЗаполнено(ИмяГорода) Тогда
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ИмяРегиона, ИмяРайона, ИмяГорода, "", "", 3);
		СтруктураОграничений.Свойство("КодГородаВКоде", КодЭлемента);
		Если (КодЭлемента = Неопределено) ИЛИ (КодЭлемента = -1)	Тогда
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	Если (Элемент.ТипАдресногоЭлемента < 4) И ЗначениеЗаполнено(ИмяНаселенногоПункта) Тогда
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ИмяРегиона, ИмяРайона, ИмяГорода, ИмяНаселенногоПункта, "", 4);
		СтруктураОграничений.Свойство("КодНаселенногоПунктаВКоде", КодЭлемента);
		Если (КодЭлемента = Неопределено) ИЛИ (КодЭлемента = -1) 	Тогда
			НаселенныйПункт = "";
			Улица = "";
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	Если (Элемент.ТипАдресногоЭлемента < 5) И ЗначениеЗаполнено(ИмяУлицы) Тогда
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ИмяРегиона, ИмяРайона, ИмяГорода, ИмяНаселенногоПункта, ИмяУлицы, 5);
		СтруктураОграничений.Свойство("КодУлицыВКоде", КодЭлемента);
		Если (КодЭлемента = Неопределено) ИЛИ (КодЭлемента = -1)	Тогда
			Улица = "";	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает последние значения тайпинга для адресныхЭлементов
Процедура УстановитьПоследниеЗначенияТайпинговДляАдресныхЭлементов(Регион, Район, Город, НаселенныйПункт, Улица,
							ПоследнееЗначениеРегион, ПоследнееЗначениеРайон, ПоследнееЗначениеГород, ПоследнееЗначениеНаселенныйПункт, ПоследнееЗначениеУлица) Экспорт
							
	ПоследнееЗначениеРегион = Регион;
	ПоследнееЗначениеРайон = Район;
	ПоследнееЗначениеГород = Город;
	ПоследнееЗначениеНаселенныйПункт = НаселенныйПункт;
	ПоследнееЗначениеУлица = Улица;
							
КонецПроцедуры							
	

// Стандартный обработчик "При Изменении" адресного элемента
Процедура АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, 
			ПоследнееЗначениеЭлементаТайпинга) Экспорт
	
	ПоследнееЗначениеЭлементаТайпинга = Элемент.Значение;
	Поле1 = ПолучитьИндекс(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	
КонецПроцедуры

// Стандартный обработчик "Начало выбора из списка" для выпадающего списка сокращений адресного элемента
Процедура АдресныйЭлементПриВыбореИзСпискаСокращений(ЭтаФорма, Элемент, СтандартнаяОбработка, ПолеРедактирования, Уровень) Экспорт
	
	СтандартнаяОбработка = Ложь;
	НазваниеТерриториальнойЕдиницы = СокрЛП(ОбрезатьСокращение(ПолеРедактирования));
	
	// менять сокращение просто так не даем
	Если СокрЛП(ПолеРедактирования) <> НазваниеТерриториальнойЕдиницы Тогда
		Возврат;
	КонецЕсли;
		
	СписокСокращений = ПолучитьСписокСокращений(НазваниеТерриториальнойЕдиницы, Уровень);
	
	Если СписокСокращений <> Неопределено Тогда
		Сокращение = ЭтаФорма.ВыбратьИзСписка(СписокСокращений, Элемент);
		Если Сокращение <> Неопределено Тогда
			ПолеРедактирования = НазваниеТерриториальнойЕдиницы + " " + СокрЛП(Сокращение.Значение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Стандартный обработчик "Обработка выбора" адресного элемента
Процедура АдресныйЭлементОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, АдреснаяЗапись) Экспорт
	
	СтандартнаяОбработка = Ложь;
	АдреснаяЗапись = ПолучитьСтруктуруАдресногоЭлемента(ВыбранноеЗначение.Код);
	Элемент.Значение = СокрЛП(АдреснаяЗапись.Наименование) + " " + СокрЛП(АдреснаяЗапись.Сокращение);
	
КонецПроцедуры

// Процедура автоподбора текста для адресного элемента
Процедура АдресныйЭлементАвтоподборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
												 ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента, СтруктураЭлемента) Экспорт
	
	МассивПоиска = Новый Массив();
    МассивПоиска.Добавить("Наименование");
	
	СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, "", УровеньЭлемента);
		
	СтруктураЭлемента = РаботаСДиалогами.АвтоПодборТекстаВЭлементеУправленияПоРегистру(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СтруктураОграничений, 
												  "АдресныйКлассификатор", МассивПоиска, "Наименование");

			
КонецПроцедуры

// Функция определяет необходимый уровень для детализации имени адресного элемента
Функция ОпределитьУровеньДетализацииДляАдресногоЭлемента(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента)
	
	НачальныйУровеньАдреса = 1;
	
	Если  ЗначениеЗаполнено(ПолеРегиона) И (УровеньЭлемента >= 2) Тогда
		НачальныйУровеньАдреса = 2;	
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(ПолеРайона) И (УровеньЭлемента >= 3) Тогда
		НачальныйУровеньАдреса = 3;	
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(ПолеГорода) И (УровеньЭлемента >= 4) Тогда
		НачальныйУровеньАдреса = 4;	
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(ПолеНаселенногоПункта) И (УровеньЭлемента >= 5) Тогда
		НачальныйУровеньАдреса = 5;	
	КонецЕсли;
	
	Возврат НачальныйУровеньАдреса;		
КонецФункции
											  
// Процедура обработки окончания ввода текста для адресного элемента
Процедура АдресныйЭлементОкончаниеВводаТекстаАдреса(ЭтаФорма, Элемент, Текст, Значение, СтандартнаяОбработка,
													ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента,
													ОбработкаТайпинга, ТекстТайпинга, ПоследнееЗначениеЭлементаТайпинга, СтруктураЭлемента) Экспорт
	
	СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, "", УровеньЭлемента);
	НачальныйУровеньДетализацииАдреса = ОпределитьУровеньДетализацииДляАдресногоЭлемента(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента);
	
	СтруктураЭлемента = Новый Структура();
	
	РаботаСДиалогами.ОкончаниеВводаТекстаВЭлементеУправленияПоАдресномуКлассификатору(Элемент, Текст, Значение, СтандартнаяОбработка, 
		СтруктураОграничений, ЭтаФорма,  
		ОбработкаТайпинга, ТекстТайпинга, ПоследнееЗначениеЭлементаТайпинга, ,
		СтруктураЭлемента, НачальныйУровеньДетализацииАдреса, УровеньЭлемента - 1);
		
КонецПроцедуры
	
// Процедура обработки окончания ввода текста для Города
Процедура АдресныйЭлементОкончаниеВводаТекстаГорода(ЭтаФорма, Элемент, Текст, Значение, СтандартнаяОбработка,
													ОбработкаТайпинга, ТекстТайпинга, 
													ПоследнееЗначениеЭлементаТайпинга, СтруктураЭлемента) Экспорт
	СтруктураЭлемента = Новый Структура();
	
	РаботаСДиалогами.ОкончаниеВводаТекстаВЭлементеУправленияПоГородуУлице(Элемент, Текст, Значение, СтандартнаяОбработка, 
		ЭтаФорма,  
		ОбработкаТайпинга, ТекстТайпинга, ПоследнееЗначениеЭлементаТайпинга, ,
		СтруктураЭлемента, 2, Истина);
		
КонецПроцедуры

// Процедура обработки подбора текста для Города
Функция АвтоПодборТекстаВЭлементеУправленияПоГороду(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт

	РезультатЗапроса = ВернутьРезультатЗапросаПоискаГорода(Текст, 2);
	МассивПолеВыбора = Новый Массив();
	МассивПолеВыбора.Добавить("Наименование");
	СтруктураНайденногоЭлемента = РаботаСДиалогами.ПолучитьАвтоподборПоВыборке(РезультатЗапроса, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, МассивПолеВыбора);
	Возврат СтруктураНайденногоЭлемента;
	
КонецФункции

// Процедура обработки окончания ввода текста для Города
Процедура АдресныйЭлементОкончаниеВводаТекстаУлицы(ЭтаФорма, Элемент, Текст, Значение, СтандартнаяОбработка,
													ПолеГорода, ОбработкаТайпинга, ТекстТайпинга, 
													ПоследнееЗначениеЭлементаТайпинга, СтруктураЭлемента) Экспорт
	СтруктураЭлемента = Новый Структура();
	
	РаботаСДиалогами.ОкончаниеВводаТекстаВЭлементеУправленияПоГородуУлице(Элемент, Текст, Значение, СтандартнаяОбработка, 
		ЭтаФорма,  
		ОбработкаТайпинга, ТекстТайпинга, ПоследнееЗначениеЭлементаТайпинга, ,
		СтруктураЭлемента, 6, Ложь, ПолеГорода);
		
КонецПроцедуры
	
// Процедура обработки подбора текста для Улице
Функция АвтоПодборТекстаВЭлементеУправленияПоУлице(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолеГорода) Экспорт

	РезультатЗапроса = ВернутьРезультатЗапросаПоискаУлицыГорода(ПолеГорода, Текст, 2);
	МассивПолеВыбора = Новый Массив();
	МассивПолеВыбора.Добавить("Наименование");
	СтруктураНайденногоЭлемента = РаботаСДиалогами.ПолучитьАвтоподборПоВыборке(РезультатЗапроса, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, МассивПолеВыбора);
	Возврат СтруктураНайденногоЭлемента;
	
КонецФункции

											  
// Процедура модального редактирования адреса
Процедура РедактироватьМодальноЭлементАдреса(Элемент, ЭтаФорма = Неопределено, КлючФормы = Неопределено) Экспорт
	
	ОбработкаРедактированияАдреса = Обработки.РедактированиеКонтактнойИнформации.Создать();
	ОбработкаРедактированияАдреса.мВозвратСтруктуры = Истина;	
	ОбработкаРедактированияАдреса.РедактироватьМодальноЭлементАдресаРазделенногоЗапятыми(Элемент, ЭтаФорма, КлючФормы);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПОДБОРА ГОРОДА И УЛИЦЫ
// 
// Отдельная отработка подбора для городов-субъектов РФ Москвы и С.-Петербурга


// функция возвращает результат запроса для поиска города
Функция ВернутьРезультатЗапросаПоискаГорода(ИмяГорода, КоличествоСтрокВыборки) Экспорт
	
	ОграничениеПоИмени = РаботаСДиалогами.СформироватьОграничениеПоПолюВхождениеВНачало("АдресныйКлассификатор.Наименование", Тип("Строка"));
	
	НачалоЗапроса = "ВЫБРАТЬ ПЕРВЫЕ " + Строка(КоличествоСтрокВыборки) + " 
	              |	АдресныйКлассификатор.Код,
	              |	АдресныйКлассификатор.КодРегионаВКоде,
	              |	АдресныйКлассификатор.Наименование,
	              |	АдресныйКлассификатор.Сокращение,
	              |	АдресныйКлассификатор.Индекс,
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	              |	АдресныйКлассификатор.КодРайонаВКоде,
	              |	АдресныйКлассификатор.КодГородаВКоде,
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
	              |	АдресныйКлассификатор.КодУлицыВКоде
	              |ИЗ
	              |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	              |
	              |ГДЕ
				  | " + ОграничениеПоИмени + "
				  |	И "; 
				  
	ТекстЗапроса = НачалоЗапроса + " (АдресныйКлассификатор.ТипАдресногоЭлемента = 3 ) 
					| Объединить ВСЕ 
					| 
					|" + НачалоЗапроса + "  			  
	 			  	|	  (АдресныйКлассификатор.ТипАдресногоЭлемента = 1) 
				  	| 	И (АдресныйКлассификатор.КодРегионаВКоде В (5)) 
				  	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекстАвтоПодбора", ИмяГорода + "%");
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Возврат РезультатЗапроса;
	
КонецФункции

// Функция возвращает структуру ограничений улицы по городу
Функция СформироватьСтруктуруОграниченийУлицыПоГороду(ИмяГорода) Экспорт
	
	ОбрезанноеИмяГорода = ВРег(ОбрезатьСокращение(ИмяГорода));
	
	Если ОбрезанноеИмяГорода = "МИНСК" ИЛИ ОбрезанноеИмяГорода = "Минск" Тогда
		//это вот и есть исключение
		СтруктураОграничений = Новый Структура();
		
		КодРегионаВКоде = 5;
		СтруктураОграничений.Вставить("КодРегионаВКоде", КодРегионаВКоде);
		СтруктураОграничений.Вставить("КодНаселенногоПунктаВКоде", 0);
		СтруктураОграничений.Вставить("ТипАдресногоЭлемента", 5);
		
	Иначе
		// ищем только для города
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу("", "", ОбрезанноеИмяГорода, "", "", 5);
		СтруктураОграничений.Вставить("КодНаселенногоПунктаВКоде", 0);
		
	КонецЕсли;

	Возврат СтруктураОграничений;
	
КонецФункции

// функция возвращает результат запроса для поиска улицы города
Функция ВернутьРезультатЗапросаПоискаУлицыГорода(ИмяГорода, ИмяУлицы, КоличествоСтрокВыборки) Экспорт
	
	МассивИменПоиска = Новый Массив();
	МассивИменПоиска.Добавить("Наименование");
	
	СтруктураОграничений = СформироватьСтруктуруОграниченийУлицыПоГороду(ИмяГорода);
	РезультатПодбора = РаботаСДиалогами.ПолучитьРезультатЗапросаАвтоподбораДляРегистра(ИмяУлицы, СтруктураОграничений, "АдресныйКлассификатор", МассивИменПоиска, КоличествоСтрокВыборки);
	
	Возврат РезультатПодбора;

КонецФункции

#КонецЕсли
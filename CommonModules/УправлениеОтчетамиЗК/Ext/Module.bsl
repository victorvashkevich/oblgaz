
// Процедура заменяет шаблон запроса к регламентированному календарю на автосгенерированный запрос.
//
Процедура ЗаменитьВСКДТекстЗапросКалендаря(СКД, НачалоПериода, КонецПериода, СоответствиеНаборовДанныхИЗапросов) Экспорт
	
	СоответствиеНаборовДанныхИЗапросов =  Новый Соответствие;
	
	ТекстЗапПоКалендарю = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК ПериодРегистрации
	|ПОМЕСТИТЬ Периоды
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоПериода И &КонецПериода";
					   
	ДтНачМесяца = НачалоМесяца(НачалоПериода);
	
	ТекстЗапросаЗамены = "ВЫБРАТЬ
	|	ДАТАВРЕМЯ("+Формат(ДтНачМесяца, "ДФ=yyyy")+", "+Месяц(ДтНачМесяца)+", "+День(ДтНачМесяца)+") КАК ПериодРегистрации
	|ПОМЕСТИТЬ Периоды";
	ДтНачМесяца = ДобавитьМесяц(ДтНачМесяца, 1);
	
	Пока ДтНачМесяца <= КонецПериода Цикл
		ТекстЗапросаЗамены =  ТекстЗапросаЗамены + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ("+Формат(ДтНачМесяца, "ДФ=yyyy")+", "+Месяц(ДтНачМесяца)+", "+День(ДтНачМесяца)+") КАК ПериодРегистрации
		|";
		ДтНачМесяца = ДобавитьМесяц(ДтНачМесяца, 1);
	КонецЦикла;
	
	ЗаменитьЗапросККалендарю(СКД.НаборыДанных, ТекстЗапПоКалендарю, ТекстЗапросаЗамены, СоответствиеНаборовДанныхИЗапросов);
	
КонецПроцедуры

Процедура ЗаменитьЗапросККалендарю(НаборыДанных, ТекстЗапросККалендарю, ТекстЗапросЗамены, СоответствиеНаборовДанныхИЗапросов)
	
	Для каждого НаборДанных из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") тогда
			СоответствиеНаборовДанныхИЗапросов.Вставить(НаборДанных.Имя, НаборДанных.Запрос);
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос, ТекстЗапросККалендарю, ТекстЗапросЗамены);
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") тогда
			ЗаменитьЗапросККалендарю(НаборДанных.Элементы, ТекстЗапросККалендарю, ТекстЗапросЗамены, СоответствиеНаборовДанныхИЗапросов)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаменитьОбращениеКРегиструСведенийКалендарь(ТекстЗапроса,  НачалоПериода, КонецПериода) Экспорт
	
	ДтНачМесяца = НачалоМесяца(НачалоПериода);
	
	ТекстЗапросаЗамены = "ВЫБРАТЬ
	|	ДАТАВРЕМЯ("+Формат(ДтНачМесяца, "ДФ=yyyy")+", "+Месяц(ДтНачМесяца)+", "+День(ДтНачМесяца)+") КАК ДатаКалендаря";
	ДтНачМесяца = ДтНачМесяца + 86400;
	
	Пока ДтНачМесяца <= КонецПериода Цикл
		ТекстЗапросаЗамены =  ТекстЗапросаЗамены + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ("+Формат(ДтНачМесяца, "ДФ=yyyy")+", "+Месяц(ДтНачМесяца)+", "+День(ДтНачМесяца)+") КАК ДатаКалендаря
		|";
		ДтНачМесяца = ДтНачМесяца + 86400;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.РегламентированныйПроизводственныйКалендарь", "("+ТекстЗапросаЗамены+")");
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ПодставитьРасчетПолей(ТекстЗапроса, ТаблицаВычисленияРаботника, ТаблицаДанныхОРаботниках, ИмяПоляПодразделения = Неопределено, ИмяПоляДолжность = Неопределено, ИмяПоляОрганизация = Неопределено) Экспорт
	
	ПолеПодразделние = "ВЫБОР
	|КОГДА РаботникиПредприятия.ДатаПоследнегоДвижения ЕСТЬ НЕ NULL 
	|		И РаботникиПредприятия.Состояние <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	ТОГДА ВЫБОР
	|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= РаботникиПредприятия.Дата
	|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
	|			ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
	|		КОНЕЦ
	|КОГДА РаботникиПредприятия.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		И НАЧАЛОПЕРИОДА(РаботникиПредприятия.ДатаПоследнегоДвижения, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РаботникиПредприятия.Дата, МЕСЯЦ)
	|	ТОГДА ВЫБОР
	|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= РаботникиПредприятия.Дата
	|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
	|			ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
	|		КОНЕЦ
	|КОГДА РаботникиПредприятия.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		И НАЧАЛОПЕРИОДА(РаботникиПредприятия.ДатаПоследнегоДвижения, ДЕНЬ) < НАЧАЛОПЕРИОДА(РаботникиПредприятия.Дата, МЕСЯЦ)
	|	ТОГДА ВЫБОР
	|			КОГДА РаботникиПредприятия.Договор ЕСТЬ НЕ NULL 
	|				ТОГДА РаботникиПредприятия.Договор.ПодразделениеОрганизации
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РаботникиОрганизаций.ПериодЗавершения <= РаботникиПредприятия.Дата
	|							И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
	|					ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
	|				КОНЕЦ
	|		КОНЕЦ
	|КОГДА РаботникиПредприятия.Договор ЕСТЬ НЕ NULL 
	|		И РаботникиПредприятия.Состояние ЕСТЬ NULL 
	|	ТОГДА РаботникиПредприятия.Договор.ПодразделениеОрганизации
	|КОНЕЦ";
	
	ПолеДолжность = "ВЫБОР
	|КОГДА РаботникиОрганизаций.ПериодЗавершения <= РаботникиПредприятия.Дата
	|		И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	ТОГДА РаботникиОрганизаций.ДолжностьЗавершения
	|ИНАЧЕ РаботникиОрганизаций.Должность
	|КОНЕЦ";
	
	ПолеОрганизация = "ВЫБОР
	|КОГДА РаботникиПредприятия.ДатаПоследнегоДвижения ЕСТЬ НЕ NULL 
	|		И РаботникиПредприятия.Состояние <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	ТОГДА ВЫБОР
	|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= РаботникиПредприятия.Дата
	|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизаций.ОбособленноеПодразделение
	|		КОНЕЦ
	|КОГДА РаботникиПредприятия.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		И НАЧАЛОПЕРИОДА(РаботникиПредприятия.ДатаПоследнегоДвижения, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РаботникиПредприятия.Дата, МЕСЯЦ)
	|	ТОГДА ВЫБОР
	|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= РаботникиПредприятия.Дата
	|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизаций.ОбособленноеПодразделение
	|		КОНЕЦ
	|КОГДА РаботникиПредприятия.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		И НАЧАЛОПЕРИОДА(РаботникиПредприятия.ДатаПоследнегоДвижения, ДЕНЬ) < НАЧАЛОПЕРИОДА(РаботникиПредприятия.Дата, МЕСЯЦ)
	|	ТОГДА ВЫБОР
	|			КОГДА РаботникиПредприятия.Договор ЕСТЬ НЕ NULL 
	|				ТОГДА РаботникиПредприятия.Договор.организация
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РаботникиОрганизаций.ПериодЗавершения <= РаботникиПредприятия.Дата
	|							И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения
	|					ИНАЧЕ РаботникиОрганизаций.ОбособленноеПодразделение
	|				КОНЕЦ
	|		КОНЕЦ
	|КОГДА РаботникиПредприятия.Договор ЕСТЬ НЕ NULL 
	|		И РаботникиПредприятия.Состояние ЕСТЬ NULL 
	|	ТОГДА РаботникиПредприятия.Договор.Организация
	|КОНЕЦ";
	
	ПолеПодразделние = СтрЗаменить(ПолеПодразделние, "РаботникиПредприятия", ТаблицаВычисленияРаботника);
	ПолеДолжность   = СтрЗаменить(ПолеДолжность, "РаботникиПредприятия", ТаблицаВычисленияРаботника);
	ПолеОрганизация = СтрЗаменить(ПолеОрганизация, "РаботникиПредприятия", ТаблицаВычисленияРаботника);
	
	ПолеПодразделние = СтрЗаменить(ПолеПодразделние, "РаботникиОрганизаций", ТаблицаДанныхОРаботниках);
	ПолеДолжность   = СтрЗаменить(ПолеДолжность, "РаботникиОрганизаций", ТаблицаДанныхОРаботниках);
	ПолеОрганизация = СтрЗаменить(ПолеОрганизация, "РаботникиОрганизаций", ТаблицаДанныхОРаботниках);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """УправлениеОтчетаВезде.ПодставитьРасчетПолей.Подразделение""", ПолеПодразделние);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """УправлениеОтчетаВезде.ПодставитьРасчетПолей.Должность""", ПолеДолжность);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """УправлениеОтчетаВезде.ПодставитьРасчетПолей.Организация""", ПолеОрганизация);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """УправлениеОтчетаВезде.ПодставитьРасчетПолей.Подразделение.*""", "("+ПолеПодразделние+").*");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """УправлениеОтчетаВезде.ПодставитьРасчетПолей.Должность.*""", "("+ПолеДолжность+").*");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """УправлениеОтчетаВезде.ПодставитьРасчетПолей.Организация.*""", "("+ПолеОрганизация+").*");
	
	
	//подстановка выбора реквизитов
	Если ИмяПоляПодразделения = Неопределено И ИмяПоляДолжность = Неопределено И ИмяПоляОрганизация = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ИсправляемыйТекстЗапроса = ТекстЗапроса;
	
	НомерПозиции = Найти(ТекстЗапроса, "{ВЫБРАТЬ");
	
	Пока НомерПозиции > 0 Цикл
		ИсправляемыйТекстЗапроса = Прав(ИсправляемыйТекстЗапроса, СтрДлина(ИсправляемыйТекстЗапроса) - НомерПозиции + 1); 
		ТекстЗамены = ИсправляемыйТекстЗапроса;
		КонецВыбора = Найти(ТекстЗамены, "}");
		Если КонецВыбора = 0 тогда
			Прервать;
		КонецЕсли;
		ТекстЗамены = Лев(ТекстЗамены, КонецВыбора + 1);
		КопияТекста = ТекстЗамены;
		Если ИмяПоляПодразделения <> Неопределено тогда
			ТекстЗамены = СтрЗаменить(ТекстЗамены, ИмяПоляПодразделения+",", ИмяПоляПодразделения+".*,");
		КонецЕсли;
		
		Если ИмяПоляДолжность <> Неопределено тогда
			ТекстЗамены = СтрЗаменить(ТекстЗамены, ИмяПоляДолжность+",", ИмяПоляДолжность+".*,");
		КонецЕсли;
		
		Если ИмяПоляОрганизация <> Неопределено тогда
			ТекстЗамены = СтрЗаменить(ТекстЗамены, ИмяПоляОрганизация+",", ИмяПоляОрганизация+".*,");
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, КопияТекста, ТекстЗамены);
		
		ИсправляемыйТекстЗапроса = Прав(ИсправляемыйТекстЗапроса, СтрДлина(ИсправляемыйТекстЗапроса) - 9);
		НомерПозиции = Найти(Прав(ИсправляемыйТекстЗапроса, СтрДлина(ИсправляемыйТекстЗапроса) - 9), "{ВЫБРАТЬ");
	КонецЦикла;
	
КонецПроцедуры

// Функция формирует представление периода по дате начала и дате окончания.
//
// Параметры
//  ДатаНачала	   – Дата – дата начала периода.
//  ДатаОкончания  – Дата – дата окончания периода.
//  МесяцКратко  - когда Истина, месяц выводится первыми тремя символами
//  СДатами	   – Булево – признак того, что описание периода будет сформирован 
//					 без указания чисел месяца.
//  ГодКратко - когда Истина, год выводится 2-мя знаками
//
// Возвращаемое значение:
//   Строка   – строковое представление периода.
//
Функция ОписаниеПериода(ДатаНачала, ДатаОкончания, МесяцКратко = Истина, СДатами = Истина, ГодКратко = Истина) Экспорт
	
	ЧислоНачала		= День(ДатаНачала);
	ЧислоОкончания	= День(ДатаОкончания);
	
	ФорматГода = ?(ГодКратко, "ДФ = 'гг'", "ДФ = 'гггг'");
	
	Если МесяцКратко Тогда
		ОписаниеМесяцаГода = Лев(Формат(ДатаНачала,   "ДФ = 'MMMM'"),3) + " " + Формат(ДатаНачала,    ФорматГода);
		ОписаниеМесяца2    = Лев(Формат(ДатаОкончания,"ДФ = 'MMMM'"),3) + " " + Формат(ДатаОкончания, ФорматГода);
	Иначе
		Месяц	= Формат(ДатаНачала, "ДФ=MMMM");
		УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 4, , Месяц);
		ОписаниеМесяцаГода = Месяц + " " + Формат(ДатаНачала,    ФорматГода);
		Месяц	= Формат(ДатаОкончания, "ДФ=MMMM");
		УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 4, , Месяц);
		ОписаниеМесяца2    = Месяц + " " + Формат(ДатаОкончания, ФорматГода);
	КонецЕсли;
	
	Если Месяц(ДатаНачала) <> Месяц(ДатаОкончания) Тогда  
		
		Если (ДатаНачала = НачалоМесяца(ДатаНачала)) Или Не СДатами Тогда
			Месяц	= Формат(ДатаНачала, "ДФ=MMMM");
			УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 1, , Месяц);
			Перваяполовинадат = Месяц + " " + Формат(ДатаНачала,    ФорматГода);
		Иначе
			Перваяполовинадат = "" + ЧислоНачала + " " + ОписаниеМесяцаГода; 
		КонецЕсли;
		
		Если (ДатаОкончания = КонецМесяца(ДатаОкончания)) Или Не СДатами Тогда
			Месяц	= Формат(ДатаОкончания, "ДФ=MMMM");
			УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 1, , Месяц);
			ВтораяПоловинаДат = Месяц + " " + Формат(ДатаОкончания,    ФорматГода);
		Иначе
			ВтораяПоловинаДат = "" + ЧислоОкончания + " " + ОписаниеМесяца2;
		КонецЕсли;
		
		Возврат Перваяполовинадат + "-" + ВтораяПоловинаДат;
		
	Иначе
		
		Если ДатаНачала = НачалоМесяца(ДатаНачала) И ДатаОкончания + 86399 = КонецМесяца(ДатаОкончания) Или Не СДатами Тогда
			Месяц	= Формат(ДатаНачала, "ДФ=MMMM");
			УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 1, , Месяц);
			Возврат Месяц + " " + Формат(ДатаНачала,    ФорматГода);
		ИначеЕсли ЧислоНачала = ЧислоОкончания Тогда
			Возврат "" + ЧислоНачала + " " + ОписаниеМесяцаГода;
		Иначе
			Возврат "" + ЧислоНачала + "-" + ЧислоОкончания + " " + ОписаниеМесяцаГода;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции	// ОписаниеПериода 

//////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫЧИСЛЕНИЯ ПОЛУЧЕНИЯ ДАННЫХ ПО СОТРУДНИКУ

Процедура ПолучитьТаблицуРаботников(Запрос = Неопределено, ТекстЗапроса = Неопределено, НазваниеТаблицы = Неопределено, УдалятьПредыдущийЗапрос = ложь) Экспорт
	
	ТЗ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	     |	ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо,
	     |	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник,
	     |	ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение КАК Организация,
	     |	ОсновныеНачисленияРаботниковОрганизаций.Организация КАК ГоловнаяОрганизация,
	     |	НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
	     |	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяССылка) КАК ПодразделениеОрганизации,
	     |	ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяССылка) КАК Должность
	     |ПОМЕСТИТЬ НеСотрудники
	     |ИЗ
	     |	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	     |		ПО ОсновныеНачисленияРаботниковОрганизаций.Сотрудник = РаботникиОрганизаций.Сотрудник
	     |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	     |		ПО ОсновныеНачисленияРаботниковОрганизаций.Сотрудник = ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник
	     |			И (ДоговорНаВыполнениеРаботСФизЛицом.Проведен)
	     |ГДЕ
	     |	РаботникиОрганизаций.Сотрудник ЕСТЬ NULL 
	     |	И ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник ЕСТЬ NULL 
	     |	И ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
	     |
	     |ОБЪЕДИНИТЬ
	     |
	     |ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	ДополнительныеНачисленияРаботниковОрганизаций.ФизЛицо,
	     |	ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник,
	     |	ДополнительныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение,
	     |	ДополнительныеНачисленияРаботниковОрганизаций.Организация,
	     |	НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации, МЕСЯЦ),
	     |	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяССылка),
	     |	ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяССылка)
	     |ИЗ
	     |	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	     |		ПО ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник = РаботникиОрганизаций.Сотрудник
	     |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	     |		ПО ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник = ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник
	     |			И (ДоговорНаВыполнениеРаботСФизЛицом.Проведен)
	     |ГДЕ
	     |	РаботникиОрганизаций.Сотрудник ЕСТЬ NULL 
	     |	И ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник ЕСТЬ NULL 
	     |	И ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	     |	ОсновныеРаботники.ФизЛицо,
	     |	ОсновныеРаботники.ГоловнаяОрганизация,
	     |	ОсновныеРаботники.Период КАК ДатаПоследнегоДвижения,
	     |	ОсновныеРаботники.Дата,
	     |	ОсновныеРаботники.Сотрудник,
	     |	ОсновныеРаботники.Состояние
	     |ПОМЕСТИТЬ ОсновныеРаботники
	     |ИЗ
	     |	(ВЫБРАТЬ
	     |		ДатыПоследнихДвижений.ФизЛицо КАК ФизЛицо,
	     |		ДатыПоследнихДвижений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	     |		ДатыПоследнихДвижений.Период КАК Период,
	     |		ДатыПоследнихДвижений.Дата КАК Дата,
	     |		МАКСИМУМ(РаботникиОрганизаций.Сотрудник) КАК Сотрудник,
	     |		МАКСИМУМ(ВЫБОР
	     |				КОГДА РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	     |						И РаботникиОрганизаций.ПериодЗавершения <= ДатыПоследнихДвижений.Дата
	     |					ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
	     |				ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
	     |			КОНЕЦ) КАК Состояние
	     |	ИЗ
	     |		(ВЫБРАТЬ
	     |			ТаблицаДвижений.ДАТА КАК Дата,
	     |			ТаблицаДвижений.Физлицо КАК ФизЛицо,
	     |			ТаблицаДвижений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	     |			МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	     |		ИЗ
	     |			ТаблицаДвижений КАК ТаблицаДвижений
	     |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	     |				ПО ТаблицаДвижений.ДАТА >= РаботникиОрганизаций.Период
	     |					И ТаблицаДвижений.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо
	     |					И ТаблицаДвижений.ГоловнаяОрганизация = РаботникиОрганизаций.Организация
	     |		ГДЕ
	     |			(РаботникиОрганизаций.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	     |					ИЛИ РаботникиОрганизаций.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство))
	     |		
	     |		СГРУППИРОВАТЬ ПО
	     |			ТаблицаДвижений.ДАТА,
	     |			ТаблицаДвижений.Физлицо,
	     |			ТаблицаДвижений.ГоловнаяОрганизация) КАК ДатыПоследнихДвижений
	     |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	     |			ПО ДатыПоследнихДвижений.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
	     |				И ДатыПоследнихДвижений.ГоловнаяОрганизация = РаботникиОрганизаций.Организация
	     |				И (РаботникиОрганизаций.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	     |					ИЛИ РаботникиОрганизаций.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство))
	     |				И ДатыПоследнихДвижений.Период = РаботникиОрганизаций.Период
	     |	
	     |	СГРУППИРОВАТЬ ПО
	     |		ДатыПоследнихДвижений.ФизЛицо,
	     |		ДатыПоследнихДвижений.Период,
	     |		ДатыПоследнихДвижений.ГоловнаяОрганизация,
	     |		ДатыПоследнихДвижений.Дата) КАК ОсновныеРаботники
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	     |	Договорники.ФизЛицо,
	     |	Договорники.ГоловнаяОрганизация,
	     |	Договорники.Дата,
	     |	Договорники.ДатаНачала,
	     |	Договорники.Договор,
	     |	Договорники.Договор.Сотрудник КАК Сотрудник
	     |ПОМЕСТИТЬ Договорники
	     |ИЗ
	     |	(ВЫБРАТЬ
	     |		ДатыПоследнихДвижений.ФизЛицо КАК ФизЛицо,
	     |		ДатыПоследнихДвижений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	     |		ДатыПоследнихДвижений.Дата КАК Дата,
	     |		ДатыПоследнихДвижений.ДатаНачала КАК ДатаНачала,
	     |		МАКСИМУМ(ДоговорНаВыполнениеРаботСФизЛицом.Ссылка) КАК Договор
	     |	ИЗ
	     |		(ВЫБРАТЬ
	     |			ТаблицаДвижений.ДАТА КАК Дата,
	     |			ТаблицаДвижений.Физлицо КАК ФизЛицо,
	     |			ТаблицаДвижений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	     |			МАКСИМУМ(ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала) КАК ДатаНачала
	     |		ИЗ
	     |			ТаблицаДвижений КАК ТаблицаДвижений
	     |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	     |				ПО ТаблицаДвижений.ДАТА >= ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
	     |					И ТаблицаДвижений.Физлицо = ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо
	     |					И (ТаблицаДвижений.ГоловнаяОрганизация = ВЫБОР
	     |						КОГДА ДоговорНаВыполнениеРаботСФизЛицом.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	     |							ТОГДА ДоговорНаВыполнениеРаботСФизЛицом.Организация
	     |						ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.Организация.ГоловнаяОрганизация
	     |					КОНЕЦ)
	     |					И (ДоговорНаВыполнениеРаботСФизЛицом.Проведен)
	     |		
	     |		СГРУППИРОВАТЬ ПО
	     |			ТаблицаДвижений.ДАТА,
	     |			ТаблицаДвижений.Физлицо,
	     |			ТаблицаДвижений.ГоловнаяОрганизация) КАК ДатыПоследнихДвижений
	     |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	     |			ПО ДатыПоследнихДвижений.ФизЛицо = ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо
	     |				И (ДатыПоследнихДвижений.ГоловнаяОрганизация = ВЫБОР
	     |					КОГДА ДоговорНаВыполнениеРаботСФизЛицом.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	     |						ТОГДА ДоговорНаВыполнениеРаботСФизЛицом.Организация
	     |					ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.Организация.ГоловнаяОрганизация
	     |				КОНЕЦ)
	     |				И ДатыПоследнихДвижений.ДатаНачала = ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
	     |	
	     |	СГРУППИРОВАТЬ ПО
	     |		ДатыПоследнихДвижений.ФизЛицо,
	     |		ДатыПоследнихДвижений.ГоловнаяОрганизация,
	     |		ДатыПоследнихДвижений.Дата,
	     |		ДатыПоследнихДвижений.ДатаНачала) КАК Договорники
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	     |	ТаблицаДвижений.ДАТА,
	     |	ТаблицаДвижений.Физлицо,
	     |	ТаблицаДвижений.ГоловнаяОрганизация,
	     |	ВЫБОР
	     |		КОГДА НеСотрудники.Сотрудник ЕСТЬ НЕ NULL 
	     |				И ОсновныеРаботники.Сотрудник ЕСТЬ NULL 
	     |				И Договорники.Сотрудник ЕСТЬ NULL 
	     |			ТОГДА НеСотрудники.Сотрудник
	     |		КОГДА ОсновныеРаботники.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	     |				ИЛИ ОсновныеРаботники.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение)
	     |			ТОГДА ОсновныеРаботники.Сотрудник
	     |		КОГДА ОсновныеРаботники.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	     |				И ОсновныеРаботники.ДатаПоследнегоДвижения >= НАЧАЛОПЕРИОДА(ОсновныеРаботники.Дата, МЕСЯЦ)
	     |				И ОсновныеРаботники.ДатаПоследнегоДвижения <= ОсновныеРаботники.Дата
	     |			ТОГДА ОсновныеРаботники.Сотрудник
	     |		КОГДА ОсновныеРаботники.Состояние ЕСТЬ NULL 
	     |			ТОГДА Договорники.Сотрудник
	     |		КОГДА ОсновныеРаботники.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	     |				И ОсновныеРаботники.ДатаПоследнегоДвижения <= НАЧАЛОПЕРИОДА(ТаблицаДвижений.ДАТА, МЕСЯЦ)
	     |			ТОГДА ВЫБОР
	     |					КОГДА Договорники.Сотрудник ЕСТЬ NULL 
	     |						ТОГДА ОсновныеРаботники.Сотрудник
	     |					КОГДА Договорники.Сотрудник ЕСТЬ НЕ NULL 
	     |						ТОГДА ВЫБОР
	     |								КОГДА Договорники.Договор.ДатаНачала <= ТаблицаДвижений.ДАТА
	     |										И ТаблицаДвижений.ДАТА <= Договорники.Договор.ДатаОкончания
	     |									ТОГДА Договорники.Сотрудник
	     |								КОГДА ТаблицаДвижений.ДАТА >= Договорники.Договор.ДатаОкончания
	     |										И ОсновныеРаботники.ДатаПоследнегоДвижения >= Договорники.Договор.ДатаОкончания
	     |									ТОГДА ОсновныеРаботники.Сотрудник
	     |								КОГДА ТаблицаДвижений.ДАТА >= Договорники.Договор.ДатаОкончания
	     |										И ОсновныеРаботники.ДатаПоследнегоДвижения <= Договорники.Договор.ДатаОкончания
	     |									ТОГДА Договорники.Сотрудник
	     |								ИНАЧЕ NULL
	     |							КОНЕЦ
	     |				КОНЕЦ
	     |		ИНАЧЕ ВЫБОР
	     |				КОГДА НеСотрудники.Сотрудник ЕСТЬ НЕ NULL 
	     |					ТОГДА НеСотрудники.Сотрудник
	     |				ИНАЧЕ NULL
	     |			КОНЕЦ
	     |	КОНЕЦ КАК Сотрудник,
	     |	Договорники.Договор,
	     |	ОсновныеРаботники.ДатаПоследнегоДвижения,
	     |	ОсновныеРаботники.Состояние
	     |ПОМЕСТИТЬ РаботникиПредприятия
	     |ИЗ
	     |	ТаблицаДвижений КАК ТаблицаДвижений
	     |		ЛЕВОЕ СОЕДИНЕНИЕ ОсновныеРаботники КАК ОсновныеРаботники
	     |		ПО ТаблицаДвижений.ДАТА = ОсновныеРаботники.Дата
	     |			И ТаблицаДвижений.Физлицо = ОсновныеРаботники.ФизЛицо
	     |			И ТаблицаДвижений.ГоловнаяОрганизация = ОсновныеРаботники.ГоловнаяОрганизация
	     |		ЛЕВОЕ СОЕДИНЕНИЕ Договорники КАК Договорники
	     |		ПО ТаблицаДвижений.ДАТА = Договорники.Дата
	     |			И ТаблицаДвижений.Физлицо = Договорники.ФизЛицо
	     |			И ТаблицаДвижений.ГоловнаяОрганизация = Договорники.ГоловнаяОрганизация
	     |		ЛЕВОЕ СОЕДИНЕНИЕ НеСотрудники КАК НеСотрудники
	     |		ПО ТаблицаДвижений.Физлицо = НеСотрудники.ФизЛицо
	     |			И ТаблицаДвижений.ГоловнаяОрганизация = НеСотрудники.ГоловнаяОрганизация
	     |ГДЕ
	     |	ВЫБОР
	     |			КОГДА НеСотрудники.Сотрудник ЕСТЬ НЕ NULL 
	     |					И ОсновныеРаботники.Сотрудник ЕСТЬ NULL 
	     |					И Договорники.Сотрудник ЕСТЬ NULL 
	     |				ТОГДА НеСотрудники.Сотрудник
	     |			КОГДА ОсновныеРаботники.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	     |					ИЛИ ОсновныеРаботники.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение)
	     |				ТОГДА ОсновныеРаботники.Сотрудник
	     |			КОГДА ОсновныеРаботники.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	     |					И ОсновныеРаботники.ДатаПоследнегоДвижения >= НАЧАЛОПЕРИОДА(ОсновныеРаботники.Дата, МЕСЯЦ)
	     |					И ОсновныеРаботники.ДатаПоследнегоДвижения <= ОсновныеРаботники.Дата
	     |				ТОГДА ОсновныеРаботники.Сотрудник
	     |			КОГДА ОсновныеРаботники.Состояние ЕСТЬ NULL 
	     |				ТОГДА Договорники.Сотрудник
	     |			КОГДА ОсновныеРаботники.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	     |					И ОсновныеРаботники.ДатаПоследнегоДвижения <= НАЧАЛОПЕРИОДА(ТаблицаДвижений.ДАТА, МЕСЯЦ)
	     |				ТОГДА ВЫБОР
	     |						КОГДА Договорники.Сотрудник ЕСТЬ NULL 
	     |							ТОГДА ОсновныеРаботники.Сотрудник
	     |						КОГДА Договорники.Сотрудник ЕСТЬ НЕ NULL 
	     |							ТОГДА ВЫБОР
	     |									КОГДА Договорники.Договор.ДатаНачала <= ТаблицаДвижений.ДАТА
	     |											И ТаблицаДвижений.ДАТА <= Договорники.Договор.ДатаОкончания
	     |										ТОГДА Договорники.Сотрудник
	     |									КОГДА ТаблицаДвижений.ДАТА >= Договорники.Договор.ДатаОкончания
	     |											И ОсновныеРаботники.ДатаПоследнегоДвижения >= Договорники.Договор.ДатаОкончания
	     |										ТОГДА ОсновныеРаботники.Сотрудник
	     |									КОГДА ТаблицаДвижений.ДАТА >= Договорники.Договор.ДатаОкончания
	     |											И ОсновныеРаботники.ДатаПоследнегоДвижения <= Договорники.Договор.ДатаОкончания
	     |										ТОГДА Договорники.Сотрудник
	     |									ИНАЧЕ NULL
	     |								КОНЕЦ
	     |					КОНЕЦ
	     |			ИНАЧЕ ВЫБОР
	     |					КОГДА НеСотрудники.Сотрудник ЕСТЬ НЕ NULL 
	     |						ТОГДА НеСотрудники.Сотрудник
	     |					ИНАЧЕ NULL
	     |				КОНЕЦ
	     |		КОНЕЦ ЕСТЬ НЕ NULL ";
		 
		 
		
	Если НазваниеТаблицы <> Неопределено тогда
		ТЗ = СтрЗаменить(ТЗ, "ТаблицаДвижений КАК", НазваниеТаблицы+" КАК");
	КонецЕсли;
	Если Запрос <> Неопределено тогда
		ТекстЗапроса = Запрос.Текст;
		Запрос.Текст = ТЗ;
		Запрос.Выполнить();
		Запрос.Текст = ТекстЗапроса;
	ИначеЕсли ТекстЗапроса <> Неопределено тогда
		Если УдалятьПредыдущийЗапрос тогда
			ПозицияНачала = Найти(ТекстЗапроса, "//ТАБЛИЦАРАБОТНИКОВ");
			ПозицияНачала = ПозицияНачала + 20;
			ПозицияКонца  = Найти(ТекстЗапроса, "//КОНЕЦ ТАБЛИЦАРАБОТНИКОВ");
			ПозицияКонца  = ПозицияКонца  + 27;
			Если ПозицияНачала > 20 И ПозицияКонца > 27 тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Сред(ТекстЗапроса,  ПозицияНачала, ПозицияКонца - ПозицияНачала), "");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТАБЛИЦАРАБОТНИКОВ", ТЗ + ";");
			Иначе
				РаботникиПредприятия = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Дата,
				|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизЛицо,
				|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК ГоловнаяОрганизация,
				|	ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка) КАК Сотрудник,
				|	ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка) КАК Договор,
				|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаПоследнегоДвижения,
				|	"""" КАК Состояние
				|ПОМЕСТИТЬ РаботникиПредприятия
				|;";
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, РаботникиПредприятия, ТЗ + ";");
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

Процедура ПолучитьТаблицуДатуПоследнегоДвижения(Запрос = Неопределено, ТекстЗапроса = Неопределено, НазваниеТаблицы = Неопределено, УдалятьПредыдущийЗапрос = ложь) Экспорт
	
	ТЗ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	     |	ОсновныеРаботники.ГоловнаяОрганизация,
	     |	ОсновныеРаботники.Период КАК ДатаПоследнегоДвижения,
	     |	ОсновныеРаботники.Дата,
	     |	ОсновныеРаботники.Сотрудник,
	     |	ОсновныеРаботники.Состояние
	     |ПОМЕСТИТЬ ОсновныеРаботники
	     |ИЗ
	     |	(ВЫБРАТЬ
	     |		ДатыПоследнихДвижений.Сотрудник КАК Сотрудник,
	     |		ДатыПоследнихДвижений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	     |		ДатыПоследнихДвижений.Период КАК Период,
	     |		ДатыПоследнихДвижений.Дата КАК Дата,
	     |		МАКСИМУМ(ВЫБОР
	     |				КОГДА РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	     |						И РаботникиОрганизаций.ПериодЗавершения <= ДатыПоследнихДвижений.Дата
	     |					ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
	     |				ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
	     |			КОНЕЦ) КАК Состояние
	     |	ИЗ
	     |		(ВЫБРАТЬ
	     |			ТаблицаДвижений.Дата КАК Дата,
	     |			ТаблицаДвижений.Сотрудник КАК Сотрудник,
	     |			ТаблицаДвижений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	     |			МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	     |		ИЗ
	     |			ТаблицаДвижений КАК ТаблицаДвижений
	     |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	     |				ПО ТаблицаДвижений.Дата >= РаботникиОрганизаций.Период
	     |					И ТаблицаДвижений.ГоловнаяОрганизация = РаботникиОрганизаций.Организация
	     |					И ТаблицаДвижений.Сотрудник = РаботникиОрганизаций.Сотрудник
	     |		
	     |		СГРУППИРОВАТЬ ПО
	     |			ТаблицаДвижений.Дата,
	     |			ТаблицаДвижений.Сотрудник,
	     |			ТаблицаДвижений.ГоловнаяОрганизация) КАК ДатыПоследнихДвижений
	     |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	     |			ПО ДатыПоследнихДвижений.ГоловнаяОрганизация = РаботникиОрганизаций.Организация
	     |				И ДатыПоследнихДвижений.Период = РаботникиОрганизаций.Период
	     |				И ДатыПоследнихДвижений.Сотрудник = РаботникиОрганизаций.Сотрудник
	     |	
	     |	СГРУППИРОВАТЬ ПО
	     |		ДатыПоследнихДвижений.Сотрудник,
	     |		ДатыПоследнихДвижений.Период,
	     |		ДатыПоследнихДвижений.ГоловнаяОрганизация,
	     |		ДатыПоследнихДвижений.Дата) КАК ОсновныеРаботники
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	     |	Договорники.ГоловнаяОрганизация,
	     |	Договорники.Дата,
	     |	Договорники.Сотрудник,
	     |	Договорники.ДатаНачала,
	     |	Договорники.Договор
	     |ПОМЕСТИТЬ Договорники
	     |ИЗ
	     |	(ВЫБРАТЬ
	     |		ДатыПоследнихДвижений.Сотрудник КАК Сотрудник,
	     |		ДатыПоследнихДвижений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	     |		ДатыПоследнихДвижений.Дата КАК Дата,
	     |		ДатыПоследнихДвижений.ДатаНачала КАК ДатаНачала,
	     |		МАКСИМУМ(ДоговорНаВыполнениеРаботСФизЛицом.Ссылка) КАК Договор
	     |	ИЗ
	     |		(ВЫБРАТЬ
	     |			ТаблицаДвижений.Дата КАК Дата,
	     |			ТаблицаДвижений.Сотрудник КАК Сотрудник,
	     |			ТаблицаДвижений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	     |			МАКСИМУМ(ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала) КАК ДатаНачала
	     |		ИЗ
	     |			ТаблицаДвижений КАК ТаблицаДвижений
	     |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	     |				ПО ТаблицаДвижений.Дата >= ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
	     |					И (ТаблицаДвижений.ГоловнаяОрганизация = ВЫБОР
	     |						КОГДА ДоговорНаВыполнениеРаботСФизЛицом.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	     |							ТОГДА ДоговорНаВыполнениеРаботСФизЛицом.Организация
	     |						ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.Организация.ГоловнаяОрганизация
	     |					КОНЕЦ)
	     |					И (ДоговорНаВыполнениеРаботСФизЛицом.Проведен)
	     |					И ТаблицаДвижений.Сотрудник = ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник
	     |		
	     |		СГРУППИРОВАТЬ ПО
	     |			ТаблицаДвижений.Дата,
	     |			ТаблицаДвижений.Сотрудник,
	     |			ТаблицаДвижений.ГоловнаяОрганизация) КАК ДатыПоследнихДвижений
	     |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	     |			ПО ДатыПоследнихДвижений.Сотрудник = ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник
	     |				И ДатыПоследнихДвижений.ГоловнаяОрганизация = ВЫБОР
	     |						КОГДА ДоговорНаВыполнениеРаботСФизЛицом.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	     |							ТОГДА ДоговорНаВыполнениеРаботСФизЛицом.Организация
	     |						ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.Организация.ГоловнаяОрганизация
	     |					КОНЕЦ
	     |				И ДатыПоследнихДвижений.ДатаНачала = ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
	     |	
	     |	СГРУППИРОВАТЬ ПО
	     |		ДатыПоследнихДвижений.Сотрудник,
	     |		ДатыПоследнихДвижений.ГоловнаяОрганизация,
	     |		ДатыПоследнихДвижений.Дата,
	     |		ДатыПоследнихДвижений.ДатаНачала) КАК Договорники
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ
	     |	ОсновныеРаботники.ГоловнаяОрганизация,
	     |	ОсновныеРаботники.ДатаПоследнегоДвижения,
	     |	ОсновныеРаботники.Дата,
	     |	ОсновныеРаботники.Сотрудник,
	     |	ОсновныеРаботники.Состояние,
	     |	NULL КАК Договор
	     |ПОМЕСТИТЬ РаботникиПредприятия
	     |ИЗ
	     |	ОсновныеРаботники КАК ОсновныеРаботники
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	Договорники.ГоловнаяОрганизация,
	     |	Договорники.Дата,
	     |	Договорники.Сотрудник,
	     |	Договорники.ДатаНачала,
	     |	NULL,
	     |	Договорники.Договор
	     |ИЗ
	     |	Договорники КАК Договорники";
		 
		 
		
	Если НазваниеТаблицы <> Неопределено тогда
		ТЗ = СтрЗаменить(ТЗ, "ТаблицаДвижений КАК", НазваниеТаблицы+" КАК");
	КонецЕсли;
	Если Запрос <> Неопределено тогда
		ТекстЗапроса = Запрос.Текст;
		Запрос.Текст = ТЗ;
		Запрос.Выполнить();
		Запрос.Текст = ТекстЗапроса;
	ИначеЕсли ТекстЗапроса <> Неопределено тогда
		Если УдалятьПредыдущийЗапрос тогда
			ПозицияНачала = Найти(ТекстЗапроса, "//ТАБЛИЦАРАБОТНИКОВ");
			ПозицияНачала = ПозицияНачала + 20;
			ПозицияКонца  = Найти(ТекстЗапроса, "//КОНЕЦ ТАБЛИЦАРАБОТНИКОВ");
			ПозицияКонца  = ПозицияКонца  + 27;
			Если ПозицияНачала > 20 И ПозицияКонца > 27 тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Сред(ТекстЗапроса,  ПозицияНачала, ПозицияКонца - ПозицияНачала), "");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТАБЛИЦАРАБОТНИКОВ", ТЗ + ";");
			Иначе
				РаботникиПредприятия = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Дата,
				|	ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка) КАК Сотрудник,
				|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК ГоловнаяОрганизация,
				|	ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка) КАК Договор,
				|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаПоследнегоДвижения,
				|	"""" КАК Состояние
				|ПОМЕСТИТЬ РаботникиПредприятия
				|;";
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, РаботникиПредприятия, ТЗ + ";");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//  ДИАГРАММА ГАНТА

// Вывод строки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка       - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров - структура параметров, необходимых для вывода строки
//	Номер         - число, номер обходимой группировки
//	ДопСтрока 	  - строка, выводится справа от группировки. по умолчанию пустая
//
Функция ВывестиСтрокуГруппировки(Выборка, СтруктураПараметров, ТочкаРодитель)

	Если ТочкаРодитель = Неопределено Тогда
		СтруктураРодитель = Новый Структура;
	Иначе
		СтруктураРодитель = ТочкаРодитель.Значение
	КонецЕсли;

	СтруктураГруппировок = Новый Структура;
	Для каждого Элемент Из СтруктураРодитель Цикл
	    СтруктураГруппировок.Вставить(Элемент.Ключ,Элемент.Значение)
	КонецЦикла;
	
	ИмяГруппировки  = Выборка.Группировка();
	ЗначениеГруппировки = Выборка[ИмяГруппировки];
	СтруктураГруппировок.Вставить(ИмяГруппировки,ЗначениеГруппировки);
	
	Попытка 
		ПредставлениеГруппировки = "" + Выборка[ИмяГруппировки + "Представление"];
	Исключение
		ПредставлениеГруппировки = "" + Выборка[ИмяГруппировки];
	КонецПопытки;	
	
	Если ПустаяСтрока(ПредставлениеГруппировки) Тогда
		ПредставлениеГруппировки = "<...>";
	КонецЕсли;
	
	Диаграмма = СтруктураПараметров.Диаграмма;
	Точка = Диаграмма.УстановитьТочку(СтруктураГруппировок, СтруктураРодитель);
	Точка.Расшифровка = ЗначениеГруппировки;
	Точка.Цвет               = WebЦвета.СветлоЗеленый;
	Точка.ДополнительныйЦвет = WebЦвета.СветлоЗеленый;
	Точка.Текст = ПредставлениеГруппировки;
	
	Возврат Точка;
	
КонецФункции // ВывестиСтрокуГруппировки()

// Вывод отрезков диаграммы.
// Параметры:
//	Выборка -       Выборка из результата запроса по периоду
//	СтруктураПараметров - структура общих параметров
//	ИмяПоказателя - Имя поля показателя. По умолчанию "РесурсЧисло".
//	ЦветОтрезка - Цвет. Если задан, отрезки будут окрашены таким цветом, иначе - цветом из макета
//
Процедура ВывестиИнтервалы(Выборка, СтруктураПараметров, Точка, ПараметрыОтчета)

	Диаграмма = СтруктураПараметров.Диаграмма;
	
	Пока Выборка.СледующийПоЗначениюПоля("Серия") Цикл
		
		Серия = СтруктураПараметров["Серия" + Выборка.Серия];
		МассивТочек = Диаграмма.ПолучитьЗначение(Точка, Серия);										
		
		НачалоИнтервалов = ПараметрыОтчета.ДатаКон;
		КонецИнтервалов = Дата(1,1,1);
		
		ТекстПодсказки = "";
		Сч = 3;
		
		Пока Выборка.Следующий() Цикл
			
			Сч = Сч - 1;
			Если ТекстПодсказки <> "" и Сч <> 0 тогда
				ТекстПодсказки = ТекстПодсказки + ";";
			КонецЕсли;
			// Если построение слишком долгое, например, выбрана слишком мелкая периодичность, 
			// то его можно прервать (Ctrl+Break)
			#Если Клиент тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
		
			НачИнтервала = Макс(Выборка.НачалоИнтервала, ПараметрыОтчета.ДатаНач);
			
			КонИнтервала = ?(Выборка.КонецИнтервала = NULL, ПараметрыОтчета.ДатаКон, Мин(Выборка.КонецИнтервала, ПараметрыОтчета.ДатаКон));
			
			НачалоИнтервалов = Мин(НачалоИнтервалов,НачИнтервала);
			КонецИнтервалов = Макс(КонецИнтервалов,КонИнтервала);
			
			Интервал = МассивТочек.Добавить();
			Интервал.Начало = НачИнтервала;
			Интервал.Конец 	= КонИнтервала;
			Если Выборка.Серия = "План" тогда
				Интервал.Цвет = ПараметрыОтчета.мСтильДиаграммыПланУтвержденный;
			Иначе
				Интервал.Цвет = ПараметрыОтчета.мСтильДиаграммыФакт;
			КонецЕсли;
			Интервал.Значение.ДополнительныйЦвет = Интервал.Цвет;
			Интервал.Расшифровка = Выборка.Регистратор;
			Если ПараметрыОтчета.Периодичность = 1 Тогда
				Если сч > 0 тогда
					ТекстПодсказки = ТекстПодсказки + "" + Формат(НачИнтервала, "ДФ='ЧЧ:мм дд.ММ'") + " - " + Формат(КонИнтервала, "ДФ='ЧЧ:мм дд.ММ'");
				ИначеЕсли сч = 0 тогда
					ТекстПодсказки = ТекстПодсказки + "..."
				КонецЕсли;	
				Интервал.Текст = "" + Формат(НачИнтервала, "ДФ='ЧЧ:мм дд.ММ'") + " - " + Формат(КонИнтервала, "ДФ='ЧЧ:мм дд.ММ'");;
			Иначе	
				Если сч > 0 тогда
					ТекстПодсказки = ТекстПодсказки + "" + Формат(НачИнтервала, "ДФ=dd.MM.yyyy") + " - " + Формат(КонИнтервала, "ДФ=dd.MM.yyyy");
				ИначеЕсли сч = 0 тогда
					ТекстПодсказки = ТекстПодсказки + "..."
				КонецЕсли;
				Интервал.Текст = ""  + Формат(НачИнтервала, "ДФ=dd.MM.yyyy") + " - " + Формат(КонИнтервала, "ДФ=dd.MM.yyyy");
			КонецЕсли; 
			
			// добавим текущий интервал во все родительские точки
			ТочкаРодитель = Точка.Родитель;
			Пока ТочкаРодитель <> Неопределено Цикл
				
				МассивТочекРодителя = Диаграмма.ПолучитьЗначение(ТочкаРодитель, Серия);										
				ТочкаРодитель = ТочкаРодитель.Родитель;
			КонецЦикла; 
		КонецЦикла;
		
		МассивТочек.Текст = ТекстПодсказки;
		
	КонецЦикла; 
	

КонецПроцедуры

// Обход выборки из результата запроса по группировкам для вывода строк отчета
//
// Параметры:
//
//	Выборка       - выборка из результата отчета, которая обходится в процедуре,
//	СтруктураПараметров - структура параметров, передеваемых в процедуру вывода
//	                строки отчета,
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиВыборку(Выборка, СтруктураПараметров, Номер, ТочкаРодитель = Неопределено, ПараметрыОтчета)
	#Если Клиент тогда
 	Состояние("Вывод отчета");
	ОбработкаПрерыванияПользователя();
	#КонецЕсли

	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;
	
	// Берутся группировки все подряд
	Пока Выборка.Следующий() Цикл

		ПоследняяГруппировка = (Номер = ВсегоГруппировок-1);
		
		// Для каждого значения группировки строим строку диаграммы
		Точка = ВывестиСтрокуГруппировки(Выборка, СтруктураПараметров, ТочкаРодитель);
		
		Если НЕ ПоследняяГруппировка Тогда
			ВывестиВыборку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, Номер + 1, Точка, ПараметрыОтчета);
		Иначе	
			ВыборкаДетальныхЗаписей = Выборка.Выбрать(ОбходРезультатаЗапроса.Прямой);
			ВывестиИнтервалы(ВыборкаДетальныхЗаписей, СтруктураПараметров, Точка, ПараметрыОтчета);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиВыборку()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьДиаграмму(ДиаграммаГанта, ПараметрыОтчета) Экспорт
	
	мЧасДень 			= 0;
	мДеньНеделяМесяц	= 1;
	мНеделяМесяцГод		= 2;
	мМесяцГод		    = 3;
	
	Если ПараметрыОтчета.Периодичность < 0 ИЛИ ПараметрыОтчета.Периодичность > 3 Тогда
		#Если Клиент тогда
			Предупреждение("Не выбрана периодичность!");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтчета.ДатаНач > ПараметрыОтчета.ДатаКон И ПараметрыОтчета.ДатаКон <> '00010101000000' Тогда
		#Если Клиент тогда
		Предупреждение("Дата начала периода не может быть больше даты конца периода");
		#КонецЕсли
		Возврат;
	КонецЕсли; 

	Если ПараметрыОтчета.ПостроительОтчета.ИзмеренияСтроки.Количество() = 0 Тогда
		#Если Клиент тогда
		Предупреждение("Не выбрано ни одной группировки!");
		#КонецЕсли
		Возврат;
	КонецЕсли;

	Если ПараметрыОтчета.ДатаНач <> Дата('00010101') Тогда
		ПараметрыОтчета.ДатаНач = НачалоДня(ПараметрыОтчета.ДатаНач);
	КонецЕсли; 
	Если ПараметрыОтчета.ДатаКон <> Дата('00010101') Тогда
		ПараметрыОтчета.ДатаКон = КонецДня(ПараметрыОтчета.ДатаКон);
	КонецЕсли; 
	
	//РезультатЗапроса = СформироватьЗапрос(Регистратор);
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("НачалоПериода", НачалоДня(ПараметрыОтчета.ДатаНач));
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("КонецПериода",  КонецДня(ПараметрыОтчета.ДатаКон));
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("ДатаНач", НачалоДня(ПараметрыОтчета.ДатаНач));
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("ДатаКон", НачалоМинуты(КонецДня(ПараметрыОтчета.ДатаКон)));
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("ДатаСведений", ПараметрыОтчета.ДатаКон);
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("ДатаПослеНачала", ПараметрыОтчета.ДатаНач + 1);
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("ТекущаяДата", КонецДня(ОбщегоНазначения.ПолучитьРабочуюДату()));
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("РаботникОрганизацииВОтпуске", Перечисления.СостоянияРаботникаОрганизации.ОтпускЕжегодный);
	//ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("ПомещениеСвободно", Перечисления.Занятость.Свободно);
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("Свободен", Перечисления.ТипыПериодическихЗадачРаботника.Свободен);
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("Отпуск", Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
	
	ПараметрыОтчета.ПостроительОтчета.Выполнить();
	РезультатЗапроса = ПараметрыОтчета.ПостроительОтчета.Результат;
	
	ДиаграммаГанта.Обновление = Ложь;
	ДиаграммаГанта.ОтображениеИнтервала = ОтображениеИнтервалаДиаграммыГанта.Плоский;
	ДиаграммаГанта.Очистить();
	
	//ДиаграммаГанта.ОбластьЗаголовка.Текст = СформироватьЗаголовок();
	
	// Оформление шкалы времени
	ЭлементыШкалыВремени = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы;
	
	// очистим коллекцию
	ПервыйЭлемент = ЭлементыШкалыВремени[0];// нельзя полностью очитить коллекцию (один элемент будет всегда)
	Для Н = 1 по ЭлементыШкалыВремени.Количество()-1 Цикл
		ЭлементыШкалыВремени.Удалить(ЭлементыШкалыВремени[1]);
	КонецЦикла; 
	
	// заполним коллекцию
	Если ПараметрыОтчета.Периодичность = мДеньНеделяМесяц Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.Месяц;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Неделя;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.День;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Пунктир, 1);
		Элемент.ФорматДня =  ФорматДняШкалыВремени.ДеньМесяца;
		
	ИначеЕсли ПараметрыОтчета.Периодичность = мЧасДень Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.День;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		ПервыйЭлемент.ФорматДня =  ФорматДняШкалыВремени.ДеньМесяца;
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Час;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
		
	ИначеЕсли ПараметрыОтчета.Периодичность = мНеделяМесяцГод Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.Год;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Месяц;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Неделя;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Пунктир, 1);
		
	ИначеЕсли ПараметрыОтчета.Периодичность = мМесяцГод Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.Год;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Месяц;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
	КонецЕсли;

	// Вывод данных
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Диаграмма", ДиаграммаГанта);
	СтруктураПараметров.Вставить("ВсегоГруппировок", ПараметрыОтчета.ПостроительОтчета.ИзмеренияСтроки.Количество());
	
	Для каждого Серия из ПараметрыОтчета.мМассивПараметров Цикл
		СтруктураПараметров.Вставить("Серия"+Серия, ДиаграммаГанта.УстановитьСерию(Серия));
		Если Серия = "План" тогда
			СтруктураПараметров.СерияПлан.Цвет = ПараметрыОтчета.мСтильДиаграммыПланУтвержденный;
		ИначеЕсли Серия = "Факт" тогда
			СтруктураПараметров.СерияФакт.Цвет = ПараметрыОтчета.мСтильДиаграммыФакт;
		КонецЕсли;
	КонецЦикла;
	
	ВывестиВыборку(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, 0, , ПараметрыОтчета);
	
	ДиаграммаГанта.ПоказатьУровеньТочек(0);
	ДиаграммаГанта.Обновление = Истина;
	
КонецПроцедуры // СформироватьОтчет()

Функция СформироватьСписокМесяцев(ТекстЗапроса, НачалоПериода, КонецПериода) Экспорт
	
	ТекстЗапПоКалендарю = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК ПериодРегистрации
	|ПОМЕСТИТЬ Периоды
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоПериода И &КонецПериода";
	
	ДтНачМесяца = НачалоМесяца(НачалоПериода);
	
	ТекстЗапросаЗамены = "ВЫБРАТЬ
	|	ДАТАВРЕМЯ("+Формат(ДтНачМесяца, "ДФ=yyyy")+", "+Месяц(ДтНачМесяца)+", "+День(ДтНачМесяца)+") КАК ПериодРегистрации
	|ПОМЕСТИТЬ Периоды";
	ДтНачМесяца = ДобавитьМесяц(ДтНачМесяца, 1);
	
	Пока ДтНачМесяца <= КонецПериода Цикл
		ТекстЗапросаЗамены =  ТекстЗапросаЗамены + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ("+Формат(ДтНачМесяца, "ДФ=yyyy")+", "+Месяц(ДтНачМесяца)+", "+День(ДтНачМесяца)+") КАК ПериодРегистрации
		|";
	ДтНачМесяца = ДобавитьМесяц(ДтНачМесяца, 1);
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗапПоКалендарю, ТекстЗапросаЗамены);
	
	Возврат ТекстЗапроса;
	
КонецФункции //ЗаменитьРегистрРегламентированныйПроизводственныйКалендарь

Процедура УстановитьЗапросыСКДПоСоответсвию(НаборыДанных, СоответствиеНаборовДанныхИЗапросов) Экспорт
	
	Для каждого НаборДанных из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") тогда
			НаборДанных.Запрос = 	СоответствиеНаборовДанныхИЗапросов.Получить(НаборДанных.Имя);
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") тогда
			УстановитьЗапросыСКДПоСоответсвию(НаборДанных.Элементы, СоответствиеНаборовДанныхИЗапросов);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает инициалы и фамилию ответсвенного лица используется для получения ФИО a формате И.О. Фамилия
//
Функция ФамилияИнициалыОтветсвенногоЛица(ФизЛицо, Фамилия = "", Имя = "", Отчество = "") Экспорт
	
	Если ТипЗнч(ФизЛицо) = Тип("Строка") и Найти(ФизЛицо, ".") = 2 тогда
		Возврат ФизЛицо;
	Иначе
		ФамилияТекст  = ?(Фамилия <> Неопределено и Фамилия <> Null, Фамилия, "");
		ИмяТекст      = ?(Имя <> Неопределено и Имя <> Null, Имя, "");
		ОтчествоТекст = ?(Отчество <> Неопределено и Отчество <> Null, Отчество, "");
		Возврат ОбщегоНазначения.ИнициалыФизЛицаФамилия(ФизЛицо, ФамилияТекст, ИмяТекст, ОтчествоТекст);
	КонецЕсли;
	
КонецФункции
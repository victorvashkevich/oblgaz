
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СПИСКАМИ КОДИРОВОК

// Функция возвращает таблицу имен кодировок
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Таблица значений
//
Функция ПолучитьТаблицуКодировок() Экспорт

	ТаблицаКодировок = Новый ТаблицаЗначений;
	ТаблицаКодировок.Колонки.Добавить("Имя");
	ТаблицаКодировок.Колонки.Добавить("Представление");
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "ibm852";
	НоваяСтрока.Представление = "ibm852 (Центральноевропейская DOS)";
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "ibm866";
	НоваяСтрока.Представление = "ibm866 (Кириллица DOS)";
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "iso-8859-1";
	НоваяСтрока.Представление = "iso-8859-1 (Западноевропейская ISO)";
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "iso-8859-2";
	НоваяСтрока.Представление = "iso-8859-2 (Центральноевропейская ISO)";
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "iso-8859-3";
	НоваяСтрока.Представление = "iso-8859-3 (Латиница 3 ISO)";
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "iso-8859-4";
	НоваяСтрока.Представление = "iso-8859-4 (Балтийская ISO)";
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "iso-8859-5";
	НоваяСтрока.Представление = "iso-8859-5 (Кириллица ISO)";
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "iso-8859-7";
	НоваяСтрока.Представление = "iso-8859-7 (Греческая ISO)";
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "iso-8859-9";
	НоваяСтрока.Представление = "iso-8859-9 (Турецкая ISO)";
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "iso-8859-15";
	НоваяСтрока.Представление = "iso-8859-15 (Латиница 9 ISO)";
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "koi8-r";
	НоваяСтрока.Представление = "koi8-r (Кириллица KOI8-R)";
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "koi8-u";
	НоваяСтрока.Представление = "koi8-u (Кириллица KOI8-U)";
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "us-ascii";
	НоваяСтрока.Представление = "us-ascii США";
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "utf-8";
	НоваяСтрока.Представление = "utf-8 (Юникод UTF-8)";
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "windows-1250";
	НоваяСтрока.Представление = "windows-1250 (Центральноевропейская Windows)";
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "windows-1251";
	НоваяСтрока.Представление = "windows-1251 (Кириллица Windows)";
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "windows-1252";
	НоваяСтрока.Представление = "windows-1252 (Западноевропейская Windows)";
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "windows-1253";
	НоваяСтрока.Представление = "windows-1253 (Греческая Windows)";
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "windows-1254";
	НоваяСтрока.Представление = "windows-1254 (Турецкая Windows)";
	
	НоваяСтрока = ТаблицаКодировок.Добавить();
	НоваяСтрока.Имя           = "windows-1257";
	НоваяСтрока.Представление = "windows-1257 (Балтийская Windows)";
	
	Возврат ТаблицаКодировок;

КонецФункции

// Функция возвращает список кодировок
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокКодировок() Экспорт
	
	СписокЗначений = Новый СписокЗначений;
	
	ТаблицаКодировок = ПолучитьТаблицуКодировок();
	Для каждого СтрокаТаблицы Из ТаблицаКодировок Цикл
		СписокЗначений.Добавить(СтрокаТаблицы.Имя, СтрокаТаблицы.Представление);
	КонецЦикла;
	
	Возврат СписокЗначений;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ ДЛЯ НУЖД ЭЛЕКТРОННОЙ ПОЧТЫ

// Функция определяет адрес электронной почты объекта
//
// Параметры
//  Объект - СправочникСсылка, для которого необходимо определить адрес электронной почты
//
Функция ОпределитьАдресПолучателя(Объект) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.ЗначениеПоУмолчанию
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И
	|	КонтактнаяИнформация.Тип = &Тип
	|";
	
	Адрес = "";
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Индексы.Добавить("ЗначениеПоУмолчанию");
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		СтрокаПоУмолчанию = ТаблицаЗапроса.Найти(Истина, "ЗначениеПоУмолчанию");
		Если СтрокаПоУмолчанию <> Неопределено Тогда
			Адрес = СтрокаПоУмолчанию.Представление;
		Иначе
			Адрес = ТаблицаЗапроса[0].Представление;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Адрес;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ЭЛЕКТРОННЫМИ ПИСЬМАМИ

#Если Клиент Тогда
	
// Процедура открывает форму для отправки сообщения по электронной почте на линию
// технической поддержки пользователей
// 
// Параметры:
//  НЕТ
//
Процедура ОтправитьСообщениеВОтделТехническойПоддержки() Экспорт

	Адрес = "";
	
	ЗначениеКонстанты = Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить();
	
	Если ТипЗнч(ЗначениеКонстанты) = Тип("ТаблицаЗначений") Тогда
		ЗначениеКонстанты.Индексы.Добавить("ИмяРаздела");
		ПараметрыОтправки = ЗначениеКонстанты.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");
		Если ПараметрыОтправки <> Неопределено Тогда
			Адрес = ПараметрыОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1];
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Адрес"        , Адрес);
		СтруктураПараметров.Вставить("Представление", Адрес);
		СтруктураПараметров.Вставить("Текст"        , ОбщегоНазначения.ПолучитьТекстСообщенияВОтделТехническойПоддержки());
		СтруктураПараметров.Вставить("Тема"         , "Сообщение в отдел технической поддержки");
		ОткрытьПисьмоПочтовогоКлиентаОперационнойСистемы(СтруктураПараметров);
		
	Иначе
		
		СтруктураНовогоПисьма = Новый Структура;
		Если НЕ ПустаяСтрока(Адрес) Тогда
			СписокКому = Новый СписокЗначений;
			СписокКому.Добавить(Адрес, Адрес);
			СтруктураНовогоПисьма.Вставить("Кому", СписокКому);
		КонецЕсли; 
		СтруктураНовогоПисьма.Вставить("Тело"     , ОбщегоНазначения.ПолучитьТекстСообщенияВОтделТехническойПоддержки());
		СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
		СтруктураНовогоПисьма.Вставить("Тема"     , "Сообщение в отдел технической поддержки");
		
		НаписатьПисьмо(ПараметрыСеанса.ТекущийПользователь, СтруктураНовогоПисьма,,, (НЕ ПустаяСтрока(Адрес)));
		
	КонецЕсли; 

КонецПроцедуры
 
// Процедура открывает форму для написания нового письма
Процедура ОткрытьФормуНовогоПисьма() Экспорт
	
	НаписатьПисьмоОбъекту("",глЗначениеПеременной("глТекущийПользователь"));
	
КонецПроцедуры


#КонецЕсли

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Процедура УстановитьТекстПисьма(ИнтернетПисьмо, ПисьмоОбъект, УстанавливатьВидТекстаПисьма = Истина) Экспорт
	
	ХТМЛ_Текст    = "";
	Простой_Текст = "";
	Прочий_Текст  = "";
	
	ПростойТекст  = "";
	
	Для каждого ТекстПочтовогоСообщения Из ИнтернетПисьмо.Тексты Цикл
		Если ТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
			ХТМЛ_Текст = ТекстПочтовогоСообщения.Текст;
		ИначеЕсли ТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
			Простой_Текст = ТекстПочтовогоСообщения.Текст;
		Иначе
			Прочий_Текст = ТекстПочтовогоСообщения.Текст;
		КонецЕсли; 
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ХТМЛ_Текст) Тогда
		Если УстанавливатьВидТекстаПисьма Тогда
			ПисьмоОбъект.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML;
		КонецЕсли; 
		НовыйHTMLДокумент = Новый COMОбъект("HtmlFile");
		НовыйHTMLДокумент.open("text/html");
		НовыйHTMLДокумент.write(ХТМЛ_Текст);
		НовыйHTMLДокумент.close();
		ТегиКартинок = НовыйHTMLДокумент.all.tags("img");
		Для а = 0 По ТегиКартинок.length - 1 Цикл
			ИсточникКартинки = ТегиКартинок.item(а).src;
			Если Найти(ИсточникКартинки, "cid:") = 1 Тогда
				ИсточникКартинки = Сред(ИсточникКартинки, 5);
				ТегиКартинок.item(а).src = ИсточникКартинки;
			КонецЕсли;
		КонецЦикла;
		ПисьмоОбъект.ТекстПисьма = НовыйHTMLДокумент.all.tags("html").item(0).outerHTML;
	ИначеЕсли ЗначениеЗаполнено(Простой_Текст) Тогда
		Если УстанавливатьВидТекстаПисьма Тогда
			ПисьмоОбъект.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст;
		КонецЕсли; 
		ПисьмоОбъект.ТекстПисьма = СтрЗаменить(Простой_Текст, Символ(13), "");
	ИначеЕсли ЗначениеЗаполнено(Прочий_Текст) Тогда
		Если УстанавливатьВидТекстаПисьма Тогда
			ПисьмоОбъект.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Прочее;
		КонецЕсли; 
		ПисьмоОбъект.ТекстПисьма = Прочий_Текст;
	КонецЕсли; 
	
КонецПроцедуры // ПолучитьТекстПисьма()

#Если Клиент Тогда

// Функция проверяет наличие доступных учетных записей для отправки писем
// для текущего пользователя, и при отсутствии таковых позволяет ввести новую.
//
// Параметры
//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
//  Отказ - Булево, параметр отказа от выполнения операции
//
// Возвращаемое значение:
//   СписокДоступныхЗаписей - СписокЗначений, список доступных учетных записей для отправки электронных писем
//
Функция ПроверитьУчетныеЗаписиДляОтправкиПисем(ТекущийПользователь, Отказ = Ложь, ПредлагатьСозданиеНовойУчетнойЗаписи = Истина) Экспорт

	СписокДоступныхЗаписей = ПолучитьДоступныеУчетныеЗаписи(ТекущийПользователь).Запись;
	Если СписокДоступныхЗаписей.Количество() = 0 Тогда
		Если ПредлагатьСозданиеНовойУчетнойЗаписи Тогда
			ОтветНаВопрос = Вопрос("У вас нет ни одной доступной учетной записи для отправки писем из встроенного почтового клиента.
									|Создать новую?", РежимДиалогаВопрос.ДаНет);
			Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				Возврат СписокДоступныхЗаписей;
			КонецЕсли;
			
			Справочники.УчетныеЗаписиЭлектроннойПочты.СоздатьЭлемент().ПолучитьФорму().ОткрытьМодально();
			СписокДоступныхЗаписей = ПолучитьДоступныеУчетныеЗаписи(ТекущийПользователь).Запись;
			Если СписокДоступныхЗаписей.Количество() = 0 Тогда
				Предупреждение("У вас нет ни одной доступной учетной записи для отправки писем из встроенного почтового клиента.");
				Отказ = Истина;
			КонецЕсли;
			
		Иначе
			Отказ = Истина;
			Возврат СписокДоступныхЗаписей;
		КонецЕсли;
		
	КонецЕсли;

	Возврат СписокДоступныхЗаписей;
	
КонецФункции

// Функция открывает форму списка электронных писем с отбором по
// определенному объекту
//
// Параметры
//  Ссылка - ссылка на объект, по которому необходимо просмотреть письма
//
Функция ОткрытьЭлектронныеПисьмаПоОбъекту(Ссылка, ВызвавшаяФорма = Неопределено) Экспорт

	Если НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
		Предупреждение("Данная операция доступна только при использовании встроенного почтового клиента.");
		Возврат Неопределено;
	КонецЕсли;
	
	СписокПисем = Обработки.ПоискЭлектронныхПисемПоОбъектам.Создать();
	
	Если ТипЗнч(Ссылка) = Тип("СписокЗначений") Тогда
		Если Ссылка.Количество() = 1 Тогда
			СписокПисем.ПостроительОтчета.Отбор.ОбъектПоиска.ВидСравнения = ВидСравнения.Равно;
			СписокПисем.ПостроительОтчета.Отбор.ОбъектПоиска.Значение = Ссылка[0].Значение;
		Иначе // Предполагается что > 1
			СписокПисем.ПостроительОтчета.Отбор.ОбъектПоиска.ВидСравнения = ВидСравнения.ВСписке;
			СписокПисем.ПостроительОтчета.Отбор.ОбъектПоиска.Значение = Ссылка;
		КонецЕсли; 
	Иначе
		СписокПисем.ПостроительОтчета.Отбор.ОбъектПоиска.ВидСравнения = ВидСравнения.Равно;
		СписокПисем.ПостроительОтчета.Отбор.ОбъектПоиска.Значение = Ссылка;
	КонецЕсли; 
	
	Если ВызвавшаяФорма = Неопределено Тогда 
		ФормаСписка = СписокПисем.ПолучитьФорму();
	Иначе  // 
		ФормаСписка = СписокПисем.ПолучитьФорму(, ВызвавшаяФорма, "С владельцем");
	КонецЕсли; 
	
	СписокПисем.ОбновитьТаблицуПисем(ФормаСписка.ЭлектронныеПисьмаСписок);
	ФормаСписка.Открыть();
	
	Возврат ФормаСписка
	
КонецФункции

// Процедура открывает форму нового письма встроенного почтового клиента
// и проставляет в качестве получателя переданный в качестве параметра объект
//
// СправочникСсылка - получатель письма
// ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
Процедура НаписатьПисьмоОбъекту(Объект, ТекущийПользователь) Экспорт

	СписокОбъектов = Новый СписокЗначений;
	
	Если ТипЗнч(Объект) = Тип("СписокЗначений") Тогда
		СписокОбъектов = Объект.Скопировать();
	Иначе
		СписокОбъектов.Добавить(Объект);
	КонецЕсли;
	
	Если НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
		Для Каждого СтрокаСпискаОбъектов Из СписокОбъектов Цикл
			Адрес = ОпределитьАдресПолучателя(СтрокаСпискаОбъектов.Значение);
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Адрес",			Адрес);
			СтруктураПараметров.Вставить("Представление",	Строка(СтрокаСпискаОбъектов.Значение));
			ОткрытьПисьмоПочтовогоКлиентаОперационнойСистемы(СтруктураПараметров);
			
		КонецЦикла;
		
	Иначе
		СтруктураНовогоПисьма	= Новый Структура;
		СписокКому				= Новый СписокЗначений;
		
		СтруктураНовогоПисьма.Вставить("Кому",					СписокКому);
		
		НаписатьПисьмо(ТекущийПользователь, СтруктураНовогоПисьма,,, (НЕ ПустаяСтрока(Адрес)));
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет команду системы mailto с переданными параметрами
//
// Параметры
//  СтруктураПараметров - структура параметров для команды mailto
//
//
Процедура ОткрытьПисьмоПочтовогоКлиентаОперационнойСистемы(СтруктураПараметров) Экспорт
	
	Перем Адрес;
	Перем Представление;
	Перем Тема;
	Перем Текст;
	
	Если НЕ СтруктураПараметров.Свойство("Адрес", Адрес) Тогда
		Адрес = "";
	КонецЕсли; 
	Если НЕ СтруктураПараметров.Свойство("Представление", Представление) Тогда
		Представление = "";
	КонецЕсли; 
	Если НЕ СтруктураПараметров.Свойство("Тема", Тема) Тогда
		Тема = "";
	КонецЕсли; 
	Если НЕ СтруктураПараметров.Свойство("Текст", Текст) Тогда
		Текст = "";
	КонецЕсли; 
	
	ТекстСообщения = СтрЗаменить(Текст, Символы.ПС, Символы.ВТаб);

	СтрокаВыполнения = "mailto:";
	СтрокаВыполнения = СтрокаВыполнения + Представление + "<" + Адрес + ">";
	СтрокаВыполнения = СтрокаВыполнения + "?subject=" + ?(ПустаяСтрока(СокрЛП(Тема))," ",СокрЛП(Тема));
	СтрокаВыполнения = СтрокаВыполнения + "&body=" + СокрЛП(Текст);

	WshShell = Новый COMObject("WScript.Shell");

	// Максимально допустимое число символов строки при использовании данного COM-объекта равно 2021
	Попытка
		WshShell.Run("""" + СтрокаВыполнения + """");
	Исключение
		ОбщаяДлинаСистемнойСтрокиВыполнения = СтрДлина(СтрокаВыполнения);
		ОбщаяДлинаСлужебныхСимволов = СтрДлина(СтрокаВыполнения) - СтрДлина(СокрЛП(ТекстСообщения));
		ПревышениеСтроки = ОбщаяДлинаСистемнойСтрокиВыполнения - 2021;
		ДопустимаяДлинаТекста = 2021 - ОбщаяДлинаСлужебныхСимволов;
		ОбщегоНазначения.СообщитьОбОшибке("Вы можете ввести в текст текущего письма только " + ДопустимаяДлинаТекста + " символов, а у вас - " + СтрДлина(СокрЛП(ТекстСообщения)));
		СтрокаВопроса = "Количество символов в тексте письма превышает допустимое." + Символы.ПС + "Отбросить последние " + ПревышениеСтроки + " символов и оправить?";
		ОтветНаВопрос = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			СтрокаВыполнения = Лев(СтрокаВыполнения, (ОбщаяДлинаСистемнойСтрокиВыполнения - ПревышениеСтроки));
			Попытка
				WshShell.Run("""" + СтрокаВыполнения + """");
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры

#КонецЕсли

// Процедура роизводит отправку пачки электронных писем
//
// Параметры
//  МассивПисем - массив, электронные письма к отправке
//  СоответствиеТекстовЭлектронныхПисем, соответствие, требуется для передачи в качестве параметра в процедуру отправки
//  ТекущийПользователь - СправочникСсылка.Пользователи
//
Процедура ОтправитьПисьма(Письма, СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, Знач ПоказыватьОкноВыполнения = Истина, ТекстОшибок = "") Экспорт

	Если ТипЗнч(Письма) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли; 
	
	ИзмененныйСоставПисем = Новый Соответствие;
	
	ДоступныеУчетныеЗаписи = ПолучитьДоступныеУчетныеЗаписи(ТекущийПользователь);
	Для каждого Письмо Из Письма Цикл
	
		Если Письмо.Ключ.СтатусПисьма = Перечисления.СтатусыПисем.Полученное ИЛИ Письмо.Ключ.СтатусПисьма = Перечисления.СтатусыПисем.Отправленное Тогда
			Сообщить("" + СокрЛП(Письмо.Ключ) + " исключено из списка отправки, отправлять можно только сохраненные или исходящие письма.");
			Продолжить;;
		КонецЕсли;
		
		Если Письмо.Ключ.ПометкаУдаления Тогда
			Сообщить("" + СокрЛП(Письмо.Ключ) + " исключено из списка отправки, письмо помечено на удаление.");
			Продолжить;
		КонецЕсли;
		
		Если Письмо.Ключ.КомуТЧ.Количество() = 0 Тогда
			Сообщить("" + СокрЛП(Письмо.Ключ) + " исключено из списка отправки, не указан ни один получатель.");
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Письмо.Ключ.УчетнаяЗапись) Тогда
			Сообщить("" + СокрЛП(Письмо.Ключ) + " исключено из списка отправки, не указана учетная запись.");
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Письмо.Значение) <> Тип("ДокументОбъект.ЭлектронноеПисьмо") Тогда
			ОбъектПисьмо = Письмо.Ключ.ПолучитьОбъект();
			
			ОбъектПисьмо.СтатусПисьма = Перечисления.СтатусыПисем.Исходящее;
			Если Не ЗначениеЗаполнено(ОбъектПисьмо.Ответственный) Тогда
				ОбъектПисьмо.Ответственный = ТекущийПользователь;
			КонецЕсли; 
		
			Попытка
				ОбъектПисьмо.Записать();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, (СокрЛП(Письмо) + " исключено из списка отправки."));
				Продолжить;;
			КонецПопытки;
		Иначе
			Письмо.Значение.СтатусПисьма = Перечисления.СтатусыПисем.Исходящее;
			Если Не ЗначениеЗаполнено(Письмо.Значение.Ответственный) Тогда
				Письмо.Значение.Ответственный = ТекущийПользователь;
			КонецЕсли; 
		КонецЕсли; 
		
		ИзмененныйСоставПисем.Вставить(Письмо.Ключ, Письмо.Значение);
		
	КонецЦикла;
	
	Если ИзмененныйСоставПисем.Количество() > 0 Тогда
		ПолучениеОтправкаПисем(СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, , ИзмененныйСоставПисем, 
			Истина, , ПоказыватьОкноВыполнения, ТекстОшибок);
	КонецЕсли; 

КонецПроцедуры

// Функция создает новый объект Документ.ЭлектронноеПисьмо и заполняет
// его данными из объекта ИнтернетПочтовоеСособщение, только без аттачей
//
// Параметры
//  ИнтернетПисьмо - ИнтернетПочтовоеСообщение
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписи, учетная запись письма
//  ТекущийПользователь - СправочникСсылка.Пользователи
//  мРазделительАдресов - Строка, разделитель адресов
//  ИсключениеТранзакции - булево, флаг ошибки
//
// Возвращаемое значение:
//   ДокументОбъект.ЭлектронноеПисьмо
//
Функция ПолучитьДокументОбъектИзИнтернетПочтовогоСообщения(ИнтернетПисьмо, УчетнаяЗапись = Неопределено, мРазделительАдресов = ",", ИсключениеТранзакции = Ложь)

	Письмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
	
	Если ТипЗнч(УчетнаяЗапись) <> Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СоздатьЭлемент();
	Иначе
		Письмо.УчетнаяЗапись = УчетнаяЗапись;
	КонецЕсли;
	
	Письмо.КодировкаПисьма = ИнтернетПисьмо.Кодировка;
	Письмо.ЗаголовокПисьма = ИнтернетПисьмо.Заголовок;
	
	Для каждого Получатель Из ИнтернетПисьмо.Получатели Цикл
		
		СтрокаТЧ = Письмо.КомуТЧ.Добавить();
		СтрокаТЧ.АдресЭлектроннойПочты = Получатель.Адрес;
		СтрокаТЧ.Представление         = Получатель.ОтображаемоеИмя;
		
		Если НЕ ПустаяСтрока(Письмо.Кому) Тогда
			Письмо.Кому = Письмо.Кому + мРазделительАдресов + " ";
		КонецЕсли;
			
		Если ПустаяСтрока(Получатель.ОтображаемоеИмя) Тогда
			Письмо.Кому = Письмо.Кому + Получатель.Адрес;
		Иначе
			Письмо.Кому = Письмо.Кому + Получатель.ОтображаемоеИмя + " <" + Получатель.Адрес + ">";
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Получатель Из ИнтернетПисьмо.Копии Цикл
		
		СтрокаТЧ = Письмо.КопииТЧ.Добавить();
		СтрокаТЧ.АдресЭлектроннойПочты = Получатель.Адрес;
		СтрокаТЧ.Представление         = Получатель.ОтображаемоеИмя;
		
		Если НЕ ПустаяСтрока(Письмо.Копии) Тогда
			Письмо.Копии = Письмо.Копии + мРазделительАдресов + " ";
		КонецЕсли;
			
		Если ПустаяСтрока(Получатель.ОтображаемоеИмя) Тогда
			Письмо.Копии = Письмо.Копии + Получатель.Адрес;
		Иначе
			Письмо.Копии = Письмо.Копии + Получатель.ОтображаемоеИмя + " <" + Получатель.Адрес + ">";
		КонецЕсли;
		
	КонецЦикла;
	
	Письмо.ГруппаУчетнойЗаписи = УчетнаяЗапись.ГруппаВходящие;
	Если ТипЗнч(ИнтернетПисьмо.Отправитель) = Тип("Строка") Тогда
		Письмо.ОтправительАдресЭлектроннойПочты = ИнтернетПисьмо.Отправитель;
	Иначе
		Письмо.ОтправительАдресЭлектроннойПочты = ИнтернетПисьмо.Отправитель.Адрес;
	КонецЕсли;
	
	Письмо.ОтправительИмя = ИнтернетПисьмо.ИмяОтправителя;
	
	Если ПустаяСтрока(Письмо.ОтправительИмя) Тогда
		Письмо.ОтправительПредставление = Письмо.ОтправительАдресЭлектроннойПочты;
	Иначе
		Письмо.ОтправительПредставление = Письмо.ОтправительИмя + " <" + Письмо.ОтправительАдресЭлектроннойПочты + ">";
	КонецЕсли;
	
	Письмо.Тема = ИнтернетПисьмо.Тема;

	Если Письмо.ПредметКонтакта = Неопределено Тогда
		Письмо.ПредметКонтакта = "";
	КонецЕсли;
	
	Письмо.СтатусПисьма		= Перечисления.СтатусыПисем.Полученное;
	Письмо.Дата				= ТекущаяДата();
	Письмо.ДатаОтправления	= ИнтернетПисьмо.ДатаОтправления;
	Письмо.ДатаТранспорта	= ТекущаяДата();
	
	УстановитьТекстПисьма(ИнтернетПисьмо, Письмо);
	
	Если ИнтернетПисьмо.Вложения.Количество() = 0 Тогда
		ОчиститьПисьмо(ИнтернетПисьмо);
		Письмо.ПочтовоеСообщение = Новый ХранилищеЗначения(ИнтернетПисьмо, Новый СжатиеДанных());
	КонецЕсли;
	
	Письмо.НеРассмотрено = Ложь;
	
	Если ИнтернетПисьмо.Вложения.Количество() > 0 И НЕ ИсключениеТранзакции Тогда
		Для каждого Вложение Из ИнтернетПисьмо.Вложения Цикл
			Если НЕ ПустаяСтрока(Вложение.Идентификатор) Тогда
				Письмо.ЕстьВложения = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Письмо.ИдентификаторПисьма = ИнтернетПисьмо.ИдентификаторСообщения;
	
	НайденоПисьмоОснование = Ложь;
	ИдентификаторПисьмаОснования = ИнтернетПисьмо.ПолучитьПолеЗаголовка("In-Reply-To", "Строка");
	Если Не ПустаяСтрока(ИдентификаторПисьмаОснования) Тогда
		ИдентификаторПисьмаОснования = Сред(ИдентификаторПисьмаОснования, 2, СтрДлина(ИдентификаторПисьмаОснования)-2);
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ИдентификаторПисьма",	ИдентификаторПисьмаОснования);
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭлектронноеПисьмо.Ссылка КАК Основание,
		|	ЭлектронноеПисьмо.ЗаявкаКандидата
		|ИЗ
		|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		|ГДЕ
		|	ЭлектронноеПисьмо.ИдентификаторПисьма = &ИдентификаторПисьма";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Письмо, Выборка);
			НайденоПисьмоОснование = Истина;
		КонецЕсли;
			
	КонецЕсли;
	
	Если Не НайденоПисьмоОснование Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Адрес",	Письмо.ОтправительАдресЭлектроннойПочты);
		
		// Сначала поищем заявку кандидата
		// Если заявка всего одна, припишем к ней письмо
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмо.ЗаявкаКандидата
		|ИЗ
		|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		|ГДЕ
		|	ЭлектронноеПисьмо.ОтправительАдресЭлектроннойПочты = &Адрес
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЭлектронноеПисьмоКомуТЧ.Ссылка.ЗаявкаКандидата
		|ИЗ
		|	Документ.ЭлектронноеПисьмо.КомуТЧ КАК ЭлектронноеПисьмоКомуТЧ
		|ГДЕ
		|	ЭлектронноеПисьмоКомуТЧ.АдресЭлектроннойПочты = &Адрес";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Письмо.ЗаявкаКандидата	= Выборка.ЗаявкаКандидата;
		КонецЕсли;
		
		// Если была найдена одна заявка, попытаемся найти документ основание
		// Найдем последнее письмо, отправленное на адрес, с которого отправлено текущее письмо
		
		Если Выборка.Количество() = 1 Тогда
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЭлектронноеПисьмоКомуТЧ.Ссылка КАК ОснованиеПисьма
			|ИЗ
			|	Документ.ЭлектронноеПисьмо.КомуТЧ КАК ЭлектронноеПисьмоКомуТЧ
			|ГДЕ
			|	ЭлектронноеПисьмоКомуТЧ.АдресЭлектроннойПочты = &Адрес
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭлектронноеПисьмоКомуТЧ.Ссылка.ДатаОтправления УБЫВ";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				Письмо.ОснованиеПисьма	= Выборка.ОснованиеПисьма;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Письмо;
	
КонецФункции

// Функция определяет, надо ли принимать письмо для случаев, когда в настройках
//  учетной записи установлено, что письма не удалять с сервера
//
// Параметры
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты
//  ИнтернетПисьмо - ИнтернетПисьмо, которое анализируем
//  МассивПисемДляУдаления - Массив, который заполняем, если письмо необходимо удалить с сервера
//
// Возвращаемое значение:
//   Булево
//
Функция НадоПриниматьПисьмо(УчетнаяЗапись, ИнтернетПисьмо, МассивПисемДляУдаления)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИнтернетПисьмо.ИдентификаторСообщения);
	Запрос.УстановитьПараметр("ДатаОтправления"       , ИнтернетПисьмо.ДатаОтправления);
	Запрос.УстановитьПараметр("УчетнаяЗапись"         , УчетнаяЗапись);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭлектронноеПисьмо.Дата КАК ДатаРегистрацииПисьма
	|ИЗ
	|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
	|ГДЕ
	|	ЭлектронноеПисьмо.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Полученное)
	|	И ЭлектронноеПисьмо.УчетнаяЗапись = &УчетнаяЗапись";
	
	Если ЗначениеЗаполнено(ИнтернетПисьмо.ДатаОтправления) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И
		|	ЭлектронноеПисьмо.ДатаОтправления = &ДатаОтправления
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	И
	|	ЭлектронноеПисьмо.ИдентификаторПисьма = &ИдентификаторСообщения
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	Иначе
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		Если ВыборкаЗапроса.Следующий() Тогда
			Если НЕ УчетнаяЗапись.ОставлятьКопииСообщенийНаСервере Тогда
				МассивПисемДляУдаления.Добавить(ИнтернетПисьмо);
			Иначе
				Если УчетнаяЗапись.УдалятьПисьмаССервераЧерез Тогда
					Если УчетнаяЗапись.КоличествоДнейУдаленияПисемССервера = 0 Тогда
						МассивПисемДляУдаления.Добавить(ИнтернетПисьмо);
					Иначе
						Если (НачалоДня(ВыборкаЗапроса.ДатаРегистрацииПисьма) + УчетнаяЗапись.КоличествоДнейУдаленияПисемССервера*24*60*60) < НачалоДня(ТекущаяДата()) Тогда
							МассивПисемДляУдаления.Добавить(ИнтернетПисьмо);
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли; 

КонецФункции

// Функция определяет, надо ли принимать письмо для случаев, когда в настройках
//  учетной записи установлено, что письма не удалять с сервера
//
// Параметры
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты
//  ИнтернетПисьмо - ИнтернетПисьмо, которое анализируем
//  МассивПисемДляУдаления - Массив, который заполняем, если письмо необходимо удалить с сервера
//
// Возвращаемое значение:
//   Булево
//
Функция ПолучитьСписокПисемКПолучению(УчетнаяЗапись, ЗНАЧ МассивЗаголовковПисем, МассивПисемДляУдаления)
	
	МассивИдентификаторов		= Новый Массив;
	СоответствиеИдентификаторов	= Новый Соответствие;
	
	Для Каждого ИнтернетПисьмо Из МассивЗаголовковПисем Цикл
		МассивИдентификаторов.Добавить(ИнтернетПисьмо.ИдентификаторСообщения);
		СоответствиеИдентификаторов.Вставить(ИнтернетПисьмо.ИдентификаторСообщения, ИнтернетПисьмо);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивИдентификаторов",	МассивИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись",			УчетнаяЗапись);
	Запрос.УстановитьПараметр("ТекущаяДата",			НачалоДня(ТекущаяДата()));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронноеПисьмо.ИдентификаторПисьма,
	|	ВЫБОР
	|		КОГДА (НЕ ЭлектронноеПисьмо.УчетнаяЗапись.ОставлятьКопииСообщенийНаСервере)
	|			ТОГДА ИСТИНА
	|		КОГДА ЭлектронноеПисьмо.УчетнаяЗапись.УдалятьПисьмаССервераЧерез
	|			ТОГДА ВЫБОР
	|					КОГДА ЭлектронноеПисьмо.УчетнаяЗапись.КоличествоДнейУдаленияПисемССервера = 0
	|						ТОГДА ИСТИНА
	|					КОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ЭлектронноеПисьмо.Дата, ДЕНЬ), ДЕНЬ, ЭлектронноеПисьмо.УчетнаяЗапись.КоличествоДнейУдаленияПисемССервера) < &ТекущаяДата
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УдалятьПисьмо
	|ИЗ
	|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
	|ГДЕ
	|	ЭлектронноеПисьмо.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Полученное)
	|	И ЭлектронноеПисьмо.УчетнаяЗапись = &УчетнаяЗапись
	|	И ЭлектронноеПисьмо.ИдентификаторПисьма В(&МассивИдентификаторов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивПисем = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		ИнтернетПисьмо = СоответствиеИдентификаторов.Получить(Выборка.ИдентификаторПисьма);
		Если ИнтернетПисьмо <> Неопределено Тогда
			ТекущийИндекс = МассивЗаголовковПисем.Найти(ИнтернетПисьмо);
			Если ТекущийИндекс <> Неопределено Тогда
				МассивЗаголовковПисем.Удалить(ТекущийИндекс);
			КонецЕсли;
		КонецЕсли;
			
		Если Выборка.УдалятьПисьмо Тогда
			МассивПисемДляУдаления.Добавить(Выборка.ИдентификаторПисьма);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЗаголовковПисем;
	
	//Если РезультатЗапроса.Пустой() Тогда
	//	Возврат Истина;
	//Иначе
	//	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	//	Если ВыборкаЗапроса.Следующий() Тогда
	//		Если НЕ УчетнаяЗапись.ОставлятьКопииСообщенийНаСервере Тогда
	//			МассивПисемДляУдаления.Добавить(ИнтернетПисьмо);
	//		Иначе
	//			Если УчетнаяЗапись.УдалятьПисьмаССервераЧерез Тогда
	//				Если УчетнаяЗапись.КоличествоДнейУдаленияПисемССервера = 0 Тогда
	//					МассивПисемДляУдаления.Добавить(ИнтернетПисьмо);
	//				Иначе
	//					Если (НачалоДня(ВыборкаЗапроса.ДатаРегистрацииПисьма) + УчетнаяЗапись.КоличествоДнейУдаленияПисемССервера*24*60*60) < НачалоДня(ТекущаяДата()) Тогда
	//						МассивПисемДляУдаления.Добавить(ИнтернетПисьмо);
	//					КонецЕсли; 
	//				КонецЕсли; 
	//			КонецЕсли; 
	//		КонецЕсли; 
	//	КонецЕсли;
	//	Возврат Ложь;
	//КонецЕсли; 

КонецФункции

// Формирует почтовый профиль по учетной записи
//
// Параметры
//  УчетнаяЗапись
//
// Возвращаемое значение:
//   ИнтернетПочтовыйПрофиль
//
Функция ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись) Экспорт

	Профиль = Новый ИнтернетПочтовыйПрофиль;
	
	Профиль.АдресСервераPOP3 = УчетнаяЗапись.POP3Сервер;
	Профиль.АдресСервераSMTP = УчетнаяЗапись.SMTPСервер;
	Если УчетнаяЗапись.ВремяОжиданияСервера > 0 Тогда
		Профиль.ВремяОжидания = УчетнаяЗапись.ВремяОжиданияСервера;
	КонецЕсли; 
	Профиль.Пароль           = УчетнаяЗапись.Пароль;
	Профиль.Пользователь     = УчетнаяЗапись.Логин;
	Профиль.ПортPOP3         = УчетнаяЗапись.ПортPOP3;
	Профиль.ПортSMTP         = УчетнаяЗапись.ПортSMTP;
	
	Если УчетнаяЗапись.ТребуетсяSMTPАутентификация Тогда
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
		Профиль.ПарольSMTP         = УчетнаяЗапись.ПарольSMTP;
		Профиль.ПользовательSMTP   = УчетнаяЗапись.ЛогинSMTP;
	Иначе
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
		Профиль.ПарольSMTP         = "";
		Профиль.ПользовательSMTP   = "";
	КонецЕсли; 
	
	Возврат Профиль;

КонецФункции

// Процедура осуществляет транспорт писем
//
// Параметры
//  СоответствиеТекстовЭлектронныхПисем - Соответствие, текстов писем и ДокументСсылка.ЭлектронноеПисьмо
//  ТекущийПользователь - СправочникСсылка.Пользователи, Текущий пользователь системы
//  МассивУчетныхЗаписей - Массив, учетные записи по которым необходимо осуществить транспорт
//  МассивПисем - Массив, документы ЭлектронноеПисьмо, которые необходимо отправить
//  Отправить - Булево, действие "отправить письма"
//  Получить - Булево, действие "получить письма"
//  ПоказыватьОкноВыполнения - Булево, показывать окно выполнения получения/отправки писем
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ПолучениеОтправкаПисем(СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, МассивУчетныхЗаписей = Неопределено, 
	Письма = Неопределено, Отправить = Ложь, Получить = Ложь, ПоказыватьОкноВыполнения = Истина, ТекстОшибок = "") Экспорт

	Перем мРазделительАдресов;
	
	Если НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
		Сообщить("В настройках учета не установлено использование встроенного почтового клиента. Действие отправка/получение писем не выполнено.");
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	мРазделительАдресов = ",";
	
	СписокДоступныхУчетныхЗаписей = ПолучитьДоступныеУчетныеЗаписи(ТекущийПользователь).Запись;
	
	ТекстОшибок = "";
	
	Если ТипЗнч(Письма) = Тип("Соответствие") Тогда
		МассивПисем = Новый Массив;
		Для каждого ЭлементСоотсетствия Из Письма Цикл
			МассивПисем.Добавить(ЭлементСоотсетствия.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	// Получим сответствие всех учетных записей, по которым надо производить действия отправки и получения
	СоответствиеУчетныхЗаписейВсего = Новый Соответствие;
		
	Если Отправить Тогда
		
		Запрос = Новый Запрос;
		
		// Дерево на отправку
		Если Письма = Неопределено И МассивУчетныхЗаписей = Неопределено Тогда
			
			Запрос.УстановитьПараметр("Исходящее", Перечисления.СтатусыПисем.Исходящее);
			Запрос.УстановитьПараметр("СписокВладельцев", СписокДоступныхУчетныхЗаписей);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЭлектронноеПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
			|	ЭлектронноеПисьмо.Ссылка КАК Письмо
			|ИЗ
			|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
			|ГДЕ
			|	ЭлектронноеПисьмо.СтатусПисьма = &Исходящее
			|	И ЭлектронноеПисьмо.УчетнаяЗапись В(&СписокВладельцев)
			|ИТОГИ ПО
			|	УчетнаяЗапись";
			
			ДеревоУчетныхЗаписейИПисем = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			
		ИначеЕсли ТипЗнч(МассивПисем) = Тип("Массив") И МассивУчетныхЗаписей = Неопределено Тогда
			
			Запрос.УстановитьПараметр("Исходящее"       , Перечисления.СтатусыПисем.Исходящее);
			Запрос.УстановитьПараметр("СписокВладельцев", СписокДоступныхУчетныхЗаписей);
			Запрос.УстановитьПараметр("СписокПисем"     , МассивПисем);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЭлектронноеПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
			|	ЭлектронноеПисьмо.Ссылка КАК Письмо
			|ИЗ
			|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
			|ГДЕ
			|	ЭлектронноеПисьмо.СтатусПисьма = &Исходящее
			|	И ЭлектронноеПисьмо.Ссылка В(&СписокПисем)
			|	И ЭлектронноеПисьмо.УчетнаяЗапись В(&СписокВладельцев)
			|ИТОГИ ПО
			|	УчетнаяЗапись";
			
			ДеревоУчетныхЗаписейИПисем = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			
		ИначеЕсли МассивПисем = Неопределено И ТипЗнч(МассивУчетныхЗаписей) = Тип("Массив") Тогда
			
			Запрос.УстановитьПараметр("Исходящее", Перечисления.СтатусыПисем.Исходящее);
			Запрос.УстановитьПараметр("СписокВладельцев", СписокДоступныхУчетныхЗаписей);
			Запрос.УстановитьПараметр("СписокВладельцевМассив", МассивУчетныхЗаписей);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЭлектронноеПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
			|	ЭлектронноеПисьмо.Ссылка КАК Письмо
			|ИЗ
			|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
			|ГДЕ
			|	ЭлектронноеПисьмо.СтатусПисьма = &Исходящее
			|	И ЭлектронноеПисьмо.УчетнаяЗапись В(&СписокВладельцевМассив)
			|	И ЭлектронноеПисьмо.УчетнаяЗапись В(&СписокВладельцев)
			|ИТОГИ ПО
			|	УчетнаяЗапись";
			
			ДеревоУчетныхЗаписейИПисем = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			
		ИначеЕсли ТипЗнч(МассивПисем) = Тип("Массив") И ТипЗнч(МассивУчетныхЗаписей) = Тип("Массив") Тогда
			
			Запрос.УстановитьПараметр("Исходящее"             , Перечисления.СтатусыПисем.Исходящее);
			Запрос.УстановитьПараметр("СписокПисем"           , МассивПисем);
			Запрос.УстановитьПараметр("СписокВладельцев"      , СписокДоступныхУчетныхЗаписей);
			Запрос.УстановитьПараметр("СписокВладельцевМассив", МассивУчетныхЗаписей);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЭлектронноеПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
			|	ЭлектронноеПисьмо.Ссылка КАК Письмо
			|ИЗ
			|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
			|ГДЕ
			|	ЭлектронноеПисьмо.СтатусПисьма = &Исходящее
			|	И ЭлектронноеПисьмо.Ссылка В(&СписокПисем)
			|	И ЭлектронноеПисьмо.УчетнаяЗапись В(&СписокВладельцевМассив)
			|	И ЭлектронноеПисьмо.УчетнаяЗапись В(&СписокВладельцев)
			|ИТОГИ ПО
			|	УчетнаяЗапись";
			
			ДеревоУчетныхЗаписейИПисем = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			
		Иначе
			Возврат;
		КонецЕсли;
		
		МассивУчетныхЗаписейОтправка = ДеревоУчетныхЗаписейИПисем.Строки.ВыгрузитьКолонку("УчетнаяЗапись");
		Для каждого ЭлементМассива Из МассивУчетныхЗаписейОтправка Цикл
			СоответствиеУчетныхЗаписейВсего.Вставить(ЭлементМассива, ЭлементМассива);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Получить Тогда
	
		// Заполним массив учетных записей на получение писем
		Если ТипЗнч(МассивУчетныхЗаписей) = Тип("Массив") Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("СписокВладельцев", СписокДоступныхУчетныхЗаписей);
			Запрос.УстановитьПараметр("СписокВладельцевМассив", МассивУчетныхЗаписей);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись
			|ИЗ
			|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
			|ГДЕ
			|	УчетныеЗаписиЭлектроннойПочты.Ссылка В(&СписокВладельцевМассив)
			|	И УчетныеЗаписиЭлектроннойПочты.Ссылка В(&СписокВладельцев)";
			
			МассивУчетныхЗаписейПолучение = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УчетнаяЗапись");
			
		ИначеЕсли МассивУчетныхЗаписей = Неопределено Тогда
			МассивУчетныхЗаписейПолучение = СписокДоступныхУчетныхЗаписей.ВыгрузитьЗначения();
		Иначе
			Возврат;
		КонецЕсли;
	
		Для каждого ЭлементМассива Из МассивУчетныхЗаписейПолучение Цикл
			СоответствиеУчетныхЗаписейВсего.Вставить(ЭлементМассива, ЭлементМассива);
		КонецЦикла;
		
	КонецЕсли;
	
	// Определим те учетные записи, которые были заявлены во входящих параметрах
	// и проверим их на возможность отправки, чтобы пользователю было понятно
	// почему некоторые письма не отправились
	
	СоответствиеЗаявленныхУчетныхЗаписей = Новый Соответствие;
	
	Если ТипЗнч(МассивПисем) = Тип("Массив") Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Исходящее"             , Перечисления.СтатусыПисем.Исходящее);
		Запрос.УстановитьПараметр("СписокПисем"           , МассивПисем);
		Запрос.УстановитьПараметр("СписокВладельцев"      , СписокДоступныхУчетныхЗаписей);
		Запрос.УстановитьПараметр("СписокВладельцевМассив", МассивУчетныхЗаписей);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмо.УчетнаяЗапись КАК УчетнаяЗапись
		|ИЗ
		|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		|ГДЕ
		|	ЭлектронноеПисьмо.Ссылка В(&СписокПисем)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеЗаявленныхУчетныхЗаписей.Вставить(Выборка.УчетнаяЗапись, Выборка.УчетнаяЗапись);
		КонецЦикла;
	
	КонецЕсли;
	
	Если ТипЗнч(МассивУчетныхЗаписей) = Тип("Массив") Тогда
		Для каждого ЭлементМассива Из МассивУчетныхЗаписей Цикл
			СоответствиеЗаявленныхУчетныхЗаписей.Вставить(ЭлементМассива, ЭлементМассива);
		КонецЦикла;
	КонецЕсли;
	
	#Если Клиент Тогда
	// Пора показывать форму состояния отпарвки/получения
	ФормаПрогрессора = ПолучитьОбщуюФорму("ФормаИндикацииПроцессаПолученияОтправкиПисемЭлектроннойПочты",,"УникальнаяФорма");
	ФормаПрогрессора.Задачи.Индексы.Добавить("Объект");
	ФормаПрогрессора.Задачи.Очистить();
	
	Если ПоказыватьОкноВыполнения Тогда
		// Выведем те учетные записи, которые не прошли по заявленным
		Для каждого ЭлементСоответствия Из СоответствиеЗаявленныхУчетныхЗаписей Цикл
			
			Если СписокДоступныхУчетныхЗаписей.НайтиПоЗначению(ЭлементСоответствия.Ключ) = Неопределено Тогда
				
				ТекстОшибок = Символы.ПС + ТекстОшибок + ("Заявлена " + ЭлементСоответствия.Значение.Наименование + " <" + ЭлементСоответствия.Значение.АдресЭлектроннойПочты + ">" + " - нет прав доступа для записи электронных писем.");
				
				НоваяЗадача = ФормаПрогрессора.Задачи.Добавить();
				НоваяЗадача.Объект    = ЭлементСоответствия.Ключ;
				НоваяЗадача.Состояние = Перечисления.СостоянияСобытий.Отменено;
				Если Отправить И Получить Тогда
					НоваяЗадача.Задача    = "Отправка и получение";
				ИначеЕсли Отправить Тогда
					НоваяЗадача.Задача    = "Отправка";
				ИначеЕсли Получить Тогда
					НоваяЗадача.Задача    = "Получение";
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если СоответствиеУчетныхЗаписейВсего.Получить(ЭлементСоответствия.Ключ) = Неопределено Тогда
				НоваяЗадача = ФормаПрогрессора.Задачи.Добавить();
				НоваяЗадача.Объект    = ЭлементСоответствия.Ключ;
				НоваяЗадача.Состояние = Перечисления.СостоянияСобытий.Завершено;
				Если Отправить И Получить Тогда
					НоваяЗадача.Задача    = "Отправка и получение";
				ИначеЕсли Отправить Тогда
					НоваяЗадача.Задача    = "Отправка";
				ИначеЕсли Получить Тогда
					НоваяЗадача.Задача    = "Получение";
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Покажем в таблице значений учетные записи, по которым нет писем, но они должны обрабатываться, как обработанные
		Если МассивУчетныхЗаписей = Неопределено Тогда
			Для каждого ЭлементСписка Из СписокДоступныхУчетныхЗаписей Цикл
				Если СоответствиеУчетныхЗаписейВсего.Получить(ЭлементСписка.Значение) = Неопределено И ФормаПрогрессора.Задачи.Найти(ЭлементСписка.Значение, "Объект") = Неопределено Тогда
					НоваяЗадача = ФормаПрогрессора.Задачи.Добавить();
					НоваяЗадача.Объект    = ЭлементСписка.Значение;
					НоваяЗадача.Состояние = Перечисления.СостоянияСобытий.Завершено;
					Если Отправить И Получить Тогда
						НоваяЗадача.Задача    = "Отправка и получение";
					ИначеЕсли Отправить Тогда
						НоваяЗадача.Задача    = "Отправка";
					ИначеЕсли Получить Тогда
						НоваяЗадача.Задача    = "Получение";
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ФормаПрогрессора.Ошибки = "";
	ФормаПрогрессора.КомментарийОбработкиДанных = "Получение и отправка писем электронной почты";
	
	#КонецЕсли
	
	Если СоответствиеУчетныхЗаписейВсего.Количество() > 0 Тогда
		
		#Если Клиент Тогда
		Если ПоказыватьОкноВыполнения Тогда
		
			Для каждого ЭлементСоответствия Из СоответствиеУчетныхЗаписейВсего Цикл
				НоваяЗадача = ФормаПрогрессора.Задачи.Добавить();
				НоваяЗадача.Объект    = ЭлементСоответствия.Ключ;
				НоваяЗадача.Состояние = Перечисления.СостоянияСобытий.Запланировано;
				Если Отправить И Получить Тогда
					НоваяЗадача.Задача    = "Отправка и получение";
				ИначеЕсли Отправить Тогда
					НоваяЗадача.Задача    = "Отправка";
				ИначеЕсли Получить Тогда
					НоваяЗадача.Задача    = "Получение";
				КонецЕсли;
			КонецЦикла;
		
			ФормаПрогрессора.Открыть();
			
		КонецЕсли;
		#КонецЕсли
		
		Для каждого ЭлементСоответствия Из СоответствиеУчетныхЗаписейВсего Цикл
			
			УчетнаяЗапись = ЭлементСоответствия.Значение;
			
			#Если Клиент Тогда
			Если ПоказыватьОкноВыполнения Тогда
				СтрокаТаблицыСостояния = ФормаПрогрессора.Задачи.Найти(УчетнаяЗапись, "Объект");
			КонецЕсли;
			
			ФормаПрогрессора.Значение = 0;
			ФормаПрогрессора.КомментарийЗначения = "Подключение к " + УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + "> ...";
			#КонецЕсли
			
			// Пробуем подключиться
			
			Профиль = ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
			
			ИнтернетПочта = Новый ИнтернетПочта;
			
			Попытка
				ИнтернетПочта.Подключиться(Профиль);
			Исключение
				
				ТекстОшибок = Символы.ПС + ТекстОшибок + (Строка(УчетнаяЗапись) + ". " + ОписаниеОшибки());
				
				#Если Клиент Тогда
				Если ПоказыватьОкноВыполнения Тогда
					СтрокаТаблицыСостояния.Состояние = Перечисления.СостоянияСобытий.Отменено;
				КонецЕсли;
				#КонецЕсли
			
				Продолжить;
			КонецПопытки;
			
			// Сначала проверим отправку
			Если Отправить Тогда
			
				#Если Клиент Тогда
				ФормаПрогрессора.КомментарийЗначения = "Отправка сообщений " + УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + "> ...";
				#КонецЕсли
				
				Если ТипЗнч(ДеревоУчетныхЗаписейИПисем) = Тип("ДеревоЗначений") Тогда
				
					СтрокаДереваУчетнойЗаписи = ДеревоУчетныхЗаписейИПисем.Строки.Найти(УчетнаяЗапись, "УчетнаяЗапись");
					
					Если СтрокаДереваУчетнойЗаписи <> Неопределено Тогда
					
						#Если Клиент Тогда
						ФормаПрогрессора.МаксимальноеЗначение = СтрокаДереваУчетнойЗаписи.Строки.Количество();
						ФормаПрогрессора.Значение = 0;
						#КонецЕсли
						
						Для каждого СтрокаПисьма Из СтрокаДереваУчетнойЗаписи.Строки Цикл
						
							#Если Клиент Тогда
							ФормаПрогрессора.Значение = СтрокаДереваУчетнойЗаписи.Строки.Индекс(СтрокаПисьма) + 1;
							
							Если ЗначениеЗаполнено(СтрокаПисьма.Письмо.ИмяФайлаРедактированияХТМЛТекста) Тогда
								Сообщить("У письма " + СокрЛП(СтрокаПисьма.Письмо) + " не закончено редактирование текста внешним HTML редактором. Письмо не отправлено.");
								Продолжить;
							КонецЕсли;
							#КонецЕсли
						
							ПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
							
							Письмо = СтрокаПисьма.Письмо;
							
							Если ЗначениеЗаполнено(Письмо.КодировкаПисьма) Тогда
								КодировкаСообщения = Письмо.КодировкаПисьма;
							Иначе
								КодировкаСообщения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "КодировкаПисьмаЭлектроннойПочтыПоУмолчанию");
							КонецЕсли;
							
							ПочтовоеСообщение.Кодировка = КодировкаСообщения;
						
							// Вложения
							Запрос = Новый Запрос;
							
							Запрос.УстановитьПараметр("ВыбОбъект",		Письмо);
							Запрос.УстановитьПараметр("ПустаяСтрока",	"");
							
							Запрос.Текст =
							"ВЫБРАТЬ РАЗРЕШЕННЫЕ
							|	ВложенияЭлектронныхПисем.Ссылка КАК Ссылка,
							|	ВложенияЭлектронныхПисем.Наименование КАК Наименование,
							|	ВложенияЭлектронныхПисем.ИмяФайла КАК ИмяФайла,
							|	ВложенияЭлектронныхПисем.Хранилище КАК ХранилищеЗначения
							|ИЗ
							|	Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
							|ГДЕ
							|	ВложенияЭлектронныхПисем.Объект = &ВыбОбъект
							|	И ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма = &ПустаяСтрока";
							
							Выборка = Запрос.Выполнить().Выбрать();
							Пока Выборка.Следующий() Цикл
								ИмяФайла = "";
								Если НЕ ПустаяСтрока(Выборка.ИмяФайла) Тогда
									ИмяФайла = Выборка.ИмяФайла;
								ИначеЕсли НЕ ПустаяСтрока(Выборка.Наименование) Тогда
									ИмяФайла = Выборка.Наименование;
								КонецЕсли;
								ДвоичныеДанные = Выборка.ХранилищеЗначения.Получить();
								Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
									ПочтовоеСообщение.Вложения.Добавить(Выборка.ХранилищеЗначения.Получить(), ИмяФайла);
								КонецЕсли;
							КонецЦикла;
							
							// Общие свойства письма
							ПочтовоеСообщение.ИмяОтправителя  = Письмо.ОтправительИмя;
							ПочтовоеСообщение.Отправитель     = Письмо.ОтправительАдресЭлектроннойПочты;
							ПочтовоеСообщение.Тема            = Письмо.Тема;
							
							Для каждого СтрокаТЧ Из Письмо.КомуТЧ Цикл
								Получатель = ПочтовоеСообщение.Получатели.Добавить();
								Получатель.Адрес           = СтрокаТЧ.АдресЭлектроннойПочты;
								Получатель.ОтображаемоеИмя = СтрокаТЧ.Представление;
								Получатель.Кодировка       = КодировкаСообщения;
							КонецЦикла;
							Для каждого СтрокаТЧ Из Письмо.КопииТЧ Цикл
								Копия = ПочтовоеСообщение.Копии.Добавить();
								Копия.Адрес           = СтрокаТЧ.АдресЭлектроннойПочты;
								Копия.ОтображаемоеИмя = СтрокаТЧ.Представление;
								Копия.Кодировка       = КодировкаСообщения;
							КонецЦикла;
							Для каждого СтрокаТЧ Из Письмо.СкрытыеКопииТЧ Цикл
								СлепаяКопия = ПочтовоеСообщение.СлепыеКопии.Добавить(СтрокаТЧ.АдресЭлектроннойПочты);
								СлепаяКопия.Адрес           = СтрокаТЧ.АдресЭлектроннойПочты;
								СлепаяКопия.ОтображаемоеИмя = СтрокаТЧ.Представление;
								СлепаяКопия.Кодировка       = КодировкаСообщения;
							КонецЦикла;
							
							ТекстПисьмаИД = Письмо.ТекстПисьма;
							ТекстСообщения = ПочтовоеСообщение.Тексты.Добавить();
							ТекстСообщения.Кодировка = КодировкаСообщения;
							Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
								ТекстСообщения.Текст     = ПропарситьHTMLИДВ_ТекстКартинки(СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, Письмо, ТекстПисьмаИД);
								ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
							ИначеЕсли Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML Тогда
								ТекстСообщения.Текст     = ТекстПисьмаИД;
								ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
							Иначе
								ТекстСообщения.Текст     = ТекстПисьмаИД;
								ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
							КонецЕсли;
							
							Попытка
								
								ИнтернетПочта.Послать(ПочтовоеСообщение);
								
								Если Письма.Получить(Письмо) <> Неопределено Тогда
									Письма[Письмо].СтатусПисьма			= Перечисления.СтатусыПисем.Отправленное;
									Письма[Письмо].ДатаТранспорта		= ТекущаяДата();
									Письма[Письмо].ДатаОтправления		= ТекущаяДата();
									Письма[Письмо].ИдентификаторПисьма	= ПочтовоеСообщение.ИдентификаторСообщения;
									
									ОчиститьПисьмо(ПочтовоеСообщение);
								
									Письма[Письмо].ПочтовоеСообщение = Новый ХранилищеЗначения(ПочтовоеСообщение, Новый СжатиеДанных());
									
									Попытка
										Письма[Письмо].Записать();
									Исключение
									КонецПопытки;
								Иначе
									ОбъектПисьмо = Письмо.ПолучитьОбъект();
									ОбъектПисьмо.СтатусПисьма			= Перечисления.СтатусыПисем.Отправленное;
									ОбъектПисьмо.ДатаТранспорта			= ТекущаяДата();
									ОбъектПисьмо.ДатаОтправления		= ТекущаяДата();
									ОбъектПисьмо.ИдентификаторПисьма	= ПочтовоеСообщение.ИдентификаторСообщения;
									
									ОчиститьПисьмо(ПочтовоеСообщение);
								
									ОбъектПисьмо.ПочтовоеСообщение = Новый ХранилищеЗначения(ПочтовоеСообщение, Новый СжатиеДанных());
									
									Попытка
										ОбъектПисьмо.Записать();
									Исключение
									КонецПопытки;
								КонецЕсли;
								
							Исключение
								
								ТекстОшибок = Символы.ПС + ТекстОшибок + (Строка(УчетнаяЗапись) + ". " + ОписаниеОшибки());
								
								#Если Клиент Тогда
								Если ПоказыватьОкноВыполнения Тогда
									СтрокаТаблицыСостояния.Состояние = Перечисления.СостоянияСобытий.Отменено;
								КонецЕсли;
								#КонецЕсли
								
								Продолжить;
								
							КонецПопытки;
							
						КонецЦикла;
					
					КонецЕсли;
				
				КонецЕсли;
			
			КонецЕсли;
			
			КоличествоНовыхПисем = 0;
			
			// Теперь проверим получение
			Если Получить Тогда
				
				МассивПисемДляУдаления = Новый Массив;
				
				#Если Клиент Тогда
				ФормаПрогрессора.КомментарийЗначения = "Получение сообщений с сервера " + УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + "> ...";
				ФормаПрогрессора.Значение = 0;
				#КонецЕсли
				
				ОшибкаИсключенияТранзакции = "";
				
				Попытка
					МассивЗаголовковПисем = ИнтернетПочта.ПолучитьЗаголовки();
				Исключение
					МассивЗаголовковПисем = Новый Массив;
					ТекстОшибок = Символы.ПС + ТекстОшибок + (Строка(УчетнаяЗапись) + ". " + ОписаниеОшибки());
					
					#Если Клиент Тогда
					Если ПоказыватьОкноВыполнения Тогда
						СтрокаТаблицыСостояния.Состояние = Перечисления.СостоянияСобытий.Отменено;
					КонецЕсли;
					#КонецЕсли

				КонецПопытки;
				
				#Если Клиент Тогда
				ФормаПрогрессора.КомментарийЗначения = "Выборка заголовков сообщений " + УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + "> ...";
				ФормаПрогрессора.МаксимальноеЗначение = МассивЗаголовковПисем.Количество();
				ФормаПрогрессора.Значение = 0;
				#КонецЕсли

				МассивЗаголовковПисем = ПолучитьСписокПисемКПолучению(УчетнаяЗапись, МассивЗаголовковПисем, МассивПисемДляУдаления);
				Если МассивЗаголовковПисем.Количество() > 0 Тогда
				
					МассивПисем = ИнтернетПочта.Выбрать(НЕ УчетнаяЗапись.ОставлятьКопииСообщенийНаСервере, МассивЗаголовковПисем);
					
					#Если Клиент Тогда
					ФормаПрогрессора.КомментарийЗначения = "Регистрация сообщений " + УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + "> ...";
					ФормаПрогрессора.МаксимальноеЗначение = МассивПисем.Количество();
					ФормаПрогрессора.Значение = 0;
					#КонецЕсли
	
					ЭлементМассива = 0;
				
					Для каждого ИнтернетПисьмо Из МассивПисем Цикл
						
						Если НЕ НадоПриниматьПисьмо(УчетнаяЗапись, ИнтернетПисьмо, МассивПисемДляУдаления) Тогда
							Продолжить;
						КонецЕсли;
						
						КоличествоНовыхПисем = КоличествоНовыхПисем + 1;
						
						ИсключениеТранзакции = Ложь;
						НачатьТранзакцию();
						
						#Если Клиент Тогда
						ФормаПрогрессора.Значение = ФормаПрогрессора.Значение + 1;
						#КонецЕсли
						
						Письмо = ПолучитьДокументОбъектИзИнтернетПочтовогоСообщения(ИнтернетПисьмо, УчетнаяЗапись, мРазделительАдресов, ИсключениеТранзакции);
						Если ТипЗнч(Письмо) <> Тип("ДокументОбъект.ЭлектронноеПисьмо") Тогда
							ОтменитьТранзакцию();
							Продолжить;
						КонецЕсли;
						
						ПрименитьФильтрыКПисьму(Письмо, ТекущийПользователь);
						
						Если (Письмо.УчетнаяЗапись.ЗаполнятьПустойПредметДляНовыхПисемИзТемыПисьма
						  ИЛИ Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьПредмет
						  ИЛИ Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьОснованиеНовогоПисьма
						  ИЛИ Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьГруппуПисемНовогоПисьма)
						    И НЕ ПустаяСтрока(Письмо.Тема) Тогда
								НайтиИПроставитьОснованиеПисьма(Письмо);
						КонецЕсли;
						
						Попытка
							Письмо.Записать(РежимЗаписиДокумента.Запись);
						Исключение
							ИсключениеТранзакции = Истина;
							ОшибкаИсключенияТранзакции = ОписаниеОшибки();
							ОтменитьТранзакцию();
							Продолжить;
						КонецПопытки;
						
						// Вложения
						Если ИнтернетПисьмо.Вложения.Количество() > 0 И НЕ ИсключениеТранзакции Тогда
						
							Для каждого Вложение Из ИнтернетПисьмо.Вложения Цикл
								
								Если Вложение.Данные = Неопределено Тогда
									Продолжить;
								КонецЕсли;
								
								НовоеВложение = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
								Если НЕ ПустаяСтрока(Вложение.Идентификатор) Тогда
									Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками;
								КонецЕсли; 
								НовоеВложение.ИДФайлаПочтовогоПисьма = Вложение.Идентификатор;
								Если ТипЗнч(Вложение.Данные) = Тип("ИнтернетПочтовоеСообщение") Тогда
									НовоеВложение.ИмяФайла = ?(ПустаяСтрока(Вложение.Имя), (ИнтернетПисьмо.ИдентификаторСообщения), Вложение.Имя) + ".msg";
								Иначе
									НовоеВложение.ИмяФайла = Вложение.Имя;
								КонецЕсли;
								НовоеВложение.Объект    = Письмо.Ссылка;
								НовоеВложение.Хранилище = Новый ХранилищеЗначения(Вложение.Данные, Новый СжатиеДанных());
								Если ТипЗнч(Письмо.ПредметКонтакта) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
									НовоеВложение.Предмет = Письмо.ПредметКонтакта;
								Иначе
									НовоеВложение.Предмет = Справочники.ФизическиеЛица.ПустаяСсылка();
								КонецЕсли;
								НовоеВложение.Объект				= Письмо.Ссылка;
								НовоеВложение.Хранилище				= Новый ХранилищеЗначения(Вложение.Данные, Новый СжатиеДанных());
								Попытка
									НовоеВложение.Записать();
								Исключение
									ИсключениеТранзакции = Истина;
									ОшибкаИсключенияТранзакции = ОписаниеОшибки();
									Прервать;
								КонецПопытки;
							
							КонецЦикла;

							Если НЕ ИсключениеТранзакции Тогда
							
								ОчиститьПисьмо(ИнтернетПисьмо);
								
								Письмо.ПочтовоеСообщение = Новый ХранилищеЗначения(ИнтернетПисьмо, Новый СжатиеДанных());
								
								Попытка
									Письмо.Записать();
								Исключение
									ИсключениеТранзакции = Истина;
									ОшибкаИсключенияТранзакции = ОписаниеОшибки();
									ОтменитьТранзакцию();
									Прервать;
								КонецПопытки;
								
							Иначе
								
								ОтменитьТранзакцию();
								Прервать;
								
							КонецЕсли;
							
						КонецЕсли;
						
						Если ИсключениеТранзакции Тогда
							ТекстОшибок = Символы.ПС + ТекстОшибок + (Строка(УчетнаяЗапись) + ". " + ОшибкаИсключенияТранзакции);
							
							#Если Клиент Тогда
							Если ПоказыватьОкноВыполнения Тогда
								СтрокаТаблицыСостояния.Состояние = Перечисления.СостоянияСобытий.Отменено;
							КонецЕсли;
							#КонецЕсли
							
							ОтменитьТранзакцию();
							Продолжить;
							
						Иначе
							
							ЗафиксироватьТранзакцию();
							
						КонецЕсли;
						
					КонецЦикла;
				
				КонецЕсли;
				
				Если МассивПисемДляУдаления.Количество() > 0 Тогда
					
					#Если Клиент Тогда
					ФормаПрогрессора.КомментарийЗначения = "Удаление сообщений с сервера " + УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + "> ...";
					#КонецЕсли
				
					Попытка
						ИнтернетПочта.УдалитьСообщения(МассивПисемДляУдаления);
					Исключение
						ТекстОшибок = Символы.ПС + ТекстОшибок + (Строка(УчетнаяЗапись) + ". " + ОшибкаИсключенияТранзакции);
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ИнтернетПочта.Отключиться();
			
			#Если Клиент Тогда
			Если ПоказыватьОкноВыполнения Тогда
				Если СтрокаТаблицыСостояния.Состояние <> Перечисления.СостоянияСобытий.Отменено Тогда
					СтрокаТаблицыСостояния.Состояние = Перечисления.СостоянияСобытий.Завершено;
				КонецЕсли;
			КонецЕсли;
			#КонецЕсли
			
		КонецЦикла;
		
	КонецЕсли;
	
	#Если Клиент Тогда
	Если ПоказыватьОкноВыполнения Тогда
		
		ФормаПрогрессора.Ошибки = СокрЛП(ТекстОшибок);
		
		Если НЕ ФормаПрогрессора.Открыта() Тогда
			ФормаПрогрессора.Открыть();
		КонецЕсли;
		
		Если ПустаяСтрока(ФормаПрогрессора.Ошибки) Тогда
			ФормаПрогрессора.Закрыть();
		Иначе
			ФормаПрогрессора.КомментарийЗначения = "Задачи завершены с ошибками";
			ФормаПрогрессора.ЭлементыФормы.ПанельЗадач.Страницы.Ошибки.Заголовок = "Ошибки(!)";
			ФормаПрогрессора.ЭлементыФормы.ПанельЗадач.ТекущаяСтраница = ФормаПрогрессора.ЭлементыФормы.ПанельЗадач.Страницы.Ошибки;
		КонецЕсли;
		
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

// Функция очищает от данных объект ИнтернетПисьмо, перед его сохранением в документе ЭлектронноеПисьмо
//
// Параметры
//  Письмо - ИнтернетПисьмо
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ОчиститьПисьмо(Письмо)

	Письмо.Вложения.Очистить();
	Письмо.Копии.Очистить();
	Письмо.Получатели.Очистить();
	Письмо.СлепыеКопии.Очистить();

КонецПроцедуры

#Если Клиент Тогда

// Функция обрабатывает пользовательское событие - создание нового электронного письма.
// 
// Параметры:
//  ТекущийПользователь          - СправочникСсылка.Пользователи, текущий пользователь
//  СтруктураНовогоПисьма        - Структура с данными нового письма
//    Ключи структуры:
//     Тело                 - строка, текст письма (прочтой текст, или текст в формате ХТМЛ)
//     Тема                 - Строка
//     ВидТекста            - ПеречислениеСсылка.ВидыТекстовЭлектронныхПисем, вид текста нового письма
//     СписокФайловВложений - СписокЗначений, где значения - структура параметров и знаяений для создания
//                            нового элемента справочника ВложенияЭлектронныхПисем, ключи структуры
//                            соответствуют именам реквизитов справочника ВложенияЭлектронныхПисем
//     УчетнаяЗапись        - СправочникСсылка.УчетнаяЗапись, учетная запись нового письма
//     Кому                 - Список значений, значение - адрес эл.почты, представление - представление получателя
//     Копии                - Список значений, значение - адрес эл.почты, представление - представление получателя
//     СкрытыеКопии         - Список значений, значение - адрес эл.почты, представление - представление получателя
//     Основание            - ДокументСсылка.ЭлектронноеПисьмо, ДокументСсылка.Событие
//     ГруппаУчетнойЗаписи  - элемент справочника ГруппыПисемЭлектроннойПочты, группа писем для нового письма
//     Ответственный        - элемент справочника Пользователи, ответственный для запоолнения в письме
//
//  ПеренестиВложенияИзОснования - Булево, переносить ли аттачи письма из основания (действует для копирования и пересылки)
//  Копирование                  - булево, признак копирования электронного письма
//  ТекущийЭлементХТМЛ           - Булево, устанавливать в качестве активного элемента в открытой форме письма поле ХТМЛ(Текстового) документа
//  Дополнительно                - Строка, "Ответ", "Переадресация", вид действия при создании нового письма
//  ФормаВладелец                - Форма, владелец для открываемой формы нового письма
//  ПодписьПодТекстом            - Булево, устанавливать подпись в письме "после" или "перед" текстом.
//  ОткрыватьПисьмо              - Булево, открывать форму письма или записывать письмо и не открывать форму
//
//  ВозвращаемреЗначение
//   СтруктураПараметров - Структура
//     Ключи структуры:
//     Письмо       - ДокументОбъект.ЭлектронноеПисьмо, новое электронное письмо
//     Форма        - Форма, форма нового электронного письма
//     ПисьмоСсылка - ДокументСсылка.ЭлектронноеПисьмо, новое электронное письмо
//
Функция НаписатьПисьмо(ТекущийПользователь, СтруктураНовогоПисьма = Неопределено, ПеренестиВложенияИзОснования = Ложь, Копирование = Ложь,
					   ТекущийЭлементХТМЛ = Ложь, Дополнительно = Неопределено, ФормаВладелец = Неопределено, ПодписьПодТекстом = Ложь,
					   ОткрыватьПисьмо = Истина) Экспорт

	Перем УчетнаяЗапись;
	Перем Тема;
	Перем Тело;
	Перем ВидТекста;
	Перем СписокФайловВложений;
	Перем ГруппаУчетнойЗаписи;
	Перем Кому;
	Перем Копии;
	Перем СкрытыеКопии;
	Перем Основание;
	Перем Ответственный;
	Перем ПредметКонтакта;
	Перем КодировкаПисьма;
	Перем ЗаявкаКандидата;
	
	Если СтруктураНовогоПисьма = Неопределено Тогда
		СтруктураНовогоПисьма = Новый Структура;
	КонецЕсли;
	
	// Определим учетную запись для создания письма
	
	СписокДоступныхЗаписей = ПроверитьУчетныеЗаписиДляОтправкиПисем(ТекущийПользователь);
	Если СписокДоступныхЗаписей.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураНовогоПисьма.Свойство("УчетнаяЗапись", УчетнаяЗапись);
	Если ЗначениеЗаполнено(УчетнаяЗапись) И СписокДоступныхЗаписей.НайтиПоЗначению(УчетнаяЗапись) = Неопределено Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		УчетнаяЗапись = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяУчетнаяЗапись");
		Если СписокДоступныхЗаписей.НайтиПоЗначению(УчетнаяЗапись) = Неопределено Тогда
			УчетнаяЗапись = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		УчетнаяЗапись = СписокДоступныхЗаписей[0].Значение;
	КонецЕсли;
	
	Письмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
	Письмо.Дата								= ТекущаяДата();
	Письмо.УчетнаяЗапись					= УчетнаяЗапись;
	Письмо.ОтправительИмя					= УчетнаяЗапись.Наименование;
	Письмо.ОтправительАдресЭлектроннойПочты	= УчетнаяЗапись.АдресЭлектроннойПочты;
	Письмо.ОтправительПредставление			= УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + ">";
	
	СтруктураНовогоПисьма.Свойство("СписокФайловВложений", СписокФайловВложений);
	
	ОписаниеТиповПредмета = Новый ОписаниеТипов("Строка");
	СтруктураНовогоПисьма.Свойство("Основание", Основание);
	ЕстьДокументОснование = Ложь;
	Если Основание <> Неопределено Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) Тогда
			ЕстьДокументОснование = Не Основание.Пустая();
		Иначе
			ЕстьДокументОснование = Не Основание.Ссылка.Пустая();
		КонецЕсли;
	КонецЕсли;
	Если ЕстьДокументОснование Тогда
		Письмо.ОснованиеПисьма = ?(Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)), Основание, Основание.Ссылка);
		Если ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо") Тогда
			Письмо.мОбъектОснование = Основание;
		КонецЕсли;
		Если Письмо.УчетнаяЗапись.ИспользоватьКлассификациюПисемПоПредметам Тогда
			СтруктураНовогоПисьма.Свойство("ПредметКонтакта", ПредметКонтакта);
			Если ЗначениеЗаполнено(ПредметКонтакта) И ОписаниеТиповПредмета.СодержитТип(ТипЗнч(ПредметКонтакта)) Тогда
				Письмо.ПредметКонтакта = ПредметКонтакта;
			Иначе
				Если Письмо.УчетнаяЗапись.ИспользоватьКлассификациюПисемПоПредметам И (ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо") ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо")) Тогда
					Письмо.ПредметКонтакта = Основание.ПредметКонтакта;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьДокументОснование
	   И УчетнаяЗапись.ФорматПисьмаДляОтветовИПереадресацийБратьИзИсходного
	   И (ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо") ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо")) Тогда
		ВидТекста = Основание.ВидТекстаПисьма;
	Иначе
		СтруктураНовогоПисьма.Свойство("ВидТекста", ВидТекста);
	КонецЕсли;
	
	Если ЕстьДокументОснование
	   И УчетнаяЗапись.КодировкуПисьмаДляОтветовБратьИзИсходного
	   И (ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо") ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо")) Тогда
		КодировкаПисьма = Основание.КодировкаПисьма;
	Иначе
		СтруктураНовогоПисьма.Свойство("КодировкаПисьма", КодировкаПисьма);
	КонецЕсли;
	
	СтруктураНовогоПисьма.Свойство("ЗаявкаКандидата", ЗаявкаКандидата);
	Если ЗначениеЗаполнено(ЗаявкаКандидата) Тогда
		Письмо.ЗаявкаКандидата = ЗаявкаКандидата;
	ИначеЕсли ЕстьДокументОснование Тогда
		Письмо.ЗаявкаКандидата = Основание.ЗаявкаКандидата;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидТекста) Тогда
		Письмо.ВидТекстаПисьма = УчетнаяЗапись.ФорматТекстаПисьмаПоУмолчанию;
		Если Не ЗначениеЗаполнено(Письмо.ВидТекстаПисьма) Тогда
			Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML;
		КонецЕсли;
	Иначе
		Письмо.ВидТекстаПисьма = ВидТекста;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодировкаПисьма) Тогда
		Письмо.КодировкаПисьма = КодировкаПисьма;
	Иначе
		Письмо.КодировкаПисьма = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "КодировкаПисьмаЭлектроннойПочтыПоУмолчанию");
	КонецЕсли;
	
	Если Дополнительно = "Ответ" Тогда
		Письмо.Ответ         = Истина;
	ИначеЕсли Дополнительно = "Переадресация" Тогда
		Письмо.Переадресация = Истина;
	КонецЕсли;
	
	СтруктураНовогоПисьма.Свойство("Тело", Тело);
	Если ЗначениеЗаполнено(Тело) Тогда
		Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			Письмо.ТекстПисьма = "<HTML><HEAD>
								 |<META http-equiv=Content-Type content=" + """" + "text/html; charset=" + ?(ЗначениеЗаполнено(Письмо.КодировкаПисьма), Письмо.КодировкаПисьма, "utf-8") + """" + ">
								 |<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
								 |<BODY><DIV>" + СтрЗаменить(Тело, Символы.ПС, "<BR>") + "</DIV></BODY></HTML>";
			
		Иначе
			Письмо.ТекстПисьма = Тело;
			
		КонецЕсли;
	Иначе
		Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			Письмо.ТекстПисьма = "<HTML><HEAD>
								 |<META http-equiv=Content-Type content=""text/html; charset=" + ?(ЗначениеЗаполнено(Письмо.КодировкаПисьма), Письмо.КодировкаПисьма, "utf-8") + """" + ">
								 |<META content=""MSHTML 6.00.2900.2912"" name=GENERATOR></HEAD>
								 |<BODY><DIV></DIV></BODY></HTML>";
			
			
		КонецЕсли;
	КонецЕсли;
	
	СтруктураНовогоПисьма.Свойство("Тема", Тема);
	Если ЗначениеЗаполнено(Тема) Тогда
		Письмо.Тема = Тема;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда
			
			Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
				Тело = "<HTML><HEAD>
							  |<META http-equiv=Content-Type content=" + """" + "text/html; charset=" + Письмо.КодировкаПисьма + """" + ">
							  |<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
							  |<BODY>" + СтрЗаменить(Основание.СодержаниеСобытия, Символы.ПС, "<BR>") + "</BODY></HTML>";
			Иначе
				Тело = Основание.СодержаниеСобытия;
			КонецЕсли
			
		Иначе
			
			Тело = Основание.ТекстПисьма;
			
			Если ((Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками)
			   И Основание.ВидТекстаПисьма <> Перечисления.ВидыТекстовЭлектронныхПисем.HTML И Основание.ВидТекстаПисьма <> Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками)
			   ИЛИ ((Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Прочее)
			   И Основание.ВидТекстаПисьма <> Перечисления.ВидыТекстовЭлектронныхПисем.Текст И Основание.ВидТекстаПисьма <> Перечисления.ВидыТекстовЭлектронныхПисем.Прочее) Тогда

				Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
					
					Тело = "<HTML><HEAD>
								  |<META http-equiv=Content-Type content=" + """" + "text/html; charset=" + Письмо.КодировкаПисьма + """" + ">
								  |<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
								  |<BODY>" + СтрЗаменить(Тело, Символы.ПС, "<BR>") + "</BODY></HTML>";
					
				Иначе
					
					Тело = ПреобразоватьТекстИзХТМЛФорматаВПростой(Тело);
					
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
		Письмо.ТекстПисьма = Тело;
		
	КонецЕсли;
	
	СтруктураНовогоПисьма.Свойство("ГруппаУчетнойЗаписи", ГруппаУчетнойЗаписи);
	Если ЗначениеЗаполнено(ГруппаУчетнойЗаписи) И ГруппаУчетнойЗаписи.Владелец = УчетнаяЗапись Тогда
		Письмо.ГруппаУчетнойЗаписи = ГруппаУчетнойЗаписи;
	Иначе
		Письмо.УказатьГруппуПоУмолчанию();
	КонецЕсли;
	
	СтруктураНовогоПисьма.Свойство("Ответственный", Ответственный);
	Если ЗначениеЗаполнено(Ответственный) Тогда
		Письмо.Ответственный = Ответственный;
	Иначе
		Письмо.Ответственный = ТекущийПользователь;
	КонецЕсли;
	
	СтруктураНовогоПисьма.Свойство("Кому", Кому);
	Если ТипЗнч(Кому) = Тип("СписокЗначений") Тогда
		Для каждого ЭлементСписка Из Кому Цикл
			Если ПустаяСтрока(ЭлементСписка.Значение) Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТЧ = Письмо.КомуТЧ.Добавить();
			СтрокаТЧ.АдресЭлектроннойПочты = ЭлементСписка.Значение;
			СтрокаТЧ.Представление         = ЭлементСписка.Представление;
			Если НЕ ПустаяСтрока(Письмо.Кому) Тогда
				Письмо.Кому = Письмо.Кому + ", ";
			КонецЕсли;
			Если ПустаяСтрока(ЭлементСписка.Представление) Тогда
				Письмо.Кому = Письмо.Кому + ЭлементСписка.Значение;
			Иначе
				Письмо.Кому = Письмо.Кому + ЭлементСписка.Представление + " <" + ЭлементСписка.Значение + ">";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	СтруктураНовогоПисьма.Свойство("Копии", Копии);
	Если ТипЗнч(Копии) = Тип("СписокЗначений") Тогда
		Для каждого ЭлементСписка Из Копии Цикл
			Если ПустаяСтрока(ЭлементСписка.Значение) Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТЧ = Письмо.КопииТЧ.Добавить();
			СтрокаТЧ.АдресЭлектроннойПочты = ЭлементСписка.Значение;
			СтрокаТЧ.Представление         = ЭлементСписка.Представление;
			Если НЕ ПустаяСтрока(Письмо.Копии) Тогда
				Письмо.Копии = Письмо.Копии + ", ";
			КонецЕсли;
			Если ПустаяСтрока(ЭлементСписка.Представление) Тогда
				Письмо.Копии = Письмо.Копии + ЭлементСписка.Значение;
			Иначе
				Письмо.Копии = Письмо.Копии + ЭлементСписка.Представление + " <" + ЭлементСписка.Значение + ">";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	СтруктураНовогоПисьма.Свойство("СкрытыеКопии", СкрытыеКопии);
	Если ТипЗнч(СкрытыеКопии) = Тип("СписокЗначений") Тогда
		Для каждого ЭлементСписка Из СкрытыеКопии Цикл
			Если ПустаяСтрока(ЭлементСписка.Значение) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТЧ = Письмо.СкрытыеКопииТЧ.Добавить();
			СтрокаТЧ.АдресЭлектроннойПочты = ЭлементСписка.Значение;
			СтрокаТЧ.Представление         = ЭлементСписка.Представление;
			Если НЕ ПустаяСтрока(Письмо.СкрытыеКопии) Тогда
				Письмо.СкрытыеКопии = Письмо.СкрытыеКопии + ", ";
			КонецЕсли;
			Если ПустаяСтрока(ЭлементСписка.Представление) Тогда
				Письмо.СкрытыеКопии = Письмо.СкрытыеКопии + ЭлементСписка.Значение;
			Иначе
				Письмо.СкрытыеКопии = Письмо.СкрытыеКопии + ЭлементСписка.Представление + " <" + ЭлементСписка.Значение + ">";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ФормаВладелец <> Неопределено Тогда
		ФормаПисьма = Письмо.ПолучитьФорму(, ФормаВладелец);
	Иначе
		ФормаПисьма = Письмо.ПолучитьФорму();
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо") Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ТекСсылка"   , ?(ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо"), Основание, Основание.Ссылка));
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенияЭлектронныхПисем.ИмяФайла КАК ИмяФайла,
		|	ВложенияЭлектронныхПисем.Хранилище КАК Хранилище,
		|	ВложенияЭлектронныхПисем.Наименование КАК Наименование,
		|	ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма КАК ИДФайлаПочтовогоПисьма
		|ИЗ
		|	Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
		|ГДЕ
		|	ВложенияЭлектронныхПисем.Объект = &ТекСсылка
		|	И (НЕ ВложенияЭлектронныхПисем.ПометкаУдаления)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ПустаяСтрока(Выборка.ИДФайлаПочтовогоПисьма) Тогда
					Если ПеренестиВложенияИзОснования Тогда
						СтрокаТЗ = ФормаПисьма.ВложенияПисьмаТЗ.Добавить();
						СтрокаТЗ.ИмяФайла     = Выборка.ИмяФайла;
						СтрокаТЗ.Наименование = Выборка.Наименование;
						СтрокаТЗ.Данные       = Выборка.Хранилище;
					КонецЕсли;
				Иначе
					СтрокаТЗ = ФормаПисьма.ВложенияПисьмаТЗСкрытые.Добавить();
					СтрокаТЗ.ИмяФайла               = Выборка.ИмяФайла;
					СтрокаТЗ.Наименование           = Выборка.Наименование;
					СтрокаТЗ.Данные                 = Выборка.Хранилище;
					СтрокаТЗ.ИДФайлаПочтовогоПисьма = Выборка.ИДФайлаПочтовогоПисьма;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Сформируем текст письма для ответа или переадресации
	Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо") ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо"))
	   И НЕ Копирование Тогда
		
		ТекстПисьма = Письмо.ТекстПисьма;
		
		Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			
			НачалоТела = Найти(ТекстПисьма, "<BODY");
			
			ДатаИсходногоПисьма = Основание.Дата;
			Если (Основание.СтатусПисьма = Перечисления.СтатусыПисем.Полученное ИЛИ Основание.СтатусПисьма = Перечисления.СтатусыПисем.Отправленное) И ЗначениеЗаполнено(Основание.Дата) Тогда
				ДатаИсходногоПисьма = Основание.Дата;
			КонецЕсли;
			
			СтрокаОтправителя = "Отправитель: ";
			Если НЕ ПустаяСтрока(Основание.ОтправительИмя) Тогда
				СтрокаОтправителя = СтрокаОтправителя + СокрЛП(Основание.ОтправительИмя) + " &lt<A href=" + """" + "mailto:" + СокрЛП(СтрЗаменить(Основание.ОтправительИмя, """", "")) + "<" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + ">" + """" + ">" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + "</A>&gt";
			Иначе
				СтрокаОтправителя = СтрокаОтправителя + "&lt<A href=" + """" + "mailto:" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + """" + ">" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + "</A>&gt";
			КонецЕсли;
			
			СтрокаКому = "";
			Для каждого СтрокаТЧ Из Основание.КомуТЧ Цикл
				
				Если НЕ ПустаяСтрока(СтрокаКому) Тогда
					СтрокаКому = СтрокаКому + ", ";
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтрокаТЧ.Представление) Тогда
					СтрокаКому = СтрокаКому + СокрЛП(СтрокаТЧ.Представление) + " &lt<A href=" + """" + "mailto:" + СокрЛП(СтрЗаменить(СтрокаТЧ.Представление, """", "")) + "<" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + ">" + """" + ">" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + "</A>&gt";
				Иначе
					СтрокаКому = СтрокаКому + "&lt<A href=" + """" + "mailto:" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + """" + ">" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + "</A>&gt";
				КонецЕсли;
			
			КонецЦикла;
			
			Если НЕ ПустаяСтрока(СтрокаКому) Тогда
				СтрокаКому = "Получатели: " + СтрокаКому;
			КонецЕсли;
			
			СтрокаКопии = "";
			Для каждого СтрокаТЧ Из Основание.КопииТЧ Цикл
				
				Если НЕ ПустаяСтрока(СтрокаКопии) Тогда
					СтрокаКопии = СтрокаКопии + ", ";
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтрокаТЧ.Представление) Тогда
					СтрокаКопии = СтрокаКопии + СокрЛП(СтрокаТЧ.Представление) + " &lt<A href=" + """" + "mailto:" + СокрЛП(СтрЗаменить(СтрокаТЧ.Представление, """", "")) + "<" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + ">" + """" + ">" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + "</A>&gt";
				Иначе
					СтрокаКопии = СтрокаКопии + "&lt<A href=" + """" + "mailto:" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + """" + ">" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + "</A>&gt";
				КонецЕсли;
			
			КонецЦикла;
			
			Если НЕ ПустаяСтрока(СтрокаКопии) Тогда
				СтрокаКопии = "Копии: " + СтрокаКопии;
			КонецЕсли;
			
			Если НачалоТела > 0 Тогда
				
				// Ищем конец начала тела
				а = НачалоТела;
				КонецНачалаТела = 0;
				Пока 1 = 1 Цикл
					Если Сред(ТекстПисьма, а, 1) = ">" Тогда
						КонецНачалаТела = а;
						Прервать;
					Иначе
						а = а + 1;
						Продолжить;
					КонецЕсли;
				КонецЦикла;
				
				НовыйТекстПисьма = Лев(ТекстПисьма, КонецНачалаТела) + "<DIV><BR></DIV>" + 
								  "<BLOCKQUOTE dir=ltr style=" + """" + "PADDING-LEFT: 15px; MARGIN-LEFT: 5px; BORDER-LEFT: #000000 2px solid; MARGIN-RIGHT: 0px" + """" + ">" + 
								  "<P><A href="+ """" + Строка(?(ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо"), Основание.УникальныйИдентификатор(), Основание.Ссылка.УникальныйИдентификатор())) + """" + ">--- Исходное сообщение --- </A>" + 
								  "<BR>Дата: " + Формат(ДатаИсходногоПисьма, "ДЛФ=DT") +
								  "<BR>" + СтрокаОтправителя;
								  
				Если НЕ ПустаяСтрока(СтрокаКому) Тогда
					НовыйТекстПисьма = НовыйТекстПисьма + "<BR>" + СтрокаКому;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтрокаКопии) Тогда
					НовыйТекстПисьма = НовыйТекстПисьма + "<BR>" + СтрокаКопии;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(Основание.Тема) Тогда
					НовыйТекстПисьма = НовыйТекстПисьма + "<BR>" + "Тема: " + Основание.Тема;
				КонецЕсли;
				
				НовыйТекстПисьма = НовыйТекстПисьма + "</P><P><BR></P>";
				
				КонецТела = Найти(ТекстПисьма, "</BODY");
				Если КонецТела > 0 Тогда
					НовыйТекстПисьма = НовыйТекстПисьма + Сред(ТекстПисьма, (КонецНачалаТела + 1), (КонецТела - КонецНачалаТела - 1)) + "</BLOCKQUOTE>" + Сред(ТекстПисьма, КонецТела);
					Письмо.ТекстПисьма = НовыйТекстПисьма;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			НовыйТекстПисьма = Новый ТекстовыйДокумент;
			
			НовыйТекстПисьма.УстановитьТекст(ТекстПисьма);
			
			НовыйТекстПисьма.ВставитьСтроку(1, "--- Исходное сообщение ---");
			ПоследняяСтрока = 1;
			
			ДатаИсходногоПисьма = Основание.Дата;
			Если (Основание.СтатусПисьма = Перечисления.СтатусыПисем.Полученное ИЛИ Основание.СтатусПисьма = Перечисления.СтатусыПисем.Отправленное) И ЗначениеЗаполнено(Основание.Дата) Тогда
				ДатаИсходногоПисьма = Основание.Дата;
			КонецЕсли;
			НовыйТекстПисьма.ВставитьСтроку(2, "Дата: " + Формат(ДатаИсходногоПисьма, "ДЛФ=DT"));
			ПоследняяСтрока = 2;
			
			СтрокаОтправителя = "Отправитель: ";
			Если НЕ ПустаяСтрока(Основание.ОтправительИмя) Тогда
				СтрокаОтправителя = СтрокаОтправителя + СокрЛП(Основание.ОтправительИмя) + " <" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + ">";
			Иначе
				СтрокаОтправителя = СтрокаОтправителя + "<" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + ">";
			КонецЕсли;
			НовыйТекстПисьма.ВставитьСтроку(3, СтрокаОтправителя);
			ПоследняяСтрока = 3;
			
			СтрокаКому = "";
			Для каждого СтрокаТЧ Из Основание.КомуТЧ Цикл
				
				Если НЕ ПустаяСтрока(СтрокаКому) Тогда
					СтрокаКому = СтрокаКому + ", ";
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтрокаТЧ.Представление) Тогда
					СтрокаКому = СтрокаКому + СокрЛП(СтрокаТЧ.Представление) + " <" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + ">";
				Иначе
					СтрокаКому = СтрокаКому + "<" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + ">";
				КонецЕсли;
			
			КонецЦикла;
			
			Если НЕ ПустаяСтрока(СтрокаКому) Тогда
				НовыйТекстПисьма.ВставитьСтроку(ПоследняяСтрока + 1, "Получатели: " + СтрокаКому);
				ПоследняяСтрока = ПоследняяСтрока + 1;
			КонецЕсли;
			
			СтрокаКопии = "";
			Для каждого СтрокаТЧ Из Основание.КопииТЧ Цикл
				
				Если НЕ ПустаяСтрока(СтрокаКопии) Тогда
					СтрокаКопии = СтрокаКопии + ", ";
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтрокаТЧ.Представление) Тогда
					СтрокаКопии = СтрокаКопии + СокрЛП(СтрокаТЧ.Представление) + " <" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + ">";
				Иначе
					СтрокаКопии = СтрокаКопии + "<" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + ">";
				КонецЕсли; 
			
			КонецЦикла;
			
			Если НЕ ПустаяСтрока(СтрокаКопии) Тогда
				НовыйТекстПисьма.ВставитьСтроку(ПоследняяСтрока + 1, "Копии: " + СтрокаКопии);
				ПоследняяСтрока = ПоследняяСтрока + 1;
			КонецЕсли; 
			
			Если НЕ ПустаяСтрока(Основание.Тема) Тогда
				НовыйТекстПисьма.ВставитьСтроку(ПоследняяСтрока + 1, "Тема: " + Основание.Тема);
				ПоследняяСтрока = ПоследняяСтрока + 1;
			КонецЕсли;
				
			НовыйТекстПисьма.ВставитьСтроку(ПоследняяСтрока + 1, "");
			
			Для а = 1 по НовыйТекстПисьма.КоличествоСтрок() Цикл
				НовыйТекстПисьма.ЗаменитьСтроку(а, ("> " + НовыйТекстПисьма.ПолучитьСтроку(а)));
			КонецЦикла;
			
			НовыйТекстПисьма.ВставитьСтроку(1, "");
			НовыйТекстПисьма.ВставитьСтроку(1, "");
			
			Письмо.ТекстПисьма = НовыйТекстПисьма.ПолучитьТекст();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проставим при необходимости подпись
	Если НЕ Копирование И ((УчетнаяЗапись.ДобавлятьПодписьКИсходящимПисьмам И Дополнительно = Неопределено)
	 ИЛИ ((Дополнительно = "Ответ" ИЛИ Дополнительно = "Переадресация") И УчетнаяЗапись.ДобавлятьПодписьКОтветамИПересылкам = Истина)) Тогда
	 
		Отказ = Ложь;
	
		НовыйКом = Новый COMОбъект("HtmlFile");
		НовыйКом.open("text/html");
		НовыйКом.write(УчетнаяЗапись.ТекстПодписи);
		НовыйКом.close();
		
		Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			
			ТекстПисьма = Письмо.ТекстПисьма;
			
			Если ПустаяСтрока(ТекстПисьма) Тогда
				ТекстПисьма = "<HTML><HEAD>
							  |<META http-equiv=Content-Type content=" + """" + "text/html; charset=" + Письмо.КодировкаПисьма + """" + ">
							  |<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
							  |<BODY><DIV></DIV></BODY></HTML>";
			Иначе
				Если Найти(ТекстПисьма, "<BODY") = 0 тогда
				ТекстПисьма = "<HTML><HEAD>
							  |<META http-equiv=Content-Type content=" + """" + "text/html; charset=" + Письмо.КодировкаПисьма + """" + ">
							  |<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
							  |<BODY>" + СтрЗаменить(ТекстПисьма, Символы.ПС, "<BR>") + "</BODY></HTML>";
				КонецЕсли;
			КонецЕсли;
			
			НачалоТела = Найти(ТекстПисьма, "<BODY");
			КонецНачалаТела = 0;
			а = НачалоТела;
			Пока 1 = 1 Цикл
				Если Сред(ТекстПисьма, а, 1) = ">" Тогда
					КонецНачалаТела = а;
					Прервать;
				Иначе
					а = а + 1;
				КонецЕсли; 
			КонецЦикла;
			
			Если НачалоТела = 0 ИЛИ КонецНачалаТела = 0 Тогда
				Отказ = Истина;
			КонецЕсли;
			
			ТегBODY = НовыйКом.all.Tags("BODY");
			Если ТегBODY.length > 0 Тогда
				ХТМЛПодписи = ТегBODY.item(0).innerHTML;
				Если ПустаяСтрока(ХТМЛПодписи) Тогда
					Отказ = Истина;
				Иначе
					ХТМЛПодписи = СтрЗаменить(ХТМЛПодписи, "<PRE>", "");
					ХТМЛПодписи = СтрЗаменить(ХТМЛПодписи, "</PRE>", "<BR>");
				КонецЕсли;
			Иначе
				Отказ = Истина;
			КонецЕсли; 
			
			Если НЕ Отказ Тогда
				Если ПодписьПодТекстом Тогда
					НачалоКонцаТела = Найти(ТекстПисьма, "</BODY");
					Если НачалоКонцаТела > 0 Тогда
						НовыйТекстПисьма = Лев(ТекстПисьма, НачалоКонцаТела - 1);
						НовыйТекстПисьма  = НовыйТекстПисьма + "<BR>" + ХТМЛПодписи + Сред(ТекстПисьма, НачалоКонцаТела);
						Письмо.ТекстПисьма = НовыйТекстПисьма;
					КонецЕсли;
				Иначе
					НовыйТекстПисьма = Лев(ТекстПисьма, КонецНачалаТела);
					НовыйТекстПисьма  = НовыйТекстПисьма + "<DIV>&nbsp;</DIV>" + ХТМЛПодписи + Сред(ТекстПисьма, (КонецНачалаТела + 1));
					Письмо.ТекстПисьма = НовыйТекстПисьма;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			ТекстПодписи = Новый ТекстовыйДокумент;
			ТекстПодписи.УстановитьТекст(СтрЗаменить(НовыйКом.all.item(0).innerText, Символ(13), ""));
			
			Если ТекстПодписи.КоличествоСтрок() > 0 Тогда
				
				НовыйТекстПисьма = Новый ТекстовыйДокумент;
				НовыйТекстПисьма.УстановитьТекст(Письмо.ТекстПисьма);
				
				Если НовыйТекстПисьма.КоличествоСтрок() > 0 Тогда
					ПерваяСтрока = НовыйТекстПисьма.ПолучитьСтроку(1);
					Если ПустаяСтрока(ПерваяСтрока) Тогда
						НовыйТекстПисьма.УдалитьСтроку(1);
					КонецЕсли;
				КонецЕсли;
				
				Для а = 1 По ТекстПодписи.КоличествоСтрок() Цикл
					Если ПодписьПодТекстом Тогда
						НовыйТекстПисьма.ДобавитьСтроку(ТекстПодписи.ПолучитьСтроку(а));
					Иначе
						НовыйТекстПисьма.ВставитьСтроку(а, ТекстПодписи.ПолучитьСтроку(а));
					КонецЕсли;
				КонецЦикла;
				
				НовыйТекстПисьма.ВставитьСтроку(1, "");
				Письмо.ТекстПисьма = НовыйТекстПисьма.ПолучитьТекст();
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если ОткрыватьПисьмо Тогда
		
		Если ТипЗнч(СписокФайловВложений) = Тип("СписокЗначений") И СписокФайловВложений.Количество() > 0 Тогда
			
			ЗначениеСтруктурыВозврата = Неопределено;
			
			Для каждого ЭлементСписка Из СписокФайловВложений Цикл
				
				НовоеВложение = ФормаПисьма.ВложенияПисьмаТЗ.Добавить();
				
				ЭлементСписка.Значение.Свойство("Хранилище", ЗначениеСтруктурыВозврата);
				Если ЗначениеСтруктурыВозврата = Неопределено Тогда
					Продолжить;
				Иначе
					Если ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("ДвоичныеДанные") Тогда
						НовоеВложение.Данные = Новый ХранилищеЗначения(ЗначениеСтруктурыВозврата, Новый СжатиеДанных);
					ИначеЕсли ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("ХранилищеЗначения") Тогда
						НовоеВложение.Данные = ЗначениеСтруктурыВозврата;
					ИначеЕсли ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("Строка") Тогда
						НовоеВложение.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ЗначениеСтруктурыВозврата), Новый СжатиеДанных);
					Иначе
						Продолжить;
					КонецЕсли;
					ЗначениеСтруктурыВозврата = Неопределено;
				КонецЕсли;
				
				ЭлементСписка.Значение.Свойство("ИмяФайла", ЗначениеСтруктурыВозврата);
				Если ЗначениеСтруктурыВозврата = Неопределено Тогда
					НовоеВложение.ИмяФайла = "";
				Иначе
					НовоеВложение.ИмяФайла = ЗначениеСтруктурыВозврата;
					ЗначениеСтруктурыВозврата = Неопределено;
				КонецЕсли;
				
				ЭлементСписка.Значение.Свойство("Наименование", ЗначениеСтруктурыВозврата);
				Если ЗначениеСтруктурыВозврата = Неопределено Тогда
					НовоеВложение.Наименование = "";
				Иначе
					НовоеВложение.Наименование = ЗначениеСтруктурыВозврата;
					ЗначениеСтруктурыВозврата = Неопределено;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ФормаПисьма.Открыть();
		
		// Установим удобный элемент управления в форме письма - текущим
		Если ТекущийЭлементХТМЛ Тогда
			Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
				ФормаПисьма.ТекущийЭлемент = ФормаПисьма.ЭлементыФормы.ПолеHTMLДокумента;
			Иначе
				ФормаПисьма.ТекущийЭлемент = ФормаПисьма.ЭлементыФормы.ПолеТекстовогоДокумента;
			КонецЕсли;
		Иначе
			ФормаПисьма.ТекущийЭлемент = ФормаПисьма.ЭлементыФормы.Кому;
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура("Письмо, Форма, ПисьмоСсылка", Письмо, ФормаПисьма, Письмо.Ссылка);
	
	Иначе
		
		Попытка
			Письмо.Записать();
		Исключение
			Возврат ОписаниеОшибки();
		КонецПопытки;
			
		Если ТипЗнч(СписокФайловВложений) = Тип("СписокЗначений") И СписокФайловВложений.Количество() > 0 Тогда
			
			ЗначениеСтруктурыВозврата = Неопределено;
			
			Для каждого ЭлементСписка Из СписокФайловВложений Цикл
			
				НовоеВложение = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
				НовоеВложение.Объект = Письмо.Ссылка;
				
				ЭлементСписка.Значение.Свойство("Хранилище", ЗначениеСтруктурыВозврата);
				Если ЗначениеСтруктурыВозврата = Неопределено Тогда
					Продолжить;
				Иначе
					Если ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("ДвоичныеДанные") Тогда
						НовоеВложение.Хранилище = Новый ХранилищеЗначения(ЗначениеСтруктурыВозврата, Новый СжатиеДанных);
					ИначеЕсли ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("ХранилищеЗначения") Тогда
						НовоеВложение.Хранилище = ЗначениеСтруктурыВозврата;
					ИначеЕсли ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("Строка") Тогда
						НовоеВложение.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ЗначениеСтруктурыВозврата), Новый СжатиеДанных);
					Иначе
						Продолжить;
					КонецЕсли;
					ЗначениеСтруктурыВозврата = Неопределено;
				КонецЕсли;
				
				ЭлементСписка.Значение.Свойство("ИмяФайла", ЗначениеСтруктурыВозврата);
				Если ЗначениеСтруктурыВозврата = Неопределено Тогда
					НовоеВложение.ИмяФайла = "";
				Иначе
					НовоеВложение.ИмяФайла = ЗначениеСтруктурыВозврата;
					ЗначениеСтруктурыВозврата = Неопределено;
				КонецЕсли;
				
				ЭлементСписка.Значение.Свойство("Наименование", ЗначениеСтруктурыВозврата);
				Если ЗначениеСтруктурыВозврата = Неопределено Тогда
					НовоеВложение.Наименование = "";
				Иначе
					НовоеВложение.Наименование = ЗначениеСтруктурыВозврата;
					ЗначениеСтруктурыВозврата = Неопределено;
				КонецЕсли;
				
				Попытка
					НовоеВложение.Записать();
				Исключение
					Возврат ОписаниеОшибки();
				КонецПопытки;
			
			КонецЦикла;
			
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура("Письмо, Форма, ПисьмоСсылка", Письмо, ФормаПисьма, Письмо.Ссылка);
	
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции

// Процедура обрабатывает событие пользователя "Ответить на письмо".
// 
// Параметры:
//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
//  Письмо              - ДокументСсылка.ЭлектронноеПисьмо, письма для которого надо создать ответ
//  ФормаВладелец       - Форма, владелец для открываемой формы нового письма
// 
Процедура ОтветитьНаПисьмо(ТекущийПользователь, Письмо, ФормаВладелец = Неопределено) Экспорт
	
	СтруктураПисьма = Новый Структура;
	
	СтруктураПисьма.Вставить("Тема",				("Re: " + Письмо.Тема));
	СтруктураПисьма.Вставить("УчетнаяЗапись",		Письмо.УчетнаяЗапись);
	СтруктураПисьма.Вставить("Основание",			Письмо);
	СтруктураПисьма.Вставить("ПредметКонтакта",		Письмо.ПредметКонтакта);
	СтруктураПисьма.Вставить("ЗаявкаКандидата",		Письмо.ЗаявкаКандидата);
	
	Если Письмо.УчетнаяЗапись.ПомещатьОтветыИПереадресацииВТужеГруппу Тогда
		СтруктураПисьма.Вставить("ГруппаУчетнойЗаписи", Письмо.ГруппаУчетнойЗаписи);
	Иначе
		СтруктураПисьма.Вставить("ГруппаУчетнойЗаписи", Письмо.УчетнаяЗапись.ГруппаИсходящие);
	КонецЕсли;
	
	СписокКому = Новый СписокЗначений;
	СписокКому.Добавить(Письмо.ОтправительАдресЭлектроннойПочты, Письмо.ОтправительИмя);
	СтруктураПисьма.Вставить("Кому", СписокКому);
	
	НаписатьПисьмо(ТекущийПользователь, СтруктураПисьма,,, Истина, "Ответ", ФормаВладелец);
	
КонецПроцедуры

// Процедура обрабатывает событие пользователя "Ответить на письмо всем".
// 
// Параметры:
//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
//  Письмо              - ДокументСсылка.ЭлектронноеПисьмо, письма для которого надо создать ответ
//  ФормаВладелец       - Форма, владелец для открываемой формы нового письма
// 
Процедура ОтветитьВсемНаПисьмо(ТекущийПользователь, Письмо, ФормаВладелец = Неопределено) Экспорт
	
	СтруктураПисьма = Новый Структура;
	
	СтруктураПисьма.Вставить("Тема",				("Re: " + Письмо.Тема));
	СтруктураПисьма.Вставить("УчетнаяЗапись",		Письмо.УчетнаяЗапись);
	СтруктураПисьма.Вставить("Основание",			Письмо);
	СтруктураПисьма.Вставить("ПредметКонтакта",		Письмо.ПредметКонтакта);
	Если Письмо.УчетнаяЗапись.ПомещатьОтветыИПереадресацииВТужеГруппу Тогда
		СтруктураПисьма.Вставить("ГруппаУчетнойЗаписи",	Письмо.ГруппаУчетнойЗаписи);
	Иначе
		СтруктураПисьма.Вставить("ГруппаУчетнойЗаписи",	Письмо.УчетнаяЗапись.ГруппаИсходящие);
	КонецЕсли; 
	
	СписокКому = Новый СписокЗначений;
	СписокКому.Добавить(Письмо.ОтправительАдресЭлектроннойПочты, Письмо.ОтправительИмя);
	Для каждого СтрокаТЧ Из Письмо.КомуТЧ Цикл
		Если СтрокаТЧ.АдресЭлектроннойПочты = Письмо.УчетнаяЗапись.АдресЭлектроннойПочты Тогда
			Продолжить;
		КонецЕсли; 
		СписокКому.Добавить(СтрокаТЧ.АдресЭлектроннойПочты, СтрокаТЧ.Представление);
	КонецЦикла; 
	СтруктураПисьма.Вставить("Кому", СписокКому);
	
	СписокКопии = Новый СписокЗначений;
	Для каждого СтрокаТЧ Из Письмо.КопииТЧ Цикл
		Если СтрокаТЧ.АдресЭлектроннойПочты = Письмо.УчетнаяЗапись.АдресЭлектроннойПочты Тогда
			Продолжить;
		КонецЕсли; 
		СписокКопии.Добавить(СтрокаТЧ.АдресЭлектроннойПочты, СтрокаТЧ.Представление);
	КонецЦикла; 
	СтруктураПисьма.Вставить("Копии", СписокКопии);
	
	НаписатьПисьмо(ТекущийПользователь, СтруктураПисьма,,, Истина, "Ответ", ФормаВладелец);
	
КонецПроцедуры

// Процедура обрабатывает событие пользователя "Переслать письмо" а так же событие копирования писем.
// 
// Параметры:
//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
//  Письмо              - ДокументСсылка.ЭлектронноеПисьмо, письмо для которого надо создать переадресацию или основание для копирования
//  Копирование         - Булево, копирование электронного письма
//  ФормаВладелец       - Форма, владелец для открываемой формы нового письма
// 
Процедура ПереадресоватьПисьмо(ТекущийПользователь, Письмо, Копирование = Ложь, ФормаВладелец = Неопределено) Экспорт
	
	СтруктураПисьма = Новый Структура;
	
	Если Копирование Тогда
		СтруктураПисьма.Вставить("Тема", Письмо.Тема);
		СписокКому = Новый СписокЗначений;
		Для каждого СтрокаТЧ Из Письмо.КомуТЧ Цикл
			СписокКому.Добавить(СтрокаТЧ.АдресЭлектроннойПочты, СтрокаТЧ.Представление);
		КонецЦикла; 
		СтруктураПисьма.Вставить("Кому", СписокКому);
		
		СписокКопии = Новый СписокЗначений;
		Для каждого СтрокаТЧ Из Письмо.КопииТЧ Цикл
			СписокКопии.Добавить(СтрокаТЧ.АдресЭлектроннойПочты, СтрокаТЧ.Представление);
		КонецЦикла; 
		СтруктураПисьма.Вставить("Копии", СписокКопии);
	
		СписокСкрытыеКопии = Новый СписокЗначений;
		Для каждого СтрокаТЧ Из Письмо.СкрытыеКопииТЧ Цикл
			СписокСкрытыеКопии.Добавить(СтрокаТЧ.АдресЭлектроннойПочты, СтрокаТЧ.Представление);
		КонецЦикла; 
		СтруктураПисьма.Вставить("СкрытыеКопии", СписокСкрытыеКопии);
	Иначе
		СтруктураПисьма.Вставить("Тема", ("Fw: " + Письмо.Тема));
	КонецЕсли;
	
	Если Копирование Тогда
		СтруктураПисьма.Вставить("ГруппаУчетнойЗаписи", Письмо.ГруппаУчетнойЗаписи);
	Иначе
		Если Письмо.УчетнаяЗапись.ПомещатьОтветыИПереадресацииВТужеГруппу Тогда
			СтруктураПисьма.Вставить("ГруппаУчетнойЗаписи", Письмо.ГруппаУчетнойЗаписи);
		Иначе
			СтруктураПисьма.Вставить("ГруппаУчетнойЗаписи", Письмо.УчетнаяЗапись.ГруппаИсходящие);
		КонецЕсли; 
	КонецЕсли; 
	СтруктураПисьма.Вставить("УчетнаяЗапись",		Письмо.УчетнаяЗапись);
	СтруктураПисьма.Вставить("Основание",			Письмо);
	СтруктураПисьма.Вставить("ПредметКонтакта",		Письмо.ПредметКонтакта);
	
	НаписатьПисьмо(ТекущийПользователь, СтруктураПисьма, Истина, Копирование, , ?(НЕ Копирование, "Переадресация", Неопределено), ФормаВладелец);
	
КонецПроцедуры

#КонецЕсли

// Процедура определяет для входящих электронных писем, в основном для ответов и переадресаций
// предмет и документ основание по теме письма
//
// Параметры
//	Письмо - ДокументОбъект.ЭлектронноеПисьмо, для которого определяем основание
//
Процедура НайтиИПроставитьОснованиеПисьма(Письмо) Экспорт
	
	ПреобразованнаяТема = ИсключитьПрефиксыТемыПисьма(Письмо.Тема);
	
	Если Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьПредмет
		ИЛИ Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьОснованиеНовогоПисьма
		ИЛИ Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьГруппуПисемНовогоПисьма Тогда
		
		ТаблицаИсходныхДанных = Новый ТаблицаЗначений;
		ТаблицаИсходныхДанных.Колонки.Добавить("АдресЭлектроннойПочты", Новый ОписаниеТипов("Строка"));
		ТаблицаИсходныхДанных.Колонки.Добавить("ПредставлениеОбъекта" , Новый ОписаниеТипов("Строка"));
		
		СтрокаТаблицы = ТаблицаИсходныхДанных.Добавить();
		СтрокаТаблицы.АдресЭлектроннойПочты = Письмо.ОтправительАдресЭлектроннойПочты;
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ПреобразованнаяТема", ("%" + ПреобразованнаяТема));
		Запрос.УстановитьПараметр("Параметр"           , Письмо.ОтправительАдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("УчетнаяЗапись"      , Письмо.УчетнаяЗапись);
		Запрос.УстановитьПараметр("Отправленное"       , Перечисления.СтатусыПисем.Отправленное);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка                     КАК Ссылка,
		|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ПредметКонтакта     КАК ПредметКонтакта,
		|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ГруппаУчетнойЗаписи КАК ГруппаУчетнойЗаписи,
		|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ДатаТранспорта      КАК ДатаТранспортаТаблицы
		|ИЗ
		|	КритерийОтбора.ЭлектронныеПисьмаПоАдресуЭлектроннойПочты(&Параметр) КАК ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица
		|
		|ГДЕ
		|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.Тема ПОДОБНО &ПреобразованнаяТема
		|	И
		|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.УчетнаяЗапись = &УчетнаяЗапись
		|	И
		|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.СтатусПисьма = &Отправленное
		|	И
		|	НЕ ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ПометкаУдаления
		|";
		
		РезультатыПоиска = ПоискВКонтактнойИнформации(ТаблицаИсходныхДанных);
		
		Если РезультатыПоиска.Количество() > 0 Тогда
			
			СписокОбъектов = Новый СписокЗначений;
			Для каждого СтрокаРезультатаПоиска Из РезультатыПоиска Цикл
				Если СписокОбъектов.НайтиПоЗначению(СтрокаРезультатаПоиска.Объект) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СписокОбъектов.Добавить(СтрокаРезультатаПоиска.Объект);
			КонецЦикла;
			
			Если СписокОбъектов.Количество() > 0 Тогда
				
				ЗапросДопИнформации = Новый Запрос;
				ЗапросДопИнформации.УстановитьПараметр("Тип"           , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				ЗапросДопИнформации.УстановитьПараметр("СписокОбъектов", СписокОбъектов);
				ЗапросДопИнформации.Текст = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	КонтактнаяИнформация.Представление
				|ИЗ
				|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
				|ГДЕ
				|	КонтактнаяИнформация.Тип = &Тип
				|	И
				|	КонтактнаяИнформация.Объект В(&СписокОбъектов)
				|";
				
				ВыборкаДопЗапроса = ЗапросДопИнформации.Выполнить().Выбрать();
				
				Счетчик = 0;
				Пока ВыборкаДопЗапроса.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(ВыборкаДопЗапроса.Представление) ИЛИ Врег(ВыборкаДопЗапроса.Представление) = Врег(Письмо.ОтправительАдресЭлектроннойПочты) Тогда
						Продолжить;
					КонецЕсли;
					
					Счетчик = Счетчик + 1;
					Запрос.УстановитьПараметр(("Параметр" + СокрЛП(Строка(Счетчик))), ВыборкаДопЗапроса.Представление);
					Запрос.Текст = Запрос.Текст + "
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка                     КАК Ссылка,
					|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ПредметКонтакта     КАК ПредметКонтакта,
					|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ГруппаУчетнойЗаписи КАК ГруппаУчетнойЗаписи,
					|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ДатаТранспорта      КАК ДатаТранспортаТаблицы
					|ИЗ
					|	КритерийОтбора.ЭлектронныеПисьмаПоАдресуЭлектроннойПочты(&Параметр" + СокрЛП(Строка(Счетчик)) + ") КАК ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица
					|
					|ГДЕ
					|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.Тема ПОДОБНО &ПреобразованнаяТема
					|	И
					|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.УчетнаяЗапись = &УчетнаяЗапись
					|	И
					|	НЕ ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ПометкаУдаления
					|
					|";
					
				КонецЦикла; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	ДатаТранспортаТаблицы УБЫВ
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьПредмет Тогда
				Письмо.ПредметКонтакта   = Выборка.ПредметКонтакта;
			КонецЕсли; 
			Если Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьГруппуПисемНовогоПисьма И Выборка.ГруппаУчетнойЗаписи<>Письмо.УчетнаяЗапись.ГруппаИсходящие Тогда
				Письмо.ГруппаУчетнойЗаписи = Выборка.ГруппаУчетнойЗаписи;
			КонецЕсли; 
			Если Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьОснованиеНовогоПисьма Тогда
				Письмо.ОснованиеПисьма = Выборка.Ссылка;
			КонецЕсли; 
			
		ИначеЕсли Письмо.УчетнаяЗапись.ЗаполнятьПустойПредметДляНовыхПисемИзТемыПисьма Тогда
			
			Письмо.ПредметКонтакта = ПреобразованнаяТема;
			
		КонецЕсли;
		
	ИначеЕсли Письмо.УчетнаяЗапись.ЗаполнятьПустойПредметДляНовыхПисемИзТемыПисьма Тогда
		
		Письмо.ПредметКонтакта = ПреобразованнаяТема;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает количество писем по переданному предмету и группе учетной записи
// 
// Параметры
//  ПредметКонтакта - Предмет писем 
//  ГруппаУчетнойЗаписи - Группа учетной записи писем
// 
Функция КоличествоПисемПоПредмету(ПредметКонтакта,ГруппаУчетнойЗаписи = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПредметКонтакта",ПредметКонтакта);
	Запрос.УстановитьПараметр("ГруппаУчетнойЗаписи",ГруппаУчетнойЗаписи);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(ЭлектронноеПисьмо.Ссылка) КАК Количество
	|ИЗ
	|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
	|ГДЕ
	|	ЭлектронноеПисьмо.ПредметКонтакта = &ПредметКонтакта";
	
	Если ЗначениеЗаполнено(ГруппаУчетнойЗаписи) Тогда
		Запрос.Текст = Запрос.Текст + "
		
		|	И ЭлектронноеПисьмо.ГруппаУчетнойЗаписи = &ГруппаУчетнойЗаписи";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоПисемПоПредмету = Выборка.Количество;
	Иначе
		КоличествоПисемПоПредмету = 0;
	КонецЕсли;
	
	Возврат КоличествоПисемПоПредмету;
	
КонецФункции

#Если Клиент Тогда

// Процедура обрабатывает событие ПриВыводеСтроки в списках электронных писем.
//
Процедура ПриВыводеСтрокиЭлектронногоПисьма(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	Если ОформлениеСтроки.Ячейки.Найти("ЕстьВложения") <> Неопределено Тогда
		ОформлениеСтроки.Ячейки.ЕстьВложения.ОтображатьТекст  = Ложь;
		ОформлениеСтроки.Ячейки.ЕстьВложения.ОтображатьФлажок = Ложь;
		Если ДанныеСтроки = Неопределено Тогда
			ОформлениеСтроки.Ячейки.ЕстьВложения.ОтображатьКартинку = Ложь;
			
		Иначе
			// Покажем наличие вложений
			ОформлениеСтроки.Ячейки.ЕстьВложения.ОтображатьКартинку = Истина;
			ОформлениеСтроки.Ячейки.ЕстьВложения.ИндексКартинки = ?(ДанныеСтроки.ЕстьВложения <> NULL И ДанныеСтроки.ЕстьВложения, 0, 2);
			
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.Значение.Колонки.Найти("СтатусПисьма") <> Неопределено Тогда
		Если ДанныеСтроки.СтатусПисьма = Перечисления.СтатусыПисем.Сохраненное Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		ИначеЕсли ДанныеСтроки.СтатусПисьма = Перечисления.СтатусыПисем.Исходящее Тогда
			ОформлениеСтроки.ЦветФона = WebЦвета.ТусклоРозовый;
		КонецЕсли;
	КонецЕсли;
	
	// Рассмотренность писем
	Если ОформлениеСтроки.Ячейки.Найти("НеРассмотрено") <> Неопределено Тогда
		ОформлениеСтроки.Ячейки.НеРассмотрено.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.НеРассмотрено.ОтображатьТекст    = Ложь;
		ОформлениеСтроки.Ячейки.НеРассмотрено.ОтображатьФлажок   = Ложь;
		Если ДанныеСтроки.НеРассмотрено Тогда
			ОформлениеСтроки.Ячейки.НеРассмотрено.ИндексКартинки = 0;
		Иначе
			ОформлениеСтроки.Ячейки.НеРассмотрено.ИндексКартинки = 1;
		КонецЕсли;
	Иначе
		Если Элемент.Значение.Колонки.Найти("НеРассмотрено") <> Неопределено И ДанныеСтроки.НеРассмотрено <> NULL И ДанныеСтроки.НеРассмотрено И ДанныеСтроки.РассмотретьПосле < ОбщегоНазначенияЗК.ПолучитьРабочуюДату() Тогда
			ОформлениеСтроки.Шрифт = ШрифтыСтиля.ШрифтВажнойНадписи;
		КонецЕсли;
	КонецЕсли;
	
	// Статусы писем
	Если ОформлениеСтроки.Ячейки.Найти("СтатусПисьма") <> Неопределено Тогда
		ОформлениеСтроки.Ячейки.СтатусПисьма.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.СтатусПисьма.ОтображатьТекст    = Ложь;
		ОформлениеСтроки.Ячейки.СтатусПисьма.ОтображатьФлажок   = Ложь;
		Если ДанныеСтроки.СтатусПисьма = Перечисления.СтатусыПисем.Исходящее Тогда
			Если ДанныеСтроки.ПометкаУдаления Тогда
				ОформлениеСтроки.Ячейки.СтатусПисьма.ИндексКартинки = 7;
			Иначе
				ОформлениеСтроки.Ячейки.СтатусПисьма.ИндексКартинки = 3;
			КонецЕсли;
		ИначеЕсли ДанныеСтроки.СтатусПисьма = Перечисления.СтатусыПисем.Отправленное Тогда
			Если ДанныеСтроки.ПометкаУдаления Тогда
				ОформлениеСтроки.Ячейки.СтатусПисьма.ИндексКартинки = 6;
			Иначе
				ОформлениеСтроки.Ячейки.СтатусПисьма.ИндексКартинки = 2;
			КонецЕсли;
		ИначеЕсли ДанныеСтроки.СтатусПисьма = Перечисления.СтатусыПисем.Полученное Тогда
			Если ДанныеСтроки.ПометкаУдаления Тогда
				ОформлениеСтроки.Ячейки.СтатусПисьма.ИндексКартинки = 5;
			Иначе
				ОформлениеСтроки.Ячейки.СтатусПисьма.ИндексКартинки = 1;
			КонецЕсли;
		ИначеЕсли ДанныеСтроки.СтатусПисьма = Перечисления.СтатусыПисем.Сохраненное Тогда
			Если ДанныеСтроки.ПометкаУдаления Тогда
				ОформлениеСтроки.Ячейки.СтатусПисьма.ИндексКартинки = 4;
			Иначе
				ОформлениеСтроки.Ячейки.СтатусПисьма.ИндексКартинки = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Наличие потомков писем
	Если ОформлениеСтроки.Ячейки.Найти("СостояниеПотомкаПисьма") <> Неопределено Тогда
		ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ОтображатьТекст    = Ложь;
		ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ОтображатьФлажок   = Ложь;
		Если Не ЗначениеЗаполнено(ДанныеСтроки.СостояниеПотомкаПисьма) Тогда
			ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ИндексКартинки = 0;
		ИначеЕсли ДанныеСтроки.СостояниеПотомкаПисьма = Перечисления.СостоянияПотомковЭлектронныхПисем.ОтветСохранен Тогда
			ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ИндексКартинки = 4;
		ИначеЕсли ДанныеСтроки.СостояниеПотомкаПисьма = Перечисления.СостоянияПотомковЭлектронныхПисем.ОтветОтправлен Тогда
			ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ИндексКартинки = 3;
		ИначеЕсли ДанныеСтроки.СостояниеПотомкаПисьма = Перечисления.СостоянияПотомковЭлектронныхПисем.ПереадресацияСохранена Тогда
			ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ИндексКартинки = 2;
		ИначеЕсли ДанныеСтроки.СостояниеПотомкаПисьма = Перечисления.СостоянияПотомковЭлектронныхПисем.ПереадресацияОтправлена Тогда
			ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ИндексКартинки = 1;
		КонецЕсли;
	КонецЕсли;
	

	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТЕКСТАМИ ЭЛЕКТРОННЫХ ПИСЕМ И ХТМЛ ТЕКСТАМИ
#Если Клиент Тогда
	
Функция ОткрытьФайлДляРедактированияВнешнимХТМЛРедактором(ИмяФайла) Экспорт

	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() ИЛИ Файл.ЭтоКаталог() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка открытия файла. Файл не найден на диске.");
		Возврат Ложь;
	КонецЕсли;
	
	ИмяПриложения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь,"КоманднаяСтрокаДляЗапускаВнешнегоХТМЛРедактора");
	
	Если Не ЗначениеЗаполнено(ИмяПриложения) ИЛИ ТипЗнч(ИмяПриложения) <> Тип("Строка") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("У пользователя не указана командная строка для запуска внешнего HTML редактора текстов.",, "Редактирование невозможно.");
		Возврат Ложь;
	КонецЕсли;
	
	ИмяПриложения = Врег(ИмяПриложения);
	Если Найти(ИмяПриложения, "[FILENAME]") = 0 ИЛИ СтрЧислоВхождений(ИмяПриложения, "[FILENAME]") > 1 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В настройках пользователя некорректно задана командная строка для запуска внешнего HTML редактора текстов.
										  |Необходимо один раз указать место для подстановки имени файла в виде шаблона [FileName].",, "Редактирование невозможно.");
		Возврат Ложь;
	КонецЕсли;
	
	ИмяПриложения = СтрЗаменить(ИмяПриложения, "[FILENAME]", """" + ИмяФайла + """");
	
	ПолноеИмяBatФайла = КаталогВременныхФайлов() + "EditHTML.bat";
	ТекстBatФайла = Новый ТекстовыйДокумент;
	ТекстBatФайла.УстановитьТекст("START" + " """ + """ " + ИмяПриложения);
	ТекстBatФайла.Записать(ПолноеИмяBatФайла, КодировкаТекста.OEM);
	
	Попытка
		ЗапуститьПриложение(ПолноеИмяBatФайла);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Невозможно запустить внешнее приложение.");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецЕсли

Процедура НайтиИДобавитьПрефиксВТеги(Структура, ИмяТега)

	а = 0;
	НайденоОтступов = 0;
	Пока а < Структура.length Цикл
		Если Структура.item(а).nodeName = ИмяТега Тогда
			НайденоОтступов = НайденоОтступов + 1;
			НайтиИДобавитьПрефиксВТеги(Структура.item(а).all, ИмяТега);
			ТекстДляЗамены = Структура.item(а).innerText;
			Структура.item(а).innerText = "> " + СтрЗаменить(ТекстДляЗамены, Символы.ПС, (Символы.ПС + "> "));
		КонецЕсли; 
		а = а + 1;
	КонецЦикла; 
	
КонецПроцедуры

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПреобразоватьТекстИзХТМЛФорматаВПростой(ТекстВФорматеХТМЛ) Экспорт

	НовыйHTMLДокумент = Новый COMОбъект("HtmlFile");
	НовыйHTMLДокумент.open("text/html");
	НовыйHTMLДокумент.write(ТекстВФорматеХТМЛ);
	НовыйHTMLДокумент.close();
	
	НайтиИДобавитьПрефиксВТеги(НовыйHTMLДокумент.all, "BLOCKQUOTE");
	
	Возврат СтрЗаменить(НовыйHTMLДокумент.all.item(0).innerText, Символ(13), "");

КонецФункции

#Если Клиент Тогда

// Процедура обрабатывает событие OnClick элемента управления ПолеHTMLДокумента
// и в некоторых случаях подменяет стандартные действия
//
// Параметры
//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь системы
//  Элемент - ЭлементУправления ПолеHTMLДокумента
//  pEvtObj - COMОбъект
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты, с которой при необходимости будет отправлено письмо
//  ГруппаУчетнойЗаписи - группа учетной записи, в которую помещать письмо
//  ФормаВладелец - форма, владелец для формы нового письма
//
// Возвращаемое значение
//  НЕТ
//
Процедура ОбработкаСобытияOnClickПоляHTML(ТекущийПользователь, Элемент, pEvtObj, УчетнаяЗапись = Неопределено, ГруппаУчетнойЗаписи = Неопределено, ФормаВладелец = Неопределено, ЭлектронноеПисьмо = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Узел = pEvtObj.srcElement;
	
	href = "";
	
	Пока 1 = 1 Цикл
		
		Попытка
			ИмяЦели = Узел.tagName
		Исключение
			Прервать;
		КонецПопытки;
		
		Если ИмяЦели = "A" Тогда
			Попытка
				href = Узел.href;
			Исключение
			КонецПопытки;
			Прервать;
		КонецЕсли; 
		
		Узел = Узел.parentElement;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(href) Тогда
	
		Если (ТипЗнч(ЭлектронноеПисьмо) = Тип("ДокументСсылка.ЭлектронноеПисьмо") ИЛИ ТипЗнч(ЭлектронноеПисьмо) = Тип("ДокументОбъект.ЭлектронноеПисьмо"))
		   И СтрЧислоВхождений(href, "ИмяФайлаРедактированияХТМЛТекста") > 0 
		   И ЗначениеЗаполнено(ЭлектронноеПисьмо) Тогда
		
			Если ИмяКомпьютера() <> ЭлектронноеПисьмо.ИмяКомпьютераРедактированияХТМЛТекста Тогда
				Сообщить("Файл редактируется на копмьютере""" + ЭлектронноеПисьмо.ИмяКомпьютераРедактированияХТМЛТекста + """" + ". Редактирование на текущем комьютере невозможно.");
			Иначе
				ОткрытьФайлДляРедактированияВнешнимХТМЛРедактором(ЭлектронноеПисьмо.ИмяФайлаРедактированияХТМЛТекста);
			КонецЕсли; 

		Иначе
			
			Если СтрЧислоВхождений(НРег(href), "mailto:") = 0 Тогда
				
				Если СтрЧислоВхождений(НРег(href), "about:blank") > 0 Тогда
					
					НайденаСсылка = Истина;
					
					Копияhref = СтрЗаменить(href, "about:blank", "");
					
					Попытка
						UUID = Новый УникальныйИдентификатор(Копияhref);
						Для каждого Документ Из Метаданные.Документы Цикл
							Ссылка = Документы[Документ.Имя].ПолучитьСсылку(UUID);
							Если Ссылка.ПолучитьОбъект() <> Неопределено Тогда
								Прервать;
							Иначе
								Ссылка = Неопределено;
							КонецЕсли; 
						КонецЦикла; 
					Исключение
						НайденаСсылка = Ложь;
					КонецПопытки;
					
					Если Не ЗначениеЗаполнено(Ссылка) ИЛИ НЕ НайденаСсылка Тогда
						Если Найти(href, "www") = 0 И Найти(href, "http") = 0 Тогда
							СтандартнаяОбработка = Истина;
						Иначе
							Попытка
								ЗапуститьПриложение(СокрЛП(href));
							Исключение
								ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
							КонецПопытки;
						КонецЕсли; 
					Иначе
						Ссылка.ПолучитьФорму().Открыть();
					КонецЕсли; 
					
				Иначе
					
					Попытка
						ЗапуститьПриложение(СокрЛП(href));
					Исключение
						ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
					КонецПопытки;
					
				КонецЕсли;
				
			Иначе
				
				ТемаПисьма      = "";
				ТелоПисьма      = "";
				ИмяПолучателя   = "";
				АдресПолучателя = "";
				
				href = СокрЛП(СтрЗаменить(href, "mailto:", ""));
				href = СокрЛП(СтрЗаменить(href, "%20", " "));
				
				// Есть ли поле тема и тело письма
				Если СтрЧислоВхождений(НРег(href), "?subject=") > 0 Тогда
					НачалоТемы = Найти(НРег(href), "?subject=");
					Если СтрЧислоВхождений(НРег(href), "&body=") > 0 Тогда
						НачалоТела = Найти(НРег(href), "&body=");
						ТемаПисьма = Сред(href, (НачалоТемы + 9), (НачалоТела - НачалоТемы - 9));
						ТелоПисьма = Сред(href, (НачалоТела + 6));
					Иначе
						ТемаПисьма = Сред(href, (НачалоТемы + 9));
					КонецЕсли;
					href = СтрЗаменить(href, Сред(href, НачалоТемы), "");
				КонецЕсли;
				
				// Может есть имя получателя
				Если (Найти(href, "<") > 0 ИЛИ Найти(href, "[") > 0) И (Найти(href, ">") > 0 ИЛИ Найти(href, "]") > 0) Тогда
					ИмяПолучателя   = Сред(href, 1, (Макс(Найти(href, "<"), Найти(href, "[")) - 1));
					АдресПолучателя = Сред(href, (Макс(Найти(href, "<"), Найти(href, "[")) + 1), (Макс(Найти(href, ">"), Найти(href, "]")) - Макс(Найти(href, "<"), Найти(href, "[")) - 1));
				Иначе
					АдресПолучателя = СокрЛП(href);
				КонецЕсли;
				
				Если ПустаяСтрока(АдресПолучателя) Тогда
					Возврат;
				КонецЕсли; 
				
				СтруктураНовогоПисьма = Новый Структура;
				
				Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
					СтруктураНовогоПисьма.Вставить("УчетнаяЗапись", УчетнаяЗапись);
					Если НЕ УчетнаяЗапись.ПомещатьОтветыИПереадресацииВТужеГруппу Тогда
						СтруктураНовогоПисьма.Вставить("ГруппаУчетнойЗаписи", УчетнаяЗапись.ГруппаИсходящие);
					Иначе
						Если ЗначениеЗаполнено(ГруппаУчетнойЗаписи) И ГруппаУчетнойЗаписи.Владелец = УчетнаяЗапись Тогда
							СтруктураНовогоПисьма.Вставить("ГруппаУчетнойЗаписи", ГруппаУчетнойЗаписи);
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли;
				СтруктураНовогоПисьма.Вставить("Тело", ТелоПисьма);
				СтруктураНовогоПисьма.Вставить("Тема", ТемаПисьма);
				
				СписокПолучателей = Новый СписокЗначений;
				СписокПолучателей.Добавить(АдресПолучателя, ИмяПолучателя);
				СтруктураНовогоПисьма.Вставить("Кому", СписокПолучателей);
				
				НаписатьПисьмо(ТекущийПользователь, СтруктураНовогоПисьма,,, Истина,, ФормаВладелец);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если НЕ СтандартнаяОбработка Тогда
			pEvtObj.returnValue  = Ложь;
		КонецЕсли; 

	КонецЕсли; 
	
КонецПроцедуры

// Процедура обрабатывает событие пользователя перехода по ссылке
// из поля текстового документа
//
// Параметры
//  ВыделенныйТекст - текст ссылки для перехода
//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
//  ФормаВладелец - Форма, владелец для возможно новой открытой формы письма
//
Процедура ПерейтиПоСсылкеИзХТМЛПоля(Знач ВыделенныйТекст, ТекущийПользователь, ФормаВладелец, УчетнаяЗапись) Экспорт

	Если ПустаяСтрока(ВыделенныйТекст) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрЧислоВхождений(ВыделенныйТекст, "@") = 1 И СтрЧислоВхождений(ВыделенныйТекст, "http://") = 0 Тогда
		
		СтруктураНовогоПисьма = Новый Структура;
		
		Если Найти(ВыделенныйТекст, "mailto:") > 0 Тогда
			ВыделенныйТекст = СтрЗаменить(ВыделенныйТекст, "mailto:", "");
		КонецЕсли; 
		
		СписокПолучателей = Новый СписокЗначений;
		СписокПолучателей.Добавить(СокрЛП(ВыделенныйТекст), СокрЛП(ВыделенныйТекст));
		СтруктураНовогоПисьма.Вставить("Кому", СписокПолучателей);
		Если УчетнаяЗапись <> Неопределено Тогда
			СтруктураНовогоПисьма.Вставить("УчетнаяЗапись", УчетнаяЗапись);
		КонецЕсли; 
		
		НаписатьПисьмо(ТекущийПользователь, СтруктураНовогоПисьма,,, Истина,, ФормаВладелец);
		
	Иначе
		
		Попытка
			ЗапуститьПриложение(СокрЛП(ВыделенныйТекст));
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли; 

КонецПроцедуры

#КонецЕсли

// Функция заменяет в ХТМЛ тексте ссылку на файл с картинкой на диске на некий УникальныйИдентификатор
// по которому потом в Хранилище доп.информации ищутся необходимые картинки, сохраняются на диске
// и ссылки на них подставляют в ХТМЛ текст вместо уникальных идентификаторов.
//
// Параметры
//  ДокументCOMОбъект - COM Объект, ХТМЛ
//  Письмо - ДокументСсылка.ЭлектронноеПисьмо
//  СоответствиеПисемИТекстов - Соответствие, соответствие уже преобразованных в текущей сессии текстов писем
//
// Возвращаемое значение:
//   Структура, Преобразованный ХТМЛ текст, таблица вложений
//
Функция ПропарситьHTMLТекстКартинкаВ_ИД(ДокументCOMОбъект, Письмо = Неопределено, СоответствиеПисемИТекстов) Экспорт

	Если ЗначениеЗаполнено(Письмо) Тогда
		
		НайденноеСоответствие = СоответствиеПисемИТекстов.Получить(Письмо);
		
		// Найдем старые картинки от ХТМЛ
	
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		Запрос.УстановитьПараметр("Письмо", Письмо);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенияЭлектронныхПисем.Ссылка                 КАК Ссылка,
		|	ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма КАК ИДФайлаПочтовогоПисьма,
		|	ВложенияЭлектронныхПисем.ИмяФайла               КАК ИмяФайла
		|	
		|ИЗ
		|	Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
		|
		|ГДЕ
		|	ВложенияЭлектронныхПисем.ПометкаУдаления = ЛОЖЬ
		|	И
		|	ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма <> &ПустаяСтрока
		|	И
		|	ВложенияЭлектронныхПисем.Объект = &Письмо
		|";
		
		ТаблицаСуществующихФайлов = Запрос.Выполнить().Выгрузить();
		ТаблицаСуществующихФайлов.Индексы.Добавить("ИДФайлаПочтовогоПисьма");
	
	КонецЕсли; 
	
	ТаблицаСоответствий = Новый ТаблицаЗначений;
	ТаблицаСоответствий.Колонки.Добавить("ИД"          , Новый ОписаниеТипов("Строка"));
	ТаблицаСоответствий.Колонки.Добавить("Файл"        , Новый ОписаниеТипов("Файл"));
	ТаблицаСоответствий.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	
	ПолученнаяСтрокаТекста = "";
	
	ТегиКартинок = ДокументCOMОбъект.all.tags("img");
	Для а = 0 По ТегиКартинок.length - 1 Цикл
		
		ИсточникКартинки = ТегиКартинок.item(а).src;
		Если Найти(ИсточникКартинки, "file:///") = 1 Тогда
			ИсточникКартинки = Сред(ИсточникКартинки, 9);
		ИначеЕсли Найти(ИсточникКартинки, "file:") = 1 Тогда
			ИсточникКартинки = Сред(ИсточникКартинки, 6);
		КонецЕсли;
		ИсточникКартинки = СтрЗаменить(ИсточникКартинки, "%20", " ");
		
		Файл = Новый Файл(ИсточникКартинки);
		Если НЕ Файл.Существует() Тогда
			Продолжить;
		КонецЕсли; 
		
		ИмяФайлаБезПути = Строка(ТегиКартинок.item(а).nameProp);
		ИД = "";
		Если НЕ ПустаяСтрока(ИмяФайлаБезПути) И ТипЗнч(ТаблицаСуществующихФайлов) = Тип("ТаблицаЗначений") Тогда
			Если СтрЧислоВхождений(ИмяФайлаБезПути, ".") = 1 Тогда
				ИмяФайлаБезПути = Лев(ИмяФайлаБезПути, (Найти(ИмяФайлаБезПути, ".") - 1));
				СтрокаТаблицы = ТаблицаСуществующихФайлов.Найти(ИмяФайлаБезПути, "ИДФайлаПочтовогоПисьма");
				Если СтрокаТаблицы <> Неопределено Тогда
					ИД = СтрокаТаблицы.ИДФайлаПочтовогоПисьма;
					ТаблицаСуществующихФайлов.Удалить(СтрокаТаблицы);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
		Если ПустаяСтрока(ИД) Тогда
			ИД = Строка(Новый УникальныйИдентификатор);
			НоваяСтрокаТаблицы = ТаблицаСоответствий.Добавить();
			НоваяСтрокаТаблицы.ИД   = ИД;
			НоваяСтрокаТаблицы.Файл = Файл;
			Если ТегиКартинок.item(а).alt <> "null" Тогда
				НоваяСтрокаТаблицы.Наименование = ТегиКартинок.item(а).alt;
			КонецЕсли; 
		КонецЕсли; 
		
		ТегиКартинок.item(а).src = ИД;
		
	КонецЦикла;
	
	// Удалим ненужные картинки
	Если ТипЗнч(ТаблицаСуществующихФайлов) = Тип("ТаблицаЗначений") И ТаблицаСуществующихФайлов.Количество() > 0 Тогда
		Если НайденноеСоответствие <> Неопределено Тогда
			СоответствиеПисемИТекстов.Удалить(Письмо);
		КонецЕсли; 
		Для каждого СтрокаТаблицы Из ТаблицаСуществующихФайлов Цикл
			Попытка
				СтрокаТаблицы.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
			КонецПопытки;
		КонецЦикла; 
	КонецЕсли; 
	
	СтруктураВозврата = Новый Структура("ТекстПисьма, ТаблицаСоответствий", ДокументCOMОбъект.all.tags("html").item(0).outerHTML, ТаблицаСоответствий);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция заменяет в ХТМЛ тексте уникальные идентификаторы на ссылки на картинки на диске,
// и при необходимости сохраняет файлы из аттачей письма на диск
//
// Параметры
//  СоответствиеТекстовЭлектронныхПисем - Соответствие, письма и ХТМЛ тексты, которые уже были преобразованы в текущем сеансе
//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
//  Письмо - ДокументСсылка.ЭлектронноеПисьмо или таблица значений с аттачами письма
//  ТекстПисьма - Строка, текст для преобразования
//
// Возвращаемое значение:
//   Строка, преобразованный текст
//
Функция ПропарситьHTMLИДВ_ТекстКартинки(СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, Письмо, ТекстПисьма) Экспорт

	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
		
		ВременноеЗначение = СоответствиеТекстовЭлектронныхПисем.Получить(Письмо);
		Если ВременноеЗначение <> Неопределено Тогда
			ТекстПисьма = ВременноеЗначение;
			Возврат ТекстПисьма;
		КонецЕсли;
		
		Если Письмо.ВидТекстаПисьма <> Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			ТекстПисьма = Письмо.ТекстПисьма;
			СоответствиеТекстовЭлектронныхПисем.Вставить(Письмо, ТекстПисьма);
			Возврат ТекстПисьма;
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		Запрос.УстановитьПараметр("Письмо", Письмо);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенияЭлектронныхПисем.Хранилище              КАК Данные,
		|	ВложенияЭлектронныхПисем.ИмяФайла               КАК ИмяФайла,
		|	ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма КАК ИДФайлаПочтовогоПисьма
		|ИЗ
		|	Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
		|
		|ГДЕ
		|	ВложенияЭлектронныхПисем.ПометкаУдаления = ЛОЖЬ
		|	И
		|	ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма <> &ПустаяСтрока
		|	И
		|	ВложенияЭлектронныхПисем.Объект = &Письмо
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат ТекстПисьма;
		КонецЕсли;
		
		ТаблицаДанных = РезультатЗапроса.Выгрузить();
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("ТаблицаЗначений") Тогда
		ТаблицаДанных = Письмо.Скопировать();
	Иначе
		Возврат ТекстПисьма;
	КонецЕсли; 
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		ПутьКФайлу = ПолучитьИмяВременногоФайла();
	
		Попытка
			СтрокаТаблицы.Данные.Получить().Записать(ПутьКФайлу);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, СтрокаТаблицы.ИДФайлаПочтовогоПисьма, ПутьКФайлу);
	
	КонецЦикла;
	
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
		СоответствиеТекстовЭлектронныхПисем.Вставить(Письмо, ТекстПисьма);
	КонецЕсли; 
	
	Возврат ТекстПисьма;

КонецФункции // ПропарситьHTMLИДВ_ТекстКартинки()

// Функция ищет вхождение в переданную строку значений из списка значений
//
// Параметры
//  Строка - исходная строка для поиска
//  ПодстрокиПоиска - список значений с коллекцией подстрок для поиска
//  СтрокаПоиска - элемент, в который возвращается найденное значение строки подпоиска
//
// Возвращаемое значение:
//  Наименьшая позиция найденного значения
//
Функция ПоискПервойПодстроки(Строка,ПодстрокиПоиска,СтрокаПоиска)
	
	Результат = 0;
	
	Для каждого Подстрока из ПодстрокиПоиска Цикл
		Нашли = Найти(Строка,Подстрока.Значение);
		Если Нашли > 0 Тогда
			Если Результат=0 ИЛИ Нашли < Результат Тогда
				Результат = Нашли;
				СтрокаПоиска = Подстрока.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СократитьТекстПисьма(ТекстПисьма,СократитьДоКоличестваСтрок=3) Экспорт
	
	Текст = ТекстПисьма;
	
	// сократим пробелы
	Пока Найти(Текст,"  ")>0 Цикл
		Текст = СтрЗаменить(Текст,"  "," ");
	КонецЦикла;
	
	// уберем пустые строчки и ограничем количество строк
 	ИсходныйТекст = Текст;
	Текст = "";
	ОбработаноСтрок = 0;
	Для а=1 по СтрЧислоСтрок(ИсходныйТекст) Цикл

		ТекущаяСтрока = СокрЛП(СтрПолучитьСтроку(ИсходныйТекст,а));
		Если ТекущаяСтрока <> "" Тогда
			Текст = Текст + ?(Не ЗначениеЗаполнено(Текст),"",Символы.ПС) + ТекущаяСтрока;
			ОбработаноСтрок = ОбработаноСтрок + 1;
		КонецЕсли;
		
		Если ОбработаноСтрок = СократитьДоКоличестваСтрок Тогда
			Если а < СтрЧислоСтрок(ИсходныйТекст) Тогда
				Текст = Текст + " ...";
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

// Функция возвращает по переданному тексту строку
// в формате HTML с выделенными ссылками на ресурсы www
//
// Параметры
//  ТекстПисьма - текстовая строка
//
// Возвращаемое значение:
//  Текст в формате HTML
//
Функция ВернутьТекстПисьмаВФорматеHTML(ТекстПисьма) Экспорт
	Перем СтрокаПоиска;
	
	Текст = ТекстПисьма;
	ТекстПоиска = Текст;
	
	СмещениеВТексте = 0;
	
	ПодстрокиПоиска = Новый СписокЗначений;
	ПодстрокиПоиска.Добавить("http://");
	ПодстрокиПоиска.Добавить("www.");
	ПодстрокиПоиска.Добавить("mailto:");


	ПозицияПризнакаСсылки = ПоискПервойПодстроки(ТекстПоиска,ПодстрокиПоиска,СтрокаПоиска);

	// пробежимся по всем найденным ссылкам
	Пока ПозицияПризнакаСсылки>0 Цикл
		
		НачалоСсылки = ПозицияПризнакаСсылки;
		
		// найдем последний символ ссылки
		КонецСсылки = НачалоСсылки+СтрДлина(СтрокаПоиска)-1;
		Для а=КонецСсылки+1 по СтрДлина(ТекстПоиска) Цикл
			ТекСимвол = Сред(ТекстПоиска,а,1);
			Если КодСимвола(ТекСимвол) < 33 ИЛИ КодСимвола(ТекСимвол)>127 ИЛИ КодСимвола(ТекСимвол)=91 ИЛИ КодСимвола(ТекСимвол)=93 Тогда
				Прервать;
			КонецЕсли;
			КонецСсылки = а;
		КонецЦикла;
		
		Если КонецСсылки > НачалоСсылки+СтрДлина(СтрокаПоиска)-1 Тогда
			
			ТекстСсылки   = Сред(ТекстПоиска,НачалоСсылки,КонецСсылки-НачалоСсылки+1);
			ТекстСсылкиHTML = "<a href="""+?(СтрокаПоиска="www.","http://","")+ТекстСсылки+""">"+ТекстСсылки+"</a>";
			
			ТекстДоСсылки = Лев(Текст,НачалоСсылки+СмещениеВТексте-1);
			ТекстПослеСсылки = Прав(Текст,СтрДлина(Текст)-(КонецСсылки+СмещениеВТексте));
			
			Текст = ТекстДоСсылки + ТекстСсылкиHTML + ТекстПослеСсылки;
			
			СмещениеВТексте = СмещениеВТексте + КонецСсылки + (СтрДлина(ТекстСсылкиHTML)-СтрДлина(ТекстСсылки));

		Иначе
			
			СмещениеВТексте = СмещениеВТексте + КонецСсылки;
			
		КонецЕсли;
		
		ТекстПоиска = Прав(ТекстПоиска,СтрДлина(ТекстПоиска)-КонецСсылки);
		
		ПозицияПризнакаСсылки = ПоискПервойПодстроки(ТекстПоиска,ПодстрокиПоиска,СтрокаПоиска);
		
	КонецЦикла;
	
	Текст = СтрЗаменить(Текст, Символы.ПС, "<BR>");
	
	ТекстВформатеHTML = "<HTML><HEAD>
	|<META http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8" + """" + ">
	|<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
	|<BODY scroll=""auto"">" + Текст + "</BODY></HTML>";
	
	Возврат ТекстВформатеHTML;
	
КонецФункции

// Функция проверяет переданный символ на вхождение в границы латинских букв
// и в список разрешенных спец. символах
Функция СимволНеСоответствуетАдресу(Символ,РазрешенныеСпецСимволы)
	
	Код = КодСимвола(Символ);
	Если Код > 122 Тогда
		Возврат Истина;
	ИначеЕсли Код < 97 И НЕ (Код > 47 И Код < 58)  Тогда
		Если Найти(РазрешенныеСпецСимволы,Символ) = 0 Тогда
			Возврат Истина
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция возвращает список значений с телефонами,
// которые содержатся в передаваемом тексте
Процедура ПолучитьСписокФИОиТелефоновИзТекста(Текст,СписокФИО,СписокТелефонов) Экспорт
	
	ОбрабатываемыйТекст = Лев(Текст,50000);
	
	// для телефонов
	РазрешенныеСимволы = "+- ()1234567890";
	
	ТекущийТелефон      = "";
	
	// для ФИО
	ТаблицаСлов = Новый ТаблицаЗначений;
	ТаблицаСлов.Колонки.Добавить("Слово", Новый ОписаниеТипов("Строка"));
	
	ТекущееСлово      = "";
	
	
	ПозицияОкончания = СтрДлина(ОбрабатываемыйТекст);
	
	ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	Если ФормаПрогрессора.Открыта() Тогда
		ФормаПрогрессора.Закрыть();
	КонецЕсли; 
	ФормаПрогрессора.НаименованиеОбработкиДанных = "Поиск ФИО и телефонов в тексте";
	ФормаПрогрессора.КомментарийОбработкиДанных  = "Поиск ФИО и телефонов в тексте";
	ФормаПрогрессора.Значение = 1;
	ФормаПрогрессора.МаксимальноеЗначение = ПозицияОкончания;
	ФормаПрогрессора.Открыть();
	
	Для а=1 по ПозицияОкончания Цикл
		
		Если Цел(а/500)*500 = а Тогда
			ФормаПрогрессора.Значение = а;
		КонецЕсли;
		
		ТекущийСимвол = Сред(ОбрабатываемыйТекст,а,1);
		Если КодСимвола(ТекущийСимвол) < 128 Тогда
			
			ТекущееСлово = СокрЛП(ТекущееСлово);
			ПервыйСимвол = Лев(ТекущееСлово,1);
			
			// Части ФИО не могут содержать менее 3х символов и должны начинаться на загавную букву
			Если СтрДлина(ТекущееСлово)<3 ИЛИ НРег(ПервыйСимвол) = ПервыйСимвол Тогда
				ТаблицаСлов.Очистить();
			Иначе
				НоваяСтрока = ТаблицаСлов.Добавить();
				НоваяСтрока.Слово = ТекущееСлово;
				
				Если ТаблицаСлов.Количество()>3 Тогда
					ТаблицаСлов.Удалить(0);
				КонецЕсли;
				
				Если СтрДлина(ТекущееСлово) > 4 Тогда
					ОкончаниеСлова = Прав(ТекущееСлово,3); 
					
					Если ОкончаниеСлова = "вич" или ОкончаниеСлова = "вна" Тогда
						
						Если ТаблицаСлов.Количество()=3 Тогда
							
							ТекущееФИО = ТаблицаСлов[0].Слово + " " + ТаблицаСлов[1].Слово + " " +ТаблицаСлов[2].Слово;
							
							Если СписокФИО.НайтиПоЗначению(ТекущееФИО) = Неопределено Тогда
								СписокФИО.Добавить(ТекущееФИО);
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ТекущееСлово = "";
		Иначе
			ТекущееСлово = ТекущееСлово + ТекущийСимвол;
		КонецЕсли;
		
		Если Найти(РазрешенныеСимволы,ТекущийСимвол) = 0 Тогда
			ТекущийТелефон = СокрЛП(ТекущийТелефон);
			
			КоличествоЦифрВТелефоне = 0;
			
			Для сч=1 по СтрДлина(ТекущийТелефон) Цикл
				ТекущийСимволТелефона = Сред(ТекущийТелефон,сч,1);
				Если Найти("1234567890",ТекущийСимволТелефона) > 0 Тогда
					КоличествоЦифрВТелефоне = КоличествоЦифрВТелефоне + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если КоличествоЦифрВТелефоне > 6 Тогда
				Если СписокТелефонов.НайтиПоЗначению(ТекущийТелефон) = Неопределено Тогда
					СписокТелефонов.Добавить(ТекущийТелефон);
				КонецЕсли;
			КонецЕсли;
			ТекущийТелефон = "";
		Иначе
			ТекущийТелефон = ТекущийТелефон + ТекущийСимвол;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ФормаПрогрессора.Открыта() Тогда
		ФормаПрогрессора.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает список значений с электронными адресами,
// которые содержатся в передаваемом тексте
Функция ПолучитьСписокАдресовЭлектроннойПочтыИзТекста(Текст, ПереданныеСписок = Неопределено) Экспорт
	
	Если ТипЗнч(ПереданныеСписок) = Тип("СписокЗначений") Тогда
		СписокАдресов = ПереданныеСписок.Скопировать();
	Иначе
		СписокАдресов = Новый СписокЗначений;
	КонецЕсли;
	
	ОбрабатываемыйТекст = Текст;
	
	ЧислоВхождений = СтрЧислоВхождений(ОбрабатываемыйТекст,"@");
	
	РазрешенныеСпецСимволы = "._-";
	
	ПозицияСимвола = Найти(ОбрабатываемыйТекст,"@");
	Пока ПозицияСимвола > 0 Цикл
		
		ПозицияНачало = 1;
		Для а=1 по ПозицияСимвола-1 Цикл
			ОбратныйОтчет = ПозицияСимвола - а;
			СимволПредлога = НРег(Сред(ОбрабатываемыйТекст,ОбратныйОтчет,1));
			Если СимволНеСоответствуетАдресу(СимволПредлога,РазрешенныеСпецСимволы) Тогда
				ПозицияНачало = ОбратныйОтчет + 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПозицияОкончания = СтрДлина(ОбрабатываемыйТекст);
		Для а=ПозицияСимвола+1 по ПозицияОкончания Цикл
			СимволСуфикс = НРег(Сред(ОбрабатываемыйТекст,а,1));
			Если СимволНеСоответствуетАдресу(СимволСуфикс,РазрешенныеСпецСимволы) Тогда
				ПозицияОкончания = а - 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПозицияОкончания > ПозицияСимвола И ПозицияНачало < ПозицияСимвола Тогда
			АдресЭлектроннойПочтыДляВыбора = Сред(ОбрабатываемыйТекст,ПозицияНачало,ПозицияОкончания-ПозицияНачало+1);
			
			Если СписокАдресов.НайтиПоЗначению(НРег(АдресЭлектроннойПочтыДляВыбора)) = Неопределено Тогда
				СписокАдресов.Добавить(НРег(АдресЭлектроннойПочтыДляВыбора));
			КонецЕсли;
		КонецЕсли;
		
		ОбрабатываемыйТекст = Прав(ОбрабатываемыйТекст,СтрДлина(ОбрабатываемыйТекст)-ПозицияОкончания);
		ПозицияСимвола = Найти(ОбрабатываемыйТекст,"@");
		
	КонецЦикла;
	
	Возврат СписокАдресов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МЕХАНИЗМОМ ФИЛЬТРАЦИИ ЭЛЕКТРОННЫХ ПИСЕМ

// Процедура вызывается при получении письма, и при необходимости
// отрабатывает фильтры, настроенные в учетной записи письма
// 
// Параметры:
//  Письмо - ДокументОбъект.ЭлектронноеПисьмо
//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
// 
Процедура ПрименитьФильтрыКПисьму(Письмо, ТекущийПользователь, ЗаписыватьОбъект = Ложь) Экспорт

	Если ТипЗнч(Письмо) <> Тип("ДокументОбъект.ЭлектронноеПисьмо") Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗапись = Письмо.УчетнаяЗапись;
	
	Если ТипЗнч(УчетнаяЗапись) <> Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаФильтров = Справочники.ФильтрыДляЭлектронныхПисем.Выбрать(, УчетнаяЗапись, Новый Структура("Использование", Истина), "Порядок ВОЗР");
	ПодходящийФильтр = Неопределено;
	Пока ВыборкаФильтров.Следующий() Цикл
		
		Если ПодходящийФильтр <> Неопределено
		   И ПодходящийФильтр.ДействияФильтра.Найти(Перечисления.ВидыДействийФильтровЭлектронныхПисем.ПродолжитьДальнейшуюОбработкуПравил, "ДействиеФильтра") = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Если ВыборкаФильтров.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		СписокРезультатовОперацийСтрокТЧ = Новый СписокЗначений;
		
		Для каждого СтрокаТЧ Из ВыборкаФильтров.УсловияФильтра Цикл
			
			ЗначениеАргументаУсловия = ПолучитьЗначениеАгрументаУсловияФильтра(Письмо, СтрокаТЧ.Условие);
			
			Если ЗначениеАргументаУсловия = Неопределено Тогда
				СписокРезультатовОперацийСтрокТЧ.Добавить(Ложь);
				Продолжить;
			КонецЕсли;
			
			СписокРезультатовОперацийСтрокТЧ.Добавить(ПроверитьУсловиеФильтра(ЗначениеАргументаУсловия, СтрокаТЧ.ОтрицаниеУсловия, СтрокаТЧ.ЗначениеУсловия));
		
		КонецЦикла;
		
		Если ВыборкаФильтров.ОперацияУсловия Тогда
			// Соединение условий по "И"
			Если СписокРезультатовОперацийСтрокТЧ.НайтиПоЗначению(Ложь) = Неопределено Тогда
				ПодходящийФильтр = ВыборкаФильтров.Ссылка;
			КонецЕсли; 
		Иначе
			// Соединение условий по "ИЛИ"
			Если СписокРезультатовОперацийСтрокТЧ.НайтиПоЗначению(Истина) <> Неопределено Тогда
				ПодходящийФильтр = ВыборкаФильтров.Ссылка;
			КонецЕсли; 
		КонецЕсли; 
	
	КонецЦикла;
	
	Если ПодходящийФильтр <> Неопределено Тогда
		ПрименитьДействиеФильтра(Письмо, ПодходящийФильтр, ТекущийПользователь);
		Если ЗаписыватьОбъект Тогда
			Попытка
				Письмо.Записать();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

// Функция определяет значение для фильтра, по которому происходит фильтрация
//
// Параметры
//  Письмо - ДокументОбъект.ЭлектронноеПисьмо
//  УсловиеФильтра - ПеречислениеСсылка.УсловияФильтровЭлектронныхПисем, условие фильтрации
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьЗначениеАгрументаУсловияФильтра(Письмо, УсловиеФильтра)

	ЗначениеВозврата = Неопределено;
	
	Если УсловиеФильтра = Перечисления.УсловияФильтровЭлектронныхПисем.ПолеКомуСодержит Тогда
		ЗначениеВозврата = Письмо.Кому;
	ИначеЕсли УсловиеФильтра = Перечисления.УсловияФильтровЭлектронныхПисем.ПолеКопииСодержит Тогда
		ЗначениеВозврата = Письмо.Копии;
	ИначеЕсли УсловиеФильтра = Перечисления.УсловияФильтровЭлектронныхПисем.ПолеОтправительСодержит Тогда
		ЗначениеВозврата = Письмо.ОтправительПредставление;
	ИначеЕсли УсловиеФильтра = Перечисления.УсловияФильтровЭлектронныхПисем.ТекстПисьмаСодержит Тогда
		ЗначениеВозврата = Письмо.ТекстПисьма;
	ИначеЕсли УсловиеФильтра = Перечисления.УсловияФильтровЭлектронныхПисем.ТемаПисьмаСодержит Тогда
		ЗначениеВозврата = Письмо.Тема;
	КонецЕсли;
	
	Возврат ЗначениеВозврата;

КонецФункции

// Функция проверяет, удовлетворяет ли данное письмо текущему фильтру.
//
// Параметры
//  ЗначениеДляПроверки - Строка, значение одного из реквизитов письма
//  ОтрицаниеУсловия - Булево, отрицание условия - это истина
//  ЗначениеФильтра - Неопределено, значение указанное в параметрах фильтра для проверки
//
// Возвращаемое значение:
//   Булево, удовлетворяет или нет текущему фильтру
//
Функция ПроверитьУсловиеФильтра(ЗначениеДляПроверки, ОтрицаниеУсловия, ЗначениеФильтра)
	
	РезультатПроверки = Неопределено;
	
	Если СтрЧислоВхождений(ЗначениеДляПроверки, ЗначениеФильтра) > 0 Тогда
		РезультатПроверки = Истина;
	Иначе
		РезультатПроверки = Ложь;
	КонецЕсли; 
	
	Если ОтрицаниеУсловия Тогда
		РезультатПроверки = НЕ РезультатПроверки;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Процедура изменяет параметры письма в соответствии с походящим фильтром.
//
// Параметры:
//  Письмо - ДокументОбъект.ЭлектронноеПисьмо, значения реквизитов которого необходимо изменить
//  ПодходящийФильтр - СправочникСсылка.ФильтрыДляЭлектронныхПисем, фильтр найденный для текущего письма
//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
//
Процедура ПрименитьДействиеФильтра(Письмо, ПодходящийФильтр, ТекущийПользователь)

	Для каждого СтрокаТЧ Из ПодходящийФильтр.ДействияФильтра Цикл
	
		Если СтрокаТЧ.ДействиеФильтра = Перечисления.ВидыДействийФильтровЭлектронныхПисем.ПоместитьПисьмоВПапку И ЗначениеЗаполнено(СтрокаТЧ.ГруппаПисем) Тогда
			Если СтрокаТЧ.ГруппаПисем = ПодходящийФильтр.Владелец.ГруппаУдаленные Тогда
				Письмо.ПометкаУдаления = Истина;
			Иначе
				Письмо.ГруппаУчетнойЗаписи = СтрокаТЧ.ГруппаПисем;
			КонецЕсли;
		ИначеЕсли СтрокаТЧ.ДействиеФильтра = Перечисления.ВидыДействийФильтровЭлектронныхПисем.УстановитьПисьмуФлагРассмотрено Тогда
			Письмо.НеРассмотрено = Ложь;
			Письмо.ОТветственный = ТекущийПользователь;
		ИначеЕсли СтрокаТЧ.ДействиеФильтра = Перечисления.ВидыДействийФильтровЭлектронныхПисем.УстановитьПисьмуОформление Тогда
			Письмо.Оформление = СтрокаТЧ.Оформление;
		КонецЕсли;
	
	КонецЦикла; 

КонецПроцедуры

// Функция открывает форму письма из объекта ИнтернетПочтовогоСообщения
// для целей, когда письмо является аттачем другого письма
//
// Параметры
//  ОбъектФайла - СправочникСсылка.ВложенияЭлектронныхПисем
//  ТекущийПользователь - СправочникСсылка.Пользователи
//
// Возвращаемое значение
//  Булево - успешное завершение операции
//  
Функция ОткрытьФайлMSG(ОбъектФайла, ТекущийПользователь) Экспорт

	Если ТипЗнч(ОбъектФайла) <> Тип("СправочникСсылка.ВложенияЭлектронныхПисем") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Данные = ОбъектФайла.Хранилище.Получить();
	Если ТипЗнч(Данные) <> Тип("ИнтернетПочтовоеСообщение") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(Данные.Отправитель) = Тип("Строка") Тогда
		Запрос.УстановитьПараметр("АдресЭлектроннойПочты", Данные.Отправитель);
	Иначе
		Запрос.УстановитьПараметр("АдресЭлектроннойПочты", Данные.Отправитель.Адрес);
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты = &АдресЭлектроннойПочты
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		УчетнаяЗапись = Выборка.Ссылка;
	КонецЕсли; 
	
	ДокументПисьмо = ПолучитьДокументОбъектИзИнтернетПочтовогоСообщения(Данные, УчетнаяЗапись,,);
	
	ДокументПисьмо.СтатусПисьма = Перечисления.СтатусыПисем.Отправленное;
	ДокументПисьмо.мРежимБезЗаписи = Истина;

	ФормаПисьма = ДокументПисьмо.ПолучитьФорму();
	
	Для каждого Вложение Из Данные.Вложения Цикл
	
		Если Вложение.Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Вложение.Идентификатор) Тогда
			ДокументПисьмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками;
			НоваяСтрока = ФормаПисьма.ВложенияПисьмаТЗСкрытые.Добавить();
			НоваяСтрока.ИДФайлаПочтовогоПисьма = Вложение.Идентификатор;
		Иначе
			НоваяСтрока = ФормаПисьма.ВложенияПисьмаТЗ.Добавить();
		КонецЕсли; 
		
		Если ТипЗнч(Вложение.Данные) = Тип("ИнтернетПочтовоеСообщение") Тогда
			НоваяСтрока.ИмяФайла = ?(ПустаяСтрока(Вложение.Имя), (Данные.ИдентификаторСообщения), Вложение.Имя) + ".msg";
		Иначе
			НоваяСтрока.ИмяФайла = Вложение.Имя;
		КонецЕсли; 
		НоваяСтрока.Данные = Новый ХранилищеЗначения(Вложение.Данные, Новый СжатиеДанных());
	
	КонецЦикла;
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(УчетнаяЗапись, УчетнаяЗапись);
	ФормаПисьма.ЭлементыФормы.УчетнаяЗапись.СписокВыбора = СписокВыбора;
	
	ФормаПисьма.Открыть();
	
	Возврат Истина;
	
КонецФункции

#Если Клиент Тогда

// Процедура ищет потомка письма (ответ или переадресацию) и открывает его форму
//
// Параметры
//  ДокументСсылка - ДокументСсылка.ЭлектронноеПисьмо, потомков которого надо искать
//
//
Процедура НайтиИОткрытьПотомкаПисьма(ДокументСсылка) Экспорт

	Если Не ЗначениеЗаполнено(ДокументСсылка.СостояниеПотомкаПисьма) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;

	СтатусыПисем = Неопределено;
	Если ДокументСсылка.СостояниеПотомкаПисьма = Перечисления.СостоянияПотомковЭлектронныхПисем.ОтветОтправлен Тогда
		Запрос.УстановитьПараметр("СтатусПисьма" , Перечисления.СтатусыПисем.Отправленное);
		Запрос.УстановитьПараметр("Переадресация", ЛОЖЬ);
		Запрос.УстановитьПараметр("Ответ"        , ИСТИНА);
	ИначеЕсли ДокументСсылка.СостояниеПотомкаПисьма = Перечисления.СостоянияПотомковЭлектронныхПисем.ПереадресацияОтправлена Тогда
		Запрос.УстановитьПараметр("СтатусПисьма" , Перечисления.СтатусыПисем.Отправленное);
		Запрос.УстановитьПараметр("Переадресация", ИСТИНА);
		Запрос.УстановитьПараметр("Ответ"        , ЛОЖЬ);
	ИначеЕсли ДокументСсылка.СостояниеПотомкаПисьма = Перечисления.СостоянияПотомковЭлектронныхПисем.ОтветСохранен Тогда
		СтатусыПисем = Новый Массив;
		СтатусыПисем.Добавить(Перечисления.СтатусыПисем.Сохраненное);
		СтатусыПисем.Добавить(Перечисления.СтатусыПисем.Исходящее);
		Запрос.УстановитьПараметр("СтатусПисьма" , СтатусыПисем);
		Запрос.УстановитьПараметр("Переадресация", ЛОЖЬ);
		Запрос.УстановитьПараметр("Ответ"        , ИСТИНА);
	ИначеЕсли ДокументСсылка.СостояниеПотомкаПисьма = Перечисления.СостоянияПотомковЭлектронныхПисем.ПереадресацияСохранена Тогда
		СтатусыПисем = Новый Массив;
		СтатусыПисем.Добавить(Перечисления.СтатусыПисем.Сохраненное);
		СтатусыПисем.Добавить(Перечисления.СтатусыПисем.Исходящее);
		Запрос.УстановитьПараметр("СтатусПисьма" , СтатусыПисем);
		Запрос.УстановитьПараметр("Переадресация", ИСТИНА);
		Запрос.УстановитьПараметр("Ответ"        , ЛОЖЬ);
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("Основание", ДокументСсылка);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭлектронноеПисьмо.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
	|
	|ГДЕ
	|	ЭлектронноеПисьмо.ОснованиеПисьма = &Основание
	|	И
	|	ЭлектронноеПисьмо.СтатусПисьма" + ?(ТипЗнч(СтатусыПисем) = Тип("Массив"), " В(&СтатусПисьма)", " = &СтатусПисьма") + "
	|	И
	|	ЭлектронноеПисьмо.Переадресация = &Переадресация
	|	И
	|	ЭлектронноеПисьмо.Ответ = &Ответ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмо.Дата УБЫВ
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Выборка.Ссылка.ПолучитьФорму().Открыть();
	Иначе
		Предупреждение("Письмо-потомок не найдено, возможно оно было удалено.");
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПоместитьИсходныеДанныеВОбъект(XMLИсточник, ПотокВывода, ФормаОбъекта, ДатаЗаписи) Экспорт
	
	//Контрагент = Неопределено;
	
	КИОбъекта = Новый ТаблицаЗначений;
	КИОбъекта.Колонки.Добавить("Поле1КИ");
	КИОбъекта.Колонки.Добавить("Поле2КИ");
	КИОбъекта.Колонки.Добавить("Поле3КИ");
	КИОбъекта.Колонки.Добавить("Поле4КИ");
	КИОбъекта.Колонки.Добавить("Поле5КИ");
	КИОбъекта.Колонки.Добавить("Поле6КИ");
	КИОбъекта.Колонки.Добавить("Поле7КИ");
	КИОбъекта.Колонки.Добавить("Поле8КИ");
	КИОбъекта.Колонки.Добавить("Поле9КИ");
	КИОбъекта.Колонки.Добавить("Поле10КИ");
	КИОбъекта.Колонки.Добавить("КомментарийКИ");
	КИОбъекта.Колонки.Добавить("ТипВидКИ");
	КИОбъекта.Колонки.Добавить("ПредставлениеКИ");
	
	ОтветыТаблицы = Новый ТаблицаЗначений;
	ОтветыТаблицы.Колонки.Добавить("Вопрос", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВопросыДляАнкетирования"));
	ОтветыТаблицы.Колонки.Добавить("Ответ", Новый ОписаниеТипов("Строка"));
	ОтветыТаблицы.Колонки.Добавить("РазвернутыйОтвет", Новый ОписаниеТипов("Строка"));
	ОтветыТаблицы.Колонки.Добавить("ТиповойОтвет", Метаданные.ПланыВидовХарактеристик.ВопросыДляАнкетирования.Тип);
	ОтветыТаблицы.Колонки.Добавить("НомерСтрокиВТаблице", Новый ОписаниеТипов("Число"));
	
	Вопрос 			= Неопределено;
	Ответ			= Неопределено;
	ТабличныйВопрос = Неопределено;
	
	//!!!!!!!
	Обработки.ЗагрузкаРезультатовАнкетирования.Создать().ПрочитатьВопрос(XMLИсточник, ОтветыТаблицы, Вопрос, ТабличныйВопрос);
	Если ТабличныйВопрос <> Неопределено тогда
		Обработки.ЗагрузкаРезультатовАнкетирования.Создать().ЗаписатьПредопределенныйТабличныйВопрос(ТабличныйВопрос, ПотокВывода, ОтветыТаблицы);
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаОтвет из ОтветыТаблицы Цикл
		Вопрос 	= СтрокаОтвет.Вопрос;
		Ответ 	= СтрокаОтвет.ТиповойОтвет;
		
		Если Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Фамилия тогда
			Фамилия = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Имя тогда
			Имя = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Отчество тогда
			Отчество = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ДатаРождения тогда
			ДатаРождения = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ИНН тогда
			ИНН = Ответ;
		КонецЕсли;
		
		// Физические лица и контактные лица
		//Если (Анкета.ВидСправочникаДляЗагрузки = Перечисления.ВидыОбъектовЗагружаемыхИзОпроса.ФизическиеЛица) и
		//	ЗначениеЗаполнено(Фамилия) и 
		//	ЗначениеЗаполнено(Имя) и 
		//	ЗначениеЗаполнено(Отчество) и 
		//	ЗначениеЗаполнено(ДатаРождения) и 
		//	Не ЗначениеЗаполнено(ПотокВывода.Наименование) тогда
		//	//Если Анкета.ВидСправочникаДляЗагрузки = Перечисления.ВидыОбъектовЗагружаемыхИзОпроса.ФизическиеЛица тогда
		//	ПотокВывода.Наименование = Фамилия	+ " " + Имя + " " + Отчество;
		//	ПотокВывода.ДатаРождения = ДатаРождения;
		//	ПотокВывода.Записать();
		//	// регистр	ФИОФизЛиц
		//	Если	(ЗначениеЗаполнено(Фамилия))	или
		//		(ЗначениеЗаполнено(Имя))	или
		//		(ЗначениеЗаполнено(Отчество))	тогда
		//		НаборЗаписейФИО	= РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
		//		НаборЗаписейФИО.Отбор.Физлицо.Значение		= ПотокВывода.Ссылка;
		//		НаборЗаписейФИО.Отбор.ФизЛицо.Использование	= Истина;
		//		НоваяЗапись 			= НаборЗаписейФИО.Добавить();
		//		НоваяЗапись.Физлицо		= ПотокВывода.Ссылка;
		//		НоваяЗапись.Период		= ДатаЗаписи;
		//		НоваяЗапись.Фамилия		= Фамилия;
		//		НоваяЗапись.Имя			= Имя;
		//		НоваяЗапись.Отчество	= Отчество;
		//		НаборЗаписейФИО.Записать();
		//	КонецЕсли;
		//КонецЕсли;
		
		//Если Анкета.ВидСправочникаДляЗагрузки = Перечисления.ВидыОбъектовЗагружаемыхИзОпроса.КонтактныеЛица и
		//	ЗначениеЗаполнено(Фамилия) и 
		//	ЗначениеЗаполнено(Имя) и 
		//	ЗначениеЗаполнено(Отчество) и 
		//	ЗначениеЗаполнено(ДатаРождения) и 
		//	Не ЗначениеЗаполнено(ПотокВывода.Фамилия + ПотокВывода.Имя + ПотокВывода.Отчество) тогда
		//		// это контактное лицо
		//		ПотокВывода.Фамилия 		= Фамилия;
		//		ПотокВывода.Имя 			= Имя;
		//		ПотокВывода.Отчество 		= Отчество;
		//		ПотокВывода.ДатаРождения 	= ДатаРождения;
		//		ПотокВывода.Наименование	= Фамилия + " " + Имя + " " + Отчество;
		//		ПотокВывода.Записать();
		//КонецЕсли;
		
		//Если Анкета.Адресная и Анкета.ВидСправочникаДляЗагрузки = Перечисления.ВидыОбъектовЗагружаемыхИзОпроса.Контрагенты тогда
		//	// если анкета была отправлена конкретному контрагенту
		//	Если ЗначениеЗаполнено(Фамилия) и 
		//		ЗначениеЗаполнено(Имя) и 
		//		ЗначениеЗаполнено(Отчество) и 
		//		ЗначениеЗаполнено(ДатаРождения) и 
		//		ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.Контрагенты") тогда
		//		// и встретили вопросы контактного лица, тогда запишем конрагента и создадим контактное лицо
		//		ПотокВывода.Записать();
		//		Контрагент 	= ПотокВывода;
		//		ПотокВывода = Справочники.КонтактныеЛица.СоздатьЭлемент();
		//		// это контактное лицо
		//		ПотокВывода.Фамилия 		= Фамилия;
		//		ПотокВывода.Имя 			= Имя;
		//		ПотокВывода.Отчество 		= Отчество;
		//		ПотокВывода.ДатаРождения 	= ДатаРождения;
		//		ПотокВывода.Наименование	= Фамилия + " " + Имя + " " + Отчество;
		//		ПотокВывода.ОбъектВладелец	= Контрагент.Ссылка;
		//		ПотокВывода.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
		//		ПотокВывода.Записать();
		//	КонецЕсли;
		//КонецЕсли;
		
		// Контрагент
		//Если ЗначениеЗаполнено(ИНН) и 
		//	//Анкета.ВидСправочникаДляЗагрузки = Перечисления.ВидыОбъектовЗагружаемыхИзОпроса.Контрагенты тогда
		//	ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.Контрагенты") тогда
		//	Если Не ЗначениеЗаполнено(ПотокВывода.ИНН) тогда
		//		//Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		//		ПотокВывода.ИНН = ИНН;
		//		ПотокВывода.Записать();
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;
		
		//Если ЗначениеЗаполнено(Фамилия) и 
		//	 ЗначениеЗаполнено(Имя) и 
		//	 ЗначениеЗаполнено(Отчество) и 
		//	 ЗначениеЗаполнено(ДатаРождения) и  
		//	 Не ЗначениеЗаполнено(ПотокВывода) тогда
		//	 ПотокВывода = Справочники.КонтактныеЛицаКонтрагентов.СоздатьЭлемент();
		//	 ПотокВывода.Наименование = Фамилия	+ " " + Имя + " " + Отчество;
		//	 ПотокВывода.ДатаРождения = ДатаРождения;
		//	 ПотокВывода.Записать();
		//КонецЕсли;
		
		//Если ЗначениеЗаполнено(Контрагент) тогда
		//Если Анкета.ВидСправочникаДляЗагрузки = Перечисления.ВидыОбъектовЗагружаемыхИзОпроса.Контрагенты тогда
		//	КонтрагентДляЗаписи =  ПотокВывода;
		//ИначеЕсли Анкета.ВидСправочникаДляЗагрузки = Перечисления.ВидыОбъектовЗагружаемыхИзОпроса.КонтактныеЛица тогда
		//	КонтрагентДляЗаписи =  Контрагент;
		//КонецЕсли ;
		//Если Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.НаименованиеКонтрагента и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.Контрагенты") тогда
		//	КонтрагентДляЗаписи.Наименование = Ответ;
		//ИначеЕсли	Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ИННГоловногоКонтрагента	тогда
		//	Контрагент.ИННГоловногоКонтрагента	= СтрокаВопросОтвет.ТиповойОтвет;
		//ИначеЕсли	Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ВидДеятельностиКонтрагента	и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.Контрагенты") тогда
		//	//КонтрагентДляЗаписи.ОписаниеВидовДеятельности = Ответ;
		//ИначеЕсли	Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТипКонтрагента	и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.Контрагенты") тогда
		//	КонтрагентДляЗаписи.ЮрФизЛицо = Ответ;
		//КонецЕсли;
		//КонецЕсли;
		
		//Если Анкета.ВидСправочникаДляЗагрузки = Перечисления.ВидыОбъектовЗагружаемыхИзОпроса.ФизическиеЛица тогда
		//	Если Не ЗначениеЗаполнено(ПотокВывода) тогда
		//		// если не во что принимать данные, то продолжим цикл
		//		Продолжить;
		//	КонецЕсли;
		////ИначеЕсли Анкета.ВидСправочникаДляЗагрузки = Перечисления.ВидыОбъектовЗагружаемыхИзОпроса.Контрагенты тогда
		////	Если Не ЗначениеЗаполнено(ПотокВывода) тогда
		////		// если не во что принимать данные, то продолжим цикл
		////		Продолжить;
		////	КонецЕсли;
		//КонецЕсли;
		
		ТипВидКИ	=	Вопрос.ТипВидКонтакнойИнформации;
		
		Если Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Пол и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.ФизическиеЛица") тогда
			ПотокВывода.Пол = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ИНН  и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.ФизическиеЛица") тогда
			ПотокВывода.ИНН = Ответ;
			//ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ИННГоловногоКонтрагента и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.Контрагенты") тогда
			//	ЗапросПоКонтрагенту = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			//									   |	Контрагенты.Ссылка
			//									   |ИЗ
			//									   |	Справочник.Контрагенты КАК Контрагенты
			//									   |
			//									   |ГДЕ
			//									   |	Контрагенты.ИНН = &ИННГоловногоКонтрагента");
			//	ЗапросПоКонтрагенту.УстановитьПараметр("ИННГоловногоКонтрагента", Ответ);
			//	РезультатЗапроса = ЗапросПоКонтрагенту.Выполнить();
			//	Выборка = РезультатЗапроса.Выбрать();
			//	Выборка.Следующий();
			//	ГоловнойКонтрагент = Выборка.Ссылка;
			//	Если ЗначениеЗаполнено(ГоловнойКонтрагент) тогда
			//		ПотокВывода.ГоловнойКонтрагент = ГоловнойКонтрагент;
			//	Иначе
			//		Сообщить("Невозможно заполнить головного контрагента. Не найден контрагент, имеющий ИНН - " + Ответ);
			//	КонецЕсли;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.КодИМНС  и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.ФизическиеЛица") тогда
			ПотокВывода.КодИМНС = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СтраховойНомерПФР  и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.ФизическиеЛица") тогда
			ПотокВывода.СтраховойНомерПФР = Ответ;
			//ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Роль  и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.КонтактныеЛица") тогда
			//	ПотокВывода.Роль = Ответ;
			//ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Должность  и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.КонтактныеЛица") тогда
			//	ПотокВывода.Должность = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СерияДокумента тогда
			СерияДокумента = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ВидДокументаУдостоверяющегоЛичность тогда
			ВидДокументаУдостоверяющегоЛичность = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.НомерДокумента тогда
			НомерДокумента = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ДатаВыдачиДокумента тогда
			ДатаВыдачиДокумента = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.КемВыданДокумент тогда
			КемВыданДокумент = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.КодПодразделенияДокумента тогда
			КодПодразделенияДокумента = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Гражданство тогда
			Гражданство = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СемейноеПоложение тогда
			СемейноеПоложение = Ответ;
		ИначеЕсли	ТипВидКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес	тогда
			СтрокаКИ =	КИОбъекта.Добавить();
			СтрокаКИ.ТипВидКИ	= ТипВидКИ;
			МассивПолей	=	ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Ответ,	"¤");
			Если	МассивПолей.Количество()	>	0	тогда
				СтрокаКИ.Поле1КИ = МассивПолей[0];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	1	тогда
				СтрокаКИ.Поле2КИ = МассивПолей[1];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	2	тогда
				СтрокаКИ.Поле3КИ = МассивПолей[2];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	3	тогда
				СтрокаКИ.Поле4КИ = МассивПолей[3];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	4	тогда
				СтрокаКИ.Поле5КИ = МассивПолей[4];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	5	тогда
				СтрокаКИ.Поле6КИ = МассивПолей[5];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	6	тогда
				СтрокаКИ.Поле7КИ = МассивПолей[6];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	7	тогда
				СтрокаКИ.Поле8КИ = МассивПолей[7];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	8	тогда
				СтрокаКИ.Поле9КИ = МассивПолей[8];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	9	тогда
				СтрокаКИ.КомментарийКИ	= МассивПолей[9];
			КонецЕсли;
			Представление = "";
			
			Если СокрЛП(СтрокаКИ.Поле1КИ) <> "" Тогда
				Представление = Представление + ", " + СокрЛП(СтрокаКИ.Поле1КИ);
			КонецЕсли;
			
			Если СокрЛП(СтрокаКИ.Поле2КИ) <> "" Тогда
				Представление = Представление + ", " + СокрЛП(СтрокаКИ.Поле2КИ);
			КонецЕсли;
			
			Если СокрЛП(СтрокаКИ.Поле3КИ) <> "" Тогда
				Представление = Представление + ", " + СокрЛП(СтрокаКИ.Поле3КИ);
			КонецЕсли;
			
			Если СокрЛП(СтрокаКИ.Поле4КИ) <> "" Тогда
				Представление = Представление + ", " + СокрЛП(СтрокаКИ.Поле4КИ);
			КонецЕсли;
			
			Если СокрЛП(СтрокаКИ.Поле5КИ) <> "" Тогда
				Представление = Представление + ", " + СокрЛП(СтрокаКИ.Поле5КИ);
			КонецЕсли;
			
			Если СокрЛП(СтрокаКИ.Поле6КИ) <> "" Тогда
				Представление = Представление + ", " + СокрЛП(СтрокаКИ.Поле6КИ);
			КонецЕсли;
			
			Если СокрЛП(СтрокаКИ.Поле7КИ) <> "" Тогда
				Представление = Представление + ", дом № " + СокрЛП(СтрокаКИ.Поле7КИ);
			КонецЕсли;
			
			Если СокрЛП(СтрокаКИ.Поле8КИ) <> "" Тогда
				Представление = Представление + ", корпус " + СокрЛП(СтрокаКИ.Поле8КИ);
			КонецЕсли;
			
			Если СокрЛП(СтрокаКИ.Поле9КИ) <> "" Тогда
				Представление = Представление + ", кв." + СокрЛП(СтрокаКИ.Поле9КИ);
			КонецЕсли;
			
			Если СтрДлина(Представление) > 2 Тогда
				Представление = Сред(Представление, 3);
			КонецЕсли;
			СтрокаКИ.ПредставлениеКИ = Представление
		ИначеЕсли	ТипВидКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон	тогда
			СтрокаКИ	=	КИОбъекта.Добавить();
			СтрокаКИ.ТипВидКИ	= ТипВидКИ;
			МассивПолей	=	ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Ответ,	"¤");
			Если	МассивПолей.Количество()	>	0	тогда
				СтрокаКИ.Поле1КИ	= МассивПолей[0];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	1	тогда
				СтрокаКИ.Поле2КИ	= МассивПолей[1];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	2	тогда
				СтрокаКИ.Поле3КИ	= МассивПолей[2];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	3	тогда
				СтрокаКИ.Поле4КИ	= МассивПолей[3];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	4	тогда
				СтрокаКИ.КомментарийКИ	= МассивПолей[4];
			КонецЕсли;
			//!!!!!!!! сделать через Функцию УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(Запись) Экспорт
			//Представление = ?(Не ПустаяСтрока(СтрокаКИ.Поле1КИ),("+"+СтрокаКИ.Поле1КИ),"");
			//Представление = Представление + ?((Не ПустаяСтрока(СтрокаКИ.Поле2КИ)),(ПроверкаПустойСтроки(Представление,Ложь)+"(" + СтрокаКИ.Поле2КИ + ")"),"");
			//Представление = Представление + ?((Не ПустаяСтрока(СтрокаКИ.Поле3КИ)),(ПроверкаПустойСтроки(Представление,ПустаяСтрока(СтрокаКИ.Поле2КИ))+СтрокаКИ.Поле3КИ),"");
			//Представление = Представление + ?((Не ПустаяСтрока(СтрокаКИ.Поле4КИ)),(ПроверкаПустойСтроки(Представление)+"доб. " + СтрокаКИ.Поле4КИ),"");
			//СтрокаКИ.ПредставлениеКИ	= Представление
		ИначеЕсли ТипВидКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты или 
			ТипВидКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница или 
			ТипВидКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Другое тогда
			СтрокаКИ			     = КИОбъекта.Добавить();
			СтрокаКИ.ТипВидКИ	     = ТипВидКИ;
			СтрокаКИ.ПредставлениеКИ = Ответ;
			//КонецЕсли;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ОтношениеКВоинскойОбязанности тогда
			ОтношениеКВоинскойОбязанности = Ответ;
		ИначеЕсли	Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ОтношениеКВоинскомуУчету	тогда
			ОтношениеКВоинскомуУчету = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Годность тогда
			Годность = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Звание тогда
			Звание = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.НаличиеМобпредписания тогда
			НаличиеМобпредписания = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Военкомат тогда
			Военкомат =	Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ВУС тогда
			ВУС	= Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.КатегорияЗапаса тогда
			КатегорияЗапаса	= Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Состав тогда
			Состав	= Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.НомерКомандыПартии тогда
			НомерКомандыПартии	= Ответ;
		КонецЕсли;
	КонецЦикла; // чтение вопросов
	
	Если Не ЗначениеЗаполнено(ПотокВывода.Наименование) И 
		ЗначениеЗаполнено(Фамилия) И 
		ЗначениеЗаполнено(Имя) И 
		ЗначениеЗаполнено(Отчество) тогда
		ПотокВывода.Наименование = "" + Фамилия	+ " " + Имя + " " + Отчество;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПотокВывода.ДатаРождения) тогда
		ПотокВывода.ДатаРождения = ДатаРождения;
	КонецЕсли;
	//Если Не ЗначениеЗаполнено(ПотокВывода.ИНН) тогда
	//	ПотокВывода.ИНН = Ответ;
	//КонецЕсли;
	
	//Если ЗначениеЗаполнено(Контрагент) тогда
	//	Контрагент.Записать();
	//	ПотокВывода.ОбъектВладелец = Контрагент.Ссылка;
	//КонецЕсли;
	
	// паспортные данные физлиц !!!!!
	Если ЗначениеЗаполнено(ВидДокументаУдостоверяющегоЛичность)	или
		ЗначениеЗаполнено(СерияДокумента) или
		ЗначениеЗаполнено(НомерДокумента) или
		ЗначениеЗаполнено(ДатаВыдачиДокумента) или
		ЗначениеЗаполнено(КемВыданДокумент) или
		ЗначениеЗаполнено(КодПодразделенияДокумента)	тогда
		НаборЗаписейПаспортныхДанных	= ФормаОбъекта.мНаборЗаписейДокументаУдостоверяющегоЛичность;//РегистрыСведений.ПаспортныеДанныеФизЛиц.СоздатьНаборЗаписей();
		//НаборЗаписейПаспортныхДанных.Отбор.Физлицо.Значение			= ПотокВывода.Ссылка;
		//НаборЗаписейПаспортныхДанных.Отбор.ФизЛицо.Использование	= Истина;
		НоваяЗапись =	НаборЗаписейПаспортныхДанных[0];//НаборЗаписейПаспортныхДанных.Добавить();
		//НоваяЗапись.Физлицо						= ПотокВывода.Ссылка;
		НоваяЗапись.Период						= ДатаЗаписи;
		НоваяЗапись.ДокументВид					= ВидДокументаУдостоверяющегоЛичность;
		НоваяЗапись.ДокументСерия				= СерияДокумента;
		НоваяЗапись.ДокументНомер				= НомерДокумента;
		НоваяЗапись.ДокументДатаВыдачи			= ДатаВыдачиДокумента;
		НоваяЗапись.ДокументКемВыдан			= КемВыданДокумент;
		НоваяЗапись.ДокументКодПодразделения	= КодПодразделенияДокумента;
		//НаборЗаписейПаспортныхДанных.Записать();
		//СерияДокумента	= "";
		//ВидДокументаУдостоверяющегоЛичность	= "";
		//НомерДокумента		= "";
		//ДатаВыдачиДокумента	= "";
		//КемВыданДокумент	= "";
		//КодПодразделенияДокумента	= "";
	КонецЕсли;
	
	// гражданство !!!!!
	Если ЗначениеЗаполнено(Гражданство) тогда
		НаборЗаписейГражданство	= ФормаОбъекта.мНаборЗаписейГражданство;//РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
		//НаборЗаписейГражданство.Отбор.Физлицо.Значение		= ПотокВывода.Ссылка;
		//НаборЗаписейГражданство.Отбор.ФизЛицо.Использование	= Истина;
		НоваяЗапись 			= НаборЗаписейГражданство[0];//НаборЗаписейГражданство.Добавить();
		//НоваяЗапись.Физлицо		= ПотокВывода.Ссылка;
		НоваяЗапись.Период		= ДатаЗаписи;
		НоваяЗапись.Страна		= Гражданство;
		//НаборЗаписейГражданство.Записать();
		Гражданство			= "";
	КонецЕсли;
	
	// Семейное положение!!!!!
	Если ЗначениеЗаполнено(СемейноеПоложение) тогда
		НаборЗаписейСемейноеПоложение	= ФормаОбъекта.мНаборЗаписейСемейноеПоложение; //РегистрыСведений.СемейноеПоложениеФизЛиц.СоздатьНаборЗаписей();
		//НаборЗаписейСемейноеПоложение.Отбор.Физлицо.Значение		= ПотокВывода.Ссылка;
		//НаборЗаписейСемейноеПоложение.Отбор.ФизЛицо.Использование	= Истина;
		НоваяЗапись 			= НаборЗаписейСемейноеПоложение[0];//НаборЗаписейСемейноеПоложение.Добавить();
		//НоваяЗапись.Физлицо		= ПотокВывода.Ссылка;
		НоваяЗапись.Период		= ДатаЗаписи;
		НоваяЗапись.СемейноеПоложение = СемейноеПоложение;
		//НаборЗаписейСемейноеПоложение.Записать();
		СемейноеПоложение	= "";
	КонецЕсли;
	
	// воинский учет          !!!!!
	Если	ЗначениеЗаполнено(ОтношениеКВоинскойОбязанности) или
		ЗначениеЗаполнено(ОтношениеКВоинскомуУчету) или
		ЗначениеЗаполнено(Годность) или
		ЗначениеЗаполнено(Звание) или
		ЗначениеЗаполнено(НаличиеМобпредписания) или
		ЗначениеЗаполнено(Военкомат) или
		ЗначениеЗаполнено(ВУС) или
		ЗначениеЗаполнено(КатегорияЗапаса) или
		ЗначениеЗаполнено(Состав) или
		ЗначениеЗаполнено(НомерКомандыПартии) тогда
		НаборЗаписейВУ								= ФормаОбъекта.мНаборЗаписейВоинскийУчет;//РегистрыСведений.ВоинскийУчет.СоздатьНаборЗаписей();
		//НаборЗаписейВУ.Отбор.Физлицо.Значение		= ПотокВывода.Ссылка;
		//НаборЗаписейВУ.Отбор.ФизЛицо.Использование	= Истина;
		НоваяЗапись =	НаборЗаписейВУ[0]; //НаборЗаписейВУ.Добавить();
		//НоваяЗапись.Физлицо		= ПотокВывода.Ссылка;
		НоваяЗапись.Период		= ДатаЗаписи;
		НоваяЗапись.ОтношениеКВоинскойОбязанности	= ОтношениеКВоинскойОбязанности;
		НоваяЗапись.ОтношениеКВоинскомуУчету		= ОтношениеКВоинскомуУчету;
		НоваяЗапись.Годность				= Годность;
		НоваяЗапись.Звание					= Звание;
		НоваяЗапись.НаличиеМобпредписания	= НаличиеМобпредписания;
		НоваяЗапись.Военкомат				= Военкомат;
		НоваяЗапись.ВУС						= ВУС;
		НоваяЗапись.КатегорияЗапаса			= КатегорияЗапаса;
		НоваяЗапись.Состав					= Состав;
		НоваяЗапись.НомерКомандыПартии		= НомерКомандыПартии;
		//НаборЗаписейВУ.Записать();
		//ОтношениеКВоинскойОбязанности	= "";
		//ОтношениеКВоинскомуУчету		= "";
		//Годность				= "";
		//Звание					= "";
		//НаличиеМобпредписания	= "";
		//Военкомат				= "";
		//ВУС						= "";
	КонецЕсли;
	
	// запись контактной информации
	// контактную информацию можно записывать в контрагента, физлица и контактного лица
	//Если Не ЗначениеЗаполнено(ПотокВывода) и ЗначениеЗаполнено(Контрагент) тогда
	//	ОбъектЗагрузкиКИ = Контрагент;
	//Иначе
	ОбъектЗагрузкиКИ = ПотокВывода;
	//КонецЕсли;
	//!!!!!!!!!!!!!!!
	Для каждого	СтрокаКИ	из	КИОбъекта	Цикл
		Поле1КИ	= СтрокаКИ.Поле1КИ;
		Поле2КИ	= СтрокаКИ.Поле2КИ;
		Поле3КИ	= СтрокаКИ.Поле3КИ;
		Поле4КИ	= СтрокаКИ.Поле4КИ;
		Поле5КИ	= СтрокаКИ.Поле5КИ;
		Поле6КИ	= СтрокаКИ.Поле6КИ;
		Поле7КИ	= СтрокаКИ.Поле7КИ;
		Поле8КИ	= СтрокаКИ.Поле8КИ;
		Поле9КИ	= СтрокаКИ.Поле9КИ;
		Поле10КИ		= СтрокаКИ.Поле10КИ;
		КомментарийКИ	= СтрокаКИ.КомментарийКИ;
		ПредставлениеКИ	= СтрокаКИ.ПредставлениеКИ;
		ТипВидКИ		= СтрокаКИ.ТипВидКИ;
		Если 	
			ЗначениеЗаполнено(Поле1КИ)	ИЛИ
			ЗначениеЗаполнено(Поле2КИ)	ИЛИ
			ЗначениеЗаполнено(Поле3КИ)	ИЛИ
			ЗначениеЗаполнено(Поле4КИ)	ИЛИ
			ЗначениеЗаполнено(Поле5КИ)	ИЛИ
			ЗначениеЗаполнено(Поле6КИ)	ИЛИ
			ЗначениеЗаполнено(Поле7КИ)	ИЛИ
			ЗначениеЗаполнено(Поле8КИ)	ИЛИ
			ЗначениеЗаполнено(Поле9КИ)	ИЛИ
			ЗначениеЗаполнено(Поле10КИ)	ИЛИ
			ЗначениеЗаполнено(ПредставлениеКИ) тогда
			
			НаборЗаписейКИ	=	ФормаОбъекта.НаборКонтактнойИнформации; //РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
			// надо обойти все записи и только при отсутствии записи с таким же видом и типом добавлять новую
			КоличествоЗаписейКИ = НаборЗаписейКИ.Количество();
			НайденаЗаписьКИ = Ложь;
			Для индЗаписи = 0 по КоличествоЗаписейКИ-1 Цикл
				ЗаписьКИ = НаборЗаписейКИ[индЗаписи];
				Если ЗаписьКИ.Тип = ТипВидКИ.Тип И ЗаписьКИ.Вид = ТипВидКИ И Не ЗначениеЗаполнено(ЗаписьКИ.Представление) тогда
					НоваяЗапись = ЗаписьКИ;
					НайденаЗаписьКИ = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ НайденаЗаписьКИ тогда
				НоваяЗапись 		= НаборЗаписейКИ.Добавить();
			КонецЕсли;
			
			НоваяЗапись.Объект	= ОбъектЗагрузкиКИ.Ссылка;
			НоваяЗапись.Тип		= ТипВидКИ.Тип;
			НоваяЗапись.Вид		= ТипВидКИ;
			НоваяЗапись.Поле1	= Поле1КИ;
			НоваяЗапись.Поле2	= Поле2КИ;
			НоваяЗапись.Поле3	= Поле3КИ;
			НоваяЗапись.Поле4	= Поле4КИ;
			НоваяЗапись.Поле5	= Поле5КИ;
			НоваяЗапись.Поле6	= Поле6КИ;
			НоваяЗапись.Поле7	= Поле7КИ;
			НоваяЗапись.Поле8	= Поле8КИ;
			НоваяЗапись.Поле9	= Поле9КИ;
			НоваяЗапись.Поле10	= Поле10КИ;
			НоваяЗапись.Комментарий		= КомментарийКИ;
			Если ТипВидКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес тогда
				НоваяЗапись.Представление	= УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(НоваяЗапись);
			ИначеЕсли ТипВидКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон тогда
				УправлениеКонтактнойИнформацией.СформироватьПредставлениеТелефона(НоваяЗапись);
			Иначе
				НоваяЗапись.Представление	= ПредставлениеКИ;
			КонецЕсли;
			//НаборЗаписейКИ.Записать();
		КонецЕсли;
	КонецЦикла; // по строкам объекта
	
КонецПроцедуры

// Функция создает элемент справочника Физические лица по переданному предмету
// и возвращает его ссылку
Функция СоздатьФизическоеЛицо(ТекущийПредмет,ФИО="",СсылкаВладелец = Неопределено, РегистрироватьКандидата = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущийПредмет) Тогда
		Сообщить("Физилцо можно создавать только для заполненного предмета");
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(ТекущийПредмет) <> Тип("Строка") тогда
		Если ТипЗнч(ТекущийПредмет) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ТекущийПредмет.ПолучитьФорму().Открыть();
		Иначе
			Сообщить("Физлицо можно создать для предмета строкового типа");
		КонецЕсли; 
		Возврат Неопределено;
	КонецЕсли;
	
	ЗапросПоПредмету = Новый Запрос;
	
	ЗапросПоПредмету.УстановитьПараметр("ПредметКонтакта", 		ТекущийПредмет);
	ЗапросПоПредмету.УстановитьПараметр("Отправленное", Перечисления.СтатусыПисем.Отправленное);
	ЗапросПоПредмету.УстановитьПараметр("Полученное", 	Перечисления.СтатусыПисем.Полученное);
	
	ЗапросПоПредмету.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПредметыЭлектронныхПисем.Регистратор КАК ЭП,
	|	ВЫБОР КОГДА ВложенияЭлектронныхПисем.ИмяФайла ПОДОБНО ""%.xml"" ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЕстьРезультатОпроса,
	|	ВЫБОР КОГДА ВложенияЭлектронныхПисем.ИмяФайла ПОДОБНО ""%.xml"" ТОГДА ВложенияЭлектронныхПисем.Хранилище КОНЕЦ КАК Хранилище,
	|	ПредметыЭлектронныхПисем.Регистратор.КомуТЧ.(
	|		ВЫБОР КОГДА ПредметыЭлектронныхПисем.Регистратор.СтатусПисьма = &Отправленное ТОГДА ПредметыЭлектронныхПисем.Регистратор.КомуТЧ.АдресЭлектроннойПочты ИНАЧЕ """" КОНЕЦ КАК АдресКому
	|	) КАК Кому,
	|	ВЫБОР КОГДА ПредметыЭлектронныхПисем.Регистратор.СтатусПисьма = &Полученное ТОГДА ПредметыЭлектронныхПисем.Регистратор.ОтправительАдресЭлектроннойПочты ИНАЧЕ """" КОНЕЦ КАК АдресОтКого
	|ИЗ
	|	РегистрСведений.ПредметыЭлектронныхПисем КАК ПредметыЭлектронныхПисем
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
	|	ПО ПредметыЭлектронныхПисем.Регистратор = ВложенияЭлектронныхПисем.Объект
	|
	|ГДЕ
	|	ПредметыЭлектронныхПисем.Предмет = &ПредметКонтакта И
	//|	(ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма = """") И
	|	(ВложенияЭлектронныхПисем.Объект.Ссылка ССЫЛКА Документ.ЭлектронноеПисьмо)";
	
	РезультатЗапроса = ЗапросПоПредмету.Выполнить();
	ВыборкаЗапроса 	 = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	ТипСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("ВидДанных", ТипСтрока);
	ИсходныеДанные.Колонки.Добавить("Значение");
	ИсходныеДанные.Колонки.Добавить("Представление");
	ИсходныеДанные.Колонки.Добавить("ИмяФайла");
	
	СтрокаИД                = ИсходныеДанные.Добавить();
	СтрокаИД.ВидДанных      = "ФИО";
	СтрокаИД.Значение       = ?(ФИО="",ТекущийПредмет,ФИО);
	СтрокаИД.Представление  =  "00000000";
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		Если ВыборкаЗапроса.ЕстьРезультатОпроса тогда
			ХранилищеИзЗапроса = ВыборкаЗапроса.Хранилище.Получить();
			Попытка
				ИмяВрФайла = ПолучитьИмяВременногоФайла();
				ХранилищеИзЗапроса.Записать(ИмяВрФайла);
				XMLФайл = Новый ЧтениеXML();
				XMLФайл.ОткрытьФайл(ИмяВрФайла);
				Пока XMLФайл.Имя <> "РезультатОпроса" Цикл
					XMLФайл.Прочитать();
				КонецЦикла;
				ДатаЗаполненияОпроса = XMLЗначение(Тип("Дата"), XMLФайл.ПолучитьАтрибут("ДатаЗаполненияАнкеты"));
				Если ЗначениеЗаполнено(ДатаЗаполненияОпроса) тогда
					СтрокаИД                = ИсходныеДанные.Добавить();
					СтрокаИД.ВидДанных      = "XML";
					СтрокаИД.Значение       = XMLФайл;
					СтрокаИД.Представление  = Формат(ДатаЗаполненияОпроса, "ДФ=yyyyMMdd");
					СтрокаИД.ИмяФайла       = ИмяВрФайла;
					// заполняем исходные данные XML-файлами результатов опросов
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		// теперь добавим в список исходных данных всю информацию из писем
		ВыборкаПолучателей = ВыборкаЗапроса.Кому.Выбрать();
		Пока ВыборкаПолучателей.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаПолучателей.АдресКому) И ИсходныеДанные.Найти(ВыборкаПолучателей.АдресКому) = Неопределено тогда
				СтрокаИД                = ИсходныеДанные.Добавить();
				СтрокаИД.ВидДанных      = "КИ_адресЭП";
				СтрокаИД.Значение       = ВыборкаПолучателей.АдресКому;
				СтрокаИД.Представление  =  "00000000";
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВыборкаЗапроса.АдресОтКого) И ИсходныеДанные.Найти(ВыборкаЗапроса.АдресОтКого) = Неопределено тогда
			СтрокаИД                = ИсходныеДанные.Добавить();
			СтрокаИД.ВидДанных      = "КИ_адресЭП";
			СтрокаИД.Значение       = ВыборкаЗапроса.АдресОтКого;
			СтрокаИД.Представление  =  "00000000";
		КонецЕсли;
		
	КонецЦикла;
	
	ИсходныеДанные.Свернуть("ВидДанных,Значение,Представление,ИмяФайла");
	ИсходныеДанные.Сортировать("Представление УБЫВ");
	
	ОбработкаРезультатовАнкетирования = Обработки.ЗагрузкаРезультатовАнкетирования.Создать();
	
	ФЛ      = Справочники.ФизическиеЛица.СоздатьЭлемент();
	ФормаФЛ = ФЛ.ПолучитьФорму("ФормаЭлемента");
	
	ЗапросВидыКИ 		= Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВидыКонтактнойИнформации.Ссылка КАК ВидАдресЭлектроннойПочты
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации2
	|		ПО (ВидыКонтактнойИнформации.Тип = &АдресЭлектроннойПочты) И (ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидФизическиеЛица)");
	
	ЗапросВидыКИ.УстановитьПараметр("АдресЭлектроннойПочты", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ЗапросВидыКИ.УстановитьПараметр("ВидФизическиеЛица", Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
	
	РезультатЗапроса    = ЗапросВидыКИ.Выполнить();
	ВыборкаЗапрос       = РезультатЗапроса.Выбрать();
	Если ВыборкаЗапрос.Следующий() тогда
		ВидАдресЭлектроннойПочты = ВыборкаЗапрос.ВидАдресЭлектроннойПочты;
	КонецЕсли;
	
	Для каждого СтрокаИД из ИсходныеДанные Цикл
		
		Если СтрокаИД.ВидДанных = "XML" тогда
			// если нашли результат опроса, то начнем создавать физлицо
			Файл = СтрокаИД.Значение;

			Файл.ОткрытьФайл(СтрокаИД.ИмяФайла);
			ОбъектЗагрузки 	= ОбработкаРезультатовАнкетирования.НайтиОбъектДляЗагрузки(Файл);
			АнкетаИзФайла 		= ОбработкаРезультатовАнкетирования.ПолучитьАнкетуИзФайла(Файл);
			Файл.ОткрытьФайл(СтрокаИД.ИмяФайла);
			Если АнкетаИзФайла = Неопределено тогда
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОбъектЗагрузки) тогда
				ОбъектЗагрузки = ОбработкаРезультатовАнкетирования.НайтиОбъектПоАнкетнымДанным(Файл, АнкетаИзФайла);
			КонецЕсли;
			Если ЗначениеЗаполнено(ОбъектЗагрузки) тогда
				Ответ = Вопрос("Найдено физлицо, имеющее такое же ФИО и дату рождения, как загружаемое. Возможно такое физлицо уже есть в ИБ. Продолжить зарузку данных?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
				Если Ответ = КодВозвратаДиалога.Нет тогда
					ФормаОЗ = ОбъектЗагрузки.ПолучитьФорму("ФормаЭлемента");
					ФормаОЗ.Открыть();
					Сообщить("Найдено физлицо, имеющее такое же ФИО и дату рождения.");
					Возврат Неопределено;
				ИначеЕсли Ответ = КодВозвратаДиалога.Отмена тогда
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Фамилия  = "";
			Имя  = "";
			Отчество  = "";
			ДатаРождения  = "";
			ИНН  = "";
			СерияДокумента  = "";
			НомерДокумента  = "";
			ДатаВыдачиДокумента = "";
			КемВыданДокумент  = "";
			Гражданство = "";
			СемейноеПоложение = "";
			Годность = "";
			Звание  = "";
			Военкомат  = "";
			ВУС = "";
			КатегорияЗапаса = "";
			Состав = "";
			НомерКомандыПартии = "";
			НаличиеМобпредписания  = "";
			ОтношениеКВоинскомуУчету  = "";
			КодПодразделенияДокумента   = "";
			ОтношениеКВоинскойОбязанности = "";
			ВидДокументаУдостоверяющегоЛичность = "";
			
			Файл.ОткрытьФайл(СтрокаИД.ИмяФайла);
			
			Пока ((Файл.ТипУзла <> ТипУзлаXML.НачалоЭлемента) ИЛИ (Файл.Имя <> "РезультатОпроса")) Цикл
				Файл.Прочитать();
			КонецЦикла;
			Если (Файл.ТипУзла <> ТипУзлаXML.НачалоЭлемента) ИЛИ (Файл.Имя <> "РезультатОпроса") Тогда
				Сообщить("Не найдены результаты опроса!");
			КонецЕсли;
			
			Пока Файл.Прочитать() Цикл
				Если (Файл.ТипУзла  = ТипУзлаXML.НачалоЭлемента) и ((Файл.Имя = "Вопрос")) Тогда
					Значение 		= Файл.ПолучитьАтрибут("Ид");
					Если Значение 	= "" Тогда
						Файл.Прочитать();
						Продолжить; // Пустые вопросы пропускаем
					КонецЕсли;
					ПоместитьИсходныеДанныеВОбъект(Файл, ФЛ, ФормаФЛ, Дата(СтрокаИД.Представление));
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли СтрокаИД.ВидДанных = "ФИО" тогда
			
			ФЛ.Наименование = СтрокаИД.Значение;
			
			ФормаФЛ.мНаборЗаписейФИО.Очистить();
			
			ФИО			= ФЛ.Наименование;
			Фамилия		= ОбщегоНазначения.ВыделитьСлово(ФИО);
			Имя			= ОбщегоНазначения.ВыделитьСлово(ФИО);
			Отчество	= ОбщегоНазначения.ВыделитьСлово(ФИО);
			ФЛ.Пол		= ПроцедурыУправленияПерсоналом.ПолучитьПол(Отчество);
				
			ЗаписьНабора          = ФормаФЛ.мНаборЗаписейФИО.Добавить();
			ЗаписьНабора.Период   = Дата('19000101');
			ЗаписьНабора.Фамилия  = Фамилия;
			ЗаписьНабора.Имя      = Имя;
			ЗаписьНабора.Отчество = Отчество;
				
		ИначеЕсли СтрокаИД.ВидДанных = "КИ_адресЭП" тогда
			КИ                  = ФормаФЛ.НаборКонтактнойИнформации;
			КоличествоЗаписей   = КИ.Количество();
			КИЗаписана          = Ложь;
			Для инд = 0 по КоличествоЗаписей - 1 Цикл
				Если КИ[инд].Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты тогда
					Если КИ[инд].Представление =  "" тогда
						КИ[инд].Период          = РабочаяДата;
						КИ[инд].Поле1           = СтрокаИД.Значение;
						КИ[инд].Представление   = СтрокаИД.Значение;
						КИЗаписана = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если НЕ КИЗаписана тогда
				Запись                  = КИ.Добавить();
				Запись.Период           = РабочаяДата;
				Запись.Тип              = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				Запись.Вид              = ВидАдресЭлектроннойПочты;
				Запись.Поле1            = СтрокаИД.Значение;
				Запись.Представление    = СтрокаИД.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ФормаФЛ.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(ФЛ.Ссылка) Тогда
		Возврат ФЛ.Ссылка;
	КонецЕсли; 
	
КонецФункции

Функция ОткрытьПомощникРаботыСОбъектамиПереписки(Имя, СписокАдресов, ПредметКонтакта, Тема, ПереданныеПисьма, УчетнаяЗапись, ПереданныйОбъект = Неопределено) Экспорт
	
	ТипЗначенияПереданныеПисьма = ТипЗнч(ПереданныеПисьма);
	
	Форма = Обработки.МенеджерКонтактов.ПолучитьФорму("ФормаПомощникаРаботыСОбъектами");
	Форма.ОтправительИмя                   = Имя;
	Форма.ПредметКонтакта                  = ПредметКонтакта;
	Форма.Тема                             = Тема;
	Форма.УчетнаяЗапись                    = УчетнаяЗапись;
	
	// Список писем и письмо объект
	Если ТипЗначенияПереданныеПисьма = Тип("СписокЗначений") Тогда
		Форма.СписокПисем   = ПереданныеПисьма;
	ИначеЕсли ТипЗначенияПереданныеПисьма = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
		Форма.СписокПисем.Добавить(ПереданныеПисьма); 
	ИначеЕсли ТипЗначенияПереданныеПисьма = Тип("ДокументОбъект.ЭлектронноеПисьмо") Тогда
		Форма.ПисьмоОбъект = ПереданныеПисьма;
		Форма.СписокПисем.Добавить(ПереданныеПисьма.Ссылка);
	ИначеЕсли ЗначениеЗаполнено(ПредметКонтакта) И ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПредметКонтакта", ПредметКонтакта);
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронноеПисьмо.Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		|ГДЕ
		|	ЭлектронноеПисьмо.ПредметКонтакта = &ПредметКонтакта
		|	И ЭлектронноеПисьмо.УчетнаяЗапись = &УчетнаяЗапись";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Форма.СписокПисем.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
		Форма.ОтобратьПоУказанномуПредмету = Истина;
	КонецЕсли;
	
	Форма.СписокВозможныхФИО.Добавить(Имя);
	
	// Список адресов электронной почты
	Если ТипЗнч(СписокАдресов) = Тип("СписокЗначений") Тогда
		Если СписокАдресов.Количество()>0 Тогда
			Форма.СписокАдресовЭлектроннойПочты = СписокАдресов;
			Форма.ОтправительАдресЭлектроннойПочты = СписокАдресов[0].Значение;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СписокАдресов) = Тип("Строка") И ЗначениеЗаполнено(СписокАдресов) Тогда
		Форма.ОтправительАдресЭлектроннойПочты = СписокАдресов;
		СписокАдресовЭлектроннойПочты = Новый СписокЗначений;
		СписокАдресовЭлектроннойПочты.Добавить(СписокАдресов);
		Форма.СписокАдресовЭлектроннойПочты = СписокАдресовЭлектроннойПочты;
	Иначе
		Для каждого СтрокаСписка из Форма.СписокПисем Цикл
			Письмо = СтрокаСписка.Значение;
			Если Форма.СписокАдресовЭлектроннойПочты.НайтиПоЗначению(Письмо.ОтправительАдресЭлектроннойПочты) = Неопределено Тогда
				Форма.СписокАдресовЭлектроннойПочты.Добавить(Письмо.ОтправительАдресЭлектроннойПочты);
				Форма.ОтправительАдресЭлектроннойПочты = Письмо.ОтправительАдресЭлектроннойПочты;
			КонецЕсли;
			Если Форма.СписокВозможныхФИО.НайтиПоЗначению(Письмо.ОтправительИмя) = Неопределено Тогда
				Форма.СписокВозможныхФИО.Добавить(Письмо.ОтправительИмя);
			КонецЕсли;
			Для каждого СтрокаТЧ из Письмо.КомуТЧ Цикл
				Если Форма.СписокАдресовЭлектроннойПочты.НайтиПоЗначению(СтрокаТЧ.АдресЭлектроннойПочты) = Неопределено Тогда
					ПредствалениеАдреса = ?(ПустаяСтрока(СтрокаТЧ.Представление),СтрокаТЧ.АдресЭлектроннойПочты,СтрокаТЧ.Представление+" <"+СтрокаТЧ.АдресЭлектроннойПочты+">");
					Форма.СписокАдресовЭлектроннойПочты.Добавить(СтрокаТЧ.АдресЭлектроннойПочты,ПредствалениеАдреса);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТЧ.Представление) И Форма.СписокВозможныхФИО.НайтиПоЗначению(СтрокаТЧ.Представление) = Неопределено Тогда
					Форма.СписокВозможныхФИО.Добавить(СтрокаТЧ.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Открытие формы
	Если ЗначениеЗаполнено(ПереданныеПисьма) И ТипЗначенияПереданныеПисьма = Тип("ДокументОбъект.ЭлектронноеПисьмо") Тогда
		ОтветФормы = Форма.ОткрытьМодально();
		
		Если ТипЗнч(ОтветФормы) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Возврат ОтветФормы;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Форма.Открыть();
	КонецЕсли;
	
КонецФункции

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С УЧЕТНЫМИ ЗАПИСЯМИ ЭЛЕКТРОННОЙ ПОЧТЫ

// Функция определяет для текущего пользователя учетные записи, доступ к которым разрешен
//
// Параметры
//  Пользователь - СправочникСсылка.Пользователи, текущий пользователь
//
// Возвращаемое значение:
//   СтруктураВозврата - структура
//   Ключи:
//    - Чтение, список значений, учетные записи доступные для чтения
//    - Запись, список значений, учетные записи доступные для отправки
//    - ГруппыВходящие, список значений, группы писем электронной почты, как входящие в учетной записи
//    - ГруппыИсходящие, список значений, группы писем электронной почты, как исходящие в учетной записи
//    - ГруппыУдаленные, список значений, группы писем электронной почты, как удаленные в учетной записи
//
Функция ПолучитьДоступныеУчетныеЗаписи(Пользователь) Экспорт

	СписокЧтение = Новый СписокЗначений;
	СписокЗапись = Новый СписокЗначений;
	
	ГруппыВходящие      = Новый Соответствие;
	ГруппыИсходящие     = Новый Соответствие;
	ГруппыУдаленные     = Новый Соответствие;
	ГруппыЧерновики     = Новый Соответствие;
	ГруппыНежелательные = Новый Соответствие;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
		
		Если НЕ ЗначениеЗаполнено(Пользователь) ИЛИ Пользователь = ПараметрыСеанса.ТекущийПользователь Тогда
			РольПолныеПрава = РольДоступна("ПолныеПрава");
		Иначе
			РольПолныеПрава = ПользователиИнформационнойБазы.НайтиПоИмени(Пользователь.Код).Роли.Содержит(Метаданные.Роли.ПолныеПрава);
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ТекПользователь", Пользователь);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка                                     КАК УчетнаяЗапись,
		|	УчетныеЗаписиЭлектроннойПочты.Наименование                               КАК УчетнаяЗаписьНаименование,
		|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты                      КАК УчетнаяЗаписьАдресЭлектроннойПочты,
		|	УчетныеЗаписиЭлектроннойПочты.ГруппаВходящие                             КАК УчетнаяЗаписьГруппаВходящие,
		|	УчетныеЗаписиЭлектроннойПочты.ГруппаИсходящие                            КАК УчетнаяЗаписьГруппаИсходящие,
		|	УчетныеЗаписиЭлектроннойПочты.ГруппаУдаленные                            КАК УчетнаяЗаписьГруппаУдаленные,
		|	УчетныеЗаписиЭлектроннойПочты.ГруппаЧерновики                            КАК УчетнаяЗаписьГруппаЧерновики,
		|	УчетныеЗаписиЭлектроннойПочты.ГруппаНежелательные                        КАК УчетнаяЗаписьГруппаНежелательные,";
		
		Если ЗначениеЗаполнено(Пользователь) И НЕ РольПолныеПрава Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ВЫБОР КОГДА УчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Запись ЕСТЬ NULL ТОГДА ЛОЖЬ 
			|		ИНАЧЕ УчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Запись КОНЕЦ КАК Запись";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|	ИСТИНА КАК Запись";
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты";
		
		Если ЗначениеЗаполнено(Пользователь) И НЕ РольПолныеПрава Тогда
			Запрос.Текст = Запрос.Текст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты.ДоступКУчетнойЗаписи КАК УчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи
			|		ПО УчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Ссылка = УчетныеЗаписиЭлектроннойПочты.Ссылка И
			|		УчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Пользователь = &ТекПользователь
			|ГДЕ
			|	(НЕ УчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Ссылка.ПометкаУдаления)
			|";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	(НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления)
			|";
		КонецЕсли; 
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			СписокЧтение.Добавить(Выборка.УчетнаяЗапись, (Выборка.УчетнаяЗаписьНаименование + " <" + Выборка.УчетнаяЗаписьАдресЭлектроннойПочты + ">"));
		
			Если Выборка.Запись = Истина Тогда
				СписокЗапись.Добавить(Выборка.УчетнаяЗапись, (Выборка.УчетнаяЗаписьНаименование + " <" + Выборка.УчетнаяЗаписьАдресЭлектроннойПочты + ">"));
			КонецЕсли; 
		
			Если ЗначениеЗаполнено(Выборка.УчетнаяЗаписьГруппаВходящие) Тогда
				ГруппыВходящие.Вставить(Выборка.УчетнаяЗапись, Выборка.УчетнаяЗаписьГруппаВходящие);
			КонецЕсли; 
		
			Если ЗначениеЗаполнено(Выборка.УчетнаяЗаписьГруппаИсходящие) Тогда
				ГруппыИсходящие.Вставить(Выборка.УчетнаяЗапись, Выборка.УчетнаяЗаписьГруппаИсходящие);
			КонецЕсли; 
		
			Если ЗначениеЗаполнено(Выборка.УчетнаяЗаписьГруппаУдаленные) Тогда
				ГруппыУдаленные.Вставить(Выборка.УчетнаяЗапись, Выборка.УчетнаяЗаписьГруппаУдаленные);
			КонецЕсли; 
		
			Если ЗначениеЗаполнено(Выборка.УчетнаяЗаписьГруппаЧерновики) Тогда
				ГруппыЧерновики.Вставить(Выборка.УчетнаяЗапись, Выборка.УчетнаяЗаписьГруппаЧерновики);
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(Выборка.УчетнаяЗаписьГруппаНежелательные) Тогда
				ГруппыНежелательные.Вставить(Выборка.УчетнаяЗапись, Выборка.УчетнаяЗаписьГруппаНежелательные);
			КонецЕсли; 
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Новый Структура("Чтение, Запись, ГруппыВходящие, ГруппыИсходящие, ГруппыУдаленные, ГруппыЧерновики, ГруппыНежелательные", СписокЧтение, СписокЗапись, ГруппыВходящие, ГруппыИсходящие, ГруппыУдаленные ,ГруппыЧерновики, ГруппыНежелательные);

КонецФункции

// Функция осуществляет поиск данных в контактной информации по адресам электронной почты
//
// Параметры
//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
//  ТаблицаПредставленийКонтактнойИнформации - таблица с исходными данными для поиска по контактной информации
//  ПоИмениОбъекта - Булево, осуществлять поиск по имени или по адресу электронной почты объекта
//
// Возвращаемое значение:
//   ТаблицаЗапроса - ТаблицаЗначений, результат поиска
//
Функция ПоискВКонтактнойИнформации(ТаблицаПредставленийКонтактнойИнформации, ПоИмениОбъекта = Ложь) Экспорт

	Запрос = Новый Запрос;
	
	СтрокаУсловий = "";
	СтрокаУсловийГде = "";
	ИндексУсловия = 0;
	Для каждого СтрокаТаблицы Из ТаблицаПредставленийКонтактнойИнформации Цикл
		СтрокаИндексаУсловия = СтрЗаменить(Строка(ИндексУсловия), Символы.НПП, "");
		Если НЕ ПоИмениОбъекта Тогда
			Если ПустаяСтрока(СтрокаТаблицы.ПредставлениеОбъекта) И ПустаяСтрока(СтрокаТаблицы.АдресЭлектроннойПочты) Тогда
				Продолжить;
			КонецЕсли; 
			Если НЕ ПустаяСтрока(СтрокаУсловий) Тогда
				СтрокаУсловий = СтрокаУсловий + Символы.ПС + " ИЛИ " + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(СтрокаТаблицы.ПредставлениеОбъекта) И НЕ ПустаяСтрока(СтрокаТаблицы.АдресЭлектроннойПочты) Тогда
				СтрокаУсловий = СтрокаУсловий + "(Представление ПОДОБНО &ПредставлениеКонтактнойИнформацииАдрес" + СтрокаИндексаУсловия + 
												" И Объект.Наименование ПОДОБНО &ПредставлениеКонтактнойИнформации" + СтрокаИндексаУсловия + ")";
				Запрос.УстановитьПараметр(("ПредставлениеКонтактнойИнформацииАдрес" + СтрокаИндексаУсловия), (СокрЛП(Строка(СтрокаТаблицы.АдресЭлектроннойПочты)) + "%"));
				Запрос.УстановитьПараметр(("ПредставлениеКонтактнойИнформации" + СтрокаИндексаУсловия), (СокрЛП(Строка(СтрокаТаблицы.ПредставлениеОбъекта)) + "%"));
			ИначеЕсли НЕ ПустаяСтрока(СтрокаТаблицы.ПредставлениеОбъекта) И ПустаяСтрока(СтрокаТаблицы.АдресЭлектроннойПочты) Тогда
				СтрокаУсловий = СтрокаУсловий + "(Объект.Наименование ПОДОБНО &ПредставлениеКонтактнойИнформации" + СтрокаИндексаУсловия + ")";
				Запрос.УстановитьПараметр(("ПредставлениеКонтактнойИнформации" + СтрокаИндексаУсловия), (СокрЛП(Строка(СтрокаТаблицы.ПредставлениеОбъекта)) + "%"));
			ИначеЕсли ПустаяСтрока(СтрокаТаблицы.ПредставлениеОбъекта) И НЕ ПустаяСтрока(СтрокаТаблицы.АдресЭлектроннойПочты) Тогда
				СтрокаУсловий = СтрокаУсловий + "Представление ПОДОБНО &ПредставлениеКонтактнойИнформацииАдрес" + СтрокаИндексаУсловия;
				Запрос.УстановитьПараметр(("ПредставлениеКонтактнойИнформацииАдрес" + СтрокаИндексаУсловия), (СокрЛП(Строка(СтрокаТаблицы.АдресЭлектроннойПочты)) + "%"));
			КонецЕсли; 
		Иначе
			Если НЕ ПустаяСтрока(СтрокаУсловийГде) Тогда
				СтрокаУсловийГде = СтрокаУсловийГде + Символы.ПС + " ИЛИ " + Символы.ПС;
			КонецЕсли;
			СтрокаУсловийГде = СтрокаУсловийГде + "КонтактнаяИнформация.Объект.Наименование ПОДОБНО &ПредставлениеКонтактнойИнформации" + СтрокаИндексаУсловия +
							   " ИЛИ КонтактнаяИнформация.Представление ПОДОБНО &ПредставлениеКонтактнойИнформации" + СтрокаИндексаУсловия;
			Запрос.УстановитьПараметр(("ПредставлениеКонтактнойИнформации" + СтрокаИндексаУсловия), (СокрЛП(Строка(СтрокаТаблицы.ПредставлениеОбъекта)) + "%"));
		КонецЕсли;
		ИндексУсловия = ИндексУсловия + 1;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаУсловий) Тогда
		СтрокаУсловий = " И (" + СтрокаУсловий + ")";
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("Тип"                , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ДатаСреза"          , ТекущаяДата());
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Объект.Наименование КАК ПредставлениеОбъекта,
	|	КонтактнаяИнформация.Объект              КАК Объект,
	|	КонтактнаяИнформация.Вид                 КАК Вид,
	|	КонтактнаяИнформация.Представление       КАК Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &Тип" + СтрокаУсловий + "
	|";
	
	Если Не ПустаяСтрока(СтрокаУсловийГде) Тогда
		Запрос.Текст = Запрос.Текст + "
		|И
		|	(" + СтрокаУсловийГде + ")
		|";
	КонецЕсли; 
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка Из ТаблицаЗапроса Цикл
		Строка.ПредставлениеОбъекта = СтрЗаменить(Строка.ПредставлениеОбъекта, ",", "");
		Строка.Представление        = СтрЗаменить(Строка.Представление, ",", "");
	КонецЦикла; 
	
	Возврат ТаблицаЗапроса;

КонецФункции // ОбъектыКонтактнойИнформации()

// Функция возвращает ссылку (или значение Неопределено) на объект по переданному электронному адресу
// и представлению объекта
Функция ПолучитьОбъектПоЭлектронномуАдресу(Адрес,Представление="") Экспорт
	
	ДанныеОтправителя = Новый ТаблицаЗначений;
	ДанныеОтправителя.Колонки.Добавить("ПредставлениеОбъекта");
	ДанныеОтправителя.Колонки.Добавить("АдресЭлектроннойПочты");
	Строка = ДанныеОтправителя.Добавить();
	Строка.АдресЭлектроннойПочты = Адрес;
	Строка.ПредставлениеОбъекта  = Представление;
	
	НайденныеОбъекты = ПоискВКонтактнойИнформации(ДанныеОтправителя);
	
	Если НайденныеОбъекты.Количество()>0 Тогда
		Возврат  НайденныеОбъекты[0].Объект;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура вызывается по событию НачалоВыбораИзСписка
// у полей ввода, в которых редактируются даты со временем.
// 
//  Параметры
//   ЭлементУправления - ПолеВвода, в котором редактируется значение даты
//   ЭтаФорма - Форма
//   Пользователь - СправочникСсылка.Пользователи
//   СтандартнаяОбработка - булево
//   ПолныйГод - Булево, предсавление года даты в списке выбора
//
Процедура ВыбратьОтложенноеВремяИзСписка(ЭлементУправления) Экспорт

	СписокВремен  = ЭлементУправления.СписокВыбора;
	Если СписокВремен.Количество() > 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СписокВремен.Добавить("Через30минут"          , "Через 30 минут");
	СписокВремен.Добавить("ЧерезЧас"              , "Через 1 час");
	СписокВремен.Добавить("Через2Часа"            , "Через 2 часа");
	СписокВремен.Добавить("Завтра"                , "Завтра");
	СписокВремен.Добавить("Послезавтра"           , "Послезавтра");
	СписокВремен.Добавить("НачалоСледующейНедели" , "Начало следующей недели");
	СписокВремен.Добавить("ЧерезНеделю"           , "Через неделю");
	СписокВремен.Добавить("Через2Недели"          , "Через 2 недели");
	СписокВремен.Добавить("НачалоСледующегоМесяца", "Начало следующего месяца");
	СписокВремен.Добавить("ЧерезМесяц"            , "Через месяц");
	
КонецПроцедуры

Процедура ОбработкаВыбораВремениИзСписка(ЭлементУправления, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
	
		СтандартнаяОбработка = Ложь;
	
		Если ВыбранноеЗначение = "Через30минут" Тогда
			ЭлементУправления.Значение = ТекущаяДата() + 60*30;
		ИначеЕсли ВыбранноеЗначение = "ЧерезЧас" Тогда
			ЭлементУправления.Значение = ТекущаяДата() + 60*60;
		ИначеЕсли ВыбранноеЗначение = "Через2Часа" Тогда
			ЭлементУправления.Значение = ТекущаяДата() + 60*60*2;
		ИначеЕсли ВыбранноеЗначение = "Завтра" Тогда
			ЭлементУправления.Значение = КонецДня(ТекущаяДата()) + 1;
		ИначеЕсли ВыбранноеЗначение = "Послезавтра" Тогда
			ЭлементУправления.Значение = КонецДня(ТекущаяДата() + 60*60*24) + 1;
		ИначеЕсли ВыбранноеЗначение = "НачалоСледующейНедели" Тогда
			ЭлементУправления.Значение = КонецНедели(ТекущаяДата()) + 1;
		ИначеЕсли ВыбранноеЗначение = "ЧерезНеделю" Тогда
			ЭлементУправления.Значение = НачалоДня(ТекущаяДата() + 60*60*24*7);
		ИначеЕсли ВыбранноеЗначение = "Через2Недели" Тогда
			ЭлементУправления.Значение = НачалоДня(ТекущаяДата() + 60*60*24*7*2);
		ИначеЕсли ВыбранноеЗначение = "НачалоСледующегоМесяца" Тогда
			ЭлементУправления.Значение = КонецМесяца(ТекущаяДата()) + 1;
		ИначеЕсли ВыбранноеЗначение = "ЧерезМесяц" Тогда
			ЭлементУправления.Значение = НачалоДня(ДобавитьМесяц(ТекущаяДата(), 1));
		КонецЕсли;
	
	КонецЕсли; 

КонецПроцедуры

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ИсключитьПрефиксыТемыПисьма(Знач Тема) Экспорт

	// Предполагаем что в теме письма могут быть префиксы типа FW, FWD или RE
	
	ТемаВрег = Врег(Тема);
	
	СписокВозможныхПрефиксов = Новый СписокЗначений;
	СписокВозможныхПрефиксов.Добавить("FW");
	СписокВозможныхПрефиксов.Добавить("FWD");
	СписокВозможныхПрефиксов.Добавить("RE");
	
	ПерваяПозицияТемы = 0;
	
	Для каждого ЭлементСписка Из СписокВозможныхПрефиксов Цикл
	
		Пока СтрЧислоВхождений(ТемаВрег, ЭлементСписка.Значение) > 0 Цикл
		
			ПозицияСимвола = Найти(ТемаВрег, ЭлементСписка.Значение);
			
			Для а = ПозицияСимвола По СтрДлина(ТемаВрег) Цикл
				Если Сред(ТемаВрег, а, 1) = ":" Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла;
			
			ПерваяПозицияТемы = ПерваяПозицияТемы + а;
			
			ТемаВрег = Сред(ТемаВрег, (а + 1));
		
		КонецЦикла;
	
	КонецЦикла;
	
	Если ПерваяПозицияТемы > 0 И ПерваяПозицияТемы < СтрДлина(Тема) Тогда
		ПреобразованнаяТема = СокрЛП(Сред(Тема, (ПерваяПозицияТемы + 1)));
	Иначе
		ПреобразованнаяТема = СокрЛП(Тема);
	КонецЕсли;
	
	Возврат ПреобразованнаяТема;
	
КонецФункции // ИсключитьПрефиксыТемыПисьма()

// Функция возвращает текст по переданному шаблону
//
Функция ВернутьТекстПоОбъкту(Объект,ТекстШаблона) Экспорт
	
	СимволНачала    = "{%";
	СимволОкончания = "}";
	
	ВозвращаемыйТекст = "";
	
	Если  СтрЧислоВхождений(ТекстШаблона,СимволНачала) > 0 Тогда
		Для а=1 по СтрЧислоСтрок(ТекстШаблона) Цикл
			ТекущаяСтрока = СтрПолучитьСтроку(ТекстШаблона,а);
			ПозицияСимволаНачала = Найти(ТекущаяСтрока,СимволНачала);
			
			Пока ПозицияСимволаНачала > 0 Цикл
				ПозицияСимволаОкончания = Найти(ТекущаяСтрока,СимволОкончания);
				
				ТекущаяСтрокаДо = Лев(ТекущаяСтрока,ПозицияСимволаНачала-1);
				ТекущаяСтрокаПосле = Прав(ТекущаяСтрока,СтрДлина(ТекущаяСтрока)-ПозицияСимволаОкончания);
				
				СтрокаПараметра = Сред(ТекущаяСтрока,ПозицияСимволаНачала+2,ПозицияСимволаОкончания-ПозицияСимволаНачала-2);
				
				Попытка
					ЗначениеПараметра = "";
					Выполнить("ЗначениеПараметра = "+СтрокаПараметра);
					СтрокаПараметра = СокрЛП(ЗначениеПараметра);
				Исключение
					Сообщить("Не удалось рассчитать параметр: "+СтрокаПараметра);
				КонецПопытки;
				
				ТекущаяСтрока = ТекущаяСтрокаДо + СтрокаПараметра + ТекущаяСтрокаПосле;
				
				ПозицияСимволаНачала = Найти(ТекущаяСтрока,СимволНачала);
			КонецЦикла; 
			
			ВозвращаемыйТекст = ВозвращаемыйТекст + ТекущаяСтрока;
		КонецЦикла;
	Иначе
		Возврат ТекстШаблона;
	КонецЕсли;
	
	Возврат ВозвращаемыйТекст;
	
КонецФункции

Функция ПолучитьЗначениеРеквизитаУчетнойЗаписи(УчетнаяЗапись, ИмяРеквизита) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ " + ИмяРеквизита + " КАК ЗначениеРеквизита ИЗ Справочник.УчетныеЗаписиЭлектроннойПочты
	|ГДЕ Ссылка = &УчетнаяЗапись";
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗначениеРеквизита;
	Иначе
		Возврат Неопределено;
	КонецЕсли
КонецФункции
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ

#Если Клиент Тогда

// Открывает для выбора список доков ЗарплатаКВыплатеОрганизаций конкретной организации
//
// Параметры
//  Элемент - поле ввода, в котором выбирается платежная ведомость 
//  СтандартнаяОбработка - булево, признак стандартной обработки события
//  Организация - СправочникСсылка.Организации, организация ведости которой надо выбрать
//  СпособыВыплатыЗарплаты - ПеречислениеСсылка.СпособыВыплатыЗарплаты - дополнительное ограничение на список ведомостей
//  Банк - СправочникСсылка.Контрагенты, отбор по банку указанный в ведомости, если предусмотрен
//
Процедура ОткрытьФормуВыбораПлатежныхВедомостейОрганизации(Элемент, СтандартнаяОбработка, Организация, СпособыВыплатыЗарплаты, Банк = Неопределено) Экспорт

	СтандартнаяОбработка  = Ложь;
	
	ФормаВыбора = Документы.ЗарплатаКВыплатеОрганизаций.ПолучитьФормуВыбора(, Элемент);
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;	
	
	ФормаВыбора.Отбор.Организация.ВидСравнения	= ВидСравнения.Равно;
	ФормаВыбора.Отбор.Организация.Значение		= Организация;
	ФормаВыбора.Отбор.Организация.Использование	= Истина;
	
	ФормаВыбора.Отбор.СпособВыплаты.ВидСравнения	= ВидСравнения.Равно;
	ФормаВыбора.Отбор.СпособВыплаты.Значение		= СпособыВыплатыЗарплаты;
	ФормаВыбора.Отбор.СпособВыплаты.Использование	= Истина;
	
	Если Банк <> Неопределено Тогда
		
		ФормаВыбора.Отбор.Банк.ВидСравнения		= ВидСравнения.Равно;
		ФормаВыбора.Отбор.Банк.Значение			= Банк;
		ФормаВыбора.Отбор.Банк.Использование	= Истина;
		
	КонецЕсли; 
	
	ФормаВыбора.Открыть();
	

КонецПроцедуры // ОткрытьФормуВыбораКассовыхПлатежныхВедомостейОрганизации()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры, функции

Функция ПолучитьРежимНабораПерсонала() Экспорт
	
	ИспользоватьУправленческийУчетЗарплаты = глЗначениеПеременной("глИспользоватьУправленческийУчетЗарплаты");
	
	Если НЕ ИспользоватьУправленческийУчетЗарплаты Тогда
		
		РежимНабораПерсонала = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц;
		
	Иначе
		
		РежимНабораПерсонала = Константы.РежимНабораПерсонала.Получить();
		
		Если НЕ ЗначениеЗаполнено(РежимНабораПерсонала) Тогда
			РежимНабораПерсонала	= Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоЦентрамОтветственности;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РежимНабораПерсонала;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ формирования движений кадровых документов по плановым начислениям работников организации

// Процедура строит список должностей (или подразделений), по кадровому плану предприятия.
//
// Параметры: 
//  Режим - строка, может принимать значения: "Должность" или "Подразделение" определяет, что именно 
//			будет выбирать пользователь
//  ДолжностьИлиПодразделение - СправочникСсылка.Подразделения или СправочникСсылка.Должности,  
//			второе значение в текущей строке т.п.
//
// Возвращаемое значение
//  нет
//
Функция ВыбратьИзКадровогоПланаПредприятия(Режим, ДолжностьИлиПодразделение) Экспорт
	
	Запрос = Новый Запрос;
	
	Если НЕ ЗначениеЗаполнено(ДолжностьИлиПодразделение) Тогда
		Возврат Новый СписокЗначений 
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ДолжностьИлиПодразделение",ДолжностьИлиПодразделение);
		
	Если Режим = "Подразделение" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыйПланСрезПоследних.Подразделение КАК Элемент,
		|	КадровыйПланСрезПоследних.Подразделение.Наименование КАК ЭлементНаименование
		|ИЗ
		|	РегистрСведений.КадровыйПлан.СрезПоследних(
		|		,
		|		Должность В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ДолжностиОрганизаций.Ссылка
		|			ИЗ
		|				Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
		|			ГДЕ
		|				ДолжностиОрганизаций.Должность = &ДолжностьИлиПодразделение)) КАК КадровыйПланСрезПоследних
		|ГДЕ
		|	КадровыйПланСрезПоследних.Количество > 0";
		
	ИначеЕсли Режим = "Должность" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДолжностиОрганизаций.Ссылка КАК Элемент,
		|	ДолжностиОрганизаций.Наименование КАК ЭлементНаименование
		|ИЗ
		|	Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
		|ГДЕ
		|	ДолжностиОрганизаций.Должность В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				КадровыйПланСрезПоследних.Должность
		|			ИЗ
		|				РегистрСведений.КадровыйПлан.СрезПоследних(, Подразделение = &ДолжностьИлиПодразделение) КАК КадровыйПланСрезПоследних
		|			ГДЕ
		|				КадровыйПланСрезПоследних.Количество > 0)";
		
	Иначе
		Возврат Новый СписокЗначений 
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый СписокЗначений 
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	СписокВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Элемент, Выборка.ЭлементНаименование);	
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции // ВыбратьИзКадровогоПланаПредприятия

// Возвращает структуру с данными по выбранному работнику 
// Парамтеры:
//	Сотрудник - ссылка на справочник Сотрудники
//	ВыбираемыеДанные - строка, признак того, что нужно выбирать данные из регистров Работники и/или УчетЗаработкаРаботников
//
// Возвращаемое значение:
//  Структура с элементами
//		всегда присуствует 
//			Физлицо
//		если ВыбираемыеДанные содержит строку "Работники"
//			Подразделение
//			Должность
//			ГрафикРаботы
//			ЗанимаемыхСтавок
//		если ВыбираемыеДанные содержит строку "УчетЗаработкаРаботников"
//			СпособОтраженияВУпрУчете
//			УчетНачисленийПоОрганизации
//
Функция СведенияПоВыбранномуРаботнику(Сотрудник, ВыбираемыеДанные) Экспорт
	
	// Получим данные из среза последних
	ВыбиратьРаботники = Найти(ВыбираемыеДанные, "Работники") > 0;
	ВыбиратьУчетЗаработкаРаботников = Найти(ВыбираемыеДанные, "УчетЗаработкаРаботников") > 0;
	
	Запрос = Новый Запрос;
	Если ВыбиратьРаботники Тогда
		Если Не ВыбиратьУчетЗаработкаРаботников Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	&Сотрудник КАК Сотрудник,
			|	Работники.Подразделение,
			|	Работники.Должность,
			|	Работники.ГрафикРаботы,
			|	Работники.ЗанимаемыхСтавок
			|ИЗ
			|	РегистрСведений.Работники.СрезПоследних(
			|		,
			|		Физлицо В
			|			(ВЫБРАТЬ
			|				СотрудникиОрганизаций.Физлицо
			|			ИЗ
			|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|			ГДЕ
			|				СотрудникиОрганизаций.Ссылка = &Сотрудник)) КАК Работники";
			
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	&Сотрудник КАК Сотрудник,
			|	Работники.Подразделение,
			|	Работники.Должность,
			|	Работники.ГрафикРаботы,
			|	Работники.ЗанимаемыхСтавок,
			|	УчетЗаработкаРаботников.СпособОтраженияВУпрУчете,
			|	УчетЗаработкаРаботников.УчетНачисленийПоОрганизации
			|ИЗ
			|	РегистрСведений.Работники.СрезПоследних(
			|		,
			|		Физлицо В
			|			(ВЫБРАТЬ
			|				СотрудникиОрганизаций.Физлицо
			|			ИЗ
			|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|			ГДЕ
			|				СотрудникиОрганизаций.Ссылка = &Сотрудник)) КАК Работники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(
			|		,
			|		Физлицо В
			|			(ВЫБРАТЬ
			|				СотрудникиОрганизаций.Физлицо
			|			ИЗ
			|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|			ГДЕ
			|				СотрудникиОрганизаций.Ссылка = &Сотрудник)) КАК УчетЗаработкаРаботников
			|		ПО (ИСТИНА)";
		КонецЕсли;
		
	ИначеЕсли ВыбиратьУчетЗаработкаРаботников Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Сотрудник КАК Сотрудник,
		|	УчетЗаработкаРаботников.СпособОтраженияВУпрУчете,
		|	УчетЗаработкаРаботников.УчетНачисленийПоОрганизации
		|ИЗ
		|	РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(
		|		,
		|		Физлицо В
		|			(ВЫБРАТЬ
		|				СотрудникиОрганизаций.Физлицо
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|			ГДЕ
		|				СотрудникиОрганизаций.Ссылка = &Сотрудник)) КАК УчетЗаработкаРаботников";
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Сотрудник КАК Сотрудник,
		|	Работники.ФизЛицо
		|ИЗ
		|	РегистрСведений.Работники.СрезПоследних(
		|		,
		|		Физлицо В
		|			(ВЫБРАТЬ
		|				СотрудникиОрганизаций.Физлицо
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|			ГДЕ
		|				СотрудникиОрганизаций.Ссылка = &Сотрудник)) КАК Работники";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
		
	Иначе
		Если ВыбиратьРаботники Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ВыбранныйНаборДанных = Новый Структура("Сотрудник, Подразделение, Должность, ГрафикРаботы, ЗанимаемыхСтавок");
			ВыбранныйНаборДанных.Сотрудник			= Выборка.Сотрудник;
			ВыбранныйНаборДанных.Подразделение		= Выборка.Подразделение;
			ВыбранныйНаборДанных.Должность			= Выборка.Должность;
			ВыбранныйНаборДанных.ГрафикРаботы		= Выборка.ГрафикРаботы;
			ВыбранныйНаборДанных.ЗанимаемыхСтавок	= Выборка.ЗанимаемыхСтавок;
			Если ВыбиратьУчетЗаработкаРаботников Тогда
				ВыбранныйНаборДанных.Вставить("СпособОтраженияВУпрУчете",		Выборка.СпособОтраженияВУпрУчете);
				ВыбранныйНаборДанных.Вставить("УчетНачисленийПоОрганизации",	Выборка.УчетНачисленийПоОрганизации);
			КонецЕсли;
			
		ИначеЕсли ВыбиратьУчетЗаработкаРаботников Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ВыбранныйНаборДанных = Новый Структура("Сотрудник, СпособОтраженияВУпрУчете, УчетНачисленийПоОрганизации");
			ВыбранныйНаборДанных.Сотрудник						= Выборка.Сотрудник;
			ВыбранныйНаборДанных.СпособОтраженияВУпрУчете		= Выборка.СпособОтраженияВУпрУчете;
			ВыбранныйНаборДанных.УчетНачисленийПоОрганизации	= Выборка.УчетНачисленийПоОрганизации;
			
		Иначе
			ВыбранныйНаборДанных = Новый Структура("Сотрудник");
			ВыбранныйНаборДанных.Сотрудник	= Выборка.Сотрудник;
			
		КонецЕсли;
		
		Возврат ВыбранныйНаборДанных;
		
	КонецЕсли;
	
КонецФункции // СведенияПоВыбранномуРаботнику

// Открывает форму ввода на основании
//
Процедура ВводРегламентированногоКадровогоДокументаНаОсновании(Основание) Экспорт
	
	Если Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаВводаНаОсновании = Обработки.ВводРегламентированныхКадровыхДокументовНаОсновании.ПолучитьФорму();
	
	ФормаВводаНаОсновании.Основание = Основание;
	
	ФормаВводаНаОсновании.Открыть();
	
КонецПроцедуры

Процедура ПолучитьОшибкиПериодовРаботыСотрудникаБезДоговора(Регистратор, УчитыватьРегистратор, МассивФизлица, СообщенияОбОшибках, ОшибкиПериодов) Экспорт
	
	Запрос = Новый Запрос;
	
	ТаблицаПериодов = ПроцедурыУправленияПерсоналом.ПериодыИспользованияРесурсов("ПериодыРаботыРаботников", , , "Периоды.Физлицо В (&Физлица)", УчитыватьРегистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистратор1,
	|	Регистратор2,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор1) КАК ПредставлениеРегистратор1,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор2) КАК ПредставлениеРегистратор2,
	|	Физлицо,
	|	Физлицо.Наименование КАК ФизлицоНаименование,
	|	ДатаНачала,
	|	ДатаОкончания
	|ИЗ
	|	(" + ТаблицаПериодов + ") КАК Периоды
	|УПОРЯДОЧИТЬ ПО
	|	ФизлицоНаименование,
	|	ДатаНачала";
	
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	Запрос.УстановитьПараметр("Физлица",		МассивФизлица);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// обработаем периоды
	ТекущееФизлицо						= Неопределено;
	ПоследняяДатаНачала					= '0001-01-01';
	ПоследняяДатаОкончания				= '0001-01-01';
	ПоследнийРегистратор1				= Неопределено;
	ПоследнийРегистратор2				= Неопределено;
	ПоследнийПредставлениеРегистратор1	= "";
	ПоследнийПредставлениеРегистратор2	= "";
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущееФизлицо <> Выборка.Физлицо Тогда
			ТекущееФизлицо = Выборка.Физлицо;
			
		ИначеЕсли (ПоследняяДатаОкончания > Выборка.ДатаНачала) ИЛИ (ПоследняяДатаОкончания = '0001-01-01') Тогда
			Если ОшибкиПериодов <> НеОпределено Тогда
				ОшибкиПериодов[Выборка.Физлицо] = 0;
			КонецЕсли;
			// сообщения формируем для переданного регистратора или все, если регистратор не задан 
			Если СообщенияОбОшибках <> НеОпределено и
				(	Регистратор = НеОпределено ИЛИ
					ПоследнийРегистратор1 = Регистратор ИЛИ
					ПоследнийРегистратор2 = Регистратор ИЛИ
					Выборка.Регистратор1 = Регистратор ИЛИ
					Выборка.Регистратор2 = Регистратор) Тогда
				СообщениеОбОшибке = Новый Структура("Физлицо, 
													|ДатаНачала, 
													|ДатаОкончания, 
													|ДатаНачалаПред, 
													|ДатаОкончанияПред, 
													|Регистратор1, 
													|Регистратор2, 
													|ПослРегистратор1, 
													|ПослРегистратор2,
													|Регистратор1Ссылка, 
													|Регистратор2Ссылка, 
													|ПослРегистратор1Ссылка, 
													|ПослРегистратор2Ссылка");
				СообщениеОбОшибке.Физлицо			= Выборка.ФизлицоНаименование;
				СообщениеОбОшибке.ДатаНачала		= Выборка.ДатаНачала;
				СообщениеОбОшибке.ДатаОкончания		= Выборка.ДатаОкончания;
				СообщениеОбОшибке.ДатаНачалаПред	= ПоследняяДатаНачала;
				СообщениеОбОшибке.ДатаОкончанияПред	= ПоследняяДатаОкончания;
				
				СообщениеОбОшибке.Регистратор1Ссылка 		= Выборка.Регистратор1;
				СообщениеОбОшибке.Регистратор2Ссылка 		= Выборка.Регистратор2;
				СообщениеОбОшибке.ПослРегистратор1Ссылка 	= ПоследнийРегистратор1;
				СообщениеОбОшибке.ПослРегистратор2Ссылка 	= ПоследнийРегистратор2;
				
				Если Выборка.Регистратор1 = Регистратор Тогда
					СообщениеОбОшибке.Регистратор1 = Выборка.ПредставлениеРегистратор1 + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор1 = "" + Выборка.ПредставлениеРегистратор1;
				КонецЕсли;
				
				Если Выборка.Регистратор2 = Регистратор Тогда
					СообщениеОбОшибке.Регистратор2 = Выборка.ПредставлениеРегистратор2 + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор2 = "" + Выборка.ПредставлениеРегистратор2;
				КонецЕсли;
				
				Если Выборка.Регистратор1 <> ПоследнийРегистратор1 
					и Выборка.Регистратор2 <> ПоследнийРегистратор1 Тогда
					Если ПоследнийРегистратор1 = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор1 = ПоследнийПредставлениеРегистратор1 + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор1 = "" + ПоследнийПредставлениеРегистратор1;
					КонецЕсли;
				КонецЕсли;
				
				Если Выборка.Регистратор1 <> ПоследнийРегистратор2 
					и Выборка.Регистратор2 <> ПоследнийРегистратор2 Тогда
					Если ПоследнийРегистратор2 = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор2 = ПоследнийПредставлениеРегистратор2 + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор2 = "" + ПоследнийПредставлениеРегистратор2;
					КонецЕсли;
				КонецЕсли;
				
				СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
				
			КонецЕсли;
		КонецЕсли;
		
		ПоследнийРегистратор1				= Выборка.Регистратор1;
		ПоследнийРегистратор2				= Выборка.Регистратор2;
		ПоследнийПредставлениеРегистратор1	= Выборка.ПредставлениеРегистратор1;;
		ПоследнийПредставлениеРегистратор2	= Выборка.ПредставлениеРегистратор2;
		ПоследняяДатаНачала					= Выборка.ДатаНачала;
		ПоследняяДатаОкончания				= Выборка.ДатаОкончания;
	КонецЦикла;
	
КонецПроцедуры

Функция ПериодыИспользованияПомещений(ДатаНачала = Неопределено, ДатаОкончания = Неопределено, Условие = "", УчитыватьРегистратор = Истина) Экспорт
	
	Текст =
	"ВЫБРАТЬ
	|	Периоды.Регистратор,
	|	Периоды.Помещение,
	|	Периоды.ДатаНачала,
	|	Периоды.ДатаОкончания
	|ИЗ
	|	РегистрСведений.ПериодыЗанятостиПомещений КАК Периоды
	|ГДЕ
	|	Периоды.ДатаНачала <> ДАТАВРЕМЯ(1,1,1)
	|	И Периоды.ДатаОкончания <> ДАТАВРЕМЯ(1,1,1)";
	Если Не ПустаяСтрока(Условие) Тогда
	Текст = Текст + "
	|	И " + Условие;
	КонецЕсли;
	Если Не УчитыватьРегистратор Тогда
	Текст = Текст + "
	|	И Периоды.Регистратор <> &Регистратор";
	КонецЕсли;
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
	Текст = Текст + "
	|	И (";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
	Текст = Текст + "Периоды.ДатаНачала >= &" + ДатаНачала + "
	|	";
	КонецЕсли;
	Если ДатаОкончания <> Неопределено Тогда
	Если ДатаНачала <> Неопределено Тогда
	Текст = Текст + "И ";
	КонецЕсли;
	Текст = Текст + "Периоды.ДатаНачала <= &" + ДатаОкончания + "
	|	";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
	Текст = Текст + "ИЛИ &ДатаНачала >= Периоды.ДатаНачала
	|	И &ДатаНачала <= Периоды.ДатаОкончания";
	КонецЕсли;
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
	Текст = Текст + ")";
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Процедура ПолучитьОшибкиПериодовЗанятостиПомещения(Регистратор, УчитыватьРегистратор, МассивПомешения, СообщенияОбОшибках, ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	ТекстДатаНачала		= Неопределено;
	ТекстДатаОкончания	= Неопределено;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ТекстДатаНачала		= "ДатаНачала";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ТекстДатаОкончания	= "ДатаОкончания";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТаблицаПериодов = ПериодыИспользованияПомещений(ТекстДатаНачала, ТекстДатаОкончания, "Периоды.Помещение В (&Помещения)", УчитыватьРегистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор) КАК ПредставлениеРегистратор,
	|	Помещение,
	|	Помещение.Наименование КАК ПомещениеНаименование,
	|	ДатаНачала,
	|	ДатаОкончания
	|ИЗ
	|	(" + ТаблицаПериодов + ") КАК Периоды
	|УПОРЯДОЧИТЬ ПО
	|	ПомещениеНаименование,
	|	ДатаНачала";
	
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	Запрос.УстановитьПараметр("Помещения",		МассивПомешения);
	Запрос.УстановитьПараметр("ДатаНачала",		ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	ДатаОкончания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// обработаем периоды
	ТекущееПомещение					= Неопределено;
	ПоследняяДатаНачала					= '0001-01-01';
	ПоследняяДатаОкончания				= '0001-01-01';
	ПоследнийРегистратор				= Неопределено;
	ПоследнийПредставлениеРегистратор	= "";
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущееПомещение <> Выборка.Помещение Тогда
			ТекущееПомещение = Выборка.Помещение;
			
		ИначеЕсли (ПоследняяДатаОкончания > Выборка.ДатаНачала) ИЛИ (ПоследняяДатаОкончания = '0001-01-01') Тогда
			// сообщения формируем для переданного регистратора или все, если регистратор не задан 
			Если СообщенияОбОшибках <> НеОпределено и
				(	Регистратор = НеОпределено ИЛИ
					ПоследнийРегистратор = Регистратор ИЛИ
					Выборка.Регистратор = Регистратор) Тогда
				СообщениеОбОшибке = Новый Структура("Помещение,
													|ДатаНачала,
													|ДатаОкончания,
													|ДатаНачалаПред,
													|ДатаОкончанияПред,
													|Регистратор,
													|ПослРегистратор,
													|РегистраторСсылка,
													|ПослРегистраторСсылка");
				СообщениеОбОшибке.Помещение			= Выборка.ПомещениеНаименование;
				СообщениеОбОшибке.ДатаНачала		= Выборка.ДатаНачала;
				СообщениеОбОшибке.ДатаОкончания		= Выборка.ДатаОкончания;
				СообщениеОбОшибке.ДатаНачалаПред	= ПоследняяДатаНачала;
				СообщениеОбОшибке.ДатаОкончанияПред	= ПоследняяДатаОкончания;
				
				СообщениеОбОшибке.РегистраторСсылка 		= Выборка.Регистратор;
				СообщениеОбОшибке.ПослРегистраторСсылка 	= ПоследнийРегистратор;
				
				Если Выборка.Регистратор = Регистратор Тогда
					СообщениеОбОшибке.Регистратор = Выборка.ПредставлениеРегистратор + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор = "" + Выборка.ПредставлениеРегистратор;
				КонецЕсли;
				
				Если Выборка.Регистратор <> ПоследнийРегистратор Тогда
					Если ПоследнийРегистратор = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор = ПоследнийПредставлениеРегистратор + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор = "" + ПоследнийПредставлениеРегистратор;
					КонецЕсли;
				КонецЕсли;
				
				СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
				
			КонецЕсли;
		КонецЕсли;
		
		ПоследнийРегистратор				= Выборка.Регистратор;
		ПоследнийПредставлениеРегистратор	= Выборка.ПредставлениеРегистратор;
		ПоследняяДатаНачала					= Выборка.ДатаНачала;
		ПоследняяДатаОкончания				= Выборка.ДатаОкончания;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ОСТАТКИ ОТПУСКОВ УПР. УЧЕТА

// Процедура формирует временную таблицу, в которую записывает переданную таблицу периодов
//
Процедура ПодготовитьТаблицуПериодов(Запрос, ТаблицаПериодов, ИспользоватьФизлицо = Ложь, ЕстьРегистратор = Ложь)
	
	Запрос.УстановитьПараметр("Таблица",	ТаблицаПериодов);
	
	ВключатьЗапланированныеОтпуска = ТаблицаПериодов.Колонки.Найти("План") <> Неопределено;
	
	РеквизитПлан = ?(ВключатьЗапланированныеОтпуска, "ТаблицаПериодов.План,", "ЛОЖЬ КАК План,");
	
	Если Не ИспользоватьФизлицо Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	" + РеквизитПлан + "
		|	ТаблицаПериодов.НомерСтроки,
		|	ТаблицаПериодов.Сотрудник,
		|	ТаблицаПериодов.ДатаНачала,
		|	ТаблицаПериодов.ДатаОкончания
		|ПОМЕСТИТЬ ВТТаблица
		|ИЗ
		|	&Таблица КАК ТаблицаПериодов";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	" + РеквизитПлан + "
		|	ТаблицаПериодов.НомерСтроки,
		|	ТаблицаПериодов.Сотрудник.Физлицо КАК Сотрудник,
		|	ТаблицаПериодов.ДатаНачала,
		|	ТаблицаПериодов.ДатаОкончания
		|ПОМЕСТИТЬ ВТТаблицаПериодов
		|ИЗ
		|	ВТТаблица КАК ТаблицаПериодов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	НомерСтроки";
		Запрос.Выполнить();
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	" + РеквизитПлан + "
		|	ТаблицаПериодов.НомерСтроки,
		|	ТаблицаПериодов.Сотрудник,
		|	ТаблицаПериодов.ДатаНачала,
		|	ТаблицаПериодов.ДатаОкончания
		|ПОМЕСТИТЬ ВТТаблицаПериодов
		|ИЗ
		|	&Таблица КАК ТаблицаПериодов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	НомерСтроки";
		Запрос.Выполнить();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует временную таблицу, которая содержит актуальные для таблицы периодов остатки
//
// Так как функция вспомогательная, вызываться будет из процедуры, в которой во временную таблицу
// уже помещена таблица периодов. Поэтому, в функцию передается запрос с этой таблицей
//
Процедура ПодготовитьТаблицуАктуальныхОстатков(Запрос, ИспользоватьОстатки)
	
	Если ИспользоватьОстатки Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиОтпусковОстатки.Ссылка,
		|	ОстаткиПериод.Физлицо КАК Физлицо,
		|	ОстаткиПериод.НомерСтроки КАК НомерСтроки,
		|	ОстаткиПериод.ДатаОстатков,
		|	ОстаткиОтпусковОстатки.Количество,
		|	ОстаткиОтпусковОстатки.ДатаНачалаРабочегоГода,
		|	ОстаткиОтпусковОстатки.ДатаОкончанияРабочегоГода
		|ПОМЕСТИТЬ ВТАктуальныеОстатки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОстаткиОтпусковОстатки.Физлицо КАК Физлицо,
		|		ОстаткиОтпусковОстатки.НомерСтроки КАК НомерСтроки,
		|		МАКСИМУМ(ОстаткиОтпусковОстатки.ДатаОстатков) КАК ДатаОстатков
		|	ИЗ
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ОстаткиОтпусковОстатки.Ссылка КАК Ссылка,
		|			ОстаткиОтпусковОстатки.Ссылка.Физлицо КАК Физлицо,
		|			ТаблицаПериодов.НомерСтроки КАК НомерСтроки,
		|			ОстаткиОтпусковОстатки.Ссылка.ДатаАктуальности КАК ДатаОстатков
		|		ИЗ
		|			Справочник.ОстаткиОтпусков.Остатки КАК ОстаткиОтпусковОстатки
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаПериодов КАК ТаблицаПериодов
		|				ПО ОстаткиОтпусковОстатки.ДатаОкончанияРабочегоГода <= ТаблицаПериодов.ДатаОкончания
		|					И ОстаткиОтпусковОстатки.Ссылка.Физлицо = ТаблицаПериодов.Сотрудник) КАК ОстаткиОтпусковОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ОстаткиОтпусковОстатки.Ссылка КАК Ссылка,
		|				ТаблицаПериодов.НомерСтроки КАК НомерСтроки
		|			ИЗ
		|				Справочник.ОстаткиОтпусков.Остатки КАК ОстаткиОтпусковОстатки
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаПериодов КАК ТаблицаПериодов
		|					ПО ОстаткиОтпусковОстатки.ДатаОкончанияРабочегоГода > ТаблицаПериодов.ДатаОкончания
		|						И ОстаткиОтпусковОстатки.Ссылка.Физлицо = ТаблицаПериодов.Сотрудник) КАК ОстаткиНеВключать
		|			ПО ОстаткиОтпусковОстатки.НомерСтроки = ОстаткиНеВключать.НомерСтроки
		|				И ОстаткиОтпусковОстатки.Ссылка = ОстаткиНеВключать.Ссылка
		|	ГДЕ
		|		ОстаткиНеВключать.Ссылка ЕСТЬ NULL 
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОстаткиОтпусковОстатки.Физлицо,
		|		ОстаткиОтпусковОстатки.НомерСтроки) КАК ОстаткиПериод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОстаткиОтпусков.Остатки КАК ОстаткиОтпусковОстатки
		|		ПО ОстаткиПериод.ДатаОстатков = ОстаткиОтпусковОстатки.Ссылка.ДатаАктуальности
		|			И ОстаткиПериод.Физлицо = ОстаткиОтпусковОстатки.Ссылка.Физлицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо,
		|	НомерСтроки";
		Запрос.Выполнить();
		
	Иначе
		ТаблицаОстатков = Новый ТаблицаЗначений;
		ТаблицаОстатков.Колонки.Добавить("Ссылка",						Новый ОписаниеТипов("СправочникСсылка.ОстаткиОтпусков"));
		ТаблицаОстатков.Колонки.Добавить("Физлицо",						Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТаблицаОстатков.Колонки.Добавить("НомерСтроки",					Новый ОписаниеТипов("Число"));
		ТаблицаОстатков.Колонки.Добавить("ДатаОстатков",				Новый ОписаниеТипов("Дата"));
		ТаблицаОстатков.Колонки.Добавить("Количество",					Новый ОписаниеТипов("Число"));
		ТаблицаОстатков.Колонки.Добавить("ДатаНачалаРабочегоГода",		Новый ОписаниеТипов("Дата"));
		ТаблицаОстатков.Колонки.Добавить("ДатаОкончанияРабочегоГода",	Новый ОписаниеТипов("Дата"));
		
		Запрос.УстановитьПараметр("Таблица",	ТаблицаОстатков);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиОтпусков.*
		|ПОМЕСТИТЬ ВТАктуальныеОстатки
		|ИЗ
		|	&Таблица КАК ОстаткиОтпусков
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо,
		|	НомерСтроки";
		Запрос.Выполнить();
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает список остатков отпусков для тех рабочих лет, по которым нет остатков в справочнике
// Остатки отпусков
// Включать текущий рабочий год необходимо, когда считаем остатки для списания фактического отпуска
//
Функция ПолучитьДополнениеОстатков(
	Запрос,						// Объект запрос, в котором уже есть виртуальные таблицы ТаблицаПериодов и АктуальныеОстатки
	Регистратор,				// Регистратор, которым списывается отпуск
	ВключатьТекущийРабочийГод	// Значение Истина должно быть установлено всегда, когда передается регистратор
	)
	
	// Получим дату приема по упр. сотрудникам
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПериодов.Сотрудник КАК Физлицо,
	|	ТаблицаПериодов.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(Работники.Период) КАК ДатаПриемаНаРаботу,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА (НЕ УволенныеРаботники.Период ЕСТЬ NULL )
	|				ТОГДА ДОБАВИТЬКДАТЕ(УволенныеРаботники.Период, ДЕНЬ, -1)
	|		КОНЕЦ) КАК ДатаУвольнения
	|ПОМЕСТИТЬ ВТУправленческиеРаботники
	|ИЗ
	|	ВТТаблицаПериодов КАК ТаблицаПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
	|		ПО ТаблицаПериодов.Сотрудник = Работники.ФизЛицо
	|			И ТаблицаПериодов.ДатаНачала >= Работники.Период
	|			И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК УволенныеРаботники
	|		ПО ТаблицаПериодов.Сотрудник = УволенныеРаботники.ФизЛицо
	|			И ТаблицаПериодов.ДатаНачала >= УволенныеРаботники.Период
	|			И (УволенныеРаботники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодов.Сотрудник,
	|	ТаблицаПериодов.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	НомерСтроки";
	Запрос.Выполнить();
	
	// Получим дату приема по регл. сотрудникам, если сотрудник не принят по упр. учету
	// Только основное место работы или внешний совместитель
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПериодов.Сотрудник КАК Физлицо,
	|	ТаблицаПериодов.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаПриемаНаРаботу,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА (НЕ УволенныеРаботникиОрганизаций.Период ЕСТЬ NULL )
	|				ТОГДА ДОБАВИТЬКДАТЕ(УволенныеРаботникиОрганизаций.Период, ДЕНЬ, -1)
	|		КОНЕЦ) КАК ДатаУвольнения
	|ПОМЕСТИТЬ ВТРегламентированныеРаботники
	|ИЗ
	|	ВТТаблицаПериодов КАК ТаблицаПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ТаблицаПериодов.Сотрудник = РаботникиОрганизаций.Сотрудник.Физлицо
	|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
	|			И ((НЕ (ТаблицаПериодов.Сотрудник, ТаблицаПериодов.НомерСтроки) В
	|					(ВЫБРАТЬ
	|						Работники.Физлицо,
	|						Работники.НомерСтроки
	|					ИЗ
	|						ВТУправленческиеРаботники КАК Работники)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК УволенныеРаботникиОрганизаций
	|		ПО ТаблицаПериодов.Сотрудник = УволенныеРаботникиОрганизаций.Сотрудник.Физлицо
	|			И (УволенныеРаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|			И ((НЕ (ТаблицаПериодов.Сотрудник, ТаблицаПериодов.НомерСтроки) В
	|					(ВЫБРАТЬ
	|						Работники.Физлицо,
	|						Работники.НомерСтроки
	|					ИЗ
	|						ВТУправленческиеРаботники КАК Работники)))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодов.Сотрудник,
	|	ТаблицаПериодов.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	НомерСтроки";
	Запрос.Выполнить();
	
	// Объединим результаты двух запросов
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Работники.Физлицо КАК Физлицо,
	|	Работники.НомерСтроки КАК НомерСтроки,
	|	Работники.ДатаПриемаНаРаботу,
	|	Работники.ДатаУвольнения
	|ПОМЕСТИТЬ ВТВсеРаботники
	|ИЗ
	|	ВТУправленческиеРаботники КАК Работники
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Физлицо,
	|	Работники.НомерСтроки,
	|	Работники.ДатаПриемаНаРаботу,
	|	Работники.ДатаУвольнения
	|ИЗ
	|	ВТРегламентированныеРаботники КАК Работники
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	НомерСтроки";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиОтпусков.Ссылка,
	|	ПоследнийРабочийГод.Физлицо,
	|	ПоследнийРабочийГод.ДатаНачалаРабочегоГода,
	|	ЕСТЬNULL(ОстаткиОтпусковОстатки.ДатаОкончанияРабочегоГода, КОНЕЦПЕРИОДА(ПоследнийРабочийГод.ДатаНачалаРабочегоГода, ГОД)) КАК ДатаОкончанияРабочегоГода,
	|	ПоследнийРабочийГод.НомерСтроки КАК НомерСтроки,
	|	ПоследнийРабочийГод.ДатаПолученияДанных КАК ДатаПолученияДанных,
	|	ПоследнийРабочийГод.ДатаОстатков,
	|	ПоследнийРабочийГод.ДатаПриемаНаРаботу,
	|	ПоследнийРабочийГод.ДатаУвольнения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Работники.Физлицо КАК Физлицо,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ОстаткиОтпусков.ДатаОкончанияРабочегоГода ЕСТЬ NULL 
	|					ТОГДА Работники.ДатаПриемаНаРаботу
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ОстаткиОтпусков.ДатаОкончанияРабочегоГода, ДЕНЬ, 1)
	|			КОНЕЦ) КАК ДатаНачалаРабочегоГода,
	|		ТаблицаПериодов.ДатаОкончания КАК ДатаПолученияДанных,
	|		ОстаткиОтпусков.ДатаОстатков КАК ДатаОстатков,
	|		ТаблицаПериодов.НомерСтроки КАК НомерСтроки,
	|		Работники.ДатаПриемаНаРаботу КАК ДатаПриемаНаРаботу,
	|		Работники.ДатаУвольнения КАК ДатаУвольнения
	|	ИЗ
	|		ВТВсеРаботники КАК Работники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаПериодов КАК ТаблицаПериодов
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТАктуальныеОстатки КАК ОстаткиОтпусков
	|				ПО ТаблицаПериодов.Сотрудник = ОстаткиОтпусков.Физлицо
	|					И ТаблицаПериодов.НомерСтроки = ОстаткиОтпусков.НомерСтроки
	|			ПО Работники.Физлицо = ТаблицаПериодов.Сотрудник
	|				И Работники.НомерСтроки = ТаблицаПериодов.НомерСтроки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Работники.Физлицо,
	|		ТаблицаПериодов.НомерСтроки,
	|		ТаблицаПериодов.ДатаОкончания,
	|		ОстаткиОтпусков.ДатаОстатков,
	|		Работники.ДатаПриемаНаРаботу,
	|		Работники.ДатаУвольнения) КАК ПоследнийРабочийГод
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОстаткиОтпусков.Остатки КАК ОстаткиОтпусковОстатки
	|		ПО ПоследнийРабочийГод.Физлицо = ОстаткиОтпусковОстатки.Ссылка.Физлицо
	|			И ПоследнийРабочийГод.ДатаНачалаРабочегоГода = ОстаткиОтпусковОстатки.ДатаНачалаРабочегоГода
	|			И ПоследнийРабочийГод.ДатаОстатков = ОстаткиОтпусковОстатки.Ссылка.ДатаАктуальности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОстаткиОтпусков КАК ОстаткиОтпусков
	|		ПО ПоследнийРабочийГод.Физлицо = ОстаткиОтпусков.Физлицо
	|			И ПоследнийРабочийГод.ДатаОстатков = ОстаткиОтпусков.ДатаАктуальности";
	Если НЕ ВключатьТекущийРабочийГод Тогда
	Запрос.Текст = Запрос.Текст + "
	|ГДЕ
	|	ЕСТЬNULL(ОстаткиОтпусковОстатки.ДатаОкончанияРабочегоГода, КОНЕЦПЕРИОДА(ПоследнийРабочийГод.ДатаНачалаРабочегоГода, ГОД)) < ПоследнийРабочийГод.ДатаПолученияДанных";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("Ссылка",						Новый ОписаниеТипов("СправочникСсылка.ОстаткиОтпусков"));
	ТаблицаОстатков.Колонки.Добавить("Физлицо",						Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаОстатков.Колонки.Добавить("ДатаНачалаРабочегоГода",		Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаОкончанияРабочегоГода",	Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("НомерСтроки",					Новый ОписаниеТипов("Число"));
	ТаблицаОстатков.Колонки.Добавить("ДатаПолученияДанных",			Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаПриемаНаРаботу",			Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаОстатков",				Новый ОписаниеТипов("Дата"));
	
	Пока Выборка.Следующий() Цикл
		ДатаНачалаРабочегоГода		= Выборка.ДатаНачалаРабочегоГода;
		ДатаОкончанияРабочегоГода	= Выборка.ДатаОкончанияРабочегоГода;
		
		ДатаОграничения = ?(Выборка.ДатаУвольнения = NULL ИЛИ Выборка.ДатаПолученияДанных < Выборка.ДатаУвольнения, Выборка.ДатаПолученияДанных, Выборка.ДатаУвольнения);
		
		// В цикле будем добавлять в таблицу все рабочие года по сотрудникам
		Пока ?(ВключатьТекущийРабочийГод, ДатаОкончанияРабочегоГода < ДобавитьМесяц(ДатаОграничения, 12), ДатаОкончанияРабочегоГода < ДатаОграничения) Цикл
			Строка = ТаблицаОстатков.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Выборка);
			Строка.ДатаНачалаРабочегоГода		= ДатаНачалаРабочегоГода;
			Строка.ДатаОкончанияРабочегоГода	= ДатаОкончанияРабочегоГода;
			
			ДатаНачалаРабочегоГода		= ДатаОкончанияРабочегоГода + 1;
			ДатаОкончанияРабочегоГода	= КонецГода(ДатаНачалаРабочегоГода);
		КонецЦикла;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаОстатков",	ТаблицаОстатков);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.*
	|ПОМЕСТИТЬ ВТОстатки
	|ИЗ
	|	&ТаблицаОстатков КАК Остатки
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиОтпусков.Ссылка,
	|	ПоследнийРабочийГод.Физлицо КАК Физлицо,
	|	ПоследнийРабочийГод.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ПоследнийРабочийГод.ДатаОкончанияРабочегоГода КАК ДатаОкончанияРабочегоГода,
	|	СУММА(ЕСТЬNULL(ФактическиеОтпуска.Количество, 0)) КАК ФактическийОтпуск,
	|	24 / 12 * (РАЗНОСТЬДАТ(ПоследнийРабочийГод.ДатаНачалаРабочегоГода, ВЫБОР
	|			КОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1) <= ПоследнийРабочийГод.ДатаПолученияДанных
	|				ТОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1)
	|			ИНАЧЕ ПоследнийРабочийГод.ДатаПолученияДанных
	|		КОНЕЦ, МЕСЯЦ) + ВЫБОР
	|		КОГДА ДЕНЬ(ПоследнийРабочийГод.ДатаНачалаРабочегоГода) <= ДЕНЬ(ВЫБОР
	|					КОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1) <= ПоследнийРабочийГод.ДатаПолученияДанных
	|						ТОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1)
	|					ИНАЧЕ ПоследнийРабочийГод.ДатаПолученияДанных
	|				КОНЕЦ)
	|			ТОГДА ВЫБОР
	|					КОГДА ДЕНЬ(ВЫБОР
	|								КОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1) <= ПоследнийРабочийГод.ДатаПолученияДанных
	|									ТОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1)
	|								ИНАЧЕ ПоследнийРабочийГод.ДатаПолученияДанных
	|							КОНЕЦ) - ДЕНЬ(ПоследнийРабочийГод.ДатаНачалаРабочегоГода) > ДЕНЬ(КОНЕЦПЕРИОДА(ВЫБОР
	|									КОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1) <= ПоследнийРабочийГод.ДатаПолученияДанных
	|										ТОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1)
	|									ИНАЧЕ ПоследнийРабочийГод.ДатаПолученияДанных
	|								КОНЕЦ, МЕСЯЦ)) / 2 - 1
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДЕНЬ(ПоследнийРабочийГод.ДатаНачалаРабочегоГода) - ДЕНЬ(ВЫБОР
	|							КОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1) <= ПоследнийРабочийГод.ДатаПолученияДанных
	|								ТОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1)
	|							ИНАЧЕ ПоследнийРабочийГод.ДатаПолученияДанных
	|						КОНЕЦ) > ДЕНЬ(КОНЕЦПЕРИОДА(ВЫБОР
	|								КОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1) <= ПоследнийРабочийГод.ДатаПолученияДанных
	|									ТОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1)
	|								ИНАЧЕ ПоследнийРабочийГод.ДатаПолученияДанных
	|							КОНЕЦ, МЕСЯЦ)) / 2 - 1
	|					ТОГДА -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ) КАК КоличествоДнейОтпускаВГод,
	|	ПоследнийРабочийГод.НомерСтроки КАК НомерСтроки,
	|	ПоследнийРабочийГод.ДатаПриемаНаРаботу,
	|	ПоследнийРабочийГод.ДатаПолученияДанных,
	|	ПоследнийРабочийГод.ДатаОстатков
	|ИЗ
	|	ВТОстатки КАК ПоследнийРабочийГод
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОстаткиОтпусков КАК ОстаткиОтпусков
	|		ПО ПоследнийРабочийГод.Ссылка = ОстаткиОтпусков.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОстаткиОтпусков.Остатки КАК ОстаткиОтпусковОстатки
	|		ПО ПоследнийРабочийГод.Ссылка = ОстаткиОтпусковОстатки.Ссылка
	|			И ПоследнийРабочийГод.ДатаНачалаРабочегоГода = ОстаткиОтпусковОстатки.ДатаНачалаРабочегоГода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|		ПО ПоследнийРабочийГод.Физлицо = ФактическиеОтпуска.Физлицо
	|			И (ВЫБОР
	|				КОГДА ПоследнийРабочийГод.ДатаОкончанияРабочегоГода <= ПоследнийРабочийГод.ДатаПолученияДанных
	|					ТОГДА ФактическиеОтпуска.ДатаОкончания МЕЖДУ ПоследнийРабочийГод.ДатаНачалаРабочегоГода И ПоследнийРабочийГод.ДатаОкончанияРабочегоГода
	|				ИНАЧЕ ФактическиеОтпуска.ДатаОкончания МЕЖДУ ПоследнийРабочийГод.ДатаНачалаРабочегоГода И ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаПолученияДанных, ДЕНЬ, -1)
	|			КОНЕЦ)
	|			И (ФактическиеОтпуска.Регистратор <> &Регистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналу КАК УчетнаяПолитикаПоПерсоналу
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиОтпусков.Ссылка,
	|	ПоследнийРабочийГод.Физлицо,
	|	ПоследнийРабочийГод.ДатаНачалаРабочегоГода,
	|	ПоследнийРабочийГод.ДатаОкончанияРабочегоГода,
	|	ПоследнийРабочийГод.НомерСтроки,
	|	ПоследнийРабочийГод.ДатаПриемаНаРаботу,
	|	ПоследнийРабочийГод.ДатаПолученияДанных,
	|	ПоследнийРабочийГод.ДатаОстатков,
	|	24 / 12 * (РАЗНОСТЬДАТ(ПоследнийРабочийГод.ДатаНачалаРабочегоГода, ВЫБОР
	|			КОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1) <= ПоследнийРабочийГод.ДатаПолученияДанных
	|				ТОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1)
	|			ИНАЧЕ ПоследнийРабочийГод.ДатаПолученияДанных
	|		КОНЕЦ, МЕСЯЦ) + ВЫБОР
	|		КОГДА ДЕНЬ(ПоследнийРабочийГод.ДатаНачалаРабочегоГода) <= ДЕНЬ(ВЫБОР
	|					КОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1) <= ПоследнийРабочийГод.ДатаПолученияДанных
	|						ТОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1)
	|					ИНАЧЕ ПоследнийРабочийГод.ДатаПолученияДанных
	|				КОНЕЦ)
	|			ТОГДА ВЫБОР
	|					КОГДА ДЕНЬ(ВЫБОР
	|								КОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1) <= ПоследнийРабочийГод.ДатаПолученияДанных
	|									ТОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1)
	|								ИНАЧЕ ПоследнийРабочийГод.ДатаПолученияДанных
	|							КОНЕЦ) - ДЕНЬ(ПоследнийРабочийГод.ДатаНачалаРабочегоГода) > ДЕНЬ(КОНЕЦПЕРИОДА(ВЫБОР
	|									КОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1) <= ПоследнийРабочийГод.ДатаПолученияДанных
	|										ТОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1)
	|									ИНАЧЕ ПоследнийРабочийГод.ДатаПолученияДанных
	|								КОНЕЦ, МЕСЯЦ)) / 2 - 1
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДЕНЬ(ПоследнийРабочийГод.ДатаНачалаРабочегоГода) - ДЕНЬ(ВЫБОР
	|							КОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1) <= ПоследнийРабочийГод.ДатаПолученияДанных
	|								ТОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1)
	|							ИНАЧЕ ПоследнийРабочийГод.ДатаПолученияДанных
	|						КОНЕЦ) > ДЕНЬ(КОНЕЦПЕРИОДА(ВЫБОР
	|								КОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1) <= ПоследнийРабочийГод.ДатаПолученияДанных
	|									ТОГДА ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода, СЕКУНДА, 1)
	|								ИНАЧЕ ПоследнийРабочийГод.ДатаПолученияДанных
	|							КОНЕЦ, МЕСЯЦ)) / 2 - 1
	|					ТОГДА -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ДатаНачалаРабочегоГода";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьДополнениеОстатков()

// Функция возвращает остаток отпусков
// Функция также сообщает, являются ли хранимые в системе остатки актуальными,
// то есть введены остатки по всем рабочим годам до даты, на которую получаются остатки
//
Функция ПодготовитьДанныеПоУправленческимОтпускам(
	ТаблицаПериодов,						// Таблица периодов, для которой рассчитываем данные по отпускам
	ИспользоватьФизлицо = Ложь,				// В документах храним сотрудника, а из кода передаем физлицо
	Регистратор = Неопределено,				// Регистратор, которым списывается отпуск
	ВключатьЗапланированныеОтпуска = Ложь,	// Позволяет рассчитать остатко отпуска с учетом запланированных в будущем отпусков
	ИспользоватьОстатки = Истина,			// Ложь только в случае, если необходимо пересчитать остатки из формы элемента справочника остатков
	ВключатьТекущийРабочийГод = Истина		// Значение Истина должно быть установлено всегда, когда передается регистратор
	) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц	= Новый МенеджерВременныхТаблиц;
	
	// Подготовим временную таблицу со списком периодов
	ПодготовитьТаблицуПериодов(Запрос, ТаблицаПериодов, ИспользоватьФизлицо, Регистратор <> Неопределено);
	
	// Подготовим временную таблицу с актуальными остатками
	ПодготовитьТаблицуАктуальныхОстатков(Запрос, ИспользоватьОстатки);
	
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("Ссылка",						Новый ОписаниеТипов("СправочникСсылка.ОстаткиОтпусков"));
	ТаблицаОстатков.Колонки.Добавить("Физлицо",						Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаОстатков.Колонки.Добавить("НомерСтроки",					Новый ОписаниеТипов("Число"));
	ТаблицаОстатков.Колонки.Добавить("Количество",					Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(7, 3)));
	ТаблицаОстатков.Колонки.Добавить("ДатаНачалаРабочегоГода",		Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаОкончанияРабочегоГода",	Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("НеАктуальный",				Новый ОписаниеТипов("Булево"));
	ТаблицаОстатков.Колонки.Добавить("ДатаПриемаНаРаботу",			Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаПолученияДанных",			Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаОстатков",				Новый ОписаниеТипов("Дата"));
	
	// Получим текущие наиболее актуальные остатки отпусков
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиОтпусков.*
	|ИЗ
	|	ВТАктуальныеОстатки КАК ОстаткиОтпусков
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ДатаНачалаРабочегоГода";
	ТекущиеОстатки = Запрос.Выполнить().Выгрузить();
	
	// Теперь дополним существующие в системе остатки
	// Остатки будут дополнены по тем рабочим годам, которые в остатках не значатся
	// Кроме того, если будет включен текущий рабочий год, запрос ВСЕГДА вернет запись
	// за текущий рабочий год. Это позволит посчитать текущий остаток с учетом уже отгуленных
	Выборка = ПолучитьДополнениеОстатков(Запрос, Регистратор, ВключатьТекущийРабочийГод);
	
	ОстаткиТекущейСтроки = ТекущиеОстатки.СкопироватьКолонки();
	
	// Добавим свою колонку количество с нужным количеством знаков после запятой
	ОстаткиТекущейСтроки.Колонки.Удалить(ОстаткиТекущейСтроки.Колонки.Индекс(ОстаткиТекущейСтроки.Колонки["Количество"]));
	ОстаткиТекущейСтроки.Колонки.Добавить("Количество",	Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(7, 3)));
	
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		НайденныеОстатки = ТекущиеОстатки.НайтиСтроки(Новый Структура("НомерСтроки", Выборка.НомерСтроки));
		
		ОстаткиТекущейСтроки.Очистить();
		Для Каждого Остаток Из НайденныеОстатки Цикл
			ЗаполнитьЗначенияСвойств(ОстаткиТекущейСтроки.Добавить(), Остаток);
		КонецЦикла;
		
		Пока Выборка.Следующий() Цикл
			ФактическийОтпускДляСписания = Выборка.ФактическийОтпуск;
			
			КопияОстатков = ОстаткиТекущейСтроки.Скопировать();
			
			ОстаткиТекущейСтроки.Очистить();
			
			Для Каждого СтрокаОстатков Из КопияОстатков Цикл
				Если СтрокаОстатков.Количество < 0 Тогда
					ФактическийОтпускДляСписания = ФактическийОтпускДляСписания - СтрокаОстатков.Количество;
					Продолжить;
				КонецЕсли;
				
				Если (СтрокаОстатков.Количество - ФактическийОтпускДляСписания) > 0 Тогда
					Строка = ОстаткиТекущейСтроки.Добавить();
					ЗаполнитьЗначенияСвойств(Строка, СтрокаОстатков);
					
					Строка.Количество = Строка.Количество - Мин(ФактическийОтпускДляСписания, Строка.Количество);
				КонецЕсли;
				
				Если ФактическийОтпускДляСписания <> 0 Тогда
					ФактическийОтпускДляСписания = Макс(0, ФактическийОтпускДляСписания - СтрокаОстатков.Количество);
				КонецЕсли;
			КонецЦикла;
			
			Строка = ОстаткиТекущейСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Выборка);
			Строка.Количество	= Выборка.КоличествоДнейОтпускаВГод - ФактическийОтпускДляСписания;
		КонецЦикла;
		
		Для Каждого Остаток Из НайденныеОстатки Цикл
			ТекущиеОстатки.Удалить(Остаток);
		КонецЦикла;
		
		Для Каждого СтрокаОстатков Из ОстаткиТекущейСтроки Цикл
			Строка = ТаблицаОстатков.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Выборка);
			ЗаполнитьЗначенияСвойств(Строка, СтрокаОстатков, , "НомерСтроки, Ссылка, Физлицо");
			Строка.НеАктуальный	= Истина;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ОстаткиПоСотруднику Из ТекущиеОстатки Цикл
		Строка = ТаблицаОстатков.Добавить();
		Строка.НеАктуальный	= Ложь;
		ЗаполнитьЗначенияСвойств(Строка, ОстаткиПоСотруднику);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаОстатков",	ТаблицаОстатков);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ссылка,
	|	Физлицо,
	|	НомерСтроки,
	|	ДатаНачалаРабочегоГода,
	|	ДатаОкончанияРабочегоГода,
	|	НеАктуальный,
	|	ДатаПриемаНаРаботу,
	|	ДатаПолученияДанных,
	|	ДатаОстатков,
	|	ВЫРАЗИТЬ(Количество КАК ЧИСЛО(3, 0)) + ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(Количество КАК ЧИСЛО(3, 0)) < Количество
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ ВТПоследнийРабочийГод
	|ИЗ
	|	&ТаблицаОстатков КАК ПоследнийРабочийГод
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	Физлицо,
	|	ДатаПолученияДанных";
	Запрос.Выполнить();
	
	Если ВключатьЗапланированныеОтпуска Тогда
		Запрос.УстановитьПараметр("Регистратор",	Регистратор);
		Запрос.УстановитьПараметр("РабочаяДата",	ОбщегоНазначения.ПолучитьРабочуюДату());
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПериодов.Сотрудник КАК Физлицо,
	|	ТаблицаПериодов.ДатаОкончания КАК ДатаОкончания,
	|	СУММА(Остатки.Количество) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТДополнительныеОтпуска
	|ИЗ
	|	ВТТаблицаПериодов КАК ТаблицаПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиДнейДополнительныхОтпусков КАК Остатки
	|		ПО ТаблицаПериодов.Сотрудник = Остатки.Физлицо
	|			И ТаблицаПериодов.ДатаОкончания >= Остатки.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодов.Сотрудник,
	|	ТаблицаПериодов.ДатаОкончания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	ДатаОкончания";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоследнийРабочийГод.*,
	|	ЕСТЬNULL(ОстаткиДнейДополнительныхОтпусковОстатки.КоличествоОстаток, 0) КАК ОстатокДополнительногоОтпуска,
	|	ЕСТЬNULL(ДанныеФактическогоОтпуска.ДнейОтпуска, 0) КАК ДнейОтпуска,";
	Если ВключатьЗапланированныеОтпуска Тогда
	Запрос.Текст = Запрос.Текст + "
	|	ЕСТЬNULL(ПланированиеОтпуска.ДнейЗапланированногоОтпуска, 0) КАК ДнейЗапланированногоОтпуска,";
	Иначе
	Запрос.Текст = Запрос.Текст + "
	|	0 КАК ДнейЗапланированногоОтпуска,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	ДанныеФактическогоОтпуска.ДатаНачала,
	|	ДанныеФактическогоОтпуска.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ДанныеФактическогоОтпуска.ДатаНачала > ПоследнийРабочийГод.ДатаОкончанияРабочегоГода
	|			ТОГДА ПоследнийРабочийГод.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоДнейОтпускаБезТекущегоГода,
	|	0 КАК ОтпускВСчетЕжегодного,
	|	0 КАК ОтпускВСчетЕжегодногоБезТекущегоГода,
	|	0 КАК ОтпускВСчетДополнительного,
	|	0 КАК ОтпускАвансом,
	|	Мероприятия.Мероприятие.Наименование КАК Мероприятие
	|ИЗ
	|	ВТПоследнийРабочийГод КАК ПоследнийРабочийГод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДополнительныеОтпуска КАК ОстаткиДнейДополнительныхОтпусковОстатки
	|		ПО ПоследнийРабочийГод.Физлицо = ОстаткиДнейДополнительныхОтпусковОстатки.Физлицо
	|			И ПоследнийРабочийГод.ДатаПолученияДанных = ОстаткиДнейДополнительныхОтпусковОстатки.ДатаОкончания
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаПериодов.НомерСтроки,
	|			ТаблицаПериодов.Сотрудник,
	|			СУММА(ЕСТЬNULL(РегламентированныйПроизводственныйКалендарь.Пятидневка, 0)) КАК ДнейОтпуска,
	|			ТаблицаПериодов.ДатаНачала,
	|			ТаблицаПериодов.ДатаОкончания
	|		ИЗ
	|			ВТТаблицаПериодов КАК ТаблицаПериодов
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|				ПО РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ТаблицаПериодов.ДатаНачала И ТаблицаПериодов.ДатаОкончания
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаПериодов.НомерСтроки,
	|			ТаблицаПериодов.Сотрудник,
	|			ТаблицаПериодов.ДатаНачала,
	|			ТаблицаПериодов.ДатаОкончания) КАК ДанныеФактическогоОтпуска
	|			ПО ПоследнийРабочийГод.НомерСтроки = ДанныеФактическогоОтпуска.НомерСтроки
	|				И ПоследнийРабочийГод.Физлицо = ДанныеФактическогоОтпуска.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаПериодов.НомерСтроки,
	|			ТаблицаПериодов.Сотрудник,
	|			МАКСИМУМ(Мероприятия.Ссылка) КАК Мероприятие
	|		ИЗ
	|			ВТТаблицаПериодов КАК ТаблицаПериодов
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Мероприятия КАК Мероприятия
	|				ПО (Мероприятия.ДатаНачала МЕЖДУ ТаблицаПериодов.ДатаНачала И ТаблицаПериодов.ДатаОкончания
	|						ИЛИ КОНЕЦПЕРИОДА(Мероприятия.ДатаОкончания, ДЕНЬ) МЕЖДУ ТаблицаПериодов.ДатаНачала И ТаблицаПериодов.ДатаОкончания
	|						ИЛИ ТаблицаПериодов.ДатаНачала МЕЖДУ Мероприятия.ДатаНачала И КОНЕЦПЕРИОДА(Мероприятия.ДатаОкончания, ДЕНЬ)
	|						ИЛИ ТаблицаПериодов.ДатаОкончания МЕЖДУ Мероприятия.ДатаНачала И КОНЕЦПЕРИОДА(Мероприятия.ДатаОкончания, ДЕНЬ))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаПериодов.НомерСтроки,
	|			ТаблицаПериодов.Сотрудник) КАК Мероприятия
	|			ПО ПоследнийРабочийГод.НомерСтроки = Мероприятия.НомерСтроки
	|				И ПоследнийРабочийГод.Физлицо = Мероприятия.Сотрудник";
	Если ВключатьЗапланированныеОтпуска Тогда
	Запрос.Текст = Запрос.Текст + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПланированиеОтпуска.НомерСтроки,
	|			ПланированиеОтпуска.Физлицо,
	|			СУММА(ПланированиеОтпуска.ДнейЗапланированногоОтпуска) КАК ДнейЗапланированногоОтпуска
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ПланированиеОтпускаРаботники.НомерСтроки,
	|				ПланированиеОтпускаРаботники.Сотрудник КАК Физлицо,
	|				РегламентированныйПроизводственныйКалендарь.Пятидневка КАК ДнейЗапланированногоОтпуска
	|			ИЗ
	|				(ВЫБРАТЬ
	|					ПланированиеОтпускаРаботники.*
	|				ИЗ
	|					ВТТаблицаПериодов КАК ПланированиеОтпускаРаботники
	|				ГДЕ
	|					ПланированиеОтпускаРаботники.План
	|					И ПланированиеОтпускаРаботники.ДатаНачала >= &РабочаяДата) КАК ПланированиеОтпускаРаботники
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаПериодов КАК ТаблицаПериодов
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|						ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ТаблицаПериодов.ДатаНачала И ТаблицаПериодов.ДатаОкончания)
	|					ПО ПланированиеОтпускаРаботники.Сотрудник = ТаблицаПериодов.Сотрудник
	|						И ПланированиеОтпускаРаботники.ДатаНачала > ТаблицаПериодов.ДатаНачала
	|						И ТаблицаПериодов.ДатаНачала >= &РабочаяДата
	|						И (ТаблицаПериодов.План)";
	Если Регистратор <> Неопределено Тогда
	Запрос.Текст = Запрос.Текст + "
	|				
	|			ОБЪЕДИНИТЬ ВСЕ
	|				
	|			ВЫБРАТЬ
	|				ТаблицаПериодов.НомерСтроки,
	|				СобытийныйПланЗанятостиФизлиц.Физлицо,
	|				РегламентированныйПроизводственныйКалендарь.Пятидневка КАК ДнейЗапланированногоОтпуска
	|			ИЗ
	|				РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|					ПО РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ СобытийныйПланЗанятостиФизлиц.Период И СобытийныйПланЗанятостиФизлиц.ПериодЗавершения
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаПериодов КАК ТаблицаПериодов
	|					ПО СобытийныйПланЗанятостиФизлиц.Физлицо = ТаблицаПериодов.Сотрудник
	|						И СобытийныйПланЗанятостиФизлиц.Период >= &РабочаяДата
	|						И СобытийныйПланЗанятостиФизлиц.Период < ТаблицаПериодов.ДатаНачала
	|						И СобытийныйПланЗанятостиФизлиц.Регистратор <> &Регистратор";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|			) КАК ПланированиеОтпуска
	|			
	|		СГРУППИРОВАТЬ ПО
	|			ПланированиеОтпуска.НомерСтроки,
	|			ПланированиеОтпуска.Физлицо) КАК ПланированиеОтпуска
	|			ПО ПоследнийРабочийГод.НомерСтроки = ПланированиеОтпуска.НомерСтроки
	|				И ПоследнийРабочийГод.Физлицо = ПланированиеОтпуска.Физлицо";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ПоследнийРабочийГод.НомерСтроки,
	|	ДатаНачалаРабочегоГода
	|АВТОУПОРЯДОЧИВАНИЕ
	|
	|ИТОГИ
	|	СУММА(ПоследнийРабочийГод.Количество) - МАКСИМУМ(ДнейЗапланированногоОтпуска) КАК Количество,
	|	СУММА(КоличествоДнейОтпускаБезТекущегоГода) - МАКСИМУМ(ДнейЗапланированногоОтпуска) КАК КоличествоДнейОтпускаБезТекущегоГода,
	|	МАКСИМУМ(ДнейОтпуска),
	|	МАКСИМУМ(ОстатокДополнительногоОтпуска),
	|	ВЫБОР
	|		КОГДА (СУММА(ПоследнийРабочийГод.Количество) - МАКСИМУМ(ДнейЗапланированногоОтпуска)) <= 0 ТОГДА 0
	|		КОГДА МАКСИМУМ(ДнейОтпуска) < (СУММА(ПоследнийРабочийГод.Количество) - МАКСИМУМ(ДнейЗапланированногоОтпуска)) ТОГДА МАКСИМУМ(ДнейОтпуска)
	|		ИНАЧЕ (СУММА(ПоследнийРабочийГод.Количество) - МАКСИМУМ(ДнейЗапланированногоОтпуска)) КОНЕЦ КАК ОтпускВСчетЕжегодного,
	|	ВЫБОР
	|		КОГДА (СУММА(КоличествоДнейОтпускаБезТекущегоГода) - МАКСИМУМ(ДнейЗапланированногоОтпуска)) <= 0 ТОГДА 0
	|		КОГДА МАКСИМУМ(ДнейОтпуска) < (СУММА(КоличествоДнейОтпускаБезТекущегоГода) - МАКСИМУМ(ДнейЗапланированногоОтпуска))ТОГДА МАКСИМУМ(ДнейОтпуска)
	|		ИНАЧЕ (СУММА(КоличествоДнейОтпускаБезТекущегоГода) - МАКСИМУМ(ДнейЗапланированногоОтпуска))КОНЕЦ КАК ОтпускВСчетЕжегодногоБезТекущегоГода,
	|	ВЫБОР КОГДА МАКСИМУМ(ДнейОтпуска) - 
	|		ВЫБОР
	|			КОГДА (СУММА(ПоследнийРабочийГод.Количество) - МАКСИМУМ(ДнейЗапланированногоОтпуска)) <= 0 ТОГДА 0
	|			КОГДА МАКСИМУМ(ДнейОтпуска) < (СУММА(ПоследнийРабочийГод.Количество) - МАКСИМУМ(ДнейЗапланированногоОтпуска)) ТОГДА МАКСИМУМ(ДнейОтпуска)
	|			ИНАЧЕ (СУММА(ПоследнийРабочийГод.Количество) - МАКСИМУМ(ДнейЗапланированногоОтпуска)) КОНЕЦ // ОтпускВСчетЕжегодного
	|			< МАКСИМУМ(ОстатокДополнительногоОтпуска) 
	|		ТОГДА МАКСИМУМ(ДнейОтпуска) 
	|			- ВЫБОР
	|				КОГДА (СУММА(ПоследнийРабочийГод.Количество) - МАКСИМУМ(ДнейЗапланированногоОтпуска)) <= 0 ТОГДА 0
	|				КОГДА МАКСИМУМ(ДнейОтпуска) < (СУММА(ПоследнийРабочийГод.Количество) - МАКСИМУМ(ДнейЗапланированногоОтпуска)) ТОГДА МАКСИМУМ(ДнейОтпуска)
	|				ИНАЧЕ (СУММА(ПоследнийРабочийГод.Количество) - МАКСИМУМ(ДнейЗапланированногоОтпуска)) КОНЕЦ // ОтпускВСчетЕжегодного
	|		ИНАЧЕ МАКСИМУМ(ОстатокДополнительногоОтпуска)
	|	КОНЕЦ КАК ОтпускВСчетДополнительного,
	|	МАКСИМУМ(ДнейОтпуска)
	|		- ВЫБОР
	|			КОГДА (СУММА(ПоследнийРабочийГод.Количество) - МАКСИМУМ(ДнейЗапланированногоОтпуска)) <= 0 ТОГДА 0
	|			КОГДА МАКСИМУМ(ДнейОтпуска) < (СУММА(ПоследнийРабочийГод.Количество) - МАКСИМУМ(ДнейЗапланированногоОтпуска)) ТОГДА МАКСИМУМ(ДнейОтпуска)
	|			ИНАЧЕ (СУММА(ПоследнийРабочийГод.Количество) - МАКСИМУМ(ДнейЗапланированногоОтпуска)) КОНЕЦ // ОтпускВСчетЕжегодного
	|		- ВЫБОР КОГДА МАКСИМУМ(ДнейОтпуска)
	|			- ВЫБОР
	|				КОГДА (СУММА(ПоследнийРабочийГод.Количество) - МАКСИМУМ(ДнейЗапланированногоОтпуска)) <= 0 ТОГДА 0
	|				КОГДА МАКСИМУМ(ДнейОтпуска) < (СУММА(ПоследнийРабочийГод.Количество) - МАКСИМУМ(ДнейЗапланированногоОтпуска)) ТОГДА МАКСИМУМ(ДнейОтпуска)
	|				ИНАЧЕ (СУММА(ПоследнийРабочийГод.Количество) - МАКСИМУМ(ДнейЗапланированногоОтпуска)) КОНЕЦ // ОтпускВСчетЕжегодного
	|			< МАКСИМУМ(ОстатокДополнительногоОтпуска)
	|			ТОГДА МАКСИМУМ(ДнейОтпуска)
	|				- ВЫБОР
	|					КОГДА (СУММА(ПоследнийРабочийГод.Количество) - МАКСИМУМ(ДнейЗапланированногоОтпуска)) <= 0 ТОГДА 0
	|					КОГДА МАКСИМУМ(ДнейОтпуска) < (СУММА(ПоследнийРабочийГод.Количество) - МАКСИМУМ(ДнейЗапланированногоОтпуска)) ТОГДА МАКСИМУМ(ДнейОтпуска)
	|					ИНАЧЕ (СУММА(ПоследнийРабочийГод.Количество) - МАКСИМУМ(ДнейЗапланированногоОтпуска)) КОНЕЦ // ОтпускВСчетЕжегодного
	|			ИНАЧЕ МАКСИМУМ(ОстатокДополнительногоОтпуска) // ОтпускВСчетДополнительного
	|		КОНЕЦ КАК ОтпускАвансом,
	|	МАКСИМУМ(ДанныеФактическогоОтпуска.ДатаНачала),
	|	МАКСИМУМ(ДанныеФактическогоОтпуска.ДатаОкончания),
	|	МАКСИМУМ(ПоследнийРабочийГод.ДатаПриемаНаРаботу),
	|	МАКСИМУМ(ПоследнийРабочийГод.ДатаПолученияДанных),
	|	МАКСИМУМ(ПоследнийРабочийГод.НеАктуальный),
	|	МАКСИМУМ(ПоследнийРабочийГод.Ссылка),
	|	МАКСИМУМ(ПоследнийРабочийГод.Физлицо),
	|	МАКСИМУМ(ПоследнийРабочийГод.ДатаОстатков),
	|	МАКСИМУМ(Мероприятия.Мероприятие.Наименование)
	|ПО
	|	ПоследнийРабочийГод.НомерСтроки";
	Если Не ВключатьЗапланированныеОтпуска Тогда
		Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
	
	// Дополнительный перебор значений необходим для того, что бы корректно учесть доп. отпуск в случаях
	// когда мы планируем отпуск и не можем запросом определить, что дополнительный отпуск был списан
	
	// В таблице будем хранить информацию о том, какие отпуска списали
	ТаблицаДопОтпусков = Новый ТаблицаЗначений;
	ТаблицаДопОтпусков.Колонки.Добавить("Физлицо");
	ТаблицаДопОтпусков.Колонки.Добавить("ДатаОкончания");
	ТаблицаДопОтпусков.Колонки.Добавить("Количество");
	
	Результат = Запрос.Выполнить();
	
	ТаблицаОтпусков = Результат.Выгрузить().СкопироватьКолонки();
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ТекущийОтпуск = ТаблицаОтпусков.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущийОтпуск, Выборка);
		Если Выборка.ОтпускВСчетДополнительного = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СписанныеОстатки = ТаблицаДопОтпусков.НайтиСтроки(Новый Структура("Физлицо", Выборка.Физлицо));
		
		// Учтем ранее списанные остатки, уменьшив количество дней отпуска за счет дополнительного
		Для Каждого СписанныйОстаток Из СписанныеОстатки Цикл
			Если СписанныйОстаток.ДатаОкончания > ТекущийОтпуск.ДатаОкончания Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоОтпускаДляСписания				= Мин(ТекущийОтпуск.ОтпускВСчетДополнительного, СписанныйОстаток.Количество);
			ТекущийОтпуск.ОтпускВСчетДополнительного	= ТекущийОтпуск.ОтпускВСчетДополнительного - КоличествоОтпускаДляСписания;
			ТекущийОтпуск.ОтпускАвансом					= ТекущийОтпуск.ОтпускАвансом + КоличествоОтпускаДляСписания;
			
			Строка = ТаблицаДопОтпусков.Добавить();
			Строка.Физлицо			= ТекущийОтпуск.Физлицо;
			Строка.ДатаОкончания	= ТекущийОтпуск.ДатаОкончания;
			Строка.Количество		= КоличествоОтпускаДляСписания;
			
			Если ТекущийОтпуск.ОтпускВСчетДополнительного = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Если использовали доп. отпуск, учтем этот отпуск на будущее
		Если ТекущийОтпуск.ОтпускВСчетДополнительного > 0 Тогда
			Строка = ТаблицаДопОтпусков.Добавить();
			Строка.Физлицо			= ТекущийОтпуск.Физлицо;
			Строка.ДатаОкончания	= ТекущийОтпуск.ДатаОкончания;
			Строка.Количество		= ТекущийОтпуск.ОтпускВСчетДополнительного;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаДопОтпусков.Количество() = 0 Тогда // дополнительные отпуска не списывались
		Возврат Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		Запрос.УстановитьПараметр("Таблица",	ТаблицаОтпусков);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ВТСкорректированныеОтпуска
		|ИЗ
		|	&Таблица КАК Таблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	ВТСкорректированныеОтпуска КАК Таблица
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Возврат Запрос.Выполнить().Выбрать();
	КонецЕсли;
	
КонецФункции // ПодготовитьДанныеПоУправленческимОтпускам()

// Процедура обновляет справочник ОстаткиОтпусков
//
Процедура ОбновитьОстаткиОтпусков() Экспорт
	
	РабДата = НачалоДня(ОбщегоНазначения.ПолучитьРабочуюДату());
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("РабДата",	РабДата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботникиСрезПоследних.ФизЛицо КАК Сотрудник
	|ИЗ
	|	РегистрСведений.Работники.СрезПоследних(&РабДата, ) КАК РаботникиСрезПоследних
	|ГДЕ
	|	РаботникиСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&РабДата,
	|			(НЕ Сотрудник.Физлицо В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						РаботникиСрезПоследних.ФизЛицо
	|					ИЗ
	|						РегистрСведений.Работники.СрезПоследних(&РабДата, ) КАК РаботникиСрезПоследних
	|					ГДЕ
	|						РаботникиСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)))) КАК РаботникиОрганизацийСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
	|		ПО РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации = СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НомерСтроки",				Новый ОписаниеТипов("Число"));
	ТаблицаПериодов.Колонки.Добавить("Сотрудник",				Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПериодов.Колонки.Добавить("ДатаНачала",				Новый ОписаниеТипов("Дата"));
	ТаблицаПериодов.Колонки.Добавить("ДатаОкончания",			Новый ОписаниеТипов("Дата"));
	
	НомерСтроки = 1;
	Пока Выборка.Следующий() Цикл
		ТекущийПериод = ТаблицаПериодов.Добавить();
		ТекущийПериод.НомерСтроки			= НомерСтроки;
		ТекущийПериод.Сотрудник				= Выборка.Сотрудник;
		ТекущийПериод.ДатаНачала			= РабДата;
		ТекущийПериод.ДатаОкончания			= РабДата;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Выборка = ПроцедурыУправленияПерсоналомДополнительный.ПодготовитьДанныеПоУправленческимОтпускам(ТаблицаПериодов, Истина, , , Истина, Ложь);
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.НеАктуальный Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ДатаОстатков >= РабДата Тогда
			ОстаткиОтпусковОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ОстаткиОтпусковОбъект.Остатки.Очистить();
		Иначе
			ОстаткиОтпусковОбъект = Справочники.ОстаткиОтпусков.СоздатьЭлемент();
			ОстаткиОтпусковОбъект.Физлицо			= Выборка.Физлицо;
			ОстаткиОтпусковОбъект.ДатаАктуальности	= РабДата;
		КонецЕсли;
		
		ВыборкаПоОстаткам = Выборка.Выбрать();
		Пока ВыборкаПоОстаткам.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ОстаткиОтпусковОбъект.Остатки.Добавить(), ВыборкаПоОстаткам);
		КонецЦикла;
		
		ОстаткиОтпусковОбъект.Остатки.Сортировать("ДатаНачалаРабочегоГода");
		ОстаткиОтпусковОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ

#Если Клиент Тогда

// Функция ищет единственного сотрудника среди работников предприятия или организаций по
//  началу его наименования
//
// Параметры
//  СтандартнаяОбработка – параметр стандартной обработки события обработчика АвтоПодборТекста
//	Режим – строка, определяет источники, из которых производится подбор 
//	Текст  - начальные буквы ФИО, текст из обработчика АвтоПодборТекста
//	Организация – ссылка на организацию по которой подбирать сотрудников (работников)
//	ВозвращатьФизлицо – параметр определяет, что должна вернуть функция, наименование Сотрудника или Физлица
//	ТолькоАктуальных – параметр определяет, вести поиск среди всех сотрудников, или только актуальных
//	Регистратор - при вызове из приема на работу передаем ссылку на текущий Документ
//
// Возвращаемое значение
//  строка - наименование найденного сотрудника, физлица, если он единственный
//
Функция ПодобратьФИОСотрудника(СтандартнаяОбработка, Режим, Знач Текст, Организация = Неопределено, ВозвращатьФизлицо = Ложь, ТолькоАктуальные = Истина, Регистратор = Неопределено, Подразделение = Неопределено) Экспорт
	
	ТекстАвтоПодбора = "";
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
		
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст+"%";
	
	Запрос.УстановитьПараметр("Текст", Текст);
	
	Если Режим = "Работники" Тогда
		
		ПозицияСкобки = Найти(Текст,"(");
		Если ПозицияСкобки <> 0 Тогда
			Текст = Лев(Текст, ПозицияСкобки - 1);	
		КонецЕсли;
		Запрос.УстановитьПараметр("Текст", СокрП(Текст));
		
		Если ЗначениеЗаполнено(Подразделение) Тогда
			Запрос.УстановитьПараметр("Подразделение", Подразделение);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаАктуальности", ОбщегоНазначения.ПолучитьРабочуюДату());
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ТекстУсловияНаАктуальность = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И СотрудникиОрганизаций.Актуальность";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Работники.ФизЛицо,
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.ВидДоговора,
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоТрудовойДоговор
		|ПОМЕСТИТЬ ВТ_ФизическиеЛица
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|		Работники.ФизЛицо КАК ФизЛицо
		|	ИЗ";
		
		Если ЗначениеЗаполнено(Подразделение) Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|	РегистрСведений.Работники.СрезПоследних(&ДатаАктуальности, ) КАК Работники
			|ГДЕ
			|	Работники.ФизЛицо.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|	И Работники.Подразделение = &Подразделение) КАК Работники";
		
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|			РегистрСведений.Работники КАК Работники
			|		ГДЕ
			|			Работники.ФизЛицо.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~"") КАК Работники";
			
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО Работники.ФизЛицо = СотрудникиОрганизаций.Физлицо
		|ГДЕ
		|	СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)" + ТекстУсловияНаАктуальность +"
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭтоТрудовойДоговор";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РаботникиОсновноеМесто.Сотрудник,
		|	РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
		|	ВЫБОР
		|		КОГДА РаботникиОсновноеМесто.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоОсновноеМестоРаботы
		|ПОМЕСТИТЬ ВТ_Сотрудники_ТрудовойДоговор
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&ДатаАктуальности,
		|			Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТ_ФизическиеЛица ГДЕ ЭтоТрудовойДоговор)) КАК РаботникиОсновноеМесто
		|ГДЕ
		|	ВЫБОР
		|		КОГДА РаботникиОсновноеМесто.ПериодЗавершения <= &ДатаАктуальности
		|				И РаботникиОсновноеМесто.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА РаботникиОсновноеМесто.ПричинаИзмененияСостоянияЗавершения
		|		ИНАЧЕ РаботникиОсновноеМесто.ПричинаИзмененияСостояния
		|	КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭтоОсновноеМестоРаботы,
		|	Физлицо";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	СписокСотрудников.Сотрудник.Наименование КАК Наименование,
		|	СписокСотрудников.Физлицо.Наименование КАК ФизлицоНаименование
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
		|		РаботникиОсновноеМесто.Физлицо КАК Физлицо,
		|		1 КАК Приоритет
		|	ИЗ
		|		ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиОсновноеМесто
		|	
		|	ГДЕ
		|		РаботникиОсновноеМесто.ЭтоОсновноеМестоРаботы
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиОсновноеМесто.Физлицо
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		МАКСИМУМ(РаботникиСовместительство.Сотрудник),
		|		РаботникиСовместительство.Физлицо,
		|		2
		|	ИЗ
		|		ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиСовместительство
		|			
		|	ГДЕ
		|		НЕ РаботникиСовместительство.ЭтоОсновноеМестоРаботы
		|		
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиСовместительство.Физлицо
		|		
		|	ОБЪЕДИНИТЬ
		|		
		|	ВЫБРАТЬ
		|		МАКСИМУМ(СотрудникиДУ.Сотрудник),
		|		СотрудникиДУ.Физлицо,
		|		ВЫБОР
		|			КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|				ТОГДА 3
		|			КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
		|				ТОГДА 4
		|			ИНАЧЕ 5
		|		КОНЕЦ
		|	ИЗ
		|		ВТ_ФизическиеЛица КАК СотрудникиДУ
		|			
		|	СГРУППИРОВАТЬ ПО
		|		СотрудникиДУ.Физлицо,
		|		ВЫБОР
		|			КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|				ТОГДА 3
		|			КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
		|				ТОГДА 4
		|			ИНАЧЕ 5
		|		КОНЕЦ) КАК СписокСотрудников
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СписокФизическихЛиц.Физлицо КАК Физлицо,
		|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
		|				ИЗ
		|					(ВЫБРАТЬ
		|						РаботникиОсновноеМесто.Физлицо КАК Физлицо,
		|						1 КАК Приоритет
		|					ИЗ
		|						ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиОсновноеМесто
		|			
		|					ГДЕ
		|			  			РаботникиОсновноеМесто.ЭтоОсновноеМестоРаботы
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						РаботникиСовместительство.Физлицо,
		|						2
		|					ИЗ
		|						ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиСовместительство
		|			
		|					ГДЕ
		|						НЕ РаботникиСовместительство.ЭтоОсновноеМестоРаботы
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						СотрудникиДУ.Физлицо,
		|						ВЫБОР
		|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|								ТОГДА 3
		|							КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
		|								ТОГДА 4
		|							ИНАЧЕ 5
		|						КОНЕЦ
		|					ИЗ
		|						ВТ_ФизическиеЛица КАК СотрудникиДУ) КАК СписокФизическихЛиц
		|				
		|				СГРУППИРОВАТЬ ПО
		|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
		|	ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
		|		И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет";
			
	ИначеЕсли Режим = "РаботникиИДоговорники" Тогда
		
		ДоговорыГПХ = Новый Массив;
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
		
		ТекстУсловияРаботники = "";
		//условие по Организации используем, если в качестве параметра передана не пустая ссылка на справочник
		Если ЗначениеЗаполнено(Организация) и ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияРаботники = " И Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		ТекстУсловияНаАктуальность = "";
		ТекстУсловияНаАктуальностьДоговорники = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И РаботникиОрганизации.Сотрудник.Актуальность";
			ТекстУсловияНаАктуальностьДоговорники = " И ДоговорникиОрганизаций.Актуальность";
		КонецЕсли;
		
		Если ВозвращатьФизлицо Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
			|	РаботникиИДоговорники.ФизлицоНаименование КАК ФизлицоНаименование
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		РаботникиОрганизации.Сотрудник.Физлицо.Наименование КАК ФизлицоНаименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияРаботники + ТекстУсловияНаАктуальность +"
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ДоговорникиОрганизаций.Физлицо.Наименование
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
			|	ГДЕ
			|		ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)" + ТекстУсловияРаботники + ТекстУсловияНаАктуальностьДоговорники +") КАК РаботникиИДоговорники";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
			|	РаботникиИДоговорники.Наименование КАК Наименование
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		РаботникиОрганизации.Сотрудник.Наименование КАК Наименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияРаботники + ТекстУсловияНаАктуальность +"
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ДоговорникиОрганизаций.Наименование
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
			|	ГДЕ
			|		ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)" + ТекстУсловияРаботники + ТекстУсловияНаАктуальностьДоговорники +") КАК РаботникиИДоговорники";
			
		КонецЕсли;	
		
	ИначеЕсли Режим = "Договорники" Тогда
		
		ДоговорыГПХ = Новый Массив;
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
		
		ТекстУсловияРаботники = "";
		Если ЗначениеЗаполнено(Организация) и ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияРаботники = " И ДоговорникиОрганизаций.Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		ТекстУсловияНаАктуальность = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И ДоговорникиОрганизаций.Актуальность";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	ДоговорникиОрганизаций.Наименование
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
		|ГДЕ
		|	ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|	И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)" + ТекстУсловияРаботники + ТекстУсловияНаАктуальность;
	
	ИначеЕсли Режим = "РаботникиОрганизации" Тогда
		
		ТекстУсловияОрганизации = "";
		
		Если ЗначениеЗаполнено(Организация) и ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияОрганизации = " И Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		ТекстУсловияНаАктуальность = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И РаботникиОрганизации.Сотрудник.Актуальность";
		КонецЕсли;
		
		Если ВозвращатьФизлицо Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
			|	РаботникиОрганизации.Сотрудник.Физлицо.Наименование КАК ФизлицоНаименование
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|ГДЕ
			|	РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность;
			
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
			|	РаботникиОрганизации.Сотрудник.Наименование КАК Наименование
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|ГДЕ
			|	РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность;
			
		КонецЕсли;
		
	ИначеЕсли Режим = "Сотрудники" Тогда
		
		Если ВозвращатьФизлицо Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
			|	СотрудникиОрганизаций.Физлицо.Наименование КАК ФизлицоНаименование
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|	И СотрудникиОрганизаций.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий))
			|	И СотрудникиОрганизаций.Актуальность";
			
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
			|	СотрудникиОрганизаций.Наименование КАК Наименование
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|	И СотрудникиОрганизаций.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий))
			|	И СотрудникиОрганизаций.Актуальность";
			
		КонецЕсли;
		
	ИначеЕсли Режим = "СотрудникиОрганизации" Тогда
		
		ТекстУсловияОрганизации = "";
		Если ЗначениеЗаполнено(Организация) и ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияОрганизации = " И СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		Если Регистратор = Неопределено Тогда
			Регистратор = Документы.ПриемНаРаботуВОрганизацию.ПустаяСсылка();
		КонецЕсли;
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	СотрудникиОрганизаций.Наименование КАК Наименование
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизаций.Сотрудник
		|				И (РаботникиОрганизаций.Регистратор <> &Регистратор)
		|ГДЕ
		|	СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|	И РаботникиОрганизаций.Сотрудник ЕСТЬ NULL 
		|	И СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|	И СотрудникиОрганизаций.Актуальность"+ ТекстУсловияОрганизации;
		
	Иначе
		
		Возврат ТекстАвтоПодбора;
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Если ВозвращатьФизлицо Тогда
			ТекстАвтоПодбора = Выборка.ФизлицоНаименование;
		Иначе
			ТекстАвтоПодбора = Выборка.Наименование;
		КонецЕсли;
	КонецЕсли;

	Возврат ТекстАвтоПодбора;
	
КонецФункции // ПодобратьФИОСотрудника()

// Функция ищет сотрудника среди работников предприятия или организаций по
//  началу его наименования
//
// Параметры
// 	СтандартнаяОбработка – параметр стандартной обработки события обработчика АвтоПодборТекста
//	Режим – строка, определяет источники, из которых производится подбор 
//	Текст  - начальные буквы ФИО, текст из обработчика АвтоПодборТекста
//	Организация – ссылка на организацию по которой подбирать сотрудников (работников)
//	ВозвращатьФизлицо – параметр определяет, что должна вернуть функция, ссылку на Сотрудника или Физлицо
//	ТолькоАктуальных – параметр определяет, вести поиск среди всех сотрудников, или только актуальных
//	Регистратор - при вызове из приема на работу передаем ссылку на текущий Документ
//
// Возвращаемое значение
//  СписокЗначений - список подходящих физлиц, если их найдено не более 50
//  Неопределено - если найдено более 50 подходящих физлиц
//
Функция ПодобратьСписокСотрудников(СтандартнаяОбработка, Режим, Знач Текст, НачальноеЗначение, Организация = Неопределено, ВозвращатьФизлицо = Ложь, ТолькоАктуальные = Истина, Регистратор = Неопределено, Подразделение = Неопределено) Экспорт
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// заменим спецсимволы
	Текст = СОКРЛП(Текст);
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст+"%";
	
	Запрос.УстановитьПараметр("Текст", Текст);
	
	Если Режим = "Работники" Тогда
		
		ПозицияСкобки = Найти(Текст,"(");
		Если ПозицияСкобки <> 0 Тогда
			Текст = Лев(Текст, ПозицияСкобки - 1);	
		КонецЕсли;
		Запрос.УстановитьПараметр("Текст", СокрП(Текст));
		
		Запрос.УстановитьПараметр("ДатаАктуальности", ОбщегоНазначения.ПолучитьРабочуюДату());
		
		Если ЗначениеЗаполнено(Подразделение) Тогда
			Запрос.УстановитьПараметр("Подразделение", Подразделение);
		КонецЕсли;
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ТекстУсловияНаАктуальность = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И СотрудникиОрганизаций.Актуальность";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|	ФизическиеЛица.ФизЛицо,
		|	ФизическиеЛица.Сотрудник,
		|	ФизическиеЛица.ВидДоговора,
		|	ФизическиеЛица.ЭтоТрудовойДоговор КАК ЭтоТрудовойДоговор,
		|	ФизическиеЛица.НайденоПоНаименованию
		|ПОМЕСТИТЬ ВТ_ФизическиеЛица
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Работники.ФизЛицо КАК ФизЛицо,
		|		СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|		СотрудникиОрганизаций.ВидДоговора КАК ВидДоговора,
		|		ВЫБОР
		|			КОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ЭтоТрудовойДоговор,
		|		ИСТИНА КАК НайденоПоНаименованию
		|	ИЗ
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|			Работники.ФизЛицо КАК ФизЛицо
		|		ИЗ";
		
		Если ЗначениеЗаполнено(Подразделение) Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|	РегистрСведений.Работники.СрезПоследних(&ДатаАктуальности, ) КАК Работники
			|ГДЕ
			|	Работники.ФизЛицо.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|	И Работники.Подразделение = &Подразделение) КАК Работники";
		
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|			РегистрСведений.Работники КАК Работники
			|		ГДЕ
			|			Работники.ФизЛицо.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~"") КАК Работники";
			
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|			ПО Работники.ФизЛицо = СотрудникиОрганизаций.Физлицо
		|	ГДЕ
		|		СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)" + ТекстУсловияНаАктуальность + "
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Работники.ФизЛицо,
		|		СотрудникиОрганизаций.Ссылка,
		|		СотрудникиОрганизаций.ВидДоговора,
		|		ВЫБОР
		|			КОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ЛОЖЬ
		|	ИЗ
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|			СотрудникиОрганизаций.Ссылка КАК Ссылка,
		|			СотрудникиОрганизаций.ВидДоговора КАК ВидДоговора,
		|			СотрудникиОрганизаций.Физлицо КАК Физлицо
		|		ИЗ
		|			Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ГДЕ
		|			СотрудникиОрганизаций.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияНаАктуальность + "
		|			И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)";
		
		Если ЗначениеЗаполнено(Подразделение) Тогда
			Запрос.Текст = Запрос.Текст + "
			|			И СотрудникиОрганизаций.ТекущееПодразделениеКомпании = &Подразделение";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|		) КАК СотрудникиОрганизаций
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
		|			ПО (Работники.ФизЛицо = СотрудникиОрганизаций.Физлицо)) КАК ФизическиеЛица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭтоТрудовойДоговор";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РаботникиОсновноеМесто.Сотрудник,
		|	РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
		|	ВЫБОР
		|		КОГДА РаботникиОсновноеМесто.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоОсновноеМестоРаботы,
		|	ВТ_ФизическиеЛица.НайденоПоНаименованию
		|ПОМЕСТИТЬ ВТ_Сотрудники_ТрудовойДоговор
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&ДатаАктуальности,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					ВТ_ФизическиеЛица.Сотрудник
		|				ИЗ
		|					ВТ_ФизическиеЛица
		|				ГДЕ
		|					ВТ_ФизическиеЛица.ЭтоТрудовойДоговор)) КАК РаботникиОсновноеМесто
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФизическиеЛица КАК ВТ_ФизическиеЛица
		|		ПО РаботникиОсновноеМесто.Сотрудник = ВТ_ФизическиеЛица.Сотрудник
		|ГДЕ
		|	ВЫБОР
		|			КОГДА РаботникиОсновноеМесто.ПериодЗавершения <= &ДатаАктуальности
		|					И РаботникиОсновноеМесто.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА РаботникиОсновноеМесто.ПричинаИзмененияСостоянияЗавершения
		|			ИНАЧЕ РаботникиОсновноеМесто.ПричинаИзмененияСостояния
		|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭтоОсновноеМестоРаботы,
		|	Физлицо";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|	СписокСотрудников.Сотрудник КАК Ссылка,
		|	СписокСотрудников.Сотрудник.Наименование КАК Наименование,
		|	СписокСотрудников.Сотрудник.Код КАК Код,
		|	СписокСотрудников.Физлицо КАК Физлицо,
		|	СписокСотрудников.Физлицо.Наименование КАК ФизлицоНаименование,
		|	СписокСотрудников.НайденоПоНаименованию КАК НайденоПоНаименованию
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
		|		РаботникиОсновноеМесто.Физлицо КАК Физлицо,
		|		1 КАК Приоритет,
		|		МАКСИМУМ(РаботникиОсновноеМесто.НайденоПоНаименованию) КАК НайденоПоНаименованию
		|	ИЗ
		|		ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиОсновноеМесто
		|	ГДЕ
		|		РаботникиОсновноеМесто.ЭтоОсновноеМестоРаботы
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиОсновноеМесто.Физлицо
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		МАКСИМУМ(РаботникиСовместительство.Сотрудник),
		|		РаботникиСовместительство.Физлицо,
		|		2,
		|		МАКСИМУМ(РаботникиСовместительство.НайденоПоНаименованию)
		|	ИЗ
		|		ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиСовместительство
		|	ГДЕ
		|		(НЕ РаботникиСовместительство.ЭтоОсновноеМестоРаботы)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиСовместительство.Физлицо
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		МАКСИМУМ(СотрудникиДУ.Сотрудник),
		|		СотрудникиДУ.ФизЛицо,
		|		ВЫБОР
		|			КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|				ТОГДА 3
		|			КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
		|				ТОГДА 4
		|			ИНАЧЕ 5
		|		КОНЕЦ,
		|		МАКСИМУМ(СотрудникиДУ.НайденоПоНаименованию)
		|	ИЗ
		|		ВТ_ФизическиеЛица КАК СотрудникиДУ
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СотрудникиДУ.ФизЛицо,
		|		ВЫБОР
		|			КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|				ТОГДА 3
		|			КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
		|				ТОГДА 4
		|			ИНАЧЕ 5
		|		КОНЕЦ) КАК СписокСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокФизическихЛиц.Сотрудник КАК Сотрудник,
		|			СписокФизическихЛиц.Физлицо КАК Физлицо,
		|			МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет,
		|			СписокФизическихЛиц.НайденоПоНаименованию КАК НайденоПоНаименованию
		|		ИЗ
		|			(ВЫБРАТЬ
		|				РаботникиОсновноеМесто.Сотрудник КАК Сотрудник,
		|				РаботникиОсновноеМесто.Физлицо КАК Физлицо,
		|				1 КАК Приоритет,
		|				РаботникиОсновноеМесто.НайденоПоНаименованию КАК НайденоПоНаименованию
		|			ИЗ
		|				ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиОсновноеМесто
		|			ГДЕ
		|				РаботникиОсновноеМесто.ЭтоОсновноеМестоРаботы
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				РаботникиСовместительство.Сотрудник,
		|				РаботникиСовместительство.Физлицо,
		|				2,
		|				РаботникиСовместительство.НайденоПоНаименованию
		|			ИЗ
		|				ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиСовместительство
		|			ГДЕ
		|				(НЕ РаботникиСовместительство.ЭтоОсновноеМестоРаботы)
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				СотрудникиДУ.Сотрудник,
		|				СотрудникиДУ.ФизЛицо,
		|				ВЫБОР
		|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|						ТОГДА 3
		|					КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
		|						ТОГДА 4
		|					ИНАЧЕ 5
		|				КОНЕЦ,
		|				СотрудникиДУ.НайденоПоНаименованию
		|			ИЗ
		|				ВТ_ФизическиеЛица КАК СотрудникиДУ) КАК СписокФизическихЛиц
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СписокФизическихЛиц.Физлицо,
		|			СписокФизическихЛиц.НайденоПоНаименованию,
		|			СписокФизическихЛиц.Сотрудник) КАК СписокФизическихЛиц
		|		ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
		|			И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет";
		
	ИначеЕсли Режим = "РаботникиИДоговорники" Тогда
		
		ДоговорыГПХ = Новый Массив;
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
		
		ТекстУсловияРаботники = "";
		Если ЗначениеЗаполнено(Организация) и ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияРаботники = " И Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		ТекстУсловияНаАктуальность = "";
		ТекстУсловияНаАктуальностьДоговорники = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И РаботникиОрганизации.Сотрудник.Актуальность";
			ТекстУсловияНаАктуальностьДоговорники = " И ДоговорникиОрганизаций.Актуальность";
		КонецЕсли;
		
		Если ВозвращатьФизлицо Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СписокСотрудников.Физлицо,
			|	СписокСотрудников.ФизлицоНаименование,
			|	СписокСотрудников.Код,
			|	ВЫБОР
			|		КОГДА СписокСотрудников.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НайденоПоНаименованию
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		РаботникиИДоговорники.Физлицо КАК Физлицо,
			|		РаботникиИДоговорники.ФизлицоНаименование КАК ФизлицоНаименование,
			|		РаботникиИДоговорники.Код КАК Код,
			|		РаботникиИДоговорники.Наименование КАК Наименование
			|	ИЗ
			|		(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|			РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
			|			РаботникиОрганизации.Сотрудник.Физлицо.Наименование КАК ФизлицоНаименование,
			|			РаботникиОрганизации.Сотрудник.Код КАК Код,
			|			РаботникиОрганизации.Сотрудник.Наименование КАК Наименование
			|		ИЗ
			|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|		ГДЕ
			|			РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~"""+ ТекстУсловияРаботники + ТекстУсловияНаАктуальность +"
			|		
			|		ОБЪЕДИНИТЬ
			|		
			|		ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|			ДоговорникиОрганизаций.Физлицо,
			|			ДоговорникиОрганизаций.Физлицо.Наименование,
			|			ДоговорникиОрганизаций.Код,
			|			ДоговорникиОрганизаций.Наименование
			|		ИЗ
			|			Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
			|		ГДЕ
			|			ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)"+ ТекстУсловияРаботники + ТекстУсловияНаАктуальностьДоговорники +"
			|		
			|		ОБЪЕДИНИТЬ
			|		
			|		ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|			РаботникиОрганизации.Сотрудник.Физлицо,
			|			РаботникиОрганизации.Сотрудник.Физлицо.Наименование,
			|			РаботникиОрганизации.Сотрудник.Код,
			|			РаботникиОрганизации.Сотрудник.Наименование
			|		ИЗ
			|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|		ГДЕ
			|			РаботникиОрганизации.Сотрудник.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~"""+ ТекстУсловияРаботники + ТекстУсловияНаАктуальность +"
			|		
			|		ОБЪЕДИНИТЬ
			|		
			|		ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|			ДоговорникиОрганизаций.Физлицо,
			|			ДоговорникиОрганизаций.Физлицо.Наименование,
			|			ДоговорникиОрганизаций.Код,
			|			ДоговорникиОрганизаций.Наименование
			|		ИЗ
			|			Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
			|		ГДЕ
			|			ДоговорникиОрганизаций.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)"+ ТекстУсловияРаботники + ТекстУсловияНаАктуальностьДоговорники +") КАК РаботникиИДоговорники) КАК СписокСотрудников";
			
		Иначе
			
			Запрос.УстановитьПараметр("ДатаАктуальности", ОбщегоНазначения.ПолучитьРабочуюДату());
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СписокСотрудников.Сотрудник,
			|	ВЫБОР
			|		КОГДА СписокСотрудников.СотрудникНаименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НайденоПоНаименованию
			|ПОМЕСТИТЬ ВТ_СписокРаботников
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		РаботникиОрганизации.Сотрудник КАК Сотрудник,
			|		РаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияРаботники + ТекстУсловияНаАктуальность + "
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		РаботникиОрганизации.Сотрудник,
			|		РаботникиОрганизации.Сотрудник.Наименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияРаботники + ТекстУсловияНаАктуальность + ") КАК СписокСотрудников";
			Запрос.Выполнить();
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СписокРаботников.Ссылка,
			|	СписокРаботников.Наименование КАК Наименование,
			|	СписокРаботников.Код КАК Код,
			|	СписокРаботников.НайденоПоНаименованию
			|ИЗ
			|	(ВЫБРАТЬ
			|		РаботникиСрезПоследних.Сотрудник КАК Ссылка,
			|		ВЫБОР
			|			КОГДА РаботникиСрезПоследних.Сотрудник.Актуальность
			|				ТОГДА ВЫБОР
			|						КОГДА РаботникиСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
			|								И РаботникиСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
			|							ТОГДА ВЫБОР
			|									КОГДА РаботникиСрезПоследних.ПричинаИзмененияСостоянияЗавершения = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|										ТОГДА ""(ув.) "" + РаботникиСрезПоследних.Сотрудник.Наименование
			|									ИНАЧЕ РаботникиСрезПоследних.Сотрудник.Наименование
			|								КОНЕЦ
			|						ИНАЧЕ ВЫБОР
			|								КОГДА РаботникиСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|									ТОГДА ""(ув.) "" + РаботникиСрезПоследних.Сотрудник.Наименование
			|								ИНАЧЕ РаботникиСрезПоследних.Сотрудник.Наименование
			|							КОНЕЦ
			|					КОНЕЦ
			|			ИНАЧЕ ""(не актуалент) "" + РаботникиСрезПоследних.Сотрудник.Наименование
			|		КОНЕЦ КАК Наименование,
			|		РаботникиСрезПоследних.Сотрудник.Код КАК Код,
			|		ВТ_СписокРаботников.НайденоПоНаименованию КАК НайденоПоНаименованию
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|				&ДатаАктуальности,
			|				Сотрудник В
			|					(ВЫБРАТЬ
			|						ВТ_СписокРаботников.Сотрудник
			|					ИЗ
			|						ВТ_СписокРаботников)) КАК РаботникиСрезПоследних
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокРаботников КАК ВТ_СписокРаботников
			|			ПО РаботникиСрезПоследних.Сотрудник = ВТ_СписокРаботников.Сотрудник
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		Договорники.Ссылка,
			|		Договорники.Наименование,
			|		Договорники.Код,
			|		Договорники.НайденоПоНаименованию
			|	ИЗ
			|		(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|			ДоговорникиОрганизаций.Ссылка КАК Ссылка,
			|			ВЫБОР
			|				КОГДА ДоговорникиОрганизаций.Актуальность
			|					ТОГДА ДоговорникиОрганизаций.Наименование
			|				ИНАЧЕ ""(не актуалент) "" + ДоговорникиОрганизаций.Наименование
			|			КОНЕЦ КАК Наименование,
			|			ДоговорникиОрганизаций.Код КАК Код,
			|			Истина КАК НайденоПоНаименованию
			|		ИЗ
			|			Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
			|		ГДЕ
			|			ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)" + ТекстУсловияРаботники + ТекстУсловияНаАктуальностьДоговорники + "
			|		
			|		ОБЪЕДИНИТЬ
			|		
			|		ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|			ДоговорникиОрганизаций.Ссылка,
			|			ВЫБОР
			|				КОГДА ДоговорникиОрганизаций.Актуальность
			|					ТОГДА ДоговорникиОрганизаций.Наименование
			|				ИНАЧЕ ""(не актуалент) "" + ДоговорникиОрганизаций.Наименование
			|			КОНЕЦ,
			|			ДоговорникиОрганизаций.Код,
			|			Ложь
			|		ИЗ
			|			Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
			|		ГДЕ
			|			ДоговорникиОрганизаций.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)" + ТекстУсловияРаботники + ТекстУсловияНаАктуальностьДоговорники + ") КАК Договорники) КАК СписокРаботников
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование УБЫВ";

		КонецЕсли;
		
	ИначеЕсли Режим = "Договорники" Тогда
		
		ДоговорыГПХ = Новый Массив;
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
		
		ТекстУсловияРаботники = "";
		Если ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияРаботники = " И ДоговорникиОрганизаций.Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		ТекстУсловияНаАктуальность = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И ДоговорникиОрганизаций.Актуальность";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|	СписокСотрудников.Наименование,
		|	СписокСотрудников.Ссылка,
		|	СписокСотрудников.Код,
		|	ВЫБОР
		|		КОГДА СписокСотрудников.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НайденоПоНаименованию
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|		ВЫБОР
		|			КОГДА ДоговорникиОрганизаций.Актуальность
		|				ТОГДА ДоговорникиОрганизаций.Наименование
		|			ИНАЧЕ ""(не актуалент) "" + ДоговорникиОрганизаций.Наименование
		|		КОНЕЦ КАК Наименование,
		|		ДоговорникиОрганизаций.Ссылка КАК Ссылка,
		|		ДоговорникиОрганизаций.Код КАК Код
		|	ИЗ
		|		Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
		|	ГДЕ
		|		ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|		И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)" + ТекстУсловияРаботники + ТекстУсловияНаАктуальность + "
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|		ВЫБОР
		|			КОГДА ДоговорникиОрганизаций.Актуальность
		|				ТОГДА ДоговорникиОрганизаций.Наименование
		|			ИНАЧЕ ""(не актуалент) "" + ДоговорникиОрганизаций.Наименование
		|		КОНЕЦ,
		|		ДоговорникиОрганизаций.Ссылка,
		|		ДоговорникиОрганизаций.Код
		|	ИЗ
		|		Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
		|	ГДЕ
		|		ДоговорникиОрганизаций.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|		И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)" + ТекстУсловияРаботники + ТекстУсловияНаАктуальность + ") КАК СписокСотрудников
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование УБЫВ";
		
		
	ИначеЕсли Режим = "РаботникиОрганизации" Тогда
		
		ТекстУсловияОрганизации = "";
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ТекстУсловияОрганизации = " И Организация = &ГоловнаяОрганизация";
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		КонецЕсли;
		
		ТекстУсловияНаАктуальность = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И РаботникиОрганизации.Сотрудник.Актуальность";
		КонецЕсли;
		
		Если ВозвращатьФизлицо Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СписокСотрудников.Физлицо,
			|	СписокСотрудников.ФизлицоНаименование,
			|	СписокСотрудников.СотрудникКод КАК Код,
			|	ВЫБОР
			|		КОГДА СписокСотрудников.СотрудникНаименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НайденоПоНаименованию
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
			|		РаботникиОрганизации.Сотрудник.Физлицо.Наименование КАК ФизлицоНаименование,
			|		РаботникиОрганизации.Сотрудник.Код КАК СотрудникКод,
			|		РаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность + "
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		РаботникиОрганизации.Сотрудник.Физлицо,
			|		РаботникиОрганизации.Сотрудник.Физлицо.Наименование,
			|		РаботникиОрганизации.Сотрудник.Код,
			|		РаботникиОрганизации.Сотрудник.Наименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность + ") КАК СписокСотрудников";
			
			
		Иначе
			
			Запрос.УстановитьПараметр("ДатаАктуальности", ОбщегоНазначения.ПолучитьРабочуюДату());
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СписокРаботников.Сотрудник,
			|	ВЫБОР
			|		КОГДА СписокРаботников.СотрудникНаименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НайденоПоНаименованию
			|ПОМЕСТИТЬ ВТ_СписокРаботников
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		РаботникиОрганизации.Сотрудник КАК Сотрудник,
			|		РаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность + "
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		РаботникиОрганизации.Сотрудник,
			|		РаботникиОрганизации.Сотрудник.Наименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность + ") КАК СписокРаботников";
			Запрос.Выполнить();
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РаботникиСрезПоследних.Сотрудник КАК Ссылка,
			|	ВЫБОР
			|		КОГДА РаботникиСрезПоследних.Сотрудник.Актуальность
			|			ТОГДА ВЫБОР
			|					КОГДА РаботникиСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
			|							И РаботникиСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
			|						ТОГДА ВЫБОР
			|								КОГДА РаботникиСрезПоследних.ПричинаИзмененияСостоянияЗавершения = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|									ТОГДА ""(ув.) "" + РаботникиСрезПоследних.Сотрудник.Наименование
			|								ИНАЧЕ РаботникиСрезПоследних.Сотрудник.Наименование
			|							КОНЕЦ
			|					ИНАЧЕ ВЫБОР
			|							КОГДА РаботникиСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|								ТОГДА ""(ув.) "" + РаботникиСрезПоследних.Сотрудник.Наименование
			|							ИНАЧЕ РаботникиСрезПоследних.Сотрудник.Наименование
			|						КОНЕЦ
			|				КОНЕЦ
			|		ИНАЧЕ ""(не актуалент) "" + РаботникиСрезПоследних.Сотрудник.Наименование
			|	КОНЕЦ КАК Наименование,
			|	РаботникиСрезПоследних.Сотрудник.Код КАК Код,
			|	ВТ_СписокРаботников.НайденоПоНаименованию
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|			&ДатаАктуальности,
			|			Сотрудник В
			|				(ВЫБРАТЬ
			|					ВТ_СписокРаботников.Сотрудник
			|				ИЗ
			|					ВТ_СписокРаботников)) КАК РаботникиСрезПоследних
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокРаботников КАК ВТ_СписокРаботников
			|		ПО РаботникиСрезПоследних.Сотрудник = ВТ_СписокРаботников.Сотрудник
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование УБЫВ";
			
		КонецЕсли;
		
	ИначеЕсли Режим = "Сотрудники" Тогда
		
		Если ВозвращатьФизлицо Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СписокСотрудников.Физлицо,
			|	СписокСотрудников.ФизлицоНаименование,
			|	СписокСотрудников.Код,
			|	ВЫБОР
			|		КОГДА СписокСотрудников.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НайденоПоНаименованию
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		СотрудникиОрганизаций.Физлицо КАК Физлицо,
			|		СотрудникиОрганизаций.Физлицо.Наименование КАК ФизлицоНаименование,
			|		СотрудникиОрганизаций.Код КАК Код,
			|		СотрудникиОрганизаций.Наименование КАК Наименование
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|	ГДЕ
			|		СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|		И СотрудникиОрганизаций.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий))
			|		И СотрудникиОрганизаций.Актуальность
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		СотрудникиОрганизаций.Физлицо,
			|		СотрудникиОрганизаций.Физлицо.Наименование,
			|		СотрудникиОрганизаций.Код,
			|		СотрудникиОрганизаций.Наименование
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|	ГДЕ
			|		СотрудникиОрганизаций.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|		И СотрудникиОрганизаций.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий))
			|		И СотрудникиОрганизаций.Актуальность) КАК СписокСотрудников";
			
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СписокСотрудников.Ссылка,
			|	СписокСотрудников.Наименование,
			|	СписокСотрудников.Код,
			|	ВЫБОР
			|		КОГДА СписокСотрудников.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НайденоПоНаименованию
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		СотрудникиОрганизаций.Ссылка КАК Ссылка,
			|		СотрудникиОрганизаций.Наименование КАК Наименование,
			|		СотрудникиОрганизаций.Код КАК Код
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|	ГДЕ
			|		СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|		И СотрудникиОрганизаций.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий))
			|		И СотрудникиОрганизаций.Актуальность
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		СотрудникиОрганизаций.Ссылка,
			|		СотрудникиОрганизаций.Наименование,
			|		СотрудникиОрганизаций.Код
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|	ГДЕ
			|		СотрудникиОрганизаций.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|		И СотрудникиОрганизаций.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий))
			|		И СотрудникиОрганизаций.Актуальность) КАК СписокСотрудников";
			
		КонецЕсли;
		
	ИначеЕсли Режим = "СотрудникиОрганизации" Тогда
		
		
		Если Регистратор = Неопределено Тогда
			Регистратор = Документы.ПриемНаРаботуВОрганизацию.ПустаяСсылка();
		КонецЕсли;	
		Запрос.УстановитьПараметр("парамНеОтбиратьПоОрганизации", Не ЗначениеЗаполнено(Организация));
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		Запрос.УстановитьПараметр("Регистратор", Регистратор);

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|	СписокСотрудников.Ссылка,
		|	СписокСотрудников.Наименование,
		|	СписокСотрудников.Код,
		|	ВЫБОР
		|		КОГДА СписокСотрудников.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НайденоПоНаименованию
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|		СотрудникиОрганизаций.Ссылка КАК Ссылка,
		|		СотрудникиОрганизаций.Наименование КАК Наименование,
		|		СотрудникиОрганизаций.Код КАК Код
		|	ИЗ
		|		Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|			ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизаций.Сотрудник
		|				И (РаботникиОрганизаций.Регистратор <> &Регистратор)
		|	ГДЕ
		|		СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|		И РаботникиОрганизаций.Сотрудник ЕСТЬ NULL 
		|		И СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|		И СотрудникиОрганизаций.Актуальность
		|		И (&парамНеОтбиратьПоОрганизации
		|				ИЛИ СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|		СотрудникиОрганизаций.Ссылка,
		|		СотрудникиОрганизаций.Наименование,
		|		СотрудникиОрганизаций.Код
		|	ИЗ
		|		Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|			ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизаций.Сотрудник
		|				И (РаботникиОрганизаций.Регистратор <> &Регистратор)
		|	ГДЕ
		|		СотрудникиОрганизаций.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|		И РаботникиОрганизаций.Сотрудник ЕСТЬ NULL 
		|		И СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|		И СотрудникиОрганизаций.Актуальность
		|		И (&парамНеОтбиратьПоОрганизации
		|				ИЛИ СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация)) КАК СписокСотрудников";
		
	Иначе
		
		Возврат Новый СписокЗначений;
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Количество = Выборка.Количество();
	
	Если Количество < 51 Тогда
		
		Значение = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Если ВозвращатьФизлицо Тогда
				Значение.Добавить(Выборка.Физлицо, ?(Выборка.НайденоПоНаименованию,Выборка.ФизлицоНаименование, Выборка.Код + " (" + Выборка.ФизлицоНаименование + ")"));
			Иначе
				Значение.Добавить(Выборка.Ссылка, ?(Выборка.НайденоПоНаименованию,Выборка.Наименование, Выборка.Код + " (" + Выборка.Наименование + ")"));
			КонецЕсли;
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		Возврат Значение;
		
	Иначе
		// значений для выбора больше 50
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПодобратьСписокСотрудников()

#КонецЕсли

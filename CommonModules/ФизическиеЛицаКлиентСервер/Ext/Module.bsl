
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ИСПОЛЬЗУЕМЫЕ В РАБОТЕ ЛИЧНЫХ КАРТОЧЕК

#Если Не ТонкийКлиент И Не ВебКлиент Тогда
	
// Процедура оформляет команды-надписи в соответствии с заполненностью 
//  и доступностью значения. 
//  Используется для специализированных надписей, 
//  применяемых в формах сотрудника и кандидата
//
Процедура УстановитьЦветТекстаНадписейПоЗначению(Надписи, Значение, ДоступноИзменение = Истина) Экспорт
	
	ЦветТекста = ?(ЗначениеЗаполнено(Значение) или Не ДоступноИзменение, ЦветаСтиля.ТекстЗаполненныхЗначений, ЦветаСтиля.ЦветГиперссылки);
	
	Для Каждого Надпись Из Надписи Цикл
		Надпись.ЦветТекста	= ЦветТекста;
		Надпись.Гиперссылка	= ДоступноИзменение;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Если ДоступноИзменение Тогда
			Значение = "Заполнить";
		Иначе
			Значение = "Не заполнено";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦветТекстаНадписейПоЗначению

Процедура УстановитьЦветТекстаНадписиПоЗначению(Надпись, Значение, ДоступноИзменение = Истина) Экспорт
	
	УстановитьЦветТекстаНадписейПоЗначению(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Надпись), Значение, ДоступноИзменение);
	
КонецПроцедуры // УстановитьЦветТекстаНадписиПоЗначению

#КонецЕсли

Функция КрайняяСтрокаТабличнойЧастиПоЗначению(ТабличнаяЧасть, ИмяПоляЗначения) Экспорт
	
	КрайняяСтрока = ?(ТабличнаяЧасть.Количество() > 0, ТабличнаяЧасть[0], Неопределено);
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если СтрокаТабличнойЧасти[ИмяПоляЗначения] >= КрайняяСтрока[ИмяПоляЗначения] Тогда
			КрайняяСтрока = СтрокаТабличнойЧасти;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КрайняяСтрока;
	
КонецФункции // КрайняяСтрокаТабличнойЧастиПоЗначению

Функция ФормаМножественногоЧисла(Слово1, Слово2, Слово3, Знач ЦелоеЧисло) Экспорт
	
	// Изменим знак целого числа, иначе отрицательные числа будут неправильно преобразовываться
	Если ЦелоеЧисло < 0 Тогда
		ЦелоеЧисло = -1 * ЦелоеЧисло;
	КонецЕсли;
	
	Если ЦелоеЧисло <> Цел(ЦелоеЧисло) Тогда 
		// для нецелых чисел - всегда вторая форма
		Возврат Слово2;
	КонецЕсли;
	
	// остаток
	Остаток = ЦелоеЧисло%10;
	Если (ЦелоеЧисло >10) И (ЦелоеЧисло<20) Тогда
		// для второго десятка - всегда третья форма
		Возврат Слово3;
	ИначеЕсли Остаток=1 Тогда
		Возврат Слово1;
	ИначеЕсли (Остаток>1) И (Остаток<5) Тогда
		Возврат Слово2;
	Иначе
		Возврат Слово3;
	КонецЕсли;

КонецФункции // ФормаМножественногоЧисла

Функция Возраст(ДатаРождения, ДатаВозраста = Неопределено)
	
	Если ДатаВозраста = Неопределено Тогда
		ДатаВозраста = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Возраст = 0;
	
	Если ЗначениеЗаполнено(ДатаРождения) Тогда
		Возраст = Год(ДатаВозраста) - Год(ДатаРождения) + ?(Месяц(ДатаРождения) > Месяц(ДатаВозраста), -1, 0);
	КонецЕсли;

	Возврат Возраст;
	
КонецФункции // Возраст

Функция ПредставлениеВозраста(ДатаРождения, ДатаВозраста = Неопределено) Экспорт
	
	Возраст = Возраст(ДатаРождения, ДатаВозраста);
	
	Возврат Формат(Возраст) + " " + ?(Возраст > 0, ФормаМножественногоЧисла("год", "года", "лет", Возраст), "");
	
КонецФункции // ПредставлениеВозраста

Функция ПредставлениеМестаРождения(СтрокаМестоРождения) Экспорт
	
	СтруктураМестоРождения = РегламентированнаяОтчетность.РазложитьМестоРождения(СтрокаМестоРождения, Ложь);

	ЧастиМестаРождения = Новый Массив;
	ЧастиМестаРождения.Добавить("НаселенныйПункт");
	ЧастиМестаРождения.Добавить("Район");
	ЧастиМестаРождения.Добавить("Область");
	ЧастиМестаРождения.Добавить("Страна");
	
	Представление = ?(СтруктураМестоРождения.Особое = 1, "особое  ", "");
	Для Каждого ЧастьМестаРождения Из ЧастиМестаРождения Цикл
		Представление = Представление + ?(ЗначениеЗаполнено(СтруктураМестоРождения[ЧастьМестаРождения]), СтруктураМестоРождения[ЧастьМестаРождения] + ", ", "");
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Представление, 2);
	
	Возврат Представление;
	
КонецФункции // ПредставлениеМестаРождения

Функция ОбразованиеПредставление(СтрокаОбразование) Экспорт
	
	ОбразованиеПредставление = "";
	Если СтрокаОбразование <> Неопределено Тогда
		ОбразованиеПредставление 	= ?(ЗначениеЗаполнено(СтрокаОбразование.ВидОбразования), Строка(СтрокаОбразование.ВидОбразования), "")
									+ Символы.ПС
									+ ?(ЗначениеЗаполнено(СтрокаОбразование.УчебноеЗаведение), Строка(СтрокаОбразование.УчебноеЗаведение), "")
									+ ?(ЗначениеЗаполнено(СтрокаОбразование.ГодОкончания), " (" + Формат(СтрокаОбразование.ГодОкончания, "ЧГ=0") + ")", "") 
									+ Символы.ПС
									+ ?(ЗначениеЗаполнено(СтрокаОбразование.Специальность), Строка(СтрокаОбразование.Специальность), "")
									+ ?(ЗначениеЗаполнено(СтрокаОбразование.Квалификация), ", " + Строка(СтрокаОбразование.Квалификация), "");
	КонецЕсли;
	
	Возврат ОбразованиеПредставление;
	
КонецФункции // ОбразованиеПредставление

Функция ПрофессииПредставление(ПрофессииТаблица) Экспорт
	
	ПрофессииПредставление = "";
	Если ПрофессииТаблица.Количество() > 0 Тогда
		Для Каждого СтрокаПрофессии Из ПрофессииТаблица Цикл
			ПрофессииПредставление 	= ПрофессииПредставление 
									+ ?(ЗначениеЗаполнено(СтрокаПрофессии.Профессия), Строка(СтрокаПрофессии.Профессия), "")
									+ ", ";
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПрофессииПредставление, 2);
	КонецЕсли;
	
	Возврат ПрофессииПредставление;
	
КонецФункции // ПрофессииПредставление

Функция ЗнаниеЯзыковПредставление(ЗнаниеЯзыковТаблица) Экспорт
	
	ЗнаниеЯзыковПредставление = "";
	Если ЗнаниеЯзыковТаблица.Количество() > 0 Тогда
		Для Каждого СтрокаЯзыки Из ЗнаниеЯзыковТаблица Цикл
			ЗнаниеЯзыковПредставление 	= ЗнаниеЯзыковПредставление 
										+ ?(ЗначениеЗаполнено(СтрокаЯзыки.Язык), Строка(СтрокаЯзыки.Язык), "")
										+ ?(ЗначениеЗаполнено(СтрокаЯзыки.СтепеньЗнанияЯзыка), " (" + Строка(СтрокаЯзыки.СтепеньЗнанияЯзыка) + ")", "")
										+ ", ";
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ЗнаниеЯзыковПредставление, 2);
	КонецЕсли;

	Возврат ЗнаниеЯзыковПредставление;
	
КонецФункции // ЗнаниеЯзыковПредставление

Функция ТрудоваяДеятельностьПредставление(ТрудоваяДеятельностьТаблица) Экспорт
	
	МестаРаботыПредставление = "";
	Если ТрудоваяДеятельностьТаблица.Количество() > 0 Тогда
		МестаРаботыПредставление = "";
		Для Каждого МестоРаботы Из ТрудоваяДеятельностьТаблица Цикл
			СтрокаШаблон 	= ?(ЗначениеЗаполнено(МестоРаботы.Организация), "%1 ", "") 
							+ ?(ЗначениеЗаполнено(МестоРаботы.ДатаНачала), "с %2 ", "") 
							+ ?(ЗначениеЗаполнено(МестоРаботы.ДатаОкончания), "по %3 ", "") 
							+ ?(ЗначениеЗаполнено(МестоРаботы.Должность), "(%4)", "") 
							+ ", ";
			МестаРаботыПредставление = МестаРаботыПредставление 
									+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаШаблон, 
										МестоРаботы.Организация,
										Формат(МестоРаботы.ДатаНачала, "ДФ=dd.MM.yyyy"),
										Формат(МестоРаботы.ДатаОкончания, "ДФ=dd.MM.yyyy"),
										МестоРаботы.Должность);
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(МестаРаботыПредставление, 2);
	КонецЕсли;
	
	Возврат МестаРаботыПредставление;
	
КонецФункции // ТрудоваяДеятельностьПредставление

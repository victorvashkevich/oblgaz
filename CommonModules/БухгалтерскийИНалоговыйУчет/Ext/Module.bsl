
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ФОРМАМИ

//Устанавливает видимость реквизитов формы относящихся к УСН
//
Процедура УстановитьВидимостьРеквизитовУСН(РеквизитыФормы, Организация, Дата, УчетнаяПолитикаПоНалоговомуУчету) Экспорт
	
	ДатаПериода = КонецМесяца(Дата);
	
	ВидимостьУСН = УчетнаяПолитикаПоНалоговомуУчету[ДатаПериода][Организация].УСН;
   	Если ВидимостьУСН И УчетнаяПолитикаПоНалоговомуУчету[ДатаПериода][Организация].ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Или НЕ ЗначениеЗаполнено(Дата) Тогда	
		ВидимостьУСН = Ложь;		
	КонецЕсли;
	
	ВидимостьНУ = НЕ (УчетнаяПолитикаПоНалоговомуУчету[ДатаПериода][Организация].УСН Или НЕ ЗначениеЗаполнено(Дата));	
	//vvv
	ВидимостьНУ=Ложь;
	//

	Для Каждого Элемент Из РеквизитыФормы Цикл

		Если Найти(Элемент.Имя, "УСН") > 0 Тогда
			Элемент.Видимость = ВидимостьУСН;

		ИначеЕсли Найти(Элемент.Имя, "НУ") > 0 Тогда
			Элемент.Видимость = ВидимостьНУ;

		ИначеЕсли Тип(Элемент) = Тип("ТабличноеПоле") Тогда

			Для Каждого Колонка Из Элемент.Колонки Цикл

				Если Найти(Колонка.Имя, "УСН") > 0 Тогда
					Колонка.Видимость         = ВидимостьУСН;
					Колонка.ИзменятьВидимость = ВидимостьУСН;

				ИначеЕсли Найти(Колонка.Имя, "НУ") > 0 Тогда
					Колонка.Видимость         = ВидимостьНУ;
					Колонка.ИзменятьВидимость = ВидимостьНУ;

				КонецЕсли;

			КонецЦикла;

		ИначеЕсли Тип(Элемент) = Тип("Панель") Тогда

			Для Каждого Страница Из Элемент.Страницы Цикл

				Если Найти(Страница.Имя, "УСН") > 0 Тогда
					Страница.Видимость = ВидимостьУСН;

				ИначеЕсли Найти(Страница.Имя, "НУ") > 0 Тогда
					Страница.Видимость = ВидимостьНУ;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла

КонецПроцедуры

//Устанавливает видимость реквизитов формы относящихся к ЕНВД
// Параметры:
//  ЭлементыФормы  - массив с коллекцией ЭУ формы, видимость которых необходимо определить
//  УчетнаяПолитикаПоНалоговомуУчету - структура, содержит данные учетной политики    
//  Организация -  Организация
//  Дата - Дата на которую определяем видимость ЭУ
//  ВидимостьНаДату - булево, значение ложь означает, что видимость будет установлена если в организации 
//  ЕНВД применялся вообще, не зависимо от даты которую передали
//
Процедура УстановитьВидимостьРеквизитовЕНВД(РеквизитыФормы, Организация, Дата, УчетнаяПолитикаПоНалоговомуУчету, ВидимостьНаДату = Истина) Экспорт
	
	ВидимостьЕНВД = Ложь;
	Если ВидимостьНаДату Тогда
		ВидимостьЕНВД = УчетнаяПолитикаПоНалоговомуУчету[КонецМесяца(Дата)][Организация].ОрганизацияЯвляетсяПлательщикомЕНВД И ЗначениеЗаполнено(Дата);
	Иначе
		Для каждого УчетнаяПолитикаНаДату Из УчетнаяПолитикаПоНалоговомуУчету Цикл
			Если Не УчетнаяПолитикаНаДату.Значение.Получить(Организация) = Неопределено Тогда
				ВидимостьЕНВД = УчетнаяПолитикаНаДату.Значение.Получить(Организация).ОрганизацияЯвляетсяПлательщикомЕНВД;
				Если ВидимостьЕНВД Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Элемент Из РеквизитыФормы Цикл 

		Если ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") и Элемент.Имя = "ОтнесениеРасходовКДеятельностиЕНВД" Тогда
			Элемент.Видимость			= ВидимостьЕНВД;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") и Элемент.Имя = "ПодпадаетПодЕНВД" Тогда
			Элемент.Видимость			= ВидимостьЕНВД;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") и Элемент.Имя = "СтатьяЗатратЕНВД" Тогда
			Элемент.Видимость			= ВидимостьЕНВД;
			Элемент.ИзменятьВидимость	= ВидимостьЕНВД;	
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеВвода") и Элемент.Имя = "ОтнесениеРасходовКДеятельностиЕНВД" Тогда
			Элемент.Видимость			= ВидимостьЕНВД;
		ИначеЕсли ТипЗнч(Элемент) = Тип("Надпись") и Элемент.Имя = "НадписьОтнесениеРасходовКДеятельностиЕНВД" Тогда
			Элемент.Видимость			= ВидимостьЕНВД;
		ИначеЕсли ТипЗнч(Элемент) = Тип("Флажок") и Элемент.Имя = "ПодпадаетПодЕНВД" Тогда
			Элемент.Видимость			= ВидимостьЕНВД;	
		КонецЕсли;
		
	КонецЦикла

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТАВКАМИ НАЛОГОВ И ВЗНОСОВ

// Эта функция получает ставку взноса на страхование от несчастных случаев
//
// Параметры:      
//	Организация - СправочникСсылка.Организации - организация для которой нужно получить ставку
//	ДатаАктуальности - дата на которую нужно получить ставку
//
// Возвращаемое значение: 
//  Число - размер ставки, если ставка не задана - 0
//
Функция ПолучитьСтавкуВзносаНаСтрахованиеОтНесчастныхСлучаев(Организация, ДатаАктуальности) Экспорт
	Отбор = Новый Структура("Организация", Организация);
	Возврат РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.ПолучитьПоследнее(ДатаАктуальности, Отбор).Ставка / 100;
	
КонецФункции // ПолучитьСтавкуВзносаНаСтрахованиеОтНесчастныхСлучаев
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО


//РБ
// Процедура установки типа и доступности субконто в зависимости от  выбранного счета
//
Процедура ПриВыбореСчетаВТабличномПоле(Счет, Субконто1, ЭлементДиалогаСубконто1, Субконто2, ЭлементДиалогаСубконто2, Субконто3, ЭлементДиалогаСубконто3, ЭлементДиалогаСчет = НЕОПРЕДЕЛЕНО, ТолькоПросмотр = ЛОЖЬ, ТолькоПросмотрПартииУСН = Истина) Экспорт
	
	ЭлементыСубконто = Новый Структура("Субконто1,ЭлементДиалогаСубконто1,Субконто2,ЭлементДиалогаСубконто2,Субконто3,ЭлементДиалогаСубконто3", Субконто1, ЭлементДиалогаСубконто1, Субконто2, ЭлементДиалогаСубконто2, Субконто3, ЭлементДиалогаСубконто3);
	
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
		
		ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ТолькоПросмотр = ТолькоПросмотр;
		
		Если ТипЗнч(ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч]) = Тип("ПолеВвода") Тогда
			ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
		Иначе
			ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ЭлементУправления.ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
		КонецЕсли; 
			
		// Чтобы не устанавливался флаг модифицированности при открытии формы
		Если ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]) <> ЭлементыСубконто["Субконто" + Сч] Тогда
			ЭлементыСубконто["Субконто" + Сч] = ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Сч = (ЧислоАктивныхСубконто + 1) По 3 Цикл
			
		Если Не ЭлементыСубконто["Субконто" + Сч] = Неопределено Тогда
			ЭлементыСубконто["Субконто" + Сч] = Неопределено;
		КонецЕсли;
		
		ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ТолькоПросмотр = Истина;
		
	КонецЦикла;
	
	Если ЭлементДиалогаСчет <> Неопределено Тогда
		ЭлементДиалогаСчет.ТолькоПросмотр = ТолькоПросмотр;
	КонецЕсли;

	Если Не Субконто1 = ЭлементыСубконто.Субконто1 Тогда
		Субконто1 = ЭлементыСубконто.Субконто1;
	КонецЕсли;
	Если Не Субконто2 = ЭлементыСубконто.Субконто2 Тогда
		Субконто2 = ЭлементыСубконто.Субконто2;
	КонецЕсли;
	Если Не Субконто3 = ЭлементыСубконто.Субконто3 Тогда
		Субконто3 = ЭлементыСубконто.Субконто3;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореСчета()

// Производит замену субконто НУ на субконто БУ, если у них одинаковые типы-
// 
Процедура ЗаменитьСубконтоНУ(СчетБУ, СчетНУ, НомерСубконто, СубконтоБУ, СубконтоНУ) Экспорт

	Если Не ЗначениеЗаполнено(СчетБУ) Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СчетНУ) Тогда
		Возврат;
	КонецЕсли;

	Если СчетНУ.ВидыСубконто.Количество() >= НомерСубконто Тогда
		Если СчетБУ.ВидыСубконто[НомерСубконто - 1].ВидСубконто.ТипЗначения = 
			СчетНУ.ВидыСубконто[НомерСубконто - 1].ВидСубконто.ТипЗначения Тогда

			СубконтоНУ = СубконтоБУ;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаменитьСубконтоНУ()




// Преобразует согласно заданых параметров счет БУ в счет НУ
// 
Функция ПреобразоватьСчетаБУвСчетНУ(СтруктураДанных, Тип = "НУ", ССубконто = Ложь) Экспорт

	Перем ТекстУсловий;

	Результат = ПланыСчетов.Налоговый.ПустаяСсылка();

	Если НЕ (Тип = "НУ" ИЛИ Тип = "УСН") Тогда
		Сообщить("Неверный тип преобразования счета БУ в счет НУ");
		Возврат Неопределено;
	КонецЕсли;
	

	Если НЕ ЗначениеЗаполнено(СтруктураДанных) Тогда
		Возврат Результат;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетБУ,
	|	СчетКоррБУ,
	|	СубконтоБУ1,
	|	СубконтоБУ2,
	|	СубконтоБУ3,
	|	ВидЗатратНУ,
	|	СчетНУ,
	|	СубконтоНУ1,
	|	СубконтоНУ2,
	|	СубконтоНУ3,
	|	СчетУСН,
	|	СубконтоУСН1,
	|	СубконтоУСН2,
	|	СубконтоУСН3
	|ИЗ
	|	РегистрСведений.СоответствиеСчетовБУиНУ КАК СоответствиеСчетовБУиНУ
	|ГДЕ";

	Для каждого ПолеСтруктуры Из СтруктураДанных Цикл

		Запрос.Текст = Запрос.Текст  + Символы.ПС + ПолеСтруктуры.Ключ + " = &" + ПолеСтруктуры.Ключ + " И";
		Запрос.УстановитьПараметр(ПолеСтруктуры.Ключ, ПолеСтруктуры.Значение);

	КонецЦикла;

	Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст) - 2);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда

		Если ССубконто Тогда

			Результат = Новый Структура("Счет"+Тип+", Субконто"+Тип+"1,Субконто"+Тип+"2,Субконто"+Тип+"3");
			Результат.СчетНУ      = Выборка["Счет"     + Тип];
			Результат.СубконтоНУ1 = Выборка["Субконто" + Тип + "1"];
			Результат.СубконтоНУ2 = Выборка["Субконто" + Тип + "2"];
			Результат.СубконтоНУ3 = Выборка["Субконто" + Тип + "3"];

			Возврат Результат;

		Иначе

			Возврат Выборка["Счет" + Тип];

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ПреобразоватьСчетаБУвСчетНУ()

// Функция проверяет возможность использования счета в проводках.
//
// Параметры:
//  Счет     - Проверяемый счет.
//  Сообщать - признак вывода сообщений.
//
// Возвращаемое значение:
//  Булево - возможность использования счета в проводках
//  
//
Функция СчетМожноИспользоватьВПроводках(Счет, Сообщать = Истина) Экспорт

	Если ТипЗнч(Счет) <> Тип("ПланСчетовСсылка.Хозрасчетный") 
		И ТипЗнч(Счет) <> Тип("ПланСчетовСсылка.Налоговый") Тогда
		Возврат Ложь; // Неправильный тип
	КонецЕсли;

	Если Счет = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
		Возврат Истина; // Пустая ссылка может использоваться
	КонецЕсли;

	Если Счет.ЗапретитьИспользоватьВПроводках Тогда

		Если Сообщать Тогда
			Стр =("Счет " + СокрЛП(Счет)+" """ + Счет.Наименование + """ нельзя использовать в проводках.");
			#Если Клиент Тогда 
				Предупреждение(Стр,5);
			#КонецЕсли
			#Если ВнешнееСоединение Или Сервер Тогда 
			    Сообщить(Стр);
			#КонецЕсли
		КонецЕсли;

		Возврат Ложь; // Счет использовать в проводках нельзя

	КонецЕсли;

	Возврат Истина; // Счет можно использовать в проводках 

КонецФункции // СчетМожноИспользоватьВПроводках()

// Эта функция возвращает информацию о счете из переданного соответсвия
// Если в соответствии не найдена информация о счете - она подготавливается и 
// помещается в соответсвие
// Применяется для работы с формами в которых активно требуется получать 
// информащцию о счетах, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОСчетах - соответсвие у котрого в качестве ключа - ПланСчетовСсылка, а 
//  				  в качестве значения - структура из элементов
//					  КоличествоСубконто - число
//                    ТипСубконто1 - описание типа
//                    ТипСубконто2 - описание типа
//                    ТипСубконто3 - описание типа
//					  ВидСубконто1Представление - представление вида субконто
//					  ВидСубконто2Представление - представление вида субконто
//					  ВидСубконто3Представление - представление вида субконто
//
//	Счет - ПланСчетовСсылка
//
// Возвращаемое значение:
//  Описанная выше структура
//
Функция ПолучитьСведенияОСчете(СведенияОСчетах, Счет) Экспорт

	СведенияОСчете = СведенияОСчетах[Счет];

	Если СведенияОСчете = Неопределено Тогда

		//vvv добавляем 4-е субконто
		//СведенияОСчете = Новый Структура("КоличествоСубконто, ВидСубконто1, ВидСубконто2, ВидСубконто3, ТипСубконто1, ТипСубконто2, ТипСубконто3, ВидСубконто1Представление, ВидСубконто2Представление, ВидСубконто3Представление");
		СведенияОСчете = Новый Структура("КоличествоСубконто, ВидСубконто1, ВидСубконто2, ВидСубконто3, ВидСубконто4, ТипСубконто1, ТипСубконто2, ТипСубконто3, ТипСубконто4, ВидСубконто1Представление, ВидСубконто2Представление, ВидСубконто3Представление, ВидСубконто4Представление");

		СведенияОСчете.КоличествоСубконто = Счет.ВидыСубконто.Количество();

		Если СведенияОСчете.КоличествоСубконто > 0 Тогда

			ВидСубконто = Счет.ВидыСубконто[0].ВидСубконто;

			СведенияОСчете.ВидСубконто1              = ВидСубконто;
			СведенияОСчете.ТипСубконто1              = ВидСубконто.ТипЗначения;
			СведенияОСчете.ВидСубконто1Представление = ВидСубконто.Наименование;

		КонецЕсли;

		Если СведенияОСчете.КоличествоСубконто > 1 Тогда

			ВидСубконто = Счет.ВидыСубконто[1].ВидСубконто;

			СведенияОСчете.ВидСубконто2              = ВидСубконто;
			СведенияОСчете.ТипСубконто2              = ВидСубконто.ТипЗначения;
			СведенияОСчете.ВидСубконто2Представление = ВидСубконто.Наименование;

		КонецЕсли;

		Если СведенияОСчете.КоличествоСубконто > 2 Тогда

			ВидСубконто = Счет.ВидыСубконто[2].ВидСубконто;

			СведенияОСчете.ВидСубконто3              = ВидСубконто;
			СведенияОСчете.ТипСубконто3              = ВидСубконто.ТипЗначения;
			СведенияОСчете.ВидСубконто3Представление = ВидСубконто.Наименование;

		КонецЕсли;
		
		//vvv
		Если СведенияОСчете.КоличествоСубконто > 3 Тогда

			ВидСубконто = Счет.ВидыСубконто[3].ВидСубконто;

			СведенияОСчете.ВидСубконто4              = ВидСубконто;
			СведенияОСчете.ТипСубконто4              = ВидСубконто.ТипЗначения;
			СведенияОСчете.ВидСубконто4Представление = ВидСубконто.Наименование;

		КонецЕсли;
		//

		СведенияОСчетах[Счет] = СведенияОСчете;

	КонецЕсли;

	Возврат СведенияОСчете;

КонецФункции  // ПолучитьСведенияОСчете

// Выполняет в табличном поле приведение значений субконто к типу, соответствующему счету
// сведения о счете передаются через параметр СведенияОСчете
// используется для табличных полей, содержащих колонки типа Счет и соответствующие ему субконто
//
// Параметры:
//	ТабличноеПоле 	- табличное поле 
//  ДтКт 			- строка "Дт", "Кт" или "" - часть имени колонки табличного поля
// 					для колонок табличного поля поддерживаются имена 
//					типа СубконтоДт1, СубконтоКт1, Субконто1...
//  СведенияОСчете 	- структура
//					  КоличествоСубконто - число
//                    ТипСубконто1 - описание типа
//                    ТипСубконто2 - описание типа
//                    ТипСубконто3 - описание типа
//					  ВидСубконто1Представление - представление вида субконто - в данной процедуре не используется
//					  ВидСубконто2Представление - представление вида субконто - в данной процедуре не используется
//					  ВидСубконто3Представление - представление вида субконто - в данной процедуре не используется
//
Процедура ПривестиЗначениеСубконто(ТабличноеПоле, ДтКт, СведенияОСчете) Экспорт
	//vvv добавляем 4-е субконто
	//Для СчетчикСубконто = 1 По 3 Цикл
	Для СчетчикСубконто = 1 По 4 Цикл
		Если СведенияОСчете.КоличествоСубконто >= СчетчикСубконто Тогда
			ТабличноеПоле.ТекущиеДанные["Субконто"+ДтКт+СчетчикСубконто] = СведенияОСчете["ТипСубконто"+СчетчикСубконто].ПривестиЗначение(ТабличноеПоле.ТекущиеДанные["Субконто"+ДтКт+СчетчикСубконто]);
		Иначе
			ТабличноеПоле.ТекущиеДанные["Субконто"+ДтКт+СчетчикСубконто] = Неопределено;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры   // ПривестиЗначениеСубконто

// Назначает видимость ячейкам строки табличного поля, соответствующим субконто
// в зависимлсти от счета. Сведения о счете передаются через параметр СведенияОСчете
// Используется для табличных полей, содержащих колонки типа Счет и соответствующие ему субконто
// при выводе строки
//
// Параметры:
//	ОформлениеСтроки 	- оформление строки
//  ДтКт 				- строка "Дт", "Кт" или "" - часть имени колонки табличного поля
// 						для колонок табличного поля поддерживаются имена 
//						типа СубконтоДт1, СубконтоКт1, Субконто1...
//  СведенияОСчете 		- структура
//					  	КоличествоСубконто - число
//                    	ТипСубконто1 - описание типа
//                    	ТипСубконто2 - описание типа
//                    	ТипСубконто3 - описание типа
//					    ВидСубконто1Представление - представление вида субконто - в данной процедуре не используется
//					    ВидСубконто2Представление - представление вида субконто - в данной процедуре не используется
//					    ВидСубконто3Представление - представление вида субконто - в данной процедуре не используется
//
Процедура НазначитьВидимостьСубконто(ОформлениеСтроки, ДтКт, СведенияОСчете) Экспорт
	Для СчетчикСубконто = 1 По 3 Цикл
		ОформлениеСтроки.Ячейки["Субконто"+ДтКт+СчетчикСубконто].Видимость = СведенияОСчете.КоличествоСубконто >= СчетчикСубконто;
		ОформлениеСтроки.Ячейки["Субконто"+ДтКт+СчетчикСубконто].ТолькоПросмотр = не СведенияОСчете.КоличествоСубконто >= СчетчикСубконто;
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверяет глобальную переменную глУчетнаяПолитикаПоНалоговомуУчету
// на наличие в ней структуры на конец квартала указанной даты по данной организации
// Параметры:
//  Период - Дата.
//  Организация - Организация.
//
Процедура ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(УчетнаяПолитикаПоНалоговомуУчету, Период, Организация) Экспорт
	
	ДатаПериода = ?(ЗначениеЗаполнено(Период),КонецМесяца(Период),Период);

	ПустаяУчетнаяПолитикаПоНалоговомуУчету = Новый Структура("УСН,ОбъектНалогообложенияУСН,ОрганизацияЯвляетсяПлательщикомЕНВД,УплачиватьДобровольныеВзносыВФСС,ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете",Ложь,Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка(),Ложь,Ложь,Перечисления.ВариантыУчетаРасходовПоНалогамСФОТВНалоговомУчете.ПустаяСсылка());
	
	Если УчетнаяПолитикаПоНалоговомуУчету[ДатаПериода] = Неопределено Тогда
		УчетнаяПолитика = Новый Соответствие;
		УчетнаяПолитика.Вставить(Справочники.Организации.ПустаяСсылка(), ПустаяУчетнаяПолитикаПоНалоговомуУчету);
		УчетнаяПолитикаПоНалоговомуУчету.Вставить(ДатаПериода,УчетнаяПолитика);
	Иначе
		УчетнаяПолитика = УчетнаяПолитикаПоНалоговомуУчету[ДатаПериода]
	КонецЕсли;
	
	Если УчетнаяПолитика[Организация] = Неопределено Тогда
		УчетнаяПолитика.Вставить(Организация, ПустаяУчетнаяПолитикаПоНалоговомуУчету);
		ДатаОсмотра = '00010101';
		Для Каждого ПериодыУчетнойПолитики Из УчетнаяПолитикаПоНалоговомуУчету Цикл
			Если ПериодыУчетнойПолитики.Значение[Организация] <> Неопределено 
				И ДатаПериода > ПериодыУчетнойПолитики.Ключ 
				И ПериодыУчетнойПолитики.Ключ > ДатаОсмотра Тогда
				ДатаОсмотра = ПериодыУчетнойПолитики.Ключ;
				УчетнаяПолитика.Вставить(Организация, ПериодыУчетнойПолитики.Значение[Организация]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	#Если Сервер Тогда
		глЗначениеПеременнойУстановить("глУчетнаяПолитикаПоНалоговомуУчету", УчетнаяПолитикаПоНалоговомуУчету);
	#КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СПОСОБАМИ ОТРАЖЕНИЯ В УЧЕТЕ

// Функция получает данные способа отраженния
//
// Параметры
//  <СпособОтражения>  – <СправочникСсылка.Способы отраженияЗарплатыВРеглУчете> – способ отражения по которому
//						необходимо получить данные
// Возвращаемое значение:
//   Результат запроса
//
Функция ПолучитьХарактеристикуСпособаОтражения(СпособОтражения) Экспорт

	Если СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СпособыОтражения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА СпособыОтражения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СчетВыбран,
	|	ВЫБОР
	|		КОГДА СпособыОтражения.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.БольничныйЗаСчетРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК БольничныйЗаСчетРаботодателя,
	|	ВЫБОР
	|		КОГДА СпособыОтражения.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеОтражатьВБухучете,
	|	ВЫБОР
	|		КОГДА СпособыОтражения.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтражениеНачисленийПоУмолчанию
	|ИЗ
	|	Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК СпособыОтражения
	|ГДЕ
	|	СпособыОтражения.Ссылка = &парамСпособОтражения";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСпособОтражения", СпособОтражения);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();


КонецФункции // ПолучитьХарактеристикуСпособаОтражения()


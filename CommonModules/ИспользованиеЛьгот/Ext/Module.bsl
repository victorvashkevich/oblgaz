Функция ТекстЗапросаСведенийОШтатнойЧисленности()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДолжностиФизлиц.Должность,
	|	ДолжностиФизлиц.ФизЛицо КАК ФизЛицо,
	|	ДолжностиФизлиц.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ДолжностиФизлиц
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаботникиСрезПоследних.Должность КАК Должность,
	|		РаботникиСрезПоследних.ФизЛицо КАК ФизЛицо,
	|		0 КАК Приоритет
	|	ИЗ
	|		РегистрСведений.Работники.СрезПоследних(&Период, ) КАК РаботникиСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		РаботникиОрганизацийСрезПоследних.Должность,
	|		РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо,
	|		ВЫБОР
	|			КОГДА РаботникиОрганизацийСрезПоследних.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|				ТОГДА 1
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РаботникиОрганизацийСрезПоследних.Сотрудник.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|						ТОГДА 2
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		КОНЕЦ
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Период, ) КАК РаботникиОрганизацийСрезПоследних) КАК ДолжностиФизлиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДолжностиФизлиц.ФизЛицо,
	|	МИНИМУМ(ДолжностиФизлиц.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ФизлицаПриоритеты
	|ИЗ
	|	ДолжностиФизлиц КАК ДолжностиФизлиц
	|
	|СГРУППИРОВАТЬ ПО
	|	ДолжностиФизлиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УникальныеФизлица.Должность КАК Должность,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УникальныеФизлица.ФизЛицо) КАК КоличествоФизлиц
	|ПОМЕСТИТЬ КоличествоФизлицДолжности
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФизлицаПриоритеты.ФизЛицо КАК ФизЛицо,
	|		ФизлицаПриоритеты.Приоритет КАК Приоритет,
	|		ДолжностиФизлиц.Должность КАК Должность
	|	ИЗ
	|		ФизлицаПриоритеты КАК ФизлицаПриоритеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДолжностиФизлиц КАК ДолжностиФизлиц
	|			ПО ФизлицаПриоритеты.ФизЛицо = ДолжностиФизлиц.ФизЛицо
	|				И ФизлицаПриоритеты.Приоритет = ДолжностиФизлиц.Приоритет) КАК УникальныеФизлица
	|
	|СГРУППИРОВАТЬ ПО
	|	УникальныеФизлица.Должность
	|;
	|";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрейды") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КоличествоФизлицДолжности.Должность.Грейд КАК ДолжностьГрейд,
		|	СУММА(КоличествоФизлицДолжности.КоличествоФизлиц) КАК Количество
		|ПОМЕСТИТЬ ЧисленностьОбъектовПримененияЛьгот
		|ИЗ
		|	КоличествоФизлицДолжности КАК КоличествоФизлицДолжности
		|
		|ГДЕ
		|	КоличествоФизлицДолжности.Должность.Грейд <> ЗНАЧЕНИЕ(Справочник.Грейды.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	КоличествоФизлицДолжности.Должность.Грейд
		|;		
		|";
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КоличествоФизлицДолжности.Должность КАК ДолжностьГрейд,
		|	КоличествоФизлицДолжности.КоличествоФизлиц КАК Количество
		|ПОМЕСТИТЬ ЧисленностьОбъектовПримененияЛьгот
		|ИЗ
		|	КоличествоФизлицДолжности КАК КоличествоФизлицДолжности
		|;
		|";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СведенияОШтатнойЧисленности() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСведенийОШтатнойЧисленности();
	Запрос.УстановитьПараметр("Период", ОбщегоНазначенияЗК.ПолучитьРабочуюДату());
	
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ
	|	ЧисленностьОбъектовПримененияЛьгот.ДолжностьГрейд,
	|	ЧисленностьОбъектовПримененияЛьгот.Количество
	|ИЗ
	|	ЧисленностьОбъектовПримененияЛьгот КАК ЧисленностьОбъектовПримененияЛьгот";
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЗапросПредполагаемыхСуммРасходов() Экспорт
	
	ТекстЗапроса = ТекстЗапросаСведенийОШтатнойЧисленности();	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрейды") Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	Льготы.Ссылка,
		|	Льготы.СпособПрименения,
		|	ЛьготыОбъектыПрименения.Грейд КАК ДолжностьГрейд,
		|	Льготы.СпособОпределенияСуммыРасходов,
		|	Льготы.СуммаРасходов
		|ПОМЕСТИТЬ Льготы
		|ИЗ
		|	Справочник.Льготы КАК Льготы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Льготы.Грейды КАК ЛьготыОбъектыПрименения
		|		ПО (ЛьготыОбъектыПрименения.Ссылка = Льготы.Ссылка)
		|;";
	Иначе
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	Льготы.Ссылка,
		|	Льготы.СпособПрименения,
		|	ЛьготыОбъектыПрименения.Должность КАК ДолжностьГрейд,
		|	Льготы.СпособОпределенияСуммыРасходов,
		|	Льготы.СуммаРасходов
		|ПОМЕСТИТЬ Льготы
		|ИЗ
		|	Справочник.Льготы КАК Льготы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Льготы.Должности КАК ЛьготыОбъектыПрименения
		|		ПО (ЛьготыОбъектыПрименения.Ссылка = Льготы.Ссылка)
		|;";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Льготы.Ссылка,
	|	СУММА(ЧисленностьОбъектовПримененияЛьгот.Количество) КАК Количество
	|ПОМЕСТИТЬ ЧисленностьПримененияЛьгот
	|ИЗ
	|	Льготы КАК Льготы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЧисленностьОбъектовПримененияЛьгот КАК ЧисленностьОбъектовПримененияЛьгот
	|		ПО Льготы.ДолжностьГрейд = ЧисленностьОбъектовПримененияЛьгот.ДолжностьГрейд
	|			И (Льготы.СпособПрименения <> ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьгот.ДляВсех))
	|ГДЕ
	|	ЧисленностьОбъектовПримененияЛьгот.Количество ЕСТЬ НЕ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Льготы.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Льготы.Ссылка,
	|	СУММА(ЧисленностьОбъектовПримененияЛьгот.Количество)
	|ИЗ
	|	Справочник.Льготы КАК Льготы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЧисленностьОбъектовПримененияЛьгот КАК ЧисленностьОбъектовПримененияЛьгот
	|		ПО (Льготы.СпособПрименения = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьгот.ДляВсех))
	|ГДЕ
	|	ЧисленностьОбъектовПримененияЛьгот.Количество ЕСТЬ НЕ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Льготы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Константы.ВалютаУправленческогоУчета КАК ВалютаУпрУчета,
	|	Константы.ВалютаРегламентированногоУчета КАК ВалютаРеглУчета
	|ПОМЕСТИТЬ ВалютыУчета
	|ИЗ
	|	Константы КАК Константы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВалютыУчета.ВалютаРеглУчета,
	|	1,
	|	1
	|ИЗ
	|	ВалютыУчета КАК ВалютыУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыНаЛьготы.СуммаРасходов,
	|	РасходыНаЛьготы.СуммаРасходовВВалютеУпрУчета,
	|	РасходыНаЛьготы.Валюта,
	|	РасходыНаЛьготы.ВалютаУпрУчета,
	|	ВЫБОР
	|		КОГДА РасходыНаЛьготы.Валюта = РасходыНаЛьготы.ВалютаУпрУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВалютаУпрУчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ЕСТЬNULL(ВЫБОР
	|					КОГДА Льготы.СпособОпределенияСуммыРасходов = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммыРасходовНаПерсонал.СуммаНеЗависитОтКоличестваСотрудников)
	|						ТОГДА Льготы.СуммаРасходов
	|					ИНАЧЕ Льготы.СуммаРасходов * ЧисленностьПримененияЛьгот.Количество
	|				КОНЕЦ, 0)) КАК СуммаРасходов,
	|		Льготы.Валюта КАК Валюта,
	|		ВалютыУчета.ВалютаУпрУчета КАК ВалютаУпрУчета,
	|		СУММА(ВЫБОР
	|				КОГДА Льготы.СпособОпределенияСуммыРасходов = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммыРасходовНаПерсонал.СуммаНеЗависитОтКоличестваСотрудников)
	|					ТОГДА Льготы.СуммаРасходов * (КурсыВалют.Курс / КурсыВалют.Кратность / (КурсВалютыУпрУчета.Курс / КурсВалютыУпрУчета.Кратность))
	|				ИНАЧЕ Льготы.СуммаРасходов * (КурсыВалют.Курс / КурсыВалют.Кратность / (КурсВалютыУпрУчета.Курс / КурсВалютыУпрУчета.Кратность)) * ЧисленностьПримененияЛьгот.Количество
	|			КОНЕЦ) КАК СуммаРасходовВВалютеУпрУчета
	|	ИЗ
	|		Справочник.Льготы КАК Льготы
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЧисленностьПримененияЛьгот КАК ЧисленностьПримененияЛьгот
	|			ПО (ЧисленностьПримененияЛьгот.Ссылка = Льготы.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|			ПО Льготы.Валюта = КурсыВалют.Валюта,
	|		ВалютыУчета КАК ВалютыУчета
	|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсВалютыУпрУчета
	|			ПО ВалютыУчета.ВалютаУпрУчета = КурсВалютыУпрУчета.Валюта
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Льготы.Валюта,
	|		ВалютыУчета.ВалютаУпрУчета) КАК РасходыНаЛьготы
	|ГДЕ
	|	РасходыНаЛьготы.СуммаРасходовВВалютеУпрУчета <> 0";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Период", ОбщегоНазначенияЗК.ПолучитьРабочуюДату());
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ВременныеТаблицыЗапросаПредоставленияЛьгот(Период, Льгота = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЛьготыРаботниковСрезПоследних.Физлицо КАК Физлицо,
	|	ЛьготыРаботниковСрезПоследних.Льгота
	|ПОМЕСТИТЬ Физлица
	|ИЗ
	|	РегистрСведений.ЛьготыРаботников.СрезПоследних(КОНЕЦПЕРИОДА(&Период, МЕСЯЦ), ) КАК ЛьготыРаботниковСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ЛьготыРаботниковСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ЛьготыРаботниковСрезПоследних.ПериодЗавершения <= КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|				ТОГДА ЛьготыРаботниковСрезПоследних.ДействуетПоЗавершении
	|			ИНАЧЕ ЛьготыРаботниковСрезПоследних.Действует
	|		КОНЕЦ";
	
	Если ЗначениеЗаполнено(Льгота) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И ЛьготыРаботниковСрезПоследних.Льгота = &Льгота";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|";
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА СотрудникиОрганизаций.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СотрудникиОрганизаций.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА 2
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|	КОНЕЦ КАК Приоритет,
	|	СотрудникиОрганизаций.Ссылка КАК Ссылка,
	|	СотрудникиОрганизаций.Физлицо
	|ПОМЕСТИТЬ ФизлицаСотрудников
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Актуальность
	|	И СотрудникиОрганизаций.Физлицо В
	|			(ВЫБРАТЬ
	|				Физлица.Физлицо
	|			ИЗ
	|				Физлица)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(ФизлицаСотрудников.Приоритет) КАК Приоритет,
	|	ФизлицаСотрудников.Физлицо
	|ПОМЕСТИТЬ МинимальныйПриоритет
	|ИЗ
	|	ФизлицаСотрудников КАК ФизлицаСотрудников
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизлицаСотрудников.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизлицаСотрудников.Физлицо КАК ФизЛицо,
	|	ФизлицаСотрудников.Ссылка КАК Сотрудник
	|ПОМЕСТИТЬ СотрудникиФизЛиц
	|ИЗ
	|	ФизлицаСотрудников КАК ФизлицаСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныйПриоритет КАК МинимальныйПриоритет
	|		ПО ФизлицаСотрудников.Приоритет = МинимальныйПриоритет.Приоритет
	|			И ФизлицаСотрудников.Физлицо = МинимальныйПриоритет.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиФизЛиц.Сотрудник,
	|	Физлица.Физлицо,
	|	Физлица.Льгота
	|ПОМЕСТИТЬ ФизлицаСотрудники
	|ИЗ
	|	Физлица КАК Физлица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СотрудникиФизЛиц КАК СотрудникиФизЛиц
	|		ПО Физлица.Физлицо = СотрудникиФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтработаноДнейВКомпании.Физлицо,
	|	СУММА(ОтработаноДнейВКомпании.ОтработаноДней) КАК ОтработаноДней
	|ПОМЕСТИТЬ ОтработаноДнейВКомпании
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Физлица.Физлицо КАК Физлицо,
	|		УправленческиеНачисления.ОтработаноДней КАК ОтработаноДней
	|	ИЗ
	|		ФизлицаСотрудники КАК Физлица
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.УправленческиеНачисления КАК УправленческиеНачисления
	|			ПО Физлица.Физлицо = УправленческиеНачисления.ФизЛицо
	|				И (УправленческиеНачисления.ПериодДействия = &Период)
	|				И ((НЕ УправленческиеНачисления.ПоВременнойСхемеМотивации))
	|	ГДЕ
	|		ЕСТЬNULL(УправленческиеНачисления.ОтработаноДней, 0) <> 0) КАК ОтработаноДнейВКомпании
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтработаноДнейВКомпании.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтработаноДнейВОрганизации.Физлицо,
	|	СУММА(ОтработаноДнейВОрганизации.ОтработаноДней) КАК ОтработаноДней
	|ПОМЕСТИТЬ ОтработаноДнейВОрганизации
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Физлица.Физлицо КАК Физлицо,
	|		ОсновныеНачисленияРаботниковОрганизаций.ОтработаноДней КАК ОтработаноДней
	|	ИЗ
	|		ФизлицаСотрудники КАК Физлица
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|			ПО Физлица.Физлицо = ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо
	|				И Физлица.Сотрудник = ОсновныеНачисленияРаботниковОрганизаций.Сотрудник
	|				И (ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия = &Период)
	|	ГДЕ
	|		ЕСТЬNULL(ОсновныеНачисленияРаботниковОрганизаций.ОтработаноДней, 0) <> 0) КАК ОтработаноДнейВОрганизации
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтработаноДнейВОрганизации.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизлицаСотрудники.Сотрудник,
	|	ФизлицаСотрудники.Физлицо КАК Физлицо,
	|	ФизлицаСотрудники.Льгота,
	|	ЕСТЬNULL(ОтработаноДнейВКомпании.ОтработаноДней, ОтработаноДнейВОрганизации.ОтработаноДней) КАК ОтработаноДней
	|ПОМЕСТИТЬ ОтработанноеВремя
	|ИЗ
	|	ФизлицаСотрудники КАК ФизлицаСотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтработаноДнейВКомпании КАК ОтработаноДнейВКомпании
	|		ПО ФизлицаСотрудники.Физлицо = ОтработаноДнейВКомпании.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтработаноДнейВОрганизации КАК ОтработаноДнейВОрганизации
	|		ПО ФизлицаСотрудники.Физлицо = ОтработаноДнейВОрганизации.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтработанноеВремя.Льгота,
	|	СУММА(ОтработанноеВремя.ОтработаноДней) КАК ОтработаноДней
	|ПОМЕСТИТЬ ОтработаноДнейВсего
	|ИЗ
	|	ОтработанноеВремя КАК ОтработанноеВремя
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтработанноеВремя.Льгота";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Льгота", Льгота);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОФОРМЛЕНИЕ ФОРМ УПРАВЛЕНИЯ ЛЬГОТАМИ

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
Процедура ДобавитьСтраницуЛьготы(Форма, ДополнительныеДействия, ДополнительныеОбработчики) Экспорт
	
	Если НЕ ВыполнятьВводСведенийОДействуюшихЛьготахЭтимДокументом(Форма.ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы	= Форма.ЭлементыФормы;
	Панель			= ЭлементыФормы.ОсновнаяПанель;
	Страницы 		= Панель.Страницы;
	
	ШиринаПанели = Панель.Ширина;
	ВысотаПанели = Панель.Высота;
	
	//добавление страницы
	НоваяСтраница = Страницы.Добавить("Льготы", "Льготы");
	
	//для добавления элементов на соответствующую страницу
	Панель.ТекущаяСтраница = НоваяСтраница;
	
	// Табличное поле
	ТабличноеПоле = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), "Льготы", Истина, Панель);
	ТабличноеПоле.Лево	= 6;
	ТабличноеПоле.Верх	= 24;
	ТабличноеПоле.Ширина	= ШиринаПанели - 14;
	ТабличноеПоле.Высота	= ВысотаПанели - 50;
	ТабличноеПоле.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
	ТабличноеПоле.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
	ТабличноеПоле.Данные = "Льготы";
	ТабличноеПоле.СоздатьКолонки();
	ТабличноеПоле.ТолькоПросмотр = Ложь;
	
	КолонкиТабличногоПоля = ТабличноеПоле.Колонки;
	КолонкиТабличногоПоля.Удалить(КолонкиТабличногоПоля["Физлицо"]);
	КолонкиТабличногоПоля["НомерСтроки"].ТекстШапки = "№";
	КолонкиТабличногоПоля["НомерСтроки"].ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
	
	КолонкаДействие = КолонкиТабличногоПоля.Найти("Действие");
	Если КолонкаДействие <> Неопределено Тогда
		КолонкаДействие.ЭлементУправления.КнопкаОчистки = Ложь;
		КолонкаДействие.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Для Каждого ДополнительныйОбработчик Из ДополнительныеОбработчики Цикл
		КолонкиТабличногоПоля["Сотрудник"].ЭлементУправления.УстановитьДействие(ДополнительныйОбработчик.Ключ, ДополнительныйОбработчик.Значение);
	КонецЦикла;
	
	// кнопка очистки
	КолонкиТабличногоПоля["Сотрудник"	].ЭлементУправления.КнопкаОчистки = Ложь;
	КолонкиТабличногоПоля["Льгота"		].ЭлементУправления.КнопкаОчистки = Ложь;
	
	// кнопка открытия
	КолонкиТабличногоПоля["Сотрудник"	].ЭлементУправления.КнопкаОткрытия = Истина;
	КолонкиТабличногоПоля["Льгота"		].ЭлементУправления.КнопкаОткрытия = Истина;
	
	// авто отметка незаполненного
	КолонкиТабличногоПоля["Сотрудник"	].АвтоОтметкаНезаполненного = Истина;
	КолонкиТабличногоПоля["Льгота"		].АвтоОтметкаНезаполненного = Истина;
	
	// Командная панель
	КоманднаяПанель = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), "КоманднаяПанельЛьготы", Истина, Панель);
	КоманднаяПанель.Лево	= 6;
	КоманднаяПанель.Верх	= 0;
	КоманднаяПанель.Ширина	= ШиринаПанели - 14;
	КоманднаяПанель.Высота	= 24;
	КоманднаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
	КоманднаяПанель.ИсточникДействий = ТабличноеПоле;
	
	// заполняем командную панель
	ДобавитьКнопкуВКомандуюПанель(КоманднаяПанель, "ЛьготыДобавитьСтроку", "Добавить", , ДополнительныеДействия, "Добавить (Ins)", БиблиотекаКартинок.ДобавитьЭлементСписка, ОтображениеКнопкиКоманднойПанели.НадписьКартинка);
	
	ДобавитьКнопкуВКомандуюПанель(КоманднаяПанель, "РазделительДобавить", , ТипКнопкиКоманднойПанели.Разделитель);
	ДобавитьКнопкуВКомандуюПанель(КоманднаяПанель, "ЛьготыСкопироватьСтроку", , , ДополнительныеДействия, "Добавить копированием (F9)", БиблиотекаКартинок.СкопироватьЭлементСписка);
	ДобавитьКнопкуВКомандуюПанель(КоманднаяПанель, "ЛьготыИзменитьСтроку", , , ДополнительныеДействия, "Изменить текущий элемент (F2)", БиблиотекаКартинок.ИзменитьЭлементСписка);
	ДобавитьКнопкуВКомандуюПанель(КоманднаяПанель, "ЛьготыУдалитьСтроку", , , ДополнительныеДействия, "Удалить текущий (Del)", БиблиотекаКартинок.УдалитьЭлементСписка);
	ДобавитьКнопкуВКомандуюПанель(КоманднаяПанель, "ЛьготыЗакончитьРедактированиеСтроки", , , ДополнительныеДействия, "Закончить редактирование (Shift+F2)", БиблиотекаКартинок.ЗакончитьРедактирование);
	
	ДобавитьКнопкуВКомандуюПанель(КоманднаяПанель, "ЛьготыПереместитьВверх", , , ДополнительныеДействия, "Переместить вверх (Ctrl+Shift+Up)", БиблиотекаКартинок.ПереместитьВверх);
	ДобавитьКнопкуВКомандуюПанель(КоманднаяПанель, "ЛьготыПереместитьВниз", , , ДополнительныеДействия, "Переместить вниз (Ctrl+Shift+Down)", БиблиотекаКартинок.ПереместитьВниз);
	
	ДобавитьКнопкуВКомандуюПанель(КоманднаяПанель, "ЛьготыУпорядочитьПоВозрастанию", , , ДополнительныеДействия, "Упорядочить по возрастанию", БиблиотекаКартинок.СортироватьСписокПоВозрастанию);
	ДобавитьКнопкуВКомандуюПанель(КоманднаяПанель, "ЛьготыУпорядочитьПоУбыванию", , , ДополнительныеДействия, "Упорядочить по убыванию", БиблиотекаКартинок.СортироватьСписокПоУбыванию);
	
	ДобавитьКнопкуВКомандуюПанель(КоманднаяПанель, "РазделительЗаполнить", , ТипКнопкиКоманднойПанели.Разделитель);
	ДобавитьКнопкуВКомандуюПанель(КоманднаяПанель, "ЛьготыПодменюЗаполнить", "Заполнить", ТипКнопкиКоманднойПанели.Подменю, , "Заполнить");
	ДобавитьКнопкуВКомандуюПанель(КоманднаяПанель.Кнопки["ЛьготыПодменюЗаполнить"], "ЛьготыЗаполнить", "Заполнить по данным пакета льгот", , ДополнительныеДействия, "Заполняет табличную часть на основании действующего пакета льгот");
	
	//вернем исходную текущую страницу
	Панель.ТекущаяСтраница = Панель.Страницы[0];
	
КонецПроцедуры

Процедура ДобавитьКнопкуВКомандуюПанель(КоманднаяПанель, ИмяКнопки, Текст = "", ТипКнопки = Неопределено, Действие = Неопределено, Подсказка = Неопределено, Картинка = Неопределено, Отображение = Неопределено)
	
	Если ТипКнопки = Неопределено Тогда
		ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
	КонецЕсли;
	
	Если ТипКнопки = ТипКнопкиКоманднойПанели.Разделитель Тогда
		Кнопка = КоманднаяПанель.Кнопки.Добавить(ИмяКнопки, ТипКнопки);
	Иначе
		Кнопка = КоманднаяПанель.Кнопки.Добавить(ИмяКнопки, ТипКнопки, Текст, Действие);
	КонецЕсли;
	
	Если Картинка <> Неопределено Тогда
		Кнопка.Картинка = Картинка;
	КонецЕсли;
	
	Если Отображение <> Неопределено Тогда
		Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	КонецЕсли;
	
	Если Подсказка <> Неопределено Тогда
		Кнопка.Подсказка = Подсказка;
		Кнопка.Пояснение = Подсказка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКомандыДействияСЛьготами(Форма, Кнопка, ИмяТЧРаботники, ПолеДолжность, ПолеДатаДействия, ТолькоИзменяемые = Ложь) Экспорт
	
	Если Кнопка.Имя = "ЛьготыДобавитьСтроку" Тогда
		Форма.ЭлементыФормы.Льготы.ДобавитьСтроку();
	ИначеЕсли Кнопка.Имя = "ЛьготыСкопироватьСтроку" Тогда
		ТабличноеПолеЛьготы = Форма.ЭлементыФормы.Льготы;
		Если ТабличноеПолеЛьготы.ТекущаяСтрока <> Неопределено Тогда
			ТабличноеПолеЛьготы.СкопироватьСтроку();
		КонецЕсли;
	ИначеЕсли Кнопка.Имя = "ЛьготыИзменитьСтроку" Тогда
		ТабличноеПолеЛьготы = Форма.ЭлементыФормы.Льготы;
		Если ТабличноеПолеЛьготы.ТекущаяСтрока <> Неопределено Тогда
			ТабличноеПолеЛьготы.ИзменитьСтроку();
		КонецЕсли;
	ИначеЕсли Кнопка.Имя = "ЛьготыЗакончитьРедактированиеСтроки" Тогда
		Форма.ЭлементыФормы.Льготы.ЗакончитьРедактированиеСтроки(Ложь);
	ИначеЕсли Кнопка.Имя = "ЛьготыУдалитьСтроку" Тогда
		ТабличноеПолеЛьготы = Форма.ЭлементыФормы.Льготы;
		Если ТабличноеПолеЛьготы.ТекущиеДанные <> Неопределено Тогда
			Форма.Льготы.Удалить(ТабличноеПолеЛьготы.ТекущиеДанные);
		КонецЕсли;
	ИначеЕсли Кнопка.Имя = "ЛьготыПереместитьВверх" Тогда
		СтрокаТабличнойЧасти = Форма.ЭлементыФормы.Льготы.ТекущиеДанные;
		ТабличнаяЧасть = Форма.Льготы;
		Если СтрокаТабличнойЧасти <> Неопределено И ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти) > 0 Тогда
			Форма.Льготы.Сдвинуть(СтрокаТабличнойЧасти, -1);
		КонецЕсли;
	ИначеЕсли Кнопка.Имя = "ЛьготыПереместитьВниз" Тогда
		СтрокаТабличнойЧасти = Форма.ЭлементыФормы.Льготы.ТекущиеДанные;
		ТабличнаяЧасть = Форма.Льготы;
		Если СтрокаТабличнойЧасти <> Неопределено И ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти) + 1 < ТабличнаяЧасть.Количество() Тогда
			ТабличнаяЧасть.Сдвинуть(СтрокаТабличнойЧасти, 1);
		КонецЕсли;
	ИначеЕсли Кнопка.Имя = "ЛьготыУпорядочитьПоВозрастанию" Тогда
		ТекущаяКолонка = Форма.ЭлементыФормы.Льготы.ТекущаяКолонка;
		Если ТекущаяКолонка <> Неопределено И ТекущаяКолонка.Имя <> "НомерСтроки" Тогда
			Форма.Льготы.Сортировать(ТекущаяКолонка.Имя);
		КонецЕсли;
	ИначеЕсли Кнопка.Имя = "ЛьготыУпорядочитьПоУбыванию" Тогда
		ТекущаяКолонка = Форма.ЭлементыФормы.Льготы.ТекущаяКолонка;
		Если ТекущаяКолонка <> Неопределено И ТекущаяКолонка.Имя <> "НомерСтроки" Тогда
			Форма.Льготы.Сортировать(ТекущаяКолонка.Имя + " Убыв");
		КонецЕсли;
	ИначеЕсли Кнопка.Имя = "ЛьготыЗаполнить" Тогда
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(Форма.ЭтотОбъект, Форма, "заполнить") Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЛьготы(Форма.ЭтотОбъект, ИмяТЧРаботники, ПолеДолжность, ПолеДатаДействия, ТолькоИзменяемые);
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

Процедура ЗаполнитьЛьготы(ДокументОбъект, ИмяТЧРаботники, ПолеДолжность, ПолеДатаДействия, ТолькоИзменяемые = Ложь) Экспорт
	
	Если НЕ ВыполнятьВводСведенийОДействуюшихЛьготахЭтимДокументом(ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.Льготы.Очистить();
	ДокументОбъект.Льготы.Загрузить(ПолучитьТаблицуДействийСЛьготами(ДокументОбъект[ИмяТЧРаботники].Выгрузить(), ДокументОбъект.Ссылка, ДокументОбъект.Дата, ПолеДолжность, ПолеДатаДействия, ТолькоИзменяемые));
	
КонецПроцедуры

Процедура ДобавитьЛьготыПоСтроке(ДокументОбъект, СтрокаТабличнойЧасти, ИмяТЧРаботники, ПолеДолжность, ПолеДатаДействия, ТолькоИзменяемые = Ложь) Экспорт
	
	Если НЕ ВыполнятьВводСведенийОДействуюшихЛьготахЭтимДокументом(ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ТЧЛьготы = ДокументОбъект.Льготы;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрокаТабличнойЧасти);
	
	ДействияСЛьготами = ПолучитьТаблицуДействийСЛьготами(ДокументОбъект[ИмяТЧРаботники].Выгрузить(МассивСтрок), ДокументОбъект.Ссылка, ДокументОбъект.Дата, ПолеДолжность, ПолеДатаДействия, ТолькоИзменяемые);

	СтруктураПоиска = Новый Структура("Физлицо, Льгота");
	
	Для Каждого СтрокаТаблицы Из ДействияСЛьготами Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		МассивЛьгот = ТЧЛьготы.НайтиСтроки(СтруктураПоиска);
		
		Если МассивЛьгот.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(ТЧЛьготы.Добавить(), СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЛьготыПоСтроке(Форма, Сотрудник, ИмяТЧРаботники) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Физлицо", ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(Сотрудник, "Физлицо"));
	
	Если Форма[ИмяТЧРаботники].НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЛьготы = Форма.Льготы;
	Строки = ТаблицаЛьготы.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаТабличнойЧасти из Строки Цикл
		ТаблицаЛьготы.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТаблицуДействийСЛьготами(ДанныеДокумента, ДокументСсылка, ДатаДокумента, ПолеДолжность, ПолеДатаДействия, ТолькоИзменяемые = Ложь)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник КАК Сотрудник,
	|	ДанныеДокумента." + ПолеДолжность + " КАК Должность,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента." + ПолеДатаДействия + " <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеДокумента." + ПолеДатаДействия + "
	|		ИНАЧЕ &ДатаДокумента
	|	КОНЕЦ КАК ДатаДействия
	|ПОМЕСТИТЬ ПервичныеДанныеДокумента
	|ИЗ
	|	&ДанныеДокумента КАК ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник,
	|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
	|	ДанныеДокумента.Должность,
	|	ДолжностиОрганизаций.Грейд КАК Грейд,
	|	ДанныеДокумента.ДатаДействия
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	ПервичныеДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО ДанныеДокумента.Сотрудник = СотрудникиОрганизаций.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
	|		ПО ДанныеДокумента.Должность = ДолжностиОрганизаций.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЛьготыРаботников.Период) КАК Период,
	|	ЛьготыРаботников.Физлицо,
	|	ЛьготыРаботников.Льгота,
	|	ДанныеДокумента.ДатаДействия
	|ПОМЕСТИТЬ ПериодыДействияЛьгот
	|ИЗ
	|	РегистрСведений.ЛьготыРаботников КАК ЛьготыРаботников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокумента КАК ДанныеДокумента
	|		ПО ЛьготыРаботников.Физлицо = ДанныеДокумента.Физлицо
	|			И ЛьготыРаботников.Период <= ДанныеДокумента.ДатаДействия
	|			И (ЛьготыРаботников.Регистратор <> &Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛьготыРаботников.Физлицо,
	|	ЛьготыРаботников.Льгота,
	|	ДанныеДокумента.ДатаДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛьготыРаботников.Физлицо,
	|	ЛьготыРаботников.Льгота
	|ПОМЕСТИТЬ ДействующиеЛьготы
	|ИЗ
	|	РегистрСведений.ЛьготыРаботников КАК ЛьготыРаботников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыДействияЛьгот КАК ПериодыДействияЛьгот
	|		ПО ЛьготыРаботников.Физлицо = ПериодыДействияЛьгот.Физлицо
	|			И ЛьготыРаботников.Льгота = ПериодыДействияЛьгот.Льгота
	|			И ЛьготыРаботников.Период = ПериодыДействияЛьгот.Период
	|			И (ЛьготыРаботников.Регистратор <> &Регистратор)
	|			И (ВЫБОР
	|				КОГДА ЛьготыРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						И ЛьготыРаботников.ПериодЗавершения <= НАЧАЛОПЕРИОДА(ПериодыДействияЛьгот.ДатаДействия, МЕСЯЦ)
	|					ТОГДА ЛьготыРаботников.ДействуетПоЗавершении
	|				ИНАЧЕ ЛьготыРаботников.Действует
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Константы.ИспользоватьГрейды
	|ПОМЕСТИТЬ Грейды
	|ИЗ
	|	Константы КАК Константы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Физлицо,
	|	ЛьготыДолжности.Ссылка КАК Льгота,
	|	ЛьготыДолжности.Ссылка.ПредоставляетсяПоВыборуСотрудника КАК ПредоставляетсяПоВыборуСотрудника
	|ПОМЕСТИТЬ ПакетыЛьгот
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Льготы.Должности КАК ЛьготыДолжности
	|		ПО ДанныеДокумента.Должность = ЛьготыДолжности.Должность,
	|	Грейды КАК Грейды
	|ГДЕ
	|	(НЕ Грейды.ИспользоватьГрейды)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Физлицо,
	|	ЛьготыГрейда.Ссылка,
	|	ЛьготыГрейда.Ссылка.ПредоставляетсяПоВыборуСотрудника
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Льготы.Грейды КАК ЛьготыГрейда
	|		ПО ДанныеДокумента.Грейд = ЛьготыГрейда.Грейд,
	|	Грейды КАК Грейды
	|ГДЕ
	|	Грейды.ИспользоватьГрейды
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Физлицо,
	|	Льготы.Ссылка,
	|	Льготы.ПредоставляетсяПоВыборуСотрудника
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Льготы КАК Льготы
	|		ПО (Льготы.СпособПрименения = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьгот.ДляВсех))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеЛьготы.Физлицо,
	|	ДействующиеЛьготы.Льгота,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействияСЛьготой.Прекратить) КАК Действие
	|ПОМЕСТИТЬ ДействияСЛьготами
	|ИЗ
	|	ДействующиеЛьготы КАК ДействующиеЛьготы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПакетыЛьгот КАК ПакетыЛьгот
	|		ПО ДействующиеЛьготы.Физлицо = ПакетыЛьгот.Физлицо
	|			И ДействующиеЛьготы.Льгота = ПакетыЛьгот.Льгота
	|ГДЕ
	|	ПакетыЛьгот.Льгота ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПакетыЛьгот.Физлицо,
	|	ПакетыЛьгот.Льгота,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействияСЛьготой.Назначить)
	|ИЗ
	|	ПакетыЛьгот КАК ПакетыЛьгот
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДействующиеЛьготы КАК ДействующиеЛьготы
	|		ПО (ДействующиеЛьготы.Физлицо = ПакетыЛьгот.Физлицо)
	|			И (ДействующиеЛьготы.Льгота = ПакетыЛьгот.Льгота)
	|			
	|ГДЕ
	|	ДействующиеЛьготы.Льгота ЕСТЬ NULL 
	|	И (НЕ ПакетыЛьгот.ПредоставляетсяПоВыборуСотрудника)
	|	
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДействующиеЛьготы.Физлицо,
	|	ДействующиеЛьготы.Льгота,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействияСЛьготой.НеИзменять)
	|ИЗ
	|	ДействующиеЛьготы КАК ДействующиеЛьготы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПакетыЛьгот КАК ПакетыЛьгот
	|		ПО ДействующиеЛьготы.Физлицо = ПакетыЛьгот.Физлицо
	|			И ДействующиеЛьготы.Льгота = ПакетыЛьгот.Льгота
	|			И ((НЕ ПакетыЛьгот.ПредоставляетсяПоВыборуСотрудника))
	|			И (НЕ &ТолькоИзменяемые)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник,
	|	ДействияСЛьготами.Физлицо,
	|	ДействияСЛьготами.Льгота,
	|	ДействияСЛьготами.Действие
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДействияСЛьготами КАК ДействияСЛьготами
	|		ПО ДанныеДокумента.Физлицо = ДействияСЛьготами.Физлицо";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("ДанныеДокумента", ДанныеДокумента);
	Запрос.УстановитьПараметр("ТолькоИзменяемые", ТолькоИзменяемые);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СформироватьЗапросДляДвиженийПоЛьготам(ВременныеТаблицыДанныхДокумента)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЛьготыРаботников.Период КАК Период,
	|	ЛьготыРаботников.Регистратор,
	|	ЛьготыРаботников.НомерСтроки,
	|	ЛьготыРаботников.Активность,
	|	ЛьготыРаботников.Физлицо КАК Физлицо,
	|	ЛьготыРаботников.Льгота КАК Льгота,
	|	ЛьготыРаботников.Действует,
	|	ЛьготыРаботников.ПериодЗавершения,
	|	ЛьготыРаботников.ДействуетПоЗавершении
	|ПОМЕСТИТЬ ЛьготыРаботников
	|ИЗ
	|	РегистрСведений.ЛьготыРаботников КАК ЛьготыРаботников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРаботники КАК ДанныеДокументаРаботники
	|		ПО ЛьготыРаботников.Физлицо = ДанныеДокументаРаботники.ФизЛицо
	|			И ЛьготыРаботников.Регистратор <> ДанныеДокументаРаботники.Ссылка
	|			И ЛьготыРаботников.Период <= ДанныеДокументаРаботники.ДатаПриема
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Льгота,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументаЛьготы.Сотрудник,
	|	ДанныеДокументаЛьготы.Физлицо,
	|	ДанныеДокументаЛьготы.Льгота КАК Льгота,
	|	СУММА(1) КАК Количество,
	|	ДанныеДокументаЛьготы.Действие
	|ПОМЕСТИТЬ КоличествоОдинаковыхЛьгот
	|ИЗ
	|	ДанныеДокументаЛьготы КАК ДанныеДокументаЛьготы
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументаЛьготы.Сотрудник,
	|	ДанныеДокументаЛьготы.Физлицо,
	|	ДанныеДокументаЛьготы.Льгота,
	|	ДанныеДокументаЛьготы.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДанныеДокументаЛьготы.НомерСтроки) КАК НомерСтроки,
	|	ДанныеДокументаЛьготы.Сотрудник,
	|	ДанныеДокументаЛьготы.Физлицо,
	|	ДанныеДокументаЛьготы.Льгота
	|ПОМЕСТИТЬ СведенияОДубляхСтрок
	|ИЗ
	|	ДанныеДокументаЛьготы КАК ДанныеДокументаЛьготы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоличествоОдинаковыхЛьгот КАК КоличествоОдинаковыхЛьгот
	|		ПО ДанныеДокументаЛьготы.Сотрудник = КоличествоОдинаковыхЛьгот.Сотрудник
	|			И ДанныеДокументаЛьготы.Физлицо = КоличествоОдинаковыхЛьгот.Физлицо
	|			И ДанныеДокументаЛьготы.Льгота = КоличествоОдинаковыхЛьгот.Льгота
	|			И (КоличествоОдинаковыхЛьгот.Количество > 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументаЛьготы.Сотрудник,
	|	ДанныеДокументаЛьготы.Физлицо,
	|	ДанныеДокументаЛьготы.Льгота
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументаРаботники.Сотрудник,
	|	ДанныеДокументаРаботники.ФизЛицо,
	|	ДанныеДокументаРаботники.ДатаПриема,
	|	МАКСИМУМ(ЛьготыРаботников.Период) КАК Период,
	|	ЛьготыРаботников.Льгота
	|ПОМЕСТИТЬ ПериодыЛьгот
	|ИЗ
	|	ДанныеДокументаРаботники КАК ДанныеДокументаРаботники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЛьготыРаботников КАК ЛьготыРаботников
	|		ПО ДанныеДокументаРаботники.ФизЛицо = ЛьготыРаботников.Физлицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументаРаботники.Сотрудник,
	|	ДанныеДокументаРаботники.ФизЛицо,
	|	ДанныеДокументаРаботники.ДатаПриема,
	|	ЛьготыРаботников.Льгота
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыЛьгот.Сотрудник,
	|	ПериодыЛьгот.ФизЛицо,
	|	ПериодыЛьгот.ДатаПриема,
	|	ПериодыЛьгот.Период,
	|	ПериодыЛьгот.Льгота
	|ПОМЕСТИТЬ ДействующиеЛьготы
	|ИЗ
	|	ПериодыЛьгот КАК ПериодыЛьгот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЛьготыРаботников КАК ЛьготыРаботников
	|		ПО ПериодыЛьгот.ФизЛицо = ЛьготыРаботников.Физлицо
	|			И ПериодыЛьгот.Период = ЛьготыРаботников.Период
	|			И ПериодыЛьгот.Льгота = ЛьготыРаботников.Льгота
	|			И (ВЫБОР
	|				КОГДА ЛьготыРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						И ЛьготыРаботников.ПериодЗавершения <= НАЧАЛОПЕРИОДА(ПериодыЛьгот.ДатаПриема, МЕСЯЦ)
	|					ТОГДА ЛьготыРаботников.ДействуетПоЗавершении
	|				ИНАЧЕ ЛьготыРаботников.Действует
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументаЛьготы.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ДанныеДокументаЛьготы.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСЛьготой.Назначить)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеДокументаРаботники.ДатаПриема, МЕСЯЦ)
	|		КОГДА ДанныеДокументаЛьготы.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСЛьготой.Прекратить)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеДокументаРаботники.ДатаПриема, МЕСЯЦ), МЕСЯЦ, 1)
	|	КОНЕЦ КАК Период,
	|	ДанныеДокументаЛьготы.Физлицо,
	|	ДанныеДокументаЛьготы.Льгота,
	|	ВЫБОР
	|		КОГДА ДанныеДокументаЛьготы.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСЛьготой.Назначить)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Действует,
	|	ВЫБОР
	|		КОГДА ДанныеДокументаРаботники.ДатаПриема ЕСТЬ NULL 
	|			ТОГДА ""указан сотрудник, которого нет списке сотрудников""
	|		КОГДА СведенияОДубляхСтрок.Сотрудник ЕСТЬ НЕ NULL 
	|			ТОГДА ""указана льгота, которая введена повторно для этого сотрудника""
	|		КОГДА ДействующиеЛьготы.Льгота ЕСТЬ НЕ NULL 
	|				И ДанныеДокументаЛьготы.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСЛьготой.Назначить)
	|			ТОГДА ""указана льгота, которая уже действует для этого сотрудника""
	|		КОГДА ДействующиеЛьготы.Льгота ЕСТЬ NULL 
	|				И ДанныеДокументаЛьготы.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСЛьготой.Прекратить)
	|			ТОГДА ""указано действие Прекратить для льготы, которая не действует для этого сотрудника""
	|		КОГДА ДанныеДокументаЛьготы.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|			ТОГДА ""не выбран сотрудник""
	|		КОГДА ДанныеДокументаЛьготы.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСЛьготой.ПустаяСсылка)
	|			ТОГДА ""не заполнено действие с льготой""
	|		КОГДА ДанныеДокументаЛьготы.Льгота = ЗНАЧЕНИЕ(Справочник.Льготы.ПустаяСсылка)
	|			ТОГДА ""не выбрана льгота""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СтрокаСОшибкой,
	|	ВЫБОР
	|		КОГДА ДанныеДокументаРаботники.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеДокументаЛьготы.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСЛьготой.Назначить)
	|						ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеДокументаРаботники.ДатаУвольнения, МЕСЯЦ), МЕСЯЦ, 1)
	|					КОГДА ДанныеДокументаЛьготы.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСЛьготой.Прекратить)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДанныеДокументаРаботники.ДатаУвольнения, МЕСЯЦ)
	|				КОНЕЦ
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ПериодЗавершения,
	|	ВЫБОР
	|		КОГДА ДанныеДокументаЛьготы.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСЛьготой.Назначить)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ДействуетПоЗавершении
	|ПОМЕСТИТЬ ДействияСЛьготами
	|ИЗ
	|	ДанныеДокументаЛьготы КАК ДанныеДокументаЛьготы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументаРаботники КАК ДанныеДокументаРаботники
	|		ПО ДанныеДокументаЛьготы.Сотрудник = ДанныеДокументаРаботники.Сотрудник
	|			И ДанныеДокументаЛьготы.Ссылка = ДанныеДокументаРаботники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОДубляхСтрок КАК СведенияОДубляхСтрок
	|		ПО ДанныеДокументаЛьготы.НомерСтроки = СведенияОДубляхСтрок.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДействующиеЛьготы КАК ДействующиеЛьготы
	|		ПО ДанныеДокументаЛьготы.Физлицо = ДействующиеЛьготы.ФизЛицо
	|			И ДанныеДокументаЛьготы.Льгота = ДействующиеЛьготы.Льгота
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействияСЛьготами.НомерСтроки КАК НомерСтроки,
	|	ДействияСЛьготами.Период,
	|	ДействияСЛьготами.Физлицо,
	|	ДействияСЛьготами.Льгота,
	|	ДействияСЛьготами.Действует,
	|	ДействияСЛьготами.СтрокаСОшибкой,
	|	ДействияСЛьготами.ПериодЗавершения,
	|	ДействияСЛьготами.ДействуетПоЗавершении
	|ИЗ
	|	ДействияСЛьготами КАК ДействияСЛьготами
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ДействияСЛьготами.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ДействияСЛьготами.Период < ДействияСЛьготами.ПериодЗавершения
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СформироватьЗапросПоДействующимЛьготам(ВременныеТаблицыДанныхДокумента) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЛьготыРаботников.Период КАК Период,
	|	ЛьготыРаботников.Регистратор,
	|	ЛьготыРаботников.НомерСтроки,
	|	ЛьготыРаботников.Активность,
	|	ЛьготыРаботников.Физлицо КАК Физлицо,
	|	ЛьготыРаботников.Льгота КАК Льгота,
	|	ЛьготыРаботников.Действует,
	|	ЛьготыРаботников.ПериодЗавершения,
	|	ЛьготыРаботников.ДействуетПоЗавершении
	|ПОМЕСТИТЬ ЛьготыРаботников
	|ИЗ
	|	РегистрСведений.ЛьготыРаботников КАК ЛьготыРаботников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРаботники КАК ДанныеДокументаРаботники
	|		ПО ЛьготыРаботников.Физлицо = ДанныеДокументаРаботники.ФизЛицо
	|			И ЛьготыРаботников.Регистратор <> ДанныеДокументаРаботники.Ссылка
	|			И (ЛьготыРаботников.Период <= ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДанныеДокументаРаботники.ДатаУвольнения, МЕСЯЦ), МЕСЯЦ, 1))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Льгота,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументаРаботники.ФизЛицо,
	|	ДанныеДокументаРаботники.ДатаУвольнения,
	|	МАКСИМУМ(ЛьготыРаботников.Период) КАК Период,
	|	ЛьготыРаботников.Льгота
	|ПОМЕСТИТЬ ПериодыЛьгот
	|ИЗ
	|	ДанныеДокументаРаботники КАК ДанныеДокументаРаботники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЛьготыРаботников КАК ЛьготыРаботников
	|		ПО ДанныеДокументаРаботники.ФизЛицо = ЛьготыРаботников.Физлицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументаРаботники.ФизЛицо,
	|	ДанныеДокументаРаботники.ДатаУвольнения,
	|	ЛьготыРаботников.Льгота
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыЛьгот.ФизЛицо,
	|	ПериодыЛьгот.ДатаУвольнения,
	|	ПериодыЛьгот.Период,
	|	ПериодыЛьгот.Льгота
	|ПОМЕСТИТЬ ДействующиеЛьготы
	|ИЗ
	|	ПериодыЛьгот КАК ПериодыЛьгот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЛьготыРаботников КАК ЛьготыРаботников
	|		ПО ПериодыЛьгот.ФизЛицо = ЛьготыРаботников.Физлицо
	|			И ПериодыЛьгот.Период = ЛьготыРаботников.Период
	|			И ПериодыЛьгот.Льгота = ЛьготыРаботников.Льгота
	|			И (ВЫБОР
	|				КОГДА ЛьготыРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						И ЛьготыРаботников.ПериодЗавершения <= НАЧАЛОПЕРИОДА(ПериодыЛьгот.ДатаУвольнения, МЕСЯЦ)
	|					ТОГДА ЛьготыРаботников.ДействуетПоЗавершении
	|				ИНАЧЕ ЛьготыРаботников.Действует
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументаРаботники.НомерСтроки КАК НомерСтроки,
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеДокументаРаботники.ДатаУвольнения, МЕСЯЦ), МЕСЯЦ, 1) КАК Период,
	|	ДанныеДокументаРаботники.ФизЛицо,
	|	ДействующиеЛьготы.Льгота,
	|	ЛОЖЬ КАК Действует
	|ИЗ
	|	ДанныеДокументаРаботники КАК ДанныеДокументаРаботники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДействующиеЛьготы КАК ДействующиеЛьготы
	|		ПО ДанныеДокументаРаботники.ФизЛицо = ДействующиеЛьготы.ФизЛицо";
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ВыполнятьВводСведенийОДействуюшихЛьготахЭтимДокументом(ДокументОбъект)
	
	// прежде всего проверим доступность ролей
	Если НЕ РольДоступна("ДобавлениеИзменениеСведенийОДействующихЛьготах") и НЕ РольДоступна("ПолныеПрава") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// составим коллекцию метаданных документов и режимов ввода льгот им соответствующих
	РежимыВводаЛьготДокументами = Новый Соответствие;
	МетаданныеДокументов = Метаданные.Документы;
	РежимыВводаЛьготДокументами.Вставить(МетаданныеДокументов.КадровоеПеремещение, Перечисления.СпособыВводаСведенийОДействующихЛьготах.КадровымиДокументамиУправленческогоУчета);
	РежимыВводаЛьготДокументами.Вставить(МетаданныеДокументов.ПриемНаРаботу, Перечисления.СпособыВводаСведенийОДействующихЛьготах.КадровымиДокументамиУправленческогоУчета);
	РежимыВводаЛьготДокументами.Вставить(МетаданныеДокументов.Увольнение, Перечисления.СпособыВводаСведенийОДействующихЛьготах.КадровымиДокументамиУправленческогоУчета);
	РежимыВводаЛьготДокументами.Вставить(МетаданныеДокументов.КадровоеПеремещениеОрганизаций, Перечисления.СпособыВводаСведенийОДействующихЛьготах.КадровымиДокументамиРегламентированногоУчета);
	РежимыВводаЛьготДокументами.Вставить(МетаданныеДокументов.ПриемНаРаботуВОрганизацию, Перечисления.СпособыВводаСведенийОДействующихЛьготах.КадровымиДокументамиРегламентированногоУчета);
	РежимыВводаЛьготДокументами.Вставить(МетаданныеДокументов.УвольнениеИзОрганизаций, Перечисления.СпособыВводаСведенийОДействующихЛьготах.КадровымиДокументамиРегламентированногоУчета);
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ПроверятьТабличнуюЧасть = Новый Массив;
	ПроверятьТабличнуюЧасть.Добавить(МетаданныеДокументов.КадровоеПеремещение);
	ПроверятьТабличнуюЧасть.Добавить(МетаданныеДокументов.ПриемНаРаботу);
	ПроверятьТабличнуюЧасть.Добавить(МетаданныеДокументов.КадровоеПеремещениеОрганизаций);
	ПроверятьТабличнуюЧасть.Добавить(МетаданныеДокументов.ПриемНаРаботуВОрганизацию);
	
	// если табличная часть заполнена оставим ее включенной независимо от положения константы
	Если ПроверятьТабличнуюЧасть.Найти(МетаданныеДокумента) <> Неопределено Тогда
		ЗаполненыЛьготы = ДокументОбъект.Льготы.Количество() > 0;
	Иначе
		ЗаполненыЛьготы = Ложь;
	КонецЕсли;
	
	// если табличная часть пуста, то принимать решение нужно на основе действующего способа управления льготами
	ВидДокументаСоответствуетРежимуВвода = глЗначениеПеременной("глСпособВводаСведенийОДействующихЛьготах") = РежимыВводаЛьготДокументами[МетаданныеДокумента];
	
	Возврат ЗаполненыЛьготы Или ВидДокументаСоответствуетРежимуВвода;
    	
КонецФункции

// Процедура формирует движения документа по регистру ЛьготыРаботников
//
Процедура ДобавитьДвиженияПоДействующимЛьготам(Движения, Отказ, МенеджерВременныхТаблиц, Заголовок, ТолькоНазначениеЛьгот = Ложь) Экспорт
	
	ЛьготыРаботников = Движения.ЛьготыРаботников;
	
	Выборка = СформироватьЗапросДляДвиженийПоЛьготам(МенеджерВременныхТаблиц).Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Действует И ТолькоНазначениеЛьгот Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.СтрокаСОшибкой) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Выборка.НомерСтроки) +
			""" табл. части ""Льготы"": ";
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + Выборка.СтрокаСОшибкой, Отказ, Заголовок);
		КонецЕсли;
		Если Не Отказ Тогда
			Движение = ЛьготыРаботников.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Выборка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры, функции

// Процедура заполняет вычисляемые колонки формы списка справочника СотрудникиОрганизаций
//
// Параметры
//  ТабличноеПоле   – Табличное поле
//  ОформленияСтрок – Коллекция значений типа ОформлениеСтроки табличного поля ТЧДокумента
//  ДатаСреза	 	- тип дата, дата на которую получаем данные работников организации
//
Процедура ЗаполнитьДанныеПоРаботникамОрганизации(ТабличноеПоле, ОформленияСтрок, ИспользоватьКешПриПолученииДанных, КешПриПолученииДанных)Экспорт

	КолонкиТабличногоПоля = ТабличноеПоле.Колонки;
	
	ПоказыватьАванс			= КолонкиТабличногоПоля.Аванс.Видимость;
	ПоказыватьЛицевыеСчета	= КолонкиТабличногоПоля.НомерЛицевогоСчета.Видимость ИЛИ КолонкиТабличногоПоля.Банк.Видимость;
	
	Если Не (ПоказыватьАванс ИЛИ ПоказыватьЛицевыеСчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КешПриПолученииДанных.Свойство("ДанныеСотрудников") Тогда
		ДанныеСотрудников = Неопределено;
	Иначе
		ДанныеСотрудников = КешПриПолученииДанных.ДанныеСотрудников;
	КонецЕсли;
	
	МассивСотрудников = Новый Массив;
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Если ИспользоватьКешПриПолученииДанных И ДанныеСотрудников <> Неопределено Тогда
			Если ДанныеСотрудников.Найти(ОформлениеСтроки.ДанныеСтроки.Ссылка, "Сотрудник") = Неопределено Тогда
				МассивСотрудников.Добавить(ОформлениеСтроки.ДанныеСтроки.Ссылка);
			КонецЕсли;
			
		Иначе
			МассивСотрудников.Добавить(ОформлениеСтроки.ДанныеСтроки.Ссылка);
			
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСотрудников.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ";
		
		Если ПоказыватьАванс Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ЕСТЬNULL(АвансыРаботникамОрганизаций.СуммаАванса, 0) КАК СуммаАванса,";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|	0 КАК СуммаАванса,";
		КонецЕсли;
		
		Если ПоказыватьЛицевыеСчета Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ЕСТЬNULL(ЛицевыеСчетаРаботниковОрганизации.НомерЛицевогоСчета, """") КАК НомерЛицевогоСчета,
			|	ЕСТЬNULL(ЛицевыеСчетаРаботниковОрганизации.Банк, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Банк,";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|	"""" КАК НомерЛицевогоСчета,
			|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Банк,";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	Сотрудники.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК Сотрудники";
		
		Если ПоказыватьАванс Тогда
			Запрос.Текст = Запрос.Текст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АвансыРаботникамОрганизаций КАК АвансыРаботникамОрганизаций
			|		ПО Сотрудники.Физлицо = АвансыРаботникамОрганизаций.Физлицо
			|			И Сотрудники.ТекущееОбособленноеПодразделение = АвансыРаботникамОрганизаций.Организация";
		КонецЕсли;
		
		Если ПоказыватьЛицевыеСчета Тогда
			Запрос.Текст = Запрос.Текст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛицевыеСчетаРаботниковОрганизации КАК ЛицевыеСчетаРаботниковОрганизации
			|		ПО Сотрудники.Физлицо = ЛицевыеСчетаРаботниковОрганизации.Физлицо
			|			И Сотрудники.ТекущееОбособленноеПодразделение = ЛицевыеСчетаРаботниковОрганизации.Организация";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСотрудников)";
		
		Таблица = Запрос.Выполнить().Выгрузить();
		Если ДанныеСотрудников = Неопределено Тогда
			ДанныеСотрудников = Новый ТаблицаЗначений;
			ДанныеСотрудников.Колонки.Добавить("Сотрудник");
			ДанныеСотрудников.Колонки.Добавить("СуммаАванса");
			ДанныеСотрудников.Колонки.Добавить("НомерЛицевогоСчета");
			ДанныеСотрудников.Колонки.Добавить("Банк");
			
			ДанныеСотрудников.Индексы.Добавить("Сотрудник");
		КонецЕсли;
			
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			Строка = ДанныеСотрудников.Найти(СтрокаТаблицы.Сотрудник, "Сотрудник");
			Если Строка = Неопределено Тогда
				Строка = ДанныеСотрудников.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Строка, СтрокаТаблицы);
		КонецЦикла;
		
		КешПриПолученииДанных.Вставить("ДанныеСотрудников",	ДанныеСотрудников);
	КонецЕсли;
	
	Авансы = КешПриПолученииДанных.Авансы;
	Для Каждого СтрокаТабличногоПоля Из ОформленияСтрок Цикл
		
		ДанныеСтроки = СтрокаТабличногоПоля.ДанныеСтроки;
		Если ДанныеСтроки.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ДанныеСотрудников.Найти(ДанныеСтроки.Ссылка, "Сотрудник");
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПоказыватьАванс Тогда
			СтрокаТабличногоПоля.Ячейки.Аванс.УстановитьТекст(Формат(СтрокаТаблицы.СуммаАванса, "ЧЦ=15; ЧДЦ=2"));
			Авансы.Вставить(ДанныеСтроки.Ссылка, СтрокаТаблицы.СуммаАванса);
		КонецЕсли;
		
		Если ПоказыватьЛицевыеСчета Тогда
			СтрокаТабличногоПоля.Ячейки.НомерЛицевогоСчета.УстановитьТекст(СтрокаТаблицы.НомерЛицевогоСчета);
			СтрокаТабличногоПоля.Ячейки.Банк.УстановитьТекст(СтрокаТаблицы.Банк);
		КонецЕсли;
		
	КонецЦикла;
	КешПриПолученииДанных.Вставить("Авансы", Авансы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры, функции объекта

Функция СформироватьТекстНадписи() Экспорт
	
	Возврат "Персональные надбавки ... " + Символы.ПС;
	
КонецФункции

Функция ОчищатьВидЗанятости(ЭтаФорма) Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ДополнитьВидыДоговоровДляУсловия(ВидыДоговоров) Экспорт
	
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	
КонецПроцедуры

// Определяет имеет ли смысл спрашивать у пользователя обособленное подразделение,
//	гдебудет работать сотрудник
//
// Параметры
//	нет
//
// Возвращаемое значение:
//   булево
//
Функция ПоказыватьОбособленноеПодразделение(ЭтаФорма) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ЭтаФорма.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.ЮрФизЛицо
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий() // организация должна быть выбрана
		И Выборка.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо // это не должно быть физлицо
		И ЭтаФорма.мСписокОбособленныхПодразделений.Количество() > 1; // у нашей орг есть обособленные подразделения

КонецФункции // ПоказыватьОбособленноеПодразделение()

Процедура ОчиститьНеИспользуемыеРеквизитыДополнительно(ЭтаФорма) Экспорт
	
	Если ЭтаФорма.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
		ЭтаФорма.Организация = Справочники.Организации.ПустаяСсылка();
		ЭтаФорма.ОбособленноеПодразделение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры

Процедура МодульОбъектаПередЗаписьюДополнительно(ЭтотОбъект, Отказ) Экспорт
	
	Если Не ЭтотОбъект.ЭтоГруппа Тогда
		СтруктураКадровыеДанные = ПолныеПраваДополнительный.ПолучитьТекущиеКадровыеДанныеФизлица(ЭтотОбъект.Физлицо, Отказ);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураКадровыеДанные);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьВидыДоговоровДляПолученияНомера(ВидыДоговоров) Экспорт
	
	// В этой конфигурации дополнительных видов договоров не предусмотрено
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыВидовДоговоров(парамВидДоговора, ВидДоговора, Префикс) Экспорт
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		парамВидДоговора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
		парамВидДоговора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
	Иначе
		Префикс = "д";
		парамВидДоговора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		парамВидДоговора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСтруктуруПечатныхФорм(ВидДоговора) Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	
	Если Не ЗначениеЗаполнено(ВидДоговора) Или ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		СтруктураПечатныхФорм.Вставить("Печать", "Трудовой договор");
		СтруктураПечатныхФорм.Вставить("РегламентированныйОтпуск",	"Справка по отпуску");
		
		ИспользоватьУправленческийУчетЗарплаты = глЗначениеПеременной("глИспользоватьУправленческийУчетЗарплаты");
		Если ИспользоватьУправленческийУчетЗарплаты Тогда
			СтруктураПечатныхФорм.Вставить("УправленческийОтпуск",		"Справка по отпуску в компании");
		КонецЕсли;
		
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
		ИспользоватьУправленческийУчетЗарплаты = глЗначениеПеременной("глИспользоватьУправленческийУчетЗарплаты");
		Если ИспользоватьУправленческийУчетЗарплаты Тогда
			СтруктураПечатныхФорм.Вставить("УправленческийОтпуск",		"Справка по отпуску в компании");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПечатныхФорм;
	
КонецФункции

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, ЭтотОбъект) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Печать" Тогда
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТрудовойДоговор_Печать";
		
		// получаем данные для печати
		Выборка = ЭтотОбъект.СформироватьЗапросДляПечатиТрудовогоДоговора().Выбрать();
		
		// получаем макет
		Макет = ЭтотОбъект.ПолучитьМакет("Макет");
		
		// выводим данные 
		Если Выборка.Следующий() Тогда
			Макет.Параметры.Заполнить(Выборка);
			Макет.Параметры.ИспытательныйСрокСтрокой = ?(НЕ ЗначениеЗаполнено(Выборка.ИспытательныйСрок),"             месяцев", "" + Выборка.ИспытательныйСрок + " месяца(ев)" );
			Макет.Параметры.РежимРаботы = "" + Выборка.ВидГрафика + "; " + Выборка.ДлительностьРабочейНедели + " - часовая рабочая неделя";
			Макет.Параметры.ФормаОплаты = "Форма оплаты: " + Выборка.ВидРасчета + "; Оклад (тариф) = " + Выборка.ТарифнаяСтавка + " ("+Выборка.ВалютаТарифнойСтавки+")";  
			Макет.Параметры.ПолноеНазваниеОрганизации = СокрЛП(Макет.Параметры.ПолноеНазваниеОрганизации);
			Макет.Параметры.ДокументКемВыдан = СокрЛП(Макет.Параметры.ДокументКемВыдан);
			
			ВыборкаПерсональныхНадбавок = Выборка.ПерсональныеНадбавки.Выбрать();
			Если ВыборкаПерсональныхНадбавок.Количество()>0 Тогда
				СтрокаНадбавки = "Персональные надбавки: ";
				Пока ВыборкаПерсональныхНадбавок.Следующий() Цикл
					СтрокаНадбавки = СтрокаНадбавки + ВыборкаПерсональныхНадбавок.Надбавка + "- " + ВыборкаПерсональныхНадбавок.Показатель1 + "; ";
				КонецЦикла;
				Макет.Параметры.Надбавки = СтрокаНадбавки;
			КонецЕсли;
		КонецЕсли;
		
		// выводим готовый документ
		ТабДокумент.Вывести(Макет);
		
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Трудовой договор");
	
	//ИначеЕсли ИмяМакета = "РегламентированныйОтпуск" Тогда
	//	ФормированиеПечатныхФорм.ПечатьСправкиПоРегламентированнымОтпускамСотрудника(ЭтотОбъект.Ссылка);
	//	
	//ИначеЕсли ИмяМакета = "УправленческийОтпуск" Тогда
	//	ФормированиеПечатныхФормДополнительный.ПечатьСправкиПоУправленческимОтпускамСотрудника(ЭтотОбъект.Физлицо, ЭтотОбъект.Ссылка);
	//	
	КонецЕсли;
	
КонецФункции // Печать

Процедура ЗаполнитьРеквизитыПоШтатномуРасписанию(ЭтаФорма, ЭтотОбъект) Экспорт
	
	ДанныеШР = ПроцедурыУправленияПерсоналомПереопределяемый.СведенияОПозицииШтатногоРасписания(ЭтаФорма.ДатаДоговора, ЭтаФорма.ПодразделениеОрганизации, ЭтаФорма.Должность);
	//НадбавкиПоШР = ЭтотОбъект.СведенияОНадбавкахПозицииШтатногоРасписания(ЭтаФорма.ДатаДоговора, ЭтаФорма.ПодразделениеОрганизации, ЭтаФорма.Должность);
	//vvv
	НадбавкиПоШР = ПроцедурыУправленияПерсоналом.СведенияОНадбавкахПозицииШтатногоРасписания(ЭтаФорма.ДатаДоговора, ЭтаФорма.ПодразделениеОрганизации, ЭтаФорма.Должность);	
	//
	Если ДанныеШР.Количество() > 0 Тогда
		Если Не ЗначениеЗаполнено(ЭтаФорма.ВалютаТарифнойСтавки) Тогда
			ЭтаФорма.ВалютаТарифнойСтавки = ДанныеШР[0].ВалютаТарифнойСтавки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЭтаФорма.ГрафикРаботы) Тогда
			ЭтаФорма.ГрафикРаботы = ДанныеШР[0].ГрафикРаботы;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЭтаФорма.ТарифнаяСтавка) и ДанныеШР[0].МаксимальнаяТарифнаяСтавка = ДанныеШР[0].МинимальнаяТарифнаяСтавка Тогда
			ЭтаФорма.ТарифнаяСтавка = ДанныеШР[0].МаксимальнаяТарифнаяСтавка;
		КонецЕсли;
	КонецЕсли;
	//vvv раскомментируем
	Если НадбавкиПоШР.Количество() > 0 и ЭтаФорма.ПерсональныеНадбавки.Количество() = 0 Тогда
		Для каждого НадбавкаПоШР Из НадбавкиПоШР Цикл
			ЗаполнитьЗначенияСвойств(ЭтаФорма.ПерсональныеНадбавки.Добавить(), НадбавкаПоШР);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСписокНеЗаполненныхРеквизитов(ЭтаФорма, СписокНеЗаполненныхРеквизитов, ОбнаруженыОшибки) Экспорт
	
	Если ЭтаФорма.ВидДоговора <> Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий и Не ЗначениеЗаполнено(ЭтаФорма.Организация)  Тогда
		СписокНеЗаполненныхРеквизитов.Добавить(" Организация");
		ОбнаруженыОшибки = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры, функции для работы формы списка

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ МЕНЮ ВВЕСТИ ДОКУМЕНТ В ФОРМАХ СПРАВОЧНИКА СОТРУДНИКИ

Процедура СформироватьПодменюВвестиДокумент(МассивКнопокПодменю, СтруктураСоответствияДействий, ДанныеСотрудника) Экспорт
	
	ИспользоватьУправленческийУчетЗарплаты = глЗначениеПеременной("глИспользоватьУправленческийУчетЗарплаты") И НастройкаПравДоступа.ДоступнаРольКадровикаУпр();
	
	Если ДанныеСотрудника <> Неопределено Тогда
		ВидДоговора			= ДанныеСотрудника.ВидДоговора;
		ДатаПриема			= ДанныеСотрудника.ДатаПриемаНаРаботу;
		ДатаУвольнения		= ДанныеСотрудника.ДатаУвольнения;
		
		Если ИспользоватьУправленческийУчетЗарплаты Тогда
			ДатаПриемаВКомпанию	= ДанныеСотрудника.ДатаПриемаНаРаботуВКомпанию;
		Иначе
			ДатаПриемаВКомпанию	= Дата(1,1,1);
		КонецЕсли;
	Иначе
		ВидДоговора			= Неопределено;
		ДатаПриема			= Дата(1,1,1);
		ДатаУвольнения		= Дата(1,1,1);
		
		ДатаПриемаВКомпанию	= Дата(1,1,1);
	КонецЕсли;
	
	Для Каждого КнопкаПодменю Из МассивКнопокПодменю Цикл
		КнопкаПодменю.Кнопки.Очистить();
	КонецЦикла;
	
	Если ВидДоговора = Неопределено Тогда
		Для Каждого КнопкаПодменю Из МассивКнопокПодменю Цикл
			КнопкаПодменю.Доступность = Ложь;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Принят			= (ДатаПриема <> Дата(1,1,1));
	Уволен			= (ДатаУвольнения <> Дата(1,1,1));
	
	ПринятВКомпанию	= (ДатаПриемаВКомпанию <> Дата(1,1,1));
	
	Если Уволен Тогда
		Для Каждого КнопкаПодменю Из МассивКнопокПодменю Цикл
			КнопкаПодменю.Доступность = Ложь;
		КонецЦикла;
		Возврат;
	Иначе
		Для Каждого КнопкаПодменю Из МассивКнопокПодменю Цикл
			КнопкаПодменю.Доступность = Истина;
		КонецЦикла;
	КонецЕсли;
	
	// Проверка прав доступа на выполнение действий будет осуществляться непосредственно при выборе действий
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		
		Если Не Принят Тогда
			ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "ПриемНаРаботуВОрганизацию", ТипКнопкиКоманднойПанели.Действие, "Прием на работу в организацию", СтруктураСоответствияДействий.ДействиеВводНаОснованииПриемНаРаботуВОрганизацию);
			ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель1", ТипКнопкиКоманднойПанели.Разделитель);
		КонецЕсли;
		
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "КадровоеПеремещениеОрганизаций", ТипКнопкиКоманднойПанели.Действие, "Кадровое перемещение организаций", СтруктураСоответствияДействий.ДействиеВводНаОснованииКадровоеПеремещениеОрганизаций);
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "УвольнениеИзОрганизаций", ТипКнопкиКоманднойПанели.Действие, "Увольнение из организаций", СтруктураСоответствияДействий.ДействиеВводНаОснованииУвольнениеИзОрганизаций);
		
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель3", ТипКнопкиКоманднойПанели.Разделитель);
		
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Отпуск", ТипКнопкиКоманднойПанели.Действие, "Отпуск", СтруктураСоответствияДействий.ДействиеОтпуск);
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "БольничныйЛист", ТипКнопкиКоманднойПанели.Действие, "Больничный лист", СтруктураСоответствияДействий.ДействиеБольничныйЛист);
		
		Если ИспользоватьУправленческийУчетЗарплаты Тогда
			
			Если Не ПринятВКомпанию Тогда
				ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель4", ТипКнопкиКоманднойПанели.Разделитель);
				ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "ПриемНаРаботу", ТипКнопкиКоманднойПанели.Действие, "Прием на работу", СтруктураСоответствияДействий.ДействиеВводНаОснованииПриемНаРаботу);
				ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель5", ТипКнопкиКоманднойПанели.Разделитель);
			КонецЕсли;
			
			ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "КадровоеПеремещение", ТипКнопкиКоманднойПанели.Действие, "Кадровое перемещение", СтруктураСоответствияДействий.ДействиеВводНаОснованииКадровоеПеремещение);
			ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Увольнение", ТипКнопкиКоманднойПанели.Действие, "Увольнение", СтруктураСоответствияДействий.ДействиеВводНаОснованииУвольнение);
			
			ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель6", ТипКнопкиКоманднойПанели.Разделитель);
			
		КонецЕсли;
		
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
		
		Если Не ПринятВКомпанию Тогда
			ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель4", ТипКнопкиКоманднойПанели.Разделитель);
			ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "ПриемНаРаботу", ТипКнопкиКоманднойПанели.Действие, "Прием на работу", СтруктураСоответствияДействий.ДействиеВводНаОснованииПриемНаРаботу);
			ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель5", ТипКнопкиКоманднойПанели.Разделитель);
		КонецЕсли;
		
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "КадровоеПеремещение", ТипКнопкиКоманднойПанели.Действие, "Кадровое перемещение", СтруктураСоответствияДействий.ДействиеВводНаОснованииКадровоеПеремещение);
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Увольнение", ТипКнопкиКоманднойПанели.Действие, "Увольнение", СтруктураСоответствияДействий.ДействиеВводНаОснованииУвольнение);
		
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель6", ТипКнопкиКоманднойПанели.Разделитель);
		
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский
		или ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
		
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "ДоговорНаВыполнениеРабот", ТипКнопкиКоманднойПанели.Действие, "Договор на выполнение работ", СтруктураСоответствияДействий.ДействиеВводНаОснованииДоговорНаВыполнениеРаботСФизЛицом);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКнопкуВПодменю(МассивКнопок, ИмяКнопки, ТипКнопки, ТекстКнопки = "", Действие = Неопределено)
	
	Для Каждого КнопкаПодменю Из МассивКнопок Цикл
		КнопкаПодменю.Кнопки.Добавить(ИмяКнопки, ТипКнопки, ТекстКнопки, Действие);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьДополнительныеДействия(Кнопка, ИсточникЗаполнения) Экспорт
	
	Если Кнопка.Имя = "ПриемНаРаботу" Тогда
		СотрудникиОрганизацийДополнительный.ДействиеВводНаОснованииПриемНаРаботу(Кнопка, ИсточникЗаполнения);
	ИначеЕсли Кнопка.Имя = "КадровоеПеремещение" Тогда
		СотрудникиОрганизацийДополнительный.ДействиеВводНаОснованииКадровоеПеремещение(Кнопка, ИсточникЗаполнения);
	ИначеЕсли Кнопка.Имя = "Увольнение" Тогда	
		СотрудникиОрганизацийДополнительный.ДействиеВводНаОснованииУвольнение(Кнопка, ИсточникЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруСоответствияДействий(СтруктураСоответствияДействий, ДополнительныеДействия) Экспорт
	
	СтруктураСоответствияДействий.Вставить("ДействиеВводНаОснованииПриемНаРаботу"						, ДополнительныеДействия);
	СтруктураСоответствияДействий.Вставить("ДействиеВводНаОснованииКадровоеПеремещение"					, ДополнительныеДействия);
	СтруктураСоответствияДействий.Вставить("ДействиеВводНаОснованииУвольнение"							, ДополнительныеДействия);

КонецПроцедуры

Процедура УстановитьОтборыПоВидуДоговораДополнительно(ДанныеСтроки, ЭтаФорма) Экспорт
	
	Если ДанныеСтроки.ВидДоговора = 0 Тогда
		// договор управленческий
		ЭтаФорма.СправочникСписок.Отбор.ВидДоговора.ВидСравнения		= ВидСравнения.Равно;
		ЭтаФорма.СправочникСписок.Отбор.ВидДоговора.Значение			= Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий;
		ЭтаФорма.СправочникСписок.Отбор.ВидДоговора.Использование	= Истина;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ЭЛЕМЕНТАМИ ФОРМЫ

// Процедура дополняет список отборов по тем видам договоров, которые есть только в текущей конфигурации
//
Процедура ДополнитьСписокОтборов(СписокОтборов) Экспорт
	
	ИспользоватьУправленческийУчетЗарплаты = глЗначениеПеременной("глИспользоватьУправленческийУчетЗарплаты");
	
	Если ИспользоватьУправленческийУчетЗарплаты Тогда
		СписокОтборов.Добавить(0,	Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
	КонецЕсли;
	
КонецПроцедуры


// Процедура дополняет список колонок в списке сотрудников теми колонками, которые есть только в текущей конфигурации
//
Процедура УправлениеСпискомКолонок(ЭтаФорма, РежимРаботыФормы) Экспорт
	
	ИспользоватьУправленческийУчетЗарплаты = глЗначениеПеременной("глИспользоватьУправленческийУчетЗарплаты");
	
	СправочникСписок	= ЭтаФорма.СправочникСписок;
	ТабличноеПоле		= ЭтаФорма.ЭлементыФормы.СправочникСписок;
	
	КолонкиСписка	= ТабличноеПоле.Колонки;
	МДсотрудники	= Метаданные.Справочники.СотрудникиОрганизаций.Реквизиты;
	
	Если КолонкиСписка.Найти("ТекущееПодразделениеКомпании") = Неопределено Тогда
		
		Видимость = Ложь;
		Если ИспользоватьУправленческийУчетЗарплаты Тогда
			Видимость = ВосстановитьЗначение("СправочникСотрудники_" + РежимРаботыФормы + "Колонка_ТекущееПодразделениеКомпании");
			Если Видимость = Неопределено Тогда
				Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;	
		
		НоваяКолонка = КолонкиСписка.Добавить("ТекущееПодразделениеКомпании", МДсотрудники.ТекущееПодразделениеКомпании.Синоним);
		НоваяКолонка.Видимость	= Видимость;
		НоваяКолонка.Положение	= ПоложениеКолонки.ВТойЖеКолонке;
		НоваяКолонка.ИзменятьВидимость = ИспользоватьУправленческийУчетЗарплаты;
		НоваяКолонка.Данные		= "ТекущееПодразделениеКомпании";
		
		СправочникСписок.Колонки.Добавить("ТекущееПодразделениеКомпании");
		ТабличноеПоле.НастройкаОтбора.ТекущееПодразделениеКомпании.Доступность = ИспользоватьУправленческийУчетЗарплаты;
	КонецЕсли;
	
	Если КолонкиСписка.Найти("ТекущаяДолжностьКомпании") = Неопределено Тогда
		
		Видимость = Ложь;
		Если ИспользоватьУправленческийУчетЗарплаты Тогда
			Видимость = ВосстановитьЗначение("СправочникСотрудники_" + РежимРаботыФормы + "Колонка_ТекущаяДолжностьКомпании");
			Если Видимость = Неопределено Тогда
				Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		НоваяКолонка = КолонкиСписка.Добавить("ТекущаяДолжностьКомпании", МДсотрудники.ТекущаяДолжностьКомпании.Синоним);
		НоваяКолонка.Видимость	= Видимость;
		НоваяКолонка.Положение	= ПоложениеКолонки.ВТойЖеКолонке;
		НоваяКолонка.ИзменятьВидимость = ИспользоватьУправленческийУчетЗарплаты;
		НоваяКолонка.Данные		= "ТекущаяДолжностьКомпании";
		
		СправочникСписок.Колонки.Добавить("ТекущаяДолжностьКомпании");
		ТабличноеПоле.НастройкаОтбора.ТекущаяДолжностьКомпании.Доступность = ИспользоватьУправленческийУчетЗарплаты;
	КонецЕсли;
	
	Если КолонкиСписка.Найти("ДатаПриемаНаРаботуВКомпанию") = Неопределено Тогда
		
		Видимость = Ложь;
		Если ИспользоватьУправленческийУчетЗарплаты Тогда
			Видимость = ВосстановитьЗначение("СправочникСотрудники_" + РежимРаботыФормы + "Колонка_ДатаПриемаНаРаботуВКомпанию");
			Если Видимость = Неопределено Тогда
				Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		НоваяКолонка = КолонкиСписка.Добавить("ДатаПриемаНаРаботуВКомпанию", МДсотрудники.ДатаПриемаНаРаботуВКомпанию.Синоним);
		НоваяКолонка.Видимость	= Видимость;
		НоваяКолонка.Положение	= ПоложениеКолонки.ВТойЖеКолонке;
		НоваяКолонка.ИзменятьВидимость = ИспользоватьУправленческийУчетЗарплаты;
		НоваяКолонка.Данные		= "ДатаПриемаНаРаботуВКомпанию";
		
		СправочникСписок.Колонки.Добавить("ДатаПриемаНаРаботуВКомпанию");
		ТабличноеПоле.НастройкаОтбора.ДатаПриемаНаРаботуВКомпанию.Доступность = ИспользоватьУправленческийУчетЗарплаты;
	КонецЕсли;
	
	Если КолонкиСписка.Найти("ДатаУвольненияИзКомпании") = Неопределено Тогда
		
		Видимость = Ложь;
		Если ИспользоватьУправленческийУчетЗарплаты Тогда
			Видимость = ВосстановитьЗначение("СправочникСотрудники_" + РежимРаботыФормы + "Колонка_ДатаУвольненияИзКомпании");
			Если Видимость = Неопределено Тогда
				Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		НоваяКолонка = КолонкиСписка.Добавить("ДатаУвольненияИзКомпании", МДсотрудники.ДатаУвольненияИзКомпании.Синоним);
		НоваяКолонка.Видимость	= Видимость;
		НоваяКолонка.Положение	= ПоложениеКолонки.ВТойЖеКолонке;
		НоваяКолонка.ИзменятьВидимость = ИспользоватьУправленческийУчетЗарплаты;
		НоваяКолонка.Данные		= "ДатаУвольненияИзКомпании";
		
		СправочникСписок.Колонки.Добавить("ДатаУвольненияИзКомпании");
		ТабличноеПоле.НастройкаОтбора.ДатаУвольненияИзКомпании.Доступность = ИспользоватьУправленческийУчетЗарплаты;
	КонецЕсли;
	
КонецПроцедуры

// Процедура сохраняет настройку видимости добавленных программно колонок в списке сотрудников
//
Процедура СохранитьВидимостьКолонок(ЭтаФорма, РежимРаботыФормы) Экспорт
	
	ИспользоватьУправленческийУчетЗарплаты = глЗначениеПеременной("глИспользоватьУправленческийУчетЗарплаты");
	
	Если НЕ ИспользоватьУправленческийУчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиСписка	= ЭтаФорма.ЭлементыФормы.СправочникСписок.Колонки;
	
	Колонка = КолонкиСписка.Найти("ТекущееПодразделениеКомпании");
	Если Колонка <> Неопределено Тогда
		СохранитьЗначение("СправочникСотрудники_" + РежимРаботыФормы + "Колонка_ТекущееПодразделениеКомпании",	Колонка.Видимость);
	КонецЕсли;
	
	Колонка = КолонкиСписка.Найти("ТекущаяДолжностьКомпании");
	Если Колонка <> Неопределено Тогда
		СохранитьЗначение("СправочникСотрудники_" + РежимРаботыФормы + "Колонка_ТекущаяДолжностьКомпании",	Колонка.Видимость);
	КонецЕсли;
	
	Колонка = КолонкиСписка.Найти("ДатаПриемаНаРаботуВКомпанию");
	Если Колонка <> Неопределено Тогда
		СохранитьЗначение("СправочникСотрудники_" + РежимРаботыФормы + "Колонка_ДатаПриемаНаРаботуВКомпанию",	Колонка.Видимость);
	КонецЕсли;
	
	Колонка = КолонкиСписка.Найти("ДатаУвольненияИзКомпании");
	Если Колонка <> Неопределено Тогда
		СохранитьЗначение("СправочникСотрудники_" + РежимРаботыФормы + "Колонка_ДатаУвольненияИзКомпании",	Колонка.Видимость);
	КонецЕсли;
	
КонецПроцедуры


// Процедура дополняет подменю с возможными вариантами упорядочивания списка сотрудников
//
Процедура ДополнитьУпорядочивание(ЭтаФорма) Экспорт
	
	ИспользоватьУправленческийУчетЗарплаты = глЗначениеПеременной("глИспользоватьУправленческийУчетЗарплаты");
		
	Если НЕ ИспользоватьУправленческийУчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	Кнопки = ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.УпорядочитьПо.Кнопки;
	
	НоваяКнопка = Кнопки.Добавить();
	НоваяКнопка.ТипКнопки	= ТипКнопкиКоманднойПанели.Действие;
	НоваяКнопка.Имя			= "ТекущееПодразделениеКомпании";
	НоваяКнопка.Подсказка	= "Упорядочить по подразделению компании";
	НоваяКнопка.Пояснение	= НоваяКнопка.Подсказка;
	НоваяКнопка.Текст		= "Подразделению компании";
	НоваяКнопка.Действие	= Новый Действие("УпорядочитьПо");
	
	НоваяКнопка = Кнопки.Добавить();
	НоваяКнопка.ТипКнопки	= ТипКнопкиКоманднойПанели.Действие;
	НоваяКнопка.Имя			= "ТекущаяДолжностьКомпании";
	НоваяКнопка.Подсказка	= "Упорядочить по должности компании";
	НоваяКнопка.Пояснение	= НоваяКнопка.Подсказка;
	НоваяКнопка.Текст		= "Должности компании";
	НоваяКнопка.Действие	= Новый Действие("УпорядочитьПо");
	
	НоваяКнопка = Кнопки.Добавить();
	НоваяКнопка.ТипКнопки	= ТипКнопкиКоманднойПанели.Действие;
	НоваяКнопка.Имя			= "ДатаПриемаНаРаботуВКомпанию";
	НоваяКнопка.Подсказка	= "Упорядочить по дате приема на работу в компанию";
	НоваяКнопка.Пояснение	= НоваяКнопка.Подсказка;
	НоваяКнопка.Текст		= "Дате приема в компанию";
	НоваяКнопка.Действие	= Новый Действие("УпорядочитьПо");
	
КонецПроцедуры

// Функция возвращает текст названия группы, когда значение упорядочивания - пустое
//
Функция СформироватьТекстПриПолученииДанныхДляПустойГруппы(ИмяРеквизитаПорядка) Экспорт
	
	Текст = "";
	
	Если ИмяРеквизитаПорядка = "ТекущееПодразделениеКомпании" Тогда
		Текст = "Подразделение не указано";
		
	ИначеЕсли ИмяРеквизитаПорядка = "ТекущаяДолжностьКомпании" Тогда
		Текст = "Должность не указана";
		
	ИначеЕсли ИмяРеквизитаПорядка = "ДатаПриемаНаРаботуВКомпанию" Тогда
		Текст = "Не работают";
		
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции


// Процедура дополняет список возможных отображений списка
//
Процедура ДополнитьРежимыОтображенияСписка(ЭтаФорма, ДействиеПриАктивизацииСтроки, ДействиеПриПолученииДанных) Экспорт
	
	ИспользоватьУправленческийУчетЗарплаты = глЗначениеПеременной("глИспользоватьУправленческийУчетЗарплаты");
		
	Если НЕ ИспользоватьУправленческийУчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = ЭтаФорма.ЭлементыФормы;
	
	Элементы.ПолеРежимОтображенияСписка.СписокВыбора.Добавить("ПоСтруктуреКомпании", "По структуре компании");
	
	Панель = Элементы.ПанельРежимОтображенияСписка;
	
	Страница = Панель.Страницы.Добавить();
	Страница.Имя = "ПоСтруктуреКомпании";
	
	Панель.ТекущаяСтраница = Страница;
	
	ТабличноеПоле = Элементы.Добавить(Тип("ТабличноеПоле"), "СтруктураКомпании", Истина, Элементы.ПанельРежимОтображенияСписка);
	ТабличноеПоле.ТипЗначения					= Новый ОписаниеТипов("СправочникСписок.Подразделения");
	ТабличноеПоле.Ширина						= Панель.Ширина;
	ТабличноеПоле.Высота						= Панель.Высота;
	ТабличноеПоле.Шапка							= Ложь;
	ТабличноеПоле.Дерево						= Истина;
	ТабличноеПоле.НачальноеОтображениеДерева	= НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
	ТабличноеПоле.ГоризонтальныеЛинии			= Ложь;
	ТабличноеПоле.ВертикальныеЛинии				= Ложь;
	//ТабличноеПоле.Значение.Порядок.Установить("Порядок");
	
	ТабличноеПоле.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
	ТабличноеПоле.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
	
	Колонка = ТабличноеПоле.Колонки.Добавить();
	Колонка.Имя					= "Наименование";
	Колонка.Данные				= "Наименование";
	Колонка.ТекстШапки			= "Подразделение";
	Колонка.ОтображатьИерархию	= Истина;
	Колонка.Ширина				= 28;
	
	Колонка = ТабличноеПоле.Колонки.Добавить();
	Колонка.Имя			= "Код";
	Колонка.Данные		= "Код";
	Колонка.ТекстШапки	= "Код";
	Колонка.Ширина		= 10;
	
	ТабличноеПоле.УстановитьДействие("ПриАктивизацииСтроки",	ДействиеПриАктивизацииСтроки);
	ТабличноеПоле.УстановитьДействие("ПриПолученииДанных",		ДействиеПриПолученииДанных);
	
КонецПроцедуры

// Функция возвращает режим отображения списка для переданных отборов
//
Функция ОпределитьРежимОтображенияСпискаПоОтбору(Отборы) Экспорт
	
	Если Отборы.ТекущееПодразделениеКомпании.Использование Тогда
		Возврат "ПоСтруктуреКомпании";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Процедура устанавливает отбор, если при открытии списка сотрудников выбран режим отображения списка
//
Процедура УстановитьОтборДляВыбранногоРежимаОтображенияСписка(РежимОтображенияСписка, ЭлементыФормы, Отборы) Экспорт
	
	Если РежимОтображенияСписка = "ПоСтруктуреКомпании" Тогда
		ОтборПоПодразделению = Отборы.ТекущееПодразделениеКомпании.Значение;
		Если ТипЗнч(ОтборПоПодразделению) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ЭлементыФормы.СтруктураКомпании.ТекущаяСтрока = ОтборПоПодразделению;
			
		ИначеЕсли ТипЗнч(ОтборПоПодразделению) = Тип("СписокЗначений") И ОтборПоПодразделению.Количество() > 0 Тогда
			ЭлементыФормы.СтруктураКомпании.ТекущаяСтрока = ОтборПоПодразделению[0].Значение;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет, нужно или нет обязательно использовать иерархию, даже если пользователь ее отключил
//
Функция ИспользоватьИерархию(Отборы) Экспорт
	
	Возврат Отборы.ТекущееПодразделениеКомпании.Использование;
	
КонецФункции

// Процедура очищает отбор по режиму отображения списка
//
Процедура ОчиститьОтборыПоРежимуОтображенияСписка(ЭтаФорма, РежимОтображенияСписка = "") Экспорт
	
	Отборы = ЭтаФорма.СправочникСписок.Отбор;
	
	Если РежимОтображенияСписка <> "ПоСтруктуреКомпании" И Отборы.ТекущееПодразделениеКомпании.Использование Тогда
		Отборы.ТекущееПодразделениеКомпании.Использование	= Ложь;
	КонецЕсли;
		
	Если РежимОтображенияСписка = "ПоСтруктуреКомпании" Тогда
		Если Отборы.Организация.Использование Тогда
			Отборы.Организация.Использование	= Ложь;
		КонецЕсли;
		Если Отборы.ТекущееОбособленноеПодразделение.Использование Тогда
			Отборы.ТекущееОбособленноеПодразделение.Использование	= Ложь;
		КонецЕсли;
		
		ОтборПоОрганизации = ЭтаФорма.ЭлементыФормы.ОтборПоОрганизации;
		
		ОтборПоОрганизации.Значение = ОтборПоОрганизации.СписокВыбора.Получить(0).Значение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает отбор по режиму отображения списка
//
Процедура УстановитьОтборПоРежимуОтображенияСписка(ЭтаФорма, РежимОтображенияСписка) Экспорт
	
	ДанныеСтроки = ЭтаФорма.ЭлементыФормы.СтруктураКомпании.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		ОчиститьОтборыПоРежимуОтображенияСписка(ЭтаФорма);
		
	Иначе
		ОчиститьОтборыПоРежимуОтображенияСписка(ЭтаФорма, РежимОтображенияСписка);
		
		Отборы = ЭтаФорма.СправочникСписок.Отбор;
		
		Если РежимОтображенияСписка = "ПоСтруктуреКомпании" Тогда
			Если Не Отборы.ТекущееПодразделениеКомпании.Использование Тогда
				Отборы.ТекущееПодразделениеКомпании.Использование	= Истина;
			КонецЕсли;
			
			Отборы.ТекущееПодразделениеКомпании.ВидСравнения		= ВидСравнения.ВИерархии;
			Отборы.ТекущееПодразделениеКомпании.Значение			= ДанныеСтроки.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля РежимОтображенияДанных
//
Процедура РежимОтображенияДанныхПриАктивизацииСтроки(ЭтаФорма, РежимОтображенияСписка) Экспорт
	
	УстановитьОтборПоРежимуОтображенияСписка(ЭтаФорма, РежимОтображенияСписка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриПолученииДанных" табличного поля РежимОтображенияДанных
//
Процедура РежимОтображенияДанныхПриПолученииДанных(ЭтаФорма, ОформленияСтрок, РежимОтображенияСписка) Экспорт
	
	ЖирныйШрифт = Новый Шрифт(ШрифтыСтиля.ШрифтТекста,,, Истина);
	
	Для Каждого Оформление Из ОформленияСтрок Цикл
		Если Оформление.ДанныеСтроки = Неопределено Тогда
			Если РежимОтображенияСписка = "ПоСтруктуреКомпании" Тогда
				Оформление.Ячейки.Наименование.УстановитьТекст("Все подразделения");
			КонецЕсли;
			Оформление.Ячейки.Наименование.ОтображатьКартинку	= Ложь;
			Оформление.Ячейки.Наименование.Шрифт				= ЖирныйШрифт;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеНаборыПоФизлицу(ЭтаФорма) Экспорт

	// в этой конфигурации дополнительные наборы не заполняются	

КонецПроцедуры

//Функция проверяет необходимость проверки и установки вида занятости
Функция ПроверитьНеобходимостьУстановкиВидаЗанятости(ЭтаФорма) Экспорт

	НадоПроверятьВидЗанятости = (ЭтаФорма.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы 
		или ЭтаФорма.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство) и ЗначениеЗаполнено(ЭтаФорма.Организация)
		и ЗначениеЗаполнено(ЭтаФорма.Физлицо);
		
	Возврат НадоПроверятьВидЗанятости;	

КонецФункции // ПроверитьНеобходимостьУстановкиВидаЗанятости()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// Процедуры, функции для работы формы персональных надбавок

Функция ПолучитьЗаголовокФормы(Наименование) Экспорт
	
	Возврат "Персональные надбавки: " + Наименование;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры, функции для работы формы списка трудовых договоров

Процедура ДополнитьВидыДоговоровДляОтбора(СписокЗначенийДляОтбора) Экспорт
	
	// В этой конфигурации дополнительных действий не предусмотрено

КонецПроцедуры

Процедура ЗаполнитьФормуСпискаТрудовыхДоговоровДополнительно(Форма, ЭтаФорма) Экспорт
	
	// В этой конфигурации дополнительных действий не предусмотрено

КонецПроцедуры


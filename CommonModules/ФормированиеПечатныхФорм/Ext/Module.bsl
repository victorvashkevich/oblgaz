// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значенийми параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организаиии
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт

	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли; 

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование", " ");
	СоответствиеПараметров.Вставить("ИНН",        " ИНН ");
	СоответствиеПараметров.Вставить("КПП",        " КПП ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",   " ");
	СоответствиеПараметров.Вставить("Телефоны",   " тел.: ");
	СоответствиеПараметров.Вставить("НомерСчета", " р/с ");
	СоответствиеПараметров.Вставить("Банк",       " в банке ");
	СоответствиеПараметров.Вставить("БИК",        " БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",   " к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",  " Код по ОКПО ");

	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 

				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;
			Исключение
				Сообщить("Не удалось определить значение параметра организации: " + ИмяПараметра, СтатусСообщения.Внимание);
			КонецПопытки;

		КонецЕсли; 

	КонецЦикла;

	Возврат Результат;

КонецФункции // ОписаниеОрганизации()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт

	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=0" +
					?(ЗначениеЗаполнено(ЧН), ";" + "ЧН=" + ЧН, "") +
					?(ЗначениеЗаполнено(ЧРГ), ";" + "ЧРГ=" + ЧРГ, "");
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

// Возвращает значение истина если за, переданный период заполнен регламетированный производственный календарь
//
// Параметры:
//
//  НачалоПериода - дата начала периода
//  КонецПериода - дата конца периода
//
Функция ЗаполненРегламентированныйПроизводственныйКалендарь(НачалоПериода, КонецПериода) Экспорт
	
	ТЗ = "ВЫБРАТЬ
	     |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	     |ИЗ
	     |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	     |ГДЕ
	     |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоПериода И &КонецПериода";
		 
	Запрос = Новый Запрос(ТЗ);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции  //ЗаполненРегламентированныйПроизводственныйКалендарь()

// Устанавливает отбор при выбор подразддления организации или сотрудника органиазации в отборе СКД
// 
// Параметры:
//  Элемент              - элемент выбора
//  КомпоновщикНастроек  - компоновщик настроек
//  ПоляОрганизаций      - поля СКД, в которых назначается отбор по организации
//  Объект               - отчет
//  СтандартнаяОбработка - признак стандартной обработки
//
Процедура ПодставитьОтборОрганизации(Элемент, КомпоновщикНастроек, ПоляОрганизаций = Неопределено, Объект, СтандартнаяОбработка) Экспорт
	
	СписокПолеОргаинзация = Новый СписокЗначений;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("ПолеКомпоновкиДанных") тогда
		СписокПолеОргаинзация.Добавить(ПоляОрганизаций);
	КонецЕсли;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("СписокЗначений") тогда
		СписокПолеОргаинзация = ПоляОрганизаций;
	КонецЕсли;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("Массив") тогда
		СписокПолеОргаинзация.ЗагрузитьЗначения(ПоляОрганизаций);
	КонецЕсли;
	
	Организация = Неопределено;
	
	Для каждого ЭлементОтбора из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если СписокПолеОргаинзация.НайтиПоЗначению(ЭлементОтбора.ЛевоеЗначение) <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Организации") тогда
			
			Организация = ЭлементОтбора.ПравоеЗначение;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если Организация <> Неопределено тогда
		
		Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") тогда
			
			Элемент.ВыборПоВладельцу = Организация;
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.СотрудникиОрганизаций") тогда
			
			ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Объект, Истина, ОбщегоНазначения.ПолучитьРабочуюДату(), ОбщегоНазначения.ГоловнаяОрганизация(Организация), 1, СтандартнаяОбработка, Элемент.Значение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ПодставитьОтборОрганизации()

// Копирует упорядочивания из элемента структуры настройки СКД в отчет
//
// Параметры:
//  Настройка - настройки схемы компоновки данных
//
Процедура ПеренестиПорядокВОтчет(Настройки) Экспорт
	
	Если Настройки.Структура.Количество() <> 0 тогда
		
		Если ТипЗнч(Настройки.Структура[0]) = Тип("ТаблицаКомпоновкиДанных") тогда
			
			Если Настройки.Структура[0].Строки.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Строки[0]);
				
			КонецЕсли;
			
			Если Настройки.Структура[0].Колонки.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Колонки[0]);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Настройки.Структура[0]) = Тип("ГруппировкаТаблицыКомпоновкиДанных") тогда
			
			ПеренестиПорядок(Настройки, Настройки.Структура[0].Строки[0]);
			
		ИначеЕсли ТипЗнч(Настройки.Структура[0]) = Тип("ДиаграммаКомпоновкиДанных") тогда
			
			Если Настройки.Структура[0].Серии.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Серии[0]);
				
			КонецЕсли;
			
			Если Настройки.Структура[0].Точки.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Точки[0]);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ПеренестиВсеУпорядочиванияВОтчет()

// Копирует упорядочивания из группировки объекта в отчет
//
// Параметры:
//  Настройка - настройки схемы компоновки данных
//  Структура - структура настройки компоновки данных
//
Процедура ПеренестиПорядок(Настройки, Структура) Экспорт
	
	ТиповыеОтчеты.СкопироватьЭлементы(Настройки.Порядок, Структура.Порядок);
	
	Структура.Порядок.Элементы.Очистить();
	
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	Если Структура.Структура.Количество() <> 0 тогда
		
		ПеренестиПорядок(Настройки, Структура.Структура[0]);
		
	КонецЕсли;
	
КонецПроцедуры //ПеренестиУпорядочивание()

////////////
////////////////////////////////////////////////////////////////////
//  Общие процедуры печати 

Функция ПечатьРасчетаСреднегоЗаработка(ДокументСсылка, ДатаСобытия, ПродолжительностьРасчетногоПериода, ОписаниеОплачиваемогоПериода, СпособРасчета, Знач ИспользоватьСреднеЧасовойЗаработок = Неопределено, СписокСоставляющихСреднегоЗаработка = Неопределено, ВыводитьЗаголовок = Истина, ОтражатьДолюВремени = Истина, СтруктураПоказателей = Неопределено) Экспорт
	
	Попытка
		МетаданныеДокумента = ДокументСсылка.Метаданные();
		ИмяИсточникаДанных = МетаданныеДокумента.Имя;
	Исключение
		Возврат Новый ТабличныйДокумент
	КонецПопытки;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетСреднегоЗаработка";
	
	Макет = ПолучитьОбщийМакет("РасчетСреднегоЗаработка");
	
	СекцияШапка = Макет.ПолучитьОбласть("Шапка");
	СекцияЗаголовокНачислений = Макет.ПолучитьОбласть("ЗаголовокНачислений");
	СекцияЗаголовокРабочегоМеста = Макет.ПолучитьОбласть("ЗаголовокРабочегоМеста");
	СекцияМесячныйЗаработок = Макет.ПолучитьОбласть("МесячныйЗаработок");
	СекцияСерединаОтчета = Макет.ПолучитьОбласть("СерединаОтчета");
	//СекцияДоляВремени = Макет.ПолучитьОбласть("ДоляВремени");
	СекцияЗаголовокПремий = Макет.ПолучитьОбласть("ЗаголовокПремий");
	СекцияПремии = Макет.ПолучитьОбласть("Премии");
	СекцияПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Запрос = Новый Запрос;
	
	Организация = ДокументСсылка.Организация;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			ДокументСсылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",		ДатаСобытия);
	Запрос.УстановитьПараметр("Сотрудник",				ДокументСсылка.Сотрудник);
	Запрос.УстановитьПараметр("Физлицо",				ДокументСсылка.Сотрудник.Физлицо);
	Запрос.УстановитьПараметр("ИспользоватьСреднеЧасовойЗаработок" , ИспользоватьСреднеЧасовойЗаработок);

	Если ИспользоватьСреднеЧасовойЗаработок = Неопределено Тогда
		Если МетаданныеДокумента.Реквизиты.Найти("СпособРегистрацииВремени") <> Неопределено Тогда
			ТекстПоляИспользоватьСреднеЧасовойЗаработок = "
			|	ВЫБОР
			|		КОГДА Документ.СпособРегистрацииВремени = ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены) 
			|			ИЛИ ВЫБОР
			|					КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
			|							И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|						ТОГДА ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени, ЛОЖЬ)
			|					ИНАЧЕ ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) 
			|				КОНЕЦ			
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ИспользоватьСреднеЧасовойЗаработок"
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням 
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке Тогда
			// Решение Верховного Суда РФ от 13.07.2006 № ГКПИ06-637
			ТекстПоляИспользоватьСреднеЧасовойЗаработок = "
			|	Ложь КАК ИспользоватьСреднеЧасовойЗаработок"  
		Иначе
			ТекстПоляИспользоватьСреднеЧасовойЗаработок = "
			|ВЫБОР
			|	КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
			|			И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени, ЛОЖЬ)
			|	ИНАЧЕ ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) 
			|КОНЕЦ КАК ИспользоватьСреднеЧасовойЗаработок"
		КонецЕсли;
	Иначе
		ТекстПоляИспользоватьСреднеЧасовойЗаработок ="
		|	&ИспользоватьСреднеЧасовойЗаработок КАК ИспользоватьСреднеЧасовойЗаработок"
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Представление,
	|	Документ.Ссылка,
	|	Документ.Сотрудник,
	|	Документ.Сотрудник.Физлицо КАК Физлицо,
	|	Документ.Организация,
	|	ВЫРАЗИТЬ(Документ.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НаименованиеОрганизации,
	|	ЕСТЬNULL(ФИОФизлица.Фамилия + "" "" + ФИОФизлица.Имя + "" "" + ФИОФизлица.Отчество, Документ.Сотрудник.Наименование) КАК ФИОРаботника,
	|	Документ.Сотрудник.Код КАК ТабельныйНомер,"
	+ ТекстПоляИспользоватьСреднеЧасовойЗаработок + "
	|ИЗ
	|	Документ." + ИмяИсточникаДанных + " КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаНачалаСобытия, ФизЛицо = &ФизЛицо) КАК ФИОФизлица
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Документ.Ссылка = &ДокументСсылка";

	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если ИспользоватьСреднеЧасовойЗаработок = Неопределено Тогда
			ИспользоватьСреднеЧасовойЗаработок = Выборка.ИспользоватьСреднеЧасовойЗаработок;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СекцияШапка.Параметры,Выборка);
	КонецЕсли;
	
	Если ВыводитьЗаголовок Тогда
		СекцияШапка.Параметры.Представление = РаботаСДиалогами.СформироватьЗаголовокДокумента(ДокументСсылка,МетаданныеДокумента.Синоним);
		СекцияШапка.Параметры.ОписаниеОплачиваемогоПериода = ОписаниеОплачиваемогоПериода;
		СекцияШапка.Параметры.ДатаНачалаРасчетногоПериода = Формат(ДобавитьМесяц(НачалоМесяца(ДатаСобытия), - ПродолжительностьРасчетногоПериода),"ДФ=dd.MM.yyyy");
		СекцияШапка.Параметры.ДатаОкончанияРасчетногоПериода = Формат(НачалоДня(НачалоМесяца(ДатаСобытия) - 1),"ДФ=dd.MM.yyyy");
		СекцияШапка.Параметры.СпособРасчета = ?(СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3Лет,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС,СпособРасчета);
	
		ТабДокумент.Вывести(СекцияШапка);
	КонецЕсли;
	
	Если СписокСоставляющихСреднегоЗаработка = Неопределено Тогда
		Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням 
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке 
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка
			Тогда
			СписокСоставляющихСреднегоЗаработка = Новый Массив(5); 
			СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
			СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск;
			СписокСоставляющихСреднегоЗаработка[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
			СписокСоставляющихСреднегоЗаработка[3] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
			СписокСоставляющихСреднегоЗаработка[4] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Тогда
			СписокСоставляющихСреднегоЗаработка = Новый Массив(4); 
			СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
			СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
			СписокСоставляющихСреднегоЗаработка[2] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
			СписокСоставляющихСреднегоЗаработка[3] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
		КонецЕсли;
	КонецЕсли;
	
	ОсновнойЗаработок = Новый Массив(3);
	ОсновнойЗаработок[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
	ОсновнойЗаработок[1] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
	ОсновнойЗаработок[2] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск;
	
	//ФиксированныеПремии = Новый Массив(6);
	//ФиксированныеПремии[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
	//
	//ПоФиксПремиям = Новый Массив(3);
	//ПоФиксПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
	//
	
	ПоПремиям = Новый Массив(3);
	ПоПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
	ПоПремиям[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
    ПоПремиям[2] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;

	//	
	//ПоФиксПремиямНеИндексируемые = Новый Массив(4);
	//ПоФиксПремиямНеИндексируемые[0] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
		
	Индексируемые = Новый Массив(7);
	Индексируемые[3] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
	Индексируемые[4] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
	Индексируемые[5] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск;
	Индексируемые[6] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.УстановитьПараметр("СпособРасчета", СпособРасчета);
	Запрос.УстановитьПараметр("ИспользоватьСреднеЧасовойЗаработок", ИспользоватьСреднеЧасовойЗаработок);
	Запрос.УстановитьПараметр("СписокСоставляющихСреднегоЗаработка", СписокСоставляющихСреднегоЗаработка);
	Запрос.УстановитьПараметр("Индексируемые",						Индексируемые);
	Запрос.УстановитьПараметр("ОсновнойЗаработок",					ОсновнойЗаработок);
	Запрос.УстановитьПараметр("ОсновнойЗаработокНеиндексируемый",	ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
	//Запрос.УстановитьПараметр("ПоФиксПремиям",						ПоФиксПремиям);
	Запрос.УстановитьПараметр("ПоПремиям",							ПоПремиям);
	//Запрос.УстановитьПараметр("ВсеФиксированныеПремии",				ФиксированныеПремии);
	//Запрос.УстановитьПараметр("ПоФиксПремиямНеИндексируемые",		ПоФиксПремиямНеИндексируемые);
	Запрос.УстановитьПараметр("РасчетныйПериодНачало",				ДобавитьМесяц(НачалоМесяца(ДатаСобытия), - ПродолжительностьРасчетногоПериода));
	Запрос.УстановитьПараметр("РасчетныйПериодОкончание",			НачалоДня(НачалоМесяца(ДатаСобытия) - 1));
	
	// по окончательным данным проведенного документа
	// собираем итоговые данные и рассчитываем средний заработок
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА 1
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ПорядокЗаписей,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|					КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|						ТОГДА 1
	|					ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|				КОНЕЦ
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|			ТОГДА РасчетСреднегоЗаработка.Результат
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоЗаработка,
	|	ВЫБОР
	|		КОГДА (РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|				ИЛИ РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый))
	|				И РасчетСреднегоЗаработка.Сотрудник = &Сотрудник
	|			ТОГДА ВЫБОР
	|					КОГДА &ИспользоватьСреднеЧасовойЗаработок
	|						ТОГДА РасчетСреднегоЗаработка.ОтработаноЧасов
	|					ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноДней
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоДнейРасчетногоПериода,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА 0
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|			ТОГДА 0
	|		КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоПремиям)
	|					ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|							КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|								ТОГДА 1
	|							ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|						КОНЕЦ
	|				ИНАЧЕ РасчетСреднегоЗаработка.Результат
	|			КОНЕЦ
	|	КОНЕЦ КАК ВсегоУчтеноПремий,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА 0
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|			ТОГДА 0
	|		КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоПремиям)
	|					ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|							КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|								ТОГДА 1
	|							ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|						КОНЕЦ
	|				ИНАЧЕ РасчетСреднегоЗаработка.Результат
	|			КОНЕЦ / РасчетСреднегоЗаработка.ЧислоМесяцев
	|	КОНЕЦ КАК МесячнаяЧастьПремий,
	|	НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.МесяцВыборки, МЕСЯЦ) КАК МесяцРасчетногоПериода,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|			ТОГДА 1
	|		ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|	КОНЕЦ КАК КоэффициентИндексации,
	|	РасчетСреднегоЗаработка.Результат,
	|	РасчетСреднегоЗаработка.ЧислоМесяцев КАК МесяцевПремии,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.Наименование
	|	КОНЕЦ + ""; "" + ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность.Наименование
	|	КОНЕЦ КАК РабочееМесто,
	|	РасчетСреднегоЗаработка.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РасчетСреднегоЗаработка.Сотрудник.ВидЗанятости, РасчетСреднегоЗаработка.Регистратор.Сотрудник.ВидЗанятости) = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|			ТОГДА ""По внутр. совм-ву""
	|		ИНАЧЕ ""Основное рабочее место""
	|	КОНЕЦ КАК ВидЗанятости
	|ИЗ
	|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ДатаНачалаСобытия,
	|				Сотрудник В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							РасчетСреднегоЗаработка.Сотрудник
	|						ИЗ
	|							РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|						ГДЕ
	|							РасчетСреднегоЗаработка.Регистратор = &Регистратор)
	|					И Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизацийСрезПоследних
	|		ПО РасчетСреднегоЗаработка.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
	|ГДЕ
	|	РасчетСреднегоЗаработка.Регистратор = &Регистратор
	|	И РасчетСреднегоЗаработка.СпособРасчета = &СпособРасчета
	|	И (РасчетСреднегоЗаработка.Результат <> 0
	|			ИЛИ РасчетСреднегоЗаработка.ОтработаноДней <> 0
	|			ИЛИ РасчетСреднегоЗаработка.ОтработаноЧасов <> 0)
	|	И РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода = &РасчетныйПериодНачало
	|	И РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода = &РасчетныйПериодОкончание
	|	И РасчетСреднегоЗаработка.ВидРасчета В(&СписокСоставляющихСреднегоЗаработка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокЗаписей,
	|	РасчетСреднегоЗаработка.БазовыйПериодНачало
	|ИТОГИ
	|	СУММА(ВсегоЗаработка),
	|	СУММА(ВсегоДнейРасчетногоПериода),
	|	СУММА(ВсегоУчтеноПремий)
	|ПО
	|	ОБЩИЕ,
	|	Сотрудник";
	
	Результат = Запрос.Выполнить();
	
	СтруктураПоказателей = Новый Структура("
	|ВсегоДнейРасчетногоПериода,
	|ВсегоЗаработка,
	|ВсегоУчтеноПремий,
	|ОбщийЗаработок, 
	|Средний",0,0,0,0,0);
	
	Если Не Результат.Пустой() Тогда
		
		// уточним названия колонок и показателей
		Если ИспользоватьСреднеЧасовойЗаработок Тогда
			СекцияЗаголовокРабочегоМеста.Параметры.ЕдиницаИзмерения = "часов";
			//СекцияДоляВремени.Параметры.ЕдиницаИзмерения = "часов";
			СекцияПодвал.Параметры.ЕдиницаИзмерения = "часов";
			СекцияПодвал.Параметры.ОписаниеЗаработка = "Среднечасовой";
		Иначе
			СекцияЗаголовокРабочегоМеста.Параметры.ЕдиницаИзмерения = "дней";
			//СекцияДоляВремени.Параметры.ЕдиницаИзмерения = "дней";
			СекцияПодвал.Параметры.ЕдиницаИзмерения = "дней";
			СекцияПодвал.Параметры.ОписаниеЗаработка = "Среднедневной";
		КонецЕсли;
		СтруктураИтоговПоРабочемуМесту = Новый Структура("
		|ВсегоДнейРасчетногоПериода,
		|ВсегоЗаработка,
		|ВсегоДнейОтработано,
		|ВсегоДнейПоНорме,
		|ДоляВремени",0,0,0,0,0);
		
		ВыводитьЗаголовокРабочегоМеста = Истина;
		ВыводитьИтогиПредыдущегоРабочегоМеста = Ложь;
		ТабДокумент.Вывести(СекцияЗаголовокНачислений);
		
		// Формирование раздела по начислениям за расчетный период по рабочим местам
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
				
				//заполнение итогами по расчету среднего заработка
				ЗаполнитьЗначенияСвойств(СтруктураПоказателей,Выборка);
				//ОтражатьДолюВремени = ОтражатьДолюВремени И Выборка.ФиксПремий <> 0;
				
				СтруктураПоказателей.ОбщийЗаработок = Формат(Выборка.ВсегоЗаработка + Выборка.ВсегоУчтеноПремий, "ЧЦ=17; ЧДЦ=4; ЧН=-");
				СтруктураПоказателей.Средний = Окр(?(СтруктураПоказателей.ВсегоДнейРасчетногоПериода = 0,0, (Выборка.ВсегоЗаработка + Выборка.ВсегоУчтеноПремий) / СтруктураПоказателей.ВсегоДнейРасчетногоПериода),2);
				
			ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
				Если ВыводитьИтогиПредыдущегоРабочегоМеста Тогда // итоги предыдущего р.м.
					ЗаполнитьЗначенияСвойств(СекцияСерединаОтчета.Параметры,СтруктураИтоговПоРабочемуМесту);
					ТабДокумент.Вывести(СекцияСерединаОтчета);
					//Если ОтражатьДолюВремени Тогда
					//	//ЗаполнитьЗначенияСвойств(СекцияДоляВремени.Параметры,СтруктураИтоговПоРабочемуМесту);
					//	//ТабДокумент.Вывести(СекцияДоляВремени);
					//КонецЕсли;
				Иначе
					ВыводитьИтогиПредыдущегоРабочегоМеста = Истина;
				КонецЕсли;
				
				// заполнение итогами по очередному р.м.
				ЗаполнитьЗначенияСвойств(СтруктураИтоговПоРабочемуМесту,Выборка);
				СтруктураИтоговПоРабочемуМесту.ДоляВремени = ?(СтруктураИтоговПоРабочемуМесту.ВсегоДнейПоНорме = 0,0, Формат(СтруктураИтоговПоРабочемуМесту.ВсегоДнейОтработано / СтруктураИтоговПоРабочемуМесту.ВсегоДнейПоНорме,"ЧДЦ=10"));
				ВыводитьЗаголовокРабочегоМеста = Истина;
				
			ИначеЕсли Выборка.ПорядокЗаписей <> 3 Тогда
				Если ВыводитьЗаголовокРабочегоМеста Тогда
					ВыводитьЗаголовокРабочегоМеста = Ложь;
					ЗаполнитьЗначенияСвойств(СекцияЗаголовокРабочегоМеста.Параметры,Выборка);
					ТабДокумент.Вывести(СекцияЗаголовокРабочегоМеста);
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СекцияМесячныйЗаработок.Параметры,Выборка);
				ТабДокумент.Вывести(СекцияМесячныйЗаработок);
			КонецЕсли;
		КонецЦикла;
		Если ВыводитьЗаголовокРабочегоМеста Тогда
			ТабДокумент.Вывести(СекцияЗаголовокРабочегоМеста);
		КонецЕсли;
		// итоги последнего по порядку р.м.
		ЗаполнитьЗначенияСвойств(СекцияСерединаОтчета.Параметры,СтруктураИтоговПоРабочемуМесту);
		ТабДокумент.Вывести(СекцияСерединаОтчета);
		//Если ОтражатьДолюВремени Тогда
		//	ЗаполнитьЗначенияСвойств(СекцияДоляВремени.Параметры,СтруктураИтоговПоРабочемуМесту);
		//	ТабДокумент.Вывести(СекцияДоляВремени);
		//КонецЕсли;
		
		// Формирование раздела по начисленным премиям
		ТабДокумент.Вывести(СекцияЗаголовокПремий);
		ВыводитьПустуюСтрокуПремии = Истина;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись И Выборка.ПорядокЗаписей = 3 Тогда
				ЗаполнитьЗначенияСвойств(СекцияПремии.Параметры,Выборка);
				СекцияПремии.Параметры.МесяцРасчетногоПериода = Формат(СекцияПремии.Параметры.МесяцРасчетногоПериода,"ДФ='ММММ гггг ""г.""'");
				ТабДокумент.Вывести(СекцияПремии);
				ВыводитьПустуюСтрокуПремии = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если ВыводитьПустуюСтрокуПремии Тогда
			СекцияПремии.Область(1,2,1,2).Текст = "";
			ТабДокумент.Вывести(СекцияПремии);
		КонецЕсли;
		
		// Итоги по расчету среднего заработка
		ЗаполнитьЗначенияСвойств(СекцияПодвал.Параметры,СтруктураПоказателей);
		ТабДокумент.Вывести(СекцияПодвал);
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьРасчетаСреднегоЗаработка	


// Возвращает процент северной надбавки на указаную дату
//
// Параметры:
//  ДатаРегистрации - дата регистрации записи о стаже
//  ПорядокНачисления - порядок начисления северной надбавки - ПеречислениеСсылка.ПорядокНачисленияСеверныхНадбавок
//  НачальныйПроцент - процент на дату ДатаРегистрации
//  Месяцев - количество месяцев стажа на дату ДатаРегистрации
//  Дней - количество дней стажа на дату ДатаРегистрации
//  Дата - начало периода, в котором мы получаем сведения о процентах надбавки
Функция ПолучитьПроцентСевернойНадбавкиНаДату(ДатаРегистрацииСеверногоСтажа, ПорядокНачисленияСеверныхНадбавок, НачальныйПроцентСевернойНадбавки, СеверныйСтажМесяцев, СеверныйСтажДней, ОкончаниеПериодаЗаполнения) Экспорт
	
	Массив = ПроведениеРасчетов.ПолучитьПроцентыСевернойНадбавкиЗаПериод(
					ДатаРегистрацииСеверногоСтажа, 
					ПорядокНачисленияСеверныхНадбавок, 
					НачальныйПроцентСевернойНадбавки,
					СеверныйСтажМесяцев,
					СеверныйСтажДней,
					ОкончаниеПериодаЗаполнения,
					ОкончаниеПериодаЗаполнения);
					
	Процент = Массив[Массив.Количество()-1].Процент;
					
	Возврат Процент;

КонецФункции //ПолучитьПроцентСевернойНадбавкиНаДату

// Подобрать значение сотрудника
// 
Процедура ОбработатьАвтоПодборТекста(Элемент,  Текст, ТекстАвтоПодбора, КомпоновщикНастроек, ПоляОрганизаций = Неопределено, Объект, СтандартнаяОбработка) Экспорт
	
	СписокПолеОргаинзация = Новый СписокЗначений;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("ПолеКомпоновкиДанных") тогда
		СписокПолеОргаинзация.Добавить(ПоляОрганизаций);
	КонецЕсли;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("СписокЗначений") тогда
		СписокПолеОргаинзация = ПоляОрганизаций;
	КонецЕсли;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("Массив") тогда
		СписокПолеОргаинзация.ЗагрузитьЗначения(ПоляОрганизаций);
	КонецЕсли;
	
	Организация = Неопределено;
	
	Для каждого ЭлементОтбора из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если СписокПолеОргаинзация.НайтиПоЗначению(ЭлементОтбора.ЛевоеЗначение) <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Организации") тогда
			
			Организация = ЭлементОтбора.ПравоеЗначение;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если Организация <> Неопределено тогда
		
		Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.СотрудникиОрганизаций") тогда
			
			ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация, , ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ОбработатьОкночаниеВводаТекстаВотчете()

// Подобрать значение сотрудника
// 
Процедура ОбработатьОбработатьОкончаниеВводаТекста(Элемент,  Текст, Значение, КомпоновщикНастроек, ПоляОрганизаций = Неопределено, Объект, СтандартнаяОбработка) Экспорт
	
	СписокПолеОргаинзация = Новый СписокЗначений;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("ПолеКомпоновкиДанных") тогда
		СписокПолеОргаинзация.Добавить(ПоляОрганизаций);
	КонецЕсли;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("СписокЗначений") тогда
		СписокПолеОргаинзация = ПоляОрганизаций;
	КонецЕсли;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("Массив") тогда
		СписокПолеОргаинзация.ЗагрузитьЗначения(ПоляОрганизаций);
	КонецЕсли;
	
	Организация = Неопределено;
	
	Для каждого ЭлементОтбора из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если СписокПолеОргаинзация.НайтиПоЗначению(ЭлементОтбора.ЛевоеЗначение) <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Организации") тогда
			
			Организация = ЭлементОтбора.ПравоеЗначение;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если Организация <> Неопределено тогда
		
		Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.СотрудникиОрганизаций") тогда
			
			Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация, , ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ОбработатьОкночаниеВводаТекстаВотчете()

// Проверяет, умещаются ли переданные табличные документы на страницу при печати.
//
// Параметры
//  ТабДокумент        – Табличный документ
//  ВыводимыеОбласти   – Массив из проверяемых таблиц или табличный документ
//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки
//
// Возвращаемое значение:
//   Булево   – умещаются или нет переданные документы
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина) Экспорт

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции // ПроверитьВыводТабличногоДокумента()

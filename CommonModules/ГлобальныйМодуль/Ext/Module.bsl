///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ 

//#Если НЕ Клиент И НЕ ВнешнееСоединение Тогда
//	
//// Функция возвращает значение экспортных переменных модуля приложений из параметра сеанса
//// Необходмо для возможности создания объектов на сервере
//Функция глЗначениеПеременной(ИмяПеременной) Экспорт
//	ЗначениеИзПараметраСеанса = ПараметрыСеанса[Сред(ИмяПеременной, 3)];
//	
//	Если ТипЗнч(ЗначениеИзПараметраСеанса) = Тип("ХранилищеЗначения") Тогда
//		ЗначениеПеременной = ЗначениеИзПараметраСеанса.Получить();
//		// Для параметров учетной политики - инициализация происходит при первом обращении к ним
//		Если ЗначениеПеременной = Неопределено Тогда                  
//			// УчетнаяПолитикаПоПерсоналуОрганизации
//			Если ИмяПеременной = "глУчетнаяПолитикаПоПерсоналу" Тогда                               
//				ЗначениеПеременной = ЗаполнениеУчетнойПолитикиПоПерсоналу();
//			КонецЕсли;			
//			
//			Если ИмяПеременной = "глУчетнаяПолитикаПоПерсоналуОрганизации" Тогда
//				ЗначениеПеременной = ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации();
//			КонецЕсли;
//			
//			// УчетнаяПолитикаПоНалоговомуУчету
//			Если ИмяПеременной = "глУчетнаяПолитикаПоНалоговомуУчету" Тогда
//				ЗначениеПеременной = ЗаполнениеУчетнойПолитикиНалоговомуУчету();							
//			КонецЕсли;						
//		КонецЕсли;				        
//	 Иначе
//		 ЗначениеПеременной = ЗначениеИзПараметраСеанса;
//	 КонецЕсли;
//	 
//	 Возврат ЗначениеПеременной;
//КонецФункции
//
//#КонецЕсли

#Если Сервер И НЕ Клиент И НЕ ВнешнееСоединение Тогда

Функция глЗначениеПеременной(Имя) Экспорт
	
	Кэш = ПараметрыСеанса.ОбщиеЗначения.Получить();
	КэшИзменен = Ложь;
	ПолученноеЗначение = ОбщегоНазначения.ПолучитьЗначениеПеременной(Имя, Кэш, КэшИзменен);
	
	Если КэшИзменен Тогда
		ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Кэш);
	КонецЕсли;
	
	Возврат ПолученноеЗначение;
	
КонецФункции

// Процедура установки значения экспортных переменных модуля приложения
//
// Параметры
//  Имя - строка, содержит имя переменной целиком
// 	Значение - значение переменной
//
Процедура глЗначениеПеременнойУстановить(Имя, Значение, ОбновлятьВоВсехКэшах = Ложь) Экспорт
	
	Кэш = ПараметрыСеанса.ОбщиеЗначения.Получить();	
	ОбщегоНазначения.УстановитьЗначениеПеременной(Имя, Кэш, Значение);
	ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Кэш);	
	
КонецПроцедуры


#КонецЕсли

Функция ОпределитьЭтаИнформационнаяБазаФайловая(СтрокаСоединенияСБД = "") Экспорт
			
	СтрокаСоединенияСБД = ?(ПустаяСтрока(СтрокаСоединенияСБД), СтрокаСоединенияИнформационнойБазы(), СтрокаСоединенияСБД);
	
	// в зависимости от того файловый это вариант БД или нет немного по-разному путь в БД формируется
	ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "FILE=");
	
	Возврат ПозицияПоиска = 1;	
	
КонецФункции

#Если Клиент Тогда
// Процедура перезапуска сеанса работы с программой
Процедура ПерезапуститьСеансРаботыСПрограммой() Экспорт
	глЗапрашиватьПодтверждениеПриЗакрытии = Ложь;
	
	ЗавершитьРаботуСистемы(Истина, Истина);
КонецПроцедуры
#КонецЕсли

// Открыть форму настройки пользователя
// 
Процедура ОткрытьФормуНастройкиПользователя() Экспорт
	
	ПараметрыСеанса.ТекущийПользователь.ПолучитьФорму().Открыть();
	
КонецПроцедуры  // ОткрытьФормуНастройкиПользователя

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ОЖИДАНИЯ

#Если Клиент Тогда
// Процедура проверяет Напоминания
//
Процедура ПроверитьНапоминания() Экспорт

	УправлениеКонтактами.ПроверитьНапоминанияПользователя(ПараметрыСеанса.ТекущийПользователь);

КонецПроцедуры

// Процедура выполняет отключение пользователей от информационной 
// базы в случае, если был запущен сеанс с параметром "ЗавершитьРаботуПользователей"
//
//vvv Переименовываем процедуру КонтрольРежимаЗавершенияРаботыПользователей() , сейчас она содержится в модуле УправлениеСоединениямиИБГлобальный
Процедура КонтрольРежимаЗавершенияРаботыПользователейСтарая() Экспорт

	ТекущийРежим = ПолучитьБлокировкуУстановкиСоединений();
	БлокировкаУстановлена = ТекущийРежим.Установлена;
	ВремяНачалаБлокировки = ТекущийРежим.Начало;
	ВремяОкончанияБлокировки = ТекущийРежим.Конец;
	
	ИнтервалПредупреждения    = 5 * 60;
	ИнтервалЗакрытьСЗапросом  = 0;
	ИнтервалЗакрытьБезЗапроса = - 1 * 60;
	ИнтервалПрекратить        = - 2 * 60;
	ТекущийМомент = ТекущаяДата();
	
	Если БлокировкаУстановлена Тогда
		
		Если ВремяОкончанияБлокировки <> '00010101' И ТекущийМомент > ВремяОкончанияБлокировки Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВремяНачалаБлокировки) 
			ИЛИ ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалПрекратить Тогда
			
			ПрекратитьРаботуСистемы(Истина);
			
		ИначеЕсли ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалЗакрытьБезЗапроса Тогда
			Предупреждение("Работа системы завершается." + ?(ПустаяСтрока(ТекущийРежим.Сообщение), "", Символы.ПС + ТекущийРежим.Сообщение), 30);
			
			ЗавершитьРаботуСистемы(Ложь, Истина);
			
		ИначеЕсли ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалЗакрытьСЗапросом Тогда
			
			Предупреждение("Работа системы завершается." + ?(ПустаяСтрока(ТекущийРежим.Сообщение), "", Символы.ПС + ТекущийРежим.Сообщение), 30);
			
			ЗавершитьРаботуСистемы(Истина, Истина);
			
		ИначеЕсли ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалПредупреждения Тогда
			
			Предупреждение("Работа системы будет завершена в " + ВремяНачалаБлокировки + "." + ?(ПустаяСтрока(ТекущийРежим.Сообщение), "", Символы.ПС + ТекущийРежим.Сообщение), 30);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КонтрольРежимаЗавершенияРаботыПользователей

// Завершение работы только при условии удачной установки монопольного режима работы
// Вызывается, только при запуске системы от имени администратора с параметром запуска "ЗавершитьРаботуПользователей"
//
Процедура ЗавершитьРаботуПользователей() Экспорт

	Соединения = ПолучитьСоединенияИнформационнойБазы();
	
	Если Соединения.Количество() = 1 Тогда
		// Отключены все пользователи, кроме текущего сеанса
		// В последнюю очередь завершается сеанс, запущенный с параметром "ЗавершитьРаботуПользователей".
		// Такой порядок отключений необходим для обновления конфигурации с помощью пакетного файла
		
		ЗавершитьРаботуСистемы(Ложь);
		
		Возврат;
	КонецЕсли; 
	
	// Получим текущее значение параметров блокировки
	ТекущийРежим = ПолучитьБлокировкуУстановкиСоединений();
	БлокировкаУстановлена = ТекущийРежим.Установлена;
	ВремяНачалаБлокировки = ТекущийРежим.Начало;
		
	ИнтервалОтключения    = - 5 * 60;
	
	ТекущийМомент = ТекущаяДата();
	
	Если БлокировкаУстановлена и
		(НЕ ЗначениеЗаполнено(ВремяНачалаБлокировки) 
			ИЛИ ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалОтключения) Тогда
			
		// через 5 минут после начала блокировки сеансы всех пользователей должны быть отключены	
		// если этого не произошло пробуем принудительно прервать соединение в клиент-серверном режиме работы.
		ОтключитьОбработчикОжидания("ЗавершитьРаботуПользователей");
		
		ПодстрокиСтрокиСоединения  = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаСоединенияИнформационнойБазы(),";");
		
		Если ПодстрокиСтрокиСоединения.Количество()> 1 и Лев(ПодстрокиСтрокиСоединения[0], 5) = "Srvr=" и Лев(ПодстрокиСтрокиСоединения[1], 4) = "Ref=" Тогда
			
			ИмяСервера = Сред(ПодстрокиСтрокиСоединения[0],7, СтрДлина(ПодстрокиСтрокиСоединения[0]) - 7);
			ИмяИБ      = Сред(ПодстрокиСтрокиСоединения[1],6, СтрДлина(ПодстрокиСтрокиСоединения[1]) - 6);
			
			Попытка
				connector = Новый COMОбъект("V8.ComConnector");
				server = connector.ConnectServer(ИмяСервера);
				
				ПодстрокиПараметровЗапуска = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";");
				Если ПодстрокиПараметровЗапуска.Количество() > 2 и Врег(ПодстрокиПараметровЗапуска[0]) = Врег("ЗавершитьРаботуПользователей") Тогда
					server.AddAuthentication(ПодстрокиПараметровЗапуска[1], ПодстрокиПараметровЗапуска[2]);
				КонецЕсли;
				
				ibDesc = server.CreateInfoBaseInfo();
				ibDesc.Name = ИмяИБ;
				connections = server.GetIBConnections(ibDesc);
				
				Для каждого connection Из connections Цикл
					
					Если Не ИмяПользователя() = connection.userName Тогда
						server.Disconnect(connection);
					КонецЕсли; 
					
				КонецЦикла;
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки; 
			
		КонецЕсли;
		
		Соединения = ПолучитьСоединенияИнформационнойБазы();
		Если Соединения.Количество() > 1 Тогда
			
			Сообщение = "Не удалось завершить работу пользователей:";
			
			Для каждого Соединение Из Соединения Цикл
				Если Не Соединение.НомерСоединения = НомерСоединенияИнформационнойБазы() Тогда
					Сообщение = Сообщение + Символы.ПС + " - " + Соединение;
				КонецЕсли;
			КонецЦикла; 
			
			Сообщить(Сообщение, СтатусСообщения.Внимание);
			ЗаписьЖурналаРегистрации("Завершение работы пользователей", УровеньЖурналаРегистрации.Предупреждение, , , Сообщение);
		Иначе
			Сообщить("Завершение работы пользователей выполнено успешно.", СтатусСообщения.Информация);
		КонецЕсли;
		
		ЗавершитьРаботуСистемы(Ложь);
		
		Возврат;		
	КонецЕсли;
	
КонецПроцедуры // ЗавершитьРаботуПользователей

// Проверяет в конфигурации ИБ наличие изменений появившихся после старта сеанса
//
Процедура ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ() Экспорт

	// Если в конфигурации после старта текущего сеанса что-то изменилось
	Если КонфигурацияБазыДанныхИзмененаДинамически() Тогда


		// Завершим проверку обновления
		ЗавершитьПроверкуДинамическогоОбновленияИБ();

		// Спросим пользователя о его желании перезапустить сеанс
		ТекстВопроса = "В конфигурацию ИБ внесены изменения." + Символы.ПС +
						"Для работы с ними рекомендуется перезапустить программу." + Символы.ПС +
						"Перезапустить?";
		РезультатВопроса = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);

		// Если пользователь не хочет перезапускать сеанс
		Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
			// Запустим проверку обновления опять
			НачатьПроверкуДинамическогоОбновленияИБ();
			Возврат;
		КонецЕсли;

	
		// Попробуем перезапустить
		ПерезапуститьСеансРаботыСПрограммой();


	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА ДИНАМИЧЕСКОГО ОБНОВЛЕНИЯ
//

// Начинает проверку динамического обновления конфигурации ИБ
//
Процедура НачатьПроверкуДинамическогоОбновленияИБ()Экспорт
	
	// проверка дин. обновления конфигурации каждые 20 мин.
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ", 20 * 60);

КонецПроцедуры

// Завершает проверку динамического обновления конфигурации ИБ
//
Процедура ЗавершитьПроверкуДинамическогоОбновленияИБ()Экспорт

	// Отключим соответствующий обработчик ожидания
	ОтключитьОбработчикОжидания("ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ");

КонецПроцедуры
                                                             
#КонецЕсли

// Функция инициализирует глобальную переменную глУчетнаяПолитикаПоПерсоналу.
// Переменная содержит структуру.
//
// Параметры:
//  Нет.
//
Функция ЗаполнениеУчетнойПолитикиПоПерсоналу()Экспорт
	
	УчетнаяПолитикаПоПерсоналу = Новый Структура("РасчетЗарплатыПоОтветственным,ПоказыватьТабельныеНомераВДокументах,ПоддерживатьНесколькоСхемМотивации,УпрощенныйУчетВзаиморасчетов ", Ложь, Ложь, Ложь);
	
	Выборка = РегистрыСведений.УчетнаяПолитикаПоПерсоналу.Выбрать();
	Пока Выборка.Следующий() Цикл
		УчетнаяПолитикаПоПерсоналу = Новый Структура("РасчетЗарплатыПоОтветственным,ПоказыватьТабельныеНомераВДокументах,ПоддерживатьНесколькоСхемМотивации,УпрощенныйУчетВзаиморасчетов", Выборка.РасчетЗарплатыПоОтветственным, Выборка.ПоказыватьТабельныеНомераВДокументах, Выборка.ПоддерживатьНесколькоСхемМотивации,Выборка.УпрощенныйУчетВзаиморасчетов);
	КонецЦикла;
    
    Возврат УчетнаяПолитикаПоПерсоналу;	
КонецФункции

//// Процедура инициализирует глобальную переменную глУчетнаяПолитикаПоПерсоналуОрганизации.
////// Переменная содержит соответствие, где организация является ключом, а поддержка 
////// поддержка внутреннего совместительства значением.
//////
////// Параметры:
//////  Нет.
//////
//Функция ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации() Экспорт
//	
//	УчетнаяПолитикаПоПерсоналуОрганизации = Новый Соответствие;
//	
//	Если ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
//	
//		Запрос = Новый Запрос(
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	Организации.Ссылка КАК Организация,
//		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПроверкаПериодовНачисления, ЛОЖЬ) КАК ПроверкаПериодовНачисления,
//		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПоддержкаВнутреннегоСовместительства, ЛОЖЬ) КАК ПоддержкаВнутреннегоСовместительства,
//		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ЕдиныйНумераторКадровыхДокументов, ЛОЖЬ) КАК ЕдиныйНумераторКадровыхДокументов,
//		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПроверкаШтатногоРасписания, ЛОЖЬ) КАК ПроверкаШтатногоРасписания,
//		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.РасчетЗарплатыОрганизацииПоОтветственным, ЛОЖЬ) КАК РасчетЗарплатыОрганизацииПоОтветственным,
//		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ИспользуютсяНачисленияВВалюте, ЛОЖЬ) КАК ИспользуютсяНачисленияВВалюте,
//		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.УпрощенныйУчетНДФЛ, ЛОЖЬ) КАК УпрощенныйУчетНДФЛ,
//		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПоказыватьТабельныеНомераВДокументах, ЛОЖЬ) КАК ПоказыватьТабельныеНомераВДокументах,
//		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.УчетЗадолженностиПоМесяцам, ИСТИНА) КАК УчетЗадолженностиПоМесяцам,
//		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ВыплатаАвансаПроцентом, ЛОЖЬ) КАК ВыплатаАвансаПроцентом
//		|ИЗ
//		|	Справочник.Организации КАК Организации
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
//		|		ПО (ВЫБОР
//		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
//		|					ТОГДА Организации.Ссылка
//		|				ИНАЧЕ Организации.ГоловнаяОрганизация
//		|			КОНЕЦ = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация)");
//		
//		УчетнаяПолитикаПоПерсоналуОрганизации.Вставить(Справочники.Организации.ПустаяСсылка(), 
//			Новый Структура(
//			"ПоддержкаВнутреннегоСовместительства,
//			|ЕдиныйНумераторКадровыхДокументов,
//			|ПроверкаШтатногоРасписания,
//			|РасчетЗарплатыОрганизацииПоОтветственным,
//			|УпрощенныйУчетНДФЛ,
//			|ИспользуютсяНачисленияВВалюте,
//			|ПоказыватьТабельныеНомераВДокументах,
//			|УчетЗадолженностиПоМесяцам,
//			|ПроверкаПериодовНачисления,
//			|ВыплатаАвансаПроцентом",
//			Ложь,
//			Ложь,
//			Ложь,
//			Ложь,
//			Ложь,
//			Ложь,
//			Ложь,
//			Истина,
//			Ложь,
//			Ложь));
//		Выборка = Запрос.Выполнить().Выбрать();
//		Пока Выборка.Следующий() Цикл
//			УчетнаяПолитикаПоПерсоналуОрганизации.Вставить(Выборка.Организация, 
//				Новый Структура(
//				"ПоддержкаВнутреннегоСовместительства,
//				|ЕдиныйНумераторКадровыхДокументов,
//				|ПроверкаШтатногоРасписания,
//				|РасчетЗарплатыОрганизацииПоОтветственным,
//				|УпрощенныйУчетНДФЛ,
//				|ИспользуютсяНачисленияВВалюте,
//				|ПоказыватьТабельныеНомераВДокументах,
//				|УчетЗадолженностиПоМесяцам,
//				|ПроверкаПериодовНачисления,
//				|ВыплатаАвансаПроцентом",
//				Выборка.ПоддержкаВнутреннегоСовместительства,
//				Выборка.ЕдиныйНумераторКадровыхДокументов,
//				Выборка.ПроверкаШтатногоРасписания,
//				Выборка.РасчетЗарплатыОрганизацииПоОтветственным,
//				Выборка.УпрощенныйУчетНДФЛ,
//				Выборка.ИспользуютсяНачисленияВВалюте,
//				Выборка.ПоказыватьТабельныеНомераВДокументах,
//				Выборка.УчетЗадолженностиПоМесяцам,
//				Выборка.ПроверкаПериодовНачисления,
//				Выборка.ВыплатаАвансаПроцентом));
//		КонецЦикла;
//	
//	КонецЕсли;
//	
//	Возврат УчетнаяПолитикаПоПерсоналуОрганизации;
//	
//КонецФункции // ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации

//// Процедура инициализирует глобальную переменную глУчетнаяПолитикаПоНалоговомуУчету.
////
//// Параметры:
////  Нет.
////
//Функция ЗаполнениеУчетнойПолитикиНалоговомуУчету() Экспорт
//	
//	Если ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
//	
//		УчетнаяПолитикаПоНалоговомуУчету = Новый Соответствие;
//		
//		Запрос = Новый Запрос(
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	ЕСТЬNULL(КОНЕЦПЕРИОДА(УчетнаяПолитикаНалоговыйУчет.Период, МЕСЯЦ), &парамНачальнаяДата) КАК Период,
//		|	Организации.Ссылка КАК Организация,
//		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.УСН, ЛОЖЬ) КАК УСН,
//		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомЕНВД, ЛОЖЬ) КАК ОрганизацияЯвляетсяПлательщикомЕНВД,
//		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ОбъектНалогообложенияУСН, ЗНАЧЕНИЕ(Перечисление.ОбъектыНалогообложенияПоУСН.ПустаяСсылка)) КАК ОбъектНалогообложенияУСН,
//		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС, ЛОЖЬ) КАК УплачиватьДобровольныеВзносыВФСС,
//		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаРасходовПоНалогамСФОТВНалоговомУчете.ПустаяСсылка)) КАК ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете
//		|ИЗ
//		|	Справочник.Организации КАК Организации
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
//		|		ПО (ВЫБОР
//		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
//		|					ТОГДА Организации.Ссылка
//		|				ИНАЧЕ Организации.ГоловнаяОрганизация
//		|			КОНЕЦ = УчетнаяПолитикаНалоговыйУчет.Организация)
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Период");
//		
//		парамПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
//		парамНачальнаяДата = '00010101';
//		парамПустойОбъектНалогообложенияПоУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка();
//		парамПустойВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете = Перечисления.ВариантыУчетаРасходовПоНалогамСФОТВНалоговомУчете.ПустаяСсылка();
//		Запрос.УстановитьПараметр("парамНачальнаяДата",парамНачальнаяДата);		
//		
//		УчетнаяПолитикаПоНалоговомуУчетуСоответствие = Новый Соответствие;
//		УчетнаяПолитикаПоНалоговомуУчетуСоответствие.Вставить(парамПустаяОрганизация,Новый Структура("УСН,ОбъектНалогообложенияУСН,ОрганизацияЯвляетсяПлательщикомЕНВД,УплачиватьДобровольныеВзносыВФСС,ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете",Ложь,парамПустойОбъектНалогообложенияПоУСН,Ложь,Ложь,парамПустойВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете));
//		УчетнаяПолитикаПоНалоговомуУчету.Вставить(парамНачальнаяДата,УчетнаяПолитикаПоНалоговомуУчетуСоответствие);
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//											  
//		Пока Выборка.СледующийПоЗначениюПоля("Период") Цикл
//							
//			Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
//				УчетнаяПолитикаПоНалоговомуУчетуСоответствие.Вставить(Выборка.Организация,Новый Структура("УСН,ОбъектНалогообложенияУСН,ОрганизацияЯвляетсяПлательщикомЕНВД,УплачиватьДобровольныеВзносыВФСС,ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете",Выборка.УСН,Выборка.ОбъектНалогообложенияУСН,Выборка.ОрганизацияЯвляетсяПлательщикомЕНВД,Выборка.УплачиватьДобровольныеВзносыВФСС,Выборка.ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете));
//			КонецЦикла;
//			УчетнаяПолитикаПоНалоговомуУчету.Вставить(?(ЗначениеЗаполнено(Выборка.Период),КонецМесяца(Выборка.Период),Выборка.Период),УчетнаяПолитикаПоНалоговомуУчетуСоответствие);
//			УчетнаяПолитикаПоНалоговомуУчетуСоответствие = Новый Соответствие;
//			УчетнаяПолитикаПоНалоговомуУчетуСоответствие.Вставить(парамПустаяОрганизация,Новый Структура("УСН,ОбъектНалогообложенияУСН,ОрганизацияЯвляетсяПлательщикомЕНВД,УплачиватьДобровольныеВзносыВФСС,ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете",Ложь,парамПустойОбъектНалогообложенияПоУСН,Ложь,Ложь,парамПустойВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете));
//					
//		КонецЦикла;
//		
//	КонецЕсли; 
//	
//	Возврат УчетнаяПолитикаПоНалоговомуУчету;
//КонецФункции// ЗаполнениеУчетнойПолитикиНалоговомуУчету


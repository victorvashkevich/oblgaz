////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры, функции

Функция ПропуститьНастройкуПоДополнительномуУсловию(Настройка) Экспорт
	
	Если Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделение Тогда
		//для пользователей, не использующий управленческий учет, 
		//скрываем настройку режима рабочего стола
		Возврат НЕ глЗначениеПеременной("глИспользоватьУправленческийУчетЗарплаты");
	ИначеЕсли Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
		
КонецФункции	

Процедура ДополнитьСоответствиеРолей(СоответствиеРолей) Экспорт
	
	МассивРолейИсполнителей = Новый Массив;
	МассивРолейИсполнителей.Добавить(Справочники.РолиИсполнителей.Расчетчик);
	СоответствиеРолей.Вставить(Метаданные.Роли.РасчетчикРегламентированнойЗарплаты, МассивРолейИсполнителей);
	
	МассивРолейИсполнителей = Новый Массив;
	МассивРолейИсполнителей.Добавить(Справочники.РолиИсполнителей.Кадровик);
	СоответствиеРолей.Вставить(Метаданные.Роли.КадровикРегламентированныхДанных, МассивРолейИсполнителей);

КонецПроцедуры

Процедура ПолучитьНастройкуПоУмолчаниюДополнительно(СтрокаНастройки, Пользователь) Экспорт
	
	// установим режим рабочего стола в зависимости от доступности управленческих ролей
	Если СтрокаНастройки.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ВидРабочегоСтола Тогда
		СтрокаНастройки.Значение = РабочийСтолПереопределяемый.ВидРабочегоСтола(Пользователь.Код);
	ИначеЕсли СтрокаНастройки.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.СтартоваяФорма Тогда
		СтрокаНастройки.Значение = Перечисления.ТипыСтартовойФормыПользователя.НеЗадана;
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьЗначенияПоУмолчанию(ЗначенияПоУмолчанию) Экспорт
	
	ЗначенияПоУмолчанию.Вставить(ПланыВидовХарактеристик.НастройкиПользователей.ВидРабочегоСтола, Перечисления.ВидыРабочегоСтола.ЗарплатаКадрыРегламентированныйУчет);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Дополнительные команды в форме списка

#Если ТолстыйКлиентОбычноеПриложение Тогда

Процедура ПередОткрытиемФормыСпискаДополнительно(Форма, СтруктураДляДополнительныхДействий, ДополнительныеДействия = Неопределено) Экспорт
	
	// Механизм Проверка работы системы //
	ДобавитьКнопкиПроверкиРаботыСистемы(Форма, СтруктураДляДополнительныхДействий, ДополнительныеДействия);
	
	ДобавитьКнопкиСозданияПользователей(Форма, СтруктураДляДополнительныхДействий, ДополнительныеДействия);
	
КонецПроцедуры

Процедура ПриЗакрытииФормыСпискаДополнительно(Форма, СтруктураДляДополнительныхДействий) Экспорт
	
	// Если форму закрываем до того, как запустился сеанс проверки работы системы,
	// необходимо вернуть исходный пароль пользователя
	Если ПравоДоступа("Администрирование", Метаданные) Тогда
		ВернутьИсходныйПарольПользователяПроверки(Форма, СтруктураДляДополнительныхДействий);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДополнительныеДействия(Форма, СтруктураДляДополнительныхДействий, ИмяДействия) Экспорт
	
	ВыполнитьДействияПроверкиРаботыСистемы(Форма, СтруктураДляДополнительныхДействий, ИмяДействия);
	
	ВыполнитьДействияСозданияПользователей(Форма, СтруктураДляДополнительныхДействий, ИмяДействия);
	
КонецПроцедуры // ВыполнитьДополнительныеДействия

// Обработчик ожидания каждые 5 секунд проверяет текущие сеансы ИБ для того, чтобы определить момент,
// когда проверочный сеанс будет запущен. После определения, обработчик возвращает исходный пароль пользователя
//
Процедура ОбработкаОжиданияДополнительногоДействия1(Форма, СтруктураДляДополнительныхДействий) Экспорт
	
	СеансыИнформационнойБазы	= ПолучитьСеансыИнформационнойБазы();
	ПользовательПроверки		= ПользователиИнформационнойБазы.НайтиПоИмени(СтруктураДляДополнительныхДействий.КодПользователя);
	
	Для Каждого СеансИБ Из СеансыИнформационнойБазы Цикл
		Если ПользовательИлиКомпьютерНеСовпадают(СеансИБ, ПользовательПроверки) Или СтруктураДляДополнительныхДействий.СписокСеансовПользователяПроверки.Найти(СеансИБ.НомерСеанса) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВернутьИсходныйПарольПользователяПроверки(Форма, СтруктураДляДополнительныхДействий);
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик ожидания срабатывает через 2 минуты после запуска системы и возвращает исходный пароль пользователя
// Обработчик предназначен для возврата пароля в случае возникновения внештатных ситуаций при запуске системы
//
Процедура ОбработкаОжиданияДополнительногоДействия2(Форма, СтруктураДляДополнительныхДействий) Экспорт
	
	ВернутьИсходныйПарольПользователяПроверки(Форма, СтруктураДляДополнительныхДействий);
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ Проверка работы системы

#Если ТолстыйКлиентОбычноеПриложение Тогда

Процедура ДобавитьКнопкиПроверкиРаботыСистемы(Форма, СтруктураДляДополнительныхДействий, ДополнительныеДействия)
	
	Если ПравоДоступа("Администрирование", Метаданные) Тогда
		КнопкиКоманднойПанели = Форма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки;
		
		МестоВставки = КнопкиКоманднойПанели.Индекс(КнопкиКоманднойПанели.Найти("Разделитель5")) + 1;
		
		// Подменю с командами
		Подменю = КнопкиКоманднойПанели.Вставить(МестоВставки, "ПроверитьРаботуСистемы", ТипКнопкиКоманднойПанели.Подменю, "Проверить работу системы");
		Подменю.Подсказка = "Проверить работу системы под выбранным пользователем";
		
		// Разделитель
		КнопкиКоманднойПанели.Вставить(МестоВставки + 1, "РазделительПроверитьРаботуСистемы", ТипКнопкиКоманднойПанели.Разделитель);
		
		// Команды
		Кнопка = Подменю.Кнопки.Добавить("ТонкийКлиент", ТипКнопкиКоманднойПанели.Действие, "Тонкий клиент", ДополнительныеДействия);
		Кнопка.Картинка = БиблиотекаКартинок.ПроверкаРаботыСистемыТонкийКлиент;
		
		Кнопка = Подменю.Кнопки.Добавить("ВебКлиент", ТипКнопкиКоманднойПанели.Действие, "Веб клиент", ДополнительныеДействия);
		Кнопка.Картинка = БиблиотекаКартинок.ПроверкаРаботыСистемыВебКлиент;
		
		Кнопка = Подменю.Кнопки.Добавить("ТолстыйКлиент", ТипКнопкиКоманднойПанели.Действие, "Толстый клиент (обычное приложение)", ДополнительныеДействия);
		Кнопка.Картинка = БиблиотекаКартинок.ПроверкаРаботыСистемыТолстыйКлиентОбычноеПриложение;
		
		Подменю.Кнопки.Добавить("РазделительПроверитьРаботуСистемыНастройки", ТипКнопкиКоманднойПанели.Разделитель);
		
		Кнопка = Подменю.Кнопки.Добавить("НастройкиЗапуска", ТипКнопкиКоманднойПанели.Действие, "Настройки запуска", ДополнительныеДействия);
		
		СтруктураДляДополнительныхДействий = Новый Структура(
			"ПроверяетсяРаботаСистемы,
			|КодПользователя,
			|СписокСеансовПользователяПроверки,
			|АутентификацияСтандартная,
			|СохраняемоеЗначениеПароля",
			Ложь,
			Неопределено,
			Новый Массив,
			"",
			"");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДействияПроверкиРаботыСистемы(Форма, СтруктураДляДополнительныхДействий, ИмяДействия)
	
	Если ИмяДействия = "ТонкийКлиент" Тогда
		Если СтруктураДляДополнительныхДействий.ПроверяетсяРаботаСистемы Тогда
			Предупреждение("Осуществляется запуск системы для проверки работы пользователя! Дождитесь окончания запуска системы для запуска другого сеанса проверки!");
			Возврат;
		КонецЕсли;
		
		ДанныеСтроки = Форма.ЭлементыФормы.СправочникСписок.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураДляДополнительныхДействий.ПроверяетсяРаботаСистемы = Истина;
		СтруктураДляДополнительныхДействий.КодПользователя				= СокрЛП(ДанныеСтроки.Код);
		
		ПользовательПроверки = ПользователиИнформационнойБазы.НайтиПоИмени(СтруктураДляДополнительныхДействий.КодПользователя);
		
		ВременныйПароль = ПодготовитьПользователяКПроверкеИСгенерироватьПароль(СтруктураДляДополнительныхДействий);
		
		Если ПользовательПроверки = Неопределено Тогда
			Предупреждение("Пользователь """ + ДанныеСтроки.Наименование + " "" не зарегистрирован как пользователь ИБ. Проверка запуска под этим пользователем невозможна!");
			СтруктураДляДополнительныхДействий.ПроверяетсяРаботаСистемы = Ложь;
			Возврат;
		КонецЕсли;
		
		НастройкиПроверки = ПрочитатьНастройки();
		ЗапуститьПриложение("""" + КаталогПрограммы() + "1cv8c.exe"" /IBConnectionString""" + СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), """", """""") + """ /N""" + СокрЛП(ДанныеСтроки.Код) + """ /P" + ВременныйПароль + " " + НастройкиПроверки.ПараметрыЗапуска);
		
		Форма.ПодключитьОбработчикОжидания("ОбработкаОжиданияДополнительногоДействия1", 5);
		Форма.ПодключитьОбработчикОжидания("ОбработкаОжиданияДополнительногоДействия2", 120, Истина);
		
	ИначеЕсли ИмяДействия = "ВебКлиент" Тогда
		Если СтруктураДляДополнительныхДействий.ПроверяетсяРаботаСистемы Тогда
			Предупреждение("Осуществляется запуск системы для проверки работы пользователя! Дождитесь окончания запуска системы для запуска другого сеанса проверки!");
			Возврат;
		КонецЕсли;
		
		ДанныеСтроки = Форма.ЭлементыФормы.СправочникСписок.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		НастройкиПроверки = ПрочитатьНастройки();
		Если НастройкиПроверки.АдресВебСервера = Неопределено Или ПустаяСтрока(НастройкиПроверки.АдресВебСервера) Тогда
			Если Не ОткрытьНастройкуПараметровЗапуска(Форма, НастройкиПроверки) Тогда
				Возврат;
			КонецЕсли;
			ЗаписатьНастройки(НастройкиПроверки);
		КонецЕсли;
		
		Если ПустаяСтрока(НастройкиПроверки.АдресВебСервера) Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураДляДополнительныхДействий.ПроверяетсяРаботаСистемы = Истина;
		СтруктураДляДополнительныхДействий.КодПользователя				= СокрЛП(ДанныеСтроки.Код);
		
		ПользовательПроверки = ПользователиИнформационнойБазы.НайтиПоИмени(СтруктураДляДополнительныхДействий.КодПользователя);
		
		ВременныйПароль = ПодготовитьПользователяКПроверкеИСгенерироватьПароль(СтруктураДляДополнительныхДействий);
		
		Если ПользовательПроверки = Неопределено Тогда
			Предупреждение("Пользователь """ + ДанныеСтроки.Наименование + " "" не зарегистрирован как пользователь ИБ. Проверка запуска под этим пользователем невозможна!");
			СтруктураДляДополнительныхДействий.ПроверяетсяРаботаСистемы = Ложь;
			Возврат;
		КонецЕсли;
		
		ЗапуститьПриложение(НастройкиПроверки.АдресВебСервера + "?N=" + СтрЗаменить(СокрЛП(ДанныеСтроки.Код), " ", "%20") + "&P=" + ВременныйПароль + НастройкиПроверки.ПараметрыЗапускаВебКлиента);
		
		Форма.ПодключитьОбработчикОжидания("ОбработкаОжиданияДополнительногоДействия1", 5);
		Форма.ПодключитьОбработчикОжидания("ОбработкаОжиданияДополнительногоДействия2", 120, Истина);
		
	ИначеЕсли ИмяДействия = "ТолстыйКлиент" Тогда
		Если СтруктураДляДополнительныхДействий.ПроверяетсяРаботаСистемы Тогда
			Предупреждение("Осуществляется запуск системы для проверки работы пользователя! Дождитесь окончания запуска системы для запуска другого сеанса проверки!");
			Возврат;
		КонецЕсли;
		
		ДанныеСтроки = Форма.ЭлементыФормы.СправочникСписок.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураДляДополнительныхДействий.ПроверяетсяРаботаСистемы	= Истина;
		СтруктураДляДополнительныхДействий.КодПользователя				= СокрЛП(ДанныеСтроки.Код);
		
		ПользовательПроверки = ПользователиИнформационнойБазы.НайтиПоИмени(СтруктураДляДополнительныхДействий.КодПользователя);
		
		ВременныйПароль = ПодготовитьПользователяКПроверкеИСгенерироватьПароль(СтруктураДляДополнительныхДействий);
		
		Если ПользовательПроверки = Неопределено Тогда
			Предупреждение("Пользователь """ + ДанныеСтроки.Наименование + " "" не зарегистрирован как пользователь ИБ. Проверка запуска под этим пользователем невозможна!");
			СтруктураДляДополнительныхДействий.ПроверяетсяРаботаСистемы = Ложь;
		КонецЕсли;
		
		Если Не СтруктураДляДополнительныхДействий.ПроверяетсяРаботаСистемы Тогда
			Возврат;
		КонецЕсли;
			
		НастройкиПроверки = ПрочитатьНастройки();
		ЗапуститьПриложение("""" + КаталогПрограммы() + "1cv8.exe"" enterprise /IBConnectionString""" + СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), """", """""") + """ /N""" + СокрЛП(ДанныеСтроки.Код) + """ /P" + ВременныйПароль + " " + НастройкиПроверки.ПараметрыЗапуска);
		
		Форма.ПодключитьОбработчикОжидания("ОбработкаОжиданияДополнительногоДействия1", 5);
		Форма.ПодключитьОбработчикОжидания("ОбработкаОжиданияДополнительногоДействия2", 120, Истина);
		
	ИначеЕсли ИмяДействия = "НастройкиЗапуска" Тогда
		НастройкиПроверки = ПрочитатьНастройки();
		Если Не ОткрытьНастройкуПараметровЗапуска(Форма, НастройкиПроверки) Тогда
			Возврат;
		КонецЕсли;
		
		ЗаписатьНастройки(НастройкиПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет сеанс ИБ на совпадение компьютера текущему, а пользователя на совпадение с пользователем проверки
//
Функция ПользовательИлиКомпьютерНеСовпадают(СеансИБ, ПользовательПроверки)
	
	СписокКлиентов = Новый Массив;
	СписокКлиентов.Добавить("1CV8");
	СписокКлиентов.Добавить("1CV8C");
	СписокКлиентов.Добавить("WebClient");
	
	Возврат ПустаяСтрока(СеансИБ.ИмяКомпьютера)
		Или СеансИБ.Пользователь = Неопределено
		Или СписокКлиентов.Найти(СеансИБ.ИмяПриложения) = Неопределено
		Или СеансИБ.Пользователь.УникальныйИдентификатор <> ПользовательПроверки.УникальныйИдентификатор
		Или СеансИБ.ИмяКомпьютера <> ИмяКомпьютера();
	
КонецФункции

// Функция сохраняет параметры пользователя, необходимые для проверки работы системы и генерирует временный пароль
//
Функция ПодготовитьПользователяКПроверкеИСгенерироватьПароль(СтруктураДляДополнительныхДействий)
	
	ПользовательПроверки = ПользователиИнформационнойБазы.НайтиПоИмени(СтруктураДляДополнительныхДействий.КодПользователя);
	
	Если ПользовательПроверки = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	// Запомним номера уже запущенных сеансов пользователя, чтобы отследить запуск нового сеанса
	СтруктураДляДополнительныхДействий.СписокСеансовПользователяПроверки.Очистить();
	СеансыИнформационнойБазы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого СеансИБ Из СеансыИнформационнойБазы Цикл
		Если ПользовательИлиКомпьютерНеСовпадают(СеансИБ, ПользовательПроверки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДляДополнительныхДействий.СписокСеансовПользователяПроверки.Добавить(СеансИБ.НомерСеанса);
	КонецЦикла;
	
	СтруктураДляДополнительныхДействий.АутентификацияСтандартная = ПользовательПроверки.АутентификацияСтандартная;
	СтруктураДляДополнительныхДействий.СохраняемоеЗначениеПароля = ПользовательПроверки.СохраняемоеЗначениеПароля;
	
	ВременныйПароль = Строка(Новый УникальныйИдентификатор);
	
	ПользовательПроверки.Пароль						= ВременныйПароль;
	ПользовательПроверки.АутентификацияСтандартная	= Истина;
	ПользовательПроверки.Записать();
	
	Возврат ВременныйПароль;
	
КонецФункции

// Процедура возвращает исходный пароль пользователя, если он был установлен
//
Процедура ВернутьИсходныйПарольПользователяПроверки(Форма, СтруктураДляДополнительныхДействий)
	
	Если Не СтруктураДляДополнительныхДействий.ПроверяетсяРаботаСистемы Или Не ЗначениеЗаполнено(СтруктураДляДополнительныхДействий.КодПользователя) Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательПроверки = ПользователиИнформационнойБазы.НайтиПоИмени(СтруктураДляДополнительныхДействий.КодПользователя);
	
	Если ПользовательПроверки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДляДополнительныхДействий.ПроверяетсяРаботаСистемы = Ложь;
	
	Форма.ОтключитьОбработчикОжидания("ОбработкаОжиданияДополнительногоДействия1");
	Форма.ОтключитьОбработчикОжидания("ОбработкаОжиданияДополнительногоДействия2");
	
	// Возвращаем первоначальное значение пароля пользователя
	ПользовательПроверки.СохраняемоеЗначениеПароля = СтруктураДляДополнительныхДействий.СохраняемоеЗначениеПароля;
	ПользовательПроверки.АутентификацияСтандартная = СтруктураДляДополнительныхДействий.АутентификацияСтандартная;
	ПользовательПроверки.Записать();
	
КонецПроцедуры

// Функция открывает диалог настройки параметров запуска и возвращает истину, если настройки изменены
//
Функция ОткрытьНастройкуПараметровЗапуска(Форма, НастройкиПроверки)
	
	Результат = ОткрытьФормуМодально("Справочник.Пользователи.Форма.ФормаНастройкиЗапуска", НастройкиПроверки, Форма);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(НастройкиПроверки, Результат);
	КонецЕсли;
	
	Возврат Не Результат = Неопределено;
	
КонецФункции

// Функция возвращает сохраненные настройки проверки работы системы
//
Функция ПрочитатьНастройки()
	
	Возврат Новый Структура("АдресВебСервера, ПараметрыЗапускаВебКлиента, ПараметрыЗапуска",
		ВосстановитьЗначение("ПроверкаРаботыСистемыАдресВебСервера"),
		ВосстановитьЗначение("ПроверкаРаботыСистемыПараметрыЗапускаВебКлиента"),
		ВосстановитьЗначение("ПроверкаРаботыСистемыПараметрыЗапуска"));
	
КонецФункции

// Процедура сохраняет настройки проверки работы системы
//
Процедура ЗаписатьНастройки(НастройкиПроверки)
	
	СохранитьЗначение("ПроверкаРаботыСистемыАдресВебСервера",				НастройкиПроверки.АдресВебСервера);
	СохранитьЗначение("ПроверкаРаботыСистемыПараметрыЗапускаВебКлиента",	НастройкиПроверки.ПараметрыЗапускаВебКлиента);
	СохранитьЗначение("ПроверкаРаботыСистемыПараметрыЗапуска",				НастройкиПроверки.ПараметрыЗапуска);
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// Создание пользователей

#Если ТолстыйКлиентОбычноеПриложение Тогда

Процедура ДобавитьКнопкиСозданияПользователей(Форма, СтруктураДляДополнительныхДействий, ДополнительныеДействия)
	
	Если ПравоДоступа("Администрирование", Метаданные) Тогда
		
		МестаВставкиКнопок = Новый Соответствие;
		МестаВставкиКнопок.Вставить(Форма.ЭлементыФормы.КоманднаяПанельПользователейИБ.Кнопки, "НайтиЭлементСправочника");
		МестаВставкиКнопок.Вставить(Форма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки, "Действие6");
		МестаВставкиКнопок.Вставить(Форма.ЭлементыФормы.КоманднаяПанельВыпадающееМенюПользователейИБ.Кнопки, "Удалить");
		
		Для Каждого КлючИЗначение Из МестаВставкиКнопок Цикл
			
			КнопкиКоманднойПанели = КлючИЗначение.Ключ;
			
			МестоВставки = КнопкиКоманднойПанели.Индекс(КнопкиКоманднойПанели.Найти(КлючИЗначение.Значение)) + 1;
			
			// Разделитель
			КнопкиКоманднойПанели.Вставить(МестоВставки, РаботаСДиалогамиКлиент.УникальноеИмяЭлементаФормы(), ТипКнопкиКоманднойПанели.Разделитель);
			
			// Команды
			Кнопка = КнопкиКоманднойПанели.Вставить(МестоВставки + 1, "ДобавитьСотрудников", ТипКнопкиКоманднойПанели.Действие, НСтр("ru = 'Создать пользователей для сотрудников'"), ДополнительныеДействия);
			Кнопка.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
			Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
			Кнопка.Подсказка = НСтр("ru = 'Создание пользователей для сотрудников компании'");
			Кнопка.Пояснение = НСтр("ru = 'Создание пользователей для сотрудников компании'");
		КонецЦикла;
		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДействияСозданияПользователей(Форма, СтруктураДляДополнительныхДействий, ИмяДействия)
	
	Если ИмяДействия = "ДобавитьСотрудников" Тогда
		//ОткрытьФорму("ОбщаяФорма.СозданиеПользователей", , Форма);
		ОткрытьФорму("ОбщаяФорма.СозданиеПользователей");
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// Ограничение времени работы пользователей

// Функция определяет время завершения сеанса пользователя, 
// в случае если такое ограничение определено в настройках его группы
//
// Определяем настройки времени сеанса из группы пользователя 
// с минимальными значениями ограничений:
//	- если есть хотя бы одна группа без ограничения времени сеанса - не ограничиваем время
// 	- время сеанса определяем как максимально возможное из групп пользователей
//
// Возвращаемое значение:
//  - дата и время завершения сеанса, если ограничение установлено, 
//  - пустая дата в противном случае
//
Функция ВремяЗавершенияСеансаПриОграничении() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МИНИМУМ(ЕСТЬNULL(НастройкиГруппПользователей.ОграничиватьВремяСеанса, ЛОЖЬ)) КАК ОграничиватьВремяСеанса,
	|	МАКСИМУМ(ЕСТЬNULL(НастройкиГруппПользователей.МаксимальноеВремяСеанса, 0)) КАК МаксимальноеВремяСеанса
	|ИЗ
	|	Справочник.ГруппыПользователей.ПользователиГруппы КАК ПользователиГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиГруппПользователей КАК НастройкиГруппПользователей
	|		ПО ПользователиГруппы.Ссылка = НастройкиГруппПользователей.ГруппаПользователей
	|ГДЕ
	|	ПользователиГруппы.Пользователь = &ТекущийПользователь");
	
	Запрос.УстановитьПараметр("ТекущийПользователь", глЗначениеПеременной("глТекущийПользователь"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.ОграничиватьВремяСеанса) И Выборка.ОграничиватьВремяСеанса Тогда
		Возврат ТекущаяДатаСеанса() + Выборка.МаксимальноеВремяСеанса * 60;
	КонецЕсли;
	
	Возврат Дата(1, 1, 1);
	
КонецФункции


// Функция возвращает номер строки в поле табличного документа
//  для вывода События по его дате (начала или конца)
//
// Параметры
//  Часы - Строка, часы даты
//  Минуты - Строка, минуты даты
//  Дата - Дата, текущее значение даты для определения
//  Начало - Булево, признак начала или окончания периода
//  ДатаСравнения - Дата, дата с которой сравнивается значение исходной даты
//
// Возвращаемое значение:
//   Число - номер строки в поле табличного документа
//
Функция ВозвратитьНомерСтроки(Часы, Минуты, Дата, Начало, ДатаСравнения) Экспорт
	
	Если ПустаяСтрока(Часы) Тогда
		Часы = 0;
	Иначе
		Часы = Число(Часы);
	КонецЕсли; 
	
	Если ПустаяСтрока(Минуты) Тогда
		Минуты = 0;
	Иначе
		Минуты = Число(Минуты);
	КонецЕсли; 
	
	Если Начало Тогда
		Если Дата < НачалоДня(ДатаСравнения) Тогда
			Возврат 1;
		Иначе
			Если Минуты < 30 Тогда
				Если Минуты = 0 Тогда
					Если Часы = 0 Тогда
						Возврат 1;
					Иначе
						Возврат (Часы * 2 + 1);
					КонецЕсли; 
				Иначе
					Возврат (Часы * 2 + 1);
				КонецЕсли; 
			Иначе
				Если Часы = 23 Тогда
					Возврат 48;
				Иначе
					Возврат (Часы * 2 + 2);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
	Иначе
		Если Дата > КонецДня(ДатаСравнения) Тогда
			Возврат 48;
		Иначе
			Если Минуты = 0 Тогда
				Если Часы = 0 Тогда
					Возврат 1;
				Иначе
					Возврат (Часы * 2);
				КонецЕсли; 
			ИначеЕсли Минуты <= 30 Тогда
				Возврат (Часы * 2 + 1);
			Иначе
				Если Часы = 23 Тогда
					Возврат 48;
				Иначе
					Возврат (Часы * 2 + 2);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
КонецФункции

// Процедура выполняется при проведении или отмене проведения документа Событие
//  и переписывает записи регитра сведений СобытияКалендаряПользователя.
Процедура РаспределитьСобытияДня(ДатаРаспределения,Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СобытияКалендаряПользователяОбобщенные.Событие КАК Событие,
	|	СобытияКалендаряПользователяОбобщенные.НомерНачальнойСтроки КАК НомерНачальнойСтроки,
	|	СобытияКалендаряПользователяОбобщенные.НомерКонечнойСтроки КАК НомерКонечнойСтроки
	|ИЗ
	|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователяОбобщенные
	|ГДЕ
	|	СобытияКалендаряПользователяОбобщенные.Дата = &ВыбДата
	|	И
	|	СобытияКалендаряПользователяОбобщенные.Пользователь = &ВыбПользователь
	|";
	
	Запрос.УстановитьПараметр("ВыбДата", ДатаРаспределения);
	Запрос.УстановитьПараметр("ВыбПользователь", Пользователь);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	НомерСтрокиНачало = 0;
	НомерСтрокиКонец  = 0;
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		
		КопияТаблицыЗапроса = ТаблицаЗапроса.Скопировать();
		
		КопияТаблицыЗапроса.Сортировать("НомерНачальнойСтроки ВОЗР");
		НомерСтрокиНачало = КопияТаблицыЗапроса[0].НомерНачальнойСтроки;
		
		КопияТаблицыЗапроса.Сортировать("НомерКонечнойСтроки УБЫВ");
		НомерСтрокиКонец = КопияТаблицыЗапроса[0].НомерКонечнойСтроки;
		
	КонецЕсли; 
	
	СписокЗначенийВремен = Новый СписокЗначений;
	
	Если НомерСтрокиНачало <> 0 И НомерСтрокиКонец <> 0 Тогда
		
		Для а=1 По 48 Цикл
			НовыйСписок = Новый СписокЗначений;
			СписокЗначенийВремен.Добавить(НовыйСписок);
		КонецЦикла;
		
		Для а=НомерСтрокиНачало По НомерСтрокиКонец Цикл
			
			НовыйСписок = СписокЗначенийВремен[а-1].Значение;
			
			ИндексСтрокиТаблицы = 0;
			Пока 1 = 1 Цикл
				
				Если ИндексСтрокиТаблицы > ТаблицаЗапроса.Количество() - 1 Тогда
					Прервать;
				КонецЕсли; 
				
				СтрокаТаблицы = ТаблицаЗапроса[ИндексСтрокиТаблицы];
				
				Если СтрокаТаблицы.НомерНачальнойСтроки <= а И СтрокаТаблицы.НомерКонечнойСтроки >= а Тогда
					
					ЕстьСвободноеМесто = Ложь;
					
					Для каждого ЭлементНовогоСписка Из НовыйСписок Цикл
						
						Если ЭлементНовогоСписка.Значение = Неопределено Тогда
							
							ЭлементНовогоСписка.Значение = СтрокаТаблицы.Событие;
							
							ЕстьСвободноеМесто = Истина;
							ИндексСписка = НовыйСписок.Индекс(ЭлементНовогоСписка);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если НЕ ЕстьСвободноеМесто Тогда
						
						Если НовыйСписок.Количество() >= 18 Тогда
							Прервать;
						КонецЕсли; 
						
						ВновьВведенныйЭлемент = НовыйСписок.Добавить(СтрокаТаблицы.Событие);
						ИндексСписка = НовыйСписок.Индекс(ВновьВведенныйЭлемент);
						
					КонецЕсли;
					
					Если а <= СписокЗначенийВремен.Количество() Тогда
						
						ИндексТекущегоСписка = а - 1 + 1;
						Для б = а По СтрокаТаблицы.НомерКонечнойСтроки - 1 Цикл
							
							ТекущийСписок = СписокЗначенийВремен[б].Значение;
							
							Если ТекущийСписок.Количество() < (ИндексСписка + 1) Тогда
								
								Для с = (ТекущийСписок.Количество() + 1) По (ИндексСписка + 1) Цикл
									
									ТекущийСписок.Добавить(Неопределено);
									
								КонецЦикла;
								
							КонецЕсли;
							
							ТекущийСписок[ИндексСписка].Значение = СтрокаТаблицы.Событие;
							
						КонецЦикла; 
						
					КонецЕсли; 
					
					ТаблицаЗапроса.Удалить(СтрокаТаблицы);
					Продолжить;
					
				КонецЕсли;
				
				ИндексСтрокиТаблицы = ИндексСтрокиТаблицы + 1;
				
			КонецЦикла; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
	// Очистим значения предидущего распределния
	НаборЗаписейРегистра = РегистрыСведений.СобытияКалендаряПользователя.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Пользователь.Значение      = Пользователь;
	НаборЗаписейРегистра.Отбор.Пользователь.Использование = Истина;
	НаборЗаписейРегистра.Отбор.Дата.Значение              = ДатаРаспределения;
	НаборЗаписейРегистра.Отбор.Дата.Использование         = Истина;
	НаборЗаписейРегистра.Очистить();
	
	// Проведем распределение заново
	Для каждого СтрокаВремени Из СписокЗначенийВремен Цикл
		
		СписокТекущегоВремени = СтрокаВремени.Значение;
		
		Если ТипЗнч(СписокТекущегоВремени) = Тип("СписокЗначений") И СписокТекущегоВремени.Количество() > 0 Тогда
			
			Для каждого ЭлементДокумента Из СписокТекущегоВремени Цикл
				
				НоваяЗаписьРегистра = НаборЗаписейРегистра.Добавить();
				НоваяЗаписьРегистра.Событие = ЭлементДокумента.Значение;
				НоваяЗаписьРегистра.НомерСтрокиТаблицы = СписокЗначенийВремен.Индекс(СтрокаВремени) + 1;
				НоваяЗаписьРегистра.Дата = ДатаРаспределения;
				НоваяЗаписьРегистра.Пользователь = Пользователь;
				НоваяЗаписьРегистра.ПорядковыйНомерВДне = СписокТекущегоВремени.Индекс(ЭлементДокумента) + 1;
				
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
	НаборЗаписейРегистра.Записать();
	
	Если ТипЗнч(КопияТаблицыЗапроса) = Тип("ТаблицаЗначений") Тогда
		
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.ЗагрузитьЗначения(КопияТаблицыЗапроса.ВыгрузитьКолонку("Событие"));
		
		Для каждого ДокументСписка Из СписокДокументов Цикл
			
			НаборЗаписейРегистра = РегистрыСведений.СобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
			НаборЗаписейРегистра.Отбор.Пользователь.Значение      = Пользователь;
			НаборЗаписейРегистра.Отбор.Пользователь.Использование = Истина;
			НаборЗаписейРегистра.Отбор.Дата.Значение              = ДатаРаспределения;
			НаборЗаписейРегистра.Отбор.Дата.Использование         = Истина;
			НаборЗаписейРегистра.Отбор.Событие.Значение           = ДокументСписка.Значение;
			НаборЗаписейРегистра.Отбор.Событие.Использование      = Истина;
			НаборЗаписейРегистра.Прочитать();
			
			Для каждого ЗаписьРегистра Из НаборЗаписейРегистра Цикл
				КоличествоДокументов = 0;
				Для б = ЗаписьРегистра.НомерНачальнойСтроки - 1 По ЗаписьРегистра.НомерКонечнойСтроки - 1 Цикл
					ТекСписок = СписокЗначенийВремен[б].Значение;
					Если ТекСписок.Количество() > КоличествоДокументов Тогда
						КоличествоДокументов = ТекСписок.Количество();
					КонецЕсли; 
				КонецЦикла;
				ЗаписьРегистра.КоличествоОдновременныхДокументов = КоличествоДокументов;
				
			КонецЦикла;
			
			НаборЗаписейРегистра.Записать(Истина);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура выполняет запись в регистр сведений
//
Процедура ВвестиЗаписьВРегистр(Дата, НомерНачальнойСтроки, НомерКонечнойСтроки, НаборЗаписейРегистра, Ссылка, ДатаНачала, ДатаОкончания)
	
	НоваяЗапись = НаборЗаписейРегистра.Добавить();
	
	НоваяЗапись.Событие              = Ссылка;
	НоваяЗапись.Дата                 = Дата;
	НоваяЗапись.НомерНачальнойСтроки = НомерНачальнойСтроки;
	НоваяЗапись.НомерКонечнойСтроки  = НомерКонечнойСтроки;
	НоваяЗапись.Пользователь         = Справочники.Пользователи.ПустаяСсылка();
	
	НоваяЗапись.ДатаНачалаСобытия    = ДатаНачала;
	НоваяЗапись.ДатаКонцаСобытия     = ДатаОкончания;
	
КонецПроцедуры

// Процедура отражает занятость помещений в регистрах сведений для календаря пользователя
//
Процедура ОтразитьЗанятостьПомещений(Ссылка,ДатаНачала,ДатаОкончания,мСтараяДатаНачалаСобытия,мСтараяДатаОкончанияСобытия) Экспорт
	
	НаборЗаписей = РегистрыСведений.СобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Событие.Значение = Ссылка;
	НаборЗаписей.Отбор.Событие.Использование = Истина;
	НаборЗаписей.Отбор.Пользователь.Значение = Справочники.Пользователи.ПустаяСсылка();
	НаборЗаписей.Отбор.Пользователь.Использование = Истина;
	НаборЗаписей.Очистить();
	
	НачальнаяСтрока = ВозвратитьНомерСтроки(Формат(ДатаНачала,"ДФ=Ч"), Формат(ДатаНачала,"ДФ=м"), ДатаНачала, Истина, ДатаНачала);
	Если Формат(ДатаНачала,"ДФ=Ч") = Формат(ДатаОкончания,"ДФ=Ч") И Формат(ДатаНачала,"ДФ=м") = Формат(ДатаОкончания,"ДФ=м") Тогда
		КонечнаяСтрока  = НачальнаяСтрока;
	Иначе
		КонечнаяСтрока  = ВозвратитьНомерСтроки(Формат(ДатаОкончания,"ДФ=Ч"), Формат(ДатаОкончания,"ДФ=м"), ДатаОкончания, Ложь, ДатаОкончания);
	КонецЕсли; 
	
	Если НачалоДня(ДатаНачала) <> НачалоДня(ДатаОкончания) Тогда
		
		КоличествоИнтерваловМеждуДнями = Цел((НачалоДня(ДатаОкончания) - КонецДня(ДатаНачала) + 1)/(60*60*24));
		
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			
			ДатаИнтервала = НачалоДня(ДатаНачала) + (60*60*24)*а;
			
			ВвестиЗаписьВРегистр(ДатаИнтервала, 1, 48, НаборЗаписей, Ссылка, ДатаНачала, ДатаОкончания);
			
		КонецЦикла;
		
		ВвестиЗаписьВРегистр(НачалоДня(ДатаНачала), НачальнаяСтрока, 48, НаборЗаписей, Ссылка, ДатаНачала, ДатаОкончания);
		ВвестиЗаписьВРегистр(НачалоДня(ДатаОкончания), 1, КонечнаяСтрока, НаборЗаписей, Ссылка, ДатаНачала, ДатаОкончания);
		
	Иначе
		
		ВвестиЗаписьВРегистр(НачалоДня(ДатаНачала), НачальнаяСтрока, КонечнаяСтрока, НаборЗаписей, Ссылка, ДатаНачала, ДатаОкончания);
		
	КонецЕсли;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
	СписокПерераспределенныхДат = Новый СписокЗначений;
	
	Если НачалоДня(мСтараяДатаНачалаСобытия) <> НачалоДня(ДатаНачала) ИЛИ НачалоДня(мСтараяДатаОкончанияСобытия) <> НачалоДня(ДатаОкончания) Тогда
		КоличествоИнтерваловМеждуДнями = Цел((КонецДня(мСтараяДатаОкончанияСобытия) + 1 - НачалоДня(мСтараяДатаНачалаСобытия))/(60*60*24));
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			
			ДатаИнтервала = НачалоДня(НачалоДня(мСтараяДатаНачалаСобытия) + (60*60*24)*а - 1);
			СписокПерераспределенныхДат.Добавить(ДатаИнтервала);
			
			РаспределитьСобытияДня(ДатаИнтервала);
			
		КонецЦикла; 
	КонецЕсли; 
	
	Если НачалоДня(ДатаНачала) <> НачалоДня(ДатаОкончания) Тогда
		
		КоличествоИнтерваловМеждуДнями = Цел((НачалоДня(ДатаОкончания) - КонецДня(ДатаНачала) + 1)/(60*60*24));
		
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			
			ДатаИнтервала = НачалоДня(ДатаНачала) + (60*60*24)*а;
			Если СписокПерераспределенныхДат.НайтиПоЗначению(ДатаИнтервала) = Неопределено Тогда
				
				РаспределитьСобытияДня(ДатаИнтервала);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(ДатаНачала)) = Неопределено Тогда
			
			РаспределитьСобытияДня(НачалоДня(ДатаНачала));
			
			
		КонецЕсли; 
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(ДатаОкончания)) = Неопределено Тогда
			
			РаспределитьСобытияДня(НачалоДня(ДатаОкончания));
			
			
		КонецЕсли; 
		
	Иначе
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(ДатаНачала)) = Неопределено Тогда
			
			РаспределитьСобытияДня(НачалоДня(ДатаНачала));
			
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

// Функция определяет начало и окончание рабочего дня пользователя, по его графику работы
//
// Параметры
//  Пользователь - СправочникСсылка.Пользователи, пользователь по которому определяются
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ОпределитьНачалоИОкончениеРабочегоДняПользователя(Пользователь, РабочаяДата) Экспорт
	
	ДатаНачала      = '00010101000000';
	ДатаОкончания   = '00010101235959';
	НайденныйГрафик = Неопределено;
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Если НЕ Пользователь.ФизЛицо.Пустая() Тогда
			Запрос = новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ГрафикРаботы КАК Значение, 
			|ГрафикРаботы.ВидГрафика КАК ВидГрафика 
			|ИЗ РегистрСведений.Работники.СрезПоследних(&РабочаяДата, ФизЛицо=&ФизЛицо)";
			Запрос.УстановитьПараметр("РабочаяДата",РабочаяДата); 
			Запрос.УстановитьПараметр("ФизЛицо",Пользователь.ФизЛицо); 
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйГрафик = Выборка;
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если НайденныйГрафик = Неопределено Тогда
			СписокПолей = новый СписокЗначений;
			СписокПолей.Добавить("ВидГрафика");
			НайденныйГрафик = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюСДополнительнымиПолями(Пользователь, "ГрафикРаботы", СписокПолей);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если НайденныйГрафик <> Неопределено И ТипЗнч(НайденныйГрафик.Значение) = Тип("СправочникСсылка.ГрафикиРаботы") И НЕ НайденныйГрафик.Значение.Пустая() Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ВыбГрафик", НайденныйГрафик.Значение);
		Запрос.УстановитьПараметр("ВыбДата", НачалоДня(РабочаяДата));
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГрафикиРаботыПоСменам.Смена КАК Смена,
		|	ГрафикиРаботыПоСменам.Часы  КАК Часы
		|ИЗ
		|	РегистрСведений.ГрафикиРаботыПоСменам КАК ГрафикиРаботыПоСменам
		|ГДЕ
		|	ГрафикиРаботыПоСменам.Дата = &ВыбДата
		|	И
		|	ГрафикиРаботыПоСменам.ГрафикРаботы = &ВыбГрафик
		|";
		
		Если НайденныйГрафик.ВидГрафика = Перечисления.ВидыРабочихГрафиков.Сменный Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|	И
			|	ГрафикиРаботыПоСменам.Смена = &ВыбГрафик
			|";
			
		КонецЕсли; 
		
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаЗапроса.Количество() > 0 Тогда
			
			Если НайденныйГрафик.ВидГрафика <> Перечисления.ВидыРабочихГрафиков.Сменный Тогда
				
				КолВоЧасов = ТаблицаЗапроса[0].Часы;
				
				Если КолВоЧасов <> 0 Тогда
					
					ВремяНачала           = Неопределено;
					ВремяОкончания        = Неопределено;
					ОбщееКоличествоСекунд = 0;
					
					//проверка есть ли доступ к табличной части ПериодыСмены
					Попытка
					
						Для каждого ПериодыСмены Из НайденныйГрафик.ПериодыСмены Цикл
							
							ОбщееКоличествоСекунд = ОбщееКоличествоСекунд + (ПериодыСмены.ВремяОкончания - ПериодыСмены.ВремяНачала);
							
							Если ВремяНачала = Неопределено И ВремяОкончания = Неопределено Тогда
								ВремяНачала = ПериодыСмены.ВремяНачала;
								ВремяОкончания = ПериодыСмены.ВремяОкончания;
								Продолжить;
							КонецЕсли; 
							
							Если ПериодыСмены.ВремяНачала < ВремяНачала Тогда
								ВремяНачала = ПериодыСмены.ВремяНачала;
							КонецЕсли; 
							
							Если ПериодыСмены.ВремяОкончания > ВремяОкончания Тогда
								ВремяОкончания = ПериодыСмены.ВремяОкончания;
							КонецЕсли; 
							
						КонецЦикла; 
					Исключение
					КонецПопытки;
					
					Если ВремяНачала <> Неопределено И ВремяОкончания <> Неопределено Тогда
						Если ОбщееКоличествоСекунд <> КолВоЧасов*60*60 Тогда
							ВремяОкончания = ВремяОкончания - (ОбщееКоличествоСекунд - КолВоЧасов*60*60);
						КонецЕсли; 
						ДатаНачала      = ВремяНачала;
						ДатаОкончания   = ВремяОкончания;
					КонецЕсли; 
					
				КонецЕсли; 
				
			Иначе
				
				ВремяНачала           = Неопределено;
				ВремяОкончания        = Неопределено;
				ОбщееКоличествоСекунд = 0;
				КолВоЧасов            = ТаблицаЗапроса[0].Часы;
				
				Если КолВоЧасов <> 0 Тогда
					
					Для каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
						
						КолВоЧасов = КолВоЧасов + СтрокаТаблицыЗапроса.Часы;
						
						Если ТипЗнч(СтрокаТаблицыЗапроса.Смена) = Тип("СправочникСсылка.Смены") Тогда
							
							Для каждого ПериодыСмены Из СтрокаТаблицыЗапроса.Смена.ПериодыСмены Цикл
								
								ОбщееКоличествоСекунд = ОбщееКоличествоСекунд + (ПериодыСмены.ВремяОкончания - ПериодыСмены.ВремяНачала);
								
								Если ВремяНачала = Неопределено И ВремяОкончания = Неопределено Тогда
									ВремяНачала = ПериодыСмены.ВремяНачала;
									ВремяОкончания = ПериодыСмены.ВремяОкончания;
									Продолжить;
								КонецЕсли; 
								
								Если ПериодыСмены.ВремяНачала < ВремяНачала Тогда
									ВремяНачала = ПериодыСмены.ВремяНачала;
								КонецЕсли; 
								
								Если ПериодыСмены.ВремяОкончания > ВремяОкончания Тогда
									ВремяОкончания = ПериодыСмены.ВремяОкончания;
								КонецЕсли; 
								
							КонецЦикла; 
							
						КонецЕсли; 
						
					КонецЦикла; 
					
					Если ВремяНачала <> Неопределено И ВремяОкончания <> Неопределено Тогда
						Если ОбщееКоличествоСекунд <> КолВоЧасов*60*60 Тогда
							ВремяОкончания = ВремяОкончания - (ОбщееКоличествоСекунд - КолВоЧасов*60*60);
						КонецЕсли; 
						ДатаНачала      = ВремяНачала;
						ДатаОкончания   = ВремяОкончания;
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	СтруктураВозврата = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания);
	
	Возврат СтруктураВозврата;
	
КонецФункции // ОпределитьНачалоИОкончениеРабочегоДняПользователя()

// Процедура показывает формы Напоминаний.
// 
//  Параметры
//   ТаблицаНапоминаний - ТаблицаЗначений, с Напоминаниями
//
Процедура ОбработкаСпискаНапоминаний(ТаблицаНапоминаний)

	ФормаНапоминания = ПолучитьОбщуюФорму("ФормаНапоминания",,"Уникум");
	ФормаНапоминания.ОбновитьТаблицуНапоминаний(ТаблицаНапоминаний);

	Если ФормаНапоминания.Открыта() Тогда
		ФормаНапоминания.Активизировать();
	Иначе
		ФормаНапоминания.Открыть();
	КонецЕсли;

КонецПроцедуры // ОбработкаСпискаНапоминаний()

// Процедура проверяет Напоминания из регистра.
// 
//  Параметры
//   ТаблицаНапоминаний - ТаблицаЗначений, с Напоминаниями
//
Процедура ПроверитьНапоминанияПользователя(ВыбПользователь) Экспорт

	РезультирующаяТаблица = Новый ТаблицаЗначений;
	РезультирующаяТаблица.Колонки.Добавить("ДокументНапоминания");
	РезультирующаяТаблица.Колонки.Добавить("Пользователь");
	РезультирующаяТаблица.Колонки.Добавить("ДатаНапоминания");
	РезультирующаяТаблица.Колонки.Добавить("Тема");
	РезультирующаяТаблица.Колонки.Добавить("КонтактноеЛицо");
	РезультирующаяТаблица.Колонки.Добавить("ТекстНапоминания");
	РезультирующаяТаблица.Колонки.Добавить("ФлагДеньРождения");
		
	Запрос = Новый Запрос;

	ДатаСреза = ТекущаяДата() + Константы.ИнтервалПроверкиНапоминанийВСекундах.Получить();
	
	Запрос.УстановитьПараметр("ДатаСреза"       , ДатаСреза);
	Запрос.УстановитьПараметр("ВыбПользователь" , ВыбПользователь);
	Запрос.УстановитьПараметр("СостояниеСобытия", Перечисления.СостоянияСобытий.Запланировано);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Событие.Ссылка           КАК ДокументНапоминания,
	|	Событие.Ответственный    КАК Пользователь,
	|	Событие.ВремяНапоминания КАК ДатаНапоминания,
	|	Событие.ВидСобытия       КАК Тема,
	|	Событие.КонтактноеЛицо   КАК КонтактноеЛицо,
	|	Событие.ОписаниеСобытия  КАК ОписаниеСобытия,
	|	Событие.НачалоСобытия    КАК НачалоСобытия,
	|	Событие.ОкончаниеСобытия КАК ОкончаниеСобытия
	|ИЗ
	|	Документ.Событие КАК Событие
	|	
	|ГДЕ 
	|	Событие.НапомнитьОСобытии = Истина
	|	И Событие.ВремяНапоминания <= &ДатаСреза
	|	И Событие.Ответственный = &ВыбПользователь
	|	И Событие.Проведен
	|	И Событие.СостояниеСобытия = &СостояниеСобытия
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		ТаблицаЗапроса = РезультатЗапроса.Выгрузить();

		Для каждого Напоминание Из ТаблицаЗапроса Цикл

			Если ЗначениеЗаполнено(Напоминание.ДокументНапоминания) Тогда

				Док = Напоминание.ДокументНапоминания;

				СтрокаРезТаблицы = РезультирующаяТаблица.Добавить();
				СтрокаРезТаблицы.ДокументНапоминания = Напоминание.ДокументНапоминания;
				СтрокаРезТаблицы.Пользователь        = ВыбПользователь;
				СтрокаРезТаблицы.ДатаНапоминания     = Напоминание.ДатаНапоминания;
				СтрокаРезТаблицы.КонтактноеЛицо      = Напоминание.КонтактноеЛицо;
				
				СтрокаРезТаблицы.ТекстНапоминания = Строка(Док);
				Если ТипЗнч(Док) = Тип("ДокументСсылка.Событие") И СтрЧислоВхождений(Док.ОписаниеСобытия, "День рождения") > 0 Тогда
					СтрокаРезТаблицы.ФлагДеньРождения = Истина;
				Иначе
					СтрокаРезТаблицы.ФлагДеньРождения = Ложь;
				КонецЕсли; 
				
				Если ТипЗнч(Док) = Тип("ДокументСсылка.Событие") Тогда
					СтрокаРезТаблицы.Тема = Строка(Напоминание.Тема);
					СтрокаРезТаблицы.ТекстНапоминания = Напоминание.ОписаниеСобытия + Символы.ПС + "с " + ?(ЗначениеЗаполнено(Напоминание.НачалоСобытия),Формат(Напоминание.НачалоСобытия, "ДФ='dd.MM.yyyy (HH:mm)'"), "Не задано") + " по " + ?(ЗначениеЗаполнено(Напоминание.ОкончаниеСобытия),Формат(Напоминание.ОкончаниеСобытия, "ДФ='dd.MM.yyyy (HH:mm)'"), "Не задано") + Символы.ПС + СтрокаРезТаблицы.ТекстНапоминания;
				КонецЕсли;

			КонецЕсли;
		КонецЦикла; 

	КонецЕсли;

	ОбработкаСпискаНапоминаний(РезультирующаяТаблица);

КонецПроцедуры // ПроверитьНапоминанияПользователя()

// Функция возвращает 20 основных тем событий
//
Функция ПолучитьСписокОсновныхТем() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 20
	|	Событие.ОписаниеСобытия,
	|	КОЛИЧЕСТВО(Событие.Ссылка) КАК Количество
	|ИЗ
	|	Документ.Событие КАК Событие
	|ГДЕ
	|	Событие.ОписаниеСобытия <> &ПустаяСтрока
	|
	|СГРУППИРОВАТЬ ПО
	|	Событие.ОписаниеСобытия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ";
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОписаниеСобытия");
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Массив);
	
	Возврат Список;
	
КонецФункции

// Функция возвращает дату с округлением до 30 минут
// для дат событий
Функция ОкруглитьВремяСобытия(ПереданнаяДата) Экспорт
	
	ОкругленнаяДата = ПереданнаяДата;
	
	СекундВДате = Секунда(ОкругленнаяДата);
	ОкругленнаяДата = ОкругленнаяДата - СекундВДате;
	
	МинутВДате  = Минута(ОкругленнаяДата);
	Если МинутВДате>29 Тогда
		ОкругленнаяДата = ОкругленнаяДата - ((МинутВДате-30)*60);
	Иначе
		ОкругленнаяДата = ОкругленнаяДата - МинутВДате*60;
	КонецЕсли;
	
	Возврат ОкругленнаяДата;
	
КонецФункции

// Функция возвращает 20 основных тем электронных писем
//
Функция ПолучитьСписокОсновныхПредметовПисем() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 20
	|	ЭлектронноеПисьмо.ПредметКонтакта,
	|	КОЛИЧЕСТВО(ЭлектронноеПисьмо.Ссылка) КАК Количество
	|ИЗ
	|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
	|ГДЕ
	|	ЭлектронноеПисьмо.ПредметКонтакта <> &ПустаяСтрока
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭлектронноеПисьмо.ПредметКонтакта
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ";
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПредметКонтакта");
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Массив);
	
	Возврат Список;
	
КонецФункции

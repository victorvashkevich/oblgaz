Функция ПолучитьЗначениеПеременной(ИмяПараметра) Экспорт
	
	НайденноеЗначение = Неопределено;
	Если ВРег(ИмяПараметра) = ВРег("глУчетнаяПолитикаПоПерсоналу") Тогда
		НайденноеЗначение = ЗаполнениеУчетнойПолитикиПоПерсоналу();
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глИспользоватьУправленческийУчетЗарплаты") Тогда
		НайденноеЗначение = Константы.ИспользоватьУправленческийУчетЗарплаты.Получить();
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глЕстьВалютныеПоказатели") Тогда
		НайденноеЗначение = ОпределитьНаличиеВалютныхПоказателей();
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глПрограммаБухгалтерскогоУчета") Тогда 
		НайденноеЗначение = Константы.ПрограммаБухгалтерскогоУчета.Получить();
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глВалютаУправленческогоУчета") Тогда
		НайденноеЗначение = Константы.ВалютаУправленческогоУчета.Получить();
   	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глПрограммаБухгалтерскогоУчетаОрганизации") Тогда 
		НайденноеЗначение = ЗаполнитьПеременнуюПрограммаБухгалтерскогоУчетаОрганизации();
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глСводныйРежимВыгрузкиПроводок") Тогда 
		НайденноеЗначение = ЗаполнитьПеременнуюСводныйРежимВыгрузкиПроводок();
	КонецЕсли;
	
	Возврат НайденноеЗначение;
	
КонецФункции

// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Определяет есть ли денежные показатели с незаполненной валютой
//
Функция ОпределитьНаличиеВалютныхПоказателей()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоказателиСхемМотивации.Ссылка
	|ИЗ
	|	Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
	|ГДЕ
	|	ПоказателиСхемМотивации.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
	|	И ПоказателиСхемМотивации.Валюта = Значение(Справочник.Валюты.ПустаяСсылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

Функция ПолучитьВидСубконтоПоУмолчаниюДляСправочникаСубконто() Экспорт
	
	
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВидыСубконтоХозрасчетные.Ссылка КАК Ссылка,
	|	ВидыСубконтоХозрасчетные.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.ВидыСубконтоХозрасчетные КАК ВидыСубконтоХозрасчетные
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|");
	
	ТипСубконто = Тип("СправочникСсылка.Субконто");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипЗначения.СодержитТип(ТипСубконто) Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	
КонецФункции // ПолучитьВидСубконтоПоУмолчаниюДляСправочникаСубконто()


Функция ЭтоЮрЛицо(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.ЮрФизЛицо
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Не Выборка.Следующий() Или Выборка.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо;
	
КонецФункции // ЭтоЮрЛицо()

// Проверяет правильность заполнения ОГРН
// Возвращаемое значение:
//   Булево
//
Функция ОГРНСоответствуетТребованиям(ОГРН, ЮрФизЛицо, ТекстСообщенияОшибки) Экспорт
	
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Если СтрДлина(СокрЛП(ОГРН)) <> 15 Тогда
			ТекстСообщенияОшибки = ТекстСообщенияОшибки + "ОГРНИП указан неверно! ОГРНИП должен состоять из 15 цифр!" + Символы.ПС;
			Возврат Ложь;
		КонецЕсли;
		Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ОГРН) Тогда
			ТекстСообщенияОшибки = ТекстСообщенияОшибки + "ОГРНИП указан неверно! ОГРН должен состоять только из цифр!" + Символы.ПС;
			Возврат Ложь;
		КонецЕсли;
		ОГРН14 = Число(Лев(Строка(ОГРН), 14));
		Если Прав(Формат(ОГРН14 % 13, "ЧН=0; ЧГ=0"), 1) <> Прав(ОГРН, 1) Тогда
			ТекстСообщенияОшибки = ТекстСообщенияОшибки + "Возможно, ОГРНИП указан неверно (контрольный разряд не совпадает с вычисленным)!" + Символы.ПС;
		КонецЕсли;
	Иначе
		Если СтрДлина(ОГРН) <> 13 Тогда
			ТекстСообщенияОшибки = ТекстСообщенияОшибки + "ОГРН " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации") + " указан неверно! ОГРН должен состоять из 13 цифр!" + Символы.ПС;
			Возврат Ложь;
		КонецЕсли;
		Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ОГРН) Тогда
			ТекстСообщенияОшибки = ТекстСообщенияОшибки + "ОГРН " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации") + " указан неверно! ОГРН должен состоять только из цифр!" + Символы.ПС;
			Возврат Ложь;
		КонецЕсли;
		ОГРН12 = Число(Лев(Строка(ОГРН), 12));
		Если Прав(Формат(ОГРН12 % 11, "ЧН=0; ЧГ=0"), 1) <> Прав(ОГРН, 1) Тогда
			ТекстСообщенияОшибки = ТекстСообщенияОшибки + "Возможно, ОГРН " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации") + " указан неверно (контрольный разряд не совпадает с вычисленным)!" + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ОГРНСоответствуетТребованиям()

// Проверяет правильность заполнения КПП
//
// Возвращаемое значение:
//   Булево
//
Функция КППОрганизацииСоответствуетТребованиям(КПП, ТекстСообщенияОшибки) Экспорт
	
	Если НЕ ПустаяСтрока(КПП) И СтрДлина(КПП) <> 9 Тогда
		ТекстСообщенияОшибки = ТекстСообщенияОшибки +  "КПП " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации") + " задан неверно!" + Символы.ПС;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // КППОрганизацииСоответствуетТребованиям()

#Если Клиент Тогда
	
Процедура УстановитьИнтерфейс() Экспорт
	
	// если пользователю не задан интерфейс - установим интерфейс по умолчанию
	// с учетом использования управленческого учета
	ИнтерфейсПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().ОсновнойИнтерфейс;
	Если ИнтерфейсПользователя = НеОпределено ИЛИ ИнтерфейсПользователя = Метаданные.Интерфейсы.Полный Тогда
		
		//РаботаСДиалогамиДополнительный.ПереключитьПолныйИнтерфейс();
		
	КонецЕсли;
	
КонецПроцедуры
	
#КонецЕсли

Функция ВернутьСписокТиповСсылокДляФормированияФИО() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	МассивТипов.Добавить(Тип("СправочникСсылка.СотрудникиОрганизаций"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

Функция ВернутьСписокТиповОбъектовДляФормированияФИО() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникОбъект.ФизическиеЛица"));
	МассивТипов.Добавить(Тип("СправочникОбъект.СотрудникиОрганизаций"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ЗАПОЛНЕНИЯ ГЛОБАЛЬНЫХ ПЕРЕМЕННЫХ

// Процедура инициализирует глобальную переменную УчетнаяПолитикаОтраженияЗарплатыВУчете.
//
// Параметры:
//  Нет.
//
//Функция ЗаполнениеУчетнойПолитикиНалоговомуУчету() Экспорт
//	
//	УчетнаяПолитикаПоНалоговомуУчету = Новый Соответствие;
//	
//	Если ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
//	
//		УчетнаяПолитикаПоНалоговомуУчетуСоответствие = Новый Соответствие;
//		УчетнаяПолитикаПоНалоговомуУчетуСоответствие.Вставить(Справочники.Организации.ПустаяСсылка(),Новый Структура("УСН,ОбъектНалогообложенияУСН,ОрганизацияЯвляетсяПлательщикомЕНВД,УплачиватьДобровольныеВзносыВФСС,ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете, ТочностьИсчисленияЕСН, ТочностьИсчисленияПФР, ПорядокРасчетаВычетаФБ",Ложь,Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка(),Ложь,Ложь,Перечисления.ВариантыУчетаРасходовПоНалогамСФОТВНалоговомУчете.ПустаяСсылка(),Перечисления.ПорядкиОкругленияЕСН.Точно,Перечисления.ПорядкиОкругленияЕСН.Точно, Перечисления.ПорядкиИсчисленияВычетаПоЕСН.ПоСуммеСтраховыхВзносов));
//		УчетнаяПолитикаПоНалоговомуУчету.Вставить('00010101',УчетнаяПолитикаПоНалоговомуУчетуСоответствие);
//		
//		Запрос = Новый Запрос;
//		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	МАКСИМУМ(ПериодыУчетнойПолитики.Период) КАК КонечныйПериод,
//		|	МИНИМУМ(ПериодыУчетнойПолитики.Период) КАК НачальныйПериод
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		УчетнаяПолитикаНалоговыйУчет.Период КАК Период
//		|	ИЗ
//		|		РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		УчетнаяПолитикаПоЕСН.Период
//		|	ИЗ
//		|		РегистрСведений.УчетнаяПолитикаПоЕСН КАК УчетнаяПолитикаПоЕСН) КАК ПериодыУчетнойПолитики";
//		Выборка = Запрос.Выполнить().Выбрать();
//		ПериодыТекст =
//		"ВЫБРАТЬ
//		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Период
//		|ПОМЕСТИТЬ ВТПериоды";
//		Если Выборка.Следующий() Тогда
//			НачальныйПериод = Выборка.НачальныйПериод;
//			КонечныйПериод = Выборка.КонечныйПериод;
//			Если ЗначениеЗаполнено(НачальныйПериод) Тогда
//				// конец месяца налогового периода
//				КонецМесяца = КонецМесяца(НачальныйПериод);
//				// первый месяц
//				ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")КАК Период ПОМЕСТИТЬ ВТПериоды";
//				// прибавим остальные месяцы
//				Пока КонецМесяца < КонечныйПериод Цикл
//					КонецМесяца = КонецМесяца(КонецМесяца+1);
//					ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
//				КонецЦикла;
//			КонецЕсли;
//		КонецЕсли;
//		Запрос.Текст = ПериодыТекст;
//		Запрос.Выполнить();
//		
//		Запрос.Текст = 
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	ЕСТЬNULL(ВТПериоды.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Период,
//		|	Организации.Ссылка КАК Организация,
//		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.УСН, ЛОЖЬ) КАК УСН,
//		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомЕНВД, ЛОЖЬ) КАК ОрганизацияЯвляетсяПлательщикомЕНВД,
//		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ОбъектНалогообложенияУСН, ЗНАЧЕНИЕ(Перечисление.ОбъектыНалогообложенияПоУСН.ПустаяСсылка)) КАК ОбъектНалогообложенияУСН,
//		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС, ЛОЖЬ) КАК УплачиватьДобровольныеВзносыВФСС,
//		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаРасходовПоНалогамСФОТВНалоговомУчете.ПустаяСсылка)) КАК ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете,
//		|	ЕСТЬNULL(УчетнаяПолитикаПоЕСН.ТочностьИсчисленияЕСН, ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругленияЕСН.Точно)) КАК ТочностьИсчисленияЕСН,
//		|	ЕСТЬNULL(УчетнаяПолитикаПоЕСН.ТочностьИсчисленияПФР, ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругленияЕСН.Точно)) КАК ТочностьИсчисленияПФР,
//		|	ЕСТЬNULL(УчетнаяПолитикаПоЕСН.ПорядокРасчетаВычетаФБ, ЗНАЧЕНИЕ(Перечисление.ПорядкиИсчисленияВычетаПоЕСН.ПоСуммеСтраховыхВзносов)) КАК ПорядокРасчетаВычетаФБ
//		|ИЗ
//		|	Справочник.Организации КАК Организации
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериоды КАК ВТПериоды
//		|		ПО (ИСТИНА)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//		|			УчетнаяПолитикаНалоговыйУчет.Организация КАК Организация,
//		|			МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ДатаРегистра,
//		|			ВТПериоды.Период КАК Период
//		|		ИЗ
//		|			ВТПериоды КАК ВТПериоды
//		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
//		|				ПО ВТПериоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период
//		|		
//		|		СГРУППИРОВАТЬ ПО
//		|			УчетнаяПолитикаНалоговыйУчет.Организация,
//		|			ВТПериоды.Период) КАК ДатыУстановленияУчПолитикиНалоговыйУчет
//		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
//		|			ПО ДатыУстановленияУчПолитикиНалоговыйУчет.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
//		|				И ДатыУстановленияУчПолитикиНалоговыйУчет.ДатаРегистра = УчетнаяПолитикаНалоговыйУчет.Период
//		|		ПО (ВЫБОР
//		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
//		|					ТОГДА Организации.Ссылка
//		|				ИНАЧЕ Организации.ГоловнаяОрганизация
//		|			КОНЕЦ = ДатыУстановленияУчПолитикиНалоговыйУчет.Организация)
//		|			И (ВТПериоды.Период = ДатыУстановленияУчПолитикиНалоговыйУчет.Период)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//		|			УчетнаяПолитикаПоЕСН.Организация КАК Организация,
//		|			МАКСИМУМ(УчетнаяПолитикаПоЕСН.Период) КАК ДатаРегистра,
//		|			ВТПериоды.Период КАК Период
//		|		ИЗ
//		|			ВТПериоды КАК ВТПериоды
//		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоЕСН КАК УчетнаяПолитикаПоЕСН
//		|				ПО ВТПериоды.Период >= УчетнаяПолитикаПоЕСН.Период
//		|		
//		|		СГРУППИРОВАТЬ ПО
//		|			УчетнаяПолитикаПоЕСН.Организация,
//		|			ВТПериоды.Период) КАК ДатыУстановленияУчПолитикиЕСН
//		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоЕСН КАК УчетнаяПолитикаПоЕСН
//		|			ПО ДатыУстановленияУчПолитикиЕСН.Организация = УчетнаяПолитикаПоЕСН.Организация
//		|				И ДатыУстановленияУчПолитикиЕСН.ДатаРегистра = УчетнаяПолитикаПоЕСН.Период
//		|		ПО (ВЫБОР
//		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
//		|					ТОГДА Организации.Ссылка
//		|				ИНАЧЕ Организации.ГоловнаяОрганизация
//		|			КОНЕЦ = ДатыУстановленияУчПолитикиЕСН.Организация)
//		|			И (ВТПериоды.Период = ДатыУстановленияУчПолитикиЕСН.Период)
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Период,
//		|	Организация";
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Пока Выборка.СледующийПоЗначениюПоля("Период") Цикл
//							
//			Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
//				Структура = Новый Структура("УСН,ОбъектНалогообложенияУСН,ОрганизацияЯвляетсяПлательщикомЕНВД,УплачиватьДобровольныеВзносыВФСС,ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете, ТочностьИсчисленияЕСН, ТочностьИсчисленияПФР, ПорядокРасчетаВычетаФБ");
//				ЗаполнитьЗначенияСвойств(Структура,Выборка);
//				УчетнаяПолитикаПоНалоговомуУчетуСоответствие.Вставить(Выборка.Организация,Структура);
//			КонецЦикла;
//			УчетнаяПолитикаПоНалоговомуУчету.Вставить(?(ЗначениеЗаполнено(Выборка.Период),КонецМесяца(Выборка.Период),Выборка.Период),УчетнаяПолитикаПоНалоговомуУчетуСоответствие);
//			УчетнаяПолитикаПоНалоговомуУчетуСоответствие = Новый Соответствие;
//			УчетнаяПолитикаПоНалоговомуУчетуСоответствие.Вставить(Справочники.Организации.ПустаяСсылка(),Новый Структура("УСН,ОбъектНалогообложенияУСН,ОрганизацияЯвляетсяПлательщикомЕНВД,УплачиватьДобровольныеВзносыВФСС,ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете, ТочностьИсчисленияЕСН, ТочностьИсчисленияПФР, ПорядокРасчетаВычетаФБ",Ложь,Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка(),Ложь,Ложь,Перечисления.ВариантыУчетаРасходовПоНалогамСФОТВНалоговомУчете.ПустаяСсылка(), Перечисления.ПорядкиОкругленияЕСН.Точно, Перечисления.ПорядкиОкругленияЕСН.Точно, Перечисления.ПорядкиИсчисленияВычетаПоЕСН.ПоСуммеСтраховыхВзносов));
//					
//		КонецЦикла;
//		
//	Иначе 
//		УчетнаяПолитикаПоНалоговомуУчетуСоответствие = Новый Соответствие;
//		УчетнаяПолитикаПоНалоговомуУчетуСоответствие.Вставить("",Новый Структура("УСН,ОбъектНалогообложенияУСН,ОрганизацияЯвляетсяПлательщикомЕНВД,УплачиватьДобровольныеВзносыВФСС,ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете, ТочностьИсчисленияЕСН, ТочностьИсчисленияПФР, ПорядокРасчетаВычетаФБ",Ложь,Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка(),Ложь,Ложь,Перечисления.ВариантыУчетаРасходовПоНалогамСФОТВНалоговомУчете.ПустаяСсылка(),Перечисления.ПорядкиОкругленияЕСН.Точно,Перечисления.ПорядкиОкругленияЕСН.Точно, Перечисления.ПорядкиИсчисленияВычетаПоЕСН.ПоСуммеСтраховыхВзносов));
//		УчетнаяПолитикаПоНалоговомуУчету.Вставить('00010101',УчетнаяПолитикаПоНалоговомуУчетуСоответствие);
//	КонецЕсли; 
//	
//	Возврат УчетнаяПолитикаПоНалоговомуУчету;
//	
//КонецФункции// ЗаполнениеУчетнойПолитикиНалоговомуУчету

// Процедура инициализирует глобальную переменную глУчетнаяПолитикаПоНалоговомуУчету.
//
// Параметры:
//  Нет.
//
Функция ЗаполнениеУчетнойПолитикиНалоговомуУчету() Экспорт
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
	
		УчетнаяПолитикаПоНалоговомуУчету = Новый Соответствие;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(КОНЕЦПЕРИОДА(УчетнаяПолитикаНалоговыйУчет.Период, МЕСЯЦ), &парамНачальнаяДата) КАК Период,
		|	Организации.Ссылка КАК Организация,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.УСН, ЛОЖЬ) КАК УСН,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомЕНВД, ЛОЖЬ) КАК ОрганизацияЯвляетсяПлательщикомЕНВД,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ОбъектНалогообложенияУСН, ЗНАЧЕНИЕ(Перечисление.ОбъектыНалогообложенияПоУСН.ПустаяСсылка)) КАК ОбъектНалогообложенияУСН,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС, ЛОЖЬ) КАК УплачиватьДобровольныеВзносыВФСС,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаРасходовПоНалогамСФОТВНалоговомУчете.ПустаяСсылка)) КАК ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО (ВЫБОР
		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Организации.Ссылка
		|				ИНАЧЕ Организации.ГоловнаяОрганизация
		|			КОНЕЦ = УчетнаяПолитикаНалоговыйУчет.Организация)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период");
		
		парамПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		парамНачальнаяДата = '00010101';
		парамПустойОбъектНалогообложенияПоУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка();
		парамПустойВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете = Перечисления.ВариантыУчетаРасходовПоНалогамСФОТВНалоговомУчете.ПустаяСсылка();
		Запрос.УстановитьПараметр("парамНачальнаяДата",парамНачальнаяДата);		
		
		УчетнаяПолитикаПоНалоговомуУчетуСоответствие = Новый Соответствие;
		УчетнаяПолитикаПоНалоговомуУчетуСоответствие.Вставить(парамПустаяОрганизация,Новый Структура("УСН,ОбъектНалогообложенияУСН,ОрганизацияЯвляетсяПлательщикомЕНВД,УплачиватьДобровольныеВзносыВФСС,ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете",Ложь,парамПустойОбъектНалогообложенияПоУСН,Ложь,Ложь,парамПустойВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете));
		УчетнаяПолитикаПоНалоговомуУчету.Вставить(парамНачальнаяДата,УчетнаяПолитикаПоНалоговомуУчетуСоответствие);
		
		Выборка = Запрос.Выполнить().Выбрать();
		                                      
		Пока Выборка.СледующийПоЗначениюПоля("Период") Цикл
							
			Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
				УчетнаяПолитикаПоНалоговомуУчетуСоответствие.Вставить(Выборка.Организация,Новый Структура("УСН,ОбъектНалогообложенияУСН,ОрганизацияЯвляетсяПлательщикомЕНВД,УплачиватьДобровольныеВзносыВФСС,ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете",Выборка.УСН,Выборка.ОбъектНалогообложенияУСН,Выборка.ОрганизацияЯвляетсяПлательщикомЕНВД,Выборка.УплачиватьДобровольныеВзносыВФСС,Выборка.ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете));
			КонецЦикла;
			УчетнаяПолитикаПоНалоговомуУчету.Вставить(?(ЗначениеЗаполнено(Выборка.Период),КонецМесяца(Выборка.Период),Выборка.Период),УчетнаяПолитикаПоНалоговомуУчетуСоответствие);
			УчетнаяПолитикаПоНалоговомуУчетуСоответствие = Новый Соответствие;
			УчетнаяПолитикаПоНалоговомуУчетуСоответствие.Вставить(парамПустаяОрганизация,Новый Структура("УСН,ОбъектНалогообложенияУСН,ОрганизацияЯвляетсяПлательщикомЕНВД,УплачиватьДобровольныеВзносыВФСС,ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете",Ложь,парамПустойОбъектНалогообложенияПоУСН,Ложь,Ложь,парамПустойВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете));
					
		КонецЦикла;
		
	КонецЕсли; 
    
	Возврат УчетнаяПолитикаПоНалоговомуУчету;
КонецФункции// ЗаполнениеУчетнойПолитикиНалоговомуУчету

// СтандартныеПодсистемы

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Функция ОбработчикиИнициализацииПараметровСеанса() Экспорт
	
	// Для задания обработчиков параметров сеанса следует использовать шаблон:
	// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
	//
	// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
	//             что один обработчик будет вызван для инициализации всех параметров сеанса
	//             с именем, начинающимся на слово НачалоИмениПараметраСеанса
	//
	
	Обработчики = Новый Соответствие;
	
	Возврат Обработчики;
	
КонецФункции

// Возвращает список имен объектов метаданных, данные которых могут содержать ссылки на различные объекты метаданных,
// но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Пример:
// Для документ "Реализация товаров и услуг" настроена подсистема версионирования объектов,
// и подсистема свойств. При этом на экземпляр документа может быть множество ссылок 
// в информационной базе (из других документов, регистров). Часть ссылок имеют значение для бизнес-логики
// (например движения по регистрам). Другая часть ссылок - "техногенные" ссылки на объект из объектов ИБ,
// которые относятся к подсистеме версионирования объектов и подсистеме свойств. Такие "техногенные"
// ссылки должны быть отфильтрованы, например, в обработке удаления помеченных и при поиске ссылок на объект
// в подсистеме запрета редактирования ключевых реквизитов.
// Список таких "техногенных" объектов нужно перечислить в этой функции.
//
// При этом необходимо позаботиться об удалении "техногенных" данных или очистке ссылок на удаленные объекты.
// Это может быть реализовано с помощью подписки на событие ПередУдалением,
// или с помощью установки признака Ведущее для измерений регистров сведений.
//
// Возвращаемое значение:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Функция ПолучитьИсключенияПоискаСсылок() Экспорт
	
	Массив = Новый Массив;
	
	Возврат Массив;
	
КонецФункции 

// Устанавливает текстовое описание предмета
//
// Параметры
//  СсылкаНаПредмет  – ЛюбаяСсылка – объект ссылочного типа.
//  Представление	 - Строка - сюда необходимо поместить текстовое описание.
Процедура УстановитьПредставлениеПредмета(СсылкаНаПредмет, Представление) Экспорт
	
КонецПроцедуры

// Заполняет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Подробнее: см. ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог) Экспорт
	
	
	
КонецПроцедуры

// Устарела. Будет удалена в следующей редакции. См. ПриОпределенииОбщихПараметровБазовойФункциональности.
Процедура ИмяФормыПерсональныхНастроек(ИмяФормы) Экспорт
	
	
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента при запуске.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
Процедура ПараметрыРаботыКлиента(Параметры) Экспорт
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// конфигурации при завершении, т.е. в обработчиках:
// - ПередЗавершениемРаботыСистемы,
// - ПриЗавершенииРаботыСистемы
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента при завершении.
//
// Пример реализации:
//   Для установки параметров работы клиента при завершении можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
Процедура ПараметрыРаботыКлиентаПриЗавершении(Параметры) Экспорт
	
КонецПроцедуры

// Устарела. Будет удалена в следующей редакции. См. ПриОпределенииОбщихПараметровБазовойФункциональности.
Процедура ПолучитьМинимальноНеобходимуюВерсиюПлатформы(ПараметрыПроверки) Экспорт
	
КонецПроцедуры

// Позволяет настроить общие параметры базовой функциональности.
//
// Параметры:
//  ОбщиеПараметры (Структура) Набор параметров базовой функциональности:
//    Ранее определялись в ОбщегоНазначенияПереопределяемый.ИмяФормыПерсональныхНастроек():
//      |- ИмяФормыПерсональныхНастроек (Строка) Имя формы для редактирования персональных настроек.
//    Ранее определялись в ОбщегоНазначенияПереопределяемый.ПолучитьМинимальноНеобходимуюВерсиюПлатформы():
//      |- МинимальноНеобходимаяВерсияПлатформы (Строка) Номер версии платформы для запуска программы.
//      |- РаботаВПрограммеЗапрещена (Булево) Начальное значение Ложь.
//    Не имеют аналогов в переопределяемых модулях:
//      |- ЗапрашиватьПодтверждениеПриЗавершенииПрограммы (Булево) Определяет значение по умолчанию для флажка
//         "Больше не задавать этот вопрос" диалога "Завершить работу с программой?".
//         Значение по умолчанию Истина.
//         Если установить Ложь, то пользователь не увидит диалог, пока явно не включит его отображение через свои настройки.
//
Процедура ПриОпределенииОбщихПараметровБазовойФункциональности(ОбщиеПараметры) Экспорт
	
	
	
КонецПроцедуры

// Обработчик события "Перед загрузкой идентификаторов объектов метаданных в подчиненном РИБ узле".
// Выполняет заполнение настроек размещения сообщения обмена данными или
// нестандартную загрузку идентификаторов объектов метаданных из главного узла.
//
// Параметры:
//  СтандартнаяОбработка - Булево, начальное значение Истина, если установить Ложь, тогда стандартная загрузка
//                идентификаторов объектов метаданных с помощью подсистемы ОбменДанными будет пропущена (тоже
//                будет и в случае, если подсистемы ОбменДанными нет).
//
Процедура ПередЗагрузкойИдентификаторовОбъектовМетаданныхВПодчиненномРИБУзле(СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию программных интерфейсов,
// используя в качестве ключей имена программных интерфейсов.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура:
//  Ключ - Имя программного интерфейса,
//  Значение - Массив(Строка) - поддерживаемые версии программного интерфейса.
//
// Пример реализации:
//
//  // СервисПередачиФайлов
//  МассивВерсий = Новый Массив;
//  МассивВерсий.Добавить("1.0.1.1");
//  МассивВерсий.Добавить("1.0.2.1"); 
//  СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//  // Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий) Экспорт
	
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы
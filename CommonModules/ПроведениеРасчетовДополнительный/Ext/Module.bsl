
////////////////////////////////////////////////////////////////////////////////
// ДАТЫ ИЗМЕНЕНИЯ ЗАКОНОДАТЕЛЬСТВА

// Возвращает дату вступления в силу Федерального закона от 30 июня 2006 г. № 90-ФЗ
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ПолучитьДатуВступленияВСилуИзмененийТрудовогоКодекса2006() Экспорт

	Возврат	'20061006' // статья 3: по истечении 90 дней после дня официального опубликования - Российская газета от 7 июля 2006 г. №146 

КонецФункции // ПолучитьДатуВступленияВСилуИзмененийТрудовогоКодекса2006()

// Возвращает дату вступления в силу Федерального закона от 29 декабря 2006 г. № 255-ФЗ
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006() Экспорт

	Возврат	'20070101' // статья 19: Федеральный закон вступает в силу с 1 января 2007 года. 

КонецФункции // ПолучитьДатуВступленияВСилуИзмененийТрудовогоКодекса2006()

// Возвращает дату вступления в силу Постановления Правительства РФ от 24 декабря 2007 г. №922
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ПолучитьДатуВступленияВСилуИзмененийПоОтпускам2008() Экспорт

	Возврат	'20080106' // Постановление опубликовано в Российской газете от 29 декабря 2007 г. №..., вступает в силу по истечении 7 календарных дней - с 6 января 2008 года. 

КонецФункции // ПолучитьДатуВступленияВСилуИзмененийТрудовогоКодекса2006()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА ДОКУМЕНТОВ

// Процедура получает курс валюты упр учета для целей расчетов с персоналом 
// и валюту упручета
// Параметры:
//		ДатаКурса
//		ВалютаУпрУчета - в парамтер будет передана ссылка на валюту
//		КурсВалютыУпрУчета - в параметр будет передан курс
//		ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ПолучитьКурсВалютыУпрУчета(ДатаКурсаНачало, ДатаКурсаКонец, ВалютаУпрУчета, КурсВалютыУпрУчета, ВалютаРегламентированногоУчета) Экспорт
	КурсВалютыУпрУчета = Новый Соответствие;
	ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Дата = НачалоМесяца(ДатаКурсаНачало);
	Пока Дата <= ДатаКурсаКонец Цикл
		Если ВалютаРегламентированногоУчета = ВалютаУпрУчета Тогда
			КурсВалютыУпрУчета[Дата] = 1;
		Иначе
			Отбор = Новый Структура("Валюта", ВалютаУпрУчета);
			СведенияОКурсе = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.Получить(НачалоМесяца(Дата), Отбор);
			КурсВалютыУпрУчета[Дата] = ?(СведенияОКурсе.Кратность = 0, 0 , СведенияОКурсе.Курс / СведенияОКурсе.Кратность);
		КонецЕсли;
		Дата = ДобавитьМесяц(Дата, 1);
	КонецЦикла;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СПИСКОВ СПОСОБОВ РАСЧЕТА



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВИДАМИ РАСЧЕТА

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, предназначенные для реализации способа расчета 
// ДоначислениеПоУправленческомуУчету

// создает по переданному соответствию массив со структурами "Ключ,Значение", упорядоченный по Ключ
Функция УпорядоченноеСоответствие(Соответствие)
    Массив = Новый Массив;
    Для Каждого ЭлементСоответствия Из Соответствие Цикл
        Если Массив.Количество() = 0 Тогда
            Массив.Добавить(Новый Структура("Ключ, Значение", ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение));
        Иначе
            Вставили = Ложь;
            Для Счетчик = 0 По Массив.ВГраница() Цикл
                Если Массив[Счетчик].Ключ > ЭлементСоответствия.Ключ Тогда
                    Массив.Вставить(Счетчик, Новый Структура("Ключ, Значение", ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение));
                    Вставили = Истина;
                    Прервать;
                КонецЕсли;
            КонецЦикла;
            Если Вставили Тогда
                Продолжить;
            КонецЕсли;
            Массив.Добавить(Новый Структура("Ключ, Значение", ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение));
        КонецЕсли;
    КонецЦикла;
    Возврат Массив;
КонецФункции

// расчет прогнозируемой суммы НДФЛ за некоторый период 
// Парамтеры:
//  ПолнОблагаемыйДоходЗаГод - размер дохода периода
//  СтрокаПрогноза - структура, содержащая сведения для прогноза 
//  ДопВсегоИсчисленный - дополнительная сумма уже исчисленного НДФЛ для данного 
//          периода (помимо той суммы, которая содержится в структуре СтрокаПрогноза 
//
// Возвращаемое значение: число - размер прогнозируемого налога
//
Функция ПрогнозНДФЛ(ПолнОблагаемыйДоходЗаГод, СтрокаПрогноза, ДопВсегоИсчисленный)
    Если СтрокаПрогноза.Резидент Тогда
        Ставка = 0.13;
        ВычетыЛичныеЗаГод = ?(ПолнОблагаемыйДоходЗаГод >= СтрокаПрогноза.ОграничениеПоДоходамЛичные,
                              СтрокаПрогноза.ВычетыЛичныеДоТекПериода,
                              СтрокаПрогноза.ВычетыЛичные);
        ВычетыДетскиеЗаГод = ?(ПолнОблагаемыйДоходЗаГод >= СтрокаПрогноза.ОграничениеПоДоходамНаДетей,
                              СтрокаПрогноза.ВычетыДетскиеДоТекПериода,
                              СтрокаПрогноза.ВычетыДетские);
        ВычетыДетскиеИнвалидовЗаГод = ?(ПолнОблагаемыйДоходЗаГод >= СтрокаПрогноза.ОграничениеПоДоходамНаДетей,
                              СтрокаПрогноза.ВычетыДетскиеИнвалидовДоТекПериода,
                              СтрокаПрогноза.ВычетыДетскиеИнвалидов);
        ВычетыДетскиеДвойныеЗаГод = ?(ПолнОблагаемыйДоходЗаГод >= СтрокаПрогноза.ОграничениеПоДоходамНаДетей,
                              СтрокаПрогноза.ВычетыДетскиеДвойныеДоТекПериода,
                              СтрокаПрогноза.ВычетыДетскиеДвойные);
        ВычетыДетскиеДвойныеИнвалидовЗаГод = ?(ПолнОблагаемыйДоходЗаГод >= СтрокаПрогноза.ОграничениеПоДоходамНаДетей,
                              СтрокаПрогноза.ВычетыДетскиеДвойныеИнвалидовДоТекПериода,
                              СтрокаПрогноза.ВычетыДетскиеДвойныеИнвалидов);
        ВычетыДетскиеДвойныеВторыеЗаГод = ?(ПолнОблагаемыйДоходЗаГод >= СтрокаПрогноза.ОграничениеПоДоходамНаДетей,
                              СтрокаПрогноза.ВычетыДетскиеДвойныеВторыеДоТекПериода,
                              СтрокаПрогноза.ВычетыДетскиеДвойныеВторые);
        ВычетыДетскиеДвойныеВторыеИнвалидовЗаГод = ?(ПолнОблагаемыйДоходЗаГод >= СтрокаПрогноза.ОграничениеПоДоходамНаДетей,
                              СтрокаПрогноза.ВычетыДетскиеДвойныеВторыеИнвалидовДоТекПериода,
                              СтрокаПрогноза.ВычетыДетскиеДвойныеВторыеИнвалидов);
        ПримененныеВычетыДетские = ?(ПолнОблагаемыйДоходЗаГод > ВычетыДетскиеЗаГод, 
                                    ВычетыДетскиеЗаГод, 
                                    ПолнОблагаемыйДоходЗаГод);
        ПримененныеВычетыДетскиеДвойные = ?(ПолнОблагаемыйДоходЗаГод > ВычетыДетскиеДвойныеЗаГод + ВычетыДетскиеЗаГод, 
                                    ВычетыДетскиеДвойныеЗаГод, 
                                    ?(ВычетыДетскиеДвойныеЗаГод > ПолнОблагаемыйДоходЗаГод - ВычетыДетскиеЗаГод, 
                                    ПолнОблагаемыйДоходЗаГод - ВычетыДетскиеЗаГод,
                                    ВычетыДетскиеДвойныеЗаГод));
        ПримененныеВычетыДетскиеДвойныеВторые = ?(ПолнОблагаемыйДоходЗаГод > ВычетыДетскиеДвойныеВторыеЗаГод + ВычетыДетскиеЗаГод + ВычетыДетскиеДвойныеЗаГод, 
                                    ВычетыДетскиеДвойныеВторыеЗаГод,
                                    ?(ВычетыДетскиеДвойныеВторыеЗаГод > ПолнОблагаемыйДоходЗаГод - ВычетыДетскиеЗаГод - ВычетыДетскиеДвойныеЗаГод, 
                                    ПолнОблагаемыйДоходЗаГод - ВычетыДетскиеЗаГод - ВычетыДетскиеДвойныеЗаГод,
                                    ВычетыДетскиеДвойныеВторыеЗаГод));
        ПримененныеВычетыДетскиеИнвалидов = ?(ПолнОблагаемыйДоходЗаГод > ВычетыДетскиеИнвалидовЗаГод + ВычетыДетскиеЗаГод + ВычетыДетскиеДвойныеЗаГод + ВычетыДетскиеДвойныеВторыеЗаГод, 
                                    ВычетыДетскиеИнвалидовЗаГод,
                                    ?(ВычетыДетскиеИнвалидовЗаГод > ПолнОблагаемыйДоходЗаГод - ВычетыДетскиеЗаГод - ВычетыДетскиеДвойныеЗаГод - ВычетыДетскиеДвойныеВторыеЗаГод, 
                                    ПолнОблагаемыйДоходЗаГод - ВычетыДетскиеЗаГод - ВычетыДетскиеДвойныеЗаГод - ВычетыДетскиеДвойныеВторыеЗаГод,
                                    ВычетыДетскиеИнвалидовЗаГод));
        ПримененныеВычетыДетскиеДвойныеИнвалидов = ?(ПолнОблагаемыйДоходЗаГод > ВычетыДетскиеДвойныеИнвалидовЗаГод + ВычетыДетскиеИнвалидовЗаГод + ВычетыДетскиеЗаГод + ВычетыДетскиеДвойныеЗаГод + ВычетыДетскиеДвойныеВторыеЗаГод, 
                                    ВычетыДетскиеДвойныеИнвалидовЗаГод,
                                    ?(ВычетыДетскиеДвойныеИнвалидовЗаГод > ПолнОблагаемыйДоходЗаГод - ВычетыДетскиеЗаГод - ВычетыДетскиеДвойныеЗаГод - ВычетыДетскиеИнвалидовЗаГод - ВычетыДетскиеДвойныеВторыеЗаГод, 
                                    ПолнОблагаемыйДоходЗаГод - ВычетыДетскиеЗаГод - ВычетыДетскиеДвойныеЗаГод - ВычетыДетскиеИнвалидовЗаГод - ВычетыДетскиеДвойныеВторыеЗаГод,
                                    ВычетыДетскиеДвойныеИнвалидовЗаГод));
        ПримененныеВычетыДетскиеДвойныеВторыеИнвалидов = ?(ПолнОблагаемыйДоходЗаГод > ВычетыДетскиеДвойныеВторыеИнвалидовЗаГод + ВычетыДетскиеЗаГод + ВычетыДетскиеДвойныеЗаГод + ВычетыДетскиеДвойныеВторыеЗаГод + ВычетыДетскиеИнвалидовЗаГод + ВычетыДетскиеДвойныеИнвалидовЗаГод, 
                                    ВычетыДетскиеДвойныеВторыеИнвалидовЗаГод, 
                                    ?(ВычетыДетскиеДвойныеВторыеИнвалидовЗаГод > ПолнОблагаемыйДоходЗаГод - ВычетыДетскиеЗаГод - ВычетыДетскиеДвойныеЗаГод - ВычетыДетскиеДвойныеВторыеЗаГод - ВычетыДетскиеИнвалидовЗаГод - ВычетыДетскиеДвойныеИнвалидовЗаГод, 
                                    ПолнОблагаемыйДоходЗаГод - ВычетыДетскиеЗаГод - ВычетыДетскиеДвойныеЗаГод - ВычетыДетскиеДвойныеВторыеЗаГод - ВычетыДетскиеИнвалидовЗаГод - ВычетыДетскиеДвойныеИнвалидовЗаГод,
                                    ВычетыДетскиеДвойныеВторыеИнвалидовЗаГод));
        ПримененныеВычетыЛичные = ?(ПолнОблагаемыйДоходЗаГод > ВычетыЛичныеЗаГод + ВычетыДетскиеЗаГод + ВычетыДетскиеДвойныеЗаГод + ВычетыДетскиеДвойныеВторыеЗаГод + ВычетыДетскиеИнвалидовЗаГод + ВычетыДетскиеДвойныеИнвалидовЗаГод + ВычетыДетскиеДвойныеВторыеИнвалидовЗаГод, 
                                    ВычетыЛичныеЗаГод, 
                                    ?(ВычетыЛичныеЗаГод > ПолнОблагаемыйДоходЗаГод - ВычетыДетскиеЗаГод - ВычетыДетскиеДвойныеЗаГод - ВычетыДетскиеДвойныеВторыеЗаГод - ВычетыДетскиеИнвалидовЗаГод - ВычетыДетскиеДвойныеИнвалидовЗаГод - ВычетыДетскиеДвойныеВторыеИнвалидовЗаГод, 
                                    ПолнОблагаемыйДоходЗаГод - ВычетыДетскиеЗаГод - ВычетыДетскиеДвойныеЗаГод - ВычетыДетскиеДвойныеВторыеЗаГод - ВычетыДетскиеИнвалидовЗаГод - ВычетыДетскиеДвойныеИнвалидовЗаГод - ВычетыДетскиеДвойныеВторыеИнвалидовЗаГод,
                                    ВычетыЛичныеЗаГод));
        ПримененныеВычеты312 = ?(ПолнОблагаемыйДоходЗаГод > ПримененныеВычетыЛичные + ПримененныеВычетыДетские + ПримененныеВычетыДетскиеДвойные + ПримененныеВычетыДетскиеДвойныеВторые + ПримененныеВычетыДетскиеИнвалидов + ПримененныеВычетыДетскиеДвойныеИнвалидов + ПримененныеВычетыДетскиеДвойныеВторыеИнвалидов, 
                                ?(СтрокаПрогноза.Вычет312Остаток > ПолнОблагаемыйДоходЗаГод - ПримененныеВычетыЛичные - ПримененныеВычетыДетские - ПримененныеВычетыДетскиеДвойные - ПримененныеВычетыДетскиеДвойныеВторые - ПримененныеВычетыДетскиеИнвалидов - ПримененныеВычетыДетскиеДвойныеИнвалидов - ПримененныеВычетыДетскиеДвойныеВторыеИнвалидов,
                                ПолнОблагаемыйДоходЗаГод - ПримененныеВычетыЛичные - ПримененныеВычетыДетские - ПримененныеВычетыДетскиеДвойные - ПримененныеВычетыДетскиеДвойныеВторые - ПримененныеВычетыДетскиеИнвалидов - ПримененныеВычетыДетскиеДвойныеИнвалидов - ПримененныеВычетыДетскиеДвойныеВторыеИнвалидов,
                                СтрокаПрогноза.Вычет312Остаток),
                                0);
        ПримененныеВычеты311 = ?(ПолнОблагаемыйДоходЗаГод > ПримененныеВычеты312 + ПримененныеВычетыЛичные + ПримененныеВычетыДетские + ПримененныеВычетыДетскиеДвойные + ПримененныеВычетыДетскиеДвойныеВторые + ПримененныеВычетыДетскиеИнвалидов + ПримененныеВычетыДетскиеДвойныеИнвалидов + ПримененныеВычетыДетскиеДвойныеВторыеИнвалидов,
                                ?(СтрокаПрогноза.Вычет311Остаток > ПолнОблагаемыйДоходЗаГод - ПримененныеВычеты312 - ПримененныеВычетыЛичные - ПримененныеВычетыДетские - ПримененныеВычетыДетскиеДвойные - ПримененныеВычетыДетскиеДвойныеВторые - ПримененныеВычетыДетскиеИнвалидов - ПримененныеВычетыДетскиеДвойныеИнвалидов - ПримененныеВычетыДетскиеДвойныеВторыеИнвалидов,
                                ПолнОблагаемыйДоходЗаГод - ПримененныеВычеты312 - ПримененныеВычетыЛичные - ПримененныеВычетыДетские - ПримененныеВычетыДетскиеДвойные - ПримененныеВычетыДетскиеДвойныеВторые - ПримененныеВычетыДетскиеИнвалидов - ПримененныеВычетыДетскиеДвойныеИнвалидов - ПримененныеВычетыДетскиеДвойныеВторыеИнвалидов,
                                СтрокаПрогноза.Вычет311Остаток),
                                0);

        Возврат Окр((ПолнОблагаемыйДоходЗаГод - ПримененныеВычетыЛичные - ПримененныеВычетыДетские - ПримененныеВычетыДетскиеДвойные - ПримененныеВычетыДетскиеДвойныеВторые - ПримененныеВычетыДетскиеИнвалидов - ПримененныеВычетыДетскиеДвойныеИнвалидов - ПримененныеВычетыДетскиеДвойныеВторыеИнвалидов - ПримененныеВычеты312 - ПримененныеВычеты311) * Ставка) - (СтрокаПрогноза.ИсчисленныйНалогДоТекПериода + ДопВсегоИсчисленный);
    Иначе
        Ставка = 0.30;
        Возврат ПолнОблагаемыйДоходЗаГод * Ставка;
    КонецЕсли;
КонецФункции

// получение данных для прогноза НДФЛ
// Парамтеры:
//  ПериодРегистрации
//  Организация
//  Регистратор
//  СписокФизЛицТекст - фрагмент текста запроса, предстаавляющий собой условие на список физлиц
//          ДополнительныеПараметрыЗапроса - стрруктура, параметры запроса, которые требуется установить при 
//          для выполнения фрагмента запроса СписокФизЛицТекст
// Возвращаемое значение: результат запроса с данными для прогноза НДФЛ
//
Функция ДанныеДляПрогнозаНДФЛ(	ПериодРегистрации, 
								ОбособленноеПодразделение,
								Организация, 
								Регистратор, 
								СписокФизЛицТекст, 
								ДополнительныеПараметрыЗапроса = Неопределено) Экспорт
	
	Возврат ПроведениеРасчетов.ПолучитьДанныеНДФЛПоРегистратору(	НеОпределено,
												НеОпределено,
												ПериодРегистрации,
												ОбособленноеПодразделение,
												Организация,
												Регистратор,
												СписокФизЛицТекст,
												ДополнительныеПараметрыЗапроса,
												,
												,
												,
												Истина);
КонецФункции

// создание структуры - строки прогноза НДФЛ
// используется в РассчитатьЗаписьРегистраРасчета для формирования сведений для расчета доначислений
Функция СоздатьСтрокуПрогнозаНДФЛ() Экспорт
    СтрокаПрогноза = Новый Структура("
                                    |ИсчисленныйНалогДоТекПериода,
                                    |ОблагаемыйДоходЗаГод,
                                    |Резидент,
                                    |ВычетыЛичныеДоТекПериода,
                                    |ВычетыДетскиеДоТекПериода,
                                    |ВычетыДетскиеИнвалидовДоТекПериода,
                                    |ВычетыДетскиеДвойныеДоТекПериода,
                                    |ВычетыДетскиеДвойныеИнвалидовДоТекПериода,
                                    |ВычетыЛичные,
                                    |ВычетыДетские,
                                    |ВычетыДетскиеИнвалидов,
                                    |ВычетыДетскиеДвойные,
                                    |ВычетыДетскиеДвойныеИнвалидов,
                                    |ВычетыДетскиеДвойныеВторыеДоТекПериода,
                                    |ВычетыДетскиеДвойныеВторыеИнвалидовДоТекПериода,
                                    |ВычетыДетскиеДвойныеВторые,
                                    |ВычетыДетскиеДвойныеВторыеИнвалидов,
                                    |ОграничениеПоДоходамЛичные,
                                    |ОграничениеПоДоходамНаДетей,
                                    |Вычет312Остаток,
                                    |Вычет311Остаток,
                                    |НачисленоДоДоначисления,
                                    |НачисленоПриДоначислении,
                                    |НачисленоПослеДоначисления", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    Возврат СтрокаПрогноза;
    
КонецФункции

// заполнение структуры - строки прогноза НДФЛ по данным из выборки по результату запроса
// 
// Парамтеры: 
// СтрокаПрогноза - структура 
// ДанныеДляПрогнозаНДФЛ - спозиционированная выборка по результатам запроса
//
Процедура ЗаполнитьСтрокуПрогнозаНДФЛ(СтрокаПрогноза, ДанныеДляПрогнозаНДФЛ) Экспорт
    СтрокаПрогноза.ИсчисленныйНалогДоТекПериода = ?(ДанныеДляПрогнозаНДФЛ.РанееНалогИсчисленный = Null, 0, ДанныеДляПрогнозаНДФЛ.РанееНалогИсчисленный);
    СтрокаПрогноза.ОблагаемыйДоходЗаГод = ?(ДанныеДляПрогнозаНДФЛ.ОблагаемыйДоходЗаГод = Null, 0, ДанныеДляПрогнозаНДФЛ.ОблагаемыйДоходЗаГод);
    СтрокаПрогноза.ВычетыЛичныеДоТекПериода = ?(ДанныеДляПрогнозаНДФЛ.РанееПримененныеВычетыЛичные = Null, 0, ДанныеДляПрогнозаНДФЛ.РанееПримененныеВычетыЛичные);
    СтрокаПрогноза.ВычетыДетскиеДоТекПериода = ?(ДанныеДляПрогнозаНДФЛ.РанееПримененныеВычетыДетские = Null, 0, ДанныеДляПрогнозаНДФЛ.РанееПримененныеВычетыДетские);
    СтрокаПрогноза.ВычетыДетскиеДвойныеДоТекПериода = ?(ДанныеДляПрогнозаНДФЛ.РанееПримененныеВычетыДетскиеДвойные = Null, 0, ДанныеДляПрогнозаНДФЛ.РанееПримененныеВычетыДетскиеДвойные);
    СтрокаПрогноза.ВычетыДетскиеИнвалидовДоТекПериода = ?(ДанныеДляПрогнозаНДФЛ.РанееПримененныеВычетыДетскиеИнвалидов = Null, 0, ДанныеДляПрогнозаНДФЛ.РанееПримененныеВычетыДетскиеИнвалидов);
    СтрокаПрогноза.ВычетыДетскиеДвойныеИнвалидовДоТекПериода = ?(ДанныеДляПрогнозаНДФЛ.РанееПримененныеВычетыДетскиеИнвалидовДвойные = Null, 0, ДанныеДляПрогнозаНДФЛ.РанееПримененныеВычетыДетскиеИнвалидовДвойные);
    СтрокаПрогноза.ВычетыЛичные = ?(ДанныеДляПрогнозаНДФЛ.ПримененныеВычетыЛичные = Null, 0, ДанныеДляПрогнозаНДФЛ.ПримененныеВычетыЛичные);
    СтрокаПрогноза.ВычетыДетские = ?(ДанныеДляПрогнозаНДФЛ.ПримененныеВычетыДетские = Null, 0, ДанныеДляПрогнозаНДФЛ.ПримененныеВычетыДетские);
    СтрокаПрогноза.ВычетыДетскиеДвойные = ?(ДанныеДляПрогнозаНДФЛ.ПримененныеВычетыДетскиеДвойные = Null, 0, ДанныеДляПрогнозаНДФЛ.ПримененныеВычетыДетскиеДвойные);
    СтрокаПрогноза.ВычетыДетскиеИнвалидов = ?(ДанныеДляПрогнозаНДФЛ.ПримененныеВычетыДетскиеИнвалидов = Null, 0, ДанныеДляПрогнозаНДФЛ.ПримененныеВычетыДетскиеИнвалидов);
    СтрокаПрогноза.ВычетыДетскиеДвойныеИнвалидов = ?(ДанныеДляПрогнозаНДФЛ.ПримененныеВычетыДетскиеИнвалидовДвойные = Null, 0, ДанныеДляПрогнозаНДФЛ.ПримененныеВычетыДетскиеИнвалидовДвойные);
    СтрокаПрогноза.ВычетыДетскиеДвойныеВторыеДоТекПериода = ?(ДанныеДляПрогнозаНДФЛ.РанееПримененныеВычетыДетскиеДвойныеВторые = Null, 0, ДанныеДляПрогнозаНДФЛ.РанееПримененныеВычетыДетскиеДвойныеВторые);
    СтрокаПрогноза.ВычетыДетскиеДвойныеВторыеИнвалидовДоТекПериода = ?(ДанныеДляПрогнозаНДФЛ.РанееПримененныеВычетыДетскиеИнвалидовДвойныеВторые = Null, 0, ДанныеДляПрогнозаНДФЛ.РанееПримененныеВычетыДетскиеИнвалидовДвойныеВторые);
    СтрокаПрогноза.ВычетыДетскиеДвойныеВторые = ?(ДанныеДляПрогнозаНДФЛ.ПримененныеВычетыДетскиеДвойныеВторые = Null, 0, ДанныеДляПрогнозаНДФЛ.ПримененныеВычетыДетскиеДвойныеВторые);
    СтрокаПрогноза.ВычетыДетскиеДвойныеВторыеИнвалидов = ?(ДанныеДляПрогнозаНДФЛ.ПримененныеВычетыДетскиеИнвалидовДвойныеВторые = Null, 0, ДанныеДляПрогнозаНДФЛ.ПримененныеВычетыДетскиеИнвалидовДвойныеВторые);
    СтрокаПрогноза.ОграничениеПоДоходамЛичные = ?(ДанныеДляПрогнозаНДФЛ.ОграничениеПоДоходамЛичные = Null, 0, ДанныеДляПрогнозаНДФЛ.ОграничениеПоДоходамЛичные);
    СтрокаПрогноза.ОграничениеПоДоходамНаДетей = ?(ДанныеДляПрогнозаНДФЛ.ОграничениеПоДоходамНаДетей = Null, 0, ДанныеДляПрогнозаНДФЛ.ОграничениеПоДоходамНаДетей);
    СтрокаПрогноза.Вычет312Остаток = ?(ДанныеДляПрогнозаНДФЛ.Вычет312Остаток = Null, 0, ДанныеДляПрогнозаНДФЛ.Вычет312Остаток);
    СтрокаПрогноза.Вычет311Остаток = ?(ДанныеДляПрогнозаНДФЛ.Вычет311Остаток = Null, 0, ДанныеДляПрогнозаНДФЛ.Вычет311Остаток);
    СтрокаПрогноза.Резидент = ДанныеДляПрогнозаНДФЛ.Резидент;
    
КонецПроцедуры

// позиционирование по физлицу выборки с данными для прогноза НДФЛ 
// Параметры:
//  ДанныеДляПрогнозаНДФЛ - выборка
//  Физлицо
//
Функция ПозиционироватьДанныеПрогнозаНДФЛ(ДанныеДляПрогнозаНДФЛ, Физлицо) Экспорт
    СтруктураПоиска = Новый Структура("Физлицо");
    СтруктураПоиска.Физлицо = Физлицо;
    Если ДанныеДляПрогнозаНДФЛ.НайтиСледующий(СтруктураПоиска) Тогда
        Возврат Истина;
    Иначе
        ДанныеДляПрогнозаНДФЛ.Сбросить();
        Если ДанныеДляПрогнозаНДФЛ.НайтиСледующий(СтруктураПоиска) Тогда
            Возврат Истина;
        КонецЕсли;
    КонецЕсли;
    Возврат Ложь;
КонецФункции

// Подобрать размер доначисления 
// 
// Параметры:
//  Сведения - сведения для расчета доначислений, соответсвие ключ которого - Сотрудник, значение - структура 
//  Сотрудник
//  РасчетныйПериод
// 
// Возвращаемое значение: число - размер доначисления
//
Функция ПодобратьДоначисление(Сведения, Сотрудник, РасчетныйПериод) Экспорт
	
	Если Сведения = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	ТочностьПодбораРезультата = 0.01;
	
	Сведение = Сведения[Сотрудник];
	Если Сведение = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	Если Сведение.КВыплатеПоУпрУчету = 0 Тогда
		Возврат 0;
	КонецЕсли;
	ВсегоНачислено = Сведение.УжеНачисленоДоДоначисления;
	ВсегоНачисленоПослеДоначисления = 0;
	ВсегоНачисленоДоИПриДоначислении = Сведение.УжеНачисленоДоДоначисления;
	РанееДоначислено = 0;
    ПрогнозНДФЛ = УпорядоченноеСоответствие(Сведение.ПрогнозНДФЛ);
	Для Каждого ЭлементПрогноза Из ПрогнозНДФЛ Цикл
		СтрокаПрогноза = ЭлементПрогноза.Значение;
		РанееДоначислено = РанееДоначислено + СтрокаПрогноза.НачисленоПриДоначислении;
		ВсегоНачислено = ВсегоНачислено + СтрокаПрогноза.НачисленоДоДоначисления + СтрокаПрогноза.НачисленоПриДоначислении + СтрокаПрогноза.НачисленоПослеДоначисления;
		ВсегоНачисленоПослеДоначисления = ВсегоНачисленоПослеДоначисления + СтрокаПрогноза.НачисленоПослеДоначисления;
		ВсегоНачисленоДоИПриДоначислении = ВсегоНачисленоДоИПриДоначислении + СтрокаПрогноза.НачисленоДоДоначисления + СтрокаПрогноза.НачисленоПриДоначислении;
	КонецЦикла;
	
	СтрокаПрогнозаТекущегоПериода = СоздатьСтрокуПрогнозаНДФЛ();
	// начальный прогноз                                
	Для Каждого ЭлементПрогноза Из ПрогнозНДФЛ Цикл
		Если ЭлементПрогноза.Ключ = РасчетныйПериод Тогда
			СтрокаПрогнозаТекущегоПериода = ЭлементПрогноза.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	// ставка для начальной оценки
	Ставка = ?(СтрокаПрогнозаТекущегоПериода.Резидент, 0.13, 0.30);
	Если ВсегоНачисленоПослеДоначисления <> 0 Тогда
		СуммарныйПроцент = ВсегоНачисленоПослеДоначисления / ВсегоНачисленоДоИПриДоначислении * 100;
	Иначе
		СуммарныйПроцент = Сведение.СуммарныйПроцент;
	КонецЕсли;
	НачислитьПрогноз = (Сведение.КВыплатеПоУпрУчету - (ВсегоНачислено - ПрогнозНДФЛ(ВсегоНачислено, СтрокаПрогнозаТекущегоПериода, 0))) / (1 + СуммарныйПроцент / 100) /(1 - Ставка);
	Для Сч = 1 По 20 Цикл
		Если не Сведение.ЕстьДоначисление Тогда
			Возврат 0;
		КонецЕсли;
		ВсегоИсчисленный = 0;
		Для Каждого ЭлементПрогноза Из ПрогнозНДФЛ Цикл
			СтрокаПрогноза = ЭлементПрогноза.Значение;
			Ставка = ?(СтрокаПрогноза.Резидент, 0.13, 0.30);
			ПолнОблагаемыйДоходЗаГод = 
			СтрокаПрогноза.ОблагаемыйДоходЗаГод 
			+ ?(ЭлементПрогноза.Ключ >= РасчетныйПериод, НачислитьПрогноз, 0) 
			+ СтрокаПрогноза.НачисленоПриДоначислении
			+ (СтрокаПрогноза.НачисленоДоДоначисления + ?(ЭлементПрогноза.Ключ >= РасчетныйПериод, НачислитьПрогноз, 0) 
			+ СтрокаПрогноза.НачисленоПриДоначислении) * СуммарныйПроцент / 100;

			НалогИсчисленный = ПрогнозНДФЛ(ПолнОблагаемыйДоходЗаГод, СтрокаПрогноза, ВсегоИсчисленный);
			ВсегоИсчисленный  = ВсегоИсчисленный + НалогИсчисленный;
		КонецЦикла;
		Если РанееДоначислено > 0 Тогда
			// это повторная попытка расчета
			Разница = Сведение.КВыплатеПоУпрУчету - (ВсегоНачислено + НачислитьПрогноз + НачислитьПрогноз * СуммарныйПроцент / 100 - ВсегоИсчисленный);
		Иначе
			Разница = Сведение.КВыплатеПоУпрУчету - (ВсегоНачислено + НачислитьПрогноз + (ВсегоНачислено + НачислитьПрогноз) * СуммарныйПроцент / 100 - ВсегоИсчисленный);
		КонецЕсли;

		Если Разница < ТочностьПодбораРезультата и Разница > - ТочностьПодбораРезультата Тогда
			// выполнен точный расчет
			Прервать;
		ИначеЕсли Разница < 1 и Разница > - 1 Тогда
			// разница меньше 1
			НачислитьПрогноз = НачислитьПрогноз + Разница;
		Иначе
			НачислитьПрогноз = НачислитьПрогноз + Разница/(1 - Ставка);
		КонецЕсли;
		
	КонецЦикла;
	Возврат Макс(0, НачислитьПрогноз + РанееДоначислено);
	
КонецФункции

// получение списка физлиц, для которых требуется уточнение размера доначисления
// Параметры:
//  СведенияОДоначислениях - сведения для расчета доначислений, соответсвие ключ которого - Физлицо, значение - структура 
// Возвращаемое значение: массив ссылок на физлица
//  
Функция ФизлицаТребующиеПересчета(СведенияОДоначислениях) Экспорт
    Физлица = Новый Массив();
    ДопустимаяПогрешностьРасчета = 1;
    Для Каждого ЭлементСведений Из СведенияОДоначислениях Цикл
        Сведение = ЭлементСведений.Значение;
        Физлицо = ЭлементСведений.Ключ;
        Если не Сведение.ЕстьДоначисление Тогда
            // не было доначисления
            Продолжить;
        КонецЕсли;
        ВсегоИсчисленный = 0;
        ВсегоНачисленоПриДоначислении = 0;
        ВсегоНачислено = Сведение.УжеНачисленоДоДоначисления;
        ПрогнозНДФЛ = УпорядоченноеСоответствие(Сведение.ПрогнозНДФЛ);
		ДоначислениеЗаГод = 0;
        Для Каждого ЭлементПрогноза Из ПрогнозНДФЛ Цикл
            СтрокаПрогноза = ЭлементПрогноза.Значение;
			Если СтрокаПрогноза.Резидент Тогда
				ДоначислениеЗаГод = ДоначислениеЗаГод + СтрокаПрогноза.НачисленоПриДоначислении + СтрокаПрогноза.НачисленоПослеДоначисления;
                ПолнОблагаемыйДоходЗаГод = СтрокаПрогноза.ОблагаемыйДоходЗаГод + ДоначислениеЗаГод;
                НалогИсчисленный = ПрогнозНДФЛ(ПолнОблагаемыйДоходЗаГод, СтрокаПрогноза, ВсегоИсчисленный);
                ВсегоИсчисленный  = ВсегоИсчисленный + НалогИсчисленный;
                ВсегоНачислено = ВсегоНачислено + СтрокаПрогноза.НачисленоДоДоначисления + СтрокаПрогноза.НачисленоПриДоначислении + СтрокаПрогноза.НачисленоПослеДоначисления;
                ВсегоНачисленоПриДоначислении = ВсегоНачисленоПриДоначислении + СтрокаПрогноза.НачисленоПриДоначислении;
            КонецЕсли;
        КонецЦикла;
        Если ВсегоНачисленоПриДоначислении = 0 Тогда
            // доначисление оказалось "нулевым"
            Продолжить;
        КонецЕсли;
        Если ВсегоНачислено - ВсегоИсчисленный - Сведение.КВыплатеПоУпрУчету > ДопустимаяПогрешностьРасчета или ВсегоНачислено - ВсегоИсчисленный - Сведение.КВыплатеПоУпрУчету < - ДопустимаяПогрешностьРасчета Тогда
            Физлица.Добавить(Физлицо);
        КонецЕсли;
    КонецЦикла;
    Возврат Физлица;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТАЖЕМ
// 


////////////////////////////////////////////////////////////////////////////////
// ОБСЛУЖИВАНИЕ ПЕРЕРАСЧЕТОВ
// 


////////////////////////////////////////////////////////////////////////////////
// Формульные расчеты

////////////////////////////////////////////////////////////////////////////////
// Законодательство


////////////////////////////////////////////////////////////////////////////////
// ИСПРАВЛЕНИЕ ДОКУМЕНТОВ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, предназначенные для реализации расчета всех других 
//  начислений при печати форм Т-60 и Т-61
// 

Функция ПериодыРасчетаБазыВсехДругихНачислений(ДокументСсылка, ПериодРегистрации)
	
	// запрос получает периоды, для которых нужно определить базу всех начислений
	// запрос составлен исходя из того, что отпуск (увольнение) 
	// может быть зарегистрирован в текущем или в будущем (не в прошлом) периоде
	// периоды записей вычисляются по следующему алгоритму:
	// - временная таблица ПериодВременнойЗаписи состоит из двух частей:
	// - 1 часть - "участок" в прошлом месяце
	//	 - добавляется только тогда, когда отпуск находится в будущем периоде (не в периоде регистрации)
	//     и последний отпуск закончился до конца периода регистрации 
	//   - начинается с момента следующего за последним отпуском, если этот момент в периоде регистрации
	//     или с начала периода регистрации, если отпуска не было вообще или он закончился не в периоде регистрации
	//   - заканчивается всегда концом периода регистрации
	// - 2 часть - "участок" в текущем месяце
	//   - добавляется всегда, кроме случаев, когда отпуск начинается с 1-го числа
	//   - начинается с момента следующего за последним отпуском, если этот момент в текущем месяце
	//     или с начала месяца, если отпуска не было вообще или он закончился не в текущем месяце
	//   - заканчивается всегда моментом, предшествующим началу текущего отпуска
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций") Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник,
		|	ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо КАК ФизЛицо,
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало КАК ДатаНачала,
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец КАК ДатаОкончания,
		|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Регистратор,
		|	1 КАК Приоритет,
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации
		|ПОМЕСТИТЬ ТекущийОтпуск
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник,
		|	ДополнительныеНачисленияРаботниковОрганизаций.ФизЛицо,
		|	ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации,
		|	ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации,
		|	ДополнительныеНачисленияРаботниковОрганизаций.Регистратор,
		|	2,
		|	ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации
		|ИЗ
		|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
		|ГДЕ
		|	ДополнительныеНачисленияРаботниковОрганизаций.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущийОтпуск.Сотрудник,
		|	ТекущийОтпуск.ФизЛицо,
		|	ТекущийОтпуск.ДатаНачала,
		|	ТекущийОтпуск.ДатаОкончания,
		|	ТекущийОтпуск.Регистратор,
		|	МИНИМУМ(ТекущийОтпуск.Приоритет) КАК Приоритет,
		|	ТекущийОтпуск.ПериодРегистрации
		|ПОМЕСТИТЬ ДанныеДокумента
		|ИЗ
		|	ТекущийОтпуск КАК ТекущийОтпуск
		|
		|СГРУППИРОВАТЬ ПО
		|	ТекущийОтпуск.Сотрудник,
		|	ТекущийОтпуск.ФизЛицо,
		|	ТекущийОтпуск.ДатаНачала,
		|	ТекущийОтпуск.ДатаОкончания,
		|	ТекущийОтпуск.Регистратор,
		|	ТекущийОтпуск.ПериодРегистрации
		|;";
	
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасчетПриУвольненииРаботникаОрганизаций") Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РасчетПриУвольненииРаботникаОрганизаций.Сотрудник,
		|	РасчетПриУвольненииРаботникаОрганизаций.Физлицо,
		|	РасчетПриУвольненииРаботникаОрганизаций.ПериодРегистрации,
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(РасчетПриУвольненииРаботникаОрганизаций.ДатаУвольнения, ДЕНЬ, 1), ДЕНЬ) КАК ДатаНачала,
		|	РасчетПриУвольненииРаботникаОрганизаций.Ссылка КАК Регистратор
		|ПОМЕСТИТЬ ДанныеДокумента
		|ИЗ
		|	Документ.РасчетПриУвольненииРаботникаОрганизаций КАК РасчетПриУвольненииРаботникаОрганизаций
		|ГДЕ
		|	РасчетПриУвольненииРаботникаОрганизаций.Ссылка = &Регистратор
		|;";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец) КАК ДатаОкончания
	|ПОМЕСТИТЬ ПоследнийОтпуск
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокумента КАК ДанныеДокумента
	|		ПО ОсновныеНачисленияРаботниковОрганизаций.Регистратор <> ДанныеДокумента.Регистратор
	|			И ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец < ДанныеДокумента.ДатаНачала
	|			И (ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)))
	|			И ((НЕ ОсновныеНачисленияРаботниковОрганизаций.Сторно))
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник = ДанныеДокумента.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ПоследнийОтпуск.ДатаОкончания, МЕСЯЦ) = &ПериодРегистрации
	|			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ПоследнийОтпуск.ДатаОкончания, ДЕНЬ), ДЕНЬ, 1), ДЕНЬ)
	|		ИНАЧЕ &ПериодРегистрации
	|	КОНЕЦ КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) КАК ДатаОкончания
	|ПОМЕСТИТЬ ПериодВременнойЗаписи
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследнийОтпуск КАК ПоследнийОтпуск
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаНачала, МЕСЯЦ) > &ПериодРегистрации
	|	И (ПоследнийОтпуск.ДатаОкончания < КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|			ИЛИ ПоследнийОтпуск.ДатаОкончания ЕСТЬ NULL )
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ПоследнийОтпуск.ДатаОкончания, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаНачала, МЕСЯЦ)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ПоследнийОтпуск.ДатаОкончания, ДЕНЬ), ДЕНЬ, 1), ДЕНЬ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаНачала, МЕСЯЦ)
	|	КОНЕЦ,
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДанныеДокумента.ДатаНачала, ДЕНЬ), ДЕНЬ, -1)
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследнийОтпуск КАК ПоследнийОтпуск
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ДанныеДокумента.ДатаНачала > НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаНачала, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодВременнойЗаписи.ДатаНачала КАК ДатаНачала,
	|	ПериодВременнойЗаписи.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ПериодВременнойЗаписи.ДатаНачала, МЕСЯЦ) = &ПериодРегистрации
	|			ТОГДА ""ДругиеНачисленияЗаТекущийМесяц""
	|		ИНАЧЕ ""ДругиеНачисленияЗаБудущиеМесяцы""
	|	КОНЕЦ КАК ГруппаНачислений
	|ИЗ
	|	ПериодВременнойЗаписи КАК ПериодВременнойЗаписи";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистратор", 		ДокументСсылка);
	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция предназначена для получения значений заполнения граф "другие начисления"
//  унифицированных форм "Т-60" и "Т-61". Значения "других начислений" определяются
//  в текущем или в будущем месяце как сумма всех начислений с момента окончания
//  последнего отпуска, если он закончился в текущем (будущем) месяце или с начала месяца
//  (текущего или будущего), если отпуска в этом месяце не было.
//
// Параметры:
//	ДокументСсылка 		- документ НачислениеОтпускаРаботникамОрганизаций или
//									РасчетПриУвольненииРаботникаОрганизаций
//	ПериодРегистрации	- период регистрации документа
//	Сотрудник 			- ссылка на сотрудника
//
// Возвращаемое значение:
// 	ДругиеНачисления 	- структура с ключами ДругиеНачисленияЗаТекущийМесяц,
//							ДругиеНачисленияЗаБудущиеМесяцы и НеОблагаетсяНДФЛ.
//
Функция ПолучитьДругиеНачисления(ДокументСсылка, ПериодРегистрации, Сотрудник, ДатаДокумента = Неопределено) Экспорт
	
	// получим периоды для расчета базы "других" начислений
	ТаблицаПериодов = ПериодыРасчетаБазыВсехДругихНачислений(ДокументСсылка, ПериодРегистрации);
	
	// для параметра виртуальных таблиц построим массив периодов действия
	ПериодыДействия = Новый Массив;
	Для Каждого СтрокаПериодов Из ТаблицаПериодов Цикл
		ПериодыДействия.Добавить(НачалоМесяца(СтрокаПериодов.ДатаНачала));
	КонецЦикла;
	
	НеВходятВДругиеНачисления = Новый Массив;
	НеВходятВДругиеНачисления.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие);
	НеВходятВДругиеНачисления.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДни);
	НеВходятВДругиеНачисления.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения);
	НеВходятВДругиеНачисления.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневка);
	НеВходятВДругиеНачисления.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения);
	НеВходятВДругиеНачисления.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.СохраняемыйЗаработокНаВремяТрудоустройства);
	НеВходятВДругиеНачисления.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни);
	НеВходятВДругиеНачисления.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка);
	НеВходятВДругиеНачисления.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПериодов", ТаблицаПериодов);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ПериодыДействия", ПериодыДействия);
	Запрос.УстановитьПараметр("НеВходятВДругиеНачисления", НеВходятВДругиеНачисления);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПериодов.ДатаНачала КАК ДатаНачала,
	|	ТаблицаПериодов.ДатаОкончания КАК ДатаОкончания,
	|	ТаблицаПериодов.ГруппаНачислений
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	&ТаблицаПериодов КАК ТаблицаПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаНачала,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ИсходныеДанные.ДатаНачала > ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало
	|			ТОГДА ИсходныеДанные.ДатаНачала
	|		ИНАЧЕ ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ИсходныеДанные.ДатаОкончания < ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияКонец
	|			ТОГДА ИсходныеДанные.ДатаОкончания
	|		ИНАЧЕ ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияКонец
	|	КОНЕЦ КАК ДатаОкончания,
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидРасчета,
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Результат,
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ГрафикРаботы КАК ГрафикРаботы,
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Регистратор КАК Регистратор,
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.НомерСтроки КАК НомерСтроки,
	|	ИсходныеДанные.ГруппаНачислений
	|ПОМЕСТИТЬ ОсновныеНачисленияФактическийПериодДействия
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|				Сотрудник = &Сотрудник
	|					И ПериодДействия В (&ПериодыДействия)) КАК ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия
	|		ПО (ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало <= ИсходныеДанные.ДатаОкончания)
	|			И (ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияКонец >= ИсходныеДанные.ДатаНачала)
	|			И (ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодРегистрации <= ИсходныеДанные.ДатаНачала)
	|			И ((НЕ ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидРасчета В (&НеВходятВДругиеНачисления)))
	|			И (ВЫБОР
	|				КОГДА &ДатаДокумента = НЕОПРЕДЕЛЕНО
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Регистратор.Дата <= &ДатаДокумента
	|			КОНЕЦ)
	|ГДЕ
	|	(НЕ ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГрафикРаботы,
	|	ВидУчетаВремени,
	|	Регистратор,
	|	НомерСтроки,
	|	ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК ОсновноеЗначение,
	|	ОсновныеНачисленияФактическийПериодДействия.ДатаНачала КАК ДатаНачала,
	|	ОсновныеНачисленияФактическийПериодДействия.ДатаОкончания КАК ДатаОкончания,
	|	ОсновныеНачисленияФактическийПериодДействия.Регистратор КАК Регистратор,
	|	ОсновныеНачисленияФактическийПериодДействия.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ОтработанноеВремя
	|ИЗ
	|	ОсновныеНачисленияФактическийПериодДействия КАК ОсновныеНачисленияФактическийПериодДействия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ОсновныеНачисленияФактическийПериодДействия.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И (НАЧАЛОПЕРИОДА(ОсновныеНачисленияФактическийПериодДействия.ДатаНачала, МЕСЯЦ) = ГрафикиРаботыПоВидамВремени.Месяц)
	|			И ОсновныеНачисленияФактическийПериодДействия.ВидУчетаВремени = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
	|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ ОсновныеНачисленияФактическийПериодДействия.ДатаНачала И ОсновныеНачисленияФактическийПериодДействия.ДатаОкончания)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисленияФактическийПериодДействия.ДатаНачала,
	|	ОсновныеНачисленияФактическийПериодДействия.ДатаОкончания,
	|	ОсновныеНачисленияФактическийПериодДействия.Регистратор,
	|	ОсновныеНачисленияФактическийПериодДействия.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки,
	|	ДатаНачала,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыНачислений.ГруппаНачислений,
	|	ЕСТЬNULL(СУММА(РезультатыНачислений.Результат), 0) КАК РезультатСумма,
	|	ЕСТЬNULL(СУММА(РезультатыНачислений.НеОблагаетсяНДФЛ), 0) КАК НеОблагаетсяНДФЛ
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(РезультатыОсновныхНачислений.Результат) КАК Результат,
	|		РезультатыОсновныхНачислений.ГруппаНачислений КАК ГруппаНачислений,
	|		СУММА(РезультатыОсновныхНачислений.НеОблагаетсяНДФЛ) КАК НеОблагаетсяНДФЛ
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ОсновныеНачисленияФактическийПериодДействия.ДатаНачала КАК ДатаНачала,
	|			ОсновныеНачисленияФактическийПериодДействия.ДатаОкончания КАК ДатаОкончания,
	|			СУММА(ВЫБОР
	|					КОГДА ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия, 0) = 0
	|						ТОГДА ОсновныеНачисленияФактическийПериодДействия.Результат
	|					ИНАЧЕ ОсновныеНачисленияФактическийПериодДействия.Результат * (ОтработанноеВремя.ОсновноеЗначение / ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия)
	|				КОНЕЦ) КАК Результат,
	|			ОсновныеНачисленияФактическийПериодДействия.ГруппаНачислений КАК ГруппаНачислений,
	|			ВЫБОР
	|				КОГДА ОсновныеНачисленияФактическийПериодДействия.ВидРасчета.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия, 0) = 0
	|								ТОГДА ОсновныеНачисленияФактическийПериодДействия.Результат
	|							ИНАЧЕ ОсновныеНачисленияФактическийПериодДействия.Результат * (ОтработанноеВремя.ОсновноеЗначение / ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия)
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК НеОблагаетсяНДФЛ
	|		ИЗ
	|			ОсновныеНачисленияФактическийПериодДействия КАК ОсновныеНачисленияФактическийПериодДействия
	|				ЛЕВОЕ СОЕДИНЕНИЕ ОтработанноеВремя КАК ОтработанноеВремя
	|				ПО ОсновныеНачисленияФактическийПериодДействия.Регистратор = ОтработанноеВремя.Регистратор
	|					И ОсновныеНачисленияФактическийПериодДействия.НомерСтроки = ОтработанноеВремя.НомерСтроки
	|					И ОсновныеНачисленияФактическийПериодДействия.ДатаНачала = ОтработанноеВремя.ДатаНачала
	|					И ОсновныеНачисленияФактическийПериодДействия.ДатаОкончания = ОтработанноеВремя.ДатаОкончания
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ДанныеГрафика(
	|						Сотрудник = &Сотрудник
	|							И ПериодДействия В (&ПериодыДействия)) КАК ДанныеГрафика
	|				ПО ОсновныеНачисленияФактическийПериодДействия.Регистратор = ДанныеГрафика.Регистратор
	|					И ОсновныеНачисленияФактическийПериодДействия.НомерСтроки = ДанныеГрафика.НомерСтроки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОсновныеНачисленияФактическийПериодДействия.ДатаОкончания,
	|			ОсновныеНачисленияФактическийПериодДействия.ДатаНачала,
	|			ОсновныеНачисленияФактическийПериодДействия.ГруппаНачислений,
	|			ВЫБОР
	|				КОГДА ОсновныеНачисленияФактическийПериодДействия.ВидРасчета.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия, 0) = 0
	|								ТОГДА ОсновныеНачисленияФактическийПериодДействия.Результат
	|							ИНАЧЕ ОсновныеНачисленияФактическийПериодДействия.Результат * (ОтработанноеВремя.ОсновноеЗначение / ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия)
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК РезультатыОсновныхНачислений
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РезультатыОсновныхНачислений.ГруппаНачислений
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		СУММА(ДополнительныеНачисленияРаботниковОрганизаций.Результат),
	|		ИсходныеДанные.ГруппаНачислений,
	|		ВЫБОР
	|			КОГДА ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)
	|				ТОГДА ДополнительныеНачисленияРаботниковОрганизаций.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		ИсходныеДанные КАК ИсходныеДанные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
	|			ПО (ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ ИсходныеДанные.ДатаНачала И ИсходныеДанные.ДатаОкончания)
	|				И (ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник = &Сотрудник)
	|				И ((НЕ ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета В (&НеВходятВДругиеНачисления)))
	|				И (ВЫБОР
	|					КОГДА &ДатаДокумента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ДополнительныеНачисленияРаботниковОрганизаций.Регистратор.Дата <= &ДатаДокумента
	|				КОНЕЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ИсходныеДанные.ГруппаНачислений,
	|		ВЫБОР
	|			КОГДА ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)
	|				ТОГДА ДополнительныеНачисленияРаботниковОрганизаций.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РезультатыНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	РезультатыНачислений.ГруппаНачислений";
	
	ТаблицаДругихНачислений = Запрос.Выполнить().Выгрузить();
	
	ДругиеНачисления = Новый Структура("ДругиеНачисленияЗаТекущийМесяц, ДругиеНачисленияЗаБудущиеМесяцы, НеОблагаетсяНДФЛ", 0, 0, 0);
	
	Для Каждого СтрокаДругихНачислений Из ТаблицаДругихНачислений Цикл
		ДругиеНачисления[СтрокаДругихНачислений.ГруппаНачислений] = СтрокаДругихНачислений.РезультатСумма;
		ДругиеНачисления["НеОблагаетсяНДФЛ"] = ДругиеНачисления["НеОблагаетсяНДФЛ"] + СтрокаДругихНачислений.НеОблагаетсяНДФЛ;
	КонецЦикла;
	
	Возврат ДругиеНачисления;
	
КонецФункции
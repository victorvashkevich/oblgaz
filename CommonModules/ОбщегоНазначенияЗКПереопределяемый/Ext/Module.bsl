Функция ПолучитьЗначениеПеременной(ИмяПараметра) Экспорт
	
	НайденноеЗначение = Неопределено;
	
	Если ВРег(ИмяПараметра) = ВРег("глУчетнаяПолитикаПоПерсоналу") Тогда
		НайденноеЗначение = ОбщегоНазначенияДополнительный.ЗаполнениеУчетнойПолитикиПоПерсоналу();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глИспользоватьУправленческийУчетЗарплаты") Тогда
		НайденноеЗначение = Константы.ИспользоватьУправленческийУчетЗарплаты.Получить();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глЕстьВалютныеПоказатели") Тогда
		НайденноеЗначение = Ложь;
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глПрограммаБухгалтерскогоУчета") Тогда 
		НайденноеЗначение = Константы.ПрограммаБухгалтерскогоУчета.Получить();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глПрограммаБухгалтерскогоУчетаОрганизации") Тогда 
		НайденноеЗначение = ЗаполнитьПеременнуюПрограммаБухгалтерскогоУчетаОрганизации();	
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глСводныйРежимВыгрузкиПроводок") Тогда 
		НайденноеЗначение = ЗаполнитьПеременнуюСводныйРежимВыгрузкиПроводок();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глТекущееФизическоеЛицо") Тогда
		НайденноеЗначение = ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(ПараметрыСеанса.ТекущийПользователь, "Физлицо");
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глИспользоватьГрейды") Тогда
		НайденноеЗначение = Константы.ИспользоватьГрейды.Получить();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глСпособВводаСведенийОДействующихЛьготах") Тогда
		НайденноеЗначение = Константы.СпособВводаСведенийОДействующихЛьготах.Получить();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глВалютаУправленческогоУчета") Тогда
		НайденноеЗначение = Константы.ВалютаУправленческогоУчета.Получить();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глВалютаРегламентированногоУчета") Тогда
		НайденноеЗначение = Константы.ВалютаРегламентированногоУчета.Получить();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глИспользоватьВнутреннийПорядокФизическихЛиц") Тогда
		НайденноеЗначение = Константы.ИспользоватьВнутреннийПорядокФизическихЛиц.Получить();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глВыгружатьДанныеПоНДФЛИСтрахованию") Тогда
		НайденноеЗначение = Константы.ВыгружатьДанныеПоНДФЛИСтрахованию.Получить();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глРежимАдаптацииУвольнения") Тогда
		НайденноеЗначение = Константы.РежимАдаптацииУвольнения.Получить();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глРежимНабораПерсонала") Тогда
		НайденноеЗначение = Константы.РежимНабораПерсонала.Получить();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глДатаСменыПериодаРасчетаЗарплаты") Тогда
		НайденноеЗначение = Константы.ДатаСменыПериодаРасчетаЗарплаты.Получить();
		
	КонецЕсли;
	
	Возврат НайденноеЗначение;
	
КонецФункции

// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

Функция ПолучитьВидСубконтоПоУмолчаниюДляСправочникаСубконто() Экспорт
	
	
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВидыСубконтоХозрасчетные.Ссылка КАК Ссылка,
	|	ВидыСубконтоХозрасчетные.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.ВидыСубконтоХозрасчетные КАК ВидыСубконтоХозрасчетные
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|");
	
	ТипСубконто = Тип("СправочникСсылка.Субконто");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипЗначения.СодержитТип(ТипСубконто) Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	
КонецФункции // ПолучитьВидСубконтоПоУмолчаниюДляСправочникаСубконто()


Функция ЭтоЮрЛицо(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.ЮрФизЛицо
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Не Выборка.Следующий() Или Выборка.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо;
	
КонецФункции // ЭтоЮрЛицо()

// Проверяет правильность заполнения ОГРН
// Возвращаемое значение:
//   Булево
//
Функция ОГРНСоответствуетТребованиям(ОГРН, ЮрФизЛицо, ТекстСообщенияОшибки) Экспорт
	
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Если СтрДлина(СокрЛП(ОГРН)) <> 15 Тогда
			ТекстСообщенияОшибки = ТекстСообщенияОшибки + "ОГРНИП указан неверно! ОГРНИП должен состоять из 15 цифр!" + Символы.ПС;
			Возврат Ложь;
		КонецЕсли;
		Если НЕ ОбщегоНазначенияЗК.ТолькоЦифрыВСтроке(ОГРН) Тогда
			ТекстСообщенияОшибки = ТекстСообщенияОшибки + "ОГРНИП указан неверно! ОГРН должен состоять только из цифр!" + Символы.ПС;
			Возврат Ложь;
		КонецЕсли;
		ОГРН14 = Число(Лев(Строка(ОГРН), 14));
		Если Прав(Формат(ОГРН14 % 13, "ЧН=0; ЧГ=0"), 1) <> Прав(ОГРН, 1) Тогда
			ТекстСообщенияОшибки = ТекстСообщенияОшибки + "Возможно, ОГРНИП указан неверно (контрольный разряд не совпадает с вычисленным)!" + Символы.ПС;
		КонецЕсли;
	Иначе
		Если СтрДлина(ОГРН) <> 13 Тогда
			ТекстСообщенияОшибки = ТекстСообщенияОшибки + "ОГРН " + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("организации") + " указан неверно! ОГРН должен состоять из 13 цифр!" + Символы.ПС;
			Возврат Ложь;
		КонецЕсли;
		Если НЕ ОбщегоНазначенияЗК.ТолькоЦифрыВСтроке(ОГРН) Тогда
			ТекстСообщенияОшибки = ТекстСообщенияОшибки + "ОГРН " + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("организации") + " указан неверно! ОГРН должен состоять только из цифр!" + Символы.ПС;
			Возврат Ложь;
		КонецЕсли;
		ОГРН12 = Число(Лев(Строка(ОГРН), 12));
		Если Прав(Формат(ОГРН12 % 11, "ЧН=0; ЧГ=0"), 1) <> Прав(ОГРН, 1) Тогда
			ТекстСообщенияОшибки = ТекстСообщенияОшибки + "Возможно, ОГРН " + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("организации") + " указан неверно (контрольный разряд не совпадает с вычисленным)!" + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ОГРНСоответствуетТребованиям()

// Проверяет правильность заполнения КПП
//
// Возвращаемое значение:
//   Булево
//
Функция КППОрганизацииСоответствуетТребованиям(КПП, ТекстСообщенияОшибки) Экспорт
	
	Если НЕ ПустаяСтрока(КПП) И СтрДлина(КПП) <> 9 Тогда
		ТекстСообщенияОшибки = ТекстСообщенияОшибки +  "КПП " + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("организации") + " задан неверно!" + Символы.ПС;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // КППОрганизацииСоответствуетТребованиям()

Функция ДоступнаУстаревшаяРоль(ИмяУстаревшейРоли) Экспорт
	Возврат Ложь;
КонецФункции

#Если ТолстыйКлиентОбычноеПриложение Тогда

Процедура УстановитьИнтерфейс() Экспорт
	
	// если пользователю не задан интерфейс - установим интерфейс по умолчанию
	// с учетом использования управленческого учета
	ИнтерфейсПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().ОсновнойИнтерфейс;
	Если ИнтерфейсПользователя = НеОпределено ИЛИ ИнтерфейсПользователя = Метаданные.Интерфейсы.Полный Тогда
		
		РаботаСДиалогамиДополнительный.ПереключитьПолныйИнтерфейс();
		
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет доступность ссылки для выполнения команды, 
// требующей наличие ссылки
// Если объект пока не записан, считается, что ссылка недоступна
// В этом случае пользователю предлагается записать объект
//
// Параметры:
// 	- Форма - обычная форма
//
// Возвращаемое значение - булево, 
//		Истина, если ссылка была, или ее удалось получить, 
//		Ложь - в противном случае
//
Функция ДоступнаСсылкаВФормеОбъекта(Форма) Экспорт
	
	Если Не Форма.ЭтоНовый() Тогда
		Возврат Истина;	
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПользовательСогласен("Данные еще не записаны. 
		|Выполнение действия возможно только после записи данных. Записать?") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Форма.ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Форма.ЗаписатьВФорме() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецЕсли

Функция ТребуетсяОбновлениеИнформационнойБазы() Экспорт
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	
	Возврат ТекущаяВерсияИБ <> Метаданные.Версия И ТекущаяВерсияИБ <> "";
	
КонецФункции

Функция ВернутьСписокТиповСсылокДляФормированияФИО() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	МассивТипов.Добавить(Тип("СправочникСсылка.СотрудникиОрганизаций"));
	МассивТипов.Добавить(Тип("СправочникСсылка.КартыПропускнойСистемы"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

Функция ВернутьСписокТиповОбъектовДляФормированияФИО() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникОбъект.ФизическиеЛица"));
	МассивТипов.Добавить(Тип("СправочникОбъект.СотрудникиОрганизаций"));
	МассивТипов.Добавить(Тип("СправочникОбъект.КартыПропускнойСистемы"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

Функция ДублиФизлицТабличнойЧасти(ТабличнаяЧастьСотрудники) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", ТабличнаяЧастьСотрудники.Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабличнаяЧастьСотрудники.Сотрудник,
	|	ТабличнаяЧастьСотрудники.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТабличнаяЧастьСотрудники
	|ИЗ
	|	&Сотрудники КАК ТабличнаяЧастьСотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументСотрудники.Сотрудник.Физлицо КАК Физлицо,
	|	ДокументСотрудники.Сотрудник,
	|	ДокументСотрудники.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ДокументСотрудники
	|ИЗ
	|	ТабличнаяЧастьСотрудники КАК ДокументСотрудники
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатистикаСотрудников.Физлицо,
	|	СтатистикаСотрудников.НомерСтроки
	|ПОМЕСТИТЬ ДублиФизлиц
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументСотрудники.Физлицо КАК Физлицо,
	|		КОЛИЧЕСТВО(ДокументСотрудники.Сотрудник) КАК КоличествоСотрудников,
	|		МИНИМУМ(ДокументСотрудники.НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		ДокументСотрудники КАК ДокументСотрудники
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДокументСотрудники.Физлицо) КАК СтатистикаСотрудников
	|ГДЕ
	|	СтатистикаСотрудников.КоличествоСотрудников > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДублиФизлиц.Физлицо,
	|	ДублиФизлиц.НомерСтроки КАК НомерПервойСтроки,
	|	ДокументСотрудники.НомерСтроки
	|ИЗ
	|	ДублиФизлиц КАК ДублиФизлиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументСотрудники КАК ДокументСотрудники
	|		ПО ДублиФизлиц.Физлицо = ДокументСотрудники.Физлицо
	|			И ДублиФизлиц.НомерСтроки < ДокументСотрудники.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПервойСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Копирует переданный массив и возвращает новый массив
//
// Параметры:
//  МассивИсточник - Массив - источник для получения нового массива копированием
//  
// Возвращаемое значение:
//  НовыйМассив - Массив - массив, полученный копированием из переданного массива
// 
Функция СкопироватьМассив(МассивИсточник) Экспорт
	
	НовыйМассив = Новый Массив;
	
	Для Каждого ЭлементМассива ИЗ МассивИсточник Цикл
		
		НовыйМассив.Добавить(ЭлементМассива);
		
	КонецЦикла; 
	
	Возврат НовыйМассив;
КонецФункции 

Функция НайтиСтрокуВКоллекции(КоллекцияСтрок, Значение, ИмяПоля) Экспорт
	
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		Если СтрокаКоллекции[ИмяПоля] = Значение Тогда
			Возврат СтрокаКоллекции;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиСтрокуВКоллекции

// Функция определяет есть ли в указанной таблице информационной базы записи, 
//  удовлетворяющие определенному условию
//
Функция ЕстьДанныеПоОтбору(ИмяТаблицы, СтруктураОтбора = Неопределено, ТолькоРазрешенные = Истина) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ " + ?(ТолькоРазрешенные, "РАЗРЕШЕННЫЕ", "") + " ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	" + ИмяТаблицы;
	
	Если СтруктураОтбора <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ ";
		Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
			ТекстЗапроса = ТекстЗапроса + КлючИЗначение.Ключ + " = &" + КлючИЗначение.Ключ + " И ";
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстЗапроса, 2);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции // ЕстьДанныеПоОтбору

// Функция определяет начало месяца, "открытого" для операций,
//  влияющих на расчет зарплаты
//
Функция ГраницаТекущегоПериодаРасчетаЗарплаты() Экспорт
	
	Сегодня = ТекущаяДата();
	
	Возврат НачалоМесяца(
				?(День(Сегодня) <= ОбщегоНазначенияЗК.ПолучитьЗначениеПеременной("глДатаСменыПериодаРасчетаЗарплаты"), 
					ДобавитьМесяц(Сегодня, -1), 
					Сегодня));
	
КонецФункции

Функция ПодключитьВнешнююФормуСамообслуживанияСотрудников(Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РольДоступна(Метаданные.Роли.Сотрудник) 
		Или ПолучитьФункциональнуюОпцию("НеИспользоватьВнешнююФормуСамообслуживанияСотрудников") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФормаСамообслуживанияСотрудников = Константы.ФормаСамообслуживанияСотрудников.Получить();
	Если Не ЗначениеЗаполнено(ФормаСамообслуживанияСотрудников) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Внешняя форма самообслуживания сотрудников не указана'"), , , , Отказ);
		Возврат Ложь;
	КонецЕсли;
	
	ИспользоватьБезопасныйРежим = Не ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(ФормаСамообслуживанияСотрудников, "ОтключитьБезопасныйРежим");
	
	ВнешниеОбработки.Подключить(
		ПолучитьНавигационнуюСсылку(ФормаСамообслуживанияСотрудников, "ХранилищеВнешнейОбработки"),
		"ФормаСамообслуживанияСотрудников", ИспользоватьБезопасныйРежим);
		
	Возврат Истина;
		
КонецФункции

// Процедура определяет ситуацию, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Также новый уникальный номер присваивается при изменении организации документа.
//
// Параметры:
//		ДокументОбъект - контекст документа,из которого вызвана процедура
//
Процедура ПроверитьНомерДокументаПередЗаписью(ДокументОбъект) Экспорт
	
	Если ДокументОбъект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектБД_Дата = ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(ДокументОбъект.Ссылка, "Дата");
	
	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументОбъект.Метаданные().ПериодичностьНомера;
	
	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(ОбъектБД_Дата) - НачалоГода(ДокументОбъект.Дата);
		
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(ОбъектБД_Дата) - НачалоКвартала(ДокументОбъект.Дата);
		
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(ОбъектБД_Дата) - НачалоМесяца(ДокументОбъект.Дата);
		
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачалоДня(ОбъектБД_Дата) - НачалоДня(ДокументОбъект.Дата);
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	// Если разность не равна 0, тогда нужно установить новый номер документа
	Если РазностьДат <> 0 Тогда
		ДокументОбъект.Номер = "";
	КонецЕсли;
	
КонецПроцедуры

// Процедура определяет ситуацию, когда при изменении организации нужно изменить префикс,
// и в этом случае присваивает документу новый уникальный номер.
//
// Параметры:
//		ДокументОбъект - контекст документа,из которого вызвана процедура
//
Процедура СброситьНомерДокументаПередЗаписьюПриИзмененииОрганизации(ДокументОбъект) Экспорт
	
	Если ДокументОбъект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектБД_Организация = ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(ДокументОбъект.Ссылка, "Организация");
	
	Если Не ПустаяСтрока(ДокументОбъект.Номер) И ОбъектБД_Организация <> ДокументОбъект.Организация Тогда
		Префикс = ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(ДокументОбъект.Организация, "Префикс");
		ОбщегоНазначенияЗК.ДобавитьПрефиксУзла(Префикс);
		ДлинаПрефикса = СтрДлина(Префикс);
		Если ДлинаПрефикса = 0 ИЛИ Лев(ДокументОбъект.Номер, ДлинаПрефикса) <> Префикс Тогда
			ДокументОбъект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ЗАПОЛНЕНИЯ ГЛОБАЛЬНЫХ ПЕРЕМЕННЫХ

// Процедура инициализирует глобальную переменную УчетнаяПолитикаОтраженияЗарплатыВУчете.
//
// Параметры:
//  Нет.
//
Функция ЗаполнениеУчетнойПолитикиНалоговомуУчету() Экспорт
	
	УчетнаяПолитикаПоНалоговомуУчету = Новый Соответствие;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
	
		УчетнаяПолитикаПоНалоговомуУчетуСоответствие = Новый Соответствие;
		УчетнаяПолитикаПоНалоговомуУчетуСоответствие.Вставить(Справочники.Организации.ПустаяСсылка(),Новый Структура("УСН,ОбъектНалогообложенияУСН,ОрганизацияЯвляетсяПлательщикомЕНВД,УплачиватьДобровольныеВзносыВФСС,ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете, ТочностьИсчисленияЕСН, ТочностьИсчисленияПФР, ПорядокРасчетаВычетаФБ",Ложь,Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка(),Ложь,Ложь,Перечисления.ВариантыУчетаРасходовПоНалогамСФОТВНалоговомУчете.ПустаяСсылка(),Перечисления.ПорядкиОкругленияЕСН.Точно,Перечисления.ПорядкиОкругленияЕСН.Точно, Перечисления.ПорядкиИсчисленияВычетаПоЕСН.ПоСуммеСтраховыхВзносов));
		УчетнаяПолитикаПоНалоговомуУчету.Вставить('00010101',УчетнаяПолитикаПоНалоговомуУчетуСоответствие);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ПериодыУчетнойПолитики.Период) КАК КонечныйПериод,
		|	МИНИМУМ(ПериодыУчетнойПолитики.Период) КАК НачальныйПериод
		|ИЗ
		|	(ВЫБРАТЬ
		|		УчетнаяПолитикаНалоговыйУчет.Период КАК Период
		|	ИЗ
		|		РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		УчетнаяПолитикаПоЕСН.Период
		|	ИЗ
		|		РегистрСведений.УчетнаяПолитикаПоЕСН КАК УчетнаяПолитикаПоЕСН) КАК ПериодыУчетнойПолитики";
		Выборка = Запрос.Выполнить().Выбрать();
		ПериодыТекст =
		"ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Период
		|ПОМЕСТИТЬ ВТПериоды";
		Если Выборка.Следующий() Тогда
			НачальныйПериод = Выборка.НачальныйПериод;
			КонечныйПериод = Выборка.КонечныйПериод;
			Если ЗначениеЗаполнено(НачальныйПериод) Тогда
				
				// скорректируем даты, чтобы ограничить количество записей
				НачальныйПериод = Макс(НачальныйПериод, НачалоМесяца(ДобавитьМесяц(ОбщегоНазначенияЗК.ПолучитьРабочуюДату(), -210)));
				КонечныйПериод = Мин(КонечныйПериод, НачалоМесяца(ДобавитьМесяц(ОбщегоНазначенияЗК.ПолучитьРабочуюДату(),36)));
				КонечныйПериод = Макс(КонечныйПериод, НачальныйПериод);
				
				// конец месяца налогового периода
				КонецМесяца = КонецМесяца(НачальныйПериод);
				// первый месяц
				ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")КАК Период ПОМЕСТИТЬ ВТПериоды";
				// прибавим остальные месяцы
				Пока КонецМесяца < КонечныйПериод Цикл
					КонецМесяца = КонецМесяца(КонецМесяца+1);
			    	ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ВТПериоды.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Период,
		|	Организации.Ссылка КАК Организация,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.УСН, ЛОЖЬ) КАК УСН,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомЕНВД, ЛОЖЬ) КАК ОрганизацияЯвляетсяПлательщикомЕНВД,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ОбъектНалогообложенияУСН, ЗНАЧЕНИЕ(Перечисление.ОбъектыНалогообложенияПоУСН.ПустаяСсылка)) КАК ОбъектНалогообложенияУСН,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС, ЛОЖЬ) КАК УплачиватьДобровольныеВзносыВФСС,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаРасходовПоНалогамСФОТВНалоговомУчете.ПустаяСсылка)) КАК ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете,
		|	ЕСТЬNULL(УчетнаяПолитикаПоЕСН.ТочностьИсчисленияЕСН, ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругленияЕСН.Точно)) КАК ТочностьИсчисленияЕСН,
		|	ЕСТЬNULL(УчетнаяПолитикаПоЕСН.ТочностьИсчисленияПФР, ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругленияЕСН.Точно)) КАК ТочностьИсчисленияПФР,
		|	ЕСТЬNULL(УчетнаяПолитикаПоЕСН.ПорядокРасчетаВычетаФБ, ЗНАЧЕНИЕ(Перечисление.ПорядкиИсчисленияВычетаПоЕСН.ПоСуммеСтраховыхВзносов)) КАК ПорядокРасчетаВычетаФБ
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериоды КАК ВТПериоды
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			УчетнаяПолитикаНалоговыйУчет.Организация КАК Организация,
		|			МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ДатаРегистра,
		|			ВТПериоды.Период КАК Период
		|		ИЗ
		|			ВТПериоды КАК ВТПериоды
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|				ПО ВТПериоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период
		|		
		|		СГРУППИРОВАТЬ ПО
		|			УчетнаяПолитикаНалоговыйУчет.Организация,
		|			ВТПериоды.Период) КАК ДатыУстановленияУчПолитикиНалоговыйУчет
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|			ПО ДатыУстановленияУчПолитикиНалоговыйУчет.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
		|				И ДатыУстановленияУчПолитикиНалоговыйУчет.ДатаРегистра = УчетнаяПолитикаНалоговыйУчет.Период
		|		ПО (ВЫБОР
		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Организации.Ссылка
		|				ИНАЧЕ Организации.ГоловнаяОрганизация
		|			КОНЕЦ = ДатыУстановленияУчПолитикиНалоговыйУчет.Организация)
		|			И (ВТПериоды.Период = ДатыУстановленияУчПолитикиНалоговыйУчет.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			УчетнаяПолитикаПоЕСН.Организация КАК Организация,
		|			МАКСИМУМ(УчетнаяПолитикаПоЕСН.Период) КАК ДатаРегистра,
		|			ВТПериоды.Период КАК Период
		|		ИЗ
		|			ВТПериоды КАК ВТПериоды
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоЕСН КАК УчетнаяПолитикаПоЕСН
		|				ПО ВТПериоды.Период >= УчетнаяПолитикаПоЕСН.Период
		|		
		|		СГРУППИРОВАТЬ ПО
		|			УчетнаяПолитикаПоЕСН.Организация,
		|			ВТПериоды.Период) КАК ДатыУстановленияУчПолитикиЕСН
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоЕСН КАК УчетнаяПолитикаПоЕСН
		|			ПО ДатыУстановленияУчПолитикиЕСН.Организация = УчетнаяПолитикаПоЕСН.Организация
		|				И ДатыУстановленияУчПолитикиЕСН.ДатаРегистра = УчетнаяПолитикаПоЕСН.Период
		|		ПО (ВЫБОР
		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Организации.Ссылка
		|				ИНАЧЕ Организации.ГоловнаяОрганизация
		|			КОНЕЦ = ДатыУстановленияУчПолитикиЕСН.Организация)
		|			И (ВТПериоды.Период = ДатыУстановленияУчПолитикиЕСН.Период)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Организация";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Период") Цикл
							
			Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
				Структура = Новый Структура("УСН,ОбъектНалогообложенияУСН,ОрганизацияЯвляетсяПлательщикомЕНВД,УплачиватьДобровольныеВзносыВФСС,ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете, ТочностьИсчисленияЕСН, ТочностьИсчисленияПФР, ПорядокРасчетаВычетаФБ");
				ЗаполнитьЗначенияСвойств(Структура,Выборка);
				УчетнаяПолитикаПоНалоговомуУчетуСоответствие.Вставить(Выборка.Организация,Структура);
			КонецЦикла;
			УчетнаяПолитикаПоНалоговомуУчету.Вставить(?(ЗначениеЗаполнено(Выборка.Период),КонецМесяца(Выборка.Период),Выборка.Период),УчетнаяПолитикаПоНалоговомуУчетуСоответствие);
			УчетнаяПолитикаПоНалоговомуУчетуСоответствие = Новый Соответствие;
			УчетнаяПолитикаПоНалоговомуУчетуСоответствие.Вставить(Справочники.Организации.ПустаяСсылка(),Новый Структура("УСН,ОбъектНалогообложенияУСН,ОрганизацияЯвляетсяПлательщикомЕНВД,УплачиватьДобровольныеВзносыВФСС,ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете, ТочностьИсчисленияЕСН, ТочностьИсчисленияПФР, ПорядокРасчетаВычетаФБ",Ложь,Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка(),Ложь,Ложь,Перечисления.ВариантыУчетаРасходовПоНалогамСФОТВНалоговомУчете.ПустаяСсылка(), Перечисления.ПорядкиОкругленияЕСН.Точно, Перечисления.ПорядкиОкругленияЕСН.Точно, Перечисления.ПорядкиИсчисленияВычетаПоЕСН.ПоСуммеСтраховыхВзносов));
					
		КонецЦикла;
		
	Иначе 
		УчетнаяПолитикаПоНалоговомуУчетуСоответствие = Новый Соответствие;
		УчетнаяПолитикаПоНалоговомуУчетуСоответствие.Вставить("",Новый Структура("УСН,ОбъектНалогообложенияУСН,ОрганизацияЯвляетсяПлательщикомЕНВД,УплачиватьДобровольныеВзносыВФСС,ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете, ТочностьИсчисленияЕСН, ТочностьИсчисленияПФР, ПорядокРасчетаВычетаФБ",Ложь,Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка(),Ложь,Ложь,Перечисления.ВариантыУчетаРасходовПоНалогамСФОТВНалоговомУчете.ПустаяСсылка(),Перечисления.ПорядкиОкругленияЕСН.Точно,Перечисления.ПорядкиОкругленияЕСН.Точно, Перечисления.ПорядкиИсчисленияВычетаПоЕСН.ПоСуммеСтраховыхВзносов));
		УчетнаяПолитикаПоНалоговомуУчету.Вставить('00010101',УчетнаяПолитикаПоНалоговомуУчетуСоответствие);
	КонецЕсли; 
    
	Возврат УчетнаяПолитикаПоНалоговомуУчету;
	
КонецФункции// ЗаполнениеУчетнойПолитикиНалоговомуУчету

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ПОДПИСОК НА СОБЫТИЯ

Процедура ПриЗаписиПодчиненногоПодразделенияПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка ИЛИ Источник.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	// отбираем все подразделения ненулевого уровня
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Подразделения.Ссылка,
	|	Подразделения.Родитель
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.Родитель <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПодчиненныеПодразделения = РегистрыСведений.ПодчиненныеПодразделения.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		// собираем для каждого подразделения ненулевого уровня вышестоящие подразделения
		Родитель = Выборка.Родитель;
		Пока ЗначениеЗаполнено(Родитель) Цикл
			НоваяЗапись = ПодчиненныеПодразделения.Добавить();
			НоваяЗапись.Подразделение = Родитель;
			НоваяЗапись.ПодчиненноеПодразделение = Выборка.Ссылка;
			Родитель = ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(Родитель, "Родитель");
		КонецЦикла;
	КонецЦикла;
	
	ПодчиненныеПодразделения.Записать(Истина);
	
КонецПроцедуры // ПриЗаписиПодчиненногоПодразделенияПриЗаписи

Процедура ПриЗаписиПодчиненногоПодразделенияОрганизацииПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка ИЛИ Источник.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Организация = Источник.Владелец;
	// отбираем все подразделения организации ненулевого уровня
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	ПодразделенияОрганизаций.Родитель
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Родитель <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И ПодразделенияОрганизаций.Владелец = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПодчиненныеПодразделенияОрганизаций = РегистрыСведений.ПодчиненныеПодразделенияОрганизаций.СоздатьНаборЗаписей();
	ПодчиненныеПодразделенияОрганизаций.Отбор.Организация.Использование = Истина;
	ПодчиненныеПодразделенияОрганизаций.Отбор.Организация.ВидСравнения = ВидСравнения.Равно;
	ПодчиненныеПодразделенияОрганизаций.Отбор.Организация.Значение = Организация;
	
	Пока Выборка.Следующий() Цикл
		// собираем для каждого подразделения организации ненулевого уровня вышестоящие подразделения
		Родитель = Выборка.Родитель;
		Пока ЗначениеЗаполнено(Родитель) Цикл
			НоваяЗапись = ПодчиненныеПодразделенияОрганизаций.Добавить();
			НоваяЗапись.Организация = Организация;
			НоваяЗапись.Подразделение = Родитель;
			НоваяЗапись.ПодчиненноеПодразделение = Выборка.Ссылка;
			Родитель = ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(Родитель, "Родитель");
		КонецЦикла;
	КонецЦикла;
	
	ПодчиненныеПодразделенияОрганизаций.Записать(Истина);
	
КонецПроцедуры // ПриЗаписиПодчиненногоПодразделенияОрганизацииПриЗаписи

// работа с наборами записей регистров сведений

Процедура ПрочитатьНаборЗаписейРегистраСведений(НаборЗаписей, Отборы) Экспорт
	
	Для Каждого Отбор Из Отборы Цикл
		НаборЗаписей.Отбор[Отбор.Ключ].Установить(Отбор.Значение);
	КонецЦикла;
	
	НаборЗаписей.Прочитать();
	
КонецПроцедуры // ПрочитатьНаборЗаписейРегистраСведений

Процедура ПрочитатьНаборЗаписейПериодическогоРегистраСведений(НаборЗаписей, Период, Отбор = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(Период) КАК Период
	|ИЗ
	|	РегистрСведений." + НаборЗаписей.Метаданные().Имя + "
	|ГДЕ
	|	Период <= &Период";
	
	Если Отбор <> Неопределено Тогда
		Для Каждого КлючИЗначение Из Отбор Цикл
			ТекстЗапроса = ТекстЗапроса + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(" И %1 = &%1", КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Период", Период);
	
	Если Отбор <> Неопределено Тогда
		Для Каждого КлючИЗначение Из Отбор Цикл
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		Если Отбор <> Неопределено Тогда
			Для Каждого КлючИЗначение Из Отбор Цикл
				НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		НаборЗаписей.Прочитать();
	КонецЕсли;
	
КонецПроцедуры // ПрочитатьНаборЗаписейПериодическогоРегистраСведений

Процедура ЗаписатьНаборЗаписейПериодическогоРегистраСведений(НаборЗаписей, Отборы = Неопределено) Экспорт
	
	Если Не НаборЗаписей.Модифицированность() Тогда
		Возврат;
	КонецЕсли;
	
	// Если набор модифицирован и при этом в нем нет строк, 
	// нужно записать пустой набор
	Если НаборЗаписей.Количество() = 0 Тогда
		Для Каждого Отбор Из Отборы Цикл
			НаборЗаписей.Отбор[Отбор.Ключ].Установить(Отбор.Значение);
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		Возврат;
	КонецЕсли;
		
	Менеджер = РегистрыСведений[НаборЗаписей.Метаданные().Имя];
	
	// все строки набора группируем по отдельным наборам для каждого периода
	НаборыПоПериодам = Новый Соответствие;
	Для Каждого СтрокаНабора Из НаборЗаписей Цикл
		// формы редактирования реализованы так, что при любой попытке редактирования добавляют запись в набор
		// пока исключаем записи с пустым периодом
		Если ЗначениеЗаполнено(СтрокаНабора.Период) Тогда
			НаборПериода = НаборыПоПериодам[СтрокаНабора.Период];
			Если НаборПериода = Неопределено Тогда
				НаборПериода = Менеджер.СоздатьНаборЗаписей();
				НаборыПоПериодам.Вставить(СтрокаНабора.Период, НаборПериода);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НаборПериода.Добавить(), СтрокаНабора);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементСоответствия Из НаборыПоПериодам Цикл
		НаборПериода = ЭлементСоответствия.Значение;
		// устанавливаем отборы
		Для Каждого Отбор Из Отборы Цикл
			НаборПериода.Отбор[Отбор.Ключ].Установить(Отбор.Значение);
		КонецЦикла;
		НаборПериода.Отбор["Период"].Установить(ЭлементСоответствия.Ключ);
		// заполняем поля значениями отборов
		Для Каждого СтрокаНабора Из НаборПериода Цикл
			Для Каждого Отбор Из Отборы Цикл
				СтрокаНабора[Отбор.Ключ] = Отбор.Значение;
			КонецЦикла;
			СтрокаНабора["Период"] = ЭлементСоответствия.Ключ;
		КонецЦикла;
		НаборПериода.Записать(Истина);
	КонецЦикла;
		
КонецПроцедуры


Функция ЗначениеВСпискеЗначений(Значение, Представление = "") Экспорт
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Значение, Представление);
	
	Возврат СписокЗначений;
	
КонецФункции

// Используется для установки значений отбора по умолчанию из настроек пользователя
// СтруктураОтбораСпискаПоУмолчанию - структура параметров элемента отбора
// Возможные параметры отбора по умолчанию:
//		ИндексСостояния
//		ПоПодразделению
//		ПоОрганизации
//		ПоПодразделениюОрганизации
// Параметры
// ФормаСписка - форма списка, на которой размещены элементы отбора
Процедура ОтборСпискаПоУмолчанию(ФормаСписка) Экспорт
	
	СтруктураОтбораСпискаПоУмолчанию = Новый Структура;
	
	// для руководителей подразделения - только не подготовленные
	// для руководителя компании - только не утвержденные
	Если РольДоступна("РуководительПодразделения") Тогда
		ИндексСостояния = 1;
	ИначеЕсли РольДоступна("РуководительКомпании") Тогда
		ИндексСостояния = 2;
	КонецЕсли;
	
	СтруктураОтбораСпискаПоУмолчанию.Вставить("ПоСостоянию", ИндексСостояния);
	
	СтруктураОтбораСпискаПоУмолчанию.Вставить("ПоПодразделению",
		УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
		глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение"));
	
	СтруктураОтбораСпискаПоУмолчанию.Вставить("ПоОрганизации",
		УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
		глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"));
	
	СтруктураОтбораСпискаПоУмолчанию.Вставить("ПоПодразделениюОрганизации",
		УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
		глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации"));
	
	Для каждого СтрокаСтруктуры Из СтруктураОтбораСпискаПоУмолчанию Цикл
		Если ЗначениеЗаполнено(СтрокаСтруктуры.Значение)
			И НЕ ФормаСписка.Элементы.Найти(СтрокаСтруктуры.Ключ) = Неопределено Тогда
			
			ФормаСписка[СтрокаСтруктуры.Ключ] = СтруктураОтбораСпискаПоУмолчанию[СтрокаСтруктуры.Ключ];
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// разбивает текст на строки определенной длины, с переносом по словам, для вывода в печатные формы
//
Функция СформироватьСтрокиДляПечатнойФормы(Знач ВходнойТекст, ДлинаСтроки1, ДлинаСтроки2=Неопределено, ДлинаСтроки3=Неопределено,
			ДлинаСтроки4=Неопределено, ДлинаСтроки5=Неопределено, ДлинаСтроки6=Неопределено, ДлинаСтроки7=Неопределено,
			ДлинаСтроки8=Неопределено, ДлинаСтроки9=Неопределено, ДлинаСтроки10=Неопределено) Экспорт
			
	МассивДлинСтрок = Новый Массив;
	МассивДлинСтрок.Добавить(ДлинаСтроки1);
	Если ДлинаСтроки2 <> Неопределено Тогда
		МассивДлинСтрок.Добавить(ДлинаСтроки2);
		Если ДлинаСтроки3 <> Неопределено Тогда
			МассивДлинСтрок.Добавить(ДлинаСтроки3);
			Если ДлинаСтроки4 <> Неопределено Тогда
				МассивДлинСтрок.Добавить(ДлинаСтроки4);
				Если ДлинаСтроки5 <> Неопределено Тогда
					МассивДлинСтрок.Добавить(ДлинаСтроки5);
					Если ДлинаСтроки6 <> Неопределено Тогда
						МассивДлинСтрок.Добавить(ДлинаСтроки6);
						Если ДлинаСтроки7 <> Неопределено Тогда
							МассивДлинСтрок.Добавить(ДлинаСтроки7);
							Если ДлинаСтроки8 <> Неопределено Тогда
								МассивДлинСтрок.Добавить(ДлинаСтроки8);
								Если ДлинаСтроки9 <> Неопределено Тогда
									МассивДлинСтрок.Добавить(ДлинаСтроки9);
									Если ДлинаСтроки10 <> Неопределено Тогда
										МассивДлинСтрок.Добавить(ДлинаСтроки10);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВозвращаемыйМассив = Новый Массив;
	
	ВходнойТекст = СтрЗаменить(ВходнойТекст, Символы.ПС, " ");
	МассивСлов = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(ВходнойТекст, " ");
	
	ИндексФормируемойСтроки = 0;
	ДопустимаяДлинаФормируемойСтроки = МассивДлинСтрок[0];
	ВременнаяСтрока = "";
	ПредВременнаяСтрока = "";
	Для Каждого ТекущееСлово Из МассивСлов Цикл
		ВременнаяСтрока = ВременнаяСтрока + ТекущееСлово + " ";
		
		Если СтрДлина(ВременнаяСтрока) >= ДопустимаяДлинаФормируемойСтроки Тогда
			ВозвращаемыйМассив.Добавить(ПредВременнаяСтрока);
			ИндексФормируемойСтроки = ВозвращаемыйМассив.Количество()-1;
			Если МассивДлинСтрок.Количество() > ИндексФормируемойСтроки Тогда
				ДопустимаяДлинаФормируемойСтроки = МассивДлинСтрок[ИндексФормируемойСтроки];
			Иначе
				ДопустимаяДлинаФормируемойСтроки = МассивДлинСтрок[МассивДлинСтрок.Количество()-1];
			КонецЕсли;
			ВременнаяСтрока = ТекущееСлово + " ";
		КонецЕсли;
		ПредВременнаяСтрока = ВременнаяСтрока;
	КонецЦикла;
	ВозвращаемыйМассив.Добавить(ВременнаяСтрока);
	
	Пока ВозвращаемыйМассив.Количество() < МассивДлинСтрок.Количество() Цикл
		ВозвращаемыйМассив.Добавить("");
	КонецЦикла;
	Возврат ВозвращаемыйМассив;
КонецФункции

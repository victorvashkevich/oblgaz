
Функция СравнитьТаблицыНаборовЗаписей(ТаблицаЗначений1, ТаблицаЗначений2) Экспорт

	Если ТипЗнч(ТаблицаЗначений1) <> Тип("ТаблицаЗначений") ИЛИ ТипЗнч(ТаблицаЗначений2) <> Тип("ТаблицаЗначений") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если ТаблицаЗначений1.Количество() <> ТаблицаЗначений2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли; 

	Если ТаблицаЗначений1.Колонки.Количество() <> ТаблицаЗначений2.Колонки.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим поля
	Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
		Если ТаблицаЗначений2.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
		Если ТаблицаЗначений1.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	// сформируем строку индекса для оптимизации поиска по таблице значений
	СтрокаИндекса = "";
	Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
		Если СтрокаИндекса = "" Тогда
			СтрокаИндекса = Колонка.Имя;
		Иначе
			СтрокаИндекса = СтрокаИндекса+","+Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	// добавим индекс
	ТаблицаЗначений2.Индексы.Добавить(СтрокаИндекса);
	
	// Проверим записи
	Для каждого СтрокаТаблицы Из ТаблицаЗначений1 Цикл
		СтруктураПоиска = Новый Структура;
		Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
			СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
		КонецЦикла;
		СтрокиТаблицы2 = ТаблицаЗначений2.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицы2.Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла;
	
	// сформируем строку индекса для оптимизации поиска по таблице значений
	СтрокаИндекса = "";
	Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
		Если СтрокаИндекса = "" Тогда
			СтрокаИндекса = Колонка.Имя;
		Иначе
			СтрокаИндекса = СтрокаИндекса+","+Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	// добавим индекс
	ТаблицаЗначений1.Индексы.Добавить(СтрокаИндекса);
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений2 Цикл
		СтруктураПоиска = Новый Структура;
		Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
			СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
		КонецЦикла;
		СтрокиТаблицы1 = ТаблицаЗначений1.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицы1.Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // СравнитьТаблицыЗначений()

Функция ПолучитьСтруктуруОтборовНабораЗаписей(ПраваДоступаПользователей) Экспорт
	
	СтруктураОтбора = Новый Структура;
	
	Для каждого ЭлементОтбора Из ПраваДоступаПользователей.Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			СтруктураОтбора.Вставить(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураОтбора;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАНИЯ МЕХАНИЗМА НАСТРОЙКИ ПРАВ ДОСТУПА

// Проверка доступности роли расчетчика
// это или РасчетчикРегламентированнойЗарплаты или полные права
// Применяется для проверки прав на доступ к расчетным регистрам, например, 
// в формах и при выводе на печать
// Возвращаемое значение:
//	булево - истина если есть доступ к "расчетным" данным
Функция ДоступнаРольРасчетчикаРегл() Экспорт
	Возврат РольДоступна("РасчетчикРегламентированнойЗарплаты") 
			или РольДоступна("РасчетчикРегламентированнойЗарплатыБезОграниченияПрав")
			или РольДоступна("ПолныеПрава");
	
КонецФункции  //ДоступнаРольРасчетчика
		
// Проверка доступности роли кадровика
// это или КадровикРегламентированныхДанных или полные права
// Применяется для проверки прав на доступ к расчетным регистрам, например, 
// в формах и при выводе на печать
// Возвращаемое значение:
//	булево - истина если есть доступ к "расчетным" данным
Функция ДоступнаРольКадровикаРегл() Экспорт
	Возврат РольДоступна("КадровикРегламентированныхДанных") 
			или РольДоступна("КадровикРегламентированныхДанныхБезОграниченияПрав") 			
			или РольДоступна("ПолныеПрава");
	
КонецФункции  //ДоступнаРольКадровикаРегл		

//vvv
Функция ДоступнаРольЭкономиста() Экспорт
	Возврат РольДоступна("ЭкономистРегламентированнойЗарплатыБезОграниченияПрав")
		Или РольДоступна("ЭкономистРегламентированнойЗарплаты")
КонецФункции  //ДоступнаРольЭкономиста		
//
// Проверка доступности роли "управленческого" кадровика
// это или КадровикУправленческихДанных или полные права
// Применяется для проверки прав на доступ к кадровым даннам, например, 
// в формах или при выводе на печать
// Возвращаемое значение:
//	булево - истина если есть доступ к "кадровым" данным
Функция ДоступнаРольКадровикаУпр() Экспорт
	Возврат РольДоступна("КадровикУправленческихДанных") 
			или РольДоступна("КадровикУправленческихДанныхБезОграниченияПрав") 
			или РольДоступна("ПолныеПрава");
	
КонецФункции  //ДоступнаРольРасчетчика

// Проверка доступности роли менеджера по набору персонала 
// это или МенеджерПоНаборуПерсонала или полные права
// Применяется для проверки прав на доступ к соотв. даннам
// Возвращаемое значение:
//	булево - истина если есть доступ
Функция ДоступнаРольМенеджераПоНабору() Экспорт
	Возврат РольДоступна("МенеджерПоНаборуПерсонала") 
			или РольДоступна("МенеджерПоНаборуПерсоналаБезОграниченияПрав") 
			или РольДоступна("ПолныеПрава");
	
КонецФункции // ДоступнаРольМенеджераПоНабору

//
Функция ПолучитьВидОбъектаДоступа(ОбъектДоступа) Экспорт

	Если ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.Организации") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.Организации;
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.ГруппыЗаявокКандидатов") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.ЗаявкиКандидатов;
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.ГруппыФизическихЛиц") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.ФизическиеЛица;
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.ВнешниеОбработки;
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.Подразделения") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.Подразделения;
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.ПодразделенияОрганизаций;
	Иначе
		Возврат Перечисления.ВидыОбъектовДоступа.ПустаяСсылка();
	КонецЕсли;

КонецФункции

/////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАНИЯ МЕХАНИЗМА ДАТЫ ЗАПРЕТА РЕДАКТИРОВАНИЯ

Функция ПолучитьДатуПроверкиПоТипуДокумента(ДокументОбъект, ПараметрыПроверкиДокумента)Экспорт
	
	Если ПараметрыПроверкиДокумента.МетаданныеДокумента = Метаданные.Документы.ВводПроцентаДеятельностиЕНВД Тогда
		Если НЕ ДокументОбъект.ВводДанныхПоПериодам Тогда
			Возврат Мин(ДокументОбъект.Дата, ДокументОбъект.Период);
		Иначе
			Если ТипЗнч(ДокументОбъект) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
				ТаблЧасть = ДокументОбъект.РаботникиОрганизации.Выгрузить();
			Иначе
				ТаблЧасть = ДокументОбъект.РаботникиОрганизации.Выгрузить(, "МесяцРегистрации");
			КонецЕсли;
			ТаблЧасть.Сортировать("МесяцРегистрации Возр");
			Если ТаблЧасть.Количество() > 0 Тогда
				Возврат Мин(ТаблЧасть[0].МесяцРегистрации, ДокументОбъект.Дата);
			Иначе
				Возврат ДокументОбъект.Дата;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает "эффективную" дату документа, которая будет сравниваться с установленной датой запрета
Функция ПолучитьДатуДляПроверкиДокумента(ДокументОбъект, ПараметрыПроверкиДокумента) Экспорт
	
	// Определение даты для "особых" случаев.
	ДатаДляПроверки = ПолучитьДатуПроверкиПоТипуДокумента(ДокументОбъект, ПараметрыПроверкиДокумента);
	
	Если ЗначениеЗаполнено(ДатаДляПроверки) Тогда
		Возврат ДатаДляПроверки;
	КонецЕсли;
	
	// Значение даты не определено. Рассчитывается для общему алгоритму.
	Если ПараметрыПроверкиДокумента.Свойство("ИмяПоляПериодаРегистрации") Тогда
		Возврат Мин(ДокументОбъект.Дата, ДокументОбъект[ПараметрыПроверкиДокумента.ИмяПоляПериодаРегистрации]);
	Иначе
		Возврат ДокументОбъект.Дата;
	КонецЕсли;
	
КонецФункции

// Процедура выполняет проверку возможности записи документов
// с учетом даты запрета изменения данных (даты запрета редактирования)
//
Процедура ПроверкаПериодаДокумента(ДокументОбъект, Отказ, РежимЗаписи) Экспорт
	
	СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
	
	// Для пользователя с полными правами проверок выполнять не нужно
	Если СоответствиеГраницЗапрета = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыПроверкиДокумента = ПолучитьПараметрыПроверкиДокумента(ДокументОбъект);
	
	Если Не ДокументОбъект.ЭтоНовый() Тогда
		СтараяВерсияДокумента = ПолучитьВерсиюДокументаПередИзменением(ДокументОбъект, ПараметрыПроверкиДокумента);
    	ПроверитьВерсиюДокумента(СтараяВерсияДокумента, ПараметрыПроверкиДокумента, СоответствиеГраницЗапрета, Отказ);
	КонецЕсли;
			
	Если Не Отказ Тогда
		ПроверитьВерсиюДокумента(ДокументОбъект, ПараметрыПроверкиДокумента, СоответствиеГраницЗапрета, Отказ, РежимЗаписи);
	КонецЕсли; 
    
КонецПроцедуры // ПроверкаПериодаДокумента

// Процедура проверки версии документа на нарушение даты запрета
//
Процедура ПроверитьВерсиюДокумента(ДокументОбъект, ПараметрыПроверкиДокумента, СоответствиеГраницЗапрета, Отказ, РежимЗаписи = Неопределено) Экспорт
	
	Если ПараметрыПроверкиДокумента.ПроверятьПроведениеДокумента Тогда		
		ДокументПроведен = ДокументОбъект.Проведен ИЛИ ?(РежимЗаписи = Неопределено, ЛОЖЬ, РежимЗаписи = РежимЗаписиДокумента.Проведение);
		Если Не ДокументПроведен Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	// Не выполняется проверка дат запрета редактирования
	Если НЕ ПараметрыПроверкиДокумента.ПроверятьУправленческуюДатуЗапрета и
		НЕ ПараметрыПроверкиДокумента.ПроверятьРегламентированнуюДатуЗапрета Тогда
		
		Возврат;
	КонецЕсли;	
	
	ДатаДляПроверки = ПолучитьДатуДляПроверкиДокумента(ДокументОбъект, ПараметрыПроверкиДокумента);
	
	// Проверка регламентированной даты запрета
	Если ПараметрыПроверкиДокумента.ПроверятьРегламентированнуюДатуЗапрета Тогда	
		ГраницаПоОрганизации = СоответствиеГраницЗапрета[ДокументОбъект.Организация];
		
		// Если регламентированная дата запрета для регламентного документа не определена
		// то используется общая дата запрета изменения данных
		Если ГраницаПоОрганизации = Неопределено Тогда
			ГраницаПоОрганизации = СоответствиеГраницЗапрета["ОбщаяДатаЗапретаРедактирования"];
		КонецЕсли;
		
		Если НЕ ГраницаПоОрганизации = Неопределено 
			И ДатаДляПроверки <= КонецДня(ГраницаПоОрганизации)	Тогда
			
			Отказ = Истина;			
		КонецЕсли;		
	КонецЕсли;		    
	
	// Проверка управленческой даты запрета
	Если ПараметрыПроверкиДокумента.ПроверятьУправленческуюДатуЗапрета Тогда        
		ГраницаПериода = СоответствиеГраницЗапрета[Справочники.Организации.ПустаяСсылка()];       
		// Если управленческая дата запрета для управленческого документа не определена
		// то используется общая дата запрета изменения данных
		Если ГраницаПоОрганизации = Неопределено Тогда
			ГраницаПоОрганизации = СоответствиеГраницЗапрета["ОбщаяДатаЗапретаРедактирования"];
		КонецЕсли;
		
		Если ГраницаПериода <> Неопределено Тогда
			
			Если ДатаДляПроверки <= КонецДня(ГраницаПериода) Тогда
				Отказ = Истина;				
			КонецЕсли;         			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьВерсиюДокумента()

// Функция возвращает из БД версию документа до его изменения
//
Функция ПолучитьВерсиюДокументаПередИзменением(ДокументОбъект, ПараметрыПроверкиДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|Дата" 
	+ ?(ПараметрыПроверкиДокумента.ЕстьОрганизация, "," + Символы.ПС + "Организация КАК Организация", "")
	+ ?(ПараметрыПроверкиДокумента.ЕстьУправленческийУчет, "," + Символы.ПС + "ОтражатьВУправленческомУчете КАК ОтражатьВУправленческомУчете", "")
	+ ?(ПараметрыПроверкиДокумента.ЕстьБухгалтерскийУчет, "," + Символы.ПС + "ОтражатьВБухгалтерскомУчете КАК ОтражатьВБухгалтерскомУчете", "")
	+ ?(ПараметрыПроверкиДокумента.Свойство("ИмяПоляПериодаРегистрации"), "," + Символы.ПС + ПараметрыПроверкиДокумента.ИмяПоляПериодаРегистрации + " КАК " + ПараметрыПроверкиДокумента.ИмяПоляПериодаРегистрации, "")
	+ ?(ПараметрыПроверкиДокумента.ПроверятьПроведениеДокумента, "," + Символы.ПС + "Проведен КАК Проведен", "");
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ Документ." + ПараметрыПроверкиДокумента.МетаданныеДокумента.Имя + "
	|ГДЕ Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка;

	
КонецФункции // ПолучитьВерсиюДокументаПередИзменением()

Процедура ОпределитьНеобходимостьПроверкиПоПериодуРегистрации(ПараметрыПроверкиДокумента, МетаданныеДокумента)
	
	//vvv
	Если МетаданныеДокумента.Имя="СдельныйНаряд" ТОгда
		ПараметрыПроверкиДокумента.Вставить("ИмяПоляПериодаРегистрации", "Дата");
		Возврат;
	КонецЕсли;	
	//
	Если МетаданныеДокумента.Реквизиты.Найти("ПериодРегистрации") <> Неопределено Тогда
		ПараметрыПроверкиДокумента.Вставить("ИмяПоляПериодаРегистрации", "ПериодРегистрации");
		Возврат;
	КонецЕсли;
	
	ИмяПоляПериодРегистрацииДокуметнов = Новый Соответствие;
	//ИмяПоляПериодРегистрацииДокуметнов.Вставить(Метаданные.Документы.ВводПроцентаДеятельностиЕНВД,								"Период");
	ИмяПоляПериодРегистрацииДокуметнов.Вставить(Метаданные.Документы.ВводРаспределенияОсновногоЗаработкаРаботниковОрганизации,	"Период");
	
	АльтернативноеИмяРеквизита = ИмяПоляПериодРегистрацииДокуметнов[МетаданныеДокумента];
	Если АльтернативноеИмяРеквизита <> Неопределено Тогда
		ПараметрыПроверкиДокумента.Вставить("ИмяПоляПериодаРегистрации", АльтернативноеИмяРеквизита);
	КонецЕсли;		
	
КонецПроцедуры

// Функция возвращает структуру с параметрами проверки документа по умолчанию
//
Функция ПолучитьПараметрыПроверкиДокумента(ДокументОбъект) Экспорт
	
	ПараметрыПроверкиДокумента = Новый Структура;
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ПараметрыПроверкиДокумента.Вставить("МетаданныеДокумента", МетаданныеДокумента);
	
	// если  в документе есть реквизит организация, дата запрета оперделяется с учетом организации
	ПараметрыПроверкиДокумента.Вставить("ЕстьОрганизация", 			(МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено));	
	ПараметрыПроверкиДокумента.Вставить("ЕстьУправленческийУчет",	(МетаданныеДокумента.Реквизиты.Найти("ОтражатьВУправленческомУчете") <> Неопределено));
    ПараметрыПроверкиДокумента.Вставить("ЕстьБухгалтерскийУчет", 	(МетаданныеДокумента.Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено));
		
	// если в документ 
	ОпределитьНеобходимостьПроверкиПоПериодуРегистрации(ПараметрыПроверкиДокумента, МетаданныеДокумента);
	
	// Если для документа проведение запрещено, проверка на дату запрета редактирования
	//проверяется без учета проведенности
	ПараметрыПроверкиДокумента.Вставить("ПроверятьПроведениеДокумента", (МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить));
		
	Если ЗаполнитьПараметрыПроверкиПоВидуДокумента(ДокументОбъект, ПараметрыПроверкиДокумента) Тогда
		Возврат ПараметрыПроверкиДокумента;
	КонецЕсли;
	
	ПроверятьУправленческуюДатуЗапрета      = (НЕ ПараметрыПроверкиДокумента.ЕстьОрганизация) или (ПараметрыПроверкиДокумента.ЕстьУправленческийУчет и ДокументОбъект["ОтражатьВУправленческомУчете"]);
	ПроверятьРегламентированнуюДатуЗапрета  = ПараметрыПроверкиДокумента.ЕстьОрганизация и (Не ПараметрыПроверкиДокумента.ЕстьБухгалтерскийУчет или ДокументОбъект["ОтражатьВБухгалтерскомУчете"]);	
	//vvv
	Если ТипЗнч(ДокументОбъект)=Тип("ДокументОбъект.ТрудовойДоговор") ТОгда
		ПроверятьРегламентированнуюДатуЗапрета=Ложь;	
	КонецЕсли;	
	//
	ПараметрыПроверкиДокумента.Вставить("ПроверятьУправленческуюДатуЗапрета", 		ПроверятьУправленческуюДатуЗапрета);
	ПараметрыПроверкиДокумента.Вставить("ПроверятьРегламентированнуюДатуЗапрета", 	ПроверятьРегламентированнуюДатуЗапрета);	
	
	Возврат ПараметрыПроверкиДокумента;
	
КонецФункции // ПолучитьПараметрыПроверкиДокумента()

//Функция возвращает структуру параметров проверки документа для нетиповых случаев
//
Функция ЗаполнитьПараметрыПроверкиПоВидуДокумента(ДокументОбъект, ПараметрыПроверкиДокумента)
	//	
	//Если ПараметрыПроверкиДокумента.МетаданныеДокумента.Имя = "<ИмяДокумента>" Тогда		
	//	ЗаполнитьПараметрыПроверкиДокумента<ИмяДокумента>(ДокументОбъект, ПараметрыПроверкиДокумента);
	//Иначе
		Возврат Ложь;
	//КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьПараметрыПроверкиПоВидуДокумента()

//
//// Процедура заполнения структуры параметров проверки для документа <ИмяДокумента>
////
//Процедура ЗаполнитьПараметрыПроверкиДокумента<ИмяДокумента>(ДокументОбъект, ПараметрыПроверкиДокумента)
//	
//	ПараметрыПроверкиДокумента.Вставить("ПроверятьУправленческуюДатуЗапрета", <ПроверятьУправленческуюДатуЗапрета>);
//	ПараметрыПроверкиДокумента.Вставить("ПроверятьРегламентированнуюДатуЗапрета", <ПроверятьРегламентированнуюДатуЗапрета>);
//	
//КонецПроцедуры // ЗаполнитьПараметрыПроверкиДокументаЗаказПокупателя()


// Процедура выполняет проверку возможности записи регистров сведений, регистров накопления
// регистров бухгалтерии и регистров расчета
// с учетом даты запрета изменения данных (даты запрета редактирования)
//
Процедура ПроверкаПериодаЗаписейРегистров(НаборЗаписей, Отказ, ВидРегистра = "РегистрНакопления")
	
	СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
	
	// Для пользователя с полными правами проверок выполнять не нужно
	Если СоответствиеГраницЗапрета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеНабора = НаборЗаписей.Метаданные();		
	ЕстьОрганизация = (МетаданныеНабора.Измерения.Найти("Организация")<>Неопределено);
	//vvv
	ЕстьОбособленноеПодразделение = (МетаданныеНабора.Реквизиты.Найти("ОбособленноеПодразделение")<>Неопределено);
	//
	        
    //vvv
	Если (МетаданныеНабора.ПолноеИмя()="РегистрСведений.НДФЛСтандартныеВычетыФизлиц") или (МетаданныеНабора.ПолноеИмя()="РегистрНакопления.НДФЛИмущественныеВычетыФизлиц")
		или (МетаданныеНабора.ПолноеИмя()="РегистрСведений.ГражданствоФизЛиц") или (МетаданныеНабора.ПолноеИмя()="РегистрСведений.ПаспортныеДанныеФизЛиц")
		или (МетаданныеНабора.ПолноеИмя()="РегистрСведений.ПаспортныеДанныеФизЛиц") или (МетаданныеНабора.ПолноеИмя()="РегистрСведений.ФИОФизЛиц")
		или (МетаданныеНабора.ПолноеИмя()="РегистрСведений.ВоинскийУчет") или (МетаданныеНабора.ПолноеИмя()="РегистрСведений.СемейноеПоложениеФизЛиц") или (МетаданныеНабора.ПолноеИмя()="РегистрСведений.НДФЛПрименениеВычетов")
		или (МетаданныеНабора.ПолноеИмя()="РегистрСведений.СостояниеРаботниковОрганизаций") или (МетаданныеНабора.ПолноеИмя()="РегистрСведений.ПройденныеУчебныеКурсы")
		или (МетаданныеНабора.ПолноеИмя()="РегистрСведений.СведенияОбИнвалидностиФизлиц") или (МетаданныеНабора.ПолноеИмя()="РегистрНакопления.ЗанятыеШтатныеЕдиницыОрганизаций")
		или (МетаданныеНабора.ПолноеИмя()="РегистрНакопления.ВнутрисменноеВремяРаботниковОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	//
	// Проверку сущестствующих записей выполняем только для регистров сведений, подчиненных регистратору
	// и регистрам накоплений.
	// Проверка необходима, так как удаление записей прошлого периода (в результате перезаписи набора)
	// тоже допускать нельзя.
	
	Если ВидРегистра = "РегистрСведений" Тогда
		ПроверятьСуществующиеЗаписиПоРегистратору = (МетаданныеНабора.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору);
	Иначе
		// Регистр накопления, регистр расчета, регистр сведений, подчиненный регистратору
		ПроверятьСуществующиеЗаписиПоРегистратору = Истина;
	КонецЕсли;	
	
	// В регистре расчета проверяется системное поле ПериодДействия
	// в остальных регистрах проверяется поле "Период"
	
	ПолеПериод = "Период";
	Если ВидРегистра = "РегистрРасчета" Тогда
		ПолеПериод = "ПериодРегистрации";
	//vvv		
	ИначеЕсли МетаданныеНабора.ПолноеИмя() ="РегистрНакопления.НДФЛСведенияОДоходах" ТОгда
		ПолеПериод = "ПериодРегистрации";
	//	
	КонецЕсли;	
	
	
    СтруктураПараметров = Новый Структура();
    СтруктураПараметров.Вставить("СоответствиеГраницЗапрета", 	СоответствиеГраницЗапрета);
    СтруктураПараметров.Вставить("МетаданныеНабора", 			МетаданныеНабора);
    СтруктураПараметров.Вставить("ЕстьОрганизация", 			ЕстьОрганизация);
    СтруктураПараметров.Вставить("ПолеПериод", 					ПолеПериод);
    
    Если ПроверятьСуществующиеЗаписиПоРегистратору Тогда
        ПроверкаСуществующихЗаписейРегистра(НаборЗаписей, СтруктураПараметров, Отказ);
    Иначе
        ПроверкаСуществующихЗаписейРегистраСведений(НаборЗаписей, СтруктураПараметров, Отказ)
    КонецЕсли;
    
	   
    // Проверка периода текущих записей набора	
	Если НаборЗаписей.Количество() > 0 И НЕ Отказ Тогда				
		Отказ = Ложь;
		Если ЕстьОрганизация Тогда
			Для Каждого Запись ИЗ НаборЗаписей Цикл
				ГраницаПоОрганизации = СоответствиеГраницЗапрета[Запись.Организация];
				//vvv
				Если Не Константы.ПрименятьДатуЗапретаГоловнойОрганизацииДляПодчиненных.Получить() И ЕстьОбособленноеПодразделение Тогда
					ГраницаПоОрганизации = СоответствиеГраницЗапрета[Запись.ОбособленноеПодразделение];
				КонецЕсли;				
				//
                Если ГраницаПоОрганизации = Неопределено Тогда
                    ГраницаПоОрганизации = СоответствиеГраницЗапрета["ОбщаяДатаЗапретаРедактирования"];    
                КонецЕсли;    
                
                Если ГраницаПоОрганизации <> Неопределено 
					 И Запись[ПолеПериод] <= ГраницаПоОрганизации Тогда
					 
					Отказ = Истина;
					Возврат;
                КонецЕсли;
                
			КонецЦикла;
		Иначе
			ГраницаПериода = СоответствиеГраницЗапрета[Справочники.Организации.ПустаяСсылка()];
            Если ГраницаПериода = Неопределено Тогда
               ГраницаПериода = СоответствиеГраницЗапрета["ОбщаяДатаЗапретаРедактирования"];    
            КонецЕсли;    
                
			Если ГраницаПериода <> Неопределено Тогда
				Для Каждого Запись ИЗ НаборЗаписей Цикл
					Если Запись[ПолеПериод] <= ГраницаПериода Тогда
						
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаПериодаЗаписейРегистров

 // Проверка возможности изменения записей регистров (дата запрета изменения данных)
Процедура ПроверкаПериодаЗаписей(НаборЗаписей, Отказ) Экспорт	
	ПроверкаПериодаЗаписейРегистров(НаборЗаписей, Отказ, "РегистрНакопления");
КонецПроцедуры

Процедура ПроверкаСуществующихЗаписейРегистра(НаборЗаписей, СтруктураПараметров, Отказ)
	Перем ИмяПоляПериода;
	
	ИмяРегистра = СтруктураПараметров.МетаданныеНабора.ПолноеИмя();
	//vvv
	ЕстьОбособленноеПодразделение = (НаборЗаписей.Метаданные().Реквизиты.Найти("ОбособленноеПодразделение")<>Неопределено);
	//
	
	СтруктураПараметров.Свойство("ПолеПериод", 	ИмяПоляПериода);
		
	Запрос = Новый Запрос;
	ВложенныйЗапрос = "";
	Если СтруктураПараметров.ЕстьОрганизация Тогда
		Индекс = 1;
		ИмяПоляОрганизации = "Организация";
		//vvv
		Если Не Константы.ПрименятьДатуЗапретаГоловнойОрганизацииДляПодчиненных.Получить() И ЕстьОбособленноеПодразделение Тогда
			ИмяПоляОрганизации = "ОбособленноеПодразделение";
		КонецЕсли;
		//
		Для Каждого КлючИЗначение ИЗ СтруктураПараметров.СоответствиеГраницЗапрета Цикл
			ВложенныйЗапрос = ВложенныйЗапрос + ?(ВложенныйЗапрос = "", "", "
			|ОБЪЕДИНИТЬ") +"
			|ВЫБРАТЬ &Организация"+индекс+" КАК Организация, &ДатаЗапрета" + Формат(индекс, "ЧГ=0") + " КАК ДатаЗапрета";
			Запрос.УстановитьПараметр("Организация"+индекс, КлючИЗначение.Ключ);
			ГраницаПериода = КлючИЗначение.Значение;
			Запрос.УстановитьПараметр("ДатаЗапрета"+индекс, ?(ГраницаПериода=Неопределено, NULL, ГраницаПериода));
			индекс = индекс + 1;
		КонецЦикла;
	Иначе
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		ИмяПоляОрганизации = "&ПустаяОрганизация";
		ВложенныйЗапрос = "ВЫБРАТЬ &ПустаяОрганизация КАК Организация, &ДатаЗапрета КАК ДатаЗапрета";
		Запрос.УстановитьПараметр("ПустаяОрганизация", ПустаяОрганизация);
		ГраницаПериода = СтруктураПараметров.СоответствиеГраницЗапрета[ПустаяОрганизация];
        
        Если ГраницаПериода = Неопределено Тогда
            ГраницаПериода = СтруктураПараметров.СоответствиеГраницЗапрета["ОбщаяДатаЗапретаРедактирования"];    
        КонецЕсли;    
        
		Запрос.УстановитьПараметр("ДатаЗапрета", ?(ГраницаПериода=Неопределено, NULL, ГраницаПериода));			
	КонецЕсли;			
	
	Запрос.Текст = "
	|ВЫБРАТЬ НаборЗаписей.Организация, НаборЗаписей.Период, ДатыЗапрета.Организация, ДатыЗапрета.ДатаЗапрета
	|ИЗ
	|(
	|ВЫБРАТЬ " + ИмяПоляОрганизации + " КАК Организация, МИНИМУМ(" + ИмяПоляПериода + ") КАК Период  ИЗ " + ИмяРегистра + " КАК Набор
	|ГДЕ Регистратор = &Регистратор
	|СГРУППИРОВАТЬ ПО " + ИмяПоляОрганизации + "
	|) КАК НаборЗаписей
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(" + ВложенныйЗапрос + "		
	|) КАК ДатыЗапрета
	|ПО НаборЗаписей.Организация = ДатыЗапрета.Организация
	|ГДЕ НаборЗаписей.Период <= ДатыЗапрета.ДатаЗапрета ИЛИ ДатыЗапрета.ДатаЗапрета ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);				
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Отказ = Истина;
	Иначе
		Отказ = Ложь;
	КонецЕсли;
	
КонецПроцедуры


Процедура ПроверкаСуществующихЗаписейРегистраСведений(НаборЗаписей, СтруктураПараметров, Отказ)
	
    ИмяРегистра = СтруктураПараметров.МетаданныеНабора.ПолноеИмя();
    
    // Формируем текст условия блока ГДЕ основного запроса,
    // в соответствии с установленным отбором для набора записей
    
    Запрос = Новый Запрос;
       
    СписокПолейУсловияОтбораТекст = "";
    Итерация = 0;
    Для каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл                
        Если не ЭлементОтбора.Использование Тогда
            Продолжить;
        КонецЕсли;                
        
        Если НЕ Итерация = 0  Тогда            
            СписокПолейУсловияОтбораТекст = СписокПолейУсловияОтбораТекст  + " И ";
        КонецЕсли;        
        
        СписокПолейУсловияОтбораТекст = СписокПолейУсловияОтбораТекст +" Набор." + ЭлементОтбора.Имя + " = &" + ЭлементОтбора.Имя;                       
        Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);        
        
        Итерация = 1;
    КонецЦикла; 
    
    Если Итерация = 1 Тогда
        СписокПолейУсловияОтбораТекст = " ГДЕ " + СписокПолейУсловияОтбораТекст;    	            
    КонецЕсли;                   
    
    ВложенныйЗапрос = "";
    Если СтруктураПараметров.ЕстьОрганизация Тогда
    	индекс = 1;
    	ИмяПоляОрганизации = "Организация";
    	Для Каждого КлючИЗначение ИЗ СтруктураПараметров.СоответствиеГраницЗапрета Цикл
    		ВложенныйЗапрос = ВложенныйЗапрос + ?(ВложенныйЗапрос = "", "", "
    		|ОБЪЕДИНИТЬ") +"
    		|ВЫБРАТЬ &Организация"+индекс+" КАК Организация, &ДатаЗапрета" + Формат(индекс, "ЧГ=0") + " КАК ДатаЗапрета";
    		Запрос.УстановитьПараметр("Организация"+индекс, КлючИЗначение.Ключ);
    		ГраницаПериода = КлючИЗначение.Значение;
    		Запрос.УстановитьПараметр("ДатаЗапрета"+индекс, ?(ГраницаПериода=Неопределено, NULL, ГраницаПериода));
    		индекс = индекс + 1;
    	КонецЦикла;
    Иначе
    	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
    	ИмяПоляОрганизации = "&ПустаяОрганизация";
    	ВложенныйЗапрос = "ВЫБРАТЬ &ПустаяОрганизация КАК Организация, &ДатаЗапрета КАК ДатаЗапрета";
    	Запрос.УстановитьПараметр("ПустаяОрганизация", ПустаяОрганизация);
    	ГраницаПериода = СтруктураПараметров.СоответствиеГраницЗапрета[ПустаяОрганизация];
        Если ГраницаПериода = Неопределено Тогда
            ГраницаПериода = СтруктураПараметров.СоответствиеГраницЗапрета["ОбщаяДатаЗапретаРедактирования"];    
        КонецЕсли;    
    	Запрос.УстановитьПараметр("ДатаЗапрета", ?(ГраницаПериода=Неопределено, NULL, ГраницаПериода));			
    КонецЕсли;			    
    
    
    Запрос.Текст = "
    |ВЫБРАТЬ НаборЗаписей.Организация, НаборЗаписей.Период,ДатыЗапрета.Организация, ДатыЗапрета.ДатаЗапрета
    |ИЗ
    |(
    |ВЫБРАТЬ " + ИмяПоляОрганизации + " КАК Организация, МИНИМУМ(Период) КАК Период  ИЗ " + ИмяРегистра + " КАК Набор
    | "+ СписокПолейУсловияОтбораТекст + "
    |СГРУППИРОВАТЬ ПО " + ИмяПоляОрганизации + "
    |) КАК НаборЗаписей
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |(" + ВложенныйЗапрос + "		
    |) КАК ДатыЗапрета
    |ПО НаборЗаписей.Организация = ДатыЗапрета.Организация
    |ГДЕ НаборЗаписей.Период <= ДатыЗапрета.ДатаЗапрета ИЛИ ДатыЗапрета.ДатаЗапрета ЕСТЬ NULL";
    
      
    Если НЕ Запрос.Выполнить().Пустой() Тогда
    	Отказ = Истина;
    Иначе
    	Отказ = Ложь;
    КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ  - ОБРАБОТЧИКИ ПОДПИСОК НА СОБЫТИЯ МЕХАНИЗМА ДАТЫ ЗАПРЕТА РЕДАКТИРОВАНИЯ

// Проверка возможности записи данных документа с учетом даты запрета изменения данных (даты запрета редактирования)
//
Процедура ПередЗаписьюДокументаПроверкаДоступностиПериода(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	ПроверкаПериодаДокумента(Источник, Отказ, РежимЗаписи);
	#Если Клиент Тогда
		Если Отказ Тогда
			Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны...", СтатусСообщения.Важное);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры	// ПередЗаписьюДокументовПроверкаДоступностиПериода

// Проверка возможности изменения записей регистров (дата запрета изменения данных)
//
Процедура ПередЗаписьюРегистраНакопленийПроверкаДоступностиПериода(Источник, Отказ, Замещение) Экспорт
	ПроверкаПериодаЗаписейРегистров(Источник, Отказ, "РегистрНакопления");	
	#Если Клиент Тогда
		Если Отказ Тогда
			Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны...", СтатусСообщения.Важное);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ПередЗаписьюРегистраНакопленийПроверкаДоступностиПериода

// Проверка возможности изменения записей регистров (дата запрета изменения данных)
//
Процедура ПередЗаписьюРегистраРасчетаПроверкаДоступностиПериода(Источник, Отказ, Замещение, ТолькоЗапись) Экспорт
	ПроверкаПериодаЗаписейРегистров(Источник, Отказ, "РегистрРасчета");	
	#Если Клиент Тогда
		Если Отказ Тогда
			Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны...", СтатусСообщения.Важное);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ПередЗаписьюРегистраРасчетаПроверкаДоступностиПериода

// Проверка возможности изменения записей регистров (дата запрета изменения данных)
//
Процедура ПередЗаписьюРегистраСведенийПроверкаДоступностиПериода(Источник, Отказ, Замещение) Экспорт
	ПроверкаПериодаЗаписейРегистров(Источник, Отказ, "РегистрСведений");	
	#Если Клиент Тогда
		Если Отказ Тогда
			Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны...", СтатусСообщения.Важное);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ПередЗаписьюРегистраСведенийПроверкаДоступностиПериода

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ  - ОБРАБОТЧИКИ ПОДПИСОК НА СОБЫТИЯ МЕХАНИЗМА РЕГИСТРАЦИИ ОБЪЕКТОВ ПРАВ ДОСТУПА ДОКУМЕНТОВ

Процедура ПриЗаписиДокументаРегистрацияОбъектовПравДоступа(Источник, Отказ) Экспорт

	// Соберем данные для регистрации
	СоответствиеДанных = ПараметрыСеанса.МетаданныеДокументовРегистрацииОбъектовДоступа.Получить();
	ЭлементСтруктуры = Неопределено;
	ИскомыйКлюч = ТипЗнч(Источник.Ссылка);
	ИскомоеЗначение = СоответствиеДанных.Получить(ИскомыйКлюч);
	Если ИскомоеЗначение = Неопределено Тогда
		
		// Данных по этому документу нет
		
		МассивИскомыхТипов = СоответствиеДанных.Получить("ТипыОбъектовДоступа");
		
		ТаблицаСвойств = Новый ТаблицаЗначений;
		ТаблицаСвойств.Колонки.Добавить("ИмяТЧ");
		ТаблицаСвойств.Колонки.Добавить("ИмяСвойства");
		
		МетаданныеДокумента = Источник.Метаданные();
		
		// Обработаем реквизиты шапки
		РеквизитыДокумента = МетаданныеДокумента.Реквизиты;
		Для каждого Реквизит Из РеквизитыДокумента Цикл
			ОписаниеТиповРеквизита = Реквизит.Тип;
			Для каждого ИскомыйТип Из МассивИскомыхТипов Цикл
				Если ОписаниеТиповРеквизита.СодержитТип(ИскомыйТип) Тогда
					НоваяСтрока = ТаблицаСвойств.Добавить();
					НоваяСтрока.ИмяТЧ = "";
					НоваяСтрока.ИмяСвойства = Реквизит.Имя;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
		
		// Обработаем табличные части
		ТабличныеЧастиДокумента = МетаданныеДокумента.ТабличныеЧасти;
		Для каждого ТЧ Из ТабличныеЧастиДокумента Цикл
			РеквизитыТЧДокумента = ТЧ.Реквизиты;
			Для каждого Реквизит Из РеквизитыТЧДокумента Цикл
				ОписаниеТиповРеквизита = Реквизит.Тип;
				Для каждого ИскомыйТип Из МассивИскомыхТипов Цикл
					Если ОписаниеТиповРеквизита.СодержитТип(ИскомыйТип) Тогда
						НоваяСтрока = ТаблицаСвойств.Добавить();
						НоваяСтрока.ИмяТЧ = ТЧ.Имя;
						НоваяСтрока.ИмяСвойства = Реквизит.Имя;
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла; 
		
		СоответствиеДанных.Вставить(ИскомыйКлюч, ТаблицаСвойств);
		
		ПараметрыСеанса.МетаданныеДокументовРегистрацииОбъектовДоступа = Новый ХранилищеЗначения(СоответствиеДанных);
		
	Иначе
		
		ТаблицаСвойств = ИскомоеЗначение;
		
	КонецЕсли; 
	
	Если ТаблицаСвойств.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	// Теперь зарегистрируем данные объекта
	
	ОбъектыДоступа = Новый Массив;
	Для каждого СтрокаТЗ Из ТаблицаСвойств Цикл
		ОбъектыДоступа.Добавить(?(НЕ ПустаяСтрока(СтрокаТЗ.ИмяТЧ), (Источник[СтрокаТЗ.ИмяТЧ].ВыгрузитьКолонку(СтрокаТЗ.ИмяСвойства)), Источник[СтрокаТЗ.ИмяСвойства]));
	КонецЦикла; 
	
	ПолныеПрава.РегистрацияОбъектовДоступаДокумента(Источник.Ссылка, ОбъектыДоступа);

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАЮЩИЕ СОБЫТИЯ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМ

#Если Клиент Тогда

Процедура РедактироватьПраваДоступа(Ссылка) Экспорт
	
	Обработки.НастройкаПравДоступа.ПолучитьФорму("НастройкаПравДоступа",,Ссылка).Открыть();
	
КонецПроцедуры

#КонецЕсли

/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАЮЩИЕ НАСЛЕДСТВЕННОСТЬ ПРАВ ДОСТУПА ИЕРАРХИЧЕСКИХ СПРАВОЧНИКОВ

Функция ПолучитьМассивДочернихЭлементов(Родитель) Экспорт
	
	МетаданныеРодителя = Родитель.Метаданные();
	Если ЗначениеЗаполнено(Родитель) и (Не МетаданныеРодителя.Иерархический или МетаданныеРодителя.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов и Не Родитель.ЭтоГруппа) Тогда
		Возврат Новый Массив;
	КонецЕсли; 
	
	Если Метаданные.Перечисления.Содержит(МетаданныеРодителя) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	_Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	Перечисление." + МетаданныеРодителя.Имя + " КАК _Таблица";
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	_Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник." + МетаданныеРодителя.Имя + " КАК _Таблица";
		
		Если МетаданныеРодителя.Иерархический Тогда
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	_Таблица.Ссылка В ИЕРАРХИИ(&Родитель)
			|	И _Таблица.Ссылка <> &Родитель";
			Запрос.УстановитьПараметр("Родитель", Родитель);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // () 

Процедура ЗаписатьПраваДоступаПользователейКОбъекту(ПраваДоступаПользователей, Ссылка, Отказ, ПрошлыйИзмененныйРодительОбъектаДоступа = Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоПользователю = ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей");
		
	Если ОтборПоПользователю Тогда
		ПраваДоступаПользователей.Отбор.Пользователь.Установить(Ссылка);
	Иначе
		ПраваДоступаПользователей.Отбор.ОбъектДоступа.Установить(Ссылка);
	КонецЕсли;
	
	ТаблицаПравДоступа = ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(ПраваДоступаПользователей);
	
	Для каждого СтрокаТаблицы Из ТаблицаПравДоступа Цикл
		Если ОтборПоПользователю Тогда
			СтрокаТаблицы.Пользователь  = Ссылка;
		Иначе
			СтрокаТаблицы.ОбъектДоступа = Ссылка;
		КонецЕсли;
		СтрокаТаблицы.ВладелецПравДоступа = СтрокаТаблицы.ОбъектДоступа;
	КонецЦикла;
	
	СтруктураОтбора = ПолучитьСтруктуруОтборовНабораЗаписей(ПраваДоступаПользователей);
	
	ПолныеПрава.ЗаписатьПраваДоступаПользователей(ТаблицаПравДоступа,СтруктураОтбора, Отказ, "Не записаны права доступа к объекту """+ Ссылка + """!");
	
	Если НЕ Отказ Тогда
		ПрочитатьПраваДоступаКОбъекту(ПраваДоступаПользователей, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьПраваДоступаКОбъекту(ПраваДоступаПользователей, Ссылка) Экспорт

	// Снимем все отборы
	Для каждого Отбор Из ПраваДоступаПользователей.Отбор Цикл
		Отбор.Использование = Ложь;
	КонецЦикла;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		ПраваДоступаПользователей.Отбор.Пользователь.Значение = Ссылка;
		ПраваДоступаПользователей.Отбор.Пользователь.Использование = Истина;
	Иначе
		ПраваДоступаПользователей.Отбор.ОбъектДоступа.Значение = Ссылка;
		ПраваДоступаПользователей.Отбор.ОбъектДоступа.Использование = Истина;
	КонецЕсли;
	
	ПраваДоступаПользователей.Прочитать();
	
КонецПроцедуры

Функция ПолучитьСписокВидовНаследованияПравДоступа(ОбъектДоступа) Экспорт
	
	СписокПеречисления = Новый СписокЗначений;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДоступа) Тогда
		СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
		СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
	Иначе
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектДоступа)) Тогда
			МетаданныеОбъекта = ОбъектДоступа.Метаданные();
			Если МетаданныеОбъекта.Иерархический Тогда
				Если МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
					Если ОбъектДоступа.ЭтоГруппа Тогда
						СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
					Иначе
						СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
					КонецЕсли;
				Иначе
					СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
					СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
				КонецЕсли;
			Иначе
				СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
			КонецЕсли;
		Иначе
			СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокПеречисления;
	
КонецФункции

Функция ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(ПраваДоступаПользователей) Экспорт
	
	ТаблицаПравДоступа = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей().Выгрузить();
	
	Для каждого СтрокаТаблицыНабора Из ПраваДоступаПользователей Цикл
		
		Если СтрокаТаблицыНабора.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава или СтрокаТаблицыНабора.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаПравДоступа.Добавить(), СтрокаТаблицыНабора);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПравДоступа;
	
КонецФункции

Процедура ДополнитьНаборПравДоступаНаследуемымиЗаписями(НаборПрав) Экспорт
	
	ИсходнаяТаблица = ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(НаборПрав);
	
	СоответствиеМассивовДочернихЭлементов     = Новый Соответствие;
	СоответствиеМассивовРодительскихЭлементов = Новый Соответствие;
	
	Для каждого СтрокаНабора Из ИсходнаяТаблица Цикл
		
		Если СтрокаНабора.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных Тогда
			
			//Дополним набор записями для дочерних элементов
			МассивЭлементов = СоответствиеМассивовДочернихЭлементов[СтрокаНабора.ОбъектДоступа];
			Если МассивЭлементов = Неопределено Тогда
				МассивЭлементов = ПолучитьМассивДочернихЭлементов(СтрокаНабора.ОбъектДоступа);
				СоответствиеМассивовДочернихЭлементов.Вставить(СтрокаНабора.ОбъектДоступа,МассивЭлементов);
			КонецЕсли;
			
			Для каждого Ссылка Из МассивЭлементов Цикл
				Запись = НаборПрав.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаНабора,,"ОбъектДоступа,ВидНаследованияПравДоступаИерархическихСправочников");
				Запись.ОбъектДоступа = Ссылка;
				Запись.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // () 

Процедура ДополнитьНаборПравДоступаУнаследованнымиЗаписями(ПраваДоступаПользователей, ОбъектДоступа, Родитель) Экспорт
	
	ОбъектДоступаМетаданные = ОбъектДоступа.Метаданные();
	
	// Добавим записи, унаследованные от родителей
	Родители = Новый Массив;
	ТекущийРодитель = Родитель;
	Пока ЗначениеЗаполнено(ТекущийРодитель) Цикл
		Родители.Добавить(ТекущийРодитель);
		ТекущийРодитель = ТекущийРодитель.Родитель;
	КонецЦикла;
	Родители.Добавить(ТекущийРодитель);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.НастройкиПравДоступаПользователей КАК ПраваДоступаПользователей
	|ГДЕ
	|	ПраваДоступаПользователей.ОбъектДоступа В(&Родители)
	|	И ПраваДоступаПользователей.ВидНаследованияПравДоступаИерархическихСправочников = &РаспространитьНаПодчиненных";
		
	Если ПраваДоступаПользователей.Отбор.ОбластьДанных.Использование Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ПраваДоступаПользователей.ОбластьДанных = &ОбластьДанных";
		Запрос.УстановитьПараметр("ОбластьДанных", ПраваДоступаПользователей.Отбор.ОбластьДанных.Значение);
	КонецЕсли;

	Если ПраваДоступаПользователей.Отбор.Пользователь.Использование Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ПраваДоступаПользователей.Пользователь = &Пользователь";
		Запрос.УстановитьПараметр("Пользователь", ПраваДоступаПользователей.Отбор.Пользователь.Значение);
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Родители", Родители);
	Запрос.УстановитьПараметр("РаспространитьНаПодчиненных", Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = ПраваДоступаПользователей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка,,"ОбъектДоступа, ВидНаследованияПравДоступаИерархическихСправочников");
		Запись.ОбъектДоступа = ОбъектДоступа;
		Запись.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя;
	КонецЦикла;
	
КонецПроцедуры // () 

Процедура ПередЗаписьюНовогоОбъектаСПравамиДоступаПользователей(ЭтотОбъект, Отказ, Родитель, СсылкаНового = Неопределено) Экспорт

	Если ЭтотОбъект.ЭтоНовый() Тогда
		СсылкаНового = Справочники[ЭтотОбъект.Метаданные().Имя].ПолучитьСсылку();
		
		ПолныеПрава.ЗарегистрироватьПраваДоступаПользователяКОбъекту(СсылкаНового, Родитель, Отказ);

		Если НЕ Отказ Тогда
			ЭтотОбъект.УстановитьСсылкуНового(СсылкаНового);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьПраваДоступаКИерархическимОбъектамПриНеобходимости(Ссылка,ПрошлыйИзмененныйРодительОбъектаДоступа, Отказ) Экспорт
	
	//В объекте не был изменен родитель. Обновлять права доступа нет необходимости
	Если ПрошлыйИзмененныйРодительОбъектаДоступа = Неопределено Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МассивРодительскихЭлементов = Новый Массив;
	ТекущийРодитель = Ссылка.Родитель;
	Пока ЗначениеЗаполнено(ТекущийРодитель) Цикл
		МассивРодительскихЭлементов.Добавить(ТекущийРодитель);
		ТекущийРодитель = ТекущийРодитель.Родитель;
	КонецЦикла; 
	
	ТекущийРодитель = ПрошлыйИзмененныйРодительОбъектаДоступа;
	Пока ЗначениеЗаполнено(ТекущийРодитель) Цикл
		МассивРодительскихЭлементов.Добавить(ТекущийРодитель);
		ТекущийРодитель = ТекущийРодитель.Родитель;
	КонецЦикла; 
	ШапкаОшибки = "Права " + Ссылка + " не записан!";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПраваДоступаПользователей.ОбъектДоступа КАК Ссылка
	|ИЗ
	|	РегистрСведений.НастройкиПравДоступаПользователей КАК ПраваДоступаПользователей
	|ГДЕ
	|	(ПраваДоступаПользователей.ОбъектДоступа.Ссылка В ИЕРАРХИИ (&Ссылка)
	|			ИЛИ ПраваДоступаПользователей.ОбъектДоступа.Ссылка В (&Родители))
	|	И ПраваДоступаПользователей.ОбъектДоступа = ПраваДоступаПользователей.ВладелецПравДоступа";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Родители", МассивРодительскихЭлементов);
	
	ОбновляемыеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для каждого ОбновляемыйОбъект Из ОбновляемыеОбъекты Цикл
		Если Не ПолныеПрава.ОбновитьПраваДоступаПользователейПоВладельцуДоступа(ОбновляемыйОбъект) Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки()+Символы.ПС+ " .Не записаны права доступа к объекту: " + Ссылка);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	#Если Клиент Тогда
		Оповестить("ЗаписаныПраваДоступаПользователейКОбъекту");
	#КонецЕсли
	
КонецПроцедуры // () 


Функция ДокументВЗакрытомПериоде(ДокументОбъект) Экспорт
	
	Результат = Ложь;
	
	СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
	
	// Для пользователя с полными правами проверок выполнять не нужно
	Если СоответствиеГраницЗапрета = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПроверкиДокумента = НастройкаПравДоступа.ПолучитьПараметрыПроверкиДокумента(ДокументОбъект);
	НастройкаПравДоступа.ПроверитьВерсиюДокумента(ДокументОбъект, ПараметрыПроверкиДокумента, СоответствиеГраницЗапрета, Результат);
	
	Возврат Результат;
	
КонецФункции // ДокументВЗакрытомПериоде()



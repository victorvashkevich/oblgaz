////////////////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ИЗМЕНЕНИЯ НАСТРОЕК СКД

// Функция возвращает значение параметра компоновки данных
//
// Параметры:
//  Настройки - Пользовательские настройки СКД, Настройки СКД, Компоновщик настроек
//  Параметр - имя параметра СКД для которого нужно вернуть значение параметра

Функция ПолучитьПараметр(Настройки, Параметр) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") тогда
		ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") тогда
		Для каждого ЭлементНастройки из Настройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") и ЭлементНастройки.Параметр = ПолеПараметр тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") тогда
		Для каждого ЭлементНастройки из Настройки.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") и ЭлементНастройки.Параметр = ПолеПараметр тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеПараметра = Неопределено тогда
			ЗначениеПараметра = Настройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
КонецФункции

// Функция устанавливает значение параметра компоновки данных
//
// Параметры:
//		Настройки     - Пользовательские настройки СКД, Настройки СКД, Компоновщик настроек
//		Параметр      - имя параметра СКД для которого нужно вернуть значение параметра
//      Значение      - значение параметра
//		Использование - Признак использования параметра. По умолчанию всегда принимается равным истине.
//
Функция УстановитьПараметр(Настройки, Параметр, Значение, Использование = истина) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") тогда
		ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") тогда
		Для каждого ЭлементНастройки из Настройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") и ЭлементНастройки.Параметр = ПолеПараметр тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") тогда
		Для каждого ЭлементНастройки из Настройки.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") и ЭлементНастройки.Параметр = ПолеПараметр тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеПараметра = Неопределено тогда
			ЗначениеПараметра = Настройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеПараметра.Значение = Значение;
	ЗначениеПараметра.Использование = Использование;
	
	Возврат ЗначениеПараметра;
КонецФункции

// Функция возвращает доступное поле компоновки данных
//
// Параметры:
//		Доступные поля - доступные поля компоновки данные, доступные поля отбора компоновки данные и т.д.
//		Поле           - Имя поля компоновки данных
//
Функция ПолучитьДоступноеПоле(ДоступныеПоля, Поле) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") тогда
		ПолеДоступа = Новый ПолеКомпоновкиДанных(Поле);
	ИначеЕсли ТипЗнч(Поле) = Тип("ПолеКомпоновкиДанных") тогда
		ПолеДоступа = Поле;
	Иначе
	    Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДоступныеПоля.НайтиПоле(ПолеДоступа);
	
КонецФункции

// Функция возвращает доступный параметр компоновки данных
//
// Параметры:
//		Доступные поля - доступные поля компоновки данные, доступные поля отбора компоновки данные и т.д.
//		Параметр       - Имя параметра компоновки данных
//
Функция ПолучитьДоступныйПараметр(ДоступныеПараметры, Параметр) Экспорт
	
	Если ТипЗнч(Параметр) = Тип("Строка") тогда
		ПараметрДоступа = Новый ПараметрКомпоновкиДанных(Параметр);
	ИначеЕсли ТипЗнч(Параметр) = Тип("ПараметрКомпоновкиДанных") тогда
		ПараметрДоступа = Параметр;
	Иначе
	    Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДоступныеПараметры.НайтиПараметр(ПараметрДоступа);
	
КонецФункции

// Функция возвращает объект настройки СКД по переданному в нее идентификатору пользовательской настройки.
//
// Параметры:
// 		Настройки - коллекция элементов или настройка компоновки данных
//		ИдентификаторПользовательскойНастройки - идентификатор пользовательской настройки СКД (строка)
//
Функция ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, ИдентификаторПользовательскойНастройки) Экспорт
	
	Если ТипЗнч(Настройки) <> Тип("НастройкиКомпоновкиДанных") и Настройки.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки тогда
		Возврат Настройки;
	КонецЕсли;
	
	ЭлементНастройкиВарианта = Неопределено;
	
	Если ТипЗнч(Настройки) <> Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
		и ТипЗнч(Настройки) <> Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных")
		и ТипЗнч(Настройки) <> Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") 
		и ТипЗнч(Настройки) <> Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") 
		тогда
		
		Если Настройки.Выбор.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки тогда
			Возврат Настройки.Выбор;
		ИначеЕсли ТипЗнч(Настройки) <> Тип("ТаблицаКомпоновкиДанных") и ТипЗнч(Настройки) <> Тип("ДиаграммаКомпоновкиДанных") и Настройки.Отбор.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки тогда
			Возврат Настройки.Отбор;
		ИначеЕсли ТипЗнч(Настройки) <> Тип("ТаблицаКомпоновкиДанных") и ТипЗнч(Настройки) <> Тип("ДиаграммаКомпоновкиДанных") и Настройки.Порядок.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки тогда
			Возврат Настройки.Порядок;
		ИначеЕсли Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки тогда
			Возврат Настройки.УсловноеОформление;
		КонецЕсли;
		
		Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") тогда
			ЭлементНастройкиВарианта = НайтиЭлементНастройки(Настройки.ПараметрыДанных, ИдентификаторПользовательскойНастройки);
		КонецЕсли;
		
		Если ЭлементНастройкиВарианта = Неопределено тогда
			Если ТипЗнч(Настройки) <> Тип("ТаблицаКомпоновкиДанных") и ТипЗнч(Настройки) <> Тип("ДиаграммаКомпоновкиДанных") тогда
				ЭлементНастройкиВарианта = НайтиЭлементНастройки(Настройки.Отбор, ИдентификаторПользовательскойНастройки);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭлементНастройкиВарианта = Неопределено тогда
			ЭлементНастройкиВарианта = НайтиЭлементНастройки(Настройки.УсловноеОформление, ИдентификаторПользовательскойНастройки);
		КонецЕсли;
		
		Если ЭлементНастройкиВарианта = Неопределено тогда
			Если ТипЗнч(Настройки) = Тип("ТаблицаКомпоновкиДанных") тогда
				ЭлементНастройкиВарианта = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Строки, ИдентификаторПользовательскойНастройки);
				Если ЭлементНастройкиВарианта = Неопределено тогда
					ЭлементНастройкиВарианта = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Колонки, ИдентификаторПользовательскойНастройки);
				КонецЕсли;
			ИначеЕсли ТипЗнч(Настройки) = Тип("ДиаграммаКомпоновкиДанных") тогда
				ЭлементНастройкиВарианта = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Точки, ИдентификаторПользовательскойНастройки);
				Если ЭлементНастройкиВарианта = Неопределено тогда
					ЭлементНастройкиВарианта = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Серии, ИдентификаторПользовательскойНастройки);
				КонецЕсли;
			Иначе
				ЭлементНастройкиВарианта = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Структура, ИдентификаторПользовательскойНастройки);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Настройки) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") тогда 
		
		ЭлементНастройкиВарианта = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Настройки, ИдентификаторПользовательскойНастройки);
		
	Иначе
		Если Настройки.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки тогда
			Возврат Настройки;
		КонецЕсли;
		Для каждого ЭлементНастройки из Настройки Цикл
			ЭлементНастройкиВарианта = ПолучитьОбъектПоПользовательскомуИдентификатору(ЭлементНастройки, ИдентификаторПользовательскойНастройки);
			Если ЭлементНастройкиВарианта <> Неопределено тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЭлементНастройкиВарианта;	
	
КонецФункции

// Функция возвращает массив полей наборов данных и вычисляемых полей по полю СКД. 
//
// Параметры:
//		СхемаКомпоновкиДанных - схема компоновки данных
//		Поле - имя (путь к данным) поля в СКД.
//
Функция ПолучитьПоляДанных(СхемаКомпоновкиДанных, Поле) Экспорт
		
	ПоляНаборовДанных = Новый Массив;
	
	Для каждого НаборыДанных из СхемаКомпоновкиДанных.НаборыДанных Цикл
		Для каждого ПолеДанных из НаборыДанных.Поля Цикл
			Если ПолеДанных.ПутьКДанным = Строка(Поле) тогда
				ПоляНаборовДанных.Добавить(ПолеДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого ПолеДанных из СхемаКомпоновкиДанных.ВычисляемыеПоля Цикл
		Если ПолеДанных.ПутьКДанным = Строка(Поле) тогда
			ПоляНаборовДанных.Добавить(ПолеДанных);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоляНаборовДанных;
КонецФункции

// Функция возвращает элемент пользовательской настройки СКД по уникальному идентификатору пользовательского элемента
//
// Параметры:
//		ПользовательскиеНастройки - коллекция  элементов пользовательских настроек СКД
//		УникальныйИдентификатор - уникальный идентификатор элемента пользовательской настройки СКД
//
Функция ПолучитьЭлементПользовательскойНастройки(ПользовательскиеНастройки, УникальныйИдентификатор) Экспорт
	
	ЭлементНастройкиПользователя = Неопределено;
	
	Для каждого ЭлементНастройки из ПользовательскиеНастройки.Элементы Цикл
		Если Строка(ЭлементНастройки.ИдентификаторПользовательскойНастройки) = УникальныйИдентификатор тогда
			ЭлементНастройкиПользователя = ЭлементНастройки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЭлементНастройкиПользователя;
КонецФункции

// Возвращает список всех группировок компоновщика настроек
// 
// Параметры:
//		ЭлементСтруктуры - элемент структуры настройки СКД, настройка СКД или компоновщик настроек 
//		ПоказыватьГруппировкиТаблиц - признак добавления в список группировки колонок (по умолчанию истина)
//
Функция ПолучитьГруппировки(ЭлементСтруктуры, ПоказыватьГруппировкиТаблиц = истина) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") тогда
		Структура = ЭлементСтруктуры.Настройки.Структура;
		ДобавитьГруппировки(Структура, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") тогда
		Структура = ЭлементСтруктуры.Структура;
		ДобавитьГруппировки(Структура, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
		ДобавитьГруппировки(ЭлементСтруктуры.Строки, СписокПолей);
		ДобавитьГруппировки(ЭлементСтруктуры.Колонки, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		ДобавитьГруппировки(ЭлементСтруктуры.Серии, СписокПолей);
		ДобавитьГруппировки(ЭлементСтруктуры.Точки, СписокПолей);
	Иначе
		ДобавитьГруппировки(ЭлементСтруктуры.Структура, СписокПолей, ПоказыватьГруппировкиТаблиц);
	КонецЕсли;
	Возврат СписокПолей;
	
КонецФункции

// Добавляет группировку в компоновщик настроек в самый нижний уровень структуры, если поле не указано - детальные поля
//
// Параметры:
//		КомпоновщикНастроек - компоновщик настроек
//		Поле - имя поля компоновки данных
//		Строки - признак добавления группировки в строки (точки) или колонки (серии) таблицы (диаграммы).
//
Функция ДобавитьГруппировку(КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина) Экспорт
	
	ЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Строки);
	Если ЭлементСтруктуры = Неопределено 
	 ИЛИ ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) <> Неопределено 
	   И Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
	 ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить();
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
			ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Добавить();
	Иначе
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	КонецЕсли;
	
	НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	Если Поле <> Неопределено Тогда
		ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Поле;
	КонецЕсли;
	Возврат НоваяГруппировка;
	
КонецФункции

// Копирует элементы из одной коллекции СКД в другую
//
// Параметры:
//		ПриемникЗначения - коллекция  элементов (отбор, порядок и т.п.), в которую будут копировать значения
//		ИсточникЗначения - коллекция  элементов, которую будут копировать
//		ПроверятьДоступность - признак проверки доступности копирования элементов коллекции
//		ОчищатьПриемник - признак очистки приёмника перед копированием элементов коллекции
//
Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина) Экспорт
	
	Если ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
	 ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
	 ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных") Тогда
		СоздаватьПоТипу = Ложь;
	Иначе
		СоздаватьПоТипу = Истина;
	КонецЕсли;
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			// Элементы порядка добавляем в начало
			Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);
			ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
		Иначе
			Если СоздаватьПоТипу Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			Иначе
				ЭлементПриемник = ПриемникЭлементов.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		// В некоторых коллекциях необходимо заполнить другие коллекции
		Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
		ИначеЕсли ТипЗнч(ИсточникЭлементов)	= Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		КонецЕсли;
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
			ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
			ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
			ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

// Процедура заполняет значения параметров коллекции в соответствии со значениями коллекции параметров источника 
//
Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено) Экспорт
	
	Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры



// Функция добавляет выбранное поле и возвращает элемент выбранного поля. 
//
// Параметры:
//		ЭлементСтруктуры - компоновщик настроек, настройка СКД, элемент структуры настройки отчета
//		Поле - имя поля, которое нужно добавить в СКД
//		Заголовок - заголовок добавляемого поля
//
Функция ДобавитьВыбранноеПоле(ЭлементСтруктуры, Знач Поле, Заголовок = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Поле;
	Если Заголовок <> Неопределено Тогда
		ВыбранноеПоле.Заголовок = Заголовок;
	КонецЕсли;
	Возврат ВыбранноеПоле;
	
КонецФункции

// Функция возвращает массив полей группировок компоновщика настроек
//
// Параметры:
//		КомпоновщикНастроек      - компоновщик настроек
//		БезПользовательскихПолей - признак получения списка без пользовательских полей.
//
Функция ПолучитьМассивПолейГруппировки(КомпоновщикНастроек, БезПользовательскихПолей = Ложь) Экспорт
	
	МассивПолей = Новый Массив;
	
	Если ТипЗнч(КомпоновщикНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") тогда
		Структура = КомпоновщикНастроек.Настройки.Структура;
	ИначеЕсли ТипЗнч(КомпоновщикНастроек) = Тип("НастройкиКомпоновкиДанных") тогда
		Структура = КомпоновщикНастроек.Структура;
	КонецЕсли;
	
	ДобавитьПоляГруппировкиВМассив(Структура, МассивПолей, БезПользовательскихПолей);
	Возврат МассивПолей;
	
КонецФункции

// Устанавливает параметр вывода компоновщика настроек или настройки СКД
//
// Параметры:
//		КомпоновщикНастроекГруппировка - компоновщик настроек или настройка/группировка СКД
//		ИмяПараметра - имя параметра СКД
//		Значение - значение параметра вывода СКД
//
Функция УстановитьПараметрВывода(КомпоновщикНастроекГруппировка, ИмяПараметра, Значение) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроекГруппировка) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекГруппировка.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Иначе
		ЗначениеПараметра = КомпоновщикНастроекГруппировка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		ЗначениеПараметра.Использование = Истина;
		ЗначениеПараметра.Значение = Значение;
		Возврат ЗначениеПараметра;
	КонецЕсли;
	
КонецФункции


// Функция возвращает признак используется ли поле в настройке СКД
//
// Параметры:
//		ЭлементСтруктуры - компоновщик настроек, настройка СКД или элемент структуры настройки
//		Поле - поле СКД
//
Функция ПолеИспользуется(ЭлементСтруктуры, Поле) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = ЭлементСтруктуры.ПолучитьНастройки();
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
	    Настройки = ЭлементСтруктуры;
	КонецЕсли;
	
	ЕстьГруппировка = ложь;
	
	ЕстьГруппировка = НайтиПоле(Настройки.Структура, Поле);
	
	// найти поле группировки в отборе
	Для каждого ОтборПоле из Настройки.Отбор.Элементы Цикл
		
		ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
		
		Если ТипЗнч(ОтборПоле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
			ЕстьГруппировка = ИспользуетсяОтбор(ОтборПоле.Элементы, ПолеПериодРегистрации);
		Иначе
			Если ОтборПоле.Использование и (ОтборПоле.ЛевоеЗначение = ПолеПериодРегистрации или ОтборПоле.ПравоеЗначение = ПолеПериодРегистрации) тогда
				
				ЕстьГруппировка = истина;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ВыбранныеПоля = ПолучитьВыбранныеПоля(Настройки);
	
	Для каждого ПолеВыбора из ВыбранныеПоля Цикл
		
		ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
		
		Если ТипЗНЧ(ПолеВыбора) = Тип("ВыбранноеПолеКомпоновкиДанных") И ПолеВыбора.Использование И ПолеВыбора.Поле = ПолеПериодРегистрации тогда
			
			ЕстьГруппировка = истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат ЕстьГруппировка;
	
КонецФункции 

// Добавляет все группировки элемента структуры в список значений
//
// Параметры:
//		Структура - структура настройки СКД
//		СписокГруппировок - список значений, в который будут добавляться элементы структуры
//
Процедура ДобавитьГруппировки(Структура, СписокГруппировок, ПоказыватьГруппировкиТаблиц = истина) Экспорт
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьГруппировки(ЭлементСтруктуры.Строки, СписокГруппировок);
			ДобавитьГруппировки(ЭлементСтруктуры.Колонки, СписокГруппировок);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьГруппировки(ЭлементСтруктуры.Серии, СписокГруппировок);
			ДобавитьГруппировки(ЭлементСтруктуры.Точки, СписокГруппировок);
		Иначе
			СписокГруппировок.Добавить(ЭлементСтруктуры);
			Если ПоказыватьГруппировкиТаблиц тогда
				ДобавитьГруппировки(ЭлементСтруктуры.Структура, СписокГруппировок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура добавляет в массив используемые поля группировки
//
// Параметры:
//		Структура - структура отчета
//		МассивПолей - массив или список значений, в который будут добавляться поля группировок
//		БезПользовательскихПолей - признак не включения пользовательских полей в СКД
//
Процедура ДобавитьПоляГруппировкиВМассив(Структура, МассивПолей, БезПользовательскихПолей) Экспорт
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Строки, МассивПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Колонки, МассивПолей, БезПользовательскихПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Серии, МассивПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Точки, МассивПолей, БезПользовательскихПолей);
		Иначе
			Для каждого ТекущееПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				ДоступноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.НайтиПоле(ТекущееПолеГруппировки.Поле);
				Если ДоступноеПоле <> Неопределено 
				  И (ДоступноеПоле.Родитель = Неопределено ИЛИ Не БезПользовательскихПолей ИЛИ ДоступноеПоле.Родитель.Поле <> Новый ПолеКомпоновкиДанных("UserFields")) Тогда
                	МассивПолей.Добавить(ТекущееПолеГруппировки);
				КонецЕсли;
			КонецЦикла;
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Структура, МассивПолей, БезПользовательскихПолей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список полей группировок всех группировок компоновщика настроек
//
// Параметры: 
//		КомпоновщикНастроек - компоновщик настроек
//		БезПользовательскихПолей - признак не включения пользовательских настроек СКД
//
Функция ПолучитьПоляГруппировок(КомпоновщикНастроек, БезПользовательскихПолей = Ложь) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	ДобавитьПоляГруппировки(Структура, СписокПолей, БезПользовательскихПолей);
	Возврат СписокПолей;
	
КонецФункции

// Возвращает группировку по полю группировки
//
// Параметры:
//		КомпоновщикНастроек - компоновщик настроек
//		ПолеГруппировки - поле СКД
//
Функция ПолучитьЭлементСтруктурыПоПолюГруппировки(КомпоновщикНастроек, ПолеГруппировки) Экспорт
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	Возврат НайтиЭлементСтруктурыПоПолюГруппировки(Структура, ПолеГруппировки);
	
КонецФункции

// Возвращает пользовательское поле по полю компоновки данных
// 
// Параметры:
//		КомпоновщикНастроек  - компоновщик настроек СКД
//		ПолеКомпоновкиДанных - поле компоновки данных
//
Функция НайтиПользовательскоеПоле(КомпоновщикНастроек, ПолеКомпоновкиДанных) Экспорт
	
	Для каждого ПользовательскоеПоле Из КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы Цикл
		Если ПользовательскоеПоле.ПутьКДанным = Строка(ПолеКомпоновкиДанных) Тогда
			Возврат ПользовательскоеПоле;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции
	
// Возвращает отбор пользовательских настроек по полю компоновки данных
//
// Параметры:
//		КомпоновщикНастроек  - компоновщик настроек 
//		ПолеКомпоновкиДанных - поле компоновки данных
//
Функция НайтиПользовательскийОтборПоПолю(КомпоновщикНастроек, ПолеКомпоновкиДанных) Экспорт
	
	Для каждого ПользовательскоеПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользовательскоеПоле) <> Тип("ЭлементОтбораКомпоновкиДанных") тогда
			Продолжить;
		КонецЕсли;
		
		
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(КомпоновщикНастроек.Настройки, ПользовательскоеПоле.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено тогда 
			Продолжить;
		КонецЕсли;
		
		Если Строка(ЭлементНастройкиВарианта.ЛевоеЗначение) = Строка(ПолеКомпоновкиДанных) Тогда
			Возврат ПользовательскоеПоле;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Возвращает параметр пользовательских настроек по параметру компоновки данных
//
// Параметры:
//		КомпоновщикНастроек  - компоновщик настроек 
//		Параметр - параметр компоновки данных
//
Функция НайтиПользовательскийПараметрПоПараметру(КомпоновщикНастроек, Параметр) Экспорт
	
	Для каждого ПользовательскийПараметр Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ПользовательскийПараметр) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(КомпоновщикНастроек.Настройки, ПользовательскийПараметр.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено тогда 
			Продолжить;
		КонецЕсли;
		
		Если Строка(ЭлементНастройкиВарианта.Параметр) = СтрЗаменить(Строка(Параметр), "ПараметрыДанных.", "") Тогда
			Возврат ПользовательскийПараметр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Возвращает последний элемент структуры - группировку
//
// Параметры:
//		ЭлементСтруктурыНастроек - элемент структуры компоновки данных
//		Строки - признак для получения последний группировки строк (Серий) или колонок (точек)
//
Функция ПолучитьПоследнийЭлементСтруктуры(ЭлементСтруктурыНастроек, Строки = Истина) Экспорт
	
	Если ТипЗнч(ЭлементСтруктурыНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") тогда
		Настройки = ЭлементСтруктурыНастроек.Настройки;
	ИначеЕсли ТипЗнч(ЭлементСтруктурыНастроек) = Тип("НастройкиКомпоновкиДанных") тогда
		Настройки = ЭлементСтруктурыНастроек;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Структура = Настройки.Структура;
	Если Структура.Количество() = 0 Тогда
		Возврат Настройки;
	КонецЕсли;
	
	Если Строки Тогда
		ИмяСтруктурыТаблицы = "Строки";
		ИмяСтруктурыДиаграммы = "Серии";
	Иначе
		ИмяСтруктурыТаблицы = "Колонки";
		ИмяСтруктурыДиаграммы = "Точки";
	КонецЕсли;
	
	Пока Истина Цикл
		ЭлементСтруктуры = Структура[0];
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыТаблицы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыДиаграммы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры.Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыТаблицы];
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных")	Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
		Иначе
			Возврат ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Структура[0];
	
КонецФункции

// Возвращает массив выбранных полей или групп выбранных полей
//
// Параметр:
//		ЭлементСтруктуры - элемент структуры, настройка компоновщика настроек, компоновщик настроек
//		ТолькоГруппы     - признак, того что процедура будет возвращать только группы.
//
Функция ПолучитьВыбранныеПоля(ЭлементСтруктуры, ТолькоГруппы = Ложь) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") 
	 ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных")  Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных")  Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Выбор;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	ДобавитьВыбранныеПоляВМассив(ВыбранныеПоля.Элементы, МассивПолей, ТолькоГруппы);
	Возврат МассивПолей;
	
КонецФункции


// Возвращает группировку - детальные записи компоновщика настроек
//
Функция ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) Экспорт
	
	ПоследнийЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Истина);
	Если ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
	 ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
	 ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Если ПоследнийЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() = 0 Тогда
			Возврат ПоследнийЭлементСтруктуры;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Добавляет отбор в коллекцию отборов компоновщика или группы отборов
//
// Параметры:
//		ЭлементСтруктуры - элемент структуры
//		Поле             - имя поля, по которому добавляется отбор
//		Значение         - значение отбора
//		ВидСравнения     - вид сравнений компоновки данных (по умолчанию: вид сравнения)
//		Использование    - признак использования отбора (по умолчанию: истина)
//
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение  = Поле;
	НовыйЭлемент.ВидСравнения   = ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = Значение;
	Возврат НовыйЭлемент;
	
КонецФункции

// Копирует настройки компоновки данных
//
Процедура СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник, НастройкиИсточник) Экспорт
	
	Если НастройкиИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НастройкиПриемник) = Тип("НастройкиКомпоновкиДанных") Тогда
		Для каждого Параметр Из НастройкиИсточник.ПараметрыДанных.Элементы Цикл
			ЗначениеПараметра = НастройкиПриемник.ПараметрыДанных.НайтиЗначениеПараметра(Параметр.Параметр);
			Если ЗначениеПараметра <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ЗначениеПараметра, Параметр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);
		СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник.Настройки, НастройкиИсточник.Настройки);
		Возврат;
	КонецЕсли;
	
	// Копирование настроек
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных") Тогда
		
		ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыДанных, НастройкиИсточник.ПараметрыДанных);
		СкопироватьЭлементы(НастройкиПриемник.ПользовательскиеПоля, НастройкиИсточник.ПользовательскиеПоля);
		СкопироватьЭлементы(НастройкиПриемник.Отбор,         НастройкиИсточник.Отбор);
		СкопироватьЭлементы(НастройкиПриемник.Порядок,       НастройкиИсточник.Порядок);
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных")
	 ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
	 ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		СкопироватьЭлементы(НастройкиПриемник.ПоляГруппировки, НастройкиИсточник.ПоляГруппировки);
		СкопироватьЭлементы(НастройкиПриемник.Отбор,           НастройкиИсточник.Отбор);
		СкопироватьЭлементы(НастройкиПриемник.Порядок,         НастройкиИсточник.Порядок);
		ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);
		
	КонецЕсли;
	
	СкопироватьЭлементы(НастройкиПриемник.Выбор,              НастройкиИсточник.Выбор);
	СкопироватьЭлементы(НастройкиПриемник.УсловноеОформление, НастройкиИсточник.УсловноеОформление);
	ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыВывода,      НастройкиИсточник.ПараметрыВывода);
	
	// Копирование структуры
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных")
	 ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Структура Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Структура.Добавить(ТипЗнч(ЭлементСтруктурыИсточник));
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
	 ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Структура Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Структура.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Строки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Строки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Колонки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Колонки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Серии Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Серии.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Точки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Точки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура удаляет все элементы настройки компоновки данных из объекта
//
Процедура ОчиститьНастройкиКомпоновкиДанных(Настройки) Экспорт
	
	Если Настройки = Неопределено или ТипЗнч(Настройки) <> Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Параметр Из Настройки.ПараметрыДанных.Элементы Цикл
		Параметр.Значение = Неопределено;
		Параметр.Использование = ложь;
	КонецЦикла;
	
	Для каждого Параметр Из Настройки.ПараметрыВывода.Элементы Цикл
		Параметр.Использование = ложь;
	КонецЦикла;
	
	Настройки.ПользовательскиеПоля.Элементы.Очистить();
	Настройки.Отбор.Элементы.Очистить();
	Настройки.Порядок.Элементы.Очистить();
	Настройки.Выбор.Элементы.Очистить();
	Настройки.Структура.Очистить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОТНОСЯЩИЕСЯ К УНИВЕРСАЛЬНОМУ МЕХАНИЗМУ "ФУНКЦИИ ОТЧЕТОВ"

Функция НачалоПериодаОтчета(ВидПериода, ДатаПериода, ФормаОтчета) Экспорт
	
	НачалоПериода = ДатаПериода;
	
	Если ВидПериода = ФормаОтчета.ЗаГод тогда
		НачалоПериода = НачалоГода(ДатаПериода);
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаПолугодие тогда
		Если Месяц(ДатаПериода) >= 7 тогда
			НачалоПериода = Дата(Год(ДатаПериода), 7, 1);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода), 1, 1);
		КонецЕсли;
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаКвартал тогда
		НачалоПериода = НачалоКвартала(ДатаПериода);
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаМесяц тогда
		НачалоПериода = НачалоМесяца(ДатаПериода);
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаДекаду тогда
		Если День(ДатаПериода) <= 10 тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 1);
		ИначеЕсли День(ДатаПериода) > 10 и День(ДатаПериода) <= 20 тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 11);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 21);
		КонецЕсли;
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаНеделю тогда
		НачалоПериода = НачалоНедели(ДатаПериода);
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаДень тогда
		НачалоПериода = НачалоДня(ДатаПериода);
	КонецЕсли;
		
	Возврат НачалоПериода;
	
КонецФункции


Функция КонецПериодаОтчета(ВидПериода, ДатаПериода, ФормаОтчета) Экспорт
	
	КонецПериода = ДатаПериода;
	
	Если ВидПериода = ФормаОтчета.ЗаГод тогда
		КонецПериода = КонецГода(ДатаПериода);
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаПолугодие тогда
		Если Месяц(ДатаПериода) > 6 тогда
			КонецПериода = КонецГода(ДатаПериода);
		Иначе
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), 6, 30));
		КонецЕсли;
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаКвартал тогда
		КонецПериода = КонецКвартала(ДатаПериода);
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаМесяц тогда
		КонецПериода = КонецМесяца(ДатаПериода);
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаДекаду тогда
		Если День(ДатаПериода) <= 10 тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 10));
		ИначеЕсли День(ДатаПериода) > 10 и День(ДатаПериода) <= 20 тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 20));
		Иначе
			КонецПериода = КонецМесяца(ДатаПериода);
		КонецЕсли;
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаНеделю тогда
		КонецПериода = КонецНедели(ДатаПериода);
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаДень тогда
		КонецПериода = КонецДня(ДатаПериода);
	КонецЕсли;
		
	Возврат КонецПериода;
	
КонецФункции

Функция ПолучитьВидПериода(Знач НачалоПериода, Знач КонецПериода, ФормаОтчета) Экспорт
	
	НачалоПериода = НачалоДня(НачалоПериода);
	КонецПериода  = КонецДня(КонецПериода);
	
	Если НачалоПериода = НачалоДня(НачалоПериода) и КонецПериода = КонецДня(НачалоПериода) тогда
		Возврат ФормаОтчета.ЗаДень;
	ИначеЕсли НачалоПериода = НачалоНедели(НачалоПериода) и КонецПериода = КонецНедели(НачалоПериода) тогда
		Возврат ФормаОтчета.ЗаНеделю;
	ИначеЕсли НачалоПериода = НачалоМесяца(НачалоПериода) и КонецПериода = КонецМесяца(НачалоПериода) тогда
		Возврат ФормаОтчета.ЗаМесяц;
	ИначеЕсли НачалоПериода = НачалоКвартала(НачалоПериода) и КонецПериода = КонецКвартала(НачалоПериода) тогда
		Возврат ФормаОтчета.ЗаКвартал;
	ИначеЕсли НачалоПериода = НачалоГода(НачалоПериода) и КонецПериода = КонецГода(НачалоПериода) тогда
		Возврат ФормаОтчета.ЗаГод;
	ИначеЕсли (НачалоПериода = Дата(Год(НачалоПериода), 1, 1) и КонецПериода = Дата(Год(НачалоПериода), 6, 30, 23, 59, 59))
		или (НачалоПериода = Дата(Год(НачалоПериода), 6, 1) и КонецПериода = Дата(Год(НачалоПериода), 12, 31, 23, 59, 59)) тогда
		Возврат ФормаОтчета.ЗаПолугодие;
	ИначеЕсли (НачалоПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 1) и КонецПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 10, 23, 59, 59))
		или (НачалоПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 11) и КонецПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 20, 23, 59, 59))
		или (НачалоПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 1) и КонецПериода = КонецМесяца(НачалоПериода))	тогда
		Возврат ФормаОтчета.ЗаДекаду;
	Иначе
		Возврат ФормаОтчета.ЗаПроизвольныйПериод;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокПериодов(НачалоПериода, ВидПериода, ФормаОтчета) Экспорт
	                                                                                                  
	СписокПериодов = Новый СписокЗначений;
	Если НачалоПериода = '00010101' тогда
		Возврат Новый СписокЗначений;
	Иначе
		ЗначениеНачалоПериода = НачалоПериода;
	КонецЕсли;
	
	Если ВидПериода = ФормаОтчета.ЗаГод тогда
		
		ТекущийГод = Год(ЗначениеНачалоПериода);
		СписокПериодов.Добавить(Дата(ТекущийГод-7, 1, 1), "Предыдущие года");
		Для сч = ТекущийГод по ТекущийГод+6 Цикл
			СписокПериодов.Добавить(Дата(сч, 1, 1), Формат(сч, "ЧГ=0"));
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод+7, 1, 1), "Последующие года");
		
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаПолугодие тогда
		
		ТекущийГод = Год(ЗначениеНачалоПериода);
		СписокПериодов.Добавить(Дата(ТекущийГод-1, 1, 1), Формат(ТекущийГод-1, "ЧГ=0") + "...");
		Для сч = ТекущийГод по ТекущийГод+1 Цикл
			СписокПериодов.Добавить(Дата(сч, 1, 1), "I полугодие " + Формат(сч, "ЧГ=0"));
			СписокПериодов.Добавить(Дата(сч, 7, 1), "II полугодие " + Формат(сч, "ЧГ=0"));
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод+2, 1, 1), Формат(ТекущийГод+2, "ЧГ=0") + "...");
		
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаКвартал тогда
		
		ТекущийГод = Год(ЗначениеНачалоПериода);
		СписокПериодов.Добавить(Дата(ТекущийГод-1, 1, 1), Формат(ТекущийГод-1, "ЧГ=0") + "...");
		Для сч = ТекущийГод по ТекущийГод Цикл
			СписокПериодов.Добавить(Дата(сч, 1, 1), "I квартал " + Формат(сч, "ЧГ=0"));
			СписокПериодов.Добавить(Дата(сч, 4, 1), "II квартал " + Формат(сч, "ЧГ=0"));
			СписокПериодов.Добавить(Дата(сч, 7, 1), "III квартал " + Формат(сч, "ЧГ=0"));
			СписокПериодов.Добавить(Дата(сч, 10, 1), "IV квартал " + Формат(сч, "ЧГ=0"));
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод+1, 1, 1), Формат(ТекущийГод+1, "ЧГ=0") + "...");
		
		
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаМесяц тогда
		
		ТекущийГод = Год(ЗначениеНачалоПериода);
		СписокПериодов.Добавить(Дата(ТекущийГод-1, 1, 1), Формат(ТекущийГод-1, "ЧГ=0") + "...");
		Для сч = 1 по 12 Цикл
			СписокПериодов.Добавить(Дата(ТекущийГод, сч, 1), Формат(Дата(ТекущийГод, сч, 1), "ДФ='MMMM yyyy'"));
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод+1, 1, 1), Формат(ТекущийГод+1, "ЧГ=0") + "...");

	ИначеЕсли ВидПериода = ФормаОтчета.ЗаДекаду тогда
		
		ТекущийГод   = Год(ЗначениеНачалоПериода);
		ТекущийМесяц = Месяц(ЗначениеНачалоПериода);
		
		СчМесяц = ?(ТекущийМесяц - 4 < 1, 12 + ТекущийМесяц - 4, ТекущийМесяц - 4);
		СчГод   = ?(ТекущийМесяц - 4 < 1, ТекущийГод-1, ТекущийГод);
		Сч = 6;
		
		СписокПериодов.Добавить(Дата(?(СчМесяц <> 1, СчГод, СчГод-1), ?(СчМесяц > 1, СчМесяц-1, 12), 1), Формат(Дата(?(СчМесяц <> 1, СчГод, СчГод-1), ?(СчМесяц > 1, СчМесяц-1, 12), 1), "ДФ='MMMM yyyy'") + "...");
		Пока Сч >0 Цикл
			СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 1),  "I дек. " + Нрег(Формат(Дата(СчГод, СчМесяц, 1), "ДФ='MMMM yyyy'")));
			СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 11), "II дек. " + Нрег(Формат(Дата(СчГод, СчМесяц, 1), "ДФ='MMMM yyyy'")));
			СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 21), "III дек. " + Нрег(Формат(Дата(СчГод, СчМесяц, 1), "ДФ='MMMM yyyy'")));
			СчМесяц = СчМесяц + 1;
			Если СчМесяц > 12 тогда
				СчГод = СчГод + 1;
				СчМесяц = 1;
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 1), Формат(Дата(СчГод, СчМесяц, 1), "ДФ='MMMM yyyy'") + "...");
		
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаНеделю тогда
		
		НачалоНедели = НачалоНедели(ЗначениеНачалоПериода)-21*86400;
		
		СписокПериодов.Добавить(НачалоНедели-7*86400, "Пред. недели ...");
		
		
		Для Сч  = 0 по 6 Цикл
			НачНедели = НачалоНедели + 7*Сч*86400;  
			КонНедели = КонецНедели(НачНедели);
			СписокПериодов.Добавить(НачНедели, Формат(НачНедели, "ДФ=dd.MM") + " - " + Формат(КонНедели, "ДФ=dd.MM"));
		КонецЦикла;
		
		СписокПериодов.Добавить(НачалоНедели + 7*86400, "След. недели ..." );
		
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаДень тогда
		
		КонецНедели   = КонецНедели(ЗначениеНачалоПериода);
		ДатаДняНедели = НачалоНедели(ЗначениеНачалоПериода);
		
		СписокПериодов.Добавить(ДатаДняНедели - 86400, "Предыдущая неделя");
		
		Пока ДатаДняНедели < КонецНедели Цикл
			
			ДеньНед = ДеньНедели(ДатаДняНедели);
			
			ОбозначениеДня = "";
			Если ДеньНед = 1 тогда
				ОбозначениеДня = "пн."
			ИначеЕсли ДеньНед = 2 тогда
				ОбозначениеДня = "вт."
			ИначеЕсли ДеньНед = 3 тогда
				ОбозначениеДня = "ср."
			ИначеЕсли ДеньНед = 4 тогда
				ОбозначениеДня = "чт."
			ИначеЕсли ДеньНед = 5 тогда
				ОбозначениеДня = "пт."
			ИначеЕсли ДеньНед = 6 тогда
				ОбозначениеДня = "сб."
			ИначеЕсли ДеньНед = 7 тогда
				ОбозначениеДня = "вс."
			КонецЕсли;
		
			СписокПериодов.Добавить(ДатаДняНедели, Формат(ДатаДняНедели, "ДФ='dd MMMM yyyy'") + " (" + ОбозначениеДня + ")");
			
			ДатаДняНедели = ДатаДняНедели + 86400;
			
		КонецЦикла;
		
		СписокПериодов.Добавить(КонецНедели + 1, "Следующая неделя");
		
	КонецЕсли;
		
	Возврат СписокПериодов;
КонецФункции

Функция ПолучитьПредставлениеПериода(ВидПериода, НачалоПериода, КонецПериода, ФормаОтчета) Экспорт
	
	Если ВидПериода = ФормаОтчета.ЗаПроизвольныйПериод тогда
		
		Возврат Формат(НачалоПериода, "ДФ='dd MMMM yyyy'") + " - " + Формат(КонецПериода, "ДФ='dd MMMM yyyy'");
		
	Иначе
		
		Список = ФункцииОтчетовКлиентСервер.ПолучитьСписокПериодов(НачалоПериода, ВидПериода, ФормаОтчета);
		
		ЭлементСписка = Список.НайтиПоЗначению(НачалоПериода);
		Если ЭлементСписка <> Неопределено тогда
			Возврат ЭлементСписка.Представление;
		Иначе
			Возврат "";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Подбирает период отчета по виду периода и текущим датам отчетов
//
Функция ПодобратьПериодОтчета(ВидПериода, Текст, ДатаНачала, ДатаОкончания, ФормаОтчета) Экспорт
	
	ДанныеДляВыбора = Новый СписокЗначений;
	
	МассивСлов = ПолучитьМассивСловПредставляющихПериодОтчета(Текст, ФормаОтчета);
	
	ПолучитьЗначениеПериода(ВидПериода, МассивСлов, ДанныеДляВыбора, ФормаОтчета);
	
	Возврат ДанныеДляВыбора;
	
КонецФункции

Функция СодержитСимволы(СтрокаНаПроверки, СтрокаСимволов)
	
	СодержатТолькоПодстроку = истина;
	
	СимволыПроверки = Новый СписокЗначений;
	
	Для сч = 1 по СтрДлина(СтрокаСимволов) Цикл
		СимволыПроверки.Добавить(КодСимвола(СтрокаСимволов, сч));
	КонецЦикла;
	
	Для сч = 1 по СтрДлина(СтрокаНаПроверки) Цикл
		Если СимволыПроверки.НайтиПоЗначению(КодСимвола(СтрокаНаПроверки, сч)) = Неопределено тогда
			СодержатТолькоПодстроку = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СодержатТолькоПодстроку;
	
КонецФункции
	
	
Процедура ПолучитьЗначениеПериода(ВидПериода, МассивСлов, ДанныеДляВыбора, ФормаОтчета)
	
	День  = День(ТекущаяДата());
	Месяц = Месяц(ТекущаяДата());
	Год   = Год(ТекущаяДата());
	
	Если ФормаОтчета.ЗаДень = ВидПериода тогда
		
		Если МассивСлов.Количество()>0 тогда                 
			Если СодержитСимволы(МассивСлов[0], "1234567890") тогда
				День = Число(МассивСлов[0]);
			КонецЕсли;
		КонецЕсли;
		
		Если МассивСлов.Количество()>1 тогда
			НомерМесяца = ПолучитьМесяц(МассивСлов[1]);
			Если НомерМесяца <> Неопределено тогда
				Месяц = НомерМесяца;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивСлов.Количество()>2 тогда
			Если СодержитСимволы(МассивСлов[2], "1234567890") тогда
				Год = ПолучитьМесяц(МассивСлов[2]);
			КонецЕсли;
		КонецЕсли;
		
		ДанныеДляВыбора.Добавить(Дата(Год, Месяц, День), Формат(Дата(Год, Месяц, День), "ДФ='dd MMMM yyyy'"))
		
	ИначеЕсли ФормаОтчета.ЗаНеделю = ВидПериода тогда
		//
		//НачалоНедели = НачалоНедели(ТекущаяДата());
		//
		//День  = День(НачалоНедели);
		//Месяц = Месяц(НачалоНедели);
		//Год   = Год(НачалоНедели);
		//
		//Если 
		//
		//ПолучитьПредставлениеПериода(ВидПериода, НачалоПериода, КонецПериода, ФормаОтчета)	
		
	ИначеЕсли ФормаОтчета.ЗаДекаду = ВидПериода тогда
		
		Если День <= 10 тогда
			НомерДекады = 1;
		ИначеЕсли День >= 11 и День <= 20 тогда
			НомерДекады = 2;
		ИначеЕсли День >= 21 тогда
			НомерДекады = 3;
		КонецЕсли;
		
		Если МассивСлов.Количество()>0 тогда
			Если СодержитСимволы(МассивСлов[0], "123") тогда
				НомерДекады = Число(МассивСлов[0]);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивСлов.Количество()>1 тогда
			Если Найти(МассивСлов[1], "дек") = 0  тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		
		Если МассивСлов.Количество()>2 тогда
			НомерМесяца = ПолучитьМесяц(МассивСлов[2]);
			Если НомерМесяца <> Неопределено тогда
				Месяц = НомерМесяца;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивСлов.Количество()>3 тогда
			Если СодержитСимволы(МассивСлов[3], "1234567890") тогда 
				Год = ПолучитьМесяц(МассивСлов[3]);
			КонецЕсли;
		КонецЕсли;
		
		НачалоДекады = Дата(Год, Месяц, (НомерДекады-1)*10 + 1);
		КонецДекады  = ФункцииОтчетовКлиентСервер.КонецПериодаОтчета(ВидПериода, НачалоДекады, ФормаОтчета);
		
		ДанныеДляВыбора.Добавить(НачалоДекады, ПолучитьПредставлениеПериода(ВидПериода, НачалоДекады, КонецДекады, ФормаОтчета))
		
	ИначеЕсли ФормаОтчета.ЗаМесяц = ВидПериода тогда
		
		День  = 1;

		Если МассивСлов.Количество()>0 тогда
			НомерМесяца = ПолучитьМесяц(МассивСлов[0]);
			Если НомерМесяца <> Неопределено тогда
				Месяц = НомерМесяца;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивСлов.Количество()>1 тогда
			Если СодержитСимволы(МассивСлов[1], "1234567890") тогда 
				Год = ПолучитьМесяц(МассивСлов[3]);
			КонецЕсли;
		КонецЕсли;
		
		НачалоМесяца = Дата(Год, Месяц, День);
		КонецМесяца  = ФункцииОтчетовКлиентСервер.КонецПериодаОтчета(ВидПериода, НачалоМесяца, ФормаОтчета);
		
		ДанныеДляВыбора.Добавить(НачалоДекады, ПолучитьПредставлениеПериода(ВидПериода, НачалоМесяца, КонецМесяца, ФормаОтчета))
		
	ИначеЕсли ФормаОтчета.ЗаКвартал = ВидПериода тогда
		
		НомерКвартала = 1;
		Если Месяц <= 3 тогда
			НомерКвартала = 1;
		ИначеЕсли Месяц >= 4 и Месяц <= 6 тогда
			НомерКвартала = 2;
		ИначеЕсли Месяц >= 7 и Месяц <= 9 тогда
			НомерКвартала = 3;
		ИначеЕсли Месяц >= 10 тогда
			НомерКвартала = 4;
		КонецЕсли;
		
		Если МассивСлов.Количество()>0 тогда
			Если СодержитСимволы(МассивСлов[0], "1234") тогда
				НомерКвартала = Число(МассивСлов[0]);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивСлов.Количество()>1 тогда
			Если Найти(МассивСлов[1], "кв") = 0  тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;

		Если МассивСлов.Количество()>1 тогда
			Если СодержитСимволы(МассивСлов[1], "1234567890") тогда 
				Год = ПолучитьМесяц(МассивСлов[3]);
			КонецЕсли;
		КонецЕсли;
		
		НачалоКвартала = НачалоКвартала(Дата(Год, (НомерКвартала-1)*3+1, 1));
		КонецКвартала  = ФункцииОтчетовКлиентСервер.КонецПериодаОтчета(ВидПериода, НачалоДекады, ФормаОтчета);
		
		ДанныеДляВыбора.Добавить(НачалоДекады, ПолучитьПредставлениеПериода(ВидПериода, НачалоКвартала, КонецКвартала, ФормаОтчета))

	
	ИначеЕсли ФормаОтчета.ЗаПолугодие = ВидПериода тогда
		
		НомерПолугодия = 1;
		Если Месяц <= 6 тогда
			НомерПолугодия = 1;
		Иначе
			НомерПолугодия = 2;
		КонецЕсли;
		
		Если МассивСлов.Количество()>0 тогда
			Если СодержитСимволы(МассивСлов[0], "12") тогда
				НомерКвартала = Число(МассивСлов[0]);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивСлов.Количество()>1 тогда
			Если Найти(МассивСлов[1], "пол") = 0  тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;

		Если МассивСлов.Количество()>1 тогда
			Если СодержитСимволы(МассивСлов[1], "1234567890") тогда 
				Год = ПолучитьМесяц(МассивСлов[3]);
			КонецЕсли;
		КонецЕсли;
		
		НачалоПолугодия = НачалоКвартала(Дата(Год, (НомерПолугодия-1)*6+1, 1));
		КонецПолугодия  = ФункцииОтчетовКлиентСервер.КонецПериодаОтчета(ВидПериода, НачалоДекады, ФормаОтчета);
		
		ДанныеДляВыбора.Добавить(НачалоДекады, ПолучитьПредставлениеПериода(ВидПериода, НачалоКвартала, КонецКвартала, ФормаОтчета))
		
	ИначеЕсли ФормаОтчета.ЗаГод = ВидПериода тогда
		Для каждого Слово из МассивСлов Цикл
			Если СодержитСимволы(Слово, "1234567890") тогда 
				Год = Число(Слово);
				Если Год < 10 тогда // один знак  
					ТекГод = Год(ТекущаяДата());
					Год = Цел(ТекГод / 10)*10 + Год;
				ИначеЕсли Год >=10 и Год <100  тогда // два знака
					ТекГод             = Год(ТекущаяДата());
					ТекСтолетие        = Цел(ТекГод/100)*100;
					ПредыдущееСтолетие = ТекСтолетие - 100;
					ВерхняяГраницаТекСтолетия = ТекГод-ТекСтолетие+20;
					Если Год>=0 и ВерхняяГраницаТекСтолетия>=Год тогда
						Год = Год + ТекСтолетие;
					Иначе
						Год = Год + ПредыдущееСтолетие;
					КонецЕсли;
				КонецЕсли;
				НачалоГода = Дата(Год, 1, 1);
				КонецГода  = Дата(Год, 12, 31, 23, 59, 59);
				ДанныеДляВыбора.Добавить(НачалоГода, ПолучитьПредставлениеПериода(ВидПериода, НачалоГода, КонецГода, ФормаОтчета))
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьМесяц(СтрокаПредставленияМесяца)
	
	СписокМесяцев = Новый СписокЗначений;
	СписокМесяцев.Добавить(1, "янв");
	СписокМесяцев.Добавить(2, "фев");
	СписокМесяцев.Добавить(3, "мар");
	СписокМесяцев.Добавить(4, "апр");
	СписокМесяцев.Добавить(5, "май");
	СписокМесяцев.Добавить(6, "июн");
	СписокМесяцев.Добавить(7, "июл");
	СписокМесяцев.Добавить(8, "авг");
	СписокМесяцев.Добавить(9, "сень");
	СписокМесяцев.Добавить(10, "окт");
	СписокМесяцев.Добавить(11, "ноя");
	СписокМесяцев.Добавить(12, "дек");
	
	Месяц = Неопределено;
	
	Если СодержитСимволы(СтрокаПредставленияМесяца, "1234567890") тогда
		Месяц = Число(СтрокаПредставленияМесяца);
	Иначе
		Для каждого Месяц из СписокМесяцев Цикл
			Если Найти(СтрокаПредставленияМесяца, Месяц.Представление) > 0 тогда
				Месяц = Месяц.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Месяц;
КонецФункции 

Функция ПолучитьМассивСловПредставляющихПериодОтчета(Текст, ФормаОтчета) Экспорт
	
	МассивСлов = Новый Массив;
	ПоисковыйТекст = Нрег(СокрЛП(Текст));
	ПозицияРазделителя = 1;
	Пока ПоисковыйТекст <> "" Цикл
		Слово = "";
		ПозицияРазделителя = 0;
		Если Найти(ПоисковыйТекст, " ") > 0 тогда
			 ПозицияРазделителя = ?(ПозицияРазделителя > 0, Мин(ПозицияРазделителя, Найти(ПоисковыйТекст, " ")), Найти(ПоисковыйТекст, " "));
		КонецЕсли;
		Если Найти(ПоисковыйТекст, ".") > 0 тогда
			 ПозицияРазделителя = ?(ПозицияРазделителя > 0, Мин(ПозицияРазделителя, Найти(ПоисковыйТекст, ".")), Найти(ПоисковыйТекст, "."));
		КонецЕсли;
		Если Найти(ПоисковыйТекст, "/") > 0 тогда
			 ПозицияРазделителя = ?(ПозицияРазделителя > 0, Мин(ПозицияРазделителя, Найти(ПоисковыйТекст, "/")), Найти(ПоисковыйТекст, "/"));
		КонецЕсли;
		Если Найти(ПоисковыйТекст, "\") > 0 тогда
			 ПозицияРазделителя = ?(ПозицияРазделителя > 0, Мин(ПозицияРазделителя, Найти(ПоисковыйТекст, "\")), Найти(ПоисковыйТекст, "\"));
		КонецЕсли;
		
		Если ПозицияРазделителя = 0 тогда
			Слово = СокрЛП(ПоисковыйТекст);
			ПоисковыйТекст = "";
		Иначе
			Слово = СокрЛП(Сред(ПоисковыйТекст, 1, ПозицияРазделителя-1));
		КонецЕсли;
		
		Если Слово <> " " и Слово <> "." и Слово <> "/" и Слово <> "\" и Слово <> "" тогда
			МассивСлов.Добавить(Слово);
		КонецЕсли;

		ПоисковыйТекст = СокрЛП(Прав(ПоисковыйТекст, СтрДлина(ПоисковыйТекст) - ПозицияРазделителя));
	КонецЦикла;
	
	Возврат МассивСлов;
КонецФункции

Функция ПолучитьПредставлениеОтбора(Настройки, ЭлементОтбора) Экспорт
	
	Представление = "";
	ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, ЭлементОтбора.ИдентификаторПользовательскойНастройки);
	Если ЭлементНастройкиВарианта.ПредставлениеПользовательскойНастройки <> "" тогда
		Представление = ЭлементНастройкиВарианта.ПредставлениеПользовательскойНастройки;
	ИначеЕсли ЭлементНастройкиВарианта.Представление <> "" тогда
		Представление = ЭлементНастройкиВарианта.Представление;
	ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") тогда
		ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(Настройки.Отбор.ДоступныеПоляОтбора, ЭлементНастройкиВарианта.ЛевоеЗначение);
		Если ДоступноеПоле <> Неопределено тогда
			Представление = ДоступноеПоле.Заголовок;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементНастройкиВарианта) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
		Представление = "Не задано представление отбора";
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПолучитьУникальныйИдентификаторИзИмениЭлемента(СтрокаИдентификатора) Экспорт 
	
	Возврат Лев(СтрокаИдентификатора, 8) + "-" + Сред(СтрокаИдентификатора, 9, 4) + "-" + Сред(СтрокаИдентификатора, 13, 4)
	 		+ "-" + Сред(СтрокаИдентификатора, 17, 4) + "-" + Прав(СтрокаИдентификатора, 12);
КонецФункции

Функция ПолучитьФиксированныйМассивОтборов(ФормаОтчета, КомпоновщикНастроек, СтрокаИдентификатора) Экспорт
	
	КоллекцияОтборов = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	Для каждого ЭлементНастройки из КоллекцияОтборов Цикл
		
		Если НЕ ЭлементНастройки.Использование тогда
			Продолжить;
		КонецЕсли;
			
		Если ТипЗнч(ЭлементНастройки) <> Тип("ЭлементОтбораКомпоновкиДанных") тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементНастройки.ИдентификаторПользовательскойНастройки <> "" тогда
			Продолжить;
		КонецЕсли;
		
		ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора, ЭлементНастройки.ЛевоеЗначение);
		Если ДоступноеПоле = Неопределено тогда
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ПолучитьСКДОтчета(Отчет) Экспорт
	
	СКД = Отчет.СхемаКомпоновкиДанных;
	
	//НастройкиОтчета = Отчет.ПолучитьНастройкиОтчета();
	//
	//Если НастройкиОтчета.ИзменяетсяСхемаКомпоновкиДанных тогда
	//	СКД = Отчет.ОсновнаяСхемаКомпоновкиДанных;
	//Иначе
	//	СКД = Отчет.СхемаКомпоновкиДанных;
	//КонецЕсли;
	
	Возврат СКД;
	
КонецФункции

Функция ПолучитьСтруктуруОтборов(ФормаОтчета, КомпоновщикНастроек, СтрокаИдентификатора, ТипОтбора = Неопределено, СтрокаТипаОтбора = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура("Отбор");
	
	
	СтруктураОтборов = Новый Структура;
	
	//0. Получим таблицу связей 
	
	Если ТипОтбора = Неопределено и (СтрокаТипаОтбора = Неопределено или СтрокаТипаОтбора = "") тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипОтбора = Неопределено и СтрокаТипаОтбора <> Неопределено и СтрокаТипаОтбора = "" тогда
		ТипОтбора = Тип(СтрокаТипаОтбора);
	КонецЕсли;
	
	СтрокиСвязей = ФормаОтчета.СвязиОтборов.НайтиСтроки(Новый Структура("ИдентификаторОтбора", СтрокаИдентификатора));
	МассивСтрокСвязи = Новый Массив;
	Для каждого СтрокаСвязи из СтрокиСвязей Цикл
		Если Тип(СтрокаСвязи.Тип) = ТипОтбора тогда
			МассивСтрокСвязи.Добавить(СтрокаСвязи);
		КонецЕсли;
	КонецЦикла;
	
	//1. Добавим отборы из элементов настройки отчета по таблицей связей полей
	//2. Добавим параметры из элементов настройки отчета по таблицей связей полей
	Для каждого СтрокаСвязи из МассивСтрокСвязи Цикл
		ЭлементНастройки = ПолучитьЭлементПользовательскойНастройки(КомпоновщикНастроек.ПользовательскиеНастройки, СтрокаСвязи.ИдентификаторЗначенияОтбора);
		Если ЭлементНастройки = Неопределено или Не ЭлементНастройки.Использование тогда
			Продолжить;
		КонецЕсли;	
		Если ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") тогда
			СтруктураОтборов.Вставить(СтрокаСвязи.РеквизитПоля, ЭлементНастройки.ПравоеЗначение);
		ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") тогда
			СтруктураОтборов.Вставить(СтрокаСвязи.РеквизитПоля, ЭлементНастройки.Значение);
		КонецЕсли;
	КонецЦикла;
	
	//3. Добавим отборы настройки СКД связанные отбором
	//4. Добавим параметрый настройки СКД связанные отбором
	
	СтруктураПараметров.Отбор = СтруктураОтборов;
	Возврат СтруктураПараметров;
КонецФункции

Функция ИдентификаторЭлемента(Идентификатор) Экспорт
	Возврат СтрЗаменить(Строка(Идентификатор), "-", "");
КонецФункции

Функция ПолучитьМассивСвязейПолейОтбора(ФормаОтчета, КомпоновщикНастроек, СтрокаИдентификатора, ТипОтбора = Неопределено, СтрокаТипаОтбора = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура("Отбор");
	
	МассивСвязейПараметров = Новый Массив;
	
	//0. Получим таблицу связей 
	
	Если ТипОтбора = Неопределено и (СтрокаТипаОтбора = Неопределено или СтрокаТипаОтбора = "") тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипОтбора = Неопределено и СтрокаТипаОтбора <> Неопределено и СтрокаТипаОтбора = "" тогда
		ТипОтбора = Тип(СтрокаТипаОтбора);
	КонецЕсли;
	
	СтрокиСвязей = ФормаОтчета.СвязиОтборов.НайтиСтроки(Новый Структура("ИдентификаторОтбора", СтрокаИдентификатора));
	МассивСтрокСвязи = Новый Массив;
	Для каждого СтрокаСвязи из СтрокиСвязей Цикл
		Если Тип(СтрокаСвязи.Тип) = ТипОтбора тогда
			МассивСтрокСвязи.Добавить(СтрокаСвязи);
		КонецЕсли;
	КонецЦикла;
	
	//1. Добавим отборы из элементов настройки отчета по таблицей связей полей
	//2. Добавим параметры из элементов настройки отчета по таблицей связей полей
	Для каждого СтрокаСвязи из МассивСтрокСвязи Цикл
		ЭлементНастройки = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(КомпоновщикНастроек.ПользовательскиеНастройки, СтрокаСвязи.ИдентификаторЗначенияОтбора);
		Если ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") тогда
			СвязьПараметраВыбора = Новый СвязьПараметраВыбора("Отбор." + СтрокаСвязи.РеквизитПоля, "Отбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), РежимИзмененияСвязанногоЗначения.НеИзменять) ;
			МассивСвязейПараметров.Добавить(СвязьПараметраВыбора);
		ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") тогда
			СвязьПараметраВыбора = Новый СвязьПараметраВыбора("Отбор." + СтрокаСвязи.РеквизитПоля, "Параметр_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), РежимИзмененияСвязанногоЗначения.НеИзменять) ;
			МассивСвязейПараметров.Добавить(СвязьПараметраВыбора);
		КонецЕсли;
	КонецЦикла;
	
	//3. Добавим отборы настройки СКД связанные отбором
	//4. Добавим параметрый настройки СКД связанные отбором
	
	Возврат МассивСвязейПараметров;
КонецФункции

Функция ПолучитьМассивПараметровВыбораПолей(ФормаОтчета, КомпоновщикНастроек, СтрокаИдентификатора, ТипОтбора = Неопределено, СтрокаТипаОтбора = Неопределено) Экспорт
	
	МассивСвязейПараметров = Новый Массив;
	
	//0. Получим таблицу связей 
	
	Если ТипОтбора = Неопределено и (СтрокаТипаОтбора = Неопределено или СтрокаТипаОтбора = "") тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипОтбора = Неопределено и СтрокаТипаОтбора <> Неопределено и СтрокаТипаОтбора = "" тогда
		ТипОтбора = Тип(СтрокаТипаОтбора);
	КонецЕсли;
	
	СтрокиСвязей = ФормаОтчета.СвязиОтборов.НайтиСтроки(Новый Структура("ИдентификаторОтбора", СтрокаИдентификатора));
	МассивСтрокСвязи = Новый Массив;
	Для каждого СтрокаСвязи из СтрокиСвязей Цикл
		Если Тип(СтрокаСвязи.Тип) = ТипОтбора тогда
			МассивСтрокСвязи.Добавить(СтрокаСвязи);
		КонецЕсли;
	КонецЦикла;
	
	//1. Добавим отборы из элементов настройки отчета по таблицей связей полей
	//2. Добавим параметры из элементов настройки отчета по таблицей связей полей
	Для каждого СтрокаСвязи из МассивСтрокСвязи Цикл
		ЭлементНастройки = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(КомпоновщикНастроек.ПользовательскиеНастройки, СтрокаСвязи.ИдентификаторЗначенияОтбора);
		Если ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") тогда
			СвязьПараметраВыбора = Новый ПараметрВыбора(СтрокаСвязи.РеквизитПоля, ФормаОтчета["Отбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)]);
			МассивСвязейПараметров.Добавить(СвязьПараметраВыбора);
		ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") тогда
			СвязьПараметраВыбора = Новый ПараметрВыбора(СтрокаСвязи.РеквизитПоля, ФормаОтчета["Параметр_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)]) ;
			МассивСвязейПараметров.Добавить(СвязьПараметраВыбора);
		КонецЕсли;
	КонецЦикла;
	
	//3. Добавим отборы настройки СКД связанные отбором
	//4. Добавим параметрый настройки СКД связанные отбором
	
	Возврат МассивСвязейПараметров;
КонецФункции


Процедура УстановитьСвязиОтборов(ФормаОтчета, ИдентификаторОтбора = "") Экспорт
	
	Если ИдентификаторОтбора = "" тогда
		МассивСвязейОтборов = ФормаОтчета.СвязиОтборов;
	Иначе
		МассивСвязейОтборов = ФормаОтчета.СвязиОтборов.НайтиСтроки(Новый Структура("ИдентификаторЗначенияОтбора",ИдентификаторОтбора))
	КонецЕсли;
	
	Для каждого СтрокаОтбора из МассивСвязейОтборов Цикл
		ЭлементНастройки = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, СтрокаОтбора.ИдентификаторОтбора);
		Если ЭлементНастройки = Неопределено тогда
			 Продолжить;
		КонецЕсли;
		ЭлементНастройкиСвязанный = ФункцииОтчетовКлиентСервер.ПолучитьЭлементПользовательскойНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, СтрокаОтбора.ИдентификаторЗначенияОтбора);
		Если ЭлементНастройкиСвязанный = Неопределено тогда
			 Продолжить;
		КонецЕсли;
		
		ЭлементНастройкиСтруктуры = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, СтрокаОтбора.ИдентификаторОтбора);
		
		КомпоновщикНастроек = ФормаОтчета.Отчет.КомпоновщикНастроек;

		Если ТипЗнч(ЭлементНастройки.ПравоеЗначение) = Тип("СписокЗначений") 
			и (ЭлементНастройкиСтруктуры.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке 
			или ЭлементНастройкиСтруктуры.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии 
			или ЭлементНастройкиСтруктуры.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
			или ЭлементНастройкиСтруктуры.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии) тогда
			ЭлементОтбора = ФормаОтчета.Элементы.Найти("КолонкаОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(СтрокаОтбора.ИдентификаторОтбора));
			Если ЭлементОтбора = Неопределено тогда
				Продолжить;
			КонецЕсли;
			МассивТиповДанных = ФормаОтчета["Отбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(СтрокаОтбора.ИдентификаторОтбора)].ТипЗначения.Типы();
			Для каждого ТипДанных из МассивТиповДанных Цикл
				Если ЭлементНастройкиСвязанный.Использование тогда
					ЭлементОтбора.ПараметрыВыбора = Новый ФиксированныйМассив(ФункцииОтчетовКлиентСервер.ПолучитьМассивПараметровВыбораПолей(ФормаОтчета, КомпоновщикНастроек, СтрокаОтбора.ИдентификаторОтбора, ТипДанных));
				Иначе
					ЭлементОтбора.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЭлементОтбора = ФормаОтчета.Элементы.Найти("Отбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(СтрокаОтбора.ИдентификаторОтбора));
			Если ЭлементОтбора = Неопределено тогда
				Продолжить;
			КонецЕсли;
			ТипДанных = ТипЗнч(ФормаОтчета["Отбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(СтрокаОтбора.ИдентификаторОтбора)]);
			Если ЭлементНастройкиСвязанный.Использование тогда
				ЭлементОтбора.ПараметрыВыбора = Новый ФиксированныйМассив(ФункцииОтчетовКлиентСервер.ПолучитьМассивПараметровВыбораПолей(ФормаОтчета, КомпоновщикНастроек, СтрокаОтбора.ИдентификаторОтбора, ТипДанных));
			Иначе
				ЭлементОтбора.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПорядокПоИдентификатору(ЭлементНастроек, Идентификатор) Экспорт
	
	НайденныйПорядок = Неопределено;
	
	Для каждого Порядок из ЭлементНастроек.Элементы Цикл
		Если Строка(ЭлементНастроек.ПолучитьИдентификаторПоОбъекту(Порядок)) = Идентификатор тогда
			НайденныйПорядок = Порядок;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйПорядок;
КонецФункции

Функция ПолучитьЭлементСтруктурыПоИдентификатору(ЭлементНастроек, Идентификатор) Экспорт
	
	НайденныйЭлементСтруктуры = Неопределено;
	
	Для каждого ЭлементСтруктуры из ЭлементНастроек.Структура Цикл
		Если Строка(ЭлементНастроек.ПолучитьИдентификаторПоОбъекту(ЭлементСтруктуры)) = Идентификатор тогда
			НайденныйЭлементСтруктуры = ЭлементСтруктуры;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйЭлементСтруктуры;
КонецФункции

Функция ПолучитьПолеВыбораПоИдентификатору(ЭлементНастроек, Идентификатор) Экспорт
	
	НайденноеПолеВыбора = Неопределено;
	
	Для каждого ПолеВыбора из ЭлементНастроек.Элементы Цикл
		Если Строка(ЭлементНастроек.ПолучитьИдентификаторПоОбъекту(ПолеВыбора)) = Идентификатор тогда
			НайденноеПолеВыбора = ПолеВыбора;
			Прервать;
		КонецЕсли;
		Если ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") тогда
			НайденноеПолеВыбора = НайтиПолеВыбора(ЭлементНастроек, Идентификатор, ПолеВыбора);
			Если НайденноеПолеВыбора <> Неопределено тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденноеПолеВыбора;
КонецФункции

Функция НайтиПолеВыбора(ЭлементНастроек, Идентификатор, Группа) 
	
	НайденноеПолеВыбора = Неопределено;
	
	Для каждого ПолеВыбора из Группа.Элементы Цикл
		Если Строка(ЭлементНастроек.ПолучитьИдентификаторПоОбъекту(ПолеВыбора)) = Идентификатор тогда
			НайденноеПолеВыбора = ПолеВыбора;
			Прервать;
		КонецЕсли;
		Если ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") тогда
			НайденноеПолеВыбора = НайтиПолеВыбора(ЭлементНастроек, Идентификатор, ПолеВыбора);
			Если НайденноеПолеВыбора <> Неопределено тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденноеПолеВыбора;
КонецФункции

Процедура ДобавитьЭлементыНастройки(ФормаОтчета, Таблица, ЭлементНастройки, ЭлементВыбора, ДобавлятьИерархическиеПоля, Отступ = "") Экспорт
	
	Для каждого ПолеВыбора из ЭлементВыбора.Элементы Цикл
		Заголовок = ПолеВыбора.Заголовок;
		Если Заголовок = "" тогда
			ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора, ПолеВыбора.Поле);
			Если ДоступноеПоле <> Неопределено тогда
				Заголовок = ДоступноеПоле.Заголовок;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтрокаПоляВыбора = Таблица.Добавить();
		СтрокаПоляВыбора.Представление = Отступ + Заголовок;
		СтрокаПоляВыбора.Использование = ПолеВыбора.Использование;

		СтрокаПоляВыбора.Идентификатор = Строка(ЭлементНастройки.ПолучитьИдентификаторПоОбъекту(ПолеВыбора));
		Если ПолеВыбора.Родитель <> Неопределено тогда
			СтрокаПоляВыбора.ИдентификаторРодителя = Строка(ЭлементНастройки.ПолучитьИдентификаторПоОбъекту(ПолеВыбора.Родитель));
		КонецЕсли;
		Если ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") тогда
			СтрокаПоляВыбора.ЭтоГруппа = истина;
		КонецЕсли;
		Если ДобавлятьИерархическиеПоля и ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") и ПолеВыбора.Элементы.Количество() > 0 тогда
			ДобавитьЭлементыНастройки(ФормаОтчета, Таблица, ЭлементНастройки, ПолеВыбора, истина, Отступ + "    ");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Функция ПолучитьСтруктуруКоманды(ИмяКоманды, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено) Экспорт
	
	СтруктураКоманды = Новый Структура("ИмяКоманды", ИмяКоманды);
	
	Если ИмяКоманды = "УстановитьТекущийВариант" тогда
		СтруктураКоманды.Вставить("Ключ", Параметр1);
	ИначеЕсли ИмяКоманды = "ВыполнитьРасшифровку" тогда
		СтруктураКоманды.Вставить("Идентификатор", Параметр1);
		СтруктураКоманды.Вставить("СписокПолей", Новый СписокЗначений);
		СтруктураКоманды.Вставить("ЗначенияРодителей", Новый СписокЗначений);
		СтруктураКоманды.Вставить("Открыть", Новый СписокЗначений);
		СтруктураКоманды.Вставить("АдресХранилищаСКД", "");
		СтруктураКоманды.Вставить("Поле", "");
	КонецЕсли;
	
	Возврат СтруктураКоманды;
КонецФункции

Процедура ВыделитьВариантОтчета(ФормаОтчета, Идентификатор) Экспорт
	
	Для каждого ЭлементПереключения из ФормаОтчета.Элементы.ГруппаВыбораВариантовОтчета.ПодчиненныеЭлементы Цикл
		Если Найти(ЭлементПереключения.Имя, "ВариантОтчета_") = 0 тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрЗаменить(ЭлементПереключения.Имя, "ВариантОтчета_", "") = ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(Идентификатор) тогда
			ЭлементПереключения.Шрифт = Новый Шрифт(ЭлементПереключения.Шрифт, , , истина, , , );
		Иначе
			ЭлементПереключения.Шрифт = Новый Шрифт(ЭлементПереключения.Шрифт, , , ложь, , , );
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

Функция ИспользуетсяОтбор(Элементы, ПолеПериодРегистрации)
	
	ЕстьГруппировка = ложь;
	
	Для каждого ОтборПоле из Элементы Цикл
		
		Если ТипЗнч(ОтборПоле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
			ЕстьГруппировка = ИспользуетсяОтбор(ОтборПоле.Элементы, ПолеПериодРегистрации);
		Иначе
			Если ОтборПоле.Использование и (ОтборПоле.ЛевоеЗначение = ПолеПериодРегистрации или ОтборПоле.ПравоеЗначение = ПолеПериодРегистрации) тогда
				
				ЕстьГруппировка = истина;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьГруппировка;
	
КонецФункции

// Функция возвращает значение истина, если в группировках элементов структуры присутствует поле "Период регистрации"
//
Функция НайтиПоле(Структура, Поле)
	
	ЕстьПоле = ложь;
	
	Если ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") 
	 и ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") 
	 и ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") 
	 тогда
		
		Возврат ЕстьПоле;
		
	КонецЕсли;
	
	ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
	
	Для каждого ЭлементСтруктуры из Структура Цикл
		
		Если Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
			Для каждого ПолеГруппировки из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				Если ПолеГруппировки.Использование И ПолеГруппировки.Поле = ПолеПериодРегистрации тогда
					ЕстьПоле = истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьПоле тогда
			Прервать;
		КонецЕсли;
		Если Тип(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") тогда
			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Строки, Поле) или НайтиПоле(ЭлементСтруктуры.Колонки, Поле);
		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Структура, Поле);
		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") тогда
			Если ЭлементСтруктуры.Точки.Количество() <> 0 тогда
				ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Точки, Поле) ИЛИ НайтиПоле(ЭлементСтруктуры.Серии, Поле);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	Возврат ЕстьПоле;
	
КонецФункции //НайтиПоле()

Процедура ДобавитьПоляГруппировки(Структура, СписокПолей, БезПользовательскихПолей) Экспорт
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Строки, СписокПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Колонки, СписокПолей, БезПользовательскихПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Серии, СписокПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Точки, СписокПолей, БезПользовательскихПолей);
		Иначе
			Для каждого ТекущееПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				ДоступноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.НайтиПоле(ТекущееПолеГруппировки.Поле);
				Если ДоступноеПоле <> Неопределено 
				  И (ДоступноеПоле.Родитель = Неопределено ИЛИ Не БезПользовательскихПолей ИЛИ ДоступноеПоле.Родитель.Поле <> Новый ПолеКомпоновкиДанных("UserFields")) Тогда
					СписокПолей.Добавить(Строка(ДоступноеПоле.Поле), ДоступноеПоле.Заголовок);
				КонецЕсли;
			КонецЦикла;
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Структура, СписокПолей, БезПользовательскихПолей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиЭлементСтруктурыПоПолюГруппировки(Структура, ПолеГруппировки)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ЭлементСтруктуры = НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Строки, ПолеГруппировки);
			Если ЭлементСтруктуры = Неопределено Тогда
				Возврат НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Колонки, ПолеГруппировки);
			Иначе
				Возврат ЭлементСтруктуры;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			НайденныйЭлементСтруктуры = НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Серии, ПолеГруппировки);
			Если НайденныйЭлементСтруктуры = Неопределено Тогда
				Возврат НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Точки, ПолеГруппировки);
			Иначе
				Возврат ЭлементСтруктуры;
			КонецЕсли;
		Иначе
			Для каждого ТекущееПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				Если ПолеГруппировки = ТекущееПолеГруппировки.Поле Тогда
					Возврат ЭлементСтруктуры;
				КонецЕсли;
			КонецЦикла;
			Возврат НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Структура, ПолеГруппировки);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ДобавитьВыбранныеПоляВМассив(ЭлементСтруктуры, МассивПолей, ТолькоГруппы = Ложь) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Для каждого Элемент Из ЭлементСтруктуры Цикл
		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			Если ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
			ДобавитьВыбранныеПоляВМассив(Элемент.Элементы, МассивПолей, ТолькоГруппы);
		Иначе
			Если Не ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьРодителей(ЭлементРасшифровки, Настройки, МассивПолейРасшифровки, ВключатьРесурсы = Ложь) Экспорт
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ДоступноеПоле = ПолучитьДоступноеПоле(Настройки.ДоступныеПоляГруппировок, Новый ПолеКомпоновкиДанных(Поле.Поле));
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(Поле);
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, Настройки, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецФункции

Функция НайтиЭлементНастройки(ЭлементНастройки, ИдентификаторПользовательскойНастройки)
	МассивГрупп = Новый Массив;
	МассивГрупп.Добавить(ЭлементНастройки);
	
	Пока МассивГрупп.Количество() > 0 Цикл
		
		Для Каждого ПодчиненныйЭлемент Из МассивГрупп[0].Элементы Цикл
			Если ПодчиненныйЭлемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
				Возврат ПодчиненныйЭлемент;
			Иначе
				Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
					ИЛИ ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
					МассивГрупп.Добавить(ПодчиненныйЭлемент);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		МассивГрупп.Удалить(0);
		
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Функция возвращает представление пользовательской настройки
//
Функция ПолучитьПредставлениеНастройкиПользователя(ПользовательскаяНастройка, Знач КомпоновщикНастроек) Экспорт
	
	СписокОтборов = Новый СписокЗначений;
	СписокОтборов.Добавить(Тип("ОтборКомпоновкиДанных"));
	СписокОтборов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	СписокОтборов.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	СписокГруппировок = Новый СписокЗначений;
	СписокГруппировок.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	СписокГруппировок.Добавить(Тип("ГруппировкаТаблицыКомпоновкиДанных"));
	СписокГруппировок.Добавить(Тип("ГруппировкаДиаграммыКомпоновкиДанных"));
	СписокГруппировок.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	СписокГруппировок.Добавить(Тип("ДиаграммаКомпоновкиДанных"));

	СписокОформлений = Новый СписокЗначений;
	СписокОформлений.Добавить(Тип("ЭлементУсловногоОформленияКомпоновкиДанных"));

	СтрокаПредставлениеОтборов        = НСтр("ru = 'по %Представление%'");
	СтрокаПредставлениеГруппировок    = "  " + НСтр("ru = 'уточнить данные: %Представление%'");
	СтрокаПредставлениеПоказателей    = "  " + НСтр("ru = 'вывести поля: %Представление%'");
	СтрокаПредставлениеОформления     = "  " + НСтр("ru = 'отметить: %Представление%'");
	СтрокаПредставлениеПараметров     = "  " + НСтр("ru = 'параметры: %Представление%'");
	
	ПредставлениеОтборов        = "";
	ПредставлениеГруппировок    = "";
	ПредставлениеПоказателей    = "";
	ПредставлениеОформления     = "";
	ПредставлениеПараметров     = "";
	
	ПредставлениеПараметровДата = "";
	ДатаПредставления = Неопределено;
	СтрокаПредставлениеПараметровДата = "";

	Если ТипЗнч(КомпоновщикНастроек) =Тип("КомпоновщикНастроекКомпоновкиДанных") тогда
		Настройки = КомпоновщикНастроек.Настройки;
	ИначеЕсли ТипЗнч(КомпоновщикНастроек) =Тип("НастройкиКомпоновкиДанных") тогда
		Настройки = КомпоновщикНастроек;
	Иначе Возврат "";
	КонецЕсли;
	
	ПервыйПроход = истина;
	Для каждого ЭлементПользовательскойНастройки из ПользовательскаяНастройка.Элементы Цикл
		
		Если ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") тогда
			Если НЕ ЭлементПользовательскойНастройки.Использование тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементПользовательскойНастройки.Представление <> "" и ЭлементПользовательскойНастройки.ПредставлениеПользовательскойНастройки <> "" тогда
				ПредставлениеОтборов = ПредставлениеОтборов + ЭлементПользовательскойНастройки.ПредставлениеПользовательскойНастройки + ", ";
			ИначеЕсли ЭлементПользовательскойНастройки.Представление <> "" и ЭлементПользовательскойНастройки.ПредставлениеПользовательскойНастройки = "" тогда
				ПредставлениеОтборов = ПредставлениеОтборов + ЭлементПользовательскойНастройки.Представление + ", ";
			ИначеЕсли (ЭлементПользовательскойНастройки.Представление = "" и ЭлементПользовательскойНастройки.ПредставлениеПользовательскойНастройки <> "")
				или (ЭлементПользовательскойНастройки.Представление = "" и ЭлементПользовательскойНастройки.ПредставлениеПользовательскойНастройки = "") тогда
				Если ТипЗнч(ЭлементПользовательскойНастройки.ПравоеЗначение) <> Тип("СтандартнаяДатаНачала") 
					И ТипЗнч(ЭлементПользовательскойНастройки.ПравоеЗначение) <> Тип("СтандартныйПериод") 
					И ТипЗнч(ЭлементПользовательскойНастройки.ПравоеЗначение) <> Тип("СписокЗначений")
					И ТипЗнч(ЭлементПользовательскойНастройки.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных")
					И  ЗначениеЗаполнено(ЭлементПользовательскойНастройки.ПравоеЗначение) тогда
					ПредставлениеОтборов = ПредставлениеОтборов + ЭлементПользовательскойНастройки.ПравоеЗначение + ", ";
				ИначеЕсли ТипЗнч(ЭлементПользовательскойНастройки.ПравоеЗначение) = Тип("СтандартнаяДатаНачала") И ЭлементПользовательскойНастройки.ПравоеЗначение.Дата <> '00010101' тогда
					ПредставлениеОтборов = ПредставлениеОтборов + ЭлементПользовательскойНастройки.ПравоеЗначение.Дата + ", ";
				ИначеЕсли ТипЗнч(ЭлементПользовательскойНастройки.ПравоеЗначение) = Тип("СтандартныйПериод") 
					И ЭлементПользовательскойНастройки.ПравоеЗначение.ДатаНачала <> '00010101' 
					И ЭлементПользовательскойНастройки.ПравоеЗначение.ДатаОкончания <> '00010101' тогда
					ПредставлениеОтборов = ПредставлениеОтборов + ЭлементПользовательскойНастройки.ПравоеЗначение.ДатаНачала + " - " + ЭлементПользовательскойНастройки.ПравоеЗначение.ДатаОкончания + ", ";
				ИначеЕсли ТипЗнч(ЭлементПользовательскойНастройки.ПравоеЗначение) = Тип("СписокЗначений") и ЭлементПользовательскойНастройки.ПравоеЗначение.Количество() > 0 тогда
					ПредставлениеОтборов = ПредставлениеОтборов + ЭлементПользовательскойНастройки.ПравоеЗначение + ", ";
				Иначе
					ПредставлениеОтборов = ПредставлениеОтборов + "<Пустое значение>" + ", ";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
			
			Если НЕ ЭлементПользовательскойНастройки.Использование тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементПользовательскойНастройки.ПредставлениеПользовательскойНастройки <> "" тогда
				ПредставлениеОтборов = ПредставлениеОтборов + ЭлементПользовательскойНастройки.ПредставлениеПользовательскойНастройки + ", ";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ОтборКомпоновкиДанных") тогда
			
			Если ЭлементПользовательскойНастройки.ПредставлениеПользовательскойНастройки <> "" тогда
				ПредставлениеОтборов = ПредставлениеОтборов + ЭлементПользовательскойНастройки.ПредставлениеПользовательскойНастройки + ", ";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") тогда
			
			Если ЭлементПользовательскойНастройки.Параметр = Новый ПараметрКомпоновкиДанных("Период") 
			  и (ТипЗнч(ЭлементПользовательскойНастройки.Значение) = Тип("Дата") 
			 или ТипЗнч(ЭлементПользовательскойНастройки.Значение) = Тип("СтандартнаяДатаНачала")) тогда
			 
				ПредставлениеПараметровДата = " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'на дату %1'"), Формат(Дата(ЭлементПользовательскойНастройки.Значение), "ДФ=dd.MM.yyyy")) + " ";
				
			ИначеЕсли ЭлементПользовательскойНастройки.Параметр = Новый ПараметрКомпоновкиДанных("НачалоПериода") 
				   и (ТипЗнч(ЭлементПользовательскойНастройки.Значение) = Тип("Дата") 
				 или ТипЗнч(ЭлементПользовательскойНастройки.Значение) = Тип("СтандартнаяДатаНачала")) тогда
				   
				Если ДатаПредставления <> Неопределено тогда
					ПредставлениеПараметровДата = " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'за период %1 - %2'"),
						Формат(Дата(ЭлементПользовательскойНастройки.Значение), "ДФ=dd.MM.yyyy"), 
						Формат(Дата(ДатаПредставления), "ДФ=dd.MM.yyyy")) + " ";
				Иначе
					ДатаПредставления = ЭлементПользовательскойНастройки.Значение; 
				КонецЕсли;
				
			ИначеЕсли ЭлементПользовательскойНастройки.Параметр = Новый ПараметрКомпоновкиДанных("КонецПериода") 
				   и (ТипЗнч(ЭлементПользовательскойНастройки.Значение) = Тип("Дата")
				 или ТипЗнч(ЭлементПользовательскойНастройки.Значение) = Тип("СтандартнаяДатаНачала")) тогда
				   
				Если ДатаПредставления <> Неопределено тогда
					ПредставлениеПараметровДата = " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'за период %1 - %2'"), 
						Формат(Дата(ДатаПредставления), "ДФ=dd.MM.yyyy"),
						Формат(Дата(ЭлементПользовательскойНастройки.Значение), "ДФ=dd.MM.yyyy")) + " ";
				Иначе
					ДатаПредставления = ЭлементПользовательскойНастройки.Значение; 
				КонецЕсли;
				
			ИначеЕсли ЭлементПользовательскойНастройки.Параметр <> Новый ПараметрКомпоновкиДанных("Период")
				и ЭлементПользовательскойНастройки.Параметр <> Новый ПараметрКомпоновкиДанных("НачалоПериода")
				и ЭлементПользовательскойНастройки.Параметр <> Новый ПараметрКомпоновкиДанных("КонецПериода") тогда
				
				
				Если ЭлементПользовательскойНастройки.ПредставлениеПользовательскойНастройки <> "" тогда
					Название = ЭлементПользовательскойНастройки.ПредставлениеПользовательскойНастройки + " ";
				Иначе
					ПараметрДанных = Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ЭлементПользовательскойНастройки.Параметр);
					Если ПараметрДанных <> Неопределено тогда
						Название = ПараметрДанных.Заголовок + " ";
					КонецЕсли;
				Конецесли;
				ПредставлениеПараметров = ПредставлениеПараметров + Название;
				Если ТипЗнч(ЭлементПользовательскойНастройки.Значение) = Тип("СтандартныйПериод") тогда
					ПредставлениеПараметров = ПредставлениеПараметров + Формат(ЭлементПользовательскойНастройки.Значение.ДатаНачала, "ДФ=dd.MM.yyyy") + " - " + Формат(ЭлементПользовательскойНастройки.Значение.ДатаОкончания, "ДФ=dd.MM.yyyy");
				Иначе
					ПредставлениеПараметров = ПредставлениеПараметров + ЭлементПользовательскойНастройки.Значение;
				Конецесли;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") тогда
			Если НЕ ЭлементПользовательскойНастройки.Использование тогда
				Продолжить;
			КонецЕсли;
			Если ЭлементПользовательскойНастройки.ПредставлениеПользовательскойНастройки <> "" тогда
				ПредставлениеОформления = ПредставлениеОформления + ЭлементПользовательскойНастройки.ПредставлениеПользовательскойНастройки + ", ";
			ИначеЕсли ЭлементПользовательскойНастройки.ПредставлениеПользовательскойНастройки = "" и ЭлементПользовательскойНастройки.Представление <> "" тогда
				ПредставлениеОформления = ПредставлениеОформления + ЭлементПользовательскойНастройки.Представление + ", ";
			КонецЕсли;
		ИначеЕсли СписокГруппировок.НайтиПоЗначению(ТипЗнч(ЭлементПользовательскойНастройки)) <> Неопределено тогда
			Если НЕ ЭлементПользовательскойНастройки.Использование тогда
				Продолжить;
			КонецЕсли;
			
			Идентификатор            = ПользовательскаяНастройка.ПолучитьИдентификаторПоОбъекту(ЭлементПользовательскойНастройки);
			ГруппировкаОбщихНастроек = НайтиЭлементСтруктуры(ЭлементПользовательскойНастройки.ИдентификаторПользовательскойНастройки, Настройки);
			Если ГруппировкаОбщихНастроек <> Неопределено тогда
				ПредставлениеПользовательскойНастройки = ГруппировкаОбщихНастроек.ПредставлениеПользовательскойНастройки;
			Иначе
				ПредставлениеПользовательскойНастройки = "";
			КонецЕсли;

			Если ПредставлениеПользовательскойНастройки <> "" тогда
				ПредставлениеГруппировок = ПредставлениеГруппировок + ПредставлениеПользовательскойНастройки + ", ";
			ИначеЕсли ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ГруппировкаКомпоновкиДанных") и ПредставлениеПользовательскойНастройки = "" тогда
				СписокПолейГруппировки = ПолучитьСтрокуИзПолейГруппировки(ЭлементПользовательскойНастройки, Настройки);
			ИначеЕсли ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ГруппировкаТаблицыКомпоновкиДанных") и ПредставлениеПользовательскойНастройки = "" тогда
				СписокПолейГруппировки = ПолучитьСтрокуИзПолейГруппировки(ЭлементПользовательскойНастройки, Настройки);
			ИначеЕсли ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") и ПредставлениеПользовательскойНастройки = "" тогда
				СписокПолейГруппировки = ПолучитьСтрокуИзПолейГруппировки(ЭлементПользовательскойНастройки, Настройки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПредставлениеПараметровДата = "" и ДатаПредставления <> '00010101'и ДатаПредставления <> Неопределено тогда
		ПредставлениеПараметровДата = " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'на дату %1'"), Формат(Дата(ДатаПредставления), "ДФ=dd.MM.yyyy")) + " ";
	КонецЕсли;
	
	СтрокаПредставленияНастройки = "";
	
	Если ПредставлениеОтборов <> "" тогда
		СтрокаПредставлениеОтборов = СтрЗаменить(СтрокаПредставлениеОтборов, "%Представление%", Лев(ПредставлениеОтборов, СтрДлина(ПредставлениеОтборов)-2));
		СтрокаПредставленияНастройки = СтрокаПредставленияНастройки + СтрокаПредставлениеОтборов;
	КонецЕсли;
	
	Если ПредставлениеПараметровДата <> "" тогда
		СтрокаПредставленияНастройки = СтрокаПредставленияНастройки + ПредставлениеПараметровДата;
	КонецЕсли;
	
	Если ПредставлениеГруппировок <> "" тогда
		СтрокаПредставлениеГруппировок = СтрЗаменить(СтрокаПредставлениеГруппировок, "%Представление%",  Лев(ПредставлениеГруппировок, СтрДлина(ПредставлениеГруппировок)-2));
		СтрокаПредставленияНастройки = СтрокаПредставленияНастройки + СтрокаПредставлениеГруппировок;
	КонецЕсли;
	
	Если ПредставлениеПараметров <> "" тогда                                                                                       
		СтрокаПредставлениеПараметров = СтрЗаменить(СтрокаПредставлениеПараметров, "%Представление%",  Лев(ПредставлениеПараметров, СтрДлина(ПредставлениеПараметров)-2));
		СтрокаПредставленияНастройки = СтрокаПредставленияНастройки + СтрокаПредставлениеПараметров;
	КонецЕсли;
	
	Если ПредставлениеПоказателей <> "" тогда
		СтрокаПредставлениеПоказателей = СтрЗаменить(СтрокаПредставлениеПоказателей, "%Представление%",  Лев(ПредставлениеПоказателей, СтрДлина(ПредставлениеПоказателей)-2));
		СтрокаПредставленияНастройки = СтрокаПредставленияНастройки + СтрокаПредставлениеПоказателей;
	КонецЕсли;

	Если ПредставлениеОформления <> "" тогда
		СтрокаПредставлениеОформления = СтрЗаменить(СтрокаПредставлениеОформления, "%Представление%",  Лев(ПредставлениеОформления, СтрДлина(ПредставлениеОформления)-2));
		СтрокаПредставленияНастройки = СтрокаПредставленияНастройки + СтрокаПредставлениеОформления;
	КонецЕсли;
	
	
	Если СтрокаПредставленияНастройки = "" тогда
		СтрокаПредставленияНастройки = НСтр("ru = 'Все данные'");
	КонецЕсли;
	Возврат СокрЛП(СтрокаПредставленияНастройки);
		
КонецФункции

// Функция сравнивает две пользовательские настройки и возвращает результат сравнение истина - 
// настройки одинаковые, ложь - разные
//
Функция НастройкиОдинаковые(ПользовательскаяНастройка1, ПользовательскаяНастройка2) Экспорт
	
	ОдинаковыеНастройки = истина;
	Если ПользовательскаяНастройка1.Элементы.Количество() = ПользовательскаяНастройка2.Элементы.Количество() тогда
		Сч = 0;
		Для сч = 0 по ПользовательскаяНастройка1.Элементы.Количество()-1 Цикл

			Элемент1 = ПользовательскаяНастройка1.Элементы[Сч];
			Элемент2 = ПользовательскаяНастройка2.Элементы[Сч];
			
			Если ТипЗнч(Элемент1) <> ТипЗнч(Элемент2) тогда
				ОдинаковыеНастройки = ложь;
				Прервать;
			КонецЕсли;
			
			Если Элемент1.ИдентификаторПользовательскойНастройки <> Элемент2.ИдентификаторПользовательскойНастройки тогда
				ОдинаковыеНастройки = ложь;
				Прервать;
			КонецЕсли;
			Если ТипЗнч(Элемент1) <> Тип("ВыбранныеПоляКомпоновкиДанных") 
				и ТипЗнч(Элемент1) <> Тип("ОтборКомпоновкиДанных")  
				и ТипЗнч(Элемент1) <> Тип("ПорядокКомпоновкиДанных")  
				и ТипЗнч(Элемент1) <> Тип("УсловноеОформлениеКомпоновкиДанных")  
				и ТипЗнч(Элемент1) <> Тип("СтруктураНастроекКомпоновкиДанных")  
				тогда
				Если Элемент1.Использование <> Элемент2.Использование тогда
					ОдинаковыеНастройки = ложь;
					Прервать;
				КонецЕсли;
				
				Если ТипЗнч(Элемент1) = Тип("ЭлементОтбораКомпоновкиДанных") тогда
					
					Если Элемент1.ВидСравнения <> Элемент2.ВидСравнения тогда
						ОдинаковыеНастройки = ложь;
						Прервать;
					КонецЕсли;
					
					Если ТипЗнч(Элемент1.ПравоеЗначение) <> ТипЗнч(Элемент2.ПравоеЗначение) тогда
						ОдинаковыеНастройки = ложь;
						Прервать;
					КонецЕсли;
					
					Если ТипЗнч(Элемент1.ПравоеЗначение) <> Тип("СтандартнаяДатаНачала") И 
						ТипЗнч(Элемент1.ПравоеЗначение) <> Тип("СтандартныйПериод") И 
						ТипЗнч(Элемент1.ПравоеЗначение) <> Тип("СписокЗначений") И 
						Элемент1.ПравоеЗначение <> Элемент2.ПравоеЗначение	тогда
						ОдинаковыеНастройки = ложь;
						Прервать;
					ИначеЕсли ТипЗнч(Элемент1.ПравоеЗначение) = Тип("СтандартнаяДатаНачала") 
						И ТипЗнч(Элемент2.ПравоеЗначение) = Тип("СтандартнаяДатаНачала") И
						Элемент1.ПравоеЗначение.Дата <> Элемент2.ПравоеЗначение.Дата тогда
						ОдинаковыеНастройки = ложь;
						Прервать;
					ИначеЕсли ТипЗнч(Элемент1.ПравоеЗначение) = Тип("СтандартныйПериод") 
						И ТипЗнч(Элемент2.ПравоеЗначение) = Тип("СтандартныйПериод") И
						(Элемент1.ПравоеЗначение.ДатаНачала <> Элемент2.ПравоеЗначение.ДатаНачала ИЛИ
						Элемент1.ПравоеЗначение.ДатаОкончания <> Элемент2.ПравоеЗначение.ДатаОкончания) тогда
						ОдинаковыеНастройки = ложь;
						Прервать;
						
					ИначеЕсли ТипЗнч(Элемент1.ПравоеЗначение) = Тип("СписокЗначений") 
						И ТипЗнч(Элемент2.ПравоеЗначение) = Тип("СписокЗначений") тогда
						Если Элемент2.ПравоеЗначение.Количество() <> Элемент1.ПравоеЗначение.Количество() тогда
							ОдинаковыеНастройки = ложь;
							Прервать;
						Иначе
							Для каждого ЭлементСписка из Элемент1.ПравоеЗначение Цикл
								Если Элемент2.ПравоеЗначение[Элемент1.ПравоеЗначение.Индекс(ЭлементСписка)].Значение <> ЭлементСписка.Значение тогда
									ОдинаковыеНастройки = ложь;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ТипЗнч(Элемент1) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") тогда
					Если ТипЗнч(Элемент1.Значение) <> ТипЗнч(Элемент2.Значение) тогда
						ОдинаковыеНастройки = ложь;
						Прервать;
					КонецЕсли;

					Если ТипЗнч(Элемент1.Значение) <> Тип("СтандартнаяДатаНачала") И 
						ТипЗнч(Элемент1.Значение) <> Тип("СтандартныйПериод") И 
						ТипЗнч(Элемент1.Значение) <> Тип("СписокЗначений") И 
						Элемент1.Значение  = Элемент2.Значение тогда
					ИначеЕсли ТипЗнч(Элемент1.Значение) = Тип("СтандартнаяДатаНачала") 
							И ТипЗнч(Элемент2.Значение) = Тип("СтандартнаяДатаНачала") И
							Элемент1.Значение.Дата = Элемент2.Значение.Дата тогда
							
					ИначеЕсли ТипЗнч(Элемент1.Значение) = Тип("СтандартныйПериод") 
							И ТипЗнч(Элемент2.Значение) = Тип("СтандартныйПериод") И
							Элемент1.Значение.ДатаНачала = Элемент2.Значение.ДатаНачала И
							Элемент1.Значение.ДатаОкончания = Элемент2.Значение.ДатаОкончания тогда
						
					ИначеЕсли ТипЗнч(Элемент1.Значение) = Тип("СписокЗначений") 
							И ТипЗнч(Элемент2.Значение) = Тип("СписокЗначений") тогда
							Если Элемент2.Значение.Количество() <> Элемент1.Значение.Количество() тогда
								ОдинаковыеНастройки = ложь;
								Прервать;
							Иначе
								Для каждого ЭлементСписка из Элемент1.Значение Цикл
									Если Элемент2.Значение[Элемент1.Значение.Индекс(ЭлементСписка)].Значение <> ЭлементСписка.Значение тогда
										ОдинаковыеНастройки = ложь;
										Прервать;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;

					Иначе
						ОдинаковыеНастройки = ложь;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			Иначе
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОдинаковыеНастройки = ложь;
	КонецЕсли;
	
	Возврат ОдинаковыеНастройки;
	
КонецФункции

Функция ПолучитьСтрокуИзПолейГруппировки(ЭлементСтруктуры, КомпоновщикНастроек)
	
	СписокПолейГруппировки = "";
	Для каждого ПолеГруппировки из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
		Если ПолеГруппировки.Использование тогда
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеГруппировки.Поле, КомпоновщикНастроек);
			СписокПолейГруппировки = ДоступноеПоле.Заголовок + ", ";
		КонецЕсли;
	КонецЦикла;
	Если СписокПолейГруппировки <> "" тогда
		СписокПолейГруппировки = Лев(СписокПолейГруппировки, СтрДлина(СписокПолейГруппировки)-2);
	КонецЕсли;
	
	Возврат СписокПолейГруппировки;
	
КонецФункции

Функция НайтиЭлементСтруктуры(ИдентификаторПользовательскойНастройки, Элемент)
	
	Если ТипЗнч(Элемент) = Тип("НастройкиКомпоновкиДанных")
	 или ТипЗнч(Элемент) = Тип("ГруппировкаКомпоновкиДанных") 
	 или ТипЗнч(Элемент) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
	 или ТипЗнч(Элемент) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
		КоллекцияЭлементов = Элемент.Структура;
	Иначе
		КоллекцияЭлементов = Элемент;
	КонецЕсли;
	
	Если КоллекцияЭлементов = Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;
	Для каждого ЭлементСтруктуры из КоллекцияЭлементов Цикл
		
		Если ИдентификаторПользовательскойНастройки = ЭлементСтруктуры.ИдентификаторПользовательскойНастройки тогда
			
			Возврат ЭлементСтруктуры;
			
		Иначе
			
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") тогда
				ПодчиненныйЭлемент = НайтиЭлементСтруктуры(ИдентификаторПользовательскойНастройки, ЭлементСтруктуры.Структура);
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") тогда
				ПодчиненныйЭлемент = НайтиЭлементСтруктуры(ИдентификаторПользовательскойНастройки, ЭлементСтруктуры.Строки);
				Если ПодчиненныйЭлемент = Неопределено тогда
					ПодчиненныйЭлемент = НайтиЭлементСтруктуры(ИдентификаторПользовательскойНастройки, ЭлементСтруктуры.Колонки);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") тогда
				ПодчиненныйЭлемент = НайтиЭлементСтруктуры(ИдентификаторПользовательскойНастройки, ЭлементСтруктуры.Серии);
				Если ПодчиненныйЭлемент = Неопределено тогда
					ПодчиненныйЭлемент = НайтиЭлементСтруктуры(ИдентификаторПользовательскойНастройки, ЭлементСтруктуры.Точки);
				КонецЕсли;
			КонецЕсли;
			
			Если ПодчиненныйЭлемент <> Неопределено тогда
				Возврат ПодчиненныйЭлемент;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска)
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 ИЛИ ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
	 ИЛИ ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	ИначеЕсли ТипЗнч(ОбластьПоиска) = Тип("НастройкиКомпоновкиДанных") тогда
		Возврат ОбластьПоиска.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции



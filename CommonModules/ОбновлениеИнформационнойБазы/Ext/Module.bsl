///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБНОВЛЕНИЯ ИБ 

//// Процедура проверяет, есть ли необходимость выполнять обновление информационной базы.
//// Если необходимо - выполняется обновление.
//// Если обновление не удалось выполнить, то
//// - предлагает завершить работу системы (в режиме клиента);
//// - выбрасывает исключение с описанием ошибки (в режиме внешнего соединения).
////
//// Вызывается в режиме клиента или внешнего соединения.
////
//// Параметры:
////  Нет.
////
//Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт
//	
//	// Проверка необходимости обновления информационной базы.
//	Если НЕ ПустаяСтрока(Метаданные.Версия)
//	   И Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия Тогда
//		#Если Клиент Тогда
//		Предупреждение("Изменился номер версии конфигурации. Будет выполнено обновление информационной базы.");
//		#КонецЕсли
//	Иначе
//		Возврат;
//	КонецЕсли;

//	// Проверка наличия прав для обновления информационной базы.
//	Если НЕ ПравоДоступа("МонопольныйРежим", Метаданные) 
//	 ИЛИ НЕ ПравоДоступа("Использование",    Метаданные.Обработки.ОбновлениеИнформационнойБазы) 
//	 ИЛИ НЕ ПравоДоступа("Просмотр",         Метаданные.Обработки.ОбновлениеИнформационнойБазы) Тогда

//		#Если Клиент Тогда
//		Предупреждение("Недостаточно прав для выполнения обновления. Работа системы будет завершена.");

//		ЗавершитьРаботуСистемы();
//		#КонецЕсли
//		Возврат;
//	КонецЕсли;

//	БазоваяПоставка = (Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0);
//	
//	// Установка монопольного режима для обновления информационной базы.
//	Если НЕ БазоваяПоставка Тогда
//		
//		// Установка монопольного режима для обновления информационной базы.
//		Попытка
//			УстановитьМонопольныйРежим(Истина);
//		Исключение
//			Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
//			#Если Клиент Тогда
//			Предупреждение("Не удалось установить монопольный режим. Работа системы будет завершена.");
//			
//			ЗавершитьРаботуСистемы();
//			#КонецЕсли
//			Возврат;
//		КонецПопытки;
//		
//	КонецЕсли; 

//	// Обновление информационной базы.
//	Обработки.ОбновлениеИнформационнойБазы.Создать().ВыполнитьОбновление();

//	// Откючение монопольного режима.
//	Если НЕ БазоваяПоставка Тогда
//		УстановитьМонопольныйРежим(Ложь);
//	КонецЕсли; 

//	#Если Клиент Тогда
//	// Проверка выполнения обновления информационной базы.
//	Если Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия Тогда
//		Текст = "Не выполнено обновление информационной базы! Завершить работу системы?";
//		Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );

//		Если Ответ = КодВозвратаДиалога.Да Тогда
//			ЗавершитьРаботуСистемы();
//		КонецЕсли;
//	КонецЕсли;
//	#КонецЕсли
//	
//КонецПроцедуры

Процедура ОбновитьПредопределенныеВариантыОтчетов() Экспорт
	
	СписокНастроек = Новый СписокЗначений;
	СписокНастроек.Добавить("НастройкаСписокРаботников", "Отчет ""Список работников"" : Список работников");
	СписокНастроек.Добавить("НастройкаСписокРаботниковОрганизации", "Отчет ""Список работников организаций"" : Список работников");
	
	
	СписокНастроек.Добавить("ПаспортныеДанныеРаботниковОрганизации", "Отчет ""Список работников организаций"" : Паспортные данные");
	СписокНастроек.Добавить("СписокДекретниц", "Отчет ""Список работников организаций"" : Список декретниц");
	СписокНастроек.Добавить("РодственникиСотрудниковОрганизации", "Отчет ""Список работников организаций"" : Родственники работников");
	СписокНастроек.Добавить("СтажиРаботниковОрганизации", "Отчет ""Список работников организаций"" : Стаж работы");
	СписокНастроек.Добавить("СписокИменинниковОрганизаций", "Отчет ""Список работников организаций"" : Именинники организаций");
	СписокНастроек.Добавить("СписокПредставляемыхНаПенсию", "Отчет ""Список работников организаций"" : Список представляемых на пенсию");
	СписокНастроек.Добавить("СотрудникиСЗаканчивающимисяТрудовымиДоговорами", "Отчет ""Список работников организаций"" : Сотрудники с заканчивающимися трудовыми договорами");

	//СписокНастроек.Добавить("СевернаяНадбавкаРаботниковОрганизации", "Отчет ""Список работников организаций"" : Северная надбавка");
	СписокНастроек.Добавить("ПаспортныеДанные", "Отчет ""Список работников"" : Паспортные данные");
	СписокНастроек.Добавить("РодственникиСотрудников", "Отчет ""Список работников"" : Родственники работников");
	//СписокНастроек.Добавить("ОбразованиеРаботников", "Отчет ""Список работников"" : Образование работников");
	
	СписокНастроек.Добавить("ОтчетПоВозрастуРаботниковОрганизации", "Отчет ""Статистика кадров организации"" : Отчет по возрасту");
	СписокНастроек.Добавить("ОтчетПоВозрастуДля6Т", "Отчет ""Статистика кадров организации"" : Отчет по возрасту (для 6-Т)");
	СписокНастроек.Добавить("ОтчетПоОбразованиюДля6Т", "Отчет ""Статистика кадров организации"" : Отчет по образованию (для 6-Т)");
	СписокНастроек.Добавить("ПрофессиональноеОбучениеРаботников6Т", "Отчет ""Статистика кадров организации"" : Профессиональное обучение работников (для 6-Т)");
	СписокНастроек.Добавить("ПрофессиональноеОбучениеРаботниковЗаГраницей6Т", "Отчет ""Статистика кадров организации"" : Профессиональное обучение работников за границей (для 6-Т)");
    СписокНастроек.Добавить("СписокПринятыхИУволенных", "Отчет ""Перемещения работников организаций"" : Список принятых и уволенных");
	//
	//СписокНастроек.Добавить("АнализНДФЛ", "Отчет ""Анализ налогов и взносов"" : Анализ НДФЛ");
	//СписокНастроек.Добавить("АнализЕСН", "Отчет ""Анализ налогов и взносов"" : Анализ ЕСН");
	//СписокНастроек.Добавить("АнализВзносовПФР", "Отчет ""Анализ налогов и взносов"" : Анализ ПФР");
	//СписокНастроек.Добавить("АнализФССНС", "Отчет ""Анализ налогов и взносов"" : Анализ ФСС на НС и ПЗ");
	//
	//СписокНастроек.Добавить("Отпуска", "Отчет ""Отпуска"" : Отпуска");
	//СписокНастроек.Добавить("ГрафикОтпусков", "Отчет ""Отпуска"" : График отпусков");
	//СписокНастроек.Добавить("ФактическиеОтпуска", "Отчет ""Отпуска"" : Фактические отпуска");
	//СписокНастроек.Добавить("ОтпускаРуководителей", "Отчет ""Отпуска"" : Отпуска руководителей");
	//	
	//СписокНастроек.Добавить("ОценкаОУППоКварталам", "Отчет ""Оценка эффективности ОУП"" : По кварталам");
	//СписокНастроек.Добавить("ОценкаОУППоОтветственным", "Отчет ""Оценка эффективности ОУП"" : По ответсвенным");
	//
	СписокНастроек.Добавить("АнализПоказателейПлановыеПоказатели", "Отчет ""Анализ показателей"" : Плановые показатели");
	СписокНастроек.Добавить("АнализПоказателейФактическиеПоказатели", "Отчет ""Анализ показателей"" : Фактические показатели");
	
	СписокНастроек.ОтметитьЭлементы("Выбирете варианты отчетов, которые требуется обновить:");
	
	ЗагрузитьНастройкиОтчетов(СписокНастроек)
	
КонецПроцедуры

Процедура ДобавитьНастройкуОтчета(НазваниеМакета, ЗадаватьВопрос = Истина) Экспорт
	
	ТекстовыйДокумент = Обработки.ОбновлениеИнформационнойБазы.ПолучитьМакет(НазваниеМакета);
	СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	ЧтениеXML.Прочитать();
	СправочникОбъект = ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	//Определим есть ли существует ли такаяже настрока
	ЕстьОдинаковыйЭлемент = Ложь;
	ОбновляемыйЭлемент = Неопределено;
	
	ТЗ = "ВЫБРАТЬ
	     |	СохраненныеНастройки.Ссылка
	     |ИЗ
	     |	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	     |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СохраненныеНастройки.Пользователи КАК СохраненныеНастройкиПользователи
	     |		ПО СохраненныеНастройки.Ссылка = СохраненныеНастройкиПользователи.Ссылка
	     |ГДЕ
	     |	СохраненныеНастройкиПользователи.Пользователь = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	     |	И СохраненныеНастройки.Наименование = &Наименование
	     |	И СохраненныеНастройки.ТипНастройки = &ТипНастройки
	     |	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект";
		 
	Запрос = Новый Запрос(ТЗ);
	Запрос.УстановитьПараметр("Наименование", СправочникОбъект.Наименование);
	Запрос.УстановитьПараметр("ТипНастройки", СправочникОбъект.ТипНастройки);
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", СправочникОбъект.НастраиваемыйОбъект);
	РезультатВопроса = Запрос.Выполнить();
	ЕстьОдинаковыйЭлемент =  Ложь;
	ОбновляемыйЭлемент = Неопределено;
	Если РезультатВопроса.Пустой() Тогда
		ЕстьОдинаковыйЭлемент =  Ложь;
		ОбновляемыйЭлемент = Неопределено;
	Иначе
		ЕстьОдинаковыйЭлемент = Истина;
		Выборка = РезультатВопроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ОбъектМетаданныхОтчет = Метаданные.НайтиПоТипу(Тип(СправочникОбъект.НастраиваемыйОбъект));
			#Если Клиент Тогда
				Если ЗадаватьВопрос Тогда
					Ответ = Вопрос("Вариант отчета " + СправочникОбъект.Наименование + " для отчета " + ОбъектМетаданныхОтчет.Синоним + " уже существует. Перезаписать?", РежимДиалогаВопрос.ДаНет);
					Если Ответ = КодВозвратаДиалога.Да Тогда
						ОбновляемыйЭлемент = Выборка.Ссылка;
					КонецЕсли;
				Иначе
					Сообщить("Вариант отчета " + СправочникОбъект.Наименование + " для отчета " + ОбъектМетаданныхОтчет.Синоним + " не был загружен, так как похожая настройка уже существует. Рекомендуется обновить вариант отчета вручную в справочнике ""Сохраненные настройки"".");
				КонецЕсли;
			#КонецЕсли
			#Если ВнешнееСоединение Тогда
				ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, "Вариант отчета " + СправочникОбъект.Наименование + " для отчета " + ОбъектМетаданныхОтчет.Синоним + " не был загружен, так как похожая настройка уже существует. Рекомендуется обновить вариант отчета вручную в справочнике ""Сохраненные настройки"".");
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновляемыйЭлемент = Неопределено И НЕ ЕстьОдинаковыйЭлемент Тогда
		ОбновляемыйЭлемент =  Справочники.СохраненныеНастройки.СоздатьЭлемент();
	ИначеЕсли ОбновляемыйЭлемент <> Неопределено И ЕстьОдинаковыйЭлемент Тогда
		ОбновляемыйЭлемент = ОбновляемыйЭлемент.ПолучитьОбъект();
	Иначе
		Возврат;
	КонецЕсли;
	
	ВариантОтчета                         = ОбновляемыйЭлемент;
	//ВариантОтчета.Владелец                = Справочники.ГруппыПользователей.ВсеПользователи;
	ВариантОтчета.Наименование            = СправочникОбъект.Наименование;
	ВариантОтчета.НастраиваемыйОбъект     = СправочникОбъект.НастраиваемыйОбъект;
	ВариантОтчета.ТипНастройки            = СправочникОбъект.ТипНастройки;
	ВариантОтчета.СохранятьАвтоматически  = СправочникОбъект.СохранятьАвтоматически;
	ВариантОтчета.ИспользоватьПриОткрытии = СправочникОбъект.ИспользоватьПриОткрытии;
	ВариантОтчета.СохранятьПериод         = СправочникОбъект.СохранятьПериод;
	ВариантОтчета.ОткрыватьПриЗапуске     = СправочникОбъект.ОткрыватьПриЗапуске;
	ВариантОтчета.ОткрыватьПриЗапуске     = СправочникОбъект.ОткрыватьПриЗапуске;
	ВариантОтчета.Описание                = СправочникОбъект.Описание;
	ВариантОтчета.ХранилищеНастроек       = Новый ХранилищеЗначения(СправочникОбъект.ХранилищеНастроек.Получить());
	СтрокаПользователя = ВариантОтчета.Пользователи.Добавить();
	СтрокаПользователя.Пользователь   = Справочники.ГруппыПользователей.ВсеПользователи;
	СтрокаПользователя.ПравоИзменения = Истина;
	ВариантОтчета.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьНастройкиОтчетов(СписокНастроек)
	
	Для каждого ЭлементСпискаНастроек из СписокНастроек Цикл
		
		Если Не ЭлементСпискаНастроек.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьНастройкуОтчета(ЭлементСпискаНастроек.Значение);
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обновление версии ИБ"
// Серверные процедуры и функции обновления информационной базы
// при смене версии конфигурации.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Проверить необходимость обновления информационной базы при смене версии конфигурации.
//
Функция НеобходимоОбновлениеИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НеобходимоВыполнитьОбновление(Метаданные.Версия, ВерсияИБ(Метаданные.Имя)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает Истина при необходимости обновления конфигурации информационной базы подчиненного узла РИБ.
// В главном узле всегда - Ложь.
//
Функция ТребуетсяОбновлениеКонфигурацииУзлаРИБ() Экспорт
	
	Возврат КонфигурацияИзменена() И ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ();
	
КонецФункции

// Обновление ИБ будет выполнено вне зависимости от изменения версии конфигурации.
//
// Если версия конфигурации не изменилась, будут выполнены только обязательные
// обработчики обновления (у которых версия = "*").
// 
// Необходимость снимается автоматически после обновления ИБ.
//
// Не используется в модели сервиса.
//
Процедура УстановитьНеобходимостьОбновленияИнформационнойБазы() Экспорт
	
	// В текущей конфигурации действий не требуется
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Проверить необходимость обновления неразделенных данных информационной базы
// при смене версии конфигурации.
//
Функция НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ВерсияМетаданных = Метаданные.Версия;
		Если ПустаяСтрока(ВерсияМетаданных) Тогда
			ВерсияМетаданных = "0.0.0.0";
		КонецЕсли;
		
		ВерсияОбщихДанных = ВерсияИБ(Метаданные.Имя, Истина);
		
		Если НеобходимоВыполнитьОбновление(ВерсияМетаданных, ВерсияОбщихДанных) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает текст причины блокировки, если требуется обновление ИБ и у текущего пользователя
// для этого недостаточно прав, иначе возвращает пустую строку.
//
// Параметры:
//  УчитыватьПривилегированныйРежим - Булево. Начальное значение Истина. Если указать Ложь,
//                                    то при проверке полноправности текущего пользователя
//                                    наличие привилегированного режиме не будет учитываться.
//  
//  ПриЗапускеКлиентскогоПриложения - Булево. Начальное значение Ложь. Если указать Истина,
//                                    тогда в случае, если выполнен запуск с пустым списком
//                                    пользователей, то возвращается пустая строка, вместо
//                                    сообщения о недостатке прав (когда есть недостаток), 
//                                    т.к. проверка на запуск с пустым списком пользователей
//                                    при недостатке прав проверяется позднее и отдельно,
//                                    в результате чего происходит добавление пользователя ИБ
//                                    администратор с ролями АдминистраторСистемы и ПолныеПрава.
// 
// Возвращаемое значение:
//  Строка. Если база не заблокирована, тогда пустая строка, иначе сообщение о причине блокировки.
// 
Функция ИнформационнаяБазаЗаблокированаДляОбновления(УчитыватьПривилегированныйРежим = Истина, Знач ПриЗапускеКлиентскогоПриложения = Ложь) Экспорт
	
	Сообщение = "";
	
	// Проверка необходимости обновления информационной базы.
	// Проверка наличия прав для обновления информационной базы.
	Если НЕ ПустаяСтрока(Метаданные.Версия)
		И Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия И
		(НЕ ПравоДоступа("МонопольныйРежим", Метаданные)
	 ИЛИ НЕ ПравоДоступа("Использование",    Метаданные.Обработки.ОбновлениеИнформационнойБазы)
	 ИЛИ НЕ ПравоДоступа("Просмотр",         Метаданные.Обработки.ОбновлениеИнформационнойБазы)) Тогда
	
		Сообщение = "Недостаточно прав для выполнения обновления. Работа системы будет завершена.";
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

// Получить версию конфигурации или родительской конфигурации (библиотеки),
// которая хранится в информационной базе.
//
// Параметры
//  ИдентификаторБиблиотеки  – Строка – имя конфигурации или идентификатор библиотеки.
//
// Возвращаемое значение:
//   Строка   – версия.
//
// Пример использования:
//   ВерсияКонфигурацииИБ = ВерсияИБ(Метаданные.Имя);
//
Функция ВерсияИБ(Знач ИдентификаторБиблиотеки, Знач ПолучитьВерсиюОбщихДанных = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтандартнаяОбработка = Истина;
	Результат = "";
	
	Если ИдентификаторБиблиотеки = "СтандартныеПодсистемы" Тогда
		Результат = "2.1.3.48";
	Иначе
		Результат = Константы.НомерВерсииКонфигурации.Получить();
	КонецЕсли;
	
	Возврат ?(ПустаяСтрока(Результат), "0.0.0.0", Результат);
	
КонецФункции

// Возвращает Истина если запуск информационной базы 
// выполняется первый раз, иначе возвращает Ложь.
//
Функция ПервыйЗапускИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат (Константы.НомерВерсииКонфигурации.Получить()="");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры для установки/обновления/получения параметров работы программы (кэшей).

// Возвращает параметры работы программы для использования (фиксированные данные),
// которые являются, например, кэшем.
//
Функция ПараметрыРаботыПрограммы(ИмяКонстанты) Экспорт
	
	Возврат ОбновлениеИнформационнойБазыСлужебныйПовтИсп.ПараметрыРаботыПрограммы(ИмяКонстанты);
	
КонецФункции

// Возвращает изменения параметра работы программы с учетом текущей версии
// конфигурации и текущей версии ИБ.
//
// Параметры:
//  Параметры    - значение извлеченное из константы, имя которой передавалось
//                 в процедуру ДобавитьИзмененияПараметраРаботыПрограммы.
//
//  ИмяПараметра - Строка, которая передавалась, как параметр ИмяПараметра
//                 в процедуру ДобавитьИзмененияПараметраРаботыПрограммы.
//
// Возвращаемое значение:
//  Массив - содержит значения изменений. Может быть несколько, например,
//           когда область данных давно не обновлялась.
//
Функция ИзмененияПараметраРаботыПрограммы(Параметры, ИмяПараметра) Экспорт
	
	ПоследниеИзменения = Параметры["ИзмененияПараметра" + ИмяПараметра].Получить();
	
	Версия = Метаданные.Версия;
	СледующаяВерсия = СледующаяВерсия(Версия);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ВерсияИБ = ОбновлениеИнформационнойБазыСлужебныйПовтИсп.МинимальнаяВерсияИБ();
		
		ВерсияОбщихДанных = ВерсияИБ(Метаданные.Имя, Истина);
		ОбновлениеВнеОбновленияИБ = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияОбщихДанных, Версия) = 0;
	Иначе
		ВерсияИБ = ВерсияИБ(Метаданные.Имя);
		ОбновлениеВнеОбновленияИБ = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияИБ, Версия) = 0;
	КонецЕсли;
	
	// Изменения к более старшим версиям не нужны,
	// кроме случая когда обновление выполняется вне обновления ИБ,
	// т.е. версия ИБ равна версии конфигурации.
	// В этом случае дополнительно выбираются изменения к следующей версии.
	
	Индекс = ПоследниеИзменения.Количество()-1;
	Пока Индекс >=0 Цикл
		ВерсияИзменения = ПоследниеИзменения[Индекс].ВерсияКонфигурации;
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияИБ, ВерсияИзменения) >= 0
		   И НЕ (ОбновлениеВнеОбновленияИБ
		     И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СледующаяВерсия, ВерсияИзменения) = 0) Тогда
			
			ПоследниеИзменения.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат ПоследниеИзменения.ВыгрузитьКолонку("Изменения");
	
КонецФункции

// Устанавливает вспомогательные данные для работы программы, хранимые в неразделенных константах.
//
// Параметры:
//  ИмяКонстанты      - Строка - имя неразделенной константы, в которой сохраняется значение параметра.
//  ИмяПараметра      - Строка - имя параметра, который нужно установить (без приставки ИзмененияПараметра).
//  ЗначениеПараметра - фиксированные данные, которые устанавливаются в качестве значения параметра.
//
Процедура УстановитьПараметрРаботыПрограммы(ИмяКонстанты, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа." + ИмяКонстанты);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Параметры = Константы[ИмяКонстанты].Получить().Получить();
		Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
			Параметры = Новый Структура;
		КонецЕсли;
		
		Параметры.Вставить(ИмяПараметра, ЗначениеПараметра);
		
		Константы[ИмяКонстанты].Установить(Новый ХранилищеЗначения(Параметры));
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Добавить изменения вспомогательных данных для работы программы, хранимые в неразделенных константах.
//
// Параметры:
//  ИмяКонстанты       - Строка - имя неразделенной константы, в которой сохраняется значение параметра.
//  ИмяПараметра       - Строка - имя параметра, который нужно установить.
//  ИзмененияПараметра - фиксированные данные, которые регистрируются в качестве изменений параметра.
//                       Изменения не добавляются, если значение ИзменениеПараметра не заполнено.
//
Процедура ДобавитьИзмененияПараметраРаботыПрограммы(ИмяКонстанты, ИмяПараметра, ИзмененияПараметра) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа." + ИмяКонстанты);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
	
		ОбновитьСоставИзменений = Ложь;
		Параметры = ОбновлениеИнформационнойБазыСлужебныйПовтИсп.ПараметрыРаботыПрограммы(ИмяКонстанты);
		
		ИмяПараметраХраненияИзменений = "ИзмененияПараметра" + ИмяПараметра;
		
		Если Параметры.Свойство(ИмяПараметраХраненияИзменений) Тогда
			ПоследниеИзменения = Параметры[ИмяПараметраХраненияИзменений].Получить();
			
			Если ТипЗнч(ПоследниеИзменения)              <> Тип("ТаблицаЗначений")
			 ИЛИ ПоследниеИзменения.Колонки.Количество() <> 2
			 ИЛИ ПоследниеИзменения.Колонки[0].Имя       <> "ВерсияКонфигурации"
			 ИЛИ ПоследниеИзменения.Колонки[1].Имя       <> "Изменения" Тогда
				
				ПоследниеИзменения = Неопределено;
			КонецЕсли;
		Иначе
			ПоследниеИзменения = Неопределено;
		КонецЕсли;
		
		Если ПоследниеИзменения = Неопределено Тогда
			ОбновитьСоставИзменений = Истина;
			ПоследниеИзменения = Новый ТаблицаЗначений;
			ПоследниеИзменения.Колонки.Добавить("ВерсияКонфигурации");
			ПоследниеИзменения.Колонки.Добавить("Изменения");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИзмененияПараметра) Тогда
			
			// Если производится обновление вне обновления ИБ,
			// тогда требуется добавить изменения к следующей версии,
			// чтобы при переходе на очередную версию изменения
			// выполненные вне обновления ИБ были учтены.
			Версия = Метаданные.Версия;
			
			ОбновлениеВнеОбновленияИБ = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
				ВерсияИБ(Метаданные.Имя) , Версия) = 0;
			
			Если ОбновлениеВнеОбновленияИБ Тогда
				Версия = СледующаяВерсия(Версия);
			КонецЕсли;
			
			ОбновитьСоставИзменений = Истина;
			Строка = ПоследниеИзменения.Добавить();
			Строка.Изменения          = ИзмененияПараметра;
			Строка.ВерсияКонфигурации = Версия;
		КонецЕсли;
		
		МинимальнаяВерсияИБ = ОбновлениеИнформационнойБазыСлужебныйПовтИсп.МинимальнаяВерсияИБ();
		
		// Удаление изменений для версий ИБ, которые меньше минимальной
		// вместо версий меньше или равных минимальной, чтобы обеспечить
		// возможность обновления вне обновления ИБ.
		Индекс = ПоследниеИзменения.Количество()-1;
		Пока Индекс >=0 Цикл
			ВерсияИзменения = ПоследниеИзменения[Индекс].ВерсияКонфигурации;
			
			Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(МинимальнаяВерсияИБ, ВерсияИзменения) > 0 Тогда
				ПоследниеИзменения.Удалить(Индекс);
				ОбновитьСоставИзменений = Истина;
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		
		Если ОбновитьСоставИзменений Тогда
			УстановитьПараметрРаботыПрограммы(
				ИмяКонстанты,
				ИмяПараметраХраненияИзменений,
				Новый ХранилищеЗначения(ПоследниеИзменения));
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Для внутреннего использования.
//
Функция НеобходимоВыполнитьОбновление(Знач ВерсияМетаданных, Знач ВерсияДанных) Экспорт
	Возврат НЕ ПустаяСтрока(ВерсияМетаданных) И ВерсияДанных <> ВерсияМетаданных;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Протоколирование хода обновления

// Возвращает строковую константу для формирования сообщений журнала регистрации.
//
// Возвращаемое значение:
//   Строка
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Обновление информационной базы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеЖурналаРегистрацииПротокол() Экспорт
	
	Возврат СобытиеЖурналаРегистрации() + ". " + НСтр("ru = 'Протокол выполнения'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Общего назначения

Функция СледующаяВерсия(Версия)
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Версия, ".");
	
	Возврат ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(
		Версия) + "." + Формат(Число(Массив[3]) + 1, "ЧГ=");
	
	КонецФункции

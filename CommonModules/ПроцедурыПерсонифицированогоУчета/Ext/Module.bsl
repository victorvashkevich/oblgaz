

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРЕОБРАЗОВАНИЯ ЗНАЧЕНИЯ

//Преобразует дату в формат, требуемый правилами подготовки документов в ПФ РФ 
Функция ДатаВФайл(Знач ДатавФайл) Экспорт
	Если ЗначениеЗаполнено(ДатавФайл) тогда
		Возврат """" + Формат(ДатавФайл, "ДФ='дд/ММ/гггг'") + """";
	Иначе
		Возврат """""";
	КонецЕсли;
КонецФункции	 

//Преобразует строку отчета, содержащую дату в вормате "ДД/ММ/ГГГГ", в значение типа "Дата"
Функция ДатаИзФайла(Знач ДатаИзФайла) Экспорт
	Число = Сред(ДатаИзФайла,1,2);
	Месяц = Сред(ДатаИзФайла,4,2);
	Год = Сред(ДатаИзФайла,7,4);
	Попытка
		Возврат Дата(Год,Месяц,Число);
	Исключение
		Возврат Дата('00010101');
	КонецПопытки;	
КонецФункции	 

//Преобразует строку в число
Функция ЧислоИзФайла(Знач ЧислоИзФайла) Экспорт
	Попытка
		Возврат Число(ЧислоИзФайла);
	Исключение
		Возврат 0;
	КонецПопытки;	
КонецФункции	

//Преобразует дату в формат, необходимый для печатных форм сведений в ПФР: "ДД" месяц ГГГГ
Функция ДатаВОтчет(Знач Дата) Экспорт
	Если (ТипЗнч(Дата) = Тип("Дата"))и(Дата <> Дата('00010101')) тогда
		Стр = Формат(Дата,"ДФ='дд ММММ гггг'") + " года";
		Возврат """"+Лев(Стр,2)+""""+Сред(Стр,3);
	КонецЕсли;	 
	Возврат "";
КонецФункции	

//Разбивает строку значений, разделенных запятыми, на элементы с учётом пар ограничительных символов
Функция РазложитьСтрокуФайлаСведенийПФР(Знач Стр,Разделитель = ",",Ограничитель = """") Экспорт

	//Первый проход: определяем позиции пар ограничителей
	ДлинаСтроки = СтрДлина(Стр);
	МассивПозицииОграничителя = Новый Массив();
	КопияСтр = Стр;
	ТекИндекс =0;
	Пока 1=1 цикл
		//поиск первого ограничетеля
		НачПоз = Найти(КопияСтр,Ограничитель);
		Если НачПоз =0 тогда 
			Прервать;
		КонецЕсли;	 

		ТекИндекс = ТекИндекс+НачПоз;
		МассивПозицииОграничителя.Добавить(ТекИндекс);
		КопияСтр = Сред(КопияСтр,НачПоз+1);//двигаемся вперед по строке

		//поиск второго ограничителя
		КонПоз = Найти(КопияСтр,Ограничитель);
		Если КонПоз = 0 тогда
			КонПоз = ДлинаСтроки +1;
		КонецЕсли;	 

		ТекИндекс = ТекИндекс+КонПоз;
		МассивПозицииОграничителя.Добавить(ТекИндекс);
		КопияСтр = Сред(КопияСтр,КонПоз+1);//двигаемся вперед по строке
	КонецЦикла;	
	КоличествоПарОграничителей = МассивПозицииОграничителя.Количество()/2;

	//Второй проход: раскладываем строку на элементы, разделенные символом "Разделитель"
	МассивСтрок = Новый Массив();
	ГоловаЭлемента = "";
	ТекИндекс =0;
	ДлинаРазделителя = СтрДлина(Разделитель);
	Пока 1=1 Цикл
		Поз = Найти(Стр,Разделитель);
		Если Поз=0 Тогда
			МассивСтрок.Добавить(ГоловаЭлемента+Стр);
			Прервать;
		КонецЕсли;

		//Если позиция разделителя находится внутри пары ограничителей, то данный разделитель не учитываем
		ВнутриОграничителей = Ложь;
		Для П=0 по КоличествоПарОграничителей-1 цикл
			АбсолютнаяПозиция = ТекИндекс + Поз;
			Если (АбсолютнаяПозиция>МассивПозицииОграничителя[П*2])и(АбсолютнаяПозиция<МассивПозицииОграничителя[П*2+1]) тогда
				ВнутриОграничителей = Истина;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	

		Если ВнутриОграничителей тогда
			ГоловаЭлемента = ГоловаЭлемента + Лев(Стр,Поз);
			Стр = Сред(Стр,Поз+1);
		Иначе		
			МассивСтрок.Добавить(ГоловаЭлемента+Лев(Стр,Поз-1));
			ГоловаЭлемента = "";
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЕсли;	 

		//Идём дальше по строке
		ТекИндекс = ТекИндекс+Поз;
	КонецЦикла;

	//Убираем ограничители
	Для К=0 по МассивСтрок.Количество()-1 цикл
		Стр = МассивСтрок[К];
		ДлинаСтр = СтрДлина(Стр);
		Если (Лев(Стр,1)=Ограничитель)и(Прав(Стр,1)=Ограничитель) тогда
			МассивСтрок[К] = Сред(Стр,2,ДлинаСтр-2);
		КонецЕсли;	
	КонецЦикла;	

	Возврат МассивСтрок;
КонецФункции	 

//Приводит стаж к нормальному виду, когда месяцев не более 12, дней не более 30
Процедура ПолучитьПриведенныйСтаж(Лет, Месяцев, Дней) Экспорт

	ДнейВГоду 		= 12 * 30;
	ВсегоДней 		= Лет*ДнейВГоду + Месяцев*30 + Дней;
	Лет 			= Цел(ВсегоДней / ДнейВГоду);
	ОстатокДней 	= ВсегоДней - Лет * ДнейВГоду;
	Месяцев			= Цел(ОстатокДней / 30);
	Дней			= ОстатокДней % 30;
КонецПроцедуры 

//Вычисляет разность между двумя датами: в годах, месяцах, днях
Процедура ПолучитьСтажЗаПериод(Знач ДатаОкончанияПериода, Знач ДатаНачалаПериода, Лет=0, Месяцев=0, Дней=0) Экспорт 

	Если ДатаОкончанияПериода >= ДатаНачалаПериода тогда

		Лет1		=	Год(ДатаОкончанияПериода);
		Месяцев1	=	Месяц(ДатаОкончанияПериода);

		Если НачалоДня(ДатаОкончанияПериода) <> НачалоДня(КонецМесяца(ДатаОкончанияПериода)) тогда
			Дней1		=	День(ДатаОкончанияПериода);
		иначе
			Дней1		=	30;//В каждом месяце ровно 30 дней
		КонецЕсли;	 

		Лет2		=	Год(ДатаНачалаПериода);
		Месяцев2	=	Месяц(ДатаНачалаПериода);
		Если НачалоДня(ДатаНачалаПериода) <> НачалоДня(КонецМесяца(ДатаНачалаПериода)) тогда
			Дней2		=	День(ДатаНачалаПериода);
		иначе
			Дней2		=	30;//В каждом месяце ровно 30 дней
		КонецЕсли;	 

		Лет		=	Лет1		-	Лет2;
		Месяцев	=	Месяцев1	-	Месяцев2;
		Дней	=	Дней1		-	Дней2 + 1;//1 день на увольнение
	Иначе
		Лет = 0; 
		Месяцев = 0;
		Дней = 0;
	КонецЕсли;	
КонецПроцедуры //ПолучитьСтажЗаПериод

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ВЫХОДНЫХ ФАЙЛОВ СВЕДЕНИЙ

//Вовращает номер пачки документа
Функция НомерПачкиДокумента(Знач НомерДокумента) Экспорт

	НомерПачки = "";

	НомерДокумента = СокрП(НомерДокумента);
	
	//Возьмём все цифры в правой части номера
	ДлинаНомера = СтрДлина(НомерДокумента);
	Для Н=1 по ДлинаНомера цикл
		Символ = Сред(НомерДокумента,ДлинаНомера-Н+1,1); 	
		Если (Символ>="0") и (Символ<="9") тогда
			НомерПачки = Символ+НомерПачки;
		Иначе
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	

	Если НомерПачки <> "" тогда
		Возврат Формат(Число(Прав(НомерПачки, 5)), "ЧГ=0"); 
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции	 

//Формирует имя выходного файла сведений в ПФ РФ
Функция ПолучитьИмяФайлаПФ(Документ, ГодПредставленияСведений, Знач ВыборкаПоШапкеДокумента = Неопределено) Экспорт

	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		
		ИмяТаблицы = Документ.Метаданные().Имя;
		
		// Формируем запрос и получаем необходимые данные
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокПерсучета.Номер,
		|	ДокПерсучета.Организация,
		|	ДокПерсучета.Организация.Код,
		|	ДокПерсучета.Организация.РегистрационныйНомерПФР,
		|	ВЫБОР
		|		КОГДА ДокПерсучета.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоГоловнаяОрганизация,
		|	ДокПерсучета.ФорматФайла
		|ИЗ
		|	Документ." + ИмяТаблицы + " КАК ДокПерсучета
		|ГДЕ
		|	ДокПерсучета.Ссылка = &ДокументСсылка";
		
		Запрос.УстановитьПараметр("ДокументСсылка", Документ.Ссылка);
		ВыборкаПоШапкеДокумента = Запрос.Выполнить().Выбрать();
		
		Если Не ВыборкаПоШапкеДокумента.Следующий() тогда
			Возврат "";
		КонецЕсли;	
	КонецЕсли;
	
	НомерПачки = НомерПачкиДокумента(ВыборкаПоШапкеДокумента.Номер);
	ФорматФайла = ВыборкаПоШапкеДокумента.ФорматФайла;
	     	
	РегНомерПФР = ВыборкаПоШапкеДокумента.ОрганизацияРегистрационныйНомерПФР;
	СтрНомПачки = Прав("100000"+НомерПачки,5);
	Если ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда
		ИмяФайла = Прав(РегНомерПФР,6) + Лев(СтрНомПачки,2) + "." + Прав(СтрНомПачки,3);
	ИначеЕсли ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда // Версия 07.00 (XML)
		РегНомерПФР = СтрЗаменить(РегНомерПФР, " ", "");
		Если СтрДлина(РегНомерПФР) <> 14 Тогда
			РегНомерПФР = Лев(РегНомерПФР, 8) + "0" + Сред(РегНомерПФР, 9)
		КонецЕсли;
		Если ВыборкаПоШапкеДокумента.ЭтоГоловнаяОрганизация Тогда
			// имя файла без подразделений.
			ИмяФайла = "PFR-700-Y-"+Формат(ГодПредставленияСведений, "ЧГ=0")+"-ORG-"+РегНомерПФР+
			"-DCK-"+СтрНомПачки+"-DPT-000000-DCK-00000.XML";
		Иначе
			// Имя файла из подразделения
			КодПодразделения = Прав("100000"+СокрЛП(ВыборкаПоШапкеДокумента.ОрганизацияКод), 6);
			ИмяФайла = "PFR-700-Y-"+Формат(ГодПредставленияСведений, "ЧГ=0")+"-ORG-"+РегНомерПФР+
			"-DCK-00000-DPT-"+КодПодразделения+"-DCK-"+СтрНомПачки+".XML";
		КонецЕсли;
	Иначе 	
		ИмяФайла = "";
	КонецЕсли;
	Возврат ИмяФайла;
	
КонецФункции

//Возвращает заполненную "запись-заголовок" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьЗаголовок() Экспорт

	СтрокаВФайл = """ЗГЛВ"",""04.00""," 
	+ """1С:ЗУП""," // программа подготовки данных
	+ """" + Лев(Константы.НомерВерсииКонфигурации.Получить(),6)+"""";// Версия программы подготовки

	Возврат Врег(СтрокаВФайл+Символы.ПС);

КонецФункции

//Возвращает заполненную "запись о пачке" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьОПачке(НомерПачки,ДатаСоставленияОписи,ТипСведений,ВидКорректировки,РасчетныйПериодГод="0", Категория = "", ТУ = "", СтаховаяЧасть = 0, НакопительнаяЧасть = 0 ) Экспорт

	СтрокаВФайл = """ПАЧК""," 
	+ НомерПачки + ","	// Номер пачки, присвоенный работодателем
	+ """ОПИСЬ""" + "," // Тип пачки
	+ """ОП61""" + ","	// Тип описи
	+ ДатаВФайл(ДатаСоставленияОписи) + "," 
	+ "1,"				// Число типов документов в пачке
	+ Формат(РасчетныйПериодГод,"ЧГ=0")// Расчетный период:	год
	+ ",""" + Категория + """"	// Код категории застрахованного лица 
	+ ","""""			// Код дополнительного тарифа
	+ ",""" + ТУ + """"	// Территориальные условия (код) 
	+ ",""" + ТипСведений + """"		// Тип сведений
	+ ",""" + ВидКорректировки + """"	// Вид корректировки
	+ ",0"				// Отчетный период квартал
	+ ",0"				// Отчетный период год
	+ ",0.00"			// Всего начислено
	+ ",0.00"			// пособие по временной нетрудоспособности
	+ "," + Формат(СтаховаяЧасть, "ЧЦ=16; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0")// сумма начисленных страховых взносов на страховую часть
	+ "," + Формат(НакопительнаяЧасть, "ЧЦ=16; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0")// сумма начисленных страховых взносов на накопительную часть
	+ ",0.00"			// сумма начисленных страховых взносов по дополнительному тарифу
	+ ",0"				// Исходящий номер СПУ:	Код подразделения	
	+ ",0";				// Исходящий номер

	Возврат Врег(СтрокаВФайл+Символы.ПС);

КонецФункции

//Возвращает заполненную "запись о типе документа" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьОТипеДокумента(ТипДокумента,КоличествоДокументов) Экспорт

	СтрокаВФайл = """ТИПД"",""" 
	+ ТипДокумента + """," 
	+ КоличествоДокументов;

	Возврат Врег(СтрокаВФайл+Символы.ПС);

КонецФункции

//Возвращает заполненную "запись о работодателе" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьОРаботодателе(Организация, ДатаАктуальности, Отказ) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("ЭтоФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.ИНН,
	|	ВЫБОР
	|		КОГДА Организации.ЮрФизЛицо = &ЭтоФизЛицо
	|			ТОГДА ""0""
	|		ИНАЧЕ Организации.КПП
	|	КОНЕЦ КАК КПП,
	|	Организации.РегистрационныйНомерПФР,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	Организации.ЮрФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо = &Организация) КАК ФИОФизЛицСрезПоследних
	|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = Организации.Ссылка
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() тогда 
		
		Если Выборка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			
			// Для предпринимателя 
			
			Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Выборка.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для физического лица-работодателя неверно введен УНП!", Отказ);
			КонецЕсли;
			
			Если Выборка.Фамилия <> NULL Тогда
				ФИО = СокрЛП(Выборка.Фамилия + " " + Выборка.Имя + " " + Выборка.Отчество); 
			Иначе	
				ФИО = СокрЛП(Выборка.НаименованиеОрганизации);
			КонецЕсли; 
			
			Если РегламентированнаяОтчетность.СтрокаНаписанаПоРусски(ФИО)=0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для физического лица-работодателя Фамилия, Имя, Отчество должно быть введены русскими буквами!", Отказ);
			КонецЕсли;
		
			Если Найти(ФИО, " ")=0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для физического лица-работодателя должны быть указаны, как минимум, фамилия и имя!", Отказ);
			КонецЕсли;
			
			НаименованиеОрганизации = ФИО;
			
		Иначе	
			
			// Для юрлица 
			Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Выборка.ИНН, Перечисления.ЮрФизЛицо.ЮрЛицо ) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для организации неверно введен УНП!", Отказ);
			КонецЕсли; 
			
			Если СтрДлина(Выборка.КПП)<>9 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для организации неверно введен КПП!", Отказ);
			КонецЕсли;
			
			Если СокрЛП(Выборка.НаименованиеОрганизации) = "" Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для организации должно быть указано сокращенное наименование организации!", Отказ);
			КонецЕсли;
			
			НаименованиеОрганизации = Выборка.НаименованиеОрганизации;
			
		КонецЕсли; 

		Если СокрЛП(Выборка.РегистрационныйНомерПФР) = "" Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для организации не указан регистрационный номер в ФСЗН !", Отказ);
		КонецЕсли; 
		
		СтрокаВФайл = """РБТД"",""РБТД"","  
		+ """" + Выборка.РегистрационныйНомерПФР + """," 
		+ Выборка.ИНН + ","  
		+ Выборка.КПП + ","  
		+ """" + СтрЗаменить(СокрЛП(Выборка.НаименованиеОрганизации), """", "'") + """";
		
		Возврат Врег(СтрокаВФайл+Символы.ПС);
		
	Иначе
		
		Отказ = Истина;
		Возврат "";  
		
	КонецЕсли;
	

КонецФункции

//Разбирает переданные данные о месте рождения и заполняет соответствующие поля записи, 
//выводимой в файл сведений для ПФ РФ 
Процедура ВписатьВЗаписьМестоРождения(Запись, Знач МестоРождения) Экспорт

	МестоРождения = РегламентированнаяОтчетность.РазложитьМестоРождения(МестоРождения);
	Запись.ТипМестаРождения = ?(МестоРождения.Особое = 1, "ОСОБОЕ", "СТАНДАРТ");
	Запись.МестоРожденияНаселенныйПункт = МестоРождения.НаселенныйПункт;
	Запись.МестоРожденияРайон = МестоРождения.Район;
	Запись.МестоРожденияОбласть = МестоРождения.Область;
	Запись.МестоРожденияСтрана = МестоРождения.Страна;

КонецПроцедуры

//Разбирает переданные данные о документе, удостоверяющем личность, и заполняет 
//соответствующие поля записи, выводимой в файл сведений для ПФ РФ 
Процедура ВписатьВЗаписьДокумент(Запись, ТекущиеДанные) Экспорт

	СерииДокумента = РегламентированнаяОтчетность.РазложитьСериюДокумента(ТекущиеДанные.ДокументВид,ТекущиеДанные.ДокументСерия);
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументВид) тогда
		Запись.ДокументВид = ТекущиеДанные.ДокументВидКодПФР;		
	иначе
		Запись.ДокументВид = "ПРОЧЕЕ";		
	КонецЕсли;	
	Запись.ДокументНаименование = ТекущиеДанные.ДокументВидКодПФР;
	Запись.ДокументСерияРимскиеЦифры = СерииДокумента.Часть1;
	Запись.ДокументСерияРусскиеБуквы = СерииДокумента.Часть2;
	Запись.ДокументНомер = ТекущиеДанные.ДокументНомер;
	Запись.ДокументДатаВыдачи = ТекущиеДанные.ДокументДатаВыдачи;
	Запись.ДокументКемВыдан = ТекущиеДанные.ДокументКемВыдан;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРЕДОСТАВЛЕНИЯ ПОЛЬЗОВАТЕЛЯМ ФАЙЛОВ СВЕДЕНИЙ
//

#Если Клиент Тогда

//Предоставляет сформированный файл сведений документа для просмотра
Процедура ПоказатьФайлДокумента(ДокументОбъект, ЗаголовокОкна) Экспорт

	Вопрос = "Перед формированием файла необходимо записать документ. Записать?";
	Если НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект,Вопрос) тогда
		Возврат;
	КонецЕсли;	 

	ЕстьОшибки = Ложь;
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ДокументОбъект,ЕстьОшибки);
	Если ЕстьОшибки тогда
		Возврат;
	КонецЕсли;	 
	
	//Если ТипЗнч(ТекстФайла) = Тип("Строка") Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТекстФайла); 
		ТекстовыйДокумент.Показать(ЗаголовокОкна, "Файл сведений");
	//Иначе //тип("ТекстовыйДокумент")	
	//	ТекстФайла.Показать(ЗаголовокОкна, "Файл сведений");
	//КонецЕсли; 
	
КонецПроцедуры	 

//Записывает файл сведений документа в каталог, указанный пользователем
Процедура ЗаписатьФайлДокументаНаДискету(ДокументОбъект, ТекущийПользователь, ИмяФайла, Знач КодировкаФайла = Неопределено) Экспорт
	
	Вопрос = "Перед формированием файла необходимо записать документ. Записать?";
	Если НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект,Вопрос) тогда
		Возврат;
	КонецЕсли;

	ЕстьОшибки = Ложь;
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ДокументОбъект,ЕстьОшибки);
	Если ЕстьОшибки тогда
		Возврат;
	КонецЕсли;

	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);

	Длг.Каталог = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнойКаталогФайлов");
	Длг.Заголовок = "Укажите каталог";

	Если Длг.Выбрать() Тогда
		ИмяФайла = Длг.Каталог+"\" + ИмяФайла;
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТекстФайла); 
		Если КодировкаФайла = Неопределено Тогда
			КодировкаФайла = КодировкаТекста.OEM;
		КонецЕсли;
		ТекстовыйДокумент.Записать(ИмяФайла,КодировкаФайла);
		Предупреждение("Файл-пачка записан под именем: "+ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры	

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ФАЙЛА ИНДИВИДУАЛЬНЫХ СВЕДЕНИЙ ПФР XML ФОРМАТ 7.0 


/////////////////////////////////////
// XML STREAM
/////////////////////////////////////

// Создает и возвращает объект ЗаписьXML, для создания XML документа
Функция СоздатьПотокXML(ИмяФайла = Неопределено) Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	
	ПотокXML.УстановитьСтроку("UTF-8");
	ПотокXML.Отступ = Истина;
	Если ИмяФайла <> Неопределено Тогда
		ПотокXML.ОткрытьФайл(ИмяФайла, "UTF-8");
	КонецЕсли;
	
	ПотокXML.ЗаписатьОбъявлениеXML();
	
	Возврат ПотокXML;
	
КонецФункции

// Сохраняет документ XML  на диск и закрывает запись XML
Функция ЗаписатьПотокXML(ПотокXML) Экспорт
	
	Возврат ПотокXML.Закрыть();
	
КонецФункции

/////////////////////////////////////
// XML TREE
/////////////////////////////////////

// Возвращает Истина если строка дерева представляет атрибуты XML узла
Функция СтрокаСАтрибутами(СтрокаДереваXML) Экспорт
	
	Возврат СтрокаДереваXML.Имя = "АтрибутыXMLУзла";
	
КонецФункции

// Ищет и возвращает атрибут XML узла по имени
Функция НайтиАтрибуты(СтрокаДереваXML) Экспорт
	
	Возврат СтрокаДереваXML.Строки.Найти("АтрибутыXMLУзла", "Имя", Ложь);
	
КонецФункции


// КОМПОЗИЦИЯ ДЕРЕВА

// Создает объект дерево значений, представляющее XML файл
Функция СоздатьДеревоXML() Экспорт
	
	НовоеДеревоXML = Новый ДеревоЗначений;
	НовоеДеревоXML.Колонки.Добавить("Имя",      Новый ОписаниеТипов("Строка"));
	НовоеДеревоXML.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	
	Возврат НовоеДеревоXML;
	
КонецФункции

// Добавляет узел в дерево XML, устанавливая его атрибуты
Функция ДобавитьУзелВДеревоXML(Ветка, Имя, Значение, СписокАтрибутов = Неопределено) Экспорт
	
	НовыйУзел = Ветка.Строки.Добавить();
	НовыйУзел.Имя = Имя;
	НовыйУзел.Значение = Значение;
	
	Если СписокАтрибутов <> Неопределено Тогда
		ВеткаАтрибутов = НовыйУзел.Строки.Добавить();
		ВеткаАтрибутов.Имя = "АтрибутыXMLУзла";
		ВеткаАтрибутов.Значение = Неопределено;
		
		Для Каждого ЭлементСпискаАтрибутов Из СписокАтрибутов Цикл
			ЛистАтрибутов = ВеткаАтрибутов.Строки.Добавить();
			ЛистАтрибутов.Имя = ЭлементСпискаАтрибутов.Ключ;
			// доделать до правильного преобразования
			ЛистАтрибутов.Значение = Строка(ЭлементСпискаАтрибутов.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыйУзел;
		
КонецФункции

// ИМПОРТ / ЭКСПОРТ ДЕРЕВА

// записывает значения из дерева значение в поток связянный с файлом XML
Процедура ЗаписатьУзелДереваXMLВXMLдляПФР(СтрокаДерева, ПотокXML, ПрефиксПространстваИмен = Неопределено, URIПространстваИмен = Неопределено) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		
		Если НЕ ПустаяСтрока(СтрокаДерева.Имя) Тогда
			
			ПотокXML.ЗаписатьНачалоЭлемента(СтрЗаменить(СтрокаДерева.Имя,"__","-"));
			Если ПрефиксПространстваИмен <> Неопределено И URIПространстваИмен <> Неопределено Тогда
				ПотокXML.ЗаписатьСоответствиеПространстваИмен(ПрефиксПространстваИмен, URIПространстваИмен);
			КонецЕсли;
			СписокАтрибутов = НайтиАтрибуты(СтрокаДерева);
			
			Если СписокАтрибутов <> Неопределено Тогда
				Для каждого СтрокаСАтрибутом Из СписокАтрибутов.Строки Цикл
					ПотокXML.ЗаписатьАтрибут(СтрокаСАтрибутом.Имя, СтрокаСАтрибутом.Значение);
				КонецЦикла;
			КонецЕсли;
			
			ПотокXML.ЗаписатьТекст(?(СтрокаДерева.Значение = "00.00.0000", "", СтрокаДерева.Значение));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Лист из СтрокаДерева.Строки Цикл
		Если СтрокаСАтрибутами(Лист) Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьУзелДереваXMLВXMLдляПФР(Лист, ПотокXML, ПрефиксПространстваИмен, URIПространстваИмен);
	КонецЦикла;
	
	Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		Если НЕ ПустаяСтрока(СтрокаДерева.Имя) Тогда
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// добавляет реквизит в дерево значений, представляющее XML файл
Процедура ДобавитьИнформациюВДерево(ДеревоВыгрузки, НаборЗаписей) Экспорт
	
	ПустаяДата = Дата(1,1,1);
	
	Для каждого ЭлементНабора Из НаборЗаписей Цикл
		ИмяЗаписи = ЭлементНабора.Ключ;
		Запись = ЭлементНабора.Значение;
		ТипДанных = Запись.ТипДанных;
		Если ТипДанных = "КОНСТАНТА" тогда
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение)
			
		ИначеЕсли ТипДанных = "ЧИСЛО" тогда
			
			// для проверок
			//Запись.Размер 
			//Запись.РазрядностьДробнойЧасти
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Формат(Запись.Значение,"ЧЦ=" + Запись.Размер + "; ЧДЦ=" + Запись.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0"))
			
		ИначеЕсли ТипДанных = "СТРОКА" тогда
			
			// для проверок
			//Запись.Размер 
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение)
			
		ИначеЕсли ТипДанных = "ДАТА" тогда
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, ?(Запись.Значение = ПустаяДата,"00.00.0000", Формат(Запись.Значение,"ДФ=dd.MM.yyyy")))
			
		ИначеЕсли ТипДанных = "ТАБЛИЦА" тогда	
			
			ПроверятьНеобязательныеПоля = Ложь;
			Для каждого Поле Из Запись.Поля Цикл
				ПроверятьНеобязательныеПоля = Поле.ЭлементНеОбязателен;
				Если ПроверятьНеобязательныеПоля Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
			Для каждого СтрокаТЗ Из Запись.Значение Цикл
				
				ВеткаСтрокиТЗ = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "");
				ВыводитьНеобязательныеПоля = Ложь;
				Если ПроверятьНеобязательныеПоля Тогда
					Для каждого Поле Из Запись.Поля Цикл
						Если Поле.ЭлементНеОбязателен Тогда
							ВыводитьНеобязательныеПоля = ЗначениеЗаполнено(СтрокаТЗ[Поле.ИмяПоля]);
							Если ВыводитьНеобязательныеПоля Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли;
				
				Для каждого Поле Из Запись.Поля Цикл
					
					Если Поле.ЭлементНеОбязателен И Не ВыводитьНеобязательныеПоля Тогда
						Продолжить;
					КонецЕсли;
					
					Данные = СтрокаТЗ[Поле.ИмяПоля];
					
					Если Поле.ТипДанных = "ЧИСЛО" Тогда
						// для проверок
						//Поле.Размер, Поле.РазрядностьДробнойЧасти
						Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
					ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
						// для проверок
						//Поле.Размер
					ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
						Если Данные = ПустаяДата Тогда
							Данные = ""
						Иначе
							Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
						КонецЕсли;
					КонецЕсли;
					
					ДобавитьУзелВДеревоXML(ВеткаСтрокиТЗ, Поле.ИмяПоля, Данные)
					
				КонецЦикла; 
				
			КонецЦикла; 
			
		ИначеЕсли ТипДанных = "СТРУКТУРА" тогда	
			
			ВеткаСтруктуры = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "");
			Для каждого Поле Из Запись.Поля Цикл
				
				Данные = Запись.Значение[Поле.ИмяПоля];
				
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					// для проверок
					//Поле.Размер, Поле.РазрядностьДробнойЧасти
					Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
				ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
					// для проверок
					//Поле.Размер
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					Если Данные = ПустаяДата Тогда
						Данные = ""
					Иначе
						Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
					КонецЕсли;
				КонецЕсли;
				
				ДобавитьУзелВДеревоXML(ВеткаСтруктуры, Поле.ИмяПоля, Данные)
				
			КонецЦикла; 
			
		ИначеЕсли ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, ""), Запись.Значение)
			
		КонецЕсли;	
		
	КонецЦикла; 
	
КонецПроцедуры

// Возвращаент копию переданной структуры данных.
Функция СкопироватьСтруктуруДанных(КоллекцияИсходная) Экспорт
	
	ТипЗначения = ТипЗнч(КоллекцияИсходная);
	Если ТипЗначения=Тип("Структура") Тогда
		
		КоллекцияКопия=Новый Структура;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Вставить(Элемент.Ключ,СкопироватьСтруктуруДанных(Элемент.Значение));
			
		КонецЦикла;
		
		Возврат КоллекцияКопия; 
		
	ИначеЕсли ТипЗначения=Тип("ТаблицаЗначений") Тогда
		
		Возврат КоллекцияИсходная.Скопировать();
		
	ИначеЕсли ТипЗначения=Тип("Массив") Тогда
		
		КоллекцияКопия=Новый Массив;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Добавить(СкопироватьСтруктуруДанных(Элемент));
			
		КонецЦикла;
		
		Возврат КоллекцияКопия;
		
	ИначеЕсли ТипЗначения=Тип("Соответствие") Тогда
		
		КоллекцияКопия=Новый Соответствие;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Вставить(Элемент.Ключ,СкопироватьСтруктуруДанных(Элемент.Значение));
			
		КонецЦикла;
		
		Возврат КоллекцияКопия;
		
	Иначе
		
		Возврат КоллекцияИсходная
		
	КонецЕсли;
	
КонецФункции // ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию()

//Возвращает формат записи файла сведений в виде таблицы с именами и типами полей
Функция ПолучитьФорматЗаписиПФР(Знач МакетФормата, Знач ИмяЗаписи) 

	ТаблицаФормаЗаписи = Новый ТаблицаЗначений;
	ТаблицаФормаЗаписи.Колонки.Добавить("ИмяПоля",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипДанных",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
	ТаблицаФормаЗаписи.Колонки.Добавить("Размер",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("РазрядностьДробнойЧасти",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("ЭлементНеОбязателен");

	ОбластьФорматЗаписи = МакетФормата.ПолучитьОбласть(ИмяЗаписи);

	Для НСтр = 1 По ОбластьФорматЗаписи.ВысотаТаблицы Цикл
		
		//имя поля хранится в 4-ой колонке
		ИмяПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 4).Текст);
		Если ИмяПоля <> "" тогда

			НовоеПоле = ТаблицаФормаЗаписи.Добавить();
			НовоеПоле.ИмяПоля = СокрЛП(ИмяПоля);
			//тип данных хранится во 2-ой колонке	
			НовоеПоле.ТипДанных = ВРЕГ(СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 2).Текст));
			//размер поля хранится в 3-ей колонке	
			СтрРазмерПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 3).Текст);
			//Если указан размер поля, сохраним его
			Если СтрРазмерПоля<>"" тогда
				ПозицияТочки = Найти(СтрРазмерПоля,".");
				Если ПозицияТочки<>0 тогда
					НовоеПоле.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
					НовоеПоле.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
				Иначе	
					НовоеПоле.Размер = Число(СтрРазмерПоля);
					НовоеПоле.РазрядностьДробнойЧасти = 0;
				КонецЕсли;	 
			КонецЕсли;	 
			//Признак обязательности элемента хранится в 5-й колонке	
			НовоеПоле.ЭлементНеОбязателен = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 5).Текст) = "Не обязательно";
			
		КонецЕсли;	 

	КонецЦикла;

	Возврат ТаблицаФормаЗаписи;
КонецФункции	

// Загружает формат набора записей файла сведений о доходах физлиц из заданного табличного документа
Функция ЗагрузитьФорматНабораЗаписейдляПФР(Знач МакетФормата, Знач ИмяНабораЗаписей, НомерВыбираемогоЭлемента = 1) Экспорт

	ФорматНабора = Новый Структура();
	
	ОбластьНабораЗаписей = МакетФормата.ПолучитьОбласть(ИмяНабораЗаписей);
	
	Для НСтр = 1 По ОбластьНабораЗаписей.ВысотаТаблицы Цикл
		
		ФорматЗаписи = Новый Структура("ТипДанных, Размер, РазрядностьДробнойЧасти, Поля, Значение, ЭлементНеОбязателен");
		
		// имя записи хранится в 4 колонке
		ИмяЗаписи =  СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 4).Текст);
		
		// тип данных хранится во 2 колонке
		ТипДанных = Врег(СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 2).Текст));
		
		//Признак обязательности элемента хранится в 5-й колонке	
		ЭлементНеОбязателен = Врег(СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 5).Текст)) = "НЕ ОБЯЗАТЕЛЬНО";
			
		Если ТипДанных = "" Тогда// Если тип данных не задан, то встретили строку - группировку
			Продолжить;
		КонецЕсли; 
		
		ПозицияРазделителя = Найти(ТипДанных,"/");
		Если ПозицияРазделителя <> 0 Тогда
			ТипДанных = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ТипДанных, "/")[НомерВыбираемогоЭлемента-1];
		КонецЕсли;
		
		ПозицияРазделителя = Найти(ИмяЗаписи,"/");
		Если ПозицияРазделителя <> 0 Тогда
			ИмяЗаписи = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1];
		КонецЕсли;
		
		
		ФорматЗаписи.ТипДанных =  ТипДанных;
		ФорматЗаписи.ЭлементНеОбязателен = ЭлементНеОбязателен;
		// размер хранится в 3 колонке
		СтрРазмерПоля =  СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 3).Текст);
		
		Если ФорматЗаписи.ТипДанных = "КОНСТАНТА" тогда
			
			// в колонке "размер" должно указываться значение константы
			ФорматЗаписи.Значение = СтрРазмерПоля;
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ЧИСЛО" тогда
			
			ПозицияТочки = Найти(СтрРазмерПоля,".");
			Если ПозицияТочки<>0 тогда
				ФорматЗаписи.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
				ФорматЗаписи.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
			Иначе	
				ФорматЗаписи.Размер = Число(СтрРазмерПоля);
				ФорматЗаписи.РазрядностьДробнойЧасти = 0;
			КонецЕсли;	 
			
			ФорматЗаписи.Значение = 0;

		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРОКА" тогда
			
			ФорматЗаписи.Размер = Число(СтрРазмерПоля);
			
			ФорматЗаписи.Значение = "";
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ДАТА" тогда
			
			ФорматЗаписи.Значение = Дата('00010101');
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ТАБЛИЦА" тогда	
			
			// имя области-описания формата полей таблицы или структуры хранится в колонке размер
			ФорматЗаписи.Поля = ПолучитьФорматЗаписиПФР(МакетФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый ТаблицаЗначений;
			
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					ОписаниеТиповПоля = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(Поле.Размер, Поле.РазрядностьДробнойЧасти);
				ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
					ОписаниеТиповПоля = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(Поле.Размер);
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					ОписаниеТиповПоля = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
				КонецЕсли; 
				ФорматЗаписи.Значение.Колонки.Добавить(Поле.ИмяПоля, ОписаниеТиповПоля );
			
			КонецЦикла; 
			
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРУКТУРА" тогда	
			
			ПозицияРазделителя = Найти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяЗаписи = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ПозицияРазделителя = Найти(СтрРазмерПоля,"/");
			Если ПозицияРазделителя <> 0 Тогда
				СтрРазмерПоля = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрРазмерПоля, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			
			// имя области-описания формата полей таблицы или структуры хранится в колонке размер
			ФорматЗаписи.Поля = ПолучитьФорматЗаписиПФР(МакетФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый Структура;
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				
				ПустоеЗначениеПоля = Неопределено;
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					ПустоеЗначениеПоля = 0;
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					ПустоеЗначениеПоля = Дата('00010101');
                Иначе
					ПустоеЗначениеПоля = "";
				КонецЕсли; 
				
				ФорматЗаписи.Значение.Вставить(Поле.ИмяПоля, ПустоеЗначениеПоля);
				
			КонецЦикла; 
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			// Имя набора записей хранится в третьей колонке
			ИмяНабора = СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 3).Текст);
			ПозицияРазделителя = Найти(ИмяНабора,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяНабора = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяНабора, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ПозицияРазделителя = Найти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяЗаписи = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ФорматЗаписи.Значение = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, ИмяНабора, НомерВыбираемогоЭлемента);
			
		КонецЕсли;	
		
		ФорматНабора.Вставить(ИмяЗаписи, ФорматЗаписи);
		
	КонецЦикла;	
	
	Возврат ФорматНабора;
	
КонецФункции // ЗагрузитьФорматНабораЗаписей()

// Процедура устанавливает заголовочные параметры файла выгрузки XML формата 07.00
//
Процедура ЗаполнитьИмяИЗаголовокФайла(УзелПФР, МакетФормата, ИмяФайла) Экспорт
	
	// добавляем реквизит ИмяФайла
	НаборЗаписейИмяФайла = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ИмяФайла");
	НаборЗаписейИмяФайла.ИмяФайла.Значение = ИмяФайла;
	ДобавитьИнформациюВДерево(УзелПФР, НаборЗаписейИмяФайла);
	
	// Добавляем Реквизит заголовок файла
	НаборЗаписейЗаголовокФайла = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ЗаголовокФайла");
	НаборЗаписейПрограммаПодготовкиДанных = НаборЗаписейЗаголовокФайла.ПрограммаПодготовкиДанных.Значение;
	НаборЗаписейПрограммаПодготовкиДанных.Версия = РегламентированнаяОтчетность.РедакцияКонфигурации();
	НаборЗаписейПрограммаПодготовкиДанных.НазваниеПрограммы = РегламентированнаяОтчетность.ИДКонфигурации();
	ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(УзелПФР, "ЗаголовокФайла", ""), НаборЗаписейЗаголовокФайла); 
	
КонецПроцедуры // ЗаполнитьИмяИЗаголовокФайла()

// Функция устанавливает значения реквизитов XML узла ВходящаяОпись
//
Функция ЗаполнитьНаборЗаписейВходящаяОпись(УзелПФР, МакетФормата, ТипДокумента, ВыборкаПоШапкеДокумента, КоличествоДокументов, НомерПачки, НомерДокументаВПачке, УзелПачкаСЗВ4 = Неопределено, НаборЗаписейИтогоСуммаВзносов = Неопределено) Экспорт
	
	// устанавливаем значение номер пачки
	Если ВыборкаПоШапкеДокумента.ЭтоГоловнаяОрганизация Тогда
		НаборЗаписейВходящаяОпись = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ВХОДЯЩАЯ_ОПИСЬ", 1);
		НаборЗаписейВходящаяОпись.НомерПачки.Значение.Основной = НомерПачки;
	Иначе
		НаборЗаписейВходящаяОпись = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ВХОДЯЩАЯ_ОПИСЬ", 2);
		НаборЗаписейВходящаяОпись.НомерПачки.Значение.ПоПодразделению = НомерПачки;
	КонецЕсли;
	НаборЗаписейВходящаяОпись.НомерВПачке.Значение = НомерДокументаВПачке;
		
	// Составитель пачки
	НаборЗаписейСоставительПачки = НаборЗаписейВходящаяОпись.СоставительПачки.Значение;
	ЗаполнитьСоставительПачки(НаборЗаписейСоставительПачки, ВыборкаПоШапкеДокумента);
		
	НаборЗаписейСоставДокументов = НаборЗаписейВходящаяОпись.СоставДокументов.Значение;
	НаборЗаписейСоставДокументов.Количество.Значение = 1;
		
	НаборЗаписейНаличиеДокументов = НаборЗаписейСоставДокументов.НаличиеДокументов.Значение;
	НаборЗаписейНаличиеДокументов.ТипДокумента = ТипДокумента;
	НаборЗаписейНаличиеДокументов.Количество = КоличествоДокументов;
		
	НаборЗаписейВходящаяОпись.ДатаСоставления.Значение = ВыборкаПоШапкеДокумента.Дата;
	
	Если (ТипДокумента = "ИС_СЗВ-4-1") ИЛИ (ТипДокумента = "ИС_СЗВ-4-2") Тогда
		
		НаборЗаписейПачкаСЗВ4 = НаборЗаписейВходящаяОпись.ПачкаСЗВ4.Значение;
		НаборЗаписейПачкаСЗВ4.РасчетныйПериод.Значение = ВыборкаПоШапкеДокумента.Год;
		НаборЗаписейПачкаСЗВ4.ТарифСтраховыхВзносов.Значение.КодКатегории = ВыборкаПоШапкеДокумента.КодОсновногоТарифа;
		Если ВыборкаПоШапкеДокумента.КодОсновногоТарифа = "НР" Тогда
			НаборЗаписейПачкаСЗВ4.ТарифСтраховыхВзносов.Значение.НазваниеКатегории = "НАЕМ/РАБОТНИК";
		ИначеЕсли ВыборкаПоШапкеДокумента.КодОсновногоТарифа = "СХ" Тогда
			НаборЗаписейПачкаСЗВ4.ТарифСтраховыхВзносов.Значение.НазваниеКатегории = "С/Х ОРГАНИЗАЦИЯ";
		КонецЕсли;
		
		Если ТипДокумента = "ИС_СЗВ-4-1" Тогда
			НаборЗаписейПачкаСЗВ4.Удалить("ТерриториальныеУсловия");
		Иначе
			НаборЗаписейПачкаСЗВ4.ТерриториальныеУсловия.Значение.ОснованиеТУ = ВыборкаПоШапкеДокумента.ТерриториальныеУсловияКод;
			НаборЗаписейПачкаСЗВ4.ТерриториальныеУсловия.Значение.Коэффициент = ВыборкаПоШапкеДокумента.ОрганизацияРайонныйКоэффициентРФ;
		КонецЕсли;
		
		Если ВыборкаПоШапкеДокумента.ТипСведений = "ИСХД" Тогда
			НаборЗаписейПачкаСЗВ4.ТипСведений.Значение = "ИСХОДНАЯ";
		ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = "ПЕНС" Тогда
			НаборЗаписейПачкаСЗВ4.ТипСведений.Значение = "ПЕНСИОННАЯ";
		КонецЕсли;
		Если ВыборкаПоШапкеДокумента.ВидКорректировки = "КОРР" Тогда
			НаборЗаписейПачкаСЗВ4.ВидКорректировки.Значение = "КОРРЕКТИРУЮЩАЯ";
		ИначеЕсли ВыборкаПоШапкеДокумента.ВидКорректировки = "ОТМН" Тогда
			НаборЗаписейПачкаСЗВ4.ВидКорректировки.Значение = "ОТМЕНЯЮЩАЯ";
		Иначе
			НаборЗаписейПачкаСЗВ4.Удалить("ВидКорректировки");
		КонецЕсли;
		
		
		УзелПачкаВходящихДокументов = ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
		
		УзелВходящаяОпись = ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, "ВХОДЯЩАЯ_ОПИСЬ","");
		НаборЗаписейИтогоСуммаВзносов = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "СтраховыеВзносы");
		НаборЗаписейПачкаСЗВ4.Удалить("ИтогоСуммаВзносов");
		
		ДобавитьИнформациюВДерево(УзелВходящаяОпись, НаборЗаписейВходящаяОпись);
		УзелПачкаСЗВ4 = УзелВходящаяОпись.Строки[6];
		
	Иначе
		
   		НаборЗаписейВходящаяОпись.Удалить("ПачкаСЗВ4");
		
		УзелПачкаВходящихДокументов = ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
		
		ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, "ВХОДЯЩАЯ_ОПИСЬ",""), НаборЗаписейВходящаяОпись);
	
	КонецЕсли;

	
	Возврат УзелПачкаВходящихДокументов;
	
КонецФункции // ЗаполнитьНаборЗаписейВходящаяОпись()

Процедура ЗаменитьБуквуЁ(РедактируемаяСтрока, НазваниеРеквизита) Экспорт
	Если Найти(ВРег(РедактируемаяСтрока), "Ё") > 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В реквизите """ + НазваниеРеквизита + """ (" + РедактируемаяСтрока +") буква Ё заменена на Е.");
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, "Ё", "Е");
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, "ё", "е");
		
	КонецЕсли;
КонецПроцедуры // ЗаменитьБуквуЁ()

// Процедура заполняет реквизиты файла - сведения об организации
//
Процедура ЗаполнитьСоставительПачки(НаборЗаписейСоставительПачки, ВыборкапоШапкеДокумента) Экспорт
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		НаборЗаписейСоставительПачки.КодЕГРИП.Значение = СокрЛП(ВыборкаПоШапкеДокумента.ОрганизацияОГРН);
		НаборЗаписейСоставительПачки.Удалить("КодЕГРЮЛ");
	Иначе
		НаборЗаписейСоставительПачки.Удалить("КодЕГРИП");
		НаборЗаписейСоставительПачки.КодЕГРЮЛ.Значение = СокрЛП(ВыборкаПоШапкеДокумента.ОрганизацияОГРН);
	КонецЕсли;
	
	НаборЗаписейСоставительПачки.Форма.Значение = ВРег(Лев(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеОКОПФ, 40));
	ЗаменитьБуквуЁ(НаборЗаписейСоставительПачки.Форма.Значение, "Организационно-правовая форма по ОКОПФ");
	НомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.ОрганизацияРегистрационныйНомерПФР, " ", "");
	Если СтрДлина(НомерПФР) <> 14 Тогда
		НомерПФР = Лев(НомерПФР, 8) + "0" + Сред(НомерПФР, 9)
	КонецЕсли;
	НаборЗаписейСоставительПачки.РегистрационныйНомер.Значение = НомерПФР;
	НаборЗаписейСоставительПачки.Удалить("ДатаВыдачиЛицензии");
	НаборЗаписейСоставительПачки.Удалить("НомерЛицензии");
	
	НаборЗаписейНалоговыйНомер = НаборЗаписейСоставительПачки.НалоговыйНомер.Значение;
	НаборЗаписейНалоговыйНомер.ИНН = ВыборкаПоШапкеДокумента.ОрганизацияИНН;
	Если ВыборкаПоШапкеДокумента.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		НаборЗаписейНалоговыйНомер.Удалить("КПП");
		ТаблицаПолей = НаборЗаписейСоставительПачки.НалоговыйНомер.Поля;
		ТаблицаПолей.Индексы.Добавить("ИмяПоля");
		СтрокаКПП = ТаблицаПолей.Найти("КПП", "ИмяПоля");
		Если СтрокаКПП <> Неопределено Тогда
			ТаблицаПолей.Удалить(СтрокаКПП);
		КонецЕсли;
	Иначе
		НаборЗаписейНалоговыйНомер.КПП = ВыборкаПоШапкеДокумента.ОрганизацияКПП;
	КонецЕсли;
	
	НаборЗаписейСоставительПачки.НаименованиеОрганизации.Значение = СокрЛП(ВРЕГ(Лев(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеПолное,НаборЗаписейСоставительПачки.НаименованиеОрганизации.Размер)));
	ЗаменитьБуквуЁ(НаборЗаписейСоставительПачки.НаименованиеОрганизации.Значение, "Наименование организации");
	НаборЗаписейСоставительПачки.НаименованиеКраткое.Значение = СокрЛП(ВРег(Лев(ВыборкаПоШапкеДокумента.ОрганизацияНаименование, НаборЗаписейСоставительПачки.НаименованиеКраткое.Размер)));
	ЗаменитьБуквуЁ(НаборЗаписейСоставительПачки.НаименованиеКраткое.Значение, "Краткое наименование организации");
	
	Если ВыборкаПоШапкеДокумента.ЭтоГоловнаяОрганизация Тогда
		НаборЗаписейСоставительПачки.Удалить("Подразделение");
	Иначе
		НаборЗаписейПодразделение = НаборЗаписейСоставительПачки.Подразделение.Значение;
		НаборЗаписейПодразделение.НаименованиеПодразделения = СокрЛП(ВРег(СокрЛП(ВыборкаПоШапкеДокумента.ОрганизацияНаименование)));
		ЗаменитьБуквуЁ(НаборЗаписейПодразделение.НаименованиеПодразделения, "Наименование подразделения");
		НаборЗаписейПодразделение.НомерПодразделения = СокрЛП(ВыборкаПоШапкеДокумента.ОрганизацияКод);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСоставительПачки()

// Процедура ищет адрес в справочнике Адресный классификатор, и если
// не находит указанный регион, район, город, населенный пункт, то возвращает
// Отказ = Истина, в текстеошибки возвращается текст ошибки.
// Если не найдена только улица, то возвращается только ТекстОшибки, 
// значение переменной отказ не изменяется.
Функция ПроверитьАдресПоКЛАДР(АдресСписком) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамРегион", АдресСписком.Регион);
	Запрос.УстановитьПараметр("парамРайон", АдресСписком.Район);
	Запрос.УстановитьПараметр("парамГород", АдресСписком.Город);
	Запрос.УстановитьПараметр("парамНаселенныйПункт", АдресСписком.НаселенныйПункт);
	Запрос.УстановитьПараметр("парамУлица", АдресСписком.Улица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НаселенныйПункт.КодРайонаВКоде = 0
	|				И &ПарамРайон <> """"
	|			ТОГДА "" район""
	|		КОГДА НаселенныйПункт.КодГородаВКоде = 0
	|				И &ПарамГород <> """"
	|			ТОГДА "" город""
	|		КОГДА НаселенныйПункт.КодНаселенногоПунктаВКоде = 0
	|				И &ПарамНаселенныйПункт <> """"
	|			ТОГДА "" населённый пункт""
	|		КОГДА ЕСТЬNULL(АдресныйКлассификатор.КодУлицыВКоде, 0) = 0
	|				И &парамУлица <> """"
	|			ТОГДА ""а улица""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СообщениеОбОшибке
	|ИЗ
	|	(ВЫБРАТЬ
	|		Город.КодРегионаВКоде КАК КодРегионаВКоде,
	|		Город.КодРайонаВКоде КАК КодРайонаВКоде,
	|		Город.КодГородаВКоде КАК КодГородаВКоде,
	|		ЕСТЬNULL(АдресныйКлассификатор.КодНаселенногоПунктаВКоде, 0) КАК КодНаселенногоПунктаВКоде
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Район.КодРегионаВКоде КАК КодРегионаВКоде,
	|			Район.КодРайонаВКоде КАК КодРайонаВКоде,
	|			ЕСТЬNULL(АДресныйКлассификатор.КодГородаВКоде, 0) КАК КодГородаВКоде
	|		ИЗ
	|			(ВЫБРАТЬ
	|				Регион.КодРегионаВКоде КАК КодРегионаВКоде,
	|				ЕСТЬNULL(АдресныйКлассификатор.КодРайонаВКоде, 0) КАК КодРайонаВКоде
	|			ИЗ
	|				(ВЫБРАТЬ
	|					АдресныйКлассификатор.КодРегионаВКоде КАК КодРегионаВКоде
	|				ИЗ
	|					РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|				ГДЕ
	|					АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамРегион
	|					И АдресныйКлассификатор.ТипАдресногоЭлемента = 1) КАК Регион
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|					ПО (АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамРайон)
	|						И АдресныйКлассификатор.КодРегионаВКоде = Регион.КодРегионаВКоде
	|						И (АдресныйКлассификатор.ТипАдресногоЭлемента = 2)) КАК Район
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АДресныйКлассификатор
	|				ПО (АДресныйКлассификатор.Наименование + "" "" + АДресныйКлассификатор.Сокращение = &парамГород)
	|					И АДресныйКлассификатор.КодРегионаВКоде = Район.КодРегионаВКоде
	|					И АДресныйКлассификатор.КодРайонаВКоде = Район.КодРайонаВКоде
	|					И (АДресныйКлассификатор.ТипАдресногоЭлемента = 3)) КАК Город
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|			ПО (АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамНаселенныйПункт)
	|				И АдресныйКлассификатор.КодРегионаВКоде = Город.КодРегионаВКоде
	|				И АдресныйКлассификатор.КодРайонаВКоде = Город.КодРайонаВКоде
	|				И АдресныйКлассификатор.КодГородаВКоде = Город.КодГородаВКоде
	|				И (АдресныйКлассификатор.ТипАдресногоЭлемента = 4)) КАК НаселенныйПункт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|		ПО (АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамУлица)
	|			И АдресныйКлассификатор.КодРегионаВКоде = НаселенныйПункт.КодРегионаВКоде
	|			И АдресныйКлассификатор.КодРайонаВКоде = НаселенныйПункт.КодРайонаВКоде
	|			И АдресныйКлассификатор.КодГородаВКоде = НаселенныйПункт.КодГородаВКоде
	|			И АдресныйКлассификатор.КодНаселенногоПунктаВКоде = НаселенныйПункт.КодНаселенногоПунктаВКоде
	|			И (АдресныйКлассификатор.ТипАдресногоЭлемента = 5)";
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	ТекстОшибки = "";
	Если ВыборкаЗапроса.Следующий() Тогда
		ТекстОшибки = ВыборкаЗапроса.СообщениеОбОшибке;
	Иначе
		ТекстОшибки = " регион";
	КонецЕсли;
	
	Возврат ТекстОшибки
КонецФункции // ПроверитьАдресПоКЛАДР()

// Процедура заполняет адрес, представленный в структуре для записи в XML файл 
// входными данынми является строка адреса
//  СписокСтран - Список стран и их кодов
// СписокСокращений1-5 - сокращения для определенного реквизита адреса
// ФорматИностранныйАдрес, ФорматНеструктурированныйАдрес - форматы данных для не Российских адресов.
// ВыходноеЗначение: НаборЗаписейАдрес
Процедура ЗаполнитьАдрес(НаборЗаписейАдрес, СтрокаАдрес, СписокСтран, ФорматНеструктурированныйАдрес, ФорматИностранныйАдрес, ТекстПредупреждения) Экспорт
	АдресСписком = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(ВРег(СтрокаАдрес));	
	ЗаПределамиРФ = Ложь;
	АдресСписком.Свойство("ЗаПределамиРФ", ЗаПределамиРФ);
	// ЗаПределамиРФ может быть неопределно, поэтому сравниваем на значение
	Если ЗаПределамиРФ = Истина Тогда
		Если АдресСписком.Страна = "БЕЛАРУСЬ" Тогда
			// Неструктурированный адрес
			НаборЗаписейАдрес = СкопироватьСтруктуруДанных(ФорматНеструктурированныйАдрес);
			НаборЗаписейАдрес.НеструктурированныйАдрес.Значение.Адрес = ВРег(СокрЛП(СтрокаАдрес));
			ЗаменитьБуквуЁ(НаборЗаписейАдрес.НеструктурированныйАдрес.Значение.Адрес, "Адрес");
			НаборЗаписейАдрес.ТипАдреса.Значение = "НЕСТРУКТУРИРОВАННЫЙ";
			НаборЗаписейАдрес.Удалить("Индекс");
			ТекстПредупреждения = " сохранен как неструктурированный адрес."
		Иначе
			// Иностранный адрес

			НазваниеСтраны = СокрЛП(АдресСписком.Страна);
			КодСтраны = СписокСтран.Получить(НазваниеСтраны);
			Если КодСтраны = Неопределено Тогда
				// не удалось получить страну, запишем как неструктурированный адрес
				НаборЗаписейАдрес = СкопироватьСтруктуруДанных(ФорматНеструктурированныйАдрес);
				НаборЗаписейАдрес.НеструктурированныйАдрес.Значение.Адрес = ВРег(СокрЛП(СтрокаАдрес));
				ЗаменитьБуквуЁ(НаборЗаписейАдрес.НеструктурированныйАдрес.Значение.Адрес, "Адрес");
				НаборЗаписейАдрес.ТипАдреса.Значение = "НЕСТРУКТУРИРОВАННЫЙ";
				НаборЗаписейАдрес.Удалить("Индекс");
				ТекстПредупреждения = " сохранен как неструктурированный адрес."
			Иначе
				НаборЗаписейАдрес = СкопироватьСтруктуруДанных(ФорматИностранныйАдрес);
				НаборЗаписейАдрес.ИностранныйАдрес.Значение.КодСтраны = КодСтраны;
				НаборЗаписейАдрес.ИностранныйАдрес.Значение.НазваниеСтраны = НазваниеСтраны;
				НаборЗаписейАдрес.ИностранныйАдрес.Значение.Адрес = ВРег(СокрЛП(СтрокаАдрес));
				НаборЗаписейАдрес.ТипАдреса.Значение = "ИНОСТРАННЫЙ";
				НаборЗаписейАдрес.Удалить("Индекс");
				ТекстПредупреждения = " сохранен как иностранный адрес."
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Российский адрес
		НаборЗаписейАдрес.Индекс.Значение = АдресСписком.Индекс;
		НаборЗаписейАдрес.ТипАдреса.Значение = "РОССИЙСКИЙ";
			
		НаборЗаписейРоссийскийАдрес = НаборЗаписейАдрес.РоссийскийАдрес.Значение;
		НаборЗаписейРоссийскийАдрес.СостояниеАдреса.Значение = "ПРАВИЛЬНЫЙ";
		
		НаборЗаписейРоссийскийАдрес.Регион.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.Регион, НаборЗаписейРоссийскийАдрес.Регион.Значение.Сокращение);
		ЗаменитьБуквуЁ(НаборЗаписейРоссийскийАдрес.Регион.Значение.ГеографическоеНазвание, "Регион");
		
		НаборЗаписейРоссийскийАдрес.Район.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.Район, НаборЗаписейРоссийскийАдрес.Район.Значение.Сокращение);
		ЗаменитьБуквуЁ(НаборЗаписейРоссийскийАдрес.Район.Значение.ГеографическоеНазвание, "Район");
		НаборЗаписейРоссийскийАдрес.Город.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.Город, НаборЗаписейРоссийскийАдрес.Город.Значение.Сокращение);		
		ЗаменитьБуквуЁ(НаборЗаписейРоссийскийАдрес.Город.Значение.ГеографическоеНазвание, "Город");
		НаборЗаписейРоссийскийАдрес.НаселенныйПункт.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.НаселенныйПункт, НаборЗаписейРоссийскийАдрес.НаселенныйПункт.Значение.Сокращение);
		ЗаменитьБуквуЁ(НаборЗаписейРоссийскийАдрес.Город.Значение.ГеографическоеНазвание, "Населенный пункт");
		НаборЗаписейРоссийскийАдрес.Улица.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.Улица, НаборЗаписейРоссийскийАдрес.Улица.Значение.Сокращение);
		ЗаменитьБуквуЁ(НаборЗаписейРоссийскийАдрес.Улица.Значение.ГеографическоеНазвание, "Улица");
		НаборЗаписейРоссийскийАдрес.Дом.Значение.Номер = АдресСписком.Дом;
		НаборЗаписейРоссийскийАдрес.Дом.Значение.Сокращение = "Д";
				
		Если Не ПустаяСтрока(АдресСписком.Корпус) Тогда
			НаборЗаписейРоссийскийАдрес.Корпус.Значение.Номер = АдресСписком.Корпус;
			НаборЗаписейРоссийскийАдрес.Корпус.Значение.Сокращение = "КОРП";
		КонецЕсли;
				
		Если Не ПустаяСтрока(АдресСписком.Квартира) Тогда
			НаборЗаписейРоссийскийАдрес.Квартира.Значение.Номер = АдресСписком.Квартира;
			НаборЗаписейРоссийскийАдрес.Квартира.Значение.Сокращение = "КВ";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПФРXMLЗаполнитьАдрес()

// Функция преобразует дерево значений в котором представлен XML файл, в текст
//
Функция ПолучитьТекстФайлаИзДереваЗначений(ДеревоВыгрузки) Экспорт
	
	// Преобразуем дерево в строковое описание XML
	
	ПотокВыгрузкиXML = СоздатьПотокXML();
	
	ЗаписатьУзелДереваXMLВXMLдляПФР(ДеревоВыгрузки, ПотокВыгрузкиXML);
	
	// получаем содержимое файла в виде строки
	
	ТекстФайла = СтрЗаменить(СтрЗаменить(ЗаписатьПотокXML(ПотокВыгрузкиXML),"UTF-8","windows-1251"),"<ПачкаВходящихДокументов>",
	"<ПачкаВходящихДокументов Окружение=""В составе файла"" Стадия=""До обработки"">");
	
	Возврат ТекстФайла;
	
КонецФункции // ПолучитьТекстФайлаИзДереваЗначений


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ФОРМИРОВАНИЯ ОТЧЕТОВ ПО СОХРАНЕННОМУ XML ФАЙЛУ
//

// Функция возвращает значение строки дерева значений из колонки "Имя"
Функция ИзвлечьДанное(СтрокаДерева,Имя) Экспорт 
	СтрокаДанных = СтрокаДерева.Строки.Найти(Имя,"Имя",Истина);
	Если СтрокаДанных = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат СтрокаДанных.Значение;
	КонецЕсли;
КонецФункции

// Функция возращает представление адреса полученное из строк дерева значений, 
// представляющих XML ПФР файл выгрузки формат 07.00
Функция ПредставлениеАдресадляПФР(Знач СтрокаДереваАдрес) Экспорт
	Адрес = "";
	ТипАдреса = ИзвлечьДанное(СтрокаДереваАдрес, "ТипАДреса");
	Индекс = ИзвлечьДанное(СтрокаДереваАдрес, "Индекс");
	СтрокаДереваРоссийскийАдрес = СтрокаДереваАдрес.Строки.Найти("РоссийскийАдрес");
	СтрокаДереваИностранныйАдрес = СтрокаДереваАдрес.Строки.Найти("ИностранныйАдрес");
	СтрокаДереваНеструктурированныйАдрес = СтрокаДереваАдрес.Строки.Найти("НеструктурированныйАдрес");
	Если СтрокаДереваРоссийскийАдрес <> Неопределено Тогда
		СтрокаДереваРегион = СтрокаДереваРоссийскийАдрес.Строки.Найти("Регион");
		Если СтрокаДереваРегион <> Неопределено Тогда
			Регион = ИзвлечьДанное(СтрокаДереваРегион, "ГеографическоеНазвание");
			СокращениеРегион =  ИзвлечьДанное(СтрокаДереваРегион, "Сокращение");
		КонецЕсли;
		СтрокаДереваРайон = СтрокаДереваРоссийскийАдрес.Строки.Найти("Район");
		Если СтрокаДереваРайон <> Неопределено Тогда
			Район = ИзвлечьДанное(СтрокаДереваРайон, "ГеографическоеНазвание");
			СокращениеРайон = ИзвлечьДанное(СтрокаДереваРайон, "Сокращение");
		КонецЕсли;
		СтрокаДереваГород = СтрокаДереваРоссийскийАдрес.Строки.Найти("Город");
		Если СтрокаДереваГород <> Неопределено Тогда
			Город = ИзвлечьДанное(СтрокаДереваГород, "ГеографическоеНазвание");
			СокращениеГород = ИзвлечьДанное(СтрокаДереваГород, "Сокращение");
		КонецЕсли;
		СтрокаДереваНаселенныйПункт = СтрокаДереваРоссийскийАдрес.Строки.Найти("НаселенныйПункт");
		Если СтрокаДереваНаселенныйПункт <> Неопределено Тогда
			НаселенныйПункт = ИзвлечьДанное(СтрокаДереваНаселенныйПункт, "ГеографическоеНазвание");
			СокращениеНаселенныйПункт = ИзвлечьДанное(СтрокаДереваГород, "Сокращение");
		КонецЕсли;
		СтрокаДереваУлица = СтрокаДереваРоссийскийАдрес.Строки.Найти("Улица");
		Если СтрокаДереваУлица <> Неопределено Тогда
			Улица = ИзвлечьДанное(СтрокаДереваУлица, "ГеографическоеНазвание");
			СокращениеУлица = ИзвлечьДанное(СтрокаДереваУлица, "Сокращение");
		КонецЕсли;
		СтрокаДереваДом = СтрокаДереваРоссийскийАдрес.Строки.Найти("Дом");
		Если СтрокаДереваДом <> Неопределено Тогда
			СокращениеДом = ИзвлечьДанное(СтрокаДереваДом, "Сокращение");
			Дом = ИзвлечьДанное(СтрокаДереваДом, "Номер");
		КонецЕсли;
		СтрокаДереваКорпус = СтрокаДереваРоссийскийАдрес.Строки.Найти("Корпус");
		Если СтрокаДереваКорпус <> Неопределено Тогда
			СокращениеКорпус = ИзвлечьДанное(СтрокаДереваКорпус, "Сокращение");
			Корпус = ИзвлечьДанное(СтрокаДереваКорпус, "Номер");
		КонецЕсли;
		СтрокаДереваКвартира = СтрокаДереваРоссийскийАдрес.Строки.Найти("Квартира");
		Если СтрокаДереваКвартира <> Неопределено Тогда
			СокращениеКвартира = ИзвлечьДанное(СтрокаДереваКвартира, "Сокращение");
			Квартира = ИзвлечьДанное(СтрокаДереваКвартира, "Номер");
		КонецЕсли;
		Адрес = ?(ЗначениеЗаполнено(Индекс),", "+Индекс,"")+
		?(ЗначениеЗаполнено(Регион), ", "+Регион+" "+СокращениеРегион, "")+
		?(ЗначениеЗаполнено(Район), ", "+Район+" "+СокращениеРайон, "")+
		?(ЗначениеЗаполнено(Город), ", "+Город+" "+СокращениеГород, "")+
		?(ЗначениеЗаполнено(НаселенныйПункт), ", "+НаселенныйПункт+" "+СокращениеНаселенныйПункт, "")+
		?(ЗначениеЗаполнено(Улица), ", "+СокращениеУлица+" "+Улица, "")+
		?(ЗначениеЗаполнено(Дом), ", "+СокращениеДом+" "+Дом, "")+
		?(ЗначениеЗаполнено(Корпус), ", "+СокращениеКорпус+" "+Корпус, "")+
		?(ЗначениеЗаполнено(Квартира), ", "+СокращениеКвартира+" "+Квартира, "");
		Адрес = Сред(Адрес,2);//Убрали первую запятую
		
	ИначеЕсли СтрокаДереваИностранныйАдрес <> Неопределено Тогда
		КодСтраны = ИзвлечьДанное(СтрокаДереваИностранныйАдрес, "КодСтраны");
		НазваниеСтраны = ИзвлечьДанное(СтрокаДереваИностранныйАдрес, "НазваниеСтраны");
		АдресВСтране = ИзвлечьДанное(СтрокаДереваИностранныйАдрес, "НазваниеСтраны");
		Адрес = ?(ЗначениеЗаполнено(Индекс),", "+Индекс, "")+
		?(ЗначениеЗаполнено(НазваниеСтраны),", "+НазваниеСтраны, "")+
		?(ЗначениеЗаполнено(АдресВСтране),", "+АдресВСтране, "");
		Адрес = Сред(Адрес,1);//Убрали первую запятую
		
	ИначеЕсли СтрокаДереваНеструктурированныйАдрес <> Неопределено Тогда
		 Адрес = ИзвлечьДанное(СтрокаДереваНеструктурированныйАдрес, "Адрес");
		
	КонецЕсли;
	Возврат Адрес;
КонецФункции

// Функция возвращает представление даты полученной из XML файла.
// СтрДата - дата в формате XML ПФР 07.00
Функция ДатаXMLВОтчет(СтрДата, РазвернутоеПредставление = Истина) Экспорт
	МассивПодстрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрДата, ".");
	Если Число(МассивПодстрок[0]) = 0 Тогда
		МассивПодстрок[0] = "1";
	КонецЕсли;
	Если Число(МассивПодстрок[1]) = 0 Тогда
		МассивПодстрок[1] = "1";
	КонецЕсли;
	Если Число(МассивПодстрок[2]) = 0 Тогда
		МассивПодстрок[2] = "1";
	КонецЕсли;
	ВозвращаемаяДата = Дата(МассивПодстрок[2], МассивПодстрок[1], МассивПодстрок[0]);
	Если РазвернутоеПредставление Тогда
		Возврат ДатаВОтчет(ВозвращаемаяДата);
	Иначе
		Возврат ВозвращаемаяДата;
	КонецЕсли;
	
КонецФункции

// Функция возвращает дерево значений, заполненное из текста XML файла.
Функция ПреобразоватьВДеревоXML(СтрокаXML) Экспорт

	НовоеДеревоXML = СоздатьДеревоXML();

	Возврат ДобавитьВДеревоXML(НовоеДеревоXML, СтрокаXML);
	
КонецФункции

// Функция производит формирование древовидной структуры,
// начиная с переданной в ВеткаДерева ветки дерева значений
// на основе описания XML, переданного в СтрокаXML
Функция ДобавитьВДеревоXML(ВеткаДерева, СтрокаXML) Экспорт

	XMLПоток = Новый ЧтениеXML();
	
	Попытка
		XMLПоток.УстановитьСтроку(СтрокаXML);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ДеревоФайла = Новый ДеревоЗначений;
	ДеревоФайла.Колонки.Добавить("Имя",      Новый ОписаниеТипов("Строка"));
	ДеревоФайла.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	
	ТекущаяВетка = Неопределено;
	
	Попытка
		
		Пока XMLПоток.Прочитать() Цикл
			Если XMLПоток.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ТекущаяВетка = СоздатьУзелНаВетке(ТекущаяВетка, ДеревоФайла);
				ТекущаяВетка.Имя = XMLПоток.Имя;
				
				ВеткаАтрибутов = Неопределено;
				
				Пока XMLПоток.ПрочитатьАтрибут() Цикл
					
					Если ВеткаАтрибутов = Неопределено Тогда
						ВеткаАтрибутов = ТекущаяВетка.Строки.Добавить();
						ВеткаАтрибутов.Имя = "АтрибутыXMLУзла";
						ВеткаАтрибутов.Значение = Неопределено;
					КонецЕсли;
		
					АтрибутВДереве = СоздатьУзелНаВетке(ВеткаАтрибутов, ДеревоФайла);
					АтрибутВДереве.Имя = XMLПоток.Имя;
					АтрибутВДереве.Значение =  XMLПоток.Значение;
				КонецЦикла;
				
			ИначеЕсли XMLПоток.ТипУзла = ТипУзлаXML.Текст Тогда
				ТекущаяВетка.Значение = XMLПоток.Значение;
				
			ИначеЕсли XMLПоток.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				ТекущаяВетка = ТекущаяВетка.Родитель;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		Возврат Неопределено;
		
	КонецПопытки;
	
	СкопироватьВетку(ВеткаДерева, ДеревоФайла);
	
	Возврат ВеткаДерева;
	
КонецФункции

// Функция копирует ветку дерева значений
Процедура СкопироватьВетку(Приемник, Источник) 
	
	Если ТипЗнч(Источник) = Тип("СтрокаДереваЗначений") Тогда // есть откуда скопировать
		
		Если ТипЗнч(Приемник) = Тип("СтрокаДереваЗначений") Тогда // некуда скопировать
			СтрокаПриемника =  Приемник;
		
		Иначе
			СтрокаПриемника = Приемник.Строки.Добавить();
			
		КонецЕсли;
		
		СтрокаПриемника.Имя = Источник.Имя;
		СтрокаПриемника.Значение = Источник.Значение;
		
	КонецЕсли;
	
	Для каждого ЛистИсточника Из Источник.Строки Цикл
		ЛистПриемника = Приемник.Строки.Добавить();
		СкопироватьВетку(ЛистПриемника, ЛистИсточника);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция создает и возвращает новую строку в дереве значений
Функция СоздатьУзелНаВетке(ТекущаяВетка, ДеревоОбработки) 
	
	Если ТекущаяВетка = Неопределено Тогда
		Возврат ДеревоОбработки.Строки.Добавить();
	Иначе
		Возврат ТекущаяВетка.Строки.Добавить();
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ВЫХОДНЫХ ПЕЧАТНЫХ ФОРМ

// Формирует представление периода болезни или отпуска за свой счет для вывода в печатную форму документа
Функция ПредставлениеПериодаБолезниОтпуска(Месяцы, Дни) Экспорт
	
	Если Месяцы<>0 Тогда
		Представление = "" + Месяцы + " мес. ";
	Иначе	
		Представление = "";
	КонецЕсли; 
	Если Дни<>0 Тогда
		Представление = Представление + Дни + " дн." ;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции 

// Формирует представление параметров исчисляемого  трудового стажа
//
// Параметры:
//		ЗаписьСтажа -	структура - запись о стаже
// Возвращаемое значение:
//		Строка
Функция ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьСтажа) Экспорт
	
	ПредставлениеПараметровИТС = "";
	КодОснованияИТС = ЗаписьСтажа.ОснованиеИсчисляемогоСтажаКод;
	ПервыйПараметрИТС = ЗаписьСтажа.ПервыйПараметрИсчисляемогоСтажа;
	ВторойПараметрИТС = ЗаписьСтажа.ВторойПараметрИсчисляемогоСтажа;
	ТретийПараметрИТС = ЗаписьСтажа.ТретийПараметрИсчисляемогоСтажа;
	
	Если (КодОснованияИТС = "ВОДОЛАЗ") Тогда
		ПредставлениеПараметровИТС = ?(ПервыйПараметрИТС > 0,""+ПервыйПараметрИТС+" ч ","")+?(ВторойПараметрИТС > 0,""+ВторойПараметрИТС+" мин","");
	ИначеЕсли (КодОснованияИТС = "СЕЗОН") Тогда
		ПредставлениеПараметровИТС = "";
	Иначе
		ПредставлениеПараметровИТС = ?(ПервыйПараметрИТС > 0,"" + ПервыйПараметрИТС+" м ","") + ?(ВторойПараметрИТС > 0,""+ВторойПараметрИТС+" дн ","") + Строка(ТретийПараметрИТС);
	КонецЕсли;
	
	Возврат ПредставлениеПараметровИТС;

КонецФункции

// Формирует строки "дополнительных сведений" по выслуге лет в "удобочитаемом" виде для отражения в формах.
//
// Параметры:
//		ЗаписьСтажа -	структура - запись о стаже
//		СтрПервыйВторойПараметр  -	строка - возвращаемый параметр - представление первых двух параметров
//		СтрСтавки  -	строка - возвращаемый параметр - представление третьего параметра
//
Процедура ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьСтажа, СтрПервыйВторойПараметр, СтрСтавки)Экспорт
	
	КодОснования = ЗаписьСтажа.ОснованиеВыслугиЛетКод;
	ПервыйПараметр = ЗаписьСтажа.ПервыйПараметрВыслугиЛет;
	ВторойПараметр = ЗаписьСтажа.ВторойПараметрВыслугиЛет;
	ТретийПараметр = ЗаписьСтажа.ТретийПараметрВыслугиЛет;
	
	СтрПервыйВторойПараметр = "";
	СтрСтавки = "";
	
	Если (КодОснования="ИСПКЛС1") или (КодОснования="САМОЛЕТ") или (КодОснования="ИНСПЕКТ") 
	или (КодОснования="СПЕЦАВ") или (КодОснования="ЛЕТИСП") или (КодОснования="ИТСИСП") 
	или (КодОснования="ИНСПЕКТ") или (КодОснования="ИТСМАВ") или (КодОснования="ОПЫТИСП") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","")+?(ВторойПараметр>0,""+ВторойПараметр+" мин","");
		
	ИначеЕсли (КодОснования="РЕАКТИВН") или (КодОснования="НОРМСП") или (КодОснования="НОРМАПР") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" прыжков ","");
		
	ИначеЕсли (КодОснования="УВД") или (КодОснования="ИТС")	или (КодОснования="27-14") или (КодОснования="27-15") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" м ","")+?(ВторойПараметр>0,""+ВторойПараметр+" дн ","");
		
	ИначеЕсли (КодОснования="ХИРУРГД") или (КодОснования="ХИРУРСМ") или (КодОснования="ЗП81ГД") или (КодОснования="ЗП81СМ") 
	или (КодОснования="28-ГДХР") или (КодОснования="28-СМХР") или (КодОснования="28-ГД") или (КодОснования="28-СМ") Тогда
		СтрСтавки = ?(ТретийПараметр>0,""+ТретийПараметр,"");
		
	ИначеЕсли (КодОснования="ЗП80РК") или (КодОснования="ЗП80ПД") 
	или (КодОснования="28-ПДРК") или (КодОснования="28-ПД") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","");
		СтрСтавки = ?(ТретийПараметр>0,""+ТретийПараметр,"");
		
	КонецЕсли;
	
КонецПроцедуры 

// Формирует фрагмент выходного файла по работнику и выводит печатную форму СЗВ4.
//
// Параметры:
//		ДокументРезультат	-	ТабличныйДокумент - табличный документ, куда быдет выведена печатная форма
//		ДатаАктуальности	-	дата - дата, на которую формируются данные
//		ФизЛицо				-	Справочники.ФизическиеЛица - физлицо, на которого формируются данные
//		Организация			-	Справочники.Организации - организация, по которой формируются данные
//
Процедура ВыводНаПечатьПоФизЛицу(ДокументРезультат, ДатаАктуальности, ФизЛицо, Организация) Экспорт
	
	ТипФормДокументов = "СЗВ-4-1";
	ТекстФайла = "";

	// Формирование фрагмента файла передачи В ПФР для печати формы "СЗВ-4-1"
	// Запрос по регистру ЗаписиОСтаже и СуммыВзносовДляСЗВ4
	Запрос = Новый запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
	|	ЗаписиОСтаже.Год КАК Год,
	|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
	|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
	|	СуммыВзносовДляСЗВ4.НачисленоНаСтраховуюЧастьПФР,
	|	СуммыВзносовДляСЗВ4.НачисленоНаНакопительнуюЧастьПФР,
	|	ЕСТЬNULL(СуммыВзносовДляСЗВ4.ДнейБолезни, 0) КАК ДнейБолезни,
	|	ЕСТЬNULL(СуммыВзносовДляСЗВ4.ДнейОтпускаЗаСвойСчет, 0) КАК ДнейОтпускаЗаСвойСчет
	|ИЗ
	|	РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыВзносовДляСЗВ4 КАК СуммыВзносовДляСЗВ4
	|		ПО ЗаписиОСтаже.ФизЛицо = СуммыВзносовДляСЗВ4.ФизЛицо
	|			И ЗаписиОСтаже.Год = СуммыВзносовДляСЗВ4.Год
	|			И ЗаписиОСтаже.ОбособленноеПодразделение = СуммыВзносовДляСЗВ4.ОбособленноеПодразделение
	|ГДЕ
	|	ЗаписиОСтаже.ФизЛицо В(&ФизЛицо)
	|	И ЗаписиОСтаже.Год В(&Год)
	|	И ЗаписиОСтаже.ОбособленноеПодразделение В(&ОбособленноеПодразделение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбособленноеПодразделение,
	|	Год,
	|	ФизЛицо,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";
	Запрос.УстановитьПараметр("ФизЛицо" , ФизЛицо);
	Запрос.УстановитьПараметр("Год" , Год(ДатаАктуальности));
	Запрос.УстановитьПараметр("ОбособленноеПодразделение" , Организация);
	
	// Сбор данных и формирование фрагмента файла
	ВыборкаПоРаботникиОрганизации	= Запрос.Выполнить().Выбрать();
	Если ВыборкаПоРаботникиОрганизации.Следующий() Тогда
		
		ТипЗаписиИН = "ИН41";
		ДокументФорматЗаписей = Документы.СведенияОТрудовомСтажеИЗаработкеСЗВ4.ПолучитьМакет("ФорматЗаписей");
		ФорматЗаписиИН = ПолучитьФорматЗаписи(ТипЗаписиИН,ДокументФорматЗаписей);
		Фамилия		= "";
		Имя			= "";
		Отчество	= "";
		ПроцедурыУправленияПерсоналом.ФамилияИнициалыФизЛица(ФизЛицо.Наименование,Фамилия,Имя,Отчество);
		
		// адрес для информирования
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизЛицо",					ФизЛицо);
		Запрос.УстановитьПараметр("ДатаАктуальности",			ДатаАктуальности);
		Запрос.УстановитьПараметр("ВидАдресаДляИнформирования",	Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	"","" + КонтактнаяИнформация.Поле1 + "","" + КонтактнаяИнформация.Поле2 + "","" + КонтактнаяИнформация.Поле3 + "","" + КонтактнаяИнформация.Поле4 + "","" + КонтактнаяИнформация.Поле5 + "","" + КонтактнаяИнформация.Поле6 + "","" + КонтактнаяИнформация.Поле7 + "","" + КонтактнаяИнформация.Поле8 + "","" + КонтактнаяИнформация.Поле9 КАК АдресИзРегистра
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|ГДЕ
		|	КонтактнаяИнформация.Вид = &ВидАдресаДляИнформирования И
		|	КонтактнаяИнформация.Объект = &Физлицо";
		
		РезультатЗапроса	= Запрос.Выполнить();
		ВыборкаПоРаботнику	= РезультатЗапроса.Выбрать();
		АдресДляИнформирования = ?(ВыборкаПоРаботнику.Следующий(), ВыборкаПоРаботнику.АдресИзРегистра, "");
		Если СокрЛП(СтрЗаменить(АдресДляИнформирования, ",","")) <> "" Тогда
			АдресДляИнформирования = АдресДляИнформирования;
		Иначе	
			АдресДляИнформирования = "";
		КонецЕсли; 
		
		// Подготовка расчетных данных
		ЗаписьИН = ПолучитьСтруктуруЗаписи(ФорматЗаписиИН);
		ЗаписьИН.ТипЗаписи							= ТипЗаписиИН;
		ЗаписьИН.НомерДокументаВПачке				= 1;
		ЗаписьИН.СтраховойНомер						= ФизЛицо.СтраховойНомерПФР;
		ЗаписьИН.Фамилия							= ВРЕГ(Фамилия);
		ЗаписьИН.Имя								= ВРЕГ(Имя);
		ЗаписьИН.Отчество							= ВРЕГ(Отчество);
		ЗаписьИН.РасчетныйПериодГод					= Год(ДатаАктуальности);
		ЗаписьИН.АдресДляИнформирования				= ВРЕГ(АдресДляИнформирования);
		ЗаписьИН.ДатаЗаполнения						= ДатаАктуальности;
		ЗаписьИН.НачисленоСтраховаяЧасть			= ВыборкаПоРаботникиОрганизации.НачисленоНаСтраховуюЧастьПФР;
		ЗаписьИН.НачисленоНакопительнаяЧасть		= ВыборкаПоРаботникиОрганизации.НачисленоНаНакопительнуюЧастьПФР;
		ЗаписьИН.ВременнаяНетрудоспособностьМесяцев	= Цел(ВыборкаПоРаботникиОрганизации.ДнейБолезни/30);
		ЗаписьИН.ВременнаяНетрудоспособностьДней	= ВыборкаПоРаботникиОрганизации.ДнейБолезни%30;
		ЗаписьИН.ОтпускМесяцев						= Цел(ВыборкаПоРаботникиОрганизации.ДнейОтпускаЗаСвойСчет/30);
		ЗаписьИН.ОтпускДней							= ВыборкаПоРаботникиОрганизации.ДнейОтпускаЗаСвойСчет%30;
		
		// Сбор данных о стаже
		ЧислоОсновныхЗаписейОСтаже = 0;					//Переменный для хранения строк о стаже работника (для формы СЗВ-4-1)
		СтрокиСтажРаботникаОрганизации = "";
		РаботникОрганизацииИмеетЛьготныйСтаж = ЛОЖЬ;	// Признак наличия у работника основания для льготного стажа
		Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл
			
			ЧислоОсновныхЗаписейОСтаже = ЧислоОсновныхЗаписейОСтаже + 1; 
			
			//Берем пустую запись "Основная запись о стаже"
			ФорматЗаписиСТАЖ = ПолучитьФорматЗаписи("СТАЖ",ДокументФорматЗаписей);
			ЗаписьСТАЖ = ПолучитьСтруктуруЗаписи(ФорматЗаписиСТАЖ);
			ЗаписьСТАЖ.ТипЗаписи = "СТАЖ";
			ЗаписьСТАЖ.НомерПериода = ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи;
			ЗаписьСТАЖ.ДатаНачалаПериода = ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода;
			ЗаписьСТАЖ.ДатаОкончанияПериода = ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода;
			ЗаписьСТАЖ.ОсобыеУсловияТрудаКод = ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод;
			ЗаписьСТАЖ.КодПозицииСписка = ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод;
			ЗаписьСТАЖ.ОснованиеИсчисляемогоСтажаКод = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
			ЗаписьСТАЖ.ПервыйПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
			ЗаписьСТАЖ.ВторойПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
			ЗаписьСТАЖ.ТретийПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
			ЗаписьСТАЖ.ОснованиеВыслугиЛетКод = ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод;
			ЗаписьСТАЖ.ПервыйПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
			ЗаписьСТАЖ.ВторойПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
			ЗаписьСТАЖ.ТретийПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
			ЗаписьСТАЖ.ТерриториальныеУсловияКод = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
			
			//Переменный для хранения дополнительных записей о стаже
			ЧислоДополнительныхЗаписейОСтаже = 0;
			СтрокиДополнительныеЗаписи = "";
			
			Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")	Цикл
				
				//В дополнительной записи с номером 0 находится информация об основной записи
				Если ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи = 0 тогда
					Продолжить;
				КонецЕсли;	
				
				РаботникОрганизацииИмеетЛьготныйСтаж = Истина;
				ЧислоДополнительныхЗаписейОСтаже = ЧислоДополнительныхЗаписейОСтаже + 1;
				
				//Берем пустую запись "Запись о льготном стаже"
				ФорматЗаписиЛГОТ = ПолучитьФорматЗаписи("ЛГОТ",ДокументФорматЗаписей);
				ЗаписьЛГОТ = ПолучитьСтруктуруЗаписи(ФорматЗаписиЛГОТ);
				ЗаписьЛГОТ.ТипЗаписи = "ЛГОТ";
				ЗаписьЛГОТ.НомерЗаписи = ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи;
				ЗаписьЛГОТ.ОсобыеУсловияТрудаКод = ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод;
				ЗаписьЛГОТ.КодПозицииСписка = ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод;
				ЗаписьЛГОТ.ОснованиеИсчисляемогоСтажаКод = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
				ЗаписьЛГОТ.ПервыйПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
				ЗаписьЛГОТ.ВторойПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
				ЗаписьЛГОТ.ТретийПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
				ЗаписьЛГОТ.ОснованиеВыслугиЛетКод = ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод;
				ЗаписьЛГОТ.ПервыйПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
				ЗаписьЛГОТ.ВторойПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
				ЗаписьЛГОТ.ТретийПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
				ЗаписьЛГОТ.ТерриториальныеУсловияКод = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
				
				//Сохраним запись ЛГОТ
				СтрокавФайл = ПолучитьСтрокуПоДаннымЗаписи(ЗаписьЛГОТ, ФорматЗаписиЛГОТ);
				СтрокиДополнительныеЗаписи = СтрокиДополнительныеЗаписи + СтрокавФайл + Символы.ПС;
				
			КонецЦикла;// Выборка по дополнительным записям о стаже
			
			ЗаписьСТАЖ.ЧислоДополнительныхЗаписей = ЧислоДополнительныхЗаписейОСтаже;
			
			//Сохраним запись СТАЖ
			СтрокавФайл = ПолучитьСтрокуПоДаннымЗаписи(ЗаписьСТАЖ,ФорматЗаписиСТАЖ);
			СтрокиСтажРаботникаОрганизации  = СтрокиСтажРаботникаОрганизации + СтрокавФайл + Символы.ПС;
			
			//Добавим записи ЛГОТ
			СтрокиСтажРаботникаОрганизации  = СтрокиСтажРаботникаОрганизации + ВРЕГ(СтрокиДополнительныеЗаписи);
			
		КонецЦикла;// Выборка по основным записям о стаже
		
		// Формирование файла
		ЗаписьИН.ЧислоОсновныхЗаписейОСтаже = ЧислоОсновныхЗаписейОСтаже;
		
		//	Добавляем в файл записи ИН41, СТАЖ И ЛГОТ
		СтрокавФайл = ПолучитьСтрокуПоДаннымЗаписи(ЗаписьИН,ФорматЗаписиИН);
		ТекстФайла	=	ТекстФайла	+	СтрокавФайл + Символы.ПС + ВРег(СтрокиСтажРаботникаОрганизации);
		
	КонецЕсли;
	
	// Вывод печатной формы
	Если ТекстФайла <> "" Тогда
		
		ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, ДатаАктуальности);
		
		Макет = Документы.СведенияОТрудовомСтажеИЗаработкеСЗВ4.ПолучитьМакет("ФормаСЗВ_4_1");
		ФорматЗаписиИН41 = ПолучитьФорматЗаписи("ИН41", ДокументФорматЗаписей);
		ФорматЗаписиСТАЖ = ПолучитьФорматЗаписи("СТАЖ", ДокументФорматЗаписей);
		ФорматЗаписиЛГОТ = ПолучитьФорматЗаписи("ЛГОТ", ДокументФорматЗаписей);
		
		// Рабочие области макета
		ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
		ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
		ОбластьСтаж 	= Макет.ПолучитьОбласть("Стаж");
		
		// Заполнение данных шапки и подвала
		ОбластьШапка.Параметры.РегНомерПФР = Организация.РегистрационныйНомерПФР;
		ОбластьШапка.Параметры.НаименованиеОрганизации = Организация.Наименование;
		ОбластьШапка.Параметры.Год = Год(ДатаАктуальности);
		
		ОбластьПодвал.Параметры.ДолжностьРуководителя		 	= ОтветственныеЛица.РуководительДолжность;
		ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
		ОбластьПодвал.Параметры.Дата				 			= ДатаВОтчет(ДатаАктуальности);
		
		Н=1;//Номер строки первой записи ИН41
		
		//Читаем запись ИН41
		СтрокаФайла = СтрПолучитьСтроку(ТекстФайла, Н);
		Н= Н + 1;
		ЗаписьИН41 = ПолучитьСтруктуруЗаписи(ФорматЗаписиИН41);
		СтрОшибка = "";
		Если НЕ РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ИН41", ФорматЗаписиИН41, ЗаписьИН41, СтрОшибка) тогда
			Возврат;
		КонецЕсли;	
		
		// Данные по физлицу
		ОбластьШапка.Параметры.СтраховойНомерПФР				= ЗаписьИН41.СтраховойНомер;
		ОбластьШапка.Параметры.ФИО							= "" + ЗаписьИН41.Фамилия + " " + ЗаписьИН41.Имя + " " + ЗаписьИН41.Отчество;
		ОбластьШапка.Параметры.Адрес						= ВРег(РегламентированнаяОтчетность.ПредставлениеАдреса(НРег(ЗаписьИН41.АдресДляИнформирования), 0, ""));
		ОбластьШапка.Параметры.НачисленоСтраховаяЧасть		= ЗаписьИН41.НачисленоСтраховаяЧасть;
		ОбластьШапка.Параметры.НачисленоНакопительнаяЧасть	= ЗаписьИН41.НачисленоНакопительнаяЧасть;
		ОбластьШапка.Параметры.НачисленоДополнительныйТариф	= ЗаписьИН41.НачисленоДополнительныйТариф;
		ОбластьШапка.Параметры.ДнейБолел					= ПредставлениеПериодаБолезниОтпуска(ЗаписьИН41.ВременнаяНетрудоспособностьМесяцев,ЗаписьИН41.ВременнаяНетрудоспособностьДней);
		ОбластьШапка.Параметры.ДнейГулял					= ПредставлениеПериодаБолезниОтпуска(ЗаписьИН41.ОтпускМесяцев, ЗаписьИН41.ОтпускДней);
		ДокументРезультат.Вывести(ОбластьШапка);
		
		//Цикл по основным записям о стаже
		Для НомерОснованойЗаписи = 1 по  ЗаписьИН41.ЧислоОсновныхЗаписейОСтаже цикл
			
			//Читаем запись СТАЖ
			СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
			Н= Н + 1;
			ЗаписьСТАЖ = ПолучитьСтруктуруЗаписи(ФорматЗаписиСТАЖ);
			СтрОшибка = "";
			Если НЕ РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "СТАЖ", ФорматЗаписиСТАЖ, ЗаписьСТАЖ, СтрОшибка) тогда
				Возврат;
			КонецЕсли;	
			
			ОбластьСтаж.Параметры.НомерПериода				= НомерОснованойЗаписи;
			ОбластьСтаж.Параметры.ДатаНачалаПериода 		= ЗаписьСТАЖ.ДатаНачалаПериода;
			ОбластьСтаж.Параметры.ДатаОкончанияПериода		= ЗаписьСТАЖ.ДатаОкончанияПериода;
			ОбластьСтаж.Параметры.ТерриториальныеУсловияКод	= ЗаписьСТАЖ.ТерриториальныеУсловияКод;
			ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод		= ЗаписьСТАЖ.ОсобыеУсловияТрудаКод;
			ОбластьСтаж.Параметры.КодПозицииСписка			= ЗаписьСТАЖ.КодПозицииСписка;
			
			// Представление параметров ИТС
			ОбластьСтаж.Параметры.ОснованиеИТС				= ЗаписьСТАЖ.ОснованиеИсчисляемогоСтажаКод;
			ОбластьСтаж.Параметры.ДопИТС					= ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьСТАЖ);
			
			// Представление параметров выслуги лет
			ОбластьСтаж.Параметры.ОснованиеВыслуги			= ЗаписьСТАЖ.ОснованиеВыслугиЛетКод;
			ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьСТАЖ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
			
			ДокументРезультат.Вывести(ОбластьСтаж);
			
			//Цикл по дополнительным записям о стаже
			Для НомерДополнительнойЗаписи = 1 по  ЗаписьСТАЖ.ЧислоДополнительныхЗаписей цикл
				
				//Читаем запись ЛГОТ
				СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
				Н= Н + 1;
				ЗаписьЛГОТ = ПолучитьСтруктуруЗаписи(ФорматЗаписиЛГОТ);
				СтрОшибка = "";
				Если НЕ РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ЛГОТ", ФорматЗаписиЛГОТ, ЗаписьЛГОТ, СтрОшибка) тогда
					Прервать;
				КонецЕсли;	
				
				// Выводим запись ЛГОТ
				ОбластьСтаж.Параметры.НомерПериода				= "";
				ОбластьСтаж.Параметры.ДатаНачалаПериода			= "";
				ОбластьСтаж.Параметры.ДатаОкончанияПериода		= "";
				ОбластьСтаж.Параметры.ТерриториальныеУсловияКод	= ЗаписьЛГОТ.ТерриториальныеУсловияКод;
				ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод		= ЗаписьЛГОТ.ОсобыеУсловияТрудаКод;
				ОбластьСтаж.Параметры.КодПозицииСписка			= ЗаписьЛГОТ.КодПозицииСписка;
				
				// Представление параметров ИТС
				ОбластьСтаж.Параметры.ОснованиеИТС				= ЗаписьЛГОТ.ОснованиеИсчисляемогоСтажаКод;
				ОбластьСтаж.Параметры.ДопИТС					= ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьЛГОТ);
				
				// Представление параметров выслуги лет
				ОбластьСтаж.Параметры.ОснованиеВыслуги			= ЗаписьЛГОТ.ОснованиеВыслугиЛетКод;
				ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьЛГОТ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
				
				ДокументРезультат.Вывести(ОбластьСтаж);
				
			КонецЦикла;//Цикл по дополнительным записям о стаже	
			
		КонецЦикла;// По основным записям о стаже	
		
		// Подвал формы
		ДокументРезультат.Вывести(ОбластьПодвал);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАЗБОРА ФАЙЛОВ СВЕДЕНИЙ

#Если Клиент Тогда

//Функция разбирает заголовочные строки файла и возвращает информацию о пачке
Функция РазобратьЗаголовокФайла(Знач ТекстФайла,ИнформацияОПачке) Экспорт

	ВсегоСтрокВФайле = СтрЧислоСтрок(ТекстФайла);
	Если ВсегоСтрокВФайле < 4 тогда		
		Предупреждение("Неверная структура файла: количество строк должно быть не менее 4!");		
		Возврат 0;
	КонецЕсли;

	ИнформацияОРаботодателе = Новый Структура;

	//Обработка записи заголовка "ПАЧК"
	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(СтрПолучитьСтроку(ТекстФайла,3));
	Если МассивДанныхСтроки.Количество()<>21 тогда
		Сообщить("Строка 3: неверное количество полей записи 'ПАЧК'!");
		Возврат 0;
	КонецЕсли;	  
	ИнформацияОПачке.Вставить("НомерПачкиРаботодателя",МассивДанныхСтроки[1]);
	ИнформацияОПачке.Вставить("ДатаСоставленияОписи",ДатаИзФайла(МассивДанныхСтроки[4]));
	ИнформацияОПачке.Вставить("РасчетныйПериод",МассивДанныхСтроки[6]);
	ИнформацияОПачке.Вставить("КодКатегорииЗастрахованногоЛица",МассивДанныхСтроки[7]);
	ИнформацияОПачке.Вставить("КодДополнительногоТарифа",МассивДанныхСтроки[8]);
	ИнформацияОПачке.Вставить("ТерриториальныеУсловия",МассивДанныхСтроки[9]);
	ИнформацияОПачке.Вставить("ТипСведений",МассивДанныхСтроки[10]);
	ИнформацияОПачке.Вставить("ВидКорректировки",МассивДанныхСтроки[11]);
	ИнформацияОПачке.Вставить("ИтогоВзносыСтраховаяЧасть",МассивДанныхСтроки[16]);
	ИнформацияОПачке.Вставить("ИтогоВзносыНакопительнаяЧасть",МассивДанныхСтроки[17]);
	ИнформацияОПачке.Вставить("ИтогоВзносыПоДопТарифу",МассивДанныхСтроки[18]);
	//ВсегоНЧСЛ										= Число(МассивДанныхСтроки[14]);
	//НЧСЛБл										= Число(МассивДанныхСтроки[15]);

	//Обработка записи заголовка "РБТД"
	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(СтрПолучитьСтроку(ТекстФайла,2));
	Если МассивДанныхСтроки.Количество()<>6 тогда
		Сообщить("Строка 2: неверное количество полей записи 'РБТД'!");
		Возврат 0;
	КонецЕсли;	  
	ИнформацияОРаботодателе.Вставить("РегистрационныйНомерПФР",МассивДанныхСтроки[2]);
	ИнформацияОРаботодателе.Вставить("ИНН",МассивДанныхСтроки[3]);
	ИнформацияОРаботодателе.Вставить("КПП",МассивДанныхСтроки[4]);
	ИнформацияОРаботодателе.Вставить("Наименование",МассивДанныхСтроки[5]);

	//Обработка записи заголовка "ТИПД"
	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(СтрПолучитьСтроку(ТекстФайла,4));
	Если МассивДанныхСтроки.Количество()<>3 тогда
		Сообщить("Строка 4: неверное количество полей записи 'ТИПД'!");
		Возврат 0;
	КонецЕсли;	  
	ИнформацияОПачке.Вставить("ТипДокумента",МассивДанныхСтроки[1]);
	ИнформацияОПачке.Вставить("ДокументовВПачке",ЧислоИзФайла(МассивДанныхСтроки[2]));

	ИнформацияОПачке.Вставить("ИнформацияОРаботодателе",ИнформацияОРаботодателе);
	Возврат 1;
КонецФункции	

//Выводит в табличный документ "ТабличныйДокумент" заполненный макет описи "Форма АДВ-6"
Процедура ВывестиОписьАДВ6(ТабличныйДокумент,Знач ИнформацияОПачке,Знач ОтветственныеЛица) Экспорт
	//Получим ответственные лица организации и их должности 
	МакетОписи = ПолучитьОбщийМакет("ФормаАДВ_6_1");
	СекцияОпись = МакетОписи.ПолучитьОбласть("Опись");

	СекцияОпись.Параметры.РегНомерПФР						= ИнформацияОПачке.ИнформацияОРаботодателе.РегистрационныйНомерПФР;
	СекцияОпись.Параметры.ИНН								= ИнформацияОПачке.ИнформацияОРаботодателе.ИНН;
	СекцияОпись.Параметры.КПП								= ИнформацияОПачке.ИнформацияОРаботодателе.КПП;
	СекцияОпись.Параметры.Наименование						= ИнформацияОПачке.ИнформацияОРаботодателе.Наименование;

	Если ИнформацияОПачке.ТипДокумента = "АНКТ" тогда
		СекцияОпись.Параметры.ДокументовАДВ1вПачке 			= ИнформацияОПачке.ДокументовВПачке;
	иначеЕсли ИнформацияОПачке.ТипДокумента = "ОБМН" тогда
		СекцияОпись.Параметры.ДокументовАДВ2вПачке 			= ИнформацияОПачке.ДокументовВПачке;
	иначеЕсли ИнформацияОПачке.ТипДокумента = "ДУБЛ" тогда
		СекцияОпись.Параметры.ДокументовАДВ3вПачке 			= ИнформацияОПачке.ДокументовВПачке;
	ИначеЕсли ИнформацияОПачке.ТипДокумента = "КОНВ" тогда
		СекцияОпись.Параметры.ДокументовСЗВКвПачке			= ИнформацияОПачке.ДокументовВПачке;
	ИначеЕсли ИнформацияОПачке.ТипДокумента = "ИН41" ИЛИ ИнформацияОПачке.ТипДокумента = "ИН42" тогда
		Если ИнформацияОПачке.ТипДокумента = "ИН41" тогда
			СекцияОпись.Параметры.ДокументовСЗВ4вПачке			= ИнформацияОПачке.ДокументовВПачке;
		Иначе
			СекцияОпись.Параметры.ДокументовСЗВ4вПачке			= ИнформацияОПачке.ДокументовСЗВ4_2вПачке;
		КонецЕсли;
		СекцияОпись.Параметры.ЧислоЗастрахованныхЛицВПачке	= ИнформацияОПачке.ДокументовВПачке;
		СекцияОпись.Параметры.РасчетныйПериод 				= ИнформацияОПачке.РасчетныйПериод;
		СекцияОпись.Параметры.КодКатегорииЗастрахованногоЛица = ИнформацияОПачке.КодКатегорииЗастрахованногоЛица;
		СекцияОпись.Параметры.КодДополнительногоТарифа 		= ИнформацияОПачке.КодДополнительногоТарифа;
		СекцияОпись.Параметры.ТерриториальныеУсловия 		= ИнформацияОПачке.ТерриториальныеУсловия;
		Попытка
			СекцияОпись.Параметры.ИтогоВзносыСтраховаяЧасть		= Число(ИнформацияОПачке.ИтогоВзносыСтраховаяЧасть);
			СекцияОпись.Параметры.ИтогоВзносыНакопительнаяЧасть	= Число(ИнформацияОПачке.ИтогоВзносыНакопительнаяЧасть);
			СекцияОпись.Параметры.ИтогоВзносыПоДопТарифу		= Число(ИнформацияОПачке.ИтогоВзносыПоДопТарифу);
		Исключение
		КонецПопытки;
		
		Если ИнформацияОПачке.ТипСведений = "ИСХД" Тогда
			СекцияОпись.Рисунки.ТипСведений_ИСХД.Текст = "ю";	
		ИначеЕсли ИнформацияОПачке.ТипСведений = "ПЕНС" Тогда
			СекцияОпись.Рисунки.ТипСведений_ПЕНС.Текст = "ю";	
		КонецЕсли; 
		
		Если ИнформацияОПачке.ВидКорректировки = "КОРР" Тогда
			СекцияОпись.Рисунки.ВидКорректировки_КОРР.Текст = "ю";
		ИначеЕсли ИнформацияОПачке.ВидКорректировки = "ОТМН" Тогда
			СекцияОпись.Рисунки.ВидКорректировки_ОТМН.Текст = "ю";
		КонецЕсли;	
	КонецЕсли;	

	СекцияОпись.Параметры.НомерПачкиРаботодателя 			= ИнформацияОПачке.НомерПачкиРаботодателя;

	СекцияОпись.Параметры.ДолжностьИсполнителя				= ОтветственныеЛица.ИсполнительДолжность;
	СекцияОпись.Параметры.РасшифровкаПодписиИсполнителя		= ОтветственныеЛица.Исполнитель;
	СекцияОпись.Параметры.ДолжностьРуководителя		 		= ОтветственныеЛица.РуководительДолжность;
	СекцияОпись.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
	СекцияОпись.Параметры.ДатаЗаполнения		 			= ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);

	ТабличныйДокумент.Вывести(СекцияОпись);
КонецПроцедуры	 

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ОБЕСПЕЧИВАЮЩИЕ РАБОТУ С ЗАПИСЯМИ ФАЙЛОВ СВЕДЕНИЙ

//Возвращает формат записи файла сведений (таблицу с именами и типами полей)
Функция ПолучитьФорматЗаписи(Знач ИмяЗаписи,Знач ДокументФорматЗаписей) Экспорт

	ТаблицаФормаЗаписи = Новый ТаблицаЗначений;
	ТаблицаФормаЗаписи.Колонки.Добавить("ИмяПоля",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипПоля",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
	ТаблицаФормаЗаписи.Колонки.Добавить("Размер",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("РазрядностьДробнойЧасти",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));

	ОбластьФорматЗаписи = ДокументФорматЗаписей.ПолучитьОбласть(ИмяЗаписи);

	Для НСтр = 1 По ОбластьФорматЗаписи.ВысотаТаблицы Цикл
		//тип поля хранится в 5-ой колонке
		ИмяПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 5).Текст);
		Если ИмяПоля <> "" тогда
			//тип поля хранится во 2-ой колонке	
			ТипПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 2).Текст);
			//размер поля хранится в 3-ей колонке	
			СтрРазмерПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 3).Текст);

			НовоеПоле = ТаблицаФормаЗаписи.Добавить();
			НовоеПоле.ИмяПоля = СокрЛП(ИмяПоля);
			НовоеПоле.ТипПоля = ВРЕГ(СокрЛП(ТипПоля));
			//Если указан размер поля, сохраним его
			Если СтрРазмерПоля<>"" тогда
				ПозицияТочки = Найти(СтрРазмерПоля,".");
				Если ПозицияТочки<>0 тогда
					НовоеПоле.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
					НовоеПоле.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
				Иначе	
					НовоеПоле.Размер = Число(СтрРазмерПоля);
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 

	КонецЦикла;

	Возврат ТаблицаФормаЗаписи;
КонецФункции	 

//Возвращает инициализировнную структуру, соответствующую формату записи
Функция ПолучитьСтруктуруЗаписи(Знач ТаблицаФорматаЗаписи) Экспорт
	СтрИменаПолей = "";
	Для Каждого Поле из ТаблицаФорматаЗаписи цикл
		СтрИменаПолей = СтрИменаПолей +","+Поле.ИмяПоля;
	КонецЦикла;	

	СтрИменаПолей = Сред(СтрИменаПолей,2);//Убрали первую запятую
	Возврат Новый Структура(СтрИменаПолей);
КонецФункции	 

//Формирует строку для файла сведений на основе данных структуры записи
Функция ПолучитьСтрокуПоДаннымЗаписи(Знач Запись,Знач ТаблицаФорматаЗаписи) Экспорт

	Стр = "";

	СтрНули = "0000000000";

	Для Каждого Поле из ТаблицаФорматаЗаписи цикл

		ЗначениеПоля = Запись[Поле.ИмяПоля];

		Если Поле.ТипПоля = "СТРОКА" тогда

			Стр = Стр +","+ """"+СокрЛП(ЗначениеПоля)+"""";

		ИначеЕсли Поле.ТипПоля = "ДАТА" тогда

			Если ЗначениеПоля = Неопределено тогда
				Стр = Стр + ",""""";
			Иначе
				Стр = Стр + ",""" + Формат(ЗначениеПоля, "ДФ='дд/ММ/гггг'") + """";
			КонецЕсли;

		Иначе//Если Поле.ТипПоля = "Число" тогда

			ТипЗнчПоля = ТипЗнч(ЗначениеПоля);

			Если ТипЗнчПоля = Тип("Число") тогда
				//ЗначениеПоля = ЗначениеПоля;
			ИначеЕсли ТипЗнчПоля = Тип("Строка") тогда	
				//ЗначениеПоля = Число(ЗначениеПоля);
				ЗначениеПоля = СокрЛП(ЗначениеПоля);
			Иначе					
				ЗначениеПоля = 0;
			КонецЕсли;

			//Формируем представление нуля
			РазрядностьДробнойЧасти = Поле.РазрядностьДробнойЧасти;
			Если РазрядностьДробнойЧасти = 0 тогда
				ПредставлениеНуля = "0";
			Иначе	
				ПредставлениеНуля = "0." + Лев(СтрНули, РазрядностьДробнойЧасти);
			КонецЕсли;	 
			//Форматируем значение
			ЗначениеПоля = Формат(ЗначениеПоля,"ЧГ=0; ЧРД =.; ЧЦ=" + Поле.Размер + "; ЧДЦ=" + РазрядностьДробнойЧасти+"; ЧН=" + ПредставлениеНуля);

			Стр = Стр + "," + ЗначениеПоля;
		КонецЕсли;	 
	КонецЦикла;	

	Стр = Сред(Стр,2);//Убрали первую запятую

	Возврат Стр;
КонецФункции	 

//Выполняет разбор строки файла на значения элементов структуры записи
Функция РазложитьСтрокуВСтруктуруЗаписи(Знач Стр,Знач ТипЗаписи,Знач ТаблицаФормата,Запись,СтрОшибка)Экспорт

	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(Стр);

	Если МассивДанныхСтроки[0] <> ТипЗаписи тогда
		СтрОшибка = "Неверный тип записи. Ожидается запись с типом "+ТипЗаписи+"!";
		Возврат ложь;
	КонецЕсли;	

	Если МассивДанныхСтроки.Количество() <> ТаблицаФормата.Количество() тогда
		СтрОшибка = "Неверное количество полей записи "+ТипЗаписи+"!";
		Возврат Ложь;
	КонецЕсли;	

	НомерПоля = 0;
	Для Каждого Поле из ТаблицаФормата цикл
		ЗначениеПоля = МассивДанныхСтроки[НомерПоля];
		Если Поле.ТипПоля = "ДАТА" тогда
			ЗначениеПоля = ДатаИзФайла(ЗначениеПоля);
		ИначеЕсли Поле.ТипПоля = "ЧИСЛО" тогда
			ЗначениеПоля = ЧислоИзФайла(ЗначениеПоля);
		КонецЕсли;	 
		Запись[Поле.ИмяПоля]=ЗначениеПоля;
		НомерПоля = НомерПоля + 1;
	КонецЦикла;	

	Возврат Истина;
КонецФункции	 

/////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ ПРОВЕРКИ ФОРМ СЗВ

// Распечатывает список найденных ошибок с группировкой по физлицу
Процедура ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, ИсточникОшибок) Экспорт

	Таблица = ТаблицаПлохихЗаписей.Скопировать();
	Таблица.Свернуть("ФизЛицо");
	МассивФизлиц = Таблица.ВыгрузитьКолонку("ФизЛицо");
	ТаблицаПлохихЗаписей.Индексы.Добавить("ФизЛицо");
	
	Если ТаблицаПлохихЗаписей.Количество() > 0 тогда
		СтруктураПоиска = Новый Структура("ФизЛицо");
		Для каждого ФизЛицо Из МассивФизлиц цикл

			СтруктураПоиска.ФизЛицо = ФизЛицо;
			НайдОшибки = ТаблицаПлохихЗаписей.НайтиСтроки(СтруктураПоиска);

			Если НайдОшибки.Количество() = 0 тогда
				Продолжить;
			КонецЕсли;	 

			СтрОшибкиПоФизЛицу = "--------------------------------------------------------------------------------------------" + Символы.ПС;
			СтрОшибкиПоФизЛицу = СтрОшибкиПоФизЛицу + ИсточникОшибок+" работника " + Физлицо + " обнаружены ошибки:" + Символы.ПС;
			НомерОшибки = 0;
			Для Каждого Ошибка из НайдОшибки цикл
				НомерОшибки = НомерОшибки + 1;
				СтрОшибкиПоФизЛицу = СтрОшибкиПоФизЛицу + НомерОшибки+".) " + Ошибка.ОписаниеОшибки;
			КонецЦикла;
			ОбщегоНазначения.СообщитьОбОшибке(СтрОшибкиПоФизЛицу,Ложь);
		КонецЦикла;
	КонецЕсли;	 

КонецПроцедуры

//Проверяет правильность заполнения номера документа, удостоверяющего личность
Функция ПроверитьНомерУдостоверенияЛичности(ДокументКодИМНС, Знач Номер, СтрОшибка) Экспорт
	
	Если ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("0123456789",Номер,"          "))=0 Тогда
		СтрОшибка = "В номере документа присутствуют недопустимые символы!";
		Возврат Ложь;
	КонецЕсли;
	
	ДлинаНомера = СтрДлина(СокрЛП(Номер));
	
	СтрОшибка = "";
	
	Если ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС01
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС03
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС04
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС06
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС21 Тогда
		Если ДлинаНомера <> 6 Тогда
			СтрОшибка = "Номер документа должен состоять из 6 символов!";
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС09
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС22 Тогда
		Если ДлинаНомера <> 7 Тогда
			СтрОшибка = "Номер документа должен состоять из 7 символов!";
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС02
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС07
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС26
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС27 Тогда
		Если (ДлинаНомера < 6 ) или ( ДлинаНомера > 7 ) Тогда
			СтрОшибка = "Номер документа должен состоять из 6 или 7 символов!";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

// Проверяет правильность заполнения серии документа, удостоверяющего личность 
Функция ПроверитьСериюУдостоверенияЛичности(ДокументКодИМНС, Знач Серия , СтрОшибка) Экспорт
	
	// проверка
	Если ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС01
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС03 Тогда
		ТипДока = 1;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС04
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС06
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС07
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС26
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС27 Тогда
		ТипДока = 2;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС02
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС09
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС22 Тогда
		ТипДока = 3;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС21 Тогда
		ТипДока = 4;
	Иначе
		ТипДока = 5;
	КонецЕсли;
	
	СтрОшибка = "";
	
	Серия = СокрЛП(Серия);
	
	Если ТипДока = 1 Тогда // паспорт СССР и свид о рожд
		
		Поз = Найти(Серия,"-");
		Если Поз=0 Тогда
			СтрОшибка = "Серия документа должна состоять из двух частей, резделенных символом ""-""!";
			Возврат Ложь;
		КонецЕсли;
		
		Ч1 = Лев(Серия, Поз-1);
		Ч2 = СокрЛП(Сред(Серия, Поз+1));
		
		Поз = Найти(Ч2,"-");
		Если Поз <> 0 Тогда
			СтрОшибка = "В серии документа должно быть только две группы символов!";
			Возврат Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Ч1) Тогда
			СтрОшибка = "В серии документа отсутствует числовая часть!";
			Возврат Ложь;
		ИначеЕсли  ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("IVXLC1УХЛС",Ч1,"          "))=0 Тогда
			СтрОшибка = "Числовая часть серии документа должна указываться символами 1 У Х Л С  или  I V X L C";
			Возврат Ложь;
		ИначеЕсли РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("IVXLC",Ч1,"1УХЛС") <> РегламентированнаяОтчетность.ПреобразоватьЧислоВРимскуюНотацию(РегламентированнаяОтчетность.ПреобразоватьЧислоВАрабскуюНотацию(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("IVXLC",Ч1,"1УХЛС"))) Тогда
			СтрОшибка = "Числовая часть серии документа указана некорректно!";
			Возврат Ложь;
		ИначеЕсли (СтрДлина(Ч2) <> 2) ИЛИ (ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ",Ч2,"                                 "))=0) Тогда
			СтрОшибка = "После разделителя ""-"" в серии документа должны быть ДВЕ pусcкие заглавные буквы!";
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДока=2 Тогда // серия - две буквы: военный билет, ...
		
		Если (СтрДлина(Серия) <> 2) ИЛИ (ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ",Серия,"                                 "))=0) Тогда
			СтрОшибка = "В серии документа должны быть ДВЕ pусcкие заглавные буквы!";
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДока=3 Тогда // серия - две цифры: загранпаспорта 
		
		Если (СтрДлина(Серия) <> 2) ИЛИ (ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("0123456789",Серия,"          "))=0) Тогда
			СтрОшибка = "В серии документа должно быть ДВЕ цифры!";
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДока=4 Тогда // серия - две группы цифр: новый паспорт
		
		Поз = Найти(Серия," ");
		Если Поз=0 Тогда
			СтрОшибка = "В серии документа должно быть две группы цифр!";
			Возврат Ложь;
		КонецЕсли;
		
		ПервЧасть = Лев(Серия,Поз-1);
		ВторЧасть = СокрЛП(Сред(Серия,Поз+1));
		
		Поз = Найти(ВторЧасть," ");
		Если Поз <> 0 Тогда
			СтрОшибка = "В серии документа должно быть только две группы цифр!";
			Возврат Ложь;
		КонецЕсли;
		
		Если (СтрДлина(ПервЧасть) <> 2) ИЛИ
			(ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("0123456789",ПервЧасть,"          "))=0) Тогда
			СтрОшибка = "Первая группа символов серии документа должна содержать две цифры!";
			Возврат Ложь;
		КонецЕсли;
		
		Если (СтрДлина(ВторЧасть) <> 2) ИЛИ
			(ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("0123456789",ВторЧасть,"          "))=0) Тогда
			СтрОшибка = "Вторая группа символов серии документа должна содержать две цифры!";
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ФОРМ СЗВ-К

//Добавляет новую строку в таблицу плохих записей стажа
Процедура СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Запись,ОписаниеОшибки,ОсновнаяЗапись = "")

	Если ОсновнаяЗапись = "" Тогда
		ОсновнаяЗапись = Запись;
	КонецЕсли;  
	ЗаголовокОшибки = СЗВК_СформироватьЗаголовокОшибкиЗаписиОСтаже(Запись,ОсновнаяЗапись);

	//Для строк сообщения сделаем отступ
	Стр = "";
	МассивСтрок =  ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ОписаниеОшибки,Символы.ПС);
	Для Каждого Строка из Массивстрок цикл
		Стр = Стр + "    " + Строка + Символы.ПС ;
	КонецЦикла;	
	ПолноеОписаниеОшибки = ЗаголовокОшибки + Стр;

	НоваяСтрока = ТаблицаПлохихЗаписей.Добавить();
	НоваяСтрока.ФизЛицо = Запись.ФизЛицо;
	НоваяСтрока.ОписаниеОшибки = ПолноеОписаниеОшибки;

КонецПроцедуры 

//Добавляет новую строку в таблицу плохих записей сведений
Процедура СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей,Запись,ОписаниеОшибки)
	ЗаголовокОшибки ="Запись № "+Запись.НомерЗаписи+", Вид стажа: " +Запись.ВидСтажа + ":"+Символы.ПС;

	//Для строк сообщения сделаем отступ
	Стр = "";
	МассивСтрок =  ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ОписаниеОшибки,Символы.ПС);
	Для Каждого Строка из Массивстрок цикл
		Стр = Стр + "    " + Строка + Символы.ПС ;
	КонецЦикла;	
	ПолноеОписаниеОшибки = ЗаголовокОшибки + Стр;

	НоваяСтрока = ТаблицаПлохихЗаписей.Добавить();
	НоваяСтрока.ФизЛицо = Запись.ФизЛицо;
	НоваяСтрока.ОписаниеОшибки = ПолноеОписаниеОшибки;
КонецПроцедуры 

//Выполняет проверку дополнительной записи стажа на допустимось значений реквизитов
Функция СЗВК_ВыполнитьПроверкуДополнительнойЗаписи(Запись, ОсновнаяЗапись, ТаблицаПлохихЗаписей) 

	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОсобыеУсловияТруда) 
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа) тогда
		СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дополнительная запись может вводиться только при заполнении хотя бы одного из реквизитов основной записи:
		| 		Особые условия труда , Выслуга лет, Территориальные условия, Основание исчисляемого стажа!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	 

	Если ЗначениеЗаполнено(Запись.ОснованиеИсчисляемогоСтажа) тогда
		СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи о стаже не может указываться основание исчисляемого стажа!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	

	//Проверка на обязательный ввод одной из льгот
	УказаныТерриториальныеУсловия = ЗначениеЗаполнено(Запись.ТерриториальныеУсловия);
	УказанРК = ЗначениеЗаполнено(Запись.РайонныйКоэффициент);
	ЗаданаГруппаТерриториальныеУсловия = УказаныТерриториальныеУсловия или УказанРК;

	УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(Запись.ОсобыеУсловияТруда);
	УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(Запись.ОснованиеВыслугиЛет);

	Если (НЕ ЗаданаГруппаТерриториальныеУсловия) И (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеВыслугиЛет) тогда
		СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи должна быть задана либо территориальная льгота, либо особые условия труда, либо выслуга лет!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	 

	//Проверка на ввод территориальной льготы
	Если ЗаданаГруппаТерриториальныеУсловия тогда
		Если  (НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия)) И(НЕ ЗначениеЗаполнено(ОсновнаяЗапись.РайонныйКоэффициент)) тогда
			СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи территориальная льгота может быть указана только при указании территориальной льготы в основной записи!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;	

	//Проверка на ввод условий труда
	Если УказаныОсобыеУсловияТруда тогда
		УсловияТрудаЗаписи = Запись.ОсобыеУсловияТруда;
		Если (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.ЗП12А)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.ЗП12Б)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.ЗП12Ж) тогда
			СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда должен принимать значение ЗП12А, ЗП12Б или ЗП12Ж!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;

		Если (УсловияТрудаЗаписи = Справочники.ОсобыеУсловияТруда.ЗП12Ж) 
			И (ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа <> Справочники.ОснованияИсчисляемогоТрудовогоСтажа.УИК104) тогда
			СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда ЗП12Ж может быть указан" 
			+Символы.ПС+"только в случае указания в основной записи кода исчисляемого стажа УИК104!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;

	//Проверка на ввод основания выслуги лет
	//Если УказаноОснованиеВыслугиЛет тогда
	КодВыслугиЛетЗаписи = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);

	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет) тогда
		Если Найти(",,ЗП81СМ,ЗП81ГД,ХИРУРСМ,ХИРУРГД,",","+КодВыслугиЛетЗаписи+",") = 0 тогда
			СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Если в основной записи не указан код выслуги лет, то в дополнительной записи" 
			+Символы.ПС+"основание выслуги лет должно быть пустым или указаны коды ЗП81СМ,ЗП81ГД,ХИРУРСМ или ХИРУРГД!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	
	Иначе//В основной записи код выслуги указан

		МассивПравилНаКодыВыслугиДопЗаписей =  Новый Массив;
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",ЛЕТИСП,САМОЛЕТ,СПЕЦАВ,ОПЫТИСП,ИСПКЛС1,ИТСМАВ,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",НОРМАПР,РЕАКТИВН,НОРМСП,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",,ЗП81СМ,ЗП81ГД,ХИРУРСМ,ХИРУРГД,");//пустой код допустим

		КодВыслугиЛетОсновнойЗаписи = СОКРЛП(ОсновнаяЗапись.ОснованиеВыслугиЛетКод);

		ПроверочнаяСтрокаКодов = "";
		Для Каждого СтрокаКодов из МассивПравилНаКодыВыслугиДопЗаписей Цикл 
			Если Найти(СтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи+",") тогда
				ПроверочнаяСтрокаКодов = СтрокаКодов;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	

		Если ПроверочнаяСтрокаКодов = "" тогда
			СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода выслуги лет "+ КодВыслугиЛетОсновнойЗаписи
			+Символы.ПС+"в дополнительной записи код выслуги указываться не может!",ОсновнаяЗапись);
			Возврат Ложь;
		Иначе
			//Код выслуги основной записи исключим из списка возможных значений
			ПроверочнаяСтрокаКодов = СтрЗаменить(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи,"");

			Если НЕ Найти(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетЗаписи+",") тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода выслуги лет "+ КодВыслугиЛетОсновнойЗаписи+" в дополнительной записи"
				+Символы.ПС+"могут быть указаны только следующие коды выслуги: "+Сред(ПроверочнаяСтрокаКодов,2),ОсновнаяЗапись);
				Возврат Ложь;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	//КонецЕсли;	 


	Возврат Истина;
КонецФункции	 

//Выполняет проверку записей стажа на допустимось значений реквизитов между группами
Функция СЗВК_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(СтруктураПараметров, ТаблицаПлохихЗаписей) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивФизлиц",СтруктураПараметров.МассивФизлиц);
	
	//Проверяем на допустимые сочетания только те записи, в которых указан либо код условий труда, либо код основания исчисляемого стажа
	//( указание только выслуги лет допустимо)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Записи.ФизЛицо КАК ФизЛицо,
	|	Записи.НомерПериодаТрудовойДеятельности КАК НомерПериодаТрудовойДеятельности,
	|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	Записи.ОсобыеУсловияТруда.Код КАК УказанныйКодУсловийТруда,
	|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
	|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
	|	Записи.ОснованиеВыслугиЛет.Код КАК УказанныйКодОснованияВыслугиЛет,
	|	Записи.НулевойПараметрИсчисляемогоСтажа КАК УказанныйНулевойПараметрИсчисляемогоСтажа,
	|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
	|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
	|	Сочетания.НомерПравила КАК НомерПравила,
	|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
	|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
	|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
	|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
	|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
	|	Сочетания.ФорматФОВ КАК ФорматФОВ,
	|	Записи.Организация КАК Организация,
	|	Записи.ВидДеятельности КАК ВидДеятельности,
	|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода
	|ИЗ
	|	РегистрСведений.ЗаписиОСтажеДляСЗВК КАК Записи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
	|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
	|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
	|					И Сочетания.КодУсловийТруда = """")
	|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
	|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
	|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
	|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
	|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
	|					И Сочетания.КодОснованияВыслугиЛет = """")
	|			И (Сочетания.ТипШаблонаКПС = ""Любой""
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
	|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
	|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
	|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
	|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
	|ГДЕ
	|	Записи.ФизЛицо В(&МассивФизлиц)
	|	И ((НЕ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL )
	|			ИЛИ (НЕ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL ))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	НомерПериодаТрудовойДеятельности,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") цикл
		Пока Выборка.СледующийПоЗначениюПоля("НомерПериодаТрудовойДеятельности") цикл
			Пока Выборка.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") цикл
				Пока Выборка.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") цикл
					
					СтрокаСообщений = "Комбинация значений реквизитов:";
					СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание выслуги лет = " + Выборка.УказанныйКодОснованияВыслугиЛет;
					СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание исчисляемого стажа = " + Выборка.УказанныйКодОснованияИсчисляемогоСтажа;
					СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Особые условия труда = " + Выборка.УказанныйКодУсловийТруда;
					СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Код позиции списка = " + Выборка.УказанныйКодПозицииСписка;
					
					Если (Выборка.НомерПравила = NULL)
						ИЛИ ( СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12100000-11465" И СокрЛП(Выборка.УказанныйКодОснованияИсчисляемогоСтажа) <> "ВОДОЛАЗ") 
						ИЛИ ( СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12003000-17541" И СокрЛП(Выборка.УказанныйКодОснованияВыслугиЛет) <> "УВД") тогда
						СтрокаСообщений = СтрокаСообщений+Символы.ПС+"Не является допустимой!";
						
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
						Продолжить;
						
					КонецЕсли;	
					
					//Флаг допустимости значений реквизитов  группы "Фактически отработанное время"  
					ФОВДопустимо = Ложь;
					
					СтрокаСообщений = "Значения реквизитов группы ""Фактически отработанное время"" не соответствуют ни одному из заданных форматов:"+Символы.ПС;
					
					//Для Каждого ФорматФОВ из СписокДопустимыхФорматовФОВ цикл
					Пока Выборка.Следующий() цикл
						
						ФорматФОВ = Выборка.ФорматФОВ;
						СтрокаОшибкиФормата = "";            	
						ПрошлоПроверку = 0;
						СтрокаЗначенияПараметров = "";
						
						Для Н=0 по 2 цикл
							ФорматПараметра = Сред(ФорматФОВ,Н+1,1); 
							
							Если Н=0 тогда
								ЗначениеПараметра = Выборка.УказанныйНулевойПараметрИсчисляемогоСтажа;
								ПсевдонимПараметра = "Годы";
							ИначеЕсли Н=1 тогда	
								ЗначениеПараметра = Выборка.УказанныйПервыйПараметрИсчисляемогоСтажа;
								ПсевдонимПараметра = "Месяцы";
							Иначе
								ЗначениеПараметра = Выборка.УказанныйВторойПараметрИсчисляемогоСтажа;
								ПсевдонимПараметра = "Дни";
							КонецЕсли;	
							
							ПараметрПрошелПроверку = Ложь;
							
							НачалоСообщения = "Параметр исчисляемого стажа №"+Н+"("+ПсевдонимПараметра+")";
							
							Если (ФорматПараметра = "_") тогда
								Если (ЗначениеПараметра <> 0) тогда//ПУСТОЕ
									СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения + " должен быть пустым (=0)!"+Символы.ПС;
								Иначе	
									ПараметрПрошелПроверку = ИСТИНА;
								КонецЕсли;
							ИначеЕсли (ФорматПараметра = "Г") тогда
								Если (ЗначениеПараметра > 100) тогда//ГОДЫ
									СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 100 (лет)!"+Символы.ПС;
								Иначе	
									ПараметрПрошелПроверку = ИСТИНА;
								КонецЕсли;
							ИначеЕсли (ФорматПараметра = "М") тогда 
								Если (ЗначениеПараметра > 11) тогда//МЕСЯЦЫ
									СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 11 (месяцев)!"+Символы.ПС;
								Иначе	
									ПараметрПрошелПроверку = ИСТИНА;
								КонецЕсли;
							ИначеЕсли (ФорматПараметра = "Д") тогда 
								Если (ЗначениеПараметра > 30) тогда//ДНИ
									СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 30 (дней)!"+Символы.ПС;
								Иначе	
									ПараметрПрошелПроверку = ИСТИНА;
								КонецЕсли;
							ИначеЕсли (ФорматПараметра = "ч") тогда//ЧАСЫ 
								ПараметрПрошелПроверку = ИСТИНА;
							ИначеЕсли (ФорматПараметра = "м") тогда 
								Если (ЗначениеПараметра > 59) тогда//МИНУТЫ
									СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 59 (минут)!"+Символы.ПС;
								Иначе	
									ПараметрПрошелПроверку = ИСТИНА;
								КонецЕсли;
							КонецЕсли;	 
							
							Если ПараметрПрошелПроверку тогда
								ПрошлоПроверку = ПрошлоПроверку + 1;
							КонецЕсли;	 
							
							СтрокаЗначенияПараметров = СтрокаЗначенияПараметров + ЗначениеПараметра;
						КонецЦикла;
						
						//Если формат не равен [ПУСТОЕ,ПУСТОЕ,ПУСТОЕ], то значения всех трех параметров не должны равняться 0
						Если (СокрЛП(ФорматФОВ) <> "___")и(СтрокаЗначенияПараметров="000") тогда//
							ПрошлоПроверку = 0;
							СтрокаОшибкиФормата = СтрокаОшибкиФормата + "В параметрах (Годы,Месяцы,Дни) должно быть указано отработанное время!"+Символы.ПС;
						КонецЕсли;	
						
						Если ПрошлоПроверку = 3 тогда
							ФОВДопустимо = Истина;
							Прервать;
						КонецЕсли;
						
						СтрФорматФОВ = ФорматФОВ;
						СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"_",",пустое");
						СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"ч",",часы");
						СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"м",",минуты");
						СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Г",",годы");
						СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"М",",месяцы");
						СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Д",",дни");
						СтрФорматФОВ = Сред(СтрФорматФОВ,2);//Убрали первую запятую
						
						СтрокаОшибкиФормата = "Соглано формату ["+СтрФорматФОВ+"]:"+Символы.ПС+СтрокаОшибкиФормата;            	
						СтрокаСообщений = СтрокаСообщений + СтрокаОшибкиФормата;
					КонецЦикла;	// по вариантам формата ФОВ
					
					Если НЕ ФОВДопустимо тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
					КонецЕсли;	 
					
				КонецЦикла;// По дополнительным записям	
			КонецЦикла;// По основным записям	
		КонецЦикла;// По периодам деятельности
	КонецЦикла;// По физлицам	
	
КонецФункции	 

//Формирует строку-заголовок для сообщения об ошибке, найденной в записи о стаже
Функция СЗВК_СформироватьЗаголовокОшибкиЗаписиОСтаже(Запись, ОсновнаяЗапись) Экспорт 
	Если НЕ ЗначениеЗаполнено(Запись.Организация)или(НЕ ЗначениеЗаполнено(Запись.ВидДеятельности)) тогда
		ЗаголовокСообщения = "Период деятельности № "+ОсновнаяЗапись.НомерПериодаТрудовойДеятельности;
	Иначе 
		ЗаголовокСообщения = "Организация: "+СокрЛП(Запись.Организация)+", Вид деятельности: "+СокрЛП(Запись.ВидДеятельности);
	КонецЕсли;	                                                                                                                                                                                              

	Если ЗначениеЗаполнено(ОсновнаяЗапись.ДатаНачалаПериода) тогда
		ЗаголовокСообщения = ЗаголовокСообщения + ", Период: "+Формат(ОсновнаяЗапись.ДатаНачалаПериода,"ДФ='дд.ММ.гггг'")+"-"+Формат(ОсновнаяЗапись.ДатаОкончанияПериода,"ДФ='дд.ММ.гггг'");
	иначе
		ЗаголовокСообщения = ЗаголовокСообщения + ", Основная запись № "+ОсновнаяЗапись.НомерОсновнойЗаписи;
	КонецЕсли;	 

	Если Запись.НомерДополнительнойЗаписи <> 0 тогда
		ЗаголовокСообщения = ЗаголовокСообщения + ", Дополнительная запись № "+Запись.НомерДополнительнойЗаписи;
	КонецЕсли;	

	ЗаголовокСообщения = ЗаголовокСообщения + ":"+Символы.ПС;

	Возврат ЗаголовокСообщения;
КонецФункции	 

//Выполняет проверку правильности заполнения набора записей о стаже для формы СЗВ-К
Функция СЗВК_ПроверитьНаборЗаписейОСтаже(ИнициаторВызова, МассивФизЛиц, ДатаАктуальности = "", РезультатВыборкиЗаписей = "", ВыборкаПоШапкеДокумента = Неопределено) Экспорт

	ПустаяДата = Дата('00010101');

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивФизЛиц" , МассивФизЛиц);

	Если ТипЗнч(ИнициаторВызова) = Тип("ДокументСсылка.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК") тогда

		Запрос.УстановитьПараметр("ДокументСсылка" ,				ИнициаторВызова);
		Запрос.УстановитьПараметр("ДатаАктуальности" ,				ДатаАктуальности);
		Запрос.УстановитьПараметр("Организация" ,					ВыборкаПоШапкеДокумента.Организация);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация" ,			ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияСЗВКРаботники.НомерСтроки КАК НомерСтроки,
		|	СведенияСЗВКРаботники.ФизЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	СведенияСЗВКРаботники.ФизЛицо.ДатаРождения КАК ДатаРождения,
		|	СведенияСЗВКРаботники.ФизЛицо КАК ФизЛицо,
		|	СведенияСЗВКРаботники.ФизЛицо.Наименование КАК ФизЛицоНаименование,
		|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
		|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
		|	СведенияОФизлицеДляСЗВК.ТерриториальныеУсловияНа31_12_2001.Код КАК ТерриториальныеУсловияНа_31_12_2001Код,
		|	СведенияОФизлицеДляСЗВК.РайонныйКоэффициентНа31_12_2001 КАК РайонныйКоэффициентНа_31_12_2001,
		|	ЗаписиОСтаже.НомерПериодаТрудовойДеятельности КАК НомерПериодаТрудовойДеятельности,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.Организация КАК Организация,
		|	ЗаписиОСтаже.Организация КАК ОрганизацияНаименование,
		|	ЗаписиОСтаже.ВидДеятельности КАК ВидДеятельности,
		|	ЗаписиОСтаже.ВидДеятельности.Код КАК ВидДеятельностиКод,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.РайонныйКоэффициент КАК РайонныйКоэффициент,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.НулевойПараметрИсчисляемогоСтажа КАК НулевойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	ЗаписиОСтаже.Должность,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.КоличествоРабочихМест > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ФизЛицоРаботаетВОрганизации
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК.РаботникиОрганизации КАК СведенияСЗВКРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо В (&МассивФизЛиц)) КАК ФИОФизЛицСрезПоследних
		|		ПО СведенияСЗВКРаботники.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВК КАК ЗаписиОСтаже
		|		ПО СведенияСЗВКРаботники.ФизЛицо = ЗаписиОСтаже.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицеДляСЗВК КАК СведенияОФизлицеДляСЗВК
		|		ПО СведенияСЗВКРаботники.ФизЛицо = СведенияОФизлицеДляСЗВК.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ 
		|							ВЫБОР
		|							КОГДА &ДатаАктуальности >= РаботникиОрганизации.ПериодЗавершения  
		|									И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|								ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
		|								ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
		|							КОНЕЦ) КАК КоличествоРабочихМест, 
		|			РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&ДатаАктуальности,
		|				Организация = &ГоловнаяОрганизация
		|					И Сотрудник.Физлицо В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							СведенияОТрудовомСтажеСЗВКРаботникиОрганизации.ФизЛицо
		|						ИЗ
		|							Документ.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК.РаботникиОрганизации КАК СведенияОТрудовомСтажеСЗВКРаботникиОрганизации
		|						ГДЕ
		|							СведенияОТрудовомСтажеСЗВКРаботникиОрганизации.Ссылка = &ДокументСсылка)
		|					И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизации
		|		ГДЕ
 		|		ВЫБОР
		|			КОГДА &ДатаАктуальности >= РаботникиОрганизации.ПериодЗавершения 
		|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА РаботникиОрганизации.ПричинаИзмененияСостоянияЗавершения
		|			ИНАЧЕ РаботникиОрганизации.ПричинаИзмененияСостояния
		|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
 		|		И ВЫБОР
		|			КОГДА &ДатаАктуальности >= РаботникиОрганизации.ПериодЗавершения 
		|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА РаботникиОрганизации.ОбособленноеПодразделениеЗавершения
		|			ИНАЧЕ РаботникиОрганизации.ОбособленноеПодразделение
		|		КОНЕЦ = &Организация
		|		СГРУППИРОВАТЬ ПО
		|			РаботникиОрганизации.Сотрудник.Физлицо) КАК РаботникиОрганизаций
		|		ПО СведенияСЗВКРаботники.ФизЛицо = РаботникиОрганизаций.ФизЛицо
		|ГДЕ
		|	СведенияСЗВКРаботники.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	НомерПериодаТрудовойДеятельности,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";

		ОсновнаяГруппировкаВыборки = "НомерСтроки";

	Иначе//Инициатором вызова является набор записей

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
		|	ЗаписиОСтаже.НомерПериодаТрудовойДеятельности КАК НомерПериодаТрудовойДеятельности,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.Организация КАК Организация,
		|	ЗаписиОСтаже.Организация КАК ОрганизацияНаименование,
		|	ЗаписиОСтаже.ВидДеятельности КАК ВидДеятельности,
		|	ЗаписиОСтаже.ВидДеятельности.Код КАК ВидДеятельностиКод,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.РайонныйКоэффициент КАК РайонныйКоэффициент,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.НулевойПараметрИсчисляемогоСтажа КАК НулевойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	ЗаписиОСтаже.Должность
		|ИЗ
		|	РегистрСведений.ЗаписиОСтажеДляСЗВК КАК ЗаписиОСтаже
		|ГДЕ
		|	ЗаписиОСтаже.ФизЛицо В(&МассивФизЛиц)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизЛицо,
		|	НомерПериодаТрудовойДеятельности,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";

		ОсновнаяГруппировкаВыборки = "ФизЛицо";
	КонецЕсли;

	РезультатВыборкиЗаписей = Запрос.Выполнить();
	ВыборкаЗаписей =  РезультатВыборкиЗаписей.Выбрать();

	ТаблицаПлохихЗаписей = Новый ТаблицаЗначений;
	ТаблицаПлохихЗаписей.Колонки.Добавить("Физлицо");
	ТаблицаПлохихЗаписей.Колонки.Добавить("ОписаниеОшибки");

	//Проверку правильности заполнения записей надо выполнять отдельно для каждого физлица
	Пока ВыборкаЗаписей.СледующийПоЗначениюПоля(ОсновнаяГруппировкаВыборки) Цикл

		Если ВыборкаЗаписей.НомерПериодаТрудовойДеятельности = NULL Тогда
			Продолжить;//Физлицо не имеет сведений
		КонецЕсли; 

		ФизЛицо = ВыборкаЗаписей.ФизЛицо;

		ТекущаяОсновнаяЗапись = Новый Структура("ФизЛицо, Организация, ВидДеятельности, ДатаНачалаПериода, ДатаОкончанияПериода, ОсобыеУсловияТруда, ОснованиеВыслугиЛет, ТерриториальныеУсловия, ОснованиеИсчисляемогоСтажа, ОснованиеВыслугиЛетКод, НомерОсновнойЗаписи, НомерДополнительнойЗаписи, НомерПериодаТрудовойДеятельности");

		//Список годов, в которых встречались записи с кодом исчисляемого стажа СЕЗОН
		СписокСезонныхГодов = Новый СписокЗначений;

		//Список значений группы реквизитов территориальные условия одной основной записи
		СписокТерриториальныеУсловияЗаписи = Новый СписокЗначений;

		//Список значений кодов условий труда одной основной записи
		СписокУсловияТрудаЗаписи = Новый СписокЗначений;

		//Список значений кодов выслуги лет основной записи
		СписокВыслугаЛетЗаписи = Новый СписокЗначений;

		ПредыдущийНомерПериодаДеятельности = 0;
		ПредыдущийНомерОсновнойЗаписи = 0;
		ПредыдущийНомерДополнительнойЗаписи = 0;
		ПредыдущаяОрганизация = "";
		ПредыдущийВидДеятельности = Справочники.ВидыОбщественноПолезнойДеятельности.ПустаяСсылка();

		Пока ВыборкаЗаписей.Следующий() Цикл

			Запись = ВыборкаЗаписей;

			// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ РЕКВИЗИТОВ "Организация" и "ВидДеятельности"

			//Организация и вид деятельности должны быть заполнены обязательно
			Если ПустаяСтрока(Запись.Организация) тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указана организация!");
			КонецЕсли;
			Если Запись.ВидДеятельности.Пустая() тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указан вид деятельности!");
			КонецЕсли;

			//Проверим, сменился ли период деятельности
			Если Запись.НомерПериодаТрудовойДеятельности <> ПредыдущийНомерПериодаДеятельности тогда
				СменилсяНомерПериодаДеятельности = Истина;
			Иначе
				СменилсяНомерПериодаДеятельности = Ложь;
			КонецЕсли;

			Если (Запись.Организация <> ПредыдущаяОрганизация) ИЛИ (Запись.ВидДеятельности <>ПредыдущийВидДеятельности) тогда
				СменилисьОрганизацияВидДеятельности = Истина;
			иначе
				СменилисьОрганизацияВидДеятельности = Ложь
			КонецЕсли;

			Если (СменилисьОрганизацияВидДеятельности)и(НЕ СменилсяНомерПериодаДеятельности) тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В рамках одного периода деятельности организация и вид деятельности меняться не должны!");
			КонецЕсли;

			// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ ДАТ НАЧАЛА И ОКОНЧАНИЯ ПЕРИОДА

			//По умолчанию считаем, что запись основная
			ЭтоОсновнаяЗапись = Истина;

			//Проверим, возможно ли появление в текущей позиции дополнительной записи о стаже
			ДополнительнаяЗаписьВозможна = Истина;
			Если СменилсяНомерПериодаДеятельности тогда
				ДополнительнаяЗаписьВозможна = Ложь;
			КонецЕсли;

			//Проверка заполненния реквзитов "ДатаНачалаПериода" и "ДатаОкончанияПериода" 
			Если (Запись.ДатаНачалаПериода = ПустаяДата) и (Запись.ДатаОкончанияПериода = ПустаяДата) тогда
				Если ДополнительнаяЗаписьВозможна тогда
					ЭтоОсновнаяЗапись = Ложь;
				Иначе
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указаны даты начала и окончания периода!");
				КонецЕсли;	
			ИначеЕсли (Запись.ДатаНачалаПериода = ПустаяДата) тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты окончания периода необходимо указывать дату начала периода!");
			ИначеЕсли (Запись.ДатаОкончанияПериода = ПустаяДата) тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты начала периода необходимо указавать дату окончания периода!");
			Иначе//Обе даты заполнены

				//Дата окончания периода не должна быть позднее 31.12.2001
				Если Запись.ДатаОкончанияПериода > '20011231'  тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата окончания периода должна быть не позднее 31 декабря 2001 года!");
				КонецЕсли;

				// Начало периода не должно быть позже окончания периода 
				Если Запись.ДатаНачалаПериода > Запись.ДатаОкончанияПериода тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода не должна превышать дату окончания периода!");
				КонецЕсли;

				// Начало периода не должно быть слишком старой
				Если Запись.ДатаНачалаПериода < Дата('19000101') тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода слишком старая!");
				КонецЕсли;

				Если ГОД(Запись.ДатаНачалаПериода) <> ГОД (Запись.ДатаОкончанияПериода) тогда

					Если (Запись.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ) 
						ИЛИ (Запись.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.СЕЗОН) тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Для оснований исчисляемого стажа ВОДОЛАЗ и СЕЗОН даты начала и окончания периода должны находиться в пределах одного календарного года!");
					КонецЕсли;

					Если НЕ ((Запись.ПервыйПараметрВыслугиЛет = 0) И (Запись.ВторойПараметрВыслугиЛет  = 0) И (Запись.ТретийПараметрВыслугиЛет  = 0)) тогда 
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании параметров 1-3 выслуги лет даты начала и окончания периода должны находиться в пределах одного календарного года!");
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

			//Проверка только для основной записи о стаже
			Если ЭтоОсновнаяЗапись тогда

				//Проверка на хронологический порядок записей
				Если ТекущаяОсновнаяЗапись.Организация <> Неопределено тогда
					Если Запись.ДатаНачалаПериода<=ТекущаяОсновнаяЗапись.ДатаОкончанияПериода тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть больше даты окончания предыдущего периода!");
					КонецЕсли;
				КонецЕсли;

				//Переустановка текущей основной записи
				ТекущаяОсновнаяЗапись.ФизЛицо = ФизЛицо;
				ТекущаяОсновнаяЗапись.Организация = Запись.Организация;
				ТекущаяОсновнаяЗапись.ВидДеятельности = Запись.ВидДеятельности;
				ТекущаяОсновнаяЗапись.ДатаНачалаПериода = Запись.ДатаНачалаПериода;
				ТекущаяОсновнаяЗапись.ДатаОкончанияПериода = Запись.ДатаОкончанияПериода;
				ТекущаяОсновнаяЗапись.ОсобыеУсловияТруда = Запись.ОсобыеУсловияТруда;
				ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛет = Запись.ОснованиеВыслугиЛет;
				ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛетКод = Запись.ОснованиеВыслугиЛетКод;
				ТекущаяОсновнаяЗапись.ТерриториальныеУсловия = Запись.ТерриториальныеУсловия;
				ТекущаяОсновнаяЗапись.ОснованиеИсчисляемогоСтажа = Запись.ОснованиеИсчисляемогоСтажа;
				ТекущаяОсновнаяЗапись.НомерПериодаТрудовойДеятельности = Запись.НомерПериодаТрудовойДеятельности;
				ТекущаяОсновнаяЗапись.НомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
				ТекущаяОсновнаяЗапись.НомерДополнительнойЗаписи = 0;

				СписокТерриториальныеУсловияЗаписи.Очистить();
				СписокУсловияТрудаЗаписи.Очистить();
				СписокВыслугаЛетЗаписи.Очистить();
			КонецЕсли;

			// ПРОВЕРКА ПРАВИЛЬНОСТИ НУМЕРАЦИИ ЗАПИСЕЙ

			//Проверка нумерации периодов деятельности
			ОжидаемыйНомерПериода = ПредыдущийНомерПериодаДеятельности +1;
			Если СменилсяНомерПериодаДеятельности тогда
				Если (Запись.НомерПериодаТрудовойДеятельности <> ОжидаемыйНомерПериода)  тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер периода трудовой деятельности. Ожидается номер: "+ОжидаемыйНомерПериода+"!");
				КонецЕсли;

				//Сброс счетчика основных записей
				ПредыдущийНомерОсновнойЗаписи = 0;
			КонецЕсли;

			//Проверка нумерации основных и дополнительных записей
			Если (ЭтоОсновнаяЗапись) тогда
				ОжидаемыйНомерОсновнойЗаписи = ПредыдущийНомерОсновнойЗаписи +1;
				Если (Запись.НомерОсновнойЗаписи <> ОжидаемыйНомерОсновнойЗаписи)  тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер основной записи. Ожидается номер: "+ОжидаемыйНомерОсновнойЗаписи+"!");;
				КонецЕсли;

				//Сброс счетчика дополнительных записей
				ПредыдущийНомерОсновнойЗаписи = 0;
			Иначе
				ОжидаемыйНомерДополнительнойЗаписи = ПредыдущийНомерДополнительнойЗаписи +1;
				Если (Запись.НомерДополнительнойЗаписи <> ОжидаемыйНомерДополнительнойЗаписи)  тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер дополнительной записи. Ожидается номер: "+ОжидаемыйНомерДополнительнойЗаписи+"!", ТекущаяОсновнаяЗапись);;
				КонецЕсли;
			КонецЕсли;


			//  ОПРЕДЕЛИМ, ЗАДАНЫ ЛИ РЕКВИЗИТЫ ОТДЕЛЬНЫХ ГРУПП

			//Признаки заполнения группы реквизитов "ТерриториальныеУсловия"
			УказаныТерриториальныеУсловия = НЕ ПустаяСтрока(Запись.ТерриториальныеУсловияКод);
			УказанРК = НЕ (Запись.РайонныйКоэффициент = 0);
			ЗаданаГруппаТерриториальныеУсловия = УказаныТерриториальныеУсловия или УказанРК;

			//Признаки заполнения реквизитов группы "Особые условия труда"
			УказанКодПозицииСписка = НЕ ПустаяСтрока(Запись.КодПозицииСпискаКод);
			УказаныОсобыеУсловияТруда = НЕ ПустаяСтрока(Запись.ОсобыеУсловияТрудаКод);
			ЗаданаГруппаУсловияТруда = УказаныОсобыеУсловияТруда;

			//Признаки заполнения реквизитов группы "Исчисляемый стаж"
			УказаноОснованиеИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ОснованиеИсчисляемогоСтажаКод);
			УказанТретийПараметрИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ТретийПараметрИсчисляемогоСтажа);
			ЗаданаГруппаИсчисляемыйСтаж = УказаноОснованиеИсчисляемогоСтажа ИЛИ УказанТретийПараметрИсчисляемогоСтажа;

			//Признаки заполнения реквизитов группы "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ"
			УказанПараметрИсчисляемогоСтажа0 = НЕ (Запись.НулевойПараметрИсчисляемогоСтажа = 0); 
			УказанПараметрИсчисляемогоСтажа1 = НЕ (Запись.ПервыйПараметрИсчисляемогоСтажа = 0); 
			УказанПараметрИсчисляемогоСтажа2 = НЕ (Запись.ВторойПараметрИсчисляемогоСтажа = 0); 
			ЗаданаГруппаФОВ = УказанПараметрИсчисляемогоСтажа0 ИЛИ УказанПараметрИсчисляемогоСтажа1 ИЛИ УказанПараметрИсчисляемогоСтажа2;

			//Признаки заполнения реквизитов группы "ВыслугаЛет"
			УказаноОснованиеВыслугиЛет = НЕ ПустаяСтрока(Запись.ОснованиеВыслугиЛетКод);
			ЗаданаГруппаВыслугаЛет = УказаноОснованиеВыслугиЛет;

			//ПРОВЕРКА ЗАПИСЕЙ С ВИДОМ ДЕЯТЕЛЬНОСТИ, ОТЛИЧНЫМ ОТ РАБОТА

			Если Запись.ВидДеятельности <> Справочники.ВидыОбщественноПолезнойДеятельности.РАБОТА тогда
				Если ЗаданаГруппаТерриториальныеУсловия ИЛИ ЗаданаГруппаУсловияТруда ИЛИ ЗаданаГруппаИсчисляемыйСтаж ИЛИ ЗаданаГруппаФОВ
					ИЛИ ЗаданаГруппаФОВ ИЛИ ЗаданаГруппаВыслугаЛет тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Для записей с видом деятельности, отличным от РАБОТА, должен быть указан только период!", ТекущаяОсновнаяЗапись);
				КонецЕсли;

				Если НЕ ЭтоОсновнаяЗапись тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Дополнительные записи для видов деяетльности, отличных от РАБОТА, недопустимы!", ТекущаяОсновнаяЗапись);
				КонецЕсли;
			КонецЕсли;


			//  ПРОВЕРКА НА ДОПУСТИМЫЕ СОЧЕТАНИЯ МЕЖДУ ГРУППАМИ  

			Если  НЕ ЭтоОсновнаяЗапись тогда
				СЗВК_ВыполнитьПроверкуДополнительнойЗаписи(Запись, ТекущаяОсновнаяЗапись, ТаблицаПлохихЗаписей);
			КонецЕсли;

			// ПРОВЕРКА ОСНОВНЫХ И ДОПОЛНИТЕЛЬНЫХ ЗАПИСЕЙ НА ДУБЛИ ЗНАЧЕНИЙ РЕКВИЗИТОВ

			Если ЗаданаГруппаТерриториальныеУсловия тогда
				ПредставлениеЗначения = ""+ СОКРЛП(Запись.ТерриториальныеУсловияКод)+", "+Запись.РайонныйКоэффициент;
				Если СписокТерриториальныеУсловияЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанные в дополнительной записи территориальные условия "+ПредставлениеЗначения+" не должны повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
				Иначе	
					СписокТерриториальныеУсловияЗаписи.Добавить(ПредставлениеЗначения);
				КонецЕсли;
			КонецЕсли;

			Если УказаныОсобыеУсловияТруда тогда
				ПредставлениеЗначения = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
				Если СписокУсловияТрудаЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код условий труда "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
				Иначе	
					СписокУсловияТрудаЗаписи.Добавить(ПредставлениеЗначения);
				КонецЕсли;
			КонецЕсли;

			Если УказаноОснованиеВыслугиЛет тогда
				ПредставлениеЗначения = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
				Если СписокВыслугаЛетЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код выслуги лет "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
				Иначе	
					СписокВыслугаЛетЗаписи.Добавить(ПредставлениеЗначения);
				КонецЕсли;
			КонецЕсли;


			//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "ТерриториальныеУсловия"

			Если УказаныТерриториальныеУсловия тогда
				Если (Запись.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКС)или(Запись.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКС) тогда
					Если НЕ УказанРК тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Для территориальных условий РКС или МКС должен быть указан районный коэффициент!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
				Иначе
					Если УказанРК тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Для территориальных условий, отличных от РКС и МКС, районный коэффициент указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если (УказанРК) И НЕ(Запись.РайонныйКоэффициент >= 1.01 И Запись.РайонныйКоэффициент <= 2.00) тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Районный коэффициент должен быть в диапазоне от 1.01 до 2.00!", ТекущаяОсновнаяЗапись);
			КонецЕсли;

			//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "Особые условия труда"

			КПС = СокрЛП(Запись.КодПозицииСпискаКод);

			//Определим, к какому списку принадлежит код позиции
			НазваниеСписка ="";
			Если УказанКодПозицииСписка тогда 
				Если НЕ УказаныОсобыеУсловияТруда тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Код позиции списка не может указываться без указания кода особых условий труда!", ТекущаяОсновнаяЗапись);
				КонецЕсли;

				ДлинаКПС = СтрДлина(КПС);

				Если (ДлинаКПС=8)или(ДлинаКПС=14) тогда

					Первые2СимволаКПС = Лев(КПС,2);
					Если (Первые2СимволаКПС = "10")или(Первые2СимволаКПС = "11")или(Первые2СимволаКПС = "12") тогда
						НазваниеСписка = "Список№1";
					ИначеЕсли (Первые2СимволаКПС >= "20")и(Первые2СимволаКПС <= "23") тогда
						НазваниеСписка = "Список№2";
					Иначе	
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный код позиции списка вредных профессий!", ТекущаяОсновнаяЗапись);
					КонецЕсли;

				ИначеЕсли (ДлинаКПС=5) тогда
					НазваниеСписка = "ПрочиеСписки";
				Иначе	
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Длина кода позиции списка должна быть равна либо 5, либо 8, либо 14 символам!", ТекущаяОсновнаяЗапись);
				КонецЕсли;
			КонецЕсли;//УказанКодПозицииСписка

			Если УказаныОсобыеУсловияТруда тогда

				//Проверки на возможные коды списков для конкретных условий труда

				КодОсобыхУсловийТруда = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
				Первые8СимволовКПС = Лев(КПС,8);
				НачалоСообщения = "Для особых условий труда с кодом " + КодОсобыхУсловийТруда;

				Если Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12А тогда
					Если (НазваниеСписка <> "Список№1") тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " должен быть указан код позиции Списка №1!", ТекущаяОсновнаяЗапись);
					КонецЕсли;

				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12Б тогда

					Если (НЕ УказанКодПозицииСписка) тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен быть указан код позиции Списка №1 или Списка №2!", ТекущаяОсновнаяЗапись);
					КонецЕсли;

					Если (НазваниеСписка = "Список№1") тогда
						Если (Первые8СимволовКПС <> "1010300Б")и(Первые8СимволовКПС <> "1010100Г")и(Первые8СимволовКПС <> "1010100Д")  тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
					ИначеЕсли (НазваниеСписка <> "Список№2") тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
					КонецЕсли;

				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12Г тогда
					Если НЕ ((НЕ УказанКодПозицииСписка)или(НазваниеСписка="ПрочиеСписки")) тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка должен быть либо пустым либо принадлежать списку по текстильной промышленности!", ТекущаяОсновнаяЗапись);
					КонецЕсли;

				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12Д тогда
					Если НЕ ((НЕ УказанКодПозицииСписка)или(НазваниеСписка="ПрочиеСписки")) тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка должен быть либо пустым либо принадлежать списку железнодорожников!", ТекущаяОсновнаяЗапись);
					КонецЕсли;

				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12Ж тогда
					Если НЕ ((НЕ УказанКодПозицииСписка)или(НазваниеСписка="ПрочиеСписки")) тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка должен быть либо пустым либо принадлежать списку лесозаготовителей!", ТекущаяОсновнаяЗапись);
					КонецЕсли;

				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12М тогда
					Если НЕ ((НЕ УказанКодПозицииСписка)или(НазваниеСписка="ПрочиеСписки")) тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка должен быть либо пустым либо принадлежать списку по работе с осужденными!", ТекущаяОсновнаяЗапись);
					КонецЕсли;

				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12О тогда
					Если НЕ ((НЕ УказанКодПозицииСписка)или(НазваниеСписка="ПрочиеСписки")) тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка должен быть либо пустым либо принадлежать списку должностей противопожарной службы!", ТекущаяОсновнаяЗапись);
					КонецЕсли;

				Иначе
					//Для остальных кодов условий труда КПС указываться не должен
					Если УказанКодПозицииСписка тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;//УказаныОсобыеУсловияТруда

			//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Выслуга лет"

			УказанПараметр1 = НЕ (Запись.ПервыйПараметрВыслугиЛет = 0);
			УказанПараметр2 = НЕ (Запись.ВторойПараметрВыслугиЛет = 0);
			УказанПараметр3 = НЕ (Запись.ТретийПараметрВыслугиЛет = 0);
			ПараметрыУказаны = (УказанПараметр1) ИЛИ (УказанПараметр2) ИЛИ (УказанПараметр3);

			Если УказаноОснованиеВыслугиЛет Тогда

				КодОснования = СокрЛП(Запись.ОснованиеВыслугиЛетКод);
				НачалоСообщения = "Для основания выслуги лет " + КодОснования;

				УказанТолькоТретийПараметр = (НЕ УказанПараметр1) И (НЕ УказанПараметр2) И (УказанПараметр3);

				//Медицинские работники
				Если (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЗП81СМ) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЗП81ГД)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ХИРУРСМ)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ХИРУРГД) тогда

					Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода < Дата('19991101') тогда
						//до 1 ноября 1999 г
						Если ПараметрыУказаны тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " до 01.11.1999 года параметры 1-3 указываться не должны!", ТекущаяОсновнаяЗапись);
						КонецЕсли;

					Иначе//после 1 ноября 1999 г
						Если НЕ ((Запись.ТретийПараметрВыслугиЛет > 0) И (Запись.ТретийПараметрВыслугиЛет <= 1)) тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " после 01.11.1999 третий параметр должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись);
						ИначеЕсли НЕ УказанТолькоТретийПараметр тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " после 01.11.1999 должен указываться только третий параметр!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
					КонецЕсли;

					//Педагогические работники	
				ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЗП80ПД тогда

					Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода < Дата('20000901') тогда
						//до 1 сентября 2000г
						Если  ПараметрыУказаны тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " до 01.09.2000 года параметры 1-3 указываться не должны!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
					Иначе//после 1 сентября 2000г
						Если УказанПараметр2 тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " после 01.09.2000 второй параметр указываться не должен!", ТекущаяОсновнаяЗапись);
						ИначеЕсли НЕ ((Запись.ТретийПараметрВыслугиЛет > 0) И (Запись.ТретийПараметрВыслугиЛет <= 1)) тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " после 01.09.2000 третий параметр должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
					КонецЕсли;

				ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЗП80РК тогда

					Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода < Дата('20000901') тогда
						//до 1 сентября 2000г
						Если  ПараметрыУказаны тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " до 01.09.2000 параметры 1-3 указываться не должны!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
					Иначе//после 1 сентября 2000г
						Если (УказанПараметр2)или(УказанПараметр3) тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " после 01.09.2000 может быть указан только первый параметр!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
					КонецЕсли;

					//Летчики
				ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.САМОЛЕТ) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.СПЕЦАВ)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСИСП)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЛЕТИСП) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИНСПЕКТ)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ОПЫТИСП)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИСПКЛС1)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСМАВ)тогда

					Если  УказанПараметр3 тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;

					Если  (НЕ УказанПараметр1) И (НЕ УказанПараметр2) тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 1 и 2 должны содержать отработанное время (часы и минуты)!", ТекущаяОсновнаяЗапись);
					КонецЕслИ;

					//Парашютисты
				ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.РЕАКТИВН)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМСП)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМАПР) тогда

					//Если НЕ УказанПараметр1 тогда
					//	СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 1 должен содержать количество прыжков, подъёмов!");
					Если (УказанПараметр2) ИЛИ (УказанПараметр3) тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 2 и 3 указываться не должны!", ТекущаяОсновнаяЗапись);
					КонецЕсли;

					//Управление воздушным движением и  инженерно-технический состав 	
				ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.УВД)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТС) тогда

					Если  УказанПараметр3 тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;

					//Если  (НЕ УказанПараметр1) И (НЕ УказанПараметр2) тогда
					//	СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 1 и 2 должны содержать отработанное время (месяцы и дни)!");
					//КонецЕсли;	

					//Прочие коды выслуги лет	
				Иначе
					Если  ПараметрыУказаны тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры выслуги лет 1,2,3 указываться не должны!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ПараметрыУказаны тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись," Параметры выслуги лет 1,2,3 без указания основания выслуги лет указываться не должны!", ТекущаяОсновнаяЗапись);
				КонецЕсли;
			КонецЕсли;

			//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Исчисляемый стаж"  (Основание + Третий параметр)

			Если УказанТретийПараметрИсчисляемогоСтажа тогда
				Если (Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕТИ") И (Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕКРЕТ") тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Третий параметр исчисляемого стажа должен содержать значение ДЕТИ или ДЕКРЕТ!", ТекущаяОсновнаяЗапись);
				Иначе
					Если (УказаноОснованиеИсчисляемогоСтажа) ИЛИ (ЗаданаГруппаФОВ) ИЛИ (УказаноОснованиеВыслугиЛет)  тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании третьего параметра исчисляемого стажа следующие группы реквизитов должны быть пустыми:		
						| Исчисляемый стаж: основание, Фактически отработанное время, Выслуга лет!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					Если (Запись.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ") И ((ЗаданаГруппаУсловияТруда)ИЛИ(ЗаданаГруппаТерриториальныеУсловия)) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в третьем параметре исчисляемого стажа значения ДЕТИ группы реквизитов 
						|""Условия труда, Территориальные условия"" указываться не должны!", ТекущаяОсновнаяЗапись);
					КонецЕсли; 
				КонецЕсли;	 
			КонецЕсли;	 

			Если Запись.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.СЕЗОН тогда
				Если СписокСезонныхГодов.НайтиПоЗначению(Год(Запись.ДатаНачалаПериода)) = Неопределено тогда
					СписокСезонныхГодов.Добавить(Год(Запись.ДатаНачалаПериода));
				Иначе
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Основание исчисляемого стажа СЕЗОН в течение календарного года может указываться не более одного раза!", ТекущаяОсновнаяЗапись);
				КонецЕсли;	 
			КонецЕсли;	

			//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ" (ПАРАМЕТРЫ 0,1,2 ИСЧИСЛЯЕМОГО СТАЖА)   

			Если ЗаданаГруппаФОВ тогда
				Если (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеИсчисляемогоСтажа)
					И (НЕ ЗаданаГруппаТерриториальныеУсловия)  тогда
					СтрОшибка = " Параметры 0,1,2 исчисляемого стажа должны указываться только при заполнении других групп реквизитов"
					+(Символы.ПС + " (Территориальные условия, Условия труда, Исчисляемый стаж: основание)!");
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
				КонецЕсли;	

				Если Запись.ОснованиеИсчисляемогоСтажа	<>	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ тогда

					Если Запись.ПервыйПараметрИсчисляемогоСтажа > 11 тогда
						СтрОшибка = "Первый параметр исчисляемого стажа (Месяцы) не должен быть больше 11!";
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
					КонецЕсли;	 	
					Если Запись.ВторойПараметрИсчисляемогоСтажа > 30 тогда
						СтрОшибка = "Второй параметр исчисляемого стажа (Дни) не должен быть больше 30!";
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
					КонецЕсли;	 	

					Лет = 0;
					Месяцев = 0;
					Дней = 0;
					ПолучитьСтажЗаПериод(ТекущаяОсновнаяЗапись.ДатаОкончанияПериода,	ТекущаяОсновнаяЗапись.ДатаНачалаПериода, Лет,	Месяцев, Дней);			
					ПолучитьПриведенныйСтаж(Лет,Месяцев,Дней);
					КалендарноеВремя = Лет*12*30+Месяцев*30+Дней;
					ФОВДляСравнения = Запись.НулевойПараметрИсчисляемогоСтажа *12*30 + Запись.ПервыйПараметрИсчисляемогоСтажа *30 + Запись.ВторойПараметрИсчисляемогоСтажа; 

					Если (ФОВДляСравнения > КалендарноеВремя) тогда
						СтрОшибка = "Указанное фактически-отработаннное время превышает календарное время!";
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
					КонецЕсли;	
				КонецЕсли;	 

			КонецЕсли;	 

			//  ПОДГОТОВКА К СЛЕДУЮЩЕЙ ИТЕРАЦИИ  

			//Запомним для следующей итерации
			ПредыдущаяОрганизация = Запись.Организация;
			ПредыдущийВидДеятельности = Запись.ВидДеятельности;
			ПредыдущийНомерПериодаДеятельности= Запись.НомерПериодаТрудовойДеятельности;
			ПредыдущийНомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
			ПредыдущийНомерДополнительнойЗаписи = Запись.НомерДополнительнойЗаписи;

		КонецЦикла;//Цикл по записям о стаже текущего физлица


	КонецЦикла;//Цикл по физлицам

	СЗВК_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(Новый Структура("МассивФизлиц", МассивФизлиц), ТаблицаПлохихЗаписей);

	Если ТаблицаПлохихЗаписей.Количество() > 0 тогда
		// Вывод ошибок
		ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, "При проверке набора записей о стаже");
		Возврат Ложь
	Иначе	
		Возврат Истина;
	КонецЕсли;
КонецФункции	 

//Выполняет проверку правильности заполнения строк стажа
Функция СЗВК_ПроверитьНаборСведенийДляОценкиПенсионныхПрав(ИнициаторВызова, МассивФизЛиц, РезультатВыборкиЗаписей = "") Экспорт

	Запрос = Новый Запрос;

	Если ТипЗнч(ИнициаторВызова) = Тип("ДокументСсылка.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК") тогда

		Запрос.УстановитьПараметр("ДокументСсылка" , ИнициаторВызова);

		Запрос.Текст ="ВЫБРАТЬ
		|	СведенияСЗВКРаботники.ФизЛицо КАК ФизЛицо,
		|	СведенияСЗВКРаботники.НомерСтроки,
		|	СведенияДляОценкиПенсионныхПравСЗВК.НомерЗаписи,
		|	СведенияДляОценкиПенсионныхПравСЗВК.ВидСтажа,
		|	СведенияДляОценкиПенсионныхПравСЗВК.КодСтажа,
		|	СведенияДляОценкиПенсионныхПравСЗВК.КодСтажа.Код КАК КодСтажаКод,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Лет,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Месяцев,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Дней
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК.РаботникиОрганизации КАК СведенияСЗВКРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияДляОценкиПенсионныхПравСЗВК КАК СведенияДляОценкиПенсионныхПравСЗВК
		|		ПО СведенияСЗВКРаботники.ФизЛицо = СведенияДляОценкиПенсионныхПравСЗВК.ФизЛицо
		|
		|ГДЕ
		|	СведенияСЗВКРаботники.Ссылка = &ДокументСсылка
		|";

	Иначе

		Запрос.УстановитьПараметр("МассивФизЛиц",МассивФизЛиц);

		Запрос.Текст ="ВЫБРАТЬ
		|	СведенияДляОценкиПенсионныхПравСЗВК.ФизЛицо КАК ФизЛицо,
		|	СведенияДляОценкиПенсионныхПравСЗВК.НомерЗаписи,
		|	СведенияДляОценкиПенсионныхПравСЗВК.ВидСтажа,
		|	СведенияДляОценкиПенсионныхПравСЗВК.КодСтажа,
		|	СведенияДляОценкиПенсионныхПравСЗВК.КодСтажа.Код КАК КодСтажаКод,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Лет,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Месяцев,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Дней
		|ИЗ
		|	РегистрСведений.СведенияДляОценкиПенсионныхПравСЗВК КАК СведенияДляОценкиПенсионныхПравСЗВК
		|
		|ГДЕ
		|	СведенияДляОценкиПенсионныхПравСЗВК.ФизЛицо В(&МассивФизЛиц)";

	КонецЕсли;

	РезультатВыборкиЗаписей = Запрос.Выполнить(); 			  
	//ТаблицаЗаписей =  РезультатВыборкиЗаписей.Выгрузить();
	ВыборкаЗаписей = РезультатВыборкиЗаписей.Выбрать();

	//Для имеющихся физлиц запросим записи о стаже
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивФизЛиц",МассивФизЛиц);

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиОСтажеДляСЗВК.ФизЛицо,
	|	ЗаписиОСтажеДляСЗВК.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ЗаписиОСтажеДляСЗВК.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтажеДляСЗВК.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет
	|ИЗ
	|	РегистрСведений.ЗаписиОСтажеДляСЗВК КАК ЗаписиОСтажеДляСЗВК
	|
	|ГДЕ
	|	ЗаписиОСтажеДляСЗВК.ФизЛицо В(&МассивФизЛиц)";
	ТаблицаЗаписейОСтаже = Запрос.Выполнить().Выгрузить();
	ТаблицаЗаписейОСтаже.Индексы.Добавить("ФизЛицо,ТерриториальныеУсловия");
	ТаблицаЗаписейОСтаже.Индексы.Добавить("ФизЛицо,ОсобыеУсловияТруда");
	ТаблицаЗаписейОСтаже.Индексы.Добавить("ФизЛицо,ОснованиеВыслугиЛет");

	// Таблица собщений об ошибках
	ТаблицаПлохихЗаписей = Новый ТаблицаЗначений;
	ТаблицаПлохихЗаписей.Колонки.Добавить("Запись");
	ТаблицаПлохихЗаписей.Колонки.Добавить("Физлицо");
	ТаблицаПлохихЗаписей.Колонки.Добавить("ОписаниеОшибки");

	//Проверку правильности заполнения записей надо выполнять отдельно для каждого физлица
	Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("ФизЛицо") цикл

		Если ВыборкаЗаписей.НомерЗаписи = NULL тогда
			Продолжить;//Если записей нет, то пропустим физлицо
		КонецЕсли;	

		ФизЛицо = ВыборкаЗаписей.ФизЛицо;

		КоличествоЗаписейОбОбщемТрудовомСтаже =0; 
		КоличествоЗаписейТЕРР =0; 
		КоличествоЗаписейОСОБ =0; 
		КоличествоЗаписейВЫСЛ =0; 
		СписокПроверенныхКодовСтажа = Новый СписокЗначений;

		//Для Каждого Запись Из НайдСтрокиСведений цикл
		Пока ВыборкаЗаписей.Следующий() цикл

			Запись = ВыборкаЗаписей;

			НачалоСообщения = "";

			Если ПустаяСтрока(Строка(Запись.ВидСтажа)) тогда
				СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Не указан вид стажа!");
				Продолжить;
			КонецЕсли;	 

			Если (Запись.Лет + Запись.Месяцев + Запись.Дней) = 0 тогда
				СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Значения реквизитов ""Лет, Месяцев, Дней"" не должны одновременно равняться нулю!");
			КонецЕсли;

			Если Запись.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ОбщийТрудовойСтаж тогда

				//Проверка записей об общем стаже
				КоличествоЗаписейОбОбщемТрудовомСтаже = КоличествоЗаписейОбОбщемТрудовомСтаже + 1;
				Если КоличествоЗаписейОбОбщемТрудовомСтаже > 1 тогда
					СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Записей об общем стаже должно быть не больше одной!");
				КонецЕсли;	 

			Иначе

				//Проверка кода стажа 

				Если Запись.КодСтажа = Неопределено тогда

					СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Не указан код стажа!");

				Иначе//Код стажа заполнен

					КлючПоискаДублей = ""+Запись.ВидСтажа+СокрЛП(Запись.КодСтажаКод);
					Если СписокПроверенныхКодовСтажа.НайтиПоЗначению(КлючПоискаДублей) <> Неопределено тогда
						СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Указанный вид стажа """+Запись.ВидСтажа+""" и код стажа """+СокрЛП(Запись.КодСтажаКод) +""" не должны повторяться!");
					Иначе	
						СписокПроверенныхКодовСтажа.Добавить(КлючПоискаДублей);
					КонецЕсли;	
					СтруктураПоискаСтрокСтажа = Новый Структура;
					СтруктураПоискаСтрокСтажа.Вставить("ФизЛицо",ФизЛицо);

					//Проверка записей ТЕРР
					Если Запись.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ТерриториальныеУсловия тогда	

						Если ТипЗнч(Запись.КодСтажа)<>Тип("СправочникСсылка.ТерриториальныеУсловия") тогда
							СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Указанный код территориального стажа не соответствует классификатору!");
						КонецЕсли;	 

						КоличествоЗаписейТЕРР = КоличествоЗаписейТЕРР +1;
						Если КоличествоЗаписейТЕРР > 10 тогда
							СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Количество записей с расчетом стажа по территориальным условиям должно быть не более 10!");
						КонецЕсли;	 

						СтруктураПоискаСтрокСтажа.Вставить("ТерриториальныеУсловия",Запись.КодСтажа);

					ИначеЕсли Запись.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ОсобыеУсловияТруда тогда	

						//Проверка записей ОСОБ
						Если ТипЗнч(Запись.КодСтажа)<>Тип("СправочникСсылка.ОсобыеУсловияТруда") тогда
							СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Указанный код условий труда не соответствует классификатору!");
						КонецЕсли;	 

						КоличествоЗаписейОСОБ = КоличествоЗаписейОСОБ +1;
						Если КоличествоЗаписейОСОБ > 10 тогда
							СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Количество записей с расчетом стажа по особым условиям труда должно быть не более 10!");
						КонецЕсли;	 

						СтруктураПоискаСтрокСтажа.Вставить("ОсобыеУсловияТруда",Запись.КодСтажа);
					ИначеЕсли Запись.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ВыслугаЛет тогда	

						//Проверка записей ВЫСЛ
						Если ТипЗнч(Запись.КодСтажа)<>Тип("СправочникСсылка.ОснованияВыслугиЛет") тогда
							СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Указанный код выслуги лет не соответствует классификатору!");
						КонецЕсли;	 

						КоличествоЗаписейВЫСЛ = КоличествоЗаписейВЫСЛ +1;
						Если КоличествоЗаписейВЫСЛ > 10 тогда
							СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Количество записей с расчетом стажа по выслуге лет должно быть не более 10!");
						КонецЕсли;	 

						СтруктураПоискаСтрокСтажа.Вставить("ОснованиеВыслугиЛет",Запись.КодСтажа);
					КонецЕсли;	

					НайдМассивСтрокСтажа = ТаблицаЗаписейОСтаже.НайтиСтроки(СтруктураПоискаСтрокСтажа);

					Если НайдМассивСтрокСтажа.Количество() = 0 тогда
						СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Указанный код стажа """+Запись.КодСтажа +""" не указан ни в одном из периодов трудовой деятельности!");
					КонецЕсли;	 

				КонецЕсли;	 

			КонецЕсли;	 

		КонецЦикла;//По записям набора
	КонецЦикла;	//По ФизЛицам

	Если ТаблицаПлохихЗаписей.Количество() > 0 тогда
		// Вывод ошибок
		ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, "При проверке сведений для оценки пенсионных прав");
		Возврат Ложь;
	Иначе	
		Возврат Истина;
	КонецЕсли;

КонецФункции	 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ФОРМ СЗВ-4

//Формирует строку-заголовок для сообщения об ошибке, найденной в записи о стаже
Функция СЗВ4_СформироватьЗаголовокОшибкиЗаписиОСтаже(Запись, ОсновнаяЗапись) Экспорт 
	
	ЗаголовокСообщения = "Организация: "+СокрЛП(Запись.ОбособленноеПодразделение);
    ЗаголовокСообщения = ЗаголовокСообщения + ", Период: "+Формат(ОсновнаяЗапись.ДатаНачалаПериода,"ДФ='дд.ММ.гггг'")+"-"+Формат(ОсновнаяЗапись.ДатаОкончанияПериода,"ДФ='дд.ММ.гггг'");

	Если Запись.НомерДополнительнойЗаписи <> 0 тогда
		ЗаголовокСообщения = ЗаголовокСообщения + ", Дополнительная запись № "+Запись.НомерДополнительнойЗаписи;
	КонецЕсли;	

	ЗаголовокСообщения = ЗаголовокСообщения + ":"+Символы.ПС;

	Возврат ЗаголовокСообщения;
	
КонецФункции	 

//Добавляет новую строку в таблицу плохих записей стажа
Процедура СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Запись,ОписаниеОшибки,ОсновнаяЗапись = "")

	Если ОсновнаяЗапись = "" Тогда
		ОсновнаяЗапись = Запись;
	КонецЕсли;  
	ЗаголовокОшибки = СЗВ4_СформироватьЗаголовокОшибкиЗаписиОСтаже(Запись,ОсновнаяЗапись);

	//Для строк сообщения сделаем отступ
	Стр = "";
	МассивСтрок =  ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ОписаниеОшибки,Символы.ПС);
	Для Каждого Строка из Массивстрок цикл
		Стр = Стр + "    " + Строка + Символы.ПС ;
	КонецЦикла;	
	ПолноеОписаниеОшибки = ЗаголовокОшибки + Стр;

	НоваяСтрока = ТаблицаПлохихЗаписей.Добавить();
	НоваяСтрока.ФизЛицо = Запись.ФизЛицо;
	НоваяСтрока.ОписаниеОшибки = ПолноеОписаниеОшибки;

КонецПроцедуры 

//Выполняет проверку дополнительной записи стажа на допустимось значений реквизитов
Функция СЗВ4_ВыполнитьПроверкуДополнительнойЗаписиСтажа(Запись, ОсновнаяЗапись, ТаблицаПлохихЗаписей)

	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОсобыеУсловияТруда) 
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа) тогда
		СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дополнительная запись может вводиться только при заполнении хотя бы одного из реквизитов основной записи:
		| 		Особые условия труда , Выслуга лет, Территориальные условия, Основание исчисляемого стажа!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	 

	Если ЗначениеЗаполнено(Запись.ОснованиеИсчисляемогоСтажа) тогда
		СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи о стаже не может указываться основание исчисляемого стажа!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	

	//Проверка на обязательный ввод одной из льгот
	УказаныТерриториальныеУсловия = ЗначениеЗаполнено(Запись.ТерриториальныеУсловия);

	УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(Запись.ОсобыеУсловияТруда);
	УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(Запись.ОснованиеВыслугиЛет);

	Если (НЕ УказаныТерриториальныеУсловия) И (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеВыслугиЛет) тогда
		СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи должна быть задана либо территориальная льгота, либо особые условия труда, либо выслуга лет!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	 

	//Проверка на ввод территориальной льготы
	Если УказаныТерриториальныеУсловия тогда
		Если  НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия) тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи территориальная льгота может быть указана только при указании территориальной льготы в основной записи!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;	

	//Проверка на ввод условий труда
	Если УказаныОсобыеУсловияТруда тогда
		УсловияТрудаЗаписи = Запись.ОсобыеУсловияТруда;
		Если (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_1)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_2)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_7) тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда должен принимать значение 27-1, 27-2 или 27-7!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;

		Если (УсловияТрудаЗаписи = Справочники.ОсобыеУсловияТруда.Ст27_7) 
			И (ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа <> Справочники.ОснованияИсчисляемогоТрудовогоСтажа.УИК104) тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда 27-7 может быть указан" 
			+Символы.ПС+"только в случае указания в основной записи кода исчисляемого стажа УИК104!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;

	//Проверка на ввод основания выслуги лет
	КодВыслугиЛетЗаписи = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);

	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет) тогда
		Если Найти(",,28-СМ,28-ГД,28-СМХР,28-ГДХР,",","+КодВыслугиЛетЗаписи+",") = 0 тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Если в основной записи не указан код выслуги лет, то в дополнительной записи" 
			+Символы.ПС+"основание выслуги лет должно быть пустым или указаны коды 28-СМ,28-ГД,28-СМХР или 28-ГДХР!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	
	Иначе//В основной записи код выслуги указан

		МассивПравилНаКодыВыслугиДопЗаписей =  Новый Массив;
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",ЛЕТИСП,САМОЛЕТ,СПЕЦАВ,ОПЫТИСП,ИСПКЛС1,ИТСМАВ,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",НОРМАПР,РЕАКТИВН,НОРМСП,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",,28-СМ,28-ГД,28-СМХР,28-ГДХР,");//пустой код допустим

		КодВыслугиЛетОсновнойЗаписи = СОКРЛП(ОсновнаяЗапись.ОснованиеВыслугиЛетКод);

		ПроверочнаяСтрокаКодов = "";
		Для Каждого СтрокаКодов из МассивПравилНаКодыВыслугиДопЗаписей Цикл 
			Если Найти(СтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи+",") тогда
				ПроверочнаяСтрокаКодов = СтрокаКодов;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	

		Если ПроверочнаяСтрокаКодов = "" тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода выслуги лет "+ КодВыслугиЛетОсновнойЗаписи
			+Символы.ПС+"в дополнительной записи код выслуги указываться не может!",ОсновнаяЗапись);
			Возврат Ложь;
		Иначе
			//Код выслуги основной записи исключим из списка возможных значений
			ПроверочнаяСтрокаКодов = СтрЗаменить(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи,"");

			Если НЕ Найти(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетЗаписи+",") тогда
				СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода выслуги лет "+ КодВыслугиЛетОсновнойЗаписи+" в дополнительной записи"
				+Символы.ПС+"могут быть указаны только следующие коды выслуги: "+Сред(ПроверочнаяСтрокаКодов,2),ОсновнаяЗапись);
				Возврат Ложь;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 

	Возврат Истина;
КонецФункции	 

//Выполняет проверку записи стажа на допустимось значений реквизитов между группами
Функция СЗВ4_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(ИнициаторВызова, СтруктураПараметров, ТаблицаПлохихЗаписей) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ИнициаторВызова) = Тип("ДокументСсылка.СведенияОТрудовомСтажеИЗаработкеСЗВ4") тогда
		
		Запрос.УстановитьПараметр("ДокументСсылка" , ИнициаторВызова);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
		|	Записи.ФизЛицо КАК ФизЛицо,
		|	Записи.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Записи.Год КАК Год,
		|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	Записи.ОсобыеУсловияТруда.Код КАК УказанныйКодУсловийТруда,
		|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
		|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
		|	Записи.ОснованиеВыслугиЛет.Код КАК УказанныйКодОснованияВыслугиЛет,
		|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
		|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
		|	Сочетания.НомерПравила КАК НомерПравила,
		|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
		|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
		|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
		|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
		|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
		|	Сочетания.ФорматФОВ КАК ФорматФОВ
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК ТЧРаботникиОрг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК Записи
		|		ПО Записи.ФизЛицо = ТЧРаботникиОрг.ФизЛицо
		|			И Записи.Год = ТЧРаботникиОрг.Ссылка.Год
		|			И Записи.ОбособленноеПодразделение = ТЧРаботникиОрг.Ссылка.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
		|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
		|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
		|					И Сочетания.КодУсловийТруда = """")
		|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
		|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
		|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
		|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияВыслугиЛет = """")
		|			И (Сочетания.ТипШаблонаКПС = ""Любой""
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
		|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
		|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
		|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
		|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
		|ГДЕ
		|	ТЧРаботникиОрг.Ссылка = &ДокументСсылка
		|	И ((НЕ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL )
		|			ИЛИ (НЕ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	Год,
		|	НомерСтроки,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
					   
		ИмяГруппировкиФизЛицо_НомерСтроки = "НомерСтроки";
					   
	Иначе
		
		Запрос.УстановитьПараметр("МассивФизлиц",СтруктураПараметров.МассивФизлиц);
		Запрос.УстановитьПараметр("МассивЛет", СтруктураПараметров.МассивЛет);
		Запрос.УстановитьПараметр("МассивОбособленныхПодразделений", СтруктураПараметров.МассивОбособленныхПодразделений);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Записи.ФизЛицо КАК ФизЛицо,
		|	Записи.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Записи.Год КАК Год,
		|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	Записи.ОсобыеУсловияТруда.Код КАК УказанныйКодУсловийТруда,
		|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
		|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
		|	Записи.ОснованиеВыслугиЛет.Код КАК УказанныйКодОснованияВыслугиЛет,
		|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
		|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
		|	Сочетания.НомерПравила КАК НомерПравила,
		|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
		|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
		|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
		|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
		|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
		|	Сочетания.ФорматФОВ КАК ФорматФОВ
		|ИЗ
		|	РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК Записи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
		|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
		|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
		|					И Сочетания.КодУсловийТруда = """")
		|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
		|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
		|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
		|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияВыслугиЛет = """")
		|			И (Сочетания.ТипШаблонаКПС = ""Любой""
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
		|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
		|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
		|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
		|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
		|ГДЕ
		|	Записи.Год В(&МассивЛет)
		|	И Записи.ОбособленноеПодразделение В(&МассивОбособленныхПодразделений)
		|	И Записи.ФизЛицо В(&МассивФизлиц)
		|	И ((НЕ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL )
		|			ИЛИ (НЕ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	Год,
		|	ФизЛицо,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "ФизЛицо";
		
	КонецЕсли;	   
		
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.СледующийПоЗначениюПоля("ОбособленноеПодразделение") цикл
		Пока Выборка.СледующийПоЗначениюПоля("Год") цикл
			Пока Выборка.СледующийПоЗначениюПоля(ИмяГруппировкиФизЛицо_НомерСтроки) цикл
				Пока Выборка.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") цикл
					Пока Выборка.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") цикл
						
						СтрокаСообщений = "Комбинация значений реквизитов:";
						СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание выслуги лет = " + Выборка.УказанныйКодОснованияВыслугиЛет;
						СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание исчисляемого стажа = " + Выборка.УказанныйКодОснованияИсчисляемогоСтажа;
						СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Особые условия труда = " + Выборка.УказанныйКодУсловийТруда;
						СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Код позиции списка = " + Выборка.УказанныйКодПозицииСписка;
						
						Если (Выборка.НомерПравила = NULL)
							ИЛИ ( СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12100000-11465" И СокрЛП(Выборка.УказанныйКодОснованияИсчисляемогоСтажа) <> "ВОДОЛАЗ") 
							ИЛИ ( СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12003000-17541" И СокрЛП(Выборка.УказанныйКодОснованияВыслугиЛет) <> "УВД") тогда
							СтрокаСообщений = СтрокаСообщений+Символы.ПС+"Не является допустимой!";
							
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
							Продолжить;
							
						КонецЕсли;	
						
						//Флаг допустимости значений реквизитов  группы "Фактически отработанное время"  
						ФОВДопустимо = Ложь;
						
						СтрокаСообщений = "Значения реквизитов группы ""Фактически отработанное время"" не соответствуют ни одному из заданных форматов:"+Символы.ПС;
						
						//Для Каждого ФорматФОВ из СписокДопустимыхФорматовФОВ цикл
						Пока Выборка.Следующий() цикл
							
							ФорматФОВ = Выборка.ФорматФОВ;
							СтрокаОшибкиФормата = "";            	
							ПрошлоПроверку = 0;
							СтрокаЗначенияПараметров = "";
							
							Для Н=1 по 2 цикл
								ФорматПараметра = Сред(ФорматФОВ,Н+1,1); 
								
								Если Н=1 тогда	
									ЗначениеПараметра = Выборка.УказанныйПервыйПараметрИсчисляемогоСтажа;
									ПсевдонимПараметра = "Месяцы";
								Иначе
									ЗначениеПараметра = Выборка.УказанныйВторойПараметрИсчисляемогоСтажа;
									ПсевдонимПараметра = "Дни";
								КонецЕсли;	
								
								ПараметрПрошелПроверку = Ложь;
								
								НачалоСообщения = "Параметр исчисляемого стажа №"+Н+"("+ПсевдонимПараметра+")";
								
								Если (ФорматПараметра = "_") тогда
									Если (ЗначениеПараметра <> 0) тогда//ПУСТОЕ
										СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения + " должен быть пустым (=0)!"+Символы.ПС;
									Иначе	
										ПараметрПрошелПроверку = ИСТИНА;
									КонецЕсли;
								ИначеЕсли (ФорматПараметра = "Г") тогда
									Если (ЗначениеПараметра > 100) тогда//ГОДЫ
										СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 100 (лет)!"+Символы.ПС;
									Иначе	
										ПараметрПрошелПроверку = ИСТИНА;
									КонецЕсли;
								ИначеЕсли (ФорматПараметра = "М") тогда 
									Если (ЗначениеПараметра > 11) тогда//МЕСЯЦЫ
										СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 11 (месяцев)!"+Символы.ПС;
									Иначе	
										ПараметрПрошелПроверку = ИСТИНА;
									КонецЕсли;
								ИначеЕсли (ФорматПараметра = "Д") тогда 
									Если (ЗначениеПараметра > 30) тогда//ДНИ
										СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 30 (дней)!"+Символы.ПС;
									Иначе	
										ПараметрПрошелПроверку = ИСТИНА;
									КонецЕсли;
								ИначеЕсли (ФорматПараметра = "ч") тогда//ЧАСЫ 
									ПараметрПрошелПроверку = ИСТИНА;
								ИначеЕсли (ФорматПараметра = "м") тогда 
									Если (ЗначениеПараметра > 59) тогда//МИНУТЫ
										СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 59 (минут)!"+Символы.ПС;
									Иначе	
										ПараметрПрошелПроверку = ИСТИНА;
									КонецЕсли;
								КонецЕсли;	 
								
								Если ПараметрПрошелПроверку тогда
									ПрошлоПроверку = ПрошлоПроверку + 1;
								КонецЕсли;	 
								
								СтрокаЗначенияПараметров = СтрокаЗначенияПараметров + ЗначениеПараметра;
							КонецЦикла;
							
							//Если формат не равен [ПУСТОЕ,ПУСТОЕ,ПУСТОЕ], то значения всех трех параметров не должны равняться 0
							Если (СокрЛП(ФорматФОВ) <> "___")и(СтрокаЗначенияПараметров="000") тогда//
								ПрошлоПроверку = 0;
								СтрокаОшибкиФормата = СтрокаОшибкиФормата + "В параметрах (Годы,Месяцы,Дни) должно быть указано отработанное время!"+Символы.ПС;
							КонецЕсли;	
							
							Если ПрошлоПроверку = 2 тогда
								ФОВДопустимо = Истина;
								Прервать;
							КонецЕсли;
							
							СтрФорматФОВ = ФорматФОВ;
							СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"_",",пустое");
							СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"ч",",часы");
							СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"м",",минуты");
							СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Г",",годы");
							СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"М",",месяцы");
							СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Д",",дни");
							СтрФорматФОВ = Сред(СтрФорматФОВ,2);//Убрали первую запятую
							
							СтрокаОшибкиФормата = "Соглано формату ["+СтрФорматФОВ+"]:"+Символы.ПС+СтрокаОшибкиФормата;            	
							СтрокаСообщений = СтрокаСообщений + СтрокаОшибкиФормата;
						КонецЦикла;	// по вариантам формата ФОВ
						
						Если НЕ ФОВДопустимо тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
						КонецЕсли;	 
						
					КонецЦикла;// По дополнительным записям	
				КонецЦикла;// По основным записям	
			КонецЦикла;// По физлицам
		КонецЦикла;// По годам	
	КонецЦикла;// По обособленым подразделениям	

КонецФункции	 

//Выполняет проверку правильности заполнения набора записей о стаже для формы СЗВ-4
// Функция в параметре РезультатВыборкиЗаписей возвращает результат запроса выборки записей стажа
Функция СЗВ4_ПроверитьНаборЗаписейОСтаже(ИнициаторВызова, СтруктураПараметров, РезультатВыборкиЗаписей = "") Экспорт
	
	ПустаяДата = Дата('00010101');
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ИнициаторВызова) = Тип("ДокументСсылка.СведенияОТрудовомСтажеИЗаработкеСЗВ4") тогда
		
		Запрос.УстановитьПараметр("ДокументСсылка",				ИнициаторВызова);
		Запрос.УстановитьПараметр("ДатаАктуальности",			СтруктураПараметров.ДатаАктуальности);
		Запрос.УстановитьПараметр("НачалоГода",					НачалоГода(СтруктураПараметров.ДатаАктуальности));
		Запрос.УстановитьПараметр("ВидАдресаДляИнформирования",	Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица);
		Запрос.УстановитьПараметр("Организация",				СтруктураПараметров.Организация);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация",		СтруктураПараметров.ГоловнаяОрганизация);
		Запрос.УстановитьПараметр("ТрудовойДоговор",			Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
		
		// В запросе кроме записей стажа выбираются данные, необходимые документу: ФИО физлиц, адреса, данные об отчислениях
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
		|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	ЗаписиОСтаже.Год КАК Год,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	ТЧРаботникиОрг.ФизЛицо КАК ФизЛицо,
		|	ТЧРаботникиОрг.ФизЛицо.Наименование КАК ФизЛицоНаименование,
		|	ТЧРаботникиОрг.ФизЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	ТЧРаботникиОрг.АдресДляИнформирования КАК АдресДляИнформирования,
		|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
		|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаСтраховуюЧастьПФР, 0) КАК НачисленоНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаНакопительнуюЧастьПФР, 0) КАК НачисленоНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.ДнейБолезни, 0) КАК ДнейБолезни,
		|	ЕСТЬNULL(СуммыВзносов.ДнейОтпускаЗаСвойСчет, 0) КАК ДнейОтпускаЗаСвойСчет,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизации.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ФизЛицоРаботаетВОрганизации
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК ТЧРаботникиОрг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
		|		ПО ЗаписиОСтаже.ФизЛицо = ТЧРаботникиОрг.ФизЛицо
		|			И ЗаписиОСтаже.Год = ТЧРаботникиОрг.Ссылка.Год
		|			И ЗаписиОСтаже.ОбособленноеПодразделение = ТЧРаботникиОрг.Ссылка.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|		&ДатаАктуальности,
		|		ФизЛицо В
		|			(ВЫБРАТЬ
		|				ТЧ.ФизЛицо
		|			ИЗ
		|				Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК ТЧ
		|			ГДЕ
		|				ТЧ.Ссылка = &ДокументСсылка)) КАК ФИОФизЛицСрезПоследних
		|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = ТЧРаботникиОрг.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыВзносовДляСЗВ4 КАК СуммыВзносов
		|		ПО ТЧРаботникиОрг.ФизЛицо = СуммыВзносов.ФизЛицо
		|			И ТЧРаботникиОрг.Ссылка.Год = СуммыВзносов.Год
		|			И ТЧРаботникиОрг.Ссылка.Организация = СуммыВзносов.ОбособленноеПодразделение
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&НачалоГода,
		|				Организация = &ГоловнаяОрганизация
		|					И Сотрудник.Физлицо В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо
		|						ИЗ
		|							Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
		|						ГДЕ
		|							СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка = &ДокументСсылка)
		|					И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизации
		|		ГДЕ
		|			ВЫБОР
		|					КОГДА &НачалоГода >= РаботникиОрганизации.ПериодЗавершения
		|							И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА РаботникиОрганизации.ПричинаИзмененияСостоянияЗавершения
		|					ИНАЧЕ РаботникиОрганизации.ПричинаИзмененияСостояния
		|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|			И ВЫБОР
		|					КОГДА &НачалоГода >= РаботникиОрганизации.ПериодЗавершения
		|							И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА РаботникиОрганизации.ОбособленноеПодразделениеЗавершения
		|					ИНАЧЕ РаботникиОрганизации.ОбособленноеПодразделение
		|				КОНЕЦ = &Организация
		|		
		|		ОБЪЕДИНИТЬ
		|		
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			РаботникиОрганизаций.Сотрудник.Физлицо
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ГДЕ
		|			РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
		|			И РаботникиОрганизаций.ОбособленноеПодразделение = &Организация
		|			И РаботникиОрганизаций.Период МЕЖДУ &НачалоГода И &ДатаАктуальности
		|			И РаботникиОрганизаций.Сотрудник.Физлицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо
		|					ИЗ
		|						Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
		|					ГДЕ
		|						СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка = &ДокументСсылка)
		|			И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|		
		|		ОБЪЕДИНИТЬ
		|		
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо
		|		ИЗ
		|			Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
		|		ГДЕ
		|			ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &ДатаАктуальности
		|			И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &НачалоГода
		|			И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
		|			И ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо
		|					ИЗ
		|						Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
		|					ГДЕ
		|						СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка = &ДокументСсылка)
		|			И ДоговорНаВыполнениеРаботСФизЛицом.Организация = &Организация) КАК РаботникиОрганизации
		|		ПО ТЧРаботникиОрг.ФизЛицо = РаботникиОрганизации.ФизЛицо
		|ГДЕ
		|	ТЧРаботникиОрг.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	Год,
		|	НомерСтроки,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "НомерСтроки";
		
		
	Иначе//Инициатором вызова является набор записей
		
		Запрос.УстановитьПараметр("МассивФизЛиц" , СтруктураПараметров.МассивФизЛиц);
		Запрос.УстановитьПараметр("МассивЛет" , СтруктураПараметров.МассивЛет);
		Запрос.УстановитьПараметр("МассивОбособленныхПодразделений" , СтруктураПараметров.МассивОбособленныхПодразделений);
		Запрос.УстановитьПараметр("ПустаяДата",						'00010101');
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
		|	ЗаписиОСтаже.Год КАК Год,
		|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет
		|ИЗ
		|	РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
		|ГДЕ
		|	ЗаписиОСтаже.ФизЛицо В(&МассивФизЛиц)
		|	И ЗаписиОСтаже.Год В(&МассивЛет)
		|	И ЗаписиОСтаже.ОбособленноеПодразделение В(&МассивОбособленныхПодразделений)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	Год,
		|	ФизЛицо,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "ФизЛицо";
	КонецЕсли;	
	
	РезультатВыборкиЗаписей = Запрос.Выполнить();
	ВыборкаЗаписей =  РезультатВыборкиЗаписей.Выбрать();
	
	ТаблицаПлохихЗаписей = Новый ТаблицаЗначений;
	ТаблицаПлохихЗаписей.Колонки.Добавить("Физлицо");
	ТаблицаПлохихЗаписей.Колонки.Добавить("ОписаниеОшибки");
	
	//Проверку правильности заполнения записей надо выполнять отдельно для каждой организации, года и физлица
	Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("ОбособленноеПодразделение") Цикл
		
		ОбособленноеПодразделение = ВыборкаЗаписей.ОбособленноеПодразделение;
		
		Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("Год") Цикл
			
			Год = ВыборкаЗаписей.Год;
			
			Пока ВыборкаЗаписей.СледующийПоЗначениюПоля(ИмяГруппировкиФизЛицо_НомерСтроки) Цикл
				
				Если ВыборкаЗаписей.НомерОсновнойЗаписи = NULL Тогда
					Продолжить;//Физлицо не имеет сведений
				КонецЕсли; 
				
				ФизЛицо = ВыборкаЗаписей.ФизЛицо;
				
				ТекущаяОсновнаяЗапись = Новый Структура("ФизЛицо, ОбособленноеПодразделение, Год, ДатаНачалаПериода, ДатаОкончанияПериода, ОсобыеУсловияТруда, ОснованиеВыслугиЛет, ТерриториальныеУсловия, ОснованиеИсчисляемогоСтажа, ОснованиеВыслугиЛетКод, НомерОсновнойЗаписи, НомерДополнительнойЗаписи");
				
				//Список значений группы реквизитов территориальные условия одной основной записи
				СписокТерриториальныеУсловияЗаписи = Новый СписокЗначений;
				
				//Список значений кодов условий труда одной основной записи
				СписокУсловияТрудаЗаписи = Новый СписокЗначений;
				
				//Список значений кодов выслуги лет основной записи
				СписокВыслугаЛетЗаписи = Новый СписокЗначений;
				
				ПредыдущийНомерОсновнойЗаписи = 0;
				ПредыдущийНомерДополнительнойЗаписи = 0;
				
				Пока ВыборкаЗаписей.Следующий() Цикл
					
					Запись = ВыборкаЗаписей;
					
					//Организация, физлицо и год должны быть заполнены обязательно
					Если Запись.ОбособленноеПодразделение.Пустая() тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указана организация (обособленное подразделение)!");
					КонецЕсли;	
					Если Запись.ФизЛицо.Пустая() тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указано физическое лицо!");
					КонецЕсли;	
					Если Запись.Год < 2002 тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Расчетный период (год) не может быть менее 2002!");
					КонецЕсли;	
					
					
					// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ ДАТ НАЧАЛА И ОКОНЧАНИЯ ПЕРИОДА
					
					//По умолчанию считаем, что запись основная
					ЭтоОсновнаяЗапись = Истина;
					
					//Проверим, возможно ли появление в текущей позиции дополнительной записи о стаже
					ДополнительнаяЗаписьВозможна = ПредыдущийНомерОсновнойЗаписи <> 0;
					
					//Проверка заполненния реквзитов "ДатаНачалаПериода" и "ДатаОкончанияПериода" 
					Если (Запись.ДатаНачалаПериода = ПустаяДата) и (Запись.ДатаОкончанияПериода = ПустаяДата) тогда
						Если ДополнительнаяЗаписьВозможна тогда
							ЭтоОсновнаяЗапись = Ложь;
						Иначе
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указаны даты начала и окончания периода!");
						КонецЕсли;	
					ИначеЕсли (Запись.ДатаНачалаПериода = ПустаяДата) тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты окончания периода необходимо указывать дату начала периода!");
					ИначеЕсли (Запись.ДатаОкончанияПериода = ПустаяДата) тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты начала периода необходимо указавать дату окончания периода!");
					Иначе//Обе даты заполнены
						
						//Дата начала периода не должна быть ранее 01.01.ГГГГ
						Если Запись.ДатаНачалаПериода < Дата(Год, 01, 01)  тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть не ранее 01.01." + Год + "!");
						КонецЕсли;	 
						
						//Дата окончания периода не должна быть позднее 31.12.ГГГГ
						Если Запись.ДатаОкончанияПериода > Дата(Год, 12, 31)  тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата окончания периода должна быть не позднее 31.12." + Год + "!");
						КонецЕсли;	 
						
						// Начало периода не должно быть позже окончания периода 
						Если Запись.ДатаНачалаПериода > Запись.ДатаОкончанияПериода тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода не должна превышать дату окончания периода!");
						КонецЕсли;
						
					КонецЕсли;	 
					
					//Проверка только для основной записи о стаже
					Если ЭтоОсновнаяЗапись тогда
						
						//Проверка на хронологический порядок записей
						Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода <> Неопределено тогда
							Если Запись.ДатаНачалаПериода <= ТекущаяОсновнаяЗапись.ДатаОкончанияПериода тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть больше даты окончания предыдущего периода!");
							КонецЕсли;	 
						КонецЕсли;
						
						//Переустановка текущей основной записи
						ТекущаяОсновнаяЗапись.ФизЛицо = ФизЛицо;
						ТекущаяОсновнаяЗапись.Год = Год;
						ТекущаяОсновнаяЗапись.ОбособленноеПодразделение = ОбособленноеПодразделение;
						ТекущаяОсновнаяЗапись.ДатаНачалаПериода = Запись.ДатаНачалаПериода;
						ТекущаяОсновнаяЗапись.ДатаОкончанияПериода = Запись.ДатаОкончанияПериода;
						ТекущаяОсновнаяЗапись.ОсобыеУсловияТруда = Запись.ОсобыеУсловияТруда;
						ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛет = Запись.ОснованиеВыслугиЛет;
						ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛетКод = Запись.ОснованиеВыслугиЛетКод;
						ТекущаяОсновнаяЗапись.ТерриториальныеУсловия = Запись.ТерриториальныеУсловия;
						ТекущаяОсновнаяЗапись.ОснованиеИсчисляемогоСтажа = Запись.ОснованиеИсчисляемогоСтажа;
						ТекущаяОсновнаяЗапись.НомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
						ТекущаяОсновнаяЗапись.НомерДополнительнойЗаписи = 0;
						
						СписокТерриториальныеУсловияЗаписи.Очистить();
						СписокУсловияТрудаЗаписи.Очистить();
						СписокВыслугаЛетЗаписи.Очистить();
					КонецЕсли;	 
					
					// ПРОВЕРКА ПРАВИЛЬНОСТИ НУМЕРАЦИИ ЗАПИСЕЙ
					
					//Проверка нумерации основных и дополнительных записей
					Если (ЭтоОсновнаяЗапись) тогда
						ОжидаемыйНомерОсновнойЗаписи = ПредыдущийНомерОсновнойЗаписи +1;
						Если (Запись.НомерОсновнойЗаписи <> ОжидаемыйНомерОсновнойЗаписи)  тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер основной записи. Ожидается номер: "+ОжидаемыйНомерОсновнойЗаписи+"!");;
						КонецЕсли;
					Иначе
						ОжидаемыйНомерДополнительнойЗаписи = ПредыдущийНомерДополнительнойЗаписи +1;
						Если (Запись.НомерДополнительнойЗаписи <> ОжидаемыйНомерДополнительнойЗаписи)  тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер дополнительной записи. Ожидается номер: "+ОжидаемыйНомерДополнительнойЗаписи+"!", ТекущаяОсновнаяЗапись);;
						КонецЕсли;
					КонецЕсли;
					
					
					//  ОПРЕДЕЛИМ, ЗАДАНЫ ЛИ РЕКВИЗИТЫ ОТДЕЛЬНЫХ ГРУПП
					
					//Признаки заполнения группы реквизитов "ТерриториальныеУсловия"
					УказаныТерриториальныеУсловия = НЕ ПустаяСтрока(Запись.ТерриториальныеУсловияКод);
					
					//Признаки заполнения реквизитов группы "Особые условия труда"
					УказанКодПозицииСписка = НЕ ПустаяСтрока(Запись.КодПозицииСпискаКод);
					УказаныОсобыеУсловияТруда = НЕ ПустаяСтрока(Запись.ОсобыеУсловияТрудаКод);
					ЗаданаГруппаУсловияТруда = УказаныОсобыеУсловияТруда;
					
					//Признаки заполнения реквизитов группы "Исчисляемый стаж"
					УказаноОснованиеИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ОснованиеИсчисляемогоСтажаКод);
					УказанТретийПараметрИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ТретийПараметрИсчисляемогоСтажа);
					ЗаданаГруппаИсчисляемыйСтаж = УказаноОснованиеИсчисляемогоСтажа ИЛИ УказанТретийПараметрИсчисляемогоСтажа;
					
					//Признаки заполнения реквизитов группы "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ"
					УказанПараметрИсчисляемогоСтажа1 = НЕ (Запись.ПервыйПараметрИсчисляемогоСтажа = 0); 
					УказанПараметрИсчисляемогоСтажа2 = НЕ (Запись.ВторойПараметрИсчисляемогоСтажа = 0); 
					ЗаданаГруппаФОВ = УказанПараметрИсчисляемогоСтажа1 ИЛИ УказанПараметрИсчисляемогоСтажа2;
					
					//Признаки заполнения реквизитов группы "ВыслугаЛет"
					УказаноОснованиеВыслугиЛет = НЕ ПустаяСтрока(Запись.ОснованиеВыслугиЛетКод);
					ЗаданаГруппаВыслугаЛет = УказаноОснованиеВыслугиЛет;
					
					
					//  ПРОВЕРКА НА ДОПУСТИМЫЕ СОЧЕТАНИЯ МЕЖДУ ГРУППАМИ СТАЖА ОСНОВНОЙ И ДОПОЛНИТЕЛЬНОЙ ЗАПИСЕЙ 
					
					Если НЕ ЭтоОсновнаяЗапись тогда
						СЗВ4_ВыполнитьПроверкуДополнительнойЗаписиСтажа(Запись, ТекущаяОсновнаяЗапись, ТаблицаПлохихЗаписей);
					КонецЕсли;	 
					
					// ПРОВЕРКА ОСНОВНЫХ И ДОПОЛНИТЕЛЬНЫХ ЗАПИСЕЙ НА ДУБЛИ ЗНАЧЕНИЙ РЕКВИЗИТОВ
					
					Если УказаныТерриториальныеУсловия тогда
						ПредставлениеЗначения = ""+ СОКРЛП(Запись.ТерриториальныеУсловияКод);
						Если СписокТерриториальныеУсловияЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанные в дополнительной записи территориальные условия "+ПредставлениеЗначения+" не должны повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						Иначе	
							СписокТерриториальныеУсловияЗаписи.Добавить(ПредставлениеЗначения);
						КонецЕсли;	 
					КонецЕсли;	 
					
					Если УказаныОсобыеУсловияТруда тогда
						ПредставлениеЗначения = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
						Если СписокУсловияТрудаЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код условий труда "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						Иначе	
							СписокУсловияТрудаЗаписи.Добавить(ПредставлениеЗначения);
						КонецЕсли;	 
					КонецЕсли;	 
					
					Если УказаноОснованиеВыслугиЛет тогда
						ПредставлениеЗначения = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
						Если СписокВыслугаЛетЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код выслуги лет "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						Иначе	
							СписокВыслугаЛетЗаписи.Добавить(ПредставлениеЗначения);
						КонецЕсли;	 
					КонецЕсли;	
					
					//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "Особые условия труда"
					
					КПС = СокрЛП(Запись.КодПозицииСпискаКод);
					
					//Определим, к какому списку принадлежит код позиции
					НазваниеСписка ="";
					Если УказанКодПозицииСписка тогда 
						
						Если НЕ УказаныОсобыеУсловияТруда тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Код позиции списка не может указываться без указания кода особых условий труда!", ТекущаяОсновнаяЗапись);
						КонецЕсли;	 
						
						ДлинаКПС = СтрДлина(КПС);
						
						Если (ДлинаКПС=8)или(ДлинаКПС=14) тогда
							
							Первые2СимволаКПС = Лев(КПС,2);
							Если (Первые2СимволаКПС = "10")или(Первые2СимволаКПС = "11")или(Первые2СимволаКПС = "12") тогда
								НазваниеСписка = "Список№1";
							ИначеЕсли (Первые2СимволаКПС >= "20")и(Первые2СимволаКПС <= "23") тогда
								НазваниеСписка = "Список№2";
							Иначе	
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный код позиции списка вредных профессий!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
						ИначеЕсли (ДлинаКПС=5) тогда
							НазваниеСписка = "ПрочиеСписки";
						Иначе	
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Длина кода позиции списка должна быть равна либо 5, либо 8, либо 14 символам!", ТекущаяОсновнаяЗапись);
						КонецЕсли;	 
					КонецЕсли;//УказанКодПозицииСписка	 
					
					Если УказаныОсобыеУсловияТруда тогда
						
						//Проверки на возможные коды списков для конкретных условий труда
						
						КодОсобыхУсловийТруда = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
						Первые8СимволовКПС = Лев(КПС,8);
						НачалоСообщения = "Для особых условий труда с кодом " + КодОсобыхУсловийТруда;
						
						Если Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_1 тогда
							Если (НазваниеСписка <> "Список№1") тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " должен быть указан код позиции Списка №1!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
						ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_2 тогда
							
							Если (НЕ УказанКодПозицииСписка) тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен быть указан код позиции Списка №1 или Списка №2!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
							Если (НазваниеСписка = "Список№1") тогда
								Если (Первые8СимволовКПС <> "1010300Б")и(Первые8СимволовКПС <> "1010100Г")и(Первые8СимволовКПС <> "1010100Д")  тогда
									СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
								КонецЕсли;	
							ИначеЕсли (НазваниеСписка <> "Список№2") тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
						Иначе
							//Для остальных кодов условий труда КПС указываться не должен
							Если УказанКодПозицииСписка тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка указываться не должен!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
						КонецЕсли;	 
						
					КонецЕсли;//УказаныОсобыеУсловияТруда	 
					
					//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Выслуга лет"
					
					УказанПараметр1 = НЕ (Запись.ПервыйПараметрВыслугиЛет = 0);
					УказанПараметр2 = НЕ (Запись.ВторойПараметрВыслугиЛет = 0);
					УказанПараметр3 = НЕ (Запись.ТретийПараметрВыслугиЛет = 0);
					ПараметрыУказаны = (УказанПараметр1) ИЛИ (УказанПараметр2) ИЛИ (УказанПараметр3);
					
					Если УказаноОснованиеВыслугиЛет тогда
						
						КодОснования = СокрЛП(Запись.ОснованиеВыслугиЛетКод);
						НачалоСообщения = "Для основания выслуги лет " + КодОснования;
						
						УказанТолькоТретийПараметр = (НЕ УказанПараметр1) И (НЕ УказанПараметр2) И (УказанПараметр3);
						
						//Медицинские работники
						Если (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМ) 
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГД)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМХР)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГДХР) тогда
							
							Если НЕ ((Запись.ТретийПараметрВыслугиЛет > 0) И (Запись.ТретийПараметрВыслугиЛет <= 1)) тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись);
							ИначеЕсли НЕ УказанТолькоТретийПараметр тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен указываться только третий параметр!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
							//Педагогические работники	
						ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ПД тогда
							
							Если УказанПараметр2 тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " второй параметр указываться не должен!", ТекущаяОсновнаяЗапись);
							ИначеЕсли НЕ ((Запись.ТретийПараметрВыслугиЛет > 0) И (Запись.ТретийПараметрВыслугиЛет <= 1)) тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
						ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ПДРК тогда
							
							Если (УказанПараметр2) или (УказанПараметр3) тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " может быть указан только первый параметр!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
							//Летчики
						ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.САМОЛЕТ) 
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.СПЕЦАВ)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСИСП)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЛЕТИСП) 
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИНСПЕКТ)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ОПЫТИСП)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИСПКЛС1)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСМАВ)тогда
							
							Если  УказанПараметр3 тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
							Если  (НЕ УказанПараметр1) И (НЕ УказанПараметр2) тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 1 и 2 должны содержать отработанное время (часы и минуты)!", ТекущаяОсновнаяЗапись);
							КонецЕслИ;	
							
							//Парашютисты	
						ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.РЕАКТИВН)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМСП)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМАПР) тогда	
							
							Если (УказанПараметр2) ИЛИ (УказанПараметр3) тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 2 и 3 указываться не должны!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
							//Управление воздушным движением и  инженерно-технический состав 	
						ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_14)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15) тогда
							
							Если  УказанПараметр3 тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
							//Прочие коды выслуги лет	
						Иначе
							Если ПараметрыУказаны тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры выслуги лет 1,2,3 указываться не должны!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
						КонецЕсли;	 
					Иначе
						Если ПараметрыУказаны тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись," Параметры выслуги лет 1,2,3 без указания основания выслуги лет указываться не должны!", ТекущаяОсновнаяЗапись);
						КонецЕсли;	 
					КонецЕсли;	 
					
					//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Исчисляемый стаж"  (Основание + Третий параметр)
					
					Если УказанТретийПараметрИсчисляемогоСтажа тогда
						Если (Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕТИ") И (Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕКРЕТ") тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Третий параметр исчисляемого стажа должен содержать значение ДЕТИ или ДЕКРЕТ!", ТекущаяОсновнаяЗапись);
						Иначе
							Если (УказаноОснованиеИсчисляемогоСтажа) ИЛИ (ЗаданаГруппаФОВ) ИЛИ (УказаноОснованиеВыслугиЛет)  тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании третьего параметра исчисляемого стажа следующие группы реквизитов должны быть пустыми:		
								| Исчисляемый стаж: основание, Фактически отработанное время, Выслуга лет!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							Если (Запись.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ") И ((ЗаданаГруппаУсловияТруда)ИЛИ(УказаныТерриториальныеУсловия)) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в третьем параметре исчисляемого стажа значения ДЕТИ группы реквизитов 
								|""Условия труда, Территориальные условия"" указываться не должны!", ТекущаяОсновнаяЗапись);
							КонецЕсли; 
						КонецЕсли;	 
					КонецЕсли;	 
					
					//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ" (ПАРАМЕТРЫ 1,2 ИСЧИСЛЯЕМОГО СТАЖА)   
					
					Если ЗаданаГруппаФОВ тогда
						Если (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеИсчисляемогоСтажа)
							И (НЕ УказаныТерриториальныеУсловия)  тогда
							СтрОшибка = " Параметры 1,2 исчисляемого стажа должны указываться только при заполнении других групп реквизитов"
							+(Символы.ПС + " (Территориальные условия, Условия труда, Исчисляемый стаж: основание)!");
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
						КонецЕсли;	
						
						Если Запись.ОснованиеИсчисляемогоСтажа	<>	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ тогда
							
							Если Запись.ПервыйПараметрИсчисляемогоСтажа > 11 тогда
								СтрОшибка = "Первый параметр исчисляемого стажа (Месяцы) не должен быть больше 11!";
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							КонецЕсли;	 	
							Если Запись.ВторойПараметрИсчисляемогоСтажа > 30 тогда
								СтрОшибка = "Второй параметр исчисляемого стажа (Дни) не должен быть больше 30!";
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							КонецЕсли;	 	
							
							Лет = 0;
							Месяцев = 0;
							Дней = 0;
							ПолучитьСтажЗаПериод(ТекущаяОсновнаяЗапись.ДатаОкончанияПериода,	ТекущаяОсновнаяЗапись.ДатаНачалаПериода, Лет,	Месяцев, Дней);			
							ПолучитьПриведенныйСтаж(Лет,Месяцев,Дней);
							КалендарноеВремя = Лет*12*30+Месяцев*30+Дней;
							ФОВДляСравнения = Запись.ПервыйПараметрИсчисляемогоСтажа *30 + Запись.ВторойПараметрИсчисляемогоСтажа; 
							
							Если (ФОВДляСравнения > КалендарноеВремя) тогда
								СтрОшибка = "Указанное фактически-отработаннное время превышает календарное время!";
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							КонецЕсли;	
						КонецЕсли;	 
						
					КонецЕсли;	 
					
					//  ПОДГОТОВКА К СЛЕДУЮЩЕЙ ИТЕРАЦИИ  
					
					//Запомним для следующей итерации
					ПредыдущийНомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
					ПредыдущийНомерДополнительнойЗаписи = Запись.НомерДополнительнойЗаписи;
					
				КонецЦикла;//Цикл по записям стажа текущего физлица за год
				
			КонецЦикла;//Цикл по физлицам
		КонецЦикла;//Цикл по годам 
	КонецЦикла;//Цикл по обособленным подразделениям
	
	//Структура
	СЗВ4_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(ИнициаторВызова, СтруктураПараметров, ТаблицаПлохихЗаписей);
	
	Если ТаблицаПлохихЗаписей.Количество() > 0 тогда
		// Вывод ошибок
		ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, "При проверке набора записей о стаже");
		Возврат Ложь
	Иначе	
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Выполняет авторасчет стажа для формы СЗВ4
//
Функция СЗВ4_ПолучитьДанныеДляЗаполненияСтажа(ОбособленноеПодразделение, Год, ФизЛицо = Неопределено) Экспорт

	НачалоГода = Дата(Год,1,1);
	КонецГода = КонецГода(Дата(Год,1,1));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ФизЛицо",					ФизЛицо);
	Запрос.УстановитьПараметр("Год",						Год);
	Запрос.УстановитьПараметр("НачалоГода",					НачалоГода);
	Запрос.УстановитьПараметр("КонецГода",					КонецГода);
	Запрос.УстановитьПараметр("НачалоСледующегоГода",		КонецГода + 1);
	Запрос.УстановитьПараметр("Организация",				ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(ОбособленноеПодразделение));
	Запрос.УстановитьПараметр("ТерриториальныеУсловия",		ОбособленноеПодразделение.ТерриториальныеУсловияПФР);
	Запрос.УстановитьПараметр("ПустыеУсловияТруда",			Справочники.ОсобыеУсловияТруда.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустыеОснованияВыслугиЛет",	Справочники.ОснованияВыслугиЛет.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТрудовойДоговор",			Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	
	// Выборка периодов постоянства назначения физлица в организации
	УсловиеНаФизлицоТекст = ?(ФизЛицо = Неопределено,"",Символы.ПС + Символы.Таб + "И <имя таблицы>.ФизЛицо = &ФизЛицо");
	
	ДатыДвиженийТекст = 
	"ВЫБРАТЬ
	|	РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|	&НачалоГода КАК ДатаС,
	|	РаботникиОрганизацииСрезПоследних.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность
	|	КОНЕЦ КАК Должность,
	|	NULL КАК ПериодЗавершения
	|ПОМЕСТИТЬ ВТДатыДвижений
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		&НачалоГода,
	|		Организация = &ГоловнаяОрганизация
	|			И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)"
	+ СтрЗаменить(УсловиеНаФизлицоТекст,"<имя таблицы>","Сотрудник") + ") КАК РаботникиОрганизацииСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И ВЫБОР
	|			КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник.Физлицо,
	|	РаботникиОрганизации.Период,
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность,
	|	РаботникиОрганизации.ПериодЗавершения
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)"
	+ СтрЗаменить(УсловиеНаФизлицоТекст,"<имя таблицы>","РаботникиОрганизации.Сотрудник") + "
	|	И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|	И РаботникиОрганизации.ОбособленноеПодразделение = &Организация
	|	И РаботникиОрганизации.Период > &НачалоГода
	|	И РаботникиОрганизации.Период < &НачалоСледующегоГода
	|	И РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Сотрудник.ФизЛицо,
	|	Работники.ПериодЗавершения,
	|	Работники.Организация,
	|	Работники.ПодразделениеОрганизацииЗавершения,
	|	Работники.ДолжностьЗавершения,
	|	NULL
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК Работники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|			ПО ПериодыПерекрытия.Период <= Работники.ПериодЗавершения
	|				И ПериодыПерекрытия.Период > Работники.Период
	|				И (ПериодыПерекрытия.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))"
	+ СтрЗаменить(УсловиеНаФизлицоТекст,"<имя таблицы>","ПериодыПерекрытия.Сотрудник") + "
	|				И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|	ГДЕ
	|		Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)"
	+ СтрЗаменить(УсловиеНаФизлицоТекст,"<имя таблицы>","Работники.Сотрудник") + "
	|		И Работники.Организация = &ГоловнаяОрганизация
	|		И Работники.ОбособленноеПодразделениеЗавершения = &Организация
	|		И Работники.ПричинаИзмененияСостоянияЗавершения <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		И Работники.ПериодЗавершения > &НачалоГода
	|		И Работники.ПериодЗавершения < &НачалоСледующегоГода
	|	    И ПериодыПерекрытия.Период ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо";
	
	Запрос.Текст = ДатыДвиженийТекст;
	Запрос.Выполнить();
	ДатыДвиженийТекст = "ВТДатыДвижений";
	
	ПериодыДвиженийТекст = 
	"ВЫБРАТЬ
	|	ДатыНазначений1.ФизЛицо КАК ФизЛицо,
	|	ДатыНазначений1.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ДатыНазначений1.Должность КАК Должность,
	|	ДатыНазначений1.ДатаС КАК ДатаС,
	|	ВЫБОР 
	|		КОГДА ДатыНазначений1.ПериодЗавершения<>ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) 
	|			ТОГДА ВЫБОР 
	|				КОГДА ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода) > ДатыНазначений1.ПериодЗавершения
	|					ТОГДА ДатыНазначений1.ПериодЗавершения
	|				ИНАЧЕ ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода)
	|			КОНЕЦ 
	|	    ИНАЧЕ  ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода) 
	|	КОНЕЦ  КАК ДатаПо,
	|	ДатыНазначений1.ПериодЗавершения КАК ПериодЗавершения
	|ПОМЕСТИТЬ ВТПериодыДвижений
	|ИЗ
	|	" + ДатыДвиженийТекст + " КАК ДатыНазначений1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДатыНазначений2
	|		ПО ДатыНазначений1.Физлицо = ДатыНазначений2.Сотрудник.Физлицо
	|			И ДатыНазначений2.Период > ДатыНазначений1.ДатаС
	|			И (ДатыНазначений2.Период < &НачалоСледующегоГода) 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыНазначений1.ФизЛицо,
	|	ДатыНазначений1.ПодразделениеОрганизации,
	|	ДатыНазначений1.Должность,
	|	ДатыНазначений1.ДатаС,
	|   ДатыНазначений1.ПериодЗавершения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо";
	
	Запрос.Текст = ПериодыДвиженийТекст;
	Запрос.Выполнить();
	ПериодыДвиженийТекст = "ВТПериодыДвижений";
	
	ДатыИзмененияУсловийТрудаТекст = 
	"ВЫБРАТЬ
	|	ПериодыПостоянства.ФизЛицо,
	|	&Организация КАК ОбособленноеПодразделение,
	|	&Год КАК Год,
	|	ВЫБОР 
	|		КОГДА ПериодыПостоянства.ПодразделениеОрганизации.КодПоОКАТО = """" 
	|			ТОГДА &ТерриториальныеУсловия
	|		ИНАЧЕ
	|			ПериодыПостоянства.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|	КОНЕЦ КАК ТерриториальныеУсловия,
	|	ПериодыПостоянства.ОсобыеУсловияТруда,
	|	ВЫБОР
	|		КОГДА ПериодыПостоянства.ОсобыеУсловияТруда = &ПустыеУсловияТруда
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(ПериодыПостоянства.Должность.КодПозицииСписка, """")
	|	КОНЕЦ КАК КодПозицииСписка,
	|	ЕСТЬNULL(ПериодыПостоянства.Должность.ОснованиеВыслугиЛет, &ПустыеОснованияВыслугиЛет) КАК ОснованиеВыслугиЛет,
	|	ПериодыПостоянства.НазначениеС КАК ДатаНачалаПериода,
	|	ДОБАВИТЬКДАТЕ(ПериодыПостоянства.НазначениеПо, ДЕНЬ, -1) КАК ДатаОкончанияПериода
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачалаПериодов.ФизЛицо КАК ФизЛицо,
	|		НачалаПериодов.Должность КАК Должность,
	|		НачалаПериодов.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		НачалаПериодов.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|		НачалаПериодов.ДатаС КАК НазначениеС,
	|		ЕСТЬNULL(МИНИМУМ(ОкончанияПериодов.ДатаС), &НачалоСледующегоГода) КАК НазначениеПо
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПериодыНазначений.ФизЛицо КАК ФизЛицо,
	|			ПериодыНазначений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|			ПериодыНазначений.Должность КАК Должность,
	|			ПериодыНазначений.ДатаС КАК ДатаС,
	|			ЕСТЬNULL(ШР.ОсобыеУсловияТруда, &ПустыеУсловияТруда) КАК ОсобыеУсловияТруда
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ПериодыНазначений.ФизЛицо КАК ФизЛицо,
	|				ПериодыНазначений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|				ПериодыНазначений.Должность КАК Должность,
	|				ПериодыНазначений.ДатаС КАК ДатаС,
	|				МАКСИМУМ(ШР.Период) КАК Период
	|			ИЗ
	|				" + ДатыДвиженийТекст + " КАК ПериодыНазначений
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|					ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|						И ПериодыНазначений.Должность = ШР.Должность
	|						И ШР.Период <= ПериодыНазначений.ДатаС
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПериодыНазначений.ФизЛицо,
	|				ПериодыНазначений.ПодразделениеОрганизации,
	|				ПериодыНазначений.Должность,
	|				ПериодыНазначений.ДатаС) КАК ПериодыНазначений
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|				ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|					И ПериодыНазначений.Должность = ШР.Должность
	|					И ШР.Период = ПериодыНазначений.Период
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ПериодыНазначений.ФизЛицо,
	|			ПериодыНазначений.ПодразделениеОрганизации,
	|			ПериодыНазначений.Должность,
	|			ШР.Период,
	|			ШР.ОсобыеУсловияТруда
	|		ИЗ
	|			" + ПериодыДвиженийТекст + " КАК ПериодыНазначений
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|				ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|					И ПериодыНазначений.Должность = ШР.Должность
	|					И ШР.Период > ПериодыНазначений.ДатаС
	|					И ШР.Период <= ПериодыНазначений.ДатаПо) КАК НачалаПериодов
	|			ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|				РаботникиОрганизации.Период КАК ДатаС
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ГДЕ
	|				РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)"
	+ СтрЗаменить(УсловиеНаФизлицоТекст,"<имя таблицы>","РаботникиОрганизации.Сотрудник") + "
	|				И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|				И РаботникиОрганизации.ОбособленноеПодразделение = &Организация
	|				И РаботникиОрганизации.Период > &НачалоГода
	|				И РаботникиОрганизации.Период < &НачалоСледующегоГода
	|
	//	Добавляем действующие периоды завершения 
	|
	|			ОБЪЕДИНИТЬ ВСЕ 
    |
	|			ВЫБРАТЬ 
	|					Работники.Сотрудник.Физлицо КАК ФизЛицо,
	|					Работники.ПериодЗавершения
	|				ИЗ РегистрСведений.РаботникиОрганизаций КАК Работники
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|					ПО ПериодыПерекрытия.Период <= Работники.ПериодЗавершения
	|						И ПериодыПерекрытия.Период > Работники.Период
	|						И ПериодыПерекрытия.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)"
	+ СтрЗаменить(УсловиеНаФизлицоТекст,"<имя таблицы>","ПериодыПерекрытия.Сотрудник") + "
	|						И ПериодыПерекрытия.Организация = &ГоловнаяОрганизация
	|		
	|				ГДЕ Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) 
	|   				И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)"
	+ СтрЗаменить(УсловиеНаФизлицоТекст,"<имя таблицы>","Работники.Сотрудник") + "
	|					И Работники.Организация = &ГоловнаяОрганизация
	|					И Работники.ОбособленноеПодразделениеЗавершения = &Организация
	|		            И ПериодыПерекрытия.Период ЕСТЬ NULL
	|					И Работники.ПериодЗавершения > &НачалоГода
	|					И Работники.ПериодЗавершения < &НачалоСледующегоГода
 	//	
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ПериодыНазначений.ФизЛицо,
	|				ШР.Период
	|			ИЗ
	|				" + ПериодыДвиженийТекст + " КАК ПериодыНазначений
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|					ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|						И ПериодыНазначений.Должность = ШР.Должность
	|						И ШР.Период > ПериодыНазначений.ДатаС
	|						И ШР.Период <= ПериодыНазначений.ДатаПо) КАК ОкончанияПериодов
	|			ПО НачалаПериодов.ФизЛицо = ОкончанияПериодов.ФизЛицо
	|				И НачалаПериодов.ДатаС < ОкончанияПериодов.ДатаС
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НачалаПериодов.ФизЛицо,
	|		НачалаПериодов.ПодразделениеОрганизации,
	|		НачалаПериодов.Должность,
	|		НачалаПериодов.ДатаС,
	|		НачалаПериодов.ОсобыеУсловияТруда) КАК ПериодыПостоянства
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	ДатаНачалаПериода";
	
	ПериодыДоговоровТекст = 
	"ВЫБРАТЬ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.ФизЛицо КАК Физлицо,
	|	&Организация КАК ОбособленноеПодразделение,
	|	&Год КАК Год,
	|	ВЫБОР 
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.КодПоОКАТО = """"
	|			ТОГДА &ТерриториальныеУсловия 
	|	    ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|	КОНЕЦ КАК ТерриториальныеУсловия,
	|	&ПустыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	"""" КАК КодПозицииСписка,
	|	&ПустыеОснованияВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ВЫБОР
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала < &НачалоГода
	|			ТОГДА &НачалоГода
	|		ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания < &НачалоСледующегоГода
	|			ТОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания
	|		ИНАЧЕ &НачалоСледующегоГода
	|	КОНЕЦ КАК ДатаОкончанияПериода
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Организация = &Организация
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &КонецГода
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &НачалоГода
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.ФизЛицо = &Физлицо
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	ДатаОкончанияПериода,
	|	ДатаНачалаПериода";
	
	Если ФизЛицо = Неопределено Тогда
		ПериодыДоговоровТекст = СтрЗаменить(ПериодыДоговоровТекст,"И ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо = &Физлицо","");
	КонецЕсли;
	
	Запрос.Текст = ДатыИзмененияУсловийТрудаТекст;
	ТаблицаСтажа = Запрос.Выполнить().Выгрузить();
	ТаблицаСтажа.Индексы.Добавить("ФизЛицо");
	
	// Удалим из таблицы стажа незначимые записи:
	//  - если по физлицу имеется 2 непрерывных записи с одинаковыми условиями труда, то объединим данные записи 
	Н = ТаблицаСтажа.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажа[Н];
		ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
			ТаблицаСтажа.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	ТаблицаСтажа.Сортировать("ФизЛицо,ДатаНачалаПериода");
	
	Запрос.Текст = ПериодыДоговоровТекст;
	ТаблицаСтажаПоДоговорам = Запрос.Выполнить().Выгрузить();
	
	Н = ТаблицаСтажаПоДоговорам.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажаПоДоговорам[Н];
		ПредшествующаяЗапись = ТаблицаСтажаПоДоговорам[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И ТекущаяЗапись.ДатаНачалаПериода <= КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 // если записи идут друг за другом или пересекаются 
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = Макс(ТекущаяЗапись.ДатаОкончанияПериода, ПредшествующаяЗапись.ДатаОкончанияПериода); 
			ПредшествующаяЗапись.ДатаНачалаПериода = Мин(ТекущаяЗапись.ДатаНачалаПериода, ПредшествующаяЗапись.ДатаНачалаПериода); 
			ТаблицаСтажаПоДоговорам.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	
	ТаблицаСтажаПоДоговорам.Сортировать("ФизЛицо,ДатаНачалаПериода");
	ПредшествующееФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	МассивСтрок = Новый Массив;
	СтрокСтажа = 0;
	СтруктураПоиска = Новый Структура("ФизЛицо");
	Н = ТаблицаСтажаПоДоговорам.Количество();
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажаПоДоговорам[Н - 1];
		
		Если ТекущаяЗапись.ФизЛицо <> ПредшествующееФизЛицо Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекущаяЗапись);
			МассивСтрок = ТаблицаСтажа.НайтиСтроки(СтруктураПоиска);
			ПредшествующееФизЛицо = ТекущаяЗапись.ФизЛицо;
		КонецЕсли;
		
		СтрокСтажа = МассивСтрок.Количество();
		Если СтрокСтажа = 0 Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаСтажа.Добавить(),ТекущаяЗапись);
			Н = Н - 1;
			Продолжить;
		КонецЕсли;
		
		ДатаНачалаПериода = ТекущаяЗапись.ДатаНачалаПериода;
		ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
		
		Для Сч = 1 По СтрокСтажа Цикл
		
			СтрокаСтажа = МассивСтрок[СтрокСтажа - Сч];
			Если СтрокаСтажа.ДатаНачалаПериода > ДатаОкончанияПериода Тогда
			ИначеЕсли СтрокаСтажа.ДатаНачалаПериода > ДатаНачалаПериода Тогда
				Если СтрокаСтажа.ДатаОкончанияПериода < ДатаОкончанияПериода Тогда
					НоваяСтрока = ТаблицаСтажа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяЗапись);
					НоваяСтрока.ДатаНачалаПериода = КонецДня(СтрокаСтажа.ДатаОкончанияПериода) + 1;
					НоваяСтрока.ДатаОкончанияПериода = ДатаОкончанияПериода;
				КонецЕсли;
				ДатаОкончанияПериода = НачалоДня(СтрокаСтажа.ДатаНачалаПериода - 1);
			Иначе
				Если СтрокаСтажа.ДатаОкончанияПериода >= ДатаНачалаПериода Тогда
					ДатаНачалаПериода = КонецДня(СтрокаСтажа.ДатаОкончанияПериода) + 1;
				КонецЕсли;
				Прервать;
			КонецЕсли;
			МассивСтрок.Удалить(СтрокСтажа - Сч);
		КонецЦикла;
		
		Если ДатаОкончанияПериода >= ДатаНачалаПериода Тогда
			НоваяСтрока = ТаблицаСтажа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяЗапись);
			НоваяСтрока.ДатаНачалаПериода = ДатаНачалаПериода;
			НоваяСтрока.ДатаОкончанияПериода = ДатаОкончанияПериода;
		КонецЕсли;
			
		Н = Н - 1;
	КонецЦикла;
	
	ТаблицаСтажа.Сортировать("ФизЛицо,ДатаНачалаПериода");
	
	Н = ТаблицаСтажа.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажа[Н];
		ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
			ТаблицаСтажа.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	
	Возврат ТаблицаСтажа;
	
КонецФункции



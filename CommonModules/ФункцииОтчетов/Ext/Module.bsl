
Процедура ПриСозданииОтчета(ФормаОтчета, Отказ, СтандартнаяОбработка) Экспорт
	
	//Добавить элементы
	ОтчетОбъект = ФормаОтчета.РеквизитФормыВЗначение("Отчет");
	
	ВерсияСтандартныхФункцийОтчетов = "";
	Попытка 
		ВерсияСтандартныхФункцийОтчетов = ОтчетОбъект.ВерсияСтандартныхФункцийОтчетов();
	Исключение
	КонецПопытки;
	
	Если ВерсияСтандартныхФункцийОтчетов = "1" тогда
		
		ПодключитьСобытияФормы(ФормаОтчета);
		
		//Добавить реквизиты
		ДобавитьРеквизитыФормы(ФормаОтчета, ОтчетОбъект);
		ФормаОтчета.КлючОбъекта = СтрЗаменить(Строка(ОтчетОбъект),"ОтчетОбъект", "Отчет");
		СхемаКомпоновкиДанных   = ОтчетОбъект.СхемаКомпоновкиДанных;
		
		//Добавить команды
		ДобавитьКомандыФормы(ФормаОтчета);
		
		ДобавитьЭлементыФормы(ФормаОтчета, ОтчетОбъект);
		
		Для Каждого ВариантНастройки Из СхемаКомпоновкиДанных.ВариантыНастроек Цикл
			ФормаОтчета.СтандартныеНастройки.Добавить(ВариантНастройки.Имя, ВариантНастройки.Представление);
		КонецЦикла;
		
		ГруппаНастроекПользователя = ФормаОтчета.Элементы.Найти("ПанельНастроекПользователя");
		Если ГруппаНастроекПользователя <> Неопределено Тогда
			ВидимостьПанели = ХранилищеОбщихНастроек.Загрузить(ФормаОтчета.КлючОбъекта, "ВидимостьПанели");
			Если ВидимостьПанели = Неопределено Тогда
				ГруппаНастроекПользователя.Видимость = Истина;
				ВключитьПанельНастроекПользователя = ФормаОтчета.Элементы.Найти("ВключитьПанельНастроекПользователя");
				Если ВключитьПанельНастроекПользователя <> Неопределено Тогда
					ВключитьПанельНастроекПользователя.Пометка = Истина;
				КонецЕсли;
			Иначе
				ГруппаНастроекПользователя.Видимость = ВидимостьПанели;
				ВключитьПанельНастроекПользователя = ФормаОтчета.Элементы.Найти("ВключитьПанельНастроекПользователя");
				Если ВключитьПанельНастроекПользователя <> Неопределено Тогда
					ВключитьПанельНастроекПользователя.Пометка = ВидимостьПанели;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьДанныеВФорме(ФормаОтчета, ОтчетОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьСобытияФормы(ФормаОтчета)
	
	Соответсвие = Новый Соответствие;
	Соответсвие.Вставить("ПриОткрытии",                             "ПриОткрытии");
	Соответсвие.Вставить("ПриПовторномОткрытии",                    "ПриПовторномОткрытии");
	Соответсвие.Вставить("ПередЗакрытием",                          "ПередЗакрытием");
	Соответсвие.Вставить("ПриЗакрытии",                             "ПриЗакрытии");
	Соответсвие.Вставить("ОбработкаВыбора",                         "ФормаОбработкаВыбора");
	//Соответсвие.Вставить("ОбработкаОповещения",                     "ОбработкаОповещения");
	Соответсвие.Вставить("ОбработкаАктивизации",                    "ОбработкаАктивизации");
	Соответсвие.Вставить("ОбработкаПроверкиЗаполненияНаСервере",    "ОбработкаПроверкиЗаполненияНаСервере");
	Соответсвие.Вставить("ВнешнееСобытие",                          "ВнешнееСобытие");
	Соответсвие.Вставить("ПриСохраненииВариантаНаСервере",          "ПриСохраненииВариантаНаСервере");
	Соответсвие.Вставить("ПриЗагрузкеВариантаНаСервере",            "ПриЗагрузкеВариантаНаСервере");
	Соответсвие.Вставить("ПриСохраненииПользовательскихНастроекНаСервере", "ПриСохраненииПользовательскихНастроекНаСервере");
	Соответсвие.Вставить("ПриЗагрузкеПользовательскихНастроекНаСервере",   "ПриЗагрузкеПользовательскихНастроекНаСервере");
	
	Для Каждого ЗначениеСоответсвия Из Соответсвие Цикл
		ФормаОтчета.УстановитьДействие(ЗначениеСоответсвия.Ключ, "Подключаемый_" + ЗначениеСоответсвия.Значение + "УниверсальныйОбработчик");
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКомандыФормы(ФормаОтчета)
	
	Если ФормаОтчета.Команды.Найти("ВключитьПанельНастроекПользователя") = Неопределено тогда
		ВключитьПанельНастроекПользователя = ФормаОтчета.Команды.Добавить("ВключитьПанельНастроекПользователя");
		ВключитьПанельНастроекПользователя.Действие  = "Подключаемый_УниверсальнаяПроцедураКомандыУниверсальныйОбработчик";
		ВключитьПанельНастроекПользователя.Заголовок = "Панель быстрых настроек пользователя";
		ВключитьПанельНастроекПользователя.Отображение = ОтображениеКнопки.Картинка;
		ВключитьПанельНастроекПользователя.Картинка = БиблиотекаКартинок.ПанельПользователя; 
		ВключитьПанельНастроекПользователя.Подсказка   = "Панель быстрых настроек пользователя";
	КонецЕсли;
	
	Если ФормаОтчета.Команды.Найти("ОтправитьОтчетПоПочте") = Неопределено тогда
		ВключитьПанельНастроекПользователя = ФормаОтчета.Команды.Добавить("ОтправитьОтчетПоПочте");
		ВключитьПанельНастроекПользователя.Действие  = "Подключаемый_УниверсальнаяПроцедураКомандыУниверсальныйОбработчик";
		ВключитьПанельНастроекПользователя.Заголовок = "Отправить отчет по e-mail";
		ВключитьПанельНастроекПользователя.Отображение = ОтображениеКнопки.Картинка;
		ВключитьПанельНастроекПользователя.Картинка = БиблиотекаКартинок.Отправить; 
		ВключитьПанельНастроекПользователя.Подсказка   = "Отправить отчет по e-mail";
	КонецЕсли;
	
	Для Каждого ЭлементНастройки Из ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		
		Если НЕ((ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") 
		 Или ТипЗнч(ЭлементНастройки) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")) 
		 и ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ  
		 и (ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке 
		 Или ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
		 Или ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке 
		 Или ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии)) тогда
			Продолжить;
		КонецЕсли;
		
		КомандаЗагрузитьСписок             = ФормаОтчета.Команды.Добавить("ЗагрузитьСписок_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки));
		КомандаЗагрузитьСписок.Действие    = "Подключаемый_УниверсальнаяПроцедураКомандыУниверсальныйОбработчик";                    
		КомандаЗагрузитьСписок.Заголовок   = "Загрузить список";
		КомандаЗагрузитьСписок.Картинка    = БиблиотекаКартинок.ОткрытьФайл;
		КомандаЗагрузитьСписок.Отображение = ОтображениеКнопки.Картинка;
		
		КомандаСохранитьСписок             = ФормаОтчета.Команды.Добавить("СохранитьСписок_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки));
		КомандаСохранитьСписок.Действие    = "Подключаемый_УниверсальнаяПроцедураКомандыУниверсальныйОбработчик";
		КомандаСохранитьСписок.Заголовок   = "Сохранить список";
		КомандаСохранитьСписок.Картинка    = БиблиотекаКартинок.СохранитьФайл;
		КомандаСохранитьСписок.Отображение = ОтображениеКнопки.Картинка;
		
		КомандаСохранитьСписок             = ФормаОтчета.Команды.Добавить("Подбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки));
		КомандаСохранитьСписок.Действие    = "Подключаемый_УниверсальнаяПроцедураКомандыУниверсальныйОбработчик";
		КомандаСохранитьСписок.Заголовок   = "Подбор";
		КомандаСохранитьСписок.Отображение = ОтображениеКнопки.Текст;
		
	КонецЦикла;
	
	КомандаОткрытьНастройкуПользователя             = ФормаОтчета.Команды.Добавить("ОткрытьНастройкуПользователя");
	КомандаОткрытьНастройкуПользователя.Действие    = "Подключаемый_УниверсальнаяПроцедураКомандыУниверсальныйОбработчик";
	КомандаОткрытьНастройкуПользователя.Заголовок   = "Настройка...";
	КомандаОткрытьНастройкуПользователя.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КомандаОткрытьНастройкуПользователя.Картинка    = БиблиотекаКартинок.НастройкиОтчета; 

КонецПроцедуры

Процедура ВыполнитьКомандуНаСервере(ФормаОтчета, СтруктураКоманды) Экспорт
	
	Если СтруктураКоманды.ИмяКоманды = "УстановитьТекущийВариант" тогда
		Если ФормаОтчета.АдресРезультатов = "" тогда
			СоответсвиеРезультатов = Новый Соответствие;
			ФормаОтчета.АдресРезультатов = ПоместитьВоВременноеХранилище(СоответсвиеРезультатов, Новый УникальныйИдентификатор);
		КонецЕсли;	
		СоответсвиеРезультатов = ПолучитьИзВременногоХранилища(ФормаОтчета.АдресРезультатов);
		ТекРезультат = Новый ТабличныйДокумент;
		ТекРезультат.Вывести(ФормаОтчета.Результат);
		СоответсвиеРезультатов.Вставить(ФормаОтчета.КлючТекущегоВарианта, ТекРезультат);
		ФормаОтчета.АдресРезультатов = ПоместитьВоВременноеХранилище(СоответсвиеРезультатов, ФормаОтчета.АдресРезультатов);
		ФормаОтчета.УстановитьТекущийВариант(СтруктураКоманды.Ключ);
		ТекущиеНастройкиПользователя = ХранилищеОбщихНастроек.Загрузить(ФормаОтчета.КлючОбъекта + "/" + ФормаОтчета.КлючТекущегоВарианта, "ТекущаяПользовательскаяНастройка");
		Если ТекущиеНастройкиПользователя <> Неопределено тогда 
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ТекущиеНастройкиПользователя);
		КонецЕсли;
		ПриЗагрузкеПользовательскихНастроекНаСервере(ФормаОтчета, ТекущиеНастройкиПользователя);
		Результат = СоответсвиеРезультатов[ФормаОтчета.КлючТекущегоВарианта];
		ФормаОтчета.Результат.Очистить();
		Если Результат <> Неопределено тогда
			ФормаОтчета.Результат.Вывести(Результат);
		КонецЕсли;
		
	ИначеЕсли СтруктураКоманды.ИмяКоманды = "ВыполнитьРасшифровку" тогда
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(ФормаОтчета.ДанныеРасшифровки);
		
		//ВЫПОЛНИТЬ РАСШИФРОВКУ ЯЧЕЙКИ ОТЧЕТА
		//  Найдем элемент расшифровки по которому будет расшифровываться отчет
		ЭлементРасшифровки = ДанныеРасшифровки.Элементы[СтруктураКоманды.Идентификатор];
		//  Определим в какое поле дважды кликнул пользователь 
		Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") тогда
			МассивПолей = ЭлементРасшифровки.ПолучитьПоля();
			
			ЕстьРасшифровка         = ложь;
			ЕстьЗначенияДляОткрытия = ложь;
			
			Для Каждого ЗначениеПоля Из МассивПолей Цикл
				ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора, Новый ПолеКомпоновкиДанных(ЗначениеПоля.Поле));
				Если ДоступноеПоле <> Неопределено тогда
					СтруктураКоманды.Поле = ЗначениеПоля.Поле;
					Если ДоступноеПоле.Ресурс тогда
						//  Если поле содержит число и является ресурсом заполним список полей расшифровки
						ЗаполнитьСписокПолейОтчета(ФормаОтчета, ЭлементРасшифровки, СтруктураКоманды.СписокПолей, СтруктураКоманды.ЗначенияРодителей);
					Иначе
						//  Если это ячейка со значением заполним список значений на открытие значения
						ДобавитьЗначениеВСписокЗначений(ЗначениеПоля, СтруктураКоманды.Открыть);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// получить СКД отчета
		ОтчетОбъект = ФормаОтчета.РеквизитФормыВЗначение("Отчет");
		СтруктураКоманды.АдресХранилищаСКД = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ИначеЕсли СтруктураКоманды.ИмяКоманды = "ПерерисоватьПанельВыбораНастроек" тогда
		//ФункцииОтчетов.НарисоватьПанельВыбораНастроек(ФормаОтчета);
	ИначеЕсли СтруктураКоманды.ИмяКоманды = "СохранитьТекущийВариант" тогда
		ХранилищеВариантовОтчетов.Сохранить(ФормаОтчета.КлючОбъекта, ФормаОтчета.КлючТекущегоВарианта, ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки);
	ИначеЕсли СтруктураКоманды.ИмяКоманды = "ОбновитьПанельПользователя" тогда
		ПерерисоватьПравуюПанель(ФормаОтчета, ФормаОтчета.Отчет.КомпоновщикНастроек);
		ПриЗагрузкеПользовательскихНастроекНаСервере(ФормаОтчета, ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ИначеЕсли СтруктураКоманды.ИмяКоманды = "ОбновитьФормуОтчета" тогда
		ПриЗагрузкеПользовательскихНастроекНаСервере(ФормаОтчета, ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ИначеЕсли СтруктураКоманды.ИмяКоманды = "ОтправитьПоПочте" тогда
		ОтправитьОтчетПоЭлПочтеКакВложение(ФормаОтчета.НаименованиеТекущегоВарианта, ФормаОтчета.Результат); 
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьЗначениеВСписокЗначений(ЗначениеПоля, СписокЗначений)
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеПоля.Значение));
	Если ОбъектМетаданных = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ОбъектМетаданных.ПолноеИмя(), "Справочник") > 0 
	 Или Найти(ОбъектМетаданных.ПолноеИмя(), "Документ") > 0 
	 Или Найти(ОбъектМетаданных.ПолноеИмя(), "ПланВидовРасчета") > 0
	 Или Найти(ОбъектМетаданных.ПолноеИмя(), "ПланСчетов") > 0
	 Или Найти(ОбъектМетаданных.ПолноеИмя(), "ПланВидовХарактеристик") > 0
	 Или Найти(ОбъектМетаданных.ПолноеИмя(), "Задача") > 0
	 Или Найти(ОбъектМетаданных.ПолноеИмя(), "БизнесПроцесс") > 0
	 	 тогда
		 СписокЗначений.Добавить(ЗначениеПоля.Значение);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьСписокПолейОтчета(ФормаОтчета, ЭлементРасшифровки, СписокПолей, ЗначенияРодителей)
	
	// Составим полный список полей 
	Для Каждого ДоступноеПолеГруппировки Из ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы Цикл
		Если ДоступноеПолеГруппировки.Таблица тогда
			Продолжить;
		КонецЕсли;
		Если СписокПолей.НайтиПоЗначению(Строка(ДоступноеПолеГруппировки.Поле)) = Неопределено тогда
			СписокПолей.Добавить(Строка(ДоступноеПолеГруппировки.Поле), ДоступноеПолеГруппировки.Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	//  Удалим Из списка поля который уже используется в родителях
	МассивПолейРодителей = Новый Массив;
	ФункцииОтчетовКлиентСервер.ДобавитьРодителей(ЭлементРасшифровки, ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, МассивПолейРодителей);
	Для Каждого ЗначениеРодителя Из МассивПолейРодителей Цикл
		Если ТипЗнч(ЗначениеРодителя) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") тогда
			МассивПолей = ЗначениеРодителя.ПолучитьПоля();
			Для Каждого ЗначениеПоля Из МассивПолей Цикл
				ЭлементСписка = СписокПолей.НайтиПоЗначению(Строка(ЗначениеПоля.Поле));
				Если ЭлементСписка <> Неопределено тогда
					СписокПолей.Удалить(ЭлементСписка);
					ЗначенияРодителей.Добавить(Новый Структура("Значение,Поле", ЗначениеПоля.Значение, ЗначениеПоля.Поле));
				КонецЕсли;
			КонецЦикла
		ИначеЕсли ТипЗнч(ЗначениеРодителя) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
			ЗначенияРодителей.Добавить(Новый Структура("Значение,Поле", ЗначениеРодителя.Значение, ЗначениеРодителя.Поле));
		КонецЕсли;
	КонецЦикла;

	//  Удалим Из списка поля который уже используется в отборах с видом сравнения "равно"
	Для Каждого ЭлементНастройки Из ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") тогда
			ЭлементВариантаНастройки = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
			Если ЭлементВариантаНастройки = Неопределено тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементНастройки.Использование тогда 
				ЭлементНастройки.ЛевоеЗначение = ЭлементВариантаНастройки.ЛевоеЗначение;
				ЗначенияРодителей.Добавить(ЭлементНастройки);
			КонецЕсли;
			Если ЭлементНастройки.Использование и ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно тогда
				ЭлементСписка = СписокПолей.НайтиПоЗначению(Строка(ЭлементНастройки.ЛевоеЗначение));
				Если ЭлементСписка <> Неопределено тогда
					СписокПолей.Удалить(ЭлементСписка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;		
		
	Для Каждого ЭлементНастройки Из ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") тогда
			Если ЭлементНастройки.Использование тогда 
				ЗначенияРодителей.Добавить(ЭлементНастройки);
			КонецЕсли;
			Если ЭлементНастройки.Использование и ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно тогда
				ЭлементСписка = СписокПолей.НайтиПоЗначению(Строка(ЭлементНастройки.ЛевоеЗначение));
				Если ЭлементСписка <> Неопределено тогда
					СписокПолей.Удалить(ЭлементСписка);
					ЗначенияРодителей.Добавить(ЗначениеРодителя);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;		
	
КонецПроцедуры 

Процедура ДобавитьЭлементыФормы(ФормаОтчета, ОтчетОбъект)
	
	Вариант = ФормаОтчета.Элементы.Найти("НаименованиеТекущегоВарианта");
	Если Вариант <> Неопределено тогда 
		Вариант.ТолькоПросмотр      = ложь;
		Вариант.КнопкаВыбора        = ложь;
		Вариант.КнопкаОткрытия      = ложь;
		Вариант.КнопкаОчистки       = ложь;
		Вариант.КнопкаРегулирования = ложь;
		Вариант.КнопкаСпискаВыбора  = истина;
		Вариант.ПоложениеЗаголовка  = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Вариант.АвтоПереносСтрок    = истина;
	КонецЕсли;
	
	ВерхняяКоманднаяПанель = ФормаОтчета.Элементы.Найти("ГруппаНастроекПользователя");
	
	Если ВерхняяКоманднаяПанель <> Неопределено и НЕ ФормаОтчета.РежимРасшифровки тогда
		
		//Элемент выбора варианта отчета
		
		Если НЕ ФормаОтчета.РежимРасшифровки тогда
			
			// Элемент выбора пользовательской настройки отчета
		
			ОткрытьНастройкуПользователя                       = ФормаОтчета.Элементы.Добавить("ОткрытьНастройкуПользователя", Тип("КнопкаФормы"), ВерхняяКоманднаяПанель);
			ОткрытьНастройкуПользователя.ТолькоВоВсехДействиях = ложь;
			ОткрытьНастройкуПользователя.ИмяКоманды            = "ОткрытьНастройкуПользователя";
			Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение И ПравоДоступа("Вывод", Метаданные) тогда
				ОткрытьНастройкуПользователя                       = ФормаОтчета.Элементы.Добавить("ОтправитьОтчетПоПочте", Тип("КнопкаФормы"), ВерхняяКоманднаяПанель);
				ОткрытьНастройкуПользователя.ТолькоВоВсехДействиях = ложь;
				ОткрытьНастройкуПользователя.ИмяКоманды            = "ОтправитьОтчетПоПочте";
			КонецЕсли;
			
			ВключитьПанельНастроекПользователя                       = ФормаОтчета.Элементы.Добавить("ВключитьПанельНастроекПользователя", Тип("КнопкаФормы"), ВерхняяКоманднаяПанель);
			ВключитьПанельНастроекПользователя.ТолькоВоВсехДействиях = ложь;
			ВключитьПанельНастроекПользователя.ИмяКоманды            = "ВключитьПанельНастроекПользователя";
			
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура УдалитьПодчиненныеЭлементы(Группа, ЭлементыФормы)
	
	Для Каждого ПодчиненыйЭлемент Из Группа.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(ПодчиненыйЭлемент) <> Тип("ГруппаФормы") тогда 
			ЭлементыФормы.Удалить(ПодчиненыйЭлемент);
		Иначе
			УдалитьПодчиненныеЭлементы(ПодчиненыйЭлемент, ЭлементыФормы);
			ЭлементыФормы.Удалить(ПодчиненыйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерерисоватьПравуюПанель(ФормаОтчета, КомпоновщикНастроек)
	
	Если ФормаОтчета.РежимРасшифровки тогда
		//НарисоватьЭлементыУправленияРасшифровки(ФормаОтчета, КомпоновщикНастроек);
		Возврат;
	Иначе
		//РЕКВИЗИТЫ
		
		МассивРеквизитов = Новый Массив;
		СписокРеквизитов = Новый СписокЗначений;
		ТипыСписковЗначений    = Новый Соответствие;
		ЕстьГруппировки        = ложь;
		ЕстьУсловноеОформление = ложь;
		ЕстьПоляВыбора         = ложь;
		ЕстьПорядок            = ложь;
		ЕстьПараметрыДанных    = ложь;
		ЕстьСтандартныйПериод  = ложь;
		ЕстьТаблицаОтбора      = ложь;
		ЕстьТаблицаГруппировка = ложь;
		
		СвязиПоТипу = Новый ТаблицаЗначений;
		СвязиПоТипу.Колонки.Добавить("ИмяЭлемента");
		СвязиПоТипу.Колонки.Добавить("СвязанС");
		СвязиПоТипу.Колонки.Добавить("НомерСубконто");
		
		СвязиПараметровВыбора = Новый ТаблицаЗначений;
		СвязиПараметровВыбора.Колонки.Добавить("ИмяЭлемента");
		СвязиПараметровВыбора.Колонки.Добавить("РеквизитСвязи");
		СвязиПараметровВыбора.Колонки.Добавить("ПутьКДанным");
		СвязиПараметровВыбора.Колонки.Добавить("Действие");
		
		Для Каждого ЭлементНастройки Из ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			
			ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
			Если ЭлементНастройкиВарианта = Неопределено Или ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда 
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЭлементНастройкиВарианта) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
				
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("Булево"));
				ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("ИспользованиеОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), ОписаниеТипа, "", "Отбор"));
				
			ИначеЕсли ТипЗнч(ЭлементНастройкиВарианта) = Тип("ЭлементОтбораКомпоновкиДанных") тогда
				
				Если ЭлементНастройкиВарианта.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный тогда
					Продолжить;
				КонецЕсли;
				
				МассивТипов = Новый Массив;
				Если НЕ (ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке 
					Или ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
					Или ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке 
					Или ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии) тогда
					ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора, ЭлементНастройкиВарианта.ЛевоеЗначение);
					Если ДоступноеПоле <> Неопределено тогда
						Для Каждого ТипОтбора Из ДоступноеПоле.ТипЗначения.Типы() Цикл
							Если ТипОтбора = Тип("ПолеКомпоновкиДанных") тогда
								Продолжить;
							КонецЕсли;
							МассивТипов.Добавить(ТипОтбора);
						КонецЦикла;
						Если Строка(ДоступноеПоле.СвязьПоТипу.Поле) <> "" тогда
							ПользовательскийЭлементОтбора = ФункцииОтчетовКлиентСервер.НайтиПользовательскийОтборПоПолю(ФормаОтчета.Отчет.КомпоновщикНастроек, ДоступноеПоле.СвязьПоТипу.Поле);
							Если ПользовательскийЭлементОтбора = Неопределено тогда 
								ПользовательскийЭлементОтбора = ФункцииОтчетовКлиентСервер.НайтиПользовательскийПараметрПоПараметру(КомпоновщикНастроек, ДоступноеПоле.СвязьПоТипу.Поле)
							КонецЕсли;
							Если ПользовательскийЭлементОтбора <>  Неопределено тогда
								СтрокаСвязи = СвязиПоТипу.Добавить();
								СтрокаСвязи.ИмяЭлемента   = ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
								СтрокаСвязи.СвязанС       = ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ПользовательскийЭлементОтбора.ИдентификаторПользовательскойНастройки);
								СтрокаСвязи.НомерСубконто = ДоступноеПоле.СвязьПоТипу.ЭлементСвязи;
							КонецЕсли;
						КонецЕсли;
						Для Каждого СтрокаСвязи Из ДоступноеПоле.ПолучитьСвязиПараметровВыбора() Цикл
							ПользовательскийЭлементОтбора = ФункцииОтчетовКлиентСервер.НайтиПользовательскийОтборПоПолю(ФормаОтчета.Отчет.КомпоновщикНастроек, СтрокаСвязи.Поле);
							Если ПользовательскийЭлементОтбора = Неопределено тогда 
								ПользовательскийЭлементОтбора = ФункцииОтчетовКлиентСервер.НайтиПользовательскийПараметрПоПараметру(КомпоновщикНастроек, СтрокаСвязи.Поле)
							КонецЕсли;
							Если ПользовательскийЭлементОтбора <> Неопределено тогда
								СтрокаСвязиПараметров = СвязиПараметровВыбора.Добавить();
								СтрокаСвязиПараметров.ИмяЭлемента   = ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
								СтрокаСвязиПараметров.ПутьКДанным   = ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ПользовательскийЭлементОтбора.ИдентификаторПользовательскойНастройки);
								СтрокаСвязиПараметров.РеквизитСвязи = СтрокаСвязи.Имя;
								СтрокаСвязиПараметров.Действие      = СтрокаСвязи.ИзменениеЗначения;
							КонецЕсли;
							ПользовательскийЭлементОтбора = Неопределено;
						КонецЦикла;
						
					КонецЕсли;
				ИначеЕсли ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке 
					Или ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
					Или ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке 
					Или ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии тогда
					ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора, ЭлементНастройкиВарианта.ЛевоеЗначение);
					Если ДоступноеПоле <> Неопределено тогда
						ТипыСписковЗначений.Вставить("Отбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), ДоступноеПоле.ТипЗначения);  
						Если Строка(ДоступноеПоле.СвязьПоТипу.Поле) <> "" тогда
							
							ПользовательскийЭлементОтбора = ФункцииОтчетовКлиентСервер.НайтиПользовательскийОтборПоПолю(ФормаОтчета.Отчет.КомпоновщикНастроек, ДоступноеПоле.СвязьПоТипу.Поле);
							Если ПользовательскийЭлементОтбора = Неопределено тогда 
								ПользовательскийЭлементОтбора = ФункцииОтчетовКлиентСервер.НайтиПользовательскийПараметрПоПараметру(КомпоновщикНастроек, ДоступноеПоле.СвязьПоТипу.Поле)
							КонецЕсли;
							Если ПользовательскийЭлементОтбора <> Неопределено тогда
								СтрокаСвязи = СвязиПоТипу.Добавить();
								СтрокаСвязи.ИмяЭлемента   = ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
								СтрокаСвязи.СвязанС       = ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ПользовательскийЭлементОтбора.ИдентификаторПользовательскойНастройки);
								СтрокаСвязи.НомерСубконто = ДоступноеПоле.СвязьПоТипу.ЭлементСвязи;
							КонецЕсли;
						КонецЕсли;
						
						Для Каждого СтрокаСвязи Из ДоступноеПоле.ПолучитьСвязиПараметровВыбора() Цикл
							ПользовательскийЭлементОтбора = ФункцииОтчетовКлиентСервер.НайтиПользовательскийОтборПоПолю(ФормаОтчета.Отчет.КомпоновщикНастроек, СтрокаСвязи.Поле);
							Если ПользовательскийЭлементОтбора = Неопределено тогда 
								ПользовательскийЭлементОтбора = ФункцииОтчетовКлиентСервер.НайтиПользовательскийПараметрПоПараметру(КомпоновщикНастроек, СтрокаСвязи.Поле)
							КонецЕсли;
							Если ПользовательскийЭлементОтбора <> Неопределено тогда
								СтрокаСвязиПараметров = СвязиПараметровВыбора.Добавить();
								СтрокаСвязиПараметров.ИмяЭлемента   = ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
								СтрокаСвязиПараметров.ПутьКДанным   = ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ПользовательскийЭлементОтбора.ИдентификаторПользовательскойНастройки);
								СтрокаСвязиПараметров.РеквизитСвязи = СтрокаСвязи.Имя;
								СтрокаСвязиПараметров.Действие      = СтрокаСвязи.ИзменениеЗначения;
							КонецЕсли;
							ПользовательскийЭлементОтбора = Неопределено;
						КонецЦикла;
						
					КонецЕсли;
					МассивТипов.Добавить(Тип("СписокЗначений"));
				КонецЕсли;
				МассивТипаВыбора = Новый Массив;
				МассивТипаВыбора.Добавить(Тип("Булево"));
				ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("ИспользованиеОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), ОписаниеТипаВыбора, "", "Вид отбора"));
				ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("Отбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), ОписаниеТипа, "", "Отбор"));
				
			ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ГруппировкаКомпоновкиДанных") Или 
				ТипЗнч(ЭлементНастройки) = Тип("ТаблицаКомпоновкиДанных") Или 
				ТипЗнч(ЭлементНастройки) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Или 
				ТипЗнч(ЭлементНастройки) = Тип("ДиаграммаКомпоновкиДанных") Или
				ТипЗнч(ЭлементНастройки) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
				
				ЕстьГруппировки = истина;
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("Булево"));
				ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипов);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("ИспользованиеЭлементаСтруктуры_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), ОписаниеТипаВыбора, "", "Условное оформление"));
				
			ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") тогда
				ЕстьУсловноеОформление = истина;
				
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("Булево"));
				ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипов);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("УсловноеОформление_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), ОписаниеТипаВыбора, "", "Условное оформление"));
			ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ВыбранныеПоляКомпоновкиДанных") тогда
				ЕстьПоляВыбора = истина;
				
				МассивТипаВыбора = Новый Массив;
				МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
				ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("ТаблицаПолейВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), ОписаниеТипаВыбора, "", "Таблица полей выбора"));
				
				МассивТипаВыбора = Новый Массив;
				МассивТипаВыбора.Добавить(Тип("Строка"));
				ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("Идентификатор", ОписаниеТипаВыбора, "ТаблицаПолейВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), "Идентификатора пользовательской настройки"));
				
				МассивТипаВыбора = Новый Массив;
				МассивТипаВыбора.Добавить(Тип("Строка"));
				ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("Представление", ОписаниеТипаВыбора, "ТаблицаПолейВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), "Представление пользовательской настройки"));
				
				МассивТипаВыбора = Новый Массив;
				МассивТипаВыбора.Добавить(Тип("Булево"));
				ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("Использование", ОписаниеТипаВыбора, "ТаблицаПолейВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), "ПризнакИспользования"));
				
				МассивТипаВыбора = Новый Массив;
				МассивТипаВыбора.Добавить(Тип("Строка"));
				ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("ИдентификаторРодителя", ОписаниеТипаВыбора, "ТаблицаПолейВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), "ПризнакИспользования"));
				
				МассивТипаВыбора = Новый Массив;
				МассивТипаВыбора.Добавить(Тип("Булево"));
				ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭтоГруппа", ОписаниеТипаВыбора, "ТаблицаПолейВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), "ПризнакИспользования"));
			ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ПорядокКомпоновкиДанных") тогда
				ЕстьПорядок = истина;
				
				МассивТипаВыбора = Новый Массив;
				МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
				ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("ТаблицаПорядка_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), ОписаниеТипаВыбора, "", "Таблица полей выбора"));
				
				МассивТипаВыбора = Новый Массив;
				МассивТипаВыбора.Добавить(Тип("Строка"));
				ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("Идентификатор", ОписаниеТипаВыбора, "ТаблицаПорядка_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), "Идентификатора пользовательской настройки"));
				
				МассивТипаВыбора = Новый Массив;
				МассивТипаВыбора.Добавить(Тип("Строка"));
				ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("Представление", ОписаниеТипаВыбора, "ТаблицаПорядка_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), "Представление пользовательской настройки"));
				
				МассивТипаВыбора = Новый Массив;
				МассивТипаВыбора.Добавить(Тип("Булево"));
				ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("Использование", ОписаниеТипаВыбора, "ТаблицаПорядка_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), "ПризнакИспользования"));
			ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ТипЗнч(ЭлементНастройки.Значение) = Тип("СтандартныйПериод") тогда
				МинимальнаяПериодичность = ФормаОтчета.НастройкиОтчета.СоответствиеПериодичностиПараметров[ЭлементНастройкиВарианта.Параметр];
				
				ЕстьСтандартныйПериод = Истина;
				
				Типы = Новый Массив;
				Типы.Добавить(Тип("ПеречислениеСсылка.ДоступныеПериодыОтчета"));
				ОписаниеТипа = Новый ОписаниеТипов(Типы);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("ВидПериода_" +  ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), ОписаниеТипа, , "ВидПериода"));
				
				Типы = Новый Массив;
				Типы.Добавить(Тип("Строка"));
				ОписаниеТипа = Новый ОписаниеТипов(Типы,,Новый КвалификаторыСтроки(70));
				МассивРеквизитов.Добавить(Новый РеквизитФормы("Период_" +  ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), ОписаниеТипа, , "Период"));
				
			ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ТипЗнч(ЭлементНастройки.Значение) <> Тип("СтандартныйПериод") тогда
				ЕстьПараметрыДанных = Истина;
				ДостпныйПараметр = ФункцииОтчетовКлиентСервер.ПолучитьДоступныйПараметр(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры, ЭлементНастройкиВарианта.Параметр); 
				Если ДостпныйПараметр <> Неопределено тогда
					Если ДостпныйПараметр.ДоступенСписокЗначений Тогда
						ОписаниеТипа = Новый ОписаниеТипов(ДостпныйПараметр.Тип);
					Иначе
						ОписаниеТипа = Новый ОписаниеТипов(ДостпныйПараметр.ТипЗначения);
					КонецЕсли;
					ПользовательскийЭлемент = ФункцииОтчетовКлиентСервер.НайтиПользовательскийПараметрПоПараметру(ФормаОтчета.Отчет.КомпоновщикНастроек, ДостпныйПараметр.СвязьПоТипу.Поле);
					Если ПользовательскийЭлементОтбора <>  Неопределено тогда 
						ПользовательскийЭлементОтбора = ФункцииОтчетовКлиентСервер.НайтиПользовательскийОтборПоПолю(КомпоновщикНастроек, ДоступноеПоле.СвязьПоТипу.Поле)
					КонецЕсли;
					
					Если ПользовательскийЭлементОтбора <>  Неопределено тогда
						СтрокаСвязи = СвязиПоТипу.Добавить();
						СтрокаСвязи.ИмяЭлемента   = ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
						СтрокаСвязи.СвязанС       = ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ПользовательскийЭлементОтбора.ИдентификаторПользовательскойНастройки);
						СтрокаСвязи.НомерСубконто = ДоступноеПоле.СвязьПоТипу.ЭлементСвязи;
					КонецЕсли;
					
					Для Каждого СтрокаСвязи Из ДостпныйПараметр.ПолучитьСвязиПараметровВыбора() Цикл
						ПользовательскийЭлементОтбора = ФункцииОтчетовКлиентСервер.НайтиПользовательскийОтборПоПолю(ФормаОтчета.Отчет.КомпоновщикНастроек, СтрокаСвязи.Поле);
						Если ПользовательскийЭлементОтбора = Неопределено тогда 
							ПользовательскийЭлементОтбора = ФункцииОтчетовКлиентСервер.НайтиПользовательскийПараметрПоПараметру(КомпоновщикНастроек, ДоступноеПоле.СвязьПоТипу.Поле)
						КонецЕсли;
						Если ПользовательскийЭлементОтбора <> Неопределено тогда
							СтрокаСвязиПараметров = СвязиПараметровВыбора.Добавить();
							СтрокаСвязиПараметров.ИмяЭлемента = ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
							СтрокаСвязиПараметров.ПутьКДанным = ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ПользовательскийЭлементОтбора.ИдентификаторПользовательскойНастройки);
							СтрокаСвязиПараметров.Реквизит    = СтрокаСвязи.Имя;
							СтрокаСвязиПараметров.Действие    = СтрокаСвязи.ИзменениеЗначения;
						КонецЕсли;
						ПользовательскийЭлементОтбора = Неопределено;
					КонецЦикла;
					
				КонецЕсли;
				Если ОписаниеТипа = Неопределено тогда
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(ТипЗнч(ЭлементНастройкиВарианта.Значение));
					ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
				КонецЕсли;
				МассивРеквизитов.Добавить(Новый РеквизитФормы("Параметр_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), ОписаниеТипа, "", "Параметр"));
				
			ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ОтборКомпоновкиДанных") тогда
				ЕстьТаблицаОтбора = ложь;
			ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("СтруктураНастроекКомпоновкиДанных") тогда
				ЕстьГруппировки = истина;
				
				МассивТипаВыбора = Новый Массив;
				МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
				ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("НастройкаГруппировок_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), ОписаниеТипаВыбора, "", "Таблица полей выбора"));
				
				МассивТипаВыбора = Новый Массив;
				МассивТипаВыбора.Добавить(Тип("Строка"));
				ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("Идентификатор", ОписаниеТипаВыбора, "НастройкаГруппировок_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), "Идентификатора пользовательской настройки"));
				
				МассивТипаВыбора = Новый Массив;
				МассивТипаВыбора.Добавить(Тип("Строка"));
				ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("Представление", ОписаниеТипаВыбора, "НастройкаГруппировок_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), "Представление пользовательской настройки"));
				
				МассивТипаВыбора = Новый Массив;
				МассивТипаВыбора.Добавить(Тип("Булево"));
				ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
				МассивРеквизитов.Добавить(Новый РеквизитФормы("Использование", ОписаниеТипаВыбора, "НастройкаГруппировок_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), "ПризнакИспользования"));
				
			КонецЕсли;
		КонецЦикла;
		
		ЕстьРеквизитГруппировки = ложь;
		УдаляемыеРеквизиты = Новый Массив;
		МассивРеквизитовФормы = ФормаОтчета.ПолучитьРеквизиты();
		Для Каждого Реквизит Из МассивРеквизитовФормы Цикл
			Если Найти(Реквизит.Имя, "Отбор_") > 0 
				Или Найти(Реквизит.Имя, "ВидОтбора_") > 0 
				Или Найти(Реквизит.Имя, "Период_") > 0 
				Или Найти(Реквизит.Имя, "ВидПериода_") > 0 
				Или  Найти(Реквизит.Имя, "УсловноеОформление_") > 0 
				Или  Найти(Реквизит.Имя, "УсловноеОформлениеНадпись_") > 0
				Или Найти(Реквизит.Имя, "ТаблицаПолейВыбора_") > 0 
				Или Найти(Реквизит.Имя, "ИспользованиеОтбора_") > 0 
				Или Найти(Реквизит.Имя, "ТаблицаПорядка_") > 0 
				Или Найти(Реквизит.Имя, "ИспользованиеЭлементаСтруктуры_") > 0 
				Или Найти(Реквизит.Имя, "НастройкаГруппировок_") > 0 
				Или Найти(Реквизит.Имя, "Параметр_") > 0 
				тогда
				УдаляемыеРеквизиты.Добавить(Реквизит.Имя);
			КонецЕсли;
		КонецЦикла;
		
		ФормаОтчета.ИзменитьРеквизиты(МассивРеквизитов, УдаляемыеРеквизиты);
		
		Для Каждого ТипСпискаЗначений Из ТипыСписковЗначений Цикл
			ФормаОтчета[ТипСпискаЗначений.Ключ].ТипЗначения = ТипСпискаЗначений.Значение;
			ФормаОтчета[ТипСпискаЗначений.Ключ].Очистить();
		КонецЦикла;
		
		//КОММАНДЫ
		
		//удалим предыдущие команды
		ЕстьКоманда = ложь;
		ЕстьКомандаПоляВыбора = ложь;
		СписокУдаляемыхКоманд = Новый Массив;
		Для Каждого Команда Из ФормаОтчета.Команды Цикл
			Если Найти(Команда.Имя, "ЗагрузитьСписок_") > 0 
				Или Найти(Команда.Имя, "СохранитьСписок_") > 0 
				Или Найти(Команда.Имя, "ПереместитьВверх_") > 0 
				Или Найти(Команда.Имя, "ПереместитьВниз_") > 0 
				Или Найти(Команда.Имя, "Подбор_") > 0 
				Или Найти(Команда.Имя, "ПереместитьГруппировкуВверх_") > 0 
				Или Найти(Команда.Имя, "ПереместитьГруппировкуВниз_") > 0 
				тогда		 	
				СписокУдаляемыхКоманд.Добавить(Команда);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Команда Из СписокУдаляемыхКоманд Цикл
			ФормаОтчета.Команды.Удалить(Команда);
		КонецЦикла;
		
		//добавим требуемые команды для отбора
		Для Каждого ЭлементНастройки Из ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			
			ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
			Если ЭлементНастройкиВарианта = Неопределено тогда 
				Продолжить;
			КонецЕсли; 
			
			Если ТипЗнч(ЭлементНастройкиВарианта) = Тип("ЭлементОтбораКомпоновкиДанных") 
				и (ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке 
				Или ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
				Или ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке 
				Или ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии) тогда
				
				Если ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
					Продолжить;
				КонецЕсли;
				
				КомандаЗагрузитьСписок             = ФормаОтчета.Команды.Добавить("ЗагрузитьСписок_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки));
				КомандаЗагрузитьСписок.Действие    = "Подключаемый_УниверсальнаяПроцедураКомандыУниверсальныйОбработчик";
				КомандаЗагрузитьСписок.Заголовок   = "Загрузить список";
				КомандаЗагрузитьСписок.Картинка    = БиблиотекаКартинок.ОткрытьФайл;
				КомандаЗагрузитьСписок.Отображение = ОтображениеКнопки.Картинка;
				
				КомандаСохранитьСписок             = ФормаОтчета.Команды.Добавить("СохранитьСписок_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки));
				КомандаСохранитьСписок.Действие    = "Подключаемый_УниверсальнаяПроцедураКомандыУниверсальныйОбработчик";
				КомандаСохранитьСписок.Заголовок   = "Сохранить список";
				КомандаСохранитьСписок.Картинка    = БиблиотекаКартинок.СохранитьФайл;
				КомандаСохранитьСписок.Отображение = ОтображениеКнопки.Картинка;
				
				КомандаСохранитьСписок             = ФормаОтчета.Команды.Добавить("Подбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки));
				КомандаСохранитьСписок.Действие    = "Подключаемый_УниверсальнаяПроцедураКомандыУниверсальныйОбработчик";
				КомандаСохранитьСписок.Заголовок   = "Подбор";
				КомандаСохранитьСписок.Отображение = ОтображениеКнопки.Текст;
			ИначеЕсли ТипЗнч(ЭлементНастройкиВарианта) = Тип("ВыбранныеПоляКомпоновкиДанных") тогда
				КомандаПереместитьВверх             = ФормаОтчета.Команды.Добавить("ПоляВыбораПереместитьВверх_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки));
				КомандаПереместитьВверх.Действие    = "Подключаемый_УниверсальнаяПроцедураКомандыУниверсальныйОбработчик";
				КомандаПереместитьВверх.Заголовок   = "Переместить строку вверх";
				КомандаПереместитьВверх.Картинка    = БиблиотекаКартинок.ПереместитьВверх;
				КомандаПереместитьВверх.Отображение = ОтображениеКнопки.Картинка;
				
				КомандаПереместитьВверх             = ФормаОтчета.Команды.Добавить("ПоляВыбораПереместитьВниз_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки));
				КомандаПереместитьВверх.Действие    = "Подключаемый_УниверсальнаяПроцедураКомандыУниверсальныйОбработчик";
				КомандаПереместитьВверх.Заголовок   = "Переместить группировку вниз";
				КомандаПереместитьВверх.Картинка    = БиблиотекаКартинок.ПереместитьВниз;
				КомандаПереместитьВверх.Отображение = ОтображениеКнопки.Картинка;
			ИначеЕсли ТипЗнч(ЭлементНастройкиВарианта) = Тип("ПорядокКомпоновкиДанных") тогда
				КомандаПереместитьВверх             = ФормаОтчета.Команды.Добавить("ПорядокПереместитьВверх_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки));
				КомандаПереместитьВверх.Действие    = "Подключаемый_УниверсальнаяПроцедураКомандыУниверсальныйОбработчик";
				КомандаПереместитьВверх.Заголовок   = "Переместить строку вверх";
				КомандаПереместитьВверх.Картинка    = БиблиотекаКартинок.ПереместитьВверх;
				КомандаПереместитьВверх.Отображение = ОтображениеКнопки.Картинка;
				
				КомандаПереместитьВверх             = ФормаОтчета.Команды.Добавить("ПорядокПереместитьВниз_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки));
				КомандаПереместитьВверх.Действие    = "Подключаемый_УниверсальнаяПроцедураКомандыУниверсальныйОбработчик";
				КомандаПереместитьВверх.Заголовок   = "Переместить группировку вниз";
				КомандаПереместитьВверх.Картинка    = БиблиотекаКартинок.ПереместитьВниз;
				КомандаПереместитьВверх.Отображение = ОтображениеКнопки.Картинка;
				
			ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("СтруктураНастроекКомпоновкиДанных") тогда
				КомандаПереместитьВверх             = ФормаОтчета.Команды.Добавить("ПереместитьГруппировкуВверх_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки));
				КомандаПереместитьВверх.Действие    = "Подключаемый_УниверсальнаяПроцедураКомандыУниверсальныйОбработчик";
				КомандаПереместитьВверх.Заголовок   = "Переместить строку вверх";
				КомандаПереместитьВверх.Картинка    = БиблиотекаКартинок.ПереместитьВверх;
				КомандаПереместитьВверх.Отображение = ОтображениеКнопки.Картинка;
				
				КомандаПереместитьВверх             = ФормаОтчета.Команды.Добавить("ПереместитьГруппировкуВниз_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки));
				КомандаПереместитьВверх.Действие    = "Подключаемый_УниверсальнаяПроцедураКомандыУниверсальныйОбработчик";
				КомандаПереместитьВверх.Заголовок   = "Переместить группировку вниз";
				КомандаПереместитьВверх.Картинка    = БиблиотекаКартинок.ПереместитьВниз;
				КомандаПереместитьВверх.Отображение = ОтображениеКнопки.Картинка;
			КонецЕсли;
		КонецЦикла;
		
		ГруппаПраваяПанель = ФормаОтчета.Элементы.Найти("ПанельНастроекПользователя");
		
		Если ГруппаПраваяПанель <> Неопределено тогда
			УдалитьПодчиненныеЭлементы(ГруппаПраваяПанель, ФормаОтчета.Элементы);
			//ФормаОтчета.Элементы.Удалить(ГруппаПраваяПанель);
		КонецЕсли;
		
		ЕстьБыстрыйОтбор = ложь;
		ЕстьОтбор = ложь;
		Для Каждого ЭлементНастройки Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") 
				Или ТипЗнч(ЭлементНастройки) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
				ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
				
				Если ЭлементНастройкиВарианта = Неопределено Или ЭлементНастройкиВарианта.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный тогда 
					Продолжить;
				КонецЕсли; 
				
				Если ЭлементНастройкиВарианта.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
					ЕстьБыстрыйОтбор = истина;
				ИначеЕсли ЭлементНастройкиВарианта.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный тогда
					ЕстьОтбор = истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//ЭЛЕМЕНТЫ ФОРМЫ
		
		ПраваяПанель = ФормаОтчета.Элементы.Найти("ПанельНастроекПользователя");
		Если ПраваяПанель <> Неопределено тогда
			ОчиститьПанельБыстрыхНастроек(ФормаОтчета);
			МассивЭлементовПравойПанели = Новый Массив;
			Для Каждого Элемент Из ПраваяПанель.ПодчиненныеЭлементы Цикл
				МассивЭлементовПравойПанели.Добавить(Элемент);
			КонецЦикла;
			
			//Если есть потребность в правой панели создаем ее
			Если ЕстьБыстрыйОтбор Или ЕстьГруппировки Или ЕстьПараметрыДанных Или ЕстьПорядок Или ЕстьПоляВыбора Или ЕстьСтандартныйПериод тогда
				
				// Элемент управления периодом
				Если ЕстьСтандартныйПериод тогда
					НарисоватьЭлементУправленияСтандартнымПериодом(ФормаОтчета, ПраваяПанель, СвязиПоТипу, СвязиПараметровВыбора);
				КонецЕсли;
				
				Если ЕстьПараметрыДанных тогда
					НарисоватьЭлементУправленияПараметром(ФормаОтчета, ПраваяПанель, СвязиПоТипу, СвязиПараметровВыбора);
				КонецЕсли;
				
				Если ЕстьБыстрыйОтбор тогда
					
					ГруппаОтбора = ФормаОтчета.Элементы.Добавить("ГруппаОтборов", Тип("ГруппаФормы"), ПраваяПанель);
					ГруппаОтбора.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ГруппаОтбора.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
					ГруппаОтбора.Отображение = ОтображениеОбычнойГруппы.Линия;
					ГруппаОтбора.Заголовок = "Отборы";
					ГруппаОтбора.ОтображатьЗаголовок = Истина;
					
					Группа = ФормаОтчета.Элементы.Добавить("ГруппаОбщая", Тип("ГруппаФормы"), ГруппаОтбора);
					Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
					Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
					Группа.ОтображатьЗаголовок = Ложь;
					
					ГруппаНадпись = ФормаОтчета.Элементы.Добавить("ГруппаНадпись", Тип("ГруппаФормы"), Группа);
					ГруппаНадпись.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ГруппаНадпись.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
					ГруппаНадпись.Отображение = ОтображениеОбычнойГруппы.Нет;
					ГруппаНадпись.ОтображатьЗаголовок = Ложь;
					
					ГруппаПоле = ФормаОтчета.Элементы.Добавить("ГруппаПоле", Тип("ГруппаФормы"), Группа);
					ГруппаПоле.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ГруппаПоле.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
					ГруппаПоле.Отображение = ОтображениеОбычнойГруппы.Нет;
					ГруппаПоле.ОтображатьЗаголовок = Ложь;
					
					// добавим быстрый отбор
					Для Каждого ЭлементНастройки Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
						Если (ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") 
							Или ТипЗнч(ЭлементНастройки) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")) тогда
							ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
							Если ЭлементНастройкиВарианта = Неопределено тогда 
								Продолжить;
							КонецЕсли; 
							
							Если ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
								Продолжить;
							КонецЕсли;
							НарисоватьЭлементОбычногоОтбора(ЭлементНастройки, КомпоновщикНастроек, ФормаОтчета, ГруппаОтбора, ГруппаНадпись, ГруппаПоле, СвязиПоТипу, СвязиПараметровВыбора);
						КонецЕсли;
					КонецЦикла;
					
					// добавим связи по типу в элементы формы
					
					Для Каждого ЭлементСвязи Из СвязиПоТипу Цикл
						
						ЭлементЗависемый = ФормаОтчета.Элементы.Найти(ЭлементСвязи.ИмяЭлемента);
						ЭлементВедущий   = ФормаОтчета.Элементы.Найти(ЭлементСвязи.СвязанС);
						
						Если ЭлементЗависемый <> Неопределено и ЭлементВедущий <> Неопределено тогда
							ЭлементЗависемый.СвязьПоТипу = Новый СвязьПоТипу(ЭлементВедущий.ПутьКДанным, ЭлементСвязи.НомерСубконто);
						КонецЕсли;
						
					КонецЦикла;
					
					Для Каждого ЭлементСвязи Из СвязиПараметровВыбора Цикл
						
						ЭлементЗависемый = ФормаОтчета.Элементы.Найти(ЭлементСвязи.ИмяЭлемента);
						ЭлементВедущий   = ФормаОтчета.Элементы.Найти(ЭлементСвязи.ПутьКДанным);
						
						Если ЭлементЗависемый <> Неопределено и ЭлементВедущий <> Неопределено тогда
							МассивЭлемиентов = Новый Массив;
							
							// добавим предыдущие элементы 
							Для Каждого СвязьПараметра Из ЭлементЗависемый.СвязиПараметровВыбора Цикл
								МассивЭлемиентов.Добавить(СвязьПараметра);
							КонецЦикла;
							
							МассивЭлемиентов.Добавить(Новый СвязьПараметраВыбора(ЭлементСвязи.РеквизитСвязи, ЭлементВедущий.ПутьКДанным, ЭлементСвязи.Действие));
								
							ЭлементЗависемый.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивЭлемиентов);
						КонецЕсли;
						
					КонецЦикла;
					
					
				КонецЕсли;
				
				// добавляем таблицу управления группировками
				Если ЕстьГруппировки тогда
					НарисоватьЭлементУправленияГруппировками(ФормаОтчета, ПраваяПанель);
				КонецЕсли;
				
				Если ЕстьТаблицаОтбора тогда
					НарисоватьСсылкуЭлементУправленияОтбором(ФормаОтчета, ПраваяПанель);
				КонецЕсли;
				
				Если ЕстьУсловноеОформление тогда
					НарисоватьЭлементУправленияУсловнымОформлением(ФормаОтчета, ПраваяПанель);
				КонецЕсли;
				
				Если ЕстьПоляВыбора тогда
					НарисоватьЭлементУправленияПолямиВыбора(ФормаОтчета, ПраваяПанель);
				КонецЕсли;
				
				Если ЕстьПорядок тогда
					НарисоватьЭлементУправленияПорядком(ФормаОтчета, ПраваяПанель);
				КонецЕсли;
				
			КонецЕсли;
			
			Для Каждого Элемент Из МассивЭлементовПравойПанели Цикл
				ФормаОтчета.Элементы.Переместить(Элемент, ПраваяПанель);
			КонецЦикла;
		КонецЕсли;               
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьПанельБыстрыхНастроек(ФормаОтчета) 
	
	СписокУдаляемыхЭлементов = Новый Массив;
	
	Для Каждого Элемент Из ФормаОтчета.Элементы Цикл
		Если Прав(Элемент.Имя, 15) = "КонтекстноеМеню" тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") 
			И (Найти(Элемент.Имя, "ГруппаОтборов") > 0
			Или Найти(Элемент.Имя, "НастройкиВариантаОтчета") > 0
			Или Найти(Элемент.Имя, "ГруппаГруппировок") > 0  
			Или Найти(Элемент.Имя, "ГруппаСортировки") > 0
			Или Найти(Элемент.Имя, "ГруппаПараметра_") > 0 
			Или Найти(Элемент.Имя, "ГруппаПолейВыбора_") > 0 
			Или Найти(Элемент.Имя, "ГруппаОформлений") > 0 
			Или Найти(Элемент.Имя, "ГруппаПериод") > 0 
			Или Найти(Элемент.Имя, "ГруппаДата") > 0) Тогда
			СписокУдаляемыхЭлементов.Добавить(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		ФормаОтчета.Элементы.Удалить(Элемент);
	КонецЦикла;
	
КонецПроцедуры 

Процедура НарисоватьСсылкуЭлементУправленияОтбором(ФормаОтчета, ПраваяПанель)
	
	ПользовательскиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	Для Каждого ЭлементНастройки Из ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастройки) <> Тип("ОтборКомпоновкиДанных") тогда	
			Продолжить;
		КонецЕсли;
		
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено Или ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
			Продолжить;
		КонецЕсли;
		ГиперСсылка = ФормаОтчета.Элементы.Добавить("РедактироватьОтбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ДекорацияФормы"), ПраваяПанель);
		ГиперСсылка.Вид = ВидДекорацииФормы.Надпись;
		ГиперСсылка.ГиперСсылка = истина;
		ГиперСсылка.Заголовок = ?(ЭлементНастройкиВарианта.ПредставлениеПользовательскойНастройки = "", "Отчет", ЭлементНастройкиВарианта.ПредставлениеПользовательскойНастройки) + ": Открыть форму редактирования отбора";
	КонецЦикла;
КонецПроцедуры

Процедура НарисоватьЭлементУправленияПараметром(ФормаОтчета, ПраваяПанель, СвязиПоТипу, СвязиПараметровВыбора)
	
	ПользовательскиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Для Каждого ЭлементНастройки Из ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастройки) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") тогда	
			Продолжить;
		КонецЕсли;
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено Или ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементНастройки.Значение) = Тип("СтандартныйПериод") тогда
			Продолжить;
		КонецЕсли;
	
		Группа = ФормаОтчета.Элементы.Добавить("ГруппаПараметра_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ГруппаФормы"), ПраваяПанель);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.ОтображатьЗаголовок = ложь;
		Заголовок               = ЭлементНастройкиВарианта.ПредставлениеПользовательскойНастройки;
		ЗначениеПараметраБулево = ТипЗнч(ЭлементНастройкиВарианта.Значение) = Тип("Булево");
		Если Заголовок = "" тогда
			ДостпныйПараметр = ФункцииОтчетовКлиентСервер.ПолучитьДоступныйПараметр(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры, ЭлементНастройкиВарианта.Параметр); 
			Если ДостпныйПараметр <> Неопределено тогда
				Заголовок = ДостпныйПараметр.Заголовок;
			КонецЕсли;
		КонецЕсли;
		Группа.Заголовок = Заголовок + ":";
		Параметр = ФормаОтчета.Элементы.Добавить("ПолеПараметр_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ПолеФормы"), Группа);
		Параметр.Вид                 = ?(ЗначениеПараметраБулево, ВидПоляФормы.ПолеФлажка, ВидПоляФормы.ПолеВвода);
		Параметр.ПутьКДанным         = "Параметр_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		Параметр.ПоложениеЗаголовка  = ПоложениеЗаголовкаЭлементаФормы.Лево; //?(ЗначениеПараметраБулево, ПоложениеЗаголовкаЭлементаФормы.Право, ПоложениеЗаголовкаЭлементаФормы.Лево);
		Параметр.Заголовок           = Заголовок;
		Если НЕ ЗначениеПараметраБулево тогда
			Параметр.КнопкаВыбора        = истина;
			Параметр.КнопкаОткрытия      = ложь;
			Параметр.КнопкаОчистки       = ложь;
			Параметр.КнопкаРегулирования = ложь;
			Параметр.КнопкаСпискаВыбора  = ложь;
			Если ДостпныйПараметр <> Неопределено тогда
				Если ДостпныйПараметр.ДоступенСписокЗначений Тогда
					КоличествоСтрокЗаголовка = СтрДлина(Параметр.Заголовок) / 25;
					Если Цел(КоличествоСтрокЗаголовка) <> КоличествоСтрокЗаголовка Тогда
						КоличествоСтрокЗаголовка = Цел(КоличествоСтрокЗаголовка) + 1;
					КонецЕсли;
					Параметр.ВысотаЗаголовка = КоличествоСтрокЗаголовка;
					ФормаОтчета[Параметр.ПутьКДанным].ТипЗначения = ДостпныйПараметр.ТипЗначения;
				КонецЕсли;
				Если ДостпныйПараметр.ДоступныеЗначения <> Неопределено И ТипЗнч(ДостпныйПараметр.ДоступныеЗначения) = Тип("СписокЗначений") Тогда
					Параметр.КнопкаСпискаВыбора  = истина;
					Параметр.КнопкаВыбора        = ложь;
					Параметр.РежимВыбораИзСписка = истина;
					Для Каждого ДоступноеЗначение Из ДостпныйПараметр.ДоступныеЗначения Цикл
						Параметр.СписокВыбора.Добавить(ДоступноеЗначение.Значение, ДоступноеЗначение.Представление);
					КонецЦикла;
				КонецЕсли;
				Параметр.БыстрыйВыбор         = ДостпныйПараметр.БыстрыйВыбор;
				//Параметр.ВыборГруппИЭлементов = ДостпныйПараметр.ВыборГруппИЭлементов;				
				Параметр.Маска                = ДостпныйПараметр.Маска;
				Параметр.ФормаВыбора          = ДостпныйПараметр.ФормаВыбора;
				Параметр.ФорматРедактирования = ДостпныйПараметр.ФорматРедактирования;
				ПодставитьЗначениеИдентификатораВСвязьПоТипу(ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), "ПолеПараметр_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), СвязиПоТипу, СвязиПараметровВыбора);
			КонецЕсли;
			Параметр.УстановитьДействие("Очистка",  "Подключаемый_ОчисткаУниверсальныйОбработчик");
		КонецЕсли;
		Параметр.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииУниверсальныйОбработчик");
	
	КонецЦикла;
	
КонецПроцедуры

Процедура НарисоватьЭлементУправленияСтандартнымПериодом(ФормаОтчета, ПраваяПанель, СвязиПоТипу, СвязиПараметровВыбора)
	
	ПользовательскиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Для Каждого ЭлементНастройки Из ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастройки) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") тогда	
			Продолжить;
		КонецЕсли;
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено Или ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементНастройкиВарианта.Значение) <> Тип("СтандартныйПериод") тогда
			Продолжить;
		КонецЕсли;
		
		Группа = ФормаОтчета.Элементы.Добавить("ГруппаПериод_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройкиВарианта.ИдентификаторПользовательскойНастройки) , Тип("ГруппаФормы"), ПраваяПанель);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.ОтображатьЗаголовок = ложь;
		
		Заголовок = ЭлементНастройкиВарианта.ПредставлениеПользовательскойНастройки;
		
		Если Заголовок = "" тогда
			ДостпныйПараметр = ФункцииОтчетовКлиентСервер.ПолучитьДоступныйПараметр(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры, ЭлементНастройкиВарианта.Параметр); 
			Если ДостпныйПараметр <> Неопределено тогда
				Заголовок = ДостпныйПараметр.Заголовок;
			КонецЕсли;
		КонецЕсли;
		Группа.Заголовок = Заголовок;
		
		//ВидПериода
		ВидПериода = ФормаОтчета.Элементы.Добавить("ВидПериода_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройкиВарианта.ИдентификаторПользовательскойНастройки), Тип("ПолеФормы"), Группа);
		ВидПериода.Вид                  = ВидПоляФормы.ПолеВвода;
		ВидПериода.ПутьКДанным          = "ВидПериода_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройкиВарианта.ИдентификаторПользовательскойНастройки);
		ВидПериода.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Лево;
		ВидПериода.РедактированиеТекста = ложь;
		ВидПериода.Заголовок            = Заголовок;
		ВидПериода.КнопкаВыбора         = ложь;
		ВидПериода.КнопкаОткрытия       = ложь;
		ВидПериода.КнопкаОчистки        = ложь;
		ВидПериода.КнопкаРегулирования  = ложь;
		ВидПериода.КнопкаСпискаВыбора   = Истина;
		ВидПериода.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииУниверсальныйОбработчик");
		
		//Период
		Период                      = ФормаОтчета.Элементы.Добавить("Период_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройкиВарианта.ИдентификаторПользовательскойНастройки), Тип("ПолеФормы"), Группа);
		Период.Вид                  = ВидПоляФормы.ПолеВвода;
		Период.ПутьКДанным          = "Период_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройкиВарианта.ИдентификаторПользовательскойНастройки);
		Период.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Период.КнопкаВыбора         = истина;
		Период.КнопкаОткрытия       = ложь;
		Период.КнопкаОчистки        = ложь;
		Период.КнопкаРегулирования  = ложь;
		Период.КнопкаСпискаВыбора   = Истина;
		Период.РедактированиеТекста = ложь;
		
		Период.УстановитьДействие("НачалоВыбораИзСписка", "Подключаемый_НачалоВыбораИзСпискаУниверсальныйОбработчик");
		Период.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораУниверсальныйОбработчик");
		Период.УстановитьДействие("Очистка", "Подключаемый_ОчисткаУниверсальныйОбработчик");
		Период.УстановитьДействие("АвтоПодбор", "Подключаемый_АвтоПодборУниверсальныйОбработчик");
		Период.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииУниверсальныйОбработчик");
		Период.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОбработкаВыбораУниверсальныйОбработчик");
		Период.УстановитьДействие("ОкончаниеВводаТекста", "Подключаемый_ОкончаниеВводаТекстаУниверсальныйОбработчик");
		
		МинимальнаяПериодичность = ФормаОтчета.НастройкиОтчета.СоответствиеПериодичностиПараметров[ЭлементНастройкиВарианта.Параметр];
		
		Если МинимальнаяПериодичность = Неопределено тогда
			
			МинимальнаяПериодичность = ФормаОтчета.ЗаДень;
			
		КонецЕсли;
		
		ПолучитьСписокДоступныхПериодов(МинимальнаяПериодичность, ВидПериода.СписокВыбора, МинимальнаяПериодичность);
		ВидПериода.СписокВыбора.Добавить(Перечисления.ДоступныеПериодыОтчета.ПроизвольныйПериод, , , БиблиотекаКартинок.УстановитьИнтервал);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НарисоватьЭлементУправленияПорядком(ФормаОтчета, ПраваяПанель)
	
	ПользовательскиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	ГруппаОбщая = ФормаОтчета.Элементы.Добавить("ГруппаСортировки", Тип("ГруппаФормы"), ПраваяПанель);
	ГруппаОбщая.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОбщая.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаОбщая.Отображение = ОтображениеОбычнойГруппы.Линия;
	ГруппаОбщая.ОтображатьЗаголовок = Истина;
	ГруппаОбщая.Заголовок = "Порядок";

	
	Для Каждого ЭлементНастройки Из ПользовательскиеНастройки.Элементы Цикл
		
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено Или ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементНастройки) <> Тип("ПорядокКомпоновкиДанных") тогда	
			Продолжить;
		КонецЕсли;
		
		ЭлементВариантаНастройки = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		
		Группа = ФормаОтчета.Элементы.Добавить("ГруппаПорядка_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ГруппаФормы"), ГруппаОбщая);
		Группа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Группа.Отображение         = ОтображениеОбычнойГруппы.Нет;
		Группа.ОтображатьЗаголовок = ЭлементВариантаНастройки.ПредставлениеПользовательскойНастройки <> "";
		Группа.Заголовок           = ?(ЭлементВариантаНастройки.ПредставлениеПользовательскойНастройки = "", "Порядок", ЭлементВариантаНастройки.ПредставлениеПользовательскойНастройки) + ":";
		
		ТаблицаПолейВыбора                          = ФормаОтчета.Элементы.Добавить("ПоляПорядка_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ТаблицаФормы"), Группа);
		ТаблицаПолейВыбора.ПутьКДанным              = "ТаблицаПорядка_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		ТаблицаПолейВыбора.Отображение              = ОтображениеТаблицы.Список;
		ТаблицаПолейВыбора.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ТаблицаПолейВыбора.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет; 
		ТаблицаПолейВыбора.ВертикальныеЛинии        = ложь;
		ТаблицаПолейВыбора.ГоризонтальныеЛинии      = ложь;
		ТаблицаПолейВыбора.Шапка                    = ложь;
		ТаблицаПолейВыбора.Подвал                   = ложь;
		ТаблицаПолейВыбора.ИзменятьПорядокСтрок     = истина;
		ТаблицаПолейВыбора.ИзменятьСоставСтрок      = ложь;
		
		КолонкаИспользование             = ФормаОтчета.Элементы.Добавить("ИспользованиеПорядка_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ПолеФормы"), ТаблицаПолейВыбора);
		КолонкаИспользование.Вид         = ВидПоляФормы.ПолеФлажка;
		КолонкаИспользование.ПутьКДанным = "ТаблицаПорядка_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки) + ".Использование";
		КолонкаИспользование.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		КолонкаИспользование.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииУниверсальныйОбработчик");
		
		КолонкаПредставление             = ФормаОтчета.Элементы.Добавить("ПредставлениеПорядка_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ПолеФормы"), ТаблицаПолейВыбора);
		КолонкаПредставление.Вид         = ВидПоляФормы.ПолеВвода;
		КолонкаПредставление.ПутьКДанным = "ТаблицаПорядка_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки) + ".Представление";
		КолонкаПредставление.ТолькоПросмотр = истина;
		
		КоманднаяПанель = ФормаОтчета.Элементы.Добавить("КоманднаяПанельПорядка_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ГруппаФормы"), Группа);
		КоманднаяПанель.Вид                     = ВидГруппыФормы.ОбычнаяГруппа;
		КоманднаяПанель.Группировка             = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		КоманднаяПанель.Отображение             = ОтображениеОбычнойГруппы.Нет;
		КоманднаяПанель.ОтображатьЗаголовок     = ложь;
		
		КнопкаВверх            = ФормаОтчета.Элементы.Добавить("ПереместитьПорядокВверх_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("КнопкаФормы"), КоманднаяПанель);
		КнопкаВверх.ИмяКоманды = "ПорядокПереместитьВверх_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		
		КнопкаВниз            = ФормаОтчета.Элементы.Добавить("ПереместитьПорядокВниз_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("КнопкаФормы"), КоманднаяПанель);
		КнопкаВниз.ИмяКоманды = "ПорядокПереместитьВниз_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
	КонецЦикла;
КонецПроцедуры

Процедура НарисоватьЭлементУправленияПолямиВыбора(ФормаОтчета, ПраваяПанель)
	
	ПользовательскиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Для Каждого ЭлементНастройки Из ПользовательскиеНастройки.Элементы Цикл
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено Или ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементНастройки) <> Тип("ВыбранныеПоляКомпоновкиДанных") тогда	
			Продолжить;
		КонецЕсли;
		
		ЭлементВариантаНастройки = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		
		Группа = ФормаОтчета.Элементы.Добавить("ГруппаПолейВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ГруппаФормы"), ПраваяПанель);
		Группа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Группа.Отображение         = ОтображениеОбычнойГруппы.Линия;
		Группа.ОтображатьЗаголовок = Истина;
		Группа.Заголовок           = ?(ЭлементВариантаНастройки.ПредставлениеПользовательскойНастройки = "", "Поля", ЭлементВариантаНастройки.ПредставлениеПользовательскойНастройки);
		Группа.РастягиватьПоГоризонтали = Истина;
	
		ТаблицаПолейВыбора                          = ФормаОтчета.Элементы.Добавить("ПоляВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ТаблицаФормы"), Группа);
		ТаблицаПолейВыбора.ПутьКДанным              = "ТаблицаПолейВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		ТаблицаПолейВыбора.Отображение              = ОтображениеТаблицы.Список;
		ТаблицаПолейВыбора.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ТаблицаПолейВыбора.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет; 
		ТаблицаПолейВыбора.ВертикальныеЛинии        = ложь;
		ТаблицаПолейВыбора.ГоризонтальныеЛинии      = ложь;
		ТаблицаПолейВыбора.Шапка                    = ложь;
		ТаблицаПолейВыбора.Подвал                   = ложь;
		ТаблицаПолейВыбора.ИзменятьПорядокСтрок     = истина;
		ТаблицаПолейВыбора.ИзменятьСоставСтрок      = ложь;
		ТаблицаПолейВыбора.РастягиватьПоГоризонтали = Истина;
		ТаблицаПолейВыбора.ИзменятьСоставСтрок      = ложь;
		
		КолонкаИспользование             = ФормаОтчета.Элементы.Добавить("ИспользованиеПоляВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ПолеФормы"), ТаблицаПолейВыбора);
		КолонкаИспользование.Вид         = ВидПоляФормы.ПолеФлажка;
		КолонкаИспользование.ПутьКДанным = "ТаблицаПолейВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки) + ".Использование";
		КолонкаИспользование.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		КолонкаИспользование.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииУниверсальныйОбработчик");
	
		КолонкаПредставление             = ФормаОтчета.Элементы.Добавить("ПредставлениеПоля_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ПолеФормы"), ТаблицаПолейВыбора);
		КолонкаПредставление.Вид         = ВидПоляФормы.ПолеВвода;
		КолонкаПредставление.ПутьКДанным = "ТаблицаПолейВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки) + ".Представление";
		КолонкаПредставление.ТолькоПросмотр = истина;
		
		
		УсловноеОформление = ФормаОтчета.УсловноеОформление.Элементы.Добавить(); 
		УсловноеОформление.Использование = истина;
		ОтборОформления = УсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборОформления.Использование = истина;
		ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаПолейВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки) + ".ЭтоГруппа");
		ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборОформления.ПравоеЗначение = истина;
		
		ПолеОформление               = УсловноеОформление.Поля.Элементы.Добавить(); 
		ПолеОформление.Использование = истина;
		ПолеОформление.Поле          = Новый ПолеКомпоновкиДанных("ПоляВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки));
		
		ШрифтОформления = УсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Шрифт")); 
		Шрифт = Новый Шрифт(ШрифтОформления.Значение, , , истина, , истина,);
		ШрифтОформления.Значение      = Шрифт; 
		ШрифтОформления.Использование = Истина;
		
		КоманднаяПанель = ФормаОтчета.Элементы.Добавить("КоманднаяПанельПоляВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ГруппаФормы"), Группа);
		КоманднаяПанель.Вид                     = ВидГруппыФормы.ОбычнаяГруппа;
		КоманднаяПанель.Группировка             = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		КоманднаяПанель.Отображение             = ОтображениеОбычнойГруппы.Нет;
		КоманднаяПанель.ОтображатьЗаголовок     = ложь;
		
		КнопкаВверх            = ФормаОтчета.Элементы.Добавить("ПереместитьГруппировкуВверхПоляВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("КнопкаФормы"), КоманднаяПанель);
		КнопкаВверх.ИмяКоманды = "ПоляВыбораПереместитьВверх_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		
		КнопкаВниз            = ФормаОтчета.Элементы.Добавить("ПереместитьГруппировкуВнизПоляВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("КнопкаФормы"), КоманднаяПанель);
		КнопкаВниз.ИмяКоманды = "ПоляВыбораПереместитьВниз_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		
	КонецЦикла;
КонецПроцедуры

Процедура НарисоватьЭлементУправленияУсловнымОформлением(ФормаОтчета, ПраваяПанель)
	
	Группа = ФормаОтчета.Элементы.Добавить("ГруппаОформлений", Тип("ГруппаФормы"), ПраваяПанель);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа.Отображение = ОтображениеОбычнойГруппы.Линия;
	Группа.ОтображатьЗаголовок = Истина;
	Группа.РастягиватьПоГоризонтали = истина;
	Группа.Заголовок = "Оформление";
	
	ПользовательскиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Для Каждого ЭлементНастройки Из ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастройки) <> Тип("ЭлементУсловногоОформленияКомпоновкиДанных") тогда	
			Продолжить;
		КонецЕсли;
		
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено Или ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
			Продолжить;
		КонецЕсли;
	
		ГруппаОформления                     = ФормаОтчета.Элементы.Добавить("ГруппаОформление_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ГруппаФормы"), Группа);
		ГруппаОформления.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаОформления.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаОформления.Отображение         = ОтображениеОбычнойГруппы.Нет;
		ГруппаОформления.ОтображатьЗаголовок = ложь;
		ГруппаОформления.Заголовок           = "";
		ГруппаОформления.РастягиватьПоГоризонтали = истина;
		
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		
		ШрифтЗаголовка      = ЭлементНастройки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Шрифт"));
		ЦветТекстаЗаголовка = ЭлементНастройки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"));
		ЦветФонаЗаголовка   = ЭлементНастройки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветФона"));
		ЦветРамки           = ЭлементНастройки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветГраницы"));
		
	    ФлагУсловногоОформления = ФормаОтчета.Элементы.Добавить("Оформление_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ПолеФормы"), ГруппаОформления);
		ФлагУсловногоОформления.ПутьКДанным         = "УсловноеОформление_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		ФлагУсловногоОформления.Вид                 = ВидПоляФормы.ПолеФлажка;
		ФлагУсловногоОформления.ПоложениеЗаголовка  = ПоложениеЗаголовкаЭлементаФормы.Право;
		ФлагУсловногоОформления.ЦветТекстаЗаголовка = ЦветТекстаЗаголовка.Значение;
		ФлагУсловногоОформления.ЦветФонаЗаголовка   = ЦветФонаЗаголовка.Значение;
		ФлагУсловногоОформления.ШрифтЗаголовка      = ШрифтЗаголовка.Значение;
		ФлагУсловногоОформления.Заголовок           = ?(ЭлементНастройкиВарианта.ПредставлениеПользовательскойНастройки = "", ЭлементНастройкиВарианта.Представление, ЭлементНастройкиВарианта.ПредставлениеПользовательскойНастройки);
		ФлагУсловногоОформления.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииУниверсальныйОбработчик");
	КонецЦикла;
	
КонецПроцедуры 

Процедура НарисоватьЭлементУправленияГруппировками(ФормаОтчета, ПраваяПанель)
	
	//НадписьПараметр           = ФормаОтчета.Элементы.Добавить("НадписьГруппировки", Тип("ДекорацияФормы"), ПраваяПанель);
	//НадписьПараметр.Вид       = ВидДекорацииФормы.Надпись;
	//НадписьПараметр.Заголовок = "Группировки";
	
	ГруппаОбщая = ФормаОтчета.Элементы.Добавить("ГруппаГруппировок", Тип("ГруппаФормы"), ПраваяПанель);
	ГруппаОбщая.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОбщая.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаОбщая.Отображение = ОтображениеОбычнойГруппы.Линия;
	ГруппаОбщая.ОтображатьЗаголовок = Истина;
	ГруппаОбщая.Заголовок = "Группировки";
	
	ПользовательскиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Для Каждого ЭлементНастройки Из ПользовательскиеНастройки.Элементы Цикл
		
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено Или ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементНастройки) = Тип("СтруктураНастроекКомпоновкиДанных") тогда
			ЭлементВариантаНастройки   = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
			Группа                     = ФормаОтчета.Элементы.Добавить("ГруппаГруппировки_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ГруппаФормы"), ГруппаОбщая);
			Группа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			Группа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			Группа.Отображение         = ОтображениеОбычнойГруппы.Нет;
			Группа.ОтображатьЗаголовок = ЭлементВариантаНастройки.ПредставлениеПользовательскойНастройки <> "";
			Группа.Заголовок           = ЭлементВариантаНастройки.ПредставлениеПользовательскойНастройки;
			
			ТаблицаГруппировок                          = ФормаОтчета.Элементы.Добавить("Группировки_"+ ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ТаблицаФормы"), Группа);
			ТаблицаГруппировок.ПутьКДанным              = "НастройкаГруппировок_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
			ТаблицаГруппировок.Отображение              = ОтображениеТаблицы.Список;
			ТаблицаГруппировок.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ТаблицаГруппировок.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет; 
			ТаблицаГруппировок.ВертикальныеЛинии        = ложь;
			ТаблицаГруппировок.ГоризонтальныеЛинии      = ложь;
			ТаблицаГруппировок.Шапка                    = ложь;
			ТаблицаГруппировок.Подвал                   = ложь;
			ТаблицаГруппировок.ИзменятьПорядокСтрок     = истина;
			ТаблицаГруппировок.ИзменятьСоставСтрок      = ложь;
			
			КолонкаИспользование             = ФормаОтчета.Элементы.Добавить("ИспользованиеГруппировки_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ПолеФормы"), ТаблицаГруппировок);
			КолонкаИспользование.Вид         = ВидПоляФормы.ПолеФлажка;
			КолонкаИспользование.ПутьКДанным = "НастройкаГруппировок_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки) + ".Использование";
			КолонкаИспользование.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
			КолонкаИспользование.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииУниверсальныйОбработчик");
			
			КолонкаПредставление             = ФормаОтчета.Элементы.Добавить("ПредставлениеГруппировки_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ПолеФормы"), ТаблицаГруппировок);
			КолонкаПредставление.Вид         = ВидПоляФормы.ПолеВвода;
			КолонкаПредставление.ПутьКДанным = "НастройкаГруппировок_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки) + ".Представление";
			КолонкаПредставление.ТолькоПросмотр = истина;
			
			КоманднаяПанель                         = ФормаОтчета.Элементы.Добавить("КоманднаяПанельГруппировки_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ГруппаФормы"), Группа);
			КоманднаяПанель.Вид                     = ВидГруппыФормы.ОбычнаяГруппа;
			КоманднаяПанель.Группировка             = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			КоманднаяПанель.Отображение             = ОтображениеОбычнойГруппы.Нет;
			КоманднаяПанель.ОтображатьЗаголовок     = ложь;
			
			КнопкаВверх            = ФормаОтчета.Элементы.Добавить("ПереместитьГруппировкуВверх_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("КнопкаФормы"), КоманднаяПанель);
			КнопкаВверх.ИмяКоманды = "ПереместитьГруппировкуВверх_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
			
			КнопкаВниз            = ФормаОтчета.Элементы.Добавить("ПереместитьГруппировкуВниз_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("КнопкаФормы"), КоманднаяПанель);
			КнопкаВниз.ИмяКоманды = "ПереместитьГруппировкуВниз_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
			
		ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ГруппировкаКомпоновкиДанных") Или 
			ТипЗнч(ЭлементНастройки) = Тип("ТаблицаКомпоновкиДанных") Или 
			ТипЗнч(ЭлементНастройки) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Или 
			ТипЗнч(ЭлементНастройки) = Тип("ДиаграммаКомпоновкиДанных") Или
			ТипЗнч(ЭлементНастройки) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда 
			ЭлементВариантаНастройки   = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
			
			ИспользованиеГруппировки                    = ФормаОтчета.Элементы.Добавить("ИспользованиеЭлементаСтруктуры_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ПолеФормы"), ГруппаОбщая);
			ИспользованиеГруппировки.Вид                = ВидПоляФормы.ПолеФлажка;
			ИспользованиеГруппировки.ПутьКДанным        = "ИспользованиеЭлементаСтруктуры_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
			ИспользованиеГруппировки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			Если ЭлементВариантаНастройки.ПредставлениеПользовательскойНастройки <> "" тогда
				ИспользованиеГруппировки.Заголовок = ЭлементВариантаНастройки.ПредставлениеПользовательскойНастройки;
			ИначеЕсли ЭлементВариантаНастройки.Представление <> "" тогда
				ИспользованиеГруппировки.Заголовок = ЭлементВариантаНастройки.Представление;
			Иначе
				ИспользованиеГруппировки.Заголовок = "<Не указано представление группировки>";
			КонецЕсли;
			ИспользованиеГруппировки.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииУниверсальныйОбработчик");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

Процедура НарисоватьЭлементБыстрогоОтбора(ЭлементНастройки, КомпоновщикНастроек, ФормаОтчета, ПраваяПанель, ГруппаНадпись, ГруппаПоле, СвязьПоТипу, СвязиПараметровВыбора)
	
	ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
	Если ЭлементНастройкиВарианта = Неопределено тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ЭлементНастройки) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
		ИспользованиеОтбор                    = ФормаОтчета.Элементы.Добавить("ИспользованиеОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ПолеФормы"), ГруппаНадпись);
		ИспользованиеОтбор.Вид                = ВидПоляФормы.ПолеФлажка;
		ИспользованиеОтбор.ПутьКДанным        = "ИспользованиеОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		ИспользованиеОтбор.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Если ЭлементНастройкиВарианта.ПредставлениеПользовательскойНастройки = "" И ЭлементНастройкиВарианта.Представление = "" тогда
			ИспользованиеОтбор.Заголовок = "<Не указано представление отбора>";
		КонецЕсли;
		
		Если ЭлементНастройкиВарианта.ПредставлениеПользовательскойНастройки <> "" тогда
			ИспользованиеОтбор.Заголовок = ЭлементНастройкиВарианта.ПредставлениеПользовательскойНастройки;
		ИначеЕсли ЭлементНастройкиВарианта.Представление <> "" тогда
			ИспользованиеОтбор.Заголовок = ЭлементНастройкиВарианта.Представление;
		КонецЕсли;
		
		ИспользованиеОтбор.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииУниверсальныйОбработчик");
		
	Иначе

		ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора, ЭлементНастройкиВарианта.ЛевоеЗначение);

		ИспользованиеОтбор                    = ФормаОтчета.Элементы.Добавить("ИспользованиеОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ПолеФормы"), ГруппаНадпись);
		ИспользованиеОтбор.Вид                = ВидПоляФормы.ПолеФлажка;
		ИспользованиеОтбор.ПутьКДанным        = "ИспользованиеОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		ИспользованиеОтбор.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		ИспользованиеОтбор.Заголовок          = ФункцииОтчетовКлиентСервер.ПолучитьПредставлениеОтбора(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки) + ":";
		ИспользованиеОтбор.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииУниверсальныйОбработчик");
		
		
		Отбор = ФормаОтчета.Элементы.Добавить("Отбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ПолеФормы"), ГруппаПоле);
		Отбор.Вид                 = ВидПоляФормы.ПолеВвода;
		Отбор.ПутьКДанным         = "Отбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		Отбор.ПоложениеЗаголовка  = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Отбор.РастягиватьПоГоризонтали = истина;
		Отбор.КнопкаВыбора        = истина;
		Отбор.КнопкаОткрытия      = ложь;
		Отбор.КнопкаОчистки       = истина;
		Отбор.КнопкаРегулирования = ложь;
		Отбор.КнопкаСпискаВыбора  = ложь;
		
		Если ДоступноеПоле <> Неопределено тогда
			Отбор.БыстрыйВыбор         = ДоступноеПоле.БыстрыйВыбор;
			//Отбор.ВыборГруппИЭлементов = ДоступноеПоле.ВыборГруппИЭлементов;				
			Отбор.Маска                = ДоступноеПоле.Маска;
			Отбор.ФормаВыбора          = ДоступноеПоле.ФормаВыбора;
			Отбор.ФорматРедактирования = ДоступноеПоле.ФорматРедактирования;
		КонецЕсли;
		
		ПодставитьЗначениеИдентификатораВСвязьПоТипу(ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), "Отбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), СвязьПоТипу, СвязиПараметровВыбора);
		
		Отбор.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииУниверсальныйОбработчик");
		Отбор.УстановитьДействие("Очистка",      "Подключаемый_ОчисткаУниверсальныйОбработчик");
		
	КонецЕсли;
КонецПроцедуры

Процедура НарисоватьЭлементОбычногоОтбора(ЭлементНастройки, КомпоновщикНастроек, ФормаОтчета, ПраваяПанель, ГруппаНадпись, ГруппаПоле, СвязьПоТипу, СвязиПараметровВыбора)

	ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
	Если ЭлементНастройкиВарианта = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементНастройки) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
		ИспользованиеОтбор                    = ФормаОтчета.Элементы.Добавить("ИспользованиеОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ПолеФормы"), ГруппаНадпись);
		ИспользованиеОтбор.Вид                = ВидПоляФормы.ПолеФлажка;
		ИспользованиеОтбор.ПутьКДанным        = "ИспользованиеОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		ИспользованиеОтбор.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Если ЭлементНастройкиВарианта.ПредставлениеПользовательскойНастройки = "" И ЭлементНастройкиВарианта.Представление = "" тогда
			ИспользованиеОтбор.Заголовок = "<Не указано представление отбора>";
		КонецЕсли;
		
		Если ЭлементНастройкиВарианта.ПредставлениеПользовательскойНастройки <> "" тогда
			ИспользованиеОтбор.Заголовок = ЭлементНастройкиВарианта.ПредставлениеПользовательскойНастройки;
		ИначеЕсли ЭлементНастройкиВарианта.Представление <> "" тогда
			ИспользованиеОтбор.Заголовок = ЭлементНастройкиВарианта.Представление;
		КонецЕсли;
		
		ИспользованиеОтбор.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииУниверсальныйОбработчик");
	Иначе
		Если ЭлементНастройкиВарианта.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСписке 
			и ЭлементНастройкиВарианта.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии 
			и ЭлементНастройкиВарианта.ВидСравнения <> ВидСравненияКомпоновкиДанных.НеВСписке
			и ЭлементНастройкиВарианта.ВидСравнения <> ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии тогда
			НарисоватьЭлементБыстрогоОтбора(ЭлементНастройки, КомпоновщикНастроек, ФормаОтчета, ПраваяПанель, ГруппаНадпись, ГруппаПоле, СвязьПоТипу, СвязиПараметровВыбора);	 
		Иначе 
			ГруппаОтбора = ФормаОтчета.Элементы.Добавить("ГруппаОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ГруппаФормы"), ПраваяПанель);
			ГруппаОтбора.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОтбора.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаОтбора.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОтбора.ОтображатьЗаголовок = Ложь;
			ГруппаОтбора.Заголовок = ФункцииОтчетовКлиентСервер.ПолучитьПредставлениеОтбора(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки);
			
			ГруппаПанелиОтбора = ФормаОтчета.Элементы.Добавить("ГруппаПанелиОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ГруппаФормы"), ГруппаОтбора);
			ГруппаПанелиОтбора.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаПанелиОтбора.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаПанелиОтбора.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаПанелиОтбора.ОтображатьЗаголовок = Ложь;
			
			ИспользованиеОтбор                    = ФормаОтчета.Элементы.Добавить("ИспользованиеОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ПолеФормы"), ГруппаПанелиОтбора);
			ИспользованиеОтбор.Вид                = ВидПоляФормы.ПолеФлажка;
			ИспользованиеОтбор.ПутьКДанным        = "ИспользованиеОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
			ИспользованиеОтбор.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			ИспользованиеОтбор.Заголовок          = ФункцииОтчетовКлиентСервер.ПолучитьПредставлениеОтбора(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки);
			ИспользованиеОтбор.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииУниверсальныйОбработчик");
			
			Если ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке тогда
				ИспользованиеОтбор.Заголовок = ИспользованиеОтбор.Заголовок + " (за исключением выбранных)"
			ИначеЕсли ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии тогда
				ИспользованиеОтбор.Заголовок = ИспользованиеОтбор.Заголовок + " (за исключением выбранных)"
			КонецЕсли;
			
			ПанельНастроекОтбора                     = ФормаОтчета.Элементы.Добавить("ПанельНастроекОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ГруппаФормы"), ГруппаПанелиОтбора);
			ПанельНастроекОтбора.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			ПанельНастроекОтбора.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ПанельНастроекОтбора.Отображение         = ОтображениеОбычнойГруппы.Нет;
			ПанельНастроекОтбора.ОтображатьЗаголовок = ложь;
			
			ПанельКнопокОтбора                     = ФормаОтчета.Элементы.Добавить("ПанельКнопокОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ГруппаФормы"), ПанельНастроекОтбора);
			ПанельКнопокОтбора.Вид                 = ВидГруппыФормы.КоманднаяПанель;
			
			ПанельКнопокОтбора.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
			КнопкаПодбор            = ФормаОтчета.Элементы.Добавить("КнопкаПодбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("КнопкаФормы"), ПанельКнопокОтбора);
			КнопкаПодбор.ИмяКоманды = "Подбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
			
			ТаблицаОтбора                          = ФормаОтчета.Элементы.Добавить("СписокЗначенияОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ТаблицаФормы"), ГруппаОтбора);
			ТаблицаОтбора.ПутьКДанным              = "Отбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
			ТаблицаОтбора.Отображение              = ОтображениеТаблицы.Список;
			ТаблицаОтбора.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ТаблицаОтбора.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;

			ТаблицаОтбора.УстановитьДействие("ПослеУдаления", "Подключаемый_ПослеУдаленияУниверсальныйОбработчик");
			ТаблицаОтбора.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОбработкаВыбораУниверсальныйОбработчик");
			ТаблицаОтбора.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииУниверсальныйОбработчик");
			
			КолонкаЗначение             = ФормаОтчета.Элементы.Добавить("КолонкаОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), Тип("ПолеФормы"), ТаблицаОтбора);
			КолонкаЗначение.Вид         = ВидПоляФормы.ПолеВвода;
			КолонкаЗначение.ПутьКДанным = "Отбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки) + ".Значение";
			ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора, ЭлементНастройкиВарианта.ЛевоеЗначение);
			Если ДоступноеПоле <> Неопределено тогда
				КолонкаЗначение.БыстрыйВыбор         = ДоступноеПоле.БыстрыйВыбор;
				//КолонкаЗначение.ВыборГруппИЭлементов = ДоступноеПоле.ВыборГруппИЭлементов;				
				КолонкаЗначение.Маска                = ДоступноеПоле.Маска;
				КолонкаЗначение.ФормаВыбора          = ДоступноеПоле.ФормаВыбора;
				КолонкаЗначение.ФорматРедактирования = ДоступноеПоле.ФорматРедактирования;
			КонецЕсли;
			
			ПодставитьЗначениеИдентификатораВСвязьПоТипу(ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), "КолонкаОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки), СвязьПоТипу, СвязиПараметровВыбора);
			
			КолонкаЗначение.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииУниверсальныйОбработчик");
			ТаблицаОтбора.УстановитьДействие("ПриОкончанииРедактирования", "Подключаемый_ПриОкончанииРедактированияУниверсальныйОбработчик");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПодставитьЗначениеИдентификатораВСвязьПоТипу(Идентификатор, ИмяЭлемента, СвязьПоТипу, СвязьПоПараметру)
	
	Для Каждого ЭлементСоотв Из СвязьПоТипу Цикл
		Если ЭлементСоотв.ИмяЭлемента = Идентификатор тогда
			ЭлементСоотв.ИмяЭлемента = ИмяЭлемента;
		ИначеЕсли ЭлементСоотв.СвязанС = Идентификатор тогда
			ЭлементСоотв.СвязанС = ИмяЭлемента;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементСвязиПоПараметру Из СвязьПоПараметру Цикл
		Если ЭлементСвязиПоПараметру.ИмяЭлемента = Идентификатор тогда
			ЭлементСвязиПоПараметру.ИмяЭлемента = ИмяЭлемента;
		ИначеЕсли ЭлементСвязиПоПараметру.ПутьКДанным = Идентификатор тогда
			ЭлементСвязиПоПараметру.ПутьКДанным = ИмяЭлемента;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРеквизитыФормы(ФормаОтчета, ОтчетОбъект)
	
	МассивРеквизитов = Новый Массив;
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("Строка"));
	ОписаниеТипа = Новый ОписаниеТипов(Типы);
	МассивРеквизитов.Добавить(Новый РеквизитФормы("АдресРезультатов", ОписаниеТипа, , ""));
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("Строка"));
	ОписаниеТипа = Новый ОписаниеТипов(Типы);
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЗаголовокОтчета", ОписаниеТипа, , ""));
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("Булево"));
	ОписаниеТипа = Новый ОписаниеТипов(Типы);
	МассивРеквизитов.Добавить(Новый РеквизитФормы("РежимРасшифровки", ОписаниеТипа, , ""));
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("Булево"));
	ОписаниеТипа = Новый ОписаниеТипов(Типы);
	МассивРеквизитов.Добавить(Новый РеквизитФормы("РежимВариантаОтчета", ОписаниеТипа, , ""));
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТипа = Новый ОписаниеТипов(Типы);
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПутиКФормамОтборов", ОписаниеТипа, , ""));
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("Строка"));
	ОписаниеТипа = Новый ОписаниеТипов(Типы);
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Отбор", ОписаниеТипа, "ПутиКФормамОтборов", ""));
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("Строка"));
	ОписаниеТипа = Новый ОписаниеТипов(Типы);
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Тип", ОписаниеТипа, "ПутиКФормамОтборов", ""));
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("Строка"));
	ОписаниеТипа = Новый ОписаниеТипов(Типы);
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПутьКФорме", ОписаниеТипа, "ПутиКФормамОтборов", ""));
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("Неопределено"));
	ОписаниеТипа = Новый ОписаниеТипов(Типы);
	МассивРеквизитов.Добавить(Новый РеквизитФормы("НастройкиОтчета", ОписаниеТипа, , "Настройки отчета"));
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("Строка"));
	ОписаниеТипа = Новый ОписаниеТипов(Типы);
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ВерсияСтандартныхФункцийОтчетов", ОписаниеТипа, , "Версия"));
	
	НастройкиОтчета = ОтчетОбъект.ПолучитьНастройкиОтчета();
	ВерсияСтандартныхФункцийОтчетов = ОтчетОбъект.ВерсияСтандартныхФункцийОтчетов();
	
	Если ФормаОтчета.Элементы.Найти("ПанельНастроекПользователя") <> Неопределено тогда
		
		Типы = Новый Массив;
		Типы.Добавить(Тип("СписокЗначений"));
		ОписаниеТипа = Новый ОписаниеТипов(Типы);
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ВыборПользовательскихНастроек", ОписаниеТипа, , "Настройки отчета"));
		
		//Если НастройкиОтчета.ОтчетЗаПериод тогда
		//	
		//доступные типы настроек периодов
		Типы = Новый Массив;
		Типы.Добавить(Тип("ПеречислениеСсылка.ДоступныеПериодыОтчета"));
		ОписаниеТипа = Новый ОписаниеТипов(Типы,,Новый КвалификаторыСтроки(20));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЗаГод", ОписаниеТипа, , "ЗаГод"));
		
		Типы = Новый Массив;
		Типы.Добавить(Тип("ПеречислениеСсылка.ДоступныеПериодыОтчета"));
		ОписаниеТипа = Новый ОписаниеТипов(Типы,,Новый КвалификаторыСтроки(20));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЗаПолугодие", ОписаниеТипа, , "ЗаПолугодие"));
		
		Типы = Новый Массив;
		Типы.Добавить(Тип("ПеречислениеСсылка.ДоступныеПериодыОтчета"));
		ОписаниеТипа = Новый ОписаниеТипов(Типы,,Новый КвалификаторыСтроки(20));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЗаКвартал", ОписаниеТипа, , "ЗаКвартал"));
		
		Типы = Новый Массив;
		Типы.Добавить(Тип("ПеречислениеСсылка.ДоступныеПериодыОтчета"));
		ОписаниеТипа = Новый ОписаниеТипов(Типы,,Новый КвалификаторыСтроки(20));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЗаМесяц", ОписаниеТипа, , "ЗаМесяц"));
		
		Типы = Новый Массив;
		Типы.Добавить(Тип("ПеречислениеСсылка.ДоступныеПериодыОтчета"));
		ОписаниеТипа = Новый ОписаниеТипов(Типы,,Новый КвалификаторыСтроки(20));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЗаДекаду", ОписаниеТипа, , "ЗаДекаду"));
		
		Типы = Новый Массив;
		Типы.Добавить(Тип("ПеречислениеСсылка.ДоступныеПериодыОтчета"));
		ОписаниеТипа = Новый ОписаниеТипов(Типы,,Новый КвалификаторыСтроки(20));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЗаНеделю", ОписаниеТипа, , "ЗаНеделю"));
		
		Типы = Новый Массив;
		Типы.Добавить(Тип("ПеречислениеСсылка.ДоступныеПериодыОтчета"));
		ОписаниеТипа = Новый ОписаниеТипов(Типы,,Новый КвалификаторыСтроки(20));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЗаДень", ОписаниеТипа, , "ЗаДень"));
		
		Типы = Новый Массив;
		Типы.Добавить(Тип("ПеречислениеСсылка.ДоступныеПериодыОтчета"));
		ОписаниеТипа = Новый ОписаниеТипов(Типы,,Новый КвалификаторыСтроки(20));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЗаПроизвольныйПериод", ОписаниеТипа, , "ЗаПроизвольныйПериод"));
		//КонецЕсли;
		
		//Если НастройкиОтчета.ОтчетНаДату тогда
		//	
		//	Типы = Новый Массив;
		//	Типы.Добавить(Тип("Дата"));
		//	ОписаниеТипа = Новый ОписаниеТипов(Типы, , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
		//	МассивРеквизитов.Добавить(Новый РеквизитФормы("Дата", ОписаниеТипа, , "Дата"));
		//	
		//КонецЕсли;
	КонецЕсли;
	
	Массив = ФормаОтчета.ПолучитьРеквизиты();
	ЕстьКлючОбъекта                      = ложь;
	ЕстьСтандартныйСписок                = ложь;
	ЕстьОписаниеОбъектов                 = ложь;
	ЕстьТекущаяПользовательскаяНастройка = ложь;
	
	Для Каждого РеквизитФормы Из Массив Цикл
		Если РеквизитФормы.Имя = "КлючОбъекта" тогда
			ЕстьКлючОбъекта = истина;
		ИначеЕсли РеквизитФормы.Имя = "СтандартныеНастройки" тогда
			ЕстьСтандартныйСписок = истина;
		ИначеЕсли РеквизитФормы.Имя = "ОписаниеОбъектов" тогда
			ЕстьОписаниеОбъектов = истина;
		ИначеЕсли РеквизитФормы.Имя = "ТекущаяПользовательскаяНастройка" тогда
			ЕстьТекущаяПользовательскаяНастройка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьКлючОбъекта тогда 
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Строка"));
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		МассивРеквизитов.Добавить(Новый РеквизитФормы("КлючОбъекта", ОписаниеТипа, , "Ключ объекта"));
	КонецЕсли;
	
	Если НЕ ЕстьСтандартныйСписок тогда 
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СписокЗначений"));
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		МассивРеквизитов.Добавить(Новый РеквизитФормы("СтандартныеНастройки", ОписаниеТипа, , "Стандартные настройки"));
	КонецЕсли;
		
	Если НЕ ЕстьОписаниеОбъектов тогда 
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СписокЗначений"));
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ОписаниеОбъектов", ОписаниеТипа, , "Описание вариантов отчета"));
	КонецЕсли;
	
	Если НЕ ЕстьТекущаяПользовательскаяНастройка тогда 
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Неопределено"));
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ТекущаяПользовательскаяНастройка", ОписаниеТипа, "", "текущая настройка пользователя"));
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	МассивРеквизитов.Добавить(Новый РеквизитФормы("СвязиОтборов", ОписаниеТипа, , "Связи отборов"));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ИдентификаторОтбора", ОписаниеТипа, "СвязиОтборов", "Идентификатор отбора"));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Тип", ОписаниеТипа, "СвязиОтборов", "Тип отбора"));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	МассивРеквизитов.Добавить(Новый РеквизитФормы("РеквизитПоля", ОписаниеТипа, "СвязиОтборов", "Реквизит через на который по которому будет применен отбор при открытии формы"));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ИдентификаторЗначенияОтбора", ОписаниеТипа, "СвязиОтборов", "Идентификатор отбора Из которого берется значение"));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ТипЗначенияОтбора", ОписаниеТипа, "СвязиОтборов", "Тип значения отбора, Из которого берется значение"));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ИдентификаторОбъекта", ОписаниеТипа, "СвязиОтборов", "УИ объекта СКД"));
	
	ФормаОтчета.ИзменитьРеквизиты(МассивРеквизитов);
	ФормаОтчета.НастройкиОтчета = НастройкиОтчета;
	ФормаОтчета.ВерсияСтандартныхФункцийОтчетов = ВерсияСтандартныхФункцийОтчетов;
	ФормаОтчета.РежимРасшифровки = ФормаОтчета.Параметры.Свойство("Расшифровка") И ФормаОтчета.Параметры.Расшифровка <> Неопределено;
	
КонецПроцедуры


Процедура ЗаполнитьДанныеВФорме(ФормаОтчета, ОтчетОбъект)
	
	ФормаОтчета.РежимРасшифровки    = ФормаОтчета.Параметры.Свойство("Расшифровка") и ФормаОтчета.Параметры.Расшифровка <> Неопределено;
	ФормаОтчета.РежимВариантаОтчета = ФормаОтчета.Параметры.Свойство("КлючВарианта") и ФормаОтчета.Параметры.КлючВарианта <> Неопределено;
	
	ФормаОтчета.ЗаголовокОтчета = ФормаОтчета.Заголовок;
	
	ФормаОтчета.ЗаГод                = Перечисления.ДоступныеПериодыОтчета.ЗаГод;
	ФормаОтчета.ЗаПолугодие          = Перечисления.ДоступныеПериодыОтчета.ЗаПолугодие;
	ФормаОтчета.ЗаКвартал            = Перечисления.ДоступныеПериодыОтчета.ЗаКвартал;
	ФормаОтчета.ЗаМесяц              = Перечисления.ДоступныеПериодыОтчета.ЗаМесяц;
	ФормаОтчета.ЗаДекаду             = Перечисления.ДоступныеПериодыОтчета.ЗаДекаду;
	ФормаОтчета.ЗаНеделю             = Перечисления.ДоступныеПериодыОтчета.ЗаНеделю;
	ФормаОтчета.ЗаДень               = Перечисления.ДоступныеПериодыОтчета.ЗаДень;
	ФормаОтчета.ЗаПроизвольныйПериод = Перечисления.ДоступныеПериодыОтчета.ПроизвольныйПериод;
КонецПроцедуры


Процедура ПриЗагрузкеВариантаНаСервере(ФормаОтчета, Настройки) Экспорт
	
	ВерсияСтандартныхФункцийОтчетов = "";
	Попытка 
		ВерсияСтандартныхФункцийОтчетов = ФормаОтчета.ВерсияСтандартныхФункцийОтчетов;
	Исключение
	КонецПопытки;
	
	Если ВерсияСтандартныхФункцийОтчетов = "1" тогда
		
		ФормаОтчета.Заголовок = ФормаОтчета.ЗаголовокОтчета + ФормаОтчета.ПредставлениеТекущегоВарианта;
		ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("КлючВарианта", ФормаОтчета.КлючТекущегоВарианта);
		
		РейтингВариантовОтчета = ХранилищеОбщихНастроек.Загрузить(ФормаОтчета.КлючОбъекта, "ПоследниеДатыИспользованияВариантовОтчетов", , );
		Если РейтингВариантовОтчета = Неопределено тогда
			РейтингВариантовОтчета = Новый ТаблицаЗначений;
			РейтингВариантовОтчета.Колонки.Добавить("Ключ");
			РейтингВариантовОтчета.Колонки.Добавить("Значение");
		КонецЕсли;
		
		СтрокаРейтинга = РейтингВариантовОтчета.Найти(ФормаОтчета.КлючТекущегоВарианта, "Ключ");
		
		Если СтрокаРейтинга = Неопределено тогда
			СтрокаРейтинга = РейтингВариантовОтчета.Добавить();
			СтрокаРейтинга.Ключ = ФормаОтчета.КлючТекущегоВарианта;
			СтрокаРейтинга.Значение = ТекущаяДата();
			ХранилищеОбщихНастроек.Сохранить(ФормаОтчета.КлючОбъекта, "ПоследниеДатыИспользованияВариантовОтчетов", РейтингВариантовОтчета, ,  ); 
		КонецЕсли;
		
		ПерерисоватьПравуюПанель(ФормаОтчета, ФормаОтчета.Отчет.КомпоновщикНастроек);
		СоставитьСписокСвязанныхОтборов(ФормаОтчета);
		
		ПользовательскиеНастройкиСохранены = ХранилищеОбщихНастроек.Загрузить(ФормаОтчета.КлючОбъекта + "/" + ФормаОтчета.КлючТекущегоВарианта, "ПользовательскиеНастройкиСохранены", , );
		Если ПользовательскиеНастройкиСохранены = Неопределено ИЛИ НЕ ПользовательскиеНастройкиСохранены Тогда
			ПриЗагрузкеПользовательскихНастроекНаСервере(ФормаОтчета, Настройки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоставитьСписокСвязанныхОтборов(ФормаОтчета)
	
//Составим список связей между отборами	(возможно лучше сделать настройку при загрузке варианта отчета) 
//(Идентификатор, Тип, ПолеИсточникОтбора)

	СписокОтборов = Новый ТаблицаЗначений;
	СписокОтборов.Колонки.Добавить("ИдентификаторОтбора");
	СписокОтборов.Колонки.Добавить("ИдентификаторОбъекта");
	СписокОтборов.Колонки.Добавить("Тип");
	СписокОтборов.Колонки.Добавить("Поле");

	//Составим список всех отборов участвующих в отчете и их типов
	// Добавим пользовательские отборы
	ПользовательскиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Для Каждого ЭлементНастройки Из ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастройки) <> Тип("ЭлементОтбораКомпоновкиДанных") тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено тогда
			 Продолжить;
		КонецЕсли;
		Если ЭлементНастройкиВарианта.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный тогда
			Продолжить;
		КонецЕсли;
		
		ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора, ЭлементНастройкиВарианта.ЛевоеЗначение);
		Если ДоступноеПоле = Неопределено тогда
			Продолжить;
		КонецЕсли;
		
		МассивТипов = ДоступноеПоле.ТипЗначения.Типы();
		Для Каждого Тип Из МассивТипов Цикл
			ОбъектМетаДанных = Метаданные.НайтиПоТипу(Тип);
			Если ОбъектМетаДанных <>  Неопределено тогда
				СтрокаОтборов = СписокОтборов.Добавить();
				СтрокаОтборов.ИдентификаторОтбора = ЭлементНастройки.ИдентификаторПользовательскойНастройки;
				СтрокаОтборов.Тип  = СтрЗаменить(ОбъектМетаДанных.ПолноеИмя(), ".", "Ссылка.");
				СтрокаОтборов.Поле = Строка(ЭлементНастройкиВарианта.ЛевоеЗначение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	Для Каждого ЭлементНастройки Из ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастройки) <> Тип("ЗначениеПараметраКомпоновкиДанных") тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено тогда
			 Продолжить;
		КонецЕсли;
		 
		ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступныйПараметр(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПараметры, ЭлементНастройкиВарианта.Параметр);
		Если ДоступноеПоле = Неопределено тогда
			Продолжить;
		КонецЕсли;
		
		МассивТипов = ДоступноеПоле.ТипЗначения.Типы();
		Для Каждого Тип Из МассивТипов Цикл
			СтрокаПараметра                     = СписокОтборов.Добавить();
			СтрокаПараметра.ИдентификаторОтбора = ЭлементНастройки.ИдентификаторПользовательскойНастройки;
			ОбъектМетаДанных                    = Метаданные.НайтиПоТипу(Тип);
			СтрокаПараметра.Тип                 = СтрЗаменить(ОбъектМетаДанных.ПолноеИмя(), ".", "Ссылка.");
			СтрокаПараметра.Поле                = Строка(ЭлементНастройкиВарианта.ЛевоеЗначение);
		КонецЦикла;
	КонецЦикла;

	
	//Составим список отборов, по которому должен быть выставлен отбор (Идентификатор, Тип, Идентификатор)
	// Добавим в список отборы, которые связываются между собой как владельцы (только для справочников)
	
    СвязиОтборов = ФормаОтчета.РеквизитФормыВЗначение("СвязиОтборов");
	
	Для Каждого СтрокаОтбора Из СписокОтборов Цикл
		ОбъектМетаДанных = Метаданные.НайтиПоТипу(Тип(СтрокаОтбора.Тип));
		Если Метаданные.Справочники.Содержит(ОбъектМетаДанных) тогда
			Для Каждого Владелец Из ОбъектМетаданных.Владельцы Цикл
				СтрокиСвязанныхОтборов = СписокОтборов.НайтиСтроки(Новый Структура("Тип", СтрЗаменить(Владелец.ПолноеИмя(), ".", "Ссылка.")));
				Для Каждого СтрокаСвязанногоОтобра Из СтрокиСвязанныхОтборов Цикл
					СтрокаСвязиОтбора = СвязиОтборов.Добавить();
					СтрокаСвязиОтбора.ИдентификаторОтбора = СтрокаОтбора.ИдентификаторОтбора;
					СтрокаСвязиОтбора.Тип                 = СтрокаОтбора.Тип;
					СтрокаСвязиОтбора.РеквизитПоля        = "Отбор.Владелец";
					СтрокаСвязиОтбора.ИдентификаторЗначенияОтбора = СтрокаСвязанногоОтобра.ИдентификаторОтбора;
					СтрокаСвязиОтбора.ТипЗначенияОтбора    = СтрокаСвязанногоОтобра.Тип;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	// Добавим в список , которые логически связаны между собой (документы, Справочник, планы видов характеристик)
	
	ТаблицаЛогическойСВязиТиповДанных = НастройкиФункцийОтчетовПереопределяемый.ПолучитьЛогическуюСвязьТиповДанных();
	
	Для Каждого СтрокаЛогСвязи Из ТаблицаЛогическойСВязиТиповДанных Цикл
		МассивСтрокОтборов  = СписокОтборов.НайтиСтроки(Новый Структура("Тип", СтрокаЛогСвязи.Тип));
		МассивСтрокЗначений = СписокОтборов.НайтиСтроки(Новый Структура("Тип", СтрокаЛогСвязи.ТипЗначенияОтбора));
		Для Каждого СтрокаОтбора Из МассивСтрокОтборов Цикл
			Для Каждого СтрокаЗначенияОтбора Из МассивСтрокЗначений Цикл
				СтрокаСвязиОтбора = СвязиОтборов.Добавить();
				СтрокаСвязиОтбора.ИдентификаторОтбора = СтрокаОтбора.ИдентификаторОтбора;
				СтрокаСвязиОтбора.Тип                 = СтрокаОтбора.Тип;
				СтрокаСвязиОтбора.РеквизитПоля        = СтрокаЛогСвязи.РеквизитПоля;
				СтрокаСвязиОтбора.ИдентификаторЗначенияОтбора = СтрокаЗначенияОтбора.ИдентификаторОтбора;
				СтрокаСвязиОтбора.ТипЗначенияОтбора    = СтрокаЗначенияОтбора.Тип;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	
	// Добавим отбор по типу значений для плана видов характеристик
	
	// Добавим связи Из настройки СКД (связи параметров выбора)
	
	Отчет = ФормаОтчета.РеквизитФормыВЗначение("Отчет");
	
	Для Каждого ЭлементНастройки Из ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастройки) <> Тип("ЭлементОтбораКомпоновкиДанных") тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено тогда
			 Продолжить;
		КонецЕсли;
		
		Если ЭлементНастройкиВарианта.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный тогда
			Продолжить;
		КонецЕсли;
		
		ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора, ЭлементНастройкиВарианта.ЛевоеЗначение);
		Если ДоступноеПоле = Неопределено тогда
			Продолжить;
		КонецЕсли;
		
		МассивПолей = ФункцииОтчетовКлиентСервер.ПолучитьПоляДанных(ФункцииОтчетовКлиентСервер.ПолучитьСКДОтчета(Отчет), ЭлементНастройкиВарианта.ЛевоеЗначение);
		Для Каждого ПолеДанных Из МассивПолей Цикл
			ЗначениеПараметра = ПолеДанных.ПараметрыРедактирования.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СвязиПараметровВыбора"));
			Если ЗначениеПараметра <> Неопределено тогда
				Для Каждого СвязьПараметровВыбора Из ЗначениеПараметра.Значение Цикл
					МассивСтрокОтборов  = СписокОтборов.НайтиСтроки(Новый Структура("ИдентификаторОтбора", Строка(ЭлементНастройки.ИдентификаторПользовательскойНастройки)));
					МассивСтрокЗначенийОтборов  = СписокОтборов.НайтиСтроки(Новый Структура("Поле", Строка(СвязьПараметровВыбора.Поле)));
					Для Каждого СтрокаОтборов Из МассивСтрокОтборов Цикл
						Для Каждого СтрокаЗначенияОтбора Из МассивСтрокЗначенийОтборов Цикл
							СтрокаСвязиОтбора = СвязиОтборов.Добавить();
							СтрокаСвязиОтбора.ИдентификаторОтбора = СтрокаОтборов.ИдентификаторОтбора;
							СтрокаСвязиОтбора.Тип                 = СтрокаОтборов.Тип;
							СтрокаСвязиОтбора.РеквизитПоля        = СвязьПараметровВыбора.Имя ;
							СтрокаСвязиОтбора.ИдентификаторЗначенияОтбора = СтрокаЗначенияОтбора.ИдентификаторОтбора;
							СтрокаСвязиОтбора.ТипЗначенияОтбора    = СтрокаЗначенияОтбора.Тип;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЭлементНастройки Из ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ЭлементНастройки) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") тогда	
			Продолжить;
		КонецЕсли;
		
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено Или ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементНастройкиВарианта.Значение) = Тип("СтандартныйПериод") тогда
			
			Для Каждого ПараметрСКД ИЗ ФункцииОтчетовКлиентСервер.ПолучитьСКДОтчета(Отчет).Параметры Цикл
				Если ПараметрСКД.Выражение = "&" + Строка(ЭлементНастройкиВарианта.Параметр) + ".ДатаНачала" Тогда
					ЗначениеПараметраДатаНачала = ФункцииОтчетовКлиентСервер.ПолучитьПараметр(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ПараметрСКД.Имя);
					ЗначениеПараметраДатаНачала.Значение = ЭлементНастройкиВарианта.Значение.ДатаНачала;
					ЗначениеПараметраДатаНачала.Использование = Истина;
				ИначеЕсли ПараметрСКД.Выражение = "&" + Строка(ЭлементНастройкиВарианта.Параметр) + ".ДатаОкончания" Тогда
					ЗначениеПараметраДатаОкончания = ФункцииОтчетовКлиентСервер.ПолучитьПараметр(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ПараметрСКД.Имя);
					ЗначениеПараметраДатаОкончания.Значение = ЭлементНастройкиВарианта.Значение.ДатаОкончания;
					ЗначениеПараметраДатаОкончания.Использование = Истина;
				КонецЕсли;
			КонецЦикла;
			
			НачалоПериода = ЭлементНастройки.Значение.ДатаНачала;
			КонецПериода  = ЭлементНастройки.Значение.ДатаОкончания;
			ВидПериода = ФункцииОтчетовКлиентСервер.ПолучитьВидПериода(НачалоПериода, КонецПериода, ФормаОтчета);
			Представление = ФункцииОтчетовКлиентСервер.ПолучитьПредставлениеПериода(ВидПериода, НачалоПериода, КонецПериода, ФормаОтчета);
			
			Если НЕ ФормаОтчета.РежимРасшифровки Тогда
				ФормаОтчета["ВидПериода_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)] = ВидПериода;
				ФормаОтчета["Период_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)] = Представление;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЭлементНастройки.Значение) = Тип("СтандартнаяДатаНачала") тогда
			Если НЕ ФормаОтчета.РежимРасшифровки Тогда
				ФормаОтчета["Параметр_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)] = Дата(ЭлементНастройки.Значение);
			КонецЕсли;
		Иначе
			Если НЕ ФормаОтчета.РежимРасшифровки Тогда
				ФормаОтчета["Параметр_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)] = ЭлементНастройки.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ФормаОтчета.ЗначениеВРеквизитФормы(СвязиОтборов, "СвязиОтборов");
	
КонецПроцедуры

Процедура ПриСохраненииВариантаНаСервере(ФормаОтчета, Настройки) Экспорт

	Если Настройки.ДополнительныеСвойства.Свойство("РежимРасшифровки") тогда
		Настройки.ДополнительныеСвойства.Удалить("РежимРасшифровки");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(ФормаОтчета, Настройки) Экспорт
	
	ВерсияСтандартныхФункцийОтчетов = "";
	Попытка 
		ВерсияСтандартныхФункцийОтчетов = ФормаОтчета.ВерсияСтандартныхФункцийОтчетов;
	Исключение
	КонецПопытки;
	
	Если ВерсияСтандартныхФункцийОтчетов = "1" тогда
		
		Если ФормаОтчета.ТекущаяПользовательскаяНастройка = Неопределено и Не ФормаОтчета.РежимРасшифровки тогда
			ФормаОтчета.ТекущаяПользовательскаяНастройка = ХранилищеОбщихНастроек.Загрузить(ФормаОтчета.КлючОбъекта + "/" + ФормаОтчета.КлючТекущегоВарианта, "ТекущаяПользовательскаяНастройка", ,);
			Если ФормаОтчета.ТекущаяПользовательскаяНастройка <> Неопределено тогда
				ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ФормаОтчета.ТекущаяПользовательскаяНастройка);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьПользовательскиеНастройки(ФормаОтчета);
		
		Если ФормаОтчета.Элементы.Найти("ПанельНастроекПользователя") <> Неопределено тогда
			Если НЕ ФормаОтчета.РежимРасшифровки тогда
				ЗагрузитьГруппировкиОтчета(ФормаОтчета);
				ЗаполнитьСписокФормОтборов(ФормаОтчета);
				ЗагрузитьПоляВыбораОтчета(ФормаОтчета);
				ЗагрузитьПоляПорядка(ФормаОтчета);
				ЗагрузитьУсловныеОформления(ФормаОтчета);
				ЗагрузитьПоляПараметров(ФормаОтчета);
				ЗагрузитьПоляСтандартныхПериодов(ФормаОтчета);
				ЗагрузитьОтборы(ФормаОтчета);
			КонецЕсли;
		КонецЕсли;
		
		ФункцииОтчетовКлиентСервер.УстановитьСвязиОтборов(ФормаОтчета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСохраненииПользовательскихНастроекНаСервере(ФормаОтчета, Настройки) Экспорт
	
	ХранилищеОбщихНастроек.Сохранить(ФормаОтчета.КлючОбъекта + "/" + ФормаОтчета.КлючТекущегоВарианта, "ПользовательскиеНастройкиСохранены", Истина, , );
	
КонецПроцедуры

Процедура ПолучитьСписокДоступныхПериодов(МинимальныйПериод, СписокПериодов, ЗначениеПоУмолчанию = Неопределено)
	
	Если ТипЗнч(СписокПериодов) <> Тип("СписокЗначений") тогда
		Возврат;
	КонецЕсли;
	
	СписокДоступныхПериодов = Новый СписокЗначений;
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.ЗаДень);
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.ЗаНеделю);
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.ЗаДекаду);
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.ЗаМесяц);
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.ЗаКвартал);
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.ЗаПолугодие);
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.ЗаГод);
	
	ЭлементСписка = СписокДоступныхПериодов.НайтиПоЗначению(МинимальныйПериод);
	Если ЭлементСписка <> Неопределено тогда
		ИндексЭлемента = СписокДоступныхПериодов.Индекс(ЭлементСписка);
		Для Сч = ИндексЭлемента по СписокДоступныхПериодов.Количество()-1 Цикл
			Период = СписокДоступныхПериодов.Получить(Сч);
			СписокПериодов.Добавить(Период.Значение, Период.Представление);
		КонецЦикла;
		Если ЗначениеПоУмолчанию <> Неопределено тогда
			ЗначениеПоУмолчанию = СписокПериодов[0].Значение;
		КонецЕсли;
	Иначе
		Возврат; 
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрПользовательскихНастроек(ЭлементСтруктуры, НазваниеПараметра) Экспорт
	
	Параметр = Неопределено;
	КоллекцияЭлементов = Неопределено;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") тогда
		КоллекцияЭлементов = ЭлементСтруктуры.ПользовательскиеНастройки.Элементы;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") тогда
		КоллекцияЭлементов = ЭлементСтруктуры.Элементы;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовПользовательскихНастроекКомпоновкиДанных") тогда
		КоллекцияЭлементов = ЭлементСтруктуры;
	Иначе
		Возврат Параметр;
	КонецЕсли;
	
	Для Каждого ЭлементНастройкиПользователя Из КоллекцияЭлементов Цикл
		Если ТипЗнч(ЭлементНастройкиПользователя) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементНастройкиПользователя.Параметр = Новый ПараметрКомпоновкиДанных(НазваниеПараметра) тогда
			Параметр = ЭлементНастройкиПользователя;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Параметр;
	
КонецФункции

Процедура ОбработкаПроверкиЗаполненияНаСервере(ФормаОтчета, АктивныйОбъект, Источник) Экспорт
	
КонецПроцедуры


// Процедура заполняет связи реквизитов по типу и значению
//
Процедура ЗаполнитьСписокФормОтборов(ФормаОтчета) Экспорт
	
	ПутиКФормамОтборов = ФормаОтчета.РеквизитФормыВЗначение("ПутиКФормамОтборов");
	
	Для Каждого ЭлементНастройки Из ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ЭлементНастройки) <> Тип("ЭлементОтбораКомпоновкиДанных") тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЭлементНастройкиВарианта.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке 
			Или ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии 
			Или ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
			Или ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии тогда
			ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора, ЭлементНастройкиВарианта.ЛевоеЗначение);
			Если ДоступноеПоле <> Неопределено тогда
				МассивТипов = ДоступноеПоле.ТипЗначения.Типы();
				Для	Каждого ТипОтбора Из МассивТипов Цикл
					ОбъектМетаДанных = Метаданные.НайтиПоТипу(ТипОтбора);
					Если ОбъектМетаДанных <> Неопределено тогда
						СтрокаОтбора            = ПутиКФормамОтборов.Добавить();
						СтрокаОтбора.Отбор      = ЭлементНастройки.ИдентификаторПользовательскойНастройки;
						СтрокаОтбора.Тип        = СтрЗаменить(ОбъектМетаДанных.ПолноеИмя(), ".", "Ссылка.");
						СтрокаОтбора.ПутьКФорме = ОбъектМетаДанных.ПолноеИмя() + ".ФормаВыбора";
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ФормаОтчета.ЗначениеВРеквизитФормы(ПутиКФормамОтборов, "ПутиКФормамОтборов");
	
КонецПроцедуры

Функция НайтиЭлементОтбора(КомпоновщикНастроек, ИмяПоля)
	
	ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиДанных Тогда
			Возврат ЭлементОтбора;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиЭлементПараметра(КомпоновщикНастроек, ИмяПоля)
	
	ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементПараметра Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Если ЭлементПараметра.Параметр = ПараметрКомпоновкиДанных Тогда
			Возврат ЭлементПараметра;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьПользовательскиеНастройки(ФормаОтчета)
	
	ОтборПользовательскихНастроек = Неопределено;
	Если ФормаОтчета.Параметры.Свойство("ОтборПользовательскихНастроек", ОтборПользовательскихНастроек) Тогда
		КомпоновщикНастроек = ФормаОтчета.Отчет.КомпоновщикНастроек;
		Для Каждого КлючИЗначение Из ОтборПользовательскихНастроек Цикл
			ЭлементОтбора = НайтиЭлементОтбора(КомпоновщикНастроек, КлючИЗначение.Ключ);
			Если ЭлементОтбора <> Неопределено И ЗначениеЗаполнено(ЭлементОтбора.ИдентификаторПользовательскойНастройки) Тогда
				ЗначениеОтбора = КлючИЗначение.Значение;
				ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
				ЭлементОтбора.Использование = Истина;
				ПользовательскаяНастройка = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
				Если ПользовательскаяНастройка <> Неопределено Тогда
					ПользовательскаяНастройка.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(КлючИЗначение.Ключ);
					ПользовательскаяНастройка.ПравоеЗначение = КлючИЗначение.Значение;
					ПользовательскаяНастройка.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ПараметрыПользовательскихНастроек = Неопределено;
	Если ФормаОтчета.Параметры.Свойство("ПараметрыПользовательскихНастроек", ПараметрыПользовательскихНастроек) Тогда
		КомпоновщикНастроек = ФормаОтчета.Отчет.КомпоновщикНастроек;
		Для Каждого КлючИЗначение Из ПараметрыПользовательскихНастроек Цикл
			ЭлементПараметра = НайтиЭлементПараметра(КомпоновщикНастроек, КлючИЗначение.Ключ);
			Если ЭлементПараметра <> Неопределено И ЗначениеЗаполнено(ЭлементПараметра.ИдентификаторПользовательскойНастройки) Тогда
				ЗначениеПараметра = КлючИЗначение.Значение;
				ЭлементПараметра.Значение = ЗначениеПараметра;
				ЭлементПараметра.Использование = Истина;
				ПользовательскаяНастройка = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементПараметра.ИдентификаторПользовательскойНастройки);
				Если ПользовательскаяНастройка <> Неопределено Тогда
					ПользовательскаяНастройка.Параметр = Новый ПараметрКомпоновкиДанных(КлючИЗначение.Ключ);
					ПользовательскаяНастройка.Значение = КлючИЗначение.Значение;
					ПользовательскаяНастройка.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАГРУЗКИ ПОЛЬЗОВАТЕЛЬСКИХ НАСТРОЕК НА ФОРМУ
//

// Процедура загружает группировки на в правую панель отчета
//
Процедура ЗагрузитьГруппировкиОтчета(ФормаОтчета) Экспорт
	
	ПользовательскиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Для Каждого ЭлементНастройки Из ПользовательскиеНастройки.Элементы Цикл
		
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		
		Если ЭлементНастройкиВарианта = Неопределено Или ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементНастройки) = Тип("ГруппировкаКомпоновкиДанных") Или 
			ТипЗнч(ЭлементНастройки) = Тип("ТаблицаКомпоновкиДанных") Или 
			ТипЗнч(ЭлементНастройки) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Или 
			ТипЗнч(ЭлементНастройки) = Тип("ДиаграммаКомпоновкиДанных") Или
			ТипЗнч(ЭлементНастройки) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
			
			ФормаОтчета["ИспользованиеЭлементаСтруктуры_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)] = ЭлементНастройки.Использование;
			
		ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("СтруктураНастроекКомпоновкиДанных") тогда 
			
			ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
			
			Если ЭлементНастройкиВарианта = Неопределено тогда
				Продолжить;
			КонецЕсли;
			
			ФормаОтчета["НастройкаГруппировок_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)].Очистить();
			
			Для Каждого ЭлементСтруктуры Из ЭлементНастройки.Структура Цикл
				Представление = "";
				Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
					Или ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
					Или ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
					Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
						Если НЕ ПолеГруппировки.Использование тогда
							Продолжить;
						КонецЕсли;
						ДостпуноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок, ПолеГруппировки.Поле);
						Если ДостпуноеПоле = Неопределено тогда
							Представление = "Поле не найдено: """ + ПолеГруппировки.Поле + """";
						ИначеЕсли ДостпуноеПоле.Родитель <> Неопределено тогда
							Представление = Представление + СтрЗаменить(СтрЗаменить(ДостпуноеПоле.Заголовок, ДостпуноеПоле.Родитель.Заголовок, ""), ".", "")+ ", ";
						ИНаче
							Представление = Представление + ДостпуноеПоле.Заголовок + ", ";
						КонецЕсли;
					КонецЦикла;
					Представление = Лев(Представление,  СтрДлина(Представление)-2);
				Иначе
					Представление = "Таблица / диаграмма";
				КонецЕсли;
				СтрокиГруппировки = ФормаОтчета["НастройкаГруппировок_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)].Добавить();
				СтрокиГруппировки.Идентификатор = ЭлементСтруктуры.ИдентификаторПользовательскойНастройки;
				СтрокиГруппировки.Использование = ЭлементСтруктуры.Использование;
				СтрокиГруппировки.Представление = Представление;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
Конецпроцедуры

// Загрузить поля выбора в таблцы формы отчета
//
Процедура ЗагрузитьПоляВыбораОтчета(ФормаОтчета) Экспорт
	
	ПользовательскиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Для Каждого ЭлементНастройки Из ПользовательскиеНастройки.Элементы Цикл
		
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		
		Если ЭлементНастройкиВарианта = Неопределено Или ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементНастройки) <> Тип("ВыбранныеПоляКомпоновкиДанных") тогда	
			Продолжить;
		КонецЕсли;
		Таблица = ФормаОтчета.РеквизитФормыВзначение("ТаблицаПолейВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки));
		Таблица.Очистить();
		
		Если ФормаОтчета.Элементы.Найти("ПоляВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)) = Неопределено тогда
			Продолжить;
		КонецЕсли;
		
		ФормаОтчета["ТаблицаПолейВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)].Очистить();

		ФункцииОтчетовКлиентСервер.ДобавитьЭлементыНастройки(ФормаОтчета, Таблица, ЭлементНастройки, ЭлементНастройки, истина);
		
		ФормаОтчета.ЗначениеВРеквизитФормы(Таблица, "ТаблицаПолейВыбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки));
	КонецЦикла;
КонецПроцедуры

// Загружает поля порядка в таблицы форму
//
Процедура ЗагрузитьПоляПорядка(ФормаОтчета) Экспорт
	
	ПользовательскиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Для Каждого ЭлементНастройки Из ПользовательскиеНастройки.Элементы Цикл
		
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		
		Если ЭлементНастройкиВарианта = Неопределено Или ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементНастройки) <> Тип("ПорядокКомпоновкиДанных") тогда	
			Продолжить;
		КонецЕсли;                                         
		Таблица = ФормаОтчета.РеквизитФормыВзначение("ТаблицаПорядка_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки));
		
		Если ФормаОтчета.Элементы.Найти("ПоляПорядка_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)) = Неопределено тогда
			Продолжить;
		КонецЕсли;
		
		Таблица.Очистить();
		
		Для Каждого ЭлементПорядка Из ЭлементНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементПорядка) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") тогда
				Продолжить;
			КонецЕсли;
			СтрокаПорядка = Таблица.Добавить();
			СтрокаПорядка.Использование = ЭлементПорядка.Использование;
			СтрокаПорядка.Идентификатор = ЭлементНастройки.ПолучитьИдентификаторПоОбъекту(ЭлементПорядка);
			ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка, ЭлементПорядка.Поле);
			СтрокаПорядка.Представление = ДоступноеПоле.Заголовок;
		КонецЦикла;
		ФормаОтчета.ЗначениеВРеквизитФормы(Таблица, "ТаблицаПорядка_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки));
	КонецЦикла;
КонецПроцедуры

// Загружает значения условных оформлений пользователя на форму
//
Процедура ЗагрузитьУсловныеОформления(ФормаОтчета) Экспорт
	
	ПользовательскиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Для Каждого ЭлементНастройки Из ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ЭлементНастройки) <> Тип("ЭлементУсловногоОформленияКомпоновкиДанных") тогда	
			Продолжить;
		КонецЕсли;
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено Или ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
			Продолжить;
		КонецЕсли;
		ФормаОтчета["УсловноеОформление_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)] = ЭлементНастройки.Использование;
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает значения параметров на форму отчета
//
Процедура ЗагрузитьПоляПараметров(ФормаОтчета) Экспорт
	
	ПользовательскиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Для Каждого ЭлементНастройки Из ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ЭлементНастройки) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") тогда	
			Продолжить;
		КонецЕсли;
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено Или ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементНастройкиВарианта.Значение) = Тип("СтандартныйПериод") тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементНастройки.Значение) = Тип("СтандартнаяДатаНачала") тогда
			ФормаОтчета["Параметр_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)] = Дата(ЭлементНастройки.Значение);
		ИначеЕсли ТипЗнч(ЭлементНастройкиВарианта.Значение) = Тип("СписокЗначений") Тогда
			ПараметрСписок = ФормаОтчета["Параметр_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)];
			Если ТипЗнч(ЭлементНастройки.Значение) = Тип("СписокЗначений") Тогда
				ПараметрСписок = ЭлементНастройки.Значение;
			Иначе
				ПараметрСписок.Очистить();
				ПараметрСписок.Добавить(ЭлементНастройки.Значение);
			Конецесли;
			ПараметрСписок.ТипЗначения = ЭлементНастройкиВарианта.Значение.ТипЗначения;
			ФормаОтчета["Параметр_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)] = ПараметрСписок;
		Иначе
			ФормаОтчета["Параметр_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)] = ЭлементНастройки.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


// Загружает значения параметров на форму отчета
//
Процедура ЗагрузитьПоляСтандартныхПериодов(ФормаОтчета) Экспорт
	
	ПользовательскиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Для Каждого ЭлементНастройки Из ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ЭлементНастройки) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") тогда	
			Продолжить;
		КонецЕсли;
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено Или ЭлементНастройкиВарианта.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементНастройки.Значение) <> Тип("СтандартныйПериод") тогда
			Продолжить;
		КонецЕсли;
		
		НачалоПериода = ЭлементНастройки.Значение.ДатаНачала;
		КонецПериода  = ЭлементНастройки.Значение.ДатаОкончания;
		ВидПериода = ФункцииОтчетовКлиентСервер.ПолучитьВидПериода(НачалоПериода, КонецПериода, ФормаОтчета);
		Представление = ФункцииОтчетовКлиентСервер.ПолучитьПредставлениеПериода(ВидПериода, НачалоПериода, КонецПериода, ФормаОтчета);
		
		ФормаОтчета["ВидПериода_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)] = ВидПериода;
		ФормаОтчета["Период_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)] = Представление;
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает значение отборов на форму отчета
//
Процедура ЗагрузитьОтборы(ФормаОтчета) Экспорт
	ПользовательскиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Для Каждого ЭлементНастройки Из ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ЭлементНастройки) <> Тип("ЭлементОтбораКомпоновкиДанных") 
			и ТипЗнч(ЭлементНастройки) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда	
			Продолжить;
		КонецЕсли;
		
		ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройкиВарианта = Неопределено тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементНастройкиВарианта.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный тогда
			Продолжить;
		КонецЕсли;
			
		Если ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") тогда	
			Если (ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке 
				Или ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии 
				Или ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
				Или ЭлементНастройкиВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии) 
				и ТипЗнч(ЭлементНастройки.ПравоеЗначение) = Тип("СписокЗначений") тогда
				ФормаОтчета["Отбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)].Очистить();
				Для Каждого ЭлементСписка Из ЭлементНастройки.ПравоеЗначение Цикл
					ФормаОтчета["Отбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)].Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление, ЭлементСписка.Пометка, ЭлементСписка.Картинка) ;
				КонецЦикла;
				ФормаОтчета["ИспользованиеОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)] = ЭлементНастройки.Использование;
			ИначеЕсли ЭлементНастройкиВарианта.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСписке 
				и ЭлементНастройкиВарианта.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии 
				и ЭлементНастройкиВарианта.ВидСравнения <> ВидСравненияКомпоновкиДанных.НеВСписке
				и ЭлементНастройкиВарианта.ВидСравнения <> ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии тогда
				ФормаОтчета["Отбор_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)] = ЭлементНастройки.ПравоеЗначение;
				ФормаОтчета["ИспользованиеОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)] = ЭлементНастройки.Использование;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
			ЭлементНастройкиВарианта = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
			Если ЭлементНастройкиВарианта = Неопределено тогда
				Продолжить;
			КонецЕсли;
			ФормаОтчета["ИспользованиеОтбора_" + ФункцииОтчетовКлиентСервер.ИдентификаторЭлемента(ЭлементНастройки.ИдентификаторПользовательскойНастройки)] = ЭлементНастройки.Использование;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОТПРАВЛЕНИЕ ОТЧЕТОВ ПО ЭЛЕКТРОННОЙ ПОЧТЕ

// Создать электронное письмо
//
Процедура ОтправитьОтчетПоЭлПочтеКакВложение(НазваниеОтчета, Табличныйдокумент)
	
	ТекущийПользователь = ВариантыОтчетов.ТекущийПользователь();
	ИмяКаталога = КаталогВременныхФайлов();
	ИмяФайла = ИмяКаталога + "\" + НазваниеОтчета + ".mxl";
	Табличныйдокумент.Записать(ИмяФайла);
	
	//Отправить ввиде пиьсма
	ТекстовыйФайл = Новый ДвоичныеДанные(ИмяФайла);
	
	СтруктураВложения = Новый Структура("ИмяФайла, Хранилище", ИмяФайла, ТекстовыйФайл);
	СписокВложений = Новый СписокЗначений;
	СписокВложений.Добавить(СтруктураВложения);
	
	СтруктураНовогоПисьма = Новый Структура("Тело, Тема, ВидТекста, СписокФайловВложений", "", НазваниеОтчета, Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками, СписокВложений);
	УправлениеЭлектроннойПочтой.НаписатьПисьмо(ТекущийПользователь, СтруктураНовогоПисьма);
	
	УдалитьФайлы(ИмяФайла);
	
КонецПроцедуры



///////////////////////////////////////////////////////////////
/// Методы для проведения зарплаты к выплате

// При плановом авансе двигаем ЗарплатаЗаМесяц на сумму по строке
Процедура ПровестиПлановыйАванс(Документ) Экспорт
	
	Для Каждого СтрокаЗарплаты Из Документ.Зарплата Цикл
			
		Движение =  Документ.Движения.ЗарплатаЗаМесяцОрганизаций.ДобавитьРасход();
		
		// свойства
		Движение.Период					= КонецМесяца(Документ.ПериодРегистрации);
		
		// измерения
		Движение.Физлицо				= СтрокаЗарплаты.Физлицо;
		Движение.Организация			= Документ.Организация;
		Движение.ПериодВзаиморасчетов	= Документ.ПериодРегистрации;
		
		// ресурсы
		Движение.СуммаВзаиморасчетов	= СтрокаЗарплаты.Сумма;
		
		// реквизиты
		Движение.ХарактерВыплаты		= Документ.ХарактерВыплаты;
			
	КонецЦикла;
	
КонецПроцедуры

// При авансе за первую половину месяца двигаем ЗарплатаЗаМесяц на сумму по строке,
// а регистр первой половины месяца - расходом начислено и приходом удержано.
Процедура ПровестиАвансЗаПервуюПоловинуМесяца(Документ) Экспорт
	
	Для Каждого СтрокаЗарплаты Из Документ.Зарплата Цикл
		
		Движение =  Документ.Движения.ЗарплатаЗаМесяцОрганизаций.ДобавитьРасход();
			
		// свойства
		Движение.Период					= КонецМесяца(Документ.ПериодРегистрации);
		
		// измерения
		Движение.Физлицо				= СтрокаЗарплаты.Физлицо;
		Движение.Организация			= Документ.Организация;
		Движение.ПериодВзаиморасчетов	= Документ.ПериодРегистрации;
		
		// ресурсы
		Движение.СуммаВзаиморасчетов	= СтрокаЗарплаты.Сумма;
		
		// реквизиты
		Движение.ХарактерВыплаты		= Документ.ХарактерВыплаты;
		
		////
		// Учитываем авансы, вошедшие в ведомость
		Если СтрокаЗарплаты.Начислено <> 0 Тогда
			
			Движение =  Документ.Движения.ЗарплатаЗаПервуюПоловинуМесяца.Добавить();
			
			// свойства
			Движение.Период					= КонецМесяца(Документ.ПериодРегистрации);
			
			// измерения
			Движение.Физлицо				= СтрокаЗарплаты.Физлицо;
			Движение.Организация			= Документ.Организация;
			
			// ресурсы
			Движение.СуммаВзаиморасчетов	= - СтрокаЗарплаты.Начислено;
		КонецЕсли;		
		
		////
		// Учитываем отложенные суммы
		// (предварительные удержания и погрешности округления)
		Если СтрокаЗарплаты.Удержано <> 0 Тогда
			
			Движение =  Документ.Движения.ЗарплатаЗаПервуюПоловинуМесяца.Добавить();
			
			// свойства
			Движение.Период					= КонецМесяца(Документ.ПериодРегистрации);
			
			// измерения
			Движение.Физлицо				= СтрокаЗарплаты.Физлицо;
			Движение.Организация			= Документ.Организация;
			
			// ресурсы
			Движение.СуммаВзаиморасчетов	= СтрокаЗарплаты.Удержано;
			
		КонецЕсли;		
			
	КонецЦикла;
	
КонецПроцедуры
	
// Процедура осуществляет проведение документа в регистр остатков "Зарплата за месяц организаций"
//
// Параметр:
//   Документ - документ "Зарплата к выплате организаций"
//
Процедура ПровестиРасчет(Документ, Знач ХарактерВыплатыОтложенного = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ХарактерВыплатыОтложенного) Тогда
		ХарактерВыплатыОтложенного = Перечисления.ХарактерВыплатыЗарплаты.Зарплата
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаЗаМесяц.Физлицо КАК Физлицо,
	|	ЗарплатаЗаМесяц.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаЗаМесяц.ХарактерВыплаты КАК ХарактерВыплаты,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаЗаМесяц.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|			ИНАЧЕ -ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|		КОНЕЦ) КАК СуммаВзаиморасчетовОстаток
	|ИЗ
	//vvv
	//|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ЗарплатаЗаМесяц
	|	РегистрНакопления.ЗарплатаЗаМесяцОрганизаций КАК ЗарплатаЗаМесяц
	//
	|ГДЕ
	|	ЗарплатаЗаМесяц.Организация = &Организация
	|	И (&ПоВсемПериодамРегистрации
	|				И НАЧАЛОПЕРИОДА(ЗарплатаЗаМесяц.ПериодВзаиморасчетов, МЕСЯЦ) <= &ПериодРегистрации
	//vvv
	|				И НАЧАЛОПЕРИОДА(ЗарплатаЗаМесяц.ПериодВзаиморасчетов, МЕСЯЦ) <> ДАТАВРЕМЯ(1,1,1,0,0,0)
	//
	|			ИЛИ НАЧАЛОПЕРИОДА(ЗарплатаЗаМесяц.ПериодВзаиморасчетов) = &ПериодРегистрации)
	|	И ЗарплатаЗаМесяц.Физлицо В(&Физлица)
	|	И ЗарплатаЗаМесяц.ХарактерВыплаты В(&ХарактерыВыплаты)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаЗаМесяц.Физлицо,
	|	ЗарплатаЗаМесяц.ПериодВзаиморасчетов,
	|	ЗарплатаЗаМесяц.ХарактерВыплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаЗаМесяц.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|			ИНАЧЕ -ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|		КОНЕЦ) <> 0";
	
	Запрос.УстановитьПараметр("Организация", Документ.Организация);
	
	// ведется ли учет задолженности в разрезе периодов возникновения задолженности
	УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Документ.Организация, "УчетЗадолженностиПоМесяцам");
	Запрос.УстановитьПараметр("ПоВсемПериодамРегистрации", НЕ УчетЗадолженностиПоМесяцам);
	Запрос.УстановитьПараметр("ПериодРегистрации", НачалоМесяца(Документ.ПериодРегистрации));
	
	Запрос.УстановитьПараметр("Физлица", Документ.Зарплата.ВыгрузитьКолонку("Физлицо"));
	
	ХарактерыВыплаты = Новый Массив;
	Если Документ.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата ИЛИ Документ.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.РасчетПриУвольнении Тогда
		// для окончательного расчета берем все выплаты
		Для Каждого ПеречислениеСсылка Из Перечисления.ХарактерВыплатыЗарплаты Цикл
			ХарактерыВыплаты.Добавить(ПеречислениеСсылка);
		КонецЦикла	
	Иначе	
		// для межрасчета собираем только по текущему характеру выплаты
		ХарактерыВыплаты.Добавить(Документ.ХарактерВыплаты);
	КонецЕсли;	
	Запрос.УстановитьПараметр("ХарактерыВыплаты", ХарактерыВыплаты);
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	ТаблицаОстатков.Сортировать("Физлицо, ПериодВзаиморасчетов, СуммаВзаиморасчетовОстаток");
	
	Для Каждого СтрокаЗарплаты Из Документ.Зарплата Цикл
		
		Если СтрокаЗарплаты.Начислено <> 0 Тогда
			
			ПараметрыОтбора = Новый Структура("ФизЛицо", СтрокаЗарплаты.Физлицо);
			ОстаткиПоФизЛицу = ТаблицаОстатков.НайтиСтроки(ПараметрыОтбора);
			
			НераспределеннаяСумма = СтрокаЗарплаты.Начислено;
			
			Для Каждого ОстатокПоФизЛицу Из ОстаткиПоФизЛицу Цикл
				
				СуммаВзаиморасчетов	= Мин(ОстатокПоФизЛицу.СуммаВзаиморасчетовОстаток, НераспределеннаяСумма);
				
				ПровестиРасчетПоСтроке(ВидДвиженияНакопления.Расход, Документ, СтрокаЗарплаты, ОстатокПоФизЛицу.ПериодВзаиморасчетов, ОстатокПоФизЛицу.ХарактерВыплаты, СуммаВзаиморасчетов);					
				
				НераспределеннаяСумма = НераспределеннаяСумма - СуммаВзаиморасчетов;
				
				Если НераспределеннаяСумма = 0 Тогда
					Прервать
				КонецЕсли;
				
			КонецЦикла;	
			
			Если НераспределеннаяСумма <> 0 Тогда
				
				ПровестиРасчетПоСтроке(ВидДвиженияНакопления.Расход, Документ, СтрокаЗарплаты,  Документ.ПериодРегистрации, Документ.ХарактерВыплаты, НераспределеннаяСумма);					
				
			КонецЕсли;
			
		КонецЕсли;		
		
		////
		// Учитываем отложенные до окончательного расчета за месяц суммы
		// (предварительные удержания и погрешности округления)
		Если СтрокаЗарплаты.Удержано <> 0 Тогда
			Если Документ.АвтоматическиПереноситьОстатки И УчетЗадолженностиПоМесяцам Тогда
				ПровестиРасчетПоСтроке(ВидДвиженияНакопления.Приход, Документ, СтрокаЗарплаты,  КонецМесяца(Документ.ПериодРегистрации)+1, ХарактерВыплатыОтложенного, СтрокаЗарплаты.Удержано);	
			Иначе
				ПровестиРасчетПоСтроке(ВидДвиженияНакопления.Приход, Документ, СтрокаЗарплаты,  Документ.ПериодРегистрации, ХарактерВыплатыОтложенного, СтрокаЗарплаты.Удержано);					
			КонецЕсли;
		КонецЕсли;		
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ПровестиРасчетПоСтроке(ВидДвижения, Документ, СтрокаЗарплаты, ПериодВзаиморасчетов, ХарактерВыплаты, СуммаВзаиморасчетов)
	
	Движение = Документ.Движения.ЗарплатаЗаМесяцОрганизаций.Добавить();
	Движение.ВидДвижения = ВидДвижения; 

	// свойства
	Движение.Период					= КонецМесяца(Документ.ПериодРегистрации);
	
	// измерения
	Движение.Физлицо				= СтрокаЗарплаты.Физлицо;
	Движение.Организация			= Документ.Организация;
	Движение.ПериодВзаиморасчетов	= ПериодВзаиморасчетов;
	
	// ресурсы
	Движение.СуммаВзаиморасчетов	= СуммаВзаиморасчетов;
	
	// реквизиты
	Движение.ХарактерВыплаты		= ХарактерВыплаты;
	
КонецПроцедуры	
	
// Процедура осуществляет проведение документа при упрощенном учете взаиморасчетов
//
// Параметр:
//   Документ - документ "Зарплата к выплате организаций"
//
Процедура ПровестиВзаиморасчеты(Документ) Экспорт
	
	УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Документ.Организация, "УчетЗадолженностиПоМесяцам");
	
	Для Каждого СтрокаЗарплаты Из Документ.Зарплата Цикл
			
		СтрокаДвижения = Документ.Движения.ВзаиморасчетыСРаботникамиОрганизаций.ДобавитьРасход();
		
		СтрокаДвижения.Период       		= Документ.Дата;
		
		СтрокаДвижения.Организация			= Документ.Организация;
		СтрокаДвижения.Физлицо		 		= СтрокаЗарплаты.Физлицо;
		СтрокаДвижения.ПериодВзаиморасчетов	= Документ.ПериодРегистрации;
		
		СтрокаДвижения.СуммаВзаиморасчетов	= СтрокаЗарплаты.Сумма;
		
		СтрокаДвижения.ХарактерВыплаты		= Документ.ХарактерВыплаты;
		СтрокаДвижения.Ведомость     		= Документ.Ссылка;
		СтрокаДвижения.СпособВыплаты		= Документ.СпособВыплаты; 
		
		Если Документ.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу И СтрокаЗарплаты.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Задепонировано Тогда
			
			СтрокаДвижения = Документ.Движения.ВзаиморасчетыСДепонентамиОрганизаций.ДобавитьПриход();
			
			СтрокаДвижения.Период				= Документ.Дата;
			
			СтрокаДвижения.Организация			= Документ.Организация;
			СтрокаДвижения.Физлицо		 		= СтрокаЗарплаты.Физлицо;
			СтрокаДвижения.Ведомость			= Документ.Ссылка;
			
			// Ресурсы
			СтрокаДвижения.Сумма				= СтрокаЗарплаты.Сумма + СтрокаЗарплаты.КомпенсацияЗаЗадержкуЗарплаты; 
			
		КонецЕсли;	
		
		Если Документ.АвтоматическиПереноситьОстатки И УчетЗадолженностиПоМесяцам И СтрокаЗарплаты.Удержано<>0 Тогда
				
			СтрокаДвижения = Документ.Движения.ВзаиморасчетыСРаботникамиОрганизаций.ДобавитьПриход();
			
			СтрокаДвижения.Период       		= Документ.Дата;
			
			СтрокаДвижения.Организация			= Документ.Организация;
			СтрокаДвижения.Физлицо		 		= СтрокаЗарплаты.Физлицо;
			СтрокаДвижения.ПериодВзаиморасчетов	= Документ.ПериодРегистрации;
			
			СтрокаДвижения.СуммаВзаиморасчетов	= -СтрокаЗарплаты.Удержано;
					
			СтрокаДвижения = Документ.Движения.ВзаиморасчетыСРаботникамиОрганизаций.ДобавитьПриход();
			
			СтрокаДвижения.Период       		= Документ.Дата;
			
			СтрокаДвижения.Организация			= Документ.Организация;
			СтрокаДвижения.Физлицо		 		= СтрокаЗарплаты.Физлицо;
			СтрокаДвижения.ПериодВзаиморасчетов	= КонецМесяца(Документ.ПериодРегистрации)+1;
			
			СтрокаДвижения.СуммаВзаиморасчетов	= СтрокаЗарплаты.Удержано;
			
		
		КонецЕсли;
		
		СтрокаДвижения = Документ.Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Добавить();
		
		СтрокаДвижения.ФизЛицо   = СтрокаЗарплаты.ФизЛицо;
		СтрокаДвижения.Ведомость = Документ.Ссылка;

	КонецЦикла;	
	
	// По регистру расчетов с бюджетом по НДФЛ
	//ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Документ.Организация);
	//
	//СтруктураДокумента = Новый Структура;
	//СтруктураДокумента.Вставить("ДатаНДФЛ",КонецМесяца(Документ.ПериодРегистрации));
	//СтруктураДокумента.Вставить("Ссылка", Документ.Ссылка);
	//СтруктураДокумента.Вставить("Период", Документ.Дата);
	//СтруктураДокумента.Вставить("ОбособленноеПодразделение", Документ.Организация);
	//СтруктураДокумента.Вставить("Организация", ГоловнаяОрганизация);
	//
	//ТекстТаблицыВыплаты = 
	//"ВЫБРАТЬ
	//|	ЗарплатаКВыплате.Физлицо КАК ФизЛицо,
	//|	СУММА(ЗарплатаКВыплате.Сумма) КАК Сумма
	//|ПОМЕСТИТЬ ВТВыплатыФизлицам
	//|ИЗ
	//|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
	//|ГДЕ
	//|	ЗарплатаКВыплате.Ссылка = &ДокументСсылка
	//|	И (ЗарплатаКВыплате.Ссылка.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
	//|			ИЛИ ЗарплатаКВыплате.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	//|			ИЛИ ЗарплатаКВыплате.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано))
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ЗарплатаКВыплате.Физлицо
	//|
	//|ИМЕЮЩИЕ
	//|	СУММА(ЗарплатаКВыплате.Сумма) <> 0
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ФизЛицо";
	//
	//ПроведениеРасчетовПереопределяемый.СформироватьРасчетыПоНДФЛПриВыплате(СтруктураДокумента, ТекстТаблицыВыплаты, Документ.Движения.НДФЛРасчетыСБюджетом);
	
КонецПроцедуры

Функция ХарактерВыплатыОтложенногоДополнительно(ХарактерВыплаты) Экспорт
	
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Дивиденды Тогда
		Возврат ХарактерВыплаты;
	КонецЕсли;
	
КонецФункции

//////////////////////////////////////////////////////////////////
/// Методы для заполнения зарплаты к выплате

Процедура ПроверитьФизлицаДляАвтозаполнения(ДокументОбъект, Физлица, Отказ, Заголовок) Экспорт
	
	Если ДокументОбъект.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛицевыеСчетаРаботниковОрганизации.ФизЛицо КАК ФизЛицо
		|ИЗ
		|	РегистрСведений.ЛицевыеСчетаРаботниковОрганизации КАК ЛицевыеСчетаРаботниковОрганизации
		|ГДЕ
		|	ЛицевыеСчетаРаботниковОрганизации.Организация = &Организация
		|	И ЛицевыеСчетаРаботниковОрганизации.Банк = &Банк
		//vvv
		|	И (&БезУчетаДоговора ИЛИ ЛицевыеСчетаРаботниковОрганизации.ДоговорБанка = &ДоговорБанка)
		//
		|	И (&ПоВсемФизлицам
		|			ИЛИ ЛицевыеСчетаРаботниковОрганизации.ФизЛицо В (&Физлица))";
		
		Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
		Запрос.УстановитьПараметр("Банк", ДокументОбъект.Банк);
		//vvv
		Запрос.УстановитьПараметр("БезУчетаДоговора", НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорБанка));
		Запрос.УстановитьПараметр("ДоговорБанка", ДокументОбъект.ДоговорБанка);
		//
		Запрос.УстановитьПараметр("ПоВсемФизлицам", Физлица = Неопределено);	
		Запрос.УстановитьПараметр("Физлица", 		Физлица);	
		
		ФизЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
		
		Если ФизЛица.Количество() = 0 Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не найдены лицевые счета сотрудников в банке " +"«"+ СокрЛП(ДокументОбъект.Банк) +"»"+ "!", Отказ, Заголовок);
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизаций.Физлицо
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛицевыеСчетаРаботниковОрганизации КАК ЛицевыеСчетаРаботниковОрганизации
		|		ПО СотрудникиОрганизаций.Физлицо = ЛицевыеСчетаРаботниковОрганизации.ФизЛицо
		|ГДЕ
		|	ЛицевыеСчетаРаботниковОрганизации.ФизЛицо ЕСТЬ NULL 
		|	И (&ПоВсемФизлицам
		|			ИЛИ СотрудникиОрганизаций.Физлицо В (&Физлица))";
		
		Запрос.УстановитьПараметр("ПоВсемФизлицам", Физлица = Неопределено);	
		Запрос.УстановитьПараметр("Физлица", 		Физлица);
		Запрос.УстановитьПараметр("ПериодРегистрации", КонецМесяца(ДокументОбъект.ПериодРегистрации));
		
		ФизЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
			
	КонецЕсли;	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////
/// Методы для заполнения зарплаты к выплате по характеру выплаты

// Функция вычисляет размер планового аванса для физлиц, переданных в массиве ФизЛица
//
// Параметры
//  ДокументОбъект  - ДокументОбъект
//  ФизЛица   - массив физлиц 
//
// Возвращаемое значение:
//   ТаблицаЗначений   - массив физлиц
//
Функция ПолучитьОстаткиПлановогоАвансаСотрудников(ДокументОбъект, ФизЛица) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДатаРасчетаПлановогоАванса	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ДокументОбъект.Организация, "ДатаРасчетаПлановогоАванса");
	Если ДатаРасчетаПлановогоАванса = 0 Тогда
		ДатаРасчетаПлановогоАванса = 15;
	КонецЕсли;
	ДатаОкончания = КонецДня(Дата( Год(ДокументОбъект.ПериодРегистрации), Месяц(ДокументОбъект.ПериодРегистрации), ДатаРасчетаПлановогоАванса));
	
	
	Запрос.УстановитьПараметр("Организация",		ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",	НачалоМесяца(ДокументОбъект.ПериодРегистрации));
	Запрос.УстановитьПараметр("Дата",				ДатаОкончания);
	
	Запрос.УстановитьПараметр("Физлица", 			Физлица);	
	
	// ведется ли учет задолженности в разрезе периодов возникновения задолженности
	УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ДокументОбъект.Организация, "УчетЗадолженностиПоМесяцам");
	//vvv
	ОкруглятьАванс = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ДокументОбъект.Организация, "ОкруглятьАванс");
	//
	ВыплатаАвансаПроцентом	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ДокументОбъект.Организация, "ВыплатаАвансаПроцентом");

	Запрос.УстановитьПараметр("ПоВсемПериодамРегистрации", НЕ УчетЗадолженностиПоМесяцам);
	//vvv
	Запрос.УстановитьПараметр("ОкруглятьАванс",ОкруглятьАванс);
	Запрос.УстановитьПараметр("ДатаДеноминации",ОбщегоНазначения.ПолучитьДатуДеноминации());
	//
	Запрос.УстановитьПараметр("ВыплатаАвансаПроцентом", ВыплатаАвансаПроцентом);

	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//vvv
	//|ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.Ставка,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма) КАК НормаЧасов,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <= &ПериодРегистрации
	|				И ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР КОГДА ЕСТЬNULL(ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Показатель1Завершения,0)<>0 ТОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Показатель1Завершения / ВЫБОР КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ ИНАЧЕ
	|				ВЫБОР КОГДА ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.ПериодЗавершения <= &ПериодРегистрации И ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) ТОГДА ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.СтавкаЗавершения / ВЫБОР КОГДА ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.ПериодЗавершения<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ ИНАЧЕ ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.Ставка КОНЕЦ КОНЕЦ
	|		ИНАЧЕ ВЫБОР КОГДА ЕСТЬNULL(ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Показатель1,0)<>0 ТОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Показатель1 ИНАЧЕ ВЫБОР КОГДА ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.ПериодЗавершения <= &ПериодРегистрации И ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) ТОГДА ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.СтавкаЗавершения ИНАЧЕ ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.Ставка КОНЕЦ КОНЕЦ
	|	КОНЕЦ КАК Ставка,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <= &ПериодРегистрации
	|				И ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчетаЗавершения.СпособРасчета
	|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.СпособРасчета
	|	КОНЕЦ КАК СпособРасчета,
	//|РаботникиОрганизацийСрезПоследних.Организация КАК Организация,
	|РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение КАК Организация,
	//
	|РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТТарифныеСтавки
	|ИЗ
	|РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		&Дата,
	//vvv
	//|		Организация = &Организация
	|		ОбособленноеПодразделение = &Организация
	//
	|			И Сотрудник.ФизЛицо В (&Физлица)
	|				И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацийСрезПоследних
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации.СрезПоследних(КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ), ) КАК ТарифныеСтавкиРаботниковОрганизацииСрезПоследних
	|	ПО РаботникиОрганизацийСрезПоследних.Сотрудник = ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.Сотрудник
	//vvv
	//
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|	ПО РаботникиОрганизацийСрезПоследних.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И ГрафикиРаботыПоВидамВремени.Месяц=&ПериодРегистрации
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|			И (ГрафикиРаботыПоВидамВремени.План)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ), ) КАК ПлановыеНачисленияРаботниковОрганизацийСрезПоследних
	|	ПО РаботникиОрганизацийСрезПоследних.Сотрудник = ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Сотрудник
	|	И ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчетаИзмерение=НЕОПРЕДЕЛЕНО 
	//
	|ГДЕ
	|ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
	|	КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	//vvv
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <= &ПериодРегистрации
	|				И ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР КОГДА ЕСТЬNULL(ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Показатель1Завершения,0)<>0 ТОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Показатель1Завершения / ВЫБОР КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ ИНАЧЕ
	|				ВЫБОР КОГДА ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.ПериодЗавершения <= &ПериодРегистрации И ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) ТОГДА ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.СтавкаЗавершения / ВЫБОР КОГДА ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.ПериодЗавершения<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ ИНАЧЕ ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.Ставка КОНЕЦ КОНЕЦ
	|		ИНАЧЕ ВЫБОР КОГДА ЕСТЬNULL(ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Показатель1,0)<>0 ТОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Показатель1 ИНАЧЕ ВЫБОР КОГДА ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.ПериодЗавершения <= &ПериодРегистрации И ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) ТОГДА ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.СтавкаЗавершения ИНАЧЕ ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.Ставка КОНЕЦ КОНЕЦ
	|	КОНЕЦ,
	|	РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <= &ПериодРегистрации
	|				И ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчетаЗавершения.СпособРасчета
	|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.СпособРасчета
	|	КОНЕЦ,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник
	//
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АвансыРаботникам.Физлицо КАК Физлицо,
	|	СУММА(ВЫБОР
	|			КОГДА &ВыплатаАвансаПроцентом
	//vvv
	//|				ТОГДА ВЫРАЗИТЬ(ТарифныеСтавки.Ставка * АвансыРаботникам.СуммаАванса / 100 КАК ЧИСЛО(15, 0))
	|				ТОГДА 
	|					ВЫБОР 
	|						КОГДА ТарифныеСтавки.СпособРасчета=ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке) ИЛИ ТарифныеСтавки.СпособРасчета=ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке) ИЛИ ТарифныеСтавки.СпособРасчета=ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.НулеваяСумма)
	|							ТОГДА 
	|								ВЫБОР
	|									КОГДА &ОкруглятьАванс ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ТарифныеСтавки.Ставка,0)*ЕСТЬNULL(ТарифныеСтавки.НормаЧасов,0)* АвансыРаботникам.СуммаАванса / 100 КАК ЧИСЛО(15, 0))
	|									ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ТарифныеСтавки.Ставка,0)*ЕСТЬNULL(ТарифныеСтавки.НормаЧасов,0)* АвансыРаботникам.СуммаАванса / 100 КАК ЧИСЛО(15, 2))
	|								КОНЕЦ	
	|						ИНАЧЕ 
	|							ВЫБОР
	|									КОГДА &ОкруглятьАванс ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ТарифныеСтавки.Ставка,0) * АвансыРаботникам.СуммаАванса / 100 КАК ЧИСЛО(15, 0))
	|									ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ТарифныеСтавки.Ставка,0) * АвансыРаботникам.СуммаАванса / 100 КАК ЧИСЛО(15, 2))
	|							КОНЕЦ
	|					КОНЕЦ
	//
	|			ИНАЧЕ АвансыРаботникам.СуммаАванса
	|		КОНЕЦ) КАК СуммаАванса,
	|	АвансыРаботникам.Физлицо.Наименование
	|ПОМЕСТИТЬ ВТ_СписокАвансов
	|ИЗ
	|	РегистрСведений.АвансыРаботникамОрганизаций.СрезПоследних(КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ), ) КАК АвансыРаботникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТарифныеСтавки КАК ТарифныеСтавки
	|		ПО АвансыРаботникам.Организация = ТарифныеСтавки.Организация
	|			И АвансыРаботникам.Физлицо = ТарифныеСтавки.Сотрудник.Физлицо
	|ГДЕ
	|	АвансыРаботникам.Организация = &Организация
	|	И АвансыРаботникам.Физлицо В(&Физлица)
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансыРаботникам.Физлицо,
	|	АвансыРаботникам.Физлицо.Наименование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаЗаМесяц.Физлицо КАК Физлицо,
	|	СУММА(ЗарплатаЗаМесяц.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВТВыплаченныйАванс
	|ИЗ
	|	РегистрНакопления.ЗарплатаЗаМесяцОрганизаций КАК ЗарплатаЗаМесяц
	|ГДЕ
	|	ЗарплатаЗаМесяц.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПлановыйАванс)
	|	И ЗарплатаЗаМесяц.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ЗарплатаЗаМесяц.Организация = &Организация
	|	И ЗарплатаЗаМесяц.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И ЗарплатаЗаМесяц.ПериодВзаиморасчетов = &ПериодРегистрации
	|	И ЗарплатаЗаМесяц.Физлицо В
	|			(ВЫБРАТЬ
	|				ВТ_СписокАвансов.Физлицо
	|			ИЗ
	|				ВТ_СписокАвансов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаЗаМесяц.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписокАвансов.Физлицо,
	|	ВТ_СписокАвансов.СуммаАванса - ЕСТЬNULL(ВыплаченныйАванс.СуммаВзаиморасчетов, 0) КАК Начислено
	|ИЗ
	|	ВТ_СписокАвансов КАК ВТ_СписокАвансов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыплаченныйАванс КАК ВыплаченныйАванс
	|		ПО ВТ_СписокАвансов.Физлицо = ВыплаченныйАванс.Физлицо
	|ГДЕ
	|	ЕСТЬNULL(ВТ_СписокАвансов.СуммаАванса, 0) - ЕСТЬNULL(ВыплаченныйАванс.СуммаВзаиморасчетов, 0) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_СписокАвансов.ФизлицоНаименование";

	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

Функция ПолучитьОстаткиПлановогоАванса(ДокументОбъект, ФизЛица = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",		ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ОбщегоНазначения.ГоловнаяОрганизация(ДокументОбъект.Организация));
	Запрос.УстановитьПараметр("Дата",				КонецМесяца(ДокументОбъект.ПериодРегистрации));
	Запрос.УстановитьПараметр("ПериодРегистрации",	НачалоМесяца(ДокументОбъект.ПериодРегистрации));

	Запрос.УстановитьПараметр("ПоВсемФизлицам", Физлица = Неопределено);	
	Запрос.УстановитьПараметр("Физлица", 					Физлица);	
	
	// ведется ли учет задолженности в разрезе периодов возникновения задолженности
	УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ДокументОбъект.Организация, "УчетЗадолженностиПоМесяцам");
	Запрос.УстановитьПараметр("ПоВсемПериодамРегистрации", НЕ УчетЗадолженностиПоМесяцам);
	
	ВыплатаАвансаПроцентом	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ДокументОбъект.Организация, "ВыплатаАвансаПроцентом");
  	Запрос.УстановитьПараметр("ВыплатаАвансаПроцентом", ВыплатаАвансаПроцентом);


	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.Ставка,
	|РаботникиОрганизацийСрезПоследних.Организация КАК Организация,
	|РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТТарифныеСтавки
	|ИЗ
	|РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		&Дата,
	|		Организация = &ГоловнаяОрганизация
	|			И Сотрудник.ФизЛицо В (&Физлица)
	|			И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацийСрезПоследних
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации.СрезПоследних(КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ), ) КАК ТарифныеСтавкиРаботниковОрганизацииСрезПоследних
	|	ПО РаботникиОрганизацийСрезПоследних.Сотрудник = ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.Сотрудник
	|ГДЕ
	|ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
	|	КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АвансыРаботникам.Физлицо КАК Физлицо,
	|	СУММА(ВЫБОР
	|			КОГДА &ВыплатаАвансаПроцентом
	|				ТОГДА ВЫРАЗИТЬ(ТарифныеСтавки.Ставка * АвансыРаботникам.СуммаАванса / 100 КАК ЧИСЛО(15, 0))
	|			ИНАЧЕ АвансыРаботникам.СуммаАванса
	|		КОНЕЦ) КАК СуммаАванса,
	|	АвансыРаботникам.Физлицо.Наименование
	|ПОМЕСТИТЬ ВТАвансыРаботникам
	|ИЗ
	|	РегистрСведений.АвансыРаботникамОрганизаций.СрезПоследних(КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ), ) КАК АвансыРаботникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ  ВТТарифныеСтавки КАК ТарифныеСтавки
	|		ПО АвансыРаботникам.Организация = ТарифныеСтавки.Организация
	|			И АвансыРаботникам.Физлицо = ТарифныеСтавки.Сотрудник.Физлицо
	|ГДЕ
	|	АвансыРаботникам.Организация = &Организация
	|	И АвансыРаботникам.Физлицо В(&Физлица)
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансыРаботникам.Физлицо,
	|	АвансыРаботникам.Физлицо.Наименование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АвансыРаботникам.Физлицо,
	|	ЕСТЬNULL(РаботникиОрганизацийСрезПоследних.Сотрудник, ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)) КАК Сотрудник,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|					И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения
	|			ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ПодразделениеОрганизации
	|ПОМЕСТИТЬ ВТСотрПодрФизлица
	|ИЗ
	|	ВТАвансыРаботникам КАК АвансыРаботникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&Дата,
	|				Организация = &ГоловнаяОрганизация
	|					И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|					И Сотрудник.ФизЛицо В
	|						(ВЫБРАТЬ
	|							ВТАвансыРаботникам.Физлицо
	|						ИЗ
	|							ВТАвансыРаботникам)) КАК РаботникиОрганизацийСрезПоследних
	|		ПО (РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = АвансыРаботникам.Физлицо)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|					И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлановыйАванс.Физлицо,
	|	ПлановыйАванс.СуммаАванса,
	|	СотрПодрФизлица.Сотрудник,
	|	СотрПодрФизлица.ПодразделениеОрганизации
	|ПОМЕСТИТЬ ВТПлановыйАванс
	|ИЗ
	|	ВТАвансыРаботникам КАК ПлановыйАванс
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрПодрФизлица КАК СотрПодрФизлица
	|		ПО (СотрПодрФизлица.Физлицо = ПлановыйАванс.Физлицо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаЗаМесяц.Физлицо КАК Физлицо,
	|	СУММА(ЗарплатаЗаМесяц.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВТВыплаченныйАванс
	|ИЗ
	|	РегистрНакопления.ЗарплатаЗаМесяцОрганизаций КАК ЗарплатаЗаМесяц
	|ГДЕ
	|	ЗарплатаЗаМесяц.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПлановыйАванс)
	|	И ЗарплатаЗаМесяц.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ЗарплатаЗаМесяц.Организация = &Организация
	|	И ЗарплатаЗаМесяц.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И ЗарплатаЗаМесяц.ПериодВзаиморасчетов = &ПериодРегистрации
	|	И (&ПоВсемФизлицам
	|			ИЛИ ЗарплатаЗаМесяц.Физлицо В (&Физлица))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаЗаМесяц.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыйАванс.Физлицо,
	|	ПлановыйАванс.СуммаАванса - ЕСТЬNULL(ВыплаченныйАванс.СуммаВзаиморасчетов, 0) КАК Начислено
	|ИЗ
	|	ВТПлановыйАванс КАК ПлановыйАванс
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыплаченныйАванс КАК ВыплаченныйАванс
	|		ПО ПлановыйАванс.Физлицо = ВыплаченныйАванс.Физлицо";

	Возврат(Запрос.Выполнить().Выгрузить());	
	
КонецФункции

Функция ПолучитьОстаткиЗарплатыЗаПервуюПоловинуМесяца(ДокументОбъект, ФизЛица = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",	ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("ПоВсемФизлицам", Физлица = Неопределено);	
	Запрос.УстановитьПараметр("Физлица", 		Физлица);	
	
	Запрос.УстановитьПараметр("ПериодРегистрации", НачалоМесяца(ДокументОбъект.ПериодРегистрации));
  
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Зарплата.Физлицо,
	|	СУММА(Зарплата.СуммаВзаиморасчетовОборот) КАК Начислено
	|ИЗ
	|	РегистрНакопления.ЗарплатаЗаПервуюПоловинуМесяца.Обороты(
	|			НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
	|			Месяц,
	|			Организация = &Организация
	|				И (&ПоВсемФизлицам
	|					ИЛИ Физлицо В (&Физлица))) КАК Зарплата
	|ГДЕ
	|	Зарплата.СуммаВзаиморасчетовОборот > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Зарплата.Физлицо";

	Возврат(Запрос.Выполнить().Выгрузить());	
	
КонецФункции

Функция ПолучитьОстаткиЗарплатыЗаМесяцМежрасчет(ДокументОбъект, ФизЛица = Неопределено) Экспорт 
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ХарактерВыплаты",	ДокументОбъект.ХарактерВыплаты);
	Запрос.УстановитьПараметр("Организация",		ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("Дата",				КонецМесяца(ДокументОбъект.ПериодРегистрации) + 1);
	Запрос.УстановитьПараметр("ПериодРегистрации", 	НачалоМесяца(ДокументОбъект.ПериодРегистрации));
	Запрос.УстановитьПараметр("ПоВсемФизлицам", 	Физлица = Неопределено);	
	Запрос.УстановитьПараметр("Физлица", 			Физлица);	
	
	// ведется ли учет задолженности в разрезе периодов возникновения задолженности
	УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ДокументОбъект.Организация, "УчетЗадолженностиПоМесяцам");
	Запрос.УстановитьПараметр("ПоВсемПериодамРегистрации", НЕ УчетЗадолженностиПоМесяцам);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаЗаМесяц.Физлицо КАК Физлицо,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаЗаМесяц.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|			ИНАЧЕ -ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|		КОНЕЦ) КАК Начислено
	|ИЗ
	|	РегистрНакопления.ЗарплатаЗаМесяцОрганизаций КАК ЗарплатаЗаМесяц
	|ГДЕ
	|	ЗарплатаЗаМесяц.Организация = &Организация
	|	И ЗарплатаЗаМесяц.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И (&ПоВсемПериодамРегистрации
	|			ИЛИ ЗарплатаЗаМесяц.ПериодВзаиморасчетов = &ПериодРегистрации)
	|	И (&ПоВсемФизлицам
	|			ИЛИ ЗарплатаЗаМесяц.Физлицо В (&Физлица))
	|	И ЗарплатаЗаМесяц.ХарактерВыплаты = &ХарактерВыплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаЗаМесяц.Физлицо";

	Возврат(Запрос.Выполнить().Выгрузить());	

КонецФункции

Функция ПолучитьОстаткиЗарплатыЗаМесяцПоОснованию(Основание, ФизЛица = Неопределено) Экспорт
	
	ЗапросДляЗаполнения	= Новый Запрос;
	ЗапросДляЗаполнения.УстановитьПараметр("ДокументСсылка", Основание);
	ЗапросДляЗаполнения.УстановитьПараметр("ХарактерВыплаты", ХарактерВыплатыПоДокументу(Основание));
	ЗапросДляЗаполнения.УстановитьПараметр("ПоВсемФизлицам", 	Физлица = Неопределено);	
	ЗапросДляЗаполнения.УстановитьПараметр("Физлица", 			Физлица);	

	ЗапросДляЗаполнения.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОрганизаций.Ссылка КАК ДокументВыплаты
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизаций.ДокументОснование = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументВыплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Зарплата.Физлицо,
	|	СУММА(ВЫБОР
	|			КОГДА Зарплата.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА Зарплата.СуммаВзаиморасчетов
	|			ИНАЧЕ -Зарплата.СуммаВзаиморасчетов
	|		КОНЕЦ) КАК Начислено
	|ИЗ
	|	РегистрНакопления.ЗарплатаЗаМесяцОрганизаций КАК Зарплата
    |ГДЕ
	|	Зарплата.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.ДокументВыплаты
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|	И Зарплата.ХарактерВыплаты = &ХарактерВыплаты
	|	И (&ПоВсемФизлицам
	|			ИЛИ Зарплата.Физлицо В (&Физлица))
	|
	|СГРУППИРОВАТЬ ПО
	|	Зарплата.Физлицо";
		
	Возврат(ЗапросДляЗаполнения.Выполнить().Выгрузить());	
	
КонецФункции

Функция ПолучитьОстаткиЗарплатыЗаМесяцОкончательныйРасчет(ДокументОбъект, ФизЛица = Неопределено) Экспорт 
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",		ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", 	НачалоМесяца(ДокументОбъект.ПериодРегистрации));
	Запрос.УстановитьПараметр("ПоВсемФизлицам", 	Физлица = Неопределено);	
	Запрос.УстановитьПараметр("Физлица", 			Физлица);	
	
	// ведется ли учет задолженности в разрезе периодов возникновения задолженности
	УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ДокументОбъект.Организация, "УчетЗадолженностиПоМесяцам");
	Запрос.УстановитьПараметр("ПоВсемПериодамРегистрации", НЕ УчетЗадолженностиПоМесяцам);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаЗаМесяц.Физлицо,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаЗаМесяц.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|			ИНАЧЕ -ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|		КОНЕЦ) КАК Начислено
	|ИЗ
	|	РегистрНакопления.ЗарплатаЗаМесяцОрганизаций КАК ЗарплатаЗаМесяц
	|ГДЕ
	|	ЗарплатаЗаМесяц.Организация = &Организация
	|	И ЗарплатаЗаМесяц.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И (&ПоВсемПериодамРегистрации
	|				И ЗарплатаЗаМесяц.ПериодВзаиморасчетов <= &ПериодРегистрации
	|			ИЛИ ЗарплатаЗаМесяц.ПериодВзаиморасчетов = &ПериодРегистрации)
	|	И (&ПоВсемФизлицам
	|			ИЛИ ЗарплатаЗаМесяц.Физлицо В (&Физлица))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаЗаМесяц.Физлицо";
	
	Возврат(Запрос.Выполнить().Выгрузить());	
	
КонецФункции

Функция ПолучитьОстаткиЗарплатыЗаМесяцЗадолженность(ДокументОбъект, ФизЛица = Неопределено) Экспорт 
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",		ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", 	НачалоМесяца(ДокументОбъект.ПериодРегистрации));
	Запрос.УстановитьПараметр("ПоВсемФизлицам", 	Физлица = Неопределено);	
	Запрос.УстановитьПараметр("Физлица", 			Физлица);	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаЗаМесяц.Физлицо,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаЗаМесяц.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|			ИНАЧЕ -ЗарплатаЗаМесяц.СуммаВзаиморасчетов
	|		КОНЕЦ) КАК Начислено
	|ИЗ
	|	РегистрНакопления.ЗарплатаЗаМесяцОрганизаций КАК ЗарплатаЗаМесяц
	|ГДЕ
	|	ЗарплатаЗаМесяц.Организация = &Организация
	|	И ЗарплатаЗаМесяц.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И ЗарплатаЗаМесяц.ПериодВзаиморасчетов < &ПериодРегистрации
	|	И (&ПоВсемФизлицам
	|			ИЛИ ЗарплатаЗаМесяц.Физлицо В (&Физлица))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаЗаМесяц.Физлицо";
	
	Возврат(Запрос.Выполнить().Выгрузить());	
	
КонецФункции

// Функция получает массив физлиц, которым необходимо выплатить плановый аванс
//
// Параметры
//  ДокументОбъект  - ДокументОбъект
//  ФизЛица   - массив физлиц или Неопределено
//                 массив физлиц - физлица имеющие лицевые счета
//
// Возвращаемое значение:
//   Массив   - массив физлиц
//
Функция ПолучитьФизлицаРаботниковДляПлановогоАванса(ДокументОбъект, ФизЛица) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДатаРасчетаПлановогоАванса	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ДокументОбъект.Организация, "ДатаРасчетаПлановогоАванса");
	Если ДатаРасчетаПлановогоАванса = 0 Тогда
		ДатаРасчетаПлановогоАванса = 15;
	КонецЕсли;
	ДатаОкончания = КонецДня(Дата( Год(ДокументОбъект.ПериодРегистрации), Месяц(ДокументОбъект.ПериодРегистрации), ДатаРасчетаПлановогоАванса));
	
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(ДокументОбъект.Организация));
	Запрос.УстановитьПараметр("ПериодРегистрации", НачалоМесяца(ДокументОбъект.ПериодРегистрации));
	Запрос.УстановитьПараметр("парамДата", ДатаОкончания);
	Запрос.УстановитьПараметр("ПоВсемФизлицам", Физлица = Неопределено);	
	Запрос.УстановитьПараметр("Физлица", 		Физлица);
	
	// если задан отбор по подразделению, учтем его
	МассивПодразделений = Неопределено;
	Подразделение =  ДокументОбъект.ПодразделениеОрганизации;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ(&Подразделение)";
		Запрос.УстановитьПараметр("Подразделение", 		Подразделение);
		МассивПодразделений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	Запрос.УстановитьПараметр("ПоВсемПодразделениям", МассивПодразделений = Неопределено);	
	Запрос.УстановитьПараметр("МассивПодразделений", МассивПодразделений);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Работники.Сотрудник.Физлицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА Работники.ПериодЗавершения <= &парамДата
	|				И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА Работники.ПричинаИзмененияСостоянияЗавершения = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|						ТОГДА Работники.ПериодЗавершения
	|					ИНАЧЕ &ПериодРегистрации
	|				КОНЕЦ
	|		КОГДА Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|			ТОГДА Работники.Период
	|		ИНАЧЕ &ПериодРегистрации
	|	КОНЕЦ КАК ДатаНачалаПриемНаРаботу,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА Работники.ПериодЗавершения <= &парамДата
	|						И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА Работники.ПричинаИзмененияСостоянияЗавершения
	|				ИНАЧЕ Работники.ПричинаИзмененияСостояния
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА Работники.Период
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ДатаУвольнения,
	|	Работники.Сотрудник.Физлицо.Наименование КАК ФизлицоНаименование,
	|	Работники.Сотрудник
	|ПОМЕСТИТЬ ВТ_СписокРаботников
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&парамДата,
	|			Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И Организация = &ГоловнаяОрганизация
	|				И (&ПоВсемФизлицам
	|					ИЛИ Сотрудник.Физлицо В (&Физлица))) КАК Работники
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Работники.ПериодЗавершения <= &парамДата
	|					И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА Работники.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ Работники.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|	И ВЫБОР
	|			КОГДА Работники.Период < &ПериодРегистрации
	|				ТОГДА ВЫБОР
	|						КОГДА Работники.ПериодЗавершения <= &парамДата
	|								И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА Работники.ПричинаИзмененияСостоянияЗавершения
	|						ИНАЧЕ Работники.ПричинаИзмененияСостояния
	|					КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И (&ПоВсемПодразделениям
	|			ИЛИ ВЫБОР
	|				КОГДА Работники.ПериодЗавершения <= &парамДата
	|						И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА Работники.ПодразделениеОрганизацииЗавершения
	|				ИНАЧЕ Работники.ПодразделениеОрганизации
	|			КОНЕЦ В (&МассивПодразделений))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CписокРаботников.Физлицо КАК Физлицо,
	|	CписокРаботников.ДатаНачалаПриемНаРаботу,
	|	CписокРаботников.ФизлицоНаименование,
	|	CписокРаботников.Сотрудник,
	|	CписокРаботников.ДатаУвольнения
	|ПОМЕСТИТЬ ВТ_СписокФизлиц
	|ИЗ
	|	ВТ_СписокРаботников КАК CписокРаботников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АвансыРаботникамОрганизаций КАК Авансы
	|		ПО CписокРаботников.Физлицо = Авансы.Физлицо
	|			И (Авансы.Организация = &Организация)
	|ГДЕ
	|	Авансы.СуммаАванса > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостояниеРаботников.Сотрудник.Физлицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА СостояниеРаботников.ПериодЗавершения <= &парамДата
	|				И СостояниеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА СостояниеРаботников.ПериодЗавершения
	|		ИНАЧЕ СостояниеРаботников.Период
	|	КОНЕЦ КАК ДатаНачалаСостояниеНеРаботает
	|ПОМЕСТИТЬ ВТ_ФизлицаКадровоеСостояние
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних(
	|			&парамДата,
	|			Организация = &Организация
	|				И Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТ_СписокФизлиц.Сотрудник
	|					ИЗ
	|						ВТ_СписокФизлиц)) КАК СостояниеРаботников
	|ГДЕ
	|	НЕ ВЫБОР
	|				КОГДА СостояниеРаботников.ПериодЗавершения <= &парамДата
	|						И СостояниеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА СостояниеРаботников.СостояниеЗавершения
	|				ИНАЧЕ СостояниеРаботников.Состояние
	|			КОНЕЦ В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Командировка), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ВынужденныйПрогул), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисления.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Отклонения
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	ОсновныеНачисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное)
	|	И ОсновныеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Болезнь), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ГосударственныеОбязанности), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыБезОплаты), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыСОплатой), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Невыходы.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА Невыходы.ЕстьРабочиеДни = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьРабочиеДни
	|ПОМЕСТИТЬ ВТ_ФизлицаЕстьНевыходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновныеНачисления.ФизЛицо КАК ФизЛицо,
	|		МИНИМУМ(ВЫБОР
	|				КОГДА ОсновныеНачисления.ПериодДействияНачало = &ПериодРегистрации
	|						И ОсновныеНачисления.ПериодДействияКонец >= &парамДата
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК ЕстьРабочиеДни
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|				ФизЛицо В
	|						(ВЫБРАТЬ
	|							ВТ_СписокФизлиц.Физлицо
	|						ИЗ
	|							ВТ_СписокФизлиц)
	|					И ОбособленноеПодразделение = &Организация
	|					И ВидРасчета В
	|						(ВЫБРАТЬ
	|							ВТ_Отклонения.Ссылка
	|						ИЗ
	|							ВТ_Отклонения)
	|					И НАЧАЛОПЕРИОДА(ПериодРегистрации, МЕСЯЦ) <= &ПериодРегистрации
	|					И НАЧАЛОПЕРИОДА(ПериодДействия, МЕСЯЦ) = &ПериодРегистрации
	|					И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК ОсновныеНачисления
	|	ГДЕ
	|		ОсновныеНачисления.ПериодДействияНачало <= &парамДата
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОсновныеНачисления.ФизЛицо) КАК Невыходы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтпускаПоУходуЗаРебенком.Сотрудник.Физлицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА ОтпускаПоУходуЗаРебенком.ПериодЗавершения <= &парамДата
	|				И ОтпускаПоУходуЗаРебенком.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ОтпускаПоУходуЗаРебенком.ПериодЗавершения
	|		ИНАЧЕ ОтпускаПоУходуЗаРебенком.Период
	|	КОНЕЦ КАК ДатаНачалаОтпускаПоУходу
	|ПОМЕСТИТЬ ВТ_ФизлицаОтпускПоУходу
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|			&парамДата,
	|			Организация = &ГоловнаяОрганизация
	|				И Сотрудник.Физлицо В
	|					(ВЫБРАТЬ
	|						ВТ_СписокФизлиц.Физлицо
	|					ИЗ
	|						ВТ_СписокФизлиц)) КАК ОтпускаПоУходуЗаРебенком
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ОтпускаПоУходуЗаРебенком.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|					И ОтпускаПоУходуЗаРебенком.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.ПустаяСсылка)
	|				ТОГДА ЛОЖЬ
	|			КОГДА ОтпускаПоУходуЗаРебенком.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|					И ОтпускаПоУходуЗаРебенком.ДействиеЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.ПустаяСсылка)
	|					И &парамДата < ОтпускаПоУходуЗаРебенком.ПериодЗавершения
	|				ТОГДА ЛОЖЬ
	|			КОГДА ОтпускаПоУходуЗаРебенком.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|					И &парамДата >= ОтпускаПоУходуЗаРебенком.ПериодЗавершения
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ОтпускаПоУходуЗаРебенком.ПериодЗавершения <= &парамДата
	|					И ОтпускаПоУходуЗаРебенком.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ОтпускаПоУходуЗаРебенком.ВидРасчетаЗавершения
	|			ИНАЧЕ ОтпускаПоУходуЗаРебенком.ВидРасчета
	|		КОНЕЦ = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокФизлиц.Физлицо,
	|	ВЫБОР
	|		КОГДА ФизлицаКадровоеСостояние.ДатаНачалаСостояниеНеРаботает ЕСТЬ NULL 
	|				И ФизлицаОтпускПоУходу.ДатаНачалаОтпускаПоУходу ЕСТЬ NULL 
	|				И СписокФизлиц.ДатаУвольнения ЕСТЬ NULL 
	|				И ВЫБОР
	|					КОГДА ФизлицаЕстьНевыходы.ЕстьРабочиеДни ЕСТЬ NULL 
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ НЕ ФизлицаЕстьНевыходы.ЕстьРабочиеДни
	|				КОНЕЦ
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИзменялосьСостояние,
	|	СписокФизлиц.ФизлицоНаименование
	|ИЗ
	|	ВТ_СписокФизлиц КАК СписокФизлиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФизлицаОтпускПоУходу КАК ФизлицаОтпускПоУходу
	|		ПО СписокФизлиц.Физлицо = ФизлицаОтпускПоУходу.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФизлицаКадровоеСостояние КАК ФизлицаКадровоеСостояние
	|		ПО СписокФизлиц.Физлицо = ФизлицаКадровоеСостояние.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФизлицаЕстьНевыходы КАК ФизлицаЕстьНевыходы
	|		ПО СписокФизлиц.Физлицо = ФизлицаЕстьНевыходы.ФизЛицо
	|ГДЕ
	|	ЕСТЬNULL(ФизлицаЕстьНевыходы.ЕстьРабочиеДни, ИСТИНА)
	|	И ЕСТЬNULL(ФизлицаКадровоеСостояние.ДатаНачалаСостояниеНеРаботает, &парамДата) > &ПериодРегистрации
	|	И ЕСТЬNULL(ФизлицаОтпускПоУходу.ДатаНачалаОтпускаПоУходу, &парамДата) > &ПериодРегистрации";
	
	ТаблицаФизлиц = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура("ИзменялосьСостояние", Истина);
	МассивСтрок = ТаблицаФизлиц.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() > 0 Тогда
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ТекстСообщения = "Внимание!
							|У этих сотрудников первая половина месяца отработана не полностью.
							|При необходимости уточните сумму планового аванса.";
		ЗаголовокСообщения = ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения,Перечисления.ВидыСообщений.ВажнаяИнформация);
		
		Для каждого СтрокаТЗ Из МассивСтрок Цикл
			ОбработкаКомментариев.ДобавитьСообщение(СтрокаТЗ.ФизлицоНаименование, Перечисления.ВидыСообщений.Информация, , ЗаголовокСообщения);
		КонецЦикла;
	КонецЕсли;		
	
	Возврат ТаблицаФизлиц.ВыгрузитьКолонку("Физлицо");

КонецФункции // ПолучитьФизлицаРаботниковДляПлановогоАванса()

////////////////////////////////////////////////////////////////////
/// Создание зарплаты к выплате по документу-основанию

#Если Клиент Тогда

Процедура СоздатьПоОснованию(ФормаВладелец, Основание, ПредварительныйУчетУдержаний = Неопределено) Экспорт
	
	Док = Документы.ЗарплатаКВыплатеОрганизаций.СоздатьДокумент();
	
	Если ПредварительныйУчетУдержаний = Неопределено Тогда
		Док.Заполнить(Основание.Ссылка);
	Иначе
		Док.Заполнить(Новый Структура("Ссылка, ПредварительныйУчетУдержаний", Основание.Ссылка, ПредварительныйУчетУдержаний));
	КонецЕсли;
	
	Док.ПолучитьФорму().Открыть();

КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////
/// Методы определения взаимосвязи между основанием и характером выплаты

// Функция возвращает тип документа-основания по характеру выплаты
//
// Параметры:
//   Документ - ДокументОбъект
//
Функция ТипОснованияПоХарактеруВыплаты(ХарактерВыплаты) Экспорт
	
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Дивиденды Тогда
		ТипОснования = Тип("ДокументСсылка.НачислениеДивидендовОрганизаций")
	ИначеЕсли ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Премии Тогда 
		ТипОснования = Тип("ДокументСсылка.ПремииРаботниковОрганизаций")
	ИначеЕсли ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПрочиеРазовыеНачисления Тогда 
		ТипОснования = Тип("ДокументСсылка.РегистрацияРазовыхНачисленийРаботниковОрганизаций")
	ИначеЕсли ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ВозвратНДФЛ Тогда 			
		ТипОснования = Тип("ДокументСсылка.НДФЛВозвратНалога") 
	ИначеЕсли ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПособияФСС Тогда 			
		ТипОснования = Тип("ДокументСсылка.НачислениеЕдиновременныхПособийЗаСчетФСС")
	Иначе 
		ТипОснования = Неопределено
	КонецЕсли;
		
	Возврат(ТипОснования)		
	
КонецФункции

// Функция возвращает характер выплаты, соответствующий документу
//
// Параметры:
//   ДокументСсылка - ДокументСсылка
//
Функция ХарактерВыплатыПоДокументу(ДокументСсылка) Экспорт
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Если ТипДокумента = Тип("ДокументСсылка.НачислениеДивидендовОрганизаций") Тогда 
		
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Дивиденды
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.НачислениеЕдиновременныхПособийЗаСчетФСС") Тогда 			
		
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПособияФСС
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.НачислениеЗарплатыРаботникамОрганизаций") Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачислениеЗарплатыРаботникамОрганизаций.ПериодНачисления КАК ПериодНачисленияЗарплаты
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций КАК НачислениеЗарплатыРаботникамОрганизаций
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		ПериодНачисленияЗарплаты = Запрос.Выполнить().Выгрузить()[0].ПериодНачисленияЗарплаты;
		
		Если ПериодНачисленияЗарплаты = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца Тогда	
			ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.АвансЗаПервуюПоловинуМесяца
		Иначе
			ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций") Тогда 			
		
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Отпускные
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту") Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачислениеПоБольничномуЛисту.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности
		|ИЗ
		|	Документ.НачислениеПоБольничномуЛисту КАК НачислениеПоБольничномуЛисту
		|ГДЕ
		|	НачислениеПоБольничномуЛисту.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		ПричинаНетрудоспособности = Запрос.Выполнить().Выгрузить()[0].ПричинаНетрудоспособности;
		
		Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда	
			ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПоБеременностиИРодам
		Иначе
			ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПоБольничнымЛистам
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.НДФЛВозвратНалога") Тогда 			
		
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ВозвратНДФЛ
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку") Тогда 			
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОплатаПоСреднемуЗаработку.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени
		|ИЗ
		|	Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднемуЗаработку
		|ГДЕ
		|	ОплатаПоСреднемуЗаработку.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		ВидИспользованияРабочегоВремени = Запрос.Выполнить().Выгрузить()[0].ВидИспользованияРабочегоВремени;
		
		Если ВидИспользованияРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Командировка Тогда
			ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Командировочные
		Иначе
			ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПремииРаботниковОрганизаций") Тогда
		
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Премии
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасчетПриУвольненииРаботникаОрганизаций") Тогда
		
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.РасчетПриУвольнении
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РегистрацияРазовыхНачисленийРаботниковОрганизаций") Тогда
		
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПрочиеРазовыеНачисления
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.НДФЛПерерасчет")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.НевыходыВОрганизациях")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОплатаПраздничныхИВыходныхДнейОрганизаций")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОплатаСверхурочныхЧасов")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПереносЗадолженностиРаботниковОрганизаций")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.РегистрацияПростоевРаботниковОрганизаций")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.РегистрацияРазовыхУдержанийРаботниковОрганизаций") 
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОплатаЗамещенияСотрудников")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОплатаСовмещенияСотрудников")
		//vvv
		ИЛИ ТипДокумента = Тип("ДокументСсылка.РасчетОсновногоЗаработкаРаботниковОрганизации")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.РасчетМежразряднойРазницы")
		//
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПереносОстатоковПоРасчетамСРаботниками") Тогда
		
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата
		
	Иначе
		
		ХарактерВыплаты = Неопределено;
		
	КонецЕсли;
	
	Возврат(ХарактерВыплаты)
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ПОЛУЧЕНИЯ СОСТОЯНИЯ ДОКУМЕНТОВ

// По переданным ссылкам на ЗарплатаКВыплате возвращает таблицу значений со ссылкой на документ и его состояние (проведен, удален, выплачивается)
//
// Параметры:
//	Ссылкы - массив документ-ссылка ЗарплатаКВыплатеОрганизаций
//
// Возвращаемое значение:
//	Таблица значений
//
Функция ПолучитьСостояние(Ссылки, УчитыватьРеглДокументы = Истина, УчитыватьУпрДокументы = Ложь) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = ЗарплатаКВыплатеОрганизацийДополнительный.ПолучитьТекстЗапросаСостояния(УчитыватьРеглДокументы, УчитыватьУпрДокументы);
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции //ПолучитьСостояние()


// По переданныму состоянию документа устанавливает текст ячеек
//
// Параметры:
//	СостояниеДокумента - строка таблицы значений с состоянием текущей строки
//  Ячейки - фиксированную коллекцию значений ОформлениеЯчейки
//
Процедура УстановитьТекстСостояния(СостояниеДокумента, Ячейки) Экспорт
	// В этой конфигурации не реализуется	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
/// Методы, связанные с выплатой зарплаты

// По переданной ссылке ЗарплатаКВыплате возвращает таблицу значений со ссылкой на ведомость и ее представлением
//
// Параметры:
//	Ссылка - документ-ссылка ЗарплатаКВыплатеОрганизаций
//
// Возвращаемое значение:
//	Таблица значений
//
Функция ПолучитьДокументыНаОснованииЗарплатаКВыплате(Ссылка) Экспорт
	
	ЗапросПоВедомостям = Новый Запрос;
	ЗапросПоВедомостям.УстановитьПараметр("Ссылка", Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка) КАК Представление
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость = &Ссылка
	|	И ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор)
	|ИЗ
	|	РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
	|ГДЕ
	|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость = &Ссылка
	|	И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор <> &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
		
		
	ЗапросПоВедомостям.Текст = ТекстЗапроса;
	
	Возврат ЗапросПоВедомостям.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////
/// Методы для модуля объекта документа ЗарплатаКВыплате
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Т53,Т49,КО2,Реестр,ПереченьСокр,ПереченьПолностью","Форма Т-53","Форма Т-49","РКО","Реестр депонированных сумм","Список плательщиков в банк (ФИО сокращенно)", "Список плательщиков в банк (ФИО полностью)");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#Если Клиент Тогда

// Процедура осуществляет печать документа
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, ДокументОбъект) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Т53" тогда
		
		Если ДокументОбъект.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
			РаботаСДиалогами.ВывестиПредупреждение("Платежная ведомость Т-53 формируется только при выплате через кассу!");
			Возврат Неопределено;
		КонецЕсли;
		
		Если ДокументОбъект.Зарплата.Количество() > 1 И глЗначениеПеременной("глОграничитьКоличествоСотрудниковПриПечатиВедомости") Тогда
			РаботаСДиалогами.ВывестиПредупреждение("Текущая настройка защиты персональных данных ограничивает количество сотрудников в ведомости, возможно печать ведомости только по одному сотруднику!");
			Возврат Неопределено;
		КонецЕсли;
		
		ТабДокумент = ЗарплатаКВыплатеОрганизацийДополнительный.ПечатьТ53(ДокументОбъект);
		Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ДокументОбъект, "Платежная ведомость Т-53 "));
		
	ИначеЕсли ИмяМакета = "Т49" тогда
		
		Если ДокументОбъект.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
			РаботаСДиалогами.ВывестиПредупреждение("Расчетно-платежная ведомость Т-49 формируется только при выплате через кассу!");
			Возврат Неопределено;
		КонецЕсли;
		
		Если ДокументОбъект.Зарплата.Количество() > 1 И глЗначениеПеременной("глОграничитьКоличествоСотрудниковПриПечатиВедомости") Тогда
			РаботаСДиалогами.ВывестиПредупреждение("Текущая настройка защиты персональных данных ограничивает количество сотрудников в ведомости, возможно печать ведомости только по одному сотруднику!");
			Возврат Неопределено;
		КонецЕсли;
		
		ТабДокумент = ЗарплатаКВыплатеОрганизацийДополнительный.ПечатьТ49(ДокументОбъект);
		Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ДокументОбъект,"Платежная ведомость Т-49 "));
		
	ИначеЕсли ИмяМакета = "КО2" тогда
		
		Если ДокументОбъект.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
			РаботаСДиалогами.ВывестиПредупреждение("РКО формируются только при выплате через кассу!");
			Возврат Неопределено;
		КонецЕсли;
		
		ТабДокумент = ЗарплатаКВыплатеОрганизацийДополнительный.ПечатьРКО(ДокументОбъект);
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ДокументОбъект,"Расходные кассовые ордера "));
		КонецЕсли;
		
		
	ИначеЕсли ИмяМакета = "Реестр" тогда
		
		Если ДокументОбъект.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
			РаботаСДиалогами.ВывестиПредупреждение("Реестр депонированных сумм формируется только при выплате через кассу!");
			Возврат Неопределено;
		КонецЕсли;
		
		ТабДокумент = ЗарплатаКВыплатеОрганизацийДополнительный.ПечатьРеестр(ДокументОбъект);
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ДокументОбъект,"Реестр депонированных сумм "));
		КонецЕсли;
		
	ИначеЕсли ИмяМакета = "ПереченьСокр" тогда
		
		Если ДокументОбъект.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
			РаботаСДиалогами.ВывестиПредупреждение("Список плательщиков в банк формируется только при выплате через банк!");
			Возврат Неопределено;
		КонецЕсли;
		
		// в параметре передается печатемый документ, ведомость (в данном случае одно и то же) и вариант вывода ФИО
		ТабДокумент = ФормированиеПечатныхФормДополнительный.ПечатьСписокПеречислений(ДокументОбъект.Ссылка, ДокументОбъект.Ссылка, Истина); 
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ДокументОбъект,"Список плательщиков в банк "));
		КонецЕсли;
		
	ИначеЕсли ИмяМакета = "ПереченьПолностью" тогда
		
		Если ДокументОбъект.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
			РаботаСДиалогами.ВывестиПредупреждение("Список плательщиков в банк формируется только при выплате через банк!");
			Возврат Неопределено;
		КонецЕсли;
		
		// в параметре передается печатемый документ, ведомость (в данном случае одно и то же) вариант вывода ФИО
		ТабДокумент = ФормированиеПечатныхФормДополнительный.ПечатьСписокПеречислений(ДокументОбъект.Ссылка, ДокументОбъект.Ссылка, Ложь); // в параметре передается вариант вывода ФИО
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			Возврат РаботаСДиалогами.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ДокументОбъект,"Список плательщиков в банк "));
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // Печать

#КонецЕсли

////////////////////////////////////////////////////////////////////////
/// Методы заполнения документа ЗарплатаКВыплатеОрганизаций

// Функция выполняет очистку таблицы зарплат неверных в текущем контексте строк
//                  
// Параметры:
//   ТаблицаЗарплат - таблица значений с данными о зарплате физлиц
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ПроверитьСтрокуЗарплаты(ДокументОбъект, СтрокаЗарплаты) Экспорт
	
	Возврат Истина
		
КонецФункции

Процедура ЗаполнитьДобавленнуюСтрокуЗарплаты(ДокументОбъект, СтрокаЗарплаты) Экспорт
	
	УпрощенныйУчетВзаиморасчетов = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ДокументОбъект.Организация, "УпрощенныйУчетВзаиморасчетов");
	ВыплаченностьЗарплаты = ?(УпрощенныйУчетВзаиморасчетов, Перечисления.ВыплаченностьЗарплаты.Выплачено, Перечисления.ВыплаченностьЗарплаты.НеВыплачено);

	СтрокаЗарплаты.ВыплаченностьЗарплаты = ВыплаченностьЗарплаты;

КонецПроцедуры	
	
////////////////////////////////////////////////////////////////////////
/// Методы обеспечения проведения документа ЗарплатаКВыплатеОрганизаций

Функция ДополнительныеПоляШапкиДокумента() Экспорт
	
	Возврат "НЕОПРЕДЕЛЕНО КАК ДополнительныеПоляШапки"
	
КонецФункции

Процедура ВыполнитьДополнительныеПроверкиШапкиДокумента(ШапкаДокумента, Отказ, Заголовок) Экспорт 
	
	// Банк
	Если ШапкаДокумента.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк И НЕ ЗначениеЗаполнено(ШапкаДокумента.Банк)Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан банк!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДополнительныеПроверкиСтрокиДокумента(ШапкаДокумента, СтрокаЗарплаты, УпрощенныйУчетВзаиморасчетов, Отказ, Заголовок = "", СтрокаНачалаСообщенияОбОшибке = "") Экспорт 
	
	Если УпрощенныйУчетВзаиморасчетов Тогда
		Если ШапкаДокумента.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу И (НЕ ЗначениеЗаполнено(СтрокаЗарплаты.ВыплаченностьЗарплаты) ИЛИ СтрокаЗарплаты.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.НеВыплачено) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не проставлена отметка о выплате или депонировании!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
/// Процедуры и функции форм списка и выбора
#Если Клиент Тогда

Процедура ОбработкаВводаНаОсновании(ИмяМетаданныхДокумента, ТекущиеДанные, Форма) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы[ИмяМетаданныхДокумента];
	
	Если ПравоДоступа("Добавление", МетаданныеДокумента) Тогда
		
		ДокументОбъект = Документы[ИмяМетаданныхДокумента].СоздатьДокумент();
		
		Отказ = Ложь;
		Попытка
			ДокументОбъект.Заполнить(ТекущиеДанные.Ссылка);
		Исключение
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
			ОбработкаКомментариев.УдалитьСообщения();

			ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание, Отказ, "Создание документа «" + МетаданныеДокумента.Синоним + "»");
			
			ОбработкаКомментариев.ПоказатьСообщения();
		КонецПопытки;	
		
		Если НЕ Отказ Тогда
			ФормаДокумента = ДокументОбъект.ПолучитьФорму();
			ФормаДокумента.Открыть();
		КонецЕсли;	
		
	Иначе
		Предупреждение("Нарушение прав доступа!");	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработчикОжиданияДокументСписокПриАктивизацииСтроки(Форма, ДополнительныеДействия) Экспорт
	
	ЭлементыФормы = Форма.ЭлементыФормы;
	
	КнопкиМенюПерейти 	= ЭлементыФормы.ДействияФормы.Кнопки.ПодменюПерейти.Кнопки;
	ТекущиеДанные 		= ЭлементыФормы.ДокументСписок.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
			Если КнопкиМенюПерейти.Найти("ВыплатаЗарплатыРасходнымиОрдерами") = Неопределено Тогда
				НоваяКнопка = КнопкиМенюПерейти.Вставить(0, "ВыплатаЗарплатыРасходнымиОрдерами", ТипКнопкиКоманднойПанели.Действие, "Выплата зарплаты расходными ордерами", ДополнительныеДействия);
				НоваяКнопка.Подсказка = "Выплата зарплаты расходными ордерами";
				НоваяКнопка.Пояснение = "Выплата зарплаты расходными ордерами";
			КонецЕсли;
		Иначе
			Если КнопкиМенюПерейти.Найти("ВыплатаЗарплатыРасходнымиОрдерами") <> Неопределено Тогда
				КнопкиМенюПерейти.Удалить(0);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СписокДокументовВводимыхНаОсновании(ТекущиеДанные) Экспорт
	
	ДокументыВводимыеНаОсновании = Новый Массив;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		УпрощенныйУчетВзаиморасчетов = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ТекущиеДанные.Организация, "УпрощенныйУчетВзаиморасчетов");
		Если НЕ УпрощенныйУчетВзаиморасчетов Тогда

			Если ТекущиеДанные.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
				ДокументыВводимыеНаОсновании.Добавить("РасходныйКассовыйОрдер");
				ДокументыВводимыеНаОсновании.Добавить("ДепонированиеОрганизаций");
			ИначеЕсли ТекущиеДанные.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
				ДокументыВводимыеНаОсновании.Добавить("ПлатежноеПоручениеИсходящее");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДокументыВводимыеНаОсновании;
	
КонецФункции

Процедура ВыполнитьДополнительныеДействия(ИмяКоманды, Форма) Экспорт
	
	Если ИмяКоманды = "ВыплатаЗарплатыРасходнымиОрдерами" Тогда
		
		ТекущиеДанные = Форма.ЭлементыФормы.ДокументСписок.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
			
		ФормированиеРКО = Обработки.ВыплатаЗарплатыРасходнымиОрдерами.Создать();
		ФормированиеРКО.Организация = ТекущиеДанные.Организация;
		ФормированиеРКО.ПлатежнаяВедомость = ТекущиеДанные.Ссылка;
		ФормированиеРКО.Автозаполнение();
		ФормированиеРКО.ПолучитьФорму().Открыть();		

	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаСпискаОбработкаОповещенияДополнительно(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ИзменениеВыплатыПоВедомостиРегл" Тогда
		Форма.ЭлементыФормы.ДокументСписок.ОбновитьСтроки();
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаСпискаПередОткрытиемДополнительно(Форма) Экспорт
	
	Форма.ДокументСписок.Колонки.Добавить("Организация");
	Форма.ДокументСписок.Колонки.Добавить("СпособВыплаты");
	РаботаСДиалогами.ВставитьКолонкуВТабличноеПоле(9, Форма.ЭлементыФормы.ДокументСписок, "СпособВыплаты", "Способ выплаты", "СпособВыплаты");
	
	// при создании табличного поля колонки не было и элемент управления отбором был отключен
	// после добавления колонки, необходимо включить и отбор по значениям в ней
	Форма.ЭлементыФормы.ДокументСписок.НастройкаОтбора["СпособВыплаты"].Доступность = Истина;
	
КонецПроцедуры

Процедура ФормаСпискаПриСозданииФормыДополнительно(Форма) Экспорт
	
	// добавляем колонку программно, чтобы данные всегда были доступны
	Форма.ДокументСписок.Колонки.Добавить("СпособВыплаты");
	
КонецПроцедуры

#КонецЕсли

///////////////////////////////////////////////////////////////
/// Методы для представления зарплаты к выплате

Функция ХарактерВыплатыВРодительномПадежеДополнительно(ХарактерВыплаты) Экспорт
	
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Дивиденды Тогда
		Возврат "дивидендов";
	КонецЕсли;
	
КонецФункции	


Функция ВставитьКолонкуВТабличноеПоле(НомерКолонки = Неопределено, ТабличноеПоле, Имя, ТекстШапки, 
									Данные = Неопределено, ДанныеФлажка = Неопределено, Подсказка = "", Видимость = Истина, 
									ТипЭлементаУправления = Неопределено, Положение = Неопределено, Ширина = Неопределено,
									КнопкаВыбора = Неопределено, КнопкаОткрытия = Неопределено, КнопкаОчистки = Неопределено) Экспорт
	
	Если НомерКолонки = Неопределено Тогда
		НоваяКолонка = ТабличноеПоле.Колонки.Добавить(Имя, ТекстШапки);
	Иначе
		НоваяКолонка = ТабличноеПоле.Колонки.Вставить(НомерКолонки, ТекстШапки);
		НоваяКолонка.Имя = Имя;
	КонецЕсли;
	
	Если ТипЭлементаУправления <> Неопределено Тогда
		НоваяКолонка.УстановитьЭлементУправления(ТипЭлементаУправления);
		Если КнопкаВыбора <> Неопределено Тогда
			НоваяКолонка.ЭлементУправления.КнопкаВыбора = КнопкаВыбора;
		КонецЕсли;
		Если КнопкаОткрытия <> Неопределено Тогда
			НоваяКолонка.ЭлементУправления.КнопкаОткрытия = КнопкаОткрытия;
		КонецЕсли;
		Если КнопкаОчистки <> Неопределено Тогда
			НоваяКолонка.ЭлементУправления.КнопкаОчистки = КнопкаОчистки;
		КонецЕсли;
	КонецЕсли;
	
	Если Данные <> Неопределено Тогда
		НоваяКолонка.Данные = Данные;
	КонецЕсли;
	
	Если ДанныеФлажка <> Неопределено Тогда
		НоваяКолонка.ДанныеФлажка = ДанныеФлажка;
	КонецЕсли;
	
	Если Положение <> Неопределено Тогда
		НоваяКолонка.Положение = Положение;
	Иначе
		НоваяКолонка.Положение = ПоложениеКолонки.НоваяКолонка;
	КонецЕсли;
	
	Если Ширина <> Неопределено Тогда
		НоваяКолонка.Ширина = Ширина;
	КонецЕсли;
	
	НоваяКолонка.ПодсказкаВШапке = Подсказка;
	НоваяКолонка.Видимость = Видимость;
	
	Возврат НоваяКолонка
	
КонецФункции

////////////////////////////////////////////////////////////////////////
/// Процедуры и функции формы настройки расчета
#Если Клиент Тогда

Функция ИмяСтраницыНастройкиРасчетаДополнительно(ХарактерВыплаты) Экспорт
	
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Дивиденды Тогда
		Возврат "Дивиденды";
	КонецЕсли;
	
КонецФункции

#КонецЕсли
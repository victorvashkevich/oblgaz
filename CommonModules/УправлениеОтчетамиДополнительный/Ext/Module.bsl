//
Процедура ОбработатьПоляОтбораНаОсновнойФормеУниверсальногоОтчета(ЭлементыФормы, ПостроительОтчета, СтруктураСвязиЭлементовСДанными = Неопределено, ПутьКПостроителю = "ОтчетОбъект") Экспорт

	// Структура для хранения связи э.у. с данными
	СтруктураСвязиЭлементовСДанными = Новый Структура;

	КоличествоОтборов = 0;
	Для Сч = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл

		ПолеОтбора = ПостроительОтчета.Отбор[Сч];

		Если НЕ (ПустаяСтрока(ПолеОтбора.Имя) ИЛИ ПолеОтбора.Имя = "Периодичность") Тогда
		
			КоличествоОтборов=КоличествоОтборов+1;
		
		КонецЕсли; 
	КонецЦикла;
	Если КоличествоОтборов>5 Тогда
		КоличествоОтборов = 5;
	КонецЕсли;

	Сч = 0;
	Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл

		ПолеОтбора = ПостроительОтчета.Отбор[Инд];

		Если ПустаяСтрока(ПолеОтбора.Имя) ИЛИ ПолеОтбора.Имя = "Периодичность" Тогда
		
			Продолжить;
		
		КонецЕсли; 

		Сч = Сч + 1;
		Если Сч>КоличествоОтборов Тогда
			прервать;
		КонецЕсли;
		Флажок = ЭлементыФормы["ФлажокНастройки"+Сч];
		
		ПолеВыбора = ЭлементыФормы["ПолеВидаСравнения"+Сч];

//			ПолеВыбора.УстановитьДействие("ПриИзменении", ЭталонПолеВыбора.ПолучитьДействие("ПриИзменении"));
		
		ПолеВвода = ЭлементыФормы["ПолеНастройки"+Сч];

//			ПолеВвода.УстановитьДействие("ПриИзменении", ЭталонПолеВвода.ПолучитьДействие("ПриИзменении"));

		ПолеВводаС = ЭлементыФормы["ПолеНастройкиС"+Сч];

//			ПолеВводаС.УстановитьДействие("ПриИзменении", ЭталонПолеВводаС.ПолучитьДействие("ПриИзменении"));
		
		ПолеВводаПо = ЭлементыФормы["ПолеНастройкиПо"+Сч];;
//			ПолеВводаПо.УстановитьДействие("ПриИзменении", ЭталонПолеВводаПо.ПолучитьДействие("ПриИзменении"));

		ТипОтбора = ПостроительОтчета.Отбор[ПолеОтбора.Имя].ТипЗначения;

		ПолеВыбора.СписокВыбора = УправлениеОтчетами.ПолучитьСписокВидовСравненияПоТипу(ТипОтбора);

		ЭлементыФормы["ФлажокНастройки"+Сч].Заголовок = ПолеОтбора.Представление;
		ЭлементыФормы["ФлажокНастройки"+Сч].Данные   = ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".Использование";
		ЭлементыФормы["ПолеВидаСравнения"+Сч].Данные = ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".ВидСравнения";
		ЭлементыФормы["ПолеНастройки"+Сч].Данные     = ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".Значение";
		ЭлементыФормы["ПолеНастройкиС"+Сч].Данные    = ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".ЗначениеС";
		ЭлементыФормы["ПолеНастройкиПо"+Сч].Данные   = ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".ЗначениеПо";

		СтруктураСвязиЭлементовСДанными.Вставить("ФлажокНастройки"+Сч,   ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".Использование");
		СтруктураСвязиЭлементовСДанными.Вставить("ПолеВидаСравнения"+Сч, ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".ВидСравнения");
		СтруктураСвязиЭлементовСДанными.Вставить("ПолеНастройки"+Сч,     ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".Значение");
		СтруктураСвязиЭлементовСДанными.Вставить("ПолеНастройкиС"+Сч,    ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".ЗначениеС");
		СтруктураСвязиЭлементовСДанными.Вставить("ПолеНастройкиПо"+Сч,   ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".ЗначениеПо");

		// Если только один тип, то тип выбирать не будем
		ЭлементыФормы["ПолеНастройки"+Сч].ВыбиратьТип   = НЕ (ТипОтбора.Типы().Количество()=1);
		ЭлементыФормы["ПолеНастройкиС"+Сч].ВыбиратьТип  = НЕ (ТипОтбора.Типы().Количество()=1);
		ЭлементыФормы["ПолеНастройкиПо"+Сч].ВыбиратьТип = НЕ (ТипОтбора.Типы().Количество()=1);

		Если ЭлементыФормы["ПолеВидаСравнения"+Сч].Значение = ВидСравнения.Интервал
			ИЛИ ЭлементыФормы["ПолеВидаСравнения"+Сч].Значение = ВидСравнения.ИнтервалВключаяГраницы 
			ИЛИ ЭлементыФормы["ПолеВидаСравнения"+Сч].Значение = ВидСравнения.ИнтервалВключаяНачало 
			ИЛИ ЭлементыФормы["ПолеВидаСравнения"+Сч].Значение = ВидСравнения.ИнтервалВключаяОкончание Тогда
		
			ЭлементыФормы["ПолеНастройки"+Сч].Видимость = Ложь;
			ЭлементыФормы["ПолеНастройкиС"+Сч].Видимость = Истина;
			ЭлементыФормы["ПолеНастройкиПо"+Сч].Видимость = Истина;
		
		Иначе
		
			ЭлементыФормы["ПолеНастройки"+Сч].Видимость = Истина;
			ЭлементыФормы["ПолеНастройкиС"+Сч].Видимость = Ложь;
			ЭлементыФормы["ПолеНастройкиПо"+Сч].Видимость = Ложь;
		
		КонецЕсли;
	
	КонецЦикла; 

КонецПроцедуры // ОбработатьПоляОтбораНаОсновнойФормеУниверсальногоОтчета()

// Формирует текст-заголовок формы отчета
Функция СформироватьЗаголовокОсновнойФормы(ДатаНач, ДатаКон, НазваниеОтчета, РежимВводаПериода) Экспорт

	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если РежимВводаПериода =  0 Тогда  // произвольный период
		Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда
			ОписаниеПериода     = "Период не установлен";

		Иначе
			Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда
				ОписаниеПериода = "" + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") 
				+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

			Иначе
				Если ДатаНач <= ДатаКон Тогда
					ОписаниеПериода = "" + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
				Иначе
					ОписаниеПериода = "Неправильно задан период!"
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли РежимВводаПериода =  1 Тогда   // на дату
		Если ДатаКон = '00010101000000' Тогда
			ОписаниеПериода = "на текущее время " + Формат(ТекущаяДата(), "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

		Иначе
			ОписаниеПериода = "на конец дня " + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
			
		КонецЕсли;

	ИначеЕсли РежимВводаПериода = 2 Тогда   // месяц
		Если ДатаНач = '00010101000000' Тогда
			ОписаниеПериода     = "Период не установлен";

		Иначе
			ОписаниеПериода = "" + ПредставлениеПериода(НачалоМесяца(ДатаНач), КонецМесяца(ДатаНач), "ФП = Истина");
			
		КонецЕсли;
		
	ИначеЕсли РежимВводаПериода = 3 Тогда   // квартал
		Если ДатаНач = '00010101000000' Тогда
			ОписаниеПериода     = "Период не установлен";

		Иначе
			ОписаниеПериода = "" + ПредставлениеПериода(НачалоКвартала(ДатаНач), КонецКвартала(ДатаНач), "ФП = Истина");
			
		КонецЕсли;
		
	ИначеЕсли РежимВводаПериода = 4 Тогда   // год
		Если ДатаНач = '00010101000000' Тогда
			ОписаниеПериода     = "Период не установлен";

		Иначе
			ОписаниеПериода = "" + ПредставлениеПериода(НачалоГода(ДатаНач), КонецГода(ДатаНач), "ФП = Истина");
			
		КонецЕсли;
		
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОписаниеПериода) Тогда
		Возврат НазваниеОтчета;
	Иначе
		Возврат НазваниеОтчета+" (" + ОписаниеПериода + ") ";
	КонецЕсли;

КонецФункции // СформироватьЗаголовокОсновнойФормы()

// Удаляет автоматически добавляемые Построителем при инициализации дополнительные поля с измерениями
//
// Параметры:
//	нет
//
Процедура ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета) Экспорт

	Сч=0;
	Пока Сч<ПостроительОтчета.ВыбранныеПоля.Количество() Цикл

		Если ПостроительОтчета.ИзмеренияСтроки.Найти(ПостроительОтчета.ВыбранныеПоля[Сч].Имя)<>Неопределено Тогда

			ПостроительОтчета.ВыбранныеПоля.Удалить(ПостроительОтчета.ВыбранныеПоля[Сч]);

		ИначеЕсли ПостроительОтчета.ИзмеренияКолонки.Найти(ПостроительОтчета.ВыбранныеПоля[Сч].Имя)<>Неопределено Тогда

			ПостроительОтчета.ВыбранныеПоля.Удалить(ПостроительОтчета.ВыбранныеПоля[Сч]);
			
		Иначе

			Сч=Сч+1;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОчиститьДополнительныеПоляПостроителя()

Функция ПодставитьЗапросДляПолученияНалоговойПолитики(ТекстЗапроса) Экспорт
	
	ТекстЗамены = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
	              |	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	              |	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ПустаяСсылка) КАК ВидТарифаСтраховыхВзносов,
	              |	ЛОЖЬ КАК УплачиватьДобровольныеВзносыВФСС,
	              |	ЛОЖЬ КАК ОрганизацияЯвляетсяПлательщикомЕНВД,
	              |	ЛОЖЬ КАК УСН
	              |ПОМЕСТИТЬ ВТНалоговыйУчет";
	
	ТекстНовый = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	УчетнаяПолитикаНалоговыйУчет.Период,
	             |	УчетнаяПолитикаНалоговыйУчет.Организация,
	             |	УчетнаяПолитикаНалоговыйУчет.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
	             |	УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС,
	             |	УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомЕНВД,
	             |	УчетнаяПолитикаНалоговыйУчет.УСН
	             |ПОМЕСТИТЬ ВТНалоговыйУчет
	             |ИЗ
	             |	РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет";
	
	ТЗ = СтрЗаменить(ТекстЗапроса,ТекстЗамены, ТекстНовый);
	
	
	Возврат ТЗ;  
	
КонецФункции


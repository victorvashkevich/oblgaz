// Производит расчет записей набора записей регистра расчета
// параметры:
//  ИсходныеДанные - результат запроса к исходным данным
//  НаборЗаписейРегистра - набор записей
//  ЗаписиДоходыНДФЛ - набор записей регистра доходов НДФЛ
//  ГоловнаяОрганизация - ссылка на организацию
//  ОбособленноеПодразделение - ссылка на обособленное подразделение
//	ТабличнаяЧастьДокумента - табличная часть документа, заполняется по результатам расчета
//
// возвращаемое значение:
//	нет
//
Процедура РассчитатьЗаписиНабора(ИсходныеДанные,
									НаборЗаписейРегистра,
									НеобходимыеДанные,
									ЗаписиДоходыНДФЛ,
									ГоловнаяОрганизация,
									ОбособленноеПодразделение,
									ТабличнаяЧастьДокумента,
									ДанныеДляПрогнозаНДФЛ = Неопределено,
									СведенияОДоначислениях = Неопределено,
									КурсВалютыУпрУчета = Неопределено,
									ПовторныйРасчет = Ложь,
									МассивИндексыСтрокТабличнойЧасти = Неопределено,
									КомментироватьРасчет = Ложь, ФормаКомментариев = НеОпределено)
	
	СтруктураПоиска = Новый Структура("НомерСтроки");
	ПустойКодДохода = Справочники.ДоходыНДФЛ.ПустаяСсылка();
	
	// признаки расчета набора записей определенного регистра
	ОсновныеНачисленияОрганизаций = Ложь;
	ДополнительныеНачисленияОрганизаций = Ложь;
	УправленческиеРасчеты = Ложь;
	УправленческиеНачисления = Ложь;
	РегламентированныеУдержания = Ложь;
	РегламентированныеНачисления = Ложь;
	Если ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
		ОсновныеНачисленияОрганизаций = Истина;
		РегламентированныеНачисления = Истина;
	ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда
		ДополнительныеНачисленияОрганизаций = Истина;
		РегламентированныеНачисления = Истина;
	ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.УправленческиеНачисления") Тогда
		УправленческиеРасчеты = Истина;
		УправленческиеНачисления = Истина;
	ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.УправленческиеУдержания") Тогда
		УправленческиеРасчеты = Истина;
	ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.УдержанияРаботниковОрганизаций") Тогда
		РегламентированныеУдержания = Истина;
	КонецЕсли;
	
	// Соответствие для хранения графика с ошибками
	ГрафикиБезРабочегоВремени = Новый ТаблицаЗначений;
	ГрафикиБезРабочегоВремени.Колонки.Добавить("ГрафикРаботы");
	ГрафикиБезРабочегоВремени.Колонки.Добавить("ВидУчетаВремени");
	
	ВычетНДФЛКод405 = Справочники.ВычетыНДФЛ.Код405;
	ВычетНДФЛКод404 = Справочники.ВычетыНДФЛ.Код404;
	Для Каждого СтрокаДвижений Из НаборЗаписейРегистра Цикл
		СтруктураПоиска.НомерСтроки = СтрокаДвижений.НомерСтроки;
		Если ИсходныеДанные.НайтиСледующий(СтруктураПоиска) Тогда
			СтрокаТабличнойЧасти = Неопределено;
			Если ТабличнаяЧастьДокумента <> Неопределено Тогда
				Если МассивИндексыСтрокТабличнойЧасти = Неопределено Тогда
					//расчет всего документа
					СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений));
				Иначе
					//расчет по сотруднику
					СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(МассивИндексыСтрокТабличнойЧасти.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений)));
				КонецЕсли;
			КонецЕсли;
			
			РассчитатьЗаписьРегистраРасчета(СтрокаДвижений, ИсходныеДанные, УправленческиеРасчеты, РегламентированныеНачисления, РегламентированныеУдержания, ОсновныеНачисленияОрганизаций, ДополнительныеНачисленияОрганизаций, ДанныеДляПрогнозаНДФЛ, СведенияОДоначислениях, КурсВалютыУпрУчета, ПовторныйРасчет, КомментироватьРасчет, ФормаКомментариев, ГрафикиБезРабочегоВремени);
			
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				СтрокаТабличнойЧасти.Результат = СтрокаДвижений.Результат;
				
				Если (ОсновныеНачисленияОрганизаций ИЛИ ДополнительныеНачисленияОрганизаций) И СтрокаДвижений.Авторасчет Тогда
					СтрокаТабличнойЧасти.ОплаченоДнейЧасов = СтрокаДвижений.ОплаченоДнейЧасов;
				КонецЕсли;
				//vvv
				Если (ОсновныеНачисленияОрганизаций Или ДополнительныеНачисленияОрганизаций)  И СтрокаДвижений.Авторасчет И (ТипЗнч(СтрокаДвижений.Регистратор)=Тип("ДокументСсылка.НачислениеЗарплатыРаботникамОрганизаций") или ТипЗнч(СтрокаДвижений.Регистратор)=Тип("ДокументСсылка.РегистрацияРазовыхНачисленийРаботниковОрганизаций")) Тогда
					СтрокаТабличнойЧасти.СуммаРезерва = СтрокаДвижений.СуммаРезерва;
				КонецЕсли;
				Если СтрокаДвижений.ВидРасчета=ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.Годовая Тогда
					СтрокаТабличнойЧасти.База13=СтрокаДвижений.База13;
				КонецЕсли;
				//
				Если СтрокаДвижений.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
					СтрокаТабличнойЧасти.Показатель1 = СтрокаДвижений.Показатель1;
				КонецЕсли;
				
				// расчет вычетов для НДФЛ
				//vvv добавим условие на авторасчет
				//Если ДополнительныеНачисленияОрганизаций И НеобходимыеДанные.ВычетыКДоходамНДФЛ Тогда
				Если ДополнительныеНачисленияОрганизаций И НеобходимыеДанные.ВычетыКДоходамНДФЛ И СтрокаДвижений.Авторасчет Тогда
				//	
					Если СтрокаТабличнойЧасти.КодВычета = ВычетНДФЛКод405 Тогда
						СтрокаТабличнойЧасти.СуммаВычета = СтрокаДвижений.Результат * ИсходныеДанные.НормативЗатрат / 100;
					ИначеЕсли СтрокаТабличнойЧасти.КодВычета = ВычетНДФЛКод404 Тогда  // фактические расходы, их изменять не следует
					Иначе
						
						Если ИсходныеДанные.КратностьВычета = 0 тогда
							ПараметрРасчета = ИсходныеДанные.ГодовойВычет;
						Иначе
							БазовыеВеличины = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(КонецМесяца(ИсходныеДанные.Регистратор.ПериодРегистрации), 
																							Новый Структура("ВидПараметра",Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяВеличина));
							Если БазовыеВеличины <> Неопределено тогда
								Если БазовыеВеличины.Размер = 0 тогда
									ПараметрРасчета = ИсходныеДанные.ГодовойВычет;
								Иначе
									ПараметрРасчета = ИсходныеДанные.КратностьВычета*БазовыеВеличины.Размер;
								КонецЕсли;
							Иначе
								ПараметрРасчета = ИсходныеДанные.ГодовойВычет;
							КонецЕсли;
						КонецЕсли;
						СтрокаТабличнойЧасти.СуммаВычета = Макс(0, Мин(ПараметрРасчета - ИсходныеДанные.СуммаВычетаОборот, СтрокаДвижений.Результат));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// если передали таблицу (или набор записей) для заполнения движений о доходах НДФЛ
			// если код дохода указан
			// и если результат не нулевой
			// запишем движение в доходы НДФЛ
			Если ЗаписиДоходыНДФЛ <> Неопределено И 
				ИсходныеДанные.КодДоходаНДФЛ <> ПустойКодДохода И 
				СтрокаДвижений.Результат <> 0 Тогда
				// если определен код дохода с точки зрения НДФЛ - добавим строку в доходы НДФЛ
				Движение = ЗаписиДоходыНДФЛ.Добавить();
				// свойства 
				Движение.Регистратор				= СтрокаДвижений.Регистратор;
				Если ОсновныеНачисленияОрганизаций И ИсходныеДанные.КодДоходаНДФЛ = Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию Тогда
					Движение.Период					= СтрокаДвижений.ПериодДействия;
				Иначе
					Движение.Период					= СтрокаДвижений.ПериодРегистрации;
				КонецЕсли;
				
				// Измерения
				Движение.Организация				= ГоловнаяОрганизация;
				Движение.Физлицо					= СтрокаДвижений.Физлицо;
				Движение.КодДохода					= ИсходныеДанные.КодДоходаНДФЛ;
				Движение.ПериодРегистрации			= СтрокаДвижений.ПериодРегистрации;
				// Ресурсы
				Движение.СуммаДохода				= СтрокаДвижений.Результат;
				// реквизиты
				Движение.ОбособленноеПодразделение	= ОбособленноеПодразделение;
				
				// выполнен расчет вычетов для НДФЛ
				Если ДополнительныеНачисленияОрганизаций И НеобходимыеДанные.ВычетыКДоходамНДФЛ Тогда
					Движение.СуммаВычета			= СтрокаТабличнойЧасти.СуммаВычета;
					Движение.КодВычета				= СтрокаТабличнойЧасти.КодВычета;
				КонецЕсли;
			КонецЕсли;
			
			// если это данные по виду расчета, период действия которого является отработанным временем
			// или учитывается как норма времени, то для рассчитываемой записи сохраним данные о времени
			Если (ОсновныеНачисленияОрганизаций ИЛИ УправленческиеНачисления) И СтрокаДвижений.Авторасчет Тогда
				
				СпособРасчета = ИсходныеДанные.СпособРасчета;
				
				БылоСообщениеОРабочемВремени = (
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку или 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС или 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка или 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням или 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням или 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы или
					//vvv
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоИнойЧасовойТарифнойСтавке или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоИнойМесячнойТарифнойСтавке или
					//
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы); 
				
				БылоСообщениеОВидеВремени = Ложь;
				
				Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
					СтрокаДвижений.ОтработаноДней = 0;
					СтрокаДвижений.ОтработаноЧасов = 0;
					Если Не БылоСообщениеОРабочемВремени  Тогда
						СообщениеОбОшибке = Ложь;
						ОплачиваемоеВремя = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, , СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
						БылоСообщениеОРабочемВремени = СообщениеОбОшибке;
					КонецЕсли;
					Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням 
						Или СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
						СтрокаДвижений.ОтработаноДней = ИсходныеДанные.ОтработаноДней * ?(СтрокаДвижений.Сторно,-1,1);
						СтрокаДвижений.ОтработаноЧасов = ИсходныеДанные.ОтработаноЧасов * ?(СтрокаДвижений.Сторно,-1,1);
					Иначе
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + СтрокаДвижений.ВидРасчета + ": Не задан вид учета времени");
						БылоСообщениеОВидеВремени = Истина;
					КонецЕсли;
					Если ОсновныеНачисленияОрганизаций Тогда
						СтрокаДвижений.ОтработаноДнейПоПятидневке = ИсходныеДанные.ОтработаноВремениПроизводственныйГрафик * ?(СтрокаДвижений.Сторно,-1,1) ;
						СтрокаДвижений.ОтработаноЧасовПоПятидневке = ИсходныеДанные.ОтработаноЧасовПроизводственныйГрафик * ?(СтрокаДвижений.Сторно,-1,1) ;
					КонецЕсли;
				КонецЕсли;
				
				Если ОсновныеНачисленияОрганизаций И ИсходныеДанные.ЗачетНормыВремени Тогда
					СтрокаДвижений.НормаЧасов = 0;
					СтрокаДвижений.НормаДней = 0;
					СтрокаДвижений.НормаДнейПоПятидневке = 0;
					СтрокаДвижений.НормаЧасовПоПятидневке = 0;
					Если ИсходныеДанные.НормаОплачиваемыхЧасов = NULL Тогда
						Если Не БылоСообщениеОРабочемВремени Тогда
							ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
						КонецЕсли;
					ИначеЕсли ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням 
						Или ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
						Если ИсходныеДанные.ВидРасчетаЯвляетсяПочасовымОтклонением Тогда
							СтрокаДвижений.НормаЧасов = ИсходныеДанные.ОтработаноЧасов * ?(СтрокаДвижений.Сторно,-1,1);
						Иначе 	
							СтрокаДвижений.НормаЧасов = ИсходныеДанные.НормаОплачиваемыхЧасов * ?(СтрокаДвижений.Сторно,-1,1);
							СтрокаДвижений.НормаДней = ИсходныеДанные.НормаОплачиваемыхДней * ?(СтрокаДвижений.Сторно,-1,1);
							СтрокаДвижений.НормаДнейПоПятидневке = ИсходныеДанные.ПроизводственныйКалендарьПятидневкаФактическийПериодДействия * ?(СтрокаДвижений.Сторно,-1,1);
							СтрокаДвижений.НормаЧасовПоПятидневке = ИсходныеДанные.ПроизводственныйКалендарьПятидневкаЧасыФактическийПериодДействия * ?(СтрокаДвижений.Сторно,-1,1);
						КонецЕсли;
					ИначеЕсли Не БылоСообщениеОВидеВремени Тогда
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не задан вид учета времени");
					КонецЕсли;
				КонецЕсли;
				
				// Перепишем данные из регистра в табличную часть документа
				Если СтрокаТабличнойЧасти <> Неопределено тогда
					Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
						СтрокаТабличнойЧасти.ОтработаноДней = СтрокаДвижений.ОтработаноДней;
						СтрокаТабличнойЧасти.ОтработаноЧасов = СтрокаДвижений.ОтработаноЧасов;
						Если ОсновныеНачисленияОрганизаций Тогда
							СтрокаТабличнойЧасти.ОтработаноДнейПоПятидневке = СтрокаДвижений.ОтработаноДнейПоПятидневке;
							СтрокаТабличнойЧасти.ОтработаноЧасовПоПятидневке = СтрокаДвижений.ОтработаноЧасовПоПятидневке;
						КонецЕсли;
					Иначе
						СтрокаТабличнойЧасти.ОтработаноДней = 0;
						СтрокаТабличнойЧасти.ОтработаноЧасов = 0;
						Если ОсновныеНачисленияОрганизаций Тогда
							СтрокаТабличнойЧасти.ОтработаноДнейПоПятидневке = 0;
							СтрокаТабличнойЧасти.ОтработаноЧасовПоПятидневке = 0;
						КонецЕсли;
					КонецЕсли;
					
					Если ОсновныеНачисленияОрганизаций Тогда 
						Если ИсходныеДанные.ЗачетНормыВремени Тогда
							СтрокаТабличнойЧасти.НормаДней = СтрокаДвижений.НормаДней;
							СтрокаТабличнойЧасти.НормаЧасов = СтрокаДвижений.НормаЧасов;
							СтрокаТабличнойЧасти.НормаДнейПоПятидневке = СтрокаДвижений.НормаДнейПоПятидневке;
							СтрокаТабличнойЧасти.НормаЧасовПоПятидневке = СтрокаДвижений.НормаЧасовПоПятидневке;
						Иначе
							СтрокаТабличнойЧасти.НормаДней = 0;
							СтрокаТабличнойЧасти.НормаЧасов = 0;
							СтрокаТабличнойЧасти.НормаДнейПоПятидневке = 0;
							СтрокаТабличнойЧасти.НормаЧасовПоПятидневке = 0;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // РассчитатьЗаписиНабора

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  УправленческиеРасчеты - булево, признак того, что это расчет управленческий
//  РегламентированныеНачисления - булево, признак того, что это регламентированное начисление
//  ОсновныеНачисленияОрганизаций - булево, признак того, что это именно основое регламентированное начисление
//  ДанныеДляПрогнозаНДФЛ - выборка из результата запроса с данными для прогнозирования НДФЛ
//  СведенияОДоначислениях - соответствие для хранения данных о доначислениях
//  КурсВалютыУпрУчета
//  ПовторныйРасчет - признак того, что выполняется повторный расчет (поддержка 
//              способа ДоначислениеПоУправленческомуУчету)
//
// Возвращаемое значение:
//  Нет.
//
 Процедура РассчитатьЗаписьРегистраРасчета(СтрокаДвижений,
							ИсходныеДанные,
							УправленческиеРасчеты,
							РегламентированныеНачисления,
							РегламентированныеУдержания,
							ОсновныеНачисленияОрганизаций,
							ДополнительныеНачисленияОрганизаций,
							ДанныеДляПрогнозаНДФЛ,
							СведенияОДоначислениях,
							КурсВалютыУпрУчета,
							ПовторныйРасчет,
							КомментироватьРасчет, ФормаКомментариев, ГрафикиБезРабочегоВремени)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	
	РезультатПолучен = Истина;
	
	ПоказательРазмер = "Показатель1";
	
	// предварительные действия перед расчетом для поддержки 
	// способа расчета ДоначислениеПоУправленческомуУчету
	РасчетДоначисления = Ложь;
	Если РегламентированныеНачисления и СведенияОДоначислениях <> Неопределено Тогда
		Сведение = СведенияОДоначислениях.Получить(СтрокаДвижений.Сотрудник);
		Если Сведение = Неопределено Тогда
			Сведение = Новый Структура("КВыплатеПоУпрУчету,ЕстьДоначисление,ПрогнозНДФЛ,СуммарныйПроцент,УжеНачисленоДоДоначисления");
			Сведение.КВыплатеПоУпрУчету = 0;
			Сведение.СуммарныйПроцент = 0;
			Сведение.УжеНачисленоДоДоначисления = 0;
			Сведение.ЕстьДоначисление = Ложь;
			Сведение.ПрогнозНДФЛ = Новый Соответствие();
			СведенияОДоначислениях[СтрокаДвижений.Сотрудник] = Сведение;
		КонецЕсли;
		Если ОсновныеНачисленияОрганизаций 
			И ИсходныеДанные.КодДоходаНДФЛ = Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию Тогда
			ПериодДохода = НачалоМесяца(ИсходныеДанные.ПериодДействияНачало);
		Иначе
			// здесь предполагаем, что в наборе записей не может быть записей с разными периодами регистрации
			ПериодДохода = СтрокаДвижений.ПериодРегистрации;
		КонецЕсли;
		СтрокаПрогноза = Сведение.ПрогнозНДФЛ.Получить(ПериодДохода);
		Если СтрокаПрогноза = Неопределено Тогда
			СтрокаПрогноза = СоздатьСтрокуПрогнозаНДФЛ();
			Сведение.ПрогнозНДФЛ[ПериодДохода] = СтрокаПрогноза;
		КонецЕсли;
		Если ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету Тогда
			РасчетДоначисления = Истина;
			Если не ПовторныйРасчет Тогда
				Сведение.ЕстьДоначисление = Истина;
				
				Сведение.КВыплатеПоУпрУчету = ?(ИсходныеДанные.КВыплатеПоУпрУчету = Null, 0, ИсходныеДанные.КВыплатеПоУпрУчету) * КурсВалютыУпрУчета;
				Сведение.СуммарныйПроцент = ?(ИсходныеДанные.СуммарныйПроцент = Null, 0, ИсходныеДанные.СуммарныйПроцент);
				Сведение.УжеНачисленоДоДоначисления = ?(ИсходныеДанные.УжеНачисленоДоДоначисления = Null, 0, ИсходныеДанные.УжеНачисленоДоДоначисления);
				Физлицо = ИсходныеДанные.Физлицо;
				// запомним поле "резидентство"
				Для Каждого СтрокаДляЗаполнения Из Сведение.ПрогнозНДФЛ Цикл
					СтрокаДляЗаполнения.Значение.Резидент = ИсходныеДанные.Резидент;
				КонецЦикла;
				Если ПозиционироватьДанныеПрогнозаНДФЛ(ДанныеДляПрогнозаНДФЛ, Физлицо) Тогда
					Пока Истина Цикл
						СтрокаДляЗаполнения = Сведение.ПрогнозНДФЛ.Получить(ДанныеДляПрогнозаНДФЛ.Период);
						Если СтрокаДляЗаполнения = Неопределено Тогда
							СтрокаДляЗаполнения = СоздатьСтрокуПрогнозаНДФЛ();
							Сведение.ПрогнозНДФЛ[ДанныеДляПрогнозаНДФЛ.Период] = СтрокаДляЗаполнения;
						КонецЕсли;
						// запоним остальные поля
						ЗаполнитьСтрокуПрогнозаНДФЛ(СтрокаДляЗаполнения, ДанныеДляПрогнозаНДФЛ);
						Если не ДанныеДляПрогнозаНДФЛ.Следующий() Тогда
							Прервать;
							
						КонецЕсли;
						Если ДанныеДляПрогнозаНДФЛ.Физлицо <> Физлицо Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// расчет будем проводить только для авторассчитываемой записи
	Если СтрокаДвижений.Авторасчет Тогда
		
		//ДатаЗакона255ФЗ = ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006();
		
		// этот Если... нужно расширять при появлении новых способов расчета или видов расчета,
		// которые не укладываются в тот или иной способ
		
		Если КомментироватьРасчет Тогда
			КомментарийВидаРасчета = ОбщегоНазначения.КомментарийРасчета("Расчет ", , ИсходныеДанные.ВидРасчетаНаименование, СтрокаДвижений.ВидРасчета);
			ОбщегоНазначения.КомментарийРасчета("Способ расчета: " + ИсходныеДанные.СпособРасчета, КомментарийВидаРасчета);
			ОбщегоНазначения.КомментарийРасчета("Порядок расчета: " + ВизуализироватьФормулуРасчета(ИсходныеДанные.ВидРасчета), КомментарийВидаРасчета);
		КонецЕсли;
		
		// Процентом и от стажа процентом
		//	
		Если ПолучитьСписокНачисленийПроцентом().Найти(СпособРасчета) <> НеОпределено Тогда
			
			// Размер - процент доплаты
			Если ИсходныеДанные.РезультатБаза = NULL Тогда
				Если ВидРасчета <> ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.РайонныйКоэффициент И СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка Тогда // оставляем поведение ред.2.1
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
				КонецЕсли;
			Иначе
				Если КомментироватьРасчет Тогда
					КомментарийБазы = ОбщегоНазначения.КомментарийРасчета("Базовые начисления составили всего: " + ИсходныеДанные.РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
					РасшифровкаБазы = ИсходныеДанные.Выбрать();
					Если Не РегламентированныеУдержания Тогда
						Пока РасшифровкаБазы.Следующий() Цикл
							Если РасшифровкаБазы.РезультатБаза <> 0 Тогда
								ОбщегоНазначения.КомментарийРасчета(РасшифровкаБазы.ВидРасчетаРазрезНаименование + ": " + РасшифровкаБазы.РезультатБаза, КомментарийБазы);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				Если РегламентированныеУдержания Тогда
					УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
					Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Макс(ИсходныеДанные.РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100 - УжеНачисленоВТекущемПериоде,0),Константы.ВалютаРегламентированногоУчета.Получить());
					Если КомментироватьРасчет Тогда
						ОбщегоНазначения.КомментарийРасчета("Процент: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
						ОбщегоНазначения.КомментарийРасчета("Ранее начислено в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
					КонецЕсли;
				Иначе
					//vvv добавляем если
					Если СпособРасчета=Перечисления.СпособыРасчетаОплатыТруда.Индексация ТОгда
						Результат = ОбщегоНазначения.ОкруглитьПоВалюте(?(ИсходныеДанные.РезультатБаза>ИсходныеДанные.РазмерБПМ,ИсходныеДанные.РазмерБПМ * СтрокаДвижений[ПоказательРазмер]/100,ИсходныеДанные.РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100),Константы.ВалютаРегламентированногоУчета.Получить());
					ИначеЕсли СпособРасчета=Перечисления.СпособыРасчетаОплатыТруда.ПроцентомСоСнижением Тогда	
						Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ИсходныеДанные.РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100*((100-СтрокаДвижений["Показатель2"])/100),Константы.ВалютаРегламентированногоУчета.Получить());
					ИначеЕсли (СпособРасчета=Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом) и (ТипЗнч(СтрокаДвижений.ВидРасчета)=Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций")) ТОгда					
						Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ОбщегоНазначения.ОкруглитьПоВалюте(ИсходныеДанные.РезультатБаза*СтрокаДвижений[ПоказательРазмер]/100,Константы.ВалютаРегламентированногоУчета.Получить())*СтрокаДвижений.КоэффициентРаспределения,Константы.ВалютаРегламентированногоУчета.Получить()) ;						
						Если СтрокаДвижений.ВидРасчета=ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.Годовая ТОгда
							БазаРасчета=ИсходныеДанные.РезультатБаза;
							Если ТипЗнч(СтрокаДвижений.Регистратор)=Тип("ДокументСсылка.ПремииРаботниковОрганизаций") Тогда
								Если СтрокаДвижений.Регистратор.РедактироватьБазуРасчета Тогда
									БазаРасчета=СтрокаДвижений.База13;	
								КонецЕсли;
							КонецЕсли;
							Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ОбщегоНазначения.ОкруглитьПоВалюте(БазаРасчета*СтрокаДвижений[ПоказательРазмер]/100,Константы.ВалютаРегламентированногоУчета.Получить())*СтрокаДвижений.КоэффициентРаспределения,Константы.ВалютаРегламентированногоУчета.Получить()) ;						
							СтрокаДвижений.База13=БазаРасчета;
						КонецЕсли;	
					ИначеЕсли (СпособРасчета=Перечисления.СпособыРасчетаОплатыТруда.ПроцентомСКТУ) и (ТипЗнч(СтрокаДвижений.ВидРасчета)=Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций")) ТОгда
						Результат = ИсходныеДанные.РезультатБаза;     //будем дальше рассчитывать в документе
					Иначе
					//	
						Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ИсходныеДанные.РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100,Константы.ВалютаРегламентированногоУчета.Получить());
					КонецЕсли;					
					//vvv
					//Если Не ИсходныеДанные.ВидРасчетаПериодДействияБазовый Тогда
					Если (Не ИсходныеДанные.ВидРасчетаПериодДействияБазовый) и (Не ИсходныеДанные.НеУчитыватьНормуТекущегоМесяца)  Тогда
						НормаВремени = ИсходныеДанные.НормаВремениЗаМесяц;
						СообщениеОбОшибке = Ложь;
						ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
						Если НЕ СообщениеОбОшибке И НормаВремени = 0 Тогда
							ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
						КонецЕсли;
						Если НормаВремени = 0 Тогда
							Результат = 0;
						Иначе
							Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Результат * ОтработаноВремениОсновное / НормаВремени,Константы.ВалютаРегламентированногоУчета.Получить());
						КонецЕсли;
						СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
					КонецЕсли;
					Если КомментироватьРасчет Тогда
						ОбщегоНазначения.КомментарийРасчета("Процент оплаты: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
						Если Не ИсходныеДанные.ВидРасчетаПериодДействияБазовый Тогда
							ОбщегоНазначения.КомментарийРасчета("Отработанное время: " + ИсходныеДанные.ОтработаноВремени, КомментарийВидаРасчета);
							ОбщегоНазначения.КомментарийРасчета("Норма времени: " + ИсходныеДанные.НормаВремениЗаМесяц, КомментарийВидаРасчета);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// ИсполнительныйЛистПроцентом
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Тогда
			
			// Размер - процент удержания
			Если ИсходныеДанные.РезультатБаза = NULL Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления");
				
			Иначе
				ИсчисленныйНалог 			= ?(ИсходныеДанные.ИсчисленныйНалог = Null, 0, ИсходныеДанные.ИсчисленныйНалог);
				УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
				
				Результат = ОкруглениеИспонительныхЛистов(Макс(((ИсходныеДанные.РезультатБаза - ИсчисленныйНалог) * СтрокаДвижений[ПоказательРазмер]/100) - УжеНачисленоВТекущемПериоде, 0));
				//vvv
				//Результат = ОкруглениеИспонительныхЛистов(Макс(((ИсходныеДанные.РезультатБаза - ИсчисленныйНалог) / День(КонецМесяца(СтрокаДвижений.БазовыйПериодКонец)) * СервисныеПроцедурыИФункции.КоличествоДнейВПериоде(СтрокаДвижений.БазовыйПериодНачало,СтрокаДвижений.БазовыйПериодКонец) * СтрокаДвижений[ПоказательРазмер]/100) - УжеНачисленоВТекущемПериоде, 0));
				Результат = ОкруглениеИспонительныхЛистов(Макс(((ИсходныеДанные.РезультатБаза - ИсчисленныйНалог) / День(КонецМесяца(СтрокаДвижений.ДатаОкончанияИсп)) * СервисныеПроцедурыИФункции.КоличествоДнейВПериоде(СтрокаДвижений.ДатаНачалаИсп,СтрокаДвижений.ДатаОкончанияИсп) * СтрокаДвижений[ПоказательРазмер]/100) - УжеНачисленоВТекущемПериоде, 0));
				Если СтрокаДвижений["Показатель2"]<>0 Тогда
					МинимальныйРазмер = ОкруглениеИспонительныхЛистов(ИсходныеДанные.РазмерБПМ * СтрокаДвижений["Показатель2"]/100);
					Результат = ?(Результат<МинимальныйРазмер,МинимальныйРазмер,Результат);
				КонецЕсли;
				//
				
				Если КомментироватьРасчет Тогда
					КомментарийБазы = ОбщегоНазначения.КомментарийРасчета("Базовые начисления составили всего: " + ИсходныеДанные.РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
					ОбщегоНазначения.КомментарийРасчета("Подоходный налог за текущий период: " + ИсчисленныйНалог, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Ранее начислено в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистВПрожиточныхМинимумах Тогда
	
			УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
			Результат = ОкруглениеИспонительныхЛистов(Макс(СтрокаДвижений.Показатель1 * ИсходныеДанные.ВеличинаПрожиточногоМинимума / 100 - УжеНачисленоВТекущемПериоде, 0));
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Доля прож.минимума (%): " + СтрокаДвижений.Показатель1, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Величина прожиточного минимума: " + ИсходныеДанные.ВеличинаПрожиточногоМинимума, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Ранее зарегистрировано в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
			КонецЕсли;
		
	
	
		//ИсполнительныйЛистПроцентомСНДФЛ	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомСНДФЛ Тогда
			
			// Размер - процент удержания
			Если ИсходныеДанные.РезультатБаза = NULL Тогда
				Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Не определены базовые начисления ", СтатусСообщения.Важное);
			Иначе
				
				УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
				
				Результат = ОкруглениеИспонительныхЛистов(Макс((ИсходныеДанные.РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100) - УжеНачисленоВТекущемПериоде, 0));
				Если КомментироватьРасчет Тогда
					КомментарийБазы = ОбщегоНазначения.КомментарийРасчета("Базовые начисления составили всего: " + ИсходныеДанные.РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
					ОбщегоНазначения.КомментарийРасчета("Ранее начислено в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
        			
			// ИсполнительныйЛистПроцентомДоПредела
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда
			
			// Размер - процент удержания
			Если ИсходныеДанные.РезультатБаза = NULL Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
			Иначе
				
				ИсчисленныйНалог 			= ?(ИсходныеДанные.ИсчисленныйНалог = Null, 0, ИсходныеДанные.ИсчисленныйНалог);
				УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
				ПределПоДокументуОснованию  = ?(ИсходныеДанные.ПределПоДокументуОснованию = Null, 0 ,ИсходныеДанные.ПределПоДокументуОснованию);
				УжеНачисленоЗаВсюИсторию 	= ?(ИсходныеДанные.УжеНачисленоЗаВсюИсторию = Null, 0, ИсходныеДанные.УжеНачисленоЗаВсюИсторию);
				
				Результат = ОкруглениеИспонительныхЛистов(Макс(((ИсходныеДанные.РезультатБаза - ИсчисленныйНалог) * СтрокаДвижений[ПоказательРазмер]/100) - УжеНачисленоВТекущемПериоде, 0));
				// Ограничим результат расчета в случае достижения предела удержания
				Результат = ОкруглениеИспонительныхЛистов(Мин(Результат, ПределПоДокументуОснованию  - УжеНачисленоЗаВсюИсторию));
				
				Если КомментироватьРасчет Тогда
					КомментарийБазы = ОбщегоНазначения.КомментарийРасчета("Базовые начисления составили всего: " + ИсходныеДанные.РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
					ОбщегоНазначения.КомментарийРасчета("Подоходный налог за текущий период: " + ИсчисленныйНалог, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Ранее начислено в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Предел по документу основанию: " + ПределПоДокументуОснованию, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Ранее начислено за всю историю: " + УжеНачисленоЗаВсюИсторию, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
		// ИсполнительныйЛистПроцентомДоПределаСНДФЛ
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПределаСНДФЛ Тогда
			
			// Размер - процент удержания
			Если ИсходныеДанные.РезультатБаза = NULL Тогда
				Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Не определены базовые начисления ", СтатусСообщения.Важное);
			Иначе
				
				УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
				ПределПоДокументуОснованию  = ?(ИсходныеДанные.ПределПоДокументуОснованию = Null, 0 ,ИсходныеДанные.ПределПоДокументуОснованию);
				УжеНачисленоЗаВсюИсторию 	= ?(ИсходныеДанные.УжеНачисленоЗаВсюИсторию = Null, 0, ИсходныеДанные.УжеНачисленоЗаВсюИсторию);
				
				Результат = Макс((ИсходныеДанные.РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100) - УжеНачисленоВТекущемПериоде, 0);
				// Ограничим результат расчета в случае достижения предела удержания
				Результат = ОкруглениеИспонительныхЛистов(Мин(Результат, ПределПоДокументуОснованию  - УжеНачисленоЗаВсюИсторию));
				
				Если КомментироватьРасчет Тогда
					КомментарийБазы = ОбщегоНазначения.КомментарийРасчета("Базовые начисления составили всего: " + ИсходныеДанные.РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
					ОбщегоНазначения.КомментарийРасчета("Подоходный налог за текущий период: " + ИсчисленныйНалог, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Ранее начислено в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Предел по документу основанию: " + ПределПоДокументуОснованию, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Ранее начислено за всю историю: " + УжеНачисленоЗаВсюИсторию, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
		//		
			// ИсполнительныйЛистФиксСуммойДоПредела
			//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
			
			ПределПоДокументуОснованию  = ?(ИсходныеДанные.ПределПоДокументуОснованию = Null, 0 ,ИсходныеДанные.ПределПоДокументуОснованию);
			УжеНачисленоЗаВсюИсторию 	= ?(ИсходныеДанные.УжеНачисленоЗаВсюИсторию = Null, 0, ИсходныеДанные.УжеНачисленоЗаВсюИсторию);
			
			// Ограничим результат расчета в случае достижения предела удержания
			Результат = ОкруглениеИспонительныхЛистов(Мин(СтрокаДвижений[ПоказательРазмер], ПределПоДокументуОснованию  - УжеНачисленоЗаВсюИсторию));
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Предел по документу основанию: " + ПределПоДокументуОснованию, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Ранее начислено за всю историю: " + УжеНачисленоЗаВсюИсторию, КомментарийВидаРасчета);
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
			ПроцентПочтовогоСбора = ИсходныеДанные.Процент;
			Результат = ИсходныеДанные.РазмерПочтовогоПеревода;
			//vvv комментируем
			//Результат =  Окр(Результат, 0,1);
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Результат,Константы.ВалютаРегламентированногоУчета.Получить());
			//
			СтрокаДвижений[ПоказательРазмер] = ПроцентПочтовогоСбора;
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Сумма алиментов: " + ИсходныеДанные.СуммаАлиментов, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Процент почтового сбора: " + ПроцентПочтовогоСбора, КомментарийВидаРасчета);
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.КомиссионыйСбор Тогда
			
			ПроцентПочтовогоСбора =  СтрокаДвижений[ПоказательРазмер];
			Результат = ПроцентПочтовогоСбора / 100 * ОбщегоНазначения.ЦелМаксимальное(ИсходныеДанные.РазмерПочтовогоПеревода);
			//vvv комментируем
			//Результат = Окр(Результат, 0,1);
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Результат,Константы.ВалютаРегламентированногоУчета.Получить());
			//
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Сумма алиментов: " + ИсходныеДанные.СуммаАлиментов, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Процент комиссионного сбора: " + ПроцентПочтовогоСбора, КомментарийВидаРасчета);
			КонецЕсли;

			
			// УдержаниеФиксированнойСуммой
			//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой Тогда
			
			УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
			// Размер - сумма удержания 
			// за месяц должно удержаться ровно столько, сколько указано в документе
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаДвижений[ПоказательРазмер] - УжеНачисленоВТекущемПериоде,Константы.ВалютаРегламентированногоУчета.Получить());
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Размер удержания: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Ранее начислено в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
			КонецЕсли;
			
			// ФиксированнойСуммой
			// ПоДоговоруФиксированнойСуммой
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
			// Размер - сумма доплаты
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаДвижений[ПоказательРазмер],Константы.ВалютаРегламентированногоУчета.Получить());
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Размер начисления: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
			КонецЕсли;
			
			// НулеваяСумма
			//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Тогда
			// Ничего не считаем 
			
			// ПоМесячнойТарифнойСтавкеПоДням
			// ПоМесячнойТарифнойСтавкеПоЧасам
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам Тогда
			
			НормаВремени = ИсходныеДанные.НормаВремениЗаМесяц;
			СообщениеОбОшибке = Ложь;
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
			Если НЕ СообщениеОбОшибке И НормаВремени = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			КонецЕсли;
			Если НормаВремени <> 0 Тогда
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное / НормаВремени,Константы.ВалютаРегламентированногоУчета.Получить());
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Должностной оклад/Тарифная ставка: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Норма времени: " + НормаВремени, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоРазряда тогда
			СообщениеОбОшибке = Ложь;
			//vvv закомментируем
			//Если  ИсходныеДанные.ЧасовВоВредных = 0 Тогда
			//   	ОплачиватьЧасов =  ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
			//Иначе
				ОплачиватьЧасов =  ИсходныеДанные.ЧасовВоВредных;
			//КонецЕсли;
			
			//vvv округляем часы при необходимости
			Если РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Получить(Новый Структура("Организация", СтрокаДвижений.Организация)).ОкруглятьЧасыВоВредныхУсловияхТруда ТОгда
				ОплачиватьЧасов=Окр(ОплачиватьЧасов);
			КонецЕсли;
			//

			Если ИсходныеДанные.РазмерСтавкиПервогоРазряда = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не задан размер ставки первого разраяда: " + ИсходныеДанные.ВидСтавки);
			ИначеЕсли ОплачиватьЧасов = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде с "+Строка(Формат(ИсходныеДанные.ПериодДействияНачало,"ДФ=dd.MM.yyyy"))+" по "+Строка(Формат(ИсходныеДанные.ПериодДействияКонец,"ДФ=dd.MM.yyyy"))+", вредность - "+Строка(СтрокаДвижений[ПоказательРазмер])+"%");
	       	Иначе
				РазмерСтавкиПервогоРазряда = ИсходныеДанные.РазмерСтавкиПервогоРазряда;
			
				Результат = Окр(РазмерСтавкиПервогоРазряда* СтрокаДвижений[ПоказательРазмер]/100 * ОплачиватьЧасов,2);
		        СтрокаДвижений.ОплаченоДнейЧасов = ОплачиватьЧасов * ?(СтрокаДвижений.Сторно,-1,1);

			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоСотрудника тогда
			СообщениеОбОшибке = Ложь;
          
			Если  ИсходныеДанные.ЧасовВоВредных = 0 Тогда
               	ОплачиватьЧасов =  ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
			Иначе
				ОплачиватьЧасов =  ИсходныеДанные.ЧасовВоВредных
			КонецЕсли;

			Если ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудника = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не задан размер ставки первого разраяда: " + ИсходныеДанные.ВидСтавки);
			ИначеЕсли ОплачиватьЧасов = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");

			Иначе
				РазмерСтавкиПервогоРазрядаСотрудника = ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудника;
				
				Результат = Окр(РазмерСтавкиПервогоРазрядаСотрудника* СтрокаДвижений[ПоказательРазмер]/100 * ОплачиватьЧасов,2);
		         СтрокаДвижений.ОплаченоДнейЧасов = ОплачиватьЧасов * ?(СтрокаДвижений.Сторно,-1,1);

			КонецЕсли;
	
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоРазмераМинимальнойЗарплаты тогда
			СообщениеОбОшибке = Ложь;
          	ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
			Если ИсходныеДанные.РазмерЧасоваяМинимальнаяЗарплата = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не задан размер часовой минимальной зарплаты");
            ИначеЕсли  ИсходныеДанные.РезультатБаза = NULL Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
			ИначеЕсли СообщениеОбОшибке Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			Иначе
				ЧасоваяМинимальнаяЗарплата = ИсходныеДанные.РазмерЧасоваяМинимальнаяЗарплата;				
				СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
				База =  ИсходныеДанные.РезультатБаза;
				Результат = ЧасоваяМинимальнаяЗарплата * ОтработаноВремениОсновное -  База;
				Результат = ?(Результат > 0 ,Результат,0);
				
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Часовая минимальная зарплата: " + ИсходныеДанные.РазмерЧасоваяМинимальнаяЗарплата, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Начисленно в месяце: " + База, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоРазмераМЗПотМесячнойМЗП тогда
			
						
			СообщениеОбОшибке = Ложь;
			НормаВремени = ИсходныеДанные.НормаВремениЗаМесяц;
          	ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
			Если ИсходныеДанные.РазмерМесячнаяМинимальнаяЗарплата = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не задан размер часовой минимальной зарплаты");
            ИначеЕсли  ИсходныеДанные.РезультатБаза = NULL Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
			ИначеЕсли СообщениеОбОшибке Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
		   	ИначеЕсли НормаВремени = 0 Тогда
           		ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			Иначе
				МесячнаяМинимальнаяЗарплата = ИсходныеДанные.РазмерМесячнаяМинимальнаяЗарплата;
				СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
				База =  ИсходныеДанные.РезультатБаза;
				Результат = МесячнаяМинимальнаяЗарплата/НормаВремени * ОтработаноВремениОсновное -  База;
				Результат = ?(Результат > 0 ,Результат,0);
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Минимальная зарплата: " + ИсходныеДанные.РазмерМесячнаяМинимальнаяЗарплата, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Начисленно в месяце: " + База, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Норма времени за месяц: " + НормаВремени, КомментарийВидаРасчета);

				КонецЕсли;
				
			КонецЕсли;

	   ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксСуммойПропорционльноОтработанномуВремени  тогда
			НормаВремени = ИсходныеДанные.НормаВремениЗаМесяц;
			СообщениеОбОшибке = Ложь;
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
			Если НЕ СообщениеОбОшибке И НормаВремени = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			КонецЕсли;
			Если НормаВремени <> 0 Тогда
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаДвижений.Показатель1 * ОтработаноВремениОсновное / НормаВремени,Константы.ВалютаРегламентированногоУчета.Получить());
				Результат = ?(Результат < 0,0,Результат);
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Размер начисления: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Норма времени: " + НормаВремени, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);

			
			
	   ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаЗаместительство тогда
			НормаВремени = ИсходныеДанные.НормаВремениЗаМесяц;
			СообщениеОбОшибке = Ложь;
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
			Если НЕ СообщениеОбОшибке И НормаВремени = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			КонецЕсли;
			Если НормаВремени <> 0 Тогда
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте((СтрокаДвижений.Показатель2 - СтрокаДвижений.Показатель1) * ОтработаноВремениОсновное / НормаВремени,Константы.ВалютаРегламентированногоУчета.Получить());
				Результат = ?(Результат < 0,0,Результат);
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Размер начисления: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Норма времени: " + НормаВремени, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаСовмещениеПоОкладу тогда
			НормаВремениЗаМесяц = ИсходныеДанные.НормаВремениЗаМесяц;
			НормаВремени = ИсходныеДанные.НормаОплачиваемыхЧасов;
       		СообщениеОбОшибке = Ложь;
			Если НЕ СообщениеОбОшибке И НормаВремени = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			КонецЕсли;
			Если НормаВремени <> 0 Тогда
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаДвижений.Показатель2 / НормаВремениЗаМесяц * НормаВремени * СтрокаДвижений.Показатель1/100 ,Константы.ВалютаРегламентированногоУчета.Получить());
				Результат = ?(Результат < 0,0,Результат);
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Размер начисления: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Норма времени за месяц: " + НормаВремениЗаМесяц, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Норма времени: " + НормаВремени, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = НормаВремени * ?(СтрокаДвижений.Сторно,-1,1);
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаСовмещениеПоТарифу тогда
			НормаВремени = ИсходныеДанные.НормаОплачиваемыхЧасов;
       		СообщениеОбОшибке = Ложь;
			Если НЕ СообщениеОбОшибке И НормаВремени = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			КонецЕсли;
			Если НормаВремени <> 0 Тогда
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаДвижений.Показатель2 * НормаВремени * СтрокаДвижений.Показатель1/100 ,Константы.ВалютаРегламентированногоУчета.Получить());
				Результат = ?(Результат < 0,0,Результат);
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Размер начисления: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Норма времени: " + НормаВремени, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = НормаВремени * ?(СтрокаДвижений.Сторно,-1,1);
			// ПоЧасовойТарифнойСтавке
			// ПоДневнойТарифнойСтавке
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
			
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, , ГрафикиБезРабочегоВремени);
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное,Константы.ВалютаРегламентированногоУчета.Получить());
			//vvv
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке Тогда
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаДвижений[ПоказательРазмер] / 100* СтрокаДвижений["Показатель2"]* ОтработаноВремениОсновное,Константы.ВалютаРегламентированногоУчета.Получить());	
			КонецЕсли;
			//
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Должностной оклад/Тарифная ставка: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Отработанное время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
			КонецЕсли;
			
				
				СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
		//vvv
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке Тогда
			
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, , ГрафикиБезРабочегоВремени);
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаДвижений["Показатель1"] * СтрокаДвижений["Показатель2"] * ОтработаноВремениОсновное / 100,Константы.ВалютаРегламентированногоУчета.Получить());
			//vvv
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке Тогда
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаДвижений[ПоказательРазмер] / 100* СтрокаДвижений["Показатель2"]* ОтработаноВремениОсновное,Константы.ВалютаРегламентированногоУчета.Получить());	
			КонецЕсли;
			//
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Должностной оклад/Тарифная ставка: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Отработанное время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
			КонецЕсли;
			
				
				СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
		//vvv
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоИнойЧасовойТарифнойСтавке Тогда
			
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, , ГрафикиБезРабочегоВремени);
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаДвижений["Показатель1"] * СтрокаДвижений["Показатель2"] * ОтработаноВремениОсновное / 100,Константы.ВалютаРегламентированногоУчета.Получить());
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Должностной оклад/Тарифная ставка: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Отработанное время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
			КонецЕсли;
			
				
				СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
		//vvv
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоИнойМесячнойТарифнойСтавке Тогда
			
			НормаВремени = ИсходныеДанные.НормаВремениЗаМесяц;
			СообщениеОбОшибке = Ложь;
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
			Если НЕ СообщениеОбОшибке И НормаВремени = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			КонецЕсли;
			Если НормаВремени <> 0 Тогда
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаДвижений["Показатель1"] * СтрокаДвижений["Показатель2"] * ОтработаноВремениОсновное / НормаВремени /100,Константы.ВалютаРегламентированногоУчета.Получить());
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Должностной оклад/Тарифная ставка: " + СтрокаДвижений["Показатель1"], КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Норма времени: " + НормаВремени, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
		//vvv
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоВычисляемойЧасовойТарифнойСтавке Тогда
			
			ОтработаноПоБазе = ИсходныеДанные.ОплаченоДнейЧасовБаза;
			РезультатБаза = ИсходныеДанные.РезультатБаза;
			СообщениеОбОшибке = Ложь;
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
			Если НЕ СообщениеОбОшибке И ОтработаноПоБазе = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в базе начисления");
			КонецЕсли;
			Если ОтработаноПоБазе <> 0 Тогда
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаДвижений["Показатель1"] * РезультатБаза * ОтработаноВремениОсновное / ОтработаноПоБазе /100,Константы.ВалютаРегламентированногоУчета.Получить());
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Результат базы " + РезультатБаза, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Отработано в базе " + ОтработаноПоБазе, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);	
				
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке Тогда
			Если ИсходныеДанные.РазмерСдельногоЗаработка = NULL Тогда
				Если ИсходныеДанные.ОшибкаВводаФактическойВыработки Тогда
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об фактической выработке введены сводно. Расчет суммы по данному виду расчета невозможен");
				Иначе
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных о фактической выработке ");
				КонецЕсли;
            Иначе
				ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, , ГрафикиБезРабочегоВремени);
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное,Константы.ВалютаРегламентированногоУчета.Получить());
				
				Если Результат > ИсходныеДанные.РазмерСдельногоЗаработка тогда
					Результат = ИсходныеДанные.РазмерСдельногоЗаработка;
					Если КомментироватьРасчет Тогда
						ОбщегоНазначения.КомментарийРасчета("Сдельный заработок: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
						ОбщегоНазначения.КомментарийРасчета("Отработанное время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
					КонецЕсли;
				Иначе
					Если КомментироватьРасчет Тогда
						ОбщегоНазначения.КомментарийРасчета("Должностной оклад/Тарифная ставка: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
						ОбщегоНазначения.КомментарийРасчета("Отработанное время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
					КонецЕсли;
				КонецЕсли;
				СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
		    КонецЕсли;		
			// ВыходноеПособие
		ИначеЕсли ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие Тогда 
			
			Если НЕ СтрокаДвижений.Сторно Тогда 
				Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
					Если Не ЗначениеЗаполнено(ИсходныеДанные.РазмерСреднегоЗаработка) тогда 
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет введен размер среднего заработка");
						СтрокаДвижений.Результат = 0;
						Возврат;
					КонецЕсли;
				Иначе
					Если ИсходныеДанные.СреднийЗаработок = NULL 
						ИЛИ (СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и ИсходныеДанные.ОтработаноЧасовПоСреднему = 0)
						ИЛИ (СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и ИсходныеДанные.ОтработаноДнейПоСреднему = 0) Тогда
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
						СтрокаДвижений.Результат = 0;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ПроцентОплаты = 100;
			ОплачиваемоеВремя = СтрокаДвижений[ПоказательРазмер];
						
			// Рассчитаем заработок за день (или за час для суммированного учета времени)
			Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
				ЗаработокЗаЕдиницуВремени = ИсходныеДанные.РазмерСреднегоЗаработка;
			Иначе
				ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ЧислоМесяцев,2);
			КонецЕсли;
				
			
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты/100,Константы.ВалютаРегламентированногоУчета.Получить());
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Оплачиваемые дни: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета(?(СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам,"Среднечасовой заработок: ","Среднедневной заработок: ") + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
		//СохраняемыйЗаработокНаВремяТрудоустройства	
		ИначеЕсли ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.СохраняемыйЗаработокНаВремяТрудоустройства Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда 
				Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
					Если Не ЗначениеЗаполнено(ИсходныеДанные.РазмерСреднегоЗаработка) тогда 
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет введен размер среднего заработка");
						СтрокаДвижений.Результат = 0;
						Возврат;
					КонецЕсли;
				Иначе
					Если ИсходныеДанные.СреднийЗаработок = NULL 
						ИЛИ (СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и ИсходныеДанные.ОтработаноЧасовПоСреднему = 0)
						ИЛИ (СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и ИсходныеДанные.ОтработаноДнейПоСреднему = 0) Тогда
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
						СтрокаДвижений.Результат = 0;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ПроцентОплаты = 100;
			ОплачиваемоеВремя = СтрокаДвижений[ПоказательРазмер];
						
			// Рассчитаем заработок за день (или за час для суммированного учета времени)
			Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
				ЗаработокЗаЕдиницуВремени = ИсходныеДанные.РазмерСреднегоЗаработка;
			Иначе
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноЧасовПоСреднему,2);
				Иначе
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноДнейПоСреднему,2);
				КонецЕсли;
			КонецЕсли;
						
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты/100,Константы.ВалютаРегламентированногоУчета.Получить());
								 
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Оплачиваемые дни: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета(?(СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам,"Среднечасовой заработок: ","Среднедневной заработок: ") + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			
			// ОплатаПоСреднему
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда 
				Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
					Если Не ЗначениеЗаполнено(ИсходныеДанные.РазмерСреднегоЗаработка) тогда 
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет введен размер среднего заработка");
						СтрокаДвижений.Результат = 0;
						Возврат;
					КонецЕсли;
                Иначе
					Если ИсходныеДанные.СреднийЗаработок = NULL 
						ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и ИсходныеДанные.ОтработаноЧасовПоСреднему = 0
						ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и ИсходныеДанные.ОтработаноДнейПоСреднему = 0 Тогда
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
						СтрокаДвижений.Результат = 0;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ПроцентОплаты = ?(СтрокаДвижений[ПоказательРазмер] = 0, 100, СтрокаДвижений[ПоказательРазмер]);
			ОплачиваемоеВремя = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, , ГрафикиБезРабочегоВремени);
			
			// Рассчитаем заработок за день (или за час для суммированного учета времени)
			// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
			Если НЕ СтрокаДвижений.Сторно Тогда
				
				Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
					ЗаработокЗаЕдиницуВремени = ИсходныеДанные.РазмерСреднегоЗаработка;
					//vvv
					заработокЗаЕдиницуВремениФМП=0;
					//
				Иначе
		 			Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
						ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноЧасовПоСреднему,2);
						//vvv
						заработокЗаЕдиницуВремениФМП = ИсходныеДанные.СуммаГодовойПремии / ИсходныеДанные.ОтработаноЧасовПоСреднему;
					Иначе					
						ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноДнейПоСреднему,2);
						//vvv
						заработокЗаЕдиницуВремениФМП = ИсходныеДанные.СуммаГодовойПремии / ИсходныеДанные.ОтработаноДнейПоСреднему;
					КонецЕсли;
				КонецЕсли;	

				
				// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
				СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
				
			Иначе
				ЗаработокЗаЕдиницуВремени = СтрокаДвижений.ДополнительныеДанные;
			КонецЕсли;
			
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты/100,Константы.ВалютаРегламентированногоУчета.Получить());			
			//vvv
			РезультатФМП=ОбщегоНазначения.ОкруглитьПоВалюте(ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремениФМП * ПроцентОплаты/100,Константы.ВалютаРегламентированногоУчета.Получить());			
			//
			Если ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия <> 0  ИЛИ ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудника <> 0 Тогда
				КоэффициентИндексации = ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудника/ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия;
			Иначе
				КоэффициентИндексации = 1;	
			КонецЕсли;
			 
			СтрокаДвижений.КоэффициентИндексации = КоэффициентИндексации;
			
			//vvv комментируем, вставляем условие на фмп
			//Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Результат*КоэффициентИндексации,Константы.ВалютаРегламентированногоУчета.Получить());
			//vvv
			Если ЗначениеЗаполнено(ИсходныеДанные.ВидРасчета.ОтпускИзФМП) Тогда
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Результат*КоэффициентИндексации-РезультатФМП*КоэффициентИндексации,Константы.ВалютаРегламентированногоУчета.Получить());
			Иначе			
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Результат*КоэффициентИндексации,Константы.ВалютаРегламентированногоУчета.Получить());
			КонецЕсли;			
			//
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Процент оплаты: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета(?(СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам,"Среднечасовой заработок: ","Среднедневной заработок: ") + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			
			// ДоплатаДоСреднегоЗаработка
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда 
				Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
					Если Не ЗначениеЗаполнено(ИсходныеДанные.РазмерСреднегоЗаработка) тогда 
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет введен размер среднего заработка");
						СтрокаДвижений.Результат = 0;
						Возврат;
					КонецЕсли;
                Иначе
					Если ИсходныеДанные.СреднийЗаработок = NULL 
						ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и ИсходныеДанные.ОтработаноЧасовПоСреднему = 0
						ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и ИсходныеДанные.ОтработаноДнейПоСреднему = 0 Тогда
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
						СтрокаДвижений.Результат = 0;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			
			ПроцентОплаты = ?(СтрокаДвижений[ПоказательРазмер] = 0, 100, СтрокаДвижений[ПоказательРазмер]);
			ОплачиваемоеВремя = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, , ГрафикиБезРабочегоВремени);
			
			// Рассчитаем заработок за день (или за час для суммированного учета времени)
			// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
			Если НЕ СтрокаДвижений.Сторно Тогда
				
				Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
					ЗаработокЗаЕдиницуВремени = ИсходныеДанные.РазмерСреднегоЗаработка;
				Иначе
		 			Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
						ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноЧасовПоСреднему,2);
					Иначе
						ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноДнейПоСреднему,2);
					КонецЕсли;
				КонецЕсли;
				
				// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
				СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
				
			Иначе
				ЗаработокЗаЕдиницуВремени = СтрокаДвижений.ДополнительныеДанные;
			КонецЕсли;
			
			Если ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия <> 0  ИЛИ ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудника <> 0 Тогда
				КоэффициентИндексации = ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудника/ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия;
			Иначе
				КоэффициентИндексации = 1;	
			КонецЕсли;
			 
			СтрокаДвижений.КоэффициентИндексации = КоэффициентИндексации;
			СреднийЗаработок = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты/100;

			СреднийЗаработок = ОбщегоНазначения.ОкруглитьПоВалюте(СреднийЗаработок*КоэффициентИндексации,Константы.ВалютаРегламентированногоУчета.Получить());
			СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			
			// Вычтем из среднего заработка начисленные суммы
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Макс(СреднийЗаработок - ?(ИсходныеДанные.РезультатБаза = NULL, 0, ИсходныеДанные.РезультатБаза), 0),Константы.ВалютаРегламентированногоУчета.Получить());
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Процент оплаты: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета(?(СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам,"Среднечасовой заработок: ","Среднедневной заработок: ") + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				КомментарийБазы = ОбщегоНазначения.КомментарийРасчета("Базовые начисления составили всего: " + ИсходныеДанные.РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
				РасшифровкаБазы = ИсходныеДанные.Выбрать();
				Пока РасшифровкаБазы.Следующий() Цикл
					Если РасшифровкаБазы.РезультатБаза <> 0 Тогда
						ОбщегоНазначения.КомментарийРасчета(РасшифровкаБазы.ВидРасчетаРазрезНаименование + ": " + РасшифровкаБазы.РезультатБаза, КомментарийБазы);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			
			// ПоСреднемуЗаработкуФСС
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и Не ЗначениеЗаполнено(ИсходныеДанные.ОтработаноЧасов)
						ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и Не ЗначениеЗаполнено(ИсходныеДанные.ОтработаноДней) Тогда
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
						СтрокаДвижений.Результат = 0;
						Возврат;
				КонецЕсли;
				Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
					Если Не ЗначениеЗаполнено(ИсходныеДанные.РазмерСреднегоЗаработка) тогда 
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет введен размер среднего заработка");
						СтрокаДвижений.Результат = 0;
						Возврат;
					КонецЕсли;
				Иначе
	          		Если Не ЗначениеЗаполнено(ИсходныеДанные.СреднийЗаработок) Тогда
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
						СтрокаДвижений.Результат = 0;
						Возврат;
					ИначеЕсли Не ЗначениеЗаполнено(ИсходныеДанные.ОтработаноДнейПособий) Тогда
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
						СтрокаДвижений.Результат = 0;
						Возврат;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;	
			
			ПроцентОплаты = СтрокаДвижений[ПоказательРазмер];
			
			ОплачиваемоеВремя = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, , ГрафикиБезРабочегоВремени);
				//ОплачиваемоеВремя = ИсходныеДанные.ОплачиватьДнейПособия;
			
			// Рассчитаем заработок за день (или за час для суммированного учета времени)
			// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
			Если НЕ СтрокаДвижений.Сторно Тогда
				
				Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
					ЗаработокЗаЕдиницуВремени = ИсходныеДанные.РазмерСреднегоЗаработка;
					НормаВремени = ИсходныеДанные.НормаВремениЗаМесяц;
				Иначе
		
					НормаВремени = ИсходныеДанные.НормаВремениЗаМесяц;
					Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
						ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноЧасовПоСреднему,2);
					Иначе
						ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноДнейПоСреднему,2);
					КонецЕсли;
				КонецЕсли;	
				СтрокаДвижений.РазмерСреднегоЗаработка = ЗаработокЗаЕдиницуВремени;
				
			Иначе
				ЗаработокЗаЕдиницуВремени = СтрокаДвижений.РазмерСреднегоЗаработка;
			КонецЕсли;
			
			Если НормаВремени = 0 Или ОплачиваемоеВремя = 0 Тогда
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
		 	КонецЕсли;

			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
			КонецЕсли;
			
			Если ИсходныеДанные.РазмерОграничения = 0 Тогда
					
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Пособие начисляется без ограничений", КомментарийВидаРасчета);
				КонецЕсли;
			Иначе
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Пособие начисляется с ограничением", КомментарийВидаРасчета);
				КонецЕсли;
         	
			КонецЕсли;
			
			Если ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия = 0  ИЛИ ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудника = 0 Тогда
				КоэффициентИндексации = 1;	
			Иначе
				КоэффициентИндексации = ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудника/ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия;
			КонецЕсли;
			Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100;
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Результат*КоэффициентИндексации,Константы.ВалютаРегламентированногоУчета.Получить());
			СтрокаДвижений.КоэффициентИндексации = КоэффициентИндексации;
			СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуОтпускаПоБеременности 
			ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН Тогда
			
			
			
			
			Если  ТипЗнч(ИсходныеДанные.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций") Тогда
				
				Если НЕ СтрокаДвижений.Сторно Тогда
					Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
						Если Не ЗначениеЗаполнено(ИсходныеДанные.РазмерСреднегоЗаработка) тогда 
							ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет введен размер среднего заработка");
							СтрокаДвижений.Результат = 0;
							Возврат;
						ИначеЕсли Не ЗначениеЗаполнено(СтрокаДвижений.Показатель2) Тогда
							ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
							СтрокаДвижений.Результат = 0;
							Возврат;

						КонецЕсли;
					Иначе
		          		Если Не ЗначениеЗаполнено(ИсходныеДанные.СреднийЗаработок) Тогда
							ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
							СтрокаДвижений.Результат = 0;
							Возврат;
						ИначеЕсли Не ЗначениеЗаполнено(СтрокаДвижений.Показатель2) Тогда
							ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
							СтрокаДвижений.Результат = 0;
							Возврат;
						КонецЕсли;	

					КонецЕсли;
				КонецЕсли;	
				
				ПроцентОплаты = СтрокаДвижений[ПоказательРазмер];
		
				// Рассчитаем заработок за день 
				// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
				Если НЕ СтрокаДвижений.Сторно Тогда
					
					Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
						ЗаработокЗаЕдиницуВремени = ИсходныеДанные.РазмерСреднегоЗаработка;
					Иначе
			      		ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработокБезИндексации/ ИсходныеДанные.КалендарныеДни,2);
					КонецЕсли;	
					СтрокаДвижений.РазмерСреднегоЗаработка = ЗаработокЗаЕдиницуВремени;
					
				Иначе
					ЗаработокЗаЕдиницуВремени = СтрокаДвижений.РазмерСреднегоЗаработка;
				КонецЕсли;
				ОплачиваемоеВремя = СтрокаДвижений.Показатель2;
				
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
				КонецЕсли;
				
			
				Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100;
				КоэффициентИндексации = 1;	
				СтрокаДвижений.КоэффициентИндексации = КоэффициентИндексации;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Результат*КоэффициентИндексации,Константы.ВалютаРегламентированногоУчета.Получить());
				СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
	
				
				
				
			Иначе
				Если НЕ СтрокаДвижений.Сторно Тогда
					Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
						Если Не ЗначениеЗаполнено(ИсходныеДанные.РазмерСреднегоЗаработка) тогда 
							ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет введен размер среднего заработка");
							СтрокаДвижений.Результат = 0;
							Возврат;
						ИначеЕсли Не ЗначениеЗаполнено(ИсходныеДанные.ОплачиватьДнейПособия) Тогда
							ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
							СтрокаДвижений.Результат = 0;
							Возврат;

						КонецЕсли;
					Иначе
		          		Если Не ЗначениеЗаполнено(ИсходныеДанные.СреднийЗаработок) ИЛИ НЕ ЗначениеЗаполнено(ИсходныеДанные.КалендарныеДни) Тогда
							ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
							СтрокаДвижений.Результат = 0;
							Возврат;
						ИначеЕсли Не ЗначениеЗаполнено(ИсходныеДанные.ОплачиватьДнейПособия) Тогда
							ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
							СтрокаДвижений.Результат = 0;
							Возврат;
						КонецЕсли;	

					КонецЕсли;
				КонецЕсли;	
				
				ПроцентОплаты = СтрокаДвижений[ПоказательРазмер];
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				// Рассчитаем заработок за день 
				// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
				Если НЕ СтрокаДвижений.Сторно Тогда
					
					Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
						ЗаработокЗаЕдиницуВремени = ИсходныеДанные.РазмерСреднегоЗаработка;
					Иначе
			      		ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработокПособийБезИндексации/ ИсходныеДанные.КалендарныеДни,2);
					КонецЕсли;	
					СтрокаДвижений.РазмерСреднегоЗаработка = ЗаработокЗаЕдиницуВремени;
					
				Иначе
					ЗаработокЗаЕдиницуВремени = СтрокаДвижений.РазмерСреднегоЗаработка;
				КонецЕсли;
				ОплачиваемоеВремя = ИсходныеДанные.ОплачиватьДнейПособия;
				
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
				КонецЕсли;
				
			
				Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100;
				КоэффициентИндексации = 1;	
				СтрокаДвижений.КоэффициентИндексации = КоэффициентИндексации;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Результат*КоэффициентИндексации,Константы.ВалютаРегламентированногоУчета.Получить());
				СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);

           КонецЕсли;
			
			// Компенсация отпуска и Удержание за неотработанный отпуск
		ИначеЕсли
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДни ИЛИ 
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневка ИЛИ 
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения ИЛИ 
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения ИЛИ 
			ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни ИЛИ 
			ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка  ИЛИ 
			(ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций") И СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням) Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда
				Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
					Если Не ЗначениеЗаполнено(ИсходныеДанные.РазмерСреднегоЗаработка) тогда 
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет введен размер среднего заработка");
						СтрокаДвижений.Результат = 0;
						Возврат;
					КонецЕсли;
                Иначе
					Если ИсходныеДанные.СреднийЗаработок = NULL 
						ИЛИ (СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и ИсходныеДанные.ОтработаноЧасовПоСреднему = 0)
						ИЛИ (СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и ИсходныеДанные.ОтработаноДнейПоСреднему = 0) Тогда
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка ");
						СтрокаДвижений.Результат = 0;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ПроцентОплаты = 100;
			ОплачиваемоеВремя = СтрокаДвижений[ПоказательРазмер];
			Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
				// переводим дни в часы: количество недель отпуска * длительность рабочей недели
				ОплачиваемоеВремя = ОплачиваемоеВремя / ИсходныеДанные.ЧислоДнейВНеделе * ИсходныеДанные.ДлительностьРабочейНедели;
			КонецЕсли;
			
			// Рассчитаем заработок за день (или за час для суммированного учета времени)
			Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
                заработокЗаЕдиницуВремени =  ИсходныеДанные.РазмерСреднегоЗаработка;
				//vvv
				заработокЗаЕдиницуВремениФМП=0;
				//
			Иначе
             	ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ((ИсходныеДанные.ЧислоМесяцев) * РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(НачалоМесяца(ИсходныеДанные.Регистратор.ПериодРегистрации),Новый Структура("ВидПараметра", Перечисления.ВидыПараметровДляРасчетаЗарплаты.КоэффициентДляРасчетаОтпуска)).Размер),4);
				//vvv
				заработокЗаЕдиницуВремениФМП = ИсходныеДанные.СуммаГодовойПремии / ((ИсходныеДанные.ЧислоМесяцев) * РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(НачалоМесяца(ИсходныеДанные.Регистратор.ПериодРегистрации),Новый Структура("ВидПараметра", Перечисления.ВидыПараметровДляРасчетаЗарплаты.КоэффициентДляРасчетаОтпуска)).Размер);
				//
			КонецЕсли;
			
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100, Константы.ВалютаРегламентированногоУчета.Получить());
			//vvv
			РезультатФМП = ОбщегоНазначения.ОкруглитьПоВалюте(ОплачиваемоеВремя * заработокЗаЕдиницуВремениФМП * ПроцентОплаты / 100,Константы.ВалютаРегламентированногоУчета.Получить());
			Если ЗначениеЗаполнено(ИсходныеДанные.ВидРасчета.ОтпускИзФМП) Тогда
				Результат=Результат-РезультатФМП;	
			КонецЕсли;			
			//
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Размер начисления: " + Результат, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Дни отпуска: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					ОбщегоНазначения.КомментарийРасчета("Часы отпуска: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				КонецЕсли;
				ОбщегоНазначения.КомментарийРасчета(?(СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам,"Среднечасовой заработок: ","Среднедневной заработок: ") + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			КонецЕсли;
			
			Если ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций") Тогда
				СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			КонецЕсли;
			
		// Удержание за неотработанный отпуск как отрицательное начисление
		ИначеЕсли ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни ИЛИ 
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда
				Если ИсходныеДанные.СреднийЗаработок = NULL 
					ИЛИ (СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и ИсходныеДанные.ОтработаноЧасовПоСреднему = 0)
					ИЛИ (СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и ИсходныеДанные.ОтработаноДнейПоСреднему = 0) Тогда
					ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка ");
					СтрокаДвижений.Результат = 0;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			ПроцентОплаты = 100;
			ОплачиваемоеВремя = СтрокаДвижений[ПоказательРазмер];
			
			// Рассчитаем заработок за день (или за час для суммированного учета времени)
			Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
                заработокЗаЕдиницуВремени =  ИсходныеДанные.РазмерСреднегоЗаработка;
			Иначе
             	ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ((ИсходныеДанные.ЧислоМесяцев) * РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(НачалоМесяца(ИсходныеДанные.Регистратор.ПериодРегистрации),Новый Структура("ВидПараметра", Перечисления.ВидыПараметровДляРасчетаЗарплаты.КоэффициентДляРасчетаОтпуска)).Размер),4);
			КонецЕсли;

			
			Результат = - ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100;
			
			Если ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия <> 0  ИЛИ ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудника <> 0 Тогда
				КоэффициентИндексации = ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудника/ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия;
			Иначе
				КоэффициентИндексации = 1;	
			КонецЕсли;
			 
			СтрокаДвижений.КоэффициентИндексации = КоэффициентИндексации;
			
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Результат*КоэффициентИндексации,Константы.ВалютаРегламентированногоУчета.Получить());
			
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Размер начисления: " + Результат, КомментарийВидаРасчета);
				ОбщегоНазначенияЗК.КомментарийРасчета("Дни отпуска: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("Часы отпуска: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				КонецЕсли;
				ОбщегоНазначенияЗК.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = - ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);

			
			// ОплатаПоСреднемуОтпКалендарныеДни 
			// ОплатаПоСреднемуОтпШестидневка 
		ИначеЕсли
			(СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням ИЛИ
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке) И ТипЗнч(ВидРасчета) <> Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций") Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда
				Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
					Если Не ЗначениеЗаполнено(ИсходныеДанные.РазмерСреднегоЗаработка) тогда 
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет введен размер среднего заработка");
						СтрокаДвижений.Результат = 0;
						Возврат;
					КонецЕсли;
                Иначе
					Если ИсходныеДанные.СреднийЗаработок = NULL 
						ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и ИсходныеДанные.ОтработаноЧасов = 0
						ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и ИсходныеДанные.ОтработаноДнейПоСреднему = 0 Тогда
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
						СтрокаДвижений.Результат = 0;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ПроцентОплаты = ?(СтрокаДвижений[ПоказательРазмер] = 0, 100, СтрокаДвижений[ПоказательРазмер]);
			ОплачиваемоеВремя = ?(ИсходныеДанные.ОплачиваемыеДниОтпуска = NULL, 0, ИсходныеДанные.ОплачиваемыеДниОтпуска);
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Дни отпуска: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
			КонецЕсли;
			Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
			КонецЕсли;
			
			// Рассчитаем заработок за день (или за час для суммированного учета времени)
			// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
			Если НЕ СтрокаДвижений.Сторно Тогда
				Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
                	заработокЗаЕдиницуВремени =  ИсходныеДанные.РазмерСреднегоЗаработка;
					//vvv
					заработокЗаЕдиницуВремениФМП =0;
					//
				Иначе
					заработокЗаЕдиницуВремени = ИсходныеДанные.СреднийЗаработок / ((ИсходныеДанные.ЧислоМесяцев) * РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(НачалоМесяца(ИсходныеДанные.ПериодДействияНачало),Новый Структура("ВидПараметра", Перечисления.ВидыПараметровДляРасчетаЗарплаты.КоэффициентДляРасчетаОтпуска)).Размер);//ИсходныеДанные.ОтработаноДней;
					//vvv
					заработокЗаЕдиницуВремениФМП = ИсходныеДанные.СуммаГодовойПремии / ((ИсходныеДанные.ЧислоМесяцев) * РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(НачалоМесяца(ИсходныеДанные.ПериодДействияНачало),Новый Структура("ВидПараметра", Перечисления.ВидыПараметровДляРасчетаЗарплаты.КоэффициентДляРасчетаОтпуска)).Размер);//ИсходныеДанные.ОтработаноДней;					
					//
				КонецЕсли;
				// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
				СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
				//vvv
				СтрокаДвижений.заработокЗаЕдиницуВремениФМП = заработокЗаЕдиницуВремениФМП;
				//
			Иначе
				ЗаработокЗаЕдиницуВремени = СтрокаДвижений.ДополнительныеДанные;
				//vvv
				заработокЗаЕдиницуВремениФМП=СтрокаДвижений.ЗаработокЗаЕдиницуВремениФМП;
				Если СтрокаДвижений.Сторно И СтрокаДвижений.СторнируемыйДокумент.ПериодРегистрации<ОбщегоНазначения.ПолучитьДатуДеноминации() Тогда
					ЗаработокЗаЕдиницуВремени=ЗаработокЗаЕдиницуВремени/10000;	
					заработокЗаЕдиницуВремениФМП=заработокЗаЕдиницуВремениФМП/10000;							
				КонецЕсли;
				//
			КонецЕсли;
						
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100,Константы.ВалютаРегламентированногоУчета.Получить());
			//vvv
			РезультатФМП = ОбщегоНазначения.ОкруглитьПоВалюте(ОплачиваемоеВремя * заработокЗаЕдиницуВремениФМП * ПроцентОплаты / 100,Константы.ВалютаРегламентированногоУчета.Получить());			
			//
			
			Если ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия <> 0  ИЛИ ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудника <> 0 Тогда
				КоэффициентИндексации = ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудника/ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия;
				//vvv
				РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия=ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия/?(СтрокаДвижений.ДатаНачалаСобытия<ОбщегоНазначения.ПолучитьДатуДеноминации() И СтрокаДвижений.ПериодДействия>=ОбщегоНазначения.ПолучитьДатуДеноминации(),10000,1);
				КоэффициентИндексации = ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудника/РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия;
				Если СтрокаДвижений.Сторно И СтрокаДвижений.ПериодДействия>=ОбщегоНазначения.ПолучитьДатуДеноминации() И (СтрокаДвижений.ДатаНачалаСобытия<ОбщегоНазначения.ПолучитьДатуДеноминации()) Тогда //в июле тарифная ставка уже поменялась					
					КоэффициентИндексации = ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудника/ОбщегоНазначения.ОкруглитьПоВалюте(ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия/10000,Константы.ВалютаРегламентированногоУчета.Получить());					
				КонецЕсли;				
				//
			Иначе
				КоэффициентИндексации = 1;	
			КонецЕсли;
			
			СтрокаДвижений.КоэффициентИндексации = КоэффициентИндексации;
			
			//vvv комментируем
			//Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Результат*КоэффициентИндексации,Константы.ВалютаРегламентированногоУчета.Получить());
			//vvv
			Если ЗначениеЗаполнено(ИсходныеДанные.ВидРасчета.ОтпускИзФМП) Тогда
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Результат*КоэффициентИндексации -РезультатФМП*КоэффициентИндексации,Константы.ВалютаРегламентированногоУчета.Получить());
			Иначе
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Результат*КоэффициентИндексации,Константы.ВалютаРегламентированногоУчета.Получить());
			КонецЕсли;
			//
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета(?(СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам,"Среднечасовой заработок: ","Среднедневной заработок: ") + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.РасчетБЛотТарифнойСтавки Тогда
			Если ИсходныеДанные.ТарифнаяСтавка = 0 тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер тарифной ставки");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
                Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.ТарифнаяСтавка * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни, Константы.ВалютаРегламентированногоУчета.Получить());
			    СтрокаДвижений.ОплаченоДнейЧасов =  ОплачиваемыеДни* ?(СтрокаДвижений.Сторно,-1,1);
			КонецЕсли;
			
			
			
		//Отпуск по беременности и родам в минимальном размере	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтпускПоБеременностиОтБПМ Тогда
			Если ИсходныеДанные.РазмерБПМ = Null тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер БПМ");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
                Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.РазмерБПМ * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни, Константы.ВалютаРегламентированногоУчета.Получить());
			    СтрокаДвижений.ОплаченоДнейЧасов =  ОплачиваемыеДни* ?(СтрокаДвижений.Сторно,-1,1);
			КонецЕсли;
	    //vvv
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоРазницеМеждуЧасовымиСтавками Тогда
			
			//Если ИсходныеДанные.РазмерСдельногоЗаработка = NULL Тогда
			//	Если ИсходныеДанные.ОшибкаВводаФактическойВыработки Тогда
			//		ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об фактической выработке введены сводно. Расчет суммы по данному виду расчета невозможен");
			//	Иначе
			//		ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных о фактической выработке ");
			//	КонецЕсли;
			//Иначе	
			
			//если выбран автомобиль, берем именно эти часы. Такой вариант можно сделать по всем начислениям за уже оплаченное время.
			//Если СтрокаДвижений.Автомобиль<>Справочники.Автомобили.ПустаяСсылка() ТОгда
			//	ОтработаноЧасов=ИсходныеДанные.ЧасовНаАвтомобиле;
			//Иначе					
			ОтработаноЧасов=ИсходныеДанные.ОтработаноЧасов;
			//КонецЕсли;				
			
			ЧасоваяСтавкаРасчетная=ИсходныеДанные.Ставка;
			ЧасоваяСтавкаФактическая=ИсходныеДанные.ТарифнаяСтавка;
			ЧасоваяСтавкаРасчетная=СтрокаДвижений.Показатель2;
			ЧасоваяСтавкаФактическая=СтрокаДвижений.Показатель1;
			
			Результат=ОбщегоНазначения.ОкруглитьПоВалюте((ЧасоваяСтавкаРасчетная-ЧасоваяСтавкаФактическая) * ОтработаноЧасов,Константы.ВалютаРегламентированногоУчета.Получить());
				
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Тарифная ставка расчетная: " + ЧасоваяСтавкаРасчетная, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Тарифная ставка фактическая: " + ЧасоваяСтавкаФактическая, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Отработано часов: " + ОтработаноЧасов, КомментарийВидаРасчета);
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноЧасов * ?(СтрокаДвижений.Сторно,-1,1);

			//КонецЕсли;
		//vvv	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаКоличествомБазовых Тогда	
			КоличествоБазовых = ИсходныеДанные.КолБазовых;
			РазмерБазовой=ИсходныеДанные.РазмерБазовойВеличины;
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(КоличествоБазовых * РазмерБазовой,Константы.ВалютаРегламентированногоУчета.Получить());
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Количество базовых для сотрудника: " +Строка(ИсходныеДанные.Сотрудник)+" = "+Строка(КоличествоБазовых), КомментарийВидаРасчета);
			КонецЕсли;
		//vvv	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаФиксированнойСуммой Тогда	
			ФиксированнаяСумма = ИсходныеДанные.КолБазовых;			
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ФиксированнаяСумма,Константы.ВалютаРегламентированногоУчета.Получить());				
		//vvv	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителей Тогда
			ОтработаноВремениОсновное = ИсходныеДанные.ЧасовНаЛинии;
			ЧасоваяСтавка=ИсходныеДанные.ЧасоваяСтавка;
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ЧасоваяСтавка * ОтработаноВремениОсновное,Константы.ВалютаРегламентированногоУчета.Получить());
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Тарифная ставка: " + ЧасоваяСтавка, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Отработанное время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
		//vvv	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителейБезВыезда Тогда
			ОтработаноВремениОсновное = ИсходныеДанные.ЧасовБезВыезда;
			ЧасоваяСтавка=ИсходныеДанные.ЧасоваяСтавкаБезВыезда;
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ЧасоваяСтавка * ОтработаноВремениОсновное,Константы.ВалютаРегламентированногоУчета.Получить());
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Тарифная ставка: " + ЧасоваяСтавка, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Отработанное время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);	
		//vvv	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавкеВодителей Тогда
			Если ИсходныеДанные.РазмерСдельногоЗаработка = NULL Тогда
				Если ИсходныеДанные.ОшибкаВводаФактическойВыработки Тогда
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об фактической выработке введены сводно. Расчет суммы по данному виду расчета невозможен");
				Иначе
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных о фактической выработке "+?(ЗначениеЗаполнено(СтрокаДвижений.Автомобиль),"по автомобилю "+Строка(СтрокаДвижений.Автомобиль)+".","."));
				КонецЕсли;
            Иначе
				ОтработаноВремениОсновное = ИсходныеДанные.ЧасовНаСделке;
				ЧасоваяСтавка=ИсходныеДанные.ЧасоваяСтавкаСделка;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ЧасоваяСтавка * ОтработаноВремениОсновное,Константы.ВалютаРегламентированногоУчета.Получить());
				Если Результат > ИсходныеДанные.РазмерСдельногоЗаработка тогда
					Результат = ИсходныеДанные.РазмерСдельногоЗаработка;
				КонецЕсли;
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Тарифная ставка водителя на сделке: " + ЧасоваяСтавка, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Отработанное время на сделке: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
				КонецЕсли;
			
				СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
			КонецЕсли;
		//vvv	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителейРемонт Тогда
			ОтработаноВремениОсновное = ИсходныеДанные.ЧасовНаРемонте;
			ЧасоваяСтавка=ИсходныеДанные.ЧасоваяСтавкаРемонт;
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ЧасоваяСтавка * ОтработаноВремениОсновное,Константы.ВалютаРегламентированногоУчета.Получить());
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Тарифная ставка водителя на ремонте: " + ЧасоваяСтавка, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Отработанное время на ремонте: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
			КонецЕсли;	
				
				СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
		//vvv	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителейРемонтПлановый Тогда
			ОтработаноВремениОсновное = ИсходныеДанные.ЧасовНаРемонтеПлановом;
			ЧасоваяСтавка=ИсходныеДанные.ЧасоваяСтавкаРемонтПлановый;
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ЧасоваяСтавка * ОтработаноВремениОсновное,Константы.ВалютаРегламентированногоУчета.Получить());
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Тарифная ставка водителя на ремонте: " + ЧасоваяСтавка, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Отработанное время на плановом ремонте: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
			КонецЕсли;	
				
				СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);		
		//vvv
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеВодители Тогда
			ОтработаноВремениОсновное = ИсходныеДанные.ЧасовНаЛинии;
			ЧасоваяСтавка=ИсходныеДанные.ЧасоваяСтавка;
			ПроцентПремии=ИсходныеДанные.ПроцентПремии;
			ПроцентСнижения=СтрокаДвижений["Показатель3"];
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ЧасоваяСтавка * ОтработаноВремениОсновное*ПроцентПремии/100*((100-ПроцентСнижения)/100),Константы.ВалютаРегламентированногоУчета.Получить());
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Тарифная ставка водителя на линии: " + ЧасоваяСтавка, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Отработанное время на линии: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Процент премии: " + ПроцентПремии, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Процент снижения: " + ПроцентСнижения, КомментарийВидаРасчета);
			КонецЕсли;	
		//vvv
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтСдельногоЗаработкаВодителей Тогда
			Если ИсходныеДанные.РазмерСдельногоЗаработка = NULL Тогда
				Если ИсходныеДанные.ОшибкаВводаФактическойВыработки Тогда
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об фактической выработке введены сводно. Расчет суммы по данному виду расчета невозможен");
				Иначе
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных о фактической выработке "+?(ЗначениеЗаполнено(СтрокаДвижений.Автомобиль),"по автомобилю "+Строка(СтрокаДвижений.Автомобиль)+".","."));
				КонецЕсли;
			Иначе	
				РазмерСдельногоЗаработка=ИсходныеДанные.РазмерСдельногоЗаработка;
				ПроцентПремии=СтрокаДвижений["Показатель2"];
				ПроцентСнижения=СтрокаДвижений["Показатель3"];
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(РазмерСдельногоЗаработка * ПроцентПремии/100*((100-ПроцентСнижения)/100),Константы.ВалютаРегламентированногоУчета.Получить());
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Тарифная ставка водителя на сделке: " + ЧасоваяСтавка, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Отработанное время на сделке: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Процент премии: " + ПроцентПремии, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Процент снижения: " + ПроцентСнижения, КомментарийВидаРасчета);
				КонецЕсли;		
			КонецЕсли;
		//vvv
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеРемонт Тогда
			ОтработаноВремениОсновное = ИсходныеДанные.ЧасовНаРемонте;
			ЧасоваяСтавка=ИсходныеДанные.ЧасоваяСтавкаРемонт;
			ПроцентПремии=ИсходныеДанные.ПроцентПремииРемонт;
			ПроцентСнижения=СтрокаДвижений["Показатель3"];
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ЧасоваяСтавка * ОтработаноВремениОсновное*ПроцентПремии/100*((100-ПроцентСнижения)/100),Константы.ВалютаРегламентированногоУчета.Получить());
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Тарифная ставка водителя на ремонте: " + ЧасоваяСтавка, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Отработанное время на ремонте: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Процент премии: " + ПроцентПремии, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Процент снижения: " + ПроцентСнижения, КомментарийВидаРасчета);
			КонецЕсли;
		//vvv
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеРемонтПлановый Тогда
			ОтработаноВремениОсновное = ИсходныеДанные.ЧасовНаРемонтеПлановом;
			ЧасоваяСтавка=ИсходныеДанные.ЧасоваяСтавкаРемонтПлановый;
			ПроцентПремии=ИсходныеДанные.ПроцентПремииРемонтПлановый;
			ПроцентСнижения=СтрокаДвижений["Показатель3"];
			Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ЧасоваяСтавка * ОтработаноВремениОсновное*ПроцентПремии/100*((100-ПроцентСнижения)/100),Константы.ВалютаРегламентированногоУчета.Получить());
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Тарифная ставка водителя на плановом ремонте: " + ЧасоваяСтавка, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Отработанное время на плановом ремонте: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Процент премии: " + ПроцентПремии, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Процент снижения: " + ПроцентСнижения, КомментарийВидаРасчета);
			КонецЕсли;	
		//vvv
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ЕжемесячнаяПремия Тогда
			
			ПроцентПремии = СтрокаДвижений["Показатель1"];
			ПроцентСнижения = СтрокаДвижений["Показатель2"];
			
			Если ИсходныеДанные.РезультатБаза = NULL Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
			Иначе	
				
				БазаРасчета=ИсходныеДанные.РезультатБаза;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(БазаРасчета*ПроцентПремии/100*((100-ПроцентСнижения)/100),Константы.ВалютаРегламентированногоУчета.Получить());;
				
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("База для премии: " + БазаРасчета, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Процент премии: " + ПроцентПремии, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Процент снижения: " + ПроцентСнижения, КомментарийВидаРасчета);
				КонецЕсли;		
			КонецЕсли;
		//vvv
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоРазрядаПропорциональноОтработанномуВремени тогда			
	
            НормаВремени = ИсходныеДанные.СреднемесячнаяНормаЧасов;
			ПроцентОплаты = СтрокаДвижений.Показатель1;
			СообщениеОбОшибке = Ложь;
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
			
			Если НЕ СообщениеОбОшибке И НормаВремени = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не задано среднемесячное число часов");
			ИначеЕсли ИсходныеДанные.РазмерСтавкиПервогоРазряда = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не задан размер ставки первого разраяда: " + ИсходныеДанные.ВидСтавки);
			Иначе
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ПроцентОплаты*ИсходныеДанные.РазмерСтавкиПервогоРазряда * ОтработаноВремениОсновное / НормаВремени / 100,Константы.ВалютаРегламентированногоУчета.Получить());
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Ставка первого разряда организации: " + ИсходныеДанные.РазмерСтавкиПервогоРазряда, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Среднемесячная норма часов: " + НормаВремени, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
			
		//vvv	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуИзФМП Тогда
			
			Если (ТипЗнч(ИсходныеДанные.Регистратор) = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций")) или (ТипЗнч(ИсходныеДанные.Регистратор) = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту") и СтрокаДвижений.Сторно) тогда

				Если НЕ СтрокаДвижений.Сторно Тогда
					Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
						Если Не ЗначениеЗаполнено(ИсходныеДанные.РазмерСреднегоЗаработка) тогда 
							ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет введен размер среднего заработка");
							СтрокаДвижений.Результат = 0;
							Возврат;
						КонецЕсли;
                	Иначе
						Если ИсходныеДанные.СреднийЗаработок = NULL 
							ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и ИсходныеДанные.ОтработаноЧасов = 0
							ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и ИсходныеДанные.ОтработаноДнейПоСреднему = 0 Тогда
							ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
							СтрокаДвижений.Результат = 0;
							Возврат;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ПроцентОплаты = ?(СтрокаДвижений[ПоказательРазмер] = 0, 100, СтрокаДвижений[ПоказательРазмер]);
				Если ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций") ТОгда
					ОплачиваемоеВремя = СтрокаДвижений[ПоказательРазмер];
					ПроцентОплаты=100;
				Иначе					
					ОплачиваемоеВремя = ?(ИсходныеДанные.ОплачиваемыеДниОтпуска = NULL, 0, ИсходныеДанные.ОплачиваемыеДниОтпуска);
				КонецЕсли;				
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Дни отпуска: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				КонецЕсли;
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
				КонецЕсли;
				
				// Рассчитаем заработок за день (или за час для суммированного учета времени)
				// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
				Если НЕ СтрокаДвижений.Сторно Тогда
					Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
	                	заработокЗаЕдиницуВремени =  ИсходныеДанные.РазмерСреднегоЗаработка;
					Иначе
						Если ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций") ТОгда
							заработокЗаЕдиницуВремени = ИсходныеДанные.СуммаГодовойПремии / ((ИсходныеДанные.ЧислоМесяцев) * РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(НачалоМесяца(ИсходныеДанные.Регистратор.ПериодРегистрации),Новый Структура("ВидПараметра", Перечисления.ВидыПараметровДляРасчетаЗарплаты.КоэффициентДляРасчетаОтпуска)).Размер);//ИсходныеДанные.ОтработаноДней;
						Иначе							
							заработокЗаЕдиницуВремени = ИсходныеДанные.СуммаГодовойПремии / ((ИсходныеДанные.ЧислоМесяцев) * РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(НачалоМесяца(ИсходныеДанные.ПериодДействияНачало),Новый Структура("ВидПараметра", Перечисления.ВидыПараметровДляРасчетаЗарплаты.КоэффициентДляРасчетаОтпуска)).Размер);//ИсходныеДанные.ОтработаноДней;
						КонецЕсли;											    
					КонецЕсли;
					Если ТипЗнч(ВидРасчета) <> Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций") ТОгда
						// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
						СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;					
					КонецЕсли;					
				Иначе
					ЗаработокЗаЕдиницуВремени = СтрокаДвижений.ДополнительныеДанные;					
					Если СтрокаДвижений.Сторно И СтрокаДвижений.СторнируемыйДокумент.ПериодРегистрации<ОбщегоНазначения.ПолучитьДатуДеноминации() ТОгда
						ЗаработокЗаЕдиницуВремени=ЗаработокЗаЕдиницуВремени/10000;	
					КонецЕсли;				
				КонецЕсли;
				
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100,Константы.ВалютаРегламентированногоУчета.Получить());
				
				Если ТипЗнч(ВидРасчета) <> Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций") ТОгда
					Если ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия <> 0  ИЛИ ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудника <> 0 Тогда
						КоэффициентИндексации = ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудника/ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия;
						//vvv
						РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия=ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия/?(СтрокаДвижений.ДатаНачалаСобытия<ОбщегоНазначения.ПолучитьДатуДеноминации() И СтрокаДвижений.ПериодДействия>=ОбщегоНазначения.ПолучитьДатуДеноминации(),10000,1);
						КоэффициентИндексации = ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудника/РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия;
						Если СтрокаДвижений.Сторно И СтрокаДвижений.ПериодДействия>=ОбщегоНазначения.ПолучитьДатуДеноминации() И (СтрокаДвижений.ДатаНачалаСобытия<ОбщегоНазначения.ПолучитьДатуДеноминации()) Тогда //в июле тарифная ставка уже поменялась					
							КоэффициентИндексации = ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудника/ОбщегоНазначения.ОкруглитьПоВалюте(ИсходныеДанные.РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия/10000,Константы.ВалютаРегламентированногоУчета.Получить());					
						КонецЕсли;				
						//
					Иначе
						КоэффициентИндексации = 1;	
					КонецЕсли;
				Иначе
					КоэффициентИндексации = 1;		
				КонецЕсли;
				
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Результат*КоэффициентИндексации,Константы.ВалютаРегламентированногоУчета.Получить());
				
				СтрокаДвижений.КоэффициентИндексации = КоэффициентИндексации;
			
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета(?(СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам,"Среднечасовой заработок: ","Среднедневной заработок: ") + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				КонецЕсли;
				
				//СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
				СтрокаДвижений.ОплаченоДнейЧасов = 0;
			Иначе  //документ "Оплата по среднему"
				Если НЕ СтрокаДвижений.Сторно Тогда
					Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
						Если Не ЗначениеЗаполнено(ИсходныеДанные.РазмерСреднегоЗаработка) тогда 
							ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет введен размер среднего заработка");
							СтрокаДвижений.Результат = 0;
							Возврат;
						КонецЕсли;
                	Иначе
						Если ИсходныеДанные.СреднийЗаработок = NULL 
							ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и ИсходныеДанные.ОтработаноЧасов = 0
							ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и ИсходныеДанные.ОтработаноДнейПоСреднему = 0 Тогда
							ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
							СтрокаДвижений.Результат = 0;
							Возврат;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ПроцентОплаты = ?(СтрокаДвижений[ПоказательРазмер] = 0, 100, СтрокаДвижений[ПоказательРазмер]);
				ОплачиваемоеВремя = ?(ИсходныеДанные.ОтработаноВремени = NULL, 0, ИсходныеДанные.ОтработаноВремени);
				ОплачиваемоеВремя=?(ОплачиваемоеВремя=0,ИсходныеДанные.ОтработаноЧасов,ОплачиваемоеВремя);
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Дни отпуска: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				КонецЕсли;
							
				Если НЕ СтрокаДвижений.Сторно Тогда
					Если ИсходныеДанные.РучнойРасчетСреднегоЗаработка тогда
	                	//заработокЗаЕдиницуВремени =  ИсходныеДанные.РазмерСреднегоЗаработка;
						заработокЗаЕдиницуВремени =  0;
					Иначе
						заработокЗаЕдиницуВремени = ИсходныеДанные.СуммаГодовойПремии / ИсходныеДанные.ОтработаноЧасовПоСреднему;					    	
					КонецЕсли;
					// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
					СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
					
				Иначе
					ЗаработокЗаЕдиницуВремени = СтрокаДвижений.ДополнительныеДанные;
				КонецЕсли;
				
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100,Константы.ВалютаРегламентированногоУчета.Получить());
			    	
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета(?(СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам,"Среднечасовой заработок: ","Среднедневной заработок: ") + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				КонецЕсли;
				
				//СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
				СтрокаДвижений.ОплаченоДнейЧасов = 0;
			КонецЕсли;
		//vvv	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксСуммойПропорционльноОтработанномуВремениПоЧасам  тогда
			НормаВремени = ИсходныеДанные.НормаВремениЗаМесяц;
			СообщениеОбОшибке = Ложь;
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
			ОтработаноВремениОсновное=?(ОтработаноВремениОсновное>НормаВремени, НормаВремени,ОтработаноВремениОсновное);
			Если НЕ СообщениеОбОшибке И НормаВремени = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих часов в заданном периоде");
			КонецЕсли;
			Если НормаВремени <> 0 Тогда
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаДвижений.Показатель1 * ОтработаноВремениОсновное / НормаВремени,Константы.ВалютаРегламентированногоУчета.Получить());
				Результат = ?(Результат < 0,0,Результат);
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Размер начисления: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Норма времени: " + НормаВремени, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);	
		//
		// ПособиеНаРебенкаДо3Лет
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3Лет Тогда
			Если ИсходныеДанные.РазмерПособиянаРебенкаДо3Лет = Null тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер пособия на ребенка до 3-х лет");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.РазмерПособиянаРебенкаДо3Лет * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни, Константы.ВалютаРегламентированногоУчета.Получить());
				//vvv
				Результат = ОкруглениеПособий((ИсходныеДанные.РазмерПособиянаРебенкаДо3Лет * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни);
				//
			КонецЕсли;

		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ Тогда
			Если ИсходныеДанные.РазмерПособиянаРебенкаДо3Лет50ПроцентовБПМ = Null тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер пособия на ребенка до 3-х лет 50 % БПМ");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.РазмерПособиянаРебенкаДо3Лет50ПроцентовБПМ * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни, Константы.ВалютаРегламентированногоУчета.Получить());
				//vvv
				Результат = ОкруглениеПособий((ИсходныеДанные.РазмерПособиянаРебенкаДо3Лет50ПроцентовБПМ * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни);
				//
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ Тогда
			Если ИсходныеДанные.РазмерПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ = Null тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер пособия по уходу за ребенком-инвалидом до 18 лет до исполнения ребенку 3 лет (100 % БПМ)");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.РазмерПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ * СтрокаДвижений[ПоказательРазмер] / 100) * ОплачиваемыеДни /КалендарныхДнейВМесяце, Константы.ВалютаРегламентированногоУчета.Получить());
				//vvv
				Результат = ОкруглениеПособий((ИсходныеДанные.РазмерПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ * СтрокаДвижений[ПоказательРазмер] / 100) * ОплачиваемыеДни /КалендарныхДнейВМесяце);
				//
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ Тогда
			Если ИсходныеДанные.РазмерПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ = Null тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер пособия по уходу за ребенком-инвалидом до 18 лет после исполнения ребенку 3 лет (120 % БПМ)");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.РазмерПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ * СтрокаДвижений[ПоказательРазмер] / 100) * ОплачиваемыеДни /КалендарныхДнейВМесяце, Константы.ВалютаРегламентированногоУчета.Получить());
				//vvv
				Результат = ОкруглениеПособий((ИсходныеДанные.РазмерПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ * СтрокаДвижений[ПоказательРазмер] / 100) * ОплачиваемыеДни /КалендарныхДнейВМесяце);
				//
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3ЛетНаВторого Тогда
			Если ИсходныеДанные.РазмерПособиянаРебенкаДо3ЛетНаВторого = Null тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер пособия на ребенка до 3-х лет на второго и последующих детей");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.РазмерПособиянаРебенкаДо3ЛетНаВторого * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни, Константы.ВалютаРегламентированногоУчета.Получить());
				//vvv
				Результат = ОкруглениеПособий((ИсходныеДанные.РазмерПособиянаРебенкаДо3ЛетНаВторого * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни);
				//
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида Тогда
			Если ИсходныеДанные.РазмерПособиянаРебенкаДо3ЛетНаРебенкаИнвалида = Null тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер пособия на ребенка до 3-х лет на ребенка инвалида");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.РазмерПособиянаРебенкаДо3ЛетНаРебенкаИнвалида * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни, Константы.ВалютаРегламентированногоУчета.Получить());
				//vvv
				Результат = ОкруглениеПособий((ИсходныеДанные.РазмерПособиянаРебенкаДо3ЛетНаРебенкаИнвалида * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни);
				//
			КонецЕсли;	
		// ПособиематериОдиночкеДо1_5Лет
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиематериОдиночкеДо1_5Лет Тогда
			Если ИсходныеДанные.РазмерПособияМатериОдиночкеДо1_5Лет = Null тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер пособия матери-одиночке на ребенка до 1.5 лет");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.РазмерПособияматериОдиночкеДо1_5Лет * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни, Константы.ВалютаРегламентированногоУчета.Получить());
		    КонецЕсли;
		// ПособиеМатериОдиночкеДо3Лет
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеМатериОдиночкеДо3Лет Тогда
			Если ИсходныеДанные.РазмерПособияМатериОдиночкеДо3Лет = Null тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер пособия матери-одиночке на ребенка до 3-х лет");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.РазмерПособияМатериОдиночкеДо3Лет * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни, Константы.ВалютаРегламентированногоУчета.Получить());
			КонецЕсли;
		
		// ПособиеНаРебенкаСНадбавкой40До3Лет
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСНадбавкой40До3Лет Тогда
			Если ИсходныеДанные.РазмерПособияНаРебенкаСНадбавкой40До3Лет = Null тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер пособия на ребенка с надбавкой 40% до 3-х лет");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.РазмерПособиянаРебенкаСНадбавкой40До3Лет * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни, Константы.ВалютаРегламентированногоУчета.Получить());
			КонецЕсли;
			
		// ПособиеНеРаботающейМатериДо3Лет
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРаботающейМатериДо3Лет Тогда
			Если ИсходныеДанные.РазмерПособияНеРаботающейМатериДо3Лет = Null тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер пособия не работающей матери на ребенка до 3-х лет");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.РазмерПособияНеРаботающейМатериДо3Лет * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни, Константы.ВалютаРегламентированногоУчета.Получить());
			КонецЕсли;	
				
		// ПособиеНеРабМатериНадб40До3Лет
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериНадб40До3Лет Тогда
			Если ИсходныеДанные.РазмерПособияНеРабМатериНадб40До3Лет = Null тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер пособия не работающей матери с надбавкой 40% на ребенка до 3-х лет");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.РазмерПособияНеРабМатериНадб40До3Лет * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни, Константы.ВалютаРегламентированногоУчета.Получить());
			КонецЕсли;
			
		// ПособиеНеРабМатериОдиночкеДо1_5Лет
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериОдиночкеДо1_5Лет Тогда
			Если ИсходныеДанные.РазмерПособияНеРабМатериОдиночкеДо1_5Лет = Null тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер пособия не работающей матери-одиночке на ребенка до 1.5 лет");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.РазмерПособияНеРабМатериОдиночкеДо1_5Лет * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни, Константы.ВалютаРегламентированногоУчета.Получить());
			КонецЕсли;
		
		// ПособиеНаРебенкаСтарше3Лет
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСтарше3Лет Тогда
			Если ИсходныеДанные.РазмерПособиянаРебенкаСтарше3Лет = Null тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер пособия на ребенка старше 3-х лет");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.РазмерПособиянаРебенкаСтарше3Лет * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни, Константы.ВалютаРегламентированногоУчета.Получить());
				//vvv
				Результат = ОкруглениеПособий((ИсходныеДанные.РазмерПособиянаРебенкаСтарше3Лет * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни);
				//
			КонецЕсли;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида Тогда
			Если ИсходныеДанные.РазмерПособиянаРебенкаСтарше3ЛетНаРебенкаИнвалида = Null тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер пособия на ребенка старше 3-х лет на ребенка инвалида");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.РазмерПособиянаРебенкаСтарше3ЛетНаРебенкаИнвалида * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни, Константы.ВалютаРегламентированногоУчета.Получить());
				//vvv
				Результат = ОкруглениеПособий((ИсходныеДанные.РазмерПособиянаРебенкаСтарше3ЛетНаРебенкаИнвалида * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни);
				//
			КонецЕсли;
			
		// ПособиеНеРабМатериОдиночкеДо3Лет
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериОдиночкеДо3Лет Тогда
			Если ИсходныеДанные.РазмерПособияНеРабМатериОдиночкеДо3Лет = Null тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер пособия не работающей метери-одиночке на ребенка до 3-х лет");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.РазмерПособияНеРабМатериОдиночкеДо3Лет * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни, Константы.ВалютаРегламентированногоУчета.Получить());
			КонецЕсли;
		
		// ПособиеНаРебенкаДо18ЛетНадб40
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо18ЛетНадб40 Тогда
			Если ИсходныеДанные.РазмерПособияНаРебенкаДо18ЛетНадб40 = Null тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер пособия на ребенка до 18 лет с надбавкой 40%");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.РазмерПособияНаРебенкаДо18ЛетНадб40 * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни, Константы.ВалютаРегламентированногоУчета.Получить());
			КонецЕсли;
			
		// ПособиеНаРебенкаИнвалида
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалида Тогда
			Если ИсходныеДанные.РазмерПособияНаРебенкаИнвалида = Null тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер пособия на ребенка инвалида");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.РазмерПособияНаРебенкаИнвалида * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни, Константы.ВалютаРегламентированногоУчета.Получить());
				//vvv
				Результат = ОкруглениеПособий((ИсходныеДанные.РазмерПособияНаРебенкаИнвалида * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни);
				//
			КонецЕсли;
		// ПособиеНаРебенкаВИЧ
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаВИЧ Тогда
			Если ИсходныеДанные.РазмерПособияНаРебенкаВИЧ = Null тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование+". Не задан размер пособия на ребенка ВИЧ");
			Иначе
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте((ИсходныеДанные.РазмерПособияНаРебенкаВИЧ * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни, Константы.ВалютаРегламентированногоУчета.Получить());
				//vvv
				Результат = ОкруглениеПособий((ИсходныеДанные.РазмерПособияНаРебенкаВИЧ * СтрокаДвижений[ПоказательРазмер] / 100) / КалендарныхДнейВМесяце  * ОплачиваемыеДни);
				//
			КонецЕсли;
			// СдельныйЗаработок
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
			
			Если ИсходныеДанные.РазмерСдельногоЗаработка = NULL Тогда
				Если ИсходныеДанные.ОшибкаВводаФактическойВыработки Тогда
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об фактической выработке введены сводно. Расчет суммы по данному виду расчета невозможен");
				Иначе
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных о фактической выработке ");
				КонецЕсли;
			Иначе
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ИсходныеДанные.РазмерСдельногоЗаработка,Константы.ВалютаРегламентированногоУчета.Получить());
				Если ИсходныеДанные.ЗачетНормыВремени Или ИсходныеДанные.ЗачетОтработанногоВремени Тогда
					СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
				КонецЕсли;
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Размер сдельного заработка: " + ИсходныеДанные.РазмерСдельногоЗаработка, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйПриработок Тогда
			
			Если ИсходныеДанные.РазмерСдельногоЗаработка = NULL Тогда
				Если ИсходныеДанные.ОшибкаВводаФактическойВыработки Тогда
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об фактической выработке введены сводно. Расчет суммы по данному виду расчета невозможен");
				Иначе
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных о фактической выработке ");
				КонецЕсли;
			Иначе
				ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, , ГрафикиБезРабочегоВремени);
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ИсходныеДанные.РазмерСдельногоЗаработка - СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное  ,Константы.ВалютаРегламентированногоУчета.Получить());
				Если Результат < 0 тогда
					Результат = 0;
				КонецЕсли;
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Размер сдельного заработка: " + ИсходныеДанные.РазмерСдельногоЗаработка, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Тарифная часть: " + СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Тарифная ставка: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Отработанное время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
        //vvv
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйПриработокВодителей Тогда
			
			Если ИсходныеДанные.РазмерСдельногоЗаработка = NULL Тогда
				Если ИсходныеДанные.ОшибкаВводаФактическойВыработки Тогда
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об фактической выработке введены сводно. Расчет суммы по данному виду расчета невозможен");
				Иначе
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных о фактической выработке "+?(ЗначениеЗаполнено(СтрокаДвижений.Автомобиль),"по автомобилю "+Строка(СтрокаДвижений.Автомобиль)+".","."));
				КонецЕсли;
			Иначе
				//ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, , ГрафикиБезРабочегоВремени);
				ОтработаноВремениОсновное=ИсходныеДанные.ЧасовНаСделке;
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(ИсходныеДанные.РазмерСдельногоЗаработка - СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное  ,Константы.ВалютаРегламентированногоУчета.Получить());
				Если Результат < 0 тогда
					Результат = 0;
				КонецЕсли;
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Размер сдельного заработка: " + ИсходныеДанные.РазмерСдельногоЗаработка, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Тарифная часть: " + СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Тарифная ставка: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Отработанное время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;	
		//vvv
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйПриработокМесячнаяСтавкаЧасы Тогда
			
			Если ИсходныеДанные.РазмерСдельногоЗаработка = NULL Тогда
				Если ИсходныеДанные.ОшибкаВводаФактическойВыработки Тогда
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об фактической выработке введены сводно. Расчет суммы по данному виду расчета невозможен");
				Иначе
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных о фактической выработке ");
				КонецЕсли;
			Иначе
				ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, , ГрафикиБезРабочегоВремени);
				//vvv
				ПроцентПремии=?(ИсходныеДанные.ПроцентПремии=NULL,0,ИсходныеДанные.ПроцентПремии);
				КоэффициентСтажа=?(ИсходныеДанные.КоэффициентСтажаСделка=NULL,0,ИсходныеДанные.КоэффициентСтажаСделка);
				КТУ=?(ИсходныеДанные.КТУ=NULL,0,ИсходныеДанные.КТУ);
				СуммаВыслуги=ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаДвижений[ПоказательРазмер] / ИсходныеДанные.НормаВремениЗаМесяц*ОтработаноВремениОсновное*КоэффициентСтажа/100,Константы.ВалютаРегламентированногоУчета.Получить());
				//
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте( (ИсходныеДанные.РазмерСдельногоЗаработка - СуммаВыслуги)/(1+ПроцентПремии/100)-СтрокаДвижений[ПоказательРазмер] / ИсходныеДанные.НормаВремениЗаМесяц*ОтработаноВремениОсновное*КТУ  ,Константы.ВалютаРегламентированногоУчета.Получить() );
				//Если Результат < 0 тогда
				//	Результат = 0;
				//КонецЕсли;
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Размер сдельного заработка: " + ИсходныеДанные.РазмерСдельногоЗаработка, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Тарифная часть: " + СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Тарифная ставка: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Отработанное время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;	
	    ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.КТУ Тогда
			
			Если ИсходныеДанные.РазмерСдельногоЗаработка = NULL Тогда
				Если ИсходныеДанные.ОшибкаВводаФактическойВыработки Тогда
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об фактической выработке введены сводно. Расчет суммы по данному виду расчета невозможен");
				Иначе
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных о фактической выработке ");
				КонецЕсли;
			Иначе
				ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, , ГрафикиБезРабочегоВремени);
				КТУ=?(ИсходныеДанные.КТУ=NULL,0,ИсходныеДанные.КТУ);
				Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаДвижений[ПоказательРазмер] / ИсходныеДанные.НормаВремениЗаМесяц*ОтработаноВремениОсновное*КТУ-СтрокаДвижений[ПоказательРазмер] / ИсходныеДанные.НормаВремениЗаМесяц*ОтработаноВремениОсновное ,Константы.ВалютаРегламентированногоУчета.Получить() );
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("КТУ: " + КТУ, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Тарифная часть без КТУ: " + СтрокаДвижений[ПоказательРазмер] / ИсходныеДанные.НормаВремениЗаМесяц*ОтработаноВремениОсновное, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Тарифная часть с КТУ: " + СтрокаДвижений[ПоказательРазмер] / ИсходныеДанные.НормаВремениЗаМесяц*ОтработаноВремениОсновное*КТУ, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Отработанное время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
		//	
			// доначсиление до размеров управленческих начислений
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету Тогда
			// здесь предполагаем, что в наборе записей не может быть записей с разными периодами регистрации
			ПериодДохода = СтрокаДвижений.ПериодРегистрации;
			Результат = ПодобратьДоначисление(СведенияОДоначислениях, ИсходныеДанные.Сотрудник, СтрокаДвижений.ПериодРегистрации);
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Размер начисления: " + Результат, КомментарийВидаРасчета);
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
			
			// проверем все ли показатели получены			
			Если ИсходныеДанные.КоличествоПоказателей <> Null Тогда
				Для НомерСтроки = 1 По ИсходныеДанные.КоличествоПоказателей Цикл
					Если ИсходныеДанные["Показатель"+НомерСтроки] = Null Тогда
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"] + """");
						РезультатПолучен = Ложь;
					ИначеЕсли КомментироватьРасчет Тогда
						ОбщегоНазначения.КомментарийРасчета(ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"]+ ": " + Строка(ИсходныеДанные["Показатель"+НомерСтроки]), КомментарийВидаРасчета);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
				
			Если РезультатПолучен Тогда
				Попытка
					Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Вычислить(ИсходныеДанные.ФормулаРасчета),Константы.ВалютаРегламентированногоУчета.Получить());
				Исключение					
					ОбщегоНазначения.КомментарийРасчета(ИсходныеДанные.СотрудникНаименование + "; " +ИсходныеДанные.ВидРасчетаНаименование +" Ошибка в формуле расчета!", КомментарийВидаРасчета, ,,Перечисления.ВидыСообщений.Ошибка);
				КонецПопытки;
				
				Если РегламентированныеНачисления И ИсходныеДанные.РасчетИмеетОтработанноеВремя Тогда
						ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
						СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
				КонецЕсли;

			КонецЕсли;			

	
		Иначе // Не найден способ расчета
			ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": вид расчета не предусмотрен");
		КонецЕсли;
		
		Если СтрокаДвижений.Сторно Тогда
			СтрокаДвижений.Результат = Результат * -1;
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Расчет сторно", КомментарийВидаРасчета, , , Перечисления.ВидыСообщений.ВажнаяИнформация);
			КонецЕсли;
		Иначе
			СтрокаДвижений.Результат = ОбщегоНазначения.ОкруглитьПоВалюте(Результат,Константы.ВалютаРегламентированногоУчета.Получить());
		КонецЕсли;
		Если КомментироватьРасчет Тогда
			ОбщегоНазначения.КомментарийРасчета("Результат расчета: " + СтрокаДвижений.Результат, КомментарийВидаРасчета);
		КонецЕсли;
	КонецЕсли;
	
	//vvv
	Если ОсновныеНачисленияОрганизаций или ДополнительныеНачисленияОрганизаций Тогда
		Если СтрокаДвижений.ПроцентРезерва<>0 ТОгда
			Результат=СтрокаДвижений.Результат;
			СуммаРезерва=ОбщегоНазначения.ОкруглитьПоВалюте(Результат*СтрокаДвижений.ПроцентРезерва/100,Константы.ВалютаРегламентированногоУчета.Получить());
			СтрокаДвижений.СуммаРезерва=СуммаРезерва;
			СтрокаДвижений.Результат=Результат-СуммаРезерва;
		КонецЕсли;
	КонецЕсли;
	//
	
	// финальные действия для поддержки 
	// способа расчета ДоначислениеПоУправленческомуУчету
	Если РегламентированныеНачисления и СведенияОДоначислениях <> Неопределено Тогда
		Если РасчетДоначисления Тогда
			СтрокаПрогноза.НачисленоПриДоначислении = СтрокаДвижений.Результат;
			//СтрокаПрогноза.НачисленоДоДоначисления = СтрокаПрогноза.НачисленоДоДоначисления + СтрокаДвижений.Результат;
			СтрокаПрогноза.НачисленоПослеДоначисления = 0;
		ИначеЕсли Сведение.ЕстьДоначисление Тогда
			СтрокаПрогноза.НачисленоПослеДоначисления = СтрокаПрогноза.НачисленоПослеДоначисления + СтрокаДвижений.Результат;
		ИначеЕсли не ПовторныйРасчет Тогда
			СтрокаПрогноза.НачисленоДоДоначисления = СтрокаПрогноза.НачисленоДоДоначисления + СтрокаДвижений.Результат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  // РассчитатьЗаписьРегистраРасчета

// Функция предназначена для получения структуры НеобходимыеДанные с элементами:
//			База
//			НормаВремени
//			ОтработаноВремени
// каждый из которых - булево и означает необходимость получения соотвю исходных данных для 
// расчета записей регистра расчета
// Параметр:
//	МассивСпособовРасчета - массив элементов типа СпособРасчетаСсылка или ПланВидовРасчетаСсылка
Функция ПолучитьСтруктуруНеобходимыхДанных(МассивСпособовРасчета, МассивПоказателей) Экспорт
	
	НеобходимыеДанные = Новый Структура;
	НеобходимыеДанные.Вставить("База", Ложь);
	НеобходимыеДанные.Вставить("НормаВремени", Ложь);
	НеобходимыеДанные.Вставить("НормаВремениЗаМесяц", Ложь);
	НеобходимыеДанные.Вставить("ОтработаноВремени", Ложь);
	НеобходимыеДанные.Вставить("СдельныйЗаработок", Ложь);

	НеобходимыеДанные.Вставить("СреднийЗаработок", Ложь);
	НеобходимыеДанные.Вставить("СреднийЗаработокОтпуска", Ложь);
	НеобходимыеДанные.Вставить("СреднийЗаработокПособий", Ложь);
	НеобходимыеДанные.Вставить("КалендарныеДниПособия", Ложь);
	НеобходимыеДанные.Вставить("ИсчисленныйНДФЛ", Ложь);
	НеобходимыеДанные.Вставить("ВычетыКДоходамНДФЛ", Ложь);
	НеобходимыеДанные.Вставить("ПределПоДокументуОснованию", Ложь);
	НеобходимыеДанные.Вставить("НакопленныеДанныеПоДокументуОснованию", Ложь);
	
	
	НеобходимыеДанные.Вставить("РайонныйКоэффициентРФОрганизации", Ложь);
	НеобходимыеДанные.Вставить("ПочтовыеПереводы", Ложь);
	НеобходимыеДанные.Вставить("РазмерОграниченияПособия", Ложь);
	НеобходимыеДанные.Вставить("ДанныеДляПрогнозаНДФЛ", Ложь);
	НеобходимыеДанные.Вставить("ПоказателиСхемМотивации", Ложь);
	НеобходимыеДанные.Вставить("Стаж", Ложь);
	НеобходимыеДанные.Вставить("ВремяВКалендарныхДнях", Ложь);
	НеобходимыеДанные.Вставить("КалендарныхДнейВмесяце", Ложь);
	НеобходимыеДанные.Вставить("ВсегоОтработаноВремени", Ложь);
	
	//РБ
	НеобходимыеДанные.Вставить("МесячнаяТарифнаяСтавка", Ложь);
    НеобходимыеДанные.Вставить("РазмерПособияНаРебенкаДо3Лет", Ложь);
	НеобходимыеДанные.Вставить("РазмерПособияНаРебенкаДо3Лет50ПроцентовБПМ", Ложь);
	НеобходимыеДанные.Вставить("РазмерПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ", Ложь);	 
	НеобходимыеДанные.Вставить("РазмерПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ", Ложь);
	НеобходимыеДанные.Вставить("РазмерПособияНаРебенкаДо3ЛетНаВторого", Ложь);
	НеобходимыеДанные.Вставить("РазмерПособияНаРебенкаДо3ЛетНаРебенкаИнвалида", Ложь);
	НеобходимыеДанные.Вставить("РазмерПособияМатериОдиночкеДо1_5Лет", Ложь);
	НеобходимыеДанные.Вставить("РазмерПособияМатериОдиночкеДо3Лет", Ложь);
	НеобходимыеДанные.Вставить("РазмерПособияНаРебенкаСНадбавкой40До3Лет", Ложь);
	НеобходимыеДанные.Вставить("РазмерПособияНеРаботающейМатериДо3Лет", Ложь);
	НеобходимыеДанные.Вставить("РазмерПособияНеРабМатериОдиночкеДо1_5Лет", Ложь);
	НеобходимыеДанные.Вставить("РазмерПособияНеРабМатериОдиночкеДо3Лет", Ложь);
	НеобходимыеДанные.Вставить("РазмерПособиянеРабМатериНадб40До3Лет", Ложь);
	НеобходимыеДанные.Вставить("РазмерПособияНаРебенкаСтарше3Лет", Ложь);
	НеобходимыеДанные.Вставить("РазмерПособияНаРебенкаСтарше3ЛетНаРебенкаИнвалида", Ложь);
	НеобходимыеДанные.Вставить("РазмерПособияНаРебенкаДо18ЛетНадб40", Ложь);
	НеобходимыеДанные.Вставить("РазмерПособияНаРебенкаИнвалида", Ложь);
	НеобходимыеДанные.Вставить("РазмерПособияНаРебенкаВИЧ", Ложь);
	НеобходимыеДанные.Вставить("РазмерЧасоваяМинимальнаяЗарплата", Ложь);
	НеобходимыеДанные.Вставить("РазмерМесячнаяМинимальнаяЗарплата", Ложь);
	НеобходимыеДанные.Вставить("ОтработаноВермениВоВредных", Ложь);
	НеобходимыеДанные.Вставить("СтавкаПервогоРазряда", Ложь);
	НеобходимыеДанные.Вставить("СтавкаПервогоРазрядаСотрудника", Ложь);
	НеобходимыеДанные.Вставить("ПрожиточныйМинимум", Ложь);
	НеобходимыеДанные.Вставить("БПМ", Ложь);
	НеобходимыеДанные.Вставить("МесячнаяТарифнаяСтавкаНаДатуСобытия", Ложь);
	//vvv
	НеобходимыеДанные.Вставить("ОтработаноВремениНаЛинии", Ложь);
	НеобходимыеДанные.Вставить("ОтработаноНаАвтомобиле", Истина);
	НеобходимыеДанные.Вставить("ОтработаноВремениНаСделке", Ложь);
	НеобходимыеДанные.Вставить("ОтработаноВремениРемонт", Ложь);
	НеобходимыеДанные.Вставить("ОтработаноВремениРемонтПлановый", Ложь);
	НеобходимыеДанные.Вставить("ПроцентПремииВодителя", Ложь);
	НеобходимыеДанные.Вставить("ПроцентПремииРемонт", Ложь);
	НеобходимыеДанные.Вставить("СреднемесячнаяНормаЧасов", Ложь);
	НеобходимыеДанные.Вставить("РазмерБазовойВеличины", Ложь);
	НеобходимыеДанные.Вставить("КоличествоБазовыхВеличин", Ложь);
	НеобходимыеДанные.Вставить("ОтработаноВремениБезВыезда", Ложь);	
	//

	
	
	// данный Если... необходимо пополнять при появлении новых способ расчета или
	// видов расчета, которые не укладываются ни в один из способов
	Для Каждого СпособРасчета Из МассивСпособовРасчета Цикл
		Если 	
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням ИЛИ
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксСуммойПропорционльноОтработанномуВремени ИЛИ
			//vvv
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксСуммойПропорционльноОтработанномуВремениПоЧасам ИЛИ
			//
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаЗаместительство			Тогда
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
		ИначеЕсли 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы или
			//vvv
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоИнойЧасовойТарифнойСтавке или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоИнойМесячнойТарифнойСтавке или			
			//
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы 
			Тогда
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.МесячнаяТарифнаяСтавка = Истина;
		ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаСовмещениеПоОкладу тогда
			НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
            НеобходимыеДанные.НормаВремени = Истина;
		ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаСовмещениеПоТарифу тогда
		    НеобходимыеДанные.НормаВремени = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
			НеобходимыеДанные.База = Истина;
		//vvv
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Индексация Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.БПМ = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителей
			или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеВодители Тогда
			НеобходимыеДанные.ОтработаноВремениНаЛинии = Истина;
			НеобходимыеДанные.МесячнаяТарифнаяСтавка = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителейБезВыезда Тогда
			НеобходимыеДанные.ОтработаноВремениБезВыезда = Истина;
			НеобходимыеДанные.МесячнаяТарифнаяСтавка = Истина;	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавкеВодителей Тогда
			НеобходимыеДанные.ОтработаноВремениНаСделке = Истина;
			НеобходимыеДанные.МесячнаяТарифнаяСтавка = Истина;	
			НеобходимыеДанные.СдельныйЗаработок = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтСдельногоЗаработкаВодителей Тогда
			НеобходимыеДанные.ОтработаноВремениНаСделке = Истина;
			НеобходимыеДанные.МесячнаяТарифнаяСтавка = Истина;	
			НеобходимыеДанные.СдельныйЗаработок = Истина;	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителейРемонт
			или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеРемонт Тогда
			НеобходимыеДанные.ОтработаноВремениРемонт = Истина;
			НеобходимыеДанные.МесячнаяТарифнаяСтавка = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителейРемонтПлановый
			или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеРемонтПлановый Тогда
			НеобходимыеДанные.ОтработаноВремениРемонтПлановый = Истина;
			НеобходимыеДанные.МесячнаяТарифнаяСтавка = Истина;	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоРазницеМеждуЧасовымиСтавками ТОгда			
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.МесячнаяТарифнаяСтавка = Истина;
			НеобходимыеДанные.СдельныйЗаработок = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ЕжемесячнаяПремия ТОгда			
			НеобходимыеДанные.База = Истина;			
			НеобходимыеДанные.ОтработаноВремени = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомСоСнижением Тогда
			НеобходимыеДанные.База = Истина;	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомСКТУ Тогда
			НеобходимыеДанные.База = Истина;	
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистВПрожиточныхМинимумах Тогда
			НеобходимыеДанные.ПрожиточныйМинимум = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ИсчисленныйНДФЛ = Истина;
			//vvv
			НеобходимыеДанные.БПМ = Истина;
			//
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомСНДФЛ Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ИсчисленныйНДФЛ = Истина;
			НеобходимыеДанные.ПределПоДокументуОснованию = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПределаСНДФЛ Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ПределПоДокументуОснованию = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
			НеобходимыеДанные.ПределПоДокументуОснованию = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
			
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоРазряда Тогда
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.ОтработаноВермениВоВредных = Истина;
			НеобходимыеДанные.СтавкаПервогоРазряда = Истина;
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоСотрудника Тогда
			НеобходимыеДанные.ОтработаноВремени = Истина;
          	НеобходимыеДанные.ОтработаноВермениВоВредных = Истина;
			НеобходимыеДанные.СтавкаПервогоРазрядаСотрудника = Истина;
    	ИначеЕсли 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку  Тогда
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.СреднийЗаработок = Истина;
			НеобходимыеДанные.СтавкаПервогоРазрядаСотрудника = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуОтпускаПоБеременности
			ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН Тогда
			
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.РазмерОграниченияПособия = Истина;
			НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
			НеобходимыеДанные.СреднийЗаработок = Истина;
			НеобходимыеДанные.СреднийЗаработокПособий = Истина;
			НеобходимыеДанные.КалендарныеДниПособия = Истина;
			НеобходимыеДанные.СтавкаПервогоРазрядаСотрудника = Истина;
			
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.РасчетБЛотТарифнойСтавки Тогда
				
			//НеобходимыеДанные.МесячнаяТарифнаяСтавка = Истина;
			НеобходимыеДанные.МесячнаяТарифнаяСтавкаНаДатуСобытия = Истина;
			НеобходимыеДанные.КалендарныеДниПособия = Истина;
			
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
			
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.СреднийЗаработок = Истина;
			НеобходимыеДанные.СтавкаПервогоРазрядаСотрудника = Истина;
			
		ИначеЕсли
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке Тогда
			
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.СреднийЗаработокОтпуска = Истина;
			НеобходимыеДанные.СреднийЗаработок = Истина;  
			НеобходимыеДанные.СтавкаПервогоРазрядаСотрудника = Истина;
			
		ИначеЕсли
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой 
			Тогда
			// ничего...
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой Тогда
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3Лет Тогда
			НеобходимыеДанные.РазмерПособияНаРебенкаДо3Лет = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ Тогда
			НеобходимыеДанные.РазмерПособияНаРебенкаДо3Лет50ПроцентовБПМ = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ Тогда
			НеобходимыеДанные.РазмерПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ = Истина;			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ Тогда
			НеобходимыеДанные.РазмерПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ = Истина;	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3ЛетНаВторого Тогда
			НеобходимыеДанные.РазмерПособияНаРебенкаДо3ЛетНаВторого = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида Тогда
			НеобходимыеДанные.РазмерПособияНаРебенкаДо3ЛетНаРебенкаИнвалида = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеМатериОдиночкеДо1_5Лет Тогда
			НеобходимыеДанные.РазмерПособияМатериОдиночкеДо1_5Лет = Истина;	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеМатериОдиночкеДо3Лет Тогда
			НеобходимыеДанные.РазмерПособияМатериОдиночкеДо3Лет = Истина;	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСНадбавкой40До3Лет Тогда
			НеобходимыеДанные.РазмерПособияНаРебенкаСНадбавкой40До3Лет = Истина;	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРаботающейМатериДо3Лет Тогда
			НеобходимыеДанные.РазмерПособияНеРаботающейМатериДо3Лет = Истина;	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериОдиночкеДо1_5Лет Тогда
			НеобходимыеДанные.РазмерПособияНеРабМатериОдиночкеДо1_5Лет = Истина;	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериОдиночкеДо3Лет Тогда
			НеобходимыеДанные.РазмерПособияНеРабМатериОдиночкеДо3Лет = Истина;	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериНадб40До3Лет Тогда
			НеобходимыеДанные.РазмерПособияНеРабМатериНадб40До3Лет = Истина;	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСтарше3Лет Тогда
			НеобходимыеДанные.РазмерПособияНаРебенкаСтарше3Лет = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида Тогда
			НеобходимыеДанные.РазмерПособияНаРебенкаСтарше3ЛетНаРебенкаИнвалида = Истина;	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо18ЛетНадб40 Тогда
			НеобходимыеДанные.РазмерПособияНаРебенкаДо18ЛетНадб40 = Истина;	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалида Тогда
			НеобходимыеДанные.РазмерПособияНаРебенкаИнвалида = Истина;	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаВИЧ Тогда
			НеобходимыеДанные.РазмерПособияНаРебенкаВИЧ = Истина;	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
			НеобходимыеДанные.СдельныйЗаработок = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйПриработок или
			 СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке Тогда
            НеобходимыеДанные.СдельныйЗаработок = Истина;
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.МесячнаяТарифнаяСтавка = Истина;
		//vvv	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйПриработокМесячнаяСтавкаЧасы Тогда
            НеобходимыеДанные.СдельныйЗаработок = Истина;
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.МесячнаяТарифнаяСтавка = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.КТУ Тогда
            НеобходимыеДанные.СдельныйЗаработок = Истина;
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.МесячнаяТарифнаяСтавка = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйПриработокВодителей Тогда
            НеобходимыеДанные.СдельныйЗаработок = Истина;
			НеобходимыеДанные.ОтработаноВремениНаСделке = Истина;
			НеобходимыеДанные.МесячнаяТарифнаяСтавка = Истина;	
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоРазрядаПропорциональноОтработанномуВремени Тогда
			НеобходимыеДанные.СреднемесячнаяНормаЧасов = Истина;
			НеобходимыеДанные.ОтработаноВремени = Истина;			
			НеобходимыеДанные.СтавкаПервогоРазряда = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаКоличествомБазовых Тогда
			НеобходимыеДанные.РазмерБазовойВеличины = Истина;		
			НеобходимыеДанные.КоличествоБазовыхВеличин = Истина;		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаФиксированнойСуммой Тогда			
			НеобходимыеДанные.КоличествоБазовыхВеличин = Истина;			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоВычисляемойЧасовойТарифнойСтавке Тогда
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.База = Истина;			
	    //	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
			НеобходимыеДанные.ПоказателиСхемМотивации = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.КомиссионыйСбор Тогда
			НеобходимыеДанные.ПочтовыеПереводы = Истина
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету Тогда
			НеобходимыеДанные.ДанныеДляПрогнозаНДФЛ = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
			НеобходимыеДанные.База = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоРазмераМинимальнойЗарплаты Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.РазмерЧасоваяМинимальнаяЗарплата = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоРазмераМЗПотМесячнойМЗП Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.РазмерМесячнаяМинимальнаяЗарплата = Истина;
			НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтпускПоБеременностиОтБПМ Тогда
			НеобходимыеДанные.БПМ = Истина;	
		КонецЕсли;
		
	КонецЦикла;
	
	МассивСтажей = Новый Соответствие;
	
	
	Для Каждого СтрокаПоказателя Из МассивПоказателей Цикл
		
		Показатель = СтрокаПоказателя.Показатель;

		
		НеобходимыеДанные.СдельныйЗаработок = НеобходимыеДанные.СдельныйЗаработок Или Показатель = Справочники.ПоказателиСхемМотивации.СдельнаяВыработка;
		НеобходимыеДанные.ОтработаноВремени = НеобходимыеДанные.ОтработаноВремени Или Показатель = Справочники.ПоказателиСхемМотивации.ВремяВДнях Или Показатель = Справочники.ПоказателиСхемМотивации.ВремяВЧасах
			Или Показатель = Справочники.ПоказателиСхемМотивации.ОтработаноВремениВДнях Или Показатель = Справочники.ПоказателиСхемМотивации.ОтработаноВремениВЧасах;
		НеобходимыеДанные.НормаВремениЗаМесяц = НеобходимыеДанные.НормаВремениЗаМесяц Или Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВДнях Или Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах;
		НеобходимыеДанные.База = НеобходимыеДанные.База Или Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза;
		НеобходимыеДанные.Стаж = НеобходимыеДанные.Стаж Или Показатель = Справочники.ПоказателиСхемМотивации.Стаж;
		НеобходимыеДанные.ВремяВКалендарныхДнях = НеобходимыеДанные.ВремяВКалендарныхДнях Или Показатель = Справочники.ПоказателиСхемМотивации.ВремяВКалендарныхДнях;
		НеобходимыеДанные.КалендарныхДнейВмесяце = НеобходимыеДанные.КалендарныхДнейВмесяце Или Показатель = Справочники.ПоказателиСхемМотивации.КалендарныхДнейВмесяце;
		НеобходимыеДанные.ВсегоОтработаноВремени = НеобходимыеДанные.ВсегоОтработаноВремени Или Показатель = Справочники.ПоказателиСхемМотивации.ОтработаноВремениВДнях Или Показатель = Справочники.ПоказателиСхемМотивации.ОтработаноВремениВЧасах;
		
		
		Если ЗначениеЗаполнено(СтрокаПоказателя.ВидСтажа) Тогда
			 МассивСтажей.Вставить(СтрокаПоказателя.ВидСтажа, СтрокаПоказателя.ВидСтажаКод) 
		КонецЕсли;

	КонецЦикла;
	
		НеобходимыеДанные.Вставить("ПроизвольныеСтажи", МассивСтажей);
	
	Возврат НеобходимыеДанные;
КонецФункции

// Функция предназначена для получения оплачиваемого времени по результату запроса при расчете:
//
// Параметры:
//	ИсходныеДанные - строка выборки из результат запроса, по которой вернуть время
//
// Возвращаемое значение:
//	Число - размер оплачиваемого времени в днях/часах
//
Функция ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВладелец, СообщениеОбОшибке = Ложь, ГрафикиБезРабочегоВремени)
	
	ОплачиваемоеВремя = 0;
	РасшифровкаКомментария = НеОпределено;
	ВажностьКомментария = НеОпределено;
	ОплачиваемоеВремя = ИсходныеДанные.ОтработаноВремени;
	
	Если ИсходныеДанные.ОтработаноВремени = Null Тогда
		Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
			ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
		ИначеЕсли ИсходныеДанные.ОшибкаВводаИндивидуальногоГрафикаРаботы Тогда
			ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Индивидуальный график работы введен сводно. Расчет времени по данному виду расчета невозможен");
		Иначе
			ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не найдены данные об отработанном времени");
		КонецЕсли;
		СообщениеОбОшибке = Истина;
		Возврат 0;
	ИначеЕсли ИсходныеДанные.ПредупреждениеНесоответствияТабеляИНачисления Тогда
		ОбщегоНазначения.ОшибкаРасчета("Предупреждение: " + ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введенные табелем,  не соответствуют введенным начислениям");
	КонецЕсли;
	
	Если КомментироватьРасчет и ТипЗнч(ИсходныеДанные.ВидРасчета) <> Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления")и ТипЗнч(ИсходныеДанные.ВидРасчета) <> Тип("ПланВидовРасчетаСсылка.УправленческиеУдержания") Тогда
		Если ИсходныеДанные.СпособВводаВремени = 1 
			или ИсходныеДанные.СпособВводаВремени = 2 Тогда // введено сводно табелем или индивид. графиком
			РасшифровкаКомментария = Новый Массив;
			РасшифровкаКомментария.Добавить("РаботаСДиалогами.ОткрытьГрафик");
			РасшифровкаКомментария.Добавить(СтрокаДвижений.Сотрудник);
			РасшифровкаКомментария.Добавить(СтрокаДвижений.ПериодДействия);
			ТекстКомментария = "Оплачиваемое время введено сводно за весь период работы ";
			Если ИсходныеДанные.СпособВводаВремени = 1 Тогда
				ПредставлениеРасшифровки = "табелем учета рабочего времени или сдельным нарядом";
			Иначе
				ПредставлениеРасшифровки = "индивидуальным графиком работы";
			КонецЕсли;
			ВажностьКомментария = Перечисления.ВидыСообщений.ВажнаяИнформация;
		Иначе
			РасшифровкаКомментария = Новый Массив;
			РасшифровкаКомментария.Добавить("РаботаСДиалогами.ОткрытьГрафик");
			РасшифровкаКомментария.Добавить(СтрокаДвижений.ГрафикРаботы);
			РасшифровкаКомментария.Добавить(СтрокаДвижений.ПериодДействия);
			Если ИсходныеДанные.СпособВводаВремени = 3 Тогда
				ТекстКомментария = "Оплачиваемое время рассчитано по графику работы: ";
				ПредставлениеРасшифровки = ИсходныеДанные.ГрафикРаботыНаименование;
			Иначе
				ТекстКомментария = "Оплачиваемое время рассчитано по индивидуальному графику работы или по табелю учета рабочего времени. ";
				ПредставлениеРасшифровки = "Подробнее...";
				ВажностьКомментария = Перечисления.ВидыСообщений.ВажнаяИнформация;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ИсходныеДанные.ВидУчетаВремени <> Перечисления.ВидыУчетаВремени.ПоДням Тогда
		Если ИсходныеДанные.ВидРасчета.ВидВремени = Перечисления.ВидыВремени.ЧасовоеНеотработанное
			ИЛИ ИсходныеДанные.ВидРасчета.ВидВремени = Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы Тогда
			ОплачиваемоеВремя = ИсходныеДанные.ОтработаноЧасов;
		Иначе
			ОплачиваемоеВремя = ИсходныеДанные.ОтработаноВремени - ИсходныеДанные.ОтработаноЧасовПоТабелюОтклонение;
		КонецЕсли;
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		ОбщегоНазначения.КомментарийРасчета("Оплачиваемое время " + ?(ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням, "(в днях) ", "(в часах) ") + ОплачиваемоеВремя, КомментарийВладелец);
		ОбщегоНазначения.КомментарийРасчета("Вид учета времени: " + ИсходныеДанные.ВидУчетаВремени, КомментарийВладелец);
		ОбщегоНазначения.КомментарийРасчета(ТекстКомментария, КомментарийВладелец, ПредставлениеРасшифровки, РасшифровкаКомментария, ВажностьКомментария);
	КонецЕсли;
	
	Если ОплачиваемоеВремя = 0 И Не ЗначениеЗаполнено(ИсходныеДанные.НормаВремениЗаМесяц) Тогда
		КлючПоиска = Новый Структура("ГрафикРаботы,ВидУчетаВремени");
		КлючПоиска.ВидУчетаВремени = ИсходныеДанные.ВидУчетаВремени;
		Если ИсходныеДанные.СпособВводаВремени = 1 Или ИсходныеДанные.СпособВводаВремени = 2 Тогда
			КлючПоиска.ГрафикРаботы = СтрокаДвижений.Сотрудник;
		Иначе
			КлючПоиска.ГрафикРаботы = СтрокаДвижений.ГрафикРаботы;
		КонецЕсли;
		
		КоличествоСтрокГрафика = ГрафикиБезРабочегоВремени.НайтиСтроки(КлючПоиска).Количество();
		Если КомментироватьРасчет Или КоличествоСтрокГрафика = 0 Тогда
			РасшифровкаКомментария = Новый Массив;
			РасшифровкаКомментария.Добавить("РаботаСДиалогами.ОткрытьГрафик");
			
			Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоВечернимЧасам Тогда
				ТекстВидаВремени = "вечерних часов";
			ИначеЕсли ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоНочнымЧасам Тогда
				ТекстВидаВремени = "ночных часов";
			Иначе
				ТекстВидаВремени = "рабочих дней";
			КонецЕсли;
			
			Если ИсходныеДанные.СпособВводаВремени = 1 Тогда
				РасшифровкаКомментария.Добавить(СтрокаДвижений.Сотрудник);
				РасшифровкаКомментария.Добавить(СтрокаДвижений.ПериодДействия);
				Если КомментироватьРасчет Тогда
					ТекстКомментария = "В сдельном наряде или табеле учета рабочего времени за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " нет " + ТекстВидаВремени + "! Необходимо заполнить ";
				Иначе
					ФИО = ИсходныеДанные.СотрудникНаименование;
					ПроцедурыУправленияПерсоналом.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ФИО, 2, ФИО);
					
					ТекстКомментария = "У " + ФИО + " в сдельном наряде или табеле учета рабочего времени за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " нет " + ТекстВидаВремени + "! Необходимо заполнить ";
				КонецЕсли;
				
				ОбщегоНазначения.КомментарийРасчета(ТекстКомментария, КомментарийВладелец, "документ", РасшифровкаКомментария, Перечисления.ВидыСообщений.Ошибка);
				Если КоличествоСтрокГрафика = 0 Тогда
					НоваяСтрока = ГрафикиБезРабочегоВремени.Добавить();
					НоваяСтрока.ВидУчетаВремени = ИсходныеДанные.ВидУчетаВремени;
					НоваяСтрока.ГрафикРаботы = СтрокаДвижений.Сотрудник;
				КонецЕсли;
				
			ИначеЕсли ИсходныеДанные.СпособВводаВремени = 2 Тогда
				РасшифровкаКомментария.Добавить(СтрокаДвижений.Сотрудник);
				РасшифровкаКомментария.Добавить(СтрокаДвижений.ПериодДействия);
				
				Если КомментироватьРасчет Тогда
					ТекстКомментария = "В индивидуальном графике за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " нет " + ТекстВидаВремени + "! Необходимо заполнить ";
				Иначе
					ФИО = ИсходныеДанные.СотрудникНаименование;
					ПроцедурыУправленияПерсоналом.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ФИО, 2, ФИО);
					
					ТекстКомментария = "У " + ФИО + " в индивидуальном графике за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " нет " + ТекстВидаВремени + "! Необходимо заполнить ";
				КонецЕсли;
				
				ОбщегоНазначения.КомментарийРасчета(ТекстКомментария, КомментарийВладелец, "документ", РасшифровкаКомментария, Перечисления.ВидыСообщений.Ошибка);
				Если КоличествоСтрокГрафика = 0 Тогда
					НоваяСтрока = ГрафикиБезРабочегоВремени.Добавить();
					НоваяСтрока.ВидУчетаВремени = ИсходныеДанные.ВидУчетаВремени;
					НоваяСтрока.ГрафикРаботы = СтрокаДвижений.Сотрудник;
				КонецЕсли;
				
			Иначе
				РасшифровкаКомментария.Добавить(СтрокаДвижений.ГрафикРаботы);
				РасшифровкаКомментария.Добавить(СтрокаДвижений.ПериодДействия);
				Если ИсходныеДанные.СпособВводаВремени = 3 Тогда
					ОбщегоНазначения.КомментарийРасчета("В графике нет " + ТекстВидаВремени + " за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " Необходимо заполнить график: ", КомментарийВладелец, ИсходныеДанные.ГрафикРаботыНаименование, РасшифровкаКомментария, Перечисления.ВидыСообщений.Ошибка);
				Иначе
					Если КомментироватьРасчет Тогда
						ТекстКомментария = "В индивидуальном графике или табеле учета рабочего времени за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " нет " + ТекстВидаВремени + ". Необходимо заполнить ";
					Иначе
						ФИО = ИсходныеДанные.СотрудникНаименование;
						ПроцедурыУправленияПерсоналом.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ФИО, 2, ФИО);
						
						ТекстКомментария = "У " + ФИО + " в индивидуальном графике или табеле учета рабочего времени за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " нет " + ТекстВидаВремени + ". Необходимо заполнить ";
					КонецЕсли;
					
					ОбщегоНазначения.КомментарийРасчета(ТекстКомментария, КомментарийВладелец, "документ", РасшифровкаКомментария, Перечисления.ВидыСообщений.Ошибка);
				КонецЕсли;
				Если КоличествоСтрокГрафика = 0 Тогда
					НоваяСтрока = ГрафикиБезРабочегоВремени.Добавить();
					НоваяСтрока.ВидУчетаВремени = ИсходныеДанные.ВидУчетаВремени;
					НоваяСтрока.ГрафикРаботы = СтрокаДвижений.ГрафикРаботы;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		СообщениеОбОшибке = Истина;
	КонецЕсли;
	
	Возврат ОплачиваемоеВремя;
	
КонецФункции // ОплачиваемоеВремя()

// Создает строку в движениях  РасчетСреднегоЗаработка, заполняет по данным выборки 
// из запроса и возвращает ее
// Используется в СформироватьИЗаписатьДанныеРасчетаСреднего
// Параметры:
// 	Выборка - спозиционированная выборка результата запроса
//  НаборЗаписей - набор записей РасчетСреднегоЗаработка
//  Регистратор - документ
//  ВидРасчета - вид расчета среднего заработка
//
// Возвращаемое значение:
// Запись регистра расчета РасчетСреднегоЗаработка
//
Функция СоздатьСтрокуРасчетаСреднего(Выборка, НаборЗаписей, Регистратор, ВидРасчета)
	
	Строка = НаборЗаписей.Добавить();
	
	// предопределенные поля
	Строка.ПериодРегистрации				= Выборка.ПериодРегистрации;
	Строка.ВидРасчета						= ВидРасчета;

	// измерения
	Строка.Сотрудник						= Выборка.Сотрудник;
	Строка.Физлицо							= Выборка.Физлицо;
	Строка.Организация						= Выборка.Организация;

	// реквизиты
	Строка.СпособРасчета					= Выборка.СпособРасчета;
	Строка.ВидУчетаВремени					= Выборка.ВидУчетаВремени;
	Строка.ДатаНачалаСобытия				= Выборка.ДатаНачалаСобытия;
	Строка.ДатаНачалаРасчетногоПериода		= Выборка.НачалоБП;
	Строка.ДатаОкончанияРасчетногоПериода	= Выборка.КонецБП;
	Строка.ПериодРасчетаСреднегоЗаработка	= Выборка.ПериодРасчетаСреднегоЗаработка;
	Строка.КоэффициентИндексации			= 1;
	//vvv
	Строка.ОбособленноеПодразделение        = Выборка.ОбособленноеПодразделение;
	Строка.РасчетПоДоговоруПодряда          = Выборка.РасчетПоДоговоруПодряда;
	Строка.РасчетВнутреннегоСовместителя    = Выборка.РасчетВнутреннегоСовместителя;
	//
	Строка.ВидОграниченияЗаработка 			= Выборка.ВидОграниченияЗаработка;
	
	Возврат Строка;
	
КонецФункции // СоздатьСтрокуРасчетаСреднего()

// выполняет формирование и запись набора записей регистра РасчетСреднегоЗаработка
// на основании данных набора записей регистра ОсновныеНачисленияРаботниковОрганизации
// Параметры:
//  ИмяРегистра - имя регистра расчетов 
//  Регистратор - регистратор набора записей регистра ОсновныеНачисленияРаботниковОрганизации
//  НаборЗаписей
// 
// Возвращаемое значение:
//  нет
//
Процедура СформироватьИЗаписатьДанныеРасчетаСреднего(ИмяРегистра, Регистратор, НаборЗаписей, КомментироватьРасчет = Ложь) Экспорт;
	
	// Вычислим наименьшую и наибольшую дату расчета среднего
	ДатаНачалаРасчетаСреднего		= '00010101';
	ДатаОкончанияРасчетаСреднего	= '00010101';
	НГраница = НаборЗаписей.Количество();
	
	// Выберем данные о коэффициентах индексации за расчетные периоды (в общем случае может быть несколько 
	// различных расчетных периодов, так как записей начислений в документе оплаты может быть несколько и мы позволяем 
	// пользователю редактировать расчетный период)
	
	// Реализация Федеральных законов:
	//	от 22.12.2005 г. № 180-ФЗ и от 29 декабря 2006 г. № 255-ФЗ - по больничным листам
	//	от 5 декабря 2006 г. № 207-ФЗ - по отпуску по уходу за детьми
	// - поле "Сотрудник" с 1 января 2006 года для больничных листов и с 1 января 2007 года для отпуска по уходу за детьми
	// может идентифицировать несколько мест работы, включая работу по внутреннему совместительству
	// - выборка РаботникиОрганизацийСрезПоследних содержит все действующие на конец расчетного периода
	// рабочие места
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(РаботникиОрганизацийСрезПоследних.Сотрудник, Основной.Сотрудник) КАК Сотрудник,
	|	Основной.ФизЛицо КАК Физлицо,
	|	Основной.Организация КАК Организация,
	//vvv
	|	Основной.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ВЫБОР
	|		КОГДА Основной.Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетПоДоговоруПодряда,
	|	&парамРасчетВнутреннегоСовместителя КАК РасчетВнутреннегоСовместителя,
	//
	|	Основной.ВидУчетаВремени КАК ВидУчетаВремени,
	|	Основной.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	РАЗНОСТЬДАТ(Основной.ПериодРасчетаСреднегоЗаработкаНачало, НАЧАЛОПЕРИОДА(Основной.ПериодРасчетаСреднегоЗаработкаОкончание, МЕСЯЦ), МЕСЯЦ) + 1 КАК ПериодРасчетаСреднегоЗаработка,
	|	Основной.ПериодРасчетаСреднегоЗаработкаНачало КАК НачалоБП,
	|	КОНЕЦПЕРИОДА(Основной.ПериодРасчетаСреднегоЗаработкаОкончание, ДЕНЬ) КАК КонецБП,
	|	Основной.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	1 КАК КоэффициентИндексации,
	|	0 КАК ТекущаяТарифнаяСтавка,
	|	ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.Период КАК Период,
	|	""Средний"" КАК ВариантЗаполненияСреднего,
	|	Основной.ВидОграниченияЗаработка,
	|	Основной.Регистратор.ПериодРегистрации КАК ПериодРегистрации
	|ИЗ
	|	РегистрРасчета." + ИмяРегистра + " КАК Основной
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации.СрезПоследних КАК ТарифныеСтавкиРаботниковОрганизацииСрезПоследних
	|		ПО Основной.сотрудник = ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.Сотрудник
	|			И Основной.Организация = ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.Организация
	|			И Основной.ПериодРегистрации = ТарифныеСтавкиРаботниковОрганизацииСрезПоследних.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДатыРегистра.Сотрудник КАК Сотрудник,
	|			ДатыРегистра.Регистратор КАК Регистратор,
	|			ДатыРегистра.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Регистратор,
	|				ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки КАК НомерСтроки,
	|				ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|				РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|				МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|			ИЗ
	|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|					ПО ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия >= РаботникиОрганизаций.Период
	//vvv комментируем, делаем связь по физ. лицу, для того, чтобы в среднюю для больничных бралась и зарплата внутреннего совмещения 
	//|						И ОсновныеНачисленияРаботниковОрганизаций.Сотрудник = РаботникиОрганизаций.Сотрудник
	|						И ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
	//
	|						И ОсновныеНачисленияРаботниковОрганизаций.Организация = РаботникиОрганизаций.Сотрудник.Организация
	|			ГДЕ
	|				ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &парамРегистратор
	//vvv комментируем
	//|				И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуОтпускаПоБеременности))
	//|				И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням))
	|				И ВЫБОР КОГДА &парамВключатьВСреднююЗаработокВнутреннихСовместителей ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)) ИНАЧЕ ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН)) КОНЕЦ
	//
	|				И (НЕ ОсновныеНачисленияРаботниковОрганизаций.Сторно)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОсновныеНачисленияРаботниковОрганизаций.Регистратор,
	|				ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки,
	|				ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия,
	//vvv добавляем выборку из доп. начислений. иначе средняя по внутреннему совместительству не работает в случае компенсации, т.к. компенсация - это доп. начисление
	//|				РаботникиОрганизаций.Сотрудник) КАК ДатыРегистра
	|				РаботникиОрганизаций.Сотрудник
	//
	|			ОБЪЕДИНИТЬ ВСЕ
	|
	|			ВЫБРАТЬ
	|				ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Регистратор,
	|				ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки КАК НомерСтроки,
	|				ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|				РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|				МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|			ИЗ
	|				РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|					ПО ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия >= РаботникиОрганизаций.Период
	|						И ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
	|						И ОсновныеНачисленияРаботниковОрганизаций.Организация = РаботникиОрганизаций.Сотрудник.Организация
	|			ГДЕ
	|				ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &парамРегистратор
	|				И ВЫБОР КОГДА &парамВключатьВСреднююЗаработокВнутреннихСовместителей ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)) ИНАЧЕ ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН)) КОНЕЦ
	|				И (НЕ ОсновныеНачисленияРаботниковОрганизаций.Сторно)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОсновныеНачисленияРаботниковОрганизаций.Регистратор,
	|				ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки,
	|				ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия,
	|				РаботникиОрганизаций.Сотрудник) КАК ДатыРегистра
	//
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|				ПО ДатыРегистра.Период = РаботникиОрганизаций.Период
	|					И ДатыРегистра.Сотрудник = РаботникиОрганизаций.Сотрудник
	|		ГДЕ
	//vvv
	|				РаботникиОрганизаций.Сотрудник.ВидЗанятости=ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство) ИЛИ			
	//
	|			ВЫБОР
	|					КОГДА ДатыРегистра.ДатаНачалаСобытия >= РаботникиОрганизаций.ПериодЗавершения
	|							И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
	|					ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
	//vvv добавим суммы по договору подряда
	//|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизацийСрезПоследних
	|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДатыРегистра.Сотрудник КАК Сотрудник,
	|			ДатыРегистра.Регистратор КАК Регистратор,
	|			ДатыРегистра.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Регистратор,
	|				ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки КАК НомерСтроки,
	|				ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|				РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|				МАКСИМУМ(РаботникиОрганизаций.ДатаНачала) КАК Период
	|			ИЗ
	|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК РаботникиОрганизаций
	|					ПО ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия >= РаботникиОрганизаций.ДатаНачала
	|						И ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
	|						И ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение = РаботникиОрганизаций.Сотрудник.ОбособленноеПодразделение
	|			ГДЕ
	|				ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &парамРегистратор И 
	|					ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН))	
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОсновныеНачисленияРаботниковОрганизаций.Регистратор,
	|				ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки,
	|				ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия,
	|				РаботникиОрганизаций.Сотрудник) КАК ДатыРегистра
	|		
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК РаботникиОрганизаций
	|				ПО ДатыРегистра.Период = РаботникиОрганизаций.ДатаНачала
	|					И ДатыРегистра.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			
	|		ГДЕ 
	|			РаботникиОрганизаций.Сотрудник.ВидДоговора=ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)) КАК РаботникиОрганизацийСрезПоследних
	//
	|		ПО Основной.Регистратор = РаботникиОрганизацийСрезПоследних.Регистратор
	|			И Основной.НомерСтроки = РаботникиОрганизацийСрезПоследних.НомерСтроки
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.ВидРасчета.СпособРасчета В(&парамСпособыРасчета)
	|	И (НЕ Основной.Сторно)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	Сотрудник,
	|	СпособРасчета,
	|	НачалоБП,
	|	КонецБП,
	|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("парамРегистратор",			Регистратор);
	//vvv
	Запрос.УстановитьПараметр("парамВключатьВСреднююЗаработокВнутреннихСовместителей",			?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВключатьВСреднююЗаработокПоВнутреннемуСовместительству",Регистратор.Метаданные()),Регистратор.ВключатьВСреднююЗаработокПоВнутреннемуСовместительству,Истина));
	Запрос.УстановитьПараметр("парамРасчетВнутреннегоСовместителя",			?(ОбщегоНазначения.ЕстьРеквизитДокумента("Сотрудник",Регистратор.Метаданные()),Регистратор.Сотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство,Ложь));
	Запрос.УстановитьПараметр("ДатаДеноминации", ОбщегоНазначения.ПолучитьДатуДеноминации());
	//
	
	СпособыРасчетаПоСреднему = Новый Массив(7);
	СпособыРасчетаПоСреднему[0] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку;
	СпособыРасчетаПоСреднему[1] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС;
	СпособыРасчетаПоСреднему[2] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням;
	СпособыРасчетаПоСреднему[3] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке;
	СпособыРасчетаПоСреднему[4] = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка;
	СпособыРасчетаПоСреднему[5] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуОтпускаПоБеременности;
	СпособыРасчетаПоСреднему[6] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН;
	
	Запрос.УстановитьПараметр("парамСпособыРасчета", СпособыРасчетаПоСреднему);
	
	ПоСреднемуЗаработкуФСС = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС;
	ПоСреднемуЗаработкуФСЗН = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН;
	ПоСреднемуЗаработкуОтпускаПоБеременности = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуОтпускаПоБеременности;
	ПоСреднемуЗаработкуОтпуск = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням;
	
	Выборка = Запрос.Выполнить().Выбрать();

	ПредыдущаяСтрокаЗаработок	= Неопределено;
	ПредыдущаяСтрокаПремии		= Неопределено;
	ПредыдущаяСтрокаФиксПремии	= Неопределено;
	
	ТекущийСотрудник			= Неопределено;
	ТекущийСпособ				= Неопределено;
	ТекущийНачалоБП				= Неопределено;
	ТекущийКонецБП				= Неопределено;
	ТекущаяДатаНачалаСобытия	= Неопределено;
	ТекущийКоэффициент			= 1;
	ТекущийВариантЗаполненияСреднего = "";

	// предопределенные виды расчета среднего заработка
	ПоЗаработку = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
	ПоЗаработкуБЛ = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
	ПоЗаработкуОтпуск = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск;
    ПоПремиям = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
	ПоФиксПремиям = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
    ПоГодовойПремии = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
	//vvv
	ПоПремиямБЛ = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ;
	ПоПремиямОтпуск = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямОтпуск;
	ПоФиксПремиямБЛ = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ;
	ПоФиксПремиямОтпуск = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямОтпуск;
    ПоГодовойПремии = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
	ПоГодовойПремииБЛ = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ;
	ПоГодовойПремииОтпуск = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииОтпуск;
	//

	// Скопируем структуру набора записей
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	
	//Таблица значений для простоев по вине нанимателя
	таблицаПростоев = Новый ТаблицаЗначений;
	ТаблицаПростоев.Колонки.Добавить("МесяцВыборки");
	таблицаПростоев.Колонки.Добавить("НаличиеПростоев");
	
	// Выборку обходим в порядке убывания дат случаев индексации
	Пока Выборка.Следующий() Цикл
		
		// Проверим, не сменился ли работник
		Если ТекущийСотрудник <> Выборка.Сотрудник
			ИЛИ ТекущийСпособ <> Выборка.СпособРасчета
			ИЛИ ТекущийНачалоБП <> Выборка.НачалоБП
			ИЛИ ТекущийКонецБП <> Выборка.КонецБП
			ИЛИ ТекущаяДатаНачалаСобытия <> Выборка.ДатаНачалаСобытия Тогда
			
	
			// Закроем строки по предыдущему работнику
			Если ПредыдущаяСтрокаЗаработок <> Неопределено Тогда
				// закроем последнюю строку по предыдущему работнику
				ПредыдущаяСтрокаЗаработок.БазовыйПериодНачало = ТекущийНачалоБП;
				ПредыдущаяСтрокаПремии.БазовыйПериодНачало = ТекущийНачалоБП;
				ПредыдущаяСтрокаФиксПремии.БазовыйПериодНачало = ТекущийНачалоБП;
				ПредыдущаяСтрокаЗаработок = Неопределено;
				ПредыдущаяСтрокаПремии = Неопределено;
				ПредыдущаяСтрокаФиксПремии = Неопределено;
			КонецЕсли;

			// Запомним новый набор идентификаторов начисления
			ТекущийСотрудник			= Выборка.Сотрудник;
			ТекущийСпособ				= Выборка.СпособРасчета;
			ТекущийНачалоБП				= Выборка.НачалоБП;
			ТекущийКонецБП				= Выборка.КонецБП;
			ТекущаяДатаНачалаСобытия	= Выборка.ДатаНачалаСобытия;
			ТекущийВариантЗаполненияСреднего = Выборка.ВариантЗаполненияСреднего;
			
			// Инициализируем данные для нового работника
			ТекущийКоэффициент = 1;
			                                                                 
			// введем вид расчета по годовой премии
			//vvv
			Если Выборка.СпособРасчета = ПоСреднемуЗаработкуФСС ИЛИ Выборка.СпособРасчета = ПоСреднемуЗаработкуФСЗН ИЛИ  Выборка.СпособРасчета = ПоСреднемуЗаработкуОтпускаПоБеременности Тогда
				ПоГодовойПремии=ПоГодовойПремииБЛ;		
			ИначеЕсли Выборка.СпособРасчета = ПоСреднемуЗаработкуОтпуск Тогда
				ПоГодовойПремии=ПоГодовойПремииОтпуск;				
			КонецЕсли;
			//
			Строка = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоГодовойПремии);
			// при расчете годовой премии в базовый период пишем год, за который начислялась годовая премия 
			//Строка.БазовыйПериодНачало 	= НачалоГода(НачалоГода(Выборка.НачалоБП) - 1);
			Строка.БазовыйПериодНачало 	= НачалоМесяца(Выборка.НачалоБП);
			Строка.БазовыйПериодКонец 	= КонецМесяца(Выборка.КонецБП);
			//vvv
			Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку") тогда
				Строка.БазовыйПериодНачало 	= НачалоГода(НачалоГода(Выборка.НачалоБП) - 1);
			КонецЕсли;
			//
			БезЕТС =  РегистрыСведений.РаботникиОрганизаций.ПолучитьПоследнее(Выборка.ДатаНачалаСобытия, 
									Новый Структура("Сотрудник,Организация", Выборка.Сотрудник,Выборка.Организация)).БезЕТС;
			Если НЕ БезЕТС Тогда
				ТекущаяТарифнаяСтавка = РегистрыСведений.РаботникиОрганизаций.ПолучитьПоследнее(Выборка.ДатаНачалаСобытия, 
										Новый Структура("Сотрудник,Организация", Выборка.Сотрудник,Выборка.Организация)).ТарифнаяСтавкаПервогоРазряда;
				Отбор = Новый Структура;
				//vvv
				//Отбор.Вставить("Организация", Выборка.Организация);
				Отбор.Вставить("Организация", Выборка.ОбособленноеПодразделение);
				//
				Отбор.Вставить("ТарифнаяСтавка",  ТекущаяТарифнаяСтавка);
				РазмерТС =   РегистрыСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций.ПолучитьПоследнее(Выборка.ДатаНачалаСобытия,Отбор).Размер;
				Строка.ТекущаяТарифнаяСтавка = РазмерТС;
			Иначе
				
				РазмерТС = РегистрыСведений.ТарифныеСтавкиРаботниковОрганизации.ПолучитьПоследнее(Выборка.ДатаНачалаСобытия, 
										Новый Структура("Сотрудник,Организация", Выборка.Сотрудник,Выборка.Организация)).ТарифнаяСтавка;
				Строка.ТекущаяТарифнаяСтавка = РазмерТС;
			КонецЕсли;
			
			// Создадим по первой строке по работнику для заработка и премии
			Если Выборка.СпособРасчета = ПоСреднемуЗаработкуФСС ИЛИ Выборка.СпособРасчета = ПоСреднемуЗаработкуФСЗН ИЛИ  Выборка.СпособРасчета = ПоСреднемуЗаработкуОтпускаПоБеременности Тогда
				ВидСреднего = ПоЗаработкуБЛ;
				//vvv
				ПоПремиям=ПоПремиямБЛ;
				ПоФиксПремиям=ПоФиксПремиямБЛ;
				//
			ИначеЕсли Выборка.СпособРасчета = ПоСреднемуЗаработкуОтпуск Тогда
				ВидСреднего = ПоЗаработкуОтпуск;
				//vvv
				ПоПремиям=ПоПремиямОтпуск;
				ПоФиксПремиям=ПоФиксПремиямОтпуск;
				//
			Иначе
				ВидСреднего = ПоЗаработку;
			КонецЕсли;
	
			СтрокаЗаработок  = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ВидСреднего);
			СтрокаПремии  = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиям);
			СтрокаФиксПремии  = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиям);
			
			СтрокаЗаработок.БазовыйПериодКонец = Выборка.КонецБП;
			СтрокаПремии.БазовыйПериодКонец = Выборка.КонецБП;
			СтрокаФиксПремии.БазовыйПериодКонец = Выборка.КонецБП;
			
			СтрокаЗаработок.ТекущаяТарифнаяСтавка = РазмерТС;
			СтрокаПремии.ТекущаяТарифнаяСтавка = РазмерТС;
			СтрокаФиксПремии.ТекущаяТарифнаяСтавка = РазмерТС;
			
		КонецЕсли;
		
		// Сохраним для следующей итерации
		ПредыдущаяСтрокаЗаработок = СтрокаЗаработок;
		ПредыдущаяСтрокаПремии = СтрокаПремии;
		ПредыдущаяСтрокаФиксПремии = СтрокаФиксПремии;
		
		// Расчет минимальной и максимальной из дат начала и окончания расчетных периодов 
		//(эти данные нужны для процедуры ПолучитьДанныеДляРасчета
        Если ДатаНачалаРасчетаСреднего = Дата('00010101') Тогда
			ДатаНачалаРасчетаСреднего = Выборка.НачалоБП;
		Иначе
			ДатаНачалаРасчетаСреднего = Мин(ДатаНачалаРасчетаСреднего, Выборка.НачалоБП);
		КонецЕсли;
        Если ДатаОкончанияРасчетаСреднего = Дата('00010101') Тогда
			ДатаОкончанияРасчетаСреднего = Выборка.КонецБП;
		Иначе
			ДатаОкончанияРасчетаСреднего = Макс(ДатаОкончанияРасчетаСреднего, Выборка.КонецБП);
		КонецЕсли;
		
	КонецЦикла;
	
	// Закроем строки по последнему работнику
	Если ПредыдущаяСтрокаЗаработок <> Неопределено Тогда
		// закроем последнюю строку по предыдущему работнику
		ПредыдущаяСтрокаЗаработок.БазовыйПериодНачало = ТекущийНачалоБП;
		ПредыдущаяСтрокаПремии.БазовыйПериодНачало = ТекущийНачалоБП;
		ПредыдущаяСтрокаФиксПремии.БазовыйПериодНачало = ТекущийНачалоБП;
	КонецЕсли;
	
	// Загрузим полученные периоды в набор записей
	ТаблицаЗаписей.Сортировать("Сотрудник, СпособРасчета, ДатаНачалаРасчетногоПериода, ДатаОкончанияРасчетногоПериода, БазовыйПериодНачало, ТекущаяТарифнаяСтавка");
	// Загрузим полученные периоды в набор записей
	НаборЗаписей.Загрузить(ТаблицаЗаписей);
	
	// Зафиксируем нарезанные записи
	НаборЗаписей.Записать();
			
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Измерения = Новый Массив(1);
	Измерения[0] = "Сотрудник";
	
	
	Разрезы = Новый Массив(1);
	//vvv
	Разрезы = Новый Массив(2);
	//
	Разрезы[0] = "ПериодДействия";
	//vvv
	Разрезы[1] = "ПериодРегистрации";
	//
	
	РазрезыДоп = Новый Массив(2);
	РазрезыДоп[0] = "ПериодРегистрации";
	РазрезыДоп[1] = "ЧислоМесяцев";
	
 	Запрос.УстановитьПараметр("парамИзмерения",		Измерения);
	Запрос.УстановитьПараметр("парамРазрезы",		Разрезы);
	Запрос.УстановитьПараметр("парамРазрезыДоп",	РазрезыДоп);
	
	ПоГодовойПремии = Новый Массив;
	ПоГодовойПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии);
	//vvv
	ПоГодовойПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ);
	ПоГодовойПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииОтпуск);
	//
	
	ПоПремии = Новый Массив;
	ПоПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
	ПоПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	//vvv
	ПоПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ);
	ПоПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ);
	ПоПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямОтпуск);
	ПоПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямОтпуск);
	//
	
	Заработок = Новый Массив;
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск);
	
	Запрос.УстановитьПараметр("парамПоСреднемеЗаработку",	Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	Запрос.УстановитьПараметр("парамПоГодовойПремии",	ПоГодовойПремии);
	Запрос.УстановитьПараметр("парамЗаработок",	Заработок);
	Запрос.УстановитьПараметр("парамПоПремии",	ПоПремии);

	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетСреднегоЗаработка.НомерСтроки,
	//vvv комментируем, максимум брать нельзя, так как 13 может выплачиваться несколькими частями, при максимуме берется последний кусок выплаченной 13-й
	//|	МАКСИМУМ(ЕСТЬNULL(Дополнительные.БазовыйПериодНачало, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК БПНачало,
	//|	МАКСИМУМ(ЕСТЬNULL(Дополнительные.БазовыйПериодКонец, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК БПКонец,
	//vvv
	|	ЕСТЬNULL(Дополнительные.БазовыйПериодНачало, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК БПНачало,
	|	ЕСТЬNULL(Дополнительные.БазовыйПериодКонец, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК БПКонец,
	//
	|	Дополнительные.ВидРасчета,
	|	РасчетСреднегоЗаработка.БазовыйПериодКонец,
	|	РасчетСреднегоЗаработка.БазовыйПериодНачало,
	|	РасчетСреднегоЗаработка.Сотрудник
	|ПОМЕСТИТЬ ВТВидыГодовыхПремий
	|ИЗ
	|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
	|		ПО РасчетСреднегоЗаработка.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.Ссылка
	|			И (СреднийЗаработокБазовыеВидыРасчета.ВидРасчета ССЫЛКА ПланВидовРасчета.ДополнительныеНачисленияОрганизаций)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Дополнительные
	|		ПО (Дополнительные.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.ВидРасчета)
	|			И (НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ) >= ДОБАВИТЬКДАТЕ(РасчетСреднегоЗаработка.БазовыйПериодНачало, МЕСЯЦ, -(Дополнительные.ЧислоМесяцев - 1)))
	|			И (НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ) <= РасчетСреднегоЗаработка.БазовыйПериодКонец)
	//vvv добавляем условие, т.к. если 13-я начислена документом премии - базовый период это прошлый год, иначе - месяц начисления и тогда ничего не работает
	|			И Дополнительные.БазовыйПериодНачало >=ВЫБОР КОГДА Дополнительные.Регистратор ССЫЛКА Документ.ПремииРаботниковОрганизаций ТОГДА Дополнительные.БазовыйПериодНачало ИНАЧЕ  ДОБАВИТЬКДАТЕ(РасчетСреднегоЗаработка.БазовыйПериодКонец,МЕСЯЦ,-Дополнительные.ЧислоМесяцев) КОНЕЦ
	//
	|			И (Дополнительные.Сотрудник = РасчетСреднегоЗаработка.Сотрудник)
	|ГДЕ
	|	РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
	|	И РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремии)
	|	И РасчетСреднегоЗаработка.СпособРасчета = &парамПоСреднемеЗаработку
	//vvv добавляем условие
	//|	И Дополнительные.БазовыйПериодНачало >= ДОБАВИТЬКДАТЕ(РасчетСреднегоЗаработка.БазовыйПериодКонец,МЕСЯЦ,-Дополнительные.ЧислоМесяцев)
	//
	|
	//vvv комментируем
	//|СГРУППИРОВАТЬ ПО
	//|	РасчетСреднегоЗаработка.НомерСтроки,
	//|	Дополнительные.ВидРасчета,
	//|	РасчетСреднегоЗаработка.БазовыйПериодНачало,
	//|	РасчетСреднегоЗаработка.БазовыйПериодКонец,
	//|	РасчетСреднегоЗаработка.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации,
	|	ДополнительныеНачисленияРаботниковОрганизаций.Результат,
	|	ДополнительныеНачисленияРаботниковОрганизаций.БазовыйПериодНачало,
	|	ДополнительныеНачисленияРаботниковОрганизаций.БазовыйПериодКонец,
	|	ВТВидыГодовыхПремий.ВидРасчета,
	|	ДополнительныеНачисленияРаботниковОрганизаций.ЧислоМесяцев,
	|	ВТВидыГодовыхПремий.НомерСтроки
	|ПОМЕСТИТЬ ВТБазаГодовыхПремий
	|ИЗ
	|	ВТВидыГодовыхПремий КАК ВТВидыГодовыхПремий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
	|		ПО ВТВидыГодовыхПремий.ВидРасчета = ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета
	|			И ВТВидыГодовыхПремий.БПНачало = ДополнительныеНачисленияРаботниковОрганизаций.БазовыйПериодНачало
	|			И ВТВидыГодовыхПремий.БПКонец = ДополнительныеНачисленияРаботниковОрганизаций.БазовыйПериодКонец
	|			И (НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации, МЕСЯЦ) >= ДОБАВИТЬКДАТЕ(ВТВидыГодовыхПремий.БазовыйПериодНачало, МЕСЯЦ, -(ДополнительныеНачисленияРаботниковОрганизаций.ЧислоМесяцев - 1)))
	|			И (НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации, МЕСЯЦ) <= ВТВидыГодовыхПремий.БазовыйПериодКонец)
	|			И ВТВидыГодовыхПремий.Сотрудник = ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник";
	
	
	Запрос.Выполнить();
	////////////////////////////////////////////////////////////////////////////////
	// базовые данные для расчета ресурсов
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(База.РезультатБаза), 0) КАК РезультатБаза,
	|	База.ЧислоМесяцев,
	|	База.ПериодРасчетаСреднегоЗаработка,
	|	База.ПериодРегистрацииРазрез КАК МесяцВыборки,
	|	База.НомерСтроки КАК НомерСтроки,
	|	База.Начало,
	|	База.Конец,
	|	База.БПНачало,
	|	База.БПКонец
	|ИЗ
	|	(ВЫБРАТЬ
	//vvv
	//|		БазаОсновныеНачисления.РезультатБаза КАК РезультатБаза,
	|		БазаОсновныеНачисления.РезультатБаза / ВЫБОР КОГДА БазаОсновныеНачисления.ПериодРегистрацииРазрез<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РезультатБаза,
	//
	|		1 КАК ЧислоМесяцев,
	|		0 КАК ПериодРасчетаСреднегоЗаработка,
	|		НАЧАЛОПЕРИОДА(БазаОсновныеНачисления.ПериодДействияРазрез,МЕСЯЦ) КАК ПериодРегистрацииРазрез,
	|		БазаОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|		NULL КАК Начало,
	|		NULL КАК Конец,
	//vvv
	//|		NULL КАК БПНачало,
	//|		NULL КАК БПКонец,
	|		ВЫБОР КОГДА ВидРасчета В (&парамЗаработок) ТОГДА NULL ИНАЧЕ НАЧАЛОПЕРИОДА(БазаОсновныеНачисления.ПериодДействияРазрез,МЕСЯЦ) КОНЕЦ КАК БПНачало,
	|		ВЫБОР КОГДА ВидРасчета В (&парамЗаработок) ТОГДА NULL ИНАЧЕ КОНЕЦПЕРИОДА(БазаОсновныеНачисления.ПериодДействияРазрез,МЕСЯЦ) КОНЕЦ КАК БПКонец,
	|		NULL КАК Поле1
	|	ИЗ
	|		РегистрРасчета.РасчетСреднегоЗаработка.БазаОсновныеНачисленияРаботниковОрганизаций(
	|				&парамИзмерения,
	|				&парамИзмерения,
	|				&парамРазрезы,
	|				Регистратор = &парамРегистратор
	//vvv
	//|					И ВидРасчета В (&парамЗаработок)) КАК БазаОсновныеНачисления
	|					И (ВидРасчета В (&парамЗаработок) ИЛИ ВидРасчета В (&парамПоПремии))) КАК БазаОсновныеНачисления
	//
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	//vvv
	//|		БазаДополнительныеНачисления.РезультатБаза,
	|		БазаДополнительныеНачисления.РезультатБаза / ВЫБОР КОГДА БазаДополнительныеНачисления.ПериодРегистрацииРазрез<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ,
	//
	|		ВЫБОР
	|			КОГДА БазаДополнительныеНачисления.ЧислоМесяцевРазрез = 0
	|				ТОГДА 1
	|			ИНАЧЕ БазаДополнительныеНачисления.ЧислоМесяцевРазрез
	|		КОНЕЦ,
	|		0,
	|		НАЧАЛОПЕРИОДА(БазаДополнительныеНачисления.ПериодРегистрацииРазрез,МЕСЯЦ),
	|		БазаДополнительныеНачисления.НомерСтроки,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрРасчета.РасчетСреднегоЗаработка.БазаДополнительныеНачисленияРаботниковОрганизаций(
	|				&парамИзмерения,
	|				&парамИзмерения,
	|				&парамРазрезыДоп,
	|				Регистратор = &парамРегистратор
	|					И ВидРасчета В (&парамЗаработок)) КАК БазаДополнительныеНачисления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	//vvv
	//|		Дополнительные.Результат,
	|		Дополнительные.Результат / ВЫБОР КОГДА Дополнительные.ПериодРегистрации<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ,
	//
	|		ВЫБОР
	|			КОГДА Дополнительные.ЧислоМесяцев = 0
	|				ТОГДА 1
	|			ИНАЧЕ Дополнительные.ЧислоМесяцев
	|		КОНЕЦ,
	|		0,
	|		Дополнительные.ПериодРегистрации,
	|		РасчетСреднегоЗаработка.НомерСтроки,
	|		РасчетСреднегоЗаработка.БазовыйПериодКонец,
	|		РасчетСреднегоЗаработка.БазовыйПериодНачало,
	|		ЕСТЬNULL(Дополнительные.БазовыйПериодНачало, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
	|		ЕСТЬNULL(Дополнительные.БазовыйПериодКонец, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
	|		NULL
	|	ИЗ
	|		РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
	|			ПО РасчетСреднегоЗаработка.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.Ссылка
	//vvv
	|			И РасчетСреднегоЗаработка.ВидРасчета В(&парамПоПремии)
	//
	|				И (СреднийЗаработокБазовыеВидыРасчета.ВидРасчета ССЫЛКА ПланВидовРасчета.ДополнительныеНачисленияОрганизаций)
	|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Дополнительные
	|			ПО (Дополнительные.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.ВидРасчета)
	|				И (НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ) <= РасчетСреднегоЗаработка.БазовыйПериодКонец)
	|				И (НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ) >= РасчетСреднегоЗаработка.БазовыйПериодНачало)
	//vvv
	|				И СреднийЗаработокБазовыеВидыРасчета.Ссылка В(&парамПоПремии)
	//
	|				И (Дополнительные.Сотрудник = РасчетСреднегоЗаработка.Сотрудник)
	|	ГДЕ
	|		РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
	//vvv
	|		И Дополнительные.Результат<>0
	//
	|		И РасчетСреднегоЗаработка.ВидРасчета В(&парамПоПремии)
	|	
	//vvv
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	//|	ВЫБРАТЬ
	////vvv
	////|		Основные.Результат,
	//|		Основные.Результат / ВЫБОР КОГДА Основные.ПериодРегистрации<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ,
	////
	//|		1,
	//|		0,
	//|		НАЧАЛОПЕРИОДА(Основные.ПериодДействияНачало,МЕСЯЦ),
	//|		РасчетСреднегоЗаработка.НомерСтроки,
	//|		РасчетСреднегоЗаработка.БазовыйПериодКонец,
	//|		РасчетСреднегоЗаработка.БазовыйПериодНачало,
	//|		ЕСТЬNULL(Основные.ПериодДействияНачало, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
	//|		ЕСТЬNULL(Основные.ПериодДействияКонец, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
	//|		NULL
	//|	ИЗ
	//|		РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	//|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
	//|			ПО РасчетСреднегоЗаработка.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.Ссылка
	//|				И РасчетСреднегоЗаработка.ВидРасчета В(&парамПоПремии)
	//|				И (СреднийЗаработокБазовыеВидыРасчета.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций)
	//|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основные
	//|			ПО (Основные.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.ВидРасчета)
	//|				И (НАЧАЛОПЕРИОДА(Основные.ПериодДействияКонец, МЕСЯЦ) <= РасчетСреднегоЗаработка.БазовыйПериодКонец)
	//|				И (НАЧАЛОПЕРИОДА(Основные.ПериодДействияНачало, МЕСЯЦ) >= РасчетСреднегоЗаработка.БазовыйПериодНачало)
	//|				И СреднийЗаработокБазовыеВидыРасчета.Ссылка В(&парамПоПремии)
	//|				И (Основные.Сотрудник = РасчетСреднегоЗаработка.Сотрудник)
	//|	ГДЕ
	//|		РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
	//|		И РасчетСреднегоЗаработка.ВидРасчета В(&парамПоПремии)
	//|		И Основные.Результат<>0
	//|		И (РасчетСреднегоЗаработка.Регистратор ССЫЛКА Документ.НачислениеПоБольничномуЛисту ИЛИ РасчетСреднегоЗаработка.Регистратор ССЫЛКА Документ.ОплатаПоСреднемуЗаработку)
	////	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	//vvv
	//|		Дополнительные.Результат,
	|		Дополнительные.Результат / ВЫБОР КОГДА Дополнительные.ПериодРегистрации<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ,
	//
	|		Дополнительные.ЧислоМесяцев,
	|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
	|		Дополнительные.ПериодРегистрации,
	|		РасчетСреднегоЗаработка.НомерСтроки,
	|		РасчетСреднегоЗаработка.БазовыйПериодНачало,
	|		РасчетСреднегоЗаработка.БазовыйПериодКонец,
	|		ЕСТЬNULL(Дополнительные.БазовыйПериодНачало, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
	|		ЕСТЬNULL(Дополнительные.БазовыйПериодКонец, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
	|		Дополнительные.ВидРасчета
	|	ИЗ
	|		РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
	|			ПО РасчетСреднегоЗаработка.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.Ссылка
	//vvv
	|				И РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремии)
	//
	|				И (СреднийЗаработокБазовыеВидыРасчета.ВидРасчета ССЫЛКА ПланВидовРасчета.ДополнительныеНачисленияОрганизаций)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Дополнительные
	|			ПО (Дополнительные.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.ВидРасчета)
	|				И (НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ) <= РасчетСреднегоЗаработка.БазовыйПериодКонец)
	|				И (НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ) >= РасчетСреднегоЗаработка.БазовыйПериодНачало)
	//vvv
	|				И СреднийЗаработокБазовыеВидыРасчета.Ссылка В(&парамПоГодовойПремии)
	//
	|				И (Дополнительные.Сотрудник = РасчетСреднегоЗаработка.Сотрудник)
	|	ГДЕ
	|		РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
	|		И РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремии)
	//vvv
	|		И Дополнительные.Результат<>0
	//
	|		И РасчетСреднегоЗаработка.СпособРасчета <> &парамПоСреднемеЗаработку
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	//vvv
	//|		БазаГодовыхПремий.Результат,
	|		БазаГодовыхПремий.Результат / ВЫБОР КОГДА БазаГодовыхПремий.ПериодРегистрации<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ,
	//
	|		БазаГодовыхПремий.ЧислоМесяцев,
	|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
	|		БазаГодовыхПремий.ПериодРегистрации,
	|		РасчетСреднегоЗаработка.НомерСтроки,
	|		ДОБАВИТЬКДАТЕ(РасчетСреднегоЗаработка.БазовыйПериодНачало, МЕСЯЦ, -БазаГодовыхПремий.ЧислоМесяцев),
	|		РасчетСреднегоЗаработка.БазовыйПериодКонец,
	|		БазаГодовыхПремий.БазовыйПериодНачало,
	|		БазаГодовыхПремий.БазовыйПериодКонец,
	|		БазаГодовыхПремий.ВидРасчета
	|	ИЗ
	|		РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТБазаГодовыхПремий КАК БазаГодовыхПремий
	|			ПО  РасчетСреднегоЗаработка.НомерСтроки = БазаГодовыхПремий.НомерСтроки
	|	ГДЕ
	|		РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
	|		И РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремии)
	|		И РасчетСреднегоЗаработка.СпособРасчета = &парамПоСреднемеЗаработку) КАК База
	|
	|СГРУППИРОВАТЬ ПО
	|	База.ЧислоМесяцев,
	|	База.ПериодРегистрацииРазрез,
	|	База.ПериодРасчетаСреднегоЗаработка,
	|	База.НомерСтроки,
	|	База.Начало,
	|	База.Конец,
	|	База.БПНачало,
	|	База.БПКонец
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	//vvv добавим левое соединение, т.к. если зарплаты не было, базы тоже, соотвественно данный период исключается, хотя в нем могут быть учитываемые календарные дни
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту") тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК МесяцВыборки,
		|	РасчетСреднегоЗаработка.НомерСтроки
		|ПОМЕСТИТЬ ВТПериодыДляМесяцевВыборки
		|ИЗ
		|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		ПО РасчетСреднегоЗаработка.БазовыйПериодНачало <= РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
		|			И РасчетСреднегоЗаработка.БазовыйПериодКонец >= РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
		|ГДЕ
		|	РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	База.РезультатБаза КАК РезультатБаза,
		|	База.ЧислоМесяцев,
		|	База.ПериодРасчетаСреднегоЗаработка,
		|	ПериодыДляМесяцевВыборки.МесяцВыборки КАК МесяцВыборки,
		|	ПериодыДляМесяцевВыборки.НомерСтроки КАК НомерСтроки,
		|	База.Начало,
		|	База.Конец,
		|	База.БПНачало,
		|	База.БПКонец
		|ИЗ
		|	ВТПериодыДляМесяцевВыборки КАК ПериодыДляМесяцевВыборки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЕСТЬNULL(СУММА(База.РезультатБаза), 0) КАК РезультатБаза,
		|			База.ЧислоМесяцев КАК ЧислоМесяцев,
		|			База.ПериодРасчетаСреднегоЗаработка КАК ПериодРасчетаСреднегоЗаработка,
		|			База.ПериодРегистрацииРазрез КАК МесяцВыборки,
		|			База.НомерСтроки КАК НомерСтроки,
		|			База.Начало КАК Начало,
		|			База.Конец КАК Конец,
		|			База.БПНачало КАК БПНачало,
		|			База.БПКонец КАК БПКонец
		|		ИЗ
		|			(ВЫБРАТЬ
		|				БазаОсновныеНачисления.РезультатБаза  / ВЫБОР КОГДА БазаОсновныеНачисления.ПериодРегистрацииРазрез<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РезультатБаза,
		|				1 КАК ЧислоМесяцев,
		|				0 КАК ПериодРасчетаСреднегоЗаработка,
		|				НАЧАЛОПЕРИОДА(БазаОсновныеНачисления.ПериодДействияРазрез,МЕСЯЦ) КАК ПериодРегистрацииРазрез,
		|				БазаОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|				NULL КАК Начало,
		|				NULL КАК Конец,
		|				NULL КАК БПНачало,
		|				NULL КАК БПКонец,
		|				NULL КАК Поле1
		|			ИЗ
		|				РегистрРасчета.РасчетСреднегоЗаработка.БазаОсновныеНачисленияРаботниковОрганизаций(
		|						&парамИзмерения,
		|						&парамИзмерения,
		|						&парамРазрезы,
		|						Регистратор = &парамРегистратор
		|							И ВидРасчета В (&парамЗаработок)) КАК БазаОсновныеНачисления
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				БазаДополнительныеНачисления.РезультатБаза / ВЫБОР КОГДА БазаДополнительныеНачисления.ПериодРегистрацииРазрез<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ,
		|				ВЫБОР
		|					КОГДА БазаДополнительныеНачисления.ЧислоМесяцевРазрез = 0
		|						ТОГДА 1
		|					ИНАЧЕ БазаДополнительныеНачисления.ЧислоМесяцевРазрез
		|				КОНЕЦ,
		|				0,
		|				НАЧАЛОПЕРИОДА(БазаДополнительныеНачисления.ПериодРегистрацииРазрез,МЕСЯЦ),
		|				БазаДополнительныеНачисления.НомерСтроки,
		|				NULL,
		|				NULL,
		|				NULL,
		|				NULL,
		|				NULL
		|			ИЗ
		|				РегистрРасчета.РасчетСреднегоЗаработка.БазаДополнительныеНачисленияРаботниковОрганизаций(
		|						&парамИзмерения,
		|						&парамИзмерения,
		|						&парамРазрезыДоп,
		|						Регистратор = &парамРегистратор
		|							И ВидРасчета В (&парамЗаработок)) КАК БазаДополнительныеНачисления
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				Дополнительные.Результат / ВЫБОР КОГДА Дополнительные.ПериодРегистрации<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ,
		|				ВЫБОР
		|					КОГДА Дополнительные.ЧислоМесяцев = 0
		|						ТОГДА 1
		|					ИНАЧЕ Дополнительные.ЧислоМесяцев
		|				КОНЕЦ,
		|				0,
		|				Дополнительные.ПериодРегистрации,
		|				РасчетСреднегоЗаработка.НомерСтроки,
		|				РасчетСреднегоЗаработка.БазовыйПериодКонец,
		|				РасчетСреднегоЗаработка.БазовыйПериодНачало,
		|				ЕСТЬNULL(Дополнительные.БазовыйПериодНачало, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
		|				ЕСТЬNULL(Дополнительные.БазовыйПериодКонец, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
		|				NULL
		|			ИЗ
		|				РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
		|					ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
		|					ПО РасчетСреднегоЗаработка.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.Ссылка
		|						И РасчетСреднегоЗаработка.ВидРасчета В(&парамПоПремии)
		|						И (СреднийЗаработокБазовыеВидыРасчета.ВидРасчета ССЫЛКА ПланВидовРасчета.ДополнительныеНачисленияОрганизаций)
		|					ПОЛНОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Дополнительные
		|					ПО (Дополнительные.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.ВидРасчета)
		|						И (НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ) <= РасчетСреднегоЗаработка.БазовыйПериодКонец)
		|						И (НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ) >= РасчетСреднегоЗаработка.БазовыйПериодНачало)
		//vvv
		|						И СреднийЗаработокБазовыеВидыРасчета.Ссылка В(&парамПоПремии)
		//
		|						И (Дополнительные.Сотрудник = РасчетСреднегоЗаработка.Сотрудник)
		|			ГДЕ
		|				РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
		|				И Дополнительные.Результат<>0
		|				И РасчетСреднегоЗаработка.ВидРасчета В(&парамПоПремии)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				Основные.Результат / ВЫБОР КОГДА Основные.ПериодРегистрации<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ,
		|				1,
		|				0,
		|				НАЧАЛОПЕРИОДА(Основные.ПериодДействияНачало, МЕСЯЦ),
		|				РасчетСреднегоЗаработка.НомерСтроки,
		|				РасчетСреднегоЗаработка.БазовыйПериодКонец,
		|				РасчетСреднегоЗаработка.БазовыйПериодНачало,
		|				ЕСТЬNULL(Основные.ПериодДействияНачало, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
		|				ЕСТЬNULL(Основные.ПериодДействияКонец, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
		|				NULL
		|			ИЗ
		|				РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
		|					ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
		|					ПО РасчетСреднегоЗаработка.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.Ссылка
		|						И РасчетСреднегоЗаработка.ВидРасчета В(&парамПоПремии)
		|						И (СреднийЗаработокБазовыеВидыРасчета.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций)
		|					ПОЛНОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основные
		|					ПО (Основные.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.ВидРасчета)
		|						И (НАЧАЛОПЕРИОДА(Основные.ПериодДействияКонец, МЕСЯЦ) <= РасчетСреднегоЗаработка.БазовыйПериодКонец)
		|						И (НАЧАЛОПЕРИОДА(Основные.ПериодДействияНачало, МЕСЯЦ) >= РасчетСреднегоЗаработка.БазовыйПериодНачало)
		|						И СреднийЗаработокБазовыеВидыРасчета.Ссылка В(&парамПоПремии)
		|						И (Основные.Сотрудник = РасчетСреднегоЗаработка.Сотрудник)
		|			ГДЕ
		|				РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
		|				И РасчетСреднегоЗаработка.ВидРасчета В(&парамПоПремии)
		|				И Основные.Результат<>0
		|				И (РасчетСреднегоЗаработка.Регистратор ССЫЛКА Документ.НачислениеПоБольничномуЛисту
		|						ИЛИ РасчетСреднегоЗаработка.Регистратор ССЫЛКА Документ.ОплатаПоСреднемуЗаработку)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				Дополнительные.Результат / ВЫБОР КОГДА Дополнительные.ПериодРегистрации<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ,
		|				Дополнительные.ЧислоМесяцев,
		|				РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
		|				Дополнительные.ПериодРегистрации,
		|				РасчетСреднегоЗаработка.НомерСтроки,
		|				РасчетСреднегоЗаработка.БазовыйПериодНачало,
		|				РасчетСреднегоЗаработка.БазовыйПериодКонец,
		|				ЕСТЬNULL(Дополнительные.БазовыйПериодНачало, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
		|				ЕСТЬNULL(Дополнительные.БазовыйПериодКонец, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
		|				Дополнительные.ВидРасчета
		|			ИЗ
		|				РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
		|					ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
		|					ПО РасчетСреднегоЗаработка.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.Ссылка
		|						И РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремии)
		|						И (СреднийЗаработокБазовыеВидыРасчета.ВидРасчета ССЫЛКА ПланВидовРасчета.ДополнительныеНачисленияОрганизаций)
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Дополнительные
		|					ПО (Дополнительные.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.ВидРасчета)
		|						И (НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ) <= РасчетСреднегоЗаработка.БазовыйПериодКонец)
		|						И (НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ) >= РасчетСреднегоЗаработка.БазовыйПериодНачало)
		|						И СреднийЗаработокБазовыеВидыРасчета.Ссылка В(&парамПоГодовойПремии)
		|						И (Дополнительные.Сотрудник = РасчетСреднегоЗаработка.Сотрудник)
		|			ГДЕ
		|				РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
		|				И РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремии)
		|				И Дополнительные.Результат<>0
		|				И РасчетСреднегоЗаработка.СпособРасчета <> &парамПоСреднемеЗаработку
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				БазаГодовыхПремий.Результат / ВЫБОР КОГДА БазаГодовыхПремий.ПериодРегистрации<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ,
		|				БазаГодовыхПремий.ЧислоМесяцев,
		|				РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
		|				БазаГодовыхПремий.ПериодРегистрации,
		|				РасчетСреднегоЗаработка.НомерСтроки,
		|				ДОБАВИТЬКДАТЕ(РасчетСреднегоЗаработка.БазовыйПериодНачало, МЕСЯЦ, -БазаГодовыхПремий.ЧислоМесяцев),
		|				РасчетСреднегоЗаработка.БазовыйПериодКонец,
		|				БазаГодовыхПремий.БазовыйПериодНачало,
		|				БазаГодовыхПремий.БазовыйПериодКонец,
		|				БазаГодовыхПремий.ВидРасчета
		|			ИЗ
		|				РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
		|					ЛЕВОЕ СОЕДИНЕНИЕ ВТБазаГодовыхПремий КАК БазаГодовыхПремий
		|					ПО РасчетСреднегоЗаработка.НомерСтроки = БазаГодовыхПремий.НомерСтроки
		|			ГДЕ
		|				РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
		|				И РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремии)
		|				И РасчетСреднегоЗаработка.СпособРасчета = &парамПоСреднемеЗаработку) КАК База
		|		
		|		СГРУППИРОВАТЬ ПО
		|			База.ЧислоМесяцев,
		|			База.ПериодРегистрацииРазрез,
		|			База.ПериодРасчетаСреднегоЗаработка,
		|			База.НомерСтроки,
		|			База.Начало,
		|			База.Конец,
		|			База.БПНачало,
		|			База.БПКонец) КАК База
		|		ПО (База.МесяцВыборки = ПериодыДляМесяцевВыборки.МесяцВыборки)
		|			И (База.НомерСтроки = ПериодыДляМесяцевВыборки.НомерСтроки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	КонецЕсли;
	//
	
	РезультатБаза = Запрос.Выполнить();
	ТаблицаМесяцев = РезультатБаза.Выгрузить();
	ТаблицаМесяцев.Свернуть("МесяцВыборки");

	ВыборкаБазы = РезультатБаза.Выбрать();
	
	ЗаписиДанныхДляСреднего =
	"ВЫБРАТЬ
	|	ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
	|	ЗаписиРасчетаСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ЗаписиРасчетаСреднего.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|	ЗаписиРасчетаСреднего.Сотрудник КАК Сотрудник,
	|	ЗаписиРасчетаСреднего.Организация КАК Организация,
	|	ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода КАК ДатаНачалаРасчетногоПериода,
	|	ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода КАК ДатаОкончанияРасчетногоПериода,
	|	ЗаписиРасчетаСреднего.ВидРасчета КАК ВидРасчета,
	|	ЗаписиРасчетаСреднего.СпособРасчета КАК СпособРасчета,
	|	ЗаписиРасчетаСреднего.МесяцВыборки
	|ИЗ
	|	РегистрРасчета.РасчетСреднегоЗаработка КАК ЗаписиРасчетаСреднего
	|ГДЕ
	|	ЗаписиРасчетаСреднего.Регистратор = &парамРегистратор
	|	И ЗаписиРасчетаСреднего.ВидРасчета В(&Заработок)";
	
	запросДоп = Новый запрос;
	ЗапросДоп.Текст = ЗаписиДанныхДляСреднего;
	Заработок = Новый Массив();
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
	ЗапросДоп.УстановитьПараметр("Заработок", Заработок);
	ЗапросДоп.УстановитьПараметр("парамРегистратор", Регистратор);
	
	// НормаПоШестидневке
	// Данные о норме дней по шестидневке
	// Поля:
	//		МесяцПериода,
	// 		ДнейПоШестидневке - суммируем
    //
	// Описание:
	//      выбираем из производсвенного календаря с сумированием ресурса Шестидневка
	//      условие - с начала периода расчета среднего заработка по конец периода
	//      группируем по номеру месяца
	//
	НормаПоШестидневкеТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК МесяцПериода,
	|	СУММА(ПроизводственныйКалендарь.Шестидневка) КАК ДнейПоШестидневке
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ГДЕ
	|	ПроизводственныйКалендарь.ДатаКалендаря >= &парамДатаС
	|	И ПроизводственныйКалендарь.ДатаКалендаря <= &парамДатаПо
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ)";
	
	
	Заработок = Новый Массив();
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
	Запрос.УстановитьПараметр("Заработок", Заработок);
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	СписокПростоев = Новый Массив();
	СписокПростоев.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь);
	СписокПростоев.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.БолезньБезОплаты);
	СписокПростоев.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск);	
	СписокПростоев.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение);	
	СписокПростоев.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам);	
	СписокПростоев.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком);	
	СписокПростоев.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск);	
	СписокПростоев.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый);
	СписокПростоев.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск);
	СписокПростоев.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботодателя);
	СписокПростоев.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству);
	СписокПростоев.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя);
	//vvv
	СписокПростоев.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоСемейноБытовым);
	СписокПростоев.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Донорство);
	//
    СписокПростоев.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам);
	
	Запрос.УстановитьПараметр("Невыходы", СписокПростоев);
	
	СписокОтпусков = Новый Массив();
    СписокОтпусков.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск);
	СписокОтпусков.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск);
    Запрос.УстановитьПараметр("Отпуска",СписокОтпусков);
	
	СписокУчитываемыхНевыходов = Новый Массив();
	СписокУчитываемыхНевыходов.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Прогулы);
	//vvv
	СписокУчитываемыхНевыходов.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.СреднийЗаработок);
	//vvv командировку не будем зачитыватьв норму при расчете оплаты по среднему
	Если ТипЗнч(Регистратор) <> Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку") тогда
		СписокУчитываемыхНевыходов.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Командировка);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЭтоБольничный",ТипЗнч(Регистратор)=ТИп("ДокументСсылка.НачислениеПоБольничномуЛисту"));
	Запрос.УстановитьПараметр("ЭтоОплатаПоСреднему",ТипЗнч(Регистратор)=ТИп("ДокументСсылка.ОплатаПоСреднемуЗаработку"));
	//
	
    Запрос.УстановитьПараметр("СписокУчитываемыхНевыходов",СписокУчитываемыхНевыходов);
	Запрос.УстановитьПараметр("Прогул",Справочники.КлассификаторИспользованияРабочегоВремени.Прогулы);

	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
	|	ЗаписиРасчетаСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ЗаписиРасчетаСреднего.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|	ЗаписиРасчетаСреднего.Сотрудник КАК Сотрудник,
	|	ЗаписиРасчетаСреднего.Организация КАК Организация,
	|	ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода КАК ДатаНачалаРасчетногоПериода,
	|	ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода КАК ДатаОкончанияРасчетногоПериода,
	|	ЗаписиРасчетаСреднего.ВидРасчета КАК ВидРасчета,
	|	ЗаписиРасчетаСреднего.СпособРасчета КАК СпособРасчета,
	|	ЗаписиРасчетаСреднего.МесяцВыборки,
	|	ЗаписиРасчетаСреднего.ПериодРегистрации,
	|	ЗаписиРасчетаСреднего.ДатаНачалаСобытия
	|ПОМЕСТИТЬ ВТЗаписиРасчетаСреднего
	|ИЗ
	|	РегистрРасчета.РасчетСреднегоЗаработка КАК ЗаписиРасчетаСреднего
	|ГДЕ
	|	ЗаписиРасчетаСреднего.Регистратор = &парамРегистратор
	|	И ЗаписиРасчетаСреднего.ВидРасчета В(&Заработок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.Период КАК ДатаПриема,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник
	|ПОМЕСТИТЬ ВТДатаПриема
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			,
	|			Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТЗаписиРасчетаСреднего.Сотрудник
	|					ИЗ
	|						ВТЗаписиРасчетаСреднего КАК ВТЗаписиРасчетаСреднего)
	|				И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)) КАК РаботникиОрганизацийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Основные.ПериодДействияНачало,
	|	Основные.ПериодДействияКонец,
	|	Основные.Сотрудник КАК Сотрудник,
	|	Основные.ГрафикРаботы КАК ГрафикРаботы,
	|	Основные.ВидРасчета,
	|	Основные.Сторно
	|ПОМЕСТИТЬ ВТФактическиеПериодыДействия
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия() КАК Основные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиРасчетаСреднего КАК ЗаписиРасчетаСреднего
	|		ПО Основные.Сотрудник = ЗаписиРасчетаСреднего.Сотрудник
	|			И Основные.ПериодДействияНачало >= ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода
	|			И (Основные.ПериодДействияКонец <= КОНЕЦПЕРИОДА(ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода, ДЕНЬ))
	//vvv
	//|			И (Основные.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное)))
	//добавляем ЧасовоеНеотработанное, т.к. не работают почасовые отклонения (ниже есть запрос к таблице ВТФактическиеПериодыДействия по условию ЧасовоеНеотработанное, соответственно
	//если не добавить - запрос всегда пустой
	|			И (Основные.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное),ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ФактическиеПериодыДействия.ПериодДействияНачало = ВТДатаПриема.ДатаПриема
	|			ТОГДА НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ)
	|		ИНАЧЕ ФактическиеПериодыДействия.ПериодДействияНачало
	|	КОНЕЦ КАК ПериодДействияНачало,
	|	ФактическиеПериодыДействия.ПериодДействияКонец,
	|	ФактическиеПериодыДействия.Сотрудник КАК Сотрудник,
	|	ФактическиеПериодыДействия.ГрафикРаботы КАК ГрафикРаботы,
	|	ФактическиеПериодыДействия.ВидРасчета,
	|	ФактическиеПериодыДействия.Сторно
	|ПОМЕСТИТЬ ВТФактическиеПериодыДействияДляНормы
	|ИЗ
	|	ВТФактическиеПериодыДействия КАК ФактическиеПериодыДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатаПриема КАК ВТДатаПриема
	|		ПО ФактическиеПериодыДействия.Сотрудник = ВТДатаПриема.Сотрудник
	//vvv добавим условие, чтобы внутрисменные отклонения не брались для учеты нормы, т.к. они не вытесняют целодневные
	|ГДЕ
	|	ФактическиеПериодыДействия.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное))
	//
	|;
	|
	//vvv
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеПериодыДействияДляНормы.ПериодДействияНачало,
	|	ФактическиеПериодыДействияДляНормы.ПериодДействияКонец,
	|	ФактическиеПериодыДействияДляНормы.Сотрудник КАК Сотрудник,
	|	ФактическиеПериодыДействияДляНормы.ГрафикРаботы КАК ГрафикРаботы,
	|	ФактическиеПериодыДействияДляНормы.ВидРасчета,
	|	ФактическиеПериодыДействияДляНормы.Сторно,
	|	РаботникиОрганизаций.ГрафикРаботы КАК ГрафикРаботыСотрудника
	|ПОМЕСТИТЬ ВТФактическиеПериодыДействияДляНормыСГрафиком
	|ИЗ
	|(ВЫБРАТЬ
	|	ФактическиеПериодыДействияДляНормы.ПериодДействияНачало,
	|	ФактическиеПериодыДействияДляНормы.ПериодДействияКонец,
	|	ФактическиеПериодыДействияДляНормы.Сотрудник КАК Сотрудник,
	|	ФактическиеПериодыДействияДляНормы.ГрафикРаботы КАК ГрафикРаботы,
	|	ФактическиеПериодыДействияДляНормы.ВидРасчета,
	|	ФактическиеПериодыДействияДляНормы.Сторно,
	|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК ПериодРаботника
	|ИЗ
	|	ВТФактическиеПериодыДействияДляНормы КАК ФактическиеПериодыДействияДляНормы
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО РаботникиОрганизаций.Сотрудник=ФактическиеПериодыДействияДляНормы.Сотрудник
	|		И РаботникиОрганизаций.Период<=ФактическиеПериодыДействияДляНормы.ПериодДействияКонец
	|	СГРУППИРОВАТЬ ПО 
	|	ФактическиеПериодыДействияДляНормы.ПериодДействияНачало,
	|	ФактическиеПериодыДействияДляНормы.ПериодДействияКонец,
	|	ФактическиеПериодыДействияДляНормы.Сотрудник,
	|	ФактическиеПериодыДействияДляНормы.ГрафикРаботы,
	|	ФактическиеПериодыДействияДляНормы.ВидРасчета,
	|	ФактическиеПериодыДействияДляНормы.Сторно) КАК ФактическиеПериодыДействияДляНормы
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО РаботникиОрганизаций.Сотрудник=ФактическиеПериодыДействияДляНормы.Сотрудник
	|;
	//
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Основные.ПериодДействияНачало,
	|	Основные.ПериодДействияКонец,
	|	Основные.Сотрудник КАК Сотрудник,
	|	Основные.ГрафикРаботы КАК ГрафикРаботы,
	|	Основные.ВидРасчета,
	|	Основные.Сторно
	|ПОМЕСТИТЬ ВТФактическиеПериодыДействияОтпуска
	|ИЗ
	|	ВТФактическиеПериодыДействия КАК Основные
	|ГДЕ
	|	Основные.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В(&Отпуска)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ) КАК Месяц,
	//vvv
	|	ФактическиеПериодыДействия.Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ФактическиеПериодыДействия.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
	//vvv
	//|					ИЛИ ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&СписокУчитываемыхНевыходов)	
	|					ИЛИ (ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.УчитыватьКакРабочееВремяДляСреднего И НЕ &ЭтоОплатаПоСреднему)
	|					ИЛИ (ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.УчитыватьКакРабочееВремяДляСреднего И &ЭтоОплатаПоСреднему И ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени<>ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка))
	|					ИЛИ ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДниЗаРанееОтработанноеВремя)
	//
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ФактическиеПериодыДействия.Сторно
	|						ТОГДА -ОтработаноПоГрафику.ПроизводственныйКалендарьКалендарныеДни
	|					ИНАЧЕ ОтработаноПоГрафику.ПроизводственныйКалендарьКалендарныеДни
	|				КОНЕЦ
	|		КОНЕЦ) КАК ОтработаноКалендарныхДнейВНевыходах,
	|	СУММА(ВЫБОР
	|			КОГДА ФактическиеПериодыДействия.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
	//vvv
	//|					ИЛИ ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&СписокУчитываемыхНевыходов)
	|					ИЛИ (ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.УчитыватьКакРабочееВремяДляСреднего И НЕ &ЭтоОплатаПоСреднему)
	|					ИЛИ (ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.УчитыватьКакРабочееВремяДляСреднего И &ЭтоОплатаПоСреднему И ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени<>ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка))
	|					ИЛИ ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДниЗаРанееОтработанноеВремя)
	//
	|				ТОГДА ВЫБОР
	|						КОГДА ФактическиеПериодыДействия.Сторно
	|							ТОГДА -ОтработаноПоГрафику.ПроизводственныйКалендарьКалендарныеДни
	|						ИНАЧЕ ОтработаноПоГрафику.ПроизводственныйКалендарьКалендарныеДни
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтработаноКалендарныхДней
	//
	//vvv комментируем, добавим условие по каким видам расчета суммировать (см. выше)
	//|	СУММА(ВЫБОР
	//|			КОГДА ФактическиеПериодыДействия.Сторно
	//|				ТОГДА -ОтработаноПоГрафику.ПроизводственныйКалендарьКалендарныеДни
	//|			ИНАЧЕ ОтработаноПоГрафику.ПроизводственныйКалендарьКалендарныеДни
	//|		КОНЕЦ) КАК ОтработаноКалендарныхДней
	//
	|ПОМЕСТИТЬ ВТКалендарныеДни
	|ИЗ
	|	ВТФактическиеПериодыДействия КАК ФактическиеПериодыДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ОтработаноПоГрафику
	|		ПО ФактическиеПериодыДействия.ГрафикРаботы = ОтработаноПоГрафику.ГрафикРаботы
	|			И ФактическиеПериодыДействия.ПериодДействияНачало <= ОтработаноПоГрафику.Дата
	|			И ФактическиеПериодыДействия.ПериодДействияКонец >= ОтработаноПоГрафику.Дата
	//vvv комментируем, это условие добавим при суммировании значений, чтобы считать календарные дни также и отклонений
	//|			И (ФактическиеПериодыДействия.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
	//|				ИЛИ ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&СписокУчитываемыхНевыходов))
	//
	|			И (ОтработаноПоГрафику.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	//vvv добавим условие, т.к. в противном случае,если введен индивидуальный график задваивалось кол-во календарных дней
	//комментируем, эта ошибка может возникать когда табель проводится без графика..
	//|			И ((ОтработаноПоГрафику.План И ОтработаноПоГрафику.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы) ИЛИ (НЕ ОтработаноПоГрафику.План))
	//
	|
	|СГРУППИРОВАТЬ ПО
	//vvv
	|	ФактическиеПериодыДействия.Сотрудник,
	//
	|	НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПраздничныеДни.Месяц,
	//vvv
	|	ПраздничныеДни.Сотрудник,
	|	СУММА(ПраздничныеДни.ПраздничныхДнейВНевыходах) КАК ПраздничныхДнейВНевыходах,
	//
	|	СУММА(ПраздничныеДни.ПраздничныхДней) КАК ПраздничныхДней
	|ПОМЕСТИТЬ ВТПраздники
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ) КАК Месяц,
	//vvv
	|		ФактическиеПериодыДействия.Сотрудник КАК Сотрудник,
	|		СУММА(ВЫБОР
	|				КОГДА ФактическиеПериодыДействия.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
	//vvv
	//|						ИЛИ ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&СписокУчитываемыхНевыходов, &Отпуска)
	|						ИЛИ ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&Отпуска)
	|					ИЛИ (ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.УчитыватьКакРабочееВремяДляСреднего И НЕ &ЭтоОплатаПоСреднему)
	|					ИЛИ (ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.УчитыватьКакРабочееВремяДляСреднего И &ЭтоОплатаПоСреднему И ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени<>ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка))
	//
	|					ТОГДА 0
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ФактическиеПериодыДействия.Сторно
	|							ТОГДА -1
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			КОНЕЦ) КАК ПраздничныхДнейВНевыходах,
	|		СУММА(ВЫБОР
	|				КОГДА ФактическиеПериодыДействия.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
	//vvv
	//|						ИЛИ ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&СписокУчитываемыхНевыходов, &Отпуска)
	|						ИЛИ ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&Отпуска)
	|					ИЛИ (ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.УчитыватьКакРабочееВремяДляСреднего И НЕ &ЭтоОплатаПоСреднему)
	|					ИЛИ (ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.УчитыватьКакРабочееВремяДляСреднего И &ЭтоОплатаПоСреднему И ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени<>ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка))
	//
	|					ТОГДА ВЫБОР
	|							КОГДА ФактическиеПериодыДействия.Сторно
	|								ТОГДА -1
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ПраздничныхДней
	//
	//vvv комментируем, добавим условие
	//|		СУММА(ВЫБОР
	//|				КОГДА ФактическиеПериодыДействия.Сторно
	//|					ТОГДА -1
	//|				ИНАЧЕ 1
	//|			КОНЕЦ) КАК ПраздничныхДней
	|	ИЗ
	|		ВТФактическиеПериодыДействия КАК ФактическиеПериодыДействия
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|			ПО ФактическиеПериодыДействия.ПериодДействияНачало <= РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|				И ФактическиеПериодыДействия.ПериодДействияКонец >= РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	//vvv комментируем условие по той же причине, что и выше
	//|				И (ФактическиеПериодыДействия.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
	//|					ИЛИ ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&СписокУчитываемыхНевыходов, &Отпуска))
	|	ГДЕ
	|		РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	|	
	|	СГРУППИРОВАТЬ ПО
	//vvv
	|		ФактическиеПериодыДействия.Сотрудник,
	//
	|		НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ)) КАК ПраздничныеДни
	|
	|СГРУППИРОВАТЬ ПО
	//vvv
	|	ПраздничныеДни.Сотрудник,
	//
	|	ПраздничныеДни.Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Месяц,
	//vvv
	|	ВложенныйЗапрос.Сотрудник,
	|	СУММА(ВложенныйЗапрос.ПраздничныхДнейВНевыходах) КАК ОтработаноКалендарныхДнейВНевыходах,
	//
	|	СУММА(ВложенныйЗапрос.ПраздничныхДней) КАК ОтработаноКалендарныхДней
	|ПОМЕСТИТЬ ВТКалендарныеДниСПраздниками	
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТКалендарныеДни.Месяц КАК Месяц,
	//vvv
	|		ВТКалендарныеДни.Сотрудник КАК Сотрудник,
	|		ВТКалендарныеДни.ОтработаноКалендарныхДнейВНевыходах КАК ПраздничныхДнейВНевыходах,
	//
	|		ВТКалендарныеДни.ОтработаноКалендарныхДней КАК ПраздничныхДней
	|	ИЗ
	|		ВТКалендарныеДни КАК ВТКалендарныеДни
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТПраздники.Месяц,
	//vvv
	|		ВТПраздники.Сотрудник,
	|		СУММА(ВТПраздники.ПраздничныхДнейВНевыходах),
	//
	|		СУММА(ВТПраздники.ПраздничныхДней)
	|	ИЗ
	|		ВТПраздники КАК ВТПраздники
	|	
	|	СГРУППИРОВАТЬ ПО
	//vvv
	|		ВТПраздники.Сотрудник,
	//
	|		ВТПраздники.Месяц) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	//vvv
	|	ВложенныйЗапрос.Сотрудник,
	//
	|	ВложенныйЗапрос.Месяц
//конец 1с-минск
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ФактическиеПериодыДействия.Сторно
	|				ТОГДА -ОтработаноПоГрафику.ОсновноеЗначение
	|			ИНАЧЕ ОтработаноПоГрафику.ОсновноеЗначение
	|		КОНЕЦ) КАК ОтработаноДней,
	|	СУММА(ВЫБОР
	|			КОГДА ФактическиеПериодыДействия.Сторно
	|				ТОГДА -ОтработаноПоГрафику.ДополнительноеЗначение
	|			ИНАЧЕ ОтработаноПоГрафику.ДополнительноеЗначение
	|		КОНЕЦ) КАК ОтработаноЧасов,
	|	ФактическиеПериодыДействия.Сотрудник КАК Сотрудник,
	|	ОтработаноПоГрафику.Месяц КАК Месяц
	|ПОМЕСТИТЬ ВТОтработанноПоГрафику
	|ИЗ
	|	ВТФактическиеПериодыДействия КАК ФактическиеПериодыДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ОтработаноПоГрафику
	|		ПО ФактическиеПериодыДействия.ГрафикРаботы = ОтработаноПоГрафику.ГрафикРаботы
	|			И ФактическиеПериодыДействия.ПериодДействияНачало <= ОтработаноПоГрафику.Дата
	|			И ФактическиеПериодыДействия.ПериодДействияКонец >= ОтработаноПоГрафику.Дата
	|			И (ФактическиеПериодыДействия.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
	//vvv
	//|				ИЛИ ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&СписокУчитываемыхНевыходов))
	|					ИЛИ (ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.УчитыватьКакРабочееВремяДляСреднего И НЕ &ЭтоОплатаПоСреднему)
	|					ИЛИ (ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.УчитыватьКакРабочееВремяДляСреднего И &ЭтоОплатаПоСреднему И ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени<>ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка)))
	//
	|			И (ОтработаноПоГрафику.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|
	|СГРУППИРОВАТЬ ПО
	//vvv
	|	ФактическиеПериодыДействия.Сотрудник,
	//
	|	ОтработаноПоГрафику.Месяц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц
	|;
	//vvv
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ФактическиеПериодыДействия.Сторно
	|				ТОГДА -ОтработаноПоГрафику.ОсновноеЗначение
	|			ИНАЧЕ ОтработаноПоГрафику.ОсновноеЗначение
	|		КОНЕЦ) КАК ОтработаноДней,
	|	СУММА(ВЫБОР
	|			КОГДА ФактическиеПериодыДействия.Сторно
	|				ТОГДА -ОтработаноПоГрафику.ДополнительноеЗначение
	|			ИНАЧЕ ОтработаноПоГрафику.ДополнительноеЗначение
	|		КОНЕЦ) КАК ОтработаноЧасов,
	|	ФактическиеПериодыДействия.Сотрудник КАК Сотрудник,
	|	ОтработаноПоГрафику.Месяц КАК Месяц
	|ПОМЕСТИТЬ ВТКомандировки
	|ИЗ
	|	ВТФактическиеПериодыДействия КАК ФактическиеПериодыДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ОтработаноПоГрафику
	|		ПО ФактическиеПериодыДействия.ГрафикРаботы = ОтработаноПоГрафику.ГрафикРаботы
	|			И ФактическиеПериодыДействия.ПериодДействияНачало <= ОтработаноПоГрафику.Дата
	|			И ФактическиеПериодыДействия.ПериодДействияКонец >= ОтработаноПоГрафику.Дата
	|			И &ЭтоБольничный
	|			И (ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка))
	|			И (ОтработаноПоГрафику.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|
	|СГРУППИРОВАТЬ ПО
	|	ФактическиеПериодыДействия.Сотрудник,
	|	ОтработаноПоГрафику.Месяц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц
	|;
	//
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА ФактическиеПериодыДействия.Сторно
	|				ТОГДА -ОтработаноПоГрафику.ОсновноеЗначениеНорма
	|			ИНАЧЕ ОтработаноПоГрафику.ОсновноеЗначениеНорма
	|		КОНЕЦ) КАК НормаДней,
	|	СУММА(ВЫБОР
	|			КОГДА ФактическиеПериодыДействия.Сторно
	|				ТОГДА -ОтработаноПоГрафику.ДополнительноеЗначениеНорма
	|			ИНАЧЕ ОтработаноПоГрафику.ДополнительноеЗначениеНорма
	|		КОНЕЦ) КАК НормаЧасов,
	|	СУММА(ВЫБОР
	|			КОГДА ФактическиеПериодыДействия.Сторно
	|				ТОГДА -ОтработаноПоГрафику.ОсновноеЗначение
	|			ИНАЧЕ ОтработаноПоГрафику.ОсновноеЗначение
	|		КОНЕЦ) КАК НормаДнейПоГрафику,
	|	СУММА(ВЫБОР
	|			КОГДА ФактическиеПериодыДействия.Сторно
	|				ТОГДА -ОтработаноПоГрафику.ДополнительноеЗначение
	|			ИНАЧЕ ОтработаноПоГрафику.ДополнительноеЗначение
	|		КОНЕЦ) КАК НормаЧасовПоГрафику,
	//vvv
	|	СУММА(ОтработаноПоГрафику.ПроизводственныйКалендарьКалендарныеДни) КАК ОтработаноКалендарныхДней,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало,МЕСЯЦ),КОНЕЦПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало,МЕСЯЦ),ДЕНЬ)+1 КАК КалендарныхДнейВМесяце,
	|	ФактическиеПериодыДействия.Сотрудник КАК Сотрудник,
	//
	|	ОтработаноПоГрафику.Месяц КАК Месяц
	|ПОМЕСТИТЬ ВТНормаПоГрафику
	|ИЗ
	|	ВТФактическиеПериодыДействияДляНормы КАК ФактическиеПериодыДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ОтработаноПоГрафику
	|		ПО ФактическиеПериодыДействия.ГрафикРаботы = ОтработаноПоГрафику.ГрафикРаботы
	|			И ФактическиеПериодыДействия.ПериодДействияНачало <= ОтработаноПоГрафику.Дата
	|			И ФактическиеПериодыДействия.ПериодДействияКонец >= ОтработаноПоГрафику.Дата
	|			И (ОтработаноПоГрафику.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|
	|СГРУППИРОВАТЬ ПО
	//vvv
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало,МЕСЯЦ),КОНЕЦПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало,МЕСЯЦ),ДЕНЬ)+1,
	|	ФактическиеПериодыДействия.Сотрудник,
	//
	|	ОтработаноПоГрафику.Месяц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц
	|;
	|
	//vvv
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА ФактическиеПериодыДействия.Сторно
	|				ТОГДА -ОтработаноПоГрафику.ОсновноеЗначениеНорма
	|			ИНАЧЕ ОтработаноПоГрафику.ОсновноеЗначениеНорма
	|		КОНЕЦ) КАК НормаДней,
	|	СУММА(ВЫБОР
	|			КОГДА ФактическиеПериодыДействия.Сторно
	|				ТОГДА -ОтработаноПоГрафику.ДополнительноеЗначениеНорма
	|			ИНАЧЕ ОтработаноПоГрафику.ДополнительноеЗначениеНорма
	|		КОНЕЦ) КАК НормаЧасов,
	//vvv
	|	ФактическиеПериодыДействия.Сотрудник КАК Сотрудник,
	//
	|	ОтработаноПоГрафику.Месяц КАК Месяц
	|ПОМЕСТИТЬ ВТНормаПоГрафикуСотрудника
	|ИЗ
	|	ВТФактическиеПериодыДействияДляНормыСГрафиком КАК ФактическиеПериодыДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ОтработаноПоГрафику
	|		ПО ФактическиеПериодыДействия.ГрафикРаботыСотрудника = ОтработаноПоГрафику.ГрафикРаботы
	|			И ФактическиеПериодыДействия.ПериодДействияНачало <= ОтработаноПоГрафику.Дата
	|			И ФактическиеПериодыДействия.ПериодДействияКонец >= ОтработаноПоГрафику.Дата
	|			И (ОтработаноПоГрафику.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|
	|СГРУППИРОВАТЬ ПО
	//vvv
	|	ФактическиеПериодыДействия.Сотрудник,
	//
	|	ОтработаноПоГрафику.Месяц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц
	|;
	//
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Основные.ПериодДействияНачало, МЕСЯЦ) КАК Месяц,
	//vvv
	|	Основные.Сотрудник КАК Сотрудник,
	//
	|	СУММА(Основные.ОтработаноДней) КАК СверхНормыДней,
	|	СУММА(Основные.ОтработаноЧасов) КАК СверхНормыЧасов
	|ПОМЕСТИТЬ ВТОтработаноСверхНормы
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиРасчетаСреднего КАК ЗаписиРасчетаСреднего
	|		ПО Основные.Сотрудник = ЗаписиРасчетаСреднего.Сотрудник
	|			И Основные.ПериодДействияНачало >= ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода
	|			И (Основные.ПериодДействияКонец <= КОНЕЦПЕРИОДА(ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода, ДЕНЬ))
	|			И (Основные.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы))
	|
	|СГРУППИРОВАТЬ ПО
	//vvv
	|	Основные.Сотрудник,
	//
	|	НАЧАЛОПЕРИОДА(Основные.ПериодДействияНачало, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Основные.ПериодДействияНачало, МЕСЯЦ) КАК Месяц,
	//vvv
	|	Основные.Сотрудник КАК Сотрудник,
	//
	|	СУММА(Основные.ОтработаноДней) КАК ОтработаноДнейЗаМесяц,
	|	СУММА(Основные.ОтработаноЧасов) КАК ОтработаноЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТОтработаноЗаМесяц
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиРасчетаСреднего КАК ЗаписиРасчетаСреднего
	|		ПО Основные.Сотрудник = ЗаписиРасчетаСреднего.Сотрудник
	|			И (Основные.ПериодДействияНачало >= НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода, МЕСЯЦ))
	|			И (Основные.ПериодДействияКонец <= КОНЕЦПЕРИОДА(ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода, МЕСЯЦ))
	|			И (Основные.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)))
	|
	|СГРУППИРОВАТЬ ПО
	//vvv
	|	Основные.Сотрудник,
	//
	|	НАЧАЛОПЕРИОДА(Основные.ПериодДействияНачало, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Основные.ПериодДействияНачало, МЕСЯЦ) КАК Месяц,
	|	Основные.Сотрудник КАК Сотрудник,
	|	1 КАК НаличиеПростоев
	|ПОМЕСТИТЬ ВТНаличиеНевыходов
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиРасчетаСреднего КАК ЗаписиРасчетаСреднего
	|		ПО Основные.Сотрудник = ЗаписиРасчетаСреднего.Сотрудник
	|			И Основные.ПериодДействияНачало >= ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода
	|			И (Основные.ПериодДействияКонец <= КОНЕЦПЕРИОДА(ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода, ДЕНЬ))
	//vvv добавляем признак, чтобы можно было его устанавливать для непредопределенных элементов
	//|			И (Основные.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&Невыходы))
	|			И ((Основные.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&Невыходы)) ИЛИ (Основные.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.УчитыватьКакНевыходПриРасчетеОтпуска))
	//
	|
	|СГРУППИРОВАТЬ ПО
	//vvv
	|	Основные.Сотрудник,
	//
	|	НАЧАЛОПЕРИОДА(Основные.ПериодДействияНачало, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВнутрисменноеВремяРаботниковОрганизаций.Часов) КАК ВнутрисменныеЧасыОтклонение,
	//vvv
	|	ВнутрисменноеВремяРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	//
	|	НАЧАЛОПЕРИОДА(ВнутрисменноеВремяРаботниковОрганизаций.Период, МЕСЯЦ) КАК Месяц
	|ПОМЕСТИТЬ ВТВнутрисменныеЧасы
	|ИЗ
	|	ВТФактическиеПериодыДействия КАК ФактическиеПериодыДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВнутрисменноеВремяРаботниковОрганизаций КАК ВнутрисменноеВремяРаботниковОрганизаций
	|		ПО ФактическиеПериодыДействия.Сотрудник = ВнутрисменноеВремяРаботниковОрганизаций.Сотрудник
	|			И ФактическиеПериодыДействия.ПериодДействияНачало <= ВнутрисменноеВремяРаботниковОрганизаций.Период
	|			И ФактическиеПериодыДействия.ПериодДействияКонец >= ВнутрисменноеВремяРаботниковОрганизаций.Период
	|			И (ФактическиеПериодыДействия.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное)))
	|
	|СГРУППИРОВАТЬ ПО
	//vvv
	|	ВнутрисменноеВремяРаботниковОрганизаций.Сотрудник,
	//
	|	НАЧАЛОПЕРИОДА(ВнутрисменноеВремяРаботниковОрганизаций.Период, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц
	|;
	//vvv
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР КОГДА НЕ ВнутрисменноеВремяРаботниковОрганизаций.Период ЕСТЬ NULL И ВнутрисменноеВремяРаботниковОрганизаций.НеУчитыватьКалДни ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ВнутрисменныеЧасыОтклонение,
	|	ВнутрисменноеВремяРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(ВнутрисменноеВремяРаботниковОрганизаций.Период, МЕСЯЦ) КАК Месяц
	|ПОМЕСТИТЬ ВТВнутрисменныеЧасыДни
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ФактическиеПериодыДействия.Сотрудник,
	|		ФактическиеПериодыДействия.ПериодДействияНачало,
	|       ФактическиеПериодыДействия.ПериодДействияКонец
	|		ИЗ
	|			ВТФактическиеПериодыДействия КАК ФактическиеПериодыДействия
	|		ГДЕ
	|			ФактическиеПериодыДействия.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное))) КАК ФактическиеПериодыДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ (	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								ВнутрисменноеВремяРаботниковОрганизаций.Сотрудник,
	|								УчетнаяПолитика.НеУчитыватьКалендарныеДниСВнутрисменнымОтклонениемДляСреднего КАК НеУчитыватьКалДни,
	|								ВнутрисменноеВремяРаботниковОрганизаций.Период
	|						  	ИЗ
	|								РегистрНакопления.ВнутрисменноеВремяРаботниковОрганизаций КАК ВнутрисменноеВремяРаботниковОрганизаций
	|									ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций КАК УчетнаяПолитика
	|										ПО УчетнаяПолитика.Организация=ВнутрисменноеВремяРаботниковОрганизаций.Сотрудник.Организация) КАК ВнутрисменноеВремяРаботниковОрганизаций
	|		ПО ФактическиеПериодыДействия.Сотрудник = ВнутрисменноеВремяРаботниковОрганизаций.Сотрудник
	|			И ФактическиеПериодыДействия.ПериодДействияНачало <= ВнутрисменноеВремяРаботниковОрганизаций.Период
	|			И ФактическиеПериодыДействия.ПериодДействияКонец >= ВнутрисменноеВремяРаботниковОрганизаций.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВнутрисменноеВремяРаботниковОрганизаций.Сотрудник,
	|	НАЧАЛОПЕРИОДА(ВнутрисменноеВремяРаботниковОрганизаций.Период, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ) КАК Месяц,
	//vvv
	|	ОтработанноеВремя.Сотрудник КАК Сотрудник,
	//
	|	СУММА(ОтработанноеВремя.Дней) КАК ДнейПоТабелю,
	|	СУММА(ОтработанноеВремя.Часов) КАК ЧасовПоТабелю
	|ПОМЕСТИТЬ ВТВремяВведенноеВЦеломЗаПериод
	|ИЗ
	//vvv берем различные виды расчетов из фактического периода, т.к. если было вытеснение (например учеба, больничный) сумма часов увеличивалась во столько раз, сколько было
	//вытеснений
	//|	ВТФактическиеПериодыДействия КАК ФактическиеПериодыДействия
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ФактическиеПериодыДействия.Сотрудник,
	|       НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ) КАК ПериодДействияНачало,
	|       ФактическиеПериодыДействия.ВидРасчета КАК ВидРасчета
	|		ИЗ ВТФактическиеПериодыДействия КАК ФактическиеПериодыДействия) КАК ФактическиеПериодыДействия
	//
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработанноеВремя
	|		ПО ФактическиеПериодыДействия.Сотрудник = ОтработанноеВремя.Сотрудник
	|			И (НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ) = ОтработанноеВремя.Период)
	|			И ФактическиеПериодыДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
	|			И (ОтработанноеВремя.ВЦеломЗаПериод)
	|
	|СГРУППИРОВАТЬ ПО
	//vvv
	|	ОтработанноеВремя.Сотрудник,
	//
	|	НАЧАЛОПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ) КАК Месяцвыборки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ДнейПоТабелю, 0) = 0
	|			ТОГДА ЕСТЬNULL(ОтработанноПоГрафику.ОтработаноДней, 0)
	|		ИНАЧЕ ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ДнейПоТабелю, 0)
	|	КОНЕЦ КАК ФактическиОтработаноДней,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ЧасовПоТабелю, 0) = 0
	|			ТОГДА ЕСТЬNULL(ОтработанноПоГрафику.ОтработаноЧасов, 0)
	|		ИНАЧЕ ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ЧасовПоТабелю, 0)
	|	КОНЕЦ - ЕСТЬNULL(ВнутрисменныеЧасы.ВнутрисменныеЧасыОтклонение, 0) КАК ФактическиОтработаноЧасов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ДнейПоТабелю, 0) = 0
	|			ТОГДА ЕСТЬNULL(ОтработанноПоГрафику.ОтработаноДней, 0)
	|		ИНАЧЕ ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ДнейПоТабелю, 0)
	|	КОНЕЦ + ЕСТЬNULL(ОтработаноСверхНормы.СверхНормыДней, 0) КАК ОтработаноДней,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ЧасовПоТабелю, 0) = 0
	|			ТОГДА ЕСТЬNULL(ОтработанноПоГрафику.ОтработаноЧасов, 0)
	|		ИНАЧЕ ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ЧасовПоТабелю, 0)
	|	КОНЕЦ + ЕСТЬNULL(ОтработаноСверхНормы.СверхНормыЧасов, 0) - ЕСТЬNULL(ВнутрисменныеЧасы.ВнутрисменныеЧасыОтклонение, 0) КАК ОтработаноЧасов,
	//vvv комментируем, если календарные дни не удается вычислить при помощи фактических периодов действия "неотклонений" (такое бывает в случае когда весь месяц в отклонениях, но должны учитываться
	// выходные дни, не попавшие в отклонение  - значит будем вычислять календарные дни по другому - от числа дней в месяце отнимать количество кал.дней попавших в отклонение,
	//также отнимем количество дней с внутрисменными отклоненями, если они не должны учитываться исходя из учетной политики
	//|	ЕСТЬNULL(КалендарныеДни.ОтработаноКалендарныхДней, 0) КАК ОтработаноКалендарныхДней,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КалендарныеДни.ОтработаноКалендарныхДней,0)=0 ТОГДА 
	|			ВЫБОР
	|				КОГДА (ЕСТЬNULL(НормаПоГрафику.КалендарныхДнейВМесяце,0) - ЕСТЬNULL(КалендарныеДни.ОтработаноКалендарныхДнейВНевыходах,0)) < 0 ТОГДА 0
	|				ИНАЧЕ (ЕСТЬNULL(НормаПоГрафику.КалендарныхДнейВМесяце,0) - ЕСТЬNULL(КалендарныеДни.ОтработаноКалендарныхДнейВНевыходах,0))
	|		КОНЕЦ 	
	//vvv календарные дни для внутренних совместителей не будем учитывать
	|
	//|		ИНАЧЕ КалендарныеДни.ОтработаноКалендарныхДней
	|		ИНАЧЕ ВЫБОР КОГДА КалендарныеДни.Сотрудник.ВидЗанятости=ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство) ТОГДА 0 ИНАЧЕ КалендарныеДни.ОтработаноКалендарныхДней КОНЕЦ
	|	КОНЕЦ - ЕСТЬNULL(ВнутрисменныеЧасыДни.ВнутрисменныеЧасыОтклонение, 0) КАК ОтработаноКалендарныхДней,
	//
	|	ЕСТЬNULL(НормаПоГрафику.НормаДней, 0) КАК НормаДней,
	|	ЕСТЬNULL(НормаПоГрафику.НормаЧасов, 0) КАК НормаЧасов,
	|	ЕСТЬNULL(НормаПоГрафику.НормаДнейПоГрафику, 0) КАК НормаДнейПоГрафику,
	|	ЕСТЬNULL(НормаПоГрафику.НормаЧасовПоГрафику, 0) КАК НормаЧасовПоГрафику,
	//vvv
	|	ЕСТЬNULL(НормаПоГрафикуСотрудника.НормаДней, 0) КАК НормаДнейСотрудника,
	|	ЕСТЬNULL(НормаПоГрафикуСотрудника.НормаЧасов, 0) КАК НормаЧасовСотрудника,
	//  Добавим к отработанному времени время в командировке
	//|	ЕСТЬNULL(ОтработаноЗаМесяц.ОтработаноДнейЗаМесяц, 0) КАК ОтработаноДнейЗаМесяц,
	//|	ЕСТЬNULL(ОтработаноЗаМесяц.ОтработаноЧасовЗаМесяц, 0) КАК ОтработаноЧасовЗаМесяц,
	|	ЕСТЬNULL(ОтработаноЗаМесяц.ОтработаноДнейЗаМесяц, 0) + ЕСТЬNULL(Командировки.ОтработаноДней, 0) КАК ОтработаноДнейЗаМесяц,
	|	ЕСТЬNULL(ОтработаноЗаМесяц.ОтработаноЧасовЗаМесяц, 0) + ЕСТЬNULL(Командировки.ОтработаноЧасов, 0) КАК ОтработаноЧасовЗаМесяц,
	//
	|	ЕСТЬNULL(НаличиеНевыходов.НаличиеПростоев, 0) КАК НаличиеПростоев,
	|	ЗаписиРасчетаСреднего.ДатаНачалаСобытия,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ДнейПоТабелю, 0) = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВремяВведеноСводно
	|ИЗ
	|	ВТЗаписиРасчетаСреднего КАК ЗаписиРасчетаСреднего
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФактическиеПериодыДействия КАК ФактическиеПериодыДействия
	|		ПО ЗаписиРасчетаСреднего.Сотрудник = ФактическиеПериодыДействия.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработанноПоГрафику КАК ОтработанноПоГрафику
	|		ПО (НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ) = ОтработанноПоГрафику.Месяц)
	//vvv
	|		И (ФактическиеПериодыДействия.Сотрудник = ОтработанноПоГрафику.Сотрудник)
	//
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработаноСверхНормы КАК ОтработаноСверхНормы
	|		ПО (НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ) = ОтработаноСверхНормы.Месяц)
	//vvv
	|		И (ФактическиеПериодыДействия.Сотрудник = ОтработаноСверхНормы.Сотрудник)
	//
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработаноЗаМесяц КАК ОтработаноЗаМесяц
	|		ПО (НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ) = ОтработаноЗаМесяц.Месяц)
	//vvv
	|		И (ФактическиеПериодыДействия.Сотрудник = ОтработаноЗаМесяц.Сотрудник)
	//
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаПоГрафику КАК НормаПоГрафику
	|		ПО (НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ) = НормаПоГрафику.Месяц)
	//vvv
	|		И (ФактическиеПериодыДействия.Сотрудник = НормаПоГрафику.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаПоГрафикуСотрудника КАК НормаПоГрафикуСотрудника
	|		ПО (НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ) = НормаПоГрафикуСотрудника.Месяц)
	|		И (ФактическиеПериодыДействия.Сотрудник = НормаПоГрафикуСотрудника.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВнутрисменныеЧасыДни КАК ВнутрисменныеЧасыДни
	|		ПО (НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ) = ВнутрисменныеЧасыДни.Месяц)
	|		И (ФактическиеПериодыДействия.Сотрудник = ВнутрисменныеЧасыДни.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКомандировки КАК Командировки
	|		ПО (НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ) = Командировки.Месяц)
	|		И (ФактическиеПериодыДействия.Сотрудник = Командировки.Сотрудник)
	//
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВнутрисменныеЧасы КАК ВнутрисменныеЧасы
	|		ПО (НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ) = ВнутрисменныеЧасы.Месяц)
	//vvv
	|		И (ФактическиеПериодыДействия.Сотрудник = ВнутрисменныеЧасы.Сотрудник)
	//
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНаличиеНевыходов КАК НаличиеНевыходов
	|		ПО (НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ) = НаличиеНевыходов.Месяц)
	//vvv
	|		И (ФактическиеПериодыДействия.Сотрудник = НаличиеНевыходов.Сотрудник)
	//
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарныеДниСПраздниками КАК КалендарныеДни
	|		ПО (НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ) = КалендарныеДни.Месяц)
	//vvv
	|		И (ФактическиеПериодыДействия.Сотрудник = КалендарныеДни.Сотрудник)
	//
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяВведенноеВЦеломЗаПериод КАК ВремяВведенноеВЦеломЗаПериод
	//vvv
	//|		ПО (НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ) = ВремяВведенноеВЦеломЗаПериод.Месяц)";
	|		ПО (НАЧАЛОПЕРИОДА(ФактическиеПериодыДействия.ПериодДействияНачало, МЕСЯЦ) = ВремяВведенноеВЦеломЗаПериод.Месяц)
	|		И (ФактическиеПериодыДействия.Сотрудник = ВремяВведенноеВЦеломЗаПериод.Сотрудник)";
	
	
	Выборка = Запрос.Выполнить();
	ВыборкаОтработанноеВремя = 	Выборка.Выгрузить();
	
	//vvv получим все виды простоев, которые были у сотрудника для вывода сообщения
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Основные.ПериодДействияНачало, МЕСЯЦ) КАК МесяцВыборки,
	|	Основные.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидПростоя,
	|	Основные.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ПолноеНаименование КАК НаименованиеПростоя,
	|	Основные.Регистратор
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиРасчетаСреднего КАК ЗаписиРасчетаСреднего
	|		ПО Основные.Сотрудник = ЗаписиРасчетаСреднего.Сотрудник
	|			И Основные.ПериодДействияНачало >= ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода
	|			И (Основные.ПериодДействияКонец <= КОНЕЦПЕРИОДА(ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода, ДЕНЬ))
	|			И ((Основные.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&Невыходы)) ИЛИ (Основные.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.УчитыватьКакНевыходПриРасчетеОтпуска))
	|
	|УПОРЯДОЧИТЬ ПО
	|	МесяцВыборки";
	
	ВидыПростоев=Запрос.Выполнить().Выгрузить();
	//
	
	// заполним результаты в наборе записей
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	ТаблицаЗаписей.Колонки.Добавить("БПНачало");
	ТаблицаЗаписей.Колонки.Добавить("БПКонец");
	ТаблицаЗаписей.Колонки.Добавить("ФактическиОтработаноДней");
	ТаблицаЗаписей.Колонки.Добавить("ФактическиОтработаноЧасов");
	//vvv
	ТаблицаЗаписей.Колонки.Добавить("НормаДнейДляПремии");
	ТаблицаЗаписей.Колонки.Добавить("НормаЧасовДляПремии");
	ТаблицаЗаписей.Колонки.Добавить("НеВключатьВРасчетПремии");
	//
    
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(МесяцыВыборки.МесяцВыборки, МЕСЯЦ) КАК МесяцВыборки
	|ПОМЕСТИТЬ ВТМесяцы
	|ИЗ
	|	&МесяцыВыборки КАК МесяцыВыборки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Месяцы.МесяцВыборки,
	|	ЗаписиРасчетаСреднего.ДатаНачалаСобытия,
	|	ЗаписиРасчетаСреднего.Сотрудник
	|ПОМЕСТИТЬ ВТМесяцыВыборки
	|ИЗ
	|	РегистрРасчета.РасчетСреднегоЗаработка КАК ЗаписиРасчетаСреднего
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМесяцы КАК Месяцы
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЗаписиРасчетаСреднего.Регистратор = &парамРегистратор
	|	И Месяцы.МесяцВыборки <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиСрез.МесяцВыборки,
	|	РаботникиОрганизаций.ТарифнаяСтавкаПервогоРазряда КАК ТарифнаяСтавкаПериода
	|ПОМЕСТИТЬ ВТТарифныеСтавкиПериода
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
	|			ВТПериоды.МесяцВыборки КАК МесяцВыборки,
	|			ВТПериоды.Сотрудник КАК Сотрудник
	|		ИЗ
	|			ВТМесяцыВыборки КАК ВТПериоды
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|				ПО ВТПериоды.Сотрудник = РаботникиОрганизаций.Сотрудник
	|					И ВТПериоды.МесяцВыборки >= РаботникиОрганизаций.Период
	|		ГДЕ
	|			РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТПериоды.МесяцВыборки,
	|			ВТПериоды.Сотрудник) КАК РаботникиСрез
	|		ПО РаботникиОрганизаций.Период = РаботникиСрез.Период
	|			И РаботникиОрганизаций.Сотрудник = РаботникиСрез.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиСрез.МесяцВыборки,
	|	РаботникиОрганизаций.ТарифнаяСтавкаПервогоРазряда КАК ТекущаяТарифная
	|ПОМЕСТИТЬ ВТТарифнаяСтавка
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
	|			ВТПериоды.МесяцВыборки КАК МесяцВыборки,
	|			ВТПериоды.Сотрудник КАК Сотрудник
	|		ИЗ
	|			ВТМесяцыВыборки КАК ВТПериоды
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|				ПО ВТПериоды.Сотрудник = РаботникиОрганизаций.Сотрудник
	|					И ВТПериоды.ДатаНачалаСобытия >= РаботникиОрганизаций.Период
	|		ГДЕ
	|			РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТПериоды.МесяцВыборки,
	|			ВТПериоды.Сотрудник) КАК РаботникиСрез
	|		ПО РаботникиОрганизаций.Период = РаботникиСрез.Период
	|			И РаботникиОрганизаций.Сотрудник = РаботникиСрез.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериоды.МесяцВыборки,
	|	ВТТарифныеСтавкиПериода.ТарифнаяСтавкаПериода,
	|	ВТТарифнаяСтавка.ТекущаяТарифная
	|ИЗ
	|	ВТМесяцыВыборки КАК ВТПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТарифныеСтавкиПериода КАК ВТТарифныеСтавкиПериода
	|		ПО ВТПериоды.МесяцВыборки = ВТТарифныеСтавкиПериода.МесяцВыборки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТарифнаяСтавка КАК ВТТарифнаяСтавка
	|		ПО ВТПериоды.МесяцВыборки = ВТТарифнаяСтавка.МесяцВыборки";
	
	
	Запрос.УстановитьПараметр("МесяцыВыборки",ТаблицаМесяцев);
	Результат = Запрос.Выполнить();
	ТарифныеСтавки = Результат.Выгрузить();
	

	
	СтруктураПоиска = Новый Структура("НомерСтроки");
	СтруктураПоискаДоп = Новый Структура("НомерСтроки,МесяцВыборки");
	//vvv
	СтруктураПоискаДоп1 = Новый Структура("НомерСтроки,МесяцВыборки");
	//
	ВГраница = НаборЗаписей.Количество() - 1;
	ПредыдущийКоэффициентИндексации = 1;
	ТекущийКоэффициентИндексации = 1;
	Для Индекс = 0 По ВГраница Цикл
		СтрокаДвижений = НаборЗаписей[Индекс];
		
		ПредыдущийКоэффициентИндексации = 1;
		ТекущийКоэффициетИндексации = 1;
		
		СтруктураПоиска.НомерСтроки = СтрокаДвижений.НомерСтроки;
		
		ПерваяЗапись = Истина;
		Пока ВыборкаБазы.НайтиСледующий(СтруктураПоиска) Цикл
			//vvv если сотрудник не получал зарплату в месяце, а отработал хотя бы один КАЛЕНДАРНЫЙ день, это день необходимо учитывать
			//при расчете среднего заработка для больничного
			ВыбраннаяСтрока1=Null;
			ОтрабКалДней=0;
			Если ВыборкаБазы.МесяцВыборки<>NULL ТОгда
				СтруктураПоискаДоп1.НомерСтроки = СтруктураПоиска.НомерСтроки;
				СтруктураПоискаДоп1.МесяцВыборки = НачалоМесяца(ВыборкаБазы.МесяцВыборки);
				СтрокиВремени1 = ВыборкаОтработанноеВремя.НайтиСтроки(СтруктураПоискаДоп1);
				Если СтрокиВремени1.Количество()>0 Тогда
					ВыбраннаяСтрока1=СтрокиВремени1[0];
					ОтрабКалДней=ВыбраннаяСтрока1.ОтработаноКалендарныхДней;
				КонецЕсли;
			КонецЕсли;
			//
			//vvv комментируем, вставляем проверку на календарные дни при нулевой зарплате
			//Если (ВыборкаБазы.РезультатБаза <> 0) И (ВыборкаБазы.РезультатБаза <> Null) тогда
			Если ((ВыборкаБазы.РезультатБаза <> 0) И (ВыборкаБазы.РезультатБаза <> Null)) или ((ВыбраннаяСтрока1<>NULL) и (ОтрабКалДней<>0)) тогда
				Если НЕ ПерваяЗапись Тогда
					// вводим новые строки набора записей
					ДопСтрокаДвижений = ТаблицаЗаписей.Добавить();
					
					ДопСтрокаДвижений.ПериодРегистрации = Регистратор.ПериодРегистрации;
					ДопСтрокаДвижений.ВидРасчета 		= СтрокаДвижений.ВидРасчета;
					ДопСтрокаДвижений.Регистратор 		= Регистратор;
					ДопСтрокаДвижений.НомерСтроки		= СтрокаДвижений.НомерСтроки;

					// измерения
					ДопСтрокаДвижений.Сотрудник 	= СтрокаДвижений.Сотрудник;
					ДопСтрокаДвижений.ФизЛицо 	= СтрокаДвижений.ФизЛицо;
					ДопСтрокаДвижений.Организация	= СтрокаДвижений.Организация;
				
					
					// свойства
					ДопСтрокаДвижений.ВидУчетаВремени		 		 = СтрокаДвижений.ВидУчетаВремени;
					ДопСтрокаДвижений.БазовыйПериодНачало 		 	 = СтрокаДвижений.БазовыйПериодНачало;
					ДопСтрокаДвижений.БазовыйПериодКонец 		 	 = СтрокаДвижений.БазовыйПериодКонец;
					
					// реквизиты
					ДопСтрокаДвижений.КоэффициентИндексации 		 = СтрокаДвижений.КоэффициентИндексации;
					ДопСтрокаДвижений.ДатаНачалаРасчетногоПериода 	 = СтрокаДвижений.ДатаНачалаРасчетногоПериода;
					ДопСтрокаДвижений.ДатаОкончанияРасчетногоПериода = СтрокаДвижений.ДатаОкончанияРасчетногоПериода;
					ДопСтрокаДвижений.СпособРасчета 				 = СтрокаДвижений.СпособРасчета;
					ДопСтрокаДвижений.ПериодРасчетаСреднегоЗаработка = СтрокаДвижений.ПериодРасчетаСреднегоЗаработка;
					ДопСтрокаДвижений.ДатаНачалаСобытия              = СтрокаДвижений.ДатаНачалаСобытия;
					ДопСтрокаДвижений.ВидОграниченияЗаработка        = СтрокаДвижений.ВидОграниченияЗаработка;

					//vvv комментируем
					//Если СтрокаДвижений.ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям ИЛИ  СтрокаДвижений.ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям ИЛИ СтрокаДвижений.ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии Тогда
					Если СтрокаДвижений.ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям ИЛИ  СтрокаДвижений.ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям ИЛИ СтрокаДвижений.ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии ИЛИ
						 СтрокаДвижений.ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ ИЛИ  СтрокаДвижений.ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ ИЛИ СтрокаДвижений.ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ ИЛИ
						 СтрокаДвижений.ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямОтпуск ИЛИ  СтрокаДвижений.ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямОтпуск ИЛИ СтрокаДвижений.ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииОтпуск Тогда
					//
						ДопСтрокаДвижений.БПНачало = ВыборкаБазы.БПНачало;
						ДопСтрокаДвижений.БПКонец  = ВыборкаБазы.БПКонец;
					КонецЕсли;
					
					
					СтрокаТарифныеСтавки = ТарифныеСтавки.Найти(КонецМесяца(ВыборкаБазы.Месяцвыборки),"МесяцВыборки");
					//vvv
					//Если СтрокаДвижений.Сотрудник.ВидДоговора <> Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
					Если НЕ СтрокаДвижений.РасчетПоДоговоруПодряда Тогда
					//		
						БезЕТС =  РегистрыСведений.РаботникиОрганизаций.ПолучитьПоследнее(СтрокаДвижений.ДатаНачалаСобытия, 
										Новый Структура("Сотрудник,Организация", СтрокаДвижений.Сотрудник,СтрокаДвижений.Организация)).БезЕТС;
						//vvv				
						БезЕТС =  РегистрыСведений.РаботникиОрганизаций.ПолучитьПоследнее(СтрокаДвижений.ДатаНачалаСобытия, 
										Новый Структура("Сотрудник,Организация", СтрокаДвижений.Сотрудник,СтрокаДвижений.ОбособленноеПодразделение)).БезЕТС;				
						//				

						БезЕТСПериода =   РегистрыСведений.РаботникиОрганизаций.ПолучитьПоследнее(КонецМесяца(ВыборкаБазы.Месяцвыборки), 
										Новый Структура("Сотрудник,Организация", СтрокаДвижений.Сотрудник,СтрокаДвижений.Организация)).БезЕТС;
						//vvv
						БезЕТСПериода =   РегистрыСведений.РаботникиОрганизаций.ПолучитьПоследнее(КонецМесяца(ВыборкаБазы.Месяцвыборки), 
										Новый Структура("Сотрудник,Организация", СтрокаДвижений.Сотрудник,СтрокаДвижений.ОбособленноеПодразделение)).БезЕТС;
						//
										
						Если БезЕТС <> БезЕТСПериода Тогда
							ТарифнаяСтавкаПериода = СтрокаТарифныеСтавки.ТарифнаяСтавкаПериода; 
							
							РазмерТСПериода =   РегистрыСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций.ПолучитьПоследнее(КонецМесяца(ВыборкаБазы.Месяцвыборки), 
											Новый Структура("Организация,ТарифнаяСтавка", СтрокаДвижений.Организация, ТарифнаяСтавкаПериода)).Размер;
							//vvv				
							РазмерТСПериода =   РегистрыСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций.ПолучитьПоследнее(КонецМесяца(ВыборкаБазы.Месяцвыборки), 
											Новый Структура("Организация,ТарифнаяСтавка", СтрокаДвижений.ОбособленноеПодразделение, ТарифнаяСтавкаПериода)).Размер / ?(КонецМесяца(ВыборкаБазы.Месяцвыборки)<ОбщегоНазначения.ПолучитьДатуДеноминации(),10000,1);				
							//				
	 
	                        СтрокаДвижений.ТекущаяТарифнаяСтавка = РегистрыСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций.ПолучитьПоследнее(СтрокаДвижений.ДатаНачалаСобытия, 
											Новый Структура("Организация,ТарифнаяСтавка", СтрокаДвижений.Организация, ТарифнаяСтавкаПериода)).Размер;
							//vvv
							СтрокаДвижений.ТекущаяТарифнаяСтавка = РегистрыСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций.ПолучитьПоследнее(СтрокаДвижений.ДатаНачалаСобытия, 
											Новый Структура("Организация,ТарифнаяСтавка", СтрокаДвижений.ОбособленноеПодразделение, ТарифнаяСтавкаПериода)).Размер;
							//

	                        ДопСтрокаДвижений.ТекущаяТарифнаяСтавка			 = СтрокаДвижений.ТекущаяТарифнаяСтавка;

						ИначеЕсли  БезЕТС Тогда 
							РазмерТСПериода = РегистрыСведений.ТарифныеСтавкиРаботниковОрганизации.ПолучитьПоследнее(КонецМесяца(ВыборкаБазы.Месяцвыборки), 
												Новый Структура("Сотрудник,Организация", СтрокаДвижений.Сотрудник,СтрокаДвижений.Организация)).ТарифнаяСтавка;
							//vvv				
							РазмерТСПериода = РегистрыСведений.ТарифныеСтавкиРаботниковОрганизации.ПолучитьПоследнее(КонецМесяца(ВыборкаБазы.Месяцвыборки), 
												Новый Структура("Сотрудник,Организация", СтрокаДвижений.Сотрудник,СтрокаДвижений.Организация)).ТарифнаяСтавка / ?(КонецМесяца(ВыборкаБазы.Месяцвыборки)<ОбщегоНазначения.ПолучитьДатуДеноминации(),10000,1);				
							//
							РазмерТС = РегистрыСведений.ТарифныеСтавкиРаботниковОрганизации.ПолучитьПоследнее(СтрокаДвижений.ДатаНачалаСобытия, 
												Новый Структура("Сотрудник,Организация", СтрокаДвижений.Сотрудник,СтрокаДвижений.Организация)).ТарифнаяСтавка;
							СтрокаДвижений.ТекущаяТарифнаяСтавка = РазмерТС;
							ДопСтрокаДвижений.ТекущаяТарифнаяСтавка			 = СтрокаДвижений.ТекущаяТарифнаяСтавка;
							Если РазмерТСПериода =0 тогда
								ОбщегоНазначения.СообщитьОбОшибке("В месяце " + Формат(ВыборкаБазы.Месяцвыборки,"ДФ=dd.MM.yyyy") +" не заполнена тарифная ставка сотрудника.");
								РазмерТСПериода = СтрокаДвижений.ТекущаяТарифнаяСтавка;
							КонецЕсли;
	 					Иначе	
							ТарифнаяСтавкаПериода = СтрокаТарифныеСтавки.ТарифнаяСтавкаПериода; 

							РазмерТСПериода =   РегистрыСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций.ПолучитьПоследнее(КонецМесяца(ВыборкаБазы.Месяцвыборки), 
											Новый Структура("Организация,ТарифнаяСтавка", СтрокаДвижений.Организация, ТарифнаяСтавкаПериода)).Размер;
							//vvv				
							РазмерТСПериода =   РегистрыСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций.ПолучитьПоследнее(КонецМесяца(ВыборкаБазы.Месяцвыборки), 
											Новый Структура("Организация,ТарифнаяСтавка", СтрокаДвижений.ОбособленноеПодразделение, ТарифнаяСтавкаПериода)).Размер;
											
							РазмерТСПериода =   РегистрыСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций.ПолучитьПоследнее(КонецМесяца(ВыборкаБазы.Месяцвыборки), 
											Новый Структура("Организация,ТарифнаяСтавка", СтрокаДвижений.ОбособленноеПодразделение, ТарифнаяСтавкаПериода)).Размер / ?(КонецМесяца(ВыборкаБазы.Месяцвыборки)<ОбщегоНазначения.ПолучитьДатуДеноминации(),10000,1);				
							//				
											
							ТекущаяТарифнаяСтавка = СтрокаТарифныеСтавки.ТекущаяТарифная;
							Отбор = Новый Структура;
							Отбор.Вставить("Организация", СтрокаДвижений.Организация);
							//vvv
							Отбор.Вставить("Организация", СтрокаДвижений.ОбособленноеПодразделение);
							//
							Отбор.Вставить("ТарифнаяСтавка",  ТекущаяТарифнаяСтавка);
							РазмерТС =   РегистрыСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций.ПолучитьПоследнее(СтрокаДвижений.ДатаНачалаСобытия,Отбор).Размер;
							//vvv
							Если СтрокаДвижений.ДатаНачалаСобытия<ОбщегоНазначения.ПолучитьДатуДеноминации() И СтрокаДвижений.ПериодРегистрации>=ОбщегоНазначения.ПолучитьДатуДеноминации() Тогда
								РазмерТС=Окр(РазмерТС/10000,2);
							КонецЕсли;							
							//
							СтрокаДвижений.ТекущаяТарифнаяСтавка = РазмерТС;
					        ДопСтрокаДвижений.ТекущаяТарифнаяСтавка			 = СтрокаДвижений.ТекущаяТарифнаяСтавка;
							Если РазмерТСПериода =0 тогда
								ОбщегоНазначения.СообщитьОбОшибке("В месяце " + Формат(ВыборкаБазы.Месяцвыборки,"ДФ=dd.MM.yyyy") +" не заполнена тарифная ставка первого разряда.");
								РазмерТСПериода = СтрокаДвижений.ТекущаяТарифнаяСтавка;
							КонецЕсли;
						КонецЕсли;					
						ДопСтрокаДвижений.ТарифнаяСтавкаПериода			 = РазмерТСПериода; 
						РазмерТСПериода = ?(РазмерТСПериода = 0,СтрокаДвижений.ТекущаяТарифнаяСтавка,РазмерТСПериода);
		                ТекущийКоэффициентИндексации = ?(СтрокаДвижений.ТекущаяТарифнаяСтавка < РазмерТСПериода, МАКС(ПредыдущийКоэффициентИндексации,1), СтрокаДвижений.ТекущаяТарифнаяСтавка / РазмерТСПериода);
											
						ДопСтрокаДвижений.КоэффициентИндексации = ТекущийКоэффициентИндексации;
						
					Иначе
						
						ДопСтрокаДвижений.КалендарныеДни                = День(КонецМесяца(ВыборкаБазы.МесяцВыборки));

					КонецЕсли;
					ПерваяЗапись = Ложь;
					
					ДопСтрокаДвижений.Результат 					= ВыборкаБазы.РезультатБаза;
					ДопСтрокаДвижений.ЧислоМесяцев 					= ВыборкаБазы.ЧислоМесяцев;
					ДопСтрокаДвижений.ПериодРасчетаСреднегоЗаработка= ВыборкаБазы.ПериодРасчетаСреднегоЗаработка;
					ДопСтрокаДвижений.МесяцВыборки 					= НачалоМесяца(ВыборкаБазы.МесяцВыборки);
					
					СтруктураПоискаДоп.НомерСтроки = СтруктураПоиска.НомерСтроки;
					СтруктураПоискаДоп.МесяцВыборки = НачалоМесяца(ВыборкаБазы.МесяцВыборки);
					
					СтрокиВремени = ВыборкаОтработанноеВремя.НайтиСтроки(СтруктураПоискаДоп);
					
					Если СтрокиВремени.Количество() > 0 Тогда 
						Если СтрокиВремени.Количество() > 1 Тогда 
							Для каждого строканеноль из СтрокиВремени цикл
								Если СтрокаНеНоль.НормаДнейПоПятидневке > 0 тогда
									ВыбраннаяСтрока = СтрокаНеНоль;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						Иначе
							ВыбраннаяСтрока = СтрокиВремени[0];
						КонецЕсли;
					
						//Заполним простои
						Если ВыбраннаяСтрока.НаличиеПростоев <> 0 тогда
							СтрокаПростоев = ТаблицаПростоев.Добавить();
							
							СтрокаПростоев.МесяцВыборки = НачалоМесяца(ВыборкаБазы.МесяцВыборки);
							СтрокаПростоев.НаличиеПростоев = ВыбраннаяСтрока.НаличиеПростоев;
						КонецЕсли;
						
						ДопСтрокаДвижений.ОтработаноДней 					= ВыбраннаяСтрока.ОтработаноДней;
						ДопСтрокаДвижений.ОтработаноЧасов 					= ВыбраннаяСтрока.ОтработаноЧасов;
						ДопСтрокаДвижений.ФактическиОтработаноДней 			= ВыбраннаяСтрока.ФактическиОтработаноДней;
						ДопСтрокаДвижений.ФактическиОтработаноЧасов 		= ВыбраннаяСтрока.ФактическиОтработаноЧасов;
						//vvv для больничного берем только то, что отработано по окладу,т.е. убираем командировки
						//Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту") ТОгда
							ДопСтрокаДвижений.ФактическиОтработаноДней 			= ВыбраннаяСтрока.ОтработаноДнейЗаМесяц;
							ДопСтрокаДвижений.ФактическиОтработаноЧасов 		= ВыбраннаяСтрока.ОтработаноЧасовЗаМесяц;
						//КонецЕсли;	
						ДопСтрокаДвижений.ОтработаноДней 					= ВыбраннаяСтрока.ОтработаноДнейЗаМесяц;
						ДопСтрокаДвижений.ОтработаноЧасов 					= ВыбраннаяСтрока.ОтработаноЧасовЗаМесяц;
						//
					    ДопСтрокаДвижений.КалендарныеДни                    = ВыбраннаяСтрока.ОтработаноКалендарныхДней;
						
						Если  ВыбраннаяСтрока.ВремяВведеноСводно Тогда
							Сообщить("За " +  Формат(ВыборкаБазы.МесяцВыборки,"ДФ='ММММ гггг'") +" отработанное время введено сводно.",СтатусСообщения.Важное);
                        КонецЕсли;
							

						ДопСтрокаДвижений.НормаДней 					= ВыбраннаяСтрока.НормаДней;
						ДопСтрокаДвижений.НормаЧасов 					= ВыбраннаяСтрока.НормаЧасов;
						ДопСтрокаДвижений.НормаДнейПоГрафику 			= ВыбраннаяСтрока.НормаДнейПоГрафику;
						ДопСтрокаДвижений.НормаЧасовПоГрафику 			= ВыбраннаяСтрока.НормаЧасовПоГрафику;
						//vvv
						ДопСтрокаДвижений.НормаДнейДляПремии 			= ВыбраннаяСтрока.НормаДнейСотрудника;
						ДопСтрокаДвижений.НормаЧасовДляПремии			= ВыбраннаяСтрока.НормаЧасовСотрудника;
						ДопСтрокаДвижений.НеВключатьВРасчетПремии		= СтрокаДвижений.Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда;
						//
						ПредыдущийКоэффициентИндексации = ТекущийКоэффициентИндексации;
					КонецЕсли;
				Иначе
					
					ПерваяЗапись = Ложь;
					
					ТаблицаЗаписей[Индекс].Результат 						= ВыборкаБазы.РезультатБаза;
					ТаблицаЗаписей[Индекс].ЧислоМесяцев 					= ВыборкаБазы.ЧислоМесяцев;
					ТаблицаЗаписей[Индекс].ПериодРасчетаСреднегоЗаработка 	= ВыборкаБазы.ПериодРасчетаСреднегоЗаработка;
					ТаблицаЗаписей[Индекс].МесяцВыборки 					= НачалоМесяца(ВыборкаБазы.МесяцВыборки);
					
					
					СтрокаТарифныеСтавки = ТарифныеСтавки.Найти(КонецМесяца(ВыборкаБазы.Месяцвыборки),"МесяцВыборки");
					//vvv
					//Если СтрокаДвижений.Сотрудник.ВидДоговора <> Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
					Если НЕ СтрокаДвижений.РасчетПоДоговоруПодряда Тогда
					//	
						
						ТаблицаЗаписей[Индекс].ТекущаяТарифнаяСтавка			 = СтрокаДвижений.ТекущаяТарифнаяСтавка;
						
						БезЕТС =  РегистрыСведений.РаботникиОрганизаций.ПолучитьПоследнее(СтрокаДвижений.ДатаНачалаСобытия, 
										Новый Структура("Сотрудник,Организация", СтрокаДвижений.Сотрудник,СтрокаДвижений.Организация)).БезЕТС;

						БезЕТСПериода =   РегистрыСведений.РаботникиОрганизаций.ПолучитьПоследнее(КонецМесяца(ВыборкаБазы.Месяцвыборки), 
										Новый Структура("Сотрудник,Организация", СтрокаДвижений.Сотрудник,СтрокаДвижений.Организация)).БезЕТС;
						//vvv
						БезЕТС =  РегистрыСведений.РаботникиОрганизаций.ПолучитьПоследнее(СтрокаДвижений.ДатаНачалаСобытия, 
										Новый Структура("Сотрудник,Организация", СтрокаДвижений.Сотрудник,СтрокаДвижений.ОбособленноеПодразделение)).БезЕТС;

						БезЕТСПериода =   РегистрыСведений.РаботникиОрганизаций.ПолучитьПоследнее(КонецМесяца(ВыборкаБазы.Месяцвыборки), 
										Новый Структура("Сотрудник,Организация", СтрокаДвижений.Сотрудник,СтрокаДвижений.ОбособленноеПодразделение)).БезЕТС;
						//
										
						Если БезЕТС <> БезЕТСПериода Тогда
							ТарифнаяСтавкаПериода = СтрокаТарифныеСтавки.ТарифнаяСтавкаПериода; 

							РазмерТСПериода =   РегистрыСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций.ПолучитьПоследнее(КонецМесяца(ВыборкаБазы.Месяцвыборки), 
											Новый Структура("Организация,ТарифнаяСтавка", СтрокаДвижений.Организация, ТарифнаяСтавкаПериода)).Размер;
							//vvv				
							РазмерТСПериода =   РегистрыСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций.ПолучитьПоследнее(КонецМесяца(ВыборкаБазы.Месяцвыборки), 
											Новый Структура("Организация,ТарифнаяСтавка", СтрокаДвижений.ОбособленноеПодразделение, ТарифнаяСтавкаПериода)).Размер;
							РазмерТСПериода =   РегистрыСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций.ПолучитьПоследнее(КонецМесяца(ВыборкаБазы.Месяцвыборки), 
											Новый Структура("Организация,ТарифнаяСтавка", СтрокаДвижений.ОбособленноеПодразделение, ТарифнаяСтавкаПериода)).Размер / ?(КонецМесяца(ВыборкаБазы.Месяцвыборки)<ОбщегоНазначения.ПолучитьДатуДеноминации(),10000,1);				
							//				
	 
	                        СтрокаДвижений.ТекущаяТарифнаяСтавка = РегистрыСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций.ПолучитьПоследнее(СтрокаДвижений.ДатаНачалаСобытия, 
											Новый Структура("Организация,ТарифнаяСтавка", СтрокаДвижений.Организация, ТарифнаяСтавкаПериода)).Размер;
							//vvv
							СтрокаДвижений.ТекущаяТарифнаяСтавка = РегистрыСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций.ПолучитьПоследнее(СтрокаДвижений.ДатаНачалаСобытия, 
											Новый Структура("Организация,ТарифнаяСтавка", СтрокаДвижений.ОбособленноеПодразделение, ТарифнаяСтавкаПериода)).Размер;
							//

	                        ТаблицаЗаписей[Индекс].ТекущаяТарифнаяСтавка = СтрокаДвижений.ТекущаяТарифнаяСтавка;

						ИначеЕсли  БезЕТС Тогда 
							РазмерТСПериода =   РегистрыСведений.ТарифныеСтавкиРаботниковОрганизации.ПолучитьПоследнее(КонецМесяца(ВыборкаБазы.Месяцвыборки), 
												Новый Структура("Сотрудник,Организация", СтрокаДвижений.Сотрудник,СтрокаДвижений.Организация)).ТарифнаяСтавка;
							//vvv				
							РазмерТСПериода =   РегистрыСведений.ТарифныеСтавкиРаботниковОрганизации.ПолучитьПоследнее(КонецМесяца(ВыборкаБазы.Месяцвыборки), 
												Новый Структура("Сотрудник,Организация", СтрокаДвижений.Сотрудник,СтрокаДвижений.Организация)).ТарифнаяСтавка / ?(КонецМесяца(ВыборкаБазы.Месяцвыборки)<ОбщегоНазначения.ПолучитьДатуДеноминации(),10000,1);				
							//					
							РазмерТС = РегистрыСведений.ТарифныеСтавкиРаботниковОрганизации.ПолучитьПоследнее(СтрокаДвижений.ДатаНачалаСобытия, 
												Новый Структура("Сотрудник,Организация", СтрокаДвижений.Сотрудник,СтрокаДвижений.Организация)).ТарифнаяСтавка;
							СтрокаДвижений.ТекущаяТарифнаяСтавка = РазмерТС;
							ТаблицаЗаписей[Индекс].ТекущаяТарифнаяСтавка = СтрокаДвижений.ТекущаяТарифнаяСтавка;

							Если РазмерТСПериода =0 тогда
								ОбщегоНазначения.СообщитьОбОшибке("В месяце " + Формат(ВыборкаБазы.Месяцвыборки,"ДФ=dd.MM.yyyy") +" не заполнена тарифная ставка сотрудника.");
								РазмерТСПериода = СтрокаДвижений.ТекущаяТарифнаяСтавка;
							КонецЕсли;
						Иначе	
							
							
							ТарифнаяСтавкаПериода = СтрокаТарифныеСтавки.ТарифнаяСтавкаПериода; 

							РазмерТСПериода =   РегистрыСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций.ПолучитьПоследнее(КонецМесяца(ВыборкаБазы.Месяцвыборки), 
											Новый Структура("Организация,ТарифнаяСтавка", СтрокаДвижений.Организация, ТарифнаяСтавкаПериода)).Размер;
							//vvv				
							РазмерТСПериода =   РегистрыСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций.ПолучитьПоследнее(КонецМесяца(ВыборкаБазы.Месяцвыборки), 
											Новый Структура("Организация,ТарифнаяСтавка", СтрокаДвижений.ОбособленноеПодразделение, ТарифнаяСтавкаПериода)).Размер / ?(КонецМесяца(ВыборкаБазы.Месяцвыборки)<ОбщегоНазначения.ПолучитьДатуДеноминации(),10000,1);				
							//				
							ТекущаяТарифнаяСтавка = СтрокаТарифныеСтавки.ТекущаяТарифная;

							Отбор = Новый Структура;
							Отбор.Вставить("Организация", СтрокаДвижений.Организация);
							//vvv
							Отбор.Вставить("Организация", СтрокаДвижений.ОбособленноеПодразделение);
							//
							Отбор.Вставить("ТарифнаяСтавка",  ТекущаяТарифнаяСтавка);
							РазмерТС =   РегистрыСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций.ПолучитьПоследнее(СтрокаДвижений.ДатаНачалаСобытия,Отбор).Размер;
							//vvv
							Если СтрокаДвижений.ДатаНачалаСобытия<ОбщегоНазначения.ПолучитьДатуДеноминации() И СтрокаДвижений.ПериодРегистрации>=ОбщегоНазначения.ПолучитьДатуДеноминации() Тогда
								РазмерТС=Окр(РазмерТС/10000,2);
							КонецЕсли;							
							//
							СтрокаДвижений.ТекущаяТарифнаяСтавка = РазмерТС;
	                        ТаблицаЗаписей[Индекс].ТекущаяТарифнаяСтавка = СтрокаДвижений.ТекущаяТарифнаяСтавка;
	                       	Если РазмерТСПериода =0 тогда
								ОбщегоНазначения.СообщитьОбОшибке("В месяце " + Формат(ВыборкаБазы.Месяцвыборки,"ДФ=dd.MM.yyyy") +" не заполнена тарифная ставка первого разряда.");
								РазмерТСПериода = СтрокаДвижений.ТекущаяТарифнаяСтавка;
							КонецЕсли;
						КонецЕсли;		
	                    ТаблицаЗаписей[Индекс].ТарифнаяСтавкаПериода			 = РазмерТСПериода; 
						РазмерТСПериода = ?(РазмерТСПериода = 0,СтрокаДвижений.ТекущаяТарифнаяСтавка,РазмерТСПериода);
						ТекущийКоэффициентИндексации =?(СтрокаДвижений.ТекущаяТарифнаяСтавка < РазмерТСПериода, МАКС(ПредыдущийКоэффициентИндексации,1), СтрокаДвижений.ТекущаяТарифнаяСтавка / РазмерТСПериода);
						ТаблицаЗаписей[Индекс].КоэффициентИндексации = ТекущийКоэффициентИндексации;
					Иначе
						ТаблицаЗаписей[Индекс].КалендарныеДни                = День(КонецМесяца(ВыборкаБазы.МесяцВыборки));	
					КонецЕсли;	
					
				
					//vvv комментируем
					//Если ТаблицаЗаписей[Индекс].ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям ИЛИ  ТаблицаЗаписей[Индекс].ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям ИЛИ  ТаблицаЗаписей[Индекс].ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии Тогда
					Если ТаблицаЗаписей[Индекс].ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям ИЛИ  ТаблицаЗаписей[Индекс].ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям ИЛИ  ТаблицаЗаписей[Индекс].ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии ИЛИ 
						ТаблицаЗаписей[Индекс].ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ ИЛИ  ТаблицаЗаписей[Индекс].ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ ИЛИ  ТаблицаЗаписей[Индекс].ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ ИЛИ
						ТаблицаЗаписей[Индекс].ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямОтпуск ИЛИ  ТаблицаЗаписей[Индекс].ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямОтпуск ИЛИ  ТаблицаЗаписей[Индекс].ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииОтпуск Тогда
					//
						ТаблицаЗаписей[Индекс].БПНачало = ВыборкаБазы.БПНачало;
						ТаблицаЗаписей[Индекс].БПКонец  = ВыборкаБазы.БПКонец;
					КонецЕсли;
					
					СтруктураПоискаДоп.НомерСтроки = СтруктураПоиска.НомерСтроки;
					СтруктураПоискаДоп.МесяцВыборки = НачалоМесяца(ВыборкаБазы.МесяцВыборки);
					СтрокиВремени = ВыборкаОтработанноеВремя.НайтиСтроки(СтруктураПоискаДоп);	

					Если СтрокиВремени.Количество() > 0 Тогда 
						ВыбраннаяСтрока = СтрокиВремени[0];
						
					
						//Заполним простои
						Если ВыбраннаяСтрока.НаличиеПростоев <> 0 тогда
							СтрокаПростоев = ТаблицаПростоев.Добавить();
							
							СтрокаПростоев.МесяцВыборки = НачалоМесяца(ВыборкаБазы.МесяцВыборки);
							СтрокаПростоев.НаличиеПростоев = ВыбраннаяСтрока.НаличиеПростоев;
						КонецЕсли;
							//ТаблицаЗаписей[Индекс].ОтработаноПоПятидневке 			= ВыбраннаяСтрока.ОтработаноДнейПоПятидневке;
							//ТаблицаЗаписей[Индекс].НормаПоПятидневке 				= ВыбраннаяСтрока.НормаДнейПоПятидневке;
							ТаблицаЗаписей[Индекс].ОтработаноДней 					= ВыбраннаяСтрока.ОтработаноДней;
							ТаблицаЗаписей[Индекс].ОтработаноЧасов 					= ВыбраннаяСтрока.ОтработаноЧасов;
							ТаблицаЗаписей[Индекс].ФактическиОтработаноДней 		= ВыбраннаяСтрока.ФактическиОтработаноДней;
							ТаблицаЗаписей[Индекс].ФактическиОтработаноЧасов 		= ВыбраннаяСтрока.ФактическиОтработаноЧасов;
							//vvv для больничного берем только то, что отработано по окладу,т.е. убираем командировки
							//Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту") ТОгда
								ТаблицаЗаписей[Индекс].ФактическиОтработаноДней 	= ВыбраннаяСтрока.ОтработаноДнейЗаМесяц;
								ТаблицаЗаписей[Индекс].ФактическиОтработаноЧасов 	= ВыбраннаяСтрока.ОтработаноЧасовЗаМесяц;
							//КонецЕсли;		
							// с этим надо разобраться
							ТаблицаЗаписей[Индекс].ОтработаноДней 					= ВыбраннаяСтрока.ОтработаноДнейЗаМесяц;
							ТаблицаЗаписей[Индекс].ОтработаноЧасов 					= ВыбраннаяСтрока.ОтработаноЧасовЗаМесяц;
							//
							ТаблицаЗаписей[Индекс].НормаДней 						= ВыбраннаяСтрока.НормаДней;
							ТаблицаЗаписей[Индекс].НормаЧасов 						= ВыбраннаяСтрока.НормаЧасов;
							ТаблицаЗаписей[Индекс].НормаДнейПоГрафику 				= ВыбраннаяСтрока.НормаДнейПоГрафику;
							ТаблицаЗаписей[Индекс].НормаЧасовПоГрафику 				= ВыбраннаяСтрока.НормаЧасовПоГрафику;
							//vvv
							ТаблицаЗаписей[Индекс].НормаДнейДляПремии				= ВыбраннаяСтрока.НормаДнейСотрудника;
							ТаблицаЗаписей[Индекс].НормаЧасовДляПремии				= ВыбраннаяСтрока.НормаЧасовСотрудника;
							ТаблицаЗаписей[Индекс].НеВключатьВРасчетПремии			= СтрокаДвижений.Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда;
							//
						    ТаблицаЗаписей[Индекс].КалендарныеДни               	= ВыбраннаяСтрока.ОтработаноКалендарныхДней;
							

						
						ПредыдущийКоэффициентИндексации = ТекущийКоэффициентИндексации;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
		
	//Запишем результат
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций") тогда
		СтрокиКУдалению = ТаблицаЗаписей.НайтиСтроки(Новый Структура("Результат", 0));
		Для Каждого ПустаяСтрока из СтрокиКУдалению Цикл
			ТаблицаЗаписей.Удалить(ПустаяСтрока);
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура("МесяцВыборки");
		//Проанализировать простои
		СтрокиЗаработка = ТаблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск));
		//vvv если в основной заработок включается премии, которые рассчитываются за несколько месяцев (квартал, полгода, год), то включаем их как за один месяц
		Для каждого СтрокаЗар Из СтрокиЗаработка Цикл
			СтрокаЗар.ЧислоМесяцев=1;
		КонецЦикла;		
		//
		
		Если СтрокиЗаработка.Количество() <> 0 тогда
			ПервыйМесяцВыборки = Месяц(СтрокиЗаработка[0].МесяцВыборки);
			ПервыйГодВыборки   = Год(СтрокиЗаработка[0].МесяцВыборки);
			
			ПоРаботнику = РегистрыСведений.РаботникиОрганизаций.СрезПервых(,Новый Структура("Сотрудник,Организация",СтрокиЗаработка[0].Сотрудник,СтрокиЗаработка[0].Организация)); 
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема КАК ДатаПриема
			               |ИЗ
			               |	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
			               |ГДЕ
			               |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник = &ФизЛицо
						   |
			               |УПОРЯДОЧИТЬ ПО
			               |	ДатаПриема УБЫВ";
			
			Запрос.УстановитьПараметр("ФизЛицо", СтрокиЗаработка[0].Сотрудник);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() тогда
				ДатаПриемаРаботника = Выборка.ДатаПриема;
			КонецЕсли;
			
			
			МесяцПриема = Месяц(ДатаПриемаРаботника);
			ГодПриема   = Год(ДатаПриемаРаботника);
			
			Если ПервыйГодВыборки = ГодПриема И ПервыйМесяцВыборки = МесяцПриема И День(ДатаПриемаРаботника)> 1 тогда
				
					НоваяСтрока = ТаблицаПростоев.Добавить();
					
					НоваяСтрока.МесяцВыборки = СтрокиЗаработка[0].МесяцВыборки;
					НоваяСтрока.НаличиеПростоев = 1;
			
			КонецЕсли;
			
			//vvv
			ОбработкаКомментариев=глЗначениеПеременной("глОбработкаСообщений");
			ОбработкаКомментариев.УдалитьСообщения();
			//
			Для каждого СтрокаТаблицы из ТаблицаПростоев цикл
				СтруктураПоиска.МесяцВыборки = СтрокаТаблицы.МесяцВыборки;
				//vvv комментируем, будем выводит информацию из таблицы ВидыПростоев 
				//СтрокиКУдалению = ТаблицаЗаписей.НайтиСтроки(СтруктураПоиска);
				//Для каждого ПустаяСтрока из СтрокиКУдалению цикл
				//	//						ТаблицаЗаписей.Удалить(ПустаяСтрока);
				//	Сообщить("Начисление отпуска №"+ Регистратор.Номер+ " "+ СокрЛП(ПустаяСтрока.ФизЛицо.Наименование));
				//	Сообщить("В месяц выборки "+ ПустаяСтрока.МесяцВыборки+" работник освобождался от основной работы. Проверьте правильность включения в расчет среднего");
				//КонецЦикла;
				//vvv
				СтрокиКУдалению = ВидыПростоев.НайтиСтроки(СтруктураПоиска);
				ВывелиМесяц=Ложь;
				Для каждого ПустаяСтрока из СтрокиКУдалению цикл										
					Если ПустаяСтрока.ВидПростоя=Справочники.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам ТОгда
						Продолжить;
					КонецЕсли;					
					Если Не ВывелиМесяц ТОгда
						СтрокаМесяца=ОбработкаКомментариев.ДобавитьСообщение("В месяц выборки "+ Формат(ПустаяСтрока.МесяцВыборки,"ДФ='ММММ гггг'")+" работник освобождался от основной работы:",Перечисления.ВидыСообщений.ВажнаяИнформация);						
						ВывелиМесяц=Истина;
					КонецЕсли;					
					РасшифровкаКомментария=Новый Массив;					
					РасшифровкаКомментария.Добавить(Новый Структура("Представление,Расшифровка", СокрЛП(ПустаяСтрока.НаименованиеПростоя), ПустаяСтрока.Регистратор));
					ОбработкаКомментариев.ДобавитьСообщение("",Перечисления.ВидыСообщений.Информация,РасшифровкаКомментария,СтрокаМесяца); 
				КонецЦикла;
				//
			КонецЦикла;
			//vvv
			ОбработкаКомментариев.ПоказатьСообщения();
			//
				
			//Остальные месяцы считаются поностью отработанными
			Для каждого СтрокаТаблицы из ТаблицаЗаписей цикл
				Строкатаблицы.ОтработаноПоПятидневке = СтрокаТаблицы.НормаПоПятидневке;
			КонецЦикла;
		КонецЕсли;
//_________________________________________________________________________________________________________________________		
// Расчет годовой премии для включения в выборку для среднего по отпуску в соответствии с п.18 глава 2 Инструкции о порядке
// исчисления среднего заработка, сохраняемого в случаях, предусмотренных законодательством
//_________________________________________________________________________________________________________________________		
		
		СтрокиОсновногоЗаработка = ТаблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск));
        КоличствоМесяцевСреднегоЗаработка = СтрокиОсновногоЗаработка.Количество();
		//vvv считаем, сколько месяцев попало в выборку, исключаем повторяющиеся. Повторение возможно в случае внутреннего совместительства
		ОбработанныеМесяцы=Новый СписокЗначений;
		Для Каждого СтрокаОсн Из СтрокиОсновногоЗаработка Цикл
			Если ОбработанныеМесяцы.НайтиПоЗначению(СтрокаОсн.МесяцВыборки)=Неопределено ТОгда
				ОбработанныеМесяцы.Добавить(СтрокаОсн.МесяцВыборки);
			КонецЕсли;			
		КонецЦикла;
		КоличствоМесяцевСреднегоЗаработка=ОбработанныеМесяцы.Количество();
		
 		//СтрокиГодовойПремии = ТаблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии));
		СтрокиГодовойПремии = ТаблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииОтпуск));
		//
		Если СтрокиГодовойПремии.Количество()<> 0 тогда
			Для каждого СтрокаПремии из СтрокиГодовойПремии цикл
				Если СтрокаПремии.ЧислоМесяцев = 12 Тогда
					
					КоличествоМесяцевВыборкиСреднего = (ГОД(СтрокаПремии.БазовыйПериодКонец)-ГОД(СтрокаПремии.БазовыйПериодНачало)) *12 + 1 - Месяц(СтрокаПремии.БазовыйПериодНачало) + Месяц(СтрокаПремии.БазовыйПериодКонец);   
					СтрокаПремии.НачисленнаяСумма = СтрокаПремии.Результат;
					СтрокаПремии.Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаПремии.НачисленнаяСумма/КоличествоМесяцевВыборкиСреднего*КоличствоМесяцевСреднегоЗаработка,Константы.ВалютаРегламентированногоУчета.Получить());; 	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
		
		СтрокиКУдалению = ТаблицаЗаписей.НайтиСтроки(Новый Структура("Результат", 0));
		Для Каждого ПустаяСтрока из СтрокиКУдалению Цикл
			ТаблицаЗаписей.Удалить(ПустаяСтрока);
		КонецЦикла;
		
		
		
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту") тогда
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Результат", 0);
		СтруктураПоиска.Вставить("КалендарныеДни", 0);
		
		СтрокиКУдалению = ТаблицаЗаписей.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого ПустаяСтрока из СтрокиКУдалению Цикл			
			ТаблицаЗаписей.Удалить(ПустаяСтрока);
		КонецЦикла;
//_________________________________________________________________________________________________________________________		
// Расчет годовой премии для включения в выборку для среднего по отпуску в соответствии с п.32 Положения о порядке
// обеспечения пособиями по временной нетрудоспособности и по беременности и родам
//_________________________________________________________________________________________________________________________		
		//Проверить премии
		//vvv
		//СтрокиГодовой = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии));
		СтрокиГодовой = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ));
		//
		Если СтрокиГодовой.Количество()<>0 тогда
			
			Для каждого СтрокиПр из СтрокиГодовой цикл
				СтрокиЗаработка = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета,МесяцВыборки", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ, СтрокиПр.МесяцВыборки));
				Если СтрокиЗаработка.Количество()<>0 тогда
					НормаПоГр = ?(СтрокиЗаработка[0].ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням,СтрокиЗаработка[0].НормаДней,СтрокиЗаработка[0].НормаЧасов); 
					ОтрабПоГр =  ?(СтрокиЗаработка[0].ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням,СтрокиЗаработка[0].ФактическиОтработаноДней,СтрокиЗаработка[0].ФактическиОтработаноЧасов); 
					СтрокиПр.Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокиПр.Результат *?(ОтрабПоГр/НормаПоГр >1,1,ОтрабПоГр/НормаПоГр),Константы.ВалютаРегламентированногоУчета.Получить());
					СтрокиПр.ЧислоМесяцев = 1;
					//vvv убираем 13 з.п. из расчета больничного
					СтрокиПр.Результат = 0;
					СтрокиПр.ЧислоМесяцев = 0;
					//
				Иначе СтрокиПр.Результат = 0;
				КонецЕсли;
			Конеццикла;
		КонецЕсли;
		
		//vvv
		//СтрокиГодовой = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоПремиям));
		СтрокиГодовой = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ));
		//
		Если СтрокиГодовой.Количество()<>0 тогда
			Для каждого СтрокиПр из СтрокиГодовой цикл
				//vvv
				//СтрокиЗаработка = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета,МесяцВыборки", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ, СтрокиПр.МесяцВыборки));
				СтрокиЗаработка = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета,МесяцВыборки,НеВключатьВРасчетПремии,Сотрудник", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ, СтрокиПр.МесяцВыборки,Ложь,СтрокиПр.Сотрудник));
				//
				Если СтрокиЗаработка.Количество()<>0 тогда					
					НормаПоГр = ?(СтрокиЗаработка[0].ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням,СтрокиЗаработка[0].НормаДней,СтрокиЗаработка[0].НормаЧасов); 
					//vvv
					Если РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Получить(Новый Структура("Организация", СтрокиЗаработка[0].Организация)).НормаДляПремииВСреднемПоГрафику ТОгда
						НормаПоГр = ?(СтрокиЗаработка[0].ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням,СтрокиЗаработка[0].НормаДнейДляПремии,СтрокиЗаработка[0].НормаЧасовДляПремии); 
					КонецЕсли;
					//
					ОтрабПоГр =  ?(СтрокиЗаработка[0].ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням,СтрокиЗаработка[0].ФактическиОтработаноДней,СтрокиЗаработка[0].ФактическиОтработаноЧасов); 
					СтрокиПр.Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокиПр.Результат *?(ОтрабПоГр/НормаПоГр >1,1,ОтрабПоГр/НормаПоГр),Константы.ВалютаРегламентированногоУчета.Получить());
					СтрокиПр.ЧислоМесяцев = 1;					
				КонецЕсли;
			Конеццикла;
		КонецЕсли;
		
		//vvv
		//СтрокиГодовой = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям));
		СтрокиГодовой = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ));
		//
		Если СтрокиГодовой.Количество()<>0 тогда
			Для каждого СтрокиПр из СтрокиГодовой цикл
				//vvv
				//СтрокиЗаработка = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета,МесяцВыборки", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ, СтрокиПр.МесяцВыборки));
				СтрокиЗаработка = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета,МесяцВыборки,Сотрудник", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ, СтрокиПр.МесяцВыборки,СтрокиПр.Сотрудник));
				//
				Если СтрокиЗаработка.Количество()<>0 тогда
					НормаПоГр = ?(СтрокиЗаработка[0].ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням,СтрокиЗаработка[0].НормаДней,СтрокиЗаработка[0].НормаЧасов); 
					//vvv
					Если РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Получить(Новый Структура("Организация", СтрокиЗаработка[0].Организация)).НормаДляПремииВСреднемПоГрафику ТОгда
						НормаПоГр = ?(СтрокиЗаработка[0].ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням,СтрокиЗаработка[0].НормаДнейДляПремии,СтрокиЗаработка[0].НормаЧасовДляПремии);
					КонецЕсли;					
					//
					ОтрабПоГр =  ?(СтрокиЗаработка[0].ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням,СтрокиЗаработка[0].ФактическиОтработаноДней,СтрокиЗаработка[0].ФактическиОтработаноЧасов); 
					СтрокиПр.Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокиПр.Результат * ?(ОтрабПоГр/НормаПоГр >1,1,ОтрабПоГр/НормаПоГр),Константы.ВалютаРегламентированногоУчета.Получить());
					СтрокиПр.ЧислоМесяцев = 1;
				//vvv убираем фикс. премии если не было отработанных часов в месяце
				Иначе
					СтрокиПр.Результат=0;
					СтрокиПр.ЧислоМесяцев=0;
				//	
				КонецЕсли;
			Конеццикла;
		КонецЕсли;
		
		СтрокиКУдалению = ТаблицаЗаписей.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого ПустаяСтрока из СтрокиКУдалению Цикл			
			ТаблицаЗаписей.Удалить(ПустаяСтрока);
		КонецЦикла;
		
		//Ограничение на 4 средних заработка
		ВременнаяТаблица = ТаблицаЗаписей.Скопировать();
		ВременнаяТаблица.Свернуть("МесяцВыборки,ВидОграниченияЗаработка","Результат,КалендарныеДни");
		Для Каждого Строка ИЗ ВременнаяТаблица Цикл
			
			Если Строка.ВидОграниченияЗаработка = Перечисления.ВидыОграниченияЗаработка.ВРазмере4СреднихЗарплат Тогда
				РазмерСреднейЗарплаты = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(НачалоМесяца(Строка.МесяцВыборки)-1,Новый Структура("ВидПараметра",Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников)).Размер;
		        ОграничениеПоДоходам  = РегистрыСведений.СтавкиОтчисленийСФОТиЗП.ПолучитьПоследнее(КонецМесяца(НачалоМесяца(Строка.МесяцВыборки)),Новый Структура("ВидОтчисления",Перечисления.ВидыОтчисленийСФОТиЗП.ФСЗН)).ОграничениеПоДоходам;
				РазмерОграничения = РазмерСреднейЗарплаты*ОграничениеПоДоходам;
			Иначе
				РазмерСреднейЗарплаты = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(НачалоМесяца(Строка.МесяцВыборки),Новый Структура("ВидПараметра",Перечисления.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников)).Размер;
				КалендарныйДнейВМесяце = День(КонецМесяца(Строка.МесяцВыборки));
		      	РазмерОграничения = РазмерСреднейЗарплаты*Строка.КалендарныеДни/КалендарныйДнейВМесяце;

			КонецЕсли;
			СтрокиЗаработка = ТаблицаЗаписей.НайтиСтроки(Новый Структура("МесяцВыборки", Строка.МесяцВыборки));
			Если Строка.Результат > РазмерОграничения Тогда
				Для Каждого СтрокаЗаработка из СтрокиЗаработка  Цикл
					СтрокаЗаработка.НачисленнаяСумма = СтрокаЗаработка.Результат;
					СтрокаЗаработка.Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокаЗаработка.Результат/Строка.Результат*РазмерОграничения,Константы.ВалютаРегламентированногоУчета.Получить());			
				КонецЦикла;
			Иначе
				Для Каждого СтрокаЗаработка из СтрокиЗаработка  Цикл
					СтрокаЗаработка.НачисленнаяСумма = СтрокаЗаработка.Результат;
				КонецЦикла;
            КонецЕсли;
		КонецЦикла;
					
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.РасчетПриУвольненииРаботникаОрганизаций") тогда
		СтрокиКУдалению = ТаблицаЗаписей.НайтиСтроки(Новый Структура("Результат", 0));
		Для Каждого ПустаяСтрока из СтрокиКУдалению Цикл
			ТаблицаЗаписей.Удалить(ПустаяСтрока);
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура("МесяцВыборки");
		//Проанализировать простои
		СтрокиЗаработка = ТаблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск));
		
		Если СтрокиЗаработка.Количество() <> 0 тогда
			ПервыйМесяцВыборки = Месяц(СтрокиЗаработка[0].МесяцВыборки);
			ПервыйГодВыборки   = Год(СтрокиЗаработка[0].МесяцВыборки);
			
			ПоРаботнику = РегистрыСведений.РаботникиОрганизаций.СрезПервых(,Новый Структура("Сотрудник,Организация",СтрокиЗаработка[0].Сотрудник,СтрокиЗаработка[0].Организация)); 
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема КАК ДатаПриема
			               |ИЗ
			               |	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
			               |ГДЕ
			               |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник = &ФизЛицо
						   |
			               |УПОРЯДОЧИТЬ ПО
			               |	ДатаПриема УБЫВ";
			
			Запрос.УстановитьПараметр("ФизЛицо", СтрокиЗаработка[0].Сотрудник);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() тогда
				ДатаПриемаРаботника = Выборка.ДатаПриема;
			КонецЕсли;
			
			
			МесяцПриема = Месяц(ДатаПриемаРаботника);
			ГодПриема   = Год(ДатаПриемаРаботника);
			
			Если ПервыйГодВыборки = ГодПриема И ПервыйМесяцВыборки = МесяцПриема И День(ДатаПриемаРаботника)>0 тогда
				Если  СтрокиЗаработка[0].ОтработаноПоПятидневке < СтрокиЗаработка[0].НормаПоПятидневке тогда
					НоваяСтрока = ТаблицаПростоев.Добавить();
					
					НоваяСтрока.МесяцВыборки = СтрокиЗаработка[0].МесяцВыборки;
					НоваяСтрока.НаличиеПростоев = 1;
				КонецЕсли;
			КонецЕсли;
			
			Если таблицаПростоев.Количество() = СтрокиЗаработка.Количество() тогда
				//Нет ни одного полного месяца
				//Оставляем выборку для перерасчета до полных месяцев
			Иначе
				//Есть полностью отработанные месяцы
				//Удаляем из выборки неполные месяцы
				
				Для каждого СтрокаТаблицы из ТаблицаПростоев цикл
					СтруктураПоиска.МесяцВыборки = СтрокаТаблицы.МесяцВыборки;
					СтрокиКУдалению = ТаблицаЗаписей.НайтиСтроки(СтруктураПоиска);
					Для каждого ПустаяСтрока из СтрокиКУдалению цикл
//						ТаблицаЗаписей.Удалить(ПустаяСтрока);
						Сообщить("Начисление отпуска №"+ Регистратор.Номер+ " "+ СокрЛП(ПустаяСтрока.ФизЛицо.Наименование));
						Сообщить("Месяц выборки "+ ПустаяСтрока.МесяцВыборки+" содержит простои или больничные листы. Проверьте правильность включения в расчет среднего");
					КонецЦикла;
				КонецЦикла;
				
			КонецЕсли;
			
			//Остальные месяцы считаются поностью отработанными
			Для каждого СтрокаТаблицы из ТаблицаЗаписей цикл
				Строкатаблицы.ОтработаноПоПятидневке = СтрокаТаблицы.НормаПоПятидневке;
			КонецЦикла;
		КонецЕсли;
//_________________________________________________________________________________________________________________________		
// Расчет годовой премии для включения в выборку для среднего по отпуску в соответствии с п.18 глава 2 Инструкции о порядке
// исчисления среднего заработка, сохраняемого в случаях, предусмотренных законодательством
//_________________________________________________________________________________________________________________________		
		
		
		СтрокиОсновногоЗаработка = ТаблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск));
        КоличствоМесяцевСреднегоЗаработка = СтрокиОсновногоЗаработка.Количество();
 		СтрокиГодовойПремии = ТаблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии));
		Если СтрокиГодовойПремии.Количество()<> 0 тогда
			Для каждого СтрокаПремии из СтрокиГодовойПремии цикл
				Если СтрокаПремии.ЧислоМесяцев = 12 Тогда
					СтрокаПремии.Результат = СтрокаПремии.Результат/СтрокаПремии.ЧислоМесяцев*КоличствоМесяцевСреднегоЗаработка; 	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;


					
		
		
//_________________________________________________________________________________________________________________________		
// Расчет годовой премии для включения в выборку для среднего по отпуску в соответствии с п.28 глава 3 Инструкции о порядке
// исчисления среднего заработка, сохраняемого в случаях, предусмотренных законодательством
//_________________________________________________________________________________________________________________________		

		СтрокиГодовой = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета,СпособРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоПремиям,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку));
		Если СтрокиГодовой.Количество()<>0 тогда
			Для каждого СтрокиПр из СтрокиГодовой цикл
				СтрокиЗаработка = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета,МесяцВыборки", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку, СтрокиПр.МесяцВыборки));
				Если СтрокиЗаработка.Количество()<>0 тогда
					Если СтрокиПр.БПНачало < СтрокиПр.МесяцВыборки И СтрокиПр.БПКонец < СтрокиПр.МесяцВыборки тогда
						НормаПоГр = ?(СтрокиЗаработка[0].ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням,СтрокиЗаработка[0].НормаДней,СтрокиЗаработка[0].НормаЧасов); 
						ОтрабПоГр =  ?(СтрокиЗаработка[0].ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням,СтрокиЗаработка[0].ФактическиОтработаноДней,СтрокиЗаработка[0].ФактическиОтработаноЧасов); 
						СтрокиПр.Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокиПр.Результат * ОтрабПоГр/НормаПоГр,Константы.ВалютаРегламентированногоУчета.Получить());
						СтрокиПр.ЧислоМесяцев = 1;
					Иначе
						СтрокиПр.ЧислоМесяцев = 1;
					КонецЕсли;
				КонецЕсли;
			Конеццикла;
		КонецЕсли;
		
		СтрокиГодовой = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета,СпособРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку));
		Если СтрокиГодовой.Количество()<>0 тогда
			Для каждого СтрокиПр из СтрокиГодовой цикл
				СтрокиЗаработка = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета,МесяцВыборки", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку, СтрокиПр.МесяцВыборки));
				Если СтрокиЗаработка.Количество()<>0 тогда
					НормаПоГр = ?(СтрокиЗаработка[0].ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням,СтрокиЗаработка[0].НормаДней,СтрокиЗаработка[0].НормаЧасов); 
					ОтрабПоГр =  ?(СтрокиЗаработка[0].ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням,СтрокиЗаработка[0].ФактическиОтработаноДней,СтрокиЗаработка[0].ФактическиОтработаноЧасов); 
					СтрокиПр.Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокиПр.Результат * ОтрабПоГр/НормаПоГр,Константы.ВалютаРегламентированногоУчета.Получить());
					СтрокиПр.ЧислоМесяцев = 1;
				КонецЕсли;
			Конеццикла;
		КонецЕсли;
		
		СтрокиГодовой = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета,СпособРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку));
		Если СтрокиГодовой.Количество()<>0 тогда
			Для каждого СтрокиПр из СтрокиГодовой цикл
				Если СтрокиПр.ЧислоМесяцев=1 тогда
					Сообщить("В премии, выплачиваемые за период включен вид расчета за 1 месяц. Исправьте базовые виды расчетов дл ярасчета среднего");
				Иначе
					
					//Определим период в который включается премия
					Если СтрокиПр.ЧислоМесяцев = 12 тогда
						Д1 = НачалоГода(СтрокиПр.МесяцВыборки);
						Д2 = КонецГода(СтрокиПр.МесяцВыборки);
					ИначеЕсли СтрокиПр.ЧислоМесяцев = 6 тогда
						Если Месяц(СтрокиПр.МесяцВыборки)<=6 тогда
							Д1 = НачалоГода(СтрокиПр.Месяцвыборки);
							д2 = Дата(Год(СтрокиПр.МесяцВыборки),6,30);
						Иначе
							Д1 = Дата(Год(СтрокиПр.МесяцВыборки),7,1);
							д2 = Конецгода(СтрокиПр.МесяцВыборки);
						КонецЕсли;
					ИначеЕсли СтрокиПр.ЧислоМесяцев = 3 тогда
						Д1 = НачалоКвартала(СтрокиПр.Месяцвыборки);
						Д2 = КонецКвартала(СтрокиПр.МесяцВыборки);
					Иначе
						Д1 = СтрокиПр.МесяцВыборки;
						Д2 = СтрокиПр.МесяцВыборки;
					Конецесли;
					
					СтрокиЗаработка = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку));
					
					Если СтрокиЗаработка.Количество()<>0 тогда
						
						Для каждого СтрокаЗп из СтрокиЗаработка цикл
							
							Если СтрокаЗп.МесяцВыборки>= Д1 и СтрокаЗп.МесяцВыборки<=КонецМесяца(д2) тогда
								ДопСтрокаДвижений = ТаблицаЗаписей.Добавить();
								
								ДопСтрокаДвижений.ПериодРегистрации = СтрокаЗп.ПериодРегистрации;
								ДопСтрокаДвижений.ВидРасчета 		= СтрокиПр.ВидРасчета;
								ДопСтрокаДвижений.Регистратор 		= Регистратор;
								ДопСтрокаДвижений.НомерСтроки		= СтрокиПр.НомерСтроки;
								
								// измерения
								ДопСтрокаДвижений.Сотрудник 		= СтрокаЗп.Сотрудник;
								ДопСтрокаДвижений.ФизЛицо 		= СтрокаЗп.ФизЛицо;
								ДопСтрокаДвижений.Организация	= СтрокаЗп.Организация;
								//ДопСтрокаДвижений.Приказ 		= СтрокаЗп.Приказ;
								
								// свойства
								ДопСтрокаДвижений.БазовыйПериодНачало 		 	 = СтрокиПр.БазовыйПериодНачало;
								ДопСтрокаДвижений.БазовыйПериодКонец 		 	 = СтрокиПр.БазовыйПериодКонец;
								
								// реквизиты							
								ДопСтрокаДвижений.ДатаНачалаРасчетногоПериода 	 = СтрокаЗп.ДатаНачалаРасчетногоПериода;
								ДопСтрокаДвижений.ДатаОкончанияРасчетногоПериода = СтрокаЗп.ДатаОкончанияРасчетногоПериода;
								ДопСтрокаДвижений.СпособРасчета 				 = СтрокиПр.СпособРасчета;
								ДопСтрокаДвижений.ПериодРасчетаСреднегоЗаработка = СтрокиПр.ПериодРасчетаСреднегоЗаработка;
								
								ДопСтрокаДвижений.ТекущаяТарифнаяСтавка			 = СтрокиПр.ТекущаяТарифнаяСтавка;
								ДопСтрокаДвижений.ТарифнаяСтавкаПериода			 = СтрокиПр.ТарифнаяСтавкаПериода; 
								ДопСтрокаДвижений.КоэффициентИндексации 		 = СтрокиПр.КоэффициентИндексации;
								
								НормаПоГр = ?(СтрокиЗаработка[0].НормаДней=0, ?(СтрокиЗаработка[0].НормаЧасов = 0, СтрокиЗаработка[0].НормаПоПятидневке,СтрокиЗаработка[0].НормаЧасов),СтрокиЗаработка[0].НормаДней);
								ОтрабПоГр = ?(СтрокиЗаработка[0].ОтработаноДней=0, ?(СтрокиЗаработка[0].ОтработаноЧасов=0,СтрокиЗаработка[0].ОтработаноПоПятидневке,СтрокиЗаработка[0].ОтработаноЧасов),СтрокиЗаработка[0].ОтработаноДней);
								
								ДопСтрокаДвижений.Результат 					= ОбщегоНазначения.ОкруглитьПоВалюте((СтрокиПр.Результат/СтрокиПр.ЧислоМесяцев) * ОтрабПоГр/НормаПоГр,Константы.ВалютаРегламентированногоУчета.Получить());
								ДопСтрокаДвижений.ЧислоМесяцев 					= 1;
								ДопСтрокаДвижений.ПериодРасчетаСреднегоЗаработка= СтрокиПр.ПериодРасчетаСреднегоЗаработка;
								ДопСтрокаДвижений.МесяцВыборки 					= СтрокаЗп.МесяцВыборки;
								
								ДопСтрокаДвижений.ОтработаноПоПятидневке 			= СтрокиПр.ОтработаноПоПятидневке;
								ДопСтрокаДвижений.НормаПоПятидневке 				= СтрокиПр.НормаПоПятидневке;
								ДопСтрокаДвижений.ОтработаноДней 					= СтрокиПр.ОтработаноДней;
								ДопСтрокаДвижений.ОтработаноЧасов 					= СтрокиПр.ОтработаноЧасов;
								ДопСтрокаДвижений.НормаДней 					= СтрокиПр.НормаДней;
								ДопСтрокаДвижений.НормаЧасов 					= СтрокиПр.НормаЧасов;
							КонецЕсли;		
						Конеццикла;
					КонецЕсли;
					СтрокиПр.Результат = 0;
				КонецЕсли;
			Конеццикла;
		КонецЕсли;
		
		СтрокиКУдалению = ТаблицаЗаписей.НайтиСтроки(Новый Структура("Результат", 0));
		Для Каждого ПустаяСтрока из СтрокиКУдалению Цикл
			ТаблицаЗаписей.Удалить(ПустаяСтрока);
		КонецЦикла;
		
	Иначе
		//Все остальные случаи предусмотренные законодательством
		СтрокиКУдалению = ТаблицаЗаписей.НайтиСтроки(Новый Структура("Результат", 0));
		Для Каждого ПустаяСтрока из СтрокиКУдалению Цикл
			ТаблицаЗаписей.Удалить(ПустаяСтрока);
		КонецЦикла;
//_________________________________________________________________________________________________________________________		
// Расчет годовой премии для включения в выборку для среднего по отпуску в соответствии с п.28 глава 3 Инструкции о порядке
// исчисления среднего заработка, сохраняемого в случаях, предусмотренных законодательством
//_________________________________________________________________________________________________________________________		

		СтрокиГодовой = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоПремиям));
		Если СтрокиГодовой.Количество()<>0 тогда
			Для каждого СтрокиПр из СтрокиГодовой цикл
				СтрокиЗаработка = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета,МесяцВыборки", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку, СтрокиПр.МесяцВыборки));
				Если СтрокиЗаработка.Количество()<>0 тогда
					//vvv
					//Если СтрокиПр.БПНачало < СтрокиПр.МесяцВыборки И СтрокиПр.БПКонец < СтрокиПр.МесяцВыборки тогда
					Если СтрокиПр.БПНачало <= КонецДня(КонецМесяца(СтрокиПр.МесяцВыборки)) И СтрокиПр.БПКонец <= КонецДня(КонецМесяца(СтрокиПр.МесяцВыборки)) тогда
						//
						НормаПоГр = ?(СтрокиЗаработка[0].ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням,СтрокиЗаработка[0].НормаДней,СтрокиЗаработка[0].НормаЧасов); 
						ОтрабПоГр =  ?(СтрокиЗаработка[0].ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням,СтрокиЗаработка[0].ФактическиОтработаноДней,СтрокиЗаработка[0].ФактическиОтработаноЧасов); 
						//vvv
						Если ОтрабПоГр>=НормаПоГр ТОгда //если отработано больше нормы, премию берем исходя их нормы
							ОтрабПоГр=НормаПоГр;
						КонецЕсли;	
						//
						//vvv комментируем
						//СтрокиПр.Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокиПр.Результат * ОтрабПоГр/НормаПоГр,Константы.ВалютаРегламентированногоУчета.Получить());
						СтрокиПр.ЧислоМесяцев = 1;
					Иначе
						СтрокиПр.ЧислоМесяцев = 1;
					КонецЕсли;
				КонецЕсли;
			Конеццикла;
		КонецЕсли;
		
		СтрокиГодовой = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям));
		Если СтрокиГодовой.Количество()<>0 тогда
			Для каждого СтрокиПр из СтрокиГодовой цикл
				СтрокиЗаработка = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета,МесяцВыборки", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку, СтрокиПр.МесяцВыборки));
				Если СтрокиЗаработка.Количество()<>0 тогда
					НормаПоГр = ?(СтрокиЗаработка[0].ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням,СтрокиЗаработка[0].НормаДней,СтрокиЗаработка[0].НормаЧасов); 
					ОтрабПоГр =  ?(СтрокиЗаработка[0].ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням,СтрокиЗаработка[0].ФактическиОтработаноДней,СтрокиЗаработка[0].ФактическиОтработаноЧасов);
					//vvv
					Если ОтрабПоГр>=НормаПоГр ТОгда //если отработано больше нормы, премию берем исходя их нормы
						ОтрабПоГр=НормаПоГр;
					КонецЕсли;	
					//
					СтрокиПр.Результат = ОбщегоНазначения.ОкруглитьПоВалюте(СтрокиПр.Результат * ОтрабПоГр/НормаПоГр,Константы.ВалютаРегламентированногоУчета.Получить());
					СтрокиПр.ЧислоМесяцев = 1;
         		КонецЕсли;
			Конеццикла;
		КонецЕсли;
		
		//vvv если было начисление 13-й в тек. году за прошлый, сумму 13-й, начисленной в прошлом году за позапрошлый брать не будем
		СтрокиГодовой = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии));
		БылоНачислениеВТекущемГоду=Ложь;
	
		Для каждого СтрокиПр из СтрокиГодовой цикл
			Если Год(СтрокиПр.МесяцВыборки)=Год(СтрокиПр.ДатаНачалаСобытия) и (СтрокиПр.ЧислоМесяцев=12) Тогда
				БылоНачислениеВТекущемГоду=Истина;
				Прервать;
			КонецЕсли;			
		КОнецЦикла;
		
		Если БылоНачислениеВТекущемГоду ТОгда
			Для каждого СтрокиПр из СтрокиГодовой цикл
				Если Год(СтрокиПр.МесяцВыборки)<>Год(СтрокиПр.ДатаНачалаСобытия) и (СтрокиПр.ЧислоМесяцев=12) Тогда
					ТаблицаЗаписей.Удалить(СтрокиПр);
				КонецЕсли;			
			КОнецЦикла;
		КонецЕсли;
		//Выявим квартальные премии. Если квартальная премия выплачивалась несколько раз за квартал, то в расчет среднего идет последняя
		СтрокиКв = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета,ЧислоМесяцев", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии,3));
		//
		СтрокиГодовой = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии));
		Если СтрокиГодовой.Количество()<>0 тогда
			Для каждого СтрокиПр из СтрокиГодовой цикл
				Если СтрокиПр.ЧислоМесяцев=1 тогда
					Сообщить("В премии, выплачиваемые за период включен вид расчета за 1 месяц. Исправьте базовые виды расчетов дл ярасчета среднего");
				Иначе
					
					//Определим период в который включается премия
					//vvv закомментируем
					//Если СтрокиПр.ЧислоМесяцев = 12 тогда
					//	Д1 = НачалоГода(СтрокиПр.МесяцВыборки);
					//	Д2 = КонецГода(СтрокиПр.МесяцВыборки);
					//ИначеЕсли СтрокиПр.ЧислоМесяцев = 6 тогда
					//	Если Месяц(СтрокиПр.МесяцВыборки)<=6 тогда
					//		Д1 = НачалоГода(СтрокиПр.Месяцвыборки);
					//		д2 = Дата(Год(СтрокиПр.МесяцВыборки),6,30);
					//	Иначе
					//		Д1 = Дата(Год(СтрокиПр.МесяцВыборки),7,1);
					//		д2 = Конецгода(СтрокиПр.МесяцВыборки);
					//	КонецЕсли;
					//ИначеЕсли СтрокиПр.ЧислоМесяцев = 3 тогда
					//	Д1 = НачалоКвартала(СтрокиПр.Месяцвыборки);
					//	Д2 = КонецКвартала(СтрокиПр.МесяцВыборки);
					//	//vvv
					//	//квартальная премия вкл. в расчет среднего в течение 3-месяцев после выплаты, включая месяц выплаты
					//	Д1 = СтрокиПр.БПКонец;						
					//	Д2 = ДобавитьМесяц(СтрокиПр.БПКонец,2);
					//Иначе
					//	Д1 = СтрокиПр.МесяцВыборки;
					//	Д2 = СтрокиПр.МесяцВыборки;
					//Конецесли;
										
					Д1 = НачалоМесяца(СтрокиПр.МесяцВыборки);
					Д2 = ДобавитьМесяц(СтрокиПр.МесяцВыборки,СтрокиПр.ЧислоМесяцев-1);
					
					//vvv
					Если СтрокиПр.ЧислоМесяцев = 3 Тогда
					//	Д1 = НачалоКвартала(СтрокиПр.Месяцвыборки);
					//	Д2 = КонецКвартала(СтрокиПр.МесяцВыборки);					
					//квартальная премия вкл. в расчет среднего в течение 3-месяцев после выплаты, включая месяц выплаты
						Д1 = НачалоМесяца(СтрокиПр.БПКонец);						
						Д2 = ДобавитьМесяц(СтрокиПр.БПКонец,2);
						Д1 = НачалоМесяца(СтрокиПр.Месяцвыборки);						
						Д2 = КонецМесяца(ДобавитьМесяц(Д1,2));
					КонецЕсли;
				    //
					СтрокиЗаработка = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку));
					//vvv
					Если Не Регистратор.ВключатьВСреднююЗаработокПоВнутреннемуСовместительству Тогда
						СтрокиЗаработка = таблицаЗаписей.НайтиСтроки(Новый Структура("ВидРасчета,Сотрудник", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку,СтрокиПр.Сотрудник));
					КонецЕсли;
					//
					
					Если СтрокиЗаработка.Количество()<>0 тогда
						
						Для каждого СтрокаЗп из СтрокиЗаработка цикл
							
							Если СтрокаЗп.МесяцВыборки>= Д1 и СтрокаЗп.МесяцВыборки<=КонецМесяца(д2) тогда
								//vvv
								ВключатьВыплату = Истина;
								
								Если (СтрокиПр.МесяцВыборки<СтрокаЗп.МесяцВыборки) И (СтрокиПр.ЧислоМесяцев=3)ТОгда //определяем были ли выплаты в будущем, чтобы не брать текущий месяц, т.к. в средний заработок берем последнее начисление квартальной премии
																		
									Для каждого СтрКв из СтрокиКв Цикл
										
										Если СтрКв =  СтрокиПр ТОгда Продолжить; КонецЕсли;
										
										Если (СтрКв.МесяцВыборки>= Д1 и СтрКв.МесяцВыборки<=КонецМесяца(д2)) и (СтрокиПр.БПНачало<>СтрКв.БПНачало) тогда
											
											ВключатьВыплату = Ложь;
											Прервать;
											
										КонецЕсли;										
										
									КонецЦикла;
									
									
								КонецЕсли;								
								
								Если Не ВключатьВыплату Тогда
									
									Продолжить;
									 
								КонецЕсли;								
								//
								ДопСтрокаДвижений = ТаблицаЗаписей.Добавить();
								
								ДопСтрокаДвижений.ПериодРегистрации = СтрокаЗп.ПериодРегистрации;
								ДопСтрокаДвижений.ВидРасчета 		= СтрокиПр.ВидРасчета;
								ДопСтрокаДвижений.Регистратор 		= Регистратор;
								ДопСтрокаДвижений.НомерСтроки		= СтрокиПр.НомерСтроки;
								
								// измерения
								ДопСтрокаДвижений.Сотрудник 		= СтрокаЗп.Сотрудник;
								ДопСтрокаДвижений.ФизЛицо 		= СтрокаЗп.ФизЛицо;
								ДопСтрокаДвижений.Организация	= СтрокаЗп.Организация;
								//ДопСтрокаДвижений.Приказ 		= СтрокаЗп.Приказ;
								
								// свойства
								ДопСтрокаДвижений.БазовыйПериодНачало 		 	 = СтрокиПр.БазовыйПериодНачало;
								ДопСтрокаДвижений.БазовыйПериодКонец 		 	 = СтрокиПр.БазовыйПериодКонец;
								
								// реквизиты								
								ДопСтрокаДвижений.ДатаНачалаРасчетногоПериода 	 = СтрокаЗп.ДатаНачалаРасчетногоПериода;
								ДопСтрокаДвижений.ДатаОкончанияРасчетногоПериода = СтрокаЗп.ДатаОкончанияРасчетногоПериода;
								ДопСтрокаДвижений.СпособРасчета 				 = СтрокиПр.СпособРасчета;
								ДопСтрокаДвижений.ПериодРасчетаСреднегоЗаработка = СтрокиПр.ПериодРасчетаСреднегоЗаработка;
								
								//vvv с 01.10.17 новая инструкция, годовые и квартальные премии индексируются также как и основной заработок и включаются в расчет среднего
								// в ПОЛНОМ объеме, а не пропорционально, поэтому добавим "если".								
								Если Не РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Получить(Новый Структура("Организация", СтрокиЗаработка[0].Организация)).ИндексироватьГодовуюПремиюКакОсновнойЗаработок ТОгда
									ДопСтрокаДвижений.ТекущаяТарифнаяСтавка			 = СтрокиПр.ТекущаяТарифнаяСтавка;
									ДопСтрокаДвижений.ТарифнаяСтавкаПериода			 = СтрокиПр.ТарифнаяСтавкаПериода; 
									ДопСтрокаДвижений.КоэффициентИндексации 		 = СтрокиПр.КоэффициентИндексации;
								Иначе									
									ДопСтрокаДвижений.ТекущаяТарифнаяСтавка			 = СтрокаЗп.ТекущаяТарифнаяСтавка;
									ДопСтрокаДвижений.ТарифнаяСтавкаПериода			 = СтрокаЗп.ТарифнаяСтавкаПериода; 
									ДопСтрокаДвижений.КоэффициентИндексации 		 = СтрокаЗп.КоэффициентИндексации;
								КонецЕсли;							
								//
																								
								НормаПоГр = ?(СтрокаЗп.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням,СтрокаЗп.НормаДней,СтрокаЗп.НормаЧасов); 
								ОтрабПоГр = ?(СтрокаЗп.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням,СтрокаЗп.ФактическиОтработаноДней,СтрокаЗп.ФактическиОтработаноЧасов); 
								
								//vvv с 01.10.17 новая инструкция по расчету среднего, поэтому добавим "если"
								Если РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Получить(Новый Структура("Организация", СтрокиЗаработка[0].Организация)).ГодоваяПремияПропорциональноОтработанномуВремени ТОгда
									ДопСтрокаДвижений.Результат 					= ОбщегоНазначения.ОкруглитьПоВалюте((СтрокиПр.Результат/СтрокиПр.ЧислоМесяцев) * ОтрабПоГр/НормаПоГр,Константы.ВалютаРегламентированногоУчета.Получить());
								Иначе	
									ДопСтрокаДвижений.Результат 					= ОбщегоНазначения.ОкруглитьПоВалюте((СтрокиПр.Результат/СтрокиПр.ЧислоМесяцев),Константы.ВалютаРегламентированногоУчета.Получить());
								КонецЕсли;								
								//
								ДопСтрокаДвижений.ЧислоМесяцев 					= 1;
								ДопСтрокаДвижений.ПериодРасчетаСреднегоЗаработка= СтрокиПр.ПериодРасчетаСреднегоЗаработка;
								ДопСтрокаДвижений.МесяцВыборки 					= СтрокаЗп.МесяцВыборки;
								
								ДопСтрокаДвижений.ОтработаноПоПятидневке 			= СтрокиПр.ОтработаноПоПятидневке;
								ДопСтрокаДвижений.НормаПоПятидневке 				= СтрокиПр.НормаПоПятидневке;
								ДопСтрокаДвижений.ОтработаноДней 					= СтрокиПр.ОтработаноДней;
								ДопСтрокаДвижений.ОтработаноЧасов 					= СтрокиПр.ОтработаноЧасов;
								ДопСтрокаДвижений.НормаДней 						= СтрокиПр.НормаДней;
								ДопСтрокаДвижений.НормаЧасов 						= СтрокиПр.НормаЧасов;
								ДопСтрокаДвижений.ДатаНачалаСобытия 				= СтрокиПр.ДатаНачалаСобытия;

							КонецЕсли;		
						Конеццикла;
					КонецЕсли;
					СтрокиПр.Результат = 0;
				КонецЕсли;
			Конеццикла;
		КонецЕсли;
		
		СтрокиКУдалению = ТаблицаЗаписей.НайтиСтроки(Новый Структура("Результат", 0));
		Для Каждого ПустаяСтрока из СтрокиКУдалению Цикл
			ТаблицаЗаписей.Удалить(ПустаяСтрока);
		КонецЦикла;
	КонецЕсли;

	
	Если таблицаЗаписей.Количество() = 0 тогда
		Сообщить("Невозможно выбрать данные для расчета среднего. Введите данные вручную");
	КонецЕсли;
	//vvv
	ТаблицаЗаписей.Сортировать("МесяцВыборки,НомерСтроки");	
	ТаблицаЗаписей.Свернуть("Активность,БПКонец,БПНачало,БазовыйПериодКонец,БазовыйПериодНачало,ВидОграниченияЗаработка,ВидРасчета,ВидУчетаВремени,ДатаНачалаРасчетногоПериода,ДатаНачалаСобытия, ДатаОкончанияРасчетногоПериода,КалендарныеДни,КоэффициентИндексации,МесяцВыборки,НомерСтроки,НормаДней,НормаДнейДляПремии,НормаДнейПоГрафику,НормаПоПятидневке,НормаЧасов,НормаЧасовДляПремии,НормаЧасовПоГрафику,Организация,ОтработаноДней,ОтработаноПоПятидневке,ОтработаноЧасов,ПериодРасчетаСреднегоЗаработка,ПериодРегистрации,РасчетВнутреннегоСовместителя, Регистратор,Сотрудник,СпособРасчета,Сторно,ТарифнаяСтавкаПериода,ТекущаяТарифнаяСтавка, ФактическиОтработаноДней,ФактическиОтработаноЧасов, ФизЛицо, ЧислоМесяцев","Результат,НачисленнаяСумма");
	//
	НаборЗаписей.Загрузить(ТаблицаЗаписей);
	НаборЗаписей.Записать(Истина,);
	
КонецПроцедуры

// Получает данные для расчета ресурсов записей регистра расчета
//
//	ИмяРегистра - строка, имя регистра расчета
//	КатегорияРасчета - ссылка на значение перечисленич КатегорииРасчетов
//	НеобходимыеДанные - Структура с элементами 
//			База,
//			НормаВремени,
//			ОтработаноВремени,
//			...
//	Регистратор - ссылка на документ
//	Организация - ссылка на организацию по которой проводится Регистратор
//	ПериодРегистрации
//	Перерасчет - булево - признак того, что получаем данные для случая перерасчета
//	Физлица - массив ссылок на физлиц - выбранные для перерасчета физлица, или массив содержащий ссылку
//			  на физлицо по которому производится расчет (расчет по одному работнику из документа)	
//
// Возвращает выборку результата запроса
Функция ПолучитьДанныеДляРасчета(ИмяРегистра,
									КатегорияНачисления,
									НеобходимыеДанные,
									Регистратор,
									Организация,
									ПериодРегистрации,
									Перерасчет = Ложь,
									Физлица = Неопределено,
									КомментироватьРасчет = Ложь, ФормаКомментариев = НеОпределено) Экспорт

									
	/////////////////////////////////////////////////////////////////////
	// Вложенные запросы
	// для получения данных расчета
	// Реализованы как временные таблицы
	
	// таблица СотрудникиДляПерерасчетаТекст
	// Список сотрудников по которым необходимо выполнить перерасчет
	// Поля:
	//		Сотрудник
	// Описание:
	// Получает список неповторяющихся сотрудников по которым есть записи
	// перерасчета в одной из таблиц перерасчета - по основным или дополнительным начислениям
	//
	ФизлицаДляПерерасчетаТекст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Перерасчет.Физлицо КАК Физлицо
	|ПОМЕСТИТЬ ВТФизлицаДляПерерасчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		Перерасчет.Физлицо КАК Физлицо
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Перерасчет.Физлицо
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор) КАК Перерасчет
	|ИНДЕКСИРОВАТЬ ПО 
	|	Физлицо";
	
	// ДанныеОСреднемЗаработке
	//		Таблица данных о среднем заработке
	// 
	//	Поля:
	//		СреднийЗаработок - суммируем
	//		ОтработаноДней - для расчета среднего
	//		ОтработаноЧасов - для расчета среднего
	//		Сотрудник,
	//		СпособРасчета,                 - это для идентификации записи в основном регистре расчета
	//		ДатаНачалаРасчетногоПериода,   - это для идентификации записи в основном регистре расчета
	//		ДатаОкончанияРасчетногоПериода - это для идентификации записи в основном регистре расчета
	// 
	// Описание:
	//
	//	выбираем из РегистрРасчета.РасчетСреднегоЗаработка
	//	по регистратору
		
	ДанныеОСреднемЗаработкеТекст =
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
 	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработку
	|					ИЛИ РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработкуБЛ
	|					ИЛИ РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработкуОтпуск
	|				ТОГДА РасчетСреднегоЗаработка.Результат * РасчетСреднегоЗаработка.КоэффициентИндексации
	//vvv
	//|			КОГДА РасчетСреднегоЗаработка.ВидРасчета = &ПоФиксПремиям
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоФиксПремиям)
	//
	|				ТОГДА ВЫБОР
	|						КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев = 0
	|							ТОГДА 0
	|						ИНАЧЕ РасчетСреднегоЗаработка.Результат * РасчетСреднегоЗаработка.КоэффициентИндексации 
	|					КОНЕЦ
	//vvv
	//|			КОГДА РасчетСреднегоЗаработка.ВидРасчета = &ПоПремиям
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоПремиям)
	//
	|				ТОГДА ВЫБОР
	|						КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев = 0
	|							ТОГДА 0
	|						ИНАЧЕ РасчетСреднегоЗаработка.Результат * РасчетСреднегоЗаработка.КоэффициентИндексации 
	|					КОНЕЦ
	|			КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев = 0
	|				ТОГДА 0
	|			ИНАЧЕ РасчетСреднегоЗаработка.Результат * РасчетСреднегоЗаработка.КоэффициентИндексации
	|		КОНЕЦ) КАК СреднийЗаработок,
	|	СУММА(ВЫБОР
 	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработку
	|					ИЛИ РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработкуБЛ
	|					ИЛИ РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработкуОтпуск
	|				ТОГДА РасчетСреднегоЗаработка.Результат 
	//vvv
	//|			КОГДА РасчетСреднегоЗаработка.ВидРасчета = &ПоФиксПремиям
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоФиксПремиям)
	//
	|				ТОГДА ВЫБОР
	|						КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев = 0
	|							ТОГДА 0
	|						ИНАЧЕ РасчетСреднегоЗаработка.Результат
	|					КОНЕЦ
	//vvv
	//|			КОГДА РасчетСреднегоЗаработка.ВидРасчета = &ПоПремиям
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоПремиям)
	//
	|				ТОГДА ВЫБОР
	|						КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев = 0
	|							ТОГДА 0
	|						ИНАЧЕ РасчетСреднегоЗаработка.Результат
	|					КОНЕЦ
	|			КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев = 0
	|				ТОГДА 0
	|			ИНАЧЕ РасчетСреднегоЗаработка.Результат 
	|		КОНЕЦ) КАК СреднийЗаработокБезИндексации,
	|
	//vvv
	|	СУММА(ВЫБОР
 	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоГодовойПремии)
	|				ТОГДА РасчетСреднегоЗаработка.Результат * РасчетСреднегоЗаработка.КоэффициентИндексации
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаГодовойПремии,
	|	СУММА(ВЫБОР
 	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоГодовойПремии)
	|				ТОГДА РасчетСреднегоЗаработка.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаГодовойПремииБезИндексации,
	//
	|	СУММА(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработку
	|					ИЛИ РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработкуБЛ
	|					ИЛИ РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработкуОтпуск
	|				ТОГДА РасчетСреднегоЗаработка.ОтработаноДней
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтработаноДней,
	|
	|	СУММА(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработку
	|					ИЛИ РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработкуБЛ
	|					ИЛИ РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработкуОтпуск
	|				ТОГДА РасчетСреднегоЗаработка.ОтработаноЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтработаноЧасов,
	//vvv
	|	СУММА(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработку
	|					ИЛИ РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработкуБЛ
	|					ИЛИ РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработкуОтпуск
	|				ТОГДА РасчетСреднегоЗаработка.НормаЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НормаЧасов,
	//
	|	СУММА(ВЫБОР
	//vvv
	|			КОГДА РасчетСреднегоЗаработка.Сотрудник.ВидЗанятости=ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство) И (НЕ РасчетСреднегоЗаработка.РасчетВнутреннегоСовместителя) ТОГДА 0
	//
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработку
	|					ИЛИ РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработкуБЛ
	|					ИЛИ РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработкуОтпуск
	|			ТОГДА РасчетСреднегоЗаработка.ЧислоМесяцев
	|			ИНАЧЕ 0
    |           КОНЕЦ) КАК ЧислоМесяцев,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработку
	|					ИЛИ РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработкуБЛ
	|					ИЛИ РасчетСреднегоЗаработка.ВидРасчета = &ПоЗаработкуОтпуск
	|				ТОГДА РасчетСреднегоЗаработка.КалендарныеДни
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КалендарныеДни,
	//vvv комментируем, группировать будем по физ. лицу
	//|	РасчетСреднегоЗаработка.Сотрудник КАК Сотрудник,
	|	РасчетСреднегоЗаработка.ФизЛицо КАК ФизЛицо,
	|	РасчетСреднегоЗаработка.Организация КАК Организация,
	|	РасчетСреднегоЗаработка.СпособРасчета КАК СпособРасчета,
	|	РасчетСреднегоЗаработка.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода КАК ДатаНачалаРасчетногоПериода,
	|	РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода КАК ДатаОкончанияРасчетногоПериода
	|ПОМЕСТИТЬ ВТДанныеОСреднемЗаработке
	|ИЗ
	|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|ГДЕ
	|	РасчетСреднегоЗаработка.Регистратор = &парамРегистратор И РасчетСреднегоЗаработка.ВидРасчета<>0
	|
	|СГРУППИРОВАТЬ ПО
	//vvv
	//|	РасчетСреднегоЗаработка.Сотрудник,
	|	РасчетСреднегоЗаработка.ФизЛицо,
	|	РасчетСреднегоЗаработка.Организация,
	|	РасчетСреднегоЗаработка.СпособРасчета,
	|	РасчетСреднегоЗаработка.ДатаНачалаСобытия,
	|	РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода,
	|	РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
	|ИНДЕКСИРОВАТЬ ПО
	//vvv
	//|	Сотрудник,
	|	ФизЛицо,
	|	СпособРасчета,
	|	ДатаНачалаСобытия,
	|	ДатаНачалаРасчетногоПериода,
	|	ДатаОкончанияРасчетногоПериода";
	
	
	// КалендарныеДниПособия
	// 		
	// 
	//	Поля:
	// 
	// Описание:
	//
		
	КалендарныеДниПособияТекст =
	"ВЫБРАТЬ
	|	ФактическийПериодДействия.НомерСтроки КАК НомерСтроки,
	|	СУММА(РАЗНОСТЬДАТ(ФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(ФактическийПериодДействия.ПериодДействияКонец, СЕКУНДА, 1), ДЕНЬ)) КАК ОплачиватьДнейПособия
	|ПОМЕСТИТЬ ВТКалендарныеДниПособия
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|		ВидРасчета.КатегорияНачисления = &парамКатегорияНачисления
	|			И ВидРасчета.СпособРасчета В (&ПоСреднемуЗаработкуФСС)
	|			И Регистратор = &парамРегистратор
	|			И Авторасчет) КАК ФактическийПериодДействия
	|
	|СГРУППИРОВАТЬ ПО
	|	ФактическийПериодДействия.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	// ИсчисленныйНДФЛ
	//	данные по исчисленному НДФЛ в текущем периоде регистрации
	//	Поля 
	//		Физлицо
	//		ИсчисленныйНалог
	//
	//	Описание
	//	Суммируем исчисленный НДФЛ по заданной организации в заданном периоде регистрации
	//	в разрезе физлиц
	
	ИсчисленныйНДФЛТекст = 
	"ВЫБРАТЬ
	|	ИсчисленыейНалоги.НомерСтроки,
	|	СУММА(ИсчисленыейНалоги.ИсчисленныйНалог) КАК ИсчисленныйНалог
	|ПОМЕСТИТЬ ВТИсчисленныйНДФЛ
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|		СУММА(НДФЛРасчетыСБюджетом.Налог) КАК ИсчисленныйНалог
	|	ИЗ
	|		РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Удержания.НомерСтроки КАК НомерСтроки,
	|				Удержания.ФизЛицо КАК Физлицо,
	|				НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ) КАК МесяцУдержания
	|			ИЗ
	|				РегистрРасчета.УдержанияРаботниковОрганизаций КАК Удержания
	|			ГДЕ
	|				Удержания.ВидРасчета.СпособРасчета В(&парамМассивУдержанийИЛ)
	|				И Удержания.Регистратор = &парамРегистратор) КАК РаботникиОрганизации
	|			ПО НДФЛРасчетыСБюджетом.ФизЛицо = РаботникиОрганизации.Физлицо
	|				И (НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.Период, МЕСЯЦ) = РаботникиОрганизации.МесяцУдержания)
	|	ГДЕ
	|		НДФЛРасчетыСБюджетом.Организация = &парамОрганизация
	|		И НДФЛРасчетыСБюджетом.ВидДвижения = &парамПриход
	|		И НДФЛРасчетыСБюджетом.ВидСтроки = &парамВидСтроки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РаботникиОрганизации.НомерСтроки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РаботникиОрганизации.НомерСтроки,
	|		СУММА(ЕСНИсчисленный.ПенсионныйФонд)
	|	ИЗ
	|		РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленный
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Удержания.НомерСтроки КАК НомерСтроки,
	|				Удержания.ФизЛицо КАК Физлицо,
	|				НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ) КАК МесяцУдержания
	|			ИЗ
	|				РегистрРасчета.УдержанияРаботниковОрганизаций КАК Удержания
	|			ГДЕ
	|				Удержания.ВидРасчета.СпособРасчета В(&парамМассивУдержанийИЛ)
	|				И Удержания.Регистратор = &парамРегистратор) КАК РаботникиОрганизации
	|			ПО ЕСНИсчисленный.ФизЛицо = РаботникиОрганизации.Физлицо
	|				И (НАЧАЛОПЕРИОДА(ЕСНИсчисленный.ПериодВзаиморасчетов, МЕСЯЦ) = РаботникиОрганизации.МесяцУдержания)
	|	ГДЕ
	|		ЕСНИсчисленный.Организация = &парамОрганизация
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РаботникиОрганизации.НомерСтроки) КАК ИсчисленыейНалоги
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсчисленыейНалоги.НомерСтроки";
	
	// НакопленныеДанные
	// уже начислено по другим регистраторам в данном расчетном периоде и за всю историю
	// применяется для расчета удержаний "нарастающим итогом за месяц"
	//	Поля:
	//		Сотрудник
	//		ДокументОснование
	//		ВидРасчета
	//		УжеНачисленоВТекущемПериоде
	//		УжеНачисленоЗаВсюИсторию
	//	Описание:
	//		суммирует результаты по видам расчета и документам-основаниям
	//
	НакопленныеДанныеТекст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА Основной.ПериодРегистрации = НакопленныеДанные.ПериодРегистрации
	|					И Основной.БазовыйПериодНачало <= НакопленныеДанные.БазовыйПериодНачало
	|					И Основной.БазовыйПериодКонец >= НакопленныеДанные.БазовыйПериодКонец
	|				ТОГДА НакопленныеДанные.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК УжеНачисленоВТекущемПериоде,
	|	СУММА(ВЫБОР
	|			КОГДА НакопленныеДанные.ПериодРегистрации <= Основной.ПериодРегистрации
	|					И Основной.БазовыйПериодНачало >= НакопленныеДанные.БазовыйПериодНачало
	|				ТОГДА НакопленныеДанные.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК УжеНачисленоЗаВсюИсторию,
	|	НакопленныеДанные.ФизЛицо КАК ФизЛицо,
	|	НакопленныеДанные.ВидРасчета КАК ВидРасчета,
	|	НакопленныеДанные.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТНакопленныеДанные
	|ИЗ
	|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основной
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.УдержанияРаботниковОрганизаций КАК НакопленныеДанные
	|		ПО Основной.ФизЛицо = НакопленныеДанные.ФизЛицо
	|			И Основной.ВидРасчета = НакопленныеДанные.ВидРасчета
	|			И Основной.ПериодРегистрации >= НакопленныеДанные.ПериодРегистрации
	|			И Основной.Организация = НакопленныеДанные.Организация
	|			И Основной.ДокументОснование = НакопленныеДанные.ДокументОснование
	|			И Основной.Регистратор <> НакопленныеДанные.Регистратор
	|			И Основной.Сторно = НакопленныеДанные.Сторно
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|
	|СГРУППИРОВАТЬ ПО
	|	НакопленныеДанные.ФизЛицо,
	|	НакопленныеДанные.ВидРасчета,
	|	НакопленныеДанные.ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	ВидРасчета,
	|	ДокументОснование";
	
	
	РазмерТарифнойСтавкиСотрудникаТекст = 
	"ВЫБРАТЬ
	|	ДатыАктуальностиСтавки.НомерСтроки КАК ОсновнойНомерСтроки,
	|	ДатыАктуальностиСтавки.ДатаАктуальности КАК ДатаАктуальности,
	|	ДатыАктуальностиСтавки.ПериодДействияНачало КАК ПериодДействияНачало,
	//vvv
	//|	ТарифныеСтавкиРаботниковОрганизации.Ставка КАК Ставка,
	//|	ТарифныеСтавкиРаботниковОрганизации.ТарифнаяСтавка КАК ТарифнаяСтавка
	|	ВЫБОР
	|		КОГДА ТарифныеСтавкиРаботниковОрганизации.ПериодЗавершения <= ДатыАктуальностиСтавки.ДатаАктуальности
	|				И ТарифныеСтавкиРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ТарифныеСтавкиРаботниковОрганизации.СтавкаЗавершения
	|		ИНАЧЕ ТарифныеСтавкиРаботниковОрганизации.Ставка
	|	КОНЕЦ КАК Ставка,
	|	ВЫБОР
	|		КОГДА ТарифныеСтавкиРаботниковОрганизации.ПериодЗавершения <= ДатыАктуальностиСтавки.ДатаАктуальности
	|				И ТарифныеСтавкиРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ТарифныеСтавкиРаботниковОрганизации.ТарифнаяСтавкаЗавершения
	|		ИНАЧЕ ТарифныеСтавкиРаботниковОрганизации.ТарифнаяСтавка
	|	КОНЕЦ КАК ТарифнаяСтавка
	//
	|ПОМЕСТИТЬ ВТМесячныеТарифныеСтавки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ТарифныеСтавкиРаботниковОрганизации.Период) КАК ДатаАктуальности,
	|		Основной.ПериодДействияНачало КАК ПериодДействияНачало,
	|		Основной.Сотрудник КАК Сотрудник
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации КАК ТарифныеСтавкиРаботниковОрганизации
	|			ПО (ТарифныеСтавкиРаботниковОрганизации.Сотрудник = Основной.Сотрудник)
	|				И (ТарифныеСтавкиРаботниковОрганизации.Период <= Основной.ПериодДействияНачало)
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		Основной.ПериодДействияНачало,
	|		Основной.Сотрудник) КАК ДатыАктуальностиСтавки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации КАК ТарифныеСтавкиРаботниковОрганизации
	|		ПО (ТарифныеСтавкиРаботниковОрганизации.Период = ДатыАктуальностиСтавки.ДатаАктуальности)
	|			И (ТарифныеСтавкиРаботниковОрганизации.Сотрудник = ДатыАктуальностиСтавки.Сотрудник)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки,
	|	ТарифнаяСтавка";
	
МесячнаяТарифнаяСтавкаНаДатуСобытияТекст = 
	"ВЫБРАТЬ
	|	ДатыАктуальностиСтавки.НомерСтроки КАК ОсновнойНомерСтроки,
	|	ДатыАктуальностиСтавки.ДатаАктуальности КАК ДатаАктуальности,
	|	ДатыАктуальностиСтавки.ПериодДействияНачало КАК ПериодДействияНачало,
	//vvv
	//|	ТарифныеСтавкиРаботниковОрганизации.Ставка КАК Ставка,
	//|	ТарифныеСтавкиРаботниковОрганизации.ТарифнаяСтавка КАК ТарифнаяСтавка
	|	ВЫБОР
	|		КОГДА ТарифныеСтавкиРаботниковОрганизации.ПериодЗавершения <= ДатыАктуальностиСтавки.ДатаАктуальности
	|				И ТарифныеСтавкиРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ТарифныеСтавкиРаботниковОрганизации.СтавкаЗавершения
	|		ИНАЧЕ ТарифныеСтавкиРаботниковОрганизации.Ставка
	|	КОНЕЦ КАК Ставка,
	|	ВЫБОР
	|		КОГДА ТарифныеСтавкиРаботниковОрганизации.ПериодЗавершения <= ДатыАктуальностиСтавки.ДатаАктуальности
	|				И ТарифныеСтавкиРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ТарифныеСтавкиРаботниковОрганизации.ТарифнаяСтавкаЗавершения
	|		ИНАЧЕ ТарифныеСтавкиРаботниковОрганизации.ТарифнаяСтавка
	|	КОНЕЦ КАК ТарифнаяСтавка
	//
	|ПОМЕСТИТЬ ВТМесячныеТарифныеСтавки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ТарифныеСтавкиРаботниковОрганизации.Период) КАК ДатаАктуальности,
	|		Основной.ПериодДействияНачало КАК ПериодДействияНачало,
	|		Основной.ПериодДействияНачало КАК ДатаНачалаСобытия,
	|		Основной.Сотрудник КАК Сотрудник
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации КАК ТарифныеСтавкиРаботниковОрганизации
	|			ПО (ТарифныеСтавкиРаботниковОрганизации.Сотрудник = Основной.Сотрудник)
	|				И (ТарифныеСтавкиРаботниковОрганизации.Период <= Основной.ДатаНачалаСобытия)
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		Основной.ПериодДействияНачало,
	|		Основной.Сотрудник) КАК ДатыАктуальностиСтавки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиРаботниковОрганизации КАК ТарифныеСтавкиРаботниковОрганизации
	|		ПО (ТарифныеСтавкиРаботниковОрганизации.Период = ДатыАктуальностиСтавки.ДатаАктуальности)
	|			И (ТарифныеСтавкиРаботниковОрганизации.Сотрудник = ДатыАктуальностиСтавки.Сотрудник)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки,
	|	ТарифнаяСтавка";	
	
	
	
	СтавкаСотрудникаТекст = 
	"ВЫБРАТЬ
	|	ДатыАктуальностиСтавки.НомерСтроки КАК ОсновнойНомерСтроки,
	|	ДатыАктуальностиСтавки.ДатаАктуальности КАК ДатаАктуальности,
	|	ДатыАктуальностиСтавки.ПериодДействияНачало КАК ПериодДействияНачало,
	//vvv
	|	ДатыАктуальностиСтавки.Организация КАК Организация,
	//
	|	РаботникиОрганизаций.ТарифнаяСтавкаПервогоРазряда КАК ТарифнаяСтавка
	|ПОМЕСТИТЬ ВТСтавкаСотрудника
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаАктуальности,
	|		Основной.ПериодДействияНачало КАК ПериодДействияНачало,
	//vvv
	|		Основной.ОбособленноеПодразделение КАК Организация, 
	//
	|		Основной.Сотрудник КАК Сотрудник
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО (РаботникиОрганизаций.Сотрудник = Основной.Сотрудник)
	//vvv
	|				И (РаботникиОрганизаций.ОбособленноеПодразделение = Основной.ОбособленноеПодразделение)
	//
	|				И (РаботникиОрганизаций.Период <= Основной.ПериодДействияНачало)
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		Основной.ПериодДействияНачало,
	//vvv
	|		Основной.ОбособленноеПодразделение,
	//
	|		Основной.Сотрудник) КАК ДатыАктуальностиСтавки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО (РаботникиОрганизаций.Период = ДатыАктуальностиСтавки.ДатаАктуальности)
	//vvv
	|			И РаботникиОрганизаций.ОбособленноеПодразделение = ДатыАктуальностиСтавки.Организация	
	//
	|			И РаботникиОрганизаций.Сотрудник = ДатыАктуальностиСтавки.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки,
	|	ТарифнаяСтавка";
	
	
	РазмерСтавкиСотрудникаТекст = 
	"ВЫБРАТЬ
	|	ДатыАктуальностиСтавки.НомерСтроки КАК ОсновнойНомерСтроки,
	|	ДатыАктуальностиСтавки.ДатаАктуальности КАК ДатаАктуальности,
	|	ТарифныеСтавкиПервогоРазрядаОрганизаций.Размер КАК РазмерСтавкиПервогоРазряда,
	|	ДатыАктуальностиСтавки.ТарифнаяСтавка КАК ТарифнаяСтавка
	|ПОМЕСТИТЬ ВТРазмерСтавкаСотрудника
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтавкаСотрудника.ОсновнойНомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ТарифныеСтавкиПервогоРазрядаОрганизаций.Период) КАК ДатаАктуальности,
	//vvv
	|		ТарифныеСтавкиПервогоРазрядаОрганизаций.Организация КАК Организация,
	//
	|		ТарифныеСтавкиПервогоРазрядаОрганизаций.ТарифнаяСтавка КАК ТарифнаяСтавка
	|	ИЗ
	|		ВТСтавкаСотрудника КАК СтавкаСотрудника
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций КАК ТарифныеСтавкиПервогоРазрядаОрганизаций
	|			ПО СтавкаСотрудника.ТарифнаяСтавка = ТарифныеСтавкиПервогоРазрядаОрганизаций.ТарифнаяСтавка
	//vvv
	|				И (ТарифныеСтавкиПервогоРазрядаОрганизаций.Организация = СтавкаСотрудника.Организация)
	//
	|				И (ТарифныеСтавкиПервогоРазрядаОрганизаций.Период <= СтавкаСотрудника.ПериодДействияНачало)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СтавкаСотрудника.ОсновнойНомерСтроки,
	//vvv
	|		ТарифныеСтавкиПервогоРазрядаОрганизаций.Организация,
	//
	|		ТарифныеСтавкиПервогоРазрядаОрганизаций.ТарифнаяСтавка) КАК ДатыАктуальностиСтавки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций КАК ТарифныеСтавкиПервогоРазрядаОрганизаций
	|		ПО (ТарифныеСтавкиПервогоРазрядаОрганизаций.Период = ДатыАктуальностиСтавки.ДатаАктуальности)
	//vvv
	|			И ДатыАктуальностиСтавки.Организация = ТарифныеСтавкиПервогоРазрядаОрганизаций.Организация
	//
	|			И ДатыАктуальностиСтавки.ТарифнаяСтавка = ТарифныеСтавкиПервогоРазрядаОрганизаций.ТарифнаяСтавка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки,
	|	ТарифнаяСтавка";
	
	

	
	РазмерСтавкиПервогоРазрядаТекст = 
	"ВЫБРАТЬ
	|	ДатыАктуальностиРазмераСтавки.НомерСтроки КАК ОсновнойНомерСтроки,
	|	ТарифныеСтавкиПервогоРазрядаОрганизаций.Размер КАК РазмерСтавкиПервогоРазряда,
	|	ДатыАктуальностиРазмераСтавки.ТарифнаяСтавка КАК ТарифнаяСтавка
	|ПОМЕСТИТЬ ВТСтавкиПервогоРазряда
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ТарифныеСтавкиПервогоРазрядаОрганизаций.Период) КАК ДатаАктуальности,
	//vvv
	|		ТарифныеСтавкиПервогоРазрядаОрганизаций.Организация КАК Организация,
	//
	|		ТарифныеСтавкиПервогоРазрядаОрганизаций.ТарифнаяСтавка КАК ТарифнаяСтавка
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций КАК ТарифныеСтавкиПервогоРазрядаОрганизаций
	|			ПО (ТарифныеСтавкиПервогоРазрядаОрганизаций.ТарифнаяСтавка = Основной.ВидРасчета.СтавкаПервогоРазряда) И (Основной.ВидРасчета.СтавкаПервогоРазряда ЕСТЬ НЕ NULL) И ТарифныеСтавкиПервогоРазрядаОрганизаций.Период <= Основной.ПериодДействияНачало
	//vvv
	|			И ТарифныеСтавкиПервогоРазрядаОрганизаций.Организация=Основной.ОбособленноеПодразделение 
	//
	|	
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	//vvv
	|		ТарифныеСтавкиПервогоРазрядаОрганизаций.Организация,
	//
	|		ТарифныеСтавкиПервогоРазрядаОрганизаций.ТарифнаяСтавка) КАК ДатыАктуальностиРазмераСтавки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций КАК ТарифныеСтавкиПервогоРазрядаОрганизаций
	|		ПО ТарифныеСтавкиПервогоРазрядаОрганизаций.Период = ДатыАктуальностиРазмераСтавки.ДатаАктуальности
	//vvv
	|			И ДатыАктуальностиРазмераСтавки.Организация = ТарифныеСтавкиПервогоРазрядаОрганизаций.Организация
	//
	|			И ДатыАктуальностиРазмераСтавки.ТарифнаяСтавка = ТарифныеСтавкиПервогоРазрядаОрганизаций.ТарифнаяСтавка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки,
	|	ТарифнаяСтавка";
	
	СтавкаСотрудникаНаДатуСобытияТекст = 
	"ВЫБРАТЬ
	|	ДатыАктуальностиСтавки.НомерСтроки КАК ОсновнойНомерСтроки,
	|	ДатыАктуальностиСтавки.ДатаАктуальности КАК ДатаАктуальности,
	|	ДатыАктуальностиСтавки.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	//vvv
	|	ДатыАктуальностиСтавки.Организация КАК Организация,
	//
	|	РаботникиОрганизаций.ТарифнаяСтавкаПервогоРазряда КАК ТарифнаяСтавка
	|ПОМЕСТИТЬ ВТСтавкаСотрудникаНаДатуСобытия
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаАктуальности,
	|		Основной.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	//vvv
	|		Основной.ОбособленноеПодразделение КАК Организация, 
	//
	|		Основной.Сотрудник КАК Сотрудник
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО (РаботникиОрганизаций.Сотрудник = Основной.Сотрудник)
	//vvv
	|				И (РаботникиОрганизаций.ОбособленноеПодразделение = Основной.ОбособленноеПодразделение)
	//
	|				И (РаботникиОрганизаций.Период <= Основной.ДатаНачалаСобытия)
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		Основной.ДатаНачалаСобытия,
	//vvv
	|		Основной.ОбособленноеПодразделение,
	//
	|		Основной.Сотрудник) КАК ДатыАктуальностиСтавки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО (РаботникиОрганизаций.Период = ДатыАктуальностиСтавки.ДатаАктуальности)
	//vvv
	|			И РаботникиОрганизаций.ОбособленноеПодразделение = ДатыАктуальностиСтавки.Организация	
	//
	|			И ДатыАктуальностиСтавки.Сотрудник = РаботникиОрганизаций.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки,
	|	ТарифнаяСтавка";
		
	РазмерСтавкиСотрудникаНаДатуСобытияТекст = 
	"ВЫБРАТЬ
	|	ДатыАктуальностиСтавки.НомерСтроки КАК ОсновнойНомерСтроки,
	|	ДатыАктуальностиСтавки.ДатаАктуальности КАК ДатаАктуальности,
	|	ТарифныеСтавкиПервогоРазрядаОрганизаций.Размер КАК РазмерСтавкиПервогоРазряда,
	|	ДатыАктуальностиСтавки.ТарифнаяСтавка КАК ТарифнаяСтавка
	|ПОМЕСТИТЬ ВТРазмерСтавкаСотрудникаНаДатуСобытия
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтавкаСотрудника.ОсновнойНомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ТарифныеСтавкиПервогоРазрядаОрганизаций.Период) КАК ДатаАктуальности,
	//vvv
	|		ТарифныеСтавкиПервогоРазрядаОрганизаций.Организация КАК Организация,
	//
	|		ТарифныеСтавкиПервогоРазрядаОрганизаций.ТарифнаяСтавка КАК ТарифнаяСтавка
	|	ИЗ
	|		ВТСтавкаСотрудникаНаДатуСобытия КАК СтавкаСотрудника
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций КАК ТарифныеСтавкиПервогоРазрядаОрганизаций
	|			ПО СтавкаСотрудника.ТарифнаяСтавка = ТарифныеСтавкиПервогоРазрядаОрганизаций.ТарифнаяСтавка
	//vvv
	|				И (ТарифныеСтавкиПервогоРазрядаОрганизаций.Организация = СтавкаСотрудника.Организация)
	//
	|				И (ТарифныеСтавкиПервогоРазрядаОрганизаций.Период <= СтавкаСотрудника.ДатаНачалаСобытия)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СтавкаСотрудника.ОсновнойНомерСтроки,
	//vvv
	|		ТарифныеСтавкиПервогоРазрядаОрганизаций.Организация,
	//
	|		ТарифныеСтавкиПервогоРазрядаОрганизаций.ТарифнаяСтавка) КАК ДатыАктуальностиСтавки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиПервогоРазрядаОрганизаций КАК ТарифныеСтавкиПервогоРазрядаОрганизаций
	|		ПО (ТарифныеСтавкиПервогоРазрядаОрганизаций.Период = ДатыАктуальностиСтавки.ДатаАктуальности)
	//vvv
	|			И ДатыАктуальностиСтавки.Организация = ТарифныеСтавкиПервогоРазрядаОрганизаций.Организация
	//
	|			И ДатыАктуальностиСтавки.ТарифнаяСтавка = ТарифныеСтавкиПервогоРазрядаОрганизаций.ТарифнаяСтавка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки,
	|	ТарифнаяСтавка";
	
	
	
	ВремяВоВредныйТекст = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	ОтработанныеВоВредных.Часов КАК ЧасовВоВредных,
	|	ОтработанныеВоВредных.Дней КАК ДнейПоГрафику,
	|	ВЫБОР
	|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|				И ОтработанныеВоВредных.Дней ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаВводаОтработанныеВоВредных
	|ПОМЕСТИТЬ ВТОтработанныеВоВредных
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтработанныеВоВредных КАК ОтработанныеВоВредных
	|		ПО Основной.Сотрудник = ОтработанныеВоВредных.Сотрудник
	|			И Основной.ПериодДействия = ОтработанныеВоВредных.Месяц
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	//vvv
	ВремяВоВредныйТекст = 
	"ВЫБРАТЬ
	|	ДанныеВредности.НомерСтроки КАК НомерСтроки,
	|	СУММА(ДанныеВредности.ЧасовВоВредных) КАК ЧасовВоВредных,
	|	СУММА(ДанныеВредности.ДнейПоГрафику) КАК ДнейПоГрафику,
	|	ДанныеВредности.ОшибкаВводаОтработанныеВоВредных
	|ПОМЕСТИТЬ ВТОтработанныеВоВредных
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		ОтработанныеВоВредных.Часов КАК ЧасовВоВредных,
	|		ОтработанныеВоВредных.Дней КАК ДнейПоГрафику,
	|		ВЫБОР
	|			КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|					ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|					И ОтработанныеВоВредных.Дней ЕСТЬ НЕ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ОшибкаВводаОтработанныеВоВредных
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтработанныеВоВредных КАК ОтработанныеВоВредных
	|			ПО Основной.Сотрудник = ОтработанныеВоВредных.Сотрудник
	|				И Основной.ПериодДействия = ОтработанныеВоВредных.Месяц
	|				И Основной.Показатель1 = ОтработанныеВоВредных.ПроцентВредности
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор
	|		И Основной.Авторасчет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Основной.НомерСтроки,
	|		СУММА(ОтработанныеВоВредных.Часов),
	|		СУММА(ОтработанныеВоВредных.Дней),
	|		ВЫБОР
	|			КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|					ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|					И ОтработанныеВоВредных.Дней ЕСТЬ НЕ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия() КАК Основной
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизацийВоВредныхУсловиях КАК ОтработанныеВоВредных
	|			ПО Основной.Сотрудник = ОтработанныеВоВредных.Сотрудник
	|				И (ОтработанныеВоВредных.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|				И (ОтработанныеВоВредных.ПроцентВредности=Основной.Показатель1)
	|				И (ОтработанныеВоВредных.ВидИспользованияРабочегоВремени=ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа))
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор
	|		И Основной.Авторасчет
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ВЫБОР
	|			КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|					ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|					И ОтработанныеВоВредных.Дней ЕСТЬ НЕ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДанныеВредности
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеВредности.НомерСтроки,
	|	ДанныеВредности.ОшибкаВводаОтработанныеВоВредных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	//
	
	//vvv
	ВремяВодителейНаЛинии=
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	СУММА(РабочееВремяВодителейОрганизаций.Часов) КАК ЧасовНаЛинии,
	|	СУММА(РабочееВремяВодителейОрганизаций.Дней) КАК ДнейНаЛинии,
	|	ВЫБОР
	|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|				И РабочееВремяВодителейОрганизаций.Дней ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаВводаОтработаноНаЛинии,
	|	РабочееВремяВодителейОрганизаций.ПроцентПремии,
	|	РабочееВремяВодителейОрганизаций.ЧасоваяСтавка
	|ПОМЕСТИТЬ ВТОтработаноНаЛинии
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяВодителейОрганизаций КАК РабочееВремяВодителейОрганизаций
	|		ПО Основной.Сотрудник = РабочееВремяВодителейОрганизаций.Сотрудник
	|			И (Основной.ТабельУчетаОрганизации = ЗНАЧЕНИЕ(Справочник.ТабеляУчетаОрганизаций.ПустаяСсылка)
	|				ИЛИ Основной.ТабельУчетаОрганизации = РабочееВремяВодителейОрганизаций.ТабельУчетаОрганизации)
	|			И Основной.НомерСтрокиТабеля = РабочееВремяВодителейОрганизаций.НомерСтрокиТабеля
	|			И (РабочееВремяВодителейОрганизаций.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Линия))
	|			И Основной.Показатель1 = РабочееВремяВодителейОрганизаций.ЧасоваяСтавка
	//|			И (НАЧАЛОПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РабочееВремяВодителейОрганизаций.Период, МЕСЯЦ))
	|			И (РабочееВремяВодителейОрганизаций.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки,
	|	РабочееВремяВодителейОрганизаций.ПроцентПремии,
	|	РабочееВремяВодителейОрганизаций.ЧасоваяСтавка,
	|	ВЫБОР
	|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|				И РабочееВремяВодителейОрганизаций.Дней ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	ВремяНаАвтомобиле=
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	СУММА(РабочееВремяВодителейОрганизаций.Часов) КАК ЧасовНаАвтомобиле,
	|	СУММА(РабочееВремяВодителейОрганизаций.Дней) КАК ДнейНаАвтомобиле,
	|	ВЫБОР
	|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|				И РабочееВремяВодителейОрганизаций.Дней ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаВводаОтработаноНаАвтомобиле
	|ПОМЕСТИТЬ ВТОтработаноНаАвтомобиле
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяВодителейОрганизаций КАК РабочееВремяВодителейОрганизаций
	|		ПО Основной.Сотрудник = РабочееВремяВодителейОрганизаций.Сотрудник
	|			И Основной.Автомобиль = РабочееВремяВодителейОрганизаций.Автомобиль
	|			И (РабочееВремяВодителейОрганизаций.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки,
	|	ВЫБОР
	|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|				И РабочееВремяВодителейОрганизаций.Дней ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	ВремяВодителейБезВыезда=
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	СУММА(РабочееВремяВодителейОрганизаций.Часов) КАК ЧасовБезВыезда,
	|	СУММА(РабочееВремяВодителейОрганизаций.Дней) КАК ДнейБезВыезда,
	|	ВЫБОР
	|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|				И РабочееВремяВодителейОрганизаций.Дней ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаВводаОтработаноБезВыезда,
	|	РабочееВремяВодителейОрганизаций.ПроцентПремии,
	|	РабочееВремяВодителейОрганизаций.ЧасоваяСтавка
	|ПОМЕСТИТЬ ВТОтработаноБезВыезда
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяВодителейОрганизаций КАК РабочееВремяВодителейОрганизаций
	|		ПО Основной.Сотрудник = РабочееВремяВодителейОрганизаций.Сотрудник
	|			И (Основной.ТабельУчетаОрганизации = ЗНАЧЕНИЕ(Справочник.ТабеляУчетаОрганизаций.ПустаяСсылка)
	|				ИЛИ Основной.ТабельУчетаОрганизации = РабочееВремяВодителейОрганизаций.ТабельУчетаОрганизации)
	|			И Основной.НомерСтрокиТабеля = РабочееВремяВодителейОрганизаций.НомерСтрокиТабеля
	|			И (РабочееВремяВодителейОрганизаций.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.БезВыезда))
	|			И Основной.Показатель1 = РабочееВремяВодителейОрганизаций.ЧасоваяСтавка
	//|			И (НАЧАЛОПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РабочееВремяВодителейОрганизаций.Период, МЕСЯЦ))
	|			И (РабочееВремяВодителейОрганизаций.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки,
	|	РабочееВремяВодителейОрганизаций.ПроцентПремии,
	|	РабочееВремяВодителейОрганизаций.ЧасоваяСтавка,
	|	ВЫБОР
	|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|				И РабочееВремяВодителейОрганизаций.Дней ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	ВремяВодителейНаСделке=
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	СУММА(РабочееВремяВодителейОрганизаций.Часов) КАК ЧасовНаСделке,
	|	СУММА(РабочееВремяВодителейОрганизаций.Дней) КАК ДнейНаСделке,
	|	ВЫБОР
	|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|				И РабочееВремяВодителейОрганизаций.Дней ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаВводаОтработаноНаЛинии,
	|	РабочееВремяВодителейОрганизаций.ПроцентПремии,
	|	РабочееВремяВодителейОрганизаций.ЧасоваяСтавка
	|ПОМЕСТИТЬ ВТОтработаноНаСделке
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяВодителейОрганизаций КАК РабочееВремяВодителейОрганизаций
	|		ПО Основной.Сотрудник = РабочееВремяВодителейОрганизаций.Сотрудник
	|			И (Основной.ТабельУчетаОрганизации = ЗНАЧЕНИЕ(Справочник.ТабеляУчетаОрганизаций.ПустаяСсылка)
	|				ИЛИ Основной.ТабельУчетаОрганизации = РабочееВремяВодителейОрганизаций.ТабельУчетаОрганизации)
	|			И Основной.НомерСтрокиТабеля = РабочееВремяВодителейОрганизаций.НомерСтрокиТабеля
	|			И (РабочееВремяВодителейОрганизаций.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ЛинияСдельно))
	|			И Основной.Показатель1 = РабочееВремяВодителейОрганизаций.ЧасоваяСтавка
	//|			И (НАЧАЛОПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РабочееВремяВодителейОрганизаций.Период, МЕСЯЦ))
	|			И (РабочееВремяВодителейОрганизаций.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки,
	|	РабочееВремяВодителейОрганизаций.ПроцентПремии,
	|	РабочееВремяВодителейОрганизаций.ЧасоваяСтавка,
	|	ВЫБОР
	|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|				И РабочееВремяВодителейОрганизаций.Дней ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	ВремяВодителейРемонт=
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	СУММА(РабочееВремяВодителейОрганизаций.Часов) КАК ЧасовНаРемонте,
	|	СУММА(РабочееВремяВодителейОрганизаций.Дней) КАК ДнейНаРемонте,
	|	ВЫБОР
	|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|				И РабочееВремяВодителейОрганизаций.Дней ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаВводаОтработаноНаРемонте,
	|	РабочееВремяВодителейОрганизаций.ПроцентПремии,
	|	РабочееВремяВодителейОрганизаций.ЧасоваяСтавка
	|ПОМЕСТИТЬ ВТОтработаноНаРемонте
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяВодителейОрганизаций КАК РабочееВремяВодителейОрганизаций
	|		ПО Основной.Сотрудник = РабочееВремяВодителейОрганизаций.Сотрудник
	|			И (Основной.ТабельУчетаОрганизации = ЗНАЧЕНИЕ(Справочник.ТабеляУчетаОрганизаций.ПустаяСсылка)
	|				ИЛИ Основной.ТабельУчетаОрганизации = РабочееВремяВодителейОрганизаций.ТабельУчетаОрганизации)
	|			И Основной.НомерСтрокиТабеля = РабочееВремяВодителейОрганизаций.НомерСтрокиТабеля
	|			И (РабочееВремяВодителейОрганизаций.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Ремонт))
	|			И Основной.Показатель1 = РабочееВремяВодителейОрганизаций.ЧасоваяСтавка
	//|			И (НАЧАЛОПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РабочееВремяВодителейОрганизаций.Период, МЕСЯЦ))
	|			И (РабочееВремяВодителейОрганизаций.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки,
	|	РабочееВремяВодителейОрганизаций.ПроцентПремии,
	|	РабочееВремяВодителейОрганизаций.ЧасоваяСтавка,
	|	ВЫБОР
	|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|				И РабочееВремяВодителейОрганизаций.Дней ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	ВремяВодителейРемонтПлановый=
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	СУММА(РабочееВремяВодителейОрганизаций.Часов) КАК ЧасовНаРемонтеПлановом,
	|	СУММА(РабочееВремяВодителейОрганизаций.Дней) КАК ДнейНаРемонтеПлановом,
	|	ВЫБОР
	|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|				И РабочееВремяВодителейОрганизаций.Дней ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаВводаОтработаноНаРемонте,
	|	РабочееВремяВодителейОрганизаций.ПроцентПремии,
	|	РабочееВремяВодителейОрганизаций.ЧасоваяСтавка
	|ПОМЕСТИТЬ ВТОтработаноНаРемонтеПлановом
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяВодителейОрганизаций КАК РабочееВремяВодителейОрганизаций
	|		ПО Основной.Сотрудник = РабочееВремяВодителейОрганизаций.Сотрудник
	|			И (Основной.ТабельУчетаОрганизации = ЗНАЧЕНИЕ(Справочник.ТабеляУчетаОрганизаций.ПустаяСсылка)
	|				ИЛИ Основной.ТабельУчетаОрганизации = РабочееВремяВодителейОрганизаций.ТабельУчетаОрганизации)
	|			И Основной.НомерСтрокиТабеля = РабочееВремяВодителейОрганизаций.НомерСтрокиТабеля
	|			И (РабочееВремяВодителейОрганизаций.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РемонтПлановый))
	|			И Основной.Показатель1 = РабочееВремяВодителейОрганизаций.ЧасоваяСтавка
	|			И (НАЧАЛОПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РабочееВремяВодителейОрганизаций.Период, МЕСЯЦ))
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки,
	|	РабочееВремяВодителейОрганизаций.ПроцентПремии,
	|	РабочееВремяВодителейОрганизаций.ЧасоваяСтавка,
	|	ВЫБОР
	|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|				И РабочееВремяВодителейОрганизаций.Дней ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	РазмерБазовойВеличиныТекст = 
	"ВЫБРАТЬ
	|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
	|	РазмерыПараметровДляРасчетаРБ.Размер КАК Размер,
	|	ДатыАктуальности.ВидПараметра
	|ПОМЕСТИТЬ ВТРазмерБазовойВеличины
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(РазмерыПараметровДляРасчетаРБ.Период) КАК ДатаАктуальности,
 	|		РазмерыПараметровДляРасчетаРБ.ВидПараметра 
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|			ПО (РазмерыПараметровДляРасчетаРБ.Период <= Основной.ПериодРегистрации)
	|				И (РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.БазоваяВеличина))
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор
	|		И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ОтСтажаКоличествомБазовых)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		РазмерыПараметровДляРасчетаРБ.ВидПараметра) КАК ДатыАктуальности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (РазмерыПараметровДляРасчетаРБ.Период = ДатыАктуальности.ДатаАктуальности)
	|		И РазмерыПараметровДляРасчетаРБ.ВидПараметра =  ДатыАктуальности.ВидПараметра";
	
	
	КоличествоБазовыхТекст = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	ШкалаКоэффициентовСтажа.Величина КАК Величина
	|ПОМЕСТИТЬ ВТКоличествоБазовых
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Основной
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Стажи КАК Стажи
	|		ПО Основной.ВидРасчета.ВидСтажа = Стажи.ВидСтажа
	|			И Основной.Сотрудник.Физлицо = Стажи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаКоэффициентовСтажа КАК ШкалаКоэффициентовСтажа
	|		ПО Основной.ВидРасчета.КоэффициентСтажа = ШкалаКоэффициентовСтажа.КоэффициентСтажа
	|			И (Стажи.РазмерМесяцев + РАЗНОСТЬДАТ(Стажи.ДатаОтсчета, ДОБАВИТЬКДАТЕ(Основной.Регистратор.Дата, ДЕНЬ, Стажи.РазмерДней), МЕСЯЦ) - ВЫБОР
	|				КОГДА ДЕНЬ(Стажи.ДатаОтсчета) > ДЕНЬ(ДОБАВИТЬКДАТЕ(Основной.Регистратор.Дата, ДЕНЬ, Стажи.РазмерДней))
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ >= ШкалаКоэффициентовСтажа.СтажС)
	|			И (Стажи.РазмерМесяцев + РАЗНОСТЬДАТ(Стажи.ДатаОтсчета, ДОБАВИТЬКДАТЕ(Основной.Регистратор.Дата, ДЕНЬ, Стажи.РазмерДней), МЕСЯЦ) - ВЫБОР
	|				КОГДА ДЕНЬ(Стажи.ДатаОтсчета) > ДЕНЬ(ДОБАВИТЬКДАТЕ(Основной.Регистратор.Дата, ДЕНЬ, Стажи.РазмерДней))
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ < ВЫБОР
	|				КОГДА ШкалаКоэффициентовСтажа.СтажПо = 0
	|					ТОГДА 999999
	|				ИНАЧЕ ШкалаКоэффициентовСтажа.СтажПо
	|			КОНЕЦ)
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	//
	
	ПрожиточныйМинимумТекст = 
	"ВЫБРАТЬ
	|	Периоды.НомерСтроки,
	|	Периоды.Регистратор,
	|	ВеличинаПрожиточногоМинимума.Размер
	|ПОМЕСТИТЬ ВТПрожиточныеМинимумы
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		Основной.Регистратор КАК Регистратор,
	|		МАКСИМУМ(ВеличинаПрожиточногоМинимума.Период) КАК Период,
	|		Основной.ДополнительныеДанные КАК ДополнительныеДанные
	|	ИЗ
	|		РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВеличинаПрожиточногоМинимума КАК ВеличинаПрожиточногоМинимума
	|			ПО Основной.ДополнительныеДанные = ВеличинаПрожиточногоМинимума.ПрожиточныйМинимум
	|				И Основной.БазовыйПериодНачало >= ВеличинаПрожиточногоМинимума.Период
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор
	|		И Основной.Авторасчет
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		Основной.Регистратор,
	|		Основной.ДополнительныеДанные) КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВеличинаПрожиточногоМинимума КАК ВеличинаПрожиточногоМинимума
	|		ПО Периоды.ДополнительныеДанные = ВеличинаПрожиточногоМинимума.ПрожиточныйМинимум
	|			И Периоды.Период = ВеличинаПрожиточногоМинимума.Период";
	


	
	//Выбираем пособия на детей
	
	// РазмерПособияНаРебенкаДо3хЛет
	//	Поля:
	//		НомерСтроки - номер строки расчитываемых движений
	//		РазмерПособия - размер пособия
	//	Описание:
	//		получает размер пособия на ребенка до 3 лет для каждой строки начислений
	//
	РазмерПособияНаРебенкаДо3ЛетТекст = "ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	//vvv
	//|	ГосударственныеПособия.Размер КАК РазмерПособия,
	|	ГосударственныеПособия.Размер / ВЫБОР КОГДА ДатыАктуальностиРазмераПособия.ДатаАктуальности <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РазмерПособия,
	//
	|	ДатыАктуальностиРазмераПособия.ВидПособия КАК ВидПособия
	|ПОМЕСТИТЬ ВТРазмерПособияНаРебенкаДо3Лет
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности,
	|		ГосударственныеПособия.ВидПособия КАК ВидПособия
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНаРебенкаДо3Лет) И ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|	
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособияНаРебенкаДо3Лет
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ГосударственныеПособия.ВидПособия) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности
	|			И ДатыАктуальностиРазмераПособия.ВидПособия = ГосударственныеПособия.ВидПособия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки,
	|	ВидПособия";
	
	РазмерПособияНаРебенкаДо3ЛетТекст50ПроцентовБПМ = "ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	//vvv
	//|	ГосударственныеПособия.Размер КАК РазмерПособия,
	|	ГосударственныеПособия.Размер / ВЫБОР КОГДА ДатыАктуальностиРазмераПособия.ДатаАктуальности <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РазмерПособия,
	//
	|	ДатыАктуальностиРазмераПособия.ВидПособия КАК ВидПособия
	|ПОМЕСТИТЬ ВТРазмерПособияНаРебенкаДо3Лет50ПроцентовБПМ
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности,
	|		ГосударственныеПособия.ВидПособия КАК ВидПособия
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНаРебенкаДо3Лет50ПроцентовБПМ) И ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|	
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособияНаРебенкаДо3Лет50ПроцентовБПМ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ГосударственныеПособия.ВидПособия) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности
	|			И ДатыАктуальностиРазмераПособия.ВидПособия = ГосударственныеПособия.ВидПособия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки,
	|	ВидПособия";
	
	РазмерПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМТекст = "ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	|	ГосударственныеПособия.Размер КАК РазмерПособия,
	|	ДатыАктуальностиРазмераПособия.ВидПособия КАК ВидПособия
	|ПОМЕСТИТЬ ВТРазмерПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности,
	|		ГосударственныеПособия.ВидПособия КАК ВидПособия
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО (ГосударственныеПособия.ВидПособия = &ВидПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ) И ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|	
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ГосударственныеПособия.ВидПособия) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности
	|			И ДатыАктуальностиРазмераПособия.ВидПособия = ГосударственныеПособия.ВидПособия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки,
	|	ВидПособия";
	
	РазмерПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМТекст = "ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	|	ГосударственныеПособия.Размер КАК РазмерПособия,
	|	ДатыАктуальностиРазмераПособия.ВидПособия КАК ВидПособия
	|ПОМЕСТИТЬ ВТРазмерПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности,
	|		ГосударственныеПособия.ВидПособия КАК ВидПособия
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО (ГосударственныеПособия.ВидПособия = &ВидПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ) И ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|	
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ГосударственныеПособия.ВидПособия) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности
	|			И ДатыАктуальностиРазмераПособия.ВидПособия = ГосударственныеПособия.ВидПособия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки,
	|	ВидПособия";

	РазмерПособияНаРебенкаДо3ЛетНаВторогоТекст = "ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	//vvv
	//|	ГосударственныеПособия.Размер КАК РазмерПособия,
	|	ГосударственныеПособия.Размер / ВЫБОР КОГДА ДатыАктуальностиРазмераПособия.ДатаАктуальности <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РазмерПособия,
	//
	|	ДатыАктуальностиРазмераПособия.ВидПособия КАК ВидПособия
	|ПОМЕСТИТЬ ВТРазмерПособияНаРебенкаДо3ЛетНаВторого
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности,
	|		ГосударственныеПособия.ВидПособия КАК ВидПособия
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНаРебенкаДо3ЛетНаВторого) И ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|	
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособияНаРебенкаДо3ЛетНаВторого
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ГосударственныеПособия.ВидПособия) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности
	|			И ДатыАктуальностиРазмераПособия.ВидПособия = ГосударственныеПособия.ВидПособия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки,
	|	ВидПособия";
	
	РазмерПособияНаРебенкаДо3ЛетНаРебенкаИнвалидаТекст = "ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	//vvv
	//|	ГосударственныеПособия.Размер КАК РазмерПособия,
	|	ГосударственныеПособия.Размер / ВЫБОР КОГДА ДатыАктуальностиРазмераПособия.ДатаАктуальности <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РазмерПособия,
	//
	|	ДатыАктуальностиРазмераПособия.ВидПособия КАК ВидПособия
	|ПОМЕСТИТЬ ВТРазмерПособияНаРебенкаДо3ЛетНаРебенкаИнвалида
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности,
	|		ГосударственныеПособия.ВидПособия КАК ВидПособия
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНаРебенкаДо3ЛетНаРебенкаИнвалида) И ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|	
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособияНаРебенкаДо3ЛетНаРебенкаИнвалида
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ГосударственныеПособия.ВидПособия) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности
	|			И ДатыАктуальностиРазмераПособия.ВидПособия = ГосударственныеПособия.ВидПособия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки,
	|	ВидПособия";
	
	РазмерПособияНаРебенкаСтарше3ЛетНаРебенкаИнвалидаТекст = "ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	//vvv
	//|	ГосударственныеПособия.Размер КАК РазмерПособия,
	|	ГосударственныеПособия.Размер / ВЫБОР КОГДА ДатыАктуальностиРазмераПособия.ДатаАктуальности <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РазмерПособия,
	//
	|	ДатыАктуальностиРазмераПособия.ВидПособия КАК ВидПособия
	|ПОМЕСТИТЬ ВТРазмерПособияНаРебенкаСтарше3ЛетНаРебенкаИнвалида
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности,
	|		ГосударственныеПособия.ВидПособия КАК ВидПособия
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНаРебенкаСтарше3ЛетНаРебенкаИнвалида) И ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|	
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособияНаРебенкаСтарше3ЛетНаРебенкаИнвалида
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ГосударственныеПособия.ВидПособия) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности
	|			И ДатыАктуальностиРазмераПособия.ВидПособия = ГосударственныеПособия.ВидПособия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки,
	|	ВидПособия";
	
	
	
	
	// РазмерПособияМатериОдиночкеДо1_5Лет
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки расчитываемых движений
	//		РазмерПособия - размер пособия
	//	Описание:
	//		получает размер пособия матери-одиночке на ребенка до 1.5 лет для каждой строки начислений
	//
	РазмерПособияМатериОдиночкеДо1_5ЛетТекст = "ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	//vvv
	//|	ГосударственныеПособия.Размер КАК РазмерПособия,
	|	ГосударственныеПособия.Размер / ВЫБОР КОГДА ДатыАктуальностиРазмераПособия.ДатаАктуальности <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РазмерПособия,
	//
	|	ДатыАктуальностиРазмераПособия.ВидПособия КАК ВидПособия
	|ПОМЕСТИТЬ ВТРазмерПособияМатериОдиночкеДо1_5Лет
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности,
	|		ГосударственныеПособия.ВидПособия КАК ВидПособия
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО (ГосударственныеПособия.ВидПособия = &ВидПособияМатериОдиночкеДо1_5Лет) И ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|	
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособияМатериОдиночкеДо1_5Лет
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ГосударственныеПособия.ВидПособия) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО (ГосударственныеПособия.ВидПособия = &ВидПособияМатериОдиночкеДо1_5Лет) И ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности";
	
	// РазмерПособияМатериОдиночкеДо3Лет
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки расчитываемых движений
	//		РазмерПособия - размер пособия
	//	Описание:
	//		получает размер пособия матери-одиночке на ребенка до 3 лет для каждой строки начислений
	//
	РазмерПособияМатериОдиночкеДо3ЛетТекст = "ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	//vvv
	//|	ГосударственныеПособия.Размер КАК РазмерПособия,
	|	ГосударственныеПособия.Размер / ВЫБОР КОГДА ДатыАктуальностиРазмераПособия.ДатаАктуальности <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РазмерПособия,
	//
	|	ДатыАктуальностиРазмераПособия.ВидПособия КАК ВидПособия
	|ПОМЕСТИТЬ ВТРазмерПособияМатериОдиночкеДо3Лет
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности,
	|		ГосударственныеПособия.ВидПособия КАК ВидПособия
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО (ГосударственныеПособия.ВидПособия = &ВидПособияМатериОдиночкеДо3Лет) И ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|	
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособияМатериОдиночкеДо3Лет
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ГосударственныеПособия.ВидПособия) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО (ГосударственныеПособия.ВидПособия = &ВидПособияМатериОдиночкеДо3Лет) И ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности";
	
	// РазмерПособияНаРебенкаСНадбавкой40До3хЛет
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки расчитываемых движений
	//		РазмерПособия - размер пособия
	//	Описание:
	//		получает размер пособия на ребенка до 3 лет с надбавкой 40% для каждой строки начислений
	//
	РазмерПособияНаРебенкаСНадбавкой40До3ЛетТекст = "ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	//vvv
	//|	ГосударственныеПособия.Размер КАК РазмерПособия,
	|	ГосударственныеПособия.Размер / ВЫБОР КОГДА ДатыАктуальностиРазмераПособия.ДатаАктуальности <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РазмерПособия,
	//
	|	ДатыАктуальностиРазмераПособия.ВидПособия КАК ВидПособия
	|ПОМЕСТИТЬ ВТРазмерПособияНаРебенкаСНадбавкой40До3Лет
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности,
	|		ГосударственныеПособия.ВидПособия КАК ВидПособия
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНаРебенкаСНадбавкой40До3Лет) И ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|	
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособияНаРебенкаСНадбавкой40До3Лет
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ГосударственныеПособия.ВидПособия) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНаРебенкаСНадбавкой40До3Лет) И ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности";
	
	// РазмерПособияНеРаботающейМатериДо3хЛет
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки расчитываемых движений
	//		РазмерПособия - размер пособия
	//	Описание:
	//		получает размер пособия на ребенка не работающей до 3 лет для каждой строки начислений
	//
	РазмерПособияНеРаботающейМатериДо3ЛетТекст = "ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	//vvv
	//|	ГосударственныеПособия.Размер КАК РазмерПособия,
	|	ГосударственныеПособия.Размер / ВЫБОР КОГДА ДатыАктуальностиРазмераПособия.ДатаАктуальности <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РазмерПособия,
	//
	|	ДатыАктуальностиРазмераПособия.ВидПособия КАК ВидПособия
	|ПОМЕСТИТЬ ВТРазмерПособияНеРаботающейМатериДо3Лет
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности,
	|		ГосударственныеПособия.ВидПособия КАК ВидПособия
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНеРаботающейМатериДо3Лет) И ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|	
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособияНеРаботающейМатериДо3Лет
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ГосударственныеПособия.ВидПособия) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНеРаботающейМатериДо3Лет) И ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности";
	
	// РазмерПособияНеРабМатериОдиночкеДо3Лет
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки расчитываемых движений
	//		РазмерПособия - размер пособия
	//	Описание:
	//		получает размер пособия на ребенка не работающей матери-одиночке до 3 лет для каждой строки начислений
	//
	РазмерПособияНеРабМатериОдиночкеДо3ЛетТекст = "ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	//vvv
	//|	ГосударственныеПособия.Размер КАК РазмерПособия,
	|	ГосударственныеПособия.Размер / ВЫБОР КОГДА ДатыАктуальностиРазмераПособия.ДатаАктуальности <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РазмерПособия,
	//
	|	ДатыАктуальностиРазмераПособия.ВидПособия КАК ВидПособия
	|ПОМЕСТИТЬ ВТРазмерПособияНеРабМатериОдиночкеДо3Лет
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности,
	|		ГосударственныеПособия.ВидПособия КАК ВидПособия
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНеРабМатериОдиночкеДо3Лет) И ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|	
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособияНеРабМатериОдиночкеДо3Лет
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ГосударственныеПособия.ВидПособия) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНеРабМатериОдиночкеДо3Лет) И ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности";
	
	// РазмерПособияНеРабМатериОдиночкеДо1_5Лет
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки расчитываемых движений
	//		РазмерПособия - размер пособия
	//	Описание:
	//		получает размер пособия на ребенка не работающей матери-одиночке до 1.5 лет для каждой строки начислений
	//
	РазмерПособияНеРабМатериОдиночкеДо1_5ЛетТекст = "ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	//vvv
	//|	ГосударственныеПособия.Размер КАК РазмерПособия,
	|	ГосударственныеПособия.Размер / ВЫБОР КОГДА ДатыАктуальностиРазмераПособия.ДатаАктуальности <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РазмерПособия,
	//
	|	ДатыАктуальностиРазмераПособия.ВидПособия КАК ВидПособия
	|ПОМЕСТИТЬ ВТРазмерПособияНеРабМатериОдиночкеДо1_5Лет
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности,
	|		ГосударственныеПособия.ВидПособия КАК ВидПособия
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНеРабМатериОдиночкеДо1_5Лет) И ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|	
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособияНеРабМатериОдиночкеДо1_5Лет
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ГосударственныеПособия.ВидПособия) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНеРабМатериОдиночкеДо1_5Лет) И ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности";
	
	// РазмерПособияНеРабМатериНадб40До3хЛет
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки расчитываемых движений
	//		РазмерПособия - размер пособия
	//	Описание:
	//		получает размер пособия на ребенка не работающей матери до 3 лет с надбавкой 40% 
	//		для каждой строки начислений
	//
	РазмерПособияНеРабМатериНадб40До3ЛетТекст = "ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	//vvv
	//|	ГосударственныеПособия.Размер КАК РазмерПособия,
	|	ГосударственныеПособия.Размер / ВЫБОР КОГДА ДатыАктуальностиРазмераПособия.ДатаАктуальности <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РазмерПособия,
	//
	|	ДатыАктуальностиРазмераПособия.ВидПособия КАК ВидПособия
	|ПОМЕСТИТЬ ВТРазмерПособияНеРабМатериНадб40До3Лет
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности,
	|		ГосударственныеПособия.ВидПособия КАК ВидПособия
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНеРабМатериНадб40До3Лет) И ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|	
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособияНеРабМатериНадб40До3Лет
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ГосударственныеПособия.ВидПособия) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНеРабМатериНадб40До3Лет) И ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности";
	
	// РазмерПособияНаРебенкаСтарше3хЛет
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки расчитываемых движений
	//		РазмерПособия - размер пособия
	//	Описание:
	//		получает размер пособия на ребенка старше 3 лет 
	//		для каждой строки начислений
	//
	РазмерПособияНаРебенкаСтарше3ЛетТекст = "ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	//vvv
	//|	ГосударственныеПособия.Размер КАК РазмерПособия,
	|	ГосударственныеПособия.Размер / ВЫБОР КОГДА ДатыАктуальностиРазмераПособия.ДатаАктуальности <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РазмерПособия,
	//
	|	ДатыАктуальностиРазмераПособия.ВидПособия КАК ВидПособия
	|ПОМЕСТИТЬ ВТРазмерПособияНаРебенкаСтарше3Лет
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности,
	|		ГосударственныеПособия.ВидПособия КАК ВидПособия
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНаРебенкаСтарше3Лет) И ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|	
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособияНаРебенкаСтарше3Лет
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ГосударственныеПособия.ВидПособия) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНаРебенкаСтарше3Лет) И ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности";
	
	// РазмерПособияНаРебенкаДо18ЛетНадб40
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки расчитываемых движений
	//		РазмерПособия - размер пособия
	//	Описание:
	//		получает размер пособия на ребенка до 18 лет с надбавкой 40% 
	//		для каждой строки начислений
	//
	РазмерПособияНаРебенкаДо18ЛетНадб40Текст = "ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	//vvv
	//|	ГосударственныеПособия.Размер КАК РазмерПособия,
	|	ГосударственныеПособия.Размер / ВЫБОР КОГДА ДатыАктуальностиРазмераПособия.ДатаАктуальности <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РазмерПособия,
	//
	|	ДатыАктуальностиРазмераПособия.ВидПособия КАК ВидПособия
	|ПОМЕСТИТЬ ВТРазмерПособияНаРебенкаДо18ЛетНадб40
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности,
	|		ГосударственныеПособия.ВидПособия КАК ВидПособия
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНаРебенкаДо18ЛетНадб40) И ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|	
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособияНаРебенкаДо18ЛетНадб40
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ГосударственныеПособия.ВидПособия) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНаРебенкаДо18ЛетНадб40) И ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности";
	
	// РазмерПособияНаРебенкаИнвалида
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки расчитываемых движений
	//		РазмерПособия - размер пособия
	//	Описание:
	//		получает размер пособия на ребенка-инвалида до 18 лет 
	//		для каждой строки начислений
	//
	РазмерПособияНаРебенкаИнвалидаТекст = "ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	//vvv
	//|	ГосударственныеПособия.Размер КАК РазмерПособия,
	|	ГосударственныеПособия.Размер / ВЫБОР КОГДА ДатыАктуальностиРазмераПособия.ДатаАктуальности <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РазмерПособия,
	//
	|	ДатыАктуальностиРазмераПособия.ВидПособия КАК ВидПособия
	|ПОМЕСТИТЬ ВТРазмерПособияНаРебенкаИнвалида
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности,
	|		ГосударственныеПособия.ВидПособия КАК ВидПособия
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНаРебенкаИнвалида) И ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|	
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособияНаРебенкаИнвалида
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ГосударственныеПособия.ВидПособия) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНаРебенкаИнвалида) И ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности";
	
	// РазмерПособияНаРебенкаВИЧ
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки расчитываемых движений
	//		РазмерПособия - размер пособия
	//	Описание:
	//		получает размер пособия на ребенка инфицированного ВИЧ до 18 лет 
	//		для каждой строки начислений
	//
	РазмерПособияНаРебенкаВИЧТекст = "ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	//vvv
	//|	ГосударственныеПособия.Размер КАК РазмерПособия,
	|	ГосударственныеПособия.Размер / ВЫБОР КОГДА ДатыАктуальностиРазмераПособия.ДатаАктуальности <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РазмерПособия,
	//
	|	ДатыАктуальностиРазмераПособия.ВидПособия КАК ВидПособия
	|ПОМЕСТИТЬ ВТРазмерПособияНаРебенкаВИЧ
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности,
	|		ГосударственныеПособия.ВидПособия КАК ВидПособия
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНаРебенкаВИЧ) И ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|	
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособияНаРебенкаВИЧ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ГосударственныеПособия.ВидПособия) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО (ГосударственныеПособия.ВидПособия = &ВидПособияНаРебенкаВИЧ) И ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности";
	
		
	
	РазмерЧасоваяМинимальнаяЗарплатаТекст = 
	"ВЫБРАТЬ
	|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
	|	РазмерыПараметровДляРасчетаРБ.Размер КАК Размер,
	|	ДатыАктуальности.ВидПараметра
	|ПОМЕСТИТЬ ВТРазмерЧасоваяМинимальнаяЗарплата
   	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(РазмерыПараметровДляРасчетаРБ.Период) КАК ДатаАктуальности,
 	|		РазмерыПараметровДляРасчетаРБ.ВидПараметра 
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|			ПО (РазмерыПараметровДляРасчетаРБ.Период <= Основной.ПериодДействияНачало)
	|				И (РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.ЧасоваяМинимальнаяЗарплата))
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор
	|		И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоРазмераМинимальнойЗарплаты)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		РазмерыПараметровДляРасчетаРБ.ВидПараметра) КАК ДатыАктуальности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (РазмерыПараметровДляРасчетаРБ.Период = ДатыАктуальности.ДатаАктуальности)
	|		И РазмерыПараметровДляРасчетаРБ.ВидПараметра =  ДатыАктуальности.ВидПараметра";
	
	//vvv
	СреднемесячнаяНормаЧасовТекст = 
	"ВЫБРАТЬ
	|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
	|	РазмерыПараметровДляРасчетаРБ.Размер КАК Размер,
	|	ДатыАктуальности.ВидПараметра
	|ПОМЕСТИТЬ ВТСреднемесячнаяНормаЧасов
   	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(РазмерыПараметровДляРасчетаРБ.Период) КАК ДатаАктуальности,
 	|		РазмерыПараметровДляРасчетаРБ.ВидПараметра 
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|			ПО (РазмерыПараметровДляРасчетаРБ.Период <= Основной.ПериодДействияНачало)
	|				И (РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаЧасов))
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор
	//|		И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоРазмераМинимальнойЗарплаты)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		РазмерыПараметровДляРасчетаРБ.ВидПараметра) КАК ДатыАктуальности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (РазмерыПараметровДляРасчетаРБ.Период = ДатыАктуальности.ДатаАктуальности)
	|		И РазмерыПараметровДляРасчетаРБ.ВидПараметра =  ДатыАктуальности.ВидПараметра";
	//
	
	РазмерМесячнаяМинимальнаяЗарплатаТекст = 
	"ВЫБРАТЬ
	|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
	|	РазмерыПараметровДляРасчетаРБ.Размер КАК Размер,
	|	ДатыАктуальности.ВидПараметра
	|ПОМЕСТИТЬ ВТРазмерМесячнаяМинимальнаяЗарплата
   	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(РазмерыПараметровДляРасчетаРБ.Период) КАК ДатаАктуальности,
 	|		РазмерыПараметровДляРасчетаРБ.ВидПараметра 
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|			ПО (РазмерыПараметровДляРасчетаРБ.Период <= Основной.ПериодДействияНачало)
	|				И (РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.МинимальнаяЗарплатаРБ))
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор
	|		И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоРазмераМЗПотМесячнойМЗП)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		РазмерыПараметровДляРасчетаРБ.ВидПараметра) КАК ДатыАктуальности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (РазмерыПараметровДляРасчетаРБ.Период = ДатыАктуальности.ДатаАктуальности)
	|		И РазмерыПараметровДляРасчетаРБ.ВидПараметра =  ДатыАктуальности.ВидПараметра";

	РазмерБПМТекст = 
	"ВЫБРАТЬ
	|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
	|	РазмерыПараметровДляРасчетаРБ.Размер КАК Размер,
	|	ДатыАктуальности.ВидПараметра
	|ПОМЕСТИТЬ ВТРазмерБПМ
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(РазмерыПараметровДляРасчетаРБ.Период) КАК ДатаАктуальности,
 	|		РазмерыПараметровДляРасчетаРБ.ВидПараметра 
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|			ПО (РазмерыПараметровДляРасчетаРБ.Период <= Основной.ПериодДействияНачало)
	|				И (РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.БПМ))
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор
	//vvv
	//|		И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ОтпускПоБеременностиОтБПМ)
	|		И (Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ОтпускПоБеременностиОтБПМ) ИЛИ (Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Индексация))) 
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		РазмерыПараметровДляРасчетаРБ.ВидПараметра) КАК ДатыАктуальности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (РазмерыПараметровДляРасчетаРБ.Период = ДатыАктуальности.ДатаАктуальности)
	|		И РазмерыПараметровДляРасчетаРБ.ВидПараметра =  ДатыАктуальности.ВидПараметра";
	
	//vvv
	РазмерБПМДляУдержанийТекст = 
	"ВЫБРАТЬ
	|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
	|	РазмерыПараметровДляРасчетаРБ.Размер КАК Размер,
	|	ДатыАктуальности.ВидПараметра
	|ПОМЕСТИТЬ ВТРазмерБПМДляУдержаний
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(РазмерыПараметровДляРасчетаРБ.Период) КАК ДатаАктуальности,
 	|		РазмерыПараметровДляРасчетаРБ.ВидПараметра 
	|	ИЗ
	|		РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|			ПО (РазмерыПараметровДляРасчетаРБ.Период <= Основной.БазовыйПериодНачало)
	|				И (РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.БПМ))
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		РазмерыПараметровДляРасчетаРБ.ВидПараметра) КАК ДатыАктуальности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (РазмерыПараметровДляРасчетаРБ.Период = ДатыАктуальности.ДатаАктуальности)
	|		И РазмерыПараметровДляРасчетаРБ.ВидПараметра =  ДатыАктуальности.ВидПараметра";
	
	// СдельныйЗаработокОрганизацииТекст
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
	//		РазмерЗаработка - размер сдельного заработка
	//	Описание:
	//		получает размер сдельного заработка для начислений со способом расчета "Сдельный заработок"
	//
	СдельныйЗаработокОрганизацииТекст =
	"ВЫБРАТЬ
	|	НесгруппированныеДанные.ОсновнойНомерСтроки КАК ОсновнойНомерСтроки,
	//vvv
	|	НесгруппированныеДанные.ПроцентПремии КАК ПроцентПремии,
	|	НесгруппированныеДанные.КоэффициентСтажа КАК КоэффициентСтажаСделка,
	|	НесгруппированныеДанные.КТУ КАК КТУ,
	//
	|	СУММА(НесгруппированныеДанные.СуммаЗаработка) КАК СуммаЗаработка,
	|	МАКСИМУМ(НесгруппированныеДанные.ОшибкаВводаФактическойВыработки) КАК ОшибкаВводаФактическойВыработки
	|ПОМЕСТИТЬ ВТСдельныйЗаработокОрганизации
	|ИЗ
	|	(ВЫБРАТЬ
	|		Начисления.НомерСтроки КАК ОсновнойНомерСтроки,
	//vvv
	|		СУММА(ФактическаяВыработка.ПроцентПремии) КАК ПроцентПремии,
	|		СУММА(ФактическаяВыработка.КоэффициентСтажа) КАК КоэффициентСтажа,
	|		СУММА(ФактическаяВыработка.КТУ) КАК КТУ,
	//|		ФактическаяВыработка.Выработка КАК СуммаЗаработка,
	|		СУММА(ФактическаяВыработка.Выработка) КАК СуммаЗаработка,
	//
	|		ЛОЖЬ КАК ОшибкаВводаФактическойВыработки
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|				Регистратор = &парамРегистратор
	|					И Авторасчет
	//vvv добавим сдельный приработок водителей
	|					И ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйПриработок),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйПриработокВодителей) ,ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавкеВодителей),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроцентомОтСдельногоЗаработкаВодителей),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоРазницеМеждуЧасовымиСтавками))) КАК Начисления
	//
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработка
	|			ПО Начисления.Сотрудник = ФактическаяВыработка.Сотрудник
	//vvv
	//|				И (ФактическаяВыработка.Период МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|				И (ФактическаяВыработка.Месяц МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И ((ВЫБОР КОГДА Начисления.ВидРасчета.СпособРасчета=ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоРазницеМеждуЧасовымиСтавками)  ТОГДА Начисления.Показатель2 ИНАЧЕ Начисления.Показатель1 КОНЕЦ = ФактическаяВыработка.Тариф) ИЛИ (ФактическаяВыработка.Тариф=0))
	|			И ((Начисления.Автомобиль=ФактическаяВыработка.Автомобиль) ИЛИ (Начисления.Автомобиль=ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)))
	//
	|				И (ФактическаяВыработка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ЗаДень)))
	//vvv
	|СГРУППИРОВАТЬ ПО
	|	Начисления.НомерСтроки	
	//
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Начисления.НомерСтроки,
	//vvv
	|		СУММА(ФактическаяВыработка.ПроцентПремии) КАК ПроцентПремии,
	|		СУММА(ФактическаяВыработка.КоэффициентСтажа) КАК КоэффициентСтажа,
	|		СУММА(ФактическаяВыработка.КТУ) КАК КТУ,
	//|		ФактическаяВыработка.Выработка,
	|		СУММА(ФактическаяВыработка.Выработка),
	//
	|		ВЫБОР
	|			КОГДА ПроверкаКоличестваЗаписей.Сотрудник ЕСТЬ НЕ NULL 
	|					И ФактическаяВыработка.Выработка ЕСТЬ НЕ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработка
	|			ПО Начисления.Сотрудник = ФактическаяВыработка.Сотрудник
	//vvv
	//|				И (ФактическаяВыработка.Период = Начисления.ПериодДействия)
	|				И (ФактическаяВыработка.Месяц = Начисления.ПериодДействия)
	|			И ((ВЫБОР КОГДА Начисления.ВидРасчета.СпособРасчета=ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоРазницеМеждуЧасовымиСтавками)  ТОГДА Начисления.Показатель2 ИНАЧЕ Начисления.Показатель1 КОНЕЦ = ФактическаяВыработка.Тариф) ИЛИ (ФактическаяВыработка.Тариф=0))
	|			И ( (Начисления.Автомобиль=ФактическаяВыработка.Автомобиль) ИЛИ (Начисления.Автомобиль=ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)))
	//
	|				И (ФактическаяВыработка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод)))
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ПроверкаКоличестваЗаписей
	|			ПО Начисления.Сотрудник = ПроверкаКоличестваЗаписей.Сотрудник
	|				И Начисления.ПериодДействия = ПроверкаКоличестваЗаписей.ПериодДействия
	|				И Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ПроверкаКоличестваЗаписей.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
	|				И Начисления.Организация = ПроверкаКоличестваЗаписей.Организация
	|				И (Начисления.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы)
	|						И ПроверкаКоличестваЗаписей.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы)
	|					ИЛИ Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйПриработок)
	|						И ПроверкаКоличестваЗаписей.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйПриработок))
	|				И ((НЕ(Начисления.Регистратор = ПроверкаКоличестваЗаписей.Регистратор
	|						И Начисления.НомерСтроки = ПроверкаКоличестваЗаписей.НомерСтроки)))
	|	ГДЕ
	|		Начисления.Регистратор = &парамРегистратор
	|		И Начисления.Авторасчет
	//vvv
	|СГРУППИРОВАТЬ ПО 
	|	Начисления.НомерСтроки,
	|	ВЫБОР
	|			КОГДА ПроверкаКоличестваЗаписей.Сотрудник ЕСТЬ НЕ NULL 
	|					И ФактическаяВыработка.Выработка ЕСТЬ НЕ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ)
	//
	|КАК НесгруппированныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	НесгруппированныеДанные.ОсновнойНомерСтроки,
	//vvv
	|	НесгруппированныеДанные.ПроцентПремии,
	|	НесгруппированныеДанные.КоэффициентСтажа,
	|	НесгруппированныеДанные.КТУ
	//
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки";
	
	СдельныйЗаработокОрганизацииТекст1 =
	"ВЫБРАТЬ
	|	НесгруппированныеДанные.ОсновнойНомерСтроки КАК ОсновнойНомерСтроки,
	|	СУММА(НесгруппированныеДанные.СуммаЗаработка) КАК СуммаЗаработка,
	|	МАКСИМУМ(НесгруппированныеДанные.ОшибкаВводаФактическойВыработки) КАК ОшибкаВводаФактическойВыработки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Начисления.НомерСтроки КАК ОсновнойНомерСтроки,
	|		ФактическаяВыработка.Выработка КАК СуммаЗаработка,
	|		ЛОЖЬ КАК ОшибкаВводаФактическойВыработки
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|				Регистратор = &парамРегистратор
	|					И Авторасчет
	|					И ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйПриработок), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке))) КАК Начисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработка
	|			ПО Начисления.Сотрудник = ФактическаяВыработка.Сотрудник
	//vvv
	//|				И (ФактическаяВыработка.Период МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|				И (ФактическаяВыработка.Месяц МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	//
	|				И (ФактическаяВыработка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ЗаДень)))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Начисления.НомерСтроки,
	|		ФактическаяВыработка.Выработка,
	|		ВЫБОР
	|			КОГДА ПроверкаКоличестваЗаписей.Сотрудник ЕСТЬ НЕ NULL 
	|					И ФактическаяВыработка.Выработка ЕСТЬ НЕ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработка
	|			ПО Начисления.Сотрудник = ФактическаяВыработка.Сотрудник
	//vvv
	//|				И (ФактическаяВыработка.Период = Начисления.ПериодДействия)
	|				И (ФактическаяВыработка.Месяц = Начисления.ПериодДействия)
	//
	|				И (ФактическаяВыработка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод)))
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ПроверкаКоличестваЗаписей
	|			ПО Начисления.Сотрудник = ПроверкаКоличестваЗаписей.Сотрудник
	|				И Начисления.ПериодДействия = ПроверкаКоличестваЗаписей.ПериодДействия
	|				И Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ПроверкаКоличестваЗаписей.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
	|				И Начисления.Организация = ПроверкаКоличестваЗаписей.Организация
	|				И (Начисления.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы)
	|						И ПроверкаКоличестваЗаписей.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы)
	|					ИЛИ Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйПриработок))
	|				И ((НЕ(Начисления.Регистратор = ПроверкаКоличестваЗаписей.Регистратор
	|						И Начисления.НомерСтроки = ПроверкаКоличестваЗаписей.НомерСтроки)))
	|	ГДЕ
	|		Начисления.Регистратор = &парамРегистратор
	|		И Начисления.Авторасчет) КАК НесгруппированныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	НесгруппированныеДанные.ОсновнойНомерСтроки";
	
	// СдельныйЗаработокКомпанииТекст
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
	//		РазмерЗаработка - размер сдельного заработка
	//	Описание:
	//		получает размер сдельного заработка для начислений со способом расчета "Сдельный заработок"
	//
	СдельныйЗаработокКомпанииТекст =
	"ВЫБРАТЬ
	|	НесгруппированныеДанные.ОсновнойНомерСтроки КАК ОсновнойНомерСтроки,
	|	СУММА(НесгруппированныеДанные.СуммаЗаработка) КАК СуммаЗаработка,
	|	МАКСИМУМ(НесгруппированныеДанные.ОшибкаВводаФактическойВыработки) КАК ОшибкаВводаФактическойВыработки
	|ПОМЕСТИТЬ ВТСдельныйЗаработокКомпании
	|ИЗ
	|	(ВЫБРАТЬ
	|		Начисления.НомерСтроки КАК ОсновнойНомерСтроки,
	|		ФактическаяВыработка.Выработка КАК СуммаЗаработка,
	|		ЛОЖЬ КАК ОшибкаВводаФактическойВыработки
	|	ИЗ
	|		РегистрРасчета.УправленческиеНачисления.ФактическийПериодДействия(
	|				Регистратор = &парамРегистратор
	|					И Авторасчет) КАК Начисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботников КАК ФактическаяВыработка
	|			ПО Начисления.ФизЛицо = ФактическаяВыработка.Физлицо
	|				И (ФактическаяВыработка.Период МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|				И (ФактическаяВыработка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ЗаДень)))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Начисления.НомерСтроки,
	|		ФактическаяВыработка.Выработка,
	|		ВЫБОР
	|			КОГДА ПроверкаКоличестваЗаписей.ФизЛицо ЕСТЬ НЕ NULL 
	|					И ФактическаяВыработка.Выработка ЕСТЬ НЕ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	ИЗ
	|		РегистрРасчета.УправленческиеНачисления КАК Начисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботников КАК ФактическаяВыработка
	|			ПО Начисления.ФизЛицо = ФактическаяВыработка.Физлицо
	|				И (ФактическаяВыработка.Период = Начисления.ПериодДействия)
	|				И (ФактическаяВыработка.СпособВводаДанных = ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод))
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.УправленческиеНачисления КАК ПроверкаКоличестваЗаписей
	|			ПО Начисления.ФизЛицо = ПроверкаКоличестваЗаписей.ФизЛицо
	|				И Начисления.ПериодДействия = ПроверкаКоличестваЗаписей.ПериодДействия
	|				И Начисления.ВидРасчета.ВидУчетаРабочегоВремени = ПроверкаКоличестваЗаписей.ВидРасчета.ВидУчетаРабочегоВремени
	|				И (Начисления.ВидРасчета.ЗачетОтработанногоВремени)
	|				И (ПроверкаКоличестваЗаписей.ВидРасчета.ЗачетОтработанногоВремени)
	|				И ((НЕ(Начисления.Регистратор = ПроверкаКоличестваЗаписей.Регистратор
	|						И Начисления.НомерСтроки = ПроверкаКоличестваЗаписей.НомерСтроки)))
	|	ГДЕ
	|		Начисления.Регистратор = &парамРегистратор
	|		И Начисления.Авторасчет) КАК НесгруппированныеДанные
	|		) КАК НесгруппированныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	НесгруппированныеДанные.ОсновнойНомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки";


	// ВремяПоТабелю
	//	данные по отработанному времени и норме времени по методу "сплошной регистрации" в текущем периоде регистрации
	//	Поля 
	//		НомерСтроки
	//		ОтработаноДнейПоТабелю
	//		ОтработаноЧасовПоТабелю
	//		ОтработаноЧасовПоТабелюОтклонение
	//
	//	Описание                       
	//	Суммируем отработанное время и норму времени в заданном периоде действия для каждой строки начисления
	//	из регистра РабочееВремяРаботниковОрганизаций 
	
	ВремяПоТабелюТекст = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	//vvv комментируем, т.к. не работают часы за свой счет, т.е. неотработанные внутрисменные часы
	//|	СУММА(ВЫБОР
	//|			КОГДА Основной.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
	//|				ТОГДА ОтработанноеВремя.Часов
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК ОтработаноЧасовПоТабелюОтклонение,
	|		0 КАК ОтработаноЧасовПоТабелюОтклонение,
	//
	|	СУММА(ВЫБОР
	|			КОГДА ОтработанноеВремя.Регистратор = &парамРегистратор
	//vvv доавляем сюда условие из первой части запроса
	//|					И Основной.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы))
	|					И Основной.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы),ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
	//
	|				ТОГДА ОтработанноеВремя.Часов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВнутрисменныеЧасыОтклонение
	|ПОМЕСТИТЬ ВТВремяПоТабелю
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(Регистратор = &парамРегистратор) КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВнутрисменноеВремяРаботниковОрганизаций КАК ОтработанноеВремя
	|		ПО Основной.Сотрудник = ОтработанноеВремя.Сотрудник
	|			И (ОтработанноеВремя.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	// ОтработаноПоВидуВремениДляПоказателейТекст
	//	Данные по отработанному времени введенное табелем по указанному в начислении виду учета времени
	ОтработаноПоВидуВремениДляПоказателейТекст = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	СУММА(РабочееВремяРаботников.Дней) КАК Дней,
	|	СУММА(РабочееВремяРаботников.Часов) КАК Часов
	|ПОМЕСТИТЬ ВТОтработаноПоВидуВремениДляПоказателей
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(Регистратор = &парамРегистратор И Авторасчет и ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)) КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботников
	|		ПО Основной.Сотрудник = РабочееВремяРаботников.Сотрудник
	|			И (РабочееВремяРаботников.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|			И (РабочееВремяРаботников.ВидИспользованияРабочегоВремени = Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени)
	|			И (РабочееВремяРаботников.Регистратор <> &парамРегистратор)
	//vvv добавляем табель водителей
	//|			И (РабочееВремяРаботников.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
	|			И ((РабочееВремяРаботников.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации) или (РабочееВремяРаботников.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениВодителейОрганизации))
	//
	|	
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	ВремяВведенноеВЦеломЗаПериодТекст = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	СУММА(ВЫБОР
	|			КОГДА Основной.ВидУчетаВремени = &ПоДням
	|				ТОГДА ОтработанноеВремя.Дней
	|			ИНАЧЕ ОтработанноеВремя.Часов
	|		КОНЕЦ) КАК ОсновноеЗначениеПоТабелю,
	|	СУММА(ОтработанноеВремя.Дней) КАК ДнейПоТабелю,
	|	СУММА(ОтработанноеВремя.Часов) КАК ЧасовПоТабелю,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПроверкаКоличестваЗаписей.Сотрудник ЕСТЬ НЕ NULL 
	|					И ОтработанноеВремя.Дней ЕСТЬ НЕ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ОшибкаВводаОтработанногоВремени
	|ПОМЕСТИТЬ ВТВремяВведенноеВЦеломЗаПериод
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработанноеВремя
	|		ПО Основной.Сотрудник = ОтработанноеВремя.Сотрудник
	|			И Основной.ПериодДействия = ОтработанноеВремя.Период
	|			И Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
	|			И (ОтработанноеВремя.ВЦеломЗаПериод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ПроверкаКоличестваЗаписей
	|		ПО Основной.Сотрудник = ПроверкаКоличестваЗаписей.Сотрудник
	|			И Основной.ПериодДействия = ПроверкаКоличестваЗаписей.ПериодДействия
	|			И Основной.ПериодРегистрации >= ПроверкаКоличестваЗаписей.ПериодРегистрации
	|			И Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ПроверкаКоличестваЗаписей.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
	|			И Основной.Организация = ПроверкаКоличестваЗаписей.Организация
	|			И (Основной.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
	|			И (ПроверкаКоличестваЗаписей.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
	|			И ((НЕ(Основной.Регистратор = ПроверкаКоличестваЗаписей.Регистратор
	|					И Основной.НомерСтроки = ПроверкаКоличестваЗаписей.НомерСтроки)))
	|			И ((НЕ(Основной.ВидРасчета = ПроверкаКоличестваЗаписей.ВидРасчета 
	|					И Основной.ПериодДействияНачало = ПроверкаКоличестваЗаписей.ПериодДействияНачало
	|					И Основной.ПериодДействияКонец = ПроверкаКоличестваЗаписей.ПериодДействияКонец
	|					И (Основной.ПериодРегистрации <> ПроверкаКоличестваЗаписей.ПериодРегистрации  
	|						ИЛИ Основной.Сторно <> ПроверкаКоличестваЗаписей.Сторно))))
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";

	СводныеИндивидуальныеГрафикиТекст = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Основной.ВидУчетаВремени = &ПоДням
	|			ТОГДА СводныеИндивидуальныеГрафики.Дней
	|		КОГДА Основной.ВидУчетаВремени = &ПоЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.Часов
	|		КОГДА Основной.ВидУчетаВремени = &ПоВечернимЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовВечерних
	|		КОГДА Основной.ВидУчетаВремени = &ПоНочнымЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовНочных
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаВремени,
	|	ВЫБОР
	|		КОГДА Основной.ВидУчетаВремени = &ПоДням
	|			ТОГДА СводныеИндивидуальныеГрафики.Дней
	|		КОГДА Основной.ВидУчетаВремени = &ПоВечернимЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовВечерних
	|		КОГДА Основной.ВидУчетаВремени = &ПоНочнымЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовНочных
	|		ИНАЧЕ СводныеИндивидуальныеГрафики.Часов
	|	КОНЕЦ КАК ОсновноеЗначение,
	|	СводныеИндивидуальныеГрафики.Дней КАК ДнейПоГрафику,
	|	СводныеИндивидуальныеГрафики.Часов КАК ЧасовПоГрафику,
	|	СводныеИндивидуальныеГрафики.Дней КАК НормаДнейПоГрафику,
	|	СводныеИндивидуальныеГрафики.Часов КАК НормаЧасовПоГрафику,
	|	ВЫБОР
	|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|				И СводныеИндивидуальныеГрафики.Дней ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаВводаИндивидуальногоГрафикаРаботы
	|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафики
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО Основной.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И Основной.ПериодДействия = СводныеИндивидуальныеГрафики.Месяц
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	НормаВремениПоОбщемуГрафикуТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК НормаДней,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма) КАК НормаЧасов,
	|	Основной.ГрафикРаботыНорма КАК ГрафикРаботы,
	|	Основной.ПериодДействия
	|ПОМЕСТИТЬ ВТНормаВремениПоОбщемуГрафику
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО Основной.ГрафикРаботыНорма = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И Основной.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
	|			И (ГрафикиРаботыПоВидамВремени.План)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|	И Основной.ГрафикРаботыНорма <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка) 
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.ГрафикРаботыНорма,
	|	Основной.НомерСтроки,
	|	Основной.ПериодДействия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГрафикРаботы";
	
	//vvv
	НормаВремениПоГрафикуСотрудникаТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК НормаДней,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма) КАК НормаЧасов,
	|	Основной.ГрафикСотрудника КАК ГрафикРаботы,
	|	Основной.ГрафикСотрудника.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
	|	Основной.ПериодДействия
	|ПОМЕСТИТЬ ВТНормаВремениПоГрафикуСотрудника
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО Основной.ГрафикСотрудника = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И Основной.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
	|			И (ГрафикиРаботыПоВидамВремени.План)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.ГрафикСотрудника,
	|	Основной.НомерСтроки,
	|	Основной.ПериодДействия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГрафикРаботы";
	//
	// Сумма отработанного времени по видам времени: 
	//	ОтработанноеВПределахНормы,
	//	ЧасовоеОтработанноеВПределахНормы,
	//	ОтработанноеСверхНормы, необходим для расчета показателей ОтработаноВремениВДнях, ОтработаноВремениВЧасах
	
	СотрудникиПериодыДействия =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	ОсновныеНачисления.ПериодДействия КАК ПериодДействия
	|ПОМЕСТИТЬ ВТ_СотрудникиПериодыДействия
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	ОсновныеНачисления.Регистратор = &парамРегистратор
	|	И ОсновныеНачисления.Авторасчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия";
	
	СписокВРПоДням =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
	|ПОМЕСТИТЬ ВТ_СписокВРПоДням
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";
	
	СписокВРПоЧасам =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
	|ПОМЕСТИТЬ ВТ_СписокВРПоЧасам
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";
	
	ОсновныеФПД = 
	"ВЫБРАТЬ
	|	ФактическийПериодДействия.НомерСтроки,
	|	ФактическийПериодДействия.Сотрудник КАК Сотрудник,
	|	ФактическийПериодДействия.Организация КАК Организация,
	|	ФактическийПериодДействия.ПериодДействия КАК ПериодДействия,
	|	ФактическийПериодДействия.ПериодДействияНачало,
	|	ФактическийПериодДействия.ПериодДействияКонец
	|ПОМЕСТИТЬ ВТ_ОсновныеФПД
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			Регистратор = &парамРегистратор
	|				И Авторасчет) КАК ФактическийПериодДействия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Организация,
	|	ПериодДействия";
	
	
	ВсегоОтработаноВремени = 
	"ВЫБРАТЬ
	|	НесгруппированныеДанные.НомерСтроки КАК НомерСтроки,
	|	СУММА(НесгруппированныеДанные.ОтработаноДней) КАК ВсегоОтработаноДней,
	|	СУММА(НесгруппированныеДанные.ОтработаноЧасов) КАК ВсегоОтработаноЧасов
	|ПОМЕСТИТЬ ВТВсегоОтработаноВремени
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		ГрафикиРаботы.ОсновноеЗначение + ВЫБОР
	|			КОГДА Вспомогательный.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)
	|				ТОГДА Вспомогательный.ОтработаноДней
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОтработаноДней,
	|		ГрафикиРаботы.ДополнительноеЗначение КАК ОтработаноЧасов
	|	ИЗ
	|		ВТ_ОсновныеФПД КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|					ВидРасчета В
	|							(ВЫБРАТЬ
	|								СписокВР.ВидРасчета
	|							ИЗ
	|								ВТ_СписокВРПоДням КАК СписокВР)
	|						И (Сотрудник, ПериодДействия) В
	|							(ВЫБРАТЬ
	|								ОсновныеНачисления.Сотрудник,
	|								ОсновныеНачисления.ПериодДействия
	|							ИЗ
	|								ВТ_СотрудникиПериодыДействия КАК ОсновныеНачисления)) КАК Вспомогательный
	|			ПО Основной.Сотрудник = Вспомогательный.Сотрудник
	|				И Основной.Организация = Вспомогательный.Организация
	|				И Основной.ПериодДействия = Вспомогательный.ПериодДействия
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|			ПО (Вспомогательный.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы)
	|				И (ГрафикиРаботы.Месяц = Вспомогательный.ПериодДействия)
	|				И (ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|				И (ГрафикиРаботы.Дата МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|				И (ГрафикиРаботы.Дата МЕЖДУ Вспомогательный.ПериодДействияНачало И Вспомогательный.ПериодДействияКонец)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Основной.НомерСтроки,
	|		0,
	|		Вспомогательный.ОтработаноЧасов
	|	ИЗ
	|		ВТ_ОсновныеФПД КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|					ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|						И ВидРасчета В
	|							(ВЫБРАТЬ
	|								СписокВР.ВидРасчета
	|							ИЗ
	|								ВТ_СписокВРПоЧасам КАК СписокВР)
	|						И (Сотрудник, ПериодДействия) В
	|							(ВЫБРАТЬ
	|								ОсновныеНачисления.Сотрудник,
	|								ОсновныеНачисления.ПериодДействия
	|							ИЗ
	|								ВТ_СотрудникиПериодыДействия КАК ОсновныеНачисления)) КАК Вспомогательный
	|			ПО Основной.Сотрудник = Вспомогательный.Сотрудник
	|				И Основной.Организация = Вспомогательный.Организация
	|				И Основной.ПериодДействия = Вспомогательный.ПериодДействия
	|				И (Вспомогательный.ПериодДействияНачало МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|				И (Вспомогательный.ПериодДействияКонец МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)) КАК НесгруппированныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	НесгруппированныеДанные.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	ФизлицаПериодыДействия =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УправленческиеНачисления.ФизЛицо КАК ФизЛицо,
	|	УправленческиеНачисления.ПериодДействия КАК ПериодДействия
	|ПОМЕСТИТЬ ВТ_ФизлицаПериодыДействия
	|ИЗ
	|	РегистрРасчета.УправленческиеНачисления КАК УправленческиеНачисления
	|ГДЕ
	|	УправленческиеНачисления.Регистратор = &парамРегистратор
	|	И УправленческиеНачисления.Авторасчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	ПериодДействия";
	// Сумма отработанного времени по видам времени: 
	//	ОтработанноеВПределахНормы,
	//	ЧасовоеОтработанноеВПределахНормы,
	//	ОтработанноеСверхНормы, необходим для расчета показателей ОтработаноВремениВДнях, ОтработаноВремениВЧасах
	
	УпрВсегоОтработаноВремени = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	СУММА(ГрафикиРаботы.ОсновноеЗначение) КАК ВсегоОтработаноДней,
	|	СУММА(ГрафикиРаботы.ДополнительноеЗначение) КАК ВсегоОтработаноЧасов
	|ПОМЕСТИТЬ ВТУпрВсегоОтработаноВремени
	|ИЗ
	|	РегистрРасчета.УправленческиеНачисления.ФактическийПериодДействия(
	|			Регистратор = &парамРегистратор
	|				И Авторасчет) КАК Основной
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.УправленческиеНачисления.ФактическийПериодДействия(
	|				ВидРасчета.ЗачетОтработанногоВремени
	|					И (ФизЛицо, ПериодДействия) В
	|						(ВЫБРАТЬ
	|							УправленческиеНачисления.ФизЛицо,
	|							УправленческиеНачисления.ПериодДействия
	|						ИЗ
	|							ВТ_ФизлицаПериодыДействия КАК УправленческиеНачисления)) КАК Вспомогательный
	|		ПО Основной.ФизЛицо = Вспомогательный.ФизЛицо
	|			И Основной.ПериодДействия = Вспомогательный.ПериодДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|		ПО (Вспомогательный.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы)
	|			И (ГрафикиРаботы.Месяц = Вспомогательный.ПериодДействия)
	|			И (ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|			И (ГрафикиРаботы.Дата МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|			И (ГрафикиРаботы.Дата МЕЖДУ Вспомогательный.ПериодДействияНачало И Вспомогательный.ПериодДействияКонец)
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	
	// СоответствиеТабеляИНачислений
	// Данное по ошибке, возникающей в случае ввода табеля с отклонениями, на которые не введены документы
	//	Поля 
	//		НомерСтроки
	//		ПредупреждениеОНесоответствииТабеляИНачисления
	//
	//	Описание                       
	//	Суммируем отработанное время в заданном периоде действия для каждой строки начисления
	//	из регистра РабочееВремяРаботниковОрганизаций 
	
	СоответствиеТабеляИНачислений = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|					И Основной.ОсновноеЗначениеФактическийПериодДействия = СУММА(РабочееВремяРаботниковОрганизаций.Дней)
	|				ИЛИ Основной.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам))
	|					И Основной.ОсновноеЗначениеФактическийПериодДействия = СУММА(РабочееВремяРаботниковОрганизаций.Часов)
	|				ИЛИ СУММА(РабочееВремяРаботниковОрганизаций.Часов) ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	//vvv   отключим проверку фактического периода для ночных, чтобы использовать ночные часы для расчета по другим способам расчета, там где нужно отработанное ночное время 
	|		КОГДА Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
	|			И Основной.ВидРасчета.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы)
	|				ТОГДА ЛОЖЬ
	//
	|		КОГДА (НЕ Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В 
	|			(ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка), 
	|			ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные), 
	|			ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы), 
	|			ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы), 
	|			ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)))
	|				И (НЕ СУММА(РабочееВремяРаботниковОрганизаций.Дней) ЕСТЬ NULL )
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПредупреждениеОНесоответствииТабеляИНачисления
	|ПОМЕСТИТЬ ВТСоответствиеТабеляИНачислений
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ДанныеГрафика(Регистратор = &парамРегистратор) КАК Основной
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
	|		ПО (РабочееВремяРаботниковОрганизаций.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|			И Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени
	|			И Основной.Сотрудник = РабочееВремяРаботниковОрганизаций.Сотрудник
	|			И (НАЧАЛОПЕРИОДА(РабочееВремяРаботниковОрганизаций.Период, МЕСЯЦ) = &парамПериодРегистрации)
	|			И ((НЕ РабочееВремяРаботниковОрганизаций.ВЦеломЗаПериод))
	|ГДЕ
	|	Основной.Авторасчет
	|	И Основной.Регистратор = &ПарамРегистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки,
	|	Основной.ВидУчетаВремени,
	|	Основной.ОсновноеЗначениеФактическийПериодДействия,
	//vvv
	|	Основной.ВидРасчета.СпособРасчета,
	//
	|	Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени";	
	
	
	
	// ВремяПоТабелю
	//	данные по отработанному времени и норме времени по методу "сплошной регистрации" в текущем периоде регистрации
	//	Поля 
	//		НомерСтроки
	//		ОтработаноДнейПоТабелю
	//		ОтработаноЧасовПоТабелю
	//		ОтработаноЧасовПоТабелюОтклонение
	//
	//	Описание                       
	//	Суммируем отработанное время и норму времени в заданном периоде действия для каждой строки начисления
	//	из регистра РабочееВремяРаботниковОрганизаций 
	
	УпрВремяПоТабелюТекст = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	СУММА(ВЫБОР
	|			КОГДА Основной.ВидРасчета.ВидУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
	|				ТОГДА ВЫБОР
	|						КОГДА Основной.ВидУчетаВремени = &ПоДням
	|							ТОГДА ОтработанноеВремя.Дней
	|						ИНАЧЕ ОтработанноеВремя.Часов
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОсновноеЗначениеПоТабелю,
	|	СУММА(ВЫБОР
	|			КОГДА Основной.ВидРасчета.ВидУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
	|				ТОГДА ОтработанноеВремя.Дней
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтработаноДнейПоТабелю,
	|	СУММА(0) КАК ВнутрисменныеЧасыОтклонение,
	|	СУММА(ВЫБОР
	|			КОГДА Основной.ВидРасчета.ВидУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
	|				ТОГДА ОтработанноеВремя.Часов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтработаноЧасовПоТабелю,
	|	 0 КАК ОтработаноЧасовПоТабелюОтклонение
	|ПОМЕСТИТЬ ВТУпрВремяПоТабелю
	|ИЗ
	|	РегистрРасчета.УправленческиеНачисления КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработанноеВремя
	|		ПО Основной.Физлицо = ОтработанноеВремя.Сотрудник.Физлицо
	|			И (ОтработанноеВремя.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|			И ((НЕ ОтработанноеВремя.ВЦеломЗаПериод))
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки
	|ИНДЕКСИРОВАТЬ ПО 
	|	НомерСтроки";
	
		
	// ОтработаноПоВидуВремениДляПоказателейТекст
	//	Данные по отработанному времени введенное табелем по указанному в начислении виду учета времени
	УпрОтработаноПоВидуВремениДляПоказателейТекст = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	СУММА(РабочееВремяРаботников.Дней) КАК Дней,
	|	СУММА(РабочееВремяРаботников.Часов) КАК Часов
	|ПОМЕСТИТЬ ВТУпрОтработаноПоВидуВремениДляПоказателей
	|ИЗ
	|	РегистрРасчета.УправленческиеНачисления КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботников
	|		ПО Основной.Физлицо = РабочееВремяРаботников.Сотрудник.Физлицо
	|			И (РабочееВремяРаботников.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|			И (РабочееВремяРаботников.ВидИспользованияРабочегоВремени = Основной.ВидРасчета.ВидУчетаРабочегоВремени)
	|			И (Основной.ВидРасчета.ВидУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка))
	|			И (РабочееВремяРаботников.Регистратор <> &парамРегистратор)
	|			И (РабочееВремяРаботников.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	УпрВремяВведенноеВЦеломЗаПериодТекст = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	СУММА(ВЫБОР
	|			КОГДА Основной.ВидУчетаВремени = &ПоДням
	|				ТОГДА ОтработанноеВремя.Дней
	|			ИНАЧЕ ОтработанноеВремя.Часов
	|		КОНЕЦ) КАК ОсновноеЗначениеПоТабелю,
	|	СУММА(ОтработанноеВремя.Дней) КАК ДнейПоТабелю,
	|	СУММА(ОтработанноеВремя.Часов) КАК ЧасовПоТабелю,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > ПроверкаКоличестваЗаписей.ПериодДействияНачало
	|					ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < ПроверкаКоличестваЗаписей.ПериодДействияКонец)
	|					И ОтработанноеВремя.Дней ЕСТЬ НЕ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ОшибкаВводаОтработанногоВремени
	|ПОМЕСТИТЬ ВТУпрВремяВведенноеВЦеломЗаПериод
	|ИЗ
	|	РегистрРасчета.УправленческиеНачисления КАК Основной
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НАЧАЛОПЕРИОДА(МИНИМУМ(НачисленияРаботников.ПериодДействияНачало), ДЕНЬ) КАК ПериодДействияНачало,
	|			КОНЕЦПЕРИОДА(МАКСИМУМ(НачисленияРаботников.ПериодДействияКонец), ДЕНЬ) КАК ПериодДействияКонец,
	|			НачисленияРаботников.ПериодДействия КАК ПериодДействия,
	|			НачисленияРаботников.ВидРасчета КАК ВидРасчета,
	|			НачисленияРаботников.ФизЛицо КАК ФизЛицо
	|		ИЗ
	|			РегистрРасчета.УправленческиеНачисления КАК НачисленияРаботников
	|		ГДЕ
	|			НачисленияРаботников.Регистратор = &парамРегистратор
	|			И НачисленияРаботников.Авторасчет
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НачисленияРаботников.ПериодДействия,
	|			НачисленияРаботников.ВидРасчета,
	|			НачисленияРаботников.ФизЛицо) КАК ПроверкаКоличестваЗаписей
	|		ПО Основной.ФизЛицо = ПроверкаКоличестваЗаписей.ФизЛицо
	|			И Основной.ВидРасчета = ПроверкаКоличестваЗаписей.ВидРасчета
	|			И Основной.ПериодДействия = ПроверкаКоличестваЗаписей.ПериодДействия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработанноеВремя
	|		ПО Основной.Физлицо = ОтработанноеВремя.Сотрудник.Физлицо
	|			И ОтработанноеВремя.Период = Основной.ПериодДействия
	|			И Основной.ВидРасчета.ВидУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
	|			И (ОтработанноеВремя.ВЦеломЗаПериод)
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки
	|ИНДЕКСИРОВАТЬ ПО 
	|	НомерСтроки";

	УпрСводныеИндивидуальныеГрафикиТекст = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Основной.ВидУчетаВремени = &ПоДням
	|			ТОГДА СводныеИндивидуальныеГрафики.Дней
	|		КОГДА Основной.ВидУчетаВремени = &ПоЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.Часов
	|		КОГДА Основной.ВидУчетаВремени = &ПоВечернимЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовВечерних
	|		КОГДА Основной.ВидУчетаВремени = &ПоНочнымЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовНочных
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаВремени,
	|	ВЫБОР
	|		КОГДА Основной.ВидУчетаВремени = &ПоДням
	|			ТОГДА СводныеИндивидуальныеГрафики.Дней
	|		КОГДА Основной.ВидУчетаВремени = &ПоВечернимЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовВечерних
	|		КОГДА Основной.ВидУчетаВремени = &ПоНочнымЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовНочных
	|		ИНАЧЕ СводныеИндивидуальныеГрафики.Часов
	|	КОНЕЦ КАК ОсновноеЗначение,
	|	СводныеИндивидуальныеГрафики.Дней КАК ДнейПоГрафику,
	|	СводныеИндивидуальныеГрафики.Часов КАК ЧасовПоГрафику,
	|	СводныеИндивидуальныеГрафики.Дней КАК НормаДнейПоГрафику,
	|	СводныеИндивидуальныеГрафики.Часов КАК НормаЧасовПоГрафику,
	|	ВЫБОР
	|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|				И СводныеИндивидуальныеГрафики.Дней ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаВводаИндивидуальногоГрафикаРаботы
	|ПОМЕСТИТЬ ВТУпрСводныеИндивидуальныеГрафики
	|ИЗ
	|	РегистрРасчета.УправленческиеНачисления КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО Основной.ФизЛицо = СводныеИндивидуальныеГрафики.Сотрудник
	|			И (СводныеИндивидуальныеГрафики.Месяц = Основной.ПериодДействия)
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|ИНДЕКСИРОВАТЬ ПО 
	|	НомерСтроки";
	
	ПочтовыйСборТекст = 
	"ВЫБРАТЬ
	|	Основная.ФизЛицо КАК ФизЛицо,
	|	Основная.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Дополнительная.Получатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДополнительнаяСт.ДокументОснование
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ИсполнительныйЛист.ПустаяСсылка)
	|	КОНЕЦ КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА Основная.ПорядокИсчисленияИздержек ССЫЛКА Справочник.ТарифыПочтовогоСбора
	|				И Основная.ПорядокИсчисленияИздержек <> ЗНАЧЕНИЕ(Справочник.ТарифыПочтовогоСбора.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПоТарифу,
	|	ВЫБОР
	|		КОГДА Дополнительная.Получатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ДополнительнаяСт.Результат, 0)
	|		ИНАЧЕ ЕСТЬNULL(Дополнительная.Результат, 0)
	|	КОНЕЦ КАК СуммаАлиментов,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА Дополнительная.Получатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|						КОГДА Основная.ПорядокИсчисленияИздержек В (ЗНАЧЕНИЕ(Справочник.ТарифыПочтовогоСбора.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|							ТОГДА ДополнительнаяСт.Результат
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ДополнительнаяСт.Результат = 0
	|									ТОГДА 0
	|								ИНАЧЕ (ДополнительнаяСт.Результат - ЕСТЬNULL(ДополнительнаяСт.ЗначениеС, 0)) * ЕСТЬNULL(ДополнительнаяСт.Процент, 0) / 100 + ЕСТЬNULL(ДополнительнаяСт.Сумма, 0)
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОГДА ТИПЗНАЧЕНИЯ(Основная.ПорядокИсчисленияИздержек) = ТИП(ЧИСЛО)
	|				ТОГДА Дополнительная.Результат
	|			КОГДА Основная.ПорядокИсчисленияИздержек ССЫЛКА Справочник.ТарифыПочтовогоСбора
	|				ТОГДА ВЫБОР
	|						КОГДА Дополнительная.Результат = 0
	|							ТОГДА 0
	|						ИНАЧЕ (Дополнительная.Результат - Дополнительная.ЗначениеС) * Дополнительная.Процент / 100 + Дополнительная.Сумма
	|					КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК РазмерПочтовогоПеревода,
	|	Дополнительная.Процент КАК Процент,
	|	ЕСТЬNULL(Основная.ПорядокИсчисленияИздержек, 0) КАК ПорядокИсчисленияИздержек,
	|	ЕСТЬNULL(Основная.Получатель, ЗНАЧЕНИЕ(Справочник.КОнтрагенты.ПустаяСсылка)) КАК Получатель
	|ПОМЕСТИТЬ ВТПочтовыеПереводыТекст
	|ИЗ
	|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основная
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Дополнительная.ПериодРегистрации КАК ПериодРегистрации,
	|			Дополнительная.ФизЛицо КАК ФизЛицо,
	|			Дополнительная.Организация КАК Организация,
	|			Дополнительная.ПорядокИсчисленияИздержек КАК ПорядокИсчисленияИздержек,
	|			Дополнительная.Получатель КАК Получатель,
	|			Дополнительная.ВидРасчета КАК ВидРасчета,
	|			РасчетБазыДляТарифа.БазаДляТарифа КАК Результат,
	|			ЕСТЬNULL(ВЫБОР
	|					КОГДА РазмерыТарифовПочтовогоСбора.Тариф.РасчетПоШкалеСПолнойСуммы
	|						ТОГДА 0
	|					ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеС
	|				КОНЕЦ, 0) КАК ЗначениеС,
	|			ВЫБОР
	|				КОГДА НЕ РазмерыТарифовПочтовогоСбора.Процент ЕСТЬ NULL 
	|					ТОГДА РазмерыТарифовПочтовогоСбора.Процент
	|				ИНАЧЕ Дополнительная.Показатель1
	|			КОНЕЦ КАК Процент,
	|			ЕСТЬNULL(РазмерыТарифовПочтовогоСбора.Сумма, 0) КАК Сумма
	|		ИЗ
	|			РегистрРасчета.УдержанияРаботниковОрганизаций КАК Дополнительная
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					Дополнительная.ПериодРегистрации КАК ПериодРегистрации,
	|					Дополнительная.ФизЛицо КАК ФизЛицо,
	|					Дополнительная.Организация КАК Организация,
	|					СУММА(Дополнительная.Результат) КАК БазаДляТарифа,
	|					Дополнительная.ПорядокИсчисленияИздержек КАК ПорядокИсчисленияИздержек,
	|					Дополнительная.Получатель КАК Получатель
	|				ИЗ
	|					РегистрРасчета.УдержанияРаботниковОрганизаций КАК Дополнительная
	|				ГДЕ
	|					Дополнительная.Регистратор = &парамРегистратор
	|					И НЕ Дополнительная.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор))
	|				
	|				СГРУППИРОВАТЬ ПО
	|					Дополнительная.ПериодРегистрации,
	|					Дополнительная.ФизЛицо,
	|					Дополнительная.Организация,
	|					Дополнительная.ПорядокИсчисленияИздержек,
	|					Дополнительная.Получатель) КАК РасчетБазыДляТарифа
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыТарифовПочтовогоСбора КАК РазмерыТарифовПочтовогоСбора
	|					ПО РасчетБазыДляТарифа.БазаДляТарифа >= РазмерыТарифовПочтовогоСбора.ЗначениеС
	|						И (РасчетБазыДляТарифа.БазаДляТарифа < ВЫБОР
	|							КОГДА РазмерыТарифовПочтовогоСбора.ЗначениеПо = 0
	|								ТОГДА 99999999
	|							ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеПо
	|						КОНЕЦ)
	|						И РасчетБазыДляТарифа.ПорядокИсчисленияИздержек = РазмерыТарифовПочтовогоСбора.Тариф
	|				ПО Дополнительная.ПериодРегистрации = РасчетБазыДляТарифа.ПериодРегистрации
	|					И Дополнительная.ФизЛицо = РасчетБазыДляТарифа.ФизЛицо
	|					И Дополнительная.ПорядокИсчисленияИздержек = РасчетБазыДляТарифа.ПорядокИсчисленияИздержек
	|					И Дополнительная.Получатель = РасчетБазыДляТарифа.Получатель
	|		ГДЕ
	|			Дополнительная.Регистратор = &парамРегистратор
	|			И Дополнительная.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Дополнительная.ПериодРегистрации,
	|			Дополнительная.ФизЛицо,
	|			Дополнительная.Организация,
	|			Дополнительная.ВидРасчета,
	|			Дополнительная.ПорядокИсчисленияИздержек,
	|			Дополнительная.Получатель,
	|			РасчетБазыДляТарифа.БазаДляТарифа,
	|			ВЫБОР
	|				КОГДА НЕ РазмерыТарифовПочтовогоСбора.Процент ЕСТЬ NULL 
	|					ТОГДА РазмерыТарифовПочтовогоСбора.Процент
	|				ИНАЧЕ Дополнительная.Показатель1
	|			КОНЕЦ,
	|			ЕСТЬNULL(РазмерыТарифовПочтовогоСбора.Сумма, 0),
	|			ЕСТЬNULL(ВЫБОР
	|					КОГДА РазмерыТарифовПочтовогоСбора.Тариф.РасчетПоШкалеСПолнойСуммы
	|						ТОГДА 0
	|					ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеС
	|				КОНЕЦ, 0)) КАК Дополнительная
	|		ПО Основная.ПериодРегистрации = Дополнительная.ПериодРегистрации
	|			И Основная.ФизЛицо = Дополнительная.ФизЛицо
	|			И Основная.Организация = Дополнительная.Организация
	|			И Основная.ВидРасчета = Дополнительная.ВидРасчета
	|			И Основная.Получатель = Дополнительная.Получатель
	|			И Основная.ПорядокИсчисленияИздержек = Дополнительная.ПорядокИсчисленияИздержек
	|			И (ВЫБОР
	|				КОГДА Основная.ПорядокИсчисленияИздержек В (ЗНАЧЕНИЕ(Справочник.ТарифыПочтовогоСбора.ПустаяСсылка))
	|					ТОГДА Основная.Показатель1 = Дополнительная.Процент
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Дополнительная.ПериодРегистрации КАК ПериодРегистрации,
	|			Дополнительная.ФизЛицо КАК ФизЛицо,
	|			Дополнительная.Организация КАК Организация,
	|			Дополнительная.ДокументОснование КАК ДокументОснование,
	|			Дополнительная.ВидРасчета КАК ВидРасчета,
	|			СУММА(Дополнительная.Результат) КАК Результат,
	|			ВЫБОР
	|				КОГДА РазмерыТарифовПочтовогоСбора.Тариф.РасчетПоШкалеСПолнойСуммы
	|					ТОГДА 0
	|				ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеС
	|			КОНЕЦ КАК ЗначениеС,
	|			РазмерыТарифовПочтовогоСбора.Процент КАК Процент,
	|			РазмерыТарифовПочтовогоСбора.Сумма КАК Сумма
	|		ИЗ
	|			РегистрРасчета.УдержанияРаботниковОрганизаций КАК Дополнительная
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыТарифовПочтовогоСбора КАК РазмерыТарифовПочтовогоСбора
	|				ПО Дополнительная.ПорядокИсчисленияИздержек = РазмерыТарифовПочтовогоСбора.Тариф
	|					И Дополнительная.Результат >= РазмерыТарифовПочтовогоСбора.ЗначениеС
	|					И (Дополнительная.Результат < ВЫБОР
	|						КОГДА РазмерыТарифовПочтовогоСбора.ЗначениеПо = 0
	|							ТОГДА 99999999
	|						ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеПо
	|					КОНЕЦ)
	|		ГДЕ
	|			Дополнительная.Регистратор = &парамРегистратор
	|			И НЕ Дополнительная.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Дополнительная.ПериодРегистрации,
	|			Дополнительная.ФизЛицо,
	|			Дополнительная.Организация,
	|			Дополнительная.ДокументОснование,
	|			Дополнительная.ВидРасчета,
	|			РазмерыТарифовПочтовогоСбора.Процент,
	|			РазмерыТарифовПочтовогоСбора.Сумма,
	|			ВЫБОР
	|				КОГДА РазмерыТарифовПочтовогоСбора.Тариф.РасчетПоШкалеСПолнойСуммы
	|					ТОГДА 0
	|				ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеС
	|			КОНЕЦ) КАК ДополнительнаяСт
	|		ПО Основная.ПериодРегистрации = ДополнительнаяСт.ПериодРегистрации
	|			И Основная.ФизЛицо = ДополнительнаяСт.ФизЛицо
	|			И Основная.Организация = ДополнительнаяСт.Организация
	|			И Основная.ДокументОснование = ДополнительнаяСт.ДокументОснование
	|			И Основная.ВидРасчета <> ДополнительнаяСт.ВидРасчета
	|ГДЕ
	|	Основная.Регистратор = &парамРегистратор
	|	И (ЕСТЬNULL(Дополнительная.Результат, 0) <> 0
	|				И Дополнительная.Получатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ Основная.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	ДокументОснование,
	|	Организация,
	|	Получатель";
	
	
	// Конец определения текстов вложенных запросов
	/////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос();
	НеобходимаБаза = НеобходимыеДанные.База;
	НеобходимГрафик = НеобходимыеДанные.НормаВремени ИЛИ НеобходимыеДанные.ОтработаноВремени ИЛИ НеобходимыеДанные.НормаВремениЗаМесяц;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	// параметры запросов
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	//vvv
	Запрос.УстановитьПараметр("ДатаДеноминации", ОбщегоНазначения.ПолучитьДатуДеноминации());
	//
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамПриход", ВидДвиженияНакопления.Приход);
	// категория начисления (удержания)
	Запрос.УстановитьПараметр("парамКатегорияНачисления", КатегорияНачисления);
	
	Если ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" ИЛИ 
			ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" или 
			ИмяРегистра = "УправленческиеНачисления" или 
			ИмяРегистра = "УдержанияРаботниковОрганизаций" Тогда
		Условие = "ВидРасчета.КатегорияНачисления = &парамКатегорияНачисления И Регистратор = &парамРегистратор И Авторасчет";
		ВнешнееУсловие = "Основной.ВидРасчета.КатегорияНачисления = &парамКатегорияНачисления И Основной.Регистратор = &парамРегистратор";
	Иначе
		Условие = "Регистратор = &парамРегистратор И Авторасчет";
		ВнешнееУсловие = "Основной.Регистратор = &парамРегистратор";
	КонецЕсли;
	
	Если Перерасчет тогда
		Если Физлица = Неопределено Тогда
			Запрос.Текст = ФизлицаДляПерерасчетаТекст;
			Запрос.Выполнить();
			ФизлицаДляПерерасчетаТекст = "ВТФизлицаДляПерерасчета";
			
			УсловиеНаФизлицоТекст = "Физлицо В (ВЫБРАТЬ Физлицо ИЗ ВТФизлицаДляПерерасчета)";
			Условие = Условие + " И " + УсловиеНаФизлицоТекст + " И Авторасчет";
			// в данном случае внешнее условие не дополняется - выполняется внутреннее 
			// соединение с таблицей СотрудникиДляПерерасчета
		Иначе
			УсловиеНаФизлицоТекст = "Физлицо В (&ФизлицаПерерасчета)";
			Условие = Условие + " И " + УсловиеНаФизлицоТекст + " И Авторасчет";
			ВнешнееУсловие = ВнешнееУсловие + " И Основной.Физлицо В (&ФизлицаПерерасчета)";
			Запрос.УстановитьПараметр("ФизлицаПерерасчета", Физлица);
		КонецЕсли;
	Иначе
		УсловиеНаФизлицоТекст = 
		"Физлицо В (ВЫБРАТЬ Физлицо ИЗ ВТФизлицаДляПроверки)";
		// поместим в запрос временную таблицу для проверки условия на физлиц
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо
		|ПОМЕСТИТЬ ВТФизлицаДляПроверки
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Организация = &парамОрганизация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо";
		Запрос.Выполнить();
		
	КонецЕсли;
	
	// для формирования ИТОГИ при комментировании расчета
	ПоляЗапроса = Новый Массив;
	
	ПроцентныеПоказатели = Новый Массив;
	ПроцентныеПоказатели.Добавить(Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная);
	ПроцентныеПоказатели.Добавить(Перечисления.ТипыПоказателейСхемМотивации.Процентный);
	Запрос.УстановитьПараметр("ПроцентныеПоказатели", ПроцентныеПоказатели);
	
	ШкальныеПоказатели = Новый Массив;
	ШкальныеПоказатели.Добавить(Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная);
	ШкальныеПоказатели.Добавить(Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая);
	Запрос.УстановитьПараметр("ШкальныеПоказатели", ШкальныеПоказатели);				
	
	Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
		
		Если ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
        	ИмяПВР = "ОсновныеНачисленияОрганизаций";
		ИначеЕсли ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" Тогда
			ИмяПВР = "ДополнительныеНачисленияОрганизаций";						
		ИначеЕсли ИмяРегистра = "УправленческиеНачисления" Или ИмяРегистра = "УправленческиеУдержания" Тогда 			
			ИмяПВР = ИмяРегистра;			
		ИначеЕсли ИмяРегистра = "УдержанияРаботниковОрганизаций" Тогда
			ИмяПВР = "УдержанияОрганизаций";
		КонецЕсли;
		
		// Получим максимальное число показателей			
		КоличествоПоказателей = ПроведениеРасчетов.ПолучитьДанныеОПроизвольныхФормулахВЗапросе(Запрос,ИмяРегистра,ВнешнееУсловие,ИмяПВР);
		
		Показатель1Текст = ПолучитьТекстПоказателя(НеобходимыеДанные,ИмяРегистра,,КомментироватьРасчет);
		Если КоличествоПоказателей > 6 Тогда
			// получим текст запроса для предопределенных показателей
			Показатель1ТекстПредопределенный = ПолучитьТекстПоказателя(НеобходимыеДанные,ИмяРегистра, Истина,КомментироватьРасчет);
		КонецЕсли;
		
    КонецЕсли;
	
	
    // установка параметров связанных с виртуальными таблицами регистов расчета
	Если ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" или
			ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
		// измерения сопоставления
		Измерения = Новый Массив(1);
		Измерения[0] = "Сотрудник";
		// для начислений сопоставляемые измерения основного и базового регистов совпадают
		Запрос.УстановитьПараметр("парамИзмеренияОсновного", Измерения);
		Запрос.УстановитьПараметр("парамИзмеренияБазового", Измерения);
		// список способов расчета, являющихся почасовыми отклонениями
		Запрос.УстановитьПараметр("парамСписокПочасовыхОтклонений", ПолучитьСписокНачисленийПочасовыхОтклонений());
		
	ИначеЕсли	ИмяРегистра = "УправленческиеНачисления" ИЛИ
				ИмяРегистра = "УправленческиеУдержания"
		Тогда
		// измерения сопоставления для управленческих регистров
		Измерения = Новый Массив(1);
		Измерения[0] = "Физлицо";
		// для начислений сопоставляемые измерения основного и базового регистов совпадают
		Запрос.УстановитьПараметр("парамИзмеренияОсновного", Измерения);
		Запрос.УстановитьПараметр("парамИзмеренияБазового", Измерения);
		
	Иначе
		// измерения сопоставления для удержаний
		Измерения = Новый Массив(2);
		Измерения[0] = "ФизЛицо";
		Измерения[1] = "Организация";
		// для удержаний сопоставляемые измерения основного и базового регистов разные
		Запрос.УстановитьПараметр("парамИзмеренияОсновного", Измерения);
		Запрос.УстановитьПараметр("парамИзмеренияБазового", Измерения);
		
	КонецЕсли;
	
	МассивСтажей = НеобходимыеДанные["ПроизвольныеСтажи"];
	
	
	Если ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ 
		|Основной.Регистратор Как Регистратор,
		|Основной.НомерСтроки Как НомерСтроки,
		|Основной.ВидРасчета Как ВидРасчета,
		|Основной.ВидРасчета.Наименование Как ВидРасчетаНаименование,
		|Основной.ВидРасчета.ПериодДействияБазовый Как ВидРасчетаПериодДействияБазовый,
		//vvv
		|Основной.ВидРасчета.НеУчитыватьНормуТекущегоМесяца Как НеУчитыватьНормуТекущегоМесяца,
		//
		|Основной.Сотрудник Как Сотрудник,
		|Основной.Сотрудник.Наименование Как СотрудникНаименование,
		|Основной.Сотрудник.Физлицо Как Физлицо,
		|Основной.ПериодДействияНачало Как ПериодДействияНачало,
		|Основной.ПериодДействияКонец Как ПериодДействияКонец,
		|Основной.ВидРасчета.ЗачетОтработанногоВремени Как ЗачетОтработанногоВремени,
		|Основной.ВидРасчета.ЗачетНормыВремени Как ЗачетНормыВремени,
		|Основной.ВидУчетаВремени Как ВидУчетаВремени,
		|Основной.ВидРасчета.СпособРасчета Как СпособРасчета, 
		|Основной.ВариантАлгоритмаРасчета Как ВариантАлгоритмаРасчета, 
		|ВЫБОР КОГДА Основной.ВидРасчета.ВидВремени В(&парамСписокПочасовыхОтклонений) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ВидРасчетаЯвляетсяПочасовымОтклонением,
		|Основной.ВидРасчета.КодДоходаНДФЛ Как КодДоходаНДФЛ";
		
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("Сотрудник");
			ПоляЗапроса.Добавить("СотрудникНаименование");
			ПоляЗапроса.Добавить("ПериодДействияНачало");
			ПоляЗапроса.Добавить("ПериодДействияКонец");
			ПоляЗапроса.Добавить("ЗачетОтработанногоВремени");
			ПоляЗапроса.Добавить("ЗачетНормыВремени");
			ПоляЗапроса.Добавить("ВидУчетаВремени");
			ПоляЗапроса.Добавить("СпособРасчета");
			ПоляЗапроса.Добавить("ВариантАлгоритмаРасчета");
			ПоляЗапроса.Добавить("ВидРасчетаЯвляетсяПочасовымОтклонением");
			ПоляЗапроса.Добавить("КодДоходаНДФЛ");
			ПоляЗапроса.Добавить("ВидРасчета");
			ПоляЗапроса.Добавить("ВидРасчетаНаименование");
			ПоляЗапроса.Добавить("ВидРасчетаПериодДействияБазовый");
		КонецЕсли;
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
			
			Если КоличествоПоказателей = 0 Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				| ВЫБОР
				|		КОГДА Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СевернаяНадбавка),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка))
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК РасчетИмеетБазовыеНачисления,
				| Ложь КАК РасчетИмеетОтработанноеВремя,
				| 0 КАК КоличествоПоказателей,";
			Иначе
				ТекстЗапроса = ТекстЗапроса + ",
				| ВЫБОР
				|		КОГДА Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СевернаяНадбавка),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка))
				|			ТОГДА ИСТИНА
				|		КОГДА Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула)
				|			ТОГДА Показатели.РасчетИмеетБазовыеНачисления
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК РасчетИмеетБазовыеНачисления,
				| Показатели.РасчетИмеетОтработанноеВремя КАК РасчетИмеетОтработанноеВремя,
				| Показатели.КоличествоПоказателей КАК КоличествоПоказателей,";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			| Основной.ВидРасчета.ФормулаРасчета КАК ФормулаРасчета";
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("КоличествоПоказателей");
				ПоляЗапроса.Добавить("РасчетИмеетБазовыеНачисления");
				ПоляЗапроса.Добавить("РасчетИмеетОтработанноеВремя");
				ПоляЗапроса.Добавить("ФормулаРасчета");
			КонецЕсли;
			
			Для СчПоказателей = 1 По КоличествоПоказателей Цикл
				Если СчПоказателей > 6 Тогда					
					ПоказательТекст = СтрЗаменить(Показатель1ТекстПредопределенный, "Показатель1", "Показатель"+СчПоказателей);
				ИначеЕсли СчПоказателей > 1 Тогда
					ПоказательТекст = СтрЗаменить(Показатель1Текст, "Показатель1", "Показатель"+СчПоказателей);
				Иначе
					ПоказательТекст = Показатель1Текст;
				КонецЕсли;					
				
				ТекстЗапроса = ТекстЗапроса + ", 
				|Показатели.Показатель" + СчПоказателей + "ЯвляетсяРасчетнойБазой Как Показатель" + СчПоказателей + "ЯвляетсяРасчетнойБазой,
				|Показатели.Показатель" + СчПоказателей+".Наименование Как Показатель" + СчПоказателей + "Наименование,
				|" + ПоказательТекст + " Как Показатель"+СчПоказателей;
				
				Если КомментироватьРасчет Тогда
					ПоляЗапроса.Добавить("Показатель" + СчПоказателей + "ЯвляетсяРасчетнойБазой");
					ПоляЗапроса.Добавить("Показатель" + СчПоказателей + "Наименование");
					ПоляЗапроса.Добавить("Показатель" + СчПоказателей);
				КонецЕсли;
			КонецЦикла;			
		
			
		КонецЕсли;
			
		Если НеобходимаБаза Тогда
			Если КомментироватьРасчет Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				|База.РезультатБаза Как РезультатБаза,
				//vvv
				|База.ОплаченоДнейЧасовБаза Как ОплаченоДнейЧасовБаза,
				//
				|База.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
				|База.ВидРасчетаРазрез.Наименование КАК ВидРасчетаРазрезНаименование";
				ПоляЗапроса.Добавить("РезультатБаза");
				ПоляЗапроса.Добавить("ВидРасчетаРазрез");
				ПоляЗапроса.Добавить("ВидРасчетаРазрезНаименование");
			Иначе 
				ТекстЗапроса = ТекстЗапроса + ",
				//vvv
				|База.ОплаченоДнейЧасовБаза Как ОплаченоДнейЧасовБаза,
				//
				|База.РезультатБаза КАК РезультатБаза";
			КонецЕсли;
		КонецЕсли;
		
		
		Если НеобходимГрафик Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ) КАК ОшибкаВводаИндивидуальногоГрафикаРаботы,
			|	ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ) КАК ОшибкаВводаОтработанногоВремени,
			|	ЕСТЬNULL(СоответствиеТабеляИНачислений.ПредупреждениеОНесоответствииТабеляИНачисления, ЛОЖЬ) КАК ПредупреждениеНесоответствияТабеляИНачисления,
			|	Основной.ГрафикРаботы.Наименование КАК ГрафикРаботыНаименование";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ГрафикРаботыНаименование");
				ПоляЗапроса.Добавить("ОшибкаВводаИндивидуальногоГрафикаРаботы");
				ПоляЗапроса.Добавить("ОшибкаВводаОтработанногоВремени");
				ПоляЗапроса.Добавить("ПредупреждениеНесоответствияТабеляИНачисления");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ОтработаноВермениВоВредных Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(ОтработанныеВоВредных.ОшибкаВводаОтработанныеВоВредных, ЛОЖЬ) КАК ОшибкаВводаОтработанныеВоВредных,
			|	ЕСТЬNULL(ОтработанныеВоВредных.ЧасовВоВредных, 0) КАК ЧасовВоВредных";
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ЧасовВоВредных");
				ПоляЗапроса.Добавить("ОшибкаВводаИндивидуальногоГрафикаРаботы");
			КонецЕсли;
		КонецЕсли;
		
		//vvv
		Если НеобходимыеДанные.ОтработаноВремениНаЛинии Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(ОтработаноНаЛинии.ОшибкаВводаОтработаноНаЛинии, ЛОЖЬ) КАК ОшибкаВводаОтработаноНаЛинии,
			|	ЕСТЬNULL(ОтработаноНаЛинии.ЧасоваяСтавка, 0) КАК ЧасоваяСтавка,
			|	ЕСТЬNULL(ОтработаноНаЛинии.ПроцентПремии, 0) КАК ПроцентПремии,
			|	ЕСТЬNULL(ОтработаноНаЛинии.ЧасовНаЛинии, 0) КАК ЧасовНаЛинии";
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ЧасовНаЛинии");
				ПоляЗапроса.Добавить("ОшибкаВводаОтработаноНаЛинии");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ОтработаноНаАвтомобиле Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(ОтработаноНаАвтомобиле.ОшибкаВводаОтработаноНаАвтомобиле, ЛОЖЬ) КАК ОшибкаВводаОтработаноНаАвтомобиле,			
			|	ЕСТЬNULL(ОтработаноНаАвтомобиле.ДнейНаАвтомобиле, 0) КАК ДнейНаАвтомобиле,
			|	ЕСТЬNULL(ОтработаноНаАвтомобиле.ЧасовНаАвтомобиле, 0) КАК ЧасовНаАвтомобиле";
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ЧасовНаАвтомобиле");
				ПоляЗапроса.Добавить("ДнейНаАвтомобиле");
				ПоляЗапроса.Добавить("ОшибкаВводаОтработаноНаАвтомобиле");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ОтработаноВремениБезВыезда Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(ОтработаноБезВыезда.ОшибкаВводаОтработаноБезВыезда, ЛОЖЬ) КАК ОшибкаВводаОтработаноБезВыезда,
			|	ЕСТЬNULL(ОтработаноБезВыезда.ЧасоваяСтавка, 0) КАК ЧасоваяСтавкаБезВыезда,
			|	ЕСТЬNULL(ОтработаноБезВыезда.ПроцентПремии, 0) КАК ПроцентПремииБезВыезда,
			|	ЕСТЬNULL(ОтработаноБезВыезда.ЧасовБезВыезда, 0) КАК ЧасовБезВыезда";
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ЧасовБезВыезда");
				ПоляЗапроса.Добавить("ОшибкаВводаОтработаноБезВыезда");
			КонецЕсли;
		КонецЕсли;

		
		Если НеобходимыеДанные.ОтработаноВремениНаСделке Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(ОтработаноНаСделке.ОшибкаВводаОтработаноНаЛинии, ЛОЖЬ) КАК ОшибкаВводаОтработаноНаСделке,
			|	ЕСТЬNULL(ОтработаноНаСделке.ЧасоваяСтавка, 0) КАК ЧасоваяСтавкаСделка,
			|	ЕСТЬNULL(ОтработаноНаСделке.ПроцентПремии, 0) КАК ПроцентПремииСделка,
			|	ЕСТЬNULL(ОтработаноНаСделке.ЧасовНаСделке, 0) КАК ЧасовНаСделке";
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ЧасовНаСделке");
				ПоляЗапроса.Добавить("ОшибкаВводаОтработаноНаСделке");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ОтработаноВремениРемонт Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(ОтработаноНаРемонте.ОшибкаВводаОтработаноНаРемонте, ЛОЖЬ) КАК ОшибкаВводаОтработаноНаРемонте,
			|	ЕСТЬNULL(ОтработаноНаРемонте.ЧасоваяСтавка, 0) КАК ЧасоваяСтавкаРемонт,
			|	ЕСТЬNULL(ОтработаноНаРемонте.ПроцентПремии, 0) КАК ПроцентПремииРемонт,
			|	ЕСТЬNULL(ОтработаноНаРемонте.ЧасовНаРемонте, 0) КАК ЧасовНаРемонте";
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ЧасовНаРемонте");
				ПоляЗапроса.Добавить("ОшибкаВводаОтработаноНаРемонте");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ОтработаноВремениРемонтПлановый Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(ОтработаноНаРемонтеПлановом.ОшибкаВводаОтработаноНаРемонте, ЛОЖЬ) КАК ОшибкаВводаОтработаноНаРемонтеПлановом,
			|	ЕСТЬNULL(ОтработаноНаРемонтеПлановом.ЧасоваяСтавка, 0) КАК ЧасоваяСтавкаРемонтПлановый,
			|	ЕСТЬNULL(ОтработаноНаРемонтеПлановом.ПроцентПремии, 0) КАК ПроцентПремииРемонтПлановый,
			|	ЕСТЬNULL(ОтработаноНаРемонтеПлановом.ЧасовНаРемонтеПлановом, 0) КАК ЧасовНаРемонтеПлановом";
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ЧасовНаРемонтеПлановом");
				ПоляЗапроса.Добавить("ОшибкаВводаОтработаноНаРемонтеПлановом");
			КонецЕсли;
		КонецЕсли;
		//

		
		Если НеобходимыеДанные.НормаВремениЗаМесяц Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ЕСТЬNULL(
			|		ВЫБОР
			//vvv для суммированного учета норму времени берем из пятидневки по календарю, чтобы считать переработку и недоработку ежемесячно (для оклада)
			|			КОГДА НормаВремениПоГрафикуСотрудника.СуммированныйУчетРабочегоВремени
			|				ТОГДА НормаВремениПоГрафикуСотрудника.НормаЧасов				
			//
			|			КОГДА НормаВремениПоОбщемуГрафику.ГрафикРаботы ЕСТЬ NULL
			|				ТОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаВремени,ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия)
			|			КОГДА Основной.ВидУчетаВремени = &ПоДням
			|				ТОГДА НормаВремениПоОбщемуГрафику.НормаДней
			|	    	ИНАЧЕ НормаВремениПоОбщемуГрафику.НормаЧасов
			|		КОНЕЦ, 0) КАК НормаВремениЗаМесяц";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("НормаВремениЗаМесяц");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.НормаВремени Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|			ТОГДА NULL
			|		ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику, ЕСТЬNULL(ВЫБОР
			|						КОГДА Основной.ВидУчетаВремени = &ПоДням
			|							ТОГДА ДанныеГрафика.ДополнительноеЗначениеНормаФактическийПериодДействия
			|						ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеНормаФактическийПериодДействия
			|					КОНЕЦ, 0))
			|	КОНЕЦ КАК НормаОплачиваемыхЧасов,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|			ТОГДА NULL
			|		ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаДнейПоГрафику, ЕСТЬNULL(ВЫБОР
			|						КОГДА Основной.ВидУчетаВремени = &ПоДням
			|							ТОГДА ДанныеГрафика.ОсновноеЗначениеНормаФактическийПериодДействия
			|						ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеНормаФактическийПериодДействия
			|					КОНЕЦ, 0))
			|	КОНЕЦ КАК НормаОплачиваемыхДней,
			|	ЕСТЬNULL(ДанныеГрафика.ПроизводственныйКалендарьПятидневкаЧасыФактическийПериодДействия,0) КАК ПроизводственныйКалендарьПятидневкаЧасыФактическийПериодДействия,
			|	ЕСТЬNULL(ДанныеГрафика.ПроизводственныйКалендарьПятидневкаФактическийПериодДействия,0) КАК ПроизводственныйКалендарьПятидневкаФактическийПериодДействия";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("НормаОплачиваемыхЧасов");
				ПоляЗапроса.Добавить("НормаОплачиваемыхДней");
				ПоляЗапроса.Добавить("ПроизводственныйКалендарьПятидневкаЧасыФактическийПериодДействия");
				ПоляЗапроса.Добавить("ПроизводственныйКалендарьПятидневкаФактическийПериодДействия");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ОтработаноВремени Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
			|			ТОГДА NULL
			|		КОГДА ВремяВведенноеВЦеломЗаПериод.ОсновноеЗначениеПоТабелю ЕСТЬ НЕ NULL 
			|			ТОГДА 1 
			|		КОГДА НЕ (Основной.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы)
			|			ТОГДА 4 
			|		КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|			ТОГДА NULL
			|		КОГДА СводныеИндивидуальныеГрафики.ОсновноеЗначение ЕСТЬ НЕ NULL 
			|			ТОГДА 2 
			|		ИНАЧЕ 3 
			|	КОНЕЦ КАК СпособВводаВремени,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
			|			ТОГДА NULL
			//vvv
			|		КОГДА Основной.ВидРасчета.СпособРасчета=ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуИзФМП) И ЕСТЬNULL(ВремяПоТабелю.ВнутрисменныеЧасыОтклонение, 0)>0
			|			ТОГДА ЕСТЬNULL(ВремяПоТабелю.ВнутрисменныеЧасыОтклонение, 0)
			//|		КОГДА Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени НЕ В
			//|			(ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка),
			//|			 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные),
			//|			 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы),
			//|			 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы),
			//|			 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа))
			//|			 И НЕ ОтработаноПоВидуВремениНачисления.Дней ЕСТЬ NULL
			// добавим возможность использовать ночные часы для других способов расчета
			|		КОГДА (Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени НЕ В
			|			(ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка),
			|			 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные),
			|			 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы),
			|			 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы),
			|			 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)) ИЛИ (Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы) и Основной.ВидРасчета.СпособРасчета<>ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы)))
			|			 И (НЕ ОтработаноПоВидуВремениНачисления.Дней ЕСТЬ NULL)
			//
			|			ТОГДА
			|				ВЫБОР 
			|					КОГДА Основной.ВидУчетаВремени = &ПоДням
			|						ТОГДА ЕСТЬNULL(ОтработаноПоВидуВремениНачисления.Дней, 0)
			|					ИНАЧЕ ЕСТЬNULL(ОтработаноПоВидуВремениНачисления.Часов, 0)
			|			    КОНЕЦ
			|			ИНАЧЕ ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОсновноеЗначениеПоТабелю, ВЫБОР
			//vvv
			|								КОГДА Основной.ВидРасчета.НеУчитыватьФактическийПериодДляОтработанногоВремени ТОГДА 0
			|								КОГДА Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В
			|									(ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Ремонт),
			|									 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Линия),
			|									 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.БезВыезда),
			|									 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РемонтПлановый))				
			|									ИЛИ (Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы) и Основной.ВидРасчета.СпособРасчета<>ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы))
			|									ТОГДА 0
			//
			|								КОГДА НЕ (Основной.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы)
			|									ТОГДА ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия, 0)
			|								КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|									ТОГДА NULL
			|								ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОсновноеЗначение, ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия, 0))
			|							КОНЕЦ)
			|			КОНЕЦ КАК ОтработаноВремени,
			|	ВЫБОР
			|		КОГДА Основной.ВидРасчета.ВидВремени В (Значение(Перечисление.ВидыВремени.ЧасовоеНеотработанное), Значение(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы))
			|			ТОГДА 0
			|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
			|			ТОГДА 0
			|		КОГДА Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.РабочееВремя
			|			 И НЕ ОтработаноПоВидуВремениНачисления.Дней ЕСТЬ NULL
			//vvv			
			//|			ТОГДА ЕСТЬNULL(ОтработаноПоВидуВремениНачисления.Дней, 0)
			|			ТОГДА
			|				ВЫБОР 
			|					КОГДА  Основной.ВидРасчета.УчитыватьАвтомобиль И Основной.Автомобиль<>ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка) 
			|						ТОГДА ЕСТЬNULL(ОтработаноНаАвтомобиле.ДнейНаАвтомобиле, 0)
			|					ИНАЧЕ ЕСТЬNULL(ОтработаноПоВидуВремениНачисления.Дней, 0)
			|               КОНЕЦ
			//
			|		ИНАЧЕ ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ДнейПоТабелю, ВЫБОР
			//vvv
			|								КОГДА Основной.ВидРасчета.НеУчитыватьФактическийПериодДляОтработанногоВремени ТОГДА 0
			|								КОГДА Основной.ВидРасчета.УчитыватьАвтомобиль И Основной.Автомобиль<>ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)
			|									ТОГДА ЕСТЬNULL(ОтработаноНаАвтомобиле.ДнейНаАвтомобиле, 0)
			//
			|								КОГДА НЕ (Основной.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы)
			|									ТОГДА ЕСТЬNULL(ВЫБОР
			|												КОГДА Основной.ВидУчетаВремени = &ПоДням
			|													ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|												ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|											КОНЕЦ, 0)
			|								КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|									ТОГДА 0
			|								ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.ДнейПоГрафику, ЕСТЬNULL(ВЫБОР
			|												КОГДА Основной.ВидУчетаВремени = &ПоДням
			|													ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|												ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|											КОНЕЦ, 0))
			|							КОНЕЦ)
			|	КОНЕЦ КАК ОтработаноДней,
			|	ВЫБОР
			|		КОГДА Основной.ВидРасчета.ВидВремени В (Значение(Перечисление.ВидыВремени.ЧасовоеНеотработанное), Значение(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы))
			|			ТОГДА ЕСТЬNULL(ВремяПоТабелю.ВнутрисменныеЧасыОтклонение, 0)
			//vvv
			|		КОГДА Основной.ВидРасчета.СпособРасчета=ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуИзФМП) И ЕСТЬNULL(ВремяПоТабелю.ВнутрисменныеЧасыОтклонение, 0)>0
			|			ТОГДА ЕСТЬNULL(ВремяПоТабелю.ВнутрисменныеЧасыОтклонение, 0)
			//
			|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
			|			ТОГДА 0
			|		КОГДА Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.РабочееВремя
			|			 И ОтработаноПоВидуВремениНачисления.Часов ЕСТЬ НЕ NULL
			//vvv
			//|			ТОГДА ОтработаноПоВидуВремениНачисления.Часов			
			|			ТОГДА
			|				ВЫБОР 
			|					КОГДА  Основной.ВидРасчета.УчитыватьАвтомобиль И Основной.Автомобиль<>ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка) 
			|						ТОГДА ЕСТЬNULL(ОтработаноНаАвтомобиле.ЧасовНаАвтомобиле, 0)
			|					ИНАЧЕ ЕСТЬNULL(ОтработаноПоВидуВремениНачисления.Часов,0)
			|               КОНЕЦ
			//
			|		ИНАЧЕ ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ЧасовПоТабелю, ВЫБОР
			//vvv
			|								КОГДА Основной.ВидРасчета.НеУчитыватьФактическийПериодДляОтработанногоВремени ТОГДА 0
			|								КОГДА Основной.ВидРасчета.УчитыватьАвтомобиль И Основной.Автомобиль<>ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)
			|									ТОГДА ЕСТЬNULL(ОтработаноНаАвтомобиле.ЧасовНаАвтомобиле, 0)
			//
			|								КОГДА НЕ (Основной.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы)
			|									ТОГДА ЕСТЬNULL(ВЫБОР
			|												КОГДА Основной.ВидУчетаВремени = &ПоДням
			|													ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|												ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|											КОНЕЦ, 0) - ЕСТЬNULL(ВремяПоТабелю.ОтработаноЧасовПоТабелюОтклонение, 0)
			|								КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|									ТОГДА 0
			|								ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.ЧасовПоГрафику, ЕСТЬNULL(ВЫБОР
			|												КОГДА Основной.ВидУчетаВремени = &ПоДням
			|													ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|												ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|											КОНЕЦ, 0)) - ЕСТЬNULL(ВремяПоТабелю.ОтработаноЧасовПоТабелюОтклонение, 0)
			|							КОНЕЦ)
			|	КОНЕЦ КАК ОтработаноЧасов,
			|	ЕСТЬNULL(ДанныеГрафика.ПроизводственныйКалендарьПятидневкаЧасыФактическийПериодДействия,0) КАК ОтработаноЧасовПроизводственныйГрафик,
			|	ЕСТЬNULL(ДанныеГрафика.ПроизводственныйКалендарьПятидневкаФактическийПериодДействия, 0) КАК ОтработаноВремениПроизводственныйГрафик,
			|	ЕСТЬNULL(ВремяПоТабелю.ОтработаноЧасовПоТабелюОтклонение,0) КАК ОтработаноЧасовПоТабелюОтклонение";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ОтработаноВремени");
				ПоляЗапроса.Добавить("ОтработаноДней");
				ПоляЗапроса.Добавить("ОтработаноЧасов");
				ПоляЗапроса.Добавить("ОтработаноВремениПроизводственныйГрафик");
				ПоляЗапроса.Добавить("ОтработаноЧасовПроизводственныйГрафик");
				ПоляЗапроса.Добавить("ОтработаноЧасовПоТабелюОтклонение");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.СреднийЗаработок Тогда
			
			ТекстЗапроса = ТекстЗапроса + ",
			|Основной.РучнойРасчетСреднегоЗаработка Как РучнойРасчетСреднегоЗаработка, 
			|Основной.РазмерСреднегоЗаработка Как РазмерСреднегоЗаработка, 
			|ДанныеДляРасчетаСреднего.ОтработаноДней Как ОтработаноДнейСтар, 
			|ДанныеДляРасчетаСреднего.ОтработаноЧасов Как ОтработаноЧасовСтар, 
			|ДанныеДляРасчетаСреднего.ЧислоМесяцев Как ЧислоМесяцев, 
			|ЕСТЬNULL(ДанныеДляРасчетаСреднего.ОтработаноДней,0) Как ОтработаноДнейПоСреднему, 
			|ЕСТЬNULL(ДанныеДляРасчетаСреднего.ОтработаноЧасов,0) Как ОтработаноЧасовПоСреднему, 
			|ДанныеДляРасчетаСреднего.СреднийЗаработок Как СреднийЗаработок,
			//vvv
			|ДанныеДляРасчетаСреднего.СуммаГодовойПремии Как СуммаГодовойПремии,
			|ДанныеДляРасчетаСреднего.СуммаГодовойПремии Как СуммаГодовойПремииБезИндексации,
			|ЕСТЬNULL(ДанныеДляРасчетаСреднего.НормаЧасов,0) Как НормаЧасовПоСреднему, 
			//
			|ДанныеДляРасчетаСреднего.СреднийЗаработокБезИндексации Как СреднийЗаработокБезИндексации";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ОтработаноДнейПоСреднему");
				ПоляЗапроса.Добавить("ОтработаноЧасовПоСреднему");
				ПоляЗапроса.Добавить("СреднийЗаработок");
				ПоляЗапроса.Добавить("РазмерСреднегоЗаработка");
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимыеДанные.СреднийЗаработокПособий Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			//|ДанныеДляРасчетаСреднего.ОтработаноДней Как ОтработаноДнейСтар, 
			//|ДанныеДляРасчетаСреднего.ОтработаноЧасов Как ОтработаноЧасовСтар, 
			//|ДанныеДляРасчетаСреднего.ЧислоМесяцев Как ЧислоМесяцев, 
			|ЕСТЬNULL(ДанныеДляРасчетаСреднего.ОтработаноДней,0) Как ОтработаноДнейПособий, 
			|ЕСТЬNULL(ДанныеДляРасчетаСреднего.КалендарныеДни,0) КАК  КалендарныеДни,
			|ДанныеДляРасчетаСреднего.СреднийЗаработок Как СреднийЗаработокПособий,
			|ДанныеДляРасчетаСреднего.СреднийЗаработокБезИндексации КАК СреднийЗаработокПособийБезИндексации";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ОтработаноДнейПособий");
				ПоляЗапроса.Добавить("СреднийЗаработокПособий");
				ПоляЗапроса.Добавить("СреднийЗаработокПособийБезИндексации");
			КонецЕсли;
		КонецЕсли;
			
		Если НеобходимыеДанные.СреднийЗаработокОтпуска Тогда
			// выбираем число дней по шестидневке или календарных рабочих дней 
			// из производственного календаря и ЧислоДнейВНеделе
			ТекстЗапроса = ТекстЗапроса + ", 
			//|ДанныеДляРасчетаСреднего.ОтработаноДней Как ОтработаноДней, 
			//|ДанныеДляРасчетаСреднего.ОтработаноЧасов Как ОтработаноЧасов, 
			//|ДанныеДляРасчетаСреднего.СреднийЗаработок Как СреднийЗаработок,
			//|ДанныеДляРасчетаСреднего.ЧислоМесяцев Как ЧислоМесяцев, 
			|ВЫБОР КОГДА Основной.ВариантАлгоритмаРасчета = ЗНАЧЕНИЕ(Перечисление.ВариантыАлгоритмовРасчета.ОтпускСОплатойПраздничныхДней) ТОГДА РАЗНОСТЬДАТ(Основной.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(Основной.ПериодДействияКонец, СЕКУНДА, 1), ДЕНЬ) КОГДА Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке) ТОГДА ДанныеГрафика.ПроизводственныйКалендарьШестидневкаФактическийПериодДействия ИНАЧЕ ДанныеГрафика.ПроизводственныйКалендарьКалендарныеДниФактическийПериодДействия КОНЕЦ КАК ОплачиваемыеДниОтпуска,
			|ВЫБОР КОГДА Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке) ТОГДА 6 ИНАЧЕ 7 КОНЕЦ КАК ЧислоДнейВНеделе,
			|Основной.ГрафикРаботы.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели";
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ОплачиваемыеДниОтпуска");
				ПоляЗапроса.Добавить("ЧислоДнейВНеделе");
				ПоляЗапроса.Добавить("ДлительностьРабочейНедели");
			КонецЕсли;
			
		КонецЕсли;
			
		Если НеобходимыеДанные.КалендарныеДниПособия Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|КалендарныеДниПособия.ОплачиватьДнейПособия КАК ОплачиватьДнейПособия";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ОплачиватьДнейПособия");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерЧасоваяМинимальнаяЗарплата Тогда 
			ТекстЗапроса = ТекстЗапроса + ", 
			|ЕСТЬNULL(ДанныеОРазмереЧасоваяМинимальнаяЗарплата.Размер,0) КАК РазмерЧасоваяМинимальнаяЗарплата";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерЧасоваяМинимальнаяЗарплата");
			КонецЕсли;
		КонецЕсли;
		
		//vvv
		Если НеобходимыеДанные.СреднемесячнаяНормаЧасов Тогда 
			ТекстЗапроса = ТекстЗапроса + ", 
			|ЕСТЬNULL(ДанныеОСреднемесячнойНормеЧасов.Размер,0) КАК СреднемесячнаяНормаЧасов";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("СреднемесячнаяНормаЧасов");
			КонецЕсли;
		КонецЕсли;
		//
		
		Если НеобходимыеДанные.РазмерМесячнаяМинимальнаяЗарплата Тогда 
			ТекстЗапроса = ТекстЗапроса + ", 
			|ЕСТЬNULL(ДанныеОРазмереМесячнаяМинимальнаяЗарплата.Размер,0) КАК РазмерМесячнаяМинимальнаяЗарплата";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерМесячнаяМинимальнаяЗарплата");
			КонецЕсли;
		КонецЕсли;

		Если НеобходимыеДанные.БПМ Тогда 
			ТекстЗапроса = ТекстЗапроса + ", 
			|ЕСТЬNULL(ДанныеОРазмереБПМ.Размер,0) КАК РазмерБПМ";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерБПМ");
			КонецЕсли;
		КонецЕсли;
		
		
		Если НеобходимыеДанные.МесячнаяТарифнаяСтавка Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|ЕСТЬNULL(МесячныеТарифныеСтавки.Ставка,0) КАК Ставка,
			|ЕСТЬNULL(МесячныеТарифныеСтавки.ТарифнаяСтавка,0) КАК ТарифнаяСтавка";
 			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("Ставка");
				ПоляЗапроса.Добавить("ТарифнаяСтавка");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.МесячнаяТарифнаяСтавкаНаДатуСобытия Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|ЕСТЬNULL(МесячныеТарифныеСтавки.Ставка,0) КАК Ставка,
			|ЕСТЬNULL(МесячныеТарифныеСтавки.ТарифнаяСтавка,0) КАК ТарифнаяСтавка";
 			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("Ставка");
				ПоляЗапроса.Добавить("ТарифнаяСтавкаНаДатуСобытия");
			КонецЕсли;
		КонецЕсли;
		
		
		
		Если НеобходимыеДанные.СтавкаПервогоРазрядаСотрудника Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|ЕСТЬNULL(СтавкиПервогоРазрядаСотрудника.РазмерСтавкиПервогоРазряда,0) КАК РазмерСтавкиПервогоРазрядаСотрудника,
			|СтавкиПервогоРазрядаСотрудника.ТарифнаяСтавка КАК ВидСтавкиПервогоРазрядаСотрудника,
			|ЕСТЬNULL(РазмерСтавкаСотрудникаНаДатуСобытия.РазмерСтавкиПервогоРазряда,0) КАК РазмерСтавкиПервогоРазрядаСотрудникаНаДатуСобытия,
			|РазмерСтавкаСотрудникаНаДатуСобытия.ТарифнаяСтавка КАК ВидСтавкиПервогоРазрядаСотрудникаНаДатуСобытия";
 			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерСтавкиПервогоРазрядаСотрудника");
				ПоляЗапроса.Добавить("ВидСтавкиПервогоРазрядаСотрудника");
			КонецЕсли;
		КонецЕсли;

		
		
		Если НеобходимыеДанные.СтавкаПервогоРазряда Тогда
		
			ТекстЗапроса = ТекстЗапроса + ", 
			|СтавкиПервогоРазряда.РазмерСтавкиПервогоРазряда КАК РазмерСтавкиПервогоРазряда,
			|СтавкиПервогоРазряда.ТарифнаяСтавка КАК ВидСтавкиПервогоРазряда";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерСтавкиПервогоРазряда");
				ПоляЗапроса.Добавить("ВидСтавкиПервогоРазряда");
			КонецЕсли;
		КонецЕсли;

				
		Если НеобходимыеДанные.РазмерПособияНаРебенкаДо3Лет Тогда
			// выбираем размер пособия на ребенка до 3 лет
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособияНаРебенкаДо3Лет.РазмерПособия КАК РазмерПособияНаРебенкаДо3Лет";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПособияНаРебенкаДо3Лет");
			КонецЕсли;
		КонецЕсли;
		
         Если НеобходимыеДанные.РазмерПособияНаРебенкаДо3Лет50ПроцентовБПМ Тогда  
			// выбираем размер пособия на ребенка до 3 лет
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособияНаРебенкаДо3Лет50ПроцентовБПМ.РазмерПособия КАК РазмерПособияНаРебенкаДо3Лет50ПроцентовБПМ";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПособияНаРебенкаДо3Лет50ПроцентовБПМ");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ Тогда  
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ.РазмерПособия КАК РазмерПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ");
			КонецЕсли;
		КонецЕсли;
		
         Если НеобходимыеДанные.РазмерПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ Тогда  
			// выбираем размер пособия на ребенка до 3 лет
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ.РазмерПособия КАК РазмерПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособияНаРебенкаДо3ЛетНаВторого Тогда
			
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособияНаРебенкаДо3ЛетНаВторого.РазмерПособия КАК РазмерПособияНаРебенкаДо3ЛетНаВторого";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПособияНаРебенкаДо3ЛетНаВторого");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособияНаРебенкаДо3ЛетНаРебенкаИнвалида Тогда
			
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособияНаРебенкаДо3ЛетНаРебенкаИнвалида.РазмерПособия КАК РазмерПособияНаРебенкаДо3ЛетНаРебенкаИнвалида";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПособияНаРебенкаДо3ЛетНаРебенкаИнвалида");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособияНаРебенкаСтарше3ЛетНаРебенкаИнвалида Тогда
			
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособияНаРебенкаСтарше3ЛетНаРебенкаИнвалида.РазмерПособия КАК РазмерПособияНаРебенкаСтарше3ЛетНаРебенкаИнвалида";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПособияНаРебенкаСтарше3ЛетНаРебенкаИнвалида");
			КонецЕсли;
		КонецЕсли;
				
		
		Если НеобходимыеДанные.РазмерПособияМатериОдиночкеДо1_5Лет Тогда
			// выбираем размер пособия на ребенка до 1.5 лет матери-одиночке
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособияМатериОдиночкеДо1_5Лет.РазмерПособия КАК РазмерПособияМатериОдиночкеДо1_5Лет";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПособияМатериОдиночкеДо1_5Лет");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособияМатериОдиночкеДо3Лет Тогда
			// выбираем размер пособия на ребенка до 3 лет матери-одиночке
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособияМатериОдиночкеДо3Лет.РазмерПособия КАК РазмерПособияМатериОдиночкеДо3Лет";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПособияМатериОдиночкеДо3Лет");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособияНаРебенкаСНадбавкой40До3Лет Тогда
			// выбираем размер пособия на ребенка до 3 лет с надбавкой 40%
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособияНаРебенкаСНадбавкой40До3Лет.РазмерПособия КАК РазмерПособияНаРебенкаСНадбавкой40До3Лет";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПособияНаРебенкаСНадбавкой40До3Лет");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособияНеРаботающейМатериДо3Лет Тогда
			// выбираем размер пособия на ребенка до 3 лет не работающей матери
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособияНеРаботающейМатериДо3Лет.РазмерПособия КАК РазмерПособияНеРаботающейМатериДо3Лет";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПособияНеРаботающейМатериДо3Лет");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособияНеРабМатериОдиночкеДо3Лет Тогда
			// выбираем размер пособия на ребенка до 3 лет не работающей матери-одиночке
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособияНеРабМатериОдиночкеДо3Лет.РазмерПособия КАК РазмерПособияНеРабМатериОдиночкеДо3Лет";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПособияНеРабМатериОдиночкеДо3Лет");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособияНеРабМатериОдиночкеДо1_5Лет Тогда
			// выбираем размер пособия на ребенка до 1_5 лет не работающей матери-одиночке
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособияНеРабМатериОдиночкеДо1_5Лет.РазмерПособия КАК РазмерПособияНеРабМатериОдиночкеДо1_5Лет";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПособияНеРабМатериОдиночкеДо1_5Лет");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособияНеРабМатериНадб40До3Лет Тогда
			// выбираем размер пособия на ребенка до 3 лет не работающей матери с надьавкой 40%
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособияНеРабМатериНадб40До3Лет.РазмерПособия КАК РазмерПособияНеРабМатериНадб40До3Лет";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПособияНеРабМатериНадб40До3Лет");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособияНаРебенкаСтарше3Лет Тогда
			// выбираем размер пособия на ребенка старше 3 лет
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособияНаРебенкаСтарше3Лет.РазмерПособия КАК РазмерПособияНаРебенкаСтарше3Лет";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПособияНаРебенкаСтарше3Лет");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособияНаРебенкаДо18ЛетНадб40 Тогда
			// выбираем размер пособия на ребенка старше 3 лет с надбавкой 40%
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособияНаРебенкаДо18ЛетНадб40.РазмерПособия КАК РазмерПособияНаРебенкаДо18ЛетНадб40";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПособияНаРебенкаДо18ЛетНадб40");
			КонецЕсли;			
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособияНаРебенкаИнвалида Тогда
			// выбираем размер пособия по уходу за ребенком-инвалидом до 18 лет
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособияНаРебенкаИнвалида.РазмерПособия КАК РазмерПособияНаРебенкаИнвалида";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПособияНаРебенкаИнвалида");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособияНаРебенкаВИЧ Тогда
			// выбираем размер пособия по уходу за ребенком инфицированного ВИЧ до 18 лет
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособияНаРебенкаВИЧ.РазмерПособия КАК РазмерПособияНаРебенкаВИЧ";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПособияНаРебенкаВИЧ");
			КонецЕсли;
		КонецЕсли;
		
		
		Если НеобходимыеДанные.РазмерОграниченияПособия Тогда
			// размер ограничения пособия по нетрудоспособности
			ТекстЗапроса = ТекстЗапроса + ", 
			|ВЫРАЗИТЬ(Основной.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ОграничениеПособия  КАК ВидОграниченияПособия";
			
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ВидОграниченияПособия"); 
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.СдельныйЗаработок Тогда
			// размер сдельного заработка
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ДанныеОСдельномЗаработке.ОшибкаВводаФактическойВыработки, ЛОЖЬ)
			|			ТОГДА NULL
			|		ИНАЧЕ ДанныеОСдельномЗаработке.СуммаЗаработка 
			|	КОНЕЦ КАК РазмерСдельногоЗаработка,
			//vvv
			|	ДанныеОСдельномЗаработке.ПроцентПремии, 
			|	ДанныеОСдельномЗаработке.КоэффициентСтажаСделка, 
			|	ДанныеОСдельномЗаработке.КТУ, 
			//
			|ЕСТЬNULL(ДанныеОСдельномЗаработке.ОшибкаВводаФактическойВыработки, ЛОЖЬ) КАК ОшибкаВводаФактическойВыработки";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерСдельногоЗаработка");
				ПоляЗапроса.Добавить("ОшибкаВводаФактическойВыработки");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ДанныеДляПрогнозаНДФЛ Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|ВзаиморасчетыСРаботниками.СуммаУпрОстаток Как КВыплатеПоУпрУчету,
			|ВзаиморасчетыСРаботникамиОрганизаций.УжеНачисленоДоДоначисления Как УжеНачисленоДоДоначисления,
			|ЕСТЬNULL(СуммарныйПроцент.Процент, 0) Как СуммарныйПроцент,
			|ВЫБОР КОГДА НеРезиденты.ФизЛицо ЕСТЬ NULL ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ Как Резидент";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("КВыплатеПоУпрУчету");
				ПоляЗапроса.Добавить("УжеНачисленоДоДоначисления");
				ПоляЗапроса.Добавить("СуммарныйПроцент");
				ПоляЗапроса.Добавить("Резидент");
			КонецЕсли;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций Как Основной";
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда

			ТекстЗапроса = ТекстЗапроса + "
            |ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
			|ПО Показатели.ВидРасчета = Основной.ВидРасчета";
			
			Для Каждого ВидСтажа Из МассивСтажей Цикл
				
				КодСтажа = "Стаж_"+СокрП(ВидСтажа.Значение); // код стажа
				Запрос.УстановитьПараметр(КодСтажа, ВидСтажа.Ключ); // ссылка на вид стажа
				
				ТекстЗапроса = ТекстЗапроса + "
				
				|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Стажи КАК "+ КодСтажа + "
				|	ПО Основной.Сотрудник.ФизЛицо = " + КодСтажа + ".Ссылка И
				|	&" + КодСтажа + " = "+КодСтажа+".ВидСтажа";
				
				
			КонецЦикла;

			
			Если НеобходимыеДанные.ВремяВКалендарныхДнях Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(Регистратор = &парамРегистратор) КАК ФактическийПериодДействия
				|ПО ФактическийПериодДействия.НомерСтроки = Основной.НомерСтроки";
			КонецЕсли;
						
		КонецЕсли;
		
		Если НеобходимыеДанные.ВсегоОтработаноВремени Тогда
			
			Запрос.Текст = СотрудникиПериодыДействия; 
			Запрос.Выполнить(); 

			Запрос.Текст = СписокВРПоДням;
			Запрос.Выполнить();

			Запрос.Текст = СписокВРПоЧасам;
			Запрос.Выполнить();

			Запрос.Текст = ОсновныеФПД;
			Запрос.Выполнить();

			Запрос.Текст = ВсегоОтработаноВремени;
			Запрос.Выполнить();

			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТВсегоОтработаноВремени КАК ВсегоОтработаноВремени
			|ПО Основной.НомерСтроки = ВсегоОтработаноВремени.НомерСтроки
			|";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.Стаж Тогда
			// присоединение к данным о стаже
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеОСтаже			
			|ПО ДанныеОСтаже.Сотрудник = Основной.Сотрудник
			|И	ДанныеОСтаже.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)";
			
			Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
		КонецЕсли;
		
		// если перерасчет - нужно сузить выборку 
		Если Перерасчет И Физлица = Неопределено Тогда
			// перерасчет по всем физлицам перерасчета
			ТекстЗапроса = ТекстЗапроса + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизлицаДляПерерасчета КАК ФизлицаДляПерерасчета
			|ПО ФизлицаДляПерерасчета.Физлицо = Основной.Физлицо";
					
		КонецЕсли;
		
		Если НеобходимаБаза Тогда
            Разрезы = Новый Массив;
            Разрезы.Добавить("ПериодРегистрации");
            Если КомментироватьРасчет Тогда
                Запрос.Текст = 
                "ВЫБРАТЬ
                |	СУММА(База.РезультатБаза) КАК РезультатБаза,
				//vvv
				|	СУММА(База.ОплаченоДнейЧасовБаза) КАК ОплаченоДнейЧасовБаза,
				//
                |	База.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
                |	База.Регистратор КАК Регистратор,
                |	База.НомерСтроки КАК НомерСтроки
                |ПОМЕСТИТЬ ВТБаза
                |ИЗ
                |	(ВЫБРАТЬ
				//vvv
                //|		База1.РезультатБаза КАК РезультатБаза,
				|		База1.РезультатБаза / ВЫБОР КОГДА База1.ПериодРегистрацииРазрез <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РезультатБаза,
				|		База1.ОплаченоДнейЧасовБаза КАК ОплаченоДнейЧасовБаза,
				//
                |		База1.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
                |		База1.Регистратор КАК Регистратор,
                |		База1.НомерСтроки КАК НомерСтроки
                |	ИЗ
                |		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.БазаОсновныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновного, &парамИзмеренияБазового, &парамРазрезы, " + Условие + ") КАК База1
                |	ГДЕ
                |		((НЕ База1.Сторно)
                |				ИЛИ База1.ПериодРегистрацииРазрез < База1.ПериодРегистрации)
                |	
                |	ОБЪЕДИНИТЬ ВСЕ
                |	
                |	ВЫБРАТЬ
				//vvv
                //|		База2.РезультатБаза,
				|		База2.РезультатБаза / ВЫБОР КОГДА База2.ПериодРегистрацииРазрез <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РезультатБаза,
				|		0 КАК ОплаченоДнейЧасовБаза,
				//
                |		База2.ВидРасчетаРазрез,
                |		База2.Регистратор,
                |		База2.НомерСтроки
                |	ИЗ
                |		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.БазаДополнительныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновного, &парамИзмеренияБазового, &парамРазрезы, " + Условие + ") КАК База2
                |	ГДЕ
                |		((НЕ База2.Сторно)
                |				ИЛИ База2.ПериодРегистрацииРазрез < База2.ПериодРегистрации)) КАК База
                |СГРУППИРОВАТЬ ПО
                |	База.ВидРасчетаРазрез,
                |	База.Регистратор,
                |	База.НомерСтроки";
                
				Разрезы.Добавить("ВидРасчета");
				
			Иначе
				//vvv
				Запрос.УстановитьПараметр("ПериодРегистрации",ПериодРегистрации);
				//
                Запрос.Текст = 
				//vvv
				"ВЫБРАТЬ
				|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК Часов
				|ПОМЕСТИТЬ ВТПятидневкаГрафик
				|ИЗ
				|	Константы КАК Константы
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
				|		ПО Константы.ОсновнойГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
				|			И (ГрафикиРаботыПоВидамВремени.План)
				|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
				|			И (ГрафикиРаботыПоВидамВремени.Месяц = &ПериодРегистрации)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
                //"ВЫБРАТЬ
				|ВЫБРАТЬ
				//
                |	СУММА(База.РезультатБаза) КАК РезультатБаза,
				//vvv
				|	СУММА(База.ОплаченоДнейЧасовБаза) КАК ОплаченоДнейЧасовБаза,
				//
                |	База.Регистратор КАК Регистратор,
                |	База.НомерСтроки КАК НомерСтроки
                |ПОМЕСТИТЬ ВТБаза
                |ИЗ
                |	(ВЫБРАТЬ
				//vvv
                //|		База1.РезультатБаза КАК РезультатБаза,
				|		ВЫБОР
				|			КОГДА База1.ОтработаноЧасовБаза > ПятидневкаГрафик.Часов
				|					И ЕСТЬNULL(ПятидневкаГрафик.Часов, 0) > 0
				|					И База1.ОтработаноЧасовБаза > 0
				|					И База1.ВидРасчетаРазрез = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовой)
				|					И База1.ВидРасчета.УчитыватьБазуВПределахНормыВремени
				|				ТОГДА База1.РезультатБаза / База1.ОтработаноЧасовБаза * ЕСТЬNULL(ПятидневкаГрафик.Часов, 0)
				|			ИНАЧЕ База1.РезультатБаза
				|		КОНЕЦ / ВЫБОР КОГДА База1.ПериодРегистрацииРазрез <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РезультатБаза,
				|		База1.ОплаченоДнейЧасовБаза КАК ОплаченоДнейЧасовБаза,
				//
                |		База1.Регистратор КАК Регистратор,
                |		База1.НомерСтроки КАК НомерСтроки
                |	ИЗ
                |		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.БазаОсновныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновного, &парамИзмеренияБазового, &парамРазрезы, " + Условие + ") КАК База1
				//vvv
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПятидневкаГрафик КАК ПятидневкаГрафик
				|			ПО (ИСТИНА)
				//
                |	ГДЕ
                |		((НЕ База1.Сторно)
                |				ИЛИ База1.ПериодРегистрацииРазрез < База1.ПериодРегистрации)
                |	
                |	ОБЪЕДИНИТЬ ВСЕ
                |	
                |	ВЫБРАТЬ
				//vvv
                //|		База2.РезультатБаза,
				|		База2.РезультатБаза / ВЫБОР КОГДА База2.ПериодРегистрацииРазрез <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РезультатБаза,
				|		0 КАК ОплаченоДнейЧасовБаза,
				//
                |		База2.Регистратор,
                |		База2.НомерСтроки
                |	ИЗ
                |		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.БазаДополнительныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновного, &парамИзмеренияБазового, &парамРазрезы, " + Условие + ") КАК База2
                |	ГДЕ
                |		((НЕ База2.Сторно)
                |				ИЛИ База2.ПериодРегистрацииРазрез < База2.ПериодРегистрации)) КАК База
                |СГРУППИРОВАТЬ ПО
                |	База.Регистратор,
                |	База.НомерСтроки";
				
				//vvv
				Разрезы.Добавить("ВидРасчета");
				//
            КонецЕсли;
            Запрос.УстановитьПараметр("парамРазрезы", Разрезы);
            Запрос.Выполнить();
            
            ТекстЗапроса = ТекстЗапроса + "
            |ЛЕВОЕ СОЕДИНЕНИЕ ВТБаза КАК База
            |ПО Основной.Регистратор = База.Регистратор И Основной.НомерСтроки = База.НомерСтроки";
            
		КонецЕсли;
		
		Если НеобходимГрафик Тогда
			
			Запрос.УстановитьПараметр("ПоДням", Перечисления.ВидыУчетаВремени.ПоДням);
			Запрос.УстановитьПараметр("ПоЧасам", Перечисления.ВидыУчетаВремени.ПоЧасам);
			Запрос.УстановитьПараметр("ПоВечернимЧасам", Перечисления.ВидыУчетаВремени.ПоВечернимЧасам);
			Запрос.УстановитьПараметр("ПоНочнымЧасам", Перечисления.ВидыУчетаВремени.ПоНочнымЧасам);
			Запрос.УстановитьПараметр("ПустойВидИспользованияРабочегоВремени", Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка());
			Запрос.УстановитьПараметр("КлассификаторЯ", Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
			Запрос.УстановитьПараметр("КлассификаторВЧ", Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы);
			Запрос.УстановитьПараметр("КлассификаторНЧ", Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы);
			Запрос.УстановитьПараметр("ОтработанноеВПределахНормы", Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
			Запрос.УстановитьПараметр("ЦелодневноеНеотработанное", Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
			Запрос.УстановитьПараметр("ЧасовоеНеотработанное", Перечисления.ВидыВремени.ЧасовоеНеотработанное);
			Запрос.УстановитьПараметр("ЧасовоеОтработанноеВПределахНормы", Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
			
			
			Запрос.Текст = ВремяПоТабелюТекст;
			Запрос.Выполнить();
			
			Запрос.Текст = ОтработаноПоВидуВремениДляПоказателейТекст;
			Запрос.Выполнить();
			
			Запрос.Текст = СводныеИндивидуальныеГрафикиТекст;
			Запрос.Выполнить();
			
			Запрос.Текст = НормаВремениПоОбщемуГрафикуТекст;
			Запрос.Выполнить();
			
			//vvv
			Запрос.Текст = НормаВремениПоГрафикуСотрудникаТекст;
			Запрос.Выполнить();
			//
			
			Запрос.Текст = ВремяВведенноеВЦеломЗаПериодТекст;
			Запрос.Выполнить();
			
			Запрос.Текст = СоответствиеТабеляИНачислений;
			Запрос.Выполнить();
			
			// присоединяем к данным графика
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ДанныеГрафика(" + Условие +  ") Как ДанныеГрафика
			|ПО Основной.Регистратор = ДанныеГрафика.Регистратор И Основной.НомерСтроки = ДанныеГрафика.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяПоТабелю КАК ВремяПоТабелю
			|ПО Основной.НомерСтроки = ВремяПоТабелю.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
			|ПО Основной.НомерСтроки = СводныеИндивидуальныеГрафики.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработаноПоВидуВремениДляПоказателей КАК ОтработаноПоВидуВремениНачисления
			|ПО Основной.НомерСтроки = ОтработаноПоВидуВремениНачисления.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоОбщемуГрафику КАК НормаВремениПоОбщемуГрафику
			|ПО Основной.ГрафикРаботыНорма = НормаВремениПоОбщемуГрафику.ГрафикРаботы
			|	И Основной.ПериодДействия = НормаВремениПоОбщемуГрафику.ПериодДействия
			//vvv
            |ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоГрафикуСотрудника КАК НормаВремениПоГрафикуСотрудника
			|ПО Основной.ГрафикСотрудника = НормаВремениПоГрафикуСотрудника.ГрафикРаботы
			|	И Основной.ПериодДействия = НормаВремениПоГрафикуСотрудника.ПериодДействия
			//
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяВведенноеВЦеломЗаПериод КАК ВремяВведенноеВЦеломЗаПериод
			|ПО Основной.НомерСтроки = ВремяВведенноеВЦеломЗаПериод.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТабеляИНачислений КАК СоответствиеТабеляИНачислений
			|ПО Основной.НомерСтроки = СоответствиеТабеляИНачислений.НомерСтроки
			|";
			
		КонецЕсли;
		
		
		Если НеобходимыеДанные.ОтработаноВермениВоВредных Тогда
			
					
			Запрос.Текст = ВремяВоВредныйТекст;
			Запрос.Выполнить();
			
					
			// присоединяем к данным графика
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработанныеВоВредных КАК ОтработанныеВоВредных
			|ПО Основной.НомерСтроки = ОтработанныеВоВредных.НомерСтроки
			|";
			
		КонецЕсли;
		
		//vvv
		Если НеобходимыеДанные.ОтработаноВремениНаЛинии Тогда
			
					
			Запрос.Текст = ВремяВодителейНаЛинии;
			Запрос.Выполнить();
			
					
			// присоединяем к данным графика
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработаноНаЛинии КАК ОтработаноНаЛинии
			|ПО Основной.НомерСтроки = ОтработаноНаЛинии.НомерСтроки
			|";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ОтработаноНаАвтомобиле Тогда
			
					
			Запрос.Текст = ВремяНаАвтомобиле;
			Запрос.Выполнить();
			
					
			// присоединяем к данным графика
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработаноНаАвтомобиле КАК ОтработаноНаАвтомобиле
			|ПО Основной.НомерСтроки = ОтработаноНаАвтомобиле.НомерСтроки
			|";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ОтработаноВремениБезВыезда Тогда
			
					
			Запрос.Текст = ВремяВодителейБезВыезда;
			Запрос.Выполнить();
			
					
			// присоединяем к данным графика
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработаноБезВыезда КАК ОтработаноБезВыезда
			|ПО Основной.НомерСтроки = ОтработаноБезВыезда.НомерСтроки
			|";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ОтработаноВремениНаСделке Тогда
			
					
			Запрос.Текст = ВремяВодителейНаСделке;
			Запрос.Выполнить();
			
					
			// присоединяем к данным графика
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработаноНаСделке КАК ОтработаноНаСделке
			|ПО Основной.НомерСтроки = ОтработаноНаСделке.НомерСтроки
			|";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ОтработаноВремениРемонт Тогда
			
					
			Запрос.Текст = ВремяВодителейРемонт;
			Запрос.Выполнить();
			
					
			// присоединяем к данным графика
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработаноНаРемонте КАК ОтработаноНаРемонте
			|ПО Основной.НомерСтроки = ОтработаноНаРемонте.НомерСтроки
			|";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ОтработаноВремениРемонтПлановый Тогда
			
					
			Запрос.Текст = ВремяВодителейРемонтПлановый;
			Запрос.Выполнить();
			
					
			// присоединяем к данным графика
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработаноНаРемонтеПлановом КАК ОтработаноНаРемонтеПлановом
			|ПО Основной.НомерСтроки = ОтработаноНаРемонтеПлановом.НомерСтроки
			|";
			
		КонецЕсли;
		//
		
		Если НеобходимыеДанные.СреднийЗаработок Тогда
			
		
			Запрос.УстановитьПараметр("ПоЗаработку", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
			Запрос.УстановитьПараметр("ПоЗаработкуБЛ", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
			Запрос.УстановитьПараметр("ПоЗаработкуОтпуск", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск);
			Запрос.УстановитьПараметр("ПоПремиям", ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
			Запрос.УстановитьПараметр("ПоФиксПремиям", ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
			//vvv
			ВидРасчетаГодоваяПремия = Новый Массив;
			ВидРасчетаГодоваяПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии);
			ВидРасчетаГодоваяПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ);
			ВидРасчетаГодоваяПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииОтпуск);
			Запрос.УстановитьПараметр("ПоГодовойПремии", ВидРасчетаГодоваяПремия);			
			
			ВидРасчетаПремия=Новый Массив;
			ВидРасчетаПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
			ВидРасчетаПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ);
			ВидРасчетаПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямОтпуск);			
			Запрос.УстановитьПараметр("ПоПремиям", ВидРасчетаПремия);
			
			ВидРасчетаФиксПремия=Новый Массив;
			ВидРасчетаФиксПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
			ВидРасчетаФиксПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ);
			ВидРасчетаФиксПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямОтпуск);
			
			Запрос.УстановитьПараметр("ПоФиксПремиям", ВидРасчетаФиксПремия);
			//
			//ПоСреднемуЗаработкуФСС = Новый Массив(2);
			//ПоСреднемуЗаработкуФСС[0] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС;
			////ПоСреднемуЗаработкуФСС[1] = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет;
			//Запрос.УстановитьПараметр("ПоСреднемуЗаработкуФСС", ПоСреднемуЗаработкуФСС);
			
			Запрос.Текст = ДанныеОСреднемЗаработкеТекст;
			Запрос.Выполнить();
			ДанныеОСреднемЗаработкеТекст = "ВТДанныеОСреднемЗаработке";
			
			// присоединяем данные для расчета среднего заработка
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+ДанныеОСреднемЗаработкеТекст+" КАК ДанныеДляРасчетаСреднего
			//vvv комментируем
			//|ПО Основной.Сотрудник = ДанныеДляРасчетаСреднего.Сотрудник И 
			|ПО Основной.Сотрудник.ФизЛицо = ДанныеДляРасчетаСреднего.ФизЛицо И 
			//vvv
			//|Основной.ВидРасчета.СпособРасчета = ДанныеДляРасчетаСреднего.СпособРасчета И 
			|((Основной.ВидРасчета.СпособРасчета = ДанныеДляРасчетаСреднего.СпособРасчета) или (Основной.ВидРасчета.СпособРасчета=ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуИзФМП))) И 
			//
			|Основной.ДатаНачалаСобытия = ДанныеДляРасчетаСреднего.ДатаНачалаСобытия И 
			|Основной.ПериодРасчетаСреднегоЗаработкаНачало = ДанныеДляРасчетаСреднего.ДатаНачалаРасчетногоПериода И 
			|Основной.ПериодРасчетаСреднегоЗаработкаОкончание = ДанныеДляРасчетаСреднего.ДатаОкончанияРасчетногоПериода";

		КонецЕсли;
		
		Если НеобходимыеДанные.КалендарныеДниПособия Тогда
			
			ПоСреднемуЗаработкуФСС = Новый Массив(7);
			ПоСреднемуЗаработкуФСС[0] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС;
			ПоСреднемуЗаработкуФСС[1] = Перечисления.СпособыРасчетаОплатыТруда.РасчетБЛотТарифнойСтавки;
			ПоСреднемуЗаработкуФСС[2] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН;
			ПоСреднемуЗаработкуФСС[3] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуОтпускаПоБеременности;
			Запрос.УстановитьПараметр("ПоСреднемуЗаработкуФСС", ПоСреднемуЗаработкуФСС);
			
			Запрос.Текст = КалендарныеДниПособияТекст;
			Запрос.Выполнить();
			КалендарныеДниПособияТекст = "ВТКалендарныеДниПособия";
			
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ " + КалендарныеДниПособияТекст + " Как КалендарныеДниПособия
			|ПО Основной.НомерСтроки = КалендарныеДниПособия.НомерСтроки
			|";
		КонецЕсли;
		
		Если НеобходимыеДанные.ИсчисленныйНДФЛ Тогда
			Запрос.Текст = ИсчисленныйНДФЛТекст;
			Запрос.Выполнить();
			ИсчисленныйНДФЛТекст = "ВТИсчисленныйНДФЛ";
			
			// присоединяем данные по исчисленному НДФЛ
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+ИсчисленныйНДФЛТекст+" КАК ИсчисленныйНДФЛ
			|ПО Основной.ФизЛицо = ИсчисленныйНДФЛ.ФизЛицо";
			
		КонецЕсли;
		
		
		Если НеобходимыеДанные.РазмерЧасоваяМинимальнаяЗарплата тогда
			Запрос.Текст = РазмерЧасоваяМинимальнаяЗарплатаТекст;
			Запрос.Выполнить();
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерЧасоваяМинимальнаяЗарплата КАК ДанныеОРазмереЧасоваяМинимальнаяЗарплата
			|ПО Основной.НомерСтроки = ДанныеОРазмереЧасоваяМинимальнаяЗарплата.ОсновнойНомерСтроки";


		КонецЕсли;
		
		//vvv
		Если НеобходимыеДанные.СреднемесячнаяНормаЧасов тогда
			Запрос.Текст = СреднемесячнаяНормаЧасовТекст;
			Запрос.Выполнить();
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячнаяНормаЧасов КАК ДанныеОСреднемесячнойНормеЧасов
			|ПО Основной.НомерСтроки = ДанныеОСреднемесячнойНормеЧасов.ОсновнойНомерСтроки";
		КонецЕсли;
		//
		
		Если НеобходимыеДанные.РазмерМесячнаяМинимальнаяЗарплата тогда
			Запрос.Текст = РазмерМесячнаяМинимальнаяЗарплатаТекст;
			Запрос.Выполнить();
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерМесячнаяМинимальнаяЗарплата КАК ДанныеОРазмереМесячнаяМинимальнаяЗарплата
			|ПО Основной.НомерСтроки = ДанныеОРазмереМесячнаяМинимальнаяЗарплата.ОсновнойНомерСтроки";


		КонецЕсли;

		Если НеобходимыеДанные.БПМ тогда
			Запрос.Текст = РазмерБПМТекст;
			Запрос.Выполнить();
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерБПМ КАК ДанныеОРазмереБПМ
			|ПО Основной.НомерСтроки = ДанныеОРазмереБПМ.ОсновнойНомерСтроки";
		КонецЕсли;
		
		Если НеобходимыеДанные.МесячнаяТарифнаяСтавка Тогда
			
			Запрос.Текст = РазмерТарифнойСтавкиСотрудникаТекст;
			Запрос.Выполнить();
								
			// присоединяем данные
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ  ВТМесячныеТарифныеСтавки КАК МесячныеТарифныеСтавки
			|ПО Основной.НомерСтроки = МесячныеТарифныеСтавки.ОсновнойНомерСтроки";
 			
		КонецЕсли;
		
		Если НеобходимыеДанные.МесячнаяТарифнаяСтавкаНаДатуСобытия Тогда
			
			Запрос.Текст = МесячнаяТарифнаяСтавкаНаДатуСобытияТекст;
			Запрос.Выполнить();
								
			// присоединяем данные
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ  ВТМесячныеТарифныеСтавки КАК МесячныеТарифныеСтавки
	    	|ПО Основной.НомерСтроки = МесячныеТарифныеСтавки.ОсновнойНомерСтроки";

 			
		КонецЕсли;
		
		
		Если НеобходимыеДанные.СтавкаПервогоРазрядаСотрудника Тогда
			
			Запрос.Текст = СтавкаСотрудникаТекст;
			Запрос.Выполнить();
			
			Запрос.Текст = РазмерСтавкиСотрудникаТекст;
			Запрос.Выполнить();

			Запрос.Текст = СтавкаСотрудникаНаДатуСобытияТекст;
			Запрос.Выполнить();
			
			Запрос.Текст = РазмерСтавкиСотрудникаНаДатуСобытияТекст;
			Запрос.Выполнить();
			
			
			
			// присоединяем данные о размере пособия			
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ  ВТРазмерСтавкаСотрудника КАК СтавкиПервогоРазрядаСотрудника
			|ПО Основной.НомерСтроки = СтавкиПервогоРазрядаСотрудника.ОсновнойНомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ  ВТРазмерСтавкаСотрудникаНаДатуСобытия КАК РазмерСтавкаСотрудникаНаДатуСобытия
			|ПО Основной.НомерСтроки = РазмерСтавкаСотрудникаНаДатуСобытия.ОсновнойНомерСтроки";
			
			
		КонецЕсли;

		
		
		Если НеобходимыеДанные.СтавкаПервогоРазряда Тогда
			
			Запрос.Текст = РазмерСтавкиПервогоРазрядаТекст;
			Запрос.Выполнить();
					
			// присоединяем данные о размере пособия
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиПервогоРазряда КАК СтавкиПервогоРазряда
			|ПО Основной.НомерСтроки = СтавкиПервогоРазряда.ОсновнойНомерСтроки";
			
			
		КонецЕсли;

		
		
		
		Если НеобходимыеДанные.РазмерПособияНаРебенкаДо3Лет Тогда
			
			Запрос.УстановитьПараметр("СпособРасчетаПособияНаРебенкаДо3Лет", Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3Лет);
			Запрос.УстановитьПараметр("ВидПособияНаРебенкаДо3Лет", Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет);
			
			Запрос.Текст = РазмерПособияНаРебенкаДо3ЛетТекст;
			Запрос.Выполнить();
			РазмерПособияНаРебенкаДо3ЛетТекст = "ВТРазмерПособияНаРебенкаДо3Лет";
			
			// присоединяем данные о размере пособия
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияНаРебенкаДо3Лет КАК ДанныеОРазмереПособияНаРебенкаДо3Лет
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособияНаРебенкаДо3Лет.ОсновнойНомерСтроки";
			
			
		КонецЕсли;

		Если НеобходимыеДанные.РазмерПособияНаРебенкаДо3Лет50ПроцентовБПМ Тогда
			
			Запрос.УстановитьПараметр("СпособРасчетаПособияНаРебенкаДо3Лет50ПроцентовБПМ", Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ);
			Запрос.УстановитьПараметр("ВидПособияНаРебенкаДо3Лет50ПроцентовБПМ", Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ);
			
			Запрос.Текст = РазмерПособияНаРебенкаДо3ЛетТекст50ПроцентовБПМ;
			Запрос.Выполнить();
			РазмерПособияНаРебенкаДо3ЛетТекст = "ВТРазмерПособияНаРебенкаДо3Лет50ПроцентовБПМ";
			
			// присоединяем данные о размере пособия
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияНаРебенкаДо3Лет50ПроцентовБПМ КАК ДанныеОРазмереПособияНаРебенкаДо3Лет50ПроцентовБПМ
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособияНаРебенкаДо3Лет50ПроцентовБПМ.ОсновнойНомерСтроки";
			
			
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ Тогда
			
			Запрос.УстановитьПараметр("СпособРасчетаПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ", Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ);
			Запрос.УстановитьПараметр("ВидПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ", Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ);
			
			Запрос.Текст = РазмерПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМТекст;
			Запрос.Выполнить();
			РазмерПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ = "ВТРазмерПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ";
			
			// присоединяем данные о размере пособия
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ КАК ДанныеОРазмереПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ.ОсновнойНомерСтроки";
			
			
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ Тогда
			
			Запрос.УстановитьПараметр("СпособРасчетаПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ", Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ);
			Запрос.УстановитьПараметр("ВидПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ", Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ);
			
			Запрос.Текст = РазмерПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМТекст;
			Запрос.Выполнить();
			РазмерПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ = "ВТРазмерПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ";
			
			// присоединяем данные о размере пособия
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ КАК ДанныеОРазмереПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ.ОсновнойНомерСтроки";
			
			
		КонецЕсли;
		
		
		
		Если НеобходимыеДанные.РазмерПособияНаРебенкаДо3ЛетНаВторого Тогда
			
			Запрос.УстановитьПараметр("СпособРасчетаПособияНаРебенкаДо3ЛетНаВторого", Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3ЛетНаВторого);
			Запрос.УстановитьПараметр("ВидПособияНаРебенкаДо3ЛетНаВторого", Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаВторого);
			
			Запрос.Текст = РазмерПособияНаРебенкаДо3ЛетНаВторогоТекст;
			Запрос.Выполнить();
			РазмерПособияНаРебенкаДо3ЛетНаВторогоТекст = "ВТРазмерПособияНаРебенкаДо3ЛетНаВторого";
			
			// присоединяем данные о размере пособия
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияНаРебенкаДо3ЛетНаВторого КАК ДанныеОРазмереПособияНаРебенкаДо3ЛетНаВторого
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособияНаРебенкаДо3ЛетНаВторого.ОсновнойНомерСтроки";
			
			
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособияНаРебенкаДо3ЛетНаРебенкаИнвалида Тогда
			
			Запрос.УстановитьПараметр("СпособРасчетаПособияНаРебенкаДо3ЛетНаРебенкаИнвалида", Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида);
			Запрос.УстановитьПараметр("ВидПособияНаРебенкаДо3ЛетНаРебенкаИнвалида", Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида);
			
			Запрос.Текст = РазмерПособияНаРебенкаДо3ЛетНаРебенкаИнвалидаТекст;
			Запрос.Выполнить();
			РазмерНаРебенкаДо3ЛетНаРебенкаИнвалидаТекст = "ВТРазмерПособияНаРебенкаДо3ЛетНаРебенкаИнвалида";
			
			// присоединяем данные о размере пособия
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияНаРебенкаДо3ЛетНаРебенкаИнвалида КАК ДанныеОРазмереПособияНаРебенкаДо3ЛетНаРебенкаИнвалида
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособияНаРебенкаДо3ЛетНаРебенкаИнвалида.ОсновнойНомерСтроки";
			
			
		КонецЕсли;
		
		
		Если НеобходимыеДанные.РазмерПособияМатериОдиночкеДо3Лет Тогда
			
			Запрос.УстановитьПараметр("СпособРасчетаПособияМатериОдиночкеДо3Лет", Перечисления.СпособыРасчетаОплатыТруда.ПособиеМатериОдиночкеДо3Лет);
			Запрос.УстановитьПараметр("ВидПособияМатериОдиночкеДо3Лет", Перечисления.ВидыГосударственныхПособий.ПособиеМатериОдиночкеДо3Лет);
			
			Запрос.Текст = РазмерПособияМатериОдиночкеДо3ЛетТекст;
			Запрос.Выполнить();
			РазмерПособияМатериОдиночкеДо3ЛетТекст = "ВТРазмерПособияМатериОдиночкеДо3Лет";
			// присоединяем данные о размере пособия
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияМатериОдиночкеДо3Лет КАК ДанныеОРазмереПособияМатериОдиночкеДо3Лет
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособияМатериОдиночкеДо3Лет.ОсновнойНомерСтроки";
					
		КонецЕсли;
		Если НеобходимыеДанные.РазмерПособияМатериОдиночкеДо1_5Лет Тогда
			
			Запрос.УстановитьПараметр("СпособРасчетаПособияМатериОдиночкеДо1_5Лет", Перечисления.СпособыРасчетаОплатыТруда.ПособиеМатериОдиночкеДо1_5Лет);
			Запрос.УстановитьПараметр("ВидПособияМатериОдиночкеДо1_5Лет", Перечисления.ВидыГосударственныхПособий.ПособиеМатериОдиночкеДо1_5Лет         );
			
			Запрос.Текст = РазмерПособияМатериОдиночкеДо1_5ЛетТекст;
			Запрос.Выполнить();
			РазмерПособияМатериОдиночкеДо1_5ЛетТекст = "ВТРазмерПособияМатериОдиночкеДо1_5Лет";
			
			// присоединяем данные о размере пособия
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияМатериОдиночкеДо1_5Лет КАК ДанныеОРазмереПособияМатериОдиночкеДо1_5Лет
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособияМатериОдиночкеДо1_5Лет.ОсновнойНомерСтроки";
			
		КонецЕсли;
		Если НеобходимыеДанные.РазмерПособияНаРебенкаСНадбавкой40До3лет Тогда
			
			Запрос.УстановитьПараметр("СпособРасчетаПособияНаРебенкаСНадбавкой40До3лет", Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСНадбавкой40До3лет);
			Запрос.УстановитьПараметр("ВидПособияНаРебенкаСНадбавкой40До3лет", Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСНадбавкой40До3лет    );
			
			Запрос.Текст = РазмерПособияНаРебенкаСНадбавкой40До3летТекст;
			Запрос.Выполнить();
			РазмерПособияНаРебенкаСНадбавкой40До3летТекст = "ВТРазмерПособияНаРебенкаСНадбавкой40До3лет";
			
			// присоединяем данные о размере пособия
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияНаРебенкаСНадбавкой40До3лет КАК ДанныеОРазмереПособияНаРебенкаСНадбавкой40До3лет
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособияНаРебенкаСНадбавкой40До3лет.ОсновнойНомерСтроки";
			
		КонецЕсли;
		Если НеобходимыеДанные.РазмерПособияНеРаботающейМатериДо3лет Тогда
			Запрос.УстановитьПараметр("СпособРасчетаПособияНеРаботающейМатериДо3лет", Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРаботающейМатериДо3лет);
			Запрос.УстановитьПараметр("ВидПособияНеРаботающейМатериДо3лет", Перечисления.ВидыГосударственныхПособий.ПособиеНеРаботающейМатериДо3лет    );
			
			Запрос.Текст = РазмерПособияНеРаботающейМатериДо3летТекст;
			Запрос.Выполнить();
			РазмерПособияНеРаботающейМатериДо3летТекст = "ВТРазмерПособияНеРаботающейМатериДо3лет";
			
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияНеРаботающейМатериДо3лет КАК ДанныеОРазмереПособияНеРаботающейМатериДо3лет
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособияНеРаботающейМатериДо3лет.ОсновнойНомерСтроки";
			
		КонецЕсли;
		Если НеобходимыеДанные.РазмерПособияНеРабМатериОдиночкеДо3лет Тогда
			Запрос.УстановитьПараметр("СпособРасчетаПособияНеРабМатериОдиночкеДо3лет", Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериОдиночкеДо3лет);
			Запрос.УстановитьПараметр("ВидПособияНеРабМатериОдиночкеДо3лет", Перечисления.ВидыГосударственныхПособий.ПособиеНеРабМатериОдиночкеДо3лет    );
			
			Запрос.Текст = РазмерПособияНеРабМатериОдиночкеДо3летТекст;
			Запрос.Выполнить();
			РазмерПособияНеРабМатериОдиночкеДо3летТекст = "ВТРазмерПособияНеРабМатериОдиночкеДо3лет";
			
			// присоединяем данные о размере пособия
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияНеРабМатериОдиночкеДо3лет КАК ДанныеОРазмереПособияНеРабМатериОдиночкеДо3лет
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособияНеРабМатериОдиночкеДо3лет.ОсновнойНомерСтроки";
			
		КонецЕсли;
		Если НеобходимыеДанные.РазмерПособияНеРабМатериОдиночкеДо1_5лет Тогда
			Запрос.УстановитьПараметр("СпособРасчетаПособияНеРабМатериОдиночкеДо1_5лет", Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериОдиночкеДо1_5лет);
			Запрос.УстановитьПараметр("ВидПособияНеРабМатериОдиночкеДо1_5лет", Перечисления.ВидыГосударственныхПособий.ПособиеНеРабМатериОдиночкеДо1_5лет    );
			
			Запрос.Текст = РазмерПособияНеРабМатериОдиночкеДо1_5летТекст;
			Запрос.Выполнить();
			РазмерПособияНеРабМатериОдиночкеДо1_5летТекст = "ВТРазмерПособияНеРабМатериОдиночкеДо1_5лет";
			
			// присоединяем данные о размере пособия
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияНеРабМатериОдиночкеДо1_5лет КАК ДанныеОРазмереПособияНеРабМатериОдиночкеДо1_5лет
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособияНеРабМатериОдиночкеДо1_5лет.ОсновнойНомерСтроки";
			
		КонецЕсли;
		Если НеобходимыеДанные.РазмерПособияНеРабМатериНадб40До3Лет Тогда
			Запрос.УстановитьПараметр("СпособРасчетаПособияНеРабМатериНадб40До3Лет", Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериНадб40До3Лет);
			Запрос.УстановитьПараметр("ВидПособияНеРабМатериНадб40До3Лет", Перечисления.ВидыГосударственныхПособий.ПособиеНеРабМатериНадб40До3Лет);
			
			Запрос.Текст = РазмерПособияНеРабМатериНадб40До3ЛетТекст;
			Запрос.Выполнить();
			РазмерПособияНеРабМатериНадб40До3ЛетТекст = "ВТРазмерПособияНеРабМатериНадб40До3Лет";
			
			// присоединяем данные о размере пособия
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияНеРабМатериНадб40До3Лет КАК ДанныеОРазмереПособияНеРабМатериНадб40До3Лет
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособияНеРабМатериНадб40До3Лет.ОсновнойНомерСтроки";
			
		КонецЕсли;

		Если НеобходимыеДанные.РазмерПособияНаРебенкаСтарше3Лет Тогда
			Запрос.УстановитьПараметр("СпособРасчетаПособияНаРебенкаСтарше3Лет", Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСтарше3Лет);
			Запрос.УстановитьПараметр("ВидПособияНаРебенкаСтарше3Лет", Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3Лет    );
			
			Запрос.Текст = РазмерПособияНаРебенкаСтарше3ЛетТекст;
			Запрос.Выполнить();
			РазмерПособияНаРебенкаСтарше3ЛетТекст = "ВТРазмерПособияНаРебенкаСтарше3Лет";
			
			// присоединяем данные о размере пособия
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияНаРебенкаСтарше3Лет КАК ДанныеОРазмереПособияНаРебенкаСтарше3Лет
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособияНаРебенкаСтарше3Лет.ОсновнойНомерСтроки";
					
		КонецЕсли;
		
        Если НеобходимыеДанные.РазмерПособияНаРебенкаСтарше3ЛетНаРебенкаИнвалида Тогда
			Запрос.УстановитьПараметр("СпособРасчетаПособияНаРебенкаСтарше3ЛетНаРебенкаИнвалида", Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида);
			Запрос.УстановитьПараметр("ВидПособияНаРебенкаСтарше3ЛетНаРебенкаИнвалида", Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида    );
			
			Запрос.Текст = РазмерПособияНаРебенкаСтарше3ЛетНаРебенкаИнвалидаТекст;
			Запрос.Выполнить();
			РазмерПособияННаРебенкаСтарше3ЛетНаРебенкаИнвалидаТекст = "ВТРазмерПособияНаРебенкаСтарше3ЛетНаРебенкаИнвалида";
			
			// присоединяем данные о размере пособия
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияНаРебенкаСтарше3ЛетНаРебенкаИнвалида КАК ДанныеОРазмереПособияНаРебенкаСтарше3ЛетНаРебенкаИнвалида
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособияНаРебенкаСтарше3ЛетНаРебенкаИнвалида.ОсновнойНомерСтроки";
					
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособияНаРебенкаДо18ЛетНадб40 Тогда
			Запрос.УстановитьПараметр("СпособРасчетаПособияНаРебенкаДо18ЛетНадб40", Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо18ЛетНадб40);
			Запрос.УстановитьПараметр("ВидПособияНаРебенкаДо18ЛетНадб40", Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаДо18ЛетНадб40    );
			
			Запрос.Текст = РазмерПособияНаРебенкаДо18ЛетНадб40Текст;
			Запрос.Выполнить();
			РазмерПособияНаРебенкаДо18ЛетНадб40Текст = "ВТРазмерПособияНаРебенкаДо18ЛетНадб40";
			
			// присоединяем данные о размере пособия
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияНаРебенкаДо18ЛетНадб40 КАК ДанныеОРазмереПособияНаРебенкаДо18ЛетНадб40
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособияНаРебенкаДо18ЛетНадб40.ОсновнойНомерСтроки";
			
			
		КонецЕсли;
		Если НеобходимыеДанные.РазмерПособияНаРебенкаИнвалида Тогда
			Запрос.УстановитьПараметр("СпособРасчетаПособияНаРебенкаИнвалида", Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалида);
			Запрос.УстановитьПараметр("ВидПособияНаРебенкаИнвалида", Перечисления.ВидыГосударственныхПособий.ПособиеНаРебенкаИнвалида    );
			
			Запрос.Текст = РазмерПособияНаРебенкаИнвалидаТекст;
			Запрос.Выполнить();
			РазмерПособияНаРебенкаИнвалидаТекст = "ВТРазмерПособияНаРебенкаИнвалида";
			
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияНаРебенкаИнвалида КАК ДанныеОРазмереПособияНаРебенкаИнвалида
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособияНаРебенкаИнвалида.ОсновнойНомерСтроки";
			
		КонецЕсли;
		Если НеобходимыеДанные.РазмерПособияНаРебенкаВич Тогда
			Запрос.УстановитьПараметр("СпособРасчетаПособияНаРебенкаВич", Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаВич);
			Запрос.УстановитьПараметр("ВидПособияНаРебенкаВич", Перечисления.ВидыГосударственныхПособий.ПособиеНаВИЧИнфицРебенка    );
			
			Запрос.Текст = РазмерПособияНаРебенкаВичТекст;
			Запрос.Выполнить();
			РазмерПособияНаРебенкаВичТекст = "ВТРазмерПособияНаРебенкаВич";
			// присоединяем данные о размере пособия
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияНаРебенкаВич КАК ДанныеОРазмереПособияНаРебенкаВич
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособияНаРебенкаВич.ОсновнойНомерСтроки";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.СдельныйЗаработок Тогда
			Запрос.Текст = СдельныйЗаработокОрганизацииТекст;
			Запрос.Выполнить();
			СдельныйЗаработокОрганизацииТекст = "ВТСдельныйЗаработокОрганизации";
			
			// присоединяем данные о сдельном заработке
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТСдельныйЗаработокОрганизации КАК ДанныеОСдельномЗаработке
			|ПО Основной.НомерСтроки = ДанныеОСдельномЗаработке.ОсновнойНомерСтроки";
			
		КонецЕсли;

				
		Если НеобходимыеДанные.ДанныеДляПрогнозаНДФЛ Тогда
				
			СуммарныйПроцентТекст = 
			"ВЫБРАТЬ
			|	Размеры.Сотрудник,
			|	СУММА(Размеры.Размер) КАК Процент
			|ИЗ
			|	(ВЫБРАТЬ
			|		Начисления.Сотрудник КАК Сотрудник,
			|		Начисления.Показатель1 КАК Размер
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
			|	ГДЕ
			|		Начисления.Ссылка = &парамРегистратор
			|		И Начисления.ВидРасчета.СпособРасчета В (&Процентом)
			|		И Начисления.ВидРасчета В
			|				(ВЫБРАТЬ
			|					Базовые.Ссылка
			|				ИЗ
			|					ПланВидовРасчета.ОсновныеНачисленияОрганизаций.БазовыеВидыРасчета КАК Базовые
			|				ГДЕ
			|					Базовые.ВидРасчета.СпособРасчета = &Доначисление)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Начисления.Сотрудник,
			|		Начисления.Показатель1
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК Начисления
			|	ГДЕ
			|		Начисления.Ссылка = &парамРегистратор
			|		И Начисления.ВидРасчета.СпособРасчета В (&Процентом)
			|		И Начисления.ВидРасчета В
			|				(ВЫБРАТЬ
			|					Базовые.Ссылка
			|				ИЗ
			|					ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.БазовыеВидыРасчета КАК Базовые
			|				ГДЕ
			|					Базовые.ВидРасчета.СпособРасчета = &Доначисление)) КАК Размеры
			|
			|СГРУППИРОВАТЬ ПО
			|	Размеры.Сотрудник";
			
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСРаботниками.Остатки(&КонецПериодаРегистрации, " + УсловиеНаФизлицоТекст + ") КАК ВзаиморасчетыСРаботниками
			|ПО Основной.Физлицо = ВзаиморасчетыСРаботниками.Физлицо
			|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|	ВзаиморасчетыСРаботникамиОрганизаций.Физлицо,
			|	СУММА(ВзаиморасчетыСРаботникамиОрганизаций.СуммаВзаиморасчетов) КАК УжеНачисленоДоДоначисления
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизаций
			|ГДЕ
			|	ВзаиморасчетыСРаботникамиОрганизаций.Организация = &парамОрганизация
			|	И ВзаиморасчетыСРаботникамиОрганизаций.Регистратор <> &парамРегистратор
			|	И НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботникамиОрганизаций.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
			|	И ВзаиморасчетыСРаботникамиОрганизаций.ВидДвижения = &парамПриход
			|
			|СГРУППИРОВАТЬ ПО
			|	ВзаиморасчетыСРаботникамиОрганизаций.Физлицо) КАК ВзаиморасчетыСРаботникамиОрганизаций
			|ПО Основной.Физлицо = ВзаиморасчетыСРаботникамиОрганизаций.Физлицо
			|ЛЕВОЕ СОЕДИНЕНИЕ (" + СуммарныйПроцентТекст + ") КАК СуммарныйПроцент
			|ПО Основной.Сотрудник = СуммарныйПроцент.Сотрудник
			|ЛЕВОЕ СОЕДИНЕНИЕ 
			|(ВЫБРАТЬ
			|	ГражданствоФизЛицСрезПоследних.ФизЛицо КАК ФизЛицо
			|	ИЗ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонецГода, " + УсловиеНаФизлицоТекст + ") КАК ГражданствоФизЛицСрезПоследних
			|	ГДЕ (ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРФ)) КАК НеРезиденты
			|ПО Основной.Физлицо = НеРезиденты.ФизЛицо";
			
			Запрос.УстановитьПараметр("парамКонецГода", КонецГода(ПериодРегистрации));
			Запрос.УстановитьПараметр("КонецПериодаРегистрации", ДобавитьМесяц(ПериодРегистрации, 1));
			Запрос.УстановитьПараметр("Доначисление", Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету);
			Запрос.УстановитьПараметр("Процентом", ПолучитьСписокНачисленийПроцентом());
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ " + ВнешнееУсловие;
		
	ИначеЕсли ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ 
		|Основной.Регистратор Как Регистратор,
		|Основной.НомерСтроки Как НомерСтроки,
		|Основной.Сотрудник.Наименование Как СотрудникНаименование,
		|Основной.Сотрудник Как Сотрудник,
		|Основной.Сотрудник.Физлицо Как Физлицо,
		|Основной.ВидРасчета Как ВидРасчета,
		|Истина Как ВидРасчетаПериодДействияБазовый,
		|Основной.ВидРасчета.Наименование Как ВидРасчетаНаименование,
		|Основной.ВидРасчета.СпособРасчета Как СпособРасчета,
		|Основной.ВидРасчета.КодДоходаНДФЛ Как КодДоходаНДФЛ";
		
		Запрос.УстановитьПараметр("ПустойКодВычета", Справочники.ВычетыНДФЛ.ПустаяСсылка());

		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("Сотрудник");
			ПоляЗапроса.Добавить("СотрудникНаименование");
			ПоляЗапроса.Добавить("ВидРасчета");
			ПоляЗапроса.Добавить("ВидРасчетаНаименование");
			ПоляЗапроса.Добавить("СпособРасчета");
			ПоляЗапроса.Добавить("КодДоходаНДФЛ");
			ПоляЗапроса.Добавить("ВидРасчетаПериодДействияБазовый");
		КонецЕсли;
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
			
			Если КоличествоПоказателей = 0 Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				| ВЫБОР
				|		КОГДА Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СевернаяНадбавка),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка))
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК РасчетИмеетБазовыеНачисления,
				| Ложь КАК РасчетИмеетОтработанноеВремя,
				| 0 КАК КоличествоПоказателей,";
			Иначе
				ТекстЗапроса = ТекстЗапроса + ",
				| ВЫБОР
				|		КОГДА Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СевернаяНадбавка),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка))
				|			ТОГДА ИСТИНА
				|		КОГДА Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула)
				|			ТОГДА Показатели.РасчетИмеетБазовыеНачисления
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК РасчетИмеетБазовыеНачисления,
				| Показатели.РасчетИмеетОтработанноеВремя КАК РасчетИмеетОтработанноеВремя,
				| Показатели.КоличествоПоказателей КАК КоличествоПоказателей,";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			| Основной.ВидРасчета.ФормулаРасчета КАК ФормулаРасчета";
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("КоличествоПоказателей");
				ПоляЗапроса.Добавить("РасчетИмеетБазовыеНачисления");
				ПоляЗапроса.Добавить("РасчетИмеетОтработанноеВремя");
				ПоляЗапроса.Добавить("ФормулаРасчета");
			КонецЕсли;
			
			Для СчПоказателей = 1 По КоличествоПоказателей Цикл
				Если СчПоказателей > 6 Тогда					
					ПоказательТекст = СтрЗаменить(Показатель1ТекстПредопределенный, "Показатель1", "Показатель"+СчПоказателей);
				ИначеЕсли СчПоказателей > 1 Тогда
					ПоказательТекст = СтрЗаменить(Показатель1Текст, "Показатель1", "Показатель"+СчПоказателей);
				Иначе
					ПоказательТекст = Показатель1Текст;
				КонецЕсли;					
				
				ТекстЗапроса = ТекстЗапроса + ", 
				|Показатели.Показатель" + СчПоказателей + "ЯвляетсяРасчетнойБазой Как Показатель" + СчПоказателей + "ЯвляетсяРасчетнойБазой,
				|Показатели.Показатель" + СчПоказателей+".Наименование Как Показатель" + СчПоказателей + "Наименование,
				|" + ПоказательТекст + " Как Показатель"+СчПоказателей;
				
				Если КомментироватьРасчет Тогда
					ПоляЗапроса.Добавить("Показатель" + СчПоказателей + "ЯвляетсяРасчетнойБазой");
					ПоляЗапроса.Добавить("Показатель" + СчПоказателей + "Наименование");
					ПоляЗапроса.Добавить("Показатель" + СчПоказателей);
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;
			
		Если НеобходимаБаза Тогда
			// если присоединяем к базе
			Если КомментироватьРасчет Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				|База.РезультатБаза Как РезультатБаза,
				|База.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
				|База.ВидРасчетаРазрез.Наименование КАК ВидРасчетаРазрезНаименование";
				ПоляЗапроса.Добавить("РезультатБаза");
				ПоляЗапроса.Добавить("ВидРасчетаРазрез");
				ПоляЗапроса.Добавить("ВидРасчетаРазрезНаименование");
			Иначе 
				ТекстЗапроса = ТекстЗапроса + ",
				|База.РезультатБаза КАК РезультатБаза";
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.СреднийЗаработок Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|Основной.РучнойРасчетСреднегоЗаработка Как РучнойРасчетСреднегоЗаработка, 
			|Основной.РазмерСреднегоЗаработка Как РазмерСреднегоЗаработка, 
			|ДанныеДляРасчетаСреднего.ЧислоМесяцев Как ЧислоМесяцев, 
			|ЕСТЬNULL(ДанныеДляРасчетаСреднего.ОтработаноДней,0) Как ОтработаноДнейПоСреднему, 
			|ЕСТЬNULL(ДанныеДляРасчетаСреднего.ОтработаноЧасов,0) Как ОтработаноЧасовПоСреднему, 
			|ЕСТЬNULL(ДанныеДляРасчетаСреднего.КалендарныеДни,0) Как КалендарныеДни,
			|ДанныеДляРасчетаСреднего.СреднийЗаработок Как СреднийЗаработок,
			//vvv
			|ДанныеДляРасчетаСреднего.СуммаГодовойПремии Как СуммаГодовойПремии,
			|ДанныеДляРасчетаСреднего.СуммаГодовойПремии Как СуммаГодовойПремииБезИндексации,
			|ЕСТЬNULL(ДанныеДляРасчетаСреднего.НормаЧасов,0) Как НормаЧасовПоСреднему, 
			//
			|ДанныеДляРасчетаСреднего.СреднийЗаработокБезИндексации Как СреднийЗаработокБезИндексации";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ОтработаноДнейПоСреднему");
				ПоляЗапроса.Добавить("ОтработаноЧасовПоСреднему");
				ПоляЗапроса.Добавить("КалендарныеДни");
				ПоляЗапроса.Добавить("СреднийЗаработок");
				ПоляЗапроса.Добавить("СреднийЗаработокБезИндексации");
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимыеДанные.СреднийЗаработокОтпуска Тогда

			// выбираем ЧислоДнейВНеделе
			ТекстЗапроса = ТекстЗапроса + ", 
			|ВЫБОР КОГДА Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке) ТОГДА 6 ИНАЧЕ 7 КОНЕЦ КАК ЧислоДнейВНеделе,
			|Основной.ГрафикРаботы.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели";
			
			Запрос.УстановитьПараметр("ПоЗаработку", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
			Запрос.УстановитьПараметр("ПоЗаработкуБЛ", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
			Запрос.УстановитьПараметр("ПоЗаработкуОтпуск", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск);
			Запрос.УстановитьПараметр("ПоПремиям", ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
			Запрос.УстановитьПараметр("ПоФиксПремиям", ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ЧислоДнейВНеделе");
				ПоляЗапроса.Добавить("ДлительностьРабочейНедели");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ДанныеДляПрогнозаНДФЛ Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|ВзаиморасчетыСРаботниками.СуммаУпрОстаток Как КВыплатеПоУпрУчету,
			|ВзаиморасчетыСРаботникамиОрганизаций.УжеНачисленоДоДоначисления Как УжеНачисленоДоДоначисления,
			|ЕСТЬNULL(СуммарныйПроцент.Процент, 0) Как СуммарныйПроцент, 
			|ВЫБОР КОГДА НеРезиденты.ФизЛицо ЕСТЬ NULL ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ Как Резидент";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("КВыплатеПоУпрУчету");
				ПоляЗапроса.Добавить("УжеНачисленоДоДоначисления");
				ПоляЗапроса.Добавить("СуммарныйПроцент");
				ПоляЗапроса.Добавить("Резидент");
			КонецЕсли;
		КонецЕсли;
		
		//vvv
		Если НеобходимыеДанные.КоличествоБазовыхВеличин Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|ЕСТЬNULL(КоличествоБазовых.Величина, 0) Как КолБазовых";	
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерБазовойВеличины Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|ЕСТЬNULL(ДанныеОРазмереБазовойВеличины.Размер, 0) Как РазмерБазовойВеличины";	
		КонецЕсли;
		//
		
		Если НеобходимыеДанные.ВычетыКДоходамНДФЛ Тогда
			//vvv
			Запрос.УстановитьПараметр("ДатаДеноминации",ОбщегоНазначения.ПолучитьДатуДеноминации());
			Если РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Получить(Новый Структура("Организация", Организация)).РассчитыватьЛьготуПоПНПоПериодуДействия ТОгда
				ТекстЗапроса = ТекстЗапроса + ", 
				|ЕСТЬNULL(СведенияОСкидках.ГодовойВычет, 0) Как ГодовойВычет,
				|ЕСТЬNULL(СведенияОСкидках.НормативЗатрат, 0) Как НормативЗатрат,
				|ЕСТЬNULL(СведенияОСкидках.КратностьВычета, 0) Как КратностьВычета,
				|СУММА(ЕСТЬNULL(НДФЛОбороты.СуммаВычета/ВЫБОР КОГДА НДФЛОбороты.ПериодРегистрации<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ, 0)) Как СуммаВычетаОборот";
			Иначе
			//	
				ТекстЗапроса = ТекстЗапроса + ", 
				|ЕСТЬNULL(СведенияОСкидках.ГодовойВычет, 0) Как ГодовойВычет,
				|ЕСТЬNULL(СведенияОСкидках.НормативЗатрат, 0) Как НормативЗатрат,
				|ЕСТЬNULL(СведенияОСкидках.КратностьВычета, 0) Как КратностьВычета,
				|ЕСТЬNULL(НДФЛОбороты.СуммаВычетаОборот, 0) Как СуммаВычетаОборот";
			КонецЕсли;
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ГодовойВычет");
				ПоляЗапроса.Добавить("НормативЗатрат");
				ПоляЗапроса.Добавить("КратностьВычета");
				ПоляЗапроса.Добавить("СуммаВычетаОборот");
			КонецЕсли;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ РегистрРасчета."+ИмяРегистра+" Как Основной";
		
			
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда

			ТекстЗапроса = ТекстЗапроса + "			
            |ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
			|ПО Показатели.ВидРасчета = Основной.ВидРасчета";
			
			Для Каждого ВидСтажа Из МассивСтажей Цикл
				
				КодСтажа = "Стаж_"+СокрП(ВидСтажа.Значение); // код стажа
				Запрос.УстановитьПараметр(КодСтажа, ВидСтажа.Ключ); // ссылка на вид стажа
				
				ТекстЗапроса = ТекстЗапроса + "
				
				|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Стажи КАК "+ КодСтажа + "
				|	ПО Основной.Сотрудник.ФизЛицо = " + КодСтажа + ".Ссылка И
				|	&" + КодСтажа + " = "+КодСтажа+".ВидСтажа";
				
				
			КонецЦикла;

			
		КонецЕсли;	
		
		Если НеобходимыеДанные.Стаж Тогда
			// присоединение к данным о стаже
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеОСтаже			
			|ПО ДанныеОСтаже.Сотрудник = Основной.Сотрудник
			|И	ДанныеОСтаже.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)";
			
			Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
		КонецЕсли;
		
		//vvv
		Если НеобходимыеДанные.КоличествоБазовыхВеличин тогда
			Запрос.Текст = КоличествоБазовыхТекст;
			Запрос.Выполнить();
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоБазовых КАК КоличествоБазовых
			|ПО Основной.НомерСтроки = КоличествоБазовых.НомерСтроки";
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерБазовойВеличины тогда
			Запрос.Текст = РазмерБазовойВеличиныТекст;
			Запрос.Выполнить();
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерБазовойВеличины КАК ДанныеОРазмереБазовойВеличины
			|ПО Основной.НомерСтроки = ДанныеОРазмереБазовойВеличины.ОсновнойНомерСтроки";
		КонецЕсли;
		//
		
		// если перерасчет - нужно сузить выборку 
		Если Перерасчет И Физлица = Неопределено Тогда
			// перерасчет по всем физлицам перерасчета
			ТекстЗапроса = ТекстЗапроса + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизлицаДляПерерасчета КАК ФизлицаДляПерерасчета
			|ПО ФизлицаДляПерерасчета.Физлицо = Основной.Физлицо";
					
		КонецЕсли;
		
		Если НеобходимаБаза Тогда
            
            Разрезы = Новый Массив;
            Разрезы.Добавить("ПериодРегистрации");
            Если КомментироватьРасчет Тогда
            Запрос.Текст = 
                "ВЫБРАТЬ
                |	СУММА(База.РезультатБаза) КАК РезультатБаза,
                |	База.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
                |	База.Регистратор КАК Регистратор,
                |	База.НомерСтроки КАК НомерСтроки
                |ПОМЕСТИТЬ ВТБаза
                |ИЗ
                |	(ВЫБРАТЬ
				//vvv
                //|		База1.РезультатБаза КАК РезультатБаза,
				|		База1.РезультатБаза / ВЫБОР КОГДА База1.ПериодРегистрацииРазрез <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РезультатБаза,
				//
                |		База1.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
                |		База1.Регистратор КАК Регистратор,
                |		База1.НомерСтроки КАК НомерСтроки
                |	ИЗ
                |		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.БазаОсновныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновного, &парамИзмеренияБазового, &парамРазрезы, " + Условие + ") КАК База1
                |	ГДЕ
                |		((НЕ База1.Сторно)
                |				ИЛИ База1.ПериодРегистрацииРазрез < База1.ПериодРегистрации)
                |	
                |	ОБЪЕДИНИТЬ ВСЕ
                |	
                |	ВЫБРАТЬ
				//vvv
                //|		База2.РезультатБаза,
				|		База2.РезультатБаза / ВЫБОР КОГДА База2.ПериодРегистрацииРазрез <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РезультатБаза,
				//
                |		База2.ВидРасчетаРазрез,
                |		База2.Регистратор,
                |		База2.НомерСтроки
                |	ИЗ
                |		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.БазаДополнительныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновного, &парамИзмеренияБазового, &парамРазрезы, " + Условие + ") КАК База2
                |	ГДЕ
                |		((НЕ База2.Сторно)
                |				ИЛИ База2.ПериодРегистрацииРазрез < База2.ПериодРегистрации)) КАК База
                |СГРУППИРОВАТЬ ПО
                |	База.ВидРасчетаРазрез,
                |	База.Регистратор,
                |	База.НомерСтроки";
                
				Разрезы.Добавить("ВидРасчета");
				
			Иначе
                Запрос.Текст = 
                "ВЫБРАТЬ
                |	СУММА(База.РезультатБаза) КАК РезультатБаза,
                |	База.Регистратор КАК Регистратор,
                |	База.НомерСтроки КАК НомерСтроки
                |ПОМЕСТИТЬ ВТБаза
                |ИЗ
                |	(ВЫБРАТЬ
				//vvv
                //|		База1.РезультатБаза КАК РезультатБаза,
				|		База1.РезультатБаза / ВЫБОР КОГДА База1.ПериодРегистрацииРазрез <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РезультатБаза,
				//
                |		База1.Регистратор КАК Регистратор,
                |		База1.НомерСтроки КАК НомерСтроки
                |	ИЗ
                |		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.БазаОсновныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновного, &парамИзмеренияБазового, &парамРазрезы, " + Условие + ") КАК База1
                |	ГДЕ
                |		((НЕ База1.Сторно)
                |				ИЛИ База1.ПериодРегистрацииРазрез < База1.ПериодРегистрации)
                |	
                |	ОБЪЕДИНИТЬ ВСЕ
                |	
                |	ВЫБРАТЬ
				//vvv
                //|		База2.РезультатБаза,
				|		База2.РезультатБаза / ВЫБОР КОГДА База2.ПериодРегистрацииРазрез <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РезультатБаза,
				//
                |		База2.Регистратор,
                |		База2.НомерСтроки
                |	ИЗ
                |		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.БазаДополнительныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновного, &парамИзмеренияБазового, &парамРазрезы, " + Условие + ") КАК База2
                |	ГДЕ
                |		((НЕ База2.Сторно)
                |				ИЛИ База2.ПериодРегистрацииРазрез < База2.ПериодРегистрации)) КАК База
                |СГРУППИРОВАТЬ ПО
                |	База.Регистратор,
                |	База.НомерСтроки";
				
            КонецЕсли;
            Запрос.УстановитьПараметр("парамРазрезы", Разрезы);
            Запрос.Выполнить();
            
            ТекстЗапроса = ТекстЗапроса + "
            |ЛЕВОЕ СОЕДИНЕНИЕ ВТБаза КАК База
            |ПО Основной.Регистратор = База.Регистратор И Основной.НомерСтроки = База.НомерСтроки";
		КонецЕсли;
		
		Если НеобходимыеДанные.СреднийЗаработок Тогда
			
			
			Запрос.УстановитьПараметр("ПоЗаработку", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
			Запрос.УстановитьПараметр("ПоЗаработкуБЛ", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
			Запрос.УстановитьПараметр("ПоЗаработкуОтпуск", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск);
			Запрос.УстановитьПараметр("ПоПремиям", ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
			Запрос.УстановитьПараметр("ПоФиксПремиям", ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
			//vvv
			ВидРасчетаГодоваяПремия = Новый Массив;
			ВидРасчетаГодоваяПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии);
			ВидРасчетаГодоваяПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ);
			ВидРасчетаГодоваяПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииОтпуск);
			Запрос.УстановитьПараметр("ПоГодовойПремии", ВидРасчетаГодоваяПремия);			
			
			ВидРасчетаПремия=Новый Массив;
			ВидРасчетаПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
			ВидРасчетаПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ);
			ВидРасчетаПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямОтпуск);			
			Запрос.УстановитьПараметр("ПоПремиям", ВидРасчетаПремия);
			
			ВидРасчетаФиксПремия=Новый Массив;
			ВидРасчетаФиксПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
			ВидРасчетаФиксПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ);
			ВидРасчетаФиксПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямОтпуск);
			
			Запрос.УстановитьПараметр("ПоФиксПремиям", ВидРасчетаФиксПремия);
			//
			//ПоСреднемуЗаработкуФСС = Новый Массив(2);
			//ПоСреднемуЗаработкуФСС[0] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС;
			////ПоСреднемуЗаработкуФСС[1] = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет;
			//Запрос.УстановитьПараметр("ПоСреднемуЗаработкуФСС", ПоСреднемуЗаработкуФСС);
			
			Запрос.Текст = ДанныеОСреднемЗаработкеТекст;
			Запрос.Выполнить();
			ДанныеОСреднемЗаработкеТекст = "ВТДанныеОСреднемЗаработке";
			
			// присоединяем данные для расчета среднего заработка
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+ДанныеОСреднемЗаработкеТекст+" КАК ДанныеДляРасчетаСреднего
			//vvv
			//|ПО Основной.Сотрудник = ДанныеДляРасчетаСреднего.Сотрудник И 			
			|ПО Основной.Сотрудник.ФизЛицо = ДанныеДляРасчетаСреднего.ФизЛицо И 			
			//|Основной.ВидРасчета.СпособРасчета = ДанныеДляРасчетаСреднего.СпособРасчета И 
			|((Основной.ВидРасчета.СпособРасчета = ДанныеДляРасчетаСреднего.СпособРасчета) или (Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуИзФМП))) И 
			//
			|Основной.ДатаНачалаСобытия = ДанныеДляРасчетаСреднего.ДатаНачалаСобытия И 
			|Основной.ПериодРасчетаСреднегоЗаработкаНачало = ДанныеДляРасчетаСреднего.ДатаНачалаРасчетногоПериода И 
			|Основной.ПериодРасчетаСреднегоЗаработкаОкончание = ДанныеДляРасчетаСреднего.ДатаОкончанияРасчетногоПериода";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ДанныеДляПрогнозаНДФЛ Тогда
			// суммарный процент всех процентных начислений, в базу которых включены виды расчета 
			// со способом расчета ДоначислениеПоУправленческомуУчету
			СуммарныйПроцентТекст = 
			"ВЫБРАТЬ
			|	Размеры.Сотрудник,
			|	СУММА(Размеры.Размер) КАК Процент
			|ИЗ
			|	(ВЫБРАТЬ
			|		Начисления.Сотрудник КАК Сотрудник,
			|		Начисления.Показатель1 КАК Размер
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
			|	ГДЕ
			|		Начисления.Ссылка = &парамРегистратор
			|		И Начисления.ВидРасчета.СпособРасчета В (&Процентом)
			|		И Начисления.ВидРасчета В
			|				(ВЫБРАТЬ
			|					Базовые.Ссылка
			|				ИЗ
			|					ПланВидовРасчета.ОсновныеНачисленияОрганизаций.БазовыеВидыРасчета КАК Базовые
			|				ГДЕ
			|					Базовые.ВидРасчета.СпособРасчета = &Доначисление)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Начисления.Сотрудник,
			|		Начисления.Начисления.Показатель1
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК Начисления
			|	ГДЕ
			|		Начисления.Ссылка = &парамРегистратор
			|		И Начисления.ВидРасчета.СпособРасчета В (&Процентом)
			|		И Начисления.ВидРасчета В
			|				(ВЫБРАТЬ
			|					Базовые.Ссылка
			|				ИЗ
			|					ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.БазовыеВидыРасчета КАК Базовые
			|				ГДЕ
			|					Базовые.ВидРасчета.СпособРасчета = &Доначисление)) КАК Размеры
			|
			|СГРУППИРОВАТЬ ПО
			|	Размеры.Сотрудник";
			
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСРаботниками.Остатки(&КонецПериодаРегистрации, " + УсловиеНаФизлицоТекст + ") КАК ВзаиморасчетыСРаботниками
			|ПО Основной.Физлицо = ВзаиморасчетыСРаботниками.Физлицо
			|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|	ВзаиморасчетыСРаботникамиОрганизаций.Физлицо,
			|	СУММА(ВзаиморасчетыСРаботникамиОрганизаций.СуммаВзаиморасчетов) КАК УжеНачисленоДоДоначисления
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизаций
			|ГДЕ
			|	ВзаиморасчетыСРаботникамиОрганизаций.Организация = &парамОрганизация
			|	И ВзаиморасчетыСРаботникамиОрганизаций.Регистратор <> &парамРегистратор
			|	И ВзаиморасчетыСРаботникамиОрганизаций.ПериодВзаиморасчетов = &парамПериодРегистрации
			|	И ВзаиморасчетыСРаботникамиОрганизаций.ВидДвижения = &парамПриход
			|
			|СГРУППИРОВАТЬ ПО
			|	ВзаиморасчетыСРаботникамиОрганизаций.Физлицо) КАК ВзаиморасчетыСРаботникамиОрганизаций
			|ПО Основной.Физлицо = ВзаиморасчетыСРаботникамиОрганизаций.Физлицо
			|ЛЕВОЕ СОЕДИНЕНИЕ (" + СуммарныйПроцентТекст + ") КАК СуммарныйПроцент
			|ПО Основной.Сотрудник = СуммарныйПроцент.Сотрудник
			|ЛЕВОЕ СОЕДИНЕНИЕ 
			|(ВЫБРАТЬ
			|	ГражданствоФизЛицСрезПоследних.ФизЛицо КАК ФизЛицо
			|	ИЗ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонецГода, " + УсловиеНаФизлицоТекст + ") КАК ГражданствоФизЛицСрезПоследних
			|	ГДЕ (ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРФ)) КАК НеРезиденты
			|ПО Основной.Физлицо = НеРезиденты.ФизЛицо";
			
			Запрос.УстановитьПараметр("парамКонецГода", КонецГода(ПериодРегистрации));
			Запрос.УстановитьПараметр("КонецПериодаРегистрации", ДобавитьМесяц(ПериодРегистрации, 1));
			Запрос.УстановитьПараметр("Доначисление", Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету);
			Запрос.УстановитьПараметр("Процентом", ПолучитьСписокНачисленийПроцентом());
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ВычетыКДоходамНДФЛ Тогда
			//vvv перепишем запрос, т.к. в противном случае, когда есть переходящая на след. год мат. помощь (начислена в декабре за январь) - мат. помощь
			//буд. периода учитывалась в составе льготы текущего года.
			Если РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Получить(Новый Структура("Организация", Организация)).РассчитыватьЛьготуПоПНПоПериодуДействия ТОгда
				ТекстЗапроса = ТекстЗапроса + "
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛОбороты
				|ПО Основной.Физлицо = НДФЛОбороты.ФизЛицо И Основной.Организация = НДФЛОбороты.Организация И Основной.ВидРасчета.КодДоходаНДФЛ = НДФЛОбороты.КодДохода
				|				И (НДФЛОбороты.Период МЕЖДУ НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, ГОД) И КОНЕЦПЕРИОДА(Основной.БазовыйПериодНачало, ГОД))
				|				И НДФЛОбороты.Физлицо В (ВЫБРАТЬ Физлицо ИЗ ВТФизлицаДляПроверки)
				//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛВычетыПоДоходам.СрезПоследних(&парамНачалоГода) КАК СведенияОСкидках
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛВычетыПоДоходам КАК СведенияОСкидках
				|ПО СведенияОСкидках.КодДохода = Основной.ВидРасчета.КодДоходаНДФЛ
				|	И СведенияОСкидках.Период=НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, ГОД)";
			Иначе
			//vvv	
				ТекстЗапроса = ТекстЗапроса + "
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛСведенияОДоходах.Обороты(&парамНачалоГода, &парамКонецМесяцаНалоговогоПериода, , ПериодРегистрации <= &парамПериодРегистрации И Организация = &парамОрганизация И КодДохода В (&ДоходыП28Ст217) И " + УсловиеНаФизлицоТекст +") КАК НДФЛОбороты
				|ПО Основной.Физлицо = НДФЛОбороты.ФизЛицо И Основной.Организация = НДФЛОбороты.Организация И Основной.ВидРасчета.КодДоходаНДФЛ = НДФЛОбороты.КодДохода
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛВычетыПоДоходам.СрезПоследних(&парамНачалоГода) КАК СведенияОСкидках
				|ПО СведенияОСкидках.КодДохода = Основной.ВидРасчета.КодДоходаНДФЛ";
			КонецЕсли;
			
			ДоходыП28Ст217 = Новый Массив;
			//ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2761);
			//ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2720);
			//ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2730);
			//ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2740);
			//ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2760);
			//ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2770);
			//ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2790);
			
			ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код1216);       //подарки
			ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код3114юр);      //подарки (не используется)
			ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код12122а);        //выигрыши призы
			ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код1218);        //мат пом со смертью
			ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код12117);        //мат пом
			ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код12124);        //мат пом подарки профсоюзы
			ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код12119);        //благотворит пом
			ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код3147);        //подарки до 18 лет (не используется)
			ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код3131);        //мат пом подарки надбавки пенсионерам (не испоьзуется)
			
			Запрос.УстановитьПараметр("ДоходыП28Ст217", ДоходыП28Ст217);
			Запрос.УстановитьПараметр("парамНачалоГода",НачалоГода(ПериодРегистрации));
			Запрос.УстановитьПараметр("парамКонецМесяцаНалоговогоПериода", КонецМесяца(ПериодРегистрации));
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ " + ВнешнееУсловие;
		
		//vvv
		Если НеобходимыеДанные.ВычетыКДоходамНДФЛ И РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Получить(Новый Структура("Организация", Организация)).РассчитыватьЛьготуПоПНПоПериодуДействия ТОгда
			ТекстЗапроса = ТекстЗапроса + "
			|СГРУППИРОВАТЬ ПО
			|Основной.Регистратор,
			|Основной.НомерСтроки,
			|Основной.Сотрудник.Наименование,
			|Основной.Сотрудник,
			|Основной.Сотрудник.Физлицо,
			|Основной.ВидРасчета,
			|Истина,
			|Основной.ВидРасчета.Наименование,
			|Основной.ВидРасчета.СпособРасчета,
			|Основной.ВидРасчета.КодДоходаНДФЛ,
			|ЕСТЬNULL(СведенияОСкидках.ГодовойВычет, 0),
			|ЕСТЬNULL(СведенияОСкидках.НормативЗатрат, 0),
			|ЕСТЬNULL(СведенияОСкидках.КратностьВычета, 0)
			|";
			Если НеобходимыеДанные.КоличествоБазовыхВеличин Тогда
				ТекстЗапроса = ТекстЗапроса + ", 
				|ЕСТЬNULL(КоличествоБазовых.Величина, 0)";	
			КонецЕсли;
			
			Если НеобходимыеДанные.РазмерБазовойВеличины Тогда
				ТекстЗапроса = ТекстЗапроса + ", 
				|ЕСТЬNULL(ДанныеОРазмереБазовойВеличины.Размер, 0)";	
			КонецЕсли;
		КонецЕсли;
		//
	ИначеЕсли 	ИмяРегистра = "УправленческиеНачисления" или 
			ИмяРегистра = "УправленческиеУдержания" Тогда 
			
		ТекстЗапроса = 
		"ВЫБРАТЬ 
		|Основной.Регистратор Как Регистратор,
		|Основной.НомерСтроки Как НомерСтроки,
		|Основной.Физлицо Как Сотрудник,
		|Основной.Физлицо.Наименование Как СотрудникНаименование, 
		|Основной.ВидРасчета Как ВидРасчета,
		|Основной.ВидРасчета.Наименование Как ВидРасчетаНаименование,
		|Основной.ВидРасчета.СпособРасчета Как СпособРасчета";
		
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("Сотрудник");
			ПоляЗапроса.Добавить("СотрудникНаименование");
			ПоляЗапроса.Добавить("СпособРасчета");
			ПоляЗапроса.Добавить("ВидРасчета");
			ПоляЗапроса.Добавить("ВидРасчетаНаименование");
		КонецЕсли;
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
			
			Если КоличествоПоказателей = 0 Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				| 0 КАК КоличествоПоказателей,";
			Иначе
				ТекстЗапроса = ТекстЗапроса + ",
				| Показатели.КоличествоПоказателей КАК КоличествоПоказателей,";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			| Основной.ВидРасчета.ФормулаРасчета КАК ФормулаРасчета";
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("КоличествоПоказателей");
				ПоляЗапроса.Добавить("ФормулаРасчета");
			КонецЕсли;
			
			Для СчПоказателей = 1 По КоличествоПоказателей Цикл
				Если СчПоказателей > 6 Тогда					
					ПоказательТекст = СтрЗаменить(Показатель1ТекстПредопределенный, "Показатель1", "Показатель"+СчПоказателей);
				ИначеЕсли СчПоказателей > 1 Тогда
					ПоказательТекст = СтрЗаменить(Показатель1Текст, "Показатель1", "Показатель"+СчПоказателей);
				Иначе
					ПоказательТекст = Показатель1Текст;
				КонецЕсли;					
				
				ТекстЗапроса = ТекстЗапроса + ", 
				|Показатели.Показатель" + СчПоказателей+".Наименование Как Показатель" + СчПоказателей + "Наименование,
			   	|" + ПоказательТекст + " Как Показатель"+СчПоказателей;
				
				Если КомментироватьРасчет Тогда
					ПоляЗапроса.Добавить("Показатель" + СчПоказателей + "Наименование");
					ПоляЗапроса.Добавить("Показатель" + СчПоказателей);
				КонецЕсли;
			КонецЦикла;			
			
		КонецЕсли;
		
		Если ИмяРегистра = "УправленческиеНачисления" Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|Основной.ВидРасчета.ЗачетОтработанногоВремени Как ЗачетОтработанногоВремени,
			|Основной.ВидУчетаВремени Как ВидУчетаВремени";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ЗачетОтработанногоВремени");
				ПоляЗапроса.Добавить("ВидУчетаВремени");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ОтработаноВремени Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия, 0) КАК ОтработаноВремени,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА Основной.ВидУчетаВремени = &ПоДням
			|				ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|			ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|			КОНЕЦ, 0) КАК ОтработаноДней,
			|	ЕСТЬNULL(ВЫБОР	КОГДА Основной.ВидУчетаВремени = &ПоДням
			|		ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|		ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|		КОНЕЦ, 0) КАК ОтработаноЧасов,
			|	ЕСТЬNULL(ДанныеГрафика.ПроизводственныйКалендарьПятидневкаЧасыФактическийПериодДействия,0) КАК ОтработаноЧасовПроизводственныйГрафик,
			|	ЕСТЬNULL(ДанныеГрафика.ПроизводственныйКалендарьПятидневкаФактическийПериодДействия, 0) КАК ОтработаноВремениПроизводственныйГрафик,
			|	ЕСТЬNULL(ВремяПоТабелю.ОтработаноЧасовПоТабелюОтклонение,0) КАК ОтработаноЧасовПоТабелюОтклонение";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ОтработаноВремени");
				ПоляЗапроса.Добавить("ОтработаноДней");
				ПоляЗапроса.Добавить("ОтработаноЧасов");
				ПоляЗапроса.Добавить("ОтработаноВремениПроизводственныйГрафик");
				ПоляЗапроса.Добавить("ОтработаноЧасовПроизводственныйГрафик");
				//ПоляЗапроса.Добавить("ОтработаноЧасовПоТабелю");
				ПоляЗапроса.Добавить("ОтработаноЧасовПоТабелюОтклонение");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимаБаза Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|База.РезультатБаза";
		КонецЕсли;
		
		Если НеобходимГрафик Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ) КАК ОшибкаВводаИндивидуальногоГрафикаРаботы,
			|	ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ) КАК ОшибкаВводаОтработанногоВремени,
			|	ЛОЖЬ КАК ПредупреждениеНесоответствияТабеляИНачисления,
			|	Основной.ГрафикРаботы.Наименование КАК ГрафикРаботыНаименование";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ГрафикРаботыНаименование");
				ПоляЗапроса.Добавить("ОшибкаВводаИндивидуальногоГрафикаРаботы");
				ПоляЗапроса.Добавить("ОшибкаВводаОтработанногоВремени");
				ПоляЗапроса.Добавить("ПредупреждениеНесоответствияТабеляИНачисления");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.Стаж Тогда
			// стаж работы на предприятии
			ТекстЗапроса = ТекстЗапроса + ", 
			|РАЗНОСТЬДАТ(ДанныеОСтаже.Период, &ПериодРегистрации, МЕСЯЦ) КАК Стаж";			
			
		КонецЕсли;
		
		Если НеобходимыеДанные.СдельныйЗаработок Тогда
			// размер сдельного заработка
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ДанныеОСдельномЗаработке.ОшибкаВводаФактическойВыработки, ЛОЖЬ)
			|			ТОГДА NULL
			|		ИНАЧЕ ДанныеОСдельномЗаработке.СуммаЗаработка 
			|	КОНЕЦ КАК РазмерСдельногоЗаработка,
			//vvv
			|	ДанныеОСдельномЗаработке.ПроцентПремии, 
			|	ДанныеОСдельномЗаработке.КоэффициентСтажаСделка, 
			|	ДанныеОСдельномЗаработке.КТУ, 
			//
			|ЕСТЬNULL(ДанныеОСдельномЗаработке.ОшибкаВводаФактическойВыработки, ЛОЖЬ) КАК ОшибкаВводаФактическойВыработки";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ОшибкаВводаФактическойВыработки");
			КонецЕсли;
		КонецЕсли;
		
				
		ТекстЗапроса = ТекстЗапроса + "		
		|ИЗ РегистрРасчета." + ИмяРегистра + " Как Основной";
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
			Если КоличествоПоказателей > 0 Тогда
				ТекстЗапроса = ТекстЗапроса + "			
    	        |ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
				|ПО Показатели.ВидРасчета = Основной.ВидРасчета";
			КонецЕсли;
			
			Для Каждого ВидСтажа Из МассивСтажей Цикл
				
				КодСтажа = "Стаж_"+СокрП(ВидСтажа.Значение); // код стажа
				Запрос.УстановитьПараметр(КодСтажа, ВидСтажа.Ключ); // ссылка на вид стажа
				
				ТекстЗапроса = ТекстЗапроса + "
				
				|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Стажи КАК "+ КодСтажа + "
				|	ПО Основной.Сотрудник.ФизЛицо = " + КодСтажа + ".Ссылка И
				|	&" + КодСтажа + " = "+КодСтажа+".ВидСтажа";
				
				
			КонецЦикла;

			Если ИмяРегистра = "УправленческиеНачисления" И НеобходимыеДанные.ВремяВКалендарныхДнях Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.УправленческиеНачисления.ФактическийПериодДействия(Регистратор = &парамРегистратор) КАК ФактическийПериодДействия
				|ПО ФактическийПериодДействия.НомерСтроки = Основной.НомерСтроки";
			КонецЕсли;
		КонецЕсли;
								
		Если НеобходимаБаза Тогда
			// присоединяем к базе
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета." + ИмяРегистра + ".БазаУправленческиеНачисления(&парамИзмеренияОсновного, &парамИзмеренияБазового, , " + Условие + ") Как База
			|ПО База.Регистратор = Основной.Регистратор И База.НомерСтроки = Основной.НомерСтроки";
		КонецЕсли;
		
		Если НеобходимыеДанные.ВсегоОтработаноВремени Тогда
			
			Запрос.Текст = ФизлицаПериодыДействия;
			Запрос.Выполнить();
			
			Запрос.Текст = УпрВсегоОтработаноВремени;
			Запрос.Выполнить();
			
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТУпрВсегоОтработаноВремени КАК ВсегоОтработаноВремени
			|ПО Основной.НомерСтроки = ВсегоОтработаноВремени.НомерСтроки
			|";
			
		КонецЕсли;
		
		Если НеобходимГрафик Тогда
			Запрос.УстановитьПараметр("ПоДням", Перечисления.ВидыУчетаВремени.ПоДням);
			Запрос.УстановитьПараметр("ПоЧасам", Перечисления.ВидыУчетаВремени.ПоЧасам);
			Запрос.УстановитьПараметр("ПоВечернимЧасам", Перечисления.ВидыУчетаВремени.ПоВечернимЧасам);
			Запрос.УстановитьПараметр("ПоНочнымЧасам", Перечисления.ВидыУчетаВремени.ПоНочнымЧасам);
			Запрос.УстановитьПараметр("ПустойВидИспользованияРабочегоВремени", Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка());
			Запрос.УстановитьПараметр("ОтработанноеВПределахНормы", Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
			Запрос.УстановитьПараметр("ЦелодневноеНеотработанное", Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
			Запрос.УстановитьПараметр("ЧасовоеНеотработанное", Перечисления.ВидыВремени.ЧасовоеНеотработанное);
			Запрос.УстановитьПараметр("ЧасовоеОтработанноеВПределахНормы", Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
			
			Запрос.Текст = УпрВремяПоТабелюТекст;
			Запрос.Выполнить();
			
			Запрос.Текст = УпрОтработаноПоВидуВремениДляПоказателейТекст;
			Запрос.Выполнить();
			
			Запрос.Текст = УпрСводныеИндивидуальныеГрафикиТекст;
			Запрос.Выполнить();
			
			Запрос.Текст = УпрВремяВведенноеВЦеломЗаПериодТекст;
			Запрос.Выполнить();
			
			// присоединяем к данным графика
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета." + ИмяРегистра + ".ДанныеГрафика(" + Условие +  ") Как ДанныеГрафика
			|ПО Основной.Регистратор = ДанныеГрафика.Регистратор И Основной.НомерСтроки = ДанныеГрафика.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТУпрВремяПоТабелю КАК ВремяПоТабелю
			|ПО Основной.НомерСтроки = ВремяПоТабелю.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТУпрСводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
			|ПО Основной.НомерСтроки = СводныеИндивидуальныеГрафики.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТУпрОтработаноПоВидуВремениДляПоказателей КАК ОтработаноПоВидуВремениНачисления
			|ПО Основной.НомерСтроки = ОтработаноПоВидуВремениНачисления.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТУпрВремяВведенноеВЦеломЗаПериод КАК ВремяВведенноеВЦеломЗаПериод
			|ПО Основной.НомерСтроки = ВремяВведенноеВЦеломЗаПериод.НомерСтроки
			|";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.Стаж Тогда
			// присоединение к данным о стаже
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК ДанныеОСтаже
			|ПО ДанныеОСтаже.Физлицо = Основной.Физлицо
			|И	ДанныеОСтаже.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)";
			
			Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
		КонецЕсли;
		
		Если НеобходимыеДанные.СдельныйЗаработок Тогда
			
			Запрос.Текст = СдельныйЗаработокКомпанииТекст;
			Запрос.Выполнить();
			СдельныйЗаработокКомпанииТекст = "ВТСдельныйЗаработокКомпании";
			
			// присоединяем данные о сдельном заработке
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+СдельныйЗаработокКомпанииТекст+" КАК ДанныеОСдельномЗаработке
			|ПО Основной.НомерСтроки = ДанныеОСдельномЗаработке.ОсновнойНомерСтроки";
			
		КонецЕсли;
				
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ " + ВнешнееУсловие;


	ИначеЕсли ИмяРегистра = "УдержанияРаботниковОрганизаций" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ 
		|	Основной.Регистратор Как Регистратор, 
		|	Основной.НомерСтроки Как НомерСтроки, 
		|	Основной.Физлицо Как Сотрудник, 
		|	Основной.Физлицо.Наименование Как СотрудникНаименование, 
		|	Основной.ВидРасчета Как ВидРасчета,
		|	Истина Как ВидРасчетаПериодДействияБазовый,
		|	Основной.ВидРасчета.Наименование Как ВидРасчетаНаименование,
		|	Основной.ВидРасчета.СпособРасчета Как СпособРасчета,
		|	Основной.ДокументОснование КАК ДокументОснование,
		|	Основной.Получатель КАК Получатель1,
		|	Основной.ПорядокИсчисленияИздержек КАК ПорядокИсчисленияИздержек1";
		
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("Сотрудник");
			ПоляЗапроса.Добавить("СотрудникНаименование");
			ПоляЗапроса.Добавить("ВидРасчета");
			ПоляЗапроса.Добавить("ВидРасчетаНаименование");
			ПоляЗапроса.Добавить("СпособРасчета");
			ПоляЗапроса.Добавить("ВидРасчетаПериодДействияБазовый");
		КонецЕсли;
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
			
			Если КоличествоПоказателей = 0 Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				| 0 КАК КоличествоПоказателей,";
			Иначе
				ТекстЗапроса = ТекстЗапроса + ",
				| Показатели.КоличествоПоказателей КАК КоличествоПоказателей,";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			| Основной.ВидРасчета.ФормулаРасчета КАК ФормулаРасчета";
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("КоличествоПоказателей");
				ПоляЗапроса.Добавить("ФормулаРасчета");
			КонецЕсли;
			
			Для СчПоказателей = 1 По КоличествоПоказателей Цикл
				Если СчПоказателей > 6 Тогда					
					ПоказательТекст = СтрЗаменить(Показатель1ТекстПредопределенный, "Показатель1", "Показатель"+СчПоказателей);
				ИначеЕсли СчПоказателей > 1 Тогда
					ПоказательТекст = СтрЗаменить(Показатель1Текст, "Показатель1", "Показатель"+СчПоказателей);
				Иначе
					ПоказательТекст = Показатель1Текст;
				КонецЕсли;					
				
				ТекстЗапроса = ТекстЗапроса + ", 
				|Показатели.Показатель" + СчПоказателей+".Наименование Как Показатель" + СчПоказателей + "Наименование,
			   	|" + ПоказательТекст + " Как Показатель"+СчПоказателей;
				
				Если КомментироватьРасчет Тогда
					ПоляЗапроса.Добавить("Показатель" + СчПоказателей + "Наименование");
					ПоляЗапроса.Добавить("Показатель" + СчПоказателей);
				КонецЕсли;
			КонецЦикла;			
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ПределПоДокументуОснованию Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	Основной.ДокументОснование.Предел Как ПределПоДокументуОснованию";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ПределПоДокументуОснованию");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимаБаза Тогда
			// если присоединяем к базе
            ТекстЗапроса = ТекстЗапроса + ",
            |	База.РезультатБаза КАК РезультатБаза";
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РезультатБаза");
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию Тогда
			// если присоединяем к базе
			ТекстЗапроса = ТекстЗапроса + ",
			|	НакопленныеДанные.УжеНачисленоВТекущемПериоде,
			|	НакопленныеДанные.УжеНачисленоЗаВсюИсторию";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("УжеНачисленоВТекущемПериоде");
				ПоляЗапроса.Добавить("УжеНачисленоЗаВсюИсторию");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ИсчисленныйНДФЛ Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ИсчисленныйНДФЛ.ИсчисленныйНалог Как ИсчисленныйНалог";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ИсчисленныйНалог");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.СреднийЗаработок Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ЕСТЬNULL(ДанныеДляРасчетаСреднего.ЧислоМесяцев,0) Как ЧислоМесяцев, 
			|	ЕСТЬNULL(ДанныеДляРасчетаСреднего.ОтработаноДней,0) Как ОтработаноДнейПоСреднему, 
			|	ЕСТЬNULL(ДанныеДляРасчетаСреднего.ОтработаноЧасов,0) Как ОтработаноЧасовПоСреднему, 
			|	ДанныеДляРасчетаСреднего.СреднийЗаработок Как СреднийЗаработок,
			|	Основной.РучнойРасчетСреднегоЗаработка Как РучнойРасчетСреднегоЗаработка, 
			|	Основной.РазмерСреднегоЗаработка Как РазмерСреднегоЗаработка";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ОтработаноДнейПоСреднему");
				ПоляЗапроса.Добавить("ОтработаноЧасовПоСреднему");
				ПоляЗапроса.Добавить("СреднийЗаработок");
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимыеДанные.СреднийЗаработокОтпуска Тогда
			// выбираем число дней по шестидневке или календарных рабочих дней 
			// из производственного календаря
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ВЫБОР КОГДА Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке) ТОГДА 6 ИНАЧЕ 7 КОНЕЦ КАК ЧислоДнейВНеделе,
			|	Основной.ГрафикРаботы.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели";
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ЧислоДнейВНеделе");
				ПоляЗапроса.Добавить("ДлительностьРабочейНедели");
			КонецЕсли;
			
		КонецЕсли;
			
		Если НеобходимыеДанные.ПочтовыеПереводы Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ЕСТЬNULL(ПочтовыеПереводы.РазмерПочтовогоПеревода,0) КАК РазмерПочтовогоПеревода,
			|	ЕСТЬNULL(ПочтовыеПереводы.ПоТарифу, Ложь) КАК ПоТарифу,
			|	ЕСТЬNULL(ПочтовыеПереводы.Процент, 0) КАК Процент,
			|	ПочтовыеПереводы.Получатель КАК Получатель,
			|	ПочтовыеПереводы.ПорядокИсчисленияИздержек КАК ПорядокИсчисленияИздержек,
			|	ЕСТЬNULL(ПочтовыеПереводы.СуммаАлиментов, 0) КАК СуммаАлиментов";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПочтовогоПеревода");
				ПоляЗапроса.Добавить("ПоТарифу");
				ПоляЗапроса.Добавить("Процент");
				ПоляЗапроса.Добавить("Получатель");
				ПоляЗапроса.Добавить("ПорядокИсчисленияИздержек");
				ПоляЗапроса.Добавить("СуммаАлиментов");
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ПрожиточныйМинимум Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|ПрожиточныеМинимумы.Размер КАК ВеличинаПрожиточногоМинимума";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ВеличенаПрожиточногоМинимума");
			КонецЕсли;

		КонецЕсли;
	
	    //vvv
		Если НеобходимыеДанные.БПМ Тогда 
			ТекстЗапроса = ТекстЗапроса + ", 
			|ЕСТЬNULL(ДанныеОРазмереБПМ.Размер,0) КАК РазмерБПМ";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерБПМ");
			КонецЕсли;
		КонецЕсли;
		//
		
		ТекстЗапроса = ТекстЗапроса + "
		|	ИЗ РегистрРасчета."+ИмяРегистра+" Как Основной";
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда

			ТекстЗапроса = ТекстЗапроса + "			
            |ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
			|ПО Показатели.ВидРасчета = Основной.ВидРасчета";
			
			Для Каждого ВидСтажа Из МассивСтажей Цикл
				
				КодСтажа = "Стаж_"+СокрП(ВидСтажа.Значение); // код стажа
				Запрос.УстановитьПараметр(КодСтажа, ВидСтажа.Ключ); // ссылка на вид стажа
				
				ТекстЗапроса = ТекстЗапроса + "
				
				|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Стажи КАК "+ КодСтажа + "
				|	ПО Основной.Сотрудник.ФизЛицо = " + КодСтажа + ".Ссылка И
				|	&" + КодСтажа + " = "+КодСтажа+".ВидСтажа";
				
				
			КонецЦикла;

			
		КонецЕсли;
		
		Если НеобходимыеДанные.Стаж Тогда
			// присоединение к данным о стаже
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеОСтаже			
			|ПО ДанныеОСтаже.Сотрудник.ФизЛицо = Основной.Физлицо
			|И	ДанныеОСтаже.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)";
			
			Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
		КонецЕсли;
		
		// если перерасчет - нужно сузить выборку 
		Если Перерасчет И Физлица = Неопределено Тогда
			// перерасчет по всем физлицам перерасчета
			ТекстЗапроса = ТекстЗапроса + "
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизлицаДляПерерасчета КАК ФизлицаДляПерерасчета
			|	ПО ФизлицаДляПерерасчета.Физлицо = Основной.Физлицо";
					
		КонецЕсли;
		
		Если НеобходимаБаза Тогда
            
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Удержания.Регистратор КАК Регистратор,
			|	Удержания.НомерСтроки КАК НомерСтроки,
			|	Удержания.ФизЛицо,
			|	Удержания.ПериодРегистрации,
			|	Удержания.Организация,
			|	Удержания.БазовыйПериодНачало,
			|	БазовыеВидыРасчета.ВидРасчета,
			|	Удержания.ПорядокРасчетаБазы,
			|	Удержания.БазовыйПериодКонец
			|ПОМЕСТИТЬ ВТ_ЗаписиУдержаний
			|ИЗ
			|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Удержания
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|		ПО Удержания.ВидРасчета = БазовыеВидыРасчета.Ссылка
			|ГДЕ
			|	Удержания.ВидРасчета.КатегорияНачисления = &парамКатегорияНачисления
			|	И Удержания.Регистратор = &парамРегистратор
			|	И Удержания.Авторасчет
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Регистратор,
			|	НомерСтроки";
			Запрос.Выполнить();
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Удержания.Регистратор КАК Регистратор,
			|	Удержания.НомерСтроки КАК НомерСтроки,
			|	Удержания.ФизЛицо,
			|	Удержания.ПериодРегистрации КАК ПериодРегистрации,
			|	Удержания.Организация,
			|	Удержания.БазовыйПериодНачало,
			|	Удержания.ВидРасчета,
			|	Удержания.ПорядокРасчетаБазы,
			|	Удержания.БазовыйПериодКонец,
			|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
			|ПОМЕСТИТЬ ВТ_Удержания
			|ИЗ
			|	ВТ_ЗаписиУдержаний КАК Удержания
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|		ПО Удержания.ФизЛицо = СотрудникиОрганизаций.Физлицо
			|			И Удержания.Организация = СотрудникиОрганизаций.Организация
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ПериодРегистрации,
			|	Сотрудник";
			Запрос.Выполнить();
			
			
            Запрос.Текст = 
            "ВЫБРАТЬ
            |	СУММА(База.РезультатБаза) КАК РезультатБаза,
            |	База.Регистратор КАК Регистратор,
            |	База.НомерСтроки КАК НомерСтроки
            |ПОМЕСТИТЬ ВТБаза
            |ИЗ
            |	(
			|	ВЫБРАТЬ
			//vvv
            //|		База.Результат КАК РезультатБаза,
			|		База.Результат / ВЫБОР КОГДА База.ПериодРегистрации<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК РезультатБаза,
			//
            |		Основной.Регистратор КАК Регистратор,
            |		Основной.НомерСтроки КАК НомерСтроки
            |	ИЗ
            |		ВТ_Удержания КАК Основной
            |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК База
            |			ПО Основной.ПериодРегистрации = База.ПериодРегистрации
            |				И Основной.Сотрудник = База.Сотрудник
            |				И Основной.Организация = База.Организация
            |				И Основной.БазовыйПериодНачало <= База.ПериодДействияНачало
            |				И (Основной.ВидРасчета = База.ВидРасчета)
            |	ГДЕ
            |		Основной.ПорядокРасчетаБазы = &парамПриПриемеНаРаботу
            |		И База.ВидРасчета ЕСТЬ НЕ NULL 
            |	
            |	ОБЪЕДИНИТЬ ВСЕ
            |	
            |	ВЫБРАТЬ
			//vvv
            //|		База.Результат,
			|		База.Результат / ВЫБОР КОГДА База.ПериодРегистрации<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ,
			//
            |		Основной.Регистратор,
            |		Основной.НомерСтроки
            |	ИЗ
            |		ВТ_Удержания КАК Основной
            |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК База
            |			ПО (Основной.ПериодРегистрации = НАЧАЛОПЕРИОДА(База.ПериодРегистрации, МЕСЯЦ))
            |				И Основной.Сотрудник = База.Сотрудник
            |				И Основной.Организация = База.Организация
            |				И Основной.БазовыйПериодНачало <= База.ПериодРегистрации
            |				И (Основной.ВидРасчета = База.ВидРасчета)
            |	ГДЕ
            |		Основной.ПорядокРасчетаБазы = &парамПриПриемеНаРаботу
            |		И База.ВидРасчета ЕСТЬ НЕ NULL 
            |	
            |	ОБЪЕДИНИТЬ ВСЕ
            |	
            |	ВЫБРАТЬ
			//vvv
            //|		База.Результат,
			|		База.Результат / ВЫБОР КОГДА База.ПериодРегистрации<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ,
			//
            |		Основной.Регистратор,
            |		Основной.НомерСтроки
            |	ИЗ
            |		ВТ_Удержания КАК Основной
            |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК База
            |			ПО Основной.ПериодРегистрации = База.ПериодРегистрации
            |				И Основной.Сотрудник = База.Сотрудник
            |				И Основной.Организация = База.Организация
            |				И Основной.БазовыйПериодКонец >= База.ПериодДействияНачало
            |				И (Основной.ВидРасчета = База.ВидРасчета)
            |	ГДЕ
            |		Основной.ПорядокРасчетаБазы = &парамПриУвольнении
            |		И База.ВидРасчета ЕСТЬ НЕ NULL 
            |	
            |	ОБЪЕДИНИТЬ ВСЕ
            |	
            |	ВЫБРАТЬ
			//vvv
            //|		База.Результат,
			|		База.Результат / ВЫБОР КОГДА База.ПериодРегистрации<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ,
			//
            |		Основной.Регистратор,
            |		Основной.НомерСтроки
            |	ИЗ
            |		ВТ_Удержания КАК Основной
            |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК База
            |			ПО (Основной.ПериодРегистрации = НАЧАЛОПЕРИОДА(База.ПериодРегистрации, МЕСЯЦ))
            |				И Основной.Сотрудник = База.Сотрудник
            |				И Основной.Организация = База.Организация
            |				И Основной.БазовыйПериодКонец >= База.ПериодРегистрации
            |				И (Основной.ВидРасчета = База.ВидРасчета)
            |	ГДЕ
            |		Основной.ПорядокРасчетаБазы = &парамПриУвольнении
            |		И База.ВидРасчета ЕСТЬ НЕ NULL 
            |	
            |	ОБЪЕДИНИТЬ ВСЕ
            |	
            |	ВЫБРАТЬ
			//vvv
            //|		База1.РезультатБаза,
			|		База1.РезультатБаза / ВЫБОР КОГДА База1.ПериодРегистрацииРазрез<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ,
		    //
            |		База1.Регистратор,
            |		База1.НомерСтроки
            |	ИЗ
            |		РегистрРасчета.УдержанияРаботниковОрганизаций.БазаОсновныеНачисленияРаботниковОрганизаций(
            |				&парамИзмеренияОсновного,
            |				&парамИзмеренияБазового,
            |				&парамРазрезы,
            |				 " + Условие + "
            |					И ПорядокРасчетаБазы = &парамЗаВесьПериод) КАК База1
            |	ГДЕ
            |		((НЕ База1.Сторно)
            |				ИЛИ База1.ПериодРегистрацииРазрез < База1.ПериодРегистрации)
            |	
            |	ОБЪЕДИНИТЬ ВСЕ
            |	
            |	ВЫБРАТЬ
			//vvv
            //|		База2.РезультатБаза,
			|		База2.РезультатБаза / ВЫБОР КОГДА База2.ПериодРегистрацииРазрез<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ,
			//
            |		База2.Регистратор,
            |		База2.НомерСтроки
            |	ИЗ
            |		РегистрРасчета.УдержанияРаботниковОрганизаций.БазаДополнительныеНачисленияРаботниковОрганизаций(
            |				&парамИзмеренияОсновного,
            |				&парамИзмеренияБазового,
            |				&парамРазрезы,
            |				 " + Условие + "
            |					И ПорядокРасчетаБазы = &парамЗаВесьПериод) КАК База2
            |	ГДЕ
            |		((НЕ База2.Сторно)
            |				ИЛИ База2.ПериодРегистрацииРазрез < База2.ПериодРегистрации)) КАК База
            |СГРУППИРОВАТЬ ПО
            |	База.Регистратор,
            |	База.НомерСтроки";
            
            Разрезы = Новый Массив;
            Разрезы.Добавить("ПериодРегистрации");
			Запрос.УстановитьПараметр("парамРазрезы", Разрезы);
			Запрос.УстановитьПараметр("парамПриПриемеНаРаботу", Перечисления.ПорядокРасчетаБазы.ПриПриемеНаРаботу);
			Запрос.УстановитьПараметр("парамПриУвольнении", Перечисления.ПорядокРасчетаБазы.ПриУвольнении);
			Запрос.УстановитьПараметр("парамЗаВесьПериод", Перечисления.ПорядокРасчетаБазы.ЗаВесьПериод);
            Запрос.Выполнить();
            
            ТекстЗапроса = ТекстЗапроса + "
            |		ЛЕВОЕ СОЕДИНЕНИЕ ВТБаза Как База
            |		ПО База.Регистратор = Основной.Регистратор И База.НомерСтроки = Основной.НомерСтроки
            |";
				
		КонецЕсли;
		
		Если НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию Тогда
			Запрос.Текст = НакопленныеДанныеТекст;
			Запрос.Выполнить();
			
			// присоединяем сводные данные по документу основанию
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТНакопленныеДанные КАК НакопленныеДанные
			|ПО 
			|	НакопленныеДанные.Физлицо = Основной.Физлицо
			|	И НакопленныеДанные.ВидРасчета = Основной.ВидРасчета
			|	И НакопленныеДанные.ДокументОснование = Основной.ДокументОснование";
		КонецЕсли;

		
		Если НеобходимыеДанные.ИсчисленныйНДФЛ Тогда
			МассивУдержанийИЛ = Новый Массив;
			МассивУдержанийИЛ.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом);
			МассивУдержанийИЛ.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела);
			МассивУдержанийИЛ.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела);
			
			Запрос.УстановитьПараметр("парамМассивУдержанийИЛ", МассивУдержанийИЛ);
			Запрос.УстановитьПараметр("парамВидСтроки", Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление);
			Запрос.УстановитьПараметр("парамСтавка35", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35);
			
			Запрос.Текст = ИсчисленныйНДФЛТекст;
			Запрос.Выполнить();
			
			// присоединяем данные по исчисленному НДФЛ
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТИсчисленныйНДФЛ КАК ИсчисленныйНДФЛ
			|ПО Основной.НомерСтроки = ИсчисленныйНДФЛ.НомерСтроки";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.СреднийЗаработок Тогда
			
			
			Запрос.УстановитьПараметр("ПоЗаработку", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
			Запрос.УстановитьПараметр("ПоЗаработкуБЛ", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
			Запрос.УстановитьПараметр("ПоЗаработкуОтпуск", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск);
			Запрос.УстановитьПараметр("ПоПремиям", ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
			Запрос.УстановитьПараметр("ПоФиксПремиям", ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
			//vvv
			ВидРасчетаГодоваяПремия = Новый Массив;
			ВидРасчетаГодоваяПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии);
			ВидРасчетаГодоваяПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ);
			ВидРасчетаГодоваяПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииОтпуск);
			Запрос.УстановитьПараметр("ПоГодовойПремии", ВидРасчетаГодоваяПремия);			
			
			ВидРасчетаПремия=Новый Массив;
			ВидРасчетаПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
			ВидРасчетаПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ);
			ВидРасчетаПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямОтпуск);			
			Запрос.УстановитьПараметр("ПоПремиям", ВидРасчетаПремия);
			
			ВидРасчетаФиксПремия=Новый Массив;
			ВидРасчетаФиксПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
			ВидРасчетаФиксПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ);
			ВидРасчетаФиксПремия.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямОтпуск);
			
			Запрос.УстановитьПараметр("ПоФиксПремиям", ВидРасчетаФиксПремия);
			//
			ПоСреднемуЗаработкуФСС = Новый Массив(2);
			ПоСреднемуЗаработкуФСС[0] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС;
			Запрос.УстановитьПараметр("ПоСреднемуЗаработкуФСС", ПоСреднемуЗаработкуФСС);
			
			Запрос.Текст = ДанныеОСреднемЗаработкеТекст;
			Запрос.Выполнить();
			ДанныеОСреднемЗаработкеТекст = "ВТДанныеОСреднемЗаработке";
			
			// присоединяем данные для расчета среднего заработка
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+ДанныеОСреднемЗаработкеТекст+" КАК ДанныеДляРасчетаСреднего
			//vvv комментируем
			//|ПО Основной.Сотрудник = ДанныеДляРасчетаСреднего.Сотрудник И 
			|ПО Основной.Сотрудник.ФизЛицо = ДанныеДляРасчетаСреднего.ФизЛицо И 
			//
			|Основной.ВидРасчета.СпособРасчета = ДанныеДляРасчетаСреднего.СпособРасчета И 
			|Основной.ДатаНачалаСобытия = ДанныеДляРасчетаСреднего.ДатаНачалаСобытия И 
			|Основной.ПериодРасчетаСреднегоЗаработкаНачало = ДанныеДляРасчетаСреднего.ДатаНачалаРасчетногоПериода И 
			|Основной.ПериодРасчетаСреднегоЗаработкаОкончание = ДанныеДляРасчетаСреднего.ДатаОкончанияРасчетногоПериода";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ПочтовыеПереводы Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Основная.ФизЛицо КАК ФизЛицо,
			|	Основная.Организация КАК Организация,
			|	ВЫБОР
			|		КОГДА Дополнительная.Получатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА ДополнительнаяСт.ДокументОснование
			|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ИсполнительныйЛист.ПустаяСсылка)
			|	КОНЕЦ КАК ДокументОснование,
			|	ВЫБОР
			|		КОГДА Основная.ПорядокИсчисленияИздержек ССЫЛКА Справочник.ТарифыПочтовогоСбора
			|				И Основная.ПорядокИсчисленияИздержек <> ЗНАЧЕНИЕ(Справочник.ТарифыПочтовогоСбора.ПустаяСсылка)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ПоТарифу,
			|	ВЫБОР
			|		КОГДА Дополнительная.Получатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА ЕСТЬNULL(ДополнительнаяСт.Результат, 0)
			|		ИНАЧЕ ЕСТЬNULL(Дополнительная.Результат, 0)
			|	КОНЕЦ КАК СуммаАлиментов,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА Дополнительная.Получатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|				ТОГДА ВЫБОР
			|						КОГДА Основная.ПорядокИсчисленияИздержек В (ЗНАЧЕНИЕ(Справочник.ТарифыПочтовогоСбора.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
			|							ТОГДА ДополнительнаяСт.Результат
			|						ИНАЧЕ ВЫБОР
			|								КОГДА ДополнительнаяСт.Результат = 0
			|									ТОГДА 0
			|								ИНАЧЕ (ДополнительнаяСт.Результат - ЕСТЬNULL(ДополнительнаяСт.ЗначениеС, 0)) * ЕСТЬNULL(ДополнительнаяСт.Процент, 0) / 100 + ЕСТЬNULL(ДополнительнаяСт.Сумма, 0)
			|							КОНЕЦ
			|					КОНЕЦ
			|			КОГДА ТИПЗНАЧЕНИЯ(Основная.ПорядокИсчисленияИздержек) = ТИП(ЧИСЛО)
			|				ТОГДА Дополнительная.Результат
			|			КОГДА Основная.ПорядокИсчисленияИздержек ССЫЛКА Справочник.ТарифыПочтовогоСбора
			|				ТОГДА ВЫБОР
			|						КОГДА Дополнительная.Результат = 0
			|							ТОГДА 0
			|						ИНАЧЕ (Дополнительная.Результат - Дополнительная.ЗначениеС) * Дополнительная.Процент / 100 + Дополнительная.Сумма
			|					КОНЕЦ
			|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК РазмерПочтовогоПеревода,
			|	Дополнительная.Процент КАК Процент,
			|	ЕСТЬNULL(Основная.ПорядокИсчисленияИздержек, 0) КАК ПорядокИсчисленияИздержек,
			|	ЕСТЬNULL(Основная.Получатель, ЗНАЧЕНИЕ(Справочник.КОнтрагенты.ПустаяСсылка)) КАК Получатель
			|ПОМЕСТИТЬ ВТПочтовыеПереводы
			|ИЗ
			|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основная
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			Дополнительная.ПериодРегистрации КАК ПериодРегистрации,
			|			Дополнительная.ФизЛицо КАК ФизЛицо,
			|			Дополнительная.Организация КАК Организация,
			|			Дополнительная.ПорядокИсчисленияИздержек КАК ПорядокИсчисленияИздержек,
			|			Дополнительная.Получатель КАК Получатель,
			|			Дополнительная.ВидРасчета КАК ВидРасчета,
			|			РасчетБазыДляТарифа.БазаДляТарифа КАК Результат,
			|			ЕСТЬNULL(ВЫБОР
			|					КОГДА РазмерыТарифовПочтовогоСбора.Тариф.РасчетПоШкалеСПолнойСуммы
			|						ТОГДА 0
			|					ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеС
			|				КОНЕЦ, 0) КАК ЗначениеС,
			|			ВЫБОР
			|				КОГДА НЕ РазмерыТарифовПочтовогоСбора.Процент ЕСТЬ NULL 
			|					ТОГДА РазмерыТарифовПочтовогоСбора.Процент
			|				ИНАЧЕ Дополнительная.Показатель1
			|			КОНЕЦ КАК Процент,
			|			ЕСТЬNULL(РазмерыТарифовПочтовогоСбора.Сумма, 0) КАК Сумма
			|		ИЗ
			|			РегистрРасчета.УдержанияРаботниковОрганизаций КАК Дополнительная
			|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|					Дополнительная.ПериодРегистрации КАК ПериодРегистрации,
			|					Дополнительная.ФизЛицо КАК ФизЛицо,
			|					Дополнительная.Организация КАК Организация,
			|					СУММА(Дополнительная.Результат) КАК БазаДляТарифа,
			|					Дополнительная.ПорядокИсчисленияИздержек КАК ПорядокИсчисленияИздержек,
			|					Дополнительная.Получатель КАК Получатель
			|				ИЗ
			|					РегистрРасчета.УдержанияРаботниковОрганизаций КАК Дополнительная
			|				ГДЕ
			|					Дополнительная.Регистратор = &парамРегистратор
			|					И НЕ Дополнительная.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.КомиссионыйСбор))
			|				
			|				СГРУППИРОВАТЬ ПО
			|					Дополнительная.ПериодРегистрации,
			|					Дополнительная.ФизЛицо,
			|					Дополнительная.Организация,
			|					Дополнительная.ПорядокИсчисленияИздержек,
			|					Дополнительная.Получатель) КАК РасчетБазыДляТарифа
			|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыТарифовПочтовогоСбора КАК РазмерыТарифовПочтовогоСбора
			|					ПО РасчетБазыДляТарифа.БазаДляТарифа >= РазмерыТарифовПочтовогоСбора.ЗначениеС
			|						И (РасчетБазыДляТарифа.БазаДляТарифа < ВЫБОР
			|							КОГДА РазмерыТарифовПочтовогоСбора.ЗначениеПо = 0
			|								ТОГДА 99999999
			|							ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеПо
			|						КОНЕЦ)
			|						И РасчетБазыДляТарифа.ПорядокИсчисленияИздержек = РазмерыТарифовПочтовогоСбора.Тариф
			|				ПО Дополнительная.ПериодРегистрации = РасчетБазыДляТарифа.ПериодРегистрации
			|					И Дополнительная.ФизЛицо = РасчетБазыДляТарифа.ФизЛицо
			|					И Дополнительная.ПорядокИсчисленияИздержек = РасчетБазыДляТарифа.ПорядокИсчисленияИздержек
			|					И Дополнительная.Получатель = РасчетБазыДляТарифа.Получатель
			|		ГДЕ
			|			Дополнительная.Регистратор = &парамРегистратор
			|			И Дополнительная.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.КомиссионыйСбор))
			|		
			|		СГРУППИРОВАТЬ ПО
			|			Дополнительная.ПериодРегистрации,
			|			Дополнительная.ФизЛицо,
			|			Дополнительная.Организация,
			|			Дополнительная.ВидРасчета,
			|			Дополнительная.ПорядокИсчисленияИздержек,
			|			Дополнительная.Получатель,
			|			РасчетБазыДляТарифа.БазаДляТарифа,
			|			ВЫБОР
			|				КОГДА НЕ РазмерыТарифовПочтовогоСбора.Процент ЕСТЬ NULL 
			|					ТОГДА РазмерыТарифовПочтовогоСбора.Процент
			|				ИНАЧЕ Дополнительная.Показатель1
			|			КОНЕЦ,
			|			ЕСТЬNULL(РазмерыТарифовПочтовогоСбора.Сумма, 0),
			|			ЕСТЬNULL(ВЫБОР
			|					КОГДА РазмерыТарифовПочтовогоСбора.Тариф.РасчетПоШкалеСПолнойСуммы
			|						ТОГДА 0
			|					ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеС
			|				КОНЕЦ, 0)) КАК Дополнительная
			|		ПО Основная.ПериодРегистрации = Дополнительная.ПериодРегистрации
			|			И Основная.ФизЛицо = Дополнительная.ФизЛицо
			|			И Основная.Организация = Дополнительная.Организация
			|			И Основная.ВидРасчета = Дополнительная.ВидРасчета
			|			И Основная.Получатель = Дополнительная.Получатель
			|			И Основная.ПорядокИсчисленияИздержек = Дополнительная.ПорядокИсчисленияИздержек
			|			И (ВЫБОР
			|				КОГДА Основная.ПорядокИсчисленияИздержек В (ЗНАЧЕНИЕ(Справочник.ТарифыПочтовогоСбора.ПустаяСсылка))
			|					ТОГДА Основная.Показатель1 = Дополнительная.Процент
			|				ИНАЧЕ ИСТИНА
			|			КОНЕЦ)
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			Дополнительная.ПериодРегистрации КАК ПериодРегистрации,
			|			Дополнительная.ФизЛицо КАК ФизЛицо,
			|			Дополнительная.Организация КАК Организация,
			|			Дополнительная.ДокументОснование КАК ДокументОснование,
			|			Дополнительная.ВидРасчета КАК ВидРасчета,
			|			СУММА(Дополнительная.Результат) КАК Результат,
			|			ВЫБОР
			|				КОГДА РазмерыТарифовПочтовогоСбора.Тариф.РасчетПоШкалеСПолнойСуммы
			|					ТОГДА 0
			|				ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеС
			|			КОНЕЦ КАК ЗначениеС,
			|			РазмерыТарифовПочтовогоСбора.Процент КАК Процент,
			|			РазмерыТарифовПочтовогоСбора.Сумма КАК Сумма
			|		ИЗ
			|			РегистрРасчета.УдержанияРаботниковОрганизаций КАК Дополнительная
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыТарифовПочтовогоСбора КАК РазмерыТарифовПочтовогоСбора
			|				ПО Дополнительная.ПорядокИсчисленияИздержек = РазмерыТарифовПочтовогоСбора.Тариф
			|					И Дополнительная.Результат >= РазмерыТарифовПочтовогоСбора.ЗначениеС
			|					И (Дополнительная.Результат < ВЫБОР
			|						КОГДА РазмерыТарифовПочтовогоСбора.ЗначениеПо = 0
			|							ТОГДА 99999999
			|						ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеПо
			|					КОНЕЦ)
			|		ГДЕ
			|			Дополнительная.Регистратор = &парамРегистратор
			|			И НЕ Дополнительная.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор))
			|		
			|		СГРУППИРОВАТЬ ПО
			|			Дополнительная.ПериодРегистрации,
			|			Дополнительная.ФизЛицо,
			|			Дополнительная.Организация,
			|			Дополнительная.ДокументОснование,
			|			Дополнительная.ВидРасчета,
			|			РазмерыТарифовПочтовогоСбора.Процент,
			|			РазмерыТарифовПочтовогоСбора.Сумма,
			|			ВЫБОР
			|				КОГДА РазмерыТарифовПочтовогоСбора.Тариф.РасчетПоШкалеСПолнойСуммы
			|					ТОГДА 0
			|				ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеС
			|			КОНЕЦ) КАК ДополнительнаяСт
			|		ПО Основная.ПериодРегистрации = ДополнительнаяСт.ПериодРегистрации
			|			И Основная.ФизЛицо = ДополнительнаяСт.ФизЛицо
			|			И Основная.Организация = ДополнительнаяСт.Организация
			|			И Основная.ДокументОснование = ДополнительнаяСт.ДокументОснование
			|			И Основная.ВидРасчета <> ДополнительнаяСт.ВидРасчета
			|ГДЕ
			|	Основная.Регистратор = &парамРегистратор
			|	И (ЕСТЬNULL(Дополнительная.Результат, 0) <> 0
			|				И Дополнительная.Получатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ИЛИ Основная.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор)))
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ФизЛицо,
			|	ДокументОснование,
			|	Организация,
			|	Получатель";
			Запрос.Выполнить();
	
			// присоединяем данные для расчета почтового перевода
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТПочтовыеПереводы КАК ПочтовыеПереводы
			|ПО Основной.Физлицо = ПочтовыеПереводы.Физлицо И
			|Основной.Организация = ПочтовыеПереводы.Организация И
			|Основной.ДокументОснование = ПочтовыеПереводы.ДокументОснование И
			|Основной.Получатель = ПочтовыеПереводы.Получатель И
			|Основной.ПорядокИсчисленияИздержек = ПочтовыеПереводы.ПорядокИсчисленияИздержек";
			
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ПрожиточныйМинимум Тогда
			Запрос.Текст = ПрожиточныйМинимумТекст;
			Запрос.Выполнить();
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТПрожиточныеМинимумы КАК ПрожиточныеМинимумы
			|ПО ПрожиточныеМинимумы.НомерСтроки = Основной.НомерСтроки
			|	И ПрожиточныеМинимумы.Регистратор = Основной.Регистратор";
			
		КонецЕсли;

		//vvv
		Если НеобходимыеДанные.БПМ тогда
			Запрос.Текст = РазмерБПМДляУдержанийТекст;
			Запрос.Выполнить();
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерБПМДляУдержаний КАК ДанныеОРазмереБПМ
			|ПО Основной.НомерСтроки = ДанныеОРазмереБПМ.ОсновнойНомерСтроки";
		КонецЕсли;
		//
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ " + ВнешнееУсловие;

	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО НомерСтроки";
	
	Если НеобходимаБаза И КомментироватьРасчет Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ИТОГИ";
		Для Каждого Поле Из ПоляЗапроса Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|	МАКСИМУМ(" + Поле + "),"
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + "
		|	СУММА(РезультатБаза)
		|ПО
		|	НомерСтроки";
	КонецЕсли;
	
	//Если	ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" или
	//		ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
	//	// измерения сопоставления
	//	Измерения = Новый Массив(1);
	//	Измерения[0] = "Сотрудник";
	//	// для начислений сопоставляемые измерения основного и базового регистов совпадают
	//	Запрос.УстановитьПараметр("парамИзмеренияОсновного", Измерения);
	//	Запрос.УстановитьПараметр("парамИзмеренияБазового", Измерения);
	//	// список способов расчета, являющихся почасовыми отклонениями
	//	Запрос.УстановитьПараметр("парамСписокПочасовыхОтклонений", ПолучитьСписокНачисленийПочасовыхОтклонений());
	//	
	//ИначеЕсли	ИмяРегистра = "УправленческиеНачисления" ИЛИ
	//			ИмяРегистра = "УправленческиеУдержания"
	//	Тогда
	//	// измерения сопоставления для управленческих регистров
	//	Измерения = Новый Массив(1);
	//	Измерения[0] = "Физлицо";
	//	// для начислений сопоставляемые измерения основного и базового регистов совпадают
	//	Запрос.УстановитьПараметр("парамИзмеренияОсновного", Измерения);
	//	Запрос.УстановитьПараметр("парамИзмеренияБазового", Измерения);
	//	
	//Иначе
	//	// измерения сопоставления для удержаний
	//	Измерения = Новый Массив(2);
	//	Измерения[0] = "ФизЛицо";
	//	Измерения[1] = "Организация";
	//	// для удержаний сопоставляемые измерения основного и базового регистов разные
	//	Запрос.УстановитьПараметр("парамИзмеренияОсновного", Измерения);
	//	Запрос.УстановитьПараметр("парамИзмеренияБазового", Измерения);
	//	
	//КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции //ПолучитьДанныеДляРасчета()

// Рассчитывает записи из переданного набора записей
//
// Параметры:
//	ИмяРегистра				- имя регистра, чьи записи будут рассчитаны
//	НаборЗаписейРегистра	- набор записей, которые надо рассчитать
//	ЗаписиДоходыНДФЛ		- набор записей регистра накопления с доходами НДФЛ
//							  Передается только для случаев расчета набора записей - начислений
//	НаборЗаписейРасчетСреднего
//	ГоловнаяОрганизация
//	ОбособленноеПодразделение
//	ТабличнаяЧастьДокумента
//	ОднократныйРасчетСреднего	- будево. Если Истина, то при расчете выполняется 
//								  однократный расчет среднего в не зависимости от количесвта различных 
//								  категорий видов расчета в наборе записей
//  ПовторныйРасчет
//  КатегорияДоначисления
//  СведенияОДоначислениях
//  КурсВалютыУпрУчета
//  МассивИндексыСтрокТабличнойЧасти	- массив с индексами строк табличного поля, для реализации
//										  расчета по одному сотруднику	
//	Физлицо								- ссылка Справочники.ФизическиеЛица, для реализации
//										  расчета по одному сотруднику	
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьЗаписиРегистраРасчета(ИмяРегистра, 
												НаборЗаписейРегистра, 
												ЗаписиДоходыНДФЛ = Неопределено,
												НаборЗаписейРасчетСреднего = Неопределено,
												ГоловнаяОрганизация = Неопределено,
												ОбособленноеПодразделение = Неопределено,
												ТабличнаяЧастьДокумента = Неопределено,
												ОднократныйРасчетСреднего = Ложь,
												ПовторныйРасчет = Ложь,
												КатегорияДоначисления = Неопределено,
												СведенияОДоначислениях = Неопределено,
												КурсВалютыУпрУчета = Неопределено,
												МассивИндексыСтрокТабличнойЧасти = Неопределено,
												Физлицо = Неопределено,
												КомментироватьРасчет = Ложь, ФормаКомментариев = НеОпределено) Экспорт

	Если НаборЗаписейРегистра.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	// здесь предполагаем, что в наборе записей не может быть записей с разными периодами регистрации
	ПериодРегистрации = НаборЗаписейРегистра[0].ПериодРегистрации;
	
	Регистратор = НаборЗаписейРегистра.Отбор.Регистратор.Значение;
	ИмяПВР = Метаданные.РегистрыРасчета[ИмяРегистра].ПланВидовРасчета.Имя;
	
	СчитатьСреднийЗаработок = Истина;

	Если	ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" или
			ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" или
			ИмяРегистра = "УдержанияРаботниковОрганизаций" или
			ИмяРегистра = "УправленческиеНачисления" или
			ИмяРегистра = "УправленческиеУдержания" Тогда
		
		// получим массив видов расчета из набора записей
		ТаблицаВидовРасчета = НаборЗаписейРегистра.Выгрузить();
		ТаблицаВидовРасчета.Свернуть("ВидРасчета");
		ВидыРасчетов = ТаблицаВидовРасчета.ВыгрузитьКолонку("ВидРасчета");
		
		 // Получим максимальное число показателей			
		ЗапросНаКоличествоПоказателей = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(НачисленияПоказатели.НомерСтроки),0) КАК КолВоПоказателей
		|ИЗ");
		Если ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК НачисленияПоказатели";
		ИначеЕсли ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" Тогда 
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК НачисленияПоказатели";
		ИначеЕсли ИмяРегистра = "УдержанияРаботниковОрганизаций" Тогда 		
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК НачисленияПоказатели";
		ИначеЕсли ИмяРегистра = "УправленческиеНачисления" Тогда 		
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.УправленческиеНачисления.Показатели КАК НачисленияПоказатели";
		ИначеЕсли ИмяРегистра = "УправленческиеУдержания" Тогда 		
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.УправленческиеУдержания.Показатели КАК НачисленияПоказатели";
		КонецЕсли;
		ВыборкаКоличестваПоказателей = ЗапросНаКоличествоПоказателей.Выполнить().Выбрать();
		ВыборкаКоличестваПоказателей.Следующий();
		КоличествоПоказателей = ВыборкаКоличестваПоказателей.КолВоПоказателей;
		

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КатегорияНачисления,"
		+ ?(ИмяПВР = "ОсновныеНачисленияОрганизаций",
		"
		|	ЗачетНормыВремени,
		|	ПериодДействияБазовый,","")
		+ ?(ИмяПВР = "ДополнительныеНачисленияОрганизаций",
		"
		|	ВЫБОР КОГДА КодыДоходаСВычетами.КодДохода ЕСТЬ NULL ТОГДА Ложь ИНАЧЕ Истина КОНЕЦ Как РасчетВычетов,","") + "
		|	ПВР.Ссылка КАК Ссылка1");		
		Для СчПоказателей = 1 По КоличествоПоказателей Цикл
			Если СчПоказателей = 1 Тогда
				Запрос.Текст = Запрос.Текст + ",";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
			|	ВЫБОР
			|		КОГДА ТЧПоказатели.НомерСтроки = "+ СчПоказателей+"
			|			ТОГДА 
			|				ВЫБОР
			|					КОГДА ТЧПоказатели.Показатель.Предопределенный ИЛИ ТЧПоказатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
			|						ТОГДА ТЧПоказатели.Показатель
			|					ИНАЧЕ NULL
			|				КОНЕЦ				
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК Показатель" + СчПоказателей + ",
			|	ВЫБОР
			|		КОГДА ТЧПоказатели.НомерСтроки = "+ СчПоказателей+"
			|			ТОГДА 
			|				ВЫБОР
			|					КОГДА ТЧПоказатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
			|						ТОГДА ТЧПоказатели.Показатель.ВидСтажа
			|					ИНАЧЕ NULL
			|				КОНЕЦ
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК ВидСтажа" + СчПоказателей + ",
			|	ВЫБОР
			|		КОГДА ТЧПоказатели.НомерСтроки = "+ СчПоказателей+"
			|			ТОГДА 
			|				ВЫБОР
			|					КОГДА ТЧПоказатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
			|						ТОГДА ТЧПоказатели.Показатель.ВидСтажа.Код
			|					ИНАЧЕ NULL
			|				КОНЕЦ
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК ВидСтажаКод" + СчПоказателей;
			
			Если СчПоказателей<КоличествоПоказателей Тогда
				Запрос.Текст = Запрос.Текст + ","
			КонецЕсли;
		КонецЦикла;
		Если ИмяПВР = "ОсновныеНачисленияОрганизаций" Или ИмяПВР = "УправленческиеНачисления" Тогда
			Запрос.Текст = Запрос.Текст + ",
			|	ЗачетОтработанногоВремени";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + ",
		|	ПВР.СпособРасчета Как СпособРасчета
		|ИЗ	
		|	ПланВидовРасчета."+ИмяПВР + " КАК ПВР";
		Если КоличествоПоказателей > 0 Тогда
			Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ  ПланВидовРасчета."+ИмяПВР+".Показатели КАК ТЧПоказатели
		|	ПО ПВР.Ссылка = ТЧПоказатели.Ссылка";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст 
		+ ?(ИмяПВР = "ДополнительныеНачисленияОрганизаций",
		"
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ КодДохода Из РегистрСведений.НДФЛВычетыПоДоходам) Как КодыДоходаСВычетами
		|ПО КодДоходаНДФЛ = КодыДоходаСВычетами.КодДохода","")
		+ "
		|ГДЕ ПВР.Ссылка В(&парамВидыРасчетов)
		|УПОРЯДОЧИТЬ ПО
		|	КатегорияНачисления.Код
		|
		|ИТОГИ ПО КатегорияНачисления";

		Запрос.УстановитьПараметр("парамВидыРасчетов", ВидыРасчетов);

		
		// получаем список категороий и способов расчета
		ВыборкаКатегорий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		БудетДоначислениеПоУпрУчету = Ложь;
        Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |   1 КАК Поле1
        |ИЗ
        |   ПланВидовРасчета." + ИмяПВР + " КАК ПВР
        |ГДЕ
        |   ПВР.Ссылка В(&парамВидыРасчетов)
        |   И ПВР.СпособРасчета = &Доначисление";
        
        Запрос.УстановитьПараметр("Доначисление", Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету);
        
        Если Не Запрос.Выполнить().Пустой() Тогда

            БудетДоначислениеПоУпрУчету = Истина;
        КонецЕсли;

		// первая запись набора делается с пересчетом Фактического периода действия
		ТолькоЗапись = Ложь;
		
		Если ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" Тогда
			ЗапросПоВычетам = Новый Запрос
		КонецЕсли;
		
		Если Не(Физлицо = Неопределено) Тогда
			Физлица = Новый Массив();
			Физлица.Добавить(Физлицо);
		Иначе
			Физлица = Неопределено;
		КонецЕсли;

		
		Пока ВыборкаКатегорий.Следующий() Цикл
			
			// Поддержка способа расчета ДоначислениеПоУправленческомуУчету
			// пропустим категории "младше" категории в которой выполняется доначисление
			Если ПовторныйРасчет и КатегорияДоначисления <> Неопределено и ОбщегоНазначения.СравнениеПеречислений(ВыборкаКатегорий.КатегорияНачисления, КатегорияДоначисления) < 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Получим структуру необходимых данных для расчетов текущей категории
			МассивСпособовРасчета	= Новый Массив;	// Массив способов расчета текущий категории
			ТаблицаПоказателей		= Новый ТаблицаЗначений;	// Массив видов показателей схем мотивации
			ТаблицаПоказателей.Колонки.Добавить("Показатель");
			ТаблицаПоказателей.Колонки.Добавить("ВидСтажа");
			ТаблицаПоказателей.Колонки.Добавить("ВидСтажаКод");
			
			
			НормаВремени			= Ложь;			// Признак необходимости получения нормы времени для видов расчета
			ОтработаноВремени		= Ложь;			// Признак необходимости получения отработанного времени для видов расчета
			РасчетВычетов			= Ложь;			// Признак необходимости расчета вычетов к доходам
			НеобходимБазовыйПериод	= Ложь;			// Признак необходимости базового периода
			
			ВложеннаяВыборка = ВыборкаКатегорий.Выбрать();
			Пока ВложеннаяВыборка.Следующий() Цикл
				МассивСпособовРасчета.Добавить(ВложеннаяВыборка.СпособРасчета);
				
				Для Сч = 1 По КоличествоПоказателей Цикл
					Если ВложеннаяВыборка["Показатель"+Сч] <> Null Тогда
						СтрокаПоказателя = ТаблицаПоказателей.Добавить();
						СтрокаПоказателя.Показатель		= ВложеннаяВыборка["Показатель"+Сч];
						СтрокаПоказателя.ВидСтажа		= ВложеннаяВыборка["ВидСтажа"+Сч];
						СтрокаПоказателя.ВидСтажаКод	= ВложеннаяВыборка["ВидСтажаКод"+Сч];
					КонецЕсли;
				КонецЦикла;
				
				Если ИмяПВР = "ОсновныеНачисленияОрганизаций" Тогда
					
					НормаВремени			= НормаВремени ИЛИ ВложеннаяВыборка.ЗачетНормыВремени;
					ОтработаноВремени		= ОтработаноВремени ИЛИ ВложеннаяВыборка.ЗачетОтработанногоВремени ИЛИ ВложеннаяВыборка.ЗачетНормыВремени;
					НеобходимБазовыйПериод	= НеобходимБазовыйПериод ИЛИ (НЕ ВложеннаяВыборка.ПериодДействияБазовый);
				КонецЕсли;
				
				Если ИмяПВР = "ДополнительныеНачисленияОрганизаций" Тогда
					РасчетВычетов = РасчетВычетов ИЛИ ВложеннаяВыборка.РасчетВычетов;
				КонецЕсли;
				
				Если ИмяПВР = "УправленческиеНачисления" Тогда					
					ОтработаноВремени = ОтработаноВремени ИЛИ ВложеннаяВыборка.ЗачетОтработанногоВремени;
				КонецЕсли;
           								
			КонецЦикла;
			
			НеобходимыеДанные = ПолучитьСтруктуруНеобходимыхДанных(МассивСпособовРасчета, ТаблицаПоказателей);
			НеобходимыеДанные.НормаВремени			= НеобходимыеДанные.НормаВремени ИЛИ НормаВремени;
			НеобходимыеДанные.ОтработаноВремени		= НеобходимыеДанные.ОтработаноВремени ИЛИ ОтработаноВремени;
			НеобходимыеДанные.ВычетыКДоходамНДФЛ	= РасчетВычетов;
			
			Если Не НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию Тогда
				НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = ИмяРегистра = "УдержанияРаботниковОрганизаций" И НеобходимыеДанные.База
			КонецЕсли;
			
			Если НеобходимыеДанные.База Тогда
				НеобходимыеДанные.НормаВремениЗаМесяц	= НеобходимыеДанные.НормаВремениЗаМесяц ИЛИ НеобходимБазовыйПериод;
				НеобходимыеДанные.ОтработаноВремени		= НеобходимыеДанные.ОтработаноВремени ИЛИ НеобходимБазовыйПериод;
			КонецЕсли;
			
			Если ИмяПВР = "ОсновныеНачисленияОрганизаций" Или ИмяПВР = "УправленческиеНачисления" Тогда
				НеобходимыеДанные.НормаВремениЗаМесяц = Истина; // для предотвращения ложных сообщений об отсутствии графика
			КонецЕсли;
			
			// записываем набор перед расчетом каждой категории начислений
			//vvv добавим если
			//НаборЗаписейРегистра.Записать(Истина, ТолькоЗапись);
			Если ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" или ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" Тогда
				НаборЗаписейРегистра.Записать(Истина, ТолькоЗапись, Истина, Ложь);
			Иначе	
				НаборЗаписейРегистра.Записать(Истина, ТолькоЗапись);
			КонецЕсли;
			//
			ТолькоЗапись = Истина;
	
			// если нужны данные для расчета среднего заработка
			Если СчитатьСреднийЗаработок И (НеобходимыеДанные.СреднийЗаработок ИЛИ НеобходимыеДанные.СреднийЗаработокОтпуска) И (НаборЗаписейРасчетСреднего <> Неопределено) Тогда
				
				СформироватьИЗаписатьДанныеРасчетаСреднего(ИмяРегистра, Регистратор, НаборЗаписейРасчетСреднего, КомментироватьРасчет);
				Если ОднократныйРасчетСреднего Тогда
					СчитатьСреднийЗаработок = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ИсходныеДанные = ПолучитьДанныеДляРасчета(ИмяРегистра, ВыборкаКатегорий.КатегорияНачисления, НеобходимыеДанные, Регистратор, ГоловнаяОрганизация, ПериодРегистрации, , Физлица, КомментироватьРасчет);
			
			// Поддержка способа расчета ДоначислениеПоУправленческомуУчету
			// если необходимо прогнозировать НДФЛ
			Если НеобходимыеДанные.ДанныеДляПрогнозаНДФЛ Тогда
				Если не ПовторныйРасчет Тогда
					// Составим текст запроса для выбора списка физлиц, по которым надо считать НДФЛ
					СписокФизлицТекст = 
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	Работники.ФизЛицо КАК Физлицо
					|ИЗ
					|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК Работники
					|ГДЕ
					|	Работники.Ссылка = &парамРегистратор";
					
					ДанныеДляПрогнозаНДФЛ = ДанныеДляПрогнозаНДФЛ(ПериодРегистрации, ГоловнаяОрганизация, Регистратор, СписокФизЛицТекст);
				КонецЕсли;
				КатегорияДоначисления = ВыборкаКатегорий.КатегорияНачисления;
			КонецЕсли;
			РассчитатьЗаписиНабора(ИсходныеДанные, НаборЗаписейРегистра, НеобходимыеДанные, ЗаписиДоходыНДФЛ, ГоловнаяОрганизация, ОбособленноеПодразделение, ТабличнаяЧастьДокумента, ДанныеДляПрогнозаНДФЛ, СведенияОДоначислениях, КурсВалютыУпрУчета, ПовторныйРасчет, МассивИндексыСтрокТабличнойЧасти, КомментироватьРасчет, ФормаКомментариев);
			Если НеобходимыеДанные.ДанныеДляПрогнозаНДФЛ И ЗаписиДоходыНДФЛ <> НеОпределено Тогда
				// запись набора записей доходов НДФЛ
				// необходимо для расчета ДоначислениеПоУправленческомуУчету
				ЗаписиДоходыНДФЛ.Записать();
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // РассчитатьЗаписиРегистраРасчета

// Перерассчитывает записи из переданного набора записей
//
// Параметры: 
//  ИмяРегистра			 - имя регистра, чьи записи будут рассчитаны
//  НаборЗаписейРегистра - набор записей, которые надо рассчитать
//	Физлица - массив физлиц для перерасчета
//	ЗаписиДоходыНДФЛ - набор записей доходов НДФЛ
//	НаборЗаписейРасчетСреднего - набор записей расчета среднего заработка
//	Организация - организацция
//	ТабличнаяЧастьДокумента - табличная часть документа по которой ведется перерасчет
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПереРассчитатьЗаписиРегистраРасчета(	ИмяРегистра, 
												НаборЗаписейРегистра, 
												Физлица = Неопределено, 
												ЗаписиДоходыНДФЛ = Неопределено,
												НаборЗаписейРасчетСреднего = Неопределено,
												ГоловнаяОрганизация = Неопределено,
												ОбособленноеПодразделение = Неопределено,
												ТабличнаяЧастьДокумента = Неопределено,
												ОднократныйРасчетСреднего = Ложь) Экспорт

	Если НаборЗаписейРегистра.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	// здесь предполагаем, что в наборе записей не может быть записей с разными периодами регистрации
	ПериодРегистрации = НаборЗаписейРегистра[0].ПериодРегистрации;
	
	Регистратор = НаборЗаписейРегистра.Отбор.Регистратор.Значение;
	ИмяПВР = Метаданные.РегистрыРасчета[ИмяРегистра].ПланВидовРасчета.Имя;

	СчитатьСреднийЗаработок = Истина;
	
	// Получим максимальное число показателей			
	ЗапросНаКоличествоПоказателей = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(Показатели.НомерСтроки) КАК КолВоПоказателей
	|ИЗ
	|	ПланВидовРасчета."+ИмяПВР+".Показатели КАК Показатели");			
	ВыборкаКоличестваПоказателей = ЗапросНаКоличествоПоказателей.Выполнить().Выбрать();
	ВыборкаКоличестваПоказателей.Следующий();
	КоличествоПоказателей = ВыборкаКоличестваПоказателей.КолВоПоказателей;		
	Если КоличествоПоказателей = Null Тогда
		КоличествоПоказателей = 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	// таблица ФизлицаДляПерерасчета
	// Список физлиц по которым необходимо выполнить перерасчет
	// Поля:
	//		ФизЛицо
	Если Физлица = Неопределено Тогда
		// Описание:
		// Получает список неповторяющихся физлиц по которым есть записи
		// перерасчета в одной из таблиц перерасчета - по основным или дополнительным начислениям
		//
		ФизлицаДляПерерасчетаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТФизлица
		|ИЗ
		|	(ВЫБРАТЬ
		|		Перерасчет.ФизЛицо КАК ФизЛицо
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|	ГДЕ
		|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Перерасчет.ФизЛицо
		|	ИЗ
		|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
		|	ГДЕ
		|		Перерасчет.ОбъектПерерасчета = &парамРегистратор) КАК Перерасчет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо";
		
	Иначе
		ФизлицаДляПерерасчетаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.Ссылка КАК Физлицо
		|ПОМЕСТИТЬ ВТФизлица
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&парамФизлица)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо";
		Запрос.УстановитьПараметр("парамФизлица", Физлица);
	КонецЕсли;
	Запрос.Текст = ФизлицаДляПерерасчетаТекст;
	Запрос.Выполнить();

	
	// соответствие категории начисления и массива сособов расчета
	// для записей, которые будут перерассчитываться
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ";
	Для СчПоказателей = 1 По КоличествоПоказателей Цикл
		Запрос.Текст = Запрос.Текст + "	
		|	ВЫБОР
		|		КОГДА ТЧПоказатели.НомерСтроки = "+ СчПоказателей+"
		|			ТОГДА 
		|				ВЫБОР
		|					КОГДА ТЧПоказатели.Показатель.Предопределенный ИЛИ ТЧПоказатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
		|						ТОГДА ТЧПоказатели.Показатель
		|					ИНАЧЕ NULL
		|				КОНЕЦ
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Показатель" + СчПоказателей + ",
		|	ВЫБОР
		|		КОГДА ТЧПоказатели.НомерСтроки = "+ СчПоказателей+"
		|			ТОГДА 
		|				ВЫБОР
		|					КОГДА ТЧПоказатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
		|						ТОГДА ТЧПоказатели.Показатель.ВидСтажа
		|					ИНАЧЕ NULL
		|				КОНЕЦ
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ВидСтажа" + СчПоказателей + ",
		|	ВЫБОР
		|		КОГДА ТЧПоказатели.НомерСтроки = "+ СчПоказателей+"
		|			ТОГДА 
		|				ВЫБОР
		|					КОГДА ТЧПоказатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
		|						ТОГДА ТЧПоказатели.Показатель.ВидСтажа.Код
		|					ИНАЧЕ NULL
		|				КОНЕЦ
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ВидСтажаКод" + СчПоказателей + ",";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст 
	+ ?(ИмяПВР = "ОсновныеНачисленияОрганизаций","
	|	ВидРасчета.ПериодДействияБазовый КАК ПериодДействияБазовый,
	|	ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,","")
	+ ?(ИмяПВР = "ДополнительныеНачисленияОрганизаций",
	"
	|	ВЫБОР КОГДА КодыДоходаСВычетами.КодДохода ЕСТЬ NULL ТОГДА Ложь ИНАЧЕ Истина КОНЕЦ Как РасчетВычетов,","")
	+ "
	|   "+ИмяРегистра+".ВидРасчета.КатегорияНачисления Как КатегорияРасчета,
	|	"+ИмяРегистра+".ВидРасчета.СпособРасчета Как СпособРасчета
	|ИЗ
	|	РегистрРасчета." + ИмяРегистра + " Как "+ ИмяРегистра + "
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизлица Как ФизлицаДляПерерасчета
	|		ПО ФизлицаДляПерерасчета.ФизЛицо = "+ИмяРегистра+".ФизЛицо"
	+ ?(ИмяПВР = "ДополнительныеНачисленияОрганизаций",
	"
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ КодДохода Из РегистрСведений.НДФЛВычетыПоДоходам) Как КодыДоходаСВычетами
	|		ПО "+ИмяРегистра+".ВидРасчета.КодДоходаНДФЛ = КодыДоходаСВычетами.КодДохода","")
    + ?(КоличествоПоказателей > 0,
	"
	|		ЛЕВОЕ СОЕДИНЕНИЕ  ПланВидовРасчета."+ИмяПВР+".Показатели КАК ТЧПоказатели
	|		ПО "+ИмяРегистра+".ВидРасчета = ТЧПоказатели.Ссылка","") 
	+ "
	|ГДЕ Регистратор = &парамРегистратор
	|УПОРЯДОЧИТЬ ПО
	//vvv
	//|	КатегорияРасчета.Код
	|	"+ИмяРегистра+".ВидРасчета.КатегорияНачисления.Код
	//
	|ИТОГИ ПО "+ИмяРегистра+".ВидРасчета.КатегорияНачисления";
	
	ВыборкаКатегорий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// соответствие категорий начислений и массива способов расчета
	КатегорииСпособы = Новый Соответствие;
	Пока ВыборкаКатегорий.Следующий() Цикл
		
		// Получим структуру необходимых данных для расчетов текущей категории
		МассивСпособовРасчета	= Новый Массив;	// Массив способов расчета текущий категории
		МассивПоказателей		= Новый ТаблицаЗначений;	// Массив видов показателей схем мотивации
		МассивПоказателей.Колонки.Добавить("Показатель");
		МассивПоказателей.Колонки.Добавить("ВидСтажа");
		МассивПоказателей.Колонки.Добавить("ВидСтажаКод");
		НормаВремени			= Ложь;			// Признак необходимости получения нормы времени для видов расчета
		ОтработаноВремени		= Ложь;			// Признак необходимости получения отработанного времени для видов расчета
		РасчетВычетов			= Ложь;			// Признак необходимости расчета вычетов к доходам
		НеобходимБазовыйПериод	= Ложь;			// Признак необходимости базового периода
		
		ВложеннаяВыборка = ВыборкаКатегорий.Выбрать();
		Пока ВложеннаяВыборка.Следующий() Цикл
			МассивСпособовРасчета.Добавить(ВложеннаяВыборка.СпособРасчета);
			
			Для СчПоказателей = 1 По КоличествоПоказателей Цикл
				
				Если ВложеннаяВыборка["Показатель"+СчПоказателей] <> Null Тогда
					МассивПоказателей.Добавить(ВложеннаяВыборка["Показатель"+СчПоказателей]);
				КонецЕсли;
			КонецЦикла;
			
			Если ИмяПВР = "ОсновныеНачисленияОрганизаций" Тогда
				
				
				НормаВремени			= НормаВремени ИЛИ ВложеннаяВыборка.ЗачетНормыВремени;
				ОтработаноВремени		= ОтработаноВремени ИЛИ ВложеннаяВыборка.ЗачетОтработанногоВремени ИЛИ ВложеннаяВыборка.ЗачетНормыВремени;
				НеобходимБазовыйПериод	= НеобходимБазовыйПериод ИЛИ (НЕ ВложеннаяВыборка.ПериодДействияБазовый);
			КонецЕсли;
			
			Если ИмяПВР = "ДополнительныеНачисленияОрганизаций" Тогда
				РасчетВычетов = РасчетВычетов ИЛИ ВложеннаяВыборка.РасчетВычетов;
			КонецЕсли;
			
		КонецЦикла;
		
		НеобходимыеДанные = ПолучитьСтруктуруНеобходимыхДанных(МассивСпособовРасчета, МассивПоказателей);
		НеобходимыеДанные.НормаВремени			= НеобходимыеДанные.НормаВремени ИЛИ НормаВремени ИЛИ НеобходимыеДанные.База;
		НеобходимыеДанные.ОтработаноВремени		= НеобходимыеДанные.ОтработаноВремени ИЛИ ОтработаноВремени ИЛИ НеобходимыеДанные.База;
		НеобходимыеДанные.ВычетыКДоходамНДФЛ	= РасчетВычетов;
		
		Если НеобходимыеДанные.База Тогда
			НеобходимыеДанные.НормаВремениЗаМесяц	= НеобходимыеДанные.НормаВремениЗаМесяц ИЛИ НеобходимБазовыйПериод;
		КонецЕсли;
		
		Если ИмяРегистра = "ОсновныеНачисленияОрганизаций" Или ИмяРегистра = "УправленческиеНачисления" Тогда
			НеобходимыеДанные.НормаВремениЗаМесяц = Истина; // для предотвращения ложных сообщений об отсутствии графика
		КонецЕсли;
		
		Если Не НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию Тогда
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = ИмяРегистра = "УдержанияРаботниковОрганизаций" И (НеобходимыеДанные.База)
		КонецЕсли;
			
		// если нужны данные для расчета среднего заработка
		Если СчитатьСреднийЗаработок И (НеобходимыеДанные.СреднийЗаработок ИЛИ НеобходимыеДанные.СреднийЗаработокОтпуска) И (НаборЗаписейРасчетСреднего <> Неопределено) Тогда
			СформироватьИЗаписатьДанныеРасчетаСреднего(ИмяРегистра, Регистратор, НаборЗаписейРасчетСреднего);
			Если ОднократныйРасчетСреднего Тогда
				СчитатьСреднийЗаработок = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИсходныеДанные = ПолучитьДанныеДляРасчета(ИмяРегистра, ВыборкаКатегорий.КатегорияРасчета, НеобходимыеДанные, Регистратор, ГоловнаяОрганизация, ПериодРегистрации, Истина, Физлица);
		// Курс результата передаем равным 1, т.к. считаем, что перерасчет доступен только для реглучета
		РассчитатьЗаписиНабора(ИсходныеДанные, НаборЗаписейРегистра, НеобходимыеДанные, ЗаписиДоходыНДФЛ, ГоловнаяОрганизация, ОбособленноеПодразделение, ТабличнаяЧастьДокумента);
		
		// записываем набор после расчета каждой очередной категории
		НаборЗаписейРегистра.Записать(Истина, Истина);
		
	КонецЦикла;


КонецПроцедуры // ПерерассчитатьЗаписиРегистраРасчета() 

//Рассчитать налог по накоплению с начала года по пргрессивной шкале
Функция РассчитатьПрогрессивнуюШкалу(ТекущийГод, ПериодРасчета, РанееНачисленный,
																ОблагаемыйДоходЗаГод, 
																ПримененныеВычетыЛичные,
																ВычетыПримененныеДетский,
																ВычетыПримененныеДетскийЛьгота,
																ВычетыПримененныеДополнительный,
																ВычетыПримененные312,
								                                ВычетыПримененные311) Экспорт
	//Минск расчет по прогрессивной шкале
	
	БазоваяВеличина	= 0;
	ТекДата = НачалоГода(ПериодРасчета);
	Пока ТекДата <= НачалоМесяца(ПериодРасчета) Цикл
		ПоследняяБазоваяВеличина = РегистрыСведений.РазмерыПараметровДляРасчетаРБ.ПолучитьПоследнее(ТекДата, Новый Структура("ВидПараметра",Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяВеличина)).Размер;
		Если ПоследняяБазоваяВеличина = 0 тогда
			Сообщить("Не заполнено значение базовой величины "+Текдата);
			Возврат РанееНачисленный;
		КонецЕсли;
		БазоваяВеличина = БазоваяВеличина + ПоследняяБазоваяВеличина;
		ТекДата = ДобавитьМесяц(ТекДата, 1);
	КонецЦикла;
	БазоваяВеличина = БазоваяВеличина + ПоследняяБазоваяВеличина * (12 - Месяц(ПериодРасчета));
	СБВ	=  Окр(БазоваяВеличина / 12,1,1);
	
	ЗапросШкала = Новый Запрос;
	ЗапросШкала.УстановитьПараметр("СредняяБазовая", СБВ);
	ЗапросШкала.Текст = "ВЫБРАТЬ
	|	ШкалаПодоходногоНалогаСрезПоследних.НижнийПредел * &СредняяБазовая КАК НижнийПредел,
	|	ШкалаПодоходногоНалогаСрезПоследних.ВерхнийПредел * &СредняяБазовая КАК ВерхнийПредел,
	|	ШкалаПодоходногоНалогаСрезПоследних.Налог
	|ИЗ
	|	РегистрСведений.ШкалаПодоходногоНалога.СрезПоследних(&КонецПериода, ) КАК ШкалаПодоходногоНалогаСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	НижнийПредел";
	ЗапросШкала.УстановитьПараметр("КонецПериода", ПериодРасчета);
	Шкала = ЗапросШкала.Выполнить().Выгрузить();
	
	Если Шкала.Количество() = 0 тогда
		Сообщить("Не заполнена шкала подоходного налога на период "+ Строка(ГОД(ПериодРасчета)));
		Возврат РанееНачисленный;
	КонецЕсли;
	
	ОблагаемаяСумма = ОблагаемыйДоходЗаГод - ПримененныеВычетыЛичные - ВычетыПримененныеДетский - ВычетыПримененныеДетскийЛьгота -
										ВычетыПримененныеДополнительный - ВычетыПримененные312 - ВычетыПримененные311;
	Накопление 		= 0;
	ВерхнийПредел 	= 0;
	Для Каждого Предел Из Шкала Цикл
		Если (ОблагаемаяСумма <= Окр(Предел.ВерхнийПредел,0,1)) ИЛИ (Окр(Предел.ВерхнийПредел,0,1) = 0) Тогда
			ПодоходныйНалог = Накопление + Предел.Налог / 100 * (ОблагаемаяСумма - ВерхнийПредел );
			Прервать;
		КонецЕсли;
		Накопление = Накопление + Предел.Налог / 100 * (Окр(Предел.ВерхнийПредел,0,1) - ВерхнийПредел);
		ВерхнийПредел = Окр(Предел.ВерхнийПредел,0,1);
	КонецЦикла;
	
	Возврат ПодоходныйНалог;
КонецФункции

// получить данные для расчета НДФЛ по ставке 13 процентов
// Параметры: 
//  ПоследнийМесяцНалоговогоПериода - месяц налогового периода, по который (включительно) считается налог. 
//  						Это текущий или будущий месяц относительно периода регистрации
//							Если Неопределено - нужно определить максимальный месяц налогового периода и 
//							минимальный месяц налоговго периода 
//  ПериодРегистрации - дата, по которую учитываются зарегистрированные доходы и начисленные налоги 
//  Организация - ссылка на организацию
//  Регистратор - ссылка на регистратор записей НДФЛ
//  СписокФизЛицТекст - текст запроса выборки списка физлиц, по которым необходимо выполнить расчет налога
//	ДополнительныеПараметрыЗапроса - структура значений параметров запроса, необходимых для выполнения текста запроса "СписокФизЛицТекст"
//
// Возвращаемое значение:
//  Нет.
//
//{{MRG[ <-> ]
Функция ПолучитьДанныеНДФЛПоРегистратору(Знач ПервыйМесяцНалоговогоПериода,
											Знач ПоследнийМесяцНалоговогоПериода,
											ПериодРегистрации,
											ОбособленноеПодразделение,
											Организация,
											Регистратор,
											Знач СписокФизЛицТекст,
											ДополнительныеПараметрыЗапроса = Неопределено,
											ЭтоПерерасчет = Ложь,
											КомментироватьРасчет = Ложь,
											ВыборкаПодразделений) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамОрганизация",			Организация);
	Запрос.УстановитьПараметр("парамРегистратор",			Регистратор);
	Запрос.УстановитьПараметр("парамОбособленноеПодразделение", ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("парамПериодРегистрации",		НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамНачалоГодаРегистрации",	НачалоГода(ПериодРегистрации));
	//vvv будем контролировать правильность п/н за прошлый год
	Запрос.УстановитьПараметр("парамНачалоГодаРегистрации",	НачалоГода(НачалоГода(ПериодРегистрации)-86400));
	//не будем пока контролировать, т.к. были проблемы с отпусками из ФМП за период июнь-октябрь 2013 года
	//отпуск из фмп тек. месяца включался в будущий, из-за этого подоходный в целом считался правильно, а
	//помесячно - нет. При выделении отпуска из ФМП программа пытается пересчитать подоходный,т.е. снять с будущего и добавить
	//в текущий. Т.к. отпуск из ФМП я выделил в июне, пока контроль будем делать начиная с декабря пред. года
	//Запрос.УстановитьПараметр("парамНачалоГодаРегистрации",	НачалоМесяца(НачалоГода(ПериодРегистрации)-86400));
	//определим дату контроля подоходного налога
	ДатаКонтроля=НачалоГода(НачалоГода(ПериодРегистрации)-86400); //по умолчанию - весь прошлый год
	ЗапросПн=Новый Запрос;
	ЗапросПн.УстановитьПараметр("Организация",ОбособленноеПодразделение);
	ЗапросПн.Текст=
	"ВЫБРАТЬ
	|	ДатыПересчетаПодоходного.ДатаПересчета
	|ИЗ
	|	РегистрСведений.ДатыПересчетаПодоходного КАК ДатыПересчетаПодоходного
	|ГДЕ
	|	ДатыПересчетаПодоходного.Организация = &Организация";
	
	ВыборкаПН=ЗапросПн.Выполнить().Выбрать();
	Если ВыборкаПН.Следующий() Тогда
		Если ВыборкаПН.ДатаПересчета<>Дата(1,1,1) ТОгда
			ДатаКонтроля=?(ДатаКонтроля<ВыборкаПН.ДатаПересчета,ВыборкаПН.ДатаПересчета,ДатаКонтроля);
			//ДатаКонтроля=ВыборкаПН.ДатаПересчета;
		КонецЕсли;		
	КонецЕсли;		
	Запрос.УстановитьПараметр("парамНачалоГодаРегистрации",ДатаКонтроля);
	Запрос.УстановитьПараметр("парамДатаПоУмолчанию",	НачалоГода(НачалоГода(ПериодРегистрации)-86400));
	Запрос.УстановитьПараметр("парамДатаНачалаУчетаВПрограмме",Константы.ДатаНачалаУчетаВПрограмме.Получить());
	//
	
	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ Физлицо
	|ПОМЕСТИТЬ ВТСписокФизЛиц
	|ИЗ (" + СписокФизЛицТекст + ") СписокФизЛиц
	|ИНДЕКСИРОВАТЬ ПО Физлицо";
	Запрос.Выполнить();
	
	//vvv
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокФизЛиц.Физлицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА НЕ ДатыПересчетаПодоходного.ДатаПересчета ЕСТЬ NULL И ДатыПересчетаПодоходного.ДатаПересчета > &парамДатаПоУмолчанию ТОГДА ДатыПересчетаПодоходного.ДатаПересчета
	|		КОГДА НЕ НАЧАЛОПЕРИОДА(МИНИМУМ(НДФЛИмущественныеВычетыФизлиц.МесяцНалоговогоПериода),МЕСЯЦ) ЕСТЬ NULL И НАЧАЛОПЕРИОДА(МИНИМУМ(НДФЛИмущественныеВычетыФизлиц.МесяцНалоговогоПериода),МЕСЯЦ) >&парамДатаПоУмолчанию ТОГДА &парамДатаПоУмолчанию
	|		КОГДА НЕ НАЧАЛОПЕРИОДА(МИНИМУМ(НДФЛИмущественныеВычетыФизлиц.МесяцНалоговогоПериода),МЕСЯЦ) ЕСТЬ NULL И НАЧАЛОПЕРИОДА(МИНИМУМ(НДФЛИмущественныеВычетыФизлиц.МесяцНалоговогоПериода),МЕСЯЦ) <=&парамДатаПоУмолчанию ТОГДА ВЫБОР КОГДА НАЧАЛОПЕРИОДА(МИНИМУМ(НДФЛИмущественныеВычетыФизлиц.МесяцНалоговогоПериода),МЕСЯЦ)<&парамДатаНачалаУчетаВПрограмме ТОГДА &парамДатаНачалаУчетаВПрограмме ИНАЧЕ НАЧАЛОПЕРИОДА(МИНИМУМ(НДФЛИмущественныеВычетыФизлиц.МесяцНалоговогоПериода),МЕСЯЦ) КОНЕЦ
	|	КОНЕЦ КАК ДатаПересчета
	//|	ЕСТЬNULL(ДатыПересчетаПодоходного.ДатаПересчета,НАЧАЛОПЕРИОДА(МИНИМУМ(НДФЛИмущественныеВычетыФизлиц.Период),МЕСЯЦ)) КАК ДатаПересчета
	|ПОМЕСТИТЬ ВТДатыПересчета
	|ИЗ (" + СписокФизЛицТекст + ") СписокФизЛиц
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПересчетаПодоходного КАК ДатыПересчетаПодоходного
	|	ПО СписокФизЛиц.ФизЛицо=ДатыПересчетаПодоходного.Организация
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛИмущественныеВычетыФизлиц КАК НДФЛИмущественныеВычетыФизлиц
	|	ПО СписокФизЛиц.ФизЛицо=НДФЛИмущественныеВычетыФизлиц.ФизЛицо
	|	И НДФЛИмущественныеВычетыФизлиц.ВидДвижения=ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|СГРУППИРОВАТЬ ПО 
	|	СписокФизЛиц.Физлицо,
	|	ДатыПересчетаПодоходного.ДатаПересчета
	|ИНДЕКСИРОВАТЬ ПО ФизЛицо";
	Запрос.Выполнить();
	//

	НалоговаяПолитикаНДФЛ = РегистрыСведений.УчетнаяПолитикаПоНДФЛ.ПолучитьПоследнее(КонецГода(ПериодРегистрации), Новый Структура("Организация", Организация)).ОсобенностиИсчисленияНДФЛ;
	Если НЕ ЗначениеЗаполнено(НалоговаяПолитикаНДФЛ) Тогда
		НалоговаяПолитикаНДФЛ = Перечисления.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом;
	КонецЕсли;

	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	НДФЛСведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК Работники
		|		ПО Работники.Физлицо = НДФЛСведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	НДФЛСведенияОДоходах.Организация = &парамОрганизация И НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НДФЛСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК Работники
	|		ПО Работники.Физлицо = НДФЛСведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	НДФЛСведенияОДоходах.Организация = &парамОрганизация И НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();
		
	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;
			
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода =Выборка.Период;
			
	КонецЕсли;
	
	//vvv сделаем запрос по месяцу предоставления имущ./соц. вычетов, чтобы знать с какого месяца пересчитывать
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	НДФЛИмущественныеВычетыФизлиц.Период
	|ИЗ
	|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц КАК НДФЛИмущественныеВычетыФизлиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК Работники
	|		ПО (Работники.Физлицо = НДФЛИмущественныеВычетыФизлиц.ФизЛицо)
	|ГДЕ
	|	(НДФЛИмущественныеВычетыФизлиц.Организация = &парамОрганизация) И (НДФЛИмущественныеВычетыФизлиц.Регистратор.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ) и КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ))	         
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Результат = Запрос.Выполнить();
	ПервыйМесяцНалоговогоПериодаИмущВычеты=ПериодРегистрации;
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериодаИмущВычеты =Выборка.Период;
		
		Если ПервыйМесяцНалоговогоПериода>ПервыйМесяцНалоговогоПериодаИмущВычеты ТОгда
			ПервыйМесяцНалоговогоПериода=ПервыйМесяцНалоговогоПериодаИмущВычеты;
		КонецЕсли;
	
	КонецЕсли;
	//
	
	Если ГОД(ПериодРегистрации) < 2009 тогда
	
		Запрос.УстановитьПараметр("парамСтавка13",                     Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);
		//Запрос.УстановитьПараметр("парамСтавкаРезидента13", ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13) / 100);
		
		Запрос.УстановитьПараметр("парамКонецМесяцаНалоговогоПериода", КонецМесяца(ПоследнийМесяцНалоговогоПериода));
		Запрос.УстановитьПараметр("парамНачалоГода",                   НачалоГода(ПервыйМесяцНалоговогоПериода));
		Запрос.УстановитьПараметр("парамКонецГода",                    КонецГода(ПоследнийМесяцНалоговогоПериода));
		Запрос.УстановитьПараметр("парамПриход",                       ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("парамВидСтроки",                    Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление);
		Запрос.УстановитьПараметр("БазоваяВеличина",                   Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяВеличина);
		
		Запрос.УстановитьПараметр("КодВычета312", Справочники.ВычетыНДФЛ.Код640);
		//Запрос.УстановитьПараметр("КодВычета640Страх", Справочники.ВычетыНДФЛ.Код640Страх);
		Запрос.УстановитьПараметр("КодВычета311", Справочники.ВычетыНДФЛ.Код650);
		
		КодыВычетовРезидентов = Новый Массив;
		//Вычеты (льготы) кратные базовой величине
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код500);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код510);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код520);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код530);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код540);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код550);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код560);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код570);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код571);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код580);
		//Расходы по авторским
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код404);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код405);
		Запрос.УстановитьПараметр("КодыВычетовРезидентов", КодыВычетовРезидентов);
		
		//НачМесяца = НачалоГода(ПервыйМесяцНалоговогоПериода);
		//ДатыПоМесяцамТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период";
		//ДатыПоМесяцамТекст = ДатыПоМесяцамТекст +"
		//|ПОМЕСТИТЬ ВТДатыПоМесяцам";
		//Пока НачМесяца < НачалоМесяца(ПоследнийМесяцНалоговогоПериода) Цикл
		//	НачМесяца = НачалоМесяца(КонецМесяца(НачМесяца) + 1);
		//	ДатыПоМесяцамТекст = ДатыПоМесяцамТекст +"
		//	|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
		//КонецЦикла;
		//ДатыПоМесяцамТекст = ДатыПоМесяцамТекст +"
		//|ИНДЕКСИРОВАТЬ ПО Период";
		
		НачМесяца = НачалоГода(ПервыйМесяцНалоговогоПериода);
		ДатыПоМесяцамТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период";
		ДатыПоМесяцамТекстД = ДатыПоМесяцамТекст;
		ДатыПоМесяцамТекст = ДатыПоМесяцамТекст +"
		|ПОМЕСТИТЬ ВТДатыПоМесяцам";
		Пока НачМесяца < НачалоМесяца(ПоследнийМесяцНалоговогоПериода) Цикл
			НачМесяца = НачалоМесяца(КонецМесяца(НачМесяца) + 1);
			ДатыПоМесяцамТекст = ДатыПоМесяцамТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
			ДатыПоМесяцамТекстД = ДатыПоМесяцамТекстД +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
		КонецЦикла;
		ДатыПоМесяцамТекст = ДатыПоМесяцамТекст +"
		|ИНДЕКСИРОВАТЬ ПО Период";
		
		Запрос.Текст = ДатыПоМесяцамТекстД;
		Запрос.Текст = ДатыПоМесяцамТекст;
		Запрос.Выполнить();
		
		// Периоды
		// Таблица список периодов-физлиц по которым необходимо выполнить расчет налога
		// Поля:
		//		Период
		//		Физлицо
		
		Если ЭтоПерерасчет Тогда
			
			ПериодыТекст = 
			"ВЫБРАТЬ
			|	Работники.Физлицо,
			|	Месяцы.Период
			|ПОМЕСТИТЬ ВТПериоды
			|ИЗ
			|	ВТСписокФизЛиц КАК Работники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
			|		ПО (ИСТИНА)
			|ИНДЕКСИРОВАТЬ ПО Физлицо, Период";
			
			ПериодыТекст1 = 
			"ВЫБРАТЬ
			|	Работники.Физлицо,
			|	Месяцы.Период
			|ИЗ
			|	ВТСписокФизЛиц КАК Работники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
			|		ПО (ИСТИНА)";
		Иначе
			
			ПериодыТекст = 
			"ВЫБРАТЬ
			|	ПериодыДохода.ФизЛицо,
			|	Месяцы.Период
			|ПОМЕСТИТЬ ВТПериоды
			|ИЗ
			|	(ВЫБРАТЬ
			|		НДФЛСведенияОДоходах.ФизЛицо КАК ФизЛицо,
			|		МАКСИМУМ(НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ)) КАК ПериодМакс,
			|		МИНИМУМ(ВЫБОР
			|				КОГДА НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации
			|					ТОГДА НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, ГОД)
			//vvv
			//|				ИНАЧЕ &парамНачалоГодаРегистрации
			|				ИНАЧЕ ВЫБОР КОГДА ДатыПересчета.ДатаПересчета ЕСТЬ NULL ТОГДА &парамНачалоГодаРегистрации ИНАЧЕ ДатыПересчета.ДатаПересчета КОНЕЦ
			//
			|			КОНЕЦ) КАК ПериодМин
			|	ИЗ
			|		РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК Работники
			|		ПО Работники.Физлицо = НДФЛСведенияОДоходах.ФизЛицо
			//vvv
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПересчета КАК ДатыПересчета
			|		ПО ДатыПересчета.Физлицо = НДФЛСведенияОДоходах.ФизЛицо
			//
			|	ГДЕ
			//vvv
			//|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) МЕЖДУ &парамНачалоГодаРегистрации И &парамПериодРегистрации
			|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) МЕЖДУ ВЫБОР КОГДА ДатыПересчета.ДатаПересчета ЕСТЬ NULL ТОГДА &парамНачалоГодаРегистрации ИНАЧЕ ДатыПересчета.ДатаПересчета КОНЕЦ И &парамПериодРегистрации
			//
			|		И НДФЛСведенияОДоходах.Организация = &парамОрганизация
			|	
			|	СГРУППИРОВАТЬ ПО
			|		НДФЛСведенияОДоходах.ФизЛицо) КАК ПериодыДохода
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
			|		ПО (Месяцы.Период МЕЖДУ ПериодыДохода.ПериодМин И ПериодыДохода.ПериодМакс)
			|ИНДЕКСИРОВАТЬ ПО Физлицо, Период";
			
		КонецЕсли;

		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		ПериодыТекст = "ВТПериоды";
		
		// ПодразделенияРаботников
		//	Поля:
		//		Физлицо
		//		Период
		//		ПодразделениеОрганизации
		//
		//	Описание:
		//	список подразделений в которых работают физлица по состоянию на конец месяца налогового периода
		
		ПодразделенияРаботниковТекст = 
		"ВЫБРАТЬ
		|	Периоды.Физлицо КАК Физлицо,
		|	Периоды.Период КАК Период,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ) >= РаботникиОрганизаций.ПериодЗавершения  
		|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
		|			ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
		|		КОНЕЦ КАК ПодразделениеОрганизации
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.ФизЛицо КАК Физлицо,
		|		Периоды.Период КАК Период,
		|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаРегистра,
		|		РаботникиОрганизаций.Организация КАК Организация
		|	ИЗ
		|		ВТПериоды КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|			ПО КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ) >= РаботникиОрганизаций.Период
		|				И Периоды.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
		|	ГДЕ
		|		РаботникиОрганизаций.Организация = &парамОрганизация
		|		И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|		И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.ФизЛицо,
		|		Периоды.Период,
		|		РаботникиОрганизаций.Организация) КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО Периоды.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо
		|			И Периоды.ДатаРегистра = РаботникиОрганизаций.Период
		|			И Периоды.Организация = РаботникиОрганизаций.Организация
		|ГДЕ
	 	|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ) >= РаботникиОрганизаций.ПериодЗавершения 
		|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
		|			ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
		|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|	И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)";
		
		// ПодразделенияДоговорников
		//	Поля:
		//		Физлицо
		//		Период
		//		ПодразделениеОрганизации
		//
		//	Описание:
		//	список подразделений в которых работают физлица по состоянию на конец месяца налогового периода
		ПодразделенияДоговорниковТекст = 
		"ВЫБРАТЬ
		|	ДатыПоследнихДоговоров.Физлицо КАК Физлицо,
		|	МАКСИМУМ(ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации) КАК ПодразделениеОрганизации,
		|	ДатыПоследнихДоговоров.Период
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		Периоды.Физлицо КАК Физлицо,
		|		ДоговорНаВыполнениеРаботСФизЛицом.Организация КАК Организация,
		|		МАКСИМУМ(ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала) КАК ДатаНачала
		|	ИЗ
		|		ВТПериоды КАК Периоды
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
		|				ПО (ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
		|					И (ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ))
		|					И Периоды.ФизЛицо = ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо
		|		ГДЕ
		|			ДоговорНаВыполнениеРаботСФизЛицом.Организация = &парамОбособленноеПодразделение
		|			
		|		СГРУППИРОВАТЬ ПО
		|			Периоды.Период,
		|			Периоды.ФизЛицо,
		|			ДоговорНаВыполнениеРаботСФизЛицом.Организация) КАК ДатыПоследнихДоговоров
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
		|			ПО ДатыПоследнихДоговоров.Организация = ДоговорНаВыполнениеРаботСФизЛицом.Организация
		|				И ДатыПоследнихДоговоров.ДатаНачала = ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
		|				И ДатыПоследнихДоговоров.Физлицо = ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо
		|		
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыПоследнихДоговоров.Физлицо,
		|	ДатыПоследнихДоговоров.Организация,
		|	ДатыПоследнихДоговоров.Период";

		ПодразделенияПоМесяцамТекст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодразделенияРаботников.Физлицо,
		|	ПодразделенияРаботников.Период,
		|	ЕСТЬNULL(ПодразделенияРаботников.ПодразделениеОрганизации,ПодразделенияДоговорников.ПодразделениеОрганизации) КАК ПодразделениеОрганизации
		|ИЗ		
		|	("+ПодразделенияРаботниковТекст+") КАК ПодразделенияРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ("+ПодразделенияДоговорниковТекст+") КАК ПодразделенияДоговорников
		|		ПО ПодразделенияРаботников.Период = ПодразделенияДоговорников.Период 
		|			И ПодразделенияРаботников.ФизЛицо = ПодразделенияДоговорников.Физлицо
		|	УПОРЯДОЧИТЬ ПО ПодразделенияРаботников.Физлицо.Наименование, ПодразделенияРаботников.Период";

		// ФизлицаНеРезиденты
		//	Поля:
		//		Физлицо
		//
		//	Описание:
		//	сисок физлиц-нерезидентов

		ФизлицаНеРезидентыТекст = 
		"ВЫБРАТЬ
		|	ГражданствоФизЛиц.ФизЛицо КАК Физлицо,
		|	ГражданствоПоГодам.ПериодФизлица КАК Период
		|ИЗ
		|	РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ГражданствоФизЛиц.ФизЛицо КАК Физлицо,
		|			Физлица.Период КАК ПериодФизлица,
		|			МАКСИМУМ(ГражданствоФизЛиц.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериоды КАК Физлица
		|				ПО Физлица.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
		|					И (ГражданствоФизЛиц.Период <= ВЫБОР
		|						КОГДА КОНЕЦПЕРИОДА(Физлица.Период, ГОД) >= КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
		|							ТОГДА КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
		|						ИНАЧЕ КОНЕЦПЕРИОДА(Физлица.Период, ГОД)
		|					КОНЕЦ)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ГражданствоФизЛиц.ФизЛицо,
		|			Физлица.Период) КАК ГражданствоПоГодам
		|		ПО ГражданствоПоГодам.Физлицо = ГражданствоФизЛиц.ФизЛицо
		|			И ГражданствоПоГодам.Период = ГражданствоФизЛиц.Период
		|ГДЕ
		|	ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРФ";

		// ДоходыСКодамиВычетов
		//	Поля:
		//		ФизЛицо
		//		Период
		//		КодДохода
		//		КодВычета
		//		СуммаДоходаОборот
		//		СуммаВычетаОборот
		//
		//	Описание:
		// Выбирает облагаемые налогом доходы за весь год по физлицам из СписокФизлиц
		ДоходыСКодамиВычетовТекст = 
		"ВЫБРАТЬ
		|	НДФЛОбороты.Физлицо КАК ФизЛицо,
		|	НДФЛОбороты.Период КАК Период,
		|	НДФЛОбороты.КодДохода КАК КодДохода,
		|	НДФЛОбороты.КодВычета КАК КодВычета,
		|	СУММА(НДФЛОбороты.СуммаДоходаОборот) КАК СуммаДоходаОборот,
		|	СУММА(НДФЛОбороты.СуммаВычетаОборот) КАК СуммаВычетаОборот
		|ПОМЕСТИТЬ ВТДоходыСКодамиВычетов
		|ИЗ
		|	(ВЫБРАТЬ
		|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|		НДФЛСведенияОДоходах.ФизЛицо КАК Физлицо,
		|		НДФЛСведенияОДоходах.КодДохода КАК КодДохода,
		|		НДФЛСведенияОДоходах.КодВычета КАК КодВычета,
		|		ЕСТЬNULL(СУММА(НДФЛСведенияОДоходах.СуммаДохода), 0) КАК СуммаДоходаОборот,
		|		ЕСТЬNULL(СУММА(НДФЛСведенияОДоходах.СуммаВычета), 0) КАК СуммаВычетаОборот
		|	ИЗ
		|		ВТПериоды КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
		|			ПО Периоды.Физлицо = НДФЛСведенияОДоходах.ФизЛицо
		|				И (Периоды.Период = НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ))
		|	ГДЕ
		|		НДФЛСведенияОДоходах.Период >= &парамНачалоГода И
		|		НДФЛСведенияОДоходах.Период <= &парамКонецМесяцаНалоговогоПериода
	//	|		И НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) <= &парамПериодРегистрации
		|		И НДФЛСведенияОДоходах.Организация = &парамОрганизация
		|		И НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка13
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ),
		|		НДФЛСведенияОДоходах.ФизЛицо,
		|		НДФЛСведенияОДоходах.КодДохода,
		|		НДФЛСведенияОДоходах.КодВычета) КАК НДФЛОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДФЛОбороты.Физлицо,
		|	НДФЛОбороты.Период,
		|	НДФЛОбороты.КодДохода,
		|	НДФЛОбороты.КодВычета
		|ИНДЕКСИРОВАТЬ ПО Физлицо, Период";
		
		Запрос.Текст = ДоходыСКодамиВычетовТекст;
		Запрос.Выполнить();

		Ставка30Текст        = "0.15";
		ТипЗначенияНДФЛТекст = "ЧИСЛО(10, 0)";
		
		ПериодыСКодамиТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодФизлицо.Период КАК Период,
		|	ПериодФизлицо.Физлицо КАК Физлицо,
		|	ВЫБОР
		|		КОГДА ФизлицаНеРезиденты.Физлицо ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Резидент
		|ПОМЕСТИТЬ ВТПериодыСКодами
		|ИЗ
		|	ВТПериоды КАК ПериодФизлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ФизлицаНеРезидентыТекст + ") КАК ФизлицаНеРезиденты
		|		ПО ФизлицаНеРезиденты.Физлицо = ПериодФизлицо.Физлицо
		|			И ФизлицаНеРезиденты.Период = ПериодФизлицо.Период";
		
		Запрос.Текст = ПериодыСКодамиТекст;
		Запрос.Выполнить();

		// ДоходыЗаГод 
		//	Поля:
		//		ФизЛицо
		//		Период
		//		Резидент
		//		ОблагаемыйДоходЗаГод
		//
		//	Описание:
		//	Выбирает по всем периодам с начала года сумму дохода нарастающим итогом за год

		ДоходыЗаГодТекст = "
		|ВЫБРАТЬ
		|	НДФЛОбороты.Период КАК Период,
		|	НДФЛОбороты.ФизЛицо КАК ФизЛицо,
		|	НДФЛОбороты.Резидент КАК Резидент,
		|	СУММА(НДФЛОбороты.НалогНерезидента) КАК НалогНерезидента,
		|	СУММА(НДФЛОбороты.ОблагаемыйДоходЗаПериод) КАК ОблагаемыйДоходЗаПериод,
		|	СУММА(НДФЛОбороты.ОблагаемыйДоходЗаГод) КАК ОблагаемыйДоходЗаГод
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		Периоды.Физлицо КАК ФизЛицо,
		|		Периоды.Резидент КАК Резидент,
		|		ВЫБОР КОГДА НДФЛОбороты.Период = Периоды.Период ТОГДА ВЫРАЗИТЬ((НДФЛОбороты.СуммаДоходаОборот - ВЫБОР КОГДА Периоды.Резидент ИЛИ НДФЛОбороты.КодВычета НЕ В (&КодыВычетовРезидентов) ТОГДА НДФЛОбороты.СуммаВычетаОборот ИНАЧЕ 0 КОНЕЦ) * " + Ставка30Текст + " КАК " + ТипЗначенияНДФЛТекст + ") ИНАЧЕ 0 КОНЕЦ КАК НалогНерезидента,
		|       ВЫБОР КОГДА НДФЛОбороты.Период = Периоды.Период ТОГДА НДФЛОбороты.СуммаДоходаОборот - ВЫБОР КОГДА Периоды.Резидент ИЛИ НДФЛОбороты.КодВычета НЕ В (&КодыВычетовРезидентов) ТОГДА НДФЛОбороты.СуммаВычетаОборот ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК ОблагаемыйДоходЗаПериод,
		|		НДФЛОбороты.СуммаДоходаОборот - ВЫБОР КОГДА Периоды.Резидент ИЛИ НДФЛОбороты.КодВычета НЕ В (&КодыВычетовРезидентов) ТОГДА НДФЛОбороты.СуммаВычетаОборот ИНАЧЕ 0 КОНЕЦ КАК ОблагаемыйДоходЗаГод
		|	ИЗ
		|		ВТПериодыСКодами КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыСКодамиВычетов КАК НДФЛОбороты
		|			ПО (НДФЛОбороты.Период МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) И Периоды.Период) И Периоды.Физлицо = НДФЛОбороты.Физлицо) КАК НДФЛОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДФЛОбороты.Период,
		|	НДФЛОбороты.ФизЛицо,
		|	НДФЛОбороты.Резидент";

		// НДФЛРасчетыСБюджетом
		//	Поля:
		//		ФизЛицо
		//		МесяцНалоговогоПериода
		//		ИсчисленныйНалог
		//		ПримененныеВычетыЛичные - уже примененные личные стандартные вычеты по НДФЛ
		//		ПолеПримененныеВычетыДетские - уже примененные вычеты на детей по НДФЛ
		//
		//	Описание:
		//	Выбирает исчисленные налоги (приходы по регистру НДФЛРасчетыСБюджетом)
		//  для СписокФизлиц

		НДФЛРасчетыСБюджетомТекст = 
		"ВЫБРАТЬ
		|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
		|	СУММА(НДФЛРасчетыСБюджетом.Налог) КАК ИсчисленныйНалог,
		|	СУММА(НДФЛРасчетыСБюджетом.ПримененныйВычетЛичный) КАК ПримененныеВычетыЛичные,
		|	СУММА(НДФЛРасчетыСБюджетом.ПримененныйВычетНаДетей) КАК ПолеПримененныеВычетыДетские,
		|	СУММА(НДФЛРасчетыСБюджетом.ПримененныйВычетНаДетейЛьгота) КАК ПолеПримененныеВычетыДетскиеЛьгота,
		|	СУММА(НДФЛРасчетыСБюджетом.ПримененныйДополнительныйВычет) КАК ПолеПримененныеВычетыДополнительные
		|ИЗ
		|	РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК РаботникиОрганизации
		|		ПО РаботникиОрганизации.Физлицо = НДФЛРасчетыСБюджетом.ФизЛицо
		|ГДЕ
		|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода >= &парамНачалоГода
		|	И НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода <= &парамКонецМесяцаНалоговогоПериода
		|	И НДФЛРасчетыСБюджетом.Организация = &парамОрганизация
		|	И НДФЛРасчетыСБюджетом.Регистратор <> &парамРегистратор
		|	И НДФЛРасчетыСБюджетом.Период <= &парамКонецМесяцаНалоговогоПериода //КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
		|	И НДФЛРасчетыСБюджетом.ВидДвижения = &парамПриход
		|	И НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента = &парамСтавка13
		|	И НДФЛРасчетыСБюджетом.ВидСтроки = &парамВидСтроки
		|
		|СГРУППИРОВАТЬ ПО
		|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода,
		|	НДФЛРасчетыСБюджетом.ФизЛицо";

		// НДФЛРасчетыСБюджетомЗаГод
		//	Поля:
		//		ФизЛицо
		//		Период
		//		ИсчисленныйНалогЗаГод
		//		ПримененныеВычетыЛичныеЗаГод
		//		ПолеПримененныеВычетыДетскиеЗаГод
		//		ПолеПримененныеВычетыНаДетейИнвалидовЗаГод
		//
		//	Описание:
		//	Выбирает исчисленные налоги нарастающим итогом за год
		
		НДФЛРасчетыСБюджетомЗаГодТекст = 
		"ВЫБРАТЬ
		|	Периоды.Период КАК Период,
		|	НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
		|   СУММА(ВЫБОР 
		|	    КОГДА ФизлицаНеРезиденты.ФизЛицо ЕСТЬ NULL 
		|	    ТОГДА ЕСТЬNULL(НДФЛРасчетыСБюджетом.ИсчисленныйНалог,0)
		|	    КОГДА Периоды.Период = НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода
		|	    ТОГДА ЕСТЬNULL(НДФЛРасчетыСБюджетом.ИсчисленныйНалог, 0)
		|   КОНЕЦ) КАК ИсчисленныйНалогГод,
		|	СУММА(ЕСТЬNULL(НДФЛРасчетыСБюджетом.ПримененныеВычетыЛичные, 0)) КАК ПримененныеВычетыЛичныеЗаГод,
		|	СУММА(ЕСТЬNULL(НДФЛРасчетыСБюджетом.ПолеПримененныеВычетыДетские, 0)) КАК ПолеПримененныеВычетыДетскиеЗаГод,
		|	СУММА(НДФЛРасчетыСБюджетом.ПолеПримененныеВычетыДетскиеЛьгота) КАК ПолеПримененныеВычетыДетскиеЛьготаЗаГод,
		|	СУММА(НДФЛРасчетыСБюджетом.ПолеПримененныеВычетыДополнительные) КАК ПолеПримененныеВычетыДополнительныеЗаГод,
		|	СУММА(ВЫБОР КОГДА Периоды.Период = НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода ТОГДА ЕСТЬNULL(НДФЛРасчетыСБюджетом.ПримененныеВычетыЛичные, 0) ИНАЧЕ 0 КОНЕЦ) КАК ПримененныеВычетыЛичныеЗаМесяц,
		|	СУММА(ВЫБОР КОГДА Периоды.Период = НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода ТОГДА ЕСТЬNULL(НДФЛРасчетыСБюджетом.ПолеПримененныеВычетыДетские, 0) ИНАЧЕ 0 КОНЕЦ) КАК ПолеПримененныеВычетыДетскиеЗаМесяц,
		|	СУММА(ВЫБОР КОГДА Периоды.Период = НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода ТОГДА ЕСТЬNULL(НДФЛРасчетыСБюджетом.ПолеПримененныеВычетыДетскиеЛьгота, 0) ИНАЧЕ 0 КОНЕЦ) КАК ПолеПримененныеВычетыДетскиеЛьготаЗаМесяц,
		|	СУММА(ВЫБОР КОГДА Периоды.Период = НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода ТОГДА ЕСТЬNULL(НДФЛРасчетыСБюджетом.ПолеПримененныеВычетыДополнительные, 0) ИНАЧЕ 0 КОНЕЦ) КАК ПолеПримененныеВычетыДополнительныеЗаМесяц
		|ИЗ
		|	ВТПериоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + НДФЛРасчетыСБюджетомТекст + ") КАК НДФЛРасчетыСБюджетом
		|		ПО (НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) И Периоды.Период)
		|			И Периоды.Физлицо = НДФЛРасчетыСБюджетом.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ФизлицаНеРезидентыТекст + ") КАК ФизлицаНеРезиденты
		|		ПО ФизлицаНеРезиденты.Физлицо = Периоды.Физлицо
		|			И ФизлицаНеРезиденты.Период = Периоды.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.Период,
		|	НДФЛРасчетыСБюджетом.ФизЛицо,
		|	ФизлицаНеРезиденты.ФизЛицо";
		
		Запрос.Текст = НДФЛРасчетыСБюджетомЗаГодТекст;
		Запрос.Выполнить();

		// ПрименениеВычетовВОрганизации
		//	Поля:
		//		Физлицо,
		//		Период
		//
		// Описание:
		//	Выбирает список физлиц + периодв в которые применяются стандартные вычеты по 
		//	заданной организации

		ПрименениеВычетовВОрганизацииТекст = 
		"ВЫБРАТЬ
		|	НДФЛПрименениеВычетовСрезПоследних.Физлицо КАК Физлицо,
		|	НДФЛПрименениеВычетовСрезПоследних.Период КАК Период
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(НДФЛПрименениеВычетов.Период) КАК ПериодСреза,
		|		НДФЛПрименениеВычетов.Физлицо КАК Физлицо,
	//	|		Периоды.Физлицо КАК Физлицо,
		|		Периоды.Период КАК Период
		|	ИЗ
		|		ВТПериоды КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
		|			ПО Периоды.Период >= НДФЛПрименениеВычетов.Период //И НДФЛПрименениеВычетов.Физлицо = Периоды.Физлицо
		
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НДФЛПрименениеВычетов.Физлицо,
		|		Периоды.Период) КАК НДФЛПрименениеВычетовСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
		|		ПО НДФЛПрименениеВычетов.Период = НДФЛПрименениеВычетовСрезПоследних.ПериодСреза И НДФЛПрименениеВычетов.Физлицо = НДФЛПрименениеВычетовСрезПоследних.Физлицо
		|
		|ГДЕ
		|	НДФЛПрименениеВычетов.Организация = &парамОрганизация";
		
		// НДФЛРазмерВычетов
		// Таблица "НДФЛРазмерВычетов": - таблица это список вычетов, их размер, ограничения по доходам
		// поля:
		//		Период, 
		//		КодВычета,
		//		Размер, 
		//		ОграничениеПоДоходам,
		// Описание:	
		//	Выбираем Из Список периодов (период - год)
		//	Левое соединение с НДФЛРазмерВычетов
		//	по равенству периодов
		// 
		
		// первый год
		НачМесяца = НачалоГода(ПервыйМесяцНалоговогоПериода);
		ПериодыТекстПоГодам = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период";
		Пока НачМесяца < НачалоМесяца(ПоследнийМесяцНалоговогоПериода) Цикл
			НачМесяца = НачалоМесяца(КонецМесяца(НачМесяца) + 1);
			ПериодыТекстПоГодам = ПериодыТекстПоГодам +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
		КонецЦикла;
		
		Запрос.Текст = ПериодыТекстПоГодам;
		//НДФЛРазмерВычетов =
		//"ВЫБРАТЬ
		//|	Периоды.Период КАК Период,
		//|	ЕСТЬNULL(НДФЛРазмерВычетов.КодВычета, 0) КАК КодВычета,
		//|	НДФЛРазмерВычетов.Размер КАК Размер,
		//|	НДФЛРазмерВычетов.ОграничениеПоДоходам КАК ОграничениеПоДоходам
		//|ИЗ
		//|	(ВЫБРАТЬ
		//|		Периоды.Период КАК Период,
		//|		НДФЛРазмерВычетов.КодВычета КАК КодВычета,
		//|		МАКСИМУМ(НДФЛРазмерВычетов.Период) КАК ПериодРегистра
		//|	ИЗ
		//|		("+ПериодыТекстПоГодам+") КАК Периоды
		//|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов КАК НДФЛРазмерВычетов
		//|			ПО Периоды.Период >= НДФЛРазмерВычетов.Период
		//|	
		//|	СГРУППИРОВАТЬ ПО
		//|		Периоды.Период,
		//|		НДФЛРазмерВычетов.КодВычета) КАК Периоды
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов КАК НДФЛРазмерВычетов
		//|		ПО НДФЛРазмерВычетов.Период = Периоды.ПериодРегистра И Периоды.КодВычета = НДФЛРазмерВычетов.КодВычета ";

		БазовыеВеличиныПоМесяцам = 
		"ВЫБРАТЬ
		|	Периоды.Период КАК Период,
		|	БазоваяВеличинаРег.Размер    
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		МАКСИМУМ(БазоваяВеличинаРег.Период) КАК ПериодРегистра
		|	ИЗ
		|		("+ПериодыТекстПоГодам+") КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК БазоваяВеличинарег
		|			ПО БазоваяВеличинарег.Период <= Периоды.Период И БазоваяВеличинаРег.ВидПараметра = &БазоваяВеличина
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.Период) КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК БазоваяВеличинарег
		|		ПО БазоваяВеличинарег.Период = Периоды.Периодрегистра И БазоваяВеличинаРег.ВидПараметра = &БазоваяВеличина";
		
		Запрос.Текст = БазовыеВеличиныПоМесяцам;
		
		НДФЛРазмерВычетов =
		"ВЫБРАТЬ
		|	Периоды.Период КАК Период,
		|	ВЫБОР КОГДА (НДФЛРазмерВычетов.КодВычета) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ НДФЛРазмерВычетов.КодВычета КОНЕЦ КАК КодВычета,
		|	НДФЛРазмерВычетов.Размер * БазоваяВеличина.Размер КАК Размер,    
		|	НДФЛРазмерВычетов.ОграничениеПоДоходам КАК ОграничениеПоДоходам
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		НДФЛРазмерВычетов.КодВычета КАК КодВычета,
		|		МАКСИМУМ(НДФЛРазмерВычетов.Период) КАК ПериодРегистра
		|	ИЗ
		|		("+ПериодыТекстПоГодам+") КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов КАК НДФЛРазмерВычетов
		|			ПО Периоды.Период >= НДФЛРазмерВычетов.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.Период,
		|		НДФЛРазмерВычетов.КодВычета) КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ("+БазовыеВеличиныПоМесяцам+") КАК БазоваяВеличина
		|		ПО БазоваяВеличина.Период = Периоды.Период 
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов КАК НДФЛРазмерВычетов
		|		ПО НДФЛРазмерВычетов.Период = Периоды.ПериодРегистра И Периоды.КодВычета = НДФЛРазмерВычетов.КодВычета ";

		Запрос.Текст =  НДФЛРазмерВычетов;
		// ПраваНаВычеты
		//	Поля:
		//		Физлицо
		//		Период
		//		СтандартныеВычетыЛичные
		//		СтандартныеВычетыДетские
		//
		//	Описание:
		//	Выбирает по всем периодам года стандартные вычеты на которые имеет право физлицо

		ПраваНаВычетыТекст = 
		"ВЫБРАТЬ
		|	НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо КАК Физлицо,
		|	НДФЛСтандартныеВычетыФизлицСрезПоследних.Период КАК Период,
		|	НДФЛРазмерВычетовЛичный.ОграничениеПоДоходам КАК ОграничениеПоДоходамЛичные,
		|	НДФЛРазмерВычетовНаДетей.ОграничениеПоДоходам КАК ОграничениеПоДоходамНаДетей,
	//	|	НДФЛРазмерВычетовНаДетейИнвалидов.ОграничениеПоДоходам КАК ОграничениеПоДоходамНаДетейИнвалидов,
		|	ВЫБОР КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ЕСТЬNULL(НДФЛРазмерВычетовЛичный.Размер, 0) КОНЕЦ КАК СтандартныеВычетыЛичные,
		|	ВЫБОР КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ЕСТЬNULL(НДФЛРазмерВычетовНаДетей.Размер, 0) * ЕСТЬNULL(ВычетыФизлиц.КоличествоДетей, 0) КОНЕЦ КАК СтандартныеВычетыДетские,
		|	ВЫБОР КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ВЫБОР КОГДА (НДФЛРазмерВычетовНаДетейЛьгота.Размер) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НДФЛРазмерВычетовНаДетейЛьгота.Размер КОНЕЦ * ВЫБОР КОГДА (ВычетыФизлиц.КоличествоДетейЛьгота) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ВычетыФизлиц.КоличествоДетейЛьгота КОНЕЦ КОНЕЦ КАК СтандартныеВычетыДетскиеЛьгота,
		|	ВЫБОР КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ВЫБОР КОГДА (НДФЛРазмерВычетовДополнительный.Размер) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НДФЛРазмерВычетовДополнительный.Размер КОНЕЦ КОНЕЦ КАК СтандартныеВычетыДополнительные
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(ВычетыФизлиц.Период) КАК ПериодСреза,
		|		ВычетыФизЛиц.Физлицо КАК Физлицо,
	//	|		Периоды.Физлицо КАК Физлицо,
		|		Периоды.Период КАК Период
		|	ИЗ
		|		ВТПериоды КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
		|			ПО ВычетыФизлиц.Период <= Периоды.Период И ВычетыФизлиц.Физлицо = Периоды.Физлицо
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВычетыФизЛиц.Физлицо,
		|		Периоды.Период) КАК НДФЛСтандартныеВычетыФизлицСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
		|		ПО ВычетыФизлиц.Период = НДФЛСтандартныеВычетыФизлицСрезПоследних.ПериодСреза И ВычетыФизлиц.Физлицо = НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + НДФЛРазмерВычетов + ") КАК НДФЛРазмерВычетовЛичный
		|		ПО НДФЛРазмерВычетовЛичный.КодВычета = ВычетыФизлиц.КодВычетаЛичный И НДФЛРазмерВычетовЛичный.Период = НАЧАЛОПЕРИОДА(НДФЛСтандартныеВычетыФизлицСрезПоследних.Период, Месяц)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + НДФЛРазмерВычетов + ") КАК НДФЛРазмерВычетовНаДетей
		|		ПО НДФЛРазмерВычетовНаДетей.КодВычета = ВычетыФизлиц.КодВычетаНаДетей И НДФЛРазмерВычетовНаДетей.Период = НАЧАЛОПЕРИОДА(НДФЛСтандартныеВычетыФизлицСрезПоследних.Период, Месяц)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + НДФЛРазмерВычетов + ") КАК НДФЛРазмерВычетовНаДетейЛьгота
		|		ПО НДФЛРазмерВычетовНаДетейЛьгота.КодВычета = ВычетыФизлиц.КодВычетаНаДетейЛьгота И НДФЛРазмерВычетовНаДетейЛьгота.Период = НАЧАЛОПЕРИОДА(НДФЛСтандартныеВычетыФизлицСрезПоследних.Период, Месяц)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + НДФЛРазмерВычетов + ") КАК НДФЛРазмерВычетовДополнительный
		|		ПО НДФЛРазмерВычетовДополнительный.КодВычета = ВычетыФизлиц.КодВычетаДополнительный И НДФЛРазмерВычетовДополнительный.Период = НАЧАЛОПЕРИОДА(НДФЛСтандартныеВычетыФизлицСрезПоследних.Период, Месяц)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименениеВычетовВОрганизацииТекст + ") КАК ПрименениеВычетов
		|		ПО ПрименениеВычетов.Физлицо = НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо И ПрименениеВычетов.Период = НДФЛСтандартныеВычетыФизлицСрезПоследних.Период";

		// ПрименяемыеВычеты
		// Поля:
		//		Физлицо
		//		Период
		//		ПрименяемыеВычетыЛичные
		//		ПрименяемыеВычетыДетские
		//
		//	Описание:
		//	Выбирает по всем периодам года применяемые стандартные вычеты
		//  с использованием ограничения по доходам
		
			//"ВЫБРАТЬ
			//|	РаботникиОргПраваНаВычеты.Физлицо КАК Физлицо,
			//|	РаботникиОргПраваНаВычеты.Период КАК Период,
			//|	ВЫБОР КОГДА ВЫБОР КОГДА (ДоходыЗаГод.ОблагаемыйДоходЗаГод) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ДоходыЗаГод.ОблагаемыйДоходЗаГод КОНЕЦ + ВЫБОР КОГДА (НДФЛДоходыПредыдущегоМестаРаботы.Размер) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НДФЛДоходыПредыдущегоМестаРаботы.Размер КОНЕЦ <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамЛичные  ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамЛичные  = 0 ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыЛичные  ИНАЧЕ 0 КОНЕЦ КАК ПрименяемыеВычетыЛичные,
			//|	ВЫБОР КОГДА ВЫБОР КОГДА (ДоходыЗаГод.ОблагаемыйДоходЗаГод) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ДоходыЗаГод.ОблагаемыйДоходЗаГод КОНЕЦ + ВЫБОР КОГДА (НДФЛДоходыПредыдущегоМестаРаботы.Размер) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НДФЛДоходыПредыдущегоМестаРаботы.Размер КОНЕЦ <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей = 0 ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские ИНАЧЕ 0 КОНЕЦ КАК ПрименяемыеВычетыДетские,
			//|	ВЫБОР КОГДА ВЫБОР КОГДА (ДоходыЗаГод.ОблагаемыйДоходЗаГод) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ДоходыЗаГод.ОблагаемыйДоходЗаГод КОНЕЦ + ВЫБОР КОГДА (НДФЛДоходыПредыдущегоМестаРаботы.Размер) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НДФЛДоходыПредыдущегоМестаРаботы.Размер КОНЕЦ <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетейИнвалидов ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетейИнвалидов = 0 ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов ИНАЧЕ 0 КОНЕЦ КАК ПрименяемыеВычетыДетскиеИнвалидов
			//|ИЗ
			//|	(" + ПраваНаВычетыТекст + ") КАК РаботникиОргПраваНаВычеты
			//|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ДоходыЗаГодТекст + ") КАК ДоходыЗаГод
			//|		ПО ДоходыЗаГод.Период = РаботникиОргПраваНаВычеты.Период И ДоходыЗаГод.ФизЛицо = РаботникиОргПраваНаВычеты.Физлицо
			//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛДоходыПредыдущегоМестаРаботы КАК НДФЛДоходыПредыдущегоМестаРаботы
			//|		ПО (НДФЛДоходыПредыдущегоМестаРаботы.Организация = &парамОрганизация) И НДФЛДоходыПредыдущегоМестаРаботы.МесяцНалоговогоПериода = РаботникиОргПраваНаВычеты.Период И НДФЛДоходыПредыдущегоМестаРаботы.ФизЛицо = РаботникиОргПраваНаВычеты.Физлицо";

		ПрименяемыеВычетыТекст = 
	 	"ВЫБРАТЬ
		|	РаботникиОргПраваНаВычеты.Физлицо КАК Физлицо,
		|	РаботникиОргПраваНаВычеты.Период КАК Период,
		|	ДоходыЗаГод.ОблагаемыйДоходЗаГод КАК ДоходДляНалога, //+ НДФЛДоходыПредыдущегоМестаРаботы.Размер КАК ДоходДляНалога,
		//Минск н
		|	РаботникиОргПраваНаВычеты.СтандартныеВычетыЛичные КАК ПрименяемыеВычетыЛичные,
		|	РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские КАК ПрименяемыеВычетыДетские,
		|	РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеЛьгота КАК ПрименяемыеВычетыДетскиеЛьгота,
		|	РаботникиОргПраваНаВычеты.СтандартныеВычетыДополнительные КАК ПрименяемыеВычетыДополнительные
		//Минск к
		|ИЗ
		|	(" + ПраваНаВычетыТекст + ") КАК РаботникиОргПраваНаВычеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ДоходыЗаГодТекст + ") КАК ДоходыЗаГод
		|		ПО ДоходыЗаГод.Период = РаботникиОргПраваНаВычеты.Период И ДоходыЗаГод.ФизЛицо = РаботникиОргПраваНаВычеты.Физлицо";
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛДоходыПредыдущегоМестаРаботы КАК НДФЛДоходыПредыдущегоМестаРаботы
		//|		ПО (НДФЛДоходыПредыдущегоМестаРаботы.Организация = &парамОрганизация) И НДФЛДоходыПредыдущегоМестаРаботы.МесяцНалоговогоПериода = РаботникиОргПраваНаВычеты.Период И НДФЛДоходыПредыдущегоМестаРаботы.ФизЛицо = РаботникиОргПраваНаВычеты.Физлицо";

		// ПрименяемыеВычетыЗаГод
		//	Поля:
		//		Физлицо
		//		Период
		//		ВычетыЛичныеЗаГод
		//		ВычетыДетскиеЗаГод
		//
		//	Описание:
		//	Выбирает по всем периодам года применяемые стандартные вычеты нарастающим итогом за год
		//

		ПрименяемыеВычетыЗаГодТекст = 
		"ВЫБРАТЬ
		|	ВычетыПоПериодам.Физлицо КАК Физлицо,
		|	Периоды.Период КАК Период,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыЛичные) КАК ВычетыЛичныеЗаГод,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыДетские) КАК ВычетыДетскиеЗаГод,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыДетскиеЛьгота) КАК ВычетыДетскиеЛьготаЗаГод,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыДополнительные) КАК ВычетыДополнительныеЗаГод
		|ИЗ
		|	ВТПериоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименяемыеВычетыТекст + ") КАК ВычетыПоПериодам
		|		ПО (ВычетыПоПериодам.Период МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) И Периоды.Период) И ВычетыПоПериодам.Физлицо = Периоды.Физлицо
		|
		|СГРУППИРОВАТЬ ПО
		|	ВычетыПоПериодам.Физлицо,
		|	Периоды.Период";
		
		// Приходы вычетов помесячные  
		Вычеты312ПоМесяцамТекст = 
		"ВЫБРАТЬ
		|	Остатки.ФизЛицо КАК ФизЛицо,
		|	Остатки.Период КАК Период,
		|	Остатки.Год КАК НалоговыйПериод,
		|	Остатки.РазмерНачальныйОстаток КАК Вычет312Остаток,
		|	0 КАК ОборотВычеты312,
		|	0 КАК ПримененныеВычеты312
		|ИЗ
		|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
		|		&парамНачалоГода,
		|		&парамКонецГода,
		|		Год,
		|		,
		|		КодВычетаИмущественный = &КодВычета312
		|			И Физлицо В (ВЫБРАТЬ Физлицо ИЗ ВТСписокФизЛиц)
		|			И Организация = &парамОрганизация) КАК Остатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Обороты.ФизЛицо,
		|	Обороты.Период,
		|	Обороты.Год,
		|	0,
		|	Обороты.РазмерПриход,
		|	Обороты.РазмерРасход
		|ИЗ
		|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
		|		&парамНачалоГода,
		|		&парамКонецГода,
		|		Месяц,
		|		,
		|		КодВычетаИмущественный = &КодВычета312
		|			И Физлицо В (ВЫБРАТЬ Физлицо ИЗ ВТСписокФизЛиц)
		|			И Организация = &парамОрганизация) КАК Обороты";
		
		Вычеты311ПоМесяцамТекст = 
		"ВЫБРАТЬ
		|	Остатки.ФизЛицо КАК ФизЛицо,
		|	Остатки.Период КАК Период,
		|	Остатки.Год КАК НалоговыйПериод,
		|	Остатки.РазмерНачальныйОстаток КАК Вычет311Остаток,
		|	0 КАК ОборотВычеты311,
		|	0 КАК ПримененныеВычеты311
		|ИЗ
		|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
		|		&парамНачалоГода,
		|		&парамКонецГода,
		|		Год,
		|		,
		|		КодВычетаИмущественный = &КодВычета311
		|			И Физлицо В (ВЫБРАТЬ Физлицо ИЗ ВТСписокФизЛиц)
		|			И Организация = &парамОрганизация) КАК Остатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Обороты.ФизЛицо,
		|	Обороты.Период,
		|	Обороты.Год,
		|	0,
		|	Обороты.РазмерПриход,
		|	Обороты.РазмерРасход
		|ИЗ
		|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
		|		&парамНачалоГода,
		|		&парамКонецГода,
		|		Месяц,
		|		,
		|		КодВычетаИмущественный = &КодВычета311
		|			И Физлицо В (ВЫБРАТЬ Физлицо ИЗ ВТСписокФизЛиц)
		|			И Организация = &парамОрганизация) КАК Обороты";
		
		// Приходы вычетов с начала года нарастающим итогом
		Вычеты312Текст = 
		"ВЫБРАТЬ
		|	Периоды.Физлицо КАК Физлицо,
		|	Периоды.Период КАК Период,
		//|	СУММА(Обороты.Вычет312Остаток) КАК Вычет312Остаток,
		//|	СУММА(Обороты.ПримененныеВычеты312) КАК Вычет312ЗаГод,
		|	СУММА(ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Обороты.Период, МЕСЯЦ) = Периоды.Период ТОГДА Обороты.ПримененныеВычеты312 ИНАЧЕ 0 КОНЕЦ) КАК Вычет312ЗаМесяц,
		|	СУММА(Обороты.ОборотВычеты312) КАК Вычет312Остаток,
		|	СУММА(Обороты.ПримененныеВычеты312) КАК Вычет312ЗаГод
		|ИЗ
		|	ВТПериоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + Вычеты312ПоМесяцамТекст + ") КАК Обороты
		|		ПО Обороты.ФизЛицо = Периоды.Физлицо И Обороты.Период <= Периоды.Период И Обороты.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.Физлицо,
		|	Периоды.Период";
		
		Запрос.Текст = Вычеты312Текст;
		Запрос.Выполнить();

		
		Вычеты311Текст = 
		"ВЫБРАТЬ
		|	Периоды.Физлицо КАК Физлицо,
		|	Периоды.Период КАК Период,
		//|	СУММА(Обороты.Вычет311Остаток) КАК Вычет311Остаток,
		//|	СУММА(Обороты.ПримененныеВычеты311) КАК Вычет311ЗаГод,
		|	СУММА(ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Обороты.Период, МЕСЯЦ) = Периоды.Период ТОГДА Обороты.ПримененныеВычеты311 ИНАЧЕ 0 КОНЕЦ) КАК Вычет311ЗаМесяц,
		|	СУММА(Обороты.ОборотВычеты311) КАК Вычет311Остаток,
		|	СУММА(Обороты.ПримененныеВычеты311) КАК Вычет311ЗаГод
		|ИЗ
		|	ВТПериоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + Вычеты311ПоМесяцамТекст + ") КАК Обороты
		|		ПО Обороты.ФизЛицо = Периоды.Физлицо И Обороты.Период <= Периоды.Период И Обороты.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.Физлицо,
		|	Периоды.Период";
		
		Запрос.Текст = Вычеты311Текст;
		Запрос.Выполнить();
		// облагаемый доход с начала года
		ПолеОблагаемыйДоходЗаГод = "ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0)";

		// право на личный вычет за год
		ПолеВычетыЛичныеЗаГод = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ВычетыЛичныеЗаГод, 0)";

		// право на вычет на детей за год
		ПолеВычетыДетскиеЗаГод = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ВычетыДетскиеЗаГод, 0)";
		ПолеВычетыДетскиеЛьготаЗаГод = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ВычетыДетскиеЛьготаЗаГод, 0)";
		ПолеВычетыДополнительныеЗаГод = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ВычетыДополнительныеЗаГод, 0)";
		
		ПолеВычет312Остаток = "ЕСТЬNULL(Вычеты312.Вычет312Остаток, 0)";
		
		ПолеВычет311Остаток = "ЕСТЬNULL(Вычеты311.Вычет311Остаток, 0)";
		
		// размер примененного вычета на себя с начала года
		ПолеПримененныеВычетыЛичные = 
		"ВЫБОР 
		//|	КОГДА ДоходыЗаГод.Резидент 
		//|	ТОГДА 
		|		ВЫБОР 
		|			КОГДА " + ПолеОблагаемыйДоходЗаГод + " > " + ПолеВычетыЛичныеЗаГод + " 
		|			ТОГДА " + ПолеВычетыЛичныеЗаГод + " 
		|			ИНАЧЕ " + ПолеОблагаемыйДоходЗаГод + "
		|		КОНЕЦ"; 
		//|	ИНАЧЕ 0 
		//|КОНЕЦ";
		// размер вычета на детей с начала года
		ПолеПримененныеВычетыДетские = 
		"ВЫБОР 
		//|	КОГДА ДоходыЗаГод.Резидент 
		//|	ТОГДА 
		|		ВЫБОР 
		|			КОГДА " + ПолеОблагаемыйДоходЗаГод + " > " + ПолеВычетыЛичныеЗаГод + " + " + ПолеВычетыДетскиеЗаГод + " 
		|			ТОГДА " + ПолеВычетыДетскиеЗаГод +" 
		|			КОГДА " + ПолеОблагаемыйДоходЗаГод +" > " + ПолеВычетыЛичныеЗаГод + " 
		|			ТОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеВычетыЛичныеЗаГод + " 
		|			ИНАЧЕ 0 
		|		КОНЕЦ"; 
		//|	ИНАЧЕ 0 
		//|КОНЕЦ";
		//Минск н
		// размер вычета дополнительный с начала года
		ПолеПримененныеВычетыДетскиеЛьгота = 
		"ВЫБОР 
		//|	КОГДА ДоходыЗаГод.Резидент 
		//|	ТОГДА 
		|		ВЫБОР 
		|			КОГДА " + ПолеОблагаемыйДоходЗаГод + " > " + ПолеВычетыЛичныеЗаГод + " + " + ПолеВычетыДетскиеЗаГод + " + " + ПолеВычетыДетскиеЛьготаЗаГод + " 
		|			ТОГДА " + ПолеВычетыДетскиеЛьготаЗаГод +" 
		|			КОГДА " + ПолеОблагаемыйДоходЗаГод +" > " + ПолеВычетыЛичныеЗаГод + " + " + ПолеВычетыДетскиеЗаГод + " 
		|			ТОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеВычетыЛичныеЗаГод + " - " + ПолеВычетыДетскиеЗаГод + " 
		|			ИНАЧЕ 0 
		|		КОНЕЦ"; 
		//|	ИНАЧЕ 0 
		//|КОНЕЦ";
		
		ПолеПримененныеВычетыДополнительные = 
		"ВЫБОР 
		//|	КОГДА ДоходыЗаГод.Резидент 
		//|	ТОГДА 
		|		ВЫБОР 
		|			КОГДА " + ПолеОблагаемыйДоходЗаГод + " >= " + ПолеВычетыЛичныеЗаГод + " + " + ПолеВычетыДетскиеЗаГод + " + " + ПолеВычетыДетскиеЛьготаЗаГод + " + " + ПолеВычетыДополнительныеЗаГод + " 
		|			ТОГДА " + ПолеВычетыДополнительныеЗаГод +" 
		|			ИНАЧЕ ВЫБОР КОГДА " + ПолеОблагаемыйДоходЗаГод +" > " + ПолеВычетыЛичныеЗаГод + " + " + ПолеВычетыДетскиеЗаГод + " + " + ПолеВычетыДетскиеЛьготаЗаГод + " 
		|				ТОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеВычетыЛичныеЗаГод + " - " + ПолеВычетыДетскиеЗаГод + " - " + ПолеВычетыДетскиеЛьготаЗаГод + " 
		|				ИНАЧЕ 0 КОНЕЦ
		|		КОНЕЦ"; 
		//|	ИНАЧЕ 0 
		//|КОНЕЦ";
		//Минск к
		// размер вычета по коду 312
		//Изменен Минск  добавлены Вычеты дополнительные - 10 базовых величин для определенных категорий граждан
		ПолеПримененныеВычеты312 = 
		"ВЫБОР 
		|	КОГДА " + ПолеОблагаемыйДоходЗаГод + " > " + ПолеПримененныеВычетыЛичные + " + " + ПолеПримененныеВычетыДетские + " + " + ПолеПримененныеВычетыДетскиеЛьгота + " + " + ПолеПримененныеВычетыДополнительные + " 
		|	ТОГДА 
		|		ВЫБОР 
		|			КОГДА " + ПолеВычет312Остаток + " > " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеПримененныеВычетыЛичные + " - " + ПолеПримененныеВычетыДетские + " - " + ПолеПримененныеВычетыДетскиеЛьгота + " - " + ПолеПримененныеВычетыДополнительные + " 
		|			ТОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеПримененныеВычетыЛичные + " - " + ПолеПримененныеВычетыДетские + " - " + ПолеПримененныеВычетыДетскиеЛьгота + " - " + ПолеПримененныеВычетыДополнительные + " 
		|			ИНАЧЕ " + ПолеВычет312Остаток + "
		|		КОНЕЦ 
		|	ИНАЧЕ 0 
		|КОНЕЦ";
		
		// размер вычета по коду 311
		ПолеПримененныеВычеты311 = 
		"ВЫБОР 
		|	КОГДА " + ПолеОблагаемыйДоходЗаГод + " > " + ПолеПримененныеВычеты312 + " + " + ПолеПримененныеВычетыЛичные + " + " + ПолеПримененныеВычетыДетскиеЛьгота + " + " + ПолеПримененныеВычетыДетские + " + " + ПолеПримененныеВычетыДополнительные + " 
		|	ТОГДА 
		|		ВЫБОР 
		|			КОГДА " + ПолеВычет311Остаток + " > " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеПримененныеВычеты312 + " - " + ПолеПримененныеВычетыЛичные + " - " + ПолеПримененныеВычетыДетские + " - " + ПолеПримененныеВычетыДетскиеЛьгота + " - " + ПолеПримененныеВычетыДополнительные + " 
		|			ТОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеПримененныеВычеты312 + " - " + ПолеПримененныеВычетыЛичные + " - " + ПолеПримененныеВычетыДетские + " - " + ПолеПримененныеВычетыДетскиеЛьгота + " - " + ПолеПримененныеВычетыДополнительные + " 
		|			ИНАЧЕ " + ПолеВычет311Остаток + "
		|		КОНЕЦ 
		|	ИНАЧЕ 0 
		|КОНЕЦ";
		
		
		// сумма налога исчисленная
		ПолеНалогИсчисленный = 
		"(ВЫРАЗИТЬ(ВЫБОР 
		|				КОГДА ДоходыЗаГод.Резидент 
		|				ТОГДА (" + ПолеОблагаемыйДоходЗаГод +" - "+ ПолеПримененныеВычетыЛичные + " - " + ПолеПримененныеВычетыДетские + " - " + ПолеПримененныеВычетыДетскиеЛьгота + " - " + ПолеПримененныеВычетыДополнительные + " - " + ПолеПримененныеВычеты312 + " - " + ПолеПримененныеВычеты311+ ") 
		|				ИНАЧЕ ЕСТЬNULL(ДоходыЗаГод.НалогНерезидента, 0)
		|				КОНЕЦ КАК " + ТипЗначенияНДФЛТекст + "))";
		
		// сумма ранее исчисленного налога
		ПолеРанееНалогИсчисленный = 
		"ВЫБОР 
		|	КОГДА НДФЛРасчетыСБюджетомЗаГод.ИсчисленныйНалогЗаГод = -99999999 
		|	ТОГДА 0 
		|	ИНАЧЕ ЕСТЬNULL(НДФЛРасчетыСБюджетомЗаГод.ИсчисленныйНалогЗаГод, 0) 
		|КОНЕЦ";
		
		// сумма ранее примененных вычетов личных
		ПолеРанееПримененныеВычетыЛичные = "ЕСТЬNULL(НДФЛРасчетыСБюджетомЗаГод.ПримененныеВычетыЛичныеЗаГод, 0)";
		ПолеРанееПримененныеВычетыЛичныеЗаМесяц = "ЕСТЬNULL(НДФЛРасчетыСБюджетомЗаГод.ПримененныеВычетыЛичныеЗаМесяц, 0)";

		// сумма ранее примененных вычетов на детей
		ПолеРанееПримененныеВычетыДетские = "ЕСТЬNULL(НДФЛРасчетыСБюджетомЗаГод.ПолеПримененныеВычетыДетскиеЗаГод, 0)";
		ПолеРанееПримененныеВычетыДетскиеЗаМесяц = "ЕСТЬNULL(НДФЛРасчетыСБюджетомЗаГод.ПолеПримененныеВычетыДетскиеЗаМесяц, 0)";
		ПолеРанееПримененныеВычетыДетскиеЛьгота = "ЕСТЬNULL(НДФЛРасчетыСБюджетомЗаГод.ПолеПримененныеВычетыДетскиеЛьготаЗаГод, 0)";
		ПолеРанееПримененныеВычетыДетскиеЛьготаЗаМесяц = "ЕСТЬNULL(НДФЛРасчетыСБюджетомЗаГод.ПолеПримененныеВычетыДетскиеЛьготаЗаМесяц, 0)";
		ПолеРанееПримененныеВычетыДополнительные = "ЕСТЬNULL(НДФЛРасчетыСБюджетомЗаГод.ПолеПримененныеВычетыДополнительныеЗаГод, 0)";
		ПолеРанееПримененныеВычетыДополнительныеЗаМесяц = "ЕСТЬNULL(НДФЛРасчетыСБюджетомЗаГод.ПолеПримененныеВычетыДополнительныеЗаМесяц, 0)";

		// сумма ранее примененных вычетов по коду 312
		ПолеРанееПримененныеВычеты312 = "ЕСТЬNULL(Вычеты312.Вычет312ЗаГод, 0)";
		ПолеРанееПримененныеВычеты312ЗаМесяц = "ЕСТЬNULL(Вычеты312.Вычет312ЗаМесяц, 0)";

		// сумма ранее примененных вычетов по коду 311
		ПолеРанееПримененныеВычеты311 = "ЕСТЬNULL(Вычеты311.Вычет311ЗаГод, 0)";
		ПолеРанееПримененныеВычеты311ЗаМесяц = "ЕСТЬNULL(Вычеты311.Вычет311ЗаМесяц, 0)";
		
		Если КомментироватьРасчет Тогда
			ДоходыПоВидамРасчетаТекст = "
			|ВЫБРАТЬ
			|	НДФЛСведенияОДоходах.ДоходЗаМесяц КАК ДоходЗаМесяц,
			|	НДФЛСведенияОДоходах.ВычетЗаМесяц КАК ВычетЗаМесяц,
			|	СУММА(ДоходыПоВидамРасчета.Результат) КАК ДоходЗаМесяцПоВидамРасчета,
			|	НДФЛСведенияОДоходах.Физлицо КАК Физлицо,
			|	ДоходыПоВидамРасчета.ВидРасчета КАК ВидРасчета,
			|	ДоходыПоВидамРасчета.ВидРасчета.Наименование КАК ВидРасчетаНаименование,
			|	НДФЛСведенияОДоходах.Период КАК Период
			|ИЗ
			|	(ВЫБРАТЬ
			|		СУММА(НДФЛСведенияОДоходах.СуммаДохода) КАК ДоходЗаМесяц,
			|		СУММА(НДФЛСведенияОДоходах.СуммаВычета) КАК ВычетЗаМесяц,
			|		НДФЛСведенияОДоходах.ФизЛицо КАК Физлицо,
			|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ) КАК Период
			|	ИЗ
			|		РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
			|			ПО (Месяцы.Период = НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ))
			|	ГДЕ
			|		НДФЛСведенияОДоходах.ФизЛицо В (ВЫБРАТЬ Физлицо ИЗ ВТСписокФизЛиц)
			|		И НДФЛСведенияОДоходах.Организация = &парамОрганизация
			|	
			|	СГРУППИРОВАТЬ ПО
			|		НДФЛСведенияОДоходах.ФизЛицо,
			|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ)) КАК НДФЛСведенияОДоходах
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			Начисления.Результат КАК Результат,
			|			Начисления.ФизЛицо КАК Физлицо,
			|			Начисления.ВидРасчета КАК ВидРасчета,
			|			ВЫБОР
			|				КОГДА Начисления.ВидРасчета.КодДоходаНДФЛ = &КодОплатыТрудаПоНДФЛ
			|					ТОГДА Начисления.ПериодРегистрации
			|				ИНАЧЕ Начисления.ПериодДействия
			|			КОНЕЦ КАК Период
			|		ИЗ
			|			РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
			|				ПО (Месяцы.Период = ВЫБОР
			|						КОГДА Начисления.ВидРасчета.КодДоходаНДФЛ <> &КодОплатыТрудаПоНДФЛ
			|							ТОГДА Начисления.ПериодРегистрации
			|						ИНАЧЕ Начисления.ПериодДействия
			|					КОНЕЦ)
			|		ГДЕ
			|			Начисления.ВидРасчета.КодДоходаНДФЛ <> &ПустойКодДохода
			|			И Начисления.ФизЛицо В (ВЫБРАТЬ Физлицо ИЗ ВТСписокФизЛиц)
			|			И Начисления.Организация = &парамОрганизация
			|		
			|		ОБЪЕДИНИТЬ ВСЕ
			|		
			|		ВЫБРАТЬ
			|			Начисления.Результат,
			|			Начисления.ФизЛицо,
			|			Начисления.ВидРасчета,
			|			НАЧАЛОПЕРИОДА(Начисления.ПериодРегистрации, МЕСЯЦ)
			|		ИЗ
			|			РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Начисления
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
			|				ПО (Месяцы.Период = НАЧАЛОПЕРИОДА(Начисления.ПериодРегистрации, МЕСЯЦ))
			|		ГДЕ
			|			Начисления.ВидРасчета.КодДоходаНДФЛ <> &ПустойКодДохода
			|			И Начисления.ФизЛицо  В (ВЫБРАТЬ Физлицо ИЗ ВТСписокФизЛиц)
			|			И Начисления.Организация = &парамОрганизация) КАК ДоходыПоВидамРасчета
			|		ПО ДоходыПоВидамРасчета.Период = НДФЛСведенияОДоходах.Период
			|			И ДоходыПоВидамРасчета.Физлицо = НДФЛСведенияОДоходах.Физлицо
			|
			|СГРУППИРОВАТЬ ПО
			|	НДФЛСведенияОДоходах.ДоходЗаМесяц,
			|	НДФЛСведенияОДоходах.ВычетЗаМесяц,
			|	НДФЛСведенияОДоходах.Физлицо,
			|	НДФЛСведенияОДоходах.Период,
			|	ДоходыПоВидамРасчета.ВидРасчета,
			|	ДоходыПоВидамРасчета.ВидРасчета.Наименование";
			Запрос.УстановитьПараметр("ПустойКодДохода" , Справочники.ДоходыНДФЛ.ПустаяСсылка());
			Запрос.УстановитьПараметр("КодОплатыТрудаПоНДФЛ", Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию);
			
		КонецЕсли;
		// ИсчисленныйНДФЛ
		//	Поля:
		//		Физлицо
		//		Период
		//		НалогУжеИсчисленный
		//		НалогИсчисленный
		//		ПримененныеВычетыЛичные
		//		ПолеПримененныеВычетыДетские
		//		ПолеПримененныеВычетыДетскиеИнвалидов
		//	    ПримененныеВычеты312
		//	    ПримененныеВычеты311
		//	
		//	Описание:
		//	Выбирает применяемые вычеты нарастающим итогом, доход нарастающим итогом и 
		//	исчисленный налог нарастающим итогом и производит расчет налога и примененных вычетов

		ИсчисленныйНДФЛТекст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоходыЗаГод.Физлицо КАК Физлицо,
		|	ДоходыЗаГод.Период КАК Период,
		|	ЕСТЬNULL(ДоходыЗаГод.Резидент, ИСТИНА) КАК Резидент,
		|	" + ПолеРанееНалогИсчисленный + " КАК НалогРанееИсчисленный,         //Минск
		//|	" + ПолеНалогИсчисленный + " КАК ПолеНалогИсчисленный,         //Минск
		|	" + ПолеОблагаемыйДоходЗаГод + " КАК ДоходЗаГод,                     //Минск
		//|	" + ПолеНалогНерезидентаЗаГод + " КАК НалогНерезидентаЗаГод,         //Минск
		|	" + ПолеПримененныеВычетыЛичные + "  КАК ПримененныеВычетыЛичные,    //Минск
		|	" + ПолеПримененныеВычетыДетские + " КАК ПримененныеВычетыДетские,   //Минск
		|	" + ПолеПримененныеВычетыДетскиеЛьгота + " КАК ПримененныеВычетыДетскиеЛьгота,   //Минск
		|	" + ПолеПримененныеВычетыДополнительные + " КАК ПримененныеВычетыДополнительные, //Минск
		|	" + ПолеПримененныеВычеты312 + " КАК ПримененныеВычеты312,  //Минск
		|	" + ПолеПримененныеВычеты311 + " КАК ПримененныеВычеты311";   //Минск
		//|	" + ПолеНалогИсчисленный + "-" + ПолеРанееНалогИсчисленный + " КАК НалогИсчисленный,
		//|	" + ПолеПримененныеВычетыЛичные + " КАК ПримененныеВычетыЛичные,
		//|	" + ПолеПримененныеВычетыДетские + " КАК ПримененныеВычетыДетские,
		//|	" + ПолеПримененныеВычетыДетскиеИнвалидов + " КАК ПримененныеВычетыДетскиеИнвалидов,
		//|	" + ПолеПримененныеВычеты312 + " КАК ПримененныеВычеты312,
		//|	" + ПолеПримененныеВычеты311 + " КАК ПримененныеВычеты311,
		//|	" + ПолеРанееПримененныеВычетыЛичные + " КАК РанееПримененныеВычетыЛичные,
		//|	" + ПолеРанееПримененныеВычетыДетские + " КАК РанееПримененныеВычетыДетские,
		//|	" + ПолеРанееПримененныеВычетыДетскиеИнвалидов + " КАК РанееПримененныеВычетыДетскиеИнвалидов,
		//|	" + ПолеРанееПримененныеВычеты312 + " КАК РанееПримененныеВычеты312,
		//|	" + ПолеРанееПримененныеВычеты311 + " КАК РанееПримененныеВычеты311,
		//|	" + ПолеРанееПримененныеВычетыЛичныеЗаМесяц + " КАК РанееПримененныеВычетыЛичныеЗаМесяц,
		//|	" + ПолеРанееПримененныеВычетыДетскиеЗаМесяц + " КАК РанееПримененныеВычетыДетскиеЗаМесяц,
		//|	" + ПолеРанееПримененныеВычетыДетскиеИнвалидовЗаМесяц + " КАК РанееПримененныеВычетыДетскиеИнвалидовЗаМесяц,
		//|	" + ПолеРанееПримененныеВычеты312ЗаМесяц + " КАК РанееПримененныеВычеты312ЗаМесяц,
		//|	" + ПолеРанееПримененныеВычеты311ЗаМесяц + " КАК РанееПримененныеВычеты311ЗаМесяц";
		Если КомментироватьРасчет Тогда
			ИсчисленныйНДФЛТекст = ИсчисленныйНДФЛТекст + ",
			|	" + ПолеОблагаемыйДоходЗаГод + " КАК ОблагаемыйДоходЗаГод,
			|	" + ПолеРанееНалогИсчисленный + " КАК РанееНалогИсчисленный,
			|	ЕСТЬNULL(ДоходыПоВидамРасчета.ДоходЗаМесяц, 0) КАК ДоходЗаМесяц,
			|	ЕСТЬNULL(ДоходыПоВидамРасчета.ВычетЗаМесяц, 0) КАК ВычетЗаМесяц,
			|	ЕСТЬNULL(ДоходыПоВидамРасчета.ДоходЗаМесяцПоВидамРасчета, 0) КАК ДоходЗаМесяцПоВидамРасчета,
			|	ДоходыПоВидамРасчета.ВидРасчета КАК ВидРасчета,
			|	ДоходыПоВидамРасчета.ВидРасчета.Наименование КАК ВидРасчетаНаименование";
		КонецЕсли;
		ИсчисленныйНДФЛТекст = ИсчисленныйНДФЛТекст + "
		|ИЗ
		|	("+ДоходыЗаГодТекст+") КАК ДоходыЗаГод
		|		ЛЕВОЕ СОЕДИНЕНИЕ ("+НДФЛРасчетыСБюджетомЗаГодТекст+") КАК НДФЛРасчетыСБюджетомЗаГод
		|		ПО НДФЛРасчетыСБюджетомЗаГод.Период = ДоходыЗаГод.Период И НДФЛРасчетыСБюджетомЗаГод.ФизЛицо = ДоходыЗаГод.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ("+ПрименяемыеВычетыЗаГодТекст+") КАК РаботникиОргВычетыЗаГод
		|		ПО ДоходыЗаГод.Период = РаботникиОргВычетыЗаГод.Период И ДоходыЗаГод.ФизЛицо = РаботникиОргВычетыЗаГод.Физлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ("+Вычеты312Текст+") КАК Вычеты312
		|		ПО Вычеты312.Период = ДоходыЗаГод.Период И Вычеты312.ФизЛицо = ДоходыЗаГод.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ("+Вычеты311Текст+") КАК Вычеты311
		|		ПО Вычеты311.Период = ДоходыЗаГод.Период И Вычеты311.ФизЛицо = ДоходыЗаГод.ФизЛицо";
		//|	("+ПрименяемыеВычетыЗаГодТекст+") КАК РаботникиОргВычетыЗаГод
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ("+НДФЛРасчетыСБюджетомЗаГодТекст+") КАК НДФЛРасчетыСБюджетомЗаГод
		//|		ПО НДФЛРасчетыСБюджетомЗаГод.Период = РаботникиОргВычетыЗаГод.Период И НДФЛРасчетыСБюджетомЗаГод.ФизЛицо = РаботникиОргВычетыЗаГод.Физлицо
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ("+ДоходыЗаГодТекст+") КАК ДоходыЗаГод
		//|		ПО ДоходыЗаГод.Период = РаботникиОргВычетыЗаГод.Период И ДоходыЗаГод.ФизЛицо = РаботникиОргВычетыЗаГод.Физлицо
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ("+Вычеты312Текст+") КАК Вычеты312
		//|		ПО Вычеты312.Период = РаботникиОргВычетыЗаГод.Период И Вычеты312.ФизЛицо = РаботникиОргВычетыЗаГод.Физлицо
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ("+Вычеты311Текст+") КАК Вычеты311
		//|		ПО Вычеты311.Период = РаботникиОргВычетыЗаГод.Период И Вычеты311.ФизЛицо = РаботникиОргВычетыЗаГод.Физлицо";
		Если КомментироватьРасчет Тогда
			ИсчисленныйНДФЛТекст = ИсчисленныйНДФЛТекст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ДоходыПоВидамРасчетаТекст + ") КАК ДоходыПоВидамРасчета
			|		ПО ДоходыПоВидамРасчета.Период = РаботникиОргВычетыЗаГод.Период 
			|		И ДоходыПоВидамРасчета.ФизЛицо = РаботникиОргВычетыЗаГод.Физлицо";
		КонецЕсли;
		ИсчисленныйНДФЛТекст = ИсчисленныйНДФЛТекст + "
		|
		|	УПОРЯДОЧИТЬ ПО ДоходыЗаГод.Физлицо, доходыЗаГод.Период";
		//|	ГДЕ
		//|		(" + ПолеНалогИсчисленный + " <> " + ПолеРанееНалогИсчисленный + " ИЛИ 
		//|		" + ПолеПримененныеВычеты312 + " <> " + ПолеРанееПримененныеВычеты312 + " ИЛИ 
		//|		" + ПолеПримененныеВычеты311 + " <> " + ПолеРанееПримененныеВычеты311 + " ИЛИ 
		//|		" + ПолеПримененныеВычетыЛичные + " <> " + ПолеРанееПримененныеВычетыЛичные + " ИЛИ 
		//|		" + ПолеПримененныеВычетыДетские + " <> " + ПолеРанееПримененныеВычетыДетские + " ИЛИ
		//|		" + ПолеПримененныеВычетыДетскиеИнвалидов + " <> " + ПолеРанееПримененныеВычетыДетскиеИнвалидов +")
		//|	УПОРЯДОЧИТЬ ПО РаботникиОргВычетыЗаГод.Физлицо.Наименование, РаботникиОргВычетыЗаГод.Период";
		Если КомментироватьРасчет Тогда
			ИсчисленныйНДФЛТекст = ИсчисленныйНДФЛТекст + "
			|	ИТОГИ 
			|		МАКСИМУМ(Физлицо),
			|		МАКСИМУМ(Период),
			|		МАКСИМУМ(Резидент),
			|		МАКСИМУМ(ДоходЗаГод),
			|		МАКСИМУМ(НалогРанееИсчисленный),
			|		МАКСИМУМ(ПримененныеВычетыЛичные),
			|		МАКСИМУМ(ПримененныеВычетыДетские),
			|		МАКСИМУМ(ПримененныеВычетыДетскиеЛьгота),
			|		МАКСИМУМ(ПримененныеВычетыДополнительные),
			|		МАКСИМУМ(ПримененныеВычеты312),
			|		МАКСИМУМ(ПримененныеВычеты311),
			//|		МАКСИМУМ(РанееПримененныеВычетыЛичные),
			//|		МАКСИМУМ(РанееПримененныеВычетыДетские),
			//|		МАКСИМУМ(РанееПримененныеВычетыДетскиеИнвалидов),
			//|		МАКСИМУМ(РанееПримененныеВычеты312),
			//|		МАКСИМУМ(РанееПримененныеВычеты311),
			//|		МАКСИМУМ(РанееПримененныеВычетыЛичныеЗаМесяц),
			//|		МАКСИМУМ(РанееПримененныеВычетыДетскиеЗаМесяц),
			//|		МАКСИМУМ(РанееПримененныеВычетыДетскиеИнвалидовЗаМесяц),
			//|		МАКСИМУМ(РанееПримененныеВычеты312ЗаМесяц),
			//|		МАКСИМУМ(РанееПримененныеВычеты311ЗаМесяц),
			|		МАКСИМУМ(ОблагаемыйДоходЗаГод),
			|		МАКСИМУМ(РанееНалогИсчисленный),
			|		МАКСИМУМ(ДоходЗаМесяц),
			|		МАКСИМУМ(ВычетЗаМесяц),
			|		СУММА(ДоходЗаМесяцПоВидамРасчета)
			|	ПО
			|		Период";
		КонецЕсли;

		Запрос.Текст = ПодразделенияПоМесяцамТекст;
		ВыборкаПодразделений = Запрос.Выполнить().Выбрать();

		Запрос.Текст = ИсчисленныйНДФЛТекст;

		Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		
	Иначе   //Расчет налога с 01.01.2009
		Запрос.УстановитьПараметр("парамСтавка13",                     Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);
			
		Запрос.УстановитьПараметр("парамКонецМесяцаНалоговогоПериода", КонецМесяца(ПоследнийМесяцНалоговогоПериода));
		Запрос.УстановитьПараметр("парамКонецМесяцаПериодРегистрации", КонецМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("парамНачалоГода",                   НачалоГода(ПервыйМесяцНалоговогоПериода));
		//vvv
		Запрос.УстановитьПараметр("ДатаДеноминации",                   ОбщегоНазначения.ПолучитьДатуДеноминации());
		Запрос.УстановитьПараметр("парамНачалоГода",                   ДатаКонтроля);
		Запрос.УстановитьПараметр("парамДаватьВычетыНаБудПериод",      РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Получить(Новый Структура("Организация", Организация)).ДаватьВычетыНаБудПериод);
		//
		Запрос.УстановитьПараметр("парамКонецГода",                    КонецГода(ПоследнийМесяцНалоговогоПериода));
		Запрос.УстановитьПараметр("парамПриход",                       ВидДвиженияНакопления.Приход);
		ВидСтроки = Новый СписокЗначений;
		ВидСтроки.Добавить(Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление);
		ВидСтроки.Добавить(Перечисления.НДФЛРасчетыСБюджетомВидСтроки.ВозвратНалога);
		Запрос.УстановитьПараметр("парамВидСтроки",                    ВидСтроки);
		Запрос.УстановитьПараметр("БазоваяВеличина",                   Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяВеличина);
		
		Запрос.УстановитьПараметр("КодВычета312", Справочники.ВычетыНДФЛ.Код640);
		Запрос.УстановитьПараметр("КодВычета311", Справочники.ВычетыНДФЛ.Код650);
		Запрос.УстановитьПараметр("КодВычета640Страх", Справочники.ВычетыНДФЛ.Код640Страх);

		
		КодыВычетовРезидентов = Новый Массив;
		//Вычеты (льготы) кратные базовой величине
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код500);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код510);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код520);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код530);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код540);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код550);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код560);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код570);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код571);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код580);
		//Расходы по авторским
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код404);
		КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код405);
		Запрос.УстановитьПараметр("КодыВычетовРезидентов", КодыВычетовРезидентов);
		
				
		НачМесяца = НачалоГода(ПервыйМесяцНалоговогоПериода);
		//vvv
		НачМесяца=Константы.ДатаНачалаУчетаВПрограмме.Получить();
		//
		ДатыПоМесяцамТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период";
		ДатыПоМесяцамТекстД = ДатыПоМесяцамТекст;
		ДатыПоМесяцамТекст = ДатыПоМесяцамТекст +"
		|ПОМЕСТИТЬ ВТДатыПоМесяцам";
		Пока НачМесяца < НачалоМесяца(ПоследнийМесяцНалоговогоПериода) Цикл
			НачМесяца = НачалоМесяца(КонецМесяца(НачМесяца) + 1);
			ДатыПоМесяцамТекст = ДатыПоМесяцамТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
			ДатыПоМесяцамТекстД = ДатыПоМесяцамТекстД +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
		КонецЦикла;
		ДатыПоМесяцамТекст = ДатыПоМесяцамТекст +"
		|ИНДЕКСИРОВАТЬ ПО Период";
		
		Запрос.Текст = ДатыПоМесяцамТекстД;
		
		Запрос.Текст = ДатыПоМесяцамТекст;
		Запрос.Выполнить();
		
		// Периоды
		// Таблица список периодов-физлиц по которым необходимо выполнить расчет налога
		// Поля:
		//		Период
		//		Физлицо
		
		Если ЭтоПерерасчет Тогда
			
			ПериодыТекст = 
			"ВЫБРАТЬ
			|	Работники.Физлицо,
			|	Месяцы.Период
			|ПОМЕСТИТЬ ВТПериоды
			|ИЗ
			|	ВТСписокФизЛиц КАК Работники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
			|		ПО (ИСТИНА)
			|ИНДЕКСИРОВАТЬ ПО Физлицо, Период";
			
		Иначе
			
			ПериодыТекст = 
			"ВЫБРАТЬ
			|	ПериодыДохода.ФизЛицо,
			|	Месяцы.Период
			|ПОМЕСТИТЬ ВТПериоды
			|ИЗ
			|	(ВЫБРАТЬ
			|		НДФЛСведенияОДоходах.ФизЛицо КАК ФизЛицо,
			|		МАКСИМУМ(НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ)) КАК ПериодМакс,
			|		МИНИМУМ(ВЫБОР
			//vvv 
			//|				КОГДА (НДФЛИмущественныеВычетыФизлиц.Период<&парамПериодРегистрации) И (НДФЛИмущественныеВычетыФизлиц.Период<&парамНачалоГодаРегистрации)
			|				КОГДА (НДФЛИмущественныеВычетыФизлиц.Период<&парамПериодРегистрации) И (НДФЛИмущественныеВычетыФизлиц.Период<ВЫБОР КОГДА ДатыПересчета.ДатаПересчета ЕСТЬ NULL ТОГДА &парамНачалоГодаРегистрации ИНАЧЕ ДатыПересчета.ДатаПересчета КОНЕЦ)
			|					ТОГДА НАЧАЛОПЕРИОДА(НДФЛИмущественныеВычетыФизлиц.Период, ГОД)		
			//
			|				КОГДА НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации
			|					ТОГДА НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, ГОД)
			//vvv
			//|				ИНАЧЕ &парамНачалоГодаРегистрации
			|				ИНАЧЕ ВЫБОР КОГДА ДатыПересчета.ДатаПересчета ЕСТЬ NULL ТОГДА &парамНачалоГодаРегистрации ИНАЧЕ ДатыПересчета.ДатаПересчета КОНЕЦ
			//
			|			КОНЕЦ) КАК ПериодМин
			|	ИЗ
			|		РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК Работники
			|		ПО Работники.Физлицо = НДФЛСведенияОДоходах.ФизЛицо
			//vvv
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПересчета КАК ДатыПересчета
			|		ПО ДатыПересчета.Физлицо = НДФЛСведенияОДоходах.ФизЛицо
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛИмущественныеВычетыФизлиц КАК НДФЛИмущественныеВычетыФизлиц
			|		ПО Работники.Физлицо = НДФЛИмущественныеВычетыФизлиц.ФизЛицо
			|		И НДФЛИмущественныеВычетыФизлиц.Регистратор.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&парамПериодРегистрации,МЕСЯЦ) И КОНЕЦПЕРИОДА(&парамПериодРегистрации,МЕСЯЦ)
			//
			|	ГДЕ
			//vvv
			//|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ)МЕЖДУ &парамНачалоГодаРегистрации И &парамПериодРегистрации
			|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ)МЕЖДУ ВЫБОР КОГДА ДатыПересчета.ДатаПересчета ЕСТЬ NULL ТОГДА &парамНачалоГодаРегистрации ИНАЧЕ ДатыПересчета.ДатаПересчета КОНЕЦ И &парамПериодРегистрации
			//
			|		И НДФЛСведенияОДоходах.Организация = &парамОрганизация
			|	
			|	СГРУППИРОВАТЬ ПО
			|		НДФЛСведенияОДоходах.ФизЛицо) КАК ПериодыДохода
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
			|		ПО (Месяцы.Период МЕЖДУ ПериодыДохода.ПериодМин И ПериодыДохода.ПериодМакс)
			|ИНДЕКСИРОВАТЬ ПО Физлицо, Период";
			//
		КонецЕсли;
 		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		ПериодыТекст = "ВТПериоды";
						
		// Периоды
		// Таблица список периодов-физлиц по которым необходимо выполнить расчет налога
		// Поля:
		//		Период
		//		Физлицо
		
			// ПодразделенияРаботников
		//	Поля:
		//		Физлицо
		//		Период
		//		ПодразделениеОрганизации
		//
		//	Описание:
		//	список подразделений в которых работают физлица по состоянию на конец месяца налогового периода
		
		ПодразделенияРаботниковТекст = 
		"ВЫБРАТЬ
		|	Периоды.Физлицо КАК Физлицо,
		|	Периоды.Период КАК Период,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ) >= РаботникиОрганизаций.ПериодЗавершения  
		|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
		|			ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
		|		КОНЕЦ КАК ПодразделениеОрганизации
		|ПОМЕСТИТЬ ВТПодразделенияРаботников
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.ФизЛицо КАК Физлицо,
		|		Периоды.Период КАК Период,
		|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаРегистра,
		|		РаботникиОрганизаций.Организация КАК Организация
		|	ИЗ
		|		ВТПериоды КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|			ПО КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ) >= РаботникиОрганизаций.Период
		|				И Периоды.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
		|	ГДЕ
		|		РаботникиОрганизаций.Организация = &парамОрганизация
		|		И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|		И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.ФизЛицо,
		|		Периоды.Период,
		|		РаботникиОрганизаций.Организация) КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО Периоды.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо
		|			И Периоды.ДатаРегистра = РаботникиОрганизаций.Период
		|			И Периоды.Организация = РаботникиОрганизаций.Организация
		|ГДЕ
	 	|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ) >= РаботникиОрганизаций.ПериодЗавершения 
		|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
		|			ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
		|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|	И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)";
		
		Запрос.Текст = ПодразделенияРаботниковТекст;
		Запрос.Выполнить();
		// ПодразделенияДоговорников
		//	Поля:
		//		Физлицо
		//		Период
		//		ПодразделениеОрганизации
		//
		//	Описание:
		//	список подразделений в которых работают физлица по состоянию на конец месяца налогового периода
		ПодразделенияДоговорниковТекст = 
		"ВЫБРАТЬ
		|	ДатыПоследнихДоговоров.Физлицо КАК Физлицо,
		|	МАКСИМУМ(ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации) КАК ПодразделениеОрганизации,
		|	ДатыПоследнихДоговоров.Период
		|ПОМЕСТИТЬ ВТПодразделенияДоговорников
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		Периоды.Физлицо КАК Физлицо,
		|		ДоговорНаВыполнениеРаботСФизЛицом.Организация КАК Организация,
		|		МАКСИМУМ(ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала) КАК ДатаНачала
		|	ИЗ
		|		ВТПериоды КАК Периоды
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
		|				ПО (ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
		|					И (ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ))
		|					И Периоды.ФизЛицо = ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо
		|		ГДЕ
		|			ДоговорНаВыполнениеРаботСФизЛицом.Организация = &парамОбособленноеПодразделение
		|			
		|		СГРУППИРОВАТЬ ПО
		|			Периоды.Период,
		|			Периоды.ФизЛицо,
		|			ДоговорНаВыполнениеРаботСФизЛицом.Организация) КАК ДатыПоследнихДоговоров
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
		|			ПО ДатыПоследнихДоговоров.Организация = ДоговорНаВыполнениеРаботСФизЛицом.Организация
		|				И ДатыПоследнихДоговоров.ДатаНачала = ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
		|				И ДатыПоследнихДоговоров.Физлицо = ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо
		|		
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыПоследнихДоговоров.Физлицо,
		|	ДатыПоследнихДоговоров.Организация,
		|	ДатыПоследнихДоговоров.Период";

		Запрос.Текст = ПодразделенияДоговорниковТекст;
		Запрос.Выполнить();

		ПодразделенияПоМесяцамТекст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодразделенияРаботников.Физлицо,
		|	ПодразделенияРаботников.Период,
		|	ЕСТЬNULL(ПодразделенияРаботников.ПодразделениеОрганизации,ПодразделенияДоговорников.ПодразделениеОрганизации) КАК ПодразделениеОрганизации
	   	|ИЗ		
		|	ВТПодразделенияРаботников КАК ПодразделенияРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодразделенияДоговорников КАК ПодразделенияДоговорников
		|		ПО ПодразделенияРаботников.Период = ПодразделенияДоговорников.Период 
		|			И ПодразделенияРаботников.ФизЛицо = ПодразделенияДоговорников.Физлицо";

		//Запрос.Текст = ПодразделенияПоМесяцамТекст;
		//Запрос.Выполнить();
		// ФизлицаНеРезиденты
		//	Поля:
		//		Физлицо
		//
		//	Описание:
		//	сисок физлиц-нерезидентов

		ФизлицаНеРезидентыТекст = 
		"ВЫБРАТЬ
		|	ГражданствоФизЛиц.ФизЛицо КАК Физлицо,
		|	ГражданствоПоГодам.ПериодФизлица КАК Период
		|ПОМЕСТИТЬ ВТФизлицаНеРезиденты 
		|ИЗ
		|	РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ГражданствоФизЛиц.ФизЛицо КАК Физлицо,
		|			Физлица.Период КАК ПериодФизлица,
		|			МАКСИМУМ(ГражданствоФизЛиц.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериоды КАК Физлица
		|				ПО Физлица.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
		|					И (ГражданствоФизЛиц.Период <= ВЫБОР
		|						КОГДА КОНЕЦПЕРИОДА(Физлица.Период, ГОД) >= КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
		|							ТОГДА КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
		|						ИНАЧЕ КОНЕЦПЕРИОДА(Физлица.Период, ГОД)
		|					КОНЕЦ)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ГражданствоФизЛиц.ФизЛицо,
		|			Физлица.Период) КАК ГражданствоПоГодам
		|		ПО ГражданствоПоГодам.Физлицо = ГражданствоФизЛиц.ФизЛицо
		|			И ГражданствоПоГодам.Период = ГражданствоФизЛиц.Период
		|ГДЕ
		|	ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРФ";

		Запрос.Текст = ФизлицаНеРезидентыТекст;
		Запрос.Выполнить();

		// ДоходыСКодамиВычетов
		//	Поля:
		//		ФизЛицо
		//		Период
		//		КодДохода
		//		КодВычета
		//		СуммаДоходаОборот
		//		СуммаВычетаОборот
		//
		//	Описание:
		// Выбирает облагаемые налогом доходы за весь год по физлицам из СписокФизлиц
		ДоходыСКодамиВычетовТекст = 
		"ВЫБРАТЬ
		|	НДФЛОбороты.Физлицо КАК ФизЛицо,
		|	НДФЛОбороты.Период КАК Период,
		|	НДФЛОбороты.КодДохода КАК КодДохода,
		|	НДФЛОбороты.КодВычета КАК КодВычета,
		|	СУММА(НДФЛОбороты.СуммаДоходаОборот) КАК СуммаДоходаОборот,
		|	СУММА(НДФЛОбороты.СуммаВычетаОборот) КАК СуммаВычетаОборот
		|ПОМЕСТИТЬ ВТДоходыСКодамиВычетов
		|ИЗ
		|	(ВЫБРАТЬ
		|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|		НДФЛСведенияОДоходах.ФизЛицо КАК Физлицо,
		|		НДФЛСведенияОДоходах.КодДохода КАК КодДохода,
		|		НДФЛСведенияОДоходах.КодВычета КАК КодВычета,
		//vvv
		//|		ЕСТЬNULL(СУММА(НДФЛСведенияОДоходах.СуммаДохода), 0) КАК СуммаДоходаОборот,
		//|		ЕСТЬNULL(СУММА(НДФЛСведенияОДоходах.СуммаВычета), 0) КАК СуммаВычетаОборот
		|		ЕСТЬNULL(СУММА(НДФЛСведенияОДоходах.СуммаДохода / ВЫБОР КОГДА НДФЛСведенияОДоходах.ПериодРегистрации<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ), 0) КАК СуммаДоходаОборот,
		|		ЕСТЬNULL(СУММА(НДФЛСведенияОДоходах.СуммаВычета / ВЫБОР КОГДА НДФЛСведенияОДоходах.ПериодРегистрации<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ), 0) КАК СуммаВычетаОборот
		//
		|	ИЗ
		|		ВТПериоды КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
		|			ПО Периоды.Физлицо = НДФЛСведенияОДоходах.ФизЛицо
		|				И (Периоды.Период = НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ))
		//vvv
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПересчета КАК ДатыПересчета
		|		ПО ДатыПересчета.Физлицо = Периоды.ФизЛицо
		|	ГДЕ
		//vvv
		//|		НДФЛСведенияОДоходах.Период >= &парамНачалоГода И
		|		НДФЛСведенияОДоходах.Период >= ВЫБОР КОГДА ДатыПересчета.ДатаПересчета ЕСТЬ NULL ТОГДА &парамНачалоГода ИНАЧЕ ДатыПересчета.ДатаПересчета КОНЕЦ И
		//
		|		НДФЛСведенияОДоходах.Период <= &парамКонецМесяцаНалоговогоПериода
		//vvv исключаем суммы, начисленные за будущий период в будущем периоде, иначе они попадали в расчет, когда за будущий период были начисления в текущем
		|		И НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) <= &парамПериодРегистрации
		//
		|		И НДФЛСведенияОДоходах.Организация = &парамОрганизация
		|		И НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка13
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ),
		|		НДФЛСведенияОДоходах.ФизЛицо,
		|		НДФЛСведенияОДоходах.КодДохода,
		|		НДФЛСведенияОДоходах.КодВычета) КАК НДФЛОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДФЛОбороты.Физлицо,
		|	НДФЛОбороты.Период,
		|	НДФЛОбороты.КодДохода,
		|	НДФЛОбороты.КодВычета
		|ИНДЕКСИРОВАТЬ ПО Физлицо, Период";
		
			
		Запрос.Текст = ДоходыСКодамиВычетовТекст;
		Запрос.Выполнить();

		Ставка30Текст        = "0.12";
		ТипЗначенияНДФЛТекст = "ЧИСЛО(10, 0)";
		
		ПериодыСКодамиТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодФизлицо.Период КАК Период,
		|	ПериодФизлицо.Физлицо КАК Физлицо,
		|	ВЫБОР
		|		КОГДА ФизлицаНеРезиденты.Физлицо ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Резидент
		|ПОМЕСТИТЬ ВТПериодыСКодами
		|ИЗ
		|	ВТПериоды КАК ПериодФизлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизлицаНеРезиденты КАК ФизлицаНеРезиденты
		|		ПО ФизлицаНеРезиденты.Физлицо = ПериодФизлицо.Физлицо
		|			И ФизлицаНеРезиденты.Период = ПериодФизлицо.Период";
		
		//vvv перепишем запрос, добавим ставку налога, нужна для пересчета задним числом
		ПериодыСКодамиТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодФизлицо.Период КАК Период,
		|	ПериодФизлицо.Физлицо КАК Физлицо,
		|	ШкалаПодоходногоНалога.Налог КАК Налог,
		|	ВЫБОР
		|		КОГДА ФизлицаНеРезиденты.Физлицо ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Резидент
		|ПОМЕСТИТЬ ВТПериодыСКодами
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПериодФизлицо.Период КАК Период,
		|		ПериодФизлицо.Физлицо КАК Физлицо,
		|		МАКСИМУМ(ШкалаПодоходногоНалога.Период) КАК ПериодШкалы
		|	ИЗ
		|		ВТПериоды КАК ПериодФизлицо
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаПодоходногоНалога КАК ШкалаПодоходногоНалога
		|			ПО (ШкалаПодоходногоНалога.Период <= ПериодФизлицо.Период)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПериодФизлицо.Период,
		|		ПериодФизлицо.Физлицо) КАК ПериодФизлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаПодоходногоНалога КАК ШкалаПодоходногоНалога
		|		ПО (ШкалаПодоходногоНалога.Период = ПериодФизлицо.ПериодШкалы)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизлицаНеРезиденты КАК ФизлицаНеРезиденты
		|		ПО (ФизлицаНеРезиденты.Физлицо = ПериодФизлицо.Физлицо)
		|			И (ФизлицаНеРезиденты.Период = ПериодФизлицо.Период)";
		//
		Запрос.Текст = ПериодыСКодамиТекст;
		Запрос.Выполнить();

		// ДоходыЗаГод 
		//	Поля:
		//		ФизЛицо
		//		Период
		//		Резидент
		//		ОблагаемыйДоходЗаГод
		//
		//	Описание:
		//	Выбирает по всем периодам с начала года сумму дохода нарастающим итогом за год

		ДоходыЗаГодТекст = "
		|ВЫБРАТЬ
		|	НДФЛОбороты.Период КАК Период,
		//vvv
		|	НДФЛОбороты.Налог КАК Налог,
		//
		|	НДФЛОбороты.ФизЛицо КАК ФизЛицо,
		|	НДФЛОбороты.Резидент КАК Резидент,
		|	СУММА(НДФЛОбороты.НалогНерезидента) КАК НалогНерезидента,
		|	СУММА(НДФЛОбороты.ОблагаемыйДоходЗаПериод) КАК ОблагаемыйДоходЗаПериод,
		|	СУММА(НДФЛОбороты.ОблагаемыйДоходЗаГод) КАК ОблагаемыйДоходЗаГод
		|ПОМЕСТИТЬ ВТДоходыЗаГод
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		//vvv
		|		Периоды.Налог КАК Налог,
		//
		|		Периоды.Физлицо КАК ФизЛицо,
		|		Периоды.Резидент КАК Резидент,
		|		ВЫБОР КОГДА НДФЛОбороты.Период = Периоды.Период ТОГДА ВЫРАЗИТЬ((НДФЛОбороты.СуммаДоходаОборот - ВЫБОР КОГДА Периоды.Резидент ИЛИ НДФЛОбороты.КодВычета НЕ В (&КодыВычетовРезидентов) ТОГДА НДФЛОбороты.СуммаВычетаОборот ИНАЧЕ 0 КОНЕЦ) * 0.12 КАК ЧИСЛО(15, 0)) ИНАЧЕ 0 КОНЕЦ КАК НалогНерезидента,
		|       ВЫБОР КОГДА НДФЛОбороты.Период = Периоды.Период ТОГДА НДФЛОбороты.СуммаДоходаОборот - ВЫБОР КОГДА Периоды.Резидент ИЛИ НДФЛОбороты.КодВычета НЕ В (&КодыВычетовРезидентов) ТОГДА НДФЛОбороты.СуммаВычетаОборот ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК ОблагаемыйДоходЗаПериод,
		|		НДФЛОбороты.СуммаДоходаОборот - ВЫБОР КОГДА Периоды.Резидент ИЛИ НДФЛОбороты.КодВычета НЕ В (&КодыВычетовРезидентов) ТОГДА НДФЛОбороты.СуммаВычетаОборот ИНАЧЕ 0 КОНЕЦ КАК ОблагаемыйДоходЗаГод
		|	ИЗ
		|		 ВТПериодыСКодами КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыСКодамиВычетов КАК НДФЛОбороты
		|			ПО (НДФЛОбороты.Период МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) И Периоды.Период) И Периоды.Физлицо = НДФЛОбороты.Физлицо) КАК НДФЛОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДФЛОбороты.Период,
		//vvv
		|	НДФЛОбороты.Налог,
		//
		|	НДФЛОбороты.ФизЛицо,
		|	НДФЛОбороты.Резидент";


		
		Запрос.Текст = ДоходыЗаГодТекст;
		Запрос.Выполнить();
		// НДФЛРасчетыСБюджетом
		//	Поля:
		//		ФизЛицо
		//		МесяцНалоговогоПериода
		//		ИсчисленныйНалог
		//		ПримененныеВычетыЛичные - уже примененные личные стандартные вычеты по НДФЛ
		//		ПолеПримененныеВычетыДетские - уже примененные вычеты на детей по НДФЛ
		//
		//	Описание:
		//	Выбирает исчисленные налоги (приходы по регистру НДФЛРасчетыСБюджетом)
		//  для СписокФизлиц

		НДФЛРасчетыСБюджетомТекст = 
		"ВЫБРАТЬ
		|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
		//vvv
		//|	СУММА(НДФЛРасчетыСБюджетом.Налог) КАК ИсчисленныйНалог,
		//|	СУММА(НДФЛРасчетыСБюджетом.ПримененныйВычетЛичный) КАК ПримененныеВычетыЛичные,
		//|	СУММА(НДФЛРасчетыСБюджетом.ПримененныйВычетНаДетей) КАК ПолеПримененныеВычетыДетские,
		//|	СУММА(НДФЛРасчетыСБюджетом.ПримененныйВычетНаДетейЛьгота) КАК ПолеПримененныеВычетыДетскиеЛьгота,
		//|	СУММА(НДФЛРасчетыСБюджетом.ПримененныйДополнительныйВычет) КАК ПолеПримененныеВычетыДополнительные
		|	СУММА(НДФЛРасчетыСБюджетом.Налог / ВЫБОР КОГДА НДФЛРасчетыСБюджетом.Период<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ) КАК ИсчисленныйНалог,
		|	СУММА(НДФЛРасчетыСБюджетом.ПримененныйВычетЛичный / ВЫБОР КОГДА НДФЛРасчетыСБюджетом.Период<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ) КАК ПримененныеВычетыЛичные,
		|	СУММА(НДФЛРасчетыСБюджетом.ПримененныйВычетНаДетей / ВЫБОР КОГДА НДФЛРасчетыСБюджетом.Период<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ) КАК ПолеПримененныеВычетыДетские,
		|	СУММА(НДФЛРасчетыСБюджетом.ПримененныйВычетНаДетейЛьгота / ВЫБОР КОГДА НДФЛРасчетыСБюджетом.Период<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ) КАК ПолеПримененныеВычетыДетскиеЛьгота,
		|	СУММА(НДФЛРасчетыСБюджетом.ПримененныйДополнительныйВычет / ВЫБОР КОГДА НДФЛРасчетыСБюджетом.Период<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ) КАК ПолеПримененныеВычетыДополнительные
		//
		|ПОМЕСТИТЬ ВТНДФЛРасчетыСБюджетом
		|ИЗ
		|	РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК РаботникиОрганизации
		|		ПО РаботникиОрганизации.Физлицо = НДФЛРасчетыСБюджетом.ФизЛицо
		//vvv
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПересчета КАК ДатыПересчета
		|		ПО ДатыПересчета.Физлицо = НДФЛРасчетыСБюджетом.ФизЛицо
		//	
		|ГДЕ
		//vvv
		//|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода >= &парамНачалоГода
		|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода >= ВЫБОР КОГДА ДатыПересчета.ДатаПересчета ЕСТЬ NULL ТОГДА &парамНачалоГода ИНАЧЕ ДатыПересчета.ДатаПересчета КОНЕЦ
		//
		|	И НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода <= &парамКонецМесяцаНалоговогоПериода
		|	И НДФЛРасчетыСБюджетом.Организация = &парамОрганизация
		|	И НДФЛРасчетыСБюджетом.Регистратор <> &парамРегистратор
		|	И НДФЛРасчетыСБюджетом.Период <= &парамКонецМесяцаНалоговогоПериода //КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
		|	И НДФЛРасчетыСБюджетом.ВидДвижения = &парамПриход
		|	И НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента = &парамСтавка13
		|	И НДФЛРасчетыСБюджетом.ВидСтроки В (&парамВидСтроки)
		|
		|СГРУППИРОВАТЬ ПО
		|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода,
		|	НДФЛРасчетыСБюджетом.ФизЛицо";

 		Запрос.Текст = НДФЛРасчетыСБюджетомТекст;
		Запрос.Выполнить();

		// НДФЛРасчетыСБюджетомЗаГод
		//	Поля:
		//		ФизЛицо
		//		Период
		//		ИсчисленныйНалогЗаГод
		//		ПримененныеВычетыЛичныеЗаГод
		//		ПолеПримененныеВычетыДетскиеЗаГод
		//		ПолеПримененныеВычетыНаДетейИнвалидовЗаГод
		//
		//	Описание:
		//	Выбирает исчисленные налоги нарастающим итогом за год
		
		НДФЛРасчетыСБюджетомЗаГодТекст = 
		"ВЫБРАТЬ
		|	Периоды.Период КАК Период,
		|	НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
		|   СУММА(ВЫБОР		
		|	    КОГДА Периоды.Период = НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода
		|	    ТОГДА ЕСТЬNULL(НДФЛРасчетыСБюджетом.ИсчисленныйНалог, 0)
		|		ИНАЧЕ 0
		|   КОНЕЦ) КАК ИсчисленныйНалог,
		|	СУММА(ЕСТЬNULL(НДФЛРасчетыСБюджетом.ПримененныеВычетыЛичные, 0)) КАК ПримененныеВычетыЛичныеЗаГод,
		|	СУММА(ЕСТЬNULL(НДФЛРасчетыСБюджетом.ПолеПримененныеВычетыДетские, 0)) КАК ПолеПримененныеВычетыДетскиеЗаГод,
		|	СУММА(ЕСТЬNULL(НДФЛРасчетыСБюджетом.ПолеПримененныеВычетыДетскиеЛьгота,0)) КАК ПолеПримененныеВычетыДетскиеЛьготаЗаГод,
		|	СУММА(ЕСТЬNULL(НДФЛРасчетыСБюджетом.ПолеПримененныеВычетыДополнительные,0)) КАК ПолеПримененныеВычетыДополнительныеЗаГод,
		|	СУММА(ВЫБОР КОГДА Периоды.Период = НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода ТОГДА ЕСТЬNULL(НДФЛРасчетыСБюджетом.ПримененныеВычетыЛичные, 0) ИНАЧЕ 0 КОНЕЦ) КАК ПримененныеВычетыЛичныеЗаМесяц,
		|	СУММА(ВЫБОР КОГДА Периоды.Период = НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода ТОГДА ЕСТЬNULL(НДФЛРасчетыСБюджетом.ПолеПримененныеВычетыДетские, 0) ИНАЧЕ 0 КОНЕЦ) КАК ПолеПримененныеВычетыДетскиеЗаМесяц,
		|	СУММА(ВЫБОР КОГДА Периоды.Период = НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода ТОГДА ЕСТЬNULL(НДФЛРасчетыСБюджетом.ПолеПримененныеВычетыДетскиеЛьгота, 0) ИНАЧЕ 0 КОНЕЦ) КАК ПолеПримененныеВычетыДетскиеЛьготаЗаМесяц,
		|	СУММА(ВЫБОР КОГДА Периоды.Период = НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода ТОГДА ЕСТЬNULL(НДФЛРасчетыСБюджетом.ПолеПримененныеВычетыДополнительные, 0) ИНАЧЕ 0 КОНЕЦ) КАК ПолеПримененныеВычетыДополнительныеЗаМесяц
		|ПОМЕСТИТЬ ВТНДФЛРасчетыСБюджетомЗаГод
		|ИЗ
		|	ВТПериоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
		|		ПО (НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) И Периоды.Период)
		|			И Периоды.Физлицо = НДФЛРасчетыСБюджетом.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизлицаНеРезиденты КАК ФизлицаНеРезиденты
		|		ПО ФизлицаНеРезиденты.Физлицо = Периоды.Физлицо
		|			И ФизлицаНеРезиденты.Период = Периоды.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.Период,
		|	НДФЛРасчетыСБюджетом.ФизЛицо,
		|	ФизлицаНеРезиденты.ФизЛицо";

		Запрос.Текст = НДФЛРасчетыСБюджетомЗаГодТекст;
		Запрос.Выполнить();

		//Запрос.Текст = НДФЛРасчетыСБюджетомЗаГодТекст;
		//Запрос.Выполнить();
		// ПрименениеВычетовВОрганизации
		//	Поля:
		//		Физлицо,
		//		Период
		//
		// Описание:
		//	Выбирает список физлиц + периодв в которые применяются стандартные вычеты по 
		//	заданной организации

		ПрименениеВычетовВОрганизацииТекст = 
		"ВЫБРАТЬ
		|	НДФЛПрименениеВычетовСрезПоследних.Физлицо КАК Физлицо,
		|	НДФЛПрименениеВычетовСрезПоследних.Период КАК Период
		|ПОМЕСТИТЬ ВТПрименениеВычетовВОрганизации
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(НДФЛПрименениеВычетов.Период) КАК ПериодСреза,
		|		НДФЛПрименениеВычетов.Физлицо КАК Физлицо,
		|		Периоды.Период КАК Период
		|	ИЗ
		|		ВТПериоды КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
		|			ПО Периоды.Период >= НДФЛПрименениеВычетов.Период 
		|			И НДФЛПрименениеВычетов.Физлицо = Периоды.Физлицо
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НДФЛПрименениеВычетов.Физлицо,
		|		Периоды.Период) КАК НДФЛПрименениеВычетовСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
		|		ПО НДФЛПрименениеВычетов.Период = НДФЛПрименениеВычетовСрезПоследних.ПериодСреза
		|			И НДФЛПрименениеВычетов.Физлицо = НДФЛПрименениеВычетовСрезПоследних.Физлицо
		|
		|ГДЕ
		|	НДФЛПрименениеВычетов.Организация = &парамОрганизация";
		
		Запрос.Текст = ПрименениеВычетовВОрганизацииТекст;
		Запрос.Выполнить();
		
		НДФЛРазмерВычетов =
		"ВЫБРАТЬ
		|	Периоды.Период КАК Период,
		|	ВЫБОР КОГДА (НДФЛРазмерВычетов.КодВычета) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ НДФЛРазмерВычетов.КодВычета КОНЕЦ КАК КодВычета,
		|	НДФЛРазмерВычетов.РазмерВРублях  КАК Размер,    
		|	НДФЛРазмерВычетов.ОграничениеПоДоходам КАК ОграничениеПоДоходам
		|ПОМЕСТИТЬ ВТНДФЛРазмерВычетов
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		НДФЛРазмерВычетов.КодВычета КАК КодВычета,
		|		МАКСИМУМ(НДФЛРазмерВычетов.Период) КАК ПериодРегистра
		|	ИЗ
		|		ВТПериоды КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов КАК НДФЛРазмерВычетов
		|			ПО Периоды.Период >= НДФЛРазмерВычетов.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.Период,
		|		НДФЛРазмерВычетов.КодВычета) КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов КАК НДФЛРазмерВычетов
		|		ПО НДФЛРазмерВычетов.Период = Периоды.ПериодРегистра И Периоды.КодВычета = НДФЛРазмерВычетов.КодВычета ";

		Запрос.Текст =  НДФЛРазмерВычетов;
		Запрос.Выполнить();
		// ПраваНаВычеты
		//	Поля:
		//		Физлицо
		//		Период
		//		СтандартныеВычетыЛичные
		//		СтандартныеВычетыДетские
		//
		//	Описание:
		//	Выбирает по всем периодам года стандартные вычеты на которые имеет право физлицо

		ПраваНаВычетыТекст = 
		"ВЫБРАТЬ
		|	НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо КАК Физлицо,
		|	НДФЛСтандартныеВычетыФизлицСрезПоследних.Период КАК Период,
		|	ВычетыФизлиц.КоличествоДетей,
		|	НДФЛРазмерВычетовЛичный.ОграничениеПоДоходам КАК ОграничениеПоДоходамЛичные,
		|	ВЫБОР КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ЕСТЬNULL(НДФЛРазмерВычетовЛичный.Размер, 0) КОНЕЦ КАК СтандартныеВычетыЛичные,
		|	ВЫБОР КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ЕСТЬNULL(НДФЛРазмерВычетовНаДетей.Размер, 0) * ЕСТЬNULL(ВычетыФизлиц.КоличествоДетей, 0) КОНЕЦ КАК СтандартныеВычетыДетские,
		|	ВЫБОР КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ВЫБОР КОГДА (НДФЛРазмерВычетовНаДетейЛьгота.Размер) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НДФЛРазмерВычетовНаДетейЛьгота.Размер КОНЕЦ * ВЫБОР КОГДА (ВычетыФизлиц.КоличествоДетейЛьгота) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ВычетыФизлиц.КоличествоДетейЛьгота КОНЕЦ КОНЕЦ КАК СтандартныеВычетыДетскиеЛьгота,
		|	ВЫБОР КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ВЫБОР КОГДА (НДФЛРазмерВычетовДополнительный.Размер) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НДФЛРазмерВычетовДополнительный.Размер КОНЕЦ КОНЕЦ КАК СтандартныеВычетыДополнительные
		|ПОМЕСТИТЬ ВТПраваНаВычеты
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(ВычетыФизлиц.Период) КАК ПериодСреза,
		|		ВычетыФизЛиц.Физлицо КАК Физлицо,
		|		Периоды.Период КАК Период
		|	ИЗ
		|		ВТПериоды КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
		|			ПО ВычетыФизлиц.Период <= Периоды.Период И ВычетыФизлиц.Физлицо = Периоды.Физлицо
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВычетыФизЛиц.Физлицо,
		|		Периоды.Период) КАК НДФЛСтандартныеВычетыФизлицСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
		|		ПО ВычетыФизлиц.Период = НДФЛСтандартныеВычетыФизлицСрезПоследних.ПериодСреза И ВычетыФизлиц.Физлицо = НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛРазмерВычетов КАК НДФЛРазмерВычетовЛичный
		|		ПО НДФЛРазмерВычетовЛичный.КодВычета = ВычетыФизлиц.КодВычетаЛичный И НДФЛРазмерВычетовЛичный.Период = НАЧАЛОПЕРИОДА(НДФЛСтандартныеВычетыФизлицСрезПоследних.Период, Месяц)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛРазмерВычетов КАК НДФЛРазмерВычетовНаДетей
		|		ПО НДФЛРазмерВычетовНаДетей.КодВычета = ВычетыФизлиц.КодВычетаНаДетей И НДФЛРазмерВычетовНаДетей.Период = НАЧАЛОПЕРИОДА(НДФЛСтандартныеВычетыФизлицСрезПоследних.Период, Месяц)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛРазмерВычетов КАК НДФЛРазмерВычетовНаДетейЛьгота
		|		ПО НДФЛРазмерВычетовНаДетейЛьгота.КодВычета = ВычетыФизлиц.КодВычетаНаДетейЛьгота И НДФЛРазмерВычетовНаДетейЛьгота.Период = НАЧАЛОПЕРИОДА(НДФЛСтандартныеВычетыФизлицСрезПоследних.Период, Месяц)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛРазмерВычетов КАК НДФЛРазмерВычетовДополнительный
		|		ПО НДФЛРазмерВычетовДополнительный.КодВычета = ВычетыФизлиц.КодВычетаДополнительный И НДФЛРазмерВычетовДополнительный.Период = НАЧАЛОПЕРИОДА(НДФЛСтандартныеВычетыФизлицСрезПоследних.Период, Месяц)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеВычетовВОрганизации КАК ПрименениеВычетов
		|		ПО ПрименениеВычетов.Физлицо = НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо И ПрименениеВычетов.Период = НДФЛСтандартныеВычетыФизлицСрезПоследних.Период";

		Запрос.Текст =  ПраваНаВычетыТекст;
		Запрос.Выполнить();
		
		
		ПрименяемыйЛичныйВычет =
		"ВЫБРАТЬ
		|	РаботникиОргПраваНаВычеты.Физлицо КАК Физлицо,
		|	РаботникиОргПраваНаВычеты.Период КАК Период,
		|	РаботникиОргПраваНаВычеты.ОграничениеПоДоходамЛичные,
		|	ДоходыЗаГод.ОблагаемыйДоходЗаПериод КАК ДоходДляНалога,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|						КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод ЕСТЬ NULL 
		|							ТОГДА 0
		|						ИНАЧЕ ДоходыЗаГод.ОблагаемыйДоходЗаПериод
		|					КОНЕЦ <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамЛичные
		|					И ДоходыЗаГод.ОблагаемыйДоходЗаПериод > 0
		|				ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамЛичные = 0
		|			ТОГДА ВЫБОР
		//vvv
		|					КОГДА ДоходыЗаГод.Период>&парамПериодРегистрации И НЕ &парамДаватьВычетыНаБудПериод ТОГДА 0
		//
		|					КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод > РаботникиОргПраваНаВычеты.СтандартныеВычетыЛичные
		|						ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыЛичные
		|					ИНАЧЕ ДоходыЗаГод.ОблагаемыйДоходЗаПериод
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПрименяемыеВычетыЛичные
		|ПОМЕСТИТЬ ВТПрименяемыйЛичныйВычет
		|ИЗ
		|	ВТПраваНаВычеты КАК РаботникиОргПраваНаВычеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыЗаГод КАК ДоходыЗаГод
		|		ПО (ДоходыЗаГод.Период = РаботникиОргПраваНаВычеты.Период)
		|			И (ДоходыЗаГод.ФизЛицо = РаботникиОргПраваНаВычеты.Физлицо)";
		
		Запрос.Текст =  ПрименяемыйЛичныйВычет;
		Запрос.Выполнить();


		
		
		
		
		ПрименяемыеВычетыТекст = 
	 	"ВЫБРАТЬ
		|	РаботникиОргПраваНаВычеты.Физлицо КАК Физлицо,
		|	РаботникиОргПраваНаВычеты.Период КАК Период,
		|	РаботникиОргПраваНаВычеты.ОграничениеПоДоходамЛичные,
		|	ДоходыЗаГод.ОблагаемыйДоходЗаПериод КАК ДоходДляНалога,
		|	ПрименяемыйЛичныйВычет.ПрименяемыеВычетыЛичные КАК ПрименяемыеВычетыЛичные,
		|	ВЫБОР
	 	|		КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод ЕСТЬ NULL 
	 	|				ИЛИ ДоходыЗаГод.ОблагаемыйДоходЗаПериод = 0
	 	|			ТОГДА 0 
		|		ИНАЧЕ ВЫБОР
		//vvv
		|				КОГДА ДоходыЗаГод.Период>&парамПериодРегистрации И НЕ &парамДаватьВычетыНаБудПериод ТОГДА 0
		//
		|				КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод > ПрименяемыйЛичныйВычет.ПрименяемыеВычетыЛичные  + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
	 	|					ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
	 	|				КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод -ПрименяемыйЛичныйВычет.ПрименяемыеВычетыЛичные  > 0
	 	|					ТОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - ПрименяемыйЛичныйВычет.ПрименяемыеВычетыЛичные 
	 	|				ИНАЧЕ 0
	 	|			КОНЕЦ
	 	|	КОНЕЦ КАК ПрименяемыеВычетыДетские,
		|	ВЫБОР
	 	|		КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод ЕСТЬ NULL 
	 	|				ИЛИ ДоходыЗаГод.ОблагаемыйДоходЗаПериод = 0
	 	|			ТОГДА 0
	 	|		ИНАЧЕ ВЫБОР
		//vvv
		|				КОГДА ДоходыЗаГод.Период>&парамПериодРегистрации И НЕ &парамДаватьВычетыНаБудПериод ТОГДА 0
		//
		|				КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод > ПрименяемыйЛичныйВычет.ПрименяемыеВычетыЛичные  + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеЛьгота
	 	|					ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеЛьгота
	 	|				КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - ПрименяемыйЛичныйВычет.ПрименяемыеВычетыЛичные  - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские > 0
	 	|					ТОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - ПрименяемыйЛичныйВычет.ПрименяемыеВычетыЛичные  - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
	 	|				ИНАЧЕ 0
	 	|			КОНЕЦ
	 	|	КОНЕЦ КАК ПрименяемыеВычетыДетскиеЛьгота,
		|	ВЫБОР
	 	|		КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод ЕСТЬ NULL 
	 	|				ИЛИ ДоходыЗаГод.ОблагаемыйДоходЗаПериод = 0
	 	|			ТОГДА 0
	 	|		ИНАЧЕ ВЫБОР
		//vvv
		|				КОГДА ДоходыЗаГод.Период>&парамПериодРегистрации И НЕ &парамДаватьВычетыНаБудПериод ТОГДА 0
		//
		|				КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод > ПрименяемыйЛичныйВычет.ПрименяемыеВычетыЛичные  + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеЛьгота + РаботникиОргПраваНаВычеты.СтандартныеВычетыДополнительные
	 	|					ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДополнительные
	 	|				КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - ПрименяемыйЛичныйВычет.ПрименяемыеВычетыЛичные  - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеЛьгота > 0
	 	|					ТОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - ПрименяемыйЛичныйВычет.ПрименяемыеВычетыЛичные  - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеЛьгота
	 	|				ИНАЧЕ 0
	 	|			КОНЕЦ
	 	|	КОНЕЦ КАК ПрименяемыеВычетыДополнительные
		|ПОМЕСТИТЬ ВТПрименяемыеВычеты
		|ИЗ
		|	ВТПраваНаВычеты КАК РаботникиОргПраваНаВычеты
	 	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыЗаГод КАК ДоходыЗаГод
	 	|		ПО (ДоходыЗаГод.Период = РаботникиОргПраваНаВычеты.Период)
	 	|			И (ДоходыЗаГод.ФизЛицо = РаботникиОргПраваНаВычеты.Физлицо)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименяемыйЛичныйВычет КАК ПрименяемыйЛичныйВычет
	 	|		ПО (ПрименяемыйЛичныйВычет.Период = РаботникиОргПраваНаВычеты.Период)
	 	|			И (ПрименяемыйЛичныйВычет.ФизЛицо = РаботникиОргПраваНаВычеты.Физлицо)";
		
		Запрос.Текст = ПрименяемыеВычетыТекст;
		Запрос.Выполнить();
		
		//	 ПрименяемыеВычетыЗаГод
		//	Поля:
		//		Физлицо
		//		Период
		//		ВычетыЛичныеЗаГод
		//		ВычетыДетскиеЗаГод
		//
		//	Описание:
		//	Выбирает по всем периодам года применяемые стандартные вычеты нарастающим итогом за год
		//

		ПрименяемыеВычетыЗаГодТекст = 
		"ВЫБРАТЬ
		|	ВычетыПоПериодам.Физлицо КАК Физлицо,
		|	Периоды.Период КАК Период,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыЛичные) КАК ВычетыЛичныеЗаГод,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыДетские) КАК ВычетыДетскиеЗаГод,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыДетскиеЛьгота) КАК ВычетыДетскиеЛьготаЗаГод,
		|	СУММА(ВычетыПоПериодам.ПрименяемыеВычетыДополнительные) КАК ВычетыДополнительныеЗаГод,
		|   СУММА(ВЫБОР КОГДА Периоды.Период = ВычетыПоПериодам.Период ТОГДА ВычетыПоПериодам.ПрименяемыеВычетыЛичные ИНАЧЕ 0 КОНЕЦ) КАК ПрименяемыеВычетыЛичныеЗаПериод,
		|   СУММА(ВЫБОР КОГДА Периоды.Период = ВычетыПоПериодам.Период ТОГДА ВычетыПоПериодам.ПрименяемыеВычетыДетские ИНАЧЕ 0 КОНЕЦ) КАК ПрименяемыеВычетыДетскиеЗаПериод,
		|   СУММА(ВЫБОР КОГДА Периоды.Период = ВычетыПоПериодам.Период ТОГДА ВычетыПоПериодам.ПрименяемыеВычетыДетскиеЛьгота ИНАЧЕ 0 КОНЕЦ) КАК ПрименяемыеВычетыДетскиеЛьготаЗаПериод,
		|   СУММА(ВЫБОР КОГДА Периоды.Период = ВычетыПоПериодам.Период ТОГДА ВычетыПоПериодам.ПрименяемыеВычетыДополнительные ИНАЧЕ 0 КОНЕЦ) КАК ПрименяемыеВычетыДополнительныеЗаПериод
		|ПОМЕСТИТЬ ВТПрименяемыеВычетыЗаГод
		|ИЗ
		|	ВТПериоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименяемыеВычеты КАК ВычетыПоПериодам
		|		ПО (ВычетыПоПериодам.Период МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) И Периоды.Период) И ВычетыПоПериодам.Физлицо = Периоды.Физлицо
		|
		|СГРУППИРОВАТЬ ПО
		|	ВычетыПоПериодам.Физлицо,
		|	Периоды.Период";
		
		Запрос.Текст = ПрименяемыеВычетыЗаГодТекст;
		Запрос.Выполнить();

		// Приходы вычетов помесячные  
		Вычеты640СтрахПоМесяцамТекст = 
		"ВЫБРАТЬ
		|	Остатки.ФизЛицо КАК ФизЛицо,
		|	Остатки.Период КАК Период,
		|	Остатки.Год КАК НалоговыйПериод,
		|	Остатки.РазмерНачальныйОстаток КАК Вычет640СтрахОстаток,
		|	0 КАК ОборотВычеты640Страх,
		|	0 КАК ПримененныеВычеты640Страх
		|ПОМЕСТИТЬ ВТВычеты640СтрахПоМесяцам
		|ИЗ
		|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
		//vvv
		//|		&парамНачалоГода,
		|		,
		//
		|		&парамКонецГода,
		|		Год,
		|		,
		|		КодВычетаИмущественный = &КодВычета640Страх
		|			И Физлицо В (ВЫБРАТЬ Физлицо ИЗ ВТСписокФизЛиц)
		|			И Организация = &парамОрганизация) КАК Остатки
		//vvv
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПересчета КАК ДатыПересчета
		|		ПО ДатыПересчета.Физлицо = Остатки.ФизЛицо
		|	ГДЕ Остатки.Период >=ВЫБОР КОГДА ДатыПересчета.ДатаПересчета ЕСТЬ NULL ТОГДА &парамНачалоГода ИНАЧЕ ДатыПересчета.ДатаПересчета КОНЕЦ
		//
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Обороты.ФизЛицо,
		|	Обороты.Период,
		|	Обороты.Год,
		|	0,
		|	ВЫБОР КОГДА Обороты.Период <= &парамПериодРегистрации ТОГДА Обороты.РазмерПриход ИНАЧЕ 0 КОНЕЦ,
		|	Обороты.РазмерРасход
		|ИЗ
		|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
		//vvv
		//|		&парамНачалоГода,
		|		,
		//
		|		&парамКонецГода,
		|		Месяц,
		|		,
		|		КодВычетаИмущественный = &КодВычета640Страх
		|			И Физлицо В (ВЫБРАТЬ Физлицо ИЗ ВТСписокФизЛиц)
		|			И Организация = &парамОрганизация) КАК Обороты
		//vvv
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПересчета КАК ДатыПересчета
		|		ПО ДатыПересчета.Физлицо = Обороты.ФизЛицо
		|	ГДЕ Обороты.Период >=ВЫБОР КОГДА ДатыПересчета.ДатаПересчета ЕСТЬ NULL ТОГДА &парамНачалоГода ИНАЧЕ ДатыПересчета.ДатаПересчета КОНЕЦ";
		//
		
		//vvv
		Вычеты640СтрахПоМесяцамТекст = 
		"ВЫБРАТЬ
		|	Обороты.ФизЛицо КАК ФизЛицо,
		|	Обороты.Период КАК Период,
		|	Обороты.НалоговыйПериод КАК НалоговыйПериод,
		|	СУММА(Обороты.ОборотВычеты640Страх) КАК ОборотВычеты640Страх,
		|	СУММА(Обороты.ПримененныеВычеты640Страх) КАК ПримененныеВычеты640Страх
		|ПОМЕСТИТЬ ВТВычеты640СтрахПоМесяцам
		|ИЗ
		|	(ВЫБРАТЬ
		|		Обороты.ФизЛицо КАК ФизЛицо,
		|		Обороты.МесяцНалоговогоПериода КАК Период,
		|		Обороты.Год КАК НалоговыйПериод,
		|		Обороты.РазмерПриход / 10000 КАК ОборотВычеты640Страх,
		|		Обороты.РазмерРасход / 10000 КАК ПримененныеВычеты640Страх
		|	ИЗ
		|		РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
		|				,
		|				ДОБАВИТЬКДАТЕ(&ДатаДеноминации, ДЕНЬ, -1),
		|				,
		|				,
		|				КодВычетаИмущественный = &КодВычета640Страх
		|					И Физлицо В
		|						(ВЫБРАТЬ
		|							СписокФизЛиц.Физлицо
		|						ИЗ
		|							ВТСписокФизЛиц КАК СписокФизЛиц)
		|					И Организация = &парамОрганизация) КАК Обороты
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПересчета КАК ДатыПересчета
		|			ПО (ДатыПересчета.Физлицо = Обороты.ФизЛицо)
		|	ГДЕ
		|		Обороты.МесяцНалоговогоПериода >= ВЫБОР
		|				КОГДА ДатыПересчета.ДатаПересчета ЕСТЬ NULL 
		|					ТОГДА &парамНачалоГода
		|				ИНАЧЕ ДатыПересчета.ДатаПересчета
		|			КОНЕЦ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Обороты.ФизЛицо,
		|		Обороты.МесяцНалоговогоПериода,
		|		Обороты.Год,
		|		Обороты.РазмерПриход,
		|		Обороты.РазмерРасход
		|	ИЗ
		|		РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
		|				&ДатаДеноминации,
		|				&парамКонецГода,
		|				,
		|				,
		|				КодВычетаИмущественный = &КодВычета640Страх
		|					И Физлицо В
		|						(ВЫБРАТЬ
		|							СписокФизЛиц.Физлицо
		|						ИЗ
		|							ВТСписокФизЛиц КАК СписокФизЛиц)
		|					И Организация = &парамОрганизация) КАК Обороты
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПересчета КАК ДатыПересчета
		|			ПО (ДатыПересчета.Физлицо = Обороты.ФизЛицо)
		|	ГДЕ
		|		Обороты.МесяцНалоговогоПериода >= ВЫБОР
		|				КОГДА ДатыПересчета.ДатаПересчета ЕСТЬ NULL 
		|					ТОГДА &парамНачалоГода
		|				ИНАЧЕ ДатыПересчета.ДатаПересчета
		|			КОНЕЦ) КАК Обороты
		|
		|СГРУППИРОВАТЬ ПО
		|	Обороты.ФизЛицо,
		|	Обороты.Период,
		|	Обороты.НалоговыйПериод";
		//
		
		Запрос.Текст = Вычеты640СтрахПоМесяцамТекст;
		Запрос.Выполнить();

		Вычеты312ПоМесяцамТекст = 
		"ВЫБРАТЬ
		|	Остатки.ФизЛицо КАК ФизЛицо,
		|	Остатки.Период КАК Период,
		|	Остатки.Год КАК НалоговыйПериод,
		|	Остатки.РазмерНачальныйОстаток КАК Вычет312Остаток,
		|	0 КАК ОборотВычеты312,
		|	0 КАК ПримененныеВычеты312
		|ПОМЕСТИТЬ ВТВычеты312ПоМесяцам
		|ИЗ
		|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
		//vvv
		//|		&парамНачалоГода,
		|		,
		//
		|		&парамКонецГода,
		|		Год,
		|		,
		|		КодВычетаИмущественный = &КодВычета312
		|			И Физлицо В (ВЫБРАТЬ Физлицо ИЗ ВТСписокФизЛиц)
		|			И Организация = &парамОрганизация) КАК Остатки
		//vvv
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПересчета КАК ДатыПересчета
		|		ПО ДатыПересчета.Физлицо = Остатки.ФизЛицо
		|	ГДЕ Остатки.Период >=ВЫБОР КОГДА ДатыПересчета.ДатаПересчета ЕСТЬ NULL ТОГДА &парамНачалоГода ИНАЧЕ ДатыПересчета.ДатаПересчета КОНЕЦ
		//
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Обороты.ФизЛицо,
		|	Обороты.Период,
		|	Обороты.Год,
		|	0,
		|	ВЫБОР КОГДА Обороты.Период <= &парамПериодРегистрации ТОГДА Обороты.РазмерПриход ИНАЧЕ 0 КОНЕЦ,
		|	Обороты.РазмерРасход
		|ИЗ
		|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
		//vvv
		//|		&парамНачалоГода,
		|		,
		//
		|		&парамКонецГода,
		|		Месяц,
		|		,
		|		КодВычетаИмущественный = &КодВычета312
		|			И Физлицо В (ВЫБРАТЬ Физлицо ИЗ ВТСписокФизЛиц)
		|			И Организация = &парамОрганизация) КАК Обороты
		//vvv
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПересчета КАК ДатыПересчета
		|		ПО ДатыПересчета.Физлицо = Обороты.ФизЛицо
		|	ГДЕ Обороты.Период >=ВЫБОР КОГДА ДатыПересчета.ДатаПересчета ЕСТЬ NULL ТОГДА &парамНачалоГода ИНАЧЕ ДатыПересчета.ДатаПересчета КОНЕЦ";
		//
		
		//vvv
		Вычеты312ПоМесяцамТекст = 
		"ВЫБРАТЬ
		|	Обороты.ФизЛицо КАК ФизЛицо,
		|	Обороты.Период КАК Период,
		|	Обороты.НалоговыйПериод КАК НалоговыйПериод,
		|	СУММА(Обороты.ОборотВычеты312) КАК ОборотВычеты312,
		|	СУММА(Обороты.ПримененныеВычеты312) КАК ПримененныеВычеты312
		|ПОМЕСТИТЬ ВТВычеты312ПоМесяцам
		|ИЗ
		|	(ВЫБРАТЬ
		|		Обороты.ФизЛицо КАК ФизЛицо,
		|		Обороты.МесяцНалоговогоПериода КАК Период,
		|		Обороты.Год КАК НалоговыйПериод,
		|		Обороты.РазмерПриход / 10000 КАК ОборотВычеты312,
		|		Обороты.РазмерРасход / 10000 КАК ПримененныеВычеты312
		|	ИЗ
		|		РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
		|				,
		|				ДОБАВИТЬКДАТЕ(&ДатаДеноминации, ДЕНЬ, -1),
		|				,
		|				,
		|				КодВычетаИмущественный = &КодВычета312
		|					И Физлицо В
		|						(ВЫБРАТЬ
		|							СписокФизЛиц.Физлицо
		|						ИЗ
		|							ВТСписокФизЛиц КАК СписокФизЛиц)
		|					И Организация = &парамОрганизация) КАК Обороты
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПересчета КАК ДатыПересчета
		|			ПО (ДатыПересчета.Физлицо = Обороты.ФизЛицо)
		|	ГДЕ
		|		Обороты.МесяцНалоговогоПериода >= ВЫБОР
		|				КОГДА ДатыПересчета.ДатаПересчета ЕСТЬ NULL 
		|					ТОГДА &парамНачалоГода
		|				ИНАЧЕ ДатыПересчета.ДатаПересчета
		|			КОНЕЦ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Обороты.ФизЛицо,
		|		Обороты.МесяцНалоговогоПериода,
		|		Обороты.Год,
		|		Обороты.РазмерПриход,
		|		Обороты.РазмерРасход
		|	ИЗ
		|		РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
		|				&ДатаДеноминации,
		|				&парамКонецГода,
		|				,
		|				,
		|				КодВычетаИмущественный = &КодВычета312
		|					И Физлицо В
		|						(ВЫБРАТЬ
		|							СписокФизЛиц.Физлицо
		|						ИЗ
		|							ВТСписокФизЛиц КАК СписокФизЛиц)
		|					И Организация = &парамОрганизация) КАК Обороты
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПересчета КАК ДатыПересчета
		|			ПО (ДатыПересчета.Физлицо = Обороты.ФизЛицо)
		|	ГДЕ
		|		Обороты.МесяцНалоговогоПериода >= ВЫБОР
		|				КОГДА ДатыПересчета.ДатаПересчета ЕСТЬ NULL 
		|					ТОГДА &парамНачалоГода
		|				ИНАЧЕ ДатыПересчета.ДатаПересчета
		|			КОНЕЦ) КАК Обороты
		|
		|СГРУППИРОВАТЬ ПО
		|	Обороты.ФизЛицо,
		|	Обороты.Период,
		|	Обороты.НалоговыйПериод";
		//
		
		Запрос.Текст = Вычеты312ПоМесяцамТекст;
		Запрос.Выполнить();

		
		Вычеты311ПоМесяцамТекст = 
		"ВЫБРАТЬ
		|	Остатки.ФизЛицо КАК ФизЛицо,
		|	Остатки.Период КАК Период,
		|	Остатки.Год КАК НалоговыйПериод,
		|	Остатки.РазмерНачальныйОстаток КАК Вычет311Остаток,
		|	0 КАК ОборотВычеты311,
		|	0 КАК ПримененныеВычеты311
		|ПОМЕСТИТЬ ВТВычеты311ПоМесяцам
		|ИЗ
		|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
		//vvv
		//|		&парамНачалоГода,
		|		,
		//
		|		&парамКонецГода,
		|		Год,
		|		,
		|		КодВычетаИмущественный = &КодВычета311
		|			И Физлицо В (ВЫБРАТЬ Физлицо ИЗ ВТСписокФизЛиц)
		|			И Организация = &парамОрганизация) КАК Остатки
		//vvv
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПересчета КАК ДатыПересчета
		|		ПО ДатыПересчета.Физлицо = Остатки.ФизЛицо
		|	ГДЕ Остатки.Период >=ВЫБОР КОГДА ДатыПересчета.ДатаПересчета ЕСТЬ NULL ТОГДА &парамНачалоГода ИНАЧЕ ДатыПересчета.ДатаПересчета КОНЕЦ
		//
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Обороты.ФизЛицо,
		|	Обороты.Период,
		|	Обороты.Год,
		|	0,
		|	Обороты.РазмерПриход,
		|	Обороты.РазмерРасход
		|ИЗ
		|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
		//vvv
		//|		&парамНачалоГода,
		|		,
		//
		|		&парамКонецГода,
		|		Месяц,
		|		,
		|		КодВычетаИмущественный = &КодВычета311
		|			И Физлицо В (ВЫБРАТЬ Физлицо ИЗ ВТСписокФизЛиц)
		|			И Организация = &парамОрганизация) КАК Обороты
		//vvv
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПересчета КАК ДатыПересчета
		|		ПО ДатыПересчета.Физлицо = Обороты.ФизЛицо
		|	ГДЕ Обороты.Период >=ВЫБОР КОГДА ДатыПересчета.ДатаПересчета ЕСТЬ NULL ТОГДА &парамНачалоГода ИНАЧЕ ДатыПересчета.ДатаПересчета КОНЕЦ";
		//
		
		//vvv
		Вычеты311ПоМесяцамТекст = 
		"ВЫБРАТЬ
		|	Обороты.ФизЛицо КАК ФизЛицо,
		|	Обороты.Период КАК Период,
		|	Обороты.НалоговыйПериод КАК НалоговыйПериод,
		|	СУММА(Обороты.ОборотВычеты311) КАК ОборотВычеты311,
		|	СУММА(Обороты.ПримененныеВычеты311) КАК ПримененныеВычеты311
		|ПОМЕСТИТЬ ВТВычеты311ПоМесяцам
		|ИЗ
		|	(ВЫБРАТЬ
		|		Обороты.ФизЛицо КАК ФизЛицо,
		|		Обороты.МесяцНалоговогоПериода КАК Период,
		|		Обороты.Год КАК НалоговыйПериод,
		|		Обороты.РазмерПриход / 10000 КАК ОборотВычеты311,
		|		Обороты.РазмерРасход / 10000 КАК ПримененныеВычеты311
		|	ИЗ
		|		РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
		|				,
		|				ДОБАВИТЬКДАТЕ(&ДатаДеноминации, ДЕНЬ, -1),
		|				,
		|				,
		|				КодВычетаИмущественный = &КодВычета311
		|					И Физлицо В
		|						(ВЫБРАТЬ
		|							СписокФизЛиц.Физлицо
		|						ИЗ
		|							ВТСписокФизЛиц КАК СписокФизЛиц)
		|					И Организация = &парамОрганизация) КАК Обороты
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПересчета КАК ДатыПересчета
		|			ПО (ДатыПересчета.Физлицо = Обороты.ФизЛицо)
		|	ГДЕ
		|		Обороты.МесяцНалоговогоПериода >= ВЫБОР
		|				КОГДА ДатыПересчета.ДатаПересчета ЕСТЬ NULL 
		|					ТОГДА &парамНачалоГода
		|				ИНАЧЕ ДатыПересчета.ДатаПересчета
		|			КОНЕЦ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Обороты.ФизЛицо,
		|		Обороты.МесяцНалоговогоПериода,
		|		Обороты.Год,
		|		Обороты.РазмерПриход,
		|		Обороты.РазмерРасход
		|	ИЗ
		|		РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
		|				&ДатаДеноминации,
		|				&парамКонецГода,
		|				,
		|				,
		|				КодВычетаИмущественный = &КодВычета311
		|					И Физлицо В
		|						(ВЫБРАТЬ
		|							СписокФизЛиц.Физлицо
		|						ИЗ
		|							ВТСписокФизЛиц КАК СписокФизЛиц)
		|					И Организация = &парамОрганизация) КАК Обороты
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПересчета КАК ДатыПересчета
		|			ПО (ДатыПересчета.Физлицо = Обороты.ФизЛицо)
		|	ГДЕ
		|		Обороты.МесяцНалоговогоПериода >= ВЫБОР
		|				КОГДА ДатыПересчета.ДатаПересчета ЕСТЬ NULL 
		|					ТОГДА &парамНачалоГода
		|				ИНАЧЕ ДатыПересчета.ДатаПересчета
		|			КОНЕЦ) КАК Обороты
		|
		|СГРУППИРОВАТЬ ПО
		|	Обороты.ФизЛицо,
		|	Обороты.Период,
		|	Обороты.НалоговыйПериод";
		//
		Запрос.Текст = Вычеты311ПоМесяцамТекст;
		Запрос.Выполнить();

		// Приходы вычетов с начала года нарастающим итогом
		Вычеты640СтрахТекст = 
		"ВЫБРАТЬ
		|	Периоды.Физлицо КАК Физлицо,
		|	Периоды.Период КАК Период,
		|	СУММА(ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Обороты.Период, МЕСЯЦ) = Периоды.Период ТОГДА Обороты.ПримененныеВычеты640Страх ИНАЧЕ 0 КОНЕЦ) КАК Вычет640СтрахЗаМесяц,
		|	СУММА(Обороты.ОборотВычеты640Страх) КАК Вычет640СтрахОстаток,
		|	СУММА(Обороты.ПримененныеВычеты640Страх) КАК Вычет640СтрахЗаГод
		|ПОМЕСТИТЬ ВТВычеты640Страх
		|ИЗ
		|	ВТПериоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычеты640СтрахПоМесяцам КАК Обороты
		//vvv комментируем, чтобы не пользоваться кнопкой "Заполнить остатками с прошлого года"
		//|		ПО Обороты.ФизЛицо = Периоды.Физлицо И Обороты.Период МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, Год) И Периоды.Период
		|		ПО Обороты.ФизЛицо = Периоды.Физлицо И Обороты.Период <= Периоды.Период
		//
		|СГРУППИРОВАТЬ ПО
		|	Периоды.Физлицо,
		|	Периоды.Период";
		
		Запрос.Текст = Вычеты640СтрахТекст;
		Запрос.Выполнить();

		
		Вычеты312Текст = 
		"ВЫБРАТЬ
		|	Периоды.Физлицо КАК Физлицо,
		|	Периоды.Период КАК Период,
		|	СУММА(ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Обороты.Период, МЕСЯЦ) = Периоды.Период ТОГДА Обороты.ПримененныеВычеты312 ИНАЧЕ 0 КОНЕЦ) КАК Вычет312ЗаМесяц,
		|	СУММА(Обороты.ОборотВычеты312) КАК Вычет312Остаток,
		|	СУММА(Обороты.ПримененныеВычеты312) КАК Вычет312ЗаГод
		|ПОМЕСТИТЬ ВТВычеты312
		|ИЗ
		|	ВТПериоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычеты312ПоМесяцам КАК Обороты
		//vvv комментируем, чтобы не пользоваться кнопкой "Заполнить остатками с прошлого года"
		//|		ПО Обороты.ФизЛицо = Периоды.Физлицо И Обороты.Период МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, Год) И Периоды.Период
		|		ПО Обороты.ФизЛицо = Периоды.Физлицо И Обороты.Период <= Периоды.Период
		//
		|СГРУППИРОВАТЬ ПО
		|	Периоды.Физлицо,
		|	Периоды.Период";
		
		Запрос.Текст = Вычеты312Текст;
		Запрос.Выполнить();

		
		Вычеты311Текст = 
		"ВЫБРАТЬ
		|	Периоды.Физлицо КАК Физлицо,
		|	Периоды.Период КАК Период,
		|	СУММА(ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Обороты.Период, МЕСЯЦ) = Периоды.Период ТОГДА Обороты.ПримененныеВычеты311 ИНАЧЕ 0 КОНЕЦ) КАК Вычет311ЗаМесяц,
		|	СУММА(Обороты.ОборотВычеты311) КАК Вычет311Остаток,
		|	СУММА(Обороты.ПримененныеВычеты311) КАК Вычет311ЗаГод
		|ПОМЕСТИТЬ ВТВычеты311
		|ИЗ
		|	ВТПериоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычеты311ПоМесяцам КАК Обороты
		//vvv комментируем, убираем условие на год, чтобы не пользоваться кнопкой "Заполнить остатками с предыдущего года" в документе
		// "Подтверждение прав на имущ. вычеты"
		//|		ПО Обороты.ФизЛицо = Периоды.Физлицо И Обороты.Период <= Периоды.Период И Обороты.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) И Обороты.Период <= &парамПериодРегистрации 
		|		ПО Обороты.ФизЛицо = Периоды.Физлицо И Обороты.Период <= Периоды.Период И Обороты.Период <= &парамПериодРегистрации 
		//
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.Физлицо,
		|	Периоды.Период";
		
			
		Запрос.Текст = Вычеты311Текст;
		Запрос.Выполнить();

		// облагаемый доход с начала года
		ПолеОблагаемыйДоходЗаГод = "ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0)";
	    ПолеОблагаемыйДоходЗаПериод = "ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаПериод, 0)";
		//ПолеОблагаемыйДоходБезБудущего = "ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаБезБудущего, 0)";
		
		// право на личный вычет за год
		ПолеВычетыЛичныеЗаГод = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ВычетыЛичныеЗаГод, 0)";
	    ПолеВычетыЛичныеЗаПериод = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ПрименяемыеВычетыЛичныеЗаПериод, 0)"; 
		//ПолеВычетыЛичныеБезБудущего = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ВычетыЛичныеБезБудущего, 0)";
		
		// право на вычет на детей за год
		ПолеВычетыДетскиеЗаГод = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ВычетыДетскиеЗаГод, 0)";
		ПолеВычетыДетскиеЗаПериод = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ПрименяемыеВычетыДетскиеЗаПериод, 0)";

		ПолеВычетыДетскиеЛьготаЗаГод = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ВычетыДетскиеЛьготаЗаГод, 0)";
		ПолеВычетыДетскиеЛьготаЗаПериод = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ПрименяемыеВычетыДетскиеЛьготаЗаПериод, 0)";

		ПолеВычетыДополнительныеЗаГод = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ВычетыДополнительныеЗаГод, 0)";
		ПолеВычетыДополнительныеЗаПериод = "ЕСТЬNULL(РаботникиОргВычетыЗаГод.ПрименяемыеВычетыДополнительныеЗаПериод, 0)";
		
		ПолеВычет640СтрахОстаток = "ЕСТЬNULL(Вычеты640Страх.Вычет640СтрахОстаток, 0)";
		
		ПолеВычет312Остаток = "ЕСТЬNULL(Вычеты312.Вычет312Остаток, 0)";
		
		ПолеВычет311Остаток = "ЕСТЬNULL(Вычеты311.Вычет311Остаток, 0)";
					
		
		// размер примененного вычета на себя 
		ПолеПримененныеВычетыЛичныеЗаПериод = 
		"ВЫБОР 
		//|	КОГДА ДоходыЗаГод.Резидент 
		//|	ТОГДА 
		//|		ВЫБОР 
		|			КОГДА " + ПолеОблагаемыйДоходЗаПериод + " > " + ПолеВычетыЛичныеЗаПериод + " 
		|			ТОГДА " + ПолеВычетыЛичныеЗаПериод + " 
		|			ИНАЧЕ " + ПолеОблагаемыйДоходЗаПериод + "
		|		КОНЕЦ"; 
		//|	ИНАЧЕ 0 
		//|КОНЕЦ";
		// размер вычета на детей с начала года
		ПолеПримененныеВычетыДетскиеЗаПериод = 
		"ВЫБОР 
		//|	КОГДА ДоходыЗаГод.Резидент 
		//|	ТОГДА 
		//|		ВЫБОР 
		|			КОГДА " + ПолеОблагаемыйДоходЗаПериод + " > " + ПолеВычетыЛичныеЗаПериод + " + " + ПолеВычетыДетскиеЗаПериод + " 
		|			ТОГДА " + ПолеВычетыДетскиеЗаПериод +" 
		|			КОГДА " + ПолеОблагаемыйДоходЗаПериод +" > " + ПолеВычетыЛичныеЗаПериод + " 
		|			ТОГДА " + ПолеОблагаемыйДоходЗаПериод + " - " + ПолеВычетыЛичныеЗаПериод + " 
		|			ИНАЧЕ 0 
		|		КОНЕЦ"; 
		//|	ИНАЧЕ 0 
		//|КОНЕЦ";
		//Минск н
		// размер вычета дополнительный с начала года
		ПолеПримененныеВычетыДетскиеЛьготаЗаПериод = 
		"ВЫБОР 
		//|	КОГДА ДоходыЗаГод.Резидент 
		//|	ТОГДА 
		//|		ВЫБОР 
		|			КОГДА " + ПолеОблагаемыйДоходЗаПериод + " > " + ПолеВычетыЛичныеЗаПериод + " + " + ПолеВычетыДетскиеЗаПериод + " + " + ПолеВычетыДетскиеЛьготаЗаПериод + " 
		|			ТОГДА " + ПолеВычетыДетскиеЛьготаЗаПериод +" 
		|			КОГДА " + ПолеОблагаемыйДоходЗаПериод +" > " + ПолеВычетыЛичныеЗаПериод + " + " + ПолеВычетыДетскиеЗаПериод + " 
		|			ТОГДА " + ПолеОблагаемыйДоходЗаПериод + " - " + ПолеВычетыЛичныеЗаПериод + " - " + ПолеВычетыДетскиеЗаПериод + " 
		|			ИНАЧЕ 0 
		|		КОНЕЦ"; 
		//|	ИНАЧЕ 0 
		//|КОНЕЦ";
		
		ПолеПримененныеВычетыДополнительныеЗаПериод = 
		"ВЫБОР 
		//|	КОГДА ДоходыЗаГод.Резидент 
		//|	ТОГДА 
		//|		ВЫБОР 
		|			КОГДА " + ПолеОблагаемыйДоходЗаПериод + " > " + ПолеВычетыЛичныеЗаПериод + " + " + ПолеВычетыДетскиеЗаПериод + " + " + ПолеВычетыДетскиеЛьготаЗаПериод + " + " + ПолеВычетыДополнительныеЗаПериод + " 
		|			ТОГДА " + ПолеВычетыДополнительныеЗаПериод +" 
		|			ИНАЧЕ ВЫБОР КОГДА " + ПолеОблагаемыйДоходЗаПериод +" > " + ПолеВычетыЛичныеЗаПериод + " + " + ПолеВычетыДетскиеЗаПериод + " + " + ПолеВычетыДетскиеЛьготаЗаПериод + " 
		|				ТОГДА " + ПолеОблагаемыйДоходЗаПериод + " - " + ПолеВычетыЛичныеЗаПериод + " - " + ПолеВычетыДетскиеЗаПериод + " - " + ПолеВычетыДетскиеЛьготаЗаПериод + " 
		|				ИНАЧЕ 0 КОНЕЦ
		|		КОНЕЦ"; 
		//|	ИНАЧЕ 0 
		//|КОНЕЦ";
		
		// размер примененного вычета на себя 
		ПолеПримененныеВычетыЛичные = 
		"ВЫБОР 
		//|	КОГДА ДоходыЗаГод.Резидент 
		//|	ТОГДА 
		//|		ВЫБОР 
		|			КОГДА " + ПолеОблагаемыйДоходЗаГод + " > " + ПолеВычетыЛичныеЗаГод + " 
		|			ТОГДА " + ПолеВычетыЛичныеЗаГод + " 
		|			ИНАЧЕ " + ПолеОблагаемыйДоходЗаГод + "
		|		КОНЕЦ"; 
		//|	ИНАЧЕ 0 
		//|КОНЕЦ";
		// размер вычета на детей с начала года
		ПолеПримененныеВычетыДетские = 
		"ВЫБОР 
		//|	КОГДА ДоходыЗаГод.Резидент 
		//|	ТОГДА 
		//|		ВЫБОР 
		|			КОГДА " + ПолеОблагаемыйДоходЗаГод + " > " + ПолеВычетыЛичныеЗаГод + " + " + ПолеВычетыДетскиеЗаГод + " 
		|			ТОГДА " + ПолеВычетыДетскиеЗаГод +" 
		|			КОГДА " + ПолеОблагаемыйДоходЗаГод +" > " + ПолеВычетыЛичныеЗаГод + " 
		|			ТОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеВычетыЛичныеЗаГод + " 
		|			ИНАЧЕ 0 
		|		КОНЕЦ"; 
		//|	ИНАЧЕ 0 
		//|КОНЕЦ";
		//Минск н
		// размер вычета дополнительный с начала года
		ПолеПримененныеВычетыДетскиеЛьгота = 
		"ВЫБОР 
		//|	КОГДА ДоходыЗаГод.Резидент 
		//|	ТОГДА 
		//|		ВЫБОР 
		|			КОГДА " + ПолеОблагаемыйДоходЗаГод + " > " + ПолеВычетыЛичныеЗаГод + " + " + ПолеВычетыДетскиеЗаГод + " + " + ПолеВычетыДетскиеЛьготаЗаГод + " 
		|			ТОГДА " + ПолеВычетыДетскиеЛьготаЗаГод +" 
		|			КОГДА " + ПолеОблагаемыйДоходЗаГод +" > " + ПолеВычетыЛичныеЗаГод + " + " + ПолеВычетыДетскиеЗаГод + " 
		|			ТОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеВычетыЛичныеЗаГод + " - " + ПолеВычетыДетскиеЗаГод + " 
		|			ИНАЧЕ 0 
		|		КОНЕЦ"; 
		//|	ИНАЧЕ 0 
		//|КОНЕЦ";
		
		ПолеПримененныеВычетыДополнительные = 
		"ВЫБОР 
		//|	КОГДА ДоходыЗаГод.Резидент 
		//|	ТОГДА 
		//|		ВЫБОР 
		|			КОГДА " + ПолеОблагаемыйДоходЗаГод + " > " + ПолеВычетыЛичныеЗаГод + " + " + ПолеВычетыДетскиеЗаГод + " + " + ПолеВычетыДетскиеЛьготаЗаГод + " + " + ПолеВычетыДополнительныеЗаГод + " 
		|			ТОГДА " + ПолеВычетыДополнительныеЗаГод +" 
		|			ИНАЧЕ ВЫБОР КОГДА " + ПолеОблагаемыйДоходЗаГод +" > " + ПолеВычетыЛичныеЗаГод + " + " + ПолеВычетыДетскиеЗаГод + " + " + ПолеВычетыДетскиеЛьготаЗаГод + " 
		|				ТОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеВычетыЛичныеЗаГод + " - " + ПолеВычетыДетскиеЗаГод + " - " + ПолеВычетыДетскиеЛьготаЗаГод + " 
		|				ИНАЧЕ 0 КОНЕЦ
		|		КОНЕЦ"; 
		//|	ИНАЧЕ 0 
		//|КОНЕЦ";
		
				
		ЗапросШкала = Новый Запрос;
		ЗапросШкала.Текст = "ВЫБРАТЬ
		|	ШкалаПодоходногоНалогаСрезПоследних.Налог
		|ИЗ
		|	РегистрСведений.ШкалаПодоходногоНалога.СрезПоследних(&КонецПериода, ) КАК ШкалаПодоходногоНалогаСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	НижнийПредел";
		ЗапросШкала.УстановитьПараметр("КонецПериода", ПериодРегистрации);
		Шкала = ЗапросШкала.Выполнить().Выгрузить();

		
		Запрос.УстановитьПараметр("СтавкаНалога",ОКР(Шкала[0].Налог/100,2,0));
		
		// сумма ранее примененных вычетов личных
		ПолеРанееПримененныеВычетыЛичные = "ЕСТЬNULL(НДФЛРасчетыСБюджетомЗаГод.ПримененныеВычетыЛичныеЗаГод, 0)";
		ПолеРанееПримененныеВычетыЛичныеЗаМесяц = "ЕСТЬNULL(НДФЛРасчетыСБюджетомЗаГод.ПримененныеВычетыЛичныеЗаМесяц, 0)";

		// сумма ранее примененных вычетов на детей
		ПолеРанееПримененныеВычетыДетские = "ЕСТЬNULL(НДФЛРасчетыСБюджетомЗаГод.ПолеПримененныеВычетыДетскиеЗаГод, 0)";
		ПолеРанееПримененныеВычетыДетскиеЗаМесяц = "ЕСТЬNULL(НДФЛРасчетыСБюджетомЗаГод.ПолеПримененныеВычетыДетскиеЗаМесяц, 0)";
		ПолеРанееПримененныеВычетыДетскиеЛьгота = "ЕСТЬNULL(НДФЛРасчетыСБюджетомЗаГод.ПолеПримененныеВычетыДетскиеЛьготаЗаГод, 0)";
		ПолеРанееПримененныеВычетыДетскиеЛьготаЗаМесяц = "ЕСТЬNULL(НДФЛРасчетыСБюджетомЗаГод.ПолеПримененныеВычетыДетскиеЛьготаЗаМесяц, 0)";
		ПолеРанееПримененныеВычетыДополнительные = "ЕСТЬNULL(НДФЛРасчетыСБюджетомЗаГод.ПолеПримененныеВычетыДополнительныеЗаГод, 0)";
		ПолеРанееПримененныеВычетыДополнительныеЗаМесяц = "ЕСТЬNULL(НДФЛРасчетыСБюджетомЗаГод.ПолеПримененныеВычетыДополнительныеЗаМесяц, 0)";

		
		ПолеРанееПримененныеВычеты640Страх = "ЕСТЬNULL(Вычеты640Страх.Вычет640СтрахЗаГод, 0)";
		ПолеРанееПримененныеВычеты640СтрахЗаМесяц = "ЕСТЬNULL(Вычеты640Страх.Вычет640СтрахЗаМесяц, 0)";

		// сумма ранее примененных вычетов по коду 312
		ПолеРанееПримененныеВычеты312 = "ЕСТЬNULL(Вычеты312.Вычет312ЗаГод, 0)";
		ПолеРанееПримененныеВычеты312ЗаМесяц = "ЕСТЬNULL(Вычеты312.Вычет312ЗаМесяц, 0)";

		// сумма ранее примененных вычетов по коду 311
		ПолеРанееПримененныеВычеты311 = "ЕСТЬNULL(Вычеты311.Вычет311ЗаГод, 0)";
		ПолеРанееПримененныеВычеты311ЗаМесяц = "ЕСТЬNULL(Вычеты311.Вычет311ЗаМесяц, 0)";

		// сумма налога исчисленная
		ПолеНалогИсчисленный = 
		"(ВЫРАЗИТЬ(ВЫБОР 
		|				КОГДА ДоходыЗаГод.Резидент 
		|				ТОГДА (" + ПолеОблагаемыйДоходЗаГод +" - "+ ПолеПримененныеВычетыЛичные + " - " + ПолеПримененныеВычетыДетские + " - " + ПолеПримененныеВычетыДетскиеЛьгота + " - " + ПолеПримененныеВычетыДополнительные +  ")* &СтавкаНалога 
		|				ИНАЧЕ ЕСТЬNULL(ДоходыЗаГод.НалогНерезидента, 0)
		|				КОНЕЦ КАК ЧИСЛО(15,0)))";
		
		// сумма ранее исчисленного налога
		ПолеРанееНалогИсчисленный = 
		"ВЫБОР 
		|	КОГДА НДФЛРасчетыСБюджетомЗаГод.ИсчисленныйНалог = -99999999 
		|	ТОГДА 0 
		|	ИНАЧЕ ЕСТЬNULL(НДФЛРасчетыСБюджетомЗаГод.ИсчисленныйНалог, 0) 
		|КОНЕЦ";

		
				
		Если КомментироватьРасчет Тогда
			ДоходыПоВидамРасчетаТекст = "
			|ВЫБРАТЬ
			|	НДФЛСведенияОДоходах.ДоходЗаМесяц КАК ДоходЗаМесяц,
			|	НДФЛСведенияОДоходах.ВычетЗаМесяц КАК ВычетЗаМесяц,
			|	СУММА(ДоходыПоВидамРасчета.Результат) КАК ДоходЗаМесяцПоВидамРасчета,
			|	НДФЛСведенияОДоходах.Физлицо КАК Физлицо,
			|	ДоходыПоВидамРасчета.ВидРасчета КАК ВидРасчета,
			|	ДоходыПоВидамРасчета.ВидРасчета.Наименование КАК ВидРасчетаНаименование,
			|	НДФЛСведенияОДоходах.Период КАК Период
			|ПОМЕСТИТЬ ВТДоходыПоВидамРасчета
			|ИЗ
			|	(ВЫБРАТЬ
			|		СУММА(НДФЛСведенияОДоходах.СуммаДохода) КАК ДоходЗаМесяц,
			|		СУММА(НДФЛСведенияОДоходах.СуммаВычета) КАК ВычетЗаМесяц,
			|		НДФЛСведенияОДоходах.ФизЛицо КАК Физлицо,
			|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ) КАК Период
			|	ИЗ
			|		РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
			|			ПО (Месяцы.Период = НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ))
			|	ГДЕ
			|		НДФЛСведенияОДоходах.ФизЛицо В (ВЫБРАТЬ Физлицо ИЗ ВТСписокФизЛиц)
			|		И НДФЛСведенияОДоходах.Организация = &парамОрганизация
			|	
			|	СГРУППИРОВАТЬ ПО
			|		НДФЛСведенияОДоходах.ФизЛицо,
			|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ)) КАК НДФЛСведенияОДоходах
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			Начисления.Результат КАК Результат,
			|			Начисления.ФизЛицо КАК Физлицо,
			|			Начисления.ВидРасчета КАК ВидРасчета,
			|			ВЫБОР
			|				КОГДА Начисления.ВидРасчета.КодДоходаНДФЛ = &КодОплатыТрудаПоНДФЛ
			|					ТОГДА Начисления.ПериодРегистрации
			|				ИНАЧЕ Начисления.ПериодДействия
			|			КОНЕЦ КАК Период
			|		ИЗ
			|			РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
			|				ПО (Месяцы.Период = ВЫБОР
			|						КОГДА Начисления.ВидРасчета.КодДоходаНДФЛ <> &КодОплатыТрудаПоНДФЛ
			|							ТОГДА Начисления.ПериодРегистрации
			|						ИНАЧЕ Начисления.ПериодДействия
			|					КОНЕЦ)
			|		ГДЕ
			|			Начисления.ВидРасчета.КодДоходаНДФЛ <> &ПустойКодДохода
			|			И Начисления.ФизЛицо В (ВЫБРАТЬ Физлицо ИЗ ВТСписокФизЛиц)
			|			И Начисления.Организация = &парамОрганизация
			|		
			|		ОБЪЕДИНИТЬ ВСЕ
			|		
			|		ВЫБРАТЬ
			|			Начисления.Результат,
			|			Начисления.ФизЛицо,
			|			Начисления.ВидРасчета,
			|			НАЧАЛОПЕРИОДА(Начисления.ПериодРегистрации, МЕСЯЦ)
			|		ИЗ
			|			РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Начисления
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
			|				ПО (Месяцы.Период = НАЧАЛОПЕРИОДА(Начисления.ПериодРегистрации, МЕСЯЦ))
			|		ГДЕ
			|			Начисления.ВидРасчета.КодДоходаНДФЛ <> &ПустойКодДохода
			|			И Начисления.ФизЛицо  В (ВЫБРАТЬ Физлицо ИЗ ВТСписокФизЛиц)
			|			И Начисления.Организация = &парамОрганизация) КАК ДоходыПоВидамРасчета
			|		ПО ДоходыПоВидамРасчета.Период = НДФЛСведенияОДоходах.Период
			|			И ДоходыПоВидамРасчета.Физлицо = НДФЛСведенияОДоходах.Физлицо
			|
			|СГРУППИРОВАТЬ ПО
			|	НДФЛСведенияОДоходах.ДоходЗаМесяц,
			|	НДФЛСведенияОДоходах.ВычетЗаМесяц,
			|	НДФЛСведенияОДоходах.Физлицо,
			|	НДФЛСведенияОДоходах.Период,
			|	ДоходыПоВидамРасчета.ВидРасчета,
			|	ДоходыПоВидамРасчета.ВидРасчета.Наименование";
			Запрос.УстановитьПараметр("ПустойКодДохода" , Справочники.ДоходыНДФЛ.ПустаяСсылка());
			Запрос.УстановитьПараметр("КодОплатыТрудаПоНДФЛ", Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию);
			Запрос.Текст = ДоходыПоВидамРасчетаТекст;
			Запрос.Выполнить();
			
		КонецЕсли;
		// ИсчисленныйНДФЛ
		//	Поля:
		//		Физлицо
		//		Период
		//		НалогУжеИсчисленный
		//		НалогИсчисленный
		//		ПримененныеВычетыЛичные
		//		ПолеПримененныеВычетыДетские
		//		ПолеПримененныеВычетыДетскиеИнвалидов
		//	    ПримененныеВычеты312
		//	    ПримененныеВычеты311
		//	
		//	Описание:
		//	Выбирает применяемые вычеты нарастающим итогом, доход нарастающим итогом и 
		//	исчисленный налог нарастающим итогом и производит расчет налога и примененных вычетов

		ИсчисленныйНДФЛТекст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоходыЗаГод.Физлицо КАК Физлицо,
		|	ДоходыЗаГод.Период КАК Период,
		//vvv
		|	ДоходыЗаГод.Налог КАК Налог,
		//
		|	ЕСТЬNULL(ДоходыЗаГод.Резидент, ИСТИНА) КАК Резидент,
		|	" + ПолеРанееНалогИсчисленный + " КАК НалогРанееИсчисленный,         //Минск
		//|	" + ПолеНалогИсчисленный + " - " + ПолеРанееНалогИсчисленный + " КАК НалогИсчисленный,         //Минск
		|	" + ПолеОблагаемыйДоходЗаГод + " КАК ДоходЗаГод,                     //Минск
		|	" + ПолеОблагаемыйДоходЗаПериод  + " КАК ДоходЗаПериод,		
		|	" + ПолеПримененныеВычетыЛичные + "  КАК ПримененныеВычетыЛичные,    //Минск
		|	" + ПолеПримененныеВычетыДетские + " КАК ПримененныеВычетыДетские,   //Минск
		|	" + ПолеПримененныеВычетыДетскиеЛьгота + " КАК ПримененныеВычетыДетскиеЛьгота,   //Минск
		|	" + ПолеПримененныеВычетыДополнительные + " КАК ПримененныеВычетыДополнительные, //Минск
		|	" + ПолеПримененныеВычетыЛичныеЗаПериод + "  КАК ПримененныеВычетыЛичныеЗаПериод,    //Минск
		|	" + ПолеПримененныеВычетыДетскиеЗаПериод + " КАК ПримененныеВычетыДетскиеЗаПериод,   //Минск
		|	" + ПолеПримененныеВычетыДетскиеЛьготаЗаПериод + " КАК ПримененныеВычетыДетскиеЛьготаЗаПериод,   //Минск
		|	" + ПолеПримененныеВычетыДополнительныеЗаПериод + " КАК ПримененныеВычетыДополнительныеЗаПериод, //Минск		
		|	" + ПолеВычет640СтрахОстаток + " КАК Вычет640СтрахОстаток,
		|	" + ПолеВычет312Остаток + " КАК Вычет312Остаток,
		|	" + ПолеВычет311Остаток + " КАК Вычет311Остаток,
		|	" + ПолеРанееПримененныеВычетыЛичные + " КАК РанееПримененныеВычетыЛичные,
		|	" + ПолеРанееПримененныеВычетыДетские + " КАК РанееПримененныеВычетыДетские,
		|	" + ПолеРанееПримененныеВычетыДетскиеЛьгота + " КАК РанееПримененныеВычетыДетскиеЛьгота,
		|	" + ПолеРанееПримененныеВычетыДополнительные  + " КАК  РанееПримененныеВычетыДополнительные,
		|	" + ПолеРанееПримененныеВычеты640Страх + " КАК РанееПримененныеВычеты640Страх,
       	|	" + ПолеРанееПримененныеВычеты312 + " КАК РанееПримененныеВычеты312,
		|	" + ПолеРанееПримененныеВычеты311 + " КАК РанееПримененныеВычеты311,
		|	" + ПолеРанееПримененныеВычетыЛичныеЗаМесяц + " КАК РанееПримененныеВычетыЛичныеЗаМесяц,
		|	" + ПолеРанееПримененныеВычетыДетскиеЗаМесяц + " КАК РанееПримененныеВычетыДетскиеЗаМесяц,
		|	" + ПолеРанееПримененныеВычетыДетскиеЛьготаЗаМесяц + " КАК РанееПримененныеВычетыДетскиеЛьготаЗаМесяц,
		|	" + ПолеРанееПримененныеВычетыДополнительныеЗаМесяц + " КАК РанееПримененныеВычетыДополнительныеЗаМесяц,
		|	" + ПолеРанееПримененныеВычеты640СтрахЗаМесяц + " КАК РанееПримененныеВычеты640СтрахЗаМесяц,
		|	" + ПолеРанееПримененныеВычеты312ЗаМесяц + " КАК РанееПримененныеВычеты312ЗаМесяц,
		|	" + ПолеРанееПримененныеВычеты311ЗаМесяц + " КАК РанееПримененныеВычеты311ЗаМесяц";
		Если КомментироватьРасчет Тогда
			ИсчисленныйНДФЛТекст = ИсчисленныйНДФЛТекст + ",
			|	" + ПолеОблагаемыйДоходЗаГод + " КАК ОблагаемыйДоходЗаГод,
			|	" + ПолеРанееНалогИсчисленный + " КАК РанееНалогИсчисленный,
			|	ЕСТЬNULL(ДоходыПоВидамРасчета.ДоходЗаМесяц, 0) КАК ДоходЗаМесяц,
			|	ЕСТЬNULL(ДоходыПоВидамРасчета.ВычетЗаМесяц, 0) КАК ВычетЗаМесяц,
			|	ЕСТЬNULL(ДоходыПоВидамРасчета.ДоходЗаМесяцПоВидамРасчета, 0) КАК ДоходЗаМесяцПоВидамРасчета,
			|	ДоходыПоВидамРасчета.ВидРасчета КАК ВидРасчета,
			|	ДоходыПоВидамРасчета.ВидРасчета.Наименование КАК ВидРасчетаНаименование";
		КонецЕсли;
		ИсчисленныйНДФЛТекст = ИсчисленныйНДФЛТекст + "
		|ИЗ
		|	ВТДоходыЗаГод КАК ДоходыЗаГод
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛРасчетыСБюджетомЗаГод КАК НДФЛРасчетыСБюджетомЗаГод
		|		ПО НДФЛРасчетыСБюджетомЗаГод.Период = ДоходыЗаГод.Период И НДФЛРасчетыСБюджетомЗаГод.ФизЛицо = ДоходыЗаГод.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименяемыеВычетыЗаГод КАК РаботникиОргВычетыЗаГод
		|		ПО ДоходыЗаГод.Период = РаботникиОргВычетыЗаГод.Период И ДоходыЗаГод.ФизЛицо = РаботникиОргВычетыЗаГод.Физлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычеты640Страх КАК Вычеты640Страх
		|		ПО Вычеты640Страх.Период = ДоходыЗаГод.Период И Вычеты640Страх.ФизЛицо = ДоходыЗаГод.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычеты312 КАК Вычеты312
		|		ПО Вычеты312.Период = ДоходыЗаГод.Период И Вычеты312.ФизЛицо = ДоходыЗаГод.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычеты311 КАК Вычеты311
		|		ПО Вычеты311.Период = ДоходыЗаГод.Период И Вычеты311.ФизЛицо = ДоходыЗаГод.ФизЛицо";
		Если КомментироватьРасчет Тогда
			ИсчисленныйНДФЛТекст = ИсчисленныйНДФЛТекст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыПоВидамРасчета КАК ДоходыПоВидамРасчета
			|		ПО ДоходыПоВидамРасчета.Период = ДоходыЗаГод.Период 
			|		И ДоходыПоВидамРасчета.ФизЛицо = ДоходыЗаГод.Физлицо";
		КонецЕсли;
		ИсчисленныйНДФЛТекст = ИсчисленныйНДФЛТекст + "
		|
		|	УПОРЯДОЧИТЬ ПО ДоходыЗаГод.Физлицо, ДоходыЗаГод.Период";
		Если КомментироватьРасчет Тогда
			ИсчисленныйНДФЛТекст = ИсчисленныйНДФЛТекст + "
			|	ИТОГИ 
			|		МАКСИМУМ(Физлицо),
			|		МАКСИМУМ(Период),
			|		МАКСИМУМ(Резидент),
			|		МАКСИМУМ(ДоходЗаГод),
			|		МАКСИМУМ(ДоходЗаПериод),
			|		МАКСИМУМ(НалогРанееИсчисленный),
			//|		МАКСИМУМ(НалогИсчисленный),
			|		МАКСИМУМ(ПримененныеВычетыЛичные),
			|		МАКСИМУМ(ПримененныеВычетыДетские),
			|		МАКСИМУМ(ПримененныеВычетыДетскиеЛьгота),
			|		МАКСИМУМ(ПримененныеВычетыДополнительные),
			|        МАКСИМУМ(Вычет640СтрахОстаток),
			|        МАКСИМУМ(Вычет312Остаток),
			|        МАКСИМУМ(Вычет311Остаток),
			|		МАКСИМУМ(ПримененныеВычетыЛичныеЗаПериод),
			|		МАКСИМУМ(ПримененныеВычетыДетскиеЗаПериод),
			|		МАКСИМУМ(ПримененныеВычетыДетскиеЛьготаЗаПериод),
			|		МАКСИМУМ(ПримененныеВычетыДополнительныеЗаПериод),
			|		МАКСИМУМ(РанееПримененныеВычетыЛичные),
			|		МАКСИМУМ(РанееПримененныеВычетыДетские),
			|		МАКСИМУМ(РанееПримененныеВычетыДетскиеЛьгота),
			|		МАКСИМУМ(РанееПримененныеВычетыДополнительные),
			|		МАКСИМУМ(РанееПримененныеВычеты312),
			|		МАКСИМУМ(РанееПримененныеВычеты311),
			|		МАКСИМУМ(РанееПримененныеВычетыЛичныеЗаМесяц),
			|		МАКСИМУМ(РанееПримененныеВычетыДетскиеЗаМесяц),
			|		МАКСИМУМ(РанееПримененныеВычетыДетскиеЛьготаЗаМесяц),
			|		МАКСИМУМ(РанееПримененныеВычетыДополнительныеЗаМесяц),
	        |		МАКСИМУМ(РанееПримененныеВычеты312ЗаМесяц),
			|		МАКСИМУМ(РанееПримененныеВычеты311ЗаМесяц),
			|		МАКСИМУМ(РанееПримененныеВычеты640СтрахЗаМесяц),
			|		МАКСИМУМ(ОблагаемыйДоходЗаГод),
			|		МАКСИМУМ(РанееНалогИсчисленный),
			|		МАКСИМУМ(ДоходЗаМесяц),
			|		МАКСИМУМ(ВычетЗаМесяц),
			|		СУММА(ДоходЗаМесяцПоВидамРасчета)
			|	ПО
			|		Период";
		КонецЕсли;

		Запрос.Текст = ПодразделенияПоМесяцамТекст;
		ВыборкаПодразделений = Запрос.Выполнить().Выбрать();

		Запрос.Текст = ИсчисленныйНДФЛТекст;

		
		Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
   КонецЕсли;
КонецФункции  // ПолучитьДанныеНДФЛПоРегистратору

// Проверяет необходимость выполнения перерасчета документа
// если в таблицах перерасчета по документу ссылка на который передана 
// есть хоть одна запись - возращает Истина
// Параметры:
//  Регистратор - ссылка на документ
// Возвращаемое значение:
//  булево
//
Функция НеобходимостьПерерасчета(Регистратор) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Перерасчет.ФизЛицо
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		Перерасчет.ФизЛицо КАК ФизЛицо
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
	|	
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		Перерасчет.ФизЛицо
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
	|	
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор) КАК Перерасчет");
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	Если Запрос.Выполнить().Пустой() Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции  // НеобходимостьПерерасчета

// Возвращает вид учета времени в зависимости от вида расчета и вида графика 
Функция ПолучитьВидУчетаВремени(СпособРасчета, ВидВремени, СуммированныйУчетРабочегоВремени = Ложь, НачислениеВидУчетаВремени = Неопределено, Показатели = Неопределено) Экспорт
	
	// вид учета времени определяется по способу расчета
	
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйПриработок
		//vvv
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйПриработокМесячнаяСтавкаЧасы
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоИнойМесячнойТарифнойСтавке
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоИнойЧасовойТарифнойСтавке
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксСуммойПропорционльноОтработанномуВремениПоЧасам
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.КТУ
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителей
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавкеВодителей
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителейРемонт
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителейРемонтПлановый
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеВодители
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтСдельногоЗаработкаВодителей
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеРемонт
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеРемонтПлановый
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоРазницеМеждуЧасовымиСтавками
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйПриработокВодителей
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоРазрядаПропорциональноОтработанномуВремени
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоВычисляемойЧасовойТарифнойСтавке
		//
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоРазмераМинимальнойЗарплаты
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоРазмераМЗПотМесячнойМЗП
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаЗаместительство
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаСовмещениеПоОкладу
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаСовмещениеПоТарифу
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоРазряда
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоСотрудника
     	или ВидВремени = Перечисления.ВидыВремени.ЧасовоеНеотработанное 
		или ВидВремени = Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы  Тогда
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
			
	ИначеЕсли СуммированныйУчетРабочегоВремени и (СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуОтпускаПоБеременности) Тогда 
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Тогда
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоВечернимЧасам;
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда	
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;
		
		
	Иначе
		Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула
			И НачислениеВидУчетаВремени <> Неопределено Тогда
			Если НачислениеВидУчетаВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы Тогда
				ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоВечернимЧасам;
			ИначеЕсли НачислениеВидУчетаВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы Тогда
				ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;
			Иначе
				
				ИмеютсяЧасовыеПоказатели = Ложь;
				ИмеютсяДневныеПоказатели = Ложь;
				Если Показатели <> Неопределено Тогда
					Для Каждого СтрокаПоказатель Из Показатели Цикл
						Если СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ВремяВДнях
							ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ВремяВКалендарныхДнях
							ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.КалендарныхДнейВмесяце
							ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВДнях
							ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ОтработаноВремениВДнях
							ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная
							Тогда ИмеютсяДневныеПоказатели = Истина;
						ИначеЕсли СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ВремяВЧасах
							ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах
							ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ОтработаноВремениВЧасах
							ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая
							Тогда ИмеютсяЧасовыеПоказатели = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если ИмеютсяЧасовыеПоказатели И Не ИмеютсяДневныеПоказатели Тогда
					ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
				Иначе
					ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;	
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидУчетаВремени;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ДАТЫ ИЗМЕНЕНИЯ ЗАКОНОДАТЕЛЬСТВА

// Возвращает дату вступления в силу Федерального закона от 30 июня 2006 г. № 90-ФЗ
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ПолучитьДатуВступленияВСилуИзмененийТрудовогоКодекса2006() Экспорт

	Возврат	'20061006' // статья 3: по истечении 90 дней после дня официального опубликования - Российская газета от 7 июля 2006 г. №146 

КонецФункции // ПолучитьДатуВступленияВСилуИзмененийТрудовогоКодекса2006()

// Возвращает дату вступления в силу Федерального закона от 29 декабря 2006 г. № 255-ФЗ
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006() Экспорт

	Возврат	'20070101' // статья 19: Федеральный закон вступает в силу с 1 января 2007 года. 

КонецФункции // ПолучитьДатуВступленияВСилуИзмененийТрудовогоКодекса2006()

// Возвращает дату вступления в силу Постановления Правительства РФ от 24 декабря 2007 г. №922
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ПолучитьДатуВступленияВСилуИзмененийПоОтпускам2008() Экспорт

	Возврат	'20080106' // Постановление опубликовано в Российской газете от 29 декабря 2007 г. №..., вступает в силу по истечении 7 календарных дней - с 6 января 2008 года. 

КонецФункции // ПолучитьДатуВступленияВСилуИзмененийТрудовогоКодекса2006()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА ДОКУМЕНТОВ

// Заполняем переданный набор записей регистра расчета ОсновныеНачисленияОрганизации переданными данными
Функция ДобавитьСтрокуОсновныхНачислений(НаборЗаписей, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента) Экспорт
	
	Движение = НаборЗаписей.Добавить();
	
	СтрокаСвойствИзДокумента = "ПериодРегистрации,ФизЛицо,Организация,ОбособленноеПодразделение";
	СтрокаСвойствИзСтрокиДокумента = "ПериодДействияНачало,ПериодДействияКонец,ВидРасчета,Сторно,Результат,ОплаченоДнейЧасов,ВидУчетаВремени," 
									+ "Сотрудник,ПодразделениеОрганизации,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,ДополнительныеДанные,ГрафикРаботы,ГрафикРаботыНорма,"
									+ "ДатаНачалаСобытия,Авторасчет,ВариантОбработкиЗаписиПриОтраженииВРеглУчете,"
									//vvv
									+ "ЗаработокЗаЕдиницуВремениФМП,Должность,"
									//
									+ "ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,СторнируемыйДокумент";
	
	// ресурсы по норме времени
	Если ВыборкаПоСтрокамДокумента.ЗачетНормыВремени Тогда
		СтрокаСвойствИзСтрокиДокумента = СтрокаСвойствИзСтрокиДокумента + ",НормаДней,НормаЧасов,НормаДнейПоПятидневке,НормаЧасовПоПятидневке";
	КонецЕсли;
	
	// ресурсы по отработанному времени
	Если ВыборкаПоСтрокамДокумента.ЗачетОтработанногоВремени Тогда
		СтрокаСвойствИзСтрокиДокумента = СтрокаСвойствИзСтрокиДокумента + ",ОтработаноДней,ОтработаноЧасов,ОтработаноДнейПоПятидневке,ОтработаноЧасовПоПятидневке";
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
	
	Возврат Движение
	
КонецФункции // ДобавитьСтрокуОсновныхНачислений

// Заполняем переданный набор записей регистра расчета ДополнительныеНачисленияОрганизации переданными данными
Функция ДобавитьСтрокуДополнительныхНачислений(НаборЗаписей, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента) Экспорт
	
	Движение = НаборЗаписей.Добавить();
	
	СтрокаСвойствИзДокумента = "ДатаНачалаСобытия,ФизЛицо,Организация,ОбособленноеПодразделение";
	СтрокаСвойствИзСтрокиДокумента = "БазовыйПериодНачало,БазовыйПериодКонец,ВидРасчета,Сторно,Результат,ОплаченоДнейЧасов,СторнируемыйДокумент,ЧислоМесяцев," 
									+ "Сотрудник,ПодразделениеОрганизации,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,ГрафикРаботы,ВидУчетаВремени,"
									+ "Авторасчет,ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание";
	
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
	
	Движение.ПериодРегистрации   = ВыборкаПоШапкеДокумента.ПериодРегистрацииДополнительныхНачислений;
	
	Возврат Движение
	
КонецФункции // ДобавитьСтрокуДополнительныхНачислений()

// Заполняем переданный набор записей регистра расчета УдержанияРаботниковОрганизаций переданными данными
Функция ДобавитьСтрокуУдержаний(НаборЗаписей, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента) Экспорт
	
	Движение = НаборЗаписей.Добавить();
	
	СтрокаСвойствИзДокумента = "ФизЛицо,Организация,ОбособленноеПодразделение,ПериодРегистрации";
	СтрокаСвойствИзСтрокиДокумента = "БазовыйПериодНачало,БазовыйПериодКонец,ВидРасчета,Сторно,Результат," 
									+ "Сотрудник,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,ГрафикРаботы,ВидУчетаВремени,"
									+ "Авторасчет,ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание";
	
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
	
	Возврат Движение
	
КонецФункции // ДобавитьСтрокуДополнительныхНачислений()

// рассчитываем сумму за работу в документах сдельной выработки
//
// Параметры
//  ТекущиеДанные - данные строки т.ч. Выработка
//  РассчитыватьСуммуЗаРаботуВВалютеРасценки - булево, флажок пересчета суммы в валюте расценки
//
Процедура РассчитатьСуммуЗаРаботу(ОтражатьВБухгалтерскомУчете, ОтражатьВУправленческомУчете, Коэффициент, ТекущиеДанные, Дата, ВалютаРегламентированногоУчета, ВалютаУпрУчета, КурсВалютыУпрУчета, КратностьВалютыУпрУчета, РассчитыватьСуммуЗаРаботуВВалютеРасценки = Истина) Экспорт

	Если РассчитыватьСуммуЗаРаботуВВалютеРасценки Тогда
		ТекущиеДанные.СуммаЗаРаботуВВалютеРасценки = ОбщегоНазначения.ОкруглитьПоВалюте(ТекущиеДанные.Расценка * ТекущиеДанные.Количество * Коэффициент,ТекущиеДанные.Валюта);
	КонецЕсли;
	
	Если ТекущиеДанные.Валюта = ВалютаРегламентированногоУчета Тогда
		КурсВылютыРасценки = 1;
		КратностьВылютыРасценки = 1;
	ИначеЕсли ТекущиеДанные.Валюта = ВалютаУпрУчета Тогда	
		КурсВылютыРасценки = КурсВалютыУпрУчета;
		КратностьВылютыРасценки = КратностьВалютыУпрУчета;
	Иначе	
		Структура = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ТекущиеДанные.Валюта));
		КурсВылютыРасценки = Структура.Курс;
		КратностьВылютыРасценки = Структура.Кратность;
	КонецЕсли; 
	
	Если ОтражатьВУправленческомУчете Тогда
		ТекущиеДанные.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаЗаРаботуВВалютеРасценки,ТекущиеДанные.Валюта,ВалютаУпрУчета,
								КурсВылютыРасценки, КурсВалютыУпрУчета, КратностьВылютыРасценки, КратностьВалютыУпрУчета);
		ТекущиеДанные.Сумма = ОбщегоНазначения.ОкруглитьПоВалюте(ТекущиеДанные.Сумма,ТекущиеДанные.Валюта);						
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете Тогда
		ТекущиеДанные.СуммаРегл = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаЗаРаботуВВалютеРасценки,ТекущиеДанные.Валюта,ВалютаРегламентированногоУчета,
								КурсВылютыРасценки, 1, КратностьВылютыРасценки, 1);
		ТекущиеДанные.СуммаРегл = ОбщегоНазначения.ОкруглитьПоВалюте(ТекущиеДанные.СуммаРегл,ТекущиеДанные.Валюта);
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуЗаРаботу()

// Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
// Параметры:
//  	РассчитываемыеТаблицы  - структура из элементов, соответствующих табличным частям документа. 
//				Значение Истина для каждого из элементов структуры означает необходимость расчета 
//				соответствующей табличной части документа
// 		РежимПерерасчета - булево - признак вызов расчета при перерасчете документа
Функция РассчитатьДокументСреднегоЗаработка(Документ, РассчитываемыеТаблицы, ВыборкаПоШапкеДокумента, РежимПерерасчета = Ложь, РезультатЗапросаПоРасчетСреднего = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	Ссылка = Документ.Ссылка;
	
	// Создадим наборы записей используемых регистров 
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	//НаборОсновныеНачисления.мВыполнятьВспомогательныеРасчеты = Ложь;
		
	НаборДополнительныеНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборДополнительныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	НаборРасчетСреднего = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборРасчетСреднего.Отбор.Регистратор.Значение = Ссылка;
	
	Если НЕ РассчитываемыеТаблицы.РасчетСреднего Тогда

		// получим реквизиты табличной части РасчетСреднего 
		
		Если РезультатЗапросаПоРасчетСреднего = Неопределено Тогда

			Запрос = Новый Запрос;
			
			// Установим параметры запроса
			Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СтрокаРасчетСреднего.НомерСтроки,
			|	СтрокаРасчетСреднего.Ссылка.Сотрудник КАК Сотрудник,
			|	СтрокаРасчетСреднего.Ссылка.Сотрудник.Физлицо КАК Физлицо,
			|	ВЫБОР
			|		КОГДА СтрокаРасчетСреднего.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			ТОГДА СтрокаРасчетСреднего.Ссылка.Организация
			|		ИНАЧЕ СтрокаРасчетСреднего.Ссылка.Организация.ГоловнаяОрганизация
			|	КОНЕЦ КАК Организация,
			|	СтрокаРасчетСреднего.ВидРасчета,
			|	СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
			|	ВЫБОР КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ) ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КОНЕЦ КАК БазовыйПериодКонец,
			|	СтрокаРасчетСреднего.ОтработаноПоПятидневке,
			|	СтрокаРасчетСреднего.НормаПоПятидневке,
			|	СтрокаРасчетСреднего.ОтработаноДней,
			|	СтрокаРасчетСреднего.ОтработаноЧасов,
			|	СтрокаРасчетСреднего.ЧислоМесяцев,
			|	СтрокаРасчетСреднего.КоэффициентИндексации,
			|	СтрокаРасчетСреднего.Результат,
			|	СтрокаРасчетСреднего.ТарифнаяСтавкаПериода,
			|	СтрокаРасчетСреднего.ТекущаяТарифнаяСтавка,
			|	СтрокаРасчетСреднего.МесяцВыборки,
			|	СтрокаРасчетСреднего.КалендарныеДни
			|ИЗ
			|	Документ." + Документ.Метаданные().Имя + ".РасчетСреднего КАК СтрокаРасчетСреднего
			|
			|ГДЕ
			|	СтрокаРасчетСреднего.Ссылка = &ДокументСсылка";
			
			РезультатЗапросаПоРасчетСреднего = Запрос.Выполнить();
		
		КонецЕсли;
		
		ВыборкаПоРасчетСреднего = РезультатЗапросаПоРасчетСреднего.Выбрать();
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоРасчетСреднего.НомерСтроки) +
			""" табл. части ""Расчет среднего"": ";
			
			// Вид расчета
			Если НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.ВидРасчета) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ);
			КонецЕсли;
			
			// Дата начала базового периода
			Если НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.БазовыйПериодНачало) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ);
				// Дата окончания базового периода
			ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.БазовыйПериодКонец) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ);
			ИначеЕсли ВыборкаПоРасчетСреднего.БазовыйПериодКонец < ВыборкаПоРасчетСреднего.БазовыйПериодНачало Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ);
			КонецЕсли; 
			
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				Движение = НаборРасчетСреднего.Добавить();
				
				// Свойства
				Движение.ПериодРегистрации				= ВыборкаПоШапкеДокумента.ПериодРегистрации;
				Движение.БазовыйПериодНачало			= ВыборкаПоРасчетСреднего.БазовыйПериодНачало;
				Движение.БазовыйПериодКонец				= ВыборкаПоРасчетСреднего.БазовыйПериодКонец;
				Движение.ВидРасчета						= ВыборкаПоРасчетСреднего.ВидРасчета;
				
				// Измерения
				Движение.Сотрудник						= ВыборкаПоРасчетСреднего.Сотрудник;
				Движение.Физлицо						= ВыборкаПоРасчетСреднего.Физлицо;
				Движение.Организация					= ВыборкаПоРасчетСреднего.Организация;
				
				// Ресурсы
				Движение.Результат						= ВыборкаПоРасчетСреднего.Результат;
				Движение.ОтработаноПоПятидневке			= ВыборкаПоРасчетСреднего.ОтработаноПоПятидневке;
				Движение.НормаПоПятидневке				= ВыборкаПоРасчетСреднего.НормаПоПятидневке;
				Движение.ОтработаноДней					= ВыборкаПоРасчетСреднего.ОтработаноДней;
				Движение.ОтработаноЧасов				= ВыборкаПоРасчетСреднего.ОтработаноЧасов;
				Движение.КалендарныеДни					= ВыборкаПоРасчетСреднего.КалендарныеДни;
				
				// Реквизиты
				Движение.КоэффициентИндексации			= ВыборкаПоРасчетСреднего.КоэффициентИндексации;
				Движение.ЧислоМесяцев					= ВыборкаПоРасчетСреднего.ЧислоМесяцев;
				Движение.ПериодРасчетаСреднегоЗаработка	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка;
				Движение.ДатаНачалаСобытия				= ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
				Движение.СпособРасчета					= ВыборкаПоШапкеДокумента.СпособРасчета;
				Движение.ДатаНачалаРасчетногоПериода	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
				Движение.ДатаОкончанияРасчетногоПериода	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
				Движение.ТарифнаяСтавкаПериода          = ВыборкаПоРасчетСреднего.ТарифнаяСтавкаПериода;
				Движение.ТекущаяТарифнаяСтавка          = ВыборкаПоРасчетСреднего.ТекущаяТарифнаяСтавка;
				Движение.МесяцВыборки                   = ВыборкаПоРасчетСреднего.МесяцВыборки; 
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ Отказ Тогда
			НаборРасчетСреднего.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Не Отказ;
	КонецЕсли;
	
		// Если это документ-исправление, тогда добавим сторно-записи из исправляемого документа.
	Если ЗначениеЗаполнено(Документ.ПерерассчитываемыйДокумент) Тогда
		СформироватьСторноЗаписиПоПерерассчитываемомуДокументу(Документ.ПерерассчитываемыйДокумент, ВыборкаПоШапкеДокумента, НаборОсновныеНачисления, НаборДополнительныеНачисления);
	КонецЕсли;

	Документ.СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборОсновныеНачисления);
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодРегистрации");
	ТаблицаСторноЗаписей.Колонки.ПериодРегистрацииСторно.Имя = "ПериодРегистрации";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияНачало");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияНачалоСторно.Имя = "ПериодДействияНачало";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияКонец");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияКонецСторно.Имя = "ПериодДействияКонец";
	ТаблицаСторноЗаписей.Колонки.Удалить("СторнируемыйДокумент");
	ТаблицаСторноЗаписей.Колонки.Регистратор.Имя = "СторнируемыйДокумент";

	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		// Заполним записи в наборе записей регистра
		// и в табличной части
		
		// новая запись движений
		Движение = НаборОсновныеНачисления.Добавить();

		ЗаполнитьЗначенияСвойств(Движение,СтрокаСторно);
		
		// Свойства
		Движение.Сторно	= Истина;
		Движение.Авторасчет	= Истина;

	КонецЦикла;
	
	Если ТаблицаСторноЗаписей.Количество() <> 0 Тогда
		// если таблица сторно-записей не пустая, получим таблицу
		// начислений зависисяцих от тех начислений, которые зарегистрированы,
		
		ТаблицаОсновныхНачислений = ПолучитьТаблицуЗависимыхНачисленийОсновные(НаборОсновныеНачисления.Выгрузить());
		Для каждого СтрокаТаблицы Из ТаблицаОсновныхНачислений Цикл
			
			Если СтрокаТаблицы.Начислить > 0 Тогда
				// начисление зависит от сторнирующего, добавим не сторно
				Движение = НаборОсновныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.СторнируемыйДокумент = Неопределено;
				Движение.Сторно	= Ложь;
				Движение.Авторасчет	= Истина;
			КонецЕсли;
			
			Если СтрокаТаблицы.Сторнировать > 0 Тогда
				// начисление зависит от сторнируемого, добавим сторно
				Движение = НаборОсновныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.Сторно	= Истина;
				Движение.Авторасчет	= Истина;
			КонецЕсли;	
			
		КонецЦикла;
		
		ТаблицаДополнительныхНачислений = ПолучитьТаблицуЗависимыхНачисленийДополнительные(ТаблицаСторноЗаписей);
		Для каждого СтрокаТаблицы Из ТаблицаДополнительныхНачислений Цикл
			
			Движение = НаборДополнительныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
			Движение.Сторно	= Истина;
			Движение.Авторасчет	= Истина;
			
			Движение = НаборДополнительныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
			Движение.СторнируемыйДокумент = Неопределено;
			Движение.Сторно	= Ложь;
			Движение.Авторасчет	= Истина;	
			
		КонецЦикла;
		
	КонецЕсли;

	// Очистим начисления
	Документ.Начисления.Очистить();

	// рассчитываем записи начислений и если надо, записи расчета среднего заработка
	Если РассчитываемыеТаблицы.Начисления Тогда
		
		Если РассчитываемыеТаблицы.РасчетСреднего Тогда
			РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение,,Истина);
		Иначе
			РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
		КонецЕсли;
		
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту") Тогда
			Если  Ссылка.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
				НаборОсновныеНачисления.Записать();	
				РассчитатьОграничение(Ссылка,НаборОсновныеНачисления);
			КонецЕсли;
			РассчитатьМинимальноеОграничение(Ссылка,НаборОсновныеНачисления);

        КонецЕсли;
		
		
		// перепишем записи начислений в документ
		ЗаписиНачислений = НаборОсновныеНачисления.Выгрузить();
		ЗаписиНачислений.Колонки.ПериодДействияНачало.Имя = "ДатаНачала";
		ЗаписиНачислений.Колонки.ПериодДействияКонец.Имя = "ДатаОкончания";
		Документ.Начисления.Загрузить(ЗаписиНачислений);
		
		
		Если НаборДополнительныеНачисления.Количество() > 0 Тогда
			
			РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДополнительныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);	
			
			// перепишем записи начислений в документ
			ЗаписиНачислений = НаборДополнительныеНачисления.Выгрузить();
			ЗаписиНачислений.Колонки.БазовыйПериодНачало.Имя = "ДатаНачала";
			ЗаписиНачислений.Колонки.БазовыйПериодКонец.Имя  = "ДатаОкончания";
			
			Для каждого СтрокаТаблицы Из ЗаписиНачислений Цикл
				НоваяСтрока = Документ.Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
			КонецЦикла;
			
		КонецЕсли;

	ИначеЕсли РассчитываемыеТаблицы.РасчетСреднего Тогда
		СреднийРассчитан = Ложь;
     	НаборОсновныеНачисления.Записать();
		НаборДополнительныеНачисления.Записать();
		Если НаборОсновныеНачисления.Количество() > 0 Тогда
			ПроведениеРасчетов.СформироватьИЗаписатьДанныеРасчетаСреднего("ОсновныеНачисленияРаботниковОрганизаций", Ссылка, НаборРасчетСреднего);
			СреднийРассчитан = Истина;
		КонецЕсли;
		Если НаборДополнительныеНачисления.Количество() > 0  И Не СреднийРассчитан 	Тогда
			ПроведениеРасчетов.СформироватьИЗаписатьДанныеРасчетаСреднего("ДополнительныеНачисленияРаботниковОрганизаций", Ссылка, НаборРасчетСреднего);
		КонецЕсли;
	КонецЕсли;

	Если РассчитываемыеТаблицы.РасчетСреднего Тогда
		// перепишем записи расчета среднего заработка в документ
		Документ.РасчетСреднего.Загрузить(НаборРасчетСреднего.Выгрузить());
	КонецЕсли;
	
	Если РежимПерерасчета тогда
		// Для режима перерасчета запишем движения (набор записей расчета среднего уже записан)
		НаборОсновныеНачисления.Записать();
		Если НаборДополнительныеНачисления.Количество() > 0 Тогда
			НаборДополнительныеНачисления.Записать();
		КонецЕсли;
	Иначе	
		// Удаляем движения для режима интерактивного расчета
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		Если НаборДополнительныеНачисления.Количество() > 0 Тогда
			НаборДополнительныеНачисления.Очистить();
			НаборДополнительныеНачисления.Записать();
		КонецЕсли;
		
		НаборРасчетСреднего.Очистить();
		НаборРасчетСреднего.Записать();
	КонецЕсли;

		
	Возврат Не Отказ;
		
КонецФункции // РассчитатьНачисления()

Процедура РассчитатьОграничение(Документ,НаборОсновныеНачисления) Экспорт
	
	ПоСреднему = Новый Массив;
	ПоСреднему.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
	ПоСреднему.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуОтпускаПоБеременности);
	ПоСреднему.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН); 
	ПоСреднему.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтпускПоБеременностиОтБПМ);
	
	
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор",Документ);
	Запрос.УстановитьПараметр("парамПоСреднемуФСЗН",ПоСреднему);	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|	ОсновныеНачисления.Сотрудник,
	|	ОсновныеНачисления.ФизЛицо,
	|	ОсновныеНачисления.Организация,
	|	ОсновныеНачисления.ПериодДействияНачало,
	|	ОсновныеНачисления.ПериодДействияКонец,
	|	ОсновныеНачисления.ВидРасчета,
	|	ОсновныеНачисления.СторнируемыйДокумент,
	|	ОсновныеНачисления.ГрафикРаботы,
	|	ОсновныеНачисления.ВидУчетаВремени,
	|	ОсновныеНачисления.ОплаченоДнейЧасов,
	|	ОсновныеНачисления.Результат,
	|	ОсновныеНачисления.ДатаНачалаСобытия
	|ПОМЕСТИТЬ ВТ_Начисления
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	ОсновныеНачисления.Регистратор = &Регистратор
	|	И ОсновныеНачисления.ВидРасчета.СпособРасчета В(&парамПоСреднемуФСЗН)
	|	И ОсновныеНачисления.Результат <> 0
	|	И НЕ ОсновныеНачисления.Сторно
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
	|	РазмерОграниченияПособияПоНетрудоспособности.Размер КАК Размер
	|ПОМЕСТИТЬ ВТ_ОграничениеПособия
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(РазмерОграниченияПособияПоНетрудоспособности.Период) КАК ДатаАктуальности
	|	ИЗ
	|		ВТ_Начисления КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
	|			ПО (РазмерОграниченияПособияПоНетрудоспособности.Период <= Основной.ПериодДействияНачало)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки) КАК ДатыАктуальности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
	|		ПО (РазмерОграниченияПособияПоНетрудоспособности.Период = ДатыАктуальности.ДатаАктуальности)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
	|	РазмерыПараметровДляРасчетаРБ.Размер КАК Размер
	|ПОМЕСТИТЬ ВТ_РазмерСреденейЗаработнойПлаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(РазмерыПараметровДляРасчетаРБ.Период) КАК ДатаАктуальности
	|	ИЗ
	|		ВТ_Начисления КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|			ПО (РазмерыПараметровДляРасчетаРБ.Период <= ДОБАВИТЬКДАТЕ(Основной.ДатаНачалаСобытия, МЕСЯЦ, -1))
	|	ГДЕ
	|		РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки) КАК ДатыАктуальности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (РазмерыПараметровДляРасчетаРБ.Период = ДатыАктуальности.ДатаАктуальности)
	|ГДЕ
	|	РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.СредняяЗПРаботников)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
	|	РазмерыПараметровДляРасчетаРБ.Размер КАК Размер
	|ПОМЕСТИТЬ ВТ_РазмерСреденейЗаработнойПлатыРабочих
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(РазмерыПараметровДляРасчетаРБ.Период) КАК ДатаАктуальности
	|	ИЗ
	|		ВТ_Начисления КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|			ПО (РазмерыПараметровДляРасчетаРБ.Период <= ДОБАВИТЬКДАТЕ(Основной.ПериодДействияНачало, МЕСЯЦ, -1))
	|	ГДЕ
	|		РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки) КАК ДатыАктуальности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (РазмерыПараметровДляРасчетаРБ.Период = ДатыАктуальности.ДатаАктуальности)
	|ГДЕ
	|	РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.СредняяЗП)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК НормаЗаМесяц,
	|	ВТ_ОсновныеНачисления.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_НормаВремениЗаМесяц
	|ИЗ
	|	ВТ_Начисления КАК ВТ_ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ВТ_ОсновныеНачисления.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И ВТ_ОсновныеНачисления.ВидУчетаВремени = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
	|			И (НАЧАЛОПЕРИОДА(ВТ_ОсновныеНачисления.ПериодДействияНачало, МЕСЯЦ) = ГрафикиРаботыПоВидамВремени.Месяц)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОсновныеНачисления.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВТ_ОсновныеНачисления.ПериодДействияНачало, МЕСЯЦ), КОНЕЦПЕРИОДА(ВТ_ОсновныеНачисления.ПериодДействияНачало, МЕСЯЦ), ДЕНЬ) + 1 КАК КалендарныеДниЗаМесяц,
	|	ВТ_ОсновныеНачисления.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_КалендарныеДниЗаМесяц
	|ИЗ
	|	ВТ_Начисления КАК ВТ_ОсновныеНачисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВТ_РазмерСреденейЗаработнойПлаты.Размер * ВТ_ОграничениеПособия.Размер / ВТ_КалендарныеДниЗаМесяц.КалендарныеДниЗаМесяц * ВТ_ОсновныеНачисления.ОплаченоДнейЧасов КАК ЧИСЛО(15, 2)) КАК ОграничениеПособияПоСредней,
	|	ВТ_ОсновныеНачисления.НомерСтроки
	|ПОМЕСТИТЬ ВТ_РазмерОграничениеПособияПоСредней
	|ИЗ
	|	ВТ_Начисления КАК ВТ_ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОграничениеПособия КАК ВТ_ОграничениеПособия
	|		ПО ВТ_ОсновныеНачисления.НомерСтроки = ВТ_ОграничениеПособия.ОсновнойНомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КалендарныеДниЗаМесяц КАК ВТ_КалендарныеДниЗаМесяц
	|		ПО ВТ_ОсновныеНачисления.НомерСтроки = ВТ_КалендарныеДниЗаМесяц.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерСреденейЗаработнойПлаты КАК ВТ_РазмерСреденейЗаработнойПлаты
	|		ПО ВТ_ОсновныеНачисления.НомерСтроки = ВТ_РазмерСреденейЗаработнойПлаты.ОсновнойНомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВТ_РазмерСреденейЗаработнойПлатыРабочих.Размер * ВТ_ОграничениеПособия.Размер / ВТ_НормаВремениЗаМесяц.НормаЗаМесяц * ВТ_ОсновныеНачисления.ОплаченоДнейЧасов КАК ЧИСЛО(15, 2)) КАК ОграничениеПособияПоСреднейРабочих,
	|	ВТ_ОсновныеНачисления.НомерСтроки
	|ПОМЕСТИТЬ ВТ_РазмерОграничениеПособияПоСреднейРабочих
	|ИЗ
	|	ВТ_Начисления КАК ВТ_ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОграничениеПособия КАК ВТ_ОграничениеПособия
	|		ПО ВТ_ОсновныеНачисления.НомерСтроки = ВТ_ОграничениеПособия.ОсновнойНомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НормаВремениЗаМесяц КАК ВТ_НормаВремениЗаМесяц
	|		ПО ВТ_ОсновныеНачисления.НомерСтроки = ВТ_НормаВремениЗаМесяц.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерСреденейЗаработнойПлатыРабочих КАК ВТ_РазмерСреденейЗаработнойПлатыРабочих
	|		ПО ВТ_ОсновныеНачисления.НомерСтроки = ВТ_РазмерСреденейЗаработнойПлатыРабочих.ОсновнойНомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|	ВТ_ОсновныеНачисления.Результат КАК Результат,
	|	ВТ_РазмерОграничениеПособияПоСредней.ОграничениеПособияПоСредней КАК ОграничениеПособияПоСредней,
	|	ВТ_РазмерОграничениеПособияПоСреднейРабочих.ОграничениеПособияПоСреднейРабочих КАК ОграничениеПособияПоСреднейРабочих
	|ИЗ
	|	ВТ_Начисления КАК ВТ_ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерОграничениеПособияПоСредней КАК ВТ_РазмерОграничениеПособияПоСредней
	|		ПО ВТ_ОсновныеНачисления.НомерСтроки = ВТ_РазмерОграничениеПособияПоСредней.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерОграничениеПособияПоСреднейРабочих КАК ВТ_РазмерОграничениеПособияПоСреднейРабочих
	|		ПО ВТ_ОсновныеНачисления.НомерСтроки = ВТ_РазмерОграничениеПособияПоСреднейРабочих.НомерСтроки
	|ИТОГИ
	|	СУММА(Результат),
	|	СУММА(ОграничениеПособияПоСредней),
	|	СУММА(ОграничениеПособияПоСреднейРабочих)
	|ПО
	|	ОБЩИЕ";
	
	 
	РезультатЗапроса = Запрос.Выполнить();
	ОбщиеИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	
	Пока ОбщиеИтоги.Следующий() Цикл 
		
		Если Документ.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Тогда
			Если ОбщиеИтоги.ОграничениеПособияПоСреднейРабочих < ОбщиеИтоги.Результат Тогда
				ВыборкаСтрок = ОбщиеИтоги.Выбрать();
				СтруктураПоиска = Новый Структура("НомерСтроки");
				Для Каждого СтрокаДвижений Из НаборОсновныеНачисления Цикл
					СтруктураПоиска.НомерСтроки = СтрокаДвижений.НомерСтроки;
					Если ВыборкаСтрок.НайтиСледующий(СтруктураПоиска) Тогда
	               		СтрокаДвижений.Результат = ВыборкаСтрок.ОграничениеПособияПоСреднейРабочих;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
		Иначе
			Если ОбщиеИтоги.ОграничениеПособияПоСредней < ОбщиеИтоги.Результат Тогда
				ВыборкаСтрок = ОбщиеИтоги.Выбрать();
				СтруктураПоиска = Новый Структура("НомерСтроки");
				Для Каждого СтрокаДвижений Из НаборОсновныеНачисления Цикл
					СтруктураПоиска.НомерСтроки = СтрокаДвижений.НомерСтроки;
					Если ВыборкаСтрок.НайтиСледующий(СтруктураПоиска) Тогда
	               		СтрокаДвижений.Результат = ВыборкаСтрок.ОграничениеПособияПоСредней;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;


КонецПроцедуры


Процедура РассчитатьМинимальноеОграничение(Документ,НаборОсновныеНачисления) Экспорт
	
	ПоСреднему = Новый Массив;
	ПоСреднему.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуОтпускаПоБеременности);
	ПоСреднему.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН); 
	ПоСреднему.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтпускПоБеременностиОтБПМ);
	
	
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор",Документ);
	//vvv
	Запрос.УстановитьПараметр("ДатаДеноминации",ОбщегоНазначения.ПолучитьДатуДеноминации());
	//
	Запрос.УстановитьПараметр("парамПоСреднемуФСЗН",ПоСреднему);	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|	ОсновныеНачисления.Сотрудник,
	|	ОсновныеНачисления.ФизЛицо,
	|	ОсновныеНачисления.Организация,
	|	ОсновныеНачисления.ПериодДействияНачало,
	|	ОсновныеНачисления.ПериодДействияКонец,
	|	ОсновныеНачисления.ВидРасчета,
	|	ОсновныеНачисления.СторнируемыйДокумент,
	|	ОсновныеНачисления.ГрафикРаботы,
	|	ОсновныеНачисления.ВидУчетаВремени,
	|	ОсновныеНачисления.ОплаченоДнейЧасов,
	|	ОсновныеНачисления.Результат,
	|	ОсновныеНачисления.ДатаНачалаСобытия
	|ПОМЕСТИТЬ ВТ_Начисления
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	ОсновныеНачисления.Регистратор = &Регистратор
	|	И ОсновныеНачисления.ВидРасчета.СпособРасчета В(&парамПоСреднемуФСЗН)
	|	И ОсновныеНачисления.Результат <> 0
	|	И НЕ ОсновныеНачисления.Сторно
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыАктуальности.НомерСтроки КАК НомерСтроки,
	//vvv
	//|	ЕСТЬNULL(РазмерыПараметровДляРасчетаРБ.Размер, 0) КАК Размер,
	|	ЕСТЬNULL(РазмерыПараметровДляРасчетаРБ.Размер / ВЫБОР КОГДА ДатыАктуальности.ДатаАктуальности<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ, 0) КАК Размер,
	//
	|	ДатыАктуальности.ДатаАктуальности КАК Период
	|ПОМЕСТИТЬ ВТ_РазмерПоследнегоБМП
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(РазмерыПараметровДляРасчетаРБ.Период) КАК ДатаАктуальности
	|	ИЗ
	|		ВТ_Начисления КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|			ПО (РазмерыПараметровДляРасчетаРБ.Период <= Основной.ПериодДействияНачало)
	|	ГДЕ
	|		РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.БПМ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки) КАК ДатыАктуальности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (РазмерыПараметровДляРасчетаРБ.Период = ДатыАктуальности.ДатаАктуальности)
	|ГДЕ
	|	РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.БПМ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыАктуальности.НомерСтроки КАК НомерСтроки,
	//vvv
	//|	ЕСТЬNULL(РазмерыПараметровДляРасчетаРБ.Размер, 0) КАК Размер,
	|	ЕСТЬNULL(РазмерыПараметровДляРасчетаРБ.Размер / ВЫБОР КОГДА ДатыАктуальности.ДатаАктуальности<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ, 0) КАК Размер,
	//
	|	ДатыАктуальности.ДатаАктуальности КАК Период
	|ПОМЕСТИТЬ ВТ_РазмерПредыдущегоБМП
	|ИЗ
	|	(ВЫБРАТЬ
	|		РазмерПоследнегоБМП.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(РазмерыПараметровДляРасчетаРБ.Период) КАК ДатаАктуальности
	|	ИЗ
	|		ВТ_РазмерПоследнегоБМП КАК РазмерПоследнегоБМП
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|			ПО (РазмерыПараметровДляРасчетаРБ.Период < РазмерПоследнегоБМП.Период)
	|	ГДЕ
	|		РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.БПМ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РазмерПоследнегоБМП.НомерСтроки) КАК ДатыАктуальности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (РазмерыПараметровДляРасчетаРБ.Период = ДатыАктуальности.ДатаАктуальности)
	|ГДЕ
	|	РазмерыПараметровДляРасчетаРБ.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровДляРасчетаЗарплаты.БПМ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазмерПоследнегоБМП.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА РазмерПоследнегоБМП.Размер < РазмерПредыдущегоБМП.Размер
	|			ТОГДА РазмерПредыдущегоБМП.Размер
	|		ИНАЧЕ РазмерПоследнегоБМП.Размер
	|	КОНЕЦ КАК РазмерБМП
	|ПОМЕСТИТЬ ВТ_РазмерБМП
	|ИЗ
	|	ВТ_РазмерПоследнегоБМП КАК РазмерПоследнегоБМП
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерПредыдущегоБМП КАК РазмерПредыдущегоБМП
	|		ПО РазмерПоследнегоБМП.НомерСтроки = РазмерПредыдущегоБМП.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВТ_ОсновныеНачисления.ПериодДействияНачало, МЕСЯЦ), КОНЕЦПЕРИОДА(ВТ_ОсновныеНачисления.ПериодДействияНачало, МЕСЯЦ), ДЕНЬ) + 1 КАК КалендарныеДниЗаМесяц,
	|	ВТ_ОсновныеНачисления.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_КалендарныеДниЗаМесяц
	|ИЗ
	|	ВТ_Начисления КАК ВТ_ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ВТ_ОсновныеНачисления.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И ВТ_ОсновныеНачисления.ВидУчетаВремени = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
	|			И (НАЧАЛОПЕРИОДА(ВТ_ОсновныеНачисления.ПериодДействияНачало, МЕСЯЦ) = ГрафикиРаботыПоВидамВремени.Месяц)
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВТ_РазмерБМП.РазмерБМП * 0.5 / ВТ_КалендарныеДниЗаМесяц.КалендарныеДниЗаМесяц * ВТ_ОсновныеНачисления.ОплаченоДнейЧасов КАК ЧИСЛО(15, 2)) КАК ОграничениеПособия,
	|	ВТ_ОсновныеНачисления.НомерСтроки
	|ПОМЕСТИТЬ ВТ_РазмерОграничениеПособия
	|ИЗ
	|	ВТ_Начисления КАК ВТ_ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерБМП КАК ВТ_РазмерБМП
	|		ПО ВТ_ОсновныеНачисления.НомерСтроки = ВТ_РазмерБМП.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КалендарныеДниЗаМесяц КАК ВТ_КалендарныеДниЗаМесяц
	|		ПО ВТ_ОсновныеНачисления.НомерСтроки = ВТ_КалендарныеДниЗаМесяц.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|	ВТ_ОсновныеНачисления.Результат КАК Результат,
	|	ВТ_РазмерОграничениеПособия.ОграничениеПособия КАК ОграничениеПособия
	|ИЗ
	|	ВТ_Начисления КАК ВТ_ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерОграничениеПособия КАК ВТ_РазмерОграничениеПособия
	|		ПО ВТ_ОсновныеНачисления.НомерСтроки = ВТ_РазмерОграничениеПособия.НомерСтроки
	|ИТОГИ
	|	СУММА(Результат),
	|	СУММА(ОграничениеПособия)
	|ПО
	|	ОБЩИЕ";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбщиеИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	
	Пока ОбщиеИтоги.Следующий() Цикл 
		
		Если ОбщиеИтоги.ОграничениеПособия > ОбщиеИтоги.Результат Тогда
			ВыборкаСтрок = ОбщиеИтоги.Выбрать();
			СтруктураПоиска = Новый Структура("НомерСтроки");
			Для Каждого СтрокаДвижений Из НаборОсновныеНачисления Цикл
				СтруктураПоиска.НомерСтроки = СтрокаДвижений.НомерСтроки;
				Если ВыборкаСтрок.НайтиСледующий(СтруктураПоиска) Тогда
               		СтрокаДвижений.Результат = ВыборкаСтрок.ОграничениеПособия;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;





КонецПроцедуры




// Процедура получает курс валюты упр учета для целей расчетов с персоналом 
// и валюту упручета
// Параметры:
//		ДатаКурса
//		ВалютаУпрУчета - в парамтер будет передана ссылка на валюту
//		КурсВалютыУпрУчета - в параметр будет передан курс
//		ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ПолучитьКурсВалютыУпрУчета(ДатаКурса, ВалютаУпрУчета, КурсВалютыУпрУчета, ВалютаРегламентированногоУчета) Экспорт
	ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Если ВалютаРегламентированногоУчета = ВалютаУпрУчета Тогда
		КурсВалютыУпрУчета = 1;
	Иначе
		Отбор = Новый Структура("Валюта", ВалютаУпрУчета);
		СведенияОКурсе = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.Получить(НачалоМесяца(ДатаКурса), Отбор);
		КурсВалютыУпрУчета = ?(СведенияОКурсе.Кратность = 0, 0 , СведенияОКурсе.Курс / СведенияОКурсе.Кратность);
	КонецЕсли;
КонецПроцедуры	

// Разбивает строку таблицы начислений на помесячные записи (длиной не более месяца)
// Параметры:
//		СтрокаНачислений - строка таблицы начислений, которую следует разбить
//		ТаблицаНачислений - таблица начислений, имеющая 2 обязательные колонки: КолонкаДатаНачала и  КолонкаДатаОкончания
//		КоллекцияКолонокТаблицы - коллекция колонок таблицы
//		КолонкаДатаНачала - имя колонки, содержащей дату начала периода записи
//		КолонкаДатаОкончания - имя колонки, содержащей дату окончания периода записи
Процедура РазбитьСтрокуНачисленийНаПомесячныеЗаписи(СтрокаНачислений, ТаблицаНачислений, КолонкаДатаНачала = "ДатаНачала", КолонкаДатаОкончания = "ДатаОкончания") Экспорт
	
	НачалоПериода = СтрокаНачислений[КолонкаДатаНачала];
	КонецПериода = СтрокаНачислений[КолонкаДатаОкончания];
	
	Если НачалоМесяца(НачалоПериода) = НачалоМесяца(КонецПериода) ИЛИ КонецПериода < НачалоПериода Тогда
		Возврат;// разбивать не надо
	КонецЕсли; 
	
	РазницаВМесяцах = (Год(КонецПериода)*12 + Месяц(КонецПериода)) - (Год(НачалоПериода)*12 + Месяц(НачалоПериода));
	
	// У первоначальной строки дату конца установим в конец первого месяца
	СтрокаНачислений[КолонкаДатаОкончания] = КонецМесяца(НачалоПериода);	
	
	ОчередноеНачалоМесяца = НачалоМесяца(НачалоПериода);
	Для Счетчик = 1 По РазницаВМесяцах Цикл
		
		НоваяСтрока = ТаблицаНачислений.Добавить();
		
		// Скопируем строку
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНачислений);
		
		// Установим период
		ОчередноеНачалоМесяца = ДобавитьМесяц(ОчередноеНачалоМесяца, 1);
		НоваяСтрока[КолонкаДатаНачала] = ОчередноеНачалоМесяца;	
		НоваяСтрока[КолонкаДатаОкончания] = КонецМесяца(ОчередноеНачалоМесяца);	
		
	КонецЦикла;
	
	// Для  последней строки установим конец периода в конец разбиваемого периода
	НоваяСтрока[КолонкаДатаОкончания]	 = КонецПериода;
		
КонецПроцедуры

// Сворачивает таблицу значений в которой расположены движения НДФЛСведенияОДоходах
// опирается на структуру метаданных - сворачивает все ресурсы по измерениям+реквизитам 
// Парамтеры:
//	ДвиженияНДФЛСведенияОДоходах - таблица значений
// Возвращаемое значение:
//	нет
Процедура СвернутьДвиженияНДФЛСведенияОДоходах(ДвиженияНДФЛСведенияОДоходах) Экспорт
	
	СтрокаСуммирования = "";
	Для Каждого Изм Из Метаданные.РегистрыНакопления["НДФЛСведенияОДоходах"].Ресурсы Цикл
		СтрокаСуммирования = СтрокаСуммирования + Изм.Имя +",";
	КонецЦикла;
	СтрокаСуммирования = Лев(СтрокаСуммирования, СтрДлина(СтрокаСуммирования)-1);// удалим последнюю запятую
	
	СтрокаГруппировки = "Регистратор,Период,";
	Для Каждого Изм Из Метаданные.РегистрыНакопления["НДФЛСведенияОДоходах"].Измерения Цикл
		СтрокаГруппировки = СтрокаГруппировки + Изм.Имя +",";
	КонецЦикла;
	Для Каждого Изм Из Метаданные.РегистрыНакопления["НДФЛСведенияОДоходах"].Реквизиты Цикл
		СтрокаГруппировки = СтрокаГруппировки + Изм.Имя +",";
	КонецЦикла;
	СтрокаГруппировки = Лев(СтрокаГруппировки, СтрДлина(СтрокаГруппировки)-1);// удалим последнюю запятую
	
	ДвиженияНДФЛСведенияОДоходах.Свернуть(СтрокаГруппировки,СтрокаСуммирования);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СПИСКОВ СПОСОБОВ РАСЧЕТА

// Возвращает список регламентированных алгоритмов начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокОсновныхВариантовНачисленийОрганизации() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.РасчетБЛотТарифнойСтавки);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуОтпускаПоБеременности);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтпускПоБеременностиОтБПМ);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксСуммойПропорционльноОтработанномуВремени);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйПриработок);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаЗаместительство);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаСовмещениеПоОкладу);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаСовмещениеПоТарифу);

		 
	 	 
	 //РБ
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3Лет);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ);
	  СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ);   
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3ЛетНаВторого);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСтарше3Лет);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалида);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаВИЧ);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету);
     
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоРазмераМинимальнойЗарплаты);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоРазмераМЗПотМесячнойМЗП);

	 
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоРазряда);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоСотрудника);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеМатериОдиночкеДо1_5лет);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеМатериОдиночкеДо3Лет);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо18ЛетНадб40);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСНадбавкой40До3Лет);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериНадб40До3Лет);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериОдиночкеДо1_5Лет);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериОдиночкеДо3Лет);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРаботающейМатериДо3Лет);
	 
	 //vvv
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйПриработокМесячнаяСтавкаЧасы);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоИнойЧасовойТарифнойСтавке);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоИнойМесячнойТарифнойСтавке);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуИзФМП);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксСуммойПропорционльноОтработанномуВремениПоЧасам);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Индексация);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.КТУ);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителей);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителейБезВыезда);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавкеВодителей);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйПриработокВодителей);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителейРемонт);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителейРемонтПлановый);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоРазницеМеждуЧасовымиСтавками);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ЕжемесячнаяПремия);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеВодители);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтСдельногоЗаработкаВодителей);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеРемонт);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеРемонтПлановый);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомСоСнижением);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоРазрядаПропорциональноОтработанномуВремени);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоВычисляемойЧасовойТарифнойСтавке);
	 //	 
	 
	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокОсновныхВариантовНачисленийОрганизации()

Функция ПолучитьСписокВозвожныхВидовПособий() Экспорт
	
	СписокПособий = Новый СписокЗначений;
	
	СписокПособий.Добавить(Перечисления.ВидыПособий.ПособиеПоВременнойНетрудоспособности);
	СписокПособий.Добавить(Перечисления.ВидыПособий.ПособиеПоУходуЗаБольнымЧленомСемьи);
	СписокПособий.Добавить(Перечисления.ВидыПособий.ПособиеПоБеременостиИРодам);
	СписокПособий.Добавить(Перечисления.ВидыПособий.ПособиеВСвязиСРождениемПервогоРебенка);
	СписокПособий.Добавить(Перечисления.ВидыПособий.ПособиеВСвязиСРождениемРебенка);
	СписокПособий.Добавить(Перечисления.ВидыПособий.ПособиеДо12НедельногоСтрока);
    СписокПособий.Добавить(Перечисления.ВидыПособий.ПособиеНаПогребение);
	СписокПособий.Добавить(Перечисления.ВидыПособий.ПособиеПоУходуЗаРебенкомДо3Лет);
	СписокПособий.Добавить(Перечисления.ВидыПособий.ПособиеПоУходуЗаРебенкомДо3ЛетНаВтрогоРебенка);
	СписокПособий.Добавить(Перечисления.ВидыПособий.ПособиеПоУходуЗаРебенкомДо3ЛетНаРебенкаИнвалида);
	СписокПособий.Добавить(Перечисления.ВидыПособий.ПособиеНаДетейСтарше3лет);
    СписокПособий.Добавить(Перечисления.ВидыПособий.ПособиеНаДетейСтарше3летНаРебенкаИнвалида);
	СписокПособий.Добавить(Перечисления.ВидыПособий.ОплатаСободныхОтРаботыДней);
	СписокПособий.Добавить(Перечисления.ВидыПособий.ПособиеПоУходуЗаРебенкомИнвалидомДо18Лет);
	СписокПособий.Добавить(Перечисления.ВидыПособий.ПособиеНаРебенкаВИЧ);


     Возврат СписокПособий
	
 КонецФункции
 
// Возвращает список регламентированных алгоритмов начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокДополнительныхВариантовНачислений() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
     
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);

	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
     //vvv
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуИзФМП);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаКоличествомБазовых);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаФиксированнойСуммой);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомСКТУ);
	 //
	 
	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокДополнительныхВариантовНачислений()

// Возвращает список алгоритмов начислений, зависящих от среднего заработка
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокНачисленийПоСреднемуЗаработку() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуОтпускаПоБеременности);

	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокДополнительныхВариантовНачислений()

// Возвращает список алгоритмов начислений, являющихся почасовыми отклонениями
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокНачисленийПочасовыхОтклонений() Экспорт

	СписокСпособов = Новый СписокЗначений;
	 
	СписокСпособов.Добавить(Перечисления.ВидыВремени.ЧасовоеНеотработанное);
	СписокСпособов.Добавить(Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);

	Возврат СписокСпособов

КонецФункции // ПолучитьСписокДополнительныхВариантовНачислений()

// Возвращает список регламентированных алгоритмов удержаний
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовУдержанийОрганизации() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.КомиссионыйСбор);

	 
	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокВариантовУдержанийОрганизации()

// Возвращает список управленческих алгоритмов начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовУпрНачислений() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2ДП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ДП2УП3);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ОП2);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ОП2ДП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ОП2УП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П3ДП1ОП2);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2ОП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ДП2ОП3);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3ДП4);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3ОП4);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3ОП4);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1ВП2_0);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2ДП3ВП4_0);	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П5ДП3УП4);	 	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П3УП4ДП5);	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3УП4ДП5);	 
	 	 
	 
	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокВариантовУпрНачислений()

// Возвращает список алгоритмов начислений надбавок
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовНадбавок() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
    
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
    
    СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
		
	Возврат СписокСпособов

	
КонецФункции // ПолучитьСписокВариантовНадбавок()

// Возвращает список алгоритмов начислений, не требующих указания валюты начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3Лет);
	//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо3Лет);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуОтпускаПоБеременности);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела);
	//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
	
	Возврат СписокСпособов;
	
КонецФункции 

// Возвращает алгоритмы начислений, не требующих указания валюты начислений, в виде соответствия
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Соответствие, содержащая подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСоответствиеСпособовРасчетаТребующихВалюту() Экспорт
	
	Список = ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты();
	СоответствиеСпособов = Новый Соответствие;
	Для Сч = 0 По Перечисления.СпособыРасчетаОплатыТруда.Количество() - 1 Цикл
		Значение = Перечисления.СпособыРасчетаОплатыТруда.Получить(Сч);
		СоответствиеСпособов.Вставить(Значение, Список.НайтиПоЗначению(Значение) = Неопределено);
	КонецЦикла;  
	
    Возврат СоответствиеСпособов
	
КонецФункции // Получить()

// Возвращает список алгоритмов основных начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовОсновныхНачислений() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	                                   
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокВариантовОсновныхНачислений

// Возвращает список предопределенных начислений
Функция ПредопределенныеНачисленияОрганизации() Экспорт

	СписокПредопределенныхВР = Новый СписокЗначений;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОсновныеНачисленияОрганизаций.Ссылка,
	                      |	ОсновныеНачисленияОрганизаций.Наименование
	                      |ИЗ
	                      |	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	                      |
	                      |ГДЕ
	                      |	(ОсновныеНачисленияОрганизаций.Предопределенный)");

	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
	    СписокПредопределенныхВР.Добавить(Результат.Ссылка,Результат.Наименование);
	КонецЦикла;
	
    Возврат СписокПредопределенныхВР
	
КонецФункции

// Возвращает список видов государственных единовременных пособий за счет ФСС
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления ВидыГосударственныхПособий
//
Функция ПолучитьСписокЕдиновременныхПособийЗаСчетФСС() Экспорт
	
	СписокПособий = Новый СписокЗначений;
	                                   
	СписокПособий.Добавить(Перечисления.ВидыГосударственныхПособий.ПриРожденииРебенка);
	СписокПособий.Добавить(Перечисления.ВидыГосударственныхПособий.ПриРожденииВторогоИПоследующихДетей);
	СписокПособий.Добавить(Перечисления.ВидыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности);
	СписокПособий.Добавить(Перечисления.ВидыГосударственныхПособий.ВСвязиСоСмертью);
	СписокПособий.Добавить(Перечисления.ВидыГосударственныхПособий.ПриУсыновленииРебенка);
	
	Возврат СписокПособий
	
КонецФункции

// Возвращает список кодов вычетов, относящихся к конкретным доходам
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   список значений, содержащий ссылки на предопределенные эл-ты спр-ка ВычетыНДФЛ
//
Функция ПолучитьСписокВычетовКДоходам() Экспорт

	СписокВычетов = Новый СписокЗначений;
	
	СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код600);
	СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код610);
	СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код611);
	СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код640);
	СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код620);
	СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код650);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВычетыНДФЛ.Ссылка,
	|	ВычетыНДФЛ.Код + "" ("" + ВычетыНДФЛ.Наименование + "")"" КАК Представление
	|ИЗ
	|	Справочник.ВычетыНДФЛ КАК ВычетыНДФЛ
	|ГДЕ
	|	(НЕ ВычетыНДФЛ.Ссылка В (&Ссылка))
	|	И (НЕ ВычетыНДФЛ.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВычетыНДФЛ.Код");
	
	Запрос.УстановитьПараметр("Ссылка",СписокВычетов);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокВычетов.Очистить();
	Пока Выборка.Следующий() Цикл
		СписокВычетов.Добавить(Выборка.Ссылка,Выборка.Представление);
	КонецЦикла;
	
	Возврат СписокВычетов
	
КонецФункции // ПолучитьСписокВычетовКДоходам()

// В зависимости от даты начала события предлагаем для выбора разные наборы составляющих
//
// Параметры
//  ДатаНачалаСобытия - дата, дата события, с которым связана выплата среднего заработка
//
// Возвращаемое значение:
//   Список значений, элементы которого представляют собой предопредеелнные в.р. из ПВР СреднийЗаработок
//
Функция ПолучитьПереченьСоставляющихСреднегоЗаработка(ДатаНачалаСобытия) Экспорт
	
	СписокВыбора = Новый СписокЗначений;
	ПроверяемаяДата = ?(ЗначениеЗаполнено(ДатаНачалаСобытия),ДатаНачалаСобытия,ОбщегоНазначения.ПолучитьРабочуюДату());
		СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
		СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
		СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
		СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии);
	
    Возврат СписокВыбора
	
КонецФункции // ПолучитьПереченьСоставляющихСреднего()

// Возвращает список процентных способов расчета
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокНачисленийПроцентом()
	
	СписокСпособов = Новый Массив;
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
	//vvv
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Индексация);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомСоСнижением);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомСКТУ);
	//
	//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка);
	
	Возврат СписокСпособов;
	
КонецФункции

 // Выбирает все зарегистрированные в ИБ категории расчета кроме Справочники.КатегорииРасчетов.Первичное
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   список значений с категориями для выбора
//
Функция ПолучитьСписокЗависимыхКатегорийРасчета() Экспорт

	// Установим значение переключателя "ОчередностьНачисления" и список выбора для реквизита "КатегорияРасчета"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Первичное", Справочники.КатегорииРасчетов.Первичное);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КатегорииРасчетов.Ссылка,
	|	КатегорииРасчетов.Наименование
	|ИЗ
	|	Справочник.КатегорииРасчетов КАК КатегорииРасчетов
	|ГДЕ
	|	КатегорииРасчетов.Ссылка <> &Первичное
	|
	|УПОРЯДОЧИТЬ ПО
	|	КатегорииРасчетов.Код";
	Категории = Запрос.Выполнить().Выбрать();
	СписокКатегорийРасчета = Новый СписокЗначений;
	Пока Категории.Следующий() Цикл
		СписокКатегорийРасчета.Добавить(Категории.Ссылка, Категории.Наименование);
	КонецЦикла;

	Возврат СписокКатегорийРасчета
	
КонецФункции // ПолучитьСписокВычетовКДоходам()

Функция ПолучитьСписокНеДопустимыхВР() Экспорт
	
	СписокНедопустимыхВР = Новый СписокЗначений;
	СписокНедопустимыхВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаПраздничныеИВыходные);

	Запрос = Новый Запрос;
	СпособыРасчета = Новый Массив;
	СпособыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаЗаместительство);
	СпособыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаСовмещениеПоОкладу);
	СпособыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаСовмещениеПоТарифу);
	Запрос.УстановитьПараметр("СпособыРасчета",СпособыРасчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.СпособРасчета В(&СпособыРасчета)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокНедопустимыхВР.Добавить(Выборка.ВидРасчета);
	КонецЦикла;
	
	Возврат СписокНедопустимыхВР
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВИДАМИ РАСЧЕТА

// Эта функция возвращает информацию о виде расчета из переданного соответствия
// Если в соответствии не найдена информация о виде расчета - она подготавливается и 
// помещается в соответствие
// Применяется для работы с формами, в которых активно требуется получать 
// информащцию о видах расчета, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОВидахРасчета - соответствие, у котрого в качестве ключа - ПланВидовРасчетаСсылка, а 
//  				  в качестве значения - структура из элементов
//					  РазмерТребуется - булево - если да, то при вводе такого 
//										вида расчета требуется проставлять значение "размер" 
//										(суммы, проценты и проч. показатели, используемые при расчете)
//
//	ВидРасчета - ПланВидовРасчетаСсылка
//
// Возвращаемое значение:
//  Описанная выше структура
//
Функция ПолучитьСведенияОВидеРасчета(СведенияОВидахРасчета, ВидРасчета) Экспорт
	
	СведенияОВидеРасчета = СведенияОВидахРасчета[ВидРасчета];
	
	Если СведенияОВидеРасчета = Неопределено Тогда
		
		ИзменениеПоказателяНеУказано = Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка();
		
		СведенияОВидеРасчета = Новый Структура("
		|КодДоходаНДФЛ, 
		|СпособРасчета, 
		|ЗачетОтработанногоВремени,
		|ЗачетНормыВремени,
		|ВидВремени,
		|ПериодРасчетаСреднегоЗаработка,
		|ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,
		|РазмерТребуется,
		|НеТребуетВалюты,
		|ТребуетВводаТарифногоРазряда,
		|ОбозначениеВТабелеУчетаРабочегоВремени", 
		Неопределено,            			// КодДоходаНДФЛ
		Неопределено,            			// СпособРасчета
		Ложь,            					// ЗачетОтработанногоВремени
		Ложь,            					// ЗачетНормыВремени
		Неопределено,      					// ВидВремени
		0,            						// ПериодРасчетаСреднегоЗаработка
		Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству,
		Ложь,								// РазмерТребуется
		Ложь,                               // НеТребуетВалюты
		Ложь,                              // ТребуетВводаТарифногоРазряда
		Неопределено);                      // ОбозначениеВТабелеУчетаРабочегоВремени

		СпособРасчета = ВидРасчета.СпособРасчета;
		ТипВР = ТипЗнч(ВидРасчета);
		// размер требует способ расчета
		СведенияОВидеРасчета.СпособРасчета = СпособРасчета;
		СведенияОВидеРасчета.РазмерТребуется = СпособРасчетаТребуетРазмер(СпособРасчета);
		СведенияОВидеРасчета.НеТребуетВалюты = СпособРасчетаНеТребуетВалюты(СпособРасчета);
		// размер требует вид расчета
		Если ТипВР = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
			ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"ВидВремени,ЗачетОтработанногоВремени,ЗачетНормыВремени,КодДоходаНДФЛ,ТребуетВводаТарифногоРазряда,ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,ПериодРасчетаСреднегоЗаработка,ОбозначениеВТабелеУчетаРабочегоВремени");
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
				СведенияОВидеРасчета.РазмерТребуется = Истина;
			КонецЕсли;	
			Если СведенияОВидеРасчета.ТребуетВводаТарифногоРазряда Тогда
				СведенияОВидеРасчета.НеТребуетВалюты = Истина
			КонецЕсли;
		КонецЕсли;
		Если ТипВР = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций")  Тогда
			ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"КодДоходаНДФЛ,ТребуетВводаТарифногоРазряда,ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка");
			Если СведенияОВидеРасчета.ТребуетВводаТарифногоРазряда Тогда
				СведенияОВидеРасчета.НеТребуетВалюты = Истина
			КонецЕсли;
			Если ПолучитьСписокНачисленийПоСреднемуЗаработку().НайтиПоЗначению(СпособРасчета) <> Неопределено Тогда
				СведенияОВидеРасчета.ПериодРасчетаСреднегоЗаработка = ВидРасчета.ЧислоМесяцев;
			КонецЕсли;
		КонецЕсли;
		Если ТипВР = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций") Тогда
			Если ПолучитьСписокНачисленийПоСреднемуЗаработку().НайтиПоЗначению(СпособРасчета) <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,ПериодРасчетаСреднегоЗаработка");
			КонецЕсли;
		КонецЕсли;
		
		СведенияОВидахРасчета[ВидРасчета] = СведенияОВидеРасчета;
	КонецЕсли;
	
	Возврат СведенияОВидеРасчета;
	
КонецФункции  // ПолучитьСведенияОВидеРасчета

// функция проверяет необходимость задавать размер для расчета по заданному способу
// Парамерты:
//	СпособРасчета
//
// Возвращаемое значение:
//	булево - признак того, нужен ли размер для расчета таким способом
//
Функция СпособРасчетаТребуетРазмер(СпособРасчета) Экспорт
	Возврат НЕ (
    СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка
		//vvv
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоРазницеМеждуЧасовымиСтавками
		//
		
		//или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1
		//или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ДП2ОП3
		//или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ДП2УП3
		//или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ОП2
		// или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ОП2ДП3
		//или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ОП2УП3
		//или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2
		//или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2ДП3
		//или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2ОП3
		//или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3
		//или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3ДП4
		//или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П3ДП1ОП2
		// или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3
		// или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3ОП4
		// или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3УП4ДП5
		// или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1ВП2_0
		// или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П3УП4ДП5
		// или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П5ДП3УП4
		// или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2ДП3ВП4_0
		// или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3
		// или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3
  );
КонецФункции

Функция СпособРасчетаНеТребуетВалюты(СпособРасчета) Экспорт
	
	Возврат (
	
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСтарше3Лет Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3Лет Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистВПрожиточныхМинимумах Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом
	
    );
	
КонецФункции

Функция УстановитьФлагНачисляетсяВЦеломЗаМесяц(ПроизвольнаяФормулаРасчета, Показатели, СпособРасчета = Неопределено, БазовыйПериодПрошлыйМесяц = Ложь) Экспорт
	
	Если ПроизвольнаяФормулаРасчета Тогда
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВДнях);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВКалендарныхДнях);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВЧасах);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ОтработаноВремениВДнях);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ОтработаноВремениВЧасах);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.РасчетнаяБаза);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.СдельнаяВыработка);
		
		Для Каждого СтрПоказателя Из Показатели Цикл
			Если СписокПоказателей.НайтиПоЗначению(СтрПоказателя.Показатель) <> Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой ИЛИ БазовыйПериодПрошлыйМесяц;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, предназначенные для реализации способа расчета 
// ДоначислениеПоУправленческомуУчету

// Подобрать размер доначисления 
// 
// Параметры:
//  Сведения - сведения для расчета доначислений, соответсвие ключ которого - Сотрудник, значение - структура 
//  Сотрудник
//  РасчетныйПериод
// 
// Возвращаемое значение: число - размер доначисления
//
Функция ПодобратьДоначисление(Сведения, Сотрудник, РасчетныйПериод)
	
	Если Сведения = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	ТочностьПодбораРезультата = 0.01;
	
	Сведение = Сведения[Сотрудник];
	Если Сведение = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	Если Сведение.КВыплатеПоУпрУчету = 0 Тогда
		Возврат 0;
	КонецЕсли;
	ВсегоНачислено = Сведение.УжеНачисленоДоДоначисления;
	ВсегоНачисленоПослеДоначисления = 0;
	ВсегоНачисленоДоИПриДоначислении = Сведение.УжеНачисленоДоДоначисления;
	РанееДоначислено = 0;
	Для Каждого ЭлементПрогноза Из Сведение.ПрогнозНДФЛ Цикл
		СтрокаПрогноза = ЭлементПрогноза.Значение;
		РанееДоначислено = РанееДоначислено + СтрокаПрогноза.НачисленоПриДоначислении;
		ВсегоНачислено = ВсегоНачислено + СтрокаПрогноза.НачисленоДоДоначисления + СтрокаПрогноза.НачисленоПриДоначислении + СтрокаПрогноза.НачисленоПослеДоначисления;
		ВсегоНачисленоПослеДоначисления = ВсегоНачисленоПослеДоначисления + СтрокаПрогноза.НачисленоПослеДоначисления;
		ВсегоНачисленоДоИПриДоначислении = ВсегоНачисленоДоИПриДоначислении + СтрокаПрогноза.НачисленоДоДоначисления + СтрокаПрогноза.НачисленоПриДоначислении;
	КонецЦикла;
	
	ПерваяСтрокаПрогноза = Неопределено;
	// начальный прогноз                                
	Для Каждого ЭлементПрогноза Из Сведение.ПрогнозНДФЛ Цикл
		Если ПерваяСтрокаПрогноза = Неопределено Тогда
			ПерваяСтрокаПрогноза = ЭлементПрогноза.Значение;
		КонецЕсли;
		СтрокаПрогноза = ЭлементПрогноза.Значение;
		// для начальной оценки берем первую попавшуюся ставку
		Ставка = ?(ЭлементПрогноза.Значение.Резидент, 0.13, 0.30);
		Прервать;
	КонецЦикла;
	Если ВсегоНачисленоПослеДоначисления <> 0 Тогда
		СуммарныйПроцент = ВсегоНачисленоПослеДоначисления / ВсегоНачисленоДоИПриДоначислении * 100;
	Иначе
		СуммарныйПроцент = Сведение.СуммарныйПроцент;
	КонецЕсли;
	НачислитьПрогноз = (Сведение.КВыплатеПоУпрУчету - (ВсегоНачислено - ПрогнозНДФЛ(ПерваяСтрокаПрогноза.ОблагаемыйДоходЗаГод - Сведение.УжеНачисленоДоДоначисления + ВсегоНачисленоДоИПриДоначислении, ПерваяСтрокаПрогноза, 0))) / (1 + СуммарныйПроцент / 100) /(1 - Ставка);
	Для Сч = 1 По 20 Цикл
		Если не Сведение.ЕстьДоначисление Тогда
			Возврат 0;
		КонецЕсли;
		ВсегоИсчисленный = 0;
		Для Каждого ЭлементПрогноза Из Сведение.ПрогнозНДФЛ Цикл
			СтрокаПрогноза = ЭлементПрогноза.Значение;
			Ставка = ?(СтрокаПрогноза.Резидент, 0.13, 0.30);
			ПолнОблагаемыйДоходЗаГод = 
			СтрокаПрогноза.ОблагаемыйДоходЗаГод 
			+ ?(ЭлементПрогноза.Ключ = РасчетныйПериод, НачислитьПрогноз, 0) 
			//+ ?(ЭлементПрогноза.Ключ = РасчетныйПериод, Сведение.УжеНачисленоДоДоначисления, 0) 
			+ СтрокаПрогноза.НачисленоПриДоначислении + СтрокаПрогноза.НачисленоДоДоначисления 
			+ (СтрокаПрогноза.НачисленоДоДоначисления + ?(ЭлементПрогноза.Ключ = РасчетныйПериод, НачислитьПрогноз, 0) 
			+ СтрокаПрогноза.НачисленоПриДоначислении) * СуммарныйПроцент / 100;

			НалогИсчисленный = ПрогнозНДФЛ(ПолнОблагаемыйДоходЗаГод, СтрокаПрогноза, ВсегоИсчисленный);
			ВсегоИсчисленный  = ВсегоИсчисленный + НалогИсчисленный;
		КонецЦикла;
		Если РанееДоначислено > 0 Тогда
			// это повторная попытка расчета
			Разница = Сведение.КВыплатеПоУпрУчету - (ВсегоНачислено + НачислитьПрогноз + НачислитьПрогноз * СуммарныйПроцент / 100 - ВсегоИсчисленный);
		Иначе
			Разница = Сведение.КВыплатеПоУпрУчету - (ВсегоНачислено + НачислитьПрогноз + (ВсегоНачислено + НачислитьПрогноз) * СуммарныйПроцент / 100 - ВсегоИсчисленный);
		КонецЕсли;

		Если Разница < ТочностьПодбораРезультата и Разница > - ТочностьПодбораРезультата Тогда
			// выполнен точный расчет
			Прервать;
		ИначеЕсли Разница < 1 и Разница > - 1 Тогда
			// разница меньше 1
			НачислитьПрогноз = НачислитьПрогноз + Разница;
		Иначе
			НачислитьПрогноз = НачислитьПрогноз + Разница/(1 - Ставка);
		КонецЕсли;
		
	КонецЦикла;
	Возврат Макс(0, НачислитьПрогноз + РанееДоначислено);
	
КонецФункции


// расчет прогнозируемой суммы НДФЛ за некоторый период 
// Парамтеры:
//  ПолнОблагаемыйДоходЗаГод - размер дохода периода
//  СтрокаПрогноза - структура, содержащая сведения для прогноза 
//  ДопВсегоИсчисленный - дополнительная сумма уже исчисленного НДФЛ для данного 
//          периода (помимо той суммы, которая содержится в структуре СтрокаПрогноза 
//
// Возвращаемое значение: число - размер прогнозируемого налога
//
Функция ПрогнозНДФЛ(ПолнОблагаемыйДоходЗаГод, СтрокаПрогноза, ДопВсегоИсчисленный)
    Если СтрокаПрогноза.Резидент Тогда
        Ставка = 0.13;
        ВычетыЛичныеЗаГод = ?(ПолнОблагаемыйДоходЗаГод >= СтрокаПрогноза.ОграничениеПоДоходамЛичные,
                              СтрокаПрогноза.ВычетыЛичныеДоТекПериода,
                              СтрокаПрогноза.ВычетыЛичныеДоТекПериода + СтрокаПрогноза.ВычетыЛичные);
        ВычетыДетскиеЗаГод = ?(ПолнОблагаемыйДоходЗаГод >= СтрокаПрогноза.ОграничениеПоДоходамНаДетей,
                              СтрокаПрогноза.ВычетыДетскиеДоТекПериода,
                              СтрокаПрогноза.ВычетыДетскиеДоТекПериода + СтрокаПрогноза.ВычетыДетские);
        ВычетыДетскиеИнвалидовЗаГод = ?(ПолнОблагаемыйДоходЗаГод >= СтрокаПрогноза.ОграничениеПоДоходамНаДетейИнвалидов,
                              СтрокаПрогноза.ВычетыДетскиеИнвалидовДоТекПериода,
                              СтрокаПрогноза.ВычетыДетскиеИнвалидовДоТекПериода + СтрокаПрогноза.ВычетыДетскиеИнвалидов);
        ПримененныеВычетыДетские = ?(ПолнОблагаемыйДоходЗаГод > ВычетыДетскиеЗаГод, 
                                    ВычетыДетскиеЗаГод, 
                                    ПолнОблагаемыйДоходЗаГод);
        ПримененныеВычетыДетскиеИнвалидов = ?(ПолнОблагаемыйДоходЗаГод > ВычетыДетскиеИнвалидовЗаГод + ВычетыДетскиеЗаГод, 
                                    ВычетыДетскиеИнвалидовЗаГод,
                                    ?(ВычетыДетскиеИнвалидовЗаГод > ПолнОблагаемыйДоходЗаГод - ВычетыДетскиеЗаГод, 
                                    ПолнОблагаемыйДоходЗаГод - ВычетыДетскиеЗаГод,
                                    ВычетыДетскиеИнвалидовЗаГод));
        ПримененныеВычетыЛичные = ?(ПолнОблагаемыйДоходЗаГод > ВычетыЛичныеЗаГод + ВычетыДетскиеЗаГод + ВычетыДетскиеИнвалидовЗаГод, 
                                    ВычетыЛичныеЗаГод, 
                                    ?(ВычетыЛичныеЗаГод > ПолнОблагаемыйДоходЗаГод - ВычетыЛичныеЗаГод - ВычетыДетскиеИнвалидовЗаГод, 
                                    ПолнОблагаемыйДоходЗаГод - ВычетыЛичныеЗаГод - ВычетыДетскиеИнвалидовЗаГод,
                                    ВычетыЛичныеЗаГод));
        ПримененныеВычеты312 = ?(ПолнОблагаемыйДоходЗаГод > ПримененныеВычетыЛичные + ПримененныеВычетыДетские + ПримененныеВычетыДетскиеИнвалидов, 
                                ?(СтрокаПрогноза.Вычет312Остаток > ПолнОблагаемыйДоходЗаГод - ПримененныеВычетыЛичные - ПримененныеВычетыДетские - ПримененныеВычетыДетскиеИнвалидов,
                                ПолнОблагаемыйДоходЗаГод - ПримененныеВычетыЛичные - ПримененныеВычетыДетские - ПримененныеВычетыДетскиеИнвалидов,
                                СтрокаПрогноза.Вычет312Остаток),
                                0);
        ПримененныеВычеты311 = ?(ПолнОблагаемыйДоходЗаГод > ПримененныеВычеты312 + ПримененныеВычетыЛичные + ПримененныеВычетыДетские + ПримененныеВычетыДетскиеИнвалидов,
                                ?(СтрокаПрогноза.Вычет311Остаток > ПолнОблагаемыйДоходЗаГод - ПримененныеВычеты312 - ПримененныеВычетыЛичные - ПримененныеВычетыДетские - ПримененныеВычетыДетскиеИнвалидов,
                                ПолнОблагаемыйДоходЗаГод - ПримененныеВычеты312 - ПримененныеВычетыЛичные - ПримененныеВычетыДетские - ПримененныеВычетыДетскиеИнвалидов,
                                СтрокаПрогноза.Вычет311Остаток),
                                0);

        Возврат Окр((ПолнОблагаемыйДоходЗаГод - ПримененныеВычетыЛичные - ПримененныеВычетыДетские - ПримененныеВычетыДетскиеИнвалидов - ПримененныеВычеты312 - ПримененныеВычеты311) * Ставка) - СтрокаПрогноза.ИсчисленныйНалогДоТекПериода + ДопВсегоИсчисленный;
    Иначе
        Ставка = 0.30;
        Возврат ПолнОблагаемыйДоходЗаГод * Ставка;
    КонецЕсли;
КонецФункции

// получение списка физлиц, для которых требуется уточнение размера доначисления
// Параметры:
//  СведенияОДоначислениях - сведения для расчета доначислений, соответсвие ключ которого - Физлицо, значение - структура 
// Возвращаемое значение: массив ссылок на физлица
//  
Функция ФизлицаТребующиеПересчета(СведенияОДоначислениях) Экспорт
    Физлица = Новый Массив();
    ДопустимаяПогрешностьРасчета = 1;
    Для Каждого ЭлементСведений Из СведенияОДоначислениях Цикл
        Сведение = ЭлементСведений.Значение;
        Физлицо = ЭлементСведений.Ключ;
        Если не Сведение.ЕстьДоначисление Тогда
            // не было доначисления
            Продолжить;
        КонецЕсли;
        ВсегоИсчисленный = 0;
        ВсегоНачисленоПриДоначислении = 0;
        ВсегоНачислено = Сведение.УжеНачисленоДоДоначисления;
        Для Каждого ЭлементПрогноза Из Сведение.ПрогнозНДФЛ Цикл
            СтрокаПрогноза = ЭлементПрогноза.Значение;
            Если СтрокаПрогноза.Резидент Тогда
                ПолнОблагаемыйДоходЗаГод = СтрокаПрогноза.ОблагаемыйДоходЗаГод + СтрокаПрогноза.НачисленоПриДоначислении + СтрокаПрогноза.НачисленоПослеДоначисления + СтрокаПрогноза.НачисленоДоДоначисления;
                НалогИсчисленный = ПрогнозНДФЛ(ПолнОблагаемыйДоходЗаГод, СтрокаПрогноза, ВсегоИсчисленный);
                ВсегоИсчисленный  = ВсегоИсчисленный + НалогИсчисленный;
                ВсегоНачислено = ВсегоНачислено + СтрокаПрогноза.НачисленоДоДоначисления + СтрокаПрогноза.НачисленоПриДоначислении + СтрокаПрогноза.НачисленоПослеДоначисления;
                ВсегоНачисленоПриДоначислении = ВсегоНачисленоПриДоначислении + СтрокаПрогноза.НачисленоПриДоначислении;
            КонецЕсли;
        КонецЦикла;
        Если ВсегоНачисленоПриДоначислении = 0 Тогда
            // доначисление оказалось "нулевым"
            Продолжить;
        КонецЕсли;
        Если ВсегоНачислено - ВсегоИсчисленный - Сведение.КВыплатеПоУпрУчету > ДопустимаяПогрешностьРасчета или ВсегоНачислено - ВсегоИсчисленный - Сведение.КВыплатеПоУпрУчету < - ДопустимаяПогрешностьРасчета Тогда
            Физлица.Добавить(Физлицо);
        КонецЕсли;
    КонецЦикла;
    Возврат Физлица;
    
КонецФункции

// получение данных для прогноза НДФЛ
// Парамтеры:
//  ПериодРегистрации
//  Организация
//  Регистратор
//  СписокФизЛицТекст - фрагмент текста запроса, предстаавляющий собой условие на список физлиц
//          ДополнительныеПараметрыЗапроса - стрруктура, параметры запроса, которые требуется установить при 
//          для выполнения фрагмента запроса СписокФизЛицТекст
// Возвращаемое значение: результат запроса с данными для прогноза НДФЛ
//
Функция ДанныеДляПрогнозаНДФЛ(ПериодРегистрации, Организация, Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса = Неопределено)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамОрганизация",       Организация);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));

	НалоговаяПолитикаНДФЛ = РегистрыСведений.УчетнаяПолитикаПоНДФЛ.ПолучитьПоследнее(КонецГода(ПериодРегистрации), Новый Структура("Организация", Организация)).ОсобенностиИсчисленияНДФЛ;
	Если НЕ ЗначениеЗаполнено(НалоговаяПолитикаНДФЛ) Тогда
		НалоговаяПолитикаНДФЛ = Перечисления.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом;
	КонецЕсли;
	
	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли; 
    
    // получим ПоследнийМесяцНалоговогоПериода
    Запрос.Текст = "
    |ВЫБРАТЬ ПЕРВЫЕ 1
    |	НДФЛСведенияОДоходах.Период КАК Период
    |ИЗ
    |	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
    |		ПО Работники.Физлицо = НДФЛСведенияОДоходах.ФизЛицо
    |
    |ГДЕ
    |	НДФЛСведенияОДоходах.Организация = &парамОрганизация
    |
    |УПОРЯДОЧИТЬ ПО
    |	Период УБЫВ";
    Результат = Запрос.Выполнить();

    Если Результат.Пустой() Тогда
        ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

    Иначе
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

    КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НДФЛСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = НДФЛСведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	НДФЛСведенияОДоходах.Организация = &парамОрганизация И НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);

	КонецЕсли;

	Запрос.УстановитьПараметр("парамСтавка13",                     Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);
	Запрос.УстановитьПараметр("парамСтавкаРезидента13",            ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13) / 100);
	
	Запрос.УстановитьПараметр("парамКонецМесяцаНалоговогоПериода", КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамНачалоГода",                   НачалоГода(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецГода",                    КонецГода(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамПриход",                       ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",                    Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление);
	
	Запрос.УстановитьПараметр("КодВычета312", Справочники.ВычетыНДФЛ.Код312);
	Запрос.УстановитьПараметр("КодВычета311", Справочники.ВычетыНДФЛ.Код311);
	
	КодыВычетовРезидентов = Новый Массив;
	КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код401);
	КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код402);
	КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код403);
	КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код404);
	КодыВычетовРезидентов.Добавить(Справочники.ВычетыНДФЛ.Код405);
	Запрос.УстановитьПараметр("КодыВычетовРезидентов", КодыВычетовРезидентов);
	
	// Периоды
	// Таблица список периодов-физлиц по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо

	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	НДФЛСведенияОДоходах.ФизЛицо КАК Физлицо
	|ИЗ
	|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = НДФЛСведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	НДФЛСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И &парамКонецМесяцаНалоговогоПериода И
	|	НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) <= &парамПериодРегистрации И
	|	НДФЛСведенияОДоходах.Организация = &парамОрганизация И
	|	НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка13
    |
    |ОБЪЕДИНИТЬ
    |
    |ВЫБРАТЬ
    | 	&парамПериодРегистрации,
    |	Работники.Физлицо
    |ИЗ
    |	(" + СписокФизЛицТекст + ") КАК Работники";

	// ФизлицаНеРезиденты
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц-нерезидентов

	ФизлицаНеРезидентыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонецГода) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРФ)";

	// ДоходыСКодамиВычетов
	//	Поля:
	//		ФизЛицо
	//		Период
	//		КодДохода
	//		КодВычета
	//		СуммаДоходаОборот
	//		СуммаВычетаОборот
	//
	//	Описание:
	// Выбирает облагаемые налогом доходы за весь год по физлицам из СписокФизлиц
	ДоходыСКодамиВычетовТекст = 
	"ВЫБРАТЬ
	|	НДФЛОбороты.Физлицо КАК ФизЛицо,
	|	НДФЛОбороты.Период КАК Период,
	|	НДФЛОбороты.КодДохода КАК КодДохода,
	|	НДФЛОбороты.КодВычета КАК КодВычета,
	|	СУММА(НДФЛОбороты.СуммаДоходаОборот) КАК СуммаДоходаОборот,
	|	СУММА(НДФЛОбороты.СуммаВычетаОборот) КАК СуммаВычетаОборот
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		НДФЛСведенияОДоходах.ФизЛицо КАК Физлицо,
	|		НДФЛСведенияОДоходах.КодДохода КАК КодДохода,
	|		НДФЛСведенияОДоходах.КодВычета КАК КодВычета,
	|		СУММА(НДФЛСведенияОДоходах.СуммаДохода) КАК СуммаДоходаОборот,
	|		СУММА(НДФЛСведенияОДоходах.СуммаВычета) КАК СуммаВычетаОборот
	|	ИЗ
	|		РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|			ПО Работники.Физлицо = НДФЛСведенияОДоходах.ФизЛицо
	|	
	|	ГДЕ
	|		НДФЛСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И &парамКонецМесяцаНалоговогоПериода И
	|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) <= &парамПериодРегистрации И
	|		НДФЛСведенияОДоходах.Организация = &парамОрганизация И
	|		НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка13
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ),
	|		НДФЛСведенияОДоходах.ФизЛицо,
	|		НДФЛСведенияОДоходах.КодДохода,
	|		НДФЛСведенияОДоходах.КодВычета) КАК НДФЛОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛОбороты.Физлицо,
	|	НДФЛОбороты.Период,
	|	НДФЛОбороты.КодДохода,
	|	НДФЛОбороты.КодВычета";
    
	Ставка30Текст        = "0.3";
	ТипЗначенияНДФЛТекст = "ЧИСЛО(10, 0)";

	ПериодыСКодамиТекст = 
	"ВЫБРАТЬ
	|	ПериодФизлицо.Период КАК Период,
	|	ПериодФизлицо.Физлицо КАК Физлицо,
	|	ВЫБОР КОГДА (ФизлицаНеРезиденты.ФизЛицо) ЕСТЬ NULL  ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК Резидент,
	|	КодДоходаФизлицо.КодДохода КАК КодДохода
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		НДФЛСведенияОДоходах.ФизЛицо КАК Физлицо
	|	ИЗ
	|		РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|			ПО Работники.Физлицо = НДФЛСведенияОДоходах.ФизЛицо
	|	
	|	ГДЕ
	|		НДФЛСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И &парамКонецМесяцаНалоговогоПериода И
	|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) <= &парамПериодРегистрации И
	|		НДФЛСведенияОДоходах.Организация = &парамОрганизация И
	|		НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка13
	|
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			&парамПериодРегистрации,
	|			Работники.Физлицо
	|		ИЗ
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Работники.ФизЛицо КАК Физлицо
	|			ИЗ
	|				Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК Работники
	|			ГДЕ
	|				Работники.Ссылка = &парамРегистратор) КАК Работники) КАК ПериодФизлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			НДФЛСведенияОДоходах.КодДохода КАК КодДохода,
	|			НДФЛСведенияОДоходах.ФизЛицо КАК Физлицо
	|		ИЗ
	|			РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|				ПО Работники.Физлицо = НДФЛСведенияОДоходах.ФизЛицо
	|		
	|		ГДЕ
	|			НДФЛСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И &парамКонецМесяцаНалоговогоПериода И
	|			НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) <= &парамПериодРегистрации И
	|			НДФЛСведенияОДоходах.Организация = &парамОрганизация И
	|			НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка13) КАК КодДоходаФизлицо
	|		ПО КодДоходаФизлицо.Физлицо = ПериодФизлицо.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ФизлицаНеРезидентыТекст + ") КАК ФизлицаНеРезиденты
	|		ПО ФизлицаНеРезиденты.ФизЛицо = КодДоходаФизлицо.Физлицо";
	
	
	// ДоходыЗаГод 
	//	Поля:
	//		ФизЛицо
	//		Период
	//		Резидент
	//		ОблагаемыйДоходЗаГод
	//
	//	Описание:
	//	Выбирает по всем периодам с начала года сумму дохода нарастающим итогом за год

	ДоходыЗаГодТекст = "
	|ВЫБРАТЬ
	|	НДФЛОбороты.Период КАК Период,
	|	НДФЛОбороты.ФизЛицо КАК ФизЛицо,
	|	НДФЛОбороты.Резидент КАК Резидент,
	|	СУММА(НДФЛОбороты.НалогНерезидента) КАК НалогНерезидента,
	|	СУММА(НДФЛОбороты.ОблагаемыйДоходЗаПериод) КАК ОблагаемыйДоходЗаПериод,
	|	СУММА(НДФЛОбороты.ОблагаемыйДоходЗаГод) КАК ОблагаемыйДоходЗаГод
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		Периоды.Физлицо КАК ФизЛицо,
	|		Периоды.Резидент КАК Резидент,
	|		ВЫБОР КОГДА НДФЛОбороты.Период = Периоды.Период ТОГДА ВЫРАЗИТЬ((НДФЛОбороты.СуммаДоходаОборот - ВЫБОР КОГДА Периоды.Резидент ИЛИ НДФЛОбороты.КодВычета НЕ В (&КодыВычетовРезидентов) ТОГДА НДФЛОбороты.СуммаВычетаОборот ИНАЧЕ 0 КОНЕЦ) * " + Ставка30Текст + " КАК " + ТипЗначенияНДФЛТекст + ") ИНАЧЕ 0 КОНЕЦ КАК НалогНерезидента,
    |       ВЫБОР КОГДА НДФЛОбороты.Период = Периоды.Период ТОГДА НДФЛОбороты.СуммаДоходаОборот - ВЫБОР КОГДА Периоды.Резидент ИЛИ НДФЛОбороты.КодВычета НЕ В (&КодыВычетовРезидентов) ТОГДА НДФЛОбороты.СуммаВычетаОборот ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК ОблагаемыйДоходЗаПериод,
	|		НДФЛОбороты.СуммаДоходаОборот - ВЫБОР КОГДА Периоды.Резидент ИЛИ НДФЛОбороты.КодВычета НЕ В (&КодыВычетовРезидентов) ТОГДА НДФЛОбороты.СуммаВычетаОборот ИНАЧЕ 0 КОНЕЦ КАК ОблагаемыйДоходЗаГод
	|	ИЗ
	|		(" + ПериодыСКодамиТекст + ") КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + ДоходыСКодамиВычетовТекст + ") КАК НДФЛОбороты
	|			ПО (НДФЛОбороты.Период МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) И Периоды.Период) И Периоды.Физлицо = НДФЛОбороты.Физлицо И Периоды.КодДохода = НДФЛОбороты.КодДохода) КАК НДФЛОбороты
    |
	|СГРУППИРОВАТЬ ПО
	|	НДФЛОбороты.Период,
	|	НДФЛОбороты.ФизЛицо,
	|	НДФЛОбороты.Резидент";

	// НДФЛРасчетыСБюджетом
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныйНалог
	//
	//	Описание:
	//	Выбирает исчисленные налоги (приходы по регистру НДФЛРасчетыСБюджетом)
	//  для СписокФизлиц

	НДФЛРасчетыСБюджетомТекст = "
	|ВЫБРАТЬ
	|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	СУММА(НДФЛРасчетыСБюджетом.Налог) КАК ИсчисленныйНалог
	|ИЗ
	|	РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+СписокФизлицТекст+") КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = НДФЛРасчетыСБюджетом.ФизЛицо
	|
	|ГДЕ
	|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода >= &парамНачалоГода И
	|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода <= &парамКонецМесяцаНалоговогоПериода И
	|	НДФЛРасчетыСБюджетом.Организация = &парамОрганизация И
	|	НДФЛРасчетыСБюджетом.Регистратор <> &парамРегистратор И
	|	НДФЛРасчетыСБюджетом.Период <= &парамКонецМесяцаНалоговогоПериода И
	|	НДФЛРасчетыСБюджетом.ВидДвижения = &парамПриход И 
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента = &парамСтавка13 И 
	|	НДФЛРасчетыСБюджетом.ВидСтроки = &парамВидСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода,
	|	НДФЛРасчетыСБюджетом.ФизЛицо";

	// НДФЛРасчетыСБюджетомЗаГод
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныйНалогЗаГод
	//
	//	Описание:
	//	Выбирает исчисленные налоги нарастающим итогом за год

	НДФЛРасчетыСБюджетомЗаГодТекст = 
	"ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР КОГДА (ФизлицаНеРезиденты.ФизЛицо) ЕСТЬ NULL  ТОГДА СУММА(НДФЛРасчетыСБюджетом.ИсчисленныйНалог) ИНАЧЕ МАКСИМУМ(ВЫБОР КОГДА Периоды.Период <> НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода ТОГДА -(99999999) ИНАЧЕ НДФЛРасчетыСБюджетом.ИсчисленныйНалог КОНЕЦ) КОНЕЦ КАК ИсчисленныйНалогДоТекПериода
	|ИЗ
	|	(" + ПериодыТекст + ") КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + НДФЛРасчетыСБюджетомТекст + ") КАК НДФЛРасчетыСБюджетом
	|		ПО (НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) И Периоды.Период) И Периоды.Физлицо = НДФЛРасчетыСБюджетом.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ГражданствоФизЛиц.ФизЛицо КАК ФизЛицо
	|		ИЗ
	|			РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонецГода) КАК ГражданствоФизЛиц
	|		ГДЕ
	|			(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРФ)) КАК ФизлицаНеРезиденты
	|		ПО ФизлицаНеРезиденты.ФизЛицо = Периоды.Физлицо
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	НДФЛРасчетыСБюджетом.ФизЛицо,
	|	ФизлицаНеРезиденты.ФизЛицо";

	// ПрименениеВычетовВОрганизации
	//	Поля:
	//		Физлицо,
	//		Период
	//
	// Описание:
	//	Выбирает список физлиц + периодв в которые применяются стандартные вычеты по 
	//	заданной организации

	ПрименениеВычетовВОрганизацииТекст = 
	"ВЫБРАТЬ
	|	НДФЛПрименениеВычетовСрезПоследних.Физлицо КАК Физлицо,
	|	НДФЛПрименениеВычетовСрезПоследних.Период КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(НДФЛПрименениеВычетов.Период) КАК ПериодСреза,
	|		Периоды.Физлицо КАК Физлицо,
	|		Периоды.Период КАК Период
	|	ИЗ
	|		("+ПериодыТекст+") КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
	|			ПО Периоды.Период >= НДФЛПрименениеВычетов.Период И НДФЛПрименениеВычетов.Физлицо = Периоды.Физлицо
	
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Физлицо,
	|		Периоды.Период) КАК НДФЛПрименениеВычетовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
	|		ПО НДФЛПрименениеВычетов.Период = НДФЛПрименениеВычетовСрезПоследних.ПериодСреза И НДФЛПрименениеВычетов.Физлицо = НДФЛПрименениеВычетовСрезПоследних.Физлицо
	|
	|ГДЕ
	|	НДФЛПрименениеВычетов.Организация = &парамОрганизация";
	
    // НДФЛРазмерВычетов
	// Таблица "НДФЛРазмерВычетов": - таблица это список вычетов, их размер, ограничения по доходам
	// поля:
	//		Период, 
	//		КодВычета,
	//		Размер, 
	//		ОграничениеПоДоходам,
	// Описание:	
	//	Выбираем Из Список периодов (период - год)
	//	Левое соединение с НДФЛРазмерВычетов
	//	по равенству периодов
	// 
	
	// первый год
	НачалоГода = НачалоГода(ПоследнийМесяцНалоговогоПериода);	
	ПериодыТекстПоГодам = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачалоГода,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период";
	Для Сч = Год(ПервыйМесяцНалоговогоПериода)+ 1 По Год(ПоследнийМесяцНалоговогоПериода) Цикл
		НачалоГода = НачалоГода(НачалоГода - 1);
		ПериодыТекстПоГодам = ПериодыТекстПоГодам +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачалоГода,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	
	НДФЛРазмерВычетов =
	"ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	ЕСТЬNULL(НДФЛРазмерВычетов.КодВычета, 0) КАК КодВычета,
	|	НДФЛРазмерВычетов.Размер КАК Размер,
	|	НДФЛРазмерВычетов.ОграничениеПоДоходам КАК ОграничениеПоДоходам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		НДФЛРазмерВычетов.КодВычета КАК КодВычета,
	|		МАКСИМУМ(НДФЛРазмерВычетов.Период) КАК ПериодРегистра
	|	ИЗ
	|		("+ПериодыТекстПоГодам+") КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов КАК НДФЛРазмерВычетов
	|			ПО Периоды.Период >= НДФЛРазмерВычетов.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период,
	|		НДФЛРазмерВычетов.КодВычета) КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов КАК НДФЛРазмерВычетов
	|		ПО НДФЛРазмерВычетов.Период = Периоды.ПериодРегистра И Периоды.КодВычета = НДФЛРазмерВычетов.КодВычета ";

	// ПраваНаВычеты
	//	Поля:
	//		Физлицо
	//		Период
	//		СтандартныеВычетыЛичные
	//		СтандартныеВычетыДетские
	//
	//	Описание:
	//	Выбирает по всем периодам года стандартные вычеты на которые имеет право физлицо

	ПраваНаВычетыТекст = 
	"ВЫБРАТЬ
	|	НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо КАК Физлицо,
	|	НДФЛСтандартныеВычетыФизлицСрезПоследних.Период КАК Период,
	|	НДФЛРазмерВычетовЛичный.ОграничениеПоДоходам КАК ОграничениеПоДоходамЛичные,
	|	НДФЛРазмерВычетовНаДетей.ОграничениеПоДоходам КАК ОграничениеПоДоходамНаДетей,
	|	НДФЛРазмерВычетовНаДетейИнвалидов.ОграничениеПоДоходам КАК ОграничениеПоДоходамНаДетейИнвалидов,
	|	ВЫБОР КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ЕСТЬNULL(НДФЛРазмерВычетовЛичный.Размер, 0) КОНЕЦ КАК СтандартныеВычетыЛичные,
	|	ВЫБОР КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ЕСТЬNULL(НДФЛРазмерВычетовНаДетей.Размер, 0) * ЕСТЬNULL(ВычетыФизлиц.КоличествоДетей, 0) КОНЕЦ КАК СтандартныеВычетыДетские,
	|	ВЫБОР КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ЕСТЬNULL(НДФЛРазмерВычетовНаДетейИнвалидов.Размер, 0) * ЕСТЬNULL(ВычетыФизлиц.КоличествоДетейИнвалидов, 0) КОНЕЦ КАК СтандартныеВычетыДетскиеИнвалидов
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ВычетыФизлиц.Период) КАК ПериодСреза,
	|		Периоды.Физлицо КАК Физлицо,
	|		Периоды.Период КАК Период
	|	ИЗ
	|		(" + ПериодыТекст + ") КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|			ПО ВычетыФизлиц.Период <= Периоды.Период И ВычетыФизлиц.Физлицо = Периоды.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Физлицо,
	|		Периоды.Период) КАК НДФЛСтандартныеВычетыФизлицСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|		ПО ВычетыФизлиц.Период = НДФЛСтандартныеВычетыФизлицСрезПоследних.ПериодСреза И ВычетыФизлиц.Физлицо = НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + НДФЛРазмерВычетов + ") КАК НДФЛРазмерВычетовЛичный
	|		ПО НДФЛРазмерВычетовЛичный.КодВычета = ВычетыФизлиц.КодВычетаЛичный И НДФЛРазмерВычетовЛичный.Период = НАЧАЛОПЕРИОДА(НДФЛСтандартныеВычетыФизлицСрезПоследних.Период, Год)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + НДФЛРазмерВычетов + ") КАК НДФЛРазмерВычетовНаДетей
	|		ПО НДФЛРазмерВычетовНаДетей.КодВычета = ВычетыФизлиц.КодВычетаНаДетей И НДФЛРазмерВычетовНаДетей.Период = НАЧАЛОПЕРИОДА(НДФЛСтандартныеВычетыФизлицСрезПоследних.Период, Год)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + НДФЛРазмерВычетов + ") КАК НДФЛРазмерВычетовНаДетейИнвалидов
	|		ПО НДФЛРазмерВычетовНаДетейИнвалидов.КодВычета = ВычетыФизлиц.КодВычетаНаДетейИнвалидов И НДФЛРазмерВычетовНаДетейИнвалидов.Период = НАЧАЛОПЕРИОДА(НДФЛСтандартныеВычетыФизлицСрезПоследних.Период, Год)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименениеВычетовВОрганизацииТекст + ") КАК ПрименениеВычетов
	|		ПО ПрименениеВычетов.Физлицо = НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо И ПрименениеВычетов.Период = НДФЛСтандартныеВычетыФизлицСрезПоследних.Период";

	// ПрименяемыеВычеты
	// Поля:
	//		Физлицо
	//		Период
	//		ПрименяемыеВычетыЛичные
	//		ПрименяемыеВычетыДетские
	//
	//	Описание:
	//	Выбирает по всем периодам года применяемые стандартные вычеты
	//  с использованием ограничения по доходам

    Если НалоговаяПолитикаНДФЛ = Перечисления.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом Тогда
    
    	ПрименяемыеВычетыТекст = 
    	"ВЫБРАТЬ
    	|	РаботникиОргПраваНаВычеты.Физлицо КАК Физлицо,
    	|	РаботникиОргПраваНаВычеты.Период КАК Период,
    	|	РаботникиОргПраваНаВычеты.ОграничениеПоДоходамЛичные КАК ОграничениеПоДоходамЛичные,
    	|	РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей КАК ОграничениеПоДоходамНаДетей,
    	|	РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетейИнвалидов КАК ОграничениеПоДоходамНаДетейИнвалидов,
    	|	ВЫБОР КОГДА ВЫБОР КОГДА (ДоходыЗаГод.ОблагаемыйДоходЗаГод) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ДоходыЗаГод.ОблагаемыйДоходЗаГод КОНЕЦ + ВЫБОР КОГДА (НДФЛДоходыПредыдущегоМестаРаботы.Размер) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НДФЛДоходыПредыдущегоМестаРаботы.Размер КОНЕЦ <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамЛичные  ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамЛичные  = 0 ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыЛичные  ИНАЧЕ 0 КОНЕЦ КАК ПрименяемыеВычетыЛичные,
    	|	ВЫБОР КОГДА ВЫБОР КОГДА (ДоходыЗаГод.ОблагаемыйДоходЗаГод) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ДоходыЗаГод.ОблагаемыйДоходЗаГод КОНЕЦ + ВЫБОР КОГДА (НДФЛДоходыПредыдущегоМестаРаботы.Размер) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НДФЛДоходыПредыдущегоМестаРаботы.Размер КОНЕЦ <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей = 0 ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские ИНАЧЕ 0 КОНЕЦ КАК ПрименяемыеВычетыДетские,
    	|	ВЫБОР КОГДА ВЫБОР КОГДА (ДоходыЗаГод.ОблагаемыйДоходЗаГод) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ДоходыЗаГод.ОблагаемыйДоходЗаГод КОНЕЦ + ВЫБОР КОГДА (НДФЛДоходыПредыдущегоМестаРаботы.Размер) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НДФЛДоходыПредыдущегоМестаРаботы.Размер КОНЕЦ <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетейИнвалидов ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетейИнвалидов = 0 ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов ИНАЧЕ 0 КОНЕЦ КАК ПрименяемыеВычетыДетскиеИнвалидов
    	|ИЗ
    	|	(" + ПраваНаВычетыТекст + ") КАК РаботникиОргПраваНаВычеты
    	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ДоходыЗаГодТекст + ") КАК ДоходыЗаГод
    	|		ПО ДоходыЗаГод.Период = РаботникиОргПраваНаВычеты.Период И ДоходыЗаГод.ФизЛицо = РаботникиОргПраваНаВычеты.Физлицо
    	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛДоходыПредыдущегоМестаРаботы КАК НДФЛДоходыПредыдущегоМестаРаботы
    	|		ПО (НДФЛДоходыПредыдущегоМестаРаботы.Организация = &парамОрганизация) И НДФЛДоходыПредыдущегоМестаРаботы.МесяцНалоговогоПериода = РаботникиОргПраваНаВычеты.Период И НДФЛДоходыПредыдущегоМестаРаботы.ФизЛицо = РаботникиОргПраваНаВычеты.Физлицо";
    Иначе
        
        ПрименяемыеВычетыТекст = 
    	"ВЫБРАТЬ
    	|	РаботникиОргПраваНаВычеты.Физлицо КАК Физлицо,
    	|	РаботникиОргПраваНаВычеты.Период КАК Период,
    	|	РаботникиОргПраваНаВычеты.ОграничениеПоДоходамЛичные КАК ОграничениеПоДоходамЛичные,
    	|	РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей КАК ОграничениеПоДоходамНаДетей,
    	|	РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетейИнвалидов КАК ОграничениеПоДоходамНаДетейИнвалидов,
    	|	ВЫБОР КОГДА ВЫБОР КОГДА (ДоходыЗаГод.ОблагаемыйДоходЗаГод) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ДоходыЗаГод.ОблагаемыйДоходЗаГод КОНЕЦ + ВЫБОР КОГДА (НДФЛДоходыПредыдущегоМестаРаботы.Размер) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НДФЛДоходыПредыдущегоМестаРаботы.Размер КОНЕЦ <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамЛичные  ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамЛичные  = 0 ТОГДА 
        |ВЫБОР
        |    КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод > РаботникиОргПраваНаВычеты.СтандартныеВычетыЛичные + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
        |        ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыЛичные
        |    КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов > 0
        |    ТОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов
        |    ИНАЧЕ 0
        |КОНЕЦ  ИНАЧЕ 0 КОНЕЦ КАК ПрименяемыеВычетыЛичные,
    	|	ВЫБОР КОГДА ВЫБОР КОГДА (ДоходыЗаГод.ОблагаемыйДоходЗаГод) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ДоходыЗаГод.ОблагаемыйДоходЗаГод КОНЕЦ + ВЫБОР КОГДА (НДФЛДоходыПредыдущегоМестаРаботы.Размер) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НДФЛДоходыПредыдущегоМестаРаботы.Размер КОНЕЦ <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетей = 0 ТОГДА 
        |ВЫБОР
        |    КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод > РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
        |        ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
        |    ИНАЧЕ ДоходыЗаГод.ОблагаемыйДоходЗаПериод
        |КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК ПрименяемыеВычетыДетские,
    	|	ВЫБОР КОГДА ВЫБОР КОГДА (ДоходыЗаГод.ОблагаемыйДоходЗаГод) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ДоходыЗаГод.ОблагаемыйДоходЗаГод КОНЕЦ + ВЫБОР КОГДА (НДФЛДоходыПредыдущегоМестаРаботы.Размер) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НДФЛДоходыПредыдущегоМестаРаботы.Размер КОНЕЦ <= РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетейИнвалидов ИЛИ РаботникиОргПраваНаВычеты.ОграничениеПоДоходамНаДетейИнвалидов = 0 ТОГДА 
        |ВЫБОР
        |    КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод > РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов + РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
        |        ТОГДА РаботникиОргПраваНаВычеты.СтандартныеВычетыДетскиеИнвалидов
        |    КОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские > 0
        |    ТОГДА ДоходыЗаГод.ОблагаемыйДоходЗаПериод - РаботникиОргПраваНаВычеты.СтандартныеВычетыДетские
        |    ИНАЧЕ 0
        |КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК ПрименяемыеВычетыДетскиеИнвалидов
    	|ИЗ
    	|	(" + ПраваНаВычетыТекст + ") КАК РаботникиОргПраваНаВычеты
    	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ДоходыЗаГодТекст + ") КАК ДоходыЗаГод
    	|		ПО ДоходыЗаГод.Период = РаботникиОргПраваНаВычеты.Период И ДоходыЗаГод.ФизЛицо = РаботникиОргПраваНаВычеты.Физлицо
    	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛДоходыПредыдущегоМестаРаботы КАК НДФЛДоходыПредыдущегоМестаРаботы
    	|		ПО (НДФЛДоходыПредыдущегоМестаРаботы.Организация = &парамОрганизация) И НДФЛДоходыПредыдущегоМестаРаботы.МесяцНалоговогоПериода = РаботникиОргПраваНаВычеты.Период И НДФЛДоходыПредыдущегоМестаРаботы.ФизЛицо = РаботникиОргПраваНаВычеты.Физлицо";
    КонецЕсли;

	// ПрименяемыеВычетыЗаГод
	//	Поля:
	//		Физлицо
	//		Период
	//		ВычетыЛичныеЗаГод
	//		ВычетыДетскиеЗаГод
	//
	//	Описание:
	//	Выбирает по всем периодам года применяемые стандартные вычеты нарастающим итогом за год
	//
	ПрименяемыеВычетыЗаГодТекст = 
	"ВЫБРАТЬ
	|	ВычетыПоПериодам.Физлицо КАК Физлицо,
	|	Периоды.Период КАК Период,
	|	ВычетыПоПериодам.ОграничениеПоДоходамЛичные,
	|	ВычетыПоПериодам.ОграничениеПоДоходамНаДетей,
	|	ВычетыПоПериодам.ОграничениеПоДоходамНаДетейИнвалидов,
	|	СУММА(ВЫБОР КОГДА ВычетыПоПериодам.Период = Периоды.Период ТОГДА ВычетыПоПериодам.ПрименяемыеВычетыЛичные ИНАЧЕ 0 КОНЕЦ) КАК ВычетыЛичные,
	|	СУММА(ВЫБОР КОГДА ВычетыПоПериодам.Период = Периоды.Период ТОГДА ВычетыПоПериодам.ПрименяемыеВычетыДетские ИНАЧЕ 0 КОНЕЦ) КАК ВычетыДетские,
	|	СУММА(ВЫБОР КОГДА ВычетыПоПериодам.Период = Периоды.Период ТОГДА ВычетыПоПериодам.ПрименяемыеВычетыДетскиеИнвалидов ИНАЧЕ 0 КОНЕЦ) КАК ВычетыДетскиеИнвалидов,
	|	СУММА(ВЫБОР КОГДА ВычетыПоПериодам.Период < Периоды.Период ТОГДА ВычетыПоПериодам.ПрименяемыеВычетыЛичные ИНАЧЕ 0 КОНЕЦ) КАК ВычетыЛичныеДоТекПериода,
	|	СУММА(ВЫБОР КОГДА ВычетыПоПериодам.Период < Периоды.Период ТОГДА ВычетыПоПериодам.ПрименяемыеВычетыДетские ИНАЧЕ 0 КОНЕЦ) КАК ВычетыДетскиеДоТекПериода,
	|	СУММА(ВЫБОР КОГДА ВычетыПоПериодам.Период < Периоды.Период ТОГДА ВычетыПоПериодам.ПрименяемыеВычетыДетскиеИнвалидов ИНАЧЕ 0 КОНЕЦ) КАК ВычетыДетскиеИнвалидовДоТекПериода
	|ИЗ
	|	(" + ПериодыТекст + ") КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименяемыеВычетыТекст + ") КАК ВычетыПоПериодам
	|		ПО (ВычетыПоПериодам.Период МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) И Периоды.Период) И ВычетыПоПериодам.Физлицо = Периоды.Физлицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ВычетыПоПериодам.Физлицо,
	|	ВычетыПоПериодам.ОграничениеПоДоходамЛичные,
	|	ВычетыПоПериодам.ОграничениеПоДоходамНаДетей,
	|	ВычетыПоПериодам.ОграничениеПоДоходамНаДетейИнвалидов,
	|	Периоды.Период";
	
	// Приходы вычетов помесячные  
	Вычеты312ПоМесяцамТекст = 
	"ВЫБРАТЬ
	|	Остатки.ФизЛицо КАК ФизЛицо,
	|	Остатки.Период КАК Период,
	|	Остатки.Год КАК НалоговыйПериод,
	|	Остатки.РазмерНачальныйОстаток КАК Вычет312Остаток,
	|	0 КАК ПримененныеВычеты312
	|ИЗ
	|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
	|		&парамНачалоГода,
	|		&парамКонецГода,
	|		Год,
	|		,
	|		КодВычетаИмущественный = &КодВычета312
	|           И Физлицо В (" + СписокФизлицТекст + ")
	|		    И Организация = &парамОрганизация) КАК Остатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Обороты.ФизЛицо,
	|	Обороты.Период,
	|	Обороты.Год,
	|	Обороты.РазмерПриход,
	|	Обороты.РазмерРасход
	|ИЗ
	|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
	|		&парамНачалоГода,
	|		&парамКонецГода,
	|		Месяц,
	|		,
	|		КодВычетаИмущественный = &КодВычета312
	|           И Физлицо В (" + СписокФизлицТекст + ")
	|		    И Организация = &парамОрганизация) КАК Обороты";
	
	Вычеты311ПоМесяцамТекст = 
	"ВЫБРАТЬ
	|	Остатки.ФизЛицо КАК ФизЛицо,
	|	Остатки.Период КАК Период,
	|	Остатки.Год КАК НалоговыйПериод,
	|	Остатки.РазмерНачальныйОстаток КАК Вычет311Остаток,
	|	0 КАК ПримененныеВычеты311
	|ИЗ
	|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
	|		&парамНачалоГода,
	|		&парамКонецГода,
	|		Год,
	|		,
	|		КодВычетаИмущественный = &КодВычета311
	|           И Физлицо В (" + СписокФизлицТекст + ")
	|		    И Организация = &парамОрганизация) КАК Остатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Обороты.ФизЛицо,
	|	Обороты.Период,
	|	Обороты.Год,
	|	Обороты.РазмерПриход,
	|	Обороты.РазмерРасход
	|ИЗ
	|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(
	|		&парамНачалоГода,
	|		&парамКонецГода,
	|		Месяц,
	|		,
	|		КодВычетаИмущественный = &КодВычета311
	|           И Физлицо В (" + СписокФизлицТекст + ")
	|		    И Организация = &парамОрганизация) КАК Обороты";
	
	// Приходы вычетов с начала года нарастающим итогом
	Вычеты312Текст = 
	"ВЫБРАТЬ
	|	Периоды.Физлицо КАК Физлицо,
	|	Периоды.Период КАК Период,
	|	СУММА(Обороты.Вычет312Остаток) КАК Вычет312Остаток,
	|	СУММА(Обороты.ПримененныеВычеты312) КАК Вычет312ЗаГод,
	|	СУММА(ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Обороты.Период, МЕСЯЦ) = Периоды.Период ТОГДА Обороты.ПримененныеВычеты312 ИНАЧЕ 0 КОНЕЦ) КАК Вычет312ЗаМесяц
	|ИЗ
	|	(" + ПериодыТекст + ") КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + Вычеты312ПоМесяцамТекст + ") КАК Обороты
	|		ПО Обороты.ФизЛицо = Периоды.Физлицо И Обороты.НалоговыйПериод = ГОД(Периоды.Период) И Обороты.Период МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, Год) И Периоды.Период   
    |
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Физлицо,

	|	Периоды.Период";
	
	Вычеты311Текст = 
	"ВЫБРАТЬ
	|	Периоды.Физлицо КАК Физлицо,
	|	Периоды.Период КАК Период,
	|	СУММА(Обороты.Вычет311Остаток) КАК Вычет311Остаток,
	|	СУММА(Обороты.ПримененныеВычеты311) КАК Вычет311ЗаГод,
	|	СУММА(ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Обороты.Период, МЕСЯЦ) = Периоды.Период ТОГДА Обороты.ПримененныеВычеты311 ИНАЧЕ 0 КОНЕЦ) КАК Вычет311ЗаМесяц
	|ИЗ
	|	(" + ПериодыТекст + ") КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + Вычеты311ПоМесяцамТекст + ") КАК Обороты
	|		ПО Обороты.ФизЛицо = Периоды.Физлицо И Обороты.НалоговыйПериод = ГОД(Периоды.Период) И Обороты.Период МЕЖДУ НАЧАЛОПЕРИОДА(Периоды.Период, Год) И Периоды.Период 
    |
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Физлицо,
	|	Периоды.Период";
	
	ПрогнозНДФЛТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОргВычетыЗаГод.Физлицо,
	|	РаботникиОргВычетыЗаГод.Период,
    |	РаботникиОргВычетыЗаГод.ВычетыЛичныеДоТекПериода КАК ВычетыЛичныеДоТекПериода,
    |	РаботникиОргВычетыЗаГод.ВычетыДетскиеДоТекПериода КАК ВычетыДетскиеДоТекПериода,
    |	РаботникиОргВычетыЗаГод.ВычетыДетскиеИнвалидовДоТекПериода КАК ВычетыДетскиеИнвалидовДоТекПериода,
    |	РаботникиОргВычетыЗаГод.ВычетыЛичные КАК ВычетыЛичные,
    |	РаботникиОргВычетыЗаГод.ВычетыДетские КАК ВычетыДетские,
    |	РаботникиОргВычетыЗаГод.ВычетыДетскиеИнвалидов КАК ВычетыДетскиеИнвалидов,
	|	РаботникиОргВычетыЗаГод.ОграничениеПоДоходамЛичные КАК ОграничениеПоДоходамЛичные,
	|	РаботникиОргВычетыЗаГод.ОграничениеПоДоходамНаДетей КАК ОграничениеПоДоходамНаДетей,
	|	РаботникиОргВычетыЗаГод.ОграничениеПоДоходамНаДетейИнвалидов КАК ОграничениеПоДоходамНаДетейИнвалидов,
	|	НДФЛРасчетыСБюджетомЗаГод.ИсчисленныйНалогДоТекПериода КАК ИсчисленныйНалогДоТекПериода,
    |	ДоходыЗаГод.ОблагаемыйДоходЗаГод КАК ОблагаемыйДоходЗаГод,
    |	ДоходыЗаГод.Резидент КАК Резидент,
	|   Вычеты312.Вычет312Остаток КАК Вычет312Остаток,
	|   Вычеты311.Вычет311Остаток КАК Вычет311Остаток
	|ИЗ
	|	("+ПрименяемыеВычетыЗаГодТекст+") КАК РаботникиОргВычетыЗаГод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ("+НДФЛРасчетыСБюджетомЗаГодТекст+") КАК НДФЛРасчетыСБюджетомЗаГод
	|		ПО НДФЛРасчетыСБюджетомЗаГод.Период = РаботникиОргВычетыЗаГод.Период И НДФЛРасчетыСБюджетомЗаГод.ФизЛицо = РаботникиОргВычетыЗаГод.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ("+ДоходыЗаГодТекст+") КАК ДоходыЗаГод
	|		ПО ДоходыЗаГод.Период = РаботникиОргВычетыЗаГод.Период И ДоходыЗаГод.ФизЛицо = РаботникиОргВычетыЗаГод.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ("+Вычеты312Текст+") КАК Вычеты312
	|		ПО Вычеты312.Период = РаботникиОргВычетыЗаГод.Период И Вычеты312.ФизЛицо = РаботникиОргВычетыЗаГод.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ("+Вычеты311Текст+") КАК Вычеты311
	|		ПО Вычеты311.Период = РаботникиОргВычетыЗаГод.Период И Вычеты311.ФизЛицо = РаботникиОргВычетыЗаГод.Физлицо
	|
	|	ГДЕ
	|		РаботникиОргВычетыЗаГод.Период >= &парамПериодРегистрации";

	Запрос.Текст = ПрогнозНДФЛТекст;
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

// создание структуры - строки прогноза НДФЛ
// используется в РассчитатьЗаписьРегистраРасчета для формирования сведений для расчета доначислений
Функция СоздатьСтрокуПрогнозаНДФЛ()
    СтрокаПрогноза = Новый Структура("
                                    |ИсчисленныйНалогДоТекПериода,
                                    |ОблагаемыйДоходЗаГод,
                                    |Резидент,
                                    |ВычетыЛичныеДоТекПериода,
                                    |ВычетыДетскиеДоТекПериода,
                                    |ВычетыДетскиеИнвалидовДоТекПериода,
                                    |ВычетыЛичные,
                                    |ВычетыДетские,
                                    |ВычетыДетскиеИнвалидов,
                                    |ОграничениеПоДоходамЛичные,
                                    |ОграничениеПоДоходамНаДетей,
                                    |ОграничениеПоДоходамНаДетейИнвалидов,
                                    |Вычет312Остаток,
                                    |Вычет311Остаток,
                                    |НачисленоДоДоначисления,
                                    |НачисленоПриДоначислении,
                                    |НачисленоПослеДоначисления", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    Возврат СтрокаПрогноза;
    
КонецФункции

// заполнение структуры - строки прогноза НДФЛ по данным из выборки по результату запроса
// 
// Парамтеры: 
// СтрокаПрогноза - структура 
// ДанныеДляПрогнозаНДФЛ - спозиционированная выборка по результатам запроса
//
Процедура ЗаполнитьСтрокуПрогнозаНДФЛ(СтрокаПрогноза, ДанныеДляПрогнозаНДФЛ)
    СтрокаПрогноза.ИсчисленныйНалогДоТекПериода = ?(ДанныеДляПрогнозаНДФЛ.ИсчисленныйНалогДоТекПериода = Null, 0, ДанныеДляПрогнозаНДФЛ.ИсчисленныйНалогДоТекПериода);
    СтрокаПрогноза.ОблагаемыйДоходЗаГод = ?(ДанныеДляПрогнозаНДФЛ.ОблагаемыйДоходЗаГод = Null, 0, ДанныеДляПрогнозаНДФЛ.ОблагаемыйДоходЗаГод);
    СтрокаПрогноза.ВычетыЛичныеДоТекПериода = ?(ДанныеДляПрогнозаНДФЛ.ВычетыЛичныеДоТекПериода = Null, 0, ДанныеДляПрогнозаНДФЛ.ВычетыЛичныеДоТекПериода);
    СтрокаПрогноза.ВычетыДетскиеДоТекПериода = ?(ДанныеДляПрогнозаНДФЛ.ВычетыДетскиеДоТекПериода = Null, 0, ДанныеДляПрогнозаНДФЛ.ВычетыДетскиеДоТекПериода);
    СтрокаПрогноза.ВычетыДетскиеИнвалидовДоТекПериода = ?(ДанныеДляПрогнозаНДФЛ.ВычетыДетскиеИнвалидовДоТекПериода = Null, 0, ДанныеДляПрогнозаНДФЛ.ВычетыДетскиеИнвалидовДоТекПериода);
    СтрокаПрогноза.ВычетыЛичные = ?(ДанныеДляПрогнозаНДФЛ.ВычетыЛичные = Null, 0, ДанныеДляПрогнозаНДФЛ.ВычетыЛичные);
    СтрокаПрогноза.ВычетыДетские = ?(ДанныеДляПрогнозаНДФЛ.ВычетыДетские = Null, 0, ДанныеДляПрогнозаНДФЛ.ВычетыДетские);
    СтрокаПрогноза.ВычетыДетскиеИнвалидов = ?(ДанныеДляПрогнозаНДФЛ.ВычетыДетскиеИнвалидов = Null, 0, ДанныеДляПрогнозаНДФЛ.ВычетыДетскиеИнвалидов);
    СтрокаПрогноза.ОграничениеПоДоходамЛичные = ?(ДанныеДляПрогнозаНДФЛ.ОграничениеПоДоходамЛичные = Null, 0, ДанныеДляПрогнозаНДФЛ.ОграничениеПоДоходамЛичные);
    СтрокаПрогноза.ОграничениеПоДоходамНаДетей = ?(ДанныеДляПрогнозаНДФЛ.ОграничениеПоДоходамНаДетей = Null, 0, ДанныеДляПрогнозаНДФЛ.ОграничениеПоДоходамНаДетей);
    СтрокаПрогноза.ОграничениеПоДоходамНаДетейИнвалидов = ?(ДанныеДляПрогнозаНДФЛ.ОграничениеПоДоходамНаДетейИнвалидов = Null, 0, ДанныеДляПрогнозаНДФЛ.ОграничениеПоДоходамНаДетейИнвалидов);
    СтрокаПрогноза.Вычет312Остаток = ?(ДанныеДляПрогнозаНДФЛ.Вычет312Остаток = Null, 0, ДанныеДляПрогнозаНДФЛ.Вычет312Остаток);
    СтрокаПрогноза.Вычет311Остаток = ?(ДанныеДляПрогнозаНДФЛ.Вычет311Остаток = Null, 0, ДанныеДляПрогнозаНДФЛ.Вычет311Остаток);
    
КонецПроцедуры

// позиционирование по физлицу выборки с данными для прогноза НДФЛ 
// Параметры:
//  ДанныеДляПрогнозаНДФЛ - выборка
//  Физлицо
//
Функция ПозиционироватьДанныеПрогнозаНДФЛ(ДанныеДляПрогнозаНДФЛ, Физлицо)
    СтруктураПоиска = Новый Структура("Физлицо");
    СтруктураПоиска.Физлицо = Физлицо;
    Если ДанныеДляПрогнозаНДФЛ.НайтиСледующий(СтруктураПоиска) Тогда
        Возврат Истина;
    Иначе
        ДанныеДляПрогнозаНДФЛ.Сбросить();
        Если ДанныеДляПрогнозаНДФЛ.НайтиСледующий(СтруктураПоиска) Тогда
            Возврат Истина;
        КонецЕсли;
    КонецЕсли;
    Возврат Ложь;
КонецФункции

// проверка того, что способ расчета относится к договорам
Функция ЭтоДоговор(СпособРасчета) Экспорт
    Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой; 
КонецФункции

// проверка того, что показатель схемы мотивации является предопределенным показателем 
// не требующим ввода (т.е. рассчитываемым автоматически)
Функция ЭтоПоказательСАвторасчетом(Показатель) Экспорт
    Возврат     Показатель = Справочники.ПоказателиСхемМотивации.ВремяВДнях 
            или Показатель = Справочники.ПоказателиСхемМотивации.ВремяВЧасах
            или Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВДнях
            или Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах
            или Показатель = Справочники.ПоказателиСхемМотивации.СдельнаяВыработка
            или Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза			
            или Показатель = Справочники.ПоказателиСхемМотивации.Стаж			
			или Показатель = Справочники.ПоказателиСхемМотивации.Нуль;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТАЖЕМ
// 

// проверка того, что способ расчета относится к расчетам от стажа по тарифным ставкам
Функция ЭтоРасчетОтСтажаПоТарифу(СпособРасчета) Экспорт
    Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке 
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке;
КонецФункции

// проверка того, что способ расчета относится к расчетам от стажа
Функция ЭтоРасчетОтСтажа(СпособРасчета) Экспорт
    Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке 
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом;
КонецФункции

// Проверяет является ли способ расчета тем способом, которому требуется 
// информация о проценте надбавки за северный стаж
//
// Параметры:
//  СпособРасчета - ПеречислениеСсылка.СпособыРасчетаОплатыТруда
//
Функция ЭтоРасчетСеверныхНадбавок(СпособРасчета) Экспорт
    Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка Тогда
        Возврат Истина;
    КонецЕсли;
    Возврат Ложь;
КонецФункции

// ПолучитьПроцентыСевернойНадбавкиЗаПериод
// Предназначена для получения информации о процентах северной надбавки и датах начала их действия 
// за определенный период
// Параметры:
//  ДатаРегистрации - дата регистрации записи о стаже
//  ПорядокНачисления - порядок начисления северной надбавки - ПеречислениеСсылка.ПорядокНачисленияСеверныхНадбавок
//  НачальныйПроцент - процент на дату ДатаРегистрации
//  Месяцев - количество месяцев стажа на дату ДатаРегистрации
//  Дней - количество дней стажа на дату ДатаРегистрации
//  ДатаНачала - начало периода, в котором мы получаем сведения о процентах надбавки
//  ДатаОкончания - конец периода, в котором мы получаем сведения о процентах надбавки
//
// Возвращаемое значение:
//  Массив структур вида "Период, Процент"
//
Функция ПолучитьПроцентыСевернойНадбавкиЗаПериод(ДатаРегистрации, ПорядокНачисления, 
                        НачальныйПроцент, Месяцев, Дней, ДатаНачала, ДатаОкончания) Экспорт
                        
    мДлинаДня = 60*60*24;
    ВозврМассив = Новый Массив;
    
    // в общем случае шкала может состоять из двух участков
    РазмерПериода1 = 0;
    РазмерПрироста1 = 0;
    Ограничение1 = 0;
    РазмерПериода2 = 0;
    РазмерПрироста2 = 0;
    Ограничение2 = 0;
    Если      ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа1Льготная Тогда
        РазмерПериода1 = 6;
        РазмерПрироста1 = 20;
        Ограничение1 = 60;
        РазмерПериода2 = 6;
        РазмерПрироста2 = 10;
        Ограничение2 = 100;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа1Обычная Тогда
        РазмерПериода1 = 6;
        РазмерПрироста1 = 10;
        Ограничение1 = 100;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа2Льготная Тогда
        РазмерПериода1 = 6;
        РазмерПрироста1 = 20;
        Ограничение1 = 60;
        РазмерПериода2 = 12;
        РазмерПрироста2 = 20;
        Ограничение2 = 80;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа2Обычная Тогда
        РазмерПериода1 = 6;
        РазмерПрироста1 = 10;
        Ограничение1 = 60;
        РазмерПериода2 = 12;
        РазмерПрироста2 = 10;
        Ограничение2 = 80;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа3Льготная Тогда
        РазмерПериода1 = 6;
        РазмерПрироста1 = 10;
        Ограничение1 = 50;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа3Обычная Тогда
        РазмерПериода1 = 12;
        РазмерПрироста1 = 10;
        Ограничение1 = 50;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа4Льготная Тогда
        РазмерПериода1 = 6;
        РазмерПрироста1 = 10;
        Ограничение1 = 30;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа4Обычная Тогда
        РазмерПериода1 = 12;
        РазмерПрироста1 = 10;
        Ограничение1 = 10;
        РазмерПериода2 = 24;
        РазмерПрироста2 = 10;
        Ограничение2 = 30;
	Иначе // порядок не указан
        Элемент = Новый Структура("Период, Процент", ДатаНачала, 0);
        ВозврМассив.Добавить(Элемент);
		Возврат ВозврМассив;
	КонецЕсли;
    
    ДатаОтсчета = ДатаРегистрации - Дней * мДлинаДня;
    ПрошлоМесяцевПослеДатыОтсчета = (Год(ДатаНачала) - Год(ДатаОтсчета)) * 12 + Месяц(ДатаНачала) - Месяц(ДатаОтсчета) -
        ?(День(ДатаНачала) >= День(ДатаОтсчета), 0, 1);
    ПрошлоМесяцев = (Год(ДатаНачала) - Год(ДатаОтсчета)) * 12 + Месяц(ДатаНачала) - Месяц(ДатаОтсчета) -
        ?(День(ДатаНачала) >= День(ДатаОтсчета), 0, 1) + Месяцев;
    Если РазмерПериода2 = 0 Тогда    
        // у шкалы только один участок
        ПрошлоПериодов = Цел(ПрошлоМесяцев / РазмерПериода1);
        ОстатокМесяцев = ПрошлоМесяцев - ПрошлоПериодов * РазмерПериода1;
        Процент = Мин(НачальныйПроцент + ПрошлоПериодов * РазмерПрироста1, Ограничение1);
        Элемент = Новый Структура("Период, Процент", ДатаНачала, Процент);
        ВозврМассив.Добавить(Элемент);
        ДатаСменыПроцента = ДобавитьМесяц(ДатаОтсчета, ПрошлоМесяцевПослеДатыОтсчета + РазмерПериода1 - ОстатокМесяцев);
        Пока ДатаСменыПроцента < ДатаОкончания Цикл
            Процент = Мин(Процент + РазмерПрироста1, Ограничение1);
            Элемент = Новый Структура("Период, Процент", ДатаСменыПроцента, Процент);
            ВозврМассив.Добавить(Элемент);
            Если Процент = Ограничение1 Тогда
                Прервать;
            КонецЕсли;
            ДатаСменыПроцента = ДобавитьМесяц(ДатаСменыПроцента, РазмерПериода1);
        КонецЦикла;
    ИначеЕсли НачальныйПроцент >= Ограничение1 Тогда
        // используем уже второй участок шкалы
        ПрошлоПериодов = Цел(ПрошлоМесяцев / РазмерПериода2);
        Процент = Мин(НачальныйПроцент + ПрошлоПериодов * РазмерПрироста2, Ограничение2);
        Элемент = Новый Структура("Период, Процент", ДатаНачала, Процент);
        ВозврМассив.Добавить(Элемент);
        ДатаСменыПроцента = ДобавитьМесяц(ДатаОтсчета, (ПрошлоПериодов + 1) * РазмерПериода2);
        Пока ДатаСменыПроцента < ДатаОкончания Цикл
            Процент = Мин(Процент + РазмерПрироста2, Ограничение2);
            Элемент = Новый Структура("Период, Процент", ДатаСменыПроцента, Процент);
            ВозврМассив.Добавить(Элемент);
            Если Процент = Ограничение2 Тогда
                Прервать;
            КонецЕсли;
            ДатаСменыПроцента = ДобавитьМесяц(ДатаСменыПроцента, РазмерПериода1);
        КонецЦикла;
    Иначе
        // два участка у шкалы
        ДатаСменыПроцента = ДобавитьМесяц(ДатаОтсчета, - Месяцев);
        Процент = НачальныйПроцент;
        РазмерПрироста = РазмерПрироста1;
        РазмерПериода = РазмерПериода1;
        Ограничение = Ограничение1;
		Если ДатаСменыПроцента >= ДатаНачала И ДатаСменыПроцента <= ДатаОкончания Тогда
			Элемент = Новый Структура("Период, Процент", ДатаНачала, Макс(Процент - РазмерПрироста,0));
			ВозврМассив.Добавить(Элемент);
			Элемент = Новый Структура("Период, Процент", ДатаСменыПроцента, НачальныйПроцент);
			ВозврМассив.Добавить(Элемент);
		Иначе
			Пока ДатаСменыПроцента < ДатаОкончания Цикл
				Если ДатаСменыПроцента = ДатаНачала Тогда
					Элемент = Новый Структура("Период, Процент", ДатаСменыПроцента, Процент);
					ВозврМассив.Добавить(Элемент);
					Прервать;
				ИначеЕсли ДатаСменыПроцента > ДатаНачала Тогда
					Элемент = Новый Структура("Период, Процент", ДатаНачала, Макс(Процент - РазмерПрироста,НачальныйПроцент));
					ВозврМассив.Добавить(Элемент);
					Элемент = Новый Структура("Период, Процент", ДатаСменыПроцента, Процент);
					ВозврМассив.Добавить(Элемент);
					Прервать;
				КонецЕсли;
				Процент = Процент + РазмерПрироста;
				Если Процент > Ограничение Тогда
					Если Процент > Ограничение2 Тогда 
						Процент = Ограничение2;
						Прервать;
					Иначе
						// если уже перешли на второй участок...
						// сначала отменим увеличение процента
						Процент = Процент - РазмерПрироста;
						// сменим параметры участка шкалы
						РазмерПрироста = РазмерПрироста2;
						РазмерПериода = РазмерПериода2;
						Ограничение = Ограничение2;
						// установим процент с использованием новых параметров
						Процент = Процент + РазмерПрироста;
					КонецЕсли;
				КонецЕсли;
				ДатаСменыПроцента = ДобавитьМесяц(ДатаСменыПроцента, РазмерПериода);
				Если ДатаСменыПроцента > ДатаОкончания Тогда
					// если это уже за пределами периода - отменим увеличение процента
					Процент = Процент - РазмерПрироста;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			// если так ничего и не добавили - вернем последнее значение процента на дату начала периода
			Если ВозврМассив.Количество() = 0 Тогда
				Элемент = Новый Структура("Период, Процент", ДатаНачала, Процент);
				ВозврМассив.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
    КонецЕсли;
        
    Возврат ВозврМассив;
    
КонецФункции

// Функция выбирает стажи по физлицу из ТЧ "Стажи" справочника "Физические лица"
//
// Параметры
//  Физлицо		– СправочникСсылка.ФизическиеЛица – работник, которому вычисляется стаж
//  ДопУсловие	– Строка – строка дополнительного условия в запрос
//  ВидСтажа	– СправочникСсылка.ВидыСтажа - значение параметра для дополнительного условия
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса   – выборка со стажами работника
//
Функция ВыбратьСтажиРаботника(Физлицо, ДопУсловие = Неопределено, ВидСтажа = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 4
	|	ФизическиеЛицаСтажи.ВидСтажа,
	|	ФизическиеЛицаСтажи.ВидСтажа.Наименование КАК Наименование,
	|	ФизическиеЛицаСтажи.ДатаОтсчета,
	|	ФизическиеЛицаСтажи.РазмерМесяцев,
	|	ФизическиеЛицаСтажи.РазмерДней
	|ИЗ
	|	Справочник.ФизическиеЛица.Стажи КАК ФизическиеЛицаСтажи
	|ГДЕ
	|	ФизическиеЛицаСтажи.Ссылка = &Физлицо";
	
	Если ДопУсловие <> Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + " " + ДопУсловие;
		
		Если ВидСтажа <> Неопределено Тогда
			
			Запрос.УстановитьПараметр("ВидСтажа", ВидСтажа);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Возврат Запрос.Выполнить().Выбрать()
	
КонецФункции // ВыбратьСтажиРаботника()

// Функция определяет процента оплаты БЛ в зависимости от стажа работника
//
// Параметры: 
//  Дата - Дата, обычно текущая дата
//  ДатаНачала - Дата, дата на которую формируется стаж - дата начала события
//  Физлицо - Справочник.ФизическиеЛица, физ. лицо для которого определяется стаж
//  Организация - Справочник.Организации, организация (головная), где работает физлицо.
//
// Возвращаемое значение:
//  число - процент оплаты Больничного листа
//
Функция ЗаполнитьПроцентОплатыОтСтажа(Дата, ДатаНачала, Физлицо, Организация) Экспорт

	Если ДатаНачала >= ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006() Тогда
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
		|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения
		|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
		|	КОНЕЦ КАК ПричинаИзмененияСостояния
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|		&ДатаАктуальности,
		|		Сотрудник.Физлицо = &Физлицо
		|			И Организация = &ГоловнаяОрганизация
		|			И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацийСрезПоследних
		|ГДЕ
		|	ВЫБОР
		|			КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
		|					И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения
		|			ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
		|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаАктуальности",			ДатаНачала);
		Запрос.УстановитьПараметр("Физлицо",					Физлицо);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация",		Организация);
		
		УжеНеРаботает = Запрос.Выполнить().Пустой(); // в рег-ре РаботникиОрганизаций нет других записей, кроме как об увольнении
		
	Иначе
		УжеНеРаботает = Ложь; // не проверяется	
	КонецЕсли;
	Если УжеНеРаботает Тогда
		Возврат 60;
	Иначе
		
		ДатаСтажа = ПолучитьНачалоСтажаДляБольничногоЛиста(ДатаНачала, Физлицо, Организация);
		Если НЕ ЗначениеЗаполнено(ДатаСтажа) Тогда
			ДатаСтажа = Дата;
		КонецЕсли;
		
		Лет	= 0;
		ОбщегоНазначения.РазобратьРазностьДат(ДатаНачала, ДатаСтажа, Лет);
		
		Возврат ?(Лет >= 8, 100,?(Лет >= 5, 80, 60));
	КонецЕсли;
	
КонецФункции

// определяет начало непрерывного стажа физлица
//
// Параметры
//  ДатаНачала - Дата, дата на которую формируется стаж
//  Физлицо - Справочник.ФизическиеЛица, физ. лицо для которого определяется стаж
//  Организация - Справочник.Организации, организация, где работает физлицо.
//
// Возвращаемое значение:
//  дата - дата начала непрерывного стажа
//
Функция ПолучитьНачалоСтажаДляБольничногоЛиста(ДатаНачала, Физлицо, Организация, ВидСтажа = Неопределено) Экспорт
	
	Если ВидСтажа = Неопределено Тогда
		ВидСтажа = ?(ДатаНачала < ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006(),Справочники.ВидыСтажа.НепрерывныйСтаж,Справочники.ВидыСтажа.СтраховойСтажДляБЛ);
	КонецЕсли;
	
	ВыборкаПоСтажу = ВыбратьСтажиРаботника(Физлицо, "И ФизическиеЛицаСтажи.ВидСтажа = &ВидСтажа", ВидСтажа);
	Если ВыборкаПоСтажу.Следующий() Тогда
	
		ДатаСтажа = ДобавитьМесяц(ВыборкаПоСтажу.ДатаОтсчета, - ВыборкаПоСтажу.РазмерМесяцев) - ВыборкаПоСтажу.РазмерДней*86400;
		
	Иначе // стаж не введен, возьмем дату последнего приема на работу.
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Период), ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Период
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|		&ДатаАктуальности,
		|		Сотрудник.Физлицо = &Физлицо
		|			И Организация = &ГоловнаяОрганизация
		|			И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|			И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)) КАК РаботникиОрганизацийСрезПоследних";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаАктуальности",			ДатаНачала);
		Запрос.УстановитьПараметр("Физлицо",					Физлицо);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация",		Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаСтажа = Выборка.Период
		Иначе 
			ДатаСтажа = Дата(1,1,1)
		КонецЕсли; 
		
	КонецЕсли; 
	
    Возврат ДатаСтажа
	
КонецФункции // ПолучитьНачалоСтажаДляБольничногоЛиста()

////////////////////////////////////////////////////////////////////////////////
// ОБСЛУЖИВАНИЕ ПЕРЕРАСЧЕТОВ
// 

// процедура выполняет дописывание наборов записей перерасчетов основных начислений по 
// переданной выборке
// выборка должна содержать уникальные комбинации Физлицо+Регистратор (т.е. ОбъектПерерасчета)
// которых еще нет в таблице перерасчета
Процедура ДописатьПерерасчетыОсновныхНачислений(Выборка) Экспорт
	Наборы = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Набор = Наборы[Выборка.Регистратор];
		Если Набор = Неопределено Тогда
			Набор = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
			Набор.Отбор.ОбъектПерерасчета.Значение = Выборка.Регистратор;
			Набор.Отбор.ОбъектПерерасчета.Использование = Истина;
			Наборы.Вставить(Выборка.Регистратор, Набор);
		КонецЕсли;
		НоваяСтрока = Набор.Добавить();
		НоваяСтрока.ОбъектПерерасчета	= Выборка.Регистратор;
		НоваяСтрока.ФизЛицо				= Выборка.Физлицо;
		НоваяСтрока.Организация			= Выборка.Организация;
	КонецЦикла;
	Для Каждого ЭлементСтруктуры Из Наборы Цикл
		// дописываем набор записей по данному объекту перерасчета
		ЭлементСтруктуры.Значение.Записать(Ложь);
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьТаблицуПерерасчетов(Ссылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Перерасчеты.ОбъектПерерасчета КАК ОбъектПерерасчетаОсновные,
	|	ПерерасчетыДоп.ОбъектПерерасчета КАК ОбъектПерерасчетаДополнительные
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчеты
	|		ПО Начисления.СторнируемыйДокумент = Перерасчеты.ОбъектПерерасчета
	|			И Начисления.ФизЛицо = Перерасчеты.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК ПерерасчетыДоп
	|		ПО Начисления.СторнируемыйДокумент = ПерерасчетыДоп.ОбъектПерерасчета
	|			И Начисления.ФизЛицо = ПерерасчетыДоп.ФизЛицо
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|	И Начисления.Сторно";
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаОбъектПерерасчета = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОбъектПерерасчета.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаОбъектПерерасчета.ОбъектПерерасчетаОсновные) Тогда
			НаборЗаписейПерерасчета = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = ВыборкаОбъектПерерасчета.ОбъектПерерасчетаОсновные;
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Использование = Истина;
			НаборЗаписейПерерасчета.Записать();	
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаОбъектПерерасчета.ОбъектПерерасчетаДополнительные) Тогда
			НаборЗаписейПерерасчета = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = ВыборкаОбъектПерерасчета.ОбъектПерерасчетаДополнительные;
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Использование = Истина;
			НаборЗаписейПерерасчета.Записать();	
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Перерасчеты.ОбъектПерерасчета КАК ОбъектПерерасчетаОсновные,
	|	ПерерасчетыДоп.ОбъектПерерасчета КАК ОбъектПерерасчетаДополнительные
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчеты
	|		ПО Начисления.СторнируемыйДокумент = Перерасчеты.ОбъектПерерасчета
	|			И Начисления.ФизЛицо = Перерасчеты.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК ПерерасчетыДоп
	|		ПО Начисления.СторнируемыйДокумент = ПерерасчетыДоп.ОбъектПерерасчета
	|			И Начисления.ФизЛицо = ПерерасчетыДоп.ФизЛицо
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|	И Начисления.Сторно";
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаОбъектПерерасчета = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОбъектПерерасчета.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаОбъектПерерасчета.ОбъектПерерасчетаОсновные) Тогда
			НаборЗаписейПерерасчета = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = ВыборкаОбъектПерерасчета.ОбъектПерерасчетаОсновные;
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Использование = Истина;
			НаборЗаписейПерерасчета.Записать();	
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаОбъектПерерасчета.ОбъектПерерасчетаДополнительные) Тогда
			НаборЗаписейПерерасчета = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = ВыборкаОбъектПерерасчета.ОбъектПерерасчетаДополнительные;
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Использование = Истина;
			НаборЗаписейПерерасчета.Записать();	
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Возвращает список кодов дохода, не требующих ни ввода вычетов, ни исчисления налога по ставкам 9% или 35%
//
// Параметры
//  нет
//
// Возвращаемое значение:
//  список значений, содержащий ссылки на предопределенные эл-ты спр-ка ДоходыНДФЛ 
//
Функция ПолучитьСписокКодовДоходаОсновныхНачислений() Экспорт 

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоходыНДФЛ.Ссылка,
	|	ДоходыНДФЛ.Представление
	|ИЗ
	|	Справочник.ДоходыНДФЛ КАК ДоходыНДФЛ
	|ГДЕ
	|	(НЕ ДоходыНДФЛ.Ссылка В (&ЧастичноОблагаемыеДоходы))");
	//|	И ДоходыНДФЛ.СтавкаНалогообложенияРезидента = &СтавкаНалогообложенияРезидента

	
	СписокКодовДохода = Новый Массив;
	//РФ
	//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2201);
	//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2202);
	//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2203);
	//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2204);
	//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2205);
	//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2206);
	//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2207);
	//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2208);
	//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2209);
	//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2761);
	//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2720);
	//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2730);
	//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2740);
	//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2760);
	//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2770);
	//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2790);
	//Запрос.УстановитьПараметр("СтавкаНалогообложенияРезидента", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);
	
	//РБ
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код301);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код302);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код303);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код304);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код305);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код306);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код307);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код308);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код309);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код310);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код311);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код312);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код313);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код314);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код315);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код12117);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код12124);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код12119);

	Запрос.УстановитьПараметр("ЧастичноОблагаемыеДоходы",СписокКодовДохода);

	СписокКодовДохода = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокКодовДохода.Добавить(Выборка.Ссылка,Выборка.Представление);
	КонецЦикла;
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.ПустаяСсылка(),"");
	Возврат СписокКодовДохода;
	
КонецФункции // ПолучитьСписокКодовДоходаТребующихДополнительнойОбработки()

// Возвращает список кодов дохода, облагаемых по ставке 13%
//
// Параметры
//  нет
//
// Возвращаемое значение:
//  список значений, содержащий ссылки на предопределенные эл-ты спр-ка ДоходыНДФЛ 
//
Функция ПолучитьСписокКодовДоходаДополнительныхНачислений() Экспорт 

	СписокКодовДохода = Новый СписокЗначений;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоходыНДФЛ.Ссылка,
	|	ДоходыНДФЛ.Представление
	|ИЗ
	|	Справочник.ДоходыНДФЛ КАК ДоходыНДФЛ");
	//|ГДЕ
	//|	ДоходыНДФЛ.СтавкаНалогообложенияРезидента = &СтавкаНалогообложенияРезидента");
	//					  
	//Запрос.УстановитьПараметр("СтавкаНалогообложенияРезидента",Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);					  
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокКодовДохода.Добавить(Выборка.Ссылка,Выборка.Представление);
	КонецЦикла;
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.ПустаяСсылка(),"");
	
	Возврат СписокКодовДохода
	
КонецФункции // ПолучитьСписокКодовДоходаДопНачисленийТребующихДополнительнойОбработки()

// Процедура выполняет дописывание наборов записей перерасчетов в
// регистр сведений ЗаполнениеПлановыхНачислений
//
Процедура ДописатьПерерасчетыВЗаполнениеПлановыхНачислений(Выборка) Экспорт
	
	Наборы = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Набор = Наборы[Выборка.ОбъектЗаполнения];
		Если Набор = Неопределено Тогда
			Набор = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
			Набор.Отбор.ОбъектЗаполнения.Значение = Выборка.ОбъектЗаполнения;
			Набор.Отбор.ОбъектЗаполнения.Использование = Истина;
			Наборы.Вставить(Выборка.ОбъектЗаполнения, Набор);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Набор.Добавить(),Выборка);
	КонецЦикла;
		
	Для Каждого ЭлементыСтруктуры Из Наборы Цикл
		ЭлементыСтруктуры.Значение.Записать(Ложь);
	КонецЦикла;
	
КонецПроцедуры // ДописатьПерерасчетыВЗаполнениеПлановыхНачислений()

// Удаляем записи перезаполнений как по самому документу, так и по исходному документу,
// если переданный документ является исправлением
//
// Параметры
//  ДокументСсылка - ссылка на документ, для которого требуется удалить записи рег-ра перезаполнений
//  
Процедура УдалитьСведенияОПерезаполненииДокумента(ДокументСсылка, СотрудникиДокумента = Неопределено, ТолькоПоИсправленнымДокументам = Ложь) Экспорт
	
	НаборПерезаполнения = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
	НаборПерезаполнения.Отбор.ОбъектЗаполнения.Использование = Истина;
	НаборПерезаполнения.Отбор.ОбъектЗаполнения.ВидСравнения = ВидСравнения.Равно;
	
	Если НаборПерезаполнения.Отбор.ОбъектЗаполнения.ТипЗначения.СодержитТип(ТипЗнч(ДокументСсылка)) Тогда
		
		НаборСотрудниковПерезаполнения = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
		НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.Использование = Истина;
		НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.ВидСравнения = ВидСравнения.Равно;
		
		МассивИсправленныхДокументов = Новый Массив;
		
		// проверим, является ли переданный документ чьим-нибудь исправлением
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыИсправления.ПерерассчитываемыйДокумент КАК ОбъектПерерасчета
		|ИЗ
		|	Документ." + ДокументСсылка.Метаданные().Имя + " КАК ДокументыИсправления
		|ГДЕ
		|	ДокументыИсправления.Ссылка = &Исправление";
		Запрос.УстановитьПараметр("Исправление", ДокументСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
		
		Если ЗначениеЗаполнено(ОбъектПерерасчета) Тогда
			
			// выберем исправленных сотрудников - соответствующие им записи перерасчетов надо будет также удалить
			ЗапросСотрудников = Новый Запрос;
			ЗапросСотрудников.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаполнениеПлановыхНачислений.Сотрудник
			|ИЗ
			|	РегистрСведений.ЗаполнениеПлановыхНачислений КАК ЗаполнениеПлановыхНачислений
			|ГДЕ
			|	ЗаполнениеПлановыхНачислений.ОбъектЗаполнения = &ОбъектЗаполнения
			|	И (&ПоВсемСотрудникам
			|			ИЛИ ЗаполнениеПлановыхНачислений.Сотрудник В (&Сотрудники))";
			ЗапросСотрудников.УстановитьПараметр("ОбъектЗаполнения", ДокументСсылка);
			ЗапросСотрудников.УстановитьПараметр("Сотрудники", СотрудникиДокумента);
			ЗапросСотрудников.УстановитьПараметр("ПоВсемСотрудникам", СотрудникиДокумента = Неопределено);
			МассивСотрудников = ЗапросСотрудников.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
			
			// выявим все исправленные документы
			Пока ЗначениеЗаполнено(ОбъектПерерасчета) Цикл
				
				МассивИсправленныхДокументов.Добавить(ОбъектПерерасчета);
				Запрос.УстановитьПараметр("Исправление", ОбъектПерерасчета);
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ТолькоПоИсправленнымДокументам Тогда 
			Если СотрудникиДокумента = Неопределено Тогда // удалим все записи перезаполнений по самому документу
				НаборПерезаполнения.Отбор.ОбъектЗаполнения.Значение = ДокументСсылка;
				НаборПерезаполнения.Записать(Истина);
			Иначе // удалим записи перезаполнений по переданным сотрудникам
				НаборПерезаполнения.Отбор.ОбъектЗаполнения.Значение = ДокументСсылка;
				НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.Значение = ДокументСсылка;
				НаборПерезаполнения.Прочитать();
				Для каждого Запись Из НаборПерезаполнения Цикл
					Если СотрудникиДокумента.Найти(Запись.Сотрудник) = Неопределено Тогда
						ЗаполнитьЗначенияСвойств(НаборСотрудниковПерезаполнения.Добавить(),Запись);
					КонецЕсли;
				КонецЦикла;
				НаборСотрудниковПерезаполнения.Записать(Истина);
				НаборСотрудниковПерезаполнения.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
		// в переданном документе сотрудникам
		Для каждого Значение Из МассивИсправленныхДокументов Цикл
			НаборПерезаполнения.Отбор.ОбъектЗаполнения.Значение = Значение;
			НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.Значение = Значение;
			НаборПерезаполнения.Прочитать();
			Для каждого Запись Из НаборПерезаполнения Цикл
				Если МассивСотрудников.Найти(Запись.Сотрудник) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НаборСотрудниковПерезаполнения.Добавить(),Запись);
				КонецЕсли;
			КонецЦикла;
			НаборСотрудниковПерезаполнения.Записать(Истина);
			НаборСотрудниковПерезаполнения.Очистить();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляем записи перерасчетов как по самому документу, так и по исходному документу,
// если переданный документ является исправлением
//
// Параметры
//  ДокументСсылка - ссылка на документ, для которого требуется удалить записи таблиц перерасчетов
//  
Процедура УдалитьСведенияОПерерасчетеДокумента(ДокументСсылка, ТолькоПоИсправленнымДокументам = Ложь) Экспорт
	
	ПерерасчетыПоДокументам = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
	ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
	
	ДопПерерасчетыПоДокументам = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
	ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
	ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
	
	СредПерерасчетыПоДокументам = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
	СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
	
	МассивИсправленныхДокументов = Новый Массив;
	ТипРегистратора = ТипЗнч(ДокументСсылка);
	Если ТипРегистратора <> Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда
		
		// проверим, является ли переданный документ чьим-нибудь исправлением
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыИсправления.ПерерассчитываемыйДокумент КАК ОбъектПерерасчета
		|ИЗ
		|	Документ." + ДокументСсылка.Метаданные().Имя + " КАК ДокументыИсправления
		|ГДЕ
		|	ДокументыИсправления.Ссылка = &Исправление";
		Запрос.УстановитьПараметр("Исправление", ДокументСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
		
		Если ЗначениеЗаполнено(ОбъектПерерасчета) Тогда
			
			ПерерасчетыФизлицПоДокументам = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
			ПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
			ПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
			
			ДопПерерасчетыФизлицПоДокументам = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
			ДопПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
			ДопПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
			
			СредПерерасчетыФизлицПоДокументам = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
			СредПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
			СредПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
			
			// выберем исправленных физлиц - соответствующие им записи перерасчетов надо будет также удалить
			ЗапросФизлиц = Новый Запрос;
			ЗапросФизлиц.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДополнительныеНачисленияРаботниковОрганизаций.ФизЛицо
			|ИЗ
			|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
			|ГДЕ
			|	ДополнительныеНачисленияРаботниковОрганизаций.Регистратор = &Регистратор
			|	И ДополнительныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент = &ИсходныйДокумент
			|	И ДополнительныеНачисленияРаботниковОрганизаций.Сторно
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
			|ГДЕ
			|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &Регистратор
			|	И ОсновныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент = &ИсходныйДокумент
			|	И ОсновныеНачисленияРаботниковОрганизаций.Сторно
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РасчетСреднегоЗаработка.ФизЛицо
			|ИЗ
			|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|ГДЕ
			|	РасчетСреднегоЗаработка.Регистратор = &Регистратор";
			ЗапросФизлиц.УстановитьПараметр("Регистратор", ДокументСсылка);
			ЗапросФизлиц.УстановитьПараметр("ИсходныйДокумент", ОбъектПерерасчета);
			МассивФизлиц = ЗапросФизлиц.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
			
			// выявим все исправленные документы
			Пока ЗначениеЗаполнено(ОбъектПерерасчета) Цикл
				
				МассивИсправленныхДокументов.Добавить(ОбъектПерерасчета);
				Запрос.УстановитьПараметр("Исправление", ОбъектПерерасчета);
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора) тогда
		
		Если Не ТолькоПоИсправленнымДокументам Тогда // удалим все записи перерасчетов по самому документу
			ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = ДокументСсылка;
			ПерерасчетыПоДокументам.Записать();
		КонецЕсли;
		
		// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
		// в переданном документе сотрудникам
		Для каждого Значение Из МассивИсправленныхДокументов Цикл
			ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			ПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			ПерерасчетыПоДокументам.Прочитать();
			Для каждого Запись Из ПерерасчетыПоДокументам Цикл
				Если МассивФизлиц.Найти(Запись.ФизЛицо) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ПерерасчетыФизлицПоДокументам.Добавить(),Запись);
				КонецЕсли;
			КонецЦикла;
			ПерерасчетыФизлицПоДокументам.Записать();
			ПерерасчетыФизлицПоДокументам.Очистить();
		КонецЦикла;
		
	КонецЕсли;
	Если ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора) тогда
		
		Если Не ТолькоПоИсправленнымДокументам Тогда // удалим все записи перерасчетов по самому документу
			ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = ДокументСсылка;
			ДопПерерасчетыПоДокументам.Записать();
		КонецЕсли;
		
		// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
		// в переданном документе сотрудникам
		Для каждого Значение Из МассивИсправленныхДокументов Цикл
			ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			ДопПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			ДопПерерасчетыПоДокументам.Прочитать();
			Для каждого Запись Из ДопПерерасчетыПоДокументам Цикл
				Если МассивФизлиц.Найти(Запись.ФизЛицо) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ДопПерерасчетыФизлицПоДокументам.Добавить(),Запись);
				КонецЕсли;
			КонецЦикла;
			ДопПерерасчетыФизлицПоДокументам.Записать();
			ДопПерерасчетыФизлицПоДокументам.Очистить();
		КонецЦикла;
	КонецЕсли;
	Если СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора) тогда
		
		Если Не ТолькоПоИсправленнымДокументам Тогда // удалим все записи перерасчетов по самому документу
			СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = ДокументСсылка;
			СредПерерасчетыПоДокументам.Записать();
		КонецЕсли;
		
		// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
		// в переданном документе сотрудникам
		Для каждого Значение Из МассивИсправленныхДокументов Цикл
			СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			СредПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			СредПерерасчетыПоДокументам.Прочитать();
			Для каждого Запись Из СредПерерасчетыПоДокументам Цикл
				Если МассивФизлиц.Найти(Запись.ФизЛицо) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СредПерерасчетыФизлицПоДокументам.Добавить(),Запись);
				КонецЕсли;
			КонецЦикла;
			СредПерерасчетыФизлицПоДокументам.Записать();
			СредПерерасчетыФизлицПоДокументам.Очистить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает и возвращает таблицу сторно записей, добавляя колонку СторнируемыйДокумент
//
// Параметры
//  ТаблицаСторноЗаписей  – <Таблица значений> – таблица сторно записей
//
// Возвращаемое значение:
//   <Таблица значений>   – таблица сторно записей в которую добавлена колонка СторнируемыйДокумент
//
Функция ПолучитьТаблицуСторноЗаписей(ТаблицаСторноЗаписей) Экспорт

	Если ТаблицаСторноЗаписей.Количество() = 0 Тогда
		Возврат ТаблицаСторноЗаписей;
	КонецЕсли;	
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаСторноЗаписей.Сотрудник КАК Сотрудник,
	|	ТаблицаСторноЗаписей.ВидРасчета КАК ВидРасчета,
	|	ТаблицаСторноЗаписей.ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаСторноЗаписей.ПериодРегистрацииСторно,
	|	ТаблицаСторноЗаписей.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ТаблицаСторноЗаписей.ПериодДействияКонец КАК ПериодДействияКонец,
	|	ТаблицаСторноЗаписей.ПериодДействияНачалоСторно,
	|	ТаблицаСторноЗаписей.ПериодДействияКонецСторно,
	|	ТаблицаСторноЗаписей.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	ТаблицаСторноЗаписей.БазовыйПериодНачало,
	|	ТаблицаСторноЗаписей.БазовыйПериодКонец,
	|	ТаблицаСторноЗаписей.ФизЛицо,
	|	ТаблицаСторноЗаписей.Организация,
	|	ТаблицаСторноЗаписей.ГрафикРаботы,
	|	ТаблицаСторноЗаписей.ГрафикРаботыНорма,
	|	ТаблицаСторноЗаписей.ВидУчетаВремени,
	|	ТаблицаСторноЗаписей.Показатель1,
	|	ТаблицаСторноЗаписей.Показатель2,
	|	ТаблицаСторноЗаписей.Показатель3,
	|	ТаблицаСторноЗаписей.Показатель4,
	|	ТаблицаСторноЗаписей.Показатель5,
	|	ТаблицаСторноЗаписей.Показатель6,
	|	ТаблицаСторноЗаписей.ПодразделениеОрганизации,
	|	ТаблицаСторноЗаписей.ОбособленноеПодразделение,
	|	ТаблицаСторноЗаписей.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ТаблицаСторноЗаписей.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ТаблицаСторноЗаписей.Авторасчет,
	|	ТаблицаСторноЗаписей.ДополнительныеДанные,
	//vvv
	|	ТаблицаСторноЗаписей.ВариантОбработкиЗаписиПриОтраженииВРеглУчете,
	//
	|	ТаблицаСторноЗаписей.ВариантАлгоритмаРасчета
	|ПОМЕСТИТЬ ВТ_ТаблицаСторноЗаписей
	|ИЗ
	|	&ТаблицаСторноЗаписей КАК ТаблицаСторноЗаписей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодРегистрации,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	ДатаНачалаСобытия";
	
	Запрос.УстановитьПараметр("ТаблицаСторноЗаписей", ТаблицаСторноЗаписей);
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОсновныеНачисления.Регистратор КАК СторнируемыйДокумент,
	|	ТаблицаСторноЗаписей.Сотрудник,
	|	ТаблицаСторноЗаписей.ВидРасчета КАК ВидРасчета,
	|	ТаблицаСторноЗаписей.ПериодРегистрации,
	|	ТаблицаСторноЗаписей.ПериодРегистрацииСторно,
	|	ТаблицаСторноЗаписей.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ТаблицаСторноЗаписей.ПериодДействияКонец,
	|	ТаблицаСторноЗаписей.ПериодДействияНачалоСторно,
	|	ТаблицаСторноЗаписей.ПериодДействияКонецСторно,
	|	ТаблицаСторноЗаписей.ДатаНачалаСобытия,
	|	ТаблицаСторноЗаписей.БазовыйПериодНачало,
	|	ТаблицаСторноЗаписей.БазовыйПериодКонец,
	|	ТаблицаСторноЗаписей.ФизЛицо,
	|	ТаблицаСторноЗаписей.Организация,
	|	ТаблицаСторноЗаписей.ГрафикРаботы,
	|	ТаблицаСторноЗаписей.ГрафикРаботыНорма,
	|	ТаблицаСторноЗаписей.ВидУчетаВремени,
	|	ТаблицаСторноЗаписей.Показатель1,
	|	ТаблицаСторноЗаписей.Показатель2,
	|	ТаблицаСторноЗаписей.Показатель3,
	|	ТаблицаСторноЗаписей.Показатель4,
	|	ТаблицаСторноЗаписей.Показатель5,
	|	ТаблицаСторноЗаписей.Показатель6,
	|	ТаблицаСторноЗаписей.ПодразделениеОрганизации,
	|	ТаблицаСторноЗаписей.ОбособленноеПодразделение,
	|	ТаблицаСторноЗаписей.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ТаблицаСторноЗаписей.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ТаблицаСторноЗаписей.Авторасчет,
	|	ТаблицаСторноЗаписей.ДополнительныеДанные,
	//vvv
	|	ТаблицаСторноЗаписей.ВариантОбработкиЗаписиПриОтраженииВРеглУчете,
	//
	|	ТаблицаСторноЗаписей.ВариантАлгоритмаРасчета
	|ИЗ
	|	ВТ_ТаблицаСторноЗаписей КАК ТаблицаСторноЗаписей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
	|		ПО ТаблицаСторноЗаписей.Сотрудник = ОсновныеНачисления.Сотрудник
	|			И ТаблицаСторноЗаписей.ВидРасчета = ОсновныеНачисления.ВидРасчета
	|			И ТаблицаСторноЗаписей.ПериодРегистрации = ОсновныеНачисления.ПериодРегистрации
	|			И ТаблицаСторноЗаписей.ПериодДействияНачало = ОсновныеНачисления.ПериодДействияНачало
	|			И ТаблицаСторноЗаписей.ПериодДействияКонец = ОсновныеНачисления.ПериодДействияКонец
	|			И ТаблицаСторноЗаписей.ДатаНачалаСобытия = ОсновныеНачисления.ДатаНачалаСобытия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидРасчета,
	|	ПериодДействияНачало
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();	

КонецФункции // ПолучитьТаблицуСторноЗаписей()

// Процедура формирует сторно-записи по перерассчитываемому документу
Процедура СформироватьСторноЗаписиПоПерерассчитываемомуДокументу(ПерерассчитываемыйДокумент = Неопределено, ВыборкаПоШапкеДокумента = Неопределено, НаборОсновныеНачисления = Неопределено, НаборДополнительныеНачисления = Неопределено, НаборУдержания = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда // по переданному документу заведомо нет движений
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	Запрос.УстановитьПараметр("ПериодРегистрации", ВыборкаПоШапкеДокумента.ПериодРегистрации);
	//vvv
	Запрос.УстановитьПараметр("ДатаДеноминации",ОбщегоНазначения.ПолучитьДатуДеноминации());
	//
	Запрос.УстановитьПараметр("ДокументИсправление", ВыборкаПоШапкеДокумента.Ссылка);
	
	Если НаборОсновныеНачисления <> Неопределено Тогда // выполним запрос по основным начислениям
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеНачисления.Сотрудник,
		|	ОсновныеНачисления.ВидРасчета,
		|	ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
		|	ОсновныеНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
		|	ОсновныеНачисления.Показатель1,
		|	ОсновныеНачисления.Показатель2,
		|	ОсновныеНачисления.Показатель3,
		|	ОсновныеНачисления.Показатель4,
		|	ОсновныеНачисления.Показатель5,
		|	ОсновныеНачисления.Показатель6,
		//vvv
		//|	-ОсновныеНачисления.Результат - ЕСТЬNULL(СУММА(СторноНачисления.Результат), 0) КАК Результат,
		|	-ОсновныеНачисления.Результат / ВЫБОР КОГДА ОсновныеНачисления.ПериодРегистрации<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ - ЕСТЬNULL(СУММА(СторноНачисления.Результат / ВЫБОР КОГДА ОсновныеНачисления.ПериодРегистрации<&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ), 0) КАК Результат,
		//
		|	-ОсновныеНачисления.ОплаченоДнейЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОплаченоДнейЧасов), 0) КАК ОплаченоДнейЧасов,
		|	-ОсновныеНачисления.ОтработаноДней - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДней), 0) КАК ОтработаноДней,
		|	-ОсновныеНачисления.ОтработаноЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасов), 0) КАК ОтработаноЧасов,
		|	-ОсновныеНачисления.ОтработаноДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДнейПоПятидневке), 0) КАК ОтработаноДнейПоПятидневке,
		|	-ОсновныеНачисления.ОтработаноЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасовПоПятидневке), 0) КАК ОтработаноЧасовПоПятидневке,
		|	-ОсновныеНачисления.НормаДней - ЕСТЬNULL(СУММА(СторноНачисления.НормаДней), 0) КАК НормаДней,
		|	-ОсновныеНачисления.НормаЧасов - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасов), 0) КАК НормаЧасов,
		|	-ОсновныеНачисления.НормаДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаДнейПоПятидневке), 0) КАК НормаДнейПоПятидневке,
		|	-ОсновныеНачисления.НормаЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасовПоПятидневке), 0) КАК НормаЧасовПоПятидневке,
		|	ОсновныеНачисления.ПодразделениеОрганизации,
		//vvv
		|	ОсновныеНачисления.ЗаработокЗаЕдиницуВремениФМП КАК ЗаработокЗаЕдиницуВремениФМП,
		|	ОсновныеНачисления.Должность КАК Должность,
		//
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	ОсновныеНачисления.ДополнительныеДанные,
		|	ОсновныеНачисления.ДатаНачалаСобытия,
		|	НЕОПРЕДЕЛЕНО КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете,
		|	ОсновныеНачисления.ПериодДействияНачало,
		|	ОсновныеНачисления.ПериодДействияКонец,
		|	ОсновныеНачисления.ГрафикРаботы,
		|	ОсновныеНачисления.ГрафикРаботыНорма,
		|	ОсновныеНачисления.ВидУчетаВремени,
		|	ЛОЖЬ КАК Авторасчет,
		|	ИСТИНА КАК Сторно,
		|	ОсновныеНачисления.Регистратор КАК СторнируемыйДокумент
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК СторноНачисления
		|		ПО ОсновныеНачисления.Сотрудник = СторноНачисления.Сотрудник
		|			И ОсновныеНачисления.ВидРасчета = СторноНачисления.ВидРасчета
		|			И (СторноНачисления.ПериодДействияНачало МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
		|			И (СторноНачисления.ПериодДействияКонец МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
		|			И (СторноНачисления.ПериодРегистрации > ОсновныеНачисления.ПериодРегистрации)
		|			И (СторноНачисления.ПериодРегистрации <= &ПериодРегистрации)
		|			И (СторноНачисления.СторнируемыйДокумент = ОсновныеНачисления.Регистратор)
		|			И (СторноНачисления.Сторно)
		|			И (СторноНачисления.Регистратор <> &ДокументИсправление)
		|ГДЕ
		|	(НЕ ОсновныеНачисления.Сторно)
		|	И ОсновныеНачисления.Регистратор = &ПерерассчитываемыйДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеНачисления.Сотрудник,
		|	ОсновныеНачисления.ВидРасчета,
		|	ОсновныеНачисления.Показатель1,
		|	ОсновныеНачисления.Показатель2,
		|	ОсновныеНачисления.Показатель3,
		|	ОсновныеНачисления.Показатель4,
		|	ОсновныеНачисления.Показатель5,
		|	ОсновныеНачисления.Показатель6,
		|	ОсновныеНачисления.ПодразделениеОрганизации,
		//vvv
		|	ОсновныеНачисления.ЗаработокЗаЕдиницуВремениФМП,
		|	ОсновныеНачисления.Должность,
		|	ОсновныеНачисления.ПериодРегистрации,
		//
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	ОсновныеНачисления.ДополнительныеДанные,
		|	ОсновныеНачисления.ДатаНачалаСобытия,
		|	ОсновныеНачисления.ПериодДействияНачало,
		|	ОсновныеНачисления.ПериодДействияКонец,
		|	ОсновныеНачисления.ГрафикРаботы,
		|	ОсновныеНачисления.ГрафикРаботыНорма,
		|	ОсновныеНачисления.ВидУчетаВремени,
		|	ОсновныеНачисления.Регистратор,
		|	ОсновныеНачисления.Результат,
		|	ОсновныеНачисления.НормаДней,
		|	ОсновныеНачисления.НормаЧасов,
		|	ОсновныеНачисления.НормаДнейПоПятидневке,
		|	ОсновныеНачисления.ОтработаноДней,
		|	ОсновныеНачисления.ОтработаноЧасов,
		|	ОсновныеНачисления.ОтработаноДнейПоПятидневке,
		|	ОсновныеНачисления.ОплаченоДнейЧасов,
		|	ОсновныеНачисления.ОтработаноЧасовПоПятидневке,
		|	ОсновныеНачисления.НормаЧасовПоПятидневке";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДобавитьСтрокуОсновныхНачислений(НаборОсновныеНачисления, ВыборкаПоШапкеДокумента, Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если НаборДополнительныеНачисления <> Неопределено Тогда // выполним запрос по дополнительным начислениям
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеНачисления.Сотрудник,
		|	ДополнительныеНачисления.ВидРасчета,
		|	ДополнительныеНачисления.Показатель1,
		|	ДополнительныеНачисления.Показатель2,
		|	ДополнительныеНачисления.Показатель3,
		|	ДополнительныеНачисления.Показатель4,
		|	ДополнительныеНачисления.Показатель5,
		|	ДополнительныеНачисления.Показатель6,
		//vvv
		//|	-ДополнительныеНачисления.Результат КАК Результат,
		|	-ДополнительныеНачисления.Результат / ВЫБОР КОГДА ДополнительныеНачисления.ПериодРегистрации <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК Результат,
		//
		|	-ДополнительныеНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
		|	ДополнительныеНачисления.ПодразделениеОрганизации,
		|	ДополнительныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	ДополнительныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	ДополнительныеНачисления.ДатаНачалаСобытия,
		|	ДополнительныеНачисления.ГрафикРаботы,
		|	ДополнительныеНачисления.ВидУчетаВремени,
		|	ЛОЖЬ КАК Авторасчет,
		|	ИСТИНА КАК Сторно,
		|	ДополнительныеНачисления.Регистратор КАК СторнируемыйДокумент,
		|	ДополнительныеНачисления.ЧислоМесяцев,
		|	ДополнительныеНачисления.БазовыйПериодНачало,
		|	ДополнительныеНачисления.БазовыйПериодКонец
		|ИЗ
		|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисления
		|ГДЕ
		|	(НЕ ДополнительныеНачисления.Сторно)
		|	И ДополнительныеНачисления.Регистратор = &ПерерассчитываемыйДокумент";
		
		// выполним запрос по дополнительным начислениям
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДобавитьСтрокуДополнительныхНачислений(НаборДополнительныеНачисления, ВыборкаПоШапкеДокумента, Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если НаборУдержания <> Неопределено Тогда // выполним запрос по удержаниям
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдержанияРаботниковОрганизаций.Сотрудник,
		|	УдержанияРаботниковОрганизаций.ВидРасчета,
		|	УдержанияРаботниковОрганизаций.Показатель1,
		|	УдержанияРаботниковОрганизаций.Показатель2,
		|	УдержанияРаботниковОрганизаций.Показатель3,
		|	УдержанияРаботниковОрганизаций.Показатель4,
		|	УдержанияРаботниковОрганизаций.Показатель5,
		|	УдержанияРаботниковОрганизаций.Показатель6,
		//vvv
		//|	-УдержанияРаботниковОрганизаций.Результат КАК Результат,
		|	-УдержанияРаботниковОрганизаций.Результат / ВЫБОР КОГДА УдержанияРаботниковОрганизаций.ПериодРегистрации <&ДатаДеноминации ТОГДА 10000 ИНАЧЕ 1 КОНЕЦ КАК Результат,
		//
		|	УдержанияРаботниковОрганизаций.ПериодРасчетаСреднегоЗаработкаНачало,
		|	УдержанияРаботниковОрганизаций.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	УдержанияРаботниковОрганизаций.ДатаНачалаСобытия,
		|	УдержанияРаботниковОрганизаций.ГрафикРаботы,
		|	УдержанияРаботниковОрганизаций.ВидУчетаВремени,
		|	ЛОЖЬ КАК Авторасчет,
		|	ИСТИНА КАК Сторно,
		|	УдержанияРаботниковОрганизаций.Регистратор КАК СторнируемыйДокумент,
		|	УдержанияРаботниковОрганизаций.БазовыйПериодНачало,
		|	УдержанияРаботниковОрганизаций.БазовыйПериодКонец
		|ИЗ
		|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизаций
		|ГДЕ
		|	(НЕ УдержанияРаботниковОрганизаций.Сторно)
		|	И УдержанияРаботниковОрганизаций.Регистратор = &ПерерассчитываемыйДокумент";
		
		// выполним запрос по дополнительным начислениям
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДобавитьСтрокуУдержаний(НаборУдержания, ВыборкаПоШапкеДокумента, Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьСторноЗаписиПоПерерассчитываемомуДокументу()


// Функция получает по таблице начислений таблицу зависимых начислений
//
// Параметры
//  ТаблицаНачислений  – <Таблица значений> – таблица начислений по которым необходимо собрать зависимые начисления
//  
// Возвращаемое заначение - – <Таблица значений>
Функция ПолучитьТаблицуЗависимыхНачисленийОсновные(ТаблицаНачислений) Экспорт

	Если ТаблицаНачислений.Количество() = 0 Тогда
		Возврат ТаблицаНачислений;
	КонецЕсли;	
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	//// поместим таблицу значений во временную таблицу
	//ТекстЗапроса = 
	//"ВЫБРАТЬ
	//|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
	//|	ТаблицаНачислений.ВидРасчета КАК ВидРасчета,
	//|	ТаблицаНачислений.ПериодРегистрации КАК ПериодРегистрации,
	//|	ТаблицаНачислений.ПериодДействия КАК ПериодДействия,
	//|	ТаблицаНачислений.ПериодДействияНачало КАК ПериодДействияНачало,
	//|	ТаблицаНачислений.ПериодДействияКонец КАК ПериодДействияКонец,
	//|	ТаблицаНачислений.Сторно
	//|ПОМЕСТИТЬ ВТ_ОсновныеНачисления
	//|ИЗ
	//|	&ТаблицаНачислений КАК ТаблицаНачислений
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	Сотрудник,
	//|	ВидРасчета,
	//|	ПериодРегистрации,
	//|	ПериодДействия,
	//|	ПериодДействияНачало,
	//|	ПериодДействияКонец";
	
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	//Запрос.Текст = ТекстЗапроса;
	//Запрос.Выполнить();
	
	// поместим таблицу значений во временную таблицу
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
	|	ТаблицаНачислений.ВидРасчета КАК ВидРасчета,
	|	ТаблицаНачислений.ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаНачислений.ПериодДействия КАК ПериодДействия,
	|	ТаблицаНачислений.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ТаблицаНачислений.ПериодДействияКонец КАК ПериодДействияКонец,
	|	ТаблицаНачислений.Сторно
	|ПОМЕСТИТЬ ВТ_ОсновныеНачисления
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗависимыеНачисления.ПериодРегистрации,
	|	ЗависимыеНачисления.Регистратор,
	|	ЗависимыеНачисления.ВидРасчета,
	|	ЗависимыеНачисления.ПериодДействия КАК ПериодДействия,
	|	ЗависимыеНачисления.ПериодДействияНачало,
	|	ЗависимыеНачисления.ПериодДействияКонец,
	|	ЗависимыеНачисления.БазовыйПериодНачало,
	|	ЗависимыеНачисления.БазовыйПериодКонец,
	|	ЗависимыеНачисления.Сторно,
	|	ЗависимыеНачисления.Сотрудник КАК Сотрудник,
	|	ЗависимыеНачисления.ФизЛицо,
	|	ЗависимыеНачисления.Организация,
	|	ЗависимыеНачисления.ГрафикРаботы,
	|	ЗависимыеНачисления.ГрафикРаботыНорма,
	|	ЗависимыеНачисления.ВидУчетаВремени,
	|	ЗависимыеНачисления.Показатель1,
	|	ЗависимыеНачисления.Показатель2,
	|	ЗависимыеНачисления.Показатель3,
	|	ЗависимыеНачисления.Показатель4,
	|	ЗависимыеНачисления.Показатель5,
	|	ЗависимыеНачисления.Показатель6,
	|	ЗависимыеНачисления.ПодразделениеОрганизации,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ЗависимыеНачисления.ДатаНачалаСобытия,
	|	ЗависимыеНачисления.ОбособленноеПодразделение,
	|	ЗависимыеНачисления.Авторасчет,
	|	ЗависимыеНачисления.СторнируемыйДокумент,
	|	ЗависимыеНачисления.Результат КАК Результат,
	|	ЗависимыеНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
	|	ЗависимыеНачисления.ОтработаноДней КАК ОтработаноДней,
	|	ЗависимыеНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	ЗависимыеНачисления.ОтработаноДнейПоПятидневке КАК ОтработаноДнейПоПятидневке,
	|	ЗависимыеНачисления.ОтработаноЧасовПоПятидневке КАК ОтработаноЧасовПоПятидневке,
	//vvv
	|	ЗависимыеНачисления.ДополнительныеДанные КАК ДополнительныеДанные,
	//
	|	ЗависимыеНачисления.НормаДней КАК НормаДней,
	|	ЗависимыеНачисления.НормаЧасов КАК НормаЧасов,
	|	ЗависимыеНачисления.НормаДнейПоПятидневке КАК НормаДнейПоПятидневке,
	|	ЗависимыеНачисления.НормаЧасовПоПятидневке КАК НормаЧасовПоПятидневке
	|ПОМЕСТИТЬ ВТ_ЗависимыеНачисления
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			(Сотрудник, ПериодДействия) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ОсновныеНачисления.Сотрудник,
	|						ОсновныеНачисления.ПериодДействия
	|					ИЗ
	|						ВТ_ОсновныеНачисления КАК ОсновныеНачисления)
	|				И (НЕ ВидРасчета В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ОсновныеНачисления.ВидРасчета
	|						ИЗ
	|							ВТ_ОсновныеНачисления КАК ОсновныеНачисления))) КАК ЗависимыеНачисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗависимыеНачисления.Сотрудник КАК Сотрудник,
	|	ЗависимыеНачисления.ВидРасчета КАК ВидРасчета,
	|	ВЫБОР
	|		КОГДА ЗависимыеНачисления.Сторнировать > 0
	|			ТОГДА ЗависимыеНачисления.ПериодДействияНачало
	|		ИНАЧЕ ЗависимыеНачисления.ПериодДействияНачалоНеСторно
	|	КОНЕЦ КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА ЗависимыеНачисления.Сторнировать > 0
	|			ТОГДА ЗависимыеНачисления.ПериодДействияКонец
	|		ИНАЧЕ ЗависимыеНачисления.ПериодДействияКонецНеСторно
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	ЗависимыеНачисления.Сторнировать,
	|	ЗависимыеНачисления.Начислить КАК Начислить,
	|	ЗависимыеНачисления.ПериодРегистрации КАК ПериодРегистрации,
	|	ЗависимыеНачисления.ПериодРегистрацииЗависимогоНачисления,
	|	ЗависимыеНачисления.ПериодДействия,
	|	ЗависимыеНачисления.БазовыйПериодНачало,
	|	ЗависимыеНачисления.БазовыйПериодКонец,
	|	ЗависимыеНачисления.Сторно,
	|	ЗависимыеНачисления.ФизЛицо,
	|	ЗависимыеНачисления.Организация,
	|	ЗависимыеНачисления.ГрафикРаботы,
	|	ЗависимыеНачисления.ГрафикРаботыНорма,
	|	ЗависимыеНачисления.ВидУчетаВремени,
	|	ЗависимыеНачисления.Показатель1,
	|	ЗависимыеНачисления.Показатель2,
	|	ЗависимыеНачисления.Показатель3,
	|	ЗависимыеНачисления.Показатель4,
	|	ЗависимыеНачисления.Показатель5,
	|	ЗависимыеНачисления.Показатель6,
	|	ЗависимыеНачисления.ПодразделениеОрганизации,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ЗависимыеНачисления.ДатаНачалаСобытия,
	|	ЗависимыеНачисления.ОбособленноеПодразделение,
	|	ЗависимыеНачисления.Авторасчет,
	|	ЗависимыеНачисления.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	ЗависимыеНачисления.Результат,
	|	ЗависимыеНачисления.ОплаченоДнейЧасов,
	|	ЗависимыеНачисления.ОтработаноДней,
	|	ЗависимыеНачисления.ОтработаноЧасов,
	|	ЗависимыеНачисления.ОтработаноДнейПоПятидневке,
	|	ЗависимыеНачисления.ОтработаноЧасовПоПятидневке,
	//vvv
	|	ЗависимыеНачисления.ДополнительныеДанные КАК ДополнительныеДанные,
	//
	|	ЗависимыеНачисления.НормаДней,
	|	ЗависимыеНачисления.НормаЧасов,
	|	ЗависимыеНачисления.НормаДнейПоПятидневке,
	|	ЗависимыеНачисления.НормаЧасовПоПятидневке
	|ПОМЕСТИТЬ ВТ_Начисления
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|		ЗависимыеНачисления.ВидРасчета КАК ВидРасчета,
	|		ЗависимыеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|		ЗависимыеНачисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисления.ПериодДействияНачало < ЗависимыеНачисления.ПериодДействияНачало
	|				ТОГДА ЗависимыеНачисления.ПериодДействияНачало
	|			ИНАЧЕ ОсновныеНачисления.ПериодДействияНачало
	|		КОНЕЦ КАК ПериодДействияНачалоНеСторно,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисления.ПериодДействияКонец > ЗависимыеНачисления.ПериодДействияКонец
	|				ТОГДА ЗависимыеНачисления.ПериодДействияКонец
	|			ИНАЧЕ ОсновныеНачисления.ПериодДействияКонец
	|		КОНЕЦ КАК ПериодДействияКонецНеСторно,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисления.Сторно
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Сторнировать,
	|		ВЫБОР
	|			КОГДА (НЕ ОсновныеНачисления.Сторно)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Начислить,
	|		ОсновныеНачисления.ПериодРегистрации КАК ПериодРегистрации,
	|		ОсновныеНачисления.ПериодДействия КАК ПериодДействия,
	|		ЗависимыеНачисления.ПериодРегистрации КАК ПериодРегистрацииЗависимогоНачисления,
	|		ЗависимыеНачисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|		ЗависимыеНачисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|		ЗависимыеНачисления.Сторно КАК Сторно,
	|		ЗависимыеНачисления.ФизЛицо КАК ФизЛицо,
	|		ЗависимыеНачисления.Организация КАК Организация,
	|		ЗависимыеНачисления.ГрафикРаботы КАК ГрафикРаботы,
	|		ЗависимыеНачисления.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
	|		ЗависимыеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
	|		ЗависимыеНачисления.Показатель1 КАК Показатель1,
	|		ЗависимыеНачисления.Показатель2 КАК Показатель2,
	|		ЗависимыеНачисления.Показатель3 КАК Показатель3,
	|		ЗависимыеНачисления.Показатель4 КАК Показатель4,
	|		ЗависимыеНачисления.Показатель5 КАК Показатель5,
	|		ЗависимыеНачисления.Показатель6 КАК Показатель6,
	|		ЗависимыеНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|		ЗависимыеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|		ЗависимыеНачисления.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|		ЗависимыеНачисления.Авторасчет КАК Авторасчет,
	|		ЗависимыеНачисления.Регистратор КАК СторнируемыйДокумент,
	|		ЗависимыеНачисления.Результат КАК Результат,
	|		ЗависимыеНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
	|		ЗависимыеНачисления.ОтработаноДней КАК ОтработаноДней,
	|		ЗависимыеНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|		ЗависимыеНачисления.ОтработаноДнейПоПятидневке КАК ОтработаноДнейПоПятидневке,
	|		ЗависимыеНачисления.ОтработаноЧасовПоПятидневке КАК ОтработаноЧасовПоПятидневке,
	//vvv
	|		ЗависимыеНачисления.ДополнительныеДанные КАК ДополнительныеДанные,
	//
	|		ЗависимыеНачисления.НормаДней КАК НормаДней,
	|		ЗависимыеНачисления.НормаЧасов КАК НормаЧасов,
	|		ЗависимыеНачисления.НормаДнейПоПятидневке КАК НормаДнейПоПятидневке,
	|		ЗависимыеНачисления.НормаЧасовПоПятидневке КАК НормаЧасовПоПятидневке
	|	ИЗ
	|		ВТ_ОсновныеНачисления КАК ОсновныеНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗависимыеНачисления КАК ЗависимыеНачисления
	|			ПО ОсновныеНачисления.Сотрудник = ЗависимыеНачисления.Сотрудник
	|				И ОсновныеНачисления.ПериодДействия = ЗависимыеНачисления.ПериодДействия
	|				И ОсновныеНачисления.ПериодДействияНачало < ЗависимыеНачисления.ПериодДействияКонец
	|				И ОсновныеНачисления.ПериодДействияКонец > ЗависимыеНачисления.ПериодДействияНачало
	|				И (ЗависимыеНачисления.ПериодРегистрации < ОсновныеНачисления.ПериодРегистрации)
	|				И ((НЕ ЗависимыеНачисления.Сторно))
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВедущиеВидыРасчета КАК Ведущие
	|			ПО (Ведущие.Ссылка = ЗависимыеНачисления.ВидРасчета)
	|				И (Ведущие.ВидРасчета = ОсновныеНачисления.ВидРасчета)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК Вытесняющие
	|			ПО (Вытесняющие.Ссылка = ЗависимыеНачисления.ВидРасчета)
	|				И (Вытесняющие.ВидРасчета = ОсновныеНачисления.ВидРасчета)
	|	ГДЕ
	|		((НЕ Ведущие.ВидРасчета ЕСТЬ NULL )
	|				ИЛИ (НЕ Вытесняющие.ВидРасчета ЕСТЬ NULL ))) КАК ЗависимыеНачисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодРегистрации,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	СторнируемыйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисления.Сотрудник,
	|	ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
	|	ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ОсновныеНачисления.ПериодДействияКонец,
	|	ОсновныеНачисления.Сторнировать,
	|	ОсновныеНачисления.Начислить КАК Начислить,
	|	ОсновныеНачисления.ПериодРегистрации,
	|	ОсновныеНачисления.ПериодДействия,
	|	ОсновныеНачисления.БазовыйПериодНачало,
	|	ОсновныеНачисления.БазовыйПериодКонец,
	|	ОсновныеНачисления.Сторно,
	|	ОсновныеНачисления.ФизЛицо,
	|	ОсновныеНачисления.Организация,
	|	ОсновныеНачисления.ГрафикРаботы,
	|	ОсновныеНачисления.ГрафикРаботыНорма,
	|	ОсновныеНачисления.ВидУчетаВремени,
	|	ОсновныеНачисления.Показатель1,
	|	ОсновныеНачисления.Показатель2,
	|	ОсновныеНачисления.Показатель3,
	|	ОсновныеНачисления.Показатель4,
	|	ОсновныеНачисления.Показатель5,
	|	ОсновныеНачисления.Показатель6,
	|	ОсновныеНачисления.ПодразделениеОрганизации,
	|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ОсновныеНачисления.ДатаНачалаСобытия,
	|	ОсновныеНачисления.ОбособленноеПодразделение,
	|	ОсновныеНачисления.Авторасчет,
	|	ОсновныеНачисления.СторнируемыйДокумент,
	//vvv
	|	ОсновныеНачисления.ДополнительныеДанные,
	//
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.Результат - ЕСТЬNULL(СУММА(СторноНачисления.Результат), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Результат,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОплаченоДнейЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОплаченоДнейЧасов), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОплаченоДнейЧасов,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОтработаноДней - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДней), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноДней,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОтработаноЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасов), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноЧасов,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОтработаноДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДнейПоПятидневке), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноДнейПоПятидневке,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОтработаноЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасовПоПятидневке), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноЧасовПоПятидневке,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.НормаДней - ЕСТЬNULL(СУММА(СторноНачисления.НормаДней), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаДней,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.НормаЧасов - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасов), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаЧасов,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.НормаДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаДнейПоПятидневке), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаДнейПоПятидневке,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.НормаЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасовПоПятидневке), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаЧасовПоПятидневке
	|ИЗ
	|	ВТ_Начисления КАК ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК СторноНачисления
	|		ПО ОсновныеНачисления.Сотрудник = СторноНачисления.Сотрудник
	|			И ОсновныеНачисления.ВидРасчета = СторноНачисления.ВидРасчета
	|			И (СторноНачисления.ПериодДействияНачало МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
	|			И (СторноНачисления.ПериодДействияКонец МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
	|			И (СторноНачисления.ПериодРегистрации > ОсновныеНачисления.ПериодРегистрацииЗависимогоНачисления)
	|			И (СторноНачисления.ПериодРегистрации <= ОсновныеНачисления.ПериодРегистрации)
	|			И (СторноНачисления.СторнируемыйДокумент = ОсновныеНачисления.СторнируемыйДокумент)
	|			И (ОсновныеНачисления.Сторнировать > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисления.Сотрудник,
	|	ОсновныеНачисления.ВидРасчета,
	|	ОсновныеНачисления.ПериодДействияНачало,
	|	ОсновныеНачисления.ПериодДействияКонец,
	|	ОсновныеНачисления.ПериодРегистрации,
	|	ОсновныеНачисления.ПериодДействия,
	|	ОсновныеНачисления.БазовыйПериодНачало,
	|	ОсновныеНачисления.БазовыйПериодКонец,
	|	ОсновныеНачисления.Сторно,
	|	ОсновныеНачисления.ФизЛицо,
	|	ОсновныеНачисления.Организация,
	|	ОсновныеНачисления.ГрафикРаботы,
	|	ОсновныеНачисления.ГрафикРаботыНорма,
	|	ОсновныеНачисления.ВидУчетаВремени,
	|	ОсновныеНачисления.ПодразделениеОрганизации,
	|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ОсновныеНачисления.ДатаНачалаСобытия,
	|	ОсновныеНачисления.ОбособленноеПодразделение,
	|	ОсновныеНачисления.Авторасчет,
	|	ОсновныеНачисления.СторнируемыйДокумент,
	//vvv
	|	ОсновныеНачисления.ДополнительныеДанные,
	//
	|	ОсновныеНачисления.Сторнировать,
	|	ОсновныеНачисления.Начислить,
	|	ОсновныеНачисления.Показатель1,
	|	ОсновныеНачисления.Показатель2,
	|	ОсновныеНачисления.Показатель3,
	|	ОсновныеНачисления.Показатель4,
	|	ОсновныеНачисления.Показатель5,
	|	ОсновныеНачисления.Показатель6,
	|	ОсновныеНачисления.Результат,
	|	ОсновныеНачисления.НормаДней,
	|	ОсновныеНачисления.НормаЧасов,
	|	ОсновныеНачисления.НормаДнейПоПятидневке,
	|	ОсновныеНачисления.ОтработаноДней,
	|	ОсновныеНачисления.ОтработаноЧасов,
	|	ОсновныеНачисления.ОтработаноДнейПоПятидневке,
	|	ОсновныеНачисления.ОплаченоДнейЧасов,
	|	ОсновныеНачисления.ОтработаноЧасовПоПятидневке,
	|	ОсновныеНачисления.НормаЧасовПоПятидневке
	|
	|ИМЕЮЩИЕ
	|	(ВЫБОР
	|				КОГДА ОсновныеНачисления.Сторнировать > 0
	|					ТОГДА -ОсновныеНачисления.Результат - ЕСТЬNULL(СУММА(СторноНачисления.Результат), 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ <> 0
	|			И ОсновныеНачисления.Сторнировать > 0
	|		ИЛИ ОсновныеНачисления.Начислить > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начислить УБЫВ,
	|	ВидРасчета,
	|	ПериодДействияНачало
	|АВТОУПОРЯДОЧИВАНИЕ";

	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции // ПолучитьТаблицуЗависимыхНачисленийОсновные()

// Функция получает по таблице начислений таблицу зависимых начислений
//
// Параметры
//  ТаблицаНачислений  – <Таблица значений> – таблица начислений по которым необходимо собрать зависимые начисления
//  
// Возвращаемое заначение - – <Таблица значений>
Функция ПолучитьТаблицуЗависимыхНачисленийДополнительные(ТаблицаНачислений) Экспорт

	Если ТаблицаНачислений.Количество() = 0 Тогда
		Возврат ТаблицаНачислений;
	КонецЕсли;	
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// поместим таблицу значений во временную таблицу
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
	|	ТаблицаНачислений.ВидРасчета КАК ВидРасчета,
	|	ТаблицаНачислений.ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаНачислений.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ТаблицаНачислений.ПериодДействияКонец КАК ПериодДействияКонец
	|ПОМЕСТИТЬ ВТ_ОсновныеНачисления
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодРегистрации,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец";
	
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	ЗависимыеНачисления.ВидРасчета КАК ВидРасчета,
	|	ОсновныеНачисления.ПериодРегистрации КАК ПериодРегистрации,
	|	ЗависимыеНачисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ЗависимыеНачисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|	ЗависимыеНачисления.Сторно КАК Сторно,
	|	ЗависимыеНачисления.ФизЛицо КАК ФизЛицо,
	|	ЗависимыеНачисления.Организация КАК Организация,
	|	ЗависимыеНачисления.ГрафикРаботы КАК ГрафикРаботы,
	|	ЗависимыеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ЗависимыеНачисления.Показатель1 КАК Показатель1,
	|	ЗависимыеНачисления.Показатель2 КАК Показатель2,
	|	ЗависимыеНачисления.Показатель3 КАК Показатель3,
	|	ЗависимыеНачисления.Показатель4 КАК Показатель4,
	|	ЗависимыеНачисления.Показатель5 КАК Показатель5,
	|	ЗависимыеНачисления.Показатель6 КАК Показатель6,
	|	ЗависимыеНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ЗависимыеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	ЗависимыеНачисления.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ЗависимыеНачисления.ЧислоМесяцев,
	|	ЗависимыеНачисления.Регистратор КАК СторнируемыйДокумент
	|ИЗ
	|	ВТ_ОсновныеНачисления КАК ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ЗависимыеНачисления
	|		ПО ОсновныеНачисления.Сотрудник = ЗависимыеНачисления.Сотрудник
	|			И (НАЧАЛОПЕРИОДА(ЗависимыеНачисления.ПериодРегистрации, МЕСЯЦ) < ОсновныеНачисления.ПериодРегистрации)
	|			И ОсновныеНачисления.ПериодДействияНачало < ЗависимыеНачисления.БазовыйПериодКонец
	|			И ОсновныеНачисления.ПериодДействияКонец > ЗависимыеНачисления.БазовыйПериодНачало
	|			И (НЕ ЗависимыеНачисления.Сторно)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ВедущиеВидыРасчета КАК Ведущие
	|		ПО (Ведущие.Ссылка = ЗависимыеНачисления.ВидРасчета)
	|			И (Ведущие.ВидРасчета = ОсновныеНачисления.ВидРасчета)
	|ГДЕ
	|	(НЕ Ведущие.ВидРасчета ЕСТЬ NULL )
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисления.Сотрудник,
	|	ЗависимыеНачисления.ВидРасчета,
	|	ОсновныеНачисления.ПериодРегистрации,
	|	ЗависимыеНачисления.БазовыйПериодНачало,
	|	ЗависимыеНачисления.БазовыйПериодКонец,
	|	ЗависимыеНачисления.Сторно,
	|	ЗависимыеНачисления.ФизЛицо,
	|	ЗависимыеНачисления.Организация,
	|	ЗависимыеНачисления.ГрафикРаботы,
	|	ЗависимыеНачисления.ВидУчетаВремени,
	|	ЗависимыеНачисления.ПодразделениеОрганизации,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ЗависимыеНачисления.ДатаНачалаСобытия,
	|	ЗависимыеНачисления.ОбособленноеПодразделение,
	|	ЗависимыеНачисления.Показатель1,
	|	ЗависимыеНачисления.Показатель2,
	|	ЗависимыеНачисления.Показатель3,
	|	ЗависимыеНачисления.Показатель4,
	|	ЗависимыеНачисления.Показатель5,
	|	ЗависимыеНачисления.Показатель6,
	|	ЗависимыеНачисления.ЧислоМесяцев,
	|	ЗависимыеНачисления.Регистратор";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуЗависимыхНачисленийОсновные()

Функция ПолучитьМассивРазделителей() Экспорт
	
	МассивРазделителей = Новый Массив;
	
	МассивРазделителей.Добавить(" ");
	МассивРазделителей.Добавить(Символы.ВК);
	МассивРазделителей.Добавить(Символы.ВТаб);
	МассивРазделителей.Добавить(Символы.НПП);
	МассивРазделителей.Добавить(Символы.ПС);
	МассивРазделителей.Добавить(Символы.ПФ);
	МассивРазделителей.Добавить(Символы.Таб);
	
	Возврат МассивРазделителей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формульные расчеты

Функция ПолучитьHTLMКодФормулыРасчета(ФормулаРасчета, Показатели, Режим, ВыводитьИдентификатор = Ложь) Экспорт
	
	Числа = "0123456789";
	
	
	ОператорыИФункции				=  ".,+,-,/,*,ЦЕЛ,INT,ОКР,ROUND,МАКС,MAX,МИН,MIN,?,=,<,>,<=,>=,ОЦЕНИТЬПО,(,),И,ИЛИ,НЕ,OR,AND,NOT";
	ОператорыИФункцииОднойСтрокой	=  ".,+,-,/,*,?,=,<,>,(,)";
	
	МассивРазделителей = Новый Массив;
	МассивРазделителей.Добавить(" ");
	МассивРазделителей.Добавить(Символы.ВК);
	МассивРазделителей.Добавить(Символы.ВТаб);
	МассивРазделителей.Добавить(Символы.НПП);
	МассивРазделителей.Добавить(Символы.ПС);
	МассивРазделителей.Добавить(Символы.ПФ);
	МассивРазделителей.Добавить(Символы.Таб);
	
	СловоСобрано		= Ложь;
	НайденПоказатель	= Ложь;
	
	Слово = "";
	
	ДлинаСтроки					= СтрДлина(ФормулаРасчета);
	НовыйHTMLКодФормулыРасчета	= "";
	
	
	// разбор слов
	НомерАнализируемогоСимвола = 1;
	Пока НомерАнализируемогоСимвола <= ДлинаСтроки Цикл
		
		Символ = Сред(ФормулаРасчета, НомерАнализируемогоСимвола, 1);
		
		Если Символ = "." И Слово = "ИсходныеДанные" и Сред(ФормулаРасчета, НомерАнализируемогоСимвола+1, 10) = "Показатель" Тогда
			
			
			НомерАнализируемогоСимвола = НомерАнализируемогоСимвола + 10;
			НомерПоказателя = "";
			ШагВнутриЦикла = 0;
			ПродолжитьЦикл = Истина;
			Пока ПродолжитьЦикл Цикл
				
				НомерАнализируемогоСимвола = НомерАнализируемогоСимвола + 1;
				СимволДляСравненияСЧислом = Сред(ФормулаРасчета, НомерАнализируемогоСимвола, 1);
				Если Найти(Числа, СимволДляСравненияСЧислом) <> 0 Тогда
					НомерПоказателя = НомерПоказателя + СимволДляСравненияСЧислом;
					ПродолжитьЦикл  = (НомерАнализируемогоСимвола <= ДлинаСтроки);
				Иначе
					ПродолжитьЦикл = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Режим = "Текст" Тогда
				Если ВыводитьИдентификатор Тогда
					ПоказательДляФормулы = Строка(Показатели[Число(НомерПоказателя) - 1].Показатель.Идентификатор);
				Иначе
					ПоказательДляФормулы = Строка(Показатели[Число(НомерПоказателя) - 1].Показатель);
				КонецЕсли;
			Иначе
				ПоказательДляФормулы = "<FONT color=#0000ff>" + Строка(Показатели[Число(НомерПоказателя) - 1].Показатель)+"</FONT>";
			КонецЕсли;
			
			НовыйHTMLКодФормулыРасчета = НовыйHTMLКодФормулыРасчета + ПоказательДляФормулы;
			
			НайденПоказатель = Истина;
			
			Слово = "";
			
		ИначеЕсли  МассивРазделителей.Найти(Символ) <> Неопределено Или Найти(ОператорыИФункцииОднойСтрокой, Символ) Тогда
			
			СловоСобрано = Истина;
			НайденПоказатель = Ложь;
			Слово = Слово + Символ;
		Иначе
			
			// символ не разделитель, можно его добавить к слову
			Слово = Слово + Символ;
			Если ДлинаСтроки = НомерАнализируемогоСимвола Тогда 
				СловоСобрано = Истина;
			КонецЕсли;
			НайденПоказатель = Ложь;
		КонецЕсли;
		
		Если СловоСобрано И Не НайденПоказатель Тогда
			//	ФормулаРасчета	= СтрЗаменить(ФормулаРасчета, "ИсходныеДанные.Показатель"+Показатель.НомерСтроки, ПоказательДляФормулы);
			НовыйHTMLКодФормулыРасчета = НовыйHTMLКодФормулыРасчета + Слово;
			СловоСобрано = Ложь;
			Слово = "";
		КонецЕсли;
		
		Если НЕ НайденПоказатель Тогда
			НомерАнализируемогоСимвола = НомерАнализируемогоСимвола + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыйHTMLКодФормулыРасчета;
	
КонецФункции //ПолучитьHTLMКодФормулыРасчета

// Помещает в запрос временную таблицу "ВТПоказатели" с описанием
// показателей расчета, используемых в произвольных формулах
// Поля временной таблицы:
//    ВидРасчета,
//    КоличествоПоказателей,
//    РасчетИмеетБазовыеНачисления,
//    Показатель(1...N)ЯвляетсяРасчетнойБазой,
//    Показатель(1...N)Наименование,
//    Показатель(1...N)
//
// Параметры
//	ИмяРегистра - строка, имя регистра расчета
//	ИмяПВР - строка, имя соответствующего регистру расчета ПВР
//	ВнешнееУсловие - строка, задает условие для отбора записей расчета
//
// Возвращаемое значение:
//   число - количество показателей, используемых при расчете всех записей
//
Функция ПолучитьДанныеОПроизвольныхФормулахВЗапросе(Запрос, ИмяРегистра, ВнешнееУсловие, ИмяПВР) Экспорт 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Основной.ВидРасчета КАК ВидРасчета
	|ПОМЕСТИТЬ ВТВидыРасчета
	|ИЗ
	|	РегистрРасчета." + ИмяРегистра + " КАК Основной
	|ГДЕ
	|	" + ВнешнееУсловие + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";
	Запрос.Выполнить();	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Показатели.Ссылка КАК Ссылка,
	|	Показатели.НомерСтроки,
	|	Показатели.Показатель
	|ПОМЕСТИТЬ ВТВСЕПоказатели
	|ИЗ
	|	ПланВидовРасчета." + ИмяПВР +".Показатели КАК Показатели
	|ГДЕ
	|	Показатели.Ссылка В
	|			(ВЫБРАТЬ
	|				Основной.ВидРасчета
	|			ИЗ
	|				ВТВидыРасчета КАК Основной)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	Запрос.Выполнить();
	
	// Получим максимальное число показателей			
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(Показатели.НомерСтроки) КАК КолВоПоказателей
	|ИЗ
	|	ВТВСЕПоказатели КАК Показатели";
	
	ВыборкаКоличестваПоказателей = Запрос.Выполнить().Выбрать();
	ВыборкаКоличестваПоказателей.Следующий();
	КоличествоПоказателей = ВыборкаКоличестваПоказателей.КолВоПоказателей;		
	Если КоличествоПоказателей = Null Тогда
		КоличествоПоказателей = 0;
	КонецЕсли;
	
	// получим временную таблицу с расчетом показателей
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Основной.ВидРасчета КАК ВидРасчета,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВСЕПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБаза)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК РасчетИмеетБазовыеНачисления,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВСЕПоказатели.Показатель В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ОтработаноВремениВЧасах),ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ОтработаноВремениВДнях),ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВДнях),ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВЧасах))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК РасчетИмеетОтработанноеВремя,
	|	МАКСИМУМ(ВСЕПоказатели.НомерСтроки) КАК КоличествоПоказателей";
	Для СчПоказателей = 1 По КоличествоПоказателей Цикл
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА Показатели" + СчПоказателей + ".Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБаза)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Показатель" + СчПоказателей + "ЯвляетсяРасчетнойБазой,
		|	Показатели" + СчПоказателей + ".Показатель.Наименование КАК Показатель" + СчПоказателей + "Наименование,
		|	Показатели" + СчПоказателей + ".Показатель КАК Показатель" + СчПоказателей;
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	ВТВидыРасчета КАК Основной
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВСЕПоказатели КАК ВСЕПоказатели
	|		ПО Основной.ВидРасчета = ВСЕПоказатели.Ссылка";
	Для СчПоказателей = 1 По КоличествоПоказателей Цикл
		Запрос.Текст = Запрос.Текст + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВСЕПоказатели КАК Показатели"+ СчПоказателей + "
	|		ПО Основной.ВидРасчета = Показатели"+ СчПоказателей + ".Ссылка 
	|			И Показатели"+ СчПоказателей + ".НомерСтроки = "+ СчПоказателей;
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.ВидРасчета";
	Для СчПоказателей = 1 По КоличествоПоказателей Цикл
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА Показатели" + СчПоказателей + ".Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБаза)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	Показатели"+ СчПоказателей + ".Показатель";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";
	
	Запрос.Выполнить();	
	
	Возврат КоличествоПоказателей
	
КонецФункции // ()

Функция ПолучитьТекстПоказателя(НеобходимыеДанные, ВидПВР, Предопределенный = Ложь, КомментироватьРасчет)		
	
	МассивСтажей = НеобходимыеДанные["ПроизвольныеСтажи"];
	
	Если 	НеобходимыеДанные.СдельныйЗаработок или 
		НеобходимыеДанные.ОтработаноВремени или 
		НеобходимыеДанные.НормаВремениЗаМесяц или
		НеобходимыеДанные.Стаж или
		НеобходимыеДанные.ВремяВКалендарныхДнях или
		НеобходимыеДанные.База Тогда
		Если ВидПВР = "УдержанияРаботниковОрганизаций" Или ВидПВР = "ДополнительныеНачисленияРаботниковОрганизаций" Или ВидПВР = "УправленческиеУдержания" Тогда
			Показатель1Текст = "ВЫБОР "+
			?(НеобходимыеДанные.Стаж, "                 
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.Стаж)
			|		ТОГДА РАЗНОСТЬДАТ(ДанныеОСтаже.Период, Основной.БазовыйПериодКонец, МЕСЯЦ)", "") + 
			?(НеобходимыеДанные.ВремяВКалендарныхДнях, "
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВКалендарныхДнях)
			|		ТОГДА РАЗНОСТЬДАТ(Основной.БазовыйПериодНачало, Основной.БазовыйПериодКонец, ДЕНЬ) + 1  ", "")+
			?(НеобходимыеДанные.КалендарныхДнейВмесяце, "
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.КалендарныхДнейВмесяце)
			|		ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало,МЕСЯЦ), КОНЕЦПЕРИОДА(Основной.БазовыйПериодКонец,МЕСЯЦ), ДЕНЬ) + 1  ", "");
			
		Иначе
			Показатель1Текст = "ВЫБОР "+
			?(НеобходимыеДанные.Стаж, "                 
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.Стаж)
			|		ТОГДА РАЗНОСТЬДАТ(ДанныеОСтаже.Период, КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ), МЕСЯЦ)", "") + 
			?(НеобходимыеДанные.ВремяВКалендарныхДнях, "                 
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВКалендарныхДнях)
			|		ТОГДА РАЗНОСТЬДАТ(ФактическийПериодДействия.ПериодДействияНачало, ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ) + 1 ", "")+
			?(НеобходимыеДанные.КалендарныхДнейВмесяце, "
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.КалендарныхДнейВмесяце)
			|		ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало,МЕСЯЦ), КОНЕЦПЕРИОДА(Основной.ПериодДействияНачало,МЕСЯЦ), ДЕНЬ) + 1  ", "");
			
		КонецЕсли;
		Если ВидПВР = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
			НазваниеРеквизитаВидУчетаРабочегоВремени = ".ОбозначениеВТабелеУчетаРабочегоВремени";
		ИначеЕсли ВидПВР = "УправленческиеНачисления" Тогда
			НазваниеРеквизитаВидУчетаРабочегоВремени = ".ВидУчетаРабочегоВремени";
		Иначе
			НазваниеРеквизитаВидУчетаРабочегоВремени = "";
		КонецЕсли;
		
		Показатель1Текст = Показатель1Текст +
		?(НеобходимыеДанные.СдельныйЗаработок, "
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.СдельнаяВыработка) 
		|		ТОГДА ВЫБОР
		|			КОГДА ЕСТЬNULL(ДанныеОСдельномЗаработке.ОшибкаВводаФактическойВыработки, ЛОЖЬ)
		|				ТОГДА 0
		|			ИНАЧЕ ДанныеОСдельномЗаработке.СуммаЗаработка
		|		КОНЕЦ", "") + 
		?(НеобходимыеДанные.ОтработаноВремени, "
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВДнях)  
		|		ТОГДА ВЫБОР
		|			КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
		|				ТОГДА 0
		|			КОГДА Основной.ВидРасчета" + НазваниеРеквизитаВидУчетаРабочегоВремени + " НЕ В
		|				(ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка),
		|				 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные),
		|				 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы),
		|				 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы),
		|				 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа))
		|				И НЕ ОтработаноПоВидуВремениНачисления.Дней ЕСТЬ NULL
		|				ТОГДА
		|					ЕСТЬNULL(ОтработаноПоВидуВремениНачисления.Дней, 0)
		|			ИНАЧЕ " + ?(ВидПВР = "УправленческиеНачисления", "
		|					 ЕСТЬNULL(ВЫБОР
		|						КОГДА Основной.ВидУчетаВремени = &ПоДням
		|							ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
		|						ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
		|						КОНЕЦ, 0)", "
		|					 ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ДнейПоТабелю, ВЫБОР
		|								КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
		|									ТОГДА 0
		|								ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.ДнейПоГрафику, ЕСТЬNULL(ВЫБОР
		|												КОГДА Основной.ВидУчетаВремени = &ПоДням
		|													ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
		|												ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
		|											КОНЕЦ, 0))
		|							КОНЕЦ)") + "
		|		КОНЕЦ 
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВЧасах)
		|		ТОГДА ВЫБОР
		|			КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
		|				ТОГДА 0
		|			КОГДА Основной.ВидРасчета" + НазваниеРеквизитаВидУчетаРабочегоВремени + " НЕ В
		|				(ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка),
		|				 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные),
		|				 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы),
		|				 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы),
		|				 ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа))
		|				И НЕ ОтработаноПоВидуВремениНачисления.Часов ЕСТЬ NULL
		|				ТОГДА
		|					ЕСТЬNULL(ОтработаноПоВидуВремениНачисления.Часов, 0)
		|			ИНАЧЕ " + ?(ВидПВР = "УправленческиеНачисления", "
		|					ЕСТЬNULL(ВЫБОР
		|						КОГДА Основной.ВидУчетаВремени = &ПоДням
		|							ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
		|						ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
		|						КОНЕЦ, 0)", "
		|					ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ЧасовПоТабелю, ВЫБОР
		|							КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
		|								ТОГДА 0
		|							ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.ЧасовПоГрафику, ЕСТЬNULL(ВЫБОР
		|											КОГДА Основной.ВидУчетаВремени = &ПоДням
		|												ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
		|											ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
		|										КОНЕЦ, 0)) - ЕСТЬNULL(ВремяПоТабелю.ОтработаноЧасовПоТабелюОтклонение, 0)
		|						КОНЕЦ)") + "
		|		КОНЕЦ" + 
		?(НеобходимыеДанные.ВсегоОтработаноВремени, "
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ОтработаноВремениВДнях)  
		|		ТОГДА ВЫБОР
		|			КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
		|				ТОГДА 0
		|			ИНАЧЕ ЕСТЬNULL(ВсегоОтработаноВремени.ВсегоОтработаноДней, 0)
		|		КОНЕЦ 
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ОтработаноВремениВЧасах)
		|		ТОГДА ВЫБОР
		|			КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
		|				ТОГДА 0
		|			ИНАЧЕ ЕСТЬNULL(ВсегоОтработаноВремени.ВсегоОтработаноЧасов - ЕСТЬNULL(ВремяПоТабелю.ОтработаноЧасовПоТабелюОтклонение, 0), 0)
		|		КОНЕЦ",""), "") +
		?(НеобходимыеДанные.НормаВремениЗаМесяц, "
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.НормаВремениВДнях)
		|		ТОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаДнейПоГрафику, ВЫБОР 
		|																			КОГДА Основной.ВидУчетаВремени = &ПоДням 
		|																				ТОГДА ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия 
		|																				ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеНормаПериодДействия 
		|																		КОНЕЦ)
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.НормаВремениВЧасах)
		|		ТОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику, ВЫБОР 
		|																			КОГДА Основной.ВидУчетаВремени = &ПоДням 
		|																				ТОГДА ДанныеГрафика.ДополнительноеЗначениеНормаПериодДействия 
		|																				ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия 
		|																		КОНЕЦ)", "");
		
		
		Для Каждого ВидСтажа Из МассивСтажей Цикл
			
			КодСтажа = "Стаж_"+СокрП(ВидСтажа.Значение); // код стажа
			
			Показатель1Текст = Показатель1Текст +
			"	КОГДА Показатели.Показатель1.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Стаж) И Показатели.Показатель1.ВидСтажа = "+КодСтажа+".ВидСтажа 
			|	ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(" + КодСтажа+".ДатаОтсчета, МЕСЯЦ, -" + КодСтажа+".РазмерМесяцев), ДЕНЬ, -" + КодСтажа+".РазмерДней), Основной.ПериодДействияКонец, МЕСЯЦ)
			|";
		КонецЦикла;
		
		Показатель1Текст = Показатель1Текст +		
		?(НеобходимыеДанные.База, "
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБаза)
		|		ТОГДА ЕСТЬNULL(База.РезультатБаза,0)", "");	
		Если Предопределенный Тогда
			
			Показатель1Текст = Показатель1Текст + "				
			|ИНАЧЕ 0
			|КОНЕЦ ";
		Иначе
			Показатель1Текст = Показатель1Текст + "				
			|ИНАЧЕ ВЫБОР КОГДА Показатели.Показатель1.ТипПоказателя В (&ШкальныеПоказатели)
			|		ТОГДА Показатели.Показатель1
			|	    ИНАЧЕ  Основной.Показатель1 / ВЫБОР КОГДА Показатели.Показатель1.ТипПоказателя В (&ПроцентныеПоказатели) ТОГДА 100 ИНАЧЕ 1 КОНЕЦ
			|КОНЕЦ КОНЕЦ";
			
		КонецЕсли;
	Иначе
		Если Предопределенный Тогда
			
			Показатель1Текст = Показатель1Текст + "				
			|ИНАЧЕ 0
			|КОНЕЦ ";
		Иначе
			
			Показатель1Текст = "ВЫБОР 
			|КОГДА Показатели.Показатель1.ТипПоказателя В (&ШкальныеПоказатели)
			|		ТОГДА Показатели.Показатель1
			|	  	ИНАЧЕ  Основной.Показатель1 / ВЫБОР КОГДА Показатели.Показатель1.ТипПоказателя В (&ПроцентныеПоказатели) ТОГДА 100 ИНАЧЕ 1 КОНЕЦ
			|КОНЕЦ";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Показатель1Текст;
	
КонецФункции //ПолучитьТекстПоказателя

// Формирует текстовую интерпретацию формулы по способу расчета и показателям для отображения
// на экране.
//
// Параметры
//  Объект - ПланВидовРасчетаОбъект для ПВР УправленческиеНачисления или УправленческиеУдержания
//	Режим - "Текст" - форумал выводится в виде текста, "HTML" - в виде HTML кода, по умолчанию = "Текст"
// Возвращаемое значение:
//   Строка   – содержит текстовую интерпретацию формулы расчета.
//
Функция ВизуализироватьФормулуРасчета(Объект, Режим = "Текст") Экспорт

	СпособРасчета = Объект.СпособРасчета;
	
	Если Режим = "HTML" Тогда
			
		СтрокаФормулы ="
		|	<HTML><HEAD>
		|	</HEAD>
		|	<BODY vlink=#000 link=#000 scroll=auto rightMargin=0><FONT face=""MS Sans Serif"" size=1>
		|";

	КонецЕсли;
    
	Если  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксСуммойПропорционльноОтработанномуВремени Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма> / <Норма времени за месяц в днях> * <Отработанное время в днях>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT> поделить на <FONT color=#993366><Норма времени за месяц в днях></FONT> умножить на <FONT color=#993366><Отработанное время в днях></FONT>"			
		КонецЕсли;
						
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоРазмераМинимальнойЗарплаты Тогда
		
	
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Максимум(<Часовая минимальная зарплата > * <Отработанное время в часах> - <Расчетная база>,<0>)"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат =  Максимум(<FONT color=#993366><Часовая минимальная зарплата ></FONT>  умножить на <FONT color=#993366><Отработанное время в днях></FONT> вычесть <FONT color=#993366> <Расчетная база> </FONT>,<FONT color=#993366><0>)</FONT>"			
		КонецЕсли;	
						
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоРазмераМЗПотМесячнойМЗП Тогда
		
	
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Максимум(<Месячная минимальная зарплата > / <Норма времени за месяц в часах> * <Отработанное время в часах> - <Расчетная база>,<0>)"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат =  Максимум(<FONT color=#993366><Месячная минимальная зарплата ></FONT> поделить на <FONT color=#993366><Норма времени за месяц в часах></FONT>  умножить на <FONT color=#993366><Отработанное время в днях></FONT> вычесть <FONT color=#993366> <Расчетная база> </FONT>,<FONT color=#993366><0>)</FONT>"			
		КонецЕсли;						
						
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаЗаместительство Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "(<Должностной (тарифный) оклад замещаемого> - <Должностной (тарифный) оклад замещающего>)/ <Норма времени за месяц в часах> * <Отработанное время в часах>"	
		Иначе               
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#993366><Должностной (тарифный) оклад замещаемого></FONT> вычесть <FONT color=#993366><Должностной (тарифный) оклад замещающего></FONT>  поделить на <FONT color=#993366><Норма времени за месяц в часах></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаСовмещениеПоОкладу Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка (оклад) замещаемого> / <Норма времени за месяц в часах> * <Отработанное время в часах>  * <Процент доплаты> "	
		Иначе               
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#993366><Тарифная ставка (оклад) замещаемого></FONT>  поделить на <FONT color=#993366><Норма времени за месяц в часах></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT> умножить на <FONT color=#993366><Процент доплаты>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаСовмещениеПоТарифу Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы =  "<Часовая тарифная ставка замещаемого> * <Отработанное время в часах>  * <Процент доплаты> "	
		Иначе               
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#993366><Часовая тарифная ставка замещаемого></FONT>  умножить на <FONT color=#993366><Отработанное время в часах></FONT> умножить на <FONT color=#993366><Процент доплаты>"
		КонецЕсли;						
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>, до удержания указанной в документе суммы";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма>, до удержания указанной в документе суммы</FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Сдельная выработка>";		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Сдельная выработка></FONT>"			
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<0>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><0></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<От обратного>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><От обратного></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3Лет Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Пособие на ребенка до 3х лет>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Пособие на ребенка до 3х лет></FONT>"
		КонецЕсли;

	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Пособие на ребенка до 3х лет 50 % БПМ>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Пособие на ребенка до 3х лет 50 % БПМ></FONT>"
		КонецЕсли;	

	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Пособие на ребенка-ивалида до 3х лет 100 % БПМ>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Пособие на ребенка-ивалида до 3х лет 100></FONT>"
		КонецЕсли;
						
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Пособие на ребенка-ивалида после 3х лет 120 % БПМ>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Пособие на ребенка-инвалида после 3х лет 120 % БПМ></FONT>"
		КонецЕсли;
						
						
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3ЛетНаВторого Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Пособие на ребенка до 3х лет на второго и последующих детей>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Пособие на ребенка до 3х лет на второго и последующих детей></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Пособие на ребенка до 3х лет на ребенка-инвалида>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Пособие на ребенка до 3х лет на ребенка-инвалида></FONT>"
		КонецЕсли;					
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка> * <Отработанное время в днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка></FONT> умножить на <FONT color=#993366><Отработанное время в днях></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка> * <Отработанное время в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"						
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент оплаты> * <Расчетная база>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Процент оплаты></FONT> умножить на <FONT color=#993366><Расчетная база></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистВПрожиточныхМинимумах Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Доля в процентах> * <Величина прожиточного минимума>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Доля в процентах</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff><Величина прожиточного минимума></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент сбора> * <Сумма по исполнительному листу>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Процент сбора></FONT> умножить на <FONT color=#993366><Сумма по исполнительному листу></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.КомиссионыйСбор Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент сбора> * <Сумма по исполнительному листу>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Процент сбора></FONT> умножить на <FONT color=#993366><Сумма по исполнительному листу></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент удержаний> * (<Расчетная база> - <Исчисленный ПН и ПФ>)"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Процент удержаний></FONT> умножить на <FONT color=#993366>(<Расчетная база> за вычетом <Исчисленный ПН и ПФ>)</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент удержаний> * (<Расчетная база> - <Исчисленный ПН и ПФ>), до удержания указанной в документе суммы"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Процент удержаний></FONT> умножить на <FONT color=#993366>(<Расчетная база> за вычетом <Исчисленный ПН и ПФ>), до удержания указанной в документе суммы</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Часовая тарифная ставка> * <Процент доплаты> * <Вечернее время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Часовая тарифная ставка></FONT> умножить на <FONT color=#993366><Процент доплаты></FONT> умножить на <FONT color=#993366><Вечернее время в часах></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Часовая тарифная ставка> * <Процент доплаты> * <Ночное время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Часовая тарифная ставка></FONT> умножить на <FONT color=#993366><Процент доплаты></FONT> умножить на <FONT color=#993366><Ночное время в часах></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку 
		Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Тогда		
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний дневной (часовой) заработок> * <Время в днях (часах)>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Средний дневной (часовой) заработок></FONT> умножить на <FONT color=#993366><Время в днях (часах)></FONT>"			
		КонецЕсли;

	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуОтпускаПоБеременности 
		ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням		
		ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСЗН Тогда		
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний дневной заработок> * <Время в календарных днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Средний дневной заработок></FONT> умножить на <FONT color=#993366><Время в календарных днях></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтпускПоБеременностиОтБПМ Тогда		
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<50% от Бюджета прожиточного минимума в среднем на душу населения>/<Количество календарных дней в месяце>*<Время в календарных днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><50% от Бюджета прожиточного минимума в среднем на душу населения></FONT> разделить на <FONT color=#993366><Количество календарных дней в месяце></FONT>  умножить на <FONT color=#993366><Время в календарных днях></FONT>"			
		КонецЕсли;
		
		
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСтарше3Лет Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Пособие на ребенка старше 3-х лет>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Пособие на ребенка старше 3-х лет></FONT>"			
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Пособие на ребенка старше 3-х лет на ребенка инвалида>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Пособие на ребенка старше 3-х лет на ребенка инвалида></FONT>"			
		КонецЕсли;
						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний дневной заработок> * <Время в днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Средний дневной заработок></FONT> умножить на <FONT color=#993366><Время в днях></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка (оклад)> / <Норма времени за месяц в днях> * <Отработанное время в днях>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка (оклад)></FONT> поделить на <FONT color=#993366><Норма времени за месяц в днях></FONT> умножить на <FONT color=#993366><Отработанное время в днях></FONT>"			
		КонецЕсли;			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка (оклад)> / <Норма времени за месяц в часах> * <Отработанное время в часах>"								
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка (оклад)></FONT> поделить на <FONT color=#993366><Норма времени за месяц в часах></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала дневной тарифной ставки> умножить на <Отработанное время в днях>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Стаж></FONT> оценить по <FONT color=#993366><Шкала дневной тарифной ставки></FONT> умножить на <FONT color=#993366><Отработанное время в днях></FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала месячной тарифной ставки>  / <Норма времени за месяц в днях> умножить на <Отработанное время в днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Стаж></FONT> оценить по <FONT color=#993366><Шкала месячной тарифной ставки></FONT> поделить на <FONT color=#993366><Норма времени за месяц в днях></FONT> умножить на <FONT color=#993366><Отработанное время в днях></FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала часовой тарифной ставки> * <Отработанное время в часах>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Стаж></FONT> оценить по <FONT color=#993366><Шкала часовой тарифной ставки></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала месячной тарифной ставки>  / <Норма времени за месяц в часах> * <Отработанное время в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Стаж></FONT> оценить по <FONT color=#993366><Шкала месячной тарифной ставки></FONT> поделить на <FONT color=#993366><Норма времени за месяц в часах></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала процентов оплаты> * <Расчетная база>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Стаж></FONT> оценить по <FONT color=#993366><Шкала процентов оплаты></FONT> умножить на <FONT color=#993366><Расчетная база></FONT>"			
		КонецЕсли;						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Северный стаж> оценить по <Шкала надбавок> * <Расчетная база>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Северный стаж></FONT> оценить по <FONT color=#993366><Шкала надбавок></FONT> умножить на <FONT color=#993366><Расчетная база></FONT>"			
		КонецЕсли;						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Максимум(<Средний заработок> - <Начислено>, <0>)";		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = Максимум(<FONT color=#993366><Средний заработок></FONT> вычесть <FONT color=#993366><Начислено></FONT> , <FONT color=#993366><0>)</FONT>"		
		КонецЕсли;
			
	//РБ	
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеМатериОдиночкеДо1_5лет Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеМатериОдиночкеДо3Лет Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаВИЧ Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо18ЛетНадб40 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3Лет Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT>"
		КонецЕсли;
		
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаДо3Лет50ПроцентовБПМ Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT>"
		КонецЕсли;		

	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалидаДо3Лет100ПроцентовБПМ Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT>"
		КонецЕсли;
						
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалидаПосле3Лет120ПроцентовБПМ Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT>"
		КонецЕсли;
						
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаИнвалида Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНаРебенкаСНадбавкой40До3Лет Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериНадб40До3Лет Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериОдиночкеДо1_5Лет Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРабМатериОдиночкеДо3Лет Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеНеРаботающейМатериДо3Лет Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйПриработок Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Сдельная выработка> - <Тарифная ставка> * <Отработанное время в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Сдельная выработка></FONT> вычесть <FONT color=#993366><Тарифная ставка></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"			
		КонецЕсли;
	//vvv		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйПриработокВодителей Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Сдельная выработка водителя> - <Тарифная ставка водителя> * <Отработанное время в часах на сделке>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Сдельная выработка водителя></FONT> вычесть <FONT color=#993366><Тарифная ставка водителя></FONT> умножить на <FONT color=#993366><Отработанное время в часах на сделке></FONT>"			
		КонецЕсли;
	//vvv	
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйПриработокМесячнаяСтавкаЧасы Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "(<Сдельная выработка> - <Сумма выслуги>) / (1+<Процент премии>/100)- <Тарифная ставка (оклад)> поделить на <Норма времени за месяц в часах> * <Отработанное время в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = (<FONT color=#993366><Сдельная выработка></FONT> вычесть <FONT color=#993366><Сумма выслуги></FONT>) поделить на (1 прибавить <FONT color=#993366><Процент премии></FONT> поделить на 100) вычесть <FONT color=#993366><Тарифная ставка (оклад)></FONT> поделить на <FONT color=#993366><Норма времени за месяц в часах></FONT>умножить на <FONT color=#993366><Отработанное время в часах></FONT>"			
		КонецЕсли;
	//vvv					
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Часовая тарифная ставка> * <Процент доплаты> * <Отработанное время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Часовая тарифная ставка></FONT> умножить на <FONT color=#993366><Процент доплаты></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"			
		КонецЕсли;						
	//vvv					
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоИнойЧасовойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Часовая тарифная ставка, отличная от ставки сотрудника> * <Процент доплаты> * <Отработанное время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Часовая тарифная ставка, отличная от ставки сотрудника></FONT> умножить на <FONT color=#993366><Процент доплаты></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"			
		КонецЕсли;	
	//vvv					
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоИнойМесячнойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Месячная тарифная ставка, отличная от ставки сотрудника> / <Норма времени за месяц в часах> * <Отработанное время в часах> * <Процент доплаты>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Месячная тарифная ставка, отличная от ставки сотрудника></FONT> поделить на <FONT color=#993366><Норма времени за месяц в часах></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>умножить на <FONT color=#993366><Процент доплаты></FONT>"			
		КонецЕсли;		
	//vvv					
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоВычисляемойЧасовойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент оплаты> * <Расчетная база> / <Отработанное время по базе> * <Отработанное время>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Процент оплаты></FONT> умножить на <FONT color=#993366><Расчетная база></FONT> разделить на <FONT color=#993366><Отработанное время по базе></FONT> умножить на <FONT color=#993366><Отработанное время></FONT> "			
		КонецЕсли;	
	//vvv					
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителей Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка> * <Отработанное время в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"						
		КонецЕсли;	
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителейБезВыезда Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка> * <Отработанное время без выезда в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка></FONT> умножить на <FONT color=#993366><Отработанное время без выезда в часах></FONT>"						
		КонецЕсли;					
    //vvv					
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавкеВодителей Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка> * <Отработанное время на сделке в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка></FONT> умножить на <FONT color=#993366><Отработанное время на сделке в часах></FONT>"						
							
		КонецЕсли;
	//vvv					
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомСКТУ Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент оплаты> * <Расчетная база, с учетом КТУ>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Процент оплаты></FONT> умножить на <FONT color=#993366><Расчетная база, с учетом КТУ></FONT>"			
		КонецЕсли;
	//vvv	
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителейРемонт Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка> * <Отработанное время на ремонте в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка></FONT> умножить на <FONT color=#993366><Отработанное время на ремонте в часах></FONT>"						
		КонецЕсли;
	//vvv					
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеВодителейРемонтПлановый Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка> * <Отработанное время на плановом ремонте в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка></FONT> умножить на <FONT color=#993366><Отработанное время на плановом ремонте в часах></FONT>"						
		КонецЕсли;					
	//vvv					
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоРазницеМеждуЧасовымиСтавками Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "(<Тарифная ставка расчетная> - <Тарифная ставка фактическая>) * <Отработанное время в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = (<FONT color=#993366><Тарифная ставка расчетная></FONT> отнять <FONT color=#993366><Тарифная ставка фактическая></FONT>) умножить на <FONT color=#993366><Отработанное время в часах></FONT>"						
		КонецЕсли;						
	//vvv					
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеВодители Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Часовая тарифная ставка> * <Процент доплаты> * <Отработанное время в часах> * (1 - <Процент снижения>)"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Часовая тарифная ставка></FONT> умножить на <FONT color=#993366><Процент доплаты></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT> умножить на (1 отнять <FONT color=#993366><Процент снижения></FONT>)"			
		КонецЕсли;
	//vvv					
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтСдельногоЗаработкаВодителей Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<СдельнаяВыработка> * <Процент доплаты> * <Отработанное время на сделке в часах> * (1 - <Процент снижения>)"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><СдельнаяВыработка></FONT> умножить на <FONT color=#993366><Процент доплаты></FONT> умножить на <FONT color=#993366><Отработанное время на сделке в часах></FONT> умножить на (1 отнять <FONT color=#993366><Процент снижения></FONT>)"			
		КонецЕсли;					
	//vvv					
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ЕжемесячнаяПремия Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Расчетная база> * <Процент премии, введенный в табеле> * (1 - <Процент снижения>)"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Расчетная база></FONT> умножить на <FONT color=#993366><Процент премии, введенный в табеле></FONT> умножить на (1 отнять <FONT color=#993366><Процент снижения></FONT>)"			
		КонецЕсли;								
	//vvv	
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомСоСнижением Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Расчетная база> * <Процент оплаты> * (1 - <Процент снижения>)"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Расчетная база></FONT> умножить на <FONT color=#993366><Процент оплаты></FONT> умножить на (1 отнять <FONT color=#993366><Процент снижения></FONT>)"			
		КонецЕсли;	
	//vvv					
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеРемонт Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Часовая тарифная ставка> * <Процент доплаты> * <Отработанное время на ремонте в часах> * (1 - <Процент снижения>)"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Часовая тарифная ставка></FONT> умножить на <FONT color=#993366><Процент доплаты></FONT> умножить на <FONT color=#993366><Отработанное время на ремонте в часах></FONT> умножить на (1 отнять <FONT color=#993366><Процент снижения></FONT>)"			
		КонецЕсли;	
	//vvv					
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавкеРемонтПлановый Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Часовая тарифная ставка> * <Процент доплаты> * <Отработанное время на плановом ремонте в часах> * (1 - <Процент снижения>)"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Часовая тарифная ставка></FONT> умножить на <FONT color=#993366><Процент доплаты></FONT> умножить на <FONT color=#993366><Отработанное время на плановом ремонте в часах></FONT> умножить на (1 отнять <FONT color=#993366><Процент снижения></FONT>)"			
		КонецЕсли;		
	//vvv
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаКоличествомБазовых Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала базовых величин> * <Размер базовой величины>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Стаж></FONT> оценить по <FONT color=#993366><Шкала базовых величин></FONT> умножить на <FONT color=#993366><Размер базовой величины></FONT>"			
		КонецЕсли;
	//vvv					
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаФиксированнойСуммой Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала фиксированных сумм>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Стаж></FONT> оценить по <FONT color=#993366><Шкала фиксированных сумм></FONT>"			
		КонецЕсли;					
	//vvv	
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуИзФМП Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Годовая премия, включенная в средний дневной (часовой) заработок> * <Время в днях (часах)>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Годовая премия, включенная в средний дневной (часовой) заработок></FONT> умножить на <FONT color=#993366><Время в днях (часах)></FONT>"			
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксСуммойПропорционльноОтработанномуВремениПоЧасам Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма> / <Норма времени за месяц в часах> * <Отработанное время в часах>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT> поделить на <FONT color=#993366><Норма времени за месяц в часах></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"			
		КонецЕсли;											
    ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Индексация Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "?(<Расчетная база> > <БПМ> , <БПМ> * <Процент оплаты> , <Расчетная база> * <Процент оплаты> "	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = Если <FONT color=#993366><Расчетная база></FONT> больше, чем  <FONT color=#993366><БПМ></FONT> тогда <FONT color=#993366><БПМ></FONT> умножить на <FONT color=#993366><Процент оплаты></FONT>, иначе <FONT color=#993366><Расчетная база></FONT> умножить на <FONT color=#993366><Процент оплаты></FONT>"			
		КонецЕсли;											
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.КТУ Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка (оклад)> / <Норма времени за месяц в часах> * <Отработанное время в часах>*КТУ-<Тарифная ставка (оклад)> / <Норма времени за месяц в часах> * <Отработанное время в часах>"								
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка (оклад)></FONT> поделить на <FONT color=#993366><Норма времени за месяц в часах></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT> умножить на <FONT color=#993366><КТУ></FONT> вычесть <FONT color=#993366><Тарифная ставка (оклад)></FONT> поделить на <FONT color=#993366><Норма времени за месяц в часах></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоРазрядаПропорциональноОтработанномуВремени Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка первого разряда> / <Среднемесячная норма часов> * <Процент оплаты> * <Отработанное время в часах> "		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка первого разряда></FONT> разделить на <FONT color=#993366><Среднемесячная норма часов></FONT> умножить на <FONT color=#993366><Процент оплаты></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"			
		КонецЕсли;
	//					
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоРазряда Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка первого разряда> *<Процент оплаты> * <Отработанное время в часах> "		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка первого разряда></FONT> умножить на <FONT color=#993366><Процент оплаты></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаОтСтавкиПервогоСотрудника Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка первого разряда сотрудника> *<Процент оплаты> * <Отработанное время в часах> "		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка первого разряда сотрудника></FONT> умножить на <FONT color=#993366><Процент оплаты></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"			
		КонецЕсли;


						
	ИначеЕсли Объект.ПроизвольнаяФормулаРасчета Тогда
		
		ФормулаРасчета	= Объект.ФормулаРасчета;
		
		ФормулаРасчета	= СтрЗаменить(ФормулаРасчета, "ПроведениеРасчетов.", "");
		
		СимволыДляЗамены = "/=-+*()?<,";
		
		Если Режим = "Текст" Тогда
			
			// заменим подставим вместо ИсходныеДанные.ПоказательN нужные показатели
			СтрокаФормулы = ПолучитьHTLMКодФормулыРасчета(ФормулаРасчета, Объект.Показатели, Режим);
			
		Иначе
			
			НоваяФормулаРасчета = "";
			Для НомерСимвола = 1 По СтрДлина(ФормулаРасчета) Цикл
				Символ = Сред(ФормулаРасчета,НомерСимвола,1);
				Если Найти(СимволыДляЗамены,Символ) > 0 Тогда
					НоваяФормулаРасчета = НоваяФормулаРасчета + "<FONT color=#FF0000>" + Символ + "</FONT>"; 
				Иначе
					НоваяФормулаРасчета = НоваяФормулаРасчета + Символ;
				КонецЕсли;
			КонецЦикла;	
			
			ФормулаРасчета = НоваяФормулаРасчета;
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " NOT ", "<FONT color=#FF0000> NOT </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " OR ", "<FONT color=#FF0000> OR </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " AND ", "<FONT color=#FF0000> AND </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " И ", "<FONT color=#FF0000> И </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " ИЛИ ", "<FONT color=#FF0000> ИЛИ </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " НЕ ", "<FONT color=#FF0000> НЕ </FONT>"); 
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " not ", "<FONT color=#FF0000> not </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " or ", "<FONT color=#FF0000> or </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " and ", "<FONT color=#FF0000> and </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " и ", "<FONT color=#FF0000> и </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " или ", "<FONT color=#FF0000> или </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " не ", "<FONT color=#FF0000> не </FONT>");
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Not ", "<FONT color=#FF0000> Not </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Or ", "<FONT color=#FF0000> Or </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " And ", "<FONT color=#FF0000> And </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Или ", "<FONT color=#FF0000> Или </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Не ", "<FONT color=#FF0000> Не </FONT>");		
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Цел", "<FONT color=#0000ff>Цел</FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Окр", "<FONT color=#0000ff>Окр</FONT>");
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Макс", "<FONT color=#0000ff>Макс</FONT>");
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Мин", "<FONT color=#0000ff>Мин</FONT>");
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "ОценитьПо", "<FONT color=#0000ff>ОценитьПо</FONT>");		
			
			СтрокаФормулы = СтрокаФормулы + "Результат = " +  ПолучитьHTLMКодФормулыРасчета(ФормулаРасчета, Объект.Показатели, Режим);
			
		КонецЕсли;
					
	Иначе
		СтрокаФормулы = ""	
	КонецЕсли;
	
	Если Режим = "HTML" Тогда
		СтрокаФормулы = СтрокаФормулы + "
		|</font></html>"
	КонецЕсли;

	
    Возврат СтрокаФормулы;
	
КонецФункции // ВизуализироватьФормулуРасчета()

// Процедура обеспечивает ввод формульных начислений и удержаний
Процедура УстановитьПараметрыВидаРасчета(Параметр, Объект, Элементыформы) Экспорт
	
	Объект.ФормулаРасчета				= Параметр[0];
	Объект.СпособРасчета 				= Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула;
	Объект.ПроизвольнаяФормулаРасчета	= Истина;
	
	ПарамПоказатели = Параметр[1];
	
	ОбъектПоказатели = Объект.Показатели;
	ОбъектПоказатели.Очистить();
	Для Каждого ОбъектПоказатель Из ОбъектПоказатели Цикл
		Если ПарамПоказатели.Найти(ОбъектПоказатель.Показатель) = Неопределено Тогда
			ОбъектПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	Для Каждого Показатель Из ПарамПоказатели Цикл
		Если ОбъектПоказатели.Найти(Показатель,"Показатель") = Неопределено Тогда
			НовыйПоказатель				= Объект.Показатели.Добавить();
			
			Если Показатель.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная И
				Показатель.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая И
				Показатель.ВозможностьИзменения <> Перечисления.ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете И
				Показатель.ВозможностьИзменения <> Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно Тогда
				
				Если (Показатель.ТарифнаяСтавка Или Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная Или
					Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая Или
					Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная) Тогда
					Если Объект.Метаданные().Реквизиты.Найти("ЗачетОтработанногоВремени") = Неопределено Тогда
						НовыйПоказатель.ЗапрашиватьПриКадровыхПеремещениях = Ложь;
					ИначеЕсли Объект.ЗачетОтработанногоВремени Тогда
						НовыйПоказатель.ЗапрашиватьПриКадровыхПеремещениях = Истина;
					ИНаче
						НовыйПоказатель.ЗапрашиватьПриКадровыхПеремещениях = Ложь;
					КонецЕсли;
				Иначе
					НовыйПоказатель.ЗапрашиватьПриКадровыхПеремещениях = Истина;
				КонецЕсли;
			КонецЕсли;
			НовыйПоказатель.Показатель	= Показатель;
		КонецЕсли;
	КонецЦикла;
				
	Элементыформы.СпособРасчетаПредставление.УстановитьТекст(ВизуализироватьФормулуРасчета(Объект, "HTML"));
	
КонецПроцедуры


Процедура ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, ЭтоНачисление, Отказ, Заголовок, ИспользуютсяНачисленияВВалюте, СоответствиеВалютныеСпособыРасчета = Неопределено) Экспорт
	
	Если ВыборкаПоСтрокамДокумента.ПроизвольнаяФормулаРасчета Тогда
		Для СчПоказателя = 1 По Мин(ВыборкаПоСтрокамДокумента.КоличествоПоказателей, 6) Цикл
			ТипПоказателя = ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя + "ТипПоказателя"];
			ВозможностьИзменения = ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя + "ВозможностьИзменения"];
			ЗапрашиватьПриКадровыхПеремещениях = ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя + "ЗапрашиватьПриКадровыхПеремещениях"];
			Если ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется И ЗапрашиватьПриКадровыхПеремещениях
				Или ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.ИзменяетсяПриРасчете	Тогда
				
				// проверка постоянных показателей
				Если ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя] = 0 Тогда
					// размер 
					Если Не ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя + "Предопределенный"]
						и ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная
						и ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая
						и ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " не указан размер показателя " + ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя+"Наименование"], Отказ, Заголовок);
					КонецЕсли;
				КонецЕсли;
				Если ЭтоНачисление Тогда
					Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["ТарифныйРазряд" + СчПоказателя])
						и ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан размер тарифа " + ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя+"Наименование"], Отказ, Заголовок);
					КонецЕсли;	
				КонецЕсли;	
				// валюта (для денежного показателя)
				Если ИспользуютсяНачисленияВВалюте Тогда
					Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный 
						и НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["Валюта" + СчПоказателя]) 
						и ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке +  "не указана валюта!", Отказ, Заголовок);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ИспользуютсяНачисленияВВалюте Тогда
			// Валюта
			Если ВыборкаПоСтрокамДокумента.КоличествоПоказателей > 0 
				И (Не ЭтоНачисление Или Не ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда)
				И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Валюта1) 
				И СоответствиеВалютныеСпособыРасчета[ВыборкаПоСтрокамДокумента.СпособРасчета] 
				И СпособРасчетаТребуетРазмер(ВыборкаПоСтрокамДокумента.СпособРасчета) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задана валюта!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		// Размер оплаты
		Если ВыборкаПоСтрокамДокумента.КоличествоПоказателей > 0 И ВыборкаПоСтрокамДокумента.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить И СпособРасчетаТребуетРазмер(ВыборкаПоСтрокамДокумента.СпособРасчета) Тогда
			Если ЭтоНачисление И ВыборкаПоСтрокамДокумента.Показатель1 = 0 и Не ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан размер начисления!", Отказ, Заголовок);
			ИначеЕсли ЭтоНачисление И ВыборкаПоСтрокамДокумента.ТарифныйРазряд1.Пустая() И ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан разряд!", Отказ, Заголовок);
			ИначеЕсли Не ЭтоНачисление И ВыборкаПоСтрокамДокумента.Показатель1 = 0 Тогда 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан размер удержания!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
			
		
	КонецЕсли;
	
КонецПроцедуры //ПроверкаПоказаетелей

////////////////////////////////////////////////////////////////////////////////
// ИСПРАВЛЕНИЕ ДОКУМЕНТОВ

// Функция получает документ(ы), которым был исправлен расчетный документ
//
// Параметры
//  ДокументСсылка - ссылка на документ, включенный в механизм исправлений
//  Режим - строка, допустимые значения: "КритерийОтбора", "ТаблицаДокумента" 
//  ИмяДокумента - имя соответствующего объекта метаданных
//
// Возвращаемое значение:
//   Режим = "КритерийОтбора": массив документов-исправлений, возможно, пустой.
//   Режим = "ТаблицаДокумента": ссылка на документ того же вида, что и переданный параметр; 
//   или Неопределено, если документ-исправление не найден.
//
Функция ПолучитьДокументИсправление(ДокументСсылка = Неопределено, Режим = Неопределено, ИмяДокумента = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено	
	КонецЕсли;	
	
	Если Режим = Неопределено Тогда
		Режим = ?(ДокументСсылка.Метаданные().Реквизиты.Найти("Сотрудник") = Неопределено, "КритерийОтбора","ТаблицаДокумента")	
	КонецЕсли;
	
	Если Режим = "КритерийОтбора" Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументыИсправления.Ссылка
		|ИЗ
		|	КритерийОтбора.ДокументыИсправления(&ИсходныйДокумент) КАК ДокументыИсправления
		|";
	ИначеЕсли Режим = "ТаблицаДокумента" Тогда
		Если Не ЗначениеЗаполнено(ИмяДокумента) Тогда
			ИмяДокумента = ДокументСсылка.Метаданные().Имя;
		КонецЕсли;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументыИсправления.Ссылка
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК ДокументыИсправления
		|ГДЕ
		|	ДокументыИсправления.ПерерассчитываемыйДокумент = &ИсходныйДокумент";
	Иначе
		Возврат Неопределено	
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИсходныйДокумент",ДокументСсылка);
	Результат = Запрос.Выполнить();
	
	Если Режим = "КритерийОтбора" Тогда
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка
		Иначе
			Возврат Неопределено	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Функция получает документ(ы), которым был исправлен расчетный документ
//
// Параметры
//  ДокументСсылка - ссылка на документ, включенный в механизм исправлений
//  Режим - строка, допустимые значения: "КритерийОтбора", "ТаблицаДокумента" 
//
// Возвращаемое значение:
//   Режим = "КритерийОтбора": массив документов-исправлений, возможно, пустой.
//   Режим = "ТаблицаДокумента": ссылка на документ того же вида, что и переданный параметр; 
//   или Неопределено, если документ-исправление не найден.
//
Функция ПолучитьДокументСторнирование(ДокументСсылка = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено	
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыИсправления.Ссылка
	|ИЗ
	|	Документ.Сторнирование КАК ДокументыИсправления
	|ГДЕ
	|	ДокументыИсправления.СторнируемыйДокумент = &ИсходныйДокумент";
	
	Запрос.УстановитьПараметр("ИсходныйДокумент",ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка
	Иначе
		Возврат Документы.Сторнирование.ПустаяСсылка()
	КонецЕсли;
	
КонецФункции

// Определяет, можно ли изменять документ "задним числом", т.е. проверяет
//   отсутствие исправлений и сторнирований.
//
// Параметры
//  ДокументСсылка - ссылка на документ, включенный в механизм исправлений
//  ОписаниеПричиныОтказа - переменная, куда возвращается описание проблемы
//
// Возвращаемое значение:
//  булево
//
Функция ДокументНельзяИзменятьЗаднимЧислом(ДокументСсылка = Неопределено, ОписаниеПричиныОтказа = "") Экспорт 
	
	ОписаниеПричиныОтказа = "";
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Ложь
	ИначеЕсли ЗначениеЗаполнено(ПолучитьДокументИсправление(ДокументСсылка)) Тогда
		ОписаниеПричиныОтказа = "Документ был исправлен, перерасчет документа ""задним числом"" запрещен!";
		Возврат Истина
	ИначеЕсли ЗначениеЗаполнено(ПолучитьДокументСторнирование(ДокументСсылка)) Тогда
		ОписаниеПричиныОтказа = "Документ был сторнирован, перерасчет документа ""задним числом"" запрещен!";
		Возврат Истина
	КонецЕсли;
	
	Возврат Ложь
		
КонецФункции

// Создает набор записей регистра, описание объекта метаданных которого передано
//
// Параметры
//  Движение - Объект метаданных, описывающий регистр, по которому производится движение
//
// Возвращаемое значение:
//   новый набор записей переданного регистра
//
Функция НаборЗаписейПоОбъектуМетаданных(Движение)
	
	НаборЗаписей = Неопределено;
	
	Если Метаданные.РегистрыСведений.Содержит(Движение) Тогда
		НаборЗаписей = РегистрыСведений[Движение.Имя].СоздатьНаборЗаписей();
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(Движение) Тогда
		НаборЗаписей = РегистрыНакопления[Движение.Имя].СоздатьНаборЗаписей();
	КонецЕсли;
	
	Возврат НаборЗаписей;
	
КонецФункции // НаборДвиженийДокумента()

// Читает движения переданного документа, сохраняет их в соответствие,  
//  а затем очищает
//
// Параметры
//  ДокументСсылка - ДокументСсылка.<ИмяИсправляемогоДокумента>, исправляемый документ, 
//					чьи движения будут исправлены
//  СоответствиеДвижений - соответствие, в этот параметр возвращаются удаленные движения
//  Сотрудники, ФизЛица - соответствия, содержат сотрудников, физлиц, по которым следует  
//                  отбирать движения
//
// Возвращаемое значение:
//   нет
//
Процедура ОбработатьДвиженияИсправляемогоДокумента(ДокументСсылка = Неопределено, СоответствиеДвижений = Неопределено, Сотрудники = Неопределено, ФизЛица = Неопределено)
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат
	КонецЕсли;

	Если СоответствиеДвижений = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Режим = ?(МетаданныеДокумента.Реквизиты.Найти("Сотрудник") = Неопределено, "ПоНесколькимСотрудникам","ПоОдномуСотруднику");
	
	Если Режим = "ПоНесколькимСотрудникам" Тогда
		
		Если Не ЗначениеЗаполнено(Сотрудники) Тогда
			Возврат
		КонецЕсли;
		
		Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
			
			Если Движение.Измерения.Найти("Сотрудник") <> Неопределено Или Движение.Реквизиты.Найти("Сотрудник") <> Неопределено Тогда
				МассивПроверки = Сотрудники;
				ИмяПоля = "Сотрудник";
			ИначеЕсли Движение.Измерения.Найти("ФизЛицо") <> Неопределено Или Движение.Реквизиты.Найти("ФизЛицо") <> Неопределено Тогда
				МассивПроверки = ФизЛица;
				ИмяПоля = "ФизЛицо";
			Иначе 
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = НаборЗаписейПоОбъектуМетаданных(Движение);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура(ИмяПоля);
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			
			НаборЗаписей.Прочитать();
			ВременнаяТЗ = НаборЗаписей.Выгрузить();
			СохраненныеДвижения = СоответствиеДвижений.Получить(Движение.Имя);
			Если СохраненныеДвижения <> Неопределено Тогда
				Для Каждого Строка Из СохраненныеДвижения Цикл
					ЗаполнитьЗначенияСвойств(ВременнаяТЗ.Добавить(), Строка);
				КонецЦикла;
			КонецЕсли;
			
			УдаляемыеДвижения = ВременнаяТЗ.СкопироватьКолонки();
			Для каждого ОбъектПроверки Из МассивПроверки Цикл
				СтруктураПоиска[ИмяПоля] = ОбъектПроверки;
				МассивДвижений = ВременнаяТЗ.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаТЗ Из МассивДвижений Цикл
					ЗаполнитьЗначенияСвойств(УдаляемыеДвижения.Добавить(),СтрокаТЗ);
					ВременнаяТЗ.Удалить(СтрокаТЗ);
				КонецЦикла;
			КонецЦикла;
			СоответствиеДвижений.Вставить(Движение.Имя,УдаляемыеДвижения);
			НаборЗаписей.Загрузить(ВременнаяТЗ);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	ИначеЕсли Режим = "ПоОдномуСотруднику" Тогда
		
		Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
			
			НаборЗаписей = НаборЗаписейПоОбъектуМетаданных(Движение);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			НаборЗаписей.Прочитать();
			СоответствиеДвижений.Вставить(Движение.Имя,НаборЗаписей.Выгрузить());
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // ОбработатьДвиженияИсправляемогоДокумента()

// Восстанавливает движения для переданного документа из переданного соответствия
//
Процедура ВосстановитьДвиженияИсправляемогоДокумента(ДокументСсылка = Неопределено, СоответствиеДвижений = Неопределено)
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат
	КонецЕсли;

	Если СоответствиеДвижений = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Режим = ?(МетаданныеДокумента.Реквизиты.Найти("Сотрудник") = Неопределено, "ПоНесколькимСотрудникам","ПоОдномуСотруднику");	
	
	Если Режим = "ПоНесколькимСотрудникам" Тогда
		
		Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
			
			НаборЗаписей = НаборЗаписейПоОбъектуМетаданных(Движение);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ВременнаяТЗ = СоответствиеДвижений[Движение.Имя];
			Если ВременнаяТЗ <> Неопределено Тогда
				НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
				Для каждого СтрокаТЗ Из ВременнаяТЗ Цикл
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),СтрокаТЗ);
				КонецЦикла;
				НаборЗаписей.Записать(Ложь);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Режим = "ПоОдномуСотруднику" Тогда
		
		Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
			
			НаборЗаписей = НаборЗаписейПоОбъектуМетаданных(Движение);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			НаборЗаписей.Загрузить(СоответствиеДвижений[Движение.Имя]);
			НаборЗаписей.Записать(Ложь);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьДвиженияИсправляемогоДокумента()

// Заполняет документ-исправление по исходному кадровому документу
//
Процедура ЗаполнитьИсправлениеПоКадровомуДокументу(ЭтотОбъект, ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ЭтотОбъект.ИсправляемыйДокумент = ИсходныйДокумент;
	
	МД = ИсходныйДокумент.Метаданные();
	
	МассивНепереносимыхРеквизитов = Новый Массив;
	МассивНепереносимыхРеквизитов.Добавить("Проведен");
	МассивНепереносимыхРеквизитов.Добавить("Номер");
	МассивНепереносимыхРеквизитов.Добавить("Дата");
	МассивНепереносимыхРеквизитов.Добавить("ПометкаУдаления");
	МассивНепереносимыхРеквизитов.Добавить("Комментарий");
	МассивНепереносимыхРеквизитов.Добавить("Ответственный");
	МассивНепереносимыхРеквизитов.Добавить("КраткийСоставДокумента");
	МассивНепереносимыхРеквизитов.Добавить("ДанныеПрошлойВерсии");
	МассивНепереносимыхРеквизитов.Добавить("ИсправляемыйДокумент");
	МассивНепереносимыхРеквизитов.Добавить("ДвиженияИсправляемогоДокумента");
	
	Реквизиты = Новый Массив;
	Для Каждого Реквизит Из МД.Реквизиты Цикл
		Имя = Реквизит.Имя;
		Если МассивНепереносимыхРеквизитов.Найти(Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Реквизиты.Добавить(Имя);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИсходныйДокумент",	ИсходныйДокумент);
	Текст = "";
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Не ПустаяСтрока(Текст) Тогда
			Текст = Текст + ",";
		КонецЕсли;
		Текст = Текст + "
		|	Док." + Реквизит + " КАК " + Реквизит;
	КонецЦикла;
	Запрос.Текст =
	"ВЫБРАТЬ
	|"+Текст+"
	|ИЗ
	|	Документ." + МД.Имя + " КАК Док
	|ГДЕ
	|	Док.Ссылка = &ИсходныйДокумент
	|	И Док.Проведен";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудники",			Сотрудники);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам",	Сотрудники = Неопределено);
	
	Для Каждого МДТабличнаяЧасть Из МД.ТабличныеЧасти Цикл
		ЗаписиСторнируются	= МДТабличнаяЧасть.Реквизиты.Найти("Сторно") <> Неопределено;
		ЕстьСотрудник		= МДТабличнаяЧасть.Реквизиты.Найти("Сотрудник") <> Неопределено;
		
		РеквизитыТЧ = Новый Массив;
		Для Каждого РеквизитТЧ Из МДТабличнаяЧасть.Реквизиты Цикл
			Имя = РеквизитТЧ.Имя;
			Если Имя = "Сторно" Тогда
				Продолжить;
			КонецЕсли;
			РеквизитыТЧ.Добавить(Имя);
		КонецЦикла;
		
		Текст = "";
		Для Каждого РеквизитТЧ Из РеквизитыТЧ Цикл
			Текст = Текст + "
			|	Док." + РеквизитТЧ + " КАК " + РеквизитТЧ + ",";
		КонецЦикла;
		ТекстЗапроса =
		"ВЫБРАТЬ"+Текст+"
		|	Док.НомерСтроки
		|ПОМЕСТИТЬ ВТДок
		|ИЗ
		|	Документ." + МД.Имя + "." + МДТабличнаяЧасть.Имя + " КАК Док
		|ГДЕ
		|	Док.Ссылка = &ИсходныйДокумент
		|	И Док.Ссылка.Проведен
		|	" + ?(ЗаписиСторнируются, "И (НЕ Док.Сторно)", "") + "
		|	" + ?(ЕстьСотрудник, "И (&ПоВсемСотрудникам ИЛИ Док.Сотрудник В (&Сотрудники))", "") + "
		|;";
		
		Если ЗаписиСторнируются Тогда
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ИСТИНА КАК Сторно,
			|	Док.*
			|ИЗ
			|	ВТДок КАК Док
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЛОЖЬ,
			|	Док.*
			|ИЗ
			|	ВТДок КАК Док
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сторно УБЫВ,
			|	Док.НомерСтроки";
			
		Иначе
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	Док.*
			|ИЗ
			|	ВТДок КАК Док
			|
			|УПОРЯДОЧИТЬ ПО
			|	Док.НомерСтроки";
			
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		
		ЭтотОбъект[МДТабличнаяЧасть.Имя].Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправлениеКадровогоДокументаПередЗаписью(Отказ, РежимЗаписи, РежимПроведения, ЭтотОбъект, ВосстанавливатьДвижения, ИсправляемыйДокумент, СоответствиеДвижений) Экспорт
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Не ЭтотОбъект.ИсправляемыйДокумент.Пустая() Тогда
		Сотрудники	= Новый Массив;
		Физлица		= Новый Массив;
		Если ЭтотОбъект.Метаданные().ТабличныеЧасти.Найти("РаботникиОрганизации") = Неопределено Тогда
			Сотрудники.Добавить(ЭтотОбъект.Сотрудник);
			Физлица.Добавить(ЭтотОбъект.Физлицо);
			
		Иначе
			МассивСтрок = ЭтотОбъект.РаботникиОрганизации.НайтиСтроки(Новый Структура("Сторно", Истина));
			Для Каждого Строка Из МассивСтрок Цикл
				Если Сотрудники.Найти(Строка.Сотрудник) = Неопределено Тогда
					Сотрудники.Добавить(Строка.Сотрудник);
				КонецЕсли;
				Если Физлица.Найти(Строка.Физлицо) = Неопределено Тогда
					Физлица.Добавить(Строка.Физлицо);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		СоответствиеДвижений = ЭтотОбъект.ДвиженияИсправляемогоДокумента.Получить();
		Если СоответствиеДвижений = Неопределено Тогда
			СоответствиеДвижений = Новый Соответствие;
		КонецЕсли;
		ОбработатьДвиженияИсправляемогоДокумента(ЭтотОбъект.ИсправляемыйДокумент, СоответствиеДвижений, Сотрудники, Физлица);
		
		ЭтотОбъект.ДвиженияИсправляемогоДокумента = Новый ХранилищеЗначения(СоответствиеДвижений);
	КонецЕсли;
		
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		СоответствиеДвижений = ЭтотОбъект.ДвиженияИсправляемогоДокумента.Получить();
		Если СоответствиеДвижений <> Неопределено Тогда
			ЭтотОбъект.ДвиженияИсправляемогоДокумента	= Неопределено;
			
			Если ЭтотОбъект.ИсправляемыйДокумент.Пустая() Тогда
				Запрос = Новый Запрос;
				
				Запрос.УстановитьПараметр("ДокументСсылка",	ЭтотОбъект.Ссылка);
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Док.ИсправляемыйДокумент
				|ИЗ
				|	Документ." + ЭтотОбъект.Метаданные().Имя + " КАК Док
				|ГДЕ
				|	Док.Ссылка = &ДокументСсылка";
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ИсправляемыйДокумент = Выборка.ИсправляемыйДокумент;
					ВосстанавливатьДвижения		= Истина;
				КонецЕсли;
				
			Иначе
				ИсправляемыйДокумент = ЭтотОбъект.ИсправляемыйДокумент;
				ВосстанавливатьДвижения		= Истина;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправлениеКадровогоДокументаПриЗаписи(Отказ, ВосстанавливатьДвижения, ИсправляемыйДокумент, СоответствиеДвижений) Экспорт
	
	Если ВосстанавливатьДвижения Тогда
		ВосстановитьДвиженияИсправляемогоДокумента(ИсправляемыйДокумент, СоответствиеДвижений);
		ВосстанавливатьДвижения = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//vvv
////////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ КОНТРОЛЯ ПЕРИОДИЧЕСКИХ ВЫПЛАТ
//vvv
Функция ПолучитьНаборПериодическихВыплатПоДокументу(Ссылка, ДанныеДокумента = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	// Проверка в форме выполняется в ПередЗаписью, поэтому ссылки еще нет, 
	//  используем ДанныеДокумента, при проведении - используем ссылку
	
	Если ДанныеДокумента <> Неопределено Тогда
		
		ТекстЗапроса =  "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокумента.ДатаНачала КАК ПериодНачисления,
		|	ДанныеДокумента.Сотрудник КАК Сотрудник,
		|	ДанныеДокумента.ВидРасчета КАК ВидРасчета
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	&ДанныеДокумента КАК ДанныеДокумента";
		
		Запрос.УстановитьПараметр("ДанныеДокумента", ДанныеДокумента);
	
	Иначе		
	
		НаименованиеДокумента = Ссылка.Метаданные().Имя;
		
		Если НаименованиеДокумента = "НачислениеЗарплатыРаботникамОрганизаций" Тогда
			
			ТекстЗапроса =  "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка.ПериодНачисленияДатаНачала КАК ПериодНачисления,
			|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник КАК Сотрудник,
			|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета КАК ВидРасчета
			|ПОМЕСТИТЬ ВТДанныеДокумента
			|ИЗ
			|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления
			|ГДЕ
			|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка = &Ссылка
			|	И (НЕ НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сторно)";
			
		ИначеЕсли НаименованиеДокумента = "ПремииРаботниковОрганизаций" Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПремииРаботниковОрганизацийНачисления.Ссылка.ДатаНачалаБП КАК ПериодНачисления,
			|	ПремииРаботниковОрганизацийНачисления.Сотрудник КАК Сотрудник,
			|	ПремииРаботниковОрганизацийНачисления.Ссылка.ВидРасчета КАК ВидРасчета
			|ПОМЕСТИТЬ ВТДанныеДокумента
			|ИЗ
			|	Документ.ПремииРаботниковОрганизаций.Начисления КАК ПремииРаботниковОрганизацийНачисления
			|ГДЕ
			|	ПремииРаботниковОрганизацийНачисления.Ссылка = &Ссылка
			|	И (НЕ ПремииРаботниковОрганизацийНачисления.Сторно)";
			
		ИначеЕсли НаименованиеДокумента = "РегистрацияРазовыхНачисленийРаботниковОрганизаций" Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка.ПериодРегистрации КАК ПериодНачисления,
			|	РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Сотрудник КАК Сотрудник,
			|	РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.ВидРасчета КАК ВидРасчета
			|ПОМЕСТИТЬ ВТДанныеДокумента
			|ИЗ
			|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления
			|ГДЕ
			|	РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка = &Ссылка
			|	И (НЕ РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Сторно)";
			
		Иначе
		
			ПроведениеРасчетовПереопределяемый.ДополнитьТекстЗапросаНабораПериодическихВыплат(ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДополнительныеНачисленияОрганизаций.ПериодичностьНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.РазВГод)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеДокумента.ПериодНачисления, ГОД)
	|		КОГДА ДополнительныеНачисленияОрганизаций.ПериодичностьНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.РазВКвартал)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеДокумента.ПериодНачисления, КВАРТАЛ)
	|		КОГДА ДополнительныеНачисленияОрганизаций.ПериодичностьНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.РазВМесяц)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеДокумента.ПериодНачисления, МЕСЯЦ)
	|	КОНЕЦ КАК ПериодНачисления,
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ВидРасчета,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
	|		ПО ДанныеДокумента.ВидРасчета = ДополнительныеНачисленияОрганизаций.Ссылка
	|ГДЕ
	|	(НЕ ДополнительныеНачисленияОрганизаций.ПериодичностьНачисления В (ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.НеОпределена), ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.ПустаяСсылка)))";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
//vvv
Процедура ДобавитьДвиженияПериодическихВыплат(Движения, Ссылка) Экспорт
	
	Движения.ПериодическиеНачисления.Загрузить(ПолучитьНаборПериодическихВыплатПоДокументу(Ссылка));
	
КонецПроцедуры

// Выбирает из документов-исправлений сотрудников и помещает их в соответствие
//
// Параметры
//  ТекстЗапроса - строка. содержит текст запроса выора сотрудников
//  ДокументыИсправления - массив документов-исправлений
//  ИмяПоля - строка, имя поля запроса, содержащего сотрудника
//  ИмяПараметра - строка, имя параметра запроса, содержащего документы-исправления
//
// Возвращаемое значение:
//   Соответствие с сотрудниками документов исправлений
//
Функция СформироватьСоответствиеСотрудниковСИсправлениями(ТекстЗапроса = "", ДокументыИсправления = Неопределено, ИмяПоля = "Сотрудник", ИмяПараметра = "Исправления") Экспорт
                                                                             
	Сотрудники = Новый Соответствие;
	
	Если ПустаяСтрока(ТекстЗапроса) Или Не ЗначениеЗаполнено(ДокументыИсправления) Тогда
		Возврат	Сотрудники
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр(ИмяПараметра,ДокументыИсправления);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сотрудники.Вставить(Выборка[ИмяПоля], Истина);
	КонецЦикла;
	
	Возврат Сотрудники

КонецФункции // СформироватьСоответствиеСотрудниковСИсправлениями()

// Обработчик подписки ПередЗаписьюДокументаИсправление
// 
Процедура ПередЗаписьюДокументаПроверкаИсправленногоДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Или РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ЗначениеЗаполнено(ПолучитьДокументИсправление(Источник.Ссылка)) Тогда
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ТекстСообщенияОбОшибке = "Документ был исправлен, проведение документа запрещено!";
			Иначе 	
				ТекстСообщенияОбОшибке = "Документ был исправлен, отмена проведения документа запрещена!";
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ);
		ИначеЕсли ЗначениеЗаполнено(ПолучитьДокументСторнирование(Источник.Ссылка)) Тогда
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ТекстСообщенияОбОшибке = "Документ был сторнирован, проведение документа запрещено!";
			Иначе 	
				ТекстСообщенияОбОшибке = "Документ был сторнирован, отмена проведения документа запрещена!";
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Проверяет соответствует ли указанный код вычета коду дохода по НДФЛ
//
// Параметры
//  КодДохода - тип СправочникСсылка.ДоходыНДФЛ, код дохода
//  КодВычета - тип СправочникСсылка.ВычетыНДФЛ, проверяемый код вычета
//
// Возвращаемое значение:
//   булево - ответ на вопрос "соответствует ли?"
//
Функция ВычетСоответствуетДоходу(КодДохода = Неопределено, КодВычета = Неопределено, СоответствиеДоходовИВычетов = Неопределено) Экспорт
	
	Возврат КодВычета = КодДохода.КодВычета;
		
КонецФункции // ПроверитьСоответствиеДоходаИВычета()


// Процедура контролирует признак Запрашивать у показателей произвольной формулы так, 
// чтобы один и тот же показатель не мог быть запрошен в разных видах расчета одновременно, 
// так как это может привести к разным значениям одного и того же показателя
// Исключения составляют виды расчета, в которых этот признак уже был установлен ранее
//
Процедура ПроверитьУстановкуПризнакаЗапрашивать(ПВРОбъект, Отказ, ОбработкаКомментариев) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Показатели.Показатель КАК Показатель,
	|	Показатели.ЗапрашиватьПриКадровыхПеремещениях КАК ЗапрашиватьПриКадровыхПеремещениях
	|ПОМЕСТИТЬ ПоказателиСхемМотивации
	|ИЗ
	|	&Показатели КАК Показатели
	|;
	|";
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаВременнойТаблицыПоказателиВидаРасчета(ИменаПВРПоОдномуИзВР(ПВРОбъект.Ссылка));
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиСхемМотивации.Показатель КАК Показатель,
	|	ПоказателиУжеЗапрашиваются.ВидРасчета
	|ИЗ
	|	ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК ПоказателиУжеЗапрашиваются
	|		ПО ПоказателиСхемМотивации.Показатель = ПоказателиУжеЗапрашиваются.Показатель
	|			И (ПоказателиУжеЗапрашиваются.ЗапрашиватьПриКадровыхПеремещениях)
	|			И (ПоказателиУжеЗапрашиваются.ВидРасчета <> &Ссылка)
	|ГДЕ
	|	ПоказателиСхемМотивации.ЗапрашиватьПриКадровыхПеремещениях
	|	И (НЕ ПоказателиСхемМотивации.Показатель В
	|				(ВЫБРАТЬ
	|					ПоказателиВидаРасчета.Показатель
	|				ИЗ
	|					ПоказателиВидаРасчета КАК ПоказателиВидаРасчета
	|				ГДЕ
	|					ПоказателиВидаРасчета.ВидРасчета = &Ссылка
	|					И ПоказателиВидаРасчета.ЗапрашиватьПриКадровыхПеремещениях))
	|ИТОГИ ПО
	|	Показатель";
	
	// ошибкой является установка признака запрашивать для уже запрашиваемых в других видах расчета показателей, 
	// если этот признак не был установлен ранее
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ПВРОбъект.Ссылка);
	Запрос.УстановитьПараметр("Показатели", ПВРОбъект.Показатели.Выгрузить(, "Показатель, ЗапрашиватьПриКадровыхПеремещениях"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаПоПоказателям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПоказателям.Следующий() Цикл
			
			ОбработкаКомментариев.ДобавитьСообщение("Показатель формулы расчета " + ВыборкаПоПоказателям.Показатель + " уже запрашивается в нижеперечисленных видах расчета:", Перечисления.ВидыСообщений.Раздел);
			Выборка = ВыборкаПоПоказателям.Выбрать();
			Пока Выборка.Следующий() Цикл
				Расшифровки = Новый Массив;
				Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", Строка(Выборка.ВидРасчета), Выборка.ВидРасчета));	
				ОбработкаКомментариев.ДобавитьСообщение("", Перечисления.ВидыСообщений.ПустаяСсылка(), Расшифровки);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьУстановкуПризнакаЗапрашивать

Функция ИменаПВРПоОдномуИзВР(ПВРСсылка)
	
	ИменаПВР = Новый Массив;
	ИменаПВР.Добавить("ОсновныеНачисленияОрганизаций");
	ИменаПВР.Добавить("ДополнительныеНачисленияОрганизаций");
	ИменаПВР.Добавить("УдержанияОрганизаций");
	
	МассивыИменПВРПоТипу = Новый Соответствие;
	МассивыИменПВРПоТипу.Вставить(Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), ИменаПВР);
	МассивыИменПВРПоТипу.Вставить(Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций"), ИменаПВР);
	МассивыИменПВРПоТипу.Вставить(Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций"), ИменаПВР);
	
	ПроведениеРасчетовПереопределяемый.ДополнитьСоответствиеИменПВРПоТипу(МассивыИменПВРПоТипу);
	
	Возврат МассивыИменПВРПоТипу[ТипЗнч(ПВРСсылка)];
	
КонецФункции // ИменаПВРПоОдномуИзВР

Функция ТекстЗапросаВременнойТаблицыПоказателиВидаРасчета(ИменаПВР) Экспорт
	
	ТекстЗапроса = "";
	НомерПВР = 0;
	Пока НомерПВР < ИменаПВР.Количество() Цикл
		Если НомерПВР > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	Ссылка КАК ВидРасчета,
		|	Показатель КАК Показатель,
		|	ЗапрашиватьПриКадровыхПеремещениях КАК ЗапрашиватьПриКадровыхПеремещениях";
		Если НомерПВР = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ПОМЕСТИТЬ ПоказателиВидаРасчета";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	ПланВидовРасчета." + ИменаПВР[НомерПВР] + ".Показатели
		|";
		
		НомерПВР = НомерПВР + 1;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета,
	|	Показатель
	|;
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВременнойТаблицыПоказателиВидаРасчета


Функция ОкруглениеИспонительныхЛистов(Сумма)
	
	ПорядокОкругления = Константы.ОкруглениеСуммДляПеречислений.Получить();
	Если ПорядокОкругления = Перечисления.ПорядкиОкругления.ПоПостановлению Тогда
		
		Остаток = Сумма%100;
		Если Остаток < 50 Тогда
			Сумма = Окр(Сумма,-2,0);
		ИначеЕсли Остаток >=50 Тогда
			Сумма = Окр(Сумма,-2,1);
		КонецЕсли;
		
	Иначе
		
		Сумма = ОбщегоНазначения.ОкруглитьРезультат(Сумма,ПорядокОкругления);	
	КонецЕсли;
	
	Возврат Сумма
	
КонецФункции

//vvv
Функция ОкруглениеПособий(Сумма)
	
	ПорядокОкругления = Константы.ОкруглениеПособий.Получить();
	Если ПорядокОкругления = Перечисления.ПорядкиОкругления.ПоПостановлению Тогда
		
		Остаток = Сумма%100;
		Если Остаток<=49 Тогда
			Сумма = Окр(Сумма,-2,0);
		ИначеЕсли Остаток>50 Тогда
			Сумма = Окр(Сумма,-2,1);
		КонецЕсли;
		
	Иначе
		
		Сумма = ОбщегоНазначения.ОкруглитьРезультат(Сумма,ПорядокОкругления);	
	КонецЕсли;
	
	Возврат Сумма
	
КонецФункции
//vvv
//возвращает вид оплаты
Функция ОсновныеНачисленияСотрудника(Сотрудник,Организация,ПериодРегистрации) экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчетаИзмерение.СпособРасчета
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|			&ВыбДата,
	|			Сотрудник = &Сотрудник
	|				И Организация = &Организация
	|				И ВидРасчетаИзмерение.ЗачетНормыВремени = &Истина) КАК ПлановыеНачисленияРаботниковОрганизацийСрезПоследних";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	Запрос.УстановитьПараметр("ВыбДата",ПериодРегистрации);
	
	Выборка=Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если  Выборка.СпособРасчета=Перечисления.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке или
			Выборка.СпособРасчета=Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке Тогда
			Возврат Ложь;
			КонецЕсли;
	КонецЦикла;
	
	Возврат  Истина;
	
КонецФункции
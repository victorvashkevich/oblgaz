
// Функция формирует фамилию и инициалы либо по наименованию элемента спр-ка ФизическиеЛица
//  либо по переданным строкам.
//  Если передан Объект, то извлеченная из него строка считается совокупностью 
//  Фамилия + Имя + Отчество, разделенными пробелами.
//
// Параметры
//  Объект		- строка или ссылка или объект элемента спр-ка ФизическиеЛица.
//  Фамилия		- фамилия физ. лица.
//  Имя			- имя физ. лица.
//  Отчество	- отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия и Инициалы одной строкой. Побочные эффекты - переданная целая строка 
//  Побочные эффекты - переданная целая строка разбивается на подстроки, соответствующие
//  отдельным Фамилии,Имени и Отчеству
//
Функция ФамилияИнициалыФизЛица(Объект = "", Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект)," ");
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") или ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") ИЛИ
			  ТипОбъекта = Тип("СправочникСсылка.СотрудникиОрганизаций") или ТипОбъекта = Тип("СправочникОбъект.СотрудникиОрганизаций") Тогда
		ФИО = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект.Наименование)," ");
		
	Иначе
		
		// используем возможно переданные отдельные строки
		Возврат ?(НЕ ПустаяСтрока(Фамилия), 
				Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"")
	КонецЕсли;
			
	КоличествоПодстрок = ФИО.Количество();
	Фамилия = ?(КоличествоПодстрок > 0,ФИО[0],"");
	Имя		= ?(КоличествоПодстрок > 1,ФИО[1],"");
	Отчество= ?(КоличествоПодстрок > 2,ФИО[2],"");
	
	Возврат ?(НЕ ПустаяСтрока(Фамилия), 
				Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"");

КонецФункции


// Выполняет расчет часовой тарифной ставки работника
// Возвращает результат с учетом курса валюты тарифной ставки
//
Функция ЧасоваяТарифнаяСтавкаРаботникаОрг(Знач Сотрудник, Знач ДатаАктуальности, Знач ДатаВалютногоУчета, ВалютаРегламентированногоУчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник",			Сотрудник);
	Запрос.УстановитьПараметр("ДатаАктуальности",	ДатаАктуальности);
	Запрос.УстановитьПараметр("ПериодРегистрации",	НачалоМесяца(ДатаАктуальности));
	Запрос.УстановитьПараметр("ДатаВалютногоУчета",	НачалоМесяца(ДатаВалютногоУчета));
	Запрос.УстановитьПараметр("РегламентВалюта",	ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Год",				Год(ДатаАктуальности));
	Запрос.УстановитьПараметр("СреднеМесячноеКоличесвтоЧасов",	Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаЧасов);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДанныеРаботника.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке))
	|			ТОГДА ДанныеРаботника.ОкладТариф
	|		КОГДА ДанныеРаботника.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням))
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую, ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)) = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)
	|							ТОГДА  ДанныеРаботника.ОкладТариф /ЕСТЬNULL(РазмерыПараметровДляРасчетаРБ.Размер,1)
	|						КОГДА ВЫБОР
	|								КОГДА СводныеИндивидуальныеГрафики.Часов ЕСТЬ НЕ NULL 
	|									ТОГДА СводныеИндивидуальныеГрафики.Часов
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма), 0)
	|							КОНЕЦ = 0
	|							ТОГДА 0
	|						ИНАЧЕ ДанныеРаботника.ОкладТариф / ВЫБОР
	|								КОГДА СводныеИндивидуальныеГрафики.Часов ЕСТЬ НЕ NULL 
	|									ТОГДА СводныеИндивидуальныеГрафики.Часов
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма), 0)
	|							КОНЕЦ
	|					КОНЕЦ КАК ЧИСЛО(15, 4))
	|		КОГДА ДанныеРаботника.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА ДанныеРаботника.ДлительностьРабочейНедели = 0
	|							ТОГДА 0
	|						ИНАЧЕ ДанныеРаботника.ОкладТариф / ДанныеРаботника.ДлительностьРабочейНедели * ВЫБОР
	|								КОГДА ДанныеРаботника.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Шестидневка)
	|									ТОГДА 6
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					КОНЕЦ КАК ЧИСЛО(15, 4))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Размер
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник,
	|		ВЫБОР
	|			КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|					И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВЫБОР
	|						КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|							ТОГДА РазмерТарифныхСтавок.Размер
	|						ИНАЧЕ ОсновноеНачисление.Показатель1Завершения
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|						ТОГДА РазмерТарифныхСтавок.Размер
	|					ИНАЧЕ ОсновноеНачисление.Показатель1
	|				КОНЕЦ
	|		КОНЕЦ * ВЫБОР
	|			КОГДА ВЫБОР
	|					КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|							И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА ВЫБОР
	|								КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|									ТОГДА РазмерТарифныхСтавок.Валюта
	|								ИНАЧЕ ОсновноеНачисление.Валюта1Завершения
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|								ТОГДА РазмерТарифныхСтавок.Валюта
	|							ИНАЧЕ ОсновноеНачисление.Валюта1
	|						КОНЕЦ
	|				КОНЕЦ В (&РегламентВалюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|				ТОГДА 1
	|			ИНАЧЕ ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
	|		КОНЕЦ КАК ОкладТариф,
	|		ВЫБОР
	|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|		КОНЕЦ КАК ГрафикРаботы,
	|		ВЫБОР
	|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ДлительностьРабочейНедели
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ДлительностьРабочейНедели
	|		КОНЕЦ КАК ДлительностьРабочейНедели,
	|		ВЫБОР
	|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ВидГрафика
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ВидГрафика
	|		КОНЕЦ КАК ВидГрафика,
	|		ВЫБОР
	|			КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|					И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ОсновноеНачисление.ВидРасчетаЗавершения.СпособРасчета
	|			ИНАЧЕ ОсновноеНачисление.ВидРасчета.СпособРасчета
	|		КОНЕЦ КАК СпособРасчета
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|					&ДатаАктуальности,
	|					Сотрудник = &Сотрудник
	|						И ВидРасчетаИзмерение.Код ЕСТЬ NULL ) КАК ОсновноеНачисление
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ДатаВалютногоУчета, ) КАК РазмерТарифныхСтавок
	|				ПО (ВЫБОР
	|						КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|								И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА ОсновноеНачисление.ТарифныйРазряд1Завершения
	|						ИНАЧЕ ОсновноеНачисление.ТарифныйРазряд1
	|					КОНЕЦ = РазмерТарифныхСтавок.ТарифныйРазряд)
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|				ПО (Валюты.Валюта = ВЫБОР
	|						КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|								И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА ВЫБОР
	|									КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|										ТОГДА РазмерТарифныхСтавок.Валюта
	|									ИНАЧЕ ОсновноеНачисление.Валюта1Завершения
	|								КОНЕЦ
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|									ТОГДА РазмерТарифныхСтавок.Валюта
	|								ИНАЧЕ ОсновноеНачисление.Валюта1
	|							КОНЕЦ
	|					КОНЕЦ)
	|					И (Валюты.Период = &ДатаВалютногоУчета)
	|			ПО (ИСТИНА)) КАК ДанныеРаботника
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты КАК ВариантыВстроенныхАлгоритмовРасчетаЗарплаты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ВЫБОР
	|					КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЧислоРабочихДней,
	|			СУММА(ВЫБОР
	|					КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЧислоПредпраздничныхДней
	|		ИЗ
	|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ГДЕ
	|			РегламентированныйПроизводственныйКалендарь.Год = &Год) КАК ДанныеПроизводственногоКалендаря
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО ДанныеРаботника.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И (СводныеИндивидуальныеГрафики.Месяц = &ПериодРегистрации)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК ЧасовЗаМесяц
	|		ИЗ
	|			РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ГДЕ
	|			ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &Сотрудник
	|			И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|			И ГрафикиРаботыПоВидамВремени.Месяц = &ПериодРегистрации
	|			И ГрафикиРаботыПоВидамВремени.План) КАК НормаВремениПоЕжедневнымИндивидуальнымГрафикам
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ДанныеРаботника.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = &ПериодРегистрации)
	|			И (ГрафикиРаботыПоВидамВремени.План)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ.СрезПоследних(&ДатаАктуальности,ВидПараметра = &СреднеМесячноеКоличесвтоЧасов)  КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (ИСТИНА)
    |
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРаботника.ОкладТариф,
	|	ДанныеРаботника.ГрафикРаботы,
	|	ДанныеРаботника.ДлительностьРабочейНедели,
	|	ДанныеРаботника.ВидГрафика,
	|	ДанныеРаботника.СпособРасчета,
	|	ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую,
	|	ДанныеПроизводственногоКалендаря.ЧислоРабочихДней,
	|	ДанныеПроизводственногоКалендаря.ЧислоПредпраздничныхДней,
	|	НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц,
	|	РазмерыПараметровДляРасчетаРБ.Размер,
    |	СводныеИндивидуальныеГрафики.Часов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Окр(Выборка.Размер,4);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ЧасоваяТарифнаяСтавкаРаботникаОрг()

//Функция РассчитатьПериодРаботыДляОсновногоОтпуска(Ссылка, Сотрудник, ДатаНачала, ДатаОкончания, ОсновнойОтпуск) Экспорт
//	
//	
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("ОсновнойОтпуск", ОсновнойОтпуск);
//	
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ОсновныеНачисленияОрганизаций.ПериодРасчетаСреднегоЗаработка
//	|ИЗ
//	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
//	|ГДЕ
//	|	ОсновныеНачисленияОрганизаций.Ссылка = &ОсновнойОтпуск";
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Если Выборка.Следующий() Тогда
//		ПериодРасчетаСреднегоЗаработка = Выборка.ПериодРасчетаСреднегоЗаработка;
//	Иначе
//		Возврат Новый Структура("РабочийГодС","РабочийГодПо");
//	КонецЕсли;
//	
//	СтруктураРабочийГод = Новый Структура("РабочийГодС, РабочийГодПо");
//	СтруктураРабочийГод.РабочийГодПо = НачалоДня(НачалоМесяца(ДатаНачала) - 1);
// 	СтруктураРабочийГод.РабочийГодС  =  ДобавитьМесяц(НачалоМесяца(ДатаНачала), - ПериодРасчетаСреднегоЗаработка);
//		
//	Возврат СтруктураРабочийГод;
//	
//КонецФункции



// Возвращает значение ставки НДФЛ с доходов нерезидентов 
Функция ЗначениеСтавкиНДФЛСНерезидента() Экспорт
	Возврат 15;
КонецФункции 

 // Возвращает результат запроса стандартных вычетов НДФЛ
// Параметры
//  Параметры  – Структура – структура параметров
// Возвращаемое значение:
//   РезультатЗапроса   
//
Функция ПолучитьРезультатЗапросаСтандартныхВычетовНДФЛ(Параметры) Экспорт

	// Параметры функции
	ГодНП = Параметры.ГодНП;
	Организация = Параметры.Организация;
	ГоловнаяОрганизация = Параметры.ГоловнаяОрганизация;
	СведенияФормируютсяПоОрганизацииВЦелом = Параметры.СведенияФормируютсяПоОрганизацииВЦелом;
    СписокВсехПодразделенийОрганизации = Параметры.СписокВсехПодразделенийОрганизации;
	СписокФизлицТекст  = Параметры.СписокФизлицТекст;
	МассивКодовДоходовРаздела7 = Параметры.МассивКодовДоходовРаздела7;
	ВычетыПолучитьПоМесяцам = Параметры.ВычетыПолучитьПоМесяцам;
	
	// Параметр, специфический для Формы2НДФЛ
	ДатаПодачиСведений = Параметры.ДатаПодачиСведений;
	
	ДатаНачалаНП = НачалоГода(Дата(ГодНП,1,1));
	ДатаКонцаНП = КонецГода(Дата(ГодНП,1,1));
	
	// Создание запроса и установка всех необходимых параметров
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("НачалоНП", ДатаНачалаНП);
	Запрос.УстановитьПараметр("КонецНП", ДатаКонцаНП);// последний месяц налогового периода, за который подаём сведения
	Запрос.УстановитьПараметр("МассивКодовДоходовРаздела7", МассивКодовДоходовРаздела7);
	Запрос.УстановитьПараметр("ДатаПодачиСведений", ДатаПодачиСведений);// дата акуальности сведений о доходах и налогах
	//Запрос.УстановитьПараметр("СписокВсехПодразделенийОрганизации", СписокВсехПодразделенийОрганизации);
	// Параметры, требуемые для выполнения текста запроса списка физлиц
	Для Каждого Элемент ИЗ Параметры.ДополнительныеПараметрыЗапроса  Цикл
		Запрос.УстановитьПараметр(Элемент.Ключ , Элемент.Значение);
	КонецЦикла; 
	
	Запрос.УстановитьПараметр("ВнутреннееСовместительство" , Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("Ставка13", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);
	Запрос.УстановитьПараметр("ПустойКодВычета" , Справочники.ВычетыНДФЛ.ПустаяСсылка());
	Запрос.УстановитьПараметр("РасчетыСБюджетомНачисление" , Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление);
	Запрос.УстановитьПараметр("РасчетыСБюджетомУдержание" , Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание);
	
	// Сформируем текст запроса с датами месяцев налогового периода
	// первый месяц
	КонецМесяца = КонецМесяца(ДатаНачалаНП);
	ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период";
	// прибавим остальные месяцы
	Для Сч = 2 По 12 Цикл
		КонецМесяца = КонецМесяца(КонецМесяца+1);
    	ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	
	//-----------------------------------------------------------------------------
	// ГЕНЕРАЦИЯ ТЕКСТА ЗАПРОСА
	
	// ПрименениеВычетовВОрганизации
	//	Поля:
	//		Период - месяц налогового периода
	//		Физлицо
	//
	// Описание:
	//	Для каждого месяца налогового периода выбирает список физлиц, для которых применяются стандартные вычеты по 
	//	заданной организации. Учитываем тот факт, что применяемость всегда регистрируется на головную организацию.
	//
	
	ПрименениеВычетовВОрганизацииТекст = 
	"ВЫБРАТЬ
	|	НДФЛПрименениеВычетовСрезПоследних.Физлицо КАК Физлицо,
	|	НДФЛПрименениеВычетовСрезПоследних.Период КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(НДФЛПрименениеВычетов.Период) КАК ПериодСреза,
	|		НДФЛПрименениеВычетов.Физлицо КАК Физлицо,
	|		Периоды.Период КАК Период
	|	ИЗ
	|		("+СписокФизлицТекст+") КАК РаботникиОрганизации
	|			ЛЕВОЕ СОЕДИНЕНИЕ ("+ПериодыТекст+") КАК Периоды
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
	|			ПО НДФЛПрименениеВычетов.Период <= Периоды.Период И НДФЛПрименениеВычетов.Физлицо = РаботникиОрганизации.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НДФЛПрименениеВычетов.Физлицо,
	|		Периоды.Период) КАК НДФЛПрименениеВычетовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
	|		ПО НДФЛПрименениеВычетов.Период = НДФЛПрименениеВычетовСрезПоследних.ПериодСреза И НДФЛПрименениеВычетов.Физлицо = НДФЛПрименениеВычетовСрезПоследних.Физлицо
    |
	|ГДЕ
	|	НДФЛПрименениеВычетов.Организация = &ГоловнаяОрганизация";

	
	// МесяцыПоследнегоДоходаИлиНалогаТекст
	//	Поля:
	//		Месяц - месяц налогового периода - число от 1 до 12
	//		Физлицо
	//
	// Описание:
	//	Для каждого физлица расчитывается последний месяц предоставления вычетов
	// 	как максимальное значение из двух следующих:
	//  1. Месяц самого позднего начисления
	//	2. Месяц самого позднего расчета налога   
	
	МесяцыПоследнегоДоходаИлиНалогаТекст = 
	"ВЫБРАТЬ
	|		ПоследниеМесяцы.Физлицо КАК Физлицо,
	|		МАКСИМУМ(ПоследниеМесяцы.Месяц) КАК Месяц
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			НДФЛСведенияОДоходах.ФизЛицо КАК ФизЛицо, 
	|			Месяц(НДФЛСведенияОДоходах.Период) КАК Месяц
	|       ИЗ
	|			РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
	|		ГДЕ 
	|			НДФЛСведенияОДоходах.Период МЕЖДУ &НачалоНП И &КонецНП И
	|			" + ?(ДатаПодачиСведений <> Неопределено, "НДФЛСведенияОДоходах.ПериодРегистрации <= &ДатаПодачиСведений И", "") + "
	|			НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = &Ставка13 И
	|			" + ?(СведенияФормируютсяПоОрганизацииВЦелом, "НДФЛСведенияОДоходах.Организация = &ГоловнаяОрганизация", "НДФЛСведенияОДоходах.ОбособленноеПодразделение = &Организация") + " И
	|			НДФЛСведенияОДоходах.ФизЛицо в (" + СписокФизлицТекст + ") И
	|			НЕ (НДФЛСведенияОДоходах.КодДохода В (&МассивКодовДоходовРаздела7))
	|
	|		ОБЪЕДИНИТЬ ВСЕ 
	|			
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|			НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо, 
	|			Месяц(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода) КАК Месяц
	|       ИЗ
	|			РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСбюджетом
	|		ГДЕ 
	|			НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП И
	|			" + ?(ДатаПодачиСведений <> Неопределено, "НДФЛРасчетыСБюджетом.Период <= &ДатаПодачиСведений И", "") + "
	|			НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента = &Ставка13 И
	|			(НДФЛРасчетыСБюджетом.ВидСтроки = &РасчетыСБюджетомНачисление ИЛИ НДФЛРасчетыСБюджетом.ВидСтроки = &РасчетыСБюджетомУдержание) И 
	|			" + ?(СведенияФормируютсяПоОрганизацииВЦелом, "НДФЛРасчетыСБюджетом.Организация = &ГоловнаяОрганизация", "НДФЛРасчетыСБюджетом.ОбособленноеПодразделение = &Организация") + " И
	|			НДФЛРасчетыСБюджетом.ФизЛицо в (" + СписокФизлицТекст + ")
	|	    ) КАК ПоследниеМесяцы
	|	СГРУППИРОВАТЬ ПО
	|		ПоследниеМесяцы.Физлицо";
	
	
	// Если формируем сведения для структурного подразделения организации,
	// то надо быть внимательнее с периодами предоставления вычетов
	МесяцыРаботыВОбособленномПодразделенииТекст = "";
	Если (НЕ СведенияФормируютсяПоОрганизацииВЦелом) И (СписокВсехПодразделенийОрганизации.Количество() > 1) Тогда
		
		// Для структурного подразделения периоды(месяцы) предоставления стандартных вычетов
		//будем ограничивать месяцами работы в данном подразделении.
		// Т.Е вычеты в месяце предоставляем, если работник на конец месяца числится 
		//не по внутреннему совместительству в данном обособленном подразделении.
		
		//МесяцыРаботыВОбособленномПодразделении
		//	Поля:
		//		Период - месяц налогового периода
		//		Физлицо
		//
		// Описание:
		//	Для каждого физлица выбираются месяцы работы в организации
		
		МесяцыРаботыВОбособленномПодразделенииТекст = 
		"ВЫБРАТЬ 
		|	ПоследниеДвиженияПоМесяцам.ФизЛицо,
		|	ПоследниеДвиженияПоМесяцам.Период 
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботникиОрганизации.ФизЛицо,
		|		РегРаботникиОрганизации.Организация,
		//vvv комментируем
		//|		РегРаботникиОрганизации.Приказ,
		|		Периоды.Период,
		|		МАКСИМУМ(РегРаботникиОрганизации.Период) КАК ДатаПоследнегоДвижения
		|		ИЗ
		|			("+СписокФизлицТекст+") КАК РаботникиОрганизации
		|				ЛЕВОЕ СОЕДИНЕНИЕ ("+ПериодыТекст+") КАК Периоды
		|				ПО (ИСТИНА)
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РегРаботникиОрганизации
		//vvv
		//|				ПО Месяц(РегРаботникиОрганизации.Период) <= Месяц(Периоды.Период) И РаботникиОрганизации.Физлицо = РегРаботникиОрганизации.Физлицо И (РегРаботникиОрганизации.Приказ.ВидЗанятости <> &ВнутреннееСовместительство ИЛИ (РегРаботникиОрганизации.Приказ.ВидЗанятости) ЕСТЬ NULL ) И Организация = &ГоловнаяОрганизация
		|				ПО Месяц(РегРаботникиОрганизации.Период) <= Месяц(Периоды.Период) И РаботникиОрганизации.Физлицо = РегРаботникиОрганизации.Сотрудник.Физлицо И (РегРаботникиОрганизации.Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство ИЛИ (РегРаботникиОрганизации.Сотрудник.ВидЗанятости) ЕСТЬ NULL ) И Организация = &ГоловнаяОрганизация
		//
		|		СГРУППИРОВАТЬ ПО 
		|			РаботникиОрганизации.ФизЛицо,
		|			РегРаботникиОрганизации.Организация,
		//vvv комментируем
		//|			РегРаботникиОрганизации.Приказ,
		|			Периоды.Период ) КАК ПоследниеДвиженияПоМесяцам
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		//vvv
		//|	ПО РаботникиОрганизации.Период = ПоследниеДвиженияПоМесяцам.ДатаПоследнегоДвижения И РаботникиОрганизации.ФизЛицо = ПоследниеДвиженияПоМесяцам.ФизЛицо И РаботникиОрганизации.Организация = ПоследниеДвиженияПоМесяцам.Организация И РаботникиОрганизации.Приказ = ПоследниеДвиженияПоМесяцам.Приказ
		|	ПО РаботникиОрганизации.Период = ПоследниеДвиженияПоМесяцам.ДатаПоследнегоДвижения И РаботникиОрганизации.Сотрудник.ФизЛицо = ПоследниеДвиженияПоМесяцам.ФизЛицо И РаботникиОрганизации.Организация = ПоследниеДвиженияПоМесяцам.Организация
		//
		|
		|ГДЕ 
		|	РаботникиОрганизации.ПодразделениеОрганизации.Владелец = &Организация";
		
		
	КонецЕсли; 
	
	// Ограничим периоды предоставления вычетов
	
	ПрименениеВычетовВОрганизацииТекст = 
	"ВЫБРАТЬ
	|	ПрименениеВычетовВОрганизации.Физлицо КАК Физлицо,
	|	ПрименениеВычетовВОрганизации.Период КАК Период
	|ИЗ
	|	(" + ПрименениеВычетовВОрганизацииТекст + ") КАК ПрименениеВычетовВОрганизации";
	
	Если МесяцыПоследнегоДоходаИлиНалогаТекст <> "" Тогда
		// Ограничиваем месяцы предоставления вычетов месяцем, максимальным из двух: 1. Месяц последнего начисленного дохода ; 2. Месяц последнего расчета налога
		ПрименениеВычетовВОрганизацииТекст = ПрименениеВычетовВОрганизацииТекст + "
		| 	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + МесяцыПоследнегоДоходаИлиНалогаТекст + ") КАК МесяцыПоследнегоДоходаИлиНалога
		|	ПО (Месяц(ПрименениеВычетовВОрганизации.Период) <= МесяцыПоследнегоДоходаИлиНалога.Месяц) И ПрименениеВычетовВОрганизации.ФизЛицо = МесяцыПоследнегоДоходаИлиНалога.ФизЛицо 
		|";
	КонецЕсли; 
	
	Если МесяцыРаботыВОбособленномПодразделенииТекст <> "" Тогда
		// Ограничиваем месяцы предоставления вычетов периодами работы в организации
		ПрименениеВычетовВОрганизацииТекст = ПрименениеВычетовВОрганизацииТекст + " 
		| 	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + МесяцыРаботыВОбособленномПодразделенииТекст + ") КАК МесяцыРаботыВОбособленномПодразделении
		|	ПО ПрименениеВычетовВОрганизации.Период = МесяцыРаботыВОбособленномПодразделении.Период И ПрименениеВычетовВОрганизации.ФизЛицо = МесяцыРаботыВОбособленномПодразделении.ФизЛицо 
		|";
	КонецЕсли; 
		
	
	// ПраваНаВычеты
	//	Поля:
	//		Физлицо
	//		Период
	//		КодВычета
	//		РазмерВычета
	//		ОграничениеПоДоходам
	//
	//	Описание:
	//	Выбирает по всем месяца налогового периода суммы стандартных вычетов, на которые имеет право физлицо
	//	Два подзапроса: вычет на себя и вычеты на детей
	
	
	// первый год
	НачалоГода = НачалоМесяца(ДатаКонцаНП);	
	ПериодыТекстПоГодам = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачалоГода,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период";
	Для Сч = Месяц(НачалоГода(ДатаНачалаНП))+ 1 По Месяц(ДатаКонцаНП) Цикл
		НачалоГода = НачалоМесяца(НачалоГода - 1);
		ПериодыТекстПоГодам = ПериодыТекстПоГодам +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачалоГода,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	
	БазовыеВеличиныПоМесяцам = 
	"ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	БазоваяВеличинаРег.Размер    
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		МАКСИМУМ(БазоваяВеличинаРег.Период) КАК ПериодРегистра
	|	ИЗ
	|		("+ПериодыТекстПоГодам+") КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК БазоваяВеличинарег
	|			ПО БазоваяВеличинарег.Период <= Периоды.Период И БазоваяВеличинаРег.ВидПараметра = &БазоваяВеличина
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ КАК БазоваяВеличинарег
	|		ПО БазоваяВеличинарег.Период = Периоды.Периодрегистра И БазоваяВеличинаРег.ВидПараметра = &БазоваяВеличина";
	
	Запрос.Текст = БазовыеВеличиныПоМесяцам;
	

  	НДФЛРазмерВычетов =
	"ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	ВЫБОР КОГДА (НДФЛРазмерВычетов.КодВычета) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ НДФЛРазмерВычетов.КодВычета КОНЕЦ КАК КодВычета,
	|	НДФЛРазмерВычетов.Размер * БазоваяВеличина.Размер КАК Размер,    
	|	НДФЛРазмерВычетов.ОграничениеПоДоходам КАК ОграничениеПоДоходам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		НДФЛРазмерВычетов.КодВычета КАК КодВычета,
	|		МАКСИМУМ(НДФЛРазмерВычетов.Период) КАК ПериодРегистра
	|	ИЗ
	|		("+ПериодыТекстПоГодам+") КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов КАК НДФЛРазмерВычетов
	|			ПО Периоды.Период >= НДФЛРазмерВычетов.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период,
	|		НДФЛРазмерВычетов.КодВычета) КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ("+БазовыеВеличиныПоМесяцам+") КАК БазоваяВеличина
	|		ПО БазоваяВеличина.Период = Периоды.Период 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов КАК НДФЛРазмерВычетов
	|		ПО НДФЛРазмерВычетов.Период = Периоды.ПериодРегистра И Периоды.КодВычета = НДФЛРазмерВычетов.КодВычета ";

	Запрос.Текст =  НДФЛРазмерВычетов;
	// ПраваНаВычеты
	//	Поля:
	//		Физлицо
	//		Период
	//		СтандартныеВычетыЛичные
	//		СтандартныеВычетыДетские
	//
	//	Описание:
	//	Выбирает по всем периодам года стандартные вычеты на которые имеет право физлицо

	ПраваНаВычетыТекст = 
	"ВЫБРАТЬ
	|	НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо КАК Физлицо,
	|	НДФЛСтандартныеВычетыФизлицСрезПоследних.Период КАК Период,
	|	НДФЛРазмерВычетовЛичный.ОграничениеПоДоходам КАК ОграничениеПоДоходам,
	|	ВычетыФизлиц.КодВычетаЛичный.Код КАК КодВычета,
	|	ВЫБОР КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ВЫБОР КОГДА (НДФЛРазмерВычетовЛичный.Размер) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НДФЛРазмерВычетовЛичный.Размер КОНЕЦ КОНЕЦ КАК размерВычета
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ВычетыФизлиц.Период) КАК ПериодСреза,
	|		РаботникиОрганизации.ФизЛицо КАК Физлицо,
	|		Периоды.Период КАК Период
	|	ИЗ
	|		("+СписокФизлицТекст+") КАК РаботникиОрганизации
	|			ЛЕВОЕ СОЕДИНЕНИЕ ("+ПериодыТекст+") КАК Периоды
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|			ПО ВычетыФизлиц.Период <= Периоды.Период И ВычетыФизлиц.Физлицо = РаботникиОрганизации.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РаботникиОрганизации.ФизЛицо,
	|		Периоды.Период) КАК НДФЛСтандартныеВычетыФизлицСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|		ПО ВычетыФизлиц.Период = НДФЛСтандартныеВычетыФизлицСрезПоследних.ПериодСреза И ВычетыФизлиц.Физлицо = НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + НДФЛРазмерВычетов + ") КАК НДФЛРазмерВычетовЛичный
	|		ПО НДФЛРазмерВычетовЛичный.КодВычета = ВычетыФизлиц.КодВычетаЛичный И НДФЛРазмерВычетовЛичный.Период = НАЧАЛОПЕРИОДА(НДФЛСтандартныеВычетыФизлицСрезПоследних.Период, Месяц)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименениеВычетовВОрганизацииТекст + ") КАК ПрименениеВычетов
	|		ПО ПрименениеВычетов.Физлицо = НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо И ПрименениеВычетов.Период = НДФЛСтандартныеВычетыФизлицСрезПоследних.Период
	|	
	|ОБЪЕДИНИТЬ ВСЕ 
	|ВЫБРАТЬ
	|	НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо КАК Физлицо,
	|	НДФЛСтандартныеВычетыФизлицСрезПоследних.Период КАК Период,
	|	НДФЛРазмерВычетовНаДетей.ОграничениеПоДоходам КАК ОграничениеПоДоходам,
	|	ВычетыФизлиц.КодВычетаНаДетей.Код КАК КодВычета,
	|	ВЫБОР КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ВЫБОР КОГДА (НДФЛРазмерВычетовНаДетей.Размер) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НДФЛРазмерВычетовНаДетей.Размер КОНЕЦ * ВЫБОР КОГДА (ВычетыФизлиц.КоличествоДетей) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ВычетыФизлиц.КоличествоДетей КОНЕЦ КОНЕЦ КАК размерВычета
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ВычетыФизлиц.Период) КАК ПериодСреза,
	|		РаботникиОрганизации.ФизЛицо КАК Физлицо,
	|		Периоды.Период КАК Период
	|	ИЗ
	|		("+СписокФизлицТекст+") КАК РаботникиОрганизации
	|			ЛЕВОЕ СОЕДИНЕНИЕ ("+ПериодыТекст+") КАК Периоды
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|			ПО ВычетыФизлиц.Период <= Периоды.Период И ВычетыФизлиц.Физлицо = РаботникиОрганизации.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РаботникиОрганизации.ФизЛицо,
	|		Периоды.Период) КАК НДФЛСтандартныеВычетыФизлицСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|		ПО ВычетыФизлиц.Период = НДФЛСтандартныеВычетыФизлицСрезПоследних.ПериодСреза И ВычетыФизлиц.Физлицо = НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + НДФЛРазмерВычетов + ") КАК НДФЛРазмерВычетовНаДетей
	|		ПО НДФЛРазмерВычетовНаДетей.КодВычета = ВычетыФизлиц.КодВычетаНаДетей И НДФЛРазмерВычетовНаДетей.Период = НАЧАЛОПЕРИОДА(НДФЛСтандартныеВычетыФизлицСрезПоследних.Период, Месяц)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименениеВычетовВОрганизацииТекст + ") КАК ПрименениеВычетов
	|		ПО ПрименениеВычетов.Физлицо = НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо И ПрименениеВычетов.Период = НДФЛСтандартныеВычетыФизлицСрезПоследних.Период
	|	
	|ОБЪЕДИНИТЬ ВСЕ 
	|ВЫБРАТЬ
	|	НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо КАК Физлицо,
	|	НДФЛСтандартныеВычетыФизлицСрезПоследних.Период КАК Период,
	|	НДФЛРазмерВычетовДополнительный1.ОграничениеПоДоходам  КАК ОграничениеПоДоходам,
	|	ВычетыФизлиц.КодВычетаДополнительный.Код КАК КодВычета,
	|	ВЫБОР КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ВЫБОР КОГДА (НДФЛРазмерВычетовДополнительный1.Размер) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НДФЛРазмерВычетовДополнительный1.Размер КОНЕЦ КОНЕЦ КАК РазмерВычета
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ВычетыФизлиц.Период) КАК ПериодСреза,
	|		РаботникиОрганизации.ФизЛицо КАК Физлицо,
	|		Периоды.Период КАК Период
	|	ИЗ
	|		("+СписокФизлицТекст+") КАК РаботникиОрганизации
	|			ЛЕВОЕ СОЕДИНЕНИЕ ("+ПериодыТекст+") КАК Периоды
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|			ПО ВычетыФизлиц.Период <= Периоды.Период И ВычетыФизлиц.Физлицо = РаботникиОрганизации.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РаботникиОрганизации.ФизЛицо,
	|		Периоды.Период) КАК НДФЛСтандартныеВычетыФизлицСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|		ПО ВычетыФизлиц.Период = НДФЛСтандартныеВычетыФизлицСрезПоследних.ПериодСреза И ВычетыФизлиц.Физлицо = НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + НДФЛРазмерВычетов + ") КАК НДФЛРазмерВычетовДополнительный1
	|		ПО НДФЛРазмерВычетовДополнительный1.КодВычета = ВычетыФизлиц.КодВычетаДополнительный И НДФЛРазмерВычетовДополнительный1.Период = НАЧАЛОПЕРИОДА(НДФЛСтандартныеВычетыФизлицСрезПоследних.Период, Месяц)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименениеВычетовВОрганизацииТекст + ") КАК ПрименениеВычетов
	|		ПО ПрименениеВычетов.Физлицо = НДФЛСтандартныеВычетыФизлицСрезПоследних.Физлицо И ПрименениеВычетов.Период = НДФЛСтандартныеВычетыФизлицСрезПоследних.Период
	|";
	
	
	Запрос.Текст =  ПраваНаВычетыТекст;

	
	// ЗаработанныеДоходыПоМесяцамДляОграниченияСтандартныхВычетовТекст
	
	ЗаработанныеДоходыПоМесяцамДляОграниченияСтандартныхВычетовТекст = 
	"ВЫБРАТЬ
	|	НДФЛСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	|	НДФЛСведенияОДоходах.Период КАК Период,
	|	СУММА(НДФЛСведенияОДоходах.СуммаДохода - НДФЛСведенияОДоходах.СуммаВычета) КАК ОблагаемыйДоход
	|ИЗ
	|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах 
	|
	|ГДЕ 
	|	НДФЛСведенияОДоходах.Период МЕЖДУ &НачалоНП И &КонецНП И
	|	" + ?(ДатаПодачиСведений <> Неопределено, "НДФЛСведенияОДоходах.ПериодРегистрации <= &ДатаПодачиСведений И", "") + "
	|	НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = &Ставка13 И
	|	НДФЛСведенияОДоходах.Организация = &ГоловнаяОрганизация И
	|	НДФЛСведенияОДоходах.ФизЛицо В (" + СписокФизлицТекст + ") И
	|	НЕ (НДФЛСведенияОДоходах.КодДохода В (&МассивКодовДоходовРаздела7))
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	НДФЛСведенияОДоходах.ФизЛицо,
	|	НДФЛСведенияОДоходах.Период";
	
	
	// ОблДоходыЗаГодНарастИтогомПоСтавке13 
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоходЗаГод
	//
	//	Описание:
	//	Выбирает по всем периодам с начала года сумму дохода нарастающим итогом за год для расчета ограничения по стандартным вычетам
	//  Надо учитывать доходы, заработанные во всех структурных подразделениях организации
	
	//
	ОблДоходыЗаГодНарастИтогомПоСтавке13 = 
	"ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	НДФЛОбороты.ФизЛицо КАК ФизЛицо,
	|	СУММА(НДФЛОбороты.ОблагаемыйДоход) КАК ОблагаемыйДоходЗаГод
	|ИЗ
	|	("+ПериодыТекст+") КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+ЗаработанныеДоходыПоМесяцамДляОграниченияСтандартныхВычетовТекст+") КАК НДФЛОбороты
	|		ПО Периоды.Период >= НДФЛОбороты.Период
    |
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	НДФЛОбороты.ФизЛицо";

	
	// ДоходыПредыдущегоМестаРаботыТекст
	//	Поля:
	//		Физлицо
	//		Период
	//		РазмерДоходаСНачалаГода
	//
	//	Описание:
	//	 Выбирает для всех физлиц суммы совокупного дохода с предыдущего места работы в разрезе месяцев налогового периода,
	//   зарегистрированные на любое структурное подразделение организации
	
	ДоходыПредыдущегоМестаРаботыЗаГодТекст = 
	"ВЫБРАТЬ
	|	РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|	Периоды.Период КАК Период,
	|	НДФЛДоходыПредыдущегоМестаРаботы.Размер КАК РазмерДоходаЗаГод
	|ИЗ
	|		("+СписокФизлицТекст+") КАК РаботникиОрганизации
	|			ЛЕВОЕ СОЕДИНЕНИЕ ("+ПериодыТекст+") КАК Периоды
	|			ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛДоходыПредыдущегоМестаРаботы КАК НДФЛДоходыПредыдущегоМестаРаботы
	|		ПО НДФЛДоходыПредыдущегоМестаРаботы.Организация = &ГоловнаяОрганизация И НДФЛДоходыПредыдущегоМестаРаботы.МесяцНалоговогоПериода = НАЧАЛОПЕРИОДА(Периоды.Период,Месяц) И НДФЛДоходыПредыдущегоМестаРаботы.ФизЛицо = РаботникиОрганизации.Физлицо
	|";
	
	
	// ПрименяемыеСтандартныеВычетыЗаГодТекст
	// 	Основной запрос
	Если ВычетыПолучитьПоМесяцам Тогда
		
		ПрименяемыеСтандартныеВычетыЗаГодТекст = 
		"ВЫБРАТЬ
		|	РаботникиПраваНаВычеты.Физлицо КАК Физлицо,
		|	Месяц(РаботникиПраваНаВычеты.Период) КАК Месяц,
		|	РаботникиПраваНаВычеты.КодВычета КАК КодВычета,
		|	СУММА( ВЫБОР КОГДА РаботникиПраваНаВычеты.РазмерВычета ЕСТЬ NULL  
		|			ТОГДА 0 
		|			ИНАЧЕ РаботникиПраваНаВычеты.РазмерВычета КОНЕЦ ) КАК СуммаВычета
//		|	СУММА( ВЫБОР КОГДА РаботникиПраваНаВычеты.ОграничениеПоДоходам = 0 ИЛИ ВЫБОР КОГДА (ДоходыЗаГод.ОблагаемыйДоходЗаГод) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ДоходыЗаГод.ОблагаемыйДоходЗаГод КОНЕЦ + ВЫБОР КОГДА (НДФЛДоходыПредыдущегоМестаРаботы.РазмерДоходаЗаГод) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НДФЛДоходыПредыдущегоМестаРаботы.РазмерДоходаЗаГод КОНЕЦ <= РаботникиПраваНаВычеты.ОграничениеПоДоходам ТОГДА РаботникиПраваНаВычеты.РазмерВычета ИНАЧЕ 0 КОНЕЦ ) КАК СуммаВычета
		|ИЗ
		|	("+ПраваНаВычетыТекст+") КАК РаботникиПраваНаВычеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ("+ОблДоходыЗаГодНарастИтогомПоСтавке13+") КАК ДоходыЗаГод
		|		ПО ДоходыЗаГод.Период = РаботникиПраваНаВычеты.Период И ДоходыЗаГод.ФизЛицо = РаботникиПраваНаВычеты.Физлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ДоходыПредыдущегоМестаРаботыЗаГодТекст + ") КАК НДФЛДоходыПредыдущегоМестаРаботы
		|		ПО НДФЛДоходыПредыдущегоМестаРаботы.Период = РаботникиПраваНаВычеты.Период И НДФЛДоходыПредыдущегоМестаРаботы.ФизЛицо = РаботникиПраваНаВычеты.Физлицо
		|
		|СГРУППИРОВАТЬ ПО
		|	Месяц(РаботникиПраваНаВычеты.Период),
		|	РаботникиПраваНаВычеты.Физлицо,
		|	РаботникиПраваНаВычеты.КодВычета
		|ИТОГИ ПО ФизЛицо, КодВычета";
		
	Иначе 	// свернутые данные за год
		
		ПрименяемыеСтандартныеВычетыЗаГодТекст = 
		"ВЫБРАТЬ
		|	РаботникиПраваНаВычеты.Физлицо КАК Физлицо,
		|	РаботникиПраваНаВычеты.КодВычета КАК КодВычета,
		|	СУММА( ВЫБОР КОГДА РаботникиПраваНаВычеты.РазмерВычета ЕСТЬ NULL  
		|			ТОГДА 0 
		|			ИНАЧЕ РаботникиПраваНаВычеты.РазмерВычета КОНЕЦ ) КАК СуммаВычета
//		|	СУММА( ВЫБОР КОГДА РаботникиПраваНаВычеты.ОграничениеПоДоходам = 0 ИЛИ ВЫБОР КОГДА (ДоходыЗаГод.ОблагаемыйДоходЗаГод) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ДоходыЗаГод.ОблагаемыйДоходЗаГод КОНЕЦ + ВЫБОР КОГДА (НДФЛДоходыПредыдущегоМестаРаботы.РазмерДоходаЗаГод) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НДФЛДоходыПредыдущегоМестаРаботы.РазмерДоходаЗаГод КОНЕЦ <= РаботникиПраваНаВычеты.ОграничениеПоДоходам ТОГДА РаботникиПраваНаВычеты.РазмерВычета ИНАЧЕ 0 КОНЕЦ ) КАК СуммаВычета
		|ИЗ
		|	("+ПраваНаВычетыТекст+") КАК РаботникиПраваНаВычеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ("+ОблДоходыЗаГодНарастИтогомПоСтавке13+") КАК ДоходыЗаГод
		|		ПО ДоходыЗаГод.Период = РаботникиПраваНаВычеты.Период И ДоходыЗаГод.ФизЛицо = РаботникиПраваНаВычеты.Физлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ДоходыПредыдущегоМестаРаботыЗаГодТекст + ") КАК НДФЛДоходыПредыдущегоМестаРаботы
		|		ПО НДФЛДоходыПредыдущегоМестаРаботы.Период = РаботникиПраваНаВычеты.Период И НДФЛДоходыПредыдущегоМестаРаботы.ФизЛицо = РаботникиПраваНаВычеты.Физлицо
		|
		|СГРУППИРОВАТЬ ПО
		|	РаботникиПраваНаВычеты.Физлицо,
		|	РаботникиПраваНаВычеты.КодВычета";
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("БазоваяВеличина",                   Перечисления.ВидыПараметровДляРасчетаЗарплаты.БазоваяВеличина);
	Запрос.Текст = ПрименяемыеСтандартныеВычетыЗаГодТекст;
	Возврат Запрос.Выполнить();
	
КонецФункции  

 // Возвращает результат запроса вычетов НДФЛ имущественный и социальный
// Параметры
//  Параметры  – Структура – структура параметров
// Возвращаемое значение:
//   РезультатЗапроса   
//
Функция ПолучитьРезультатЗапросаИмущественнымВычетамНДФЛ(Параметры) Экспорт
	
	СписокФизлицТекст  = Параметры.СписокФизлицТекст;
	
	// Периоды
	// Таблица список периодов-физлиц по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо

	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	НДФЛСведенияОДоходах.ФизЛицо КАК Физлицо
	|ИЗ
	|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = НДФЛСведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	НДФЛСведенияОДоходах.ПериодРегистрации >= &парамНачалоГода И
	|	НДФЛСведенияОДоходах.ПериодРегистрации <= &парамПериодРегистрации И
	|	НДФЛСведенияОДоходах.Организация = &парамОрганизация И
	|	НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = &парамСтавка13";

	// Приходы вычетов помесячные  
	Вычеты312ПоМесяцамТекст = 
	"ВЫБРАТЬ
	|	Остатки.ФизЛицо КАК ФизЛицо,
	|	Остатки.Период КАК Период,
	|	Остатки.РазмерНачальныйОстаток КАК Вычет312Остаток,
	|	0 КАК ПримененныеВычеты312
	|ИЗ
	|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(&парамНачалоГода, &парамКонецГода, Год, , КодВычетаИмущественный = &КодВычета312 И Физлицо В (" + СписокФизлицТекст + ")) КАК Остатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Обороты.ФизЛицо,
	|	Обороты.Период,
	|	Обороты.РазмерПриход,
	|	Обороты.РазмерРасход
	|ИЗ
	|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(&парамНачалоГода, &парамКонецГода, Месяц, , КодВычетаИмущественный = &КодВычета312 И Физлицо В (" + СписокФизлицТекст + ")) КАК Обороты";
	
	Вычеты311ПоМесяцамТекст = 
	"ВЫБРАТЬ
	|	Остатки.ФизЛицо КАК ФизЛицо,
	|	Остатки.Период КАК Период,
	|	Остатки.РазмерНачальныйОстаток КАК Вычет311Остаток,
	|	0 КАК ПримененныеВычеты311
	|ИЗ
	|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(&парамНачалоГода, &парамКонецГода, Год, , КодВычетаИмущественный = &КодВычета311 И Физлицо В (" + СписокФизлицТекст + ")) КАК Остатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Обороты.ФизЛицо,
	|	Обороты.Период,
	|	Обороты.РазмерПриход,
	|	Обороты.РазмерРасход
	|ИЗ
	|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.ОстаткиИОбороты(&парамНачалоГода, &парамКонецГода, Месяц, , КодВычетаИмущественный = &КодВычета311 И Физлицо В (" + СписокФизлицТекст + ")) КАК Обороты";
	
	
	// Приходы вычетов с начала года нарастающим итогом
	Вычеты312Текст = 
	"ВЫБРАТЬ
	|	Периоды.Физлицо КАК Физлицо,
	|	Периоды.Период КАК Период,
	|	СУММА(Обороты.Вычет312Остаток) КАК Вычет312Остаток,
	|	СУММА(Обороты.ПримененныеВычеты312) КАК Вычет312ЗаГод
	|ИЗ
	|	(" + ПериодыТекст + ") КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + Вычеты312ПоМесяцамТекст + ") КАК Обороты
	|		ПО Обороты.ФизЛицо = Периоды.Физлицо И Обороты.Период <= Периоды.Период И Обороты.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
    |
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Физлицо,
	|	Периоды.Период";
	
	Вычеты311Текст = 
	"ВЫБРАТЬ
	|	Периоды.Физлицо КАК Физлицо,
	|	Периоды.Период КАК Период,
	|	СУММА(Обороты.Вычет311Остаток) КАК Вычет311Остаток,
	|	СУММА(Обороты.ПримененныеВычеты311) КАК Вычет311ЗаГод
	|ИЗ
	|	(" + ПериодыТекст + ") КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + Вычеты311ПоМесяцамТекст + ") КАК Обороты
	|		ПО Обороты.ФизЛицо = Периоды.Физлицо И Обороты.Период <= Периоды.Период И Обороты.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
    |
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Физлицо,
	|	Периоды.Период";
	
КонецФункции

// Определяет значение ставки налога для СтавкиНалоообложенияРезидента
// Параметры:
//  СтавкаНалогообложенияРезидента - ссылка на перечисление "НДФЛСтавкиНалогообложенияРезидента"
// Возвращаемое значение:
//  число - ставка налога в процентах
Функция ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(СтавкаНалогообложенияРезидента) Экспорт
	Если 	СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13 Тогда
		Возврат 12; //прогрессивная шкала
	ИначеЕсли СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09 Тогда
		Возврат 15;
	ИначеЕсли СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка9 Тогда
		Возврат 9;
	ИначеЕсли СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35 Тогда
		Возврат 20;
	ИначеЕсли СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка40 Тогда
		Возврат 40;
	КонецЕсли;
	Возврат 0;
КонецФункции

// Выделяет из кода элемента адресного классификатора код региона (24 и 25 цифры кода)
//
// Параметры
//  КодАдресногоЭлемента  – Строка – код элемента  адресного классификатора
//
// Возвращаемое значение:
//   Строка   – код региона РФ
//
Функция ПолучитьКодРегионаРФИзКодаАдресногоЭлемента(КодАдресногоЭлемента) Экспорт

	СтрКодАдрЭлемента = Формат(КодАдресногоЭлемента, "ЧГ=0");
	Если СтрКодАдрЭлемента = "" Тогда
		Возврат "";
	КонецЕсли; 
	КодРегиона = Лев(СтрКодАдрЭлемента, СтрДлина(СтрКодАдрЭлемента) - 23);
	// Код региона должен состоять из 2 цифр. Например: 03, 77
	Возврат  Прав("00" + КодРегиона,2);
	
КонецФункции 

// Проверяет, заполнен ли регламентированный производственный календарь за переданный период 
//
// Параметры
//  ДатаНач, ДатаКон - дата, определяют проверяемый период
//  ВыводитьСообщения - булево - признак вывода сообщений в окно сообщений, по умолчанию - ложь
//
// Возвращаемое значение:
//   Булево  - если колендарь заполнен за весь период
//
Функция РегламентированныйКалендарьЗаполнен(ДатаНач, ДатаКон, ВыводитьСообщения = Ложь) Экспорт 

	ТекстЛет = "ВЫБРАТЬ " + Символы.ПС + Символы.Таб + Формат(ДатаНач,"ДФ=yyyy; ДП='0'") + " КАК Год";
	ТекущийГод = Год(ДатаНач) + 1;
	Пока ТекущийГод <= Год(ДатаКон) Цикл
	    ТекстЛет = ТекстЛет + Символы.ПС + Символы.Таб + "Объединить" + Символы.ПС + "ВЫБРАТЬ " + Символы.ПС + Символы.Таб + Формат(ТекущийГод,"ЧГ=0");
		ТекущийГод = ТекущийГод + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ГодыПериода.Год,
		|	ДатыКалендаря.КоличествоДней
		|ИЗ
		|	(" + ТекстЛет + ") КАК ГодыПериода
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК КоличествоДней,
		|			РегламентированныйПроизводственныйКалендарь.Год КАК Год
		|		ИЗ
		|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		
		|		ГДЕ
		|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаС И &ДатаПо
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РегламентированныйПроизводственныйКалендарь.Год) КАК ДатыКалендаря
		|		ПО ГодыПериода.Год = ДатыКалендаря.Год";
		
	Запрос.Текст = ТекстЗапроса;					   
	Запрос.УстановитьПараметр("ДатаПо", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ДатаС", ДатаНач);
	Выборка = Запрос.Выполнить().Выбрать();
	КалендарьЗаполнен = Истина;
	Сообщение = "Перед формированием отчета заполните ""Регламентированный производственный календарь"" за ";
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоДней = Null Тогда
			Сообщение = Сообщение + ?(КалендарьЗаполнен,"",", ") + Формат(Выборка.Год,"ЧГ=0");
			КалендарьЗаполнен = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если не ВыводитьСообщения = "" Тогда
		Если Не КалендарьЗаполнен и ВыводитьСообщения Тогда
			Сообщение = Сообщение + ?(Найти(Сообщение,",")=0," год!"," годы!");
			Сообщить(Сообщение + "
			|Интерфейсы: ""Полный"", ""Расчет зарплаты организаций"", ""Кадровый учет организаций"", пункт меню Предприятие - Производственный календарь.");
		КонецЕсли;
	КонецЕсли;
	
    Возврат КалендарьЗаполнен
	
КонецФункции // РегламентированныйКалендарьЗаполнен()

// Удаляет из строки фрагмент заключенный в скобки
//
// Параметры
//  СтрокаДляОбработки  – Строка – строка из которой необходимо удалить фрагмент
//
// Возвращаемое значение:
//   Строка   – строка без фрагмента заключенного в скобки.
//
Функция УдалениеСимволовСкобок(СтрокаДляОбработки)

	НачальнаяПозиция	= Найти(СтрокаДляОбработки,"(");
	КонечнаяПозиция		= Найти(СтрокаДляОбработки,")");
	ДлинаСтроки			= СтрДлина(СтрокаДляОбработки);
	
	Если НачальнаяПозиция > 0 Тогда
		Возврат Лев(СтрокаДляОбработки, НачальнаяПозиция - 1) + ?(КонечнаяПозиция > 0,Прав(СтрокаДляОбработки, ДлинаСтроки - КонечнаяПозиция),"")
	Иначе
		Возврат СтрокаДляОбработки
	КонецЕсли; 

КонецФункции // ()
 
// Заполняет реквизит "КраткийСоставДокумента" документа по его табличным частям.
//
// Параметры
//  ТЧДокумента					– табличная часть документа по которой происходит заполнение реквизита
//  ДополнительнаяТЧДокумента	- табличная часть документа, как правило это ТЧ с дополнительными начислениями
//
// Возвращаемое значение:
//   строка, значение реквизита "КраткийСоставДокумента".
//
Функция ЗаполнитьКраткийСоставДокумента(ТЧДокумента, ДополнительнаяТЧДокумента = Неопределено, ИмяРеквизита = "Сотрудник") Экспорт

	КраткийСоставДокумента = "";
	
	Для каждого СтрокаТЧ Из ТЧДокумента Цикл
		
		ФИОФизЛица = ФамилияИнициалыФизЛица(УдалениеСимволовСкобок(СтрокаТЧ[ИмяРеквизита].Наименование));
		Если Найти(КраткийСоставДокумента, ФИОФизЛица) = 0 Тогда
			
			Если СтрДлина(КраткийСоставДокумента) < 100 Тогда
				КраткийСоставДокумента = КраткийСоставДокумента + ", " + ФИОФизЛица;
			Иначе
				КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
				Прервать;
			КонецЕсли;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	Если ДополнительнаяТЧДокумента <> Неопределено И СтрДлина(КраткийСоставДокумента) < 100 Тогда
	
		Для каждого СтрокаТЧ Из ДополнительнаяТЧДокумента Цикл
			
			ФИОФизЛица = ФамилияИнициалыФизЛица(УдалениеСимволовСкобок(СтрокаТЧ[ИмяРеквизита].Наименование));
			Если Найти(КраткийСоставДокумента, ФИОФизЛица) = 0 Тогда
				
				Если СтрДлина(КраткийСоставДокумента) < 100 Тогда
					КраткийСоставДокумента = КраткийСоставДокумента + ", " + ФИОФизЛица;
				Иначе
					Если Лев(КраткийСоставДокумента,2) = ", " Тогда
						КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
					Иначе
						КраткийСоставДокумента = Лев(КраткийСоставДокумента,97) + "...";
					КонецЕсли;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	 
	КонецЕсли;
	
	Если Лев(КраткийСоставДокумента,2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставДокумента);
		Если ДлинаСтроки < 100 Тогда
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3)
		Иначе
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат КраткийСоставДокумента;
	
КонецФункции // ЗаполнитьКраткийСоставДокумента()

// Функция склоняет переданую фразу
// Параметры:
//  Фраза (обязательный), тип строка
//   Параметр должен содержать фразу. Каждое слово фразы будет просклонено отдельно
//
//  Падеж (обязательный), тип число
//   Падеж, в который необходимо поставить ФИО.
//   1 - Именительный
//   2 - Родительный
//   3 - Дательный
//   4 - Винительный
//   5 - Творительный
//   6 - Предложный
//
Функция Просклонять(Компонента, Знач Фраза = "", Падеж = 1, Пол = Неопределено) Экспорт
	
	Результат = "";
	
	#Если Клиент Тогда
		
	МассивСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Фраза, " ");
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		Если ПустаяСтрока(СтрокаМассива) ИЛИ НЕ РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрокаМассива) Тогда
			Результат = Результат + СтрокаМассива + " ";
			Продолжить;
		КонецЕсли;
		
		Попытка
			Результат = Результат + Компонента.Просклонять(СтрокаМассива, Падеж) + " ";
			
		Исключение
			Результат = Фраза;
			Возврат Ложь;
			
		КонецПопытки;
			
	КонецЦикла;
	
	Результат = СокрЛП(Результат);
	
	Возврат Истина;
	
	#Иначе
		
	Возврат Ложь;
	
	#КонецЕсли
	
КонецФункции // Просклонять()

// Функция склоняет ФИО
// Параметры:
//  ФИО (обязательный), тип строка
//   Параметр должен содержать фамилию, имя и отчество в именительном падеже единственного числа.
//   Строка должна состоять только из букв русского алфавита, пробелов и дефисов. Фамилия, имя и отчество
//   должны разделяться пробелами. Внутри фамилии, имени, отчества пробелов быть не должно.
//   Допустимы следующие сочетания фамилии, имени и отчества: ФИО, ИОФ, ИО, ИФ, ФИ, Ф, И, О.
//   Двойные и тройные имена и фамилии должны писаться через дефис. Имена и отчества должны быть полные
//
//  Падеж (обязательный), тип число
//   Падеж, в который необходимо поставить ФИО.
//   1 - Именительный
//   2 - Родительный
//   3 - Дательный
//   4 - Винительный
//   5 - Творительный
//   6 - Предложный
//
//  Пол (необязательный), тип ПеречислениеСсылка.ПолФизическихЛиц
//   Данный параметр предназначен для разрешения возможных неоднозначностей, например, имя Карен Акопян
//   может принадлежать и мужчине, и женщине, и в зависимости от этого склоняться или не склоняться.
//   В остальных случаях рекомендуется опускать этот параметр.
//
Функция ПросклонятьФИО(Компонента, Знач ФИО = "", Падеж = 1, Пол = 0, Результат = "", СообщениеОбОшибке = "") Экспорт
	
	Результат = ФИО;
	
	Если ПустаяСтрока(ФИО) Тогда
		СообщениеОбОшибке = "Строка с ФИО не должна быть пустой.";
		Возврат Ложь;
	КонецЕсли;
	
	Если Не РегламентированнаяОтчетность.ФИОНаписаноВерно(ФИО) Тогда
		СообщениеОбОшибке = "Строка с ФИО должна состоять только из букв русского алфавита, пробелов и дефисов.";
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрЧислоВхождений(ФИО, " ") > 3 Тогда
		СообщениеОбОшибке = "Фамилия, имя и отчество должны разделяться пробелами. Внутри фамилии, имени и отчества пробелов быть не должно.";
		Возврат Ложь;
	КонецЕсли;
	
	#Если Клиент Тогда
		
	Попытка
		Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
			Результат = Компонента.Просклонять(ФИО, Падеж, 1);
				
		ИначеЕсли Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
			Результат = Компонента.Просклонять(ФИО, Падеж, 2);
				
		Иначе
			Результат = Компонента.Просклонять(ФИО, Падеж);
				
		КонецЕсли;
		
	Исключение
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
		
	#Иначе
	
	Возврат Ложь;
	
	#КонецЕсли
	
КонецФункции // ПросклонятьФИО()

// Функция склоняет Фамилию, Имя и Отчество
// Параметры:
//  Фамилия, Имя, Отчество (обязательный), тип строка
//   Параметры должены содержать фамилию, имя и отчество в именительном падеже единственного числа.
//   Строка должна состоять только из букв русского алфавита, пробелов и дефисов. 
//   Внутри фамилии, имени, отчества пробелов быть не должно.
//   Двойные и тройные имена и фамилии должны писаться через дефис. Имена и отчества должны быть полные
//
//  Падеж (обязательный), тип число
//   Падеж, в который необходимо поставить ФИО.
//   1 - Именительный
//   2 - Родительный
//   3 - Дательный
//   4 - Винительный
//   5 - Творительный
//   6 - Предложный
//
//  Пол (необязательный), тип ПеречислениеСсылка.ПолФизическихЛиц
//   Данный параметр предназначен для разрешения возможных неоднозначностей, например, имя Карен Акопян
//   может принадлежать и мужчине, и женщине, и в зависимости от этого склоняться или не склоняться.
//   В остальных случаях рекомендуется опускать этот параметр.
//
Функция ПросклонятьФамилиюИмяОтчество(Компонента, Знач Фамилия = "", Знач Имя = "", Знач Отчество = "", Падеж = 1, Пол = 0, Результат = "", СообщениеОбОшибке = "") Экспорт
	
	ФамилияНовая	= Фамилия;
	ИмяНовое		= Имя;
	ОтчествоНовое	= Отчество;
	
	Результат = Фамилия + " " + Имя + " " + Отчество;
	
	// Двойные и тройные ФИО, если указаны с пробелами, исправим на использование дефиса
	НужноИсправитьФамилию	= Найти(Фамилия, " ") > 0;
	НужноИсправитьИмя		= Найти(Имя, " ") > 0;
	НужноИсправитьОтчество	= Найти(Отчество, " ") > 0;
	Если НужноИсправитьФамилию Тогда
		ФамилияНовая = СтрЗаменить(Фамилия, " ", "-");
	КонецЕсли;
	Если НужноИсправитьИмя Тогда
		ИмяНовое = СтрЗаменить(Имя, " ", "-");
	КонецЕсли;
	Если НужноИсправитьОтчество Тогда
		ОтчествоНовое = СтрЗаменить(Отчество, " ", "-");
	КонецЕсли;
	
	ФИО = ФамилияНовая + " " + ИмяНовое + " " + ОтчествоНовое;
	
	Если ПустаяСтрока(ФИО) Тогда
		СообщениеОбОшибке = "Строка с ФИО не должна быть пустая.";
		Возврат Ложь;
	КонецЕсли;
	
	Если Не РегламентированнаяОтчетность.ФИОНаписаноВерно(ФИО) Тогда
		СообщениеОбОшибке = "Строка с ФИО должна состоять только из букв русского алфавита, пробелов и дефисов.";
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрЧислоВхождений(ФИО, " ") > 3 Тогда
		СообщениеОбОшибке = "Фамилия, имя и отчество должны разделяться пробелами. Внутри фамилии, имени, отчества пробелов быть не должно.";
		Возврат Ложь;
	КонецЕсли;
	
	#Если Клиент Тогда
		
	Попытка
		Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
			Результат = Компонента.Просклонять(ФИО, Падеж, 1);
				
		ИначеЕсли Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
			Результат = Компонента.Просклонять(ФИО, Падеж, 2);
				
		Иначе
			Результат = Компонента.Просклонять(ФИО, Падеж);
				
		КонецЕсли;
		
		// Вернем пробелы в составные ФИО обратно, если до этого их изменили
		Если НужноИсправитьФамилию ИЛИ НужноИсправитьИмя ИЛИ НужноИсправитьОтчество Тогда
			
			МассивФИО = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Результат, " ");
			
			Результат = "";
			
			ИндексФИО = 0;
			
			Если Не ПустаяСтрока(Фамилия) Тогда
				ФамилияНовая = МассивФИО[ИндексФИО];
				ИндексФИО = ИндексФИО + 1;
				
				Если НужноИсправитьФамилию Тогда
					
					Если СтрЧислоВхождений(Фамилия, "-") > 0 Тогда
						
						МассивФамилия = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ФамилияНовая, "-");
						ФамилияНовая = МассивФамилия[0];
						ИндексФамилия = 1;
						
						Пока Истина Цикл
							
							ПозПробел = Найти(Фамилия, " ");
							ПозДефис  = Найти(Фамилия, "-");
							
							Если ПозПробел = ПозДефис Тогда
								Прервать;
							КонецЕсли;
							
							Если (ПозДефис = 0) ИЛИ (ПозПробел > 0) И (ПозПробел < ПозДефис) Тогда
								ФамилияНовая = ФамилияНовая + " ";
								Фамилия = Сред(Фамилия, ПозПробел+1);
								
							ИначеЕсли (ПозПробел = 0) ИЛИ (ПозДефис > 0) И (ПозДефис < ПозПробел) Тогда
								ФамилияНовая = ФамилияНовая + "-";
								Фамилия = Сред(Фамилия, ПозДефис+1);
								
							КонецЕсли;
							
							ФамилияНовая = ФамилияНовая + МассивФамилия[ИндексФамилия];
							ИндексФамилия = ИндексФамилия + 1;
							
						КонецЦикла;
						
					Иначе
						ФамилияНовая = СтрЗаменить(ФамилияНовая, "-", " ");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Результат = Результат + ФамилияНовая;
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(Имя) Тогда
				ИмяНовое = МассивФИО[ИндексФИО];
				ИндексФИО = ИндексФИО + 1;
				
				Если НужноИсправитьИмя Тогда
					
					Если СтрЧислоВхождений(Имя, "-") > 0 Тогда
						
						МассивИмя = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяНовое, "-");
						ИмяНовое = МассивИмя[0];
						ИндексИмя = 1;
						
						Пока Истина Цикл
							
							ПозПробел = Найти(Имя, " ");
							ПозДефис  = Найти(Имя, "-");
							
							Если ПозПробел = ПозДефис Тогда
								Прервать;
							КонецЕсли;
							
							Если (ПозДефис = 0) ИЛИ (ПозПробел > 0) И (ПозПробел < ПозДефис) Тогда
								ИмяНовое = ИмяНовое + " ";
								Имя = Сред(Имя, ПозПробел+1);
								
							ИначеЕсли (ПозПробел = 0) ИЛИ (ПозДефис > 0) И (ПозДефис < ПозПробел) Тогда
								ИмяНовое = ИмяНовое + "-";
								Имя = Сред(Имя, ПозДефис+1);
								
							КонецЕсли;
							
							ИмяНовое = ИмяНовое + МассивИмя[ИндексИмя];
							ИндексИмя = ИндексИмя + 1;
							
						КонецЦикла;
						
					Иначе
						ИмяНовое = СтрЗаменить(ИмяНовое, "-", " ");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Результат = СокрЛП(Результат + " " + ИмяНовое);
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(Отчество) Тогда
				ОтчествоНовое = МассивФИО[ИндексФИО];
				ИндексФИО = ИндексФИО + 1;
				
				Если НужноИсправитьОтчество Тогда
					
					Если СтрЧислоВхождений(Отчество, "-") > 0 Тогда
						
						МассивОтчество = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ОтчествоНовое, "-");
						ОтчествоНовое = МассивОтчество[0];
						ИндексОтчество = 1;
						
						Пока Истина Цикл
							
							ПозПробел = Найти(Отчество, " ");
							ПозДефис  = Найти(Отчество, "-");
							
							Если ПозПробел = ПозДефис Тогда
								Прервать;
							КонецЕсли;
							
							Если (ПозДефис = 0) ИЛИ (ПозПробел > 0) И (ПозПробел < ПозДефис) Тогда
								ОтчествоНовое = ОтчествоНовое + " ";
								Отчество = Сред(Отчество, ПозПробел+1);
								
							ИначеЕсли (ПозПробел = 0) ИЛИ (ПозДефис > 0) И (ПозДефис < ПозПробел) Тогда
								ОтчествоНовое = ОтчествоНовое + "-";
								Отчество = Сред(Отчество, ПозДефис+1);
								
							Иначе
								Прервать;
								
							КонецЕсли;
							
							ОтчествоНовое = ОтчествоНовое + МассивОтчество[ИндексОтчество];
							ИндексОтчество = ИндексОтчество + 1;
							
						КонецЦикла;
						
					Иначе
						ОтчествоНовое = СтрЗаменить(ОтчествоНовое, "-", " ");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Результат = СокрЛП(Результат + " " + ОтчествоНовое);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение
		Возврат Ложь;
		
	КонецПопытки;
	
	#Иначе
	
	Возврат Ложь;
	
	#КонецЕсли
	
КонецФункции // ПросклонятьФИО()

// Функция формирует наименовние элемента справочника СотрудникиОрганизаций
//
// Параметры
//  <Физлицо>  – <СправочникСсылка.ФизическиеЛица> – физлицо 
//  <Постфикс>  – <Строка> – постфикс наименования сотрудника
//
// Возвращаемое значение:
//   <Строка>   – наименование сотрудника
//
Функция УстановитьНаименованиеСотрудника(Физлицо, Постфикс) Экспорт

	Возврат  Физлицо.Наименование + ?(ЗначениеЗаполнено(Постфикс), " " + Постфикс, "");

КонецФункции // УстановитьНаименованиеСотрудника()

// Процедура производит синхронирзацию наименований сотрудников
Процедура СинхронизироватьНаименованияСотрудников(Физлицо, Сотрудник = Неопределено) Экспорт
	
	Если Сотрудник = Неопределено Тогда
		Сотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	КонецЕсли; 

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиОрганизаций.Наименование,
	|	СотрудникиОрганизаций.ПостфиксНаименования,
	|	СотрудникиОрганизаций.Ссылка
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Физлицо = &парамФизлицо";	
	
	Запрос.УстановитьПараметр("парамФизлицо", Физлицо);
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка = Сотрудник Тогда
			// не обрабатываем сотрудника, из которого вызвана синхронизация
			Продолжить;
		КонецЕсли; 
		
		СотрудникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка	
			СотрудникОбъект.Заблокировать();
		Исключение
			Продолжить;
		КонецПопытки;
		СотрудникОбъект.Наименование = УстановитьНаименованиеСотрудника(Физлицо, Выборка.ПостфиксНаименования);
		СотрудникОбъект.Записать();
		СотрудникОбъект.Разблокировать();
	КонецЦикла; 

КонецПроцедуры

// Функция определяет пол физлица по его отчеству
//
Функция ПолучитьПол(ОтчествоРаботника) Экспорт
	
	Если Прав(ОтчествоРаботника, 2) = "ич" Тогда
		Возврат Перечисления.ПолФизическихЛиц.Мужской;
	
	ИначеЕсли Прав(ОтчествоРаботника, 2) = "на" Тогда
		Возврат Перечисления.ПолФизическихЛиц.Женский;
	
	КонецЕсли;
	
	Возврат Перечисления.ПолФизическихЛиц.ПустаяСсылка();
	
КонецФункции // ПолучитьПол()
 
Процедура ОткрытьВводПоказателейПоОрганизации() Экспорт
	
	ФормаОбработки = Обработки.ЗначенияПоказателейСхемМотивации.ПолучитьФорму();
	ФормаОбработки.ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц;
	ФормаОбработки.Открыть();
	
КонецПроцедуры

Процедура ОткрытьВводПоказателейПоЦФО() Экспорт
	
	ФормаОбработки = Обработки.ЗначенияПоказателейСхемМотивации.ПолучитьФорму();
	ФормаОбработки.ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоЦентрамОтветственности;
	ФормаОбработки.Открыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ГОЛОВНЫЕ ОРГАНИЗАЦИИ И ОБОСОБЛЕННЫЕ ПОДРАЗДЕЛЕНИЯ

// Формирует список головных организаций предприятия
Функция ПолучитьСписокГоловныхОрганизаций() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &ПустаяОрганизация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.ГоловнаяОрганизация,
	|	Организации.ГоловнаяОрганизация.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация <> &ПустаяОрганизация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");

	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());						  

	СписокОрганизаций = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла; 

	Возврат СписокОрганизаций;
	
КонецФункции 

// Формирует список обособленных структурных подразделений организации
Функция ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация");

	Запрос.УстановитьПараметр("Организация", Организация);

	СписокОрганизаций = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;
КонецФункции // ПолучитьСписокОбособленныхПодразделенийОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ

#Если Клиент Тогда

// Функция ищет единственного сотрудника среди работников предприятия или организаций по
//  началу его наименования
//
// Параметры
//  СтандартнаяОбработка – параметр стандартной обработки события обработчика АвтоПодборТекста
//	Режим – строка, определяет источники, из которых производится подбор 
//	Текст  - начальные буквы ФИО, текст из обработчика АвтоПодборТекста
//	Организация – ссылка на организацию по которой подбирать сотрудников (работников)
//	ВозвращатьФизлицо – параметр определяет, что должна вернуть функция, наименование Сотрудника или Физлица
//	ТолькоАктуальных – параметр определяет, вести поиск среди всех сотрудников, или только актуальных
//
// Возвращаемое значение
//  строка - наименование найденного сотрудника, физлица, если он единственный
//
Функция ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, Режим, Знач Текст, Организация = Неопределено, ВозвращатьФизлицо = Ложь, ТолькоАктуальные = Истина) Экспорт
	
	ТекстАвтоПодбора = "";
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
		
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст+"%";
	
	Запрос.УстановитьПараметр("Текст", Текст);
	
	Если Режим = "Работники" Тогда
		
		ПозицияСкобки = Найти(Текст,"(");
		Если ПозицияСкобки <> 0 Тогда
			Текст = Лев(Текст, ПозицияСкобки - 1);	
		КонецЕсли;
		Запрос.УстановитьПараметр("Текст", СокрП(Текст));
		
		Запрос.УстановитьПараметр("ДатаАктуальности", ОбщегоНазначения.ПолучитьРабочуюДату());
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ТекстУсловияНаАктуальность = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И СотрудникиОрганизаций.Актуальность";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Работники.ФизЛицо,
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.ВидДоговора,
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоТрудовойДоговор
		|ПОМЕСТИТЬ ВТ_ФизическиеЛица
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|		Работники.ФизЛицо КАК ФизЛицо
		|	ИЗ
		|		РегистрСведений.Работники КАК Работники
		|	ГДЕ
		|		Работники.ФизЛицо.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~"") КАК Работники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО Работники.ФизЛицо = СотрудникиОрганизаций.Физлицо
		|ГДЕ
		|	СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)" + ТекстУсловияНаАктуальность +"
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭтоТрудовойДоговор";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РаботникиОсновноеМесто.Сотрудник,
		|	РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
		|	ВЫБОР
		|		КОГДА РаботникиОсновноеМесто.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоОсновноеМестоРаботы
		|ПОМЕСТИТЬ ВТ_Сотрудники_ТрудовойДоговор
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&ДатаАктуальности,
		|			Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТ_ФизическиеЛица ГДЕ ЭтоТрудовойДоговор)) КАК РаботникиОсновноеМесто
		|ГДЕ
		|	ВЫБОР
		|		КОГДА РаботникиОсновноеМесто.ПериодЗавершения <= &ДатаАктуальности
		|				И РаботникиОсновноеМесто.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА РаботникиОсновноеМесто.ПричинаИзмененияСостоянияЗавершения
		|		ИНАЧЕ РаботникиОсновноеМесто.ПричинаИзмененияСостояния
		|	КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭтоОсновноеМестоРаботы,
		|	Физлицо";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	СписокСотрудников.Сотрудник.Наименование КАК Наименование,
		|	СписокСотрудников.Физлицо.Наименование КАК ФизлицоНаименование
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
		|		РаботникиОсновноеМесто.Физлицо КАК Физлицо,
		|		1 КАК Приоритет
		|	ИЗ
		|		ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиОсновноеМесто
		|	
		|	ГДЕ
		|		РаботникиОсновноеМесто.ЭтоОсновноеМестоРаботы
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиОсновноеМесто.Физлицо
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		МАКСИМУМ(РаботникиСовместительство.Сотрудник),
		|		РаботникиСовместительство.Физлицо,
		|		2
		|	ИЗ
		|		ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиСовместительство
		|			
		|	ГДЕ
		|		НЕ РаботникиСовместительство.ЭтоОсновноеМестоРаботы
		|		
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиСовместительство.Физлицо
		|		
		|	ОБЪЕДИНИТЬ
		|		
		|	ВЫБРАТЬ
		|		МАКСИМУМ(СотрудникиДУ.Сотрудник),
		|		СотрудникиДУ.Физлицо,
		|		ВЫБОР
		|			КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|				ТОГДА 3
		|			КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
		|				ТОГДА 4
		|			ИНАЧЕ 5
		|		КОНЕЦ
		|	ИЗ
		|		ВТ_ФизическиеЛица КАК СотрудникиДУ
		|			
		|	СГРУППИРОВАТЬ ПО
		|		СотрудникиДУ.Физлицо,
		|		ВЫБОР
		|			КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|				ТОГДА 3
		|			КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
		|				ТОГДА 4
		|			ИНАЧЕ 5
		|		КОНЕЦ) КАК СписокСотрудников
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СписокФизическихЛиц.Физлицо КАК Физлицо,
		|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
		|				ИЗ
		|					(ВЫБРАТЬ
		|						РаботникиОсновноеМесто.Физлицо КАК Физлицо,
		|						1 КАК Приоритет
		|					ИЗ
		|						ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиОсновноеМесто
		|			
		|					ГДЕ
		|			  			РаботникиОсновноеМесто.ЭтоОсновноеМестоРаботы
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						РаботникиСовместительство.Физлицо,
		|						2
		|					ИЗ
		|						ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиСовместительство
		|			
		|					ГДЕ
		|						НЕ РаботникиСовместительство.ЭтоОсновноеМестоРаботы
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						СотрудникиДУ.Физлицо,
		|						ВЫБОР
		|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|								ТОГДА 3
		|							КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
		|								ТОГДА 4
		|							ИНАЧЕ 5
		|						КОНЕЦ
		|					ИЗ
		|						ВТ_ФизическиеЛица КАК СотрудникиДУ) КАК СписокФизическихЛиц
		|				
		|				СГРУППИРОВАТЬ ПО
		|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
		|	ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
		|		И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет";
			
	ИначеЕсли Режим = "РаботникиИДоговорники" Тогда
		
		ДоговорыГПХ = Новый Массив;
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
		
		ТекстУсловияРаботники = "";
		//условие по Организации используем, если в качестве параметра передана не пустая ссылка на справочник
		Если ЗначениеЗаполнено(Организация) и ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияРаботники = " И Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		ТекстУсловияНаАктуальность = "";
		ТекстУсловияНаАктуальностьДоговорники = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И РаботникиОрганизации.Сотрудник.Актуальность";
			ТекстУсловияНаАктуальностьДоговорники = " И ДоговорникиОрганизаций.Актуальность";
		КонецЕсли;
		
		Если ВозвращатьФизлицо Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
			|	РаботникиИДоговорники.ФизлицоНаименование КАК ФизлицоНаименование
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		РаботникиОрганизации.Сотрудник.Физлицо.Наименование КАК ФизлицоНаименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияРаботники + ТекстУсловияНаАктуальность +"
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ДоговорникиОрганизаций.Физлицо.Наименование
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
			|	ГДЕ
			|		ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)" + ТекстУсловияРаботники + ТекстУсловияНаАктуальностьДоговорники +") КАК РаботникиИДоговорники";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
			|	РаботникиИДоговорники.Наименование КАК Наименование
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		РаботникиОрганизации.Сотрудник.Наименование КАК Наименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияРаботники + ТекстУсловияНаАктуальность +"
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ДоговорникиОрганизаций.Наименование
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
			|	ГДЕ
			|		ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)" + ТекстУсловияРаботники + ТекстУсловияНаАктуальностьДоговорники +") КАК РаботникиИДоговорники";
			
		КонецЕсли;	
		
	ИначеЕсли Режим = "Договорники" Тогда
		
		ДоговорыГПХ = Новый Массив;
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
		
		ТекстУсловияРаботники = "";
		Если ЗначениеЗаполнено(Организация) и ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияРаботники = " И ДоговорникиОрганизаций.Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		ТекстУсловияНаАктуальность = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И ДоговорникиОрганизаций.Актуальность";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	ДоговорникиОрганизаций.Наименование
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
		|ГДЕ
		|	ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|	И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)" + ТекстУсловияРаботники + ТекстУсловияНаАктуальность;
	
	ИначеЕсли Режим = "РаботникиОрганизации" Тогда
		
		ТекстУсловияОрганизации = "";
		
		Если ЗначениеЗаполнено(Организация) и ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияОрганизации = " И Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		ТекстУсловияНаАктуальность = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И РаботникиОрганизации.Сотрудник.Актуальность";
		КонецЕсли;
		
		Если ВозвращатьФизлицо Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
			|	РаботникиОрганизации.Сотрудник.Физлицо.Наименование КАК ФизлицоНаименование
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|ГДЕ
			|	РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность;
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
			|	РаботникиОрганизации.Сотрудник.Наименование КАК Наименование
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|ГДЕ
			|	РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность;
			
		КонецЕсли;
		
	ИначеЕсли Режим = "Сотрудники" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	СотрудникиОрганизаций.Наименование КАК Наименование
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|	И СотрудникиОрганизаций.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий))
		|	И СотрудникиОрганизаций.Актуальность";
		
	ИначеЕсли Режим = "СотрудникиОрганизации" Тогда
		
		ТекстУсловияОрганизации = "";
		Если ЗначениеЗаполнено(Организация) и ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияОрганизации = " И СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	СотрудникиОрганизаций.Наименование КАК Наименование
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизаций.Сотрудник
		|ГДЕ
		|	СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|	И РаботникиОрганизаций.Сотрудник ЕСТЬ NULL 
		|	И СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|	И СотрудникиОрганизаций.Актуальность"+ ТекстУсловияОрганизации;
		
	Иначе
		
		Возврат ТекстАвтоПодбора;
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Если ВозвращатьФизлицо Тогда
			ТекстАвтоПодбора = Выборка.ФизлицоНаименование;
		Иначе
			ТекстАвтоПодбора = Выборка.Наименование;
		КонецЕсли;
	КонецЕсли;

	Возврат ТекстАвтоПодбора;
	
КонецФункции // ПодобратьФИОРаботникаКандидата()

// Функция ищет сотрудника среди работников предприятия или организаций по
//  началу его наименования
//
// Параметры
// 	СтандартнаяОбработка – параметр стандартной обработки события обработчика АвтоПодборТекста
//	Режим – строка, определяет источники, из которых производится подбор 
//	Текст  - начальные буквы ФИО, текст из обработчика АвтоПодборТекста
//	Организация – ссылка на организацию по которой подбирать сотрудников (работников)
//	ВозвращатьФизлицо – параметр определяет, что должна вернуть функция, ссылку на Сотрудника или Физлицо
//	ТолькоАктуальных – параметр определяет, вести поиск среди всех сотрудников, или только актуальных
//
// Возвращаемое значение
//  СписокЗначений - список подходящих физлиц, если их найдено не более 50
//  Неопределено - если найдено более 50 подходящих физлиц
//
Функция ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, Режим, Знач Текст, НачальноеЗначение, Организация = Неопределено, ВозвращатьФизлицо = Ложь, ТолькоАктуальные = Истина) Экспорт
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// заменим спецсимволы
	Текст = СОКРЛП(Текст);
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст+"%";
	
	Запрос.УстановитьПараметр("Текст", Текст);
	
	Если Режим = "Работники" Тогда
		
		ПозицияСкобки = Найти(Текст,"(");
		Если ПозицияСкобки <> 0 Тогда
			Текст = Лев(Текст, ПозицияСкобки - 1);	
		КонецЕсли;
		Запрос.УстановитьПараметр("Текст", СокрП(Текст));
		
		Запрос.УстановитьПараметр("ДатаАктуальности", ОбщегоНазначения.ПолучитьРабочуюДату());
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ТекстУсловияНаАктуальность = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И СотрудникиОрганизаций.Актуальность";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Работники.ФизЛицо,
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.ВидДоговора,
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоТрудовойДоговор
		|ПОМЕСТИТЬ ВТ_ФизическиеЛица
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|		Работники.ФизЛицо КАК ФизЛицо
		|	ИЗ
		|		РегистрСведений.Работники КАК Работники
		|	ГДЕ
		|		Работники.ФизЛицо.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~"") КАК Работники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО Работники.ФизЛицо = СотрудникиОрганизаций.Физлицо
		|ГДЕ
		|	СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)" + ТекстУсловияНаАктуальность + "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭтоТрудовойДоговор";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РаботникиОсновноеМесто.Сотрудник,
		|	РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
		|	ВЫБОР
		|		КОГДА РаботникиОсновноеМесто.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоОсновноеМестоРаботы
		|ПОМЕСТИТЬ ВТ_Сотрудники_ТрудовойДоговор
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&ДатаАктуальности,
		|			Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТ_ФизическиеЛица ГДЕ ЭтоТрудовойДоговор)) КАК РаботникиОсновноеМесто
		|ГДЕ
		|	ВЫБОР
		|		КОГДА РаботникиОсновноеМесто.ПериодЗавершения <= &ДатаАктуальности
		|				И РаботникиОсновноеМесто.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА РаботникиОсновноеМесто.ПричинаИзмененияСостоянияЗавершения
		|		ИНАЧЕ РаботникиОсновноеМесто.ПричинаИзмененияСостояния
		|	КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭтоОсновноеМестоРаботы,
		|	Физлицо";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|	СписокСотрудников.Сотрудник КАК Ссылка,
		|	СписокСотрудников.Сотрудник.Наименование КАК Наименование,
		|	СписокСотрудников.Физлицо КАК Физлицо,
		|	СписокСотрудников.ФизЛицо.Наименование КАК ФизлицоНаименование
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
		|		РаботникиОсновноеМесто.Физлицо КАК Физлицо,
		|		1 КАК Приоритет
		|	ИЗ
		|		ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиОсновноеМесто
		|	
		|	ГДЕ
		|		РаботникиОсновноеМесто.ЭтоОсновноеМестоРаботы
		|			
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиОсновноеМесто.Физлицо
		|			
		|	ОБЪЕДИНИТЬ
		|			
		|	ВЫБРАТЬ
		|		МАКСИМУМ(РаботникиСовместительство.Сотрудник),
		|		РаботникиСовместительство.Физлицо,
		|		2
		|	ИЗ
		|		ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиСовместительство
		|			
		|	ГДЕ
		|		НЕ РаботникиСовместительство.ЭтоОсновноеМестоРаботы
		|		
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиСовместительство.Физлицо
		|			
		|	ОБЪЕДИНИТЬ
		|		
		|	ВЫБРАТЬ
		|		МАКСИМУМ(СотрудникиДУ.Сотрудник),
		|		СотрудникиДУ.Физлицо,
		|		ВЫБОР
		|			КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|				ТОГДА 3
		|			КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
		|				ТОГДА 4
		|			ИНАЧЕ 5
		|		КОНЕЦ
		|	ИЗ
		|		ВТ_ФизическиеЛица КАК СотрудникиДУ
		|			
		|	СГРУППИРОВАТЬ ПО
		|		СотрудникиДУ.Физлицо,
		|		ВЫБОР
		|			КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|				ТОГДА 3
		|			КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
		|				ТОГДА 4
		|			ИНАЧЕ 5
		|		КОНЕЦ) КАК СписокСотрудников
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СписокФизическихЛиц.Физлицо КАК Физлицо,
		|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
		|				ИЗ
		|					(ВЫБРАТЬ
		|						РаботникиОсновноеМесто.Физлицо КАК Физлицо,
		|						1 КАК Приоритет
		|					ИЗ
		|						ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиОсновноеМесто
		|			
		|					ГДЕ
		|			  			РаботникиОсновноеМесто.ЭтоОсновноеМестоРаботы
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						РаботникиСовместительство.Физлицо,
		|						2
		|					ИЗ
		|						ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиСовместительство
		|			
		|					ГДЕ
		|						НЕ РаботникиСовместительство.ЭтоОсновноеМестоРаботы
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						СотрудникиДУ.Физлицо,
		|						ВЫБОР
		|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|								ТОГДА 3
		|							КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
		|								ТОГДА 4
		|							ИНАЧЕ 5
		|						КОНЕЦ
		|					ИЗ
		|						ВТ_ФизическиеЛица КАК СотрудникиДУ) КАК СписокФизическихЛиц
		|				
		|				СГРУППИРОВАТЬ ПО
		|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
		|	ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
		|		И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет";
		
	ИначеЕсли Режим = "РаботникиИДоговорники" Тогда
		
		ДоговорыГПХ = Новый Массив;
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
		
		ТекстУсловияРаботники = "";
		Если ЗначениеЗаполнено(Организация) и ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияРаботники = " И Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		ТекстУсловияНаАктуальность = "";
		ТекстУсловияНаАктуальностьДоговорники = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И РаботникиОрганизации.Сотрудник.Актуальность";
			ТекстУсловияНаАктуальностьДоговорники = " И ДоговорникиОрганизаций.Актуальность";
		КонецЕсли;
		
		Если ВозвращатьФизлицо Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	РаботникиИДоговорники.Физлицо,
			|	РаботникиИДоговорники.ФизлицоНаименование
			|ИЗ
			|	(ВЫБРАТЬ
			|		РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
			|		РаботникиОрганизации.Сотрудник.Физлицо.Наименование КАК ФизлицоНаименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~"""+ ТекстУсловияРаботники + ТекстУсловияНаАктуальность +"
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ДоговорникиОрганизаций.Физлицо,
			|		ДоговорникиОрганизаций.Физлицо.Наименование
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
			|	ГДЕ
			|		ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)"+ ТекстУсловияРаботники + ТекстУсловияНаАктуальностьДоговорники +") КАК РаботникиИДоговорники";
			
		Иначе
			
			Запрос.УстановитьПараметр("ДатаАктуальности", ОбщегоНазначения.ПолучитьРабочуюДату());
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	РаботникиОрганизации.Сотрудник КАК Сотрудник
			|ПОМЕСТИТЬ ВТ_СписокРаботников
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|ГДЕ
			|	РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияРаботники + ТекстУсловияНаАктуальность;
			Запрос.Выполнить();
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СписокРаботников.Ссылка,
			|	СписокРаботников.Наименование
			|ИЗ
			|	(ВЫБРАТЬ
			|		РаботникиСрезПоследних.Сотрудник КАК Ссылка,
			|		ВЫБОР
			|			КОГДА РаботникиСрезПоследних.Сотрудник.Актуальность
			|				ТОГДА ВЫБОР
			|						КОГДА РаботникиСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
			|								И РаботникиСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
			|							ТОГДА ВЫБОР
			|									КОГДА РаботникиСрезПоследних.ПричинаИзмененияСостоянияЗавершения = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|										ТОГДА ""(ув.) "" + РаботникиСрезПоследних.Сотрудник.Наименование
			|									ИНАЧЕ РаботникиСрезПоследних.Сотрудник.Наименование
			|								КОНЕЦ
			|						ИНАЧЕ ВЫБОР
			|								КОГДА РаботникиСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|									ТОГДА ""(ув.) "" + РаботникиСрезПоследних.Сотрудник.Наименование
			|								ИНАЧЕ РаботникиСрезПоследних.Сотрудник.Наименование
			|							КОНЕЦ
			|					КОНЕЦ
			|			ИНАЧЕ ""(не актуалент) "" + РаботникиСрезПоследних.Сотрудник.Наименование
			|		КОНЕЦ КАК Наименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТ_СписокРаботников)) КАК РаботникиСрезПоследних
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ 
			|		ДоговорникиОрганизаций.Ссылка,
			|		ВЫБОР
			|			КОГДА ДоговорникиОрганизаций.Актуальность
			|				ТОГДА ДоговорникиОрганизаций.Наименование
			|			ИНАЧЕ ""(не актуалент) "" + ДоговорникиОрганизаций.Наименование
			|		КОНЕЦ
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
			|	ГДЕ
			|		ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)" + ТекстУсловияРаботники + ТекстУсловияНаАктуальностьДоговорники + ") КАК СписокРаботников
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование УБЫВ";
			
			
		КонецЕсли;
		
	ИначеЕсли Режим = "Договорники" Тогда
		
		ДоговорыГПХ = Новый Массив;
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
		
		ТекстУсловияРаботники = "";
		Если ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияРаботники = " И ДоговорникиОрганизаций.Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		ТекстУсловияНаАктуальность = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И ДоговорникиОрганизаций.Актуальность";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|	ВЫБОР
		|		КОГДА ДоговорникиОрганизаций.Актуальность
		|			ТОГДА ДоговорникиОрганизаций.Наименование
		|		ИНАЧЕ ""(не актуалент) "" + ДоговорникиОрганизаций.Наименование
		|	КОНЕЦ КАК Наименование,
		|	ДоговорникиОрганизаций.Ссылка
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
		|ГДЕ
		|	ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|	И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)" + ТекстУсловияРаботники + ТекстУсловияНаАктуальность + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование УБЫВ";
		
	ИначеЕсли Режим = "РаботникиОрганизации" Тогда
		
		ТекстУсловияОрганизации = "";
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ТекстУсловияОрганизации = " И Организация = &ГоловнаяОрганизация";
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		КонецЕсли;
		
		ТекстУсловияНаАктуальность = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И РаботникиОрганизации.Сотрудник.Актуальность";
		КонецЕсли;
		
		Если ВозвращатьФизлицо Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
			|	РаботникиОрганизации.Сотрудник.Физлицо.Наименование КАК ФизлицоНаименование
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|ГДЕ
			|	РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность;
			
		Иначе
			
			Запрос.УстановитьПараметр("ДатаАктуальности", ОбщегоНазначения.ПолучитьРабочуюДату());
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	РаботникиОрганизации.Сотрудник КАК Сотрудник
			|ПОМЕСТИТЬ ВТ_СписокРаботников
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|ГДЕ
			|	РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность;
			Запрос.Выполнить();
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РаботникиСрезПоследних.Сотрудник КАК Ссылка,
			|	ВЫБОР
			|		КОГДА РаботникиСрезПоследних.Сотрудник.Актуальность
			|			ТОГДА ВЫБОР
			|					КОГДА РаботникиСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
			|							И РаботникиСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
			|						ТОГДА ВЫБОР
			|								КОГДА РаботникиСрезПоследних.ПричинаИзмененияСостоянияЗавершения = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|									ТОГДА ""(ув.) "" + РаботникиСрезПоследних.Сотрудник.Наименование
			|								ИНАЧЕ РаботникиСрезПоследних.Сотрудник.Наименование
			|							КОНЕЦ
			|					ИНАЧЕ ВЫБОР
			|							КОГДА РаботникиСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|								ТОГДА ""(ув.) "" + РаботникиСрезПоследних.Сотрудник.Наименование
			|							ИНАЧЕ РаботникиСрезПоследних.Сотрудник.Наименование
			|						КОНЕЦ
			|				КОНЕЦ
			|		ИНАЧЕ ""(не актуалент) "" + РаботникиСрезПоследних.Сотрудник.Наименование
			|	КОНЕЦ КАК Наименование
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТ_СписокРаботников)) КАК РаботникиСрезПоследних
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование УБЫВ";
			
		КонецЕсли;
		
	ИначеЕсли Режим = "Сотрудники" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|	СотрудникиОрганизаций.Ссылка КАК Ссылка,
		|	СотрудникиОрганизаций.Наименование КАК Наименование
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|	И СотрудникиОрганизаций.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий))
		|	И СотрудникиОрганизаций.Актуальность";
		
	ИначеЕсли Режим = "СотрудникиОрганизации" Тогда
		
		ТекстУсловияОрганизации = "";
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияОрганизации = " И СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|	СотрудникиОрганизаций.Ссылка КАК Ссылка,
		|	СотрудникиОрганизаций.Наименование КАК Наименование
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизаций.Сотрудник
		|ГДЕ
		|	СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|	И РаботникиОрганизаций.Сотрудник ЕСТЬ NULL 
		|	И СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|	И СотрудникиОрганизаций.Актуальность"+ ТекстУсловияОрганизации;
		
	Иначе
		
		Возврат Новый СписокЗначений;
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Количество = Выборка.Количество();
	
	Если Количество < 51 Тогда
		
		Значение = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Если ВозвращатьФизлицо Тогда
				Значение.Добавить(Выборка.Физлицо, Выборка.ФизлицоНаименование);
			Иначе
				Значение.Добавить(Выборка.Ссылка, Выборка.Наименование);
			КонецЕсли;
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		Возврат Значение;
		
	Иначе
		// значений для выбора больше 50
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПодобратьСписокРаботниковКандидатов()

// Открывает форму обработки для подготовки списка работников, отобранного по указанным пользователем критериям
//
// Владелец - форма, для которой требуется вызвать обработку
// ДатаАктуальности - дата, по состоянию на которую осматривается список работников
// ИмяРегистра - строка, возможны 2 значения - "РаботникиОрганизаций" или "Работники" - определяет
//               какие работники будут отбираться - по регл. или по упр. учету
// Организация - ссылка на организацию (может быть в том числе обособленным подразделением), если передана пустая ссылка, выбираются 
//					работники всех организаций
// Подразделение - ссылка на подразделение, если передана пустая ссылка, выбираются 
//					работники всех подразделений
// 
Процедура ОткрытьФормуОтбораСпискаРаботников(Владелец, ДатаАктуальности, ИмяРегистра = "РаботникиОрганизаций", Организация = Неопределено, Подразделение = Неопределено, ИсполнятьЗапрос = Истина, ВыбиратьСотрудника = Истина, ИменаСтраницФормы = Неопределено, Реквизиты = Неопределено, ДатаУволенных = Неопределено, ВключатьУволенных = Ложь, ВключатьДоговорников = Ложь) Экспорт
	
	Если ИмяРегистра = "РаботникиОрганизаций" И НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не указана организация, отобрать список работников невозможно!");
		Возврат;
	КонецЕсли;
		
	ФормированиеСпискаРаботников = Обработки.ФормированиеСпискаРаботников.Создать();
	ФормированиеСпискаРаботников.ИмяРегистра			= ИмяРегистра;
	ФормированиеСпискаРаботников.ДатаАктуальности		= ДатаАктуальности;
	ФормированиеСпискаРаботников.ДатаУволенных			= ?(ДатаУволенных = Неопределено, НачалоГода(ДатаАктуальности), ДатаУволенных);
	ФормированиеСпискаРаботников.ИсполнятьЗапрос		= ИсполнятьЗапрос;
	ФормированиеСпискаРаботников.ВыбиратьСотрудника		= ВыбиратьСотрудника;
	ФормированиеСпискаРаботников.ВключатьДоговорников	= ВключатьДоговорников;
	ФормированиеСпискаРаботников.Реквизиты				= Реквизиты;
	ФормированиеСпискаРаботников.ВключатьУволенных	    = ВключатьУволенных;
	
	// подготовим Построитель отчета к работе
	ФормированиеСпискаРаботников.ЗаполнитьНачальныеНастройки();
	
	СтруктураНедоступныхОтборов = Новый Структура;
	Если ИмяРегистра = "РаботникиОрганизаций" Тогда
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Количество() = 0 Тогда 
			ФормированиеСпискаРаботников.ЗаполнитьНачальныеНастройки();	
		КонецЕсли;
		// Переданную организацию пропишем независимо от сохраненных ранее настроек отбора
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Найти("ОбособленноеПодразделение") = Неопределено Тогда
			ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Добавить("ОбособленноеПодразделение")
		КонецЕсли;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.ОбособленноеПодразделение.Установить(Организация,);
		ФормированиеСпискаРаботников.ПостроительОтчета.Параметры.Вставить("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		СтруктураНедоступныхОтборов.Вставить("ОбособленноеПодразделение");
	КонецЕсли;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Найти("Подразделение") = Неопределено Тогда
			ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Добавить("Подразделение")
		КонецЕсли;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Подразделение.Значение = Подразделение;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Подразделение.Использование = Истина;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Подразделение.ВидСравнения = ВидСравнения.ВИерархии;
		СтруктураНедоступныхОтборов.Вставить("Подразделение");
	КонецЕсли;
	
	// Теперь откроем подготовленную форму
	Форма = ФормированиеСпискаРаботников.ПолучитьФорму("ФормаНастройки",Владелец);
	Форма.мСтруктураНедоступныхОтборов = СтруктураНедоступныхОтборов;
	Если Реквизиты <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма,Реквизиты);
	КонецЕсли;
	
	Если ИменаСтраницФормы = Неопределено Тогда // страницу дополнительных данных не показываем
		Форма.ЭлементыФормы.ПанельСтраницы.Свертка = РежимСверткиЭлементаУправления.Низ;
	Иначе
		УдаляемыеСтраницы = Новый Массив;
		Страницы = Форма.ЭлементыФормы.ПанельСтраницы.Страницы;
		Для каждого СтраницаПанели Из Страницы Цикл
			Если СтраницаПанели.Имя <> ИменаСтраницФормы Тогда
				УдаляемыеСтраницы.Добавить(СтраницаПанели);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтраницаПанели Из УдаляемыеСтраницы Цикл
			Страницы.Удалить(Страницы.Индекс(СтраницаПанели))
		КонецЦикла;
	КонецЕсли;
	
	Форма.ОткрытьМодально();
	
КонецПроцедуры  // ОткрытьФормуОтбораСпискаРаботников()

// Открывает для выбора список доков ЗарплатаКВыплатеОрганизаций конкретной организации
//
// Параметры
//  Элемент - поле ввода, в котором выбирается платежная ведомость 
//  СтандартнаяОбработка - булево, признак стандартной обработки события
//  Организация - СправочникСсылка.Организации, организация ведости которой надо выбрать
//  СпособыВыплатыЗарплаты - ПеречислениеСсылка.СпособыВыплатыЗарплаты - дополнительное ограничение на список ведомостей
//
Процедура ОткрытьФормуВыбораПлатежныхВедомостейОрганизации(Элемент, СтандартнаяОбработка, Организация, СпособыВыплатыЗарплаты) Экспорт

	СтандартнаяОбработка  = Ложь;
	
	ФормаВыбора = Документы.ЗарплатаКВыплатеОрганизаций.ПолучитьФормуВыбора(, Элемент);
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;	
	
	ФормаВыбора.Отбор.Организация.ВидСравнения	= ВидСравнения.Равно;
	ФормаВыбора.Отбор.Организация.Значение		= Организация;
	ФормаВыбора.Отбор.Организация.Использование	= Истина;
	
	ФормаВыбора.Отбор.СпособВыплаты.ВидСравнения	= ВидСравнения.Равно;
	ФормаВыбора.Отбор.СпособВыплаты.Значение		= СпособыВыплатыЗарплаты;
	ФормаВыбора.Отбор.СпособВыплаты.Использование	= Истина;
	
	ФормаВыбора.Открыть();
	

КонецПроцедуры // ОткрытьФормуВыбораКассовыхПлатежныхВедомостейОрганизации()

// Обеспечивает подбор данных по сотруднику
// подбираются подразделение и должность
// Параметры:
//	Форма - форма в которой производится подбор данных
//	ЭлементФормы - элементы формы в которой производится подбор данных
//	Физлицо
//
// ВозвращаемоеЗначение - строка таблицы значений или Неопределено, 
// если подбор данных не состоялся
// Поля строки таблицы значений:
//		ПодразделениеОрганизации
//		Должность
//
Функция ПодборДанныхПоФизлицу(Форма, ЭлементФормы, Физлицо, Организация, ДатаСобытия, ПредлагатьВыбор = Ложь) Экспорт
	
	Запрос = Новый Запрос();
	
	
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("парамДатаСобытия", ДатаСобытия);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизации.Должность
	|	КОНЕЦ КАК Должность,
	|	РаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации.Наименование
	|	КОНЕЦ КАК ПодразделениеОрганизацииНаименование,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ДолжностьЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизации.Должность.Наименование
	|	КОНЕЦ КАК ДолжностьНаименование
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		&парамДатаСобытия,
	|		Сотрудник.Физлицо = &Физлицо
	|			И Сотрудник.Организация = &Организация) КАК РаботникиОрганизации
	|
	|УПОРЯДОЧИТЬ ПО
	|	РаботникиОрганизации.Период";
	
	НаборыДанных = Запрос.Выполнить().Выгрузить();
	
	Если НаборыДанных.Количество() = 0 Тогда
		// Если не нашли данных - ничего не делаем
		Возврат Неопределено;
	ИначеЕсли НаборыДанных.Количество() = 1 Тогда
		//если запись единственная, вернем ее
		Возврат НаборыДанных[0];
	ИначеЕсли ПредлагатьВыбор Тогда
		// предложим выбрать из списка если записей больше одной и предлагать выбор
		СписокНаборовДанных = Новый СписокЗначений;
		Для Каждого Строка Из НаборыДанных Цикл
			СписокНаборовДанных.Добавить(Строка, Строка.СотрудникНаименование + " (" + Строка.ПодразделениеОрганизацииНаименование + ", " + Строка.ДолжностьНаименование + ")");
		КонецЦикла;
		ВыбранныйНаборДанных = Форма.ВыбратьИзСписка(СписокНаборовДанных, ЭлементФормы);
		Если ВыбранныйНаборДанных = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Возврат ВыбранныйНаборДанных.Значение;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПодборДанныхПоФизлицу()

Процедура ОткрытьФормуВыбораСотрудника(Владелец, Ключ, ЗакрыватьПриВыборе, ДатаСреза, СтандартнаяОбработка = Неопределено, ТекущееЗначение = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуВыбора(, Владелец, Ключ);
	
	Форма.ДатаСреза 					= ДатаСреза;
	Форма.ПараметрВыборГруппИЭлементов	= ИспользованиеГруппИЭлементов.Элементы;
	Форма.РежимВыбора					= Истина;
	Форма.ЗакрыватьПриВыборе			= ЗакрыватьПриВыборе;
	
	Если ТекущееЗначение <> Неопределено Тогда
		Если ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
			Форма.ПараметрТекущаяСтрока		= ТекущееЗначение;
			
		ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Физлицо",					ТекущееЗначение);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиОрганизаций.Ссылка,
			|	ВЫБОР
			|		КОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
			|			ТОГДА ВЫБОР
			|					КОГДА СотрудникиОрганизаций.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
			|						ТОГДА 1
			|					ИНАЧЕ 2
			|				КОНЕЦ
			|		ИНАЧЕ 3
			|	КОНЕЦ КАК Порядок
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	((НЕ СотрудникиОрганизаций.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)))
			|			ИЛИ СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
			|	И СотрудникиОрганизаций.Физлицо = &Физлицо
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Форма.ПараметрТекущаяСтрока	= Выборка.Ссылка;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("Массив") Тогда
			Форма.мМассивВыбранныхЗначений = ТекущееЗначение;
			
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Неверный тип параметра: " + ТипЗнч(ТекущееЗначение));
			
		КонецЕсли;
	КонецЕсли;
	
	СписокДоговоров = Новый СписокЗначений;
	СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
	СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	
	Форма.Отбор.ВидДоговора.ВидСравнения	= ВидСравнения.ВСписке;
	Форма.Отбор.ВидДоговора.Использование	= Истина;
	Форма.Отбор.ВидДоговора.Значение		= СписокДоговоров;
	
	Форма.Отбор.ВидЗанятости.ВидСравнения = ВидСравнения.НеРавно;
	Форма.Отбор.ВидЗанятости.Использование = Истина;
	Форма.Отбор.ВидЗанятости.Значение = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;
	
	Форма.Открыть();
	
КонецПроцедуры // ОткрытьФормуВыбораСотрудника()

// Процедура открывает форму выбора сотрудников организации
// Параметры:
//	Владелец 			- владелец формы
//	Ключ 				- ключ, ссылка на документ из которого открывается форма
//	ЗакрыватьПриВыборе 	- Булево
//	ДатаСреза 			- дата, передается в форму для получения доп. данных по сотруднику на эту дату
//	ГоловнаяОрганизация - головная организация
//	КогоПодбирать 		- 0-всех, 1 - только по трудовым договорам, 2 - только договора ГПХ
//	СтандартнаяОбработка- Булево
//	ТекущееЗначение 	- ссылка на элемент, на котором необходимо спозиционироваться при открытии формы
//
Процедура ОткрытьФормуВыбораСотрудникаОрганизации(Владелец, Ключ, ЗакрыватьПриВыборе, ДатаСреза, ГоловнаяОрганизация = Неопределено, КогоВыбирать = 0, СтандартнаяОбработка = Неопределено, ТекущееЗначение = Неопределено, НеВыбиратьГруппы = Истина) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуВыбора(, Владелец, Ключ);
	
	Форма.ДатаСреза 					= ДатаСреза;
	Форма.ПараметрВыборГруппИЭлементов	= ИспользованиеГруппИЭлементов.Элементы;
	Форма.РежимВыбора					= Истина;
	Форма.ЗакрыватьПриВыборе			= ЗакрыватьПриВыборе;
	
	Если ТекущееЗначение <> Неопределено Тогда
		Если ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
			Форма.ПараметрТекущаяСтрока		= ТекущееЗначение;
			
		ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Физлицо",				ТекущееЗначение);
			Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ГоловнаяОрганизация);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиОрганизаций.Ссылка,
			|	ВЫБОР
			|		КОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК Порядок
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	(СотрудникиОрганизаций.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
			|			ИЛИ СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
			|	И СотрудникиОрганизаций.Физлицо = &Физлицо
			|	И СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Форма.ПараметрТекущаяСтрока	= Выборка.Ссылка;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("Массив") Тогда
			Форма.мМассивВыбранныхЗначений = ТекущееЗначение;
			
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Неверный тип параметра: " + ТипЗнч(ТекущееЗначение));
			
		КонецЕсли;
	КонецЕсли;
	
	//установим отборы
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Форма.Отбор.Организация.Установить(ГоловнаяОрганизация);
		Форма.Отбор.Организация.Использование = ЗначениеЗаполнено(ГоловнаяОрганизация);
	КонецЕсли;
		
	Если КогоВыбирать = 2 Тогда
		//выбор только договорников
		СписокДоговоров = Новый СписокЗначений;
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		Форма.Отбор.ВидДоговора.ВидСравнения  = ВидСравнения.ВСписке;
		Форма.Отбор.ВидДоговора.Использование = Истина;
		Форма.Отбор.ВидДоговора.Значение	  = СписокДоговоров;
	ИначеЕсли КогоВыбирать = 1 Тогда
		//выбор только трудовые договора
		Форма.Отбор.ВидДоговора.ВидСравнения  = ВидСравнения.Равно;
		Форма.Отбор.ВидДоговора.Использование = Истина;
		Форма.Отбор.ВидДоговора.Значение	  = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;
	ИначеЕсли КогоВыбирать = 0 Тогда
		//отбор по всем, исключим сотрудников упр. учета
		Форма.Отбор.ВидДоговора.ВидСравнения  = ВидСравнения.НеРавно;
		Форма.Отбор.ВидДоговора.Использование = Истина;
		Форма.Отбор.ВидДоговора.Значение	  = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий;
	КонецЕсли;
	
	Форма.Открыть();
	
КонецПроцедуры // ОткрытьФормуВыбораСотрудникаОрганизации()


// Открывает форму выбора перерассчитываемого документа
//
// Владелец - элемент формы
//
// СтандартнаяОбработка - флаг стандартной обработки события НачалоВыбора
//
// ДокументПерерасчет - ссылка на документ, для которого подбирается перерассчитываемый документ
//
// Ключ - ключ уникальности открываемой формы
//
// 
Процедура ОткрытьФормуВыбораПерерассчитываемогоДокумента(Владелец, СтандартнаяОбработка, ДокументПерерасчет, Ключ = Неопределено) Экспорт

	ИмяДокумента = ДокументПерерасчет.Метаданные().Имя;
	ФормаВыбора = Документы[ИмяДокумента].ПолучитьФормуВыбора(, Владелец, Ключ);
	
	ФормаВыбора.Отбор.Организация.Использование	= Истина;
	ФормаВыбора.Отбор.Организация.ВидСравнения 	= ВидСравнения.Равно;
	ФормаВыбора.Отбор.Организация.Значение	 	= ДокументПерерасчет.Организация;
	
	ФормаВыбора.Отбор.ПериодРегистрации.Использование	= Истина;
	ФормаВыбора.Отбор.ПериодРегистрации.ВидСравнения 	= ВидСравнения.Меньше;
	ФормаВыбора.Отбор.ПериодРегистрации.Значение	 	= ДокументПерерасчет.ПериодРегистрации;
	
	ФормаВыбора.Открыть();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// проставляет в строку табличной части или реквизит формы полученные данные по Сотруднику
//
Процедура ПроставитьДанныеСтроки(Сотрудник, ДатаСобытия, ЭлементФормы) Экспорт
		
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("парамДатаСобытия", ДатаСобытия);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	//vvv
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА РаботникиОрганизации.РазрядЕТСЗавершения
	|		ИНАЧЕ РаботникиОрганизации.РазрядЕТС
	|	КОНЕЦ КАК РазрядЕТС,
	//
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА РаботникиОрганизации.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизации.Должность 
	|	КОНЕЦ КАК Должность
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамДатаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизации";
	
	Запрос.Текст = ТекстЗапроса;
	НаборыДанных = Запрос.Выполнить().Выгрузить();
	
	Если НаборыДанных.Количество() = 0 Тогда
		// Если не нашли данных - ничего не делаем
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементФормы) = Тип("ТабличноеПоле") Тогда
		
		// поле ПодразделениеОрганизации есть не во всех табличных частях
		Если ЭлементФормы.Колонки.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
			ЭлементФормы.ТекущаяСтрока.ПодразделениеОрганизации = НаборыДанных[0].ПодразделениеОрганизации;
		КонецЕсли;
		
		//vvv
		// поле Разряд есть не во всех табличных частях
		Если ЭлементФормы.Колонки.Найти("РазрядЕТС") <> Неопределено Тогда
			ЭлементФормы.ТекущаяСтрока.РазрядЕТС = НаборыДанных[0].РазрядЕТС;
		КонецЕсли;
		//
		
		// поле Должность есть не во всех табличных частях
		Если ЭлементФормы.Колонки.Найти("Должность") <> Неопределено Тогда
			ЭлементФормы.ТекущаяСтрока.Должность = НаборыДанных[0].Должность;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПроставитьДанныеСтроки()

// процедура устанавливает текущую строку в табличных полях формы 
// объекта, связанных с табличными частями объекта
// предположения:
// все табличные части и соответсвующие им табличные поля - одноименны
// все "синхронизируемые" табличные части имеют колонку с одинаковым 
// именем по которой ведется синхронизация
// 
// Параметры:
// 	Форма - форма объекта
//  Объект - объект данных
//  Элемент - элемнт формы в котором возникла активизация строки
//  СинхронизируемыеТабличныеЧасти - соответствие с 
//  			элементами, соответствующими синхронизируемым табличным полям
//  ИмяКолонки - имя колнки синхронизации
Процедура СинхронизироватьСтроки(Форма, Объект, Элемент, СинхронизируемыеТабличныеЧасти, ИмяКолонки) Экспорт
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СинхронизируемыеТабличныеЧасти[Имя] Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСоответствия Из СинхронизируемыеТабличныеЧасти Цикл
		Если ЭлементСоответствия.Ключ = Имя Тогда 
			Продолжить;
		КонецЕсли;
		Попытка
			СтрокаТЧ = Объект[ЭлементСоответствия.Ключ].Найти(Элемент.ТекущиеДанные[ИмяКолонки], ИмяКолонки);
		Исключение
			СтрокаТЧ = Форма[ЭлементСоответствия.Ключ].Найти(Элемент.ТекущиеДанные[ИмяКолонки], ИмяКолонки);
		КонецПопытки;
		Если СтрокаТЧ <> Неопределено Тогда
			СинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Истина;
			Форма.ЭлементыФормы[ЭлементСоответствия.Ключ].ТекущаяСтрока = СтрокаТЧ;
			СинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры  //  СинхронизироватьСтроки

// Процедура строит список должностей (или подразделений), по штатному расписанию организации.
//  
// Параметры: 
//  Режим - строка, может принимать значения: "Должность" или "ПодразделениеОрганизации"
//			определяет, что именно будет выбирать пользователь
//  ДолжностьИлиПодразделениеОрганизации - СправочникСсылка.ПодразделенияОрганизаций или   
//          СправочникСсылка.ДолжностиОрганизаций, второе значение в текущей строке т.п.
//
// Возвращаемое значение
//  нет
//
Функция ВыбратьИзШтатногоРасписанияОрганизации(Режим, Организация, ДолжностьИлиПодразделениеОрганизации) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(ДолжностьИлиПодразделениеОрганизации) Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("ДолжностьИлиПодразделениеОрганизации", ДолжностьИлиПодразделениеОрганизации);
	
	Если Режим = "ПодразделениеОрганизации" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации КАК Элемент,
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации.Наименование КАК ЭлементНаименование,
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.РазрядЕТС,
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.КоэффициентЕТС
		|ИЗ
		|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(, ПодразделениеОрганизации.Владелец = &Владелец) КАК ШтатноеРасписаниеОрганизацийСрезПоследних
		|ГДЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность = &ДолжностьИлиПодразделениеОрганизации
		|	И ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок > 0";
		
	ИначеЕсли Режим = "Должность" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность КАК Элемент,
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность.Наименование КАК ЭлементНаименование,
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.РазрядЕТС,
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.КоэффициентЕТС
		|ИЗ
		|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(, ПодразделениеОрганизации.Владелец = &Владелец) КАК ШтатноеРасписаниеОрганизацийСрезПоследних
		|ГДЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации = &ДолжностьИлиПодразделениеОрганизации
		|	И ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок > 0";
		
	Иначе
		Возврат Новый СписокЗначений
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый СписокЗначений
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	СписокВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Элемент, Выборка.ЭлементНаименование + " (" + Выборка.РазрядЕТС + "/" + Выборка.КоэффициентЕТС + ")");	
	КонецЦикла;
	
    Возврат СписокВыбора
	
КонецФункции // ВыбратьИзШтатногоРасписанияОрганизации

// Процедура строит список должностей (или подразделений), по кадровому плану предприятия.
//
// Параметры: 
//  Режим - строка, может принимать значения: "Должность" или "Подразделение" определяет, что именно 
//			будет выбирать пользователь
//  ДолжностьИлиПодразделение - СправочникСсылка.Подразделения или СправочникСсылка.Должности,  
//			второе значение в текущей строке т.п.
//
// Возвращаемое значение
//  нет
//
Функция ВыбратьИзКадровогоПланаПредприятия(Режим, ДолжностьИлиПодразделение) Экспорт
	
	Запрос = Новый Запрос;
	
	Если НЕ ЗначениеЗаполнено(ДолжностьИлиПодразделение) Тогда
		Возврат Новый СписокЗначений 
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ДолжностьИлиПодразделение",ДолжностьИлиПодразделение);
		
	Если Режим = "Подразделение" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыйПланСрезПоследних.Подразделение КАК Элемент,
		|	КадровыйПланСрезПоследних.Подразделение.Наименование КАК ЭлементНаименование
		|ИЗ
		|	РегистрСведений.КадровыйПлан.СрезПоследних(
		|		,
		|		Должность В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ДолжностиОрганизаций.Ссылка
		|			ИЗ
		|				Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
		|			ГДЕ
		|				ДолжностиОрганизаций.Должность = &ДолжностьИлиПодразделение)) КАК КадровыйПланСрезПоследних
		|ГДЕ
		|	КадровыйПланСрезПоследних.Количество > 0";
		
	ИначеЕсли Режим = "Должность" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДолжностиОрганизаций.Ссылка КАК Элемент,
		|	ДолжностиОрганизаций.Наименование КАК ЭлементНаименование
		|ИЗ
		|	Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
		|ГДЕ
		|	ДолжностиОрганизаций.Должность В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				КадровыйПланСрезПоследних.Должность
		|			ИЗ
		|				РегистрСведений.КадровыйПлан.СрезПоследних(, Подразделение = &ДолжностьИлиПодразделение) КАК КадровыйПланСрезПоследних
		|			ГДЕ
		|				КадровыйПланСрезПоследних.Количество > 0)";
		
	Иначе
		Возврат Новый СписокЗначений 
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый СписокЗначений 
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	СписокВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Элемент, Выборка.ЭлементНаименование);	
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции // ВыбратьИзКадровогоПланаПредприятия

// Функция возвращаект сведения о позиции штатного расписания на выбранную дату
// для измерений Подразделение и Должность
//
Функция СведенияОПозицииШтатногоРасписания(Период, Подразделение, Должность) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаАктуальности",	Период);
	Запрос.УстановитьПараметр("Подразделение",		Подразделение);
	Запрос.УстановитьПараметр("Должность",			Должность);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.МинимальнаяТарифнаяСтавка,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.МаксимальнаяТарифнаяСтавка,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.ВидТарифнойСтавки,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.ГрафикРаботы,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.ВалютаТарифнойСтавки,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.ОсобыеУсловияТруда
	|ИЗ
	|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(
	|		&ДатаАктуальности,
	|		ПодразделениеОрганизации = &Подразделение
	|			И Должность = &Должность) КАК ШтатноеРасписаниеОрганизацийСрезПоследних";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СведенияОПозицииШтатногоРасписания()

// Возвращает структуру с данными по выбранному работнику 
// Парамтеры:
//	Сотрудник - ссылка на справочник Сотрудники
//	ВыбираемыеДанные - строка, признак того, что нужно выбирать данные из регистров Работники и/или УчетЗаработкаРаботников
//
// Возвращаемое значение:
//  Структура с элементами
//		всегда присуствует 
//			Физлицо
//		если ВыбираемыеДанные содержит строку "Работники"
//			Подразделение
//			Должность
//			ГрафикРаботы
//			ЗанимаемыхСтавок
//		если ВыбираемыеДанные содержит строку "УчетЗаработкаРаботников"
//			СпособОтраженияВУпрУчете
//			УчетНачисленийПоОрганизации
//
Функция СведенияПоВыбранномуРаботнику(Сотрудник, ВыбираемыеДанные) Экспорт
	
	// Получим данные из среза последних
	ВыбиратьРаботники = Найти(ВыбираемыеДанные, "Работники") > 0;
	ВыбиратьУчетЗаработкаРаботников = Найти(ВыбираемыеДанные, "УчетЗаработкаРаботников") > 0;
	
	Запрос = Новый Запрос;
	Если ВыбиратьРаботники Тогда
		Если Не ВыбиратьУчетЗаработкаРаботников Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	&Сотрудник КАК Сотрудник,
			|	Работники.Подразделение,
			|	Работники.Должность,
			|	Работники.ГрафикРаботы,
			|	Работники.ЗанимаемыхСтавок
			|ИЗ
			|	РегистрСведений.Работники.СрезПоследних(
			|		,
			|		Физлицо В
			|			(ВЫБРАТЬ
			|				СотрудникиОрганизаций.Физлицо
			|			ИЗ
			|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|			ГДЕ
			|				СотрудникиОрганизаций.Ссылка = &Сотрудник)) КАК Работники";
			
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	&Сотрудник КАК Сотрудник,
			|	Работники.Подразделение,
			|	Работники.Должность,
			|	Работники.ГрафикРаботы,
			|	Работники.ЗанимаемыхСтавок,
			|	УчетЗаработкаРаботников.СпособОтраженияВУпрУчете,
			|	УчетЗаработкаРаботников.УчетНачисленийПоОрганизации
			|ИЗ
			|	РегистрСведений.Работники.СрезПоследних(
			|		,
			|		Физлицо В
			|			(ВЫБРАТЬ
			|				СотрудникиОрганизаций.Физлицо
			|			ИЗ
			|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|			ГДЕ
			|				СотрудникиОрганизаций.Ссылка = &Сотрудник)) КАК Работники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(
			|		,
			|		Физлицо В
			|			(ВЫБРАТЬ
			|				СотрудникиОрганизаций.Физлицо
			|			ИЗ
			|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|			ГДЕ
			|				СотрудникиОрганизаций.Ссылка = &Сотрудник)) КАК УчетЗаработкаРаботников
			|		ПО (ИСТИНА)";
		КонецЕсли;
		
	ИначеЕсли ВыбиратьУчетЗаработкаРаботников Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Сотрудник КАК Сотрудник,
		|	УчетЗаработкаРаботников.СпособОтраженияВУпрУчете,
		|	УчетЗаработкаРаботников.УчетНачисленийПоОрганизации
		|ИЗ
		|	РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(
		|		,
		|		Физлицо В
		|			(ВЫБРАТЬ
		|				СотрудникиОрганизаций.Физлицо
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|			ГДЕ
		|				СотрудникиОрганизаций.Ссылка = &Сотрудник)) КАК УчетЗаработкаРаботников";
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Сотрудник КАК Сотрудник,
		|	Работники.ФизЛицо
		|ИЗ
		|	РегистрСведений.Работники.СрезПоследних(
		|		,
		|		Физлицо В
		|			(ВЫБРАТЬ
		|				СотрудникиОрганизаций.Физлицо
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|			ГДЕ
		|				СотрудникиОрганизаций.Ссылка = &Сотрудник)) КАК Работники";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
		
	Иначе
		Если ВыбиратьРаботники Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ВыбранныйНаборДанных = Новый Структура("Сотрудник, Подразделение, Должность, ГрафикРаботы, ЗанимаемыхСтавок");
			ВыбранныйНаборДанных.Сотрудник			= Выборка.Сотрудник;
			ВыбранныйНаборДанных.Подразделение		= Выборка.Подразделение;
			ВыбранныйНаборДанных.Должность			= Выборка.Должность;
			ВыбранныйНаборДанных.ГрафикРаботы		= Выборка.ГрафикРаботы;
			ВыбранныйНаборДанных.ЗанимаемыхСтавок	= Выборка.ЗанимаемыхСтавок;
			Если ВыбиратьУчетЗаработкаРаботников Тогда
				ВыбранныйНаборДанных.Вставить("СпособОтраженияВУпрУчете",		Выборка.СпособОтраженияВУпрУчете);
				ВыбранныйНаборДанных.Вставить("УчетНачисленийПоОрганизации",	Выборка.УчетНачисленийПоОрганизации);
			КонецЕсли;
			
		ИначеЕсли ВыбиратьУчетЗаработкаРаботников Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ВыбранныйНаборДанных = Новый Структура("Сотрудник, СпособОтраженияВУпрУчете, УчетНачисленийПоОрганизации");
			ВыбранныйНаборДанных.Сотрудник						= Выборка.Сотрудник;
			ВыбранныйНаборДанных.СпособОтраженияВУпрУчете		= Выборка.СпособОтраженияВУпрУчете;
			ВыбранныйНаборДанных.УчетНачисленийПоОрганизации	= Выборка.УчетНачисленийПоОрганизации;
			
		Иначе
			ВыбранныйНаборДанных = Новый Структура("Сотрудник");
			ВыбранныйНаборДанных.Сотрудник	= Выборка.Сотрудник;
			
		КонецЕсли;
		
		Возврат ВыбранныйНаборДанных;
		
	КонецЕсли;
	
КонецФункции // СведенияПоВыбранномуРаботнику

// Открывает форму ввода на основании
//
Процедура ВводРегламентированногоКадровогоДокументаНаОсновании(Основание) Экспорт
	
	Если Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаВводаНаОсновании = Обработки.ВводРегламентированныхКадровыхДокументовНаОсновании.ПолучитьФорму();
	
	ФормаВводаНаОсновании.Основание = Основание;
	
	ФормаВводаНаОсновании.Открыть();
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТКРЫТИЯ ФОРМ ОБЪЕКТОВ

#Если Клиент Тогда

// Процедура открывает форму обработки НастройкаПараметровУчета на нужной странице
//
// Параметры
//		ИмяСтраницы - строка с именем страницы, на которой необходимо открыть форму
//		СтруктураПараметрыФормы - структура, содержит параметры которые необходимо передать в форму
//					или значения реквизитов обработки.
//					Ключ - имя реквизита формы или экспортной переменной, значение - его значение
//
Процедура ОткрытьФормуНастройкаПараметровУчета(ИмяСтраницы = Неопределено, СтруктураПараметрыФормы = Неопределено) Экспорт
	
	Если ИмяСтраницы = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ИмяСтраницы) = Тип("Массив") Тогда
		МассивПараметров = ИмяСтраницы;
		СтруктураПараметрыФормы = ?(МассивПараметров.Количество() = 2, МассивПараметров[1], Неопределено);
		ИмяСтраницыФормы = ?(МассивПараметров.Количество() > 0, МассивПараметров[0], Неопределено);
	Иначе
		ИмяСтраницыФормы = ИмяСтраницы;
	КонецЕсли;		
	
	Если ИмяСтраницыФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Обработки.НастройкаПараметровУчета.ПолучитьФорму("НастройкаПараметровУчета");
	Если СтруктураПараметрыФормы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма, СтруктураПараметрыФормы);
	КонецЕсли;
	Форма.Открыть();
	Если Форма.Открыта() Тогда
		Форма.ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = Форма.ЭлементыФормы.ПанельНастроек.Страницы.Найти(ИмяСтраницыФормы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура открывает форму обработки НастройкаПрограммы на нужной странице
//
// Параметры
//		ИмяСтраницы - строка с именем страницы, на которой необходимо открыть форму
//		СтруктураПараметрыФормы - структура, содержит параметры которые необходимо передать в форму
//					или значения реквизитов обработки.
//					Ключ - имя реквизита формы или экспортной переменной, значение - его значение
//
Процедура ОткрытьФормуНастройкаПрограммы(ИмяСтраницы = Неопределено, СтруктураПараметрыФормы = Неопределено) Экспорт
	
	Если ИмяСтраницы = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ИмяСтраницы) = Тип("Массив") Тогда
		МассивПараметров = ИмяСтраницы;
		СтруктураПараметрыФормы = ?(МассивПараметров.Количество() = 2, МассивПараметров[1], Неопределено);
		ИмяСтраницыФормы = ?(МассивПараметров.Количество() > 0, МассивПараметров[0], Неопределено);
	Иначе
		ИмяСтраницыФормы = ИмяСтраницы;
	КонецЕсли;
	
	Если ИмяСтраницыФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Обработки.НастройкаПрограммы.ПолучитьФорму("НастройкаПрограммы");
	Если СтруктураПараметрыФормы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма, СтруктураПараметрыФормы);
	КонецЕсли;
	Форма.Открыть();
	Если Форма.Открыта() Тогда
		Форма.ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = Форма.ЭлементыФормы.ПанельНастроек.Страницы.Найти(ИмяСтраницыФормы);
	КонецЕсли;
	
КонецПроцедуры


#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СПИСКОВ ЗНАЧЕНИЙ ПЕРЕЧИСЛЕНИЙ

// Возвращает список отпусков, регистрируемых документом Отпуска организации
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления 
//
Функция ПолучитьСписокОтпусковОрганизации() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный);
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебный);
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебныйНеоплачиваемый);
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускБезСохраненияЗарплаты);
	
	Возврат СписокСпособов
	
КонецФункции

// Возвращает список причин отсутствия, регистрируемых документом Отсутствие организации
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления 
//
Функция ПолучитьСписокПрочихСостоянийРаботника() Экспорт

	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Заболевание);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Работает);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Простой);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ВынужденныйПрогул);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ГосударственныеОбязанности);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Прогулы);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ДополнительныеВыходныеДниОплачиваемые);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокПрочихСостоянийРаботника()

// Функция возвращает массив видов времени, 
// по идексам этого массива происходит упорядочивание видов времени в сводном табеле
//
Функция ПолучитьМассивУпорядоченныхВидовИспользованияРабочегоВремени() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторИспользованияРабочегоВремени.Ссылка
	|ИЗ
	|	Справочник.КлассификаторИспользованияРабочегоВремени КАК КлассификаторИспользованияРабочегоВремени
	|ГДЕ
	|	(НЕ КлассификаторИспользованияРабочегоВремени.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
	|			ТОГДА 1
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
	|			ТОГДА 2
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам)
	|			ТОГДА 3
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск)
	|			ТОГДА 4
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка)
	|			ТОГДА 5
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные)
	|			ТОГДА 6
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Праздники)
	|			ТОГДА 7
	|		ИНАЧЕ 100
	|	КОНЕЦ";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ПолучитьМассивДляУпорядочивания()



////////////////////////////////////////////////////////////////////////////////
// КАДРОВАЯ НУМЕРАЦИЯ

// имитация кадрового нумератора для поддержки учетной политики по персоналу с 
// кадровым нумераторм документов
Процедура ПриУстановкеНовогоНомераКадровогоДокумента(СтандартнаяОбработка, ЕдиныйНумераторКадровыхДокументов, Номер, Префикс, Дата) Экспорт
	// проверка учетной политики
	Если ЕдиныйНумераторКадровыхДокументов Тогда
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить("КадровоеПеремещениеОрганизаций");
		СписокДокументов.Добавить("ПриемНаРаботуВОрганизацию");
		СписокДокументов.Добавить("УвольнениеИзОрганизаций");
		
		НовыйНомер = ПолучитьНовыйНомерПоДокументам(СписокДокументов, Префикс, Дата);
		
		Если НовыйНомер <> "" Тогда
			СтандартнаяОбработка = Ложь;
			Номер = НовыйНомер;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Получает новый номер документа по переданному списку документов и префиксу
// Фактически, имитирует работу нумератора докумнетов
// Если в информационной базе еще нет документов вернет пустую стоку
//
// Только для документов со строковым номером!
//
// Параметры:
//	СписокДокументов - массив строк с именами документов
//  Префикс - строка, префикс номера
//  Дата - дата документа
// Возвращаемое значение:
//  строка
//
Функция ПолучитьНовыйНомерПоДокументам(СписокДокументов, Префикс, Дата)
	
	Запрос = Новый Запрос;
	
	Результат = Новый СписокЗначений;
	
	Для Каждого Документ из СписокДокументов Цикл
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номер
		|ИЗ
		|	Документ."+Документ+"
		|ГДЕ Номер Подобно """ + Префикс + "%""
		|  И Дата>=&НачалоГода
		|  И Дата<=&КонецГода
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер УБЫВ";
		
        // поддерживается "годовая" кадровая нумерация
        Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Дата));
    	Запрос.УстановитьПараметр("КонецГода", КонецГода(Дата));
        
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат.Добавить(Выборка.Номер);
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		// выберем наибольший
		Результат.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		// получим новый номер
		НовыйНомер = ПолучитьСледующийНомер(СокрП(Результат[0].Значение));
	Иначе
		НовыйНомер = "";
	КонецЕсли;
	Возврат НовыйНомер;
	
КонецФункции		

// Увеличивает номер в переданной строке на 1
//
// Параметры
//  ПоследнийНомер - строка - представляет собой номер (документа, табельный и т.п.)
//
// Возвращаемое значение:
//  строка  - следующий по порядку номер
//
Функция ПолучитьСледующийНомер(ПоследнийНомер, Знач ДлинаНомера = 0) Экспорт
	
	Если ДлинаНомера = 0 Тогда
		ДлинаНомера = СтрДлина(ПоследнийНомер);
	КонецЕсли;
	Если ДлинаНомера = 0 Тогда
		Возврат "1"
	КонецЕсли;
	СчетчикСимв = ДлинаНомера;
	Пока СчетчикСимв > 0 Цикл
		Если Не ПустаяСтрока(Сред(ПоследнийНомер, СчетчикСимв, 1)) и ОбщегоНазначения.ТолькоЦифрыВСтроке(Сред(ПоследнийНомер, СчетчикСимв, 1)) Тогда
			СчетчикСимв = СчетчикСимв - 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СчетчикСимв = ДлинаНомера Тогда
		НомерЧисловой = 1
	Иначе
		НомерЧисловой = Число(Сред(ПоследнийНомер, СчетчикСимв + 1));
	КонецЕсли;
	Если НомерЧисловой < Pow(10, ДлинаНомера - СчетчикСимв) - 1 Тогда
		СледующийНомер = НомерЧисловой + 1;
	Иначе
		СледующийНомер = НомерЧисловой;
	КонецЕсли;
	НовыйНомер = Лев(ПоследнийНомер,  СчетчикСимв) + Формат(СледующийНомер,"ЧЦ=" + (ДлинаНомера - СчетчикСимв) + "; ЧВН=; ЧГ=0");
	Возврат НовыйНомер
	
КонецФункции // ПолучитьСледующийНомер()

// проверяет уникальность кадрового номера
// если не уникален - возвращает Ложь
// Параметры:
//  ЕдиныйНумераторКадровыхДокументов - сведения по учетной политике ведения единого нумератора кадровых документов
//  Организация
//  Номер - проверяемый номер
//  Дата - дата проверяемого документа
//  Ссылка - ссылка на документ, для которого выпорлняется проверка
//
// Вызывает исключение! 
// Должна использоваться, например, при записи документа.
//
Функция ПроверкаУникальностиНомераКадровогоДокумента(ЕдиныйНумераторКадровыхДокументов, Номер, Дата, Ссылка) Экспорт
	// проверка учетной политики
	Если ЕдиныйНумераторКадровыхДокументов Тогда
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить("КадровоеПеремещениеОрганизаций");
		СписокДокументов.Добавить("ПриемНаРаботуВОрганизацию");
		СписокДокументов.Добавить("УвольнениеИзОрганизаций");
		
		Если Не ПроверкаУникальностиНомераПоДокументам(СписокДокументов, Номер, Дата, Ссылка) Тогда
			ВызватьИсключение "Неуникальный номер кадрового документа! (" + Номер + ")";
		КонецЕсли;
	КонецЕсли;
КонецФункции

// используется в ПроверкаУникальностиНомераКадровогоДокумента
Функция ПроверкаУникальностиНомераПоДокументам(СписокДокументов, Номер, Дата, Ссылка)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Номер", Номер);
    // поддерживается "годовая" кадровая нумерация
    Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Дата));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(Дата));
	
	Для Каждого Документ из СписокДокументов Цикл
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номер
		|ИЗ
		|	Документ." + Документ+"
		|ГДЕ Ссылка <> &Ссылка 
        |   И Номер = &Номер 
        |   И Дата>=&НачалоГода 
        |   И Дата<=&КонецГода";
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫПОЛНЯЮЩИЕ ВКЛЮЧЕНИЕ (ВЫКЛЮЧЕНИЕ) ПОДДЕРЖКИ ВНУТРЕННОГО СОВМЕСТИТЕЛЬСТВА

// Функция проверяет можно ли отключать поддержку внутренних совместителей
//
// Параметры: 
//	нет
//
// Возвращаемое значение:
//  Истина - можно отключать, Ложь - существуют внутренние совместители =>
//	отключение невозможно
//
// Описание:
//  Проверяет, есть ли внутренние совместители 
//
Функция МожноОтключатьВнутреннееСовместительство(Организация) Экспорт
	
	#Если Клиент Тогда
	Состояние("Выполняется поиск внутренних совместителей");
	#КонецЕсли
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Организация = &Организация
	|	И РаботникиОрганизации.Сотрудник.ВидЗанятости = &ВнутреннееСовместительство");
	
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("ВнутреннееСовместительство",	Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Отключить поддержку внутреннего совместительства невозможно, т.к. некоторые работники заняты на нескольких местах работы!");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // МожноОтключатьВнутреннееСовместительство()

// Проверяет уникальность кадровых номеров
//
// Параметры: 
//	Организация - нет
//
// Возвращаемое значение:
//  Истина	- если номера уникальные
//	Ложь	- если номера не уникальные
Функция НомераКадровыхДокументовУникальны(Организация) Экспорт
	
	Отказ = Ложь;
	ЗаголовокСообщения = "Изменить поддержку внутреннего совместительства невозможно, т.к. следующие номера используются в нескольких кадровых документах:";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОрганизации.Номер
	|ИЗ
	|	(ВЫБРАТЬ
	|		ГОД(КадровоеПеремещениеОрганизаций.Дата) КАК Год,
	|		КадровоеПеремещениеОрганизаций.Номер КАК Номер,
	|		КадровоеПеремещениеОрганизаций.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
	|	ГДЕ
	|		КадровоеПеремещениеОрганизаций.Организация = &Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ГОД(ПриемНаРаботуВОрганизацию.Дата),
	|		ПриемНаРаботуВОрганизацию.Номер,
	|		ПриемНаРаботуВОрганизацию.Ссылка
	|	ИЗ
	|		Документ.ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
	|	ГДЕ
	|		ПриемНаРаботуВОрганизацию.Организация = &Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ГОД(УвольнениеИзОрганизаций.Дата),
	|		УвольнениеИзОрганизаций.Номер,
	|		УвольнениеИзОрганизаций.Ссылка
	|	ИЗ
	|		Документ.УвольнениеИзОрганизаций КАК УвольнениеИзОрганизаций
	|	ГДЕ
	|		УвольнениеИзОрганизаций.Организация = &Организация) КАК ДокументыОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ГОД(КадровоеПеремещениеОрганизаций.Дата) КАК Год,
	|			КадровоеПеремещениеОрганизаций.Номер КАК Номер,
	|			КадровоеПеремещениеОрганизаций.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ГОД(ПриемНаРаботуВОрганизацию.Дата),
	|			ПриемНаРаботуВОрганизацию.Номер,
	|			ПриемНаРаботуВОрганизацию.Ссылка
	|		ИЗ
	|			Документ.ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ГОД(УвольнениеИзОрганизаций.Дата),
	|			УвольнениеИзОрганизаций.Номер,
	|			УвольнениеИзОрганизаций.Ссылка
	|		ИЗ
	|			Документ.УвольнениеИзОрганизаций КАК УвольнениеИзОрганизаций) КАК ВсеКадровыеДокументы
	|		ПО ДокументыОрганизации.Год = ВсеКадровыеДокументы.Год
	|			И ДокументыОрганизации.Номер = ВсеКадровыеДокументы.Номер
	|			И ДокументыОрганизации.Ссылка <> ВсеКадровыеДокументы.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация",Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначения.СообщитьОбОшибке(Выборка.Номер,Отказ,ЗаголовокСообщения);
	КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции //НомераКадровыхДокументовУникальны()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ПРОВЕРЯЮЩИЕ ВОЗМОЖНОСТЬ ОТКЛЮЧЕНИЯ ВЕДЕНИЯ УЧЕТА В ВАЛЮТЕ

// Функция проверяет можно ли отключать поддержку учета в валюте
//
// Параметры: 
//	нет
//
// Возвращаемое значение:
//  Истина - можно отключать, Ложь - нельзя отключать, есть начисления (удержания) в валюте
//
// Описание:
//  Проверяет, есть действующие начисления (удержания) в валюте 
//
Функция МожноОтключатьУчетВВалюте(Организация) Экспорт
	
	ПарамРубли = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ПарамРубли.Пустая() Тогда
		ПарамРубли = Справочники.Валюты.НайтиПоКоду("810")
	КонецЕсли;
	
	ТекстЗапроса = 
	 "ВЫБРАТЬ ПЕРВЫЕ 1
	 |	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
	 |ИЗ
	 |	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	 |ГДЕ
	 |	ПлановыеНачисленияРаботниковОрганизаций.Валюта1 <> &ПарамРубли
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта1 <> &ПарамПустаяВалюта
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта2 <> &ПарамПустаяВалюта
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта3 <> &ПарамПустаяВалюта
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта4 <> &ПарамПустаяВалюта
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Действие <> &ПарамПрекратить
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Организация = &парамОрганизация
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ ПЕРВЫЕ 1
	 |	ПлановыеУдержанияРаботниковОрганизаций.ФизЛицо
	 |ИЗ
	 |	РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержанияРаботниковОрганизаций
	 |ГДЕ
	 |	ПлановыеУдержанияРаботниковОрганизаций.Валюта <> &ПарамРубли
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Валюта <> &ПарамПустаяВалюта
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Действие <> &ПарамПрекратить
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Организация <> &парамОрганизация";
	 
	 	 
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ПарамОрганизация", Организация);
	Запрос.УстановитьПараметр("ПарамРубли", ПарамРубли);
	Запрос.УстановитьПараметр("ПарамПустаяВалюта", Справочники.Валюты.ПустаяСсылка());	
	Запрос.УстановитьПараметр("ПарамПрекратить", Перечисления.ВидыДействияСНачислением.Прекратить);
		
 	Возврат Запрос.Выполнить().Пустой();
	 
КонецФункции //МожноОтключатьУчетВВалюте

// Получение значения учетной политики по персоналу
// Если в соответствии по данной организации нет политики - пытаемся прочитать ее из ИБ, если там нет - 
// она добавляется как политика по умолчанию
//
// Параметры:
//
//  УчетнаяПолитика - соответствие политик по организациям
//  Организация - ссылка на организацию
//  ИмяПолитики - название получаемой учетной политики
//
Функция ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитика, Организация, ИмяПолитики) Экспорт
	
	Если УчетнаяПолитика[Организация] = Неопределено Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ЕдиныйНумераторКадровыхДокументов, ЛОЖЬ)) КАК ЕдиныйНумераторКадровыхДокументов,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПроверкаШтатногоРасписания, ЛОЖЬ)) КАК ПроверкаШтатногоРасписания,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПоказыватьТабельныеНомераВДокументах, ЛОЖЬ)) КАК ПоказыватьТабельныеНомераВДокументах,
		//vvv
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПеремещатьУволенныхВПапку, ЛОЖЬ)) КАК ПеремещатьУволенныхВПапку,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.НеКонтролироватьРеквизитыКомандировок, ЛОЖЬ)) КАК НеКонтролироватьРеквизитыКомандировок,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПапкаУволенных, ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка))) КАК ПапкаУволенных,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.РабочаяПапка, ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка))) КАК РабочаяПапка,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПорядокСписанияФактическихОтпусков, ЗНАЧЕНИЕ(Перечисление.ПорядокСписанияФактическихОтпусков.РасчетнымиДокументами))) КАК ПорядокСписанияФактическихОтпусков,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.ОкруглятьАванс, ЛОЖЬ)) КАК ОкруглятьАванс,
		//
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.РасчетЗарплатыОрганизацииПоОтветственным, ЛОЖЬ)) КАК РасчетЗарплатыОрганизацииПоОтветственным,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УпрощенныйУчетНДФЛ, ЛОЖЬ)) КАК УпрощенныйУчетНДФЛ,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УчетЗадолженностиПоМесяцам, ИСТИНА)) КАК УчетЗадолженностиПоМесяцам,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.ПроверкаПериодовНачисления, ЛОЖЬ)) КАК ПроверкаПериодовНачисления,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.ИспользуютсяНачисленияВВалюте, ЛОЖЬ)) КАК ИспользуютсяНачисленияВВалюте,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УчитыватьНевыходыДляПлановогоАванса, ЛОЖЬ)) КАК УчитыватьНевыходыДляПлановогоАванса,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.ДатаРасчетаПлановогоАванса, 15)) КАК ДатаРасчетаПлановогоАванса,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УпрощенныйУчетВзаиморасчетов, ЛОЖЬ)) КАК УпрощенныйУчетВзаиморасчетов,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.ВыплатаАвансаПроцентом, ЛОЖЬ)) КАК ВыплатаАвансаПроцентом,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УчетОтпусковДляФСЗНвМесяцеНачисления, ИСТИНА)) КАК УчетОтпусковДляФСЗНвМесяцеНачисления
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
		|		ПО (ВЫБОР
		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Организации.Ссылка
		|				ИНАЧЕ Организации.ГоловнаяОрганизация
		|			КОНЕЦ = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций КАК УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций
		|		ПО (ВЫБОР
		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Организации.Ссылка
		|				ИНАЧЕ Организации.ГоловнаяОрганизация
		|			КОНЕЦ = УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Организация)");

		
		Запрос.УстановитьПараметр("Ссылка",Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			УчетнаяПолитика.Вставить(Организация, 
				Новый Структура(
				"ЕдиныйНумераторКадровыхДокументов,
				|ПроверкаШтатногоРасписания,
				|ПоказыватьТабельныеНомераВДокументах,
				//vvv
				|ПеремещатьУволенныхВПапку,
				|НеКонтролироватьРеквизитыКомандировок,
				|ПапкаУволенных,
				|РабочаяПапка,
				|ПорядокСписанияФактическихОтпусков,
				|ОкруглятьАванс,
				//
				|РасчетЗарплатыОрганизацииПоОтветственным,
				|УпрощенныйУчетНДФЛ,
				|УчетЗадолженностиПоМесяцам,
				|ПроверкаПериодовНачисления,
				|ИспользуютсяНачисленияВВалюте,
				|УчитыватьНевыходыДляПлановогоАванса,
				|ДатаРасчетаПлановогоАванса,
				|УпрощенныйУчетВзаиморасчетов,
				|ВыплатаАвансаПроцентом,
				|УчетОтпусковДляФСЗНвМесяцеНачисления",
           		Выборка.ЕдиныйНумераторКадровыхДокументов,
				Выборка.ПроверкаШтатногоРасписания,
				Выборка.ПоказыватьТабельныеНомераВДокументах,
				//vvv
				Выборка.ПеремещатьУволенныхВПапку,
				Выборка.НеКонтролироватьРеквизитыКомандировок,
				Выборка.ПапкаУволенных,
				Выборка.РабочаяПапка,
				Выборка.ПорядокСписанияФактическихОтпусков,
				Выборка.ОкруглятьАванс,
				//
				Выборка.РасчетЗарплатыОрганизацииПоОтветственным,
				Выборка.УпрощенныйУчетНДФЛ,
				Выборка.УчетЗадолженностиПоМесяцам,
				Выборка.ПроверкаПериодовНачисления,
				Выборка.ИспользуютсяНачисленияВВалюте,
				Выборка.УчитыватьНевыходыДляПлановогоАванса,
				Выборка.ДатаРасчетаПлановогоАванса,
				Выборка.УпрощенныйУчетВзаиморасчетов,
				Выборка.ВыплатаАвансаПроцентом,
				Выборка.УпрощенныйУчетВзаиморасчетов,
				Выборка.УчетОтпусковДляФСЗНвМесяцеНачисления));
		Иначе 
			УчетнаяПолитика.Вставить(Организация, 
				Новый Структура(
				"ЕдиныйНумераторКадровыхДокументов,
				|ПроверкаШтатногоРасписания,
				|ПоказыватьТабельныеНомераВДокументах,
				|РасчетЗарплатыОрганизацииПоОтветственным,
				|УпрощенныйУчетНДФЛ,
				|УчетЗадолженностиПоМесяцам,
				|ПроверкаПериодовНачисления,
				|ИспользуютсяНачисленияВВалюте,
				|УчитыватьНевыходыДляПлановогоАванса,
				|ДатаРасчетаПлановогоАванса,
				|УпрощенныйУчетВзаиморасчетов,
				|ВыплатаАвансаПроцентом,
				|УчетОтпусковДляФСЗНвМесяцеНачисления",
				Ложь,
				Ложь,
				Ложь,
				//vvv
				Ложь,
				"",
				"",
				Перечисления.ПорядокСписанияФактическихОтпусков.РасчетнымиДокументами,
				Ложь,
				//
				Ложь,
				Ложь,
				Истина,
				Ложь,
				Ложь,
				Ложь,
				15,
				Ложь,
				Ложь,
				Истина));
		КонецЕсли;		
	КонецЕсли;
	
	Возврат УчетнаяПолитика[Организация][ИмяПолитики];
	
КонецФункции // ЗначениеУчетнойПолитикиПоПерсоналуОрганизации()
// Получение значения учетной политики по персоналу
//
// Параметры:
//
//  УчетнаяПолитика - соответствие политик по организациям
//  ИмяПолитики - название получаемой учетной политики
//
Функция ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(УчетнаяПолитика, ИмяПолитики) Экспорт
	
	Если УчетнаяПолитика["ВсеОрганизации"] = Неопределено Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.ПроверкаПериодовНачисления, ЛОЖЬ)) КАК ПроверкаПериодовНачисления,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ЕдиныйНумераторКадровыхДокументов, ЛОЖЬ)) КАК ЕдиныйНумераторКадровыхДокументов,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПроверкаШтатногоРасписания, ЛОЖЬ)) КАК ПроверкаШтатногоРасписания,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.РасчетЗарплатыОрганизацииПоОтветственным, ЛОЖЬ)) КАК РасчетЗарплатыОрганизацииПоОтветственным,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.ИспользуютсяНачисленияВВалюте, ЛОЖЬ)) КАК ИспользуютсяНачисленияВВалюте,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УпрощенныйУчетНДФЛ, ЛОЖЬ)) КАК УпрощенныйУчетНДФЛ,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПоказыватьТабельныеНомераВДокументах, ЛОЖЬ)) КАК ПоказыватьТабельныеНомераВДокументах,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УчетЗадолженностиПоМесяцам, ИСТИНА)) КАК УчетЗадолженностиПоМесяцам,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УпрощенныйУчетВзаиморасчетов, ИСТИНА)) КАК УпрощенныйУчетВзаиморасчетов,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УчитыватьНевыходыДляПлановогоАванса, ИСТИНА)) КАК УчитыватьНевыходыДляПлановогоАванса
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
		|		ПО (ВЫБОР
		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Организации.Ссылка
		|				ИНАЧЕ Организации.ГоловнаяОрганизация
		|			КОНЕЦ = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций КАК УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций
		|		ПО (ВЫБОР
		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Организации.Ссылка
		|				ИНАЧЕ Организации.ГоловнаяОрганизация
		|			КОНЕЦ = УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Организация)");
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Политика = ПроцедурыУправленияПерсоналом.УчетнаяПолитикаПоПерсоналуОрганизацииПоУмолчанию();
			ЗаполнитьЗначенияСвойств(Политика, Выборка);
			УчетнаяПолитика.Вставить("ВсеОрганизации", Политика); 
		Иначе 
			УчетнаяПолитика.Вставить("ВсеОрганизации", ПроцедурыУправленияПерсоналом.УчетнаяПолитикаПоПерсоналуОрганизацииПоУмолчанию())
		КонецЕсли;
	КонецЕсли;
	
	Возврат УчетнаяПолитика["ВсеОрганизации"][ИмяПолитики];
	
КонецФункции // ЗначениеУчетнойПолитикиПоПерсоналуОрганизации()

Функция УчетнаяПолитикаПоПерсоналуОрганизацииПоУмолчанию() Экспорт 

		СтрокаПолейУчетнойПолитики = "ЕдиныйНумераторКадровыхДокументов,
									|ПроверкаШтатногоРасписания,
									|РасчетЗарплатыОрганизацииПоОтветственным,
									|УпрощенныйУчетНДФЛ,
									|ИспользуютсяНачисленияВВалюте,
									|ПоказыватьТабельныеНомераВДокументах,
									|УчетЗадолженностиПоМесяцам,
									|ПроверкаПериодовНачисления,
									|УчитыватьНевыходыДляПлановогоАванса,
									|ДатаРасчетаПлановогоАванса,
									|ДатаПередачиФССВыплатыПособий,
									|УпрощенныйУчетВзаиморасчетов";
		
		Возврат Новый Структура(СтрокаПолейУчетнойПолитики,
							Ложь, // ЕдиныйНумераторКадровыхДокументов
							Ложь, // ПроверкаШтатногоРасписания
							Ложь, // РасчетЗарплатыОрганизацииПоОтветственным
							Ложь, // УпрощенныйУчетНДФЛ
							Ложь, // ИспользуютсяНачисленияВВалюте
							Ложь, // ПоказыватьТабельныеНомераВДокументах
							Истина, // УчетЗадолженностиПоМесяцам
							Ложь, // ПроверкаПериодовНачисления
							Истина, // УчитыватьНевыходыДляПлановогоАванса
							15, // ДатаРасчетаПлановогоАванса
							'30000101', // ДатаПередачиФССВыплатыПособий
							Истина); // УпрощенныйУчетВзаиморасчетов
	

КонецФункции // УчетнаяПолитикаПоПерсоналуОрганизацииПоУмолчанию()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ формирования движений кадровых документов по плановым начислениям работников организации

Функция СформироватьЗапросПоПлановымНачислениям(ДанныеОНачислениях, ПроверкаШтатногоРасписания, ДанныеПлановыхНачислений = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеОНачислениях", ДанныеОНачислениях);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Ссылка,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.ПодразделениеОрганизации,
	|	ТЧНачисления.Должность,
	|	ТЧНачисления.ЗанимаемыхСтавок,
	|	ТЧНачисления.ГрафикРаботы,
	|	ТЧНачисления.Период,
	|	ТЧНачисления.Действие,
	|	ТЧНачисления.ПериодЗавершения,
	|	ТЧНачисления.ДействиеЗавершения,
	|	ТЧНачисления.ВидРасчета,
	|	ТЧНачисления.ВидРасчетаИзмерение,
	|	ТЧНачисления.СпособРасчета,
	|	ТЧНачисления.ЗачетОтработанногоВремени,
	|	ТЧНачисления.ТребуетВводаТарифногоРазряда,
	|	ТЧНачисления.ПроизвольнаяФормулаРасчета,
	|	ТЧНачисления.Показатель1,
	|	ТЧНачисления.Валюта1,
	|	ТЧНачисления.ТарифныйРазряд1,
	|	ТЧНачисления.Показатель2,
	|	ТЧНачисления.Валюта2,
	|	ТЧНачисления.ТарифныйРазряд2,
	|	ТЧНачисления.Показатель3,
	|	ТЧНачисления.Валюта3,
	|	ТЧНачисления.ТарифныйРазряд3,
	|	ТЧНачисления.Показатель4,
	|	ТЧНачисления.Валюта4,
	|	ТЧНачисления.ТарифныйРазряд4,
	|	ТЧНачисления.Показатель5,
	|	ТЧНачисления.Валюта5,
	|	ТЧНачисления.ТарифныйРазряд5,
	|	ТЧНачисления.Показатель6,
	|	ТЧНачисления.Валюта6,
	|	ТЧНачисления.ТарифныйРазряд6
	|ПОМЕСТИТЬ ВТДанныеОНачислениях
	|ИЗ
	|	&ДанныеОНачислениях КАК ТЧНачисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();	
	
	//// временная таблица с результатами проверки штатного расписания
	//Если ПроверкаШтатногоРасписания Тогда
	//	
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	//	|	ВЫБОР
	//	|		КОГДА ТЧНачисления.ЗанимаемыхСтавок <> 1
	//	|			ТОГДА ИСТИНА
	//	|		КОГДА ТЧНачисления.ЗачетОтработанногоВремени
	//	|				И ТЧНачисления.Действие В (ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать), ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить))
	//	|			ТОГДА ВЫБОР
	//	|					КОГДА ТЧНачисления.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам))
	//	|							И ШтатноеРасписаниеОрганизаций.ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.Месячная)
	//	|						ТОГДА ВЫБОР
	//	|								КОГДА ТЧНачисления.ТребуетВводаТарифногоРазряда
	//	|									ТОГДА ВЫБОР
	//	|											КОГДА РазмерТарифныхСтавок.Размер < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка
	//	|												ТОГДА ЛОЖЬ
	//	|											КОГДА РазмерТарифныхСтавок.Размер > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка
	//	|												ТОГДА ЛОЖЬ
	//	|											ИНАЧЕ ИСТИНА
	//	|										КОНЕЦ
	//	|								ИНАЧЕ ВЫБОР
	//	|										КОГДА ТЧНачисления.Показатель1 < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка
	//	|											ТОГДА ЛОЖЬ
	//	|										КОГДА ТЧНачисления.Показатель1 > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка
	//	|											ТОГДА ЛОЖЬ
	//	|										ИНАЧЕ ИСТИНА
	//	|									КОНЕЦ
	//	|							КОНЕЦ
	//	|					КОГДА ТЧНачисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	//	|							И ШтатноеРасписаниеОрганизаций.ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.Дневная)
	//	|						ТОГДА ВЫБОР
	//	|								КОГДА ТЧНачисления.ТребуетВводаТарифногоРазряда
	//	|									ТОГДА ВЫБОР
	//	|											КОГДА РазмерТарифныхСтавок.Размер < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка
	//	|												ТОГДА ЛОЖЬ
	//	|											КОГДА РазмерТарифныхСтавок.Размер > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка
	//	|												ТОГДА ЛОЖЬ
	//	|											ИНАЧЕ ИСТИНА
	//	|										КОНЕЦ
	//	|								ИНАЧЕ ВЫБОР
	//	|										КОГДА ТЧНачисления.Показатель1 < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка
	//	|											ТОГДА ЛОЖЬ
	//	|										КОГДА ТЧНачисления.Показатель1 > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка
	//	|											ТОГДА ЛОЖЬ
	//	|										ИНАЧЕ ИСТИНА
	//	|									КОНЕЦ
	//	|							КОНЕЦ
	//	|					КОГДА ТЧНачисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке)
	//	|							И ШтатноеРасписаниеОрганизаций.ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.Часовая)
	//	|						ТОГДА ВЫБОР
	//	|								КОГДА ТЧНачисления.ТребуетВводаТарифногоРазряда
	//	|									ТОГДА ВЫБОР
	//	|											КОГДА РазмерТарифныхСтавок.Размер < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка
	//	|												ТОГДА ЛОЖЬ
	//	|											КОГДА РазмерТарифныхСтавок.Размер > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка
	//	|												ТОГДА ЛОЖЬ
	//	|											ИНАЧЕ ИСТИНА
	//	|										КОНЕЦ
	//	|								ИНАЧЕ ВЫБОР
	//	|										КОГДА ТЧНачисления.Показатель1 < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка
	//	|											ТОГДА ЛОЖЬ
	//	|										КОГДА ТЧНачисления.Показатель1 > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка
	//	|											ТОГДА ЛОЖЬ
	//	|										ИНАЧЕ ИСТИНА
	//	|									КОНЕЦ
	//	|							КОНЕЦ
	//	|					ИНАЧЕ ИСТИНА
	//	|				КОНЕЦ
	//	|		ИНАЧЕ ИСТИНА
	//	|	КОНЕЦ КАК РазмерСоответствуетШТР
	//	|ПОМЕСТИТЬ ВТДанныеШтатногоРасписания
	//	|ИЗ
	//	|	(ВЫБРАТЬ
	//	|		ТЧНачисления.НомерСтроки КАК НомерСтроки,
	//	|		ТЧНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	//	|		ТЧНачисления.Должность КАК Должность,
	//	|		ТЧНачисления.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	//	|		ТЧНачисления.ТарифныйРазряд1 КАК ТарифныйРазряд1,
	//	|		ТЧНачисления.ТарифныйРазряд2 КАК ТарифныйРазряд2,
	//	|		ТЧНачисления.ТарифныйРазряд3 КАК ТарифныйРазряд3,
	//	|		ТЧНачисления.ТарифныйРазряд4 КАК ТарифныйРазряд4,
	//	|		ТЧНачисления.ТарифныйРазряд5 КАК ТарифныйРазряд5,
	//	|		ТЧНачисления.ТарифныйРазряд6 КАК ТарифныйРазряд6,
	//	|		ТЧНачисления.Показатель1 КАК Показатель1,
	//	|		ТЧНачисления.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	//	|		ТЧНачисления.ТребуетВводаТарифногоРазряда КАК ТребуетВводаТарифногоРазряда,
	//	|		ТЧНачисления.СпособРасчета КАК СпособРасчета,
	//	|		ТЧНачисления.Действие КАК Действие,
	//	|		МАКСИМУМ(ШтатноеРасписаниеОрганизаций.Период) КАК ПериодШтР,
	//	|		МАКСИМУМ(РазмерТарифныхСтавок.Период) КАК ПериодРазряда
	//	|	ИЗ
	//	|		ВТДанныеОНачислениях КАК ТЧНачисления
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций
	//	|			ПО ТЧНачисления.ПодразделениеОрганизации = ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации
	//	|				И ТЧНачисления.Должность = ШтатноеРасписаниеОрганизаций.Должность
	//	|				И ТЧНачисления.Период >= ШтатноеРасписаниеОрганизаций.Период
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
	//	|			ПО ТЧНачисления.Период >= РазмерТарифныхСтавок.Период
	//	|				И ТЧНачисления.ТарифныйРазряд1 = РазмерТарифныхСтавок.ТарифныйРазряд
	//	|	
	//	|	СГРУППИРОВАТЬ ПО
	//	|		ТЧНачисления.ПодразделениеОрганизации,
	//	|		ТЧНачисления.Должность,
	//	|		ТЧНачисления.ЗанимаемыхСтавок,
	//	|		ТЧНачисления.ТарифныйРазряд1,
	//	|		ТЧНачисления.ТарифныйРазряд2,
	//	|		ТЧНачисления.ТарифныйРазряд3,
	//	|		ТЧНачисления.ТарифныйРазряд4,
	//	|		ТЧНачисления.ТарифныйРазряд5,
	//	|		ТЧНачисления.ТарифныйРазряд6,
	//	|		ТЧНачисления.Показатель1,
	//	|		ТЧНачисления.ЗачетОтработанногоВремени,
	//	|		ТЧНачисления.ТребуетВводаТарифногоРазряда,
	//	|		ТЧНачисления.СпособРасчета,
	//	|		ТЧНачисления.Действие,
	//	|		ТЧНачисления.НомерСтроки) КАК ТЧНачисления
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций
	//	|		ПО ТЧНачисления.ПериодШтР = ШтатноеРасписаниеОрганизаций.Период
	//	|			И ТЧНачисления.ПодразделениеОрганизации = ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации
	//	|			И ТЧНачисления.Должность = ШтатноеРасписаниеОрганизаций.Должность
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
	//	|		ПО ТЧНачисления.ПериодРазряда = РазмерТарифныхСтавок.Период
	//	|			И (ТЧНачисления.ТарифныйРазряд1 = РазмерТарифныхСтавок.ТарифныйРазряд
	//	|				ИЛИ ТЧНачисления.ТарифныйРазряд2 = РазмерТарифныхСтавок.ТарифныйРазряд
	//	|				ИЛИ ТЧНачисления.ТарифныйРазряд3 = РазмерТарифныхСтавок.ТарифныйРазряд
	//	|				ИЛИ ТЧНачисления.ТарифныйРазряд4 = РазмерТарифныхСтавок.ТарифныйРазряд
	//	|				ИЛИ ТЧНачисления.ТарифныйРазряд5 = РазмерТарифныхСтавок.ТарифныйРазряд
	//	|				ИЛИ ТЧНачисления.ТарифныйРазряд6 = РазмерТарифныхСтавок.ТарифныйРазряд)
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	НомерСтроки";
	//Иначе	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ИСТИНА КАК РазмерСоответствуетШТР
	|ПОМЕСТИТЬ ВТДанныеШтатногоРасписания
	|ИЗ
	|	ВТДанныеОНачислениях КАК ТЧНачисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	//КонецЕсли;
	Запрос.Выполнить();	
	
	// временная таблица с данными плановых начислений по состоянию до изменения
	Если ДанныеПлановыхНачислений = Неопределено Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧНачисления.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТДанныеОНачислениях КАК ТЧНачисления
		|ГДЕ
		|	(ТЧНачисления.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
		|			ИЛИ ТЧНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить))";
		Если Запрос.Выполнить().Пустой() Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|	ТЧОсновныеНачисления.ВидРасчета КАК ПрежнийВидРасчета,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд1,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель1,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта1,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд2,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель2,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта2,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд3,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель3,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта3,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд4,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель4,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта4,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд5,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель5,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта5,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд6,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель6,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта6,
			|	НЕОПРЕДЕЛЕНО КАК КонфликтныйДокумент,
			|	НЕОПРЕДЕЛЕНО КАК ДатаДвижения
			|ПОМЕСТИТЬ ВТДанныеОПрежнихНачислениях
			|ИЗ
			|	ВТДанныеОНачислениях КАК ТЧОсновныеНачисления
			|ГДЕ
			|	(ТЧОсновныеНачисления.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
			|			ИЛИ ТЧОсновныеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить))
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДатыНачислений.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|	КОНЕЦ КАК ПрежнийВидРасчета,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд1Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд1
			|	КОНЕЦ КАК ПрежнийТарифныйРазряд1,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель1Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель1
			|	КОНЕЦ КАК ПрежнийПоказатель1,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта1Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта1
			|	КОНЕЦ КАК ПрежняяВалюта1,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд2Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд2
			|	КОНЕЦ КАК ПрежнийТарифныйРазряд2,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель2Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель2
			|	КОНЕЦ КАК ПрежнийПоказатель2,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта2Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта2
			|	КОНЕЦ КАК ПрежняяВалюта2,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд3Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд3
			|	КОНЕЦ КАК ПрежнийТарифныйРазряд3,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель3Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель3
			|	КОНЕЦ КАК ПрежнийПоказатель3,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта3Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта3
			|	КОНЕЦ КАК ПрежняяВалюта3,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд4Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд4
			|	КОНЕЦ КАК ПрежнийТарифныйРазряд4,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель4Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель4
			|	КОНЕЦ КАК ПрежнийПоказатель4,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта4Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта4
			|	КОНЕЦ КАК ПрежняяВалюта4,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд5Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд5
			|	КОНЕЦ КАК ПрежнийТарифныйРазряд5,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель5Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель5
			|	КОНЕЦ КАК ПрежнийПоказатель5,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта5Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта5
			|	КОНЕЦ КАК ПрежняяВалюта5,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд6Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд6
			|	КОНЕЦ КАК ПрежнийТарифныйРазряд6,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель6Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель6
			|	КОНЕЦ КАК ПрежнийПоказатель6,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта6Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта6
			|	КОНЕЦ КАК ПрежняяВалюта6,
			|	ПРЕДСТАВЛЕНИЕ(ПлановыеНачисленияРаботниковОрганизаций.Регистратор) КАК КонфликтныйДокумент,
			|	ДатыНачислений.ПериодНачислений КАК ДатаДвижения
			|ПОМЕСТИТЬ ВТДанныеОПрежнихНачислениях
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|		ТЧОсновныеНачисления.Период КАК Период,
			|		ТЧОсновныеНачисления.Сотрудник КАК Сотрудник,
			|		ВЫБОР
			|			КОГДА ТЧОсновныеНачисления.ВидРасчетаИзмерение = """"
			|				ТОГДА НЕОПРЕДЕЛЕНО
			|			ИНАЧЕ ТЧОсновныеНачисления.ВидРасчетаИзмерение
			|		КОНЕЦ КАК ВидРасчетаИзмерение,
			|		МАКСИМУМ(ПлановыеНачисленияРаботниковОрганизаций.Период) КАК ПериодНачислений
			|	ИЗ
			|		ВТДанныеОНачислениях КАК ТЧОсновныеНачисления
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
			|			ПО ТЧОсновныеНачисления.Период >= ПлановыеНачисленияРаботниковОрганизаций.Период
			|				И ТЧОсновныеНачисления.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
			|				И (ВЫБОР
			|					КОГДА ТЧОсновныеНачисления.ВидРасчетаИзмерение = """"
			|						ТОГДА НЕОПРЕДЕЛЕНО
			|					ИНАЧЕ ТЧОсновныеНачисления.ВидРасчетаИзмерение
			|				КОНЕЦ = ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение)
			|	ГДЕ
			|		(ТЧОсновныеНачисления.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
			|				ИЛИ ТЧОсновныеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить))
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ТЧОсновныеНачисления.НомерСтроки,
			|		ТЧОсновныеНачисления.ВидРасчета,
			|		ТЧОсновныеНачисления.Период,
			|		ТЧОсновныеНачисления.Сотрудник,
			|		ВЫБОР
			|			КОГДА ТЧОсновныеНачисления.ВидРасчетаИзмерение = """"
			|				ТОГДА НЕОПРЕДЕЛЕНО
			|			ИНАЧЕ ТЧОсновныеНачисления.ВидРасчетаИзмерение
			|		КОНЕЦ) КАК ДатыНачислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
			|		ПО ДатыНачислений.ПериодНачислений = ПлановыеНачисленияРаботниковОрганизаций.Период
			|			И ДатыНачислений.ВидРасчетаИзмерение = ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение
			|			И ДатыНачислений.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";
		КонецЕсли;
		
	Иначе
		
		Запрос.УстановитьПараметр("ДанныеПлановыхНачислений", ДанныеПлановыхНачислений);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	ТЧОсновныеНачисления.ПрежнийВидРасчета,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд1,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель1,
		|	ТЧОсновныеНачисления.ПрежняяВалюта1,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд2,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель2,
		|	ТЧОсновныеНачисления.ПрежняяВалюта2,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд3,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель3,
		|	ТЧОсновныеНачисления.ПрежняяВалюта3,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд4,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель4,
		|	ТЧОсновныеНачисления.ПрежняяВалюта4,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд5,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель5,
		|	ТЧОсновныеНачисления.ПрежняяВалюта5,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд6,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель6,
		|	ТЧОсновныеНачисления.ПрежняяВалюта6,
		|	ТЧОсновныеНачисления.КонфликтныйДокумент,
		|	ТЧОсновныеНачисления.ДатаДвижения
		|ПОМЕСТИТЬ ВТДанныеОПрежнихНачислениях
		|ИЗ
		|	&ДанныеПлановыхНачислений КАК ТЧОсновныеНачисления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		
	КонецЕсли;
	Запрос.Выполнить();	
	
	// временная таблица с описанием показателей
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(Показатели.НомерСтроки) КАК КоличествоПоказателей,
	|	Показатели1.Показатель.Предопределенный КАК Показатель1Предопределенный,
	|	Показатели1.Показатель.Наименование КАК Показатель1Наименование,
	|	Показатели1.Показатель.ТипПоказателя КАК Показатель1ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения КАК Показатель1ВозможностьИзменения,
	|	Показатели2.Показатель.Предопределенный КАК Показатель2Предопределенный,
	|	Показатели2.Показатель.Наименование КАК Показатель2Наименование,
	|	Показатели2.Показатель.ТипПоказателя КАК Показатель2ТипПоказателя,
	|	Показатели2.Показатель.ВозможностьИзменения КАК Показатель2ВозможностьИзменения,
	|	Показатели3.Показатель.Предопределенный КАК Показатель3Предопределенный,
	|	Показатели3.Показатель.Наименование КАК Показатель3Наименование,
	|	Показатели3.Показатель.ТипПоказателя КАК Показатель3ТипПоказателя,
	|	Показатели3.Показатель.ВозможностьИзменения КАК Показатель3ВозможностьИзменения,
	|	Показатели4.Показатель.Предопределенный КАК Показатель4Предопределенный,
	|	Показатели4.Показатель.Наименование КАК Показатель4Наименование,
	|	Показатели4.Показатель.ТипПоказателя КАК Показатель4ТипПоказателя,
	|	Показатели4.Показатель.ВозможностьИзменения КАК Показатель4ВозможностьИзменения,
	|	Показатели5.Показатель.Предопределенный КАК Показатель5Предопределенный,
	|	Показатели5.Показатель.Наименование КАК Показатель5Наименование,
	|	Показатели5.Показатель.ТипПоказателя КАК Показатель5ТипПоказателя,
	|	Показатели5.Показатель.ВозможностьИзменения КАК Показатель5ВозможностьИзменения,
	|	Показатели6.Показатель.Предопределенный КАК Показатель6Предопределенный,
	|	Показатели6.Показатель.Наименование КАК Показатель6Наименование,
	|	Показатели6.Показатель.ТипПоказателя КАК Показатель6ТипПоказателя,
	|	Показатели6.Показатель.ВозможностьИзменения КАК Показатель6ВозможностьИзменения,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.ТарифнаяСтавка КАК Показатель1ТарифнаяСтавка,
	|	Показатели2.Показатель.ТарифнаяСтавка КАК Показатель2ТарифнаяСтавка,
	|	Показатели3.Показатель.ТарифнаяСтавка КАК Показатель3ТарифнаяСтавка,
	|	Показатели4.Показатель.ТарифнаяСтавка КАК Показатель4ТарифнаяСтавка,
	|	Показатели5.Показатель.ТарифнаяСтавка КАК Показатель5ТарифнаяСтавка,
	|	Показатели6.Показатель.ТарифнаяСтавка КАК Показатель6ТарифнаяСтавка
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	ВТДанныеОНачислениях КАК ТЧОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели1
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели1.Ссылка
	|			И (Показатели1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели2
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели2.Ссылка
	|			И (Показатели2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели3
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели3.Ссылка
	|			И (Показатели3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели4
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели4.Ссылка
	|			И (Показатели4.НомерСтроки = 4)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели5
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели5.Ссылка
	|			И (Показатели5.НомерСтроки = 5)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели6
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели6.Ссылка
	|			И (Показатели6.НомерСтроки = 6)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧОсновныеНачисления.НомерСтроки,
	|	Показатели1.Показатель,
	|	Показатели2.Показатель,
	|	Показатели3.Показатель,
	|	Показатели4.Показатель,
	|	Показатели5.Показатель,
	|	Показатели6.Показатель,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";		
	Запрос.Выполнить();	
	
	// в основном запросе собираем в единой выборке подготовленные ранее данные
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧНачисления.Ссылка,
	|	ТЧНачисления.НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.Период,
	|	ТЧНачисления.ПериодЗавершения,
	|	ТЧНачисления.Действие,
	|	ТЧНачисления.ДействиеЗавершения,
	|	ТЧНачисления.ВидРасчета,
	|	ТЧНачисления.ЗачетОтработанногоВремени,
	|	ТЧНачисления.СпособРасчета КАК СпособРасчета,
	|	ЕСТЬNULL(ТЧНачисления.ПроизвольнаяФормулаРасчета, ЛОЖЬ) КАК ПроизвольнаяФормулаРасчета,
	|	ЕСТЬNULL(ТЧНачисления.ЗачетОтработанногоВремени, ЛОЖЬ) КАК ОсновноеНачисление,
	|	ЕСТЬNULL(ТЧНачисления.ТребуетВводаТарифногоРазряда, ЛОЖЬ) КАК ТребуетВводаТарифногоРазряда,
	|	ТЧНачисления.ТарифныйРазряд1,
	|	ТЧНачисления.Показатель1,
	|	ТЧНачисления.Валюта1,
	|	ТЧНачисления.ТарифныйРазряд2,
	|	ТЧНачисления.Показатель2,
	|	ТЧНачисления.Валюта2,
	|	ТЧНачисления.ТарифныйРазряд3,
	|	ТЧНачисления.Показатель3,
	|	ТЧНачисления.Валюта3,
	|	ТЧНачисления.ТарифныйРазряд4,
	|	ТЧНачисления.Показатель4,
	|	ТЧНачисления.Валюта4,
	|	ТЧНачисления.ТарифныйРазряд5,
	|	ТЧНачисления.Показатель5,
	|	ТЧНачисления.Валюта5,
	|	ТЧНачисления.ТарифныйРазряд6,
	|	ТЧНачисления.Показатель6,
	|	ТЧНачисления.Валюта6,
	|	ДанныеШтатногоРасписания.РазмерСоответствуетШТР,
	|	ДанныеОПрежнихНачислениях.ПрежнийВидРасчета КАК ВидРасчетаЗавершения,
	|	ДанныеОПрежнихНачислениях.ПрежнийВидРасчета.СпособРасчета КАК СпособРасчетаЗавершения,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд1 КАК ТарифныйРазряд1Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель1 КАК Показатель1Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта1 КАК Валюта1Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд2 КАК ТарифныйРазряд2Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель2 КАК Показатель2Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта2 КАК Валюта2Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд3 КАК ТарифныйРазряд3Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель3 КАК Показатель3Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта3 КАК Валюта3Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд4 КАК ТарифныйРазряд4Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель4 КАК Показатель4Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта4 КАК Валюта4Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд5 КАК ТарифныйРазряд5Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель5 КАК Показатель5Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта5 КАК Валюта5Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд6 КАК ТарифныйРазряд6Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель6 КАК Показатель6Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта6 КАК Валюта6Завершения,
	|	ДанныеОПрежнихНачислениях.КонфликтныйДокумент,
	|	ДанныеОПрежнихНачислениях.ДатаДвижения,
	|	ЕСТЬNULL(Показатели.КоличествоПоказателей, 0) КАК КоличествоПоказателей,
	|	Показатели.Показатель1Предопределенный,
	|	Показатели.Показатель1Наименование,
	|	Показатели.Показатель1ТипПоказателя,
	|	Показатели.Показатель1ВозможностьИзменения,
	|	Показатели.Показатель2Предопределенный,
	|	Показатели.Показатель2Наименование,
	|	Показатели.Показатель2ТипПоказателя,
	|	Показатели.Показатель2ВозможностьИзменения,
	|	Показатели.Показатель3Предопределенный,
	|	Показатели.Показатель3Наименование,
	|	Показатели.Показатель3ТипПоказателя,
	|	Показатели.Показатель3ВозможностьИзменения,
	|	Показатели.Показатель4Предопределенный,
	|	Показатели.Показатель4Наименование,
	|	Показатели.Показатель4ТипПоказателя,
	|	Показатели.Показатель4ВозможностьИзменения,
	|	Показатели.Показатель5Предопределенный,
	|	Показатели.Показатель5Наименование,
	|	Показатели.Показатель5ТипПоказателя,
	|	Показатели.Показатель5ВозможностьИзменения,
	|	Показатели.Показатель6Предопределенный,
	|	Показатели.Показатель6Наименование,
	|	Показатели.Показатель6ТипПоказателя,
	|	Показатели.Показатель6ВозможностьИзменения,
	|	Показатели.Показатель1ТарифнаяСтавка,
	|	Показатели.Показатель2ТарифнаяСтавка,
	|	Показатели.Показатель3ТарифнаяСтавка,
	|	Показатели.Показатель4ТарифнаяСтавка,
	|	Показатели.Показатель5ТарифнаяСтавка,
	|	Показатели.Показатель6ТарифнаяСтавка,
	|	Показатели.Показатель1ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель2ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель3ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель4ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель5ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель6ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	ДвойныеСтроки.КонфликтнаяСтрокаНомер КАК ДвойнаяСтрока
	|ИЗ
	|	ВТДанныеОНачислениях КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеШтатногоРасписания КАК ДанныеШтатногоРасписания
	|		ПО ТЧНачисления.НомерСтроки = ДанныеШтатногоРасписания.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПрежнихНачислениях КАК ДанныеОПрежнихНачислениях
	|		ПО ТЧНачисления.НомерСтроки = ДанныеОПрежнихНачислениях.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
	|		ПО ТЧНачисления.НомерСтроки = Показатели.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧНачисления2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			ВТДанныеОНачислениях КАК ТЧНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеОНачислениях КАК ТЧНачисления2
	|				ПО (ТЧНачисления.ВидРасчета = ТЧНачисления2.ВидРасчета
	|						ИЛИ ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|							И ТЧНачисления2.ВидРасчета.ЗачетОтработанногоВремени)
	|					И ТЧНачисления.НомерСтроки < ТЧНачисления2.НомерСтроки
	|					И ТЧНачисления.Сотрудник = ТЧНачисления2.Сотрудник
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.НомерСтроки) КАК ДвойныеСтроки
	|		ПО ТЧНачисления.НомерСтроки = ДвойныеСтроки.НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоНачисления()

Процедура СформироватьДвижениеПоПлановымНачислениям(Движение, ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса) Экспорт

	Движение.Организация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Если НЕ ВыборкаСтрокЗапроса.ОсновноеНачисление Тогда
		Движение.ВидРасчетаИзмерение = ВыборкаСтрокЗапроса.ВидРасчета;
	КонецЕсли;
	
	СтрокаПолей = "Период,Сотрудник,Действие,ВидРасчета,ПериодЗавершения,ДействиеЗавершения,ВидРасчетаЗавершения";
	
	Если ВыборкаСтрокЗапроса.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
	
		Для Сч = 1 По 6 Цикл
			Если ВыборкаСтрокЗапроса.ПроизвольнаяФормулаРасчета Тогда
				Если Сч <= ВыборкаСтрокЗапроса.КоличествоПоказателей Тогда
					Если ВыборкаСтрокЗапроса["Показатель" + Сч + "ЗапрашиватьПриКадровыхПеремещениях"]
						Или ВыборкаСтрокЗапроса.ОсновноеНачисление И ВыборкаСтрокЗапроса["Показатель" + Сч + "ТарифнаяСтавка"] Тогда
						СтрокаПолей = СтрокаПолей + ",Показатель" + Сч + ",Валюта"+ Сч + ",ТарифныйРазряд"+ Сч;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтрокаПолей = СтрокаПолей + ",Показатель" + Сч + ",Валюта"+ Сч;
				Если ВыборкаСтрокЗапроса.ТребуетВводаТарифногоРазряда Тогда
					СтрокаПолей = СтрокаПолей + ",ТарифныйРазряд"+ Сч;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Движения на дату завершения
	Если ЗначениеЗаполнено(ВыборкаСтрокЗапроса.ПериодЗавершения) И ВыборкаСтрокЗапроса.ДействиеЗавершения <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		
		Для Сч = 1 По 6 Цикл
			Если ВыборкаСтрокЗапроса.ПроизвольнаяФормулаРасчета Тогда
				Если Сч <= ВыборкаСтрокЗапроса.КоличествоПоказателей Тогда
					Если ВыборкаСтрокЗапроса["Показатель" + Сч + "ЗапрашиватьПриКадровыхПеремещениях"]
						Или ВыборкаСтрокЗапроса.ОсновноеНачисление И ВыборкаСтрокЗапроса["Показатель" + Сч + "ТарифнаяСтавка"] Тогда
						СтрокаПолей = СтрокаПолей + ",Показатель" + Сч + "Завершения,Валюта"+ Сч + "Завершения,ТарифныйРазряд"+ Сч + "Завершения";
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтрокаПолей = СтрокаПолей + ",Показатель" + Сч + "Завершения,Валюта"+ Сч + "Завершения,ТарифныйРазряд"+ Сч + "Завершения";
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаСтрокЗапроса, СтрокаПолей);

КонецПроцедуры

  ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ОСТАТКИ ОТПУСКОВ РЕГЛ. УЧЕТА

// Процедура формирует временную таблицу, в которую записывает переданную таблицу периодов
//
Процедура ПодготовитьТаблицуПериодовОрганизаций(Запрос, ТаблицаПериодов)
	
	Запрос.УстановитьПараметр("Таблица",	ТаблицаПериодов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПериодов.*
	|ПОМЕСТИТЬ ВТТаблицаПериодов
	|
	|ИЗ
	|	&Таблица КАК ТаблицаПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	НомерСтроки";
	Запрос.Выполнить();
	
КонецПроцедуры

// Функция возвращает список остатков отпусков для тех рабочих лет, по которым нет остатков в справочнике
// Остатки отпусков организаций
// Включать текущий рабочий год необходимо, когда считаем остатки для списания фактического отпуска
//
Функция ПолучитьДополнениеОстатковОрганизаций(
	Запрос,						// Объект запрос, в котором уже есть виртуальные таблицы ТаблицаПериодов и АктуальныеОстатки
	Регистратор,				// Регистратор, которым списывается отпуск
	ВключатьТекущийРабочийГод	// Значение Истина должно быть установлено всегда, когда передается регистратор
	)
	
	// Дата увольнения сотрудника определяется по данным регистра работников, но в доке Расчет при увольнении
	// пользователь может указать произвольную дату, не совпадающую с датой увольнения
	// В этом случае дату увольнения надо брать из документа
	ЭтоРасчетПриУвольнении = ТипЗнч(Регистратор) = Тип("ДокументСсылка.РасчетПриУвольненииРаботникаОрганизаций")
							ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.УвольнениеИзОрганизаций");
	
	Если ЭтоРасчетПриУвольнении Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПериодов.Сотрудник КАК Сотрудник,
		|	ТаблицаПериодов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПериодов.ДатаРасчетаПриУвольнении КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТУвольнения
		|ИЗ
		|	ВТТаблицаПериодов КАК ТаблицаПериодов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	НомерСтроки";
		Запрос.Выполнить();
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПериодов.Сотрудник КАК Сотрудник,
		|	ТаблицаПериодов.НомерСтроки КАК НомерСтроки,
		|	МАКСИМУМ(ДОБАВИТЬКДАТЕ(Работники.Период, ДЕНЬ, -1)) КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТУвольнения
		|ИЗ
		|	ВТТаблицаПериодов КАК ТаблицаПериодов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|		ПО ТаблицаПериодов.Сотрудник = Работники.Сотрудник
		|			И ТаблицаПериодов.ДатаНачала >= Работники.Период
		|			И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПериодов.Сотрудник,
		|	ТаблицаПериодов.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	НомерСтроки";
		Запрос.Выполнить();
		
	КонецЕсли;
	
	// Получим все отпуска, из-за которых необходимо увеличить рабочий год
	Запрос.УстановитьПараметр("ТекущаяДата",	ТекущаяДата());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПериодов.НомерСтроки КАК НомерСтроки,
	|	СостояниеРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	|	ТаблицаПериодов.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	СостояниеРаботниковОрганизаций.Период КАК Период,
	|	СостояниеРаботниковОрганизаций.Состояние КАК Состояние,
	|	СостояниеРаботниковОрганизаций.ПериодЗавершения КАК ПериодЗавершения,
	|	СостояниеРаботниковОрганизаций.СостояниеЗавершения
	|ПОМЕСТИТЬ ВТСостояние
	|ИЗ
	|	ВТТаблицаПериодов КАК ТаблицаПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|		ПО ТаблицаПериодов.Сотрудник = СостояниеРаботниковОрганизаций.Сотрудник
	|			И ТаблицаПериодов.ДатаНачала >= СостояниеРаботниковОрганизаций.Период
	|			И (СостояниеРаботниковОрганизаций.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	Сотрудник,
	|	Период,
	|	ПериодЗавершения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериодов.НомерСтроки КАК НомерСтроки,
	|	СостояниеРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	|	ТаблицаПериодов.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	СостояниеРаботниковОрганизаций.Период КАК ПериодНачала,
	|	МИНИМУМ(СостояниеРаботниковОрганизацийЗавершения.Период) КАК ДатаСреза
	|ПОМЕСТИТЬ ВТСрезСостояний
	|ИЗ
	|	ВТТаблицаПериодов КАК ТаблицаПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизацийЗавершения
	|			ПО СостояниеРаботниковОрганизаций.Сотрудник = СостояниеРаботниковОрганизацийЗавершения.Сотрудник
	|				И СостояниеРаботниковОрганизаций.Период < СостояниеРаботниковОрганизацийЗавершения.Период
	|		ПО ТаблицаПериодов.Сотрудник = СостояниеРаботниковОрганизаций.Сотрудник
	|			И ТаблицаПериодов.ДатаНачала >= СостояниеРаботниковОрганизаций.Период
	|			И (СостояниеРаботниковОрганизаций.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы)))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодов.НомерСтроки,
	|	СостояниеРаботниковОрганизаций.Сотрудник,
	|	ТаблицаПериодов.ВидЕжегодногоОтпуска,
	|	СостояниеРаботниковОрганизаций.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	Сотрудник,
	|	ПериодНачала,
	|	ДатаСреза
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСрезСостояний.НомерСтроки КАК НомерСтроки,
	|	ВТСрезСостояний.Сотрудник КАК Сотрудник,
	|	ВТСрезСостояний.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВТСрезСостояний.ПериодНачала КАК ПериодНачала,
	|	СостояниеРаботниковОрганизацийЗавершения.Период КАК Период,
	|	СостояниеРаботниковОрганизацийЗавершения.Состояние
	|ПОМЕСТИТЬ ВТСостояниеЗавершения
	|ИЗ
	|	ВТСрезСостояний КАК ВТСрезСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизацийЗавершения
	|		ПО ВТСрезСостояний.Сотрудник = СостояниеРаботниковОрганизацийЗавершения.Сотрудник
	|			И ВТСрезСостояний.ДатаСреза = СостояниеРаботниковОрганизацийЗавершения.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	Сотрудник,
	|	ПериодНачала,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостояниеРаботников.НомерСтроки КАК НомерСтроки,
	|	СостояниеРаботников.Сотрудник,
	|	СостояниеРаботников.ВидЕжегодногоОтпуска,
	|	РАЗНОСТЬДАТ(СостояниеРаботников.ДатаНачалаОтпуска, СостояниеРаботников.ДатаОкончанияОтпуска, ДЕНЬ) КАК КоличествоДнейОтпуска,
	|	СостояниеРаботников.ДатаНачалаОтпуска КАК ДатаНачалаОтпуска,
	|	ДОБАВИТЬКДАТЕ(СостояниеРаботников.ДатаОкончанияОтпуска, ДЕНЬ, -1) КАК ДатаОкончанияОтпуска,
	|	СостояниеРаботников.Состояние,
	|	СостояниеРаботников.СостояниеЗавершения
	|ИЗ
	|	(ВЫБРАТЬ
	|		СостояниеРаботниковОрганизаций.НомерСтроки КАК НомерСтроки,
	|		СостояниеРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	|		СостояниеРаботниковОрганизаций.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|		СостояниеРаботниковОрганизаций.Период КАК ДатаНачалаОтпуска,
	|		ВЫБОР
	|			КОГДА СостояниеРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|					И (СостояниеРаботниковОрганизацийЗавершения.Период ЕСТЬ NULL 
	|						ИЛИ СостояниеРаботниковОрганизацийЗавершения.Период > СостояниеРаботниковОрганизаций.ПериодЗавершения)
	|				ТОГДА СостояниеРаботниковОрганизаций.ПериодЗавершения
	|			КОГДА ЕСТЬNULL(СостояниеРаботниковОрганизацийЗавершения.Период, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА СостояниеРаботниковОрганизацийЗавершения.Период
	|			ИНАЧЕ ВЫБОР
	|					КОГДА Увольнения.ДатаУвольнения ЕСТЬ NULL 
	|						ТОГДА &ТекущаяДата
	|					ИНАЧЕ Увольнения.ДатаУвольнения
	|				КОНЕЦ
	|		КОНЕЦ КАК ДатаОкончанияОтпуска,
	|		СостояниеРаботниковОрганизаций.Состояние КАК Состояние,
	|		ВЫБОР
	|			КОГДА (НЕ СостояниеРаботниковОрганизацийЗавершения.Период ЕСТЬ NULL )
	|					И СостояниеРаботниковОрганизацийЗавершения.Период <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА СостояниеРаботниковОрганизацийЗавершения.Состояние
	|			КОГДА СостояниеРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|					И СостояниеРаботниковОрганизацийЗавершения.Период > СостояниеРаботниковОрганизаций.ПериодЗавершения
	|				ТОГДА СостояниеРаботниковОрганизаций.СостояниеЗавершения
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает)
	|		КОНЕЦ КАК СостояниеЗавершения
	|	ИЗ
	|		ВТСостояние КАК СостояниеРаботниковОрганизаций
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеЗавершения КАК СостояниеРаботниковОрганизацийЗавершения
	|			ПО СостояниеРаботниковОрганизаций.Сотрудник = СостояниеРаботниковОрганизацийЗавершения.Сотрудник
	|				И СостояниеРаботниковОрганизаций.НомерСтроки = СостояниеРаботниковОрганизацийЗавершения.НомерСтроки
	|				И СостояниеРаботниковОрганизаций.ВидЕжегодногоОтпуска = СостояниеРаботниковОрганизацийЗавершения.ВидЕжегодногоОтпуска
	|				И СостояниеРаботниковОрганизаций.Период < СостояниеРаботниковОрганизацийЗавершения.Период
	|				И СостояниеРаботниковОрганизаций.Период = СостояниеРаботниковОрганизацийЗавершения.ПериодНачала
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТУвольнения КАК Увольнения
	|			ПО СостояниеРаботниковОрганизаций.НомерСтроки = Увольнения.НомерСтроки
	|				И СостояниеРаботниковОрганизаций.Сотрудник = Увольнения.Сотрудник) КАК СостояниеРаботников
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ДатаНачалаОтпуска";
	ТаблицаОтпусковДляИсключения = Запрос.Выполнить().Выгрузить();
	
	// Таблица остатков
	Запрос.УстановитьПараметр("ВключатьТекущийРабочийГод",	ВключатьТекущийРабочийГод);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоследнийРабочийГод.НомерСтроки КАК НомерСтроки,
	|	ПоследнийРабочийГод.Сотрудник,
	|	ПоследнийРабочийГод.ДатаНачалаРабочегоГода,
	|	ПоследнийРабочийГод.ВидЕжегодногоОтпуска,
	|	ПоследнийРабочийГод.ДатаПолученияДанных КАК ДатаПолученияДанных,
	|	ПоследнийРабочийГод.ДатаОстатков,
	|	ПоследнийРабочийГод.ДатаПриемаНаРаботу,
	|	ПоследнийРабочийГод.ДатаУвольнения,
	|	ЕСТЬNULL(ОстаткиОтпусковОстатки.ДатаОкончанияРабочегоГода, ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаНачалаРабочегоГода, ГОД, 1), СЕКУНДА, -1)) КАК ДатаОкончанияРабочегоГода,
	|	ОстаткиОтпусков.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоследнийРабочийГод.Сотрудник КАК Сотрудник,
	|		МАКСИМУМ(ПоследнийРабочийГод.ДатаНачалаРабочегоГода) КАК ДатаНачалаРабочегоГода,
	|		ПоследнийРабочийГод.ДатаПолученияДанных КАК ДатаПолученияДанных,
	|		ПоследнийРабочийГод.ДатаОстатков КАК ДатаОстатков,
	|		ПоследнийРабочийГод.НомерСтроки КАК НомерСтроки,
	|		ПоследнийРабочийГод.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|		ПоследнийРабочийГод.ДатаПриемаНаРаботу КАК ДатаПриемаНаРаботу,
	|		ПоследнийРабочийГод.ДатаУвольнения КАК ДатаУвольнения
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Работники.Сотрудник КАК Сотрудник,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА (НЕ ОстаткиОтпусков.ДатаОкончанияРабочегоГода ЕСТЬ NULL )
	|						ТОГДА ДОБАВИТЬКДАТЕ(ОстаткиОтпусков.ДатаОкончанияРабочегоГода, ДЕНЬ, 1)
	|					ИНАЧЕ Работники.Период
	|				КОНЕЦ) КАК ДатаНачалаРабочегоГода,
	|			ТаблицаПериодов.ДатаОкончания КАК ДатаПолученияДанных,
	|			ОстаткиОтпусков.ДатаОстатков КАК ДатаОстатков,
	|			ТаблицаПериодов.НомерСтроки КАК НомерСтроки,
	|			ТаблицаПериодов.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|			Работники.Период КАК ДатаПриемаНаРаботу,
	|			Увольнения.ДатаУвольнения КАК ДатаУвольнения
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ТаблицаПериодов.Сотрудник КАК Сотрудник,
	|				ТаблицаПериодов.НомерСтроки КАК НомерСтроки,
	|				МАКСИМУМ(Работники.Период) КАК Период
	|			ИЗ
	|				ВТТаблицаПериодов КАК ТаблицаПериодов
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|					ПО ТаблицаПериодов.Сотрудник = Работники.Сотрудник
	|						И ТаблицаПериодов.ДатаНачала >= Работники.Период
	|						И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТаблицаПериодов.Сотрудник,
	|				ТаблицаПериодов.НомерСтроки) КАК Работники
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаПериодов КАК ТаблицаПериодов
	|					ЛЕВОЕ СОЕДИНЕНИЕ ВТАктуальныеОстатки КАК ОстаткиОтпусков
	|					ПО ТаблицаПериодов.Сотрудник = ОстаткиОтпусков.Сотрудник
	|						И ТаблицаПериодов.НомерСтроки = ОстаткиОтпусков.НомерСтроки
	|						И ТаблицаПериодов.ВидЕжегодногоОтпуска = ОстаткиОтпусков.ВидЕжегодногоОтпуска
	|					ЛЕВОЕ СОЕДИНЕНИЕ ВТУвольнения КАК Увольнения
	|					ПО ТаблицаПериодов.Сотрудник = Увольнения.Сотрудник
	|						И ТаблицаПериодов.НомерСтроки = Увольнения.НомерСтроки
	|				ПО Работники.Сотрудник = ТаблицаПериодов.Сотрудник
	|					И Работники.НомерСтроки = ТаблицаПериодов.НомерСтроки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Работники.Сотрудник,
	|			ТаблицаПериодов.НомерСтроки,
	|			ТаблицаПериодов.ВидЕжегодногоОтпуска,
	|			ТаблицаПериодов.ДатаОкончания,
	|			ОстаткиОтпусков.ДатаОстатков,
	|			Работники.Период,
	|			Увольнения.ДатаУвольнения) КАК ПоследнийРабочийГод
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПоследнийРабочийГод.Сотрудник,
	|		ПоследнийРабочийГод.НомерСтроки,
	|		ПоследнийРабочийГод.ДатаПриемаНаРаботу,
	|		ПоследнийРабочийГод.ДатаПолученияДанных,
	|		ПоследнийРабочийГод.ДатаОстатков,
	|		ПоследнийРабочийГод.ВидЕжегодногоОтпуска,
	|		ПоследнийРабочийГод.ДатаУвольнения) КАК ПоследнийРабочийГод
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОстаткиОтпусковОрганизаций.Остатки КАК ОстаткиОтпусковОстатки
	|		ПО ПоследнийРабочийГод.Сотрудник = ОстаткиОтпусковОстатки.Ссылка.Сотрудник
	|			И ПоследнийРабочийГод.ДатаНачалаРабочегоГода = ОстаткиОтпусковОстатки.ДатаНачалаРабочегоГода
	|			И ПоследнийРабочийГод.ДатаОстатков = ОстаткиОтпусковОстатки.Ссылка.ДатаАктуальности
	|			И ПоследнийРабочийГод.ВидЕжегодногоОтпуска = ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОстаткиОтпусковОрганизаций КАК ОстаткиОтпусков
	|		ПО ПоследнийРабочийГод.Сотрудник = ОстаткиОтпусков.Сотрудник
	|			И ПоследнийРабочийГод.ДатаОстатков = ОстаткиОтпусков.ДатаАктуальности
	|ГДЕ
	|	ВЫБОР
	|			КОГДА (НЕ &ВключатьТекущийРабочийГод)
	|				ТОГДА ЕСТЬNULL(ОстаткиОтпусковОстатки.ДатаОкончанияРабочегоГода, ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ПоследнийРабочийГод.ДатаНачалаРабочегоГода, ГОД, 1), СЕКУНДА, -1)) < ПоследнийРабочийГод.ДатаПолученияДанных
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("Ссылка",						Новый ОписаниеТипов("СправочникСсылка.ОстаткиОтпусковОрганизаций"));
	ТаблицаОстатков.Колонки.Добавить("Сотрудник",					Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТаблицаОстатков.Колонки.Добавить("ВидЕжегодногоОтпуска",		Новый ОписаниеТипов("СправочникСсылка.ВидыЕжегодныхОтпусков"));
	ТаблицаОстатков.Колонки.Добавить("ДатаНачалаРабочегоГода",		Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаОкончанияРабочегоГода",	Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("НомерСтроки",					Новый ОписаниеТипов("Число"));
	ТаблицаОстатков.Колонки.Добавить("ДатаПолученияДанных",			Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаПриемаНаРаботу",			Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаУвольнения",				Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаОстатков",				Новый ОписаниеТипов("Дата"));
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура(
		"НомерСтроки,
		|Сотрудник,
		|ВидЕжегодногоОтпуска",
		Выборка.НомерСтроки,
		Выборка.Сотрудник,
		Выборка.ВидЕжегодногоОтпуска);
		
		ОтпускаДляИсключения = ТаблицаОтпусковДляИсключения.НайтиСтроки(СтруктураПоиска);
		
		ДатаНачалаРабочегоГода		= Выборка.ДатаНачалаРабочегоГода;
		ДатаОкончанияРабочегоГода	= Выборка.ДатаОкончанияРабочегоГода;
		
		ДатаОграничения = ?(Выборка.ДатаУвольнения = NULL, Выборка.ДатаПолученияДанных, Выборка.ДатаУвольнения);
		
		ДлинаСуток = 86400;
		
		// В цикле будем добавлять в таблицу все рабочие года по сотрудникам
		Пока ?(ВключатьТекущийРабочийГод, ДатаОкончанияРабочегоГода < ДобавитьМесяц(ДатаОграничения, 12), ДатаОкончанияРабочегоГода < ДатаОграничения) Цикл
			Строка = ТаблицаОстатков.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Выборка);
			Строка.ДатаНачалаРабочегоГода		= ДатаНачалаРабочегоГода;
			Строка.ДатаОкончанияРабочегоГода	= ДатаОкончанияРабочегоГода;
			
			КоличествоДнейВключаемых = 14;
			
			
			Для Каждого ОтпускДляИсключения Из ОтпускаДляИсключения Цикл
				Если Строка.ДатаНачалаРабочегоГода <= ОтпускДляИсключения.ДатаНачалаОтпуска
					И ОтпускДляИсключения.ДатаНачалаОтпуска <= Строка.ДатаОкончанияРабочегоГода Тогда
					
					Если ОтпускДляИсключения.Состояние = Перечисления.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты Тогда
						КоличествоДнейОтпуска	= ОтпускДляИсключения.КоличествоДнейОтпуска;
						
						ОтпускДляИсключения.ДатаНачалаОтпуска		= ОтпускДляИсключения.ДатаНачалаОтпуска + Мин(ОтпускДляИсключения.КоличествоДнейОтпуска, КоличествоДнейВключаемых) * ДлинаСуток;
						ОтпускДляИсключения.КоличествоДнейОтпуска	= Макс(ОтпускДляИсключения.КоличествоДнейОтпуска - КоличествоДнейВключаемых, 0);
						
						Если ОтпускДляИсключения.КоличествоДнейОтпуска > 0 Тогда
							Строка.ДатаОкончанияРабочегоГода			= Строка.ДатаОкончанияРабочегоГода + ОтпускДляИсключения.КоличествоДнейОтпуска * ДлинаСуток;
						КонецЕсли;
						
						КоличествоДнейВключаемых = Макс(КоличествоДнейВключаемых - КоличествоДнейОтпуска, 0);
						
					Иначе
						Строка.ДатаОкончанияРабочегоГода = Строка.ДатаОкончанияРабочегоГода + ОтпускДляИсключения.КоличествоДнейОтпуска * ДлинаСуток;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ДатаНачалаРабочегоГода		= Строка.ДатаОкончанияРабочегоГода + 1;
			ДатаОкончанияРабочегоГода	= ДобавитьМесяц(ДатаНачалаРабочегоГода, 12) - 1;
		КонецЦикла;
		
	КонецЦикла;
	
	// Если передан регистратор, необходимо исключить как движения регистратора,
	// так и движения всех документов исправлений этого регистратора.
	МассивДокументов = Новый Массив;
	Если Регистратор <> Неопределено Тогда
		МассивДокументов.Добавить(Регистратор);
		
		МДРегистратора = Регистратор.Метаданные();
		ИмяРеквизита = "";
		Если МДРегистратора.Реквизиты.Найти("ПерерассчитываемыйДокумент") <> Неопределено Тогда
			ИмяРеквизита = "ПерерассчитываемыйДокумент";
		ИначеЕсли МДРегистратора.Реквизиты.Найти("ИсправляемыйДокумент") <> Неопределено Тогда
			ИмяРеквизита = "ИсправляемыйДокумент";
		КонецЕсли;
		Если Не ПустаяСтрока(ИмяРеквизита) Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Док." + ИмяРеквизита + " КАК Ссылка
			|ИЗ
			|	Документ." + МДРегистратора.Имя + " КАК Док
			|ГДЕ
			|	Док.Ссылка = &Ссылка";
			
			Ссылка = Регистратор;
			Пока Ссылка <> Неопределено И Не Ссылка.Пустая() Цикл
				Запрос.УстановитьПараметр("Ссылка",	Ссылка);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Ссылка = Выборка.Ссылка;
					Если Не Ссылка.Пустая() Тогда
						МассивДокументов.Добавить(Ссылка);
					КонецЕсли;
				Иначе
					Ссылка = Неопределено;
				КонецЕсли;
			КонецЦикла;
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Док.Ссылка
			|ИЗ
			|	Документ." + МДРегистратора.Имя + " КАК Док
			|ГДЕ
			|	Док." + ИмяРеквизита + " = &Ссылка";
			
			Ссылка = Регистратор;
			Пока Ссылка <> Неопределено И Не Ссылка.Пустая() Цикл
				Запрос.УстановитьПараметр("Ссылка",	Ссылка);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Ссылка = Выборка.Ссылка;
					Если Не Ссылка.Пустая() Тогда
						МассивДокументов.Добавить(Ссылка);
					КонецЕсли;
				Иначе
					Ссылка = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивДокументов",	МассивДокументов);
	
	Запрос.УстановитьПараметр("ТаблицаОстатков",	ТаблицаОстатков);
	Запрос.УстановитьПараметр("ТаблицаОтпусков",	ТаблицаОтпусковДляИсключения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОстатков.Ссылка КАК Ссылка,
	|	ТаблицаОстатков.Сотрудник КАК Сотрудник,
	|	ТаблицаОстатков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ТаблицаОстатков.ДатаНачалаРабочегоГода,
	|	ТаблицаОстатков.ДатаОкончанияРабочегоГода,
	|	ТаблицаОстатков.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОстатков.ДатаПолученияДанных КАК ДатаПолученияДанных,
	|	ТаблицаОстатков.ДатаПриемаНаРаботу,
	|	ТаблицаОстатков.ДатаУвольнения,
	|	ТаблицаОстатков.ДатаОстатков
	|ПОМЕСТИТЬ ВТ_ТаблицаОстатков
	|ИЗ
	|	&ТаблицаОстатков КАК ТаблицаОстатков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидЕжегодногоОтпуска,
	|	НомерСтроки,
	|	ДатаПолученияДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОтпусков.НомерСтроки,
	|	ТаблицаОтпусков.Сотрудник КАК Сотрудник,
	|	ТаблицаОтпусков.ВидЕжегодногоОтпуска,
	|	ТаблицаОтпусков.КоличествоДнейОтпуска,
	|	ТаблицаОтпусков.ДатаНачалаОтпуска КАК ДатаНачалаОтпуска,
	|	ТаблицаОтпусков.ДатаОкончанияОтпуска КАК ДатаОкончанияОтпуска,
	|	ТаблицаОтпусков.Состояние,
	|	ТаблицаОтпусков.СостояниеЗавершения
	|ПОМЕСТИТЬ ВТ_ОтпускаДляИсключения
	|ИЗ
	|	&ТаблицаОтпусков КАК ТаблицаОтпусков
	|ГДЕ
	|	ТаблицаОтпусков.КоличествоДнейОтпуска > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаНачалаОтпуска,
	|	ДатаОкончанияОтпуска";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОстатков.Сотрудник КАК Сотрудник,
	|	ТаблицаОстатков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ТаблицаОстатков.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_СрезТаблицаОстатковИРаботники
	|ИЗ
	|	ВТ_ТаблицаОстатков КАК ТаблицаОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ТаблицаОстатков.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И ТаблицаОстатков.ДатаПолученияДанных <= РаботникиОрганизаций.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатков.Сотрудник,
	|	ТаблицаОстатков.ВидЕжегодногоОтпуска,
	|	ТаблицаОстатков.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидЕжегодногоОтпуска,
	|	НомерСтроки,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Ссылка КАК Ссылка,
	|	ТаблицаОстатков.Сотрудник КАК Сотрудник,
	|	ТаблицаОстатков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ТаблицаОстатков.ВидЕжегодногоОтпуска.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод,
	|	ТаблицаОстатков.ВидЕжегодногоОтпуска.СпособРасчетаОстаткаОтпуска КАК СпособРасчетаОстаткаОтпуска,
	|	ТаблицаОстатков.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ТаблицаОстатков.ДатаОкончанияРабочегоГода КАК ДатаОкончанияРабочегоГода,
	|	ТаблицаОстатков.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОстатков.ДатаПолученияДанных,
	|	ТаблицаОстатков.ДатаПриемаНаРаботу,
	|	ТаблицаОстатков.ДатаУвольнения,
	|	ТаблицаОстатков.ДатаОстатков,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(ТаблицаОстатков.ДатаПриемаНаРаботу, ТаблицаОстатков.ДатаУвольнения, МЕСЯЦ) = 10
	|				И ТаблицаОстатков.ДатаПриемаНаРаботу = НАЧАЛОПЕРИОДА(ТаблицаОстатков.ДатаПриемаНаРаботу, МЕСЯЦ)
	|				И ТаблицаОстатков.ДатаУвольнения = НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ТаблицаОстатков.ДатаУвольнения, МЕСЯЦ), ДЕНЬ)
	|			ТОГДА ТаблицаОстатков.ДатаОкончанияРабочегоГода
	|		КОГДА РАЗНОСТЬДАТ(ТаблицаОстатков.ДатаПриемаНаРаботу, ТаблицаОстатков.ДатаУвольнения, МЕСЯЦ) = 11
	|				И (ДЕНЬ(ТаблицаОстатков.ДатаПриемаНаРаботу) < ДЕНЬ(ТаблицаОстатков.ДатаУвольнения)
	|					ИЛИ ДЕНЬ(ТаблицаОстатков.ДатаПриемаНаРаботу) = ДЕНЬ(ДОБАВИТЬКДАТЕ(ТаблицаОстатков.ДатаУвольнения, ДЕНЬ, 1)))
	|			ТОГДА ТаблицаОстатков.ДатаОкончанияРабочегоГода
	|		КОГДА РАЗНОСТЬДАТ(ТаблицаОстатков.ДатаПриемаНаРаботу, ТаблицаОстатков.ДатаУвольнения, МЕСЯЦ) = 12
	|				И (ДЕНЬ(ТаблицаОстатков.ДатаПриемаНаРаботу) > ДЕНЬ(ТаблицаОстатков.ДатаУвольнения)
	|					ИЛИ ДЕНЬ(ТаблицаОстатков.ДатаПриемаНаРаботу) = ДЕНЬ(ДОБАВИТЬКДАТЕ(ТаблицаОстатков.ДатаУвольнения, ДЕНЬ, 1)))
	|			ТОГДА ТаблицаОстатков.ДатаОкончанияРабочегоГода
	|		КОГДА ДОБАВИТЬКДАТЕ(ТаблицаОстатков.ДатаОкончанияРабочегоГода, СЕКУНДА, 1) <= ТаблицаОстатков.ДатаПолученияДанных
	|			ТОГДА НАЧАЛОПЕРИОДА(ТаблицаОстатков.ДатаОкончанияРабочегоГода, ДЕНЬ)
	|		ИНАЧЕ ТаблицаОстатков.ДатаПолученияДанных
	|	КОНЕЦ КАК ФактическаяДатаОкончанияРабочегоГода,
	|	РаботникиОрганизаций.Должность КАК Должность
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	ВТ_ТаблицаОстатков КАК ТаблицаОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СрезТаблицаОстатковИРаботники КАК ВТСрезТаблицаОстатковИРаботники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО ВТСрезТаблицаОстатковИРаботники.Сотрудник = РаботникиОрганизаций.Сотрудник
	|				И ВТСрезТаблицаОстатковИРаботники.Период = РаботникиОрганизаций.Период
	|		ПО ТаблицаОстатков.Сотрудник = ВТСрезТаблицаОстатковИРаботники.Сотрудник
	|			И ТаблицаОстатков.ВидЕжегодногоОтпуска = ВТСрезТаблицаОстатковИРаботники.ВидЕжегодногоОтпуска
	|			И ТаблицаОстатков.НомерСтроки = ВТСрезТаблицаОстатковИРаботники.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидЕжегодногоОтпуска,
	|	ДатаНачалаРабочегоГода,
	|	ДатаОкончанияРабочегоГода,
	|	НомерСтроки,
	|	ФактическаяДатаОкончанияРабочегоГода,
	|	Должность,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускаДляИсключения.Сотрудник КАК Сотрудник,
	|	ВТОстатки.НомерСтроки КАК НомерСтроки,
	|	ВТОстатки.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВТОстатки.СпособРасчетаОстаткаОтпуска КАК СпособРасчетаОстаткаОтпуска,
	|	ОтпускаДляИсключения.ДатаНачалаОтпуска КАК Период,
	|	0 КАК КоличествоДнейОтпускаВГод,
	|	ВТОстатки.ДатаНачалаРабочегоГода,
	|	ВТОстатки.ФактическаяДатаОкончанияРабочегоГода,
	|	ОтпускаДляИсключения.Состояние
	|ПОМЕСТИТЬ ВТ_ГраницыОтпусковДляИсключения
	|ИЗ
	|	ВТ_ОтпускаДляИсключения КАК ОтпускаДляИсключения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТОстатки
	|		ПО ОтпускаДляИсключения.Сотрудник = ВТОстатки.Сотрудник
	|			И (ОтпускаДляИсключения.ДатаНачалаОтпуска МЕЖДУ ВТОстатки.ДатаНачалаРабочегоГода И ВТОстатки.ФактическаяДатаОкончанияРабочегоГода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускаДляИсключения.Сотрудник,
	|	ВТОстатки.НомерСтроки,
	|	ВТОстатки.ВидЕжегодногоОтпуска,
	|	ВТОстатки.СпособРасчетаОстаткаОтпуска,
	|	ОтпускаДляИсключения.ДатаОкончанияОтпуска,
	|	ЕСТЬNULL(СотрудникиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ЕСТЬNULL(ДолжностиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ВТОстатки.КоличествоДнейОтпускаВГод)),
	|	ВТОстатки.ДатаНачалаРабочегоГода,
	|	ВТОстатки.ФактическаяДатаОкончанияРабочегоГода,
	|	ОтпускаДляИсключения.СостояниеЗавершения
	|ИЗ
	|	ВТ_ОтпускаДляИсключения КАК ОтпускаДляИсключения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций.ЕжегодныеОтпуска КАК СотрудникиОрганизацийЕжегодныеОтпуска
	|			ПО ВТОстатки.Сотрудник = СотрудникиОрганизацийЕжегодныеОтпуска.Ссылка
	|				И ВТОстатки.ВидЕжегодногоОтпуска = СотрудникиОрганизацийЕжегодныеОтпуска.ВидЕжегодногоОтпуска
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолжностиОрганизаций.ЕжегодныеОтпуска КАК ДолжностиОрганизацийЕжегодныеОтпуска
	|			ПО ВТОстатки.Должность = ДолжностиОрганизацийЕжегодныеОтпуска.Ссылка
	|				И ВТОстатки.ВидЕжегодногоОтпуска = ДолжностиОрганизацийЕжегодныеОтпуска.ВидЕжегодногоОтпуска
	|		ПО ОтпускаДляИсключения.Сотрудник = ВТОстатки.Сотрудник
	|			И (ОтпускаДляИсключения.ДатаОкончанияОтпуска МЕЖДУ ВТОстатки.ДатаНачалаРабочегоГода И ВТОстатки.ФактическаяДатаОкончанияРабочегоГода)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	НомерСтроки,
	|	ВидЕжегодногоОтпуска,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Работники.Сотрудник КАК Сотрудник,
	|	ВТОстатки.НомерСтроки КАК НомерСтроки,
	|	ВТОстатки.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВТОстатки.СпособРасчетаОстаткаОтпуска КАК СпособРасчетаОстаткаОтпуска,
	|	ВТОстатки.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ВТОстатки.ФактическаяДатаОкончанияРабочегоГода КАК ФактическаяДатаОкончанияРабочегоГода,
	|	ВТОстатки.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод,
	|	МАКСИМУМ(Работники.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_СрезОстаткиИРаботники
	|ИЗ
	|	ВТ_Остатки КАК ВТОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ПО ВТОстатки.Сотрудник = Работники.Сотрудник
	|			И ВТОстатки.ДатаНачалаРабочегоГода >= Работники.Период
	|			И (Работники.Сотрудник В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВТОстатки.Сотрудник
	|				ИЗ
	|					ВТ_Остатки КАК ВТОстатки))
	|
	|СГРУППИРОВАТЬ ПО
	|	Работники.Сотрудник,
	|	ВТОстатки.НомерСтроки,
	|	ВТОстатки.ВидЕжегодногоОтпуска,
	|	ВТОстатки.СпособРасчетаОстаткаОтпуска,
	|	ВТОстатки.КоличествоДнейОтпускаВГод,
	|	ВТОстатки.ФактическаяДатаОкончанияРабочегоГода,
	|	ВТОстатки.ДатаНачалаРабочегоГода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСрезОстаткиИРаботники.Сотрудник КАК Сотрудник,
	|	ВТСрезОстаткиИРаботники.НомерСтроки КАК НомерСтроки,
	|	ВТСрезОстаткиИРаботники.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВТСрезОстаткиИРаботники.СпособРасчетаОстаткаОтпуска,
	|	ВТСрезОстаткиИРаботники.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ВТСрезОстаткиИРаботники.ФактическаяДатаОкончанияРабочегоГода,
	|	ВТСрезОстаткиИРаботники.КоличествоДнейОтпускаВГод,
	|	ВТСрезОстаткиИРаботники.Период КАК Период,
	|	Работники.Должность КАК Должность
	|ПОМЕСТИТЬ ВТ_ОстаткиСДолжностью
	|ИЗ
	|	ВТ_СрезОстаткиИРаботники КАК ВТСрезОстаткиИРаботники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ПО ВТСрезОстаткиИРаботники.Сотрудник = Работники.Сотрудник
	|			И ВТСрезОстаткиИРаботники.Период = Работники.Период
	|ГДЕ
	|	Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	НомерСтроки,
	|	ВидЕжегодногоОтпуска,
	|	ДатаНачалаРабочегоГода,
	|	Период,
	|	Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизаций.Должность КАК Должность,
	|	ВТОстатки.НомерСтроки КАК НомерСтроки,
	|	ВТОстатки.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВТОстатки.СпособРасчетаОстаткаОтпуска КАК СпособРасчетаОстаткаОтпуска,
	|	ВТОстатки.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ВТОстатки.ФактическаяДатаОкончанияРабочегоГода КАК ФактическаяДатаОкончанияРабочегоГода,
	|	РаботникиОрганизаций.Период КАК Период,
	|	ВТОстатки.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод
	|ПОМЕСТИТЬ ВТ_ПеремещенияСотрудников
	|ИЗ
	|	ВТ_Остатки КАК ВТОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ВТОстатки.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И (РаботникиОрганизаций.Период МЕЖДУ ВТОстатки.ДатаНачалаРабочегоГода И ВТОстатки.ДатаОкончанияРабочегоГода)
	|ГДЕ
	|	РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник,
	|	РаботникиОрганизаций.ДолжностьЗавершения,
	|	ВТОстатки.НомерСтроки,
	|	ВТОстатки.ВидЕжегодногоОтпуска,
	|	ВТОстатки.СпособРасчетаОстаткаОтпуска,
	|	ВТОстатки.ДатаНачалаРабочегоГода,
	|	ВТОстатки.ФактическаяДатаОкончанияРабочегоГода,
	|	ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.ПериодЗавершения, ДЕНЬ, -1),
	|	ВТОстатки.КоличествоДнейОтпускаВГод
	|ИЗ
	|	ВТ_Остатки КАК ВТОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ВТОстатки.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И ((НЕ РаботникиОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)))
	|			И (РаботникиОрганизаций.ПериодЗавершения МЕЖДУ ВТОстатки.ДатаНачалаРабочегоГода И ВТОстатки.ДатаОкончанияРабочегоГода)
	|ГДЕ
	|	РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Должность,
	|	НомерСтроки,
	|	ВидЕжегодногоОтпуска,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОстаткиСДолжностью.Сотрудник КАК Сотрудник,
	|	ВТОстаткиСДолжностью.НомерСтроки КАК НомерСтроки,
	|	ВТОстаткиСДолжностью.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВТОстаткиСДолжностью.СпособРасчетаОстаткаОтпуска КАК СпособРасчетаОстаткаОтпуска,
	|	ВТОстаткиСДолжностью.ДатаНачалаРабочегоГода КАК Период,
	|	ЕСТЬNULL(СотрудникиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ЕСТЬNULL(ДолжностиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ВТОстаткиСДолжностью.КоличествоДнейОтпускаВГод)) КАК КоличествоДнейОтпускаВГод,
	|	ВТОстаткиСДолжностью.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ВТОстаткиСДолжностью.ФактическаяДатаОкончанияРабочегоГода КАК ФактическаяДатаОкончанияРабочегоГода
	|ПОМЕСТИТЬ ВТ_ИзмененияКоличестваДнейВГод
	|ИЗ
	|	ВТ_ОстаткиСДолжностью КАК ВТОстаткиСДолжностью
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГраницыОтпусковДляИсключения КАК ВТОтсутствия
	|		ПО ВТОстаткиСДолжностью.Сотрудник = ВТОтсутствия.Сотрудник
	|			И ВТОстаткиСДолжностью.НомерСтроки = ВТОтсутствия.НомерСтроки
	|			И ВТОстаткиСДолжностью.ВидЕжегодногоОтпуска = ВТОтсутствия.ВидЕжегодногоОтпуска
	|			И ВТОстаткиСДолжностью.ДатаНачалаРабочегоГода = ВТОтсутствия.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций.ЕжегодныеОтпуска КАК СотрудникиОрганизацийЕжегодныеОтпуска
	|		ПО ВТОстаткиСДолжностью.Сотрудник = СотрудникиОрганизацийЕжегодныеОтпуска.Ссылка
	|			И ВТОстаткиСДолжностью.ВидЕжегодногоОтпуска = СотрудникиОрганизацийЕжегодныеОтпуска.ВидЕжегодногоОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолжностиОрганизаций.ЕжегодныеОтпуска КАК ДолжностиОрганизацийЕжегодныеОтпуска
	|		ПО ВТОстаткиСДолжностью.Должность = ДолжностиОрганизацийЕжегодныеОтпуска.Ссылка
	|			И ВТОстаткиСДолжностью.ВидЕжегодногоОтпуска = ДолжностиОрганизацийЕжегодныеОтпуска.ВидЕжегодногоОтпуска
	|ГДЕ
	|	ВТОтсутствия.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТПеремещенияСотрудников.Сотрудник,
	|	ВТПеремещенияСотрудников.НомерСтроки,
	|	ВТПеремещенияСотрудников.ВидЕжегодногоОтпуска,
	|	ВТПеремещенияСотрудников.СпособРасчетаОстаткаОтпуска,
	|	ВТПеремещенияСотрудников.Период,
	|	ЕСТЬNULL(СотрудникиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ЕСТЬNULL(ДолжностиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ВТПеремещенияСотрудников.КоличествоДнейОтпускаВГод)),
	|	ВТПеремещенияСотрудников.ДатаНачалаРабочегоГода,
	|	ВТПеремещенияСотрудников.ФактическаяДатаОкончанияРабочегоГода
	|ИЗ
	|	ВТ_ПеремещенияСотрудников КАК ВТПеремещенияСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГраницыОтпусковДляИсключения КАК ВТОтсутствия
	|		ПО ВТПеремещенияСотрудников.Сотрудник = ВТОтсутствия.Сотрудник
	|			И ВТПеремещенияСотрудников.НомерСтроки = ВТОтсутствия.НомерСтроки
	|			И ВТПеремещенияСотрудников.ВидЕжегодногоОтпуска = ВТОтсутствия.ВидЕжегодногоОтпуска
	|			И ВТПеремещенияСотрудников.Период = ВТОтсутствия.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций.ЕжегодныеОтпуска КАК СотрудникиОрганизацийЕжегодныеОтпуска
	|		ПО ВТПеремещенияСотрудников.Сотрудник = СотрудникиОрганизацийЕжегодныеОтпуска.Ссылка
	|			И ВТПеремещенияСотрудников.ВидЕжегодногоОтпуска = СотрудникиОрганизацийЕжегодныеОтпуска.ВидЕжегодногоОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолжностиОрганизаций.ЕжегодныеОтпуска КАК ДолжностиОрганизацийЕжегодныеОтпуска
	|		ПО ВТПеремещенияСотрудников.Должность = ДолжностиОрганизацийЕжегодныеОтпуска.Ссылка
	|			И ВТПеремещенияСотрудников.ВидЕжегодногоОтпуска = ДолжностиОрганизацийЕжегодныеОтпуска.ВидЕжегодногоОтпуска
	|ГДЕ
	|	ВТОтсутствия.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТОтсутствия.Сотрудник,
	|	ВТОтсутствия.НомерСтроки,
	|	ВТОтсутствия.ВидЕжегодногоОтпуска,
	|	ВТОтсутствия.СпособРасчетаОстаткаОтпуска,
	|	ВТОтсутствия.Период,
	|	ВТОтсутствия.КоличествоДнейОтпускаВГод,
	|	ВТОтсутствия.ДатаНачалаРабочегоГода,
	|	ВТОтсутствия.ФактическаяДатаОкончанияРабочегоГода
	|ИЗ
	|	ВТ_ГраницыОтпусковДляИсключения КАК ВТОтсутствия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	НомерСтроки,
	|	ВидЕжегодногоОтпуска,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИзмененияКоличестваДнейВГод.Сотрудник КАК Сотрудник,
	|	ВТИзмененияКоличестваДнейВГод.НомерСтроки КАК НомерСтроки,
	|	ВТИзмененияКоличестваДнейВГод.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВТИзмененияКоличестваДнейВГод.СпособРасчетаОстаткаОтпуска КАК СпособРасчетаОстаткаОтпуска,
	|	ВТИзмененияКоличестваДнейВГод.Период КАК ДатаНачалаПериода,
	|	МИНИМУМ(ЕСТЬNULL(ВТИзмененияКоличестваДнейВГодСрез.Период, ВТИзмененияКоличестваДнейВГод.ФактическаяДатаОкончанияРабочегоГода)) КАК ДатаОкончанияПериода,
	|	ВТИзмененияКоличестваДнейВГод.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод,
	|	ВТИзмененияКоличестваДнейВГод.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ВТИзмененияКоличестваДнейВГод.ФактическаяДатаОкончанияРабочегоГода КАК ФактическаяДатаОкончанияРабочегоГода
	|ПОМЕСТИТЬ ВТ_ПериодыВРабочемГоду
	|ИЗ
	|	ВТ_ИзмененияКоличестваДнейВГод КАК ВТИзмененияКоличестваДнейВГод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИзмененияКоличестваДнейВГод КАК ВТИзмененияКоличестваДнейВГодСрез
	|		ПО ВТИзмененияКоличестваДнейВГод.Сотрудник = ВТИзмененияКоличестваДнейВГодСрез.Сотрудник
	|			И ВТИзмененияКоличестваДнейВГод.НомерСтроки = ВТИзмененияКоличестваДнейВГодСрез.НомерСтроки
	|			И ВТИзмененияКоличестваДнейВГод.ВидЕжегодногоОтпуска = ВТИзмененияКоличестваДнейВГодСрез.ВидЕжегодногоОтпуска
	|			И ВТИзмененияКоличестваДнейВГод.Период < ВТИзмененияКоличестваДнейВГодСрез.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТИзмененияКоличестваДнейВГод.Сотрудник,
	|	ВТИзмененияКоличестваДнейВГод.ВидЕжегодногоОтпуска,
	|	ВТИзмененияКоличестваДнейВГод.СпособРасчетаОстаткаОтпуска,
	|	ВТИзмененияКоличестваДнейВГод.НомерСтроки,
	|	ВТИзмененияКоличестваДнейВГод.Период,
	|	ВТИзмененияКоличестваДнейВГод.КоличествоДнейОтпускаВГод,
	|	ВТИзмененияКоличестваДнейВГод.ФактическаяДатаОкончанияРабочегоГода,
	|	ВТИзмененияКоличестваДнейВГод.ДатаНачалаРабочегоГода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаНачалаПериода,
	|	ДатаОкончанияПериода,
	|	КоличествоДнейОтпускаВГод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыВРабочемГоду.Сотрудник КАК Сотрудник,
	|	ПериодыВРабочемГоду.НомерСтроки КАК НомерСтроки,
	|	ПериодыВРабочемГоду.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ПериодыВРабочемГоду.КоличествоДнейОтпускаВГод,
	|	ПериодыВРабочемГоду.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ПериодыВРабочемГоду.ФактическаяДатаОкончанияРабочегоГода КАК ФактическаяДатаОкончанияРабочегоГода,
	|	РАЗНОСТЬДАТ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода, ДОБАВИТЬКДАТЕ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода, ДЕНЬ, ПериодыВРабочемГоду.КалендарныеДни), МЕСЯЦ) + ВЫБОР
	|		КОГДА ДЕНЬ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода) <= ДЕНЬ(ДОБАВИТЬКДАТЕ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода, ДЕНЬ, ПериодыВРабочемГоду.КалендарныеДни))
	|			ТОГДА ВЫБОР
	|					КОГДА ДЕНЬ(ДОБАВИТЬКДАТЕ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода, ДЕНЬ, ПериодыВРабочемГоду.КалендарныеДни)) - ДЕНЬ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода) > ДЕНЬ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода, ДЕНЬ, ПериодыВРабочемГоду.КалендарныеДни), МЕСЯЦ)) / 2 - 1
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДЕНЬ(КОНЕЦПЕРИОДА(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода, МЕСЯЦ)) - ДЕНЬ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода) + 1 + ДЕНЬ(ДОБАВИТЬКДАТЕ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода, ДЕНЬ, ПериодыВРабочемГоду.КалендарныеДни)) <= ДЕНЬ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ПериодыВРабочемГоду.ДатаНачалаРабочегоГода, ДЕНЬ, ПериодыВРабочемГоду.КалендарныеДни), МЕСЯЦ)) / 2
	|					ТОГДА -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоМесяцевВПериоде
	|ПОМЕСТИТЬ ВТ_ПериодыВЦелыхМесяцах
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТПериодыВРабочемГоду.Сотрудник КАК Сотрудник,
	|		ВТПериодыВРабочемГоду.НомерСтроки КАК НомерСтроки,
	|		ВТПериодыВРабочемГоду.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|		ВТПериодыВРабочемГоду.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод,
	|		ВТПериодыВРабочемГоду.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|		ВТПериодыВРабочемГоду.ФактическаяДатаОкончанияРабочегоГода КАК ФактическаяДатаОкончанияРабочегоГода,
	|		СУММА(РАЗНОСТЬДАТ(ВТПериодыВРабочемГоду.ДатаНачалаПериода, ВТПериодыВРабочемГоду.ДатаОкончанияПериода, ДЕНЬ)) КАК КалендарныеДни
	|	ИЗ
	|		ВТ_ПериодыВРабочемГоду КАК ВТПериодыВРабочемГоду
	|	ГДЕ
	|		(НЕ ВТПериодыВРабочемГоду.КоличествоДнейОтпускаВГод = 0)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТПериодыВРабочемГоду.Сотрудник,
	|		ВТПериодыВРабочемГоду.НомерСтроки,
	|		ВТПериодыВРабочемГоду.ВидЕжегодногоОтпуска,
	|		ВТПериодыВРабочемГоду.КоличествоДнейОтпускаВГод,
	|		ВТПериодыВРабочемГоду.ДатаНачалаРабочегоГода,
	|		ВТПериодыВРабочемГоду.ФактическаяДатаОкончанияРабочегоГода) КАК ПериодыВРабочемГоду
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыВЦелыхМесяцах.Сотрудник КАК Сотрудник,
	|	ПериодыВЦелыхМесяцах.НомерСтроки КАК НомерСтроки,
	|	ПериодыВЦелыхМесяцах.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	СУММА(ВЫБОР
	|			КОГДА ПериодыВЦелыхМесяцах.КоличествоМесяцевВПериоде >= 12
	|				ТОГДА ПериодыВЦелыхМесяцах.КоличествоДнейОтпускаВГод
	|			ИНАЧЕ ПериодыВЦелыхМесяцах.КоличествоДнейОтпускаВГод / 12 * ПериодыВЦелыхМесяцах.КоличествоМесяцевВПериоде
	|		КОНЕЦ) КАК КоличествоДнейОтпускаВПериоде,
	|	ПериодыВЦелыхМесяцах.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ПериодыВЦелыхМесяцах.ФактическаяДатаОкончанияРабочегоГода КАК ФактическаяДатаОкончанияРабочегоГода
	|ПОМЕСТИТЬ ВТ_ИзмененияКоличестваДнейВПериоде
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТПериодыВЦелыхМесяцах.Сотрудник КАК Сотрудник,
	|		ВТПериодыВЦелыхМесяцах.НомерСтроки КАК НомерСтроки,
	|		ВТПериодыВЦелыхМесяцах.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|		ВТПериодыВЦелыхМесяцах.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод,
	|		СУММА(ВТПериодыВЦелыхМесяцах.КоличествоМесяцевВПериоде) КАК КоличествоМесяцевВПериоде,
	|		ВТПериодыВЦелыхМесяцах.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|		ВТПериодыВЦелыхМесяцах.ФактическаяДатаОкончанияРабочегоГода КАК ФактическаяДатаОкончанияРабочегоГода
	|	ИЗ
	|		ВТ_ПериодыВЦелыхМесяцах КАК ВТПериодыВЦелыхМесяцах
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТПериодыВЦелыхМесяцах.Сотрудник,
	|		ВТПериодыВЦелыхМесяцах.НомерСтроки,
	|		ВТПериодыВЦелыхМесяцах.ВидЕжегодногоОтпуска,
	|		ВТПериодыВЦелыхМесяцах.КоличествоДнейОтпускаВГод,
	|		ВТПериодыВЦелыхМесяцах.ДатаНачалаРабочегоГода,
	|		ВТПериодыВЦелыхМесяцах.ФактическаяДатаОкончанияРабочегоГода) КАК ПериодыВЦелыхМесяцах
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыВЦелыхМесяцах.Сотрудник,
	|	ПериодыВЦелыхМесяцах.НомерСтроки,
	|	ПериодыВЦелыхМесяцах.ВидЕжегодногоОтпуска,
	|	ПериодыВЦелыхМесяцах.ДатаНачалаРабочегоГода,
	|	ПериодыВЦелыхМесяцах.ФактическаяДатаОкончанияРабочегоГода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	НомерСтроки,
	|	ВидЕжегодногоОтпуска,
	|	ДатаНачалаРабочегоГода,
	|	ФактическаяДатаОкончанияРабочегоГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОстатки.Сотрудник КАК Сотрудник,
	|	ВТОстатки.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ВТОстатки.ДатаОкончанияРабочегоГода КАК ДатаОкончанияРабочегоГода,
	|	ВТОстатки.НомерСтроки КАК НомерСтроки,
	|	ВТОстатки.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВТОстатки.ДатаПриемаНаРаботу КАК ДатаПриемаНаРаботу,
	|	ВТОстатки.ДатаПолученияДанных КАК ДатаПолученияДанных,
	|	ВТОстатки.ДатаОстатков КАК ДатаОстатков,
	|	СУММА(ЕСТЬNULL(ФактическиеОтпуска.Количество, 0)) КАК ФактическийОтпуск,
	|	ВЫРАЗИТЬ(ВТИзмененияКоличестваДнейВПериоде.КоличествоДнейОтпускаВПериоде КАК ЧИСЛО(5, 2)) КАК КоличествоДнейОтпускаЗаРабочийГод,
	|	ОстаткиОтпусков.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Остатки КАК ВТОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОстаткиОтпусковОрганизаций КАК ОстаткиОтпусков
	|		ПО ВТОстатки.Ссылка = ОстаткиОтпусков.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОстаткиОтпусковОрганизаций.Остатки КАК ОстаткиОтпусковОстатки
	|		ПО ВТОстатки.Ссылка = ОстаткиОтпусковОстатки.Ссылка
	|			И ВТОстатки.ДатаНачалаРабочегоГода = ОстаткиОтпусковОстатки.ДатаНачалаРабочегоГода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпускаОрганизаций КАК ФактическиеОтпуска
	|		ПО ВТОстатки.Сотрудник = ФактическиеОтпуска.Сотрудник
	|			И ВТОстатки.ВидЕжегодногоОтпуска = ФактическиеОтпуска.ВидЕжегодногоОтпуска
	|			И (ВЫБОР
	|				КОГДА ФактическиеОтпуска.Компенсация
	|					ТОГДА ВЫБОР
	|							КОГДА ВТОстатки.ДатаОкончанияРабочегоГода <= ВТОстатки.ДатаПолученияДанных
	|								ТОГДА ФактическиеОтпуска.Период МЕЖДУ ВТОстатки.ДатаНачалаРабочегоГода И ВТОстатки.ДатаОкончанияРабочегоГода
	|							ИНАЧЕ ФактическиеОтпуска.Период МЕЖДУ ВТОстатки.ДатаНачалаРабочегоГода И ВТОстатки.ДатаПолученияДанных
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТОстатки.ДатаОкончанияРабочегоГода <= ВТОстатки.ДатаПолученияДанных
	|							ТОГДА ФактическиеОтпуска.ДатаОкончания МЕЖДУ ВТОстатки.ДатаНачалаРабочегоГода И ВТОстатки.ДатаОкончанияРабочегоГода
	|						ИНАЧЕ ФактическиеОтпуска.ДатаОкончания МЕЖДУ ВТОстатки.ДатаНачалаРабочегоГода И ДОБАВИТЬКДАТЕ(ВТОстатки.ДатаПолученияДанных, ДЕНЬ, -1)
	|					КОНЕЦ
	|			КОНЕЦ)
	|			И ((НЕ ФактическиеОтпуска.Регистратор В (&МассивДокументов)))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИзмененияКоличестваДнейВПериоде КАК ВТИзмененияКоличестваДнейВПериоде
	|		ПО ВТОстатки.Сотрудник = ВТИзмененияКоличестваДнейВПериоде.Сотрудник
	|			И ВТОстатки.НомерСтроки = ВТИзмененияКоличестваДнейВПериоде.НомерСтроки
	|			И ВТОстатки.ВидЕжегодногоОтпуска = ВТИзмененияКоличестваДнейВПериоде.ВидЕжегодногоОтпуска
	|			И ВТОстатки.ДатаНачалаРабочегоГода = ВТИзмененияКоличестваДнейВПериоде.ДатаНачалаРабочегоГода
	|			И ВТОстатки.ФактическаяДатаОкончанияРабочегоГода = ВТИзмененияКоличестваДнейВПериоде.ФактическаяДатаОкончанияРабочегоГода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТОстатки.Сотрудник,
	|	ВТОстатки.ДатаНачалаРабочегоГода,
	|	ВТОстатки.ДатаОкончанияРабочегоГода,
	|	ВТОстатки.НомерСтроки,
	|	ВТОстатки.ВидЕжегодногоОтпуска,
	|	ВТОстатки.ДатаПриемаНаРаботу,
	|	ВТОстатки.ДатаПолученияДанных,
	|	ВТОстатки.ДатаОстатков,
	|	ОстаткиОтпусков.Ссылка,
	|	ВЫРАЗИТЬ(ВТИзмененияКоличестваДнейВПериоде.КоличествоДнейОтпускаВПериоде КАК ЧИСЛО(5, 2))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ВидЕжегодногоОтпуска,
	|	ДатаНачалаРабочегоГода";
	
	Выборка =  Запрос.Выполнить();
	Возврат Выборка.Выбрать();
КонецФункции // ПолучитьДополнениеОстатковОрганизаций()

// Функция возвращает остаток отпусков
// Функция также сообщает, являются ли хранимые в системе остатки актуальными,
// то есть введены остатки по всем рабочим годам до даты, на которую получаются остатки
//
Функция ПодготовитьДанныеПоРегламентированнымОтпускам(
	ТаблицаПериодов,					// Таблица периодов, для которой рассчитываем данные по отпускам
	Регистратор = Неопределено,			// Регистратор, которым списывается отпуск
	ИспользоватьОстатки = Истина,		// Ложь только в случае, если необходимо пересчитать остатки из формы элемента справочника остатков
	ВключатьТекущийРабочийГод = Истина	// Значение Истина должно быть установлено всегда, когда передается регистратор
	) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц	= Новый МенеджерВременныхТаблиц;
	
	// Подготовим временную таблицу со списком периодов
	ПодготовитьТаблицуПериодовОрганизаций(Запрос, ТаблицаПериодов);
	
	// Подготовим временную таблицу с актуальными остатками
	ПроцедурыУправленияПерсоналом.ПодготовитьТаблицуАктуальныхОстатковОрганизаций(Запрос, ИспользоватьОстатки);
	
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("Ссылка",								Новый ОписаниеТипов("СправочникСсылка.ОстаткиОтпусковОрганизаций"));
	ТаблицаОстатков.Колонки.Добавить("Сотрудник",							Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТаблицаОстатков.Колонки.Добавить("НомерСтроки",							Новый ОписаниеТипов("Число"));
	ТаблицаОстатков.Колонки.Добавить("Количество",							Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(7, 3)));
	ТаблицаОстатков.Колонки.Добавить("ДатаНачалаРабочегоГода",				Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаОкончанияРабочегоГода",			Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("НеАктуальный",						Новый ОписаниеТипов("Булево"));
	ТаблицаОстатков.Колонки.Добавить("ДатаПриемаНаРаботу",					Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаПолученияДанных",					Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаОстатков",						Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ВидЕжегодногоОтпуска",				Новый ОписаниеТипов("СправочникСсылка.ВидыЕжегодныхОтпусков"));
	
	// Получим текущие наиболее актуальные остатки отпусков
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиОтпусков.*
	|ИЗ
	|	ВТАктуальныеОстатки КАК ОстаткиОтпусков
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ВидЕжегодногоОтпуска,
	|	ДатаНачалаРабочегоГода";
	
	ТекущиеОстатки = Запрос.Выполнить().Выгрузить();
	
	// Теперь дополним существующие в системе остатки
	// Остатки будут дополнены по тем рабочим годам, которые в остатках не значатся
	// Кроме того, если будет включен текущий рабочий год, запрос ВСЕГДА вернет запись
	// за текущий рабочий год. Это позволит посчитать текущий остаток с учетом уже отгуленных
	Выборка = ПолучитьДополнениеОстатковОрганизаций(Запрос, Регистратор, ВключатьТекущийРабочийГод);
	
	ОстаткиТекущейСтроки = ТекущиеОстатки.СкопироватьКолонки();
	
	// Добавим свою колонку количество с нужным количеством знаков после запятой
	ОстаткиТекущейСтроки.Колонки.Удалить(ОстаткиТекущейСтроки.Колонки.Индекс(ОстаткиТекущейСтроки.Колонки["Количество"]));
	ОстаткиТекущейСтроки.Колонки.Добавить("Количество",	Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(7, 3)));
	
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		Пока Выборка.СледующийПоЗначениюПоля("ВидЕжегодногоОтпуска") Цикл
			
			НайденныеОстатки = ТекущиеОстатки.НайтиСтроки(Новый Структура("НомерСтроки, ВидЕжегодногоОтпуска", Выборка.НомерСтроки, Выборка.ВидЕжегодногоОтпуска));
			
			ОстаткиТекущейСтроки.Очистить();
			Для Каждого Остаток Из НайденныеОстатки Цикл
				ЗаполнитьЗначенияСвойств(ОстаткиТекущейСтроки.Добавить(), Остаток);
			КонецЦикла;
			
			Пока Выборка.Следующий() Цикл
				ФактическийОтпускДляСписания = Выборка.ФактическийОтпуск;
				
				ТекОстатки = ОстаткиТекущейСтроки.Скопировать();
				
				ОстаткиТекущейСтроки.Очистить();
				
				Для Каждого СтрокаОстатков Из ТекОстатки Цикл
					Если СтрокаОстатков.Количество < 0 Тогда
						ФактическийОтпускДляСписания = ФактическийОтпускДляСписания - СтрокаОстатков.Количество;
						Продолжить;
					КонецЕсли;
					
					Если (СтрокаОстатков.Количество - ФактическийОтпускДляСписания) > 0 Тогда
						Строка = ОстаткиТекущейСтроки.Добавить();
						ЗаполнитьЗначенияСвойств(Строка, СтрокаОстатков);
						
						Строка.Количество = Строка.Количество - Мин(ФактическийОтпускДляСписания, Строка.Количество);
					КонецЕсли;
					
					Если ФактическийОтпускДляСписания <> 0 Тогда
						ФактическийОтпускДляСписания = Макс(0, ФактическийОтпускДляСписания - СтрокаОстатков.Количество);
					КонецЕсли;
				КонецЦикла;
				
				Строка = ОстаткиТекущейСтроки.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, Выборка);
				Строка.Количество	= Выборка.КоличествоДнейОтпускаЗаРабочийГод - ФактическийОтпускДляСписания;
			КонецЦикла;
			
			// Из найденных остатков удалим остатки по виду ежегодного отпуска из выборки
			Для Каждого Остаток Из НайденныеОстатки Цикл
				ТекущиеОстатки.Удалить(Остаток);
			КонецЦикла;
			
			Для Каждого СтрокаОстатков Из ОстаткиТекущейСтроки Цикл
				Строка = ТаблицаОстатков.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, Выборка);
				ЗаполнитьЗначенияСвойств(Строка, СтрокаОстатков, , "НомерСтроки, Ссылка, Сотрудник");
				Строка.НеАктуальный	= Истина;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ОстаткиПоСотруднику Из ТекущиеОстатки Цикл
		// остатки по каждому виду ежегодного отпуска добавляем только в том случае, если они есть в таблице периодов
		НайденныеПериоды = ТаблицаПериодов.НайтиСтроки(Новый Структура("НомерСтроки, ВидЕжегодногоОтпуска",	ОстаткиПоСотруднику.НомерСтроки, ОстаткиПоСотруднику.ВидЕжегодногоОтпуска));
		Если НайденныеПериоды.Количество() > 0 Тогда
			Строка = ТаблицаОстатков.Добавить();
			Строка.НеАктуальный	= Ложь;
			ЗаполнитьЗначенияСвойств(Строка, ОстаткиПоСотруднику);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаОстатков",	ТаблицаОстатков);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ссылка,
	|	Сотрудник,
	|	НомерСтроки,
	|	ДатаНачалаРабочегоГода,
	|	ДатаОкончанияРабочегоГода,
	|	НеАктуальный,
	|	ДатаПриемаНаРаботу,
	|	ДатаПолученияДанных,
	|	ДатаОстатков,
	|	ВидЕжегодногоОтпуска,
	|	ВЫРАЗИТЬ(Количество КАК ЧИСЛО(5, 2)) КАК Количество
	|ПОМЕСТИТЬ ВТПоследнийРабочийГод
	|ИЗ
	|	&ТаблицаОстатков КАК ПоследнийРабочийГод
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	Сотрудник,
	|	ВидЕжегодногоОтпуска";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоследнийРабочийГод.*,
	|	ЕСТЬNULL(ДанныеФактическогоОтпуска.ДнейОтпуска, 0) КАК ДнейОтпуска,
	|	ДанныеФактическогоОтпуска.ДатаНачала,
	|	ДанныеФактическогоОтпуска.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ДанныеФактическогоОтпуска.ДатаНачала > ПоследнийРабочийГод.ДатаОкончанияРабочегоГода
	|			ТОГДА ПоследнийРабочийГод.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоДнейОтпускаБезТекущегоГода,
	|	0 КАК ОтпускВСчетЕжегодного,
	|	0 КАК ОтпускВСчетЕжегодногоБезТекущегоГода,
	|	0 КАК ОтпускАвансом,
	|	ДАТАВРЕМЯ(1,1,1) КАК МаксимальнаяДатаНачалаРабочегоГода
	|ИЗ
	|	ВТПоследнийРабочийГод КАК ПоследнийРабочийГод
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаПериодов.НомерСтроки,
	|			ТаблицаПериодов.ВидЕжегодногоОтпуска,
	|			ТаблицаПериодов.Сотрудник,
	|			СУММА(ВЫБОР
	|				КОГДА ТаблицаПериодов.ВидЕжегодногоОтпуска.СпособРасчетаОстаткаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоРабочимДням)
	|					ТОГДА ЕСТЬNULL(РегламентированныйПроизводственныйКалендарь.Шестидневка, 0)
	|				ИНАЧЕ ЕСТЬNULL(РегламентированныйПроизводственныйКалендарь.КалендарныеДни, 0)
	|			КОНЕЦ) КАК ДнейОтпуска,
	|			ТаблицаПериодов.ДатаНачала,
	|			ТаблицаПериодов.ДатаОкончания
	|		ИЗ
	|			ВТТаблицаПериодов КАК ТаблицаПериодов
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|				ПО РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ТаблицаПериодов.ДатаНачала И ТаблицаПериодов.ДатаОкончания
	|
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПериодов.НомерСтроки,
	|		ТаблицаПериодов.ВидЕжегодногоОтпуска,
	|		ТаблицаПериодов.Сотрудник,
	|		ТаблицаПериодов.ДатаНачала,
	|		ТаблицаПериодов.ДатаОкончания) КАК ДанныеФактическогоОтпуска
	|	ПО ПоследнийРабочийГод.НомерСтроки = ДанныеФактическогоОтпуска.НомерСтроки
	|		И ПоследнийРабочийГод.Сотрудник = ДанныеФактическогоОтпуска.Сотрудник
	|		И ПоследнийРабочийГод.ВидЕжегодногоОтпуска = ДанныеФактическогоОтпуска.ВидЕжегодногоОтпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоследнийРабочийГод.НомерСтроки,
	|	ПоследнийРабочийГод.ВидЕжегодногоОтпуска.Код,
	|	ДатаНачалаРабочегоГода
	|
	|ИТОГИ
	|	СУММА(ПоследнийРабочийГод.Количество),
	|	СУММА(КоличествоДнейОтпускаБезТекущегоГода),
	|	МАКСИМУМ(ДнейОтпуска),
	|	ВЫБОР
	|		КОГДА СУММА(ПоследнийРабочийГод.Количество) <= 0 ТОГДА 0
	|		КОГДА МАКСИМУМ(ДнейОтпуска) < СУММА(ПоследнийРабочийГод.Количество) ТОГДА МАКСИМУМ(ДнейОтпуска)
	|		ИНАЧЕ СУММА(ПоследнийРабочийГод.Количество) КОНЕЦ КАК ОтпускВСчетЕжегодного,
	|	ВЫБОР
	|		КОГДА СУММА(КоличествоДнейОтпускаБезТекущегоГода) <= 0 ТОГДА 0
	|		КОГДА МАКСИМУМ(ДнейОтпуска) < СУММА(КоличествоДнейОтпускаБезТекущегоГода) ТОГДА МАКСИМУМ(ДнейОтпуска)
	|		ИНАЧЕ СУММА(КоличествоДнейОтпускаБезТекущегоГода) КОНЕЦ КАК ОтпускВСчетЕжегодногоБезТекущегоГода,
	|	МАКСИМУМ(ДнейОтпуска)
	|		- ВЫБОР
	|			КОГДА СУММА(ПоследнийРабочийГод.Количество) <= 0 ТОГДА 0
	|			КОГДА МАКСИМУМ(ДнейОтпуска) < СУММА(ПоследнийРабочийГод.Количество) ТОГДА МАКСИМУМ(ДнейОтпуска)
	|			ИНАЧЕ СУММА(ПоследнийРабочийГод.Количество) КОНЕЦ КАК ОтпускАвансом,
	|	МАКСИМУМ(ПоследнийРабочийГод.Сотрудник),
	|	МАКСИМУМ(ДанныеФактическогоОтпуска.ДатаНачала),
	|	МАКСИМУМ(ДанныеФактическогоОтпуска.ДатаОкончания),
	|	МАКСИМУМ(ПоследнийРабочийГод.ДатаПриемаНаРаботу),
	|	МАКСИМУМ(ПоследнийРабочийГод.ДатаПолученияДанных),
	|	МИНИМУМ(ПоследнийРабочийГод.ДатаНачалаРабочегоГода),
	|	МАКСИМУМ(ПоследнийРабочийГод.ДатаНачалаРабочегоГода) КАК МаксимальнаяДатаНачалаРабочегоГода,
	|	МАКСИМУМ(ПоследнийРабочийГод.ДатаОкончанияРабочегоГода),
	|	МАКСИМУМ(ПоследнийРабочийГод.ВидЕжегодногоОтпуска), // имеет смысл только если для одного номера строки не указано несколько разных видов отпусков
	|	МАКСИМУМ(ПоследнийРабочийГод.НеАктуальный),
	|	МАКСИМУМ(ПоследнийРабочийГод.Ссылка),
	|	МАКСИМУМ(ПоследнийРабочийГод.ДатаОстатков)
	|ПО
	|	ПоследнийРабочийГод.НомерСтроки,
	|	ПоследнийРабочийГод.ВидЕжегодногоОтпуска";
	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции // ПодготовитьДанныеДляСписанияРегламентированногоОтпуска()

// Процедура формирует временную таблицу, которая содержит актуальные для таблицы периодов остатки
//
// Так как функция вспомогательная, вызываться будет из процедуры, в которой во временную таблицу
// уже помещена таблица периодов. Поэтому, в функцию передается запрос с этой таблицей
//
Процедура ПодготовитьТаблицуАктуальныхОстатковОрганизаций(Запрос, ИспользоватьОстатки) Экспорт
	
	Если ИспользоватьОстатки Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиОтпусковОстатки.Ссылка,
		|	ОстаткиПериод.Сотрудник,
		|	ОстаткиПериод.НомерСтроки,
		|	ОстаткиПериод.ДатаОстатков,
		|	ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска,
		|	ОстаткиОтпусковОстатки.Количество,
		|	ОстаткиОтпусковОстатки.ДатаНачалаРабочегоГода,
		|	ОстаткиОтпусковОстатки.ДатаОкончанияРабочегоГода
		|ПОМЕСТИТЬ ВТАктуальныеОстатки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОстаткиОтпусковОстатки.Сотрудник КАК Сотрудник,
		|		ОстаткиОтпусковОстатки.НомерСтроки КАК НомерСтроки,
		|		ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|		МАКСИМУМ(ОстаткиОтпусковОстатки.ДатаОстатков) КАК ДатаОстатков
		|	ИЗ
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ОстаткиОтпусковОстатки.Ссылка КАК Ссылка,
		|			ОстаткиОтпусковОстатки.Ссылка.Сотрудник КАК Сотрудник,
		|			ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|			ТаблицаПериодов.НомерСтроки КАК НомерСтроки,
		|			ОстаткиОтпусковОстатки.Ссылка.ДатаАктуальности КАК ДатаОстатков
		|		ИЗ
		|			Справочник.ОстаткиОтпусковОрганизаций.Остатки КАК ОстаткиОтпусковОстатки
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаПериодов КАК ТаблицаПериодов
		|				ПО ОстаткиОтпусковОстатки.ДатаОкончанияРабочегоГода <= ТаблицаПериодов.ДатаОкончания
		|					И ОстаткиОтпусковОстатки.Ссылка.Сотрудник = ТаблицаПериодов.Сотрудник
		|					И ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска = ТаблицаПериодов.ВидЕжегодногоОтпуска) КАК ОстаткиОтпусковОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ОстаткиОтпусковОстатки.Ссылка КАК Ссылка,
		|				ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|				ТаблицаПериодов.НомерСтроки КАК НомерСтроки
		|			ИЗ
		|				Справочник.ОстаткиОтпусковОрганизаций.Остатки КАК ОстаткиОтпусковОстатки
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаПериодов КАК ТаблицаПериодов
		|					ПО ОстаткиОтпусковОстатки.ДатаОкончанияРабочегоГода > ТаблицаПериодов.ДатаОкончания
		|						И ОстаткиОтпусковОстатки.Ссылка.Сотрудник = ТаблицаПериодов.Сотрудник
		|						И ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска = ТаблицаПериодов.ВидЕжегодногоОтпуска) КАК ОстаткиНеВключать
		|			ПО ОстаткиОтпусковОстатки.НомерСтроки = ОстаткиНеВключать.НомерСтроки
		|				И ОстаткиОтпусковОстатки.Ссылка = ОстаткиНеВключать.Ссылка
		|				И ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска = ОстаткиНеВключать.ВидЕжегодногоОтпуска
		|	ГДЕ
		|		ОстаткиНеВключать.Ссылка ЕСТЬ NULL 
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОстаткиОтпусковОстатки.Сотрудник,
		|		ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска,
		|		ОстаткиОтпусковОстатки.НомерСтроки) КАК ОстаткиПериод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОстаткиОтпусковОрганизаций.Остатки КАК ОстаткиОтпусковОстатки
		|		ПО ОстаткиПериод.ДатаОстатков = ОстаткиОтпусковОстатки.Ссылка.ДатаАктуальности
		|			И ОстаткиПериод.Сотрудник = ОстаткиОтпусковОстатки.Ссылка.Сотрудник
		|			И ОстаткиПериод.ВидЕжегодногоОтпуска = ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОстаткиПериод.Сотрудник,
		|	ОстаткиПериод.НомерСтроки";
		Запрос.Выполнить();
		
	Иначе
		ТаблицаОстатков = Новый ТаблицаЗначений;
		ТаблицаОстатков.Колонки.Добавить("Ссылка",						Новый ОписаниеТипов("СправочникСсылка.ОстаткиОтпусковОрганизаций"));
		ТаблицаОстатков.Колонки.Добавить("Сотрудник",					Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
		ТаблицаОстатков.Колонки.Добавить("НомерСтроки",					Новый ОписаниеТипов("Число"));
		ТаблицаОстатков.Колонки.Добавить("ДатаОстатков",				Новый ОписаниеТипов("Дата"));
		ТаблицаОстатков.Колонки.Добавить("ВидЕжегодногоОтпуска",		Новый ОписаниеТипов("СправочникСсылка.ВидыЕжегодныхОтпусков"));
		ТаблицаОстатков.Колонки.Добавить("Количество",					Новый ОписаниеТипов("Число"));
		ТаблицаОстатков.Колонки.Добавить("ДатаНачалаРабочегоГода",		Новый ОписаниеТипов("Дата"));
		ТаблицаОстатков.Колонки.Добавить("ДатаОкончанияРабочегоГода",	Новый ОписаниеТипов("Дата"));
		
		Запрос.УстановитьПараметр("Таблица",	ТаблицаОстатков);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиОтпусков.*
		|ПОМЕСТИТЬ ВТАктуальныеОстатки
		|ИЗ
		|	&Таблица КАК ОстаткиОтпусков
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	НомерСтроки";
		Запрос.Выполнить();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьОстаткиОтпусковОрганизаций() Экспорт
	
	РабДата = НачалоДня(ОбщегоНазначения.ПолучитьРабочуюДату());
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("РабДата",	РабДата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботникиСрезПоследних.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&РабДата, ) КАК РаботникиСрезПоследних
	|ГДЕ
	|	РаботникиСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НомерСтроки",				Новый ОписаниеТипов("Число"));
	ТаблицаПериодов.Колонки.Добавить("Сотрудник",				Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТаблицаПериодов.Колонки.Добавить("ВидЕжегодногоОтпуска",	Новый ОписаниеТипов("СправочникСсылка.ВидыЕжегодныхОтпусков"));
	ТаблицаПериодов.Колонки.Добавить("ДатаНачала",				Новый ОписаниеТипов("Дата"));
	ТаблицаПериодов.Колонки.Добавить("ДатаОкончания",			Новый ОписаниеТипов("Дата"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыЕжегодныхОтпусков.Ссылка
	|ИЗ
	|	Справочник.ВидыЕжегодныхОтпусков КАК ВидыЕжегодныхОтпусков
	|ГДЕ
	|	(НЕ ВидыЕжегодныхОтпусков.ПометкаУдаления)";
	ВыборкаПоВидамЕжегодныхОтпусков = Запрос.Выполнить().Выбрать();
	
	НомерСтроки = 1;
	Пока Выборка.Следующий() Цикл
		ВыборкаПоВидамЕжегодныхОтпусков.Сбросить();
		
		Пока ВыборкаПоВидамЕжегодныхОтпусков.Следующий() Цикл
			ТекущийПериод = ТаблицаПериодов.Добавить();
			ТекущийПериод.НомерСтроки			= НомерСтроки;
			ТекущийПериод.Сотрудник				= Выборка.Сотрудник;
			ТекущийПериод.ВидЕжегодногоОтпуска	= ВыборкаПоВидамЕжегодныхОтпусков.Ссылка;
			ТекущийПериод.ДатаНачала			= РабДата;
			ТекущийПериод.ДатаОкончания			= РабДата;
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Выборка = ПодготовитьДанныеПоРегламентированнымОтпускам(ТаблицаПериодов, , Истина, Ложь);
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.НеАктуальный Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ДатаОстатков >= РабДата Тогда
			ОстаткиОтпусковОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ОстаткиОтпусковОбъект.Остатки.Очистить();
		Иначе
			ОстаткиОтпусковОбъект = Справочники.ОстаткиОтпусковОрганизаций.СоздатьЭлемент();
			ОстаткиОтпусковОбъект.Сотрудник			= Выборка.Сотрудник;
			ОстаткиОтпусковОбъект.ДатаАктуальности	= РабДата;
		КонецЕсли;
		
		ВыборкаПоВидамОтпусков = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоВидамОтпусков.Следующий() Цикл
			ВыборкаПоГодам = ВыборкаПоВидамОтпусков.Выбрать();
			Пока ВыборкаПоГодам.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ОстаткиОтпусковОбъект.Остатки.Добавить(), ВыборкаПоГодам);
			КонецЦикла;
		КонецЦикла;
		
		ОстаткиОтпусковОбъект.Остатки.Сортировать("ВидЕжегодногоОтпуска, ДатаНачалаРабочегоГода");
		ОстаткиОтпусковОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьПериодРаботыДляОсновногоОтпуска(Ссылка, Сотрудник, ДатаНачала, ДатаОкончания) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.ВидЕжегодногоОтпуска
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни)
	|	И ОсновныеНачисленияОрганизаций.ВидЕжегодногоОтпуска <> ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВидЕжегодногоОтпуска = Выборка.ВидЕжегодногоОтпуска;
	Иначе
		Возврат Новый Структура("РабочийГодС","РабочийГодПо");
	КонецЕсли;
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НомерСтроки",				Новый ОписаниеТипов("Число"));
	ТаблицаПериодов.Колонки.Добавить("Сотрудник",				Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТаблицаПериодов.Колонки.Добавить("ВидЕжегодногоОтпуска",	Новый ОписаниеТипов("СправочникСсылка.ВидыЕжегодныхОтпусков"));
	ТаблицаПериодов.Колонки.Добавить("ДатаНачала",				Новый ОписаниеТипов("Дата"));
	ТаблицаПериодов.Колонки.Добавить("ДатаОкончания",			Новый ОписаниеТипов("Дата"));
	
	Строка = ТаблицаПериодов.Добавить();
	Строка.НомерСтроки			= 1;
	Строка.Сотрудник			= Сотрудник;
	Строка.ВидЕжегодногоОтпуска	= ВидЕжегодногоОтпуска;
	Строка.ДатаНачала			= ДатаНачала;
	Строка.ДатаОкончания		= ДатаОкончания;
	
	ВыборкаПоОтпускам = ПодготовитьДанныеПоРегламентированнымОтпускам(ТаблицаПериодов, Ссылка);
	
	СтруктураРабочийГод = Новый Структура("РабочийГодС, РабочийГодПо");
	
	Если ВыборкаПоОтпускам.Следующий() Тогда
		СтруктураРабочийГод.РабочийГодС	= ВыборкаПоОтпускам.ДатаНачалаРабочегоГода;
		СтруктураРабочийГод.РабочийГодПо= ВыборкаПоОтпускам.ДатаОкончанияРабочегоГода;
		
		ВыборкаПоВидамОтпусков = ВыборкаПоОтпускам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаПоВидамОтпусков.Следующий() Тогда
			
			ДнейОтпуска = ВыборкаПоВидамОтпусков.ДнейОтпуска;
			
			ВыборкаПоОстаткам = ВыборкаПоВидамОтпусков.Выбрать();
			Пока ВыборкаПоОстаткам.Следующий() Цикл
				ДнейОтпуска = ДнейОтпуска - ВыборкаПоОстаткам.Количество;
				
				Если ДнейОтпуска <= 0 Тогда
					СтруктураРабочийГод.РабочийГодПо= ВыборкаПоОстаткам.ДатаОкончанияРабочегоГода;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРабочийГод;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ШТАТНЫМ РАСПИСАНИЕМ

// Функция возвращаект сведения о надбавках позиции штатного расписания на выбранную дату
// для измерений Подразделение и Должность
//
//vvv
Функция СведенияОНадбавкахПозицииШтатногоРасписания(Период, Подразделение, Должность) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаАктуальности",	Период);
	Запрос.УстановитьПараметр("Подразделение",		Подразделение);
	Запрос.УстановитьПараметр("Должность",			Должность);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.ВидНадбавки КАК Надбавка,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель1,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель2,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель3,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель4,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель5,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель6,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта1,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта2,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта3,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта4,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта5,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта6
	|ИЗ
	|   РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(
	|			&ДатаАктуальности,
	|			ПодразделениеОрганизации = &Подразделение
	|				И Должность = &Должность) КАК НадбавкиПоШтатномуРасписаниюСрезПоследних";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СведенияОНадбавкахПозицииШтатногоРасписания()




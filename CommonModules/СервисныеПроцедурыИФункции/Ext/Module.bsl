//**********************************************************************************************
Функция ОсновноеНачислениеЧасовойТариф(ДатаАктуальности,Сотрудник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности",ДатаАктуальности);
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
		
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ОсновноеНачисление.ВидРасчета,
	|	ВЫБОР
	|		КОГДА  ОсновноеНачисление.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке)) 
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОсновноеНачислениеЧасовойТариф
    |ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК ОсновноеНачисление
	|ГДЕ
	|	ОсновноеНачисление.ВидРасчетаИзмерение.Код ЕСТЬ NULL 
	|	И ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности";
	//|	И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ОсновноеНачислениеЧасовойТариф;
	КонецЕсли;
	
	Возврат ЛОЖЬ;
	
КонецФункции
//**********************************************************************************************
Функция НормаЧасов(Период,Сотрудник) Экспорт
	
	Запрос=Новый Запрос;
	
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("ДатаАктуальности",КонецМесяца(Период));
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	РаботникиОрганизацийСрезПоследних.ГрафикРаботы,
	             |	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК НормаЧасов
	             |ИЗ
	             |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	             |		ПО РаботникиОрганизацийСрезПоследних.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	             |		И ГрафикиРаботыПоВидамВремени.Месяц=&Период
				 |		И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени В (Значение(Перечисление.ВидыУчетаВремени.ПоЧасам))
	             |СГРУППИРОВАТЬ ПО
	             |	РаботникиОрганизацийСрезПоследних.ГрафикРаботы";
	
	
    Выборка=Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НормаЧасов;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции
//**********************************************************************************************
Функция ПолучитьКоэффициентСтажа(Период,Сотрудник) Экспорт
	
	Запрос=Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	Запрос.УстановитьПараметр("ВыслугаЛет",Справочники.ВидыСтажа.СтажНаНадбавкуЗаВыслугуЛет);
	Запрос.УстановитьПараметр("КоэффициентВыслуги",Справочники.КоэффициентыСтажа.НайтиПоНаименованию("Выслуга лет"));
	Запрос.УстановитьПараметр("Период",Период);
	
	Запрос.Текст=
	
	"ВЫБРАТЬ
	|	Стажи.ДатаОтсчета,
	|	ШкалаКоэффициентовСтажа.Величина КАК Коэффициент
	|ИЗ
	|	Справочник.ФизическиеЛица.Стажи КАК Стажи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО Стажи.Ссылка = СотрудникиОрганизаций.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаКоэффициентовСтажа КАК ШкалаКоэффициентовСтажа
	|		ПО ШкалаКоэффициентовСтажа.КоэффициентСтажа = &КоэффициентВыслуги
	//|        И (Стажи.РазмерМесяцев + РАЗНОСТЬДАТ(Стажи.ДатаОтсчета, ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, Стажи.РазмерДней), МЕСЯЦ) - ВЫБОР
	//|				КОГДА ДЕНЬ(Стажи.ДатаОтсчета) > ДЕНЬ(ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, Стажи.РазмерДней))
	//|					ТОГДА 1
	//|				ИНАЧЕ 0
	//|			КОНЕЦ >= ШкалаКоэффициентовСтажа.СтажС)
	|        И (Стажи.РазмерМесяцев + РАЗНОСТЬДАТ(Стажи.ДатаОтсчета, ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, Стажи.РазмерДней), МЕСЯЦ) - 1>= ШкалаКоэффициентовСтажа.СтажС)
	|			И (Стажи.РазмерМесяцев + РАЗНОСТЬДАТ(Стажи.ДатаОтсчета, ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, Стажи.РазмерДней), МЕСЯЦ) - ВЫБОР
	|				КОГДА ДЕНЬ(Стажи.ДатаОтсчета) > ДЕНЬ(ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, Стажи.РазмерДней))
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ < ВЫБОР
	|				КОГДА ШкалаКоэффициентовСтажа.СтажПо = 0
	|					ТОГДА 999999
	|				ИНАЧЕ ШкалаКоэффициентовСтажа.СтажПо
	|			КОНЕЦ)
	|ГДЕ
	|	Стажи.ВидСтажа = &ВыслугаЛет
	|	И СотрудникиОрганизаций.Ссылка = &Сотрудник";
	
	Выборка=Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Коэффициент;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции
//**********************************************************************************************
Функция МесячнаяТарифнаяСтавкаРаботникаОрг(Знач Сотрудник, Знач ДатаАктуальности, Знач ДатаВалютногоУчета, ВалютаРегламентированногоУчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник",			Сотрудник);
	Запрос.УстановитьПараметр("ДатаАктуальности",	ДатаАктуальности);
	Запрос.УстановитьПараметр("ПериодРегистрации",	НачалоМесяца(ДатаАктуальности));
	Запрос.УстановитьПараметр("ДатаВалютногоУчета",	НачалоМесяца(ДатаВалютногоУчета));
	Запрос.УстановитьПараметр("РегламентВалюта",	ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Год",				Год(ДатаАктуальности));
	Запрос.УстановитьПараметр("СреднеМесячноеКоличесвтоЧасов",	Перечисления.ВидыПараметровДляРасчетаЗарплаты.СреднемесячнаяНормаЧасов);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДанныеРаботника.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СделкаПоЧасовойТарифнойСтавке))
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую, ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)) = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)
	|							ТОГДА  ДанныеРаботника.ОкладТариф*ЕСТЬNULL(РазмерыПараметровДляРасчетаРБ.Размер,1)
	|						КОГДА ВЫБОР
	|								КОГДА СводныеИндивидуальныеГрафики.Часов ЕСТЬ НЕ NULL 
	|									ТОГДА СводныеИндивидуальныеГрафики.Часов
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма), 0)
	|							КОНЕЦ = 0
	|							ТОГДА 0
	|						ИНАЧЕ ДанныеРаботника.ОкладТариф * ВЫБОР
	|								КОГДА СводныеИндивидуальныеГрафики.Часов ЕСТЬ НЕ NULL 
	|									ТОГДА СводныеИндивидуальныеГрафики.Часов
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма), 0)
	|							КОНЕЦ
	|					КОНЕЦ КАК ЧИСЛО(15, 3))
	|		КОГДА ДанныеРаботника.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням))
	|			ТОГДА ДанныеРаботника.ОкладТариф
	|		КОГДА ДанныеРаботника.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА ДанныеРаботника.ДлительностьРабочейНедели = 0
	|							ТОГДА 0
	|						ИНАЧЕ ДанныеРаботника.ОкладТариф * ДанныеРаботника.ДлительностьРабочейНедели * ВЫБОР
	|								КОГДА ДанныеРаботника.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Шестидневка)
	|									ТОГДА 6
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					КОНЕЦ КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Размер
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник,
	|		ВЫБОР
	|			КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|					И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВЫБОР
	|						КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|							ТОГДА РазмерТарифныхСтавок.Размер
	|						ИНАЧЕ ОсновноеНачисление.Показатель1Завершения
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|						ТОГДА РазмерТарифныхСтавок.Размер
	|					ИНАЧЕ ОсновноеНачисление.Показатель1
	|				КОНЕЦ
	|		КОНЕЦ * ВЫБОР
	|			КОГДА ВЫБОР
	|					КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|							И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА ВЫБОР
	|								КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|									ТОГДА РазмерТарифныхСтавок.Валюта
	|								ИНАЧЕ ОсновноеНачисление.Валюта1Завершения
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|								ТОГДА РазмерТарифныхСтавок.Валюта
	|							ИНАЧЕ ОсновноеНачисление.Валюта1
	|						КОНЕЦ
	|				КОНЕЦ В (&РегламентВалюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|				ТОГДА 1
	|			ИНАЧЕ ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
	|		КОНЕЦ КАК ОкладТариф,
	|		ВЫБОР
	|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|		КОНЕЦ КАК ГрафикРаботы,
	|		ВЫБОР
	|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ДлительностьРабочейНедели
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ДлительностьРабочейНедели
	|		КОНЕЦ КАК ДлительностьРабочейНедели,
	|		ВЫБОР
	|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ВидГрафика
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ВидГрафика
	|		КОНЕЦ КАК ВидГрафика,
	|		ВЫБОР
	|			КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|					И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ОсновноеНачисление.ВидРасчетаЗавершения.СпособРасчета
	|			ИНАЧЕ ОсновноеНачисление.ВидРасчета.СпособРасчета
	|		КОНЕЦ КАК СпособРасчета
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|					&ДатаАктуальности,
	|					Сотрудник = &Сотрудник
	|						И ВидРасчетаИзмерение.Код ЕСТЬ NULL ) КАК ОсновноеНачисление
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ДатаВалютногоУчета, ) КАК РазмерТарифныхСтавок
	|				ПО (ВЫБОР
	|						КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|								И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА ОсновноеНачисление.ТарифныйРазряд1Завершения
	|						ИНАЧЕ ОсновноеНачисление.ТарифныйРазряд1
	|					КОНЕЦ = РазмерТарифныхСтавок.ТарифныйРазряд)
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|				ПО (Валюты.Валюта = ВЫБОР
	|						КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|								И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА ВЫБОР
	|									КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|										ТОГДА РазмерТарифныхСтавок.Валюта
	|									ИНАЧЕ ОсновноеНачисление.Валюта1Завершения
	|								КОНЕЦ
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|									ТОГДА РазмерТарифныхСтавок.Валюта
	|								ИНАЧЕ ОсновноеНачисление.Валюта1
	|							КОНЕЦ
	|					КОНЕЦ)
	|					И (Валюты.Период = &ДатаВалютногоУчета)
	|			ПО (ИСТИНА)) КАК ДанныеРаботника
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты КАК ВариантыВстроенныхАлгоритмовРасчетаЗарплаты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ВЫБОР
	|					КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЧислоРабочихДней,
	|			СУММА(ВЫБОР
	|					КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЧислоПредпраздничныхДней
	|		ИЗ
	|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ГДЕ
	|			РегламентированныйПроизводственныйКалендарь.Год = &Год) КАК ДанныеПроизводственногоКалендаря
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО ДанныеРаботника.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И (СводныеИндивидуальныеГрафики.Месяц = &ПериодРегистрации)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК ЧасовЗаМесяц
	|		ИЗ
	|			РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ГДЕ
	|			ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &Сотрудник
	|			И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|			И ГрафикиРаботыПоВидамВремени.Месяц = &ПериодРегистрации
	|			И ГрафикиРаботыПоВидамВремени.План) КАК НормаВремениПоЕжедневнымИндивидуальнымГрафикам
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ДанныеРаботника.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = &ПериодРегистрации)
	|			И (ГрафикиРаботыПоВидамВремени.План)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыПараметровДляРасчетаРБ.СрезПоследних(&ДатаАктуальности,ВидПараметра = &СреднеМесячноеКоличесвтоЧасов)  КАК РазмерыПараметровДляРасчетаРБ
	|		ПО (ИСТИНА)
    |
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРаботника.ОкладТариф,
	|	ДанныеРаботника.ГрафикРаботы,
	|	ДанныеРаботника.ДлительностьРабочейНедели,
	|	ДанныеРаботника.ВидГрафика,
	|	ДанныеРаботника.СпособРасчета,
	|	ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую,
	|	ДанныеПроизводственногоКалендаря.ЧислоРабочихДней,
	|	ДанныеПроизводственногоКалендаря.ЧислоПредпраздничныхДней,
	|	НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц,
	|	РазмерыПараметровДляРасчетаРБ.Размер,
    |	СводныеИндивидуальныеГрафики.Часов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат ОбщегоНазначения.ОкруглитьПоВалюте(Выборка.Размер,Константы.ВалютаРегламентированногоУчета.Получить());
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ЧасоваяТарифнаяСтавкаРаботникаОрг()
//**********************************************************************************************
Функция ПолучитьОчереднойТабельныйНомер(Организация) Экспорт	
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	
	Запрос.Текст=
	
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Код КАК Код,
	|	1 КАК КодЧисло
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.ОбособленноеПодразделение = &Организация
	|	И СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)";
	
	Запрос.Текст=
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиОрганизаций.ТабельныйНомер КАК Код,
	|	1 КАК КодЧисло
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(, ) КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.ОбособленноеПодразделение = &Организация
	|	И СотрудникиОрганизаций.Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)";
	
	
	Запрос.Текст=
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиОрганизаций.ТабельныйНомер КАК Код,
	|	1 КАК КодЧисло
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(, ) КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.ОбособленноеПодразделение = &Организация
	|	И СотрудникиОрганизаций.Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Код,
	|	1
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Организация = &Организация";
	
	
	Выборка=Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из Выборка Цикл
		
		Стр.КодЧисло=Число(СокрЛП(Стр.Код));
		
	КонецЦикла;	
	
	Выборка.Сортировать("КодЧисло Убыв");
	
	Возврат(Формат(?(Выборка.Количество()>0,Выборка[0].КодЧисло+1,0000000001),"ЧГ="));
	
КонецФункции
//**********************************************************************************************
Процедура ОткрытьФормуРезерва(Знач Начисления,ИмяНачисления,Знач ДополнительныеНачисления,ИмяДополнительныеНачисления,ЭтотОбъект) Экспорт
	
	ФормаВводаРезерва=ПолучитьФорму("ОбщаяФорма.ФормаРезерва");	
	
	//основные начисления
	Нач=Начисления.Скопировать();
	
	Отб=Новый Структура("ИзРезерва",Ложь);
	
	МассивСтрок=Нач.НайтиСтроки(Отб);		
	ВремТЗ=Нач.Скопировать(МассивСтрок);
	Нач.Очистить();
	Нач=ВремТЗ.Скопировать();
	
	ФормаВводаРезерва.Начисления=Нач;
	
	Рез=Начисления.Скопировать();
	
	Отб=Новый Структура("ИзРезерва",Истина);
	
	МассивСтрок=Рез.НайтиСтроки(Отб);		
	ВремТЗ=Рез.Скопировать(МассивСтрок);
	Рез.Очистить();
	Рез=ВремТЗ.Скопировать();
	
	ФормаВводаРезерва.РезервНачислений=Рез;

	
	//дополнительные начисления
	Нач=ДополнительныеНачисления.Скопировать();
	
	Отб=Новый Структура("ИзРезерва",Ложь);
	
	МассивСтрок=Нач.НайтиСтроки(Отб);		
	ВремТЗ=Нач.Скопировать(МассивСтрок);
	Нач.Очистить();
	Нач=ВремТЗ.Скопировать();
	
	ФормаВводаРезерва.ДополнительныеНачисления=Нач;
	
	Рез=ДополнительныеНачисления.Скопировать();
	
	Отб=Новый Структура("ИзРезерва",Истина);
	
	МассивСтрок=Рез.НайтиСтроки(Отб);		
	ВремТЗ=Рез.Скопировать(МассивСтрок);
	Рез.Очистить();
	Рез=ВремТЗ.Скопировать();
	
	ФормаВводаРезерва.РезервДополнительныхНачислений=Рез;		
	
	ФормаВводаРезерва.ПериодРегистрации=ЭтотОбъект.ПериодРегистрации;
	ФормаВводаРезерва.Док=ЭтотОбъект;
	ФормаВводаРезерва.ИмяНачисления=ИмяНачисления;
	ФормаВводаРезерва.ИмяДополнительныеНачисления=ИмяДополнительныеНачисления;
	ФормаВводаРезерва.Открыть();
	
КонецПроцедуры
//**********************************************************************************************
Процедура ДобавитьСтрокуРезерва(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, НаборЗаписей) Экспорт
	
	Период=?(ТипЗнч(ВыборкаПоНачислениям.ВидРасчета)=Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"),НачалоМесяца(ВыборкаПоНачислениям.ПериодДействияНачало),НачалоМесяца(ВыборкаПоНачислениям.БазовыйПериодНачало)); 
	
	Если ВыборкаПоНачислениям.СуммаРезерва<>0 ТОгда
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период = ВыборкаПоШапкеДокумента.Дата;
		Движение.ВидДвижения		= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.Сотрудник							= ВыборкаПоНачислениям.Сотрудник;
		Движение.Организация 						= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ВидРасчета  						= ВыборкаПоНачислениям.ВидРасчета;
		Движение.ПериодРегистрации  				= Период;
		Движение.Резерв  							= ВыборкаПоНачислениям.Резерв;
		// Ресурсы
		
		Движение.СуммаРезерва			= ВыборкаПоНачислениям.СуммаРезерва;
	ИначеЕсли ВыборкаПоНачислениям.ИзРезерва и ВыборкаПоНачислениям.Результат<>0 ТОгда
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период = ВыборкаПоШапкеДокумента.Дата;
		Движение.ВидДвижения		= ВидДвиженияНакопления.Расход;
		
		// Измерения
		Движение.Сотрудник							= ВыборкаПоНачислениям.Сотрудник;
		Движение.Организация 						= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ВидРасчета  						= ВыборкаПоНачислениям.ВидРасчета;
		Движение.ПериодРегистрации  				= Период;
		Движение.Резерв  							= ВыборкаПоНачислениям.Резерв;
		// Ресурсы
		
		Движение.СуммаРезерва			= ВыборкаПоНачислениям.Результат;	
	КонецЕсли;
	
КонецПроцедуры
//**********************************************************************************************
Функция ПолучитьНомерПачки(ВидДокумента) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НомерПачки
	|ИЗ
	|	Документ."+ВидДокумента+
	"
	|ГДЕ НомерПачки<>""""
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Выборка=Запрос.Выполнить().Выбрать();
	НомерПачки="";
	
	Если Выборка.Следующий() Тогда
		НомерПачки=Строка(Формат(Число(Выборка.НомерПачки)+1,"ЧГ="""));
	КонецЕсли;
	
	Возврат НомерПачки;
	
КонецФункции
//**********************************************************************************************
Функция ФизЛицоСуществует(Наименование,ДатаРождения,ФизЛицо) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст=
	
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизЛицо
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Наименование = &Наименование
	|	И ФизическиеЛица.ДатаРождения = &ДатаРождения";
	
	Запрос.УстановитьПараметр("Наименование",Наименование);
	Запрос.УстановитьПараметр("ДатаРождения",ДатаРождения);
	
	Выборка=Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() ТОгда		
		ФизЛицо=Выборка.ФизЛицо;
		Возврат Истина;
	Иначе
		Возврат Ложь;	
	КонецЕсли;	
	
	
КонецФункции
//**********************************************************************************************
Функция ДоступныВсеОрганизации() Экспорт
	
	Возврат (РольДоступна("ПолныеПрава") или РольДоступна("РасчетчикРегламентированнойЗарплатыБезОграниченияПрав") или РольДоступна("ЭкономистРегламентированнойЗарплатыБезОграниченияПрав")
	или РольДоступна("КадровикРегламентированныхДанныхБезОграниченияПрав"));
	
КонецФункции

Процедура УстановитьЗначениеОтбора(ЭлементыОтбора,ЛевоеЗначение,ПравоеЗначение) Экспорт
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если Строка(ЭлементОтбора.ЛевоеЗначение)=ЛевоеЗначение Тогда
			ЭлементОтбора.ПравоеЗначение=ПравоеЗначение;
			ЭлементОтбора.Использование=Истина;
			Если ((ЛевоеЗначение="Организация") или (ЛевоеЗначение="ОбособленноеПодразделение")) и (Не ДоступныВсеОрганизации()) ТОгда
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;	
			КОнецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДополнитьСтрокуЛ(Стр,Чем,Длина) Экспорт
	
	Добавить=Длина-СтрДлина(Стр);
	Добавок="";
	
	Для Сч = 1 По Добавить  Цикл
		Добавок=Добавок+Чем;
	КонецЦикла;
	
	Возврат Добавок+Стр;
	
КонецФункции

Функция КоличествоДнейВПериоде(Дата1,Дата2) Экспорт
	
	Возврат (НачалоДня(Дата2)-НачалоДня(Дата1)) / (60*60*24) + 1;
	
КонецФункции

//vvv
// Функция возвращает слово из строки по его номеру
// Если не указан разделитель, то по умолчанию им считается пробел
Функция Token(ИсхСтр, Разделитель , Номер) Экспорт

	Если Не ЗначениеЗаполнено(Разделитель) = 1 Тогда
   		Разделитель = " ";
	КонецЕсли;
	
	Если Номер = 0 Тогда
   		Возврат "";
	КонецЕсли;

	ДлСтр = СтрДлина(ИсхСтр);
	// Создаем список с позициями разделителей 
	Разделители = Новый СписокЗначений;
	
	Разделители.Добавить(0);
	
	Для i = 1 To ДлСтр Цикл
		Символ = Сред(ИсхСтр, i, 1);
		Если Символ = Разделитель Тогда
	   		Разделители.Добавить(i);
		КонецЕсли;
	КонецЦикла;
	
	Разделители.Добавить(ДлСтр + 1);
	
	Если Разделители.Количество() + 2 < Номер Тогда
   		Возврат "";
	КонецЕсли;
	
	Слова = Новый СписокЗначений;
	
	Для i = 0 To Разделители.Количество() - 2 Цикл
		
		Начало = Разделители[i].Значение + 1;
		Конец  = Разделители[i + 1].Значение - Начало;
	
		Слова.Добавить(Сред(ИсхСтр,
	                       	Начало,
						   	Конец));
	КонецЦикла;
						
	Возврат Слова[Номер-1].Значение;

КонецФункции //Token()

// Заполняет реквизит "КраткийСоставДокумента" документа по его табличным частям.
//
// Параметры
//  ТЧДокумента					– табличная часть документа по которой происходит заполнение реквизита
//  ДополнительнаяТЧДокумента	- табличная часть документа, как правило это ТЧ с дополнительными начислениями
//
// Возвращаемое значение:
//   строка, значение реквизита "КраткийСоставДокумента".
//
Функция ЗаполнитьКраткийСоставДокумента(ТЧДокумента, ИмяРеквизита = "Сотрудник") Экспорт

	КраткийСоставДокумента = "";
	
	КоличествоТЧ = 1;
	КраткийСоставДокументаЗаполнен = Ложь;
	ОбработанныеСсылки = Новый Соответствие;
	Для каждого ТабличнаяЧастьДокумента Из ТЧДокумента Цикл
		
		Если НЕ КраткийСоставДокументаЗаполнен Тогда
			
			Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
				
				СсылкаДляФИО = СтрокаТЧ[ИмяРеквизита];
				
				Если ОбработанныеСсылки.Получить(СсылкаДляФИО) <> Истина Тогда
					
					ОбработанныеСсылки.Вставить(СсылкаДляФИО, Истина);
					
					ФИОФизЛица = ПроцедурыУправленияПерсоналом.ФамилияИнициалыФизЛица(СсылкаДляФИО);
					Если СтрДлина(КраткийСоставДокумента) < 100 Тогда
						КраткийСоставДокумента = КраткийСоставДокумента + ", " + ФИОФизЛица;
					Иначе
						
						Если КоличествоТЧ = 1 Тогда
							КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
						Иначе
							
							Если Лев(КраткийСоставДокумента,2) = ", " Тогда
								КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
							Иначе
								КраткийСоставДокумента = Лев(КраткийСоставДокумента,97) + "...";
							КонецЕсли;
							
						КонецЕсли; 
						
						КраткийСоставДокументаЗаполнен = Истина;
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			КоличествоТЧ = КоличествоТЧ + 1;
			
		КонецЕсли; 
		
		Если КраткийСоставДокументаЗаполнен Тогда
			Прервать
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если Лев(КраткийСоставДокумента,2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставДокумента);
		Если ДлинаСтроки < 100 Тогда
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3)
		Иначе
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат КраткийСоставДокумента;
	
КонецФункции // ЗаполнитьКраткийСоставДокумента()

Функция ПолучитьСписокВозможныхЗначенийДляСреднего(ВидРасчета) Экспорт
	
	Список=Новый СписокЗначений;
	
	Если ВидРасчета=ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск ТОгда
		
		Список.Добавить(Перечисления.УчетНачисленийВСреднемЗаработке.ОбщийЗаработок);
		Список.Добавить(Перечисления.УчетНачисленийВСреднемЗаработке.ПремияГодовая);
		
	ИначеЕсли ВидРасчета=ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ ТОгда
		
		Список.Добавить(Перечисления.УчетНачисленийВСреднемЗаработке.ОбщийЗаработок);
		Список.Добавить(Перечисления.УчетНачисленийВСреднемЗаработке.ПремияГодовая);
		Список.Добавить(Перечисления.УчетНачисленийВСреднемЗаработке.ПремияПропорциональноОтработанномуВремени);
		Список.Добавить(Перечисления.УчетНачисленийВСреднемЗаработке.ПремияФиксированнойСуммой);
		
	ИначеЕсли ВидРасчета=ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку ТОгда
		
		Список.Добавить(Перечисления.УчетНачисленийВСреднемЗаработке.ОбщийЗаработок);
		Список.Добавить(Перечисления.УчетНачисленийВСреднемЗаработке.ПремияГодовая);
		Список.Добавить(Перечисления.УчетНачисленийВСреднемЗаработке.ПремияПропорциональноОтработанномуВремени);
		Список.Добавить(Перечисления.УчетНачисленийВСреднемЗаработке.ПремияФиксированнойСуммой);
		
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Функция ИнициализацияУчетаСреднего(СписокВозможныхЗначений,ВидРасчетаСреднего, ВидРасчета) Экспорт
	
	
	ВидыУчета=Новый Соответствие;
	
	ВидыУчета.Вставить(Перечисления.УчетНачисленийВСреднемЗаработке.ОбщийЗаработок,ВидРасчетаСреднего);
	ВидыУчета.Вставить(Перечисления.УчетНачисленийВСреднемЗаработке.ПремияГодовая, ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии);
	ВидыУчета.Вставить(Перечисления.УчетНачисленийВСреднемЗаработке.ПремияПропорциональноОтработанномуВремени, ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
	ВидыУчета.Вставить(Перечисления.УчетНачисленийВСреднемЗаработке.ПремияФиксированнойСуммой, ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	
	Для каждого Стр Из СписокВозможныхЗначений Цикл
		
		Если ВидыУчета.Получить(Стр.Значение).БазовыеВидыРасчета.Найти(ВидРасчета)<>Неопределено Тогда	
			
			Возврат Стр.Значение;
			
		КонецЕсли;		
		
	КонецЦикла;
	
КонецФункции

//
//ВидРасчета - вид расчета, базу которого нужно изменить
//БазовыйВидРасчета - вид расчета, который нужно добавить/удалить из баз

Процедура ИзменитьБазуДляСреднего(ВидРасчета,УчетСреднего,БазовыйВидРасчета,Действие="Добавить") Экспорт  
	
	ВидыУчета=Новый Соответствие;
	
	ВидыУчета.Вставить(Перечисления.УчетНачисленийВСреднемЗаработке.ОбщийЗаработок,ВидРасчета);
	ВидыУчета.Вставить(Перечисления.УчетНачисленийВСреднемЗаработке.ПремияГодовая, ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии);
	ВидыУчета.Вставить(Перечисления.УчетНачисленийВСреднемЗаработке.ПремияПропорциональноОтработанномуВремени, ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
	ВидыУчета.Вставить(Перечисления.УчетНачисленийВСреднемЗаработке.ПремияФиксированнойСуммой, ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	
	Если ВидыУчета.Получить(УчетСреднего).БазовыеВидыРасчета.Найти(БазовыйВидРасчета)<>Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокВозможныхЗначений=ПолучитьСписокВозможныхЗначенийДляСреднего(ВидРасчета);
	
	Для каждого Стр Из СписокВозможныхЗначений Цикл
		
		ВидРасчетаОбъект=ВидыУчета.Получить(Стр.Значение).ПолучитьОбъект();
		НайденнаяСтрока=ВидРасчетаОбъект.БазовыеВидыРасчета.Найти(БазовыйВидРасчета);
		
		Если НайденнаяСтрока<>Неопределено Тогда	
			
			ВидРасчетаОбъект.БазовыеВидыРасчета.Удалить(НайденнаяСтрока);
			ВидРасчетаОбъект.Записать();
			
		КонецЕсли;		
		
	КонецЦикла;
	
	Если Действие="Добавить" Тогда
		ВидРасчетаОбъект=ВидыУчета.Получить(УчетСреднего).ПолучитьОбъект();
		НоваяСтрока=ВидРасчетаОбъект.БазовыеВидыРасчета.Добавить();
		НоваяСтрока.ВидРасчета=БазовыйВидРасчета;
		ВидРасчетаОбъект.Записать();
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьЗначениеОтбора(ЭлементыОтбора,ЛевоеЗначение,ПравоеЗначение) Экспорт
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если Строка(ЭлементОтбора.ЛевоеЗначение)=ЛевоеЗначение Тогда
			Если ((ЛевоеЗначение="Организация") или (ЛевоеЗначение="ОбособленноеПодразделение")) и (Не ДоступныВсеОрганизации()) ТОгда
				ЭлементОтбора.ПравоеЗначение=ПравоеЗначение;
				ЭлементОтбора.Использование=Истина;
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;	
			КОнецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РазностьВремени(Дата1,Дата2) Экспорт
	
	ВремяВСекундах = Макс(Дата2,Дата1) - Мин(Дата2,Дата1);
	
	Часов = Цел(ВремяВСекундах / 3600);
	Минут = Цел((ВремяВСекундах % 3600) / 60);
	Секунд = ВремяВСекундах - (Часов * 3600 + Минут * 60);
	
	Возврат ?(Часов>0,?(Часов<9,"0"+Строка(Часов),Строка(Часов)),"00")+":"+?(Минут>0,?(Минут<9,"0"+Строка(Минут),Строка(Минут)),"00")+":"+?(Секунд>0,?(Секунд<9,"0"+Строка(Секунд),Строка(Секунд)),"00")
	
КонецФункции



// Процедура вызывается в обработчике события "Начало выбора" в форме документов.
// Выполняет выбор даты курса и устанавливает переданный курс по выбранной дате.
//
// Параметры:
//  Курс   - число, курс валюты, который надо установить;
//  Валюта - ссылка на справочник, определяет валюту чей курс надо выбрать;
//  Дата   - дата, дата курса по умолчанию.
//
Процедура ВыбратьКурсВалюты(Курс, Кратность, Валюта, Дата) Экспорт
	
	// Если не заполнена валюта, то курс выбрать нельзя.
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Предупреждение("Для выбора курса нужно выбрать валюту."); 
		Возврат;
	КонецЕсли; 
	
	// Выберем дату курса
	ДатаУстановкиКурса = Дата; 
	Если ВвестиДату(ДатаУстановкиКурса, "Выберите дату установки курса.", ЧастиДаты.Дата) Тогда
		
		// Если дата введена, заполним значение курса и кратности
		СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, ДатаУстановкиКурса);
		Курс            = СтруктураВалюты.Курс;
		Кратность       = СтруктураВалюты.Кратность;
		
	КонецЕсли; 
	
КонецПроцедуры // ВыбратьКурсВалюты()

Процедура ВакансияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	Если ДанныеСтроки.Закрыта Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	КонецЕсли;
	
	Если Не ДанныеСтроки.Закрыта И ЗначениеЗаполнено(ДанныеСтроки.ПлановаяДатаЗакрытия) И ДанныеСтроки.ПлановаяДатаЗакрытия < ОбщегоНазначения.ПолучитьРабочуюДату() Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;
	
КонецПроцедуры

// Функция выполняет проверку необходимости записи набора записей
//
// Параметры
//  НаборЗаписей  - набор записей регистра сведений, существующие значения
//  ТаблицаЗначенийДляЗаписи - таблица значений с новыми значениями
//  СтрокаОтбора - строка, список полей, разделенных зяпятой, в разрезе которых производится проверка
//					и запись набора записей
//
// Возвращаемое значение:
//   Булево   - Ложь, когда набор записей необходимо было записать, и записать набор не удалось
//
Функция ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ТаблицаЗначенийДляЗаписи, СтрокаОтбора) Экспорт

	СтруктураПоиска = Новый Структура(СтрокаОтбора);
	
	НаборЗаписей.Прочитать();
	ТаблицаНаборЗаписей = НаборЗаписей.Выгрузить();
	
	// удалим лишние колонки из ТаблицаЗначенийДляЗаписи, например номер по порядку
	МассивКолонок = Новый Массив;
	Для каждого КолонкаТЗ Из ТаблицаНаборЗаписей.Колонки Цикл
		Если ТаблицаЗначенийДляЗаписи.Колонки.Найти(КолонкаТЗ.Имя) = Неопределено Тогда
			МассивКолонок.Добавить(КолонкаТЗ);
		КонецЕсли;
	КонецЦикла;
	Для каждого КолонкаТЗ Из МассивКолонок Цикл
		ТаблицаНаборЗаписей.Колонки.Удалить(КолонкаТЗ);
	КонецЦикла;
	
	ТаблицаОтборов = ТаблицаНаборЗаписей.Скопировать(,СтрокаОтбора);
	ТаблицаОтборов.Свернуть(СтрокаОтбора,);
	
	// перепишем данные  во временную таблицу
	ВремТаблицаЗначенийДляЗаписи =  ТаблицаЗначенийДляЗаписи.Скопировать();
	
	Для каждого ЭлементСтруктуры Из СтруктураПоиска Цикл
		ИмяОтбора = ЭлементСтруктуры.Ключ;
		НаборЗаписей.Отбор[ИмяОтбора].Использование = Истина;
	КонецЦикла;

	
	Для каждого СтрокаТЗ Из ТаблицаОтборов Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЗ);
		ТаблицаНовыеЗначения = ВремТаблицаЗначенийДляЗаписи.Скопировать(СтруктураПоиска);
		НадоЗаписать = Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(ТаблицаНаборЗаписей.Скопировать(СтруктураПоиска), ТаблицаНовыеЗначения);
		
		Если НадоЗаписать  Тогда
			
			Для каждого ЭлементСтруктуры Из СтруктураПоиска Цикл
				ИмяОтбора = ЭлементСтруктуры.Ключ;
				ЗначениеОтбора = ЭлементСтруктуры.Значение;
				НаборЗаписей.Отбор[ИмяОтбора].Значение = ЗначениеОтбора;
			КонецЦикла;
			
			Если ТаблицаНовыеЗначения.Количество() = 0 Тогда
				НаборЗаписей.Очистить();	
			Иначе
				НаборЗаписей.Загрузить(ТаблицаНовыеЗначения);
			КонецЕсли;	
			
			Если Не ОбщегоНазначения.ЗаписатьНабор(НаборЗаписей) Тогда
				Возврат Ложь
			КонецЕсли;	
			
		КонецЕсли;
		
		// удалим из ВремТаблицаЗначенийДляЗаписи проверенные строки
		МассивСтрок = ВремТаблицаЗначенийДляЗаписи.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаТЗ Из МассивСтрок Цикл
			ВремТаблицаЗначенийДляЗаписи.Удалить(СтрокаТЗ);
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВремТаблицаЗначенийДляЗаписи.Количество() > 0 Тогда
		// остались сведения, которых не было, запишем
		Для каждого СтрокаТЗ Из ВремТаблицаЗначенийДляЗаписи Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЗ);
			ТаблицаНовыеЗначения = ВремТаблицаЗначенийДляЗаписи.Скопировать(СтруктураПоиска);
			
			Для каждого ЭлементСтруктуры Из СтруктураПоиска Цикл
				ИмяОтбора = ЭлементСтруктуры.Ключ;
				ЗначениеОтбора = ЭлементСтруктуры.Значение;
				НаборЗаписей.Отбор[ИмяОтбора].Значение = ЗначениеОтбора;
			КонецЦикла;
			
			НаборЗаписей.Загрузить(ТаблицаНовыеЗначения);
			
			Если Не ОбщегоНазначения.ЗаписатьНабор(НаборЗаписей) Тогда
				Возврат Ложь
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура открывает общую форму ФормаИсторииЗначений
// Параметры
//		ФормаВладелец - форма из которой открываем просмотр истории
//		КлючУникальности - ключ уникальности, для поиска открытой формы
//		ИмяТаблицыИсторииЗначений - строка, имя таблицы, входит в имя события оповещения
//		ПараметраИсторииЗначений - структура, содержит имя колонки, которая должна заполняться по умолчанию и значение для заполнения
//									например, для истории по физлицу будет структура с именем колонки и физлицом
//		МассивИменаНевидимыхКолонок - массив, значения имена колонок, которые необходимо скрыть
//		МассивИменаКолонокАвтоОтметкаНезаполненного - массив, имена колонок для установки свойства АвтоОтметкаНезаполненного
//		ПорядокПредставленияПериода - строка, описывает как представлять период в таблице: "НачалоГода", "НачалоМесяца"
//									
Процедура ОткрытьФормуИсторииЗначений(ФормаВладелец, КлючУникальности, ИмяТаблицыИсторииЗначений, ТаблицаИстории,
										ПараметрИсторииЗначений, МассивИменаНевидимыхКолонок,
										МассивИменаКолонокАвтоОтметкаНезаполненного, ПорядокПредставленияПериода = "",
										Заголовок, РежимТолькоПросмотр = Истина) Экспорт

	ФормаИстории = ПолучитьОбщуюФорму("ФормаИсторииЗначений", ФормаВладелец, КлючУникальности);
	ФормаИстории.ТаблицаИсторииЗначений = ТаблицаИстории.Скопировать();
	ФормаИстории.ИмяТаблицыИсторииЗначений = ИмяТаблицыИсторииЗначений;
	ФормаИстории.ПараметрИсторииЗначений   = ПараметрИсторииЗначений;
	ФормаИстории.Заголовок = Заголовок;
	ФормаИстории.ТолькоПросмотр = РежимТолькоПросмотр;
	ФормаИстории.мМассивИменаНевидимыхКолонок = МассивИменаНевидимыхКолонок;
	ФормаИстории.мМассивИменаКолонокАвтоОтметкаНезаполненного = МассивИменаКолонокАвтоОтметкаНезаполненного;
	ФормаИстории.мПорядокПредставленияПериода = ПорядокПредставленияПериода;
	ФормаИстории.Открыть();	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ НАЧИСЛЕНИЙ И ПОКАЗАТЕЛЕЙ

// Процедура собирает ссылки на виды расчета из коллекции оформляемых строк 
//  и заполняет соответствие сведений о них
//
Процедура ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(СведенияОВидахРасчета, ОформляемыеСтроки, ИмяПоляВидРасчета = "ВидРасчета", Режим = "ПлановыеНачисления") Экспорт
	
	ПоляВидРасчета = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяПоляВидРасчета);
	
	ВидыРасчета = Новый Массив;
	Для каждого ОформлениеСтроки Из ОформляемыеСтроки Цикл
		Для Каждого ПолеВидРасчета Из ПоляВидРасчета Цикл
			ДанныеСтрокиВидРасчета = ОформлениеСтроки.ДанныеСтроки[ПолеВидРасчета];
			Если ДанныеСтрокиВидРасчета = Неопределено Тогда
				ДанныеСтрокиВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
			КонецЕсли;
			ВидыРасчета.Добавить(ДанныеСтрокиВидРасчета);
		КонецЦикла;
	КонецЦикла;
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидыРасчета, Режим);
	
КонецПроцедуры // ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок
	

Функция СведенияПВРПоТипуВР(ВРСсылка)
	
	СведенияПВРПоТипуВР = Новый Соответствие;
	СведенияПВРПоТипуВР.Вставить(Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), 			Новый Структура("Имя, ЭтоНачисление, ЭтоДополнительноеНачисление, ЭтоРегламентированныйУчет", "ОсновныеНачисленияОрганизаций", Истина, Ложь, Истина));
	СведенияПВРПоТипуВР.Вставить(Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций"), 	Новый Структура("Имя, ЭтоНачисление, ЭтоДополнительноеНачисление, ЭтоРегламентированныйУчет", "ДополнительныеНачисленияОрганизаций", Истина, Истина, Истина));
	СведенияПВРПоТипуВР.Вставить(Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций"), 					Новый Структура("Имя, ЭтоНачисление, ЭтоДополнительноеНачисление, ЭтоРегламентированныйУчет", "УдержанияОрганизаций", Ложь, Ложь, Истина));

	РаботаСДиалогамиПереопределяемый.ДополнитьСведенияПВРПоТипуВР(СведенияПВРПоТипуВР);
	
	Возврат СведенияПВРПоТипуВР[ТипЗнч(ВРСсылка)];
	
КонецФункции // СведенияПВРПоТипуВР

Функция ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета, Режим = "ПлановыеНачисления") Экспорт
	
	Если ВидРасчета <> Неопределено Тогда
		Если СведенияОВидахРасчета[ВидРасчета] = Неопределено Тогда
			ВидыРасчета = Новый Массив;
			ВидыРасчета.Добавить(ВидРасчета);
			ЗаполнитьСведенияОВидахРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидыРасчета, Режим);
		КонецЕсли;
		СведенияОВидеРасчета = СведенияОВидахРасчета[ВидРасчета];
	Иначе
		// пустой вид расчета - формируем сведения "по умолчанию"
		СведенияОВидеРасчета = СведенияОВидеРасчета(, Режим);
	КонецЕсли;
	
	Возврат СведенияОВидеРасчета;
	
КонецФункции // ПолучитьСведенияОВидеРасчетаСхемыМотивации

Функция СведенияОВидеРасчета(ВыборкаПоВидамРасчета = Неопределено, Режим = "ПлановыеНачисления")
	
	СведенияОВидеРасчета = Новый Структура;
	
	// значения по умолчанию
	СведенияОВидеРасчета.Вставить("СпособРасчета", Неопределено);
	СведенияОВидеРасчета.Вставить("КоличествоПоказателей", 1);
	СведенияОВидеРасчета.Вставить("РазмерТребуется", Ложь);
	СведенияОВидеРасчета.Вставить("НеТребуетВалюты", Ложь);
	СведенияОВидеРасчета.Вставить("ТребуетВводаТарифногоРазряда", Ложь);
	СведенияОВидеРасчета.Вставить("ФактКоличествоПоказателей", 0);
	СведенияОВидеРасчета.Вставить("ИспользуетРасчетнуюБазу", Ложь);
	СведенияОВидеРасчета.Вставить("ИспользуетПоказателиУчетаВремени", Ложь);
	
	СведенияОВидеРасчета.Вставить("Показатель1Наименование", "");
	СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Ложь);
	СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Ложь);
	СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
	СведенияОВидеРасчета.Вставить("Показатель1Видимость", Ложь);
	СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
	СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
	СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка());
	СведенияОВидеРасчета.Вставить("ВалютаПоказателя1");
	
	Если ВыборкаПоВидамРасчета = Неопределено Тогда
		// для пустого вида расчета оставляем сведения "по умолчанию"
		Возврат СведенияОВидеРасчета;
	КонецЕсли;
	
	ВыборкаДетально = ВыборкаПоВидамРасчета.Выбрать();
	ВыборкаДетально.Следующий();
	ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета, ВыборкаДетально);
	
	СведенияОВидеРасчета["КоличествоПоказателей"] 		= Макс(1, ВыборкаДетально["КоличествоПоказателей"]);
	СведенияОВидеРасчета["ФактКоличествоПоказателей"] 	= Макс(СведенияОВидеРасчета["ФактКоличествоПоказателей"], ВыборкаДетально["КоличествоПоказателей"]);
	
	СведенияОПВР = СведенияПВРПоТипуВР(ВыборкаПоВидамРасчета.ВидРасчета);
	
	ВыборкаПоказателей = ВыборкаПоВидамРасчета.Выбрать();
	Пока ВыборкаПоказателей.Следующий() Цикл

		СчПоказателей 			= ВыборкаПоказателей.НомерПоказателя;
		ВозможностьИзменения	= ВыборкаПоказателей.ПоказательВозможностьИзменения;
		ТипПоказателя			= ВыборкаПоказателей.ТипПоказателя;
		
		СведенияОВидеРасчета.Вставить("ВалютаПоказателя" + СчПоказателей, ВыборкаПоказателей["ВалютаПоказателя"]);
		СведенияОВидеРасчета.Вставить("ВводВалютныхЗначений" + СчПоказателей, ВыборкаПоказателей["ВводВалютныхЗначений"]);
		СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность", ВыборкаПоказателей["ТочностьПредставления"]);
		СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "ВозможностьИзменения", ВозможностьИзменения);
		СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Наименование", ВыборкаПоказателей["ПоказательНаименование"]);
		СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "ВидПоказателя", ВыборкаПоказателей["ВидПоказателя"]);
		
		СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей, ВыборкаПоказателей.Показатель);
		
		Если НЕ ВыборкаПоказателей["Запрашивать"] И Не ВыборкаПоказателей["ЭтоПредопределенный"] Тогда
			Если Режим = "ПлановыеНачисления" Тогда
				СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
				СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
				СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
				СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
				СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
			Иначе
				СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" ,Истина);
				Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
					
					СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость" , Истина);
					СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость" , Истина);
					СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Наименование" , ВыборкаПоказателей["ПоказательНаименование"]);
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" , Ложь);
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость" , Ложь);
					СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость" , Ложь);	
					
				ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Числовой Или ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Процентный Или ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.СуммаПоказателя Тогда
					
					СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
					СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
					
				ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный Тогда
					
					СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
					СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", ВыборкаПоказателей["ВыбранаВалюта"]);
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность", ВыборкаПоказателей["ТочностьПредставления"]);
					
				ИначеЕсли (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
					Или (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная) Тогда
					
					СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
					СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
					СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
					
				Иначе
					СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
					СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", ВыборкаПоказателей["ВыбранаВалюта"]);
					СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ВыборкаПоказателей["Предопределенный"] И РаботаСДиалогамиПереопределяемый.СкрыватьПредопределенныйПоказатель(ВыборкаПоказателей["Показатель"], Режим) Тогда
			СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
			СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
		ИначеЕсли Режим = "ПлановыеНачисления" и (СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно
			Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически) Тогда
			СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость" , Ложь);
			СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость" , Ложь);
			СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость" , Ложь);
			СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость" , Ложь);
		Иначе
			СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" ,Истина);
			Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
				
				СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость" , Истина);
				СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость" , Истина);
				СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Наименование" , ВыборкаПоказателей["ПоказательНаименование"]);
				СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" , Ложь);
				СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость" , Ложь);
				СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость" , Ложь);	
				
			ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Числовой Тогда
				
				СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
				СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
				СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
				
			ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный Тогда
				
				СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
				СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
				СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", ВыборкаПоказателей["ВыбранаВалюта"]);
				СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность", ВыборкаПоказателей["ТочностьПредставления"]);
				
				
			ИначеЕсли (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
				Или (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная) Тогда
				
				СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
				СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
				СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
				СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
				СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
				
			Иначе
				СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
				СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
				СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
				
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаПоказателей.Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная
			Или ВыборкаПоказателей.Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная Тогда
			СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность", ВыборкаПоказателей["ТочностьПредставления"]);
		КонецЕсли;
	КонецЦикла;
		
	// заполним для регламентированных способов оплаты труда
 	ИзменениеПоказателяНеУказано = Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка();
	Если СведенияОПВР.ЭтоРегламентированныйУчет Тогда
		Если СведенияОВидеРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
			СведенияОВидеРасчета.Вставить("ФактКоличествоПоказателей",0);
			СведенияОВидеРасчета["Показатель1Точность"] = 3;
			Если СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням 
				Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
				СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
				НаименованиеТарифнойСтавки = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная;
				
				Если СведенияОВидеРасчета.ТребуетВводаТарифногоРазряда Тогда
					СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("ПоказательТР1Наименование", НаименованиеТарифнойСтавки);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
				Иначе
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", НаименованиеТарифнойСтавки);
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
				КонецЕсли;
			ИначеЕсли СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке 
				Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке Тогда
				СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
				
				Если СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке Тогда
					НаименованиеТарифнойСтавки = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная;
					СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
				Иначе
					НаименованиеТарифнойСтавки = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая;
					СведенияОВидеРасчета.Вставить("Показатель1Точность", 3);
				КонецЕсли;
				
				Если СведенияОВидеРасчета.ТребуетВводаТарифногоРазряда Тогда
					СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("ПоказательТР1Наименование", НаименованиеТарифнойСтавки);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
				Иначе
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", НаименованиеТарифнойСтавки);
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
				КонецЕсли;
			ИначеЕсли СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом  Тогда
				СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1Наименование", ?(СведенияОПВР.ЭтоНачисление, "Процент оплаты", "Процент удержания"));
				СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
				СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
			ИначеЕсли СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка Тогда
				СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент оплаты");
				СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
				СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
				Если Режим = "ПлановыеНачисления" Тогда
					СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется);
					СведенияОВидеРасчета.Вставить("КоличествоПоказателей",0);
				КонецЕсли;
							
			ИначеЕсли СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы
				Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
				Если Режим = "ПлановыеНачисления" Тогда
					СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
				КонецЕсли;
				СведенияОВидеРасчета.Вставить("Показатель1Наименование", ?(Режим = "ПлановыеНачисления","Процент доплаты","Тарифная ставка"));
				СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
				СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
				СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
			ИначеЕсли СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке
				Или  СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням
				Или  СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам
				Или  СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке Тогда
				Если Режим = "ПлановыеНачисления" Тогда
					СведенияОВидеРасчета["КоличествоПоказателей"] = 0;
					СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 0;
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Ложь);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
					СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Ложь);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
				Иначе
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Тарифная ставка");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
					СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
				КонецЕсли;
			ИначеЕсли СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
				Если Режим = "ПлановыеНачисления" Тогда
					СведенияОВидеРасчета["КоличествоПоказателей"] = 0;
					СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 0;
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Ложь);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
					СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Ложь);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
				Иначе
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент оплаты");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
				КонецЕсли;
			ИначеЕсли СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням
				Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку
				Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке 
				Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
				СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1Наименование", ?(СведенияОПВР.ЭтоДополнительноеНачисление ИЛИ НЕ СведенияОПВР.ЭтоНачисление, "Дней оплаты", "Процент"));
				СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
				СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
			ИначеЕсли СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Тогда
				СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент среднего заработка");
				СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
				СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);	
			ИначеЕсли  СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
				Если Режим = "ПлановыеНачисления" Тогда
					СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
				КонецЕсли;
				СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Тарифная ставка");
				СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
				СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
			ИначеЕсли  СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Или
				СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой Тогда
				СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Сумма");
				СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
				СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
				
			ИначеЕсли  СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом 
				Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела 
				Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомСНДФЛ 
				Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПределаСНДФЛ Тогда
				СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент удержаний");
				СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
				СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
				//vvv
				Если СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Тогда
					
					СведенияОВидеРасчета.Вставить("КоличествоПоказателей", 2);
					СведенияОВидеРасчета.Вставить("Показатель2Наименование", "Процент БПМ");
					СведенияОВидеРасчета.Вставить("Показатель2Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта2Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель2ВозможностьИзменения", Истина);
					СведенияОВидеРасчета.Вставить("Показатель2Точность", 0);
					
				КонецЕсли;
				//
			ИначеЕсли  СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
				СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Фиксированная сумма");
				СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
				СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
			ИначеЕсли  СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор ИЛИ
				СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.КомиссионыйСбор Тогда
				СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент сбора");
				СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
				СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
		
			ИначеЕсли СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
				СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Сумма");
				СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
				СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
			ИначеЕсли РаботаСДиалогамиПереопределяемый.ЕстьЧемДополнитьСведенияОСпособеРасчета(СведенияОВидеРасчета.СпособРасчета) Тогда
				
				РаботаСДиалогамиПереопределяемый.ДополнитьСведенияОСпособеРасчета(СведенияОВидеРасчета.СпособРасчета, СведенияОВидеРасчета);

			ИначеЕсли ПроведениеРасчетов.СпособРасчетаТребуетРазмер(СведенияОВидеРасчета.СпособРасчета) Тогда
				СведенияОВидеРасчета.Вставить(СведенияОВидеРасчета.РазмерТребуется, Истина);
				СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
				Если НЕ ПроведениеРасчетов.СпособРасчетаНеТребуетВалюты(СведенияОВидеРасчета.СпособРасчета) И Найти(Строка(СведенияОВидеРасчета.СпособРасчета), "П1") = 0 Тогда
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		РаботаСДиалогамиПереопределяемый.ДополнитьСведенияОВидеРасчета(СведенияОВидеРасчета, ВыборкаПоВидамРасчета);
	КонецЕсли;

	Возврат СведенияОВидеРасчета;
	
КонецФункции // СведенияОВидеРасчета

// Процедура заполняет информацию о видах расчета из переданного соответствия
// Если в соответствии не найдена информация о виде расчета - она подготавливается и 
// помещается в соответствие
// Применяется для работы с формами, в которых активно требуется получать 
// информащцию о видах расчета, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОВидахРасчета - соответствие, у котрого в качестве ключа - ПланВидовРасчетаСсылка, а 
//  				  в качестве значения - структура из элементов
//					  РазмерТребуется - булево - если да, то при вводе такого 
//										вида расчета требуется проставлять значение "размер" 
//										(суммы, проценты и проч. показатели, используемые при расчете)
//
//	ВидРасчета - ПланВидовРасчетаСсылка
//
// Возвращаемое значение:
//  Описанная выше структура
//
Процедура ЗаполнитьСведенияОВидахРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидыРасчета, Режим = "ПлановыеНачисления") Экспорт
	
	// исключаем "закэшированные" виды расчета
	НовыеВидыРасчета = Новый Массив;
	Для Каждого ВидРасчета Из ВидыРасчета Цикл
		Если СведенияОВидахРасчета[ВидРасчета] = Неопределено Тогда
			НовыеВидыРасчета.Добавить(ВидРасчета);
			СведенияОВидахРасчета.Вставить(ВидРасчета, Новый Структура);
		КонецЕсли;
	КонецЦикла;
	
	Если НовыеВидыРасчета.Количество() = 0 Тогда
		// для всех видов расчета сведения заполнены
		Возврат;
	КонецЕсли;
		
	ВыборкаПоВидамРасчета = СформироватьЗапросСведенийОВидахРасчета(НовыеВидыРасчета).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Для Каждого ВидРасчета Из НовыеВидыРасчета Цикл
		ВыборкаПоВидамРасчета.Сбросить();
		Если ВыборкаПоВидамРасчета.НайтиСледующий(Новый Структура("ВидРасчета", ВидРасчета)) Тогда
			СведенияОВидахРасчета.Вставить(ВидРасчета, СведенияОВидеРасчета(ВыборкаПоВидамРасчета, Режим));
		Иначе
			// пустой вид расчета - не найден в результатах
			СведенияОВидахРасчета.Вставить(ВидРасчета, СведенияОВидеРасчета(, Режим));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры  // ЗаполнитьСведенияОВидахРасчетаСхемыМотивации
	
Функция СформироватьЗапросСведенийОВидахРасчета(ВидыРасчета)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ОсновныеНачисленияОрганизаций.СпособРасчета,
	|	ОсновныеНачисленияОрганизаций.ТребуетВводаТарифногоРазряда,
	|	ОсновныеНачисленияОрганизаций.ЗачетОтработанногоВремени
	|ПОМЕСТИТЬ ВидыРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеНачисленияОрганизаций.Ссылка,
	|	ДополнительныеНачисленияОрганизаций.СпособРасчета,
	|	ДополнительныеНачисленияОрганизаций.ТребуетВводаТарифногоРазряда,
	|	ЛОЖЬ
	|ИЗ
	|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
	|ГДЕ
	|	ДополнительныеНачисленияОрганизаций.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдержанияОрганизаций.Ссылка,
	|	УдержанияОрганизаций.СпособРасчета,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	ПланВидовРасчета.УдержанияОрганизаций КАК УдержанияОрганизаций
	|ГДЕ
	|	УдержанияОрганизаций.Ссылка В(&Ссылка)";
	
	РаботаСДиалогамиПереопределяемый.ДобавитьОбъединенияВЗапросВидыРасчета(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизацийПоказатели.Ссылка КАК ВидРасчета,
	|	ОсновныеНачисленияОрганизацийПоказатели.Показатель,
	|	ОсновныеНачисленияОрганизацийПоказатели.НомерСтроки КАК НомерПоказателя,
	|	ОсновныеНачисленияОрганизацийПоказатели.ЗапрашиватьПриКадровыхПеремещениях КАК Запрашивать
	|ПОМЕСТИТЬ ПоказателиВидаРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияОрганизацийПоказатели
	|ГДЕ
	|	ОсновныеНачисленияОрганизацийПоказатели.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеНачисленияОрганизацийПоказатели.Ссылка,
	|	ДополнительныеНачисленияОрганизацийПоказатели.Показатель,
	|	ДополнительныеНачисленияОрганизацийПоказатели.НомерСтроки,
	|	ДополнительныеНачисленияОрганизацийПоказатели.ЗапрашиватьПриКадровыхПеремещениях
	|ИЗ
	|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК ДополнительныеНачисленияОрганизацийПоказатели
	|ГДЕ
	|	ДополнительныеНачисленияОрганизацийПоказатели.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдержанияОрганизацийПоказатели.Ссылка,
	|	УдержанияОрганизацийПоказатели.Показатель,
	|	УдержанияОрганизацийПоказатели.НомерСтроки,
	|	УдержанияОрганизацийПоказатели.ЗапрашиватьПриКадровыхПеремещениях
	|ИЗ
	|	ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК УдержанияОрганизацийПоказатели
	|ГДЕ
	|	УдержанияОрганизацийПоказатели.Ссылка В(&Ссылка)";
	
	РаботаСДиалогамиПереопределяемый.ДобавитьОбъединенияВЗапросПоказатели(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыРасчета.Ссылка КАК ВидРасчета,
	|	ВидыРасчета.СпособРасчета КАК СпособРасчета,
	|	ЕСТЬNULL(КоличествоПоказателей.Количество, 0) КАК КоличествоПоказателей,
	|	ВЫБОР
	|		КОГДА 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					ПоказателиВидаРасчета
	|				ГДЕ
	|					ПоказателиВидаРасчета.ВидРасчета = ВидыРасчета.Ссылка
	|					И ПоказателиВидаРасчета.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБаза))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользуетРасчетнуюБазу,
	|	ВЫБОР
	|		КОГДА 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					ПоказателиВидаРасчета
	|				ГДЕ
	|					ПоказателиВидаРасчета.ВидРасчета = ВидыРасчета.Ссылка
	|					И ПоказателиВидаРасчета.Показатель В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВДнях), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВКалендарныхДнях), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВЧасах), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.КалендарныхДнейВмесяце), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.НормаВремениВДнях), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.НормаВремениВЧасах), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ОтработаноВремениВДнях), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ОтработаноВремениВЧасах)))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользуетПоказателиУчетаВремени,
	|	ВЫБОР
	|		КОГДА ВидыРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула)
	|			ТОГДА ВЫБОР
	|					КОГДА 1 В
	|							(ВЫБРАТЬ ПЕРВЫЕ 1
	|								1
	|							ИЗ
	|								ПоказателиВидаРасчета
	|							ГДЕ
	|								ПоказателиВидаРасчета.ВидРасчета = ВидыРасчета.Ссылка
	|								И ПоказателиВидаРасчета.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд))
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ВидыРасчета.ТребуетВводаТарифногоРазряда
	|	КОНЕЦ КАК ТребуетВводаТарифногоРазряда,
	|	ПоказателиВидаРасчета.Показатель,
	|	ВЫБОР
	|		КОГДА ПоказателиВидаРасчета.Запрашивать
	|				ИЛИ ((Показатели.ТарифнаяСтавка
	|					ИЛИ ПоказателиВидаРасчета.Показатель В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)))
	|						И ВидыРасчета.ЗачетОтработанногоВремени)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Запрашивать,
	|	ВЫБОР
	|		КОГДА Показатели.ТарифнаяСтавка
	|				ИЛИ ПоказателиВидаРасчета.Показатель В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая))
	|			ТОГДА (НЕ ВидыРасчета.ЗачетОтработанногоВремени)
	|		КОГДА Показатели.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ Показатели.Предопределенный
	|	КОНЕЦ КАК Предопределенный,
	|	ВЫБОР
	|		КОГДА Показатели.Предопределенный
	|				И (НЕ ПоказателиВидаРасчета.Показатель В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПредопределенный,
	|	ВЫБОР
	|		КОГДА Показатели.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВыбранаВалюта,
	|";
	
	ТекстЗапроса = ТекстЗапроса + РаботаСДиалогамиПереопределяемый.ПолеЗапросаВводВалютныхЗначений()
								+ РаботаСДиалогамиПереопределяемый.ПолеЗапросаТочностьПредставленияПоказателя();
	
	ТекстЗапроса = ТекстЗапроса + "
	|	Показатели.Наименование КАК ПоказательНаименование,
	|	Показатели.ТипПоказателя,
	|	Показатели.ВидПоказателя КАК ВидПоказателя,
	|	Показатели.Валюта КАК ВалютаПоказателя,
	|	ЕСТЬNULL(Показатели.ВозможностьИзменения, ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)) КАК ПоказательВозможностьИзменения,
	|	ПоказателиВидаРасчета.НомерПоказателя
	|ИЗ
	|	ВидыРасчета КАК ВидыРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК ПоказателиВидаРасчета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиСхемМотивации КАК Показатели
	|			ПО ПоказателиВидаРасчета.Показатель = Показатели.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|			ПО (ИСТИНА)
	|		ПО ВидыРасчета.Ссылка = ПоказателиВидаРасчета.ВидРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПоказателиВидаРасчета.ВидРасчета КАК ВидРасчета,
	|			КОЛИЧЕСТВО(ПоказателиВидаРасчета.Показатель) КАК Количество
	|		ИЗ
	|			ПоказателиВидаРасчета КАК ПоказателиВидаРасчета
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПоказателиВидаРасчета.ВидРасчета) КАК КоличествоПоказателей
	|		ПО (КоличествоПоказателей.ВидРасчета = ВидыРасчета.Ссылка)
	|ИТОГИ ПО
	|	ВидРасчета";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ВидыРасчета);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросСведенийОВидахРасчета

// Процедура собирает ссылки на виды расчета из табличных частей 
//  и заполняет соответствие сведений о них
//
Процедура ЗаполнитьСведенияОВидахРасчетаТабличнойЧасти(СведенияОВидахРасчета, ТабличныеЧасти, Режим = "ПлановыеНачисления") Экспорт
	
	// собираем виды расчета документа
	ВидыРасчета = Новый Массив;
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			ВидыРасчета.Добавить(СтрокаТабличнойЧасти.ВидРасчета);
		КонецЦикла;
	КонецЦикла;
	
	// заполняем недостающие сведения
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидыРасчета, Режим);

КонецПроцедуры // ЗаполнитьСведенияОВидахРасчетаТабличнойЧасти

// Выводит строки показателей в списке регистра сведений плановых начислений
//
Процедура ОформитьСтрокиПлановыхНачислений(Элемент, мСведенияОВидахРасчета, ОформленияСтрок) Экспорт
	
	ДлинаСуток = 86400;
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мСведенияОВидахРасчета, ОформленияСтрок, "ВидРасчета,ВидРасчетаЗавершения");
	
	Для каждого Строка Из ОформленияСтрок Цикл
		
		ДанныеСтроки = Строка.ДанныеСтроки;
		ВидРасчета = ДанныеСтроки.ВидРасчета;
		
		Если ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
			
			СведенияОВидеРасчета = мСведенияОВидахРасчета[ВидРасчета];
			
			ЕстьПоказатели = Ложь;
			Для СчПоказателей = 1 По 6 Цикл
				Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
					ВидимостьПоказателяИВалюты = Истина;
					Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Истина;
						ЕстьПоказатели = Истина;
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
						Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Ложь;
					ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
						ВидимостьПоказателяИВалюты = Ложь;
						ЕстьПоказатели = Истина;
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);
						Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Истина;	
						Строка.Ячейки["ТарифныйРазряд" + СчПоказателей].Видимость = Истина;
					Иначе
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Ложь;
					КонецЕсли;
					Если ВидимостьПоказателяИВалюты Тогда
						Строка.Ячейки["Показатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
						Строка.Ячейки["Валюта" + СчПоказателей].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
						Если Строка.Ячейки["Показатель" + СчПоказателей].Видимость Тогда
							Строка.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
						КонецЕсли;
					Иначе
						Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;
					КонецЕсли;
				Иначе
					Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
					Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
					Строка.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Ложь;				
					Строка.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
			КонецЦикла;
			Если не ЕстьПоказатели Тогда
				Строка.Ячейки.НаименованиеПоказатель1.Видимость = Истина;
				Строка.Ячейки["Показатель1"].Видимость = Истина;
				Строка.Ячейки["Валюта1"].Видимость = Истина;
				Строка.Ячейки["НаименованиеПоказательТР1"].Видимость = Ложь;
				Строка.Ячейки["ТарифныйРазряд1"].Видимость = Ложь;
			КонецЕсли;
			Строка.Ячейки.Показатели.Видимость = Ложь;
			
			// События завершения
			Если ДанныеСтроки.ВидРасчетаЗавершения = Неопределено Тогда
				
				Для СчПоказателей = 1 По 6 Цикл
					
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость	= Ложь;
					Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость	= Ложь;
					Строка.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость				= Ложь;
					Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость				= Ложь;
					Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость					= Ложь;
					
				КонецЦикла;
				
			Иначе
				
				СведенияОВидеРасчета = мСведенияОВидахРасчета[ВидРасчета];
				
				Показатели = Ложь;
				Для СчПоказателей = 1 По 6 Цикл
					Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
						
						ВидимостьПоказателяИВалюты = Истина;
						Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
							Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость = Истина;
							ЕстьПоказатели = Истина;
							Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
							Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость = Ложь;
							Строка.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость = Ложь;
						ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
							ВидимостьПоказателяИВалюты = Ложь;
							ЕстьПоказатели = Истина;
							Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
							Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
							Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);
							Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость = Истина;
							Строка.Ячейки["ТарифныйРазряд" + СчПоказателей + "Завершения"].Видимость = Истина;
						Иначе
							Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
							Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость = Ложь;
							Строка.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость = Ложь;
						КонецЕсли;
						Если ВидимостьПоказателяИВалюты Тогда
							Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
							Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
							Если Строка.Ячейки["Показатель" + СчПоказателей].Видимость Тогда
								Строка.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
							КонецЕсли;
						Иначе
							Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
							Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость = Ложь;
						КонецЕсли;
					Иначе
						Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
						Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость = Ложь;
						Строка.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость = Ложь;					
						Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость = Ложь;
					КонецЕсли;
					
				КонецЦикла;
				Если не ЕстьПоказатели Тогда
					Строка.Ячейки.НаименованиеПоказатель1.Видимость = Истина;
					Строка.Ячейки["Показатель1Завершения"].Видимость = Истина;
					Строка.Ячейки["Валюта1Завершения"].Видимость = Истина;
					Строка.Ячейки["НаименованиеПоказательТР1Завершения"].Видимость = Ложь;
					Строка.Ячейки["ТарифныйРазряд1Завершения"].Видимость = Ложь;
				КонецЕсли;			
				Строка.Ячейки.ПоказателиЗавершения.Видимость = Ложь;
				
			КонецЕсли; 
		Иначе
			
			СведенияОВидеРасчета = мСведенияОВидахРасчета[ВидРасчета];
			
			Строка.Ячейки["НаименованиеПоказатель1"].Видимость	= Истина;
			Строка.Ячейки["НаименованиеПоказательТР1"].Видимость	= Ложь;
			Строка.Ячейки["ТарифныйРазряд1"].Видимость			= Ложь;
			Строка.Ячейки["Показатель1"].Видимость				= Истина;
			Строка.Ячейки["Валюта1"].Видимость					= Истина;
			
			Строка.Ячейки["НаименованиеПоказатель1"].УстановитьТекст(СведенияОВидеРасчета["Показатель1Наименование"]);
			
			Для СчПоказателей = 2 По 6 Цикл
				
				Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей ].Видимость	= Ложь;
				Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость	= Ложь;
				Строка.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость				= Ложь;
				Строка.Ячейки["Показатель" + СчПоказателей].Видимость					= Ложь;
				Строка.Ячейки["Валюта" + СчПоказателей].Видимость						= Ложь;
				
			КонецЦикла;
			
			Строка.Ячейки.Показатели.Видимость = Ложь;
			
			Если ДанныеСтроки.ВидРасчетаЗавершения = Неопределено Тогда
				
				Для СчПоказателей = 1 По 6 Цикл
					
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость		= Ложь;
					Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость	= Ложь;
					Строка.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость				= Ложь;
					Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость					= Ложь;
					Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость						= Ложь;
					
				КонецЦикла;
				
			Иначе
				
				Строка.Ячейки["НаименованиеПоказатель1" + "Завершения"].Видимость		= Ложь;
				Строка.Ячейки["НаименованиеПоказательТР1" + "Завершения"].Видимость	= Ложь;
				Строка.Ячейки["ТарифныйРазряд1" + "Завершения"].Видимость				= Ложь;
				Строка.Ячейки["Показатель1" + "Завершения"].Видимость					= Истина;
				Строка.Ячейки["Валюта1" + "Завершения"].Видимость						= Истина;
				
				
				Для СчПоказателей = 2 По 6 Цикл
					
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость		= Ложь;
					Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость	= Ложь;
					Строка.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость				= Ложь;
					Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость					= Ложь;
					Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость						= Ложь;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Строка.Ячейки.ПоказателиЗавершения.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

// Выводит строки показателей в списке регистра сведений плановых удержаний
//
Процедура ОформитьСтрокиПлановыхУдержаний(Элемент, мСведенияОВидахРасчета, ОформленияСтрок) Экспорт
	
	ДлинаСуток = 86400;
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мСведенияОВидахРасчета, ОформленияСтрок);
	
	Для каждого Строка Из ОформленияСтрок Цикл
		
		ДанныеСтроки = Строка.ДанныеСтроки;
		ВидРасчета = ДанныеСтроки.ВидРасчета;
		
		СведенияОВидеРасчета = мСведенияОВидахРасчета[ВидРасчета];
	
		ЕстьПоказатели = Ложь;
		Для СчПоказателей = 1 По 6 Цикл
			
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
				ВидимостьПоказателяИВалюты = Истина;
				Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Истина;
					ЕстьПоказатели = Истина;
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				Иначе
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
				Если ВидимостьПоказателяИВалюты Тогда
					Строка.Ячейки["Показатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];		
					Строка.Ячейки["Валюта" + СчПоказателей].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
				Иначе
					Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;		
					Строка.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
			Иначе
				Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;		
				Строка.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;			
			КонецЕсли;
			
		КонецЦикла;
		
		Если не ЕстьПоказатели Тогда		
			Строка.Ячейки.НаименованиеПоказатель1.Видимость = Истина;
			Строка.Ячейки["Показатель1"].Видимость = Истина;		
			Строка.Ячейки["Валюта1"].Видимость = Истина;		
		КонецЕсли;	
		Строка.Ячейки.Показатели.Видимость = Ложь;
		
		// События завершения
		Если Не ЗначениеЗаполнено(ДанныеСтроки.ДействиеЗавершения) ИЛИ ДанныеСтроки.ДействиеЗавершения = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
			
			Для СчПоказателей = 1 По 6 Цикл
				Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость	= Ложь;
				Строка.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость				= Ложь;
				Строка.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость					= Ложь;
			КонецЦикла;
			
		Иначе		
			
			ЕстьПоказатели = Ложь;
			Для СчПоказателей = 1 По 6 Цикл
				
				Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
					ВидимостьПоказателяИВалюты = Истина;
					Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей+ "Завершения"].Видимость = Истина;
						ЕстьПоказатели = Истина;
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей+ "Завершения"].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
					Иначе
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей+ "Завершения"].Видимость = Ложь;
					КонецЕсли;
					Если ВидимостьПоказателяИВалюты Тогда
						Строка.Ячейки["Показатель" + СчПоказателей+ "Завершения"].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];		
						Строка.Ячейки["Валюта" + СчПоказателей+ "Завершения"].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
					Иначе
						Строка.Ячейки["Показатель" + СчПоказателей+ "Завершения"].Видимость = Ложь;		
						Строка.Ячейки["Валюта" + СчПоказателей+ "Завершения"].Видимость = Ложь;
					КонецЕсли;
				Иначе
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей+ "Завершения"].Видимость = Ложь;
					Строка.Ячейки["Показатель" + СчПоказателей+ "Завершения"].Видимость = Ложь;		
					Строка.Ячейки["Валюта" + СчПоказателей+ "Завершения"].Видимость = Ложь;			
				КонецЕсли;
				
			КонецЦикла;
			
			Если не ЕстьПоказатели Тогда		
				Строка.Ячейки.НаименованиеПоказатель1Завершения.Видимость = Истина;
				Строка.Ячейки["Показатель1Завершения"].Видимость = Истина;		
				Строка.Ячейки["Валюта1Завершения"].Видимость = Истина;		
			КонецЕсли;	
			Строка.Ячейки.ПоказателиЗавершения.Видимость = Ложь;
		КонецЕсли;
		
		Если Элемент.Колонки.ПериодЗавершения.Видимость Тогда
			Строка.Ячейки.ПериодЗавершения.ОтображатьТекст = Истина;
			Строка.Ячейки.ПериодЗавершения.УстановитьТекст(Формат(ДанныеСтроки.ПериодЗавершения - ДлинаСуток, "ДФ=dd.MM.yyyy"));
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

// Процедура управляет видимостью показателей в табличном поле
// Парметры:
//		ТабличноеПоле - Табличное поле, в котором необходимо установить видимость показателей
//		ОформленияСтрокТабличногоПоля - оформления строк табличного поля
//		СведенияОВидахРасчета - соответствие, в котором хранятся сведения о виде расчета
Процедура ОбработатьОтображениеПоказателейДляРасчета(ТабличноеПоле, ОформленияСтрокТабличногоПоля, СведенияОВидахРасчета, Режим = "ПриРасчете", ВидРасчета = Неопределено) Экспорт

	// показатели будут видны, если в табличном поле включена видимость колонки Показатели
	Колонки = ТабличноеПоле.Колонки;
	ПоказыватьПоказатели = Колонки.Показатели.Видимость;
	
	ЕстьПоказатели = Ложь;
	
	Если ВидРасчета <> Неопределено Тогда
		РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета, Режим);
	Иначе
		РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(СведенияОВидахРасчета, ОформленияСтрокТабличногоПоля, , Режим);
	КонецЕсли;
	
	Для каждого ОформлениеСтроки Из ОформленияСтрокТабличногоПоля Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		Если ВидРасчета = Неопределено Тогда
			Если ДанныеСтроки.ВидРасчета = Неопределено Тогда
				ДанныеСтрокиВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
			Иначе
				ДанныеСтрокиВидРасчета = ДанныеСтроки.ВидРасчета;
			КонецЕсли;
		Иначе
			ДанныеСтрокиВидРасчета = ВидРасчета;
		КонецЕсли;
		СведенияОВидеРасчета = СведенияОВидахРасчета[ДанныеСтрокиВидРасчета];
		
		Для СчПоказателей = 1 По 6 Цикл
			
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
				
				ВидимостьПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] и ПоказыватьПоказатели И
										(Не ЗначениеЗаполнено(ВидРасчета) Или (НЕ ЗначениеЗаполнено(СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"]) 
										Или СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 0 Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно) И ЗначениеЗаполнено(ВидРасчета));
				ВидимостьНаименованияПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] и ПоказыватьПоказатели И 
											(Не ЗначениеЗаполнено(ВидРасчета) Или СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 0 Или (НЕ ЗначениеЗаполнено(СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"]) Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно) И ЗначениеЗаполнено(ВидРасчета));
				
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = ВидимостьНаименованияПоказателя;
				
				// размеры показателя будут доступны только для видимых и изменяемых показателей
				Если ВидимостьПоказателя и ПоказыватьПоказатели Тогда
					
					Если Режим = "ПриРасчете" Тогда
					
						ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется
						Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно
						Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически;
						
					ИначеЕсли Режим = "РазовыеНачисленияИУдержания" Тогда
						ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически;
					КонецЕсли;
						
				КонецЕсли;
				
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
				
				// если отображается наименование - пропишем текст
				Если ВидимостьНаименованияПоказателя Тогда
					ЕстьПоказатели = Истина;
					Если ПоказыватьПоказатели Тогда
						ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
					ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] и ПоказыватьПоказатели Тогда
						ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если не ЕстьПоказатели Тогда
			Если ЗначениеЗаполнено(ВидРасчета) Тогда
				ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.Видимость			= Истина;
				ОформлениеСтроки.Ячейки["Показатель1"].ТолькоПросмотр				= Истина;
				ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.УстановитьТекст("<рассчитываются автоматически>");
			Иначе
				ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.Видимость			= Ложь;
				ОформлениеСтроки.Ячейки["Показатель1"].ТолькоПросмотр				= Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;
		
	КонецЦикла;

КонецПроцедуры //ОбработатьОтображениеПоказателейДляРасчета()

// Выводит строки показателей в документах ввода плановых начислений и удержаний
//
Процедура ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, СведенияОВидахРасчета, ИспользуютсяТарифныеРазряды = Истина, ВидРасчета = Неопределено, ТекущийВидРасчета = Ложь) Экспорт
		
	Если ВидРасчета = Неопределено Тогда
		Если ОформлениеСтроки.Ячейки.Найти("Надбавка") = Неопределено Тогда
			СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтроки.ВидРасчета);
		Иначе
			СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтроки.Надбавка);
		КонецЕсли;
	Иначе
		СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета);
	КонецЕсли;
	
	Если ТекущийВидРасчета Тогда
		Показатель						= "ТекущийПоказатель";
		Валюта							= "ТекущаяВалюта";
		ТарифныйРазряд					= "ТекущийТарифныйРазряд";
		НаименованиеПоказательТР		= "НаименованиеТекущийПоказательТР";
		ОформлениеСтроки.Ячейки.До.Видимость	= Ложь;
		ОформлениеСтроки.Ячейки.После.Видимость	= Ложь;
	Иначе
		Показатель						= "Показатель";
		Валюта							= "Валюта";
		ТарифныйРазряд					= "ТарифныйРазряд";
		НаименованиеПоказательТР		= "НаименованиеПоказательТР";
		ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;
	КонецЕсли;
	
	ТолькоПросмотрЯчеек = Ложь;
	
	ЕстьПоказатели = Ложь;
	Для СчПоказателей = 1 По 6 Цикл
		УстановитьТолькоПросмотр = ТолькоПросмотрЯчеек;
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			
			Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
				ЕстьПоказатели = Истина;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Истина;
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
				Если ИспользуютсяТарифныеРазряды Тогда
					ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
					ОформлениеСтроки.Ячейки[ТарифныйРазряд + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
			ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] И ИспользуютсяТарифныеРазряды Тогда
				ЕстьПоказатели = Истина;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки[Показатель + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки[Валюта + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Истина;
				ОформлениеСтроки.Ячейки[ТарифныйРазряд +СчПоказателей].Видимость = Истина;
			Иначе
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				Если ИспользуютсяТарифныеРазряды Тогда
					ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
					ОформлениеСтроки.Ячейки[ТарифныйРазряд + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
			ОформлениеСтроки.Ячейки[Показатель + СчПоказателей].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
			ОформлениеСтроки.Ячейки[Валюта + СчПоказателей].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
			ОформлениеСтроки.Ячейки[Валюта + СчПоказателей].ТолькоПросмотр = (НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"]) ИЛИ (УстановитьТолькоПросмотр);
			ОформлениеСтроки.Ячейки[Показатель + СчПоказателей].ТолькоПросмотр = УстановитьТолькоПросмотр;
		Иначе
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки[Показатель + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки[Валюта + СчПоказателей].Видимость = Ложь;
			Если ИспользуютсяТарифныеРазряды Тогда
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки[ТарифныйРазряд +СчПоказателей].Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если не ЕстьПоказатели Тогда
		Если ЗначениеЗаполнено(ВидРасчета) Тогда
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель1"].УстановитьТекст("<вводится ежемесячно>");
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель1"].Видимость = Истина;
		Иначе
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель1"].Видимость = Ложь;
		КонецЕсли;
		ОформлениеСтроки.Ячейки[Показатель+"1"].ТолькоПросмотр = Истина;
		Если ИспользуютсяТарифныеРазряды Тогда
			ОформлениеСтроки.Ячейки["НаименованиеПоказательТР1"].Видимость = Ложь;
			ОформлениеСтроки.Ячейки[ТарифныйРазряд + "1"].Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПриВыводеСтрокиПлановыхНачислений

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ ФОРМЫ

// в кадровых документах кнопка вызова Анализа неявок показывается не всем
Процедура УстановитьВидимостьКнопкиОткрытьНачисления(КоллекцияКнопок, ИмяКнопки) Экспорт
	
	Если Не ПравоДоступа("Использование",Метаданные.Обработки.АнализНеявок) Тогда
		УдаляемаяКнопка = КоллекцияКнопок.Найти(ИмяКнопки);
		Если УдаляемаяКнопка <> Неопределено Тогда
			КоллекцияКнопок.Удалить(УдаляемаяКнопка)
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает формат поля ввода значений показателей 
// на основе сведений о точности показателей
//
Процедура УстановитьФорматЗначенийПоказателей(ТабличноеПолеНачислений, СведенияОВидахРасчета, ИмяПоляВидРасчета = "ВидРасчета", УчитыватьТарифныйРазряд = Ложь) Экспорт
	
	Если ТабличноеПолеНачислений.ТекущиеДанные <> Неопределено Тогда
		ВидРасчета = ТабличноеПолеНачислений.ТекущиеДанные[ИмяПоляВидРасчета];
		СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета);
		Для СчПоказателей = 1 По Мин(СведенияОВидеРасчета["КоличествоПоказателей"], 6) Цикл
			Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] или (СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] И УчитыватьТарифныйРазряд) Тогда
				ТабличноеПолеНачислений.Колонки["Показатель" + СчПоказателей].ЭлементУправления.Формат = "ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УстановитьФорматЗначенийПоказателей

// Процедура дополняет соответствие данными оформления по показателям
//
Процедура ОбновитьДанныеОформленияЗначенийПоказателей(КэшДанныеОформления, Показатели) Экспорт
	
	Если КэшДанныеОформления = Неопределено Тогда
		КэшДанныеОформления = Новый Соответствие;
	КонецЕсли;
	
	// среди показателей оставляем только те, которых нет в кэше
	Для Каждого КэшЭлемент ИЗ КэшДанныеОформления Цикл
		Индекс = Показатели.Найти(КэшЭлемент.Ключ);
		Если Индекс <> Неопределено Тогда
			Показатели.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если Показатели.Количество() > 0 Тогда
		ДанныеОформленияПоказателей = ДанныеОформленияЗначенийПоказателей(Показатели);
		Для Каждого ДанныеОформленияПоказателя Из ДанныеОформленияПоказателей Цикл
			КэшДанныеОформления.Вставить(ДанныеОформленияПоказателя.Ключ, ДанныеОформленияПоказателя.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДанныеОформленияЗначенийПоказателей

Функция ДанныеОформленияЗначенийПоказателя(Показатель, КэшДанныеОформления = Неопределено) Экспорт
	
	Если КэшДанныеОформления <> Неопределено Тогда
		ДанныеОформленияПоказателя = КэшДанныеОформления[Показатель];
		Если ДанныеОформленияПоказателя <> Неопределено Тогда
			Возврат ДанныеОформленияПоказателя;
		КонецЕсли;
	КонецЕсли;
	
	Показатели = Новый Массив;
	Показатели.Добавить(Показатель);
	
	ДанныеОформленияПоказателей = ДанныеОформленияЗначенийПоказателей(Показатели);
	
	Возврат ДанныеОформленияПоказателей[Показатель];
	
КонецФункции // ДанныеОформленияЗначенийПоказателя

Функция ДанныеОформленияЗначенийПоказателей(Показатели)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|" + РаботаСДиалогамиПереопределяемый.ПолеЗапросаТочностьПредставленияПоказателя() + "
	|	ПоказателиВидаРасчета.Показатель.ТипПоказателя КАК ТипПоказателя,
	|	ПоказателиВидаРасчета.Показатель.ВидПоказателя КАК ВидПоказателя,
	|	ПоказателиВидаРасчета.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоказателиСхемМотивации.Ссылка КАК Показатель,
	|		ПоказателиСхемМотивации.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
	|	ГДЕ
	|		ПоказателиСхемМотивации.Ссылка В(&Показатели)) КАК ПоказателиВидаРасчета
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	3,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПоказателейСхемМотивации.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Показатели", Показатели);
	
	ДанныеОформленияПоказателей = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеОформленияПоказателя = Новый Структура("ТочностьПредставления, ТипПоказателя, ВидПоказателя");
		ЗаполнитьЗначенияСвойств(ДанныеОформленияПоказателя, Выборка);
		ДанныеОформленияПоказателей.Вставить(Выборка.Ссылка, ДанныеОформленияПоказателя);
	КонецЦикла;
	
	Возврат ДанныеОформленияПоказателей;
	
КонецФункции // ДанныеОформленияЗначенийПоказателей

Процедура УстановитьФорматЗначенийПоказателейОформленияСтрок(ОформленияСтрок, ДанныеОформленияЗначенийПоказателей) Экспорт
		
	// собираем показатели из коллекции
	Показатели = Новый Массив;
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Показатель = ОформлениеСтроки.ДанныеСтроки.Показатель;
		Если Показатели.Найти(Показатель) = Неопределено Тогда
			Показатели.Добавить(Показатель);
		КонецЕсли;
	КонецЦикла;
	
	РаботаСДиалогамиЗК.ОбновитьДанныеОформленияЗначенийПоказателей(ДанныеОформленияЗначенийПоказателей, Показатели);
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		ОформлениеСтроки.Ячейки.Значение.Текст = Формат(ДанныеСтроки.Значение, "ЧДЦ=" + ДанныеОформленияЗначенийПоказателей[ДанныеСтроки.Показатель].ТочностьПредставления);
	КонецЦикла;

КонецПроцедуры // УстановитьФорматЗначенийПоказателейОформленияСтрок

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИНФОРМАЦИИ В ФОРМЕ

// Процедура проверяет соответсвие страхового номера ПФР требованиям, устанавливает цвет
// текста в поле ввода и подсказку
//
// Параметры
//  СтраховойНомерПФР  - страховой номер физлица для проверки
//  ПолеВвода  - поле ввода в котором вводится ИНН
//
Процедура ПроверитьСтраховойНомерПФРФизлицаОформитьПолеВвода(СтраховойНомерПФР, ПолеВвода) Экспорт
	
	Если ЗначениеЗаполнено(СтрЗаменить(Лев(СтраховойНомерПФР,11),"-","")) и Не РегламентированнаяОтчетность.СтраховойНомерПФРСоответствуетТребованиям(СтраховойНомерПФР) Тогда
		ПолеВвода.ЦветТекстаПоля = ЦветаСтиля.ЦветОсобогоТекста;
		ПолеВвода.Подсказка = "Ошибка в страховом номере";
	Иначе
		ПолеВвода.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
		ПолеВвода.Подсказка = "";
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСтраховойНомерПФРФизлицаОформитьПолеВвода()

// Выводит строки показателей в документах ввода плановых начислений и удержаний
//
//	Параметры:
//		ДанныеСтроки - данные строки документа
//		ОформлениеСтроки - оформление строки документа
//		СведенияОВидахРасчета - соответствие содержащие сведения о видах расчетах документа 
//
Процедура ПриВыводеСтрокиНачисленийИУдержаний(ДанныеСтроки, ОформлениеСтроки, СведенияОВидахРасчета) Экспорт
	
	ДанныеСтрокиВидРасчета = ДанныеСтроки.ВидРасчета;
	
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтроки.ВидРасчета, "ПриРасчете");					
	
	ЕстьПоказатели = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеСтрокиВидРасчета) Тогда
		
		ЕстьПоказатели = Ложь; 
		СчПоказателей = 0;
		Для СчПоказателей = 1 По 6 Цикл
			
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
				
				ЕстьПоказатели = Истина;
				
				ВидимостьПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
				ВидимостьНаименованияПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"];
				
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = ВидимостьНаименованияПоказателя;
				
				// размеры показателя будут доступны только для видимых и изменяемых показателей
				Если ВидимостьПоказателя Тогда
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется
					Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически
					Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно;
				КонецЕсли;
				
				// если отображается наименование - пропишем текст
				Если ВидимостьНаименованияПоказателя Тогда		
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
					ВидимостьПоказателя = СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"];
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр	= Не ВидимостьПоказателя Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно
					Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически;
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"];			
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);			
				КонецЕсли;
				
				Если ВидимостьПоказателя Тогда
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
				КонецЕсли;
				
			Иначе
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если не ЕстьПоказатели Тогда
			ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.УстановитьТекст("<рассчитываются автоматически>");
			ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.Видимость			= Истина;
			ОформлениеСтроки.Ячейки["Показатель1"].ТолькоПросмотр				= Истина;
		КонецЕсли;
	Иначе
		
		Для СчПоказателей = 1 По 6 Цикл
			// настроим видимость ячеек
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;
	
КонецПроцедуры //ПриВыводеСтрокиНачисленийИУдержаний

// Выводит в колонке Способ расчета списка в.р. вместо слов "Произвольная формула"
//	эту самую формулу
// Работает в контексте обработчика ПриПолученииДанных. 
// Предполагается, что в соответствующем табличном поле есть колонка СпособРасчета,
// 	а в списке присутствуют: Ссылка и ФормулаРасчетаПредставление
//
//	Параметры:
//		ОформленияСтрок - коллекция оформлений строки табличного поля списка в.р.
//
Процедура ВыводПроизвольнойФормулыВСтрокахСпискаВидовРасчета(ОформленияСтрок) Экспорт

	МассивВР = Новый Массив;
	ИмяПВР = Неопределено;
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Если ДанныеСтроки.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
			МассивВР.Добавить(ДанныеСтроки.Ссылка);
			Если ИмяПВР = Неопределено Тогда
				ИмяПВР = ДанныеСтроки.Ссылка.Метаданные().Имя
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивВР.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияОрганизацийПоказатели.Ссылка КАК Ссылка,
	|	НачисленияОрганизацийПоказатели.НомерСтроки КАК НомерСтроки,
	|	НачисленияОрганизацийПоказатели.Показатель.Наименование КАК Показатель
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК НачисленияОрганизацийПоказатели
	|ГДЕ
	|	НачисленияОрганизацийПоказатели.Ссылка В(&Ссылки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	Запрос.УстановитьПараметр("Ссылки", МассивВР);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОсновныеНачисленияОрганизаций", ИмяПВР);
	Показатели = Запрос.Выполнить().Выгрузить();
	Показатели.Индексы.Добавить("Ссылка");
	СтруктураОтбора = Новый Структура("Ссылка");
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		Если ДанныеСтроки.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
			СтруктураОтбора.Ссылка = ДанныеСтроки.Ссылка;
			ФормулаРасчета	= СтрЗаменить(ДанныеСтроки.ФормулаРасчетаПредставление, "ПроведениеРасчетов.", "");
			Описание = ПроведениеРасчетов.ПолучитьHTLMКодФормулыРасчета(ФормулаРасчета, Показатели.Скопировать(СтруктураОтбора), "Текст");
			Ячейки.СпособРасчета.УстановитьТекст(Описание);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеОтбораПоОрганизацииПоУмолчанию(Форма, ЭлементОтбора = Неопределено, ЭлементФормы, ПараметрОтборПоРегистратору = Неопределено, ИспользоватьГоловнуюОрганизацию = Истина, ТекущийПользователь, ТекстЗаголовка = Неопределено) Экспорт
	
	ЭлементФормы.ТолькоПросмотр = Ложь;
	
	Если ЗначениеЗаполнено(ПараметрОтборПоРегистратору) Тогда
		
		МетаданныеДокумента = ПараметрОтборПоРегистратору.Метаданные();
		
		Если МетаданныеДокумента.Реквизиты.Найти("СторнируемыйДокумент") <> Неопределено Тогда
			
			МетаданныеДокумента 		= ПараметрОтборПоРегистратору.СторнируемыйДокумент.Метаданные();
			ПараметрОтборПоРегистратору = ПараметрОтборПоРегистратору.СторнируемыйДокумент;
			
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
			
			Если ИспользоватьГоловнуюОрганизацию Тогда
				Организация = ОбщегоНазначения.ГоловнаяОрганизация(ПараметрОтборПоРегистратору.Организация);
			Иначе
				Организация = ПараметрОтборПоРегистратору.Организация;
			КонецЕсли;
			
			ЭлементОтбора.Значение = Организация;
			ЭлементФормы.ТолькоПросмотр = Истина;
			Если ТекстЗаголовка <> Неопределено Тогда
				Форма.Заголовок = ТекстЗаголовка + Организация.Наименование;
			КонецЕсли; 
			
		КонецЕсли;
		
		ЭлементОтбора.Использование = Истина;
		
	Иначе
		
		Если ИспользоватьГоловнуюОрганизацию Тогда 
			Организация = ОбщегоНазначения.ГоловнаяОрганизация(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяОрганизация"));
		Иначе
			Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяОрганизация");
		КонецЕсли;
		
		Если ЭлементОтбора <> Неопределено Тогда
			ЭлементОтбора.Значение = Организация;
			ЭлементОтбора.Использование = Не Организация.Пустая();
		КонецЕсли;
		
		Если ТекстЗаголовка <> Неопределено Тогда
			Если Организация.Пустая() Тогда
				Форма.Заголовок = СтрЗаменить(ТекстЗаголовка,ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации"),ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организаций"));
			Иначе 
				Форма.Заголовок = ТекстЗаголовка + Организация;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
КонецПроцедуры

// Выводит надпись и соответствующую ей картинку
//
// Параметры
//  ЭУНадпись, ЭУКартинка - элементы управления формы, соответственно надпись и картинка
//  ТекстСообщения - строка - выводимое сообщение
//  ВажностьСообщения - строка - определяет расцветку текста и картинку
//		допустимые значения: "СообщениеОПроблемах", "ВажнаяИнформация" и "Информация"
//
Процедура ПоказатьИнформациюОДокументе(ЭУНадпись = Неопределено, ЭУКартинка = Неопределено, ТекстСообщения = "", ВажностьСообщения = "") Экспорт 
	
	Если ЭУНадпись = Неопределено Или ЭУКартинка = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ВажностьСообщения = "ВажнаяИнформация" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеВажнаяИнформация;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияВажнойИнформации;
	ИначеЕсли ВажностьСообщения = "СообщениеОПроблемах" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеОПроблемах;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияОПроблемах;
	ИначеЕсли ВажностьСообщения = "Ошибка" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеОшибка;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияОПроблемах;
	Иначе
		ЭУКартинка.Картинка	= БиблиотекаКартинок.СообщениеИнформация;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияИнформации;
	КонецЕсли;
	ЭУНадпись.Заголовок = ТекстСообщения;
	
КонецПроцедуры // ПоказатьИнформациюОДокументе()

Процедура ОбработатьЗакрытиеФормы(Отказ, СтандартнаяОбработка, ФормаОбъекта) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
	
	Если ФормаОбъекта.Модифицированность Тогда
		Ответ = РаботаСДиалогами.ЗадатьВопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Или Ответ = КодВозвратаДиалога.Таймаут Тогда
			//Запишем документ
			Попытка
				Отказ = Не ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				РаботаСДиалогами.ВывестиПредупреждение("Операция не выполнена!");
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	ФормаОбъекта.ЭлементыФормы.ПанельОткрытьИсходный.Свертка = РежимСверткиЭлементаУправления.Нет;
	ФормаОбъекта.ЭлементыФормы.ПанельОткрытьИсправление.Свертка = РежимСверткиЭлементаУправления.Нет;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОБРАБОТКИ МЕНЮ

// Процедура вызывается формирования кнопки "Подбор" для формы видов расчетов Планов Видов Расчетов.
//
// Параметры:
//  СсылкаПВР 	   	   - ссылка на ПВР;
//  ФормаЭлемента 	   - Форма вида расчета.
//  СтруктураДействий  - структура с действиями, которые будут вызывать формируемые кнопки
//  ВедущиеВидыРасчета - булево, Истина - если нужно формировать кнопку в командной
//						 панели ТЧ "ВедущиеВидыРасчета".
//
Процедура СоздатьКнопкуПодбораДляПВР(СсылкаПВР, ФормаЭлемента, СтруктураДействий, ВедущиеВидыРасчета = Ложь) Экспорт
	
	МассивДоступныхТипов = Новый Массив;
	
	КоллекцияБазовыхВидовРасчета = Метаданные.ПланыВидовРасчета[СсылкаПВР.Метаданные().Имя].БазовыеВидыРасчета;
	КнопкаБазовыхРасчетов = ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор;
	
	Если КоллекцияБазовыхВидовРасчета.Количество() > 1 Тогда
		
		КнопкаБазовыхРасчетов.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
		
		Если ВедущиеВидыРасчета Тогда
			КнопкаВедущихРасчетов = ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор;
			КнопкаВедущихРасчетов.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
		КонецЕсли;
		
		Для каждого СтрокаКоллекции Из КоллекцияБазовыхВидовРасчета Цикл
			
			ДействиеПоКнопке = СтруктураДействий.ПодМенюБазовыхВидовРасчета;
			НоваяКнопкаБазовые = КнопкаБазовыхРасчетов.Кнопки.Добавить(СтрокаКоллекции.Имя, ТипКнопкиКоманднойПанели.Действие, СтрокаКоллекции.Синоним, ДействиеПоКнопке);
			НоваяКнопкаБазовые.ИзменяетДанные = Истина;
			
			
			Если ВедущиеВидыРасчета Тогда
				
				ДействиеПоКнопке = СтруктураДействий.ПодМенюВедущихВидовРасчета;
				НоваяКнопкаВедущие = КнопкаВедущихРасчетов.Кнопки.Добавить(СтрокаКоллекции.Имя, ТипКнопкиКоманднойПанели.Действие, СтрокаКоллекции.Синоним, ДействиеПоКнопке);
				НоваяКнопкаВедущие.ИзменяетДанные = Истина;
				
				МассивДоступныхТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + СтрокаКоллекции.Имя));
				
			КонецЕсли;
			
		КонецЦикла; 
		
	Иначе
		
		КнопкаБазовыхРасчетов.ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
		КнопкаБазовыхРасчетов.Действие  = СтруктураДействий.КнопкаБазовыхВидовРасчета;
		
		Если ВедущиеВидыРасчета Тогда
			
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор.Действие = СтруктураДействий.КнопкаВедущихВидовРасчета;
			
			Для каждого СтрокаКоллекции Из КоллекцияБазовыхВидовРасчета Цикл
				
				МассивДоступныхТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + СтрокаКоллекции.Имя));
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВедущиеВидыРасчета Тогда
		
		ФормаЭлемента.ЭлементыФормы.ВедущиеВидыРасчета.Колонки.ВидРасчета.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов(МассивДоступныхТипов);
		Если КоллекцияБазовыхВидовРасчета.Количество() = 1 Тогда
			ФормаЭлемента.ЭлементыФормы.ВедущиеВидыРасчета.Колонки.ВидРасчета.ЭлементУправления.ВыбиратьТип = Ложь;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // СоздатьКнопкуПодбораДляПВР()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРЕДСТАВЛЕНИЯ ИНФОРМАЦИИ В ФОРМЕ

// По описателям состояния расчетного документа (флажкам) формирует текст инфо-строки и важность сообщения
//
// Параметры
//	НеЗаполнен,ЗаполненСОшибками,Рассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Отсторнирован - булево (все)
//		описывают достижение документом того или иного состояния
//
// Возвращаемое значение:
//	Структура из двух строковых значений - ТекстСообщения и ВажностьСообщения
//
Функция ПолучитьОписаниеРасчетногоДокумента(Заполнен = Ложь, ЗаполненСОшибками = Ложь, Рассчитан = Ложь, Проведен = Ложь, ЭтоИсправление = Ложь, ДокументИсправлен = Ложь, Отсторнирован = Ложь, ИмеетПродолжение = Ложь, ЯвляетсяПродолжением = Ложь) Экспорт 
	
	ТекстСообщения = "";
	ВажностьСообщения = "";
	
	Если Не Заполнен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ не заполнен";
	ИначеЕсли ЭтоИсправление Тогда
		ТекстСообщения = "Документ является исправлением документа прошлого периода; ";
		Если ДокументИсправлен Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			Если Не Рассчитан Тогда
				ТекстСообщения = ТекстСообщения + "не был рассчитан, но ";
			КонецЕсли;
			ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
		ИначеЕсли ЗаполненСОшибками Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			ТекстСообщения = ТекстСообщения + "поля документа заполнены не полностью или неверно";
		ИначеЕсли Не Рассчитан Тогда
			ВажностьСообщения = "ВажнаяИнформация";
			ТекстСообщения = ТекстСообщения + "документ не рассчитан";
		ИначеЕсли Рассчитан И Не Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "рассчитан, но не проведен";
		ИначеЕсли Рассчитан И Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "рассчитан и проведен";
		КонецЕсли;
	ИначеЕсли ДокументИсправлен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ ";
		Если Не Рассчитан Тогда
			ТекстСообщения = ТекстСообщения + "не был рассчитан, но ";
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
	ИначеЕсли Отсторнирован Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ был отменен полностью (отсторнирован); редактирование документа запрещено";
	ИначеЕсли ЗаполненСОшибками Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Поля документа заполнены не полностью или неверно";
	ИначеЕсли Не Рассчитан Тогда
		ВажностьСообщения = "ВажнаяИнформация";
		ТекстСообщения = "Документ не рассчитан";
	ИначеЕсли Рассчитан И Не Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ рассчитан, но не проведен";
	ИначеЕсли Рассчитан И Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ рассчитан и проведен";
	КонецЕсли;
	
	ТекстПродолжений = "";
	Если ЯвляетсяПродолжением Тогда
		ТекстПродолжений = "Этот больничный является б/л-продолжением. ";
	КонецЕсли;
	Если ИмеетПродолжение Тогда
		ТекстПродолжений = ТекстПродолжений + "Этот больничный имеет продолжение. ";
	КонецЕсли;
	
	Возврат Новый Структура("ТекстСообщения,ВажностьСообщения", ТекстПродолжений + ТекстСообщения, ВажностьСообщения)
	
КонецФункции

Функция ПолучитьОписаниеКадровогоДокумента(Заполнен = Ложь, ЗаполненСОшибками = Ложь, Проведен = Ложь, ЭтоИсправление = Ложь, ДокументИсправлен = Ложь, ПеренесенИз77 = Ложь)
	
	ТекстСообщения = "";
	ВажностьСообщения = "";
	
	Если ПеренесенИз77 Тогда
		ВажностьСообщения = "ВажнаяИнформация";
		ТекстСообщения = "Документ перенесен из программы ""1С:Зарплата и кадры 7.7"". При проведении документа движения формироваться не будут";
		
	ИначеЕсли Не Заполнен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ не заполнен";
		
	ИначеЕсли ЭтоИсправление Тогда
		ТекстСообщения = "Документ является исправлением документа; ";
		Если ДокументИсправлен Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
		ИначеЕсли ЗаполненСОшибками Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			ТекстСообщения = ТекстСообщения + "поля документа заполнены не полностью или неверно";
		ИначеЕсли Не Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "не проведен";
		ИначеЕсли Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "проведен";
		КонецЕсли;
		
	ИначеЕсли ДокументИсправлен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ ";
		ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
		
	ИначеЕсли ЗаполненСОшибками Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Поля документа заполнены не полностью или неверно";
		
	ИначеЕсли Не Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ не проведен";
		
	ИначеЕсли Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ проведен";
		
	КонецЕсли;
	
	Возврат Новый Структура("ТекстСообщения,ВажностьСообщения", ТекстСообщения, ВажностьСообщения)
	
КонецФункции

// Функция возвращает представление периода по переданной дате
// как месяц и год в родительном падеже
// вызывается из форм настройки параметров
Функция ПолучитьПредставлениеПериодаКакМесяцГодРодительныйПадеж(ДатаПериода) Экспорт
	
	ПериодСтрокой = РаботаСДиалогами.ДатаКакМесяцПредставление(ДатаПериода);
	УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ПериодСтрокой, 2, Перечисления.ПолФизическихЛиц.Мужской, ПериодСтрокой);
	Возврат ПериодСтрокой;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ В ФОРМЕ

// Процедура заполняет вычисляемую колонку ТЧ документа "ТабельныйНомерСтрока"
//
// Параметры
//  ТЧДокумента  – Табличное поле
//  ОформленияСтрок – Коллекция значений типа ОформлениеСтроки табличного поля ТЧДокумента
//
Процедура УстановитьЗначенияКолонкиТабельныйНомерСтрока(ТЧДокумента, ОформленияСтрок) Экспорт
	
	Если ТЧДокумента.Колонки.Найти("ТабельныйНомерСтрока") = Неопределено 
		Или Не ТЧДокумента.Колонки.ТабельныйНомерСтрока.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	МассивСотрудников = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		МассивСотрудников.Добавить(СтрокаТабличнойЧасти.ДанныеСтроки.Сотрудник);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Код КАК ТабельныйНомер,
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&парамМассивСотрудников)";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("парамМассивСотрудников", МассивСотрудников);
	
	ТабельныеНомера = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТабельныеНомера[Выборка.Сотрудник] = Выборка.ТабельныйНомер;
	КонецЦикла; 
	
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		СтрокаТабличнойЧасти.Ячейки.ТабельныйНомерСтрока.УстановитьТекст(ТабельныеНомера[СтрокаТабличнойЧасти.Ячейки.Сотрудник.Значение]);
	КонецЦикла;
	
КонецПроцедуры // УстановитьЗначенияКолонкиТабельныйНомерСтрока()

// Процедура управляет валютой в зависимости от способа расчета,
// а также оформлением других полей, которое зависит от выбранного вида расчета
//
Процедура ПриИзмененииВидаРасчета(ИмяОбъекта, Значение, ЭлементыФормы, мСведенияОВидахРасчета, мВалюта) Экспорт
	
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, Значение);
	
	Для СчПоказателей = 1 По 6 Цикл
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			ВалютаПоказателя = СведенияОВидеРасчета["ВалютаПоказателя" + СчПоказателей];
			Если СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей] = ?(ЗначениеЗаполнено(ВалютаПоказателя), ВалютаПоказателя, мВалюта);
			Иначе
				Если СчПоказателей <= СведенияОВидеРасчета.ФактКоличествоПоказателей Тогда
					ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей] = ВалютаПоказателя;
				КонецЕсли;
			КонецЕсли;
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Показатель" + СчПоказателей] = 0;
		Иначе
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей]		= Справочники.Валюты.ПустаяСсылка();
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Показатель" + СчПоказателей]	= 0;
		КонецЕсли;
	КонецЦикла;
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы[ИмяОбъекта], мСведенияОВидахРасчета);
	
КонецПроцедуры // ПриИзмененииВидаРасчета

// Процедура обслуживает обработчики события НачалоВыбора ЭУ "СторнируемыйДокумент" или "ДокументОснование" табличной части
Процедура ОбработкаНачалоВыбораСторнируемогоДокумента(Элемент, Форма, Ссылка, Организация, СтандартнаяОбработка, ЭтоОсновныеНачисления, ДокументМенеджер = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ДокументМенеджер = Неопределено Тогда
		
		ИмяРегистра = ?(ЭтоОсновныеНачисления, "ОсновныеНачисленияРаботниковОрганизаций", "ДополнительныеНачисленияРаботниковОрганизаций");	
		
		СпискиРегистраторов = глЗначениеПеременной("глСпискиРегистраторов");
		СписокДляВыбора = Новый СписокЗначений;
		СпискиРегистраторов.Свойство(ИмяРегистра, СписокДляВыбора);
		
		ЭлементСписка = Форма.ВыбратьИзСписка(СписокДляВыбора,Элемент,);
		
		Если Не ЭлементСписка = Неопределено Тогда
			ФормаВыбора = ЭлементСписка.Значение.ПолучитьФормуВыбора( , Элемент, Ссылка);
			Если Не ЭлементСписка.Значение = Документы.Сторнирование Тогда
				ФормаВыбора.Отбор.Организация.Установить(Организация);
			КонецЕсли;
			ФормаВыбора.ПараметрТекущаяСтрока	= ?(ТипЗнч(ЭлементСписка.Значение.ПустаяСсылка()) = ТипЗнч(Элемент.Значение), Элемент.Значение, Неопределено);
			ФормаВыбора.Открыть();
		КонецЕсли;
		
	Иначе
		
		ФормаВыбора = ДокументМенеджер.ПолучитьФормуВыбора( , Элемент, Ссылка);
		Если Не ДокументМенеджер = Документы.Сторнирование Тогда
			ФормаВыбора.Отбор.Организация.Установить(Организация);
		КонецЕсли;
		ФормаВыбора.ПараметрТекущаяСтрока	= Элемент.Значение;
		ФормаВыбора.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ИЗМЕНЕНИЯ ВИДИМОСТИ ПАНЕЛЕЙ

// Процедура управляет отображением панелей формы путем свертки в низ
// Пареметры
//	 Панель - контейнер, в котором находятся расчетный листок и разделитель
//	 ОтображатьПанель - булево, неопределено - инициализация при открытии формы
//	 Надпись - заголовок расчетного листка
//	 ПанельРасчетногоЛистка - панель расчетного листка
//	 Разделитель - разделитель верхней и нижней панели
//
Процедура ИзменитьВидимостьПанелиРасчетногоЛистка(Панель, ОтображатьПанель = Неопределено, Надпись, ПанельРасчетногоЛистка, Разделитель) Экспорт
	
	// Инициализация при открытии формы
	Если ОтображатьПанель = Неопределено Тогда
		ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Низ;
		Разделитель.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ОтображатьПанель Тогда
		Если ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Низ Тогда
			
			// развернем панель, привязки на форме остались правильные
			ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// перепривяжем ЭУ для работы с развернутой панелью
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Низ);
			Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Низ);
			ПанельРасчетногоЛистка.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Надпись, ГраницаЭлементаУправления.Низ);
			
		КонецЕсли;
	Иначе
		Если ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			
			// перепривяжем ЭУ перед сверткой панели в низ
			ПанельРасчетногоЛистка.УстановитьПривязку(ГраницаЭлементаУправления.Верх);
			Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПанельРасчетногоЛистка, ГраницаЭлементаУправления.Верх);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Надпись, ГраницаЭлементаУправления.Верх);
			ПанельРасчетногоЛистка.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ПанельРасчетногоЛистка, ГраницаЭлементаУправления.Низ);
			ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Низ;
			
		КонецЕсли;
	КонецЕсли;
	
	Разделитель.Доступность = ОтображатьПанель;
	
КонецПроцедуры

Процедура ИзменитьВидимостьПанелиПоГоризонтали(Форма, ОтображатьПанель, ИмяОсновнойПанели, ПостфиксЭлементов) Экспорт
	
	Перем Элемент, Граница, Пусто;
	
	ОсновнаяПанель	= Форма.ЭлементыФормы[ИмяОсновнойПанели];
	Панель			= Форма.ЭлементыФормы["Панель" + ПостфиксЭлементов];
	Разделитель		= Форма.ЭлементыФормы["Разделитель" + ПостфиксЭлементов];
	
	Если ОтображатьПанель Тогда
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Право Тогда
			// установить привязку основной панели к разделителю
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Разделитель, ГраницаЭлементаУправления.Лево);
			
			// развернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// развернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			Если Панель.Ширина > Форма.Ширина / 2 Тогда
				// если максимизировать форму с закрытой справкой, а потом открыть справку, то форма
				// будет выглядеть очень некрасиво
				// поэтому необходимо ограничить ширину панели справки в случаях, когда справка получается на шире чем 1/2 формы
				РазницаВШирине = Форма.Ширина - 250 - Разделитель.Лево;
			Иначе
				РазницаВШирине = Панель.Ширина - Макс(250, Мин(Форма.Ширина - 350, Панель.Ширина));
			КонецЕсли;
			Если РазницаВШирине < 0 Тогда
				РазницаВШирине = 0;
			КонецЕсли;
			
			// восстановить привязки разделителя
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Форма.Панель, ГраницаЭлементаУправления.Право);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Разделитель, ГраницаЭлементаУправления.Лево);
			
			// установить привязку панели справки к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Разделитель, ГраницаЭлементаУправления.Право);
			
			Разделитель.Лево = Разделитель.Лево + РазницаВШирине;
		КонецЕсли;
	Иначе
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			ШиринаОсновнойПанели = ОсновнаяПанель.Ширина + Разделитель.Ширина + Панель.Ширина;
			
			// сбросить привязку панели к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
			
			// установить привязку разделителя к панели справки
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Лево);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Лево);
			
			// свернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Право;
			// свернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Право;
			
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Право);
			
			// установить привязку основной панели к форме
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.Панель, ГраницаЭлементаУправления.Право);
			ОсновнаяПанель.Ширина = ШиринаОсновнойПанели;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьВидимостьПанелиПоВертикали(Форма, ОтображатьПанель, ИмяОсновнойПанели, ПостфиксЭлементов) Экспорт
	
	Перем Элемент, Граница, Пусто;
	
	ОсновнаяПанель	= Форма.ЭлементыФормы[ИмяОсновнойПанели];
	Панель			= Форма.ЭлементыФормы["Панель" + ПостфиксЭлементов];
	Разделитель		= Форма.ЭлементыФормы["Разделитель" + ПостфиксЭлементов];
	
	Если ОтображатьПанель Тогда
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
			// установить привязку основной панели к разделителю
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
			
			// развернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// развернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// восстановить привязки разделителя
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Форма.Панель, ГраницаЭлементаУправления.Верх);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
			
			// установить привязку панели справки к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Верх);
		КонецЕсли;
	Иначе
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			ВысотаОсновнойПанели = ОсновнаяПанель.Высота + (ОсновнаяПанель.Верх - Панель.Верх);
			
			// сбросить привязку панели к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Низ);
			
			// установить привязку разделителя к панели справки
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Низ);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			
			// свернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Верх;
			// свернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Верх;
			
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Верх);
			
			// установить привязку основной панели к форме
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Форма.Панель, ГраницаЭлементаУправления.Верх);
			ОсновнаяПанель.Верх		= Панель.Верх;
			ОсновнаяПанель.Высота	= ВысотаОсновнойПанели;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьВидимостьПанелиПоГоризонталиЛево(Форма, ОтображатьПанель, ПраваяПанель, ЛеваяПанель, Разделитель) Экспорт
	
	Если ОтображатьПанель Тогда
		Если ЛеваяПанель.Свертка = РежимСверткиЭлементаУправления.Лево Тогда
			// установить привязку основной панели к разделителю
			ПраваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Разделитель, ГраницаЭлементаУправления.Право);
			
			// развернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// развернуть панель
			ЛеваяПанель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// Переместим разделитель к левой панели
			Разделитель.Лево = ЛеваяПанель.Лево + ЛеваяПанель.Ширина;
			
			// восстановить привязки разделителя
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.Панель, ГраницаЭлементаУправления.Лево);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Разделитель, ГраницаЭлементаУправления.Право);
			
			// установить привязку панели справки к разделителю
			ЛеваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Разделитель, ГраницаЭлементаУправления.Лево);
			
			// Ширину определим от текущего размера формы, за минусом отступов по 8 слева и справа и шириной левой панели и разделителя
			ПраваяПанель.Ширина	= Форма.Ширина - ЛеваяПанель.Ширина - Разделитель.Ширина - 8 * 2;
			ПраваяПанель.Лево	= Разделитель.Лево + Разделитель.Ширина;
		КонецЕсли;
	Иначе
		Если ЛеваяПанель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			ШиринаОсновнойПанели = ПраваяПанель.Ширина + Разделитель.Ширина + ЛеваяПанель.Ширина;
			
			// сбросить привязку панели к разделителю
			ЛеваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право);
			
			// установить привязку разделителя к панели справки
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЛеваяПанель, ГраницаЭлементаУправления.Право);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЛеваяПанель, ГраницаЭлементаУправления.Право);
			
			// свернуть панель
			ЛеваяПанель.Свертка = РежимСверткиЭлементаУправления.Лево;
			// свернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Лево;
			
			ЛеваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЛеваяПанель, ГраницаЭлементаУправления.Лево);
			
			// установить привязку основной панели к форме
			ПраваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Форма.Панель, ГраницаЭлементаУправления.Лево);
			ПраваяПанель.Лево	= 8;
			ПраваяПанель.Ширина	= ШиринаОсновнойПанели;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет отображением панелей формы путем свертки в низ
// Пареметры
//	 Панель - Панель, к низу которой производим привязку панели ВерхняяПанель при свертке панели НижняяПанель
//	 ОтображатьПанель - булево
//	 ВерхняяПанель - панель формы, которая всегда видима
//	 НижняяПанель - панель формы, которую сворачиваем в низ
//	 Разделитель - разделитель верхней и нижней панели
//
Процедура ИзменитьВидимостьПанелиПоВертикалиНиз(Панель, ОтображатьПанель, ВерхняяПанель, НижняяПанель, Разделитель) Экспорт
	
	Если ОтображатьПанель Тогда
		
		Если НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Низ Тогда
			// необходимо развернуть панель
			
			// текущая высота основной панели
			НачальнаяВысотаОсновнойПанели = ВерхняяПанель.Высота;
			
			// на основную панель отдаем половину высоты
			ВерхняяПанель.Высота = Окр(НачальнаяВысотаОсновнойПанели * 0.6 ,0);
			
			// развернем разделитель, устатановим его внизу основной панели, настроим привязки
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			Разделитель.Верх = ВерхняяПанель.Верх + ВерхняяПанель.Высота;
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Низ);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
			
			// развернем нижнюю панель,установим ее к разделителю, настроим привязки
			НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Нет;
			НижняяПанель.Верх = Разделитель.Верх + 6;
			НижняяПанель.Высота = НачальнаяВысотаОсновнойПанели - ВерхняяПанель.Высота - 6;
			НижняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Верх);
			НижняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			
		КонецЕсли;
		
		ВерхняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Верх);
		
	Иначе // надо скрыть нижнюю панель	
		
		Если НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			
			//это та высота основной панели, которую необходимо установить
			ВысотаОсновнойПанели = НижняяПанель.Верх + НижняяПанель.Высота - ВерхняяПанель.Верх;
			
			// свернем элементы
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Низ;
			НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Низ;
			
			//перенесем ЭУ в низ формы и переопределим привязки
			Разделитель.Верх  = ВысотаОсновнойПанели;
			НижняяПанель.Верх = ВысотаОсновнойПанели;
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			НижняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			
			// распахнем и привяжем основную панель
			ВерхняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			ВерхняяПанель.Высота = ВысотаОсновнойПанели;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЛАНОВ ВИДОВ РАСЧЕТА

Процедура УстановитьОтборыИСверткуПоказателей(ЭлементыФормы, Показатели, ПроизвольнаяФормулаРасчета = Истина) Экспорт
	
	ПоказателиДляОтбора = Новый СписокЗначений;
	Если ПроизвольнаяФормулаРасчета Тогда
		Для Каждого СтрокаПоказатель Из Показатели Цикл
			Показатель = СтрокаПоказатель.Показатель;
			Если Показатель.ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется И Не Показатель.Предопределенный
				И Не (Показатель.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная Или Показатель.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
				И Не (Показатель.ТарифнаяСтавка ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная
				ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная 
				ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)Тогда
				
				ПоказателиДляОтбора.Добавить(Показатель);
			КонецЕсли;
		КонецЦикла;
		ЭлементыФормы.Показатели.ОтборСтрок.Показатель.Использование = Истина;
		ЭлементыФормы.Показатели.ОтборСтрок.Показатель.ВидСравнения = ВидСравнения.ВСписке;
		ЭлементыФормы.Показатели.ОтборСтрок.Показатель.Значение = ПоказателиДляОтбора;
	КонецЕсли;
	
	ИзменитьВидимостьПанелиПоВертикалиНиз(ЭлементыФормы.ПанельПредставлениеФормулы, ПоказателиДляОтбора.Количество() <> 0, ЭлементыФормы.СпособРасчетаПредставление, ЭлементыФормы.ПанельПоказателей, ЭлементыФормы.РазделительПоказателей)
	
КонецПроцедуры

Функция ПроверитьПВРНаПустыеСтрокиВТЧ(ВидРасчета, ЕстьВытесняющиеВидыРасчета = Ложь) Экспорт
	
	КоничествоСтрок = ВидРасчета.БазовыеВидыРасчета.Количество() - 1;
	НомерСтроки = 0;
	Пока НомерСтроки <= КоничествоСтрок Цикл
		СтрокаБазовыйРасчет = ВидРасчета.БазовыеВидыРасчета[НомерСтроки];
		Если Не ЗначениеЗаполнено(СтрокаБазовыйРасчет.ВидРасчета) Тогда
			ВидРасчета.БазовыеВидыРасчета.Удалить(НомерСтроки );
			КоничествоСтрок = КоничествоСтрок - 1;
		Иначе
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	КоничествоСтрок = ВидРасчета.ВедущиеВидыРасчета.Количество() - 1;
	НомерСтроки = 0;
	Пока НомерСтроки <= КоничествоСтрок Цикл
		СтрокаВедущийРасчет = ВидРасчета.ВедущиеВидыРасчета[НомерСтроки];
		Если Не ЗначениеЗаполнено(СтрокаВедущийРасчет.ВидРасчета) Тогда
			ВидРасчета.ВедущиеВидыРасчета.Удалить(НомерСтроки );
			КоничествоСтрок = КоничествоСтрок - 1;
		Иначе
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВытесняющиеВидыРасчета Тогда
		
		КоничествоСтрок = ВидРасчета.ВытесняющиеВидыРасчета.Количество() - 1;
		НомерСтроки = 0;
		Пока НомерСтроки <= КоничествоСтрок Цикл
			СтрокаВытесняющейРасчет = ВидРасчета.ВытесняющиеВидыРасчета[НомерСтроки];
			Если Не ЗначениеЗаполнено(СтрокаВытесняющейРасчет.ВидРасчета) Тогда
				ВидРасчета.ВытесняющиеВидыРасчета.Удалить(НомерСтроки );
				КоничествоСтрок = КоничествоСтрок - 1;
			Иначе
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецФункции

// Процедура открывает редактор формуль расчета из вида расчета
//
// Параметры
//  ФормаПВР  - форма вида расчета из которой вызывается редактор формул расчета
//	Показатели - таблица показателей 
//  Наименование - наименование вида расчета
//  ФормулаРасчета - формула расчета
//
Процедура ОткрытьФормуРедактированияФормулы(ФормаПВР, Показатели, Наименование, ФормулаРасчетаПредставление, ВидРасчета, ВидПВР = "") Экспорт 
	
	РедакторФормулРасчета = ПолучитьОбщуюФорму("РедакторФормулРасчета", ФормаПВР);
	РедакторФормулРасчета.Заголовок = "Редактирование формулы расчета: " + Наименование;
	
	ПоказателиДляФормыВвода = Новый СписокЗначений;
	
	Для Каждого Показатель Из Показатели Цикл
		
		ПоказателиДляФормыВвода.Добавить(Показатель.Показатель);
		
	КонецЦикла;
	
	ФормулаРасчета = ПроведениеРасчетов.ПолучитьHTLMКодФормулыРасчета(ФормулаРасчетаПредставление, Показатели, "Текст", Истина);
	
	РедакторФормулРасчета.ВидРасчета		= ВидРасчета;
	РедакторФормулРасчета.Показатели		= ПоказателиДляФормыВвода;
	РедакторФормулРасчета.ФормулаРасчета	= ФормулаРасчета;
	//РедакторФормулРасчета.ФормулаРасчетаПредставление	= ФормулаРасчетаПредставление;
	РедакторФормулРасчета.ВидПВР			= ВидПВР;
	РедакторФормулРасчета.Открыть();

КонецПроцедуры //ОткрытьФормуРедактированияФормулы

// Процедура открывает форму выбора ПланыВидовРасчета.ОсновныеНачисленияОрганизаций
// Отборы передаются в структуре СтруктураПараметровОтбора
//
// Параметры:
//	Владелец 			- владелец формы
//	Ключ 				- ключ, ссылка на ЭУ из которого открывается форма
//	СтруктураПараметровОтбора - Структура с параметрами отбора
//	СтандартнаяОбработка- Булево
//	ТекущееЗначение 	- ссылка на элемент, на котором необходимо спозиционироваться при открытии формы
//  СписокПредопределенныхВР - список значений с предопределенными ВР, для установки отбора, когда в структуре
//							   параметров отбора есть ключ - Предопределенный	
//
Процедура ОткрытьФормуВыбораОсновныеНачисленияОрганизаций(Владелец, Ключ, СтруктураПараметровОтбора, СтандартнаяОбработка, ТекущееЗначение = Неопределено, СписокПредопределенныхВР = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора(, Владелец, Ключ);
	Если ТекущееЗначение <> Неопределено Тогда
		ФормаВыбора.НачальноеЗначениеВыбора = ТекущееЗначение;
	КонецЕсли;
	
	//установим отборы
	Для Каждого ЭлементСтруктуры Из СтруктураПараметровОтбора Цикл
		ИмяОтбора 	   = ЭлементСтруктуры.Ключ;
		Если ИмяОтбора = "Предопределенный" и ТипЗнч(СписокПредопределенныхВР) = Тип("СписокЗначений") Тогда
			ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
			ФормаВыбора.Отбор.Ссылка.Значение = СписокПредопределенныхВР;
			ФормаВыбора.Отбор.Ссылка.Использование = Истина;
		Иначе
			СписокОтбора = Новый СписокЗначений;
			СписокОтбора.ЗагрузитьЗначения(ЭлементСтруктуры.Значение);
			ФормаВыбора.Отбор[ИмяОтбора].ВидСравнения = ВидСравнения.ВСписке;
			ФормаВыбора.Отбор[ИмяОтбора].Значение = СписокОтбора;
			ФормаВыбора.Отбор[ИмяОтбора].Использование = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ ДОПОЛНИТЕЛЬНЫХ КОЛОНОК В ТАБЛИЧНЫХ ПОЛЯХ ДОКУМЕНТОВ

Функция ДополнительныеКолонкиТабличныхПолейДокумента(ЭлементыФормы, ТабличныеПоля) Экспорт
	
	ДополнительныеКолонки = Новый Структура;
	
	Для Каждого ЭлементСоответствия Из ТабличныеПоля Цикл
		
		ТабличноеПоле = ЭлементСоответствия.Ключ;
		
		ДополнительныеКолонкиТабличногоПоля = Новый Массив;
		
		КолонкиТабличногоПоля = ЭлементыФормы[ТабличноеПоле].Колонки;
		Для Каждого КолонкаТабличногоПоля Из КолонкиТабличногоПоля Цикл
			Если НЕ КолонкаТабличногоПоля.Видимость И КолонкаТабличногоПоля.ИзменятьВидимость Тогда
				ДополнительныеКолонкиТабличногоПоля.Добавить(КолонкаТабличногоПоля);
			КонецЕсли;
		КонецЦикла;
		
		ДополнительныеКолонки.Вставить(ТабличноеПоле, ДополнительныеКолонкиТабличногоПоля);
		
	КонецЦикла;
	
	Возврат ДополнительныеКолонки;
	
КонецФункции

Функция ВидимостьДополнительныхКолонок(ИмяДокумента, ТабличныеПоля) Экспорт
	
	СтруктураДанныхОВидимостиДополнительныхКолонок = ВосстановитьЗначение(ИмяДокумента + "СтруктураДанныхОВидимостиДополнительныхКолонок");

	Если СтруктураДанныхОВидимостиДополнительныхКолонок = Неопределено Тогда
		СтруктураДанныхОВидимостиДополнительныхКолонок = Новый Структура;
	КонецЕсли;
	
	Для Каждого ЭлементСоответствия Из ТабличныеПоля Цикл
		ТабличноеПоле = ЭлементСоответствия.Ключ;
		// по умолчанию дополнительные колонки "выключены"
		Если НЕ СтруктураДанныхОВидимостиДополнительныхКолонок.Свойство(ТабличноеПоле) Тогда
			СтруктураДанныхОВидимостиДополнительныхКолонок.Вставить(ТабличноеПоле, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхОВидимостиДополнительныхКолонок;
	
КонецФункции

Процедура СохранитьСтруктуруВидимостиДополнительныхКолонок(ИмяДокумента, СтруктураДанныхОВидимостиДополнительныхКолонок) Экспорт
	
	СохранитьЗначение(ИмяДокумента + "СтруктураДанныхОВидимостиДополнительныхКолонок", СтруктураДанныхОВидимостиДополнительныхКолонок);
	
КонецПроцедуры

Процедура ПоказатьСкрытьДополнительныеКолонкиТабличногоПоля(ДополнительныеКолонкиТабличногоПоля, ВидимостьДополнительныхКолонок, КоманднаяПанельТабличногоПоля)Экспорт
	
	Для Каждого КолонкаТабличногоПоля Из ДополнительныеКолонкиТабличногоПоля Цикл
		КолонкаТабличногоПоля.Видимость = ВидимостьДополнительныхКолонок;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказатьСкрытьДополнительныеКолонки(ДополнительныеКолонки, СтруктураДанныхОВидимостиДополнительныхКолонок, ТабличныеПоляИКомандныеПанели, ТабличноеПоле = Неопределено) Экспорт
	
	Если ТабличноеПоле = Неопределено Тогда
		// управляем видимостью колонок для всех табличных полей перечисленных в структуре
		Для Каждого ТабличноеПолеДокумента Из ДополнительныеКолонки Цикл
			КоманднаяПанельТабличногоПоля 		= ТабличныеПоляИКомандныеПанели[ТабличноеПолеДокумента.Ключ];
			
			ПоказатьСкрытьДополнительныеКолонкиТабличногоПоля(ТабличноеПолеДокумента.Значение, СтруктураДанныхОВидимостиДополнительныхКолонок[ТабличноеПолеДокумента.Ключ], КоманднаяПанельТабличногоПоля);
			
			// меняем пометку на кнопке "Дополнительно"
			КнопкаДополнительно = КоманднаяПанельТабличногоПоля.Кнопки["Дополнительно"];
			КнопкаДополнительно.Пометка = СтруктураДанныхОВидимостиДополнительныхКолонок[ТабличноеПолеДокумента.Ключ];
			
		КонецЦикла;
	Иначе	
		// изменяем видимость для конкретного табличного поля
		ДополнительныеКолонкиТабличногоПоля = ДополнительныеКолонки[ТабличноеПоле];
		ВидимостьДополнительныхКолонок 		= СтруктураДанныхОВидимостиДополнительныхКолонок[ТабличноеПоле];
		КоманднаяПанельТабличногоПоля 		= ТабличныеПоляИКомандныеПанели[ТабличноеПоле];
		
		ПоказатьСкрытьДополнительныеКолонкиТабличногоПоля(ДополнительныеКолонкиТабличногоПоля, ВидимостьДополнительныхКолонок, КоманднаяПанельТабличногоПоля);
		
		// меняем пометку на кнопке "Дополнительно"
		КнопкаДополнительно = КоманднаяПанельТабличногоПоля.Кнопки["Дополнительно"];
		КнопкаДополнительно.Пометка = СтруктураДанныхОВидимостиДополнительныхКолонок[ТабличноеПоле];
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ КОНТРОЛЯ ПЕРИОДИЧЕСКИХ ВЫПЛАТ
	
Процедура ПроверитьДанныеОПериодическихВыплатах(Ссылка, Отказ, ПерерассчитываемыйДокумент = Неопределено, ДанныеДокумента = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	НаборЗаписей = ПроведениеРасчетов.ПолучитьНаборПериодическихВыплатПоДокументу(Ссылка, ДанныеДокумента);
	
	Запрос.УстановитьПараметр("НаборЗаписей", НаборЗаписей);
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);	
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НаборЗаписей.ПериодНачисления,
	|	НаборЗаписей.Сотрудник,
	|	НаборЗаписей.ВидРасчета,
	|	НаборЗаписей.ДокументОснование
	|ПОМЕСТИТЬ НаборЗаписей
	|ИЗ
	|	&НаборЗаписей КАК НаборЗаписей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодическиеНачисления.ВидРасчета КАК ВидРасчета,
	|	ПериодическиеНачисления.Сотрудник,
	|	ПериодическиеНачисления.ПериодНачисления,
	|	ПериодическиеНачисления.Регистратор
	|ПОМЕСТИТЬ СуществующиеЗаписи
	|ИЗ
	|	РегистрСведений.ПериодическиеНачисления КАК ПериодическиеНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаборЗаписей КАК НаборЗаписей
	|		ПО ПериодическиеНачисления.ПериодНачисления = НаборЗаписей.ПериодНачисления
	|			И ПериодическиеНачисления.Сотрудник = НаборЗаписей.Сотрудник
	|			И ПериодическиеНачисления.ВидРасчета = НаборЗаписей.ВидРасчета
	|			И ПериодическиеНачисления.Регистратор <> НаборЗаписей.ДокументОснование";
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
	ТекстЗапроса = ТекстЗапроса + "	
	|			И (ПериодическиеНачисления.Регистратор <> &ПерерассчитываемыйДокумент)";
	КонецЕсли;
	
	// поместим в таблицу записи, которые сделаны отсторнированными документами
	ТекстЗапроса = ТекстЗапроса + "	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сторнирование.Ссылка КАК ДокументСторно,
	|	СуществующиеЗаписи.Регистратор
	|ПОМЕСТИТЬ ДокументыСторно
	|ИЗ
	|	СуществующиеЗаписи КАК СуществующиеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Сторнирование КАК Сторнирование
	|		ПО СуществующиеЗаписи.Регистратор = Сторнирование.СторнируемыйДокумент
	|;
	|";
	
	// поместим записи, которые сделаны исправленными документами
	ТекстЗапроса = ТекстЗапроса + "	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка КАК ДокументИсправление,
	|	СуществующиеЗаписи.ВидРасчета,
	|	СуществующиеЗаписи.Сотрудник,
	|	СуществующиеЗаписи.Регистратор
	|ПОМЕСТИТЬ ДокументыИсправления
	|ИЗ
	|	СуществующиеЗаписи КАК СуществующиеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления
	|		ПО СуществующиеЗаписи.Регистратор = НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка.ПерерассчитываемыйДокумент
	|			И НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка.Проведен
	|			И СуществующиеЗаписи.Сотрудник = НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник
	|			И СуществующиеЗаписи.ВидРасчета = НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПремииРаботниковОрганизацийНачисления.Ссылка,
	|	СуществующиеЗаписи.ВидРасчета,
	|	СуществующиеЗаписи.Сотрудник,
	|	СуществующиеЗаписи.Регистратор
	|ИЗ
	|	СуществующиеЗаписи КАК СуществующиеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПремииРаботниковОрганизаций.Начисления КАК ПремииРаботниковОрганизацийНачисления
	|		ПО СуществующиеЗаписи.Регистратор = ПремииРаботниковОрганизацийНачисления.Ссылка.ПерерассчитываемыйДокумент
	|			И ПремииРаботниковОрганизацийНачисления.Ссылка.Проведен
	|			И СуществующиеЗаписи.Сотрудник = ПремииРаботниковОрганизацийНачисления.Сотрудник
	|			И СуществующиеЗаписи.ВидРасчета = ПремииРаботниковОрганизацийНачисления.Ссылка.ВидРасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка,
	|	СуществующиеЗаписи.ВидРасчета,
	|	СуществующиеЗаписи.Сотрудник,
	|	СуществующиеЗаписи.Регистратор
	|ИЗ
	|	СуществующиеЗаписи КАК СуществующиеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления
	|		ПО СуществующиеЗаписи.Регистратор = РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка.ПерерассчитываемыйДокумент
	|			И РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка.Проведен
	|			И СуществующиеЗаписи.Сотрудник = РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Сотрудник
	|			И СуществующиеЗаписи.ВидРасчета = РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.ВидРасчета
	|;
	|";
	
	// выбираем те записи, которых нет ни в отсторнированных документах, ни в исправленных
	ТекстЗапроса = ТекстЗапроса + "	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуществующиеЗаписи.ВидРасчета КАК ВидРасчета,
	|	СуществующиеЗаписи.Сотрудник,
	|	СуществующиеЗаписи.ПериодНачисления,
	|	СуществующиеЗаписи.Регистратор
	|ИЗ
	|	СуществующиеЗаписи КАК СуществующиеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыСторно КАК ДокументыСторно
	|		ПО СуществующиеЗаписи.Регистратор = ДокументыСторно.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыИсправления КАК ДокументыИсправления
	|		ПО СуществующиеЗаписи.Регистратор = ДокументыИсправления.Регистратор
	|			И СуществующиеЗаписи.ВидРасчета = ДокументыИсправления.ВидРасчета
	|			И СуществующиеЗаписи.Сотрудник = ДокументыИсправления.Сотрудник
	|ГДЕ
	|	ДокументыИсправления.ДокументИсправление ЕСТЬ NULL 
	|	И ДокументыСторно.ДокументСторно ЕСТЬ NULL 
	|ИТОГИ ПО
	|	ВидРасчета";
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаПоВидамРасчета = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоВидамРасчета.Следующий() Цикл
		Выборка = ВыборкаПоВидамРасчета.Выбрать();
		ТекстСотрудники = "";
		Сотрудников = 0;
		Пока Выборка.Следующий() Цикл
			Сотрудников = Сотрудников + 1;
			Если Сотрудников > 3 Тогда
				ТекстСотрудники = ТекстСотрудники + " и др.";
				Прервать;
			КонецЕсли;
			ТекстСотрудники = ТекстСотрудники + ?(ЗначениеЗаполнено(ТекстСотрудники), ", ", "") + ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.Сотрудник); 
		КонецЦикла;
		Если Сотрудников = 1 Тогда
			ТекстВопроса = "Сотруднику " + ТекстСотрудники + " " 
			+ ВыборкаПоВидамРасчета.ВидРасчета + " уже начислена в этом периоде. 
			|Начислить повторно?";
		ИначеЕсли Сотрудников > 1 Тогда
			ТекстВопроса = "Сотрудникам " + ТекстСотрудники + " " 
			+ ВыборкаПоВидамРасчета.ВидРасчета + " уже начислена в этом периоде.
			|Начислить повторно?";
		Иначе
			Продолжить;
		КонецЕсли;
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ ФОРМЫ

Процедура УстановитьДоступностьФормыДляРедактирования(ДокументОбъект, ФормаДокумента) Экспорт
	
	Если НЕ ФормаДокумента.ТолькоПросмотр Тогда
		ФормаДокумента.ТолькоПросмотр = НастройкаПравДоступа.ДокументВЗакрытомПериоде(ДокументОбъект);
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьФормыДляРедактирования

Процедура УстановитьЗаголовокФормыЗаписиФизлица(СтрокаОписания, ФизЛицо, ФормаЗаписи) Экспорт
	
	ФормаЗаписи.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	ФормаЗаписи.Заголовок = СтрокаОписания + ": " + ОбщегоНазначения.ПолучитьПредставленияОбъектов(ФизЛицо);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТКРЫТИЯ ФОРМ ОБЪЕКТОВ

// Процедура открывает форму списка регистра сведений ШтатноеРасписаниеОрганизаций
//
// Параметры
//		СтруктураПараметрыФормы - структура, содержит параметры которые необходимо передать в форму
//					или значения реквизитов обработки.
//					Ключ - имя реквизита формы или экспортной переменной, значение - его значение
//
Процедура ОткрытьФормуШтатноеРасписаниеОрганизаций(СтруктураПараметрыФормы = Неопределено) Экспорт
	
	Если ТипЗнч(СтруктураПараметрыФормы) = Тип("Массив") Тогда
		МассивПараметров = СтруктураПараметрыФормы;
		СтруктураПараметрыФормыПриОткрытии = ?(МассивПараметров.Количество() > 0, МассивПараметров[0], Неопределено);
	Иначе
		СтруктураПараметрыФормыПриОткрытии = СтруктураПараметрыФормы;
	КонецЕсли;
	
	Форма = РегистрыСведений.ШтатноеРасписаниеОрганизаций.ПолучитьФорму("ФормаСписка");
	Если СтруктураПараметрыФормыПриОткрытии <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма, СтруктураПараметрыФормыПриОткрытии);
	КонецЕсли;
	Форма.Открыть();
	
КонецПроцедуры

Процедура ОткрытьФормуЭлементаОрганизация(Организация, ИмяСтраницы = Неопределено, ИмяТекущегоЭлемента = Неопределено) Экспорт
	
	Если ТипЗнч(Организация) = Тип("Массив") Тогда
		МассивПараметров = Организация;
		ИмяТекущегоЭлемента = ?(МассивПараметров.Количество() = 3, МассивПараметров[2], Неопределено);
		ИмяСтраницы = ?(МассивПараметров.Количество() > 1, МассивПараметров[1], Неопределено);
		ОрганизацияДляОткрытия = ?(МассивПараметров.Количество() > 0, МассивПараметров[0], Неопределено);
	Иначе
		ОрганизацияДляОткрытия = Организация;
	КонецЕсли;
	
	Если ОрганизацияДляОткрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ОрганизацияДляОткрытия.ПолучитьФорму("ФормаЭлемента");
	Форма.Открыть();
	
	Если ИмяСтраницы <> Неопределено Тогда
		Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = Форма.ЭлементыФормы.ОсновнаяПанель.Страницы.Найти(ИмяСтраницы);
	КонецЕсли;
	
	Если ИмяТекущегоЭлемента <> Неопределено Тогда
		Форма.ТекущийЭлемент = Форма.ЭлементыФормы.Найти(ИмяТекущегоЭлемента);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИСПРАВЛЕНИЕ ДОКУМЕНТОВ

// В документах на одного сотрудника (отпуск, б/л и пр.) в зависимости от состояния 
// 	документа кнопки исправлений либо не показываются вообще, либо показывается одна из них
//
// Параметры
//	ПериодРегистрацииДокумента - дата - определяет месяц начисления документа
//  ДокументИсправлен, ДокументСторнирован - булево, флажки состояния документа
//	Кнопки - коллекция кнопок соответствующей панели документа
//  КнопкаИсправление, КнопкаОтменаИсправление - кнопки-эталоны
//
Процедура УстановитьКнопкиИсправленияДокументаОдногоСотрудника(ПериодРегистрацииДокумента, ДокументИсправлен, ДокументСторнирован, Кнопки, КнопкаИсправление, КнопкаОтменаИсправление) Экспорт
	
	Если Кнопки.Найти(КнопкаИсправление.Имя) <> Неопределено Или Кнопки.Найти(КнопкаОтменаИсправление.Имя) <> Неопределено Тогда
		СтароеИмя = Кнопки[Кнопки.Количество() - 1].Имя;
		НовоеИмя = "";
		Если Не ДокументСторнирован Тогда // Документ не был отсторнирован
			Если ДокументИсправлен Тогда  // Документ исправлен
				НовоеИмя = КнопкаОтменаИсправление.Имя;
			ИначеЕсли ПериодРегистрацииДокумента < НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
				НовоеИмя = КнопкаИсправление.Имя;
			КонецЕсли;
		КонецЕсли;
		Если НовоеИмя <> СтароеИмя Тогда
			Кнопки.Удалить(Кнопки.Количество() - 1);
			Если НовоеИмя = КнопкаОтменаИсправление.Имя Тогда
				НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаОтменаИсправление.Действие);
				ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаОтменаИсправление);
			ИначеЕсли НовоеИмя = КнопкаИсправление.Имя Тогда
				НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаИсправление.Действие);
				ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаИсправление);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не ДокументСторнирован Тогда // Документ не был отсторнирован
		Если ДокументИсправлен Тогда  // Документ исправлен
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаОтменаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаОтменаИсправление);
		ИначеЕсли ПериодРегистрацииДокумента < НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаИсправление);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура создает новый документ, заполняет его данными исправляемого документа 
// 	и предъявляет пользователю для дальнейшей работы
//
// Параметры
//	ИсправляемыйДокумент - тип ДокументОбъект.<Имя документа> - документ, для которого вводится исправление
//  ФормаИсправляемогоДокумента - форма этого документа
//  Сотрудники - массив сотрудников, по которым выполняется исправление; необязательный, если не указан - по всем
//
Функция ВвестиДокументИсправление(ИсправляемыйДокумент, ФормаИсправляемогоДокумента = Неопределено, Сотрудники = Неопределено, ПериодРегистрации = Неопределено) Экспорт 
	
	МД = ИсправляемыйДокумент.Метаданные();
	
	Если ИсправляемыйДокумент.Проведен ИЛИ МД.Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
		Если ФормаИсправляемогоДокумента <> Неопределено Тогда
			ТекстВопроса = "Для исправления необходимо записать документ. Продолжить?";
			Если Не РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ИсправляемыйДокумент, ФормаИсправляемогоДокумента, ТекстВопроса) Тогда
				Возврат Неопределено
			КонецЕсли;
		КонецЕсли;
		
		Исправление = Документы[МД.Имя].СоздатьДокумент();
	
		Если МД.Реквизиты.Найти("ПериодРегистрации") <> Неопределено Тогда
			Исправление.ПериодРегистрации = Макс(?(ЗначениеЗаполнено(ПериодРегистрации),ПериодРегистрации,НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату())),ДобавитьМесяц(ИсправляемыйДокумент.ПериодРегистрации,1));
		КонецЕсли;
		Исправление.ЗаполнитьПоПерерассчитываемомуДокументу(ИсправляемыйДокумент, Сотрудники);
		ФормаДокумента = Исправление.ПолучитьФорму(,,ИсправляемыйДокумент.Ссылка);
		ФормаДокумента.Открыть();
		
		Возврат ФормаДокумента
		
	Иначе
		РаботаСДиалогами.ВывестиПредупреждение("Исправить можно только проведенный документ!");
		Возврат Неопределено
		
	КонецЕсли;
	
КонецФункции

// Процедура собирает данные о существующих документах-исправлениях всех уровней,
// 	и формирует текст информирования пользователя, показывает его и запрашивает согласие 
// 	пользователя на удаление исправлений.
// 	Если пользователь согласился, очищает в найденных документах-исправлениях  
// 	поле, содержащее исправляемый документ и помечает документы на удаление.
//
// Параметры
//	ИсправленныйДокумент - тип ДокументСсылка.<Имя документа> - ошибочно исправленный документ
//	ИмяРеквизитаИсправляемыйДокумент - тип строка - имя поле, содержащего исправляемый документ 
//
Процедура ОтменитьИсправлениеДокумента(ИсправленныйДокумент, ИмяРеквизитаИсправляемыйДокумент = "ПерерассчитываемыйДокумент") Экспорт 
	
	МетаданныеДокумента = ИсправленныйДокумент.Метаданные();
	РежимПоиска = ?(МетаданныеДокумента.Реквизиты.Найти("Сотрудник") = Неопределено, "КритерийОтбора","ТаблицаДокумента");	
	ИмяДокумента = МетаданныеДокумента.Имя;
	Если ИмяДокумента = "ПереносДанных" Тогда // документ является исключением, т.к. исправляется документом другого вида
		ИмяДокумента = "НачислениеЗарплатыРаботникамОрганизаций"
	КонецЕсли;
	
	ИсправленияКОтмене = Новый Массив;
	Исправление = ПроведениеРасчетов.ПолучитьДокументИсправление(ИсправленныйДокумент, РежимПоиска, ИмяДокумента);
	Пока ЗначениеЗаполнено(Исправление) Цикл
		
		Если РежимПоиска = "КритерийОтбора" Тогда
			ИсправлениеСледующегоУровня = Новый Массив;
			Для каждого Значение Из Исправление Цикл
				ИсправленияКОтмене.Добавить(Значение);
				Для каждого ЗначениеСледующегоУровня Из ПроведениеРасчетов.ПолучитьДокументИсправление(Значение, РежимПоиска, ИмяДокумента) Цикл
					ИсправлениеСледующегоУровня.Добавить(ЗначениеСледующегоУровня);
				КонецЦикла;
			КонецЦикла;
			Исправление = ИсправлениеСледующегоУровня;
		Иначе
			ИсправленияКОтмене.Добавить(Исправление);
			Исправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Исправление, РежимПоиска, ИмяДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	ВсегоИсправлений = ИсправленияКОтмене.Количество();
	Если ВсегоИсправлений <> 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Исправления",ИсправленияКОтмене);
		
		Если МетаданныеДокумента.Реквизиты.Найти("ПериодРегистрации") <> Неопределено Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	МИНИМУМ(Документы.ПериодРегистрации) КАК ПериодРегистрацииС,
			|	МАКСИМУМ(Документы.ПериодРегистрации) КАК ПериодРегистрацииПо,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Документы.ПериодРегистрации) КАК ВсегоПериодовРегистрации
			|ИЗ
			|	Документ." + ИмяДокумента + " КАК Документы
			|ГДЕ
			|	Документы.Ссылка В (&Исправления)";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	МИНИМУМ(Документы.Дата) КАК ПериодРегистрацииС,
			|	МАКСИМУМ(Документы.Дата) КАК ПериодРегистрацииПо,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(Документы.Дата, МЕСЯЦ)) КАК ВсегоПериодовРегистрации
			|ИЗ
			|	Документ." + ИмяДокумента + " КАК Документы
			|ГДЕ
			|	Документы.Ссылка В (&Исправления)";
		КонецЕсли;
		Запрос.Выполнить();
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Если Выборка.ВсегоПериодовРегистрации = 1 Тогда
			Месяц = Формат(Выборка.ПериодРегистрацииС, "ДФ=MMMM");
			УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 5, Перечисления.ПолФизическихЛиц.Мужской, Месяц);
			ОписаниеПериода = НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г."
		ИначеЕсли Выборка.ВсегоПериодовРегистрации = 2 Тогда
			Месяц = Формат(Выборка.ПериодРегистрацииС, "ДФ=MMMM");
			УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 5, Перечисления.ПолФизическихЛиц.Мужской, Месяц);
			ОписаниеПериода = НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г. и "; 
			Месяц = Формат(Выборка.ПериодРегистрацииПо, "ДФ=MMMM");
			УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 5, Перечисления.ПолФизическихЛиц.Мужской, Месяц);
			ОписаниеПериода = ОписаниеПериода + НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г." 
		Иначе
			Месяц = Формат(Выборка.ПериодРегистрацииС, "ДФ=MMMM");
			УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 2, Перечисления.ПолФизическихЛиц.Мужской, Месяц);
			ОписаниеПериода = "в период с " + НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г. по "; 
			Месяц = Формат(Выборка.ПериодРегистрацииПо, "ДФ=MMMM");
			УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 1, Перечисления.ПолФизическихЛиц.Мужской, Месяц);
			ОписаниеПериода = ОписаниеПериода + НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г." 
		КонецЕсли;
		
		ТекстВопроса =  ОбщегоНазначения.ФормаМножественногоЧисла("Найден ","Найдено ","Найдено ",ВсегоИсправлений) + ВсегоИсправлений 
			+ ОбщегоНазначения.ФормаМножественногоЧисла(" документ-исправление"," документа-исправления"," документов-исправлений",ВсегоИсправлений) 
			+ ОбщегоНазначения.ФормаМножественногоЧисла(", зарегистрированный ",", зарегистрированных ",", зарегистрированных ",ВсегоИсправлений) 
			+ ОписаниеПериода + " Отменить исправления?";
		
		Ответ  = РаботаСДиалогами.ЗадатьВопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, КодВозвратаДиалога.ОК);
		Если Ответ = КодВозвратаДиалога.ОК Или Ответ = КодВозвратаДиалога.Таймаут Тогда
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
			ОбработкаКомментариев.УдалитьСообщения();
			Заголовок = ОбщегоНазначения.КомментарийРасчета("Удаление документов-исправлений");
			Если ВсегоИсправлений > 1 Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Для Сч = 1 По ВсегоИсправлений Цикл
				Значение = ИсправленияКОтмене[ВсегоИсправлений - Сч];
				Документ = Значение.ПолучитьОбъект();
				ОбщегоНазначения.КомментарийРасчета("Документ №" + Документ.Номер + " от " + Документ.Дата + " обработан успешно. ", Заголовок, "Открыть", Значение);
				Документ[ИмяРеквизитаИсправляемыйДокумент] = Неопределено;
				Документ.ПометкаУдаления = Истина;
				Попытка
					Документ.Записать(?(Документ.Проведен, РежимЗаписиДокумента.ОтменаПроведения,РежимЗаписиДокумента.Запись));
				Исключение
					Если ВсегоИсправлений > 1 Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
					ОбщегоНазначения.КомментарийРасчета("Документ №" + Документ.Номер + " от " + Документ.Дата + " удалить не удалось! Процедура отмены исправлений отменена. ", , "Открыть", Значение,Перечисления.ВидыСообщений.Ошибка);
					ОбработкаКомментариев.ПоказатьСообщения();
					Возврат;
				КонецПопытки;
			КонецЦикла;
			Если ВсегоИсправлений > 1 Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			ОбработкаКомментариев.ПоказатьСообщения();
			
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает имя и доступность кнопки ТекущийСотрудник механизма исправлений
//
// Параметры
//	ТипДанных - тип Тип.- определяет тип переданного текущего элемента: Сотрудник или Физлицо
//  ТекущийСотрудник - тип СправочникСсылка.СотрудникиОрганизаций или СправочникСсылка.ФизическиеЛица, текущий сотрудник формы
//  СотрудникиСИсправлениями - тип Соответствие, содержит всех сотрудников, чьи расчеты уже подвергались исправлениям
//  Кнопка - описываемая кнопка командной панели
//  ИмяБезСотрудника - строка, имя кнопки "по умолчанию"
//
Функция ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипДанных, ТекущийСотрудник, СотрудникиСИсправлениями, Кнопка, ИмяБезСотрудника = "Расчеты текущего сотрудника", ИмяССотрудником = "Расчеты") Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущийСотрудник) Тогда
		Кнопка.Текст = ИмяБезСотрудника;
		Кнопка.Доступность = Истина;
		Возврат ""
		
	Иначе
		
		ФИО = ОбщегоНазначения.ПредставлениеРаботника(ТекущийСотрудник, 2);
		
		Кнопка.Текст = ИмяССотрудником + " " + ФИО;
		Кнопка.Доступность = (СотрудникиСИсправлениями[ТекущийСотрудник] = Неопределено);
		
		Возврат ФИО;
		
	КонецЕсли;
	
КонецФункции

// Процедура показывает документы исправления
// Параметры
//	ФормаДокумента - форма документа, из которой вызвана команда показа исправлений
//	Ссылка - ссылка на текущий документ, исправления которого необходимо показать
//  ДокументыИсправление - Массив документов, которые исправляли текущий документ
//	ДокументСторнирование - ссылка на документ Сторнирование, который сторнировал текущий документ
//
Процедура ПоказатьИсправления(ФормаДокумента, Ссылка, ДокументыИсправление, ДокументСторнирование = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ДокументыИсправление) Тогда
		Если ТипЗнч(ДокументыИсправление) = Тип("Массив") Тогда
			Если ДокументыИсправление.Количество() = 1 Тогда
				// если документ-исправление один, то откроем его
				ДокументыИсправление[0].ПолучитьФорму(, ФормаДокумента).Открыть();
				
			Иначе
				// откроем список документов, которые исправили текущий
				Форма = КритерииОтбора.ДокументыИсправления.ПолучитьФорму(, ФормаДокумента);
				Форма.ИсходныйДокумент = Ссылка;
				Форма.Открыть();
				
			КонецЕсли;
			
		Иначе
			// если документ-исправление один, то откроем его
			ДокументыИсправление.ПолучитьФорму(, ФормаДокумента).Открыть();
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ДокументСторнирование) Тогда
		ДокументСторнирование.ПолучитьФорму(, ФормаДокумента).Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьОписаниеСостоянияКадровогоДокумента(ЭтотОбъект, ЭтаФорма, ДокументыИсправление) Экспорт
	
	// Получим метаданные объекта
	
	МДОбъекта = ЭтотОбъект.Метаданные();
	ЕстьТЧРаботникиОрганизации = (МДОбъекта.ТабличныеЧасти.Найти("РаботникиОрганизации") <> Неопределено);
	
	// связанные документы
	ЭтоИсправление = ЗначениеЗаполнено(ЭтотОбъект.ИсправляемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(ДокументыИсправление);
	
	НеЗаполнен = Не ЗначениеЗаполнено(ЭтотОбъект.Организация);
	
	Если НЕ НеЗаполнен Тогда
	
		Если ЕстьТЧРаботникиОрганизации Тогда
		
			НеЗаполнен = ЭтотОбъект.РаботникиОрганизации.Количество() = 0;
		
		Иначе
		
			НеЗаполнен = Не ЗначениеЗаполнено(ЭтотОбъект.Сотрудник);
		
		КонецЕсли;
	
	КонецЕсли; 
	
	ЗаполненСОшибками = ЭтаФорма.ДокументЗаполненСОшибками();
	
	Если НЕ ЗаполненСОшибками Тогда
	
		Если ЕстьТЧРаботникиОрганизации Тогда
		
			ЗаполненСОшибками = ЭтотОбъект.РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник",Справочники.СотрудникиОрганизаций.ПустаяСсылка())).Количество() > 0;
		
		КонецЕсли; 
	
	КонецЕсли; 
		
	ПеренесенИз77 = Ложь;
		
	ОписаниеСостоянияДокумента = ПолучитьОписаниеКадровогоДокумента(
		Не НеЗаполнен,
		ЗаполненСОшибками,
		ЭтотОбъект.Проведен,
		ЭтоИсправление,
		ДокументИсправлен,
		ПеренесенИз77);
	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(
		ЭтаФорма.ЭлементыФормы.НадписьПредупреждение,
		ЭтаФорма.ЭлементыФормы.ПолеКартинкиПредупреждение,
		ОписаниеСостоянияДокумента.ТекстСообщения,
		ОписаниеСостоянияДокумента.ВажностьСообщения);
	
КонецПроцедуры

Функция ПолучитьСотрудниковСКадровымиИсправлениями(ДокументыИсправление, ИмяДок)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Сотрудник
	|ИЗ
	|	Документ." + ИмяДок + ".РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка В(&Исправления)
	|	И Док.Сторно";
	
	Возврат ПроведениеРасчетов.СформироватьСоответствиеСотрудниковСИсправлениями(ТекстЗапроса, ДокументыИсправление);
	
КонецФункции

Процедура УстановитьКнопкиИсправленияКадровогоДокумента(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументИсправлен, ИсправленВесьДокумент, ДокументыИсправление, СотрудникиИсправление)
	
	Если СотрудникиИсправление = Неопределено Тогда
		КнопкаИсправлениеВесьДокумент		= СтруктураМенюИсправление.ИсправлениеВесьДокумент;
		КнопкаОтменаИсправление				= СтруктураМенюИсправление.ОтменаИсправление;
	Иначе
		МенюИсправление						= СтруктураМенюИсправление.МенюИсправление;
		КнопкаИсправлениеТекущийСотрудник	= СтруктураМенюИсправление.ИсправлениеТекущийСотрудник;
		КнопкаИсправлениеВесьДокумент		= СтруктураМенюИсправление.ИсправлениеВесьДокумент;
		КнопкаИсправлениеСписокСотрудников	= СтруктураМенюИсправление.ИсправлениеСписокСотрудников;
		КнопкаОтменаИсправление				= СтруктураМенюИсправление.ОтменаИсправление;
	КонецЕсли;
	
	Если ДокументИсправлен = Неопределено Тогда
		ДокументИсправлен = ЗначениеЗаполнено(ДокументыИсправление);
	КонецЕсли;
	
	Если ИсправленВесьДокумент = Неопределено Тогда
		ИсправленВесьДокумент = ДокументИсправлен;
		Если ИсправленВесьДокумент Тогда
			Для Каждого СтрокаТЧ Из ЭтотОбъект.РаботникиОрганизации Цикл
				ИсправленВесьДокумент = СотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
				Если Не ИсправленВесьДокумент Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Кнопки = ЭтаФорма.ЭлементыФормы.ДополнительныеДействия.Кнопки;
	Если СотрудникиИсправление = Неопределено Тогда
		Если ДокументИсправлен Тогда
			Если Кнопки.Найти("Исправить") <> Неопределено Тогда
				Кнопки.Удалить(Кнопки.Исправить);
			КонецЕсли;
			Если Кнопки.Найти("ОтменитьИсправление") = Неопределено Тогда
				НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаОтменаИсправление.Действие);
				ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаОтменаИсправление);
			КонецЕсли;
			
		Иначе
			Если Кнопки.Найти("ОтменитьИсправление") <> Неопределено Тогда
				Кнопки.Удалить(Кнопки.ОтменитьИсправление);
			КонецЕсли;
			Если Кнопки.Найти("Исправить") = Неопределено Тогда
				НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаИсправлениеВесьДокумент.Действие);
				ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаИсправлениеВесьДокумент);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если Кнопки.Количество() = 0 Тогда
			МенюИсправить = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Подменю);
			ЗаполнитьЗначенияСвойств(МенюИсправить, МенюИсправление);
			
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаИсправлениеТекущийСотрудник.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаИсправлениеТекущийСотрудник);
			
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаИсправлениеВесьДокумент.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаИсправлениеВесьДокумент);
			
			МенюИсправить.Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаИсправлениеСписокСотрудников.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаИсправлениеСписокСотрудников);
		КонецЕсли;
		Кнопки.Исправить.Кнопки.ТекущийСотрудник.Доступность	= Не ИсправленВесьДокумент;
		Кнопки.Исправить.Кнопки.ВесьДокумент.Доступность		= Не ДокументИсправлен;
		Кнопки.Исправить.Кнопки.СписокСотрудников.Доступность	= Не ИсправленВесьДокумент;
		
		Если Кнопки.Количество() = 1 И ДокументИсправлен Тогда
			Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаОтменаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаОтменаИсправление);
			
		ИначеЕсли Кнопки.Количество() > 1 И Не ДокументИсправлен Тогда
			Кнопки.Удалить(Кнопки.ОтменитьИсправление);
			Кнопки.Удалить(Кнопки.Разделитель);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Управляет видимостью элементов формы, зависящих от наличия исправленного документа
//
Процедура ОбновитьДоступностьЭлементовФормыДляКадровыхИсправлений(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление, СотрудникиИсправление)
	
	ЭтоИсправление		= ЗначениеЗаполнено(ЭтотОбъект.ИсправляемыйДокумент);
	ДокументИсправлен	= ЗначениеЗаполнено(ДокументыИсправление);
	
	ИсправленВесьДокумент = ДокументИсправлен;
	Если СотрудникиИсправление <> Неопределено И ИсправленВесьДокумент Тогда
		Для каждого СтрокаТЧ Из ЭтотОбъект.РаботникиОрганизации Цикл
			ИсправленВесьДокумент = СотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
			Если Не ИсправленВесьДокумент Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЭтаФорма.ТолькоПросмотр = ДокументИсправлен;
	УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	ЭтаФорма.ЭлементыФормы.Организация.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр Или ЭтоИсправление;
	
	УстановитьКнопкиИсправленияКадровогоДокумента(
		ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументИсправлен, ИсправленВесьДокумент, ДокументыИсправление, СотрудникиИсправление);
	
	Элементы = ЭтаФорма.ЭлементыФормы;
	
	Элементы.ПанельОткрытьИсправление.Свертка	= ?(ДокументИсправлен,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	Элементы.ПанельОткрытьИсходный.Свертка		= ?(ЭтоИсправление,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	
	Если СотрудникиИсправление <> Неопределено И Не ЭтаФорма.ТолькоПросмотр Тогда
		МожноЗаполнять = Не ЭтоИсправление;
		СоставМенюЗаполнить = Неопределено;
		Если Элементы.ДействияФормы.Кнопки.Найти("ПодменюЗаполнить") <> Неопределено Тогда
			СоставМенюЗаполнить = Элементы.ДействияФормы.Кнопки.ПодменюЗаполнить.Кнопки;
		КонецЕсли;
		Если Элементы.КоманднаяПанельРаботникиОрганизации.Кнопки.Найти("ПодменюЗаполнить") <> Неопределено Тогда
			СоставМенюЗаполнить = Элементы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПодменюЗаполнить.Кнопки;
		КонецЕсли;
		Если СоставМенюЗаполнить <> Неопределено Тогда
			Для Каждого Кнопка Из СоставМенюЗаполнить Цикл
				Если Кнопка.ТипКнопки <> ТипКнопкиКоманднойПанели.Разделитель Тогда
					Кнопка.Доступность = МожноЗаполнять
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()

Функция ОбновитьТекущегоСотрудникаДляКадровыхИсправлений(ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник)
	
	ТекущиеДанные	= ЭтаФорма.ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		НовыйСотрудник = ТекущиеДанные.Сотрудник;
	Иначе
		НовыйСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	ФИО = "";
	
	// Установим имя и доступность кнопки ТекущийСотрудник механизма исправлений
	Если ЭтаФорма.ЭлементыФормы.ДополнительныеДействия.Кнопки.Найти("Исправить") <> Неопределено И ТекущийСотрудник <> НовыйСотрудник Тогда
		ФИО = ОбновитьКнопкуИсправленияРасчетовСотрудника(
			ТипЗнч(НовыйСотрудник),
			НовыйСотрудник,
			СотрудникиИсправление,
			ЭтаФорма.ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник,
			"Строки текущего сотрудника",
			"Строки")
	КонецЕсли;
	
	ТекущийСотрудник = НовыйСотрудник;
	
КонецФункции


Процедура ИсправлениеКадровыхДокументовПередОткрытием(ЭтотОбъект, ЭтаФорма, ДокументыИсправление, СотрудникиИсправление) Экспорт
			
	Если Не ЭтотОбъект.ЭтоНовый() Тогда
		ДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(ЭтотОбъект.Ссылка, "КритерийОтбора");
		ОбновитьОписаниеСостоянияКадровогоДокумента(ЭтотОбъект, ЭтаФорма, ДокументыИсправление);
		Если ЗначениеЗаполнено(ДокументыИсправление) Тогда
			СотрудникиИсправление = ПолучитьСотрудниковСКадровымиИсправлениями(ДокументыИсправление, ЭтотОбъект.Метаданные().Имя);
		КонецЕсли;
		
	Иначе
		РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(
			ЭтаФорма.ЭлементыФормы.НадписьПредупреждение,
			ЭтаФорма.ЭлементыФормы.ПолеКартинкиПредупреждение,
			"Документ не заполнен",
			"СообщениеОПроблемах");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправлениеКадровыхДокументовПриОткрытии(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление = Неопределено, СотрудникиИсправление = Неопределено) Экспорт
		
	Если СотрудникиИсправление = Неопределено Тогда
		СтруктураМенюИсправление = Новый Структура;
		СтруктураМенюИсправление.Вставить("ИсправлениеВесьДокумент",		ЭтаФорма.ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить);
		СтруктураМенюИсправление.Вставить("ОтменаИсправление",				ЭтаФорма.ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление);
	Иначе
		МенюИсправление = ЭтаФорма.ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить;
		СтруктураМенюИсправление = Новый Структура;
		СтруктураМенюИсправление.Вставить("МенюИсправление",				МенюИсправление);
		СтруктураМенюИсправление.Вставить("ИсправлениеТекущийСотрудник",	МенюИсправление.Кнопки.ТекущийСотрудник);
		СтруктураМенюИсправление.Вставить("ИсправлениеВесьДокумент",		МенюИсправление.Кнопки.ВесьДокумент);
		СтруктураМенюИсправление.Вставить("ИсправлениеСписокСотрудников",	МенюИсправление.Кнопки.СписокСотрудников);
		СтруктураМенюИсправление.Вставить("ОтменаИсправление",				ЭтаФорма.ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление);
		ЭтаФорма.ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	КонецЕсли;
	
	// Установим видимость в зависимости от наличия перерассчитываемого документа
	ОбновитьДоступностьЭлементовФормыДляКадровыхИсправлений(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление, СотрудникиИсправление);
	
КонецПроцедуры

Процедура ИсправлениеКадровыхДокументовОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление = Неопределено, СотрудникиИсправление = Неопределено) Экспорт
	
		
	Если ИмяСобытия = "ОбновитьФорму" И Не ЭтотОбъект.ЭтоНовый() Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Команда = "ДоступностьИсправленногоДокумента" Тогда
					Если Параметр.Объект = ЭтотОбъект.Ссылка Тогда
						Если СотрудникиИсправление = Неопределено И ДокументыИсправление = Неопределено Тогда
							ДокументыИсправление = Источник;
							
						ИначеЕсли СотрудникиИсправление <> Неопределено И ДокументыИсправление.Найти(Источник) = Неопределено Тогда
							ДокументыИсправление.Добавить(Источник);
							СотрудникиИсправление = ПолучитьСотрудниковСКадровымиИсправлениями(ДокументыИсправление, ЭтотОбъект.Метаданные().Имя);
							
						КонецЕсли;
						
						ОбновитьДоступностьЭлементовФормыДляКадровыхИсправлений(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление, СотрудникиИсправление);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправлениеКадровыхДокументовОбработкаВыбора(ЗначениеВыбора, Источник, ЭтотОбъект, ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник) Экспорт
	
		
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			ОбновитьТекущегоСотрудникаДляКадровыхИсправлений(ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник);
			
		ИначеЕсли ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ЗаполнитьДокументИсправление" Тогда
			ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, ЗначениеВыбора.ВыбранныеСотрудники);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправлениеКадровыхДокументовПослеЗаписи(ЭтотОбъект) Экспорт
	
	// оповестим исходный, исправляемый документ
	Если ЗначениеЗаполнено(ЭтотОбъект.ИсправляемыйДокумент) Тогда
		Оповестить("ОбновитьФорму", Новый Структура("Команда, Объект","ДоступностьИсправленногоДокумента", ЭтотОбъект.ИсправляемыйДокумент), ЭтотОбъект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправлениеКадровыхДокументовПриАктивизацииСтроки(Элемент, КоманднаяПанель, СотрудникиИсправление = Неопределено, ТекущийСотрудник = Неопределено) Экспорт
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	МожноРедактироватьСтроку = (ДанныеСтроки = Неопределено Или Не ДанныеСтроки.Сторно)
		И (СотрудникиИсправление = Неопределено ИЛИ СотрудникиИсправление[ТекущийСотрудник] = Неопределено);
	КоманднаяПанель.Кнопки.Скопировать.Доступность			= МожноРедактироватьСтроку;
	Элемент.КонтекстноеМеню.Кнопки.Скопировать.Доступность	= МожноРедактироватьСтроку;
	
КонецПроцедуры

Процедура ИсправлениеКадровыхДокументовПриАктивизацииСтрокиОбработчикОжидания(ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник) Экспорт
	
	ОбновитьТекущегоСотрудникаДляКадровыхИсправлений(ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник);
	
КонецПроцедуры

Процедура ИсправлениеКадровыхДокументовПриПолученииДанных(ОформленияСтрок, СотрудникиИсправление = Неопределено) Экспорт
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		Если ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			Для Каждого Ячейка Из Ячейки Цикл
				Ячейка.ТолькоПросмотр = Истина;
			КонецЦикла;
		КонецЕсли;
		
		Если СотрудникиИсправление <> Неопределено И СотрудникиИсправление[ДанныеСтроки.Сотрудник] <> Неопределено Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправлениеКадровыхДокументовПриОкончанииРедактирования(ОтменаРедактирования, ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник) Экспорт
	
	Если Не ОтменаРедактирования Тогда
		ОбновитьТекущегоСотрудникаДляКадровыхИсправлений(ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник);
	КонецЕсли;
	
КонецПроцедуры


Процедура ВвестиКадровоеИсправлениеТекущегоСотрудника(ЭтотОбъект, ЭтаФорма, ТекущийСотрудник) Экспорт
	

	Если Не ЗначениеЗаполнено(ТекущийСотрудник) Тогда
		РаботаСДиалогами.ВывестиПредупреждение("Не выбран сотрудник для исправления расчетов!");
		Возврат;
	КонецЕсли;
	
	ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, ТекущийСотрудник);
	
КонецПроцедуры

Процедура ВвестиКадровоеИсправлениеСпискаСотрудников(ЭтотОбъект, ЭтаФорма, СотрудникиИсправление) Экспорт
	
	Если ЭтотОбъект.ДанныеПрошлойВерсии Тогда
		Возврат
	КонецЕсли;
	
	Если Не ЭтотОбъект.Проведен Тогда
		РаботаСДиалогами.ВывестиПредупреждение("Исправить можно только проведенный документ!");
		Возврат;
	КонецЕсли;
		
	ТекстВопроса = "Для исправления необходимо записать документ. Продолжить?";
	Если Не РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ЭтотОбъект, ЭтаФорма, ТекстВопроса) Тогда
		Возврат;
	КонецЕсли;
	
	МД = ЭтотОбъект.Метаданные();
	
	СписокСотрудников = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Сотрудник,
	|	Док.Сотрудник.Наименование КАК Наименование
	|ИЗ
	|	Документ." + МД.Имя + ".РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СотрудникиИсправление[Выборка.Сотрудник] = Неопределено Тогда
			СписокСотрудников.Добавить(Выборка.Сотрудник,Выборка.Наименование)
		КонецЕсли;
	КонецЦикла;
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораСотрудников", ЭтаФорма, ЭтотОбъект.Ссылка);
	Форма.СписокСотрудников = СписокСотрудников;
	Форма.Заголовок = "Сотрудники документа " + МД.Синоним + " №" + ЭтотОбъект.Номер + " от " + Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	Форма.Открыть();
	
КонецПроцедуры

// Процедура отмены документов-исправлений
//
Процедура ОтменитьКадровоеИсправление(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление, СотрудникиИсправление = Неопределено, ТекущийСотрудник = Неопределено) Экспорт
	
	//Если ЭтотОбъект.ДанныеПрошлойВерсии Тогда
	//	Возврат
	//КонецЕсли;
	
	ОтменитьИсправлениеДокумента(ЭтотОбъект.Ссылка, "ИсправляемыйДокумент");
	
	ДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(ЭтотОбъект.Ссылка, "КритерийОтбора");
	
	Если СотрудникиИсправление <> Неопределено Тогда
		СотрудникиИсправление = ПолучитьСотрудниковСКадровымиИсправлениями(ДокументыИсправление, ЭтотОбъект.Метаданные().Имя);
	КонецЕсли;
	ОбновитьДоступностьЭлементовФормыДляКадровыхИсправлений(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление, СотрудникиИсправление);
	
	Если СотрудникиИсправление <> Неопределено Тогда
		ОбновитьКнопкуИсправленияРасчетовСотрудника(
			ТипЗнч(ТекущийСотрудник),
			ТекущийСотрудник,
			СотрудникиИсправление,
			ЭтаФорма.ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник,
			"Строки текущего сотрудника",
			"Строки");
	КонецЕсли;
	
	ЭтаФорма.Обновить();
	
КонецПроцедуры

Процедура ОткрытьИсходныйДокумент(ЭтотОбъект, ЭтаФорма) Экспорт
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ИсправляемыйДокумент) Тогда
		ЭтотОбъект.ИсправляемыйДокумент.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ КОМАНД ГЛАВНОГО МЕНЮ И РАБОЧЕГО СТОЛА

// Показывает веб-страницы в обработке Обозреватель  
//
// Параметры
//  АдресСтраницы  – Строка – адрес просматриваемой страницы
//  ЗаголовокОкна  – Строка – заголовок окна обработки
//  КлючУникальностиФормы - произвольный, ключ уникальности формы обработки Обозреватель
//
// Если передается пустая строка АдресСтраницы, то в обработке Обозреватель 
// просматривается веб-страница конфигурации
//  
Процедура ПоказатьВебСтраницу(АдресСтраницы = "", ЗаголовокОкна = "", КлючУникальностиФормы = Неопределено) Экспорт 
	
	Форма = Обработки.Обозреватель.ПолучитьФорму("Форма",,КлючУникальностиФормы);
	Если ЗначениеЗаполнено(ЗаголовокОкна) Тогда
		Форма.Заголовок = ЗаголовокОкна;
	КонецЕсли;
	Форма.СтартоваяСтраница = АдресСтраницы;
	Форма.Открыть();
	
КонецПроцедуры

// Функция открывает форму обработки ИндексацияИПерерасчетПособийНаДетей или возвращает ее
Функция ОткрытьПерерасчетПособийНаДетей(Режим = "Перерасчет", ОткрытьФорму = Истина) Экспорт
	
	Если Режим = "Перерасчет" Тогда
		ФормаОбработки = Обработки.ИндексацияИПерерасчетПособийНаДетейЗаСчетФСС.ПолучитьФорму(,,"Перерасчет");
	Иначе
		ФормаОбработки = Обработки.ИндексацияИПерерасчетПособийНаДетейЗаСчетФСС.ПолучитьФорму();
	КонецЕсли;
	
	Если ОткрытьФорму Тогда
		ФормаОбработки.Открыть();
		Возврат Неопределено
	Иначе
		Возврат ФормаОбработки
	КонецЕсли;
	
КонецФункции

Процедура ОткрытьПерерасчетПособийНаДетейИзИнтерфейса() Экспорт
	
	ОткрытьПерерасчетПособийНаДетей("Перерасчет")
	
КонецПроцедуры

Процедура ОткрытьФормуМедицинскогоСтрахования() Экспорт
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.МедицинскиеСтраховыеПолисы) Тогда
		Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуСписка(,, "ФормаМедицинскогоСтрахования");
		Форма.мРежимРаботыФормы = "ФормаМедицинскогоСтрахования";
		Форма.Открыть();
		
	Иначе
		Предупреждение("Нарушение прав доступа!");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуОстатковОтпусков() Экспорт
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ОстаткиОтпусковОрганизаций) Тогда
		Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуСписка(,, "ФормаОстатковОтпусков");
		Форма.мРежимРаботыФормы = "ФормаОстатковОтпусков";
		Форма.Открыть();
		
	Иначе
		Предупреждение("Нарушение прав доступа!");
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// процедуры поддержки команд в журналах документов

// Процедура дополняет переданный список значений видами документов, регистрируемых 
// в журнале и заполняет их представления
// 
// Параметры:
//	МетаданныеЖурнала - метаданные журнала
//  СписокВидов - необязательный. Дополняемый список значений
Процедура ДополнитьСписокВидовДокументов(МетаданныеЖурнала, СписокВидов) Экспорт
	Если СписокВидов = НеОпределено Тогда
		СписокВидов = Новый СписокЗначений;
	КонецЕсли;
	Для Каждого МетаданныеДокумента Из МетаданныеЖурнала.РегистрируемыеДокументы Цикл
		ВидДокумента = СписокВидов.НайтиПоЗначению(МетаданныеДокумента.Имя);
		Если ВидДокумента = НеОпределено Тогда
			СписокВидов.Добавить(МетаданныеДокумента.Имя, МетаданныеДокумента.Представление());
		Иначе
			Если НЕ ЗначениеЗаполнено(ВидДокумента.Представление) Тогда
				ВидДокумента.Представление = МетаданныеДокумента.Представление();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьПоВидуДокументаСтрокой(ВидДокумента, Организация = Неопределено, ЭлементСписок = Неопределено) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы[ВидДокумента];
	
	Если Не ПравоДоступа("ИнтерактивноеДобавление", МетаданныеДокумента) Тогда
		Предупреждение("Нарушение прав доступа!");
		Возврат;
	КонецЕсли;
	
	ФормаНовогоДокумента = Документы[ВидДокумента].ПолучитьФормуНовогоДокумента(, ЭлементСписок);
	Если Организация <> Неопределено И МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
		Если ТипЗнч(ФормаНовогоДокумента) = Тип("Форма") Тогда
			ФормаНовогоДокумента.Организация = Организация;
		Иначе // Управляемая форма
			ФормаНовогоДокумента.Объект.Организация = Организация;
		КонецЕсли;
	КонецЕсли;
	
	ФормаНовогоДокумента.ЗакрыватьПриЗакрытииВладельца = Ложь;
	ФормаНовогоДокумента.Открыть();
	
КонецПроцедуры

Процедура ОткрытьПоВидуДокумента(ВидДокумента) Экспорт
	Если Не ПравоДоступа("Просмотр", Метаданные.Документы[ВидДокумента]) Тогда
		Предупреждение("Нарушение прав доступа!");
		Возврат;
	КонецЕсли;
	ФормаСписка = Документы[ВидДокумента].ПолучитьФормуСписка();
	ФормаСписка.Открыть();
КонецПроцедуры

Процедура ЖурналДокументовСписокПередНачаломДобавления(СписокВидовДокументов, Отказ, Копирование, Форма, Организация = Неопределено) Экспорт
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	СписокМеню = Новый СписокЗначений;
	
	Для Каждого ЭлементСписка Из СписокВидовДокументов Цикл
		Если ЭлементСписка.Значение <> НеОпределено Тогда
			СписокМеню.Добавить(ЭлементСписка.Значение, 
			ЭлементСписка.Представление,
			ЭлементСписка.Пометка,
			ЭлементСписка.Картинка);
		КонецЕсли;
	КонецЦикла;
	ВыбранныйЭлемент = Форма.ВыбратьИзМеню(СписокМеню);
	Если ВыбранныйЭлемент <> НеОпределено Тогда
		СоздатьПоВидуДокументаСтрокой(ВыбранныйЭлемент.Значение, Организация, Форма.ЭлементыФормы.ЖурналДокументовСписок);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вводит команды для создания документов и открытия форм 
// списков документов для журнала
// Параметры:
//	СписокВидовДокументов - список значений с видами документов строкой
//	КнопкиДобавить - массив подменю, в которые необходимо добавить команды создания документов
//	КнопкиОткрыть - массив подменю, в которые необходимо добавить команды открытия списков документов
//  ДействиеСоздать - действие команды создания документов
//  ДействиеОткрыть - действие команды открытия списков документов
// 
Процедура ВвестиКомандыПоВидамДокументов(СписокВидовДокументов, КнопкиДобавить, КнопкиОткрыть, 
	ДействиеСоздать, ДействиеОткрыть) Экспорт
	Для Каждого ВидДокумента Из СписокВидовДокументов Цикл
		Если ВидДокумента.Значение = НеОпределено Тогда  // разделитель
			Для Каждого Кнопки Из КнопкиДобавить Цикл
				Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			КонецЦикла;
			Для Каждого Кнопки Из КнопкиОткрыть Цикл
				Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			КонецЦикла;
		Иначе // команда
			Для Каждого Кнопки Из КнопкиДобавить Цикл
				Кнопки.Добавить(ВидДокумента.Значение, 
				ТипКнопкиКоманднойПанели.Действие, 
				ВидДокумента.Представление,
				ДействиеСоздать);
			КонецЦикла;
			Для Каждого Кнопки Из КнопкиОткрыть Цикл
				Кнопки.Добавить(ВидДокумента.Значение, 
				ТипКнопкиКоманднойПанели.Действие, 
				ВидДокумента.Представление,
				ДействиеОткрыть);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// возвращает истина если для документа определена печать по умолчанию иначе ложь
//
// Параметры
//  ИмяДокумента					- строка, имя документа
//  СоответствиеОписанияДокументов	- соответствие, содержит признак наличия у документа печатной формы
//
// Возвращаемое значение:
//   булево
//
Функция ДляДокументаОпределенаПечатьПоУмолчанию(ИмяДокумента, СоответствиеОписанияДокументов) Экспорт
	
	ЗначениеИзСоответствия = СоответствиеОписанияДокументов[ИмяДокумента];
	Если ЗначениеИзСоответствия = Неопределено Тогда
		МенеджерДокумента = Документы[ИмяДокумента];
		Попытка
			СтруктураВнутреннихПечатныхФорм = МенеджерДокумента.СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм()
		Исключение
			СтруктураВнутреннихПечатныхФорм = Новый Структура;
		КонецПопытки;
		ДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(МенеджерДокумента.ПустаяСсылка(), СтруктураВнутреннихПечатныхФорм);
		СтрокаПоУмолчанию = УниверсальныеМеханизмы.ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяДокумента, ДеревоМакетов);
		ЗначениеИзСоответствия = СтрокаПоУмолчанию <> Неопределено; 
		СоответствиеОписанияДокументов.Вставить(ИмяДокумента, ЗначениеИзСоответствия);
	КонецЕсли;
	
	Возврат ЗначениеИзСоответствия;
	
КонецФункции // ДляДокументаОпределенаПечатьПоУмолчанию()

// Функция определяет доступность организаций
//
// Параметры
//  нет
//
// Возвращаемое значение:
//	ДоступностьОрганизаций - 	структура, определяет доступность нескольких организаций,
//  							нескольких головных организаций
//
Функция ДоступностьОрганизаций() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Организации.Ссылка,
	|	Организации.ГоловнаяОрганизация
	|ПОМЕСТИТЬ РазрешенныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	КОЛИЧЕСТВО(РазрешенныеОрганизации.Ссылка) КАК КоличествоОрганизаций
	|ПОМЕСТИТЬ ДоступныеОрганизации
	|ИЗ
	|	РазрешенныеОрганизации КАК РазрешенныеОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	КОЛИЧЕСТВО(РазрешенныеОрганизации.Ссылка) КАК КоличествоГоловныхОрганизаций
	|ПОМЕСТИТЬ ДоступныеГоловныеОрганизации
	|ИЗ
	|	РазрешенныеОрганизации КАК РазрешенныеОрганизации
	|ГДЕ
	|	РазрешенныеОрганизации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДоступныеОрганизации.КоличествоОрганизаций > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступноНесколькоОрганизаций,
	|	ВЫБОР
	|		КОГДА ДоступныеГоловныеОрганизации.КоличествоГоловныхОрганизаций > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступноНесколькоГоловныхОрганизаций
	|ИЗ
	|	ДоступныеОрганизации КАК ДоступныеОрганизации,
	|	ДоступныеГоловныеОрганизации КАК ДоступныеГоловныеОрганизации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	ДоступностьОрганизаций = Новый Структура("ДоступноНесколькоОрганизаций,ДоступноНесколькоГоловныхОрганизаций");
	ЗаполнитьЗначенияСвойств(ДоступностьОрганизаций, Выборка);
	
	Возврат ДоступностьОрганизаций;
	
КонецФункции

// Процедура определяет необходимость быстрого отбора по организации, 
//  устанавливает его, если такая необходимость есть, или скрывает, если ее нет
//
// Параметры
//  Форма 							- форма списка документов или журнала документов
//  ИмяСпискаДокументов				- строка, имя реквизита содержащего список документов
//
Процедура НастроитьОтборПоОрганизации(Форма, ИмяСпискаДокументов, ОтборПоГоловнойОрганизации = Ложь) Экспорт
	
	ДоступностьОрганизаций = ДоступностьОрганизаций();
	ОтборДоступен = ?(ОтборПоГоловнойОрганизации, ДоступностьОрганизаций.ДоступноНесколькоГоловныхОрганизаций, ДоступностьОрганизаций.ДоступноНесколькоОрганизаций);
	
	ЭлементыФормы = Форма.ЭлементыФормы;
	ЭлементыФормы[ИмяСпискаДокументов].Колонки.Организация.Видимость = ОтборДоступен;
	
	// если элемент управления отбором размещен на панели - управляем сверткой
	// если нет - видимостью
	Если ЭлементыФормы.Найти("ПанельОтборПоОрганизации") = Неопределено Тогда
		ЭлементыФормы.ОрганизацияФлаг.Видимость = ОтборДоступен;
		ЭлементыФормы.Организация.Видимость 	= ОтборДоступен;
	Иначе
		ЭлементыФормы.ПанельОтборПоОрганизации.Свертка = ?(ОтборДоступен, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	КонецЕсли;
	
	Если ОтборДоступен Тогда
		УстановитьБыстрыйОтборПоОрганизации(Форма, ИмяСпискаДокументов, ОтборПоГоловнойОрганизации);
	КонецЕсли;
	
КонецПроцедуры
//vvv
Функция ДоступностьГруппДоступа() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Организации.Ссылка
	|ПОМЕСТИТЬ РазрешенныеОрганизации
	|ИЗ
	|	Справочник.ГруппыФизическихЛиц КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	КОЛИЧЕСТВО(РазрешенныеОрганизации.Ссылка) КАК КоличествоОрганизаций
	|ПОМЕСТИТЬ ДоступныеОрганизации
	|ИЗ
	|	РазрешенныеОрганизации КАК РазрешенныеОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДоступныеОрганизации.КоличествоОрганизаций > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступноНесколькоОрганизаций
	|ИЗ
	|	ДоступныеОрганизации КАК ДоступныеОрганизации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	ДоступностьОрганизаций = Новый Структура("ДоступноНесколькоОрганизаций");
	ЗаполнитьЗначенияСвойств(ДоступностьОрганизаций, Выборка);
	
	Возврат ДоступностьОрганизаций;
	
КонецФункции
//vvv
Процедура НастроитьОтборПоГруппеДоступа(Форма, ИмяСпискаДокументов) Экспорт
	
	ДоступностьОрганизаций = ДоступностьГруппДоступа();
	ОтборДоступен = ДоступностьОрганизаций.ДоступноНесколькоОрганизаций;
	
	ЭлементыФормы = Форма.ЭлементыФормы;
	//ЭлементыФормы[ИмяСпискаДокументов].Колонки.ГруппаДоступаФизическогоЛица.Видимость = ОтборДоступен;
	ЭлементыФормы[ИмяСпискаДокументов].Колонки.ГруппаДоступаФизическогоЛица.Видимость = Ложь;
	
	// если элемент управления отбором размещен на панели - управляем сверткой
	// если нет - видимостью
	Если ЭлементыФормы.Найти("ПанельОтборПоОрганизации") = Неопределено Тогда
		ЭлементыФормы.ОрганизацияФлаг.Видимость = ОтборДоступен;
		ЭлементыФормы.Организация.Видимость 	= ОтборДоступен;
	Иначе
		ЭлементыФормы.ПанельОтборПоОрганизации.Свертка = ?(ОтборДоступен, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	КонецЕсли;
	
	Если ОтборДоступен Тогда
		УстановитьБыстрыйОтборПоГруппеДоступа(Форма, ИмяСпискаДокументов);
	КонецЕсли;
	
КонецПроцедуры
//vvv
Процедура УстановитьБыстрыйОтборПоГруппеДоступа(Форма, ИмяСпискаДокументов) 
	
	УстанавливатьОтбор = Истина;
	
	// проверим, не открывается ли список из документа
	//ПараметрТекущаяСтрока = Форма.ПараметрТекущаяСтрока;
	//Если ЗначениеЗаполнено(ПараметрТекущаяСтрока) Тогда
	//	ЗначениеОтбора = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПараметрТекущаяСтрока, "Организация");
	//Иначе
		ЗначениеОтбора = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяГруппаДоступа");
		// если форма списка открыта из другой формы, важно не менять установленный формой владельцем отбор
		//УстанавливатьОтбор = Форма.ВладелецФормы = Неопределено;
	//КонецЕсли;
	
	Если УстанавливатьОтбор Тогда
		Форма[ИмяСпискаДокументов].Отбор.ГруппаДоступаФизическогоЛица.Установить(ЗначениеОтбора, ЗначениеЗаполнено(ЗначениеОтбора));	
	КонецЕсли;
		
КонецПроцедуры
//vvv
Процедура ОбработкаИзмененияБыстрогоОтбораПоГруппеДоступа(Форма, Элемент, ИмяСпискаДокументов) Экспорт
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.ГруппыФизическихЛиц.ПустаяСсылка();
	КонецЕсли;
	
	Форма[ИмяСпискаДокументов].Отбор.ГруппаДоступаФизическогоЛица.Использование = ЗначениеЗаполнено(Элемент.Значение);
	
КонецПроцедуры

// Процедура - общая часть обработок оповещения форм списков документов и журналов документов
//
// Параметры
//  Форма 							- форма списка документов или журнала документов
//  ИмяСпискаДокументов				- строка, имя реквизита содержащего список документов
//
Процедура ОбработкаОповещенияСпискаДокументов(ИмяСобытия, Параметр, Источник, Форма, ИмяСпискаДокументов, ОтборПоГоловнойОрганизации = Ложь) Экспорт
		
	Если ИмяСобытия = "ЗаписьПользователя" И Параметр = глЗначениеПеременной("глТекущийПользователь") Тогда
		УстановитьБыстрыйОтборПоОрганизации(Форма, ИмяСпискаДокументов, ОтборПоГоловнойОрганизации);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаИзмененияБыстрогоОтбораПоОрганизации(Форма, Элемент, ИмяСпискаДокументов) Экспорт
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Форма[ИмяСпискаДокументов].Отбор.Организация.Использование = ЗначениеЗаполнено(Элемент.Значение);
	
КонецПроцедуры

Процедура УстановитьБыстрыйОтборПоОрганизации(Форма, ИмяСпискаДокументов, ОтборПоГоловнойОрганизации) 
	
	УстанавливатьОтбор = Истина;
	
	// проверим, не открывается ли список из документа
	ПараметрТекущаяСтрока = Форма.ПараметрТекущаяСтрока;
	Если ЗначениеЗаполнено(ПараметрТекущаяСтрока) Тогда
		ЗначениеОтбора = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПараметрТекущаяСтрока, "Организация");
	Иначе
		ЗначениеОтбора = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		// если форма списка открыта из другой формы, важно не менять установленный формой владельцем отбор
		УстанавливатьОтбор = Форма.ВладелецФормы = Неопределено;
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЗначениеОтбора, "ГоловнаяОрганизация");
	Если ОтборПоГоловнойОрганизации 
		И ЗначениеЗаполнено(ЗначениеОтбора) 
		И ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		ЗначениеОтбора = ГоловнаяОрганизация;
	КонецЕсли;
	
	Если УстанавливатьОтбор Тогда
		Форма[ИмяСпискаДокументов].Отбор.Организация.Установить(ЗначениеОтбора, ЗначениеЗаполнено(ЗначениеОтбора));	
	КонецЕсли;
		
КонецПроцедуры

Процедура СписокДокументовПередНачаломДобавления(Форма, Отказ, Копирование, Организация, ВидДокумента) Экспорт
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	СоздатьПоВидуДокументаСтрокой(ВидДокумента, Организация, Форма.ЭлементыФормы.ДокументСписок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА КОММЕНТИРОВАНИЯ ДЕЙСТВИЙ

Процедура ОткрытьГрафик(Параметры) Экспорт
	
	Если Параметры.Количество() < 2 Тогда
		Для Каждого Элемент Из Параметры Цикл
			Сообщить(Элемент);
		КонецЦикла;
		
	Иначе
		ГрафикРаботы = Параметры[0];
		Дата = Параметры[1];
		Если ТипЗнч(ГрафикРаботы) = Тип("СправочникСсылка.ГрафикиРаботы") Тогда
			// Открываем справочник ГрафикиРаботы.
			ГрафикРаботы.ПолучитьФорму().Открыть();
		ИначеЕсли ТипЗнч(ГрафикРаботы) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
			// Ищем и открываем документ Табель, если его нет, тогда индивидуальныйГрафик
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("Сотрудник", ГрафикРаботы);
			Запрос.УстановитьПараметр("Дата", НачалоМесяца(Дата));
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ГрафикиРаботы.Документ
			|ПОМЕСТИТЬ ВТПодневныеДокументы
			|ИЗ
			|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
			|ГДЕ
			|	ГрафикиРаботы.ГрафикРаботы = &Сотрудник
			|	И НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ) = &Дата
			|	И ГрафикиРаботы.Месяц = &Дата
			|	И (НЕ ГрафикиРаботы.Документ В (ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.СдельныйНаряд.ПустаяСсылка)))
			|
			|СГРУППИРОВАТЬ ПО
			|	ГрафикиРаботы.Документ,
			|	ГрафикиРаботы.План";
			Запрос.Выполнить();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СводныеТабели.Регистратор, ЕСТЬNULL(ПодневныеТабели.Документ, ЕСТЬNULL(СводныеНаряды.Регистратор, ЕСТЬNULL(ПодневныеНаряды.Документ, ЕСТЬNULL(СводныеГрафики.Регистратор, ПодневныеГрафики.Документ))))) КАК документ
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СводныеТабели.Регистратор КАК Регистратор
			|		ИЗ
			|			РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК СводныеТабели
			|		ГДЕ
			|			НАЧАЛОПЕРИОДА(СводныеТабели.Период, ДЕНЬ) = &Дата
			|			И СводныеТабели.Сотрудник = &Сотрудник
			|			И СводныеТабели.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации
			|		
			|		СГРУППИРОВАТЬ ПО
			|			СводныеТабели.Регистратор) КАК СводныеТабели
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодневныеДокументы КАК ПодневныеТабели
			|		ПО (ПодневныеТабели.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СводныеНаряды.Регистратор КАК Регистратор
			|		ИЗ
			|			РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК СводныеНаряды
			|		ГДЕ
			|			НАЧАЛОПЕРИОДА(СводныеНаряды.Период, ДЕНЬ) = &Дата
			|			И СводныеНаряды.Сотрудник = &Сотрудник
			|			И СводныеНаряды.Регистратор ССЫЛКА Документ.СдельныйНаряд
			|		
			|		СГРУППИРОВАТЬ ПО
			|			СводныеНаряды.Регистратор) КАК СводныеНаряды
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодневныеДокументы КАК ПодневныеНаряды
			|		ПО (ПодневныеНаряды.Документ ССЫЛКА Документ.СдельныйНаряд)
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СводныеГрафики.Регистратор КАК Регистратор
			|		ИЗ
			|			РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеГрафики
			|		ГДЕ
			|			СводныеГрафики.Сотрудник = &Сотрудник
			|			И СводныеГрафики.Месяц = &Дата) КАК СводныеГрафики
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодневныеДокументы КАК ПодневныеГрафики
			|		ПО (ПодневныеГрафики.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации)
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка = &Сотрудник
			|	И ЕСТЬNULL(СводныеТабели.Регистратор, ЕСТЬNULL(ПодневныеТабели.Документ, ЕСТЬNULL(СводныеНаряды.Регистратор, ЕСТЬNULL(ПодневныеНаряды.Документ, ЕСТЬNULL(СводныеГрафики.Регистратор, ПодневныеГрафики.Документ))))) ЕСТЬ НЕ NULL ";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Выборка.Документ.ПолучитьФорму().Открыть();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

// Формирует представление переданного вида дохода с "предметной" точки зрения
//
// Параметры
//  , ВидДохода - СправочникСсылка.ДоходыПоСтраховымВзносам - описываемый вид дохода
//
// Возвращаемое значение:
//   строка - сформированное представление
//
Функция ПредставлениеВидаДоходаПоСтраховымВзносам(ВидДохода) Экспорт
	
	Если ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ДоговорыГПХ Тогда
		РасшифровкаВидДохода = "Вознаграждения, выплачиваемые по договорам гражданско-правового характера. Облагаются страховыми взносами в ПФР и ФОМС целиком, не облагаются страховыми взносами в ФСС (пункт 2 части 3 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.Матпомощь Тогда
		РасшифровкаВидДохода = "Облагается страховыми взносами в ПФР, ФОМС и ФСС частично (пункт 11 части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.МатпомощьПриРожденииРебенка Тогда
		РасшифровкаВидДохода = "Облагается страховыми взносами в ПФР, ФОМС и ФСС частично (подпункт в) пункта 3 части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.НеОблагаетсяЦеликом Тогда
		РасшифровкаВидДохода = "Является объектом обложения, но не облагается целиком страховыми взносами в ПФР, ФОМС и ФСС на основании части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ (кроме пособий по социальному страхованию за счет ФСС, частично облагаемой материальной помощи и денежного довольствия)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.НеЯвляетсяОбъектом Тогда
		РасшифровкаВидДохода = "Не является объектом обложения страховыми взносами в ПФР, ФОМС и ФСС в соответствии с частями 3 и 4 статьи 7 Федерального закона от 24 июля 2009 года № 212-ФЗ"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ОблагаетсяЦеликом Тогда
		РасшифровкаВидДохода = "Облагается целиком страховыми взносами в ПФР, ФОМС и ФСС"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ПособияЗаСчетФСС Тогда
		РасшифровкаВидДохода = "Не облагаются целиком страховыми взносами в ПФР, ФОМС и ФСС в соответствии с пунктом 1 части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.РаспределятьПоБазовымНачислениям Тогда
		РасшифровкаВидДохода = "Порядок учета начисления определяется по расчетной базе"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ДенежноеДовольствиеВоеннослужащих Тогда
		РасшифровкаВидДохода = "Не облагается целиком страховыми взносами в ПФР, ФОМС и ФСС в соответствии с пунктом 14 части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ДенежноеСодержаниеПрокуроров Тогда
		РасшифровкаВидДохода = "Облагается страховыми взносами в ФСС и ФОМС целиком, не облагаются страховыми взносами в ПФР (пункт 1 части 3 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоГражданскоПравовомуДоговору Тогда
		РасшифровкаВидДохода = "Облагаются страховыми взносами в ФОМС целиком, не облагаются страховыми взносами в ПФР и ФСС (пункты 1, 2 части 3 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоТрудовомуДоговору Тогда
		РасшифровкаВидДохода = "Облагается страховыми взносами в ФСС и ФОМС целиком, не облагаются страховыми взносами в ПФР (пункт 1 части 3 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ЗначениеЗаполнено(ВидДохода) Тогда // различные авторские
		РасшифровкаВидДохода = "При исчислении страховых взносов в ПФР, ФОМС учитываются произведенные расходы согласно части 7 статьи 8 Федерального закона от 24 июля 2009 года № 212-ФЗ, не облагаются страховыми взносами в ФСС (пункт 2 части 3 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ПустаяСсылка() Тогда
		РасшифровкаВидДохода = "Не указан порядок учета начисления для целей исчисления страховых взносов в ПФР, ФОМС и ФСС"
	Иначе
		РасшифровкаВидДохода = "Не отражается в учете для целей исчисления взносов в ПФР, ФОМС и ФСС"
	КонецЕсли;
	
	Возврат РасшифровкаВидДохода	
	
КонецФункции // ПолучитьПредставлениеКодаДоходаПоЕСН()

// Формирует представление переданного вида дохода с "предметной" точки зрения
//
// Параметры
//  , ВидНачисления - ПеречислениеСсылка.ВидыНачисленийОплатыТрудаПоСт255НК - описываемый вид дохода
//
// Возвращаемое значение:
//   строка - сформированное представление
//
Функция ПолучитьПредставлениеВидаДоходаПоНУ(ВидНачисления) Экспорт
	
	Если ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп1ст255 Тогда
		РасшифровкаВидНачисления = "Суммы, начисленные по тарифным ставкам, должностным окладам, сдельным расценкам или в процентах от выручки в соответствии с принятыми формами и системами оплаты труда"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп2ст255 Тогда
		РасшифровкаВидНачисления = "Начисления стимулирующего характера, в том числе премии за производственные результаты, надбавки к тарифным ставкам и окладам за профессиональное мастерство, высокие достижения в труде и иные подобные показатели"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп3ст255 Тогда
		РасшифровкаВидНачисления = "Начисления стимулирующего и/или компенсирующего характера, связанные с режимом работы и условиями труда, в том числе надбавки к тарифным ставкам и окладам за работу в ночное время, работу в многосменном режиме, за совмещение профессий, расширение зон обслуживания, за работу в тяжелых, вредных, особо вредных условиях труда, за сверхурочную работу и работу в выходные и праздничные дни, производимые в соответствии с законодательством РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп4ст255 Тогда
		РасшифровкаВидНачисления = "Стоимость бесплатно предоставляемых работникам в соответствии с законодательством РФ коммунальных услуг, питания и продуктов, предоставляемого работникам в соответствии с установленным законодательством РФ порядком бесплатного жилья"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп5ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на приобретение (изготовление) выдаваемых в соответствии с законодательством РФ работникам бесплатно либо продаваемых работникам по пониженным ценам форменной одежды и обмундирования (в части стоимости, не компенсируемой работниками), которые остаются в личном постоянном пользовании работников"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп6ст255 Тогда
		РасшифровкаВидНачисления = "Сумма начисленного работникам среднего заработка, сохраняемого на время выполнения ими государственных и (или) общественных обязанностей и в других случаях, предусмотренных законодательством РФ о труде"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп7ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на оплату труда, сохраняемую работникам на время отпуска, предусмотренного законодательством РФ, фактические расходы на оплату проезда работников и лиц, находящихся у этих работников на иждивении, к месту использования отпуска на территории РФ и обратно; доплата несовершеннолетним за сокращенное рабочее время, расходы на оплату перерывов в работе матерей для кормления ребенка, а также расходы на оплату времени, связанного с прохождением медицинских осмотров"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп8ст255 Тогда
		РасшифровкаВидНачисления = "Денежные компенсации за неиспользованный отпуск в соответствии с трудовым законодательством РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп9ст255 Тогда
		РасшифровкаВидНачисления = "Начисления работникам, высвобождаемым в связи с реорганизацией или ликвидацией организации, сокращением численности или штата работников"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп10ст255 Тогда
		РасшифровкаВидНачисления = "Единовременные вознаграждения за выслугу лет (надбавки за стаж работы по специальности) в соответствии с законодательством РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп11ст255 Тогда
		РасшифровкаВидНачисления = "Надбавки, обусловленные районным регулированием оплаты труда, в том числе начисления по районным коэффициентам и коэффициентам за работу в тяжелых природно-климатических условиях"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп12ст255 Тогда
		РасшифровкаВидНачисления = "Надбавки за непрерывный стаж работы в районах Крайнего Севера и приравненных к ним местностях, в районах европейского Севера и других районах с тяжелыми природно-климатическими условиями"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп12_1ст255 Тогда
		РасшифровкаВидНачисления = "Стоимость проезда по фактическим расходам и стоимость провоза багажа из расчета не более 5 тонн на семью по фактическим расходам, но не выше тарифов, предусмотренных для перевозок железнодорожным транспортом сотруднику организации, расположенной в районах Крайнего Севера и приравненных к ним местностях, и членам его семьи в случае переезда к новому месту жительства в другую местность в связи с расторжением трудового договора с сотрудником по любым основаниям, в том числе в случае его смерти, за исключением увольнения за виновные действия"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп13ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на оплату труда, сохраняемую в соответствии с законодательством РФ на время учебных отпусков, предоставляемых работникам, а также расходы на оплату проезда к месту учебы и обратно"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп14ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на оплату труда за время вынужденного прогула или время выполнения нижеоплачиваемой работы в случаях, предусмотренных законодательством РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп15ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на доплату до фактического заработка в случае временной утраты трудоспособности, установленную законодательством РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп16ст255 Тогда
		РасшифровкаВидНачисления = "Суммы платежей (взносов) по договорам обязательного страхования, а также суммы платежей (взносов) по договорам добровольного страхования (договорам негосударственного пенсионного обеспечения), заключенным в пользу работников со страховыми организациями (негосударственными пенсионными фондами), имеющими лицензии, выданные в соответствии с законодательством РФ, на ведение соответствующих видов деятельности в РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп17ст255 Тогда
		РасшифровкаВидНачисления = "Суммы, начисленные в размере тарифной ставки или оклада (при выполнении работ вахтовым методом), предусмотренные коллективными договорами, за дни нахождения в пути от места нахождения организации (пункта сбора) к месту работы и обратно, предусмотренные графиком работы на вахте, а также за дни задержки работников в пути по метеорологическим условиям"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп18ст255 Тогда
		РасшифровкаВидНачисления = "Суммы, начисленные за выполненную работу физическим лицам, привлеченным для работы согласно специальным договорам на предоставление рабочей силы с государственными организациями"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп19ст255 Тогда
		РасшифровкаВидНачисления = "В случаях, предусмотренных законодательством РФ, начисления по основному месту работы рабочим, руководителям или специалистам налогоплательщика во время их обучения с отрывом от работы в системе повышения квалификации или переподготовки кадров"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп20ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на оплату труда работников-доноров за дни обследования, сдачи крови и отдыха, предоставляемые после каждого дня сдачи крови"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп21ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на оплату труда работников, не состоящих в штате организации, за выполнение ими работ по заключенным договорам гражданско-правового характера (включая договоры подряда), за исключением оплаты труда по договорам гражданско-правового характера, заключенным с индивидуальными предпринимателями"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп22ст255 Тогда
		РасшифровкаВидНачисления = "Предусмотренные законодательством РФ начисления военнослужащим, проходящим военную службу на государственных унитарных предприятиях и в строительных организациях федеральных органов исполнительной власти, в которых законодательством РФ предусмотрена военная служба, и лицам рядового и начальствующего состава органов внутренних дел, Государственной противопожарной службы, предусмотренные федеральными законами, законами о статусе военнослужащих и об учреждениях и органах, исполняющих уголовные наказания в виде лишения свободы"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп23ст255 Тогда
		РасшифровкаВидНачисления = "Доплаты инвалидам, предусмотренные законодательством РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп24ст255 Тогда
		РасшифровкаВидНачисления = "Расходы в виде отчислений в резерв на предстоящую оплату отпусков работникам и (или) в резерв на выплату ежегодного вознаграждения за выслугу лет, осуществляемые в соответствии со статьей 324.1 НК"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп25ст255 Тогда
		РасшифровкаВидНачисления = "Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором"
	ИначеЕсли ВидНачисления.Пустая() Тогда
		РасшифровкаВидНачисления = "Не учитывается в расходах на оплату труда"
	КонецЕсли;
	
	Возврат РасшифровкаВидНачисления	
	
КонецФункции // ПолучитьПредставлениеВидаДоходаПоНУ()


Процедура ПеренестиБлокКолонокЦеликом(КоллекцияКолонок, КолонкаЗаголовок, БлокКолонок) Экспорт
	
	ВидимостьКолонок = КолонкаЗаголовок.Видимость;
	ИндексЗаголовка = КоллекцияКолонок.Индекс(КолонкаЗаголовок);
	Для каждого КолонкаБлока Из БлокКолонок Цикл
		КолонкаБлока.Видимость = ВидимостьКолонок
	КонецЦикла;
	Смещение = КоллекцияКолонок.Индекс(КолонкаЗаголовок) - КоллекцияКолонок.Индекс(БлокКолонок[0]) + 1;
	Если Смещение <> 0 Тогда
		Для Индекс = 0 по БлокКолонок.ВГраница() Цикл
			КолонкаБлока = БлокКолонок[Индекс];
			КоллекцияКолонок.Сдвинуть(КолонкаБлока,Смещение);
			КолонкаБлока.Положение = ?(Индекс = 0, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.ВТойЖеКолонке)
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура ПрочитатьГодыРасчетаСреднего2011(ДокументОбъект, ФормаДокумента) Экспорт
	
	ГодыРасчетаСреднего2011 = ДокументОбъект.ГодыРасчетаСреднего2011;
	
	ВсегоСтрок = ГодыРасчетаСреднего2011.Количество();
	Если ВсегоСтрок = 2 Тогда
		ФормаДокумента.ПервыйГодРасчета = ГодыРасчетаСреднего2011[0].Год;
		ФормаДокумента.ВторойГодРасчета = ГодыРасчетаСреднего2011[1].Год;
	ИначеЕсли ВсегоСтрок = 1 Тогда	
		ФормаДокумента.ПервыйГодРасчета = ГодыРасчетаСреднего2011[0].Год;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьГодыРасчетаСреднего2011(ДокументОбъект, ФормаДокумента) Экспорт

	ДокументОбъект.ГодыРасчетаСреднего2011.Очистить();
	Если ФормаДокумента.ПервыйГодРасчета <> 0 Тогда
		ДокументОбъект.ГодыРасчетаСреднего2011.Добавить().Год = ФормаДокумента.ПервыйГодРасчета;
	КонецЕсли;
	Если ФормаДокумента.ВторойГодРасчета <> 0 Тогда
		ДокументОбъект.ГодыРасчетаСреднего2011.Добавить().Год = ФормаДокумента.ВторойГодРасчета;
	КонецЕсли;
	ДокументОбъект.ГодыРасчетаСреднего2011.Сортировать("Год");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

// Заполняет указанные подменю переданными командами, назначая всем один обработчик
//
// Параметры
//  Кнопки - коллекция типа КнопкиКоманднойПанели 
//  Команды - список значений
//	Обработчик - действие с обработчиком команд
//
// Возвращаемое значение:
//   строка - сформированное представление
//
Процедура ЗаполнитьКнопкиКоманднойПанелиСпискомКоманд(Кнопки, СписокКоманд, Обработчик) Экспорт
	
	Если СписокКоманд.Количество() Тогда
		
		КомандыИзменились = Кнопки.Количество() <> СписокКоманд.Количество();
		Если НЕ КомандыИзменились Тогда
			Для Н=0 По СписокКоманд.Количество()-1 Цикл
				Если Кнопки[Н].Имя <> СписокКоманд[Н].Значение Тогда
					КомандыИзменились = Истина;
					Прервать
				КонецЕсли	
			КонецЦикла
		КонецЕсли;	
		
		Если КомандыИзменились Тогда
				
			Кнопки.Очистить();
			
			Для Каждого Команда Из СписокКоманд Цикл
				НоваяКнопка = Кнопки.Добавить(Команда.Значение, ТипКнопкиКоманднойПанели.Действие, Команда.Представление, Обработчик);
				НоваяКнопка.Картинка = Команда.Картинка;	
			КонецЦикла
				
		КонецЕсли;
		
	Иначе
		Кнопки.Очистить()
	КонецЕсли;
	
КонецПроцедуры	

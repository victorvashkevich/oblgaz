
////////////////////////////////////////////////////////////////////////////////
//  Функции-проверки

// Возвращает значение истина если за, переданный период заполнен регламетированный производственный календарь
//
// Параметры:
//
//  НачалоПериода - дата начала периода
//  КонецПериода - дата конца периода
//
Функция ЗаполненРегламентированныйПроизводственныйКалендарь(НачалоПериода, КонецПериода) Экспорт
	
	ТЗ = "ВЫБРАТЬ
	     |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	     |ИЗ
	     |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	     |ГДЕ
	     |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоПериода И &КонецПериода";
		 
	Запрос = Новый Запрос(ТЗ);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции  //ЗаполненРегламентированныйПроизводственныйКалендарь()

////////////////////////////////////////////////////////////////////////////////
//  Общие процедуры печати

// Представление незаполненой даты в печатных формах документов.
//
// Параметры
//
// Возвращаемое значение:
//   Строка   - "___"_________20__ г.
//
Функция ПустаяДатаВПечатнойФорме() Экспорт

	Возврат """___""_________20__ г."

КонецФункции // ПустаяДатаВПечатнойФорме()

// Возвращает процент северной надбавки на указаную дату
//
// Параметры:
//  ДатаРегистрации - дата регистрации записи о стаже
//  ПорядокНачисления - порядок начисления северной надбавки - ПеречислениеСсылка.ПорядокНачисленияСеверныхНадбавок
//  НачальныйПроцент - процент на дату ДатаРегистрации
//  Месяцев - количество месяцев стажа на дату ДатаРегистрации
//  Дней - количество дней стажа на дату ДатаРегистрации
//  Дата - начало периода, в котором мы получаем сведения о процентах надбавки
//
Функция ПолучитьПроцентСевернойНадбавкиНаДату(ДатаРегистрацииСеверногоСтажа, ПорядокНачисленияСеверныхНадбавок, НачальныйПроцентСевернойНадбавки, СеверныйСтажМесяцев, СеверныйСтажДней, ОкончаниеПериодаЗаполнения) Экспорт
	
	Массив = ПроведениеРасчетов.ПолучитьПроцентыСевернойНадбавкиЗаПериод(
					ДатаРегистрацииСеверногоСтажа, 
					ПорядокНачисленияСеверныхНадбавок, 
					НачальныйПроцентСевернойНадбавки,
					СеверныйСтажМесяцев,
					СеверныйСтажДней,
					ОкончаниеПериодаЗаполнения,
					ОкончаниеПериодаЗаполнения);
					
	Процент = Массив[Массив.Количество()-1].Процент;
					
	Возврат Процент;

КонецФункции //ПолучитьПроцентСевернойНадбавкиНаДату

// Функция возвращает текст запроса, в котором ответственные лица организаций помещаются во временную таблицу
//
Функция ПолучитьТекстЗапросаПоОтветственнымЛицам(ПараметрОтбораПоДате, УсловиеОтбора) Экспорт
	
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо.Наименование КАК НаименованиеФизлица,
	|	ОтветственныеЛицаСрезПоследних.Должность.Наименование КАК Должность,
	|	ОтветственныеЛицаСрезПоследних.ОтветственноеЛицо,
	|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо КАК Физлицо,
	|	ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница,
	|	ФизическиеЛица.Комментарий
	|ПОМЕСТИТЬ ВТОтветственныеЛица
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			&" + ПараметрОтбораПоДате + ",
	|			" + УсловиеОтбора + ") КАК ОтветственныеЛицаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
	|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
	|			ИНАЧЕ """"
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
	|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "". ""
	|			ИНАЧЕ """"
	|		КОНЕЦ + ФИОФизЛицСрезПоследних.Фамилия, ОтветственныеЛицаСрезПоследних.НаименованиеФизлица) КАК НаименованиеОтветственногоЛица,
	|	ОтветственныеЛицаСрезПоследних.Должность,
	|	ОтветственныеЛицаСрезПоследних.ОтветственноеЛицо,
	|	ОтветственныеЛицаСрезПоследних.Физлицо,
	|	ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОтветственныеЛицаСрезПоследних.Комментарий
	|ПОМЕСТИТЬ ВТДанныеОбОтветственномЛице
	|ИЗ
	|	ВТОтветственныеЛица КАК ОтветственныеЛицаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&" + ПараметрОтбораПоДате + ",
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						Ответственные.Физлицо
	|					ИЗ
	|						ВТОтветственныеЛица КАК Ответственные)) КАК ФИОФизЛицСрезПоследних
	|		ПО ОтветственныеЛицаСрезПоследних.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтруктурнаяЕдиница";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//  Формирование общих печатных форм

#Если Клиент Тогда

Процедура ПечатьСправкиПоРегламентированнымОтпускамСотрудника(Сотрудник, ДатаУвольнения = Неопределено, Регистратор = Неопределено) Экспорт
	
	ФорматДаты = "ДФ='d MMM yyyy ""г.""'";
	ДлинаСуток = 86400;
	
	КомпонентаСклоненияФИО = глЗначениеПеременной("глКомпонентаСклоненияФИО");
	
	Макет = ПолучитьОбщийМакет("СправкаПоОтпускамСотрудника");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаПоРегламентированнымОтпускамСотрудника";
	
	Запрос = Новый Запрос;
	
	// Если передан регистратор, необходимо исключить как движения регистратора,
	// так и движения всех документов исправлений этого регистратора.
	Если Регистратор <> Неопределено Тогда
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(Регистратор);
		
		МетаданныеРегистратора = Регистратор.Метаданные();
		Если МетаданныеРегистратора.Реквизиты.Найти("ПерерассчитываемыйДокумент") <> Неопределено Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Док.ПерерассчитываемыйДокумент
			|ИЗ
			|	Документ." + МетаданныеРегистратора.Имя + " КАК Док
			|ГДЕ
			|	Док.Ссылка = &Ссылка";
			
			Ссылка = Регистратор;
			Пока Ссылка <> Неопределено Цикл
				Запрос.УстановитьПараметр("Ссылка",	Ссылка);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Ссылка = Выборка.ПерерассчитываемыйДокумент;
					МассивДокументов.Добавить(Ссылка);
				Иначе
					Ссылка = Неопределено;
				КонецЕсли;
			КонецЦикла;
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Док.Ссылка
			|ИЗ
			|	Документ." + МетаданныеРегистратора.Имя + " КАК Док
			|ГДЕ
			|	Док.ПерерассчитываемыйДокумент = &Ссылка";
			
			Ссылка = Регистратор;
			Пока Ссылка <> Неопределено Цикл
				Запрос.УстановитьПараметр("Ссылка",	Ссылка);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Ссылка = Выборка.Ссылка;
					МассивДокументов.Добавить(Ссылка);
				Иначе
					Ссылка = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивДокументов",	МассивДокументов);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудник",		Сотрудник);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.ДатаПриемаНаРаботу КАК ДатаПриема,
	|	СотрудникиОрганизаций.ТекущееПодразделениеОрганизации КАК Подразделение,
	|	СотрудникиОрганизаций.ТекущаяДолжностьОрганизации КАК Должность,
	|	СотрудникиОрганизаций.Физлицо.Пол КАК Пол,
	|	СотрудникиОрганизаций.ТекущееОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ВЫБОР
	|		КОГДА СотрудникиОрганизаций.ДатаУвольнения > СотрудникиОрганизаций.ДатаПриемаНаРаботу
	|			ТОГДА СотрудникиОрганизаций.ДатаУвольнения
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаУвольнения
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДатаПриема = Дата(1,1,1);
	Если Выборка.Следующий() Тогда
		ДатаПриема = Выборка.ДатаПриема;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ОбщиеДанные");
		ОбластьМакета.Параметры.Заполнить(Выборка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Период		= Формат(ДатаПриема, ФорматДаты);
		Если Выборка.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
			ОбластьМакета.Параметры.Комментарий	= "Принята на работу";
		Иначе
			ОбластьМакета.Параметры.Комментарий	= "Принят на работу";
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Если ДатаУвольнения = Неопределено Тогда
		СотрудникУволен		= ЗначениеЗаполнено(Выборка.ДатаУвольнения);
		ДатаАктуальности	= ?(СотрудникУволен, Выборка.ДатаУвольнения, ОбщегоНазначения.ПолучитьРабочуюДату());
	Иначе
		СотрудникУволен		= Ложь;
		ДатаАктуальности	= ДатаУвольнения;
	КонецЕсли;
	
	// Таблица введенных остатков отпусков
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиСрез.ДатаОкончанияРабочегоГода КАК Период,
	|	ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска.Наименование КАК ВидЕжегодногоОтпуска,
	|	СУММА(ОстаткиОтпусковОстатки.Количество) КАК Количество
	|ИЗ
	|	Справочник.ОстаткиОтпусковОрганизаций.Остатки КАК ОстаткиОтпусковОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|			МАКСИМУМ(ВложенныйЗапрос.ДатаОкончанияРабочегоГода) КАК ДатаОкончанияРабочегоГода,
	|			ВложенныйЗапрос.ДатаАктуальности КАК ДатаАктуальности
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ОстаткиОтпусковОрганизацийОстатки.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|				ОстаткиОтпусковОрганизацийОстатки.ДатаОкончанияРабочегоГода КАК ДатаОкончанияРабочегоГода,
	|				МАКСИМУМ(ОстаткиОтпусковОрганизацийОстатки.Ссылка.ДатаАктуальности) КАК ДатаАктуальности
	|			ИЗ
	|				Справочник.ОстаткиОтпусковОрганизаций.Остатки КАК ОстаткиОтпусковОрганизацийОстатки
	|			ГДЕ
	|				ОстаткиОтпусковОрганизацийОстатки.Ссылка.Сотрудник = &Сотрудник
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОстаткиОтпусковОрганизацийОстатки.ВидЕжегодногоОтпуска,
	|				ОстаткиОтпусковОрганизацийОстатки.ДатаОкончанияРабочегоГода) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.ВидЕжегодногоОтпуска,
	|			ВложенныйЗапрос.ДатаАктуальности) КАК ОстаткиСрез
	|		ПО ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска = ОстаткиСрез.ВидЕжегодногоОтпуска
	|			И ОстаткиОтпусковОстатки.Ссылка.ДатаАктуальности = ОстаткиСрез.ДатаАктуальности
	|			И (ОстаткиОтпусковОстатки.Ссылка.Сотрудник = &Сотрудник)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиСрез.ДатаОкончанияРабочегоГода,
	|	ОстаткиОтпусковОстатки.ВидЕжегодногоОтпуска.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ВидЕжегодногоОтпуска
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Период";
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Таблица компенсаций отпусков
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФактическиеОтпускаОрганизаций.Период КАК ДатаКомпенсации,
	|	ФактическиеОтпускаОрганизаций.Количество КАК ДнейКомпенсации
	|ИЗ
	|	РегистрНакопления.ФактическиеОтпускаОрганизаций КАК ФактическиеОтпускаОрганизаций
	|ГДЕ
	|	ФактическиеОтпускаОрганизаций.Сотрудник = &Сотрудник
	|	" + ?(Регистратор = Неопределено, "", "И (НЕ ФактическиеОтпускаОрганизаций.Регистратор В (&МассивДокументов))") + "
	|	И ФактическиеОтпускаОрганизаций.Компенсация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаКомпенсации";
	ТаблицаКомпенсаций = Запрос.Выполнить().Выгрузить();
	
	// Таблица отсутствий, которые увеличивают рабочий год
	Запрос.УстановитьПараметр("ТекущаяДата",	ДатаАктуальности);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостояниеРаботниковОрганизаций.Период КАК Период,
	|	СостояниеРаботниковОрганизаций.Состояние КАК Состояние,
	|	СостояниеРаботниковОрганизаций.ПериодЗавершения КАК ПериодЗавершения,
	|	СостояниеРаботниковОрганизаций.СостояниеЗавершения
	|ПОМЕСТИТЬ ВТСостояние
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|ГДЕ
	|	СостояниеРаботниковОрганизаций.Сотрудник = &Сотрудник
	|	И СостояниеРаботниковОрганизаций.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ПериодЗавершения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостояниеРаботниковОрганизаций.Период КАК ПериодНачала,
	|	МИНИМУМ(СостояниеРаботниковОрганизацийЗавершения.Период) КАК ДатаСреза
	|ПОМЕСТИТЬ ВТСрезСостояний
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизацийЗавершения
	|		ПО (СостояниеРаботниковОрганизаций.Сотрудник = &Сотрудник)
	|			И (СостояниеРаботниковОрганизацийЗавершения.Сотрудник = &Сотрудник)
	|			И СостояниеРаботниковОрганизаций.Период < СостояниеРаботниковОрганизацийЗавершения.Период
	|			И (СостояниеРаботниковОрганизаций.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы)))
	|
	|СГРУППИРОВАТЬ ПО
	|	СостояниеРаботниковОрганизаций.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодНачала,
	|	ДатаСреза
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСрезСостояний.ПериодНачала КАК ПериодНачала,
	|	СостояниеРаботниковОрганизацийЗавершения.Период КАК Период,
	|	СостояниеРаботниковОрганизацийЗавершения.Состояние
	|ПОМЕСТИТЬ ВТСостояниеЗавершения
	|ИЗ
	|	ВТСрезСостояний КАК ВТСрезСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизацийЗавершения
	|		ПО (СостояниеРаботниковОрганизацийЗавершения.Сотрудник = &Сотрудник)
	|			И ВТСрезСостояний.ДатаСреза = СостояниеРаботниковОрганизацийЗавершения.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодНачала,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(СостояниеРаботников.ДатаНачалаОтпуска, СостояниеРаботников.ДатаОкончанияОтпуска, ДЕНЬ) КАК КоличествоДнейОтпуска,
	|	СостояниеРаботников.ДатаНачалаОтпуска КАК ДатаНачалаОтпуска,
	|	ДОБАВИТЬКДАТЕ(СостояниеРаботников.ДатаОкончанияОтпуска, ДЕНЬ, -1) КАК ДатаОкончанияОтпуска,
	|	СостояниеРаботников.Состояние,
	|	РАЗНОСТЬДАТ(СостояниеРаботников.ДатаНачалаОтпуска, СостояниеРаботников.ДатаОкончанияОтпуска, ДЕНЬ) КАК КоличествоДнейПродления,
	|	СостояниеРаботников.ДатаНачалаОтпуска КАК ДатаНачалаПродления
	|ИЗ
	|	(ВЫБРАТЬ
	|		СостояниеРаботниковОрганизаций.Период КАК ДатаНачалаОтпуска,
	|		ВЫБОР
	|			КОГДА СостояниеРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|					И (СостояниеРаботниковОрганизацийЗавершения.Период ЕСТЬ NULL 
	|						ИЛИ СостояниеРаботниковОрганизацийЗавершения.Период > СостояниеРаботниковОрганизаций.ПериодЗавершения)
	|				ТОГДА СостояниеРаботниковОрганизаций.ПериодЗавершения
	|			КОГДА ЕСТЬNULL(СостояниеРаботниковОрганизацийЗавершения.Период, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА СостояниеРаботниковОрганизацийЗавершения.Период
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 1)
	|		КОНЕЦ КАК ДатаОкончанияОтпуска,
	|		СостояниеРаботниковОрганизаций.Состояние КАК Состояние,
	|		ВЫБОР
	|			КОГДА СостояниеРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|					И (СостояниеРаботниковОрганизацийЗавершения.Период ЕСТЬ NULL 
	|						ИЛИ СостояниеРаботниковОрганизацийЗавершения.Период > СостояниеРаботниковОрганизаций.ПериодЗавершения)
	|				ТОГДА СостояниеРаботниковОрганизаций.СостояниеЗавершения
	|			КОГДА ЕСТЬNULL(СостояниеРаботниковОрганизацийЗавершения.Период, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА СостояниеРаботниковОрганизацийЗавершения.Состояние
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает)
	|		КОНЕЦ КАК СостояниеЗавершения
	|	ИЗ
	|		ВТСостояние КАК СостояниеРаботниковОрганизаций
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеЗавершения КАК СостояниеРаботниковОрганизацийЗавершения
	|			ПО СостояниеРаботниковОрганизаций.Период < СостояниеРаботниковОрганизацийЗавершения.Период
	|				И СостояниеРаботниковОрганизаций.Период = СостояниеРаботниковОрганизацийЗавершения.ПериодНачала) КАК СостояниеРаботников
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачалаОтпуска";
	ТаблицаИсключаемыхОтпусков = Запрос.Выполнить().Выгрузить();
	
	// Таблица фактических отпусков
	Запрос.Текст =
	"ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	ФактическиеОтпускаОрганизаций.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпускаОрганизаций.Период КАК ДатаНачала,
	|	ФактическиеОтпускаОрганизаций.ДатаОкончания КАК ДатаОкончания,
	|	ФактическиеОтпускаОрганизаций.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпускаОрганизаций.Количество,
	|	ФактическиеОтпускаОрганизаций.ДатаРегистрации КАК ДатаРегистрации,
	|	ФактическиеОтпускаОрганизаций.Регистратор КАК Регистратор,
	|	ФактическиеОтпускаОрганизаций.НомерСтроки КАК НомерСтрокиРегистра
	|ИЗ
	|	РегистрНакопления.ФактическиеОтпускаОрганизаций КАК ФактическиеОтпускаОрганизаций
	|ГДЕ
	|	ФактическиеОтпускаОрганизаций.Сотрудник = &Сотрудник
	|	" + ?(Регистратор = Неопределено, "", "И (НЕ ФактическиеОтпускаОрганизаций.Регистратор В (&МассивДокументов))") + "
	|	И (НЕ ФактическиеОтпускаОрганизаций.Компенсация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРегистрации,
	|	Регистратор,
	|	НомерСтрокиРегистра";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НомерСтроки",				Новый ОписаниеТипов("Число"));
	ТаблицаПериодов.Колонки.Добавить("Сотрудник",				Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТаблицаПериодов.Колонки.Добавить("ВидЕжегодногоОтпуска",	Новый ОписаниеТипов("СправочникСсылка.ВидыЕжегодныхОтпусков"));
	ТаблицаПериодов.Колонки.Добавить("ДатаНачала",				Новый ОписаниеТипов("Дата"));
	ТаблицаПериодов.Колонки.Добавить("ДатаОкончания",			Новый ОписаниеТипов("Дата"));
	ТаблицаПериодов.Колонки.Добавить("Количество",				Новый ОписаниеТипов("Число"));
	ТаблицаПериодов.Колонки.Добавить("ДатаРегистрации",			Новый ОписаниеТипов("Дата"));
	Если ДатаУвольнения <> Неопределено Тогда
		ТаблицаПериодов.Колонки.Добавить("ДатаРасчетаПриУвольнении",	Новый ОписаниеТипов("Дата"));
	КонецЕсли;
	
	ТаблицаСторноОтпусков = Новый ТаблицаЗначений;
	ТаблицаСторноОтпусков.Колонки.Добавить("НомерСтроки",			Новый ОписаниеТипов("Число"));
	ТаблицаСторноОтпусков.Колонки.Добавить("Сотрудник",				Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТаблицаСторноОтпусков.Колонки.Добавить("ВидЕжегодногоОтпуска",	Новый ОписаниеТипов("СправочникСсылка.ВидыЕжегодныхОтпусков"));
	ТаблицаСторноОтпусков.Колонки.Добавить("ДатаНачала",			Новый ОписаниеТипов("Дата"));
	ТаблицаСторноОтпусков.Колонки.Добавить("ДатаОкончания",			Новый ОписаниеТипов("Дата"));
	ТаблицаСторноОтпусков.Колонки.Добавить("Количество",			Новый ОписаниеТипов("Число"));
	ТаблицаСторноОтпусков.Колонки.Добавить("ДатаРегистрации",		Новый ОписаниеТипов("Дата"));
	
	НомерСтроки = 1;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Количество > 0 Тогда
			Строка = ТаблицаПериодов.Добавить();
			Если ДатаУвольнения <> Неопределено Тогда
				Строка.ДатаРасчетаПриУвольнении	= ДатаУвольнения;
			КонецЕсли;
		Иначе
			Строка = ТаблицаСторноОтпусков.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Строка, Выборка);
		Строка.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// Выборка по видам отпусков
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыЕжегодныхОтпусков.Ссылка,
	|	ВидыЕжегодныхОтпусков.Код КАК Код
	|ИЗ
	|	Справочник.ВидыЕжегодныхОтпусков КАК ВидыЕжегодныхОтпусков
	|ГДЕ
	|	(НЕ ВидыЕжегодныхОтпусков.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	ВыборкаПоВидамОтпусков = Запрос.Выполнить().Выбрать();
	
	// Получим остатки отпуска на следующий день после текущего или после даты увольнения,
	// Чтобы отпуска текущего дня тоже попали в отчет
	Пока ВыборкаПоВидамОтпусков.Следующий() Цикл
		Строка = ТаблицаПериодов.Добавить();
		Строка.НомерСтроки					= 0;
		Строка.ВидЕжегодногоОтпуска			= ВыборкаПоВидамОтпусков.Ссылка;
		Строка.Сотрудник					= Сотрудник;
		Строка.ДатаНачала					= ДатаАктуальности + ДлинаСуток;
		Строка.ДатаОкончания				= ДатаАктуальности + ДлинаСуток;
		Если ДатаУвольнения <> Неопределено Тогда
			Строка.ДатаРасчетаПриУвольнении	= ДатаУвольнения;
		КонецЕсли;
	КонецЦикла;
	
	// Получим остатки на конец каждого рабочего года, если сотрудник принят на работу
	Если ЗначениеЗаполнено(ДатаПриема) Тогда
		ТаблицаРабочихЛет = Новый ТаблицаЗначений;
		ТаблицаРабочихЛет.Колонки.Добавить("ДатаНачала");
		ТаблицаРабочихЛет.Колонки.Добавить("ДатаОкончания");
		
		ДатаНачалаРабочегоГода		= ДатаПриема;
		ДатаОкончанияРабочегоГода	= ДобавитьМесяц(ДатаПриема, 12) - 1;
		
		Пока ДатаОкончанияРабочегоГода < ДобавитьМесяц(ДатаАктуальности, 12) Цикл
			Строка = ТаблицаРабочихЛет.Добавить();
			Строка.ДатаНачала		= ДатаНачалаРабочегоГода;
			Строка.ДатаОкончания	= ДатаОкончанияРабочегоГода;
			
			Если Строка.ДатаОкончания < Дата(2006, 10, 6) Тогда
				КоличествоДнейВключаемых = 7;
			Иначе
				КоличествоДнейВключаемых = 14;
			КонецЕсли;
			
			Для Каждого ОтпускДляИсключения Из ТаблицаИсключаемыхОтпусков Цикл
				Если Строка.ДатаНачала <= ОтпускДляИсключения.ДатаНачалаПродления
					И ОтпускДляИсключения.ДатаНачалаПродления <= Строка.ДатаОкончания Тогда
					
					Если ОтпускДляИсключения.Состояние = Перечисления.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты Тогда
						КоличествоДнейОтпуска	= ОтпускДляИсключения.КоличествоДнейОтпуска;
						
						ОтпускДляИсключения.ДатаНачалаПродления		= ОтпускДляИсключения.ДатаНачалаПродления + Мин(ОтпускДляИсключения.КоличествоДнейПродления, КоличествоДнейВключаемых) * ДлинаСуток;
						ОтпускДляИсключения.КоличествоДнейПродления	= Макс(ОтпускДляИсключения.КоличествоДнейПродления - КоличествоДнейВключаемых, 0);
						
						Если ОтпускДляИсключения.КоличествоДнейПродления > 0 Тогда
							Строка.ДатаОкончания		= Строка.ДатаОкончания + ОтпускДляИсключения.КоличествоДнейПродления * ДлинаСуток;
						КонецЕсли;
						
						КоличествоДнейВключаемых = Макс(КоличествоДнейВключаемых - КоличествоДнейОтпуска, 0);
						
					Иначе
						Строка.ДатаОкончания = Строка.ДатаОкончания + ОтпускДляИсключения.КоличествоДнейПродления * ДлинаСуток;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ДатаНачалаРабочегоГода		= Строка.ДатаОкончания + 1;
			ДатаОкончанияРабочегоГода	= ДобавитьМесяц(ДатаНачалаРабочегоГода, 12) - 1;
		КонецЦикла;
		
		НомерСтроки = -1;
		Для Каждого РабочийГод Из ТаблицаРабочихЛет Цикл
			Если РабочийГод.ДатаОкончания > ДатаАктуальности Тогда
				Прервать;
			КонецЕсли;
			
			ВыборкаПоВидамОтпусков.Сбросить();
			Пока ВыборкаПоВидамОтпусков.Следующий() Цикл
				Строка = ТаблицаПериодов.Добавить();
				Строка.НомерСтроки			= НомерСтроки;
				Строка.ВидЕжегодногоОтпуска	= ВыборкаПоВидамОтпусков.Ссылка;
				Строка.Сотрудник			= Сотрудник;
				Строка.ДатаНачала			= РабочийГод.ДатаОкончания;
				Строка.ДатаОкончания		= РабочийГод.ДатаОкончания;
			КонецЦикла;
			НомерСтроки = НомерСтроки - 1;
		КонецЦикла;
	КонецЕсли;
	
	Выборка = ПроцедурыУправленияПерсоналом.ПодготовитьДанныеПоРегламентированнымОтпускам(ТаблицаПериодов, Регистратор);
	
	// таблица с макетами
	ТаблицаМакетовЗаПериод	= Новый ТаблицаЗначений;
	ТаблицаМакетовЗаПериод.Колонки.Добавить("Период");
	ТаблицаМакетовЗаПериод.Колонки.Добавить("НомерСтроки");
	ТаблицаМакетовЗаПериод.Колонки.Добавить("ПорядокГруппы");
	ТаблицаМакетовЗаПериод.Колонки.Добавить("МассивМакетов");
	
	ОкруглятьДниОтпускаПриКомпенсации = Константы.ОкруглятьДниОтпускаПриКомпенсации.Получить();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.НомерСтроки = 0 Тогда // Остаток отпуска на рабочую дату/дату увольнения
			МассивМакетов = Новый Массив;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			Если ДатаУвольнения = Неопределено Тогда
				Если СотрудникУволен Тогда
					ОбластьМакета.Параметры.Период		= "На дату увольнения, " + Формат(ДатаАктуальности, ФорматДаты);
				Иначе
					ОбластьМакета.Параметры.Период		= "На сегодня, " + Формат(ДатаАктуальности, ФорматДаты);
				КонецЕсли;
			Иначе
				ОбластьМакета.Параметры.Период			= "На " + Формат(ДатаАктуальности, ФорматДаты);
			КонецЕсли;
			МассивМакетов.Добавить(ОбластьМакета);
			
			Если СотрудникУволен И Не ОкруглятьДниОтпускаПриКомпенсации Тогда
				ОстатокОтпуска = Выборка.Количество;
				
			Иначе
				Если Выборка.Количество < 0 Тогда
					ОстатокОтпуска = Цел(Выборка.Количество);
				Иначе
					ОстатокОтпуска = Цел(Выборка.Количество) + ?(Цел(Выборка.Количество) = Выборка.Количество, 0, 1);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОстатокОтпуска >= 0 Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст			= "Неиспользованный отпуск";
				ОбластьМакета.Параметры.КоличествоДней	= "" + ОстатокОтпуска + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ОстатокОтпуска);
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("ВажнаяСтрока");
				ОбластьМакета.Параметры.Текст			= "Использовано за счет отпусков будущего периода";
				ОбластьМакета.Параметры.КоличествоДней	= "" + (-ОстатокОтпуска) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ОстатокОтпуска);
			КонецЕсли;
			МассивМакетов.Добавить(ОбластьМакета);
			
			ВыборкаПоВидуОтпуска = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоВидуОтпуска.Следующий() Цикл
				Если ОстатокОтпуска >= 0 Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст			= "     " + ВыборкаПоВидуОтпуска.ВидЕжегодногоОтпуска;
					ОбластьМакета.Параметры.КоличествоДней	= "" + ВыборкаПоВидуОтпуска.Количество + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ВыборкаПоВидуОтпуска.Количество);
					МассивМакетов.Добавить(ОбластьМакета);
				КонецЕсли;
				Если ОстатокОтпуска < 0 И ВыборкаПоВидуОтпуска.Количество < 0 Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("ВажнаяСтрока");
					ОбластьМакета.Параметры.Текст			= "     " + ВыборкаПоВидуОтпуска.ВидЕжегодногоОтпуска;
					ОбластьМакета.Параметры.КоличествоДней	= "" + (-ВыборкаПоВидуОтпуска.Количество) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ВыборкаПоВидуОтпуска.Количество);
					МассивМакетов.Добавить(ОбластьМакета);
				КонецЕсли;
			КонецЦикла;
			
			Строка = ТаблицаМакетовЗаПериод.Добавить();
			Строка.НомерСтроки		= Выборка.НомерСтроки;
			Строка.Период			= КонецДня(ДатаАктуальности);
			Строка.ПорядокГруппы	= 100;
			Строка.МассивМакетов	= МассивМакетов;
			
		ИначеЕсли Выборка.НомерСтроки < 0 Тогда // Закончился рабочий год
			МассивМакетов = Новый Массив;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Комментарий		= "Закончился рабочий год";
			ОбластьМакета.Параметры.Период			= Формат(Выборка.МаксимальнаяДатаНачалаРабочегоГода, ФорматДаты) + " - " + Формат(Выборка.ДатаОкончанияРабочегоГода, ФорматДаты);
			МассивМакетов.Добавить(ОбластьМакета);
			
			Если Выборка.Количество < 0 Тогда
				ОстатокОтпуска = Цел(Выборка.Количество);
			Иначе
				ОстатокОтпуска = Цел(Выборка.Количество) + ?(Цел(Выборка.Количество) = Выборка.Количество, 0, 1);
			КонецЕсли;
			
			Если ОстатокОтпуска >= 0 Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст			= "Неиспользованный отпуск";
				ОбластьМакета.Параметры.КоличествоДней	= "" + ОстатокОтпуска + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ОстатокОтпуска);
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("ВажнаяСтрока");
				ОбластьМакета.Параметры.Текст			= "Использовано за счет отпусков будущего периода";
				ОбластьМакета.Параметры.КоличествоДней	= "" + (-ОстатокОтпуска) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ОстатокОтпуска);
			КонецЕсли;
			МассивМакетов.Добавить(ОбластьМакета);
			
			ВыборкаПоВидуОтпуска = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоВидуОтпуска.Следующий() Цикл
				Если ОстатокОтпуска >= 0 Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст			= "     " + ВыборкаПоВидуОтпуска.ВидЕжегодногоОтпуска;
					ОбластьМакета.Параметры.КоличествоДней	= "" + ВыборкаПоВидуОтпуска.Количество + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ВыборкаПоВидуОтпуска.Количество);
					МассивМакетов.Добавить(ОбластьМакета);
				КонецЕсли;
				Если ОстатокОтпуска < 0 И ВыборкаПоВидуОтпуска.Количество < 0 Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("ВажнаяСтрока");
					ОбластьМакета.Параметры.Текст			= "     " + ВыборкаПоВидуОтпуска.ВидЕжегодногоОтпуска;
					ОбластьМакета.Параметры.КоличествоДней	= "" + (-ВыборкаПоВидуОтпуска.Количество) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ВыборкаПоВидуОтпуска.Количество);
					МассивМакетов.Добавить(ОбластьМакета);
				КонецЕсли;
			КонецЦикла;
			
			Строка = ТаблицаМакетовЗаПериод.Добавить();
			Строка.НомерСтроки		= Выборка.НомерСтроки;
			Строка.Период			= Выборка.ДатаОкончанияРабочегоГода;
			Строка.ПорядокГруппы	= 5;
			Строка.МассивМакетов	= МассивМакетов;
			
		Иначе
			ВыборкаПоВидуОтпуска = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоВидуОтпуска.Следующий() Цикл
				МассивМакетов = Новый Массив;
				
				ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
				ОбластьМакета.Параметры.КоличествоДней	= "" + ВыборкаПоВидуОтпуска.ДнейОтпуска + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ВыборкаПоВидуОтпуска.ДнейОтпуска);
				ОбластьМакета.Параметры.Комментарий		= ВыборкаПоВидуОтпуска.ВидЕжегодногоОтпуска;
				ОбластьМакета.Параметры.Период			= Формат(ВыборкаПоВидуОтпуска.ДатаНачала, ФорматДаты) + " - " + Формат(ВыборкаПоВидуОтпуска.ДатаОкончания, ФорматДаты);
				МассивМакетов.Добавить(ОбластьМакета);
				
				Если ВыборкаПоВидуОтпуска.Количество >= 0 Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст			= "На " + Формат(ВыборкаПоВидуОтпуска.ДатаОкончания, ФорматДаты) + " имеет право на";
					ОбластьМакета.Параметры.КоличествоДней	= "" + ВыборкаПоВидуОтпуска.Количество + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ВыборкаПоВидуОтпуска.Количество);
					МассивМакетов.Добавить(ОбластьМакета);
					
					Если ВыборкаПоВидуОтпуска.КоличествоДнейОтпускаБезТекущегоГода > 0 Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("Строка");
						ОбластьМакета.Параметры.Текст			= "  из них остаток прошлых лет";
						ОбластьМакета.Параметры.КоличествоДней	= "" + ВыборкаПоВидуОтпуска.КоличествоДнейОтпускаБезТекущегоГода + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ВыборкаПоВидуОтпуска.КоличествоДнейОтпускаБезТекущегоГода);
						МассивМакетов.Добавить(ОбластьМакета);
					КонецЕсли;
				
				Иначе
					ОбластьМакета = Макет.ПолучитьОбласть("ВажнаяСтрока");
					ОбластьМакета.Параметры.Текст			= "На " + Формат(ВыборкаПоВидуОтпуска.ДатаОкончания, ФорматДаты) + " использовано за счет отпусков будущего периода";
					ОбластьМакета.Параметры.КоличествоДней	= "" + (-ВыборкаПоВидуОтпуска.Количество) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ВыборкаПоВидуОтпуска.Количество);
					МассивМакетов.Добавить(ОбластьМакета);
					
					Если ВыборкаПоВидуОтпуска.КоличествоДнейОтпускаБезТекущегоГода < 0 Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("ВажнаяСтрока");
						ОбластьМакета.Параметры.Текст			= "  из них остаток прошлых лет";
						ОбластьМакета.Параметры.КоличествоДней	= "" + (-ВыборкаПоВидуОтпуска.КоличествоДнейОтпускаБезТекущегоГода) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ВыборкаПоВидуОтпуска.КоличествоДнейОтпускаБезТекущегоГода);
						МассивМакетов.Добавить(ОбластьМакета);
					КонецЕсли;
				
				КонецЕсли;
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				МассивМакетов.Добавить(ОбластьМакета);
				
				ДатаОкончанияРабочегоГода = ВыборкаПоВидуОтпуска.ДатаОкончанияРабочегоГода;
				
				ДнейОтпуска = ВыборкаПоВидуОтпуска.ДнейОтпуска;
				ВыборкаПоОстаткам = ВыборкаПоВидуОтпуска.Выбрать();
				Пока ВыборкаПоОстаткам.Следующий() Цикл
					ДнейОтпуска = ДнейОтпуска - ВыборкаПоОстаткам.Количество;
					
					Если ДнейОтпуска <= 0 Тогда
						ДатаОкончанияРабочегоГода = ВыборкаПоОстаткам.ДатаОкончанияРабочегоГода;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст			= "Рабочий год: " + Формат(ВыборкаПоВидуОтпуска.ДатаНачалаРабочегоГода, ФорматДаты) + " - " + Формат(ДатаОкончанияРабочегоГода, ФорматДаты);
				МассивМакетов.Добавить(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст			= "Использовано дней отпуска";
				ОбластьМакета.Параметры.КоличествоДней	= "" + ВыборкаПоВидуОтпуска.ДнейОтпуска + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ВыборкаПоВидуОтпуска.ДнейОтпуска);
				МассивМакетов.Добавить(ОбластьМакета);
				
				КоличествоСтрок = ?(ВыборкаПоВидуОтпуска.ОтпускВСчетЕжегодногоБезТекущегоГода > 0, 1, 0) + ?(ВыборкаПоВидуОтпуска.ОтпускАвансом > 0, 1, 0);
				
				Если КоличествоСтрок > 1 Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст		= "  из них";
					МассивМакетов.Добавить(ОбластьМакета);
					
					ОбщийТекст = "     ";
				Иначе
					ОбщийТекст = "  из них ";
				КонецЕсли;
				
				Если ВыборкаПоВидуОтпуска.ОтпускВСчетЕжегодногоБезТекущегоГода > 0 Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст			= ОбщийТекст + "за счет отпусков прошлых лет";
					ОбластьМакета.Параметры.КоличествоДней	= "" + ВыборкаПоВидуОтпуска.ОтпускВСчетЕжегодногоБезТекущегоГода + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ВыборкаПоВидуОтпуска.ОтпускВСчетЕжегодного);
					МассивМакетов.Добавить(ОбластьМакета);
				КонецЕсли;
				
				Если ВыборкаПоВидуОтпуска.ОтпускАвансом > 0 Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("ВажнаяСтрока");
					ОбластьМакета.Параметры.Текст			= ОбщийТекст + "за счет отпусков будущего периода";
					ОбластьМакета.Параметры.КоличествоДней	= "" + ВыборкаПоВидуОтпуска.ОтпускАвансом + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ВыборкаПоВидуОтпуска.ОтпускАвансом);
					МассивМакетов.Добавить(ОбластьМакета);
				КонецЕсли;
				
				НайденнаяСтрока = ТаблицаПериодов.Найти(Выборка.НомерСтроки, "НомерСтроки");
				
				Строка = ТаблицаМакетовЗаПериод.Добавить();
				Строка.НомерСтроки		= ВыборкаПоВидуОтпуска.НомерСтроки;
				Строка.Период			= НайденнаяСтрока.ДатаРегистрации;
				Строка.ПорядокГруппы	= 3;
				Строка.МассивМакетов	= МассивМакетов;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	// Добавим информацию по остаткам в макет
	Для Каждого ТекОстаток Из ТаблицаОстатков.Строки Цикл
		МассивМакетов = Новый Массив;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Период			= Формат(ТекОстаток.Период, ФорматДаты);
		ОбластьМакета.Параметры.Комментарий		= "Введены остатки";
		ОбластьМакета.Параметры.КоличествоДней	= "" + ТекОстаток.Количество + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ТекОстаток.Количество);
		МассивМакетов.Добавить(ОбластьМакета);
		
		Для Каждого ТекЕжегодныйОтпуск Из ТекОстаток.Строки Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Текст			= ТекЕжегодныйОтпуск.ВидЕжегодногоОтпуска;
			ОбластьМакета.Параметры.КоличествоДней	= "" + ТекЕжегодныйОтпуск.Количество + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ТекЕжегодныйОтпуск.Количество);
			МассивМакетов.Добавить(ОбластьМакета);
		КонецЦикла;
		
		Строка = ТаблицаМакетовЗаПериод.Добавить();
		Строка.Период			= ТекОстаток.Период;
		Строка.ПорядокГруппы	= 1;
		Строка.МассивМакетов	= МассивМакетов;
	КонецЦикла;
	
	// Добавим информацию об исключаемых отпусках в макет
	Для Каждого ИсключенныйОтпуск Из ТаблицаИсключаемыхОтпусков Цикл
		МассивМакетов = Новый Массив;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Период			= Формат(ИсключенныйОтпуск.ДатаНачалаОтпуска, ФорматДаты) + " - " + Формат(ИсключенныйОтпуск.ДатаОкончанияОтпуска, ФорматДаты);
		ОбластьМакета.Параметры.Комментарий		= ИсключенныйОтпуск.Состояние;
		ОбластьМакета.Параметры.КоличествоДней	= "" + ИсключенныйОтпуск.КоличествоДнейОтпуска + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ИсключенныйОтпуск.КоличествоДнейОтпуска);
		МассивМакетов.Добавить(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Текст			= "Рабочий год продлен на";
		ОбластьМакета.Параметры.КоличествоДней	= "" + ИсключенныйОтпуск.КоличествоДнейПродления + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ИсключенныйОтпуск.КоличествоДнейПродления);
		МассивМакетов.Добавить(ОбластьМакета);
		
		Строка = ТаблицаМакетовЗаПериод.Добавить();
		Строка.Период			= ИсключенныйОтпуск.ДатаНачалаОтпуска;
		Строка.ПорядокГруппы	= 2;
		Строка.МассивМакетов	= МассивМакетов;
	КонецЦикла;
	
	// Добавим информацию о компенсациях отпуска в макет
	Для Каждого ТекКомпенсация Из ТаблицаКомпенсаций Цикл
		МассивМакетов = Новый Массив;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Период			= Формат(ТекКомпенсация.ДатаКомпенсации, ФорматДаты);
		ОбластьМакета.Параметры.Комментарий		= "Компенсация отпуска";
		ОбластьМакета.Параметры.КоличествоДней	= "" + ТекКомпенсация.ДнейКомпенсации + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ТекКомпенсация.ДнейКомпенсации);
		МассивМакетов.Добавить(ОбластьМакета);
		
		Строка = ТаблицаМакетовЗаПериод.Добавить();
		Строка.Период			= ТекКомпенсация.ДатаКомпенсации;
		Строка.ПорядокГруппы	= 4;
		Строка.МассивМакетов	= МассивМакетов;
	КонецЦикла;
	
	// Добавим информацию о сторно-отпусках в макет
	Для Каждого СторноОтпуск Из ТаблицаСторноОтпусков Цикл
		МассивМакетов = Новый Массив;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СторноШапка");
		ОбластьМакета.Параметры.Период			= Формат(СторноОтпуск.ДатаНачала, ФорматДаты) + " - " + Формат(СторноОтпуск.ДатаОкончания, ФорматДаты);
		ОбластьМакета.Параметры.Комментарий		= СторноОтпуск.ВидЕжегодногоОтпуска;
		ОбластьМакета.Параметры.КоличествоДней	= "" + СторноОтпуск.Количество + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",СторноОтпуск.Количество);
		МассивМакетов.Добавить(ОбластьМакета);
		
		Строка = ТаблицаМакетовЗаПериод.Добавить();
		Строка.Период			= СторноОтпуск.ДатаРегистрации;
		Строка.НомерСтроки		= СторноОтпуск.НомерСтроки;
		Строка.ПорядокГруппы	= 3;
		Строка.МассивМакетов	= МассивМакетов;
	КонецЦикла;
	
	ТаблицаМакетовЗаПериод.Сортировать("Период, НомерСтроки, ПорядокГруппы");
	
	Для Каждого СтрокаТаблицы Из ТаблицаМакетовЗаПериод Цикл
		Для Каждого ОбластьМакета Из СтрокаТаблицы.МассивМакетов Цикл
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
	КонецЦикла;
	
	ФИОСотрудника = СокрЛП(Сотрудник);
	УниверсальныеМеханизмы.Просклонять(КомпонентаСклоненияФИО, ФИОСотрудника, 2, , ФИОСотрудника);
	
	РаботаСДиалогами.НапечататьДокумент(ТабДокумент, , , "Отпуска " + ФИОСотрудника);
	
КонецПроцедуры

Функция ПечатьРасчетаСреднегоЗаработка(ДокументСсылка, ДатаСобытия, ПродолжительностьРасчетногоПериода, ОписаниеОплачиваемогоПериода, СпособРасчета, Знач ИспользоватьСреднеЧасовойЗаработок = Неопределено, СписокСоставляющихСреднегоЗаработка = Неопределено, ВыводитьЗаголовок = Истина, ОтражатьДолюВремени = Истина, СтруктураПоказателей = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Новый ТабличныйДокумент
	КонецЕсли;
	
	Попытка
		МетаданныеДокумента = ДокументСсылка.Метаданные();
		ИмяИсточникаДанных = МетаданныеДокумента.Имя;
	Исключение
		Возврат Новый ТабличныйДокумент
	КонецПопытки;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетСреднегоЗаработка";
	
	Макет = ПолучитьОбщийМакет("РасчетСреднегоЗаработка");
	
	СекцияШапка = Макет.ПолучитьОбласть("Шапка");
	СекцияЗаголовокНачислений = Макет.ПолучитьОбласть("ЗаголовокНачислений");
	СекцияЗаголовокРабочегоМеста = Макет.ПолучитьОбласть("ЗаголовокРабочегоМеста");
	СекцияМесячныйЗаработок = Макет.ПолучитьОбласть("МесячныйЗаработок");
	СекцияСерединаОтчета = Макет.ПолучитьОбласть("СерединаОтчета");
	СекцияДоляВремени = Макет.ПолучитьОбласть("ДоляВремени");
	СекцияЗаголовокПремий = Макет.ПолучитьОбласть("ЗаголовокПремий");
	СекцияПремии = Макет.ПолучитьОбласть("Премии");
	СекцияПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			ДокументСсылка);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",		ДатаСобытия);
	Запрос.УстановитьПараметр("ИспользоватьСреднеЧасовойЗаработок", ИспользоватьСреднеЧасовойЗаработок);
	Запрос.УстановитьПараметр("Регистратор",			ДокументСсылка);
	Запрос.УстановитьПараметр("СпособРасчета",			СпособРасчета);
	Запрос.УстановитьПараметр("ОсновнойЗаработокНеиндексируемый", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Документ.Сотрудник,
	|	Документ.Сотрудник.Физлицо КАК Физлицо
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &ДокументСсылка";
	Запрос.Текст = СтрЗаменить(ТекстЗапроса,"Документ.НачислениеОтпускаРаботникамОрганизаций КАК Документ","Документ." + ИмяИсточникаДанных + " КАК Документ");

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Запрос.УстановитьПараметр("Сотрудник",	Выборка.Сотрудник);
	Запрос.УстановитьПараметр("Физлицо",	Выборка.Физлицо);
	
	Если ВыводитьЗаголовок Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Документ.Представление,
		|	Документ.Ссылка,
		|	Документ.Сотрудник,
		|	Документ.Организация,
		|	ВЫРАЗИТЬ(Документ.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НаименованиеОрганизации,
		|	ЕСТЬNULL(ФИОФизлица.Фамилия + "" "" + ФИОФизлица.Имя + "" "" + ФИОФизлица.Отчество, Документ.Сотрудник.Наименование) КАК ФИОРаботника,
		|	Документ.Сотрудник.Код КАК ТабельныйНомер,
		|	Документ.ПериодРасчетаСреднегоЗаработкаНачало КАК ДатаНачалаРасчетногоПериода,
		|	Документ.ПериодРасчетаСреднегоЗаработкаОкончание КАК ДатаОкончанияРасчетногоПериода
		|ИЗ
		|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаНачалаСобытия, ФизЛицо = &ФизЛицо) КАК ФИОФизлица
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Документ.Ссылка = &ДокументСсылка";
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"Документ.НачислениеОтпускаРаботникамОрганизаций КАК Документ","Документ." + ИмяИсточникаДанных + " КАК Документ");

		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СекцияШапка.Параметры,Выборка);
		
		СекцияШапка.Параметры.ДатаНачалаРасчетногоПериода = Формат(СекцияШапка.Параметры.ДатаНачалаРасчетногоПериода,"ДФ=dd.MM.yyyy");
		СекцияШапка.Параметры.ДатаОкончанияРасчетногоПериода = Формат(СекцияШапка.Параметры.ДатаОкончанияРасчетногоПериода,"ДФ=dd.MM.yyyy");
		СекцияШапка.Параметры.Представление = ОбщегоНазначения.СформироватьЗаголовокДокумента(ДокументСсылка, МетаданныеДокумента.Синоним);
		СекцияШапка.Параметры.ОписаниеОплачиваемогоПериода = ОписаниеОплачиваемогоПериода;
		СекцияШапка.Параметры.СпособРасчета = ?(СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС,СпособРасчета);
	
		ТабДокумент.Вывести(СекцияШапка);
	КонецЕсли;
	
	ФормированиеПечатныхФормПереопределяемый.УстановитьПараметрыЗапросаСреднегоЗаработка(Запрос, СпособРасчета, СписокСоставляющихСреднегоЗаработка);
	
	Если ИспользоватьСреднеЧасовойЗаработок = Неопределено Тогда
		Если МетаданныеДокумента.Реквизиты.Найти("СпособРегистрацииВремени") <> Неопределено Тогда
			ТекстПоляИспользоватьСреднеЧасовойЗаработок = 
			"ВЫБОР
			|		КОГДА Документ.СпособРегистрацииВремени = ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены) 
			|			ИЛИ ВЫБОР
			|					КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
			|							И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|						ТОГДА ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени, ЛОЖЬ)
			|					ИНАЧЕ ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) 
			|				КОНЕЦ			
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ИспользоватьСреднеЧасовойЗаработок"
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням 
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке Тогда
			// Решение Верховного Суда РФ от 13.07.2006 № ГКПИ06-637
			ТекстПоляИспользоватьСреднеЧасовойЗаработок = "Ложь КАК ИспользоватьСреднеЧасовойЗаработок"  
		Иначе
			ТекстПоляИспользоватьСреднеЧасовойЗаработок =
			"ВЫБОР
			|	КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
			|			И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени, ЛОЖЬ)
			|	ИНАЧЕ ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) 
			|КОНЕЦ КАК ИспользоватьСреднеЧасовойЗаработок"
		КонецЕсли;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК ИспользоватьСреднеЧасовойЗаработок
		|ИЗ
		|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Документ.Ссылка = &ДокументСсылка";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ИспользоватьСреднеЧасовойЗаработок", ТекстПоляИспользоватьСреднеЧасовойЗаработок);
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"Документ.НачислениеОтпускаРаботникамОрганизаций КАК Документ","Документ." + ИмяИсточникаДанных + " КАК Документ");
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ИспользоватьСреднеЧасовойЗаработок = Выборка.ИспользоватьСреднеЧасовойЗаработок;
	КонецЕсли;
	Запрос.УстановитьПараметр("ИспользоватьСреднеЧасовойЗаработок", ИспользоватьСреднеЧасовойЗаработок);
	
	// по окончательным данным проведенного документа
	// собираем итоговые данные и рассчитываем средний заработок
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетСреднегоЗаработка.ПериодРегистрации,
	|	РасчетСреднегоЗаработка.ВидРасчета,
	|	РасчетСреднегоЗаработка.БазовыйПериодНачало,
	|	РасчетСреднегоЗаработка.БазовыйПериодКонец,
	|	РасчетСреднегоЗаработка.Сотрудник КАК Сотрудник,
	|	РасчетСреднегоЗаработка.Результат,
	|	РасчетСреднегоЗаработка.ОтработаноПоПятидневке,
	|	РасчетСреднегоЗаработка.НормаПоПятидневке,
	|	РасчетСреднегоЗаработка.ОтработаноДней,
	|	РасчетСреднегоЗаработка.ОтработаноЧасов,
	|	РасчетСреднегоЗаработка.СкидкаПоСтраховымВзносам,
	|	РасчетСреднегоЗаработка.КоэффициентИндексации,
	|	РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода,
	|	РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода,
	|	РасчетСреднегоЗаработка.СпособРасчета,
	|	РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
	|	РасчетСреднегоЗаработка.ЧислоМесяцев
	|ПОМЕСТИТЬ ВТДанныеОСреднем
	|ИЗ
	|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|ГДЕ
	|	РасчетСреднегоЗаработка.Регистратор = &Регистратор
	|	И РасчетСреднегоЗаработка.СпособРасчета = &СпособРасчета
	|	И РасчетСреднегоЗаработка.ВидРасчета В(&СписокСоставляющихСреднегоЗаработка)
	|	И (РасчетСреднегоЗаработка.Результат <> 0
	|			ИЛИ РасчетСреднегоЗаработка.ОтработаноДней <> 0
	|			ИЛИ РасчетСреднегоЗаработка.ОтработаноЧасов <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА 1
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ПорядокЗаписей,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|					КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|						ТОГДА 1
	|					ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|				КОНЕЦ
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|			ТОГДА РасчетСреднегоЗаработка.Результат
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоЗаработка,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ВсеФиксированныеПремии)
	|			ТОГДА РасчетСреднегоЗаработка.Результат
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФиксПремий,
	|	ВЫБОР
	|		КОГДА (РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|				ИЛИ РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый))
	|				И РасчетСреднегоЗаработка.Сотрудник = &Сотрудник
	|			ТОГДА ВЫБОР
	|					КОГДА &ИспользоватьСреднеЧасовойЗаработок
	|						ТОГДА РасчетСреднегоЗаработка.ОтработаноЧасов
	|					ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноДней
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоДнейРасчетногоПериода,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА 0
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|			ТОГДА 0
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямПособий))
	|			ТОГДА РасчетСреднегоЗаработка.Результат
	|		КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоПремиям)
	|					ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|							КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|								ТОГДА 1
	|							ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|						КОНЕЦ
	|				КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоФиксПремиям)
	|					ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|							КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|								ТОГДА 1
	|							ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|						КОНЕЦ * ВЫБОР
	|							КОГДА РасчетСреднегоЗаработка.НормаПоПятидневке = 0
	|								ТОГДА 0
	|							ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноПоПятидневке / РасчетСреднегоЗаработка.НормаПоПятидневке
	|						КОНЕЦ
	|				КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоФиксПремиямНеИндексируемые)
	|					ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|							КОГДА РасчетСреднегоЗаработка.НормаПоПятидневке = 0
	|								ТОГДА 0
	|							ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноПоПятидневке / РасчетСреднегоЗаработка.НормаПоПятидневке
	|						КОНЕЦ
	|				ИНАЧЕ РасчетСреднегоЗаработка.Результат
	|			КОНЕЦ * ВЫБОР
	|				КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев > РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка
	|					ТОГДА РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка / РасчетСреднегоЗаработка.ЧислоМесяцев
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ВсегоУчтеноПремий,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ВсеФиксированныеПремии)
	|			ТОГДА РасчетСреднегоЗаработка.ОтработаноПоПятидневке
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоДнейОтработано,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ВсеФиксированныеПремии)
	|			ТОГДА РасчетСреднегоЗаработка.НормаПоПятидневке
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоДнейПоНорме,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА 0
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|			ТОГДА 0
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямПособий))
	|			ТОГДА ""-""
	|		КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоФиксПремиям)
	|					ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|							КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|								ТОГДА 1
	|							ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|						КОНЕЦ
	|				КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоПремиям)
	|					ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|							КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|								ТОГДА 1
	|							ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|						КОНЕЦ
	|				ИНАЧЕ РасчетСреднегоЗаработка.Результат
	|			КОНЕЦ / РасчетСреднегоЗаработка.ЧислоМесяцев
	|	КОНЕЦ КАК МесячнаяЧастьПремий,
	|	НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, МЕСЯЦ) КАК МесяцРасчетногоПериода,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&Индексируемые)
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|						ТОГДА 1
	|					ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоэффициентИндексации,
	|	РасчетСреднегоЗаработка.Результат КАК Результат,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямПособий))
	|			ТОГДА 0
	|		ИНАЧЕ РасчетСреднегоЗаработка.ЧислоМесяцев
	|	КОНЕЦ КАК МесяцевПремии,
	|	РасчетСреднегоЗаработка.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|			ТОГДА ""По внутр. совм-ву""
	|		ИНАЧЕ ""Основное рабочее место""
	|	КОНЕЦ КАК ВидЗанятости,
	|	РасчетСреднегоЗаработка.БазовыйПериодНачало КАК БазовыйПериодНачало
	|ПОМЕСТИТЬ ВТОбработанныеЗаписи
	|ИЗ
	|	ВТДанныеОСреднем КАК РасчетСреднегоЗаработка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.Наименование
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность.Наименование
	|	КОНЕЦ КАК Должность,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТДанныеСотрудника
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&ДатаНачалаСобытия,
	|			Сотрудник В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						РасчетСреднегоЗаработка.Сотрудник
	|					ИЗ
	|						ВТДанныеОСреднем КАК РасчетСреднегоЗаработка)
	|				) КАК РаботникиОрганизацийСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетСреднегоЗаработка.ПорядокЗаписей КАК ПорядокЗаписей,
	|	ВЫРАЗИТЬ(РасчетСреднегоЗаработка.ВсегоЗаработка КАК ЧИСЛО(15, 2)) КАК ВсегоЗаработка,
	|	РасчетСреднегоЗаработка.ФиксПремий КАК ФиксПремий,
	|	РасчетСреднегоЗаработка.ВсегоДнейРасчетногоПериода КАК ВсегоДнейРасчетногоПериода,
	|	ВЫРАЗИТЬ(РасчетСреднегоЗаработка.ВсегоУчтеноПремий КАК ЧИСЛО(15, 2)) КАК ВсегоУчтеноПремий,
	|	РасчетСреднегоЗаработка.ВсегоДнейОтработано КАК ВсегоДнейОтработано,
	|	РасчетСреднегоЗаработка.ВсегоДнейПоНорме КАК ВсегоДнейПоНорме,
	|	ВЫРАЗИТЬ(РасчетСреднегоЗаработка.МесячнаяЧастьПремий КАК ЧИСЛО(15, 2)) КАК МесячнаяЧастьПремий,
	|	РасчетСреднегоЗаработка.МесяцРасчетногоПериода,
	|	РасчетСреднегоЗаработка.КоэффициентИндексации,
	|	РасчетСреднегоЗаработка.Результат,
	|	РасчетСреднегоЗаработка.МесяцевПремии,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации + ""; "" + РаботникиОрганизацийСрезПоследних.Должность КАК РабочееМесто,
	|	РасчетСреднегоЗаработка.Сотрудник КАК Сотрудник,
	|	РасчетСреднегоЗаработка.ВидЗанятости,
	|	РасчетСреднегоЗаработка.БазовыйПериодНачало КАК БазовыйПериодНачало
	|ИЗ
	|	ВТОбработанныеЗаписи КАК РасчетСреднегоЗаработка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеСотрудника КАК РаботникиОрганизацийСрезПоследних
	|		ПО РасчетСреднегоЗаработка.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокЗаписей,
	|	БазовыйПериодНачало
	|ИТОГИ
	|	СУММА(ВсегоЗаработка),
	|	СУММА(ФиксПремий),
	|	СУММА(ВсегоДнейРасчетногоПериода),
	|	СУММА(ВсегоУчтеноПремий),
	|	МАКСИМУМ(ВсегоДнейОтработано),
	|	МАКСИМУМ(ВсегоДнейПоНорме)
	|ПО
	|	ОБЩИЕ,
	|	Сотрудник";
	
	Результат = Запрос.Выполнить();
	
	СтруктураПоказателей = Новый Структура("
	|ВсегоДнейРасчетногоПериода,
	|ВсегоЗаработка,
	|ВсегоУчтеноПремий,
	|ОбщийЗаработок, 
	|Средний",0,0,0,0,0);
	
	Если Не Результат.Пустой() Тогда
		
		// уточним названия колонок и показателей
		Если ИспользоватьСреднеЧасовойЗаработок Тогда
			СекцияЗаголовокРабочегоМеста.Параметры.ЕдиницаИзмерения = "часов";
			СекцияДоляВремени.Параметры.ЕдиницаИзмерения = "часов";
			СекцияПодвал.Параметры.ЕдиницаИзмерения = "часов";
			СекцияПодвал.Параметры.ОписаниеЗаработка = "Среднечасовой";
		Иначе
			СекцияЗаголовокРабочегоМеста.Параметры.ЕдиницаИзмерения = "дней";
			СекцияДоляВремени.Параметры.ЕдиницаИзмерения = "дней";
			СекцияПодвал.Параметры.ЕдиницаИзмерения = "дней";
			СекцияПодвал.Параметры.ОписаниеЗаработка = "Среднедневной";
		КонецЕсли;
		СтруктураИтоговПоРабочемуМесту = Новый Структура("
		|ВсегоДнейРасчетногоПериода,
		|ВсегоЗаработка,
		|ВсегоДнейОтработано,
		|ВсегоДнейПоНорме,
		|ДоляВремени",0,0,0,0,0);
		
		ВыводитьЗаголовокРабочегоМеста = Истина;
		ВыводитьИтогиПредыдущегоРабочегоМеста = Ложь;
		ТабДокумент.Вывести(СекцияЗаголовокНачислений);
		
		// Формирование раздела по начислениям за расчетный период по рабочим местам
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
				
				//заполнение итогами по расчету среднего заработка
				ЗаполнитьЗначенияСвойств(СтруктураПоказателей,Выборка);
				ОтражатьДолюВремени = ОтражатьДолюВремени И Выборка.ФиксПремий <> 0;
				
				СтруктураПоказателей.ОбщийЗаработок = Формат(Выборка.ВсегоЗаработка + Выборка.ВсегоУчтеноПремий, "ЧЦ=17; ЧДЦ=4; ЧН=-");
				СтруктураПоказателей.Средний = Окр(?(СтруктураПоказателей.ВсегоДнейРасчетногоПериода = 0,0, (Выборка.ВсегоЗаработка + Выборка.ВсегоУчтеноПремий) / СтруктураПоказателей.ВсегоДнейРасчетногоПериода),2);
				
			ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
				Если ВыводитьИтогиПредыдущегоРабочегоМеста Тогда // итоги предыдущего р.м.
					ЗаполнитьЗначенияСвойств(СекцияСерединаОтчета.Параметры,СтруктураИтоговПоРабочемуМесту);
					ТабДокумент.Вывести(СекцияСерединаОтчета);
					Если ОтражатьДолюВремени Тогда
						ЗаполнитьЗначенияСвойств(СекцияДоляВремени.Параметры,СтруктураИтоговПоРабочемуМесту);
						ТабДокумент.Вывести(СекцияДоляВремени);
					КонецЕсли;
				Иначе
					ВыводитьИтогиПредыдущегоРабочегоМеста = Истина;
				КонецЕсли;
				
				// заполнение итогами по очередному р.м.
				ЗаполнитьЗначенияСвойств(СтруктураИтоговПоРабочемуМесту,Выборка);
				СтруктураИтоговПоРабочемуМесту.ДоляВремени = ?(СтруктураИтоговПоРабочемуМесту.ВсегоДнейПоНорме = 0,0, Формат(СтруктураИтоговПоРабочемуМесту.ВсегоДнейОтработано / СтруктураИтоговПоРабочемуМесту.ВсегоДнейПоНорме,"ЧДЦ=10"));
				ВыводитьЗаголовокРабочегоМеста = Истина;
				
			ИначеЕсли Выборка.ПорядокЗаписей <> 3 Тогда
				Если ВыводитьЗаголовокРабочегоМеста Тогда
					ВыводитьЗаголовокРабочегоМеста = Ложь;
					ЗаполнитьЗначенияСвойств(СекцияЗаголовокРабочегоМеста.Параметры,Выборка);
					ТабДокумент.Вывести(СекцияЗаголовокРабочегоМеста);
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СекцияМесячныйЗаработок.Параметры,Выборка);
				ТабДокумент.Вывести(СекцияМесячныйЗаработок);
			КонецЕсли;
		КонецЦикла;
		Если ВыводитьЗаголовокРабочегоМеста Тогда
			ТабДокумент.Вывести(СекцияЗаголовокРабочегоМеста);
		КонецЕсли;
		// итоги последнего по порядку р.м.
		ЗаполнитьЗначенияСвойств(СекцияСерединаОтчета.Параметры,СтруктураИтоговПоРабочемуМесту);
		ТабДокумент.Вывести(СекцияСерединаОтчета);
		Если ОтражатьДолюВремени Тогда
			ЗаполнитьЗначенияСвойств(СекцияДоляВремени.Параметры,СтруктураИтоговПоРабочемуМесту);
			ТабДокумент.Вывести(СекцияДоляВремени);
		КонецЕсли;
		
		// Формирование раздела по начисленным премиям
		ТабДокумент.Вывести(СекцияЗаголовокПремий);
		ВыводитьПустуюСтрокуПремии = Истина;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись И Выборка.ПорядокЗаписей = 3 Тогда
				ЗаполнитьЗначенияСвойств(СекцияПремии.Параметры,Выборка);
				СекцияПремии.Параметры.МесяцРасчетногоПериода = Формат(СекцияПремии.Параметры.МесяцРасчетногоПериода,"ДФ='ММММ гггг ""г.""'");
				СекцияПремии.Параметры.МесяцевПремии = ?(ЗначениеЗаполнено(СекцияПремии.Параметры.МесяцевПремии), "; за " + СекцияПремии.Параметры.МесяцевПремии + " мес.","");
				ТабДокумент.Вывести(СекцияПремии);
				ВыводитьПустуюСтрокуПремии = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если ВыводитьПустуюСтрокуПремии Тогда
			СекцияПремии.Область(1,2,1,2).Текст = "";
			ТабДокумент.Вывести(СекцияПремии);
		КонецЕсли;
		
		// Итоги по расчету среднего заработка
		ЗаполнитьЗначенияСвойств(СекцияПодвал.Параметры,СтруктураПоказателей);
		ТабДокумент.Вывести(СекцияПодвал);
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьРасчетаСреднегоЗаработка	

Функция АнализУчтеннойВРасчетеСреднегоСкидки(ДокументОбъект) Экспорт
		
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АнализУчтеннойВРасчетеСреднегоСкидки";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// запоминаем области макета
	Макет = ПолучитьОбщийМакет("АнализУчтеннойВРасчетеСреднегоСкидки");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); 
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Месяц");
	
	Организация = ДокументОбъект.Организация;
	ФизЛицо = ДокументОбъект.ФизЛицо;
	Сотрудник = ДокументОбъект.Сотрудник;
	Дата = ДокументОбъект.Дата;
	
	Запрос = Новый Запрос;

	// Начинаем формировать выходной документ
	ОбластьМакетаШапка.Параметры.Представление = ДокументОбъект.Метаданные().Синоним + " № " + ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументОбъект) + " от " + Формат(Дата,"ДЛФ=DD");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(300)) КАК НаименованиеОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.НаименованиеОрганизации = СокрЛП(Выборка.НаименованиеОрганизации);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ФИОФизлица.Фамилия + "" "" + ФИОФизлица.Имя + "" "" + ФИОФизлица.Отчество, СотрудникиОрганизаций.Наименование) КАК ФИОРаботника
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций,
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК ФИОФизлица
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОбластьМакетаШапка.Параметры,Выборка);
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СреднийЗаработокБазовыеВидыРасчета.ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
	|ГДЕ
	|	СреднийЗаработокБазовыеВидыРасчета.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010))
	|	И СреднийЗаработокБазовыеВидыРасчета.ВидРасчета.КодДоходаСтраховыеВзносы В (ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.Матпомощь), ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.МатпомощьПриРожденииРебенка))";
	Если Запрос.Выполнить().Пустой() Тогда
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("НетМатпомощи"));
		Возврат ТабДокумент
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеДокумента", ДокументОбъект.РасчетСреднего.Выгрузить());
	Запрос.УстановитьПараметр("парамДатаС", ДокументОбъект.ПериодРасчетаСреднегоЗаработкаНачало);
	Запрос.УстановитьПараметр("парамДатаПо", КонецДня(ДокументОбъект.ПериодРасчетаСреднегоЗаработкаОкончание));
	Запрос.УстановитьПараметр("ДатаЗакона213ФЗ",ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(РасчетСреднего.БазовыйПериодНачало, МЕСЯЦ) КАК Период,
	|	РасчетСреднего.Результат,
	|	РасчетСреднего.СкидкаПоСтраховымВзносам
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	&ДанныеДокумента КАК РасчетСреднего
	|ГДЕ
	|	РасчетСреднего.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010))
	|	И (РасчетСреднего.Результат <> 0
	|			ИЛИ РасчетСреднего.СкидкаПоСтраховымВзносам <> 0)";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтраховыеВзносыСведенияОДоходахОбороты.Период КАК Период,
	|	СтраховыеВзносыСведенияОДоходахОбороты.СкидкаОборот КАК Скидка
	|ПОМЕСТИТЬ ВТДанныеУчетаСкидок
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыСведенияОДоходах.Обороты(
	|			&парамДатаС,
	|			&парамДатаПо,
	|			Месяц,
	|			ФизЛицо = &ФизЛицо
	|				И Организация = &Организация
	|				И ВидДохода В (ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.Матпомощь), ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.МатпомощьПриРожденииРебенка))) КАК СтраховыеВзносыСведенияОДоходахОбороты
	|ГДЕ
	|	СтраховыеВзносыСведенияОДоходахОбороты.Период >= &ДатаЗакона213ФЗ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.Период, МЕСЯЦ),
	|	СУММА(ЕСНСведенияОДоходах.Скидка)
	|ИЗ
	|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|ГДЕ
	|	ЕСНСведенияОДоходах.ФизЛицо = &ФизЛицо
	|	И ЕСНСведенияОДоходах.Организация = &Организация
	|	И ЕСНСведенияОДоходах.КодДоходаЕСН В (ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.Матпомощь), ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.МатпомощьПриРожденииРебенка))
	|	И ЕСНСведенияОДоходах.Период МЕЖДУ &парамДатаС И &парамДатаПо
	|	И ЕСНСведенияОДоходах.Период < &ДатаЗакона213ФЗ
	|	И ЕСНСведенияОДоходах.Скидка <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.Период, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеУчетаСкидок.Период КАК Период
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	ВТДанныеУчетаСкидок КАК ДанныеУчетаСкидок
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДанныеУчетаСкидок.Период
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеУчетаСкидок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	ЕСТЬNULL(ДанныеУчетаСкидок.Скидка, 0) Скидка,
	|	ЕСТЬNULL(ДанныеДокумента.Результат, 0) КАК Результат,
	|	ЕСТЬNULL(ДанныеДокумента.СкидкаПоСтраховымВзносам, 0) СкидкаПоСтраховымВзносам
	|ИЗ
	|	ВТПериоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ДанныеДокумента
	|		ПО Периоды.Период = ДанныеДокумента.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеУчетаСкидок КАК ДанныеУчетаСкидок
	|		ПО Периоды.Период = ДанныеУчетаСкидок.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("НетДанных"));
		Возврат ТабДокумент
	КонецЕсли;
	
	ТабДокумент.Вывести(Макет.ПолучитьОбласть("Заголовок"));
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОбластьМакетаСтрока.Параметры,Выборка);
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьАнализаСкидки()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////

Процедура ПеренестиПорядок(Настройки, Структура)
	
	ТиповыеОтчеты.СкопироватьЭлементы(Настройки.Порядок, Структура.Порядок, , ложь);
	
	Структура.Порядок.Элементы.Очистить();
	
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	Если Структура.Структура.Количество() <> 0 тогда
		ПеренестиПорядок(Настройки, Структура.Структура[0]);
	КонецЕсли;
	
КонецПроцедуры //ПеренестиУпорядочивание()

// Копирует упорядочивания из элемента структуры настройки СКД в отчет
//
// Параметры:
//  Настройка - настройки схемы компоновки данных
//
Процедура ПеренестиПорядокВОтчет(Настройки) Экспорт
	
	Если Настройки.Структура.Количество() <> 0 тогда
		
		Если ТипЗнч(Настройки.Структура[0]) = Тип("ТаблицаКомпоновкиДанных") тогда
			
			Если Настройки.Структура[0].Строки.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Строки[0]);
				
			КонецЕсли;
			
			Если Настройки.Структура[0].Колонки.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Колонки[0]);
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Колонки[1]);
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Колонки[2]);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Настройки.Структура[0]) = Тип("ГруппировкаТаблицыКомпоновкиДанных") тогда
			
			ПеренестиПорядок(Настройки, Настройки.Структура[0].Строки[0]);
			
		ИначеЕсли ТипЗнч(Настройки.Структура[0]) = Тип("ДиаграммаКомпоновкиДанных") тогда
			
			Если Настройки.Структура[0].Серии.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Серии[0]);
				
			КонецЕсли;
			
			Если Настройки.Структура[0].Точки.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Точки[0]);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ПеренестиВсеУпорядочиванияВОтчет()

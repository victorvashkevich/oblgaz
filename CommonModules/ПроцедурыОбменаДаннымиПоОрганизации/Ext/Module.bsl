Функция ПолучитьМассивВсехУзлов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ различные
	               |	ПоОрганизации.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ПоОрганизации КАК ПоОрганизации
				   |
				   |ГДЕ
				   |
				   |	ПоОрганизации.Ссылка <> &ЭтотУзел";
				   
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ПоОрганизации.ЭтотУзел());			   
				   
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСсылок;
	
КонецФункции

Функция ВернутьМассивВсехУзловИзПараметровСеанса()
	
	Возврат ПараметрыСеанса.ВсеУзлыОбменаПоОрганизациям;	
	
КонецФункции

Функция ПолучитьСоотвествиеУзловИОрганизаций() Экспорт
	
	Хранилище = ПараметрыСеанса.СоответствиеОрганизацийИУзловОбменаПоОрганизации;
		
	СоотвествиеУзловИОрганизаций = Хранилище.Получить();
	
	Возврат СоотвествиеУзловИОрганизаций;
	
КонецФункции

Функция ВернутьМассивУзловПоОднойОрганизации(Организация, СоотвествиеУзловИОрганизаций = Неопределено)
	
	Если СоотвествиеУзловИОрганизаций = Неопределено Тогда
		
		СоотвествиеУзловИОрганизаций = ПолучитьСоотвествиеУзловИОрганизаций();
	
	КонецЕсли;
	
	Возврат СоотвествиеУзловИОрганизаций[Организация];	
	
КонецФункции

Функция ПолучитьЗапросомМассивУзловПоОрганизации(МассивОрганизаций) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Организации.Ссылка
	|		ИНАЧЕ Организации.ГоловнаяОрганизация
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ ВТГоловныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&МассивОрганизаций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоОрганизации.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ПоОрганизации КАК ПоОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.ПоОрганизации.Организации КАК СписокОрганизаций
	|		ПО ПоОрганизации.Ссылка = СписокОрганизаций.Ссылка
	|ГДЕ
	|	(СписокОрганизаций.Организация В
	|				(ВЫБРАТЬ
	|					Организации.Ссылка
	|				ИЗ
	|					ВТГоловныеОрганизации КАК Организации)
	|			ИЛИ СписокОрганизаций.Организация ЕСТЬ NULL )
	|	И ПоОрганизации.Ссылка <> &ЭтотУзел";
				   
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ПоОрганизации.ЭтотУзел());
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСсылок;	
	
КонецФункции

Функция ПолучитьМассивУзловПоОрганизации(Организация, СоотвествиеУзловИОрганизаций = Неопределено) 
	
	Если ТипЗнч(Организация) = Тип("Массив") Тогда
		
		КоличествоЭлементовВМассиве = Организация.Количество();
		
		Если КоличествоЭлементовВМассиве = 0 Тогда
			
			ОрганизацияДляПоиска = Справочники.Организации.ПустаяСсылка();
			
		ИначеЕсли КоличествоЭлементовВМассиве = 1 Тогда
			
			ОрганизацияДляПоиска = Организация[0];
			
		Иначе
			
			ОрганизацияДляПоиска = Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		ОрганизацияДляПоиска = Организация;
		
	КонецЕсли;
	
	Если ОрганизацияДляПоиска <> Неопределено Тогда
		
		МассивУзлов = ВернутьМассивУзловПоОднойОрганизации(ОрганизацияДляПоиска, СоотвествиеУзловИОрганизаций);
		
	Иначе	
		
		МассивУзлов = ПолучитьЗапросомМассивУзловПоОрганизации(Организация);
		
	КонецЕсли;	
	
	Возврат МассивУзлов;
	
КонецФункции

Процедура ДополнитьМассивСсылками(ТекущийМассив, МассивДляДобавления)
	
	Если МассивДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из МассивДляДобавления Цикл
		
		Если ТекущийМассив.Найти(Элемент) = Неопределено Тогда
		
			ТекущийМассив.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ДополнитьМассивВсемиУзлами(МассивУзловДляПередачи)
	
	МассивУзлов = ВернутьМассивВсехУзловИзПараметровСеанса();
	
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);	
	 
КонецПроцедуры

Процедура ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Организация, СоотвествиеУзловИОрганизаций = Неопределено) Экспорт
	
	МассивУзлов = ПолучитьМассивУзловПоОрганизации(Организация, СоотвествиеУзловИОрганизаций);
	
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);
	
КонецПроцедуры

Процедура ДополнитьМассивУзламиПоСправочникуИПараметру(ИмяСправочника, ИмяРеквизита, 
	СсылкаНаСправочник, МассивУзловДляПередачи, ИмяРеквизитаОрганизации = "Организация", СоотвествиеУзловИОрганизаций = Неопределено)
	
	Если СсылкаНаСправочник.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	Спр." + ИмяРеквизитаОрганизации + " КАК Организация
	               |ИЗ
	               |	Справочник." + ИмяСправочника + " КАК Спр
	               |ГДЕ
	               |	Спр." + ИмяРеквизита + " = &СсылкаНаЭлемент";
				   
	Запрос.УстановитьПараметр("СсылкаНаЭлемент", СсылкаНаСправочник);			   
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Справочники.Организации.ПустаяСсылка(), СоотвествиеУзловИОрганизаций);	
		
	Иначе
	
		МассивОрганизаций = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Организация");
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, МассивОрганизаций, СоотвествиеУзловИОрганизаций);
	
	Конецесли;
	
КонецПроцедуры

Функция ПолучитьПоНаборуЗаписейРазличныеЗначенияРеквизита(НаборЗаписей, ИмяРеквизита) 
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ТаблицаДанных = НаборЗаписей.Выгрузить(, ИмяРеквизита);
	ТаблицаДанных.Свернуть(ИмяРеквизита);
	
	МассивОрганизаций = ТаблицаДанных.ВыгрузитьКолонку(ИмяРеквизита); 
	
	Возврат МассивОрганизаций;	
	
КонецФункции

Функция ОпределитьПоНаборуЗаписейСписокОрганизаций(НаборЗаписей)
	
	МассивЗначений = ПолучитьПоНаборуЗаписейРазличныеЗначенияРеквизита(НаборЗаписей, "Организация");
	Возврат МассивЗначений;
	
КонецФункции

Процедура ОпределитьПоНаборуЗаписейСОрганизациейМассивУзловДляПередачи(НаборЗаписей, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций = Неопределено) Экспорт
	
	МассивОрганизаций = ОпределитьПоНаборуЗаписейСписокОрганизаций(НаборЗаписей);
	ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, МассивОрганизаций, СоотвествиеУзловИОрганизаций);
	
КонецПроцедуры

Процедура ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(НаборЗаписей, МассивУзловДляПередачи, 
	ИмяРеквизита, ТипЭлемента = Неопределено, СоотвествиеУзловИОрганизаций = Неопределено, ИмяБазовогоТипа = "Справочники") Экспорт
	
	МассивРазличныхЗначенийРеквизита = ПолучитьПоНаборуЗаписейРазличныеЗначенияРеквизита(НаборЗаписей, ИмяРеквизита);
	
	МассивУзловДляПередачи = Новый Массив();
	
	Для Каждого Элемент Из МассивРазличныхЗначенийРеквизита Цикл 
		Если НЕ Элемент = Неопределено Тогда
			// для каждого элемента массива нужно определить набор узлов куда он может передаваться
			ДополнитьМассивУзловДляВыгрузкиСсылочногоТипа(ИмяБазовогоТипа, Элемент, МассивУзловДляПередачи, ТипЭлемента, , , СоотвествиеУзловИОрганизаций);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраСведений(Элемент, МетаданныеРегистра, 
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоотвествиеУзловИОрганизаций = Неопределено)
	
	ВыгружатьДляВсехУзлов = Ложь;
	МассивУзловДляПередачи = Новый Массив;
	
	ТипЭлемента = ТипЗнч(Элемент);
	
	Если ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.РасчетчикиЗарплатыОрганизаций") 
		Или ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.НадбавкиПоШтатномуРасписаниюОрганизаций") Тогда
		
		ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "ПодразделениеОрганизации", 
			Тип("СправочникСсылка.ПодразделенияОрганизаций"), СоотвествиеУзловИОрганизаций);

	//ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ЗаписиОСтажеДляСЗВ4")
	//	ИЛИ ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.СуммыВзносовДляСЗВ4") Тогда
	//	
	//	ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "ОбособленноеПодразделение", 
	//		Тип("СправочникСсылка.Организации"), СоотвествиеУзловИОрганизаций);	
	//		
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация") Тогда
		
		ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Объект" , , СоотвествиеУзловИОрганизаций);
		
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.АрхивДанныхРегламентированнойОтчетности") Тогда
		
		ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Объект", , СоотвествиеУзловИОрганизаций, "Документы");
		
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ОтветственныеЛицаОрганизаций") Тогда
		
		ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "СтруктурнаяЕдиница", 
			Тип("СправочникСсылка.Организации"), СоотвествиеУзловИОрганизаций);	
		
		
	//ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.СтатусыРегламентированныхОтчетов") Тогда
	//	
	//	ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Отчет", 
	//		Тип("ДокументСсылка.РегламентированныйОтчет"), СоотвествиеУзловИОрганизаций, "Документы");	
	//		
	ИначеЕсли ПроцедурыОбменаДаннымиПоОрганизацииПереопределяемый.ТипЭлементаСоответствуетДополнительномуТипу(ТипЭлемента) Тогда
		
		ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Ведомость", 
			Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций"), СоотвествиеУзловИОрганизаций, "Документы");
			
	//ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ПротоколыОбменаСБанком") Тогда
	//	
	//	ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Документ", 
	//		, СоотвествиеУзловИОрганизаций, "Документы");
	//		
	//ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ПериодическиеНачисления") Тогда
	//	
	//	ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Сотрудник", 
	//		, СоотвествиеУзловИОрганизаций, "Справочники");
	//		
	ИначеЕсли МетаданныеРегистра.Измерения.Найти("Организация") <> Неопределено Тогда 
		
		ОпределитьПоНаборуЗаписейСОрганизациейМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций);
					
	Иначе
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
				
	КонецЕсли;
		
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Функция ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраНакопления(Элемент, МетаданныеРегистра, СоотвествиеУзловИОрганизаций = Неопределено)
	
	МассивУзловДляПередачи = Новый Массив;
	
	ТипЭлемента = ТипЗнч(Элемент);
	
	Если ТипЭлемента = Тип("РегистрНакопленияНаборЗаписей.ЗанятыеШтатныеЕдиницыОрганизаций") Тогда
		
		ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "ПодразделениеОрганизации", 
			Тип("СправочникСсылка.ПодразделенияОрганизаций"), СоотвествиеУзловИОрганизаций);
	ИначеЕсли ТипЭлемента = Тип("РегистрНакопленияНаборЗаписей.ФактическиеОтпускаОрганизаций") Тогда
		ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Сотрудник", 
			Тип("СправочникСсылка.СотрудникиОрганизаций"), СоотвествиеУзловИОрганизаций);			
	
	Иначе	
		
		ПроцедурыОбменаДаннымиПоОрганизацииПереопределяемый.ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраНакопленияПереопределяемый(Элемент, МетаданныеРегистра, СоотвествиеУзловИОрганизаций, МассивУзловДляПередачи);
		
	КонецЕсли;
				
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Функция ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраРасчета(Элемент, МетаданныеРегистра, СоотвествиеУзловИОрганизаций = Неопределено)
	
	МассивУзловДляПередачи = Новый Массив;
	
	ТипЭлемента = ТипЗнч(Элемент);
	
	ОпределитьПоНаборуЗаписейСОрганизациейМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций);
		
	Возврат МассивУзловДляПередачи;
	
КонецФункции // ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраРасчета()

Функция ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраБухгалтерии(Элемент, МетаданныеРегистра, СоотвествиеУзловИОрганизаций = Неопределено)
	
	МассивУзловДляПередачи = Новый Массив;
	
	ОпределитьПоНаборуЗаписейСОрганизациейМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций);
				
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Процедура ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи) Экспорт
	
	ВыгружатьДляВсехУзлов = Истина;
			
	Если ВозвращатьМассивВсехУзлов Тогда
		ДополнитьМассивВсемиУзлами(МассивУзловДляПередачи);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДополнитьМассивУзловДляВыгрузкиСсылочногоТипа(ИмяБазовогоТипа, Элемент, МассивУзловДляПередачи, 
	ТипЭлемента = Неопределено, ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина,
	СоотвествиеУзловИОрганизаций = Неопределено)
	
	Если ИмяБазовогоТипа = "Справочники" Тогда
		
		ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, 
			ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов,
			СоотвествиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
		
		ПроцедурыОбменаДаннымиПоОрганизацииПереопределяемый.ДополнитьМассивУзловДляВыгрузкиДокумента(Элемент, МассивУзловДляПередачи, 
			ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов,
			СоотвествиеУзловИОрганизаций);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВыборкуПодчиненныхОрганизаций(ГоловнаяОрганизация)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ Различные
	               |	Организации.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация";
				   
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);	
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// для Орнаизации особые правила переноса
// переносим все организации которые находятся в иерархии головной организации 
// и все дерево подчиненных организаций полностью
Процедура ДополнитьМассивУзламиДляПереносаОрганизаций(МассивУзловДляПередачи, СсылкаНаЭлемент, СоотвествиеУзловИОрганизаций)
	
	// нужно определить все узлы куда может ехать сама организация 	
	// и все организации подчиненные ей	
	ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, СсылкаНаЭлемент, СоотвествиеУзловИОрганизаций);	
	
	Выборка = ПолучитьВыборкуПодчиненныхОрганизаций(СсылкаНаЭлемент);
	Пока Выборка.Следующий() Цикл
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Выборка.Ссылка, СоотвествиеУзловИОрганизаций);	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, 
	ТипЭлемента = Неопределено, ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина,
	СоотвествиеУзловИОрганизаций = Неопределено)
	
	Перем ЭтоГруппа, СсылкаНаЭлемент;
	
	// пердопределенные элементы выгружаем и загружаем послностью
	Если Элемент.Предопределенный Тогда
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		Возврат;
		
	КонецЕсли;
	
	ВыгружатьДляВсехУзлов = Ложь;
	Если ТипЭлемента = Неопределено Тогда
	
		ТипЭлемента = ТипЗнч(Элемент);
	
	КонецЕсли;
	
	Если ТипЭлемента = Тип("СправочникОбъект.БанковскиеСчета")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		// нужно определить владельца
		// если владалец не организация, тогда регистрируем изменения для всех узлов, 
		// если организация, то только для тех узлов куда организация передается
		
		Владелец = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, "Справочники", ТипЭлемента, "Владелец");
		
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
			
			// только узлы с указанной организацией
			ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Владелец, СоотвествиеУзловИОрганизаций);
			
		ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") 
			И ЗначениеЗаполнено(Владелец.ОсновнойДоговорКонтрагента) Тогда
			
			ДополнитьМассивУзламиПоСправочникуИПараметру("ДоговорыКонтрагентов", "Владелец", 
				Владелец, МассивУзловДляПередачи, "Организация", СоотвествиеУзловИОрганизаций);	
			
		Иначе
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		КонецЕсли;
		
	
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.Организации")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Организации") Тогда		
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Ложь);
		
		ДополнитьМассивУзламиДляПереносаОрганизаций(МассивУзловДляПередачи, СсылкаНаЭлемент, СоотвествиеУзловИОрганизаций);
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.Контрагенты")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Контрагенты") Тогда		
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Истина, ЭтоГруппа);
		
		Если ЭтоГруппа Или НЕ ЗначениеЗаполнено(СсылкаНаЭлемент.ОсновнойДоговорКонтрагента) Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		Иначе
		
			ДополнитьМассивУзламиПоСправочникуИПараметру("ДоговорыКонтрагентов", "Владелец", 
				СсылкаНаЭлемент, МассивУзловДляПередачи, "Организация", СоотвествиеУзловИОрганизаций);
				
		КонецЕсли;
			
	//ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.РегистрацияВИФНС")
	//	ИЛИ ТипЭлемента = Тип("СправочникСсылка.РегистрацияВИФНС") Тогда		
	//	
	//	Владелец = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, "Справочники", ТипЭлемента, "Владелец");
	//	
	//	ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Владелец, СоотвествиеУзловИОрганизаций);		
			
	
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ПодразделенияОрганизаций")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда		
		
		СтруктураПараметров = Новый Структура("Владелец", Справочники.Организации.ПустаяСсылка());
		ЗаполнитьСтруктуруПараметровПоЭлементу(Элемент, "Справочники", ТипЭлемента, СтруктураПараметров);
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, СтруктураПараметров.Владелец, СоотвествиеУзловИОрганизаций);			
				
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ДоговорыКонтрагентов")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда		
		
		СтруктураПараметров = Новый Структура("ЭтоГруппа, Организация", Ложь, Справочники.Организации.ПустаяСсылка());
		ЗаполнитьСтруктуруПараметровПоЭлементу(Элемент, "Справочники", ТипЭлемента, СтруктураПараметров);
		
		Если СтруктураПараметров.ЭтоГруппа Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		Иначе
		
			ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, СтруктураПараметров.Организация, СоотвествиеУзловИОрганизаций);	
			
		КонецЕсли;
		
	//ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.МедицинскиеСтраховыеПолисы")
	//	ИЛИ ТипЭлемента = Тип("СправочникОбъект.МедицинскиеСтраховыеПолисы") Тогда	
	//	
	//	ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Элемент.Организация, СоотвествиеУзловИОрганизаций);
			
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.СотрудникиОрганизаций")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда	
		
		СтруктураПараметров = Новый Структура("ЭтоГруппа, Организация", Ложь, Справочники.Организации.ПустаяСсылка());
		ЗаполнитьСтруктуруПараметровПоЭлементу(Элемент, "Справочники", ТипЭлемента, СтруктураПараметров);
		
		Если СтруктураПараметров.ЭтоГруппа Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		Иначе
		
			ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, СтруктураПараметров.Организация, СоотвествиеУзловИОрганизаций);	
			
		КонецЕсли;
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ОстаткиОтпусковОрганизаций")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ОстаткиОтпусковОрганизаций") Тогда
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Элемент.Сотрудник.Организация, СоотвествиеУзловИОрганизаций);
			
	Иначе
		
		ПроцедурыОбменаДаннымиПоОрганизацииПереопределяемый.ДополнитьМассивУзловДляВыгрузкиСправочникаПереопределяемый(Элемент, МассивУзловДляПередачи, 
		ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, СоотвествиеУзловИОрганизаций);
		
		
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ОпределениеУзловДляВыгрузкиСправочника(Элемент, ТипЭлемента = Неопределено, 
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоотвествиеУзловИОрганизаций = Неопределено) Экспорт
	
	МассивУзловДляПередачи = Новый Массив;
	
	ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, 
		ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, СоотвествиеУзловИОрганизаций);
	
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Функция ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса)
	
	МетаданныеЭлемента = Элемент.Метаданные();
	
	Если ИмяБазовогоТипа = "Справочники" Тогда
		
		ТипСсылки = Тип("СправочникСсылка." + МетаданныеЭлемента.Имя);
		ИмяДляЗапроса = "Справочник." + МетаданныеЭлемента.Имя;
		
	ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
		
		ТипСсылки = Тип("ДокументСсылка." + МетаданныеЭлемента.Имя);
		ИмяДляЗапроса = "Документ." + МетаданныеЭлемента.Имя; 
		
	Иначе
		
		ТипСсылки = Неопределено;
		
	КонецЕсли;
	
	Возврат ТипЭлемента = ТипСсылки;	
	
КонецФункции

Процедура ЗаполнитьСтруктуруПараметровПоЭлементу(Элемент, ИмяБазовогоТипа, ТипЭлемента, СтруктураПараметров)
	
	ИмяДляЗапроса = "";
	ЭтоСсылка = ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса);
	
	Если НЕ ЭтоСсылка Тогда
		
		Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
			
			СтруктураПараметров[ЭлементСтруктуры.Ключ] = Элемент[ЭлементСтруктуры.Ключ];
			
		КонецЦикла;
		
		Возврат;
				
	КонецЕсли;
	
	// надо все единым запросом получить
	//нужно построить запрос и вернуть параметр по ссылке
	
	СтрокаИменПараметров = "";
	Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
			
		СтрокаИменПараметров = СтрокаИменПараметров + "," + Символы.ПС + "ОбъектДанных." + ЭлементСтруктуры.Ключ;
		
	КонецЦикла;
	
	СтрокаИменПараметров = Сред(СтрокаИменПараметров, 2);
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	" + СтрокаИменПараметров + "
	               |ИЗ
	               |	" + ИмяДляЗапроса + " КАК ОбъектДанных
	               |ГДЕ
	               |	ОбъектДанных.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Элемент);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если НЕ РезультатЗапроса.Пустой() Тогда
						
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка);
		
	КонецЕсли;		
	
КонецПроцедуры

// функция по элементу определяет это группа и возвращает ссылку на него
Функция ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, ИмяБазовогоТипа, ТипЭлемента, НужноОпределятьЭтоГруппа = Ложь, ЭтоГруппа = Ложь)
	
	ИмяДляЗапроса = "";
	ЭтоСсылка = ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса);
	
	Если НЕ ЭтоСсылка Тогда
		
		Если НужноОпределятьЭтоГруппа Тогда
			
			ЭтоГруппа = Элемент.ЭтоГруппа;
			
			Если ЭтоГруппа = Неопределено Тогда
				ЭтоГруппа = Ложь;
			КонецЕсли;
			
		Конецесли;
		
		Возврат Элемент.Ссылка;
		
	КонецЕсли;
	
	Если НужноОпределятьЭтоГруппа Тогда
		
		ЭтоГруппа = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, ИмяБазовогоТипа, ТипЭлемента, "ЭтоГруппа");	
		Если ЭтоГруппа = Неопределено Тогда
			ЭтоГруппа = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

// функция анализирует Элемент это объект или нет
// если объект возвращает его реквизит, иначе
// строит по ссылке запрос и возвращает значение этого реквизита из запроса
Функция ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяПараметра) Экспорт
	
	ИмяДляЗапроса = "";
	ЭтоСсылка = ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса);
		
	Если НЕ ЭтоСсылка Тогда
		//Сообщить(ИмяПараметра + "     " + ИмяБазовогоТипа + "    " + Элемент);
		
		Возврат Элемент[ИмяПараметра]
	КонецЕсли;
	
	//нужно построить запрос и вернуть параметр по ссылке
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбъектДанных." + ИмяПараметра + "
	               |ИЗ
	               |	" + ИмяДляЗапроса + " КАК ОбъектДанных
	               |ГДЕ
	               |	ОбъектДанных.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Элемент);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка[ИмяПараметра];
		
	КонецЕсли;	
	
КонецФункции


Функция ОпределениеУзловДляВыгрузкиДокумента(Элемент, ТипРеквизита = Неопределено, ВыгружатьДляВсехУзлов = Ложь, 
	ВозвращатьМассивВсехУзлов = Истина, СоотвествиеУзловИОрганизаций = Неопределено) Экспорт
	
	МассивУзловДляПередачи = Новый Массив;
	
	ПроцедурыОбменаДаннымиПоОрганизацииПереопределяемый.ДополнитьМассивУзловДляВыгрузкиДокумента(Элемент, МассивУзловДляПередачи, 
		ТипРеквизита, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, СоотвествиеУзловИОрганизаций);
	
	Возврат МассивУзловДляПередачи;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

Процедура ДополнитьМассивПолучателейУзламиАвторегистрации(Объект)
	
	Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	
	НачальныйМассивУзлов = Новый Массив();
	
	Для Каждого Узел Из Объект.ОбменДанными.Получатели Цикл
		НачальныйМассивУзлов.Добавить(Узел);
	КонецЦикла;
	
	Объект.ОбменДанными.Получатели.Заполнить();
	
	Для Каждого Элемент Из НачальныйМассивУзлов Цикл
		
		Объект.ОбменДанными.Получатели.Добавить(Элемент);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииПередЗаписью, МассивУзловДляРегистрацииПриЗаписи)
	
	ДополнитьМассивПолучателейУзламиАвторегистрации(Источник);
	
	// для регистрации ссылки
	Для Каждого Элемент Из МассивУзловДляРегистрацииПередЗаписью Цикл
		
		Источник.ОбменДанными.Получатели.Добавить(Элемент);
		
	КонецЦикла;
	
	// для регистрации объекта
	Для Каждого Элемент Из МассивУзловДляРегистрацииПриЗаписи Цикл
		
		Источник.ОбменДанными.Получатели.Добавить(Элемент);
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Данные, ИмяБазовогоТипа, ТипЭлемента = Неопределено, МетаданныеОбъекта = Неопределено,
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоотвествиеУзловИОрганизаций = Неопределено) Экспорт
	
	Если ИмяБазовогоТипа = "Справочники" Тогда
			
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиСправочника(Данные, ТипЭлемента, ВыгружатьДляВсехУзлов, 
			ВозвращатьМассивВсехУзлов, СоотвествиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиДокумента(Данные, ТипЭлемента, ВыгружатьДляВсехУзлов, 
			ВозвращатьМассивВсехУзлов, СоотвествиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "РегистрыСведений" Тогда	
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраСведений(Данные, МетаданныеОбъекта, ВыгружатьДляВсехУзлов, 
			ВозвращатьМассивВсехУзлов, СоотвествиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "РегистрыНакопления" Тогда	
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраНакопления(Данные, МетаданныеОбъекта, СоотвествиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "РегистрыБухгалтерии" Тогда	
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраБухгалтерии(Данные, МетаданныеОбъекта, СоотвествиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "РегистрыРасчета" Тогда
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраРасчета(Данные, МетаданныеОбъекта, СоотвествиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "Перерасчеты" Тогда
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраРасчета(Данные, МетаданныеОбъекта, СоотвествиеУзловИОрганизаций);
		
	КонецЕсли;
	
	// информация из подчиненной информационной базы в главную по отношению к ней передаем всегда
	ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
		
	Если ЗначениеЗаполнено(ГлавныйУзел) Тогда
	
		НомерВМассиве = МассивУзловДляРегистрацииСсылки.Найти(ГлавныйУзел);
		
		Если НомерВМассиве = Неопределено Тогда
		
			МассивУзловДляРегистрацииСсылки.Добавить(ГлавныйУзел);	
			
		КонецЕсли;
		
	КонецЕсли;	
			
	Возврат МассивУзловДляРегистрацииСсылки;
	
КонецФункции

Процедура ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, ИмяБазовогоТипа, 
	МассивУзловДляРегистрацииСсылки = Неопределено, МассивУзловДляРегистрацииОбъекта = Неопределено)
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		Возврат;
		
	КонецЕсли;		
	
	Если Источник.ЭтоНовый() Тогда
		
		// элемент еще никуда не передавался
		МассивУзловДляРегистрацииСсылки = Новый Массив;
		
	Иначе
		
		МассивУзловДляРегистрацииСсылки = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник.Ссылка, ИмяБазовогоТипа);
						
	КонецЕсли;
		
	МассивУзловДляРегистрацииОбъекта = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник, ИмяБазовогоТипа);
			
	ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииСсылки, МассивУзловДляРегистрацииОбъекта);	
			
КонецПроцедуры

Процедура ПровестиРегистрацияСвязанныхОрганизаций(СсылкаНаОбъект, МассивУзловДляРегистрацииОбъекта)
	
	Если МассивУзловДляРегистрацииОбъекта.Количество() = 0
		ИЛИ СсылкаНаОбъект.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// регистрируем изменения для самого объекта
	ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрацииОбъекта, СсылкаНаОбъект);
	
	// регистрируем изменения для головной организации и все что связано с головной
	СсылкаНаГоловнуюОрганизация = СсылкаНаОбъект.ГоловнаяОрганизация;
	Если Не ЗначениеЗаполнено(СсылкаНаГоловнуюОрганизация) Тогда
		Возврат;
	КонецЕсли;
	
	ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрацииОбъекта, СсылкаНаГоловнуюОрганизация);
	
	// регистрируем все подчиненные головной
	Выборка = ПолучитьВыборкуПодчиненныхОрганизаций(СсылкаНаГоловнуюОрганизация);
	Пока Выборка.Следующий() Цикл
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрацииОбъекта, Выборка.Ссылка);		
				
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроизвестиРегистрациюСвязанныхОбъектов(СсылкаНаОбъект, МассивУзловДляРегистрацииОбъекта, ТипОбъекта)
	
	Если МассивУзловДляРегистрацииОбъекта.Количество() = 0
		ИЛИ СсылкаНаОбъект.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// регистрируем изменения для самого объекта
	ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрацииОбъекта, СсылкаНаОбъект);
	
	Если ТипОбъекта = "Контрагенты" Тогда
		
		// банковские счета
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	БанковскиеСчета.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.БанковскиеСчета КАК БанковскиеСчета
		               |ГДЕ
		               |	БанковскиеСчета.Владелец = &Контрагент";
					   
		Запрос.УстановитьПараметр("Контрагент", СсылкаНаОбъект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрацииОбъекта, Выборка.ссылка);	
			
		КонецЦикла;
		
		// контактная информация
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.Тип,
			|	КонтактнаяИнформация.Вид
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Объект";
		
		Запрос.УстановитьПараметр("Объект", СсылкаНаОбъект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Использование = Истина;
		НаборЗаписей.Отбор.Объект.Значение = СсылкаНаОбъект;
		НаборЗаписей.Отбор.Тип.Использование = Истина;
		НаборЗаписей.Отбор.Вид.Использование = Истина;
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.Тип.Значение = Выборка.Тип;
			НаборЗаписей.Отбор.Вид.Значение = Выборка.Вид;
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрацииОбъекта, НаборЗаписей);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюСправочникаДляОбменаПоОрганизации(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТипЭлемента = ТипЗнч(Источник);
	МассивУзловДляРегистрацииСсылки = Новый Массив();
	МассивУзловДляРегистрацииОбъекта = Новый Массив();
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Справочники", 
		МассивУзловДляРегистрацииСсылки, МассивУзловДляРегистрацииОбъекта);
		
	Если Источник.ОбменДанными.Загрузка Тогда
		
		Пока НЕ МассивУзловДляРегистрацииОбъекта.Найти(Источник.ОбменДанными.Отправитель) = Неопределено Цикл
        	МассивУзловДляРегистрацииОбъекта.Удалить(МассивУзловДляРегистрацииОбъекта.Найти(Источник.ОбменДанными.Отправитель));
		КонецЦикла;
		
		Если МассивУзловДляРегистрацииОбъекта.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;		
			
	КонецЕсли;		
		
	Если ТипЭлемента = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда		
		
		Если НЕ Источник.ЭтоГруппа Тогда
			
			ПроизвестиРегистрациюСвязанныхОбъектов(Источник.Владелец, МассивУзловДляРегистрацииОбъекта, "Контрагенты");
						
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.БанковскиеСчета") Тогда
		
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.Организации") Тогда
		
		//нужно зарегистрировать все связанные организации
		ПровестиРегистрацияСвязанныхОрганизаций(Источник.Ссылка, МассивУзловДляРегистрацииОбъекта);
		
	КонецЕсли;		
			
КонецПроцедуры

Процедура ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, Замещение, ИмяБазовогоТипа) 
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТипЗначенияИсточника = ТипЗнч(Источник);
	
	МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗначенияИсточника);
	
	Если Замещение Тогда
		
		Если ИмяБазовогоТипа = "РегистрыСведений" Тогда
			СтарыйНаборЗаписей = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли ИмяБазовогоТипа = "РегистрыНакопления" Тогда
			СтарыйНаборЗаписей = РегистрыНакопления[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли ИмяБазовогоТипа = "РегистрыБухгалтерии" Тогда
			СтарыйНаборЗаписей = РегистрыБухгалтерии[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();	
		ИначеЕсли ИмяБазовогоТипа = "РегистрыРасчета" Тогда
			СтарыйНаборЗаписей = РегистрыРасчета[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли ИмяБазовогоТипа = "Перерасчеты" Тогда
			СтарыйНаборЗаписей = РегистрыРасчета[МетаданныеРегистра.Родитель().Имя].Перерасчеты[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
			
		КонецЕсли;
	
		Для Каждого ЗначениеОтбора Из Источник.Отбор Цикл
			
			Если ЗначениеОтбора.Использование = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
			СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
			СтрокаОтбора.Использование = Истина;
			
		КонецЦикла;
		
		СтарыйНаборЗаписей.Прочитать();
		
		МассивУзловДляРегистрацииСсылки = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(СтарыйНаборЗаписей, ИмяБазовогоТипа,  , МетаданныеРегистра);
		
		Если ИмяБазовогоТипа = "РегистрыСведений" Тогда
			
			// для старого набора записей нужно еще сделать регистрацию ссылок для некоторых измерений
			ВыполнитьРегистрациюИзмененийДляРеквизитаНобораЗаписей(Источник, Отказ, Замещение, ТипЗначенияИсточника);
			
		ИначеЕсли ИмяБазовогоТипа = "РегистрыНакопления" Тогда
			// для старого набора записей нужно еще сделать регистрацию ссылок для некоторых измерений
			ВыполнитьРегистрациюИзмененийДляРеквизитаНобораЗаписей(Источник, Отказ, Замещение, ТипЗначенияИсточника);
			
		ИначеЕсли ИмяБазовогоТипа = "РегистрыРасчета" Тогда
			// для старого набора записей нужно еще сделать регистрацию ссылок для некоторых измерений
			ВыполнитьРегистрациюИзмененийДляРеквизитаНобораЗаписей(Источник, Отказ, Замещение, ТипЗначенияИсточника);
			
		ИначеЕсли ИмяБазовогоТипа = "Перерасчеты" Тогда
			// для старого набора записей нужно еще сделать регистрацию ссылок для некоторых измерений
			ВыполнитьРегистрациюИзмененийДляРеквизитаНобораЗаписей(Источник, Отказ, Замещение, ТипЗначенияИсточника);
			
		КонецЕсли;
		
	Иначе
		
		МассивУзловДляРегистрацииСсылки = Новый Массив;
			
	КонецЕсли;
			
	МассивУзловДляРегистрацииОбъекта = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник, ИмяБазовогоТипа,  , МетаданныеРегистра);
	
	ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииСсылки, МассивУзловДляРегистрацииОбъекта);
	
КонецПроцедуры

Процедура ПередЗаписьюРегистраСведенийДляОбменаПоОрганизации(Источник, Отказ, Замещение) Экспорт
	
	ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, Замещение, "РегистрыСведений");	
		
КонецПроцедуры

Процедура ВыполнитьРегистрациюИзмененийДляРеквизитаНобораЗаписей(Источник, Отказ, Замещение, ТипЭлемента)
	// не выполняется регистрация изменений для ссылок в регистрах
КонецПроцедуры

Процедура ПередЗаписьюДокументаДляОбменаПоОрганизации(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Документы");
	
КонецПроцедуры

Процедура ПередЗаписьюРегистраНакопленийДляОбменаПоОрганизацииПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, Замещение, "РегистрыНакопления");
	
КонецПроцедуры

Процедура ПередЗаписьюРегистраРасчетовДляОбменаПоОрганизацииПередЗаписью(Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов) Экспорт
	ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, Замещение, "РегистрыРасчета");
КонецПроцедуры

Процедура ПередЗаписьюПерерасчетовДляОбменаПоОрганизацииПередЗаписью(Источник, Отказ, Замещение) Экспорт
	ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, Замещение, "Перерасчеты");
КонецПроцедуры

Функция ОпределитьПоЭлементуПодлежитИзменениюВТекущейИБ(Источник)
	
	Если Источник.ОбменДанными.Загрузка
		ИЛИ РольДоступна("ПолныеПрава") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	// Если это подчиненныей узел плана обмен по организации то редактирование элемента запрещено
	ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
	
	Если ГлавныйУзел = Неопределено
		ИЛИ ТипЗнч(ГлавныйУзел) <> Тип("ПланОбменаСсылка.ПоОрганизации") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПередЗаписьюСправочникаРедактированиеЭлементовВПодчиненныхУзлахПоОрганизацииПередЗаписью(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПодлежитИзменению = ОпределитьПоЭлементуПодлежитИзменениюВТекущейИБ(Источник);
	
	Если НЕ ПодлежитИзменению Тогда
	
		ОбщегоНазначения.СообщитьОбОшибке("Редактирование данных справочника """ + Строка(Источник.Метаданные()) + """ запрещено. 
		|Изменять справочник можно только в головной информационной базе или обладая ролью ""Полные права"". Изменения не могут быть записаны...", Отказ);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалениемСправочникаДляОбменаПоОрганизацииПередУдалением(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Справочники");	
	
КонецПроцедуры

Процедура ПередУдалениемДокументаДляОбменаПоОрганизацииПередУдалением(Источник, Отказ) Экспорт
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Документы");	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ ФОРМЫ ЭЛЕМЕНТА
	
// Функция записывает элемент, спросив об этом у пользователя
Функция ЗаписатьЭлементПередВыполнениемДействия(ТекстВопроса = "", ЭтаФорма) Экспорт
	
	Если ЭтаФорма.Модифицированность() Тогда
		Если Не ЗначениеЗаполнено(ТекстВопроса) Тогда
			ТекстВопроса = "Перед вводом на основании необходимо записать элемент. Записать элемент?";
		КонецЕсли;
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Попытка
				Возврат ЭтаФорма.ЗаписатьВФорме();
			Исключение
				Возврат Ложь;
			КонецПопытки;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 	
	
	Возврат Истина;
	
КонецФункции // ЗаписатьЭлементПередВыполнениемДействия()

// Функция проверяется прием на работу сотрудника или наличие начислений
 //
 // Параметры  Нет
 //
 // Возвращаемое значение:
 //   Булево
 //
Функция ЕстьНачисленияИлиПриемНаРаботу(ВидДоговора, Ссылка) Экспорт
	
	ВидыДоговоров = Новый Массив;
	
	СотрудникиОрганизацийПереопределяемый.ДополнитьВидыДоговоровДляУсловия(ВидыДоговоров);
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский 
	 ИЛИ ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
		
		//договор ГПХ, проверим регистрацию договоров документом
		 Запрос = Новый Запрос;
		 ТекстЗапроса = 
		 "ВЫБРАТЬ ПЕРВЫЕ 1
		 |	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник
		 |ИЗ
		 |	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
		 |ГДЕ
		 |	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник = &парамСотрудник
		 |	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен";
		 
		 Запрос.УстановитьПараметр("ПарамСотрудник", Ссылка);
		 Запрос.Текст = ТекстЗапроса;
		 Выборка = Запрос.Выполнить().Выбрать();
		 Если Выборка.Следующий() Тогда
			 Возврат Истина;	
		 КонецЕсли;
		
	ИначеЕсли ВидыДоговоров.Найти(ВидДоговора) <> Неопределено  Тогда	
		
		//проверим по наличию записей в регистре РаботникиОрганизаций
		 Запрос = Новый Запрос;
		 ТекстЗапроса = 
		 "ВЫБРАТЬ ПЕРВЫЕ 1
		 |	РаботникиОрганизаций.Сотрудник
		 |ИЗ
		 |	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		 |ГДЕ
		 |	РаботникиОрганизаций.Сотрудник = &ПарамСотрудник";
		 
		 Запрос.УстановитьПараметр("ПарамСотрудник", Ссылка);
		 Запрос.Текст = ТекстЗапроса;
		 Выборка = Запрос.Выполнить().Выбрать();
		 Если Выборка.Следующий() Тогда
			 Возврат Истина;	
		 КонецЕсли;
		
	КонецЕсли;
 
	Возврат Ложь;
	
КонецФункции // ЕстьНачисленияИлиПриемНаРаботу()

// Процедура формирует список обособленных подразделений организации
Процедура СформироватьСписокОбособленныхПодразделений(ЭтаФорма) Экспорт
	
	Организация = ЭтаФорма.Организация;
	
	ЭтаФорма.мСписокОбособленныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	ЭтаФорма.мСписокОбособленныхПодразделений.Вставить(0, Организация);

КонецПроцедуры // СформироватьСписокОбособленныхПодразделений()

// Процедура формирует заголовок надписи ПерсональныеНадбавки
Процедура СформироватьЗаголовокПерсональныхНадбавок(ЭтаФорма) Экспорт
	
	ЭлементыФормы = ЭтаФорма.ЭлементыФормы;
	
	ТекстНадписи = СотрудникиОрганизацийПереопределяемый.СформироватьТекстНадписи();
	
	Для каждого ПерсональнаяНадбавка Из ЭтаФорма.ПерсональныеНадбавки Цикл
		ТекстНадписи = ТекстНадписи + ПерсональнаяНадбавка.Надбавка + "/" + ПерсональнаяНадбавка.Показатель1 + Символы.ПС;
	КонецЦикла;	
	
	ЭлементыФормы.НадбавкиПоТрудовомуДоговоруТекст.Заголовок = ТекстНадписи;
	ЭлементыФормы.НадбавкиПоТрудовомуДоговоруТекст1.Заголовок = ТекстНадписи;

КонецПроцедуры

Процедура ПолучитьСписокПлановыхНачислений(ЭтаФорма) Экспорт
	
	Ссылка = ЭтаФорма.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеНачисленияСрезПоследних.Период,
	|	ПлановыеНачисленияСрезПоследних.ВидРасчета,
	|	ПлановыеНачисленияСрезПоследних.Показатель1,
	|	ПлановыеНачисленияСрезПоследних.Валюта1,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд1,
	|	ПлановыеНачисленияСрезПоследних.Показатель2,
	|	ПлановыеНачисленияСрезПоследних.Валюта2,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд2,
	|	ПлановыеНачисленияСрезПоследних.Показатель3,
	|	ПлановыеНачисленияСрезПоследних.Валюта3,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд3,
	|	ПлановыеНачисленияСрезПоследних.Показатель4,
	|	ПлановыеНачисленияСрезПоследних.Валюта4,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд4,
	|	ПлановыеНачисленияСрезПоследних.Показатель5,
	|	ПлановыеНачисленияСрезПоследних.Валюта5,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд5,
	|	ПлановыеНачисленияСрезПоследних.Показатель6,
	|	ПлановыеНачисленияСрезПоследних.Валюта6,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд6,
	|	ПлановыеНачисленияСрезПоследних.Действие,
	|	ПлановыеНачисленияСрезПоследних.ПериодЗавершения,
	|	ПлановыеНачисленияСрезПоследних.ВидРасчетаЗавершения,
	|	ПлановыеНачисленияСрезПоследних.ДействиеЗавершения,
	|	ПлановыеНачисленияСрезПоследних.Показатель1Завершения,
	|	ПлановыеНачисленияСрезПоследних.Показатель2Завершения,
	|	ПлановыеНачисленияСрезПоследних.Показатель3Завершения,
	|	ПлановыеНачисленияСрезПоследних.Показатель4Завершения,
	|	ПлановыеНачисленияСрезПоследних.Показатель5Завершения,
	|	ПлановыеНачисленияСрезПоследних.Показатель6Завершения,
	|	ПлановыеНачисленияСрезПоследних.Валюта1Завершения,
	|	ПлановыеНачисленияСрезПоследних.Валюта2Завершения,
	|	ПлановыеНачисленияСрезПоследних.Валюта3Завершения,
	|	ПлановыеНачисленияСрезПоследних.Валюта4Завершения,
	|	ПлановыеНачисленияСрезПоследних.Валюта5Завершения,
	|	ПлановыеНачисленияСрезПоследних.Валюта6Завершения,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд1Завершения,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд2Завершения,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд3Завершения,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд4Завершения,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд5Завершения,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд6Завершения,
	|	ПлановыеНачисленияСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|			&ДатаСреза,
	|			Организация = &ГоловнаяОрганизация
	|				И Сотрудник = &Ссылка) КАК ПлановыеНачисленияСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПлановыеНачисленияСрезПоследних.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|					И ПлановыеНачисленияСрезПоследних.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.ПустаяСсылка)
	|				ТОГДА ЛОЖЬ
	|			КОГДА ПлановыеНачисленияСрезПоследних.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|					И ПлановыеНачисленияСрезПоследних.ДействиеЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.ПустаяСсылка)
	|					И &ДатаСреза < ПлановыеНачисленияСрезПоследних.ПериодЗавершения
	|				ТОГДА ЛОЖЬ
	|			КОГДА ПлановыеНачисленияСрезПоследних.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|					И &ДатаСреза >= ПлановыеНачисленияСрезПоследних.ПериодЗавершения
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Ссылка.Организация);
	Запрос.УстановитьПараметр("ДатаСреза", ОбщегоНазначения.ПолучитьРабочуюДату());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ЭтаФорма.ПлановыеНачисления = Запрос.Выполнить().Выгрузить();

КонецПроцедуры

Процедура ПолучитьСписокПлановыхУдержаний(ЭтаФорма) Экспорт
	
	Ссылка = ЭтаФорма.Ссылка;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеУдержанияСрезПоследних.Период,
	|	ПлановыеУдержанияСрезПоследних.ВидРасчета,
	|	ПлановыеУдержанияСрезПоследних.Показатель1,
	|	ПлановыеУдержанияСрезПоследних.Валюта1,
	|	ПлановыеУдержанияСрезПоследних.Показатель2,
	|	ПлановыеУдержанияСрезПоследних.Валюта2,
	|	ПлановыеУдержанияСрезПоследних.Показатель3,
	|	ПлановыеУдержанияСрезПоследних.Валюта3,
	|	ПлановыеУдержанияСрезПоследних.Показатель4,
	|	ПлановыеУдержанияСрезПоследних.Валюта4,
	|	ПлановыеУдержанияСрезПоследних.Показатель5,
	|	ПлановыеУдержанияСрезПоследних.Валюта5,
	|	ПлановыеУдержанияСрезПоследних.Показатель6,
	|	ПлановыеУдержанияСрезПоследних.Валюта6,
	|	ПлановыеУдержанияСрезПоследних.Действие,
	|	ПлановыеУдержанияСрезПоследних.ПериодЗавершения,
	|	ПлановыеУдержанияСрезПоследних.ДействиеЗавершения,
	|	ПлановыеУдержанияСрезПоследних.Показатель1Завершения,
	|	ПлановыеУдержанияСрезПоследних.Показатель2Завершения,
	|	ПлановыеУдержанияСрезПоследних.Показатель3Завершения,
	|	ПлановыеУдержанияСрезПоследних.Показатель4Завершения,
	|	ПлановыеУдержанияСрезПоследних.Показатель5Завершения,
	|	ПлановыеУдержанияСрезПоследних.Показатель6Завершения,
	|	ПлановыеУдержанияСрезПоследних.Валюта1Завершения,
	|	ПлановыеУдержанияСрезПоследних.Валюта2Завершения,
	|	ПлановыеУдержанияСрезПоследних.Валюта3Завершения,
	|	ПлановыеУдержанияСрезПоследних.Валюта4Завершения,
	|	ПлановыеУдержанияСрезПоследних.Валюта5Завершения,
	|	ПлановыеУдержанияСрезПоследних.Валюта6Завершения,
	|	ПлановыеУдержанияСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций.СрезПоследних(
	|			&ДатаСреза,
	|			Организация = &ГоловнаяОрганизация
	|				И Физлицо = &Ссылка) КАК ПлановыеУдержанияСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПлановыеУдержанияСрезПоследних.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|					И ПлановыеУдержанияСрезПоследних.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.ПустаяСсылка)
	|				ТОГДА ЛОЖЬ
	|			КОГДА ПлановыеУдержанияСрезПоследних.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|					И ПлановыеУдержанияСрезПоследних.ДействиеЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.ПустаяСсылка)
	|					И &ДатаСреза < ПлановыеУдержанияСрезПоследних.ПериодЗавершения
	|				ТОГДА ЛОЖЬ
	|			КОГДА ПлановыеУдержанияСрезПоследних.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|					И &ДатаСреза >= ПлановыеУдержанияСрезПоследних.ПериодЗавершения
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Ссылка.Организация);
	Запрос.УстановитьПараметр("ДатаСреза", ОбщегоНазначения.ПолучитьРабочуюДату());
	Запрос.УстановитьПараметр("Ссылка", Ссылка.Физлицо);
	ЭтаФорма.ПлановыеУдержания = Запрос.Выполнить().Выгрузить();

КонецПроцедуры

// Процедура очищает не используемые реквизиты перед записью объекта
Процедура ОчиститьНеИспользуемыеРеквизиты(ЭтаФорма) Экспорт
	
	ВидыДоговоров = Новый Массив;
	
	СотрудникиОрганизацийПереопределяемый.ДополнитьВидыДоговоровДляУсловия(ВидыДоговоров);
	
	Если ВидыДоговоров.Найти(ЭтаФорма.ВидДоговора) = Неопределено Тогда
		
		Если СотрудникиОрганизацийПереопределяемый.ОчищатьВидЗанятости(ЭтаФорма) Тогда
			ЭтаФорма.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка();
		КонецЕсли;
		ЭтаФорма.НомерДоговора ="";
		ЭтаФорма.ДатаДоговора = Дата('00010101');
		ЭтаФорма.ПодразделениеОрганизации  = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		ЭтаФорма.Должность		 = Справочники.ДолжностиОрганизаций.ПустаяСсылка();
		ЭтаФорма.ГрафикРаботы	 = Справочники.ГрафикиРаботы.ПустаяСсылка();
		ЭтаФорма.ЗанимаемыхСтавок = 0;
		ЭтаФорма.ДатаНачала 	  = Дата('00010101');
		ЭтаФорма.ДатаОкончания = Дата('00010101');
		ЭтаФорма.ИспытательныйСрок = 0;
		ЭтаФорма.ТарифнаяСтавка = 0;
		ЭтаФорма.ТарифныйРазряд = Справочники.ТарифныеРазряды.ПустаяСсылка();
		ЭтаФорма.ВалютаТарифнойСтавки = Справочники.Валюты.ПустаяСсылка();
			
	КонецЕсли; 
	
	СотрудникиОрганизацийПереопределяемый.ОчиститьНеИспользуемыеРеквизитыДополнительно(ЭтаФорма);
	
КонецПроцедуры

// Процедура устанавливает заголовок гиперссылкни ОткрытьСправочникФизлиц
// в зависимости от варианта ввода физлица
Процедура УстановитьЗаголовокОткрытьСправочникФизлиц(ЭтаФорма)
	
	Если ЭтаФорма.ВыборФизлица Тогда
		ЭтаФорма.ЭлементыФормы.ОткрытьСправочникФизлиц.Заголовок = "Открыть справочник физических лиц для выбора...";
	Иначе
		ЭтаФорма.ЭлементыФормы.ОткрытьСправочникФизлиц.Заголовок = "Открыть справочник физических лиц...";
	КонецЕсли;	
	
КонецПроцедуры // УстановитьЗаголовокОткрытьСправочникФизлиц()

// Процедура устанавливает доступность реквизитов физлица в зависимости от варианта ввода нового сотрудника
Процедура УстановитьДоступностьРеквизитовФизлица(ЭтаФорма)
	
	ЭлементыФормы 	= ЭтаФорма.ЭлементыФормы;
	ВыборФизлица	= ЭтаФорма.ВыборФизлица;
	
	ЭлементыФормы.НаименованиеФизлица.Видимость = Не ВыборФизлица;
	ЭлементыФормы.Физлицо.Видимость = ВыборФизлица;
	ЭлементыФормы.ДатаРождения.ТолькоПросмотр = ВыборФизлица;
	ЭлементыФормы.Пол.ТолькоПросмотр = ВыборФизлица;
	ЭлементыФормы.СтраховойНомерПФР.ТолькоПросмотр = ВыборФизлица;
	ЭлементыФормы.КодИМНС.ТолькоПросмотр = ВыборФизлица;
	ЭлементыФормы.ИНН.ТолькоПросмотр = ВыборФизлица;
	
КонецПроцедуры // УстановитьДоступностьПоВИду()

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровПодбораПоСтрокеОрганизации() Экспорт

	СтруктураПараметров = Новый Структура("ГоловнаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()()

// Функция возвращает постфикс наименования, который соответствует виду договра
// Возвращаемое значение:
//   <Строка>   – постфикс наименования
//
Функция ПолучитьПостфиксПоВидуДоговора(ВидДоговора, ВидЗанятости)

	НовыйПостфикс = "";
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		Если ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
			НовыйПостфикс ="(вн. совм.)"; 
		ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда
			НовыйПостфикс = "(осн.)";
		Иначе
			НовыйПостфикс = "(совм.)";
		КонецЕсли; 
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
		НовыйПостфикс = "(дог. подр.)";
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
		НовыйПостфикс = "(дог. авт.)";
	КонецЕсли;
	
	Возврат НовыйПостфикс;

КонецФункции // ПолучитьПостфиксПоВидуДоговра()

// Функция проверяет наличие в выборке из запроса постфикса, переданного
// в качестве параметра и если есть такой, пытается подобрать другой постфикс
// Параметры
//  ПостфиксДляПроверки  – Строка – постфикс, который передаем для проверки
//                 <продолжение описания параметра>
//  ВыборкаИзЗапроса  – выборка из запроса по которой проверяем
//
// Возвращаемое значение:
//   Строка   – подобранный постфикс наименования
//
Функция ПроверитьИПодобратьПостфикс(ПостфиксДляПроверки, ВыборкаИзЗапроса)

	НомПопытки = 1;
	НовыйПостфикс = ПостфиксДляПроверки;
	Пока Истина Цикл
		
		Если НомПопытки > 9 Тогда
			//выходи из цикла, не удалось автоматически подобрать постфикс
			НовыйПостфикс = "";
			Прервать;
		КонецЕсли;
		
		ВыборкаИзЗапроса.Сбросить();
		Если ВыборкаИзЗапроса.НайтиСледующий(НовыйПостфикс,"Постфикс")Тогда
			НовыйПостфикс = Лев(ПостфиксДляПроверки,СтрДлина(ПостфиксДляПроверки)-1) + " " + Строка(НомПопытки) + ")";
			НомПопытки=НомПопытки + 1;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыйПостфикс;

КонецФункции // ПроверитьИПодобратьПостфикс()

// Процедура управляет видимостью гиперссылки открытия формы физлица при вводе нового сотрудника
// и заголовком гиперссылки
Процедура УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно(ЭтаФорма) Экспорт
	
	РедактироватьФизлицоОтдельно	= ЭтаФорма.ЭлементыФормы.РедактироватьФизлицоОтдельно;
	ФизлицоОбъектНаименование		= ЭтаФорма.ФизлицоОбъект.Наименование;
	
	Если ПустаяСтрока(ФизлицоОбъектНаименование) Тогда
		РедактироватьФизлицоОтдельно.Видимость = Ложь;
	Иначе
		РедактироватьФизлицоОтдельно.Видимость = Истина;	
		РедактироватьФизлицоОтдельно.Заголовок = "Более подробно о физическом лице " + ФизлицоОбъектНаименование + "...";
	КонецЕсли;	

КонецПроцедуры // УстановитьЗаголовокВидимостьРедактированияФизлица()

// Процедура изменяет заголовок гиперссылки ПерейтиКВводуГруппыДоступа
Процедура УстановитьЗаголовокВидимостьПерейтиКВводуГруппыДоступа(ЭтаФорма) Экспорт
	
	ПерейтиКВводуГруппыДоступа 		= ЭтаФорма.ЭлементыФормы.ПерейтиКВводуГруппыДоступа;
	ФизлицоОбъект					= ЭтаФорма.ФизлицоОбъект;
	ГруппаДоступаФизическогоЛица 	= ФизлицоОбъект.ГруппаДоступаФизическогоЛица;
	ФизлицоОбъектНаименование		= ФизлицоОбъект.Наименование;
	
	ПерейтиКВводуГруппыДоступа.Видимость = ЭтаФорма.мЕстьОграниченияПравДоступаНаУровнеЗаписей И Не ЭтаФорма.ВыборФизлица И Не ПустаяСтрока(ФизлицоОбъектНаименование);
	
	Если ПерейтиКВводуГруппыДоступа.Видимость Тогда
		Если ЗначениеЗаполнено(ГруппаДоступаФизическогоЛица) Тогда
			ПерейтиКВводуГруппыДоступа.Заголовок = "Группа доступа: " + ГруппаДоступаФизическогоЛица + " ...";
			ПерейтиКВводуГруппыДоступа.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
		Иначе
			ПерейтиКВводуГруппыДоступа.Заголовок = "Введите группу доступа для физического лица ...";	
			ПерейтиКВводуГруппыДоступа.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
		КонецЕсли;	
	КонецЕсли; 
	
КонецПроцедуры // УстановитьЗаголовокПерейтиКВводуГруппыДоступа()

// Функция проверяет наличие ограничения прав доступа на уровне записей по физлицам
// Возвращаемое значение:
//   Истина - если есть ограничение
//
Функция ЕстьОграничениеПравДоступаНаУровнеЗаписейПоФизлицам() Экспорт

	Если ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа.Ссылка
		|ИЗ
		|	РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа
		|ГДЕ
		|	НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.ФизическиеЛица)";
		Выборка = Запрос.Выполнить().Выбрать();
		Возврат Выборка.Следующий();
	Иначе
		Возврат Ложь;
	КонецЕсли;	

КонецФункции // ЕстьОграничениеПравДоступаНаУровнеЗаписейПоФизлицам()

// Процедура получает ФИО физлица
Процедура ПрочитатьФИО(ЭтаФорма) Экспорт
	
	мНаборЗаписейФИО	= ЭтаФорма.мНаборЗаписейФИО;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ЭтаФорма.Физлицо);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Период,
	|	ФИОФизЛицСрезПоследних.ФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	мНаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейФИО.Добавить(), Выборка);
		ФИОСрез  = мНаборЗаписейФИО[0];
		ЭтаФорма.Фамилия  = ФИОСрез.Фамилия;
		ЭтаФорма.Имя      = ФИОСрез.Имя;
		ЭтаФорма.Отчество = ФИОСрез.Отчество;
	Иначе
		ЭтаФорма.Фамилия  = "";
		ЭтаФорма.Имя      = "";
		ЭтаФорма.Отчество = "";
	КонецЕсли;

КонецПроцедуры // ПрочитатьФИО()
 
Процедура ОбработатьОтображениеОбособленногоПодразделения(ИзменятьДанные = Истина, ЭтаФорма) Экспорт
	
	ЭлементыФормы 				= ЭтаФорма.ЭлементыФормы;
	Организация 				= ЭтаФорма.Организация;
	ОбособленноеПодразделение	= ЭтаФорма.ОбособленноеПодразделение;
	
	Если ЭтаФорма.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		
		ПоказыватьПодразделения = СотрудникиОрганизацийПереопределяемый.ПоказыватьОбособленноеПодразделение(ЭтаФорма);
		
		ЭлементыФормы.ОбособленноеПодразделение.Доступность  = ПоказыватьПодразделения;
		ЭлементыФормы.ОбособленноеПодразделение.АвтоОтметкаНезаполненного = ПоказыватьПодразделения;
		ЭлементыФормы.ОбособленноеПодразделение.ОтметкаНезаполненного = ПоказыватьПодразделения и Не ЗначениеЗаполнено(ОбособленноеПодразделение);
		
		ЭлементыФормы.ОбособленноеПодразделение1.Доступность = ПоказыватьПодразделения;
		ЭлементыФормы.ОбособленноеПодразделение1.АвтоОтметкаНезаполненного = ПоказыватьПодразделения;
		ЭлементыФормы.ОбособленноеПодразделение1.ОтметкаНезаполненного = ПоказыватьПодразделения и Не ЗначениеЗаполнено(ОбособленноеПодразделение);
		
		Если ИзменятьДанные и Не ПоказыватьПодразделения Тогда
		//	ОбособленноеПодразделение = Справочники.Организации.ПустаяСсылка();
		ИначеЕсли ИзменятьДанные и ПоказыватьПодразделения и ОбособленноеПодразделение.Пустая() Тогда
			ЭтаФорма.ОбособленноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
			Если ЭтаФорма.мСписокОбособленныхПодразделений.НайтиПоЗначению(ЭтаФорма.ОбособленноеПодразделение) = НеОпределено Тогда
				ЭтаФорма.ОбособленноеПодразделение = Организация;
			КонецЕсли;
		ИначеЕсли ИзменятьДанные и ПоказыватьПодразделения и НЕ ЭтаФорма.ОбособленноеПодразделение.Пустая() Тогда
			Если ЭтаФорма.мСписокОбособленныхПодразделений.НайтиПоЗначению(ЭтаФорма.ОбособленноеПодразделение) = НеОпределено Тогда
				ЭтаФорма.ОбособленноеПодразделение = Организация;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура управляет отображением кнопок выбора из списка
Процедура ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма) Экспорт
	
	ЭлементыФормы 		= ЭтаФорма.ЭлементыФормы;
	ОрганизацияДляШР 	= ЭтаФорма.ОбособленноеПодразделение;
	
	ДатаАктуальности = ?(Не ЗначениеЗаполнено(ЭтаФорма.ДатаНачала), Неопределено, ЭтаФорма.ДатаНачала);
	
	СписокПодразделений = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации("ПодразделениеОрганизации", ОрганизацияДляШР, ЭтаФорма.Должность);
	КоличествоЗначений = СписокПодразделений.Количество();
	ЭлементыФормы.ПодразделениеОрганизации.КнопкаСпискаВыбора = КоличествоЗначений > 0;
	ДополнительныйЭУ = ЭлементыФормы.Найти("ПодразделениеОрганизации1");
	Если ДополнительныйЭУ <> Неопределено Тогда
		ДополнительныйЭУ.КнопкаСпискаВыбора = КоличествоЗначений > 0;
	КонецЕсли; 
	СписокДолжностей = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации("Должность", ОрганизацияДляШР, ЭтаФорма.ПодразделениеОрганизации);
	КоличествоЗначений = СписокДолжностей.Количество();
	ЭлементыФормы.Должность.КнопкаСпискаВыбора = КоличествоЗначений > 0;
	ДополнительныйЭУ = ЭлементыФормы.Найти("Должность1");
	Если ДополнительныйЭУ <> Неопределено Тогда
		ДополнительныйЭУ.КнопкаСпискаВыбора = КоличествоЗначений > 0;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию()

Процедура ФормаЭлементаОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента, ЭтаФорма, Параметр = Неопределено) Экспорт
	
	Ссылка = ЭтаФорма.Ссылка;
	
	Модифицированность = ЭтаФорма.Модифицированность;
	
	Если ИмяОбновляемогоЭлемента = "Гражданство" Тогда
		
		мНаборЗаписейГражданство 	= ЭтаФорма.мНаборЗаписейГражданство;
		
		БылоГражданство = ЭтаФорма.Гражданство;
		БылаМодифицированность = Модифицированность;
		Если мНаборЗаписейГражданство.Количество() > 0 Тогда
			Гражданство = "" + мНаборЗаписейГражданство[0].Страна + ?(мНаборЗаписейГражданство[0].НеИмеетПравоНаПенсию,", не ",", " ) + "имеет право на пенсию, медицинское и социальное страхование"+  ?(мНаборЗаписейГражданство[0].НеЯвляетсяНалоговымРезидентомРФ,", не ",", " ) + "является налоговым резидентом РФ";
			ЭтаФорма.Модифицированность = Истина;
			
		Иначе
			Гражданство = "Ввести данные о гражданстве";
		КонецЕсли;
		
		ЭтаФорма.Модифицированность = БылаМодифицированность или БылоГражданство <> Гражданство;
		ЭтаФорма.Гражданство = Гражданство;
		
	ИначеЕсли ИмяОбновляемогоЭлемента = "Инвалидность" Тогда
		
		Инвалидность = ЭтаФорма.Инвалидность;
		
		БылаИнвалидность = Инвалидность;
		БылаМодифицированность = Модифицированность;
		Если ЭтаФорма.мНаборЗаписейИнвалидность.Количество() > 0 Тогда
			ЗаписьИзНабора = ЭтаФорма.мНаборЗаписейИнвалидность[0];
			Если ЗаписьИзНабора.Инвалидность Тогда
				Инвалидность = 	"инвалид: " + ЗаписьИзНабора.ГруппаИнвалидности + " группы" 
				+ ", справка серия: " + ЗаписьИзНабора.СерияСправки + ", номер: " + ЗаписьИзНабора.НомерСправки 
				+ ", выдана: "  + Формат(ЗаписьИзНабора.ДатаВыдачи,"ДФ='дд ММММ гггг';ДП='...'") + " года "
				+ ", срок действия: " + Формат(ЗаписьИзНабора.СрокДействияСправки,"ДФ='дд ММММ гггг';ДП='...'") + " года ";
				
			Иначе
				Инвалидность = "Не является инвалидом";
				
			КонецЕсли;
		Иначе
			Инвалидность = "Ввести данные об инвалидности";
		КонецЕсли;
		
		ЭтаФорма.Инвалидность = Инвалидность;
		
		ЭтаФорма.Модифицированность = БылаМодифицированность или БылаИнвалидность <> Инвалидность;
		
	ИначеЕсли ИмяОбновляемогоЭлемента = "СтандартныеВычеты" Тогда	
		
		СтандартныеВычеты = ЭтаФорма.СтандартныеВычеты;
		
		Если Не ЭтаФорма.мДоступнаРольРасчетчика Тогда
			СтандартныеВычеты = "<данные не доступны>";
			Возврат;
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Ссылка.Организация);
		Запрос.УстановитьПараметр("парамФизлицо", Ссылка.Физлицо);
		Запрос.УстановитьПараметр("парамДатаСреза", ОбщегоНазначения.ПолучитьРабочуюДату());
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрименениеВычетов.Организация
		|ИЗ
		|	РегистрСведений.НДФЛПрименениеВычетов.СрезПоследних(&парамДатаСреза, Физлицо = &парамФизлицо) КАК ПрименениеВычетов
		|ГДЕ
		|	ПрименениеВычетов.Организация = &Организация";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтандартныеВычеты.КодВычетаЛичный.КодДляОтчетности2009 КАК КодВычетаЛичный,
			|	ВЫБОР
			|		КОГДА СтандартныеВычеты.КодВычетаЛичный = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЕстьЛичныйВычет
			|ИЗ
			|	РегистрСведений.НДФЛСтандартныеВычетыФизлиц.СрезПоследних(&парамДатаСреза, Физлицо = &парамФизлицо) КАК СтандартныеВычеты";
			Выборка = Запрос.Выполнить().Выбрать();
			СтандартныеВычеты = "Личный вычет" + ?(Выборка.Следующий() И Выборка.ЕстьЛичныйВычет, ": " + Выборка.КодВычетаЛичный, " не применяется") + ". ";
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код101)
			|						И НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей > 0
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ), ЛОЖЬ) КАК ЕстьВычетНаДетей,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код101)
			|					ТОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей
			|				ИНАЧЕ 0
			|			КОНЕЦ), ЛОЖЬ) КАК КоличествоДетей,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код102)
			|						И НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей > 0
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ), ЛОЖЬ) КАК ЕстьДвойнойВычетНаДетей,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код102)
			|					ТОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей
			|				ИНАЧЕ 0
			|			КОНЕЦ), ЛОЖЬ) КАК КоличествоДвойныхДетей,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код106)
			|						И НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей > 0
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ), ЛОЖЬ) КАК ЕстьВычетНаДетейИнвалидов,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код106)
			|					ТОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей
			|				ИНАЧЕ 0
			|			КОНЕЦ), ЛОЖЬ) КАК КоличествоДетейИнвалидов,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код107)
			|						И НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей > 0
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ), ЛОЖЬ) КАК ЕстьДвойнойВычетНаДетейИнвалидов,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код107)
			|					ТОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей
			|				ИНАЧЕ 0
			|			КОНЕЦ), ЛОЖЬ) КАК КоличествоДвойныхДетейИнвалидов,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код111)
			|						И НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей > 0
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ), ЛОЖЬ) КАК ЕстьВторойДвойнойВычетНаДетей,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код111)
			|					ТОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей
			|				ИНАЧЕ 0
			|			КОНЕЦ), ЛОЖЬ) КАК ВтороеКоличествоДвойныхДетей,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код113)
			|						И НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей > 0
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ), ЛОЖЬ) КАК ЕстьВторойДвойнойВычетНаДетейИнвалидов,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код113)
			|					ТОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей
			|				ИНАЧЕ 0
			|			КОНЕЦ), ЛОЖЬ) КАК ВтороеКоличествоДвойныхДетейИнвалидов
			|ИЗ
			|	РегистрСведений.НДФЛСтандартныеВычетыНаДетей.СрезПоследних(&парамДатаСреза, Физлицо = &парамФизлицо) КАК НДФЛСтандартныеВычетыНаДетейСрезПоследних";
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Если Выборка.ЕстьВычетНаДетей Или Выборка.ЕстьДвойнойВычетНаДетей Или Выборка.ЕстьВторойДвойнойВычетНаДетей Или Выборка.ЕстьВычетНаДетейИнвалидов Или Выборка.ЕстьВторойДвойнойВычетНаДетейИнвалидов Или Выборка.ЕстьДвойнойВычетНаДетейИнвалидов Тогда
				СтандартныеВычеты = СтандартныеВычеты + "Вычет на детей:";
				Если Выборка.ЕстьВычетНаДетей Тогда
					СтандартныеВычеты = СтандартныеВычеты + " с кодом 108 на " + Выборка.КоличествоДетей + ОбщегоНазначения.ФормаМножественногоЧисла(" ребенка,"," детей,"," детей,",Выборка.КоличествоДетей)
				КонецЕсли;
				Если Выборка.ЕстьДвойнойВычетНаДетей Тогда
					СтандартныеВычеты = СтандартныеВычеты + " с кодом 110 на " + Выборка.КоличествоДвойныхДетей + ОбщегоНазначения.ФормаМножественногоЧисла(" ребенка,"," детей,"," детей,",Выборка.КоличествоДвойныхДетей)
				КонецЕсли;
				Если Выборка.ЕстьВторойДвойнойВычетНаДетей Тогда
					СтандартныеВычеты = СтандартныеВычеты + " с кодом 111 на " + Выборка.ВтороеКоличествоДвойныхДетей + ОбщегоНазначения.ФормаМножественногоЧисла(" ребенка,"," детей,"," детей,",Выборка.ВтороеКоличествоДвойныхДетей)
				КонецЕсли;
				Если Выборка.ЕстьВычетНаДетейИнвалидов Тогда
					СтандартныеВычеты = СтандартныеВычеты + " с кодом 109 на " + Выборка.КоличествоДетейИнвалидов + ОбщегоНазначения.ФормаМножественногоЧисла(" ребенка,"," детей,"," детей,",Выборка.КоличествоДетейИнвалидов)
				КонецЕсли;
				Если Выборка.ЕстьДвойнойВычетНаДетейИнвалидов Тогда
					СтандартныеВычеты = СтандартныеВычеты + " с кодом 112 на " + Выборка.КоличествоДвойныхДетейИнвалидов + ОбщегоНазначения.ФормаМножественногоЧисла(" ребенка,"," детей,"," детей,",Выборка.КоличествоДвойныхДетейИнвалидов)
				КонецЕсли;
				Если Выборка.ЕстьВторойДвойнойВычетНаДетейИнвалидов Тогда
					СтандартныеВычеты = СтандартныеВычеты + " с кодом 113 на " + Выборка.ВтороеКоличествоДвойныхДетейИнвалидов + ОбщегоНазначения.ФормаМножественногоЧисла(" ребенка,"," детей,"," детей,",Выборка.ВтороеКоличествоДвойныхДетейИнвалидов)
				КонецЕсли;
				СтандартныеВычеты = Лев(СтандартныеВычеты,СтрДлина(СтандартныеВычеты) - 1) + ". ";
			Иначе
				СтандартныеВычеты = СтандартныеВычеты + "Вычеты на детей не применяются.";
			КонецЕсли;
		Иначе
			СтандартныеВычеты = "Не применяются";
		КонецЕсли;
		
		ЭтаФорма.СтандартныеВычеты = СтандартныеВычеты;
		
		ЭтаФорма.Модифицированность = Истина;
		
	ИначеЕсли ИмяОбновляемогоЭлемента = "ИмущественныеВычеты" Тогда
		
		ИмущественныеВычеты	= ЭтаФорма.ИмущественныеВычеты;
		
		Если Не ЭтаФорма.мДоступнаРольРасчетчика Тогда
			ИмущественныеВычеты = "<данные не доступны>";
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НДФЛИмущественныеВычетыФизлицОбороты.КодВычетаИмущественный КАК КодВычета,
		|	НДФЛИмущественныеВычетыФизлицОбороты.РазмерПриход КАК РазмерВычета
		|ИЗ
		|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.Обороты(
		|		,
		|		,
		|		,
		|		Организация = &парамОрганизация
		|			И Физлицо = &парамФизлицо
		|			И Год = &пармаГод) КАК НДФЛИмущественныеВычетыФизлицОбороты";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("парамОрганизация", Ссылка.Организация);
		Запрос.УстановитьПараметр("парамФизлицо", Ссылка.Физлицо);
		Запрос.УстановитьПараметр("пармаГод", Год(ТекущаяДата()));
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекстИмущественныйВычет = "";
		Пока Выборка.Следующий() Цикл
			ТекстИмущественныйВычет = ТекстИмущественныйВычет
			+ "Вычет: " + Выборка.КодВычета + ", размер: " + Выборка.РазмерВычета + ". ";
		КонецЦикла;	
		
		Если ПустаяСтрока(ТекстИмущественныйВычет) Тогда
			ИмущественныеВычеты = Формат(Год(ТекущаяДата()), "ЧГ=") + " год: Не применяются";
		Иначе
			ИмущественныеВычеты = Формат(Год(ТекущаяДата()), "ЧГ=") + " год: " + ТекстИмущественныйВычет;
		КонецЕсли;
		
		ЭтаФорма.ИмущественныеВычеты = ИмущественныеВычеты;
		
		ЭтаФорма.Модифицированность = Истина;
		
	ИначеЕсли ИмяОбновляемогоЭлемента = "ФИО" Тогда
		
		// получили оповещение об изменении ФИО
		Если ЗначениеЗаполнено(Параметр) И Параметр.Свойство("ПолучательОповещения") И Параметр.ПолучательОповещения = ЭтаФорма Тогда
			Этаформа.Модифицированность = Истина;
			мНаборЗаписейФИО = ЭтаФорма.мНаборЗаписейФИО;
			Если мНаборЗаписейФИО.Количество() Тогда
				ФизлицоОбъект = ЭтаФорма.ФизлицоОбъект;
				Физлицо = ЭтаФорма.Физлицо;
				НаименованиеФизлица = СокрЛП(мНаборЗаписейФИО[0].Фамилия) + " " + СокрЛП(мНаборЗаписейФИО[0].Имя) + " " + СокрЛП(мНаборЗаписейФИО[0].Отчество);
				Если Физлицо.Наименование <> НаименованиеФизлица Тогда
					ТекстВопроса = "Вы сменили ФИО физического лица. Изменить наименование на " + НаименованиеФизлица + "?";
					Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
					Если Ответ <> КодВозвратаДиалога.Да Тогда
						Возврат;
					КонецЕсли;
					ФизлицоОбъект.Наименование 	= НаименованиеФизлица;
					Этаформа.Наименование 		= НаименованиеФизлица;
					ЭтаФорма.ЭлементыФормы.РедактироватьФизлицоОтдельно1.Заголовок 	= "Более подробно о физическом лице " + НаименованиеФизлица + "...";
					ЭтаФорма.ЭлементыФормы.РедактироватьФизлицоОтдельно.Заголовок 	= "Более подробно о физическом лице " + НаименованиеФизлица + "...";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура подбирает постфикс наименования перед записью нового сотрудника
Процедура ПодобратьПостфиксНаименования(ЭтаФорма) Экспорт
	
	Ссылка = ЭтаФорма.Ссылка;
	
	//запросом выбираем выбираем Актуальных не уволенных сотрудников
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сотрудники.ПостфиксНаименования КАК Постфикс
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		,
	|		Организация = &парамОрганизация
	|			И Сотрудник.Физлицо = &парамФизлицо) КАК Работники
	|		ПО Сотрудники.Ссылка = Работники.Сотрудник
	|			И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|ГДЕ
	|	Сотрудники.Физлицо = &парамФизлицо
	|	И Сотрудники.Ссылка <> &Ссылка
	|	И Сотрудники.Организация = &парамОрганизация
	|	И Работники.ПричинаИзмененияСостояния ЕСТЬ NULL
	|	И Сотрудники.Актуальность";
	
	Запрос.УстановитьПараметр("парамФизлицо",     Ссылка.Физлицо);
	Запрос.УстановитьПараметр("парамОрганизация", Ссылка.Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = ТекстЗапроса;
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаИзЗапроса.Количество()>0 Тогда
		//есть сотрудники по этому физлицу, необходимо подобрать постфикс
		// проверим, есть сотрудник с пустым постфиксом
		Если ВыборкаИзЗапроса.НайтиСледующий(СОКРЛП(ЭтаФорма.ПостфиксНаименования),"Постфикс")Тогда
			//есть сотрудники с таким постфиксом, значит необходимо назначить другой постфикс этому сотруднику
			ПостфиксНаименования = ПроверитьИПодобратьПостфикс(ПолучитьПостфиксПоВидуДоговора(ЭтаФорма.ВидДоговора, ЭтаФорма.ВидЗанятости), ВыборкаИзЗапроса);
			Если Не ПустаяСтрока(ПостфиксНаименования) Тогда
				ЭтаФорма.Наименование = СОКРЛП(ЭтаФорма.ФизлицоОбъект.Наименование) + " " + ПостфиксНаименования;
			КонецЕсли;
		ИначеЕсли Не ПустаяСтрока(ПостфиксНаименования) Тогда	
			//проверим, может у сотрудника остался постфикс, который не соответствует виду договора
			ПостфиксПоВидуДоговра = ПолучитьПостфиксПоВидуДоговора(ЭтаФорма.ВидДоговора, ЭтаФорма.ВидЗанятости);
			Если Лев(ПостфиксНаименования,СтрДлина(ПостфиксПоВидуДоговра)-1) <> Лев(ПостфиксПоВидуДоговра,СтрДлина(ПостфиксПоВидуДоговра)-1)Тогда
				//скорее всего текущий постфикс наименования не соответствует виду договора
				ПостфиксНаименования = ПроверитьИПодобратьПостфикс(ПостфиксПоВидуДоговра, ВыборкаИзЗапроса);
				Если Не ПустаяСтрока(ПостфиксНаименования) Тогда
					ЭтаФорма.Наименование = СОКРЛП(ЭтаФорма.ФизлицоОбъект.Наименование) + " " + ПостфиксНаименования;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодобратьПостфиксНаименования()

Процедура ОбновитьДанныеНаСтраницах(ЭтаФорма) Экспорт
	
	ПанельДанныхСотрудник = ЭтаФорма.ЭлементыФормы.ПанельДанныхСотрудник;
	
    Если ПанельДанныхСотрудник.ТекущаяСтраница = ПанельДанныхСотрудник.Страницы.НачисленияУдержания Тогда
		ПолучитьСписокПлановыхНачислений(ЭтаФорма);
		ПолучитьСписокПлановыхУдержаний(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры
	
// Процедура обрабатывает изменения ЭУ ВыборФизлица
Процедура ОбработатьВыборФизлицаПриИзменении(ЭтаФорма) Экспорт
	
	ВыборФизлица	= ЭтаФорма.ВыборФизлица;
	ФизЛицо 		= ЭтаФорма.ФизЛицо;
	ФизлицоОбъект 	= ЭтаФорма.ФизлицоОбъект;
	
	//сбрасываем ссылку на физлицо, если выбрали - создавать новое физлицо
	Если Не ВыборФизлица И НЕ Физлицо.Пустая() Тогда
		ЭтаФорма.Физлицо 		= Справочники.ФизическиеЛица.ПустаяСсылка();
		ЭтаФорма.ФизлицоОбъект 	= Справочники.ФизическиеЛица.СоздатьЭлемент();
	ИначеЕсли ВыборФизлица И Физлицо.Пустая() Тогда
		ЭтаФорма.ФизлицоОбъект.Наименование = "";
	КонецЕсли;
	
	УстановитьДоступностьРеквизитовФизлица(ЭтаФорма);
	ЭтаФорма.Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ЭтаФорма.ФизлицоОбъект, ЭтаФорма.ПостфиксНаименования);
	УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно(ЭтаФорма);
	УстановитьЗаголовокВидимостьПерейтиКВводуГруппыДоступа(ЭтаФорма);
	УстановитьЗаголовокОткрытьСправочникФизлиц(ЭтаФорма);
	ЭтаФорма.мНаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
	ПрочитатьФИО(ЭтаФорма);
	ПроверитьНовыеЗначенияКодовФизлица(ЭтаФорма);

КонецПроцедуры // ОбработатьВыборФизлицаПриИзменении()	
	
// Процедура устанавливает видимость ЭУ в зависимости от использования тарифного разряда
Процедура УстановитьВидимостьЭУПоИспользованиюТарифногоРазряда(ЭтаФорма, ВидРасчета) Экспорт
	
	ЭлементыФормы = ЭтаФорма.ЭлементыФормы;
	
	Если ЭтаФорма.мДоступнаРольРасчетчика или ЭтаФорма.мДоступнаРольКадровика Тогда
		
		ИспользоватьТарифныйРазряд = ВидРасчета.ТребуетВводаТарифногоРазряда;
		ЭлементыФормы.НадписьТарифнаяСтавка.Заголовок = ?(ИспользоватьТарифныйРазряд,"Разряд:","Тариф \ Оклад:");
		ЭлементыФормы.ТарифныйРазряд.Видимость = ИспользоватьТарифныйРазряд;
		ЭлементыФормы.ТарифнаяСтавка.Видимость = Не ИспользоватьТарифныйРазряд;
		
		ЭлементыФормы.НадписьТарифнаяСтавка1.Заголовок = ?(ИспользоватьТарифныйРазряд,"Разряд:","Тариф \ Оклад:");
		ЭлементыФормы.ТарифныйРазряд1.Видимость = ИспользоватьТарифныйРазряд;
		ЭлементыФормы.ТарифнаяСтавка1.Видимость = Не ИспользоватьТарифныйРазряд;
		
		Если ИспользоватьТарифныйРазряд Тогда
			ЭлементыФормы.НадписьВалютаТарифнойСтавки.Видимость = Ложь;
			ЭлементыФормы.ВалютаТарифнойСтавки.Видимость 		= Ложь;
			
			ЭлементыФормы.НадписьВалютаТарифнойСтавки1.Видимость = Ложь;
			ЭлементыФормы.ВалютаТарифнойСтавки1.Видимость 		= Ложь;
		Иначе
			РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(ЭтаФорма.мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ЭтаФорма.Организация);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьЭУПоИспользованиюТарифногоРазряда()

Процедура ПроверитьНовыеЗначенияКодовФизлица(ЭтаФорма) Экспорт
	
	ЭлементыФормы 	= ЭтаФорма.ЭлементыФормы;
	ФизлицоОбъект 	= ЭтаФорма.ФизлицоОбъект;
	
	// изменилось физлицо, обработаем отображение полей ввода ИНН и СтраховойНомерПФР
	РаботаСДиалогами.ПроверитьИННОформитьПолеВвода(ФизлицоОбъект.ИНН, ЭлементыФормы.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо);
	ЭлементыФормы.ИНН1.ЦветТекстаПоля 	= ЭлементыФормы.ИНН.ЦветТекстаПоля;
	ЭлементыФормы.ИНН1.Подсказка 		= ЭлементыФормы.ИНН.Подсказка;
	
	РаботаСДиалогамиЗК.ПроверитьСтраховойНомерПФРФизлицаОформитьПолеВвода(ФизлицоОбъект.СтраховойНомерПФР, ЭлементыФормы.СтраховойНомерПФР);
	ЭлементыФормы.СтраховойНомерПФР1.ЦветТекстаПоля 	= ЭлементыФормы.СтраховойНомерПФР.ЦветТекстаПоля;
	ЭлементыФормы.СтраховойНомерПФР1.Подсказка 			= ЭлементыФормы.СтраховойНомерПФР.Подсказка;
		
КонецПроцедуры

Процедура ЗаполнитьНаборыПоФизлицу(ЭтаФорма) Экспорт
	
	ЭтаФорма.мНаборЗаписейГражданство.Очистить();
	ЭтаФорма.мНаборЗаписейГражданствоПриОткрытии.Очистить();
	ЭтаФорма.мНаборЗаписейИнвалидность.Очистить();
	ЭтаФорма.мНаборЗаписейИнвалидностьПриОткрытии.Очистить();
	
	Если ЭтаФорма.Физлицо.Пустая() Тогда
		Возврат;	
	КонецЕсли;	
	
	Параметр = ЭтаФорма.Физлицо;
	
	ОбщегоНазначения.ПолучитьСвязанныеДанныеФизлица(Параметр, ЭтаФорма.мНаборЗаписейГражданство);
	Если ЭтаФорма.мНаборЗаписейГражданство.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма.мНаборЗаписейГражданствоПриОткрытии.Добавить(), ЭтаФорма.мНаборЗаписейГражданство[0]);
	КонецЕсли;
	ОбщегоНазначения.ПолучитьСвязанныеДанныеФизлица(Параметр, ЭтаФорма.мНаборЗаписейИнвалидность);
	Если ЭтаФорма.мНаборЗаписейИнвалидность.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма.мНаборЗаписейИнвалидностьПриОткрытии.Добавить(), ЭтаФорма.мНаборЗаписейИнвалидность[0]);
	КонецЕсли;
	
	СотрудникиОрганизацийПереопределяемый.ЗаполнитьДополнительныеНаборыПоФизлицу(ЭтаФорма);
	
КонецПроцедуры


// Процедура обрабатывает изменение ЭУ физлицо
Процедура ФормаЭлементаОбработатьИзменениеФизлица(ЭтаФорма)
	
	Физлицо = ЭтаФорма.ФизЛицо;
	
	Если Физлицо.Пустая() Тогда
		ЭтаФорма.Физлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		ЭтаФорма.ФизлицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
	Иначе
		ЭтаФорма.ФизлицоОбъект = Физлицо.ПолучитьОбъект();
	КонецЕсли;
	
	ЭтаФорма.Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ЭтаФорма.ФизлицоОбъект, ЭтаФорма.ПостфиксНаименования);
	УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно(ЭтаФорма);
	ПрочитатьФИО(ЭтаФорма);
	ЗаполнитьНаборыПоФизлицу(ЭтаФорма);
	ПроверитьНовыеЗначенияКодовФизлица(ЭтаФорма);
	
КонецПроцедуры // ОбработатьИзменениеФизлица()

Процедура ФормаЭлементаИННПриИзменении(Элемент, ЭтаФорма) Экспорт   
	
	ЭлементыФормы 	= ЭтаФорма.ЭлементыФормы;
	ФизлицоОбъект 	= ЭтаФорма.ФизлицоОбъект;
	
	РаботаСДиалогами.ПроверитьИННОформитьПолеВвода(ЭтаФорма.ФизлицоОбъект.ИНН, ЭлементыФормы.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо);
	ЭлементыФормы.ИНН1.ЦветТекстаПоля 	= ЭлементыФормы.ИНН.ЦветТекстаПоля;
	ЭлементыФормы.ИНН1.Подсказка 		= ЭлементыФормы.ИНН.Подсказка;
	Если НЕ ЗначениеЗаполнено(ФизлицоОбъект.КодИМНС) Тогда
		ЭтаФорма.ФизлицоОбъект.КодИМНС = Лев(ФизлицоОбъект.ИНН,4);
	КонецЕсли;

КонецПроцедуры

Процедура ФормаЭлементаСтраховойНомерПФРПриИзменении(Элемент, ЭтаФорма) Экспорт   
	
	ЭлементыФормы 	= ЭтаФорма.ЭлементыФормы;

	РаботаСДиалогамиЗК.ПроверитьСтраховойНомерПФРФизлицаОформитьПолеВвода(ЭтаФорма.ФизлицоОбъект.СтраховойНомерПФР, ЭлементыФормы.СтраховойНомерПФР);
	ЭлементыФормы.СтраховойНомерПФР1.ЦветТекстаПоля 	= ЭлементыФормы.СтраховойНомерПФР.ЦветТекстаПоля;
	ЭлементыФормы.СтраховойНомерПФР1.Подсказка 			= ЭлементыФормы.СтраховойНомерПФР.Подсказка;
	
КонецПроцедуры

// Процедура обрабатывает отображение обособленного подразделения
// и провереят ПодразделениеОрганизации в трудовом договоре
Процедура ОбработкаРеквизитовТрудовогоДоговора(ЭтаФорма) Экспорт
	
	ОбособленноеПодразделение 	= ЭтаФорма.ОбособленноеПодразделение;
	Организация 				= ЭтаФорма.Организация;
	ПодразделениеОрганизации 	= ЭтаФорма.ПодразделениеОрганизации;
	
	Если Не ЗначениеЗаполнено(ОбособленноеПодразделение)
		или Не Организация = ОбщегоНазначения.ГоловнаяОрганизация(ОбособленноеПодразделение) Тогда
		ЭтаФорма.ОбособленноеПодразделение = Организация;
	КонецЕсли;
	
	Если Не ПодразделениеОрганизации.Пустая() 
		и Не ПодразделениеОрганизации.Владелец = ОбособленноеПодразделение Тогда
		//выбранное подразделение организации не соответствует организации
		ЭтаФорма.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Предупреждение("Выбранное подразделение не соответствует " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации") + "!");
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет какой вид занятости установить по умолчанию
Процедура ПроверитьИУстановитьВидЗанятости(НеЗадаватьВопрос = Истина, ЭтаФорма) Экспорт

	ВидЗанятости	= ЭтаФорма.ВидЗанятости;
	Организация 	= ЭтаФорма.Организация;
	Физлицо		 	= ЭтаФорма.Физлицо;
	ДатаНачала	 	= ЭтаФорма.ДатаНачала;
	Ссылка		 	= ЭтаФорма.Ссылка;
	
	НадоПроверятьВидЗанятости = СотрудникиОрганизацийПереопределяемый.ПроверитьНеобходимостьУстановкиВидаЗанятости(ЭтаФорма);
	
	Если НадоПроверятьВидЗанятости Тогда
		//проверим, есть актуальный не уволенный сотрудник в этой организации с видом занятости
		// основное место работы или совместитель
		// и если есть установим вид занятости - Внутреннее совместительство
		
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сотрудники.ВидЗанятости,
		|	Сотрудники.Физлицо.Наименование КАК ФизлицоНаименование
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&парамДатаСреза,
		|				Организация = &парамОрганизация
		|					И Сотрудник.Физлицо = &парамФизлицо) КАК Работники
		|		ПО Сотрудники.Ссылка = Работники.Сотрудник
		|			И (ВЫБОР
		|				КОГДА Работники.ПериодЗавершения <= &парамДатаСреза
		|						И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА Работники.ПричинаИзмененияСостоянияЗавершения
		|				ИНАЧЕ Работники.ПричинаИзмененияСостояния
		|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|ГДЕ
		|	Сотрудники.Физлицо = &парамФизлицо
		|	И Сотрудники.Организация = &парамОрганизация
		|	И Работники.ПричинаИзмененияСостояния ЕСТЬ NULL 
		|	И Сотрудники.Актуальность
		|	И Сотрудники.Ссылка <> &парамТекущийСотрудник
		|	И Сотрудники.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство))";
		
		ДатаСреза = ?(ЗначениеЗаполнено(ДатаНачала), ДатаНачала, ОбщегоНазначения.ПолучитьРабочуюДату());
		
		Запрос.УстановитьПараметр("парамФизлицо",     Физлицо);
		Запрос.УстановитьПараметр("парамДатаСреза",   ДатаСреза);
		Запрос.УстановитьПараметр("парамТекущийСотрудник", Ссылка);
		Запрос.УстановитьПараметр("парамОрганизация", Организация);
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если НеЗадаватьВопрос Тогда
				ЭтаФорма.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;
			Иначе 
				// спросим у пользователя, заменить вид занятости или нет
				ТекстВопроса = "В " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации") + " уже есть сотрудник """ + Выборка.ФизлицоНаименование + """ с видом занятости """ + Выборка.ВидЗанятости + """,
				|поменять вид занятости на ""Внутреннее совместительство""?";
				Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 20) = КодВозвратаДиалога.Да Тогда
					ЭтаФорма.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;	
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры // ПроверитьИУстановитьВидЗанятости()

Процедура ПодразделениеДолжностьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка, ТипЭлемента, ЭтаФорма) Экспорт
	
	Организация 				= ЭтаФорма.ОбособленноеПодразделение;
	ПодразделениеОрганизации 	= ЭтаФорма.ПодразделениеОрганизации;
	Должность 					= ЭтаФорма.Должность;
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации(ТипЭлемента, Организация, ?(ТипЭлемента = "Должность", ПодразделениеОрганизации, Должность));
	
	Элемент.ВысотаСпискаВыбора = Мин(10, СписокВыбора.Количество());
	ЭлементСписка = ЭтаФорма.ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено  и Элемент.Значение <> ЭлементСписка.Значение Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма);
		СотрудникиОрганизацийПереопределяемый.ЗаполнитьРеквизитыПоШтатномуРасписанию(ЭтаФорма, ЭтаФорма.ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры
 	
Процедура ПроверитьИПодобратьОрганизациюПередОткрытиемФормы(ЭтаФорма) Экспорт
	
	Организация = ЭтаФорма.Организация;

	Если Не ЗначениеЗаполнено(Организация)  Тогда
		ОбособленноеПодразделение = РаботаСДиалогами.ПолучитьОрганизацию();
		ЭтаФорма.ОбособленноеПодразделение = ОбособленноеПодразделение;
		ЭтаФорма.Организация = ОбщегоНазначения.ГоловнаяОрганизация(ОбособленноеПодразделение);
	Иначе //организацию передали в форму
		// проверим является ли она головной, заполним обособленное подразделение
		ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
		Если Организация = ГоловнаяОрганизация Тогда
			// подберем обособленное подразделение
			ОрганизацияПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
			Если Не ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
				// не задана организация по умолчанию
				ЭтаФорма.ОбособленноеПодразделение = Организация;
			ИначеЕсли Организация = ОбщегоНазначения.ГоловнаяОрганизация(ОрганизацияПоУмолчанию) Тогда
				//организация по умолчанию или головная или является обособленным подразделением той организации, что передана в форму
				ЭтаФорма.ОбособленноеПодразделение = ОрганизацияПоУмолчанию;
			Иначе
				//организация по умолчанию не соответствует организации переданной в форму
				ЭтаФорма.ОбособленноеПодразделение = Организация;
			КонецЕсли;	
		Иначе // передали обособленное подразделение
			ЭтаФорма.ОбособленноеПодразделение = Организация;
			ЭтаФорма.Организация = ГоловнаяОрганизация;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ ЭЛЕМЕНТА

Процедура ФормаЭлементаПриОткрытии(ЭтаФорма) Экспорт
	
	ЭлементыФормы = ЭтаФорма.ЭлементыФормы;
	
	// запомним значения в переменных
	ЭтаФорма.мДатаДоговора = ЭтаФорма.ДатаДоговора; //для правильной автонумерации номера трудового договора
	
	// Установим видимость реквизитов в зависимости от уч.политики 
	ЭтаФорма.мМассивЭУ = Новый Массив();
	
	Если глЗначениеПеременной("глЕстьВалютныеПоказателиОрганизаций") Тогда
		ЭтаФорма.мМассивЭУ.Добавить(ЭлементыФормы.СписокДоговоровГПХ.Колонки.Валюта);
		Для Сч = 1 По 6 Цикл
			ЭтаФорма.мМассивЭУ.Добавить(ЭлементыФормы.ПлановыеНачисления.Колонки["Валюта"+Сч]);
			ЭтаФорма.мМассивЭУ.Добавить(ЭлементыФормы.ПлановыеНачисления.Колонки["Валюта"+Сч+"Завершения"]);
			ЭтаФорма.мМассивЭУ.Добавить(ЭлементыФормы.ПлановыеУдержания.Колонки["Валюта"+Сч]);
		КонецЦикла;
	Иначе
		Для Сч = 1 По 6 Цикл
			ЭлементыФормы.ПлановыеНачисления.Колонки["Валюта"+Сч].Видимость = Ложь;
			ЭлементыФормы.ПлановыеНачисления.Колонки["Валюта"+Сч+"Завершения"].Видимость = Ложь;
			ЭлементыФормы.ПлановыеУдержания.Колонки["Валюта"+Сч].Видимость = Ложь;
		КонецЦикла;
	КонецЕсли;
	ЭтаФорма.мМассивЭУ.Добавить(ЭлементыФормы.НадписьВалютаТарифнойСтавки);
	ЭтаФорма.мМассивЭУ.Добавить(ЭлементыФормы.ВалютаТарифнойСтавки);
	ЭтаФорма.мМассивЭУ.Добавить(ЭлементыФормы.НадписьВалютаТарифнойСтавки1);
	ЭтаФорма.мМассивЭУ.Добавить(ЭлементыФормы.ВалютаТарифнойСтавки1);
	
	Если ЭтаФорма.мЭтоНовый Тогда
		
		УстановитьДоступностьРеквизитовФизлица(ЭтаФорма);
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаНовыйСотрудник;
		ЭлементыФормы.РедактироватьФизлицоОтдельно.Видимость = Ложь;
		ЭлементыФормы.ПерейтиКВводуТрудовогоДоговора.Видимость = ЭтаФорма.мДоступнаРольРасчетчика или ЭтаФорма.мДоступнаРольКадровика;
		УстановитьЗаголовокОткрытьСправочникФизлиц(ЭтаФорма);
		
		//получим очередной код элемента
		ЭтаФорма.Код = ЭтаФорма.ЭтотОбъект.ПолучитьОчереднойТабельныйНомер();
				
	Иначе
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаСотрудник;
		ЭтаФорма.мЕстьНачисления = ЕстьНачисленияИлиПриемНаРаботу(ЭтаФорма.ВидДоговора, ЭтаФорма.Ссылка);
		
		мЕстьНачисления	= ЭтаФорма.мЕстьНачисления;
		
		ЭлементыФормы.Организация1.ТолькоПросмотр  = мЕстьНачисления;
		ЭлементыФормы.ВидДоговора1.ТолькоПросмотр  = мЕстьНачисления;
		ЭлементыФормы.ВидЗанятости1.ТолькоПросмотр = мЕстьНачисления;
		
		СформироватьЗаголовокПерсональныхНадбавок(ЭтаФорма);
		ЭлементыФормы.РедактироватьФизлицоОтдельно1.Заголовок = "Более подробно о физическом лице " + ЭтаФорма.ФизлицоОбъект.Наименование + "...";
		
		СотрудникиОрганизацийПереопределяемый.СформироватьПодменюВвестиДокумент(ЭтаФорма.мМассивКнопокПодменю, ЭтаФорма.мСтруктураСоответствияДействий, ЭтаФорма.ЭтотОбъект);
		
		РаботаСДиалогами.ПроверитьИННОформитьПолеВвода(ЭтаФорма.ФизлицоОбъект.ИНН, ЭлементыФормы.ИНН1, Перечисления.ЮрФизЛицо.ФизЛицо);
		РаботаСДиалогамиЗК.ПроверитьСтраховойНомерПФРФизлицаОформитьПолеВвода(ЭтаФорма.ФизлицоОбъект.СтраховойНомерПФР, ЭлементыФормы.СтраховойНомерПФР1);

	КонецЕсли;
	
	Если НЕ (ЭтаФорма.мДоступнаРольРасчетчика или ЭтаФорма.мДоступнаРольКадровика) Тогда
		Кнопки = ЭлементыФормы.ДействияФормы.Кнопки;
		Кнопки.Удалить(Кнопки.ПодменюПерейти);
	КонецЕсли;
	
	УстановитьВидимостьСправкиФормы(Ложь, ЭтаФорма);

	СформироватьСписокОбособленныхПодразделений(ЭтаФорма);
	ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма);
	
	ОбработатьОтображениеОбособленногоПодразделения(Ложь, ЭтаФорма);
	
	УстановитьВидимостьЭУПоИспользованиюТарифногоРазряда(ЭтаФорма, ЭтаФорма.ВидРасчета);
	
КонецПроцедуры

Процедура ФормаЭлементаПриЗакрытии(ЭтаФорма) Экспорт
	
	СохранитьЗначение("Справочник.СотрудникиОрганизаций.ОтображатьСправкуФормы", ЭтаФорма.ОтображатьСправкуФормы);
	
КонецПроцедуры

Процедура ФормаЭлементаОбработкаВыбора(ЗначениеВыбора, Источник, ЭтаФорма) Экспорт
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ГруппыДоступаФизическихЛиц") Тогда
		ЭтаФорма.ФизлицоОбъект.ГруппаДоступаФизическогоЛица = ЗначениеВыбора;
		УстановитьЗаголовокВидимостьПерейтиКВводуГруппыДоступа(ЭтаФорма);
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ФизическиеЛица") И ЭтаФорма.ВыборФизлица Тогда
		Если ЭтаФорма.Физлицо <> ЗначениеВыбора Тогда
			ЭтаФорма.Физлицо = ЗначениеВыбора;
			ФормаЭлементаОбработатьИзменениеФизлица(ЭтаФорма);
			ПроверитьИУстановитьВидЗанятости(,ЭтаФорма);
			ПодобратьПостфиксНаименования(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаЭлементаОбработкаЗаписиНовогоОбъекта(Объект, Источник, ЭтаФорма) Экспорт
	
	ЭлементыФормы 	= ЭтаФорма.ЭлементыФормы;
	
	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.СвойстваИЗначения);
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаписиНовогоОбъекта()

Процедура ФормаЭлементаПередЗаписью(Отказ, ЭтаФорма) Экспорт
	
	Отказ = Ложь;
	
	ОчиститьНеИспользуемыеРеквизиты(ЭтаФорма);
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	СписокНеЗаполненныхРеквизитов = Новый СписокЗначений;
	ОбнаруженыОшибки = Ложь;
	
	СрокаСообщенияОбОшибке = "";
	Если ЭтаФорма.ЭтоНовый()Тогда // для нового сотрудника проверим возможность записи
		
		ЭтаФорма.Актуальность  = Истина; //установим актуальность для нового сотрудника
		
		//если создаем новое физлицо, проверим заполнение реквизитов
		Если Не ЭтаФорма.ВыборФизлица Тогда
			//необходимо создать новое физлицо, проверим реквизиты
			Если ПустаяСтрока(ЭтаФорма.ФизлицоОбъект.Наименование) Тогда
				СписокНеЗаполненныхРеквизитов.Добавить(" Имя");
				ОбнаруженыОшибки = Истина;	
			ИначеЕсли ЭтаФорма.мЕстьОграниченияПравДоступаНаУровнеЗаписей И Не ЗначениеЗаполнено(ЭтаФорма.ФизлицоОбъект.ГруппаДоступаФизическогоЛица) Тогда
				//имеет смысл сообщать об ошибке если заполнены данные по физлицу
				СрокаСообщенияОбОшибке = "Не задана группа доступа для физического лица!";
				ОбнаруженыОшибки = Истина;	
			КонецЕсли; 	
		Иначе
			Если Не ЗначениеЗаполнено(ЭтаФорма.Физлицо) Тогда
				СрокаСообщенияОбОшибке = "Не выбрано физическое лицо!";
				ОбнаруженыОшибки = Истина;	
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
	
	ВидДоговора 			= ЭтаФорма.ВидДоговора;
	ВидЗанятости 			= ЭтаФорма.ВидЗанятости;
	
	//проверим заполнение организации, вида договра, вида занятости
	Если Не ЗначениеЗаполнено(ВидДоговора) Тогда
		СписокНеЗаполненныхРеквизитов.Добавить(" Вид договора");
		ОбнаруженыОшибки = Истина;
	КонецЕсли;
	
	СотрудникиОрганизацийПереопределяемый.ДополнитьСписокНеЗаполненныхРеквизитов(ЭтаФорма, СписокНеЗаполненныхРеквизитов, ОбнаруженыОшибки);
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор и Не ЗначениеЗаполнено(ВидЗанятости) Тогда
		СписокНеЗаполненныхРеквизитов.Добавить(" Вид занятости");
		ОбнаруженыОшибки = Истина;
	КонецЕсли;
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор и Не ЗначениеЗаполнено(ЭтаФорма.ВалютаТарифнойСтавки) Тогда
		Если ЭтаФорма.ЭлементыФормы.ВалютаТарифнойСтавки.Видимость Тогда
			СписокНеЗаполненныхРеквизитов.Добавить(" Валюта");
			ОбнаруженыОшибки = Истина;
		Иначе //не ведется валютный учет, заполним реквизит значением валюты регл. учете
			ЭтаФорма.ВалютаТарифнойСтавки =  ЭтаФорма.мВалютаРегламентированногоУчета;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбнаруженыОшибки Тогда
		Если Не ПустаяСтрока(СрокаСообщенияОбОшибке) Тогда
			ОбработкаКомментариев.ДобавитьСообщение(СрокаСообщенияОбОшибке, Перечисления.ВидыСообщений.Ошибка);
			ОбработкаКомментариев.ДобавитьСообщение("Элемент не записан!", Перечисления.ВидыСообщений.ВажнаяИнформация);
		КонецЕсли;
		Если СписокНеЗаполненныхРеквизитов.Количество()>0 Тогда
			ОбработкаКомментариев.ДобавитьСообщение("Не заполнены реквизиты: " + СписокНеЗаполненныхРеквизитов, Перечисления.ВидыСообщений.Ошибка);
			ОбработкаКомментариев.ДобавитьСообщение("Элемент не записан!", Перечисления.ВидыСообщений.ВажнаяИнформация);
		КонецЕсли;
		ОбработкаКомментариев.ПоказатьСообщения();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.ЭтоНовый() Тогда
		Если Не ЭтаФорма.ВыборФизлица Тогда
			//попытка записать новое физлицо
			Попытка
				ЭтаФорма.ФизлицоОбъект.Записать();
				ЭтаФорма.Физлицо = ЭтаФорма.ФизлицоОбъект.Ссылка;
			Исключение
				ОбщегоНазначения.ПоказатьДиалогСИнформациейОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()));
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ФормаЭлементаПриЗаписи(Отказ, ЭтаФорма)Экспорт

	ФизлицоОбъект 		= ЭтаФорма.ФизлицоОбъект;
	Ссылка				= ЭтаФорма.Ссылка;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	ТаблицаСообщений = Новый ТаблицаЗначений;
	
	//запись не нового Сотрудника, проверим необходимось записи физлица
	Если Не ЭтаФорма.мЭтоНовый и ФизлицоОбъект.Модифицированность() Тогда
		
		Попытка	
			ФизлицоОбъект.Заблокировать();
		Исключение
			ТекстСообщения = "Физическое лицо: " + ФизлицоОбъект + " - объект заблокирован.";
			ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.Ошибка);
			ОбработкаКомментариев.ДобавитьСообщение("Элемент не записан!", Перечисления.ВидыСообщений.ВажнаяИнформация);
			ОбработкаКомментариев.ПоказатьСообщения();
			
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
		ФизлицоОбъект.Записать();
		ПроцедурыУправленияПерсоналомПолныеПрава.СинхронизироватьНаименованияСотрудников(ФизлицоОбъект.Ссылка, Ссылка);
		
	КонецЕсли;
	
	// запись в регистр ФИО физлиц
	мНаборЗаписейФИО = ЭтаФорма.мНаборЗаписейФИО;
	
	Если мНаборЗаписейФИО.Количество() = 0 Тогда
		ЗаписьНабора = мНаборЗаписейФИО.Добавить();
		ЗаписьНабора.Период		= ?(ЗначениеЗаполнено(ФизлицоОбъект.ДатаРождения),ФизлицоОбъект.ДатаРождения,'19800101');
		ЗаписьНабора.Фамилия	= ЭтаФорма.Фамилия;
		ЗаписьНабора.Имя		= ЭтаФорма.Имя;
		ЗаписьНабора.Отчество	= ЭтаФорма.Отчество;
	КонецЕсли;
	
	Если мНаборЗаписейФИО.Количество() > 0 И ЗначениеЗаполнено(мНаборЗаписейФИО[0].Период) Тогда
		мНаборЗаписейФИО[0].Физлицо = ЭтаФорма.Физлицо;
		мНаборЗаписейФИО.Отбор.Физлицо.Использование	= Истина;
		мНаборЗаписейФИО.Отбор.Физлицо.Значение			= мНаборЗаписейФИО[0].Физлицо;
		мНаборЗаписейФИО.Отбор.Период.Использование		= Истина;
		мНаборЗаписейФИО.Отбор.Период.Значение			= мНаборЗаписейФИО[0].Период;
		мНаборЗаписейФИО.Записать(Истина);
	КонецЕсли;
		
	ФИО = ЭтаФорма.Фамилия + " " + ЭтаФорма.Имя + " " + ЭтаФорма.Отчество;
	ТаблицаСообщений = ПолныеПрава.ПроверитьДублиФизлиц(ФизлицоОбъект.Ссылка, , ФизлицоОбъект.ИНН, ФизлицоОбъект.СтраховойНомерПФР, ФИО);
	
	// покажем результаты проверки дублей физлиц
	Если ТаблицаСообщений.Количество() > 0 Тогда
		РодительскаяСтрока = ОбработкаКомментариев.ДобавитьСообщение("Результат проверки дублей физлиц",Перечисления.ВидыСообщений.ВажнаяИнформация);
		Для каждого СтрокаТЗ Из ТаблицаСообщений Цикл
			Расшифровки = Новый Массив;
			// расшифровка сообщений представляет собой массив структур "Представление+Расшифровка"
			Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", СтрокаТЗ.Физлицо, СтрокаТЗ.Физлицо));
			ОбработкаКомментариев.ДобавитьСообщение(СтрокаТЗ.ТекстСообщения,Перечисления.ВидыСообщений.Информация, Расшифровки, РодительскаяСтрока);
		КонецЦикла;
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;
	
	мНаборЗаписейГражданство 			= ЭтаФорма.мНаборЗаписейГражданство;
	мНаборЗаписейГражданствоПриОткрытии = ЭтаФорма.мНаборЗаписейГражданствоПриОткрытии;
	
	Если мНаборЗаписейГражданство.Количество() > 0 И ЗначениеЗаполнено(мНаборЗаписейГражданство[0].Период) Тогда
		
		НадоЗаписатьНаборЗаписей = Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(мНаборЗаписейГражданство.Выгрузить(), мНаборЗаписейГражданствоПриОткрытии.Выгрузить());		
		
		Если НадоЗаписатьНаборЗаписей Тогда
			мНаборЗаписейГражданство[0].Физлицо = Ссылка.Физлицо;
			мНаборЗаписейГражданство.Отбор.Физлицо.Использование	= Истина;
			мНаборЗаписейГражданство.Отбор.Физлицо.Значение			= мНаборЗаписейГражданство[0].Физлицо;
			мНаборЗаписейГражданство.Отбор.Период.Использование		= Истина;
			мНаборЗаписейГражданство.Отбор.Период.Значение			= мНаборЗаписейГражданство[0].Период;
			мНаборЗаписейГражданство.Записать(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	// запись в регистр Сведения об инвалидности
	мНаборЗаписейИнвалидность 				= ЭтаФорма.мНаборЗаписейИнвалидность;
	мНаборЗаписейИнвалидностьПриОткрытии 	= ЭтаФорма.мНаборЗаписейИнвалидностьПриОткрытии;
	
	Если мНаборЗаписейИнвалидность.Количество() > 0 И ЗначениеЗаполнено(мНаборЗаписейИнвалидность[0].Период) Тогда
		
		НадоЗаписатьНаборЗаписей = Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(мНаборЗаписейИнвалидность.Выгрузить(), мНаборЗаписейИнвалидностьПриОткрытии.Выгрузить());		
		
		Если НадоЗаписатьНаборЗаписей Тогда
			мНаборЗаписейИнвалидность[0].Физлицо = Ссылка.Физлицо;
			мНаборЗаписейИнвалидность.Отбор.Физлицо.Использование	= Истина;
			мНаборЗаписейИнвалидность.Отбор.Физлицо.Значение		= мНаборЗаписейИнвалидность[0].Физлицо;
			мНаборЗаписейИнвалидность.Отбор.Период.Использование	= Истина;
			мНаборЗаписейИнвалидность.Отбор.Период.Значение			= мНаборЗаписейИнвалидность[0].Период;
			мНаборЗаписейИнвалидность.Записать(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	// Обработка записи свойств и категорий
	ОбработкаОбъектЗначенияСвойств = ЭтаФорма.ОбработкаОбъектЗначенияСвойств;
	
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
	Отказ = НЕ ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();

	ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	Отказ = НЕ ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ФормаЭлементаПереключитьВидимостьСправкиФормы(Кнопка, ЭтаФорма) Экспорт
	
	ЭтаФорма.ОтображатьСправкуФормы = НЕ ЭтаФорма.ОтображатьСправкуФормы;
	УстановитьВидимостьСправкиФормы(, ЭтаФорма);
	
КонецПроцедуры

Процедура ФормаЭлементаПоказатьИсториюОтражениеОсновныхНачислений(Кнопка, ЭтаФорма) Экспорт
	
	Ссылка	= ЭтаФорма.Ссылка;
	
	ФормаРегистра = РегистрыСведений.УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.ПолучитьФормуСписка( , ЭтаФорма, Ссылка);
	ФормаРегистра.РегистрСведенийСписок.Отбор.Сотрудник.Установить(Ссылка);
	ФормаРегистра.РегистрСведенийСписок.Отбор.Организация.Установить(ЭтаФорма.Организация);
	ФормаРегистра.ЭлементыФормы.Организация.Доступность = Ложь;
	ФормаРегистра.ЭлементыФормы.РегистрСведенийСписок.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Конец;
	ФормаРегистра.Открыть();
	
КонецПроцедуры

Процедура ФормаЭлементаПоказатьИсториюОтражениеПлановыхНачислений(Кнопка, ЭтаФорма) Экспорт
	
	Ссылка	= ЭтаФорма.Ссылка;
	
	ФормаРегистра = РегистрыСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций.ПолучитьФормуСписка( , ЭтаФорма, Ссылка);
	ФормаРегистра.РегистрСведенийСписок.Отбор.Сотрудник.Установить(Ссылка);
	ФормаРегистра.РегистрСведенийСписок.Отбор.Организация.Установить(ЭтаФорма.Организация);
	ФормаРегистра.ЭлементыФормы.Организация.Доступность = Ложь;
	ФормаРегистра.ЭлементыФормы.РегистрСведенийСписок.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Конец;
	ФормаРегистра.Открыть();	
	
КонецПроцедуры

Процедура ФормаЭлементаУДФОткрыть(Кнопка, ЭтаФорма) Экспорт
	
	Форма = Обработки.УправлениеДаннымиРаботника.ПолучитьФорму();
	Форма.УстановитьРеквизиты(ЭтаФорма.Физлицо, "Основное", ТекущаяДата());
	Форма.Открыть();
	
КонецПроцедуры // УДФОткрыть()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ФормаЭлементаОткрытьСправочникФизлицНажатие(Элемент, ЭтаФорма) Экспорт
	
	Если ЭтаФорма.ВыборФизлица Тогда
		ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуВыбора(, ЭтаФорма);
	Иначе
		ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуСписка(, ЭтаФорма);
	КонецЕсли;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ФормаЭлементаНаименованиеФизлицаПриИзменении(Элемент, ЭтаФорма) Экспорт
	
	ФизлицоОбъект	= ЭтаФорма.ФизлицоОбъект;
	
	ЭтаФорма.Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ЭтаФорма.ПостфиксНаименования);
	
	ФИО = Элемент.Значение;
	Если ПустаяСтрока(ЭтаФорма.Фамилия) ИЛИ ЭтаФорма.ЭтоНовый() Тогда
		
		//vvv
		//МассивФИО = ОбщегоНазначения.ПолучитьМассивФИО(ФИО);
		МассивФИО = ОбщегоНазначенияЗК.ПолучитьМассивФИО(ФИО);
		//
		ЭтаФорма.Фамилия  = МассивФИО[0];
		ЭтаФорма.Имя      = МассивФИО[1];
		ЭтаФорма.Отчество = МассивФИО[2];
		
		Если ЗначениеЗаполнено(ЭтаФорма.Отчество) Тогда
			ФизлицоОбъект.Пол = ПроцедурыУправленияПерсоналом.ПолучитьПол(ЭтаФорма.Отчество);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно(ЭтаФорма);
	УстановитьЗаголовокВидимостьПерейтиКВводуГруппыДоступа(ЭтаФорма);
	
КонецПроцедуры

Процедура ФормаЭлементаРедактироватьФизлицоОтдельноНажатие(Элемент, ЭтаФорма) Экспорт
	
	Форма = ЭтаФорма.ФизлицоОбъект.ПолучитьФорму(, ЭтаФорма);
	Форма.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр;
	Форма.Открыть();
	
КонецПроцедуры

Процедура ФормаЭлементаПостфиксНаименованияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	ВидДоговора 	= ЭтаФорма.ВидДоговора;
	ВидЗанятости 	= ЭтаФорма.ВидЗанятости;
	Наименование 	= ЭтаФорма.Наименование;
	
	СписокВозможныхЗначений = Новый СписокЗначений;
	НаименованиеБезПостфикса = ЭтаФорма.ФизлицоОбъект.Наименование;
	СписокВозможныхЗначений.Добавить(НаименованиеБезПостфикса);
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		Если ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
			СписокВозможныхЗначений.Добавить(НаименованиеБезПостфикса + " (вн. совм.)");
		ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда	
			СписокВозможныхЗначений.Добавить(НаименованиеБезПостфикса + " (осн.)");
		Иначе
			СписокВозможныхЗначений.Добавить(НаименованиеБезПостфикса + " (совм.)");			
		КонецЕсли; 
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
		СписокВозможныхЗначений.Добавить(НаименованиеБезПостфикса + " (дог. подр.)");
		СписокВозможныхЗначений.Добавить(НаименованиеБезПостфикса + " (дг.)");
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
		СписокВозможныхЗначений.Добавить(НаименованиеБезПостфикса + " (дог. авт.)");
		СписокВозможныхЗначений.Добавить(НаименованиеБезПостфикса + " (дг.)");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ЭтаФорма.ПостфиксНаименования) и СписокВозможныхЗначений.НайтиПоЗначению(Наименование) = Неопределено Тогда
		СписокВозможныхЗначений.Добавить(Наименование);	
	КонецЕсли;	
	
	СписокВозможныхЗначений.Добавить("Произвольное","задать произвольное дополнение наименования (не более 15-и символов)");
	
	Элемент.СписокВыбора = СписокВозможныхЗначений;
	
КонецПроцедуры

Процедура ФормаЭлементаПостфиксНаименованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	ПостфиксНаименования 	= ЭтаФорма.ПостфиксНаименования;
	Наименование			= ЭтаФорма.Наименование;
	ФизлицоОбъект			= ЭтаФорма.ФизлицоОбъект;
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = "Произвольное" Тогда
		Текст = ПостфиксНаименования;
		ВвестиСтроку(Текст, "Введите дополнение наименования", 15);
		ЭтаФорма.ПостфиксНаименования = Текст;
		ЭтаФорма.Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, Текст);
	Иначе
		ЭтаФорма.Наименование = ВыбранноеЗначение;
		НаименованиеБезПостфикса = ФизлицоОбъект.Наименование;
		ЭтаФорма.ПостфиксНаименования = СокрЛП(СтрЗаменить(ВыбранноеЗначение, НаименованиеБезПостфикса, ""));	
	КонецЕсли; 

КонецПроцедуры

Процедура ФормаЭлементаПерейтиКВводуТрудовогоДоговораНажатие(Элемент, ЭтаФорма) Экспорт
	
	ПанельДанныхНовыйСотрудник = ЭтаФорма.ЭлементыФормы.ПанельДанныхНовыйСотрудник;
	ПанельДанныхНовыйСотрудник.ТекущаяСтраница = ПанельДанныхНовыйСотрудник.Страницы.ТрудовойДоговор;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ОбособленноеПодразделение
Процедура ФормаЭлементаОбособленноеПодразделениеПриИзменении(Элемент, ЭтаФорма) Экспорт
	
	ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма);
	
КонецПроцедуры // ОбособленноеПодразделениеПриИзменении

// Процедура - обработчик события "НачалоВыбора" поля ввода ОбособленноеПодразделение
Процедура ФормаЭлементаОбособленноеПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	мСписокОбособленныхПодразделений = ЭтаФорма.мСписокОбособленныхПодразделений;
	
	//установим список выбора 
	ЭлементСписка = ЭтаФорма.ВыбратьИзСписка(мСписокОбособленныхПодразделений, Элемент, мСписокОбособленныхПодразделений.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено и Элемент.Значение <> ЭлементСписка.Значение Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		ОбработкаРеквизитовТрудовогоДоговора(ЭтаФорма);
		ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма);
	КонецЕсли;
    	
КонецПроцедуры //ОбособленноеПодразделениеНачалоВыбора

Процедура ФормаЭлементаЗанимаемыхСтавокРегулирование(Элемент, Направление, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	Если Направление = 1 Тогда // увеличиваем значение
		Элемент.Значение = Элемент.Значение + 0.25
	Иначе // = -1 - уменьшаем значение
		Элемент.Значение = Элемент.Значение - 0.25
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ФормаЭлементаНадбавкиПоТрудовомуДоговоруТекстНажатие(Элемент, ЭтаФорма) Экспорт
	
	Отказ = Ложь;
	
	Если ЭтаФорма.Модифицированность Тогда
		Если Вопрос("Данные сотрудника еще не записаны! Записать?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК,) = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЭтаФорма.ЗаписатьВФорме();
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		ЭтотОбъект = ЭтаФорма.ЭтотОбъект;
		
		Попытка	
			ЭтотОбъект.Заблокировать();
		Исключение
			Предупреждение("Не удалось заблокировать объект """ + ЭтотОбъект + """!
				|" + ОписаниеОшибки(), 60);
			Возврат;
		КонецПопытки;
		
		ФормаПерсональныеНадбавки = ЭтотОбъект.ПолучитьФорму("ФормаПерсональныеНадбавки", ЭтаФорма, ЭтаФорма.Ссылка);
		ФормаПерсональныеНадбавки.СправочникОбъект	= ЭтотОбъект;
		ФормаПерсональныеНадбавки.ТолькоПросмотр	= ЭтаФорма.ТолькоПросмотр;
		ФормаПерсональныеНадбавки.ОткрытьМодально();
		ЭтотОбъект.Разблокировать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаЭлементаВидРасчетаПриИзменении(Элемент, ЭтаФорма) Экспорт
	
	ВидРасчета 		= ЭтаФорма.ВидРасчета;
	ЭлементыФормы 	= ЭтаФорма.ЭлементыФормы;
	
	УстановитьВидимостьЭУПоИспользованиюТарифногоРазряда(ЭтаФорма, ВидРасчета);
	
	СведенияОВидеРасчета = РаботаСДиалогамиПереопределяемый.ПолучитьСведенияОВидеРасчетаСхемыМотивации(ЭтаФорма.мСведенияОВидахРасчета, ВидРасчета);
	ЭлементыФормы.ТарифнаяСтавка.Формат = "ЧДЦ=" + СведенияОВидеРасчета.Показатель1Точность;
	ЭлементыФормы.ТарифнаяСтавка1.Формат = "ЧДЦ=" + СведенияОВидеРасчета.Показатель1Точность;
	
КонецПроцедуры

Процедура ФормаЭлементаГражданствоНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт

	СтандартнаяОбработка 	= Ложь;
	ФормаВвода	 			= Справочники.ФизическиеЛица.ПолучитьФорму("ФормаЗаписиГражданство", ЭтаФорма);
	ФормаВвода.НаборЗаписей = ЭтаФорма.мНаборЗаписейГражданство;
	ФормаВвода.Открыть();
	
КонецПроцедуры

Процедура ФормаЭлементаИнвалидностьНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ФормаВвода	 			= Справочники.ФизическиеЛица.ПолучитьФорму("ФормаЗаписиСведенияОбИнвалидности", ЭтаФорма);
	ФормаВвода.НаборЗаписей = ЭтаФорма.мНаборЗаписейИнвалидность;
	ФормаВвода.Открыть();
	
КонецПроцедуры

Процедура ФормаЭлементаСтандартныеВычетыНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Отказ = Ложь;
	
	Если Не НастройкаПравДоступа.ДоступнаРольРасчетчикаРегл() Тогда
		Предупреждение("Редактирование данных по НДФЛ не доступно!");
		Отказ = Истина;
	ИначеЕсли ЭтаФорма.Модифицированность Тогда
		Если Вопрос("Перед вводом сведений необходимо записать элемент. Записать?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК,) = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЭтаФорма.ЗаписатьВФорме();
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ФормаВвода	= Справочники.ФизическиеЛица.ПолучитьФорму("ФормаВводаДанныхНДФЛ", ЭтаФорма);
		ФормаВвода.СправочникОбъект = ЭтаФорма.ФизлицоОбъект;
		ФормаВвода.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаЭлементаИмущественныеВычетыНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	Организация	= ЭтаФорма.Организация;	
	Физлицо		= ЭтаФорма.Физлицо;	

	СтандартнаяОбработка = Ложь;
	
	Отказ = Ложь;
	
	Если Не НастройкаПравДоступа.ДоступнаРольРасчетчикаРегл() Тогда
		Предупреждение("Редактирование данных по НДФЛ не доступно!");
		Отказ = Истина;
	ИначеЕсли ЭтаФорма.Модифицированность Тогда
		Если Вопрос("Перед вводом сведений необходимо записать элемент. Записать?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК,) = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЭтаФорма.ЗаписатьВФорме();
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫРАЗИТЬ(НДФЛИмущественныеВычетыФизлиц.Регистратор КАК Документ.НДФЛПодтверждениеПраваНаИмущественныйВычет) КАК Регистратор
		|ИЗ
		|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц КАК НДФЛИмущественныеВычетыФизлиц
		|ГДЕ
		|	НДФЛИмущественныеВычетыФизлиц.Год = &парамГод
		|	И НДФЛИмущественныеВычетыФизлиц.ФизЛицо = &парамФизлицо
		|	И НДФЛИмущественныеВычетыФизлиц.Организация = &парамОрганизация
		|	И НДФЛИмущественныеВычетыФизлиц.ВидДвижения = &парамВидДвижения
		|	И НДФЛИмущественныеВычетыФизлиц.Регистратор ССЫЛКА Документ.НДФЛПодтверждениеПраваНаИмущественныйВычет";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("парамОрганизация", Организация);
		Запрос.УстановитьПараметр("парамФизлицо", Физлицо);
		Запрос.УстановитьПараметр("парамГод", Год(ТекущаяДата()));
		Запрос.УстановитьПараметр("парамВидДвижения", ВидДвиженияНакопления.Приход);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если НЕ Выборка.Следующий() Тогда
			//нет вычетов, откроем документ для регистрации
			ФормаДокумента = Документы.НДФЛПодтверждениеПраваНаИмущественныйВычет.ПолучитьФормуНовогоДокумента(,ЭтаФорма,);
			ФормаДокумента.НалоговыйПериод = Год(ТекущаяДата());
			ФормаДокумента.Организация = Организация;
			НоваяСтрока = ФормаДокумента.РаботникиОрганизации.Добавить();
			НоваяСтрока.ФизЛицо  = ФизЛицо;
			НоваяСтрока.ДатаСобытия = ТекущаяДата();
			ФормаДокумента.Открыть();
		Иначе
			Документ = Выборка.Регистратор;
			ФормаДокумента = Документ.ПолучитьФорму("ФормаДокумента",ЭтаФорма,);
			ФормаДокумента.Открыть();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ФормаЭлементаОрганизацияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтрокеОрганизации(), Тип("СправочникСсылка.Организации"));
	
КонецПроцедуры

Процедура ФормаЭлементаОрганизацияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтрокеОрганизации(), ЭтаФорма, Тип("СправочникСсылка.Организации"), ЭтаФорма.мОбработкаПодбораПоСтрокеОрганизация, ЭтаФорма.мТекстПодбораПоСтрокеОрганизация, ЭтаФорма.мПоследнееЗначениеЭлементаПодбораПоСтрокеОрганизация, Ложь);
	
КонецПроцедуры

Процедура ФормаЭлементаПодразделениеОрганизацииПриИзменении(Элемент, ЭтаФорма) Экспорт
	
	ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма);
	СотрудникиОрганизацийПереопределяемый.ЗаполнитьРеквизитыПоШтатномуРасписанию(ЭтаФорма, ЭтаФорма.ЭтотОбъект);
	
КонецПроцедуры

Процедура ФормаЭлементаДолжностьПриИзменении(Элемент, ЭтаФорма) Экспорт
	
	ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма);
	СотрудникиОрганизацийПереопределяемый.ЗаполнитьРеквизитыПоШтатномуРасписанию(ЭтаФорма, ЭтаФорма.ЭтотОбъект);
	
КонецПроцедуры

Процедура ФормаЭлементаФизлицоПриИзменении(Элемент, ЭтаФорма) Экспорт
	
	ФизЛицо = ЭтаФорма.Физлицо;
	
	Если Не ЗначениеЗаполнено(Физлицо) ИЛИ Физлицо <> ЭтаФорма.ФизлицоОбъект.Ссылка Тогда
		ФормаЭлементаОбработатьИзменениеФизлица(ЭтаФорма);
		ПроверитьИУстановитьВидЗанятости(,ЭтаФорма);
		ПодобратьПостфиксНаименования(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаЭлементаВидЗанятостиПриИзменении(Элемент, ЭтаФорма) Экспорт
	
	ПодобратьПостфиксНаименования(ЭтаФорма);
	
КонецПроцедуры

Процедура ФормаЭлементаДатаРожденияПриИзменении(Элемент, ЭтаФорма) Экспорт
	
	Если Год(Элемент.Значение) >= Год(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
		Предупреждение("Внимание! Возможно, неверно задана дата рождения.");
	КонецЕсли;	
	
КонецПроцедуры

Процедура ФормаЭлементаПерейтиКВводуГруппыДоступаНажатие(Элемент, ЭтаФорма) Экспорт
	
	ФормаВыбора = Справочники.ГруппыДоступаФизическихЛиц.ПолучитьФормуВыбора(,ЭтаФорма,);
	ФормаВыбора.ПараметрТекущаяСтрока		= ЭтаФорма.ФизлицоОбъект.ГруппаДоступаФизическогоЛица;
	ФормаВыбора.ОткрытьМодально();
	
КонецПроцедуры

Процедура ФормаЭлементаСменитьФИОНажатие(Элемент, ЭтаФорма) Экспорт
	
	Физлицо = ЭтаФорма.Физлицо;
	мНаборЗаписейФИО = ЭтаФорма.мНаборЗаписейФИО;
	
	Если ЭтаФорма.Ссылка.Пустая() Или Физлицо.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ФормаВводаФИО = Физлицо.ПолучитьФорму("ФормаЗаписиФИО", ЭтаФорма, Физлицо);
	
	Если мНаборЗаписейФИО.Количество() = 0 Тогда
		мНаборЗаписейФИО.Добавить();
	КонецЕсли;
	
	Если ПустаяСтрока(мНаборЗаписейФИО[0].Фамилия + мНаборЗаписейФИО[0].Имя + мНаборЗаписейФИО[0].Отчество)
		И Не ЗначениеЗаполнено(мНаборЗаписейФИО[0].Период) Тогда
		ФИО = ЭтаФорма.Наименование;
		//vvv
		//МассивФИО = ОбщегоНазначения.ПолучитьМассивФИО(ФИО);
		МассивФИО = ОбщегоНазначенияЗК.ПолучитьМассивФИО(ФИО);
		//
		мНаборЗаписейФИО[0].Фамилия	= МассивФИО[0];
		мНаборЗаписейФИО[0].Имя		= МассивФИО[1];
		мНаборЗаписейФИО[0].Отчество= МассивФИО[2];
		мНаборЗаписейФИО[0].Период	= ?(ЗначениеЗаполнено(ФизЛицо.ДатаРождения),ФизЛицо.ДатаРождения,'19800101');
	КонецЕсли;
	
	ФормаВводаФИО.НаборЗаписей = мНаборЗаписейФИО;
	ФормаВводаФИО.ФамилияПриОткрытии  = мНаборЗаписейФИО[0].Фамилия;
	ФормаВводаФИО.ИмяПриОткрытии      = мНаборЗаписейФИО[0].Имя;
	ФормаВводаФИО.ОтчествоПриОткрытии = мНаборЗаписейФИО[0].Отчество;
	ФормаВводаФИО.ПериодПриОткрытии   = мНаборЗаписейФИО[0].Период;
	ФормаВводаФИО.Открыть();
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ

Процедура ФормаЭлементаПлановыеНачисленияПриПолученииДанных(Элемент, ОформленияСтрок, ЭтаФорма) Экспорт
	
	РаботаСДиалогамиЗК.ОформитьСтрокиПлановыхНачислений(Элемент, ЭтаФорма.мСведенияОВидахРасчета, ОформленияСтрок);
	
КонецПроцедуры

Процедура ФормаЭлементаПлановыеНачисленияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(ВыбраннаяСтрока.Регистратор) Тогда
		Возврат;
	КонецЕсли;
	Форма = ВыбраннаяСтрока.Регистратор.ПолучитьФорму( , Элемент, Элемент);
	Форма.Открыть();
	
КонецПроцедуры

Процедура ФормаЭлементаПлановыеУдержанияПриПолученииДанных(Элемент, ОформленияСтрок, ЭтаФорма) Экспорт
	
	РаботаСДиалогамиЗК.ОформитьСтрокиПлановыхУдержаний(Элемент, ЭтаФорма.мСведенияОВидахРасчета, ОформленияСтрок);
	
КонецПроцедуры

Процедура ФормаЭлементаПлановыеУдержанияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(ВыбраннаяСтрока.Регистратор) Тогда
		Возврат;
	КонецЕсли;
	Форма = ВыбраннаяСтрока.Регистратор.ПолучитьФорму( , Элемент, Элемент);
	Форма.Открыть();
	
КонецПроцедуры

Процедура ФормаЭлементаСписокДоговоровГПХПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма) Экспорт
	
	Отказ = Истина;
	
КонецПроцедуры

// Процедура обеспечивает ввод на основании кадрового документа
Процедура ФормаЭлементаКадровыеДокументыДействиеДобавить(Кнопка, ЭтаФорма) Экспорт
	
	Если ЗаписатьЭлементПередВыполнениемДействия("Перед выполнением действия необходимо записать элемент. Записать элемент?", ЭтаФорма) Тогда
		
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.Добавить(Документы.ПриемНаРаботуВОрганизацию, 		"Прием на работу в организацию");
		СписокДокументов.Добавить(Документы.КадровоеПеремещениеОрганизаций, "Кадровое перемещение организаций");
		СписокДокументов.Добавить(Документы.УвольнениеИзОрганизаций, 		"Увольнение из организаций");
		
		ВыбранноеЗначение = СписокДокументов.ВыбратьЭлемент("Выбор вида документа");
		Если Не ВыбранноеЗначение = Неопределено Тогда
			ДокументОбъект = ВыбранноеЗначение.Значение.СоздатьДокумент();
			ДокументОбъект.Заполнить(ЭтаФорма.Ссылка);
			ФормаДокумента = ДокументОбъект.ПолучитьФорму();
			ФормаДокумента.Открыть();
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ФормаЭлементаКадровыеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма) Экспорт
	
	Если Не Копирование Тогда
		Отказ = Истина;
		ЭтаФорма.КадровыеДокументыДействиеДобавить(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА СПРАВКИ

Функция ПолучитьТекстМакетаВстроеннойСправки(ЭтаФорма)
	
	ЦветФонаСправки		= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветФона());
	ЦветСсылкиСправки	= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки());

	Если ЭтаФорма.мЭтоНовый Тогда
		
		ТекстМакетаВстроеннойСправки =
		"<HTML>
		|	<HEAD>
		|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогами.ВстроеннаяСправка_СтилиДокумента() + "
		|	</HEAD>
		|
		|	<BODY aLink="+ЦветСсылкиСправки+" vLink="+ЦветСсылкиСправки+" link="+ЦветСсылкиСправки+" bgColor="+ЦветФонаСправки+" scroll=auto><FONT face=""MS Sans Serif"" size=1>
		|		<IMG src="+РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы, ЭтаФорма.ЭлементыФормы.ВстроеннаяСправка)+">
		|		<DIV><B>Если сотрудник ранее уже работал " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("в организации") + "...</B><BR>
		|		Необходимо выбрать вариант «Создать нового сотрудника, выбрав его из справочника физических лиц» и далее выбрать физлицо из списка.</DIV>
		|		<DIV><B>Как уточнить наименование сотрудника?</B><BR>
		|		В поле ""Наименование"" нажать на кнопку выбора из списка, можно выбрать предложенные варианты или задать произвольное дополнение к наименованию.</DIV>
		|		
		|	</FONT></BODY>
		|</HTML>";
		
	Иначе
		
		ТекстМакетаВстроеннойСправки =
		"<HTML>
		|	<HEAD>
		|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогами.ВстроеннаяСправка_СтилиДокумента() + "
		|	</HEAD>
		|
		|	<BODY aLink="+ЦветСсылкиСправки+" vLink="+ЦветСсылкиСправки+" link="+ЦветСсылкиСправки+" bgColor="+ЦветФонаСправки+" scroll=auto><FONT face=""MS Sans Serif"" size=1>
		|		<IMG src="+РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы, ЭтаФорма.ЭлементыФормы.ВстроеннаяСправка)+">
		|		<DIV><B>Как создать документ по этому сотруднику?</B><BR>
		|		Кадровые документы и некоторые документы по начислению можно создать, нажав на кнопку ""Ввести документ"".</DIV>
		|		<DIV><B>Как уточнить наименование сотрудника?</B><BR>
		|		В поле ""Наименование"" нажать на кнопку выбора из списка, можно выбрать предложенные варианты или задать произвольное дополнение к наименованию.</DIV>
		|		<DIV><B>Как сменить фамилию?</B><BR>
		|		Открыть форму по кнопке ""Смена ФИО"". В появившемся диалоговом окне ввести новую фамилию и указать дату, с которой фамилия была изменена.</DIV>
		|		<BR>
		|	</FONT></BODY>
		|</HTML>";

	КонецЕсли;
	
	Возврат ТекстМакетаВстроеннойСправки;
	
КонецФункции

Процедура ПодготовитьСправкуФормы(ЭтаФорма) Экспорт
	
	ЭлементыФормы = ЭтаФорма.ЭлементыФормы;
	
	ЭлементыФормы.ПанельСправкиФормы.ЦветРамки			= РаботаСДиалогами.ВстроеннаяСправка_ЦветРамки();
	ЭлементыФормы.НадписьЗакрытьСправкуФормы.ЦветФона	= РаботаСДиалогами.ВстроеннаяСправка_ЦветФона();
	ЭлементыФормы.НадписьЗакрытьСправкуФормы.ЦветТекста	= РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки();
	
	ТекстМакетаВстроеннойСправки = ПолучитьТекстМакетаВстроеннойСправки(ЭтаФорма);
	
	ЭлементыФормы.ВстроеннаяСправка.УстановитьТекст(ТекстМакетаВстроеннойСправки);
	
КонецПроцедуры

Процедура УстановитьВидимостьСправкиФормы(ОбновитьСправку = Истина, ЭтаФорма)
	
	ОтображатьСправкуФормы = ЭтаФорма.ОтображатьСправкуФормы;
	
	РаботаСДиалогами.ИзменитьВидимостьПанелиПоГоризонтали(ЭтаФорма, ОтображатьСправкуФормы, "ОсновнаяПанель", "СправкиФормы");
	ЭтаФорма.ЭлементыФормы.ДействияФормыСправка.Кнопки.ПереключениеСправкиФормы.Пометка = ОтображатьСправкуФормы;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА СВОЙСТВ И КАТЕГОРИЙ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ФормаЭлементаПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "", ЭтаФорма) Экспорт
	
	Ссылка	= ЭтаФорма.Ссылка;
	ОбработкаОбъектЗначенияСвойств	= ЭтаФорма.ОбработкаОбъектЗначенияСвойств;
	
	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием
	Если ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_СотрудникиОрганизаций Тогда
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
	КонецЕсли;

КонецПроцедуры

// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ФормаЭлементаПрочитатьЗаполнитьКатегории(ИмяДанных = "", ЭтаФорма) Экспорт
	
	ОбработкаОбъектКатегорииОбъекта = ЭтаФорма.ОбработкаОбъектКатегорииОбъекта;
	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием.
	Если ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_СотрудникиОрганизаций Тогда
		ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = ЭтаФорма.Ссылка;
		ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура ФормаЭлементаСвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма) Экспорт
	
	Отказ = Истина;

	ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура ФормаЭлементаСвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока, ЭтаФорма) Экспорт

	ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);

КонецПроцедуры

Процедура ФормаЭлементаСвойстваИЗначенияПередУдалением(Элемент, Отказ, ЭтаФорма) Экспорт

	Отказ = Истина;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура ФормаЭлементаСвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, ЭтаФорма) Экспорт
	
	ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура ФормаЭлементаСвойстваИЗначенияЗначениеПриИзменении(Элемент, ЭтаФорма) Экспорт

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура ФормаЭлементаСвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЭлементыФормы	= ЭтаФорма.ЭлементыФормы;
	
	ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;

	ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные, Элемент);

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения1.Значение.
//
Процедура ФормаЭлементаСвойстваИЗначения1ЗначениеОчистка(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт

	СтандартнаяОбработка = Ложь;
	
	ЭлементыФормы	= ЭтаФорма.ЭлементыФормы;

	ЭлементыФормы.СвойстваИЗначения1.ТекущиеДанные.Значение = Неопределено;

	ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения1.ТекущиеДанные, Элемент);

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура ФормаЭлементаКатегорииПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма) Экспорт

	Отказ = Истина;

	ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Категории.
//
Процедура ФормаЭлементаКатегорииПередУдалением(Элемент, Отказ, ЭтаФорма) Экспорт

	Отказ = Истина;

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Категории.
//
Процедура ФормаЭлементаКатегорииПриИзмененииФлажка(Элемент, НоваяСтрока, ЭтаФорма) Экспорт

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура ФормаЭлементаКатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, ЭтаФорма) Экспорт

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры

// Этот модуль предназачен для реализации алгоритмов работы форм и 
// содержит процедуры и функции работы с формами и элементами форм,
// а также подготовки данных для представления информации в формах.




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ ФОРМЫ


// Процедура предназначена для управления видимостью элементов формы,
// вызывается в обработчиках событий "ПриОткрытии" форм, при изменении реквизита Организация
//
// Параметры:
//  ЭлементыФормы  - массив с коллекцией ЭУ формы, видимость которых необходимо определить
//  УчетнаяПолитикаПоПерсоналу - структура, содержит данные учетной политики    
//    предприятия или конкретной организации
//
Процедура УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(ЭлементыФормы,УчетнаяПолитикаПоПерсоналу,Организация = Неопределено) Экспорт
	
	ИспользуютсяНачисленияВВалюте			= Ложь;
	ПоказыватьТабельныеНомераВДокументах	= Ложь;
	ПоддерживатьНесколькоСхемМотивации		= Ложь;
	
	Если Организация = Неопределено Тогда
		Если УчетнаяПолитикаПоПерсоналу <> Неопределено Тогда
			Если Не УчетнаяПолитикаПоПерсоналу.Свойство("ИспользуютсяНачисленияВВалюте",ИспользуютсяНачисленияВВалюте) Тогда
				ИспользуютсяНачисленияВВалюте = Ложь;
			КонецЕсли;
			Если Не УчетнаяПолитикаПоПерсоналу.Свойство("ПоказыватьТабельныеНомераВДокументах",ПоказыватьТабельныеНомераВДокументах) Тогда
				ПоказыватьТабельныеНомераВДокументах = Ложь;
			КонецЕсли;
			Если Не УчетнаяПолитикаПоПерсоналу.Свойство("ПоддерживатьНесколькоСхемМотивации",ПоддерживатьНесколькоСхемМотивации) Тогда
				ПоддерживатьНесколькоСхемМотивации = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ИспользуютсяНачисленияВВалюте			= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналу, Организация, "ИспользуютсяНачисленияВВалюте");
		ПоказыватьТабельныеНомераВДокументах	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналу, Организация, "ПоказыватьТабельныеНомераВДокументах");
	КонецЕсли;
	
	ТипКолонкаТабличногоПоля = Тип("КолонкаТабличногоПоля");
	ТипПолеВвода = Тип("ПолеВвода");
	ТипНадпись = Тип("Надпись");
	ТипПанель  = Тип("Панель");
	
	Для каждого Элемент из ЭлементыФормы Цикл
		Если ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "ТабельныйНомерСтрока" Тогда
			Элемент.Видимость			= ПоказыватьТабельныеНомераВДокументах;
			Элемент.ИзменятьВидимость	= Ложь;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и (Элемент.Имя = "Валюта" Или Элемент.Имя = "ТекущаяВалюта") Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и (Элемент.Имя = "Валюта1" Или Элемент.Имя = "ТекущаяВалюта1") Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и (Элемент.Имя = "Валюта2" Или Элемент.Имя = "ТекущаяВалюта2")Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и (Элемент.Имя = "Валюта3" Или Элемент.Имя = "ТекущаяВалюта3")Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;	
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и (Элемент.Имя = "Валюта4" Или Элемент.Имя = "ТекущаяВалюта4")Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и (Элемент.Имя = "Валюта5" Или Элемент.Имя = "ТекущаяВалюта5")Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и (Элемент.Имя = "Валюта6" Или Элемент.Имя = "ТекущаяВалюта6")Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "ВалютаЗавершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта1Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта2Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта3Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;	
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта4Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта5Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта6Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;	
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "ВидСхемыМотивации" Тогда
			Элемент.Видимость			= Элемент.Видимость И ПоддерживатьНесколькоСхемМотивации;
			Элемент.ИзменятьВидимость	= ПоддерживатьНесколькоСхемМотивации;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "ПоВременнойСхемеМотивации" Тогда
			Элемент.Видимость			= Элемент.Видимость И ПоддерживатьНесколькоСхемМотивации;
			Элемент.ИзменятьВидимость	= ПоддерживатьНесколькоСхемМотивации;
		ИначеЕсли ТипЗнч(Элемент) = ТипПолеВвода и Элемент.Имя = "ВалютаДокумента" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "НадписьВалютаДокумента" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипПолеВвода и Элемент.Имя = "ВалютаДоговораГПХ" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "НадписьВалютаДоговораГПХ" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;	
		ИначеЕсли ТипЗнч(Элемент) = ТипПолеВвода и Элемент.Имя = "ВалютаТарифнойСтавки" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "НадписьВалютаТарифнойСтавки" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипПолеВвода и Элемент.Имя = "ВалютаТарифнойСтавки1" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "НадписьВалютаТарифнойСтавки1" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипПолеВвода и Элемент.Имя = "ВидСхемыМотивации" Тогда
			Элемент.Видимость = ПоддерживатьНесколькоСхемМотивации;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "НадписьВидСхемыМотивации" Тогда
			Элемент.Видимость = ПоддерживатьНесколькоСхемМотивации;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "ПоВременнойСхемеМотивации" Тогда
			Элемент.Видимость = ПоддерживатьНесколькоСхемМотивации;
		ИначеЕсли ТипЗнч(Элемент) = ТипПанель и Элемент.Имя = "ПанельСхемыМотивации" Тогда
			СверткаПанелиМотивации = ?(ПоддерживатьНесколькоСхемМотивации, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);	
			Элемент.Свертка = СверткаПанелиМотивации;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу()

//Процедура предназначена для управления видимостью элементов формы, относящихся к Бухучету
// вызывается в обработчиках событий "ПриОткрытии" форм, при изменении реквизита Организация
//
// Параметры:
//  СтруктураЭУ  - ключ: имя группы ЭУ, значение: массив с коллекцией ЭУ формы, видимость которых необходимо определить
//  ВидимостьНУСчета - переменная, в которой возвращается    
//  Организация - организация, 
//
Процедура УстановитьВидимостьЭУБухучета(СтруктураЭУ, ВидимостьНУСчета = Ложь , Организация, Дата) Экспорт

	ДатаПериода = КонецМесяца(Дата); // на эту дату получаем значение учетной политики
	
	ПрограммаБухучета = глЗначениеПеременной("глПрограммаБухгалтерскогоУчетаОрганизации")[Организация];
	//ПоказыватьСчетаНУ = ПрограммаБухучета = Перечисления.ПрограммыБухгалтерскогоУчета.БухгалтерияПредприятия16
	//	 или ПрограммаБухучета = Перечисления.ПрограммыБухгалтерскогоУчета.Бухгалтерия77;
	//ВестиНУ = ПрограммаБухучета <> Перечисления.ПрограммыБухгалтерскогоУчета.ДругаяПрограммаБухучета;	 
	ПоказыватьСчетаНУ = Истина;
	ВестиНУ = Истина;
	УчетнаяПолитикаПоНалоговомуУчету = глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете");
	//НалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(УчетнаяПолитикаПоНалоговомуУчету, ДатаПериода, Организация);
	УчетнаяПолитика = УчетнаяПолитикаПоНалоговомуУчету[ДатаПериода][Организация];
	
	УСН = УчетнаяПолитика.УСН;
	ОбъектНалогообложенияУСНДДоходыМинусРасходы = УчетнаяПолитика.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы;
	ЭтоИП = Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо; //индивидуальный предприниматель
	
	ВидимостьУСН = УСН и ОбъектНалогообложенияУСНДДоходыМинусРасходы;
	ВидимостьИП  = ЭтоИП и НЕ УСН;
	ВидимостьНУ  = ВестиНУ и Не ЭтоИП и Не УСН и Не ПоказыватьСчетаНУ; // ЭУ НУ - используемые вместо счетов НУ
	ВидимостьНУСчета = ВестиНУ и Не ЭтоИП и Не УСН и ПоказыватьСчетаНУ;// ЭУ НУ - счета и субконто НУ
	//ВидимостьУчетПоПодразделениям = ПрограммаБухучета = Перечисления.ПрограммыБухгалтерскогоУчета.БухгалтерияПредприятияКорп
	//	 или ПрограммаБухучета = Перечисления.ПрограммыБухгалтерскогоУчета.БухгалтерияАвтономногоУчреждения;
	ВидимостьУчетПоПодразделениям = Истина;
	ТипКолонкаТабличногоПоля = Тип("КолонкаТабличногоПоля");
	
	Для каждого ЭлементСтруктуры Из СтруктураЭУ Цикл
		
		Ключ = ЭлементСтруктуры.Ключ;
		Если Ключ = "ВидимостьУСН" Тогда
			ПоказыватьЭУ = ВидимостьУСН;	
		ИначеЕсли Ключ = "ВидимостьИП" Тогда   
			ПоказыватьЭУ = ВидимостьИП;
		ИначеЕсли Ключ = "ВидимостьНУ" Тогда
			ПоказыватьЭУ = ВидимостьНУ;
		ИначеЕсли Ключ = "ВидимостьНУСчета" Тогда
			ПоказыватьЭУ = ВидимостьНУСчета;
		ИначеЕсли Ключ = "ВидимостьУчетПоПодразделениям" Тогда
			ПоказыватьЭУ = ВидимостьУчетПоПодразделениям;	
		КонецЕсли;	
		
		МассивЭУ = ЭлементСтруктуры.Значение;
		Для каждого Элемент Из МассивЭУ Цикл
			Элемент.Видимость = ПоказыватьЭУ;
			Если ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля Тогда
				Элемент.ИзменятьВидимость	= ПоказыватьЭУ;
			КонецЕсли;
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры


// Выводит строки показателей в документах ввода плановых начислений и удержаний
//
Процедура ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, СведенияОВидахРасчета, ИспользуютсяТарифныеРазряды = Истина, ВидРасчета = Неопределено, ТекущийВидРасчета = Ложь) Экспорт
		
	Если ВидРасчета = Неопределено Тогда
		Если ОформлениеСтроки.Ячейки.Найти("Надбавка") = Неопределено Тогда
			СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтроки.ВидРасчета);
		Иначе
			СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтроки.Надбавка);
		КонецЕсли;
	Иначе
		СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета);
	КонецЕсли;
	
	Если ТекущийВидРасчета Тогда
		Показатель						= "ТекущийПоказатель";
		Валюта							= "ТекущаяВалюта";
		ТарифныйРазряд					= "ТекущийТарифныйРазряд";
		НаименованиеПоказательТР		= "НаименованиеТекущийПоказательТР";
		ОформлениеСтроки.Ячейки.До.Видимость	= Ложь;
		ОформлениеСтроки.Ячейки.После.Видимость	= Ложь;
	Иначе
		Показатель						= "Показатель";
		Валюта							= "Валюта";
		ТарифныйРазряд					= "ТарифныйРазряд";
		НаименованиеПоказательТР		= "НаименованиеПоказательТР";
		ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;
	КонецЕсли;
	
	ТолькоПросмотрЯчеек = Ложь;
	
	ЕстьПоказатели = Ложь;
	Для СчПоказателей = 1 По 6 Цикл
		УстановитьТолькоПросмотр = ТолькоПросмотрЯчеек;
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			
			Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
				ЕстьПоказатели = Истина;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Истина;
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
				Если ИспользуютсяТарифныеРазряды Тогда
					ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
					ОформлениеСтроки.Ячейки[ТарифныйРазряд + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
			ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] И ИспользуютсяТарифныеРазряды Тогда
				ЕстьПоказатели = Истина;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки[Показатель + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки[Валюта + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Истина;
				ОформлениеСтроки.Ячейки[ТарифныйРазряд +СчПоказателей].Видимость = Истина;
			Иначе
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				Если ИспользуютсяТарифныеРазряды Тогда
					ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
					ОформлениеСтроки.Ячейки[ТарифныйРазряд + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
			ОформлениеСтроки.Ячейки[Показатель + СчПоказателей].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
			ОформлениеСтроки.Ячейки[Валюта + СчПоказателей].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
			ОформлениеСтроки.Ячейки[Валюта + СчПоказателей].ТолькоПросмотр = (НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"]) ИЛИ (УстановитьТолькоПросмотр);
			ОформлениеСтроки.Ячейки[Показатель + СчПоказателей].ТолькоПросмотр = УстановитьТолькоПросмотр;
		Иначе
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки[Показатель + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки[Валюта + СчПоказателей].Видимость = Ложь;
			Если ИспользуютсяТарифныеРазряды Тогда
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки[ТарифныйРазряд +СчПоказателей].Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если не ЕстьПоказатели Тогда
		Если ЗначениеЗаполнено(ВидРасчета) Тогда
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель1"].УстановитьТекст("<вводится ежемесячно>");
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель1"].Видимость = Истина;
		Иначе
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель1"].Видимость = Ложь;
		КонецЕсли;
		ОформлениеСтроки.Ячейки[Показатель+"1"].ТолькоПросмотр = Истина;
		Если ИспользуютсяТарифныеРазряды Тогда
			ОформлениеСтроки.Ячейки["НаименованиеПоказательТР1"].Видимость = Ложь;
			ОформлениеСтроки.Ячейки[ТарифныйРазряд + "1"].Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПриВыводеСтрокиПлановыхНачислений


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИНФОРМАЦИИ В ФОРМЕ



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ИНФОРМАЦИИ В ФОРМЕ


// Формирует представление переданного код дохода с "предметной" точки зрения
//
// Параметры
//  , КодДоходаЕСН - СправочникСсылка.ДоходыЕСН - описываемый код дохода
//
// Возвращаемое значение:
//   строка - сформированное представление
//
Функция ПолучитьПредставлениеКодаДоходаПоЕСН(КодДоходаЕСН) Экспорт
	
	Если КодДоходаЕСН = Справочники.ДоходыЕСН.ВыплатыЗаСчетПрибыли Тогда
		РасшифровкаКодДоходаЕСН = "Не является объектом налогообложения по ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование согласно п.3 ст. 236 НК РФ (выплаты за счет прибыли)"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ДоговораАвторские Тогда
		РасшифровкаКодДоходаЕСН = "При исчислении ЕСН (в части Федерального бюджета и ФОМС) и взносов на обязательное пенсионное страхование учитываются произведенные расходы согласно п.5 ст.237 НК РФ, не облагаются целиком ЕСН в части ФСС согласно п.3 ст.238 НК РФ"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ДоговораГПХ Тогда
		РасшифровкаКодДоходаЕСН = "Облагаются целиком ЕСН (в части Федерального бюджета и ФОМС) и взносами на обязательное пенсионное страхование, не облагаются целиком ЕСН в части ФСС согласно п.3 ст.238 НК РФ"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.Матпомощь Тогда
		РасшифровкаКодДоходаЕСН = "Облагается ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование частично согласно пп. 15 п.1 ст. 238 НК РФ (материальная помощь)"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.МатпомощьПриРожденииРебенка Тогда
		РасшифровкаКодДоходаЕСН = "Облагается ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование частично согласно пп. 3 п.1 ст. 238 НК РФ (материальная помощь при рождении ребенка)"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом Тогда
		РасшифровкаКодДоходаЕСН = "Является объектом налогообложения, но не облагается целиком ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование согласно пп. 1–12 ст. 238 НК РФ (кроме пособий за счет ФСС)"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.НеЯвляетсяОбъектом Тогда
		РасшифровкаКодДоходаЕСН = "Не является объектом налогообложения по ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование согласно п.1 ст. 236 НК РФ"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ОблагаетсяЦеликом Тогда
		РасшифровкаКодДоходаЕСН = "Облагается целиком ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС Тогда
		РасшифровкаКодДоходаЕСН = "Не облагаются целиком ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование согласно п.1 ст. 238 НК РФ "
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.РаспределятьПоБазовымНачислениям Тогда
		РасшифровкаКодДоходаЕСН = "Порядок учета начисления определяется по расчетной базе"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ПустаяСсылка() Тогда
		РасшифровкаКодДоходаЕСН = "Не указан порядок учета начисления для целей исчисления ЕСН и взносов на обязательное пенсионное страхование"
	Иначе
		РасшифровкаКодДоходаЕСН = "Не отражается в учете для целей исчисления ЕСН и взносов на обязательное пенсионное страхование"
	КонецЕсли;
	
	Возврат РасшифровкаКодДоходаЕСН	
	
КонецФункции // ПолучитьПредставлениеСпособаОтраженияНачисленияВУчетах()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРЕДСТАВЛЕНИЯ ИНФОРМАЦИИ В ФОРМЕ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОБРАБОТКИ МЕНЮ



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ и ФУНКЦИИ ИНФОРМИРОВАНИЯ ПОЛЬЗОВАТЕЛЯ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ ДОКУМЕНТОВ



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ИСТОРИЕЙ ВВОДА ЗНАЧЕНИЙ




////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура управляет видимостью показателей в табличном поле
// Парметры:
//		ТабличноеПоле - Табличное поле, в котором необходимо установить видимость показателей
//		ОформленияСтрокТабличногоПоля - оформления строк табличного поля
//		СведенияОВидахРасчета - соответствие, в котором хранятся сведения о виде расчета
Процедура ОбработатьОтображениеПоказателейДляРасчета(ТабличноеПоле, ОформленияСтрокТабличногоПоля, СведенияОВидахРасчета, Режим = "ПриРасчете", ВидРасчета = Неопределено) Экспорт

	// показатели будут видны, если в табличном поле включена видимость колонки Показатели
	Колонки = ТабличноеПоле.Колонки;
	ПоказыватьПоказатели = Колонки.Показатели.Видимость;
	
	ЕстьПоказатели = Ложь;
	
	Для каждого ОформлениеСтроки Из ОформленияСтрокТабличногоПоля Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		Если ВидРасчета = Неопределено Тогда
			Если ДанныеСтроки.ВидРасчета = Неопределено Тогда
				ДанныеСтрокиВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
			Иначе
				ДанныеСтрокиВидРасчета = ДанныеСтроки.ВидРасчета;
			КонецЕсли;
		Иначе
			ДанныеСтрокиВидРасчета = ВидРасчета;
		КонецЕсли;
		СведенияОВидеРасчета = РаботаСДиалогамиПереопределяемый.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтрокиВидРасчета, Режим);
		
		Для СчПоказателей = 1 По 6 Цикл
			
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
				
				ВидимостьПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] и ПоказыватьПоказатели И
										(Не ЗначениеЗаполнено(ВидРасчета) Или (НЕ ЗначениеЗаполнено(СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"]) 
										Или СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 0 Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно) И ЗначениеЗаполнено(ВидРасчета));
				ВидимостьНаименованияПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] и ПоказыватьПоказатели И 
											(Не ЗначениеЗаполнено(ВидРасчета) Или СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 0 Или (НЕ ЗначениеЗаполнено(СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"]) Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно) И ЗначениеЗаполнено(ВидРасчета));
				
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = ВидимостьНаименованияПоказателя;
				
				// размеры показателя будут доступны только для видимых и изменяемых показателей
				Если ВидимостьПоказателя и ПоказыватьПоказатели Тогда
					
					Если Режим = "ПриРасчете" Тогда
					
						ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется
						Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно
						Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически;
						
					ИначеЕсли Режим = "РазовыеНачисленияИУдержания" Тогда
						ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически;
					КонецЕсли;
						
				КонецЕсли;
				
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
				
				// если отображается наименование - пропишем текст
				Если ВидимостьНаименованияПоказателя Тогда
					ЕстьПоказатели = Истина;
					Если ПоказыватьПоказатели Тогда
						ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
					ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] и ПоказыватьПоказатели Тогда
						ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если не ЕстьПоказатели Тогда
			Если ЗначениеЗаполнено(ВидРасчета) Тогда
				ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.Видимость			= Истина;
				ОформлениеСтроки.Ячейки["Показатель1"].ТолькоПросмотр				= Истина;
				ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.УстановитьТекст("<рассчитываются автоматически>");
			Иначе
				ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.Видимость			= Ложь;
				ОформлениеСтроки.Ячейки["Показатель1"].ТолькоПросмотр				= Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;
		
	КонецЦикла;

КонецПроцедуры //ОбработатьОтображениеПоказателейДляРасчета()

// Вызывает процедуру показа Веб страницы и передает в нее адрес страницы с отзывом о конфигурации  
//
Процедура ПерейтиНаСтраницуОтзывОПрограмме() Экспорт

	РаботаСДиалогами.ПоказатьВебСтраницу("www.1c.ru/usability/inquirer/hr.jsp", "Отзыв о программе", "ОтзывОПрограмме");	

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОБРАБОТКИ МЕНЮ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ В ФОРМЕ




////////////////////////////////////////////////////////////////////////////////
// процедуры поддержки команд в журналах документов




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ИНФОРМАЦИИ В ФОРМЕ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ВВОДА ДАТЫ КАК МЕСЯЦА



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА КОММЕНТИРОВАНИЯ ДЕЙСТВИЙ



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВСТРОЕННОЙ СПРАВКИ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ИЗМЕНЕНИЯ ВИДИМОСТИ ПАНЕЛЕЙ







///////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЛАНОВ ВИДОВ РАСЧЕТА

// Функция возвращает структуру с отборами для выбора из ПланыВидовРасчета.ОсновныеНачисленияОрганизаций 
// в.р., являющегося надбавкой 
// структура параметров отбора может использоваться в процедурах АвтоПодборТекстаВЭлементеУправления
//
// Параметры
//  ВидДоговора  - ВидДоговора
//
// Возвращаемое значение:
//   Структура   - структура, ключ - имя реквизита ПВР, значение - массив со значениями отбора
//
Функция ПолучитьСтруктуруОтборовНадбавокСотрудника(ВидДоговора) Экспорт
	
	ВидыВремени = Новый Массив;
	ВидыВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
	
	СтруктураПараметров = Новый Структура("ВидВремени", ВидыВремени);
	
	СсылкаПредопределенный = Новый Массив;
	СсылкаПредопределенный.Добавить(Ложь);
	
	СтруктураПараметров.Вставить("Предопределенный", СсылкаПредопределенный);
	
	СпоcобыРасчета = Новый Массив;
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула);
	
	СтруктураПараметров.Вставить("СпособРасчета", СпоcобыРасчета);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Функция возвращает структуру с отборами для выбора из ПланыВидовРасчета.ОсновныеНачисленияОрганизаций 
// основного начисления сотрудника, регистрирующего отработанное время
// структура параметров отбора может использоваться в процедурах АвтоПодборТекстаВЭлементеУправления
//
// Параметры
//  ВидДоговора  - ВидДоговора
//
// Возвращаемое значение:
//   Структура   - структура, ключ - имя реквизита ПВР, значение - массив со значениями отбора
//
Функция ПолучитьСтруктуруОтборовОсновногоНачисленияСотрудника(ВидДоговора) Экспорт
	
	ВидыВремени = Новый Массив;
	ВидыВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
	
	СтруктураПараметров = Новый Структура("ВидВремени", ВидыВремени);
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьСтруктуруОтборовОсновногоНачисленияСотрудника()

// Эта функция возвращает информацию о виде расчета из переданного соответствия
// Если в соответствии не найдена информация о виде расчета - она подготавливается и 
// помещается в соответствие
// Применяется для работы с формами, в которых активно требуется получать 
// информащцию о видах расчета, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОВидахРасчета - соответствие, у котрого в качестве ключа - ПланВидовРасчетаСсылка, а 
//  				  в качестве значения - структура из элементов
//					  РазмерТребуется - булево - если да, то при вводе такого 
//										вида расчета требуется проставлять значение "размер" 
//										(суммы, проценты и проч. показатели, используемые при расчете)
//
//	ВидРасчета - ПланВидовРасчетаСсылка
//
// Возвращаемое значение:
//  Описанная выше структура
//
Функция ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета, Режим = "ПлановыеНачисления") Экспорт
	
	СведенияОВидеРасчета = СведенияОВидахРасчета[ВидРасчета];
	
	Если СведенияОВидеРасчета = Неопределено Тогда
		
		СведенияОВидеРасчета = Новый Структура("КоличествоПоказателей,РазмерТребуется,НеТребуетВалюты,ТребуетВводаТарифногоРазряда,ФактКоличествоПоказателей, ИспользуетРасчетнуюБазу",1, Ложь, Ложь, Ложь,0, Ложь);
																					
		Если ЗначениеЗаполнено(ВидРасчета) Тогда
			
			ТипВидРасчета = ТипЗнч(ВидРасчета);
			ЭтоОсновноеНачислениеОрганизаций = ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций");
			ЭтоДополнительноеНачислениеОрганизаций = ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций");
			ЭтоУдержаниеОрганизаций = ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций");
			ЭтоУправленческоеНачисление = ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления");
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Показатели.Показатель,
			|	ВЫБОР
			|		КОГДА  НЕ Показатели.ЗапрашиватьПриКадровыхПеремещениях
			|			ТОГДА ИСТИНА";
			Если ЭтоОсновноеНачислениеОрганизаций ИЛИ ЭтоУправленческоеНачисление Тогда
				Запрос.Текст = Запрос.Текст + "
				|       ИНАЧЕ
				|			ВЫБОР 
				|				КОГДА Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная) ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
				|				ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая) ИЛИ Показатели.Показатель.ТарифнаяСтавка
				|					ТОГДА НЕ Показатели.Ссылка.ЗачетОтработанногоВремени
				|				ИНАЧЕ ЛОЖЬ
				|			КОНЕЦ";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
			|	КОНЕЦ КАК НЕЗапрашиватьПриКадровыхПеремещениях,
			|	ВЫБОР
			|		КОГДА Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ПустаяСсылка) 
			|			ТОГДА ИСТИНА";
			Если ЭтоОсновноеНачислениеОрганизаций ИЛИ ЭтоУправленческоеНачисление Тогда
				Запрос.Текст = Запрос.Текст + "
				|	    ИНАЧЕ
				|			ВЫБОР 
				|				КОГДА Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная) ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
				|					ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая) ИЛИ Показатели.Показатель.ТарифнаяСтавка
				|						ТОГДА НЕ Показатели.Ссылка.ЗачетОтработанногоВремени
				|				КОГДА Показатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
				|						ТОГДА Истина
				|					ИНАЧЕ Показатели.Показатель.Предопределенный
				|			КОНЕЦ";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|		КОГДА Показатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
				|			ТОГДА Истина
				|		ИНАЧЕ Показатели.Показатель.Предопределенный";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "		
			|			
			|	КОНЕЦ КАК Предопределенный,
			|	ВЫБОР КОГДА Показатели.Показатель.Предопределенный И Показатели.Показатель <> Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
			|				И Показатели.Показатель <> Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная) 
			|				И Показатели.Показатель <> Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая) 
			|			ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоПредопределенный,
			|	ВЫБОР КОГДА Показатели.Показатель.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ВыбранаВалюта,
			|	Показатели.Показатель.Наименование КАК ПоказательНаименование,
			|	Показатели.Показатель.ТипПоказателя,
			|	Показатели.Показатель.Валюта КАК ВалютаПоказателя,
			|	ЕСТЬNULL(Показатели.Показатель.ВозможностьИзменения, ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)) КАК ПоказательВозможностьИзменения,
			|	Показатели.НомерСтроки,
			|	Максимум(Показатели.НомерСтроки) КАК КоличествоПоказателей,
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ";
			Если ЭтоОсновноеНачислениеОрганизаций Тогда
				Запрос.Текст = Запрос.Текст + "
							|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели";
			ИначеЕсли ЭтоДополнительноеНачислениеОрганизаций Тогда
				Запрос.Текст = Запрос.Текст + "
							|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели";
			ИначеЕсли ЭтоУдержаниеОрганизаций Тогда
				Запрос.Текст = Запрос.Текст + "
							|	ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели";
			ИначеЕсли ЭтоУправленческоеНачисление Тогда
				Запрос.Текст = Запрос.Текст + "
							|	ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели";
			ИначеЕсли ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.УправленческиеУдержания") Тогда
				Запрос.Текст = Запрос.Текст + "
							|	ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
			|				ГДЕ
			|					Показатели.Ссылка = &Ссылка
			|					И Показатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБаза))
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ИспользуетРасчетнуюБазу			
			|ИЗ";
			Если ЭтоОсновноеНачислениеОрганизаций Тогда
				Запрос.Текст = Запрос.Текст + "
				|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели";
			ИначеЕсли ЭтоДополнительноеНачислениеОрганизаций Тогда
				Запрос.Текст = Запрос.Текст + "
				|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели";
			ИначеЕсли ЭтоУдержаниеОрганизаций Тогда
				Запрос.Текст = Запрос.Текст + "
				|	ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели";
			ИначеЕсли ЭтоУправленческоеНачисление Тогда
				Запрос.Текст = Запрос.Текст + "
				|	ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели";
			ИначеЕсли ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.УправленческиеУдержания") Тогда
				Запрос.Текст = Запрос.Текст + "
				|	ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	Показатели.Ссылка = &Ссылка
			|СГРУППИРОВАТЬ ПО
			|	Показатели.Показатель,
			|	ВЫБОР
			|		КОГДА  НЕ Показатели.ЗапрашиватьПриКадровыхПеремещениях
			|			ТОГДА ИСТИНА";
			Если ЭтоОсновноеНачислениеОрганизаций ИЛИ ЭтоУправленческоеНачисление Тогда
				Запрос.Текст = Запрос.Текст + "
				|       ИНАЧЕ
				|			ВЫБОР 
				|				КОГДА Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная) ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
				|				ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая) ИЛИ Показатели.Показатель.ТарифнаяСтавка
				|					ТОГДА НЕ Показатели.Ссылка.ЗачетОтработанногоВремени
				|				ИНАЧЕ ЛОЖЬ
				|			КОНЕЦ";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ПустаяСсылка) 
			|			ТОГДА ИСТИНА";
			Если ЭтоОсновноеНачислениеОрганизаций ИЛИ ЭтоУправленческоеНачисление Тогда
				Запрос.Текст = Запрос.Текст + "
				|	    ИНАЧЕ
				|			ВЫБОР 
				|				КОГДА Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная) ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
				|				ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая) ИЛИ Показатели.Показатель.ТарифнаяСтавка
				|					ТОГДА НЕ Показатели.Ссылка.ЗачетОтработанногоВремени
				|				КОГДА Показатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
				|						ТОГДА Истина				
				|				ИНАЧЕ Показатели.Показатель.Предопределенный
				|			КОНЕЦ";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|		ИНАЧЕ Показатели.Показатель.Предопределенный";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
			|	КОНЕЦ,
			|	Показатели.Показатель.Валюта,
			|	Показатели.Показатель.Наименование,
			|	Показатели.Показатель.ТипПоказателя,
			|	ЕСТЬNULL(Показатели.Показатель.ВозможностьИзменения, ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)),
			|	Показатели.НомерСтроки";
			
			Запрос.УстановитьПараметр("Ссылка",ВидРасчета);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				
				СтрокаТаблицыСведений = РезультатЗапроса.Выбрать();
				Пока СтрокаТаблицыСведений.Следующий() Цикл
					
					СведенияОВидеРасчета["КоличествоПоказателей"] 		= Макс(СведенияОВидеРасчета["КоличествоПоказателей"], СтрокаТаблицыСведений["КоличествоПоказателей"]);
					СведенияОВидеРасчета["ФактКоличествоПоказателей"] 	= Макс(СтрокаТаблицыСведений["КоличествоПоказателей"],СведенияОВидеРасчета["ФактКоличествоПоказателей"]);
					СведенияОВидеРасчета["ИспользуетРасчетнуюБазу"] 	= СтрокаТаблицыСведений["ИспользуетРасчетнуюБазу"];
					
					СчПоказателей 			= СтрокаТаблицыСведений.НомерСтроки;
					ВозможностьИзменения	= СтрокаТаблицыСведений.ПоказательВозможностьИзменения;
					ТипПоказателя			= СтрокаТаблицыСведений.ПоказательТипПоказателя;
					
					
					СведенияОВидеРасчета.Вставить("ВалютаПоказателя" + СчПоказателей,СтрокаТаблицыСведений["ВалютаПоказателя"]);
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность",3);
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "ВозможностьИзменения",ВозможностьИзменения);
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Наименование",СтрокаТаблицыСведений["ПоказательНаименование"]);
					
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей ,СтрокаТаблицыСведений.Показатель);
					
					Если СтрокаТаблицыСведений["НЕЗапрашиватьПриКадровыхПеремещениях"] <> Null И СтрокаТаблицыСведений["НЕЗапрашиватьПриКадровыхПеремещениях"] И Не СтрокаТаблицыСведений["ЭтоПредопределенный"] Тогда
						Если Режим = "ПлановыеНачисления" Тогда
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
						Иначе
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" ,Истина);
							Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
								
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость" , Истина);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость" , Истина);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Наименование" , СтрокаТаблицыСведений["ПоказательНаименование"]);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" , Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость" , Ложь);
								СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость" , Ложь);	
								
							ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Числовой Или ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Процентный Или ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.СуммаПоказателя Тогда
								
								
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
								СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
								
							ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный Тогда
								
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
								СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", СтрокаТаблицыСведений["ВыбранаВалюта"]);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность",2);
								
							ИначеЕсли (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
								Или (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная) Тогда
								
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
								СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
								
							Иначе
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", СтрокаТаблицыСведений["ВыбранаВалюта"]);
								СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							КонецЕсли;
							
						КонецЕсли;
					ИначеЕсли СтрокаТаблицыСведений["Предопределенный"] <> Null И СтрокаТаблицыСведений["Предопределенный"] Тогда
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
					ИначеЕсли Режим = "ПлановыеНачисления" и (СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно
						Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически) Тогда
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость" , Ложь);
						СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость" , Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость" , Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость" , Ложь);
					Иначе
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" ,Истина);
						Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
							
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость" , Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость" , Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Наименование" , СтрокаТаблицыСведений["ПоказательНаименование"]);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" , Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость" , Ложь);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость" , Ложь);	
							
						ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Числовой Тогда
							
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							
						ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный Тогда
							
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", СтрокаТаблицыСведений["ВыбранаВалюта"]);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность",2);
							
							
						ИначеЕсли (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
							Или (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная) Тогда
							
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							
						Иначе
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							
						КонецЕсли;
					КонецЕсли;
					
					Если СтрокаТаблицыСведений.Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная
						Или СтрокаТаблицыСведений.Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная Тогда
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность",2);
					КонецЕсли;
				КонецЦикла;
			Иначе
				СведенияОВидеРасчета.Вставить("Показатель1Наименование", "");
				СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Ложь);
				СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Ложь);
				СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
				СведенияОВидеРасчета.Вставить("Показатель1Видимость", Ложь);
				СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
				СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
				СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Ложь);
				СведенияОВидеРасчета.Вставить("ВалютаПоказателя1");
			КонецЕсли;
				
	 		ИзменениеПоказателяНеУказано = Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка();
					
	       // заполним для регламентированных способов оплаты труда
			Если ЭтоОсновноеНачислениеОрганизаций Или ЭтоДополнительноеНачислениеОрганизаций Или ЭтоУдержаниеОрганизаций Тогда
				СтруктураВидаРасчета = Новый Структура("СпособРасчета,ТребуетВводаТарифногоРазряда");
				ЗаполнитьЗначенияСвойств(СтруктураВидаРасчета,ВидРасчета);
				Если СтруктураВидаРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
					СведенияОВидеРасчета.Вставить("ФактКоличествоПоказателей",0);
					СведенияОВидеРасчета["Показатель1Точность"] = 3;
					Если СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням 
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						НаименованиеТарифнойСтавки = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная;
						
						Если СтруктураВидаРасчета.ТребуетВводаТарифногоРазряда Тогда
							СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР1Наименование", НаименованиеТарифнойСтавки);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						Иначе
							СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1Наименование", НаименованиеТарифнойСтавки);
							СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						КонецЕсли;
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке 
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						
						Если СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке Тогда
							НаименованиеТарифнойСтавки = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная;
						Иначе
							НаименованиеТарифнойСтавки = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая;
						КонецЕсли;
						
						Если СтруктураВидаРасчета.ТребуетВводаТарифногоРазряда Тогда
							СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР1Наименование", НаименованиеТарифнойСтавки);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						Иначе
							СведенияОВидеРасчета.Вставить("Показатель1Наименование", НаименованиеТарифнойСтавки);
							СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						КонецЕсли;
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом 
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтОблагаемыхЕСННачислений Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", ?(ЭтоУдержаниеОрганизаций, "Процент удержания", "Процент оплаты"));
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент оплаты");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						Если Режим = "ПлановыеНачисления" Тогда
							СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется);
							СведенияОВидеРасчета.Вставить("КоличествоПоказателей",0);
						КонецЕсли;
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Среднедневной заработок");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", ИзменениеПоказателяНеУказано);
						СведенияОВидеРасчета.Вставить("Показатель2Наименование", "Количество детей");
						СведенияОВидеРасчета.Вставить("Показатель2Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель2Точность", 0);
						СведенияОВидеРасчета.Вставить("Показатель2ВозможностьИзменения", ИзменениеПоказателяНеУказано);
						СведенияОВидеРасчета.Вставить("Валюта2Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель3Наименование", " в т.ч. первых");
						СведенияОВидеРасчета.Вставить("Показатель3Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель3НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель3Точность", 0);
						СведенияОВидеРасчета.Вставить("Валюта3Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель3ВозможностьИзменения", ИзменениеПоказателяНеУказано);
						СведенияОВидеРасчета.Вставить("КоличествоПоказателей",3);
						СведенияОВидеРасчета.Вставить("ПоказательТР2Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР3Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР2НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР3НаименованиеВидимость", Ложь);
						
						СведенияОВидеРасчета.Вставить("ПоказательТР4Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР5Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР4НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР5НаименованиеВидимость", Ложь);
						
						СведенияОВидеРасчета.Вставить("Показатель4Наименование", "");
						СведенияОВидеРасчета.Вставить("Показатель4Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель4НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель5Наименование", "");
						СведенияОВидеРасчета.Вставить("Показатель5Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель5НаименованиеВидимость", Ложь);
						
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо3Лет Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Размер пособия");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Точность", 0);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
						Если Режим = "ПлановыеНачисления" Тогда
							СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						КонецЕсли;
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", ?(Режим = "ПлановыеНачисления","Процент доплаты","Тарифная ставка"));
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке
						Или  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням
						Или  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам
						Или  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке Тогда
						Если Режим = "ПлановыеНачисления" Тогда
							СведенияОВидеРасчета["КоличествоПоказателей"] = 0;
							СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 0;
							СведенияОВидеРасчета.Вставить("Показатель1Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Ложь);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						Иначе
							СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Тарифная ставка");
							СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Истина);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						КонецЕсли;
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
						Если Режим = "ПлановыеНачисления" Тогда
							СведенияОВидеРасчета["КоличествоПоказателей"] = 0;
							СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 0;
							СведенияОВидеРасчета.Вставить("Показатель1Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Ложь);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						Иначе
							СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент оплаты");
							СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Истина);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						КонецЕсли;
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке 
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент среднего заработка");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);	
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
						Если Режим = "ПлановыеНачисления" Тогда
							СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						КонецЕсли;
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Тарифная ставка");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Или
						СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Сумма");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом 
						Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент удержаний");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Фиксированная сумма");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
					ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент сбора");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
					ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("КоличествоПоказателей",0);
					ИначеЕсли ПроведениеРасчетов.СпособРасчетаТребуетРазмер(СтруктураВидаРасчета.СпособРасчета) Тогда
						СведенияОВидеРасчета.Вставить(СведенияОВидеРасчета.РазмерТребуется, Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						Если НЕ ПроведениеРасчетов.СпособРасчетаНеТребуетВалюты(СтруктураВидаРасчета.СпособРасчета) И Найти(Строка(СтруктураВидаРасчета.СпособРасчета), "П1") = 0 Тогда
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВидРасчета = ПланыВидовРасчета.УправленческиеУдержания.УдержаноПоБухгалтерии Тогда
				СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Удержано по бухгалтерии");
				СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
				СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
			КонецЕсли;
			
		Иначе
			СведенияОВидеРасчета.Вставить("Показатель1Наименование", "");
			СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Ложь);
			СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель1Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
			СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Ложь);
		КонецЕсли;
		
		СведенияОВидахРасчета[ВидРасчета] = СведенияОВидеРасчета;
		
	КонецЕсли;

	Возврат СведенияОВидеРасчета;
	
КонецФункции  // ПолучитьСведенияОВидеРасчетаСхемыМотивации


////////////////////////////////////////////////////////////////////////////////
// ИСПРАВЛЕНИЕ ДОКУМЕНТОВ

 ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ НАЧИСЛЕНИЙ И ПОКАЗАТЕЛЕЙ

Процедура ДобавитьОбъединенияВЗапросПоказатели(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправленческиеНачисленияПоказатели.Ссылка,
	|	УправленческиеНачисленияПоказатели.Показатель,
	|	УправленческиеНачисленияПоказатели.НомерСтроки,
	|	УправленческиеНачисленияПоказатели.ЗапрашиватьПриКадровыхПеремещениях
	|ИЗ
	|	ПланВидовРасчета.УправленческиеНачисления.Показатели КАК УправленческиеНачисленияПоказатели
	|ГДЕ
	|	УправленческиеНачисленияПоказатели.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправленческиеУдержанияПоказатели.Ссылка,
	|	УправленческиеУдержанияПоказатели.Показатель,
	|	УправленческиеУдержанияПоказатели.НомерСтроки,
	|	УправленческиеУдержанияПоказатели.ЗапрашиватьПриКадровыхПеремещениях
	|ИЗ
	|	ПланВидовРасчета.УправленческиеУдержания.Показатели КАК УправленческиеУдержанияПоказатели
	|ГДЕ
	|	УправленческиеУдержанияПоказатели.Ссылка В(&Ссылка)";

КонецПроцедуры // ДобавитьОбъединенияВЗапросПоказатели

Процедура ДобавитьОбъединенияВЗапросВидыРасчета(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправленческиеНачисления.Ссылка,
	|	УправленческиеНачисления.СпособРасчета,
	|	ЛОЖЬ,
	|	УправленческиеНачисления.ЗачетОтработанногоВремени
	|ИЗ
	|	ПланВидовРасчета.УправленческиеНачисления КАК УправленческиеНачисления
	|ГДЕ
	|	УправленческиеНачисления.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправленческиеУдержания.Ссылка,
	|	УправленческиеУдержания.СпособРасчета,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	ПланВидовРасчета.УправленческиеУдержания КАК УправленческиеУдержания
	|ГДЕ
	|	УправленческиеУдержания.Ссылка В(&Ссылка)";

КонецПроцедуры // ДобавитьОбъединенияВЗапросВидыРасчета
	
Процедура ДополнитьСведенияПВРПоТипуВР(СведенияПВРПоТипуВР) Экспорт
	
	СведенияПВРПоТипуВР.Вставить(Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления"), 				Новый Структура("Имя, ЭтоНачисление, ЭтоДополнительноеНачисление, ЭтоРегламентированныйУчет", "УправленческиеНачисления", Истина, Ложь, Ложь));
	СведенияПВРПоТипуВР.Вставить(Тип("ПланВидовРасчетаСсылка.УправленческиеУдержания"), 				Новый Структура("Имя, ЭтоНачисление, ЭтоДополнительноеНачисление, ЭтоРегламентированныйУчет", "УправленческиеУдержания", Ложь, Ложь, Ложь));
	
КонецПроцедуры // СведенияПВРПоТипуВР

Процедура ДополнитьСведенияОВидеРасчета(СведенияОВидеРасчета, ВидРасчета = Неопределено) Экспорт
	
	Если СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету Тогда
		СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Сумма");
		СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
		СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
		СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
		СведенияОВидеРасчета.Вставить("КоличествоПоказателей",0);
		СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
	КонецЕсли;
	
	Если ВидРасчета = ПланыВидовРасчета.УправленческиеУдержания.УдержаноПоБухгалтерии Тогда
		СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Удержано по бухгалтерии");
		СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
		СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
		СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
		СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
	КонецЕсли;
	
КонецПроцедуры // ДополнитьСведенияОВидеРасчета

Функция ПолеЗапросаВводВалютныхЗначений() Экспорт
	
	Возврат "
	|	ВЫБОР
	|		КОГДА Показатели.Валюта В (ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка), Константы.ВалютаУправленческогоУчета)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВводВалютныхЗначений,
	|";
	
КонецФункции // ПолеЗапросаВводВалютныхЗначений

Функция СкрыватьПредопределенныйПоказатель(Показатель, Режим) Экспорт
	
	Возврат Истина;
	
КонецФункции // СкрыватьПредопределенныйПоказатель

Функция ПолеЗапросаТочностьПредставленияПоказателя() Экспорт
	
	Возврат УправлениеПоказателямиСхемМотивации.ПолеЗапросаТочностьПредставленияПоказателя();
	
КонецФункции // ПолеЗапросаТочностьПредставленияПоказателя

// Проверяет способ расчета на предмет поддержке в этой конфигурации, если поддерживается
// возвращает Истина
//
// Параметры
//  СпособРасчета  		  - Перечисление.СпособыРасчетаОплатыТруда
//
// Возвращаемое значение:
//   Булево   - Истина - Поддерживается, Ложь - не поддерживается
//
Функция ЕстьЧемДополнитьСведенияОСпособеРасчета(СпособРасчета) Экспорт

	Возврат Ложь;

КонецФункции

// Дополняет структуру сведений о показателях для предопределенного способа расчета
//
// Параметры
//  СпособРасчета  		  - Перечисление.СпособыРасчетаОплатыТруда
//  СведенияОВидеРасчета  - Структура, содержащия сведения о виде расчета
//
Процедура ДополнитьСведенияОСпособеРасчета(СпособРасчета, СведенияОВидеРасчета) Экспорт
	
	// В этой конфигурации дополнительных действий не предусмотрено
	
КонецПроцедуры





//////////////////////////////////////////////////////////////////////////////////

Процедура ПриНачалеВыбораВидаСубконто(Элемент, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	ТипСубконто = Тип("СправочникСсылка.Субконто");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыСубконтоХозрасчетные.Ссылка,
	|	ВидыСубконтоХозрасчетные.Наименование,
	|	ВидыСубконтоХозрасчетные.ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.ВидыСубконтоХозрасчетные КАК ВидыСубконтоХозрасчетные";
	Выборка = Запрос.Выполнить().Выбрать();
	Список = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипЗначения.СодержитТип(ТипСубконто) Тогда
			Список.Добавить(Выборка.Ссылка,Выборка.Наименование);
		КонецЕсли;
	КонецЦикла;
	
	ФормаВыбора = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПолучитьФормуВыбора(,Элемент,);
	ФормаВыбора.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаВыбора.Отбор.Ссылка.Значение      = Список;
	ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	
	ФормаВыбора.Открыть();


КонецПроцедуры


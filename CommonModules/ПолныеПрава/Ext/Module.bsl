
// Функция проверяет установлены ли у пользователя роли,
// с которыми можно запускать конфигурацию
Функция ЕстьДоступныеПраваДляЗапускаКонфигурации() Экспорт

	Возврат РольДоступна("ПолныеПрава") 
			ИЛИ РольДоступна("Пользователь")			
			//vvv
			ИЛИ РольДоступна("ПользовательПросмотр")			
			//
			ИЛИ ЕстьРолиБезОграниченияПравДоступаНаУровнеЗаписей();	
	
КонецФункции
		
Функция ЕстьРолиБезОграниченияПравДоступаНаУровнеЗаписей()
	Для Каждого Роль ИЗ ПользователиИнформационнойБазы.ТекущийПользователь().Роли Цикл
		Если Найти(Роль.Имя, "БезОграниченияПрав") <> 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;	
	Возврат Ложь;
КонецФункции

//Процедура УстановитьПараметрСеансаТекущийПользователь(ТекущийПользователь) Экспорт
//	Если ТекущийПользователь = Неопределено Тогда
//				  
//		ИмяПользователя = ИмяПользователя();			
//		Если ПустаяСтрока(ИмяПользователя) Тогда
//			// пользователь не авторизовался
//			ИмяПользователя = "НеАвторизован";
//		КонецЕсли;		
//		
//		ТекущийПользователь = Справочники.Пользователи.НайтиПоКоду(ИмяПользователя);
//		
//	КонецЕсли;	
//	
//	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;
//КонецПроцедуры	

//Процедура УстановитьПараметрыСеанса() Экспорт
//	
//	// инициализация параметра сеанса "ТекущийПользователь"
//	ПараметрыСеанса.ТекущийПользователь = УправлениеПользователями.ОпределитьТекущегоПользователя();	
//	
//	ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей = Константы.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Получить();
//	
//	// Определим типы для поиска данных в документе регистрации
//	// типы определим по регистру сведений ОбъектыДоступаДокументов
//	МассивТиповИзмерения = Метаданные.РегистрыСведений.ОбъектыДоступаДокументов.Измерения.ОбъектДоступа.Тип.Типы();
//	СоответствиеОбъектов = Новый Соответствие;
//	СоответствиеОбъектов.Вставить("ТипыОбъектовДоступа", МассивТиповИзмерения);
//	ПараметрыСеанса.МетаданныеДокументовРегистрацииОбъектовДоступа = Новый ХранилищеЗначения(СоответствиеОбъектов);
//	
//	УстановитьИзменяемыеПараметрыСеансаПользователя();
//	
//КонецПроцедуры

//Процедура УстановитьИзменяемыеПараметрыСеансаПользователя() Экспорт
//			
//	УстановитьПараметрГраницыЗапретаИзмененияДанных();
//	
//КонецПроцедуры

// Сохранение в параметре сеанса ГраницыЗапретаИзмененияДанных границ запрета изменений данных
Процедура УстановитьПараметрГраницыЗапретаИзмененияДанных() Экспорт
	       
	//vvv комментируем, непонятно зачем эта проверка
	//Если РольДоступна("ПолныеПрава") Тогда
	Если РольДоступна("ПолныеПрава") И НЕ Константы.ПрименятьДатуЗапретаДляПолныхПрав.Получить() Тогда
	//	
		ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(0));
		
		Возврат;
	КонецЕсли;
    
    ТекстЗапросаПоОрганизациям = "
    |ВЫБРАТЬ
    |       Значение(Справочник.Организации.ПустаяСсылка) как Организация
    |   ОБЪЕДИНИТЬ
    |   ВЫБРАТЬ
    |       Организации.Ссылка
    |   ИЗ 
    |       Справочник.Организации КАК Организации ";
	
    ТекстЗапросаПоОбщейДатеЗапретаРедактирования = "ВЫБРАТЬ
                                                   |    ЕстьNull(ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений, ДатаВремя(1,1,1,23,59,59)) КАК ОбщаяДата
                                                   |ИЗ
                                                   |    РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
                                                   |ГДЕ
                                                   |    ГраницыЗапретаИзмененияДанных.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
                                                   |    И ГраницыЗапретаИзмененияДанных.Пользователь = НЕОПРЕДЕЛЕНО";
    ТекстЗапросаПоПриоритетамЗаписей = "ВЫБРАТЬ
                                       |    Границы.Организация КАК Организация,
                                       |    Границы.Пользователь КАК Пользователь,
                                       |    ВЫБОР
                                       |        КОГДА Границы.Пользователь = НЕОПРЕДЕЛЕНО
                                       |            ТОГДА 3
                                       |        КОГДА Границы.Пользователь ССЫЛКА Справочник.ГруппыПользователей
                                       |                И ГруппыПользователей.Пользователь = &Пользователь
                                       |            ТОГДА 2
                                       |        КОГДА Границы.Пользователь ССЫЛКА Справочник.Пользователи
                                       |                И Границы.Пользователь = &Пользователь
                                       |            ТОГДА 1
                                       |    КОНЕЦ КАК Приоритет,
                                       |    Границы.ГраницаЗапретаИзменений КАК ГраницаЗапретаИзменений
                                       |ИЗ
                                       |    РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
                                       |        ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователей
                                       |        ПО (ГруппыПользователей.Пользователь = &Пользователь И ГруппыПользователей.Ссылка = Границы.Пользователь)";
                                       
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ  РАЗРЕШЕННЫЕ
                   |    Организации.Организация как Организация,
                   |    МИНИМУМ(ЕСТЬNULL(ТаблицаГраницыЗапрета.ГраницаЗапретаИзменений, ОбщаяДатаЗапрета.ОбщаяДата)) КАК ГраницаЗапретаИзменений,                   
                   |    ОбщаяДатаЗапрета.ОбщаяДата как ОбщаяДата
                   |ИЗ
                   | (" + ТекстЗапросаПоОрганизациям+") Как Организации  
                   |        ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                   |            Границы.Организация КАК Организация,
                   |            МИНИМУМ(Приоритеты.Приоритет) КАК Приоритет
                   |        ИЗ
                   |            РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
                   |                ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаПоПриоритетамЗаписей + ") КАК Приоритеты
                   |                ПО Границы.Организация = Приоритеты.Организация
                   |                    И Границы.Пользователь = Приоритеты.Пользователь
                   |        
                   |        СГРУППИРОВАТЬ ПО
                   |            Границы.Организация) КАК ТаблицаПриоритетов
                   |        ПО ТаблицаПриоритетов.Организация = Организации.Организация
                   |        ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаПоПриоритетамЗаписей + ") КАК ТаблицаГраницыЗапрета
                   |        ПО ТаблицаПриоритетов.Организация = ТаблицаГраницыЗапрета.Организация
                   |            И ТаблицаПриоритетов.Приоритет = ТаблицаГраницыЗапрета.Приоритет,
                   | (" + ТекстЗапросаПоОбщейДатеЗапретаРедактирования + ") Как ОбщаяДатаЗапрета
                   |СГРУППИРОВАТЬ ПО
                   |    Организации.Организация, ОбщаяДата";
	
	Запрос.УстановитьПараметр("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
    
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Соответствие = Неопределено;
	Иначе			
		Соответствие = Новый Соответствие;
		Выборка = РезультатЗапроса.Выбрать();
        ОбщаяДатаЗапрета = Неопределено;
		Пока Выборка.Следующий() Цикл
			Соответствие[Выборка.Организация] = Выборка.ГраницаЗапретаИзменений;
            Если ОбщаяДатаЗапрета = Неопределено Тогда
                ОбщаяДатаЗапрета = Выборка.ОбщаяДата;
            КонецЕсли;            
        КонецЦикла;
        
        Если НЕ ОбщаяДатаЗапрета = Неопределено Тогда
            Соответствие["ОбщаяДатаЗапретаРедактирования"] = ОбщаяДатаЗапрета;
        КонецЕсли;
        
		Если Соответствие.Количество() = 0 Тогда
			Соответствие = Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
	Если Соответствие <> Неопределено Тогда
		СохранятьСоответствие = Ложь;
		Для Каждого КлючИЗначение Из Соответствие Цикл
			ЕСли КлючИЗначение.Значение <> Дата('00010101') Тогда
				СохранятьСоответствие = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СохранятьСоответствие Тогда
			Соответствие = Неопределено;
		КонецЕсли;			
	КонецЕсли;
		
	ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Соответствие, Новый СжатиеДанных(0));
	
КонецПроцедуры

// Функция определяет наличение движения по регистрам для документа
//
Функция ОпределитьНаличиеДвиженийПоРегистратору(ДокументСсылка) Экспорт
	ТекстЗапроса = "";	
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданнныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданнныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение ИЗ МетаданнныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// при выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Индексы.Добавить("Имя");
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданнныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение ИЗ МетаданнныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

Процедура ЗаписатьНаборЗаписейНаСервере(ИмяРегистра, Регистратор, ТаблицаДвижений = Неопределено) Экспорт	
	
	Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(Регистратор);
	Если ТаблицаДвижений <> Неопределено Тогда
		Набор.мТаблицаДвижений = ТаблицаДвижений;
		ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(Набор);
	КонецЕсли;
	Набор.Записать();
	
КонецПроцедуры

Процедура ОпределитьФактИспользованияРИБ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Полный.Ссылка
	               |ИЗ
	               |	ПланОбмена.Полный КАК Полный
	               |ГДЕ
	               |	Полный.Ссылка <> &ЭтотУзел";
				   
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.Полный.ЭтотУзел());
	ПараметрыСеанса.ИспользованиеРИБ = НЕ Запрос.Выполнить().Пустой();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоОрганизации.Ссылка
	               |ИЗ
	               |	ПланОбмена.ПоОрганизации КАК ПоОрганизации
	               |ГДЕ
	               |	ПоОрганизации.Ссылка <> &ЭтотУзелПоОрганизации";
				   
	Запрос.УстановитьПараметр("ЭтотУзелПоОрганизации", ПланыОбмена.ПоОрганизации.ЭтотУзел());
		
	ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации = НЕ Запрос.Выполнить().Пустой();
	
	ПараметрыСеанса.ИспользованиеРИБ = ПараметрыСеанса.ИспользованиеРИБ ИЛИ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации;
	
	ПараметрыСеанса.ПрефиксУзлаРаспределеннойИнформационнойБазы = СокрЛП(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить());
	
	Если ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		МассивВсехУзлов = ПроцедурыОбменаДаннымиПоОрганизации.ПолучитьМассивВсехУзлов();
		
		ПараметрыСеанса.ВсеУзлыОбменаПоОрганизациям = Новый ФиксированныйМассив(МассивВсехУзлов);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	Организации.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Организации КАК Организации";
					   
		СоотвествиеУзловИОрганизаций = Новый Соответствие;			   
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МассивУзлов = ПроцедурыОбменаДаннымиПоОрганизации.ПолучитьЗапросомМассивУзловПоОрганизации(Выборка.Ссылка);
			СоотвествиеУзловИОрганизаций.Вставить(Выборка.Ссылка, МассивУзлов);
						
		КонецЦикла;
		
		// пустаю организацию надо в список добавить
		МассивУзлов = ПроцедурыОбменаДаннымиПоОрганизации.ПолучитьЗапросомМассивУзловПоОрганизации(Справочники.Организации.ПустаяСсылка());
		СоотвествиеУзловИОрганизаций.Вставить(Справочники.Организации.ПустаяСсылка(), МассивУзлов);
		
		ПараметрыСеанса.СоответствиеОрганизацийИУзловОбменаПоОрганизации = Новый ХранилищеЗначения(СоотвествиеУзловИОрганизаций);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет проверку дублей в справочнике ФизическиеЛица
// Проверка происходит по паспортным данным, ИНН, ПФР и ФИО
//
Процедура ПроверитьДублиФизлиц(Ссылка, ЗаписьПаспортныхДанных = Неопределено, ИНН, ПФР, ФИО) Экспорт
	
	ЕстьДублиПаспортныхДанных	= Ложь;
	ЕстьДублиИНН				= Ложь;
	ЕстьДублиПФР				= Ложь;
	
	Если ЗаписьПаспортныхДанных <> Неопределено И (
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументВид) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументСерия) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументНомер) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументДатаВыдачи)) Тогда
		 //ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументКодПодразделения)) Тогда
		
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",						Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ДокументВид",				ЗаписьПаспортныхДанных.ДокументВид);
		ЗапросПоДублям.УстановитьПараметр("ДокументСерия",				ЗаписьПаспортныхДанных.ДокументСерия);
		ЗапросПоДублям.УстановитьПараметр("ДокументНомер",				ЗаписьПаспортныхДанных.ДокументНомер);
		ЗапросПоДублям.УстановитьПараметр("ДокументДатаВыдачи",			ЗаписьПаспортныхДанных.ДокументДатаВыдачи);
		//ЗапросПоДублям.УстановитьПараметр("ДокументКодПодразделения",	ЗаписьПаспортныхДанных.ДокументКодПодразделения);
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПаспортныеДанныеФизЛиц.ФизЛицо
		|ИЗ
		|	РегистрСведений.ПаспортныеДанныеФизЛиц КАК ПаспортныеДанныеФизЛиц
		|ГДЕ
		|	ПаспортныеДанныеФизЛиц.ФизЛицо <> &Ссылка
		|	И ПаспортныеДанныеФизЛиц.ДокументВид = &ДокументВид
		|	И ПаспортныеДанныеФизЛиц.ДокументСерия = &ДокументСерия
		|	И ПаспортныеДанныеФизЛиц.ДокументНомер = &ДокументНомер
		|	И ПаспортныеДанныеФизЛиц.ДокументДатаВыдачи = &ДокументДатаВыдачи";
		//|	И ПаспортныеДанныеФизЛиц.ДокументКодПодразделения = &ДокументКодПодразделения";
		
		ВыборкаЗапроса = ЗапросПоДублям.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			Сообщить("Физлицо: " + ВыборкаЗапроса.Физлицо +" имеет такие же паспортные данные как и у "+Строка(Ссылка));
			ЕстьДублиПаспортныхДанных = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",	Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ИНН",	ИНН);
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.Ссылка КАК Физлицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка <> &Ссылка
		|	И ФизическиеЛица.ИНН = &ИНН";
		
		ВыборкаЗапроса = ЗапросПоДублям.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			Сообщить("Физлицо: " + ВыборкаЗапроса.Физлицо +" имеет такой же УНП как и у "+Строка(Ссылка));
			ЕстьДублиИНН = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПФР) Тогда
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",	Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ПФР",	ПФР);
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.Ссылка КАК Физлицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка <> &Ссылка
		|	И ФизическиеЛица.СтраховойНомерПФР = &ПФР";
		
		ВыборкаЗапроса = ЗапросПоДублям.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			Сообщить("Физлицо: " + ВыборкаЗапроса.Физлицо +" имеет такой же страховой номер ПФР как и у "+Строка(Ссылка));
			ЕстьДублиПФР = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФИО) И
		 НЕ ЕстьДублиИНН И
		 НЕ ЕстьДублиПаспортныхДанных И
		 НЕ ЕстьДублиПФР Тогда
		 
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",	Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ФИО",	СтрЗаменить(ФИО, " ", ""));
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФИОФизЛиц.ФизЛицо
		|ИЗ
		|	РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
		|ГДЕ
		|	ФИОФизЛиц.ФизЛицо <> &Ссылка
		|	И ФИОФизЛиц.Фамилия + ФИОФизЛиц.Имя + ФИОФизЛиц.Отчество = &ФИО";
		
		ВыборкаЗапроса 				= ЗапросПоДублям.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			Сообщить("Физлицо с таким ФИО (" + ВыборкаЗапроса.Физлицо +") уже есть в справочнике");
			ЕстьДублиПаспортныхДанных = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМОВ RLS

// функция по пользователю ИБ определяет есть ли у него Windows авторизация
Функция НаличиеУПользователяWindowsАвторизации(Знач ИмяПользователяИБ) Экспорт
	
	Если ПустаяСтрока(ИмяПользователяИБ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// находим пользователя ИБ
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПользовательИБ.АутентификацияОС;
	
КонецФункции

Процедура ЗаписатьНаборПрав(НаборПрав, Отказ, ШапкаОшибки)
	
	Попытка
		НаборПрав.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ШапкаОшибки);
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьПраваДоступаПользователей(ТаблицаНабораПрав, СтруктураОтбора, Отказ = Ложь, ШапкаОшибки = "") Экспорт
	
	НаборПрав   = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
	
	Для Каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
		Если Не ЭлементСтруктуры.Ключ = "ВладелецПравДоступа" Тогда
			НаборПрав  .Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
			НаборПрав  .Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	// Проверим набор на корректность установленных отборов
	Если НаборПрав.Отбор.ОбъектДоступа.Использование Тогда
		ОтборПоОбъектуДоступа = Истина;
		ОбъектДоступа = НаборПрав.Отбор.ОбъектДоступа.Значение;
		НаборПрав.Отбор.ВладелецПравДоступа.Установить(ОбъектДоступа);
		НаборПрав.Отбор.ОбъектДоступа.Использование = Ложь;
	ИначеЕсли НаборПрав.Отбор.Пользователь.Использование Тогда
		Если НЕ ЗначениеЗаполнено(НаборПрав.Отбор.Пользователь.Значение) Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке(ШапкаОшибки);
			Возврат;
		КонецЕсли;
		
	Иначе
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке(ШапкаОшибки);
		Возврат;
	КонецЕсли;
	
	ТаблицаРазличияСтрок   = НаборПрав.Выгрузить();
	ТаблицаРазличияЗаписей = НаборПрав.Выгрузить();
	
	НаборПрав.Прочитать();
	
	ТаблицаСтарогоНабора = НаборПрав.Выгрузить();
	
	ТаблицаНовогоНабора  = НастройкаПравДоступа.ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(ТаблицаНабораПрав);
	
	НаборПрав.Загрузить(ТаблицаНовогоНабора);
	
	// с полными правами можно все делать
	Если Не РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нарушение прав доступа!",, ШапкаОшибки);
		Возврат;
	КонецЕсли;
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаНаследуемымиЗаписями(НаборПрав);
		
	ЗаписатьНаборПрав(НаборПрав, Отказ, ШапкаОшибки);
	
КонецПроцедуры // () 

Процедура ЗарегистрироватьПраваДоступаПользователяКОбъекту(СсылкаНового, Родитель, Отказ = Ложь) Экспорт

	Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНового)) Тогда
		Возврат;
	КонецЕсли;
	
	Если СсылкаНового.ПолучитьОбъект() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектДоступа.Установить(СсылкаНового);
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаУнаследованнымиЗаписями(НаборЗаписей, СсылкаНового, Родитель);
	
	ЗаписатьНаборПрав(НаборЗаписей, Отказ, "Не удалось записать права доступа к объекту!")
	
КонецПроцедуры

Функция ОбновитьПраваДоступаПользователейПоВладельцуДоступа(Ссылка) Экспорт
	
	ПраваДоступаПользователей = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
	
	ПраваДоступаПользователей.Отбор.ОбъектДоступа      .Установить(Ссылка);
	ПраваДоступаПользователей.Отбор.ВладелецПравДоступа.Установить(Ссылка);
	
	ПраваДоступаПользователей.Прочитать();
	
	ПраваДоступаПользователей.Отбор.ОбъектДоступа.Использование = Ложь;
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаНаследуемымиЗаписями(ПраваДоступаПользователей);
		
	Попытка
		ПраваДоступаПользователей.Записать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // () 

Процедура РегистрацияОбъектовДоступаДокумента(ДокументСсылка, ОбъектыДоступа) Экспорт
	
	Набор = РегистрыСведений.ОбъектыДоступаДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументСсылка.Установить(ДокументСсылка);
	Для Каждого ЭлементМассива ИЗ ОбъектыДоступа Цикл
		Набор.ДобавитьОбъектыДоступа(ЭлементМассива);
	КонецЦикла;
	Набор.ДвижениеПоРегистру();
	Набор.Записать();

КонецПроцедуры

// Процедура предназначена для изменения значения некоторых реквизитов электронного письма, доступного только для чтения
// Параметры
//  ЭлектронноеПисьмо – ссыслка на документ ЭлектнонноеПисьмо
//  ЗначенияРеквизитов – структура значений реквизитов, где ключ - имя реквизита,
//						 к изменению доступны только ограниченный перечень реквизитов.
Процедура УстановитьРеквизитЭлектронногоПисьма(ЭлектронноеПисьмо, ЗначенияРеквизитов) Экспорт
	
	РазрешенныеКИзмененениюРеквизиты = Новый Структура;
	РазрешенныеКИзмененениюРеквизиты.Вставить("Ответственный");
	РазрешенныеКИзмененениюРеквизиты.Вставить("НеРассмотрено");
	
	ЭлектронноеПисьмоОбъект = ЭлектронноеПисьмо.ПолучитьОбъект();
	Для Каждого КлючИЗначение ИЗ ЗначенияРеквизитов Цикл
		Если РазрешенныеКИзмененениюРеквизиты.Свойство(КлючИЗначение.Ключ) Тогда
			ЭлектронноеПисьмоОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	Попытка
		ЭлектронноеПисьмоОбъект.Записать();	
	Исключение
		Ош = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьПараметрыМеханизмаОграниченияПравДоступа() Экспорт
	ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей = Константы.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Получить();
	//ПараметрыСеанса.ИспользоватьОграничениеПо = Ложь;
	//Если ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей Тогда
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//				   |	ВидыОбъектовДоступа.Ссылка,
	//				   |	МАКСИМУМ(ВЫБОР
	//				   |			КОГДА ПользователиГруппы.Ссылка ЕСТЬ NULL 
	//				   |				ТОГДА ИСТИНА
	//				   |			ИНАЧЕ ВЫБОР
	//				   |					КОГДА НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа ЕСТЬ NULL 
	//				   |						ТОГДА ЛОЖЬ
	//				   |					ИНАЧЕ ИСТИНА
	//				   |				КОНЕЦ
	//				   |		КОНЕЦ) КАК ЕстьОграничение
	//				   |ИЗ
	//				   |	Перечисление.ВидыОбъектовДоступа КАК ВидыОбъектовДоступа
	//				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ПользователиГруппы
	//				   |		ПО (ПользователиГруппы.Пользователь = &ТекущийПОльзователь)
	//				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа
	//				   |		ПО (НазначениеВидовОбъектовДоступа.ГруппаПользователей = ПользователиГруппы.Ссылка)
	//				   |			И (НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ВидыОбъектовДоступа.Ссылка)
	//				   |
	//				   |СГРУППИРОВАТЬ ПО
	//				   |	ВидыОбъектовДоступа.Ссылка";
	//	
	//	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	ВидыОбъектовДоступаЗначения = Метаданные.Перечисления.ВидыОбъектовДоступа.ЗначенияПеречисления; 
	//	Пока Выборка.Следующий() Цикл
	//		ПараметрыСеанса["ИспользоватьОграничениеПо" + ВидыОбъектовДоступаЗначения.Получить(Перечисления.ВидыОбъектовДоступа.Индекс(Выборка.Ссылка)).Имя] = Выборка.ЕстьОграничение;
	//	КонецЦикла;
	//Иначе
	//	
	//	Для Каждого ВидОбъектаДоступа Из Метаданные.Перечисления.ВидыОбъектовДоступа.ЗначенияПеречисления Цикл			
	//		ПараметрыСеанса["ИспользоватьОграничениеПо" + ВидОбъектаДоступа.Имя] = Ложь;			
	//	КонецЦикла;
	//	
	//КонецЕсли;
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТРУКТУРЫ ПОДЧИНЕННОСТИ

Функция ПолучитьСписокПодчиненныхДокументов(ДокументОснование) Экспорт
		
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Для Каждого ЭлементСостава ИЗ Метаданные.КритерииОтбора.СвязанныеДокументы.Состав Цикл
		
		ПутьКДанным = ЭлементСостава.ПолноеИмя();
		СтруктураПутьКДанным = ОбщегоНазначения.РазобратьПутьКОбъектуМетаданных(ПутьКДанным);
		
		ЕСли НЕ ПравоДоступа("Чтение", СтруктураПутьКДанным.Метаданные) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
		
		ТекущаяСтрокаГДЕ = "ГДЕ " + СтруктураПутьКДанным.ВидОбъекта + "." +СтруктураПутьКДанным.ИмяРеквизита + " = &ЗначениеКритерияОтбора";
			
		ИмяТЧ = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ОБЪЕДИНИТЬ
		|ВЫБРАТЬ") + "
		|" + СтруктураПутьКДанным.ВидОбъекта +".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК " + СтруктураПутьКДанным.ВидОбъекта + "
		|" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
		|";
		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ДокументОснование);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьСодержимоеДокументаДляСтруктурыПодчиненности(Ссылка, ИмяТаблицы, МассивРеквизитов) Экспорт
	
	ТекстПолей = "";
	
	Шаблон = "
	|## КАК ##,
	|ВЫБОР КОГДА ##.Дата ЕСТЬ NULL ТОГДА NULL ИНАЧЕ ##.Дата КОНЕЦ КАК ##Дата";
	
	Для Каждого Реквизит ИЗ МассивРеквизитов Цикл
		ТекстПолей = ТекстПолей + ?(ТекстПолей = "", "", ",") + СтрЗаменить(Шаблон, "##", Реквизит);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ " + ТекстПолей + " ИЗ Документ." + ИмяТаблицы + " ГДЕ Ссылка = &Ссылка";	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("Ссылка");
	ТаблицаРезультата.Колонки.Добавить("Дата");	
	ТаблицаРезультата.Колонки.Добавить("Метаданные");	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Для индекс = 1 по Результат.Колонки.Количество() / 2 Цикл
			ДатаДокумента = Выборка[индекс * 2 - 1];
			ЕСли ДатаДокумента = NULL Тогда
				Продолжить;
			КонецЕсли;			
			ЗначениеРеквизита = Выборка[(индекс - 1) * 2];
			СтрокаПоля = ТаблицаРезультата.Добавить();
			СтрокаПоля.Ссылка = ЗначениеРеквизита;
			СтрокаПоля.Дата = ДатаДокумента;			
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаРезультата.Сортировать("Дата");
	Возврат ТаблицаРезультата;
	
КонецФункции
